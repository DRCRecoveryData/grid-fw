
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000de4c  00004000  00004000  00004000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005bc  20000000  00011e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205bc  2**0
                  CONTENTS
  4 .bss          00007794  200005c0  00012410  000205c0  2**4
                  ALLOC
  5 .stack        00010004  20007d54  00019ba4  000205c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000205ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   00091d8e  00000000  00000000  00020643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c44e  00000000  00000000  000b23d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002eef3  00000000  00000000  000be81f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002318  00000000  00000000  000ed712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003318  00000000  00000000  000efa2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00048db6  00000000  00000000  000f2d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000402fd  00000000  00000000  0013baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011ac47  00000000  00000000  0017bdf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006540  00000000  00000000  00296a3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	58 7d 01 20 f1 42 00 00 ed 42 00 00 ed 42 00 00     X}. .B...B...B..
    4010:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    402c:	ed 42 00 00 ed 42 00 00 00 00 00 00 ed 42 00 00     .B...B.......B..
    403c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    404c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    405c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    406c:	89 ab 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .....B...B...B..
    407c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    408c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    409c:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    40ac:	ed 42 00 00 ed 42 00 00 39 a8 00 00 4d a8 00 00     .B...B..9...M...
    40bc:	9d a6 00 00 a9 a6 00 00 b5 a6 00 00 c1 a6 00 00     ................
    40cc:	cd a6 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .....B...B...B..
    40dc:	ed 42 00 00 ed 42 00 00 ed 42 00 00 00 00 00 00     .B...B...B......
	...
    40f4:	41 aa 00 00 6d b5 00 00 81 b5 00 00 95 b5 00 00     A...m...........
    4104:	a9 b5 00 00 bd b5 00 00 d1 b5 00 00 e5 b5 00 00     ................
    4114:	f9 b5 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .....B...B...B..
    4124:	ed 42 00 00 0d b6 00 00 21 b6 00 00 35 b6 00 00     .B......!...5...
    4134:	49 b6 00 00 5d b6 00 00 71 b6 00 00 85 b6 00 00     I...]...q.......
    4144:	99 b6 00 00 ad b6 00 00 c1 b6 00 00 d5 b6 00 00     ................
    4154:	e9 b6 00 00 fd b6 00 00 11 b7 00 00 25 b7 00 00     ............%...
    4164:	39 b7 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     9....B...B...B..
    4174:	ed 42 00 00 00 00 00 00 00 00 00 00 bd d3 00 00     .B..............
    4184:	c9 d3 00 00 d5 d3 00 00 e1 d3 00 00 00 00 00 00     ................
    4194:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41a4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41b4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41c4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41d4:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    41e4:	ed 42 00 00 ed 42 00 00 c5 c0 00 00 d9 c0 00 00     .B...B..........
    41f4:	ed c0 00 00 01 c1 00 00 ed 42 00 00 ed 42 00 00     .........B...B..
    4204:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4214:	ed 42 00 00 31 a3 00 00 45 a3 00 00 59 a3 00 00     .B..1...E...Y...
    4224:	6d a3 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     m....B...B...B..
    4234:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4244:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..
    4254:	ed 42 00 00 ed 42 00 00 ed 42 00 00 ed 42 00 00     .B...B...B...B..

00004264 <__do_global_dtors_aux>:
    4264:	b510      	push	{r4, lr}
    4266:	4c05      	ldr	r4, [pc, #20]	; (427c <__do_global_dtors_aux+0x18>)
    4268:	7823      	ldrb	r3, [r4, #0]
    426a:	b933      	cbnz	r3, 427a <__do_global_dtors_aux+0x16>
    426c:	4b04      	ldr	r3, [pc, #16]	; (4280 <__do_global_dtors_aux+0x1c>)
    426e:	b113      	cbz	r3, 4276 <__do_global_dtors_aux+0x12>
    4270:	4804      	ldr	r0, [pc, #16]	; (4284 <__do_global_dtors_aux+0x20>)
    4272:	f3af 8000 	nop.w
    4276:	2301      	movs	r3, #1
    4278:	7023      	strb	r3, [r4, #0]
    427a:	bd10      	pop	{r4, pc}
    427c:	200005c0 	.word	0x200005c0
    4280:	00000000 	.word	0x00000000
    4284:	00011e4c 	.word	0x00011e4c

00004288 <frame_dummy>:
    4288:	4b0c      	ldr	r3, [pc, #48]	; (42bc <frame_dummy+0x34>)
    428a:	b143      	cbz	r3, 429e <frame_dummy+0x16>
    428c:	480c      	ldr	r0, [pc, #48]	; (42c0 <frame_dummy+0x38>)
    428e:	490d      	ldr	r1, [pc, #52]	; (42c4 <frame_dummy+0x3c>)
    4290:	b510      	push	{r4, lr}
    4292:	f3af 8000 	nop.w
    4296:	480c      	ldr	r0, [pc, #48]	; (42c8 <frame_dummy+0x40>)
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b923      	cbnz	r3, 42a6 <frame_dummy+0x1e>
    429c:	bd10      	pop	{r4, pc}
    429e:	480a      	ldr	r0, [pc, #40]	; (42c8 <frame_dummy+0x40>)
    42a0:	6803      	ldr	r3, [r0, #0]
    42a2:	b933      	cbnz	r3, 42b2 <frame_dummy+0x2a>
    42a4:	4770      	bx	lr
    42a6:	4b09      	ldr	r3, [pc, #36]	; (42cc <frame_dummy+0x44>)
    42a8:	2b00      	cmp	r3, #0
    42aa:	d0f7      	beq.n	429c <frame_dummy+0x14>
    42ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42b0:	4718      	bx	r3
    42b2:	4b06      	ldr	r3, [pc, #24]	; (42cc <frame_dummy+0x44>)
    42b4:	2b00      	cmp	r3, #0
    42b6:	d0f5      	beq.n	42a4 <frame_dummy+0x1c>
    42b8:	4718      	bx	r3
    42ba:	bf00      	nop
    42bc:	00000000 	.word	0x00000000
    42c0:	00011e4c 	.word	0x00011e4c
    42c4:	200005c4 	.word	0x200005c4
    42c8:	00011e4c 	.word	0x00011e4c
    42cc:	00000000 	.word	0x00000000

000042d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    42d0:	b508      	push	{r3, lr}
	system_init();
    42d2:	4b03      	ldr	r3, [pc, #12]	; (42e0 <atmel_start_init+0x10>)
    42d4:	4798      	blx	r3
	usb_init();
    42d6:	4b03      	ldr	r3, [pc, #12]	; (42e4 <atmel_start_init+0x14>)
    42d8:	4798      	blx	r3
	stdio_redirect_init();
    42da:	4b03      	ldr	r3, [pc, #12]	; (42e8 <atmel_start_init+0x18>)
    42dc:	4798      	blx	r3
    42de:	bd08      	pop	{r3, pc}
    42e0:	00004e15 	.word	0x00004e15
    42e4:	0000f675 	.word	0x0000f675
    42e8:	0000e285 	.word	0x0000e285

000042ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    42ec:	e7fe      	b.n	42ec <Dummy_Handler>
	...

000042f0 <Reset_Handler>:
{
    42f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    42f2:	4b1c      	ldr	r3, [pc, #112]	; (4364 <Reset_Handler+0x74>)
    42f4:	4a1c      	ldr	r2, [pc, #112]	; (4368 <Reset_Handler+0x78>)
    42f6:	429a      	cmp	r2, r3
    42f8:	d010      	beq.n	431c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    42fa:	4b1c      	ldr	r3, [pc, #112]	; (436c <Reset_Handler+0x7c>)
    42fc:	4a19      	ldr	r2, [pc, #100]	; (4364 <Reset_Handler+0x74>)
    42fe:	429a      	cmp	r2, r3
    4300:	d20c      	bcs.n	431c <Reset_Handler+0x2c>
    4302:	3b01      	subs	r3, #1
    4304:	1a9b      	subs	r3, r3, r2
    4306:	f023 0303 	bic.w	r3, r3, #3
    430a:	3304      	adds	r3, #4
    430c:	4413      	add	r3, r2
    430e:	4916      	ldr	r1, [pc, #88]	; (4368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    4310:	f851 0b04 	ldr.w	r0, [r1], #4
    4314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    4318:	429a      	cmp	r2, r3
    431a:	d1f9      	bne.n	4310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    431c:	4b14      	ldr	r3, [pc, #80]	; (4370 <Reset_Handler+0x80>)
    431e:	4a15      	ldr	r2, [pc, #84]	; (4374 <Reset_Handler+0x84>)
    4320:	429a      	cmp	r2, r3
    4322:	d20a      	bcs.n	433a <Reset_Handler+0x4a>
    4324:	3b01      	subs	r3, #1
    4326:	1a9b      	subs	r3, r3, r2
    4328:	f023 0303 	bic.w	r3, r3, #3
    432c:	3304      	adds	r3, #4
    432e:	4413      	add	r3, r2
                *pDest++ = 0;
    4330:	2100      	movs	r1, #0
    4332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    4336:	4293      	cmp	r3, r2
    4338:	d1fb      	bne.n	4332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    433a:	4b0f      	ldr	r3, [pc, #60]	; (4378 <Reset_Handler+0x88>)
    433c:	4a0f      	ldr	r2, [pc, #60]	; (437c <Reset_Handler+0x8c>)
    433e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    4344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    434c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    4358:	4b09      	ldr	r3, [pc, #36]	; (4380 <Reset_Handler+0x90>)
    435a:	4798      	blx	r3
        main();
    435c:	4b09      	ldr	r3, [pc, #36]	; (4384 <Reset_Handler+0x94>)
    435e:	4798      	blx	r3
    4360:	e7fe      	b.n	4360 <Reset_Handler+0x70>
    4362:	bf00      	nop
    4364:	20000000 	.word	0x20000000
    4368:	00011e4c 	.word	0x00011e4c
    436c:	200005bc 	.word	0x200005bc
    4370:	20007d54 	.word	0x20007d54
    4374:	200005c0 	.word	0x200005c0
    4378:	e000ed00 	.word	0xe000ed00
    437c:	00004000 	.word	0x00004000
    4380:	0000fe55 	.word	0x0000fe55
    4384:	0000dda5 	.word	0x0000dda5

00004388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
    4388:	b5f0      	push	{r4, r5, r6, r7, lr}
    438a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    438c:	4a1b      	ldr	r2, [pc, #108]	; (43fc <ADC_0_init+0x74>)
    438e:	6a13      	ldr	r3, [r2, #32]
    4390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    4396:	2241      	movs	r2, #65	; 0x41
    4398:	4b19      	ldr	r3, [pc, #100]	; (4400 <ADC_0_init+0x78>)
    439a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    439e:	4e19      	ldr	r6, [pc, #100]	; (4404 <ADC_0_init+0x7c>)
    43a0:	4d19      	ldr	r5, [pc, #100]	; (4408 <ADC_0_init+0x80>)
    43a2:	2400      	movs	r4, #0
    43a4:	9402      	str	r4, [sp, #8]
    43a6:	4b19      	ldr	r3, [pc, #100]	; (440c <ADC_0_init+0x84>)
    43a8:	9301      	str	r3, [sp, #4]
    43aa:	2301      	movs	r3, #1
    43ac:	9300      	str	r3, [sp, #0]
    43ae:	4623      	mov	r3, r4
    43b0:	4632      	mov	r2, r6
    43b2:	4917      	ldr	r1, [pc, #92]	; (4410 <ADC_0_init+0x88>)
    43b4:	4628      	mov	r0, r5
    43b6:	4f17      	ldr	r7, [pc, #92]	; (4414 <ADC_0_init+0x8c>)
    43b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
    43ba:	2310      	movs	r3, #16
    43bc:	1d32      	adds	r2, r6, #4
    43be:	4621      	mov	r1, r4
    43c0:	4628      	mov	r0, r5
    43c2:	4c15      	ldr	r4, [pc, #84]	; (4418 <ADC_0_init+0x90>)
    43c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    43c6:	4b15      	ldr	r3, [pc, #84]	; (441c <ADC_0_init+0x94>)
    43c8:	2280      	movs	r2, #128	; 0x80
    43ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    43cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    43d0:	629a      	str	r2, [r3, #40]	; 0x28
    43d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    43d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    43d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    43dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    43e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    43e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    43e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    43ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    43f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    43f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
    43f8:	b005      	add	sp, #20
    43fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43fc:	40000800 	.word	0x40000800
    4400:	40001c00 	.word	0x40001c00
    4404:	200005dc 	.word	0x200005dc
    4408:	20000fc8 	.word	0x20000fc8
    440c:	200010c4 	.word	0x200010c4
    4410:	43001c00 	.word	0x43001c00
    4414:	00008e59 	.word	0x00008e59
    4418:	00008ea9 	.word	0x00008ea9
    441c:	41008000 	.word	0x41008000

00004420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
    4420:	b5f0      	push	{r4, r5, r6, r7, lr}
    4422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    4424:	4a1e      	ldr	r2, [pc, #120]	; (44a0 <ADC_1_init+0x80>)
    4426:	6a13      	ldr	r3, [r2, #32]
    4428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    442c:	6213      	str	r3, [r2, #32]
    442e:	2241      	movs	r2, #65	; 0x41
    4430:	4b1c      	ldr	r3, [pc, #112]	; (44a4 <ADC_1_init+0x84>)
    4432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    4436:	4e1c      	ldr	r6, [pc, #112]	; (44a8 <ADC_1_init+0x88>)
    4438:	4d1c      	ldr	r5, [pc, #112]	; (44ac <ADC_1_init+0x8c>)
    443a:	2400      	movs	r4, #0
    443c:	9402      	str	r4, [sp, #8]
    443e:	4b1c      	ldr	r3, [pc, #112]	; (44b0 <ADC_1_init+0x90>)
    4440:	9301      	str	r3, [sp, #4]
    4442:	2301      	movs	r3, #1
    4444:	9300      	str	r3, [sp, #0]
    4446:	4623      	mov	r3, r4
    4448:	f106 0214 	add.w	r2, r6, #20
    444c:	4919      	ldr	r1, [pc, #100]	; (44b4 <ADC_1_init+0x94>)
    444e:	4628      	mov	r0, r5
    4450:	4f19      	ldr	r7, [pc, #100]	; (44b8 <ADC_1_init+0x98>)
    4452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
    4454:	2310      	movs	r3, #16
    4456:	f106 0218 	add.w	r2, r6, #24
    445a:	4621      	mov	r1, r4
    445c:	4628      	mov	r0, r5
    445e:	4c17      	ldr	r4, [pc, #92]	; (44bc <ADC_1_init+0x9c>)
    4460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4462:	4b17      	ldr	r3, [pc, #92]	; (44c0 <ADC_1_init+0xa0>)
    4464:	2204      	movs	r2, #4
    4466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    446a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    446e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    447a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
    447e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    448a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    448e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
    449a:	b005      	add	sp, #20
    449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    449e:	bf00      	nop
    44a0:	40000800 	.word	0x40000800
    44a4:	40001c00 	.word	0x40001c00
    44a8:	200005dc 	.word	0x200005dc
    44ac:	2000119c 	.word	0x2000119c
    44b0:	20000f64 	.word	0x20000f64
    44b4:	43002000 	.word	0x43002000
    44b8:	00008e59 	.word	0x00008e59
    44bc:	00008ea9 	.word	0x00008ea9
    44c0:	41008000 	.word	0x41008000

000044c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
    44c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    44c6:	4a05      	ldr	r2, [pc, #20]	; (44dc <CRC_0_init+0x18>)
    44c8:	6993      	ldr	r3, [r2, #24]
    44ca:	f043 0302 	orr.w	r3, r3, #2
    44ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
    44d0:	4903      	ldr	r1, [pc, #12]	; (44e0 <CRC_0_init+0x1c>)
    44d2:	4804      	ldr	r0, [pc, #16]	; (44e4 <CRC_0_init+0x20>)
    44d4:	4b04      	ldr	r3, [pc, #16]	; (44e8 <CRC_0_init+0x24>)
    44d6:	4798      	blx	r3
    44d8:	bd08      	pop	{r3, pc}
    44da:	bf00      	nop
    44dc:	40000800 	.word	0x40000800
    44e0:	41002000 	.word	0x41002000
    44e4:	20000f60 	.word	0x20000f60
    44e8:	0000902d 	.word	0x0000902d

000044ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    44ec:	b508      	push	{r3, lr}
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <EVENT_SYSTEM_0_init+0x28>)
    44f0:	2240      	movs	r2, #64	; 0x40
    44f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    44f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    44fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    44fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    4502:	4a05      	ldr	r2, [pc, #20]	; (4518 <EVENT_SYSTEM_0_init+0x2c>)
    4504:	6993      	ldr	r3, [r2, #24]
    4506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    450a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    450c:	4b03      	ldr	r3, [pc, #12]	; (451c <EVENT_SYSTEM_0_init+0x30>)
    450e:	4798      	blx	r3
    4510:	bd08      	pop	{r3, pc}
    4512:	bf00      	nop
    4514:	40001c00 	.word	0x40001c00
    4518:	40000800 	.word	0x40000800
    451c:	0000908d 	.word	0x0000908d

00004520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    4520:	4a02      	ldr	r2, [pc, #8]	; (452c <FLASH_0_CLOCK_init+0xc>)
    4522:	6913      	ldr	r3, [r2, #16]
    4524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4528:	6113      	str	r3, [r2, #16]
    452a:	4770      	bx	lr
    452c:	40000800 	.word	0x40000800

00004530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    4530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    4532:	4b03      	ldr	r3, [pc, #12]	; (4540 <FLASH_0_init+0x10>)
    4534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    4536:	4903      	ldr	r1, [pc, #12]	; (4544 <FLASH_0_init+0x14>)
    4538:	4803      	ldr	r0, [pc, #12]	; (4548 <FLASH_0_init+0x18>)
    453a:	4b04      	ldr	r3, [pc, #16]	; (454c <FLASH_0_init+0x1c>)
    453c:	4798      	blx	r3
    453e:	bd08      	pop	{r3, pc}
    4540:	00004521 	.word	0x00004521
    4544:	41004000 	.word	0x41004000
    4548:	20000f44 	.word	0x20000f44
    454c:	000090ad 	.word	0x000090ad

00004550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
    4550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4552:	4b5a      	ldr	r3, [pc, #360]	; (46bc <QSPI_INSTANCE_PORT_init+0x16c>)
    4554:	f44f 6500 	mov.w	r5, #2048	; 0x800
    4558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    455c:	4a58      	ldr	r2, [pc, #352]	; (46c0 <QSPI_INSTANCE_PORT_init+0x170>)
    455e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4562:	4858      	ldr	r0, [pc, #352]	; (46c4 <QSPI_INSTANCE_PORT_init+0x174>)
    4564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    456c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    4578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    457c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    458c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4594:	f44f 7280 	mov.w	r2, #256	; 0x100
    4598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    459a:	494b      	ldr	r1, [pc, #300]	; (46c8 <QSPI_INSTANCE_PORT_init+0x178>)
    459c:	6299      	str	r1, [r3, #40]	; 0x28
    459e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
    45a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    45a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    45aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    45b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    45b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    45ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    45be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    45c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    45c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    45ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    45ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    45d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    45d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    45d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
    45dc:	6299      	str	r1, [r3, #40]	; 0x28
    45de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    45e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    45e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
    45e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    45ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
    45f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    45f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    45fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    45fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    460a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    460e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    4612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4614:	4a2d      	ldr	r2, [pc, #180]	; (46cc <QSPI_INSTANCE_PORT_init+0x17c>)
    4616:	629a      	str	r2, [r3, #40]	; 0x28
    4618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    461a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    461c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
    4620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
    462c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    463c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    464a:	4a21      	ldr	r2, [pc, #132]	; (46d0 <QSPI_INSTANCE_PORT_init+0x180>)
    464c:	629a      	str	r2, [r3, #40]	; 0x28
    464e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    4656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    465a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    465e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
    4662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    466a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    466e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    467e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4682:	4a14      	ldr	r2, [pc, #80]	; (46d4 <QSPI_INSTANCE_PORT_init+0x184>)
    4684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    468c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
    4690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    469c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    46a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    46a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    46a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    46ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    46b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    46b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
    46b8:	bc30      	pop	{r4, r5}
    46ba:	4770      	bx	lr
    46bc:	41008000 	.word	0x41008000
    46c0:	40020800 	.word	0x40020800
    46c4:	c0020000 	.word	0xc0020000
    46c8:	40000100 	.word	0x40000100
    46cc:	40000400 	.word	0x40000400
    46d0:	40000800 	.word	0x40000800
    46d4:	40020400 	.word	0x40020400

000046d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    46d8:	4b06      	ldr	r3, [pc, #24]	; (46f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
    46da:	691a      	ldr	r2, [r3, #16]
    46dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    46e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    46e2:	691a      	ldr	r2, [r3, #16]
    46e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    46e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    46ea:	69da      	ldr	r2, [r3, #28]
    46ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    46f0:	61da      	str	r2, [r3, #28]
    46f2:	4770      	bx	lr
    46f4:	40000800 	.word	0x40000800

000046f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
    46f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
    46fa:	4b04      	ldr	r3, [pc, #16]	; (470c <QSPI_INSTANCE_init+0x14>)
    46fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
    46fe:	4904      	ldr	r1, [pc, #16]	; (4710 <QSPI_INSTANCE_init+0x18>)
    4700:	4804      	ldr	r0, [pc, #16]	; (4714 <QSPI_INSTANCE_init+0x1c>)
    4702:	4b05      	ldr	r3, [pc, #20]	; (4718 <QSPI_INSTANCE_init+0x20>)
    4704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
    4706:	4b05      	ldr	r3, [pc, #20]	; (471c <QSPI_INSTANCE_init+0x24>)
    4708:	4798      	blx	r3
    470a:	bd08      	pop	{r3, pc}
    470c:	000046d9 	.word	0x000046d9
    4710:	42003400 	.word	0x42003400
    4714:	20001208 	.word	0x20001208
    4718:	000091c9 	.word	0x000091c9
    471c:	00004551 	.word	0x00004551

00004720 <USART_EAST_CLOCK_init>:
    4720:	4b06      	ldr	r3, [pc, #24]	; (473c <USART_EAST_CLOCK_init+0x1c>)
    4722:	2241      	movs	r2, #65	; 0x41
    4724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    4728:	2242      	movs	r2, #66	; 0x42
    472a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    472e:	4a04      	ldr	r2, [pc, #16]	; (4740 <USART_EAST_CLOCK_init+0x20>)
    4730:	6953      	ldr	r3, [r2, #20]
    4732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4736:	6153      	str	r3, [r2, #20]
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	40001c00 	.word	0x40001c00
    4740:	40000800 	.word	0x40000800

00004744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4744:	4b10      	ldr	r3, [pc, #64]	; (4788 <USART_EAST_PORT_init+0x44>)
    4746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    474a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    474e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    475a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    475e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    476a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    476e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    477a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    477e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    4786:	4770      	bx	lr
    4788:	41008000 	.word	0x41008000

0000478c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
    478c:	b510      	push	{r4, lr}
    478e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
    4790:	4b06      	ldr	r3, [pc, #24]	; (47ac <USART_EAST_init+0x20>)
    4792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    4794:	2300      	movs	r3, #0
    4796:	9300      	str	r3, [sp, #0]
    4798:	2310      	movs	r3, #16
    479a:	4a05      	ldr	r2, [pc, #20]	; (47b0 <USART_EAST_init+0x24>)
    479c:	4905      	ldr	r1, [pc, #20]	; (47b4 <USART_EAST_init+0x28>)
    479e:	4806      	ldr	r0, [pc, #24]	; (47b8 <USART_EAST_init+0x2c>)
    47a0:	4c06      	ldr	r4, [pc, #24]	; (47bc <USART_EAST_init+0x30>)
    47a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
    47a4:	4b06      	ldr	r3, [pc, #24]	; (47c0 <USART_EAST_init+0x34>)
    47a6:	4798      	blx	r3
}
    47a8:	b002      	add	sp, #8
    47aa:	bd10      	pop	{r4, pc}
    47ac:	00004721 	.word	0x00004721
    47b0:	20000604 	.word	0x20000604
    47b4:	40003000 	.word	0x40003000
    47b8:	20000ff4 	.word	0x20000ff4
    47bc:	000097a9 	.word	0x000097a9
    47c0:	00004745 	.word	0x00004745

000047c4 <USART_NORTH_CLOCK_init>:
    47c4:	4b06      	ldr	r3, [pc, #24]	; (47e0 <USART_NORTH_CLOCK_init+0x1c>)
    47c6:	2241      	movs	r2, #65	; 0x41
    47c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    47cc:	2242      	movs	r2, #66	; 0x42
    47ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    47d2:	4a04      	ldr	r2, [pc, #16]	; (47e4 <USART_NORTH_CLOCK_init+0x20>)
    47d4:	6953      	ldr	r3, [r2, #20]
    47d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    47da:	6153      	str	r3, [r2, #20]
    47dc:	4770      	bx	lr
    47de:	bf00      	nop
    47e0:	40001c00 	.word	0x40001c00
    47e4:	40000800 	.word	0x40000800

000047e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    47e8:	4b10      	ldr	r3, [pc, #64]	; (482c <USART_NORTH_PORT_init+0x44>)
    47ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    47ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    47f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    47f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    47fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    47fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    480a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    480e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    481a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    481e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
    482a:	4770      	bx	lr
    482c:	41008000 	.word	0x41008000

00004830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
    4830:	b510      	push	{r4, lr}
    4832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
    4834:	4b06      	ldr	r3, [pc, #24]	; (4850 <USART_NORTH_init+0x20>)
    4836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    4838:	2300      	movs	r3, #0
    483a:	9300      	str	r3, [sp, #0]
    483c:	2310      	movs	r3, #16
    483e:	4a05      	ldr	r2, [pc, #20]	; (4854 <USART_NORTH_init+0x24>)
    4840:	4905      	ldr	r1, [pc, #20]	; (4858 <USART_NORTH_init+0x28>)
    4842:	4806      	ldr	r0, [pc, #24]	; (485c <USART_NORTH_init+0x2c>)
    4844:	4c06      	ldr	r4, [pc, #24]	; (4860 <USART_NORTH_init+0x30>)
    4846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
    4848:	4b06      	ldr	r3, [pc, #24]	; (4864 <USART_NORTH_init+0x34>)
    484a:	4798      	blx	r3
}
    484c:	b002      	add	sp, #8
    484e:	bd10      	pop	{r4, pc}
    4850:	000047c5 	.word	0x000047c5
    4854:	20000614 	.word	0x20000614
    4858:	40003400 	.word	0x40003400
    485c:	20001048 	.word	0x20001048
    4860:	000097a9 	.word	0x000097a9
    4864:	000047e9 	.word	0x000047e9

00004868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4868:	4b10      	ldr	r3, [pc, #64]	; (48ac <GRID_AUX_PORT_init+0x44>)
    486a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
    486e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    487a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    487e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    488a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
    488e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    489a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    489e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    48a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    48a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    48aa:	4770      	bx	lr
    48ac:	41008000 	.word	0x41008000

000048b0 <GRID_AUX_CLOCK_init>:
    48b0:	4b06      	ldr	r3, [pc, #24]	; (48cc <GRID_AUX_CLOCK_init+0x1c>)
    48b2:	2241      	movs	r2, #65	; 0x41
    48b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    48b8:	2242      	movs	r2, #66	; 0x42
    48ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    48be:	4a04      	ldr	r2, [pc, #16]	; (48d0 <GRID_AUX_CLOCK_init+0x20>)
    48c0:	6993      	ldr	r3, [r2, #24]
    48c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    48c6:	6193      	str	r3, [r2, #24]
    48c8:	4770      	bx	lr
    48ca:	bf00      	nop
    48cc:	40001c00 	.word	0x40001c00
    48d0:	40000800 	.word	0x40000800

000048d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
    48d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
    48d6:	4b05      	ldr	r3, [pc, #20]	; (48ec <GRID_AUX_init+0x18>)
    48d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
    48da:	2200      	movs	r2, #0
    48dc:	4904      	ldr	r1, [pc, #16]	; (48f0 <GRID_AUX_init+0x1c>)
    48de:	4805      	ldr	r0, [pc, #20]	; (48f4 <GRID_AUX_init+0x20>)
    48e0:	4b05      	ldr	r3, [pc, #20]	; (48f8 <GRID_AUX_init+0x24>)
    48e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
    48e4:	4b05      	ldr	r3, [pc, #20]	; (48fc <GRID_AUX_init+0x28>)
    48e6:	4798      	blx	r3
    48e8:	bd08      	pop	{r3, pc}
    48ea:	bf00      	nop
    48ec:	000048b1 	.word	0x000048b1
    48f0:	41012000 	.word	0x41012000
    48f4:	20000fbc 	.word	0x20000fbc
    48f8:	00009925 	.word	0x00009925
    48fc:	00004869 	.word	0x00004869

00004900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4900:	4b2b      	ldr	r3, [pc, #172]	; (49b0 <UI_SPI_PORT_init+0xb0>)
    4902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    4906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    490a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    490e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    4916:	4a27      	ldr	r2, [pc, #156]	; (49b4 <UI_SPI_PORT_init+0xb4>)
    4918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    491c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
    4920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    492c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    493c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    494c:	4a1a      	ldr	r2, [pc, #104]	; (49b8 <UI_SPI_PORT_init+0xb8>)
    494e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
    4956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    495a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    495e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    496a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    496e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4974:	4a11      	ldr	r2, [pc, #68]	; (49bc <UI_SPI_PORT_init+0xbc>)
    4976:	629a      	str	r2, [r3, #40]	; 0x28
    4978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    497c:	3210      	adds	r2, #16
    497e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    4984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    498c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
    4990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    499c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    49a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    49a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    49a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    49ac:	4770      	bx	lr
    49ae:	bf00      	nop
    49b0:	41008000 	.word	0x41008000
    49b4:	c0000010 	.word	0xc0000010
    49b8:	c0000020 	.word	0xc0000020
    49bc:	40020000 	.word	0x40020000

000049c0 <UI_SPI_CLOCK_init>:
    49c0:	4b06      	ldr	r3, [pc, #24]	; (49dc <UI_SPI_CLOCK_init+0x1c>)
    49c2:	2241      	movs	r2, #65	; 0x41
    49c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    49c8:	2243      	movs	r2, #67	; 0x43
    49ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    49ce:	4a04      	ldr	r2, [pc, #16]	; (49e0 <UI_SPI_CLOCK_init+0x20>)
    49d0:	6993      	ldr	r3, [r2, #24]
    49d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    49d6:	6193      	str	r3, [r2, #24]
    49d8:	4770      	bx	lr
    49da:	bf00      	nop
    49dc:	40001c00 	.word	0x40001c00
    49e0:	40000800 	.word	0x40000800

000049e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
    49e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
    49e6:	4b04      	ldr	r3, [pc, #16]	; (49f8 <UI_SPI_init+0x14>)
    49e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
    49ea:	4904      	ldr	r1, [pc, #16]	; (49fc <UI_SPI_init+0x18>)
    49ec:	4804      	ldr	r0, [pc, #16]	; (4a00 <UI_SPI_init+0x1c>)
    49ee:	4b05      	ldr	r3, [pc, #20]	; (4a04 <UI_SPI_init+0x20>)
    49f0:	4798      	blx	r3
	UI_SPI_PORT_init();
    49f2:	4b05      	ldr	r3, [pc, #20]	; (4a08 <UI_SPI_init+0x24>)
    49f4:	4798      	blx	r3
    49f6:	bd08      	pop	{r3, pc}
    49f8:	000049c1 	.word	0x000049c1
    49fc:	41014000 	.word	0x41014000
    4a00:	20000ebc 	.word	0x20000ebc
    4a04:	00009359 	.word	0x00009359
    4a08:	00004901 	.word	0x00004901

00004a0c <USART_WEST_CLOCK_init>:
    4a0c:	4b06      	ldr	r3, [pc, #24]	; (4a28 <USART_WEST_CLOCK_init+0x1c>)
    4a0e:	2241      	movs	r2, #65	; 0x41
    4a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    4a14:	2242      	movs	r2, #66	; 0x42
    4a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    4a1a:	4a04      	ldr	r2, [pc, #16]	; (4a2c <USART_WEST_CLOCK_init+0x20>)
    4a1c:	6a13      	ldr	r3, [r2, #32]
    4a1e:	f043 0301 	orr.w	r3, r3, #1
    4a22:	6213      	str	r3, [r2, #32]
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop
    4a28:	40001c00 	.word	0x40001c00
    4a2c:	40000800 	.word	0x40000800

00004a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a30:	4b10      	ldr	r3, [pc, #64]	; (4a74 <USART_WEST_PORT_init+0x44>)
    4a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    4a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    4a72:	4770      	bx	lr
    4a74:	41008000 	.word	0x41008000

00004a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
    4a78:	b510      	push	{r4, lr}
    4a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
    4a7c:	4b07      	ldr	r3, [pc, #28]	; (4a9c <USART_WEST_init+0x24>)
    4a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    4a80:	2300      	movs	r3, #0
    4a82:	9300      	str	r3, [sp, #0]
    4a84:	2310      	movs	r3, #16
    4a86:	4a06      	ldr	r2, [pc, #24]	; (4aa0 <USART_WEST_init+0x28>)
    4a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    4a8c:	4805      	ldr	r0, [pc, #20]	; (4aa4 <USART_WEST_init+0x2c>)
    4a8e:	4c06      	ldr	r4, [pc, #24]	; (4aa8 <USART_WEST_init+0x30>)
    4a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
    4a92:	4b06      	ldr	r3, [pc, #24]	; (4aac <USART_WEST_init+0x34>)
    4a94:	4798      	blx	r3
}
    4a96:	b002      	add	sp, #8
    4a98:	bd10      	pop	{r4, pc}
    4a9a:	bf00      	nop
    4a9c:	00004a0d 	.word	0x00004a0d
    4aa0:	20000624 	.word	0x20000624
    4aa4:	200010fc 	.word	0x200010fc
    4aa8:	000097a9 	.word	0x000097a9
    4aac:	00004a31 	.word	0x00004a31

00004ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ab0:	4b16      	ldr	r3, [pc, #88]	; (4b0c <SYS_I2C_PORT_init+0x5c>)
    4ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
    4ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
    4ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
    4aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
    4b0a:	4770      	bx	lr
    4b0c:	41008000 	.word	0x41008000

00004b10 <SYS_I2C_CLOCK_init>:
    4b10:	4b06      	ldr	r3, [pc, #24]	; (4b2c <SYS_I2C_CLOCK_init+0x1c>)
    4b12:	2241      	movs	r2, #65	; 0x41
    4b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    4b18:	2242      	movs	r2, #66	; 0x42
    4b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    4b1e:	4a04      	ldr	r2, [pc, #16]	; (4b30 <SYS_I2C_CLOCK_init+0x20>)
    4b20:	6a13      	ldr	r3, [r2, #32]
    4b22:	f043 0302 	orr.w	r3, r3, #2
    4b26:	6213      	str	r3, [r2, #32]
    4b28:	4770      	bx	lr
    4b2a:	bf00      	nop
    4b2c:	40001c00 	.word	0x40001c00
    4b30:	40000800 	.word	0x40000800

00004b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
    4b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
    4b36:	4b04      	ldr	r3, [pc, #16]	; (4b48 <SYS_I2C_init+0x14>)
    4b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
    4b3a:	4904      	ldr	r1, [pc, #16]	; (4b4c <SYS_I2C_init+0x18>)
    4b3c:	4804      	ldr	r0, [pc, #16]	; (4b50 <SYS_I2C_init+0x1c>)
    4b3e:	4b05      	ldr	r3, [pc, #20]	; (4b54 <SYS_I2C_init+0x20>)
    4b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
    4b42:	4b05      	ldr	r3, [pc, #20]	; (4b58 <SYS_I2C_init+0x24>)
    4b44:	4798      	blx	r3
    4b46:	bd08      	pop	{r3, pc}
    4b48:	00004b11 	.word	0x00004b11
    4b4c:	43000400 	.word	0x43000400
    4b50:	20000f7c 	.word	0x20000f7c
    4b54:	00009169 	.word	0x00009169
    4b58:	00004ab1 	.word	0x00004ab1

00004b5c <USART_SOUTH_CLOCK_init>:
    4b5c:	4b06      	ldr	r3, [pc, #24]	; (4b78 <USART_SOUTH_CLOCK_init+0x1c>)
    4b5e:	2241      	movs	r2, #65	; 0x41
    4b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    4b64:	2242      	movs	r2, #66	; 0x42
    4b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    4b6a:	4a04      	ldr	r2, [pc, #16]	; (4b7c <USART_SOUTH_CLOCK_init+0x20>)
    4b6c:	6a13      	ldr	r3, [r2, #32]
    4b6e:	f043 0304 	orr.w	r3, r3, #4
    4b72:	6213      	str	r3, [r2, #32]
    4b74:	4770      	bx	lr
    4b76:	bf00      	nop
    4b78:	40001c00 	.word	0x40001c00
    4b7c:	40000800 	.word	0x40000800

00004b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4b80:	4b10      	ldr	r3, [pc, #64]	; (4bc4 <USART_SOUTH_PORT_init+0x44>)
    4b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    4b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
    4bc2:	4770      	bx	lr
    4bc4:	41008000 	.word	0x41008000

00004bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
    4bc8:	b510      	push	{r4, lr}
    4bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
    4bcc:	4b06      	ldr	r3, [pc, #24]	; (4be8 <USART_SOUTH_init+0x20>)
    4bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    4bd0:	2300      	movs	r3, #0
    4bd2:	9300      	str	r3, [sp, #0]
    4bd4:	2310      	movs	r3, #16
    4bd6:	4a05      	ldr	r2, [pc, #20]	; (4bec <USART_SOUTH_init+0x24>)
    4bd8:	4905      	ldr	r1, [pc, #20]	; (4bf0 <USART_SOUTH_init+0x28>)
    4bda:	4806      	ldr	r0, [pc, #24]	; (4bf4 <USART_SOUTH_init+0x2c>)
    4bdc:	4c06      	ldr	r4, [pc, #24]	; (4bf8 <USART_SOUTH_init+0x30>)
    4bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
    4be0:	4b06      	ldr	r3, [pc, #24]	; (4bfc <USART_SOUTH_init+0x34>)
    4be2:	4798      	blx	r3
}
    4be4:	b002      	add	sp, #8
    4be6:	bd10      	pop	{r4, pc}
    4be8:	00004b5d 	.word	0x00004b5d
    4bec:	20000634 	.word	0x20000634
    4bf0:	43000800 	.word	0x43000800
    4bf4:	2000114c 	.word	0x2000114c
    4bf8:	000097a9 	.word	0x000097a9
    4bfc:	00004b81 	.word	0x00004b81

00004c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c00:	4b29      	ldr	r3, [pc, #164]	; (4ca8 <GRID_LED_PORT_init+0xa8>)
    4c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4c12:	4926      	ldr	r1, [pc, #152]	; (4cac <GRID_LED_PORT_init+0xac>)
    4c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    4c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    4c48:	4919      	ldr	r1, [pc, #100]	; (4cb0 <GRID_LED_PORT_init+0xb0>)
    4c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
    4c74:	629a      	str	r2, [r3, #40]	; 0x28
    4c76:	4a0f      	ldr	r2, [pc, #60]	; (4cb4 <GRID_LED_PORT_init+0xb4>)
    4c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
    4c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
    4c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    4ca6:	4770      	bx	lr
    4ca8:	41008000 	.word	0x41008000
    4cac:	c0004000 	.word	0xc0004000
    4cb0:	c0008000 	.word	0xc0008000
    4cb4:	c0024000 	.word	0xc0024000

00004cb8 <GRID_LED_CLOCK_init>:
    4cb8:	4b06      	ldr	r3, [pc, #24]	; (4cd4 <GRID_LED_CLOCK_init+0x1c>)
    4cba:	2241      	movs	r2, #65	; 0x41
    4cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    4cc0:	2242      	movs	r2, #66	; 0x42
    4cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    4cc6:	4a04      	ldr	r2, [pc, #16]	; (4cd8 <GRID_LED_CLOCK_init+0x20>)
    4cc8:	6a13      	ldr	r3, [r2, #32]
    4cca:	f043 0308 	orr.w	r3, r3, #8
    4cce:	6213      	str	r3, [r2, #32]
    4cd0:	4770      	bx	lr
    4cd2:	bf00      	nop
    4cd4:	40001c00 	.word	0x40001c00
    4cd8:	40000800 	.word	0x40000800

00004cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
    4cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
    4cde:	4b04      	ldr	r3, [pc, #16]	; (4cf0 <GRID_LED_init+0x14>)
    4ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
    4ce2:	4904      	ldr	r1, [pc, #16]	; (4cf4 <GRID_LED_init+0x18>)
    4ce4:	4804      	ldr	r0, [pc, #16]	; (4cf8 <GRID_LED_init+0x1c>)
    4ce6:	4b05      	ldr	r3, [pc, #20]	; (4cfc <GRID_LED_init+0x20>)
    4ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
    4cea:	4b05      	ldr	r3, [pc, #20]	; (4d00 <GRID_LED_init+0x24>)
    4cec:	4798      	blx	r3
    4cee:	bd08      	pop	{r3, pc}
    4cf0:	00004cb9 	.word	0x00004cb9
    4cf4:	43000c00 	.word	0x43000c00
    4cf8:	20001098 	.word	0x20001098
    4cfc:	000094a9 	.word	0x000094a9
    4d00:	00004c01 	.word	0x00004c01

00004d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
    4d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
    4d06:	4802      	ldr	r0, [pc, #8]	; (4d10 <delay_driver_init+0xc>)
    4d08:	4b02      	ldr	r3, [pc, #8]	; (4d14 <delay_driver_init+0x10>)
    4d0a:	4798      	blx	r3
    4d0c:	bd08      	pop	{r3, pc}
    4d0e:	bf00      	nop
    4d10:	e000e010 	.word	0xe000e010
    4d14:	00009039 	.word	0x00009039

00004d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d18:	4b1e      	ldr	r3, [pc, #120]	; (4d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
    4d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d24:	6299      	str	r1, [r3, #40]	; 0x28
    4d26:	481c      	ldr	r0, [pc, #112]	; (4d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
    4d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    4d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
    4d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    4d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    4d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    4d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4d5e:	6299      	str	r1, [r3, #40]	; 0x28
    4d60:	490e      	ldr	r1, [pc, #56]	; (4d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
    4d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
    4d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
    4d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    4d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    4d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    4d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    4d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    4d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    4d92:	4770      	bx	lr
    4d94:	41008000 	.word	0x41008000
    4d98:	c0000100 	.word	0xc0000100
    4d9c:	c0000200 	.word	0xc0000200

00004da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
    4da0:	2241      	movs	r2, #65	; 0x41
    4da2:	4b07      	ldr	r3, [pc, #28]	; (4dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    4da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    4da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    4dac:	691a      	ldr	r2, [r3, #16]
    4dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    4db4:	699a      	ldr	r2, [r3, #24]
    4db6:	f042 0201 	orr.w	r2, r2, #1
    4dba:	619a      	str	r2, [r3, #24]
    4dbc:	4770      	bx	lr
    4dbe:	bf00      	nop
    4dc0:	40001c00 	.word	0x40001c00

00004dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
    4dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    4dc6:	4b03      	ldr	r3, [pc, #12]	; (4dd4 <USB_DEVICE_INSTANCE_init+0x10>)
    4dc8:	4798      	blx	r3
	usb_d_init();
    4dca:	4b03      	ldr	r3, [pc, #12]	; (4dd8 <USB_DEVICE_INSTANCE_init+0x14>)
    4dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
    4dce:	4b03      	ldr	r3, [pc, #12]	; (4ddc <USB_DEVICE_INSTANCE_init+0x18>)
    4dd0:	4798      	blx	r3
    4dd2:	bd08      	pop	{r3, pc}
    4dd4:	00004da1 	.word	0x00004da1
    4dd8:	00009bb1 	.word	0x00009bb1
    4ddc:	00004d19 	.word	0x00004d19

00004de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    4de0:	4a02      	ldr	r2, [pc, #8]	; (4dec <WDT_0_CLOCK_init+0xc>)
    4de2:	6953      	ldr	r3, [r2, #20]
    4de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4de8:	6153      	str	r3, [r2, #20]
    4dea:	4770      	bx	lr
    4dec:	40000800 	.word	0x40000800

00004df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    4df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    4df2:	4b04      	ldr	r3, [pc, #16]	; (4e04 <WDT_0_init+0x14>)
    4df4:	4798      	blx	r3
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);

	wdt->dev.hw = (void *)hw;
    4df6:	4804      	ldr	r0, [pc, #16]	; (4e08 <WDT_0_init+0x18>)
    4df8:	4b04      	ldr	r3, [pc, #16]	; (4e0c <WDT_0_init+0x1c>)
    4dfa:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
    4dfc:	4b04      	ldr	r3, [pc, #16]	; (4e10 <WDT_0_init+0x20>)
    4dfe:	4798      	blx	r3
    4e00:	bd08      	pop	{r3, pc}
    4e02:	bf00      	nop
    4e04:	00004de1 	.word	0x00004de1
    4e08:	20001044 	.word	0x20001044
    4e0c:	40002000 	.word	0x40002000
    4e10:	0000d3ed 	.word	0x0000d3ed

00004e14 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
    4e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    4e18:	4ba3      	ldr	r3, [pc, #652]	; (50a8 <system_init+0x294>)
    4e1a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4e1c:	4ba3      	ldr	r3, [pc, #652]	; (50ac <system_init+0x298>)
    4e1e:	2220      	movs	r2, #32
    4e20:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e22:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4e28:	629a      	str	r2, [r3, #40]	; 0x28
    4e2a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4e2e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e30:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e34:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e38:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4e3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    4e40:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e42:	4e9b      	ldr	r6, [pc, #620]	; (50b0 <system_init+0x29c>)
    4e44:	629e      	str	r6, [r3, #40]	; 0x28
    4e46:	499b      	ldr	r1, [pc, #620]	; (50b4 <system_init+0x2a0>)
    4e48:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4e4a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
    4e4e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    4e52:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e56:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e5e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4e62:	2180      	movs	r1, #128	; 0x80
    4e64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e68:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4e6c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
    4e70:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4e74:	4d90      	ldr	r5, [pc, #576]	; (50b8 <system_init+0x2a4>)
    4e76:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4e7a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
    4e7e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    4e82:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4e86:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    4e8a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4e8e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    4e96:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4e9a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4e9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4ea2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    4ea6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4eaa:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
    4eae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4eb2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4eb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    4eba:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4ebe:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ec2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
    4ec6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
    4eca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ece:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
    4ed2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4ed6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4eda:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    4ede:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4ee2:	4c76      	ldr	r4, [pc, #472]	; (50bc <system_init+0x2a8>)
    4ee4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
    4ee8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4eec:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
    4ef0:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
    4ef4:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4ef8:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
    4efc:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f00:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f04:	f44f 6400 	mov.w	r4, #2048	; 0x800
    4f08:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f0c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 514c <system_init+0x338>
    4f10:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
    4f14:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    4f1c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
    4f20:	f045 0504 	orr.w	r5, r5, #4
    4f24:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4f28:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f2c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f30:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f34:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f38:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4f3c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f40:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
    4f44:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f48:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f50:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    4f54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    4f58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f5c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
    4f60:	4a57      	ldr	r2, [pc, #348]	; (50c0 <system_init+0x2ac>)
    4f62:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    4f66:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
    4f6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4f6e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f72:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4f7a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    4f82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4f86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4f8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4f92:	494c      	ldr	r1, [pc, #304]	; (50c4 <system_init+0x2b0>)
    4f94:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4f98:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    4f9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fa0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fa4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    4fa8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fac:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fb0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4fb4:	4944      	ldr	r1, [pc, #272]	; (50c8 <system_init+0x2b4>)
    4fb6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fba:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fbe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fc2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4fc6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    4fca:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    4fce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    4fd2:	4a3e      	ldr	r2, [pc, #248]	; (50cc <system_init+0x2b8>)
    4fd4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    4fd8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
    4fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    4fe0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    4fe4:	4b3a      	ldr	r3, [pc, #232]	; (50d0 <system_init+0x2bc>)
    4fe6:	4798      	blx	r3
	ADC_1_init();
    4fe8:	4b3a      	ldr	r3, [pc, #232]	; (50d4 <system_init+0x2c0>)
    4fea:	4798      	blx	r3

	CRC_0_init();
    4fec:	4b3a      	ldr	r3, [pc, #232]	; (50d8 <system_init+0x2c4>)
    4fee:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    4ff0:	4b3a      	ldr	r3, [pc, #232]	; (50dc <system_init+0x2c8>)
    4ff2:	4798      	blx	r3

	FLASH_0_init();
    4ff4:	4b3a      	ldr	r3, [pc, #232]	; (50e0 <system_init+0x2cc>)
    4ff6:	4798      	blx	r3

	QSPI_INSTANCE_init();
    4ff8:	4b3a      	ldr	r3, [pc, #232]	; (50e4 <system_init+0x2d0>)
    4ffa:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    4ffc:	4c3a      	ldr	r4, [pc, #232]	; (50e8 <system_init+0x2d4>)
    4ffe:	6963      	ldr	r3, [r4, #20]
    5000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5004:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    5006:	4b39      	ldr	r3, [pc, #228]	; (50ec <system_init+0x2d8>)
    5008:	4798      	blx	r3
    500a:	4602      	mov	r2, r0
    500c:	4938      	ldr	r1, [pc, #224]	; (50f0 <system_init+0x2dc>)
    500e:	4839      	ldr	r0, [pc, #228]	; (50f4 <system_init+0x2e0>)
    5010:	4d39      	ldr	r5, [pc, #228]	; (50f8 <system_init+0x2e4>)
    5012:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    5014:	4b39      	ldr	r3, [pc, #228]	; (50fc <system_init+0x2e8>)
    5016:	4798      	blx	r3
	USART_NORTH_init();
    5018:	4b39      	ldr	r3, [pc, #228]	; (5100 <system_init+0x2ec>)
    501a:	4798      	blx	r3

	GRID_AUX_init();
    501c:	4b39      	ldr	r3, [pc, #228]	; (5104 <system_init+0x2f0>)
    501e:	4798      	blx	r3

	UI_SPI_init();
    5020:	4b39      	ldr	r3, [pc, #228]	; (5108 <system_init+0x2f4>)
    5022:	4798      	blx	r3
	USART_WEST_init();
    5024:	4b39      	ldr	r3, [pc, #228]	; (510c <system_init+0x2f8>)
    5026:	4798      	blx	r3

	SYS_I2C_init();
    5028:	4b39      	ldr	r3, [pc, #228]	; (5110 <system_init+0x2fc>)
    502a:	4798      	blx	r3
	USART_SOUTH_init();
    502c:	4b39      	ldr	r3, [pc, #228]	; (5114 <system_init+0x300>)
    502e:	4798      	blx	r3

	GRID_LED_init();
    5030:	4b39      	ldr	r3, [pc, #228]	; (5118 <system_init+0x304>)
    5032:	4798      	blx	r3

	delay_driver_init();
    5034:	4b39      	ldr	r3, [pc, #228]	; (511c <system_init+0x308>)
    5036:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    5038:	6963      	ldr	r3, [r4, #20]
    503a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    503e:	6163      	str	r3, [r4, #20]
    5040:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    5044:	f04f 0840 	mov.w	r8, #64	; 0x40
    5048:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    504c:	4e34      	ldr	r6, [pc, #208]	; (5120 <system_init+0x30c>)
    504e:	47b0      	blx	r6
    5050:	4602      	mov	r2, r0
    5052:	4934      	ldr	r1, [pc, #208]	; (5124 <system_init+0x310>)
    5054:	4834      	ldr	r0, [pc, #208]	; (5128 <system_init+0x314>)
    5056:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    5058:	6963      	ldr	r3, [r4, #20]
    505a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    505e:	6163      	str	r3, [r4, #20]
    5060:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    5064:	47b0      	blx	r6
    5066:	4602      	mov	r2, r0
    5068:	4930      	ldr	r1, [pc, #192]	; (512c <system_init+0x318>)
    506a:	4831      	ldr	r0, [pc, #196]	; (5130 <system_init+0x31c>)
    506c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    506e:	69a3      	ldr	r3, [r4, #24]
    5070:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5074:	61a3      	str	r3, [r4, #24]
    5076:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    507a:	47b0      	blx	r6
    507c:	4602      	mov	r2, r0
    507e:	492d      	ldr	r1, [pc, #180]	; (5134 <system_init+0x320>)
    5080:	482d      	ldr	r0, [pc, #180]	; (5138 <system_init+0x324>)
    5082:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    5084:	69a3      	ldr	r3, [r4, #24]
    5086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    508a:	61a3      	str	r3, [r4, #24]
    508c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    5090:	47b0      	blx	r6
    5092:	4602      	mov	r2, r0
    5094:	4929      	ldr	r1, [pc, #164]	; (513c <system_init+0x328>)
    5096:	482a      	ldr	r0, [pc, #168]	; (5140 <system_init+0x32c>)
    5098:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    509a:	4b2a      	ldr	r3, [pc, #168]	; (5144 <system_init+0x330>)
    509c:	4798      	blx	r3

	WDT_0_init();
    509e:	4b2a      	ldr	r3, [pc, #168]	; (5148 <system_init+0x334>)
    50a0:	4798      	blx	r3
    50a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50a6:	bf00      	nop
    50a8:	0000a3b1 	.word	0x0000a3b1
    50ac:	41008000 	.word	0x41008000
    50b0:	40020000 	.word	0x40020000
    50b4:	c0020020 	.word	0xc0020020
    50b8:	c0020000 	.word	0xc0020000
    50bc:	40028000 	.word	0x40028000
    50c0:	c0020004 	.word	0xc0020004
    50c4:	c0000008 	.word	0xc0000008
    50c8:	c0000010 	.word	0xc0000010
    50cc:	c0000020 	.word	0xc0000020
    50d0:	00004389 	.word	0x00004389
    50d4:	00004421 	.word	0x00004421
    50d8:	000044c5 	.word	0x000044c5
    50dc:	000044ed 	.word	0x000044ed
    50e0:	00004531 	.word	0x00004531
    50e4:	000046f9 	.word	0x000046f9
    50e8:	40000800 	.word	0x40000800
    50ec:	0000ab81 	.word	0x0000ab81
    50f0:	40002400 	.word	0x40002400
    50f4:	20000f04 	.word	0x20000f04
    50f8:	000095d1 	.word	0x000095d1
    50fc:	0000478d 	.word	0x0000478d
    5100:	00004831 	.word	0x00004831
    5104:	000048d5 	.word	0x000048d5
    5108:	000049e5 	.word	0x000049e5
    510c:	00004a79 	.word	0x00004a79
    5110:	00004b35 	.word	0x00004b35
    5114:	00004bc9 	.word	0x00004bc9
    5118:	00004cdd 	.word	0x00004cdd
    511c:	00004d05 	.word	0x00004d05
    5120:	0000c0bd 	.word	0x0000c0bd
    5124:	40003800 	.word	0x40003800
    5128:	200011e8 	.word	0x200011e8
    512c:	40003c00 	.word	0x40003c00
    5130:	200010dc 	.word	0x200010dc
    5134:	4101a000 	.word	0x4101a000
    5138:	20000f24 	.word	0x20000f24
    513c:	4101c000 	.word	0x4101c000
    5140:	200011c8 	.word	0x200011c8
    5144:	00004dc5 	.word	0x00004dc5
    5148:	00004df1 	.word	0x00004df1
    514c:	40020800 	.word	0x40020800

00005150 <grid_d51_init>:
	
}



void grid_d51_init(){
    5150:	b508      	push	{r3, lr}
	
	#ifdef NDEBUG	
	grid_d51_verify_user_row();
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "USER ROW CHECK!");
	#else
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    5152:	4d05      	ldr	r5, [pc, #20]	; (5168 <grid_d51_init+0x18>)
    5154:	4905      	ldr	r1, [pc, #20]	; (516c <grid_d51_init+0x1c>)
    5156:	4628      	mov	r0, r5
    5158:	4c05      	ldr	r4, [pc, #20]	; (5170 <grid_d51_init+0x20>)
    515a:	47a0      	blx	r4
	{
	}
	
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    515c:	4905      	ldr	r1, [pc, #20]	; (5174 <grid_d51_init+0x24>)
    515e:	4628      	mov	r0, r5
    5160:	47a0      	blx	r4
	
	#ifdef HARDWARETEST
	
	#include "grid/grid_hardwaretest.h"
	
	grid_hardwaretest_main();
    5162:	4b05      	ldr	r3, [pc, #20]	; (5178 <grid_d51_init+0x28>)
    5164:	4798      	blx	r3
    5166:	e7fe      	b.n	5166 <grid_d51_init+0x16>
    5168:	000113ac 	.word	0x000113ac
    516c:	00011398 	.word	0x00011398
    5170:	0001002d 	.word	0x0001002d
    5174:	000113d4 	.word	0x000113d4
    5178:	00005669 	.word	0x00005669

0000517c <grid_hardwaretest_led_test_init>:
		
	}

}

void grid_hardwaretest_led_test_init(struct grid_led_model* mod, uint8_t num){
    517c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5180:	b082      	sub	sp, #8
    5182:	4680      	mov	r8, r0
    5184:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    518a:	4b0c      	ldr	r3, [pc, #48]	; (51bc <grid_hardwaretest_led_test_init+0x40>)
    518c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	
	gpio_set_pin_level(UI_PWR_EN, true);
	
	grid_led_init(mod, num);
    5190:	4b0b      	ldr	r3, [pc, #44]	; (51c0 <grid_hardwaretest_led_test_init+0x44>)
    5192:	4798      	blx	r3
	
	for(uint8_t i=0; i<num; i++){
    5194:	b176      	cbz	r6, 51b4 <grid_hardwaretest_led_test_init+0x38>
    5196:	3e01      	subs	r6, #1
    5198:	b2f6      	uxtb	r6, r6
    519a:	3601      	adds	r6, #1
    519c:	2400      	movs	r4, #0
		
		grid_led_set_color(mod, i, 0, 0, 0);
    519e:	4625      	mov	r5, r4
    51a0:	4f08      	ldr	r7, [pc, #32]	; (51c4 <grid_hardwaretest_led_test_init+0x48>)
    51a2:	9500      	str	r5, [sp, #0]
    51a4:	462b      	mov	r3, r5
    51a6:	462a      	mov	r2, r5
    51a8:	4621      	mov	r1, r4
    51aa:	4640      	mov	r0, r8
    51ac:	47b8      	blx	r7
    51ae:	3401      	adds	r4, #1
	for(uint8_t i=0; i<num; i++){
    51b0:	42b4      	cmp	r4, r6
    51b2:	d1f6      	bne.n	51a2 <grid_hardwaretest_led_test_init+0x26>
		
	}

	
}
    51b4:	b002      	add	sp, #8
    51b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51ba:	bf00      	nop
    51bc:	41008000 	.word	0x41008000
    51c0:	00006a89 	.word	0x00006a89
    51c4:	00006549 	.word	0x00006549

000051c8 <grid_hardwaretest_led_test>:


void grid_hardwaretest_led_test(struct grid_led_model* mod, uint32_t loop){
    51c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51cc:	b083      	sub	sp, #12
    51ce:	4605      	mov	r5, r0
		
		
	for(uint8_t i=0; i<mod->led_number; i++){
    51d0:	7843      	ldrb	r3, [r0, #1]
    51d2:	b333      	cbz	r3, 5222 <grid_hardwaretest_led_test+0x5a>
	
		grid_led_set_color(mod, i, loop/10%128*(loop/1280%3==0), loop/10%128*(loop/1280%3==1), loop/10%128*(loop/1280%3==2));
    51d4:	4e18      	ldr	r6, [pc, #96]	; (5238 <grid_hardwaretest_led_test+0x70>)
    51d6:	fba6 3601 	umull	r3, r6, r6, r1
    51da:	f3c6 07c6 	ubfx	r7, r6, #3, #7
    51de:	0ab6      	lsrs	r6, r6, #10
    51e0:	4b16      	ldr	r3, [pc, #88]	; (523c <grid_hardwaretest_led_test+0x74>)
    51e2:	fba3 2306 	umull	r2, r3, r3, r6
    51e6:	085b      	lsrs	r3, r3, #1
    51e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    51ec:	1ab3      	subs	r3, r6, r2
    51ee:	4296      	cmp	r6, r2
    51f0:	bf0c      	ite	eq
    51f2:	46b9      	moveq	r9, r7
    51f4:	f04f 0900 	movne.w	r9, #0
    51f8:	2b01      	cmp	r3, #1
    51fa:	bf0c      	ite	eq
    51fc:	46b8      	moveq	r8, r7
    51fe:	f04f 0800 	movne.w	r8, #0
    5202:	2b02      	cmp	r3, #2
    5204:	bf18      	it	ne
    5206:	2700      	movne	r7, #0
    5208:	2400      	movs	r4, #0
    520a:	4e0d      	ldr	r6, [pc, #52]	; (5240 <grid_hardwaretest_led_test+0x78>)
    520c:	9700      	str	r7, [sp, #0]
    520e:	4643      	mov	r3, r8
    5210:	464a      	mov	r2, r9
    5212:	4621      	mov	r1, r4
    5214:	4628      	mov	r0, r5
    5216:	47b0      	blx	r6
	for(uint8_t i=0; i<mod->led_number; i++){
    5218:	3401      	adds	r4, #1
    521a:	b2e4      	uxtb	r4, r4
    521c:	786b      	ldrb	r3, [r5, #1]
    521e:	42a3      	cmp	r3, r4
    5220:	d8f4      	bhi.n	520c <grid_hardwaretest_led_test+0x44>
		
		
	//grid_led_render_all(mod);
		
		
	while(grid_led_hardware_is_transfer_completed(mod) != 1){
    5222:	4c08      	ldr	r4, [pc, #32]	; (5244 <grid_hardwaretest_led_test+0x7c>)
    5224:	4628      	mov	r0, r5
    5226:	47a0      	blx	r4
    5228:	2801      	cmp	r0, #1
    522a:	d1fb      	bne.n	5224 <grid_hardwaretest_led_test+0x5c>
			
	}
	grid_led_hardware_start_transfer(mod);
    522c:	4628      	mov	r0, r5
    522e:	4b06      	ldr	r3, [pc, #24]	; (5248 <grid_hardwaretest_led_test+0x80>)
    5230:	4798      	blx	r3
	
}
    5232:	b003      	add	sp, #12
    5234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5238:	cccccccd 	.word	0xcccccccd
    523c:	aaaaaaab 	.word	0xaaaaaaab
    5240:	00006549 	.word	0x00006549
    5244:	00006b79 	.word	0x00006b79
    5248:	00006b4d 	.word	0x00006b4d

0000524c <grid_hardwaretest_led_test_photo>:

void grid_hardwaretest_led_test_photo(struct grid_led_model* mod, uint32_t loop){
    524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5250:	b08b      	sub	sp, #44	; 0x2c
    5252:	4680      	mov	r8, r0

	uint8_t color_r[4] = {255, 127, 255, 0};
    5254:	22ff      	movs	r2, #255	; 0xff
    5256:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    525a:	237f      	movs	r3, #127	; 0x7f
    525c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    5260:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
    5264:	2100      	movs	r1, #0
    5266:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
	uint8_t color_g[4] = {0, 255, 127, 127};
    526a:	f88d 1020 	strb.w	r1, [sp, #32]
    526e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    5272:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    5276:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	uint8_t color_b[4] = {127, 127, 0, 255};
    527a:	f88d 301c 	strb.w	r3, [sp, #28]
    527e:	f88d 301d 	strb.w	r3, [sp, #29]
    5282:	f88d 101e 	strb.w	r1, [sp, #30]
    5286:	f88d 201f 	strb.w	r2, [sp, #31]
	
	
	for(uint8_t i=0; i<mod->led_number; i++){
    528a:	7843      	ldrb	r3, [r0, #1]
    528c:	2b00      	cmp	r3, #0
    528e:	d067      	beq.n	5360 <grid_hardwaretest_led_test_photo+0x114>
    5290:	468a      	mov	sl, r1
		
		uint8_t intensity = (rand()%255)*(rand()%255)/256.0/2;
    5292:	f8df 9108 	ldr.w	r9, [pc, #264]	; 539c <grid_hardwaretest_led_test_photo+0x150>
    5296:	47c8      	blx	r9
    5298:	4604      	mov	r4, r0
    529a:	47c8      	blx	r9
    529c:	4b36      	ldr	r3, [pc, #216]	; (5378 <grid_hardwaretest_led_test_photo+0x12c>)
    529e:	fb83 1204 	smull	r1, r2, r3, r4
    52a2:	1911      	adds	r1, r2, r4
    52a4:	17e2      	asrs	r2, r4, #31
    52a6:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
    52aa:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
    52ae:	1aa4      	subs	r4, r4, r2
    52b0:	fb83 2300 	smull	r2, r3, r3, r0
    52b4:	181a      	adds	r2, r3, r0
    52b6:	17c3      	asrs	r3, r0, #31
    52b8:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
    52bc:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
    52c0:	1ac0      	subs	r0, r0, r3
    52c2:	4e2e      	ldr	r6, [pc, #184]	; (537c <grid_hardwaretest_led_test_photo+0x130>)
    52c4:	fb00 f004 	mul.w	r0, r0, r4
    52c8:	47b0      	blx	r6
    52ca:	4d2d      	ldr	r5, [pc, #180]	; (5380 <grid_hardwaretest_led_test_photo+0x134>)
    52cc:	2200      	movs	r2, #0
    52ce:	4b2d      	ldr	r3, [pc, #180]	; (5384 <grid_hardwaretest_led_test_photo+0x138>)
    52d0:	47a8      	blx	r5
    52d2:	2200      	movs	r2, #0
    52d4:	4b2c      	ldr	r3, [pc, #176]	; (5388 <grid_hardwaretest_led_test_photo+0x13c>)
    52d6:	47a8      	blx	r5
    52d8:	4f2c      	ldr	r7, [pc, #176]	; (538c <grid_hardwaretest_led_test_photo+0x140>)
    52da:	47b8      	blx	r7
    52dc:	b2c0      	uxtb	r0, r0
    52de:	2805      	cmp	r0, #5
    52e0:	bf38      	it	cc
    52e2:	2005      	movcc	r0, #5
			intensity = 250;
		}
		
		uint8_t group = (i+4)%4;
		
		grid_led_set_color(mod, i, intensity/256.0*color_r[group], intensity/256.0*color_g[group], intensity/256.0*color_b[group]);
    52e4:	28fa      	cmp	r0, #250	; 0xfa
    52e6:	bf28      	it	cs
    52e8:	20fa      	movcs	r0, #250	; 0xfa
    52ea:	47b0      	blx	r6
    52ec:	2200      	movs	r2, #0
    52ee:	4b25      	ldr	r3, [pc, #148]	; (5384 <grid_hardwaretest_led_test_photo+0x138>)
    52f0:	47a8      	blx	r5
    52f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
		uint8_t group = (i+4)%4;
    52f6:	f10a 0404 	add.w	r4, sl, #4
    52fa:	4263      	negs	r3, r4
    52fc:	f004 0403 	and.w	r4, r4, #3
    5300:	f003 0303 	and.w	r3, r3, #3
    5304:	bf58      	it	pl
    5306:	425c      	negpl	r4, r3
		grid_led_set_color(mod, i, intensity/256.0*color_r[group], intensity/256.0*color_g[group], intensity/256.0*color_b[group]);
    5308:	ab0a      	add	r3, sp, #40	; 0x28
    530a:	fa53 f484 	uxtab	r4, r3, r4
    530e:	f814 0c08 	ldrb.w	r0, [r4, #-8]
    5312:	47b0      	blx	r6
    5314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5318:	47a8      	blx	r5
    531a:	47b8      	blx	r7
    531c:	fa1f fb80 	uxth.w	fp, r0
    5320:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    5324:	47b0      	blx	r6
    5326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    532a:	47a8      	blx	r5
    532c:	47b8      	blx	r7
    532e:	b283      	uxth	r3, r0
    5330:	9305      	str	r3, [sp, #20]
    5332:	f814 0c0c 	ldrb.w	r0, [r4, #-12]
    5336:	47b0      	blx	r6
    5338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    533c:	47a8      	blx	r5
    533e:	47b8      	blx	r7
    5340:	b280      	uxth	r0, r0
    5342:	9000      	str	r0, [sp, #0]
    5344:	465b      	mov	r3, fp
    5346:	9a05      	ldr	r2, [sp, #20]
    5348:	4651      	mov	r1, sl
    534a:	4640      	mov	r0, r8
    534c:	4c10      	ldr	r4, [pc, #64]	; (5390 <grid_hardwaretest_led_test_photo+0x144>)
    534e:	47a0      	blx	r4
	for(uint8_t i=0; i<mod->led_number; i++){
    5350:	f10a 0a01 	add.w	sl, sl, #1
    5354:	fa5f fa8a 	uxtb.w	sl, sl
    5358:	f898 3001 	ldrb.w	r3, [r8, #1]
    535c:	4553      	cmp	r3, sl
    535e:	d89a      	bhi.n	5296 <grid_hardwaretest_led_test_photo+0x4a>
	
	
	//grid_led_render_all(mod);
	
	
	while(grid_led_hardware_is_transfer_completed(mod) != 1){
    5360:	4c0c      	ldr	r4, [pc, #48]	; (5394 <grid_hardwaretest_led_test_photo+0x148>)
    5362:	4640      	mov	r0, r8
    5364:	47a0      	blx	r4
    5366:	2801      	cmp	r0, #1
    5368:	d1fb      	bne.n	5362 <grid_hardwaretest_led_test_photo+0x116>
		
	}
	grid_led_hardware_start_transfer(mod);
    536a:	4640      	mov	r0, r8
    536c:	4b0a      	ldr	r3, [pc, #40]	; (5398 <grid_hardwaretest_led_test_photo+0x14c>)
    536e:	4798      	blx	r3
	
}
    5370:	b00b      	add	sp, #44	; 0x2c
    5372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5376:	bf00      	nop
    5378:	80808081 	.word	0x80808081
    537c:	0000f925 	.word	0x0000f925
    5380:	0000f9f1 	.word	0x0000f9f1
    5384:	3f700000 	.word	0x3f700000
    5388:	3fe00000 	.word	0x3fe00000
    538c:	0000fe15 	.word	0x0000fe15
    5390:	00006549 	.word	0x00006549
    5394:	00006b79 	.word	0x00006b79
    5398:	00006b4d 	.word	0x00006b4d
    539c:	00010125 	.word	0x00010125

000053a0 <grid_hardwaretest_port_test>:


void grid_hardwaretest_port_test(uint32_t loop){
    53a0:	b410      	push	{r4}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    53a2:	4baa      	ldr	r3, [pc, #680]	; (564c <grid_hardwaretest_port_test+0x2ac>)
    53a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    53a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    53ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    53b0:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    53b4:	4aa6      	ldr	r2, [pc, #664]	; (5650 <grid_hardwaretest_port_test+0x2b0>)
    53b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    53ba:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
    53be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    53c2:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    53c6:	2280      	movs	r2, #128	; 0x80
    53c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    53cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    53d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    53d4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    53d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    53dc:	f893 40c7 	ldrb.w	r4, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    53e0:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    53e4:	f883 40c7 	strb.w	r4, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    53e8:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
    53ec:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    53f0:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    53f4:	4c97      	ldr	r4, [pc, #604]	; (5654 <grid_hardwaretest_port_test+0x2b4>)
    53f6:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    53fa:	f893 415b 	ldrb.w	r4, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
    53fe:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5402:	f883 415b 	strb.w	r4, [r3, #347]	; 0x15b
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5406:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    540a:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    540e:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5412:	4c91      	ldr	r4, [pc, #580]	; (5658 <grid_hardwaretest_port_test+0x2b8>)
    5414:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5418:	f893 415c 	ldrb.w	r4, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
    541c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    5420:	f883 415c 	strb.w	r4, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5424:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    5428:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    542c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5430:	4c8a      	ldr	r4, [pc, #552]	; (565c <grid_hardwaretest_port_test+0x2bc>)
    5432:	f8c3 4128 	str.w	r4, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5436:	f893 4151 	ldrb.w	r4, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
    543a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    543e:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5442:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    5446:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    544a:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    544e:	4984      	ldr	r1, [pc, #528]	; (5660 <grid_hardwaretest_port_test+0x2c0>)
    5450:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5454:	f893 1150 	ldrb.w	r1, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
    5458:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    545c:	f883 1150 	strb.w	r1, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    5464:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5468:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    546c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5470:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5474:	f893 114d 	ldrb.w	r1, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
    5478:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    547c:	f883 114d 	strb.w	r1, [r3, #333]	; 0x14d
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    5480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    5484:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    5488:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    548c:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
    5490:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    5494:	f893 114c 	ldrb.w	r1, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
    5498:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    549c:	f883 114c 	strb.w	r1, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    54a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    54a4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    54a8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    54ac:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    54b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    54b4:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    54b8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    54bc:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    54c0:	f44f 7100 	mov.w	r1, #512	; 0x200
    54c4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    54c8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    54cc:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    54d0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    54d4:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    54d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    54dc:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(PB09, GPIO_PIN_FUNCTION_OFF);
			

		
	if (loop%1000 == 0){
    54e0:	4b60      	ldr	r3, [pc, #384]	; (5664 <grid_hardwaretest_port_test+0x2c4>)
    54e2:	fba3 2300 	umull	r2, r3, r3, r0
    54e6:	099b      	lsrs	r3, r3, #6
    54e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    54ec:	fb02 0313 	mls	r3, r2, r3, r0
    54f0:	2b00      	cmp	r3, #0
    54f2:	d154      	bne.n	559e <grid_hardwaretest_port_test+0x1fe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    54f4:	4a55      	ldr	r2, [pc, #340]	; (564c <grid_hardwaretest_port_test+0x2ac>)
    54f6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    54fa:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    54fe:	2180      	movs	r1, #128	; 0x80
    5500:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    5504:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    5508:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    550c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5510:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    5514:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    5518:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    551c:	f8c2 4114 	str.w	r4, [r2, #276]	; 0x114
    5520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    5524:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    5528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    552c:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
    5530:	f44f 7180 	mov.w	r1, #256	; 0x100
    5534:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
    5538:	f44f 7100 	mov.w	r1, #512	; 0x200
    553c:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
			
		gpio_set_pin_level(PB08, true);
		gpio_set_pin_level(PB09, true);
			
	}
	if (loop%1000 == 750){
    5540:	f240 22ee 	movw	r2, #750	; 0x2ee
    5544:	4293      	cmp	r3, r2
    5546:	d127      	bne.n	5598 <grid_hardwaretest_port_test+0x1f8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5548:	4b40      	ldr	r3, [pc, #256]	; (564c <grid_hardwaretest_port_test+0x2ac>)
    554a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    554e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5552:	2280      	movs	r2, #128	; 0x80
    5554:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5558:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    555c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5564:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5568:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    556c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5570:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5574:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    557c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5584:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    5588:	f44f 7280 	mov.w	r2, #256	; 0x100
    558c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    5590:	f44f 7200 	mov.w	r2, #512	; 0x200
    5594:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	}
		

	
	
}
    5598:	f85d 4b04 	ldr.w	r4, [sp], #4
    559c:	4770      	bx	lr
	if (loop%1000 == 250){
    559e:	2bfa      	cmp	r3, #250	; 0xfa
    55a0:	d128      	bne.n	55f4 <grid_hardwaretest_port_test+0x254>
    55a2:	4b2a      	ldr	r3, [pc, #168]	; (564c <grid_hardwaretest_port_test+0x2ac>)
    55a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    55a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    55ac:	2280      	movs	r2, #128	; 0x80
    55ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    55b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    55b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    55be:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    55c6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    55ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    55d6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    55de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    55e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    55e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    55ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    55ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    55f2:	e7d1      	b.n	5598 <grid_hardwaretest_port_test+0x1f8>
	if (loop%1000 == 500){
    55f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    55f8:	d1a2      	bne.n	5540 <grid_hardwaretest_port_test+0x1a0>
    55fa:	4b14      	ldr	r3, [pc, #80]	; (564c <grid_hardwaretest_port_test+0x2ac>)
    55fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    5600:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5604:	2280      	movs	r2, #128	; 0x80
    5606:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    560a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    560e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5616:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    561a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    561e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5626:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    562a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    562e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5632:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5636:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    563a:	f44f 7280 	mov.w	r2, #256	; 0x100
    563e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    5642:	f44f 7200 	mov.w	r2, #512	; 0x200
    5646:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    564a:	e7a5      	b.n	5598 <grid_hardwaretest_port_test+0x1f8>
    564c:	41008000 	.word	0x41008000
    5650:	c0000004 	.word	0xc0000004
    5654:	c0000800 	.word	0xc0000800
    5658:	c0001000 	.word	0xc0001000
    565c:	c0000002 	.word	0xc0000002
    5660:	c0000001 	.word	0xc0000001
    5664:	10624dd3 	.word	0x10624dd3

00005668 <grid_hardwaretest_main>:
void grid_hardwaretest_main(){
    5668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    566c:	b083      	sub	sp, #12
	printf("Hardware Test Init");
    566e:	482f      	ldr	r0, [pc, #188]	; (572c <grid_hardwaretest_main+0xc4>)
    5670:	4b2f      	ldr	r3, [pc, #188]	; (5730 <grid_hardwaretest_main+0xc8>)
    5672:	4798      	blx	r3
	grid_hardwaretest_led_test_init(&grid_led_state, 16);
    5674:	2110      	movs	r1, #16
    5676:	482f      	ldr	r0, [pc, #188]	; (5734 <grid_hardwaretest_main+0xcc>)
    5678:	4b2f      	ldr	r3, [pc, #188]	; (5738 <grid_hardwaretest_main+0xd0>)
    567a:	4798      	blx	r3
	uint8_t mode_changed = 1;
    567c:	f04f 0801 	mov.w	r8, #1
	uint8_t button_last = 1;
    5680:	46c2      	mov	sl, r8
	uint8_t testmode = 1;
    5682:	4645      	mov	r5, r8
	uint32_t counter = 0;
    5684:	2600      	movs	r6, #0
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    5686:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 5754 <grid_hardwaretest_main+0xec>
				grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    568a:	4f2c      	ldr	r7, [pc, #176]	; (573c <grid_hardwaretest_main+0xd4>)
    568c:	e028      	b.n	56e0 <grid_hardwaretest_main+0x78>
			button_last = 1;
    568e:	f04f 0a01 	mov.w	sl, #1
		if (testmode == 0){
    5692:	2d00      	cmp	r5, #0
    5694:	d140      	bne.n	5718 <grid_hardwaretest_main+0xb0>
			if (mode_changed){
    5696:	f1b8 0f00 	cmp.w	r8, #0
    569a:	d101      	bne.n	56a0 <grid_hardwaretest_main+0x38>
    569c:	4645      	mov	r5, r8
    569e:	e019      	b.n	56d4 <grid_hardwaretest_main+0x6c>
				grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    56a0:	4c24      	ldr	r4, [pc, #144]	; (5734 <grid_hardwaretest_main+0xcc>)
    56a2:	4631      	mov	r1, r6
    56a4:	4620      	mov	r0, r4
    56a6:	47b8      	blx	r7
				grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    56a8:	4631      	mov	r1, r6
    56aa:	4620      	mov	r0, r4
    56ac:	47b8      	blx	r7
				for (uint8_t i=0; i<grid_sys_get_hwcfg()/4; i++){
    56ae:	2500      	movs	r5, #0
    56b0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 5758 <grid_hardwaretest_main+0xf0>
					grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    56b4:	46a0      	mov	r8, r4
				for (uint8_t i=0; i<grid_sys_get_hwcfg()/4; i++){
    56b6:	e005      	b.n	56c4 <grid_hardwaretest_main+0x5c>
					grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    56b8:	4631      	mov	r1, r6
    56ba:	4640      	mov	r0, r8
    56bc:	47b8      	blx	r7
					grid_hardwaretest_led_test_photo(&grid_led_state, counter);
    56be:	4631      	mov	r1, r6
    56c0:	4640      	mov	r0, r8
    56c2:	47b8      	blx	r7
    56c4:	b2ec      	uxtb	r4, r5
				for (uint8_t i=0; i<grid_sys_get_hwcfg()/4; i++){
    56c6:	47c8      	blx	r9
    56c8:	ebb4 0f90 	cmp.w	r4, r0, lsr #2
    56cc:	f105 0501 	add.w	r5, r5, #1
    56d0:	d3f2      	bcc.n	56b8 <grid_hardwaretest_main+0x50>
    56d2:	2500      	movs	r5, #0
		delay_ms(1);
    56d4:	2001      	movs	r0, #1
    56d6:	4b1a      	ldr	r3, [pc, #104]	; (5740 <grid_hardwaretest_main+0xd8>)
    56d8:	4798      	blx	r3
		counter++;			
    56da:	3601      	adds	r6, #1
		mode_changed = 0;	
    56dc:	f04f 0800 	mov.w	r8, #0
    56e0:	a801      	add	r0, sp, #4
    56e2:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    56e4:	4b17      	ldr	r3, [pc, #92]	; (5744 <grid_hardwaretest_main+0xdc>)
    56e6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    56ea:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    56ee:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    56f2:	4054      	eors	r4, r2
    56f4:	400c      	ands	r4, r1
    56f6:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    56f8:	a801      	add	r0, sp, #4
    56fa:	4b13      	ldr	r3, [pc, #76]	; (5748 <grid_hardwaretest_main+0xe0>)
    56fc:	4798      	blx	r3
		if (gpio_get_pin_level(MAP_MODE) == 0){
    56fe:	f414 6f00 	tst.w	r4, #2048	; 0x800
    5702:	d1c4      	bne.n	568e <grid_hardwaretest_main+0x26>
			if (button_last == 1){
    5704:	f1ba 0f00 	cmp.w	sl, #0
    5708:	d0c3      	beq.n	5692 <grid_hardwaretest_main+0x2a>
				testmode++;
    570a:	f105 0a01 	add.w	sl, r5, #1
		if (testmode == 0){
    570e:	f01a 0a01 	ands.w	sl, sl, #1
    5712:	d0c5      	beq.n	56a0 <grid_hardwaretest_main+0x38>
				button_last=0;
    5714:	f04f 0a00 	mov.w	sl, #0
			grid_hardwaretest_port_test(counter);
    5718:	4630      	mov	r0, r6
    571a:	4b0c      	ldr	r3, [pc, #48]	; (574c <grid_hardwaretest_main+0xe4>)
    571c:	4798      	blx	r3
			grid_hardwaretest_led_test(&grid_led_state, counter);	
    571e:	4631      	mov	r1, r6
    5720:	4804      	ldr	r0, [pc, #16]	; (5734 <grid_hardwaretest_main+0xcc>)
    5722:	4b0b      	ldr	r3, [pc, #44]	; (5750 <grid_hardwaretest_main+0xe8>)
    5724:	4798      	blx	r3
    5726:	2501      	movs	r5, #1
    5728:	e7d4      	b.n	56d4 <grid_hardwaretest_main+0x6c>
    572a:	bf00      	nop
    572c:	00011468 	.word	0x00011468
    5730:	0001002d 	.word	0x0001002d
    5734:	200077d4 	.word	0x200077d4
    5738:	0000517d 	.word	0x0000517d
    573c:	0000524d 	.word	0x0000524d
    5740:	0000906d 	.word	0x0000906d
    5744:	41008000 	.word	0x41008000
    5748:	0000901f 	.word	0x0000901f
    574c:	000053a1 	.word	0x000053a1
    5750:	000051c9 	.word	0x000051c9
    5754:	00009011 	.word	0x00009011
    5758:	00008239 	.word	0x00008239

0000575c <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    575c:	b538      	push	{r3, r4, r5, lr}
    575e:	4604      	mov	r4, r0
    5760:	460d      	mov	r5, r1
	
	instance->buffer_depth = buffer_depth;
    5762:	7101      	strb	r1, [r0, #4]
	
	instance->result_format = result_format;
    5764:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    5766:	7183      	strb	r3, [r0, #6]
	
	instance->result_average = 0;
    5768:	2300      	movs	r3, #0
    576a:	8143      	strh	r3, [r0, #10]
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    576c:	0048      	lsls	r0, r1, #1
    576e:	4b09      	ldr	r3, [pc, #36]	; (5794 <grid_ain_channel_init+0x38>)
    5770:	4798      	blx	r3
    5772:	6020      	str	r0, [r4, #0]
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5774:	b14d      	cbz	r5, 578a <grid_ain_channel_init+0x2e>
    5776:	2300      	movs	r3, #0
		instance->buffer[i] = 0;
    5778:	4619      	mov	r1, r3
    577a:	6822      	ldr	r2, [r4, #0]
    577c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    5780:	3301      	adds	r3, #1
    5782:	b2db      	uxtb	r3, r3
    5784:	7922      	ldrb	r2, [r4, #4]
    5786:	429a      	cmp	r2, r3
    5788:	d8f7      	bhi.n	577a <grid_ain_channel_init+0x1e>
	}
	
	instance->result_changed = 0;
    578a:	2000      	movs	r0, #0
    578c:	81a0      	strh	r0, [r4, #12]
	instance->result_value = 0;
    578e:	8120      	strh	r0, [r4, #8]
		
	return 0;
}
    5790:	bd38      	pop	{r3, r4, r5, pc}
    5792:	bf00      	nop
    5794:	0000fe9d 	.word	0x0000fe9d

00005798 <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    5798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    579c:	4605      	mov	r5, r0
    579e:	4689      	mov	r9, r1
    57a0:	4617      	mov	r7, r2
    57a2:	4698      	mov	r8, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    57a4:	0100      	lsls	r0, r0, #4
    57a6:	4b0c      	ldr	r3, [pc, #48]	; (57d8 <grid_ain_init+0x40>)
    57a8:	4798      	blx	r3
    57aa:	4b0c      	ldr	r3, [pc, #48]	; (57dc <grid_ain_init+0x44>)
    57ac:	6018      	str	r0, [r3, #0]

	for (uint8_t i=0; i<length; i++){
    57ae:	b185      	cbz	r5, 57d2 <grid_ain_init+0x3a>
    57b0:	3d01      	subs	r5, #1
    57b2:	b2ed      	uxtb	r5, r5
    57b4:	3501      	adds	r5, #1
    57b6:	012d      	lsls	r5, r5, #4
    57b8:	2400      	movs	r4, #0
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    57ba:	469a      	mov	sl, r3
    57bc:	4e08      	ldr	r6, [pc, #32]	; (57e0 <grid_ain_init+0x48>)
    57be:	4643      	mov	r3, r8
    57c0:	463a      	mov	r2, r7
    57c2:	4649      	mov	r1, r9
    57c4:	f8da 0000 	ldr.w	r0, [sl]
    57c8:	4420      	add	r0, r4
    57ca:	47b0      	blx	r6
    57cc:	3410      	adds	r4, #16
	for (uint8_t i=0; i<length; i++){
    57ce:	42ac      	cmp	r4, r5
    57d0:	d1f5      	bne.n	57be <grid_ain_init+0x26>
	}

	return 0;
}
    57d2:	2000      	movs	r0, #0
    57d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57d8:	0000fe9d 	.word	0x0000fe9d
    57dc:	20002250 	.word	0x20002250
    57e0:	0000575d 	.word	0x0000575d

000057e4 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    57e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    57e8:	0100      	lsls	r0, r0, #4
    57ea:	4b3c      	ldr	r3, [pc, #240]	; (58dc <grid_ain_add_sample+0xf8>)
    57ec:	f8d3 a000 	ldr.w	sl, [r3]
    57f0:	eb0a 0c00 	add.w	ip, sl, r0
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    57f4:	f89c 6004 	ldrb.w	r6, [ip, #4]
    57f8:	2e00      	cmp	r6, #0
    57fa:	d05b      	beq.n	58b4 <grid_ain_add_sample+0xd0>
    57fc:	f85a 5000 	ldr.w	r5, [sl, r0]
    5800:	3d02      	subs	r5, #2
	
		uint16_t current = instance->buffer[i];
    5802:	2200      	movs	r2, #0
    5804:	4690      	mov	r8, r2
    5806:	4691      	mov	r9, r2
    5808:	4696      	mov	lr, r2
    580a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    580e:	4614      	mov	r4, r2
    5810:	fa5f fb82 	uxtb.w	fp, r2
    5814:	f835 3f02 	ldrh.w	r3, [r5, #2]!
		
		sum += current;
    5818:	441c      	add	r4, r3
		
		if (current > maximum){
    581a:	4573      	cmp	r3, lr
    581c:	bf84      	itt	hi
    581e:	46d8      	movhi	r8, fp
			maximum = current;
    5820:	469e      	movhi	lr, r3
			maximum_index = i;
		}
		
		if (current < minimum){
    5822:	42bb      	cmp	r3, r7
    5824:	bf3c      	itt	cc
    5826:	46d9      	movcc	r9, fp
			minimum = current;
    5828:	461f      	movcc	r7, r3
    582a:	3201      	adds	r2, #1
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    582c:	b2d3      	uxtb	r3, r2
    582e:	42b3      	cmp	r3, r6
    5830:	d3ee      	bcc.n	5810 <grid_ain_add_sample+0x2c>
			minimum_index = i;
		}
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
    5832:	fbb4 f6f6 	udiv	r6, r4, r6
	
	if (value>average){		
    5836:	b2b6      	uxth	r6, r6
    5838:	428e      	cmp	r6, r1
    583a:	d23f      	bcs.n	58bc <grid_ain_add_sample+0xd8>
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    583c:	f85a 3000 	ldr.w	r3, [sl, r0]
    5840:	440c      	add	r4, r1
    5842:	f833 2019 	ldrh.w	r2, [r3, r9, lsl #1]
    5846:	1aa4      	subs	r4, r4, r2
		instance->buffer[minimum_index] = value;		
    5848:	f823 1019 	strh.w	r1, [r3, r9, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
		instance->buffer[maximum_index] = value;
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    584c:	f89c 3004 	ldrb.w	r3, [ip, #4]
    5850:	fbb4 f4f3 	udiv	r4, r4, r3
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    5854:	f89c 3006 	ldrb.w	r3, [ip, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5858:	f89c 5005 	ldrb.w	r5, [ip, #5]
	
	
	uint16_t downsampled = average>>downscale_factor;
    585c:	b2a6      	uxth	r6, r4
	uint8_t downscale_factor = (16-instance->result_resolution);
    585e:	f1c3 0010 	rsb	r0, r3, #16
	uint16_t downsampled = average>>downscale_factor;
    5862:	b2c0      	uxtb	r0, r0
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    5864:	1aeb      	subs	r3, r5, r3
	uint16_t upscaled    = downsampled<<upscale_factor;
    5866:	b2d9      	uxtb	r1, r3
	uint16_t downsampled = average>>downscale_factor;
    5868:	fa46 f300 	asr.w	r3, r6, r0
	uint16_t upscaled    = downsampled<<upscale_factor;
    586c:	b29b      	uxth	r3, r3
    586e:	408b      	lsls	r3, r1
    5870:	b29f      	uxth	r7, r3
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    5872:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    5876:	1b92      	subs	r2, r2, r6
    5878:	2a00      	cmp	r2, #0
    587a:	bfb8      	it	lt
    587c:	4252      	neglt	r2, r2
    587e:	2601      	movs	r6, #1
    5880:	fa06 f000 	lsl.w	r0, r6, r0
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    5884:	f8bc 6008 	ldrh.w	r6, [ip, #8]
    5888:	42be      	cmp	r6, r7
    588a:	d020      	beq.n	58ce <grid_ain_add_sample+0xea>
    588c:	4282      	cmp	r2, r0
    588e:	dc08      	bgt.n	58a2 <grid_ain_add_sample+0xbe>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    5890:	2201      	movs	r2, #1
    5892:	fa02 f505 	lsl.w	r5, r2, r5
    5896:	fa02 f101 	lsl.w	r1, r2, r1
    589a:	1a69      	subs	r1, r5, r1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    589c:	428f      	cmp	r7, r1
    589e:	d000      	beq.n	58a2 <grid_ain_add_sample+0xbe>
    58a0:	b9c7      	cbnz	r7, 58d4 <grid_ain_add_sample+0xf0>
	average = sum/instance->buffer_depth;
    58a2:	f8ac 400a 	strh.w	r4, [ip, #10]
		
		instance->result_average = average;
		instance->result_value = upscaled;
    58a6:	f8ac 7008 	strh.w	r7, [ip, #8]
		instance->result_changed = 1;
    58aa:	2001      	movs	r0, #1
    58ac:	f8ac 000c 	strh.w	r0, [ip, #12]
		return 1;
    58b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t maximum_index = 0;
    58b4:	46b0      	mov	r8, r6
	uint8_t minimum_index = 0;
    58b6:	46b1      	mov	r9, r6
	uint32_t sum = 0;
    58b8:	2400      	movs	r4, #0
    58ba:	e7ba      	b.n	5832 <grid_ain_add_sample+0x4e>
		sum = sum - instance->buffer[maximum_index] + value;
    58bc:	f85a 3000 	ldr.w	r3, [sl, r0]
    58c0:	440c      	add	r4, r1
    58c2:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
    58c6:	1aa4      	subs	r4, r4, r2
		instance->buffer[maximum_index] = value;
    58c8:	f823 1018 	strh.w	r1, [r3, r8, lsl #1]
    58cc:	e7be      	b.n	584c <grid_ain_add_sample+0x68>
	}else{		
		return 0;
    58ce:	2000      	movs	r0, #0
    58d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58d4:	2000      	movs	r0, #0
	}
	
}
    58d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58da:	bf00      	nop
    58dc:	20002250 	.word	0x20002250

000058e0 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    58e0:	4b02      	ldr	r3, [pc, #8]	; (58ec <grid_ain_get_changed+0xc>)
    58e2:	681b      	ldr	r3, [r3, #0]
    58e4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    58e8:	7b00      	ldrb	r0, [r0, #12]
    58ea:	4770      	bx	lr
    58ec:	20002250 	.word	0x20002250

000058f0 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    58f0:	4b09      	ldr	r3, [pc, #36]	; (5918 <grid_ain_get_average+0x28>)
    58f2:	681b      	ldr	r3, [r3, #0]
    58f4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	instance->result_changed = 0;
    58f8:	2300      	movs	r3, #0
    58fa:	8183      	strh	r3, [r0, #12]
	
	if (resolution>6 && resolution<15){
    58fc:	1fcb      	subs	r3, r1, #7
    58fe:	b2db      	uxtb	r3, r3
    5900:	2b07      	cmp	r3, #7
    5902:	d806      	bhi.n	5912 <grid_ain_get_average+0x22>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    5904:	8903      	ldrh	r3, [r0, #8]
    5906:	7940      	ldrb	r0, [r0, #5]
    5908:	1a40      	subs	r0, r0, r1
    590a:	fa43 f000 	asr.w	r0, r3, r0
		
	}
	else{
		return 0;
	}
}
    590e:	b280      	uxth	r0, r0
    5910:	4770      	bx	lr
    5912:	2000      	movs	r0, #0
    5914:	e7fb      	b.n	590e <grid_ain_get_average+0x1e>
    5916:	bf00      	nop
    5918:	20002250 	.word	0x20002250

0000591c <grid_buffer_init>:
// PORTS




uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    591c:	b538      	push	{r3, r4, r5, lr}
    591e:	4604      	mov	r4, r0
    5920:	460d      	mov	r5, r1
	
	buf->buffer_length = length;
    5922:	8001      	strh	r1, [r0, #0]
	
	buf->read_length   = 0;
    5924:	2300      	movs	r3, #0
    5926:	81c3      	strh	r3, [r0, #14]
	
	buf->read_start    = 0;
    5928:	8103      	strh	r3, [r0, #8]
	buf->read_stop     = 0;
    592a:	8143      	strh	r3, [r0, #10]
	buf->read_active   = 0;
    592c:	8183      	strh	r3, [r0, #12]
	
	buf->write_start    = 0;
    592e:	8203      	strh	r3, [r0, #16]
	buf->write_stop     = 0;
    5930:	8243      	strh	r3, [r0, #18]
	buf->write_active   = 0;
    5932:	8283      	strh	r3, [r0, #20]
	

	buf->buffer_storage = (uint8_t*) malloc(sizeof(uint8_t)*buf->buffer_length);
    5934:	4608      	mov	r0, r1
    5936:	4b08      	ldr	r3, [pc, #32]	; (5958 <grid_buffer_init+0x3c>)
    5938:	4798      	blx	r3
    593a:	6060      	str	r0, [r4, #4]
	
	while (buf->buffer_storage == NULL){
    593c:	b900      	cbnz	r0, 5940 <grid_buffer_init+0x24>
    593e:	e7fe      	b.n	593e <grid_buffer_init+0x22>
		// TRAP: MALLOC FAILED
	}

	for (uint16_t i=0; i<buf->buffer_length; i++){
    5940:	b145      	cbz	r5, 5954 <grid_buffer_init+0x38>
    5942:	2300      	movs	r3, #0
		buf->buffer_storage[i] = 0;
    5944:	4619      	mov	r1, r3
    5946:	6862      	ldr	r2, [r4, #4]
    5948:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i=0; i<buf->buffer_length; i++){
    594a:	3301      	adds	r3, #1
    594c:	b29b      	uxth	r3, r3
    594e:	8822      	ldrh	r2, [r4, #0]
    5950:	429a      	cmp	r2, r3
    5952:	d8f8      	bhi.n	5946 <grid_buffer_init+0x2a>
	}
	
	return 1;
	
}
    5954:	2001      	movs	r0, #1
    5956:	bd38      	pop	{r3, r4, r5, pc}
    5958:	0000fe9d 	.word	0x0000fe9d

0000595c <grid_buffer_write_size>:
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    595c:	8903      	ldrh	r3, [r0, #8]
    595e:	8a02      	ldrh	r2, [r0, #16]
    5960:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
    5962:	bf8f      	iteee	hi
    5964:	1a98      	subhi	r0, r3, r2
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    5966:	8800      	ldrhls	r0, [r0, #0]
    5968:	18c0      	addls	r0, r0, r3
    596a:	1a80      	subls	r0, r0, r2
    596c:	b280      	uxth	r0, r0

	return space;

	
	
}
    596e:	4770      	bx	lr

00005970 <grid_buffer_write_init>:


uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    5970:	b410      	push	{r4}
	
	
	
	uint16_t space = 0;
	
	if (buf->read_start > buf->write_start){
    5972:	8903      	ldrh	r3, [r0, #8]
    5974:	8a02      	ldrh	r2, [r0, #16]
    5976:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    5978:	bf9c      	itt	ls
    597a:	8804      	ldrhls	r4, [r0, #0]
    597c:	191b      	addls	r3, r3, r4
    597e:	1a9b      	subs	r3, r3, r2
    5980:	b29b      	uxth	r3, r3
	}
	
	
	
	if (space>length){
    5982:	428b      	cmp	r3, r1
    5984:	d90a      	bls.n	599c <grid_buffer_write_init+0x2c>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    5986:	440a      	add	r2, r1
    5988:	8804      	ldrh	r4, [r0, #0]
    598a:	fb92 f3f4 	sdiv	r3, r2, r4
    598e:	fb04 2213 	mls	r2, r4, r3, r2
    5992:	8242      	strh	r2, [r0, #18]
		
		return length;
    5994:	4608      	mov	r0, r1
	else{
		return 0; // failed
	}
	
	
}
    5996:	f85d 4b04 	ldr.w	r4, [sp], #4
    599a:	4770      	bx	lr
		return 0; // failed
    599c:	2000      	movs	r0, #0
    599e:	e7fa      	b.n	5996 <grid_buffer_write_init+0x26>

000059a0 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    59a0:	8a83      	ldrh	r3, [r0, #20]
    59a2:	6842      	ldr	r2, [r0, #4]
    59a4:	54d1      	strb	r1, [r2, r3]
		
	buf->write_active++;
    59a6:	8a83      	ldrh	r3, [r0, #20]
    59a8:	3301      	adds	r3, #1
	buf->write_active %= buf->buffer_length;
    59aa:	b29b      	uxth	r3, r3
    59ac:	8801      	ldrh	r1, [r0, #0]
    59ae:	fbb3 f2f1 	udiv	r2, r3, r1
    59b2:	fb01 3312 	mls	r3, r1, r2, r3
    59b6:	8283      	strh	r3, [r0, #20]
		
	return 1;
		

}
    59b8:	2001      	movs	r0, #1
    59ba:	4770      	bx	lr

000059bc <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    59bc:	8a83      	ldrh	r3, [r0, #20]
    59be:	8a42      	ldrh	r2, [r0, #18]
    59c0:	429a      	cmp	r2, r3
    59c2:	d000      	beq.n	59c6 <grid_buffer_write_acknowledge+0xa>
    59c4:	e7fe      	b.n	59c4 <grid_buffer_write_acknowledge+0x8>
		
		
		buf->write_start = buf->write_active;
    59c6:	8203      	strh	r3, [r0, #16]
			//TRAP xx
		}
	}
	
	
}
    59c8:	2001      	movs	r0, #1
    59ca:	4770      	bx	lr

000059cc <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    59cc:	8983      	ldrh	r3, [r0, #12]
    59ce:	8942      	ldrh	r2, [r0, #10]
    59d0:	429a      	cmp	r2, r3
    59d2:	d000      	beq.n	59d6 <grid_buffer_read_size+0xa>
    59d4:	e7fe      	b.n	59d4 <grid_buffer_read_size+0x8>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    59d6:	8902      	ldrh	r2, [r0, #8]
    59d8:	429a      	cmp	r2, r3
    59da:	d000      	beq.n	59de <grid_buffer_read_size+0x12>
    59dc:	e7fe      	b.n	59dc <grid_buffer_read_size+0x10>
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    59de:	b4f0      	push	{r4, r5, r6, r7}
		while(1){
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    59e0:	8a05      	ldrh	r5, [r0, #16]
    59e2:	42ab      	cmp	r3, r5
    59e4:	d025      	beq.n	5a32 <grid_buffer_read_size+0x66>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    59e6:	8804      	ldrh	r4, [r0, #0]
    59e8:	b1fc      	cbz	r4, 5a2a <grid_buffer_read_size+0x5e>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    59ea:	4626      	mov	r6, r4
    59ec:	fb93 f2f4 	sdiv	r2, r3, r4
    59f0:	fb04 3212 	mls	r2, r4, r2, r3
		
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;
    59f4:	b291      	uxth	r1, r2
    59f6:	428d      	cmp	r5, r1
    59f8:	d01d      	beq.n	5a36 <grid_buffer_read_size+0x6a>
		
		if (buf->buffer_storage[index] == '\n'){
    59fa:	6840      	ldr	r0, [r0, #4]
    59fc:	5c42      	ldrb	r2, [r0, r1]
    59fe:	2a0a      	cmp	r2, #10
    5a00:	d114      	bne.n	5a2c <grid_buffer_read_size+0x60>
    5a02:	2300      	movs	r3, #0
						
			return i+1; // packet length
    5a04:	3301      	adds	r3, #1
    5a06:	b298      	uxth	r0, r3
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    5a08:	bcf0      	pop	{r4, r5, r6, r7}
    5a0a:	4770      	bx	lr
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    5a0c:	fb92 f1f6 	sdiv	r1, r2, r6
    5a10:	fb06 2111 	mls	r1, r6, r1, r2
		if (index == buf->write_start) return 0;
    5a14:	b28f      	uxth	r7, r1
    5a16:	42bd      	cmp	r5, r7
    5a18:	d00f      	beq.n	5a3a <grid_buffer_read_size+0x6e>
    5a1a:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    5a1c:	5dc1      	ldrb	r1, [r0, r7]
    5a1e:	290a      	cmp	r1, #10
    5a20:	d0f0      	beq.n	5a04 <grid_buffer_read_size+0x38>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    5a22:	3301      	adds	r3, #1
    5a24:	b29b      	uxth	r3, r3
    5a26:	42a3      	cmp	r3, r4
    5a28:	d1f0      	bne.n	5a0c <grid_buffer_read_size+0x40>
    5a2a:	e7fe      	b.n	5a2a <grid_buffer_read_size+0x5e>
    5a2c:	1c5a      	adds	r2, r3, #1
		if (buf->buffer_storage[index] == '\n'){
    5a2e:	2300      	movs	r3, #0
    5a30:	e7f7      	b.n	5a22 <grid_buffer_read_size+0x56>
		return 0;
    5a32:	2000      	movs	r0, #0
    5a34:	e7e8      	b.n	5a08 <grid_buffer_read_size+0x3c>
		if (index == buf->write_start) return 0;
    5a36:	2000      	movs	r0, #0
    5a38:	e7e6      	b.n	5a08 <grid_buffer_read_size+0x3c>
    5a3a:	2000      	movs	r0, #0
    5a3c:	e7e4      	b.n	5a08 <grid_buffer_read_size+0x3c>

00005a3e <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    5a3e:	8982      	ldrh	r2, [r0, #12]
    5a40:	8943      	ldrh	r3, [r0, #10]
    5a42:	4293      	cmp	r3, r2
    5a44:	d000      	beq.n	5a48 <grid_buffer_read_init+0xa>
    5a46:	e7fe      	b.n	5a46 <grid_buffer_read_init+0x8>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    5a48:	8903      	ldrh	r3, [r0, #8]
    5a4a:	4293      	cmp	r3, r2
    5a4c:	d000      	beq.n	5a50 <grid_buffer_read_init+0x12>
    5a4e:	e7fe      	b.n	5a4e <grid_buffer_read_init+0x10>
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    5a50:	b5f0      	push	{r4, r5, r6, r7, lr}
		while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    5a52:	8a05      	ldrh	r5, [r0, #16]
    5a54:	42aa      	cmp	r2, r5
    5a56:	d031      	beq.n	5abc <grid_buffer_read_init+0x7e>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    5a58:	8804      	ldrh	r4, [r0, #0]
    5a5a:	b35c      	cbz	r4, 5ab4 <grid_buffer_read_init+0x76>
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    5a5c:	4626      	mov	r6, r4
    5a5e:	fb92 f3f4 	sdiv	r3, r2, r4
    5a62:	fb04 2313 	mls	r3, r4, r3, r2
			
		// Hit the write pointer, no message
		if (index == buf->write_start) return 0;	
    5a66:	b299      	uxth	r1, r3
    5a68:	428d      	cmp	r5, r1
    5a6a:	d029      	beq.n	5ac0 <grid_buffer_read_init+0x82>
					
		if (buf->buffer_storage[index] == '\n'){
    5a6c:	6847      	ldr	r7, [r0, #4]
    5a6e:	460b      	mov	r3, r1
    5a70:	5c79      	ldrb	r1, [r7, r1]
    5a72:	290a      	cmp	r1, #10
    5a74:	d11f      	bne.n	5ab6 <grid_buffer_read_init+0x78>
    5a76:	2100      	movs	r1, #0
								
			buf->read_stop = (index+1)%buf->buffer_length;
    5a78:	3301      	adds	r3, #1
    5a7a:	fb93 f2f4 	sdiv	r2, r3, r4
    5a7e:	fb04 3312 	mls	r3, r4, r2, r3
    5a82:	8143      	strh	r3, [r0, #10]
					
			buf->read_length = i+1;
    5a84:	1c4b      	adds	r3, r1, #1
    5a86:	b29b      	uxth	r3, r3
    5a88:	81c3      	strh	r3, [r0, #14]
	while(1){
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    5a8a:	4618      	mov	r0, r3
    5a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    5a8e:	fb92 f3f6 	sdiv	r3, r2, r6
    5a92:	fb06 2313 	mls	r3, r6, r3, r2
		if (index == buf->write_start) return 0;	
    5a96:	fa1f fe83 	uxth.w	lr, r3
    5a9a:	4575      	cmp	r5, lr
    5a9c:	d012      	beq.n	5ac4 <grid_buffer_read_init+0x86>
    5a9e:	4673      	mov	r3, lr
    5aa0:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    5aa2:	f817 e00e 	ldrb.w	lr, [r7, lr]
    5aa6:	f1be 0f0a 	cmp.w	lr, #10
    5aaa:	d0e5      	beq.n	5a78 <grid_buffer_read_init+0x3a>
	for (uint16_t i=0; i<buf->buffer_length; i++){
    5aac:	3101      	adds	r1, #1
    5aae:	b289      	uxth	r1, r1
    5ab0:	42a1      	cmp	r1, r4
    5ab2:	d1ec      	bne.n	5a8e <grid_buffer_read_init+0x50>
    5ab4:	e7fe      	b.n	5ab4 <grid_buffer_read_init+0x76>
    5ab6:	3201      	adds	r2, #1
		if (buf->buffer_storage[index] == '\n'){
    5ab8:	2100      	movs	r1, #0
    5aba:	e7f7      	b.n	5aac <grid_buffer_read_init+0x6e>
		return 0;
    5abc:	2300      	movs	r3, #0
    5abe:	e7e4      	b.n	5a8a <grid_buffer_read_init+0x4c>
		if (index == buf->write_start) return 0;	
    5ac0:	2300      	movs	r3, #0
    5ac2:	e7e2      	b.n	5a8a <grid_buffer_read_init+0x4c>
    5ac4:	2300      	movs	r3, #0
    5ac6:	e7e0      	b.n	5a8a <grid_buffer_read_init+0x4c>

00005ac8 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    5ac8:	8983      	ldrh	r3, [r0, #12]
    5aca:	8941      	ldrh	r1, [r0, #10]
    5acc:	4299      	cmp	r1, r3
    5ace:	d00e      	beq.n	5aee <grid_buffer_read_character+0x26>
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    5ad0:	b410      	push	{r4}
    5ad2:	4602      	mov	r2, r0
		
		uint8_t character = buf->buffer_storage[buf->read_active];
    5ad4:	6841      	ldr	r1, [r0, #4]
    5ad6:	5cc8      	ldrb	r0, [r1, r3]
		
		buf->read_active++;
    5ad8:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    5ada:	b29b      	uxth	r3, r3
    5adc:	8814      	ldrh	r4, [r2, #0]
    5ade:	fbb3 f1f4 	udiv	r1, r3, r4
    5ae2:	fb04 3311 	mls	r3, r4, r1, r3
    5ae6:	8193      	strh	r3, [r2, #12]
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    5ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
    5aec:	4770      	bx	lr
    5aee:	e7fe      	b.n	5aee <grid_buffer_read_character+0x26>

00005af0 <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    5af0:	8983      	ldrh	r3, [r0, #12]
    5af2:	8942      	ldrh	r2, [r0, #10]
    5af4:	429a      	cmp	r2, r3
    5af6:	d000      	beq.n	5afa <grid_buffer_read_acknowledge+0xa>
    5af8:	e7fe      	b.n	5af8 <grid_buffer_read_acknowledge+0x8>
		buf->read_start = buf->read_stop;
    5afa:	8103      	strh	r3, [r0, #8]
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    5afc:	2001      	movs	r0, #1
    5afe:	4770      	bx	lr

00005b00 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, uint16_t tx_buf_size, uint16_t rx_buf_size, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma, struct grid_ui_report* p_report){
    5b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b04:	4604      	mov	r4, r0
    5b06:	4690      	mov	r8, r2
    5b08:	461f      	mov	r7, r3
    5b0a:	f89d 5018 	ldrb.w	r5, [sp, #24]
	
	grid_buffer_init(&por->tx_buffer, tx_buf_size);
    5b0e:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    5b12:	4e3b      	ldr	r6, [pc, #236]	; (5c00 <grid_port_init+0x100>)
    5b14:	47b0      	blx	r6
	grid_buffer_init(&por->rx_buffer, rx_buf_size);
    5b16:	4641      	mov	r1, r8
    5b18:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
    5b1c:	47b0      	blx	r6
	
	por->ping_report = p_report;
    5b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5b20:	6063      	str	r3, [r4, #4]
	
	por->cooldown = 0;
    5b22:	2300      	movs	r3, #0
    5b24:	6023      	str	r3, [r4, #0]
	
	por->dma_channel = dma;
    5b26:	f89d 2020 	ldrb.w	r2, [sp, #32]
    5b2a:	73a2      	strb	r2, [r4, #14]
	
	por->direction = dir;
    5b2c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    5b30:	7362      	strb	r2, [r4, #13]
	
	por->usart	= usart;
    5b32:	60a7      	str	r7, [r4, #8]
	por->type		= type;
    5b34:	7325      	strb	r5, [r4, #12]
	
	por->tx_double_buffer_status	= 0;
    5b36:	8223      	strh	r3, [r4, #16]
	por->rx_double_buffer_status	= 0;
    5b38:	6263      	str	r3, [r4, #36]	; 0x24
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;		
    5b3a:	4619      	mov	r1, r3
    5b3c:	18e2      	adds	r2, r4, r3
    5b3e:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    5b42:	3301      	adds	r3, #1
    5b44:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    5b48:	d1f8      	bne.n	5b3c <grid_port_init+0x3c>
    5b4a:	2300      	movs	r3, #0
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
		por->rx_double_buffer[i] = 0;
    5b4c:	4619      	mov	r1, r3
    5b4e:	18e2      	adds	r2, r4, r3
    5b50:	f882 1800 	strb.w	r1, [r2, #2048]	; 0x800
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5b54:	3301      	adds	r3, #1
    5b56:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    5b5a:	d1f8      	bne.n	5b4e <grid_port_init+0x4e>
	}
	
	por->partner_fi = 0;
    5b5c:	2300      	movs	r3, #0
    5b5e:	f241 0204 	movw	r2, #4100	; 0x1004
    5b62:	54a3      	strb	r3, [r4, r2]
	
	por->partner_hwcfg = 0;
    5b64:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
    5b68:	6013      	str	r3, [r2, #0]
	por->partner_status = 1;
    5b6a:	2201      	movs	r2, #1
    5b6c:	f241 0307 	movw	r3, #4103	; 0x1007
    5b70:	54e2      	strb	r2, [r4, r3]
	
	
	
	if (type == GRID_PORT_TYPE_USART){	
    5b72:	4295      	cmp	r5, r2
    5b74:	d005      	beq.n	5b82 <grid_port_init+0x82>
			por->dy = 0;
		}
		
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    5b76:	2201      	movs	r2, #1
    5b78:	f241 0307 	movw	r3, #4103	; 0x1007
    5b7c:	54e2      	strb	r2, [r4, r3]
    5b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		por->partner_status = 0;
    5b82:	2300      	movs	r3, #0
    5b84:	f241 0207 	movw	r2, #4103	; 0x1007
    5b88:	54a3      	strb	r3, [r4, r2]
		por->partner_fi = 0;
    5b8a:	f241 0204 	movw	r2, #4100	; 0x1004
    5b8e:	54a3      	strb	r3, [r4, r2]
		if (por->direction == GRID_MSG_NORTH){
    5b90:	7b63      	ldrb	r3, [r4, #13]
    5b92:	b2db      	uxtb	r3, r3
    5b94:	2b11      	cmp	r3, #17
    5b96:	d015      	beq.n	5bc4 <grid_port_init+0xc4>
		else if (por->direction == GRID_MSG_EAST){
    5b98:	7b63      	ldrb	r3, [r4, #13]
    5b9a:	b2db      	uxtb	r3, r3
    5b9c:	2b12      	cmp	r3, #18
    5b9e:	d01b      	beq.n	5bd8 <grid_port_init+0xd8>
		else if (por->direction == GRID_MSG_SOUTH){
    5ba0:	7b63      	ldrb	r3, [r4, #13]
    5ba2:	b2db      	uxtb	r3, r3
    5ba4:	2b13      	cmp	r3, #19
    5ba6:	d021      	beq.n	5bec <grid_port_init+0xec>
		else if (por->direction == GRID_MSG_WEST){
    5ba8:	7b63      	ldrb	r3, [r4, #13]
    5baa:	b2db      	uxtb	r3, r3
    5bac:	2b14      	cmp	r3, #20
    5bae:	d1e6      	bne.n	5b7e <grid_port_init+0x7e>
			por->dx = -1;
    5bb0:	22ff      	movs	r2, #255	; 0xff
    5bb2:	f241 0305 	movw	r3, #4101	; 0x1005
    5bb6:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    5bb8:	2200      	movs	r2, #0
    5bba:	f241 0306 	movw	r3, #4102	; 0x1006
    5bbe:	54e2      	strb	r2, [r4, r3]
    5bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    5bc4:	2200      	movs	r2, #0
    5bc6:	f241 0305 	movw	r3, #4101	; 0x1005
    5bca:	54e2      	strb	r2, [r4, r3]
			por->dy = 1;
    5bcc:	2201      	movs	r2, #1
    5bce:	f241 0306 	movw	r3, #4102	; 0x1006
    5bd2:	54e2      	strb	r2, [r4, r3]
    5bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 1;
    5bd8:	2201      	movs	r2, #1
    5bda:	f241 0305 	movw	r3, #4101	; 0x1005
    5bde:	54e2      	strb	r2, [r4, r3]
			por->dy = 0;
    5be0:	2200      	movs	r2, #0
    5be2:	f241 0306 	movw	r3, #4102	; 0x1006
    5be6:	54e2      	strb	r2, [r4, r3]
    5be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			por->dx = 0;
    5bec:	2200      	movs	r2, #0
    5bee:	f241 0305 	movw	r3, #4101	; 0x1005
    5bf2:	54e2      	strb	r2, [r4, r3]
			por->dy = -1;
    5bf4:	22ff      	movs	r2, #255	; 0xff
    5bf6:	f241 0306 	movw	r3, #4102	; 0x1006
    5bfa:	54e2      	strb	r2, [r4, r3]
    5bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c00:	0000591d 	.word	0x0000591d

00005c04 <grid_port_init_all>:
	}
	
}

void grid_port_init_all(void){
    5c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c08:	b084      	sub	sp, #16
	
	struct grid_ui_model* mod = &grid_ui_state;
	
	grid_port_init(&GRID_PORT_N, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_MSG_NORTH ,0, &mod->report_array[GRID_REPORT_INDEX_PING_NORTH]);
    5c0a:	4f30      	ldr	r7, [pc, #192]	; (5ccc <grid_port_init_all+0xc8>)
    5c0c:	687b      	ldr	r3, [r7, #4]
    5c0e:	3310      	adds	r3, #16
    5c10:	9303      	str	r3, [sp, #12]
    5c12:	2500      	movs	r5, #0
    5c14:	9502      	str	r5, [sp, #8]
    5c16:	2311      	movs	r3, #17
    5c18:	9301      	str	r3, [sp, #4]
    5c1a:	2401      	movs	r4, #1
    5c1c:	9400      	str	r4, [sp, #0]
    5c1e:	4b2c      	ldr	r3, [pc, #176]	; (5cd0 <grid_port_init_all+0xcc>)
    5c20:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    5c24:	4611      	mov	r1, r2
    5c26:	482b      	ldr	r0, [pc, #172]	; (5cd4 <grid_port_init_all+0xd0>)
    5c28:	4e2b      	ldr	r6, [pc, #172]	; (5cd8 <grid_port_init_all+0xd4>)
    5c2a:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_E, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_MSG_EAST  ,1, &mod->report_array[GRID_REPORT_INDEX_PING_EAST]);
    5c2c:	687b      	ldr	r3, [r7, #4]
    5c2e:	3320      	adds	r3, #32
    5c30:	9303      	str	r3, [sp, #12]
    5c32:	9402      	str	r4, [sp, #8]
    5c34:	2312      	movs	r3, #18
    5c36:	9301      	str	r3, [sp, #4]
    5c38:	9400      	str	r4, [sp, #0]
    5c3a:	4b28      	ldr	r3, [pc, #160]	; (5cdc <grid_port_init_all+0xd8>)
    5c3c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    5c40:	4611      	mov	r1, r2
    5c42:	4827      	ldr	r0, [pc, #156]	; (5ce0 <grid_port_init_all+0xdc>)
    5c44:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_S, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_MSG_SOUTH ,2, &mod->report_array[GRID_REPORT_INDEX_PING_SOUTH]);
    5c46:	687b      	ldr	r3, [r7, #4]
    5c48:	3330      	adds	r3, #48	; 0x30
    5c4a:	9303      	str	r3, [sp, #12]
    5c4c:	f04f 0802 	mov.w	r8, #2
    5c50:	f8cd 8008 	str.w	r8, [sp, #8]
    5c54:	2313      	movs	r3, #19
    5c56:	9301      	str	r3, [sp, #4]
    5c58:	9400      	str	r4, [sp, #0]
    5c5a:	4b22      	ldr	r3, [pc, #136]	; (5ce4 <grid_port_init_all+0xe0>)
    5c5c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    5c60:	4611      	mov	r1, r2
    5c62:	4821      	ldr	r0, [pc, #132]	; (5ce8 <grid_port_init_all+0xe4>)
    5c64:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_W, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_MSG_WEST  ,3, &mod->report_array[GRID_REPORT_INDEX_PING_WEST]);
    5c66:	687b      	ldr	r3, [r7, #4]
    5c68:	3340      	adds	r3, #64	; 0x40
    5c6a:	9303      	str	r3, [sp, #12]
    5c6c:	2703      	movs	r7, #3
    5c6e:	9702      	str	r7, [sp, #8]
    5c70:	2314      	movs	r3, #20
    5c72:	9301      	str	r3, [sp, #4]
    5c74:	9400      	str	r4, [sp, #0]
    5c76:	4b1d      	ldr	r3, [pc, #116]	; (5cec <grid_port_init_all+0xe8>)
    5c78:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    5c7c:	4611      	mov	r1, r2
    5c7e:	481c      	ldr	r0, [pc, #112]	; (5cf0 <grid_port_init_all+0xec>)
    5c80:	47b0      	blx	r6
	
	grid_port_init(&GRID_PORT_U, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_UI, 0, -1, NULL);
    5c82:	f8df 9074 	ldr.w	r9, [pc, #116]	; 5cf8 <grid_port_init_all+0xf4>
    5c86:	9503      	str	r5, [sp, #12]
    5c88:	f04f 0aff 	mov.w	sl, #255	; 0xff
    5c8c:	f8cd a008 	str.w	sl, [sp, #8]
    5c90:	9501      	str	r5, [sp, #4]
    5c92:	9700      	str	r7, [sp, #0]
    5c94:	462b      	mov	r3, r5
    5c96:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    5c9a:	4611      	mov	r1, r2
    5c9c:	4648      	mov	r0, r9
    5c9e:	47b0      	blx	r6
	grid_port_init(&GRID_PORT_H, GRID_BUFFER_TX_SIZE, GRID_BUFFER_RX_SIZE, NULL, GRID_PORT_TYPE_USB, 0, -1, NULL);	
    5ca0:	4f14      	ldr	r7, [pc, #80]	; (5cf4 <grid_port_init_all+0xf0>)
    5ca2:	9503      	str	r5, [sp, #12]
    5ca4:	f8cd a008 	str.w	sl, [sp, #8]
    5ca8:	9501      	str	r5, [sp, #4]
    5caa:	f8cd 8000 	str.w	r8, [sp]
    5cae:	462b      	mov	r3, r5
    5cb0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    5cb4:	4611      	mov	r1, r2
    5cb6:	4638      	mov	r0, r7
    5cb8:	47b0      	blx	r6
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    5cba:	f241 0307 	movw	r3, #4103	; 0x1007
    5cbe:	f809 4003 	strb.w	r4, [r9, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    5cc2:	54fc      	strb	r4, [r7, r3]
	
	
}
    5cc4:	b004      	add	sp, #16
    5cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5cca:	bf00      	nop
    5ccc:	20003270 	.word	0x20003270
    5cd0:	20001048 	.word	0x20001048
    5cd4:	2000121c 	.word	0x2000121c
    5cd8:	00005b01 	.word	0x00005b01
    5cdc:	20000ff4 	.word	0x20000ff4
    5ce0:	20006760 	.word	0x20006760
    5ce4:	2000114c 	.word	0x2000114c
    5ce8:	2000474c 	.word	0x2000474c
    5cec:	200010fc 	.word	0x200010fc
    5cf0:	20003730 	.word	0x20003730
    5cf4:	20005758 	.word	0x20005758
    5cf8:	20002268 	.word	0x20002268

00005cfc <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d00:	b093      	sub	sp, #76	; 0x4c
    5d02:	af02      	add	r7, sp, #8
    5d04:	4605      	mov	r5, r0
    5d06:	468a      	mov	sl, r1
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    5d08:	f600 73e8 	addw	r3, r0, #4072	; 0xfe8
    5d0c:	60bb      	str	r3, [r7, #8]
    5d0e:	4618      	mov	r0, r3
    5d10:	4b5e      	ldr	r3, [pc, #376]	; (5e8c <grid_port_process_inbound+0x190>)
    5d12:	4798      	blx	r3
	
	if (!packet_size){
    5d14:	b920      	cbnz	r0, 5d20 <grid_port_process_inbound+0x24>
    5d16:	2000      	movs	r0, #0
		}	

		
	}
		
}
    5d18:	3744      	adds	r7, #68	; 0x44
    5d1a:	46bd      	mov	sp, r7
    5d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d20:	4680      	mov	r8, r0
	}else{
    5d22:	f8c7 d004 	str.w	sp, [r7, #4]
		port_array_default[0] = &GRID_PORT_N;
    5d26:	4b5a      	ldr	r3, [pc, #360]	; (5e90 <grid_port_process_inbound+0x194>)
    5d28:	613b      	str	r3, [r7, #16]
		port_array_default[1] = &GRID_PORT_E;
    5d2a:	4b5a      	ldr	r3, [pc, #360]	; (5e94 <grid_port_process_inbound+0x198>)
    5d2c:	617b      	str	r3, [r7, #20]
		port_array_default[2] = &GRID_PORT_S;
    5d2e:	4b5a      	ldr	r3, [pc, #360]	; (5e98 <grid_port_process_inbound+0x19c>)
    5d30:	61bb      	str	r3, [r7, #24]
		port_array_default[3] = &GRID_PORT_W;
    5d32:	4b5a      	ldr	r3, [pc, #360]	; (5e9c <grid_port_process_inbound+0x1a0>)
    5d34:	61fb      	str	r3, [r7, #28]
		port_array_default[4] = &GRID_PORT_U;
    5d36:	4b5a      	ldr	r3, [pc, #360]	; (5ea0 <grid_port_process_inbound+0x1a4>)
    5d38:	623b      	str	r3, [r7, #32]
		port_array_default[5] = &GRID_PORT_H;
    5d3a:	4b5a      	ldr	r3, [pc, #360]	; (5ea4 <grid_port_process_inbound+0x1a8>)
    5d3c:	627b      	str	r3, [r7, #36]	; 0x24
    5d3e:	f107 0310 	add.w	r3, r7, #16
    5d42:	f107 0028 	add.w	r0, r7, #40	; 0x28
		uint8_t j=0;
    5d46:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    5d48:	f241 0107 	movw	r1, #4103	; 0x1007
    5d4c:	e001      	b.n	5d52 <grid_port_process_inbound+0x56>
		for(uint8_t i=0; i<port_count; i++){
    5d4e:	4283      	cmp	r3, r0
    5d50:	d00d      	beq.n	5d6e <grid_port_process_inbound+0x72>
			if (port_array_default[i]->partner_status != 0){
    5d52:	f853 2b04 	ldr.w	r2, [r3], #4
    5d56:	5c56      	ldrb	r6, [r2, r1]
    5d58:	2e00      	cmp	r6, #0
    5d5a:	d0f8      	beq.n	5d4e <grid_port_process_inbound+0x52>
				port_array[j] = port_array_default[i];
    5d5c:	f107 0640 	add.w	r6, r7, #64	; 0x40
    5d60:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    5d64:	f846 2c18 	str.w	r2, [r6, #-24]
				j++;
    5d68:	3401      	adds	r4, #1
    5d6a:	b2e4      	uxtb	r4, r4
    5d6c:	e7ef      	b.n	5d4e <grid_port_process_inbound+0x52>
		for (uint8_t i=0; i<port_count; i++)
    5d6e:	2c00      	cmp	r4, #0
    5d70:	d079      	beq.n	5e66 <grid_port_process_inbound+0x16a>
    5d72:	f107 0928 	add.w	r9, r7, #40	; 0x28
    5d76:	1e66      	subs	r6, r4, #1
    5d78:	b2f6      	uxtb	r6, r6
    5d7a:	3601      	adds	r6, #1
    5d7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    5d80:	f8df b140 	ldr.w	fp, [pc, #320]	; 5ec4 <grid_port_process_inbound+0x1c8>
    5d84:	f8c7 900c 	str.w	r9, [r7, #12]
    5d88:	e007      	b.n	5d9a <grid_port_process_inbound+0x9e>
    5d8a:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    5d8e:	47d8      	blx	fp
    5d90:	4580      	cmp	r8, r0
    5d92:	d80c      	bhi.n	5dae <grid_port_process_inbound+0xb2>
		for (uint8_t i=0; i<port_count; i++)
    5d94:	68fb      	ldr	r3, [r7, #12]
    5d96:	42b3      	cmp	r3, r6
    5d98:	d016      	beq.n	5dc8 <grid_port_process_inbound+0xcc>
			if (port_array[i] != por || loopback){
    5d9a:	68fb      	ldr	r3, [r7, #12]
    5d9c:	f853 0b04 	ldr.w	r0, [r3], #4
    5da0:	60fb      	str	r3, [r7, #12]
    5da2:	4285      	cmp	r5, r0
    5da4:	d1f1      	bne.n	5d8a <grid_port_process_inbound+0x8e>
    5da6:	f1ba 0f00 	cmp.w	sl, #0
    5daa:	d0f3      	beq.n	5d94 <grid_port_process_inbound+0x98>
    5dac:	e7ed      	b.n	5d8a <grid_port_process_inbound+0x8e>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    5dae:	23c8      	movs	r3, #200	; 0xc8
    5db0:	9301      	str	r3, [sp, #4]
    5db2:	2302      	movs	r3, #2
    5db4:	9300      	str	r3, [sp, #0]
    5db6:	2300      	movs	r3, #0
    5db8:	2264      	movs	r2, #100	; 0x64
    5dba:	4611      	mov	r1, r2
    5dbc:	483a      	ldr	r0, [pc, #232]	; (5ea8 <grid_port_process_inbound+0x1ac>)
    5dbe:	4c3b      	ldr	r4, [pc, #236]	; (5eac <grid_port_process_inbound+0x1b0>)
    5dc0:	47a0      	blx	r4
    5dc2:	f8d7 d004 	ldr.w	sp, [r7, #4]
    5dc6:	e7a6      	b.n	5d16 <grid_port_process_inbound+0x1a>
    5dc8:	469b      	mov	fp, r3
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    5dca:	68b8      	ldr	r0, [r7, #8]
    5dcc:	4b38      	ldr	r3, [pc, #224]	; (5eb0 <grid_port_process_inbound+0x1b4>)
    5dce:	4798      	blx	r3
    5dd0:	4580      	cmp	r8, r0
    5dd2:	d000      	beq.n	5dd6 <grid_port_process_inbound+0xda>
    5dd4:	e7fe      	b.n	5dd4 <grid_port_process_inbound+0xd8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    5dd6:	4e37      	ldr	r6, [pc, #220]	; (5eb4 <grid_port_process_inbound+0x1b8>)
    5dd8:	e004      	b.n	5de4 <grid_port_process_inbound+0xe8>
			if (port_array[i] != por || loopback){
    5dda:	f1ba 0f00 	cmp.w	sl, #0
    5dde:	d105      	bne.n	5dec <grid_port_process_inbound+0xf0>
		for (uint8_t i=0; i<port_count; i++)
    5de0:	45d9      	cmp	r9, fp
    5de2:	d045      	beq.n	5e70 <grid_port_process_inbound+0x174>
			if (port_array[i] != por || loopback){
    5de4:	f859 0b04 	ldr.w	r0, [r9], #4
    5de8:	4285      	cmp	r5, r0
    5dea:	d0f6      	beq.n	5dda <grid_port_process_inbound+0xde>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    5dec:	4641      	mov	r1, r8
    5dee:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    5df2:	47b0      	blx	r6
    5df4:	e7f4      	b.n	5de0 <grid_port_process_inbound+0xe4>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    5df6:	6879      	ldr	r1, [r7, #4]
    5df8:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    5dfc:	47c8      	blx	r9
			for (uint8_t i=0; i<port_count; i++){
    5dfe:	68fb      	ldr	r3, [r7, #12]
    5e00:	42b3      	cmp	r3, r6
    5e02:	d007      	beq.n	5e14 <grid_port_process_inbound+0x118>
				if (port_array[i] != por || loopback){
    5e04:	f856 0b04 	ldr.w	r0, [r6], #4
    5e08:	4285      	cmp	r5, r0
    5e0a:	d1f4      	bne.n	5df6 <grid_port_process_inbound+0xfa>
    5e0c:	f1ba 0f00 	cmp.w	sl, #0
    5e10:	d0f5      	beq.n	5dfe <grid_port_process_inbound+0x102>
    5e12:	e7f0      	b.n	5df6 <grid_port_process_inbound+0xfa>
    5e14:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t j=0; j<packet_size; j++)
    5e18:	fa1f f38b 	uxth.w	r3, fp
    5e1c:	4543      	cmp	r3, r8
    5e1e:	d208      	bcs.n	5e32 <grid_port_process_inbound+0x136>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    5e20:	68b8      	ldr	r0, [r7, #8]
    5e22:	4b25      	ldr	r3, [pc, #148]	; (5eb8 <grid_port_process_inbound+0x1bc>)
    5e24:	4798      	blx	r3
    5e26:	6078      	str	r0, [r7, #4]
			for (uint8_t i=0; i<port_count; i++){
    5e28:	2c00      	cmp	r4, #0
    5e2a:	d0f3      	beq.n	5e14 <grid_port_process_inbound+0x118>
    5e2c:	f107 0628 	add.w	r6, r7, #40	; 0x28
    5e30:	e7e8      	b.n	5e04 <grid_port_process_inbound+0x108>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    5e32:	68b8      	ldr	r0, [r7, #8]
    5e34:	4b21      	ldr	r3, [pc, #132]	; (5ebc <grid_port_process_inbound+0x1c0>)
    5e36:	4798      	blx	r3
		for (uint8_t i=0; i<port_count; i++)
    5e38:	2c00      	cmp	r4, #0
    5e3a:	f43f af6d 	beq.w	5d18 <grid_port_process_inbound+0x1c>
    5e3e:	f107 0428 	add.w	r4, r7, #40	; 0x28
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5e42:	4e1f      	ldr	r6, [pc, #124]	; (5ec0 <grid_port_process_inbound+0x1c4>)
    5e44:	68fb      	ldr	r3, [r7, #12]
    5e46:	4698      	mov	r8, r3
    5e48:	e005      	b.n	5e56 <grid_port_process_inbound+0x15a>
			if (port_array[i] != por || loopback){
    5e4a:	f1ba 0f00 	cmp.w	sl, #0
    5e4e:	d106      	bne.n	5e5e <grid_port_process_inbound+0x162>
		for (uint8_t i=0; i<port_count; i++)
    5e50:	45a0      	cmp	r8, r4
    5e52:	f43f af61 	beq.w	5d18 <grid_port_process_inbound+0x1c>
			if (port_array[i] != por || loopback){
    5e56:	f854 0b04 	ldr.w	r0, [r4], #4
    5e5a:	4285      	cmp	r5, r0
    5e5c:	d0f5      	beq.n	5e4a <grid_port_process_inbound+0x14e>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5e5e:	f500 607d 	add.w	r0, r0, #4048	; 0xfd0
    5e62:	47b0      	blx	r6
    5e64:	e7f4      	b.n	5e50 <grid_port_process_inbound+0x154>
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    5e66:	68b8      	ldr	r0, [r7, #8]
    5e68:	4b11      	ldr	r3, [pc, #68]	; (5eb0 <grid_port_process_inbound+0x1b4>)
    5e6a:	4798      	blx	r3
    5e6c:	4540      	cmp	r0, r8
    5e6e:	d1b1      	bne.n	5dd4 <grid_port_process_inbound+0xd8>
    5e70:	1e63      	subs	r3, r4, #1
    5e72:	b2db      	uxtb	r3, r3
    5e74:	f107 0240 	add.w	r2, r7, #64	; 0x40
    5e78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5e7c:	3b14      	subs	r3, #20
		for (uint8_t i=0; i<port_count; i++)
    5e7e:	f04f 0b00 	mov.w	fp, #0
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    5e82:	f8df 9044 	ldr.w	r9, [pc, #68]	; 5ec8 <grid_port_process_inbound+0x1cc>
    5e86:	60fb      	str	r3, [r7, #12]
    5e88:	e7ca      	b.n	5e20 <grid_port_process_inbound+0x124>
    5e8a:	bf00      	nop
    5e8c:	000059cd 	.word	0x000059cd
    5e90:	2000121c 	.word	0x2000121c
    5e94:	20006760 	.word	0x20006760
    5e98:	2000474c 	.word	0x2000474c
    5e9c:	20003730 	.word	0x20003730
    5ea0:	20002268 	.word	0x20002268
    5ea4:	20005758 	.word	0x20005758
    5ea8:	20003280 	.word	0x20003280
    5eac:	0000816d 	.word	0x0000816d
    5eb0:	00005a3f 	.word	0x00005a3f
    5eb4:	00005971 	.word	0x00005971
    5eb8:	00005ac9 	.word	0x00005ac9
    5ebc:	00005af1 	.word	0x00005af1
    5ec0:	000059bd 	.word	0x000059bd
    5ec4:	0000595d 	.word	0x0000595d
    5ec8:	000059a1 	.word	0x000059a1

00005ecc <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    5ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ed0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    5ed4:	af06      	add	r7, sp, #24
    5ed6:	62f8      	str	r0, [r7, #44]	; 0x2c
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    5ed8:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    5edc:	4630      	mov	r0, r6
    5ede:	4b8a      	ldr	r3, [pc, #552]	; (6108 <grid_port_process_outbound_usb+0x23c>)
    5ee0:	4798      	blx	r3
	
	if (!length){		
    5ee2:	2800      	cmp	r0, #0
    5ee4:	f000 8227 	beq.w	6336 <grid_port_process_outbound_usb+0x46a>
    5ee8:	4604      	mov	r4, r0
    5eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5eec:	4613      	mov	r3, r2
    5eee:	332f      	adds	r3, #47	; 0x2f
    5ef0:	f202 71ff 	addw	r1, r2, #2047	; 0x7ff


	if (length){
		
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
			por->tx_double_buffer[i] = 0;
    5ef4:	2200      	movs	r2, #0
    5ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
		for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    5efa:	428b      	cmp	r3, r1
    5efc:	d1fb      	bne.n	5ef6 <grid_port_process_outbound_usb+0x2a>
		}
		
		
		
		uint8_t temp[500] = {0};
    5efe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    5f02:	2100      	movs	r1, #0
    5f04:	f107 0034 	add.w	r0, r7, #52	; 0x34
    5f08:	4b80      	ldr	r3, [pc, #512]	; (610c <grid_port_process_outbound_usb+0x240>)
    5f0a:	4798      	blx	r3
			
		
		//uint8_t temp[length];
		
		// Let's transfer the packet to local memory
		grid_buffer_read_init(&por->tx_buffer);
    5f0c:	4630      	mov	r0, r6
    5f0e:	4b80      	ldr	r3, [pc, #512]	; (6110 <grid_port_process_outbound_usb+0x244>)
    5f10:	4798      	blx	r3
    5f12:	2500      	movs	r5, #0
		
		for (uint8_t i = 0; i<length; i++){
			
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    5f14:	f8df 9238 	ldr.w	r9, [pc, #568]	; 6150 <grid_port_process_outbound_usb+0x284>
    5f18:	f107 0834 	add.w	r8, r7, #52	; 0x34
    5f1c:	4630      	mov	r0, r6
    5f1e:	47c8      	blx	r9
    5f20:	f808 0005 	strb.w	r0, [r8, r5]
		for (uint8_t i = 0; i<length; i++){
    5f24:	3501      	adds	r5, #1
    5f26:	b2ed      	uxtb	r5, r5
    5f28:	b2ab      	uxth	r3, r5
    5f2a:	429c      	cmp	r4, r3
    5f2c:	d8f6      	bhi.n	5f1c <grid_port_process_outbound_usb+0x50>
			
		}
				
		// Let's acknowledge the transactions	(should wait for partner to send ack)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    5f2e:	4630      	mov	r0, r6
    5f30:	4b78      	ldr	r3, [pc, #480]	; (6114 <grid_port_process_outbound_usb+0x248>)
    5f32:	4798      	blx	r3
		

		// GRID-2-HOST TRANSLATOR
		uint8_t id = grid_msg_get_id(temp);		
    5f34:	f107 0034 	add.w	r0, r7, #52	; 0x34
    5f38:	4b77      	ldr	r3, [pc, #476]	; (6118 <grid_port_process_outbound_usb+0x24c>)
    5f3a:	4798      	blx	r3
    5f3c:	61f8      	str	r0, [r7, #28]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    5f3e:	f107 0034 	add.w	r0, r7, #52	; 0x34
    5f42:	4b76      	ldr	r3, [pc, #472]	; (611c <grid_port_process_outbound_usb+0x250>)
    5f44:	4798      	blx	r3
    5f46:	4606      	mov	r6, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    5f48:	f107 0034 	add.w	r0, r7, #52	; 0x34
    5f4c:	4b74      	ldr	r3, [pc, #464]	; (6120 <grid_port_process_outbound_usb+0x254>)
    5f4e:	4798      	blx	r3
    5f50:	4680      	mov	r8, r0
		uint8_t age = grid_msg_get_age(temp);
    5f52:	f107 0034 	add.w	r0, r7, #52	; 0x34
    5f56:	4b73      	ldr	r3, [pc, #460]	; (6124 <grid_port_process_outbound_usb+0x258>)
    5f58:	4798      	blx	r3
    5f5a:	61b8      	str	r0, [r7, #24]
		uint8_t current_start		= 0;
		uint8_t current_stop		= 0;
		
		uint8_t output_cursor = 0;
		
		uint8_t error_flag = 0;
    5f5c:	2500      	movs	r5, #0
    5f5e:	f887 5033 	strb.w	r5, [r7, #51]	; 0x33
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;		
    5f62:	f1a8 087f 	sub.w	r8, r8, #127	; 0x7f
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
					
					
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    5f66:	fa4f f388 	sxtb.w	r3, r8
    5f6a:	627b      	str	r3, [r7, #36]	; 0x24
    5f6c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
    5f70:	005b      	lsls	r3, r3, #1
    5f72:	1aea      	subs	r2, r5, r3
    5f74:	f003 0307 	and.w	r3, r3, #7
    5f78:	4619      	mov	r1, r3
    5f7a:	f002 0307 	and.w	r3, r2, #7
    5f7e:	460a      	mov	r2, r1
    5f80:	bf58      	it	pl
    5f82:	425a      	negpl	r2, r3
    5f84:	60fa      	str	r2, [r7, #12]
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    5f86:	3e7f      	subs	r6, #127	; 0x7f
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    5f88:	b273      	sxtb	r3, r6
    5f8a:	623b      	str	r3, [r7, #32]
    5f8c:	011b      	lsls	r3, r3, #4
    5f8e:	60bb      	str	r3, [r7, #8]
    5f90:	1e63      	subs	r3, r4, #1
    5f92:	b29b      	uxth	r3, r3
    5f94:	f103 0901 	add.w	r9, r3, #1
    5f98:	46ab      	mov	fp, r5
					
									
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
		
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    5f9a:	464b      	mov	r3, r9
    5f9c:	46d9      	mov	r9, fp
    5f9e:	469a      	mov	sl, r3
    5fa0:	e006      	b.n	5fb0 <grid_port_process_outbound_usb+0xe4>
				current_start = i;
    5fa2:	fa5f f58b 	uxtb.w	r5, fp
    5fa6:	f10b 0b01 	add.w	fp, fp, #1
		for (uint16_t i=0; i<length; i++){
    5faa:	45d3      	cmp	fp, sl
    5fac:	f000 81be 	beq.w	632c <grid_port_process_outbound_usb+0x460>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    5fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
    5fb4:	f81b 3003 	ldrb.w	r3, [fp, r3]
    5fb8:	2b02      	cmp	r3, #2
    5fba:	d0f2      	beq.n	5fa2 <grid_port_process_outbound_usb+0xd6>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    5fbc:	2b03      	cmp	r3, #3
    5fbe:	d1f2      	bne.n	5fa6 <grid_port_process_outbound_usb+0xda>
    5fc0:	2d00      	cmp	r5, #0
    5fc2:	d0f0      	beq.n	5fa6 <grid_port_process_outbound_usb+0xda>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);			
    5fc4:	462c      	mov	r4, r5
    5fc6:	f107 0233 	add.w	r2, r7, #51	; 0x33
    5fca:	2102      	movs	r1, #2
    5fcc:	f507 730a 	add.w	r3, r7, #552	; 0x228
    5fd0:	1958      	adds	r0, r3, r5
    5fd2:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    5fd6:	4b54      	ldr	r3, [pc, #336]	; (6128 <grid_port_process_outbound_usb+0x25c>)
    5fd8:	4798      	blx	r3
				if (msg_protocol == GRID_MSG_PROTOCOL_MIDI){
    5fda:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    5fde:	d019      	beq.n	6014 <grid_port_process_outbound_usb+0x148>
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    5fe0:	2e01      	cmp	r6, #1
    5fe2:	f000 80b7 	beq.w	6154 <grid_port_process_outbound_usb+0x288>
					//usb_debug[2] = hiddf_keyboard_keys_state_change(key_array, key_array_length);
		
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_SYS){
    5fe6:	2e04      	cmp	r6, #4
    5fe8:	f000 812d 	beq.w	6246 <grid_port_process_outbound_usb+0x37a>

					}
					
				
				}
				else if (msg_protocol == GRID_MSG_PROTOCOL_MOUSE){
    5fec:	2e02      	cmp	r6, #2
    5fee:	f000 819b 	beq.w	6328 <grid_port_process_outbound_usb+0x45c>
					
					//hiddf_mouse_move(-20, HID_MOUSE_X_AXIS_MV);
					
				}	
				else{
					sprintf(&por->tx_double_buffer[output_cursor], "[UNKNOWN] -> Protocol: %d\n", msg_protocol);
    5ff2:	f109 0430 	add.w	r4, r9, #48	; 0x30
    5ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5ff8:	441c      	add	r4, r3
    5ffa:	b2c2      	uxtb	r2, r0
    5ffc:	494b      	ldr	r1, [pc, #300]	; (612c <grid_port_process_outbound_usb+0x260>)
    5ffe:	4620      	mov	r0, r4
    6000:	4b4b      	ldr	r3, [pc, #300]	; (6130 <grid_port_process_outbound_usb+0x264>)
    6002:	4798      	blx	r3
					
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    6004:	4620      	mov	r0, r4
    6006:	4b4b      	ldr	r3, [pc, #300]	; (6134 <grid_port_process_outbound_usb+0x268>)
    6008:	4798      	blx	r3
    600a:	4481      	add	r9, r0
    600c:	fa5f f989 	uxtb.w	r9, r9
				}
				
				current_start = 0;
    6010:	2500      	movs	r5, #0
    6012:	e7c8      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
					uint8_t midi_channel = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    6014:	1ce8      	adds	r0, r5, #3
    6016:	f107 0233 	add.w	r2, r7, #51	; 0x33
    601a:	2102      	movs	r1, #2
    601c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    6020:	4418      	add	r0, r3
    6022:	4b41      	ldr	r3, [pc, #260]	; (6128 <grid_port_process_outbound_usb+0x25c>)
    6024:	4798      	blx	r3
					uint8_t midi_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    6026:	1d68      	adds	r0, r5, #5
    6028:	f107 0233 	add.w	r2, r7, #51	; 0x33
    602c:	2102      	movs	r1, #2
    602e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    6032:	4418      	add	r0, r3
    6034:	4b3c      	ldr	r3, [pc, #240]	; (6128 <grid_port_process_outbound_usb+0x25c>)
    6036:	4798      	blx	r3
    6038:	fa5f f880 	uxtb.w	r8, r0
					uint8_t midi_param1  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    603c:	1de8      	adds	r0, r5, #7
    603e:	f107 0233 	add.w	r2, r7, #51	; 0x33
    6042:	2102      	movs	r1, #2
    6044:	f107 0334 	add.w	r3, r7, #52	; 0x34
    6048:	4418      	add	r0, r3
    604a:	4b37      	ldr	r3, [pc, #220]	; (6128 <grid_port_process_outbound_usb+0x25c>)
    604c:	4798      	blx	r3
    604e:	4604      	mov	r4, r0
					uint8_t midi_param2  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    6050:	f105 0009 	add.w	r0, r5, #9
    6054:	f107 0233 	add.w	r2, r7, #51	; 0x33
    6058:	2102      	movs	r1, #2
    605a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    605e:	4418      	add	r0, r3
    6060:	4b31      	ldr	r3, [pc, #196]	; (6128 <grid_port_process_outbound_usb+0x25c>)
    6062:	4798      	blx	r3
					midi_channel = ((256-dy*2)%8+grid_sys_state.bank_select*8)%16;
    6064:	4b34      	ldr	r3, [pc, #208]	; (6138 <grid_port_process_outbound_usb+0x26c>)
    6066:	7a59      	ldrb	r1, [r3, #9]
    6068:	68fb      	ldr	r3, [r7, #12]
    606a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    606e:	424b      	negs	r3, r1
    6070:	f001 020f 	and.w	r2, r1, #15
    6074:	f003 030f 	and.w	r3, r3, #15
    6078:	bf58      	it	pl
    607a:	425a      	negpl	r2, r3
    607c:	617a      	str	r2, [r7, #20]
    607e:	7d3b      	ldrb	r3, [r7, #20]
    6080:	4619      	mov	r1, r3
					midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    6082:	b2e4      	uxtb	r4, r4
    6084:	34e0      	adds	r4, #224	; 0xe0
    6086:	68bb      	ldr	r3, [r7, #8]
    6088:	441c      	add	r4, r3
    608a:	4b2c      	ldr	r3, [pc, #176]	; (613c <grid_port_process_outbound_usb+0x270>)
    608c:	fb83 3204 	smull	r3, r2, r3, r4
    6090:	17e3      	asrs	r3, r4, #31
    6092:	ebc3 1322 	rsb	r3, r3, r2, asr #4
    6096:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    609a:	eba4 1443 	sub.w	r4, r4, r3, lsl #5
    609e:	b2e4      	uxtb	r4, r4
    60a0:	b2c3      	uxtb	r3, r0
					printf("{\"type\":\"MIDI\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, midi_channel,	midi_command, midi_param1, midi_param2);
    60a2:	62bb      	str	r3, [r7, #40]	; 0x28
    60a4:	9302      	str	r3, [sp, #8]
    60a6:	9401      	str	r4, [sp, #4]
    60a8:	f8cd 8000 	str.w	r8, [sp]
    60ac:	6139      	str	r1, [r7, #16]
    60ae:	460b      	mov	r3, r1
    60b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    60b2:	6a39      	ldr	r1, [r7, #32]
    60b4:	4822      	ldr	r0, [pc, #136]	; (6140 <grid_port_process_outbound_usb+0x274>)
    60b6:	4d23      	ldr	r5, [pc, #140]	; (6144 <grid_port_process_outbound_usb+0x278>)
    60b8:	47a8      	blx	r5
					sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [MIDI] Ch: %d  Cmd: %d  Param1: %d  Param2: %d\n",					
    60ba:	f109 0530 	add.w	r5, r9, #48	; 0x30
    60be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    60c0:	4428      	add	r0, r5
    60c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    60c4:	9205      	str	r2, [sp, #20]
    60c6:	9404      	str	r4, [sp, #16]
    60c8:	f8cd 800c 	str.w	r8, [sp, #12]
    60cc:	6939      	ldr	r1, [r7, #16]
    60ce:	9102      	str	r1, [sp, #8]
    60d0:	69b9      	ldr	r1, [r7, #24]
    60d2:	9101      	str	r1, [sp, #4]
    60d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    60d6:	9100      	str	r1, [sp, #0]
    60d8:	6a3b      	ldr	r3, [r7, #32]
    60da:	69fa      	ldr	r2, [r7, #28]
    60dc:	491a      	ldr	r1, [pc, #104]	; (6148 <grid_port_process_outbound_usb+0x27c>)
    60de:	6138      	str	r0, [r7, #16]
    60e0:	4d13      	ldr	r5, [pc, #76]	; (6130 <grid_port_process_outbound_usb+0x264>)
    60e2:	47a8      	blx	r5
					output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    60e4:	6938      	ldr	r0, [r7, #16]
    60e6:	4b13      	ldr	r3, [pc, #76]	; (6134 <grid_port_process_outbound_usb+0x268>)
    60e8:	4798      	blx	r3
    60ea:	4481      	add	r9, r0
    60ec:	fa5f f989 	uxtb.w	r9, r9
					audiodf_midi_xfer_packet(midi_command>>4, midi_command|midi_channel, midi_param1, midi_param2);	
    60f0:	6979      	ldr	r1, [r7, #20]
    60f2:	ea48 0101 	orr.w	r1, r8, r1
    60f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    60f8:	4622      	mov	r2, r4
    60fa:	b2c9      	uxtb	r1, r1
    60fc:	ea4f 1018 	mov.w	r0, r8, lsr #4
    6100:	4c12      	ldr	r4, [pc, #72]	; (614c <grid_port_process_outbound_usb+0x280>)
    6102:	47a0      	blx	r4
				current_start = 0;
    6104:	4635      	mov	r5, r6
    6106:	e74e      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
    6108:	000059cd 	.word	0x000059cd
    610c:	0000fec3 	.word	0x0000fec3
    6110:	00005a3f 	.word	0x00005a3f
    6114:	00005af1 	.word	0x00005af1
    6118:	00008525 	.word	0x00008525
    611c:	00008545 	.word	0x00008545
    6120:	00008565 	.word	0x00008565
    6124:	00008585 	.word	0x00008585
    6128:	000081c1 	.word	0x000081c1
    612c:	000115ac 	.word	0x000115ac
    6130:	00010325 	.word	0x00010325
    6134:	0001036d 	.word	0x0001036d
    6138:	20003280 	.word	0x20003280
    613c:	2aaaaaab 	.word	0x2aaaaaab
    6140:	0001147c 	.word	0x0001147c
    6144:	0001002d 	.word	0x0001002d
    6148:	000114bc 	.word	0x000114bc
    614c:	0000ed0d 	.word	0x0000ed0d
    6150:	00005ac9 	.word	0x00005ac9
				else if (msg_protocol == GRID_MSG_PROTOCOL_KEYBOARD){
    6154:	f8c7 d010 	str.w	sp, [r7, #16]
					uint8_t key_array_length = (current_stop-current_start-3)/6;
    6158:	fa5f f38b 	uxtb.w	r3, fp
    615c:	1b5b      	subs	r3, r3, r5
    615e:	1eda      	subs	r2, r3, #3
    6160:	4b77      	ldr	r3, [pc, #476]	; (6340 <grid_port_process_outbound_usb+0x474>)
    6162:	fb83 1302 	smull	r1, r3, r3, r2
    6166:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    616a:	b2db      	uxtb	r3, r3
 					struct hiddf_kb_key_descriptors key_array[key_array_length];
    616c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6170:	3207      	adds	r2, #7
    6172:	f022 0207 	bic.w	r2, r2, #7
    6176:	ebad 0d02 	sub.w	sp, sp, r2
    617a:	aa06      	add	r2, sp, #24
					for(uint8_t j=0; j<key_array_length; j++){
    617c:	2b00      	cmp	r3, #0
    617e:	d05e      	beq.n	623e <grid_port_process_outbound_usb+0x372>
    6180:	3403      	adds	r4, #3
    6182:	f107 0134 	add.w	r1, r7, #52	; 0x34
    6186:	440c      	add	r4, r1
    6188:	4690      	mov	r8, r2
    618a:	3b01      	subs	r3, #1
    618c:	b2db      	uxtb	r3, r3
    618e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6192:	3509      	adds	r5, #9
    6194:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    6198:	18cb      	adds	r3, r1, r3
    619a:	617b      	str	r3, [r7, #20]
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    619c:	f8c7 b004 	str.w	fp, [r7, #4]
    61a0:	f8c7 a000 	str.w	sl, [r7]
						uint8_t keyboard_command	= grid_sys_read_hex_string_value(&temp[current_start+3+6*j], 2, &error_flag);
    61a4:	f107 0233 	add.w	r2, r7, #51	; 0x33
    61a8:	2102      	movs	r1, #2
    61aa:	4620      	mov	r0, r4
    61ac:	4b65      	ldr	r3, [pc, #404]	; (6344 <grid_port_process_outbound_usb+0x478>)
    61ae:	4798      	blx	r3
    61b0:	4605      	mov	r5, r0
						uint8_t keyboard_modifier	= grid_sys_read_hex_string_value(&temp[current_start+5+6*j], 2, &error_flag);
    61b2:	f107 0233 	add.w	r2, r7, #51	; 0x33
    61b6:	2102      	movs	r1, #2
    61b8:	1860      	adds	r0, r4, r1
    61ba:	4b62      	ldr	r3, [pc, #392]	; (6344 <grid_port_process_outbound_usb+0x478>)
    61bc:	4798      	blx	r3
    61be:	4606      	mov	r6, r0
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    61c0:	f107 0233 	add.w	r2, r7, #51	; 0x33
    61c4:	2102      	movs	r1, #2
    61c6:	1d20      	adds	r0, r4, #4
    61c8:	4b5e      	ldr	r3, [pc, #376]	; (6344 <grid_port_process_outbound_usb+0x478>)
    61ca:	4798      	blx	r3
    61cc:	4683      	mov	fp, r0
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [KEYBOARD] Key: %d Mod: %d Cmd: %d\nHWCFG: %08x\n", 
    61ce:	f109 0a30 	add.w	sl, r9, #48	; 0x30
    61d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    61d4:	449a      	add	sl, r3
    61d6:	4b5c      	ldr	r3, [pc, #368]	; (6348 <grid_port_process_outbound_usb+0x47c>)
    61d8:	4798      	blx	r3
    61da:	9005      	str	r0, [sp, #20]
    61dc:	b2eb      	uxtb	r3, r5
    61de:	62bb      	str	r3, [r7, #40]	; 0x28
    61e0:	9304      	str	r3, [sp, #16]
    61e2:	b2f6      	uxtb	r6, r6
    61e4:	9603      	str	r6, [sp, #12]
    61e6:	fa5f f38b 	uxtb.w	r3, fp
    61ea:	9302      	str	r3, [sp, #8]
    61ec:	69bb      	ldr	r3, [r7, #24]
    61ee:	9301      	str	r3, [sp, #4]
    61f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    61f2:	9300      	str	r3, [sp, #0]
    61f4:	6a3b      	ldr	r3, [r7, #32]
    61f6:	69fa      	ldr	r2, [r7, #28]
    61f8:	4954      	ldr	r1, [pc, #336]	; (634c <grid_port_process_outbound_usb+0x480>)
    61fa:	4650      	mov	r0, sl
    61fc:	4d54      	ldr	r5, [pc, #336]	; (6350 <grid_port_process_outbound_usb+0x484>)
    61fe:	47a8      	blx	r5
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    6200:	4650      	mov	r0, sl
    6202:	4b54      	ldr	r3, [pc, #336]	; (6354 <grid_port_process_outbound_usb+0x488>)
    6204:	4798      	blx	r3
    6206:	4481      	add	r9, r0
    6208:	fa5f f989 	uxtb.w	r9, r9
						uint8_t keyboard_key		= grid_sys_read_hex_string_value(&temp[current_start+7+6*j], 2, &error_flag);
    620c:	f888 b000 	strb.w	fp, [r8]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    6210:	2e82      	cmp	r6, #130	; 0x82
    6212:	bf14      	ite	ne
    6214:	2600      	movne	r6, #0
    6216:	2601      	moveq	r6, #1
						key_array[j] = current_key;
    6218:	f888 6001 	strb.w	r6, [r8, #1]
						struct hiddf_kb_key_descriptors current_key = {keyboard_key, keyboard_modifier == GRID_MSG_PROTOCOL_KEYBOARD_PARAMETER_MODIFIER, keyboard_command == GRID_MSG_PROTOCOL_KEYBOARD_COMMAND_KEYDOWN};
    621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    621e:	2b80      	cmp	r3, #128	; 0x80
    6220:	bf14      	ite	ne
    6222:	2500      	movne	r5, #0
    6224:	2501      	moveq	r5, #1
    6226:	f888 5002 	strb.w	r5, [r8, #2]
    622a:	3406      	adds	r4, #6
    622c:	f108 0803 	add.w	r8, r8, #3
					for(uint8_t j=0; j<key_array_length; j++){
    6230:	697b      	ldr	r3, [r7, #20]
    6232:	429c      	cmp	r4, r3
    6234:	d1b6      	bne.n	61a4 <grid_port_process_outbound_usb+0x2d8>
    6236:	f8d7 b004 	ldr.w	fp, [r7, #4]
    623a:	f8d7 a000 	ldr.w	sl, [r7]
    623e:	f8d7 d010 	ldr.w	sp, [r7, #16]
				current_start = 0;
    6242:	2500      	movs	r5, #0
    6244:	e6af      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
					uint8_t sys_command		= grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    6246:	1ce8      	adds	r0, r5, #3
    6248:	f107 0233 	add.w	r2, r7, #51	; 0x33
    624c:	2102      	movs	r1, #2
    624e:	f107 0334 	add.w	r3, r7, #52	; 0x34
    6252:	4418      	add	r0, r3
    6254:	4b3b      	ldr	r3, [pc, #236]	; (6344 <grid_port_process_outbound_usb+0x478>)
    6256:	4798      	blx	r3
    6258:	62b8      	str	r0, [r7, #40]	; 0x28
    625a:	b2c5      	uxtb	r5, r0
					uint8_t sys_subcommand  = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    625c:	1d60      	adds	r0, r4, #5
    625e:	f107 0233 	add.w	r2, r7, #51	; 0x33
    6262:	2102      	movs	r1, #2
    6264:	f107 0334 	add.w	r3, r7, #52	; 0x34
    6268:	4418      	add	r0, r3
    626a:	4b36      	ldr	r3, [pc, #216]	; (6344 <grid_port_process_outbound_usb+0x478>)
    626c:	4798      	blx	r3
    626e:	4680      	mov	r8, r0
    6270:	b2c6      	uxtb	r6, r0
					uint8_t sys_value	    = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    6272:	1de0      	adds	r0, r4, #7
    6274:	f107 0233 	add.w	r2, r7, #51	; 0x33
    6278:	2102      	movs	r1, #2
    627a:	f107 0334 	add.w	r3, r7, #52	; 0x34
    627e:	4418      	add	r0, r3
    6280:	4b30      	ldr	r3, [pc, #192]	; (6344 <grid_port_process_outbound_usb+0x478>)
    6282:	4798      	blx	r3
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    6284:	2d64      	cmp	r5, #100	; 0x64
    6286:	d003      	beq.n	6290 <grid_port_process_outbound_usb+0x3c4>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    6288:	2d66      	cmp	r5, #102	; 0x66
    628a:	d025      	beq.n	62d8 <grid_port_process_outbound_usb+0x40c>
				current_start = 0;
    628c:	2500      	movs	r5, #0
    628e:	e68a      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    6290:	2e65      	cmp	r6, #101	; 0x65
    6292:	d001      	beq.n	6298 <grid_port_process_outbound_usb+0x3cc>
				current_start = 0;
    6294:	2500      	movs	r5, #0
    6296:	e686      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
    6298:	b2c4      	uxtb	r4, r0
						grid_sys_bank_select(&grid_sys_state, sys_value);		
    629a:	4621      	mov	r1, r4
    629c:	482e      	ldr	r0, [pc, #184]	; (6358 <grid_port_process_outbound_usb+0x48c>)
    629e:	4b2f      	ldr	r3, [pc, #188]	; (635c <grid_port_process_outbound_usb+0x490>)
    62a0:	4798      	blx	r3
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    62a2:	f109 0530 	add.w	r5, r9, #48	; 0x30
    62a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    62a8:	441d      	add	r5, r3
    62aa:	9404      	str	r4, [sp, #16]
    62ac:	9603      	str	r6, [sp, #12]
    62ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    62b2:	9302      	str	r3, [sp, #8]
    62b4:	69bb      	ldr	r3, [r7, #24]
    62b6:	9301      	str	r3, [sp, #4]
    62b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    62ba:	9300      	str	r3, [sp, #0]
    62bc:	6a3b      	ldr	r3, [r7, #32]
    62be:	69fa      	ldr	r2, [r7, #28]
    62c0:	4927      	ldr	r1, [pc, #156]	; (6360 <grid_port_process_outbound_usb+0x494>)
    62c2:	4628      	mov	r0, r5
    62c4:	4c22      	ldr	r4, [pc, #136]	; (6350 <grid_port_process_outbound_usb+0x484>)
    62c6:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);		
    62c8:	4628      	mov	r0, r5
    62ca:	4b22      	ldr	r3, [pc, #136]	; (6354 <grid_port_process_outbound_usb+0x488>)
    62cc:	4798      	blx	r3
    62ce:	4481      	add	r9, r0
    62d0:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    62d4:	2500      	movs	r5, #0
					if (sys_command == GRID_MSG_COMMAND_SYS_BANK && sys_subcommand == GRID_MSG_COMMAND_SYS_BANK_SELECT){
    62d6:	e666      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
					else if (sys_command == GRID_MSG_COMMAND_SYS_HEARTBEAT && sys_subcommand == GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE){
    62d8:	2e67      	cmp	r6, #103	; 0x67
    62da:	d001      	beq.n	62e0 <grid_port_process_outbound_usb+0x414>
				current_start = 0;
    62dc:	2500      	movs	r5, #0
    62de:	e662      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
    62e0:	b2c5      	uxtb	r5, r0
						printf("{\"type\":\"HEARTBEAT\", \"data\": [\"%d\", \"%d\", \"%d\"]}\r\n", dx, dy, sys_value);		
    62e2:	462b      	mov	r3, r5
    62e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    62e6:	6a39      	ldr	r1, [r7, #32]
    62e8:	481e      	ldr	r0, [pc, #120]	; (6364 <grid_port_process_outbound_usb+0x498>)
    62ea:	4c1f      	ldr	r4, [pc, #124]	; (6368 <grid_port_process_outbound_usb+0x49c>)
    62ec:	47a0      	blx	r4
						sprintf(&por->tx_double_buffer[output_cursor], "[GRID] %3d %4d %4d %d [SYS] %3d %3d %3d\n",
    62ee:	f109 0630 	add.w	r6, r9, #48	; 0x30
    62f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    62f4:	4416      	add	r6, r2
    62f6:	9504      	str	r5, [sp, #16]
    62f8:	fa5f f388 	uxtb.w	r3, r8
    62fc:	9303      	str	r3, [sp, #12]
    62fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    6302:	9302      	str	r3, [sp, #8]
    6304:	69ba      	ldr	r2, [r7, #24]
    6306:	9201      	str	r2, [sp, #4]
    6308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    630a:	9200      	str	r2, [sp, #0]
    630c:	6a3b      	ldr	r3, [r7, #32]
    630e:	69fa      	ldr	r2, [r7, #28]
    6310:	4913      	ldr	r1, [pc, #76]	; (6360 <grid_port_process_outbound_usb+0x494>)
    6312:	4630      	mov	r0, r6
    6314:	4c0e      	ldr	r4, [pc, #56]	; (6350 <grid_port_process_outbound_usb+0x484>)
    6316:	47a0      	blx	r4
						output_cursor += strlen(&por->tx_double_buffer[output_cursor]);
    6318:	4630      	mov	r0, r6
    631a:	4b0e      	ldr	r3, [pc, #56]	; (6354 <grid_port_process_outbound_usb+0x488>)
    631c:	4798      	blx	r3
    631e:	4481      	add	r9, r0
    6320:	fa5f f989 	uxtb.w	r9, r9
				current_start = 0;
    6324:	2500      	movs	r5, #0
    6326:	e63e      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
    6328:	2500      	movs	r5, #0
    632a:	e63c      	b.n	5fa6 <grid_port_process_outbound_usb+0xda>
		
		
					
		
		// Let's send the packet through USB
		cdcdf_acm_write(por->tx_double_buffer, output_cursor);
    632c:	4649      	mov	r1, r9
    632e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6330:	3030      	adds	r0, #48	; 0x30
    6332:	4b0e      	ldr	r3, [pc, #56]	; (636c <grid_port_process_outbound_usb+0x4a0>)
    6334:	4798      	blx	r3
				
		
	}
	
	
}
    6336:	f507 770b 	add.w	r7, r7, #556	; 0x22c
    633a:	46bd      	mov	sp, r7
    633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6340:	2aaaaaab 	.word	0x2aaaaaab
    6344:	000081c1 	.word	0x000081c1
    6348:	00008239 	.word	0x00008239
    634c:	00011504 	.word	0x00011504
    6350:	00010325 	.word	0x00010325
    6354:	0001036d 	.word	0x0001036d
    6358:	20003280 	.word	0x20003280
    635c:	00008329 	.word	0x00008329
    6360:	0001154c 	.word	0x0001154c
    6364:	00011578 	.word	0x00011578
    6368:	0001002d 	.word	0x0001002d
    636c:	0000e549 	.word	0x0000e549

00006370 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    6370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6374:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    6378:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    637c:	4630      	mov	r0, r6
    637e:	4b48      	ldr	r3, [pc, #288]	; (64a0 <grid_port_process_outbound_ui+0x130>)
    6380:	4798      	blx	r3
	
	if (!length){
    6382:	b918      	cbnz	r0, 638c <grid_port_process_outbound_ui+0x1c>

		
	}
	
	
}
    6384:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
    6388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    638c:	4605      	mov	r5, r0
		uint8_t temp[500] = {0};
    638e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    6392:	2100      	movs	r1, #0
    6394:	a805      	add	r0, sp, #20
    6396:	4b43      	ldr	r3, [pc, #268]	; (64a4 <grid_port_process_outbound_ui+0x134>)
    6398:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    639a:	4630      	mov	r0, r6
    639c:	4b42      	ldr	r3, [pc, #264]	; (64a8 <grid_port_process_outbound_ui+0x138>)
    639e:	4798      	blx	r3
    63a0:	2400      	movs	r4, #0
			temp[i] = grid_buffer_read_character(&por->tx_buffer);
    63a2:	f8df 8124 	ldr.w	r8, [pc, #292]	; 64c8 <grid_port_process_outbound_ui+0x158>
    63a6:	af05      	add	r7, sp, #20
    63a8:	4630      	mov	r0, r6
    63aa:	47c0      	blx	r8
    63ac:	5538      	strb	r0, [r7, r4]
		for (uint8_t i = 0; i<length; i++){
    63ae:	3401      	adds	r4, #1
    63b0:	b2e4      	uxtb	r4, r4
    63b2:	b2a3      	uxth	r3, r4
    63b4:	429d      	cmp	r5, r3
    63b6:	d8f7      	bhi.n	63a8 <grid_port_process_outbound_ui+0x38>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    63b8:	4630      	mov	r0, r6
    63ba:	4b3c      	ldr	r3, [pc, #240]	; (64ac <grid_port_process_outbound_ui+0x13c>)
    63bc:	4798      	blx	r3
		uint8_t id = grid_msg_get_id(temp);
    63be:	ac05      	add	r4, sp, #20
    63c0:	4620      	mov	r0, r4
    63c2:	4b3b      	ldr	r3, [pc, #236]	; (64b0 <grid_port_process_outbound_ui+0x140>)
    63c4:	4798      	blx	r3
		int8_t dx = grid_msg_get_dx(temp) - GRID_SYS_DEFAULT_POSITION;
    63c6:	4620      	mov	r0, r4
    63c8:	4b3a      	ldr	r3, [pc, #232]	; (64b4 <grid_port_process_outbound_ui+0x144>)
    63ca:	4798      	blx	r3
    63cc:	4681      	mov	r9, r0
		int8_t dy = grid_msg_get_dy(temp) - GRID_SYS_DEFAULT_POSITION;
    63ce:	4620      	mov	r0, r4
    63d0:	4b39      	ldr	r3, [pc, #228]	; (64b8 <grid_port_process_outbound_ui+0x148>)
    63d2:	4798      	blx	r3
    63d4:	4682      	mov	sl, r0
		uint8_t age = grid_msg_get_age(temp);
    63d6:	4620      	mov	r0, r4
    63d8:	4b38      	ldr	r3, [pc, #224]	; (64bc <grid_port_process_outbound_ui+0x14c>)
    63da:	4798      	blx	r3
		uint8_t error_flag = 0;	
    63dc:	2000      	movs	r0, #0
    63de:	f88d 0013 	strb.w	r0, [sp, #19]
    63e2:	4626      	mov	r6, r4
    63e4:	3d01      	subs	r5, #1
    63e6:	b2ad      	uxth	r5, r5
    63e8:	3501      	adds	r5, #1
    63ea:	4425      	add	r5, r4
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    63ec:	4f34      	ldr	r7, [pc, #208]	; (64c0 <grid_port_process_outbound_ui+0x150>)
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    63ee:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 64cc <grid_port_process_outbound_ui+0x15c>
    63f2:	e004      	b.n	63fe <grid_port_process_outbound_ui+0x8e>
    63f4:	1ba0      	subs	r0, r4, r6
    63f6:	b2c0      	uxtb	r0, r0
    63f8:	3401      	adds	r4, #1
		for (uint16_t i=0; i<length; i++){
    63fa:	42ac      	cmp	r4, r5
    63fc:	d0c2      	beq.n	6384 <grid_port_process_outbound_ui+0x14>
			if (temp[i] == GRID_MSG_START_OF_TEXT){
    63fe:	7823      	ldrb	r3, [r4, #0]
    6400:	2b02      	cmp	r3, #2
    6402:	d0f7      	beq.n	63f4 <grid_port_process_outbound_ui+0x84>
			else if (temp[i] == GRID_MSG_END_OF_TEXT && current_start!=0){
    6404:	2b03      	cmp	r3, #3
    6406:	d1f7      	bne.n	63f8 <grid_port_process_outbound_ui+0x88>
    6408:	2800      	cmp	r0, #0
    640a:	d0f5      	beq.n	63f8 <grid_port_process_outbound_ui+0x88>
				uint8_t msg_protocol = grid_sys_read_hex_string_value(&temp[current_start+1], 2, &error_flag);
    640c:	4680      	mov	r8, r0
    640e:	ab82      	add	r3, sp, #520	; 0x208
    6410:	4418      	add	r0, r3
    6412:	f10d 0213 	add.w	r2, sp, #19
    6416:	2102      	movs	r1, #2
    6418:	f2a0 10f3 	subw	r0, r0, #499	; 0x1f3
    641c:	47b8      	blx	r7
				if (msg_protocol == GRID_MSG_PROTOCOL_LED){
    641e:	b2c0      	uxtb	r0, r0
    6420:	2803      	cmp	r0, #3
    6422:	d001      	beq.n	6428 <grid_port_process_outbound_ui+0xb8>
				current_start = 0;
    6424:	2000      	movs	r0, #0
    6426:	e7e7      	b.n	63f8 <grid_port_process_outbound_ui+0x88>
					if (dx == 0 && dy == 0){
    6428:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    642c:	d136      	bne.n	649c <grid_port_process_outbound_ui+0x12c>
    642e:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    6432:	d001      	beq.n	6438 <grid_port_process_outbound_ui+0xc8>
				current_start = 0;
    6434:	2000      	movs	r0, #0
    6436:	e7df      	b.n	63f8 <grid_port_process_outbound_ui+0x88>
						uint8_t led_layer = grid_sys_read_hex_string_value(&temp[current_start+3], 2, &error_flag);
    6438:	f108 0003 	add.w	r0, r8, #3
    643c:	f10d 0213 	add.w	r2, sp, #19
    6440:	2102      	movs	r1, #2
    6442:	ab05      	add	r3, sp, #20
    6444:	4418      	add	r0, r3
    6446:	47b8      	blx	r7
    6448:	9002      	str	r0, [sp, #8]
						uint8_t led_command = grid_sys_read_hex_string_value(&temp[current_start+5], 2, &error_flag);
    644a:	f108 0005 	add.w	r0, r8, #5
    644e:	f10d 0213 	add.w	r2, sp, #19
    6452:	2102      	movs	r1, #2
    6454:	ab05      	add	r3, sp, #20
    6456:	4418      	add	r0, r3
    6458:	47b8      	blx	r7
    645a:	9001      	str	r0, [sp, #4]
						uint8_t led_number  = grid_sys_read_hex_string_value(&temp[current_start+7], 2, &error_flag);
    645c:	f108 0007 	add.w	r0, r8, #7
    6460:	f10d 0213 	add.w	r2, sp, #19
    6464:	2102      	movs	r1, #2
    6466:	ab05      	add	r3, sp, #20
    6468:	4418      	add	r0, r3
    646a:	47b8      	blx	r7
    646c:	9003      	str	r0, [sp, #12]
						uint8_t led_value  = grid_sys_read_hex_string_value(&temp[current_start+9], 2, &error_flag);
    646e:	f108 0009 	add.w	r0, r8, #9
    6472:	f10d 0213 	add.w	r2, sp, #19
    6476:	2102      	movs	r1, #2
    6478:	ab05      	add	r3, sp, #20
    647a:	4418      	add	r0, r3
    647c:	47b8      	blx	r7
						if (led_command == GRID_MSG_COMMAND_LED_SET_PHASE){
    647e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6482:	2a63      	cmp	r2, #99	; 0x63
    6484:	d001      	beq.n	648a <grid_port_process_outbound_ui+0x11a>
				current_start = 0;
    6486:	2000      	movs	r0, #0
    6488:	e7b6      	b.n	63f8 <grid_port_process_outbound_ui+0x88>
							grid_led_set_phase(&grid_led_state, led_number, led_layer, led_value);
    648a:	b2c3      	uxtb	r3, r0
    648c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    6490:	f89d 100c 	ldrb.w	r1, [sp, #12]
    6494:	480b      	ldr	r0, [pc, #44]	; (64c4 <grid_port_process_outbound_ui+0x154>)
    6496:	47d8      	blx	fp
				current_start = 0;
    6498:	2000      	movs	r0, #0
    649a:	e7ad      	b.n	63f8 <grid_port_process_outbound_ui+0x88>
    649c:	2000      	movs	r0, #0
    649e:	e7ab      	b.n	63f8 <grid_port_process_outbound_ui+0x88>
    64a0:	000059cd 	.word	0x000059cd
    64a4:	0000fec3 	.word	0x0000fec3
    64a8:	00005a3f 	.word	0x00005a3f
    64ac:	00005af1 	.word	0x00005af1
    64b0:	00008525 	.word	0x00008525
    64b4:	00008545 	.word	0x00008545
    64b8:	00008565 	.word	0x00008565
    64bc:	00008585 	.word	0x00008585
    64c0:	000081c1 	.word	0x000081c1
    64c4:	200077d4 	.word	0x200077d4
    64c8:	00005ac9 	.word	0x00005ac9
    64cc:	000066e3 	.word	0x000066e3

000064d0 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    64d0:	8a03      	ldrh	r3, [r0, #16]
    64d2:	b103      	cbz	r3, 64d6 <grid_port_process_outbound_usart+0x6>
    64d4:	4770      	bx	lr
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    64d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64da:	4605      	mov	r5, r0
		
		uint32_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    64dc:	f500 667d 	add.w	r6, r0, #4048	; 0xfd0
    64e0:	4630      	mov	r0, r6
    64e2:	4b11      	ldr	r3, [pc, #68]	; (6528 <grid_port_process_outbound_usart+0x58>)
    64e4:	4798      	blx	r3
    64e6:	4604      	mov	r4, r0
    64e8:	4607      	mov	r7, r0
		
		if (!packet_size){
    64ea:	b910      	cbnz	r0, 64f2 <grid_port_process_outbound_usart+0x22>
			
			// NO PACKET IN RX BUFFER
			return 0;
    64ec:	2000      	movs	r0, #0
    64ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    64f2:	4630      	mov	r0, r6
    64f4:	4b0d      	ldr	r3, [pc, #52]	; (652c <grid_port_process_outbound_usart+0x5c>)
    64f6:	4798      	blx	r3
			
			por->tx_double_buffer_status = packet_size;
    64f8:	822c      	strh	r4, [r5, #16]
    64fa:	2400      	movs	r4, #0
			
			for (uint8_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    64fc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 6538 <grid_port_process_outbound_usart+0x68>
    6500:	4630      	mov	r0, r6
    6502:	47c0      	blx	r8
				por->tx_double_buffer[i] = character;
    6504:	192b      	adds	r3, r5, r4
    6506:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
			for (uint8_t i = 0; i<packet_size; i++){
    650a:	3401      	adds	r4, #1
    650c:	b2e4      	uxtb	r4, r4
    650e:	42a7      	cmp	r7, r4
    6510:	d8f6      	bhi.n	6500 <grid_port_process_outbound_usart+0x30>
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    6512:	4630      	mov	r0, r6
    6514:	4b06      	ldr	r3, [pc, #24]	; (6530 <grid_port_process_outbound_usart+0x60>)
    6516:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    6518:	8a2a      	ldrh	r2, [r5, #16]
    651a:	f105 0130 	add.w	r1, r5, #48	; 0x30
    651e:	68a8      	ldr	r0, [r5, #8]
    6520:	4b04      	ldr	r3, [pc, #16]	; (6534 <grid_port_process_outbound_usart+0x64>)
    6522:	4798      	blx	r3
			
		}
		
	}
	
}
    6524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6528:	000059cd 	.word	0x000059cd
    652c:	00005a3f 	.word	0x00005a3f
    6530:	00005af1 	.word	0x00005af1
    6534:	000091b9 	.word	0x000091b9
    6538:	00005ac9 	.word	0x00005ac9

0000653c <grid_led_hardware_transfer_complete_cb>:


static void grid_led_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    653c:	2201      	movs	r2, #1
    653e:	4b01      	ldr	r3, [pc, #4]	; (6544 <grid_led_hardware_transfer_complete_cb+0x8>)
    6540:	701a      	strb	r2, [r3, #0]
    6542:	4770      	bx	lr
    6544:	20001218 	.word	0x20001218

00006548 <grid_led_set_color>:
uint8_t grid_led_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    6548:	b430      	push	{r4, r5}
	if (led_index<mod->led_number){
    654a:	7844      	ldrb	r4, [r0, #1]
    654c:	428c      	cmp	r4, r1
    654e:	d802      	bhi.n	6556 <grid_led_set_color+0xe>
		return -1;		
    6550:	20ff      	movs	r0, #255	; 0xff
}
    6552:	bc30      	pop	{r4, r5}
    6554:	4770      	bx	lr
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    6556:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    655a:	0089      	lsls	r1, r1, #2
    655c:	4c0d      	ldr	r4, [pc, #52]	; (6594 <grid_led_set_color+0x4c>)
    655e:	2bff      	cmp	r3, #255	; 0xff
    6560:	bf28      	it	cs
    6562:	23ff      	movcs	r3, #255	; 0xff
    6564:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    6568:	68c3      	ldr	r3, [r0, #12]
    656a:	505d      	str	r5, [r3, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    656c:	2aff      	cmp	r2, #255	; 0xff
    656e:	bf28      	it	cs
    6570:	22ff      	movcs	r2, #255	; 0xff
    6572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    6576:	68c3      	ldr	r3, [r0, #12]
    6578:	440b      	add	r3, r1
    657a:	605a      	str	r2, [r3, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    657c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6580:	2bff      	cmp	r3, #255	; 0xff
    6582:	bf28      	it	cs
    6584:	23ff      	movcs	r3, #255	; 0xff
    6586:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    658a:	68c3      	ldr	r3, [r0, #12]
    658c:	4419      	add	r1, r3
    658e:	608a      	str	r2, [r1, #8]
		return 0;
    6590:	2000      	movs	r0, #0
    6592:	e7de      	b.n	6552 <grid_led_set_color+0xa>
    6594:	20003320 	.word	0x20003320

00006598 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    6598:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    659a:	4c06      	ldr	r4, [pc, #24]	; (65b4 <grid_led_hardware_init+0x1c>)
    659c:	f100 0114 	add.w	r1, r0, #20
    65a0:	4620      	mov	r0, r4
    65a2:	4b05      	ldr	r3, [pc, #20]	; (65b8 <grid_led_hardware_init+0x20>)
    65a4:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_hardware_transfer_complete_cb);
    65a6:	4a05      	ldr	r2, [pc, #20]	; (65bc <grid_led_hardware_init+0x24>)
    65a8:	2100      	movs	r1, #0
    65aa:	4620      	mov	r0, r4
    65ac:	4b04      	ldr	r3, [pc, #16]	; (65c0 <grid_led_hardware_init+0x28>)
    65ae:	4798      	blx	r3
    65b0:	bd10      	pop	{r4, pc}
    65b2:	bf00      	nop
    65b4:	20001098 	.word	0x20001098
    65b8:	000094f1 	.word	0x000094f1
    65bc:	0000653d 	.word	0x0000653d
    65c0:	000094e1 	.word	0x000094e1

000065c4 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    65c4:	7840      	ldrb	r0, [r0, #1]
    65c6:	4770      	bx	lr

000065c8 <grid_led_tick>:

void grid_led_tick(struct grid_led_model* mod){
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    65c8:	7843      	ldrb	r3, [r0, #1]
    65ca:	b113      	cbz	r3, 65d2 <grid_led_tick+0xa>
void grid_led_tick(struct grid_led_model* mod){
    65cc:	b430      	push	{r4, r5}
	for (uint8_t j=0; j<mod->led_number; j++){
    65ce:	2400      	movs	r4, #0
    65d0:	e005      	b.n	65de <grid_led_tick+0x16>
    65d2:	4770      	bx	lr
    65d4:	3401      	adds	r4, #1
    65d6:	b2e4      	uxtb	r4, r4
    65d8:	7843      	ldrb	r3, [r0, #1]
    65da:	42a3      	cmp	r3, r4
    65dc:	d911      	bls.n	6602 <grid_led_tick+0x3a>
void grid_led_tick(struct grid_led_model* mod){
    65de:	2100      	movs	r1, #0
					
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
			uint8_t layer = i;
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    65e0:	7843      	ldrb	r3, [r0, #1]
    65e2:	fb01 4303 	mla	r3, r1, r3, r4
    65e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    65ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    65ee:	6902      	ldr	r2, [r0, #16]
    65f0:	4413      	add	r3, r2
    65f2:	7ada      	ldrb	r2, [r3, #11]
    65f4:	7b1d      	ldrb	r5, [r3, #12]
    65f6:	442a      	add	r2, r5
    65f8:	72da      	strb	r2, [r3, #11]
    65fa:	3101      	adds	r1, #1
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    65fc:	2903      	cmp	r1, #3
    65fe:	d1ef      	bne.n	65e0 <grid_led_tick+0x18>
    6600:	e7e8      	b.n	65d4 <grid_led_tick+0xc>
		}	
	}
	/** END */
	
}
    6602:	bc30      	pop	{r4, r5}
    6604:	4770      	bx	lr

00006606 <grid_led_set_min>:


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6606:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    6608:	7844      	ldrb	r4, [r0, #1]
    660a:	fb02 1404 	mla	r4, r2, r4, r1
    660e:	6905      	ldr	r5, [r0, #16]
    6610:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    6614:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    6618:	552b      	strb	r3, [r5, r4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    661a:	7843      	ldrb	r3, [r0, #1]
    661c:	fb02 1303 	mla	r3, r2, r3, r1
    6620:	6904      	ldr	r4, [r0, #16]
    6622:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    6626:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    662a:	4423      	add	r3, r4
    662c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    6630:	705c      	strb	r4, [r3, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    6632:	7843      	ldrb	r3, [r0, #1]
    6634:	fb02 1203 	mla	r2, r2, r3, r1
    6638:	6903      	ldr	r3, [r0, #16]
    663a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    663e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    6642:	441a      	add	r2, r3
    6644:	f89d 3010 	ldrb.w	r3, [sp, #16]
    6648:	7093      	strb	r3, [r2, #2]
}
    664a:	bc70      	pop	{r4, r5, r6}
    664c:	4770      	bx	lr

0000664e <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    664e:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    6650:	7844      	ldrb	r4, [r0, #1]
    6652:	fb02 1404 	mla	r4, r2, r4, r1
    6656:	6905      	ldr	r5, [r0, #16]
    6658:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    665c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    6660:	442c      	add	r4, r5
    6662:	70e3      	strb	r3, [r4, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    6664:	7843      	ldrb	r3, [r0, #1]
    6666:	fb02 1303 	mla	r3, r2, r3, r1
    666a:	6904      	ldr	r4, [r0, #16]
    666c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    6670:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6674:	4423      	add	r3, r4
    6676:	f89d 400c 	ldrb.w	r4, [sp, #12]
    667a:	711c      	strb	r4, [r3, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    667c:	7843      	ldrb	r3, [r0, #1]
    667e:	fb02 1203 	mla	r2, r2, r3, r1
    6682:	6903      	ldr	r3, [r0, #16]
    6684:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    6688:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    668c:	441a      	add	r2, r3
    668e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    6692:	7153      	strb	r3, [r2, #5]
}
    6694:	bc70      	pop	{r4, r5, r6}
    6696:	4770      	bx	lr

00006698 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6698:	b470      	push	{r4, r5, r6}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    669a:	7844      	ldrb	r4, [r0, #1]
    669c:	fb02 1404 	mla	r4, r2, r4, r1
    66a0:	6905      	ldr	r5, [r0, #16]
    66a2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    66a6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    66aa:	442c      	add	r4, r5
    66ac:	71a3      	strb	r3, [r4, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    66ae:	7843      	ldrb	r3, [r0, #1]
    66b0:	fb02 1303 	mla	r3, r2, r3, r1
    66b4:	6904      	ldr	r4, [r0, #16]
    66b6:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    66ba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    66be:	4423      	add	r3, r4
    66c0:	f89d 400c 	ldrb.w	r4, [sp, #12]
    66c4:	71dc      	strb	r4, [r3, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    66c6:	7843      	ldrb	r3, [r0, #1]
    66c8:	fb02 1203 	mla	r2, r2, r3, r1
    66cc:	6903      	ldr	r3, [r0, #16]
    66ce:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    66d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    66d6:	441a      	add	r2, r3
    66d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    66dc:	7213      	strb	r3, [r2, #8]
}
    66de:	bc70      	pop	{r4, r5, r6}
    66e0:	4770      	bx	lr

000066e2 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    66e2:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    66e4:	7844      	ldrb	r4, [r0, #1]
    66e6:	fb02 1204 	mla	r2, r2, r4, r1
    66ea:	6901      	ldr	r1, [r0, #16]
    66ec:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    66f0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    66f4:	440a      	add	r2, r1
    66f6:	72d3      	strb	r3, [r2, #11]
}
    66f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    66fc:	4770      	bx	lr

000066fe <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    66fe:	b410      	push	{r4}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    6700:	7844      	ldrb	r4, [r0, #1]
    6702:	fb02 1204 	mla	r2, r2, r4, r1
    6706:	6901      	ldr	r1, [r0, #16]
    6708:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    670c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    6710:	440a      	add	r2, r1
    6712:	7313      	strb	r3, [r2, #12]
}
    6714:	f85d 4b04 	ldr.w	r4, [sp], #4
    6718:	4770      	bx	lr
	...

0000671c <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6720:	b083      	sub	sp, #12
    6722:	4605      	mov	r5, r0
	mod->led_number = length;
    6724:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    6726:	b2cc      	uxtb	r4, r1
    6728:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    672c:	0080      	lsls	r0, r0, #2
    672e:	3090      	adds	r0, #144	; 0x90
    6730:	6068      	str	r0, [r5, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6732:	4f52      	ldr	r7, [pc, #328]	; (687c <grid_led_buffer_init+0x160>)
    6734:	47b8      	blx	r7
    6736:	4606      	mov	r6, r0
    6738:	60a8      	str	r0, [r5, #8]
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    673a:	f100 0390 	add.w	r3, r0, #144	; 0x90
    673e:	60eb      	str	r3, [r5, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    6740:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    6744:	ebc4 00c0 	rsb	r0, r4, r0, lsl #3
    6748:	47b8      	blx	r7
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    674a:	2e00      	cmp	r6, #0
    674c:	f000 8094 	beq.w	6878 <grid_led_buffer_init+0x15c>
    6750:	2800      	cmp	r0, #0
    6752:	f000 8091 	beq.w	6878 <grid_led_buffer_init+0x15c>
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    6756:	6128      	str	r0, [r5, #16]
    6758:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    675a:	4619      	mov	r1, r3
    675c:	68aa      	ldr	r2, [r5, #8]
    675e:	54d1      	strb	r1, [r2, r3]
    6760:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    6762:	2b90      	cmp	r3, #144	; 0x90
    6764:	d1fa      	bne.n	675c <grid_led_buffer_init+0x40>
	for (uint32_t i = 0; i<mod->led_number; i++){
    6766:	786b      	ldrb	r3, [r5, #1]
    6768:	2b00      	cmp	r3, #0
    676a:	f000 8082 	beq.w	6872 <grid_led_buffer_init+0x156>
    676e:	2400      	movs	r4, #0
		grid_led_set_color(mod,i,0,0,0);
    6770:	4626      	mov	r6, r4
    6772:	4f43      	ldr	r7, [pc, #268]	; (6880 <grid_led_buffer_init+0x164>)
    6774:	9600      	str	r6, [sp, #0]
    6776:	4633      	mov	r3, r6
    6778:	4632      	mov	r2, r6
    677a:	4621      	mov	r1, r4
    677c:	4628      	mov	r0, r5
    677e:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    6780:	3401      	adds	r4, #1
    6782:	786b      	ldrb	r3, [r5, #1]
    6784:	42a3      	cmp	r3, r4
    6786:	d8f5      	bhi.n	6774 <grid_led_buffer_init+0x58>
	for(uint8_t i = 0; i<mod->led_number; i++){
    6788:	2b00      	cmp	r3, #0
    678a:	d072      	beq.n	6872 <grid_led_buffer_init+0x156>
    678c:	f04f 0b00 	mov.w	fp, #0
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    6790:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 688c <grid_led_buffer_init+0x170>
    6794:	2400      	movs	r4, #0
    6796:	9401      	str	r4, [sp, #4]
    6798:	9400      	str	r4, [sp, #0]
    679a:	4623      	mov	r3, r4
    679c:	2201      	movs	r2, #1
    679e:	4659      	mov	r1, fp
    67a0:	4628      	mov	r0, r5
    67a2:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    67a4:	9401      	str	r4, [sp, #4]
    67a6:	237f      	movs	r3, #127	; 0x7f
    67a8:	9300      	str	r3, [sp, #0]
    67aa:	4623      	mov	r3, r4
    67ac:	2201      	movs	r2, #1
    67ae:	4659      	mov	r1, fp
    67b0:	4628      	mov	r0, r5
    67b2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 6890 <grid_led_buffer_init+0x174>
    67b6:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    67b8:	9401      	str	r4, [sp, #4]
    67ba:	23ff      	movs	r3, #255	; 0xff
    67bc:	9300      	str	r3, [sp, #0]
    67be:	4623      	mov	r3, r4
    67c0:	2201      	movs	r2, #1
    67c2:	4659      	mov	r1, fp
    67c4:	4628      	mov	r0, r5
    67c6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6894 <grid_led_buffer_init+0x178>
    67ca:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    67cc:	4623      	mov	r3, r4
    67ce:	2201      	movs	r2, #1
    67d0:	4659      	mov	r1, fp
    67d2:	4628      	mov	r0, r5
    67d4:	4f2b      	ldr	r7, [pc, #172]	; (6884 <grid_led_buffer_init+0x168>)
    67d6:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    67d8:	4623      	mov	r3, r4
    67da:	2201      	movs	r2, #1
    67dc:	4659      	mov	r1, fp
    67de:	4628      	mov	r0, r5
    67e0:	4e29      	ldr	r6, [pc, #164]	; (6888 <grid_led_buffer_init+0x16c>)
    67e2:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    67e4:	9401      	str	r4, [sp, #4]
    67e6:	9400      	str	r4, [sp, #0]
    67e8:	4623      	mov	r3, r4
    67ea:	2202      	movs	r2, #2
    67ec:	4659      	mov	r1, fp
    67ee:	4628      	mov	r0, r5
    67f0:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    67f2:	9401      	str	r4, [sp, #4]
    67f4:	237f      	movs	r3, #127	; 0x7f
    67f6:	9300      	str	r3, [sp, #0]
    67f8:	4623      	mov	r3, r4
    67fa:	2202      	movs	r2, #2
    67fc:	4659      	mov	r1, fp
    67fe:	4628      	mov	r0, r5
    6800:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    6802:	9401      	str	r4, [sp, #4]
    6804:	23ff      	movs	r3, #255	; 0xff
    6806:	9300      	str	r3, [sp, #0]
    6808:	4623      	mov	r3, r4
    680a:	2202      	movs	r2, #2
    680c:	4659      	mov	r1, fp
    680e:	4628      	mov	r0, r5
    6810:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    6812:	4623      	mov	r3, r4
    6814:	2202      	movs	r2, #2
    6816:	4659      	mov	r1, fp
    6818:	4628      	mov	r0, r5
    681a:	47b8      	blx	r7
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    681c:	4623      	mov	r3, r4
    681e:	2202      	movs	r2, #2
    6820:	4659      	mov	r1, fp
    6822:	4628      	mov	r0, r5
    6824:	47b0      	blx	r6
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6826:	9401      	str	r4, [sp, #4]
    6828:	9400      	str	r4, [sp, #0]
    682a:	4623      	mov	r3, r4
    682c:	4622      	mov	r2, r4
    682e:	4659      	mov	r1, fp
    6830:	4628      	mov	r0, r5
    6832:	47d0      	blx	sl
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6834:	9401      	str	r4, [sp, #4]
    6836:	9400      	str	r4, [sp, #0]
    6838:	4623      	mov	r3, r4
    683a:	4622      	mov	r2, r4
    683c:	4659      	mov	r1, fp
    683e:	4628      	mov	r0, r5
    6840:	47c8      	blx	r9
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6842:	9401      	str	r4, [sp, #4]
    6844:	9400      	str	r4, [sp, #0]
    6846:	4623      	mov	r3, r4
    6848:	4622      	mov	r2, r4
    684a:	4659      	mov	r1, fp
    684c:	4628      	mov	r0, r5
    684e:	47c0      	blx	r8
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    6850:	4623      	mov	r3, r4
    6852:	4622      	mov	r2, r4
    6854:	4659      	mov	r1, fp
    6856:	4628      	mov	r0, r5
    6858:	47b8      	blx	r7
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    685a:	4623      	mov	r3, r4
    685c:	4622      	mov	r2, r4
    685e:	4659      	mov	r1, fp
    6860:	4628      	mov	r0, r5
    6862:	47b0      	blx	r6
	for(uint8_t i = 0; i<mod->led_number; i++){
    6864:	f10b 0b01 	add.w	fp, fp, #1
    6868:	fa5f fb8b 	uxtb.w	fp, fp
    686c:	786b      	ldrb	r3, [r5, #1]
    686e:	455b      	cmp	r3, fp
    6870:	d890      	bhi.n	6794 <grid_led_buffer_init+0x78>
}
    6872:	b003      	add	sp, #12
    6874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6878:	e7fe      	b.n	6878 <grid_led_buffer_init+0x15c>
    687a:	bf00      	nop
    687c:	0000fe9d 	.word	0x0000fe9d
    6880:	00006549 	.word	0x00006549
    6884:	000066ff 	.word	0x000066ff
    6888:	000066e3 	.word	0x000066e3
    688c:	00006607 	.word	0x00006607
    6890:	0000664f 	.word	0x0000664f
    6894:	00006699 	.word	0x00006699

00006898 <grid_led_render>:


void grid_led_render(struct grid_led_model* mod, uint32_t num){
    6898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    689c:	b083      	sub	sp, #12
    689e:	f890 c001 	ldrb.w	ip, [r0, #1]
    68a2:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
    68a6:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    68aa:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    68ae:	eb01 0384 	add.w	r3, r1, r4, lsl #2
    68b2:	6904      	ldr	r4, [r0, #16]
    68b4:	441c      	add	r4, r3
	// RENDER & SUM ALL LAYERS PER LED
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
		
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    68b6:	2703      	movs	r7, #3
	uint32_t mix_b = 0;
    68b8:	f04f 0e00 	mov.w	lr, #0
	uint32_t mix_g = 0;
    68bc:	4673      	mov	r3, lr
	uint32_t mix_r = 0;
    68be:	4672      	mov	r2, lr
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    68c0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 6948 <grid_led_render+0xb0>
    68c4:	7ae6      	ldrb	r6, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    68c6:	f818 9006 	ldrb.w	r9, [r8, r6]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    68ca:	4446      	add	r6, r8
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    68cc:	f896 5100 	ldrb.w	r5, [r6, #256]	; 0x100
    68d0:	f896 6200 	ldrb.w	r6, [r6, #512]	; 0x200
    68d4:	f894 a000 	ldrb.w	sl, [r4]
    68d8:	f894 b003 	ldrb.w	fp, [r4, #3]
    68dc:	fb05 fb0b 	mul.w	fp, r5, fp
    68e0:	fb09 bb0a 	mla	fp, r9, sl, fp
    68e4:	f894 a006 	ldrb.w	sl, [r4, #6]
    68e8:	fb06 ba0a 	mla	sl, r6, sl, fp
    68ec:	4452      	add	r2, sl
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    68ee:	f894 a001 	ldrb.w	sl, [r4, #1]
    68f2:	f894 b004 	ldrb.w	fp, [r4, #4]
    68f6:	fb05 fb0b 	mul.w	fp, r5, fp
    68fa:	fb09 bb0a 	mla	fp, r9, sl, fp
    68fe:	f894 a007 	ldrb.w	sl, [r4, #7]
    6902:	fb06 ba0a 	mla	sl, r6, sl, fp
    6906:	4453      	add	r3, sl
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    6908:	f894 a002 	ldrb.w	sl, [r4, #2]
    690c:	f894 b005 	ldrb.w	fp, [r4, #5]
    6910:	fb05 f50b 	mul.w	r5, r5, fp
    6914:	fb09 590a 	mla	r9, r9, sl, r5
    6918:	7a25      	ldrb	r5, [r4, #8]
    691a:	fb06 9505 	mla	r5, r6, r5, r9
    691e:	44ae      	add	lr, r5
    6920:	3f01      	subs	r7, #1
    6922:	4464      	add	r4, ip
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    6924:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    6928:	d1cc      	bne.n	68c4 <grid_led_render+0x2c>

	mix_r = (mix_r)/2/256;
	mix_g = (mix_g)/2/256;
	mix_b = (mix_b)/2/256;
				
	grid_led_set_color(mod, num, mix_r, mix_g, mix_b);
    692a:	f3ce 244f 	ubfx	r4, lr, #9, #16
    692e:	9400      	str	r4, [sp, #0]
    6930:	f3c3 234f 	ubfx	r3, r3, #9, #16
    6934:	f3c2 224f 	ubfx	r2, r2, #9, #16
    6938:	4c02      	ldr	r4, [pc, #8]	; (6944 <grid_led_render+0xac>)
    693a:	47a0      	blx	r4
	
}
    693c:	b003      	add	sp, #12
    693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6942:	bf00      	nop
    6944:	00006549 	.word	0x00006549
    6948:	20000000 	.word	0x20000000

0000694c <grid_led_render_all>:


void grid_led_render_all(struct grid_led_model* mod){
	
	for (uint32_t i=0; i<mod->led_number; i++){
    694c:	7843      	ldrb	r3, [r0, #1]
    694e:	b15b      	cbz	r3, 6968 <grid_led_render_all+0x1c>
void grid_led_render_all(struct grid_led_model* mod){
    6950:	b570      	push	{r4, r5, r6, lr}
    6952:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    6954:	2400      	movs	r4, #0
		
		grid_led_render(mod, i);
    6956:	4e05      	ldr	r6, [pc, #20]	; (696c <grid_led_render_all+0x20>)
    6958:	4621      	mov	r1, r4
    695a:	4628      	mov	r0, r5
    695c:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    695e:	3401      	adds	r4, #1
    6960:	786b      	ldrb	r3, [r5, #1]
    6962:	42a3      	cmp	r3, r4
    6964:	d8f8      	bhi.n	6958 <grid_led_render_all+0xc>
    6966:	bd70      	pop	{r4, r5, r6, pc}
    6968:	4770      	bx	lr
    696a:	bf00      	nop
    696c:	00006899 	.word	0x00006899

00006970 <grid_led_hardware_start_transfer_blocking>:
	}
	
}


void grid_led_hardware_start_transfer_blocking(struct grid_led_model* mod){
    6970:	b510      	push	{r4, lr}
    6972:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    6974:	2200      	movs	r2, #0
    6976:	4b08      	ldr	r3, [pc, #32]	; (6998 <grid_led_hardware_start_transfer_blocking+0x28>)
    6978:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    697a:	4808      	ldr	r0, [pc, #32]	; (699c <grid_led_hardware_start_transfer_blocking+0x2c>)
    697c:	4b08      	ldr	r3, [pc, #32]	; (69a0 <grid_led_hardware_start_transfer_blocking+0x30>)
    697e:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    6980:	88a2      	ldrh	r2, [r4, #4]
    6982:	68a1      	ldr	r1, [r4, #8]
    6984:	6960      	ldr	r0, [r4, #20]
    6986:	4b07      	ldr	r3, [pc, #28]	; (69a4 <grid_led_hardware_start_transfer_blocking+0x34>)
    6988:	4798      	blx	r3
	while(grid_led_hardware_transfer_done!=1){
    698a:	4a03      	ldr	r2, [pc, #12]	; (6998 <grid_led_hardware_start_transfer_blocking+0x28>)
    698c:	7813      	ldrb	r3, [r2, #0]
    698e:	b2db      	uxtb	r3, r3
    6990:	2b01      	cmp	r3, #1
    6992:	d1fb      	bne.n	698c <grid_led_hardware_start_transfer_blocking+0x1c>
			
	}
	
}
    6994:	bd10      	pop	{r4, pc}
    6996:	bf00      	nop
    6998:	20001218 	.word	0x20001218
    699c:	20001098 	.word	0x20001098
    69a0:	000094d1 	.word	0x000094d1
    69a4:	000091b9 	.word	0x000091b9

000069a8 <grid_led_startup_animation>:
void grid_led_startup_animation(struct grid_led_model* mod){
    69a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69ac:	b089      	sub	sp, #36	; 0x24
    69ae:	4605      	mov	r5, r0
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    69b0:	4b31      	ldr	r3, [pc, #196]	; (6a78 <grid_led_startup_animation+0xd0>)
    69b2:	781b      	ldrb	r3, [r3, #0]
    69b4:	b2db      	uxtb	r3, r3
	if (grid_module_reset_cause == RESET_REASON_WDT){
    69b6:	2b20      	cmp	r3, #32
    69b8:	d01c      	beq.n	69f4 <grid_led_startup_animation+0x4c>
	}else if (grid_module_reset_cause == RESET_REASON_SYST){
    69ba:	2b40      	cmp	r3, #64	; 0x40
    69bc:	d015      	beq.n	69ea <grid_led_startup_animation+0x42>
	uint8_t s		  = 1;
    69be:	2301      	movs	r3, #1
	uint8_t color_b   = 1;
    69c0:	461a      	mov	r2, r3
	uint8_t color_g   = 1;
    69c2:	4619      	mov	r1, r3
	uint8_t color_r   = 1;
    69c4:	4618      	mov	r0, r3
    69c6:	fb03 f000 	mul.w	r0, r3, r0
    69ca:	9005      	str	r0, [sp, #20]
    69cc:	fb03 f101 	mul.w	r1, r3, r1
    69d0:	9106      	str	r1, [sp, #24]
    69d2:	fb03 f302 	mul.w	r3, r3, r2
    69d6:	9307      	str	r3, [sp, #28]
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    69d8:	f04f 0a00 	mov.w	sl, #0
    69dc:	46d3      	mov	fp, sl
    69de:	46d0      	mov	r8, sl
    69e0:	23ff      	movs	r3, #255	; 0xff
    69e2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 6a84 <grid_led_startup_animation+0xdc>
    69e6:	461f      	mov	r7, r3
    69e8:	e024      	b.n	6a34 <grid_led_startup_animation+0x8c>
		s= 2;
    69ea:	2302      	movs	r3, #2
		color_b = 1;
    69ec:	2201      	movs	r2, #1
		color_g = 0;
    69ee:	2100      	movs	r1, #0
		color_r = 0;
    69f0:	4608      	mov	r0, r1
    69f2:	e7e8      	b.n	69c6 <grid_led_startup_animation+0x1e>
		s= 2;
    69f4:	2302      	movs	r3, #2
		color_b = 0;
    69f6:	2200      	movs	r2, #0
		color_g = 0;
    69f8:	4611      	mov	r1, r2
		color_r = 1;
    69fa:	2001      	movs	r0, #1
    69fc:	e7e3      	b.n	69c6 <grid_led_startup_animation+0x1e>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    69fe:	9600      	str	r6, [sp, #0]
    6a00:	9b04      	ldr	r3, [sp, #16]
    6a02:	9a03      	ldr	r2, [sp, #12]
    6a04:	4621      	mov	r1, r4
    6a06:	4628      	mov	r0, r5
    6a08:	47c8      	blx	r9
		for (uint8_t j=0; j<mod->led_number; j++){
    6a0a:	3401      	adds	r4, #1
    6a0c:	b2e4      	uxtb	r4, r4
    6a0e:	786b      	ldrb	r3, [r5, #1]
    6a10:	42a3      	cmp	r3, r4
    6a12:	d8f4      	bhi.n	69fe <grid_led_startup_animation+0x56>
		grid_led_hardware_start_transfer_blocking(mod);
    6a14:	4628      	mov	r0, r5
    6a16:	4b19      	ldr	r3, [pc, #100]	; (6a7c <grid_led_startup_animation+0xd4>)
    6a18:	4798      	blx	r3
		delay_ms(1);
    6a1a:	2001      	movs	r0, #1
    6a1c:	4b18      	ldr	r3, [pc, #96]	; (6a80 <grid_led_startup_animation+0xd8>)
    6a1e:	4798      	blx	r3
    6a20:	3f01      	subs	r7, #1
    6a22:	9b05      	ldr	r3, [sp, #20]
    6a24:	4498      	add	r8, r3
    6a26:	9b06      	ldr	r3, [sp, #24]
    6a28:	449b      	add	fp, r3
    6a2a:	9b07      	ldr	r3, [sp, #28]
    6a2c:	449a      	add	sl, r3
	for (uint8_t i = 0; i<255; i++){
    6a2e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    6a32:	d01e      	beq.n	6a72 <grid_led_startup_animation+0xca>
		for (uint8_t j=0; j<mod->led_number; j++){
    6a34:	786b      	ldrb	r3, [r5, #1]
    6a36:	2b00      	cmp	r3, #0
    6a38:	d0ec      	beq.n	6a14 <grid_led_startup_animation+0x6c>
			grid_led_set_color(mod, j, color_r*i*s%256, color_g*i*s%256, color_b*i*s%256); // This is not an alert, this is low level shit
    6a3a:	f1d8 0200 	rsbs	r2, r8, #0
    6a3e:	fa5f f388 	uxtb.w	r3, r8
    6a42:	b2d2      	uxtb	r2, r2
    6a44:	bf58      	it	pl
    6a46:	4253      	negpl	r3, r2
    6a48:	b29b      	uxth	r3, r3
    6a4a:	9303      	str	r3, [sp, #12]
    6a4c:	f1db 0200 	rsbs	r2, fp, #0
    6a50:	fa5f f38b 	uxtb.w	r3, fp
    6a54:	b2d2      	uxtb	r2, r2
    6a56:	bf58      	it	pl
    6a58:	4253      	negpl	r3, r2
    6a5a:	b29b      	uxth	r3, r3
    6a5c:	9304      	str	r3, [sp, #16]
    6a5e:	f1da 0300 	rsbs	r3, sl, #0
    6a62:	fa5f f68a 	uxtb.w	r6, sl
    6a66:	b2db      	uxtb	r3, r3
    6a68:	bf58      	it	pl
    6a6a:	425e      	negpl	r6, r3
    6a6c:	b2b6      	uxth	r6, r6
    6a6e:	2400      	movs	r4, #0
    6a70:	e7c5      	b.n	69fe <grid_led_startup_animation+0x56>
}
    6a72:	b009      	add	sp, #36	; 0x24
    6a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6a78:	40000c00 	.word	0x40000c00
    6a7c:	00006971 	.word	0x00006971
    6a80:	0000906d 	.word	0x0000906d
    6a84:	00006549 	.word	0x00006549

00006a88 <grid_led_init>:
uint8_t grid_led_init(struct grid_led_model* mod, uint8_t num){
    6a88:	b570      	push	{r4, r5, r6, lr}
    6a8a:	4604      	mov	r4, r0
    6a8c:	4e2b      	ldr	r6, [pc, #172]	; (6b3c <grid_led_init+0xb4>)
    6a8e:	2200      	movs	r2, #0
    6a90:	b293      	uxth	r3, r2
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    6a92:	f003 0001 	and.w	r0, r3, #1
    6a96:	2800      	cmp	r0, #0
    6a98:	bf14      	ite	ne
    6a9a:	f04f 6060 	movne.w	r0, #234881024	; 0xe000000
    6a9e:	f04f 6000 	moveq.w	r0, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    6aa2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    6aa6:	2d00      	cmp	r5, #0
    6aa8:	bf14      	ite	ne
    6aaa:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
    6aae:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    6ab2:	4305      	orrs	r5, r0
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    6ab4:	f3c3 0080 	ubfx	r0, r3, #2, #1
    6ab8:	2800      	cmp	r0, #0
    6aba:	bf14      	ite	ne
    6abc:	f44f 2060 	movne.w	r0, #917504	; 0xe0000
    6ac0:	f44f 2000 	moveq.w	r0, #524288	; 0x80000
    6ac4:	4328      	orrs	r0, r5
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    6ac6:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    6aca:	2d00      	cmp	r5, #0
    6acc:	bf14      	ite	ne
    6ace:	f44f 0560 	movne.w	r5, #14680064	; 0xe00000
    6ad2:	f44f 0500 	moveq.w	r5, #8388608	; 0x800000
    6ad6:	4328      	orrs	r0, r5
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    6ad8:	f3c3 1500 	ubfx	r5, r3, #4, #1
    6adc:	2d00      	cmp	r5, #0
    6ade:	bf14      	ite	ne
    6ae0:	f44f 6560 	movne.w	r5, #3584	; 0xe00
    6ae4:	f44f 6500 	moveq.w	r5, #2048	; 0x800
    6ae8:	4305      	orrs	r5, r0
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    6aea:	f3c3 1040 	ubfx	r0, r3, #5, #1
    6aee:	2800      	cmp	r0, #0
    6af0:	bf14      	ite	ne
    6af2:	f44f 4060 	movne.w	r0, #57344	; 0xe000
    6af6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
    6afa:	4305      	orrs	r5, r0
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    6afc:	f3c3 1080 	ubfx	r0, r3, #6, #1
    6b00:	2800      	cmp	r0, #0
    6b02:	bf14      	ite	ne
    6b04:	200e      	movne	r0, #14
    6b06:	2008      	moveq	r0, #8
    6b08:	4328      	orrs	r0, r5
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6b0a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    6b0e:	2b00      	cmp	r3, #0
    6b10:	bf14      	ite	ne
    6b12:	23e0      	movne	r3, #224	; 0xe0
    6b14:	2380      	moveq	r3, #128	; 0x80
    6b16:	4303      	orrs	r3, r0
		grid_led_color_code[i] = temp;
    6b18:	f846 3f04 	str.w	r3, [r6, #4]!
    6b1c:	3201      	adds	r2, #1
	for(uint16_t i=0; i<256; i++){
    6b1e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    6b22:	d1b5      	bne.n	6a90 <grid_led_init+0x8>
	grid_led_buffer_init(mod, num);		
    6b24:	4620      	mov	r0, r4
    6b26:	4b06      	ldr	r3, [pc, #24]	; (6b40 <grid_led_init+0xb8>)
    6b28:	4798      	blx	r3
	grid_led_hardware_init(mod);
    6b2a:	4620      	mov	r0, r4
    6b2c:	4b05      	ldr	r3, [pc, #20]	; (6b44 <grid_led_init+0xbc>)
    6b2e:	4798      	blx	r3
	grid_led_startup_animation(mod);
    6b30:	4620      	mov	r0, r4
    6b32:	4b05      	ldr	r3, [pc, #20]	; (6b48 <grid_led_init+0xc0>)
    6b34:	4798      	blx	r3
}
    6b36:	2000      	movs	r0, #0
    6b38:	bd70      	pop	{r4, r5, r6, pc}
    6b3a:	bf00      	nop
    6b3c:	2000331c 	.word	0x2000331c
    6b40:	0000671d 	.word	0x0000671d
    6b44:	00006599 	.word	0x00006599
    6b48:	000069a9 	.word	0x000069a9

00006b4c <grid_led_hardware_start_transfer>:

void grid_led_hardware_start_transfer (struct grid_led_model* mod){
    6b4c:	b510      	push	{r4, lr}
    6b4e:	4604      	mov	r4, r0
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    6b50:	2200      	movs	r2, #0
    6b52:	4b05      	ldr	r3, [pc, #20]	; (6b68 <grid_led_hardware_start_transfer+0x1c>)
    6b54:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    6b56:	4805      	ldr	r0, [pc, #20]	; (6b6c <grid_led_hardware_start_transfer+0x20>)
    6b58:	4b05      	ldr	r3, [pc, #20]	; (6b70 <grid_led_hardware_start_transfer+0x24>)
    6b5a:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_get_frame_buffer_pointer(mod), grid_led_get_frame_buffer_size(mod));
    6b5c:	88a2      	ldrh	r2, [r4, #4]
    6b5e:	68a1      	ldr	r1, [r4, #8]
    6b60:	6960      	ldr	r0, [r4, #20]
    6b62:	4b04      	ldr	r3, [pc, #16]	; (6b74 <grid_led_hardware_start_transfer+0x28>)
    6b64:	4798      	blx	r3
    6b66:	bd10      	pop	{r4, pc}
    6b68:	20001218 	.word	0x20001218
    6b6c:	20001098 	.word	0x20001098
    6b70:	000094d1 	.word	0x000094d1
    6b74:	000091b9 	.word	0x000091b9

00006b78 <grid_led_hardware_is_transfer_completed>:
}

uint8_t grid_led_hardware_is_transfer_completed(struct grid_led_model* mod){
	

	return grid_led_hardware_transfer_done;
    6b78:	4b01      	ldr	r3, [pc, #4]	; (6b80 <grid_led_hardware_is_transfer_completed+0x8>)
    6b7a:	7818      	ldrb	r0, [r3, #0]
	
    6b7c:	4770      	bx	lr
    6b7e:	bf00      	nop
    6b80:	20001218 	.word	0x20001218

00006b84 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    6b84:	b508      	push	{r3, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6b8a:	4b13      	ldr	r3, [pc, #76]	; (6bd8 <grid_module_common_init+0x54>)
    6b8c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	//enable pwr!
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_P16_RevB){					
    6b90:	4b12      	ldr	r3, [pc, #72]	; (6bdc <grid_module_common_init+0x58>)
    6b92:	4798      	blx	r3
    6b94:	b178      	cbz	r0, 6bb6 <grid_module_common_init+0x32>
		grid_module_po16_revb_init(&grid_ui_state);	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_B16_RevB){	
    6b96:	4b11      	ldr	r3, [pc, #68]	; (6bdc <grid_module_common_init+0x58>)
    6b98:	4798      	blx	r3
    6b9a:	2880      	cmp	r0, #128	; 0x80
    6b9c:	d00f      	beq.n	6bbe <grid_module_common_init+0x3a>
		grid_module_bu16_revb_init(&grid_ui_state);
	
	}	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){						
    6b9e:	4b0f      	ldr	r3, [pc, #60]	; (6bdc <grid_module_common_init+0x58>)
    6ba0:	4798      	blx	r3
    6ba2:	2840      	cmp	r0, #64	; 0x40
    6ba4:	d00f      	beq.n	6bc6 <grid_module_common_init+0x42>
		grid_module_pbf4_reva_init(&grid_ui_state);			
	}
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){	
    6ba6:	4b0d      	ldr	r3, [pc, #52]	; (6bdc <grid_module_common_init+0x58>)
    6ba8:	4798      	blx	r3
    6baa:	28c0      	cmp	r0, #192	; 0xc0
    6bac:	d00f      	beq.n	6bce <grid_module_common_init+0x4a>
		//grid_module_bu16_revb_init(&grid_ui_state);
		
	}	


	grid_sys_init(&grid_sys_state);
    6bae:	480c      	ldr	r0, [pc, #48]	; (6be0 <grid_module_common_init+0x5c>)
    6bb0:	4b0c      	ldr	r3, [pc, #48]	; (6be4 <grid_module_common_init+0x60>)
    6bb2:	4798      	blx	r3
    6bb4:	bd08      	pop	{r3, pc}
		grid_module_po16_revb_init(&grid_ui_state);	
    6bb6:	480c      	ldr	r0, [pc, #48]	; (6be8 <grid_module_common_init+0x64>)
    6bb8:	4b0c      	ldr	r3, [pc, #48]	; (6bec <grid_module_common_init+0x68>)
    6bba:	4798      	blx	r3
    6bbc:	e7eb      	b.n	6b96 <grid_module_common_init+0x12>
		grid_module_bu16_revb_init(&grid_ui_state);
    6bbe:	480a      	ldr	r0, [pc, #40]	; (6be8 <grid_module_common_init+0x64>)
    6bc0:	4b0b      	ldr	r3, [pc, #44]	; (6bf0 <grid_module_common_init+0x6c>)
    6bc2:	4798      	blx	r3
    6bc4:	e7eb      	b.n	6b9e <grid_module_common_init+0x1a>
		grid_module_pbf4_reva_init(&grid_ui_state);			
    6bc6:	4808      	ldr	r0, [pc, #32]	; (6be8 <grid_module_common_init+0x64>)
    6bc8:	4b0a      	ldr	r3, [pc, #40]	; (6bf4 <grid_module_common_init+0x70>)
    6bca:	4798      	blx	r3
    6bcc:	e7eb      	b.n	6ba6 <grid_module_common_init+0x22>
		grid_module_en16_reva_init(&grid_ui_state);
    6bce:	4806      	ldr	r0, [pc, #24]	; (6be8 <grid_module_common_init+0x64>)
    6bd0:	4b09      	ldr	r3, [pc, #36]	; (6bf8 <grid_module_common_init+0x74>)
    6bd2:	4798      	blx	r3
    6bd4:	e7eb      	b.n	6bae <grid_module_common_init+0x2a>
    6bd6:	bf00      	nop
    6bd8:	41008000 	.word	0x41008000
    6bdc:	00008239 	.word	0x00008239
    6be0:	20003280 	.word	0x20003280
    6be4:	00008485 	.word	0x00008485
    6be8:	20003270 	.word	0x20003270
    6bec:	00007cb5 	.word	0x00007cb5
    6bf0:	00006e99 	.word	0x00006e99
    6bf4:	00007911 	.word	0x00007911
    6bf8:	00007389 	.word	0x00007389

00006bfc <grid_module_bu16_revb_hardware_start_transfer>:
//volatile uint8_t grid_module_bu16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};
	
volatile uint8_t grid_module_bu16_revb_mux_lookup[16] =       {12, 13, 8, 9, 4, 5, 0, 1, 14, 15, 10, 11, 6, 7, 2, 3};


void grid_module_bu16_revb_hardware_start_transfer(void){
    6bfc:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    6bfe:	4803      	ldr	r0, [pc, #12]	; (6c0c <grid_module_bu16_revb_hardware_start_transfer+0x10>)
    6c00:	4c03      	ldr	r4, [pc, #12]	; (6c10 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    6c02:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    6c04:	4803      	ldr	r0, [pc, #12]	; (6c14 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    6c06:	47a0      	blx	r4
    6c08:	bd10      	pop	{r4, pc}
    6c0a:	bf00      	nop
    6c0c:	20000fc8 	.word	0x20000fc8
    6c10:	00009001 	.word	0x00009001
    6c14:	2000119c 	.word	0x2000119c

00006c18 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

}

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    6c18:	4b84      	ldr	r3, [pc, #528]	; (6e2c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	f000 80ef 	beq.w	6e00 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1e8>
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    6c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c26:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	

	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    6c28:	2300      	movs	r3, #0
    6c2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    6c2e:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    6c32:	4b7e      	ldr	r3, [pc, #504]	; (6e2c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    6c34:	785a      	ldrb	r2, [r3, #1]
    6c36:	3208      	adds	r2, #8
    6c38:	487d      	ldr	r0, [pc, #500]	; (6e30 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x218>)
    6c3a:	5c85      	ldrb	r5, [r0, r2]
    6c3c:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    6c3e:	785a      	ldrb	r2, [r3, #1]
    6c40:	b2d2      	uxtb	r2, r2
    6c42:	5c84      	ldrb	r4, [r0, r2]
    6c44:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_bu16_revb_mux++;
    6c46:	785a      	ldrb	r2, [r3, #1]
    6c48:	3201      	adds	r2, #1
    6c4a:	b2d2      	uxtb	r2, r2
    6c4c:	705a      	strb	r2, [r3, #1]
	grid_module_bu16_revb_mux%=8;
    6c4e:	785a      	ldrb	r2, [r3, #1]
    6c50:	f002 0207 	and.w	r2, r2, #7
    6c54:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    6c56:	785b      	ldrb	r3, [r3, #1]
	if (level) {
    6c58:	f013 0f01 	tst.w	r3, #1
    6c5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    6c60:	4b74      	ldr	r3, [pc, #464]	; (6e34 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    6c62:	bf14      	ite	ne
    6c64:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c68:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    6c6c:	4b6f      	ldr	r3, [pc, #444]	; (6e2c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    6c6e:	785b      	ldrb	r3, [r3, #1]
    6c70:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    6c78:	4b6e      	ldr	r3, [pc, #440]	; (6e34 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    6c7a:	bf14      	ite	ne
    6c7c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c80:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    6c84:	4b69      	ldr	r3, [pc, #420]	; (6e2c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    6c86:	785b      	ldrb	r3, [r3, #1]
    6c88:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    6c90:	4b68      	ldr	r3, [pc, #416]	; (6e34 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x21c>)
    6c92:	bf14      	ite	ne
    6c94:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c98:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    6c9c:	2302      	movs	r3, #2
    6c9e:	f10d 0206 	add.w	r2, sp, #6
    6ca2:	2100      	movs	r1, #0
    6ca4:	4864      	ldr	r0, [pc, #400]	; (6e38 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x220>)
    6ca6:	4e65      	ldr	r6, [pc, #404]	; (6e3c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x224>)
    6ca8:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    6caa:	2302      	movs	r3, #2
    6cac:	aa01      	add	r2, sp, #4
    6cae:	2100      	movs	r1, #0
    6cb0:	4863      	ldr	r0, [pc, #396]	; (6e40 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x228>)
    6cb2:	47b0      	blx	r6
	
	uint8_t adcresult_0_valid = 0;
	
	if (adcresult_0>60000){
    6cb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6cb8:	f64e 2260 	movw	r2, #60000	; 0xea60
    6cbc:	4293      	cmp	r3, r2
    6cbe:	f240 80a5 	bls.w	6e0c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1f4>
		adcresult_0 = 0;
    6cc2:	2300      	movs	r3, #0
    6cc4:	f8ad 3006 	strh.w	r3, [sp, #6]
		adcresult_0_valid = 1;
    6cc8:	2001      	movs	r0, #1
		adcresult_0_valid = 1;
	}
		
	uint8_t adcresult_1_valid = 0;
	
	if (adcresult_1>60000){
    6cca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6cce:	f64e 2260 	movw	r2, #60000	; 0xea60
    6cd2:	4293      	cmp	r3, r2
    6cd4:	f240 80a2 	bls.w	6e1c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x204>
		adcresult_1 = 0;
    6cd8:	2300      	movs	r3, #0
    6cda:	f8ad 3004 	strh.w	r3, [sp, #4]
		adcresult_1_valid = 1;
    6cde:	2601      	movs	r6, #1
		adcresult_1_valid = 1;
	}
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_0 != mod->report_ui_array[adc_index_0].helper[0] && adcresult_0_valid){
    6ce0:	012f      	lsls	r7, r5, #4
    6ce2:	4b58      	ldr	r3, [pc, #352]	; (6e44 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    6ce4:	689b      	ldr	r3, [r3, #8]
    6ce6:	443b      	add	r3, r7
    6ce8:	68da      	ldr	r2, [r3, #12]
    6cea:	7812      	ldrb	r2, [r2, #0]
    6cec:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    6cf0:	4291      	cmp	r1, r2
    6cf2:	d03c      	beq.n	6d6e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
    6cf4:	2800      	cmp	r0, #0
    6cf6:	d03a      	beq.n	6d6e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    6cf8:	2a00      	cmp	r2, #0
    6cfa:	bf0c      	ite	eq
    6cfc:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    6d00:	f04f 0900 	movne.w	r9, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[5], 2, command);
    6d04:	6858      	ldr	r0, [r3, #4]
    6d06:	bf0c      	ite	eq
    6d08:	2290      	moveq	r2, #144	; 0x90
    6d0a:	2280      	movne	r2, #128	; 0x80
    6d0c:	2102      	movs	r1, #2
    6d0e:	3005      	adds	r0, #5
    6d10:	f8df b134 	ldr.w	fp, [pc, #308]	; 6e48 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>
    6d14:	47d8      	blx	fp
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    6d16:	f8df 812c 	ldr.w	r8, [pc, #300]	; 6e44 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>
    6d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6d1e:	443b      	add	r3, r7
    6d20:	6858      	ldr	r0, [r3, #4]
    6d22:	462a      	mov	r2, r5
    6d24:	2102      	movs	r1, #2
    6d26:	3007      	adds	r0, #7
    6d28:	47d8      	blx	fp
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, velocity);
    6d2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6d2e:	443b      	add	r3, r7
    6d30:	6858      	ldr	r0, [r3, #4]
    6d32:	464a      	mov	r2, r9
    6d34:	2102      	movs	r1, #2
    6d36:	3009      	adds	r0, #9
    6d38:	47d8      	blx	fp

		mod->report_ui_array[adc_index_0].helper[0] = velocity;
    6d3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6d3e:	443b      	add	r3, r7
    6d40:	68db      	ldr	r3, [r3, #12]
    6d42:	f883 9000 	strb.w	r9, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    6d46:	4629      	mov	r1, r5
    6d48:	4640      	mov	r0, r8
    6d4a:	f8df a104 	ldr.w	sl, [pc, #260]	; 6e50 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>
    6d4e:	47d0      	blx	sl
		
		
				
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0 + 16].payload[9], 2, actuator); // LED
    6d50:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6d54:	441f      	add	r7, r3
    6d56:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
    6d5a:	ea4f 0249 	mov.w	r2, r9, lsl #1
    6d5e:	2102      	movs	r1, #2
    6d60:	3009      	adds	r0, #9
    6d62:	47d8      	blx	fp

		grid_report_ui_set_changed_flag(mod, adc_index_0 + 16);
    6d64:	f105 0110 	add.w	r1, r5, #16
    6d68:	b2c9      	uxtb	r1, r1
    6d6a:	4640      	mov	r0, r8
    6d6c:	47d0      	blx	sl
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (adcresult_1 != mod->report_ui_array[adc_index_1].helper[0] && adcresult_1_valid){
    6d6e:	0125      	lsls	r5, r4, #4
    6d70:	4b34      	ldr	r3, [pc, #208]	; (6e44 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    6d72:	689b      	ldr	r3, [r3, #8]
    6d74:	442b      	add	r3, r5
    6d76:	68da      	ldr	r2, [r3, #12]
    6d78:	7812      	ldrb	r2, [r2, #0]
    6d7a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6d7e:	4291      	cmp	r1, r2
    6d80:	d036      	beq.n	6df0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>
    6d82:	2e00      	cmp	r6, #0
    6d84:	d034      	beq.n	6df0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1d8>
			velocity = 127;
		}
		else{
			
			command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
			velocity = 0;
    6d86:	2a00      	cmp	r2, #0
    6d88:	bf0c      	ite	eq
    6d8a:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    6d8e:	f04f 0800 	movne.w	r8, #0
		}
		
		uint8_t actuator = 2*velocity;
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[5], 2, command);
    6d92:	6858      	ldr	r0, [r3, #4]
    6d94:	bf0c      	ite	eq
    6d96:	2290      	moveq	r2, #144	; 0x90
    6d98:	2280      	movne	r2, #128	; 0x80
    6d9a:	2102      	movs	r1, #2
    6d9c:	3005      	adds	r0, #5
    6d9e:	4f2a      	ldr	r7, [pc, #168]	; (6e48 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x230>)
    6da0:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    6da2:	4e28      	ldr	r6, [pc, #160]	; (6e44 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>)
    6da4:	68b3      	ldr	r3, [r6, #8]
    6da6:	442b      	add	r3, r5
    6da8:	6858      	ldr	r0, [r3, #4]
    6daa:	4622      	mov	r2, r4
    6dac:	2102      	movs	r1, #2
    6dae:	3007      	adds	r0, #7
    6db0:	47b8      	blx	r7
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, velocity);
    6db2:	68b3      	ldr	r3, [r6, #8]
    6db4:	442b      	add	r3, r5
    6db6:	6858      	ldr	r0, [r3, #4]
    6db8:	4642      	mov	r2, r8
    6dba:	2102      	movs	r1, #2
    6dbc:	3009      	adds	r0, #9
    6dbe:	47b8      	blx	r7
			
		mod->report_ui_array[adc_index_1].helper[0] = velocity;
    6dc0:	68b3      	ldr	r3, [r6, #8]
    6dc2:	442b      	add	r3, r5
    6dc4:	68db      	ldr	r3, [r3, #12]
    6dc6:	f883 8000 	strb.w	r8, [r3]
		
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    6dca:	4621      	mov	r1, r4
    6dcc:	4630      	mov	r0, r6
    6dce:	f8df 9080 	ldr.w	r9, [pc, #128]	; 6e50 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x238>
    6dd2:	47c8      	blx	r9
		
		
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1 + 16].payload[9], 2, actuator); // LED
    6dd4:	68b3      	ldr	r3, [r6, #8]
    6dd6:	441d      	add	r5, r3
    6dd8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    6ddc:	ea4f 0248 	mov.w	r2, r8, lsl #1
    6de0:	2102      	movs	r1, #2
    6de2:	3009      	adds	r0, #9
    6de4:	47b8      	blx	r7

		grid_report_ui_set_changed_flag(mod, adc_index_1 + 16);
    6de6:	f104 0110 	add.w	r1, r4, #16
    6dea:	b2c9      	uxtb	r1, r1
    6dec:	4630      	mov	r0, r6
    6dee:	47c8      	blx	r9
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    6df0:	2200      	movs	r2, #0
    6df2:	4b0e      	ldr	r3, [pc, #56]	; (6e2c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    6df4:	701a      	strb	r2, [r3, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    6df6:	4b15      	ldr	r3, [pc, #84]	; (6e4c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x234>)
    6df8:	4798      	blx	r3
}
    6dfa:	b003      	add	sp, #12
    6dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_module_bu16_revb_hardware_transfer_complete++;
    6e00:	4a0a      	ldr	r2, [pc, #40]	; (6e2c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>)
    6e02:	7813      	ldrb	r3, [r2, #0]
    6e04:	3301      	adds	r3, #1
    6e06:	b2db      	uxtb	r3, r3
    6e08:	7013      	strb	r3, [r2, #0]
    6e0a:	4770      	bx	lr
	else if (adcresult_0<200){
    6e0c:	2bc7      	cmp	r3, #199	; 0xc7
		adcresult_0 = 127;
    6e0e:	bf9d      	ittte	ls
    6e10:	237f      	movls	r3, #127	; 0x7f
    6e12:	f8ad 3006 	strhls.w	r3, [sp, #6]
		adcresult_0_valid = 1;
    6e16:	2001      	movls	r0, #1
	uint8_t adcresult_0_valid = 0;
    6e18:	2000      	movhi	r0, #0
    6e1a:	e756      	b.n	6cca <grid_module_bu16_revb_hardware_transfer_complete_cb+0xb2>
	else if (adcresult_1<200){
    6e1c:	2bc7      	cmp	r3, #199	; 0xc7
		adcresult_1 = 127;
    6e1e:	bf9d      	ittte	ls
    6e20:	237f      	movls	r3, #127	; 0x7f
    6e22:	f8ad 3004 	strhls.w	r3, [sp, #4]
		adcresult_1_valid = 1;
    6e26:	2601      	movls	r6, #1
	uint8_t adcresult_1_valid = 0;
    6e28:	2600      	movhi	r6, #0
    6e2a:	e759      	b.n	6ce0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xc8>
    6e2c:	20000644 	.word	0x20000644
    6e30:	20000300 	.word	0x20000300
    6e34:	41008000 	.word	0x41008000
    6e38:	20000fc8 	.word	0x20000fc8
    6e3c:	00008f71 	.word	0x00008f71
    6e40:	2000119c 	.word	0x2000119c
    6e44:	20003270 	.word	0x20003270
    6e48:	00008201 	.word	0x00008201
    6e4c:	00006bfd 	.word	0x00006bfd
    6e50:	0000893f 	.word	0x0000893f

00006e54 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    6e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    6e56:	4f0b      	ldr	r7, [pc, #44]	; (6e84 <grid_module_bu16_revb_hardware_init+0x30>)
    6e58:	4c0b      	ldr	r4, [pc, #44]	; (6e88 <grid_module_bu16_revb_hardware_init+0x34>)
    6e5a:	463b      	mov	r3, r7
    6e5c:	2200      	movs	r2, #0
    6e5e:	4611      	mov	r1, r2
    6e60:	4620      	mov	r0, r4
    6e62:	4e0a      	ldr	r6, [pc, #40]	; (6e8c <grid_module_bu16_revb_hardware_init+0x38>)
    6e64:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    6e66:	4d0a      	ldr	r5, [pc, #40]	; (6e90 <grid_module_bu16_revb_hardware_init+0x3c>)
    6e68:	463b      	mov	r3, r7
    6e6a:	2200      	movs	r2, #0
    6e6c:	4611      	mov	r1, r2
    6e6e:	4628      	mov	r0, r5
    6e70:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    6e72:	2100      	movs	r1, #0
    6e74:	4620      	mov	r0, r4
    6e76:	4c07      	ldr	r4, [pc, #28]	; (6e94 <grid_module_bu16_revb_hardware_init+0x40>)
    6e78:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    6e7a:	2100      	movs	r1, #0
    6e7c:	4628      	mov	r0, r5
    6e7e:	47a0      	blx	r4
    6e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e82:	bf00      	nop
    6e84:	00006c19 	.word	0x00006c19
    6e88:	20000fc8 	.word	0x20000fc8
    6e8c:	00008f35 	.word	0x00008f35
    6e90:	2000119c 	.word	0x2000119c
    6e94:	00008f25 	.word	0x00008f25

00006e98 <grid_module_bu16_revb_init>:

}



void grid_module_bu16_revb_init(struct grid_ui_model* mod){
    6e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e9c:	b095      	sub	sp, #84	; 0x54
    6e9e:	4681      	mov	r9, r0

	grid_led_init(&grid_led_state, 16);
    6ea0:	2110      	movs	r1, #16
    6ea2:	482d      	ldr	r0, [pc, #180]	; (6f58 <grid_module_bu16_revb_init+0xc0>)
    6ea4:	4b2d      	ldr	r3, [pc, #180]	; (6f5c <grid_module_bu16_revb_init+0xc4>)
    6ea6:	4798      	blx	r3
	grid_ui_model_init(mod, 32);
    6ea8:	2120      	movs	r1, #32
    6eaa:	4648      	mov	r0, r9
    6eac:	4b2c      	ldr	r3, [pc, #176]	; (6f60 <grid_module_bu16_revb_init+0xc8>)
    6eae:	4798      	blx	r3
    6eb0:	f10d 0810 	add.w	r8, sp, #16
    6eb4:	2600      	movs	r6, #0
		
	for(uint8_t i=0; i<32; i++){
				
		uint8_t payload_template[30] = {0};
    6eb6:	4634      	mov	r4, r6
    6eb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 6f84 <grid_module_bu16_revb_init+0xec>
    6ebc:	e027      	b.n	6f0e <grid_module_bu16_revb_init+0x76>
		}
		else{ // LED
	
			type = GRID_REPORT_TYPE_LOCAL;

			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    6ebe:	2303      	movs	r3, #3
    6ec0:	9304      	str	r3, [sp, #16]
    6ec2:	9403      	str	r4, [sp, #12]
    6ec4:	f898 2000 	ldrb.w	r2, [r8]
    6ec8:	9202      	str	r2, [sp, #8]
    6eca:	2263      	movs	r2, #99	; 0x63
    6ecc:	9201      	str	r2, [sp, #4]
    6ece:	2501      	movs	r5, #1
    6ed0:	9500      	str	r5, [sp, #0]
    6ed2:	2202      	movs	r2, #2
    6ed4:	4923      	ldr	r1, [pc, #140]	; (6f64 <grid_module_bu16_revb_init+0xcc>)
    6ed6:	a80c      	add	r0, sp, #48	; 0x30
    6ed8:	f8df b098 	ldr.w	fp, [pc, #152]	; 6f74 <grid_module_bu16_revb_init+0xdc>
    6edc:	47d8      	blx	fp
			
			
			
		}
		
		uint8_t payload_length = strlen(payload_template);
    6ede:	a80c      	add	r0, sp, #48	; 0x30
    6ee0:	4b21      	ldr	r3, [pc, #132]	; (6f68 <grid_module_bu16_revb_init+0xd0>)
    6ee2:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    6ee4:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    6ee8:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;
		
		uint8_t error = grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    6eec:	2302      	movs	r3, #2
    6eee:	9302      	str	r3, [sp, #8]
    6ef0:	ab07      	add	r3, sp, #28
    6ef2:	9301      	str	r3, [sp, #4]
    6ef4:	b2c0      	uxtb	r0, r0
    6ef6:	9000      	str	r0, [sp, #0]
    6ef8:	ab0c      	add	r3, sp, #48	; 0x30
    6efa:	462a      	mov	r2, r5
    6efc:	4639      	mov	r1, r7
    6efe:	4648      	mov	r0, r9
    6f00:	4d1a      	ldr	r5, [pc, #104]	; (6f6c <grid_module_bu16_revb_init+0xd4>)
    6f02:	47a8      	blx	r5
    6f04:	3601      	adds	r6, #1
    6f06:	f108 0801 	add.w	r8, r8, #1
	for(uint8_t i=0; i<32; i++){
    6f0a:	2e20      	cmp	r6, #32
    6f0c:	d01a      	beq.n	6f44 <grid_module_bu16_revb_init+0xac>
    6f0e:	b2f7      	uxtb	r7, r6
		uint8_t payload_template[30] = {0};
    6f10:	221e      	movs	r2, #30
    6f12:	4621      	mov	r1, r4
    6f14:	a80c      	add	r0, sp, #48	; 0x30
    6f16:	47d0      	blx	sl
		uint8_t grid_module_bu16_revb_mux_lookup_led[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    6f18:	4b15      	ldr	r3, [pc, #84]	; (6f70 <grid_module_bu16_revb_init+0xd8>)
    6f1a:	ad08      	add	r5, sp, #32
    6f1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6f1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		if (i<16){ //BUTTON
    6f22:	2f0f      	cmp	r7, #15
    6f24:	d8cb      	bhi.n	6ebe <grid_module_bu16_revb_init+0x26>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    6f26:	2303      	movs	r3, #3
    6f28:	9304      	str	r3, [sp, #16]
    6f2a:	9403      	str	r4, [sp, #12]
    6f2c:	9602      	str	r6, [sp, #8]
    6f2e:	2390      	movs	r3, #144	; 0x90
    6f30:	9301      	str	r3, [sp, #4]
    6f32:	9400      	str	r4, [sp, #0]
    6f34:	4623      	mov	r3, r4
    6f36:	2202      	movs	r2, #2
    6f38:	490a      	ldr	r1, [pc, #40]	; (6f64 <grid_module_bu16_revb_init+0xcc>)
    6f3a:	a80c      	add	r0, sp, #48	; 0x30
    6f3c:	4d0d      	ldr	r5, [pc, #52]	; (6f74 <grid_module_bu16_revb_init+0xdc>)
    6f3e:	47a8      	blx	r5
			type = GRID_REPORT_TYPE_BROADCAST;
    6f40:	2502      	movs	r5, #2
    6f42:	e7cc      	b.n	6ede <grid_module_bu16_revb_init+0x46>
		

	}
	
	grid_report_sys_init(mod);
    6f44:	4648      	mov	r0, r9
    6f46:	4b0c      	ldr	r3, [pc, #48]	; (6f78 <grid_module_bu16_revb_init+0xe0>)
    6f48:	4798      	blx	r3
			
	grid_module_bu16_revb_hardware_init();
    6f4a:	4b0c      	ldr	r3, [pc, #48]	; (6f7c <grid_module_bu16_revb_init+0xe4>)
    6f4c:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();
    6f4e:	4b0c      	ldr	r3, [pc, #48]	; (6f80 <grid_module_bu16_revb_init+0xe8>)
    6f50:	4798      	blx	r3

};
    6f52:	b015      	add	sp, #84	; 0x54
    6f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f58:	200077d4 	.word	0x200077d4
    6f5c:	00006a89 	.word	0x00006a89
    6f60:	00008635 	.word	0x00008635
    6f64:	000115d8 	.word	0x000115d8
    6f68:	0001036d 	.word	0x0001036d
    6f6c:	000086f9 	.word	0x000086f9
    6f70:	000115c8 	.word	0x000115c8
    6f74:	00010325 	.word	0x00010325
    6f78:	0000871d 	.word	0x0000871d
    6f7c:	00006e55 	.word	0x00006e55
    6f80:	00006bfd 	.word	0x00006bfd
    6f84:	0000fec3 	.word	0x0000fec3

00006f88 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    6f88:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6f8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    6f8e:	4b06      	ldr	r3, [pc, #24]	; (6fa8 <grid_module_en16_reva_hardware_start_transfer+0x20>)
    6f90:	619a      	str	r2, [r3, #24]
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    6f92:	4c06      	ldr	r4, [pc, #24]	; (6fac <grid_module_en16_reva_hardware_start_transfer+0x24>)
    6f94:	4620      	mov	r0, r4
    6f96:	4b06      	ldr	r3, [pc, #24]	; (6fb0 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    6f98:	4798      	blx	r3

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    6f9a:	2308      	movs	r3, #8
    6f9c:	4a05      	ldr	r2, [pc, #20]	; (6fb4 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    6f9e:	4906      	ldr	r1, [pc, #24]	; (6fb8 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    6fa0:	4620      	mov	r0, r4
    6fa2:	4c06      	ldr	r4, [pc, #24]	; (6fbc <grid_module_en16_reva_hardware_start_transfer+0x34>)
    6fa4:	47a0      	blx	r4
    6fa6:	bd10      	pop	{r4, pc}
    6fa8:	41008000 	.word	0x41008000
    6fac:	20000ebc 	.word	0x20000ebc
    6fb0:	000093bd 	.word	0x000093bd
    6fb4:	20002258 	.word	0x20002258
    6fb8:	20000310 	.word	0x20000310
    6fbc:	0000940d 	.word	0x0000940d

00006fc0 <grid_module_en16_reva_hardware_transfer_complete_cb>:

}

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    6fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fc4:	ed2d 8b04 	vpush	{d8-d9}
    6fc8:	b085      	sub	sp, #20
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6fca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    6fce:	4b4c      	ldr	r3, [pc, #304]	; (7100 <grid_module_en16_reva_hardware_transfer_complete_cb+0x140>)
    6fd0:	615a      	str	r2, [r3, #20]
	// Set the shift registers to continuously load data until new transaction is issued
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);


	uint8_t bank = 0;
	if (grid_sys_state.bank_select == 1){
    6fd2:	4b4c      	ldr	r3, [pc, #304]	; (7104 <grid_module_en16_reva_hardware_transfer_complete_cb+0x144>)
    6fd4:	7a5a      	ldrb	r2, [r3, #9]
    6fd6:	b2d2      	uxtb	r2, r2
    6fd8:	2a01      	cmp	r2, #1
    6fda:	bf14      	ite	ne
    6fdc:	2200      	movne	r2, #0
    6fde:	2201      	moveq	r2, #1
    6fe0:	4611      	mov	r1, r2
    6fe2:	9201      	str	r2, [sp, #4]
		bank = 1;
	}

	uint8_t bank_changed = 0;
	
	grid_sys_state.bank_changed;
    6fe4:	7a9a      	ldrb	r2, [r3, #10]
	
	if (grid_sys_state.bank_changed){
    6fe6:	7a9b      	ldrb	r3, [r3, #10]
    6fe8:	b1e3      	cbz	r3, 7024 <grid_module_en16_reva_hardware_transfer_complete_cb+0x64>
		grid_sys_state.bank_changed = 0;
    6fea:	2200      	movs	r2, #0
    6fec:	4b45      	ldr	r3, [pc, #276]	; (7104 <grid_module_en16_reva_hardware_transfer_complete_cb+0x144>)
    6fee:	729a      	strb	r2, [r3, #10]
    6ff0:	2420      	movs	r4, #32
    6ff2:	f44f 7500 	mov.w	r5, #512	; 0x200
		bank_changed = 1;			
		
		for (uint8_t i = 0; i<16; i++)
		{
			grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, mod->report_ui_array[i+16+16].helper[bank]); // LED
    6ff6:	4e44      	ldr	r6, [pc, #272]	; (7108 <grid_module_en16_reva_hardware_transfer_complete_cb+0x148>)
    6ff8:	f8df 8120 	ldr.w	r8, [pc, #288]	; 711c <grid_module_en16_reva_hardware_transfer_complete_cb+0x15c>
			grid_report_ui_set_changed_flag(mod, i+16+16);
    6ffc:	4f43      	ldr	r7, [pc, #268]	; (710c <grid_module_en16_reva_hardware_transfer_complete_cb+0x14c>)
    6ffe:	4689      	mov	r9, r1
			grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, mod->report_ui_array[i+16+16].helper[bank]); // LED
    7000:	68b3      	ldr	r3, [r6, #8]
    7002:	442b      	add	r3, r5
    7004:	68da      	ldr	r2, [r3, #12]
    7006:	6858      	ldr	r0, [r3, #4]
    7008:	f812 2009 	ldrb.w	r2, [r2, r9]
    700c:	2102      	movs	r1, #2
    700e:	3009      	adds	r0, #9
    7010:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, i+16+16);
    7012:	4621      	mov	r1, r4
    7014:	4630      	mov	r0, r6
    7016:	47b8      	blx	r7
    7018:	3510      	adds	r5, #16
    701a:	3401      	adds	r4, #1
    701c:	b2e4      	uxtb	r4, r4
		for (uint8_t i = 0; i<16; i++)
    701e:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    7022:	d1ed      	bne.n	7000 <grid_module_en16_reva_hardware_transfer_complete_cb+0x40>
		grid_sys_state.bank_changed = 0;
    7024:	f04f 0b00 	mov.w	fp, #0
				if (elapsed_time<20){
					elapsed_time = 20;
				}
			
				
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    7028:	ed9f 9b31 	vldr	d9, [pc, #196]	; 70f0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x130>
    702c:	ed9f 8b32 	vldr	d8, [pc, #200]	; 70f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x138>
    7030:	e07f      	b.n	7132 <grid_module_en16_reva_hardware_transfer_complete_cb+0x172>
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
				
				int16_t xi = delta + delta * velocityfactor;
				
				if (delta<0){
					if (grid_ui_encoder_array[i].rotation_value + xi >= 0){
    7032:	4937      	ldr	r1, [pc, #220]	; (7110 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    7034:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    7038:	78c9      	ldrb	r1, [r1, #3]
    703a:	42d1      	cmn	r1, r2
    703c:	d405      	bmi.n	704a <grid_module_en16_reva_hardware_transfer_complete_cb+0x8a>
						grid_ui_encoder_array[i].rotation_value += xi;
    703e:	4a34      	ldr	r2, [pc, #208]	; (7110 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    7040:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    7044:	440b      	add	r3, r1
    7046:	70d3      	strb	r3, [r2, #3]
    7048:	e13a      	b.n	72c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 0;
    704a:	4b31      	ldr	r3, [pc, #196]	; (7110 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    704c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    7050:	2200      	movs	r2, #0
    7052:	70da      	strb	r2, [r3, #3]
    7054:	e134      	b.n	72c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
				else if (delta>0){
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
						grid_ui_encoder_array[i].rotation_value += xi;
					}
					else{
						grid_ui_encoder_array[i].rotation_value = 127;
    7056:	4b2e      	ldr	r3, [pc, #184]	; (7110 <grid_module_en16_reva_hardware_transfer_complete_cb+0x150>)
    7058:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    705c:	227f      	movs	r2, #127	; 0x7f
    705e:	70da      	strb	r2, [r3, #3]
    7060:	e12e      	b.n	72c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
								
					
				value = mod->report_ui_array[i+16].helper[bank];
				
				if (value + delta*velocityfactor < 0){
					value = 0;
    7062:	2400      	movs	r4, #0
    7064:	e000      	b.n	7068 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa8>
				}
				else if (value + delta*velocityfactor > 127){
					value = 127;
    7066:	247f      	movs	r4, #127	; 0x7f
				else{
					value += delta*velocityfactor;
				}
								

				if (value != mod->report_ui_array[i+16].helper[bank]){
    7068:	4294      	cmp	r4, r2
    706a:	d05d      	beq.n	7128 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[5], 2, command);
    706c:	6858      	ldr	r0, [r3, #4]
    706e:	22b0      	movs	r2, #176	; 0xb0
    7070:	2102      	movs	r1, #2
    7072:	3005      	adds	r0, #5
    7074:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 711c <grid_module_en16_reva_hardware_transfer_complete_cb+0x15c>
    7078:	47c0      	blx	r8
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[7], 2, i);
    707a:	4f23      	ldr	r7, [pc, #140]	; (7108 <grid_module_en16_reva_hardware_transfer_complete_cb+0x148>)
    707c:	68bb      	ldr	r3, [r7, #8]
    707e:	4433      	add	r3, r6
    7080:	6858      	ldr	r0, [r3, #4]
    7082:	462a      	mov	r2, r5
    7084:	2102      	movs	r1, #2
    7086:	3007      	adds	r0, #7
    7088:	47c0      	blx	r8
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16].payload[9], 2, value);
    708a:	68bb      	ldr	r3, [r7, #8]
    708c:	4433      	add	r3, r6
    708e:	6858      	ldr	r0, [r3, #4]
    7090:	4622      	mov	r2, r4
    7092:	2102      	movs	r1, #2
    7094:	3009      	adds	r0, #9
    7096:	47c0      	blx	r8
					
					mod->report_ui_array[i+16].helper[bank] = value;
    7098:	68bb      	ldr	r3, [r7, #8]
    709a:	4433      	add	r3, r6
    709c:	68db      	ldr	r3, [r3, #12]
    709e:	9a01      	ldr	r2, [sp, #4]
    70a0:	549c      	strb	r4, [r3, r2]
					grid_report_ui_set_changed_flag(mod, i+16);
    70a2:	f105 0110 	add.w	r1, r5, #16
    70a6:	b2c9      	uxtb	r1, r1
    70a8:	4638      	mov	r0, r7
    70aa:	f8df 9060 	ldr.w	r9, [pc, #96]	; 710c <grid_module_en16_reva_hardware_transfer_complete_cb+0x14c>
    70ae:	47c8      	blx	r9
					
					
					
					grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16].payload[9], 2, value*2); // LED
    70b0:	f506 7680 	add.w	r6, r6, #256	; 0x100
    70b4:	0064      	lsls	r4, r4, #1
    70b6:	68bb      	ldr	r3, [r7, #8]
    70b8:	4433      	add	r3, r6
    70ba:	6858      	ldr	r0, [r3, #4]
    70bc:	4622      	mov	r2, r4
    70be:	2102      	movs	r1, #2
    70c0:	3009      	adds	r0, #9
    70c2:	47c0      	blx	r8
					mod->report_ui_array[i+16+16].helper[bank] = value*2;
    70c4:	68bb      	ldr	r3, [r7, #8]
    70c6:	441e      	add	r6, r3
    70c8:	68f3      	ldr	r3, [r6, #12]
    70ca:	9a01      	ldr	r2, [sp, #4]
    70cc:	549c      	strb	r4, [r3, r2]
					grid_report_ui_set_changed_flag(mod, i+16+16);
    70ce:	f105 0120 	add.w	r1, r5, #32
    70d2:	b2c9      	uxtb	r1, r1
    70d4:	4638      	mov	r0, r7
    70d6:	47c8      	blx	r9
    70d8:	e026      	b.n	7128 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    70da:	2200      	movs	r2, #0
    70dc:	4b0d      	ldr	r3, [pc, #52]	; (7114 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>)
    70de:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    70e0:	4b0d      	ldr	r3, [pc, #52]	; (7118 <grid_module_en16_reva_hardware_transfer_complete_cb+0x158>)
    70e2:	4798      	blx	r3
}
    70e4:	b005      	add	sp, #20
    70e6:	ecbd 8b04 	vpop	{d8-d9}
    70ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70ee:	bf00      	nop
    70f0:	00000000 	.word	0x00000000
    70f4:	40ed4c00 	.word	0x40ed4c00
    70f8:	00000000 	.word	0x00000000
    70fc:	3ff00000 	.word	0x3ff00000
    7100:	41008000 	.word	0x41008000
    7104:	20003280 	.word	0x20003280
    7108:	20003270 	.word	0x20003270
    710c:	0000893f 	.word	0x0000893f
    7110:	20007804 	.word	0x20007804
    7114:	20007800 	.word	0x20007800
    7118:	00006f89 	.word	0x00006f89
    711c:	00008201 	.word	0x00008201
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    7120:	4971      	ldr	r1, [pc, #452]	; (72e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    7122:	eb01 1505 	add.w	r5, r1, r5, lsl #4
    7126:	73ac      	strb	r4, [r5, #14]
    7128:	f10b 0b01 	add.w	fp, fp, #1
	for (uint8_t j=0; j<16; j++){
    712c:	f1bb 0f10 	cmp.w	fp, #16
    7130:	d0d3      	beq.n	70da <grid_module_en16_reva_hardware_transfer_complete_cb+0x11a>
    7132:	fa5f f28b 	uxtb.w	r2, fp
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    7136:	0853      	lsrs	r3, r2, #1
    7138:	496c      	ldr	r1, [pc, #432]	; (72ec <grid_module_en16_reva_hardware_transfer_complete_cb+0x32c>)
    713a:	5ccc      	ldrb	r4, [r1, r3]
    713c:	f002 0301 	and.w	r3, r2, #1
    7140:	009b      	lsls	r3, r3, #2
    7142:	411c      	asrs	r4, r3
    7144:	b2e4      	uxtb	r4, r4
    7146:	f004 060f 	and.w	r6, r4, #15
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    714a:	4b69      	ldr	r3, [pc, #420]	; (72f0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x330>)
    714c:	f813 300b 	ldrb.w	r3, [r3, fp]
    7150:	b2db      	uxtb	r3, r3
		if (old_value != new_value){
    7152:	429e      	cmp	r6, r3
    7154:	d0e8      	beq.n	7128 <grid_module_en16_reva_hardware_transfer_complete_cb+0x168>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    7156:	4b67      	ldr	r3, [pc, #412]	; (72f4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x334>)
    7158:	f81b 5003 	ldrb.w	r5, [fp, r3]
			UI_SPI_DEBUG = j;
    715c:	4b66      	ldr	r3, [pc, #408]	; (72f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x338>)
    715e:	701a      	strb	r2, [r3, #0]
			uint8_t button_value = new_value>>2;
    7160:	08b3      	lsrs	r3, r6, #2
			uint8_t phase_a = (new_value>>1)&1;
    7162:	f3c6 0640 	ubfx	r6, r6, #1, #1
			uint8_t phase_b = (new_value)&1;
    7166:	f004 0401 	and.w	r4, r4, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    716a:	4a5f      	ldr	r2, [pc, #380]	; (72e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    716c:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    7170:	7852      	ldrb	r2, [r2, #1]
    7172:	429a      	cmp	r2, r3
    7174:	d04f      	beq.n	7216 <grid_module_en16_reva_hardware_transfer_complete_cb+0x256>
				grid_ui_encoder_array[i].button_changed = 1;
    7176:	4a5c      	ldr	r2, [pc, #368]	; (72e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    7178:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    717c:	2101      	movs	r1, #1
    717e:	7091      	strb	r1, [r2, #2]
				grid_ui_encoder_array[i].button_value = new_value>>2;
    7180:	7053      	strb	r3, [r2, #1]
					velocity = 0;
    7182:	2b00      	cmp	r3, #0
    7184:	bf0c      	ite	eq
    7186:	f04f 0a7f 	moveq.w	sl, #127	; 0x7f
    718a:	f04f 0a00 	movne.w	sl, #0
				uint8_t actuator = 2*velocity;
    718e:	fa0a f301 	lsl.w	r3, sl, r1
    7192:	9300      	str	r3, [sp, #0]
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[5], 2, command);
    7194:	ea4f 1705 	mov.w	r7, r5, lsl #4
    7198:	f8df 817c 	ldr.w	r8, [pc, #380]	; 7318 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>
    719c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    71a0:	443b      	add	r3, r7
    71a2:	6858      	ldr	r0, [r3, #4]
    71a4:	bf0c      	ite	eq
    71a6:	2290      	moveq	r2, #144	; 0x90
    71a8:	2280      	movne	r2, #128	; 0x80
    71aa:	2102      	movs	r1, #2
    71ac:	3005      	adds	r0, #5
    71ae:	f8df 916c 	ldr.w	r9, [pc, #364]	; 731c <grid_module_en16_reva_hardware_transfer_complete_cb+0x35c>
    71b2:	47c8      	blx	r9
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[7], 2, i);
    71b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    71b8:	443b      	add	r3, r7
    71ba:	6858      	ldr	r0, [r3, #4]
    71bc:	462a      	mov	r2, r5
    71be:	2102      	movs	r1, #2
    71c0:	3007      	adds	r0, #7
    71c2:	47c8      	blx	r9
				grid_sys_write_hex_string_value(&mod->report_ui_array[i].payload[9], 2, velocity);
    71c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    71c8:	443b      	add	r3, r7
    71ca:	6858      	ldr	r0, [r3, #4]
    71cc:	4652      	mov	r2, sl
    71ce:	2102      	movs	r1, #2
    71d0:	3009      	adds	r0, #9
    71d2:	47c8      	blx	r9
				mod->report_ui_array[i].helper[0] = velocity;
    71d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    71d8:	443b      	add	r3, r7
    71da:	68db      	ldr	r3, [r3, #12]
    71dc:	f883 a000 	strb.w	sl, [r3]
				grid_report_ui_set_changed_flag(mod, i);
    71e0:	4629      	mov	r1, r5
    71e2:	4640      	mov	r0, r8
    71e4:	f8df a138 	ldr.w	sl, [pc, #312]	; 7320 <grid_module_en16_reva_hardware_transfer_complete_cb+0x360>
    71e8:	47d0      	blx	sl
				grid_sys_write_hex_string_value(&mod->report_ui_array[i+16+16+16].payload[9], 2, actuator); // BUTTONLED
    71ea:	f507 7740 	add.w	r7, r7, #768	; 0x300
    71ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
    71f2:	443b      	add	r3, r7
    71f4:	6858      	ldr	r0, [r3, #4]
    71f6:	9a00      	ldr	r2, [sp, #0]
    71f8:	2102      	movs	r1, #2
    71fa:	3009      	adds	r0, #9
    71fc:	47c8      	blx	r9
				mod->report_ui_array[i+16+16+16].helper[0] = actuator;
    71fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7202:	441f      	add	r7, r3
    7204:	68fb      	ldr	r3, [r7, #12]
    7206:	f89d 2000 	ldrb.w	r2, [sp]
    720a:	701a      	strb	r2, [r3, #0]
				grid_report_ui_set_changed_flag(mod, i+16+16+16);
    720c:	f105 0130 	add.w	r1, r5, #48	; 0x30
    7210:	b2c9      	uxtb	r1, r1
    7212:	4640      	mov	r0, r8
    7214:	47d0      	blx	sl
			uint8_t a_prev = grid_ui_encoder_array[i].phase_a_previous;
    7216:	4b34      	ldr	r3, [pc, #208]	; (72e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    7218:	eb03 1305 	add.w	r3, r3, r5, lsl #4
			if (a_now != a_prev){
    721c:	7b5b      	ldrb	r3, [r3, #13]
    721e:	42b3      	cmp	r3, r6
    7220:	f43f af7e 	beq.w	7120 <grid_module_en16_reva_hardware_transfer_complete_cb+0x160>
					delta = +1;
    7224:	42a6      	cmp	r6, r4
    7226:	bf14      	ite	ne
    7228:	f04f 37ff 	movne.w	r7, #4294967295
    722c:	2701      	moveq	r7, #1
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    722e:	4b2e      	ldr	r3, [pc, #184]	; (72e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    7230:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    7234:	735e      	strb	r6, [r3, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    7236:	739c      	strb	r4, [r3, #14]
				volatile uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time);
    7238:	6899      	ldr	r1, [r3, #8]
    723a:	4830      	ldr	r0, [pc, #192]	; (72fc <grid_module_en16_reva_hardware_transfer_complete_cb+0x33c>)
    723c:	4b30      	ldr	r3, [pc, #192]	; (7300 <grid_module_en16_reva_hardware_transfer_complete_cb+0x340>)
    723e:	4798      	blx	r3
    7240:	9003      	str	r0, [sp, #12]
				if (elapsed_time>400){
    7242:	9b03      	ldr	r3, [sp, #12]
    7244:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
					elapsed_time = 400;
    7248:	bf84      	itt	hi
    724a:	f44f 73c8 	movhi.w	r3, #400	; 0x190
    724e:	9303      	strhi	r3, [sp, #12]
				if (elapsed_time<20){
    7250:	9b03      	ldr	r3, [sp, #12]
    7252:	2b13      	cmp	r3, #19
					elapsed_time = 20;
    7254:	bf9c      	itt	ls
    7256:	2314      	movls	r3, #20
    7258:	9303      	strls	r3, [sp, #12]
				uint16_t velocityfactor = (160000-elapsed_time*elapsed_time)/60000.0 + 1;
    725a:	9b03      	ldr	r3, [sp, #12]
    725c:	9803      	ldr	r0, [sp, #12]
    725e:	fb00 f003 	mul.w	r0, r0, r3
    7262:	f5c0 301c 	rsb	r0, r0, #159744	; 0x27000
    7266:	f500 7080 	add.w	r0, r0, #256	; 0x100
    726a:	4b26      	ldr	r3, [pc, #152]	; (7304 <grid_module_en16_reva_hardware_transfer_complete_cb+0x344>)
    726c:	4798      	blx	r3
    726e:	ec53 2b19 	vmov	r2, r3, d9
    7272:	4c25      	ldr	r4, [pc, #148]	; (7308 <grid_module_en16_reva_hardware_transfer_complete_cb+0x348>)
    7274:	47a0      	blx	r4
    7276:	ec53 2b18 	vmov	r2, r3, d8
    727a:	4c24      	ldr	r4, [pc, #144]	; (730c <grid_module_en16_reva_hardware_transfer_complete_cb+0x34c>)
    727c:	47a0      	blx	r4
    727e:	4b24      	ldr	r3, [pc, #144]	; (7310 <grid_module_en16_reva_hardware_transfer_complete_cb+0x350>)
    7280:	4798      	blx	r3
    7282:	b284      	uxth	r4, r0
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    7284:	481d      	ldr	r0, [pc, #116]	; (72fc <grid_module_en16_reva_hardware_transfer_complete_cb+0x33c>)
    7286:	4b23      	ldr	r3, [pc, #140]	; (7314 <grid_module_en16_reva_hardware_transfer_complete_cb+0x354>)
    7288:	4798      	blx	r3
    728a:	4b17      	ldr	r3, [pc, #92]	; (72e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    728c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    7290:	6098      	str	r0, [r3, #8]
				int16_t xi = delta + delta * velocityfactor;
    7292:	1c63      	adds	r3, r4, #1
    7294:	fb13 f307 	smulbb	r3, r3, r7
    7298:	b29b      	uxth	r3, r3
    729a:	b21a      	sxth	r2, r3
				if (delta<0){
    729c:	2f00      	cmp	r7, #0
    729e:	f6ff aec8 	blt.w	7032 <grid_module_en16_reva_hardware_transfer_complete_cb+0x72>
				else if (delta>0){
    72a2:	2f00      	cmp	r7, #0
    72a4:	dd0c      	ble.n	72c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x300>
					if (grid_ui_encoder_array[i].rotation_value + xi <= 127){
    72a6:	4910      	ldr	r1, [pc, #64]	; (72e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    72a8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    72ac:	78c9      	ldrb	r1, [r1, #3]
    72ae:	440a      	add	r2, r1
    72b0:	2a7f      	cmp	r2, #127	; 0x7f
    72b2:	f73f aed0 	bgt.w	7056 <grid_module_en16_reva_hardware_transfer_complete_cb+0x96>
						grid_ui_encoder_array[i].rotation_value += xi;
    72b6:	4a0c      	ldr	r2, [pc, #48]	; (72e8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x328>)
    72b8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
    72bc:	440b      	add	r3, r1
    72be:	70d3      	strb	r3, [r2, #3]
				value = mod->report_ui_array[i+16].helper[bank];
    72c0:	f105 0610 	add.w	r6, r5, #16
    72c4:	0136      	lsls	r6, r6, #4
    72c6:	4b14      	ldr	r3, [pc, #80]	; (7318 <grid_module_en16_reva_hardware_transfer_complete_cb+0x358>)
    72c8:	689b      	ldr	r3, [r3, #8]
    72ca:	4433      	add	r3, r6
    72cc:	68da      	ldr	r2, [r3, #12]
    72ce:	9901      	ldr	r1, [sp, #4]
    72d0:	5c52      	ldrb	r2, [r2, r1]
				if (value + delta*velocityfactor < 0){
    72d2:	fb04 2107 	mla	r1, r4, r7, r2
    72d6:	2900      	cmp	r1, #0
    72d8:	f6ff aec3 	blt.w	7062 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa2>
				else if (value + delta*velocityfactor > 127){
    72dc:	297f      	cmp	r1, #127	; 0x7f
    72de:	f73f aec2 	bgt.w	7066 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa6>
					value += delta*velocityfactor;
    72e2:	f001 04ff 	and.w	r4, r1, #255	; 0xff
    72e6:	e6bf      	b.n	7068 <grid_module_en16_reva_hardware_transfer_complete_cb+0xa8>
    72e8:	20007804 	.word	0x20007804
    72ec:	20002258 	.word	0x20002258
    72f0:	20002240 	.word	0x20002240
    72f4:	20000320 	.word	0x20000320
    72f8:	20002224 	.word	0x20002224
    72fc:	20003280 	.word	0x20003280
    7300:	0000810d 	.word	0x0000810d
    7304:	0000f905 	.word	0x0000f905
    7308:	0000fc45 	.word	0x0000fc45
    730c:	0000f68d 	.word	0x0000f68d
    7310:	0000fe15 	.word	0x0000fe15
    7314:	00008109 	.word	0x00008109
    7318:	20003270 	.word	0x20003270
    731c:	00008201 	.word	0x00008201
    7320:	0000893f 	.word	0x0000893f

00007324 <grid_module_en16_reva_hardware_init>:

void grid_module_en16_reva_hardware_init(void){
    7324:	b510      	push	{r4, lr}
    7326:	4b0e      	ldr	r3, [pc, #56]	; (7360 <grid_module_en16_reva_hardware_init+0x3c>)
    7328:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    732c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    732e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7334:	629a      	str	r2, [r3, #40]	; 0x28
    7336:	4a0b      	ldr	r2, [pc, #44]	; (7364 <grid_module_en16_reva_hardware_init+0x40>)
    7338:	629a      	str	r2, [r3, #40]	; 0x28
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    733a:	4c0b      	ldr	r4, [pc, #44]	; (7368 <grid_module_en16_reva_hardware_init+0x44>)
    733c:	2103      	movs	r1, #3
    733e:	4620      	mov	r0, r4
    7340:	4b0a      	ldr	r3, [pc, #40]	; (736c <grid_module_en16_reva_hardware_init+0x48>)
    7342:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 400000);
    7344:	490a      	ldr	r1, [pc, #40]	; (7370 <grid_module_en16_reva_hardware_init+0x4c>)
    7346:	4620      	mov	r0, r4
    7348:	4b0a      	ldr	r3, [pc, #40]	; (7374 <grid_module_en16_reva_hardware_init+0x50>)
    734a:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    734c:	490a      	ldr	r1, [pc, #40]	; (7378 <grid_module_en16_reva_hardware_init+0x54>)
    734e:	4620      	mov	r0, r4
    7350:	4b0a      	ldr	r3, [pc, #40]	; (737c <grid_module_en16_reva_hardware_init+0x58>)
    7352:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    7354:	4a0a      	ldr	r2, [pc, #40]	; (7380 <grid_module_en16_reva_hardware_init+0x5c>)
    7356:	2100      	movs	r1, #0
    7358:	4620      	mov	r0, r4
    735a:	4b0a      	ldr	r3, [pc, #40]	; (7384 <grid_module_en16_reva_hardware_init+0x60>)
    735c:	4798      	blx	r3
    735e:	bd10      	pop	{r4, pc}
    7360:	41008000 	.word	0x41008000
    7364:	c0000020 	.word	0xc0000020
    7368:	20000ebc 	.word	0x20000ebc
    736c:	000093ed 	.word	0x000093ed
    7370:	00061a80 	.word	0x00061a80
    7374:	000093cd 	.word	0x000093cd
    7378:	2000223c 	.word	0x2000223c
    737c:	00009479 	.word	0x00009479
    7380:	00006fc1 	.word	0x00006fc1
    7384:	00009459 	.word	0x00009459

00007388 <grid_module_en16_reva_init>:


}

void grid_module_en16_reva_init(struct grid_ui_model* mod){
    7388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    738c:	b090      	sub	sp, #64	; 0x40
    738e:	4680      	mov	r8, r0
	
	
	grid_led_init(&grid_led_state, 16);
    7390:	2110      	movs	r1, #16
    7392:	4844      	ldr	r0, [pc, #272]	; (74a4 <grid_module_en16_reva_init+0x11c>)
    7394:	4b44      	ldr	r3, [pc, #272]	; (74a8 <grid_module_en16_reva_init+0x120>)
    7396:	4798      	blx	r3
	
	grid_ui_model_init(mod, 16+16+16+16);
    7398:	2140      	movs	r1, #64	; 0x40
    739a:	4640      	mov	r0, r8
    739c:	4b43      	ldr	r3, [pc, #268]	; (74ac <grid_module_en16_reva_init+0x124>)
    739e:	4798      	blx	r3
    73a0:	2400      	movs	r4, #0
	
	// 0 is for mapmode_button
	// 1...16 is for ui_buttons
	for(uint8_t i=0; i<16+16+16+16; i++){
		
		uint8_t payload_template[30] = {0};
    73a2:	4625      	mov	r5, r4
    73a4:	f8df 9128 	ldr.w	r9, [pc, #296]	; 74d0 <grid_module_en16_reva_init+0x148>
    73a8:	e031      	b.n	740e <grid_module_en16_reva_init+0x86>
		

		if (i<16){ // ROTATION
			type = GRID_REPORT_TYPE_BROADCAST;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    73aa:	2303      	movs	r3, #3
    73ac:	9304      	str	r3, [sp, #16]
    73ae:	9503      	str	r5, [sp, #12]
    73b0:	9402      	str	r4, [sp, #8]
    73b2:	2390      	movs	r3, #144	; 0x90
    73b4:	9301      	str	r3, [sp, #4]
    73b6:	9500      	str	r5, [sp, #0]
    73b8:	462b      	mov	r3, r5
    73ba:	2202      	movs	r2, #2
    73bc:	493c      	ldr	r1, [pc, #240]	; (74b0 <grid_module_en16_reva_init+0x128>)
    73be:	a808      	add	r0, sp, #32
    73c0:	4f3c      	ldr	r7, [pc, #240]	; (74b4 <grid_module_en16_reva_init+0x12c>)
    73c2:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    73c4:	2702      	movs	r7, #2
    73c6:	e00d      	b.n	73e4 <grid_module_en16_reva_init+0x5c>
			
		}		
		else if (i<16+16){ // BUTTON
			type = GRID_REPORT_TYPE_BROADCAST;
		
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    73c8:	2303      	movs	r3, #3
    73ca:	9304      	str	r3, [sp, #16]
    73cc:	9503      	str	r5, [sp, #12]
    73ce:	9402      	str	r4, [sp, #8]
    73d0:	2390      	movs	r3, #144	; 0x90
    73d2:	9301      	str	r3, [sp, #4]
    73d4:	9500      	str	r5, [sp, #0]
    73d6:	462b      	mov	r3, r5
    73d8:	2202      	movs	r2, #2
    73da:	4935      	ldr	r1, [pc, #212]	; (74b0 <grid_module_en16_reva_init+0x128>)
    73dc:	a808      	add	r0, sp, #32
    73de:	4f35      	ldr	r7, [pc, #212]	; (74b4 <grid_module_en16_reva_init+0x12c>)
    73e0:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    73e2:	2702      	movs	r7, #2
			);
	
		}

		
		uint32_t payload_length = strlen(payload_template);
    73e4:	a808      	add	r0, sp, #32
    73e6:	4b34      	ldr	r3, [pc, #208]	; (74b8 <grid_module_en16_reva_init+0x130>)
    73e8:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    73ea:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    73ee:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;

		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    73f2:	2302      	movs	r3, #2
    73f4:	9302      	str	r3, [sp, #8]
    73f6:	ab07      	add	r3, sp, #28
    73f8:	9301      	str	r3, [sp, #4]
    73fa:	9000      	str	r0, [sp, #0]
    73fc:	ab08      	add	r3, sp, #32
    73fe:	463a      	mov	r2, r7
    7400:	4631      	mov	r1, r6
    7402:	4640      	mov	r0, r8
    7404:	4e2d      	ldr	r6, [pc, #180]	; (74bc <grid_module_en16_reva_init+0x134>)
    7406:	47b0      	blx	r6
    7408:	3401      	adds	r4, #1
	for(uint8_t i=0; i<16+16+16+16; i++){
    740a:	2c40      	cmp	r4, #64	; 0x40
    740c:	d02b      	beq.n	7466 <grid_module_en16_reva_init+0xde>
    740e:	b2e6      	uxtb	r6, r4
		uint8_t payload_template[30] = {0};
    7410:	221e      	movs	r2, #30
    7412:	4629      	mov	r1, r5
    7414:	a808      	add	r0, sp, #32
    7416:	47c8      	blx	r9
		if (i<16){ // ROTATION
    7418:	2e0f      	cmp	r6, #15
    741a:	d9c6      	bls.n	73aa <grid_module_en16_reva_init+0x22>
		else if (i<16+16){ // BUTTON
    741c:	2e1f      	cmp	r6, #31
    741e:	d9d3      	bls.n	73c8 <grid_module_en16_reva_init+0x40>
		else if(i<16+16+16){ // LED (Rotation)
    7420:	2e2f      	cmp	r6, #47	; 0x2f
    7422:	d810      	bhi.n	7446 <grid_module_en16_reva_init+0xbe>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    7424:	2303      	movs	r3, #3
    7426:	9304      	str	r3, [sp, #16]
    7428:	9503      	str	r5, [sp, #12]
    742a:	f1a4 0220 	sub.w	r2, r4, #32
    742e:	9202      	str	r2, [sp, #8]
    7430:	2263      	movs	r2, #99	; 0x63
    7432:	9201      	str	r2, [sp, #4]
    7434:	2701      	movs	r7, #1
    7436:	9700      	str	r7, [sp, #0]
    7438:	2202      	movs	r2, #2
    743a:	491d      	ldr	r1, [pc, #116]	; (74b0 <grid_module_en16_reva_init+0x128>)
    743c:	a808      	add	r0, sp, #32
    743e:	f8df a074 	ldr.w	sl, [pc, #116]	; 74b4 <grid_module_en16_reva_init+0x12c>
    7442:	47d0      	blx	sl
    7444:	e7ce      	b.n	73e4 <grid_module_en16_reva_init+0x5c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    7446:	2303      	movs	r3, #3
    7448:	9304      	str	r3, [sp, #16]
    744a:	9503      	str	r5, [sp, #12]
    744c:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    7450:	9202      	str	r2, [sp, #8]
    7452:	2263      	movs	r2, #99	; 0x63
    7454:	9201      	str	r2, [sp, #4]
    7456:	2202      	movs	r2, #2
    7458:	9200      	str	r2, [sp, #0]
    745a:	4915      	ldr	r1, [pc, #84]	; (74b0 <grid_module_en16_reva_init+0x128>)
    745c:	a808      	add	r0, sp, #32
    745e:	4f15      	ldr	r7, [pc, #84]	; (74b4 <grid_module_en16_reva_init+0x12c>)
    7460:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_LOCAL;
    7462:	2701      	movs	r7, #1
    7464:	e7be      	b.n	73e4 <grid_module_en16_reva_init+0x5c>
		
	}
	
	grid_report_sys_init(mod);
    7466:	4640      	mov	r0, r8
    7468:	4b15      	ldr	r3, [pc, #84]	; (74c0 <grid_module_en16_reva_init+0x138>)
    746a:	4798      	blx	r3
    746c:	4b15      	ldr	r3, [pc, #84]	; (74c4 <grid_module_en16_reva_init+0x13c>)
    746e:	2100      	movs	r1, #0

	for (uint8_t i = 0; i<16; i++)
	{
		grid_ui_encoder_array[i].controller_number = i;
		
		grid_ui_encoder_array[i].button_value = 0;
    7470:	460a      	mov	r2, r1
		grid_ui_encoder_array[i].button_changed = 0; 
		grid_ui_encoder_array[i].rotation_value = 0;
		grid_ui_encoder_array[i].rotation_changed = 1;
    7472:	2001      	movs	r0, #1
		grid_ui_encoder_array[i].rotation_direction = 0;
		grid_ui_encoder_array[i].last_real_time = -1;
    7474:	f04f 34ff 	mov.w	r4, #4294967295
		grid_ui_encoder_array[i].controller_number = i;
    7478:	7019      	strb	r1, [r3, #0]
		grid_ui_encoder_array[i].button_value = 0;
    747a:	705a      	strb	r2, [r3, #1]
		grid_ui_encoder_array[i].button_changed = 0; 
    747c:	709a      	strb	r2, [r3, #2]
		grid_ui_encoder_array[i].rotation_value = 0;
    747e:	70da      	strb	r2, [r3, #3]
		grid_ui_encoder_array[i].rotation_changed = 1;
    7480:	7118      	strb	r0, [r3, #4]
		grid_ui_encoder_array[i].rotation_direction = 0;
    7482:	715a      	strb	r2, [r3, #5]
		grid_ui_encoder_array[i].last_real_time = -1;
    7484:	609c      	str	r4, [r3, #8]
		grid_ui_encoder_array[i].velocity = 0;
    7486:	731a      	strb	r2, [r3, #12]
		grid_ui_encoder_array[i].phase_a_previous = 1;
    7488:	7358      	strb	r0, [r3, #13]
		grid_ui_encoder_array[i].phase_b_previous = 1;	
    748a:	7398      	strb	r0, [r3, #14]
    748c:	3101      	adds	r1, #1
    748e:	3310      	adds	r3, #16
	for (uint8_t i = 0; i<16; i++)
    7490:	2910      	cmp	r1, #16
    7492:	d1f1      	bne.n	7478 <grid_module_en16_reva_init+0xf0>
		
	}
	
	
	grid_module_en16_reva_hardware_init();
    7494:	4b0c      	ldr	r3, [pc, #48]	; (74c8 <grid_module_en16_reva_init+0x140>)
    7496:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
    7498:	4b0c      	ldr	r3, [pc, #48]	; (74cc <grid_module_en16_reva_init+0x144>)
    749a:	4798      	blx	r3
	
}
    749c:	b010      	add	sp, #64	; 0x40
    749e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    74a2:	bf00      	nop
    74a4:	200077d4 	.word	0x200077d4
    74a8:	00006a89 	.word	0x00006a89
    74ac:	00008635 	.word	0x00008635
    74b0:	000115d8 	.word	0x000115d8
    74b4:	00010325 	.word	0x00010325
    74b8:	0001036d 	.word	0x0001036d
    74bc:	000086f9 	.word	0x000086f9
    74c0:	0000871d 	.word	0x0000871d
    74c4:	20007804 	.word	0x20007804
    74c8:	00007325 	.word	0x00007325
    74cc:	00006f89 	.word	0x00006f89
    74d0:	0000fec3 	.word	0x0000fec3

000074d4 <grid_module_pbf4_reva_hardware_start_transfer>:

volatile uint8_t grid_module_pbf4_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_pbf4_revb_mux =0;
volatile uint8_t grid_module_pbf4_reva_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    74d4:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    74d6:	4803      	ldr	r0, [pc, #12]	; (74e4 <grid_module_pbf4_reva_hardware_start_transfer+0x10>)
    74d8:	4c03      	ldr	r4, [pc, #12]	; (74e8 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    74da:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    74dc:	4803      	ldr	r0, [pc, #12]	; (74ec <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    74de:	47a0      	blx	r4
    74e0:	bd10      	pop	{r4, pc}
    74e2:	bf00      	nop
    74e4:	20000fc8 	.word	0x20000fc8
    74e8:	00009001 	.word	0x00009001
    74ec:	2000119c 	.word	0x2000119c

000074f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:
	
}

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    74f0:	4bb5      	ldr	r3, [pc, #724]	; (77c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	2b00      	cmp	r3, #0
    74f6:	f000 811d 	beq.w	7734 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    74fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74fe:	b083      	sub	sp, #12
	struct grid_ui_model* mod = &grid_ui_state;
	
	
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    7500:	2300      	movs	r3, #0
    7502:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    7506:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    750a:	4bb0      	ldr	r3, [pc, #704]	; (77cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    750c:	781a      	ldrb	r2, [r3, #0]
    750e:	3208      	adds	r2, #8
    7510:	48af      	ldr	r0, [pc, #700]	; (77d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    7512:	5c86      	ldrb	r6, [r0, r2]
    7514:	b2f6      	uxtb	r6, r6
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7516:	781a      	ldrb	r2, [r3, #0]
    7518:	b2d2      	uxtb	r2, r2
    751a:	5c85      	ldrb	r5, [r0, r2]
    751c:	b2ed      	uxtb	r5, r5
	

	
	/* Update the multiplexer */
	
	grid_module_pbf4_reva_mux++;
    751e:	781a      	ldrb	r2, [r3, #0]
    7520:	3201      	adds	r2, #1
    7522:	b2d2      	uxtb	r2, r2
    7524:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    7526:	781a      	ldrb	r2, [r3, #0]
    7528:	f002 0207 	and.w	r2, r2, #7
    752c:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    752e:	781b      	ldrb	r3, [r3, #0]
    7530:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7534:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    7538:	4ba6      	ldr	r3, [pc, #664]	; (77d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    753a:	bf14      	ite	ne
    753c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7540:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    7544:	4ba1      	ldr	r3, [pc, #644]	; (77cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    7546:	781b      	ldrb	r3, [r3, #0]
    7548:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    754c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7550:	4ba0      	ldr	r3, [pc, #640]	; (77d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    7552:	bf14      	ite	ne
    7554:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7558:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    755c:	4b9b      	ldr	r3, [pc, #620]	; (77cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    755e:	781b      	ldrb	r3, [r3, #0]
    7560:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7564:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7568:	4b9a      	ldr	r3, [pc, #616]	; (77d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>)
    756a:	bf14      	ite	ne
    756c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7570:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    7574:	2302      	movs	r3, #2
    7576:	f10d 0206 	add.w	r2, sp, #6
    757a:	2100      	movs	r1, #0
    757c:	4896      	ldr	r0, [pc, #600]	; (77d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>)
    757e:	4c97      	ldr	r4, [pc, #604]	; (77dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>)
    7580:	47a0      	blx	r4
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    7582:	2302      	movs	r3, #2
    7584:	aa01      	add	r2, sp, #4
    7586:	2100      	movs	r1, #0
    7588:	4895      	ldr	r0, [pc, #596]	; (77e0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>)
    758a:	47a0      	blx	r4
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;
    758c:	f8df b268 	ldr.w	fp, [pc, #616]	; 77f8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x308>
    7590:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7594:	47d8      	blx	fp
    7596:	f8df a264 	ldr.w	sl, [pc, #612]	; 77fc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x30c>
    759a:	a389      	add	r3, pc, #548	; (adr r3, 77c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    759c:	e9d3 2300 	ldrd	r2, r3, [r3]
    75a0:	47d0      	blx	sl
    75a2:	f8df 925c 	ldr.w	r9, [pc, #604]	; 7800 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x310>
    75a6:	47c8      	blx	r9
    75a8:	f64f 74ff 	movw	r4, #65535	; 0xffff
    75ac:	42a0      	cmp	r0, r4
    75ae:	bf28      	it	cs
    75b0:	4620      	movcs	r0, r4
    75b2:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    75b4:	fa1f f880 	uxth.w	r8, r0
    75b8:	f8ad 8006 	strh.w	r8, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;
    75bc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    75c0:	47d8      	blx	fp
    75c2:	a37f      	add	r3, pc, #508	; (adr r3, 77c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    75c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    75c8:	47d0      	blx	sl
    75ca:	47c8      	blx	r9
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    75cc:	42a0      	cmp	r0, r4
    75ce:	bf28      	it	cs
    75d0:	4620      	movcs	r0, r4
    75d2:	b280      	uxth	r0, r0
    75d4:	f8ad 0004 	strh.w	r0, [sp, #4]


	if (adc_index_1 == 8 || adc_index_1 == 9){
    75d8:	f1a5 0308 	sub.w	r3, r5, #8
    75dc:	b2db      	uxtb	r3, r3
    75de:	2b01      	cmp	r3, #1
    75e0:	f240 80d5 	bls.w	778e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
		
	}
	else if (adc_index_0 > 13){ // BUTTON
    75e4:	2e0d      	cmp	r6, #13
    75e6:	f240 80be 	bls.w	7766 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x276>
		
		uint8_t adcresult_0_valid = 0;
	
		if (adcresult_0>60000){
    75ea:	f64e 2360 	movw	r3, #60000	; 0xea60
    75ee:	4598      	cmp	r8, r3
    75f0:	f240 80a6 	bls.w	7740 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x250>
			adcresult_0 = 0;
    75f4:	2300      	movs	r3, #0
    75f6:	f8ad 3006 	strh.w	r3, [sp, #6]
			adcresult_0_valid = 1;
    75fa:	f04f 0e01 	mov.w	lr, #1
			adcresult_0_valid = 1;
		}
		
		uint8_t adcresult_1_valid = 0;
	
		if (adcresult_1>60000){
    75fe:	f64e 2360 	movw	r3, #60000	; 0xea60
    7602:	4298      	cmp	r0, r3
    7604:	f240 80a7 	bls.w	7756 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x266>
			adcresult_1 = 0;
    7608:	2300      	movs	r3, #0
    760a:	f8ad 3004 	strh.w	r3, [sp, #4]
			adcresult_1_valid = 1;
    760e:	2401      	movs	r4, #1
		}
		
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_0 != mod->report_ui_array[adc_index_0-4].helper[0] && adcresult_0_valid){
    7610:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
    7614:	3b04      	subs	r3, #4
    7616:	011f      	lsls	r7, r3, #4
    7618:	4b72      	ldr	r3, [pc, #456]	; (77e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    761a:	689b      	ldr	r3, [r3, #8]
    761c:	443b      	add	r3, r7
    761e:	68da      	ldr	r2, [r3, #12]
    7620:	7812      	ldrb	r2, [r2, #0]
    7622:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7626:	4291      	cmp	r1, r2
    7628:	d03e      	beq.n	76a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b8>
    762a:	f1be 0f00 	cmp.w	lr, #0
    762e:	d03b      	beq.n	76a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1b8>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    7630:	2a00      	cmp	r2, #0
    7632:	bf0c      	ite	eq
    7634:	f04f 097f 	moveq.w	r9, #127	; 0x7f
    7638:	f04f 0900 	movne.w	r9, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[5], 2, command);
    763c:	6858      	ldr	r0, [r3, #4]
    763e:	bf0c      	ite	eq
    7640:	2290      	moveq	r2, #144	; 0x90
    7642:	2280      	movne	r2, #128	; 0x80
    7644:	2102      	movs	r1, #2
    7646:	3005      	adds	r0, #5
    7648:	f8df a19c 	ldr.w	sl, [pc, #412]	; 77e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>
    764c:	47d0      	blx	sl
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[7], 2, adc_index_0);
    764e:	f8df 8194 	ldr.w	r8, [pc, #404]	; 77e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>
    7652:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7656:	443b      	add	r3, r7
    7658:	6858      	ldr	r0, [r3, #4]
    765a:	4632      	mov	r2, r6
    765c:	2102      	movs	r1, #2
    765e:	3007      	adds	r0, #7
    7660:	47d0      	blx	sl
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4].payload[9], 2, velocity);
    7662:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7666:	443b      	add	r3, r7
    7668:	6858      	ldr	r0, [r3, #4]
    766a:	464a      	mov	r2, r9
    766c:	2102      	movs	r1, #2
    766e:	3009      	adds	r0, #9
    7670:	47d0      	blx	sl
			mod->report_ui_array[adc_index_0-4].helper[0] = velocity;
    7672:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7676:	443b      	add	r3, r7
    7678:	68db      	ldr	r3, [r3, #12]
    767a:	f883 9000 	strb.w	r9, [r3]
			grid_report_ui_set_changed_flag(mod, adc_index_0-4);
    767e:	1f31      	subs	r1, r6, #4
    7680:	b2c9      	uxtb	r1, r1
    7682:	4640      	mov	r0, r8
    7684:	f8df b17c 	ldr.w	fp, [pc, #380]	; 7804 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
    7688:	47d8      	blx	fp
				
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0-4+12].payload[9], 2, actuator);
    768a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    768e:	443b      	add	r3, r7
    7690:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    7694:	ea4f 0249 	mov.w	r2, r9, lsl #1
    7698:	2102      	movs	r1, #2
    769a:	3009      	adds	r0, #9
    769c:	47d0      	blx	sl
			grid_report_ui_set_changed_flag(mod, adc_index_0-4+12);
    769e:	f106 0108 	add.w	r1, r6, #8
    76a2:	b2c9      	uxtb	r1, r1
    76a4:	4640      	mov	r0, r8
    76a6:	47d8      	blx	fp
		
		//CRITICAL_SECTION_LEAVE()
		
		//CRITICAL_SECTION_ENTER()

		if (adcresult_1 != mod->report_ui_array[adc_index_1-4].helper[0] && adcresult_1_valid){
    76a8:	f105 5380 	add.w	r3, r5, #268435456	; 0x10000000
    76ac:	3b04      	subs	r3, #4
    76ae:	011e      	lsls	r6, r3, #4
    76b0:	4b4c      	ldr	r3, [pc, #304]	; (77e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    76b2:	689b      	ldr	r3, [r3, #8]
    76b4:	4433      	add	r3, r6
    76b6:	68da      	ldr	r2, [r3, #12]
    76b8:	7812      	ldrb	r2, [r2, #0]
    76ba:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    76be:	4291      	cmp	r1, r2
    76c0:	d065      	beq.n	778e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
    76c2:	2c00      	cmp	r4, #0
    76c4:	d063      	beq.n	778e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
				velocity = 127;
			}
			else{
				
				command = GRID_MSG_COMMAND_MIDI_NOTEOFF;
				velocity = 0;
    76c6:	2a00      	cmp	r2, #0
    76c8:	bf0c      	ite	eq
    76ca:	f04f 087f 	moveq.w	r8, #127	; 0x7f
    76ce:	f04f 0800 	movne.w	r8, #0
			}
			
			uint8_t actuator = 2*velocity;
			
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[5], 2, command);
    76d2:	6858      	ldr	r0, [r3, #4]
    76d4:	bf0c      	ite	eq
    76d6:	2290      	moveq	r2, #144	; 0x90
    76d8:	2280      	movne	r2, #128	; 0x80
    76da:	2102      	movs	r1, #2
    76dc:	3005      	adds	r0, #5
    76de:	4f42      	ldr	r7, [pc, #264]	; (77e8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f8>)
    76e0:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[7], 2, adc_index_1);
    76e2:	4c40      	ldr	r4, [pc, #256]	; (77e4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f4>)
    76e4:	68a3      	ldr	r3, [r4, #8]
    76e6:	4433      	add	r3, r6
    76e8:	6858      	ldr	r0, [r3, #4]
    76ea:	462a      	mov	r2, r5
    76ec:	2102      	movs	r1, #2
    76ee:	3007      	adds	r0, #7
    76f0:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4].payload[9], 2, velocity);		
    76f2:	68a3      	ldr	r3, [r4, #8]
    76f4:	4433      	add	r3, r6
    76f6:	6858      	ldr	r0, [r3, #4]
    76f8:	4642      	mov	r2, r8
    76fa:	2102      	movs	r1, #2
    76fc:	3009      	adds	r0, #9
    76fe:	47b8      	blx	r7
			mod->report_ui_array[adc_index_1-4].helper[0] = velocity;		
    7700:	68a3      	ldr	r3, [r4, #8]
    7702:	4433      	add	r3, r6
    7704:	68db      	ldr	r3, [r3, #12]
    7706:	f883 8000 	strb.w	r8, [r3]
			grid_report_ui_set_changed_flag(mod, adc_index_1-4);
    770a:	1f29      	subs	r1, r5, #4
    770c:	b2c9      	uxtb	r1, r1
    770e:	4620      	mov	r0, r4
    7710:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 7804 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
    7714:	47c8      	blx	r9
				
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1-4+12].payload[9], 2, actuator);		
    7716:	68a3      	ldr	r3, [r4, #8]
    7718:	4433      	add	r3, r6
    771a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    771e:	ea4f 0248 	mov.w	r2, r8, lsl #1
    7722:	2102      	movs	r1, #2
    7724:	3009      	adds	r0, #9
    7726:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1-4+12);
    7728:	f105 0108 	add.w	r1, r5, #8
    772c:	b2c9      	uxtb	r1, r1
    772e:	4620      	mov	r0, r4
    7730:	47c8      	blx	r9
    7732:	e02c      	b.n	778e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    7734:	4a24      	ldr	r2, [pc, #144]	; (77c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    7736:	7813      	ldrb	r3, [r2, #0]
    7738:	3301      	adds	r3, #1
    773a:	b2db      	uxtb	r3, r3
    773c:	7013      	strb	r3, [r2, #0]
    773e:	4770      	bx	lr
		else if (adcresult_0<200){
    7740:	f1b8 0fc7 	cmp.w	r8, #199	; 0xc7
			adcresult_0 = 127;
    7744:	bf9d      	ittte	ls
    7746:	237f      	movls	r3, #127	; 0x7f
    7748:	f8ad 3006 	strhls.w	r3, [sp, #6]
			adcresult_0_valid = 1;
    774c:	f04f 0e01 	movls.w	lr, #1
		uint8_t adcresult_0_valid = 0;
    7750:	f04f 0e00 	movhi.w	lr, #0
    7754:	e753      	b.n	75fe <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x10e>
		else if (adcresult_1<200){
    7756:	28c7      	cmp	r0, #199	; 0xc7
			adcresult_1 = 127;
    7758:	bf9d      	ittte	ls
    775a:	237f      	movls	r3, #127	; 0x7f
    775c:	f8ad 3004 	strhls.w	r3, [sp, #4]
			adcresult_1_valid = 1;
    7760:	2401      	movls	r4, #1
		uint8_t adcresult_1_valid = 0;
    7762:	2400      	movhi	r4, #0
    7764:	e754      	b.n	7610 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x120>
		//CRITICAL_SECTION_LEAVE()

	}
	else{ // POTENTIOMETER OR FADER
		
		if (adc_index_1 == 0 || adc_index_1 == 1){
    7766:	2d01      	cmp	r5, #1
    7768:	d919      	bls.n	779e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ae>
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
			
		}
		else{
						
			grid_ain_add_sample(adc_index_0, adcresult_0);
    776a:	b2b9      	uxth	r1, r7
    776c:	4630      	mov	r0, r6
    776e:	4c1f      	ldr	r4, [pc, #124]	; (77ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    7770:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, adcresult_1);
    7772:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7776:	4628      	mov	r0, r5
    7778:	47a0      	blx	r4
			
		
		
		//CRITICAL_SECTION_ENTER()

		if (grid_ain_get_changed(adc_index_0)){
    777a:	4630      	mov	r0, r6
    777c:	4b1c      	ldr	r3, [pc, #112]	; (77f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>)
    777e:	4798      	blx	r3
    7780:	2800      	cmp	r0, #0
    7782:	d141      	bne.n	7808 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x318>
		//CRITICAL_SECTION_LEAVE()
	
	
		//CRITICAL_SECTION_ENTER()

		if (grid_ain_get_changed(adc_index_1)){
    7784:	4628      	mov	r0, r5
    7786:	4b1a      	ldr	r3, [pc, #104]	; (77f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x300>)
    7788:	4798      	blx	r3
    778a:	2800      	cmp	r0, #0
    778c:	d169      	bne.n	7862 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x372>
	
	
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    778e:	2200      	movs	r2, #0
    7790:	4b0d      	ldr	r3, [pc, #52]	; (77c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    7792:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    7794:	4b17      	ldr	r3, [pc, #92]	; (77f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>)
    7796:	4798      	blx	r3
}
    7798:	b003      	add	sp, #12
    779a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    779e:	b2b9      	uxth	r1, r7
    77a0:	f64f 78ff 	movw	r8, #65535	; 0xffff
    77a4:	eba8 0101 	sub.w	r1, r8, r1
    77a8:	4630      	mov	r0, r6
    77aa:	4c10      	ldr	r4, [pc, #64]	; (77ec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2fc>)
    77ac:	47a0      	blx	r4
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    77ae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    77b2:	eba8 0101 	sub.w	r1, r8, r1
    77b6:	4628      	mov	r0, r5
    77b8:	47a0      	blx	r4
    77ba:	e7de      	b.n	777a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x28a>
    77bc:	f3af 8000 	nop.w
    77c0:	47ae147b 	.word	0x47ae147b
    77c4:	3ff07ae1 	.word	0x3ff07ae1
    77c8:	20002254 	.word	0x20002254
    77cc:	20007769 	.word	0x20007769
    77d0:	20000334 	.word	0x20000334
    77d4:	41008000 	.word	0x41008000
    77d8:	20000fc8 	.word	0x20000fc8
    77dc:	00008f71 	.word	0x00008f71
    77e0:	2000119c 	.word	0x2000119c
    77e4:	20003270 	.word	0x20003270
    77e8:	00008201 	.word	0x00008201
    77ec:	000057e5 	.word	0x000057e5
    77f0:	000058e1 	.word	0x000058e1
    77f4:	000074d5 	.word	0x000074d5
    77f8:	0000f925 	.word	0x0000f925
    77fc:	0000f9f1 	.word	0x0000f9f1
    7800:	0000fe15 	.word	0x0000fe15
    7804:	0000893f 	.word	0x0000893f
			uint8_t value = grid_ain_get_average(adc_index_0, 7);
    7808:	2107      	movs	r1, #7
    780a:	4630      	mov	r0, r6
    780c:	4b2b      	ldr	r3, [pc, #172]	; (78bc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    780e:	4798      	blx	r3
    7810:	4607      	mov	r7, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    7812:	ea4f 1a06 	mov.w	sl, r6, lsl #4
    7816:	4c2a      	ldr	r4, [pc, #168]	; (78c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    7818:	68a3      	ldr	r3, [r4, #8]
    781a:	4453      	add	r3, sl
    781c:	6858      	ldr	r0, [r3, #4]
    781e:	4632      	mov	r2, r6
    7820:	2102      	movs	r1, #2
    7822:	3007      	adds	r0, #7
    7824:	f8df 809c 	ldr.w	r8, [pc, #156]	; 78c4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>
    7828:	47c0      	blx	r8
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);
    782a:	68a3      	ldr	r3, [r4, #8]
    782c:	4453      	add	r3, sl
    782e:	6858      	ldr	r0, [r3, #4]
    7830:	b2fa      	uxtb	r2, r7
    7832:	2102      	movs	r1, #2
    7834:	3009      	adds	r0, #9
    7836:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0);	
    7838:	4631      	mov	r1, r6
    783a:	4620      	mov	r0, r4
    783c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 78c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d8>
    7840:	47c8      	blx	r9
			uint8_t actuator = 2*value;
    7842:	007a      	lsls	r2, r7, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0 + 12].payload[9], 2, actuator);			
    7844:	68a3      	ldr	r3, [r4, #8]
    7846:	4453      	add	r3, sl
    7848:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    784c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    7850:	2102      	movs	r1, #2
    7852:	3009      	adds	r0, #9
    7854:	47c0      	blx	r8
			grid_report_ui_set_changed_flag(mod, adc_index_0 + 12);
    7856:	f106 010c 	add.w	r1, r6, #12
    785a:	b2c9      	uxtb	r1, r1
    785c:	4620      	mov	r0, r4
    785e:	47c8      	blx	r9
    7860:	e790      	b.n	7784 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x294>
			uint8_t value = grid_ain_get_average(adc_index_1, 7);
    7862:	2107      	movs	r1, #7
    7864:	4628      	mov	r0, r5
    7866:	4b15      	ldr	r3, [pc, #84]	; (78bc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    7868:	4798      	blx	r3
    786a:	4606      	mov	r6, r0
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    786c:	ea4f 1905 	mov.w	r9, r5, lsl #4
    7870:	4c13      	ldr	r4, [pc, #76]	; (78c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    7872:	68a3      	ldr	r3, [r4, #8]
    7874:	444b      	add	r3, r9
    7876:	6858      	ldr	r0, [r3, #4]
    7878:	462a      	mov	r2, r5
    787a:	2102      	movs	r1, #2
    787c:	3007      	adds	r0, #7
    787e:	4f11      	ldr	r7, [pc, #68]	; (78c4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>)
    7880:	47b8      	blx	r7
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);
    7882:	68a3      	ldr	r3, [r4, #8]
    7884:	444b      	add	r3, r9
    7886:	6858      	ldr	r0, [r3, #4]
    7888:	b2f2      	uxtb	r2, r6
    788a:	2102      	movs	r1, #2
    788c:	3009      	adds	r0, #9
    788e:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1);
    7890:	4629      	mov	r1, r5
    7892:	4620      	mov	r0, r4
    7894:	f8df 8030 	ldr.w	r8, [pc, #48]	; 78c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d8>
    7898:	47c0      	blx	r8
			uint8_t actuator = 2*value;
    789a:	0072      	lsls	r2, r6, #1
			grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1 + 12].payload[9], 2, actuator);		
    789c:	68a3      	ldr	r3, [r4, #8]
    789e:	444b      	add	r3, r9
    78a0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    78a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    78a8:	2102      	movs	r1, #2
    78aa:	3009      	adds	r0, #9
    78ac:	47b8      	blx	r7
			grid_report_ui_set_changed_flag(mod, adc_index_1 + 12);
    78ae:	f105 010c 	add.w	r1, r5, #12
    78b2:	b2c9      	uxtb	r1, r1
    78b4:	4620      	mov	r0, r4
    78b6:	47c0      	blx	r8
    78b8:	e769      	b.n	778e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x29e>
    78ba:	bf00      	nop
    78bc:	000058f1 	.word	0x000058f1
    78c0:	20003270 	.word	0x20003270
    78c4:	00008201 	.word	0x00008201
    78c8:	0000893f 	.word	0x0000893f

000078cc <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    78cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    78ce:	4f0b      	ldr	r7, [pc, #44]	; (78fc <grid_module_pbf4_reva_hardware_init+0x30>)
    78d0:	4c0b      	ldr	r4, [pc, #44]	; (7900 <grid_module_pbf4_reva_hardware_init+0x34>)
    78d2:	463b      	mov	r3, r7
    78d4:	2200      	movs	r2, #0
    78d6:	4611      	mov	r1, r2
    78d8:	4620      	mov	r0, r4
    78da:	4e0a      	ldr	r6, [pc, #40]	; (7904 <grid_module_pbf4_reva_hardware_init+0x38>)
    78dc:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    78de:	4d0a      	ldr	r5, [pc, #40]	; (7908 <grid_module_pbf4_reva_hardware_init+0x3c>)
    78e0:	463b      	mov	r3, r7
    78e2:	2200      	movs	r2, #0
    78e4:	4611      	mov	r1, r2
    78e6:	4628      	mov	r0, r5
    78e8:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    78ea:	2100      	movs	r1, #0
    78ec:	4620      	mov	r0, r4
    78ee:	4c07      	ldr	r4, [pc, #28]	; (790c <grid_module_pbf4_reva_hardware_init+0x40>)
    78f0:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    78f2:	2100      	movs	r1, #0
    78f4:	4628      	mov	r0, r5
    78f6:	47a0      	blx	r4
    78f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78fa:	bf00      	nop
    78fc:	000074f1 	.word	0x000074f1
    7900:	20000fc8 	.word	0x20000fc8
    7904:	00008f35 	.word	0x00008f35
    7908:	2000119c 	.word	0x2000119c
    790c:	00008f25 	.word	0x00008f25

00007910 <grid_module_pbf4_reva_init>:
}




void grid_module_pbf4_reva_init(struct grid_ui_model* mod){
    7910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7914:	b090      	sub	sp, #64	; 0x40
    7916:	4680      	mov	r8, r0
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    7918:	2307      	movs	r3, #7
    791a:	220e      	movs	r2, #14
    791c:	2105      	movs	r1, #5
    791e:	2010      	movs	r0, #16
    7920:	4c33      	ldr	r4, [pc, #204]	; (79f0 <grid_module_pbf4_reva_init+0xe0>)
    7922:	47a0      	blx	r4

	grid_led_init(&grid_led_state, 12);
    7924:	210c      	movs	r1, #12
    7926:	4833      	ldr	r0, [pc, #204]	; (79f4 <grid_module_pbf4_reva_init+0xe4>)
    7928:	4b33      	ldr	r3, [pc, #204]	; (79f8 <grid_module_pbf4_reva_init+0xe8>)
    792a:	4798      	blx	r3
	
	grid_ui_model_init(mod, 24);
    792c:	2118      	movs	r1, #24
    792e:	4640      	mov	r0, r8
    7930:	4b32      	ldr	r3, [pc, #200]	; (79fc <grid_module_pbf4_reva_init+0xec>)
    7932:	4798      	blx	r3
    7934:	2500      	movs	r5, #0
	
	for(uint8_t i=0; i<24; i++){
		
		uint8_t payload_template[30] = {0};
    7936:	462c      	mov	r4, r5
    7938:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 7a1c <grid_module_pbf4_reva_init+0x10c>
    793c:	e034      	b.n	79a8 <grid_module_pbf4_reva_init+0x98>
		
		if (i<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
			
			type = GRID_REPORT_TYPE_BROADCAST;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    793e:	2303      	movs	r3, #3
    7940:	9304      	str	r3, [sp, #16]
    7942:	9403      	str	r4, [sp, #12]
    7944:	9502      	str	r5, [sp, #8]
    7946:	23b0      	movs	r3, #176	; 0xb0
    7948:	9301      	str	r3, [sp, #4]
    794a:	9400      	str	r4, [sp, #0]
    794c:	4623      	mov	r3, r4
    794e:	2202      	movs	r2, #2
    7950:	492b      	ldr	r1, [pc, #172]	; (7a00 <grid_module_pbf4_reva_init+0xf0>)
    7952:	a808      	add	r0, sp, #32
    7954:	4f2b      	ldr	r7, [pc, #172]	; (7a04 <grid_module_pbf4_reva_init+0xf4>)
    7956:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    7958:	2702      	movs	r7, #2
    795a:	e00f      	b.n	797c <grid_module_pbf4_reva_init+0x6c>
		}
		else{ // LED -> Grid LED
			
			type = GRID_REPORT_TYPE_LOCAL;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    795c:	2303      	movs	r3, #3
    795e:	9304      	str	r3, [sp, #16]
    7960:	9403      	str	r4, [sp, #12]
    7962:	f1a5 020c 	sub.w	r2, r5, #12
    7966:	9202      	str	r2, [sp, #8]
    7968:	2263      	movs	r2, #99	; 0x63
    796a:	9201      	str	r2, [sp, #4]
    796c:	2701      	movs	r7, #1
    796e:	9700      	str	r7, [sp, #0]
    7970:	2202      	movs	r2, #2
    7972:	4923      	ldr	r1, [pc, #140]	; (7a00 <grid_module_pbf4_reva_init+0xf0>)
    7974:	a808      	add	r0, sp, #32
    7976:	f8df a08c 	ldr.w	sl, [pc, #140]	; 7a04 <grid_module_pbf4_reva_init+0xf4>
    797a:	47d0      	blx	sl

			);			
		}

		
		uint8_t payload_length = strlen(payload_template);
    797c:	a808      	add	r0, sp, #32
    797e:	4b22      	ldr	r3, [pc, #136]	; (7a08 <grid_module_pbf4_reva_init+0xf8>)
    7980:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    7982:	f88d 401c 	strb.w	r4, [sp, #28]
		helper_template[1] = 0;
    7986:	f88d 401d 	strb.w	r4, [sp, #29]
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    798a:	2302      	movs	r3, #2
    798c:	9302      	str	r3, [sp, #8]
    798e:	ab07      	add	r3, sp, #28
    7990:	9301      	str	r3, [sp, #4]
    7992:	b2c0      	uxtb	r0, r0
    7994:	9000      	str	r0, [sp, #0]
    7996:	ab08      	add	r3, sp, #32
    7998:	463a      	mov	r2, r7
    799a:	4631      	mov	r1, r6
    799c:	4640      	mov	r0, r8
    799e:	4e1b      	ldr	r6, [pc, #108]	; (7a0c <grid_module_pbf4_reva_init+0xfc>)
    79a0:	47b0      	blx	r6
    79a2:	3501      	adds	r5, #1
	for(uint8_t i=0; i<24; i++){
    79a4:	2d18      	cmp	r5, #24
    79a6:	d018      	beq.n	79da <grid_module_pbf4_reva_init+0xca>
    79a8:	b2ee      	uxtb	r6, r5
		uint8_t payload_template[30] = {0};
    79aa:	221e      	movs	r2, #30
    79ac:	4621      	mov	r1, r4
    79ae:	a808      	add	r0, sp, #32
    79b0:	47c8      	blx	r9
		if (i<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
    79b2:	2e07      	cmp	r6, #7
    79b4:	d9c3      	bls.n	793e <grid_module_pbf4_reva_init+0x2e>
		else if (i<12){ // BUTTONS -> MIDI Note On/Off
    79b6:	2e0b      	cmp	r6, #11
    79b8:	d8d0      	bhi.n	795c <grid_module_pbf4_reva_init+0x4c>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    79ba:	2303      	movs	r3, #3
    79bc:	9304      	str	r3, [sp, #16]
    79be:	9403      	str	r4, [sp, #12]
    79c0:	1d2b      	adds	r3, r5, #4
    79c2:	9302      	str	r3, [sp, #8]
    79c4:	2390      	movs	r3, #144	; 0x90
    79c6:	9301      	str	r3, [sp, #4]
    79c8:	9400      	str	r4, [sp, #0]
    79ca:	4623      	mov	r3, r4
    79cc:	2202      	movs	r2, #2
    79ce:	490c      	ldr	r1, [pc, #48]	; (7a00 <grid_module_pbf4_reva_init+0xf0>)
    79d0:	a808      	add	r0, sp, #32
    79d2:	4f0c      	ldr	r7, [pc, #48]	; (7a04 <grid_module_pbf4_reva_init+0xf4>)
    79d4:	47b8      	blx	r7
			type = GRID_REPORT_TYPE_BROADCAST;
    79d6:	2702      	movs	r7, #2
    79d8:	e7d0      	b.n	797c <grid_module_pbf4_reva_init+0x6c>
		
	}
	
	grid_report_sys_init(mod);
    79da:	4640      	mov	r0, r8
    79dc:	4b0c      	ldr	r3, [pc, #48]	; (7a10 <grid_module_pbf4_reva_init+0x100>)
    79de:	4798      	blx	r3
		
	grid_module_pbf4_reva_hardware_init();
    79e0:	4b0c      	ldr	r3, [pc, #48]	; (7a14 <grid_module_pbf4_reva_init+0x104>)
    79e2:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
    79e4:	4b0c      	ldr	r3, [pc, #48]	; (7a18 <grid_module_pbf4_reva_init+0x108>)
    79e6:	4798      	blx	r3
	
    79e8:	b010      	add	sp, #64	; 0x40
    79ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79ee:	bf00      	nop
    79f0:	00005799 	.word	0x00005799
    79f4:	200077d4 	.word	0x200077d4
    79f8:	00006a89 	.word	0x00006a89
    79fc:	00008635 	.word	0x00008635
    7a00:	000115d8 	.word	0x000115d8
    7a04:	00010325 	.word	0x00010325
    7a08:	0001036d 	.word	0x0001036d
    7a0c:	000086f9 	.word	0x000086f9
    7a10:	0000871d 	.word	0x0000871d
    7a14:	000078cd 	.word	0x000078cd
    7a18:	000074d5 	.word	0x000074d5
    7a1c:	0000fec3 	.word	0x0000fec3

00007a20 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    7a20:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    7a22:	4803      	ldr	r0, [pc, #12]	; (7a30 <grid_module_po16_revb_hardware_start_transfer+0x10>)
    7a24:	4c03      	ldr	r4, [pc, #12]	; (7a34 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    7a26:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    7a28:	4803      	ldr	r0, [pc, #12]	; (7a38 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    7a2a:	47a0      	blx	r4
    7a2c:	bd10      	pop	{r4, pc}
    7a2e:	bf00      	nop
    7a30:	20000fc8 	.word	0x20000fc8
    7a34:	00009001 	.word	0x00009001
    7a38:	2000119c 	.word	0x2000119c
    7a3c:	00000000 	.word	0x00000000

00007a40 <grid_module_po16_revb_hardware_transfer_complete_cb>:
}

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    7a40:	4b7b      	ldr	r3, [pc, #492]	; (7c30 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    7a42:	781b      	ldrb	r3, [r3, #0]
    7a44:	2b00      	cmp	r3, #0
    7a46:	f000 8085 	beq.w	7b54 <grid_module_po16_revb_hardware_transfer_complete_cb+0x114>
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    7a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a4e:	b082      	sub	sp, #8
	
	struct grid_ui_model* mod = &grid_ui_state;
		
	/* Read conversion results */
	
	uint16_t adcresult_0 = 0;
    7a50:	2300      	movs	r3, #0
    7a52:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint16_t adcresult_1 = 0;
    7a56:	f8ad 3004 	strh.w	r3, [sp, #4]
	
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    7a5a:	4b75      	ldr	r3, [pc, #468]	; (7c30 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    7a5c:	785a      	ldrb	r2, [r3, #1]
    7a5e:	3208      	adds	r2, #8
    7a60:	4874      	ldr	r0, [pc, #464]	; (7c34 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f4>)
    7a62:	5c85      	ldrb	r5, [r0, r2]
    7a64:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    7a66:	785a      	ldrb	r2, [r3, #1]
    7a68:	b2d2      	uxtb	r2, r2
    7a6a:	5c84      	ldrb	r4, [r0, r2]
    7a6c:	b2e4      	uxtb	r4, r4
	
	/* Update the multiplexer */
	
	grid_module_po16_revb_mux++;
    7a6e:	785a      	ldrb	r2, [r3, #1]
    7a70:	3201      	adds	r2, #1
    7a72:	b2d2      	uxtb	r2, r2
    7a74:	705a      	strb	r2, [r3, #1]
	grid_module_po16_revb_mux%=8;
    7a76:	785a      	ldrb	r2, [r3, #1]
    7a78:	f002 0207 	and.w	r2, r2, #7
    7a7c:	705a      	strb	r2, [r3, #1]
	
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    7a7e:	785b      	ldrb	r3, [r3, #1]
    7a80:	f013 0f01 	tst.w	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    7a88:	4b6b      	ldr	r3, [pc, #428]	; (7c38 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    7a8a:	bf14      	ite	ne
    7a8c:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7a90:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    7a94:	4b66      	ldr	r3, [pc, #408]	; (7c30 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    7a96:	785b      	ldrb	r3, [r3, #1]
    7a98:	f013 0f02 	tst.w	r3, #2
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7a9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7aa0:	4b65      	ldr	r3, [pc, #404]	; (7c38 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    7aa2:	bf14      	ite	ne
    7aa4:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7aa8:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    7aac:	4b60      	ldr	r3, [pc, #384]	; (7c30 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    7aae:	785b      	ldrb	r3, [r3, #1]
    7ab0:	f013 0f04 	tst.w	r3, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ab4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7ab8:	4b5f      	ldr	r3, [pc, #380]	; (7c38 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f8>)
    7aba:	bf14      	ite	ne
    7abc:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7ac0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	
	
	
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    7ac4:	2302      	movs	r3, #2
    7ac6:	f10d 0206 	add.w	r2, sp, #6
    7aca:	2100      	movs	r1, #0
    7acc:	485b      	ldr	r0, [pc, #364]	; (7c3c <grid_module_po16_revb_hardware_transfer_complete_cb+0x1fc>)
    7ace:	4e5c      	ldr	r6, [pc, #368]	; (7c40 <grid_module_po16_revb_hardware_transfer_complete_cb+0x200>)
    7ad0:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    7ad2:	2302      	movs	r3, #2
    7ad4:	aa01      	add	r2, sp, #4
    7ad6:	2100      	movs	r1, #0
    7ad8:	485a      	ldr	r0, [pc, #360]	; (7c44 <grid_module_po16_revb_hardware_transfer_complete_cb+0x204>)
    7ada:	47b0      	blx	r6
	

	// FAKE CALIBRATION
	uint32_t input_0 = adcresult_0*1.03;	
    7adc:	f8df a180 	ldr.w	sl, [pc, #384]	; 7c60 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>
    7ae0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7ae4:	47d0      	blx	sl
    7ae6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 7c64 <grid_module_po16_revb_hardware_transfer_complete_cb+0x224>
    7aea:	a34f      	add	r3, pc, #316	; (adr r3, 7c28 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    7aec:	e9d3 2300 	ldrd	r2, r3, [r3]
    7af0:	47c8      	blx	r9
    7af2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 7c68 <grid_module_po16_revb_hardware_transfer_complete_cb+0x228>
    7af6:	47c0      	blx	r8
    7af8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    7afc:	42b0      	cmp	r0, r6
    7afe:	bf28      	it	cs
    7b00:	4630      	movcs	r0, r6
    7b02:	4607      	mov	r7, r0
	if (input_0 > (1<<16)-1){
		input_0 = (1<<16)-1;
	}
	adcresult_0 = input_0;
    7b04:	f8ad 0006 	strh.w	r0, [sp, #6]
	
	uint32_t input_1 = adcresult_1*1.03;	
    7b08:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    7b0c:	47d0      	blx	sl
    7b0e:	a346      	add	r3, pc, #280	; (adr r3, 7c28 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1e8>)
    7b10:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b14:	47c8      	blx	r9
    7b16:	47c0      	blx	r8
	if (input_1 > (1<<16)-1){
		input_1 = (1<<16)-1;
	}
	adcresult_1 = input_1;
    7b18:	42b0      	cmp	r0, r6
    7b1a:	bf28      	it	cs
    7b1c:	4630      	movcs	r0, r6
    7b1e:	f8ad 0004 	strh.w	r0, [sp, #4]


	grid_ain_add_sample(adc_index_0, adcresult_0);
    7b22:	b2b9      	uxth	r1, r7
    7b24:	4628      	mov	r0, r5
    7b26:	4e48      	ldr	r6, [pc, #288]	; (7c48 <grid_module_po16_revb_hardware_transfer_complete_cb+0x208>)
    7b28:	47b0      	blx	r6
	grid_ain_add_sample(adc_index_1, adcresult_1);
    7b2a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7b2e:	4620      	mov	r0, r4
    7b30:	47b0      	blx	r6

	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_0)){
    7b32:	4628      	mov	r0, r5
    7b34:	4b45      	ldr	r3, [pc, #276]	; (7c4c <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>)
    7b36:	4798      	blx	r3
    7b38:	b990      	cbnz	r0, 7b60 <grid_module_po16_revb_hardware_transfer_complete_cb+0x120>
	//CRITICAL_SECTION_LEAVE()
	
	
	//CRITICAL_SECTION_ENTER()

	if (grid_ain_get_changed(adc_index_1)){
    7b3a:	4620      	mov	r0, r4
    7b3c:	4b43      	ldr	r3, [pc, #268]	; (7c4c <grid_module_po16_revb_hardware_transfer_complete_cb+0x20c>)
    7b3e:	4798      	blx	r3
    7b40:	2800      	cmp	r0, #0
    7b42:	d13f      	bne.n	7bc4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x184>
	}
	
	//CRITICAL_SECTION_LEAVE()
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
    7b44:	2200      	movs	r2, #0
    7b46:	4b3a      	ldr	r3, [pc, #232]	; (7c30 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    7b48:	701a      	strb	r2, [r3, #0]
	grid_module_po16_revb_hardware_start_transfer();
    7b4a:	4b41      	ldr	r3, [pc, #260]	; (7c50 <grid_module_po16_revb_hardware_transfer_complete_cb+0x210>)
    7b4c:	4798      	blx	r3
}
    7b4e:	b002      	add	sp, #8
    7b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_module_po16_revb_hardware_transfer_complete++;
    7b54:	4a36      	ldr	r2, [pc, #216]	; (7c30 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1f0>)
    7b56:	7813      	ldrb	r3, [r2, #0]
    7b58:	3301      	adds	r3, #1
    7b5a:	b2db      	uxtb	r3, r3
    7b5c:	7013      	strb	r3, [r2, #0]
    7b5e:	4770      	bx	lr
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    7b60:	2107      	movs	r1, #7
    7b62:	4628      	mov	r0, r5
    7b64:	4b3b      	ldr	r3, [pc, #236]	; (7c54 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>)
    7b66:	4798      	blx	r3
    7b68:	4681      	mov	r9, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[7], 2, adc_index_0);
    7b6a:	012f      	lsls	r7, r5, #4
    7b6c:	4e3a      	ldr	r6, [pc, #232]	; (7c58 <grid_module_po16_revb_hardware_transfer_complete_cb+0x218>)
    7b6e:	68b3      	ldr	r3, [r6, #8]
    7b70:	443b      	add	r3, r7
    7b72:	6858      	ldr	r0, [r3, #4]
    7b74:	462a      	mov	r2, r5
    7b76:	2102      	movs	r1, #2
    7b78:	3007      	adds	r0, #7
    7b7a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 7c5c <grid_module_po16_revb_hardware_transfer_complete_cb+0x21c>
    7b7e:	47c0      	blx	r8
    7b80:	fa5f fa89 	uxtb.w	sl, r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0].payload[9], 2, value);	
    7b84:	68b3      	ldr	r3, [r6, #8]
    7b86:	443b      	add	r3, r7
    7b88:	6858      	ldr	r0, [r3, #4]
    7b8a:	4652      	mov	r2, sl
    7b8c:	2102      	movs	r1, #2
    7b8e:	3009      	adds	r0, #9
    7b90:	47c0      	blx	r8
		mod->report_ui_array[adc_index_0].helper[0] = value;
    7b92:	68b3      	ldr	r3, [r6, #8]
    7b94:	443b      	add	r3, r7
    7b96:	68db      	ldr	r3, [r3, #12]
		uint8_t value = grid_ain_get_average(adc_index_0, 7);	
    7b98:	f883 9000 	strb.w	r9, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_0);
    7b9c:	4629      	mov	r1, r5
    7b9e:	4630      	mov	r0, r6
    7ba0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7c6c <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>
    7ba4:	47c8      	blx	r9
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_0+16].payload[9], 2, value*2);
    7ba6:	68b3      	ldr	r3, [r6, #8]
    7ba8:	441f      	add	r7, r3
    7baa:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
    7bae:	ea4f 024a 	mov.w	r2, sl, lsl #1
    7bb2:	2102      	movs	r1, #2
    7bb4:	3009      	adds	r0, #9
    7bb6:	47c0      	blx	r8
		grid_report_ui_set_changed_flag(mod, adc_index_0+16);
    7bb8:	f105 0110 	add.w	r1, r5, #16
    7bbc:	b2c9      	uxtb	r1, r1
    7bbe:	4630      	mov	r0, r6
    7bc0:	47c8      	blx	r9
    7bc2:	e7ba      	b.n	7b3a <grid_module_po16_revb_hardware_transfer_complete_cb+0xfa>
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    7bc4:	2107      	movs	r1, #7
    7bc6:	4620      	mov	r0, r4
    7bc8:	4b22      	ldr	r3, [pc, #136]	; (7c54 <grid_module_po16_revb_hardware_transfer_complete_cb+0x214>)
    7bca:	4798      	blx	r3
    7bcc:	4680      	mov	r8, r0
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[7], 2, adc_index_1);
    7bce:	0126      	lsls	r6, r4, #4
    7bd0:	4d21      	ldr	r5, [pc, #132]	; (7c58 <grid_module_po16_revb_hardware_transfer_complete_cb+0x218>)
    7bd2:	68ab      	ldr	r3, [r5, #8]
    7bd4:	4433      	add	r3, r6
    7bd6:	6858      	ldr	r0, [r3, #4]
    7bd8:	4622      	mov	r2, r4
    7bda:	2102      	movs	r1, #2
    7bdc:	3007      	adds	r0, #7
    7bde:	4f1f      	ldr	r7, [pc, #124]	; (7c5c <grid_module_po16_revb_hardware_transfer_complete_cb+0x21c>)
    7be0:	47b8      	blx	r7
    7be2:	fa5f f988 	uxtb.w	r9, r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1].payload[9], 2, value);		
    7be6:	68ab      	ldr	r3, [r5, #8]
    7be8:	4433      	add	r3, r6
    7bea:	6858      	ldr	r0, [r3, #4]
    7bec:	464a      	mov	r2, r9
    7bee:	2102      	movs	r1, #2
    7bf0:	3009      	adds	r0, #9
    7bf2:	47b8      	blx	r7
		mod->report_ui_array[adc_index_1].helper[0] = value;
    7bf4:	68ab      	ldr	r3, [r5, #8]
    7bf6:	4433      	add	r3, r6
    7bf8:	68db      	ldr	r3, [r3, #12]
		uint8_t value = grid_ain_get_average(adc_index_1, 7);
    7bfa:	f883 8000 	strb.w	r8, [r3]
		grid_report_ui_set_changed_flag(mod, adc_index_1);
    7bfe:	4621      	mov	r1, r4
    7c00:	4628      	mov	r0, r5
    7c02:	f8df 8068 	ldr.w	r8, [pc, #104]	; 7c6c <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>
    7c06:	47c0      	blx	r8
		grid_sys_write_hex_string_value(&mod->report_ui_array[adc_index_1+16].payload[9], 2, value*2);
    7c08:	68ab      	ldr	r3, [r5, #8]
    7c0a:	441e      	add	r6, r3
    7c0c:	f8d6 0104 	ldr.w	r0, [r6, #260]	; 0x104
    7c10:	ea4f 0249 	mov.w	r2, r9, lsl #1
    7c14:	2102      	movs	r1, #2
    7c16:	3009      	adds	r0, #9
    7c18:	47b8      	blx	r7
		grid_report_ui_set_changed_flag(mod, adc_index_1+16);
    7c1a:	f104 0110 	add.w	r1, r4, #16
    7c1e:	b2c9      	uxtb	r1, r1
    7c20:	4628      	mov	r0, r5
    7c22:	47c0      	blx	r8
    7c24:	e78e      	b.n	7b44 <grid_module_po16_revb_hardware_transfer_complete_cb+0x104>
    7c26:	bf00      	nop
    7c28:	47ae147b 	.word	0x47ae147b
    7c2c:	3ff07ae1 	.word	0x3ff07ae1
    7c30:	20000646 	.word	0x20000646
    7c34:	20000344 	.word	0x20000344
    7c38:	41008000 	.word	0x41008000
    7c3c:	20000fc8 	.word	0x20000fc8
    7c40:	00008f71 	.word	0x00008f71
    7c44:	2000119c 	.word	0x2000119c
    7c48:	000057e5 	.word	0x000057e5
    7c4c:	000058e1 	.word	0x000058e1
    7c50:	00007a21 	.word	0x00007a21
    7c54:	000058f1 	.word	0x000058f1
    7c58:	20003270 	.word	0x20003270
    7c5c:	00008201 	.word	0x00008201
    7c60:	0000f925 	.word	0x0000f925
    7c64:	0000f9f1 	.word	0x0000f9f1
    7c68:	0000fe15 	.word	0x0000fe15
    7c6c:	0000893f 	.word	0x0000893f

00007c70 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    7c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    7c72:	4f0b      	ldr	r7, [pc, #44]	; (7ca0 <grid_module_po16_revb_hardware_init+0x30>)
    7c74:	4c0b      	ldr	r4, [pc, #44]	; (7ca4 <grid_module_po16_revb_hardware_init+0x34>)
    7c76:	463b      	mov	r3, r7
    7c78:	2200      	movs	r2, #0
    7c7a:	4611      	mov	r1, r2
    7c7c:	4620      	mov	r0, r4
    7c7e:	4e0a      	ldr	r6, [pc, #40]	; (7ca8 <grid_module_po16_revb_hardware_init+0x38>)
    7c80:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    7c82:	4d0a      	ldr	r5, [pc, #40]	; (7cac <grid_module_po16_revb_hardware_init+0x3c>)
    7c84:	463b      	mov	r3, r7
    7c86:	2200      	movs	r2, #0
    7c88:	4611      	mov	r1, r2
    7c8a:	4628      	mov	r0, r5
    7c8c:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    7c8e:	2100      	movs	r1, #0
    7c90:	4620      	mov	r0, r4
    7c92:	4c07      	ldr	r4, [pc, #28]	; (7cb0 <grid_module_po16_revb_hardware_init+0x40>)
    7c94:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    7c96:	2100      	movs	r1, #0
    7c98:	4628      	mov	r0, r5
    7c9a:	47a0      	blx	r4
    7c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c9e:	bf00      	nop
    7ca0:	00007a41 	.word	0x00007a41
    7ca4:	20000fc8 	.word	0x20000fc8
    7ca8:	00008f35 	.word	0x00008f35
    7cac:	2000119c 	.word	0x2000119c
    7cb0:	00008f25 	.word	0x00008f25

00007cb4 <grid_module_po16_revb_init>:
}




void grid_module_po16_revb_init(struct grid_ui_model* mod){
    7cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cb8:	b090      	sub	sp, #64	; 0x40
    7cba:	4680      	mov	r8, r0
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    7cbc:	2307      	movs	r3, #7
    7cbe:	220e      	movs	r2, #14
    7cc0:	2105      	movs	r1, #5
    7cc2:	2010      	movs	r0, #16
    7cc4:	4c2a      	ldr	r4, [pc, #168]	; (7d70 <grid_module_po16_revb_init+0xbc>)
    7cc6:	47a0      	blx	r4
	grid_led_init(&grid_led_state, 16);
    7cc8:	2110      	movs	r1, #16
    7cca:	482a      	ldr	r0, [pc, #168]	; (7d74 <grid_module_po16_revb_init+0xc0>)
    7ccc:	4b2a      	ldr	r3, [pc, #168]	; (7d78 <grid_module_po16_revb_init+0xc4>)
    7cce:	4798      	blx	r3
	
	grid_ui_model_init(mod, 32);
    7cd0:	2120      	movs	r1, #32
    7cd2:	4640      	mov	r0, r8
    7cd4:	4b29      	ldr	r3, [pc, #164]	; (7d7c <grid_module_po16_revb_init+0xc8>)
    7cd6:	4798      	blx	r3
    7cd8:	2400      	movs	r4, #0
	
	
	for(uint8_t i=0; i<32; i++){
			
		uint8_t payload_template[30] = {0};
    7cda:	4625      	mov	r5, r4
    7cdc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7d9c <grid_module_po16_revb_init+0xe8>
    7ce0:	e025      	b.n	7d2e <grid_module_po16_revb_init+0x7a>
		}
		else{ // LED
			
			type = GRID_REPORT_TYPE_LOCAL;
			
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    7ce2:	2303      	movs	r3, #3
    7ce4:	9304      	str	r3, [sp, #16]
    7ce6:	9503      	str	r5, [sp, #12]
    7ce8:	f1a4 0210 	sub.w	r2, r4, #16
    7cec:	9202      	str	r2, [sp, #8]
    7cee:	2263      	movs	r2, #99	; 0x63
    7cf0:	9201      	str	r2, [sp, #4]
    7cf2:	2601      	movs	r6, #1
    7cf4:	9600      	str	r6, [sp, #0]
    7cf6:	2202      	movs	r2, #2
    7cf8:	4921      	ldr	r1, [pc, #132]	; (7d80 <grid_module_po16_revb_init+0xcc>)
    7cfa:	a808      	add	r0, sp, #32
    7cfc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 7d8c <grid_module_po16_revb_init+0xd8>
    7d00:	47d0      	blx	sl

			
		

		
		uint8_t payload_length = strlen(payload_template);
    7d02:	a808      	add	r0, sp, #32
    7d04:	4b1f      	ldr	r3, [pc, #124]	; (7d84 <grid_module_po16_revb_init+0xd0>)
    7d06:	4798      	blx	r3

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    7d08:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    7d0c:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
		grid_report_ui_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    7d10:	2302      	movs	r3, #2
    7d12:	9302      	str	r3, [sp, #8]
    7d14:	ab07      	add	r3, sp, #28
    7d16:	9301      	str	r3, [sp, #4]
    7d18:	b2c0      	uxtb	r0, r0
    7d1a:	9000      	str	r0, [sp, #0]
    7d1c:	ab08      	add	r3, sp, #32
    7d1e:	4632      	mov	r2, r6
    7d20:	4639      	mov	r1, r7
    7d22:	4640      	mov	r0, r8
    7d24:	4e18      	ldr	r6, [pc, #96]	; (7d88 <grid_module_po16_revb_init+0xd4>)
    7d26:	47b0      	blx	r6
    7d28:	3401      	adds	r4, #1
	for(uint8_t i=0; i<32; i++){
    7d2a:	2c20      	cmp	r4, #32
    7d2c:	d015      	beq.n	7d5a <grid_module_po16_revb_init+0xa6>
    7d2e:	b2e7      	uxtb	r7, r4
		uint8_t payload_template[30] = {0};
    7d30:	221e      	movs	r2, #30
    7d32:	4629      	mov	r1, r5
    7d34:	a808      	add	r0, sp, #32
    7d36:	47c8      	blx	r9
		if (i<16){ // Control Change
    7d38:	2f0f      	cmp	r7, #15
    7d3a:	d8d2      	bhi.n	7ce2 <grid_module_po16_revb_init+0x2e>
			sprintf(payload_template, "%c%02x%02x%02x%02x%02x%c",
    7d3c:	2303      	movs	r3, #3
    7d3e:	9304      	str	r3, [sp, #16]
    7d40:	9503      	str	r5, [sp, #12]
    7d42:	9402      	str	r4, [sp, #8]
    7d44:	23b0      	movs	r3, #176	; 0xb0
    7d46:	9301      	str	r3, [sp, #4]
    7d48:	9500      	str	r5, [sp, #0]
    7d4a:	462b      	mov	r3, r5
    7d4c:	2202      	movs	r2, #2
    7d4e:	490c      	ldr	r1, [pc, #48]	; (7d80 <grid_module_po16_revb_init+0xcc>)
    7d50:	a808      	add	r0, sp, #32
    7d52:	4e0e      	ldr	r6, [pc, #56]	; (7d8c <grid_module_po16_revb_init+0xd8>)
    7d54:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    7d56:	2602      	movs	r6, #2
    7d58:	e7d3      	b.n	7d02 <grid_module_po16_revb_init+0x4e>
		
	}
	
	grid_report_sys_init(mod);
    7d5a:	4640      	mov	r0, r8
    7d5c:	4b0c      	ldr	r3, [pc, #48]	; (7d90 <grid_module_po16_revb_init+0xdc>)
    7d5e:	4798      	blx	r3
		
	

	
	grid_module_po16_revb_hardware_init();
    7d60:	4b0c      	ldr	r3, [pc, #48]	; (7d94 <grid_module_po16_revb_init+0xe0>)
    7d62:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
    7d64:	4b0c      	ldr	r3, [pc, #48]	; (7d98 <grid_module_po16_revb_init+0xe4>)
    7d66:	4798      	blx	r3
	
    7d68:	b010      	add	sp, #64	; 0x40
    7d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d6e:	bf00      	nop
    7d70:	00005799 	.word	0x00005799
    7d74:	200077d4 	.word	0x200077d4
    7d78:	00006a89 	.word	0x00006a89
    7d7c:	00008635 	.word	0x00008635
    7d80:	000115d8 	.word	0x000115d8
    7d84:	0001036d 	.word	0x0001036d
    7d88:	000086f9 	.word	0x000086f9
    7d8c:	00010325 	.word	0x00010325
    7d90:	0000871d 	.word	0x0000871d
    7d94:	00007c71 	.word	0x00007c71
    7d98:	00007a21 	.word	0x00007a21
    7d9c:	0000fec3 	.word	0x0000fec3

00007da0 <tx_cb_USART_GRID>:
}

void tx_cb_USART_GRID(struct grid_port* const por){
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    7da0:	8a02      	ldrh	r2, [r0, #16]
    7da2:	b142      	cbz	r2, 7db6 <tx_cb_USART_GRID+0x16>
    7da4:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    7da8:	322f      	adds	r2, #47	; 0x2f
    7daa:	4402      	add	r2, r0
		por->tx_double_buffer[i] = 0;
    7dac:	2100      	movs	r1, #0
    7dae:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    7db2:	4293      	cmp	r3, r2
    7db4:	d1fb      	bne.n	7dae <tx_cb_USART_GRID+0xe>
	}
	por->tx_double_buffer_status = 0;	
    7db6:	2300      	movs	r3, #0
    7db8:	8203      	strh	r3, [r0, #16]
    7dba:	4770      	bx	lr

00007dbc <tx_cb_USART_GRID_W>:
{
    7dbc:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_W);
    7dbe:	4802      	ldr	r0, [pc, #8]	; (7dc8 <tx_cb_USART_GRID_W+0xc>)
    7dc0:	4b02      	ldr	r3, [pc, #8]	; (7dcc <tx_cb_USART_GRID_W+0x10>)
    7dc2:	4798      	blx	r3
    7dc4:	bd08      	pop	{r3, pc}
    7dc6:	bf00      	nop
    7dc8:	20003730 	.word	0x20003730
    7dcc:	00007da1 	.word	0x00007da1

00007dd0 <tx_cb_USART_GRID_S>:
{
    7dd0:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_S);
    7dd2:	4802      	ldr	r0, [pc, #8]	; (7ddc <tx_cb_USART_GRID_S+0xc>)
    7dd4:	4b02      	ldr	r3, [pc, #8]	; (7de0 <tx_cb_USART_GRID_S+0x10>)
    7dd6:	4798      	blx	r3
    7dd8:	bd08      	pop	{r3, pc}
    7dda:	bf00      	nop
    7ddc:	2000474c 	.word	0x2000474c
    7de0:	00007da1 	.word	0x00007da1

00007de4 <tx_cb_USART_GRID_E>:
{
    7de4:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_E);
    7de6:	4802      	ldr	r0, [pc, #8]	; (7df0 <tx_cb_USART_GRID_E+0xc>)
    7de8:	4b02      	ldr	r3, [pc, #8]	; (7df4 <tx_cb_USART_GRID_E+0x10>)
    7dea:	4798      	blx	r3
    7dec:	bd08      	pop	{r3, pc}
    7dee:	bf00      	nop
    7df0:	20006760 	.word	0x20006760
    7df4:	00007da1 	.word	0x00007da1

00007df8 <tx_cb_USART_GRID_N>:
{
    7df8:	b508      	push	{r3, lr}
	tx_cb_USART_GRID(&GRID_PORT_N);
    7dfa:	4802      	ldr	r0, [pc, #8]	; (7e04 <tx_cb_USART_GRID_N+0xc>)
    7dfc:	4b02      	ldr	r3, [pc, #8]	; (7e08 <tx_cb_USART_GRID_N+0x10>)
    7dfe:	4798      	blx	r3
    7e00:	bd08      	pop	{r3, pc}
    7e02:	bf00      	nop
    7e04:	2000121c 	.word	0x2000121c
    7e08:	00007da1 	.word	0x00007da1

00007e0c <err_cb_USART_GRID>:
{
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
    7e0c:	b508      	push	{r3, lr}
	por->usart_error_flag = 1;	
    7e0e:	2301      	movs	r3, #1
    7e10:	7703      	strb	r3, [r0, #28]
	
	usart_async_disable(por->usart);
    7e12:	6880      	ldr	r0, [r0, #8]
    7e14:	4b01      	ldr	r3, [pc, #4]	; (7e1c <err_cb_USART_GRID+0x10>)
    7e16:	4798      	blx	r3
    7e18:	bd08      	pop	{r3, pc}
    7e1a:	bf00      	nop
    7e1c:	0000981d 	.word	0x0000981d

00007e20 <err_cb_USART_GRID_W>:
{
    7e20:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_W);
    7e22:	4802      	ldr	r0, [pc, #8]	; (7e2c <err_cb_USART_GRID_W+0xc>)
    7e24:	4b02      	ldr	r3, [pc, #8]	; (7e30 <err_cb_USART_GRID_W+0x10>)
    7e26:	4798      	blx	r3
    7e28:	bd08      	pop	{r3, pc}
    7e2a:	bf00      	nop
    7e2c:	20003730 	.word	0x20003730
    7e30:	00007e0d 	.word	0x00007e0d

00007e34 <err_cb_USART_GRID_S>:
{
    7e34:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_S);
    7e36:	4802      	ldr	r0, [pc, #8]	; (7e40 <err_cb_USART_GRID_S+0xc>)
    7e38:	4b02      	ldr	r3, [pc, #8]	; (7e44 <err_cb_USART_GRID_S+0x10>)
    7e3a:	4798      	blx	r3
    7e3c:	bd08      	pop	{r3, pc}
    7e3e:	bf00      	nop
    7e40:	2000474c 	.word	0x2000474c
    7e44:	00007e0d 	.word	0x00007e0d

00007e48 <err_cb_USART_GRID_E>:
{
    7e48:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_E);
    7e4a:	4802      	ldr	r0, [pc, #8]	; (7e54 <err_cb_USART_GRID_E+0xc>)
    7e4c:	4b02      	ldr	r3, [pc, #8]	; (7e58 <err_cb_USART_GRID_E+0x10>)
    7e4e:	4798      	blx	r3
    7e50:	bd08      	pop	{r3, pc}
    7e52:	bf00      	nop
    7e54:	20006760 	.word	0x20006760
    7e58:	00007e0d 	.word	0x00007e0d

00007e5c <err_cb_USART_GRID_N>:
{
    7e5c:	b508      	push	{r3, lr}
	err_cb_USART_GRID(&GRID_PORT_N);
    7e5e:	4802      	ldr	r0, [pc, #8]	; (7e68 <err_cb_USART_GRID_N+0xc>)
    7e60:	4b02      	ldr	r3, [pc, #8]	; (7e6c <err_cb_USART_GRID_N+0x10>)
    7e62:	4798      	blx	r3
    7e64:	bd08      	pop	{r3, pc}
    7e66:	bf00      	nop
    7e68:	2000121c 	.word	0x2000121c
    7e6c:	00007e0d 	.word	0x00007e0d

00007e70 <grid_sys_port_reset_dma>:
#define DMA_NORTH_RX_CHANNEL	0
#define DMA_EAST_RX_CHANNEL		1
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
    7e70:	b508      	push	{r3, lr}
    7e72:	7b83      	ldrb	r3, [r0, #14]
    7e74:	011b      	lsls	r3, r3, #4
    7e76:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    7e7a:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    7e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7e80:	f022 0202 	bic.w	r2, r2, #2
    7e84:	641a      	str	r2, [r3, #64]	; 0x40
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
	_dma_enable_transaction(por->dma_channel, false);
    7e86:	2100      	movs	r1, #0
    7e88:	7b80      	ldrb	r0, [r0, #14]
    7e8a:	4b01      	ldr	r3, [pc, #4]	; (7e90 <grid_sys_port_reset_dma+0x20>)
    7e8c:	4798      	blx	r3
    7e8e:	bd08      	pop	{r3, pc}
    7e90:	0000a649 	.word	0x0000a649

00007e94 <dma_transfer_complete_w_cb>:
void dma_transfer_complete_w_cb(struct _dma_resource *resource){
    7e94:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    7e96:	4802      	ldr	r0, [pc, #8]	; (7ea0 <dma_transfer_complete_w_cb+0xc>)
    7e98:	4b02      	ldr	r3, [pc, #8]	; (7ea4 <dma_transfer_complete_w_cb+0x10>)
    7e9a:	4798      	blx	r3
    7e9c:	bd08      	pop	{r3, pc}
    7e9e:	bf00      	nop
    7ea0:	20003730 	.word	0x20003730
    7ea4:	00007e71 	.word	0x00007e71

00007ea8 <dma_transfer_complete_s_cb>:
void dma_transfer_complete_s_cb(struct _dma_resource *resource){
    7ea8:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    7eaa:	4802      	ldr	r0, [pc, #8]	; (7eb4 <dma_transfer_complete_s_cb+0xc>)
    7eac:	4b02      	ldr	r3, [pc, #8]	; (7eb8 <dma_transfer_complete_s_cb+0x10>)
    7eae:	4798      	blx	r3
    7eb0:	bd08      	pop	{r3, pc}
    7eb2:	bf00      	nop
    7eb4:	2000474c 	.word	0x2000474c
    7eb8:	00007e71 	.word	0x00007e71

00007ebc <dma_transfer_complete_e_cb>:
void dma_transfer_complete_e_cb(struct _dma_resource *resource){
    7ebc:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    7ebe:	4802      	ldr	r0, [pc, #8]	; (7ec8 <dma_transfer_complete_e_cb+0xc>)
    7ec0:	4b02      	ldr	r3, [pc, #8]	; (7ecc <dma_transfer_complete_e_cb+0x10>)
    7ec2:	4798      	blx	r3
    7ec4:	bd08      	pop	{r3, pc}
    7ec6:	bf00      	nop
    7ec8:	20006760 	.word	0x20006760
    7ecc:	00007e71 	.word	0x00007e71

00007ed0 <dma_transfer_complete_n_cb>:
void dma_transfer_complete_n_cb(struct _dma_resource *resource){
    7ed0:	b508      	push	{r3, lr}
	grid_sys_port_reset_dma(por);
    7ed2:	4802      	ldr	r0, [pc, #8]	; (7edc <dma_transfer_complete_n_cb+0xc>)
    7ed4:	4b02      	ldr	r3, [pc, #8]	; (7ee0 <dma_transfer_complete_n_cb+0x10>)
    7ed6:	4798      	blx	r3
    7ed8:	bd08      	pop	{r3, pc}
    7eda:	bf00      	nop
    7edc:	2000121c 	.word	0x2000121c
    7ee0:	00007e71 	.word	0x00007e71

00007ee4 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    7ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7ee8:	4b3e      	ldr	r3, [pc, #248]	; (7fe4 <grid_sys_uart_init+0x100>)
    7eea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    7eee:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    7ef2:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
    7ef6:	f042 0204 	orr.w	r2, r2, #4
    7efa:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7efe:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7f02:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    7f06:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    7f0a:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
    7f0e:	f042 0204 	orr.w	r2, r2, #4
    7f12:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7f16:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7f1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7f1e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    7f22:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
    7f26:	f042 0204 	orr.w	r2, r2, #4
    7f2a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7f2e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    7f32:	f44f 7100 	mov.w	r1, #512	; 0x200
    7f36:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    7f3a:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
    7f3e:	f042 0204 	orr.w	r2, r2, #4
    7f42:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7f46:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    7f4a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8030 <grid_sys_uart_init+0x14c>
    7f4e:	4a26      	ldr	r2, [pc, #152]	; (7fe8 <grid_sys_uart_init+0x104>)
    7f50:	2101      	movs	r1, #1
    7f52:	4640      	mov	r0, r8
    7f54:	4c25      	ldr	r4, [pc, #148]	; (7fec <grid_sys_uart_init+0x108>)
    7f56:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    7f58:	4f25      	ldr	r7, [pc, #148]	; (7ff0 <grid_sys_uart_init+0x10c>)
    7f5a:	4a26      	ldr	r2, [pc, #152]	; (7ff4 <grid_sys_uart_init+0x110>)
    7f5c:	2101      	movs	r1, #1
    7f5e:	4638      	mov	r0, r7
    7f60:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    7f62:	4e25      	ldr	r6, [pc, #148]	; (7ff8 <grid_sys_uart_init+0x114>)
    7f64:	4a25      	ldr	r2, [pc, #148]	; (7ffc <grid_sys_uart_init+0x118>)
    7f66:	2101      	movs	r1, #1
    7f68:	4630      	mov	r0, r6
    7f6a:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    7f6c:	4d24      	ldr	r5, [pc, #144]	; (8000 <grid_sys_uart_init+0x11c>)
    7f6e:	4a25      	ldr	r2, [pc, #148]	; (8004 <grid_sys_uart_init+0x120>)
    7f70:	2101      	movs	r1, #1
    7f72:	4628      	mov	r0, r5
    7f74:	47a0      	blx	r4
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    7f76:	2101      	movs	r1, #1
    7f78:	4640      	mov	r0, r8
    7f7a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8034 <grid_sys_uart_init+0x150>
    7f7e:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    7f80:	2101      	movs	r1, #1
    7f82:	4638      	mov	r0, r7
    7f84:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    7f86:	2101      	movs	r1, #1
    7f88:	4630      	mov	r0, r6
    7f8a:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    7f8c:	2101      	movs	r1, #1
    7f8e:	4628      	mov	r0, r5
    7f90:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    7f92:	4a1d      	ldr	r2, [pc, #116]	; (8008 <grid_sys_uart_init+0x124>)
    7f94:	2102      	movs	r1, #2
    7f96:	4640      	mov	r0, r8
    7f98:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    7f9a:	4a1c      	ldr	r2, [pc, #112]	; (800c <grid_sys_uart_init+0x128>)
    7f9c:	2102      	movs	r1, #2
    7f9e:	4638      	mov	r0, r7
    7fa0:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    7fa2:	4a1b      	ldr	r2, [pc, #108]	; (8010 <grid_sys_uart_init+0x12c>)
    7fa4:	2102      	movs	r1, #2
    7fa6:	4630      	mov	r0, r6
    7fa8:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    7faa:	4a1a      	ldr	r2, [pc, #104]	; (8014 <grid_sys_uart_init+0x130>)
    7fac:	2102      	movs	r1, #2
    7fae:	4628      	mov	r0, r5
    7fb0:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    7fb2:	4919      	ldr	r1, [pc, #100]	; (8018 <grid_sys_uart_init+0x134>)
    7fb4:	4640      	mov	r0, r8
    7fb6:	4c19      	ldr	r4, [pc, #100]	; (801c <grid_sys_uart_init+0x138>)
    7fb8:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    7fba:	4919      	ldr	r1, [pc, #100]	; (8020 <grid_sys_uart_init+0x13c>)
    7fbc:	4638      	mov	r0, r7
    7fbe:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    7fc0:	4918      	ldr	r1, [pc, #96]	; (8024 <grid_sys_uart_init+0x140>)
    7fc2:	4630      	mov	r0, r6
    7fc4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    7fc6:	4918      	ldr	r1, [pc, #96]	; (8028 <grid_sys_uart_init+0x144>)
    7fc8:	4628      	mov	r0, r5
    7fca:	47a0      	blx	r4
	
	usart_async_enable(&USART_NORTH);
    7fcc:	4640      	mov	r0, r8
    7fce:	4c17      	ldr	r4, [pc, #92]	; (802c <grid_sys_uart_init+0x148>)
    7fd0:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    7fd2:	4638      	mov	r0, r7
    7fd4:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    7fd6:	4630      	mov	r0, r6
    7fd8:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    7fda:	4628      	mov	r0, r5
    7fdc:	47a0      	blx	r4
    7fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7fe2:	bf00      	nop
    7fe4:	41008000 	.word	0x41008000
    7fe8:	00007df9 	.word	0x00007df9
    7fec:	00009835 	.word	0x00009835
    7ff0:	20000ff4 	.word	0x20000ff4
    7ff4:	00007de5 	.word	0x00007de5
    7ff8:	2000114c 	.word	0x2000114c
    7ffc:	00007dd1 	.word	0x00007dd1
    8000:	200010fc 	.word	0x200010fc
    8004:	00007dbd 	.word	0x00007dbd
    8008:	00007e5d 	.word	0x00007e5d
    800c:	00007e49 	.word	0x00007e49
    8010:	00007e35 	.word	0x00007e35
    8014:	00007e21 	.word	0x00007e21
    8018:	2000327c 	.word	0x2000327c
    801c:	0000982d 	.word	0x0000982d
    8020:	20004738 	.word	0x20004738
    8024:	20005754 	.word	0x20005754
    8028:	200077fc 	.word	0x200077fc
    802c:	0000980d 	.word	0x0000980d
    8030:	20001048 	.word	0x20001048
    8034:	00009889 	.word	0x00009889

00008038 <grid_sys_dma_rx_init_one>:

}



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    8038:	b5f0      	push	{r4, r5, r6, r7, lr}
    803a:	b083      	sub	sp, #12
    803c:	4605      	mov	r5, r0
    803e:	460f      	mov	r7, r1
    8040:	4616      	mov	r6, r2
	
	
	uint8_t dma_rx_channel = por->dma_channel;
    8042:	7b84      	ldrb	r4, [r0, #14]
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    8044:	6883      	ldr	r3, [r0, #8]
    8046:	6a19      	ldr	r1, [r3, #32]
    8048:	3128      	adds	r1, #40	; 0x28
    804a:	4620      	mov	r0, r4
    804c:	4b0d      	ldr	r3, [pc, #52]	; (8084 <grid_sys_dma_rx_init_one+0x4c>)
    804e:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    8050:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    8054:	4620      	mov	r0, r4
    8056:	4b0c      	ldr	r3, [pc, #48]	; (8088 <grid_sys_dma_rx_init_one+0x50>)
    8058:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    805a:	4639      	mov	r1, r7
    805c:	4620      	mov	r0, r4
    805e:	4b0b      	ldr	r3, [pc, #44]	; (808c <grid_sys_dma_rx_init_one+0x54>)
    8060:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    8062:	4621      	mov	r1, r4
    8064:	a801      	add	r0, sp, #4
    8066:	4b0a      	ldr	r3, [pc, #40]	; (8090 <grid_sys_dma_rx_init_one+0x58>)
    8068:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    806a:	9b01      	ldr	r3, [sp, #4]
    806c:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    806e:	2201      	movs	r2, #1
    8070:	2100      	movs	r1, #0
    8072:	4620      	mov	r0, r4
    8074:	4b07      	ldr	r3, [pc, #28]	; (8094 <grid_sys_dma_rx_init_one+0x5c>)
    8076:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    8078:	2100      	movs	r1, #0
    807a:	4620      	mov	r0, r4
    807c:	4b06      	ldr	r3, [pc, #24]	; (8098 <grid_sys_dma_rx_init_one+0x60>)
    807e:	4798      	blx	r3
	

}
    8080:	b003      	add	sp, #12
    8082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8084:	0000a5c5 	.word	0x0000a5c5
    8088:	0000a5b5 	.word	0x0000a5b5
    808c:	0000a5f1 	.word	0x0000a5f1
    8090:	0000a689 	.word	0x0000a689
    8094:	0000a561 	.word	0x0000a561
    8098:	0000a649 	.word	0x0000a649

0000809c <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    809c:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    809e:	4a10      	ldr	r2, [pc, #64]	; (80e0 <grid_sys_dma_rx_init+0x44>)
    80a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    80a4:	480f      	ldr	r0, [pc, #60]	; (80e4 <grid_sys_dma_rx_init+0x48>)
    80a6:	4c10      	ldr	r4, [pc, #64]	; (80e8 <grid_sys_dma_rx_init+0x4c>)
    80a8:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    80aa:	4a10      	ldr	r2, [pc, #64]	; (80ec <grid_sys_dma_rx_init+0x50>)
    80ac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    80b0:	480f      	ldr	r0, [pc, #60]	; (80f0 <grid_sys_dma_rx_init+0x54>)
    80b2:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    80b4:	4a0f      	ldr	r2, [pc, #60]	; (80f4 <grid_sys_dma_rx_init+0x58>)
    80b6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    80ba:	480f      	ldr	r0, [pc, #60]	; (80f8 <grid_sys_dma_rx_init+0x5c>)
    80bc:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    80be:	4a0f      	ldr	r2, [pc, #60]	; (80fc <grid_sys_dma_rx_init+0x60>)
    80c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    80c4:	480e      	ldr	r0, [pc, #56]	; (8100 <grid_sys_dma_rx_init+0x64>)
    80c6:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    80c8:	4b0e      	ldr	r3, [pc, #56]	; (8104 <grid_sys_dma_rx_init+0x68>)
    80ca:	2200      	movs	r2, #0
    80cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    80d0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    80d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    80d8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    80dc:	bd10      	pop	{r4, pc}
    80de:	bf00      	nop
    80e0:	00007ed1 	.word	0x00007ed1
    80e4:	2000121c 	.word	0x2000121c
    80e8:	00008039 	.word	0x00008039
    80ec:	00007ebd 	.word	0x00007ebd
    80f0:	20006760 	.word	0x20006760
    80f4:	00007ea9 	.word	0x00007ea9
    80f8:	2000474c 	.word	0x2000474c
    80fc:	00007e95 	.word	0x00007e95
    8100:	20003730 	.word	0x20003730
    8104:	e000e100 	.word	0xe000e100

00008108 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    8108:	6980      	ldr	r0, [r0, #24]
    810a:	4770      	bx	lr

0000810c <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    810c:	6980      	ldr	r0, [r0, #24]
	
	

}
    810e:	1a40      	subs	r0, r0, r1
    8110:	4770      	bx	lr

00008112 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	mod->realtime++;
    8112:	6983      	ldr	r3, [r0, #24]
    8114:	3301      	adds	r3, #1
    8116:	6183      	str	r3, [r0, #24]
    8118:	4770      	bx	lr

0000811a <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    811a:	7a00      	ldrb	r0, [r0, #8]
    811c:	4770      	bx	lr

0000811e <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    811e:	2300      	movs	r3, #0
    8120:	7203      	strb	r3, [r0, #8]
    8122:	4770      	bx	lr

00008124 <grid_sys_alert_get_color_intensity>:
	
}

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    8124:	7983      	ldrb	r3, [r0, #6]
    8126:	b123      	cbz	r3, 8132 <grid_sys_alert_get_color_intensity+0xe>
		
		return (125-abs(mod->alert_state/2-125))/2;
	}
	else if (mod->alert_style == 1){ // SQUARE
    8128:	2b01      	cmp	r3, #1
    812a:	d00f      	beq.n	814c <grid_sys_alert_get_color_intensity+0x28>
		
		return 255*(mod->alert_state/250%2);
	}
	else if (mod->alert_style == 2){ // CONST
    812c:	2b02      	cmp	r3, #2
    812e:	d015      	beq.n	815c <grid_sys_alert_get_color_intensity+0x38>
		
		return 255*(mod->alert_state>100);
	}
	
	
}
    8130:	4770      	bx	lr
		return (125-abs(mod->alert_state/2-125))/2;
    8132:	8880      	ldrh	r0, [r0, #4]
    8134:	0840      	lsrs	r0, r0, #1
    8136:	387d      	subs	r0, #125	; 0x7d
    8138:	2800      	cmp	r0, #0
    813a:	bfb8      	it	lt
    813c:	4240      	neglt	r0, r0
    813e:	f1c0 007d 	rsb	r0, r0, #125	; 0x7d
    8142:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    8146:	f3c0 0047 	ubfx	r0, r0, #1, #8
    814a:	4770      	bx	lr
		return 255*(mod->alert_state/250%2);
    814c:	8880      	ldrh	r0, [r0, #4]
    814e:	4b06      	ldr	r3, [pc, #24]	; (8168 <grid_sys_alert_get_color_intensity+0x44>)
    8150:	fba3 3000 	umull	r3, r0, r3, r0
    8154:	f340 1000 	sbfx	r0, r0, #4, #1
    8158:	b2c0      	uxtb	r0, r0
    815a:	4770      	bx	lr
		return 255*(mod->alert_state>100);
    815c:	8880      	ldrh	r0, [r0, #4]
    815e:	2864      	cmp	r0, #100	; 0x64
    8160:	bf8c      	ite	hi
    8162:	20ff      	movhi	r0, #255	; 0xff
    8164:	2000      	movls	r0, #0
    8166:	4770      	bx	lr
    8168:	10624dd3 	.word	0x10624dd3

0000816c <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    816c:	b410      	push	{r4}
	mod->alert_color_changed = 1;
    816e:	2401      	movs	r4, #1
    8170:	7204      	strb	r4, [r0, #8]
	mod->alert_color_red = red;
    8172:	7041      	strb	r1, [r0, #1]
	mod->alert_color_green = green;
    8174:	7082      	strb	r2, [r0, #2]
	mod->alert_color_blue = blue;
    8176:	70c3      	strb	r3, [r0, #3]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    8178:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    817c:	8083      	strh	r3, [r0, #4]
	mod->alert_style = style;
    817e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8182:	7183      	strb	r3, [r0, #6]
	
}
    8184:	f85d 4b04 	ldr.w	r4, [sp], #4
    8188:	4770      	bx	lr

0000818a <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    818a:	7840      	ldrb	r0, [r0, #1]
    818c:	4770      	bx	lr

0000818e <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    818e:	7880      	ldrb	r0, [r0, #2]
    8190:	4770      	bx	lr

00008192 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    8192:	78c0      	ldrb	r0, [r0, #3]
    8194:	4770      	bx	lr

00008196 <grid_sys_read_hex_char_value>:




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    8196:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    8198:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    819c:	b2d8      	uxtb	r0, r3
    819e:	2809      	cmp	r0, #9
    81a0:	d90d      	bls.n	81be <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    81a2:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    81a6:	b2db      	uxtb	r3, r3
    81a8:	2b05      	cmp	r3, #5
    81aa:	d903      	bls.n	81b4 <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    81ac:	b131      	cbz	r1, 81bc <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    81ae:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    81b0:	2000      	movs	r0, #0
    81b2:	4770      	bx	lr
		result = ascii - 97 + 10;
    81b4:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    81b8:	b2c0      	uxtb	r0, r0
    81ba:	4770      	bx	lr
	uint8_t result = 0;
    81bc:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    81be:	4770      	bx	lr

000081c0 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    81c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    81c4:	b1c1      	cbz	r1, 81f8 <grid_sys_read_hex_string_value+0x38>
    81c6:	4690      	mov	r8, r2
    81c8:	1e45      	subs	r5, r0, #1
    81ca:	1e4b      	subs	r3, r1, #1
    81cc:	009c      	lsls	r4, r3, #2
    81ce:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    81d2:	3f02      	subs	r7, #2
    81d4:	b2db      	uxtb	r3, r3
    81d6:	1aff      	subs	r7, r7, r3
    81d8:	00bf      	lsls	r7, r7, #2
    81da:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    81dc:	f8df 901c 	ldr.w	r9, [pc, #28]	; 81fc <grid_sys_read_hex_string_value+0x3c>
    81e0:	4641      	mov	r1, r8
    81e2:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    81e6:	47c8      	blx	r9
    81e8:	40a0      	lsls	r0, r4
    81ea:	4406      	add	r6, r0
    81ec:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    81ee:	42bc      	cmp	r4, r7
    81f0:	d1f6      	bne.n	81e0 <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    81f2:	4630      	mov	r0, r6
    81f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    81f8:	2600      	movs	r6, #0
	return result;
    81fa:	e7fa      	b.n	81f2 <grid_sys_read_hex_string_value+0x32>
    81fc:	00008197 	.word	0x00008197

00008200 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    8200:	b530      	push	{r4, r5, lr}
    8202:	b085      	sub	sp, #20
    8204:	4605      	mov	r5, r0
    8206:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    8208:	4909      	ldr	r1, [pc, #36]	; (8230 <grid_sys_write_hex_string_value+0x30>)
    820a:	a801      	add	r0, sp, #4
    820c:	4b09      	ldr	r3, [pc, #36]	; (8234 <grid_sys_write_hex_string_value+0x34>)
    820e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    8210:	b164      	cbz	r4, 822c <grid_sys_write_hex_string_value+0x2c>
    8212:	ab04      	add	r3, sp, #16
    8214:	1b1a      	subs	r2, r3, r4
    8216:	3a05      	subs	r2, #5
    8218:	1e6b      	subs	r3, r5, #1
    821a:	1e60      	subs	r0, r4, #1
    821c:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    8220:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    8224:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    8228:	4283      	cmp	r3, r0
    822a:	d1f9      	bne.n	8220 <grid_sys_write_hex_string_value+0x20>
	}

}
    822c:	b005      	add	sp, #20
    822e:	bd30      	pop	{r4, r5, pc}
    8230:	000115f4 	.word	0x000115f4
    8234:	00010325 	.word	0x00010325

00008238 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    8238:	4b34      	ldr	r3, [pc, #208]	; (830c <grid_sys_get_hwcfg+0xd4>)
    823a:	681b      	ldr	r3, [r3, #0]
    823c:	f1b3 3fff 	cmp.w	r3, #4294967295
    8240:	d002      	beq.n	8248 <grid_sys_get_hwcfg+0x10>
	}

	
	return grid_sys_hwfcg;

}
    8242:	4b32      	ldr	r3, [pc, #200]	; (830c <grid_sys_get_hwcfg+0xd4>)
    8244:	6818      	ldr	r0, [r3, #0]
    8246:	4770      	bx	lr
uint32_t grid_sys_get_hwcfg(){
    8248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    824c:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    824e:	4b30      	ldr	r3, [pc, #192]	; (8310 <grid_sys_get_hwcfg+0xd8>)
    8250:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    8254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8258:	492e      	ldr	r1, [pc, #184]	; (8314 <grid_sys_get_hwcfg+0xdc>)
    825a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    825e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    8262:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    8266:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    826a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    826e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    8272:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    8276:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    827a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    827e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    8282:	4925      	ldr	r1, [pc, #148]	; (8318 <grid_sys_get_hwcfg+0xe0>)
    8284:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    8288:	f1a1 2180 	sub.w	r1, r1, #2147516416	; 0x80008000
    828c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8290:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		delay_ms(1);
    8294:	2001      	movs	r0, #1
    8296:	4b21      	ldr	r3, [pc, #132]	; (831c <grid_sys_get_hwcfg+0xe4>)
    8298:	4798      	blx	r3
    829a:	2600      	movs	r6, #0
		uint8_t hwcfg_value = 0;
    829c:	46b0      	mov	r8, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    829e:	4d1c      	ldr	r5, [pc, #112]	; (8310 <grid_sys_get_hwcfg+0xd8>)
    82a0:	f44f 5900 	mov.w	r9, #8192	; 0x2000
			delay_ms(1);
    82a4:	4f1d      	ldr	r7, [pc, #116]	; (831c <grid_sys_get_hwcfg+0xe4>)
    82a6:	e00c      	b.n	82c2 <grid_sys_get_hwcfg+0x8a>
			if(i!=7){
    82a8:	2e07      	cmp	r6, #7
    82aa:	d027      	beq.n	82fc <grid_sys_get_hwcfg+0xc4>
    82ac:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    82b0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
				delay_ms(1);
    82b4:	2001      	movs	r0, #1
    82b6:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    82b8:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
    82bc:	3601      	adds	r6, #1
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    82be:	2e08      	cmp	r6, #8
    82c0:	d01c      	beq.n	82fc <grid_sys_get_hwcfg+0xc4>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    82c2:	f8c5 9098 	str.w	r9, [r5, #152]	; 0x98
			delay_ms(1);
    82c6:	2001      	movs	r0, #1
    82c8:	47b8      	blx	r7
	CRITICAL_SECTION_ENTER();
    82ca:	a801      	add	r0, sp, #4
    82cc:	4b14      	ldr	r3, [pc, #80]	; (8320 <grid_sys_get_hwcfg+0xe8>)
    82ce:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    82d0:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    82d4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    82d8:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    82dc:	405c      	eors	r4, r3
    82de:	4014      	ands	r4, r2
    82e0:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    82e2:	a801      	add	r0, sp, #4
    82e4:	4b0f      	ldr	r3, [pc, #60]	; (8324 <grid_sys_get_hwcfg+0xec>)
    82e6:	4798      	blx	r3
			if(gpio_get_pin_level(HWCFG_DATA)){
    82e8:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    82ec:	d0dc      	beq.n	82a8 <grid_sys_get_hwcfg+0x70>
				hwcfg_value |= (1<<i);
    82ee:	2301      	movs	r3, #1
    82f0:	40b3      	lsls	r3, r6
    82f2:	ea43 0808 	orr.w	r8, r3, r8
    82f6:	fa5f f888 	uxtb.w	r8, r8
    82fa:	e7d5      	b.n	82a8 <grid_sys_get_hwcfg+0x70>
		grid_sys_hwfcg = hwcfg_value;
    82fc:	4b03      	ldr	r3, [pc, #12]	; (830c <grid_sys_get_hwcfg+0xd4>)
    82fe:	f8c3 8000 	str.w	r8, [r3]
}
    8302:	4b02      	ldr	r3, [pc, #8]	; (830c <grid_sys_get_hwcfg+0xd4>)
    8304:	6818      	ldr	r0, [r3, #0]
    8306:	b003      	add	sp, #12
    8308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    830c:	20000354 	.word	0x20000354
    8310:	41008000 	.word	0x41008000
    8314:	40002000 	.word	0x40002000
    8318:	40028000 	.word	0x40028000
    831c:	0000906d 	.word	0x0000906d
    8320:	00009011 	.word	0x00009011
    8324:	0000901f 	.word	0x0000901f

00008328 <grid_sys_bank_select>:
void grid_sys_bank_select(struct grid_sys_model* mod, uint8_t banknumber){
    8328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    832c:	b085      	sub	sp, #20
    832e:	9003      	str	r0, [sp, #12]
    8330:	460c      	mov	r4, r1
	mod->bank_changed = 1;
    8332:	2301      	movs	r3, #1
    8334:	7283      	strb	r3, [r0, #10]
	uint32_t hwtype = grid_sys_get_hwcfg();
    8336:	4b4d      	ldr	r3, [pc, #308]	; (846c <grid_sys_bank_select+0x144>)
    8338:	4798      	blx	r3
	if (banknumber == 255){
    833a:	2cff      	cmp	r4, #255	; 0xff
    833c:	d006      	beq.n	834c <grid_sys_bank_select+0x24>
		mod->bank_select = banknumber%4;
    833e:	f004 0403 	and.w	r4, r4, #3
    8342:	9b03      	ldr	r3, [sp, #12]
    8344:	725c      	strb	r4, [r3, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    8346:	f04f 0900 	mov.w	r9, #0
    834a:	e083      	b.n	8454 <grid_sys_bank_select+0x12c>
		mod->bank_select = 255;
    834c:	23ff      	movs	r3, #255	; 0xff
    834e:	9a03      	ldr	r2, [sp, #12]
    8350:	7253      	strb	r3, [r2, #9]
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    8352:	2700      	movs	r7, #0
    8354:	f8df b128 	ldr.w	fp, [pc, #296]	; 8480 <grid_sys_bank_select+0x158>
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/20, g/20, b/20);
    8358:	f8df a118 	ldr.w	sl, [pc, #280]	; 8474 <grid_sys_bank_select+0x14c>
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    835c:	e02f      	b.n	83be <grid_sys_bank_select+0x96>
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/20, g/20, b/20);
    835e:	2306      	movs	r3, #6
    8360:	9301      	str	r3, [sp, #4]
    8362:	9300      	str	r3, [sp, #0]
    8364:	2201      	movs	r2, #1
    8366:	4621      	mov	r1, r4
    8368:	4841      	ldr	r0, [pc, #260]	; (8470 <grid_sys_bank_select+0x148>)
    836a:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/2, g/2, b/2);
    836c:	263f      	movs	r6, #63	; 0x3f
    836e:	9601      	str	r6, [sp, #4]
    8370:	9600      	str	r6, [sp, #0]
    8372:	4633      	mov	r3, r6
    8374:	2201      	movs	r2, #1
    8376:	4621      	mov	r1, r4
    8378:	483d      	ldr	r0, [pc, #244]	; (8470 <grid_sys_bank_select+0x148>)
    837a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8478 <grid_sys_bank_select+0x150>
    837e:	47c8      	blx	r9
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_A, r, g, b);
    8380:	257f      	movs	r5, #127	; 0x7f
    8382:	9501      	str	r5, [sp, #4]
    8384:	9500      	str	r5, [sp, #0]
    8386:	462b      	mov	r3, r5
    8388:	2201      	movs	r2, #1
    838a:	4621      	mov	r1, r4
    838c:	4838      	ldr	r0, [pc, #224]	; (8470 <grid_sys_bank_select+0x148>)
    838e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 847c <grid_sys_bank_select+0x154>
    8392:	47c0      	blx	r8
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_B, 0, 0, 0);
    8394:	2300      	movs	r3, #0
    8396:	9301      	str	r3, [sp, #4]
    8398:	9300      	str	r3, [sp, #0]
    839a:	2202      	movs	r2, #2
    839c:	4621      	mov	r1, r4
    839e:	4834      	ldr	r0, [pc, #208]	; (8470 <grid_sys_bank_select+0x148>)
    83a0:	47d0      	blx	sl
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_B, r/2, g/2, b/2);
    83a2:	9601      	str	r6, [sp, #4]
    83a4:	9600      	str	r6, [sp, #0]
    83a6:	4633      	mov	r3, r6
    83a8:	2202      	movs	r2, #2
    83aa:	4621      	mov	r1, r4
    83ac:	4830      	ldr	r0, [pc, #192]	; (8470 <grid_sys_bank_select+0x148>)
    83ae:	47c8      	blx	r9
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_B, r, g, b);
    83b0:	9501      	str	r5, [sp, #4]
    83b2:	9500      	str	r5, [sp, #0]
    83b4:	462b      	mov	r3, r5
    83b6:	2202      	movs	r2, #2
    83b8:	4621      	mov	r1, r4
    83ba:	482d      	ldr	r0, [pc, #180]	; (8470 <grid_sys_bank_select+0x148>)
    83bc:	47c0      	blx	r8
    83be:	b2fc      	uxtb	r4, r7
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    83c0:	482b      	ldr	r0, [pc, #172]	; (8470 <grid_sys_bank_select+0x148>)
    83c2:	47d8      	blx	fp
    83c4:	3701      	adds	r7, #1
    83c6:	42a0      	cmp	r0, r4
    83c8:	d8c9      	bhi.n	835e <grid_sys_bank_select+0x36>
    83ca:	e04c      	b.n	8466 <grid_sys_bank_select+0x13e>
			uint8_t r = mod->bank_color_r[mod->bank_select];
    83cc:	9a03      	ldr	r2, [sp, #12]
    83ce:	7a53      	ldrb	r3, [r2, #9]
    83d0:	4413      	add	r3, r2
    83d2:	f893 800b 	ldrb.w	r8, [r3, #11]
			uint8_t g = mod->bank_color_g[mod->bank_select];
    83d6:	7bdd      	ldrb	r5, [r3, #15]
			uint8_t b = mod->bank_color_b[mod->bank_select];
    83d8:	7cde      	ldrb	r6, [r3, #19]
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/32, g/32, b/32);
    83da:	0973      	lsrs	r3, r6, #5
    83dc:	9301      	str	r3, [sp, #4]
    83de:	096b      	lsrs	r3, r5, #5
    83e0:	9300      	str	r3, [sp, #0]
    83e2:	ea4f 1358 	mov.w	r3, r8, lsr #5
    83e6:	2201      	movs	r2, #1
    83e8:	4621      	mov	r1, r4
    83ea:	4821      	ldr	r0, [pc, #132]	; (8470 <grid_sys_bank_select+0x148>)
    83ec:	4f21      	ldr	r7, [pc, #132]	; (8474 <grid_sys_bank_select+0x14c>)
    83ee:	47b8      	blx	r7
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_A, r/2, g/2, b/2);
    83f0:	ea4f 0358 	mov.w	r3, r8, lsr #1
    83f4:	ea4f 0a55 	mov.w	sl, r5, lsr #1
    83f8:	ea4f 0b56 	mov.w	fp, r6, lsr #1
    83fc:	f8cd b004 	str.w	fp, [sp, #4]
    8400:	f8cd a000 	str.w	sl, [sp]
    8404:	9302      	str	r3, [sp, #8]
    8406:	2201      	movs	r2, #1
    8408:	4621      	mov	r1, r4
    840a:	4819      	ldr	r0, [pc, #100]	; (8470 <grid_sys_bank_select+0x148>)
    840c:	4f1a      	ldr	r7, [pc, #104]	; (8478 <grid_sys_bank_select+0x150>)
    840e:	47b8      	blx	r7
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_A, r, g, b);
    8410:	9601      	str	r6, [sp, #4]
    8412:	9500      	str	r5, [sp, #0]
    8414:	4643      	mov	r3, r8
    8416:	2201      	movs	r2, #1
    8418:	4621      	mov	r1, r4
    841a:	4815      	ldr	r0, [pc, #84]	; (8470 <grid_sys_bank_select+0x148>)
    841c:	4f17      	ldr	r7, [pc, #92]	; (847c <grid_sys_bank_select+0x154>)
    841e:	47b8      	blx	r7
			grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_UI_B, 0, 0, 0);
    8420:	2300      	movs	r3, #0
    8422:	9301      	str	r3, [sp, #4]
    8424:	9300      	str	r3, [sp, #0]
    8426:	2202      	movs	r2, #2
    8428:	4621      	mov	r1, r4
    842a:	4811      	ldr	r0, [pc, #68]	; (8470 <grid_sys_bank_select+0x148>)
    842c:	4f11      	ldr	r7, [pc, #68]	; (8474 <grid_sys_bank_select+0x14c>)
    842e:	47b8      	blx	r7
			grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_UI_B, r/2, g/2, b/2);
    8430:	f8cd b004 	str.w	fp, [sp, #4]
    8434:	f8cd a000 	str.w	sl, [sp]
    8438:	9b02      	ldr	r3, [sp, #8]
    843a:	2202      	movs	r2, #2
    843c:	4621      	mov	r1, r4
    843e:	480c      	ldr	r0, [pc, #48]	; (8470 <grid_sys_bank_select+0x148>)
    8440:	4f0d      	ldr	r7, [pc, #52]	; (8478 <grid_sys_bank_select+0x150>)
    8442:	47b8      	blx	r7
			grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_UI_B, r, g, b);
    8444:	9601      	str	r6, [sp, #4]
    8446:	9500      	str	r5, [sp, #0]
    8448:	4643      	mov	r3, r8
    844a:	2202      	movs	r2, #2
    844c:	4621      	mov	r1, r4
    844e:	4808      	ldr	r0, [pc, #32]	; (8470 <grid_sys_bank_select+0x148>)
    8450:	4c0a      	ldr	r4, [pc, #40]	; (847c <grid_sys_bank_select+0x154>)
    8452:	47a0      	blx	r4
    8454:	fa5f f489 	uxtb.w	r4, r9
		for(uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    8458:	4805      	ldr	r0, [pc, #20]	; (8470 <grid_sys_bank_select+0x148>)
    845a:	4b09      	ldr	r3, [pc, #36]	; (8480 <grid_sys_bank_select+0x158>)
    845c:	4798      	blx	r3
    845e:	f109 0901 	add.w	r9, r9, #1
    8462:	4284      	cmp	r4, r0
    8464:	d3b2      	bcc.n	83cc <grid_sys_bank_select+0xa4>
}
    8466:	b005      	add	sp, #20
    8468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    846c:	00008239 	.word	0x00008239
    8470:	200077d4 	.word	0x200077d4
    8474:	00006607 	.word	0x00006607
    8478:	0000664f 	.word	0x0000664f
    847c:	00006699 	.word	0x00006699
    8480:	000065c5 	.word	0x000065c5

00008484 <grid_sys_init>:
void grid_sys_init(struct grid_sys_model* mod){
    8484:	b510      	push	{r4, lr}
	mod->bank_select = 0;
    8486:	2200      	movs	r2, #0
    8488:	7242      	strb	r2, [r0, #9]
	mod->bank_color_r[0] = 0;
    848a:	72c2      	strb	r2, [r0, #11]
	mod->bank_color_g[0] = 100;
    848c:	2164      	movs	r1, #100	; 0x64
    848e:	73c1      	strb	r1, [r0, #15]
	mod->bank_color_b[0] = 200;
    8490:	23c8      	movs	r3, #200	; 0xc8
    8492:	74c3      	strb	r3, [r0, #19]
	mod->bank_color_r[1] = 200;
    8494:	7303      	strb	r3, [r0, #12]
	mod->bank_color_g[1] = 100;
    8496:	7401      	strb	r1, [r0, #16]
	mod->bank_color_b[1] = 0;
    8498:	7502      	strb	r2, [r0, #20]
	mod->bank_color_r[2] = 50;
    849a:	2432      	movs	r4, #50	; 0x32
    849c:	7344      	strb	r4, [r0, #13]
	mod->bank_color_g[2] = 200;
    849e:	7443      	strb	r3, [r0, #17]
	mod->bank_color_b[2] = 50;
    84a0:	7544      	strb	r4, [r0, #21]
	mod->bank_color_r[3] = 100;
    84a2:	7381      	strb	r1, [r0, #14]
	mod->bank_color_g[3] = 0;
    84a4:	7482      	strb	r2, [r0, #18]
	mod->bank_color_b[3] = 200;
    84a6:	7583      	strb	r3, [r0, #22]
	grid_sys_bank_select(&grid_sys_state, 255);
    84a8:	21ff      	movs	r1, #255	; 0xff
    84aa:	4805      	ldr	r0, [pc, #20]	; (84c0 <grid_sys_init+0x3c>)
    84ac:	4b05      	ldr	r3, [pc, #20]	; (84c4 <grid_sys_init+0x40>)
    84ae:	4798      	blx	r3
	grid_port_init_all();
    84b0:	4b05      	ldr	r3, [pc, #20]	; (84c8 <grid_sys_init+0x44>)
    84b2:	4798      	blx	r3
	grid_sys_uart_init();
    84b4:	4b05      	ldr	r3, [pc, #20]	; (84cc <grid_sys_init+0x48>)
    84b6:	4798      	blx	r3
	grid_sys_dma_rx_init();
    84b8:	4b05      	ldr	r3, [pc, #20]	; (84d0 <grid_sys_init+0x4c>)
    84ba:	4798      	blx	r3
    84bc:	bd10      	pop	{r4, pc}
    84be:	bf00      	nop
    84c0:	20003280 	.word	0x20003280
    84c4:	00008329 	.word	0x00008329
    84c8:	00005c05 	.word	0x00005c05
    84cc:	00007ee5 	.word	0x00007ee5
    84d0:	0000809d 	.word	0x0000809d

000084d4 <grid_msg_checksum_calculate>:
}

uint8_t grid_msg_checksum_calculate(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    84d4:	2903      	cmp	r1, #3
    84d6:	d009      	beq.n	84ec <grid_msg_checksum_calculate+0x18>
    84d8:	1e43      	subs	r3, r0, #1
    84da:	3904      	subs	r1, #4
    84dc:	4401      	add	r1, r0
    84de:	2000      	movs	r0, #0
		checksum ^= str[i];
    84e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    84e4:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    84e6:	428b      	cmp	r3, r1
    84e8:	d1fa      	bne.n	84e0 <grid_msg_checksum_calculate+0xc>
    84ea:	4770      	bx	lr
	uint8_t checksum = 0;
    84ec:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    84ee:	4770      	bx	lr

000084f0 <grid_msg_checksum_read>:

uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    84f0:	b500      	push	{lr}
    84f2:	b083      	sub	sp, #12
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    84f4:	1ecb      	subs	r3, r1, #3
    84f6:	f10d 0207 	add.w	r2, sp, #7
    84fa:	2102      	movs	r1, #2
    84fc:	4418      	add	r0, r3
    84fe:	4b03      	ldr	r3, [pc, #12]	; (850c <grid_msg_checksum_read+0x1c>)
    8500:	4798      	blx	r3
}
    8502:	b2c0      	uxtb	r0, r0
    8504:	b003      	add	sp, #12
    8506:	f85d fb04 	ldr.w	pc, [sp], #4
    850a:	bf00      	nop
    850c:	000081c1 	.word	0x000081c1

00008510 <grid_msg_checksum_write>:

void grid_msg_checksum_write(uint8_t* message, uint32_t length, uint8_t checksum){
    8510:	b508      	push	{r3, lr}
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    8512:	1ecb      	subs	r3, r1, #3
    8514:	2102      	movs	r1, #2
    8516:	4418      	add	r0, r3
    8518:	4b01      	ldr	r3, [pc, #4]	; (8520 <grid_msg_checksum_write+0x10>)
    851a:	4798      	blx	r3
    851c:	bd08      	pop	{r3, pc}
    851e:	bf00      	nop
    8520:	00008201 	.word	0x00008201

00008524 <grid_msg_get_id>:
}


// MESSAGE PARAMETER FUNCTIONS

uint8_t grid_msg_get_id(uint8_t* message){
    8524:	b500      	push	{lr}
    8526:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    8528:	aa02      	add	r2, sp, #8
    852a:	2300      	movs	r3, #0
    852c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[4], 2, &error);
    8530:	2102      	movs	r1, #2
    8532:	3004      	adds	r0, #4
    8534:	4b02      	ldr	r3, [pc, #8]	; (8540 <grid_msg_get_id+0x1c>)
    8536:	4798      	blx	r3
	
}
    8538:	b2c0      	uxtb	r0, r0
    853a:	b003      	add	sp, #12
    853c:	f85d fb04 	ldr.w	pc, [sp], #4
    8540:	000081c1 	.word	0x000081c1

00008544 <grid_msg_get_dx>:
uint8_t grid_msg_get_dx(uint8_t* message){
    8544:	b500      	push	{lr}
    8546:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    8548:	aa02      	add	r2, sp, #8
    854a:	2300      	movs	r3, #0
    854c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[6], 2, &error);	
    8550:	2102      	movs	r1, #2
    8552:	3006      	adds	r0, #6
    8554:	4b02      	ldr	r3, [pc, #8]	; (8560 <grid_msg_get_dx+0x1c>)
    8556:	4798      	blx	r3
	
}
    8558:	b2c0      	uxtb	r0, r0
    855a:	b003      	add	sp, #12
    855c:	f85d fb04 	ldr.w	pc, [sp], #4
    8560:	000081c1 	.word	0x000081c1

00008564 <grid_msg_get_dy>:
uint8_t grid_msg_get_dy(uint8_t* message){
    8564:	b500      	push	{lr}
    8566:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    8568:	aa02      	add	r2, sp, #8
    856a:	2300      	movs	r3, #0
    856c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[8], 2, &error);	
    8570:	2102      	movs	r1, #2
    8572:	3008      	adds	r0, #8
    8574:	4b02      	ldr	r3, [pc, #8]	; (8580 <grid_msg_get_dy+0x1c>)
    8576:	4798      	blx	r3

}
    8578:	b2c0      	uxtb	r0, r0
    857a:	b003      	add	sp, #12
    857c:	f85d fb04 	ldr.w	pc, [sp], #4
    8580:	000081c1 	.word	0x000081c1

00008584 <grid_msg_get_age>:
uint8_t grid_msg_get_age(uint8_t* message){
    8584:	b500      	push	{lr}
    8586:	b083      	sub	sp, #12
	
	uint8_t error = 0;
    8588:	aa02      	add	r2, sp, #8
    858a:	2300      	movs	r3, #0
    858c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	return grid_sys_read_hex_string_value(&message[10], 2, &error);	
    8590:	2102      	movs	r1, #2
    8592:	300a      	adds	r0, #10
    8594:	4b02      	ldr	r3, [pc, #8]	; (85a0 <grid_msg_get_age+0x1c>)
    8596:	4798      	blx	r3
	
}
    8598:	b2c0      	uxtb	r0, r0
    859a:	b003      	add	sp, #12
    859c:	f85d fb04 	ldr.w	pc, [sp], #4
    85a0:	000081c1 	.word	0x000081c1

000085a4 <grid_msg_set_id>:

void grid_msg_set_id(uint8_t* message, uint8_t param){
    85a4:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[4], 2, param);
    85a6:	460a      	mov	r2, r1
    85a8:	2102      	movs	r1, #2
    85aa:	3004      	adds	r0, #4
    85ac:	4b01      	ldr	r3, [pc, #4]	; (85b4 <grid_msg_set_id+0x10>)
    85ae:	4798      	blx	r3
    85b0:	bd08      	pop	{r3, pc}
    85b2:	bf00      	nop
    85b4:	00008201 	.word	0x00008201

000085b8 <grid_msg_set_dx>:
	
}
void grid_msg_set_dx(uint8_t* message, uint8_t param){
    85b8:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[6], 2, param);
    85ba:	460a      	mov	r2, r1
    85bc:	2102      	movs	r1, #2
    85be:	3006      	adds	r0, #6
    85c0:	4b01      	ldr	r3, [pc, #4]	; (85c8 <grid_msg_set_dx+0x10>)
    85c2:	4798      	blx	r3
    85c4:	bd08      	pop	{r3, pc}
    85c6:	bf00      	nop
    85c8:	00008201 	.word	0x00008201

000085cc <grid_msg_set_dy>:
	
}
void grid_msg_set_dy(uint8_t* message, uint8_t param){
    85cc:	b508      	push	{r3, lr}

	grid_sys_write_hex_string_value(&message[8], 2, param);
    85ce:	460a      	mov	r2, r1
    85d0:	2102      	movs	r1, #2
    85d2:	3008      	adds	r0, #8
    85d4:	4b01      	ldr	r3, [pc, #4]	; (85dc <grid_msg_set_dy+0x10>)
    85d6:	4798      	blx	r3
    85d8:	bd08      	pop	{r3, pc}
    85da:	bf00      	nop
    85dc:	00008201 	.word	0x00008201

000085e0 <grid_msg_set_age>:

}
void grid_msg_set_age(uint8_t* message, uint8_t param){
    85e0:	b508      	push	{r3, lr}
	
	grid_sys_write_hex_string_value(&message[10], 2, param);
    85e2:	460a      	mov	r2, r1
    85e4:	2102      	movs	r1, #2
    85e6:	300a      	adds	r0, #10
    85e8:	4b01      	ldr	r3, [pc, #4]	; (85f0 <grid_msg_set_age+0x10>)
    85ea:	4798      	blx	r3
    85ec:	bd08      	pop	{r3, pc}
    85ee:	bf00      	nop
    85f0:	00008201 	.word	0x00008201

000085f4 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    85f4:	69c3      	ldr	r3, [r0, #28]
    85f6:	4299      	cmp	r1, r3
    85f8:	d00d      	beq.n	8616 <grid_msg_find_recent+0x22>
    85fa:	2301      	movs	r3, #1
    85fc:	f003 021f 	and.w	r2, r3, #31
    8600:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8604:	69d2      	ldr	r2, [r2, #28]
    8606:	428a      	cmp	r2, r1
    8608:	d007      	beq.n	861a <grid_msg_find_recent+0x26>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    860a:	3301      	adds	r3, #1
    860c:	b2db      	uxtb	r3, r3
    860e:	2b20      	cmp	r3, #32
    8610:	d1f4      	bne.n	85fc <grid_msg_find_recent+0x8>
			
		}
		
	}
	
	return 0;
    8612:	2000      	movs	r0, #0
    8614:	4770      	bx	lr
			return 1;
    8616:	2001      	movs	r0, #1
    8618:	4770      	bx	lr
    861a:	2001      	movs	r0, #1
}
    861c:	4770      	bx	lr

0000861e <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    861e:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    8622:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    8624:	f003 031f 	and.w	r3, r3, #31
    8628:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    862c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8630:	61c1      	str	r1, [r0, #28]
    8632:	4770      	bx	lr

00008634 <grid_ui_model_init>:

	
	
}

uint8_t grid_ui_model_init(struct grid_ui_model* mod, uint8_t len){
    8634:	b510      	push	{r4, lr}
    8636:	4604      	mov	r4, r0
	
	
	mod->report_offset = GRID_REPORT_OFFSET; // System Reserved Report Elements
    8638:	2307      	movs	r3, #7
    863a:	7043      	strb	r3, [r0, #1]
	
	mod->report_length = len + mod->report_offset;
    863c:	4419      	add	r1, r3
    863e:	b2c8      	uxtb	r0, r1
    8640:	7020      	strb	r0, [r4, #0]
	
	mod->report_array = malloc(mod->report_length*sizeof(struct grid_ui_report));
    8642:	0100      	lsls	r0, r0, #4
    8644:	4b02      	ldr	r3, [pc, #8]	; (8650 <grid_ui_model_init+0x1c>)
    8646:	4798      	blx	r3
    8648:	6060      	str	r0, [r4, #4]
	
	mod->report_ui_array = &mod->report_array[mod->report_offset];
    864a:	3070      	adds	r0, #112	; 0x70
    864c:	60a0      	str	r0, [r4, #8]
		
}
    864e:	bd10      	pop	{r4, pc}
    8650:	0000fe9d 	.word	0x0000fe9d

00008654 <grid_report_init>:





uint8_t grid_report_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    8654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8658:	4605      	mov	r5, r0
    865a:	4698      	mov	r8, r3
    865c:	9808      	ldr	r0, [sp, #32]
    865e:	9e09      	ldr	r6, [sp, #36]	; 0x24

	mod->report_array[index].changed = 0;
    8660:	010c      	lsls	r4, r1, #4
    8662:	686b      	ldr	r3, [r5, #4]
    8664:	2100      	movs	r1, #0
    8666:	5519      	strb	r1, [r3, r4]
	mod->report_array[index].type = type;
    8668:	686b      	ldr	r3, [r5, #4]
    866a:	4423      	add	r3, r4
    866c:	705a      	strb	r2, [r3, #1]
	
	mod->report_array[index].payload_length = p_len;
    866e:	686b      	ldr	r3, [r5, #4]
    8670:	4423      	add	r3, r4
    8672:	7098      	strb	r0, [r3, #2]
	mod->report_array[index].helper_length = h_len;
    8674:	686b      	ldr	r3, [r5, #4]
    8676:	4423      	add	r3, r4
    8678:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    867c:	721a      	strb	r2, [r3, #8]
	
	mod->report_array[index].payload = malloc(p_len*sizeof(uint8_t));
    867e:	686b      	ldr	r3, [r5, #4]
    8680:	eb03 0904 	add.w	r9, r3, r4
    8684:	4f1b      	ldr	r7, [pc, #108]	; (86f4 <grid_report_init+0xa0>)
    8686:	47b8      	blx	r7
    8688:	f8c9 0004 	str.w	r0, [r9, #4]
	mod->report_array[index].helper = malloc(h_len*sizeof(uint8_t));
    868c:	686b      	ldr	r3, [r5, #4]
    868e:	eb03 0904 	add.w	r9, r3, r4
    8692:	980a      	ldr	r0, [sp, #40]	; 0x28
    8694:	47b8      	blx	r7
    8696:	f8c9 000c 	str.w	r0, [r9, #12]
	
	
	if (mod->report_array[index].payload == NULL || mod->report_array[index].helper == NULL){
    869a:	686a      	ldr	r2, [r5, #4]
    869c:	4422      	add	r2, r4
    869e:	6853      	ldr	r3, [r2, #4]
    86a0:	b30b      	cbz	r3, 86e6 <grid_report_init+0x92>
    86a2:	68d3      	ldr	r3, [r2, #12]
    86a4:	b313      	cbz	r3, 86ec <grid_report_init+0x98>
		return -1;
	}
	else{
	}
	
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    86a6:	7893      	ldrb	r3, [r2, #2]
    86a8:	b15b      	cbz	r3, 86c2 <grid_report_init+0x6e>
    86aa:	2300      	movs	r3, #0
		mod->report_array[index].payload[i] = p[i];
    86ac:	f818 1003 	ldrb.w	r1, [r8, r3]
    86b0:	6852      	ldr	r2, [r2, #4]
    86b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].payload_length; i++){
    86b4:	3301      	adds	r3, #1
    86b6:	b2db      	uxtb	r3, r3
    86b8:	686a      	ldr	r2, [r5, #4]
    86ba:	4422      	add	r2, r4
    86bc:	7891      	ldrb	r1, [r2, #2]
    86be:	4299      	cmp	r1, r3
    86c0:	d8f4      	bhi.n	86ac <grid_report_init+0x58>
	}
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    86c2:	686a      	ldr	r2, [r5, #4]
    86c4:	4422      	add	r2, r4
    86c6:	7a10      	ldrb	r0, [r2, #8]
    86c8:	b188      	cbz	r0, 86ee <grid_report_init+0x9a>
    86ca:	2300      	movs	r3, #0
		mod->report_array[index].helper[i] = h[i];
    86cc:	5cf1      	ldrb	r1, [r6, r3]
    86ce:	68d2      	ldr	r2, [r2, #12]
    86d0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<mod->report_array[index].helper_length; i++){
    86d2:	3301      	adds	r3, #1
    86d4:	b2db      	uxtb	r3, r3
    86d6:	686a      	ldr	r2, [r5, #4]
    86d8:	4422      	add	r2, r4
    86da:	7a11      	ldrb	r1, [r2, #8]
    86dc:	4299      	cmp	r1, r3
    86de:	d8f5      	bhi.n	86cc <grid_report_init+0x78>
	}
	
	return 0;
    86e0:	2000      	movs	r0, #0
    86e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -1;
    86e6:	20ff      	movs	r0, #255	; 0xff
    86e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    86ec:	20ff      	movs	r0, #255	; 0xff
	
}
    86ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    86f2:	bf00      	nop
    86f4:	0000fe9d 	.word	0x0000fe9d

000086f8 <grid_report_ui_init>:

uint8_t grid_report_ui_init(struct grid_ui_model* mod, uint8_t index, enum grid_report_type_t type, uint8_t* p, uint32_t p_len, uint8_t* h, uint32_t h_len){
    86f8:	b510      	push	{r4, lr}
    86fa:	b084      	sub	sp, #16
	
	grid_report_init(mod, index+mod->report_offset, type, p, p_len, h, h_len);
    86fc:	7844      	ldrb	r4, [r0, #1]
    86fe:	4421      	add	r1, r4
    8700:	9c08      	ldr	r4, [sp, #32]
    8702:	9402      	str	r4, [sp, #8]
    8704:	9c07      	ldr	r4, [sp, #28]
    8706:	9401      	str	r4, [sp, #4]
    8708:	9c06      	ldr	r4, [sp, #24]
    870a:	9400      	str	r4, [sp, #0]
    870c:	b2c9      	uxtb	r1, r1
    870e:	4c02      	ldr	r4, [pc, #8]	; (8718 <grid_report_ui_init+0x20>)
    8710:	47a0      	blx	r4
}
    8712:	b004      	add	sp, #16
    8714:	bd10      	pop	{r4, pc}
    8716:	bf00      	nop
    8718:	00008655 	.word	0x00008655

0000871c <grid_report_sys_init>:

uint8_t grid_report_sys_init(struct grid_ui_model* mod){
		
	for(uint8_t i=0; i<mod->report_offset; i++){
    871c:	7843      	ldrb	r3, [r0, #1]
    871e:	2b00      	cmp	r3, #0
    8720:	f000 80e9 	beq.w	88f6 <grid_report_sys_init+0x1da>
uint8_t grid_report_sys_init(struct grid_ui_model* mod){
    8724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8728:	b091      	sub	sp, #68	; 0x44
    872a:	4607      	mov	r7, r0
	for(uint8_t i=0; i<mod->report_offset; i++){
    872c:	2400      	movs	r4, #0
			
		uint8_t payload_template[30] = {0};
    872e:	4625      	mov	r5, r4
			
			type = GRID_REPORT_TYPE_DIRECT_WEST;
			
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
			
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    8730:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 891c <grid_report_sys_init+0x200>
    8734:	e047      	b.n	87c6 <grid_report_sys_init+0xaa>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_BANK,	GRID_MSG_COMMAND_SYS_BANK_SELECT, 0, GRID_MSG_END_OF_TEXT);
    8736:	2303      	movs	r3, #3
    8738:	9303      	str	r3, [sp, #12]
    873a:	9502      	str	r5, [sp, #8]
    873c:	2365      	movs	r3, #101	; 0x65
    873e:	9301      	str	r3, [sp, #4]
    8740:	2364      	movs	r3, #100	; 0x64
    8742:	9300      	str	r3, [sp, #0]
    8744:	2304      	movs	r3, #4
    8746:	2202      	movs	r2, #2
    8748:	496b      	ldr	r1, [pc, #428]	; (88f8 <grid_report_sys_init+0x1dc>)
    874a:	a808      	add	r0, sp, #32
    874c:	4e6b      	ldr	r6, [pc, #428]	; (88fc <grid_report_sys_init+0x1e0>)
    874e:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    8750:	2602      	movs	r6, #2
    8752:	e01d      	b.n	8790 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_CFG, GRID_MSG_COMMAND_SYS_CFG_REQUEST, GRID_MSG_END_OF_TEXT);
    8754:	2603      	movs	r6, #3
    8756:	9602      	str	r6, [sp, #8]
    8758:	2369      	movs	r3, #105	; 0x69
    875a:	9301      	str	r3, [sp, #4]
    875c:	2368      	movs	r3, #104	; 0x68
    875e:	9300      	str	r3, [sp, #0]
    8760:	2304      	movs	r3, #4
    8762:	2202      	movs	r2, #2
    8764:	4966      	ldr	r1, [pc, #408]	; (8900 <grid_report_sys_init+0x1e4>)
    8766:	a808      	add	r0, sp, #32
    8768:	f8df 9190 	ldr.w	r9, [pc, #400]	; 88fc <grid_report_sys_init+0x1e0>
    876c:	47c8      	blx	r9
    876e:	e00f      	b.n	8790 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%02x%02x%02x%02x%c", GRID_MSG_START_OF_TEXT, GRID_MSG_PROTOCOL_SYS, GRID_MSG_COMMAND_SYS_HEARTBEAT, GRID_MSG_COMMAND_SYS_HEARTBEAT_ALIVE, grid_sys_get_hwcfg(), GRID_MSG_END_OF_TEXT);
    8770:	4b64      	ldr	r3, [pc, #400]	; (8904 <grid_report_sys_init+0x1e8>)
    8772:	4798      	blx	r3
    8774:	2303      	movs	r3, #3
    8776:	9303      	str	r3, [sp, #12]
    8778:	9002      	str	r0, [sp, #8]
    877a:	2367      	movs	r3, #103	; 0x67
    877c:	9301      	str	r3, [sp, #4]
    877e:	2366      	movs	r3, #102	; 0x66
    8780:	9300      	str	r3, [sp, #0]
    8782:	2304      	movs	r3, #4
    8784:	2202      	movs	r2, #2
    8786:	495c      	ldr	r1, [pc, #368]	; (88f8 <grid_report_sys_init+0x1dc>)
    8788:	a808      	add	r0, sp, #32
    878a:	4e5c      	ldr	r6, [pc, #368]	; (88fc <grid_report_sys_init+0x1e0>)
    878c:	47b0      	blx	r6
			type = GRID_REPORT_TYPE_BROADCAST;
    878e:	2602      	movs	r6, #2
		}
		
		
		
				
		uint8_t payload_length = strlen(payload_template);
    8790:	a808      	add	r0, sp, #32
    8792:	47c0      	blx	r8

		uint8_t helper_template[2];
		
		helper_template[0] = 0;
    8794:	f88d 501c 	strb.w	r5, [sp, #28]
		helper_template[1] = 0;
    8798:	f88d 501d 	strb.w	r5, [sp, #29]
		
		uint8_t helper_length = 2;
		
	
		
		uint8_t error = grid_report_init(mod, i, type, payload_template, payload_length, helper_template, helper_length);
    879c:	2302      	movs	r3, #2
    879e:	9302      	str	r3, [sp, #8]
    87a0:	ab07      	add	r3, sp, #28
    87a2:	9301      	str	r3, [sp, #4]
    87a4:	b2c0      	uxtb	r0, r0
    87a6:	9000      	str	r0, [sp, #0]
    87a8:	ab08      	add	r3, sp, #32
    87aa:	4632      	mov	r2, r6
    87ac:	4621      	mov	r1, r4
    87ae:	4638      	mov	r0, r7
    87b0:	4e55      	ldr	r6, [pc, #340]	; (8908 <grid_report_sys_init+0x1ec>)
    87b2:	47b0      	blx	r6
		
		if (error != 0){
    87b4:	2800      	cmp	r0, #0
    87b6:	f040 809b 	bne.w	88f0 <grid_report_sys_init+0x1d4>
	for(uint8_t i=0; i<mod->report_offset; i++){
    87ba:	3401      	adds	r4, #1
    87bc:	b2e4      	uxtb	r4, r4
    87be:	787b      	ldrb	r3, [r7, #1]
    87c0:	42a3      	cmp	r3, r4
    87c2:	f240 8095 	bls.w	88f0 <grid_report_sys_init+0x1d4>
		uint8_t payload_template[30] = {0};
    87c6:	221e      	movs	r2, #30
    87c8:	4629      	mov	r1, r5
    87ca:	a808      	add	r0, sp, #32
    87cc:	4b4f      	ldr	r3, [pc, #316]	; (890c <grid_report_sys_init+0x1f0>)
    87ce:	4798      	blx	r3
		if (i == GRID_REPORT_INDEX_MAPMODE){ // MAPMODE
    87d0:	2c05      	cmp	r4, #5
    87d2:	d0b0      	beq.n	8736 <grid_report_sys_init+0x1a>
		else if (i == GRID_REPORT_INDEX_CFG_REQUEST){ // CONFIGURATION REQUEST
    87d4:	2c06      	cmp	r4, #6
    87d6:	d0bd      	beq.n	8754 <grid_report_sys_init+0x38>
		else if (i == GRID_REPORT_INDEX_HEARTBEAT){ // HEARTBEAT
    87d8:	2c00      	cmp	r4, #0
    87da:	d0c9      	beq.n	8770 <grid_report_sys_init+0x54>
		else if (i == GRID_REPORT_INDEX_PING_NORTH){ // PING NORTH
    87dc:	2c01      	cmp	r4, #1
    87de:	d007      	beq.n	87f0 <grid_report_sys_init+0xd4>
		else if (i == GRID_REPORT_INDEX_PING_EAST){ // PING EAST 
    87e0:	2c02      	cmp	r4, #2
    87e2:	d025      	beq.n	8830 <grid_report_sys_init+0x114>
		else if (i == GRID_REPORT_INDEX_PING_SOUTH){ // PING SOUTH
    87e4:	2c03      	cmp	r4, #3
    87e6:	d043      	beq.n	8870 <grid_report_sys_init+0x154>
		else if (i == GRID_REPORT_INDEX_PING_WEST){ // PING WEST
    87e8:	2c04      	cmp	r4, #4
    87ea:	d061      	beq.n	88b0 <grid_report_sys_init+0x194>
		enum grid_report_type_t type = GRID_REPORT_TYPE_UNDEFINED;
    87ec:	462e      	mov	r6, r5
    87ee:	e7cf      	b.n	8790 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    87f0:	4b44      	ldr	r3, [pc, #272]	; (8904 <grid_report_sys_init+0x1e8>)
    87f2:	4798      	blx	r3
    87f4:	2604      	movs	r6, #4
    87f6:	9605      	str	r6, [sp, #20]
    87f8:	23ff      	movs	r3, #255	; 0xff
    87fa:	9304      	str	r3, [sp, #16]
    87fc:	9303      	str	r3, [sp, #12]
    87fe:	9002      	str	r0, [sp, #8]
    8800:	2311      	movs	r3, #17
    8802:	9301      	str	r3, [sp, #4]
    8804:	2307      	movs	r3, #7
    8806:	9300      	str	r3, [sp, #0]
    8808:	230e      	movs	r3, #14
    880a:	2201      	movs	r2, #1
    880c:	4940      	ldr	r1, [pc, #256]	; (8910 <grid_report_sys_init+0x1f4>)
    880e:	a808      	add	r0, sp, #32
    8810:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 88fc <grid_report_sys_init+0x1e0>
    8814:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    8816:	a808      	add	r0, sp, #32
    8818:	47c0      	blx	r8
    881a:	4681      	mov	r9, r0
    881c:	4601      	mov	r1, r0
    881e:	a808      	add	r0, sp, #32
    8820:	4b3c      	ldr	r3, [pc, #240]	; (8914 <grid_report_sys_init+0x1f8>)
    8822:	4798      	blx	r3
    8824:	4602      	mov	r2, r0
    8826:	4649      	mov	r1, r9
    8828:	a808      	add	r0, sp, #32
    882a:	4b3b      	ldr	r3, [pc, #236]	; (8918 <grid_report_sys_init+0x1fc>)
    882c:	4798      	blx	r3
    882e:	e7af      	b.n	8790 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    8830:	4b34      	ldr	r3, [pc, #208]	; (8904 <grid_report_sys_init+0x1e8>)
    8832:	4798      	blx	r3
    8834:	2304      	movs	r3, #4
    8836:	9305      	str	r3, [sp, #20]
    8838:	23ff      	movs	r3, #255	; 0xff
    883a:	9304      	str	r3, [sp, #16]
    883c:	9303      	str	r3, [sp, #12]
    883e:	9002      	str	r0, [sp, #8]
    8840:	2312      	movs	r3, #18
    8842:	9301      	str	r3, [sp, #4]
    8844:	2307      	movs	r3, #7
    8846:	9300      	str	r3, [sp, #0]
    8848:	230e      	movs	r3, #14
    884a:	2201      	movs	r2, #1
    884c:	4930      	ldr	r1, [pc, #192]	; (8910 <grid_report_sys_init+0x1f4>)
    884e:	a808      	add	r0, sp, #32
    8850:	4e2a      	ldr	r6, [pc, #168]	; (88fc <grid_report_sys_init+0x1e0>)
    8852:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    8854:	a808      	add	r0, sp, #32
    8856:	47c0      	blx	r8
    8858:	4606      	mov	r6, r0
    885a:	4601      	mov	r1, r0
    885c:	a808      	add	r0, sp, #32
    885e:	4b2d      	ldr	r3, [pc, #180]	; (8914 <grid_report_sys_init+0x1f8>)
    8860:	4798      	blx	r3
    8862:	4602      	mov	r2, r0
    8864:	4631      	mov	r1, r6
    8866:	a808      	add	r0, sp, #32
    8868:	4b2b      	ldr	r3, [pc, #172]	; (8918 <grid_report_sys_init+0x1fc>)
    886a:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_EAST;
    886c:	2605      	movs	r6, #5
    886e:	e78f      	b.n	8790 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    8870:	4b24      	ldr	r3, [pc, #144]	; (8904 <grid_report_sys_init+0x1e8>)
    8872:	4798      	blx	r3
    8874:	2304      	movs	r3, #4
    8876:	9305      	str	r3, [sp, #20]
    8878:	23ff      	movs	r3, #255	; 0xff
    887a:	9304      	str	r3, [sp, #16]
    887c:	9303      	str	r3, [sp, #12]
    887e:	9002      	str	r0, [sp, #8]
    8880:	2313      	movs	r3, #19
    8882:	9301      	str	r3, [sp, #4]
    8884:	2307      	movs	r3, #7
    8886:	9300      	str	r3, [sp, #0]
    8888:	230e      	movs	r3, #14
    888a:	2201      	movs	r2, #1
    888c:	4920      	ldr	r1, [pc, #128]	; (8910 <grid_report_sys_init+0x1f4>)
    888e:	a808      	add	r0, sp, #32
    8890:	4e1a      	ldr	r6, [pc, #104]	; (88fc <grid_report_sys_init+0x1e0>)
    8892:	47b0      	blx	r6
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    8894:	a808      	add	r0, sp, #32
    8896:	47c0      	blx	r8
    8898:	4606      	mov	r6, r0
    889a:	4601      	mov	r1, r0
    889c:	a808      	add	r0, sp, #32
    889e:	4b1d      	ldr	r3, [pc, #116]	; (8914 <grid_report_sys_init+0x1f8>)
    88a0:	4798      	blx	r3
    88a2:	4602      	mov	r2, r0
    88a4:	4631      	mov	r1, r6
    88a6:	a808      	add	r0, sp, #32
    88a8:	4b1b      	ldr	r3, [pc, #108]	; (8918 <grid_report_sys_init+0x1fc>)
    88aa:	4798      	blx	r3
			type = GRID_REPORT_TYPE_DIRECT_SOUTH;
    88ac:	2606      	movs	r6, #6
    88ae:	e76f      	b.n	8790 <grid_report_sys_init+0x74>
			sprintf(payload_template, "%c%c%c%c%02x%02x%02x%c00\n", GRID_MSG_START_OF_HEADING, GRID_MSG_DIRECT, GRID_MSG_BELL, direction, grid_sys_get_hwcfg(), 255, 255, GRID_MSG_END_OF_TRANSMISSION);
    88b0:	4b14      	ldr	r3, [pc, #80]	; (8904 <grid_report_sys_init+0x1e8>)
    88b2:	4798      	blx	r3
    88b4:	2304      	movs	r3, #4
    88b6:	9305      	str	r3, [sp, #20]
    88b8:	23ff      	movs	r3, #255	; 0xff
    88ba:	9304      	str	r3, [sp, #16]
    88bc:	9303      	str	r3, [sp, #12]
    88be:	9002      	str	r0, [sp, #8]
    88c0:	2314      	movs	r3, #20
    88c2:	9301      	str	r3, [sp, #4]
    88c4:	2607      	movs	r6, #7
    88c6:	9600      	str	r6, [sp, #0]
    88c8:	230e      	movs	r3, #14
    88ca:	2201      	movs	r2, #1
    88cc:	4910      	ldr	r1, [pc, #64]	; (8910 <grid_report_sys_init+0x1f4>)
    88ce:	a808      	add	r0, sp, #32
    88d0:	f8df 9028 	ldr.w	r9, [pc, #40]	; 88fc <grid_report_sys_init+0x1e0>
    88d4:	47c8      	blx	r9
			grid_msg_checksum_write(payload_template, strlen(payload_template), grid_msg_checksum_calculate(payload_template, strlen(payload_template)));
    88d6:	a808      	add	r0, sp, #32
    88d8:	47c0      	blx	r8
    88da:	4681      	mov	r9, r0
    88dc:	4601      	mov	r1, r0
    88de:	a808      	add	r0, sp, #32
    88e0:	4b0c      	ldr	r3, [pc, #48]	; (8914 <grid_report_sys_init+0x1f8>)
    88e2:	4798      	blx	r3
    88e4:	4602      	mov	r2, r0
    88e6:	4649      	mov	r1, r9
    88e8:	a808      	add	r0, sp, #32
    88ea:	4b0b      	ldr	r3, [pc, #44]	; (8918 <grid_report_sys_init+0x1fc>)
    88ec:	4798      	blx	r3
    88ee:	e74f      	b.n	8790 <grid_report_sys_init+0x74>
			}
			
		}
	
	}
}
    88f0:	b011      	add	sp, #68	; 0x44
    88f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    88f6:	4770      	bx	lr
    88f8:	000116a8 	.word	0x000116a8
    88fc:	00010325 	.word	0x00010325
    8900:	000116c0 	.word	0x000116c0
    8904:	00008239 	.word	0x00008239
    8908:	00008655 	.word	0x00008655
    890c:	0000fec3 	.word	0x0000fec3
    8910:	000116d4 	.word	0x000116d4
    8914:	000084d5 	.word	0x000084d5
    8918:	00008511 	.word	0x00008511
    891c:	0001036d 	.word	0x0001036d

00008920 <grid_report_render>:



uint8_t grid_report_render(struct grid_ui_model* mod, uint8_t index, uint8_t* target){
	
	struct grid_ui_report* rep = &mod->report_array[index];
    8920:	6843      	ldr	r3, [r0, #4]
    8922:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	
	for(uint8_t i=0; i<rep->payload_length; i++){
    8926:	7888      	ldrb	r0, [r1, #2]
    8928:	b140      	cbz	r0, 893c <grid_report_render+0x1c>
    892a:	2300      	movs	r3, #0
		target[i] = rep->payload[i];
    892c:	6848      	ldr	r0, [r1, #4]
    892e:	5cc0      	ldrb	r0, [r0, r3]
    8930:	54d0      	strb	r0, [r2, r3]
	for(uint8_t i=0; i<rep->payload_length; i++){
    8932:	3301      	adds	r3, #1
    8934:	b2db      	uxtb	r3, r3
    8936:	7888      	ldrb	r0, [r1, #2]
    8938:	4298      	cmp	r0, r3
    893a:	d8f7      	bhi.n	892c <grid_report_render+0xc>
	}
	
	return rep->payload_length;
}
    893c:	4770      	bx	lr

0000893e <grid_report_ui_set_changed_flag>:
	return mod->report_array[index+mod->report_offset].changed;
}

void grid_report_ui_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index+mod->report_offset].changed = 1;
    893e:	7843      	ldrb	r3, [r0, #1]
    8940:	4419      	add	r1, r3
    8942:	6843      	ldr	r3, [r0, #4]
    8944:	0109      	lsls	r1, r1, #4
    8946:	2201      	movs	r2, #1
    8948:	545a      	strb	r2, [r3, r1]
    894a:	4770      	bx	lr

0000894c <grid_report_sys_set_changed_flag>:
	return mod->report_array[index].changed;
}

void grid_report_sys_set_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 1;
    894c:	6843      	ldr	r3, [r0, #4]
    894e:	0109      	lsls	r1, r1, #4
    8950:	2201      	movs	r2, #1
    8952:	545a      	strb	r2, [r3, r1]
    8954:	4770      	bx	lr

00008956 <grid_report_sys_clear_changed_flag>:
}

void grid_report_sys_clear_changed_flag(struct grid_ui_model* mod, uint8_t index){
	
	mod->report_array[index].changed = 0;
    8956:	6843      	ldr	r3, [r0, #4]
    8958:	0109      	lsls	r1, r1, #4
    895a:	2200      	movs	r2, #0
    895c:	545a      	strb	r2, [r3, r1]
    895e:	4770      	bx	lr

00008960 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    8960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8964:	b0cf      	sub	sp, #316	; 0x13c
    8966:	9007      	str	r0, [sp, #28]
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    8968:	4b9a      	ldr	r3, [pc, #616]	; (8bd4 <grid_port_process_ui+0x274>)
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    8970:	2b00      	cmp	r3, #0
    8972:	f000 80a7 	beq.w	8ac4 <grid_port_process_ui+0x164>
	return mod->report_array[index].changed;
    8976:	4b97      	ldr	r3, [pc, #604]	; (8bd4 <grid_port_process_ui+0x274>)
    8978:	6858      	ldr	r0, [r3, #4]
    897a:	2300      	movs	r3, #0
    897c:	469a      	mov	sl, r3
    897e:	4619      	mov	r1, r3
    8980:	469b      	mov	fp, r3
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    8982:	4c94      	ldr	r4, [pc, #592]	; (8bd4 <grid_port_process_ui+0x274>)
    8984:	e013      	b.n	89ae <grid_port_process_ui+0x4e>
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    8986:	f10a 0a01 	add.w	sl, sl, #1
    898a:	fa5f fa8a 	uxtb.w	sl, sl
			(type == GRID_REPORT_TYPE_DIRECT_EAST)?message_direct_available++:1;
    898e:	2a05      	cmp	r2, #5
    8990:	d122      	bne.n	89d8 <grid_port_process_ui+0x78>
    8992:	3101      	adds	r1, #1
    8994:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_LOCAL)?message_local_available++:1;
    8996:	2a01      	cmp	r2, #1
    8998:	bf04      	itt	eq
    899a:	f10b 0b01 	addeq.w	fp, fp, #1
    899e:	fa5f fb8b 	uxtbeq.w	fp, fp
	for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    89a2:	3301      	adds	r3, #1
    89a4:	b2db      	uxtb	r3, r3
    89a6:	7822      	ldrb	r2, [r4, #0]
    89a8:	b2d2      	uxtb	r2, r2
    89aa:	429a      	cmp	r2, r3
    89ac:	d919      	bls.n	89e2 <grid_port_process_ui+0x82>
	return mod->report_array[index].changed;
    89ae:	011a      	lsls	r2, r3, #4
    89b0:	1885      	adds	r5, r0, r2
		if (grid_report_sys_get_changed_flag(mod, i)){
    89b2:	5c82      	ldrb	r2, [r0, r2]
    89b4:	2a00      	cmp	r2, #0
    89b6:	d0f4      	beq.n	89a2 <grid_port_process_ui+0x42>
	return mod->report_array[index].type;
    89b8:	786a      	ldrb	r2, [r5, #1]
			(type == GRID_REPORT_TYPE_BROADCAST)?message_broadcast_available++:1;	
    89ba:	2a02      	cmp	r2, #2
    89bc:	d0e3      	beq.n	8986 <grid_port_process_ui+0x26>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    89be:	2a03      	cmp	r2, #3
    89c0:	d008      	beq.n	89d4 <grid_port_process_ui+0x74>
			(type == GRID_REPORT_TYPE_DIRECT_NORTH)?message_direct_available++:1;
    89c2:	2a04      	cmp	r2, #4
    89c4:	d1e3      	bne.n	898e <grid_port_process_ui+0x2e>
    89c6:	3101      	adds	r1, #1
    89c8:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_DIRECT_WEST)?message_direct_available++:1;
    89ca:	2a07      	cmp	r2, #7
    89cc:	d1e3      	bne.n	8996 <grid_port_process_ui+0x36>
    89ce:	3101      	adds	r1, #1
    89d0:	b2c9      	uxtb	r1, r1
    89d2:	e7e6      	b.n	89a2 <grid_port_process_ui+0x42>
			(type == GRID_REPORT_TYPE_DIRECT_ALL)?message_direct_available++:1;
    89d4:	3101      	adds	r1, #1
    89d6:	b2c9      	uxtb	r1, r1
			(type == GRID_REPORT_TYPE_DIRECT_SOUTH)?message_direct_available++:1;
    89d8:	2a06      	cmp	r2, #6
    89da:	d1f6      	bne.n	89ca <grid_port_process_ui+0x6a>
    89dc:	3101      	adds	r1, #1
    89de:	b2c9      	uxtb	r1, r1
    89e0:	e7df      	b.n	89a2 <grid_port_process_ui+0x42>
	if (message_direct_available){
    89e2:	2900      	cmp	r1, #0
    89e4:	d067      	beq.n	8ab6 <grid_port_process_ui+0x156>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    89e6:	4b7b      	ldr	r3, [pc, #492]	; (8bd4 <grid_port_process_ui+0x274>)
    89e8:	781b      	ldrb	r3, [r3, #0]
    89ea:	2b00      	cmp	r3, #0
    89ec:	d063      	beq.n	8ab6 <grid_port_process_ui+0x156>
    89ee:	2500      	movs	r5, #0
	return mod->report_array[index].changed;
    89f0:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8bd4 <grid_port_process_ui+0x274>
    89f4:	e00e      	b.n	8a14 <grid_port_process_ui+0xb4>
					target_buffer = &GRID_PORT_U.rx_buffer;
    89f6:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8c0c <grid_port_process_ui+0x2ac>
				if (grid_buffer_write_init(target_buffer, length)){
    89fa:	b2b1      	uxth	r1, r6
    89fc:	4640      	mov	r0, r8
    89fe:	4b76      	ldr	r3, [pc, #472]	; (8bd8 <grid_port_process_ui+0x278>)
    8a00:	4798      	blx	r3
    8a02:	2800      	cmp	r0, #0
    8a04:	d141      	bne.n	8a8a <grid_port_process_ui+0x12a>
		for (uint8_t i=0; i<grid_ui_state.report_length; i++){
    8a06:	3501      	adds	r5, #1
    8a08:	b2ed      	uxtb	r5, r5
    8a0a:	f899 3000 	ldrb.w	r3, [r9]
    8a0e:	b2db      	uxtb	r3, r3
    8a10:	42ab      	cmp	r3, r5
    8a12:	d950      	bls.n	8ab6 <grid_port_process_ui+0x156>
	return mod->report_array[index].changed;
    8a14:	012c      	lsls	r4, r5, #4
    8a16:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8a1a:	191a      	adds	r2, r3, r4
			if (changed && (type == GRID_REPORT_TYPE_DIRECT_ALL || type == GRID_REPORT_TYPE_DIRECT_NORTH || type == GRID_REPORT_TYPE_DIRECT_EAST || type == GRID_REPORT_TYPE_DIRECT_SOUTH || type == GRID_REPORT_TYPE_DIRECT_WEST)){
    8a1c:	5d1b      	ldrb	r3, [r3, r4]
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d0f1      	beq.n	8a06 <grid_port_process_ui+0xa6>
    8a22:	7853      	ldrb	r3, [r2, #1]
    8a24:	3b03      	subs	r3, #3
    8a26:	b2db      	uxtb	r3, r3
    8a28:	2b04      	cmp	r3, #4
    8a2a:	d8ec      	bhi.n	8a06 <grid_port_process_ui+0xa6>
				uint8_t message[256] = {0};
    8a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    8a30:	2100      	movs	r1, #0
    8a32:	a80e      	add	r0, sp, #56	; 0x38
    8a34:	4b69      	ldr	r3, [pc, #420]	; (8bdc <grid_port_process_ui+0x27c>)
    8a36:	4798      	blx	r3
				CRITICAL_SECTION_ENTER()			
    8a38:	a809      	add	r0, sp, #36	; 0x24
    8a3a:	4b69      	ldr	r3, [pc, #420]	; (8be0 <grid_port_process_ui+0x280>)
    8a3c:	4798      	blx	r3
				grid_report_render(mod, i, &message[length]);
    8a3e:	aa0e      	add	r2, sp, #56	; 0x38
    8a40:	4629      	mov	r1, r5
    8a42:	4648      	mov	r0, r9
    8a44:	4b67      	ldr	r3, [pc, #412]	; (8be4 <grid_port_process_ui+0x284>)
    8a46:	4798      	blx	r3
				length += strlen(&message[length]);
    8a48:	a80e      	add	r0, sp, #56	; 0x38
    8a4a:	4b67      	ldr	r3, [pc, #412]	; (8be8 <grid_port_process_ui+0x288>)
    8a4c:	4798      	blx	r3
    8a4e:	4606      	mov	r6, r0
				CRITICAL_SECTION_LEAVE()			
    8a50:	a809      	add	r0, sp, #36	; 0x24
    8a52:	4b66      	ldr	r3, [pc, #408]	; (8bec <grid_port_process_ui+0x28c>)
    8a54:	4798      	blx	r3
	return mod->report_array[index].type;
    8a56:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8a5a:	441c      	add	r4, r3
    8a5c:	7863      	ldrb	r3, [r4, #1]
				if (type == GRID_REPORT_TYPE_DIRECT_ALL){
    8a5e:	2b03      	cmp	r3, #3
    8a60:	d0c9      	beq.n	89f6 <grid_port_process_ui+0x96>
				else if (type == GRID_REPORT_TYPE_DIRECT_NORTH){
    8a62:	2b04      	cmp	r3, #4
    8a64:	d008      	beq.n	8a78 <grid_port_process_ui+0x118>
				else if (type == GRID_REPORT_TYPE_DIRECT_EAST){
    8a66:	2b05      	cmp	r3, #5
    8a68:	d009      	beq.n	8a7e <grid_port_process_ui+0x11e>
				else if (type == GRID_REPORT_TYPE_DIRECT_SOUTH){
    8a6a:	2b06      	cmp	r3, #6
    8a6c:	d00a      	beq.n	8a84 <grid_port_process_ui+0x124>
					target_buffer = &GRID_PORT_W.tx_buffer;
    8a6e:	4a60      	ldr	r2, [pc, #384]	; (8bf0 <grid_port_process_ui+0x290>)
    8a70:	2b07      	cmp	r3, #7
    8a72:	bf08      	it	eq
    8a74:	4690      	moveq	r8, r2
    8a76:	e7c0      	b.n	89fa <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_N.tx_buffer;
    8a78:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8c10 <grid_port_process_ui+0x2b0>
    8a7c:	e7bd      	b.n	89fa <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_E.tx_buffer;
    8a7e:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8c14 <grid_port_process_ui+0x2b4>
    8a82:	e7ba      	b.n	89fa <grid_port_process_ui+0x9a>
					target_buffer = &GRID_PORT_S.tx_buffer;
    8a84:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8c18 <grid_port_process_ui+0x2b8>
    8a88:	e7b7      	b.n	89fa <grid_port_process_ui+0x9a>
					grid_report_sys_clear_changed_flag(mod, i);
    8a8a:	4629      	mov	r1, r5
    8a8c:	4648      	mov	r0, r9
    8a8e:	4b59      	ldr	r3, [pc, #356]	; (8bf4 <grid_port_process_ui+0x294>)
    8a90:	4798      	blx	r3
					for(uint32_t i = 0; i<length; i++){
    8a92:	b166      	cbz	r6, 8aae <grid_port_process_ui+0x14e>
    8a94:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    8a98:	ab4e      	add	r3, sp, #312	; 0x138
    8a9a:	441e      	add	r6, r3
    8a9c:	f2a6 1601 	subw	r6, r6, #257	; 0x101
						grid_buffer_write_character(target_buffer, message[i]);
    8aa0:	4f55      	ldr	r7, [pc, #340]	; (8bf8 <grid_port_process_ui+0x298>)
    8aa2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    8aa6:	4640      	mov	r0, r8
    8aa8:	47b8      	blx	r7
					for(uint32_t i = 0; i<length; i++){
    8aaa:	42b4      	cmp	r4, r6
    8aac:	d1f9      	bne.n	8aa2 <grid_port_process_ui+0x142>
					grid_buffer_write_acknowledge(target_buffer);
    8aae:	4640      	mov	r0, r8
    8ab0:	4b52      	ldr	r3, [pc, #328]	; (8bfc <grid_port_process_ui+0x29c>)
    8ab2:	4798      	blx	r3
    8ab4:	e7a7      	b.n	8a06 <grid_port_process_ui+0xa6>
	if (message_local_available && por->cooldown<20){
    8ab6:	f1bb 0f00 	cmp.w	fp, #0
    8aba:	d003      	beq.n	8ac4 <grid_port_process_ui+0x164>
    8abc:	9b07      	ldr	r3, [sp, #28]
    8abe:	681b      	ldr	r3, [r3, #0]
    8ac0:	2b13      	cmp	r3, #19
    8ac2:	d935      	bls.n	8b30 <grid_port_process_ui+0x1d0>
	if (por->cooldown > 15){
    8ac4:	9b07      	ldr	r3, [sp, #28]
    8ac6:	681b      	ldr	r3, [r3, #0]
    8ac8:	2b0f      	cmp	r3, #15
    8aca:	f200 80f0 	bhi.w	8cae <grid_port_process_ui+0x34e>
	else if (por->cooldown>0){
    8ace:	b113      	cbz	r3, 8ad6 <grid_port_process_ui+0x176>
		por->cooldown--;
    8ad0:	3b01      	subs	r3, #1
    8ad2:	9a07      	ldr	r2, [sp, #28]
    8ad4:	6013      	str	r3, [r2, #0]
	if (message_broadcast_available){
    8ad6:	f1ba 0f00 	cmp.w	sl, #0
    8ada:	f000 80eb 	beq.w	8cb4 <grid_port_process_ui+0x354>
		uint8_t message[256] = {0};
    8ade:	f44f 7280 	mov.w	r2, #256	; 0x100
    8ae2:	2100      	movs	r1, #0
    8ae4:	a80e      	add	r0, sp, #56	; 0x38
    8ae6:	4b3d      	ldr	r3, [pc, #244]	; (8bdc <grid_port_process_ui+0x27c>)
    8ae8:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    8aea:	4b45      	ldr	r3, [pc, #276]	; (8c00 <grid_port_process_ui+0x2a0>)
    8aec:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    8af0:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    8af2:	2117      	movs	r1, #23
    8af4:	9105      	str	r1, [sp, #20]
    8af6:	9304      	str	r3, [sp, #16]
    8af8:	237f      	movs	r3, #127	; 0x7f
    8afa:	9303      	str	r3, [sp, #12]
    8afc:	9302      	str	r3, [sp, #8]
    8afe:	9201      	str	r2, [sp, #4]
    8b00:	2300      	movs	r3, #0
    8b02:	9300      	str	r3, [sp, #0]
    8b04:	230f      	movs	r3, #15
    8b06:	2201      	movs	r2, #1
    8b08:	493e      	ldr	r1, [pc, #248]	; (8c04 <grid_port_process_ui+0x2a4>)
    8b0a:	a80e      	add	r0, sp, #56	; 0x38
    8b0c:	4c3e      	ldr	r4, [pc, #248]	; (8c08 <grid_port_process_ui+0x2a8>)
    8b0e:	47a0      	blx	r4
		length += strlen(&message[length]);
    8b10:	a80e      	add	r0, sp, #56	; 0x38
    8b12:	4b35      	ldr	r3, [pc, #212]	; (8be8 <grid_port_process_ui+0x288>)
    8b14:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    8b16:	4b2f      	ldr	r3, [pc, #188]	; (8bd4 <grid_port_process_ui+0x274>)
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	f000 80ca 	beq.w	8cb4 <grid_port_process_ui+0x354>
    8b20:	4605      	mov	r5, r0
    8b22:	2400      	movs	r4, #0
    8b24:	46a1      	mov	r9, r4
			CRITICAL_SECTION_ENTER()
    8b26:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8be0 <grid_port_process_ui+0x280>
	return mod->report_array[index].changed;
    8b2a:	4e2a      	ldr	r6, [pc, #168]	; (8bd4 <grid_port_process_ui+0x274>)
			CRITICAL_SECTION_LEAVE()
    8b2c:	4f2f      	ldr	r7, [pc, #188]	; (8bec <grid_port_process_ui+0x28c>)
    8b2e:	e0cc      	b.n	8cca <grid_port_process_ui+0x36a>
		uint8_t message[256] = {0};
    8b30:	f44f 7280 	mov.w	r2, #256	; 0x100
    8b34:	2100      	movs	r1, #0
    8b36:	a80e      	add	r0, sp, #56	; 0x38
    8b38:	4b28      	ldr	r3, [pc, #160]	; (8bdc <grid_port_process_ui+0x27c>)
    8b3a:	4798      	blx	r3
		uint8_t id = grid_sys_state.next_broadcast_message_id;
    8b3c:	4b30      	ldr	r3, [pc, #192]	; (8c00 <grid_port_process_ui+0x2a0>)
    8b3e:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
		uint8_t age = grid_sys_state.age;
    8b42:	781b      	ldrb	r3, [r3, #0]
		sprintf(&message[length],
    8b44:	2117      	movs	r1, #23
    8b46:	9105      	str	r1, [sp, #20]
    8b48:	9304      	str	r3, [sp, #16]
    8b4a:	237f      	movs	r3, #127	; 0x7f
    8b4c:	9303      	str	r3, [sp, #12]
    8b4e:	9302      	str	r3, [sp, #8]
    8b50:	9201      	str	r2, [sp, #4]
    8b52:	2300      	movs	r3, #0
    8b54:	9300      	str	r3, [sp, #0]
    8b56:	230f      	movs	r3, #15
    8b58:	2201      	movs	r2, #1
    8b5a:	492a      	ldr	r1, [pc, #168]	; (8c04 <grid_port_process_ui+0x2a4>)
    8b5c:	a80e      	add	r0, sp, #56	; 0x38
    8b5e:	4c2a      	ldr	r4, [pc, #168]	; (8c08 <grid_port_process_ui+0x2a8>)
    8b60:	47a0      	blx	r4
		length += strlen(&message[length]);
    8b62:	a80e      	add	r0, sp, #56	; 0x38
    8b64:	4b20      	ldr	r3, [pc, #128]	; (8be8 <grid_port_process_ui+0x288>)
    8b66:	4798      	blx	r3
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    8b68:	4b1a      	ldr	r3, [pc, #104]	; (8bd4 <grid_port_process_ui+0x274>)
    8b6a:	781b      	ldrb	r3, [r3, #0]
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	d0a9      	beq.n	8ac4 <grid_port_process_ui+0x164>
    8b70:	4605      	mov	r5, r0
    8b72:	2400      	movs	r4, #0
    8b74:	46a1      	mov	r9, r4
			CRITICAL_SECTION_ENTER()
    8b76:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8be0 <grid_port_process_ui+0x280>
	return mod->report_array[index].changed;
    8b7a:	4e16      	ldr	r6, [pc, #88]	; (8bd4 <grid_port_process_ui+0x274>)
			CRITICAL_SECTION_LEAVE()
    8b7c:	4f1b      	ldr	r7, [pc, #108]	; (8bec <grid_port_process_ui+0x28c>)
    8b7e:	e007      	b.n	8b90 <grid_port_process_ui+0x230>
    8b80:	a80a      	add	r0, sp, #40	; 0x28
    8b82:	47b8      	blx	r7
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    8b84:	3401      	adds	r4, #1
    8b86:	b2e4      	uxtb	r4, r4
    8b88:	7833      	ldrb	r3, [r6, #0]
    8b8a:	b2db      	uxtb	r3, r3
    8b8c:	42a3      	cmp	r3, r4
    8b8e:	d945      	bls.n	8c1c <grid_port_process_ui+0x2bc>
			if (length>200){
    8b90:	2dc8      	cmp	r5, #200	; 0xc8
    8b92:	d8f7      	bhi.n	8b84 <grid_port_process_ui+0x224>
			CRITICAL_SECTION_ENTER()
    8b94:	a80a      	add	r0, sp, #40	; 0x28
    8b96:	47c0      	blx	r8
	return mod->report_array[index].changed;
    8b98:	0123      	lsls	r3, r4, #4
    8b9a:	6872      	ldr	r2, [r6, #4]
    8b9c:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_LOCAL){
    8b9e:	5cd3      	ldrb	r3, [r2, r3]
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d0ed      	beq.n	8b80 <grid_port_process_ui+0x220>
    8ba4:	784b      	ldrb	r3, [r1, #1]
    8ba6:	2b01      	cmp	r3, #1
    8ba8:	d1ea      	bne.n	8b80 <grid_port_process_ui+0x220>
				packetvalid++;
    8baa:	f109 0901 	add.w	r9, r9, #1
    8bae:	fa5f f989 	uxtb.w	r9, r9
				grid_report_render(mod, i, &message[length]);
    8bb2:	ab0e      	add	r3, sp, #56	; 0x38
    8bb4:	eb03 0b05 	add.w	fp, r3, r5
    8bb8:	465a      	mov	r2, fp
    8bba:	4621      	mov	r1, r4
    8bbc:	4630      	mov	r0, r6
    8bbe:	4b09      	ldr	r3, [pc, #36]	; (8be4 <grid_port_process_ui+0x284>)
    8bc0:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    8bc2:	4621      	mov	r1, r4
    8bc4:	4630      	mov	r0, r6
    8bc6:	4b0b      	ldr	r3, [pc, #44]	; (8bf4 <grid_port_process_ui+0x294>)
    8bc8:	4798      	blx	r3
				length += strlen(&message[length]);
    8bca:	4658      	mov	r0, fp
    8bcc:	4b06      	ldr	r3, [pc, #24]	; (8be8 <grid_port_process_ui+0x288>)
    8bce:	4798      	blx	r3
    8bd0:	4405      	add	r5, r0
    8bd2:	e7d5      	b.n	8b80 <grid_port_process_ui+0x220>
    8bd4:	20003270 	.word	0x20003270
    8bd8:	00005971 	.word	0x00005971
    8bdc:	0000fec3 	.word	0x0000fec3
    8be0:	00009011 	.word	0x00009011
    8be4:	00008921 	.word	0x00008921
    8be8:	0001036d 	.word	0x0001036d
    8bec:	0000901f 	.word	0x0000901f
    8bf0:	20004700 	.word	0x20004700
    8bf4:	00008957 	.word	0x00008957
    8bf8:	000059a1 	.word	0x000059a1
    8bfc:	000059bd 	.word	0x000059bd
    8c00:	20003280 	.word	0x20003280
    8c04:	000116f0 	.word	0x000116f0
    8c08:	00010325 	.word	0x00010325
    8c0c:	20003250 	.word	0x20003250
    8c10:	200021ec 	.word	0x200021ec
    8c14:	20007730 	.word	0x20007730
    8c18:	2000571c 	.word	0x2000571c
		if (packetvalid){
    8c1c:	f1b9 0f00 	cmp.w	r9, #0
    8c20:	f43f af50 	beq.w	8ac4 <grid_port_process_ui+0x164>
			grid_sys_state.next_broadcast_message_id++;
    8c24:	4a60      	ldr	r2, [pc, #384]	; (8da8 <grid_port_process_ui+0x448>)
    8c26:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    8c2a:	3301      	adds	r3, #1
    8c2c:	b2db      	uxtb	r3, r3
    8c2e:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    8c32:	ac0e      	add	r4, sp, #56	; 0x38
    8c34:	1966      	adds	r6, r4, r5
    8c36:	2204      	movs	r2, #4
    8c38:	495c      	ldr	r1, [pc, #368]	; (8dac <grid_port_process_ui+0x44c>)
    8c3a:	4630      	mov	r0, r6
    8c3c:	4f5c      	ldr	r7, [pc, #368]	; (8db0 <grid_port_process_ui+0x450>)
    8c3e:	47b8      	blx	r7
			length += strlen(&message[length]);
    8c40:	4630      	mov	r0, r6
    8c42:	4e5c      	ldr	r6, [pc, #368]	; (8db4 <grid_port_process_ui+0x454>)
    8c44:	47b0      	blx	r6
    8c46:	4405      	add	r5, r0
			sprintf(length_string, "%02x", length);
    8c48:	462a      	mov	r2, r5
    8c4a:	495b      	ldr	r1, [pc, #364]	; (8db8 <grid_port_process_ui+0x458>)
    8c4c:	a80c      	add	r0, sp, #48	; 0x30
    8c4e:	47b8      	blx	r7
			message[2] = length_string[0];
    8c50:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    8c54:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    8c56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8c5a:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    8c5c:	4b57      	ldr	r3, [pc, #348]	; (8dbc <grid_port_process_ui+0x45c>)
    8c5e:	6818      	ldr	r0, [r3, #0]
    8c60:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    8c62:	1960      	adds	r0, r4, r5
    8c64:	47b0      	blx	r6
    8c66:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    8c68:	4629      	mov	r1, r5
    8c6a:	4620      	mov	r0, r4
    8c6c:	4b54      	ldr	r3, [pc, #336]	; (8dc0 <grid_port_process_ui+0x460>)
    8c6e:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    8c70:	4602      	mov	r2, r0
    8c72:	4629      	mov	r1, r5
    8c74:	4620      	mov	r0, r4
    8c76:	4b53      	ldr	r3, [pc, #332]	; (8dc4 <grid_port_process_ui+0x464>)
    8c78:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, length)){
    8c7a:	b2a9      	uxth	r1, r5
    8c7c:	4852      	ldr	r0, [pc, #328]	; (8dc8 <grid_port_process_ui+0x468>)
    8c7e:	4b53      	ldr	r3, [pc, #332]	; (8dcc <grid_port_process_ui+0x46c>)
    8c80:	4798      	blx	r3
    8c82:	2800      	cmp	r0, #0
    8c84:	f43f af1e 	beq.w	8ac4 <grid_port_process_ui+0x164>
				for(uint32_t i = 0; i<length; i++){
    8c88:	b16d      	cbz	r5, 8ca6 <grid_port_process_ui+0x346>
    8c8a:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    8c8e:	ab4e      	add	r3, sp, #312	; 0x138
    8c90:	441d      	add	r5, r3
    8c92:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.tx_buffer, message[i]);
    8c96:	4f4c      	ldr	r7, [pc, #304]	; (8dc8 <grid_port_process_ui+0x468>)
    8c98:	4e4d      	ldr	r6, [pc, #308]	; (8dd0 <grid_port_process_ui+0x470>)
    8c9a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    8c9e:	4638      	mov	r0, r7
    8ca0:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    8ca2:	42a5      	cmp	r5, r4
    8ca4:	d1f9      	bne.n	8c9a <grid_port_process_ui+0x33a>
				grid_buffer_write_acknowledge(&GRID_PORT_U.tx_buffer);
    8ca6:	4848      	ldr	r0, [pc, #288]	; (8dc8 <grid_port_process_ui+0x468>)
    8ca8:	4b4a      	ldr	r3, [pc, #296]	; (8dd4 <grid_port_process_ui+0x474>)
    8caa:	4798      	blx	r3
    8cac:	e70a      	b.n	8ac4 <grid_port_process_ui+0x164>
		por->cooldown--;
    8cae:	3b01      	subs	r3, #1
    8cb0:	9a07      	ldr	r2, [sp, #28]
    8cb2:	6013      	str	r3, [r2, #0]
}
    8cb4:	b04f      	add	sp, #316	; 0x13c
    8cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			CRITICAL_SECTION_LEAVE()
    8cba:	a80b      	add	r0, sp, #44	; 0x2c
    8cbc:	47b8      	blx	r7
		for (uint8_t i = 0; i<grid_ui_state.report_length; i++)
    8cbe:	3401      	adds	r4, #1
    8cc0:	b2e4      	uxtb	r4, r4
    8cc2:	7833      	ldrb	r3, [r6, #0]
    8cc4:	b2db      	uxtb	r3, r3
    8cc6:	42a3      	cmp	r3, r4
    8cc8:	d921      	bls.n	8d0e <grid_port_process_ui+0x3ae>
			if (length>200){
    8cca:	2dc8      	cmp	r5, #200	; 0xc8
    8ccc:	d8f7      	bhi.n	8cbe <grid_port_process_ui+0x35e>
			CRITICAL_SECTION_ENTER()
    8cce:	a80b      	add	r0, sp, #44	; 0x2c
    8cd0:	47c0      	blx	r8
	return mod->report_array[index].changed;
    8cd2:	0123      	lsls	r3, r4, #4
    8cd4:	6872      	ldr	r2, [r6, #4]
    8cd6:	18d1      	adds	r1, r2, r3
			if (grid_report_sys_get_changed_flag(mod, i) && grid_report_get_type(mod, i) == GRID_REPORT_TYPE_BROADCAST){
    8cd8:	5cd3      	ldrb	r3, [r2, r3]
    8cda:	2b00      	cmp	r3, #0
    8cdc:	d0ed      	beq.n	8cba <grid_port_process_ui+0x35a>
    8cde:	784b      	ldrb	r3, [r1, #1]
    8ce0:	2b02      	cmp	r3, #2
    8ce2:	d1ea      	bne.n	8cba <grid_port_process_ui+0x35a>
				packetvalid++;
    8ce4:	f109 0901 	add.w	r9, r9, #1
    8ce8:	fa5f f989 	uxtb.w	r9, r9
				grid_report_render(mod, i, &message[length]);
    8cec:	ab0e      	add	r3, sp, #56	; 0x38
    8cee:	eb03 0a05 	add.w	sl, r3, r5
    8cf2:	4652      	mov	r2, sl
    8cf4:	4621      	mov	r1, r4
    8cf6:	4630      	mov	r0, r6
    8cf8:	4b37      	ldr	r3, [pc, #220]	; (8dd8 <grid_port_process_ui+0x478>)
    8cfa:	4798      	blx	r3
				grid_report_sys_clear_changed_flag(mod, i);
    8cfc:	4621      	mov	r1, r4
    8cfe:	4630      	mov	r0, r6
    8d00:	4b36      	ldr	r3, [pc, #216]	; (8ddc <grid_port_process_ui+0x47c>)
    8d02:	4798      	blx	r3
				length += strlen(&message[length]);
    8d04:	4650      	mov	r0, sl
    8d06:	4b2b      	ldr	r3, [pc, #172]	; (8db4 <grid_port_process_ui+0x454>)
    8d08:	4798      	blx	r3
    8d0a:	4405      	add	r5, r0
    8d0c:	e7d5      	b.n	8cba <grid_port_process_ui+0x35a>
		if (packetvalid){
    8d0e:	f1b9 0f00 	cmp.w	r9, #0
    8d12:	d0cf      	beq.n	8cb4 <grid_port_process_ui+0x354>
			por->cooldown += (10+por->cooldown);
    8d14:	9a07      	ldr	r2, [sp, #28]
    8d16:	6813      	ldr	r3, [r2, #0]
    8d18:	005b      	lsls	r3, r3, #1
    8d1a:	330a      	adds	r3, #10
    8d1c:	6013      	str	r3, [r2, #0]
			grid_sys_state.next_broadcast_message_id++;
    8d1e:	4a22      	ldr	r2, [pc, #136]	; (8da8 <grid_port_process_ui+0x448>)
    8d20:	f892 309d 	ldrb.w	r3, [r2, #157]	; 0x9d
    8d24:	3301      	adds	r3, #1
    8d26:	b2db      	uxtb	r3, r3
    8d28:	f882 309d 	strb.w	r3, [r2, #157]	; 0x9d
			sprintf(&message[length], "%c", GRID_MSG_END_OF_TRANSMISSION); // CALCULATE AND ADD CRC HERE
    8d2c:	ac0e      	add	r4, sp, #56	; 0x38
    8d2e:	1966      	adds	r6, r4, r5
    8d30:	2204      	movs	r2, #4
    8d32:	491e      	ldr	r1, [pc, #120]	; (8dac <grid_port_process_ui+0x44c>)
    8d34:	4630      	mov	r0, r6
    8d36:	4f1e      	ldr	r7, [pc, #120]	; (8db0 <grid_port_process_ui+0x450>)
    8d38:	47b8      	blx	r7
			length += strlen(&message[length]);
    8d3a:	4630      	mov	r0, r6
    8d3c:	4e1d      	ldr	r6, [pc, #116]	; (8db4 <grid_port_process_ui+0x454>)
    8d3e:	47b0      	blx	r6
    8d40:	4405      	add	r5, r0
			sprintf(length_string, "%02x", length);
    8d42:	462a      	mov	r2, r5
    8d44:	491c      	ldr	r1, [pc, #112]	; (8db8 <grid_port_process_ui+0x458>)
    8d46:	a80c      	add	r0, sp, #48	; 0x30
    8d48:	47b8      	blx	r7
			message[2] = length_string[0];
    8d4a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    8d4e:	70a3      	strb	r3, [r4, #2]
			message[3] = length_string[1];
    8d50:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8d54:	70e3      	strb	r3, [r4, #3]
			sprintf(&message[length], "00\n");
    8d56:	4b19      	ldr	r3, [pc, #100]	; (8dbc <grid_port_process_ui+0x45c>)
    8d58:	6818      	ldr	r0, [r3, #0]
    8d5a:	5160      	str	r0, [r4, r5]
			length += strlen(&message[length]);
    8d5c:	1960      	adds	r0, r4, r5
    8d5e:	47b0      	blx	r6
    8d60:	4405      	add	r5, r0
			uint8_t checksum = grid_msg_checksum_calculate(message, length);
    8d62:	4629      	mov	r1, r5
    8d64:	4620      	mov	r0, r4
    8d66:	4b16      	ldr	r3, [pc, #88]	; (8dc0 <grid_port_process_ui+0x460>)
    8d68:	4798      	blx	r3
			grid_msg_checksum_write(message, length, checksum);
    8d6a:	4602      	mov	r2, r0
    8d6c:	4629      	mov	r1, r5
    8d6e:	4620      	mov	r0, r4
    8d70:	4b14      	ldr	r3, [pc, #80]	; (8dc4 <grid_port_process_ui+0x464>)
    8d72:	4798      	blx	r3
			if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    8d74:	b2a9      	uxth	r1, r5
    8d76:	481a      	ldr	r0, [pc, #104]	; (8de0 <grid_port_process_ui+0x480>)
    8d78:	4b14      	ldr	r3, [pc, #80]	; (8dcc <grid_port_process_ui+0x46c>)
    8d7a:	4798      	blx	r3
    8d7c:	2800      	cmp	r0, #0
    8d7e:	d099      	beq.n	8cb4 <grid_port_process_ui+0x354>
				for(uint32_t i = 0; i<length; i++){
    8d80:	b16d      	cbz	r5, 8d9e <grid_port_process_ui+0x43e>
    8d82:	f10d 0437 	add.w	r4, sp, #55	; 0x37
    8d86:	ab4e      	add	r3, sp, #312	; 0x138
    8d88:	441d      	add	r5, r3
    8d8a:	f2a5 1501 	subw	r5, r5, #257	; 0x101
					grid_buffer_write_character(&GRID_PORT_U.rx_buffer, message[i]);
    8d8e:	4f14      	ldr	r7, [pc, #80]	; (8de0 <grid_port_process_ui+0x480>)
    8d90:	4e0f      	ldr	r6, [pc, #60]	; (8dd0 <grid_port_process_ui+0x470>)
    8d92:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    8d96:	4638      	mov	r0, r7
    8d98:	47b0      	blx	r6
				for(uint32_t i = 0; i<length; i++){
    8d9a:	42ac      	cmp	r4, r5
    8d9c:	d1f9      	bne.n	8d92 <grid_port_process_ui+0x432>
				grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    8d9e:	4810      	ldr	r0, [pc, #64]	; (8de0 <grid_port_process_ui+0x480>)
    8da0:	4b0c      	ldr	r3, [pc, #48]	; (8dd4 <grid_port_process_ui+0x474>)
    8da2:	4798      	blx	r3
    8da4:	e786      	b.n	8cb4 <grid_port_process_ui+0x354>
    8da6:	bf00      	nop
    8da8:	20003280 	.word	0x20003280
    8dac:	00011708 	.word	0x00011708
    8db0:	00010325 	.word	0x00010325
    8db4:	0001036d 	.word	0x0001036d
    8db8:	0001170c 	.word	0x0001170c
    8dbc:	00011714 	.word	0x00011714
    8dc0:	000084d5 	.word	0x000084d5
    8dc4:	00008511 	.word	0x00008511
    8dc8:	20003238 	.word	0x20003238
    8dcc:	00005971 	.word	0x00005971
    8dd0:	000059a1 	.word	0x000059a1
    8dd4:	000059bd 	.word	0x000059bd
    8dd8:	00008921 	.word	0x00008921
    8ddc:	00008957 	.word	0x00008957
    8de0:	20003250 	.word	0x20003250

00008de4 <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    8de4:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    8de6:	6983      	ldr	r3, [r0, #24]
    8de8:	b103      	cbz	r3, 8dec <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    8dea:	4798      	blx	r3
    8dec:	bd08      	pop	{r3, pc}

00008dee <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    8dee:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    8df0:	69c3      	ldr	r3, [r0, #28]
    8df2:	b103      	cbz	r3, 8df6 <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    8df4:	4798      	blx	r3
    8df6:	bd08      	pop	{r3, pc}

00008df8 <adc_async_channel_conversion_done>:
{
    8df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8dfc:	4606      	mov	r6, r0
    8dfe:	460f      	mov	r7, r1
    8e00:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    8e02:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    8e04:	5c5c      	ldrb	r4, [r3, r1]
    8e06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8e0a:	00e4      	lsls	r4, r4, #3
    8e0c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    8e10:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    8e14:	f105 0a04 	add.w	sl, r5, #4
    8e18:	b2d1      	uxtb	r1, r2
    8e1a:	4650      	mov	r0, sl
    8e1c:	4b0c      	ldr	r3, [pc, #48]	; (8e50 <adc_async_channel_conversion_done+0x58>)
    8e1e:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    8e20:	4630      	mov	r0, r6
    8e22:	4b0c      	ldr	r3, [pc, #48]	; (8e54 <adc_async_channel_conversion_done+0x5c>)
    8e24:	4798      	blx	r3
    8e26:	2801      	cmp	r0, #1
    8e28:	d907      	bls.n	8e3a <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    8e2a:	ea4f 2119 	mov.w	r1, r9, lsr #8
    8e2e:	4650      	mov	r0, sl
    8e30:	4b07      	ldr	r3, [pc, #28]	; (8e50 <adc_async_channel_conversion_done+0x58>)
    8e32:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    8e34:	8aab      	ldrh	r3, [r5, #20]
    8e36:	3301      	adds	r3, #1
    8e38:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    8e3a:	8aab      	ldrh	r3, [r5, #20]
    8e3c:	3301      	adds	r3, #1
    8e3e:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    8e40:	f858 3004 	ldr.w	r3, [r8, r4]
    8e44:	b113      	cbz	r3, 8e4c <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    8e46:	4639      	mov	r1, r7
    8e48:	4630      	mov	r0, r6
    8e4a:	4798      	blx	r3
    8e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e50:	00009f9b 	.word	0x00009f9b
    8e54:	0000a2c7 	.word	0x0000a2c7

00008e58 <adc_async_init>:
{
    8e58:	b570      	push	{r4, r5, r6, lr}
    8e5a:	4606      	mov	r6, r0
	device = &descr->device;
    8e5c:	2000      	movs	r0, #0
		channel_map[i] = 0xFF;
    8e5e:	25ff      	movs	r5, #255	; 0xff
    8e60:	b2c4      	uxtb	r4, r0
    8e62:	5515      	strb	r5, [r2, r4]
    8e64:	3001      	adds	r0, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    8e66:	b2c4      	uxtb	r4, r0
    8e68:	429c      	cmp	r4, r3
    8e6a:	d9f9      	bls.n	8e60 <adc_async_init+0x8>
	descr->channel_map    = channel_map;
    8e6c:	6232      	str	r2, [r6, #32]
	descr->channel_max    = channel_max;
    8e6e:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
	descr->channel_amount = channel_amount;
    8e72:	f89d 3010 	ldrb.w	r3, [sp, #16]
    8e76:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    8e7a:	9b05      	ldr	r3, [sp, #20]
    8e7c:	62b3      	str	r3, [r6, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    8e7e:	4630      	mov	r0, r6
    8e80:	4b05      	ldr	r3, [pc, #20]	; (8e98 <adc_async_init+0x40>)
    8e82:	4798      	blx	r3
	if (init_status) {
    8e84:	4603      	mov	r3, r0
    8e86:	b928      	cbnz	r0, 8e94 <adc_async_init+0x3c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    8e88:	4a04      	ldr	r2, [pc, #16]	; (8e9c <adc_async_init+0x44>)
    8e8a:	60b2      	str	r2, [r6, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    8e8c:	4a04      	ldr	r2, [pc, #16]	; (8ea0 <adc_async_init+0x48>)
    8e8e:	6032      	str	r2, [r6, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    8e90:	4a04      	ldr	r2, [pc, #16]	; (8ea4 <adc_async_init+0x4c>)
    8e92:	6072      	str	r2, [r6, #4]
}
    8e94:	4618      	mov	r0, r3
    8e96:	bd70      	pop	{r4, r5, r6, pc}
    8e98:	0000a1ad 	.word	0x0000a1ad
    8e9c:	00008df9 	.word	0x00008df9
    8ea0:	00008de5 	.word	0x00008de5
    8ea4:	00008def 	.word	0x00008def

00008ea8 <adc_async_register_channel_buffer>:
{
    8ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (descr->channel_map[channel] != 0xFF) {
    8eac:	6a07      	ldr	r7, [r0, #32]
    8eae:	5c7c      	ldrb	r4, [r7, r1]
    8eb0:	2cff      	cmp	r4, #255	; 0xff
    8eb2:	d12b      	bne.n	8f0c <adc_async_register_channel_buffer+0x64>
	for (i = 0; i <= descr->channel_max; i++) {
    8eb4:	f890 e024 	ldrb.w	lr, [r0, #36]	; 0x24
    8eb8:	2400      	movs	r4, #0
    8eba:	4625      	mov	r5, r4
		if (descr->channel_map[i] != 0xFF) {
    8ebc:	b2e6      	uxtb	r6, r4
    8ebe:	5dbe      	ldrb	r6, [r7, r6]
    8ec0:	2eff      	cmp	r6, #255	; 0xff
			index++;
    8ec2:	bf1c      	itt	ne
    8ec4:	3501      	addne	r5, #1
    8ec6:	b2ed      	uxtbne	r5, r5
    8ec8:	3401      	adds	r4, #1
	for (i = 0; i <= descr->channel_max; i++) {
    8eca:	b2e6      	uxtb	r6, r4
    8ecc:	4576      	cmp	r6, lr
    8ece:	d9f5      	bls.n	8ebc <adc_async_register_channel_buffer+0x14>
	if (index > descr->channel_amount) {
    8ed0:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
    8ed4:	42ac      	cmp	r4, r5
    8ed6:	d31c      	bcc.n	8f12 <adc_async_register_channel_buffer+0x6a>
    8ed8:	4616      	mov	r6, r2
    8eda:	460f      	mov	r7, r1
    8edc:	4680      	mov	r8, r0
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    8ede:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    8ee2:	00e4      	lsls	r4, r4, #3
    8ee4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    8ee6:	4420      	add	r0, r4
    8ee8:	461a      	mov	r2, r3
    8eea:	4631      	mov	r1, r6
    8eec:	3004      	adds	r0, #4
    8eee:	4b0c      	ldr	r3, [pc, #48]	; (8f20 <adc_async_register_channel_buffer+0x78>)
    8ef0:	4798      	blx	r3
    8ef2:	4602      	mov	r2, r0
    8ef4:	b980      	cbnz	r0, 8f18 <adc_async_register_channel_buffer+0x70>
	descr->channel_map[channel]            = index;
    8ef6:	f8d8 3020 	ldr.w	r3, [r8, #32]
    8efa:	55dd      	strb	r5, [r3, r7]
	descr->descr_ch[index].bytes_in_buffer = 0;
    8efc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    8f00:	441c      	add	r4, r3
    8f02:	2300      	movs	r3, #0
    8f04:	82a3      	strh	r3, [r4, #20]
}
    8f06:	4610      	mov	r0, r2
    8f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    8f0c:	f06f 020c 	mvn.w	r2, #12
    8f10:	e7f9      	b.n	8f06 <adc_async_register_channel_buffer+0x5e>
		return ERR_NO_RESOURCE;
    8f12:	f06f 021b 	mvn.w	r2, #27
    8f16:	e7f6      	b.n	8f06 <adc_async_register_channel_buffer+0x5e>
		return ERR_INVALID_ARG;
    8f18:	f06f 020c 	mvn.w	r2, #12
    8f1c:	e7f3      	b.n	8f06 <adc_async_register_channel_buffer+0x5e>
    8f1e:	bf00      	nop
    8f20:	00009f5f 	.word	0x00009f5f

00008f24 <adc_async_enable_channel>:
{
    8f24:	b508      	push	{r3, lr}
	_adc_async_enable_channel(&descr->device, channel);
    8f26:	4b02      	ldr	r3, [pc, #8]	; (8f30 <adc_async_enable_channel+0xc>)
    8f28:	4798      	blx	r3
}
    8f2a:	2000      	movs	r0, #0
    8f2c:	bd08      	pop	{r3, pc}
    8f2e:	bf00      	nop
    8f30:	0000a2b1 	.word	0x0000a2b1

00008f34 <adc_async_register_callback>:
{
    8f34:	b538      	push	{r3, r4, r5, lr}
	switch (type) {
    8f36:	2a01      	cmp	r2, #1
    8f38:	d013      	beq.n	8f62 <adc_async_register_callback+0x2e>
    8f3a:	b122      	cbz	r2, 8f46 <adc_async_register_callback+0x12>
    8f3c:	2a02      	cmp	r2, #2
    8f3e:	d012      	beq.n	8f66 <adc_async_register_callback+0x32>
		return ERR_INVALID_ARG;
    8f40:	f06f 000c 	mvn.w	r0, #12
}
    8f44:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t index = descr->channel_map[channel];
    8f46:	6a04      	ldr	r4, [r0, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    8f48:	5c64      	ldrb	r4, [r4, r1]
    8f4a:	6a85      	ldr	r5, [r0, #40]	; 0x28
    8f4c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    8f50:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    8f54:	3300      	adds	r3, #0
    8f56:	bf18      	it	ne
    8f58:	2301      	movne	r3, #1
    8f5a:	4c04      	ldr	r4, [pc, #16]	; (8f6c <adc_async_register_callback+0x38>)
    8f5c:	47a0      	blx	r4
	return ERR_NONE;
    8f5e:	2000      	movs	r0, #0
    8f60:	bd38      	pop	{r3, r4, r5, pc}
		descr->adc_async_cb.monitor = cb;
    8f62:	6183      	str	r3, [r0, #24]
		break;
    8f64:	e7f6      	b.n	8f54 <adc_async_register_callback+0x20>
		descr->adc_async_cb.error = cb;
    8f66:	61c3      	str	r3, [r0, #28]
		break;
    8f68:	e7f4      	b.n	8f54 <adc_async_register_callback+0x20>
    8f6a:	bf00      	nop
    8f6c:	0000a2ef 	.word	0x0000a2ef

00008f70 <adc_async_read_channel>:
{
    8f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f74:	b083      	sub	sp, #12
    8f76:	4604      	mov	r4, r0
    8f78:	460e      	mov	r6, r1
    8f7a:	4691      	mov	r9, r2
    8f7c:	461d      	mov	r5, r3
	data_size = _adc_async_get_data_size(&descr->device);
    8f7e:	4b1b      	ldr	r3, [pc, #108]	; (8fec <adc_async_read_channel+0x7c>)
    8f80:	4798      	blx	r3
	index                                         = descr->channel_map[channel];
    8f82:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    8f84:	f813 b006 	ldrb.w	fp, [r3, r6]
    8f88:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    8f8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    8f8e:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
	CRITICAL_SECTION_ENTER()
    8f92:	a801      	add	r0, sp, #4
    8f94:	4b16      	ldr	r3, [pc, #88]	; (8ff0 <adc_async_read_channel+0x80>)
    8f96:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    8f98:	f10b 0a04 	add.w	sl, fp, #4
    8f9c:	4650      	mov	r0, sl
    8f9e:	4b15      	ldr	r3, [pc, #84]	; (8ff4 <adc_async_read_channel+0x84>)
    8fa0:	4798      	blx	r3
    8fa2:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    8fa4:	a801      	add	r0, sp, #4
    8fa6:	4b14      	ldr	r3, [pc, #80]	; (8ff8 <adc_async_read_channel+0x88>)
    8fa8:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    8faa:	f1b8 0f00 	cmp.w	r8, #0
    8fae:	d018      	beq.n	8fe2 <adc_async_read_channel+0x72>
    8fb0:	b1cd      	cbz	r5, 8fe6 <adc_async_read_channel+0x76>
    8fb2:	3d01      	subs	r5, #1
    8fb4:	b2ad      	uxth	r5, r5
    8fb6:	3502      	adds	r5, #2
    8fb8:	2401      	movs	r4, #1
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    8fba:	4f10      	ldr	r7, [pc, #64]	; (8ffc <adc_async_read_channel+0x8c>)
    8fbc:	b2a6      	uxth	r6, r4
    8fbe:	1e61      	subs	r1, r4, #1
    8fc0:	4449      	add	r1, r9
    8fc2:	4650      	mov	r0, sl
    8fc4:	47b8      	blx	r7
	while ((was_read < num) && (was_read < length)) {
    8fc6:	4544      	cmp	r4, r8
    8fc8:	d002      	beq.n	8fd0 <adc_async_read_channel+0x60>
    8fca:	3401      	adds	r4, #1
    8fcc:	42ac      	cmp	r4, r5
    8fce:	d1f5      	bne.n	8fbc <adc_async_read_channel+0x4c>
	descr_ch->bytes_in_buffer -= was_read;
    8fd0:	f8bb 3014 	ldrh.w	r3, [fp, #20]
    8fd4:	1b9b      	subs	r3, r3, r6
    8fd6:	f8ab 3014 	strh.w	r3, [fp, #20]
}
    8fda:	4630      	mov	r0, r6
    8fdc:	b003      	add	sp, #12
    8fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t was_read = 0;
    8fe2:	2600      	movs	r6, #0
    8fe4:	e7f4      	b.n	8fd0 <adc_async_read_channel+0x60>
    8fe6:	2600      	movs	r6, #0
    8fe8:	e7f2      	b.n	8fd0 <adc_async_read_channel+0x60>
    8fea:	bf00      	nop
    8fec:	0000a2c7 	.word	0x0000a2c7
    8ff0:	00009011 	.word	0x00009011
    8ff4:	00009fbd 	.word	0x00009fbd
    8ff8:	0000901f 	.word	0x0000901f
    8ffc:	00009f79 	.word	0x00009f79

00009000 <adc_async_start_conversion>:
{
    9000:	b508      	push	{r3, lr}
	_adc_async_convert(&descr->device);
    9002:	4b02      	ldr	r3, [pc, #8]	; (900c <adc_async_start_conversion+0xc>)
    9004:	4798      	blx	r3
}
    9006:	2000      	movs	r0, #0
    9008:	bd08      	pop	{r3, pc}
    900a:	bf00      	nop
    900c:	0000a2d9 	.word	0x0000a2d9

00009010 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9010:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    9014:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    9016:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    9018:	f3bf 8f5f 	dmb	sy
    901c:	4770      	bx	lr

0000901e <atomic_leave_critical>:
    901e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    9022:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    9024:	f383 8810 	msr	PRIMASK, r3
    9028:	4770      	bx	lr
	...

0000902c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    902c:	b508      	push	{r3, lr}
	ASSERT(descr && hw);

	return _crc_sync_init(&descr->dev, hw);
    902e:	4b01      	ldr	r3, [pc, #4]	; (9034 <crc_sync_init+0x8>)
    9030:	4798      	blx	r3
}
    9032:	bd08      	pop	{r3, pc}
    9034:	0000a6d9 	.word	0x0000a6d9

00009038 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    9038:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    903a:	4b02      	ldr	r3, [pc, #8]	; (9044 <delay_init+0xc>)
    903c:	6018      	str	r0, [r3, #0]
    903e:	4b02      	ldr	r3, [pc, #8]	; (9048 <delay_init+0x10>)
    9040:	4798      	blx	r3
    9042:	bd08      	pop	{r3, pc}
    9044:	20000648 	.word	0x20000648
    9048:	0000bc8d 	.word	0x0000bc8d

0000904c <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
    904c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    904e:	4b04      	ldr	r3, [pc, #16]	; (9060 <delay_us+0x14>)
    9050:	681c      	ldr	r4, [r3, #0]
    9052:	4b04      	ldr	r3, [pc, #16]	; (9064 <delay_us+0x18>)
    9054:	4798      	blx	r3
    9056:	4601      	mov	r1, r0
    9058:	4620      	mov	r0, r4
    905a:	4b03      	ldr	r3, [pc, #12]	; (9068 <delay_us+0x1c>)
    905c:	4798      	blx	r3
    905e:	bd10      	pop	{r4, pc}
    9060:	20000648 	.word	0x20000648
    9064:	0000a39d 	.word	0x0000a39d
    9068:	0000bca1 	.word	0x0000bca1

0000906c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    906c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    906e:	4b04      	ldr	r3, [pc, #16]	; (9080 <delay_ms+0x14>)
    9070:	681c      	ldr	r4, [r3, #0]
    9072:	4b04      	ldr	r3, [pc, #16]	; (9084 <delay_ms+0x18>)
    9074:	4798      	blx	r3
    9076:	4601      	mov	r1, r0
    9078:	4620      	mov	r0, r4
    907a:	4b03      	ldr	r3, [pc, #12]	; (9088 <delay_ms+0x1c>)
    907c:	4798      	blx	r3
    907e:	bd10      	pop	{r4, pc}
    9080:	20000648 	.word	0x20000648
    9084:	0000a3a5 	.word	0x0000a3a5
    9088:	0000bca1 	.word	0x0000bca1

0000908c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    908c:	b508      	push	{r3, lr}
	return _event_system_init();
    908e:	4b01      	ldr	r3, [pc, #4]	; (9094 <event_system_init+0x8>)
    9090:	4798      	blx	r3
}
    9092:	bd08      	pop	{r3, pc}
    9094:	0000a6e1 	.word	0x0000a6e1

00009098 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    9098:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    909a:	6943      	ldr	r3, [r0, #20]
    909c:	b103      	cbz	r3, 90a0 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    909e:	4798      	blx	r3
    90a0:	bd08      	pop	{r3, pc}

000090a2 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    90a2:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    90a4:	6983      	ldr	r3, [r0, #24]
    90a6:	b103      	cbz	r3, 90aa <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    90a8:	4798      	blx	r3
    90aa:	bd08      	pop	{r3, pc}

000090ac <flash_init>:
{
    90ac:	b510      	push	{r4, lr}
    90ae:	4604      	mov	r4, r0
	rc = _flash_init(&flash->dev, hw);
    90b0:	4b04      	ldr	r3, [pc, #16]	; (90c4 <flash_init+0x18>)
    90b2:	4798      	blx	r3
	if (rc) {
    90b4:	4603      	mov	r3, r0
    90b6:	b918      	cbnz	r0, 90c0 <flash_init+0x14>
	flash->dev.flash_cb.ready_cb = flash_ready;
    90b8:	4a03      	ldr	r2, [pc, #12]	; (90c8 <flash_init+0x1c>)
    90ba:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    90bc:	4a03      	ldr	r2, [pc, #12]	; (90cc <flash_init+0x20>)
    90be:	6062      	str	r2, [r4, #4]
}
    90c0:	4618      	mov	r0, r3
    90c2:	bd10      	pop	{r4, pc}
    90c4:	0000a7ed 	.word	0x0000a7ed
    90c8:	00009099 	.word	0x00009099
    90cc:	000090a3 	.word	0x000090a3

000090d0 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    90d0:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    90d2:	8843      	ldrh	r3, [r0, #2]
    90d4:	f413 7f80 	tst.w	r3, #256	; 0x100
    90d8:	d102      	bne.n	90e0 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    90da:	6b43      	ldr	r3, [r0, #52]	; 0x34
    90dc:	b103      	cbz	r3, 90e0 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    90de:	4798      	blx	r3
    90e0:	bd08      	pop	{r3, pc}

000090e2 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    90e2:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    90e4:	8843      	ldrh	r3, [r0, #2]
    90e6:	f413 7f80 	tst.w	r3, #256	; 0x100
    90ea:	d102      	bne.n	90f2 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    90ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
    90ee:	b103      	cbz	r3, 90f2 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    90f0:	4798      	blx	r3
    90f2:	bd08      	pop	{r3, pc}

000090f4 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    90f4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    90f6:	8843      	ldrh	r3, [r0, #2]
    90f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    90fc:	d102      	bne.n	9104 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    90fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    9100:	b103      	cbz	r3, 9104 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    9102:	4798      	blx	r3
    9104:	bd08      	pop	{r3, pc}
	...

00009108 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    9108:	b510      	push	{r4, lr}
    910a:	b084      	sub	sp, #16
    910c:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    910e:	8a83      	ldrh	r3, [r0, #20]
    9110:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    9114:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    9116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    911a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    911e:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    9120:	a901      	add	r1, sp, #4
    9122:	3828      	subs	r0, #40	; 0x28
    9124:	4b03      	ldr	r3, [pc, #12]	; (9134 <i2c_m_async_write+0x2c>)
    9126:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    9128:	2800      	cmp	r0, #0
    912a:	bf08      	it	eq
    912c:	4620      	moveq	r0, r4
    912e:	b004      	add	sp, #16
    9130:	bd10      	pop	{r4, pc}
    9132:	bf00      	nop
    9134:	0000b475 	.word	0x0000b475

00009138 <i2c_m_async_read>:
{
    9138:	b510      	push	{r4, lr}
    913a:	b084      	sub	sp, #16
    913c:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    913e:	8a83      	ldrh	r3, [r0, #20]
    9140:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    9144:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    9146:	f248 0301 	movw	r3, #32769	; 0x8001
    914a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    914e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    9150:	a901      	add	r1, sp, #4
    9152:	3828      	subs	r0, #40	; 0x28
    9154:	4b03      	ldr	r3, [pc, #12]	; (9164 <i2c_m_async_read+0x2c>)
    9156:	4798      	blx	r3
}
    9158:	2800      	cmp	r0, #0
    915a:	bf08      	it	eq
    915c:	4620      	moveq	r0, r4
    915e:	b004      	add	sp, #16
    9160:	bd10      	pop	{r4, pc}
    9162:	bf00      	nop
    9164:	0000b475 	.word	0x0000b475

00009168 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    9168:	b570      	push	{r4, r5, r6, lr}
    916a:	4604      	mov	r4, r0
	int32_t init_status;
	ASSERT(i2c);

	init_status = _i2c_m_async_init(&i2c->device, hw);
    916c:	4b0b      	ldr	r3, [pc, #44]	; (919c <i2c_m_async_init+0x34>)
    916e:	4798      	blx	r3
	if (init_status) {
    9170:	4605      	mov	r5, r0
    9172:	b108      	cbz	r0, 9178 <i2c_m_async_init+0x10>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    9174:	4628      	mov	r0, r5
    9176:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    9178:	4b09      	ldr	r3, [pc, #36]	; (91a0 <i2c_m_async_init+0x38>)
    917a:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    917c:	4b09      	ldr	r3, [pc, #36]	; (91a4 <i2c_m_async_init+0x3c>)
    917e:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    9180:	4a09      	ldr	r2, [pc, #36]	; (91a8 <i2c_m_async_init+0x40>)
    9182:	2101      	movs	r1, #1
    9184:	4620      	mov	r0, r4
    9186:	4e09      	ldr	r6, [pc, #36]	; (91ac <i2c_m_async_init+0x44>)
    9188:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    918a:	4a09      	ldr	r2, [pc, #36]	; (91b0 <i2c_m_async_init+0x48>)
    918c:	2102      	movs	r1, #2
    918e:	4620      	mov	r0, r4
    9190:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    9192:	4a08      	ldr	r2, [pc, #32]	; (91b4 <i2c_m_async_init+0x4c>)
    9194:	2100      	movs	r1, #0
    9196:	4620      	mov	r0, r4
    9198:	47b0      	blx	r6
	return ERR_NONE;
    919a:	e7eb      	b.n	9174 <i2c_m_async_init+0xc>
    919c:	0000b411 	.word	0x0000b411
    91a0:	00009139 	.word	0x00009139
    91a4:	00009109 	.word	0x00009109
    91a8:	000090d1 	.word	0x000090d1
    91ac:	0000b553 	.word	0x0000b553
    91b0:	000090e3 	.word	0x000090e3
    91b4:	000090f5 	.word	0x000090f5

000091b8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    91b8:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->write(io_descr, buf, length);
    91ba:	6803      	ldr	r3, [r0, #0]
    91bc:	4798      	blx	r3
}
    91be:	bd08      	pop	{r3, pc}

000091c0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    91c0:	b508      	push	{r3, lr}
	ASSERT(io_descr && buf);
	return io_descr->read(io_descr, buf, length);
    91c2:	6843      	ldr	r3, [r0, #4]
    91c4:	4798      	blx	r3
}
    91c6:	bd08      	pop	{r3, pc}

000091c8 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    91c8:	b508      	push	{r3, lr}
	ASSERT(qspi && hw);

	return _qspi_dma_init(&qspi->dev, hw);
    91ca:	4b01      	ldr	r3, [pc, #4]	; (91d0 <qspi_dma_init+0x8>)
    91cc:	4798      	blx	r3
}
    91ce:	bd08      	pop	{r3, pc}
    91d0:	0000a9e1 	.word	0x0000a9e1

000091d4 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    91d4:	b510      	push	{r4, lr}
	ASSERT(io);
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    91d6:	2400      	movs	r4, #0
    91d8:	6184      	str	r4, [r0, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    91da:	6141      	str	r1, [r0, #20]
	spi->xfer.size  = length;
    91dc:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    91de:	6204      	str	r4, [r0, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    91e0:	2310      	movs	r3, #16
    91e2:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    91e4:	2101      	movs	r1, #1
    91e6:	3820      	subs	r0, #32
    91e8:	4b01      	ldr	r3, [pc, #4]	; (91f0 <_spi_m_async_io_write+0x1c>)
    91ea:	4798      	blx	r3

	return ERR_NONE;
}
    91ec:	4620      	mov	r0, r4
    91ee:	bd10      	pop	{r4, pc}
    91f0:	0000b953 	.word	0x0000b953

000091f4 <_spi_m_async_io_read>:
{
    91f4:	b538      	push	{r3, r4, r5, lr}
	spi->xfer.rxbuf = buf;
    91f6:	6181      	str	r1, [r0, #24]
	spi->xfer.txbuf = NULL;
    91f8:	2500      	movs	r5, #0
    91fa:	6145      	str	r5, [r0, #20]
	spi->xfer.size  = length;
    91fc:	61c2      	str	r2, [r0, #28]
	spi->xfercnt    = 0;
    91fe:	6205      	str	r5, [r0, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    9200:	2310      	movs	r3, #16
    9202:	7203      	strb	r3, [r0, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    9204:	f1a0 0420 	sub.w	r4, r0, #32
    9208:	2101      	movs	r1, #1
    920a:	4620      	mov	r0, r4
    920c:	4b04      	ldr	r3, [pc, #16]	; (9220 <_spi_m_async_io_read+0x2c>)
    920e:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    9210:	f240 11ff 	movw	r1, #511	; 0x1ff
    9214:	4620      	mov	r0, r4
    9216:	4b03      	ldr	r3, [pc, #12]	; (9224 <_spi_m_async_io_read+0x30>)
    9218:	4798      	blx	r3
}
    921a:	4628      	mov	r0, r5
    921c:	bd38      	pop	{r3, r4, r5, pc}
    921e:	bf00      	nop
    9220:	0000b965 	.word	0x0000b965
    9224:	0000b98b 	.word	0x0000b98b

00009228 <_spi_dev_error>:
{
    9228:	b570      	push	{r4, r5, r6, lr}
    922a:	4604      	mov	r4, r0
    922c:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    922e:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    9230:	2100      	movs	r1, #0
    9232:	4b09      	ldr	r3, [pc, #36]	; (9258 <_spi_dev_error+0x30>)
    9234:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    9236:	2100      	movs	r1, #0
    9238:	4620      	mov	r0, r4
    923a:	4b08      	ldr	r3, [pc, #32]	; (925c <_spi_dev_error+0x34>)
    923c:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    923e:	2100      	movs	r1, #0
    9240:	4620      	mov	r0, r4
    9242:	4b07      	ldr	r3, [pc, #28]	; (9260 <_spi_dev_error+0x38>)
    9244:	4798      	blx	r3
	spi->stat = 0;
    9246:	2300      	movs	r3, #0
    9248:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    924c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    924e:	b113      	cbz	r3, 9256 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    9250:	4631      	mov	r1, r6
    9252:	4628      	mov	r0, r5
    9254:	4798      	blx	r3
    9256:	bd70      	pop	{r4, r5, r6, pc}
    9258:	0000b953 	.word	0x0000b953
    925c:	0000b965 	.word	0x0000b965
    9260:	0000b977 	.word	0x0000b977

00009264 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    9264:	6c02      	ldr	r2, [r0, #64]	; 0x40
    9266:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9268:	429a      	cmp	r2, r3
    926a:	d200      	bcs.n	926e <_spi_dev_complete+0xa>
    926c:	4770      	bx	lr
{
    926e:	b510      	push	{r4, lr}
    9270:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    9272:	2100      	movs	r1, #0
    9274:	4b04      	ldr	r3, [pc, #16]	; (9288 <_spi_dev_complete+0x24>)
    9276:	4798      	blx	r3
		spi->stat = 0;
    9278:	2300      	movs	r3, #0
    927a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    927e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9280:	b10b      	cbz	r3, 9286 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    9282:	1f20      	subs	r0, r4, #4
    9284:	4798      	blx	r3
    9286:	bd10      	pop	{r4, pc}
    9288:	0000b977 	.word	0x0000b977

0000928c <_spi_dev_tx>:
{
    928c:	b510      	push	{r4, lr}
    928e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    9290:	7903      	ldrb	r3, [r0, #4]
    9292:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    9294:	6b42      	ldr	r2, [r0, #52]	; 0x34
    9296:	6c03      	ldr	r3, [r0, #64]	; 0x40
    9298:	f103 0101 	add.w	r1, r3, #1
    929c:	6401      	str	r1, [r0, #64]	; 0x40
    929e:	bf94      	ite	ls
    92a0:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    92a2:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    92a6:	4b08      	ldr	r3, [pc, #32]	; (92c8 <_spi_dev_tx+0x3c>)
    92a8:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    92aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
    92ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    92ae:	429a      	cmp	r2, r3
    92b0:	d000      	beq.n	92b4 <_spi_dev_tx+0x28>
    92b2:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    92b4:	2100      	movs	r1, #0
    92b6:	4620      	mov	r0, r4
    92b8:	4b04      	ldr	r3, [pc, #16]	; (92cc <_spi_dev_tx+0x40>)
    92ba:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    92bc:	2101      	movs	r1, #1
    92be:	4620      	mov	r0, r4
    92c0:	4b03      	ldr	r3, [pc, #12]	; (92d0 <_spi_dev_tx+0x44>)
    92c2:	4798      	blx	r3
}
    92c4:	e7f5      	b.n	92b2 <_spi_dev_tx+0x26>
    92c6:	bf00      	nop
    92c8:	0000b98b 	.word	0x0000b98b
    92cc:	0000b953 	.word	0x0000b953
    92d0:	0000b977 	.word	0x0000b977

000092d4 <_spi_dev_rx>:
{
    92d4:	b570      	push	{r4, r5, r6, lr}
    92d6:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    92d8:	6b85      	ldr	r5, [r0, #56]	; 0x38
    92da:	b305      	cbz	r5, 931e <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    92dc:	7903      	ldrb	r3, [r0, #4]
    92de:	2b01      	cmp	r3, #1
    92e0:	d916      	bls.n	9310 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    92e2:	6c06      	ldr	r6, [r0, #64]	; 0x40
    92e4:	1c73      	adds	r3, r6, #1
    92e6:	6403      	str	r3, [r0, #64]	; 0x40
    92e8:	4b18      	ldr	r3, [pc, #96]	; (934c <_spi_dev_rx+0x78>)
    92ea:	4798      	blx	r3
    92ec:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    92f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    92f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    92f4:	4293      	cmp	r3, r2
    92f6:	d21d      	bcs.n	9334 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    92f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    92fa:	b1b2      	cbz	r2, 932a <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    92fc:	7921      	ldrb	r1, [r4, #4]
    92fe:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    9300:	bf94      	ite	ls
    9302:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    9304:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    9308:	4620      	mov	r0, r4
    930a:	4b11      	ldr	r3, [pc, #68]	; (9350 <_spi_dev_rx+0x7c>)
    930c:	4798      	blx	r3
    930e:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    9310:	6c06      	ldr	r6, [r0, #64]	; 0x40
    9312:	1c73      	adds	r3, r6, #1
    9314:	6403      	str	r3, [r0, #64]	; 0x40
    9316:	4b0d      	ldr	r3, [pc, #52]	; (934c <_spi_dev_rx+0x78>)
    9318:	4798      	blx	r3
    931a:	55a8      	strb	r0, [r5, r6]
    931c:	e7e8      	b.n	92f0 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    931e:	4b0b      	ldr	r3, [pc, #44]	; (934c <_spi_dev_rx+0x78>)
    9320:	4798      	blx	r3
		spi->xfercnt++;
    9322:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9324:	3301      	adds	r3, #1
    9326:	6423      	str	r3, [r4, #64]	; 0x40
    9328:	e7e2      	b.n	92f0 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    932a:	88e1      	ldrh	r1, [r4, #6]
    932c:	4620      	mov	r0, r4
    932e:	4b08      	ldr	r3, [pc, #32]	; (9350 <_spi_dev_rx+0x7c>)
    9330:	4798      	blx	r3
    9332:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    9334:	2100      	movs	r1, #0
    9336:	4620      	mov	r0, r4
    9338:	4b06      	ldr	r3, [pc, #24]	; (9354 <_spi_dev_rx+0x80>)
    933a:	4798      	blx	r3
		spi->stat = 0;
    933c:	2300      	movs	r3, #0
    933e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    9342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9344:	b10b      	cbz	r3, 934a <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    9346:	1f20      	subs	r0, r4, #4
    9348:	4798      	blx	r3
    934a:	bd70      	pop	{r4, r5, r6, pc}
    934c:	0000b993 	.word	0x0000b993
    9350:	0000b98b 	.word	0x0000b98b
    9354:	0000b965 	.word	0x0000b965

00009358 <spi_m_async_init>:
{
    9358:	b570      	push	{r4, r5, r6, lr}
    935a:	4605      	mov	r5, r0
	spi->dev.prvt = (void *)hw;
    935c:	4604      	mov	r4, r0
    935e:	f844 1f04 	str.w	r1, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    9362:	4620      	mov	r0, r4
    9364:	4b0d      	ldr	r3, [pc, #52]	; (939c <spi_m_async_init+0x44>)
    9366:	4798      	blx	r3
	if (rc >= 0) {
    9368:	2800      	cmp	r0, #0
    936a:	db15      	blt.n	9398 <spi_m_async_init+0x40>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    936c:	4a0c      	ldr	r2, [pc, #48]	; (93a0 <spi_m_async_init+0x48>)
    936e:	2100      	movs	r1, #0
    9370:	4620      	mov	r0, r4
    9372:	4e0c      	ldr	r6, [pc, #48]	; (93a4 <spi_m_async_init+0x4c>)
    9374:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    9376:	4a0c      	ldr	r2, [pc, #48]	; (93a8 <spi_m_async_init+0x50>)
    9378:	2101      	movs	r1, #1
    937a:	4620      	mov	r0, r4
    937c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    937e:	4a0b      	ldr	r2, [pc, #44]	; (93ac <spi_m_async_init+0x54>)
    9380:	2102      	movs	r1, #2
    9382:	4620      	mov	r0, r4
    9384:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    9386:	4a0a      	ldr	r2, [pc, #40]	; (93b0 <spi_m_async_init+0x58>)
    9388:	2103      	movs	r1, #3
    938a:	4620      	mov	r0, r4
    938c:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    938e:	4b09      	ldr	r3, [pc, #36]	; (93b4 <spi_m_async_init+0x5c>)
    9390:	62ab      	str	r3, [r5, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    9392:	4b09      	ldr	r3, [pc, #36]	; (93b8 <spi_m_async_init+0x60>)
    9394:	626b      	str	r3, [r5, #36]	; 0x24
	return ERR_NONE;
    9396:	2000      	movs	r0, #0
}
    9398:	bd70      	pop	{r4, r5, r6, pc}
    939a:	bf00      	nop
    939c:	0000b8b5 	.word	0x0000b8b5
    93a0:	0000928d 	.word	0x0000928d
    93a4:	0000b99b 	.word	0x0000b99b
    93a8:	000092d5 	.word	0x000092d5
    93ac:	00009265 	.word	0x00009265
    93b0:	00009229 	.word	0x00009229
    93b4:	000091f5 	.word	0x000091f5
    93b8:	000091d5 	.word	0x000091d5

000093bc <spi_m_async_enable>:
{
    93bc:	b508      	push	{r3, lr}
	_spi_m_async_enable(&spi->dev);
    93be:	3004      	adds	r0, #4
    93c0:	4b01      	ldr	r3, [pc, #4]	; (93c8 <spi_m_async_enable+0xc>)
    93c2:	4798      	blx	r3
    93c4:	bd08      	pop	{r3, pc}
    93c6:	bf00      	nop
    93c8:	0000b91d 	.word	0x0000b91d

000093cc <spi_m_async_set_baudrate>:
{
    93cc:	b508      	push	{r3, lr}
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    93ce:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    93d2:	f013 0f10 	tst.w	r3, #16
    93d6:	d103      	bne.n	93e0 <spi_m_async_set_baudrate+0x14>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    93d8:	3004      	adds	r0, #4
    93da:	4b03      	ldr	r3, [pc, #12]	; (93e8 <spi_m_async_set_baudrate+0x1c>)
    93dc:	4798      	blx	r3
    93de:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    93e0:	f06f 0003 	mvn.w	r0, #3
}
    93e4:	bd08      	pop	{r3, pc}
    93e6:	bf00      	nop
    93e8:	0000b93d 	.word	0x0000b93d

000093ec <spi_m_async_set_mode>:
{
    93ec:	b508      	push	{r3, lr}
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    93ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    93f2:	f013 0f10 	tst.w	r3, #16
    93f6:	d103      	bne.n	9400 <spi_m_async_set_mode+0x14>
	return _spi_m_async_set_mode(&spi->dev, mode);
    93f8:	3004      	adds	r0, #4
    93fa:	4b03      	ldr	r3, [pc, #12]	; (9408 <spi_m_async_set_mode+0x1c>)
    93fc:	4798      	blx	r3
    93fe:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    9400:	f06f 0003 	mvn.w	r0, #3
}
    9404:	bd08      	pop	{r3, pc}
    9406:	bf00      	nop
    9408:	0000b92d 	.word	0x0000b92d

0000940c <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    940c:	b570      	push	{r4, r5, r6, lr}
    940e:	4604      	mov	r4, r0
    9410:	460d      	mov	r5, r1
	ASSERT(spi);

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
    9412:	63c2      	str	r2, [r0, #60]	; 0x3c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    9414:	6381      	str	r1, [r0, #56]	; 0x38
	spi->xfer.size  = length;
    9416:	6403      	str	r3, [r0, #64]	; 0x40
	spi->xfercnt    = 0;
    9418:	2300      	movs	r3, #0
    941a:	6443      	str	r3, [r0, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    941c:	2310      	movs	r3, #16
    941e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	_spi_m_async_enable_rx(&spi->dev, true);
    9422:	1d06      	adds	r6, r0, #4
    9424:	2101      	movs	r1, #1
    9426:	4630      	mov	r0, r6
    9428:	4b09      	ldr	r3, [pc, #36]	; (9450 <spi_m_async_transfer+0x44>)
    942a:	4798      	blx	r3
	if (txbuf) {
    942c:	b15d      	cbz	r5, 9446 <spi_m_async_transfer+0x3a>
		if (!(spi->dev.char_size > 1)) {
    942e:	7a23      	ldrb	r3, [r4, #8]
    9430:	2b01      	cmp	r3, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    9432:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9434:	bf94      	ite	ls
    9436:	5ce9      	ldrbls	r1, [r5, r3]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    9438:	f835 1013 	ldrhhi.w	r1, [r5, r3, lsl #1]
    943c:	4630      	mov	r0, r6
    943e:	4b05      	ldr	r3, [pc, #20]	; (9454 <spi_m_async_transfer+0x48>)
    9440:	4798      	blx	r3
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
	}

	return ERR_NONE;
}
    9442:	2000      	movs	r0, #0
    9444:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    9446:	8961      	ldrh	r1, [r4, #10]
    9448:	4630      	mov	r0, r6
    944a:	4b02      	ldr	r3, [pc, #8]	; (9454 <spi_m_async_transfer+0x48>)
    944c:	4798      	blx	r3
    944e:	e7f8      	b.n	9442 <spi_m_async_transfer+0x36>
    9450:	0000b965 	.word	0x0000b965
    9454:	0000b98b 	.word	0x0000b98b

00009458 <spi_m_async_register_callback>:
void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));

	if (SPI_M_ASYNC_CB_XFER == type) {
    9458:	b909      	cbnz	r1, 945e <spi_m_async_register_callback+0x6>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    945a:	6302      	str	r2, [r0, #48]	; 0x30
    945c:	4770      	bx	lr
{
    945e:	b508      	push	{r3, lr}
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    9460:	6342      	str	r2, [r0, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    9462:	3200      	adds	r2, #0
    9464:	bf18      	it	ne
    9466:	2201      	movne	r2, #1
    9468:	2103      	movs	r1, #3
    946a:	3004      	adds	r0, #4
    946c:	4b01      	ldr	r3, [pc, #4]	; (9474 <spi_m_async_register_callback+0x1c>)
    946e:	4798      	blx	r3
    9470:	bd08      	pop	{r3, pc}
    9472:	bf00      	nop
    9474:	0000b9a5 	.word	0x0000b9a5

00009478 <spi_m_async_get_io_descriptor>:
}

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
	ASSERT(spi && io);
	*io = &spi->io;
    9478:	3024      	adds	r0, #36	; 0x24
    947a:	6008      	str	r0, [r1, #0]
	return 0;
}
    947c:	2000      	movs	r0, #0
    947e:	4770      	bx	lr

00009480 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    9480:	b510      	push	{r4, lr}
	ASSERT(io);

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    9482:	4613      	mov	r3, r2
    9484:	2200      	movs	r2, #0
    9486:	381c      	subs	r0, #28
    9488:	4c01      	ldr	r4, [pc, #4]	; (9490 <_spi_m_dma_io_write+0x10>)
    948a:	47a0      	blx	r4
}
    948c:	bd10      	pop	{r4, pc}
    948e:	bf00      	nop
    9490:	0000bb71 	.word	0x0000bb71

00009494 <_spi_m_dma_io_read>:
{
    9494:	b510      	push	{r4, lr}
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    9496:	4613      	mov	r3, r2
    9498:	460a      	mov	r2, r1
    949a:	2100      	movs	r1, #0
    949c:	381c      	subs	r0, #28
    949e:	4c01      	ldr	r4, [pc, #4]	; (94a4 <_spi_m_dma_io_read+0x10>)
    94a0:	47a0      	blx	r4
}
    94a2:	bd10      	pop	{r4, pc}
    94a4:	0000bb71 	.word	0x0000bb71

000094a8 <spi_m_dma_init>:
{
    94a8:	b510      	push	{r4, lr}
    94aa:	4604      	mov	r4, r0
	spi->dev.prvt = (void *)hw;
    94ac:	f840 1f04 	str.w	r1, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    94b0:	4b04      	ldr	r3, [pc, #16]	; (94c4 <spi_m_dma_init+0x1c>)
    94b2:	4798      	blx	r3
	if (rc) {
    94b4:	4603      	mov	r3, r0
    94b6:	b918      	cbnz	r0, 94c0 <spi_m_dma_init+0x18>
	spi->io.read  = _spi_m_dma_io_read;
    94b8:	4a03      	ldr	r2, [pc, #12]	; (94c8 <spi_m_dma_init+0x20>)
    94ba:	6262      	str	r2, [r4, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    94bc:	4a03      	ldr	r2, [pc, #12]	; (94cc <spi_m_dma_init+0x24>)
    94be:	6222      	str	r2, [r4, #32]
}
    94c0:	4618      	mov	r0, r3
    94c2:	bd10      	pop	{r4, pc}
    94c4:	0000b9bd 	.word	0x0000b9bd
    94c8:	00009495 	.word	0x00009495
    94cc:	00009481 	.word	0x00009481

000094d0 <spi_m_dma_enable>:
{
    94d0:	b508      	push	{r3, lr}
	_spi_m_dma_enable(&spi->dev);
    94d2:	3004      	adds	r0, #4
    94d4:	4b01      	ldr	r3, [pc, #4]	; (94dc <spi_m_dma_enable+0xc>)
    94d6:	4798      	blx	r3
    94d8:	bd08      	pop	{r3, pc}
    94da:	bf00      	nop
    94dc:	0000baf1 	.word	0x0000baf1

000094e0 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    94e0:	b508      	push	{r3, lr}
	ASSERT(spi);
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    94e2:	3004      	adds	r0, #4
    94e4:	4b01      	ldr	r3, [pc, #4]	; (94ec <spi_m_dma_register_callback+0xc>)
    94e6:	4798      	blx	r3
    94e8:	bd08      	pop	{r3, pc}
    94ea:	bf00      	nop
    94ec:	0000bb01 	.word	0x0000bb01

000094f0 <spi_m_dma_get_io_descriptor>:
}

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
	ASSERT(spi && io);
	*io = &spi->io;
    94f0:	3020      	adds	r0, #32
    94f2:	6008      	str	r0, [r1, #0]

	return 0;
}
    94f4:	2000      	movs	r0, #0
    94f6:	4770      	bx	lr

000094f8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    94f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94fa:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    94fc:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    94fe:	b12f      	cbz	r7, 950c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    9500:	688d      	ldr	r5, [r1, #8]
    9502:	463c      	mov	r4, r7
    9504:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    9506:	f1c2 0e01 	rsb	lr, r2, #1
    950a:	e00b      	b.n	9524 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    950c:	4b0e      	ldr	r3, [pc, #56]	; (9548 <timer_add_timer_task+0x50>)
    950e:	4798      	blx	r3
		return;
    9510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    9512:	4473      	add	r3, lr
    9514:	68a0      	ldr	r0, [r4, #8]
    9516:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    9518:	42ab      	cmp	r3, r5
    951a:	d20a      	bcs.n	9532 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    951c:	6823      	ldr	r3, [r4, #0]
    951e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    9520:	b153      	cbz	r3, 9538 <timer_add_timer_task+0x40>
    9522:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    9524:	6863      	ldr	r3, [r4, #4]
    9526:	4293      	cmp	r3, r2
    9528:	d8f3      	bhi.n	9512 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    952a:	68a0      	ldr	r0, [r4, #8]
    952c:	4403      	add	r3, r0
    952e:	1a9b      	subs	r3, r3, r2
    9530:	e7f2      	b.n	9518 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    9532:	42a7      	cmp	r7, r4
    9534:	d004      	beq.n	9540 <timer_add_timer_task+0x48>
    9536:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    9538:	4620      	mov	r0, r4
    953a:	4b04      	ldr	r3, [pc, #16]	; (954c <timer_add_timer_task+0x54>)
    953c:	4798      	blx	r3
    953e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    9540:	4660      	mov	r0, ip
    9542:	4b01      	ldr	r3, [pc, #4]	; (9548 <timer_add_timer_task+0x50>)
    9544:	4798      	blx	r3
    9546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9548:	00009f29 	.word	0x00009f29
    954c:	00009f31 	.word	0x00009f31

00009550 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    9550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    9554:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    9556:	6907      	ldr	r7, [r0, #16]
    9558:	3701      	adds	r7, #1
    955a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    955c:	7e03      	ldrb	r3, [r0, #24]
    955e:	f013 0f01 	tst.w	r3, #1
    9562:	d113      	bne.n	958c <timer_process_counted+0x3c>
    9564:	7e03      	ldrb	r3, [r0, #24]
    9566:	f013 0f02 	tst.w	r3, #2
    956a:	d10f      	bne.n	958c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    956c:	b354      	cbz	r4, 95c4 <timer_process_counted+0x74>
    956e:	6863      	ldr	r3, [r4, #4]
    9570:	1afb      	subs	r3, r7, r3
    9572:	68a2      	ldr	r2, [r4, #8]
    9574:	4293      	cmp	r3, r2
    9576:	d307      	bcc.n	9588 <timer_process_counted+0x38>
    9578:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    957a:	f100 0814 	add.w	r8, r0, #20
    957e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 95c8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    9582:	f8df a048 	ldr.w	sl, [pc, #72]	; 95cc <timer_process_counted+0x7c>
    9586:	e012      	b.n	95ae <timer_process_counted+0x5e>
    9588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    958c:	7e03      	ldrb	r3, [r0, #24]
    958e:	f043 0302 	orr.w	r3, r3, #2
    9592:	7603      	strb	r3, [r0, #24]
		return;
    9594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9598:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    959a:	68e3      	ldr	r3, [r4, #12]
    959c:	4620      	mov	r0, r4
    959e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    95a0:	b185      	cbz	r5, 95c4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    95a2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    95a4:	686b      	ldr	r3, [r5, #4]
    95a6:	1afb      	subs	r3, r7, r3
    95a8:	68aa      	ldr	r2, [r5, #8]
    95aa:	4293      	cmp	r3, r2
    95ac:	d30a      	bcc.n	95c4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    95ae:	4640      	mov	r0, r8
    95b0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    95b2:	7c23      	ldrb	r3, [r4, #16]
    95b4:	2b01      	cmp	r3, #1
    95b6:	d1ef      	bne.n	9598 <timer_process_counted+0x48>
			tmp->time_label = time;
    95b8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    95ba:	463a      	mov	r2, r7
    95bc:	4621      	mov	r1, r4
    95be:	4640      	mov	r0, r8
    95c0:	47d0      	blx	sl
    95c2:	e7e9      	b.n	9598 <timer_process_counted+0x48>
    95c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    95c8:	00009f53 	.word	0x00009f53
    95cc:	000094f9 	.word	0x000094f9

000095d0 <timer_init>:
{
    95d0:	b510      	push	{r4, lr}
    95d2:	4604      	mov	r4, r0
	descr->func = func;
    95d4:	f840 2b04 	str.w	r2, [r0], #4
	descr->func->init(&descr->device, hw);
    95d8:	6813      	ldr	r3, [r2, #0]
    95da:	4798      	blx	r3
	descr->time                           = 0;
    95dc:	2000      	movs	r0, #0
    95de:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    95e0:	4b01      	ldr	r3, [pc, #4]	; (95e8 <timer_init+0x18>)
    95e2:	6063      	str	r3, [r4, #4]
}
    95e4:	bd10      	pop	{r4, pc}
    95e6:	bf00      	nop
    95e8:	00009551 	.word	0x00009551

000095ec <timer_start>:
{
    95ec:	b538      	push	{r3, r4, r5, lr}
    95ee:	4604      	mov	r4, r0
	if (descr->func->is_timer_started(&descr->device)) {
    95f0:	1d05      	adds	r5, r0, #4
    95f2:	6803      	ldr	r3, [r0, #0]
    95f4:	699b      	ldr	r3, [r3, #24]
    95f6:	4628      	mov	r0, r5
    95f8:	4798      	blx	r3
    95fa:	b928      	cbnz	r0, 9608 <timer_start+0x1c>
	descr->func->start_timer(&descr->device);
    95fc:	6823      	ldr	r3, [r4, #0]
    95fe:	689b      	ldr	r3, [r3, #8]
    9600:	4628      	mov	r0, r5
    9602:	4798      	blx	r3
	return ERR_NONE;
    9604:	2000      	movs	r0, #0
    9606:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
    9608:	f06f 0010 	mvn.w	r0, #16
}
    960c:	bd38      	pop	{r3, r4, r5, pc}
	...

00009610 <timer_add_task>:
{
    9610:	b570      	push	{r4, r5, r6, lr}
    9612:	b082      	sub	sp, #8
    9614:	4604      	mov	r4, r0
    9616:	460e      	mov	r6, r1
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    9618:	7f03      	ldrb	r3, [r0, #28]
    961a:	f043 0301 	orr.w	r3, r3, #1
    961e:	7703      	strb	r3, [r0, #28]
	if (is_list_element(&descr->tasks, task)) {
    9620:	f100 0518 	add.w	r5, r0, #24
    9624:	4628      	mov	r0, r5
    9626:	4b16      	ldr	r3, [pc, #88]	; (9680 <timer_add_task+0x70>)
    9628:	4798      	blx	r3
    962a:	b988      	cbnz	r0, 9650 <timer_add_task+0x40>
	task->time_label = descr->time;
    962c:	6963      	ldr	r3, [r4, #20]
    962e:	6073      	str	r3, [r6, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    9630:	6962      	ldr	r2, [r4, #20]
    9632:	4631      	mov	r1, r6
    9634:	4628      	mov	r0, r5
    9636:	4b13      	ldr	r3, [pc, #76]	; (9684 <timer_add_task+0x74>)
    9638:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    963a:	7f23      	ldrb	r3, [r4, #28]
    963c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    9640:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    9642:	7f23      	ldrb	r3, [r4, #28]
    9644:	f013 0f02 	tst.w	r3, #2
    9648:	d109      	bne.n	965e <timer_add_task+0x4e>
	return ERR_NONE;
    964a:	2000      	movs	r0, #0
}
    964c:	b002      	add	sp, #8
    964e:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    9650:	7f23      	ldrb	r3, [r4, #28]
    9652:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    9656:	7723      	strb	r3, [r4, #28]
		return ERR_ALREADY_INITIALIZED;
    9658:	f06f 0011 	mvn.w	r0, #17
    965c:	e7f6      	b.n	964c <timer_add_task+0x3c>
		CRITICAL_SECTION_ENTER()
    965e:	a801      	add	r0, sp, #4
    9660:	4b09      	ldr	r3, [pc, #36]	; (9688 <timer_add_task+0x78>)
    9662:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    9664:	7f23      	ldrb	r3, [r4, #28]
    9666:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    966a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    966c:	6823      	ldr	r3, [r4, #0]
    966e:	69db      	ldr	r3, [r3, #28]
    9670:	1d20      	adds	r0, r4, #4
    9672:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    9674:	a801      	add	r0, sp, #4
    9676:	4b05      	ldr	r3, [pc, #20]	; (968c <timer_add_task+0x7c>)
    9678:	4798      	blx	r3
	return ERR_NONE;
    967a:	2000      	movs	r0, #0
    967c:	e7e6      	b.n	964c <timer_add_task+0x3c>
    967e:	bf00      	nop
    9680:	00009f09 	.word	0x00009f09
    9684:	000094f9 	.word	0x000094f9
    9688:	00009011 	.word	0x00009011
    968c:	0000901f 	.word	0x0000901f

00009690 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    9690:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    9692:	2300      	movs	r3, #0
    9694:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    9696:	69c3      	ldr	r3, [r0, #28]
    9698:	b11b      	cbz	r3, 96a2 <usart_transmission_complete+0x12>
    969a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    969e:	4610      	mov	r0, r2
    96a0:	4798      	blx	r3
    96a2:	bd08      	pop	{r3, pc}

000096a4 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    96a4:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    96a6:	2300      	movs	r3, #0
    96a8:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    96aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    96ac:	b11b      	cbz	r3, 96b6 <usart_error+0x12>
    96ae:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    96b2:	4610      	mov	r0, r2
    96b4:	4798      	blx	r3
    96b6:	bd08      	pop	{r3, pc}

000096b8 <usart_fill_rx_buffer>:
{
    96b8:	b538      	push	{r3, r4, r5, lr}
    96ba:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    96bc:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    96c0:	302c      	adds	r0, #44	; 0x2c
    96c2:	4b03      	ldr	r3, [pc, #12]	; (96d0 <usart_fill_rx_buffer+0x18>)
    96c4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    96c6:	6a23      	ldr	r3, [r4, #32]
    96c8:	b10b      	cbz	r3, 96ce <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    96ca:	4628      	mov	r0, r5
    96cc:	4798      	blx	r3
    96ce:	bd38      	pop	{r3, r4, r5, pc}
    96d0:	00009f9b 	.word	0x00009f9b

000096d4 <usart_async_write>:
{
    96d4:	b510      	push	{r4, lr}
	if (descr->tx_por != descr->tx_buffer_length) {
    96d6:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
    96da:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    96de:	429c      	cmp	r4, r3
    96e0:	d10d      	bne.n	96fe <usart_async_write+0x2a>
    96e2:	4614      	mov	r4, r2
	descr->tx_buffer        = (uint8_t *)buf;
    96e4:	6481      	str	r1, [r0, #72]	; 0x48
	descr->tx_buffer_length = length;
    96e6:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
	descr->tx_por           = 0;
    96ea:	2300      	movs	r3, #0
    96ec:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    96f0:	2301      	movs	r3, #1
    96f2:	6303      	str	r3, [r0, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    96f4:	3008      	adds	r0, #8
    96f6:	4b03      	ldr	r3, [pc, #12]	; (9704 <usart_async_write+0x30>)
    96f8:	4798      	blx	r3
	return (int32_t)length;
    96fa:	4620      	mov	r0, r4
    96fc:	bd10      	pop	{r4, pc}
		return ERR_NO_RESOURCE;
    96fe:	f06f 001b 	mvn.w	r0, #27
}
    9702:	bd10      	pop	{r4, pc}
    9704:	0000b3b3 	.word	0x0000b3b3

00009708 <usart_process_byte_sent>:
{
    9708:	b510      	push	{r4, lr}
    970a:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    970c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    970e:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    9712:	429a      	cmp	r2, r3
    9714:	d009      	beq.n	972a <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    9716:	6c02      	ldr	r2, [r0, #64]	; 0x40
    9718:	1c59      	adds	r1, r3, #1
    971a:	8781      	strh	r1, [r0, #60]	; 0x3c
    971c:	5cd1      	ldrb	r1, [r2, r3]
    971e:	4b04      	ldr	r3, [pc, #16]	; (9730 <usart_process_byte_sent+0x28>)
    9720:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    9722:	4620      	mov	r0, r4
    9724:	4b03      	ldr	r3, [pc, #12]	; (9734 <usart_process_byte_sent+0x2c>)
    9726:	4798      	blx	r3
    9728:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    972a:	4b03      	ldr	r3, [pc, #12]	; (9738 <usart_process_byte_sent+0x30>)
    972c:	4798      	blx	r3
    972e:	bd10      	pop	{r4, pc}
    9730:	0000b387 	.word	0x0000b387
    9734:	0000b3b3 	.word	0x0000b3b3
    9738:	0000b3bb 	.word	0x0000b3bb

0000973c <usart_async_read>:
{
    973c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9740:	b082      	sub	sp, #8
    9742:	4682      	mov	sl, r0
    9744:	4688      	mov	r8, r1
    9746:	4615      	mov	r5, r2
	CRITICAL_SECTION_ENTER()
    9748:	a801      	add	r0, sp, #4
    974a:	4b13      	ldr	r3, [pc, #76]	; (9798 <usart_async_read+0x5c>)
    974c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    974e:	f10a 0a34 	add.w	sl, sl, #52	; 0x34
    9752:	4650      	mov	r0, sl
    9754:	4b11      	ldr	r3, [pc, #68]	; (979c <usart_async_read+0x60>)
    9756:	4798      	blx	r3
    9758:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
    975a:	a801      	add	r0, sp, #4
    975c:	4b10      	ldr	r3, [pc, #64]	; (97a0 <usart_async_read+0x64>)
    975e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    9760:	b1a7      	cbz	r7, 978c <usart_async_read+0x50>
    9762:	b1b5      	cbz	r5, 9792 <usart_async_read+0x56>
    9764:	3d01      	subs	r5, #1
    9766:	b2ad      	uxth	r5, r5
    9768:	3502      	adds	r5, #2
    976a:	2401      	movs	r4, #1
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    976c:	4e0d      	ldr	r6, [pc, #52]	; (97a4 <usart_async_read+0x68>)
    976e:	fa1f f984 	uxth.w	r9, r4
    9772:	1e61      	subs	r1, r4, #1
    9774:	4441      	add	r1, r8
    9776:	4650      	mov	r0, sl
    9778:	47b0      	blx	r6
	while ((was_read < num) && (was_read < length)) {
    977a:	42bc      	cmp	r4, r7
    977c:	d002      	beq.n	9784 <usart_async_read+0x48>
    977e:	3401      	adds	r4, #1
    9780:	42ac      	cmp	r4, r5
    9782:	d1f4      	bne.n	976e <usart_async_read+0x32>
}
    9784:	4648      	mov	r0, r9
    9786:	b002      	add	sp, #8
    9788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t                       was_read = 0;
    978c:	f04f 0900 	mov.w	r9, #0
    9790:	e7f8      	b.n	9784 <usart_async_read+0x48>
    9792:	f04f 0900 	mov.w	r9, #0
    9796:	e7f5      	b.n	9784 <usart_async_read+0x48>
    9798:	00009011 	.word	0x00009011
    979c:	00009fbd 	.word	0x00009fbd
    97a0:	0000901f 	.word	0x0000901f
    97a4:	00009f79 	.word	0x00009f79

000097a8 <usart_async_init>:
{
    97a8:	b538      	push	{r3, r4, r5, lr}
    97aa:	4604      	mov	r4, r0
    97ac:	460d      	mov	r5, r1
    97ae:	4611      	mov	r1, r2
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    97b0:	461a      	mov	r2, r3
    97b2:	3034      	adds	r0, #52	; 0x34
    97b4:	4b0d      	ldr	r3, [pc, #52]	; (97ec <usart_async_init+0x44>)
    97b6:	4798      	blx	r3
    97b8:	b9a0      	cbnz	r0, 97e4 <usart_async_init+0x3c>
	init_status = _usart_async_init(&descr->device, hw);
    97ba:	4629      	mov	r1, r5
    97bc:	f104 0008 	add.w	r0, r4, #8
    97c0:	4b0b      	ldr	r3, [pc, #44]	; (97f0 <usart_async_init+0x48>)
    97c2:	4798      	blx	r3
	if (init_status) {
    97c4:	4603      	mov	r3, r0
    97c6:	b958      	cbnz	r0, 97e0 <usart_async_init+0x38>
	descr->io.read  = usart_async_read;
    97c8:	4a0a      	ldr	r2, [pc, #40]	; (97f4 <usart_async_init+0x4c>)
    97ca:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    97cc:	4a0a      	ldr	r2, [pc, #40]	; (97f8 <usart_async_init+0x50>)
    97ce:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    97d0:	4a0a      	ldr	r2, [pc, #40]	; (97fc <usart_async_init+0x54>)
    97d2:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    97d4:	4a0a      	ldr	r2, [pc, #40]	; (9800 <usart_async_init+0x58>)
    97d6:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    97d8:	4a0a      	ldr	r2, [pc, #40]	; (9804 <usart_async_init+0x5c>)
    97da:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    97dc:	4a0a      	ldr	r2, [pc, #40]	; (9808 <usart_async_init+0x60>)
    97de:	6162      	str	r2, [r4, #20]
}
    97e0:	4618      	mov	r0, r3
    97e2:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_INVALID_ARG;
    97e4:	f06f 030c 	mvn.w	r3, #12
    97e8:	e7fa      	b.n	97e0 <usart_async_init+0x38>
    97ea:	bf00      	nop
    97ec:	00009f5f 	.word	0x00009f5f
    97f0:	0000b2cd 	.word	0x0000b2cd
    97f4:	0000973d 	.word	0x0000973d
    97f8:	000096d5 	.word	0x000096d5
    97fc:	00009709 	.word	0x00009709
    9800:	000096b9 	.word	0x000096b9
    9804:	00009691 	.word	0x00009691
    9808:	000096a5 	.word	0x000096a5

0000980c <usart_async_enable>:
{
    980c:	b508      	push	{r3, lr}
	_usart_async_enable(&descr->device);
    980e:	3008      	adds	r0, #8
    9810:	4b01      	ldr	r3, [pc, #4]	; (9818 <usart_async_enable+0xc>)
    9812:	4798      	blx	r3
}
    9814:	2000      	movs	r0, #0
    9816:	bd08      	pop	{r3, pc}
    9818:	0000b349 	.word	0x0000b349

0000981c <usart_async_disable>:
{
    981c:	b508      	push	{r3, lr}
	_usart_async_disable(&descr->device);
    981e:	3008      	adds	r0, #8
    9820:	4b01      	ldr	r3, [pc, #4]	; (9828 <usart_async_disable+0xc>)
    9822:	4798      	blx	r3
}
    9824:	2000      	movs	r0, #0
    9826:	bd08      	pop	{r3, pc}
    9828:	0000b35d 	.word	0x0000b35d

0000982c <usart_async_get_io_descriptor>:
	*io = &descr->io;
    982c:	6008      	str	r0, [r1, #0]
}
    982e:	2000      	movs	r0, #0
    9830:	4770      	bx	lr
	...

00009834 <usart_async_register_callback>:
{
    9834:	b508      	push	{r3, lr}
	switch (type) {
    9836:	2901      	cmp	r1, #1
    9838:	d00f      	beq.n	985a <usart_async_register_callback+0x26>
    983a:	b121      	cbz	r1, 9846 <usart_async_register_callback+0x12>
    983c:	2902      	cmp	r1, #2
    983e:	d016      	beq.n	986e <usart_async_register_callback+0x3a>
		return ERR_INVALID_ARG;
    9840:	f06f 000c 	mvn.w	r0, #12
}
    9844:	bd08      	pop	{r3, pc}
		descr->usart_cb.rx_done = cb;
    9846:	6282      	str	r2, [r0, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    9848:	3200      	adds	r2, #0
    984a:	bf18      	it	ne
    984c:	2201      	movne	r2, #1
    984e:	2101      	movs	r1, #1
    9850:	3008      	adds	r0, #8
    9852:	4b0c      	ldr	r3, [pc, #48]	; (9884 <usart_async_register_callback+0x50>)
    9854:	4798      	blx	r3
	return ERR_NONE;
    9856:	2000      	movs	r0, #0
		break;
    9858:	bd08      	pop	{r3, pc}
		descr->usart_cb.tx_done = cb;
    985a:	6242      	str	r2, [r0, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    985c:	3200      	adds	r2, #0
    985e:	bf18      	it	ne
    9860:	2201      	movne	r2, #1
    9862:	2102      	movs	r1, #2
    9864:	3008      	adds	r0, #8
    9866:	4b07      	ldr	r3, [pc, #28]	; (9884 <usart_async_register_callback+0x50>)
    9868:	4798      	blx	r3
	return ERR_NONE;
    986a:	2000      	movs	r0, #0
		break;
    986c:	bd08      	pop	{r3, pc}
		descr->usart_cb.error = cb;
    986e:	62c2      	str	r2, [r0, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    9870:	3200      	adds	r2, #0
    9872:	bf18      	it	ne
    9874:	2201      	movne	r2, #1
    9876:	2103      	movs	r1, #3
    9878:	3008      	adds	r0, #8
    987a:	4b02      	ldr	r3, [pc, #8]	; (9884 <usart_async_register_callback+0x50>)
    987c:	4798      	blx	r3
	return ERR_NONE;
    987e:	2000      	movs	r0, #0
		break;
    9880:	bd08      	pop	{r3, pc}
    9882:	bf00      	nop
    9884:	0000b3c3 	.word	0x0000b3c3

00009888 <usart_async_set_parity>:
{
    9888:	b508      	push	{r3, lr}
	_usart_async_set_parity(&descr->device, parity);
    988a:	3008      	adds	r0, #8
    988c:	4b01      	ldr	r3, [pc, #4]	; (9894 <usart_async_set_parity+0xc>)
    988e:	4798      	blx	r3
}
    9890:	2000      	movs	r0, #0
    9892:	bd08      	pop	{r3, pc}
    9894:	0000b371 	.word	0x0000b371

00009898 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    9898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    989c:	460f      	mov	r7, r1
    989e:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	while (!_usart_sync_is_ready_to_send(&descr->device))
    98a0:	f100 0408 	add.w	r4, r0, #8
    98a4:	4d0e      	ldr	r5, [pc, #56]	; (98e0 <usart_sync_write+0x48>)
    98a6:	4620      	mov	r0, r4
    98a8:	47a8      	blx	r5
    98aa:	2800      	cmp	r0, #0
    98ac:	d0fb      	beq.n	98a6 <usart_sync_write+0xe>
    98ae:	3f01      	subs	r7, #1
    98b0:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    98b2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 98e8 <usart_sync_write+0x50>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    98b6:	4d0a      	ldr	r5, [pc, #40]	; (98e0 <usart_sync_write+0x48>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    98b8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    98bc:	4620      	mov	r0, r4
    98be:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
    98c0:	4620      	mov	r0, r4
    98c2:	47a8      	blx	r5
    98c4:	2800      	cmp	r0, #0
    98c6:	d0fb      	beq.n	98c0 <usart_sync_write+0x28>
			;
	} while (++offset < length);
    98c8:	3601      	adds	r6, #1
    98ca:	454e      	cmp	r6, r9
    98cc:	d3f4      	bcc.n	98b8 <usart_sync_write+0x20>
	while (!_usart_sync_is_transmit_done(&descr->device))
    98ce:	4d05      	ldr	r5, [pc, #20]	; (98e4 <usart_sync_write+0x4c>)
    98d0:	4620      	mov	r0, r4
    98d2:	47a8      	blx	r5
    98d4:	2800      	cmp	r0, #0
    98d6:	d0fb      	beq.n	98d0 <usart_sync_write+0x38>
		;
	return (int32_t)offset;
}
    98d8:	4630      	mov	r0, r6
    98da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    98de:	bf00      	nop
    98e0:	0000b395 	.word	0x0000b395
    98e4:	0000b39f 	.word	0x0000b39f
    98e8:	0000b381 	.word	0x0000b381

000098ec <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    98ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    98f0:	4691      	mov	r9, r2
    98f2:	1e4f      	subs	r7, r1, #1
	uint32_t                      offset = 0;
    98f4:	2600      	movs	r6, #0
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    98f6:	f100 0408 	add.w	r4, r0, #8
    98fa:	4d08      	ldr	r5, [pc, #32]	; (991c <usart_sync_read+0x30>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    98fc:	f8df 8020 	ldr.w	r8, [pc, #32]	; 9920 <usart_sync_read+0x34>
		while (!_usart_sync_is_byte_received(&descr->device))
    9900:	4620      	mov	r0, r4
    9902:	47a8      	blx	r5
    9904:	2800      	cmp	r0, #0
    9906:	d0fb      	beq.n	9900 <usart_sync_read+0x14>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    9908:	4620      	mov	r0, r4
    990a:	47c0      	blx	r8
    990c:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    9910:	3601      	adds	r6, #1
    9912:	454e      	cmp	r6, r9
    9914:	d3f4      	bcc.n	9900 <usart_sync_read+0x14>

	return (int32_t)offset;
}
    9916:	4630      	mov	r0, r6
    9918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    991c:	0000b3a9 	.word	0x0000b3a9
    9920:	0000b38d 	.word	0x0000b38d

00009924 <usart_sync_init>:
{
    9924:	b510      	push	{r4, lr}
    9926:	4604      	mov	r4, r0
	init_status = _usart_sync_init(&descr->device, hw);
    9928:	3008      	adds	r0, #8
    992a:	4b05      	ldr	r3, [pc, #20]	; (9940 <usart_sync_init+0x1c>)
    992c:	4798      	blx	r3
	if (init_status) {
    992e:	4603      	mov	r3, r0
    9930:	b918      	cbnz	r0, 993a <usart_sync_init+0x16>
	descr->io.read  = usart_sync_read;
    9932:	4a04      	ldr	r2, [pc, #16]	; (9944 <usart_sync_init+0x20>)
    9934:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    9936:	4a04      	ldr	r2, [pc, #16]	; (9948 <usart_sync_init+0x24>)
    9938:	6022      	str	r2, [r4, #0]
}
    993a:	4618      	mov	r0, r3
    993c:	bd10      	pop	{r4, pc}
    993e:	bf00      	nop
    9940:	0000b2bd 	.word	0x0000b2bd
    9944:	000098ed 	.word	0x000098ed
    9948:	00009899 	.word	0x00009899

0000994c <usart_sync_enable>:
{
    994c:	b508      	push	{r3, lr}
	_usart_sync_enable(&descr->device);
    994e:	3008      	adds	r0, #8
    9950:	4b01      	ldr	r3, [pc, #4]	; (9958 <usart_sync_enable+0xc>)
    9952:	4798      	blx	r3
}
    9954:	2000      	movs	r0, #0
    9956:	bd08      	pop	{r3, pc}
    9958:	0000b335 	.word	0x0000b335

0000995c <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    995c:	4b0f      	ldr	r3, [pc, #60]	; (999c <_usb_d_find_ep+0x40>)
    995e:	7859      	ldrb	r1, [r3, #1]
    9960:	4288      	cmp	r0, r1
    9962:	d018      	beq.n	9996 <_usb_d_find_ep+0x3a>
{
    9964:	b430      	push	{r4, r5}
    9966:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    9968:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    996a:	f000 050f 	and.w	r5, r0, #15
    996e:	e007      	b.n	9980 <_usb_d_find_ep+0x24>
    9970:	3301      	adds	r3, #1
    9972:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    9974:	2b0d      	cmp	r3, #13
    9976:	d009      	beq.n	998c <_usb_d_find_ep+0x30>
    9978:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    997a:	7851      	ldrb	r1, [r2, #1]
    997c:	4281      	cmp	r1, r0
    997e:	d007      	beq.n	9990 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    9980:	7814      	ldrb	r4, [r2, #0]
    9982:	2c00      	cmp	r4, #0
    9984:	d1f4      	bne.n	9970 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    9986:	428d      	cmp	r5, r1
    9988:	d1f2      	bne.n	9970 <_usb_d_find_ep+0x14>
    998a:	e001      	b.n	9990 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    998c:	f04f 33ff 	mov.w	r3, #4294967295
}
    9990:	4618      	mov	r0, r3
    9992:	bc30      	pop	{r4, r5}
    9994:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    9996:	2300      	movs	r3, #0
}
    9998:	4618      	mov	r0, r3
    999a:	4770      	bx	lr
    999c:	2000064c 	.word	0x2000064c

000099a0 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    99a0:	2000      	movs	r0, #0
    99a2:	4770      	bx	lr

000099a4 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    99a4:	b538      	push	{r3, r4, r5, lr}
    99a6:	4604      	mov	r4, r0
    99a8:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    99aa:	4b09      	ldr	r3, [pc, #36]	; (99d0 <usb_d_cb_trans_more+0x2c>)
    99ac:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    99ae:	4b09      	ldr	r3, [pc, #36]	; (99d4 <usb_d_cb_trans_more+0x30>)
    99b0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    99b4:	789b      	ldrb	r3, [r3, #2]
    99b6:	2b03      	cmp	r3, #3
    99b8:	d001      	beq.n	99be <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    99ba:	2000      	movs	r0, #0
}
    99bc:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    99be:	4b05      	ldr	r3, [pc, #20]	; (99d4 <usb_d_cb_trans_more+0x30>)
    99c0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    99c4:	6983      	ldr	r3, [r0, #24]
    99c6:	4629      	mov	r1, r5
    99c8:	4620      	mov	r0, r4
    99ca:	4798      	blx	r3
    99cc:	bd38      	pop	{r3, r4, r5, pc}
    99ce:	bf00      	nop
    99d0:	0000995d 	.word	0x0000995d
    99d4:	2000064c 	.word	0x2000064c

000099d8 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    99d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    99da:	b085      	sub	sp, #20
    99dc:	4606      	mov	r6, r0
    99de:	460d      	mov	r5, r1
    99e0:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    99e2:	4b4d      	ldr	r3, [pc, #308]	; (9b18 <_usb_d_cb_trans_done+0x140>)
    99e4:	4798      	blx	r3
    99e6:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    99e8:	2d00      	cmp	r5, #0
    99ea:	d15b      	bne.n	9aa4 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    99ec:	4a4b      	ldr	r2, [pc, #300]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    99ee:	0143      	lsls	r3, r0, #5
    99f0:	18d1      	adds	r1, r2, r3
    99f2:	2000      	movs	r0, #0
    99f4:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    99f6:	5cd3      	ldrb	r3, [r2, r3]
    99f8:	b173      	cbz	r3, 9a18 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    99fa:	4b48      	ldr	r3, [pc, #288]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    99fc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9a00:	2201      	movs	r2, #1
    9a02:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    9a04:	4845      	ldr	r0, [pc, #276]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9a06:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9a0a:	69c3      	ldr	r3, [r0, #28]
    9a0c:	463a      	mov	r2, r7
    9a0e:	78c1      	ldrb	r1, [r0, #3]
    9a10:	4630      	mov	r0, r6
    9a12:	4798      	blx	r3
}
    9a14:	b005      	add	sp, #20
    9a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    9a18:	788b      	ldrb	r3, [r1, #2]
    9a1a:	2b03      	cmp	r3, #3
    9a1c:	d00b      	beq.n	9a36 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    9a1e:	483f      	ldr	r0, [pc, #252]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9a20:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    9a24:	4614      	mov	r4, r2
    9a26:	69d3      	ldr	r3, [r2, #28]
    9a28:	320c      	adds	r2, #12
    9a2a:	2100      	movs	r1, #0
    9a2c:	7860      	ldrb	r0, [r4, #1]
    9a2e:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    9a30:	2302      	movs	r3, #2
    9a32:	70a3      	strb	r3, [r4, #2]
    9a34:	e7ee      	b.n	9a14 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    9a36:	460b      	mov	r3, r1
    9a38:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    9a3c:	460a      	mov	r2, r1
    9a3e:	69ce      	ldr	r6, [r1, #28]
    9a40:	320c      	adds	r2, #12
    9a42:	2101      	movs	r1, #1
    9a44:	7858      	ldrb	r0, [r3, #1]
    9a46:	47b0      	blx	r6
		if (err) {
    9a48:	b1a0      	cbz	r0, 9a74 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    9a4a:	4b34      	ldr	r3, [pc, #208]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9a4c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9a50:	2205      	movs	r2, #5
    9a52:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    9a54:	2202      	movs	r2, #2
    9a56:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    9a58:	2d00      	cmp	r5, #0
    9a5a:	db09      	blt.n	9a70 <_usb_d_cb_trans_done+0x98>
    9a5c:	482f      	ldr	r0, [pc, #188]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9a5e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9a62:	7840      	ldrb	r0, [r0, #1]
    9a64:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    9a68:	2101      	movs	r1, #1
    9a6a:	4b2d      	ldr	r3, [pc, #180]	; (9b20 <_usb_d_cb_trans_done+0x148>)
    9a6c:	4798      	blx	r3
    9a6e:	e7d1      	b.n	9a14 <_usb_d_cb_trans_done+0x3c>
    9a70:	7858      	ldrb	r0, [r3, #1]
    9a72:	e7f9      	b.n	9a68 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    9a74:	4829      	ldr	r0, [pc, #164]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9a76:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9a7a:	2304      	movs	r3, #4
    9a7c:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    9a7e:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    9a80:	2200      	movs	r2, #0
    9a82:	9201      	str	r2, [sp, #4]
    9a84:	9202      	str	r2, [sp, #8]
    9a86:	4295      	cmp	r5, r2
    9a88:	bfac      	ite	ge
    9a8a:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    9a8e:	f003 030f 	andlt.w	r3, r3, #15
    9a92:	f88d 300c 	strb.w	r3, [sp, #12]
    9a96:	2301      	movs	r3, #1
    9a98:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    9a9c:	a801      	add	r0, sp, #4
    9a9e:	4b21      	ldr	r3, [pc, #132]	; (9b24 <_usb_d_cb_trans_done+0x14c>)
    9aa0:	4798      	blx	r3
    9aa2:	e7b7      	b.n	9a14 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    9aa4:	2d01      	cmp	r5, #1
    9aa6:	d00a      	beq.n	9abe <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    9aa8:	2d02      	cmp	r5, #2
    9aaa:	d01c      	beq.n	9ae6 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    9aac:	2d03      	cmp	r5, #3
    9aae:	d02a      	beq.n	9b06 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    9ab0:	4b1a      	ldr	r3, [pc, #104]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9ab2:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    9ab6:	2206      	movs	r2, #6
    9ab8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    9aba:	70da      	strb	r2, [r3, #3]
    9abc:	e7a2      	b.n	9a04 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    9abe:	4a17      	ldr	r2, [pc, #92]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9ac0:	0143      	lsls	r3, r0, #5
    9ac2:	18d1      	adds	r1, r2, r3
    9ac4:	2002      	movs	r0, #2
    9ac6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9ac8:	5cd3      	ldrb	r3, [r2, r3]
    9aca:	b12b      	cbz	r3, 9ad8 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    9acc:	4b13      	ldr	r3, [pc, #76]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9ace:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9ad2:	2205      	movs	r2, #5
    9ad4:	709a      	strb	r2, [r3, #2]
    9ad6:	e795      	b.n	9a04 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    9ad8:	460b      	mov	r3, r1
    9ada:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    9adc:	2100      	movs	r1, #0
    9ade:	4630      	mov	r0, r6
    9ae0:	4b0f      	ldr	r3, [pc, #60]	; (9b20 <_usb_d_cb_trans_done+0x148>)
    9ae2:	4798      	blx	r3
    9ae4:	e78e      	b.n	9a04 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    9ae6:	4a0d      	ldr	r2, [pc, #52]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9ae8:	0143      	lsls	r3, r0, #5
    9aea:	18d1      	adds	r1, r2, r3
    9aec:	2004      	movs	r0, #4
    9aee:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9af0:	5cd3      	ldrb	r3, [r2, r3]
    9af2:	b12b      	cbz	r3, 9b00 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    9af4:	4b09      	ldr	r3, [pc, #36]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9af6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9afa:	2201      	movs	r2, #1
    9afc:	709a      	strb	r2, [r3, #2]
    9afe:	e781      	b.n	9a04 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    9b00:	2302      	movs	r3, #2
    9b02:	708b      	strb	r3, [r1, #2]
			return;
    9b04:	e786      	b.n	9a14 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    9b06:	4b05      	ldr	r3, [pc, #20]	; (9b1c <_usb_d_cb_trans_done+0x144>)
    9b08:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    9b0c:	2200      	movs	r2, #0
    9b0e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    9b10:	2205      	movs	r2, #5
    9b12:	70da      	strb	r2, [r3, #3]
    9b14:	e776      	b.n	9a04 <_usb_d_cb_trans_done+0x2c>
    9b16:	bf00      	nop
    9b18:	0000995d 	.word	0x0000995d
    9b1c:	2000064c 	.word	0x2000064c
    9b20:	0000cfd9 	.word	0x0000cfd9
    9b24:	0000d181 	.word	0x0000d181

00009b28 <usb_d_cb_trans_setup>:
{
    9b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b2c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    9b2e:	4b1c      	ldr	r3, [pc, #112]	; (9ba0 <usb_d_cb_trans_setup+0x78>)
    9b30:	4798      	blx	r3
    9b32:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    9b34:	4c1b      	ldr	r4, [pc, #108]	; (9ba4 <usb_d_cb_trans_setup+0x7c>)
    9b36:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    9b3a:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    9b3c:	4621      	mov	r1, r4
    9b3e:	4628      	mov	r0, r5
    9b40:	4b19      	ldr	r3, [pc, #100]	; (9ba8 <usb_d_cb_trans_setup+0x80>)
    9b42:	4798      	blx	r3
	if (n != 8) {
    9b44:	b2c0      	uxtb	r0, r0
    9b46:	2808      	cmp	r0, #8
    9b48:	d009      	beq.n	9b5e <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    9b4a:	2101      	movs	r1, #1
    9b4c:	4628      	mov	r0, r5
    9b4e:	4c17      	ldr	r4, [pc, #92]	; (9bac <usb_d_cb_trans_setup+0x84>)
    9b50:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    9b52:	2101      	movs	r1, #1
    9b54:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    9b58:	47a0      	blx	r4
		return;
    9b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    9b5e:	2100      	movs	r1, #0
    9b60:	4628      	mov	r0, r5
    9b62:	4f12      	ldr	r7, [pc, #72]	; (9bac <usb_d_cb_trans_setup+0x84>)
    9b64:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    9b66:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    9b6a:	2100      	movs	r1, #0
    9b6c:	4640      	mov	r0, r8
    9b6e:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    9b70:	4b0c      	ldr	r3, [pc, #48]	; (9ba4 <usb_d_cb_trans_setup+0x7c>)
    9b72:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    9b76:	2201      	movs	r2, #1
    9b78:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    9b7a:	695b      	ldr	r3, [r3, #20]
    9b7c:	4621      	mov	r1, r4
    9b7e:	4628      	mov	r0, r5
    9b80:	4798      	blx	r3
    9b82:	b108      	cbz	r0, 9b88 <usb_d_cb_trans_setup+0x60>
    9b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    9b88:	4b06      	ldr	r3, [pc, #24]	; (9ba4 <usb_d_cb_trans_setup+0x7c>)
    9b8a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    9b8e:	2305      	movs	r3, #5
    9b90:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    9b92:	2101      	movs	r1, #1
    9b94:	4628      	mov	r0, r5
    9b96:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    9b98:	2101      	movs	r1, #1
    9b9a:	4640      	mov	r0, r8
    9b9c:	47b8      	blx	r7
    9b9e:	e7f1      	b.n	9b84 <usb_d_cb_trans_setup+0x5c>
    9ba0:	0000995d 	.word	0x0000995d
    9ba4:	2000064c 	.word	0x2000064c
    9ba8:	0000d121 	.word	0x0000d121
    9bac:	0000cfd9 	.word	0x0000cfd9

00009bb0 <usb_d_init>:

int32_t usb_d_init(void)
{
    9bb0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    9bb2:	4b11      	ldr	r3, [pc, #68]	; (9bf8 <usb_d_init+0x48>)
    9bb4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    9bb6:	2800      	cmp	r0, #0
    9bb8:	db1d      	blt.n	9bf6 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    9bba:	4c10      	ldr	r4, [pc, #64]	; (9bfc <usb_d_init+0x4c>)
    9bbc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    9bc0:	2100      	movs	r1, #0
    9bc2:	4620      	mov	r0, r4
    9bc4:	4b0e      	ldr	r3, [pc, #56]	; (9c00 <usb_d_init+0x50>)
    9bc6:	4798      	blx	r3
    9bc8:	4623      	mov	r3, r4
    9bca:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    9bce:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    9bd0:	4a0c      	ldr	r2, [pc, #48]	; (9c04 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    9bd2:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    9bd4:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    9bd6:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    9bd8:	61da      	str	r2, [r3, #28]
    9bda:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    9bdc:	4283      	cmp	r3, r0
    9bde:	d1f8      	bne.n	9bd2 <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    9be0:	4909      	ldr	r1, [pc, #36]	; (9c08 <usb_d_init+0x58>)
    9be2:	2000      	movs	r0, #0
    9be4:	4c09      	ldr	r4, [pc, #36]	; (9c0c <usb_d_init+0x5c>)
    9be6:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    9be8:	4909      	ldr	r1, [pc, #36]	; (9c10 <usb_d_init+0x60>)
    9bea:	2001      	movs	r0, #1
    9bec:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    9bee:	4909      	ldr	r1, [pc, #36]	; (9c14 <usb_d_init+0x64>)
    9bf0:	2002      	movs	r0, #2
    9bf2:	47a0      	blx	r4
	return ERR_NONE;
    9bf4:	2000      	movs	r0, #0
}
    9bf6:	bd10      	pop	{r4, pc}
    9bf8:	0000c9a5 	.word	0x0000c9a5
    9bfc:	2000064c 	.word	0x2000064c
    9c00:	0000fec3 	.word	0x0000fec3
    9c04:	000099a1 	.word	0x000099a1
    9c08:	00009b29 	.word	0x00009b29
    9c0c:	0000d389 	.word	0x0000d389
    9c10:	000099a5 	.word	0x000099a5
    9c14:	000099d9 	.word	0x000099d9

00009c18 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    9c18:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    9c1a:	4b01      	ldr	r3, [pc, #4]	; (9c20 <usb_d_register_callback+0x8>)
    9c1c:	4798      	blx	r3
    9c1e:	bd08      	pop	{r3, pc}
    9c20:	0000d361 	.word	0x0000d361

00009c24 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
    9c24:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
    9c26:	4b01      	ldr	r3, [pc, #4]	; (9c2c <usb_d_enable+0x8>)
    9c28:	4798      	blx	r3
}
    9c2a:	bd08      	pop	{r3, pc}
    9c2c:	0000caad 	.word	0x0000caad

00009c30 <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
    9c30:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
    9c32:	4b01      	ldr	r3, [pc, #4]	; (9c38 <usb_d_attach+0x8>)
    9c34:	4798      	blx	r3
    9c36:	bd08      	pop	{r3, pc}
    9c38:	0000cb19 	.word	0x0000cb19

00009c3c <usb_d_get_frame_num>:
{
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
    9c3c:	b508      	push	{r3, lr}
	return _usb_d_dev_get_frame_n();
    9c3e:	4b01      	ldr	r3, [pc, #4]	; (9c44 <usb_d_get_frame_num+0x8>)
    9c40:	4798      	blx	r3
}
    9c42:	bd08      	pop	{r3, pc}
    9c44:	0000cb37 	.word	0x0000cb37

00009c48 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    9c48:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    9c4a:	4b01      	ldr	r3, [pc, #4]	; (9c50 <usb_d_set_address+0x8>)
    9c4c:	4798      	blx	r3
    9c4e:	bd08      	pop	{r3, pc}
    9c50:	0000cb2b 	.word	0x0000cb2b

00009c54 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    9c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c56:	4606      	mov	r6, r0
    9c58:	460c      	mov	r4, r1
    9c5a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    9c5c:	4b0f      	ldr	r3, [pc, #60]	; (9c9c <usb_d_ep_init+0x48>)
    9c5e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    9c60:	2800      	cmp	r0, #0
    9c62:	da14      	bge.n	9c8e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    9c64:	20ff      	movs	r0, #255	; 0xff
    9c66:	4b0d      	ldr	r3, [pc, #52]	; (9c9c <usb_d_ep_init+0x48>)
    9c68:	4798      	blx	r3
		if (ep_index < 0) {
    9c6a:	1e05      	subs	r5, r0, #0
    9c6c:	db12      	blt.n	9c94 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    9c6e:	463a      	mov	r2, r7
    9c70:	4621      	mov	r1, r4
    9c72:	4630      	mov	r0, r6
    9c74:	4b0a      	ldr	r3, [pc, #40]	; (9ca0 <usb_d_ep_init+0x4c>)
    9c76:	4798      	blx	r3
	if (rc < 0) {
    9c78:	2800      	cmp	r0, #0
    9c7a:	db0d      	blt.n	9c98 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    9c7c:	4b09      	ldr	r3, [pc, #36]	; (9ca4 <usb_d_ep_init+0x50>)
    9c7e:	0168      	lsls	r0, r5, #5
    9c80:	181a      	adds	r2, r3, r0
    9c82:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    9c84:	f004 0403 	and.w	r4, r4, #3
    9c88:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    9c8a:	2000      	movs	r0, #0
    9c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    9c8e:	f06f 0013 	mvn.w	r0, #19
    9c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    9c94:	f06f 0014 	mvn.w	r0, #20
}
    9c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c9a:	bf00      	nop
    9c9c:	0000995d 	.word	0x0000995d
    9ca0:	0000cb45 	.word	0x0000cb45
    9ca4:	2000064c 	.word	0x2000064c

00009ca8 <usb_d_ep0_init>:
{
    9ca8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    9caa:	4602      	mov	r2, r0
    9cac:	2100      	movs	r1, #0
    9cae:	4608      	mov	r0, r1
    9cb0:	4b01      	ldr	r3, [pc, #4]	; (9cb8 <usb_d_ep0_init+0x10>)
    9cb2:	4798      	blx	r3
}
    9cb4:	bd08      	pop	{r3, pc}
    9cb6:	bf00      	nop
    9cb8:	00009c55 	.word	0x00009c55

00009cbc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    9cbc:	b538      	push	{r3, r4, r5, lr}
    9cbe:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    9cc0:	4b06      	ldr	r3, [pc, #24]	; (9cdc <usb_d_ep_deinit+0x20>)
    9cc2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    9cc4:	1e04      	subs	r4, r0, #0
    9cc6:	db07      	blt.n	9cd8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    9cc8:	4628      	mov	r0, r5
    9cca:	4b05      	ldr	r3, [pc, #20]	; (9ce0 <usb_d_ep_deinit+0x24>)
    9ccc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    9cce:	4805      	ldr	r0, [pc, #20]	; (9ce4 <usb_d_ep_deinit+0x28>)
    9cd0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9cd4:	23ff      	movs	r3, #255	; 0xff
    9cd6:	7043      	strb	r3, [r0, #1]
    9cd8:	bd38      	pop	{r3, r4, r5, pc}
    9cda:	bf00      	nop
    9cdc:	0000995d 	.word	0x0000995d
    9ce0:	0000cc5d 	.word	0x0000cc5d
    9ce4:	2000064c 	.word	0x2000064c

00009ce8 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    9ce8:	b538      	push	{r3, r4, r5, lr}
    9cea:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    9cec:	4b0e      	ldr	r3, [pc, #56]	; (9d28 <usb_d_ep_enable+0x40>)
    9cee:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    9cf0:	1e04      	subs	r4, r0, #0
    9cf2:	db16      	blt.n	9d22 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    9cf4:	0163      	lsls	r3, r4, #5
    9cf6:	4a0d      	ldr	r2, [pc, #52]	; (9d2c <usb_d_ep_enable+0x44>)
    9cf8:	5cd3      	ldrb	r3, [r2, r3]
    9cfa:	2b00      	cmp	r3, #0
    9cfc:	bf0c      	ite	eq
    9cfe:	2202      	moveq	r2, #2
    9d00:	2201      	movne	r2, #1
    9d02:	4b0a      	ldr	r3, [pc, #40]	; (9d2c <usb_d_ep_enable+0x44>)
    9d04:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    9d08:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    9d0a:	4628      	mov	r0, r5
    9d0c:	4b08      	ldr	r3, [pc, #32]	; (9d30 <usb_d_ep_enable+0x48>)
    9d0e:	4798      	blx	r3
	if (rc < 0) {
    9d10:	2800      	cmp	r0, #0
    9d12:	db00      	blt.n	9d16 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    9d14:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    9d16:	4b05      	ldr	r3, [pc, #20]	; (9d2c <usb_d_ep_enable+0x44>)
    9d18:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    9d1c:	2300      	movs	r3, #0
    9d1e:	70a3      	strb	r3, [r4, #2]
    9d20:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    9d22:	f06f 0011 	mvn.w	r0, #17
    9d26:	e7f5      	b.n	9d14 <usb_d_ep_enable+0x2c>
    9d28:	0000995d 	.word	0x0000995d
    9d2c:	2000064c 	.word	0x2000064c
    9d30:	0000cd21 	.word	0x0000cd21

00009d34 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    9d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d38:	b086      	sub	sp, #24
    9d3a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    9d3c:	7a07      	ldrb	r7, [r0, #8]
    9d3e:	4638      	mov	r0, r7
    9d40:	4b3f      	ldr	r3, [pc, #252]	; (9e40 <usb_d_ep_transfer+0x10c>)
    9d42:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    9d44:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    9d46:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    9d4a:	1e06      	subs	r6, r0, #0
    9d4c:	db72      	blt.n	9e34 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    9d4e:	a804      	add	r0, sp, #16
    9d50:	4b3c      	ldr	r3, [pc, #240]	; (9e44 <usb_d_ep_transfer+0x110>)
    9d52:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    9d54:	4b3c      	ldr	r3, [pc, #240]	; (9e48 <usb_d_ep_transfer+0x114>)
    9d56:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    9d5a:	789b      	ldrb	r3, [r3, #2]
    9d5c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    9d60:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d64:	b2db      	uxtb	r3, r3
    9d66:	2b01      	cmp	r3, #1
    9d68:	d011      	beq.n	9d8e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    9d6a:	a804      	add	r0, sp, #16
    9d6c:	4b37      	ldr	r3, [pc, #220]	; (9e4c <usb_d_ep_transfer+0x118>)
    9d6e:	4798      	blx	r3
		switch (state) {
    9d70:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d74:	b2db      	uxtb	r3, r3
    9d76:	2b05      	cmp	r3, #5
    9d78:	d05f      	beq.n	9e3a <usb_d_ep_transfer+0x106>
    9d7a:	2b06      	cmp	r3, #6
    9d7c:	d023      	beq.n	9dc6 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    9d7e:	2b00      	cmp	r3, #0
    9d80:	bf0c      	ite	eq
    9d82:	f06f 0012 	mvneq.w	r0, #18
    9d86:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    9d88:	b006      	add	sp, #24
    9d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    9d8e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 9e48 <usb_d_ep_transfer+0x114>
    9d92:	ea4f 1946 	mov.w	r9, r6, lsl #5
    9d96:	eb0a 0309 	add.w	r3, sl, r9
    9d9a:	2203      	movs	r2, #3
    9d9c:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    9d9e:	a804      	add	r0, sp, #16
    9da0:	4b2a      	ldr	r3, [pc, #168]	; (9e4c <usb_d_ep_transfer+0x118>)
    9da2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    9da4:	f81a 3009 	ldrb.w	r3, [sl, r9]
    9da8:	b183      	cbz	r3, 9dcc <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    9daa:	7a22      	ldrb	r2, [r4, #8]
    9dac:	3500      	adds	r5, #0
    9dae:	bf18      	it	ne
    9db0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    9db2:	6823      	ldr	r3, [r4, #0]
    9db4:	9301      	str	r3, [sp, #4]
    9db6:	f8cd 8008 	str.w	r8, [sp, #8]
    9dba:	f017 0f80 	tst.w	r7, #128	; 0x80
    9dbe:	d119      	bne.n	9df4 <usb_d_ep_transfer+0xc0>
    9dc0:	f002 030f 	and.w	r3, r2, #15
    9dc4:	e018      	b.n	9df8 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    9dc6:	f06f 000f 	mvn.w	r0, #15
    9dca:	e7dd      	b.n	9d88 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    9dcc:	4b1e      	ldr	r3, [pc, #120]	; (9e48 <usb_d_ep_transfer+0x114>)
    9dce:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    9dd2:	7cda      	ldrb	r2, [r3, #19]
    9dd4:	7c9d      	ldrb	r5, [r3, #18]
    9dd6:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    9dda:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    9ddc:	b9a5      	cbnz	r5, 9e08 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    9dde:	4b1a      	ldr	r3, [pc, #104]	; (9e48 <usb_d_ep_transfer+0x114>)
    9de0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    9de4:	2304      	movs	r3, #4
    9de6:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    9de8:	2300      	movs	r3, #0
			zlp                 = true;
    9dea:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    9dec:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    9dee:	6821      	ldr	r1, [r4, #0]
    9df0:	9101      	str	r1, [sp, #4]
    9df2:	9302      	str	r3, [sp, #8]
    9df4:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    9df8:	f88d 300c 	strb.w	r3, [sp, #12]
    9dfc:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    9e00:	a801      	add	r0, sp, #4
    9e02:	4b13      	ldr	r3, [pc, #76]	; (9e50 <usb_d_ep_transfer+0x11c>)
    9e04:	4798      	blx	r3
	return rc;
    9e06:	e7bf      	b.n	9d88 <usb_d_ep_transfer+0x54>
    9e08:	4643      	mov	r3, r8
    9e0a:	45a8      	cmp	r8, r5
    9e0c:	bf28      	it	cs
    9e0e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    9e10:	4a0d      	ldr	r2, [pc, #52]	; (9e48 <usb_d_ep_transfer+0x114>)
    9e12:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    9e16:	f996 200c 	ldrsb.w	r2, [r6, #12]
    9e1a:	2a00      	cmp	r2, #0
    9e1c:	db05      	blt.n	9e2a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    9e1e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    9e20:	6821      	ldr	r1, [r4, #0]
    9e22:	9101      	str	r1, [sp, #4]
    9e24:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    9e26:	2500      	movs	r5, #0
    9e28:	e7ca      	b.n	9dc0 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    9e2a:	429d      	cmp	r5, r3
    9e2c:	bf94      	ite	ls
    9e2e:	2500      	movls	r5, #0
    9e30:	2501      	movhi	r5, #1
    9e32:	e7db      	b.n	9dec <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    9e34:	f06f 0011 	mvn.w	r0, #17
    9e38:	e7a6      	b.n	9d88 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    9e3a:	2002      	movs	r0, #2
    9e3c:	e7a4      	b.n	9d88 <usb_d_ep_transfer+0x54>
    9e3e:	bf00      	nop
    9e40:	0000995d 	.word	0x0000995d
    9e44:	00009011 	.word	0x00009011
    9e48:	2000064c 	.word	0x2000064c
    9e4c:	0000901f 	.word	0x0000901f
    9e50:	0000d181 	.word	0x0000d181

00009e54 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    9e54:	b538      	push	{r3, r4, r5, lr}
    9e56:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    9e58:	b141      	cbz	r1, 9e6c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    9e5a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    9e5c:	bf0c      	ite	eq
    9e5e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    9e60:	2102      	movne	r1, #2
    9e62:	4b13      	ldr	r3, [pc, #76]	; (9eb0 <usb_d_ep_halt+0x5c>)
    9e64:	4798      	blx	r3
    9e66:	4603      	mov	r3, r0
	}
}
    9e68:	4618      	mov	r0, r3
    9e6a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    9e6c:	4b11      	ldr	r3, [pc, #68]	; (9eb4 <usb_d_ep_halt+0x60>)
    9e6e:	4798      	blx	r3
	if (ep_index < 0) {
    9e70:	1e05      	subs	r5, r0, #0
    9e72:	db19      	blt.n	9ea8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    9e74:	2102      	movs	r1, #2
    9e76:	4620      	mov	r0, r4
    9e78:	4b0d      	ldr	r3, [pc, #52]	; (9eb0 <usb_d_ep_halt+0x5c>)
    9e7a:	4798      	blx	r3
    9e7c:	4603      	mov	r3, r0
    9e7e:	2800      	cmp	r0, #0
    9e80:	d0f2      	beq.n	9e68 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    9e82:	2100      	movs	r1, #0
    9e84:	4620      	mov	r0, r4
    9e86:	4b0a      	ldr	r3, [pc, #40]	; (9eb0 <usb_d_ep_halt+0x5c>)
    9e88:	4798      	blx	r3
		if (rc < 0) {
    9e8a:	1e03      	subs	r3, r0, #0
    9e8c:	dbec      	blt.n	9e68 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    9e8e:	4b0a      	ldr	r3, [pc, #40]	; (9eb8 <usb_d_ep_halt+0x64>)
    9e90:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    9e94:	2201      	movs	r2, #1
    9e96:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    9e98:	2103      	movs	r1, #3
    9e9a:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    9e9c:	69db      	ldr	r3, [r3, #28]
    9e9e:	2200      	movs	r2, #0
    9ea0:	4620      	mov	r0, r4
    9ea2:	4798      	blx	r3
	return ERR_NONE;
    9ea4:	2300      	movs	r3, #0
    9ea6:	e7df      	b.n	9e68 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    9ea8:	f06f 0311 	mvn.w	r3, #17
    9eac:	e7dc      	b.n	9e68 <usb_d_ep_halt+0x14>
    9eae:	bf00      	nop
    9eb0:	0000cfd9 	.word	0x0000cfd9
    9eb4:	0000995d 	.word	0x0000995d
    9eb8:	2000064c 	.word	0x2000064c

00009ebc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    9ebc:	b538      	push	{r3, r4, r5, lr}
    9ebe:	460d      	mov	r5, r1
    9ec0:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    9ec2:	4b0e      	ldr	r3, [pc, #56]	; (9efc <usb_d_ep_register_callback+0x40>)
    9ec4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    9ec6:	4b0e      	ldr	r3, [pc, #56]	; (9f00 <usb_d_ep_register_callback+0x44>)
    9ec8:	2c00      	cmp	r4, #0
    9eca:	bf08      	it	eq
    9ecc:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    9ece:	2800      	cmp	r0, #0
    9ed0:	db13      	blt.n	9efa <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    9ed2:	2d01      	cmp	r5, #1
    9ed4:	d008      	beq.n	9ee8 <usb_d_ep_register_callback+0x2c>
    9ed6:	b115      	cbz	r5, 9ede <usb_d_ep_register_callback+0x22>
    9ed8:	2d02      	cmp	r5, #2
    9eda:	d00a      	beq.n	9ef2 <usb_d_ep_register_callback+0x36>
    9edc:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    9ede:	4b09      	ldr	r3, [pc, #36]	; (9f04 <usb_d_ep_register_callback+0x48>)
    9ee0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    9ee4:	6144      	str	r4, [r0, #20]
		break;
    9ee6:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    9ee8:	4b06      	ldr	r3, [pc, #24]	; (9f04 <usb_d_ep_register_callback+0x48>)
    9eea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    9eee:	6184      	str	r4, [r0, #24]
		break;
    9ef0:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    9ef2:	4b04      	ldr	r3, [pc, #16]	; (9f04 <usb_d_ep_register_callback+0x48>)
    9ef4:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    9ef8:	61c4      	str	r4, [r0, #28]
    9efa:	bd38      	pop	{r3, r4, r5, pc}
    9efc:	0000995d 	.word	0x0000995d
    9f00:	000099a1 	.word	0x000099a1
    9f04:	2000064c 	.word	0x2000064c

00009f08 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    9f08:	6803      	ldr	r3, [r0, #0]
    9f0a:	b14b      	cbz	r3, 9f20 <is_list_element+0x18>
		if (it == element) {
    9f0c:	428b      	cmp	r3, r1
    9f0e:	d009      	beq.n	9f24 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    9f10:	681b      	ldr	r3, [r3, #0]
    9f12:	b11b      	cbz	r3, 9f1c <is_list_element+0x14>
		if (it == element) {
    9f14:	4299      	cmp	r1, r3
    9f16:	d1fb      	bne.n	9f10 <is_list_element+0x8>
			return true;
    9f18:	2001      	movs	r0, #1
		}
	}

	return false;
}
    9f1a:	4770      	bx	lr
	return false;
    9f1c:	2000      	movs	r0, #0
    9f1e:	4770      	bx	lr
    9f20:	2000      	movs	r0, #0
    9f22:	4770      	bx	lr
			return true;
    9f24:	2001      	movs	r0, #1
    9f26:	4770      	bx	lr

00009f28 <list_insert_as_head>:
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
	ASSERT(!is_list_element(list, element));

	((struct list_element *)element)->next = list->head;
    9f28:	6803      	ldr	r3, [r0, #0]
    9f2a:	600b      	str	r3, [r1, #0]
	list->head                             = (struct list_element *)element;
    9f2c:	6001      	str	r1, [r0, #0]
    9f2e:	4770      	bx	lr

00009f30 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    9f30:	6803      	ldr	r3, [r0, #0]
    9f32:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    9f34:	6001      	str	r1, [r0, #0]
    9f36:	4770      	bx	lr

00009f38 <list_insert_at_end>:
/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
	struct list_element *it = list->head;
    9f38:	6802      	ldr	r2, [r0, #0]

	ASSERT(!is_list_element(list, element));

	if (!list->head) {
    9f3a:	b922      	cbnz	r2, 9f46 <list_insert_at_end+0xe>
		list->head                             = (struct list_element *)element;
    9f3c:	6001      	str	r1, [r0, #0]
		((struct list_element *)element)->next = NULL;
    9f3e:	2300      	movs	r3, #0
    9f40:	600b      	str	r3, [r1, #0]
		return;
    9f42:	4770      	bx	lr
	}

	while (it->next) {
		it = it->next;
    9f44:	461a      	mov	r2, r3
	while (it->next) {
    9f46:	6813      	ldr	r3, [r2, #0]
    9f48:	2b00      	cmp	r3, #0
    9f4a:	d1fb      	bne.n	9f44 <list_insert_at_end+0xc>
	}
	it->next                               = (struct list_element *)element;
    9f4c:	6011      	str	r1, [r2, #0]
	((struct list_element *)element)->next = NULL;
    9f4e:	600b      	str	r3, [r1, #0]
    9f50:	4770      	bx	lr

00009f52 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    9f52:	6803      	ldr	r3, [r0, #0]
    9f54:	b10b      	cbz	r3, 9f5a <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    9f56:	681a      	ldr	r2, [r3, #0]
    9f58:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    9f5a:	4618      	mov	r0, r3
    9f5c:	4770      	bx	lr

00009f5e <ringbuffer_init>:
	ASSERT(rb && buf && size);

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    9f5e:	1e53      	subs	r3, r2, #1
    9f60:	421a      	tst	r2, r3
    9f62:	d106      	bne.n	9f72 <ringbuffer_init+0x14>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    9f64:	6043      	str	r3, [r0, #4]
	rb->read_index  = 0;
    9f66:	2300      	movs	r3, #0
    9f68:	6083      	str	r3, [r0, #8]
	rb->write_index = rb->read_index;
    9f6a:	60c3      	str	r3, [r0, #12]
	rb->buf         = (uint8_t *)buf;
    9f6c:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
    9f6e:	4618      	mov	r0, r3
    9f70:	4770      	bx	lr
		return ERR_INVALID_ARG;
    9f72:	f06f 000c 	mvn.w	r0, #12
}
    9f76:	4770      	bx	lr

00009f78 <ringbuffer_get>:
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
	ASSERT(rb && data);

	if (rb->write_index != rb->read_index) {
    9f78:	6883      	ldr	r3, [r0, #8]
    9f7a:	68c2      	ldr	r2, [r0, #12]
    9f7c:	429a      	cmp	r2, r3
    9f7e:	d009      	beq.n	9f94 <ringbuffer_get+0x1c>
		*data = rb->buf[rb->read_index & rb->size];
    9f80:	6842      	ldr	r2, [r0, #4]
    9f82:	4013      	ands	r3, r2
    9f84:	6802      	ldr	r2, [r0, #0]
    9f86:	5cd3      	ldrb	r3, [r2, r3]
    9f88:	700b      	strb	r3, [r1, #0]
		rb->read_index++;
    9f8a:	6883      	ldr	r3, [r0, #8]
    9f8c:	3301      	adds	r3, #1
    9f8e:	6083      	str	r3, [r0, #8]
		return ERR_NONE;
    9f90:	2000      	movs	r0, #0
    9f92:	4770      	bx	lr
	}

	return ERR_NOT_FOUND;
    9f94:	f06f 0009 	mvn.w	r0, #9
}
    9f98:	4770      	bx	lr

00009f9a <ringbuffer_put>:
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
	ASSERT(rb);

	rb->buf[rb->write_index & rb->size] = data;
    9f9a:	68c3      	ldr	r3, [r0, #12]
    9f9c:	6842      	ldr	r2, [r0, #4]
    9f9e:	4013      	ands	r3, r2
    9fa0:	6802      	ldr	r2, [r0, #0]
    9fa2:	54d1      	strb	r1, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    9fa4:	68c3      	ldr	r3, [r0, #12]
    9fa6:	6841      	ldr	r1, [r0, #4]
    9fa8:	6882      	ldr	r2, [r0, #8]
    9faa:	1a9a      	subs	r2, r3, r2
    9fac:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    9fae:	bf84      	itt	hi
    9fb0:	1a59      	subhi	r1, r3, r1
    9fb2:	6081      	strhi	r1, [r0, #8]
	}

	rb->write_index++;
    9fb4:	3301      	adds	r3, #1
    9fb6:	60c3      	str	r3, [r0, #12]

	return ERR_NONE;
}
    9fb8:	2000      	movs	r0, #0
    9fba:	4770      	bx	lr

00009fbc <ringbuffer_num>:
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
	ASSERT(rb);

	return rb->write_index - rb->read_index;
    9fbc:	68c2      	ldr	r2, [r0, #12]
    9fbe:	6880      	ldr	r0, [r0, #8]
}
    9fc0:	1a10      	subs	r0, r2, r0
    9fc2:	4770      	bx	lr

00009fc4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    9fc4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    9fc6:	4a06      	ldr	r2, [pc, #24]	; (9fe0 <_sbrk+0x1c>)
    9fc8:	6812      	ldr	r2, [r2, #0]
    9fca:	b122      	cbz	r2, 9fd6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    9fcc:	4a04      	ldr	r2, [pc, #16]	; (9fe0 <_sbrk+0x1c>)
    9fce:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    9fd0:	4403      	add	r3, r0
    9fd2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    9fd4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    9fd6:	4903      	ldr	r1, [pc, #12]	; (9fe4 <_sbrk+0x20>)
    9fd8:	4a01      	ldr	r2, [pc, #4]	; (9fe0 <_sbrk+0x1c>)
    9fda:	6011      	str	r1, [r2, #0]
    9fdc:	e7f6      	b.n	9fcc <_sbrk+0x8>
    9fde:	bf00      	nop
    9fe0:	200007ec 	.word	0x200007ec
    9fe4:	20017d58 	.word	0x20017d58

00009fe8 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    9fe8:	f04f 30ff 	mov.w	r0, #4294967295
    9fec:	4770      	bx	lr

00009fee <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    9fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9ff2:	604b      	str	r3, [r1, #4]

	return 0;
}
    9ff4:	2000      	movs	r0, #0
    9ff6:	4770      	bx	lr

00009ff8 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    9ff8:	2001      	movs	r0, #1
    9ffa:	4770      	bx	lr

00009ffc <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    9ffc:	2000      	movs	r0, #0
    9ffe:	4770      	bx	lr

0000a000 <_adc_get_regs>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    a000:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    a004:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
{
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
		if (_adcs[i].number == n) {
    a008:	f3c0 2087 	ubfx	r0, r0, #10, #8
		}
	}

	ASSERT(false);
	return 0;
}
    a00c:	2801      	cmp	r0, #1
    a00e:	bf14      	ite	ne
    a010:	2000      	movne	r0, #0
    a012:	2001      	moveq	r0, #1
    a014:	4770      	bx	lr
	...

0000a018 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    a018:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    a01a:	f013 0f01 	tst.w	r3, #1
    a01e:	d11b      	bne.n	a058 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a020:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a022:	f013 0f03 	tst.w	r3, #3
    a026:	d1fb      	bne.n	a020 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    a028:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    a02a:	f013 0f02 	tst.w	r3, #2
    a02e:	d00d      	beq.n	a04c <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    a030:	8803      	ldrh	r3, [r0, #0]
    a032:	f023 0302 	bic.w	r3, r3, #2
    a036:	041b      	lsls	r3, r3, #16
    a038:	0c1b      	lsrs	r3, r3, #16
    a03a:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a03c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a03e:	f013 0f03 	tst.w	r3, #3
    a042:	d1fb      	bne.n	a03c <_adc_init+0x24>
    a044:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a046:	f013 0f02 	tst.w	r3, #2
    a04a:	d1fb      	bne.n	a044 <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    a04c:	2301      	movs	r3, #1
    a04e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a050:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a052:	f013 0f03 	tst.w	r3, #3
    a056:	d1fb      	bne.n	a050 <_adc_init+0x38>
    a058:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a05a:	f013 0f01 	tst.w	r3, #1
    a05e:	d1fb      	bne.n	a058 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    a060:	2316      	movs	r3, #22
    a062:	4a37      	ldr	r2, [pc, #220]	; (a140 <_adc_init+0x128>)
    a064:	fb03 2301 	mla	r3, r3, r1, r2
    a068:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    a06a:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a06c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a06e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a072:	2b00      	cmp	r3, #0
    a074:	d1fa      	bne.n	a06c <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    a076:	2316      	movs	r3, #22
    a078:	4a31      	ldr	r2, [pc, #196]	; (a140 <_adc_init+0x128>)
    a07a:	fb03 2301 	mla	r3, r3, r1, r2
    a07e:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    a080:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a082:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a084:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a088:	2b00      	cmp	r3, #0
    a08a:	d1fa      	bne.n	a082 <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    a08c:	2316      	movs	r3, #22
    a08e:	4a2c      	ldr	r2, [pc, #176]	; (a140 <_adc_init+0x128>)
    a090:	fb03 2301 	mla	r3, r3, r1, r2
    a094:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    a096:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    a098:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    a09a:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a09c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a09e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a0a2:	2b00      	cmp	r3, #0
    a0a4:	d1fa      	bne.n	a09c <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    a0a6:	2316      	movs	r3, #22
    a0a8:	4a25      	ldr	r2, [pc, #148]	; (a140 <_adc_init+0x128>)
    a0aa:	fb03 2301 	mla	r3, r3, r1, r2
    a0ae:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    a0b0:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a0b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a0b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	d1fa      	bne.n	a0b2 <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    a0bc:	2316      	movs	r3, #22
    a0be:	4a20      	ldr	r2, [pc, #128]	; (a140 <_adc_init+0x128>)
    a0c0:	fb03 2301 	mla	r3, r3, r1, r2
    a0c4:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    a0c6:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a0c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a0ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a0ce:	2b00      	cmp	r3, #0
    a0d0:	d1fa      	bne.n	a0c8 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    a0d2:	2316      	movs	r3, #22
    a0d4:	4a1a      	ldr	r2, [pc, #104]	; (a140 <_adc_init+0x128>)
    a0d6:	fb03 2301 	mla	r3, r3, r1, r2
    a0da:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    a0dc:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a0de:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a0e0:	f013 0f80 	tst.w	r3, #128	; 0x80
    a0e4:	d1fb      	bne.n	a0de <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    a0e6:	2316      	movs	r3, #22
    a0e8:	4a15      	ldr	r2, [pc, #84]	; (a140 <_adc_init+0x128>)
    a0ea:	fb03 2301 	mla	r3, r3, r1, r2
    a0ee:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    a0f0:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a0f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a0f4:	f413 7f80 	tst.w	r3, #256	; 0x100
    a0f8:	d1fb      	bne.n	a0f2 <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    a0fa:	2316      	movs	r3, #22
    a0fc:	4a10      	ldr	r2, [pc, #64]	; (a140 <_adc_init+0x128>)
    a0fe:	fb03 2301 	mla	r3, r3, r1, r2
    a102:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    a104:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a106:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a108:	f413 7f00 	tst.w	r3, #512	; 0x200
    a10c:	d1fb      	bne.n	a106 <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    a10e:	2316      	movs	r3, #22
    a110:	4a0b      	ldr	r2, [pc, #44]	; (a140 <_adc_init+0x128>)
    a112:	fb03 2301 	mla	r3, r3, r1, r2
    a116:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    a118:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a11a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a11c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    a120:	d1fb      	bne.n	a11a <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    a122:	2216      	movs	r2, #22
    a124:	4b06      	ldr	r3, [pc, #24]	; (a140 <_adc_init+0x128>)
    a126:	fb02 3101 	mla	r1, r2, r1, r3
    a12a:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    a12c:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    a12e:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    a130:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a132:	6b03      	ldr	r3, [r0, #48]	; 0x30
    a134:	f013 0f03 	tst.w	r3, #3
    a138:	d1fb      	bne.n	a132 <_adc_init+0x11a>

	return ERR_NONE;
}
    a13a:	2000      	movs	r0, #0
    a13c:	4770      	bx	lr
    a13e:	bf00      	nop
    a140:	00011718 	.word	0x00011718

0000a144 <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    a144:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    a146:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    a148:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    a14c:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    a150:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    a152:	f013 0f01 	tst.w	r3, #1
    a156:	d106      	bne.n	a166 <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    a158:	f013 0f02 	tst.w	r3, #2
    a15c:	d10d      	bne.n	a17a <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    a15e:	f013 0f04 	tst.w	r3, #4
    a162:	d111      	bne.n	a188 <_adc_interrupt_handler+0x44>
    a164:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    a166:	2301      	movs	r3, #1
    a168:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    a16c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    a170:	6883      	ldr	r3, [r0, #8]
    a172:	b292      	uxth	r2, r2
    a174:	2100      	movs	r1, #0
    a176:	4798      	blx	r3
    a178:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    a17a:	2302      	movs	r3, #2
    a17c:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    a180:	6843      	ldr	r3, [r0, #4]
    a182:	2100      	movs	r1, #0
    a184:	4798      	blx	r3
    a186:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    a188:	2304      	movs	r3, #4
    a18a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    a18e:	6803      	ldr	r3, [r0, #0]
    a190:	2100      	movs	r1, #0
    a192:	4798      	blx	r3
	}
}
    a194:	e7e6      	b.n	a164 <_adc_interrupt_handler+0x20>

0000a196 <_adc_get_irq_num>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    a196:	6940      	ldr	r0, [r0, #20]
    a198:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    a19c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    a1a0:	0a80      	lsrs	r0, r0, #10
	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    a1a2:	0040      	lsls	r0, r0, #1
    a1a4:	3076      	adds	r0, #118	; 0x76
}
    a1a6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    a1aa:	4770      	bx	lr

0000a1ac <_adc_async_init>:
{
    a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a1b0:	4605      	mov	r5, r0
    a1b2:	460c      	mov	r4, r1
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    a1b4:	4608      	mov	r0, r1
    a1b6:	4b37      	ldr	r3, [pc, #220]	; (a294 <_adc_async_init+0xe8>)
    a1b8:	4798      	blx	r3
    a1ba:	4601      	mov	r1, r0
    a1bc:	4620      	mov	r0, r4
    a1be:	4b36      	ldr	r3, [pc, #216]	; (a298 <_adc_async_init+0xec>)
    a1c0:	4798      	blx	r3
	if (init_status) {
    a1c2:	4606      	mov	r6, r0
    a1c4:	b110      	cbz	r0, a1cc <_adc_async_init+0x20>
}
    a1c6:	4630      	mov	r0, r6
    a1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    a1cc:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    a1ce:	4b33      	ldr	r3, [pc, #204]	; (a29c <_adc_async_init+0xf0>)
    a1d0:	429c      	cmp	r4, r3
    a1d2:	d05c      	beq.n	a28e <_adc_async_init+0xe2>
	if (hw == ADC1) {
    a1d4:	4b32      	ldr	r3, [pc, #200]	; (a2a0 <_adc_async_init+0xf4>)
    a1d6:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    a1d8:	bf04      	itt	eq
    a1da:	4b32      	ldreq	r3, [pc, #200]	; (a2a4 <_adc_async_init+0xf8>)
    a1dc:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    a1de:	4628      	mov	r0, r5
    a1e0:	4f31      	ldr	r7, [pc, #196]	; (a2a8 <_adc_async_init+0xfc>)
    a1e2:	47b8      	blx	r7
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a1e4:	0943      	lsrs	r3, r0, #5
    a1e6:	f000 001f 	and.w	r0, r0, #31
    a1ea:	2401      	movs	r4, #1
    a1ec:	fa04 f000 	lsl.w	r0, r4, r0
    a1f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a2ac <_adc_async_init+0x100>
    a1f4:	3320      	adds	r3, #32
    a1f6:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a1fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a1fe:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    a202:	4628      	mov	r0, r5
    a204:	47b8      	blx	r7
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a206:	0943      	lsrs	r3, r0, #5
    a208:	f000 001f 	and.w	r0, r0, #31
    a20c:	fa04 f000 	lsl.w	r0, r4, r0
    a210:	3360      	adds	r3, #96	; 0x60
    a212:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    a216:	4628      	mov	r0, r5
    a218:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a21a:	0943      	lsrs	r3, r0, #5
    a21c:	f000 001f 	and.w	r0, r0, #31
    a220:	4084      	lsls	r4, r0
    a222:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    a226:	4628      	mov	r0, r5
    a228:	47b8      	blx	r7
    a22a:	3001      	adds	r0, #1
    a22c:	b280      	uxth	r0, r0
    a22e:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    a230:	2b00      	cmp	r3, #0
    a232:	dbc8      	blt.n	a1c6 <_adc_async_init+0x1a>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a234:	095b      	lsrs	r3, r3, #5
    a236:	f000 001f 	and.w	r0, r0, #31
    a23a:	2201      	movs	r2, #1
    a23c:	fa02 f000 	lsl.w	r0, r2, r0
    a240:	3320      	adds	r3, #32
    a242:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a246:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a24a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    a24e:	4628      	mov	r0, r5
    a250:	47b8      	blx	r7
    a252:	3001      	adds	r0, #1
    a254:	b280      	uxth	r0, r0
    a256:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    a258:	2b00      	cmp	r3, #0
    a25a:	dbb4      	blt.n	a1c6 <_adc_async_init+0x1a>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a25c:	095b      	lsrs	r3, r3, #5
    a25e:	f000 001f 	and.w	r0, r0, #31
    a262:	2201      	movs	r2, #1
    a264:	fa02 f000 	lsl.w	r0, r2, r0
    a268:	3360      	adds	r3, #96	; 0x60
    a26a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    a26e:	4628      	mov	r0, r5
    a270:	47b8      	blx	r7
    a272:	3001      	adds	r0, #1
    a274:	b280      	uxth	r0, r0
    a276:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    a278:	2b00      	cmp	r3, #0
    a27a:	dba4      	blt.n	a1c6 <_adc_async_init+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a27c:	095b      	lsrs	r3, r3, #5
    a27e:	f000 001f 	and.w	r0, r0, #31
    a282:	2201      	movs	r2, #1
    a284:	fa02 f000 	lsl.w	r0, r2, r0
    a288:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    a28c:	e79b      	b.n	a1c6 <_adc_async_init+0x1a>
		_adc0_dev = dev;
    a28e:	4b05      	ldr	r3, [pc, #20]	; (a2a4 <_adc_async_init+0xf8>)
    a290:	601d      	str	r5, [r3, #0]
    a292:	e7a4      	b.n	a1de <_adc_async_init+0x32>
    a294:	0000a001 	.word	0x0000a001
    a298:	0000a019 	.word	0x0000a019
    a29c:	43001c00 	.word	0x43001c00
    a2a0:	43002000 	.word	0x43002000
    a2a4:	200007f0 	.word	0x200007f0
    a2a8:	0000a197 	.word	0x0000a197
    a2ac:	e000e100 	.word	0xe000e100

0000a2b0 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    a2b0:	6942      	ldr	r2, [r0, #20]
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    a2b2:	8813      	ldrh	r3, [r2, #0]
    a2b4:	b29b      	uxth	r3, r3
    a2b6:	f043 0302 	orr.w	r3, r3, #2
    a2ba:	8013      	strh	r3, [r2, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a2bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    a2be:	f013 0f03 	tst.w	r3, #3
    a2c2:	d1fb      	bne.n	a2bc <_adc_async_enable_channel+0xc>
}
    a2c4:	4770      	bx	lr

0000a2c6 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    a2c6:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    a2c8:	88db      	ldrh	r3, [r3, #6]
    a2ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    a2ce:	2b03      	cmp	r3, #3
}
    a2d0:	bf0c      	ite	eq
    a2d2:	2001      	moveq	r0, #1
    a2d4:	2002      	movne	r0, #2
    a2d6:	4770      	bx	lr

0000a2d8 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
    a2d8:	6942      	ldr	r2, [r0, #20]
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    a2da:	7d13      	ldrb	r3, [r2, #20]
    a2dc:	f043 0302 	orr.w	r3, r3, #2
    a2e0:	7513      	strb	r3, [r2, #20]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    a2e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    a2e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a2e8:	2b00      	cmp	r3, #0
    a2ea:	d1fa      	bne.n	a2e2 <_adc_async_convert+0xa>
}
    a2ec:	4770      	bx	lr

0000a2ee <_adc_async_set_irq_state>:
	void *const hw = device->hw;
    a2ee:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
    a2f0:	2a01      	cmp	r2, #1
    a2f2:	d007      	beq.n	a304 <_adc_async_set_irq_state+0x16>
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
    a2f4:	2a02      	cmp	r2, #2
    a2f6:	d00e      	beq.n	a316 <_adc_async_set_irq_state+0x28>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
    a2f8:	b91a      	cbnz	r2, a302 <_adc_async_set_irq_state+0x14>
	if (value == 0x0) {
    a2fa:	b1ab      	cbz	r3, a328 <_adc_async_set_irq_state+0x3a>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
    a2fc:	2301      	movs	r3, #1
    a2fe:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    a302:	4770      	bx	lr
	if (value == 0x0) {
    a304:	b91b      	cbnz	r3, a30e <_adc_async_set_irq_state+0x20>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_WINMON;
    a306:	2304      	movs	r3, #4
    a308:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    a30c:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_WINMON;
    a30e:	2304      	movs	r3, #4
    a310:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    a314:	4770      	bx	lr
	if (value == 0x0) {
    a316:	b91b      	cbnz	r3, a320 <_adc_async_set_irq_state+0x32>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_OVERRUN;
    a318:	2302      	movs	r3, #2
    a31a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    a31e:	4770      	bx	lr
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_OVERRUN;
    a320:	2302      	movs	r3, #2
    a322:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
    a326:	4770      	bx	lr
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
    a328:	2301      	movs	r3, #1
    a32a:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
    a32e:	4770      	bx	lr

0000a330 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    a330:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    a332:	4b02      	ldr	r3, [pc, #8]	; (a33c <ADC0_0_Handler+0xc>)
    a334:	6818      	ldr	r0, [r3, #0]
    a336:	4b02      	ldr	r3, [pc, #8]	; (a340 <ADC0_0_Handler+0x10>)
    a338:	4798      	blx	r3
    a33a:	bd08      	pop	{r3, pc}
    a33c:	200007f0 	.word	0x200007f0
    a340:	0000a145 	.word	0x0000a145

0000a344 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    a344:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    a346:	4b02      	ldr	r3, [pc, #8]	; (a350 <ADC0_1_Handler+0xc>)
    a348:	6818      	ldr	r0, [r3, #0]
    a34a:	4b02      	ldr	r3, [pc, #8]	; (a354 <ADC0_1_Handler+0x10>)
    a34c:	4798      	blx	r3
    a34e:	bd08      	pop	{r3, pc}
    a350:	200007f0 	.word	0x200007f0
    a354:	0000a145 	.word	0x0000a145

0000a358 <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    a358:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    a35a:	4b02      	ldr	r3, [pc, #8]	; (a364 <ADC1_0_Handler+0xc>)
    a35c:	6858      	ldr	r0, [r3, #4]
    a35e:	4b02      	ldr	r3, [pc, #8]	; (a368 <ADC1_0_Handler+0x10>)
    a360:	4798      	blx	r3
    a362:	bd08      	pop	{r3, pc}
    a364:	200007f0 	.word	0x200007f0
    a368:	0000a145 	.word	0x0000a145

0000a36c <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    a36c:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    a36e:	4b02      	ldr	r3, [pc, #8]	; (a378 <ADC1_1_Handler+0xc>)
    a370:	6858      	ldr	r0, [r3, #4]
    a372:	4b02      	ldr	r3, [pc, #8]	; (a37c <ADC1_1_Handler+0x10>)
    a374:	4798      	blx	r3
    a376:	bd08      	pop	{r3, pc}
    a378:	200007f0 	.word	0x200007f0
    a37c:	0000a145 	.word	0x0000a145

0000a380 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a380:	0943      	lsrs	r3, r0, #5
    a382:	f000 001f 	and.w	r0, r0, #31
    a386:	2201      	movs	r2, #1
    a388:	fa02 f000 	lsl.w	r0, r2, r0
    a38c:	3340      	adds	r3, #64	; 0x40
    a38e:	4a02      	ldr	r2, [pc, #8]	; (a398 <_irq_set+0x18>)
    a390:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    a394:	4770      	bx	lr
    a396:	bf00      	nop
    a398:	e000e100 	.word	0xe000e100

0000a39c <_get_cycles_for_us>:
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    a39c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    a3a0:	00c0      	lsls	r0, r0, #3
    a3a2:	4770      	bx	lr

0000a3a4 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    a3a4:	4b01      	ldr	r3, [pc, #4]	; (a3ac <_get_cycles_for_ms+0x8>)
    a3a6:	fb03 f000 	mul.w	r0, r3, r0
    a3aa:	4770      	bx	lr
    a3ac:	0001d4c0 	.word	0x0001d4c0

0000a3b0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    a3b0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    a3b2:	4a0e      	ldr	r2, [pc, #56]	; (a3ec <_init_chip+0x3c>)
    a3b4:	8813      	ldrh	r3, [r2, #0]
    a3b6:	b29b      	uxth	r3, r3
    a3b8:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    a3bc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    a3be:	4b0c      	ldr	r3, [pc, #48]	; (a3f0 <_init_chip+0x40>)
    a3c0:	4798      	blx	r3
	_oscctrl_init_sources();
    a3c2:	4b0c      	ldr	r3, [pc, #48]	; (a3f4 <_init_chip+0x44>)
    a3c4:	4798      	blx	r3
	_mclk_init();
    a3c6:	4b0c      	ldr	r3, [pc, #48]	; (a3f8 <_init_chip+0x48>)
    a3c8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    a3ca:	2004      	movs	r0, #4
    a3cc:	4c0b      	ldr	r4, [pc, #44]	; (a3fc <_init_chip+0x4c>)
    a3ce:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    a3d0:	4b0b      	ldr	r3, [pc, #44]	; (a400 <_init_chip+0x50>)
    a3d2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    a3d4:	f640 70fb 	movw	r0, #4091	; 0xffb
    a3d8:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    a3da:	4a0a      	ldr	r2, [pc, #40]	; (a404 <_init_chip+0x54>)
    a3dc:	6913      	ldr	r3, [r2, #16]
    a3de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a3e2:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    a3e4:	4b08      	ldr	r3, [pc, #32]	; (a408 <_init_chip+0x58>)
    a3e6:	4798      	blx	r3
    a3e8:	bd10      	pop	{r4, pc}
    a3ea:	bf00      	nop
    a3ec:	41004000 	.word	0x41004000
    a3f0:	0000a861 	.word	0x0000a861
    a3f4:	0000a875 	.word	0x0000a875
    a3f8:	0000a7b5 	.word	0x0000a7b5
    a3fc:	0000a73d 	.word	0x0000a73d
    a400:	0000a879 	.word	0x0000a879
    a404:	40000800 	.word	0x40000800
    a408:	0000a481 	.word	0x0000a481

0000a40c <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    a40c:	b508      	push	{r3, lr}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    a40e:	4a1a      	ldr	r2, [pc, #104]	; (a478 <_dmac_handler+0x6c>)
    a410:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    a412:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    a416:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    a41a:	4818      	ldr	r0, [pc, #96]	; (a47c <_dmac_handler+0x70>)
    a41c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    a420:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    a424:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    a428:	f012 0f01 	tst.w	r2, #1
    a42c:	d10a      	bne.n	a444 <_dmac_handler+0x38>
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    a42e:	011a      	lsls	r2, r3, #4
    a430:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a434:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    a438:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    a43c:	f012 0f02 	tst.w	r2, #2
    a440:	d10b      	bne.n	a45a <_dmac_handler+0x4e>
    a442:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    a444:	011a      	lsls	r2, r3, #4
    a446:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a44a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    a44e:	2101      	movs	r1, #1
    a450:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    a454:	6843      	ldr	r3, [r0, #4]
    a456:	4798      	blx	r3
    a458:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    a45a:	011a      	lsls	r2, r3, #4
    a45c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a460:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    a464:	2102      	movs	r1, #2
    a466:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    a46a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a46e:	4a03      	ldr	r2, [pc, #12]	; (a47c <_dmac_handler+0x70>)
    a470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a474:	4798      	blx	r3
	}
}
    a476:	e7e4      	b.n	a442 <_dmac_handler+0x36>
    a478:	4100a000 	.word	0x4100a000
    a47c:	200007f8 	.word	0x200007f8

0000a480 <_dma_init>:
{
    a480:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    a482:	4a32      	ldr	r2, [pc, #200]	; (a54c <_dma_init+0xcc>)
    a484:	8813      	ldrh	r3, [r2, #0]
    a486:	f023 0302 	bic.w	r3, r3, #2
    a48a:	041b      	lsls	r3, r3, #16
    a48c:	0c1b      	lsrs	r3, r3, #16
    a48e:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    a490:	8853      	ldrh	r3, [r2, #2]
    a492:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    a496:	041b      	lsls	r3, r3, #16
    a498:	0c1b      	lsrs	r3, r3, #16
    a49a:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    a49c:	8813      	ldrh	r3, [r2, #0]
    a49e:	b29b      	uxth	r3, r3
    a4a0:	f043 0301 	orr.w	r3, r3, #1
    a4a4:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    a4a6:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    a4a8:	f013 0f01 	tst.w	r3, #1
    a4ac:	d1fb      	bne.n	a4a6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    a4ae:	4b27      	ldr	r3, [pc, #156]	; (a54c <_dma_init+0xcc>)
    a4b0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    a4b4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    a4b6:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    a4b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    a4bc:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    a4c0:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    a4c2:	2100      	movs	r1, #0
    a4c4:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    a4c6:	4a22      	ldr	r2, [pc, #136]	; (a550 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    a4c8:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    a4ca:	4a22      	ldr	r2, [pc, #136]	; (a554 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    a4cc:	639a      	str	r2, [r3, #56]	; 0x38
    a4ce:	4b22      	ldr	r3, [pc, #136]	; (a558 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    a4d0:	4c1f      	ldr	r4, [pc, #124]	; (a550 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    a4d2:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    a4d4:	681d      	ldr	r5, [r3, #0]
    a4d6:	0108      	lsls	r0, r1, #4
    a4d8:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    a4dc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    a4e0:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    a4e2:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    a4e4:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    a4e8:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    a4ea:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    a4ee:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    a4f0:	1822      	adds	r2, r4, r0
    a4f2:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    a4f4:	60d6      	str	r6, [r2, #12]
    a4f6:	3101      	adds	r1, #1
    a4f8:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    a4fa:	2920      	cmp	r1, #32
    a4fc:	d1ea      	bne.n	a4d4 <_dma_init+0x54>
    a4fe:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a500:	2001      	movs	r0, #1
    a502:	4916      	ldr	r1, [pc, #88]	; (a55c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    a504:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    a506:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a50a:	d00b      	beq.n	a524 <_dma_init+0xa4>
    a50c:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    a50e:	2b24      	cmp	r3, #36	; 0x24
    a510:	d1f8      	bne.n	a504 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    a512:	4a0e      	ldr	r2, [pc, #56]	; (a54c <_dma_init+0xcc>)
    a514:	8813      	ldrh	r3, [r2, #0]
    a516:	b29b      	uxth	r3, r3
    a518:	f043 0302 	orr.w	r3, r3, #2
    a51c:	8013      	strh	r3, [r2, #0]
}
    a51e:	2000      	movs	r0, #0
    a520:	bc70      	pop	{r4, r5, r6}
    a522:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a524:	095c      	lsrs	r4, r3, #5
    a526:	f002 021f 	and.w	r2, r2, #31
    a52a:	fa00 f202 	lsl.w	r2, r0, r2
    a52e:	f104 0520 	add.w	r5, r4, #32
    a532:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    a536:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a53a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a53e:	f104 0560 	add.w	r5, r4, #96	; 0x60
    a542:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a546:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    a54a:	e7df      	b.n	a50c <_dma_init+0x8c>
    a54c:	4100a000 	.word	0x4100a000
    a550:	20007910 	.word	0x20007910
    a554:	20007b10 	.word	0x20007b10
    a558:	00011744 	.word	0x00011744
    a55c:	e000e100 	.word	0xe000e100

0000a560 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    a560:	b991      	cbnz	r1, a588 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    a562:	b942      	cbnz	r2, a576 <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    a564:	0100      	lsls	r0, r0, #4
    a566:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    a56a:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    a56e:	2302      	movs	r3, #2
    a570:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    a574:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    a576:	0100      	lsls	r0, r0, #4
    a578:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    a57c:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    a580:	2302      	movs	r3, #2
    a582:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    a586:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    a588:	2901      	cmp	r1, #1
    a58a:	d000      	beq.n	a58e <_dma_set_irq_state+0x2e>
    a58c:	4770      	bx	lr
	if (value == 0x0) {
    a58e:	b142      	cbz	r2, a5a2 <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    a590:	0100      	lsls	r0, r0, #4
    a592:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    a596:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    a59a:	2301      	movs	r3, #1
    a59c:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    a5a0:	e7f4      	b.n	a58c <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    a5a2:	0100      	lsls	r0, r0, #4
    a5a4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    a5a8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    a5ac:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    a5b0:	4770      	bx	lr
	...

0000a5b4 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    a5b4:	4b02      	ldr	r3, [pc, #8]	; (a5c0 <_dma_set_destination_address+0xc>)
    a5b6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    a5ba:	6081      	str	r1, [r0, #8]
}
    a5bc:	2000      	movs	r0, #0
    a5be:	4770      	bx	lr
    a5c0:	20007910 	.word	0x20007910

0000a5c4 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    a5c4:	4b02      	ldr	r3, [pc, #8]	; (a5d0 <_dma_set_source_address+0xc>)
    a5c6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    a5ca:	6041      	str	r1, [r0, #4]
}
    a5cc:	2000      	movs	r0, #0
    a5ce:	4770      	bx	lr
    a5d0:	20007910 	.word	0x20007910

0000a5d4 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    a5d4:	4a05      	ldr	r2, [pc, #20]	; (a5ec <_dma_srcinc_enable+0x18>)
    a5d6:	0100      	lsls	r0, r0, #4
    a5d8:	5a13      	ldrh	r3, [r2, r0]
    a5da:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    a5dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    a5e0:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    a5e4:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    a5e6:	5211      	strh	r1, [r2, r0]
}
    a5e8:	2000      	movs	r0, #0
    a5ea:	4770      	bx	lr
    a5ec:	20007910 	.word	0x20007910

0000a5f0 <_dma_set_data_amount>:
{
    a5f0:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    a5f2:	4c14      	ldr	r4, [pc, #80]	; (a644 <_dma_set_data_amount+0x54>)
    a5f4:	0102      	lsls	r2, r0, #4
    a5f6:	18a3      	adds	r3, r4, r2
    a5f8:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    a5fa:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    a5fc:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    a600:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    a602:	f412 6f00 	tst.w	r2, #2048	; 0x800
    a606:	d006      	beq.n	a616 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    a608:	fa01 f403 	lsl.w	r4, r1, r3
    a60c:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    a60e:	4a0d      	ldr	r2, [pc, #52]	; (a644 <_dma_set_data_amount+0x54>)
    a610:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    a614:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    a616:	4c0b      	ldr	r4, [pc, #44]	; (a644 <_dma_set_data_amount+0x54>)
    a618:	0102      	lsls	r2, r0, #4
    a61a:	18a5      	adds	r5, r4, r2
    a61c:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    a61e:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    a620:	f412 6f80 	tst.w	r2, #1024	; 0x400
    a624:	d005      	beq.n	a632 <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    a626:	fa01 f303 	lsl.w	r3, r1, r3
    a62a:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    a62c:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    a630:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    a632:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    a634:	4b03      	ldr	r3, [pc, #12]	; (a644 <_dma_set_data_amount+0x54>)
    a636:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    a63a:	8041      	strh	r1, [r0, #2]
}
    a63c:	2000      	movs	r0, #0
    a63e:	bc30      	pop	{r4, r5}
    a640:	4770      	bx	lr
    a642:	bf00      	nop
    a644:	20007910 	.word	0x20007910

0000a648 <_dma_enable_transaction>:
{
    a648:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    a64a:	4c0d      	ldr	r4, [pc, #52]	; (a680 <_dma_enable_transaction+0x38>)
    a64c:	0103      	lsls	r3, r0, #4
    a64e:	5ae2      	ldrh	r2, [r4, r3]
    a650:	b292      	uxth	r2, r2
    a652:	f042 0201 	orr.w	r2, r2, #1
    a656:	52e2      	strh	r2, [r4, r3]
    a658:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    a65c:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    a660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    a662:	f042 0202 	orr.w	r2, r2, #2
    a666:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    a668:	b131      	cbz	r1, a678 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    a66a:	4a06      	ldr	r2, [pc, #24]	; (a684 <_dma_enable_transaction+0x3c>)
    a66c:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    a66e:	2301      	movs	r3, #1
    a670:	fa03 f000 	lsl.w	r0, r3, r0
    a674:	4308      	orrs	r0, r1
    a676:	6110      	str	r0, [r2, #16]
}
    a678:	2000      	movs	r0, #0
    a67a:	f85d 4b04 	ldr.w	r4, [sp], #4
    a67e:	4770      	bx	lr
    a680:	20007910 	.word	0x20007910
    a684:	4100a000 	.word	0x4100a000

0000a688 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    a688:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a68c:	4b02      	ldr	r3, [pc, #8]	; (a698 <_dma_get_channel_resource+0x10>)
    a68e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a692:	6001      	str	r1, [r0, #0]
}
    a694:	2000      	movs	r0, #0
    a696:	4770      	bx	lr
    a698:	200007f8 	.word	0x200007f8

0000a69c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    a69c:	b508      	push	{r3, lr}
	_dmac_handler();
    a69e:	4b01      	ldr	r3, [pc, #4]	; (a6a4 <DMAC_0_Handler+0x8>)
    a6a0:	4798      	blx	r3
    a6a2:	bd08      	pop	{r3, pc}
    a6a4:	0000a40d 	.word	0x0000a40d

0000a6a8 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    a6a8:	b508      	push	{r3, lr}
	_dmac_handler();
    a6aa:	4b01      	ldr	r3, [pc, #4]	; (a6b0 <DMAC_1_Handler+0x8>)
    a6ac:	4798      	blx	r3
    a6ae:	bd08      	pop	{r3, pc}
    a6b0:	0000a40d 	.word	0x0000a40d

0000a6b4 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    a6b4:	b508      	push	{r3, lr}
	_dmac_handler();
    a6b6:	4b01      	ldr	r3, [pc, #4]	; (a6bc <DMAC_2_Handler+0x8>)
    a6b8:	4798      	blx	r3
    a6ba:	bd08      	pop	{r3, pc}
    a6bc:	0000a40d 	.word	0x0000a40d

0000a6c0 <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    a6c0:	b508      	push	{r3, lr}
	_dmac_handler();
    a6c2:	4b01      	ldr	r3, [pc, #4]	; (a6c8 <DMAC_3_Handler+0x8>)
    a6c4:	4798      	blx	r3
    a6c6:	bd08      	pop	{r3, pc}
    a6c8:	0000a40d 	.word	0x0000a40d

0000a6cc <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    a6cc:	b508      	push	{r3, lr}
	_dmac_handler();
    a6ce:	4b01      	ldr	r3, [pc, #4]	; (a6d4 <DMAC_4_Handler+0x8>)
    a6d0:	4798      	blx	r3
    a6d2:	bd08      	pop	{r3, pc}
    a6d4:	0000a40d 	.word	0x0000a40d

0000a6d8 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    a6d8:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    a6da:	2000      	movs	r0, #0
    a6dc:	4770      	bx	lr
	...

0000a6e0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    a6e0:	b430      	push	{r4, r5}
    a6e2:	4814      	ldr	r0, [pc, #80]	; (a734 <_event_system_init+0x54>)
    a6e4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    a6e8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    a6ea:	4c13      	ldr	r4, [pc, #76]	; (a738 <_event_system_init+0x58>)
    a6ec:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    a6ee:	f813 1b01 	ldrb.w	r1, [r3], #1
    a6f2:	3248      	adds	r2, #72	; 0x48
    a6f4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    a6f8:	42ab      	cmp	r3, r5
    a6fa:	d1f7      	bne.n	a6ec <_event_system_init+0xc>
    a6fc:	480d      	ldr	r0, [pc, #52]	; (a734 <_event_system_init+0x54>)
    a6fe:	f100 0442 	add.w	r4, r0, #66	; 0x42
    a702:	3080      	adds	r0, #128	; 0x80
    a704:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    a706:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    a70a:	00ca      	lsls	r2, r1, #3
    a70c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    a710:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    a714:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    a716:	f850 3f04 	ldr.w	r3, [r0, #4]!
    a71a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    a71c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    a720:	43db      	mvns	r3, r3
    a722:	b2db      	uxtb	r3, r3
    a724:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    a728:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    a72a:	2920      	cmp	r1, #32
    a72c:	d1eb      	bne.n	a706 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    a72e:	2000      	movs	r0, #0
    a730:	bc30      	pop	{r4, r5}
    a732:	4770      	bx	lr
    a734:	00011844 	.word	0x00011844
    a738:	4100e000 	.word	0x4100e000

0000a73c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    a73c:	f010 0f01 	tst.w	r0, #1
    a740:	d008      	beq.n	a754 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    a742:	4a17      	ldr	r2, [pc, #92]	; (a7a0 <_gclk_init_generators_by_fref+0x64>)
    a744:	4b17      	ldr	r3, [pc, #92]	; (a7a4 <_gclk_init_generators_by_fref+0x68>)
    a746:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    a748:	4619      	mov	r1, r3
    a74a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    a74e:	684b      	ldr	r3, [r1, #4]
    a750:	4213      	tst	r3, r2
    a752:	d1fc      	bne.n	a74e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    a754:	f010 0f02 	tst.w	r0, #2
    a758:	d008      	beq.n	a76c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    a75a:	4a13      	ldr	r2, [pc, #76]	; (a7a8 <_gclk_init_generators_by_fref+0x6c>)
    a75c:	4b11      	ldr	r3, [pc, #68]	; (a7a4 <_gclk_init_generators_by_fref+0x68>)
    a75e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    a760:	4619      	mov	r1, r3
    a762:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    a766:	684b      	ldr	r3, [r1, #4]
    a768:	4213      	tst	r3, r2
    a76a:	d1fc      	bne.n	a766 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    a76c:	f010 0f04 	tst.w	r0, #4
    a770:	d008      	beq.n	a784 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    a772:	4a0e      	ldr	r2, [pc, #56]	; (a7ac <_gclk_init_generators_by_fref+0x70>)
    a774:	4b0b      	ldr	r3, [pc, #44]	; (a7a4 <_gclk_init_generators_by_fref+0x68>)
    a776:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    a778:	4619      	mov	r1, r3
    a77a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    a77e:	684b      	ldr	r3, [r1, #4]
    a780:	4213      	tst	r3, r2
    a782:	d1fc      	bne.n	a77e <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    a784:	f010 0f08 	tst.w	r0, #8
    a788:	d008      	beq.n	a79c <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    a78a:	4a09      	ldr	r2, [pc, #36]	; (a7b0 <_gclk_init_generators_by_fref+0x74>)
    a78c:	4b05      	ldr	r3, [pc, #20]	; (a7a4 <_gclk_init_generators_by_fref+0x68>)
    a78e:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    a790:	4619      	mov	r1, r3
    a792:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    a796:	684b      	ldr	r3, [r1, #4]
    a798:	4213      	tst	r3, r2
    a79a:	d1fc      	bne.n	a796 <_gclk_init_generators_by_fref+0x5a>
    a79c:	4770      	bx	lr
    a79e:	bf00      	nop
    a7a0:	00010108 	.word	0x00010108
    a7a4:	40001c00 	.word	0x40001c00
    a7a8:	00010106 	.word	0x00010106
    a7ac:	00100106 	.word	0x00100106
    a7b0:	00010104 	.word	0x00010104

0000a7b4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    a7b4:	2201      	movs	r2, #1
    a7b6:	4b01      	ldr	r3, [pc, #4]	; (a7bc <_mclk_init+0x8>)
    a7b8:	715a      	strb	r2, [r3, #5]
    a7ba:	4770      	bx	lr
    a7bc:	40000800 	.word	0x40000800

0000a7c0 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    a7c0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    a7c2:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    a7c4:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    a7c6:	f012 0f01 	tst.w	r2, #1
    a7ca:	d005      	beq.n	a7d8 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    a7cc:	2201      	movs	r2, #1
    a7ce:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    a7d0:	6803      	ldr	r3, [r0, #0]
    a7d2:	b153      	cbz	r3, a7ea <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    a7d4:	4798      	blx	r3
    a7d6:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    a7d8:	8a1a      	ldrh	r2, [r3, #16]
    a7da:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    a7dc:	b12a      	cbz	r2, a7ea <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    a7de:	f240 225e 	movw	r2, #606	; 0x25e
    a7e2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    a7e4:	6843      	ldr	r3, [r0, #4]
    a7e6:	b103      	cbz	r3, a7ea <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    a7e8:	4798      	blx	r3
    a7ea:	bd08      	pop	{r3, pc}

0000a7ec <_flash_init>:
	device->hw = hw;
    a7ec:	6101      	str	r1, [r0, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    a7ee:	880b      	ldrh	r3, [r1, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    a7f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    a7f4:	049b      	lsls	r3, r3, #18
    a7f6:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    a7f8:	800b      	strh	r3, [r1, #0]
	_nvm_dev = device;
    a7fa:	4b0d      	ldr	r3, [pc, #52]	; (a830 <_flash_init+0x44>)
    a7fc:	6018      	str	r0, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a7fe:	4b0d      	ldr	r3, [pc, #52]	; (a834 <_flash_init+0x48>)
    a800:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    a804:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    a808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a80c:	f3bf 8f6f 	isb	sy
    a810:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    a818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    a81c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a820:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    a824:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a828:	6019      	str	r1, [r3, #0]
    a82a:	601a      	str	r2, [r3, #0]
}
    a82c:	2000      	movs	r0, #0
    a82e:	4770      	bx	lr
    a830:	20000978 	.word	0x20000978
    a834:	e000e100 	.word	0xe000e100

0000a838 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    a838:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    a83a:	4b02      	ldr	r3, [pc, #8]	; (a844 <NVMCTRL_0_Handler+0xc>)
    a83c:	6818      	ldr	r0, [r3, #0]
    a83e:	4b02      	ldr	r3, [pc, #8]	; (a848 <NVMCTRL_0_Handler+0x10>)
    a840:	4798      	blx	r3
    a842:	bd08      	pop	{r3, pc}
    a844:	20000978 	.word	0x20000978
    a848:	0000a7c1 	.word	0x0000a7c1

0000a84c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    a84c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    a84e:	4b02      	ldr	r3, [pc, #8]	; (a858 <NVMCTRL_1_Handler+0xc>)
    a850:	6818      	ldr	r0, [r3, #0]
    a852:	4b02      	ldr	r3, [pc, #8]	; (a85c <NVMCTRL_1_Handler+0x10>)
    a854:	4798      	blx	r3
    a856:	bd08      	pop	{r3, pc}
    a858:	20000978 	.word	0x20000978
    a85c:	0000a7c1 	.word	0x0000a7c1

0000a860 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    a860:	4b03      	ldr	r3, [pc, #12]	; (a870 <_osc32kctrl_init_sources+0x10>)
    a862:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    a864:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    a868:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    a86a:	2201      	movs	r2, #1
    a86c:	741a      	strb	r2, [r3, #16]
    a86e:	4770      	bx	lr
    a870:	40001400 	.word	0x40001400

0000a874 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    a874:	4770      	bx	lr
	...

0000a878 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    a878:	4a47      	ldr	r2, [pc, #284]	; (a998 <_oscctrl_init_referenced_generators+0x120>)
    a87a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    a87c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    a880:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    a884:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    a886:	4611      	mov	r1, r2
    a888:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    a88c:	684b      	ldr	r3, [r1, #4]
    a88e:	4213      	tst	r3, r2
    a890:	d1fc      	bne.n	a88c <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    a892:	4a41      	ldr	r2, [pc, #260]	; (a998 <_oscctrl_init_referenced_generators+0x120>)
    a894:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    a896:	f013 0f04 	tst.w	r3, #4
    a89a:	d1fb      	bne.n	a894 <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    a89c:	4b3f      	ldr	r3, [pc, #252]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a89e:	2200      	movs	r2, #0
    a8a0:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    a8a2:	4a3f      	ldr	r2, [pc, #252]	; (a9a0 <_oscctrl_init_referenced_generators+0x128>)
    a8a4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    a8a6:	461a      	mov	r2, r3
    a8a8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    a8ac:	f013 0f10 	tst.w	r3, #16
    a8b0:	d1fa      	bne.n	a8a8 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    a8b2:	2200      	movs	r2, #0
    a8b4:	4b39      	ldr	r3, [pc, #228]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a8b6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    a8ba:	461a      	mov	r2, r3
    a8bc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    a8c0:	f013 0f04 	tst.w	r3, #4
    a8c4:	d1fa      	bne.n	a8bc <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    a8c6:	2202      	movs	r2, #2
    a8c8:	4b34      	ldr	r3, [pc, #208]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a8ca:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    a8cc:	461a      	mov	r2, r3
    a8ce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    a8d2:	f013 0f02 	tst.w	r3, #2
    a8d6:	d1fa      	bne.n	a8ce <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    a8d8:	4b30      	ldr	r3, [pc, #192]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a8da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    a8dc:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    a8de:	461a      	mov	r2, r3
    a8e0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    a8e4:	f013 0f08 	tst.w	r3, #8
    a8e8:	d1fa      	bne.n	a8e0 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    a8ea:	2288      	movs	r2, #136	; 0x88
    a8ec:	4b2b      	ldr	r3, [pc, #172]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a8ee:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    a8f2:	461a      	mov	r2, r3
    a8f4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    a8f8:	f013 0f04 	tst.w	r3, #4
    a8fc:	d1fa      	bne.n	a8f4 <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    a8fe:	2242      	movs	r2, #66	; 0x42
    a900:	4b25      	ldr	r3, [pc, #148]	; (a998 <_oscctrl_init_referenced_generators+0x120>)
    a902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    a906:	2227      	movs	r2, #39	; 0x27
    a908:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    a90c:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    a90e:	461a      	mov	r2, r3
    a910:	6d13      	ldr	r3, [r2, #80]	; 0x50
    a912:	f013 0f06 	tst.w	r3, #6
    a916:	d1fb      	bne.n	a910 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    a918:	4b20      	ldr	r3, [pc, #128]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a91a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a91e:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    a920:	2202      	movs	r2, #2
    a922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    a926:	461a      	mov	r2, r3
    a928:	6d13      	ldr	r3, [r2, #80]	; 0x50
    a92a:	f013 0f02 	tst.w	r3, #2
    a92e:	d1fb      	bne.n	a928 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    a930:	4b1a      	ldr	r3, [pc, #104]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a932:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    a936:	f013 0f01 	tst.w	r3, #1
    a93a:	d026      	beq.n	a98a <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    a93c:	4a17      	ldr	r2, [pc, #92]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a93e:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    a940:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    a944:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a948:	d1f9      	bne.n	a93e <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    a94a:	4b14      	ldr	r3, [pc, #80]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a94c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    a94e:	f012 0f01 	tst.w	r2, #1
    a952:	d103      	bne.n	a95c <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    a954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    a956:	f012 0f02 	tst.w	r2, #2
    a95a:	d0f7      	beq.n	a94c <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    a95c:	4a0e      	ldr	r2, [pc, #56]	; (a998 <_oscctrl_init_referenced_generators+0x120>)
    a95e:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    a960:	2b00      	cmp	r3, #0
    a962:	d1fc      	bne.n	a95e <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    a964:	4a0c      	ldr	r2, [pc, #48]	; (a998 <_oscctrl_init_referenced_generators+0x120>)
    a966:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    a968:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    a96c:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    a970:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    a972:	4611      	mov	r1, r2
    a974:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    a978:	684b      	ldr	r3, [r1, #4]
    a97a:	4213      	tst	r3, r2
    a97c:	d1fc      	bne.n	a978 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    a97e:	4a06      	ldr	r2, [pc, #24]	; (a998 <_oscctrl_init_referenced_generators+0x120>)
    a980:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    a982:	f013 0f04 	tst.w	r3, #4
    a986:	d1fb      	bne.n	a980 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    a988:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    a98a:	4a04      	ldr	r2, [pc, #16]	; (a99c <_oscctrl_init_referenced_generators+0x124>)
    a98c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    a98e:	f413 7f80 	tst.w	r3, #256	; 0x100
    a992:	d0fb      	beq.n	a98c <_oscctrl_init_referenced_generators+0x114>
    a994:	e7d9      	b.n	a94a <_oscctrl_init_referenced_generators+0xd2>
    a996:	bf00      	nop
    a998:	40001c00 	.word	0x40001c00
    a99c:	40001000 	.word	0x40001000
    a9a0:	04010000 	.word	0x04010000

0000a9a4 <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    a9a4:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    a9a6:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    a9a8:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    a9aa:	4903      	ldr	r1, [pc, #12]	; (a9b8 <_qspi_dma_rx_complete+0x14>)
    a9ac:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    a9ae:	685b      	ldr	r3, [r3, #4]
    a9b0:	b103      	cbz	r3, a9b4 <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    a9b2:	4798      	blx	r3
    a9b4:	bd08      	pop	{r3, pc}
    a9b6:	bf00      	nop
    a9b8:	01000002 	.word	0x01000002

0000a9bc <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    a9bc:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    a9be:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    a9c0:	681a      	ldr	r2, [r3, #0]
    a9c2:	4903      	ldr	r1, [pc, #12]	; (a9d0 <_qspi_dma_tx_complete+0x14>)
    a9c4:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    a9c6:	685b      	ldr	r3, [r3, #4]
    a9c8:	b103      	cbz	r3, a9cc <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    a9ca:	4798      	blx	r3
    a9cc:	bd08      	pop	{r3, pc}
    a9ce:	bf00      	nop
    a9d0:	01000002 	.word	0x01000002

0000a9d4 <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    a9d4:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    a9d6:	6883      	ldr	r3, [r0, #8]
    a9d8:	689b      	ldr	r3, [r3, #8]
    a9da:	b103      	cbz	r3, a9de <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    a9dc:	4798      	blx	r3
    a9de:	bd08      	pop	{r3, pc}

0000a9e0 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    a9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9e2:	4604      	mov	r4, r0
	ASSERT(dev && hw);
	dev->prvt = hw;
    a9e4:	4605      	mov	r5, r0
    a9e6:	f845 1b0c 	str.w	r1, [r5], #12
    a9ea:	2301      	movs	r3, #1
    a9ec:	600b      	str	r3, [r1, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    a9ee:	4b0e      	ldr	r3, [pc, #56]	; (aa28 <_qspi_dma_init+0x48>)
    a9f0:	604b      	str	r3, [r1, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    a9f2:	4b0e      	ldr	r3, [pc, #56]	; (aa2c <_qspi_dma_init+0x4c>)
    a9f4:	608b      	str	r3, [r1, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    a9f6:	211f      	movs	r1, #31
    a9f8:	4628      	mov	r0, r5
    a9fa:	4f0d      	ldr	r7, [pc, #52]	; (aa30 <_qspi_dma_init+0x50>)
    a9fc:	47b8      	blx	r7
	dev->resource->back                 = dev;
    a9fe:	68e3      	ldr	r3, [r4, #12]
    aa00:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    aa02:	68e3      	ldr	r3, [r4, #12]
    aa04:	4a0b      	ldr	r2, [pc, #44]	; (aa34 <_qspi_dma_init+0x54>)
    aa06:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    aa08:	68e3      	ldr	r3, [r4, #12]
    aa0a:	4e0b      	ldr	r6, [pc, #44]	; (aa38 <_qspi_dma_init+0x58>)
    aa0c:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    aa0e:	211e      	movs	r1, #30
    aa10:	4628      	mov	r0, r5
    aa12:	47b8      	blx	r7
	dev->resource->back                 = dev;
    aa14:	68e3      	ldr	r3, [r4, #12]
    aa16:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    aa18:	68e3      	ldr	r3, [r4, #12]
    aa1a:	4a08      	ldr	r2, [pc, #32]	; (aa3c <_qspi_dma_init+0x5c>)
    aa1c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    aa1e:	68e3      	ldr	r3, [r4, #12]
    aa20:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
}
    aa22:	2000      	movs	r0, #0
    aa24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa26:	bf00      	nop
    aa28:	06000011 	.word	0x06000011
    aa2c:	00243b00 	.word	0x00243b00
    aa30:	0000a689 	.word	0x0000a689
    aa34:	0000a9a5 	.word	0x0000a9a5
    aa38:	0000a9d5 	.word	0x0000a9d5
    aa3c:	0000a9bd 	.word	0x0000a9bd

0000aa40 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    aa40:	b500      	push	{lr}
    aa42:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    aa44:	4b0d      	ldr	r3, [pc, #52]	; (aa7c <RAMECC_Handler+0x3c>)
    aa46:	789b      	ldrb	r3, [r3, #2]
    aa48:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    aa4a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    aa4c:	9b01      	ldr	r3, [sp, #4]
    aa4e:	f013 0f02 	tst.w	r3, #2
    aa52:	d006      	beq.n	aa62 <RAMECC_Handler+0x22>
    aa54:	4b0a      	ldr	r3, [pc, #40]	; (aa80 <RAMECC_Handler+0x40>)
    aa56:	681b      	ldr	r3, [r3, #0]
    aa58:	b11b      	cbz	r3, aa62 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    aa5a:	4a08      	ldr	r2, [pc, #32]	; (aa7c <RAMECC_Handler+0x3c>)
    aa5c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    aa5e:	4798      	blx	r3
    aa60:	e009      	b.n	aa76 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    aa62:	9b01      	ldr	r3, [sp, #4]
    aa64:	f013 0f01 	tst.w	r3, #1
    aa68:	d005      	beq.n	aa76 <RAMECC_Handler+0x36>
    aa6a:	4b05      	ldr	r3, [pc, #20]	; (aa80 <RAMECC_Handler+0x40>)
    aa6c:	685b      	ldr	r3, [r3, #4]
    aa6e:	b113      	cbz	r3, aa76 <RAMECC_Handler+0x36>
    aa70:	4a02      	ldr	r2, [pc, #8]	; (aa7c <RAMECC_Handler+0x3c>)
    aa72:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    aa74:	4798      	blx	r3
	} else {
		return;
	}
}
    aa76:	b003      	add	sp, #12
    aa78:	f85d fb04 	ldr.w	pc, [sp], #4
    aa7c:	41020000 	.word	0x41020000
    aa80:	20007d10 	.word	0x20007d10

0000aa84 <_rtc_timer_init>:
 */
int32_t _rtc_timer_init(struct _timer_device *const dev, void *const hw)
{
	ASSERT(dev);

	dev->hw = hw;
    aa84:	60c1      	str	r1, [r0, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    aa86:	2301      	movs	r3, #1
    aa88:	800b      	strh	r3, [r1, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    aa8a:	f248 0203 	movw	r2, #32771	; 0x8003
    aa8e:	690b      	ldr	r3, [r1, #16]
    aa90:	4213      	tst	r3, r2
    aa92:	d1fc      	bne.n	aa8e <_rtc_timer_init+0xa>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    aa94:	68c3      	ldr	r3, [r0, #12]
    aa96:	691a      	ldr	r2, [r3, #16]
    aa98:	f012 0f01 	tst.w	r2, #1
    aa9c:	d1fb      	bne.n	aa96 <_rtc_timer_init+0x12>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    aa9e:	f248 0280 	movw	r2, #32896	; 0x8080
    aaa2:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    aaa4:	f248 0103 	movw	r1, #32771	; 0x8003
    aaa8:	691a      	ldr	r2, [r3, #16]
    aaaa:	420a      	tst	r2, r1
    aaac:	d1fc      	bne.n	aaa8 <_rtc_timer_init+0x24>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    aaae:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    aab0:	2301      	movs	r3, #1
    aab2:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    aab4:	6913      	ldr	r3, [r2, #16]
    aab6:	f013 0f60 	tst.w	r3, #96	; 0x60
    aaba:	d1fb      	bne.n	aab4 <_rtc_timer_init+0x30>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    aabc:	68c3      	ldr	r3, [r0, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    aabe:	f44f 7280 	mov.w	r2, #256	; 0x100
    aac2:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    aac4:	4b01      	ldr	r3, [pc, #4]	; (aacc <_rtc_timer_init+0x48>)
    aac6:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
    aac8:	2000      	movs	r0, #0
    aaca:	4770      	bx	lr
    aacc:	2000097c 	.word	0x2000097c

0000aad0 <_rtc_timer_deinit>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    aad4:	4b07      	ldr	r3, [pc, #28]	; (aaf4 <_rtc_timer_deinit+0x24>)
    aad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    aada:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aade:	f3bf 8f6f 	isb	sy
{
	ASSERT(dev && dev->hw);

	NVIC_DisableIRQ(RTC_IRQn);

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    aae2:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    aae4:	2301      	movs	r3, #1
    aae6:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    aae8:	f248 0103 	movw	r1, #32771	; 0x8003
    aaec:	6913      	ldr	r3, [r2, #16]
    aaee:	420b      	tst	r3, r1
    aaf0:	d1fc      	bne.n	aaec <_rtc_timer_deinit+0x1c>
}
    aaf2:	4770      	bx	lr
    aaf4:	e000e100 	.word	0xe000e100

0000aaf8 <_rtc_timer_start>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aaf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    aafc:	4b0c      	ldr	r3, [pc, #48]	; (ab30 <_rtc_timer_start+0x38>)
    aafe:	601a      	str	r2, [r3, #0]
void _rtc_timer_start(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    ab00:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    ab02:	2300      	movs	r3, #0
    ab04:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    ab06:	6913      	ldr	r3, [r2, #16]
    ab08:	f013 0f08 	tst.w	r3, #8
    ab0c:	d1fb      	bne.n	ab06 <_rtc_timer_start+0xe>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    ab0e:	68c3      	ldr	r3, [r0, #12]
    ab10:	691a      	ldr	r2, [r3, #16]
    ab12:	f012 0f08 	tst.w	r2, #8
    ab16:	d1fb      	bne.n	ab10 <_rtc_timer_start+0x18>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    ab18:	881a      	ldrh	r2, [r3, #0]
    ab1a:	b292      	uxth	r2, r2
    ab1c:	f042 0202 	orr.w	r2, r2, #2
    ab20:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    ab22:	f248 0103 	movw	r1, #32771	; 0x8003
    ab26:	691a      	ldr	r2, [r3, #16]
    ab28:	420a      	tst	r2, r1
    ab2a:	d1fc      	bne.n	ab26 <_rtc_timer_start+0x2e>
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
}
    ab2c:	4770      	bx	lr
    ab2e:	bf00      	nop
    ab30:	e000e100 	.word	0xe000e100

0000ab34 <_rtc_timer_stop>:
 */
void _rtc_timer_stop(struct _timer_device *const dev)
{
	ASSERT(dev && dev->hw);

	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    ab34:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    ab36:	8813      	ldrh	r3, [r2, #0]
    ab38:	f023 0302 	bic.w	r3, r3, #2
    ab3c:	041b      	lsls	r3, r3, #16
    ab3e:	0c1b      	lsrs	r3, r3, #16
    ab40:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    ab42:	f248 0103 	movw	r1, #32771	; 0x8003
    ab46:	6913      	ldr	r3, [r2, #16]
    ab48:	420b      	tst	r3, r1
    ab4a:	d1fc      	bne.n	ab46 <_rtc_timer_stop+0x12>
}
    ab4c:	4770      	bx	lr

0000ab4e <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    ab4e:	68c2      	ldr	r2, [r0, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    ab50:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    ab52:	6913      	ldr	r3, [r2, #16]
    ab54:	f013 0f60 	tst.w	r3, #96	; 0x60
    ab58:	d1fb      	bne.n	ab52 <_rtc_timer_set_period+0x4>
}
    ab5a:	4770      	bx	lr

0000ab5c <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    ab5c:	68c2      	ldr	r2, [r0, #12]
    ab5e:	6913      	ldr	r3, [r2, #16]
    ab60:	f013 0f60 	tst.w	r3, #96	; 0x60
    ab64:	d1fb      	bne.n	ab5e <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    ab66:	6a10      	ldr	r0, [r2, #32]
}
    ab68:	4770      	bx	lr

0000ab6a <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    ab6a:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    ab6c:	f248 0103 	movw	r1, #32771	; 0x8003
    ab70:	6913      	ldr	r3, [r2, #16]
    ab72:	420b      	tst	r3, r1
    ab74:	d1fc      	bne.n	ab70 <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    ab76:	8810      	ldrh	r0, [r2, #0]
}
    ab78:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ab7c:	4770      	bx	lr

0000ab7e <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    ab7e:	4770      	bx	lr

0000ab80 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    ab80:	4800      	ldr	r0, [pc, #0]	; (ab84 <_rtc_get_timer+0x4>)
    ab82:	4770      	bx	lr
    ab84:	20000358 	.word	0x20000358

0000ab88 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    ab88:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    ab8a:	4b08      	ldr	r3, [pc, #32]	; (abac <RTC_Handler+0x24>)
    ab8c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    ab8e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    ab90:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    ab92:	f413 7f80 	tst.w	r3, #256	; 0x100
    ab96:	d007      	beq.n	aba8 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    ab98:	6823      	ldr	r3, [r4, #0]
    ab9a:	b10b      	cbz	r3, aba0 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    ab9c:	4620      	mov	r0, r4
    ab9e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    aba0:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    aba2:	f44f 7280 	mov.w	r2, #256	; 0x100
    aba6:	819a      	strh	r2, [r3, #12]
    aba8:	bd10      	pop	{r4, pc}
    abaa:	bf00      	nop
    abac:	2000097c 	.word	0x2000097c

0000abb0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    abb0:	b470      	push	{r4, r5, r6}
    abb2:	b089      	sub	sp, #36	; 0x24
    abb4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    abb6:	466c      	mov	r4, sp
    abb8:	4d0d      	ldr	r5, [pc, #52]	; (abf0 <_sercom_get_hardware_index+0x40>)
    abba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    abbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    abbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    abc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    abc6:	9b00      	ldr	r3, [sp, #0]
    abc8:	42b3      	cmp	r3, r6
    abca:	d00d      	beq.n	abe8 <_sercom_get_hardware_index+0x38>
    abcc:	4631      	mov	r1, r6
    abce:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    abd0:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    abd2:	f853 2b04 	ldr.w	r2, [r3], #4
    abd6:	428a      	cmp	r2, r1
    abd8:	d007      	beq.n	abea <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    abda:	3001      	adds	r0, #1
    abdc:	2808      	cmp	r0, #8
    abde:	d1f8      	bne.n	abd2 <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    abe0:	2000      	movs	r0, #0
}
    abe2:	b009      	add	sp, #36	; 0x24
    abe4:	bc70      	pop	{r4, r5, r6}
    abe6:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    abe8:	2000      	movs	r0, #0
			return i;
    abea:	b2c0      	uxtb	r0, r0
    abec:	e7f9      	b.n	abe2 <_sercom_get_hardware_index+0x32>
    abee:	bf00      	nop
    abf0:	00011948 	.word	0x00011948

0000abf4 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    abf4:	b510      	push	{r4, lr}
	void *hw = device->hw;
    abf6:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    abf8:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    abfa:	f013 0f01 	tst.w	r3, #1
    abfe:	d003      	beq.n	ac08 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    ac00:	7da3      	ldrb	r3, [r4, #22]
    ac02:	f013 0f01 	tst.w	r3, #1
    ac06:	d112      	bne.n	ac2e <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    ac08:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    ac0a:	f013 0f02 	tst.w	r3, #2
    ac0e:	d003      	beq.n	ac18 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    ac10:	7da3      	ldrb	r3, [r4, #22]
    ac12:	f013 0f02 	tst.w	r3, #2
    ac16:	d10f      	bne.n	ac38 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    ac18:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    ac1a:	f013 0f04 	tst.w	r3, #4
    ac1e:	d015      	beq.n	ac4c <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    ac20:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    ac22:	f003 0337 	and.w	r3, r3, #55	; 0x37
    ac26:	b163      	cbz	r3, ac42 <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    ac28:	23ff      	movs	r3, #255	; 0xff
    ac2a:	8363      	strh	r3, [r4, #26]
    ac2c:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    ac2e:	2301      	movs	r3, #1
    ac30:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    ac32:	6803      	ldr	r3, [r0, #0]
    ac34:	4798      	blx	r3
    ac36:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    ac38:	2302      	movs	r3, #2
    ac3a:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    ac3c:	6883      	ldr	r3, [r0, #8]
    ac3e:	4798      	blx	r3
    ac40:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    ac42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    ac44:	6843      	ldr	r3, [r0, #4]
    ac46:	b2c9      	uxtb	r1, r1
    ac48:	4798      	blx	r3
    ac4a:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    ac4c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    ac4e:	09db      	lsrs	r3, r3, #7
    ac50:	d100      	bne.n	ac54 <_sercom_usart_interrupt_handler+0x60>
    ac52:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    ac54:	2380      	movs	r3, #128	; 0x80
    ac56:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    ac58:	68c3      	ldr	r3, [r0, #12]
    ac5a:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    ac5c:	8b63      	ldrh	r3, [r4, #26]
    ac5e:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    ac60:	8363      	strh	r3, [r4, #26]
    ac62:	e7f6      	b.n	ac52 <_sercom_usart_interrupt_handler+0x5e>

0000ac64 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    ac64:	4b11      	ldr	r3, [pc, #68]	; (acac <_sercom_init_irq_param+0x48>)
    ac66:	4298      	cmp	r0, r3
    ac68:	d011      	beq.n	ac8e <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    ac6a:	4b11      	ldr	r3, [pc, #68]	; (acb0 <_sercom_init_irq_param+0x4c>)
    ac6c:	4298      	cmp	r0, r3
    ac6e:	d011      	beq.n	ac94 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    ac70:	4b10      	ldr	r3, [pc, #64]	; (acb4 <_sercom_init_irq_param+0x50>)
    ac72:	4298      	cmp	r0, r3
    ac74:	d011      	beq.n	ac9a <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    ac76:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    ac7a:	d011      	beq.n	aca0 <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    ac7c:	4b0e      	ldr	r3, [pc, #56]	; (acb8 <_sercom_init_irq_param+0x54>)
    ac7e:	4298      	cmp	r0, r3
    ac80:	d011      	beq.n	aca6 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    ac82:	4b0e      	ldr	r3, [pc, #56]	; (acbc <_sercom_init_irq_param+0x58>)
    ac84:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    ac86:	bf04      	itt	eq
    ac88:	4b0d      	ldreq	r3, [pc, #52]	; (acc0 <_sercom_init_irq_param+0x5c>)
    ac8a:	6159      	streq	r1, [r3, #20]
    ac8c:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    ac8e:	4b0c      	ldr	r3, [pc, #48]	; (acc0 <_sercom_init_irq_param+0x5c>)
    ac90:	6019      	str	r1, [r3, #0]
    ac92:	e7f0      	b.n	ac76 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    ac94:	4b0a      	ldr	r3, [pc, #40]	; (acc0 <_sercom_init_irq_param+0x5c>)
    ac96:	6059      	str	r1, [r3, #4]
    ac98:	e7f0      	b.n	ac7c <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    ac9a:	4b09      	ldr	r3, [pc, #36]	; (acc0 <_sercom_init_irq_param+0x5c>)
    ac9c:	6099      	str	r1, [r3, #8]
    ac9e:	e7f0      	b.n	ac82 <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    aca0:	4b07      	ldr	r3, [pc, #28]	; (acc0 <_sercom_init_irq_param+0x5c>)
    aca2:	60d9      	str	r1, [r3, #12]
    aca4:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    aca6:	4b06      	ldr	r3, [pc, #24]	; (acc0 <_sercom_init_irq_param+0x5c>)
    aca8:	6119      	str	r1, [r3, #16]
    acaa:	4770      	bx	lr
    acac:	40003000 	.word	0x40003000
    acb0:	40003400 	.word	0x40003400
    acb4:	41014000 	.word	0x41014000
    acb8:	43000400 	.word	0x43000400
    acbc:	43000800 	.word	0x43000800
    acc0:	20000980 	.word	0x20000980

0000acc4 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    acc4:	b510      	push	{r4, lr}
    acc6:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    acc8:	4b44      	ldr	r3, [pc, #272]	; (addc <_usart_init+0x118>)
    acca:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    accc:	2800      	cmp	r0, #0
    acce:	d063      	beq.n	ad98 <_usart_init+0xd4>
    acd0:	2801      	cmp	r0, #1
    acd2:	d05b      	beq.n	ad8c <_usart_init+0xc8>
    acd4:	2802      	cmp	r0, #2
    acd6:	d05b      	beq.n	ad90 <_usart_init+0xcc>
    acd8:	2804      	cmp	r0, #4
    acda:	d05b      	beq.n	ad94 <_usart_init+0xd0>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    acdc:	2806      	cmp	r0, #6
    acde:	bf14      	ite	ne
    ace0:	2100      	movne	r1, #0
    ace2:	2104      	moveq	r1, #4
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    ace4:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    ace6:	f013 0f01 	tst.w	r3, #1
    acea:	d122      	bne.n	ad32 <_usart_init+0x6e>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    acec:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    acf0:	4a3b      	ldr	r2, [pc, #236]	; (ade0 <_usart_init+0x11c>)
    acf2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    acf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    acf8:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    acfc:	69e3      	ldr	r3, [r4, #28]
    acfe:	f013 0f03 	tst.w	r3, #3
    ad02:	d1fb      	bne.n	acfc <_usart_init+0x38>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    ad04:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    ad06:	f013 0f02 	tst.w	r3, #2
    ad0a:	d00b      	beq.n	ad24 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    ad0c:	6823      	ldr	r3, [r4, #0]
    ad0e:	f023 0302 	bic.w	r3, r3, #2
    ad12:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    ad14:	69e3      	ldr	r3, [r4, #28]
    ad16:	f013 0f03 	tst.w	r3, #3
    ad1a:	d1fb      	bne.n	ad14 <_usart_init+0x50>
    ad1c:	69e3      	ldr	r3, [r4, #28]
    ad1e:	f013 0f02 	tst.w	r3, #2
    ad22:	d1fb      	bne.n	ad1c <_usart_init+0x58>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    ad24:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    ad28:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    ad2a:	69e3      	ldr	r3, [r4, #28]
    ad2c:	f013 0f03 	tst.w	r3, #3
    ad30:	d1fb      	bne.n	ad2a <_usart_init+0x66>
    ad32:	69e3      	ldr	r3, [r4, #28]
    ad34:	f013 0f01 	tst.w	r3, #1
    ad38:	d1fb      	bne.n	ad32 <_usart_init+0x6e>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    ad3a:	460a      	mov	r2, r1
    ad3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ad40:	4b27      	ldr	r3, [pc, #156]	; (ade0 <_usart_init+0x11c>)
    ad42:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    ad46:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    ad48:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    ad4a:	69e3      	ldr	r3, [r4, #28]
    ad4c:	f013 0f03 	tst.w	r3, #3
    ad50:	d1fb      	bne.n	ad4a <_usart_init+0x86>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    ad52:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    ad56:	4922      	ldr	r1, [pc, #136]	; (ade0 <_usart_init+0x11c>)
    ad58:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    ad5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    ad5e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    ad60:	69e3      	ldr	r3, [r4, #28]
    ad62:	f013 0f1f 	tst.w	r3, #31
    ad66:	d1fb      	bne.n	ad60 <_usart_init+0x9c>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    ad68:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    ad6c:	491c      	ldr	r1, [pc, #112]	; (ade0 <_usart_init+0x11c>)
    ad6e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    ad72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    ad74:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    ad76:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    ad7a:	d10f      	bne.n	ad9c <_usart_init+0xd8>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    ad7c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    ad80:	4917      	ldr	r1, [pc, #92]	; (ade0 <_usart_init+0x11c>)
    ad82:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    ad86:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    ad88:	81a3      	strh	r3, [r4, #12]
    ad8a:	e016      	b.n	adba <_usart_init+0xf6>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    ad8c:	2101      	movs	r1, #1
    ad8e:	e7a9      	b.n	ace4 <_usart_init+0x20>
    ad90:	2102      	movs	r1, #2
    ad92:	e7a7      	b.n	ace4 <_usart_init+0x20>
    ad94:	2103      	movs	r1, #3
    ad96:	e7a5      	b.n	ace4 <_usart_init+0x20>
    ad98:	2100      	movs	r1, #0
    ad9a:	e7a3      	b.n	ace4 <_usart_init+0x20>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    ad9c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    ada0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    ada4:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    ada6:	89a1      	ldrh	r1, [r4, #12]
    ada8:	f360 010c 	bfi	r1, r0, #0, #13
    adac:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    adae:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    adb2:	89a3      	ldrh	r3, [r4, #12]
    adb4:	f361 334f 	bfi	r3, r1, #13, #3
    adb8:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    adba:	4b09      	ldr	r3, [pc, #36]	; (ade0 <_usart_init+0x11c>)
    adbc:	0051      	lsls	r1, r2, #1
    adbe:	1888      	adds	r0, r1, r2
    adc0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    adc4:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    adc8:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    adca:	440a      	add	r2, r1
    adcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    add0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    add4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    add8:	2000      	movs	r0, #0
    adda:	bd10      	pop	{r4, pc}
    addc:	0000abb1 	.word	0x0000abb1
    ade0:	00011948 	.word	0x00011948

0000ade4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    ade4:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    ade6:	4b03      	ldr	r3, [pc, #12]	; (adf4 <_get_i2cm_index+0x10>)
    ade8:	4798      	blx	r3
		}
	}

	ASSERT(false);
	return -1;
}
    adea:	3805      	subs	r0, #5
    adec:	bf18      	it	ne
    adee:	f04f 30ff 	movne.w	r0, #4294967295
    adf2:	bd08      	pop	{r3, pc}
    adf4:	0000abb1 	.word	0x0000abb1

0000adf8 <_sercom_i2c_m_irq_handler>:
 * \internal Sercom i2c master interrupt handler
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static void _sercom_i2c_m_irq_handler(struct _i2c_m_async_device *i2c_dev)
{
    adf8:	b510      	push	{r4, lr}
	void *   hw    = i2c_dev->hw;
    adfa:	6903      	ldr	r3, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    adfc:	7e19      	ldrb	r1, [r3, #24]
    adfe:	b2c9      	uxtb	r1, r1
	int32_t  ret   = I2C_OK;

	ASSERT(i2c_dev);
	ASSERT(i2c_dev->hw);

	while (!(flags & ERROR_FLAG)) {
    ae00:	f011 0f80 	tst.w	r1, #128	; 0x80
    ae04:	f040 80eb 	bne.w	afde <_sercom_i2c_m_irq_handler+0x1e6>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    ae08:	681c      	ldr	r4, [r3, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    ae0a:	69da      	ldr	r2, [r3, #28]
    ae0c:	f012 0f04 	tst.w	r2, #4
    ae10:	d1fb      	bne.n	ae0a <_sercom_i2c_m_irq_handler+0x12>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    ae12:	8b5a      	ldrh	r2, [r3, #26]
    ae14:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    ae16:	f011 0f01 	tst.w	r1, #1
    ae1a:	f000 808b 	beq.w	af34 <_sercom_i2c_m_irq_handler+0x13c>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    ae1e:	f012 0f02 	tst.w	r2, #2
    ae22:	d01f      	beq.n	ae64 <_sercom_i2c_m_irq_handler+0x6c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    ae24:	2101      	movs	r1, #1
    ae26:	7619      	strb	r1, [r3, #24]
			msg->flags |= I2C_M_FAIL;
    ae28:	8843      	ldrh	r3, [r0, #2]
    ae2a:	b29b      	uxth	r3, r3
    ae2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    ae30:	8043      	strh	r3, [r0, #2]
			msg->flags &= ~I2C_M_BUSY;
    ae32:	8843      	ldrh	r3, [r0, #2]
    ae34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ae38:	041b      	lsls	r3, r3, #16
    ae3a:	0c1b      	lsrs	r3, r3, #16
    ae3c:	8043      	strh	r3, [r0, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    ae3e:	400a      	ands	r2, r1
			return I2C_ERR_BAD_ADDRESS;
    ae40:	2a00      	cmp	r2, #0
    ae42:	bf14      	ite	ne
    ae44:	f06f 0104 	mvnne.w	r1, #4
    ae48:	f06f 0103 	mvneq.w	r1, #3
		}

		return;
	}

	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    ae4c:	8843      	ldrh	r3, [r0, #2]
    ae4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ae52:	041b      	lsls	r3, r3, #16
    ae54:	0c1b      	lsrs	r3, r3, #16
    ae56:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    ae58:	6943      	ldr	r3, [r0, #20]
    ae5a:	2b00      	cmp	r3, #0
    ae5c:	f000 80be 	beq.w	afdc <_sercom_i2c_m_irq_handler+0x1e4>
		if (ret != I2C_OK) {
			i2c_dev->cb.error(i2c_dev, ret);
    ae60:	4798      	blx	r3
    ae62:	bd10      	pop	{r4, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    ae64:	f012 0f04 	tst.w	r2, #4
    ae68:	d122      	bne.n	aeb0 <_sercom_i2c_m_irq_handler+0xb8>
			if (msg->flags & I2C_M_TEN) {
    ae6a:	8842      	ldrh	r2, [r0, #2]
    ae6c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    ae70:	d03c      	beq.n	aeec <_sercom_i2c_m_irq_handler+0xf4>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    ae72:	8802      	ldrh	r2, [r0, #0]
    ae74:	09d2      	lsrs	r2, r2, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    ae76:	f002 0406 	and.w	r4, r2, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    ae7a:	69da      	ldr	r2, [r3, #28]
    ae7c:	f012 0f04 	tst.w	r2, #4
    ae80:	d1fb      	bne.n	ae7a <_sercom_i2c_m_irq_handler+0x82>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    ae82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ae84:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    ae88:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
    ae8c:	4322      	orrs	r2, r4
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    ae8e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    ae90:	69da      	ldr	r2, [r3, #28]
    ae92:	f012 0f04 	tst.w	r2, #4
    ae96:	d1fb      	bne.n	ae90 <_sercom_i2c_m_irq_handler+0x98>
				msg->flags &= ~I2C_M_TEN;
    ae98:	8843      	ldrh	r3, [r0, #2]
    ae9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    ae9e:	041b      	lsls	r3, r3, #16
    aea0:	0c1b      	lsrs	r3, r3, #16
    aea2:	8043      	strh	r3, [r0, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    aea4:	6983      	ldr	r3, [r0, #24]
    aea6:	2b00      	cmp	r3, #0
    aea8:	f000 8084 	beq.w	afb4 <_sercom_i2c_m_irq_handler+0x1bc>
			i2c_dev->cb.tx_complete(i2c_dev);
    aeac:	4798      	blx	r3
    aeae:	bd10      	pop	{r4, pc}
				if (msg->len > 0) {
    aeb0:	6842      	ldr	r2, [r0, #4]
    aeb2:	2a00      	cmp	r2, #0
    aeb4:	dd04      	ble.n	aec0 <_sercom_i2c_m_irq_handler+0xc8>
					msg->flags |= I2C_M_FAIL;
    aeb6:	8842      	ldrh	r2, [r0, #2]
    aeb8:	b292      	uxth	r2, r2
    aeba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    aebe:	8042      	strh	r2, [r0, #2]
				if (msg->flags & I2C_M_STOP) {
    aec0:	8842      	ldrh	r2, [r0, #2]
    aec2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    aec6:	d108      	bne.n	aeda <_sercom_i2c_m_irq_handler+0xe2>
				msg->flags &= ~I2C_M_BUSY;
    aec8:	8843      	ldrh	r3, [r0, #2]
    aeca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    aece:	041b      	lsls	r3, r3, #16
    aed0:	0c1b      	lsrs	r3, r3, #16
    aed2:	8043      	strh	r3, [r0, #2]
				return I2C_NACK;
    aed4:	f06f 0101 	mvn.w	r1, #1
    aed8:	e7b8      	b.n	ae4c <_sercom_i2c_m_irq_handler+0x54>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    aeda:	685a      	ldr	r2, [r3, #4]
    aedc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    aee0:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    aee2:	69da      	ldr	r2, [r3, #28]
    aee4:	f012 0f04 	tst.w	r2, #4
    aee8:	d1fb      	bne.n	aee2 <_sercom_i2c_m_irq_handler+0xea>
    aeea:	e7ed      	b.n	aec8 <_sercom_i2c_m_irq_handler+0xd0>
			if (msg->len == 0) {
    aeec:	6842      	ldr	r2, [r0, #4]
    aeee:	b99a      	cbnz	r2, af18 <_sercom_i2c_m_irq_handler+0x120>
				if (msg->flags & I2C_M_STOP) {
    aef0:	8842      	ldrh	r2, [r0, #2]
    aef2:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    aef6:	d106      	bne.n	af06 <_sercom_i2c_m_irq_handler+0x10e>
				msg->flags &= ~I2C_M_BUSY;
    aef8:	8843      	ldrh	r3, [r0, #2]
    aefa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    aefe:	041b      	lsls	r3, r3, #16
    af00:	0c1b      	lsrs	r3, r3, #16
    af02:	8043      	strh	r3, [r0, #2]
    af04:	e7ce      	b.n	aea4 <_sercom_i2c_m_irq_handler+0xac>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    af06:	685a      	ldr	r2, [r3, #4]
    af08:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    af0c:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    af0e:	69da      	ldr	r2, [r3, #28]
    af10:	f012 0f04 	tst.w	r2, #4
    af14:	d1fb      	bne.n	af0e <_sercom_i2c_m_irq_handler+0x116>
    af16:	e7ef      	b.n	aef8 <_sercom_i2c_m_irq_handler+0x100>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    af18:	6882      	ldr	r2, [r0, #8]
    af1a:	7812      	ldrb	r2, [r2, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    af1c:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    af1e:	69da      	ldr	r2, [r3, #28]
    af20:	f012 0f04 	tst.w	r2, #4
    af24:	d1fb      	bne.n	af1e <_sercom_i2c_m_irq_handler+0x126>
				msg->buffer++;
    af26:	6883      	ldr	r3, [r0, #8]
    af28:	3301      	adds	r3, #1
    af2a:	6083      	str	r3, [r0, #8]
				msg->len--;
    af2c:	6843      	ldr	r3, [r0, #4]
    af2e:	3b01      	subs	r3, #1
    af30:	6043      	str	r3, [r0, #4]
    af32:	e7b7      	b.n	aea4 <_sercom_i2c_m_irq_handler+0xac>
	} else if (flags & SB_FLAG) {
    af34:	f011 0f02 	tst.w	r1, #2
    af38:	d03f      	beq.n	afba <_sercom_i2c_m_irq_handler+0x1c2>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    af3a:	6841      	ldr	r1, [r0, #4]
    af3c:	2900      	cmp	r1, #0
    af3e:	d034      	beq.n	afaa <_sercom_i2c_m_irq_handler+0x1b2>
    af40:	f012 0f04 	tst.w	r2, #4
    af44:	d131      	bne.n	afaa <_sercom_i2c_m_irq_handler+0x1b2>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    af46:	f3c4 64c0 	ubfx	r4, r4, #27, #1
			msg->len--;
    af4a:	3901      	subs	r1, #1
    af4c:	6041      	str	r1, [r0, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    af4e:	2900      	cmp	r1, #0
    af50:	d134      	bne.n	afbc <_sercom_i2c_m_irq_handler+0x1c4>
    af52:	2c00      	cmp	r4, #0
    af54:	d036      	beq.n	afc4 <_sercom_i2c_m_irq_handler+0x1cc>
				if (msg->flags & I2C_M_STOP) {
    af56:	8842      	ldrh	r2, [r0, #2]
    af58:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    af5c:	d114      	bne.n	af88 <_sercom_i2c_m_irq_handler+0x190>
				msg->flags &= ~I2C_M_BUSY;
    af5e:	8842      	ldrh	r2, [r0, #2]
    af60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    af64:	0412      	lsls	r2, r2, #16
    af66:	0c12      	lsrs	r2, r2, #16
    af68:	8042      	strh	r2, [r0, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    af6a:	6881      	ldr	r1, [r0, #8]
    af6c:	1c4a      	adds	r2, r1, #1
    af6e:	6082      	str	r2, [r0, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    af70:	69da      	ldr	r2, [r3, #28]
    af72:	f012 0f04 	tst.w	r2, #4
    af76:	d1fb      	bne.n	af70 <_sercom_i2c_m_irq_handler+0x178>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    af78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    af7a:	700a      	strb	r2, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    af7c:	2202      	movs	r2, #2
    af7e:	761a      	strb	r2, [r3, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    af80:	69c3      	ldr	r3, [r0, #28]
    af82:	b1d3      	cbz	r3, afba <_sercom_i2c_m_irq_handler+0x1c2>
			i2c_dev->cb.rx_complete(i2c_dev);
    af84:	4798      	blx	r3
    af86:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    af88:	685a      	ldr	r2, [r3, #4]
    af8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    af8e:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    af90:	69da      	ldr	r2, [r3, #28]
    af92:	f012 0f04 	tst.w	r2, #4
    af96:	d1fb      	bne.n	af90 <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    af98:	685a      	ldr	r2, [r3, #4]
    af9a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    af9e:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    afa0:	69da      	ldr	r2, [r3, #28]
    afa2:	f012 0f04 	tst.w	r2, #4
    afa6:	d1fb      	bne.n	afa0 <_sercom_i2c_m_irq_handler+0x1a8>
    afa8:	e7d9      	b.n	af5e <_sercom_i2c_m_irq_handler+0x166>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    afaa:	2202      	movs	r2, #2
    afac:	761a      	strb	r2, [r3, #24]
			return I2C_NACK;
    afae:	f06f 0101 	mvn.w	r1, #1
    afb2:	e74b      	b.n	ae4c <_sercom_i2c_m_irq_handler+0x54>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    afb4:	f011 0f02 	tst.w	r1, #2
    afb8:	d1e2      	bne.n	af80 <_sercom_i2c_m_irq_handler+0x188>
    afba:	bd10      	pop	{r4, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    afbc:	2901      	cmp	r1, #1
    afbe:	d1d4      	bne.n	af6a <_sercom_i2c_m_irq_handler+0x172>
    afc0:	2c00      	cmp	r4, #0
    afc2:	d0d2      	beq.n	af6a <_sercom_i2c_m_irq_handler+0x172>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    afc4:	685a      	ldr	r2, [r3, #4]
    afc6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    afca:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    afcc:	69da      	ldr	r2, [r3, #28]
    afce:	f012 0f04 	tst.w	r2, #4
    afd2:	d1fb      	bne.n	afcc <_sercom_i2c_m_irq_handler+0x1d4>
			if (msg->len == 0) {
    afd4:	6842      	ldr	r2, [r0, #4]
    afd6:	2a00      	cmp	r2, #0
    afd8:	d0bd      	beq.n	af56 <_sercom_i2c_m_irq_handler+0x15e>
    afda:	e7c6      	b.n	af6a <_sercom_i2c_m_irq_handler+0x172>
    afdc:	bd10      	pop	{r4, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    afde:	8843      	ldrh	r3, [r0, #2]
    afe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    afe4:	041b      	lsls	r3, r3, #16
    afe6:	0c1b      	lsrs	r3, r3, #16
    afe8:	8043      	strh	r3, [r0, #2]
	if (i2c_dev->cb.error) {
    afea:	6943      	ldr	r3, [r0, #20]
    afec:	2b00      	cmp	r3, #0
    afee:	d0e4      	beq.n	afba <_sercom_i2c_m_irq_handler+0x1c2>
		} else {
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    aff0:	f06f 0104 	mvn.w	r1, #4
    aff4:	4798      	blx	r3
    aff6:	bd10      	pop	{r4, pc}

0000aff8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    aff8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    affa:	4b03      	ldr	r3, [pc, #12]	; (b008 <_sercom_get_irq_num+0x10>)
    affc:	4798      	blx	r3
    affe:	0080      	lsls	r0, r0, #2
    b000:	302e      	adds	r0, #46	; 0x2e
}
    b002:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    b006:	bd08      	pop	{r3, pc}
    b008:	0000abb1 	.word	0x0000abb1

0000b00c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    b00c:	b538      	push	{r3, r4, r5, lr}
    b00e:	4605      	mov	r5, r0
    b010:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    b012:	4608      	mov	r0, r1
    b014:	4b34      	ldr	r3, [pc, #208]	; (b0e8 <_i2c_m_sync_init_impl+0xdc>)
    b016:	4798      	blx	r3
    b018:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    b01a:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    b01c:	f013 0f01 	tst.w	r3, #1
    b020:	d123      	bne.n	b06a <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    b022:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b026:	4a31      	ldr	r2, [pc, #196]	; (b0ec <_i2c_m_sync_init_impl+0xe0>)
    b028:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b02c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    b030:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b034:	69e3      	ldr	r3, [r4, #28]
    b036:	f013 0f03 	tst.w	r3, #3
    b03a:	d1fb      	bne.n	b034 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    b03c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    b03e:	f013 0f02 	tst.w	r3, #2
    b042:	d00b      	beq.n	b05c <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    b044:	6823      	ldr	r3, [r4, #0]
    b046:	f023 0302 	bic.w	r3, r3, #2
    b04a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b04c:	69e3      	ldr	r3, [r4, #28]
    b04e:	f013 0f03 	tst.w	r3, #3
    b052:	d1fb      	bne.n	b04c <_i2c_m_sync_init_impl+0x40>
    b054:	69e3      	ldr	r3, [r4, #28]
    b056:	f013 0f02 	tst.w	r3, #2
    b05a:	d1fb      	bne.n	b054 <_i2c_m_sync_init_impl+0x48>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    b05c:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    b060:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b062:	69e3      	ldr	r3, [r4, #28]
    b064:	f013 0f03 	tst.w	r3, #3
    b068:	d1fb      	bne.n	b062 <_i2c_m_sync_init_impl+0x56>
    b06a:	69e3      	ldr	r3, [r4, #28]
    b06c:	f013 0f01 	tst.w	r3, #1
    b070:	d1fb      	bne.n	b06a <_i2c_m_sync_init_impl+0x5e>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    b072:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b076:	4a1d      	ldr	r2, [pc, #116]	; (b0ec <_i2c_m_sync_init_impl+0xe0>)
    b078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    b07c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    b080:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b082:	69e3      	ldr	r3, [r4, #28]
    b084:	f013 0f03 	tst.w	r3, #3
    b088:	d1fb      	bne.n	b082 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    b08a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b08e:	4917      	ldr	r1, [pc, #92]	; (b0ec <_i2c_m_sync_init_impl+0xe0>)
    b090:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    b094:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    b098:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b09a:	69e3      	ldr	r3, [r4, #28]
    b09c:	f013 0f04 	tst.w	r3, #4
    b0a0:	d1fb      	bne.n	b09a <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    b0a2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b0a6:	4911      	ldr	r1, [pc, #68]	; (b0ec <_i2c_m_sync_init_impl+0xe0>)
    b0a8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    b0ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    b0b0:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    b0b2:	f3c2 6301 	ubfx	r3, r2, #24, #2
    b0b6:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    b0b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    b0ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    b0be:	2b01      	cmp	r3, #1
    b0c0:	bf94      	ite	ls
    b0c2:	2300      	movls	r3, #0
    b0c4:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    b0c6:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    b0ca:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b0cc:	69e3      	ldr	r3, [r4, #28]
    b0ce:	f013 0f04 	tst.w	r3, #4
    b0d2:	d1fb      	bne.n	b0cc <_i2c_m_sync_init_impl+0xc0>

	service->trise = _i2cms[i].trise;
    b0d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    b0d8:	4b04      	ldr	r3, [pc, #16]	; (b0ec <_i2c_m_sync_init_impl+0xe0>)
    b0da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    b0de:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    b0e2:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    b0e4:	2000      	movs	r0, #0
    b0e6:	bd38      	pop	{r3, r4, r5, pc}
    b0e8:	0000ade5 	.word	0x0000ade5
    b0ec:	00011948 	.word	0x00011948

0000b0f0 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    b0f0:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b0f2:	f013 0f01 	tst.w	r3, #1
    b0f6:	d109      	bne.n	b10c <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b0f8:	6803      	ldr	r3, [r0, #0]
    b0fa:	f043 0302 	orr.w	r3, r3, #2
    b0fe:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b100:	69c3      	ldr	r3, [r0, #28]
    b102:	f013 0f03 	tst.w	r3, #3
    b106:	d1fb      	bne.n	b100 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    b108:	2000      	movs	r0, #0
    b10a:	4770      	bx	lr
		return ERR_BUSY;
    b10c:	f06f 0003 	mvn.w	r0, #3
}
    b110:	4770      	bx	lr
	...

0000b114 <_spi_async_enable>:
 *  \param[in] hw Pointer to the hardware register base.
 *
 * \return Enabling status
 */
static int32_t _spi_async_enable(void *const hw)
{
    b114:	b538      	push	{r3, r4, r5, lr}
    b116:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    b118:	4b0b      	ldr	r3, [pc, #44]	; (b148 <_spi_async_enable+0x34>)
    b11a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b11c:	4620      	mov	r0, r4
    b11e:	4b0b      	ldr	r3, [pc, #44]	; (b14c <_spi_async_enable+0x38>)
    b120:	4798      	blx	r3
    b122:	1d01      	adds	r1, r0, #4
    b124:	b2c9      	uxtb	r1, r1
    b126:	2501      	movs	r5, #1
    b128:	4c09      	ldr	r4, [pc, #36]	; (b150 <_spi_async_enable+0x3c>)
	for (uint32_t i = 0; i < 4; i++) {
		NVIC_EnableIRQ((IRQn_Type)irq++);
    b12a:	1c43      	adds	r3, r0, #1
    b12c:	b2db      	uxtb	r3, r3
    b12e:	0942      	lsrs	r2, r0, #5
    b130:	f000 001f 	and.w	r0, r0, #31
    b134:	fa05 f000 	lsl.w	r0, r5, r0
    b138:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    b13c:	4618      	mov	r0, r3
	for (uint32_t i = 0; i < 4; i++) {
    b13e:	4299      	cmp	r1, r3
    b140:	d1f3      	bne.n	b12a <_spi_async_enable+0x16>
	}

	return ERR_NONE;
}
    b142:	2000      	movs	r0, #0
    b144:	bd38      	pop	{r3, r4, r5, pc}
    b146:	bf00      	nop
    b148:	0000b0f1 	.word	0x0000b0f1
    b14c:	0000aff9 	.word	0x0000aff9
    b150:	e000e100 	.word	0xe000e100

0000b154 <_spi_set_mode>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    b154:	69c3      	ldr	r3, [r0, #28]
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
	uint32_t ctrla;

	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    b156:	f013 0f03 	tst.w	r3, #3
    b15a:	d111      	bne.n	b180 <_spi_set_mode+0x2c>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b15c:	69c3      	ldr	r3, [r0, #28]
    b15e:	f013 0f03 	tst.w	r3, #3
    b162:	d1fb      	bne.n	b15c <_spi_set_mode+0x8>
	return ((Sercom *)hw)->SPI.CTRLA.reg;
    b164:	6803      	ldr	r3, [r0, #0]
		return ERR_BUSY;
	}

	ctrla = hri_sercomspi_read_CTRLA_reg(hw);
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
    b166:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
    b16a:	0709      	lsls	r1, r1, #28
    b16c:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
    b170:	4319      	orrs	r1, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    b172:	6001      	str	r1, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b174:	69c3      	ldr	r3, [r0, #28]
    b176:	f013 0f03 	tst.w	r3, #3
    b17a:	d1fb      	bne.n	b174 <_spi_set_mode+0x20>
	hri_sercomspi_write_CTRLA_reg(hw, ctrla);

	return ERR_NONE;
    b17c:	2000      	movs	r0, #0
    b17e:	4770      	bx	lr
		return ERR_BUSY;
    b180:	f06f 0003 	mvn.w	r0, #3
}
    b184:	4770      	bx	lr

0000b186 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    b186:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    b188:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    b18a:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    b18c:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    b18e:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    b190:	f013 0f01 	tst.w	r3, #1
    b194:	d109      	bne.n	b1aa <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    b196:	f013 0f04 	tst.w	r3, #4
    b19a:	d109      	bne.n	b1b0 <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    b19c:	f013 0f02 	tst.w	r3, #2
    b1a0:	d109      	bne.n	b1b6 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    b1a2:	f013 0f80 	tst.w	r3, #128	; 0x80
    b1a6:	d10b      	bne.n	b1c0 <_spi_handler+0x3a>
    b1a8:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    b1aa:	6883      	ldr	r3, [r0, #8]
    b1ac:	4798      	blx	r3
    b1ae:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    b1b0:	68c3      	ldr	r3, [r0, #12]
    b1b2:	4798      	blx	r3
    b1b4:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    b1b6:	2302      	movs	r3, #2
    b1b8:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    b1ba:	6903      	ldr	r3, [r0, #16]
    b1bc:	4798      	blx	r3
    b1be:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    b1c0:	2304      	movs	r3, #4
    b1c2:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    b1c4:	2380      	movs	r3, #128	; 0x80
    b1c6:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    b1c8:	6943      	ldr	r3, [r0, #20]
    b1ca:	f06f 0112 	mvn.w	r1, #18
    b1ce:	4798      	blx	r3
	}
}
    b1d0:	e7ea      	b.n	b1a8 <_spi_handler+0x22>
	...

0000b1d4 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    b1d4:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    b1d6:	4b03      	ldr	r3, [pc, #12]	; (b1e4 <_spi_get_tx_dma_channel+0x10>)
    b1d8:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    b1da:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    b1dc:	bf0c      	ite	eq
    b1de:	2008      	moveq	r0, #8
    b1e0:	2000      	movne	r0, #0
    b1e2:	bd08      	pop	{r3, pc}
    b1e4:	0000abb1 	.word	0x0000abb1

0000b1e8 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    b1e8:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    b1ea:	4b03      	ldr	r3, [pc, #12]	; (b1f8 <_spi_get_rx_dma_channel+0x10>)
    b1ec:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    b1ee:	2807      	cmp	r0, #7
    b1f0:	bf8c      	ite	hi
    b1f2:	2000      	movhi	r0, #0
    b1f4:	2001      	movls	r0, #1
    b1f6:	bd08      	pop	{r3, pc}
    b1f8:	0000abb1 	.word	0x0000abb1

0000b1fc <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    b1fc:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    b1fe:	6883      	ldr	r3, [r0, #8]
    b200:	689b      	ldr	r3, [r3, #8]
    b202:	b103      	cbz	r3, b206 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    b204:	4798      	blx	r3
    b206:	bd08      	pop	{r3, pc}

0000b208 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    b208:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    b20a:	6883      	ldr	r3, [r0, #8]
    b20c:	685b      	ldr	r3, [r3, #4]
    b20e:	b103      	cbz	r3, b212 <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    b210:	4798      	blx	r3
    b212:	bd08      	pop	{r3, pc}

0000b214 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    b214:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    b216:	6883      	ldr	r3, [r0, #8]
    b218:	68db      	ldr	r3, [r3, #12]
    b21a:	b103      	cbz	r3, b21e <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    b21c:	4798      	blx	r3
    b21e:	bd08      	pop	{r3, pc}

0000b220 <_usart_set_parity>:
{
    b220:	b570      	push	{r4, r5, r6, lr}
    b222:	b082      	sub	sp, #8
    b224:	4604      	mov	r4, r0
    b226:	460e      	mov	r6, r1
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b228:	69e3      	ldr	r3, [r4, #28]
    b22a:	f013 0f03 	tst.w	r3, #3
    b22e:	d1fb      	bne.n	b228 <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    b230:	6825      	ldr	r5, [r4, #0]
	return (bool)tmp;
    b232:	f3c5 0540 	ubfx	r5, r5, #1, #1
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    b236:	6823      	ldr	r3, [r4, #0]
    b238:	f023 0302 	bic.w	r3, r3, #2
    b23c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b23e:	69e3      	ldr	r3, [r4, #28]
    b240:	f013 0f03 	tst.w	r3, #3
    b244:	d1fb      	bne.n	b23e <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    b246:	a801      	add	r0, sp, #4
    b248:	4b1a      	ldr	r3, [pc, #104]	; (b2b4 <_usart_set_parity+0x94>)
    b24a:	4798      	blx	r3
    b24c:	69e3      	ldr	r3, [r4, #28]
    b24e:	f013 0f02 	tst.w	r3, #2
    b252:	d1fb      	bne.n	b24c <_usart_set_parity+0x2c>
	if (USART_PARITY_NONE != parity) {
    b254:	2e02      	cmp	r6, #2
    b256:	d023      	beq.n	b2a0 <_usart_set_parity+0x80>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    b258:	6823      	ldr	r3, [r4, #0]
    b25a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    b25e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b260:	69e3      	ldr	r3, [r4, #28]
    b262:	f013 0f1f 	tst.w	r3, #31
    b266:	d1fb      	bne.n	b260 <_usart_set_parity+0x40>
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    b268:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    b26a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    b26e:	3600      	adds	r6, #0
    b270:	bf18      	it	ne
    b272:	2601      	movne	r6, #1
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    b274:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    b278:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b27a:	69e3      	ldr	r3, [r4, #28]
    b27c:	f013 0f1f 	tst.w	r3, #31
    b280:	d1fb      	bne.n	b27a <_usart_set_parity+0x5a>
	CRITICAL_SECTION_LEAVE()
    b282:	a801      	add	r0, sp, #4
    b284:	4b0c      	ldr	r3, [pc, #48]	; (b2b8 <_usart_set_parity+0x98>)
    b286:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    b288:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    b28a:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    b28e:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    b292:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b294:	69e3      	ldr	r3, [r4, #28]
    b296:	f013 0f03 	tst.w	r3, #3
    b29a:	d1fb      	bne.n	b294 <_usart_set_parity+0x74>
}
    b29c:	b002      	add	sp, #8
    b29e:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    b2a0:	6823      	ldr	r3, [r4, #0]
    b2a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    b2a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b2a8:	69e3      	ldr	r3, [r4, #28]
    b2aa:	f013 0f1f 	tst.w	r3, #31
    b2ae:	d1fb      	bne.n	b2a8 <_usart_set_parity+0x88>
    b2b0:	e7da      	b.n	b268 <_usart_set_parity+0x48>
    b2b2:	bf00      	nop
    b2b4:	00009011 	.word	0x00009011
    b2b8:	0000901f 	.word	0x0000901f

0000b2bc <_usart_sync_init>:
{
    b2bc:	b508      	push	{r3, lr}
	device->hw = hw;
    b2be:	6001      	str	r1, [r0, #0]
	return _usart_init(hw);
    b2c0:	4608      	mov	r0, r1
    b2c2:	4b01      	ldr	r3, [pc, #4]	; (b2c8 <_usart_sync_init+0xc>)
    b2c4:	4798      	blx	r3
}
    b2c6:	bd08      	pop	{r3, pc}
    b2c8:	0000acc5 	.word	0x0000acc5

0000b2cc <_usart_async_init>:
{
    b2cc:	b570      	push	{r4, r5, r6, lr}
    b2ce:	4606      	mov	r6, r0
    b2d0:	460d      	mov	r5, r1
	init_status = _usart_init(hw);
    b2d2:	4608      	mov	r0, r1
    b2d4:	4b14      	ldr	r3, [pc, #80]	; (b328 <_usart_async_init+0x5c>)
    b2d6:	4798      	blx	r3
	if (init_status) {
    b2d8:	4604      	mov	r4, r0
    b2da:	b108      	cbz	r0, b2e0 <_usart_async_init+0x14>
}
    b2dc:	4620      	mov	r0, r4
    b2de:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    b2e0:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    b2e2:	4631      	mov	r1, r6
    b2e4:	4628      	mov	r0, r5
    b2e6:	4b11      	ldr	r3, [pc, #68]	; (b32c <_usart_async_init+0x60>)
    b2e8:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b2ea:	4628      	mov	r0, r5
    b2ec:	4b10      	ldr	r3, [pc, #64]	; (b330 <_usart_async_init+0x64>)
    b2ee:	4798      	blx	r3
    b2f0:	1d01      	adds	r1, r0, #4
    b2f2:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b2f4:	2501      	movs	r5, #1
    b2f6:	f000 021f 	and.w	r2, r0, #31
    b2fa:	fa05 f202 	lsl.w	r2, r5, r2
    b2fe:	0943      	lsrs	r3, r0, #5
    b300:	009b      	lsls	r3, r3, #2
    b302:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    b306:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    b30a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    b30e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b312:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b316:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b31a:	601a      	str	r2, [r3, #0]
		irq++;
    b31c:	3001      	adds	r0, #1
    b31e:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    b320:	4281      	cmp	r1, r0
    b322:	d1e8      	bne.n	b2f6 <_usart_async_init+0x2a>
    b324:	e7da      	b.n	b2dc <_usart_async_init+0x10>
    b326:	bf00      	nop
    b328:	0000acc5 	.word	0x0000acc5
    b32c:	0000ac65 	.word	0x0000ac65
    b330:	0000aff9 	.word	0x0000aff9

0000b334 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    b334:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b336:	6813      	ldr	r3, [r2, #0]
    b338:	f043 0302 	orr.w	r3, r3, #2
    b33c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b33e:	69d3      	ldr	r3, [r2, #28]
    b340:	f013 0f03 	tst.w	r3, #3
    b344:	d1fb      	bne.n	b33e <_usart_sync_enable+0xa>
}
    b346:	4770      	bx	lr

0000b348 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    b348:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b34a:	6813      	ldr	r3, [r2, #0]
    b34c:	f043 0302 	orr.w	r3, r3, #2
    b350:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b352:	69d3      	ldr	r3, [r2, #28]
    b354:	f013 0f03 	tst.w	r3, #3
    b358:	d1fb      	bne.n	b352 <_usart_async_enable+0xa>
}
    b35a:	4770      	bx	lr

0000b35c <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    b35c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    b35e:	6813      	ldr	r3, [r2, #0]
    b360:	f023 0302 	bic.w	r3, r3, #2
    b364:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    b366:	69d3      	ldr	r3, [r2, #28]
    b368:	f013 0f03 	tst.w	r3, #3
    b36c:	d1fb      	bne.n	b366 <_usart_async_disable+0xa>
}
    b36e:	4770      	bx	lr

0000b370 <_usart_async_set_parity>:
{
    b370:	b508      	push	{r3, lr}
	_usart_set_parity(device->hw, parity);
    b372:	6980      	ldr	r0, [r0, #24]
    b374:	4b01      	ldr	r3, [pc, #4]	; (b37c <_usart_async_set_parity+0xc>)
    b376:	4798      	blx	r3
    b378:	bd08      	pop	{r3, pc}
    b37a:	bf00      	nop
    b37c:	0000b221 	.word	0x0000b221

0000b380 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    b380:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    b382:	6299      	str	r1, [r3, #40]	; 0x28
    b384:	4770      	bx	lr

0000b386 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    b386:	6983      	ldr	r3, [r0, #24]
    b388:	6299      	str	r1, [r3, #40]	; 0x28
    b38a:	4770      	bx	lr

0000b38c <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    b38c:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    b38e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    b390:	b2c0      	uxtb	r0, r0
    b392:	4770      	bx	lr

0000b394 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    b394:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    b396:	7e18      	ldrb	r0, [r3, #24]
}
    b398:	f000 0001 	and.w	r0, r0, #1
    b39c:	4770      	bx	lr

0000b39e <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    b39e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    b3a0:	7e18      	ldrb	r0, [r3, #24]
}
    b3a2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    b3a6:	4770      	bx	lr

0000b3a8 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    b3a8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    b3aa:	7e18      	ldrb	r0, [r3, #24]
}
    b3ac:	f3c0 0080 	ubfx	r0, r0, #2, #1
    b3b0:	4770      	bx	lr

0000b3b2 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    b3b2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    b3b4:	2201      	movs	r2, #1
    b3b6:	759a      	strb	r2, [r3, #22]
    b3b8:	4770      	bx	lr

0000b3ba <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    b3ba:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    b3bc:	2202      	movs	r2, #2
    b3be:	759a      	strb	r2, [r3, #22]
    b3c0:	4770      	bx	lr

0000b3c2 <_usart_async_set_irq_state>:
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    b3c2:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    b3c6:	d10d      	bne.n	b3e4 <_usart_async_set_irq_state+0x22>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    b3c8:	6983      	ldr	r3, [r0, #24]
	if (value == 0x0) {
    b3ca:	b92a      	cbnz	r2, b3d8 <_usart_async_set_irq_state+0x16>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    b3cc:	2201      	movs	r2, #1
    b3ce:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    b3d0:	6983      	ldr	r3, [r0, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    b3d2:	2202      	movs	r2, #2
    b3d4:	751a      	strb	r2, [r3, #20]
    b3d6:	4770      	bx	lr
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    b3d8:	2201      	movs	r2, #1
    b3da:	759a      	strb	r2, [r3, #22]
    b3dc:	6983      	ldr	r3, [r0, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    b3de:	2202      	movs	r2, #2
    b3e0:	759a      	strb	r2, [r3, #22]
    b3e2:	4770      	bx	lr
	} else if (USART_ASYNC_RX_DONE == type) {
    b3e4:	2901      	cmp	r1, #1
    b3e6:	d002      	beq.n	b3ee <_usart_async_set_irq_state+0x2c>
	} else if (USART_ASYNC_ERROR == type) {
    b3e8:	2903      	cmp	r1, #3
    b3ea:	d008      	beq.n	b3fe <_usart_async_set_irq_state+0x3c>
    b3ec:	4770      	bx	lr
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    b3ee:	6983      	ldr	r3, [r0, #24]
	if (value == 0x0) {
    b3f0:	b912      	cbnz	r2, b3f8 <_usart_async_set_irq_state+0x36>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    b3f2:	2204      	movs	r2, #4
    b3f4:	751a      	strb	r2, [r3, #20]
    b3f6:	4770      	bx	lr
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    b3f8:	2204      	movs	r2, #4
    b3fa:	759a      	strb	r2, [r3, #22]
    b3fc:	4770      	bx	lr
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    b3fe:	6983      	ldr	r3, [r0, #24]
	if (value == 0x0) {
    b400:	b112      	cbz	r2, b408 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    b402:	2280      	movs	r2, #128	; 0x80
    b404:	759a      	strb	r2, [r3, #22]
}
    b406:	e7f1      	b.n	b3ec <_usart_async_set_irq_state+0x2a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    b408:	2280      	movs	r2, #128	; 0x80
    b40a:	751a      	strb	r2, [r3, #20]
    b40c:	4770      	bx	lr
	...

0000b410 <_i2c_m_async_init>:
{
    b410:	b570      	push	{r4, r5, r6, lr}
    b412:	4606      	mov	r6, r0
    b414:	460d      	mov	r5, r1
	i2c_dev->hw = hw;
    b416:	6101      	str	r1, [r0, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    b418:	4b13      	ldr	r3, [pc, #76]	; (b468 <_i2c_m_async_init+0x58>)
    b41a:	4798      	blx	r3
	if (init_status) {
    b41c:	4604      	mov	r4, r0
    b41e:	b108      	cbz	r0, b424 <_i2c_m_async_init+0x14>
}
    b420:	4620      	mov	r0, r4
    b422:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    b424:	4631      	mov	r1, r6
    b426:	4628      	mov	r0, r5
    b428:	4b10      	ldr	r3, [pc, #64]	; (b46c <_i2c_m_async_init+0x5c>)
    b42a:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    b42c:	4628      	mov	r0, r5
    b42e:	4b10      	ldr	r3, [pc, #64]	; (b470 <_i2c_m_async_init+0x60>)
    b430:	4798      	blx	r3
    b432:	1d01      	adds	r1, r0, #4
    b434:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b436:	2501      	movs	r5, #1
    b438:	f000 021f 	and.w	r2, r0, #31
    b43c:	fa05 f202 	lsl.w	r2, r5, r2
    b440:	0943      	lsrs	r3, r0, #5
    b442:	009b      	lsls	r3, r3, #2
    b444:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    b448:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    b44c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    b450:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b454:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b458:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b45c:	601a      	str	r2, [r3, #0]
		irq++;
    b45e:	3001      	adds	r0, #1
    b460:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    b462:	4281      	cmp	r1, r0
    b464:	d1e8      	bne.n	b438 <_i2c_m_async_init+0x28>
    b466:	e7db      	b.n	b420 <_i2c_m_async_init+0x10>
    b468:	0000b00d 	.word	0x0000b00d
    b46c:	0000ac65 	.word	0x0000ac65
    b470:	0000aff9 	.word	0x0000aff9

0000b474 <_i2c_m_async_transfer>:
{
    b474:	b410      	push	{r4}
    b476:	4604      	mov	r4, r0
	if (msg->len == 0) {
    b478:	6848      	ldr	r0, [r1, #4]
    b47a:	2800      	cmp	r0, #0
    b47c:	d042      	beq.n	b504 <_i2c_m_async_transfer+0x90>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    b47e:	8863      	ldrh	r3, [r4, #2]
    b480:	f413 7f80 	tst.w	r3, #256	; 0x100
    b484:	d162      	bne.n	b54c <_i2c_m_async_transfer+0xd8>
	msg->flags |= I2C_M_BUSY;
    b486:	884b      	ldrh	r3, [r1, #2]
    b488:	b29b      	uxth	r3, r3
    b48a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b48e:	804b      	strh	r3, [r1, #2]
	i2c_dev->service.msg = *msg;
    b490:	c907      	ldmia	r1, {r0, r1, r2}
    b492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    b496:	6922      	ldr	r2, [r4, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    b498:	6853      	ldr	r3, [r2, #4]
    b49a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b49e:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b4a0:	69d3      	ldr	r3, [r2, #28]
    b4a2:	f013 0f04 	tst.w	r3, #4
    b4a6:	d1fb      	bne.n	b4a0 <_i2c_m_async_transfer+0x2c>
	void *             hw    = i2c_dev->hw;
    b4a8:	6923      	ldr	r3, [r4, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    b4aa:	6819      	ldr	r1, [r3, #0]
	if (msg->len == 1 && sclsm) {
    b4ac:	6862      	ldr	r2, [r4, #4]
    b4ae:	2a01      	cmp	r2, #1
    b4b0:	d02b      	beq.n	b50a <_i2c_m_async_transfer+0x96>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    b4b2:	685a      	ldr	r2, [r3, #4]
    b4b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    b4b8:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b4ba:	69da      	ldr	r2, [r3, #28]
    b4bc:	f012 0f04 	tst.w	r2, #4
    b4c0:	d1fb      	bne.n	b4ba <_i2c_m_async_transfer+0x46>
	if (msg->addr & I2C_M_TEN) {
    b4c2:	8822      	ldrh	r2, [r4, #0]
    b4c4:	f412 6f80 	tst.w	r2, #1024	; 0x400
    b4c8:	d02b      	beq.n	b522 <_i2c_m_async_transfer+0xae>
		if (msg->flags & I2C_M_RD) {
    b4ca:	8861      	ldrh	r1, [r4, #2]
    b4cc:	f011 0f01 	tst.w	r1, #1
    b4d0:	d004      	beq.n	b4dc <_i2c_m_async_transfer+0x68>
			msg->flags |= I2C_M_TEN;
    b4d2:	8861      	ldrh	r1, [r4, #2]
    b4d4:	b289      	uxth	r1, r1
    b4d6:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
    b4da:	8061      	strh	r1, [r4, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b4dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
    b4e0:	ea01 0142 	and.w	r1, r1, r2, lsl #1
    b4e4:	69da      	ldr	r2, [r3, #28]
    b4e6:	f012 0f04 	tst.w	r2, #4
    b4ea:	d1fb      	bne.n	b4e4 <_i2c_m_async_transfer+0x70>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    b4ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b4ee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b4f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    b4f6:	430a      	orrs	r2, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    b4f8:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b4fa:	69da      	ldr	r2, [r3, #28]
    b4fc:	f012 0f04 	tst.w	r2, #4
    b500:	d1fb      	bne.n	b4fa <_i2c_m_async_transfer+0x86>
	return ERR_NONE;
    b502:	2000      	movs	r0, #0
}
    b504:	f85d 4b04 	ldr.w	r4, [sp], #4
    b508:	4770      	bx	lr
	if (msg->len == 1 && sclsm) {
    b50a:	f011 6f00 	tst.w	r1, #134217728	; 0x8000000
    b50e:	d0d0      	beq.n	b4b2 <_i2c_m_async_transfer+0x3e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    b510:	685a      	ldr	r2, [r3, #4]
    b512:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    b516:	605a      	str	r2, [r3, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b518:	69da      	ldr	r2, [r3, #28]
    b51a:	f012 0f04 	tst.w	r2, #4
    b51e:	d1fb      	bne.n	b518 <_i2c_m_async_transfer+0xa4>
    b520:	e7cf      	b.n	b4c2 <_i2c_m_async_transfer+0x4e>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    b522:	8860      	ldrh	r0, [r4, #2]
    b524:	0051      	lsls	r1, r2, #1
    b526:	b2c9      	uxtb	r1, r1
    b528:	f000 0201 	and.w	r2, r0, #1
    b52c:	4311      	orrs	r1, r2
    b52e:	69da      	ldr	r2, [r3, #28]
    b530:	f012 0f04 	tst.w	r2, #4
    b534:	d1fb      	bne.n	b52e <_i2c_m_async_transfer+0xba>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    b536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    b538:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    b53c:	4311      	orrs	r1, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    b53e:	6259      	str	r1, [r3, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    b540:	69da      	ldr	r2, [r3, #28]
    b542:	f012 0f04 	tst.w	r2, #4
    b546:	d1fb      	bne.n	b540 <_i2c_m_async_transfer+0xcc>
	return ERR_NONE;
    b548:	2000      	movs	r0, #0
    b54a:	e7db      	b.n	b504 <_i2c_m_async_transfer+0x90>
		return ERR_BUSY;
    b54c:	f06f 0003 	mvn.w	r0, #3
    b550:	e7d8      	b.n	b504 <_i2c_m_async_transfer+0x90>

0000b552 <_i2c_m_async_register_callback>:
	switch (type) {
    b552:	2901      	cmp	r1, #1
    b554:	d006      	beq.n	b564 <_i2c_m_async_register_callback+0x12>
    b556:	b119      	cbz	r1, b560 <_i2c_m_async_register_callback+0xe>
    b558:	2902      	cmp	r1, #2
    b55a:	d005      	beq.n	b568 <_i2c_m_async_register_callback+0x16>
}
    b55c:	2000      	movs	r0, #0
    b55e:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    b560:	6142      	str	r2, [r0, #20]
		break;
    b562:	e7fb      	b.n	b55c <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    b564:	6182      	str	r2, [r0, #24]
		break;
    b566:	e7f9      	b.n	b55c <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    b568:	61c2      	str	r2, [r0, #28]
		break;
    b56a:	e7f7      	b.n	b55c <_i2c_m_async_register_callback+0xa>

0000b56c <SERCOM0_0_Handler>:
{
    b56c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    b56e:	4b02      	ldr	r3, [pc, #8]	; (b578 <SERCOM0_0_Handler+0xc>)
    b570:	6818      	ldr	r0, [r3, #0]
    b572:	4b02      	ldr	r3, [pc, #8]	; (b57c <SERCOM0_0_Handler+0x10>)
    b574:	4798      	blx	r3
    b576:	bd08      	pop	{r3, pc}
    b578:	20000980 	.word	0x20000980
    b57c:	0000abf5 	.word	0x0000abf5

0000b580 <SERCOM0_1_Handler>:
{
    b580:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    b582:	4b02      	ldr	r3, [pc, #8]	; (b58c <SERCOM0_1_Handler+0xc>)
    b584:	6818      	ldr	r0, [r3, #0]
    b586:	4b02      	ldr	r3, [pc, #8]	; (b590 <SERCOM0_1_Handler+0x10>)
    b588:	4798      	blx	r3
    b58a:	bd08      	pop	{r3, pc}
    b58c:	20000980 	.word	0x20000980
    b590:	0000abf5 	.word	0x0000abf5

0000b594 <SERCOM0_2_Handler>:
{
    b594:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    b596:	4b02      	ldr	r3, [pc, #8]	; (b5a0 <SERCOM0_2_Handler+0xc>)
    b598:	6818      	ldr	r0, [r3, #0]
    b59a:	4b02      	ldr	r3, [pc, #8]	; (b5a4 <SERCOM0_2_Handler+0x10>)
    b59c:	4798      	blx	r3
    b59e:	bd08      	pop	{r3, pc}
    b5a0:	20000980 	.word	0x20000980
    b5a4:	0000abf5 	.word	0x0000abf5

0000b5a8 <SERCOM0_3_Handler>:
{
    b5a8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    b5aa:	4b02      	ldr	r3, [pc, #8]	; (b5b4 <SERCOM0_3_Handler+0xc>)
    b5ac:	6818      	ldr	r0, [r3, #0]
    b5ae:	4b02      	ldr	r3, [pc, #8]	; (b5b8 <SERCOM0_3_Handler+0x10>)
    b5b0:	4798      	blx	r3
    b5b2:	bd08      	pop	{r3, pc}
    b5b4:	20000980 	.word	0x20000980
    b5b8:	0000abf5 	.word	0x0000abf5

0000b5bc <SERCOM1_0_Handler>:
{
    b5bc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    b5be:	4b02      	ldr	r3, [pc, #8]	; (b5c8 <SERCOM1_0_Handler+0xc>)
    b5c0:	6858      	ldr	r0, [r3, #4]
    b5c2:	4b02      	ldr	r3, [pc, #8]	; (b5cc <SERCOM1_0_Handler+0x10>)
    b5c4:	4798      	blx	r3
    b5c6:	bd08      	pop	{r3, pc}
    b5c8:	20000980 	.word	0x20000980
    b5cc:	0000abf5 	.word	0x0000abf5

0000b5d0 <SERCOM1_1_Handler>:
{
    b5d0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    b5d2:	4b02      	ldr	r3, [pc, #8]	; (b5dc <SERCOM1_1_Handler+0xc>)
    b5d4:	6858      	ldr	r0, [r3, #4]
    b5d6:	4b02      	ldr	r3, [pc, #8]	; (b5e0 <SERCOM1_1_Handler+0x10>)
    b5d8:	4798      	blx	r3
    b5da:	bd08      	pop	{r3, pc}
    b5dc:	20000980 	.word	0x20000980
    b5e0:	0000abf5 	.word	0x0000abf5

0000b5e4 <SERCOM1_2_Handler>:
{
    b5e4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    b5e6:	4b02      	ldr	r3, [pc, #8]	; (b5f0 <SERCOM1_2_Handler+0xc>)
    b5e8:	6858      	ldr	r0, [r3, #4]
    b5ea:	4b02      	ldr	r3, [pc, #8]	; (b5f4 <SERCOM1_2_Handler+0x10>)
    b5ec:	4798      	blx	r3
    b5ee:	bd08      	pop	{r3, pc}
    b5f0:	20000980 	.word	0x20000980
    b5f4:	0000abf5 	.word	0x0000abf5

0000b5f8 <SERCOM1_3_Handler>:
{
    b5f8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    b5fa:	4b02      	ldr	r3, [pc, #8]	; (b604 <SERCOM1_3_Handler+0xc>)
    b5fc:	6858      	ldr	r0, [r3, #4]
    b5fe:	4b02      	ldr	r3, [pc, #8]	; (b608 <SERCOM1_3_Handler+0x10>)
    b600:	4798      	blx	r3
    b602:	bd08      	pop	{r3, pc}
    b604:	20000980 	.word	0x20000980
    b608:	0000abf5 	.word	0x0000abf5

0000b60c <SERCOM3_0_Handler>:
{
    b60c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    b60e:	4b02      	ldr	r3, [pc, #8]	; (b618 <SERCOM3_0_Handler+0xc>)
    b610:	6898      	ldr	r0, [r3, #8]
    b612:	4b02      	ldr	r3, [pc, #8]	; (b61c <SERCOM3_0_Handler+0x10>)
    b614:	4798      	blx	r3
    b616:	bd08      	pop	{r3, pc}
    b618:	20000980 	.word	0x20000980
    b61c:	0000b187 	.word	0x0000b187

0000b620 <SERCOM3_1_Handler>:
{
    b620:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    b622:	4b02      	ldr	r3, [pc, #8]	; (b62c <SERCOM3_1_Handler+0xc>)
    b624:	6898      	ldr	r0, [r3, #8]
    b626:	4b02      	ldr	r3, [pc, #8]	; (b630 <SERCOM3_1_Handler+0x10>)
    b628:	4798      	blx	r3
    b62a:	bd08      	pop	{r3, pc}
    b62c:	20000980 	.word	0x20000980
    b630:	0000b187 	.word	0x0000b187

0000b634 <SERCOM3_2_Handler>:
{
    b634:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    b636:	4b02      	ldr	r3, [pc, #8]	; (b640 <SERCOM3_2_Handler+0xc>)
    b638:	6898      	ldr	r0, [r3, #8]
    b63a:	4b02      	ldr	r3, [pc, #8]	; (b644 <SERCOM3_2_Handler+0x10>)
    b63c:	4798      	blx	r3
    b63e:	bd08      	pop	{r3, pc}
    b640:	20000980 	.word	0x20000980
    b644:	0000b187 	.word	0x0000b187

0000b648 <SERCOM3_3_Handler>:
{
    b648:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    b64a:	4b02      	ldr	r3, [pc, #8]	; (b654 <SERCOM3_3_Handler+0xc>)
    b64c:	6898      	ldr	r0, [r3, #8]
    b64e:	4b02      	ldr	r3, [pc, #8]	; (b658 <SERCOM3_3_Handler+0x10>)
    b650:	4798      	blx	r3
    b652:	bd08      	pop	{r3, pc}
    b654:	20000980 	.word	0x20000980
    b658:	0000b187 	.word	0x0000b187

0000b65c <SERCOM4_0_Handler>:
{
    b65c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    b65e:	4b02      	ldr	r3, [pc, #8]	; (b668 <SERCOM4_0_Handler+0xc>)
    b660:	68d8      	ldr	r0, [r3, #12]
    b662:	4b02      	ldr	r3, [pc, #8]	; (b66c <SERCOM4_0_Handler+0x10>)
    b664:	4798      	blx	r3
    b666:	bd08      	pop	{r3, pc}
    b668:	20000980 	.word	0x20000980
    b66c:	0000abf5 	.word	0x0000abf5

0000b670 <SERCOM4_1_Handler>:
{
    b670:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    b672:	4b02      	ldr	r3, [pc, #8]	; (b67c <SERCOM4_1_Handler+0xc>)
    b674:	68d8      	ldr	r0, [r3, #12]
    b676:	4b02      	ldr	r3, [pc, #8]	; (b680 <SERCOM4_1_Handler+0x10>)
    b678:	4798      	blx	r3
    b67a:	bd08      	pop	{r3, pc}
    b67c:	20000980 	.word	0x20000980
    b680:	0000abf5 	.word	0x0000abf5

0000b684 <SERCOM4_2_Handler>:
{
    b684:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    b686:	4b02      	ldr	r3, [pc, #8]	; (b690 <SERCOM4_2_Handler+0xc>)
    b688:	68d8      	ldr	r0, [r3, #12]
    b68a:	4b02      	ldr	r3, [pc, #8]	; (b694 <SERCOM4_2_Handler+0x10>)
    b68c:	4798      	blx	r3
    b68e:	bd08      	pop	{r3, pc}
    b690:	20000980 	.word	0x20000980
    b694:	0000abf5 	.word	0x0000abf5

0000b698 <SERCOM4_3_Handler>:
{
    b698:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    b69a:	4b02      	ldr	r3, [pc, #8]	; (b6a4 <SERCOM4_3_Handler+0xc>)
    b69c:	68d8      	ldr	r0, [r3, #12]
    b69e:	4b02      	ldr	r3, [pc, #8]	; (b6a8 <SERCOM4_3_Handler+0x10>)
    b6a0:	4798      	blx	r3
    b6a2:	bd08      	pop	{r3, pc}
    b6a4:	20000980 	.word	0x20000980
    b6a8:	0000abf5 	.word	0x0000abf5

0000b6ac <SERCOM5_0_Handler>:
{
    b6ac:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    b6ae:	4b02      	ldr	r3, [pc, #8]	; (b6b8 <SERCOM5_0_Handler+0xc>)
    b6b0:	6918      	ldr	r0, [r3, #16]
    b6b2:	4b02      	ldr	r3, [pc, #8]	; (b6bc <SERCOM5_0_Handler+0x10>)
    b6b4:	4798      	blx	r3
    b6b6:	bd08      	pop	{r3, pc}
    b6b8:	20000980 	.word	0x20000980
    b6bc:	0000adf9 	.word	0x0000adf9

0000b6c0 <SERCOM5_1_Handler>:
{
    b6c0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    b6c2:	4b02      	ldr	r3, [pc, #8]	; (b6cc <SERCOM5_1_Handler+0xc>)
    b6c4:	6918      	ldr	r0, [r3, #16]
    b6c6:	4b02      	ldr	r3, [pc, #8]	; (b6d0 <SERCOM5_1_Handler+0x10>)
    b6c8:	4798      	blx	r3
    b6ca:	bd08      	pop	{r3, pc}
    b6cc:	20000980 	.word	0x20000980
    b6d0:	0000adf9 	.word	0x0000adf9

0000b6d4 <SERCOM5_2_Handler>:
{
    b6d4:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    b6d6:	4b02      	ldr	r3, [pc, #8]	; (b6e0 <SERCOM5_2_Handler+0xc>)
    b6d8:	6918      	ldr	r0, [r3, #16]
    b6da:	4b02      	ldr	r3, [pc, #8]	; (b6e4 <SERCOM5_2_Handler+0x10>)
    b6dc:	4798      	blx	r3
    b6de:	bd08      	pop	{r3, pc}
    b6e0:	20000980 	.word	0x20000980
    b6e4:	0000adf9 	.word	0x0000adf9

0000b6e8 <SERCOM5_3_Handler>:
{
    b6e8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    b6ea:	4b02      	ldr	r3, [pc, #8]	; (b6f4 <SERCOM5_3_Handler+0xc>)
    b6ec:	6918      	ldr	r0, [r3, #16]
    b6ee:	4b02      	ldr	r3, [pc, #8]	; (b6f8 <SERCOM5_3_Handler+0x10>)
    b6f0:	4798      	blx	r3
    b6f2:	bd08      	pop	{r3, pc}
    b6f4:	20000980 	.word	0x20000980
    b6f8:	0000adf9 	.word	0x0000adf9

0000b6fc <SERCOM6_0_Handler>:
{
    b6fc:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    b6fe:	4b02      	ldr	r3, [pc, #8]	; (b708 <SERCOM6_0_Handler+0xc>)
    b700:	6958      	ldr	r0, [r3, #20]
    b702:	4b02      	ldr	r3, [pc, #8]	; (b70c <SERCOM6_0_Handler+0x10>)
    b704:	4798      	blx	r3
    b706:	bd08      	pop	{r3, pc}
    b708:	20000980 	.word	0x20000980
    b70c:	0000abf5 	.word	0x0000abf5

0000b710 <SERCOM6_1_Handler>:
{
    b710:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    b712:	4b02      	ldr	r3, [pc, #8]	; (b71c <SERCOM6_1_Handler+0xc>)
    b714:	6958      	ldr	r0, [r3, #20]
    b716:	4b02      	ldr	r3, [pc, #8]	; (b720 <SERCOM6_1_Handler+0x10>)
    b718:	4798      	blx	r3
    b71a:	bd08      	pop	{r3, pc}
    b71c:	20000980 	.word	0x20000980
    b720:	0000abf5 	.word	0x0000abf5

0000b724 <SERCOM6_2_Handler>:
{
    b724:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    b726:	4b02      	ldr	r3, [pc, #8]	; (b730 <SERCOM6_2_Handler+0xc>)
    b728:	6958      	ldr	r0, [r3, #20]
    b72a:	4b02      	ldr	r3, [pc, #8]	; (b734 <SERCOM6_2_Handler+0x10>)
    b72c:	4798      	blx	r3
    b72e:	bd08      	pop	{r3, pc}
    b730:	20000980 	.word	0x20000980
    b734:	0000abf5 	.word	0x0000abf5

0000b738 <SERCOM6_3_Handler>:
{
    b738:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    b73a:	4b02      	ldr	r3, [pc, #8]	; (b744 <SERCOM6_3_Handler+0xc>)
    b73c:	6958      	ldr	r0, [r3, #20]
    b73e:	4b02      	ldr	r3, [pc, #8]	; (b748 <SERCOM6_3_Handler+0x10>)
    b740:	4798      	blx	r3
    b742:	bd08      	pop	{r3, pc}
    b744:	20000980 	.word	0x20000980
    b748:	0000abf5 	.word	0x0000abf5

0000b74c <_spi_m_sync_init>:
{
    b74c:	b538      	push	{r3, r4, r5, lr}
    b74e:	4605      	mov	r5, r0
    b750:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    b752:	4608      	mov	r0, r1
    b754:	4b55      	ldr	r3, [pc, #340]	; (b8ac <_spi_m_sync_init+0x160>)
    b756:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    b758:	2803      	cmp	r0, #3
    b75a:	d006      	beq.n	b76a <_spi_m_sync_init+0x1e>
    b75c:	2807      	cmp	r0, #7
    b75e:	bf08      	it	eq
    b760:	2201      	moveq	r2, #1
    b762:	d003      	beq.n	b76c <_spi_m_sync_init+0x20>
		return ERR_INVALID_ARG;
    b764:	f06f 000c 	mvn.w	r0, #12
}
    b768:	bd38      	pop	{r3, r4, r5, pc}
		if (sercomspi_regs[i].n == n) {
    b76a:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    b76c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b76e:	f013 0f01 	tst.w	r3, #1
    b772:	d122      	bne.n	b7ba <_spi_m_sync_init+0x6e>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    b774:	4b4e      	ldr	r3, [pc, #312]	; (b8b0 <_spi_m_sync_init+0x164>)
    b776:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b77a:	4413      	add	r3, r2
    b77c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    b780:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b784:	69e3      	ldr	r3, [r4, #28]
    b786:	f013 0f03 	tst.w	r3, #3
    b78a:	d1fb      	bne.n	b784 <_spi_m_sync_init+0x38>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    b78c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    b78e:	f013 0f02 	tst.w	r3, #2
    b792:	d00b      	beq.n	b7ac <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b794:	6823      	ldr	r3, [r4, #0]
    b796:	f023 0302 	bic.w	r3, r3, #2
    b79a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b79c:	69e3      	ldr	r3, [r4, #28]
    b79e:	f013 0f03 	tst.w	r3, #3
    b7a2:	d1fb      	bne.n	b79c <_spi_m_sync_init+0x50>
    b7a4:	69e3      	ldr	r3, [r4, #28]
    b7a6:	f013 0f02 	tst.w	r3, #2
    b7aa:	d1fb      	bne.n	b7a4 <_spi_m_sync_init+0x58>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    b7ac:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    b7b0:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b7b2:	69e3      	ldr	r3, [r4, #28]
    b7b4:	f013 0f03 	tst.w	r3, #3
    b7b8:	d1fb      	bne.n	b7b2 <_spi_m_sync_init+0x66>
    b7ba:	69e3      	ldr	r3, [r4, #28]
    b7bc:	f013 0f01 	tst.w	r3, #1
    b7c0:	d1fb      	bne.n	b7ba <_spi_m_sync_init+0x6e>
	dev->prvt = hw;
    b7c2:	602c      	str	r4, [r5, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    b7c4:	4b3a      	ldr	r3, [pc, #232]	; (b8b0 <_spi_m_sync_init+0x164>)
    b7c6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b7ca:	4413      	add	r3, r2
    b7cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    b7d0:	f003 011c 	and.w	r1, r3, #28
    b7d4:	2908      	cmp	r1, #8
    b7d6:	d03e      	beq.n	b856 <_spi_m_sync_init+0x10a>
	hri_sercomspi_write_CTRLA_reg(
    b7d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    b7dc:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    b7e0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b7e2:	69e3      	ldr	r3, [r4, #28]
    b7e4:	f013 0f03 	tst.w	r3, #3
    b7e8:	d1fb      	bne.n	b7e2 <_spi_m_sync_init+0x96>
	    (regs->ctrlb
    b7ea:	4b31      	ldr	r3, [pc, #196]	; (b8b0 <_spi_m_sync_init+0x164>)
    b7ec:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b7f0:	4413      	add	r3, r2
    b7f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    b7f6:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    b7fa:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    b7fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    b802:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b804:	69e3      	ldr	r3, [r4, #28]
    b806:	f013 0f17 	tst.w	r3, #23
    b80a:	d1fb      	bne.n	b804 <_spi_m_sync_init+0xb8>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    b80c:	4b28      	ldr	r3, [pc, #160]	; (b8b0 <_spi_m_sync_init+0x164>)
    b80e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b812:	4413      	add	r3, r2
    b814:	f893 10bc 	ldrb.w	r1, [r3, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    b818:	7321      	strb	r1, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    b81a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    b81e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    b822:	4b23      	ldr	r3, [pc, #140]	; (b8b0 <_spi_m_sync_init+0x164>)
    b824:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b828:	4413      	add	r3, r2
    b82a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    b82e:	f003 0307 	and.w	r3, r3, #7
    b832:	2b00      	cmp	r3, #0
    b834:	bf0c      	ite	eq
    b836:	2301      	moveq	r3, #1
    b838:	2302      	movne	r3, #2
    b83a:	712b      	strb	r3, [r5, #4]
	dev->dummy_byte = regs->dummy_byte;
    b83c:	4b1c      	ldr	r3, [pc, #112]	; (b8b0 <_spi_m_sync_init+0x164>)
    b83e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b842:	441a      	add	r2, r3
    b844:	f892 30be 	ldrb.w	r3, [r2, #190]	; 0xbe
    b848:	f892 20bf 	ldrb.w	r2, [r2, #191]	; 0xbf
    b84c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    b850:	80eb      	strh	r3, [r5, #6]
	return ERR_NONE;
    b852:	2000      	movs	r0, #0
    b854:	bd38      	pop	{r3, r4, r5, pc}
	hri_sercomspi_write_CTRLA_reg(
    b856:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    b85a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    b85e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b860:	69e3      	ldr	r3, [r4, #28]
    b862:	f013 0f03 	tst.w	r3, #3
    b866:	d1fb      	bne.n	b860 <_spi_m_sync_init+0x114>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    b868:	4b11      	ldr	r3, [pc, #68]	; (b8b0 <_spi_m_sync_init+0x164>)
    b86a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b86e:	4413      	add	r3, r2
    b870:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    b874:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    b878:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    b87c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b880:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    b884:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b886:	69e3      	ldr	r3, [r4, #28]
    b888:	f013 0f17 	tst.w	r3, #23
    b88c:	d1fb      	bne.n	b886 <_spi_m_sync_init+0x13a>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    b88e:	4b08      	ldr	r3, [pc, #32]	; (b8b0 <_spi_m_sync_init+0x164>)
    b890:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b894:	4413      	add	r3, r2
    b896:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
	((Sercom *)hw)->SPI.ADDR.reg = data;
    b89a:	6261      	str	r1, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    b89c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    b8a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    b8a4:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    b8a6:	2b00      	cmp	r3, #0
    b8a8:	d1fc      	bne.n	b8a4 <_spi_m_sync_init+0x158>
    b8aa:	e7ba      	b.n	b822 <_spi_m_sync_init+0xd6>
    b8ac:	0000abb1 	.word	0x0000abb1
    b8b0:	00011948 	.word	0x00011948

0000b8b4 <_spi_m_async_init>:
{
    b8b4:	b538      	push	{r3, r4, r5, lr}
    b8b6:	4604      	mov	r4, r0
    b8b8:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    b8ba:	4b15      	ldr	r3, [pc, #84]	; (b910 <_spi_m_async_init+0x5c>)
    b8bc:	4798      	blx	r3
	if (rc < 0) {
    b8be:	2800      	cmp	r0, #0
    b8c0:	db24      	blt.n	b90c <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    b8c2:	4621      	mov	r1, r4
    b8c4:	4628      	mov	r0, r5
    b8c6:	4b13      	ldr	r3, [pc, #76]	; (b914 <_spi_m_async_init+0x60>)
    b8c8:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    b8ca:	2300      	movs	r3, #0
    b8cc:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    b8ce:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    b8d0:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    b8d2:	4628      	mov	r0, r5
    b8d4:	4b10      	ldr	r3, [pc, #64]	; (b918 <_spi_m_async_init+0x64>)
    b8d6:	4798      	blx	r3
    b8d8:	1d01      	adds	r1, r0, #4
    b8da:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b8dc:	2401      	movs	r4, #1
    b8de:	f000 021f 	and.w	r2, r0, #31
    b8e2:	fa04 f202 	lsl.w	r2, r4, r2
    b8e6:	0943      	lsrs	r3, r0, #5
    b8e8:	009b      	lsls	r3, r3, #2
    b8ea:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    b8ee:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    b8f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    b8f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b8fa:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b8fe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    b902:	3001      	adds	r0, #1
    b904:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    b906:	4281      	cmp	r1, r0
    b908:	d1e9      	bne.n	b8de <_spi_m_async_init+0x2a>
	return ERR_NONE;
    b90a:	2000      	movs	r0, #0
}
    b90c:	bd38      	pop	{r3, r4, r5, pc}
    b90e:	bf00      	nop
    b910:	0000b74d 	.word	0x0000b74d
    b914:	0000ac65 	.word	0x0000ac65
    b918:	0000aff9 	.word	0x0000aff9

0000b91c <_spi_m_async_enable>:
{
    b91c:	b508      	push	{r3, lr}
	return _spi_async_enable(dev->prvt);
    b91e:	6800      	ldr	r0, [r0, #0]
    b920:	4b01      	ldr	r3, [pc, #4]	; (b928 <_spi_m_async_enable+0xc>)
    b922:	4798      	blx	r3
}
    b924:	bd08      	pop	{r3, pc}
    b926:	bf00      	nop
    b928:	0000b115 	.word	0x0000b115

0000b92c <_spi_m_async_set_mode>:
{
    b92c:	b508      	push	{r3, lr}
	return _spi_set_mode(dev->prvt, mode);
    b92e:	6800      	ldr	r0, [r0, #0]
    b930:	4b01      	ldr	r3, [pc, #4]	; (b938 <_spi_m_async_set_mode+0xc>)
    b932:	4798      	blx	r3
}
    b934:	bd08      	pop	{r3, pc}
    b936:	bf00      	nop
    b938:	0000b155 	.word	0x0000b155

0000b93c <_spi_m_async_set_baudrate>:
	return _spi_set_baudrate(dev->prvt, baud_val);
    b93c:	6803      	ldr	r3, [r0, #0]
    b93e:	69da      	ldr	r2, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b940:	f012 0f01 	tst.w	r2, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
    b944:	bf03      	ittte	eq
    b946:	b2c9      	uxtbeq	r1, r1
	((Sercom *)hw)->SPI.BAUD.reg = data;
    b948:	7319      	strbeq	r1, [r3, #12]
	return ERR_NONE;
    b94a:	2000      	moveq	r0, #0
		return ERR_BUSY;
    b94c:	f06f 0003 	mvnne.w	r0, #3
}
    b950:	4770      	bx	lr

0000b952 <_spi_m_async_enable_tx>:
	void *hw = dev->prvt;
    b952:	6803      	ldr	r3, [r0, #0]
	if (state) {
    b954:	b919      	cbnz	r1, b95e <_spi_m_async_enable_tx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    b956:	2201      	movs	r2, #1
    b958:	751a      	strb	r2, [r3, #20]
}
    b95a:	2000      	movs	r0, #0
    b95c:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    b95e:	2201      	movs	r2, #1
    b960:	759a      	strb	r2, [r3, #22]
    b962:	e7fa      	b.n	b95a <_spi_m_async_enable_tx+0x8>

0000b964 <_spi_m_async_enable_rx>:
	void *hw = dev->prvt;
    b964:	6803      	ldr	r3, [r0, #0]
	if (state) {
    b966:	b919      	cbnz	r1, b970 <_spi_m_async_enable_rx+0xc>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    b968:	2204      	movs	r2, #4
    b96a:	751a      	strb	r2, [r3, #20]
}
    b96c:	2000      	movs	r0, #0
    b96e:	4770      	bx	lr
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    b970:	2204      	movs	r2, #4
    b972:	759a      	strb	r2, [r3, #22]
    b974:	e7fa      	b.n	b96c <_spi_m_async_enable_rx+0x8>

0000b976 <_spi_m_async_enable_tx_complete>:
	if (state) {
    b976:	b921      	cbnz	r1, b982 <_spi_m_async_enable_tx_complete+0xc>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    b978:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    b97a:	2202      	movs	r2, #2
    b97c:	751a      	strb	r2, [r3, #20]
}
    b97e:	2000      	movs	r0, #0
    b980:	4770      	bx	lr
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    b982:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    b984:	2202      	movs	r2, #2
    b986:	759a      	strb	r2, [r3, #22]
    b988:	e7f9      	b.n	b97e <_spi_m_async_enable_tx_complete+0x8>

0000b98a <_spi_m_async_write_one>:
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    b98a:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    b98c:	6299      	str	r1, [r3, #40]	; 0x28
}
    b98e:	2000      	movs	r0, #0
    b990:	4770      	bx	lr

0000b992 <_spi_m_async_read_one>:
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    b992:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    b994:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    b996:	b280      	uxth	r0, r0
    b998:	4770      	bx	lr

0000b99a <_spi_m_async_register_callback>:
	p_ls[cb_type] = (func_t)func;
    b99a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    b99e:	608a      	str	r2, [r1, #8]
}
    b9a0:	2000      	movs	r0, #0
    b9a2:	4770      	bx	lr

0000b9a4 <_spi_m_async_set_irq_state>:
	if (SPI_DEV_CB_ERROR == type) {
    b9a4:	2903      	cmp	r1, #3
    b9a6:	d000      	beq.n	b9aa <_spi_m_async_set_irq_state+0x6>
    b9a8:	4770      	bx	lr
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
    b9aa:	6803      	ldr	r3, [r0, #0]
	if (value == 0x0) {
    b9ac:	b112      	cbz	r2, b9b4 <_spi_m_async_set_irq_state+0x10>
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
    b9ae:	2280      	movs	r2, #128	; 0x80
    b9b0:	759a      	strb	r2, [r3, #22]
}
    b9b2:	e7f9      	b.n	b9a8 <_spi_m_async_set_irq_state+0x4>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
    b9b4:	2280      	movs	r2, #128	; 0x80
    b9b6:	751a      	strb	r2, [r3, #20]
    b9b8:	4770      	bx	lr
	...

0000b9bc <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    b9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9c0:	4605      	mov	r5, r0
    b9c2:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    b9c4:	4608      	mov	r0, r1
    b9c6:	4b42      	ldr	r3, [pc, #264]	; (bad0 <_spi_m_dma_init+0x114>)
    b9c8:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    b9ca:	2803      	cmp	r0, #3
    b9cc:	d007      	beq.n	b9de <_spi_m_dma_init+0x22>
    b9ce:	2807      	cmp	r0, #7
    b9d0:	bf08      	it	eq
    b9d2:	2201      	moveq	r2, #1
    b9d4:	d004      	beq.n	b9e0 <_spi_m_dma_init+0x24>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    b9d6:	f06f 000c 	mvn.w	r0, #12
	dev->resource->back                 = dev;
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
	dev->resource->dma_cb.error         = _spi_dma_error_occured;

	return ERR_NONE;
}
    b9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sercomspi_regs[i].n == n) {
    b9de:	2200      	movs	r2, #0
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    b9e0:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    b9e2:	f013 0f01 	tst.w	r3, #1
    b9e6:	d122      	bne.n	ba2e <_spi_m_dma_init+0x72>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    b9e8:	4b3a      	ldr	r3, [pc, #232]	; (bad4 <_spi_m_dma_init+0x118>)
    b9ea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b9ee:	4413      	add	r3, r2
    b9f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    b9f4:	f003 011c 	and.w	r1, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    b9f8:	69e3      	ldr	r3, [r4, #28]
    b9fa:	f013 0f03 	tst.w	r3, #3
    b9fe:	d1fb      	bne.n	b9f8 <_spi_m_dma_init+0x3c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    ba00:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    ba02:	f013 0f02 	tst.w	r3, #2
    ba06:	d00b      	beq.n	ba20 <_spi_m_dma_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    ba08:	6823      	ldr	r3, [r4, #0]
    ba0a:	f023 0302 	bic.w	r3, r3, #2
    ba0e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    ba10:	69e3      	ldr	r3, [r4, #28]
    ba12:	f013 0f03 	tst.w	r3, #3
    ba16:	d1fb      	bne.n	ba10 <_spi_m_dma_init+0x54>
    ba18:	69e3      	ldr	r3, [r4, #28]
    ba1a:	f013 0f02 	tst.w	r3, #2
    ba1e:	d1fb      	bne.n	ba18 <_spi_m_dma_init+0x5c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    ba20:	f041 0101 	orr.w	r1, r1, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    ba24:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    ba26:	69e3      	ldr	r3, [r4, #28]
    ba28:	f013 0f03 	tst.w	r3, #3
    ba2c:	d1fb      	bne.n	ba26 <_spi_m_dma_init+0x6a>
    ba2e:	69e3      	ldr	r3, [r4, #28]
    ba30:	f013 0f01 	tst.w	r3, #1
    ba34:	d1fb      	bne.n	ba2e <_spi_m_dma_init+0x72>
	dev->prvt = hw;
    ba36:	602c      	str	r4, [r5, #0]
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    ba38:	4b26      	ldr	r3, [pc, #152]	; (bad4 <_spi_m_dma_init+0x118>)
    ba3a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    ba3e:	4413      	add	r3, r2
    ba40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	hri_sercomspi_write_CTRLA_reg(
    ba44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    ba48:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    ba4c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    ba4e:	69e3      	ldr	r3, [r4, #28]
    ba50:	f013 0f03 	tst.w	r3, #3
    ba54:	d1fb      	bne.n	ba4e <_spi_m_dma_init+0x92>
	    (regs->ctrlb
    ba56:	4b1f      	ldr	r3, [pc, #124]	; (bad4 <_spi_m_dma_init+0x118>)
    ba58:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    ba5c:	4413      	add	r3, r2
    ba5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	        | (SERCOM_SPI_CTRLB_RXEN));
    ba62:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    ba66:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    ba6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    ba6e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    ba70:	69e3      	ldr	r3, [r4, #28]
    ba72:	f013 0f17 	tst.w	r3, #23
    ba76:	d1fb      	bne.n	ba70 <_spi_m_dma_init+0xb4>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    ba78:	4b16      	ldr	r3, [pc, #88]	; (bad4 <_spi_m_dma_init+0x118>)
    ba7a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    ba7e:	441a      	add	r2, r3
    ba80:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
	((Sercom *)hw)->SPI.BAUD.reg = data;
    ba84:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    ba86:	f892 30bd 	ldrb.w	r3, [r2, #189]	; 0xbd
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    ba8a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    ba8e:	f105 0818 	add.w	r8, r5, #24
    ba92:	4620      	mov	r0, r4
    ba94:	4b10      	ldr	r3, [pc, #64]	; (bad8 <_spi_m_dma_init+0x11c>)
    ba96:	4798      	blx	r3
    ba98:	4601      	mov	r1, r0
    ba9a:	4640      	mov	r0, r8
    ba9c:	4f0f      	ldr	r7, [pc, #60]	; (badc <_spi_m_dma_init+0x120>)
    ba9e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    baa0:	69ab      	ldr	r3, [r5, #24]
    baa2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    baa4:	69ab      	ldr	r3, [r5, #24]
    baa6:	4a0e      	ldr	r2, [pc, #56]	; (bae0 <_spi_m_dma_init+0x124>)
    baa8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    baaa:	69ab      	ldr	r3, [r5, #24]
    baac:	4e0d      	ldr	r6, [pc, #52]	; (bae4 <_spi_m_dma_init+0x128>)
    baae:	605e      	str	r6, [r3, #4]
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    bab0:	4620      	mov	r0, r4
    bab2:	4b0d      	ldr	r3, [pc, #52]	; (bae8 <_spi_m_dma_init+0x12c>)
    bab4:	4798      	blx	r3
    bab6:	4601      	mov	r1, r0
    bab8:	4640      	mov	r0, r8
    baba:	47b8      	blx	r7
	dev->resource->back                 = dev;
    babc:	69ab      	ldr	r3, [r5, #24]
    babe:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    bac0:	69ab      	ldr	r3, [r5, #24]
    bac2:	4a0a      	ldr	r2, [pc, #40]	; (baec <_spi_m_dma_init+0x130>)
    bac4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    bac6:	69ab      	ldr	r3, [r5, #24]
    bac8:	605e      	str	r6, [r3, #4]
	return ERR_NONE;
    baca:	2000      	movs	r0, #0
    bacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bad0:	0000abb1 	.word	0x0000abb1
    bad4:	00011948 	.word	0x00011948
    bad8:	0000b1e9 	.word	0x0000b1e9
    badc:	0000a689 	.word	0x0000a689
    bae0:	0000b1fd 	.word	0x0000b1fd
    bae4:	0000b215 	.word	0x0000b215
    bae8:	0000b1d5 	.word	0x0000b1d5
    baec:	0000b209 	.word	0x0000b209

0000baf0 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
    baf0:	b508      	push	{r3, lr}
	ASSERT(dev && dev->prvt);

	return _spi_sync_enable(dev->prvt);
    baf2:	6800      	ldr	r0, [r0, #0]
    baf4:	4b01      	ldr	r3, [pc, #4]	; (bafc <_spi_m_dma_enable+0xc>)
    baf6:	4798      	blx	r3
}
    baf8:	bd08      	pop	{r3, pc}
    bafa:	bf00      	nop
    bafc:	0000b0f1 	.word	0x0000b0f1

0000bb00 <_spi_m_dma_register_callback>:

	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
    bb00:	b570      	push	{r4, r5, r6, lr}
    bb02:	4605      	mov	r5, r0
    bb04:	4614      	mov	r4, r2
	switch (type) {
    bb06:	2901      	cmp	r1, #1
    bb08:	d00e      	beq.n	bb28 <_spi_m_dma_register_callback+0x28>
    bb0a:	b111      	cbz	r1, bb12 <_spi_m_dma_register_callback+0x12>
    bb0c:	2902      	cmp	r1, #2
    bb0e:	d016      	beq.n	bb3e <_spi_m_dma_register_callback+0x3e>
    bb10:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
    bb12:	606a      	str	r2, [r5, #4]
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    bb14:	6800      	ldr	r0, [r0, #0]
    bb16:	4b13      	ldr	r3, [pc, #76]	; (bb64 <_spi_m_dma_register_callback+0x64>)
    bb18:	4798      	blx	r3
    bb1a:	1c22      	adds	r2, r4, #0
    bb1c:	bf18      	it	ne
    bb1e:	2201      	movne	r2, #1
    bb20:	2100      	movs	r1, #0
    bb22:	4b11      	ldr	r3, [pc, #68]	; (bb68 <_spi_m_dma_register_callback+0x68>)
    bb24:	4798      	blx	r3
		break;
    bb26:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
    bb28:	60aa      	str	r2, [r5, #8]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
    bb2a:	6800      	ldr	r0, [r0, #0]
    bb2c:	4b0f      	ldr	r3, [pc, #60]	; (bb6c <_spi_m_dma_register_callback+0x6c>)
    bb2e:	4798      	blx	r3
    bb30:	1c22      	adds	r2, r4, #0
    bb32:	bf18      	it	ne
    bb34:	2201      	movne	r2, #1
    bb36:	2100      	movs	r1, #0
    bb38:	4b0b      	ldr	r3, [pc, #44]	; (bb68 <_spi_m_dma_register_callback+0x68>)
    bb3a:	4798      	blx	r3
		break;
    bb3c:	bd70      	pop	{r4, r5, r6, pc}
	case SPI_DEV_CB_DMA_ERROR:
		dev->callbacks.error = func;
    bb3e:	60ea      	str	r2, [r5, #12]
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    bb40:	6800      	ldr	r0, [r0, #0]
    bb42:	4b0a      	ldr	r3, [pc, #40]	; (bb6c <_spi_m_dma_register_callback+0x6c>)
    bb44:	4798      	blx	r3
    bb46:	3400      	adds	r4, #0
    bb48:	bf18      	it	ne
    bb4a:	2401      	movne	r4, #1
    bb4c:	4622      	mov	r2, r4
    bb4e:	2101      	movs	r1, #1
    bb50:	4e05      	ldr	r6, [pc, #20]	; (bb68 <_spi_m_dma_register_callback+0x68>)
    bb52:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
    bb54:	6828      	ldr	r0, [r5, #0]
    bb56:	4b03      	ldr	r3, [pc, #12]	; (bb64 <_spi_m_dma_register_callback+0x64>)
    bb58:	4798      	blx	r3
    bb5a:	4622      	mov	r2, r4
    bb5c:	2101      	movs	r1, #1
    bb5e:	47b0      	blx	r6
    bb60:	bd70      	pop	{r4, r5, r6, pc}
    bb62:	bf00      	nop
    bb64:	0000b1d5 	.word	0x0000b1d5
    bb68:	0000a561 	.word	0x0000a561
    bb6c:	0000b1e9 	.word	0x0000b1e9

0000bb70 <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    bb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb74:	4607      	mov	r7, r0
    bb76:	468a      	mov	sl, r1
    bb78:	4690      	mov	r8, r2
    bb7a:	4699      	mov	r9, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    bb7c:	6804      	ldr	r4, [r0, #0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    bb7e:	4620      	mov	r0, r4
    bb80:	4b39      	ldr	r3, [pc, #228]	; (bc68 <_spi_m_dma_transfer+0xf8>)
    bb82:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    bb84:	2803      	cmp	r0, #3
    bb86:	d048      	beq.n	bc1a <_spi_m_dma_transfer+0xaa>
    bb88:	2807      	cmp	r0, #7
    bb8a:	bf08      	it	eq
    bb8c:	2201      	moveq	r2, #1
    bb8e:	d045      	beq.n	bc1c <_spi_m_dma_transfer+0xac>
	return NULL;
    bb90:	f04f 0b00 	mov.w	fp, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    bb94:	4620      	mov	r0, r4
    bb96:	4b35      	ldr	r3, [pc, #212]	; (bc6c <_spi_m_dma_transfer+0xfc>)
    bb98:	4798      	blx	r3
    bb9a:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    bb9c:	4620      	mov	r0, r4
    bb9e:	4b34      	ldr	r3, [pc, #208]	; (bc70 <_spi_m_dma_transfer+0x100>)
    bba0:	4798      	blx	r3
    bba2:	4605      	mov	r5, r0

	if (rxbuf) {
    bba4:	f1b8 0f00 	cmp.w	r8, #0
    bba8:	d03d      	beq.n	bc26 <_spi_m_dma_transfer+0xb6>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    bbaa:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    bbac:	f013 0f04 	tst.w	r3, #4
    bbb0:	d107      	bne.n	bbc2 <_spi_m_dma_transfer+0x52>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    bbb2:	6863      	ldr	r3, [r4, #4]
    bbb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bbb8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    bbba:	69e3      	ldr	r3, [r4, #28]
    bbbc:	f013 0f17 	tst.w	r3, #23
    bbc0:	d1fb      	bne.n	bbba <_spi_m_dma_transfer+0x4a>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    bbc2:	6839      	ldr	r1, [r7, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    bbc4:	3128      	adds	r1, #40	; 0x28
    bbc6:	4630      	mov	r0, r6
    bbc8:	4b2a      	ldr	r3, [pc, #168]	; (bc74 <_spi_m_dma_transfer+0x104>)
    bbca:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    bbcc:	4641      	mov	r1, r8
    bbce:	4630      	mov	r0, r6
    bbd0:	4b29      	ldr	r3, [pc, #164]	; (bc78 <_spi_m_dma_transfer+0x108>)
    bbd2:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    bbd4:	4649      	mov	r1, r9
    bbd6:	4630      	mov	r0, r6
    bbd8:	4b28      	ldr	r3, [pc, #160]	; (bc7c <_spi_m_dma_transfer+0x10c>)
    bbda:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    bbdc:	2100      	movs	r1, #0
    bbde:	4630      	mov	r0, r6
    bbe0:	4b27      	ldr	r3, [pc, #156]	; (bc80 <_spi_m_dma_transfer+0x110>)
    bbe2:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    bbe4:	f1ba 0f00 	cmp.w	sl, #0
    bbe8:	d02a      	beq.n	bc40 <_spi_m_dma_transfer+0xd0>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    bbea:	4651      	mov	r1, sl
    bbec:	4628      	mov	r0, r5
    bbee:	4b21      	ldr	r3, [pc, #132]	; (bc74 <_spi_m_dma_transfer+0x104>)
    bbf0:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    bbf2:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    bbf4:	3128      	adds	r1, #40	; 0x28
    bbf6:	4628      	mov	r0, r5
    bbf8:	4b1f      	ldr	r3, [pc, #124]	; (bc78 <_spi_m_dma_transfer+0x108>)
    bbfa:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    bbfc:	2101      	movs	r1, #1
    bbfe:	4628      	mov	r0, r5
    bc00:	4b20      	ldr	r3, [pc, #128]	; (bc84 <_spi_m_dma_transfer+0x114>)
    bc02:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    bc04:	4649      	mov	r1, r9
    bc06:	4628      	mov	r0, r5
    bc08:	4b1c      	ldr	r3, [pc, #112]	; (bc7c <_spi_m_dma_transfer+0x10c>)
    bc0a:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    bc0c:	2100      	movs	r1, #0
    bc0e:	4628      	mov	r0, r5
    bc10:	4b1b      	ldr	r3, [pc, #108]	; (bc80 <_spi_m_dma_transfer+0x110>)
    bc12:	4798      	blx	r3

	return ERR_NONE;
}
    bc14:	2000      	movs	r0, #0
    bc16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    bc1a:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    bc1c:	4b1a      	ldr	r3, [pc, #104]	; (bc88 <_spi_m_dma_transfer+0x118>)
    bc1e:	eb03 1b02 	add.w	fp, r3, r2, lsl #4
    bc22:	4493      	add	fp, r2
    bc24:	e7b6      	b.n	bb94 <_spi_m_dma_transfer+0x24>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    bc26:	69e3      	ldr	r3, [r4, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    bc28:	f013 0f04 	tst.w	r3, #4
    bc2c:	d1da      	bne.n	bbe4 <_spi_m_dma_transfer+0x74>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    bc2e:	6863      	ldr	r3, [r4, #4]
    bc30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bc34:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    bc36:	69e3      	ldr	r3, [r4, #28]
    bc38:	f013 0f17 	tst.w	r3, #23
    bc3c:	d1fb      	bne.n	bc36 <_spi_m_dma_transfer+0xc6>
    bc3e:	e7d1      	b.n	bbe4 <_spi_m_dma_transfer+0x74>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    bc40:	f10b 010e 	add.w	r1, fp, #14
    bc44:	4628      	mov	r0, r5
    bc46:	4b0b      	ldr	r3, [pc, #44]	; (bc74 <_spi_m_dma_transfer+0x104>)
    bc48:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    bc4a:	6839      	ldr	r1, [r7, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    bc4c:	3128      	adds	r1, #40	; 0x28
    bc4e:	4628      	mov	r0, r5
    bc50:	4b09      	ldr	r3, [pc, #36]	; (bc78 <_spi_m_dma_transfer+0x108>)
    bc52:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    bc54:	2100      	movs	r1, #0
    bc56:	4628      	mov	r0, r5
    bc58:	4b0a      	ldr	r3, [pc, #40]	; (bc84 <_spi_m_dma_transfer+0x114>)
    bc5a:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    bc5c:	4649      	mov	r1, r9
    bc5e:	4628      	mov	r0, r5
    bc60:	4b06      	ldr	r3, [pc, #24]	; (bc7c <_spi_m_dma_transfer+0x10c>)
    bc62:	4798      	blx	r3
    bc64:	e7d2      	b.n	bc0c <_spi_m_dma_transfer+0x9c>
    bc66:	bf00      	nop
    bc68:	0000abb1 	.word	0x0000abb1
    bc6c:	0000b1e9 	.word	0x0000b1e9
    bc70:	0000b1d5 	.word	0x0000b1d5
    bc74:	0000a5c5 	.word	0x0000a5c5
    bc78:	0000a5b5 	.word	0x0000a5b5
    bc7c:	0000a5f1 	.word	0x0000a5f1
    bc80:	0000a649 	.word	0x0000a649
    bc84:	0000a5d5 	.word	0x0000a5d5
    bc88:	000119f8 	.word	0x000119f8

0000bc8c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    bc8c:	4b03      	ldr	r3, [pc, #12]	; (bc9c <_delay_init+0x10>)
    bc8e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    bc92:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    bc94:	2205      	movs	r2, #5
    bc96:	601a      	str	r2, [r3, #0]
    bc98:	4770      	bx	lr
    bc9a:	bf00      	nop
    bc9c:	e000e010 	.word	0xe000e010

0000bca0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    bca0:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    bca2:	b303      	cbz	r3, bce6 <_delay_cycles+0x46>
{
    bca4:	b430      	push	{r4, r5}
    bca6:	1e5d      	subs	r5, r3, #1
    bca8:	b2ed      	uxtb	r5, r5
	while (n--) {
    bcaa:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    bcac:	4a12      	ldr	r2, [pc, #72]	; (bcf8 <_delay_cycles+0x58>)
    bcae:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    bcb2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    bcb4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    bcb6:	6813      	ldr	r3, [r2, #0]
    bcb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bcbc:	d0fb      	beq.n	bcb6 <_delay_cycles+0x16>
	while (n--) {
    bcbe:	3801      	subs	r0, #1
    bcc0:	b2c0      	uxtb	r0, r0
    bcc2:	28ff      	cmp	r0, #255	; 0xff
    bcc4:	d1f5      	bne.n	bcb2 <_delay_cycles+0x12>
    bcc6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    bcca:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    bcce:	3101      	adds	r1, #1
    bcd0:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    bcd2:	4b09      	ldr	r3, [pc, #36]	; (bcf8 <_delay_cycles+0x58>)
    bcd4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    bcd6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    bcd8:	461a      	mov	r2, r3
    bcda:	6813      	ldr	r3, [r2, #0]
    bcdc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bce0:	d0fb      	beq.n	bcda <_delay_cycles+0x3a>
		;
}
    bce2:	bc30      	pop	{r4, r5}
    bce4:	4770      	bx	lr
	SysTick->LOAD = buf;
    bce6:	4b04      	ldr	r3, [pc, #16]	; (bcf8 <_delay_cycles+0x58>)
    bce8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    bcea:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    bcec:	461a      	mov	r2, r3
    bcee:	6813      	ldr	r3, [r2, #0]
    bcf0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    bcf4:	d0fb      	beq.n	bcee <_delay_cycles+0x4e>
    bcf6:	4770      	bx	lr
    bcf8:	e000e010 	.word	0xe000e010

0000bcfc <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    bcfc:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    bcfe:	6813      	ldr	r3, [r2, #0]
    bd00:	f043 0302 	orr.w	r3, r3, #2
    bd04:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bd06:	6913      	ldr	r3, [r2, #16]
    bd08:	f013 0f03 	tst.w	r3, #3
    bd0c:	d1fb      	bne.n	bd06 <_tc_timer_start+0xa>
}
    bd0e:	4770      	bx	lr

0000bd10 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    bd10:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    bd12:	6813      	ldr	r3, [r2, #0]
    bd14:	f023 0302 	bic.w	r3, r3, #2
    bd18:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bd1a:	6913      	ldr	r3, [r2, #16]
    bd1c:	f013 0f03 	tst.w	r3, #3
    bd20:	d1fb      	bne.n	bd1a <_tc_timer_stop+0xa>
}
    bd22:	4770      	bx	lr

0000bd24 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    bd24:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    bd26:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    bd28:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    bd2c:	2a02      	cmp	r2, #2
    bd2e:	d00a      	beq.n	bd46 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    bd30:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    bd32:	f012 0f0c 	tst.w	r2, #12
    bd36:	d10c      	bne.n	bd52 <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    bd38:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    bd3a:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bd3c:	691a      	ldr	r2, [r3, #16]
    bd3e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    bd42:	d1fb      	bne.n	bd3c <_tc_timer_set_period+0x18>
    bd44:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    bd46:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bd48:	691a      	ldr	r2, [r3, #16]
    bd4a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    bd4e:	d1fb      	bne.n	bd48 <_tc_timer_set_period+0x24>
    bd50:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    bd52:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    bd54:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    bd58:	2a01      	cmp	r2, #1
    bd5a:	d000      	beq.n	bd5e <_tc_timer_set_period+0x3a>
    bd5c:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    bd5e:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    bd60:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bd62:	691a      	ldr	r2, [r3, #16]
    bd64:	f012 0f20 	tst.w	r2, #32
    bd68:	d1fb      	bne.n	bd62 <_tc_timer_set_period+0x3e>
    bd6a:	e7f7      	b.n	bd5c <_tc_timer_set_period+0x38>

0000bd6c <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    bd6c:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    bd6e:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    bd70:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    bd74:	2a02      	cmp	r2, #2
    bd76:	d00a      	beq.n	bd8e <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    bd78:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    bd7a:	f012 0f0c 	tst.w	r2, #12
    bd7e:	d10c      	bne.n	bd9a <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bd80:	691a      	ldr	r2, [r3, #16]
    bd82:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    bd86:	d1fb      	bne.n	bd80 <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    bd88:	8b98      	ldrh	r0, [r3, #28]
    bd8a:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    bd8c:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bd8e:	691a      	ldr	r2, [r3, #16]
    bd90:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    bd94:	d1fb      	bne.n	bd8e <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    bd96:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    bd98:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    bd9a:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    bd9c:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    bda0:	2a01      	cmp	r2, #1
    bda2:	d001      	beq.n	bda8 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    bda4:	2000      	movs	r0, #0
}
    bda6:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bda8:	691a      	ldr	r2, [r3, #16]
    bdaa:	f012 0f20 	tst.w	r2, #32
    bdae:	d1fb      	bne.n	bda8 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    bdb0:	7ed8      	ldrb	r0, [r3, #27]
    bdb2:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    bdb4:	4770      	bx	lr

0000bdb6 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    bdb6:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bdb8:	6913      	ldr	r3, [r2, #16]
    bdba:	f013 0f03 	tst.w	r3, #3
    bdbe:	d1fb      	bne.n	bdb8 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    bdc0:	6810      	ldr	r0, [r2, #0]
}
    bdc2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    bdc6:	4770      	bx	lr

0000bdc8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    bdc8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    bdca:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    bdcc:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    bdce:	f012 0f01 	tst.w	r2, #1
    bdd2:	d100      	bne.n	bdd6 <tc_interrupt_handler+0xe>
    bdd4:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    bdd6:	2201      	movs	r2, #1
    bdd8:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    bdda:	6803      	ldr	r3, [r0, #0]
    bddc:	4798      	blx	r3
	}
}
    bdde:	e7f9      	b.n	bdd4 <tc_interrupt_handler+0xc>

0000bde0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    bde0:	b470      	push	{r4, r5, r6}
    bde2:	b089      	sub	sp, #36	; 0x24
    bde4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    bde6:	466c      	mov	r4, sp
    bde8:	4d16      	ldr	r5, [pc, #88]	; (be44 <get_tc_index+0x64>)
    bdea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    bdec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    bdee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    bdf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    bdf6:	9b00      	ldr	r3, [sp, #0]
    bdf8:	42b3      	cmp	r3, r6
    bdfa:	d00c      	beq.n	be16 <get_tc_index+0x36>
    bdfc:	4630      	mov	r0, r6
    bdfe:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    be00:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    be02:	f852 1b04 	ldr.w	r1, [r2], #4
    be06:	4281      	cmp	r1, r0
    be08:	d006      	beq.n	be18 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    be0a:	3301      	adds	r3, #1
    be0c:	2b08      	cmp	r3, #8
    be0e:	d1f8      	bne.n	be02 <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    be10:	2000      	movs	r0, #0
			return i;
    be12:	b240      	sxtb	r0, r0
    be14:	e00d      	b.n	be32 <get_tc_index+0x52>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    be16:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    be18:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    be1c:	d010      	beq.n	be40 <get_tc_index+0x60>
    be1e:	2b01      	cmp	r3, #1
    be20:	d00a      	beq.n	be38 <get_tc_index+0x58>
    be22:	2b02      	cmp	r3, #2
    be24:	d00a      	beq.n	be3c <get_tc_index+0x5c>
    be26:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    be28:	bf08      	it	eq
    be2a:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    be2c:	d0f1      	beq.n	be12 <get_tc_index+0x32>
	return -1;
    be2e:	f04f 30ff 	mov.w	r0, #4294967295
}
    be32:	b009      	add	sp, #36	; 0x24
    be34:	bc70      	pop	{r4, r5, r6}
    be36:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    be38:	2001      	movs	r0, #1
    be3a:	e7ea      	b.n	be12 <get_tc_index+0x32>
    be3c:	2002      	movs	r0, #2
    be3e:	e7e8      	b.n	be12 <get_tc_index+0x32>
    be40:	2000      	movs	r0, #0
    be42:	e7e6      	b.n	be12 <get_tc_index+0x32>
    be44:	00011a1c 	.word	0x00011a1c

0000be48 <_tc_timer_deinit>:
{
    be48:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    be4a:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    be4c:	4620      	mov	r0, r4
    be4e:	4b15      	ldr	r3, [pc, #84]	; (bea4 <_tc_timer_deinit+0x5c>)
    be50:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    be52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    be56:	4b14      	ldr	r3, [pc, #80]	; (bea8 <_tc_timer_deinit+0x60>)
    be58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    be5c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    be60:	2b00      	cmp	r3, #0
    be62:	db0d      	blt.n	be80 <_tc_timer_deinit+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    be64:	095a      	lsrs	r2, r3, #5
    be66:	f003 031f 	and.w	r3, r3, #31
    be6a:	2101      	movs	r1, #1
    be6c:	fa01 f303 	lsl.w	r3, r1, r3
    be70:	3220      	adds	r2, #32
    be72:	490e      	ldr	r1, [pc, #56]	; (beac <_tc_timer_deinit+0x64>)
    be74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    be78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    be7c:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    be80:	6823      	ldr	r3, [r4, #0]
    be82:	f023 0302 	bic.w	r3, r3, #2
    be86:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    be88:	6923      	ldr	r3, [r4, #16]
    be8a:	f013 0f03 	tst.w	r3, #3
    be8e:	d1fb      	bne.n	be88 <_tc_timer_deinit+0x40>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    be90:	6823      	ldr	r3, [r4, #0]
    be92:	f043 0301 	orr.w	r3, r3, #1
    be96:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    be98:	6923      	ldr	r3, [r4, #16]
    be9a:	f013 0f01 	tst.w	r3, #1
    be9e:	d1fb      	bne.n	be98 <_tc_timer_deinit+0x50>
}
    bea0:	bd10      	pop	{r4, pc}
    bea2:	bf00      	nop
    bea4:	0000bde1 	.word	0x0000bde1
    bea8:	00011a1c 	.word	0x00011a1c
    beac:	e000e100 	.word	0xe000e100

0000beb0 <_tc_timer_init>:
{
    beb0:	b538      	push	{r3, r4, r5, lr}
    beb2:	4605      	mov	r5, r0
    beb4:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    beb6:	4608      	mov	r0, r1
    beb8:	4b6e      	ldr	r3, [pc, #440]	; (c074 <_tc_timer_init+0x1c4>)
    beba:	4798      	blx	r3
	device->hw = hw;
    bebc:	60ec      	str	r4, [r5, #12]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    bebe:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    bec0:	f013 0f01 	tst.w	r3, #1
    bec4:	d119      	bne.n	befa <_tc_timer_init+0x4a>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bec6:	6923      	ldr	r3, [r4, #16]
    bec8:	f013 0f03 	tst.w	r3, #3
    becc:	d1fb      	bne.n	bec6 <_tc_timer_init+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    bece:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    bed0:	f013 0f02 	tst.w	r3, #2
    bed4:	d00b      	beq.n	beee <_tc_timer_init+0x3e>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    bed6:	6823      	ldr	r3, [r4, #0]
    bed8:	f023 0302 	bic.w	r3, r3, #2
    bedc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bede:	6923      	ldr	r3, [r4, #16]
    bee0:	f013 0f03 	tst.w	r3, #3
    bee4:	d1fb      	bne.n	bede <_tc_timer_init+0x2e>
    bee6:	6923      	ldr	r3, [r4, #16]
    bee8:	f013 0f02 	tst.w	r3, #2
    beec:	d1fb      	bne.n	bee6 <_tc_timer_init+0x36>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    beee:	2301      	movs	r3, #1
    bef0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bef2:	6923      	ldr	r3, [r4, #16]
    bef4:	f013 0f03 	tst.w	r3, #3
    bef8:	d1fb      	bne.n	bef2 <_tc_timer_init+0x42>
    befa:	6923      	ldr	r3, [r4, #16]
    befc:	f013 0f01 	tst.w	r3, #1
    bf00:	d1fb      	bne.n	befa <_tc_timer_init+0x4a>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    bf02:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    bf06:	4a5c      	ldr	r2, [pc, #368]	; (c078 <_tc_timer_init+0x1c8>)
    bf08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bf0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    bf0e:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bf10:	6923      	ldr	r3, [r4, #16]
    bf12:	f013 0f03 	tst.w	r3, #3
    bf16:	d1fb      	bne.n	bf10 <_tc_timer_init+0x60>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    bf18:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    bf1c:	4956      	ldr	r1, [pc, #344]	; (c078 <_tc_timer_init+0x1c8>)
    bf1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    bf22:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    bf26:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    bf28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    bf2a:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    bf2c:	2301      	movs	r3, #1
    bf2e:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    bf30:	f002 020c 	and.w	r2, r2, #12
    bf34:	2a08      	cmp	r2, #8
    bf36:	d056      	beq.n	bfe6 <_tc_timer_init+0x136>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    bf38:	2a00      	cmp	r2, #0
    bf3a:	d16b      	bne.n	c014 <_tc_timer_init+0x164>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    bf3c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    bf40:	4a4d      	ldr	r2, [pc, #308]	; (c078 <_tc_timer_init+0x1c8>)
    bf42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bf46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    bf48:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bf4a:	6923      	ldr	r3, [r4, #16]
    bf4c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    bf50:	d1fb      	bne.n	bf4a <_tc_timer_init+0x9a>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    bf52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    bf56:	4a48      	ldr	r2, [pc, #288]	; (c078 <_tc_timer_init+0x1c8>)
    bf58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bf5c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    bf5e:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bf60:	6923      	ldr	r3, [r4, #16]
    bf62:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    bf66:	d1fb      	bne.n	bf60 <_tc_timer_init+0xb0>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    bf68:	2301      	movs	r3, #1
    bf6a:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    bf6c:	4b43      	ldr	r3, [pc, #268]	; (c07c <_tc_timer_init+0x1cc>)
    bf6e:	429c      	cmp	r4, r3
    bf70:	d077      	beq.n	c062 <_tc_timer_init+0x1b2>
	if (hw == TC1) {
    bf72:	4b43      	ldr	r3, [pc, #268]	; (c080 <_tc_timer_init+0x1d0>)
    bf74:	429c      	cmp	r4, r3
    bf76:	d077      	beq.n	c068 <_tc_timer_init+0x1b8>
	if (hw == TC2) {
    bf78:	4b42      	ldr	r3, [pc, #264]	; (c084 <_tc_timer_init+0x1d4>)
    bf7a:	429c      	cmp	r4, r3
    bf7c:	d077      	beq.n	c06e <_tc_timer_init+0x1be>
	if (hw == TC3) {
    bf7e:	4b42      	ldr	r3, [pc, #264]	; (c088 <_tc_timer_init+0x1d8>)
    bf80:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    bf82:	bf04      	itt	eq
    bf84:	4b41      	ldreq	r3, [pc, #260]	; (c08c <_tc_timer_init+0x1dc>)
    bf86:	60dd      	streq	r5, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    bf88:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    bf8c:	4a3a      	ldr	r2, [pc, #232]	; (c078 <_tc_timer_init+0x1c8>)
    bf8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bf92:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    bf96:	2b00      	cmp	r3, #0
    bf98:	db23      	blt.n	bfe2 <_tc_timer_init+0x132>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bf9a:	095a      	lsrs	r2, r3, #5
    bf9c:	f003 031f 	and.w	r3, r3, #31
    bfa0:	2101      	movs	r1, #1
    bfa2:	fa01 f303 	lsl.w	r3, r1, r3
    bfa6:	3220      	adds	r2, #32
    bfa8:	4939      	ldr	r1, [pc, #228]	; (c090 <_tc_timer_init+0x1e0>)
    bfaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    bfae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bfb2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    bfb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    bfba:	4b2f      	ldr	r3, [pc, #188]	; (c078 <_tc_timer_init+0x1c8>)
    bfbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    bfc0:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    bfc4:	2b00      	cmp	r3, #0
    bfc6:	db0c      	blt.n	bfe2 <_tc_timer_init+0x132>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bfc8:	0959      	lsrs	r1, r3, #5
    bfca:	f003 031f 	and.w	r3, r3, #31
    bfce:	2201      	movs	r2, #1
    bfd0:	fa02 f303 	lsl.w	r3, r2, r3
    bfd4:	4a2e      	ldr	r2, [pc, #184]	; (c090 <_tc_timer_init+0x1e0>)
    bfd6:	f101 0060 	add.w	r0, r1, #96	; 0x60
    bfda:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bfde:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    bfe2:	2000      	movs	r0, #0
    bfe4:	bd38      	pop	{r3, r4, r5, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    bfe6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    bfea:	4a23      	ldr	r2, [pc, #140]	; (c078 <_tc_timer_init+0x1c8>)
    bfec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    bff2:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    bff4:	6923      	ldr	r3, [r4, #16]
    bff6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    bffa:	d1fb      	bne.n	bff4 <_tc_timer_init+0x144>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    bffc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c000:	4a1d      	ldr	r2, [pc, #116]	; (c078 <_tc_timer_init+0x1c8>)
    c002:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    c008:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    c00a:	6923      	ldr	r3, [r4, #16]
    c00c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    c010:	d1fb      	bne.n	c00a <_tc_timer_init+0x15a>
    c012:	e7a9      	b.n	bf68 <_tc_timer_init+0xb8>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    c014:	2a04      	cmp	r2, #4
    c016:	d1a7      	bne.n	bf68 <_tc_timer_init+0xb8>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    c018:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c01c:	4a16      	ldr	r2, [pc, #88]	; (c078 <_tc_timer_init+0x1c8>)
    c01e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c022:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    c026:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    c028:	6923      	ldr	r3, [r4, #16]
    c02a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    c02e:	d1fb      	bne.n	c028 <_tc_timer_init+0x178>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    c030:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c034:	4a10      	ldr	r2, [pc, #64]	; (c078 <_tc_timer_init+0x1c8>)
    c036:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c03a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    c03e:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    c040:	6923      	ldr	r3, [r4, #16]
    c042:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    c046:	d1fb      	bne.n	c040 <_tc_timer_init+0x190>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    c048:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    c04c:	4a0a      	ldr	r2, [pc, #40]	; (c078 <_tc_timer_init+0x1c8>)
    c04e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c052:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    c056:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    c058:	6923      	ldr	r3, [r4, #16]
    c05a:	f013 0f20 	tst.w	r3, #32
    c05e:	d1fb      	bne.n	c058 <_tc_timer_init+0x1a8>
    c060:	e782      	b.n	bf68 <_tc_timer_init+0xb8>
		_tc0_dev = (struct _timer_device *)dev;
    c062:	4b0a      	ldr	r3, [pc, #40]	; (c08c <_tc_timer_init+0x1dc>)
    c064:	601d      	str	r5, [r3, #0]
    c066:	e78a      	b.n	bf7e <_tc_timer_init+0xce>
		_tc1_dev = (struct _timer_device *)dev;
    c068:	4b08      	ldr	r3, [pc, #32]	; (c08c <_tc_timer_init+0x1dc>)
    c06a:	605d      	str	r5, [r3, #4]
    c06c:	e78c      	b.n	bf88 <_tc_timer_init+0xd8>
		_tc2_dev = (struct _timer_device *)dev;
    c06e:	4b07      	ldr	r3, [pc, #28]	; (c08c <_tc_timer_init+0x1dc>)
    c070:	609d      	str	r5, [r3, #8]
    c072:	e789      	b.n	bf88 <_tc_timer_init+0xd8>
    c074:	0000bde1 	.word	0x0000bde1
    c078:	00011a1c 	.word	0x00011a1c
    c07c:	40003800 	.word	0x40003800
    c080:	40003c00 	.word	0x40003c00
    c084:	4101a000 	.word	0x4101a000
    c088:	4101c000 	.word	0x4101c000
    c08c:	20000998 	.word	0x20000998
    c090:	e000e100 	.word	0xe000e100

0000c094 <_tc_timer_set_irq>:
{
    c094:	b508      	push	{r3, lr}
	int8_t      i  = get_tc_index(hw);
    c096:	68c0      	ldr	r0, [r0, #12]
    c098:	4b05      	ldr	r3, [pc, #20]	; (c0b0 <_tc_timer_set_irq+0x1c>)
    c09a:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    c09c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c0a0:	4b04      	ldr	r3, [pc, #16]	; (c0b4 <_tc_timer_set_irq+0x20>)
    c0a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    c0a6:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    c0aa:	4b03      	ldr	r3, [pc, #12]	; (c0b8 <_tc_timer_set_irq+0x24>)
    c0ac:	4798      	blx	r3
    c0ae:	bd08      	pop	{r3, pc}
    c0b0:	0000bde1 	.word	0x0000bde1
    c0b4:	00011a1c 	.word	0x00011a1c
    c0b8:	0000a381 	.word	0x0000a381

0000c0bc <_tc_get_timer>:
}
    c0bc:	4800      	ldr	r0, [pc, #0]	; (c0c0 <_tc_get_timer+0x4>)
    c0be:	4770      	bx	lr
    c0c0:	20000378 	.word	0x20000378

0000c0c4 <TC0_Handler>:
{
    c0c4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    c0c6:	4b02      	ldr	r3, [pc, #8]	; (c0d0 <TC0_Handler+0xc>)
    c0c8:	6818      	ldr	r0, [r3, #0]
    c0ca:	4b02      	ldr	r3, [pc, #8]	; (c0d4 <TC0_Handler+0x10>)
    c0cc:	4798      	blx	r3
    c0ce:	bd08      	pop	{r3, pc}
    c0d0:	20000998 	.word	0x20000998
    c0d4:	0000bdc9 	.word	0x0000bdc9

0000c0d8 <TC1_Handler>:
{
    c0d8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    c0da:	4b02      	ldr	r3, [pc, #8]	; (c0e4 <TC1_Handler+0xc>)
    c0dc:	6858      	ldr	r0, [r3, #4]
    c0de:	4b02      	ldr	r3, [pc, #8]	; (c0e8 <TC1_Handler+0x10>)
    c0e0:	4798      	blx	r3
    c0e2:	bd08      	pop	{r3, pc}
    c0e4:	20000998 	.word	0x20000998
    c0e8:	0000bdc9 	.word	0x0000bdc9

0000c0ec <TC2_Handler>:
{
    c0ec:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    c0ee:	4b02      	ldr	r3, [pc, #8]	; (c0f8 <TC2_Handler+0xc>)
    c0f0:	6898      	ldr	r0, [r3, #8]
    c0f2:	4b02      	ldr	r3, [pc, #8]	; (c0fc <TC2_Handler+0x10>)
    c0f4:	4798      	blx	r3
    c0f6:	bd08      	pop	{r3, pc}
    c0f8:	20000998 	.word	0x20000998
    c0fc:	0000bdc9 	.word	0x0000bdc9

0000c100 <TC3_Handler>:
{
    c100:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    c102:	4b02      	ldr	r3, [pc, #8]	; (c10c <TC3_Handler+0xc>)
    c104:	68d8      	ldr	r0, [r3, #12]
    c106:	4b02      	ldr	r3, [pc, #8]	; (c110 <TC3_Handler+0x10>)
    c108:	4798      	blx	r3
    c10a:	bd08      	pop	{r3, pc}
    c10c:	20000998 	.word	0x20000998
    c110:	0000bdc9 	.word	0x0000bdc9

0000c114 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    c114:	2000      	movs	r0, #0
    c116:	4770      	bx	lr

0000c118 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    c118:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    c11a:	7c83      	ldrb	r3, [r0, #18]
    c11c:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c120:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    c122:	f002 0107 	and.w	r1, r2, #7
    c126:	2901      	cmp	r1, #1
    c128:	d00b      	beq.n	c142 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c12a:	015a      	lsls	r2, r3, #5
    c12c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c130:	2110      	movs	r1, #16
    c132:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    c136:	015b      	lsls	r3, r3, #5
    c138:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c13c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    c140:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    c142:	f012 0f40 	tst.w	r2, #64	; 0x40
    c146:	d00c      	beq.n	c162 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    c148:	7cc2      	ldrb	r2, [r0, #19]
    c14a:	f36f 1286 	bfc	r2, #6, #1
    c14e:	74c2      	strb	r2, [r0, #19]
    c150:	015a      	lsls	r2, r3, #5
    c152:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c156:	2180      	movs	r1, #128	; 0x80
    c158:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c15c:	2140      	movs	r1, #64	; 0x40
    c15e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    c162:	7cc2      	ldrb	r2, [r0, #19]
    c164:	f36f 02c3 	bfc	r2, #3, #1
    c168:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    c16a:	490a      	ldr	r1, [pc, #40]	; (c194 <_usb_d_dev_handle_setup+0x7c>)
    c16c:	015a      	lsls	r2, r3, #5
    c16e:	188c      	adds	r4, r1, r2
    c170:	2500      	movs	r5, #0
    c172:	72a5      	strb	r5, [r4, #10]
    c174:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c176:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    c17a:	246f      	movs	r4, #111	; 0x6f
    c17c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c180:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c184:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    c188:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    c18c:	7c80      	ldrb	r0, [r0, #18]
    c18e:	4798      	blx	r3
    c190:	bd38      	pop	{r3, r4, r5, pc}
    c192:	bf00      	nop
    c194:	200009a8 	.word	0x200009a8

0000c198 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    c198:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c19a:	2320      	movs	r3, #32
    c19c:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    c1a0:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c1a2:	7c83      	ldrb	r3, [r0, #18]
    c1a4:	f003 030f 	and.w	r3, r3, #15
    c1a8:	015b      	lsls	r3, r3, #5
    c1aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c1ae:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c1b2:	4b04      	ldr	r3, [pc, #16]	; (c1c4 <_usb_d_dev_handle_stall+0x2c>)
    c1b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    c1b8:	6882      	ldr	r2, [r0, #8]
    c1ba:	2101      	movs	r1, #1
    c1bc:	7c80      	ldrb	r0, [r0, #18]
    c1be:	4798      	blx	r3
    c1c0:	bd08      	pop	{r3, pc}
    c1c2:	bf00      	nop
    c1c4:	200009a8 	.word	0x200009a8

0000c1c8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c1c8:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c1ca:	7c84      	ldrb	r4, [r0, #18]
    c1cc:	2cff      	cmp	r4, #255	; 0xff
    c1ce:	d003      	beq.n	c1d8 <_usb_d_dev_trans_done+0x10>
    c1d0:	7cc3      	ldrb	r3, [r0, #19]
    c1d2:	f013 0f40 	tst.w	r3, #64	; 0x40
    c1d6:	d100      	bne.n	c1da <_usb_d_dev_trans_done+0x12>
    c1d8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    c1da:	7cc2      	ldrb	r2, [r0, #19]
    c1dc:	f36f 1286 	bfc	r2, #6, #1
    c1e0:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c1e2:	4a03      	ldr	r2, [pc, #12]	; (c1f0 <_usb_d_dev_trans_done+0x28>)
    c1e4:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    c1e8:	6882      	ldr	r2, [r0, #8]
    c1ea:	4620      	mov	r0, r4
    c1ec:	47a8      	blx	r5
    c1ee:	e7f3      	b.n	c1d8 <_usb_d_dev_trans_done+0x10>
    c1f0:	200009a8 	.word	0x200009a8

0000c1f4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c1f4:	b530      	push	{r4, r5, lr}
    c1f6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c1f8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c1fa:	2425      	movs	r4, #37	; 0x25
    c1fc:	f88d 4004 	strb.w	r4, [sp, #4]
    c200:	244a      	movs	r4, #74	; 0x4a
    c202:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c206:	2bff      	cmp	r3, #255	; 0xff
    c208:	d01e      	beq.n	c248 <_usb_d_dev_trans_stop+0x54>
    c20a:	7cc4      	ldrb	r4, [r0, #19]
    c20c:	f014 0f40 	tst.w	r4, #64	; 0x40
    c210:	d01a      	beq.n	c248 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c212:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    c216:	b1c9      	cbz	r1, c24c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c218:	0163      	lsls	r3, r4, #5
    c21a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c21e:	2580      	movs	r5, #128	; 0x80
    c220:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    c224:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c226:	a902      	add	r1, sp, #8
    c228:	440b      	add	r3, r1
    c22a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c22e:	0163      	lsls	r3, r4, #5
    c230:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c234:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c238:	0163      	lsls	r3, r4, #5
    c23a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c23e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    c242:	4611      	mov	r1, r2
    c244:	4b05      	ldr	r3, [pc, #20]	; (c25c <_usb_d_dev_trans_stop+0x68>)
    c246:	4798      	blx	r3
}
    c248:	b003      	add	sp, #12
    c24a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c24c:	0163      	lsls	r3, r4, #5
    c24e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c252:	2540      	movs	r5, #64	; 0x40
    c254:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    c258:	e7e4      	b.n	c224 <_usb_d_dev_trans_stop+0x30>
    c25a:	bf00      	nop
    c25c:	0000c1c9 	.word	0x0000c1c9

0000c260 <_usb_d_dev_handle_trfail>:
{
    c260:	b530      	push	{r4, r5, lr}
    c262:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    c264:	7c83      	ldrb	r3, [r0, #18]
    c266:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    c26a:	2204      	movs	r2, #4
    c26c:	f88d 2004 	strb.w	r2, [sp, #4]
    c270:	2208      	movs	r2, #8
    c272:	f88d 2005 	strb.w	r2, [sp, #5]
    c276:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    c278:	460c      	mov	r4, r1
    c27a:	b391      	cbz	r1, c2e2 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c27c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    c280:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    c284:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    c288:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    c28c:	4a32      	ldr	r2, [pc, #200]	; (c358 <_usb_d_dev_handle_trfail+0xf8>)
    c28e:	440a      	add	r2, r1
    c290:	7a91      	ldrb	r1, [r2, #10]
    c292:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    c294:	2d02      	cmp	r5, #2
    c296:	d02c      	beq.n	c2f2 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    c298:	f011 0f02 	tst.w	r1, #2
    c29c:	d045      	beq.n	c32a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c29e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    c2a0:	7a91      	ldrb	r1, [r2, #10]
    c2a2:	f36f 0141 	bfc	r1, #1, #1
    c2a6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c2a8:	aa02      	add	r2, sp, #8
    c2aa:	4422      	add	r2, r4
    c2ac:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c2b0:	015a      	lsls	r2, r3, #5
    c2b2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c2b6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c2ba:	015b      	lsls	r3, r3, #5
    c2bc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c2c0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    c2c4:	f005 0307 	and.w	r3, r5, #7
    c2c8:	2b01      	cmp	r3, #1
    c2ca:	d143      	bne.n	c354 <_usb_d_dev_handle_trfail+0xf4>
    c2cc:	7cc3      	ldrb	r3, [r0, #19]
    c2ce:	f013 0f40 	tst.w	r3, #64	; 0x40
    c2d2:	d03f      	beq.n	c354 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    c2d4:	09d9      	lsrs	r1, r3, #7
    c2d6:	428c      	cmp	r4, r1
    c2d8:	d03c      	beq.n	c354 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c2da:	2200      	movs	r2, #0
    c2dc:	4b1f      	ldr	r3, [pc, #124]	; (c35c <_usb_d_dev_handle_trfail+0xfc>)
    c2de:	4798      	blx	r3
    c2e0:	e038      	b.n	c354 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c2e2:	0159      	lsls	r1, r3, #5
    c2e4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    c2e8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    c2ec:	f005 0507 	and.w	r5, r5, #7
    c2f0:	e7ca      	b.n	c288 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    c2f2:	f011 0f01 	tst.w	r1, #1
    c2f6:	d0cf      	beq.n	c298 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    c2f8:	7a91      	ldrb	r1, [r2, #10]
    c2fa:	f36f 0100 	bfc	r1, #0, #1
    c2fe:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c300:	aa02      	add	r2, sp, #8
    c302:	4422      	add	r2, r4
    c304:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c308:	015a      	lsls	r2, r3, #5
    c30a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c30e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c312:	015b      	lsls	r3, r3, #5
    c314:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c318:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    c31c:	2204      	movs	r2, #4
    c31e:	1c21      	adds	r1, r4, #0
    c320:	bf18      	it	ne
    c322:	2101      	movne	r1, #1
    c324:	4b0d      	ldr	r3, [pc, #52]	; (c35c <_usb_d_dev_handle_trfail+0xfc>)
    c326:	4798      	blx	r3
    c328:	e014      	b.n	c354 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    c32a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    c32e:	4a0a      	ldr	r2, [pc, #40]	; (c358 <_usb_d_dev_handle_trfail+0xf8>)
    c330:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    c334:	2100      	movs	r1, #0
    c336:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    c338:	aa02      	add	r2, sp, #8
    c33a:	4414      	add	r4, r2
    c33c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c340:	015a      	lsls	r2, r3, #5
    c342:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c346:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c34a:	015b      	lsls	r3, r3, #5
    c34c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c350:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    c354:	b003      	add	sp, #12
    c356:	bd30      	pop	{r4, r5, pc}
    c358:	200009a8 	.word	0x200009a8
    c35c:	0000c1f5 	.word	0x0000c1f5

0000c360 <_usb_d_dev_reset_epts>:
{
    c360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c364:	4d0c      	ldr	r5, [pc, #48]	; (c398 <_usb_d_dev_reset_epts+0x38>)
    c366:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    c36a:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c36e:	f04f 0803 	mov.w	r8, #3
    c372:	4f0a      	ldr	r7, [pc, #40]	; (c39c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    c374:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c376:	4641      	mov	r1, r8
    c378:	4620      	mov	r0, r4
    c37a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    c37c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    c37e:	2300      	movs	r3, #0
    c380:	74e3      	strb	r3, [r4, #19]
    c382:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    c384:	42ac      	cmp	r4, r5
    c386:	d1f6      	bne.n	c376 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    c388:	22c0      	movs	r2, #192	; 0xc0
    c38a:	4619      	mov	r1, r3
    c38c:	4802      	ldr	r0, [pc, #8]	; (c398 <_usb_d_dev_reset_epts+0x38>)
    c38e:	4b04      	ldr	r3, [pc, #16]	; (c3a0 <_usb_d_dev_reset_epts+0x40>)
    c390:	4798      	blx	r3
    c392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c396:	bf00      	nop
    c398:	200009a8 	.word	0x200009a8
    c39c:	0000c1c9 	.word	0x0000c1c9
    c3a0:	0000fec3 	.word	0x0000fec3

0000c3a4 <_usb_d_dev_in_next>:
{
    c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3a8:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c3aa:	7c84      	ldrb	r4, [r0, #18]
    c3ac:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c3b0:	4688      	mov	r8, r1
    c3b2:	2900      	cmp	r1, #0
    c3b4:	f000 80a0 	beq.w	c4f8 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c3b8:	4b58      	ldr	r3, [pc, #352]	; (c51c <_usb_d_dev_in_next+0x178>)
    c3ba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c3be:	6958      	ldr	r0, [r3, #20]
    c3c0:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c3c4:	8a2b      	ldrh	r3, [r5, #16]
    c3c6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c3ca:	4293      	cmp	r3, r2
    c3cc:	f000 808e 	beq.w	c4ec <_usb_d_dev_in_next+0x148>
    c3d0:	3b01      	subs	r3, #1
    c3d2:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c3d4:	7cef      	ldrb	r7, [r5, #19]
    c3d6:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    c3da:	f1b8 0f00 	cmp.w	r8, #0
    c3de:	d005      	beq.n	c3ec <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c3e0:	0162      	lsls	r2, r4, #5
    c3e2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c3e6:	2302      	movs	r3, #2
    c3e8:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    c3ec:	68a9      	ldr	r1, [r5, #8]
    c3ee:	eb0e 0301 	add.w	r3, lr, r1
    c3f2:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    c3f4:	686e      	ldr	r6, [r5, #4]
    c3f6:	42b3      	cmp	r3, r6
    c3f8:	d23f      	bcs.n	c47a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    c3fa:	1af6      	subs	r6, r6, r3
    c3fc:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    c3fe:	7cea      	ldrb	r2, [r5, #19]
    c400:	f012 0f20 	tst.w	r2, #32
    c404:	d02d      	beq.n	c462 <_usb_d_dev_in_next+0xbe>
    c406:	8a2a      	ldrh	r2, [r5, #16]
    c408:	4296      	cmp	r6, r2
    c40a:	bf28      	it	cs
    c40c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    c40e:	6829      	ldr	r1, [r5, #0]
    c410:	4632      	mov	r2, r6
    c412:	4419      	add	r1, r3
    c414:	68e8      	ldr	r0, [r5, #12]
    c416:	4b42      	ldr	r3, [pc, #264]	; (c520 <_usb_d_dev_in_next+0x17c>)
    c418:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    c41a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    c41c:	4b3f      	ldr	r3, [pc, #252]	; (c51c <_usb_d_dev_in_next+0x178>)
    c41e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    c422:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c424:	4b3d      	ldr	r3, [pc, #244]	; (c51c <_usb_d_dev_in_next+0x178>)
    c426:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    c42a:	695a      	ldr	r2, [r3, #20]
    c42c:	f366 020d 	bfi	r2, r6, #0, #14
    c430:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c432:	695a      	ldr	r2, [r3, #20]
    c434:	f36f 329b 	bfc	r2, #14, #14
    c438:	615a      	str	r2, [r3, #20]
	if (!isr) {
    c43a:	f1b8 0f00 	cmp.w	r8, #0
    c43e:	d108      	bne.n	c452 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    c440:	2f01      	cmp	r7, #1
    c442:	bf0c      	ite	eq
    c444:	224e      	moveq	r2, #78	; 0x4e
    c446:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c448:	0163      	lsls	r3, r4, #5
    c44a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c44e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c452:	0164      	lsls	r4, r4, #5
    c454:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    c458:	2380      	movs	r3, #128	; 0x80
    c45a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    c45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c462:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    c466:	bf28      	it	cs
    c468:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c46c:	6829      	ldr	r1, [r5, #0]
    c46e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    c470:	4a2a      	ldr	r2, [pc, #168]	; (c51c <_usb_d_dev_in_next+0x178>)
    c472:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    c476:	6113      	str	r3, [r2, #16]
    c478:	e7d4      	b.n	c424 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    c47a:	7ceb      	ldrb	r3, [r5, #19]
    c47c:	f013 0f10 	tst.w	r3, #16
    c480:	d00f      	beq.n	c4a2 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    c482:	7ceb      	ldrb	r3, [r5, #19]
    c484:	f36f 1304 	bfc	r3, #4, #1
    c488:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c48a:	4b24      	ldr	r3, [pc, #144]	; (c51c <_usb_d_dev_in_next+0x178>)
    c48c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    c490:	695a      	ldr	r2, [r3, #20]
    c492:	f36f 020d 	bfc	r2, #0, #14
    c496:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c498:	695a      	ldr	r2, [r3, #20]
    c49a:	f36f 329b 	bfc	r2, #14, #14
    c49e:	615a      	str	r2, [r3, #20]
    c4a0:	e7cb      	b.n	c43a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    c4a2:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c4a4:	ea4f 1444 	mov.w	r4, r4, lsl #5
    c4a8:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    c4ac:	bf0c      	ite	eq
    c4ae:	234b      	moveq	r3, #75	; 0x4b
    c4b0:	234a      	movne	r3, #74	; 0x4a
    c4b2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    c4b6:	8a2a      	ldrh	r2, [r5, #16]
    c4b8:	ea00 030e 	and.w	r3, r0, lr
    c4bc:	429a      	cmp	r2, r3
    c4be:	d005      	beq.n	c4cc <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c4c0:	2100      	movs	r1, #0
    c4c2:	4628      	mov	r0, r5
    c4c4:	4b17      	ldr	r3, [pc, #92]	; (c524 <_usb_d_dev_in_next+0x180>)
    c4c6:	4798      	blx	r3
	return;
    c4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    c4cc:	7ceb      	ldrb	r3, [r5, #19]
    c4ce:	f36f 1386 	bfc	r3, #6, #1
    c4d2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    c4d4:	4b11      	ldr	r3, [pc, #68]	; (c51c <_usb_d_dev_in_next+0x178>)
    c4d6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    c4da:	68a9      	ldr	r1, [r5, #8]
    c4dc:	7ca8      	ldrb	r0, [r5, #18]
    c4de:	4798      	blx	r3
    c4e0:	b9d0      	cbnz	r0, c518 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    c4e2:	7ceb      	ldrb	r3, [r5, #19]
    c4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c4e8:	74eb      	strb	r3, [r5, #19]
    c4ea:	e7e9      	b.n	c4c0 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c4ec:	7cef      	ldrb	r7, [r5, #19]
    c4ee:	f007 0707 	and.w	r7, r7, #7
    c4f2:	f240 30ff 	movw	r0, #1023	; 0x3ff
    c4f6:	e773      	b.n	c3e0 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c4f8:	8a03      	ldrh	r3, [r0, #16]
    c4fa:	f240 32ff 	movw	r2, #1023	; 0x3ff
    c4fe:	4293      	cmp	r3, r2
    c500:	d107      	bne.n	c512 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c502:	7cef      	ldrb	r7, [r5, #19]
    c504:	f007 0707 	and.w	r7, r7, #7
    c508:	f04f 0e00 	mov.w	lr, #0
    c50c:	f240 30ff 	movw	r0, #1023	; 0x3ff
    c510:	e76c      	b.n	c3ec <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c512:	f04f 0e00 	mov.w	lr, #0
    c516:	e75b      	b.n	c3d0 <_usb_d_dev_in_next+0x2c>
    c518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c51c:	200009a8 	.word	0x200009a8
    c520:	0000fead 	.word	0x0000fead
    c524:	0000c1c9 	.word	0x0000c1c9

0000c528 <_usb_d_dev_out_next>:
{
    c528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c52c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    c52e:	7c85      	ldrb	r5, [r0, #18]
    c530:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c534:	4689      	mov	r9, r1
    c536:	2900      	cmp	r1, #0
    c538:	d056      	beq.n	c5e8 <_usb_d_dev_out_next+0xc0>
    c53a:	4b74      	ldr	r3, [pc, #464]	; (c70c <_usb_d_dev_out_next+0x1e4>)
    c53c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    c540:	685a      	ldr	r2, [r3, #4]
    c542:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c546:	685f      	ldr	r7, [r3, #4]
    c548:	f3c7 070d 	ubfx	r7, r7, #0, #14
    c54c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c54e:	8a06      	ldrh	r6, [r0, #16]
    c550:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c554:	429e      	cmp	r6, r3
    c556:	f000 80ba 	beq.w	c6ce <_usb_d_dev_out_next+0x1a6>
    c55a:	3e01      	subs	r6, #1
    c55c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    c55e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c562:	f894 8013 	ldrb.w	r8, [r4, #19]
    c566:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    c56a:	f1b9 0f00 	cmp.w	r9, #0
    c56e:	d005      	beq.n	c57c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c570:	016b      	lsls	r3, r5, #5
    c572:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c576:	2201      	movs	r2, #1
    c578:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    c57c:	7ce3      	ldrb	r3, [r4, #19]
    c57e:	f013 0f20 	tst.w	r3, #32
    c582:	d00d      	beq.n	c5a0 <_usb_d_dev_out_next+0x78>
    c584:	6862      	ldr	r2, [r4, #4]
    c586:	2a00      	cmp	r2, #0
    c588:	d037      	beq.n	c5fa <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c58a:	68a0      	ldr	r0, [r4, #8]
    c58c:	1a12      	subs	r2, r2, r0
    c58e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c590:	6823      	ldr	r3, [r4, #0]
    c592:	42ba      	cmp	r2, r7
    c594:	bf28      	it	cs
    c596:	463a      	movcs	r2, r7
    c598:	68e1      	ldr	r1, [r4, #12]
    c59a:	4418      	add	r0, r3
    c59c:	4b5c      	ldr	r3, [pc, #368]	; (c710 <_usb_d_dev_out_next+0x1e8>)
    c59e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    c5a0:	6863      	ldr	r3, [r4, #4]
    c5a2:	b353      	cbz	r3, c5fa <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    c5a4:	f1b9 0f00 	cmp.w	r9, #0
    c5a8:	d040      	beq.n	c62c <_usb_d_dev_out_next+0x104>
    c5aa:	8a22      	ldrh	r2, [r4, #16]
    c5ac:	42ba      	cmp	r2, r7
    c5ae:	d93d      	bls.n	c62c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    c5b0:	7ce3      	ldrb	r3, [r4, #19]
    c5b2:	f36f 1304 	bfc	r3, #4, #1
    c5b6:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    c5b8:	68a3      	ldr	r3, [r4, #8]
    c5ba:	445b      	add	r3, fp
    c5bc:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    c5be:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c5c2:	ea4f 1345 	mov.w	r3, r5, lsl #5
    c5c6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c5ca:	bf0c      	ite	eq
    c5cc:	222d      	moveq	r2, #45	; 0x2d
    c5ce:	2225      	movne	r2, #37	; 0x25
    c5d0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    c5d4:	b915      	cbnz	r5, c5dc <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c5d6:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    c5d8:	4b4c      	ldr	r3, [pc, #304]	; (c70c <_usb_d_dev_out_next+0x1e4>)
    c5da:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c5dc:	2100      	movs	r1, #0
    c5de:	4620      	mov	r0, r4
    c5e0:	4b4c      	ldr	r3, [pc, #304]	; (c714 <_usb_d_dev_out_next+0x1ec>)
    c5e2:	4798      	blx	r3
	return;
    c5e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c5e8:	8a06      	ldrh	r6, [r0, #16]
    c5ea:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c5ee:	429e      	cmp	r6, r3
    c5f0:	d07b      	beq.n	c6ea <_usb_d_dev_out_next+0x1c2>
    c5f2:	f04f 0b00 	mov.w	fp, #0
    c5f6:	46da      	mov	sl, fp
    c5f8:	e7af      	b.n	c55a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    c5fa:	7ce3      	ldrb	r3, [r4, #19]
    c5fc:	f013 0f10 	tst.w	r3, #16
    c600:	d06c      	beq.n	c6dc <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    c602:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    c604:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    c608:	f043 0320 	orr.w	r3, r3, #32
    c60c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c60e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    c610:	493e      	ldr	r1, [pc, #248]	; (c70c <_usb_d_dev_out_next+0x1e4>)
    c612:	016a      	lsls	r2, r5, #5
    c614:	188b      	adds	r3, r1, r2
    c616:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c618:	8a21      	ldrh	r1, [r4, #16]
    c61a:	685a      	ldr	r2, [r3, #4]
    c61c:	f361 329b 	bfi	r2, r1, #14, #14
    c620:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c622:	685a      	ldr	r2, [r3, #4]
    c624:	f36f 020d 	bfc	r2, #0, #14
    c628:	605a      	str	r2, [r3, #4]
    c62a:	e01d      	b.n	c668 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    c62c:	68a2      	ldr	r2, [r4, #8]
    c62e:	4452      	add	r2, sl
    c630:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    c632:	4293      	cmp	r3, r2
    c634:	d9c3      	bls.n	c5be <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    c636:	1a9b      	subs	r3, r3, r2
    c638:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    c63a:	7ce1      	ldrb	r1, [r4, #19]
    c63c:	f011 0f20 	tst.w	r1, #32
    c640:	d026      	beq.n	c690 <_usb_d_dev_out_next+0x168>
    c642:	8a22      	ldrh	r2, [r4, #16]
    c644:	4293      	cmp	r3, r2
    c646:	bf28      	it	cs
    c648:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c64a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    c64c:	016a      	lsls	r2, r5, #5
    c64e:	492f      	ldr	r1, [pc, #188]	; (c70c <_usb_d_dev_out_next+0x1e4>)
    c650:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c652:	4a2e      	ldr	r2, [pc, #184]	; (c70c <_usb_d_dev_out_next+0x1e4>)
    c654:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    c658:	6851      	ldr	r1, [r2, #4]
    c65a:	f363 319b 	bfi	r1, r3, #14, #14
    c65e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c660:	6853      	ldr	r3, [r2, #4]
    c662:	f36f 030d 	bfc	r3, #0, #14
    c666:	6053      	str	r3, [r2, #4]
	if (!isr) {
    c668:	f1b9 0f00 	cmp.w	r9, #0
    c66c:	d108      	bne.n	c680 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    c66e:	f1b8 0f01 	cmp.w	r8, #1
    c672:	d025      	beq.n	c6c0 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    c674:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c676:	016b      	lsls	r3, r5, #5
    c678:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c67c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c680:	016d      	lsls	r5, r5, #5
    c682:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    c686:	2340      	movs	r3, #64	; 0x40
    c688:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    c68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    c690:	8a21      	ldrh	r1, [r4, #16]
    c692:	428b      	cmp	r3, r1
    c694:	d90a      	bls.n	c6ac <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    c696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c69a:	d80e      	bhi.n	c6ba <_usb_d_dev_out_next+0x192>
    c69c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c6a0:	6821      	ldr	r1, [r4, #0]
    c6a2:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    c6a4:	0169      	lsls	r1, r5, #5
    c6a6:	4819      	ldr	r0, [pc, #100]	; (c70c <_usb_d_dev_out_next+0x1e4>)
    c6a8:	5042      	str	r2, [r0, r1]
    c6aa:	e7d2      	b.n	c652 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    c6ac:	428b      	cmp	r3, r1
    c6ae:	d2f7      	bcs.n	c6a0 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    c6b0:	7ce1      	ldrb	r1, [r4, #19]
    c6b2:	f041 0120 	orr.w	r1, r1, #32
    c6b6:	74e1      	strb	r1, [r4, #19]
    c6b8:	e7f2      	b.n	c6a0 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    c6ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c6be:	e7ef      	b.n	c6a0 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    c6c0:	4b12      	ldr	r3, [pc, #72]	; (c70c <_usb_d_dev_out_next+0x1e4>)
    c6c2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    c6c6:	2200      	movs	r2, #0
    c6c8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    c6ca:	222d      	movs	r2, #45	; 0x2d
    c6cc:	e7d3      	b.n	c676 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    c6ce:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c6d2:	f890 8013 	ldrb.w	r8, [r0, #19]
    c6d6:	f008 0807 	and.w	r8, r8, #7
    c6da:	e749      	b.n	c570 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    c6dc:	f1b9 0f00 	cmp.w	r9, #0
    c6e0:	d10b      	bne.n	c6fa <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    c6e2:	68a3      	ldr	r3, [r4, #8]
    c6e4:	4453      	add	r3, sl
    c6e6:	60a3      	str	r3, [r4, #8]
    c6e8:	e769      	b.n	c5be <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c6ea:	f890 8013 	ldrb.w	r8, [r0, #19]
    c6ee:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    c6f2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c6f4:	46bb      	mov	fp, r7
    c6f6:	46ba      	mov	sl, r7
    c6f8:	e740      	b.n	c57c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    c6fa:	8a23      	ldrh	r3, [r4, #16]
    c6fc:	42bb      	cmp	r3, r7
    c6fe:	f63f af57 	bhi.w	c5b0 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    c702:	68a3      	ldr	r3, [r4, #8]
    c704:	4453      	add	r3, sl
    c706:	60a3      	str	r3, [r4, #8]
    c708:	e759      	b.n	c5be <_usb_d_dev_out_next+0x96>
    c70a:	bf00      	nop
    c70c:	200009a8 	.word	0x200009a8
    c710:	0000fead 	.word	0x0000fead
    c714:	0000c1c9 	.word	0x0000c1c9

0000c718 <_usb_d_dev_handler>:
{
    c718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c71c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c720:	8c1e      	ldrh	r6, [r3, #32]
    c722:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    c724:	b146      	cbz	r6, c738 <_usb_d_dev_handler+0x20>
    c726:	4d96      	ldr	r5, [pc, #600]	; (c980 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    c728:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c72a:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    c72e:	f8df 926c 	ldr.w	r9, [pc, #620]	; c99c <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    c732:	f8df 826c 	ldr.w	r8, [pc, #620]	; c9a0 <_usb_d_dev_handler+0x288>
    c736:	e0de      	b.n	c8f6 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    c738:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    c73a:	8b1b      	ldrh	r3, [r3, #24]
    c73c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    c73e:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    c740:	f013 0f04 	tst.w	r3, #4
    c744:	d11e      	bne.n	c784 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    c746:	f413 7f00 	tst.w	r3, #512	; 0x200
    c74a:	d125      	bne.n	c798 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    c74c:	f013 0f80 	tst.w	r3, #128	; 0x80
    c750:	d14f      	bne.n	c7f2 <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    c752:	f013 0f70 	tst.w	r3, #112	; 0x70
    c756:	d158      	bne.n	c80a <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    c758:	f013 0f08 	tst.w	r3, #8
    c75c:	d178      	bne.n	c850 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    c75e:	f013 0f01 	tst.w	r3, #1
    c762:	d0e0      	beq.n	c726 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c764:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c768:	f240 2201 	movw	r2, #513	; 0x201
    c76c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c76e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c770:	2270      	movs	r2, #112	; 0x70
    c772:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c774:	4b83      	ldr	r3, [pc, #524]	; (c984 <_usb_d_dev_handler+0x26c>)
    c776:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    c77a:	2100      	movs	r1, #0
    c77c:	2004      	movs	r0, #4
    c77e:	4798      	blx	r3
    c780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c784:	2204      	movs	r2, #4
    c786:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c78a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    c78c:	4b7d      	ldr	r3, [pc, #500]	; (c984 <_usb_d_dev_handler+0x26c>)
    c78e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    c792:	4798      	blx	r3
    c794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c798:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c79c:	f240 2201 	movw	r2, #513	; 0x201
    c7a0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c7a2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c7a4:	2270      	movs	r2, #112	; 0x70
    c7a6:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c7a8:	4b76      	ldr	r3, [pc, #472]	; (c984 <_usb_d_dev_handler+0x26c>)
    c7aa:	891b      	ldrh	r3, [r3, #8]
    c7ac:	f003 030f 	and.w	r3, r3, #15
    c7b0:	2b03      	cmp	r3, #3
    c7b2:	d014      	beq.n	c7de <_usb_d_dev_handler+0xc6>
    c7b4:	2301      	movs	r3, #1
    c7b6:	4873      	ldr	r0, [pc, #460]	; (c984 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    c7b8:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c7ba:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    c7be:	8912      	ldrh	r2, [r2, #8]
    c7c0:	f002 020f 	and.w	r2, r2, #15
    c7c4:	2a03      	cmp	r2, #3
    c7c6:	d00b      	beq.n	c7e0 <_usb_d_dev_handler+0xc8>
    c7c8:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c7ca:	2b05      	cmp	r3, #5
    c7cc:	d1f4      	bne.n	c7b8 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    c7ce:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    c7d0:	4b6c      	ldr	r3, [pc, #432]	; (c984 <_usb_d_dev_handler+0x26c>)
    c7d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    c7d6:	2003      	movs	r0, #3
    c7d8:	4798      	blx	r3
    c7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    c7de:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c7e0:	4b68      	ldr	r3, [pc, #416]	; (c984 <_usb_d_dev_handler+0x26c>)
    c7e2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    c7e6:	8919      	ldrh	r1, [r3, #8]
    c7e8:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    c7ec:	2200      	movs	r2, #0
    c7ee:	811a      	strh	r2, [r3, #8]
    c7f0:	e7ee      	b.n	c7d0 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c7f2:	2280      	movs	r2, #128	; 0x80
    c7f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c7f8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    c7fa:	4b62      	ldr	r3, [pc, #392]	; (c984 <_usb_d_dev_handler+0x26c>)
    c7fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    c800:	2100      	movs	r1, #0
    c802:	2005      	movs	r0, #5
    c804:	4798      	blx	r3
    c806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c80a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c80e:	2270      	movs	r2, #112	; 0x70
    c810:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c812:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c814:	f240 2201 	movw	r2, #513	; 0x201
    c818:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    c81a:	4b5b      	ldr	r3, [pc, #364]	; (c988 <_usb_d_dev_handler+0x270>)
    c81c:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    c820:	f013 0f01 	tst.w	r3, #1
    c824:	d00e      	beq.n	c844 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c826:	4a58      	ldr	r2, [pc, #352]	; (c988 <_usb_d_dev_handler+0x270>)
    c828:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    c82a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    c82e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    c832:	d1f9      	bne.n	c828 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    c834:	4b53      	ldr	r3, [pc, #332]	; (c984 <_usb_d_dev_handler+0x26c>)
    c836:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    c83a:	2100      	movs	r1, #0
    c83c:	2002      	movs	r0, #2
    c83e:	4798      	blx	r3
    c840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c844:	4a50      	ldr	r2, [pc, #320]	; (c988 <_usb_d_dev_handler+0x270>)
    c846:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    c848:	f413 7f80 	tst.w	r3, #256	; 0x100
    c84c:	d0fb      	beq.n	c846 <_usb_d_dev_handler+0x12e>
    c84e:	e7f1      	b.n	c834 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c850:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c854:	2400      	movs	r4, #0
    c856:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c85a:	2208      	movs	r2, #8
    c85c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c85e:	2270      	movs	r2, #112	; 0x70
    c860:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c862:	f240 2201 	movw	r2, #513	; 0x201
    c866:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    c868:	4b48      	ldr	r3, [pc, #288]	; (c98c <_usb_d_dev_handler+0x274>)
    c86a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    c86c:	4b45      	ldr	r3, [pc, #276]	; (c984 <_usb_d_dev_handler+0x26c>)
    c86e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    c872:	4621      	mov	r1, r4
    c874:	2001      	movs	r0, #1
    c876:	4798      	blx	r3
    c878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c87c:	f011 0f10 	tst.w	r1, #16
    c880:	d109      	bne.n	c896 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c882:	f011 0f40 	tst.w	r1, #64	; 0x40
    c886:	d108      	bne.n	c89a <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c888:	f011 0f20 	tst.w	r1, #32
    c88c:	d02f      	beq.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    c88e:	2100      	movs	r1, #0
    c890:	4b3f      	ldr	r3, [pc, #252]	; (c990 <_usb_d_dev_handler+0x278>)
    c892:	4798      	blx	r3
    c894:	e02b      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    c896:	47c8      	blx	r9
    c898:	e029      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    c89a:	2101      	movs	r1, #1
    c89c:	4b3c      	ldr	r3, [pc, #240]	; (c990 <_usb_d_dev_handler+0x278>)
    c89e:	4798      	blx	r3
    c8a0:	e025      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c8a2:	f011 0f40 	tst.w	r1, #64	; 0x40
    c8a6:	d111      	bne.n	c8cc <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c8a8:	f011 0f08 	tst.w	r1, #8
    c8ac:	d112      	bne.n	c8d4 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    c8ae:	f011 0f02 	tst.w	r1, #2
    c8b2:	d112      	bne.n	c8da <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c8b4:	f003 0307 	and.w	r3, r3, #7
    c8b8:	2b01      	cmp	r3, #1
    c8ba:	d118      	bne.n	c8ee <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c8bc:	f011 0f04 	tst.w	r1, #4
    c8c0:	d10f      	bne.n	c8e2 <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c8c2:	f011 0f10 	tst.w	r1, #16
    c8c6:	d012      	beq.n	c8ee <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    c8c8:	47c8      	blx	r9
    c8ca:	e010      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    c8cc:	2101      	movs	r1, #1
    c8ce:	4b30      	ldr	r3, [pc, #192]	; (c990 <_usb_d_dev_handler+0x278>)
    c8d0:	4798      	blx	r3
    c8d2:	e00c      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    c8d4:	2101      	movs	r1, #1
    c8d6:	47c0      	blx	r8
    c8d8:	e009      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    c8da:	2101      	movs	r1, #1
    c8dc:	4b2d      	ldr	r3, [pc, #180]	; (c994 <_usb_d_dev_handler+0x27c>)
    c8de:	4798      	blx	r3
    c8e0:	e005      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    c8e2:	2100      	movs	r1, #0
    c8e4:	47c0      	blx	r8
    c8e6:	e002      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    c8e8:	2100      	movs	r1, #0
    c8ea:	4b29      	ldr	r3, [pc, #164]	; (c990 <_usb_d_dev_handler+0x278>)
    c8ec:	4798      	blx	r3
    c8ee:	3401      	adds	r4, #1
    c8f0:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    c8f2:	2c1b      	cmp	r4, #27
    c8f4:	d042      	beq.n	c97c <_usb_d_dev_handler+0x264>
    c8f6:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    c8f8:	7cab      	ldrb	r3, [r5, #18]
    c8fa:	2bff      	cmp	r3, #255	; 0xff
    c8fc:	d0f7      	beq.n	c8ee <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    c8fe:	f003 030f 	and.w	r3, r3, #15
    c902:	2101      	movs	r1, #1
    c904:	4099      	lsls	r1, r3
    c906:	4231      	tst	r1, r6
    c908:	d0f1      	beq.n	c8ee <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c90a:	0159      	lsls	r1, r3, #5
    c90c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    c910:	f501 7180 	add.w	r1, r1, #256	; 0x100
    c914:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c916:	015b      	lsls	r3, r3, #5
    c918:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c91c:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    c920:	4019      	ands	r1, r3
    c922:	d0e4      	beq.n	c8ee <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c924:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    c928:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    c92c:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    c930:	f003 0247 	and.w	r2, r3, #71	; 0x47
    c934:	2a01      	cmp	r2, #1
    c936:	d0a1      	beq.n	c87c <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    c938:	f013 0f80 	tst.w	r3, #128	; 0x80
    c93c:	d1b1      	bne.n	c8a2 <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c93e:	f011 0f20 	tst.w	r1, #32
    c942:	d1d1      	bne.n	c8e8 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c944:	f011 0f04 	tst.w	r1, #4
    c948:	d10e      	bne.n	c968 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    c94a:	f011 0f01 	tst.w	r1, #1
    c94e:	d10e      	bne.n	c96e <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c950:	f003 0307 	and.w	r3, r3, #7
    c954:	2b01      	cmp	r3, #1
    c956:	d1ca      	bne.n	c8ee <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c958:	f011 0f08 	tst.w	r1, #8
    c95c:	d10b      	bne.n	c976 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c95e:	f011 0f10 	tst.w	r1, #16
    c962:	d0c4      	beq.n	c8ee <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    c964:	47c8      	blx	r9
    c966:	e7c2      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    c968:	2100      	movs	r1, #0
    c96a:	47c0      	blx	r8
    c96c:	e7bf      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    c96e:	2101      	movs	r1, #1
    c970:	4b09      	ldr	r3, [pc, #36]	; (c998 <_usb_d_dev_handler+0x280>)
    c972:	4798      	blx	r3
    c974:	e7bb      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    c976:	2101      	movs	r1, #1
    c978:	47c0      	blx	r8
    c97a:	e7b8      	b.n	c8ee <_usb_d_dev_handler+0x1d6>
    c97c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c980:	20000a7c 	.word	0x20000a7c
    c984:	200009a8 	.word	0x200009a8
    c988:	40001000 	.word	0x40001000
    c98c:	0000c361 	.word	0x0000c361
    c990:	0000c199 	.word	0x0000c199
    c994:	0000c3a5 	.word	0x0000c3a5
    c998:	0000c529 	.word	0x0000c529
    c99c:	0000c119 	.word	0x0000c119
    c9a0:	0000c261 	.word	0x0000c261

0000c9a4 <_usb_d_dev_init>:
{
    c9a4:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    c9a6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c9aa:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    c9ac:	f013 0f01 	tst.w	r3, #1
    c9b0:	d124      	bne.n	c9fc <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c9b2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c9b6:	7893      	ldrb	r3, [r2, #2]
    c9b8:	f013 0f03 	tst.w	r3, #3
    c9bc:	d1fb      	bne.n	c9b6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    c9be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c9c2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    c9c4:	f013 0f02 	tst.w	r3, #2
    c9c8:	d00f      	beq.n	c9ea <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    c9ca:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c9ce:	7813      	ldrb	r3, [r2, #0]
    c9d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c9d4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c9d6:	7893      	ldrb	r3, [r2, #2]
    c9d8:	f013 0f03 	tst.w	r3, #3
    c9dc:	d1fb      	bne.n	c9d6 <_usb_d_dev_init+0x32>
    c9de:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c9e2:	7893      	ldrb	r3, [r2, #2]
    c9e4:	f013 0f02 	tst.w	r3, #2
    c9e8:	d1fb      	bne.n	c9e2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c9ea:	2201      	movs	r2, #1
    c9ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c9f0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c9f2:	461a      	mov	r2, r3
    c9f4:	7893      	ldrb	r3, [r2, #2]
    c9f6:	f013 0f03 	tst.w	r3, #3
    c9fa:	d1fb      	bne.n	c9f4 <_usb_d_dev_init+0x50>
    c9fc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    ca00:	7893      	ldrb	r3, [r2, #2]
    ca02:	f013 0f01 	tst.w	r3, #1
    ca06:	d1fb      	bne.n	ca00 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    ca08:	4b24      	ldr	r3, [pc, #144]	; (ca9c <_usb_d_dev_init+0xf8>)
    ca0a:	4a25      	ldr	r2, [pc, #148]	; (caa0 <_usb_d_dev_init+0xfc>)
    ca0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    ca10:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    ca14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    ca18:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    ca1c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    ca20:	4b20      	ldr	r3, [pc, #128]	; (caa4 <_usb_d_dev_init+0x100>)
    ca22:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    ca24:	4b20      	ldr	r3, [pc, #128]	; (caa8 <_usb_d_dev_init+0x104>)
    ca26:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    ca28:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    ca2c:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    ca30:	f011 011f 	ands.w	r1, r1, #31
    ca34:	d02b      	beq.n	ca8e <_usb_d_dev_init+0xea>
		pad_transn = 9;
    ca36:	291f      	cmp	r1, #31
    ca38:	bf08      	it	eq
    ca3a:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    ca3c:	b34b      	cbz	r3, ca92 <_usb_d_dev_init+0xee>
		pad_transp = 25;
    ca3e:	2b1f      	cmp	r3, #31
    ca40:	bf08      	it	eq
    ca42:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    ca44:	b33a      	cbz	r2, ca96 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    ca46:	2a07      	cmp	r2, #7
    ca48:	bf08      	it	eq
    ca4a:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    ca4c:	f003 031f 	and.w	r3, r3, #31
    ca50:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    ca54:	0312      	lsls	r2, r2, #12
    ca56:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    ca5a:	4313      	orrs	r3, r2
    ca5c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    ca60:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    ca62:	78d3      	ldrb	r3, [r2, #3]
    ca64:	f043 0303 	orr.w	r3, r3, #3
    ca68:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    ca6a:	78d3      	ldrb	r3, [r2, #3]
    ca6c:	f043 030c 	orr.w	r3, r3, #12
    ca70:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    ca72:	2304      	movs	r3, #4
    ca74:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    ca76:	7893      	ldrb	r3, [r2, #2]
    ca78:	f013 0f03 	tst.w	r3, #3
    ca7c:	d1fb      	bne.n	ca76 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    ca7e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ca82:	4a06      	ldr	r2, [pc, #24]	; (ca9c <_usb_d_dev_init+0xf8>)
    ca84:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    ca86:	2201      	movs	r2, #1
    ca88:	811a      	strh	r2, [r3, #8]
}
    ca8a:	2000      	movs	r0, #0
    ca8c:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    ca8e:	2109      	movs	r1, #9
    ca90:	e7d4      	b.n	ca3c <_usb_d_dev_init+0x98>
		pad_transp = 25;
    ca92:	2319      	movs	r3, #25
    ca94:	e7d6      	b.n	ca44 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    ca96:	2206      	movs	r2, #6
    ca98:	e7d8      	b.n	ca4c <_usb_d_dev_init+0xa8>
    ca9a:	bf00      	nop
    ca9c:	200009a8 	.word	0x200009a8
    caa0:	0000c115 	.word	0x0000c115
    caa4:	0000c361 	.word	0x0000c361
    caa8:	00800084 	.word	0x00800084

0000caac <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    caac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cab0:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    cab2:	f013 0f03 	tst.w	r3, #3
    cab6:	d129      	bne.n	cb0c <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    cab8:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    cabc:	7893      	ldrb	r3, [r2, #2]
    cabe:	f013 0f03 	tst.w	r3, #3
    cac2:	d1fb      	bne.n	cabc <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    cac4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cac8:	781b      	ldrb	r3, [r3, #0]
    caca:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    cacc:	f013 0f02 	tst.w	r3, #2
    cad0:	d108      	bne.n	cae4 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    cad2:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    cad6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    cada:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    cadc:	7893      	ldrb	r3, [r2, #2]
    cade:	f013 0f03 	tst.w	r3, #3
    cae2:	d1fb      	bne.n	cadc <_usb_d_dev_enable+0x30>
    cae4:	4b0b      	ldr	r3, [pc, #44]	; (cb14 <_usb_d_dev_enable+0x68>)
    cae6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    caea:	609a      	str	r2, [r3, #8]
    caec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    caf0:	609a      	str	r2, [r3, #8]
    caf2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    caf6:	609a      	str	r2, [r3, #8]
    caf8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    cafc:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    cafe:	f240 228d 	movw	r2, #653	; 0x28d
    cb02:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cb06:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    cb08:	2000      	movs	r0, #0
    cb0a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    cb0c:	f06f 0010 	mvn.w	r0, #16
}
    cb10:	4770      	bx	lr
    cb12:	bf00      	nop
    cb14:	e000e100 	.word	0xe000e100

0000cb18 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    cb18:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    cb1c:	8913      	ldrh	r3, [r2, #8]
    cb1e:	f023 0301 	bic.w	r3, r3, #1
    cb22:	041b      	lsls	r3, r3, #16
    cb24:	0c1b      	lsrs	r3, r3, #16
    cb26:	8113      	strh	r3, [r2, #8]
    cb28:	4770      	bx	lr

0000cb2a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    cb2a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    cb2e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cb32:	7298      	strb	r0, [r3, #10]
    cb34:	4770      	bx	lr

0000cb36 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    cb36:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cb3a:	8a18      	ldrh	r0, [r3, #16]
}
    cb3c:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    cb40:	4770      	bx	lr
	...

0000cb44 <_usb_d_dev_ep_init>:
{
    cb44:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb46:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    cb4a:	f010 050f 	ands.w	r5, r0, #15
    cb4e:	d04d      	beq.n	cbec <_usb_d_dev_ep_init+0xa8>
    cb50:	f1be 0f00 	cmp.w	lr, #0
    cb54:	bfb4      	ite	lt
    cb56:	1d6c      	addlt	r4, r5, #5
    cb58:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    cb5a:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    cb5e:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    cb60:	2d05      	cmp	r5, #5
    cb62:	d947      	bls.n	cbf4 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    cb64:	f06f 0011 	mvn.w	r0, #17
    cb68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cb6a:	f1be 0f00 	cmp.w	lr, #0
    cb6e:	db1b      	blt.n	cba8 <_usb_d_dev_ep_init+0x64>
    cb70:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    cb74:	4e37      	ldr	r6, [pc, #220]	; (cc54 <_usb_d_dev_ep_init+0x110>)
    cb76:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    cb7a:	2d00      	cmp	r5, #0
    cb7c:	d15e      	bne.n	cc3c <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cb7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cb82:	4d34      	ldr	r5, [pc, #208]	; (cc54 <_usb_d_dev_ep_init+0x110>)
    cb84:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    cb88:	4d33      	ldr	r5, [pc, #204]	; (cc58 <_usb_d_dev_ep_init+0x114>)
    cb8a:	00a6      	lsls	r6, r4, #2
    cb8c:	1933      	adds	r3, r6, r4
    cb8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    cb92:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    cb96:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    cb9a:	3101      	adds	r1, #1
    cb9c:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    cba0:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    cba4:	2000      	movs	r0, #0
    cba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cba8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    cbac:	4e29      	ldr	r6, [pc, #164]	; (cc54 <_usb_d_dev_ep_init+0x110>)
    cbae:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    cbb2:	686d      	ldr	r5, [r5, #4]
    cbb4:	b935      	cbnz	r5, cbc4 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cbb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cbba:	4d26      	ldr	r5, [pc, #152]	; (cc54 <_usb_d_dev_ep_init+0x110>)
    cbbc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    cbc0:	685f      	ldr	r7, [r3, #4]
    cbc2:	e7e1      	b.n	cb88 <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cbc4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    cbc8:	4e22      	ldr	r6, [pc, #136]	; (cc54 <_usb_d_dev_ep_init+0x110>)
    cbca:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    cbce:	896d      	ldrh	r5, [r5, #10]
    cbd0:	4295      	cmp	r5, r2
    cbd2:	daf0      	bge.n	cbb6 <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    cbd4:	f06f 0012 	mvn.w	r0, #18
    cbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    cbda:	f06f 0013 	mvn.w	r0, #19
    cbde:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    cbe0:	f06f 0013 	mvn.w	r0, #19
    cbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    cbe6:	f06f 0012 	mvn.w	r0, #18
    cbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    cbec:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    cbf0:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    cbf2:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    cbf4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    cbf8:	4f17      	ldr	r7, [pc, #92]	; (cc58 <_usb_d_dev_ep_init+0x114>)
    cbfa:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    cbfe:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    cc02:	2eff      	cmp	r6, #255	; 0xff
    cc04:	d1e9      	bne.n	cbda <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    cc06:	2900      	cmp	r1, #0
    cc08:	d1af      	bne.n	cb6a <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    cc0a:	b125      	cbz	r5, cc16 <_usb_d_dev_ep_init+0xd2>
    cc0c:	f1be 0f00 	cmp.w	lr, #0
    cc10:	bfa4      	itt	ge
    cc12:	3505      	addge	r5, #5
    cc14:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    cc16:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cc1a:	4e0f      	ldr	r6, [pc, #60]	; (cc58 <_usb_d_dev_ep_init+0x114>)
    cc1c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    cc20:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    cc24:	2dff      	cmp	r5, #255	; 0xff
    cc26:	d1db      	bne.n	cbe0 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    cc28:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    cc2c:	4e09      	ldr	r6, [pc, #36]	; (cc54 <_usb_d_dev_ep_init+0x110>)
    cc2e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    cc32:	2d00      	cmp	r5, #0
    cc34:	d0d7      	beq.n	cbe6 <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cc36:	f1be 0f00 	cmp.w	lr, #0
    cc3a:	dbb5      	blt.n	cba8 <_usb_d_dev_ep_init+0x64>
    cc3c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    cc40:	4e04      	ldr	r6, [pc, #16]	; (cc54 <_usb_d_dev_ep_init+0x110>)
    cc42:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    cc46:	892d      	ldrh	r5, [r5, #8]
    cc48:	4295      	cmp	r5, r2
    cc4a:	da98      	bge.n	cb7e <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    cc4c:	f06f 0012 	mvn.w	r0, #18
    cc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc52:	bf00      	nop
    cc54:	00011a8c 	.word	0x00011a8c
    cc58:	200009a8 	.word	0x200009a8

0000cc5c <_usb_d_dev_ep_deinit>:
{
    cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc5e:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    cc60:	f010 060f 	ands.w	r6, r0, #15
    cc64:	d00e      	beq.n	cc84 <_usb_d_dev_ep_deinit+0x28>
    cc66:	2f00      	cmp	r7, #0
    cc68:	bfb4      	ite	lt
    cc6a:	1d73      	addlt	r3, r6, #5
    cc6c:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cc6e:	2e05      	cmp	r6, #5
    cc70:	d900      	bls.n	cc74 <_usb_d_dev_ep_deinit+0x18>
    cc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    cc74:	461d      	mov	r5, r3
    cc76:	3301      	adds	r3, #1
    cc78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cc7c:	4a24      	ldr	r2, [pc, #144]	; (cd10 <_usb_d_dev_ep_deinit+0xb4>)
    cc7e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    cc82:	e002      	b.n	cc8a <_usb_d_dev_ep_deinit+0x2e>
    cc84:	f8df e094 	ldr.w	lr, [pc, #148]	; cd1c <_usb_d_dev_ep_deinit+0xc0>
    cc88:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cc8a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    cc8e:	4a21      	ldr	r2, [pc, #132]	; (cd14 <_usb_d_dev_ep_deinit+0xb8>)
    cc90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cc94:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    cc98:	2aff      	cmp	r2, #255	; 0xff
    cc9a:	d0ea      	beq.n	cc72 <_usb_d_dev_ep_deinit+0x16>
    cc9c:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    cc9e:	2203      	movs	r2, #3
    cca0:	0ff9      	lsrs	r1, r7, #31
    cca2:	4670      	mov	r0, lr
    cca4:	4b1c      	ldr	r3, [pc, #112]	; (cd18 <_usb_d_dev_ep_deinit+0xbc>)
    cca6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    cca8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    ccac:	4a19      	ldr	r2, [pc, #100]	; (cd14 <_usb_d_dev_ep_deinit+0xb8>)
    ccae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ccb2:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    ccb6:	f003 0307 	and.w	r3, r3, #7
    ccba:	2b01      	cmp	r3, #1
    ccbc:	d016      	beq.n	ccec <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    ccbe:	2f00      	cmp	r7, #0
    ccc0:	db1b      	blt.n	ccfa <_usb_d_dev_ep_deinit+0x9e>
    ccc2:	0160      	lsls	r0, r4, #5
    ccc4:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    ccc8:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    cccc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    ccd0:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    ccd4:	4b0f      	ldr	r3, [pc, #60]	; (cd14 <_usb_d_dev_ep_deinit+0xb8>)
    ccd6:	00aa      	lsls	r2, r5, #2
    ccd8:	1951      	adds	r1, r2, r5
    ccda:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    ccde:	2000      	movs	r0, #0
    cce0:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    cce4:	22ff      	movs	r2, #255	; 0xff
    cce6:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    ccea:	e7c2      	b.n	cc72 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    ccec:	0160      	lsls	r0, r4, #5
    ccee:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    ccf2:	2300      	movs	r3, #0
    ccf4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    ccf8:	e7ec      	b.n	ccd4 <_usb_d_dev_ep_deinit+0x78>
    ccfa:	0176      	lsls	r6, r6, #5
    ccfc:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    cd00:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    cd04:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    cd08:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    cd0c:	e7e2      	b.n	ccd4 <_usb_d_dev_ep_deinit+0x78>
    cd0e:	bf00      	nop
    cd10:	20000a68 	.word	0x20000a68
    cd14:	200009a8 	.word	0x200009a8
    cd18:	0000c1f5 	.word	0x0000c1f5
    cd1c:	20000a7c 	.word	0x20000a7c

0000cd20 <_usb_d_dev_ep_enable>:
{
    cd20:	b4f0      	push	{r4, r5, r6, r7}
    cd22:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    cd24:	f010 000f 	ands.w	r0, r0, #15
    cd28:	f000 80a7 	beq.w	ce7a <_usb_d_dev_ep_enable+0x15a>
    cd2c:	2e00      	cmp	r6, #0
    cd2e:	bfb4      	ite	lt
    cd30:	1d43      	addlt	r3, r0, #5
    cd32:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    cd34:	4605      	mov	r5, r0
    cd36:	0142      	lsls	r2, r0, #5
    cd38:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    cd3c:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    cd40:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cd42:	2805      	cmp	r0, #5
    cd44:	f240 80a0 	bls.w	ce88 <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    cd48:	f06f 0011 	mvn.w	r0, #17
    cd4c:	e07d      	b.n	ce4a <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    cd4e:	f014 0f77 	tst.w	r4, #119	; 0x77
    cd52:	f040 8089 	bne.w	ce68 <_usb_d_dev_ep_enable+0x148>
    cd56:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    cd5a:	2111      	movs	r1, #17
    cd5c:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cd60:	4c9b      	ldr	r4, [pc, #620]	; (cfd0 <_usb_d_dev_ep_enable+0x2b0>)
    cd62:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    cd66:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    cd6a:	4c9a      	ldr	r4, [pc, #616]	; (cfd4 <_usb_d_dev_ep_enable+0x2b4>)
    cd6c:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cd70:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    cd74:	f200 80cd 	bhi.w	cf12 <_usb_d_dev_ep_enable+0x1f2>
    cd78:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    cd7c:	f200 8112 	bhi.w	cfa4 <_usb_d_dev_ep_enable+0x284>
    cd80:	2980      	cmp	r1, #128	; 0x80
    cd82:	f200 8101 	bhi.w	cf88 <_usb_d_dev_ep_enable+0x268>
    cd86:	2940      	cmp	r1, #64	; 0x40
    cd88:	f200 8113 	bhi.w	cfb2 <_usb_d_dev_ep_enable+0x292>
    cd8c:	2920      	cmp	r1, #32
    cd8e:	f200 8102 	bhi.w	cf96 <_usb_d_dev_ep_enable+0x276>
    cd92:	2910      	cmp	r1, #16
    cd94:	f200 8114 	bhi.w	cfc0 <_usb_d_dev_ep_enable+0x2a0>
    cd98:	2908      	cmp	r1, #8
    cd9a:	bf94      	ite	ls
    cd9c:	2600      	movls	r6, #0
    cd9e:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cda0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cda4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cda6:	f3c1 010d 	ubfx	r1, r1, #0, #14
    cdaa:	e0b8      	b.n	cf1e <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    cdac:	f014 0f70 	tst.w	r4, #112	; 0x70
    cdb0:	d15d      	bne.n	ce6e <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    cdb2:	4e87      	ldr	r6, [pc, #540]	; (cfd0 <_usb_d_dev_ep_enable+0x2b0>)
    cdb4:	009f      	lsls	r7, r3, #2
    cdb6:	18f9      	adds	r1, r7, r3
    cdb8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    cdbc:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    cdc0:	0109      	lsls	r1, r1, #4
    cdc2:	f001 0170 	and.w	r1, r1, #112	; 0x70
    cdc6:	430c      	orrs	r4, r1
    cdc8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    cdcc:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cdd0:	443b      	add	r3, r7
    cdd2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    cdd6:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    cdda:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cdde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    cde2:	d80f      	bhi.n	ce04 <_usb_d_dev_ep_enable+0xe4>
    cde4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    cde8:	d819      	bhi.n	ce1e <_usb_d_dev_ep_enable+0xfe>
    cdea:	2b80      	cmp	r3, #128	; 0x80
    cdec:	d819      	bhi.n	ce22 <_usb_d_dev_ep_enable+0x102>
    cdee:	2b40      	cmp	r3, #64	; 0x40
    cdf0:	d819      	bhi.n	ce26 <_usb_d_dev_ep_enable+0x106>
    cdf2:	2b20      	cmp	r3, #32
    cdf4:	d819      	bhi.n	ce2a <_usb_d_dev_ep_enable+0x10a>
    cdf6:	2b10      	cmp	r3, #16
    cdf8:	d819      	bhi.n	ce2e <_usb_d_dev_ep_enable+0x10e>
    cdfa:	2b08      	cmp	r3, #8
    cdfc:	bf94      	ite	ls
    cdfe:	2300      	movls	r3, #0
    ce00:	2301      	movhi	r3, #1
    ce02:	e000      	b.n	ce06 <_usb_d_dev_ep_enable+0xe6>
    ce04:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ce06:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    ce0a:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ce0c:	2380      	movs	r3, #128	; 0x80
    ce0e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    ce12:	4b6f      	ldr	r3, [pc, #444]	; (cfd0 <_usb_d_dev_ep_enable+0x2b0>)
    ce14:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    ce18:	2000      	movs	r0, #0
    ce1a:	76a8      	strb	r0, [r5, #26]
    ce1c:	e015      	b.n	ce4a <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ce1e:	2306      	movs	r3, #6
    ce20:	e7f1      	b.n	ce06 <_usb_d_dev_ep_enable+0xe6>
    ce22:	2305      	movs	r3, #5
    ce24:	e7ef      	b.n	ce06 <_usb_d_dev_ep_enable+0xe6>
    ce26:	2304      	movs	r3, #4
    ce28:	e7ed      	b.n	ce06 <_usb_d_dev_ep_enable+0xe6>
    ce2a:	2303      	movs	r3, #3
    ce2c:	e7eb      	b.n	ce06 <_usb_d_dev_ep_enable+0xe6>
    ce2e:	2302      	movs	r3, #2
    ce30:	e7e9      	b.n	ce06 <_usb_d_dev_ep_enable+0xe6>
    ce32:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ce34:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ce38:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    ce3a:	2340      	movs	r3, #64	; 0x40
    ce3c:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    ce40:	4b63      	ldr	r3, [pc, #396]	; (cfd0 <_usb_d_dev_ep_enable+0x2b0>)
    ce42:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    ce46:	2000      	movs	r0, #0
    ce48:	72a8      	strb	r0, [r5, #10]
}
    ce4a:	bcf0      	pop	{r4, r5, r6, r7}
    ce4c:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ce4e:	2106      	movs	r1, #6
    ce50:	e7f0      	b.n	ce34 <_usb_d_dev_ep_enable+0x114>
    ce52:	2105      	movs	r1, #5
    ce54:	e7ee      	b.n	ce34 <_usb_d_dev_ep_enable+0x114>
    ce56:	2104      	movs	r1, #4
    ce58:	e7ec      	b.n	ce34 <_usb_d_dev_ep_enable+0x114>
    ce5a:	2103      	movs	r1, #3
    ce5c:	e7ea      	b.n	ce34 <_usb_d_dev_ep_enable+0x114>
    ce5e:	2102      	movs	r1, #2
    ce60:	e7e8      	b.n	ce34 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    ce62:	f06f 0011 	mvn.w	r0, #17
    ce66:	e7f0      	b.n	ce4a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    ce68:	f06f 0013 	mvn.w	r0, #19
    ce6c:	e7ed      	b.n	ce4a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    ce6e:	f06f 0013 	mvn.w	r0, #19
    ce72:	e7ea      	b.n	ce4a <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    ce74:	f06f 0013 	mvn.w	r0, #19
    ce78:	e7e7      	b.n	ce4a <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ce7a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ce7e:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    ce82:	b2e4      	uxtb	r4, r4
    ce84:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    ce86:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ce88:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    ce8c:	4950      	ldr	r1, [pc, #320]	; (cfd0 <_usb_d_dev_ep_enable+0x2b0>)
    ce8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    ce92:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    ce96:	2aff      	cmp	r2, #255	; 0xff
    ce98:	d0e3      	beq.n	ce62 <_usb_d_dev_ep_enable+0x142>
    ce9a:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ce9c:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ce9e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    cea2:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    cea6:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    ceaa:	f001 0107 	and.w	r1, r1, #7
    ceae:	2901      	cmp	r1, #1
    ceb0:	f43f af4d 	beq.w	cd4e <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    ceb4:	2e00      	cmp	r6, #0
    ceb6:	f6ff af79 	blt.w	cdac <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    ceba:	f014 0f07 	tst.w	r4, #7
    cebe:	d1d9      	bne.n	ce74 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    cec0:	4e43      	ldr	r6, [pc, #268]	; (cfd0 <_usb_d_dev_ep_enable+0x2b0>)
    cec2:	009f      	lsls	r7, r3, #2
    cec4:	18f9      	adds	r1, r7, r3
    cec6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    ceca:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    cece:	f001 0107 	and.w	r1, r1, #7
    ced2:	430c      	orrs	r4, r1
    ced4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    ced8:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cedc:	443b      	add	r3, r7
    cede:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    cee2:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    cee6:	4b3b      	ldr	r3, [pc, #236]	; (cfd4 <_usb_d_dev_ep_enable+0x2b4>)
    cee8:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    ceec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    cef0:	d89f      	bhi.n	ce32 <_usb_d_dev_ep_enable+0x112>
    cef2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    cef6:	d8aa      	bhi.n	ce4e <_usb_d_dev_ep_enable+0x12e>
    cef8:	2980      	cmp	r1, #128	; 0x80
    cefa:	d8aa      	bhi.n	ce52 <_usb_d_dev_ep_enable+0x132>
    cefc:	2940      	cmp	r1, #64	; 0x40
    cefe:	d8aa      	bhi.n	ce56 <_usb_d_dev_ep_enable+0x136>
    cf00:	2920      	cmp	r1, #32
    cf02:	d8aa      	bhi.n	ce5a <_usb_d_dev_ep_enable+0x13a>
    cf04:	2910      	cmp	r1, #16
    cf06:	d8aa      	bhi.n	ce5e <_usb_d_dev_ep_enable+0x13e>
    cf08:	2908      	cmp	r1, #8
    cf0a:	bf94      	ite	ls
    cf0c:	2100      	movls	r1, #0
    cf0e:	2101      	movhi	r1, #1
    cf10:	e790      	b.n	ce34 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cf12:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cf16:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cf18:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cf1c:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cf1e:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    cf22:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cf24:	2640      	movs	r6, #64	; 0x40
    cf26:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cf2a:	2180      	movs	r1, #128	; 0x80
    cf2c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    cf30:	4f27      	ldr	r7, [pc, #156]	; (cfd0 <_usb_d_dev_ep_enable+0x2b0>)
    cf32:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    cf36:	2000      	movs	r0, #0
    cf38:	72a8      	strb	r0, [r5, #10]
    cf3a:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cf3c:	009c      	lsls	r4, r3, #2
    cf3e:	18e1      	adds	r1, r4, r3
    cf40:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    cf44:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    cf48:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cf4c:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    cf50:	0152      	lsls	r2, r2, #5
    cf52:	18b9      	adds	r1, r7, r2
    cf54:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    cf56:	4423      	add	r3, r4
    cf58:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    cf5c:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    cf60:	684b      	ldr	r3, [r1, #4]
    cf62:	f364 339b 	bfi	r3, r4, #14, #14
    cf66:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    cf68:	684b      	ldr	r3, [r1, #4]
    cf6a:	f360 030d 	bfi	r3, r0, #0, #14
    cf6e:	604b      	str	r3, [r1, #4]
    cf70:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    cf74:	21b0      	movs	r1, #176	; 0xb0
    cf76:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cf7a:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    cf7e:	461a      	mov	r2, r3
    cf80:	2310      	movs	r3, #16
    cf82:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    cf86:	e760      	b.n	ce4a <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cf88:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cf8c:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cf8e:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cf92:	2605      	movs	r6, #5
    cf94:	e7c3      	b.n	cf1e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cf96:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cf9a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cf9c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cfa0:	2603      	movs	r6, #3
    cfa2:	e7bc      	b.n	cf1e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cfa4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cfa8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cfaa:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cfae:	2606      	movs	r6, #6
    cfb0:	e7b5      	b.n	cf1e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cfb2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cfb6:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cfb8:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cfbc:	2604      	movs	r6, #4
    cfbe:	e7ae      	b.n	cf1e <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cfc0:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cfc4:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cfc6:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    cfca:	2602      	movs	r6, #2
    cfcc:	e7a7      	b.n	cf1e <_usb_d_dev_ep_enable+0x1fe>
    cfce:	bf00      	nop
    cfd0:	200009a8 	.word	0x200009a8
    cfd4:	0fffc000 	.word	0x0fffc000

0000cfd8 <_usb_d_dev_ep_stall>:
{
    cfd8:	b470      	push	{r4, r5, r6}
    cfda:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    cfdc:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    cfde:	f010 000f 	ands.w	r0, r0, #15
    cfe2:	d008      	beq.n	cff6 <_usb_d_dev_ep_stall+0x1e>
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	bfb4      	ite	lt
    cfe8:	1d43      	addlt	r3, r0, #5
    cfea:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    cfec:	2805      	cmp	r0, #5
    cfee:	d903      	bls.n	cff8 <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    cff0:	f06f 0011 	mvn.w	r0, #17
    cff4:	e018      	b.n	d028 <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    cff6:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    cff8:	2901      	cmp	r1, #1
    cffa:	d017      	beq.n	d02c <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    cffc:	2900      	cmp	r1, #0
    cffe:	d03a      	beq.n	d076 <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d000:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d004:	4a45      	ldr	r2, [pc, #276]	; (d11c <_usb_d_dev_ep_stall+0x144>)
    d006:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d00a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    d00e:	f003 030f 	and.w	r3, r3, #15
    d012:	015b      	lsls	r3, r3, #5
    d014:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    d018:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    d01c:	2310      	movs	r3, #16
    d01e:	40a3      	lsls	r3, r4
    d020:	421a      	tst	r2, r3
    d022:	bf14      	ite	ne
    d024:	2001      	movne	r0, #1
    d026:	2000      	moveq	r0, #0
}
    d028:	bc70      	pop	{r4, r5, r6}
    d02a:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    d02c:	2510      	movs	r5, #16
    d02e:	40a5      	lsls	r5, r4
    d030:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    d032:	493a      	ldr	r1, [pc, #232]	; (d11c <_usb_d_dev_ep_stall+0x144>)
    d034:	009e      	lsls	r6, r3, #2
    d036:	18f2      	adds	r2, r6, r3
    d038:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    d03c:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    d040:	f002 020f 	and.w	r2, r2, #15
    d044:	0150      	lsls	r0, r2, #5
    d046:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    d04a:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d04e:	2020      	movs	r0, #32
    d050:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    d054:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    d056:	0152      	lsls	r2, r2, #5
    d058:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    d05c:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    d060:	4433      	add	r3, r6
    d062:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d066:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    d06a:	f042 0208 	orr.w	r2, r2, #8
    d06e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    d072:	2000      	movs	r0, #0
    d074:	e7d8      	b.n	d028 <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    d076:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    d07a:	4928      	ldr	r1, [pc, #160]	; (d11c <_usb_d_dev_ep_stall+0x144>)
    d07c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    d080:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    d084:	f002 020f 	and.w	r2, r2, #15
    d088:	0151      	lsls	r1, r2, #5
    d08a:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    d08e:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    d092:	2010      	movs	r0, #16
    d094:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    d096:	4205      	tst	r5, r0
    d098:	d03c      	beq.n	d114 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    d09a:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    d09c:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    d0a0:	2020      	movs	r0, #32
    d0a2:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    d0a4:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    d0a6:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    d0aa:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    d0ae:	4202      	tst	r2, r0
    d0b0:	d007      	beq.n	d0c2 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    d0b2:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    d0b6:	2201      	movs	r2, #1
    d0b8:	fa02 f404 	lsl.w	r4, r2, r4
    d0bc:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    d0be:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    d0c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    d0c6:	4815      	ldr	r0, [pc, #84]	; (d11c <_usb_d_dev_ep_stall+0x144>)
    d0c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    d0cc:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    d0d0:	f002 0207 	and.w	r2, r2, #7
    d0d4:	2a01      	cmp	r2, #1
    d0d6:	d00c      	beq.n	d0f2 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    d0d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d0dc:	4a0f      	ldr	r2, [pc, #60]	; (d11c <_usb_d_dev_ep_stall+0x144>)
    d0de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d0e2:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    d0e6:	f36f 02c3 	bfc	r2, #3, #1
    d0ea:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    d0ee:	2000      	movs	r0, #0
    d0f0:	e79a      	b.n	d028 <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    d0f2:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    d0f6:	f012 0f30 	tst.w	r2, #48	; 0x30
    d0fa:	d10d      	bne.n	d118 <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    d0fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    d100:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d104:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    d108:	f36f 02c3 	bfc	r2, #3, #1
    d10c:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    d110:	2000      	movs	r0, #0
    d112:	e789      	b.n	d028 <_usb_d_dev_ep_stall+0x50>
    d114:	2000      	movs	r0, #0
    d116:	e787      	b.n	d028 <_usb_d_dev_ep_stall+0x50>
    d118:	2000      	movs	r0, #0
    d11a:	e785      	b.n	d028 <_usb_d_dev_ep_stall+0x50>
    d11c:	200009a8 	.word	0x200009a8

0000d120 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    d120:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    d122:	f000 040f 	and.w	r4, r0, #15
    d126:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    d128:	4a14      	ldr	r2, [pc, #80]	; (d17c <_usb_d_dev_ep_read_req+0x5c>)
    d12a:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    d12c:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    d12e:	6840      	ldr	r0, [r0, #4]
    d130:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    d134:	2c05      	cmp	r4, #5
    d136:	d817      	bhi.n	d168 <_usb_d_dev_ep_read_req+0x48>
    d138:	b1c9      	cbz	r1, d16e <_usb_d_dev_ep_read_req+0x4e>
    d13a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    d13e:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    d142:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    d144:	2a11      	cmp	r2, #17
    d146:	d115      	bne.n	d174 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    d148:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    d14c:	f012 0f10 	tst.w	r2, #16
    d150:	d102      	bne.n	d158 <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    d152:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    d154:	bc30      	pop	{r4, r5}
    d156:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    d158:	682c      	ldr	r4, [r5, #0]
    d15a:	686a      	ldr	r2, [r5, #4]
    d15c:	600c      	str	r4, [r1, #0]
    d15e:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    d160:	2210      	movs	r2, #16
    d162:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    d166:	e7f5      	b.n	d154 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    d168:	f06f 0011 	mvn.w	r0, #17
    d16c:	e7f2      	b.n	d154 <_usb_d_dev_ep_read_req+0x34>
    d16e:	f06f 0011 	mvn.w	r0, #17
    d172:	e7ef      	b.n	d154 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    d174:	f06f 0012 	mvn.w	r0, #18
    d178:	e7ec      	b.n	d154 <_usb_d_dev_ep_read_req+0x34>
    d17a:	bf00      	nop
    d17c:	200009a8 	.word	0x200009a8

0000d180 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d184:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    d186:	7a03      	ldrb	r3, [r0, #8]
    d188:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    d18a:	f013 030f 	ands.w	r3, r3, #15
    d18e:	f000 80c2 	beq.w	d316 <_usb_d_dev_ep_trans+0x196>
    d192:	2e00      	cmp	r6, #0
    d194:	bfb4      	ite	lt
    d196:	1d5a      	addlt	r2, r3, #5
    d198:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    d19a:	4614      	mov	r4, r2
    d19c:	4969      	ldr	r1, [pc, #420]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d19e:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    d1a2:	1c55      	adds	r5, r2, #1
    d1a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d1a8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    d1ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    d1b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    d1b4:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    d1b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    d1bc:	428a      	cmp	r2, r1
    d1be:	d025      	beq.n	d20c <_usb_d_dev_ep_trans+0x8c>
    d1c0:	1e55      	subs	r5, r2, #1
    d1c2:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    d1c4:	6841      	ldr	r1, [r0, #4]
    d1c6:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    d1c8:	2b05      	cmp	r3, #5
    d1ca:	f200 8092 	bhi.w	d2f2 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    d1ce:	6803      	ldr	r3, [r0, #0]
    d1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    d1d4:	d31c      	bcc.n	d210 <_usb_d_dev_ep_trans+0x90>
    d1d6:	eb03 0c01 	add.w	ip, r3, r1
    d1da:	f8df e180 	ldr.w	lr, [pc, #384]	; d35c <_usb_d_dev_ep_trans+0x1dc>
    d1de:	45f4      	cmp	ip, lr
    d1e0:	d816      	bhi.n	d210 <_usb_d_dev_ep_trans+0x90>
    d1e2:	f013 0f03 	tst.w	r3, #3
    d1e6:	d113      	bne.n	d210 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    d1e8:	2e00      	cmp	r6, #0
    d1ea:	db2a      	blt.n	d242 <_usb_d_dev_ep_trans+0xc2>
    d1ec:	428a      	cmp	r2, r1
    d1ee:	f200 809c 	bhi.w	d32a <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    d1f2:	b34d      	cbz	r5, d248 <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    d1f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d1f8:	4a52      	ldr	r2, [pc, #328]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d1fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d1fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    d202:	2b00      	cmp	r3, #0
    d204:	d07b      	beq.n	d2fe <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    d206:	f04f 0800 	mov.w	r8, #0
    d20a:	e00c      	b.n	d226 <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    d20c:	4615      	mov	r5, r2
    d20e:	e7d9      	b.n	d1c4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    d210:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d214:	4a4b      	ldr	r2, [pc, #300]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d216:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d21a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    d21e:	2b00      	cmp	r3, #0
    d220:	d06a      	beq.n	d2f8 <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    d222:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    d226:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d22a:	4a46      	ldr	r2, [pc, #280]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d22c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d230:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    d234:	f013 0f08 	tst.w	r3, #8
    d238:	d009      	beq.n	d24e <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    d23a:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    d23c:	b003      	add	sp, #12
    d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    d242:	f04f 0800 	mov.w	r8, #0
    d246:	e7ee      	b.n	d226 <_usb_d_dev_ep_trans+0xa6>
    d248:	f04f 0800 	mov.w	r8, #0
    d24c:	e7eb      	b.n	d226 <_usb_d_dev_ep_trans+0xa6>
    d24e:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    d250:	a801      	add	r0, sp, #4
    d252:	4b3d      	ldr	r3, [pc, #244]	; (d348 <_usb_d_dev_ep_trans+0x1c8>)
    d254:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    d256:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d25a:	4a3a      	ldr	r2, [pc, #232]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d25c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d260:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    d264:	f013 0f40 	tst.w	r3, #64	; 0x40
    d268:	d13c      	bne.n	d2e4 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    d26a:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    d26e:	4b35      	ldr	r3, [pc, #212]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d270:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    d274:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    d278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d27c:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    d280:	a801      	add	r0, sp, #4
    d282:	4b32      	ldr	r3, [pc, #200]	; (d34c <_usb_d_dev_ep_trans+0x1cc>)
    d284:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    d286:	f8da 3000 	ldr.w	r3, [sl]
    d28a:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    d28e:	f8da 3004 	ldr.w	r3, [sl, #4]
    d292:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    d296:	2300      	movs	r3, #0
    d298:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    d29c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    d29e:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    d2a2:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    d2a6:	f368 1345 	bfi	r3, r8, #5, #1
    d2aa:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    d2ae:	f89a 3009 	ldrb.w	r3, [sl, #9]
    d2b2:	b1e3      	cbz	r3, d2ee <_usb_d_dev_ep_trans+0x16e>
    d2b4:	fab5 f585 	clz	r5, r5
    d2b8:	096d      	lsrs	r5, r5, #5
    d2ba:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    d2be:	4b21      	ldr	r3, [pc, #132]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d2c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    d2c4:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    d2c8:	f365 1304 	bfi	r3, r5, #4, #1
    d2cc:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    d2d0:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    d2d2:	f04f 0100 	mov.w	r1, #0
    d2d6:	4638      	mov	r0, r7
    d2d8:	bfb4      	ite	lt
    d2da:	4b1d      	ldrlt	r3, [pc, #116]	; (d350 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    d2dc:	4b1d      	ldrge	r3, [pc, #116]	; (d354 <_usb_d_dev_ep_trans+0x1d4>)
    d2de:	4798      	blx	r3
	return ERR_NONE;
    d2e0:	2000      	movs	r0, #0
    d2e2:	e7ab      	b.n	d23c <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    d2e4:	a801      	add	r0, sp, #4
    d2e6:	4b19      	ldr	r3, [pc, #100]	; (d34c <_usb_d_dev_ep_trans+0x1cc>)
    d2e8:	4798      	blx	r3
		return USB_BUSY;
    d2ea:	2001      	movs	r0, #1
    d2ec:	e7a6      	b.n	d23c <_usb_d_dev_ep_trans+0xbc>
    d2ee:	2500      	movs	r5, #0
    d2f0:	e7e3      	b.n	d2ba <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    d2f2:	f06f 0011 	mvn.w	r0, #17
    d2f6:	e7a1      	b.n	d23c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    d2f8:	f06f 0012 	mvn.w	r0, #18
    d2fc:	e79e      	b.n	d23c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    d2fe:	f06f 0011 	mvn.w	r0, #17
    d302:	e79b      	b.n	d23c <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    d304:	f06f 0012 	mvn.w	r0, #18
    d308:	e798      	b.n	d23c <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    d30a:	6841      	ldr	r1, [r0, #4]
    d30c:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    d310:	4f11      	ldr	r7, [pc, #68]	; (d358 <_usb_d_dev_ep_trans+0x1d8>)
    d312:	2400      	movs	r4, #0
    d314:	e75b      	b.n	d1ce <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    d316:	4a0b      	ldr	r2, [pc, #44]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d318:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    d31c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    d320:	428a      	cmp	r2, r1
    d322:	d0f2      	beq.n	d30a <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    d324:	4f0c      	ldr	r7, [pc, #48]	; (d358 <_usb_d_dev_ep_trans+0x1d8>)
    d326:	2400      	movs	r4, #0
    d328:	e74a      	b.n	d1c0 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    d32a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    d32e:	4a05      	ldr	r2, [pc, #20]	; (d344 <_usb_d_dev_ep_trans+0x1c4>)
    d330:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    d338:	2b00      	cmp	r3, #0
    d33a:	d0e3      	beq.n	d304 <_usb_d_dev_ep_trans+0x184>
    d33c:	f04f 0801 	mov.w	r8, #1
    d340:	e771      	b.n	d226 <_usb_d_dev_ep_trans+0xa6>
    d342:	bf00      	nop
    d344:	200009a8 	.word	0x200009a8
    d348:	00009011 	.word	0x00009011
    d34c:	0000901f 	.word	0x0000901f
    d350:	0000c3a5 	.word	0x0000c3a5
    d354:	0000c529 	.word	0x0000c529
    d358:	20000a7c 	.word	0x20000a7c
    d35c:	20041fff 	.word	0x20041fff

0000d360 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    d360:	4b07      	ldr	r3, [pc, #28]	; (d380 <_usb_d_dev_register_callback+0x20>)
    d362:	2900      	cmp	r1, #0
    d364:	bf08      	it	eq
    d366:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    d368:	2801      	cmp	r0, #1
    d36a:	d004      	beq.n	d376 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    d36c:	b910      	cbnz	r0, d374 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    d36e:	4b05      	ldr	r3, [pc, #20]	; (d384 <_usb_d_dev_register_callback+0x24>)
    d370:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    d374:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    d376:	4b03      	ldr	r3, [pc, #12]	; (d384 <_usb_d_dev_register_callback+0x24>)
    d378:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    d37c:	4770      	bx	lr
    d37e:	bf00      	nop
    d380:	0000c115 	.word	0x0000c115
    d384:	200009a8 	.word	0x200009a8

0000d388 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    d388:	4b0a      	ldr	r3, [pc, #40]	; (d3b4 <_usb_d_dev_register_ep_callback+0x2c>)
    d38a:	2900      	cmp	r1, #0
    d38c:	bf08      	it	eq
    d38e:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    d390:	4603      	mov	r3, r0
    d392:	b138      	cbz	r0, d3a4 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    d394:	2801      	cmp	r0, #1
    d396:	d009      	beq.n	d3ac <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    d398:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    d39a:	bf04      	itt	eq
    d39c:	4b06      	ldreq	r3, [pc, #24]	; (d3b8 <_usb_d_dev_register_ep_callback+0x30>)
    d39e:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    d3a2:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    d3a4:	4b04      	ldr	r3, [pc, #16]	; (d3b8 <_usb_d_dev_register_ep_callback+0x30>)
    d3a6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    d3aa:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    d3ac:	4b02      	ldr	r3, [pc, #8]	; (d3b8 <_usb_d_dev_register_ep_callback+0x30>)
    d3ae:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    d3b2:	4770      	bx	lr
    d3b4:	0000c115 	.word	0x0000c115
    d3b8:	200009a8 	.word	0x200009a8

0000d3bc <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    d3bc:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    d3be:	4b01      	ldr	r3, [pc, #4]	; (d3c4 <USB_0_Handler+0x8>)
    d3c0:	4798      	blx	r3
    d3c2:	bd08      	pop	{r3, pc}
    d3c4:	0000c719 	.word	0x0000c719

0000d3c8 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    d3c8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    d3ca:	4b01      	ldr	r3, [pc, #4]	; (d3d0 <USB_1_Handler+0x8>)
    d3cc:	4798      	blx	r3
    d3ce:	bd08      	pop	{r3, pc}
    d3d0:	0000c719 	.word	0x0000c719

0000d3d4 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    d3d4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    d3d6:	4b01      	ldr	r3, [pc, #4]	; (d3dc <USB_2_Handler+0x8>)
    d3d8:	4798      	blx	r3
    d3da:	bd08      	pop	{r3, pc}
    d3dc:	0000c719 	.word	0x0000c719

0000d3e0 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    d3e0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    d3e2:	4b01      	ldr	r3, [pc, #4]	; (d3e8 <USB_3_Handler+0x8>)
    d3e4:	4798      	blx	r3
    d3e6:	bd08      	pop	{r3, pc}
    d3e8:	0000c719 	.word	0x0000c719

0000d3ec <_wdt_init>:
int32_t _wdt_init(struct wdt_dev *const dev)
{
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    d3ec:	6803      	ldr	r3, [r0, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    d3ee:	689a      	ldr	r2, [r3, #8]
    d3f0:	f012 0f0e 	tst.w	r2, #14
    d3f4:	d1fb      	bne.n	d3ee <_wdt_init+0x2>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    d3f6:	781a      	ldrb	r2, [r3, #0]
    d3f8:	09d2      	lsrs	r2, r2, #7
    d3fa:	d118      	bne.n	d42e <_wdt_init+0x42>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    d3fc:	689a      	ldr	r2, [r3, #8]
    d3fe:	f012 0f0e 	tst.w	r2, #14
    d402:	d1fb      	bne.n	d3fc <_wdt_init+0x10>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    d404:	781a      	ldrb	r2, [r3, #0]
    d406:	f012 0f02 	tst.w	r2, #2
    d40a:	d113      	bne.n	d434 <_wdt_init+0x48>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    d40c:	781a      	ldrb	r2, [r3, #0]
    d40e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    d412:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    d414:	689a      	ldr	r2, [r3, #8]
    d416:	f012 0f0e 	tst.w	r2, #14
    d41a:	d1fb      	bne.n	d414 <_wdt_init+0x28>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    d41c:	6802      	ldr	r2, [r0, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    d41e:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    d420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    d424:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    d428:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    d42a:	2000      	movs	r0, #0
    d42c:	4770      	bx	lr
		return ERR_DENIED;
    d42e:	f06f 0010 	mvn.w	r0, #16
    d432:	4770      	bx	lr
    d434:	f06f 0010 	mvn.w	r0, #16
}
    d438:	4770      	bx	lr
	...

0000d43c <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    d43c:	2201      	movs	r2, #1
    d43e:	4b01      	ldr	r3, [pc, #4]	; (d444 <RTC_Scheduler_report_cb+0x8>)
    d440:	701a      	strb	r2, [r3, #0]
    d442:	4770      	bx	lr
    d444:	20000d68 	.word	0x20000d68

0000d448 <RTC_Scheduler_heartbeat_cb>:
{
    d448:	b508      	push	{r3, lr}
	grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_HEARTBEAT);
    d44a:	2100      	movs	r1, #0
    d44c:	4801      	ldr	r0, [pc, #4]	; (d454 <RTC_Scheduler_heartbeat_cb+0xc>)
    d44e:	4b02      	ldr	r3, [pc, #8]	; (d458 <RTC_Scheduler_heartbeat_cb+0x10>)
    d450:	4798      	blx	r3
    d452:	bd08      	pop	{r3, pc}
    d454:	20003270 	.word	0x20003270
    d458:	0000894d 	.word	0x0000894d

0000d45c <RTC_Scheduler_ping_cb>:
{
    d45c:	b508      	push	{r3, lr}
	pingflag++;
    d45e:	4a11      	ldr	r2, [pc, #68]	; (d4a4 <RTC_Scheduler_ping_cb+0x48>)
    d460:	7853      	ldrb	r3, [r2, #1]
    d462:	3301      	adds	r3, #1
    d464:	b2db      	uxtb	r3, r3
    d466:	7053      	strb	r3, [r2, #1]
	switch (pingflag%4)
    d468:	7853      	ldrb	r3, [r2, #1]
    d46a:	f003 0303 	and.w	r3, r3, #3
    d46e:	2b03      	cmp	r3, #3
    d470:	d816      	bhi.n	d4a0 <RTC_Scheduler_ping_cb+0x44>
    d472:	e8df f003 	tbb	[pc, r3]
    d476:	0702      	.short	0x0702
    d478:	110c      	.short	0x110c
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_NORTH);
    d47a:	2101      	movs	r1, #1
    d47c:	480a      	ldr	r0, [pc, #40]	; (d4a8 <RTC_Scheduler_ping_cb+0x4c>)
    d47e:	4b0b      	ldr	r3, [pc, #44]	; (d4ac <RTC_Scheduler_ping_cb+0x50>)
    d480:	4798      	blx	r3
			break;
    d482:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_EAST);
    d484:	2102      	movs	r1, #2
    d486:	4808      	ldr	r0, [pc, #32]	; (d4a8 <RTC_Scheduler_ping_cb+0x4c>)
    d488:	4b08      	ldr	r3, [pc, #32]	; (d4ac <RTC_Scheduler_ping_cb+0x50>)
    d48a:	4798      	blx	r3
			break;
    d48c:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_SOUTH);
    d48e:	2103      	movs	r1, #3
    d490:	4805      	ldr	r0, [pc, #20]	; (d4a8 <RTC_Scheduler_ping_cb+0x4c>)
    d492:	4b06      	ldr	r3, [pc, #24]	; (d4ac <RTC_Scheduler_ping_cb+0x50>)
    d494:	4798      	blx	r3
			break;
    d496:	bd08      	pop	{r3, pc}
			grid_report_sys_set_changed_flag(&grid_ui_state, GRID_REPORT_INDEX_PING_WEST);
    d498:	2104      	movs	r1, #4
    d49a:	4803      	ldr	r0, [pc, #12]	; (d4a8 <RTC_Scheduler_ping_cb+0x4c>)
    d49c:	4b03      	ldr	r3, [pc, #12]	; (d4ac <RTC_Scheduler_ping_cb+0x50>)
    d49e:	4798      	blx	r3
    d4a0:	bd08      	pop	{r3, pc}
    d4a2:	bf00      	nop
    d4a4:	20000d68 	.word	0x20000d68
    d4a8:	20003270 	.word	0x20003270
    d4ac:	0000894d 	.word	0x0000894d

0000d4b0 <grid_task_timer_tick>:
void grid_task_timer_tick(struct grid_task_model* mod){
    d4b0:	7843      	ldrb	r3, [r0, #1]
    d4b2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	mod->timer[mod->current_task]++;
    d4b6:	6843      	ldr	r3, [r0, #4]
    d4b8:	3301      	adds	r3, #1
    d4ba:	6043      	str	r3, [r0, #4]
    d4bc:	4770      	bx	lr
	...

0000d4c0 <RTC_Scheduler_realtime_cb>:
{
    d4c0:	b510      	push	{r4, lr}
    d4c2:	b082      	sub	sp, #8
	grid_sys_rtc_tick_time(&grid_sys_state);	
    d4c4:	481b      	ldr	r0, [pc, #108]	; (d534 <RTC_Scheduler_realtime_cb+0x74>)
    d4c6:	4b1c      	ldr	r3, [pc, #112]	; (d538 <RTC_Scheduler_realtime_cb+0x78>)
    d4c8:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    d4ca:	481c      	ldr	r0, [pc, #112]	; (d53c <RTC_Scheduler_realtime_cb+0x7c>)
    d4cc:	4b1c      	ldr	r3, [pc, #112]	; (d540 <RTC_Scheduler_realtime_cb+0x80>)
    d4ce:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    d4d0:	a801      	add	r0, sp, #4
    d4d2:	4b1c      	ldr	r3, [pc, #112]	; (d544 <RTC_Scheduler_realtime_cb+0x84>)
    d4d4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    d4d6:	4b1c      	ldr	r3, [pc, #112]	; (d548 <RTC_Scheduler_realtime_cb+0x88>)
    d4d8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    d4dc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    d4e0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    d4e4:	4054      	eors	r4, r2
    d4e6:	400c      	ands	r4, r1
    d4e8:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    d4ea:	a801      	add	r0, sp, #4
    d4ec:	4b17      	ldr	r3, [pc, #92]	; (d54c <RTC_Scheduler_realtime_cb+0x8c>)
    d4ee:	4798      	blx	r3
	if (mapmode_value != mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0]){
    d4f0:	4b17      	ldr	r3, [pc, #92]	; (d550 <RTC_Scheduler_realtime_cb+0x90>)
    d4f2:	685b      	ldr	r3, [r3, #4]
    d4f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    d4f6:	781a      	ldrb	r2, [r3, #0]
    d4f8:	f3c4 24c0 	ubfx	r4, r4, #11, #1
    d4fc:	4294      	cmp	r4, r2
    d4fe:	d002      	beq.n	d506 <RTC_Scheduler_realtime_cb+0x46>
		if (mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] == 0){
    d500:	b91a      	cbnz	r2, d50a <RTC_Scheduler_realtime_cb+0x4a>
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 1;
    d502:	2201      	movs	r2, #1
    d504:	701a      	strb	r2, [r3, #0]
}
    d506:	b002      	add	sp, #8
    d508:	bd10      	pop	{r4, pc}
			mod->report_array[GRID_REPORT_INDEX_MAPMODE].helper[0] = 0;
    d50a:	2200      	movs	r2, #0
    d50c:	701a      	strb	r2, [r3, #0]
 			grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    d50e:	4b09      	ldr	r3, [pc, #36]	; (d534 <RTC_Scheduler_realtime_cb+0x74>)
    d510:	7a5a      	ldrb	r2, [r3, #9]
    d512:	3201      	adds	r2, #1
    d514:	f002 0201 	and.w	r2, r2, #1
    d518:	4c0d      	ldr	r4, [pc, #52]	; (d550 <RTC_Scheduler_realtime_cb+0x90>)
    d51a:	6863      	ldr	r3, [r4, #4]
    d51c:	6d58      	ldr	r0, [r3, #84]	; 0x54
    d51e:	bf48      	it	mi
    d520:	4252      	negmi	r2, r2
    d522:	2102      	movs	r1, #2
    d524:	3007      	adds	r0, #7
    d526:	4b0b      	ldr	r3, [pc, #44]	; (d554 <RTC_Scheduler_realtime_cb+0x94>)
    d528:	4798      	blx	r3
 			grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    d52a:	2105      	movs	r1, #5
    d52c:	4620      	mov	r0, r4
    d52e:	4b0a      	ldr	r3, [pc, #40]	; (d558 <RTC_Scheduler_realtime_cb+0x98>)
    d530:	4798      	blx	r3
}
    d532:	e7e8      	b.n	d506 <RTC_Scheduler_realtime_cb+0x46>
    d534:	20003280 	.word	0x20003280
    d538:	00008113 	.word	0x00008113
    d53c:	20007d20 	.word	0x20007d20
    d540:	0000d4b1 	.word	0x0000d4b1
    d544:	00009011 	.word	0x00009011
    d548:	41008000 	.word	0x41008000
    d54c:	0000901f 	.word	0x0000901f
    d550:	20003270 	.word	0x20003270
    d554:	00008201 	.word	0x00008201
    d558:	0000894d 	.word	0x0000894d

0000d55c <grid_task_timer_reset>:
void grid_task_timer_reset(struct grid_task_model* mod){
    d55c:	1d03      	adds	r3, r0, #4
    d55e:	3024      	adds	r0, #36	; 0x24
		mod->timer[i] = 0;
    d560:	2200      	movs	r2, #0
    d562:	f843 2b04 	str.w	r2, [r3], #4
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
    d566:	4283      	cmp	r3, r0
    d568:	d1fb      	bne.n	d562 <grid_task_timer_reset+0x6>
}
    d56a:	4770      	bx	lr

0000d56c <grid_port_reset_receiver>:
void grid_port_reset_receiver(struct grid_port* por){
    d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d56e:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    d570:	6880      	ldr	r0, [r0, #8]
    d572:	4b19      	ldr	r3, [pc, #100]	; (d5d8 <grid_port_reset_receiver+0x6c>)
    d574:	4798      	blx	r3
	por->rx_double_buffer_seek_start_index = 0;
    d576:	2500      	movs	r5, #0
    d578:	62a5      	str	r5, [r4, #40]	; 0x28
	por->rx_double_buffer_read_start_index = 0;
    d57a:	62e5      	str	r5, [r4, #44]	; 0x2c
	por->partner_status = 0;
    d57c:	f241 0307 	movw	r3, #4103	; 0x1007
    d580:	54e5      	strb	r5, [r4, r3]
	struct grid_ui_report* stored_report = por->ping_report;
    d582:	6866      	ldr	r6, [r4, #4]
	grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    d584:	6870      	ldr	r0, [r6, #4]
    d586:	22ff      	movs	r2, #255	; 0xff
    d588:	2102      	movs	r1, #2
    d58a:	3008      	adds	r0, #8
    d58c:	4f13      	ldr	r7, [pc, #76]	; (d5dc <grid_port_reset_receiver+0x70>)
    d58e:	47b8      	blx	r7
	grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    d590:	6870      	ldr	r0, [r6, #4]
    d592:	22ff      	movs	r2, #255	; 0xff
    d594:	2102      	movs	r1, #2
    d596:	3006      	adds	r0, #6
    d598:	47b8      	blx	r7
	grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    d59a:	6877      	ldr	r7, [r6, #4]
    d59c:	78b6      	ldrb	r6, [r6, #2]
    d59e:	4631      	mov	r1, r6
    d5a0:	4638      	mov	r0, r7
    d5a2:	4b0f      	ldr	r3, [pc, #60]	; (d5e0 <grid_port_reset_receiver+0x74>)
    d5a4:	4798      	blx	r3
    d5a6:	4602      	mov	r2, r0
    d5a8:	4631      	mov	r1, r6
    d5aa:	4638      	mov	r0, r7
    d5ac:	4b0d      	ldr	r3, [pc, #52]	; (d5e4 <grid_port_reset_receiver+0x78>)
    d5ae:	4798      	blx	r3
	por->rx_double_buffer_timeout = 0;
    d5b0:	6225      	str	r5, [r4, #32]
	grid_sys_port_reset_dma(por);
    d5b2:	4620      	mov	r0, r4
    d5b4:	4b0c      	ldr	r3, [pc, #48]	; (d5e8 <grid_port_reset_receiver+0x7c>)
    d5b6:	4798      	blx	r3
		por->rx_double_buffer[por->rx_double_buffer_seek_start_index] = 0;
    d5b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d5ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    d5be:	3b01      	subs	r3, #1
    d5c0:	b29b      	uxth	r3, r3
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    d5c2:	2b00      	cmp	r3, #0
    d5c4:	d1fb      	bne.n	d5be <grid_port_reset_receiver+0x52>
    d5c6:	18a3      	adds	r3, r4, r2
    d5c8:	2200      	movs	r2, #0
    d5ca:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
	usart_async_enable(por->usart);
    d5ce:	68a0      	ldr	r0, [r4, #8]
    d5d0:	4b06      	ldr	r3, [pc, #24]	; (d5ec <grid_port_reset_receiver+0x80>)
    d5d2:	4798      	blx	r3
    d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d5d6:	bf00      	nop
    d5d8:	0000981d 	.word	0x0000981d
    d5dc:	00008201 	.word	0x00008201
    d5e0:	000084d5 	.word	0x000084d5
    d5e4:	00008511 	.word	0x00008511
    d5e8:	00007e71 	.word	0x00007e71
    d5ec:	0000980d 	.word	0x0000980d

0000d5f0 <grid_port_receive_task>:
	if	(por->rx_double_buffer_status != 0){
    d5f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    d5f2:	2b00      	cmp	r3, #0
    d5f4:	f040 80bc 	bne.w	d770 <grid_port_receive_task+0x180>
void grid_port_receive_task(struct grid_port* por){
    d5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5fc:	b082      	sub	sp, #8
    d5fe:	4604      	mov	r4, r0
	if (por->rx_double_buffer_timeout > 1000){
    d600:	6a03      	ldr	r3, [r0, #32]
    d602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    d606:	d92c      	bls.n	d662 <grid_port_receive_task+0x72>
		if (por->partner_status == 1){
    d608:	f241 0307 	movw	r3, #4103	; 0x1007
    d60c:	5cc3      	ldrb	r3, [r0, r3]
    d60e:	2b01      	cmp	r3, #1
    d610:	d015      	beq.n	d63e <grid_port_receive_task+0x4e>
			if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    d612:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    d614:	b90b      	cbnz	r3, d61a <grid_port_receive_task+0x2a>
    d616:	6a83      	ldr	r3, [r0, #40]	; 0x28
    d618:	b32b      	cbz	r3, d666 <grid_port_receive_task+0x76>
				GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    d61a:	4956      	ldr	r1, [pc, #344]	; (d774 <grid_port_receive_task+0x184>)
    d61c:	4856      	ldr	r0, [pc, #344]	; (d778 <grid_port_receive_task+0x188>)
    d61e:	4b57      	ldr	r3, [pc, #348]	; (d77c <grid_port_receive_task+0x18c>)
    d620:	4798      	blx	r3
				grid_port_reset_receiver(por);
    d622:	4620      	mov	r0, r4
    d624:	4b56      	ldr	r3, [pc, #344]	; (d780 <grid_port_receive_task+0x190>)
    d626:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    d628:	23c8      	movs	r3, #200	; 0xc8
    d62a:	9301      	str	r3, [sp, #4]
    d62c:	2302      	movs	r3, #2
    d62e:	9300      	str	r3, [sp, #0]
    d630:	23ff      	movs	r3, #255	; 0xff
    d632:	461a      	mov	r2, r3
    d634:	4619      	mov	r1, r3
    d636:	4853      	ldr	r0, [pc, #332]	; (d784 <grid_port_receive_task+0x194>)
    d638:	4d53      	ldr	r5, [pc, #332]	; (d788 <grid_port_receive_task+0x198>)
    d63a:	47a8      	blx	r5
    d63c:	e013      	b.n	d666 <grid_port_receive_task+0x76>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    d63e:	4953      	ldr	r1, [pc, #332]	; (d78c <grid_port_receive_task+0x19c>)
    d640:	484d      	ldr	r0, [pc, #308]	; (d778 <grid_port_receive_task+0x188>)
    d642:	4b4e      	ldr	r3, [pc, #312]	; (d77c <grid_port_receive_task+0x18c>)
    d644:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    d646:	4620      	mov	r0, r4
    d648:	4b4d      	ldr	r3, [pc, #308]	; (d780 <grid_port_receive_task+0x190>)
    d64a:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    d64c:	23c8      	movs	r3, #200	; 0xc8
    d64e:	9301      	str	r3, [sp, #4]
    d650:	2302      	movs	r3, #2
    d652:	9300      	str	r3, [sp, #0]
    d654:	23ff      	movs	r3, #255	; 0xff
    d656:	461a      	mov	r2, r3
    d658:	4619      	mov	r1, r3
    d65a:	484a      	ldr	r0, [pc, #296]	; (d784 <grid_port_receive_task+0x194>)
    d65c:	4d4a      	ldr	r5, [pc, #296]	; (d788 <grid_port_receive_task+0x198>)
    d65e:	47a8      	blx	r5
    d660:	e001      	b.n	d666 <grid_port_receive_task+0x76>
		por->rx_double_buffer_timeout++;
    d662:	3301      	adds	r3, #1
    d664:	6203      	str	r3, [r0, #32]
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    d666:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d668:	18e2      	adds	r2, r4, r3
    d66a:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    d66e:	2a0a      	cmp	r2, #10
    d670:	d010      	beq.n	d694 <grid_port_receive_task+0xa4>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    d672:	b19a      	cbz	r2, d69c <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    d674:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d676:	1e51      	subs	r1, r2, #1
    d678:	428b      	cmp	r3, r1
    d67a:	d012      	beq.n	d6a2 <grid_port_receive_task+0xb2>
    d67c:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    d680:	f240 76cf 	movw	r6, #1999	; 0x7cf
			por->rx_double_buffer_timeout = 0;
    d684:	2500      	movs	r5, #0
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    d686:	f8df e114 	ldr.w	lr, [pc, #276]	; d79c <grid_port_receive_task+0x1ac>
    d68a:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    d68e:	f240 7cce 	movw	ip, #1998	; 0x7ce
    d692:	e05c      	b.n	d74e <grid_port_receive_task+0x15e>
			por->rx_double_buffer_status = 1;
    d694:	2301      	movs	r3, #1
    d696:	6263      	str	r3, [r4, #36]	; 0x24
			por->rx_double_buffer_timeout = 0;
    d698:	2300      	movs	r3, #0
    d69a:	6223      	str	r3, [r4, #32]
}
    d69c:	b002      	add	sp, #8
    d69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 1");
    d6a2:	493b      	ldr	r1, [pc, #236]	; (d790 <grid_port_receive_task+0x1a0>)
    d6a4:	4834      	ldr	r0, [pc, #208]	; (d778 <grid_port_receive_task+0x188>)
    d6a6:	4b35      	ldr	r3, [pc, #212]	; (d77c <grid_port_receive_task+0x18c>)
    d6a8:	4798      	blx	r3
			grid_port_reset_receiver(por);
    d6aa:	4620      	mov	r0, r4
    d6ac:	4b34      	ldr	r3, [pc, #208]	; (d780 <grid_port_receive_task+0x190>)
    d6ae:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    d6b0:	23c8      	movs	r3, #200	; 0xc8
    d6b2:	9301      	str	r3, [sp, #4]
    d6b4:	2302      	movs	r3, #2
    d6b6:	9300      	str	r3, [sp, #0]
    d6b8:	2300      	movs	r3, #0
    d6ba:	461a      	mov	r2, r3
    d6bc:	21ff      	movs	r1, #255	; 0xff
    d6be:	4831      	ldr	r0, [pc, #196]	; (d784 <grid_port_receive_task+0x194>)
    d6c0:	4c31      	ldr	r4, [pc, #196]	; (d788 <grid_port_receive_task+0x198>)
    d6c2:	47a0      	blx	r4
			return;	
    d6c4:	e7ea      	b.n	d69c <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    d6c6:	b16a      	cbz	r2, d6e4 <grid_port_receive_task+0xf4>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    d6c8:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    d6cc:	fbae 1302 	umull	r1, r3, lr, r2
    d6d0:	09db      	lsrs	r3, r3, #7
    d6d2:	fb07 2213 	mls	r2, r7, r3, r2
    d6d6:	4422      	add	r2, r4
    d6d8:	f892 3800 	ldrb.w	r3, [r2, #2048]	; 0x800
    d6dc:	b9a3      	cbnz	r3, d708 <grid_port_receive_task+0x118>
			por->rx_double_buffer_timeout = 0;
    d6de:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index=0;
    d6e0:	62a5      	str	r5, [r4, #40]	; 0x28
    d6e2:	e026      	b.n	d732 <grid_port_receive_task+0x142>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 2");
    d6e4:	492b      	ldr	r1, [pc, #172]	; (d794 <grid_port_receive_task+0x1a4>)
    d6e6:	4824      	ldr	r0, [pc, #144]	; (d778 <grid_port_receive_task+0x188>)
    d6e8:	4b24      	ldr	r3, [pc, #144]	; (d77c <grid_port_receive_task+0x18c>)
    d6ea:	4798      	blx	r3
			grid_port_reset_receiver(por);
    d6ec:	4620      	mov	r0, r4
    d6ee:	4b24      	ldr	r3, [pc, #144]	; (d780 <grid_port_receive_task+0x190>)
    d6f0:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    d6f2:	23c8      	movs	r3, #200	; 0xc8
    d6f4:	9301      	str	r3, [sp, #4]
    d6f6:	2302      	movs	r3, #2
    d6f8:	9300      	str	r3, [sp, #0]
    d6fa:	2300      	movs	r3, #0
    d6fc:	461a      	mov	r2, r3
    d6fe:	21ff      	movs	r1, #255	; 0xff
    d700:	4820      	ldr	r0, [pc, #128]	; (d784 <grid_port_receive_task+0x194>)
    d702:	4c21      	ldr	r4, [pc, #132]	; (d788 <grid_port_receive_task+0x198>)
    d704:	47a0      	blx	r4
			return;
    d706:	e7c9      	b.n	d69c <grid_port_receive_task+0xac>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "rx_double_buffer overrun 3");
    d708:	4923      	ldr	r1, [pc, #140]	; (d798 <grid_port_receive_task+0x1a8>)
    d70a:	481b      	ldr	r0, [pc, #108]	; (d778 <grid_port_receive_task+0x188>)
    d70c:	4b1b      	ldr	r3, [pc, #108]	; (d77c <grid_port_receive_task+0x18c>)
    d70e:	4798      	blx	r3
			grid_port_reset_receiver(por);	
    d710:	4620      	mov	r0, r4
    d712:	4b1b      	ldr	r3, [pc, #108]	; (d780 <grid_port_receive_task+0x190>)
    d714:	4798      	blx	r3
			grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200);
    d716:	23c8      	movs	r3, #200	; 0xc8
    d718:	9301      	str	r3, [sp, #4]
    d71a:	2302      	movs	r3, #2
    d71c:	9300      	str	r3, [sp, #0]
    d71e:	2300      	movs	r3, #0
    d720:	461a      	mov	r2, r3
    d722:	21ff      	movs	r1, #255	; 0xff
    d724:	4817      	ldr	r0, [pc, #92]	; (d784 <grid_port_receive_task+0x194>)
    d726:	4c18      	ldr	r4, [pc, #96]	; (d788 <grid_port_receive_task+0x198>)
    d728:	47a0      	blx	r4
			return;
    d72a:	e7b7      	b.n	d69c <grid_port_receive_task+0xac>
			por->rx_double_buffer_timeout = 0;
    d72c:	6225      	str	r5, [r4, #32]
			por->rx_double_buffer_seek_start_index++;			
    d72e:	3301      	adds	r3, #1
    d730:	62a3      	str	r3, [r4, #40]	; 0x28
	for(uint32_t i = 0; i<490; i++){
    d732:	3801      	subs	r0, #1
    d734:	d0b2      	beq.n	d69c <grid_port_receive_task+0xac>
		if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    d736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d738:	18e2      	adds	r2, r4, r3
    d73a:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    d73e:	2a0a      	cmp	r2, #10
    d740:	d0a8      	beq.n	d694 <grid_port_receive_task+0xa4>
		else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    d742:	2a00      	cmp	r2, #0
    d744:	d0aa      	beq.n	d69c <grid_port_receive_task+0xac>
		if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1){
    d746:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d748:	1e51      	subs	r1, r2, #1
    d74a:	428b      	cmp	r3, r1
    d74c:	d0a9      	beq.n	d6a2 <grid_port_receive_task+0xb2>
		if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0){			
    d74e:	42b3      	cmp	r3, r6
    d750:	d0b9      	beq.n	d6c6 <grid_port_receive_task+0xd6>
		if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0){	
    d752:	f202 72cf 	addw	r2, r2, #1999	; 0x7cf
    d756:	fbae 8102 	umull	r8, r1, lr, r2
    d75a:	09c9      	lsrs	r1, r1, #7
    d75c:	fb07 2211 	mls	r2, r7, r1, r2
    d760:	4422      	add	r2, r4
    d762:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
    d766:	2a00      	cmp	r2, #0
    d768:	d1ce      	bne.n	d708 <grid_port_receive_task+0x118>
		if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    d76a:	4563      	cmp	r3, ip
    d76c:	d9de      	bls.n	d72c <grid_port_receive_task+0x13c>
    d76e:	e7b6      	b.n	d6de <grid_port_receive_task+0xee>
    d770:	4770      	bx	lr
    d772:	bf00      	nop
    d774:	00011af8 	.word	0x00011af8
    d778:	000113ac 	.word	0x000113ac
    d77c:	0001002d 	.word	0x0001002d
    d780:	0000d56d 	.word	0x0000d56d
    d784:	20003280 	.word	0x20003280
    d788:	0000816d 	.word	0x0000816d
    d78c:	00011ad4 	.word	0x00011ad4
    d790:	00011b14 	.word	0x00011b14
    d794:	00011b30 	.word	0x00011b30
    d798:	00011b4c 	.word	0x00011b4c
    d79c:	10624dd3 	.word	0x10624dd3

0000d7a0 <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint32_t startcommand, uint32_t len){
    d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7a4:	b087      	sub	sp, #28
    d7a6:	af02      	add	r7, sp, #8
    d7a8:	4606      	mov	r6, r0
    d7aa:	4690      	mov	r8, r2
	uint8_t buffer[length];			
    d7ac:	1dd3      	adds	r3, r2, #7
    d7ae:	f023 0307 	bic.w	r3, r3, #7
    d7b2:	ebad 0d03 	sub.w	sp, sp, r3
    d7b6:	ad02      	add	r5, sp, #8
	for (uint32_t i = 0; i<length; i++){
    d7b8:	2a00      	cmp	r2, #0
    d7ba:	f000 8239 	beq.w	dc30 <grid_port_receive_decode+0x490>
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    d7be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    d7c0:	eb05 0908 	add.w	r9, r5, r8
    d7c4:	4629      	mov	r1, r5
    d7c6:	eba2 0c05 	sub.w	ip, r2, r5
    d7ca:	f8df e2ec 	ldr.w	lr, [pc, #748]	; dab8 <grid_port_receive_decode+0x318>
    d7ce:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    d7d2:	2000      	movs	r0, #0
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    d7d4:	eb0c 0a01 	add.w	sl, ip, r1
    d7d8:	fbae b30a 	umull	fp, r3, lr, sl
    d7dc:	09db      	lsrs	r3, r3, #7
    d7de:	fb04 a313 	mls	r3, r4, r3, sl
    d7e2:	4433      	add	r3, r6
    d7e4:	f893 a800 	ldrb.w	sl, [r3, #2048]	; 0x800
    d7e8:	f801 ab01 	strb.w	sl, [r1], #1
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    d7ec:	f883 0800 	strb.w	r0, [r3, #2048]	; 0x800
	for (uint32_t i = 0; i<length; i++){
    d7f0:	4549      	cmp	r1, r9
    d7f2:	d1ef      	bne.n	d7d4 <grid_port_receive_decode+0x34>
	message = &buffer[0];
    d7f4:	46aa      	mov	sl, r5
    d7f6:	eb08 0e02 	add.w	lr, r8, r2
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    d7fa:	4caf      	ldr	r4, [pc, #700]	; (dab8 <grid_port_receive_decode+0x318>)
    d7fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    d800:	2100      	movs	r1, #0
    d802:	fba4 c302 	umull	ip, r3, r4, r2
    d806:	09db      	lsrs	r3, r3, #7
    d808:	fb00 2313 	mls	r3, r0, r3, r2
    d80c:	4433      	add	r3, r6
    d80e:	f883 1800 	strb.w	r1, [r3, #2048]	; 0x800
    d812:	3201      	adds	r2, #1
	for (uint32_t i = 0; i<length; i++){
    d814:	4572      	cmp	r2, lr
    d816:	d1f4      	bne.n	d802 <grid_port_receive_decode+0x62>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    d818:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    d81a:	4442      	add	r2, r8
    d81c:	4ba6      	ldr	r3, [pc, #664]	; (dab8 <grid_port_receive_decode+0x318>)
    d81e:	fba3 1302 	umull	r1, r3, r3, r2
    d822:	09db      	lsrs	r3, r3, #7
    d824:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    d828:	fb01 2313 	mls	r3, r1, r3, r2
    d82c:	62f3      	str	r3, [r6, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    d82e:	62b3      	str	r3, [r6, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    d830:	2300      	movs	r3, #0
    d832:	6273      	str	r3, [r6, #36]	; 0x24
 	for (uint32_t i = 1; i<length; i++){
    d834:	f1b8 0f01 	cmp.w	r8, #1
    d838:	f240 8209 	bls.w	dc4e <grid_port_receive_decode+0x4ae>
    d83c:	2401      	movs	r4, #1
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    d83e:	f8df b2e0 	ldr.w	fp, [pc, #736]	; db20 <grid_port_receive_decode+0x380>
    d842:	f8df 929c 	ldr.w	r9, [pc, #668]	; dae0 <grid_port_receive_decode+0x340>
    d846:	e003      	b.n	d850 <grid_port_receive_decode+0xb0>
 	for (uint32_t i = 1; i<length; i++){
    d848:	3401      	adds	r4, #1
    d84a:	45a0      	cmp	r8, r4
    d84c:	f240 81ff 	bls.w	dc4e <grid_port_receive_decode+0x4ae>
 		if (buffer[i] == GRID_MSG_START_OF_HEADING){
    d850:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    d854:	2b01      	cmp	r3, #1
    d856:	d1f7      	bne.n	d848 <grid_port_receive_decode+0xa8>
 			length -= i;
    d858:	eba8 0804 	sub.w	r8, r8, r4
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    d85c:	4659      	mov	r1, fp
    d85e:	4897      	ldr	r0, [pc, #604]	; (dabc <grid_port_receive_decode+0x31c>)
    d860:	47c8      	blx	r9
 			message = &buffer[i];
    d862:	46aa      	mov	sl, r5
    d864:	e7f0      	b.n	d848 <grid_port_receive_decode+0xa8>
	if (message[0] == 1 && message [length-1] == 10){
    d866:	eb0a 0308 	add.w	r3, sl, r8
    d86a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    d86e:	2b0a      	cmp	r3, #10
    d870:	f040 81f2 	bne.w	dc58 <grid_port_receive_decode+0x4b8>
		checksum_received = grid_msg_checksum_read(message, length);
    d874:	4641      	mov	r1, r8
    d876:	4650      	mov	r0, sl
    d878:	4b91      	ldr	r3, [pc, #580]	; (dac0 <grid_port_receive_decode+0x320>)
    d87a:	4798      	blx	r3
    d87c:	4604      	mov	r4, r0
		checksum_calculated = grid_msg_checksum_calculate(message, length);
    d87e:	4641      	mov	r1, r8
    d880:	4650      	mov	r0, sl
    d882:	4b90      	ldr	r3, [pc, #576]	; (dac4 <grid_port_receive_decode+0x324>)
    d884:	4798      	blx	r3
		if (checksum_calculated == checksum_received && error_flag == 0){
    d886:	4284      	cmp	r4, r0
    d888:	f040 81c4 	bne.w	dc14 <grid_port_receive_decode+0x474>
			if (message[1] == GRID_MSG_BROADCAST){ // Broadcast message
    d88c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    d890:	2b0f      	cmp	r3, #15
    d892:	f000 808b 	beq.w	d9ac <grid_port_receive_decode+0x20c>
			else if (message[1] == GRID_MSG_DIRECT){ // Direct Message
    d896:	2b0e      	cmp	r3, #14
    d898:	f040 81ae 	bne.w	dbf8 <grid_port_receive_decode+0x458>
				if (message[2] == GRID_MSG_ACKNOWLEDGE){				
    d89c:	f89a 3002 	ldrb.w	r3, [sl, #2]
    d8a0:	2b07      	cmp	r3, #7
    d8a2:	f040 81e6 	bne.w	dc72 <grid_port_receive_decode+0x4d2>
					struct grid_ui_report* stored_report = por->ping_report;
    d8a6:	6874      	ldr	r4, [r6, #4]
					local_stored = grid_sys_read_hex_string_value(&stored_report->payload[6], 2, error_flag);
    d8a8:	6860      	ldr	r0, [r4, #4]
    d8aa:	2200      	movs	r2, #0
    d8ac:	2102      	movs	r1, #2
    d8ae:	3006      	adds	r0, #6
    d8b0:	f8df 921c 	ldr.w	r9, [pc, #540]	; dad0 <grid_port_receive_decode+0x330>
    d8b4:	47c8      	blx	r9
    d8b6:	b2c5      	uxtb	r5, r0
					remote_stored = grid_sys_read_hex_string_value(&stored_report->payload[8], 2, error_flag);
    d8b8:	6860      	ldr	r0, [r4, #4]
    d8ba:	2200      	movs	r2, #0
    d8bc:	2102      	movs	r1, #2
    d8be:	3008      	adds	r0, #8
    d8c0:	47c8      	blx	r9
    d8c2:	b2c3      	uxtb	r3, r0
    d8c4:	60fb      	str	r3, [r7, #12]
					local_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    d8c6:	2200      	movs	r2, #0
    d8c8:	2102      	movs	r1, #2
    d8ca:	f10a 0008 	add.w	r0, sl, #8
    d8ce:	47c8      	blx	r9
    d8d0:	fa5f fb80 	uxtb.w	fp, r0
					remote_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    d8d4:	2200      	movs	r2, #0
    d8d6:	2102      	movs	r1, #2
    d8d8:	f10a 0006 	add.w	r0, sl, #6
    d8dc:	47c8      	blx	r9
    d8de:	60b8      	str	r0, [r7, #8]
    d8e0:	fa5f f980 	uxtb.w	r9, r0
					if (por->partner_status == 0){
    d8e4:	f241 0307 	movw	r3, #4103	; 0x1007
    d8e8:	5cf3      	ldrb	r3, [r6, r3]
    d8ea:	2b00      	cmp	r3, #0
    d8ec:	f040 8135 	bne.w	db5a <grid_port_receive_decode+0x3ba>
						if (local_stored == 255){ // I have no clue				
    d8f0:	2dff      	cmp	r5, #255	; 0xff
    d8f2:	f000 8119 	beq.w	db28 <grid_port_receive_decode+0x388>
						if (remote_received != remote_stored){
    d8f6:	68fb      	ldr	r3, [r7, #12]
    d8f8:	454b      	cmp	r3, r9
    d8fa:	d011      	beq.n	d920 <grid_port_receive_decode+0x180>
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, remote_received);
    d8fc:	6860      	ldr	r0, [r4, #4]
    d8fe:	7a3a      	ldrb	r2, [r7, #8]
    d900:	2102      	movs	r1, #2
    d902:	3008      	adds	r0, #8
    d904:	4b70      	ldr	r3, [pc, #448]	; (dac8 <grid_port_receive_decode+0x328>)
    d906:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    d908:	f8d4 9004 	ldr.w	r9, [r4, #4]
    d90c:	78a4      	ldrb	r4, [r4, #2]
    d90e:	4621      	mov	r1, r4
    d910:	4648      	mov	r0, r9
    d912:	4b6c      	ldr	r3, [pc, #432]	; (dac4 <grid_port_receive_decode+0x324>)
    d914:	4798      	blx	r3
    d916:	4602      	mov	r2, r0
    d918:	4621      	mov	r1, r4
    d91a:	4648      	mov	r0, r9
    d91c:	4b6b      	ldr	r3, [pc, #428]	; (dacc <grid_port_receive_decode+0x32c>)
    d91e:	4798      	blx	r3
						if (local_stored != local_received){
    d920:	455d      	cmp	r5, fp
    d922:	f040 81a6 	bne.w	dc72 <grid_port_receive_decode+0x4d2>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    d926:	f89a 3003 	ldrb.w	r3, [sl, #3]
    d92a:	7b72      	ldrb	r2, [r6, #13]
    d92c:	1a9b      	subs	r3, r3, r2
    d92e:	3306      	adds	r3, #6
    d930:	425a      	negs	r2, r3
    d932:	f003 0303 	and.w	r3, r3, #3
    d936:	f002 0203 	and.w	r2, r2, #3
    d93a:	bf58      	it	pl
    d93c:	4253      	negpl	r3, r2
    d93e:	f241 0204 	movw	r2, #4100	; 0x1004
    d942:	54b3      	strb	r3, [r6, r2]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    d944:	f1a8 000a 	sub.w	r0, r8, #10
    d948:	2200      	movs	r2, #0
    d94a:	2102      	movs	r1, #2
    d94c:	4450      	add	r0, sl
    d94e:	4b60      	ldr	r3, [pc, #384]	; (dad0 <grid_port_receive_decode+0x330>)
    d950:	4798      	blx	r3
    d952:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
    d956:	6018      	str	r0, [r3, #0]
							por->partner_status = 1;
    d958:	2201      	movs	r2, #1
    d95a:	f241 0307 	movw	r3, #4103	; 0x1007
    d95e:	54f2      	strb	r2, [r6, r3]
							grid_sys_state.age = grid_sys_rtc_get_time(&grid_sys_state);
    d960:	4c5c      	ldr	r4, [pc, #368]	; (dad4 <grid_port_receive_decode+0x334>)
    d962:	4620      	mov	r0, r4
    d964:	4b5c      	ldr	r3, [pc, #368]	; (dad8 <grid_port_receive_decode+0x338>)
    d966:	4798      	blx	r3
    d968:	b2c0      	uxtb	r0, r0
    d96a:	7020      	strb	r0, [r4, #0]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    d96c:	495b      	ldr	r1, [pc, #364]	; (dadc <grid_port_receive_decode+0x33c>)
    d96e:	4853      	ldr	r0, [pc, #332]	; (dabc <grid_port_receive_decode+0x31c>)
    d970:	4b5b      	ldr	r3, [pc, #364]	; (dae0 <grid_port_receive_decode+0x340>)
    d972:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // GREEN
    d974:	23c8      	movs	r3, #200	; 0xc8
    d976:	9301      	str	r3, [sp, #4]
    d978:	2302      	movs	r3, #2
    d97a:	9300      	str	r3, [sp, #0]
    d97c:	2300      	movs	r3, #0
    d97e:	22ff      	movs	r2, #255	; 0xff
    d980:	4619      	mov	r1, r3
    d982:	4620      	mov	r0, r4
    d984:	4d57      	ldr	r5, [pc, #348]	; (dae4 <grid_port_receive_decode+0x344>)
    d986:	47a8      	blx	r5
							if (grid_sys_state.bank_select!=255){
    d988:	7a63      	ldrb	r3, [r4, #9]
    d98a:	b2db      	uxtb	r3, r3
    d98c:	2bff      	cmp	r3, #255	; 0xff
    d98e:	f000 8170 	beq.w	dc72 <grid_port_receive_decode+0x4d2>
								grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, grid_sys_state.bank_select);
    d992:	7a62      	ldrb	r2, [r4, #9]
    d994:	4c54      	ldr	r4, [pc, #336]	; (dae8 <grid_port_receive_decode+0x348>)
    d996:	6863      	ldr	r3, [r4, #4]
    d998:	6d58      	ldr	r0, [r3, #84]	; 0x54
    d99a:	2102      	movs	r1, #2
    d99c:	3007      	adds	r0, #7
    d99e:	4b4a      	ldr	r3, [pc, #296]	; (dac8 <grid_port_receive_decode+0x328>)
    d9a0:	4798      	blx	r3
								grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    d9a2:	2105      	movs	r1, #5
    d9a4:	4620      	mov	r0, r4
    d9a6:	4b51      	ldr	r3, [pc, #324]	; (daec <grid_port_receive_decode+0x34c>)
    d9a8:	4798      	blx	r3
    d9aa:	e162      	b.n	dc72 <grid_port_receive_decode+0x4d2>
				uint8_t received_id  = grid_msg_get_id(message);;			
    d9ac:	4650      	mov	r0, sl
    d9ae:	4b50      	ldr	r3, [pc, #320]	; (daf0 <grid_port_receive_decode+0x350>)
    d9b0:	4798      	blx	r3
    d9b2:	4683      	mov	fp, r0
				uint8_t received_age = grid_msg_get_age(message);
    d9b4:	4650      	mov	r0, sl
    d9b6:	4b4f      	ldr	r3, [pc, #316]	; (daf4 <grid_port_receive_decode+0x354>)
    d9b8:	4798      	blx	r3
    d9ba:	4681      	mov	r9, r0
				int8_t received_dx  = grid_msg_get_dx(message) - GRID_SYS_DEFAULT_POSITION;
    d9bc:	4650      	mov	r0, sl
    d9be:	4b4e      	ldr	r3, [pc, #312]	; (daf8 <grid_port_receive_decode+0x358>)
    d9c0:	4798      	blx	r3
    d9c2:	4605      	mov	r5, r0
    d9c4:	f1a0 047f 	sub.w	r4, r0, #127	; 0x7f
    d9c8:	b264      	sxtb	r4, r4
				int8_t received_dy  = grid_msg_get_dy(message) - GRID_SYS_DEFAULT_POSITION;
    d9ca:	4650      	mov	r0, sl
    d9cc:	4b4b      	ldr	r3, [pc, #300]	; (dafc <grid_port_receive_decode+0x35c>)
    d9ce:	4798      	blx	r3
    d9d0:	f1a0 037f 	sub.w	r3, r0, #127	; 0x7f
    d9d4:	b25b      	sxtb	r3, r3
				if (por->partner_fi == 0){ // 0 deg		
    d9d6:	f241 0204 	movw	r2, #4100	; 0x1004
    d9da:	5cb2      	ldrb	r2, [r6, r2]
    d9dc:	b12a      	cbz	r2, d9ea <grid_port_receive_decode+0x24a>
				else if(por->partner_fi == 1){ // 90 deg
    d9de:	2a01      	cmp	r2, #1
    d9e0:	d157      	bne.n	da92 <grid_port_receive_decode+0x2f2>
					rotated_dx  -= received_dy;
    d9e2:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
					rotated_dy  += received_dx;
    d9e6:	4623      	mov	r3, r4
					rotated_dx  -= received_dy;
    d9e8:	b244      	sxtb	r4, r0
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    d9ea:	f241 0205 	movw	r2, #4101	; 0x1005
    d9ee:	5cb5      	ldrb	r5, [r6, r2]
    d9f0:	357f      	adds	r5, #127	; 0x7f
    d9f2:	442c      	add	r4, r5
    d9f4:	b2e5      	uxtb	r5, r4
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    d9f6:	f241 0206 	movw	r2, #4102	; 0x1006
    d9fa:	5cb4      	ldrb	r4, [r6, r2]
    d9fc:	347f      	adds	r4, #127	; 0x7f
    d9fe:	441c      	add	r4, r3
    da00:	b2e4      	uxtb	r4, r4
				grid_msg_set_id(message, updated_id);
    da02:	4659      	mov	r1, fp
    da04:	4650      	mov	r0, sl
    da06:	4b3e      	ldr	r3, [pc, #248]	; (db00 <grid_port_receive_decode+0x360>)
    da08:	4798      	blx	r3
				grid_msg_set_dx(message, updated_dx);
    da0a:	4629      	mov	r1, r5
    da0c:	4650      	mov	r0, sl
    da0e:	4b3d      	ldr	r3, [pc, #244]	; (db04 <grid_port_receive_decode+0x364>)
    da10:	4798      	blx	r3
				grid_msg_set_dy(message, updated_dy);
    da12:	4621      	mov	r1, r4
    da14:	4650      	mov	r0, sl
    da16:	4b3c      	ldr	r3, [pc, #240]	; (db08 <grid_port_receive_decode+0x368>)
    da18:	4798      	blx	r3
				grid_msg_set_age(message, updated_age);
    da1a:	4649      	mov	r1, r9
    da1c:	4650      	mov	r0, sl
    da1e:	4b3b      	ldr	r3, [pc, #236]	; (db0c <grid_port_receive_decode+0x36c>)
    da20:	4798      	blx	r3
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    da22:	eb05 250b 	add.w	r5, r5, fp, lsl #8
    da26:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    da2a:	eb09 2404 	add.w	r4, r9, r4, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    da2e:	4621      	mov	r1, r4
    da30:	4828      	ldr	r0, [pc, #160]	; (dad4 <grid_port_receive_decode+0x334>)
    da32:	4b37      	ldr	r3, [pc, #220]	; (db10 <grid_port_receive_decode+0x370>)
    da34:	4798      	blx	r3
    da36:	2800      	cmp	r0, #0
    da38:	f040 811b 	bne.w	dc72 <grid_port_receive_decode+0x4d2>
					grid_msg_checksum_write(message, length, grid_msg_checksum_calculate(message, length));
    da3c:	4641      	mov	r1, r8
    da3e:	4650      	mov	r0, sl
    da40:	4b20      	ldr	r3, [pc, #128]	; (dac4 <grid_port_receive_decode+0x324>)
    da42:	4798      	blx	r3
    da44:	4602      	mov	r2, r0
    da46:	4641      	mov	r1, r8
    da48:	4650      	mov	r0, sl
    da4a:	4b20      	ldr	r3, [pc, #128]	; (dacc <grid_port_receive_decode+0x32c>)
    da4c:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    da4e:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
    da52:	fa1f f188 	uxth.w	r1, r8
    da56:	4630      	mov	r0, r6
    da58:	4b2e      	ldr	r3, [pc, #184]	; (db14 <grid_port_receive_decode+0x374>)
    da5a:	4798      	blx	r3
    da5c:	2800      	cmp	r0, #0
    da5e:	f000 8108 	beq.w	dc72 <grid_port_receive_decode+0x4d2>
						for (uint8_t i=0; i<length; i++){
    da62:	f1b8 0f00 	cmp.w	r8, #0
    da66:	d00c      	beq.n	da82 <grid_port_receive_decode+0x2e2>
    da68:	2300      	movs	r3, #0
    da6a:	461d      	mov	r5, r3
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    da6c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; db24 <grid_port_receive_decode+0x384>
    da70:	f81a 1003 	ldrb.w	r1, [sl, r3]
    da74:	4630      	mov	r0, r6
    da76:	47c8      	blx	r9
						for (uint8_t i=0; i<length; i++){
    da78:	3501      	adds	r5, #1
    da7a:	b2ed      	uxtb	r5, r5
    da7c:	462b      	mov	r3, r5
    da7e:	4545      	cmp	r5, r8
    da80:	d3f6      	bcc.n	da70 <grid_port_receive_decode+0x2d0>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    da82:	4630      	mov	r0, r6
    da84:	4b24      	ldr	r3, [pc, #144]	; (db18 <grid_port_receive_decode+0x378>)
    da86:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);										
    da88:	4621      	mov	r1, r4
    da8a:	4812      	ldr	r0, [pc, #72]	; (dad4 <grid_port_receive_decode+0x334>)
    da8c:	4b23      	ldr	r3, [pc, #140]	; (db1c <grid_port_receive_decode+0x37c>)
    da8e:	4798      	blx	r3
    da90:	e0ef      	b.n	dc72 <grid_port_receive_decode+0x4d2>
				else if(por->partner_fi == 2){ // 180 deg
    da92:	2a02      	cmp	r2, #2
    da94:	d106      	bne.n	daa4 <grid_port_receive_decode+0x304>
					rotated_dx  -= received_dx;
    da96:	f1c5 047f 	rsb	r4, r5, #127	; 0x7f
    da9a:	b264      	sxtb	r4, r4
					rotated_dy  -= received_dy;
    da9c:	f1c0 007f 	rsb	r0, r0, #127	; 0x7f
    daa0:	b243      	sxtb	r3, r0
    daa2:	e7a2      	b.n	d9ea <grid_port_receive_decode+0x24a>
				else if(por->partner_fi == 3){ // 270 deg
    daa4:	2a03      	cmp	r2, #3
    daa6:	d002      	beq.n	daae <grid_port_receive_decode+0x30e>
				int8_t rotated_dy = 0;
    daa8:	2300      	movs	r3, #0
				int8_t rotated_dx = 0;
    daaa:	461c      	mov	r4, r3
    daac:	e79d      	b.n	d9ea <grid_port_receive_decode+0x24a>
					rotated_dy  -= received_dx;
    daae:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
					rotated_dx  += received_dy;
    dab2:	461c      	mov	r4, r3
					rotated_dy  -= received_dx;
    dab4:	b26b      	sxtb	r3, r5
    dab6:	e798      	b.n	d9ea <grid_port_receive_decode+0x24a>
    dab8:	10624dd3 	.word	0x10624dd3
    dabc:	000113ac 	.word	0x000113ac
    dac0:	000084f1 	.word	0x000084f1
    dac4:	000084d5 	.word	0x000084d5
    dac8:	00008201 	.word	0x00008201
    dacc:	00008511 	.word	0x00008511
    dad0:	000081c1 	.word	0x000081c1
    dad4:	20003280 	.word	0x20003280
    dad8:	00008109 	.word	0x00008109
    dadc:	00011b7c 	.word	0x00011b7c
    dae0:	0001002d 	.word	0x0001002d
    dae4:	0000816d 	.word	0x0000816d
    dae8:	20003270 	.word	0x20003270
    daec:	0000894d 	.word	0x0000894d
    daf0:	00008525 	.word	0x00008525
    daf4:	00008585 	.word	0x00008585
    daf8:	00008545 	.word	0x00008545
    dafc:	00008565 	.word	0x00008565
    db00:	000085a5 	.word	0x000085a5
    db04:	000085b9 	.word	0x000085b9
    db08:	000085cd 	.word	0x000085cd
    db0c:	000085e1 	.word	0x000085e1
    db10:	000085f5 	.word	0x000085f5
    db14:	00005971 	.word	0x00005971
    db18:	000059bd 	.word	0x000059bd
    db1c:	0000861f 	.word	0x0000861f
    db20:	00011b68 	.word	0x00011b68
    db24:	000059a1 	.word	0x000059a1
							uint8_t new_local = grid_sys_rtc_get_time(&grid_sys_state)%128;
    db28:	4854      	ldr	r0, [pc, #336]	; (dc7c <grid_port_receive_decode+0x4dc>)
    db2a:	4b55      	ldr	r3, [pc, #340]	; (dc80 <grid_port_receive_decode+0x4e0>)
    db2c:	4798      	blx	r3
    db2e:	f000 057f 	and.w	r5, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, new_local);
    db32:	6860      	ldr	r0, [r4, #4]
    db34:	462a      	mov	r2, r5
    db36:	2102      	movs	r1, #2
    db38:	3006      	adds	r0, #6
    db3a:	4b52      	ldr	r3, [pc, #328]	; (dc84 <grid_port_receive_decode+0x4e4>)
    db3c:	4798      	blx	r3
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));
    db3e:	6863      	ldr	r3, [r4, #4]
    db40:	78a2      	ldrb	r2, [r4, #2]
    db42:	603a      	str	r2, [r7, #0]
    db44:	4611      	mov	r1, r2
    db46:	607b      	str	r3, [r7, #4]
    db48:	4618      	mov	r0, r3
    db4a:	4b4f      	ldr	r3, [pc, #316]	; (dc88 <grid_port_receive_decode+0x4e8>)
    db4c:	4798      	blx	r3
    db4e:	4602      	mov	r2, r0
    db50:	6839      	ldr	r1, [r7, #0]
    db52:	6878      	ldr	r0, [r7, #4]
    db54:	4b4d      	ldr	r3, [pc, #308]	; (dc8c <grid_port_receive_decode+0x4ec>)
    db56:	4798      	blx	r3
    db58:	e6cd      	b.n	d8f6 <grid_port_receive_decode+0x156>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    db5a:	f89a 3003 	ldrb.w	r3, [sl, #3]
    db5e:	7b72      	ldrb	r2, [r6, #13]
    db60:	1a9b      	subs	r3, r3, r2
    db62:	3306      	adds	r3, #6
    db64:	425a      	negs	r2, r3
    db66:	f003 0303 	and.w	r3, r3, #3
    db6a:	f002 0203 	and.w	r2, r2, #3
    db6e:	bf58      	it	pl
    db70:	4253      	negpl	r3, r2
    db72:	f241 0204 	movw	r2, #4100	; 0x1004
    db76:	5cb2      	ldrb	r2, [r6, r2]
    db78:	68f9      	ldr	r1, [r7, #12]
    db7a:	455d      	cmp	r5, fp
    db7c:	bf08      	it	eq
    db7e:	4549      	cmpeq	r1, r9
    db80:	bf0c      	ite	eq
    db82:	2501      	moveq	r5, #1
    db84:	2500      	movne	r5, #0
    db86:	4293      	cmp	r3, r2
    db88:	bf14      	ite	ne
    db8a:	2500      	movne	r5, #0
    db8c:	f005 0501 	andeq.w	r5, r5, #1
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    db90:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
    db94:	f8d3 9000 	ldr.w	r9, [r3]
    db98:	f1a8 000a 	sub.w	r0, r8, #10
    db9c:	2200      	movs	r2, #0
    db9e:	2102      	movs	r1, #2
    dba0:	4450      	add	r0, sl
    dba2:	4b3b      	ldr	r3, [pc, #236]	; (dc90 <grid_port_receive_decode+0x4f0>)
    dba4:	4798      	blx	r3
						if (validator == 1){
    dba6:	4548      	cmp	r0, r9
    dba8:	d101      	bne.n	dbae <grid_port_receive_decode+0x40e>
    dbaa:	2d00      	cmp	r5, #0
    dbac:	d161      	bne.n	dc72 <grid_port_receive_decode+0x4d2>
							por->partner_status = 0;
    dbae:	2200      	movs	r2, #0
    dbb0:	f241 0307 	movw	r3, #4103	; 0x1007
    dbb4:	54f2      	strb	r2, [r6, r3]
							grid_sys_write_hex_string_value(&stored_report->payload[8], 2, 255);
    dbb6:	6860      	ldr	r0, [r4, #4]
    dbb8:	22ff      	movs	r2, #255	; 0xff
    dbba:	2102      	movs	r1, #2
    dbbc:	3008      	adds	r0, #8
    dbbe:	4d31      	ldr	r5, [pc, #196]	; (dc84 <grid_port_receive_decode+0x4e4>)
    dbc0:	47a8      	blx	r5
							grid_sys_write_hex_string_value(&stored_report->payload[6], 2, 255);
    dbc2:	6860      	ldr	r0, [r4, #4]
    dbc4:	22ff      	movs	r2, #255	; 0xff
    dbc6:	2102      	movs	r1, #2
    dbc8:	3006      	adds	r0, #6
    dbca:	47a8      	blx	r5
							grid_msg_checksum_write(stored_report->payload, stored_report->payload_length, grid_msg_checksum_calculate(stored_report->payload, stored_report->payload_length));														
    dbcc:	6865      	ldr	r5, [r4, #4]
    dbce:	78a4      	ldrb	r4, [r4, #2]
    dbd0:	4621      	mov	r1, r4
    dbd2:	4628      	mov	r0, r5
    dbd4:	4b2c      	ldr	r3, [pc, #176]	; (dc88 <grid_port_receive_decode+0x4e8>)
    dbd6:	4798      	blx	r3
    dbd8:	4602      	mov	r2, r0
    dbda:	4621      	mov	r1, r4
    dbdc:	4628      	mov	r0, r5
    dbde:	4b2b      	ldr	r3, [pc, #172]	; (dc8c <grid_port_receive_decode+0x4ec>)
    dbe0:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200); // WHITE
    dbe2:	23c8      	movs	r3, #200	; 0xc8
    dbe4:	9301      	str	r3, [sp, #4]
    dbe6:	2302      	movs	r3, #2
    dbe8:	9300      	str	r3, [sp, #0]
    dbea:	23ff      	movs	r3, #255	; 0xff
    dbec:	461a      	mov	r2, r3
    dbee:	4619      	mov	r1, r3
    dbf0:	4822      	ldr	r0, [pc, #136]	; (dc7c <grid_port_receive_decode+0x4dc>)
    dbf2:	4c28      	ldr	r4, [pc, #160]	; (dc94 <grid_port_receive_decode+0x4f4>)
    dbf4:	47a0      	blx	r4
    dbf6:	e03c      	b.n	dc72 <grid_port_receive_decode+0x4d2>
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED SHORT
    dbf8:	23c8      	movs	r3, #200	; 0xc8
    dbfa:	9301      	str	r3, [sp, #4]
    dbfc:	2302      	movs	r3, #2
    dbfe:	9300      	str	r3, [sp, #0]
    dc00:	2300      	movs	r3, #0
    dc02:	461a      	mov	r2, r3
    dc04:	21ff      	movs	r1, #255	; 0xff
    dc06:	481d      	ldr	r0, [pc, #116]	; (dc7c <grid_port_receive_decode+0x4dc>)
    dc08:	4c22      	ldr	r4, [pc, #136]	; (dc94 <grid_port_receive_decode+0x4f4>)
    dc0a:	47a0      	blx	r4
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    dc0c:	4822      	ldr	r0, [pc, #136]	; (dc98 <grid_port_receive_decode+0x4f8>)
    dc0e:	4b23      	ldr	r3, [pc, #140]	; (dc9c <grid_port_receive_decode+0x4fc>)
    dc10:	4798      	blx	r3
    dc12:	e02e      	b.n	dc72 <grid_port_receive_decode+0x4d2>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    dc14:	4822      	ldr	r0, [pc, #136]	; (dca0 <grid_port_receive_decode+0x500>)
    dc16:	4b21      	ldr	r3, [pc, #132]	; (dc9c <grid_port_receive_decode+0x4fc>)
    dc18:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 20, 0, 255, 1, 200); // BLUE BLINKY
    dc1a:	23c8      	movs	r3, #200	; 0xc8
    dc1c:	9301      	str	r3, [sp, #4]
    dc1e:	2301      	movs	r3, #1
    dc20:	9300      	str	r3, [sp, #0]
    dc22:	23ff      	movs	r3, #255	; 0xff
    dc24:	2200      	movs	r2, #0
    dc26:	2114      	movs	r1, #20
    dc28:	4814      	ldr	r0, [pc, #80]	; (dc7c <grid_port_receive_decode+0x4dc>)
    dc2a:	4c1a      	ldr	r4, [pc, #104]	; (dc94 <grid_port_receive_decode+0x4f4>)
    dc2c:	47a0      	blx	r4
    dc2e:	e020      	b.n	dc72 <grid_port_receive_decode+0x4d2>
	message = &buffer[0];
    dc30:	46aa      	mov	sl, r5
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    dc32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    dc34:	4442      	add	r2, r8
    dc36:	4b1b      	ldr	r3, [pc, #108]	; (dca4 <grid_port_receive_decode+0x504>)
    dc38:	fba3 1302 	umull	r1, r3, r3, r2
    dc3c:	09db      	lsrs	r3, r3, #7
    dc3e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    dc42:	fb01 2313 	mls	r3, r1, r3, r2
    dc46:	62c3      	str	r3, [r0, #44]	; 0x2c
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    dc48:	6283      	str	r3, [r0, #40]	; 0x28
	por->rx_double_buffer_status = 0;
    dc4a:	2300      	movs	r3, #0
    dc4c:	6243      	str	r3, [r0, #36]	; 0x24
	if (message[0] == 1 && message [length-1] == 10){
    dc4e:	f89a 3000 	ldrb.w	r3, [sl]
    dc52:	2b01      	cmp	r3, #1
    dc54:	f43f ae07 	beq.w	d866 <grid_port_receive_decode+0xc6>
		grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 20, 2, 200); // BLUE BLINKY	
    dc58:	23c8      	movs	r3, #200	; 0xc8
    dc5a:	9301      	str	r3, [sp, #4]
    dc5c:	2302      	movs	r3, #2
    dc5e:	9300      	str	r3, [sp, #0]
    dc60:	2314      	movs	r3, #20
    dc62:	2200      	movs	r2, #0
    dc64:	4611      	mov	r1, r2
    dc66:	4805      	ldr	r0, [pc, #20]	; (dc7c <grid_port_receive_decode+0x4dc>)
    dc68:	4c0a      	ldr	r4, [pc, #40]	; (dc94 <grid_port_receive_decode+0x4f4>)
    dc6a:	47a0      	blx	r4
		printf("{\"type\": \"ERROR\", \"data\": [\"Frame Error\"]}\r\n");
    dc6c:	480e      	ldr	r0, [pc, #56]	; (dca8 <grid_port_receive_decode+0x508>)
    dc6e:	4b0b      	ldr	r3, [pc, #44]	; (dc9c <grid_port_receive_decode+0x4fc>)
    dc70:	4798      	blx	r3
}
    dc72:	3714      	adds	r7, #20
    dc74:	46bd      	mov	sp, r7
    dc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc7a:	bf00      	nop
    dc7c:	20003280 	.word	0x20003280
    dc80:	00008109 	.word	0x00008109
    dc84:	00008201 	.word	0x00008201
    dc88:	000084d5 	.word	0x000084d5
    dc8c:	00008511 	.word	0x00008511
    dc90:	000081c1 	.word	0x000081c1
    dc94:	0000816d 	.word	0x0000816d
    dc98:	00011b84 	.word	0x00011b84
    dc9c:	00010115 	.word	0x00010115
    dca0:	00011bbc 	.word	0x00011bbc
    dca4:	10624dd3 	.word	0x10624dd3
    dca8:	00011bf0 	.word	0x00011bf0

0000dcac <grid_port_receive_complete_task>:
void grid_port_receive_complete_task(struct grid_port* por){
    dcac:	b530      	push	{r4, r5, lr}
    dcae:	b083      	sub	sp, #12
    dcb0:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    dcb2:	7f03      	ldrb	r3, [r0, #28]
    dcb4:	2b01      	cmp	r3, #1
    dcb6:	d013      	beq.n	dce0 <grid_port_receive_complete_task+0x34>
	grid_port_receive_task(por);	
    dcb8:	4620      	mov	r0, r4
    dcba:	4b12      	ldr	r3, [pc, #72]	; (dd04 <grid_port_receive_complete_task+0x58>)
    dcbc:	4798      	blx	r3
	if (por->rx_double_buffer_status == 0){
    dcbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dcc0:	b163      	cbz	r3, dcdc <grid_port_receive_complete_task+0x30>
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    dcc2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    dcc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    dcc6:	4291      	cmp	r1, r2
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    dcc8:	bf34      	ite	cc
    dcca:	3201      	addcc	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    dccc:	f202 72d1 	addwcs	r2, r2, #2001	; 0x7d1
    dcd0:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    dcd2:	4620      	mov	r0, r4
    dcd4:	4b0c      	ldr	r3, [pc, #48]	; (dd08 <grid_port_receive_complete_task+0x5c>)
    dcd6:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    dcd8:	2300      	movs	r3, #0
    dcda:	6263      	str	r3, [r4, #36]	; 0x24
}
    dcdc:	b003      	add	sp, #12
    dcde:	bd30      	pop	{r4, r5, pc}
		por->usart_error_flag = 0;
    dce0:	2300      	movs	r3, #0
    dce2:	7703      	strb	r3, [r0, #28]
		grid_port_reset_receiver(por);			
    dce4:	4b09      	ldr	r3, [pc, #36]	; (dd0c <grid_port_receive_complete_task+0x60>)
    dce6:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 2, 200);
    dce8:	23c8      	movs	r3, #200	; 0xc8
    dcea:	9301      	str	r3, [sp, #4]
    dcec:	2302      	movs	r3, #2
    dcee:	9300      	str	r3, [sp, #0]
    dcf0:	23ff      	movs	r3, #255	; 0xff
    dcf2:	461a      	mov	r2, r3
    dcf4:	4619      	mov	r1, r3
    dcf6:	4806      	ldr	r0, [pc, #24]	; (dd10 <grid_port_receive_complete_task+0x64>)
    dcf8:	4d06      	ldr	r5, [pc, #24]	; (dd14 <grid_port_receive_complete_task+0x68>)
    dcfa:	47a8      	blx	r5
		printf("{\"type\": \"ERROR\", \"data\": [\"Parity Error\"]}\r\n");
    dcfc:	4806      	ldr	r0, [pc, #24]	; (dd18 <grid_port_receive_complete_task+0x6c>)
    dcfe:	4b07      	ldr	r3, [pc, #28]	; (dd1c <grid_port_receive_complete_task+0x70>)
    dd00:	4798      	blx	r3
    dd02:	e7d9      	b.n	dcb8 <grid_port_receive_complete_task+0xc>
    dd04:	0000d5f1 	.word	0x0000d5f1
    dd08:	0000d7a1 	.word	0x0000d7a1
    dd0c:	0000d56d 	.word	0x0000d56d
    dd10:	20003280 	.word	0x20003280
    dd14:	0000816d 	.word	0x0000816d
    dd18:	00011c1c 	.word	0x00011c1c
    dd1c:	00010115 	.word	0x00010115

0000dd20 <init_timer>:
#define RTC1SEC 16384

#define RTC1MS (RTC1SEC/1000)

void init_timer(void)
{
    dd20:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1SEC/20;
    dd22:	4c18      	ldr	r4, [pc, #96]	; (dd84 <init_timer+0x64>)
    dd24:	f240 3333 	movw	r3, #819	; 0x333
    dd28:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    dd2a:	4b17      	ldr	r3, [pc, #92]	; (dd88 <init_timer+0x68>)
    dd2c:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    dd2e:	2301      	movs	r3, #1
    dd30:	7523      	strb	r3, [r4, #20]
	
	RTC_Scheduler_heartbeat.interval = RTC1SEC;
    dd32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    dd36:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    dd38:	4a14      	ldr	r2, [pc, #80]	; (dd8c <init_timer+0x6c>)
    dd3a:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    dd3c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	
	RTC_Scheduler_report.interval = RTC1SEC/10;
    dd40:	f240 6266 	movw	r2, #1638	; 0x666
    dd44:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    dd46:	4a12      	ldr	r2, [pc, #72]	; (dd90 <init_timer+0x70>)
    dd48:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    dd4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	
	RTC_Scheduler_realtime.interval = 1;
    dd4e:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    dd50:	4a10      	ldr	r2, [pc, #64]	; (dd94 <init_timer+0x74>)
    dd52:	64e2      	str	r2, [r4, #76]	; 0x4c
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    dd54:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    dd58:	4d0f      	ldr	r5, [pc, #60]	; (dd98 <init_timer+0x78>)
    dd5a:	1d21      	adds	r1, r4, #4
    dd5c:	4628      	mov	r0, r5
    dd5e:	4e0f      	ldr	r6, [pc, #60]	; (dd9c <init_timer+0x7c>)
    dd60:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    dd62:	f104 0118 	add.w	r1, r4, #24
    dd66:	4628      	mov	r0, r5
    dd68:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    dd6a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    dd6e:	4628      	mov	r0, r5
    dd70:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    dd72:	f104 0140 	add.w	r1, r4, #64	; 0x40
    dd76:	4628      	mov	r0, r5
    dd78:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    dd7a:	4628      	mov	r0, r5
    dd7c:	4b08      	ldr	r3, [pc, #32]	; (dda0 <init_timer+0x80>)
    dd7e:	4798      	blx	r3
    dd80:	bd70      	pop	{r4, r5, r6, pc}
    dd82:	bf00      	nop
    dd84:	20000d68 	.word	0x20000d68
    dd88:	0000d45d 	.word	0x0000d45d
    dd8c:	0000d449 	.word	0x0000d449
    dd90:	0000d43d 	.word	0x0000d43d
    dd94:	0000d4c1 	.word	0x0000d4c1
    dd98:	20000f04 	.word	0x20000f04
    dd9c:	00009611 	.word	0x00009611
    dda0:	000095ed 	.word	0x000095ed

0000dda4 <main>:
}



int main(void)
{
    dda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dda8:	b097      	sub	sp, #92	; 0x5c

	atmel_start_init();	
    ddaa:	4b5f      	ldr	r3, [pc, #380]	; (df28 <main+0x184>)
    ddac:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    ddae:	4d5f      	ldr	r5, [pc, #380]	; (df2c <main+0x188>)
    ddb0:	495f      	ldr	r1, [pc, #380]	; (df30 <main+0x18c>)
    ddb2:	4628      	mov	r0, r5
    ddb4:	4c5f      	ldr	r4, [pc, #380]	; (df34 <main+0x190>)
    ddb6:	47a0      	blx	r4

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "D51 Init");
    ddb8:	495f      	ldr	r1, [pc, #380]	; (df38 <main+0x194>)
    ddba:	4628      	mov	r0, r5
    ddbc:	47a0      	blx	r4
	grid_d51_init(); // Check User Row
    ddbe:	4b5f      	ldr	r3, [pc, #380]	; (df3c <main+0x198>)
    ddc0:	4798      	blx	r3


	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    ddc2:	4b5f      	ldr	r3, [pc, #380]	; (df40 <main+0x19c>)
    ddc4:	4798      	blx	r3

	composite_device_start();
    ddc6:	4b5f      	ldr	r3, [pc, #380]	; (df44 <main+0x1a0>)
    ddc8:	4798      	blx	r3

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    ddca:	495f      	ldr	r1, [pc, #380]	; (df48 <main+0x1a4>)
    ddcc:	4628      	mov	r0, r5
    ddce:	47a0      	blx	r4
		
	grid_module_common_init();
    ddd0:	4b5e      	ldr	r3, [pc, #376]	; (df4c <main+0x1a8>)
    ddd2:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    ddd4:	495e      	ldr	r1, [pc, #376]	; (df50 <main+0x1ac>)
    ddd6:	4628      	mov	r0, r5
    ddd8:	47a0      	blx	r4

	init_timer();
    ddda:	4b5e      	ldr	r3, [pc, #376]	; (df54 <main+0x1b0>)
    dddc:	4798      	blx	r3
	uint32_t loopfast = 0;
	uint32_t loopwarp = 0;
	
	uint8_t usb_init_variable = 0;
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Loop");
    ddde:	495e      	ldr	r1, [pc, #376]	; (df58 <main+0x1b4>)
    dde0:	4628      	mov	r0, r5
    dde2:	47a0      	blx	r4
	uint8_t usb_init_variable = 0;
    dde4:	2300      	movs	r3, #0
    dde6:	930c      	str	r3, [sp, #48]	; 0x30
	uint32_t loopwarp = 0;
    dde8:	9304      	str	r3, [sp, #16]
	uint32_t loopfast = 0;
    ddea:	9307      	str	r3, [sp, #28]
	uint32_t loopslow = 0;
    ddec:	9306      	str	r3, [sp, #24]
	uint32_t loopcounter = 0;
    ddee:	9303      	str	r3, [sp, #12]
	mod->current_task = next_task;
    ddf0:	f8df a1b8 	ldr.w	sl, [pc, #440]	; dfac <main+0x208>
    ddf4:	f04f 0301 	mov.w	r3, #1
    ddf8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
		
		if (scheduler_report_flag){
			
			scheduler_report_flag=0;
    ddfc:	2400      	movs	r4, #0
		
			}
			
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
	
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    ddfe:	f8df b1b0 	ldr.w	fp, [pc, #432]	; dfb0 <main+0x20c>
    de02:	e0e0      	b.n	dfc6 <main+0x222>
			if (usb_d_get_frame_num() == 0){
    de04:	4b55      	ldr	r3, [pc, #340]	; (df5c <main+0x1b8>)
    de06:	4798      	blx	r3
    de08:	2800      	cmp	r0, #0
    de0a:	f000 80e4 	beq.w	dfd6 <main+0x232>
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    de0e:	4954      	ldr	r1, [pc, #336]	; (df60 <main+0x1bc>)
    de10:	4846      	ldr	r0, [pc, #280]	; (df2c <main+0x188>)
    de12:	4b48      	ldr	r3, [pc, #288]	; (df34 <main+0x190>)
    de14:	4798      	blx	r3
				grid_sys_write_hex_string_value(&mod->report_array[GRID_REPORT_INDEX_MAPMODE].payload[7], 2, (grid_sys_state.bank_select + 1)%2);
    de16:	4b53      	ldr	r3, [pc, #332]	; (df64 <main+0x1c0>)
    de18:	7a5b      	ldrb	r3, [r3, #9]
    de1a:	3301      	adds	r3, #1
    de1c:	f003 0201 	and.w	r2, r3, #1
    de20:	4d51      	ldr	r5, [pc, #324]	; (df68 <main+0x1c4>)
    de22:	686b      	ldr	r3, [r5, #4]
    de24:	6d58      	ldr	r0, [r3, #84]	; 0x54
    de26:	bf48      	it	mi
    de28:	4252      	negmi	r2, r2
    de2a:	2102      	movs	r1, #2
    de2c:	3007      	adds	r0, #7
    de2e:	4b4f      	ldr	r3, [pc, #316]	; (df6c <main+0x1c8>)
    de30:	4798      	blx	r3
				grid_report_sys_set_changed_flag(mod, GRID_REPORT_INDEX_MAPMODE);
    de32:	2105      	movs	r1, #5
    de34:	4628      	mov	r0, r5
    de36:	4b4e      	ldr	r3, [pc, #312]	; (df70 <main+0x1cc>)
    de38:	4798      	blx	r3
				usb_init_variable = 1;
    de3a:	2301      	movs	r3, #1
    de3c:	930c      	str	r3, [sp, #48]	; 0x30
    de3e:	e0ca      	b.n	dfd6 <main+0x232>
			grid_sys_state.alert_state--;
    de40:	4b48      	ldr	r3, [pc, #288]	; (df64 <main+0x1c0>)
    de42:	889b      	ldrh	r3, [r3, #4]
    de44:	3b01      	subs	r3, #1
    de46:	b29b      	uxth	r3, r3
    de48:	4a46      	ldr	r2, [pc, #280]	; (df64 <main+0x1c0>)
    de4a:	8093      	strh	r3, [r2, #4]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    de4c:	4610      	mov	r0, r2
    de4e:	4b49      	ldr	r3, [pc, #292]	; (df74 <main+0x1d0>)
    de50:	4798      	blx	r3
    de52:	b9b0      	cbnz	r0, de82 <main+0xde>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    de54:	4843      	ldr	r0, [pc, #268]	; (df64 <main+0x1c0>)
    de56:	4b48      	ldr	r3, [pc, #288]	; (df78 <main+0x1d4>)
    de58:	4798      	blx	r3
    de5a:	4606      	mov	r6, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    de5c:	f89b 3001 	ldrb.w	r3, [fp, #1]
    de60:	2b00      	cmp	r3, #0
    de62:	f000 8141 	beq.w	e0e8 <main+0x344>
    de66:	4625      	mov	r5, r4
				//grid_led_set_color(i, 0, 255, 0);	
		
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    de68:	4f44      	ldr	r7, [pc, #272]	; (df7c <main+0x1d8>)
    de6a:	4633      	mov	r3, r6
    de6c:	4622      	mov	r2, r4
    de6e:	4629      	mov	r1, r5
    de70:	4658      	mov	r0, fp
    de72:	47b8      	blx	r7
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    de74:	3501      	adds	r5, #1
    de76:	b2ed      	uxtb	r5, r5
    de78:	f89b 3001 	ldrb.w	r3, [fp, #1]
    de7c:	42ab      	cmp	r3, r5
    de7e:	d8f4      	bhi.n	de6a <main+0xc6>
    de80:	e132      	b.n	e0e8 <main+0x344>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    de82:	4838      	ldr	r0, [pc, #224]	; (df64 <main+0x1c0>)
    de84:	4b3e      	ldr	r3, [pc, #248]	; (df80 <main+0x1dc>)
    de86:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    de88:	4836      	ldr	r0, [pc, #216]	; (df64 <main+0x1c0>)
    de8a:	4b3e      	ldr	r3, [pc, #248]	; (df84 <main+0x1e0>)
    de8c:	4798      	blx	r3
    de8e:	9008      	str	r0, [sp, #32]
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    de90:	4834      	ldr	r0, [pc, #208]	; (df64 <main+0x1c0>)
    de92:	4b3d      	ldr	r3, [pc, #244]	; (df88 <main+0x1e4>)
    de94:	4798      	blx	r3
    de96:	9009      	str	r0, [sp, #36]	; 0x24
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    de98:	4832      	ldr	r0, [pc, #200]	; (df64 <main+0x1c0>)
    de9a:	4b3c      	ldr	r3, [pc, #240]	; (df8c <main+0x1e8>)
    de9c:	4798      	blx	r3
    de9e:	900a      	str	r0, [sp, #40]	; 0x28
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    dea0:	f04f 0900 	mov.w	r9, #0
    dea4:	e033      	b.n	df0e <main+0x16a>
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    dea6:	9401      	str	r4, [sp, #4]
    dea8:	9400      	str	r4, [sp, #0]
    deaa:	4623      	mov	r3, r4
    deac:	4622      	mov	r2, r4
    deae:	4629      	mov	r1, r5
    deb0:	4658      	mov	r0, fp
    deb2:	4e37      	ldr	r6, [pc, #220]	; (df90 <main+0x1ec>)
    deb4:	47b0      	blx	r6
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    deb6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; dfb4 <main+0x210>
    deba:	9808      	ldr	r0, [sp, #32]
    debc:	47c0      	blx	r8
    debe:	4f35      	ldr	r7, [pc, #212]	; (df94 <main+0x1f0>)
    dec0:	2200      	movs	r2, #0
    dec2:	4b35      	ldr	r3, [pc, #212]	; (df98 <main+0x1f4>)
    dec4:	47b8      	blx	r7
    dec6:	4e35      	ldr	r6, [pc, #212]	; (df9c <main+0x1f8>)
    dec8:	47b0      	blx	r6
    deca:	b2c2      	uxtb	r2, r0
    decc:	920b      	str	r2, [sp, #44]	; 0x2c
    dece:	980a      	ldr	r0, [sp, #40]	; 0x28
    ded0:	47c0      	blx	r8
    ded2:	2200      	movs	r2, #0
    ded4:	4b30      	ldr	r3, [pc, #192]	; (df98 <main+0x1f4>)
    ded6:	47b8      	blx	r7
    ded8:	47b0      	blx	r6
    deda:	b2c0      	uxtb	r0, r0
    dedc:	9001      	str	r0, [sp, #4]
    dede:	9809      	ldr	r0, [sp, #36]	; 0x24
    dee0:	47c0      	blx	r8
    dee2:	2200      	movs	r2, #0
    dee4:	4b2c      	ldr	r3, [pc, #176]	; (df98 <main+0x1f4>)
    dee6:	47b8      	blx	r7
    dee8:	47b0      	blx	r6
    deea:	b2c0      	uxtb	r0, r0
    deec:	9000      	str	r0, [sp, #0]
    deee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    def0:	4622      	mov	r2, r4
    def2:	4629      	mov	r1, r5
    def4:	4658      	mov	r0, fp
    def6:	4e2a      	ldr	r6, [pc, #168]	; (dfa0 <main+0x1fc>)
    def8:	47b0      	blx	r6
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    defa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    defc:	9201      	str	r2, [sp, #4]
    defe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    df00:	9200      	str	r2, [sp, #0]
    df02:	9b08      	ldr	r3, [sp, #32]
    df04:	4622      	mov	r2, r4
    df06:	4629      	mov	r1, r5
    df08:	4658      	mov	r0, fp
    df0a:	4d26      	ldr	r5, [pc, #152]	; (dfa4 <main+0x200>)
    df0c:	47a8      	blx	r5
    df0e:	fa5f f589 	uxtb.w	r5, r9
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    df12:	4658      	mov	r0, fp
    df14:	4b24      	ldr	r3, [pc, #144]	; (dfa8 <main+0x204>)
    df16:	4798      	blx	r3
    df18:	f109 0901 	add.w	r9, r9, #1
    df1c:	42a8      	cmp	r0, r5
    df1e:	d8c2      	bhi.n	dea6 <main+0x102>
    df20:	e798      	b.n	de54 <main+0xb0>
					if ((RTC1MS - elapsed)<loopwarp){				
						loopwarp-=(RTC1MS - elapsed);
						loopstart-=(RTC1MS - elapsed);
					}
					else{
						loopwarp-=loopwarp;
    df22:	9404      	str	r4, [sp, #16]
    df24:	e107      	b.n	e136 <main+0x392>
    df26:	bf00      	nop
    df28:	000042d1 	.word	0x000042d1
    df2c:	000113f8 	.word	0x000113f8
    df30:	00011c4c 	.word	0x00011c4c
    df34:	0001002d 	.word	0x0001002d
    df38:	00011c60 	.word	0x00011c60
    df3c:	00005151 	.word	0x00005151
    df40:	0000ecc9 	.word	0x0000ecc9
    df44:	0000f659 	.word	0x0000f659
    df48:	00011c6c 	.word	0x00011c6c
    df4c:	00006b85 	.word	0x00006b85
    df50:	00011c8c 	.word	0x00011c8c
    df54:	0000dd21 	.word	0x0000dd21
    df58:	00011ca4 	.word	0x00011ca4
    df5c:	00009c3d 	.word	0x00009c3d
    df60:	00011cac 	.word	0x00011cac
    df64:	20003280 	.word	0x20003280
    df68:	20003270 	.word	0x20003270
    df6c:	00008201 	.word	0x00008201
    df70:	0000894d 	.word	0x0000894d
    df74:	0000811b 	.word	0x0000811b
    df78:	00008125 	.word	0x00008125
    df7c:	000066e3 	.word	0x000066e3
    df80:	0000811f 	.word	0x0000811f
    df84:	0000818b 	.word	0x0000818b
    df88:	0000818f 	.word	0x0000818f
    df8c:	00008193 	.word	0x00008193
    df90:	00006607 	.word	0x00006607
    df94:	0000f9f1 	.word	0x0000f9f1
    df98:	3fe00000 	.word	0x3fe00000
    df9c:	0000fe15 	.word	0x0000fe15
    dfa0:	0000664f 	.word	0x0000664f
    dfa4:	00006699 	.word	0x00006699
    dfa8:	000065c5 	.word	0x000065c5
    dfac:	20007d20 	.word	0x20007d20
    dfb0:	200077d4 	.word	0x200077d4
    dfb4:	0000f925 	.word	0x0000f925
				}
			}
			
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
					
				delay_us(1);			
    dfb8:	2001      	movs	r0, #1
    dfba:	47b0      	blx	r6
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    dfbc:	4639      	mov	r1, r7
    dfbe:	4865      	ldr	r0, [pc, #404]	; (e154 <main+0x3b0>)
    dfc0:	47a8      	blx	r5
    dfc2:	280f      	cmp	r0, #15
    dfc4:	d9f8      	bls.n	dfb8 <main+0x214>
	mod->current_task = next_task;
    dfc6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    dfca:	f88a 3001 	strb.w	r3, [sl, #1]
		if (usb_init_variable == 0){
    dfce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dfd0:	2b00      	cmp	r3, #0
    dfd2:	f43f af17 	beq.w	de04 <main+0x60>
		loopcounter++;
    dfd6:	9b03      	ldr	r3, [sp, #12]
    dfd8:	3301      	adds	r3, #1
    dfda:	9303      	str	r3, [sp, #12]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    dfdc:	485d      	ldr	r0, [pc, #372]	; (e154 <main+0x3b0>)
    dfde:	4b5e      	ldr	r3, [pc, #376]	; (e158 <main+0x3b4>)
    dfe0:	4798      	blx	r3
    dfe2:	9005      	str	r0, [sp, #20]
		if (scheduler_report_flag){
    dfe4:	4b5d      	ldr	r3, [pc, #372]	; (e15c <main+0x3b8>)
    dfe6:	781b      	ldrb	r3, [r3, #0]
    dfe8:	2b00      	cmp	r3, #0
    dfea:	d037      	beq.n	e05c <main+0x2b8>
			scheduler_report_flag=0;
    dfec:	4b5b      	ldr	r3, [pc, #364]	; (e15c <main+0x3b8>)
    dfee:	701c      	strb	r4, [r3, #0]
			uint32_t task_val[GRID_TASK_NUMBER] = {0};
    dff0:	2220      	movs	r2, #32
    dff2:	4621      	mov	r1, r4
    dff4:	a80e      	add	r0, sp, #56	; 0x38
    dff6:	4b5a      	ldr	r3, [pc, #360]	; (e160 <main+0x3bc>)
    dff8:	4798      	blx	r3
    dffa:	4b5a      	ldr	r3, [pc, #360]	; (e164 <main+0x3c0>)
    dffc:	aa0d      	add	r2, sp, #52	; 0x34
    dffe:	f103 0020 	add.w	r0, r3, #32
	return 	mod->timer[task];
    e002:	f853 1b04 	ldr.w	r1, [r3], #4
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    e006:	f842 1f04 	str.w	r1, [r2, #4]!
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    e00a:	4298      	cmp	r0, r3
    e00c:	d1f9      	bne.n	e002 <main+0x25e>
			grid_task_timer_reset(&grid_task_state);
    e00e:	4650      	mov	r0, sl
    e010:	4b55      	ldr	r3, [pc, #340]	; (e168 <main+0x3c4>)
    e012:	4798      	blx	r3
			printf("{\"type\":\"TASK\", \"data\": [");
    e014:	4855      	ldr	r0, [pc, #340]	; (e16c <main+0x3c8>)
    e016:	4d56      	ldr	r5, [pc, #344]	; (e170 <main+0x3cc>)
    e018:	47a8      	blx	r5
				printf("\"%d\"", task_val[i]);
    e01a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e01c:	4855      	ldr	r0, [pc, #340]	; (e174 <main+0x3d0>)
    e01e:	47a8      	blx	r5
    e020:	ad0f      	add	r5, sp, #60	; 0x3c
    e022:	f10d 0958 	add.w	r9, sp, #88	; 0x58
					printf(", ");
    e026:	f8df 8198 	ldr.w	r8, [pc, #408]	; e1c0 <main+0x41c>
    e02a:	4e51      	ldr	r6, [pc, #324]	; (e170 <main+0x3cc>)
				printf("\"%d\"", task_val[i]);
    e02c:	4f51      	ldr	r7, [pc, #324]	; (e174 <main+0x3d0>)
					printf(", ");
    e02e:	4640      	mov	r0, r8
    e030:	47b0      	blx	r6
				printf("\"%d\"", task_val[i]);
    e032:	f855 1b04 	ldr.w	r1, [r5], #4
    e036:	4638      	mov	r0, r7
    e038:	47b0      	blx	r6
				if (i != GRID_TASK_NUMBER-1){
    e03a:	454d      	cmp	r5, r9
    e03c:	d1f7      	bne.n	e02e <main+0x28a>
			printf("]}\r\n");
    e03e:	484e      	ldr	r0, [pc, #312]	; (e178 <main+0x3d4>)
    e040:	4b4e      	ldr	r3, [pc, #312]	; (e17c <main+0x3d8>)
    e042:	4798      	blx	r3
			printf("{\"type\":\"LOOP\", \"data\": [\"%d\", \"%d\", \"%d\", \"%d\"]}\r\n", loopcounter, loopslow, loopfast, loopwarp);
    e044:	9b04      	ldr	r3, [sp, #16]
    e046:	9300      	str	r3, [sp, #0]
    e048:	9b07      	ldr	r3, [sp, #28]
    e04a:	9a06      	ldr	r2, [sp, #24]
    e04c:	9903      	ldr	r1, [sp, #12]
    e04e:	484c      	ldr	r0, [pc, #304]	; (e180 <main+0x3dc>)
    e050:	4d47      	ldr	r5, [pc, #284]	; (e170 <main+0x3cc>)
    e052:	47a8      	blx	r5
			loopwarp = 0;
    e054:	9404      	str	r4, [sp, #16]
			loopfast = 0;
    e056:	9407      	str	r4, [sp, #28]
			loopslow = 0;
    e058:	9406      	str	r4, [sp, #24]
			loopcounter = 0;
    e05a:	9403      	str	r4, [sp, #12]
	mod->current_task = next_task;
    e05c:	2302      	movs	r3, #2
    e05e:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_receive_complete_task(&GRID_PORT_N);
    e062:	4848      	ldr	r0, [pc, #288]	; (e184 <main+0x3e0>)
    e064:	4d48      	ldr	r5, [pc, #288]	; (e188 <main+0x3e4>)
    e066:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_E);
    e068:	f8df 9158 	ldr.w	r9, [pc, #344]	; e1c4 <main+0x420>
    e06c:	4648      	mov	r0, r9
    e06e:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_S);
    e070:	f8df 8154 	ldr.w	r8, [pc, #340]	; e1c8 <main+0x424>
    e074:	4640      	mov	r0, r8
    e076:	47a8      	blx	r5
		grid_port_receive_complete_task(&GRID_PORT_W);
    e078:	4f44      	ldr	r7, [pc, #272]	; (e18c <main+0x3e8>)
    e07a:	4638      	mov	r0, r7
    e07c:	47a8      	blx	r5
	mod->current_task = next_task;
    e07e:	2303      	movs	r3, #3
    e080:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_ui(&GRID_PORT_U);
    e084:	4e42      	ldr	r6, [pc, #264]	; (e190 <main+0x3ec>)
    e086:	4630      	mov	r0, r6
    e088:	4b42      	ldr	r3, [pc, #264]	; (e194 <main+0x3f0>)
    e08a:	4798      	blx	r3
	mod->current_task = next_task;
    e08c:	2304      	movs	r3, #4
    e08e:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    e092:	2101      	movs	r1, #1
    e094:	4630      	mov	r0, r6
    e096:	4d40      	ldr	r5, [pc, #256]	; (e198 <main+0x3f4>)
    e098:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    e09a:	4621      	mov	r1, r4
    e09c:	4839      	ldr	r0, [pc, #228]	; (e184 <main+0x3e0>)
    e09e:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    e0a0:	4621      	mov	r1, r4
    e0a2:	4648      	mov	r0, r9
    e0a4:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_S, 0);		
    e0a6:	4621      	mov	r1, r4
    e0a8:	4640      	mov	r0, r8
    e0aa:	47a8      	blx	r5
		grid_port_process_inbound(&GRID_PORT_W, 0);						
    e0ac:	4621      	mov	r1, r4
    e0ae:	4638      	mov	r0, r7
    e0b0:	47a8      	blx	r5
	mod->current_task = next_task;
    e0b2:	2305      	movs	r3, #5
    e0b4:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_port_process_outbound_usart(&GRID_PORT_N);
    e0b8:	4832      	ldr	r0, [pc, #200]	; (e184 <main+0x3e0>)
    e0ba:	4d38      	ldr	r5, [pc, #224]	; (e19c <main+0x3f8>)
    e0bc:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_E);
    e0be:	4648      	mov	r0, r9
    e0c0:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_S);
    e0c2:	4640      	mov	r0, r8
    e0c4:	47a8      	blx	r5
		grid_port_process_outbound_usart(&GRID_PORT_W);
    e0c6:	4638      	mov	r0, r7
    e0c8:	47a8      	blx	r5
		grid_port_process_outbound_usb(&GRID_PORT_H);
    e0ca:	4835      	ldr	r0, [pc, #212]	; (e1a0 <main+0x3fc>)
    e0cc:	4b35      	ldr	r3, [pc, #212]	; (e1a4 <main+0x400>)
    e0ce:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    e0d0:	4630      	mov	r0, r6
    e0d2:	4b35      	ldr	r3, [pc, #212]	; (e1a8 <main+0x404>)
    e0d4:	4798      	blx	r3
	mod->current_task = next_task;
    e0d6:	2307      	movs	r3, #7
    e0d8:	f88a 3001 	strb.w	r3, [sl, #1]
		if (grid_sys_state.alert_state){
    e0dc:	4b1d      	ldr	r3, [pc, #116]	; (e154 <main+0x3b0>)
    e0de:	889b      	ldrh	r3, [r3, #4]
    e0e0:	b29b      	uxth	r3, r3
    e0e2:	2b00      	cmp	r3, #0
    e0e4:	f47f aeac 	bne.w	de40 <main+0x9c>
	mod->current_task = next_task;
    e0e8:	2306      	movs	r3, #6
    e0ea:	f88a 3001 	strb.w	r3, [sl, #1]
		grid_led_tick(&grid_led_state);
    e0ee:	4658      	mov	r0, fp
    e0f0:	4b2e      	ldr	r3, [pc, #184]	; (e1ac <main+0x408>)
    e0f2:	4798      	blx	r3
			grid_led_render_all(&grid_led_state);	
    e0f4:	4658      	mov	r0, fp
    e0f6:	4b2e      	ldr	r3, [pc, #184]	; (e1b0 <main+0x40c>)
    e0f8:	4798      	blx	r3
			grid_led_hardware_start_transfer(&grid_led_state);
    e0fa:	4658      	mov	r0, fp
    e0fc:	4b2d      	ldr	r3, [pc, #180]	; (e1b4 <main+0x410>)
    e0fe:	4798      	blx	r3
	mod->current_task = next_task;
    e100:	f88a 4001 	strb.w	r4, [sl, #1]
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    e104:	9d05      	ldr	r5, [sp, #20]
    e106:	4629      	mov	r1, r5
    e108:	4812      	ldr	r0, [pc, #72]	; (e154 <main+0x3b0>)
    e10a:	4b2b      	ldr	r3, [pc, #172]	; (e1b8 <main+0x414>)
    e10c:	4798      	blx	r3
		if (elapsed < RTC1MS){
    e10e:	280f      	cmp	r0, #15
    e110:	d818      	bhi.n	e144 <main+0x3a0>
			if (loopwarp>5){
    e112:	9904      	ldr	r1, [sp, #16]
    e114:	2905      	cmp	r1, #5
    e116:	d911      	bls.n	e13c <main+0x398>
				if (RTC1MS - elapsed > 0){
    e118:	2810      	cmp	r0, #16
    e11a:	d00f      	beq.n	e13c <main+0x398>
					if ((RTC1MS - elapsed)<loopwarp){				
    e11c:	f1c0 0310 	rsb	r3, r0, #16
    e120:	4299      	cmp	r1, r3
    e122:	f67f aefe 	bls.w	df22 <main+0x17e>
    e126:	f1a1 0310 	sub.w	r3, r1, #16
						loopwarp-=(RTC1MS - elapsed);
    e12a:	4403      	add	r3, r0
    e12c:	9304      	str	r3, [sp, #16]
    e12e:	f1a5 0310 	sub.w	r3, r5, #16
						loopstart-=(RTC1MS - elapsed);
    e132:	18c3      	adds	r3, r0, r3
    e134:	9305      	str	r3, [sp, #20]
					loopfast++;
    e136:	9b07      	ldr	r3, [sp, #28]
    e138:	3301      	adds	r3, #1
    e13a:	9307      	str	r3, [sp, #28]
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    e13c:	4d1e      	ldr	r5, [pc, #120]	; (e1b8 <main+0x414>)
				delay_us(1);			
    e13e:	4e1f      	ldr	r6, [pc, #124]	; (e1bc <main+0x418>)
    e140:	9f05      	ldr	r7, [sp, #20]
    e142:	e73b      	b.n	dfbc <main+0x218>
    e144:	9b04      	ldr	r3, [sp, #16]
    e146:	3b10      	subs	r3, #16
			}	
					
		}
		else{
			loopwarp+= elapsed - RTC1MS;
    e148:	18c3      	adds	r3, r0, r3
    e14a:	9304      	str	r3, [sp, #16]
			
			loopslow++;
    e14c:	9b06      	ldr	r3, [sp, #24]
    e14e:	3301      	adds	r3, #1
    e150:	9306      	str	r3, [sp, #24]
    e152:	e738      	b.n	dfc6 <main+0x222>
    e154:	20003280 	.word	0x20003280
    e158:	00008109 	.word	0x00008109
    e15c:	20000d68 	.word	0x20000d68
    e160:	0000fec3 	.word	0x0000fec3
    e164:	20007d24 	.word	0x20007d24
    e168:	0000d55d 	.word	0x0000d55d
    e16c:	00011cc8 	.word	0x00011cc8
    e170:	0001002d 	.word	0x0001002d
    e174:	00011ce4 	.word	0x00011ce4
    e178:	00011c18 	.word	0x00011c18
    e17c:	00010115 	.word	0x00010115
    e180:	00011cf0 	.word	0x00011cf0
    e184:	2000121c 	.word	0x2000121c
    e188:	0000dcad 	.word	0x0000dcad
    e18c:	20003730 	.word	0x20003730
    e190:	20002268 	.word	0x20002268
    e194:	00008961 	.word	0x00008961
    e198:	00005cfd 	.word	0x00005cfd
    e19c:	000064d1 	.word	0x000064d1
    e1a0:	20005758 	.word	0x20005758
    e1a4:	00005ecd 	.word	0x00005ecd
    e1a8:	00006371 	.word	0x00006371
    e1ac:	000065c9 	.word	0x000065c9
    e1b0:	0000694d 	.word	0x0000694d
    e1b4:	00006b4d 	.word	0x00006b4d
    e1b8:	0000810d 	.word	0x0000810d
    e1bc:	0000904d 	.word	0x0000904d
    e1c0:	00011cec 	.word	0x00011cec
    e1c4:	20006760 	.word	0x20006760
    e1c8:	2000474c 	.word	0x2000474c

0000e1cc <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    e1cc:	b940      	cbnz	r0, e1e0 <_read+0x14>
{
    e1ce:	b508      	push	{r3, lr}
    e1d0:	460b      	mov	r3, r1
    e1d2:	4611      	mov	r1, r2
    e1d4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    e1d6:	4b04      	ldr	r3, [pc, #16]	; (e1e8 <_read+0x1c>)
    e1d8:	4798      	blx	r3
    e1da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    e1de:	bd08      	pop	{r3, pc}
		return -1;
    e1e0:	f04f 30ff 	mov.w	r0, #4294967295
    e1e4:	4770      	bx	lr
    e1e6:	bf00      	nop
    e1e8:	0000e23d 	.word	0x0000e23d

0000e1ec <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    e1ec:	3801      	subs	r0, #1
    e1ee:	2802      	cmp	r0, #2
    e1f0:	d808      	bhi.n	e204 <_write+0x18>
{
    e1f2:	b508      	push	{r3, lr}
    e1f4:	460b      	mov	r3, r1
    e1f6:	4611      	mov	r1, r2
    e1f8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    e1fa:	4b04      	ldr	r3, [pc, #16]	; (e20c <_write+0x20>)
    e1fc:	4798      	blx	r3
    e1fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    e202:	bd08      	pop	{r3, pc}
		return -1;
    e204:	f04f 30ff 	mov.w	r0, #4294967295
    e208:	4770      	bx	lr
    e20a:	bf00      	nop
    e20c:	0000e261 	.word	0x0000e261

0000e210 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    e210:	b570      	push	{r4, r5, r6, lr}
    e212:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    e214:	4d06      	ldr	r5, [pc, #24]	; (e230 <stdio_io_init+0x20>)
    e216:	682b      	ldr	r3, [r5, #0]
    e218:	2100      	movs	r1, #0
    e21a:	6898      	ldr	r0, [r3, #8]
    e21c:	4c05      	ldr	r4, [pc, #20]	; (e234 <stdio_io_init+0x24>)
    e21e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    e220:	682b      	ldr	r3, [r5, #0]
    e222:	2100      	movs	r1, #0
    e224:	6858      	ldr	r0, [r3, #4]
    e226:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    e228:	4b03      	ldr	r3, [pc, #12]	; (e238 <stdio_io_init+0x28>)
    e22a:	601e      	str	r6, [r3, #0]
    e22c:	bd70      	pop	{r4, r5, r6, pc}
    e22e:	bf00      	nop
    e230:	20000558 	.word	0x20000558
    e234:	000101b9 	.word	0x000101b9
    e238:	20000dc0 	.word	0x20000dc0

0000e23c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    e23c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    e23e:	4b06      	ldr	r3, [pc, #24]	; (e258 <stdio_io_read+0x1c>)
    e240:	681b      	ldr	r3, [r3, #0]
    e242:	b133      	cbz	r3, e252 <stdio_io_read+0x16>
    e244:	460a      	mov	r2, r1
    e246:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    e248:	b292      	uxth	r2, r2
    e24a:	4618      	mov	r0, r3
    e24c:	4b03      	ldr	r3, [pc, #12]	; (e25c <stdio_io_read+0x20>)
    e24e:	4798      	blx	r3
    e250:	bd08      	pop	{r3, pc}
		return 0;
    e252:	2000      	movs	r0, #0
}
    e254:	bd08      	pop	{r3, pc}
    e256:	bf00      	nop
    e258:	20000dc0 	.word	0x20000dc0
    e25c:	000091c1 	.word	0x000091c1

0000e260 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    e260:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    e262:	4b06      	ldr	r3, [pc, #24]	; (e27c <stdio_io_write+0x1c>)
    e264:	681b      	ldr	r3, [r3, #0]
    e266:	b133      	cbz	r3, e276 <stdio_io_write+0x16>
    e268:	460a      	mov	r2, r1
    e26a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    e26c:	b292      	uxth	r2, r2
    e26e:	4618      	mov	r0, r3
    e270:	4b03      	ldr	r3, [pc, #12]	; (e280 <stdio_io_write+0x20>)
    e272:	4798      	blx	r3
    e274:	bd08      	pop	{r3, pc}
		return 0;
    e276:	2000      	movs	r0, #0
}
    e278:	bd08      	pop	{r3, pc}
    e27a:	bf00      	nop
    e27c:	20000dc0 	.word	0x20000dc0
    e280:	000091b9 	.word	0x000091b9

0000e284 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    e284:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    e286:	4c04      	ldr	r4, [pc, #16]	; (e298 <stdio_redirect_init+0x14>)
    e288:	4620      	mov	r0, r4
    e28a:	4b04      	ldr	r3, [pc, #16]	; (e29c <stdio_redirect_init+0x18>)
    e28c:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    e28e:	4620      	mov	r0, r4
    e290:	4b03      	ldr	r3, [pc, #12]	; (e2a0 <stdio_redirect_init+0x1c>)
    e292:	4798      	blx	r3
    e294:	bd10      	pop	{r4, pc}
    e296:	bf00      	nop
    e298:	20000fbc 	.word	0x20000fbc
    e29c:	0000994d 	.word	0x0000994d
    e2a0:	0000e211 	.word	0x0000e211

0000e2a4 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2a6:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    e2a8:	780b      	ldrb	r3, [r1, #0]
    e2aa:	f3c3 1441 	ubfx	r4, r3, #5, #2
    e2ae:	2c01      	cmp	r4, #1
    e2b0:	d15e      	bne.n	e370 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    e2b2:	888c      	ldrh	r4, [r1, #4]
    e2b4:	4d35      	ldr	r5, [pc, #212]	; (e38c <cdcdf_acm_req+0xe8>)
    e2b6:	782d      	ldrb	r5, [r5, #0]
    e2b8:	42a5      	cmp	r5, r4
    e2ba:	d003      	beq.n	e2c4 <cdcdf_acm_req+0x20>
    e2bc:	4d33      	ldr	r5, [pc, #204]	; (e38c <cdcdf_acm_req+0xe8>)
    e2be:	786d      	ldrb	r5, [r5, #1]
    e2c0:	42a5      	cmp	r5, r4
    e2c2:	d158      	bne.n	e376 <cdcdf_acm_req+0xd2>
    e2c4:	4616      	mov	r6, r2
    e2c6:	460c      	mov	r4, r1
    e2c8:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    e2ca:	f013 0f80 	tst.w	r3, #128	; 0x80
    e2ce:	d10c      	bne.n	e2ea <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    e2d0:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    e2d2:	4b2f      	ldr	r3, [pc, #188]	; (e390 <cdcdf_acm_req+0xec>)
    e2d4:	4798      	blx	r3
    e2d6:	4601      	mov	r1, r0
	switch (req->bRequest) {
    e2d8:	7863      	ldrb	r3, [r4, #1]
    e2da:	2b20      	cmp	r3, #32
    e2dc:	d013      	beq.n	e306 <cdcdf_acm_req+0x62>
    e2de:	2b22      	cmp	r3, #34	; 0x22
    e2e0:	d032      	beq.n	e348 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    e2e2:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    e2e6:	b003      	add	sp, #12
    e2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    e2ea:	2a01      	cmp	r2, #1
    e2ec:	d046      	beq.n	e37c <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    e2ee:	784b      	ldrb	r3, [r1, #1]
    e2f0:	2b21      	cmp	r3, #33	; 0x21
    e2f2:	d145      	bne.n	e380 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e2f4:	88cb      	ldrh	r3, [r1, #6]
    e2f6:	2b07      	cmp	r3, #7
    e2f8:	d145      	bne.n	e386 <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    e2fa:	2300      	movs	r3, #0
    e2fc:	2207      	movs	r2, #7
    e2fe:	4925      	ldr	r1, [pc, #148]	; (e394 <cdcdf_acm_req+0xf0>)
    e300:	4c25      	ldr	r4, [pc, #148]	; (e398 <cdcdf_acm_req+0xf4>)
    e302:	47a0      	blx	r4
    e304:	e7ef      	b.n	e2e6 <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    e306:	2f07      	cmp	r7, #7
    e308:	d12b      	bne.n	e362 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    e30a:	b1be      	cbz	r6, e33c <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    e30c:	6800      	ldr	r0, [r0, #0]
    e30e:	9000      	str	r0, [sp, #0]
    e310:	888a      	ldrh	r2, [r1, #4]
    e312:	798b      	ldrb	r3, [r1, #6]
    e314:	f8ad 2004 	strh.w	r2, [sp, #4]
    e318:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    e31c:	4b1b      	ldr	r3, [pc, #108]	; (e38c <cdcdf_acm_req+0xe8>)
    e31e:	691b      	ldr	r3, [r3, #16]
    e320:	b113      	cbz	r3, e328 <cdcdf_acm_req+0x84>
    e322:	4668      	mov	r0, sp
    e324:	4798      	blx	r3
    e326:	b1f8      	cbz	r0, e368 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    e328:	4b18      	ldr	r3, [pc, #96]	; (e38c <cdcdf_acm_req+0xe8>)
    e32a:	aa02      	add	r2, sp, #8
    e32c:	e912 0003 	ldmdb	r2, {r0, r1}
    e330:	6098      	str	r0, [r3, #8]
    e332:	8199      	strh	r1, [r3, #12]
    e334:	0c09      	lsrs	r1, r1, #16
    e336:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    e338:	2000      	movs	r0, #0
    e33a:	e7d4      	b.n	e2e6 <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    e33c:	2300      	movs	r3, #0
    e33e:	2207      	movs	r2, #7
    e340:	4628      	mov	r0, r5
    e342:	4c15      	ldr	r4, [pc, #84]	; (e398 <cdcdf_acm_req+0xf4>)
    e344:	47a0      	blx	r4
    e346:	e7ce      	b.n	e2e6 <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    e348:	2300      	movs	r3, #0
    e34a:	461a      	mov	r2, r3
    e34c:	4619      	mov	r1, r3
    e34e:	4618      	mov	r0, r3
    e350:	4d11      	ldr	r5, [pc, #68]	; (e398 <cdcdf_acm_req+0xf4>)
    e352:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    e354:	4b0d      	ldr	r3, [pc, #52]	; (e38c <cdcdf_acm_req+0xe8>)
    e356:	695b      	ldr	r3, [r3, #20]
    e358:	b143      	cbz	r3, e36c <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    e35a:	8860      	ldrh	r0, [r4, #2]
    e35c:	4798      	blx	r3
		return ERR_NONE;
    e35e:	2000      	movs	r0, #0
    e360:	e7c1      	b.n	e2e6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    e362:	f04f 30ff 	mov.w	r0, #4294967295
    e366:	e7be      	b.n	e2e6 <cdcdf_acm_req+0x42>
			return ERR_NONE;
    e368:	2000      	movs	r0, #0
    e36a:	e7bc      	b.n	e2e6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    e36c:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    e36e:	e7ba      	b.n	e2e6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    e370:	f06f 0009 	mvn.w	r0, #9
    e374:	e7b7      	b.n	e2e6 <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    e376:	f06f 0009 	mvn.w	r0, #9
    e37a:	e7b4      	b.n	e2e6 <cdcdf_acm_req+0x42>
		return ERR_NONE;
    e37c:	2000      	movs	r0, #0
    e37e:	e7b2      	b.n	e2e6 <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    e380:	f06f 000c 	mvn.w	r0, #12
    e384:	e7af      	b.n	e2e6 <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    e386:	f04f 30ff 	mov.w	r0, #4294967295
    e38a:	e7ac      	b.n	e2e6 <cdcdf_acm_req+0x42>
    e38c:	20000dc4 	.word	0x20000dc4
    e390:	0000f3d5 	.word	0x0000f3d5
    e394:	20000dcc 	.word	0x20000dcc
    e398:	0000eec9 	.word	0x0000eec9

0000e39c <cdcdf_acm_ctrl>:
{
    e39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3a0:	b083      	sub	sp, #12
    e3a2:	4616      	mov	r6, r2
	switch (ctrl) {
    e3a4:	2901      	cmp	r1, #1
    e3a6:	d066      	beq.n	e476 <cdcdf_acm_ctrl+0xda>
    e3a8:	b141      	cbz	r1, e3bc <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    e3aa:	2902      	cmp	r1, #2
    e3ac:	bf0c      	ite	eq
    e3ae:	f06f 001a 	mvneq.w	r0, #26
    e3b2:	f06f 000c 	mvnne.w	r0, #12
}
    e3b6:	b003      	add	sp, #12
    e3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e3bc:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    e3c0:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    e3c2:	2800      	cmp	r0, #0
    e3c4:	f000 8085 	beq.w	e4d2 <cdcdf_acm_ctrl+0x136>
    e3c8:	f10a 3bff 	add.w	fp, sl, #4294967295
    e3cc:	f10a 0301 	add.w	r3, sl, #1
    e3d0:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    e3d2:	4f46      	ldr	r7, [pc, #280]	; (e4ec <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    e3d4:	f8df 9124 	ldr.w	r9, [pc, #292]	; e4fc <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    e3d8:	f8df 8124 	ldr.w	r8, [pc, #292]	; e500 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    e3dc:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    e3de:	7943      	ldrb	r3, [r0, #5]
    e3e0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    e3e4:	2b02      	cmp	r3, #2
    e3e6:	d002      	beq.n	e3ee <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    e3e8:	f06f 0009 	mvn.w	r0, #9
    e3ec:	e7e3      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
    e3ee:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    e3f2:	f89b 3000 	ldrb.w	r3, [fp]
    e3f6:	429a      	cmp	r2, r3
    e3f8:	d06e      	beq.n	e4d8 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    e3fa:	2bff      	cmp	r3, #255	; 0xff
    e3fc:	d16f      	bne.n	e4de <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    e3fe:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    e402:	2205      	movs	r2, #5
    e404:	6871      	ldr	r1, [r6, #4]
    e406:	4b3a      	ldr	r3, [pc, #232]	; (e4f0 <cdcdf_acm_ctrl+0x154>)
    e408:	4798      	blx	r3
		while (NULL != ep) {
    e40a:	4604      	mov	r4, r0
    e40c:	b1f8      	cbz	r0, e44e <cdcdf_acm_ctrl+0xb2>
    e40e:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    e412:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    e414:	7963      	ldrb	r3, [r4, #5]
    e416:	7922      	ldrb	r2, [r4, #4]
    e418:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    e41c:	b292      	uxth	r2, r2
    e41e:	78e1      	ldrb	r1, [r4, #3]
    e420:	4628      	mov	r0, r5
    e422:	47b8      	blx	r7
    e424:	2800      	cmp	r0, #0
    e426:	d15d      	bne.n	e4e4 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    e428:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    e42c:	bf14      	ite	ne
    e42e:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    e432:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    e436:	4628      	mov	r0, r5
    e438:	47c8      	blx	r9
			desc->sod = ep;
    e43a:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    e43c:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    e43e:	6871      	ldr	r1, [r6, #4]
    e440:	4420      	add	r0, r4
    e442:	47c0      	blx	r8
		while (NULL != ep) {
    e444:	4604      	mov	r4, r0
    e446:	2800      	cmp	r0, #0
    e448:	d1e3      	bne.n	e412 <cdcdf_acm_ctrl+0x76>
    e44a:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    e44e:	6833      	ldr	r3, [r6, #0]
    e450:	7818      	ldrb	r0, [r3, #0]
    e452:	2204      	movs	r2, #4
    e454:	6871      	ldr	r1, [r6, #4]
    e456:	4418      	add	r0, r3
    e458:	4b25      	ldr	r3, [pc, #148]	; (e4f0 <cdcdf_acm_ctrl+0x154>)
    e45a:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    e45c:	9b00      	ldr	r3, [sp, #0]
    e45e:	459b      	cmp	fp, r3
    e460:	d004      	beq.n	e46c <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    e462:	2800      	cmp	r0, #0
    e464:	d1ba      	bne.n	e3dc <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    e466:	f06f 0009 	mvn.w	r0, #9
    e46a:	e7a4      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    e46c:	2201      	movs	r2, #1
    e46e:	4b21      	ldr	r3, [pc, #132]	; (e4f4 <cdcdf_acm_ctrl+0x158>)
    e470:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    e472:	2000      	movs	r0, #0
    e474:	e79f      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    e476:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    e478:	b142      	cbz	r2, e48c <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    e47a:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    e47c:	795b      	ldrb	r3, [r3, #5]
    e47e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    e482:	2b02      	cmp	r3, #2
    e484:	d002      	beq.n	e48c <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    e486:	f06f 0009 	mvn.w	r0, #9
    e48a:	e794      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    e48c:	7823      	ldrb	r3, [r4, #0]
    e48e:	2bff      	cmp	r3, #255	; 0xff
    e490:	d008      	beq.n	e4a4 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    e492:	23ff      	movs	r3, #255	; 0xff
    e494:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    e496:	78a0      	ldrb	r0, [r4, #2]
    e498:	4298      	cmp	r0, r3
    e49a:	d003      	beq.n	e4a4 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    e49c:	4b16      	ldr	r3, [pc, #88]	; (e4f8 <cdcdf_acm_ctrl+0x15c>)
    e49e:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    e4a0:	23ff      	movs	r3, #255	; 0xff
    e4a2:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    e4a4:	7863      	ldrb	r3, [r4, #1]
    e4a6:	2bff      	cmp	r3, #255	; 0xff
    e4a8:	d008      	beq.n	e4bc <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    e4aa:	23ff      	movs	r3, #255	; 0xff
    e4ac:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    e4ae:	78e0      	ldrb	r0, [r4, #3]
    e4b0:	4298      	cmp	r0, r3
    e4b2:	d003      	beq.n	e4bc <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    e4b4:	4b10      	ldr	r3, [pc, #64]	; (e4f8 <cdcdf_acm_ctrl+0x15c>)
    e4b6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    e4b8:	23ff      	movs	r3, #255	; 0xff
    e4ba:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    e4bc:	7920      	ldrb	r0, [r4, #4]
    e4be:	28ff      	cmp	r0, #255	; 0xff
    e4c0:	d003      	beq.n	e4ca <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    e4c2:	4b0d      	ldr	r3, [pc, #52]	; (e4f8 <cdcdf_acm_ctrl+0x15c>)
    e4c4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    e4c6:	23ff      	movs	r3, #255	; 0xff
    e4c8:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    e4ca:	2000      	movs	r0, #0
    e4cc:	4b09      	ldr	r3, [pc, #36]	; (e4f4 <cdcdf_acm_ctrl+0x158>)
    e4ce:	7158      	strb	r0, [r3, #5]
    e4d0:	e771      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    e4d2:	f06f 0009 	mvn.w	r0, #9
    e4d6:	e76e      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    e4d8:	f06f 0011 	mvn.w	r0, #17
    e4dc:	e76b      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    e4de:	f06f 001b 	mvn.w	r0, #27
    e4e2:	e768      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    e4e4:	f06f 0013 	mvn.w	r0, #19
    e4e8:	e765      	b.n	e3b6 <cdcdf_acm_ctrl+0x1a>
    e4ea:	bf00      	nop
    e4ec:	00009c55 	.word	0x00009c55
    e4f0:	0000f3f5 	.word	0x0000f3f5
    e4f4:	20000dc4 	.word	0x20000dc4
    e4f8:	00009cbd 	.word	0x00009cbd
    e4fc:	00009ce9 	.word	0x00009ce9
    e500:	0000f42f 	.word	0x0000f42f

0000e504 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    e504:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    e506:	4b0a      	ldr	r3, [pc, #40]	; (e530 <cdcdf_acm_init+0x2c>)
    e508:	4798      	blx	r3
    e50a:	2801      	cmp	r0, #1
    e50c:	d80c      	bhi.n	e528 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    e50e:	4809      	ldr	r0, [pc, #36]	; (e534 <cdcdf_acm_init+0x30>)
    e510:	4b09      	ldr	r3, [pc, #36]	; (e538 <cdcdf_acm_init+0x34>)
    e512:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    e514:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    e516:	3018      	adds	r0, #24
    e518:	4b08      	ldr	r3, [pc, #32]	; (e53c <cdcdf_acm_init+0x38>)
    e51a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    e51c:	4908      	ldr	r1, [pc, #32]	; (e540 <cdcdf_acm_init+0x3c>)
    e51e:	2001      	movs	r0, #1
    e520:	4b08      	ldr	r3, [pc, #32]	; (e544 <cdcdf_acm_init+0x40>)
    e522:	4798      	blx	r3
	return ERR_NONE;
    e524:	2000      	movs	r0, #0
    e526:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    e528:	f06f 0010 	mvn.w	r0, #16
}
    e52c:	bd08      	pop	{r3, pc}
    e52e:	bf00      	nop
    e530:	0000f3e1 	.word	0x0000f3e1
    e534:	20000dc4 	.word	0x20000dc4
    e538:	0000e39d 	.word	0x0000e39d
    e53c:	0000f381 	.word	0x0000f381
    e540:	20000398 	.word	0x20000398
    e544:	0000f305 	.word	0x0000f305

0000e548 <cdcdf_acm_write>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    e548:	4b07      	ldr	r3, [pc, #28]	; (e568 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    e54a:	795b      	ldrb	r3, [r3, #5]
    e54c:	b143      	cbz	r3, e560 <cdcdf_acm_write+0x18>
{
    e54e:	b510      	push	{r4, lr}
    e550:	460a      	mov	r2, r1
    e552:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    e554:	2301      	movs	r3, #1
    e556:	4804      	ldr	r0, [pc, #16]	; (e568 <cdcdf_acm_write+0x20>)
    e558:	78c0      	ldrb	r0, [r0, #3]
    e55a:	4c04      	ldr	r4, [pc, #16]	; (e56c <cdcdf_acm_write+0x24>)
    e55c:	47a0      	blx	r4
    e55e:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    e560:	f06f 0010 	mvn.w	r0, #16
    e564:	4770      	bx	lr
    e566:	bf00      	nop
    e568:	20000dc4 	.word	0x20000dc4
    e56c:	0000eec9 	.word	0x0000eec9

0000e570 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e570:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    e572:	780b      	ldrb	r3, [r1, #0]
    e574:	2b81      	cmp	r3, #129	; 0x81
    e576:	d010      	beq.n	e59a <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    e578:	f3c3 1341 	ubfx	r3, r3, #5, #2
    e57c:	2b01      	cmp	r3, #1
    e57e:	d13f      	bne.n	e600 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    e580:	888a      	ldrh	r2, [r1, #4]
    e582:	4b22      	ldr	r3, [pc, #136]	; (e60c <hid_keyboard_req+0x9c>)
    e584:	7b1b      	ldrb	r3, [r3, #12]
    e586:	429a      	cmp	r2, r3
    e588:	d13d      	bne.n	e606 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    e58a:	784b      	ldrb	r3, [r1, #1]
    e58c:	2b03      	cmp	r3, #3
    e58e:	d028      	beq.n	e5e2 <hid_keyboard_req+0x72>
    e590:	2b0b      	cmp	r3, #11
    e592:	d02c      	beq.n	e5ee <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    e594:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    e598:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    e59a:	784b      	ldrb	r3, [r1, #1]
    e59c:	2b06      	cmp	r3, #6
    e59e:	d002      	beq.n	e5a6 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    e5a0:	f06f 0009 	mvn.w	r0, #9
    e5a4:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    e5a6:	888a      	ldrh	r2, [r1, #4]
    e5a8:	4b18      	ldr	r3, [pc, #96]	; (e60c <hid_keyboard_req+0x9c>)
    e5aa:	7b1b      	ldrb	r3, [r3, #12]
    e5ac:	429a      	cmp	r2, r3
    e5ae:	d002      	beq.n	e5b6 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    e5b0:	f06f 0009 	mvn.w	r0, #9
    e5b4:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    e5b6:	884b      	ldrh	r3, [r1, #2]
    e5b8:	0a1b      	lsrs	r3, r3, #8
    e5ba:	2b21      	cmp	r3, #33	; 0x21
    e5bc:	d004      	beq.n	e5c8 <hid_keyboard_req+0x58>
    e5be:	2b22      	cmp	r3, #34	; 0x22
    e5c0:	d009      	beq.n	e5d6 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    e5c2:	f06f 000c 	mvn.w	r0, #12
    e5c6:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    e5c8:	4b10      	ldr	r3, [pc, #64]	; (e60c <hid_keyboard_req+0x9c>)
    e5ca:	6819      	ldr	r1, [r3, #0]
    e5cc:	2300      	movs	r3, #0
    e5ce:	780a      	ldrb	r2, [r1, #0]
    e5d0:	4c0f      	ldr	r4, [pc, #60]	; (e610 <hid_keyboard_req+0xa0>)
    e5d2:	47a0      	blx	r4
    e5d4:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    e5d6:	2300      	movs	r3, #0
    e5d8:	223b      	movs	r2, #59	; 0x3b
    e5da:	490e      	ldr	r1, [pc, #56]	; (e614 <hid_keyboard_req+0xa4>)
    e5dc:	4c0c      	ldr	r4, [pc, #48]	; (e610 <hid_keyboard_req+0xa0>)
    e5de:	47a0      	blx	r4
    e5e0:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    e5e2:	2300      	movs	r3, #0
    e5e4:	2201      	movs	r2, #1
    e5e6:	490c      	ldr	r1, [pc, #48]	; (e618 <hid_keyboard_req+0xa8>)
    e5e8:	4c09      	ldr	r4, [pc, #36]	; (e610 <hid_keyboard_req+0xa0>)
    e5ea:	47a0      	blx	r4
    e5ec:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    e5ee:	884a      	ldrh	r2, [r1, #2]
    e5f0:	4b06      	ldr	r3, [pc, #24]	; (e60c <hid_keyboard_req+0x9c>)
    e5f2:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    e5f4:	2300      	movs	r3, #0
    e5f6:	461a      	mov	r2, r3
    e5f8:	4619      	mov	r1, r3
    e5fa:	4c05      	ldr	r4, [pc, #20]	; (e610 <hid_keyboard_req+0xa0>)
    e5fc:	47a0      	blx	r4
    e5fe:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    e600:	f06f 0009 	mvn.w	r0, #9
    e604:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    e606:	f06f 0009 	mvn.w	r0, #9
    e60a:	bd10      	pop	{r4, pc}
    e60c:	20000de8 	.word	0x20000de8
    e610:	0000eec9 	.word	0x0000eec9
    e614:	00011d24 	.word	0x00011d24
    e618:	20000df7 	.word	0x20000df7

0000e61c <hid_keyboard_ctrl>:
{
    e61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e620:	4614      	mov	r4, r2
	switch (ctrl) {
    e622:	2901      	cmp	r1, #1
    e624:	d050      	beq.n	e6c8 <hid_keyboard_ctrl+0xac>
    e626:	b141      	cbz	r1, e63a <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    e628:	2902      	cmp	r1, #2
    e62a:	bf0c      	ite	eq
    e62c:	f06f 051a 	mvneq.w	r5, #26
    e630:	f06f 050c 	mvnne.w	r5, #12
}
    e634:	4628      	mov	r0, r5
    e636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    e63a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    e63e:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    e640:	2b00      	cmp	r3, #0
    e642:	d05e      	beq.n	e702 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    e644:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    e646:	795b      	ldrb	r3, [r3, #5]
    e648:	2b03      	cmp	r3, #3
    e64a:	d15d      	bne.n	e708 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    e64c:	f898 300c 	ldrb.w	r3, [r8, #12]
    e650:	429a      	cmp	r2, r3
    e652:	d05c      	beq.n	e70e <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    e654:	2bff      	cmp	r3, #255	; 0xff
    e656:	d15d      	bne.n	e714 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    e658:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    e65c:	6823      	ldr	r3, [r4, #0]
    e65e:	7818      	ldrb	r0, [r3, #0]
    e660:	2221      	movs	r2, #33	; 0x21
    e662:	6861      	ldr	r1, [r4, #4]
    e664:	4418      	add	r0, r3
    e666:	4b31      	ldr	r3, [pc, #196]	; (e72c <hid_keyboard_ctrl+0x110>)
    e668:	4798      	blx	r3
    e66a:	4b31      	ldr	r3, [pc, #196]	; (e730 <hid_keyboard_ctrl+0x114>)
    e66c:	6018      	str	r0, [r3, #0]
    e66e:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    e670:	f8df 90c4 	ldr.w	r9, [pc, #196]	; e738 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    e674:	f8df a0c4 	ldr.w	sl, [pc, #196]	; e73c <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    e678:	f8df b0c4 	ldr.w	fp, [pc, #196]	; e740 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    e67c:	6823      	ldr	r3, [r4, #0]
    e67e:	7818      	ldrb	r0, [r3, #0]
    e680:	6861      	ldr	r1, [r4, #4]
    e682:	4418      	add	r0, r3
    e684:	47c8      	blx	r9
		desc->sod = ep;
    e686:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    e688:	2800      	cmp	r0, #0
    e68a:	d046      	beq.n	e71a <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    e68c:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    e68e:	7943      	ldrb	r3, [r0, #5]
    e690:	7902      	ldrb	r2, [r0, #4]
    e692:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    e696:	b292      	uxth	r2, r2
    e698:	78c1      	ldrb	r1, [r0, #3]
    e69a:	4638      	mov	r0, r7
    e69c:	47d0      	blx	sl
    e69e:	4605      	mov	r5, r0
    e6a0:	2800      	cmp	r0, #0
    e6a2:	d13d      	bne.n	e720 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    e6a4:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    e6a8:	bf14      	ite	ne
    e6aa:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    e6ae:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    e6b2:	4638      	mov	r0, r7
    e6b4:	47d8      	blx	fp
    e6b6:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    e6b8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    e6bc:	d1de      	bne.n	e67c <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    e6be:	4b1c      	ldr	r3, [pc, #112]	; (e730 <hid_keyboard_ctrl+0x114>)
    e6c0:	2201      	movs	r2, #1
    e6c2:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    e6c4:	741a      	strb	r2, [r3, #16]
    e6c6:	e7b5      	b.n	e634 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    e6c8:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    e6ca:	b11a      	cbz	r2, e6d4 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    e6cc:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    e6ce:	795b      	ldrb	r3, [r3, #5]
    e6d0:	2b03      	cmp	r3, #3
    e6d2:	d128      	bne.n	e726 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    e6d4:	7b2b      	ldrb	r3, [r5, #12]
    e6d6:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    e6d8:	bf1c      	itt	ne
    e6da:	23ff      	movne	r3, #255	; 0xff
    e6dc:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    e6de:	7b68      	ldrb	r0, [r5, #13]
    e6e0:	28ff      	cmp	r0, #255	; 0xff
    e6e2:	d003      	beq.n	e6ec <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    e6e4:	4b13      	ldr	r3, [pc, #76]	; (e734 <hid_keyboard_ctrl+0x118>)
    e6e6:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    e6e8:	23ff      	movs	r3, #255	; 0xff
    e6ea:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    e6ec:	7ba8      	ldrb	r0, [r5, #14]
    e6ee:	28ff      	cmp	r0, #255	; 0xff
    e6f0:	d003      	beq.n	e6fa <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    e6f2:	4b10      	ldr	r3, [pc, #64]	; (e734 <hid_keyboard_ctrl+0x118>)
    e6f4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    e6f6:	23ff      	movs	r3, #255	; 0xff
    e6f8:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    e6fa:	2500      	movs	r5, #0
    e6fc:	4b0c      	ldr	r3, [pc, #48]	; (e730 <hid_keyboard_ctrl+0x114>)
    e6fe:	741d      	strb	r5, [r3, #16]
    e700:	e798      	b.n	e634 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    e702:	f06f 0509 	mvn.w	r5, #9
    e706:	e795      	b.n	e634 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    e708:	f06f 0509 	mvn.w	r5, #9
    e70c:	e792      	b.n	e634 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    e70e:	f06f 0511 	mvn.w	r5, #17
    e712:	e78f      	b.n	e634 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    e714:	f06f 051b 	mvn.w	r5, #27
    e718:	e78c      	b.n	e634 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    e71a:	f06f 0509 	mvn.w	r5, #9
    e71e:	e789      	b.n	e634 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    e720:	f06f 0513 	mvn.w	r5, #19
    e724:	e786      	b.n	e634 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    e726:	f06f 0509 	mvn.w	r5, #9
    e72a:	e783      	b.n	e634 <hid_keyboard_ctrl+0x18>
    e72c:	0000f3f5 	.word	0x0000f3f5
    e730:	20000de8 	.word	0x20000de8
    e734:	00009cbd 	.word	0x00009cbd
    e738:	0000f42f 	.word	0x0000f42f
    e73c:	00009c55 	.word	0x00009c55
    e740:	00009ce9 	.word	0x00009ce9

0000e744 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    e744:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    e746:	4b0a      	ldr	r3, [pc, #40]	; (e770 <hiddf_keyboard_init+0x2c>)
    e748:	4798      	blx	r3
    e74a:	2801      	cmp	r0, #1
    e74c:	d80c      	bhi.n	e768 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    e74e:	4809      	ldr	r0, [pc, #36]	; (e774 <hiddf_keyboard_init+0x30>)
    e750:	4b09      	ldr	r3, [pc, #36]	; (e778 <hiddf_keyboard_init+0x34>)
    e752:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    e754:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    e756:	3014      	adds	r0, #20
    e758:	4b08      	ldr	r3, [pc, #32]	; (e77c <hiddf_keyboard_init+0x38>)
    e75a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    e75c:	4908      	ldr	r1, [pc, #32]	; (e780 <hiddf_keyboard_init+0x3c>)
    e75e:	2001      	movs	r0, #1
    e760:	4b08      	ldr	r3, [pc, #32]	; (e784 <hiddf_keyboard_init+0x40>)
    e762:	4798      	blx	r3
	return ERR_NONE;
    e764:	2000      	movs	r0, #0
    e766:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    e768:	f06f 0010 	mvn.w	r0, #16
}
    e76c:	bd08      	pop	{r3, pc}
    e76e:	bf00      	nop
    e770:	0000f3e1 	.word	0x0000f3e1
    e774:	20000de8 	.word	0x20000de8
    e778:	0000e61d 	.word	0x0000e61d
    e77c:	0000f381 	.word	0x0000f381
    e780:	200003a0 	.word	0x200003a0
    e784:	0000f305 	.word	0x0000f305

0000e788 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    e788:	b538      	push	{r3, r4, r5, lr}
	return _hiddf_keyboard_funcd.enabled;
    e78a:	4b26      	ldr	r3, [pc, #152]	; (e824 <hiddf_keyboard_keys_state_change+0x9c>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    e78c:	7c1b      	ldrb	r3, [r3, #16]
    e78e:	2b00      	cmp	r3, #0
    e790:	d045      	beq.n	e81e <hiddf_keyboard_keys_state_change+0x96>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    e792:	4a24      	ldr	r2, [pc, #144]	; (e824 <hiddf_keyboard_keys_state_change+0x9c>)
    e794:	2300      	movs	r3, #0
    e796:	6053      	str	r3, [r2, #4]
    e798:	6093      	str	r3, [r2, #8]
	modifier_keys = 0;

	for (i = 0; i < keys_count; i++) {
    e79a:	b329      	cbz	r1, e7e8 <hiddf_keyboard_keys_state_change+0x60>
    e79c:	4603      	mov	r3, r0
    e79e:	1e4d      	subs	r5, r1, #1
    e7a0:	b2ed      	uxtb	r5, r5
    e7a2:	3501      	adds	r5, #1
    e7a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    e7a8:	4405      	add	r5, r0
    e7aa:	2200      	movs	r2, #0
    e7ac:	e002      	b.n	e7b4 <hiddf_keyboard_keys_state_change+0x2c>
    e7ae:	3303      	adds	r3, #3
    e7b0:	42ab      	cmp	r3, r5
    e7b2:	d005      	beq.n	e7c0 <hiddf_keyboard_keys_state_change+0x38>
		if (true == keys_desc[i].b_modifier) {
    e7b4:	785c      	ldrb	r4, [r3, #1]
    e7b6:	2c00      	cmp	r4, #0
    e7b8:	d0f9      	beq.n	e7ae <hiddf_keyboard_keys_state_change+0x26>
			modifier_keys++;
    e7ba:	3201      	adds	r2, #1
    e7bc:	b2d2      	uxtb	r2, r2
    e7be:	e7f6      	b.n	e7ae <hiddf_keyboard_keys_state_change+0x26>
		}
	}

	regular_keys = keys_count - modifier_keys;
    e7c0:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    e7c2:	b2d2      	uxtb	r2, r2
    e7c4:	2a06      	cmp	r2, #6
    e7c6:	d809      	bhi.n	e7dc <hiddf_keyboard_keys_state_change+0x54>
    e7c8:	4603      	mov	r3, r0
    e7ca:	1e4a      	subs	r2, r1, #1
    e7cc:	b2d2      	uxtb	r2, r2
    e7ce:	3201      	adds	r2, #1
    e7d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    e7d4:	4410      	add	r0, r2
    e7d6:	2402      	movs	r4, #2
		for (j = 0; j < keys_count; j++) {
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
				if (true == keys_desc[j].b_modifier) {
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
				} else {
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    e7d8:	4d12      	ldr	r5, [pc, #72]	; (e824 <hiddf_keyboard_keys_state_change+0x9c>)
    e7da:	e015      	b.n	e808 <hiddf_keyboard_keys_state_change+0x80>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    e7dc:	4b11      	ldr	r3, [pc, #68]	; (e824 <hiddf_keyboard_keys_state_change+0x9c>)
    e7de:	f04f 32ff 	mov.w	r2, #4294967295
    e7e2:	f8c3 2006 	str.w	r2, [r3, #6]
    e7e6:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    e7e8:	480e      	ldr	r0, [pc, #56]	; (e824 <hiddf_keyboard_keys_state_change+0x9c>)
    e7ea:	2300      	movs	r3, #0
    e7ec:	2208      	movs	r2, #8
    e7ee:	1d01      	adds	r1, r0, #4
    e7f0:	7b40      	ldrb	r0, [r0, #13]
    e7f2:	4c0d      	ldr	r4, [pc, #52]	; (e828 <hiddf_keyboard_keys_state_change+0xa0>)
    e7f4:	47a0      	blx	r4
    e7f6:	bd38      	pop	{r3, r4, r5, pc}
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    e7f8:	1c62      	adds	r2, r4, #1
    e7fa:	7819      	ldrb	r1, [r3, #0]
    e7fc:	442c      	add	r4, r5
    e7fe:	7121      	strb	r1, [r4, #4]
    e800:	b2d4      	uxtb	r4, r2
    e802:	3303      	adds	r3, #3
		for (j = 0; j < keys_count; j++) {
    e804:	4283      	cmp	r3, r0
    e806:	d0ef      	beq.n	e7e8 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    e808:	789a      	ldrb	r2, [r3, #2]
    e80a:	2a01      	cmp	r2, #1
    e80c:	d1f9      	bne.n	e802 <hiddf_keyboard_keys_state_change+0x7a>
				if (true == keys_desc[j].b_modifier) {
    e80e:	785a      	ldrb	r2, [r3, #1]
    e810:	2a00      	cmp	r2, #0
    e812:	d0f1      	beq.n	e7f8 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    e814:	792a      	ldrb	r2, [r5, #4]
    e816:	7819      	ldrb	r1, [r3, #0]
    e818:	430a      	orrs	r2, r1
    e81a:	712a      	strb	r2, [r5, #4]
    e81c:	e7f1      	b.n	e802 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
    e81e:	f06f 0010 	mvn.w	r0, #16
}
    e822:	bd38      	pop	{r3, r4, r5, pc}
    e824:	20000de8 	.word	0x20000de8
    e828:	0000eec9 	.word	0x0000eec9

0000e82c <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    e82c:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    e82e:	780b      	ldrb	r3, [r1, #0]
    e830:	2b81      	cmp	r3, #129	; 0x81
    e832:	d010      	beq.n	e856 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    e834:	f3c3 1341 	ubfx	r3, r3, #5, #2
    e838:	2b01      	cmp	r3, #1
    e83a:	d13f      	bne.n	e8bc <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    e83c:	888a      	ldrh	r2, [r1, #4]
    e83e:	4b22      	ldr	r3, [pc, #136]	; (e8c8 <hid_mouse_req+0x9c>)
    e840:	7a1b      	ldrb	r3, [r3, #8]
    e842:	429a      	cmp	r2, r3
    e844:	d13d      	bne.n	e8c2 <hid_mouse_req+0x96>
			switch (req->bRequest) {
    e846:	784b      	ldrb	r3, [r1, #1]
    e848:	2b03      	cmp	r3, #3
    e84a:	d028      	beq.n	e89e <hid_mouse_req+0x72>
    e84c:	2b0b      	cmp	r3, #11
    e84e:	d02c      	beq.n	e8aa <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    e850:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    e854:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    e856:	784b      	ldrb	r3, [r1, #1]
    e858:	2b06      	cmp	r3, #6
    e85a:	d002      	beq.n	e862 <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    e85c:	f06f 0009 	mvn.w	r0, #9
    e860:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    e862:	888a      	ldrh	r2, [r1, #4]
    e864:	4b18      	ldr	r3, [pc, #96]	; (e8c8 <hid_mouse_req+0x9c>)
    e866:	7a1b      	ldrb	r3, [r3, #8]
    e868:	429a      	cmp	r2, r3
    e86a:	d002      	beq.n	e872 <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    e86c:	f06f 0009 	mvn.w	r0, #9
    e870:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    e872:	884b      	ldrh	r3, [r1, #2]
    e874:	0a1b      	lsrs	r3, r3, #8
    e876:	2b21      	cmp	r3, #33	; 0x21
    e878:	d004      	beq.n	e884 <hid_mouse_req+0x58>
    e87a:	2b22      	cmp	r3, #34	; 0x22
    e87c:	d009      	beq.n	e892 <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    e87e:	f06f 000c 	mvn.w	r0, #12
    e882:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    e884:	4b10      	ldr	r3, [pc, #64]	; (e8c8 <hid_mouse_req+0x9c>)
    e886:	6819      	ldr	r1, [r3, #0]
    e888:	2300      	movs	r3, #0
    e88a:	780a      	ldrb	r2, [r1, #0]
    e88c:	4c0f      	ldr	r4, [pc, #60]	; (e8cc <hid_mouse_req+0xa0>)
    e88e:	47a0      	blx	r4
    e890:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    e892:	2300      	movs	r3, #0
    e894:	2234      	movs	r2, #52	; 0x34
    e896:	490e      	ldr	r1, [pc, #56]	; (e8d0 <hid_mouse_req+0xa4>)
    e898:	4c0c      	ldr	r4, [pc, #48]	; (e8cc <hid_mouse_req+0xa0>)
    e89a:	47a0      	blx	r4
    e89c:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    e89e:	2300      	movs	r3, #0
    e8a0:	2201      	movs	r2, #1
    e8a2:	490c      	ldr	r1, [pc, #48]	; (e8d4 <hid_mouse_req+0xa8>)
    e8a4:	4c09      	ldr	r4, [pc, #36]	; (e8cc <hid_mouse_req+0xa0>)
    e8a6:	47a0      	blx	r4
    e8a8:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    e8aa:	884a      	ldrh	r2, [r1, #2]
    e8ac:	4b06      	ldr	r3, [pc, #24]	; (e8c8 <hid_mouse_req+0x9c>)
    e8ae:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    e8b0:	2300      	movs	r3, #0
    e8b2:	461a      	mov	r2, r3
    e8b4:	4619      	mov	r1, r3
    e8b6:	4c05      	ldr	r4, [pc, #20]	; (e8cc <hid_mouse_req+0xa0>)
    e8b8:	47a0      	blx	r4
    e8ba:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    e8bc:	f06f 0009 	mvn.w	r0, #9
    e8c0:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    e8c2:	f06f 0009 	mvn.w	r0, #9
    e8c6:	bd10      	pop	{r4, pc}
    e8c8:	20000e08 	.word	0x20000e08
    e8cc:	0000eec9 	.word	0x0000eec9
    e8d0:	00011d60 	.word	0x00011d60
    e8d4:	20000e12 	.word	0x20000e12

0000e8d8 <hid_mouse_ctrl>:
{
    e8d8:	b570      	push	{r4, r5, r6, lr}
    e8da:	4614      	mov	r4, r2
	switch (ctrl) {
    e8dc:	2901      	cmp	r1, #1
    e8de:	d040      	beq.n	e962 <hid_mouse_ctrl+0x8a>
    e8e0:	b139      	cbz	r1, e8f2 <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    e8e2:	2902      	cmp	r1, #2
    e8e4:	bf0c      	ite	eq
    e8e6:	f06f 041a 	mvneq.w	r4, #26
    e8ea:	f06f 040c 	mvnne.w	r4, #12
}
    e8ee:	4620      	mov	r0, r4
    e8f0:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    e8f2:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    e8f4:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    e8f6:	2b00      	cmp	r3, #0
    e8f8:	d049      	beq.n	e98e <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    e8fa:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    e8fc:	795b      	ldrb	r3, [r3, #5]
    e8fe:	2b03      	cmp	r3, #3
    e900:	d148      	bne.n	e994 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    e902:	7a2b      	ldrb	r3, [r5, #8]
    e904:	429a      	cmp	r2, r3
    e906:	d048      	beq.n	e99a <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    e908:	2bff      	cmp	r3, #255	; 0xff
    e90a:	d149      	bne.n	e9a0 <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    e90c:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    e90e:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    e910:	7818      	ldrb	r0, [r3, #0]
    e912:	2221      	movs	r2, #33	; 0x21
    e914:	6861      	ldr	r1, [r4, #4]
    e916:	4418      	add	r0, r3
    e918:	4b29      	ldr	r3, [pc, #164]	; (e9c0 <hid_mouse_ctrl+0xe8>)
    e91a:	4798      	blx	r3
    e91c:	4b29      	ldr	r3, [pc, #164]	; (e9c4 <hid_mouse_ctrl+0xec>)
    e91e:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    e920:	6823      	ldr	r3, [r4, #0]
    e922:	7818      	ldrb	r0, [r3, #0]
    e924:	6861      	ldr	r1, [r4, #4]
    e926:	4418      	add	r0, r3
    e928:	4b27      	ldr	r3, [pc, #156]	; (e9c8 <hid_mouse_ctrl+0xf0>)
    e92a:	4798      	blx	r3
	desc->sod = ep;
    e92c:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    e92e:	2800      	cmp	r0, #0
    e930:	d039      	beq.n	e9a6 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    e932:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    e934:	7943      	ldrb	r3, [r0, #5]
    e936:	7902      	ldrb	r2, [r0, #4]
    e938:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    e93c:	b292      	uxth	r2, r2
    e93e:	78c1      	ldrb	r1, [r0, #3]
    e940:	4630      	mov	r0, r6
    e942:	4b22      	ldr	r3, [pc, #136]	; (e9cc <hid_mouse_ctrl+0xf4>)
    e944:	4798      	blx	r3
    e946:	4604      	mov	r4, r0
    e948:	bb80      	cbnz	r0, e9ac <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    e94a:	f016 0f80 	tst.w	r6, #128	; 0x80
    e94e:	d030      	beq.n	e9b2 <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    e950:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    e952:	4630      	mov	r0, r6
    e954:	4b1e      	ldr	r3, [pc, #120]	; (e9d0 <hid_mouse_ctrl+0xf8>)
    e956:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    e958:	4b1a      	ldr	r3, [pc, #104]	; (e9c4 <hid_mouse_ctrl+0xec>)
    e95a:	2201      	movs	r2, #1
    e95c:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    e95e:	72da      	strb	r2, [r3, #11]
    e960:	e7c5      	b.n	e8ee <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    e962:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    e964:	b11a      	cbz	r2, e96e <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    e966:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    e968:	795b      	ldrb	r3, [r3, #5]
    e96a:	2b03      	cmp	r3, #3
    e96c:	d124      	bne.n	e9b8 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    e96e:	7a2b      	ldrb	r3, [r5, #8]
    e970:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    e972:	bf1c      	itt	ne
    e974:	23ff      	movne	r3, #255	; 0xff
    e976:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    e978:	7a68      	ldrb	r0, [r5, #9]
    e97a:	28ff      	cmp	r0, #255	; 0xff
    e97c:	d003      	beq.n	e986 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    e97e:	4b15      	ldr	r3, [pc, #84]	; (e9d4 <hid_mouse_ctrl+0xfc>)
    e980:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    e982:	23ff      	movs	r3, #255	; 0xff
    e984:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    e986:	2400      	movs	r4, #0
    e988:	4b0e      	ldr	r3, [pc, #56]	; (e9c4 <hid_mouse_ctrl+0xec>)
    e98a:	72dc      	strb	r4, [r3, #11]
    e98c:	e7af      	b.n	e8ee <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    e98e:	f06f 0409 	mvn.w	r4, #9
    e992:	e7ac      	b.n	e8ee <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    e994:	f06f 0409 	mvn.w	r4, #9
    e998:	e7a9      	b.n	e8ee <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    e99a:	f06f 0411 	mvn.w	r4, #17
    e99e:	e7a6      	b.n	e8ee <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    e9a0:	f06f 041b 	mvn.w	r4, #27
    e9a4:	e7a3      	b.n	e8ee <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    e9a6:	f06f 0409 	mvn.w	r4, #9
    e9aa:	e7a0      	b.n	e8ee <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    e9ac:	f06f 0413 	mvn.w	r4, #19
    e9b0:	e79d      	b.n	e8ee <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    e9b2:	f04f 34ff 	mov.w	r4, #4294967295
    e9b6:	e79a      	b.n	e8ee <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    e9b8:	f06f 0409 	mvn.w	r4, #9
    e9bc:	e797      	b.n	e8ee <hid_mouse_ctrl+0x16>
    e9be:	bf00      	nop
    e9c0:	0000f3f5 	.word	0x0000f3f5
    e9c4:	20000e08 	.word	0x20000e08
    e9c8:	0000f42f 	.word	0x0000f42f
    e9cc:	00009c55 	.word	0x00009c55
    e9d0:	00009ce9 	.word	0x00009ce9
    e9d4:	00009cbd 	.word	0x00009cbd

0000e9d8 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    e9d8:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    e9da:	4b0a      	ldr	r3, [pc, #40]	; (ea04 <hiddf_mouse_init+0x2c>)
    e9dc:	4798      	blx	r3
    e9de:	2801      	cmp	r0, #1
    e9e0:	d80c      	bhi.n	e9fc <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    e9e2:	4809      	ldr	r0, [pc, #36]	; (ea08 <hiddf_mouse_init+0x30>)
    e9e4:	4b09      	ldr	r3, [pc, #36]	; (ea0c <hiddf_mouse_init+0x34>)
    e9e6:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    e9e8:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    e9ea:	300c      	adds	r0, #12
    e9ec:	4b08      	ldr	r3, [pc, #32]	; (ea10 <hiddf_mouse_init+0x38>)
    e9ee:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    e9f0:	4908      	ldr	r1, [pc, #32]	; (ea14 <hiddf_mouse_init+0x3c>)
    e9f2:	2001      	movs	r0, #1
    e9f4:	4b08      	ldr	r3, [pc, #32]	; (ea18 <hiddf_mouse_init+0x40>)
    e9f6:	4798      	blx	r3
	return ERR_NONE;
    e9f8:	2000      	movs	r0, #0
    e9fa:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    e9fc:	f06f 0010 	mvn.w	r0, #16
}
    ea00:	bd08      	pop	{r3, pc}
    ea02:	bf00      	nop
    ea04:	0000f3e1 	.word	0x0000f3e1
    ea08:	20000e08 	.word	0x20000e08
    ea0c:	0000e8d9 	.word	0x0000e8d9
    ea10:	0000f381 	.word	0x0000f381
    ea14:	200003a8 	.word	0x200003a8
    ea18:	0000f305 	.word	0x0000f305

0000ea1c <hiddf_mouse_move>:
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    ea1c:	2200      	movs	r2, #0
    ea1e:	4b0d      	ldr	r3, [pc, #52]	; (ea54 <hiddf_mouse_move+0x38>)
    ea20:	605a      	str	r2, [r3, #4]

	if (type == HID_MOUSE_X_AXIS_MV) {
    ea22:	2901      	cmp	r1, #1
    ea24:	d00e      	beq.n	ea44 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    ea26:	2902      	cmp	r1, #2
    ea28:	d00e      	beq.n	ea48 <hiddf_mouse_move+0x2c>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
	} else if (type == HID_MOUSE_SCROLL_MV) {
    ea2a:	2903      	cmp	r1, #3
    ea2c:	d10f      	bne.n	ea4e <hiddf_mouse_move+0x32>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    ea2e:	4b09      	ldr	r3, [pc, #36]	; (ea54 <hiddf_mouse_move+0x38>)
    ea30:	71d8      	strb	r0, [r3, #7]
{
    ea32:	b510      	push	{r4, lr}
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    ea34:	4807      	ldr	r0, [pc, #28]	; (ea54 <hiddf_mouse_move+0x38>)
    ea36:	2300      	movs	r3, #0
    ea38:	2204      	movs	r2, #4
    ea3a:	1881      	adds	r1, r0, r2
    ea3c:	7a40      	ldrb	r0, [r0, #9]
    ea3e:	4c06      	ldr	r4, [pc, #24]	; (ea58 <hiddf_mouse_move+0x3c>)
    ea40:	47a0      	blx	r4
    ea42:	bd10      	pop	{r4, pc}
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    ea44:	7158      	strb	r0, [r3, #5]
    ea46:	e7f4      	b.n	ea32 <hiddf_mouse_move+0x16>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    ea48:	4b02      	ldr	r3, [pc, #8]	; (ea54 <hiddf_mouse_move+0x38>)
    ea4a:	7198      	strb	r0, [r3, #6]
    ea4c:	e7f1      	b.n	ea32 <hiddf_mouse_move+0x16>
		return ERR_INVALID_ARG;
    ea4e:	f06f 000c 	mvn.w	r0, #12
    ea52:	4770      	bx	lr
    ea54:	20000e08 	.word	0x20000e08
    ea58:	0000eec9 	.word	0x0000eec9

0000ea5c <midi_cb_ep_bulk_in>:
// 	while(1){
// 		
// 		
// 	}

}
    ea5c:	4770      	bx	lr

0000ea5e <midi_cb_ep_bulk_out>:
 * \param[in] rc transfer return status
 * \param[in] count the amount of bytes has been transferred
 * \return Operation status.
 */
static bool midi_cb_ep_bulk_out(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    ea5e:	e7fe      	b.n	ea5e <midi_cb_ep_bulk_out>

0000ea60 <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ea60:	b510      	push	{r4, lr}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    ea62:	780b      	ldrb	r3, [r1, #0]
    ea64:	2b81      	cmp	r3, #129	; 0x81
    ea66:	d014      	beq.n	ea92 <audio_midi_req+0x32>
		
		
	} else {
		
	
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    ea68:	f3c3 1341 	ubfx	r3, r3, #5, #2
    ea6c:	2b01      	cmp	r3, #1
    ea6e:	d132      	bne.n	ead6 <audio_midi_req+0x76>
			return ERR_NOT_FOUND; // Never hit breakpoint here
		}
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    ea70:	888b      	ldrh	r3, [r1, #4]
    ea72:	4a1c      	ldr	r2, [pc, #112]	; (eae4 <audio_midi_req+0x84>)
    ea74:	7912      	ldrb	r2, [r2, #4]
    ea76:	429a      	cmp	r2, r3
    ea78:	d003      	beq.n	ea82 <audio_midi_req+0x22>
    ea7a:	4a1a      	ldr	r2, [pc, #104]	; (eae4 <audio_midi_req+0x84>)
    ea7c:	7952      	ldrb	r2, [r2, #5]
    ea7e:	429a      	cmp	r2, r3
    ea80:	d12c      	bne.n	eadc <audio_midi_req+0x7c>
			
			// Copied from Hid
			// Never hit breakpoint here							
			switch (req->bRequest) {
    ea82:	784b      	ldrb	r3, [r1, #1]
    ea84:	2b03      	cmp	r3, #3
    ea86:	d017      	beq.n	eab8 <audio_midi_req+0x58>
    ea88:	2b0b      	cmp	r3, #11
    ea8a:	d01b      	beq.n	eac4 <audio_midi_req+0x64>
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
				default:
				return ERR_INVALID_ARG;
    ea8c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    ea90:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    ea92:	888b      	ldrh	r3, [r1, #4]
    ea94:	4a13      	ldr	r2, [pc, #76]	; (eae4 <audio_midi_req+0x84>)
    ea96:	7912      	ldrb	r2, [r2, #4]
    ea98:	429a      	cmp	r2, r3
    ea9a:	d006      	beq.n	eaaa <audio_midi_req+0x4a>
    ea9c:	4a11      	ldr	r2, [pc, #68]	; (eae4 <audio_midi_req+0x84>)
    ea9e:	7952      	ldrb	r2, [r2, #5]
    eaa0:	429a      	cmp	r2, r3
    eaa2:	d002      	beq.n	eaaa <audio_midi_req+0x4a>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    eaa4:	f06f 0009 	mvn.w	r0, #9
    eaa8:	bd10      	pop	{r4, pc}
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    eaaa:	4b0e      	ldr	r3, [pc, #56]	; (eae4 <audio_midi_req+0x84>)
    eaac:	6819      	ldr	r1, [r3, #0]
    eaae:	2300      	movs	r3, #0
    eab0:	780a      	ldrb	r2, [r1, #0]
    eab2:	4c0d      	ldr	r4, [pc, #52]	; (eae8 <audio_midi_req+0x88>)
    eab4:	47a0      	blx	r4
		return audio_midi_get_desc(ep, req); // Never hit breakpoint here
    eab6:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    eab8:	2300      	movs	r3, #0
    eaba:	2201      	movs	r2, #1
    eabc:	490b      	ldr	r1, [pc, #44]	; (eaec <audio_midi_req+0x8c>)
    eabe:	4c0a      	ldr	r4, [pc, #40]	; (eae8 <audio_midi_req+0x88>)
    eac0:	47a0      	blx	r4
    eac2:	bd10      	pop	{r4, pc}
				_audiodf_midi_funcd.protocol = req->wValue;
    eac4:	884a      	ldrh	r2, [r1, #2]
    eac6:	4b07      	ldr	r3, [pc, #28]	; (eae4 <audio_midi_req+0x84>)
    eac8:	721a      	strb	r2, [r3, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    eaca:	2300      	movs	r3, #0
    eacc:	461a      	mov	r2, r3
    eace:	4619      	mov	r1, r3
    ead0:	4c05      	ldr	r4, [pc, #20]	; (eae8 <audio_midi_req+0x88>)
    ead2:	47a0      	blx	r4
    ead4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND; // Never hit breakpoint here
    ead6:	f06f 0009 	mvn.w	r0, #9
    eada:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    eadc:	f06f 0009 	mvn.w	r0, #9
    eae0:	bd10      	pop	{r4, pc}
    eae2:	bf00      	nop
    eae4:	20000e20 	.word	0x20000e20
    eae8:	0000eec9 	.word	0x0000eec9
    eaec:	20000e28 	.word	0x20000e28

0000eaf0 <audio_midi_ctrl>:
{
    eaf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eaf4:	b083      	sub	sp, #12
    eaf6:	4615      	mov	r5, r2
	switch (ctrl) {
    eaf8:	2901      	cmp	r1, #1
    eafa:	f000 8092 	beq.w	ec22 <audio_midi_ctrl+0x132>
    eafe:	b141      	cbz	r1, eb12 <audio_midi_ctrl+0x22>
		return ERR_INVALID_ARG;
    eb00:	2902      	cmp	r1, #2
    eb02:	bf0c      	ite	eq
    eb04:	f06f 001a 	mvneq.w	r0, #26
    eb08:	f06f 000c 	mvnne.w	r0, #12
}
    eb0c:	b003      	add	sp, #12
    eb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    eb12:	f8d0 9008 	ldr.w	r9, [r0, #8]
	ifc = desc->sod;
    eb16:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    eb18:	2800      	cmp	r0, #0
    eb1a:	f000 80a9 	beq.w	ec70 <audio_midi_ctrl+0x180>
    eb1e:	f109 0604 	add.w	r6, r9, #4
    eb22:	2402      	movs	r4, #2
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    eb24:	f04f 0804 	mov.w	r8, #4
    eb28:	4f5d      	ldr	r7, [pc, #372]	; (eca0 <audio_midi_ctrl+0x1b0>)
    eb2a:	e019      	b.n	eb60 <audio_midi_ctrl+0x70>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    eb2c:	f816 3b01 	ldrb.w	r3, [r6], #1
    eb30:	429a      	cmp	r2, r3
    eb32:	f000 80a3 	beq.w	ec7c <audio_midi_ctrl+0x18c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    eb36:	2bff      	cmp	r3, #255	; 0xff
    eb38:	f040 80a3 	bne.w	ec82 <audio_midi_ctrl+0x192>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    eb3c:	f806 2c01 	strb.w	r2, [r6, #-1]
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    eb40:	2c01      	cmp	r4, #1
    eb42:	d016      	beq.n	eb72 <audio_midi_ctrl+0x82>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    eb44:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    eb46:	7818      	ldrb	r0, [r3, #0]
    eb48:	4642      	mov	r2, r8
    eb4a:	6869      	ldr	r1, [r5, #4]
    eb4c:	4418      	add	r0, r3
    eb4e:	47b8      	blx	r7
    eb50:	3c01      	subs	r4, #1
	for (i=0; i<2; i++){
    eb52:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    eb56:	f000 809e 	beq.w	ec96 <audio_midi_ctrl+0x1a6>
		if (NULL == ifc) {
    eb5a:	2800      	cmp	r0, #0
    eb5c:	f000 808b 	beq.w	ec76 <audio_midi_ctrl+0x186>
		ifc_desc.bInterfaceNumber = ifc[2];
    eb60:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    eb62:	7943      	ldrb	r3, [r0, #5]
    eb64:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    eb68:	2b01      	cmp	r3, #1
    eb6a:	d0df      	beq.n	eb2c <audio_midi_ctrl+0x3c>
			return ERR_NOT_FOUND;
    eb6c:	f06f 0009 	mvn.w	r0, #9
    eb70:	e7cc      	b.n	eb0c <audio_midi_ctrl+0x1c>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    eb72:	2205      	movs	r2, #5
    eb74:	6869      	ldr	r1, [r5, #4]
    eb76:	4b4a      	ldr	r3, [pc, #296]	; (eca0 <audio_midi_ctrl+0x1b0>)
    eb78:	4798      	blx	r3
    eb7a:	4604      	mov	r4, r0
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    eb7c:	4e49      	ldr	r6, [pc, #292]	; (eca4 <audio_midi_ctrl+0x1b4>)
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    eb7e:	f8df 8144 	ldr.w	r8, [pc, #324]	; ecc4 <audio_midi_ctrl+0x1d4>
					usb_d_ep_enable(func_data->func_ep_out);
    eb82:	4f49      	ldr	r7, [pc, #292]	; (eca8 <audio_midi_ctrl+0x1b8>)
    eb84:	e01a      	b.n	ebbc <audio_midi_ctrl+0xcc>
					usb_debug2[6] = - usb_debug2[5];
    eb86:	4a47      	ldr	r2, [pc, #284]	; (eca4 <audio_midi_ctrl+0x1b4>)
    eb88:	7953      	ldrb	r3, [r2, #5]
    eb8a:	425b      	negs	r3, r3
    eb8c:	b2db      	uxtb	r3, r3
    eb8e:	7193      	strb	r3, [r2, #6]
					return ERR_NOT_INITIALIZED;
    eb90:	f06f 0013 	mvn.w	r0, #19
    eb94:	e7ba      	b.n	eb0c <audio_midi_ctrl+0x1c>
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    eb96:	f89d 0002 	ldrb.w	r0, [sp, #2]
    eb9a:	b2c0      	uxtb	r0, r0
    eb9c:	f889 0006 	strb.w	r0, [r9, #6]
					usb_d_ep_enable(func_data->func_ep_in);
    eba0:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_in);
    eba2:	4a42      	ldr	r2, [pc, #264]	; (ecac <audio_midi_ctrl+0x1bc>)
    eba4:	2102      	movs	r1, #2
    eba6:	f899 0006 	ldrb.w	r0, [r9, #6]
    ebaa:	4b41      	ldr	r3, [pc, #260]	; (ecb0 <audio_midi_ctrl+0x1c0>)
    ebac:	4798      	blx	r3
				desc->sod = ep;
    ebae:	602c      	str	r4, [r5, #0]
    ebb0:	7820      	ldrb	r0, [r4, #0]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ebb2:	6869      	ldr	r1, [r5, #4]
    ebb4:	4420      	add	r0, r4
    ebb6:	4b3f      	ldr	r3, [pc, #252]	; (ecb4 <audio_midi_ctrl+0x1c4>)
    ebb8:	4798      	blx	r3
    ebba:	4604      	mov	r4, r0
			while (NULL != ep) {
    ebbc:	2c00      	cmp	r4, #0
    ebbe:	d063      	beq.n	ec88 <audio_midi_ctrl+0x198>
				ep_desc.bEndpointAddress = ep[2];
    ebc0:	78a3      	ldrb	r3, [r4, #2]
    ebc2:	f88d 3002 	strb.w	r3, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    ebc6:	78e3      	ldrb	r3, [r4, #3]
    ebc8:	f88d 3003 	strb.w	r3, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    ebcc:	7962      	ldrb	r2, [r4, #5]
    ebce:	7923      	ldrb	r3, [r4, #4]
    ebd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    ebd4:	b29b      	uxth	r3, r3
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    ebd6:	f8ad 3004 	strh.w	r3, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    ebda:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ebde:	b2db      	uxtb	r3, r3
    ebe0:	7133      	strb	r3, [r6, #4]
				usb_debug2[0] = i;
    ebe2:	2301      	movs	r3, #1
    ebe4:	7033      	strb	r3, [r6, #0]
				if (usb_debug2[5] = usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ebe6:	f89d 0002 	ldrb.w	r0, [sp, #2]
    ebea:	f89d 1003 	ldrb.w	r1, [sp, #3]
    ebee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ebf2:	b292      	uxth	r2, r2
    ebf4:	47c0      	blx	r8
    ebf6:	b2c0      	uxtb	r0, r0
    ebf8:	7170      	strb	r0, [r6, #5]
    ebfa:	2800      	cmp	r0, #0
    ebfc:	d1c3      	bne.n	eb86 <audio_midi_ctrl+0x96>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ebfe:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ec02:	f013 0f80 	tst.w	r3, #128	; 0x80
    ec06:	d1c6      	bne.n	eb96 <audio_midi_ctrl+0xa6>
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    ec08:	f89d 0002 	ldrb.w	r0, [sp, #2]
    ec0c:	b2c0      	uxtb	r0, r0
    ec0e:	f889 0007 	strb.w	r0, [r9, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    ec12:	47b8      	blx	r7
					usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)midi_cb_ep_bulk_out);
    ec14:	4a28      	ldr	r2, [pc, #160]	; (ecb8 <audio_midi_ctrl+0x1c8>)
    ec16:	2102      	movs	r1, #2
    ec18:	f899 0007 	ldrb.w	r0, [r9, #7]
    ec1c:	4b24      	ldr	r3, [pc, #144]	; (ecb0 <audio_midi_ctrl+0x1c0>)
    ec1e:	4798      	blx	r3
    ec20:	e7c5      	b.n	ebae <audio_midi_ctrl+0xbe>
	struct audiodf_midi_func_data *func_data = (struct audiodf_midi_func_data *)(drv->func_data);
    ec22:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    ec24:	b142      	cbz	r2, ec38 <audio_midi_ctrl+0x148>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ec26:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    ec28:	795b      	ldrb	r3, [r3, #5]
    ec2a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ec2e:	2b01      	cmp	r3, #1
    ec30:	d002      	beq.n	ec38 <audio_midi_ctrl+0x148>
			return ERR_NOT_FOUND;
    ec32:	f06f 0009 	mvn.w	r0, #9
    ec36:	e769      	b.n	eb0c <audio_midi_ctrl+0x1c>
	if (func_data->func_iface[0] != 0xFF) {
    ec38:	7923      	ldrb	r3, [r4, #4]
    ec3a:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    ec3c:	bf1c      	itt	ne
    ec3e:	23ff      	movne	r3, #255	; 0xff
    ec40:	7123      	strbne	r3, [r4, #4]
	if (func_data->func_iface[1] != 0xFF) {
    ec42:	7963      	ldrb	r3, [r4, #5]
    ec44:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    ec46:	bf1c      	itt	ne
    ec48:	23ff      	movne	r3, #255	; 0xff
    ec4a:	7163      	strbne	r3, [r4, #5]
	if (func_data->func_ep_in != 0xFF) {
    ec4c:	79a0      	ldrb	r0, [r4, #6]
    ec4e:	28ff      	cmp	r0, #255	; 0xff
    ec50:	d003      	beq.n	ec5a <audio_midi_ctrl+0x16a>
		usb_d_ep_deinit(func_data->func_ep_in);
    ec52:	4b1a      	ldr	r3, [pc, #104]	; (ecbc <audio_midi_ctrl+0x1cc>)
    ec54:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ec56:	23ff      	movs	r3, #255	; 0xff
    ec58:	71a3      	strb	r3, [r4, #6]
	if (func_data->func_ep_out != 0xFF) {
    ec5a:	79e0      	ldrb	r0, [r4, #7]
    ec5c:	28ff      	cmp	r0, #255	; 0xff
    ec5e:	d003      	beq.n	ec68 <audio_midi_ctrl+0x178>
		usb_d_ep_deinit(func_data->func_ep_out);
    ec60:	4b16      	ldr	r3, [pc, #88]	; (ecbc <audio_midi_ctrl+0x1cc>)
    ec62:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ec64:	23ff      	movs	r3, #255	; 0xff
    ec66:	71e3      	strb	r3, [r4, #7]
	_audiodf_midi_funcd.enabled = false;
    ec68:	2000      	movs	r0, #0
    ec6a:	4b15      	ldr	r3, [pc, #84]	; (ecc0 <audio_midi_ctrl+0x1d0>)
    ec6c:	7358      	strb	r0, [r3, #13]
    ec6e:	e74d      	b.n	eb0c <audio_midi_ctrl+0x1c>
			return ERR_NOT_FOUND;
    ec70:	f06f 0009 	mvn.w	r0, #9
    ec74:	e74a      	b.n	eb0c <audio_midi_ctrl+0x1c>
    ec76:	f06f 0009 	mvn.w	r0, #9
    ec7a:	e747      	b.n	eb0c <audio_midi_ctrl+0x1c>
				return ERR_ALREADY_INITIALIZED;
    ec7c:	f06f 0011 	mvn.w	r0, #17
    ec80:	e744      	b.n	eb0c <audio_midi_ctrl+0x1c>
				return ERR_NO_RESOURCE;
    ec82:	f06f 001b 	mvn.w	r0, #27
    ec86:	e741      	b.n	eb0c <audio_midi_ctrl+0x1c>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    ec88:	682b      	ldr	r3, [r5, #0]
	return (desc + usb_desc_len(desc));
    ec8a:	7818      	ldrb	r0, [r3, #0]
    ec8c:	2204      	movs	r2, #4
    ec8e:	6869      	ldr	r1, [r5, #4]
    ec90:	4418      	add	r0, r3
    ec92:	4b03      	ldr	r3, [pc, #12]	; (eca0 <audio_midi_ctrl+0x1b0>)
    ec94:	4798      	blx	r3
	_audiodf_midi_funcd.enabled = true;
    ec96:	2201      	movs	r2, #1
    ec98:	4b09      	ldr	r3, [pc, #36]	; (ecc0 <audio_midi_ctrl+0x1d0>)
    ec9a:	735a      	strb	r2, [r3, #13]
	return ERR_NONE;
    ec9c:	2000      	movs	r0, #0
    ec9e:	e735      	b.n	eb0c <audio_midi_ctrl+0x1c>
    eca0:	0000f3f5 	.word	0x0000f3f5
    eca4:	20007d44 	.word	0x20007d44
    eca8:	00009ce9 	.word	0x00009ce9
    ecac:	0000ea5d 	.word	0x0000ea5d
    ecb0:	00009ebd 	.word	0x00009ebd
    ecb4:	0000f42f 	.word	0x0000f42f
    ecb8:	0000ea5f 	.word	0x0000ea5f
    ecbc:	00009cbd 	.word	0x00009cbd
    ecc0:	20000e20 	.word	0x20000e20
    ecc4:	00009c55 	.word	0x00009c55

0000ecc8 <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    ecc8:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    ecca:	4b0a      	ldr	r3, [pc, #40]	; (ecf4 <audiodf_midi_init+0x2c>)
    eccc:	4798      	blx	r3
    ecce:	2801      	cmp	r0, #1
    ecd0:	d80c      	bhi.n	ecec <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    ecd2:	4809      	ldr	r0, [pc, #36]	; (ecf8 <audiodf_midi_init+0x30>)
    ecd4:	4b09      	ldr	r3, [pc, #36]	; (ecfc <audiodf_midi_init+0x34>)
    ecd6:	6143      	str	r3, [r0, #20]
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    ecd8:	6180      	str	r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    ecda:	3010      	adds	r0, #16
    ecdc:	4b08      	ldr	r3, [pc, #32]	; (ed00 <audiodf_midi_init+0x38>)
    ecde:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    ece0:	4908      	ldr	r1, [pc, #32]	; (ed04 <audiodf_midi_init+0x3c>)
    ece2:	2001      	movs	r0, #1
    ece4:	4b08      	ldr	r3, [pc, #32]	; (ed08 <audiodf_midi_init+0x40>)
    ece6:	4798      	blx	r3
	return ERR_NONE;
    ece8:	2000      	movs	r0, #0
    ecea:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    ecec:	f06f 0010 	mvn.w	r0, #16
}
    ecf0:	bd08      	pop	{r3, pc}
    ecf2:	bf00      	nop
    ecf4:	0000f3e1 	.word	0x0000f3e1
    ecf8:	20000e20 	.word	0x20000e20
    ecfc:	0000eaf1 	.word	0x0000eaf1
    ed00:	0000f381 	.word	0x0000f381
    ed04:	200003b0 	.word	0x200003b0
    ed08:	0000f305 	.word	0x0000f305

0000ed0c <audiodf_midi_xfer_packet>:
}



int32_t audiodf_midi_xfer_packet(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    ed0c:	b510      	push	{r4, lr}
	
	// if previous xfer is completed
	_audiodf_midi_funcd.midi_report[0] = byte0;
    ed0e:	4c06      	ldr	r4, [pc, #24]	; (ed28 <audiodf_midi_xfer_packet+0x1c>)
    ed10:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    ed12:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    ed14:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    ed16:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    ed18:	2300      	movs	r3, #0
    ed1a:	2204      	movs	r2, #4
    ed1c:	f104 0109 	add.w	r1, r4, #9
    ed20:	79a0      	ldrb	r0, [r4, #6]
    ed22:	4c02      	ldr	r4, [pc, #8]	; (ed2c <audiodf_midi_xfer_packet+0x20>)
    ed24:	47a0      	blx	r4
	
	
}
    ed26:	bd10      	pop	{r4, pc}
    ed28:	20000e20 	.word	0x20000e20
    ed2c:	0000eec9 	.word	0x0000eec9

0000ed30 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    ed30:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    ed32:	4b07      	ldr	r3, [pc, #28]	; (ed50 <usbdc_unconfig+0x20>)
    ed34:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    ed36:	b14c      	cbz	r4, ed4c <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    ed38:	2600      	movs	r6, #0
    ed3a:	2501      	movs	r5, #1
    ed3c:	6863      	ldr	r3, [r4, #4]
    ed3e:	4632      	mov	r2, r6
    ed40:	4629      	mov	r1, r5
    ed42:	4620      	mov	r0, r4
    ed44:	4798      	blx	r3
		func = func->next;
    ed46:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    ed48:	2c00      	cmp	r4, #0
    ed4a:	d1f7      	bne.n	ed3c <usbdc_unconfig+0xc>
    ed4c:	bd70      	pop	{r4, r5, r6, pc}
    ed4e:	bf00      	nop
    ed50:	20000e3c 	.word	0x20000e3c

0000ed54 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    ed54:	b570      	push	{r4, r5, r6, lr}
    ed56:	4606      	mov	r6, r0
    ed58:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    ed5a:	4b07      	ldr	r3, [pc, #28]	; (ed78 <usbdc_change_notify+0x24>)
    ed5c:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    ed5e:	b91c      	cbnz	r4, ed68 <usbdc_change_notify+0x14>
    ed60:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    ed62:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    ed64:	2c00      	cmp	r4, #0
    ed66:	d0fb      	beq.n	ed60 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    ed68:	6863      	ldr	r3, [r4, #4]
    ed6a:	2b00      	cmp	r3, #0
    ed6c:	d0f9      	beq.n	ed62 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    ed6e:	4629      	mov	r1, r5
    ed70:	4630      	mov	r0, r6
    ed72:	4798      	blx	r3
    ed74:	e7f5      	b.n	ed62 <usbdc_change_notify+0xe>
    ed76:	bf00      	nop
    ed78:	20000e3c 	.word	0x20000e3c

0000ed7c <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed7e:	4607      	mov	r7, r0
    ed80:	460e      	mov	r6, r1
    ed82:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    ed84:	4b0c      	ldr	r3, [pc, #48]	; (edb8 <usbdc_request_handler+0x3c>)
    ed86:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    ed88:	b91c      	cbnz	r4, ed92 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    ed8a:	2000      	movs	r0, #0
    ed8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    ed8e:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    ed90:	b16c      	cbz	r4, edae <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    ed92:	6863      	ldr	r3, [r4, #4]
    ed94:	2b00      	cmp	r3, #0
    ed96:	d0fa      	beq.n	ed8e <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    ed98:	462a      	mov	r2, r5
    ed9a:	4631      	mov	r1, r6
    ed9c:	4638      	mov	r0, r7
    ed9e:	4798      	blx	r3
			if (0 == rc) {
    eda0:	b138      	cbz	r0, edb2 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    eda2:	f110 0f0a 	cmn.w	r0, #10
    eda6:	d0f2      	beq.n	ed8e <usbdc_request_handler+0x12>
				return -1;
    eda8:	f04f 30ff 	mov.w	r0, #4294967295
}
    edac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    edae:	2000      	movs	r0, #0
    edb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    edb2:	2001      	movs	r0, #1
    edb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edb6:	bf00      	nop
    edb8:	20000e3c 	.word	0x20000e3c

0000edbc <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    edbc:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    edbe:	4b06      	ldr	r3, [pc, #24]	; (edd8 <usbd_sof_cb+0x1c>)
    edc0:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    edc2:	b91c      	cbnz	r4, edcc <usbd_sof_cb+0x10>
    edc4:	bd10      	pop	{r4, pc}
		sof = sof->next;
    edc6:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    edc8:	2c00      	cmp	r4, #0
    edca:	d0fb      	beq.n	edc4 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    edcc:	6863      	ldr	r3, [r4, #4]
    edce:	2b00      	cmp	r3, #0
    edd0:	d0f9      	beq.n	edc6 <usbd_sof_cb+0xa>
			sof->cb();
    edd2:	4798      	blx	r3
    edd4:	e7f7      	b.n	edc6 <usbd_sof_cb+0xa>
    edd6:	bf00      	nop
    edd8:	20000e3c 	.word	0x20000e3c

0000eddc <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    eddc:	b510      	push	{r4, lr}
    edde:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    ede0:	b119      	cbz	r1, edea <usbdc_cb_ctl_done+0xe>
    ede2:	2901      	cmp	r1, #1
    ede4:	d026      	beq.n	ee34 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    ede6:	2000      	movs	r0, #0
    ede8:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    edea:	7813      	ldrb	r3, [r2, #0]
    edec:	2b00      	cmp	r3, #0
    edee:	d1fa      	bne.n	ede6 <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    edf0:	7853      	ldrb	r3, [r2, #1]
    edf2:	2b05      	cmp	r3, #5
    edf4:	d00f      	beq.n	ee16 <usbdc_cb_ctl_done+0x3a>
    edf6:	2b09      	cmp	r3, #9
    edf8:	d1f5      	bne.n	ede6 <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    edfa:	8852      	ldrh	r2, [r2, #2]
    edfc:	4b10      	ldr	r3, [pc, #64]	; (ee40 <usbdc_cb_ctl_done+0x64>)
    edfe:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    ee00:	8863      	ldrh	r3, [r4, #2]
    ee02:	2b00      	cmp	r3, #0
    ee04:	bf14      	ite	ne
    ee06:	2104      	movne	r1, #4
    ee08:	2103      	moveq	r1, #3
    ee0a:	4b0d      	ldr	r3, [pc, #52]	; (ee40 <usbdc_cb_ctl_done+0x64>)
    ee0c:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ee0e:	2001      	movs	r0, #1
    ee10:	4b0c      	ldr	r3, [pc, #48]	; (ee44 <usbdc_cb_ctl_done+0x68>)
    ee12:	4798      	blx	r3
    ee14:	e7e7      	b.n	ede6 <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    ee16:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    ee18:	b2c0      	uxtb	r0, r0
    ee1a:	4b0b      	ldr	r3, [pc, #44]	; (ee48 <usbdc_cb_ctl_done+0x6c>)
    ee1c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    ee1e:	8863      	ldrh	r3, [r4, #2]
    ee20:	2b00      	cmp	r3, #0
    ee22:	bf14      	ite	ne
    ee24:	2103      	movne	r1, #3
    ee26:	2102      	moveq	r1, #2
    ee28:	4b05      	ldr	r3, [pc, #20]	; (ee40 <usbdc_cb_ctl_done+0x64>)
    ee2a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    ee2c:	2001      	movs	r0, #1
    ee2e:	4b05      	ldr	r3, [pc, #20]	; (ee44 <usbdc_cb_ctl_done+0x68>)
    ee30:	4798      	blx	r3
    ee32:	e7d8      	b.n	ede6 <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    ee34:	2201      	movs	r2, #1
    ee36:	4621      	mov	r1, r4
    ee38:	2000      	movs	r0, #0
    ee3a:	4b04      	ldr	r3, [pc, #16]	; (ee4c <usbdc_cb_ctl_done+0x70>)
    ee3c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    ee3e:	e7d2      	b.n	ede6 <usbdc_cb_ctl_done+0xa>
    ee40:	20000e3c 	.word	0x20000e3c
    ee44:	0000ed55 	.word	0x0000ed55
    ee48:	00009c49 	.word	0x00009c49
    ee4c:	0000ed7d 	.word	0x0000ed7d

0000ee50 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    ee50:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    ee52:	4b0d      	ldr	r3, [pc, #52]	; (ee88 <usbdc_reset+0x38>)
    ee54:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    ee56:	4d0d      	ldr	r5, [pc, #52]	; (ee8c <usbdc_reset+0x3c>)
    ee58:	2602      	movs	r6, #2
    ee5a:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    ee5c:	2400      	movs	r4, #0
    ee5e:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    ee60:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    ee62:	4620      	mov	r0, r4
    ee64:	4b0a      	ldr	r3, [pc, #40]	; (ee90 <usbdc_reset+0x40>)
    ee66:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    ee68:	7f28      	ldrb	r0, [r5, #28]
    ee6a:	4b0a      	ldr	r3, [pc, #40]	; (ee94 <usbdc_reset+0x44>)
    ee6c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    ee6e:	4a0a      	ldr	r2, [pc, #40]	; (ee98 <usbdc_reset+0x48>)
    ee70:	4621      	mov	r1, r4
    ee72:	4620      	mov	r0, r4
    ee74:	4d09      	ldr	r5, [pc, #36]	; (ee9c <usbdc_reset+0x4c>)
    ee76:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    ee78:	4a09      	ldr	r2, [pc, #36]	; (eea0 <usbdc_reset+0x50>)
    ee7a:	4631      	mov	r1, r6
    ee7c:	4620      	mov	r0, r4
    ee7e:	47a8      	blx	r5
	usb_d_ep_enable(0);
    ee80:	4620      	mov	r0, r4
    ee82:	4b08      	ldr	r3, [pc, #32]	; (eea4 <usbdc_reset+0x54>)
    ee84:	4798      	blx	r3
    ee86:	bd70      	pop	{r4, r5, r6, pc}
    ee88:	0000ed31 	.word	0x0000ed31
    ee8c:	20000e3c 	.word	0x20000e3c
    ee90:	00009cbd 	.word	0x00009cbd
    ee94:	00009ca9 	.word	0x00009ca9
    ee98:	0000eee9 	.word	0x0000eee9
    ee9c:	00009ebd 	.word	0x00009ebd
    eea0:	0000eddd 	.word	0x0000eddd
    eea4:	00009ce9 	.word	0x00009ce9

0000eea8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    eea8:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    eeaa:	b110      	cbz	r0, eeb2 <usbd_event_cb+0xa>
    eeac:	2801      	cmp	r0, #1
    eeae:	d004      	beq.n	eeba <usbd_event_cb+0x12>
    eeb0:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    eeb2:	2000      	movs	r0, #0
    eeb4:	4b02      	ldr	r3, [pc, #8]	; (eec0 <usbd_event_cb+0x18>)
    eeb6:	4798      	blx	r3
		break;
    eeb8:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    eeba:	4b02      	ldr	r3, [pc, #8]	; (eec4 <usbd_event_cb+0x1c>)
    eebc:	4798      	blx	r3
    eebe:	bd08      	pop	{r3, pc}
    eec0:	0000ed55 	.word	0x0000ed55
    eec4:	0000ee51 	.word	0x0000ee51

0000eec8 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    eec8:	b500      	push	{lr}
    eeca:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    eecc:	9101      	str	r1, [sp, #4]
    eece:	9202      	str	r2, [sp, #8]
    eed0:	f88d 000c 	strb.w	r0, [sp, #12]
    eed4:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    eed8:	a801      	add	r0, sp, #4
    eeda:	4b02      	ldr	r3, [pc, #8]	; (eee4 <usbdc_xfer+0x1c>)
    eedc:	4798      	blx	r3
}
    eede:	b005      	add	sp, #20
    eee0:	f85d fb04 	ldr.w	pc, [sp], #4
    eee4:	00009d35 	.word	0x00009d35

0000eee8 <usbdc_cb_ctl_req>:
{
    eee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eeec:	b083      	sub	sp, #12
    eeee:	4605      	mov	r5, r0
    eef0:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    eef2:	2200      	movs	r2, #0
    eef4:	4b9b      	ldr	r3, [pc, #620]	; (f164 <usbdc_cb_ctl_req+0x27c>)
    eef6:	4798      	blx	r3
    eef8:	f1b0 3fff 	cmp.w	r0, #4294967295
    eefc:	d00b      	beq.n	ef16 <usbdc_cb_ctl_req+0x2e>
    eefe:	2801      	cmp	r0, #1
    ef00:	f000 81e3 	beq.w	f2ca <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    ef04:	7823      	ldrb	r3, [r4, #0]
    ef06:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    ef0a:	d008      	beq.n	ef1e <usbdc_cb_ctl_req+0x36>
    ef0c:	2a80      	cmp	r2, #128	; 0x80
    ef0e:	f000 80f4 	beq.w	f0fa <usbdc_cb_ctl_req+0x212>
		return false;
    ef12:	2000      	movs	r0, #0
    ef14:	e000      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    ef16:	2000      	movs	r0, #0
}
    ef18:	b003      	add	sp, #12
    ef1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    ef1e:	7862      	ldrb	r2, [r4, #1]
    ef20:	3a01      	subs	r2, #1
    ef22:	2a0a      	cmp	r2, #10
    ef24:	f200 81d3 	bhi.w	f2ce <usbdc_cb_ctl_req+0x3e6>
    ef28:	e8df f012 	tbh	[pc, r2, lsl #1]
    ef2c:	01d10060 	.word	0x01d10060
    ef30:	01d10076 	.word	0x01d10076
    ef34:	01d1000b 	.word	0x01d1000b
    ef38:	01d101d1 	.word	0x01d101d1
    ef3c:	01d10015 	.word	0x01d10015
    ef40:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ef42:	2301      	movs	r3, #1
    ef44:	2200      	movs	r2, #0
    ef46:	4611      	mov	r1, r2
    ef48:	4628      	mov	r0, r5
    ef4a:	4c87      	ldr	r4, [pc, #540]	; (f168 <usbdc_cb_ctl_req+0x280>)
    ef4c:	47a0      	blx	r4
    ef4e:	fab0 f080 	clz	r0, r0
    ef52:	0940      	lsrs	r0, r0, #5
    ef54:	e7e0      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    ef56:	8862      	ldrh	r2, [r4, #2]
    ef58:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    ef5a:	b1ca      	cbz	r2, ef90 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    ef5c:	4b83      	ldr	r3, [pc, #524]	; (f16c <usbdc_cb_ctl_req+0x284>)
    ef5e:	681b      	ldr	r3, [r3, #0]
    ef60:	6859      	ldr	r1, [r3, #4]
    ef62:	6818      	ldr	r0, [r3, #0]
    ef64:	4b82      	ldr	r3, [pc, #520]	; (f170 <usbdc_cb_ctl_req+0x288>)
    ef66:	4798      	blx	r3
	if (NULL == cfg_desc) {
    ef68:	2800      	cmp	r0, #0
    ef6a:	f000 81be 	beq.w	f2ea <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    ef6e:	78c2      	ldrb	r2, [r0, #3]
    ef70:	7881      	ldrb	r1, [r0, #2]
    ef72:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    ef76:	fa10 f181 	uxtah	r1, r0, r1
    ef7a:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    ef7c:	2204      	movs	r2, #4
    ef7e:	4b7d      	ldr	r3, [pc, #500]	; (f174 <usbdc_cb_ctl_req+0x28c>)
    ef80:	4798      	blx	r3
    ef82:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    ef84:	b130      	cbz	r0, ef94 <usbdc_cb_ctl_req+0xac>
    ef86:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    ef88:	f8df 81e0 	ldr.w	r8, [pc, #480]	; f16c <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    ef8c:	4f79      	ldr	r7, [pc, #484]	; (f174 <usbdc_cb_ctl_req+0x28c>)
    ef8e:	e018      	b.n	efc2 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    ef90:	4b79      	ldr	r3, [pc, #484]	; (f178 <usbdc_cb_ctl_req+0x290>)
    ef92:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    ef94:	2301      	movs	r3, #1
    ef96:	2200      	movs	r2, #0
    ef98:	4611      	mov	r1, r2
    ef9a:	4628      	mov	r0, r5
    ef9c:	4c72      	ldr	r4, [pc, #456]	; (f168 <usbdc_cb_ctl_req+0x280>)
    ef9e:	47a0      	blx	r4
    efa0:	fab0 f080 	clz	r0, r0
    efa4:	0940      	lsrs	r0, r0, #5
    efa6:	e7b7      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    efa8:	464c      	mov	r4, r9
    efaa:	e000      	b.n	efae <usbdc_cb_ctl_req+0xc6>
    efac:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    efae:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    efb0:	7803      	ldrb	r3, [r0, #0]
    efb2:	4418      	add	r0, r3
    efb4:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    efb6:	2204      	movs	r2, #4
    efb8:	9901      	ldr	r1, [sp, #4]
    efba:	47b8      	blx	r7
    efbc:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    efbe:	2800      	cmp	r0, #0
    efc0:	d0e8      	beq.n	ef94 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    efc2:	f890 9002 	ldrb.w	r9, [r0, #2]
    efc6:	45a1      	cmp	r9, r4
    efc8:	d0f1      	beq.n	efae <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    efca:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    efce:	2c00      	cmp	r4, #0
    efd0:	d0ea      	beq.n	efa8 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    efd2:	2600      	movs	r6, #0
    efd4:	6863      	ldr	r3, [r4, #4]
    efd6:	466a      	mov	r2, sp
    efd8:	4631      	mov	r1, r6
    efda:	4620      	mov	r0, r4
    efdc:	4798      	blx	r3
    efde:	2800      	cmp	r0, #0
    efe0:	d0e4      	beq.n	efac <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    efe2:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    efe4:	2c00      	cmp	r4, #0
    efe6:	d1f5      	bne.n	efd4 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    efe8:	464c      	mov	r4, r9
    efea:	e7e0      	b.n	efae <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    efec:	f003 031f 	and.w	r3, r3, #31
    eff0:	2b02      	cmp	r3, #2
    eff2:	f040 816e 	bne.w	f2d2 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    eff6:	88e3      	ldrh	r3, [r4, #6]
    eff8:	b10b      	cbz	r3, effe <usbdc_cb_ctl_req+0x116>
			return false;
    effa:	2000      	movs	r0, #0
    effc:	e78c      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    effe:	88a0      	ldrh	r0, [r4, #4]
    f000:	2100      	movs	r1, #0
    f002:	b2c0      	uxtb	r0, r0
    f004:	4b5d      	ldr	r3, [pc, #372]	; (f17c <usbdc_cb_ctl_req+0x294>)
    f006:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f008:	2301      	movs	r3, #1
    f00a:	2200      	movs	r2, #0
    f00c:	4611      	mov	r1, r2
    f00e:	4628      	mov	r0, r5
    f010:	4c55      	ldr	r4, [pc, #340]	; (f168 <usbdc_cb_ctl_req+0x280>)
    f012:	47a0      	blx	r4
		return true;
    f014:	2001      	movs	r0, #1
    f016:	e77f      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f018:	f003 031f 	and.w	r3, r3, #31
    f01c:	2b02      	cmp	r3, #2
    f01e:	f040 815a 	bne.w	f2d6 <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    f022:	88e3      	ldrh	r3, [r4, #6]
    f024:	b10b      	cbz	r3, f02a <usbdc_cb_ctl_req+0x142>
			return false;
    f026:	2000      	movs	r0, #0
    f028:	e776      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    f02a:	88a0      	ldrh	r0, [r4, #4]
    f02c:	2101      	movs	r1, #1
    f02e:	b2c0      	uxtb	r0, r0
    f030:	4b52      	ldr	r3, [pc, #328]	; (f17c <usbdc_cb_ctl_req+0x294>)
    f032:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    f034:	2301      	movs	r3, #1
    f036:	2200      	movs	r2, #0
    f038:	4611      	mov	r1, r2
    f03a:	4628      	mov	r0, r5
    f03c:	4c4a      	ldr	r4, [pc, #296]	; (f168 <usbdc_cb_ctl_req+0x280>)
    f03e:	47a0      	blx	r4
		return true;
    f040:	2001      	movs	r0, #1
    f042:	e769      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    f044:	8866      	ldrh	r6, [r4, #2]
    f046:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    f048:	4a48      	ldr	r2, [pc, #288]	; (f16c <usbdc_cb_ctl_req+0x284>)
    f04a:	6813      	ldr	r3, [r2, #0]
    f04c:	7ed2      	ldrb	r2, [r2, #27]
    f04e:	6859      	ldr	r1, [r3, #4]
    f050:	6818      	ldr	r0, [r3, #0]
    f052:	4b47      	ldr	r3, [pc, #284]	; (f170 <usbdc_cb_ctl_req+0x288>)
    f054:	4798      	blx	r3
	if (NULL == ifc) {
    f056:	2800      	cmp	r0, #0
    f058:	d045      	beq.n	f0e6 <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    f05a:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    f05c:	78c2      	ldrb	r2, [r0, #3]
    f05e:	7881      	ldrb	r1, [r0, #2]
    f060:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    f064:	fa10 f181 	uxtah	r1, r0, r1
    f068:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    f06a:	2204      	movs	r2, #4
    f06c:	4b41      	ldr	r3, [pc, #260]	; (f174 <usbdc_cb_ctl_req+0x28c>)
    f06e:	4798      	blx	r3
    f070:	4603      	mov	r3, r0
    f072:	2800      	cmp	r0, #0
    f074:	d039      	beq.n	f0ea <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    f076:	2704      	movs	r7, #4
    f078:	4d3e      	ldr	r5, [pc, #248]	; (f174 <usbdc_cb_ctl_req+0x28c>)
    f07a:	e008      	b.n	f08e <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    f07c:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    f07e:	7803      	ldrb	r3, [r0, #0]
    f080:	4418      	add	r0, r3
    f082:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    f084:	463a      	mov	r2, r7
    f086:	9901      	ldr	r1, [sp, #4]
    f088:	47a8      	blx	r5
		if (NULL == ifc) {
    f08a:	4603      	mov	r3, r0
    f08c:	b378      	cbz	r0, f0ee <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    f08e:	789a      	ldrb	r2, [r3, #2]
    f090:	42a2      	cmp	r2, r4
    f092:	d1f3      	bne.n	f07c <usbdc_cb_ctl_req+0x194>
    f094:	78da      	ldrb	r2, [r3, #3]
    f096:	42b2      	cmp	r2, r6
    f098:	d1f0      	bne.n	f07c <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    f09a:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    f09c:	4b33      	ldr	r3, [pc, #204]	; (f16c <usbdc_cb_ctl_req+0x284>)
    f09e:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    f0a0:	b33d      	cbz	r5, f0f2 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    f0a2:	2701      	movs	r7, #1
    f0a4:	686b      	ldr	r3, [r5, #4]
    f0a6:	466a      	mov	r2, sp
    f0a8:	4639      	mov	r1, r7
    f0aa:	4628      	mov	r0, r5
    f0ac:	4798      	blx	r3
    f0ae:	b120      	cbz	r0, f0ba <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    f0b0:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    f0b2:	2d00      	cmp	r5, #0
    f0b4:	d1f6      	bne.n	f0a4 <usbdc_cb_ctl_req+0x1bc>
	return false;
    f0b6:	2000      	movs	r0, #0
    f0b8:	e72e      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    f0ba:	686b      	ldr	r3, [r5, #4]
    f0bc:	466a      	mov	r2, sp
    f0be:	2100      	movs	r1, #0
    f0c0:	4628      	mov	r0, r5
    f0c2:	4798      	blx	r3
    f0c4:	b9b8      	cbnz	r0, f0f6 <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    f0c6:	b136      	cbz	r6, f0d6 <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    f0c8:	4a28      	ldr	r2, [pc, #160]	; (f16c <usbdc_cb_ctl_req+0x284>)
    f0ca:	2301      	movs	r3, #1
    f0cc:	fa03 f404 	lsl.w	r4, r3, r4
    f0d0:	7f53      	ldrb	r3, [r2, #29]
    f0d2:	4323      	orrs	r3, r4
    f0d4:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    f0d6:	2300      	movs	r3, #0
    f0d8:	461a      	mov	r2, r3
    f0da:	4619      	mov	r1, r3
    f0dc:	4618      	mov	r0, r3
    f0de:	4c22      	ldr	r4, [pc, #136]	; (f168 <usbdc_cb_ctl_req+0x280>)
    f0e0:	47a0      	blx	r4
			return true;
    f0e2:	2001      	movs	r0, #1
    f0e4:	e718      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f0e6:	2000      	movs	r0, #0
    f0e8:	e716      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f0ea:	2000      	movs	r0, #0
    f0ec:	e714      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
			return false;
    f0ee:	2000      	movs	r0, #0
    f0f0:	e712      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
	return false;
    f0f2:	2000      	movs	r0, #0
    f0f4:	e710      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
			return false;
    f0f6:	2000      	movs	r0, #0
    f0f8:	e70e      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    f0fa:	7862      	ldrb	r2, [r4, #1]
    f0fc:	2a0a      	cmp	r2, #10
    f0fe:	f200 80ec 	bhi.w	f2da <usbdc_cb_ctl_req+0x3f2>
    f102:	e8df f012 	tbh	[pc, r2, lsl #1]
    f106:	008e      	.short	0x008e
    f108:	00ea00ea 	.word	0x00ea00ea
    f10c:	00ea00ea 	.word	0x00ea00ea
    f110:	000b00ea 	.word	0x000b00ea
    f114:	008200ea 	.word	0x008200ea
    f118:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    f11c:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    f11e:	0a13      	lsrs	r3, r2, #8
    f120:	2b02      	cmp	r3, #2
    f122:	d02d      	beq.n	f180 <usbdc_cb_ctl_req+0x298>
    f124:	2b03      	cmp	r3, #3
    f126:	d050      	beq.n	f1ca <usbdc_cb_ctl_req+0x2e2>
    f128:	2b01      	cmp	r3, #1
    f12a:	d001      	beq.n	f130 <usbdc_cb_ctl_req+0x248>
	return false;
    f12c:	2000      	movs	r0, #0
    f12e:	e6f3      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    f130:	88e2      	ldrh	r2, [r4, #6]
    f132:	2a12      	cmp	r2, #18
    f134:	bf28      	it	cs
    f136:	2212      	movcs	r2, #18
    f138:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    f13a:	4b0c      	ldr	r3, [pc, #48]	; (f16c <usbdc_cb_ctl_req+0x284>)
    f13c:	681b      	ldr	r3, [r3, #0]
    f13e:	2201      	movs	r2, #1
    f140:	6859      	ldr	r1, [r3, #4]
    f142:	6818      	ldr	r0, [r3, #0]
    f144:	4b0b      	ldr	r3, [pc, #44]	; (f174 <usbdc_cb_ctl_req+0x28c>)
    f146:	4798      	blx	r3
	if (!dev_desc) {
    f148:	4601      	mov	r1, r0
    f14a:	2800      	cmp	r0, #0
    f14c:	f000 80c7 	beq.w	f2de <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    f150:	2300      	movs	r3, #0
    f152:	4622      	mov	r2, r4
    f154:	4628      	mov	r0, r5
    f156:	4c04      	ldr	r4, [pc, #16]	; (f168 <usbdc_cb_ctl_req+0x280>)
    f158:	47a0      	blx	r4
    f15a:	fab0 f080 	clz	r0, r0
    f15e:	0940      	lsrs	r0, r0, #5
    f160:	e6da      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
    f162:	bf00      	nop
    f164:	0000ed7d 	.word	0x0000ed7d
    f168:	0000eec9 	.word	0x0000eec9
    f16c:	20000e3c 	.word	0x20000e3c
    f170:	0000f475 	.word	0x0000f475
    f174:	0000f3f5 	.word	0x0000f3f5
    f178:	0000ed31 	.word	0x0000ed31
    f17c:	00009e55 	.word	0x00009e55
	uint16_t length   = req->wLength;
    f180:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f182:	4b5b      	ldr	r3, [pc, #364]	; (f2f0 <usbdc_cb_ctl_req+0x408>)
    f184:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    f186:	681b      	ldr	r3, [r3, #0]
    f188:	3201      	adds	r2, #1
    f18a:	b2d2      	uxtb	r2, r2
    f18c:	6859      	ldr	r1, [r3, #4]
    f18e:	6818      	ldr	r0, [r3, #0]
    f190:	4b58      	ldr	r3, [pc, #352]	; (f2f4 <usbdc_cb_ctl_req+0x40c>)
    f192:	4798      	blx	r3
	if (NULL == cfg_desc) {
    f194:	4601      	mov	r1, r0
    f196:	2800      	cmp	r0, #0
    f198:	f000 80a3 	beq.w	f2e2 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    f19c:	78c3      	ldrb	r3, [r0, #3]
    f19e:	7882      	ldrb	r2, [r0, #2]
    f1a0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    f1a4:	b292      	uxth	r2, r2
	if (length <= total_len) {
    f1a6:	4294      	cmp	r4, r2
    f1a8:	d90d      	bls.n	f1c6 <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f1aa:	3e01      	subs	r6, #1
    f1ac:	4226      	tst	r6, r4
    f1ae:	bf0c      	ite	eq
    f1b0:	2301      	moveq	r3, #1
    f1b2:	2300      	movne	r3, #0
		length = total_len;
    f1b4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    f1b6:	4622      	mov	r2, r4
    f1b8:	4628      	mov	r0, r5
    f1ba:	4c4f      	ldr	r4, [pc, #316]	; (f2f8 <usbdc_cb_ctl_req+0x410>)
    f1bc:	47a0      	blx	r4
    f1be:	fab0 f080 	clz	r0, r0
    f1c2:	0940      	lsrs	r0, r0, #5
    f1c4:	e6a8      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    f1c6:	2300      	movs	r3, #0
    f1c8:	e7f5      	b.n	f1b6 <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    f1ca:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f1cc:	4b48      	ldr	r3, [pc, #288]	; (f2f0 <usbdc_cb_ctl_req+0x408>)
    f1ce:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    f1d0:	681b      	ldr	r3, [r3, #0]
    f1d2:	b2d2      	uxtb	r2, r2
    f1d4:	6859      	ldr	r1, [r3, #4]
    f1d6:	6818      	ldr	r0, [r3, #0]
    f1d8:	4b48      	ldr	r3, [pc, #288]	; (f2fc <usbdc_cb_ctl_req+0x414>)
    f1da:	4798      	blx	r3
	if (NULL == str_desc) {
    f1dc:	4601      	mov	r1, r0
    f1de:	2800      	cmp	r0, #0
    f1e0:	f000 8081 	beq.w	f2e6 <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    f1e4:	7802      	ldrb	r2, [r0, #0]
    f1e6:	4294      	cmp	r4, r2
    f1e8:	d90d      	bls.n	f206 <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    f1ea:	3e01      	subs	r6, #1
    f1ec:	4226      	tst	r6, r4
    f1ee:	bf0c      	ite	eq
    f1f0:	2301      	moveq	r3, #1
    f1f2:	2300      	movne	r3, #0
		length = str_desc[0];
    f1f4:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    f1f6:	4622      	mov	r2, r4
    f1f8:	4628      	mov	r0, r5
    f1fa:	4c3f      	ldr	r4, [pc, #252]	; (f2f8 <usbdc_cb_ctl_req+0x410>)
    f1fc:	47a0      	blx	r4
    f1fe:	fab0 f080 	clz	r0, r0
    f202:	0940      	lsrs	r0, r0, #5
    f204:	e688      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    f206:	2300      	movs	r3, #0
    f208:	e7f5      	b.n	f1f6 <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    f20a:	4939      	ldr	r1, [pc, #228]	; (f2f0 <usbdc_cb_ctl_req+0x408>)
    f20c:	694b      	ldr	r3, [r1, #20]
    f20e:	7eca      	ldrb	r2, [r1, #27]
    f210:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    f212:	2300      	movs	r3, #0
    f214:	2201      	movs	r2, #1
    f216:	6949      	ldr	r1, [r1, #20]
    f218:	4628      	mov	r0, r5
    f21a:	4c37      	ldr	r4, [pc, #220]	; (f2f8 <usbdc_cb_ctl_req+0x410>)
    f21c:	47a0      	blx	r4
		return true;
    f21e:	2001      	movs	r0, #1
    f220:	e67a      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    f222:	f003 031f 	and.w	r3, r3, #31
    f226:	2b01      	cmp	r3, #1
    f228:	d903      	bls.n	f232 <usbdc_cb_ctl_req+0x34a>
    f22a:	2b02      	cmp	r3, #2
    f22c:	d010      	beq.n	f250 <usbdc_cb_ctl_req+0x368>
		return false;
    f22e:	2000      	movs	r0, #0
    f230:	e672      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		st = 0;
    f232:	2300      	movs	r3, #0
    f234:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    f236:	492e      	ldr	r1, [pc, #184]	; (f2f0 <usbdc_cb_ctl_req+0x408>)
    f238:	694b      	ldr	r3, [r1, #20]
    f23a:	f8bd 2000 	ldrh.w	r2, [sp]
    f23e:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    f240:	2300      	movs	r3, #0
    f242:	2202      	movs	r2, #2
    f244:	6949      	ldr	r1, [r1, #20]
    f246:	4628      	mov	r0, r5
    f248:	4c2b      	ldr	r4, [pc, #172]	; (f2f8 <usbdc_cb_ctl_req+0x410>)
    f24a:	47a0      	blx	r4
	return true;
    f24c:	2001      	movs	r0, #1
    f24e:	e663      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    f250:	88a0      	ldrh	r0, [r4, #4]
    f252:	2102      	movs	r1, #2
    f254:	b2c0      	uxtb	r0, r0
    f256:	4b2a      	ldr	r3, [pc, #168]	; (f300 <usbdc_cb_ctl_req+0x418>)
    f258:	4798      	blx	r3
		if (st < 0) {
    f25a:	2800      	cmp	r0, #0
    f25c:	db03      	blt.n	f266 <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    f25e:	f000 0001 	and.w	r0, r0, #1
    f262:	9000      	str	r0, [sp, #0]
    f264:	e7e7      	b.n	f236 <usbdc_cb_ctl_req+0x34e>
			return false;
    f266:	2000      	movs	r0, #0
    f268:	e656      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    f26a:	4b21      	ldr	r3, [pc, #132]	; (f2f0 <usbdc_cb_ctl_req+0x408>)
    f26c:	7f5b      	ldrb	r3, [r3, #29]
    f26e:	88a2      	ldrh	r2, [r4, #4]
    f270:	4113      	asrs	r3, r2
    f272:	f013 0f01 	tst.w	r3, #1
    f276:	d012      	beq.n	f29e <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    f278:	4b1d      	ldr	r3, [pc, #116]	; (f2f0 <usbdc_cb_ctl_req+0x408>)
    f27a:	691d      	ldr	r5, [r3, #16]
	return false;
    f27c:	2000      	movs	r0, #0
	while (NULL != func) {
    f27e:	2d00      	cmp	r5, #0
    f280:	f43f ae4a 	beq.w	ef18 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    f284:	2602      	movs	r6, #2
    f286:	686b      	ldr	r3, [r5, #4]
    f288:	4622      	mov	r2, r4
    f28a:	4631      	mov	r1, r6
    f28c:	4628      	mov	r0, r5
    f28e:	4798      	blx	r3
    f290:	2800      	cmp	r0, #0
    f292:	da0f      	bge.n	f2b4 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    f294:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    f296:	2d00      	cmp	r5, #0
    f298:	d1f5      	bne.n	f286 <usbdc_cb_ctl_req+0x39e>
	return false;
    f29a:	2000      	movs	r0, #0
    f29c:	e63c      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    f29e:	4914      	ldr	r1, [pc, #80]	; (f2f0 <usbdc_cb_ctl_req+0x408>)
    f2a0:	694b      	ldr	r3, [r1, #20]
    f2a2:	2000      	movs	r0, #0
    f2a4:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f2a6:	4603      	mov	r3, r0
    f2a8:	2201      	movs	r2, #1
    f2aa:	6949      	ldr	r1, [r1, #20]
    f2ac:	4c12      	ldr	r4, [pc, #72]	; (f2f8 <usbdc_cb_ctl_req+0x410>)
    f2ae:	47a0      	blx	r4
		return true;
    f2b0:	2001      	movs	r0, #1
    f2b2:	e631      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    f2b4:	490e      	ldr	r1, [pc, #56]	; (f2f0 <usbdc_cb_ctl_req+0x408>)
    f2b6:	694b      	ldr	r3, [r1, #20]
    f2b8:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    f2ba:	2300      	movs	r3, #0
    f2bc:	2201      	movs	r2, #1
    f2be:	6949      	ldr	r1, [r1, #20]
    f2c0:	4618      	mov	r0, r3
    f2c2:	4c0d      	ldr	r4, [pc, #52]	; (f2f8 <usbdc_cb_ctl_req+0x410>)
    f2c4:	47a0      	blx	r4
			return true;
    f2c6:	2001      	movs	r0, #1
    f2c8:	e626      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return true;
    f2ca:	2001      	movs	r0, #1
    f2cc:	e624      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f2ce:	2000      	movs	r0, #0
    f2d0:	e622      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f2d2:	2000      	movs	r0, #0
    f2d4:	e620      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f2d6:	2000      	movs	r0, #0
    f2d8:	e61e      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f2da:	2000      	movs	r0, #0
    f2dc:	e61c      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f2de:	2000      	movs	r0, #0
    f2e0:	e61a      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f2e2:	2000      	movs	r0, #0
    f2e4:	e618      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
		return false;
    f2e6:	2000      	movs	r0, #0
    f2e8:	e616      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
			return false;
    f2ea:	2000      	movs	r0, #0
    f2ec:	e614      	b.n	ef18 <usbdc_cb_ctl_req+0x30>
    f2ee:	bf00      	nop
    f2f0:	20000e3c 	.word	0x20000e3c
    f2f4:	0000f475 	.word	0x0000f475
    f2f8:	0000eec9 	.word	0x0000eec9
    f2fc:	0000f4dd 	.word	0x0000f4dd
    f300:	00009e55 	.word	0x00009e55

0000f304 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    f304:	b508      	push	{r3, lr}
	switch (type) {
    f306:	2801      	cmp	r0, #1
    f308:	d007      	beq.n	f31a <usbdc_register_handler+0x16>
    f30a:	b110      	cbz	r0, f312 <usbdc_register_handler+0xe>
    f30c:	2802      	cmp	r0, #2
    f30e:	d008      	beq.n	f322 <usbdc_register_handler+0x1e>
    f310:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    f312:	4806      	ldr	r0, [pc, #24]	; (f32c <usbdc_register_handler+0x28>)
    f314:	4b06      	ldr	r3, [pc, #24]	; (f330 <usbdc_register_handler+0x2c>)
    f316:	4798      	blx	r3
		break;
    f318:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    f31a:	4806      	ldr	r0, [pc, #24]	; (f334 <usbdc_register_handler+0x30>)
    f31c:	4b04      	ldr	r3, [pc, #16]	; (f330 <usbdc_register_handler+0x2c>)
    f31e:	4798      	blx	r3
		break;
    f320:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    f322:	4805      	ldr	r0, [pc, #20]	; (f338 <usbdc_register_handler+0x34>)
    f324:	4b02      	ldr	r3, [pc, #8]	; (f330 <usbdc_register_handler+0x2c>)
    f326:	4798      	blx	r3
    f328:	bd08      	pop	{r3, pc}
    f32a:	bf00      	nop
    f32c:	20000e40 	.word	0x20000e40
    f330:	00009f39 	.word	0x00009f39
    f334:	20000e44 	.word	0x20000e44
    f338:	20000e48 	.word	0x20000e48

0000f33c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    f33c:	b538      	push	{r3, r4, r5, lr}
    f33e:	4605      	mov	r5, r0
	ASSERT(ctrl_buf);

	int32_t rc;

	rc = usb_d_init();
    f340:	4b09      	ldr	r3, [pc, #36]	; (f368 <usbdc_init+0x2c>)
    f342:	4798      	blx	r3
	if (rc < 0) {
    f344:	2800      	cmp	r0, #0
    f346:	db0e      	blt.n	f366 <usbdc_init+0x2a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    f348:	4c08      	ldr	r4, [pc, #32]	; (f36c <usbdc_init+0x30>)
    f34a:	2220      	movs	r2, #32
    f34c:	2100      	movs	r1, #0
    f34e:	4620      	mov	r0, r4
    f350:	4b07      	ldr	r3, [pc, #28]	; (f370 <usbdc_init+0x34>)
    f352:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    f354:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    f356:	4907      	ldr	r1, [pc, #28]	; (f374 <usbdc_init+0x38>)
    f358:	2000      	movs	r0, #0
    f35a:	4c07      	ldr	r4, [pc, #28]	; (f378 <usbdc_init+0x3c>)
    f35c:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    f35e:	4907      	ldr	r1, [pc, #28]	; (f37c <usbdc_init+0x40>)
    f360:	2001      	movs	r0, #1
    f362:	47a0      	blx	r4

	return 0;
    f364:	2000      	movs	r0, #0
}
    f366:	bd38      	pop	{r3, r4, r5, pc}
    f368:	00009bb1 	.word	0x00009bb1
    f36c:	20000e3c 	.word	0x20000e3c
    f370:	0000fec3 	.word	0x0000fec3
    f374:	0000edbd 	.word	0x0000edbd
    f378:	00009c19 	.word	0x00009c19
    f37c:	0000eea9 	.word	0x0000eea9

0000f380 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    f380:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    f382:	4601      	mov	r1, r0
    f384:	4801      	ldr	r0, [pc, #4]	; (f38c <usbdc_register_function+0xc>)
    f386:	4b02      	ldr	r3, [pc, #8]	; (f390 <usbdc_register_function+0x10>)
    f388:	4798      	blx	r3
    f38a:	bd08      	pop	{r3, pc}
    f38c:	20000e4c 	.word	0x20000e4c
    f390:	00009f39 	.word	0x00009f39

0000f394 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    f394:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    f396:	4b0a      	ldr	r3, [pc, #40]	; (f3c0 <usbdc_start+0x2c>)
    f398:	7e9b      	ldrb	r3, [r3, #26]
    f39a:	b95b      	cbnz	r3, f3b4 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    f39c:	b168      	cbz	r0, f3ba <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    f39e:	4b08      	ldr	r3, [pc, #32]	; (f3c0 <usbdc_start+0x2c>)
    f3a0:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    f3a2:	6802      	ldr	r2, [r0, #0]
    f3a4:	79d2      	ldrb	r2, [r2, #7]
    f3a6:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    f3a8:	2201      	movs	r2, #1
    f3aa:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    f3ac:	4b05      	ldr	r3, [pc, #20]	; (f3c4 <usbdc_start+0x30>)
    f3ae:	4798      	blx	r3
	return ERR_NONE;
    f3b0:	2000      	movs	r0, #0
    f3b2:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    f3b4:	f06f 0003 	mvn.w	r0, #3
    f3b8:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    f3ba:	f06f 0008 	mvn.w	r0, #8
}
    f3be:	bd08      	pop	{r3, pc}
    f3c0:	20000e3c 	.word	0x20000e3c
    f3c4:	00009c25 	.word	0x00009c25

0000f3c8 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    f3c8:	b508      	push	{r3, lr}
	usb_d_attach();
    f3ca:	4b01      	ldr	r3, [pc, #4]	; (f3d0 <usbdc_attach+0x8>)
    f3cc:	4798      	blx	r3
    f3ce:	bd08      	pop	{r3, pc}
    f3d0:	00009c31 	.word	0x00009c31

0000f3d4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    f3d4:	4b01      	ldr	r3, [pc, #4]	; (f3dc <usbdc_get_ctrl_buffer+0x8>)
    f3d6:	6958      	ldr	r0, [r3, #20]
    f3d8:	4770      	bx	lr
    f3da:	bf00      	nop
    f3dc:	20000e3c 	.word	0x20000e3c

0000f3e0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    f3e0:	4b03      	ldr	r3, [pc, #12]	; (f3f0 <usbdc_get_state+0x10>)
    f3e2:	7e98      	ldrb	r0, [r3, #26]
    f3e4:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    f3e8:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    f3ea:	bf18      	it	ne
    f3ec:	2010      	movne	r0, #16
    f3ee:	4770      	bx	lr
    f3f0:	20000e3c 	.word	0x20000e3c

0000f3f4 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f3f4:	4288      	cmp	r0, r1
    f3f6:	d214      	bcs.n	f422 <usb_find_desc+0x2e>
	return desc[0];
    f3f8:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    f3fa:	2b01      	cmp	r3, #1
    f3fc:	d913      	bls.n	f426 <usb_find_desc+0x32>
{
    f3fe:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    f400:	7844      	ldrb	r4, [r0, #1]
    f402:	4294      	cmp	r4, r2
    f404:	d00a      	beq.n	f41c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    f406:	4418      	add	r0, r3
	while (desc < eof) {
    f408:	4281      	cmp	r1, r0
    f40a:	d906      	bls.n	f41a <usb_find_desc+0x26>
	return desc[0];
    f40c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    f40e:	2b01      	cmp	r3, #1
    f410:	d90b      	bls.n	f42a <usb_find_desc+0x36>
	return desc[1];
    f412:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    f414:	4294      	cmp	r4, r2
    f416:	d1f6      	bne.n	f406 <usb_find_desc+0x12>
    f418:	e000      	b.n	f41c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    f41a:	2000      	movs	r0, #0
}
    f41c:	f85d 4b04 	ldr.w	r4, [sp], #4
    f420:	4770      	bx	lr
	return NULL;
    f422:	2000      	movs	r0, #0
    f424:	4770      	bx	lr
		_desc_len_check();
    f426:	2000      	movs	r0, #0
    f428:	4770      	bx	lr
    f42a:	2000      	movs	r0, #0
    f42c:	e7f6      	b.n	f41c <usb_find_desc+0x28>

0000f42e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    f42e:	4288      	cmp	r0, r1
    f430:	d216      	bcs.n	f460 <usb_find_ep_desc+0x32>
	return desc[0];
    f432:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    f434:	2b01      	cmp	r3, #1
    f436:	d915      	bls.n	f464 <usb_find_ep_desc+0x36>
	return desc[1];
    f438:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    f43a:	2a04      	cmp	r2, #4
    f43c:	d014      	beq.n	f468 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    f43e:	2a05      	cmp	r2, #5
    f440:	d00b      	beq.n	f45a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    f442:	4418      	add	r0, r3
	while (desc < eof) {
    f444:	4281      	cmp	r1, r0
    f446:	d909      	bls.n	f45c <usb_find_ep_desc+0x2e>
	return desc[0];
    f448:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    f44a:	2b01      	cmp	r3, #1
    f44c:	d90e      	bls.n	f46c <usb_find_ep_desc+0x3e>
	return desc[1];
    f44e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    f450:	2a04      	cmp	r2, #4
    f452:	d00d      	beq.n	f470 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    f454:	2a05      	cmp	r2, #5
    f456:	d1f4      	bne.n	f442 <usb_find_ep_desc+0x14>
    f458:	e00b      	b.n	f472 <usb_find_ep_desc+0x44>
    f45a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    f45c:	2000      	movs	r0, #0
    f45e:	4770      	bx	lr
    f460:	2000      	movs	r0, #0
    f462:	4770      	bx	lr
		_desc_len_check();
    f464:	2000      	movs	r0, #0
    f466:	4770      	bx	lr
	return NULL;
    f468:	2000      	movs	r0, #0
    f46a:	4770      	bx	lr
		_desc_len_check();
    f46c:	2000      	movs	r0, #0
    f46e:	4770      	bx	lr
	return NULL;
    f470:	2000      	movs	r0, #0
}
    f472:	4770      	bx	lr

0000f474 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    f474:	b538      	push	{r3, r4, r5, lr}
    f476:	460c      	mov	r4, r1
    f478:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    f47a:	2202      	movs	r2, #2
    f47c:	4b16      	ldr	r3, [pc, #88]	; (f4d8 <usb_find_cfg_desc+0x64>)
    f47e:	4798      	blx	r3
	if (!desc) {
    f480:	4603      	mov	r3, r0
    f482:	b1e8      	cbz	r0, f4c0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    f484:	4284      	cmp	r4, r0
    f486:	d91d      	bls.n	f4c4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    f488:	7802      	ldrb	r2, [r0, #0]
    f48a:	2a01      	cmp	r2, #1
    f48c:	d91c      	bls.n	f4c8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    f48e:	7842      	ldrb	r2, [r0, #1]
    f490:	2a02      	cmp	r2, #2
    f492:	d11b      	bne.n	f4cc <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    f494:	7942      	ldrb	r2, [r0, #5]
    f496:	42aa      	cmp	r2, r5
    f498:	d012      	beq.n	f4c0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    f49a:	78d9      	ldrb	r1, [r3, #3]
    f49c:	789a      	ldrb	r2, [r3, #2]
    f49e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    f4a2:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    f4a6:	429c      	cmp	r4, r3
    f4a8:	d909      	bls.n	f4be <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    f4aa:	781a      	ldrb	r2, [r3, #0]
    f4ac:	2a01      	cmp	r2, #1
    f4ae:	d90f      	bls.n	f4d0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    f4b0:	785a      	ldrb	r2, [r3, #1]
    f4b2:	2a02      	cmp	r2, #2
    f4b4:	d10e      	bne.n	f4d4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    f4b6:	795a      	ldrb	r2, [r3, #5]
    f4b8:	42aa      	cmp	r2, r5
    f4ba:	d1ee      	bne.n	f49a <usb_find_cfg_desc+0x26>
    f4bc:	e000      	b.n	f4c0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    f4be:	2300      	movs	r3, #0
}
    f4c0:	4618      	mov	r0, r3
    f4c2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    f4c4:	2300      	movs	r3, #0
    f4c6:	e7fb      	b.n	f4c0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    f4c8:	2300      	movs	r3, #0
    f4ca:	e7f9      	b.n	f4c0 <usb_find_cfg_desc+0x4c>
	return NULL;
    f4cc:	2300      	movs	r3, #0
    f4ce:	e7f7      	b.n	f4c0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    f4d0:	2300      	movs	r3, #0
    f4d2:	e7f5      	b.n	f4c0 <usb_find_cfg_desc+0x4c>
	return NULL;
    f4d4:	2300      	movs	r3, #0
    f4d6:	e7f3      	b.n	f4c0 <usb_find_cfg_desc+0x4c>
    f4d8:	0000f3f5 	.word	0x0000f3f5

0000f4dc <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    f4dc:	4288      	cmp	r0, r1
    f4de:	d217      	bcs.n	f510 <usb_find_str_desc+0x34>
{
    f4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4e4:	460d      	mov	r5, r1
    f4e6:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    f4e8:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    f4ea:	f04f 0803 	mov.w	r8, #3
    f4ee:	4f0c      	ldr	r7, [pc, #48]	; (f520 <usb_find_str_desc+0x44>)
    f4f0:	4642      	mov	r2, r8
    f4f2:	4629      	mov	r1, r5
    f4f4:	47b8      	blx	r7
		if (desc) {
    f4f6:	4603      	mov	r3, r0
    f4f8:	b170      	cbz	r0, f518 <usb_find_str_desc+0x3c>
	return desc[0];
    f4fa:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    f4fc:	2801      	cmp	r0, #1
    f4fe:	d90a      	bls.n	f516 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    f500:	42a6      	cmp	r6, r4
    f502:	d009      	beq.n	f518 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    f504:	4418      	add	r0, r3
    f506:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    f508:	4285      	cmp	r5, r0
    f50a:	d8f1      	bhi.n	f4f0 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    f50c:	2300      	movs	r3, #0
    f50e:	e003      	b.n	f518 <usb_find_str_desc+0x3c>
    f510:	2300      	movs	r3, #0
}
    f512:	4618      	mov	r0, r3
    f514:	4770      	bx	lr
			_desc_len_check();
    f516:	2300      	movs	r3, #0
}
    f518:	4618      	mov	r0, r3
    f51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f51e:	bf00      	nop
    f520:	0000f3f5 	.word	0x0000f3f5

0000f524 <hiddf_demo_sof_event>:
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    f524:	4b3a      	ldr	r3, [pc, #232]	; (f610 <hiddf_demo_sof_event+0xec>)
    f526:	791b      	ldrb	r3, [r3, #4]
    f528:	2b0a      	cmp	r3, #10
    f52a:	d803      	bhi.n	f534 <hiddf_demo_sof_event+0x10>
    f52c:	3301      	adds	r3, #1
    f52e:	4a38      	ldr	r2, [pc, #224]	; (f610 <hiddf_demo_sof_event+0xec>)
    f530:	7113      	strb	r3, [r2, #4]
    f532:	4770      	bx	lr
{
    f534:	b570      	push	{r4, r5, r6, lr}
    f536:	b084      	sub	sp, #16
		interval = 0;
    f538:	4b35      	ldr	r3, [pc, #212]	; (f610 <hiddf_demo_sof_event+0xec>)
    f53a:	2200      	movs	r2, #0
    f53c:	711a      	strb	r2, [r3, #4]

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO
		if (!gpio_get_pin_level(pin_btn1)) {
    f53e:	7a1d      	ldrb	r5, [r3, #8]
	CRITICAL_SECTION_ENTER();
    f540:	a801      	add	r0, sp, #4
    f542:	4b34      	ldr	r3, [pc, #208]	; (f614 <hiddf_demo_sof_event+0xf0>)
    f544:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f546:	096b      	lsrs	r3, r5, #5
    f548:	4933      	ldr	r1, [pc, #204]	; (f618 <hiddf_demo_sof_event+0xf4>)
    f54a:	01db      	lsls	r3, r3, #7
    f54c:	18ca      	adds	r2, r1, r3
    f54e:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f550:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f552:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f554:	405c      	eors	r4, r3
    f556:	400c      	ands	r4, r1
    f558:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    f55a:	a801      	add	r0, sp, #4
    f55c:	4b2f      	ldr	r3, [pc, #188]	; (f61c <hiddf_demo_sof_event+0xf8>)
    f55e:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    f560:	f005 051f 	and.w	r5, r5, #31
    f564:	2301      	movs	r3, #1
    f566:	fa03 f505 	lsl.w	r5, r3, r5
    f56a:	4225      	tst	r5, r4
    f56c:	d040      	beq.n	f5f0 <hiddf_demo_sof_event+0xcc>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
		}
		if (!gpio_get_pin_level(pin_btn3)) {
    f56e:	4b28      	ldr	r3, [pc, #160]	; (f610 <hiddf_demo_sof_event+0xec>)
    f570:	7b1d      	ldrb	r5, [r3, #12]
	CRITICAL_SECTION_ENTER();
    f572:	a802      	add	r0, sp, #8
    f574:	4b27      	ldr	r3, [pc, #156]	; (f614 <hiddf_demo_sof_event+0xf0>)
    f576:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f578:	096b      	lsrs	r3, r5, #5
    f57a:	4927      	ldr	r1, [pc, #156]	; (f618 <hiddf_demo_sof_event+0xf4>)
    f57c:	01db      	lsls	r3, r3, #7
    f57e:	18ca      	adds	r2, r1, r3
    f580:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f582:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f584:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f586:	405c      	eors	r4, r3
    f588:	400c      	ands	r4, r1
    f58a:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    f58c:	a802      	add	r0, sp, #8
    f58e:	4b23      	ldr	r3, [pc, #140]	; (f61c <hiddf_demo_sof_event+0xf8>)
    f590:	4798      	blx	r3
    f592:	f005 051f 	and.w	r5, r5, #31
    f596:	2301      	movs	r3, #1
    f598:	fa03 f505 	lsl.w	r5, r3, r5
    f59c:	4225      	tst	r5, r4
    f59e:	d02d      	beq.n	f5fc <hiddf_demo_sof_event+0xd8>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
		}
#endif

#if CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    f5a0:	4d1b      	ldr	r5, [pc, #108]	; (f610 <hiddf_demo_sof_event+0xec>)
    f5a2:	7c2e      	ldrb	r6, [r5, #16]
	CRITICAL_SECTION_ENTER();
    f5a4:	a803      	add	r0, sp, #12
    f5a6:	4b1b      	ldr	r3, [pc, #108]	; (f614 <hiddf_demo_sof_event+0xf0>)
    f5a8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    f5aa:	0973      	lsrs	r3, r6, #5
    f5ac:	491a      	ldr	r1, [pc, #104]	; (f618 <hiddf_demo_sof_event+0xf4>)
    f5ae:	01db      	lsls	r3, r3, #7
    f5b0:	18ca      	adds	r2, r1, r3
    f5b2:	58c9      	ldr	r1, [r1, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    f5b4:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    f5b6:	6914      	ldr	r4, [r2, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    f5b8:	405c      	eors	r4, r3
    f5ba:	400c      	ands	r4, r1
    f5bc:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    f5be:	a803      	add	r0, sp, #12
    f5c0:	4b16      	ldr	r3, [pc, #88]	; (f61c <hiddf_demo_sof_event+0xf8>)
    f5c2:	4798      	blx	r3
    f5c4:	f006 061f 	and.w	r6, r6, #31
    f5c8:	2301      	movs	r3, #1
    f5ca:	40b3      	lsls	r3, r6
    f5cc:	401c      	ands	r4, r3
    f5ce:	bf0c      	ite	eq
    f5d0:	2301      	moveq	r3, #1
    f5d2:	2300      	movne	r3, #0
    f5d4:	7d2a      	ldrb	r2, [r5, #20]
    f5d6:	429a      	cmp	r2, r3
    f5d8:	d008      	beq.n	f5ec <hiddf_demo_sof_event+0xc8>
			b_btn_last_state = b_btn_state;
    f5da:	752b      	strb	r3, [r5, #20]
			if (1 == b_btn_last_state) {
    f5dc:	b19c      	cbz	r4, f606 <hiddf_demo_sof_event+0xe2>
				key_array->state = HID_KB_KEY_DOWN;
			} else {
				key_array->state = HID_KB_KEY_UP;
    f5de:	2200      	movs	r2, #0
    f5e0:	4b0f      	ldr	r3, [pc, #60]	; (f620 <hiddf_demo_sof_event+0xfc>)
    f5e2:	709a      	strb	r2, [r3, #2]
			}
			hiddf_keyboard_keys_state_change(key_array, 1);
    f5e4:	2101      	movs	r1, #1
    f5e6:	480e      	ldr	r0, [pc, #56]	; (f620 <hiddf_demo_sof_event+0xfc>)
    f5e8:	4b0e      	ldr	r3, [pc, #56]	; (f624 <hiddf_demo_sof_event+0x100>)
    f5ea:	4798      	blx	r3
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    f5ec:	b004      	add	sp, #16
    f5ee:	bd70      	pop	{r4, r5, r6, pc}
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    f5f0:	4619      	mov	r1, r3
    f5f2:	f06f 0004 	mvn.w	r0, #4
    f5f6:	4b0c      	ldr	r3, [pc, #48]	; (f628 <hiddf_demo_sof_event+0x104>)
    f5f8:	4798      	blx	r3
    f5fa:	e7b8      	b.n	f56e <hiddf_demo_sof_event+0x4a>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    f5fc:	4619      	mov	r1, r3
    f5fe:	2005      	movs	r0, #5
    f600:	4b09      	ldr	r3, [pc, #36]	; (f628 <hiddf_demo_sof_event+0x104>)
    f602:	4798      	blx	r3
    f604:	e7cc      	b.n	f5a0 <hiddf_demo_sof_event+0x7c>
				key_array->state = HID_KB_KEY_DOWN;
    f606:	2201      	movs	r2, #1
    f608:	4b05      	ldr	r3, [pc, #20]	; (f620 <hiddf_demo_sof_event+0xfc>)
    f60a:	709a      	strb	r2, [r3, #2]
    f60c:	e7ea      	b.n	f5e4 <hiddf_demo_sof_event+0xc0>
    f60e:	bf00      	nop
    f610:	20000e5c 	.word	0x20000e5c
    f614:	00009011 	.word	0x00009011
    f618:	41008000 	.word	0x41008000
    f61c:	0000901f 	.word	0x0000901f
    f620:	200003b8 	.word	0x200003b8
    f624:	0000e789 	.word	0x0000e789
    f628:	0000ea1d 	.word	0x0000ea1d

0000f62c <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    f62c:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    f62e:	4805      	ldr	r0, [pc, #20]	; (f644 <composite_device_init+0x18>)
    f630:	4b05      	ldr	r3, [pc, #20]	; (f648 <composite_device_init+0x1c>)
    f632:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    f634:	4b05      	ldr	r3, [pc, #20]	; (f64c <composite_device_init+0x20>)
    f636:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    f638:	4b05      	ldr	r3, [pc, #20]	; (f650 <composite_device_init+0x24>)
    f63a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    f63c:	4b05      	ldr	r3, [pc, #20]	; (f654 <composite_device_init+0x28>)
    f63e:	4798      	blx	r3
    f640:	bd08      	pop	{r3, pc}
    f642:	bf00      	nop
    f644:	20000e74 	.word	0x20000e74
    f648:	0000f33d 	.word	0x0000f33d
    f64c:	0000e505 	.word	0x0000e505
    f650:	0000e9d9 	.word	0x0000e9d9
    f654:	0000e745 	.word	0x0000e745

0000f658 <composite_device_start>:
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}

void composite_device_start(void)
{
    f658:	b508      	push	{r3, lr}
	usbdc_start(multi_desc);
    f65a:	4803      	ldr	r0, [pc, #12]	; (f668 <composite_device_start+0x10>)
    f65c:	4b03      	ldr	r3, [pc, #12]	; (f66c <composite_device_start+0x14>)
    f65e:	4798      	blx	r3
	usbdc_attach();
    f660:	4b03      	ldr	r3, [pc, #12]	; (f670 <composite_device_start+0x18>)
    f662:	4798      	blx	r3
    f664:	bd08      	pop	{r3, pc}
    f666:	bf00      	nop
    f668:	200003c4 	.word	0x200003c4
    f66c:	0000f395 	.word	0x0000f395
    f670:	0000f3c9 	.word	0x0000f3c9

0000f674 <usb_init>:
		}
	}
}

void usb_init(void)
{
    f674:	b508      	push	{r3, lr}

	composite_device_init();
    f676:	4b01      	ldr	r3, [pc, #4]	; (f67c <usb_init+0x8>)
    f678:	4798      	blx	r3
    f67a:	bd08      	pop	{r3, pc}
    f67c:	0000f62d 	.word	0x0000f62d

0000f680 <__aeabi_drsub>:
    f680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    f684:	e002      	b.n	f68c <__adddf3>
    f686:	bf00      	nop

0000f688 <__aeabi_dsub>:
    f688:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000f68c <__adddf3>:
    f68c:	b530      	push	{r4, r5, lr}
    f68e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    f692:	ea4f 0543 	mov.w	r5, r3, lsl #1
    f696:	ea94 0f05 	teq	r4, r5
    f69a:	bf08      	it	eq
    f69c:	ea90 0f02 	teqeq	r0, r2
    f6a0:	bf1f      	itttt	ne
    f6a2:	ea54 0c00 	orrsne.w	ip, r4, r0
    f6a6:	ea55 0c02 	orrsne.w	ip, r5, r2
    f6aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    f6ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    f6b2:	f000 80e2 	beq.w	f87a <__adddf3+0x1ee>
    f6b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    f6ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    f6be:	bfb8      	it	lt
    f6c0:	426d      	neglt	r5, r5
    f6c2:	dd0c      	ble.n	f6de <__adddf3+0x52>
    f6c4:	442c      	add	r4, r5
    f6c6:	ea80 0202 	eor.w	r2, r0, r2
    f6ca:	ea81 0303 	eor.w	r3, r1, r3
    f6ce:	ea82 0000 	eor.w	r0, r2, r0
    f6d2:	ea83 0101 	eor.w	r1, r3, r1
    f6d6:	ea80 0202 	eor.w	r2, r0, r2
    f6da:	ea81 0303 	eor.w	r3, r1, r3
    f6de:	2d36      	cmp	r5, #54	; 0x36
    f6e0:	bf88      	it	hi
    f6e2:	bd30      	pophi	{r4, r5, pc}
    f6e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    f6e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    f6ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    f6f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    f6f4:	d002      	beq.n	f6fc <__adddf3+0x70>
    f6f6:	4240      	negs	r0, r0
    f6f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f6fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    f700:	ea4f 3303 	mov.w	r3, r3, lsl #12
    f704:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    f708:	d002      	beq.n	f710 <__adddf3+0x84>
    f70a:	4252      	negs	r2, r2
    f70c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    f710:	ea94 0f05 	teq	r4, r5
    f714:	f000 80a7 	beq.w	f866 <__adddf3+0x1da>
    f718:	f1a4 0401 	sub.w	r4, r4, #1
    f71c:	f1d5 0e20 	rsbs	lr, r5, #32
    f720:	db0d      	blt.n	f73e <__adddf3+0xb2>
    f722:	fa02 fc0e 	lsl.w	ip, r2, lr
    f726:	fa22 f205 	lsr.w	r2, r2, r5
    f72a:	1880      	adds	r0, r0, r2
    f72c:	f141 0100 	adc.w	r1, r1, #0
    f730:	fa03 f20e 	lsl.w	r2, r3, lr
    f734:	1880      	adds	r0, r0, r2
    f736:	fa43 f305 	asr.w	r3, r3, r5
    f73a:	4159      	adcs	r1, r3
    f73c:	e00e      	b.n	f75c <__adddf3+0xd0>
    f73e:	f1a5 0520 	sub.w	r5, r5, #32
    f742:	f10e 0e20 	add.w	lr, lr, #32
    f746:	2a01      	cmp	r2, #1
    f748:	fa03 fc0e 	lsl.w	ip, r3, lr
    f74c:	bf28      	it	cs
    f74e:	f04c 0c02 	orrcs.w	ip, ip, #2
    f752:	fa43 f305 	asr.w	r3, r3, r5
    f756:	18c0      	adds	r0, r0, r3
    f758:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    f75c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    f760:	d507      	bpl.n	f772 <__adddf3+0xe6>
    f762:	f04f 0e00 	mov.w	lr, #0
    f766:	f1dc 0c00 	rsbs	ip, ip, #0
    f76a:	eb7e 0000 	sbcs.w	r0, lr, r0
    f76e:	eb6e 0101 	sbc.w	r1, lr, r1
    f772:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    f776:	d31b      	bcc.n	f7b0 <__adddf3+0x124>
    f778:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    f77c:	d30c      	bcc.n	f798 <__adddf3+0x10c>
    f77e:	0849      	lsrs	r1, r1, #1
    f780:	ea5f 0030 	movs.w	r0, r0, rrx
    f784:	ea4f 0c3c 	mov.w	ip, ip, rrx
    f788:	f104 0401 	add.w	r4, r4, #1
    f78c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    f790:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    f794:	f080 809a 	bcs.w	f8cc <__adddf3+0x240>
    f798:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    f79c:	bf08      	it	eq
    f79e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    f7a2:	f150 0000 	adcs.w	r0, r0, #0
    f7a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    f7aa:	ea41 0105 	orr.w	r1, r1, r5
    f7ae:	bd30      	pop	{r4, r5, pc}
    f7b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    f7b4:	4140      	adcs	r0, r0
    f7b6:	eb41 0101 	adc.w	r1, r1, r1
    f7ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    f7be:	f1a4 0401 	sub.w	r4, r4, #1
    f7c2:	d1e9      	bne.n	f798 <__adddf3+0x10c>
    f7c4:	f091 0f00 	teq	r1, #0
    f7c8:	bf04      	itt	eq
    f7ca:	4601      	moveq	r1, r0
    f7cc:	2000      	moveq	r0, #0
    f7ce:	fab1 f381 	clz	r3, r1
    f7d2:	bf08      	it	eq
    f7d4:	3320      	addeq	r3, #32
    f7d6:	f1a3 030b 	sub.w	r3, r3, #11
    f7da:	f1b3 0220 	subs.w	r2, r3, #32
    f7de:	da0c      	bge.n	f7fa <__adddf3+0x16e>
    f7e0:	320c      	adds	r2, #12
    f7e2:	dd08      	ble.n	f7f6 <__adddf3+0x16a>
    f7e4:	f102 0c14 	add.w	ip, r2, #20
    f7e8:	f1c2 020c 	rsb	r2, r2, #12
    f7ec:	fa01 f00c 	lsl.w	r0, r1, ip
    f7f0:	fa21 f102 	lsr.w	r1, r1, r2
    f7f4:	e00c      	b.n	f810 <__adddf3+0x184>
    f7f6:	f102 0214 	add.w	r2, r2, #20
    f7fa:	bfd8      	it	le
    f7fc:	f1c2 0c20 	rsble	ip, r2, #32
    f800:	fa01 f102 	lsl.w	r1, r1, r2
    f804:	fa20 fc0c 	lsr.w	ip, r0, ip
    f808:	bfdc      	itt	le
    f80a:	ea41 010c 	orrle.w	r1, r1, ip
    f80e:	4090      	lslle	r0, r2
    f810:	1ae4      	subs	r4, r4, r3
    f812:	bfa2      	ittt	ge
    f814:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    f818:	4329      	orrge	r1, r5
    f81a:	bd30      	popge	{r4, r5, pc}
    f81c:	ea6f 0404 	mvn.w	r4, r4
    f820:	3c1f      	subs	r4, #31
    f822:	da1c      	bge.n	f85e <__adddf3+0x1d2>
    f824:	340c      	adds	r4, #12
    f826:	dc0e      	bgt.n	f846 <__adddf3+0x1ba>
    f828:	f104 0414 	add.w	r4, r4, #20
    f82c:	f1c4 0220 	rsb	r2, r4, #32
    f830:	fa20 f004 	lsr.w	r0, r0, r4
    f834:	fa01 f302 	lsl.w	r3, r1, r2
    f838:	ea40 0003 	orr.w	r0, r0, r3
    f83c:	fa21 f304 	lsr.w	r3, r1, r4
    f840:	ea45 0103 	orr.w	r1, r5, r3
    f844:	bd30      	pop	{r4, r5, pc}
    f846:	f1c4 040c 	rsb	r4, r4, #12
    f84a:	f1c4 0220 	rsb	r2, r4, #32
    f84e:	fa20 f002 	lsr.w	r0, r0, r2
    f852:	fa01 f304 	lsl.w	r3, r1, r4
    f856:	ea40 0003 	orr.w	r0, r0, r3
    f85a:	4629      	mov	r1, r5
    f85c:	bd30      	pop	{r4, r5, pc}
    f85e:	fa21 f004 	lsr.w	r0, r1, r4
    f862:	4629      	mov	r1, r5
    f864:	bd30      	pop	{r4, r5, pc}
    f866:	f094 0f00 	teq	r4, #0
    f86a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    f86e:	bf06      	itte	eq
    f870:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    f874:	3401      	addeq	r4, #1
    f876:	3d01      	subne	r5, #1
    f878:	e74e      	b.n	f718 <__adddf3+0x8c>
    f87a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    f87e:	bf18      	it	ne
    f880:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    f884:	d029      	beq.n	f8da <__adddf3+0x24e>
    f886:	ea94 0f05 	teq	r4, r5
    f88a:	bf08      	it	eq
    f88c:	ea90 0f02 	teqeq	r0, r2
    f890:	d005      	beq.n	f89e <__adddf3+0x212>
    f892:	ea54 0c00 	orrs.w	ip, r4, r0
    f896:	bf04      	itt	eq
    f898:	4619      	moveq	r1, r3
    f89a:	4610      	moveq	r0, r2
    f89c:	bd30      	pop	{r4, r5, pc}
    f89e:	ea91 0f03 	teq	r1, r3
    f8a2:	bf1e      	ittt	ne
    f8a4:	2100      	movne	r1, #0
    f8a6:	2000      	movne	r0, #0
    f8a8:	bd30      	popne	{r4, r5, pc}
    f8aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    f8ae:	d105      	bne.n	f8bc <__adddf3+0x230>
    f8b0:	0040      	lsls	r0, r0, #1
    f8b2:	4149      	adcs	r1, r1
    f8b4:	bf28      	it	cs
    f8b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    f8ba:	bd30      	pop	{r4, r5, pc}
    f8bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    f8c0:	bf3c      	itt	cc
    f8c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    f8c6:	bd30      	popcc	{r4, r5, pc}
    f8c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    f8cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    f8d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    f8d4:	f04f 0000 	mov.w	r0, #0
    f8d8:	bd30      	pop	{r4, r5, pc}
    f8da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    f8de:	bf1a      	itte	ne
    f8e0:	4619      	movne	r1, r3
    f8e2:	4610      	movne	r0, r2
    f8e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    f8e8:	bf1c      	itt	ne
    f8ea:	460b      	movne	r3, r1
    f8ec:	4602      	movne	r2, r0
    f8ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    f8f2:	bf06      	itte	eq
    f8f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    f8f8:	ea91 0f03 	teqeq	r1, r3
    f8fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    f900:	bd30      	pop	{r4, r5, pc}
    f902:	bf00      	nop

0000f904 <__aeabi_ui2d>:
    f904:	f090 0f00 	teq	r0, #0
    f908:	bf04      	itt	eq
    f90a:	2100      	moveq	r1, #0
    f90c:	4770      	bxeq	lr
    f90e:	b530      	push	{r4, r5, lr}
    f910:	f44f 6480 	mov.w	r4, #1024	; 0x400
    f914:	f104 0432 	add.w	r4, r4, #50	; 0x32
    f918:	f04f 0500 	mov.w	r5, #0
    f91c:	f04f 0100 	mov.w	r1, #0
    f920:	e750      	b.n	f7c4 <__adddf3+0x138>
    f922:	bf00      	nop

0000f924 <__aeabi_i2d>:
    f924:	f090 0f00 	teq	r0, #0
    f928:	bf04      	itt	eq
    f92a:	2100      	moveq	r1, #0
    f92c:	4770      	bxeq	lr
    f92e:	b530      	push	{r4, r5, lr}
    f930:	f44f 6480 	mov.w	r4, #1024	; 0x400
    f934:	f104 0432 	add.w	r4, r4, #50	; 0x32
    f938:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    f93c:	bf48      	it	mi
    f93e:	4240      	negmi	r0, r0
    f940:	f04f 0100 	mov.w	r1, #0
    f944:	e73e      	b.n	f7c4 <__adddf3+0x138>
    f946:	bf00      	nop

0000f948 <__aeabi_f2d>:
    f948:	0042      	lsls	r2, r0, #1
    f94a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    f94e:	ea4f 0131 	mov.w	r1, r1, rrx
    f952:	ea4f 7002 	mov.w	r0, r2, lsl #28
    f956:	bf1f      	itttt	ne
    f958:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    f95c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    f960:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    f964:	4770      	bxne	lr
    f966:	f092 0f00 	teq	r2, #0
    f96a:	bf14      	ite	ne
    f96c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    f970:	4770      	bxeq	lr
    f972:	b530      	push	{r4, r5, lr}
    f974:	f44f 7460 	mov.w	r4, #896	; 0x380
    f978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    f97c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f980:	e720      	b.n	f7c4 <__adddf3+0x138>
    f982:	bf00      	nop

0000f984 <__aeabi_ul2d>:
    f984:	ea50 0201 	orrs.w	r2, r0, r1
    f988:	bf08      	it	eq
    f98a:	4770      	bxeq	lr
    f98c:	b530      	push	{r4, r5, lr}
    f98e:	f04f 0500 	mov.w	r5, #0
    f992:	e00a      	b.n	f9aa <__aeabi_l2d+0x16>

0000f994 <__aeabi_l2d>:
    f994:	ea50 0201 	orrs.w	r2, r0, r1
    f998:	bf08      	it	eq
    f99a:	4770      	bxeq	lr
    f99c:	b530      	push	{r4, r5, lr}
    f99e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    f9a2:	d502      	bpl.n	f9aa <__aeabi_l2d+0x16>
    f9a4:	4240      	negs	r0, r0
    f9a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f9aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
    f9ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
    f9b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    f9b6:	f43f aedc 	beq.w	f772 <__adddf3+0xe6>
    f9ba:	f04f 0203 	mov.w	r2, #3
    f9be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    f9c2:	bf18      	it	ne
    f9c4:	3203      	addne	r2, #3
    f9c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    f9ca:	bf18      	it	ne
    f9cc:	3203      	addne	r2, #3
    f9ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    f9d2:	f1c2 0320 	rsb	r3, r2, #32
    f9d6:	fa00 fc03 	lsl.w	ip, r0, r3
    f9da:	fa20 f002 	lsr.w	r0, r0, r2
    f9de:	fa01 fe03 	lsl.w	lr, r1, r3
    f9e2:	ea40 000e 	orr.w	r0, r0, lr
    f9e6:	fa21 f102 	lsr.w	r1, r1, r2
    f9ea:	4414      	add	r4, r2
    f9ec:	e6c1      	b.n	f772 <__adddf3+0xe6>
    f9ee:	bf00      	nop

0000f9f0 <__aeabi_dmul>:
    f9f0:	b570      	push	{r4, r5, r6, lr}
    f9f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    f9f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    f9fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    f9fe:	bf1d      	ittte	ne
    fa00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    fa04:	ea94 0f0c 	teqne	r4, ip
    fa08:	ea95 0f0c 	teqne	r5, ip
    fa0c:	f000 f8de 	bleq	fbcc <__aeabi_dmul+0x1dc>
    fa10:	442c      	add	r4, r5
    fa12:	ea81 0603 	eor.w	r6, r1, r3
    fa16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    fa1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    fa1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    fa22:	bf18      	it	ne
    fa24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    fa28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    fa2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    fa30:	d038      	beq.n	faa4 <__aeabi_dmul+0xb4>
    fa32:	fba0 ce02 	umull	ip, lr, r0, r2
    fa36:	f04f 0500 	mov.w	r5, #0
    fa3a:	fbe1 e502 	umlal	lr, r5, r1, r2
    fa3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    fa42:	fbe0 e503 	umlal	lr, r5, r0, r3
    fa46:	f04f 0600 	mov.w	r6, #0
    fa4a:	fbe1 5603 	umlal	r5, r6, r1, r3
    fa4e:	f09c 0f00 	teq	ip, #0
    fa52:	bf18      	it	ne
    fa54:	f04e 0e01 	orrne.w	lr, lr, #1
    fa58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    fa5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    fa60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    fa64:	d204      	bcs.n	fa70 <__aeabi_dmul+0x80>
    fa66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    fa6a:	416d      	adcs	r5, r5
    fa6c:	eb46 0606 	adc.w	r6, r6, r6
    fa70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    fa74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    fa78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    fa7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    fa80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    fa84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    fa88:	bf88      	it	hi
    fa8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    fa8e:	d81e      	bhi.n	face <__aeabi_dmul+0xde>
    fa90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    fa94:	bf08      	it	eq
    fa96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    fa9a:	f150 0000 	adcs.w	r0, r0, #0
    fa9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    faa2:	bd70      	pop	{r4, r5, r6, pc}
    faa4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    faa8:	ea46 0101 	orr.w	r1, r6, r1
    faac:	ea40 0002 	orr.w	r0, r0, r2
    fab0:	ea81 0103 	eor.w	r1, r1, r3
    fab4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    fab8:	bfc2      	ittt	gt
    faba:	ebd4 050c 	rsbsgt	r5, r4, ip
    fabe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    fac2:	bd70      	popgt	{r4, r5, r6, pc}
    fac4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    fac8:	f04f 0e00 	mov.w	lr, #0
    facc:	3c01      	subs	r4, #1
    face:	f300 80ab 	bgt.w	fc28 <__aeabi_dmul+0x238>
    fad2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    fad6:	bfde      	ittt	le
    fad8:	2000      	movle	r0, #0
    fada:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    fade:	bd70      	pople	{r4, r5, r6, pc}
    fae0:	f1c4 0400 	rsb	r4, r4, #0
    fae4:	3c20      	subs	r4, #32
    fae6:	da35      	bge.n	fb54 <__aeabi_dmul+0x164>
    fae8:	340c      	adds	r4, #12
    faea:	dc1b      	bgt.n	fb24 <__aeabi_dmul+0x134>
    faec:	f104 0414 	add.w	r4, r4, #20
    faf0:	f1c4 0520 	rsb	r5, r4, #32
    faf4:	fa00 f305 	lsl.w	r3, r0, r5
    faf8:	fa20 f004 	lsr.w	r0, r0, r4
    fafc:	fa01 f205 	lsl.w	r2, r1, r5
    fb00:	ea40 0002 	orr.w	r0, r0, r2
    fb04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    fb08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    fb0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    fb10:	fa21 f604 	lsr.w	r6, r1, r4
    fb14:	eb42 0106 	adc.w	r1, r2, r6
    fb18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    fb1c:	bf08      	it	eq
    fb1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    fb22:	bd70      	pop	{r4, r5, r6, pc}
    fb24:	f1c4 040c 	rsb	r4, r4, #12
    fb28:	f1c4 0520 	rsb	r5, r4, #32
    fb2c:	fa00 f304 	lsl.w	r3, r0, r4
    fb30:	fa20 f005 	lsr.w	r0, r0, r5
    fb34:	fa01 f204 	lsl.w	r2, r1, r4
    fb38:	ea40 0002 	orr.w	r0, r0, r2
    fb3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fb40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    fb44:	f141 0100 	adc.w	r1, r1, #0
    fb48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    fb4c:	bf08      	it	eq
    fb4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    fb52:	bd70      	pop	{r4, r5, r6, pc}
    fb54:	f1c4 0520 	rsb	r5, r4, #32
    fb58:	fa00 f205 	lsl.w	r2, r0, r5
    fb5c:	ea4e 0e02 	orr.w	lr, lr, r2
    fb60:	fa20 f304 	lsr.w	r3, r0, r4
    fb64:	fa01 f205 	lsl.w	r2, r1, r5
    fb68:	ea43 0302 	orr.w	r3, r3, r2
    fb6c:	fa21 f004 	lsr.w	r0, r1, r4
    fb70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fb74:	fa21 f204 	lsr.w	r2, r1, r4
    fb78:	ea20 0002 	bic.w	r0, r0, r2
    fb7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    fb80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    fb84:	bf08      	it	eq
    fb86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    fb8a:	bd70      	pop	{r4, r5, r6, pc}
    fb8c:	f094 0f00 	teq	r4, #0
    fb90:	d10f      	bne.n	fbb2 <__aeabi_dmul+0x1c2>
    fb92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    fb96:	0040      	lsls	r0, r0, #1
    fb98:	eb41 0101 	adc.w	r1, r1, r1
    fb9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    fba0:	bf08      	it	eq
    fba2:	3c01      	subeq	r4, #1
    fba4:	d0f7      	beq.n	fb96 <__aeabi_dmul+0x1a6>
    fba6:	ea41 0106 	orr.w	r1, r1, r6
    fbaa:	f095 0f00 	teq	r5, #0
    fbae:	bf18      	it	ne
    fbb0:	4770      	bxne	lr
    fbb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    fbb6:	0052      	lsls	r2, r2, #1
    fbb8:	eb43 0303 	adc.w	r3, r3, r3
    fbbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    fbc0:	bf08      	it	eq
    fbc2:	3d01      	subeq	r5, #1
    fbc4:	d0f7      	beq.n	fbb6 <__aeabi_dmul+0x1c6>
    fbc6:	ea43 0306 	orr.w	r3, r3, r6
    fbca:	4770      	bx	lr
    fbcc:	ea94 0f0c 	teq	r4, ip
    fbd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    fbd4:	bf18      	it	ne
    fbd6:	ea95 0f0c 	teqne	r5, ip
    fbda:	d00c      	beq.n	fbf6 <__aeabi_dmul+0x206>
    fbdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    fbe0:	bf18      	it	ne
    fbe2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    fbe6:	d1d1      	bne.n	fb8c <__aeabi_dmul+0x19c>
    fbe8:	ea81 0103 	eor.w	r1, r1, r3
    fbec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fbf0:	f04f 0000 	mov.w	r0, #0
    fbf4:	bd70      	pop	{r4, r5, r6, pc}
    fbf6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    fbfa:	bf06      	itte	eq
    fbfc:	4610      	moveq	r0, r2
    fbfe:	4619      	moveq	r1, r3
    fc00:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    fc04:	d019      	beq.n	fc3a <__aeabi_dmul+0x24a>
    fc06:	ea94 0f0c 	teq	r4, ip
    fc0a:	d102      	bne.n	fc12 <__aeabi_dmul+0x222>
    fc0c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    fc10:	d113      	bne.n	fc3a <__aeabi_dmul+0x24a>
    fc12:	ea95 0f0c 	teq	r5, ip
    fc16:	d105      	bne.n	fc24 <__aeabi_dmul+0x234>
    fc18:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    fc1c:	bf1c      	itt	ne
    fc1e:	4610      	movne	r0, r2
    fc20:	4619      	movne	r1, r3
    fc22:	d10a      	bne.n	fc3a <__aeabi_dmul+0x24a>
    fc24:	ea81 0103 	eor.w	r1, r1, r3
    fc28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    fc2c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    fc30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    fc34:	f04f 0000 	mov.w	r0, #0
    fc38:	bd70      	pop	{r4, r5, r6, pc}
    fc3a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    fc3e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    fc42:	bd70      	pop	{r4, r5, r6, pc}

0000fc44 <__aeabi_ddiv>:
    fc44:	b570      	push	{r4, r5, r6, lr}
    fc46:	f04f 0cff 	mov.w	ip, #255	; 0xff
    fc4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    fc4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    fc52:	bf1d      	ittte	ne
    fc54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    fc58:	ea94 0f0c 	teqne	r4, ip
    fc5c:	ea95 0f0c 	teqne	r5, ip
    fc60:	f000 f8a7 	bleq	fdb2 <__aeabi_ddiv+0x16e>
    fc64:	eba4 0405 	sub.w	r4, r4, r5
    fc68:	ea81 0e03 	eor.w	lr, r1, r3
    fc6c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    fc70:	ea4f 3101 	mov.w	r1, r1, lsl #12
    fc74:	f000 8088 	beq.w	fd88 <__aeabi_ddiv+0x144>
    fc78:	ea4f 3303 	mov.w	r3, r3, lsl #12
    fc7c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    fc80:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    fc84:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    fc88:	ea4f 2202 	mov.w	r2, r2, lsl #8
    fc8c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    fc90:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    fc94:	ea4f 2600 	mov.w	r6, r0, lsl #8
    fc98:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    fc9c:	429d      	cmp	r5, r3
    fc9e:	bf08      	it	eq
    fca0:	4296      	cmpeq	r6, r2
    fca2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    fca6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    fcaa:	d202      	bcs.n	fcb2 <__aeabi_ddiv+0x6e>
    fcac:	085b      	lsrs	r3, r3, #1
    fcae:	ea4f 0232 	mov.w	r2, r2, rrx
    fcb2:	1ab6      	subs	r6, r6, r2
    fcb4:	eb65 0503 	sbc.w	r5, r5, r3
    fcb8:	085b      	lsrs	r3, r3, #1
    fcba:	ea4f 0232 	mov.w	r2, r2, rrx
    fcbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    fcc2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    fcc6:	ebb6 0e02 	subs.w	lr, r6, r2
    fcca:	eb75 0e03 	sbcs.w	lr, r5, r3
    fcce:	bf22      	ittt	cs
    fcd0:	1ab6      	subcs	r6, r6, r2
    fcd2:	4675      	movcs	r5, lr
    fcd4:	ea40 000c 	orrcs.w	r0, r0, ip
    fcd8:	085b      	lsrs	r3, r3, #1
    fcda:	ea4f 0232 	mov.w	r2, r2, rrx
    fcde:	ebb6 0e02 	subs.w	lr, r6, r2
    fce2:	eb75 0e03 	sbcs.w	lr, r5, r3
    fce6:	bf22      	ittt	cs
    fce8:	1ab6      	subcs	r6, r6, r2
    fcea:	4675      	movcs	r5, lr
    fcec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    fcf0:	085b      	lsrs	r3, r3, #1
    fcf2:	ea4f 0232 	mov.w	r2, r2, rrx
    fcf6:	ebb6 0e02 	subs.w	lr, r6, r2
    fcfa:	eb75 0e03 	sbcs.w	lr, r5, r3
    fcfe:	bf22      	ittt	cs
    fd00:	1ab6      	subcs	r6, r6, r2
    fd02:	4675      	movcs	r5, lr
    fd04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    fd08:	085b      	lsrs	r3, r3, #1
    fd0a:	ea4f 0232 	mov.w	r2, r2, rrx
    fd0e:	ebb6 0e02 	subs.w	lr, r6, r2
    fd12:	eb75 0e03 	sbcs.w	lr, r5, r3
    fd16:	bf22      	ittt	cs
    fd18:	1ab6      	subcs	r6, r6, r2
    fd1a:	4675      	movcs	r5, lr
    fd1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    fd20:	ea55 0e06 	orrs.w	lr, r5, r6
    fd24:	d018      	beq.n	fd58 <__aeabi_ddiv+0x114>
    fd26:	ea4f 1505 	mov.w	r5, r5, lsl #4
    fd2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    fd2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    fd32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    fd36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    fd3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    fd3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    fd42:	d1c0      	bne.n	fcc6 <__aeabi_ddiv+0x82>
    fd44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    fd48:	d10b      	bne.n	fd62 <__aeabi_ddiv+0x11e>
    fd4a:	ea41 0100 	orr.w	r1, r1, r0
    fd4e:	f04f 0000 	mov.w	r0, #0
    fd52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    fd56:	e7b6      	b.n	fcc6 <__aeabi_ddiv+0x82>
    fd58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    fd5c:	bf04      	itt	eq
    fd5e:	4301      	orreq	r1, r0
    fd60:	2000      	moveq	r0, #0
    fd62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    fd66:	bf88      	it	hi
    fd68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    fd6c:	f63f aeaf 	bhi.w	face <__aeabi_dmul+0xde>
    fd70:	ebb5 0c03 	subs.w	ip, r5, r3
    fd74:	bf04      	itt	eq
    fd76:	ebb6 0c02 	subseq.w	ip, r6, r2
    fd7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    fd7e:	f150 0000 	adcs.w	r0, r0, #0
    fd82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    fd86:	bd70      	pop	{r4, r5, r6, pc}
    fd88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    fd8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    fd90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    fd94:	bfc2      	ittt	gt
    fd96:	ebd4 050c 	rsbsgt	r5, r4, ip
    fd9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    fd9e:	bd70      	popgt	{r4, r5, r6, pc}
    fda0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    fda4:	f04f 0e00 	mov.w	lr, #0
    fda8:	3c01      	subs	r4, #1
    fdaa:	e690      	b.n	face <__aeabi_dmul+0xde>
    fdac:	ea45 0e06 	orr.w	lr, r5, r6
    fdb0:	e68d      	b.n	face <__aeabi_dmul+0xde>
    fdb2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    fdb6:	ea94 0f0c 	teq	r4, ip
    fdba:	bf08      	it	eq
    fdbc:	ea95 0f0c 	teqeq	r5, ip
    fdc0:	f43f af3b 	beq.w	fc3a <__aeabi_dmul+0x24a>
    fdc4:	ea94 0f0c 	teq	r4, ip
    fdc8:	d10a      	bne.n	fde0 <__aeabi_ddiv+0x19c>
    fdca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    fdce:	f47f af34 	bne.w	fc3a <__aeabi_dmul+0x24a>
    fdd2:	ea95 0f0c 	teq	r5, ip
    fdd6:	f47f af25 	bne.w	fc24 <__aeabi_dmul+0x234>
    fdda:	4610      	mov	r0, r2
    fddc:	4619      	mov	r1, r3
    fdde:	e72c      	b.n	fc3a <__aeabi_dmul+0x24a>
    fde0:	ea95 0f0c 	teq	r5, ip
    fde4:	d106      	bne.n	fdf4 <__aeabi_ddiv+0x1b0>
    fde6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    fdea:	f43f aefd 	beq.w	fbe8 <__aeabi_dmul+0x1f8>
    fdee:	4610      	mov	r0, r2
    fdf0:	4619      	mov	r1, r3
    fdf2:	e722      	b.n	fc3a <__aeabi_dmul+0x24a>
    fdf4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    fdf8:	bf18      	it	ne
    fdfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    fdfe:	f47f aec5 	bne.w	fb8c <__aeabi_dmul+0x19c>
    fe02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    fe06:	f47f af0d 	bne.w	fc24 <__aeabi_dmul+0x234>
    fe0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    fe0e:	f47f aeeb 	bne.w	fbe8 <__aeabi_dmul+0x1f8>
    fe12:	e712      	b.n	fc3a <__aeabi_dmul+0x24a>

0000fe14 <__aeabi_d2uiz>:
    fe14:	004a      	lsls	r2, r1, #1
    fe16:	d211      	bcs.n	fe3c <__aeabi_d2uiz+0x28>
    fe18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    fe1c:	d211      	bcs.n	fe42 <__aeabi_d2uiz+0x2e>
    fe1e:	d50d      	bpl.n	fe3c <__aeabi_d2uiz+0x28>
    fe20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    fe24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    fe28:	d40e      	bmi.n	fe48 <__aeabi_d2uiz+0x34>
    fe2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    fe2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fe32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    fe36:	fa23 f002 	lsr.w	r0, r3, r2
    fe3a:	4770      	bx	lr
    fe3c:	f04f 0000 	mov.w	r0, #0
    fe40:	4770      	bx	lr
    fe42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    fe46:	d102      	bne.n	fe4e <__aeabi_d2uiz+0x3a>
    fe48:	f04f 30ff 	mov.w	r0, #4294967295
    fe4c:	4770      	bx	lr
    fe4e:	f04f 0000 	mov.w	r0, #0
    fe52:	4770      	bx	lr

0000fe54 <__libc_init_array>:
    fe54:	b570      	push	{r4, r5, r6, lr}
    fe56:	4e0d      	ldr	r6, [pc, #52]	; (fe8c <__libc_init_array+0x38>)
    fe58:	4c0d      	ldr	r4, [pc, #52]	; (fe90 <__libc_init_array+0x3c>)
    fe5a:	1ba4      	subs	r4, r4, r6
    fe5c:	10a4      	asrs	r4, r4, #2
    fe5e:	2500      	movs	r5, #0
    fe60:	42a5      	cmp	r5, r4
    fe62:	d109      	bne.n	fe78 <__libc_init_array+0x24>
    fe64:	4e0b      	ldr	r6, [pc, #44]	; (fe94 <__libc_init_array+0x40>)
    fe66:	4c0c      	ldr	r4, [pc, #48]	; (fe98 <__libc_init_array+0x44>)
    fe68:	f001 ffe0 	bl	11e2c <_init>
    fe6c:	1ba4      	subs	r4, r4, r6
    fe6e:	10a4      	asrs	r4, r4, #2
    fe70:	2500      	movs	r5, #0
    fe72:	42a5      	cmp	r5, r4
    fe74:	d105      	bne.n	fe82 <__libc_init_array+0x2e>
    fe76:	bd70      	pop	{r4, r5, r6, pc}
    fe78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    fe7c:	4798      	blx	r3
    fe7e:	3501      	adds	r5, #1
    fe80:	e7ee      	b.n	fe60 <__libc_init_array+0xc>
    fe82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    fe86:	4798      	blx	r3
    fe88:	3501      	adds	r5, #1
    fe8a:	e7f2      	b.n	fe72 <__libc_init_array+0x1e>
    fe8c:	00011e38 	.word	0x00011e38
    fe90:	00011e38 	.word	0x00011e38
    fe94:	00011e38 	.word	0x00011e38
    fe98:	00011e3c 	.word	0x00011e3c

0000fe9c <malloc>:
    fe9c:	4b02      	ldr	r3, [pc, #8]	; (fea8 <malloc+0xc>)
    fe9e:	4601      	mov	r1, r0
    fea0:	6818      	ldr	r0, [r3, #0]
    fea2:	f000 b865 	b.w	ff70 <_malloc_r>
    fea6:	bf00      	nop
    fea8:	20000558 	.word	0x20000558

0000feac <memcpy>:
    feac:	b510      	push	{r4, lr}
    feae:	1e43      	subs	r3, r0, #1
    feb0:	440a      	add	r2, r1
    feb2:	4291      	cmp	r1, r2
    feb4:	d100      	bne.n	feb8 <memcpy+0xc>
    feb6:	bd10      	pop	{r4, pc}
    feb8:	f811 4b01 	ldrb.w	r4, [r1], #1
    febc:	f803 4f01 	strb.w	r4, [r3, #1]!
    fec0:	e7f7      	b.n	feb2 <memcpy+0x6>

0000fec2 <memset>:
    fec2:	4402      	add	r2, r0
    fec4:	4603      	mov	r3, r0
    fec6:	4293      	cmp	r3, r2
    fec8:	d100      	bne.n	fecc <memset+0xa>
    feca:	4770      	bx	lr
    fecc:	f803 1b01 	strb.w	r1, [r3], #1
    fed0:	e7f9      	b.n	fec6 <memset+0x4>
	...

0000fed4 <_free_r>:
    fed4:	b538      	push	{r3, r4, r5, lr}
    fed6:	4605      	mov	r5, r0
    fed8:	2900      	cmp	r1, #0
    feda:	d045      	beq.n	ff68 <_free_r+0x94>
    fedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    fee0:	1f0c      	subs	r4, r1, #4
    fee2:	2b00      	cmp	r3, #0
    fee4:	bfb8      	it	lt
    fee6:	18e4      	addlt	r4, r4, r3
    fee8:	f000 fce8 	bl	108bc <__malloc_lock>
    feec:	4a1f      	ldr	r2, [pc, #124]	; (ff6c <_free_r+0x98>)
    feee:	6813      	ldr	r3, [r2, #0]
    fef0:	4610      	mov	r0, r2
    fef2:	b933      	cbnz	r3, ff02 <_free_r+0x2e>
    fef4:	6063      	str	r3, [r4, #4]
    fef6:	6014      	str	r4, [r2, #0]
    fef8:	4628      	mov	r0, r5
    fefa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fefe:	f000 bcde 	b.w	108be <__malloc_unlock>
    ff02:	42a3      	cmp	r3, r4
    ff04:	d90c      	bls.n	ff20 <_free_r+0x4c>
    ff06:	6821      	ldr	r1, [r4, #0]
    ff08:	1862      	adds	r2, r4, r1
    ff0a:	4293      	cmp	r3, r2
    ff0c:	bf04      	itt	eq
    ff0e:	681a      	ldreq	r2, [r3, #0]
    ff10:	685b      	ldreq	r3, [r3, #4]
    ff12:	6063      	str	r3, [r4, #4]
    ff14:	bf04      	itt	eq
    ff16:	1852      	addeq	r2, r2, r1
    ff18:	6022      	streq	r2, [r4, #0]
    ff1a:	6004      	str	r4, [r0, #0]
    ff1c:	e7ec      	b.n	fef8 <_free_r+0x24>
    ff1e:	4613      	mov	r3, r2
    ff20:	685a      	ldr	r2, [r3, #4]
    ff22:	b10a      	cbz	r2, ff28 <_free_r+0x54>
    ff24:	42a2      	cmp	r2, r4
    ff26:	d9fa      	bls.n	ff1e <_free_r+0x4a>
    ff28:	6819      	ldr	r1, [r3, #0]
    ff2a:	1858      	adds	r0, r3, r1
    ff2c:	42a0      	cmp	r0, r4
    ff2e:	d10b      	bne.n	ff48 <_free_r+0x74>
    ff30:	6820      	ldr	r0, [r4, #0]
    ff32:	4401      	add	r1, r0
    ff34:	1858      	adds	r0, r3, r1
    ff36:	4282      	cmp	r2, r0
    ff38:	6019      	str	r1, [r3, #0]
    ff3a:	d1dd      	bne.n	fef8 <_free_r+0x24>
    ff3c:	6810      	ldr	r0, [r2, #0]
    ff3e:	6852      	ldr	r2, [r2, #4]
    ff40:	605a      	str	r2, [r3, #4]
    ff42:	4401      	add	r1, r0
    ff44:	6019      	str	r1, [r3, #0]
    ff46:	e7d7      	b.n	fef8 <_free_r+0x24>
    ff48:	d902      	bls.n	ff50 <_free_r+0x7c>
    ff4a:	230c      	movs	r3, #12
    ff4c:	602b      	str	r3, [r5, #0]
    ff4e:	e7d3      	b.n	fef8 <_free_r+0x24>
    ff50:	6820      	ldr	r0, [r4, #0]
    ff52:	1821      	adds	r1, r4, r0
    ff54:	428a      	cmp	r2, r1
    ff56:	bf04      	itt	eq
    ff58:	6811      	ldreq	r1, [r2, #0]
    ff5a:	6852      	ldreq	r2, [r2, #4]
    ff5c:	6062      	str	r2, [r4, #4]
    ff5e:	bf04      	itt	eq
    ff60:	1809      	addeq	r1, r1, r0
    ff62:	6021      	streq	r1, [r4, #0]
    ff64:	605c      	str	r4, [r3, #4]
    ff66:	e7c7      	b.n	fef8 <_free_r+0x24>
    ff68:	bd38      	pop	{r3, r4, r5, pc}
    ff6a:	bf00      	nop
    ff6c:	20000eb4 	.word	0x20000eb4

0000ff70 <_malloc_r>:
    ff70:	b570      	push	{r4, r5, r6, lr}
    ff72:	1ccd      	adds	r5, r1, #3
    ff74:	f025 0503 	bic.w	r5, r5, #3
    ff78:	3508      	adds	r5, #8
    ff7a:	2d0c      	cmp	r5, #12
    ff7c:	bf38      	it	cc
    ff7e:	250c      	movcc	r5, #12
    ff80:	2d00      	cmp	r5, #0
    ff82:	4606      	mov	r6, r0
    ff84:	db01      	blt.n	ff8a <_malloc_r+0x1a>
    ff86:	42a9      	cmp	r1, r5
    ff88:	d903      	bls.n	ff92 <_malloc_r+0x22>
    ff8a:	230c      	movs	r3, #12
    ff8c:	6033      	str	r3, [r6, #0]
    ff8e:	2000      	movs	r0, #0
    ff90:	bd70      	pop	{r4, r5, r6, pc}
    ff92:	f000 fc93 	bl	108bc <__malloc_lock>
    ff96:	4a23      	ldr	r2, [pc, #140]	; (10024 <STACK_SIZE+0x24>)
    ff98:	6814      	ldr	r4, [r2, #0]
    ff9a:	4621      	mov	r1, r4
    ff9c:	b991      	cbnz	r1, ffc4 <_malloc_r+0x54>
    ff9e:	4c22      	ldr	r4, [pc, #136]	; (10028 <STACK_SIZE+0x28>)
    ffa0:	6823      	ldr	r3, [r4, #0]
    ffa2:	b91b      	cbnz	r3, ffac <_malloc_r+0x3c>
    ffa4:	4630      	mov	r0, r6
    ffa6:	f000 f8f7 	bl	10198 <_sbrk_r>
    ffaa:	6020      	str	r0, [r4, #0]
    ffac:	4629      	mov	r1, r5
    ffae:	4630      	mov	r0, r6
    ffb0:	f000 f8f2 	bl	10198 <_sbrk_r>
    ffb4:	1c43      	adds	r3, r0, #1
    ffb6:	d126      	bne.n	10006 <STACK_SIZE+0x6>
    ffb8:	230c      	movs	r3, #12
    ffba:	6033      	str	r3, [r6, #0]
    ffbc:	4630      	mov	r0, r6
    ffbe:	f000 fc7e 	bl	108be <__malloc_unlock>
    ffc2:	e7e4      	b.n	ff8e <_malloc_r+0x1e>
    ffc4:	680b      	ldr	r3, [r1, #0]
    ffc6:	1b5b      	subs	r3, r3, r5
    ffc8:	d41a      	bmi.n	10000 <STACK_SIZE>
    ffca:	2b0b      	cmp	r3, #11
    ffcc:	d90f      	bls.n	ffee <_malloc_r+0x7e>
    ffce:	600b      	str	r3, [r1, #0]
    ffd0:	50cd      	str	r5, [r1, r3]
    ffd2:	18cc      	adds	r4, r1, r3
    ffd4:	4630      	mov	r0, r6
    ffd6:	f000 fc72 	bl	108be <__malloc_unlock>
    ffda:	f104 000b 	add.w	r0, r4, #11
    ffde:	1d23      	adds	r3, r4, #4
    ffe0:	f020 0007 	bic.w	r0, r0, #7
    ffe4:	1ac3      	subs	r3, r0, r3
    ffe6:	d01b      	beq.n	10020 <STACK_SIZE+0x20>
    ffe8:	425a      	negs	r2, r3
    ffea:	50e2      	str	r2, [r4, r3]
    ffec:	bd70      	pop	{r4, r5, r6, pc}
    ffee:	428c      	cmp	r4, r1
    fff0:	bf0d      	iteet	eq
    fff2:	6863      	ldreq	r3, [r4, #4]
    fff4:	684b      	ldrne	r3, [r1, #4]
    fff6:	6063      	strne	r3, [r4, #4]
    fff8:	6013      	streq	r3, [r2, #0]
    fffa:	bf18      	it	ne
    fffc:	460c      	movne	r4, r1
    fffe:	e7e9      	b.n	ffd4 <_malloc_r+0x64>
   10000:	460c      	mov	r4, r1
   10002:	6849      	ldr	r1, [r1, #4]
   10004:	e7ca      	b.n	ff9c <_malloc_r+0x2c>
   10006:	1cc4      	adds	r4, r0, #3
   10008:	f024 0403 	bic.w	r4, r4, #3
   1000c:	42a0      	cmp	r0, r4
   1000e:	d005      	beq.n	1001c <STACK_SIZE+0x1c>
   10010:	1a21      	subs	r1, r4, r0
   10012:	4630      	mov	r0, r6
   10014:	f000 f8c0 	bl	10198 <_sbrk_r>
   10018:	3001      	adds	r0, #1
   1001a:	d0cd      	beq.n	ffb8 <_malloc_r+0x48>
   1001c:	6025      	str	r5, [r4, #0]
   1001e:	e7d9      	b.n	ffd4 <_malloc_r+0x64>
   10020:	bd70      	pop	{r4, r5, r6, pc}
   10022:	bf00      	nop
   10024:	20000eb4 	.word	0x20000eb4
   10028:	20000eb8 	.word	0x20000eb8

0001002c <iprintf>:
   1002c:	b40f      	push	{r0, r1, r2, r3}
   1002e:	4b0a      	ldr	r3, [pc, #40]	; (10058 <iprintf+0x2c>)
   10030:	b513      	push	{r0, r1, r4, lr}
   10032:	681c      	ldr	r4, [r3, #0]
   10034:	b124      	cbz	r4, 10040 <iprintf+0x14>
   10036:	69a3      	ldr	r3, [r4, #24]
   10038:	b913      	cbnz	r3, 10040 <iprintf+0x14>
   1003a:	4620      	mov	r0, r4
   1003c:	f000 fb50 	bl	106e0 <__sinit>
   10040:	ab05      	add	r3, sp, #20
   10042:	9a04      	ldr	r2, [sp, #16]
   10044:	68a1      	ldr	r1, [r4, #8]
   10046:	9301      	str	r3, [sp, #4]
   10048:	4620      	mov	r0, r4
   1004a:	f000 fdb1 	bl	10bb0 <_vfiprintf_r>
   1004e:	b002      	add	sp, #8
   10050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10054:	b004      	add	sp, #16
   10056:	4770      	bx	lr
   10058:	20000558 	.word	0x20000558

0001005c <_puts_r>:
   1005c:	b570      	push	{r4, r5, r6, lr}
   1005e:	460e      	mov	r6, r1
   10060:	4605      	mov	r5, r0
   10062:	b118      	cbz	r0, 1006c <_puts_r+0x10>
   10064:	6983      	ldr	r3, [r0, #24]
   10066:	b90b      	cbnz	r3, 1006c <_puts_r+0x10>
   10068:	f000 fb3a 	bl	106e0 <__sinit>
   1006c:	69ab      	ldr	r3, [r5, #24]
   1006e:	68ac      	ldr	r4, [r5, #8]
   10070:	b913      	cbnz	r3, 10078 <_puts_r+0x1c>
   10072:	4628      	mov	r0, r5
   10074:	f000 fb34 	bl	106e0 <__sinit>
   10078:	4b23      	ldr	r3, [pc, #140]	; (10108 <_puts_r+0xac>)
   1007a:	429c      	cmp	r4, r3
   1007c:	d117      	bne.n	100ae <_puts_r+0x52>
   1007e:	686c      	ldr	r4, [r5, #4]
   10080:	89a3      	ldrh	r3, [r4, #12]
   10082:	071b      	lsls	r3, r3, #28
   10084:	d51d      	bpl.n	100c2 <_puts_r+0x66>
   10086:	6923      	ldr	r3, [r4, #16]
   10088:	b1db      	cbz	r3, 100c2 <_puts_r+0x66>
   1008a:	3e01      	subs	r6, #1
   1008c:	68a3      	ldr	r3, [r4, #8]
   1008e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   10092:	3b01      	subs	r3, #1
   10094:	60a3      	str	r3, [r4, #8]
   10096:	b9e9      	cbnz	r1, 100d4 <_puts_r+0x78>
   10098:	2b00      	cmp	r3, #0
   1009a:	da2e      	bge.n	100fa <_puts_r+0x9e>
   1009c:	4622      	mov	r2, r4
   1009e:	210a      	movs	r1, #10
   100a0:	4628      	mov	r0, r5
   100a2:	f000 f96b 	bl	1037c <__swbuf_r>
   100a6:	3001      	adds	r0, #1
   100a8:	d011      	beq.n	100ce <_puts_r+0x72>
   100aa:	200a      	movs	r0, #10
   100ac:	bd70      	pop	{r4, r5, r6, pc}
   100ae:	4b17      	ldr	r3, [pc, #92]	; (1010c <_puts_r+0xb0>)
   100b0:	429c      	cmp	r4, r3
   100b2:	d101      	bne.n	100b8 <_puts_r+0x5c>
   100b4:	68ac      	ldr	r4, [r5, #8]
   100b6:	e7e3      	b.n	10080 <_puts_r+0x24>
   100b8:	4b15      	ldr	r3, [pc, #84]	; (10110 <_puts_r+0xb4>)
   100ba:	429c      	cmp	r4, r3
   100bc:	bf08      	it	eq
   100be:	68ec      	ldreq	r4, [r5, #12]
   100c0:	e7de      	b.n	10080 <_puts_r+0x24>
   100c2:	4621      	mov	r1, r4
   100c4:	4628      	mov	r0, r5
   100c6:	f000 f9ab 	bl	10420 <__swsetup_r>
   100ca:	2800      	cmp	r0, #0
   100cc:	d0dd      	beq.n	1008a <_puts_r+0x2e>
   100ce:	f04f 30ff 	mov.w	r0, #4294967295
   100d2:	bd70      	pop	{r4, r5, r6, pc}
   100d4:	2b00      	cmp	r3, #0
   100d6:	da04      	bge.n	100e2 <_puts_r+0x86>
   100d8:	69a2      	ldr	r2, [r4, #24]
   100da:	4293      	cmp	r3, r2
   100dc:	db06      	blt.n	100ec <_puts_r+0x90>
   100de:	290a      	cmp	r1, #10
   100e0:	d004      	beq.n	100ec <_puts_r+0x90>
   100e2:	6823      	ldr	r3, [r4, #0]
   100e4:	1c5a      	adds	r2, r3, #1
   100e6:	6022      	str	r2, [r4, #0]
   100e8:	7019      	strb	r1, [r3, #0]
   100ea:	e7cf      	b.n	1008c <_puts_r+0x30>
   100ec:	4622      	mov	r2, r4
   100ee:	4628      	mov	r0, r5
   100f0:	f000 f944 	bl	1037c <__swbuf_r>
   100f4:	3001      	adds	r0, #1
   100f6:	d1c9      	bne.n	1008c <_puts_r+0x30>
   100f8:	e7e9      	b.n	100ce <_puts_r+0x72>
   100fa:	6823      	ldr	r3, [r4, #0]
   100fc:	200a      	movs	r0, #10
   100fe:	1c5a      	adds	r2, r3, #1
   10100:	6022      	str	r2, [r4, #0]
   10102:	7018      	strb	r0, [r3, #0]
   10104:	bd70      	pop	{r4, r5, r6, pc}
   10106:	bf00      	nop
   10108:	00011db8 	.word	0x00011db8
   1010c:	00011dd8 	.word	0x00011dd8
   10110:	00011d98 	.word	0x00011d98

00010114 <puts>:
   10114:	4b02      	ldr	r3, [pc, #8]	; (10120 <puts+0xc>)
   10116:	4601      	mov	r1, r0
   10118:	6818      	ldr	r0, [r3, #0]
   1011a:	f7ff bf9f 	b.w	1005c <_puts_r>
   1011e:	bf00      	nop
   10120:	20000558 	.word	0x20000558

00010124 <rand>:
   10124:	4b19      	ldr	r3, [pc, #100]	; (1018c <rand+0x68>)
   10126:	b510      	push	{r4, lr}
   10128:	681c      	ldr	r4, [r3, #0]
   1012a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1012c:	b9d3      	cbnz	r3, 10164 <rand+0x40>
   1012e:	2018      	movs	r0, #24
   10130:	f7ff feb4 	bl	fe9c <malloc>
   10134:	f243 330e 	movw	r3, #13070	; 0x330e
   10138:	63a0      	str	r0, [r4, #56]	; 0x38
   1013a:	8003      	strh	r3, [r0, #0]
   1013c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   10140:	8043      	strh	r3, [r0, #2]
   10142:	f241 2334 	movw	r3, #4660	; 0x1234
   10146:	8083      	strh	r3, [r0, #4]
   10148:	f24e 636d 	movw	r3, #58989	; 0xe66d
   1014c:	80c3      	strh	r3, [r0, #6]
   1014e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   10152:	8103      	strh	r3, [r0, #8]
   10154:	2305      	movs	r3, #5
   10156:	8143      	strh	r3, [r0, #10]
   10158:	230b      	movs	r3, #11
   1015a:	8183      	strh	r3, [r0, #12]
   1015c:	2201      	movs	r2, #1
   1015e:	2300      	movs	r3, #0
   10160:	e9c0 2304 	strd	r2, r3, [r0, #16]
   10164:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   10166:	480a      	ldr	r0, [pc, #40]	; (10190 <rand+0x6c>)
   10168:	690a      	ldr	r2, [r1, #16]
   1016a:	694b      	ldr	r3, [r1, #20]
   1016c:	4c09      	ldr	r4, [pc, #36]	; (10194 <rand+0x70>)
   1016e:	4350      	muls	r0, r2
   10170:	fb04 0003 	mla	r0, r4, r3, r0
   10174:	fba2 2304 	umull	r2, r3, r2, r4
   10178:	3201      	adds	r2, #1
   1017a:	4403      	add	r3, r0
   1017c:	f143 0300 	adc.w	r3, r3, #0
   10180:	e9c1 2304 	strd	r2, r3, [r1, #16]
   10184:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   10188:	bd10      	pop	{r4, pc}
   1018a:	bf00      	nop
   1018c:	20000558 	.word	0x20000558
   10190:	5851f42d 	.word	0x5851f42d
   10194:	4c957f2d 	.word	0x4c957f2d

00010198 <_sbrk_r>:
   10198:	b538      	push	{r3, r4, r5, lr}
   1019a:	4c06      	ldr	r4, [pc, #24]	; (101b4 <_sbrk_r+0x1c>)
   1019c:	2300      	movs	r3, #0
   1019e:	4605      	mov	r5, r0
   101a0:	4608      	mov	r0, r1
   101a2:	6023      	str	r3, [r4, #0]
   101a4:	f7f9 ff0e 	bl	9fc4 <_sbrk>
   101a8:	1c43      	adds	r3, r0, #1
   101aa:	d102      	bne.n	101b2 <_sbrk_r+0x1a>
   101ac:	6823      	ldr	r3, [r4, #0]
   101ae:	b103      	cbz	r3, 101b2 <_sbrk_r+0x1a>
   101b0:	602b      	str	r3, [r5, #0]
   101b2:	bd38      	pop	{r3, r4, r5, pc}
   101b4:	20007d50 	.word	0x20007d50

000101b8 <setbuf>:
   101b8:	2900      	cmp	r1, #0
   101ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   101be:	bf0c      	ite	eq
   101c0:	2202      	moveq	r2, #2
   101c2:	2200      	movne	r2, #0
   101c4:	f000 b800 	b.w	101c8 <setvbuf>

000101c8 <setvbuf>:
   101c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   101cc:	461d      	mov	r5, r3
   101ce:	4b51      	ldr	r3, [pc, #324]	; (10314 <setvbuf+0x14c>)
   101d0:	681e      	ldr	r6, [r3, #0]
   101d2:	4604      	mov	r4, r0
   101d4:	460f      	mov	r7, r1
   101d6:	4690      	mov	r8, r2
   101d8:	b126      	cbz	r6, 101e4 <setvbuf+0x1c>
   101da:	69b3      	ldr	r3, [r6, #24]
   101dc:	b913      	cbnz	r3, 101e4 <setvbuf+0x1c>
   101de:	4630      	mov	r0, r6
   101e0:	f000 fa7e 	bl	106e0 <__sinit>
   101e4:	4b4c      	ldr	r3, [pc, #304]	; (10318 <setvbuf+0x150>)
   101e6:	429c      	cmp	r4, r3
   101e8:	d152      	bne.n	10290 <setvbuf+0xc8>
   101ea:	6874      	ldr	r4, [r6, #4]
   101ec:	f1b8 0f02 	cmp.w	r8, #2
   101f0:	d006      	beq.n	10200 <setvbuf+0x38>
   101f2:	f1b8 0f01 	cmp.w	r8, #1
   101f6:	f200 8089 	bhi.w	1030c <setvbuf+0x144>
   101fa:	2d00      	cmp	r5, #0
   101fc:	f2c0 8086 	blt.w	1030c <setvbuf+0x144>
   10200:	4621      	mov	r1, r4
   10202:	4630      	mov	r0, r6
   10204:	f000 fa02 	bl	1060c <_fflush_r>
   10208:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1020a:	b141      	cbz	r1, 1021e <setvbuf+0x56>
   1020c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   10210:	4299      	cmp	r1, r3
   10212:	d002      	beq.n	1021a <setvbuf+0x52>
   10214:	4630      	mov	r0, r6
   10216:	f7ff fe5d 	bl	fed4 <_free_r>
   1021a:	2300      	movs	r3, #0
   1021c:	6363      	str	r3, [r4, #52]	; 0x34
   1021e:	2300      	movs	r3, #0
   10220:	61a3      	str	r3, [r4, #24]
   10222:	6063      	str	r3, [r4, #4]
   10224:	89a3      	ldrh	r3, [r4, #12]
   10226:	061b      	lsls	r3, r3, #24
   10228:	d503      	bpl.n	10232 <setvbuf+0x6a>
   1022a:	6921      	ldr	r1, [r4, #16]
   1022c:	4630      	mov	r0, r6
   1022e:	f7ff fe51 	bl	fed4 <_free_r>
   10232:	89a3      	ldrh	r3, [r4, #12]
   10234:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   10238:	f023 0303 	bic.w	r3, r3, #3
   1023c:	f1b8 0f02 	cmp.w	r8, #2
   10240:	81a3      	strh	r3, [r4, #12]
   10242:	d05d      	beq.n	10300 <setvbuf+0x138>
   10244:	ab01      	add	r3, sp, #4
   10246:	466a      	mov	r2, sp
   10248:	4621      	mov	r1, r4
   1024a:	4630      	mov	r0, r6
   1024c:	f000 fad2 	bl	107f4 <__swhatbuf_r>
   10250:	89a3      	ldrh	r3, [r4, #12]
   10252:	4318      	orrs	r0, r3
   10254:	81a0      	strh	r0, [r4, #12]
   10256:	bb2d      	cbnz	r5, 102a4 <setvbuf+0xdc>
   10258:	9d00      	ldr	r5, [sp, #0]
   1025a:	4628      	mov	r0, r5
   1025c:	f7ff fe1e 	bl	fe9c <malloc>
   10260:	4607      	mov	r7, r0
   10262:	2800      	cmp	r0, #0
   10264:	d14e      	bne.n	10304 <setvbuf+0x13c>
   10266:	f8dd 9000 	ldr.w	r9, [sp]
   1026a:	45a9      	cmp	r9, r5
   1026c:	d13c      	bne.n	102e8 <setvbuf+0x120>
   1026e:	f04f 30ff 	mov.w	r0, #4294967295
   10272:	89a3      	ldrh	r3, [r4, #12]
   10274:	f043 0302 	orr.w	r3, r3, #2
   10278:	81a3      	strh	r3, [r4, #12]
   1027a:	2300      	movs	r3, #0
   1027c:	60a3      	str	r3, [r4, #8]
   1027e:	f104 0347 	add.w	r3, r4, #71	; 0x47
   10282:	6023      	str	r3, [r4, #0]
   10284:	6123      	str	r3, [r4, #16]
   10286:	2301      	movs	r3, #1
   10288:	6163      	str	r3, [r4, #20]
   1028a:	b003      	add	sp, #12
   1028c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10290:	4b22      	ldr	r3, [pc, #136]	; (1031c <setvbuf+0x154>)
   10292:	429c      	cmp	r4, r3
   10294:	d101      	bne.n	1029a <setvbuf+0xd2>
   10296:	68b4      	ldr	r4, [r6, #8]
   10298:	e7a8      	b.n	101ec <setvbuf+0x24>
   1029a:	4b21      	ldr	r3, [pc, #132]	; (10320 <setvbuf+0x158>)
   1029c:	429c      	cmp	r4, r3
   1029e:	bf08      	it	eq
   102a0:	68f4      	ldreq	r4, [r6, #12]
   102a2:	e7a3      	b.n	101ec <setvbuf+0x24>
   102a4:	2f00      	cmp	r7, #0
   102a6:	d0d8      	beq.n	1025a <setvbuf+0x92>
   102a8:	69b3      	ldr	r3, [r6, #24]
   102aa:	b913      	cbnz	r3, 102b2 <setvbuf+0xea>
   102ac:	4630      	mov	r0, r6
   102ae:	f000 fa17 	bl	106e0 <__sinit>
   102b2:	f1b8 0f01 	cmp.w	r8, #1
   102b6:	bf08      	it	eq
   102b8:	89a3      	ldrheq	r3, [r4, #12]
   102ba:	6027      	str	r7, [r4, #0]
   102bc:	bf04      	itt	eq
   102be:	f043 0301 	orreq.w	r3, r3, #1
   102c2:	81a3      	strheq	r3, [r4, #12]
   102c4:	89a3      	ldrh	r3, [r4, #12]
   102c6:	6127      	str	r7, [r4, #16]
   102c8:	f013 0008 	ands.w	r0, r3, #8
   102cc:	6165      	str	r5, [r4, #20]
   102ce:	d01b      	beq.n	10308 <setvbuf+0x140>
   102d0:	f013 0001 	ands.w	r0, r3, #1
   102d4:	bf18      	it	ne
   102d6:	426d      	negne	r5, r5
   102d8:	f04f 0300 	mov.w	r3, #0
   102dc:	bf1d      	ittte	ne
   102de:	60a3      	strne	r3, [r4, #8]
   102e0:	61a5      	strne	r5, [r4, #24]
   102e2:	4618      	movne	r0, r3
   102e4:	60a5      	streq	r5, [r4, #8]
   102e6:	e7d0      	b.n	1028a <setvbuf+0xc2>
   102e8:	4648      	mov	r0, r9
   102ea:	f7ff fdd7 	bl	fe9c <malloc>
   102ee:	4607      	mov	r7, r0
   102f0:	2800      	cmp	r0, #0
   102f2:	d0bc      	beq.n	1026e <setvbuf+0xa6>
   102f4:	89a3      	ldrh	r3, [r4, #12]
   102f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   102fa:	81a3      	strh	r3, [r4, #12]
   102fc:	464d      	mov	r5, r9
   102fe:	e7d3      	b.n	102a8 <setvbuf+0xe0>
   10300:	2000      	movs	r0, #0
   10302:	e7b6      	b.n	10272 <setvbuf+0xaa>
   10304:	46a9      	mov	r9, r5
   10306:	e7f5      	b.n	102f4 <setvbuf+0x12c>
   10308:	60a0      	str	r0, [r4, #8]
   1030a:	e7be      	b.n	1028a <setvbuf+0xc2>
   1030c:	f04f 30ff 	mov.w	r0, #4294967295
   10310:	e7bb      	b.n	1028a <setvbuf+0xc2>
   10312:	bf00      	nop
   10314:	20000558 	.word	0x20000558
   10318:	00011db8 	.word	0x00011db8
   1031c:	00011dd8 	.word	0x00011dd8
   10320:	00011d98 	.word	0x00011d98

00010324 <siprintf>:
   10324:	b40e      	push	{r1, r2, r3}
   10326:	b500      	push	{lr}
   10328:	b09c      	sub	sp, #112	; 0x70
   1032a:	f44f 7102 	mov.w	r1, #520	; 0x208
   1032e:	ab1d      	add	r3, sp, #116	; 0x74
   10330:	f8ad 1014 	strh.w	r1, [sp, #20]
   10334:	9002      	str	r0, [sp, #8]
   10336:	9006      	str	r0, [sp, #24]
   10338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1033c:	480a      	ldr	r0, [pc, #40]	; (10368 <siprintf+0x44>)
   1033e:	9104      	str	r1, [sp, #16]
   10340:	9107      	str	r1, [sp, #28]
   10342:	f64f 71ff 	movw	r1, #65535	; 0xffff
   10346:	f853 2b04 	ldr.w	r2, [r3], #4
   1034a:	f8ad 1016 	strh.w	r1, [sp, #22]
   1034e:	6800      	ldr	r0, [r0, #0]
   10350:	9301      	str	r3, [sp, #4]
   10352:	a902      	add	r1, sp, #8
   10354:	f000 fb10 	bl	10978 <_svfiprintf_r>
   10358:	9b02      	ldr	r3, [sp, #8]
   1035a:	2200      	movs	r2, #0
   1035c:	701a      	strb	r2, [r3, #0]
   1035e:	b01c      	add	sp, #112	; 0x70
   10360:	f85d eb04 	ldr.w	lr, [sp], #4
   10364:	b003      	add	sp, #12
   10366:	4770      	bx	lr
   10368:	20000558 	.word	0x20000558

0001036c <strlen>:
   1036c:	4603      	mov	r3, r0
   1036e:	f813 2b01 	ldrb.w	r2, [r3], #1
   10372:	2a00      	cmp	r2, #0
   10374:	d1fb      	bne.n	1036e <strlen+0x2>
   10376:	1a18      	subs	r0, r3, r0
   10378:	3801      	subs	r0, #1
   1037a:	4770      	bx	lr

0001037c <__swbuf_r>:
   1037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1037e:	460e      	mov	r6, r1
   10380:	4614      	mov	r4, r2
   10382:	4605      	mov	r5, r0
   10384:	b118      	cbz	r0, 1038e <__swbuf_r+0x12>
   10386:	6983      	ldr	r3, [r0, #24]
   10388:	b90b      	cbnz	r3, 1038e <__swbuf_r+0x12>
   1038a:	f000 f9a9 	bl	106e0 <__sinit>
   1038e:	4b21      	ldr	r3, [pc, #132]	; (10414 <__swbuf_r+0x98>)
   10390:	429c      	cmp	r4, r3
   10392:	d12a      	bne.n	103ea <__swbuf_r+0x6e>
   10394:	686c      	ldr	r4, [r5, #4]
   10396:	69a3      	ldr	r3, [r4, #24]
   10398:	60a3      	str	r3, [r4, #8]
   1039a:	89a3      	ldrh	r3, [r4, #12]
   1039c:	071a      	lsls	r2, r3, #28
   1039e:	d52e      	bpl.n	103fe <__swbuf_r+0x82>
   103a0:	6923      	ldr	r3, [r4, #16]
   103a2:	b363      	cbz	r3, 103fe <__swbuf_r+0x82>
   103a4:	6923      	ldr	r3, [r4, #16]
   103a6:	6820      	ldr	r0, [r4, #0]
   103a8:	1ac0      	subs	r0, r0, r3
   103aa:	6963      	ldr	r3, [r4, #20]
   103ac:	b2f6      	uxtb	r6, r6
   103ae:	4298      	cmp	r0, r3
   103b0:	4637      	mov	r7, r6
   103b2:	db04      	blt.n	103be <__swbuf_r+0x42>
   103b4:	4621      	mov	r1, r4
   103b6:	4628      	mov	r0, r5
   103b8:	f000 f928 	bl	1060c <_fflush_r>
   103bc:	bb28      	cbnz	r0, 1040a <__swbuf_r+0x8e>
   103be:	68a3      	ldr	r3, [r4, #8]
   103c0:	3b01      	subs	r3, #1
   103c2:	60a3      	str	r3, [r4, #8]
   103c4:	6823      	ldr	r3, [r4, #0]
   103c6:	1c5a      	adds	r2, r3, #1
   103c8:	6022      	str	r2, [r4, #0]
   103ca:	701e      	strb	r6, [r3, #0]
   103cc:	6963      	ldr	r3, [r4, #20]
   103ce:	3001      	adds	r0, #1
   103d0:	4298      	cmp	r0, r3
   103d2:	d004      	beq.n	103de <__swbuf_r+0x62>
   103d4:	89a3      	ldrh	r3, [r4, #12]
   103d6:	07db      	lsls	r3, r3, #31
   103d8:	d519      	bpl.n	1040e <__swbuf_r+0x92>
   103da:	2e0a      	cmp	r6, #10
   103dc:	d117      	bne.n	1040e <__swbuf_r+0x92>
   103de:	4621      	mov	r1, r4
   103e0:	4628      	mov	r0, r5
   103e2:	f000 f913 	bl	1060c <_fflush_r>
   103e6:	b190      	cbz	r0, 1040e <__swbuf_r+0x92>
   103e8:	e00f      	b.n	1040a <__swbuf_r+0x8e>
   103ea:	4b0b      	ldr	r3, [pc, #44]	; (10418 <__swbuf_r+0x9c>)
   103ec:	429c      	cmp	r4, r3
   103ee:	d101      	bne.n	103f4 <__swbuf_r+0x78>
   103f0:	68ac      	ldr	r4, [r5, #8]
   103f2:	e7d0      	b.n	10396 <__swbuf_r+0x1a>
   103f4:	4b09      	ldr	r3, [pc, #36]	; (1041c <__swbuf_r+0xa0>)
   103f6:	429c      	cmp	r4, r3
   103f8:	bf08      	it	eq
   103fa:	68ec      	ldreq	r4, [r5, #12]
   103fc:	e7cb      	b.n	10396 <__swbuf_r+0x1a>
   103fe:	4621      	mov	r1, r4
   10400:	4628      	mov	r0, r5
   10402:	f000 f80d 	bl	10420 <__swsetup_r>
   10406:	2800      	cmp	r0, #0
   10408:	d0cc      	beq.n	103a4 <__swbuf_r+0x28>
   1040a:	f04f 37ff 	mov.w	r7, #4294967295
   1040e:	4638      	mov	r0, r7
   10410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10412:	bf00      	nop
   10414:	00011db8 	.word	0x00011db8
   10418:	00011dd8 	.word	0x00011dd8
   1041c:	00011d98 	.word	0x00011d98

00010420 <__swsetup_r>:
   10420:	4b32      	ldr	r3, [pc, #200]	; (104ec <__swsetup_r+0xcc>)
   10422:	b570      	push	{r4, r5, r6, lr}
   10424:	681d      	ldr	r5, [r3, #0]
   10426:	4606      	mov	r6, r0
   10428:	460c      	mov	r4, r1
   1042a:	b125      	cbz	r5, 10436 <__swsetup_r+0x16>
   1042c:	69ab      	ldr	r3, [r5, #24]
   1042e:	b913      	cbnz	r3, 10436 <__swsetup_r+0x16>
   10430:	4628      	mov	r0, r5
   10432:	f000 f955 	bl	106e0 <__sinit>
   10436:	4b2e      	ldr	r3, [pc, #184]	; (104f0 <__swsetup_r+0xd0>)
   10438:	429c      	cmp	r4, r3
   1043a:	d10f      	bne.n	1045c <__swsetup_r+0x3c>
   1043c:	686c      	ldr	r4, [r5, #4]
   1043e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10442:	b29a      	uxth	r2, r3
   10444:	0715      	lsls	r5, r2, #28
   10446:	d42c      	bmi.n	104a2 <__swsetup_r+0x82>
   10448:	06d0      	lsls	r0, r2, #27
   1044a:	d411      	bmi.n	10470 <__swsetup_r+0x50>
   1044c:	2209      	movs	r2, #9
   1044e:	6032      	str	r2, [r6, #0]
   10450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10454:	81a3      	strh	r3, [r4, #12]
   10456:	f04f 30ff 	mov.w	r0, #4294967295
   1045a:	bd70      	pop	{r4, r5, r6, pc}
   1045c:	4b25      	ldr	r3, [pc, #148]	; (104f4 <__swsetup_r+0xd4>)
   1045e:	429c      	cmp	r4, r3
   10460:	d101      	bne.n	10466 <__swsetup_r+0x46>
   10462:	68ac      	ldr	r4, [r5, #8]
   10464:	e7eb      	b.n	1043e <__swsetup_r+0x1e>
   10466:	4b24      	ldr	r3, [pc, #144]	; (104f8 <__swsetup_r+0xd8>)
   10468:	429c      	cmp	r4, r3
   1046a:	bf08      	it	eq
   1046c:	68ec      	ldreq	r4, [r5, #12]
   1046e:	e7e6      	b.n	1043e <__swsetup_r+0x1e>
   10470:	0751      	lsls	r1, r2, #29
   10472:	d512      	bpl.n	1049a <__swsetup_r+0x7a>
   10474:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10476:	b141      	cbz	r1, 1048a <__swsetup_r+0x6a>
   10478:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1047c:	4299      	cmp	r1, r3
   1047e:	d002      	beq.n	10486 <__swsetup_r+0x66>
   10480:	4630      	mov	r0, r6
   10482:	f7ff fd27 	bl	fed4 <_free_r>
   10486:	2300      	movs	r3, #0
   10488:	6363      	str	r3, [r4, #52]	; 0x34
   1048a:	89a3      	ldrh	r3, [r4, #12]
   1048c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   10490:	81a3      	strh	r3, [r4, #12]
   10492:	2300      	movs	r3, #0
   10494:	6063      	str	r3, [r4, #4]
   10496:	6923      	ldr	r3, [r4, #16]
   10498:	6023      	str	r3, [r4, #0]
   1049a:	89a3      	ldrh	r3, [r4, #12]
   1049c:	f043 0308 	orr.w	r3, r3, #8
   104a0:	81a3      	strh	r3, [r4, #12]
   104a2:	6923      	ldr	r3, [r4, #16]
   104a4:	b94b      	cbnz	r3, 104ba <__swsetup_r+0x9a>
   104a6:	89a3      	ldrh	r3, [r4, #12]
   104a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
   104ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   104b0:	d003      	beq.n	104ba <__swsetup_r+0x9a>
   104b2:	4621      	mov	r1, r4
   104b4:	4630      	mov	r0, r6
   104b6:	f000 f9c1 	bl	1083c <__smakebuf_r>
   104ba:	89a2      	ldrh	r2, [r4, #12]
   104bc:	f012 0301 	ands.w	r3, r2, #1
   104c0:	d00c      	beq.n	104dc <__swsetup_r+0xbc>
   104c2:	2300      	movs	r3, #0
   104c4:	60a3      	str	r3, [r4, #8]
   104c6:	6963      	ldr	r3, [r4, #20]
   104c8:	425b      	negs	r3, r3
   104ca:	61a3      	str	r3, [r4, #24]
   104cc:	6923      	ldr	r3, [r4, #16]
   104ce:	b953      	cbnz	r3, 104e6 <__swsetup_r+0xc6>
   104d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   104d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   104d8:	d1ba      	bne.n	10450 <__swsetup_r+0x30>
   104da:	bd70      	pop	{r4, r5, r6, pc}
   104dc:	0792      	lsls	r2, r2, #30
   104de:	bf58      	it	pl
   104e0:	6963      	ldrpl	r3, [r4, #20]
   104e2:	60a3      	str	r3, [r4, #8]
   104e4:	e7f2      	b.n	104cc <__swsetup_r+0xac>
   104e6:	2000      	movs	r0, #0
   104e8:	e7f7      	b.n	104da <__swsetup_r+0xba>
   104ea:	bf00      	nop
   104ec:	20000558 	.word	0x20000558
   104f0:	00011db8 	.word	0x00011db8
   104f4:	00011dd8 	.word	0x00011dd8
   104f8:	00011d98 	.word	0x00011d98

000104fc <__sflush_r>:
   104fc:	898a      	ldrh	r2, [r1, #12]
   104fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10502:	4605      	mov	r5, r0
   10504:	0710      	lsls	r0, r2, #28
   10506:	460c      	mov	r4, r1
   10508:	d45a      	bmi.n	105c0 <__sflush_r+0xc4>
   1050a:	684b      	ldr	r3, [r1, #4]
   1050c:	2b00      	cmp	r3, #0
   1050e:	dc05      	bgt.n	1051c <__sflush_r+0x20>
   10510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10512:	2b00      	cmp	r3, #0
   10514:	dc02      	bgt.n	1051c <__sflush_r+0x20>
   10516:	2000      	movs	r0, #0
   10518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1051c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   1051e:	2e00      	cmp	r6, #0
   10520:	d0f9      	beq.n	10516 <__sflush_r+0x1a>
   10522:	2300      	movs	r3, #0
   10524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10528:	682f      	ldr	r7, [r5, #0]
   1052a:	602b      	str	r3, [r5, #0]
   1052c:	d033      	beq.n	10596 <__sflush_r+0x9a>
   1052e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   10530:	89a3      	ldrh	r3, [r4, #12]
   10532:	075a      	lsls	r2, r3, #29
   10534:	d505      	bpl.n	10542 <__sflush_r+0x46>
   10536:	6863      	ldr	r3, [r4, #4]
   10538:	1ac0      	subs	r0, r0, r3
   1053a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1053c:	b10b      	cbz	r3, 10542 <__sflush_r+0x46>
   1053e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10540:	1ac0      	subs	r0, r0, r3
   10542:	2300      	movs	r3, #0
   10544:	4602      	mov	r2, r0
   10546:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   10548:	6a21      	ldr	r1, [r4, #32]
   1054a:	4628      	mov	r0, r5
   1054c:	47b0      	blx	r6
   1054e:	1c43      	adds	r3, r0, #1
   10550:	89a3      	ldrh	r3, [r4, #12]
   10552:	d106      	bne.n	10562 <__sflush_r+0x66>
   10554:	6829      	ldr	r1, [r5, #0]
   10556:	291d      	cmp	r1, #29
   10558:	d84b      	bhi.n	105f2 <__sflush_r+0xf6>
   1055a:	4a2b      	ldr	r2, [pc, #172]	; (10608 <__sflush_r+0x10c>)
   1055c:	40ca      	lsrs	r2, r1
   1055e:	07d6      	lsls	r6, r2, #31
   10560:	d547      	bpl.n	105f2 <__sflush_r+0xf6>
   10562:	2200      	movs	r2, #0
   10564:	6062      	str	r2, [r4, #4]
   10566:	04d9      	lsls	r1, r3, #19
   10568:	6922      	ldr	r2, [r4, #16]
   1056a:	6022      	str	r2, [r4, #0]
   1056c:	d504      	bpl.n	10578 <__sflush_r+0x7c>
   1056e:	1c42      	adds	r2, r0, #1
   10570:	d101      	bne.n	10576 <__sflush_r+0x7a>
   10572:	682b      	ldr	r3, [r5, #0]
   10574:	b903      	cbnz	r3, 10578 <__sflush_r+0x7c>
   10576:	6560      	str	r0, [r4, #84]	; 0x54
   10578:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1057a:	602f      	str	r7, [r5, #0]
   1057c:	2900      	cmp	r1, #0
   1057e:	d0ca      	beq.n	10516 <__sflush_r+0x1a>
   10580:	f104 0344 	add.w	r3, r4, #68	; 0x44
   10584:	4299      	cmp	r1, r3
   10586:	d002      	beq.n	1058e <__sflush_r+0x92>
   10588:	4628      	mov	r0, r5
   1058a:	f7ff fca3 	bl	fed4 <_free_r>
   1058e:	2000      	movs	r0, #0
   10590:	6360      	str	r0, [r4, #52]	; 0x34
   10592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10596:	6a21      	ldr	r1, [r4, #32]
   10598:	2301      	movs	r3, #1
   1059a:	4628      	mov	r0, r5
   1059c:	47b0      	blx	r6
   1059e:	1c41      	adds	r1, r0, #1
   105a0:	d1c6      	bne.n	10530 <__sflush_r+0x34>
   105a2:	682b      	ldr	r3, [r5, #0]
   105a4:	2b00      	cmp	r3, #0
   105a6:	d0c3      	beq.n	10530 <__sflush_r+0x34>
   105a8:	2b1d      	cmp	r3, #29
   105aa:	d001      	beq.n	105b0 <__sflush_r+0xb4>
   105ac:	2b16      	cmp	r3, #22
   105ae:	d101      	bne.n	105b4 <__sflush_r+0xb8>
   105b0:	602f      	str	r7, [r5, #0]
   105b2:	e7b0      	b.n	10516 <__sflush_r+0x1a>
   105b4:	89a3      	ldrh	r3, [r4, #12]
   105b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   105ba:	81a3      	strh	r3, [r4, #12]
   105bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105c0:	690f      	ldr	r7, [r1, #16]
   105c2:	2f00      	cmp	r7, #0
   105c4:	d0a7      	beq.n	10516 <__sflush_r+0x1a>
   105c6:	0793      	lsls	r3, r2, #30
   105c8:	680e      	ldr	r6, [r1, #0]
   105ca:	bf08      	it	eq
   105cc:	694b      	ldreq	r3, [r1, #20]
   105ce:	600f      	str	r7, [r1, #0]
   105d0:	bf18      	it	ne
   105d2:	2300      	movne	r3, #0
   105d4:	eba6 0807 	sub.w	r8, r6, r7
   105d8:	608b      	str	r3, [r1, #8]
   105da:	f1b8 0f00 	cmp.w	r8, #0
   105de:	dd9a      	ble.n	10516 <__sflush_r+0x1a>
   105e0:	4643      	mov	r3, r8
   105e2:	463a      	mov	r2, r7
   105e4:	6a21      	ldr	r1, [r4, #32]
   105e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   105e8:	4628      	mov	r0, r5
   105ea:	47b0      	blx	r6
   105ec:	2800      	cmp	r0, #0
   105ee:	dc07      	bgt.n	10600 <__sflush_r+0x104>
   105f0:	89a3      	ldrh	r3, [r4, #12]
   105f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   105f6:	81a3      	strh	r3, [r4, #12]
   105f8:	f04f 30ff 	mov.w	r0, #4294967295
   105fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10600:	4407      	add	r7, r0
   10602:	eba8 0800 	sub.w	r8, r8, r0
   10606:	e7e8      	b.n	105da <__sflush_r+0xde>
   10608:	20400001 	.word	0x20400001

0001060c <_fflush_r>:
   1060c:	b538      	push	{r3, r4, r5, lr}
   1060e:	690b      	ldr	r3, [r1, #16]
   10610:	4605      	mov	r5, r0
   10612:	460c      	mov	r4, r1
   10614:	b1db      	cbz	r3, 1064e <_fflush_r+0x42>
   10616:	b118      	cbz	r0, 10620 <_fflush_r+0x14>
   10618:	6983      	ldr	r3, [r0, #24]
   1061a:	b90b      	cbnz	r3, 10620 <_fflush_r+0x14>
   1061c:	f000 f860 	bl	106e0 <__sinit>
   10620:	4b0c      	ldr	r3, [pc, #48]	; (10654 <_fflush_r+0x48>)
   10622:	429c      	cmp	r4, r3
   10624:	d109      	bne.n	1063a <_fflush_r+0x2e>
   10626:	686c      	ldr	r4, [r5, #4]
   10628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1062c:	b17b      	cbz	r3, 1064e <_fflush_r+0x42>
   1062e:	4621      	mov	r1, r4
   10630:	4628      	mov	r0, r5
   10632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10636:	f7ff bf61 	b.w	104fc <__sflush_r>
   1063a:	4b07      	ldr	r3, [pc, #28]	; (10658 <_fflush_r+0x4c>)
   1063c:	429c      	cmp	r4, r3
   1063e:	d101      	bne.n	10644 <_fflush_r+0x38>
   10640:	68ac      	ldr	r4, [r5, #8]
   10642:	e7f1      	b.n	10628 <_fflush_r+0x1c>
   10644:	4b05      	ldr	r3, [pc, #20]	; (1065c <_fflush_r+0x50>)
   10646:	429c      	cmp	r4, r3
   10648:	bf08      	it	eq
   1064a:	68ec      	ldreq	r4, [r5, #12]
   1064c:	e7ec      	b.n	10628 <_fflush_r+0x1c>
   1064e:	2000      	movs	r0, #0
   10650:	bd38      	pop	{r3, r4, r5, pc}
   10652:	bf00      	nop
   10654:	00011db8 	.word	0x00011db8
   10658:	00011dd8 	.word	0x00011dd8
   1065c:	00011d98 	.word	0x00011d98

00010660 <_cleanup_r>:
   10660:	4901      	ldr	r1, [pc, #4]	; (10668 <_cleanup_r+0x8>)
   10662:	f000 b8a9 	b.w	107b8 <_fwalk_reent>
   10666:	bf00      	nop
   10668:	0001060d 	.word	0x0001060d

0001066c <std.isra.0>:
   1066c:	2300      	movs	r3, #0
   1066e:	b510      	push	{r4, lr}
   10670:	4604      	mov	r4, r0
   10672:	6003      	str	r3, [r0, #0]
   10674:	6043      	str	r3, [r0, #4]
   10676:	6083      	str	r3, [r0, #8]
   10678:	8181      	strh	r1, [r0, #12]
   1067a:	6643      	str	r3, [r0, #100]	; 0x64
   1067c:	81c2      	strh	r2, [r0, #14]
   1067e:	6103      	str	r3, [r0, #16]
   10680:	6143      	str	r3, [r0, #20]
   10682:	6183      	str	r3, [r0, #24]
   10684:	4619      	mov	r1, r3
   10686:	2208      	movs	r2, #8
   10688:	305c      	adds	r0, #92	; 0x5c
   1068a:	f7ff fc1a 	bl	fec2 <memset>
   1068e:	4b05      	ldr	r3, [pc, #20]	; (106a4 <std.isra.0+0x38>)
   10690:	6263      	str	r3, [r4, #36]	; 0x24
   10692:	4b05      	ldr	r3, [pc, #20]	; (106a8 <std.isra.0+0x3c>)
   10694:	62a3      	str	r3, [r4, #40]	; 0x28
   10696:	4b05      	ldr	r3, [pc, #20]	; (106ac <std.isra.0+0x40>)
   10698:	62e3      	str	r3, [r4, #44]	; 0x2c
   1069a:	4b05      	ldr	r3, [pc, #20]	; (106b0 <std.isra.0+0x44>)
   1069c:	6224      	str	r4, [r4, #32]
   1069e:	6323      	str	r3, [r4, #48]	; 0x30
   106a0:	bd10      	pop	{r4, pc}
   106a2:	bf00      	nop
   106a4:	00011109 	.word	0x00011109
   106a8:	0001112b 	.word	0x0001112b
   106ac:	00011163 	.word	0x00011163
   106b0:	00011187 	.word	0x00011187

000106b4 <__sfmoreglue>:
   106b4:	b570      	push	{r4, r5, r6, lr}
   106b6:	1e4a      	subs	r2, r1, #1
   106b8:	2568      	movs	r5, #104	; 0x68
   106ba:	4355      	muls	r5, r2
   106bc:	460e      	mov	r6, r1
   106be:	f105 0174 	add.w	r1, r5, #116	; 0x74
   106c2:	f7ff fc55 	bl	ff70 <_malloc_r>
   106c6:	4604      	mov	r4, r0
   106c8:	b140      	cbz	r0, 106dc <__sfmoreglue+0x28>
   106ca:	2100      	movs	r1, #0
   106cc:	e880 0042 	stmia.w	r0, {r1, r6}
   106d0:	300c      	adds	r0, #12
   106d2:	60a0      	str	r0, [r4, #8]
   106d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   106d8:	f7ff fbf3 	bl	fec2 <memset>
   106dc:	4620      	mov	r0, r4
   106de:	bd70      	pop	{r4, r5, r6, pc}

000106e0 <__sinit>:
   106e0:	6983      	ldr	r3, [r0, #24]
   106e2:	b510      	push	{r4, lr}
   106e4:	4604      	mov	r4, r0
   106e6:	bb33      	cbnz	r3, 10736 <__sinit+0x56>
   106e8:	6483      	str	r3, [r0, #72]	; 0x48
   106ea:	64c3      	str	r3, [r0, #76]	; 0x4c
   106ec:	6503      	str	r3, [r0, #80]	; 0x50
   106ee:	4b12      	ldr	r3, [pc, #72]	; (10738 <__sinit+0x58>)
   106f0:	4a12      	ldr	r2, [pc, #72]	; (1073c <__sinit+0x5c>)
   106f2:	681b      	ldr	r3, [r3, #0]
   106f4:	6282      	str	r2, [r0, #40]	; 0x28
   106f6:	4298      	cmp	r0, r3
   106f8:	bf04      	itt	eq
   106fa:	2301      	moveq	r3, #1
   106fc:	6183      	streq	r3, [r0, #24]
   106fe:	f000 f81f 	bl	10740 <__sfp>
   10702:	6060      	str	r0, [r4, #4]
   10704:	4620      	mov	r0, r4
   10706:	f000 f81b 	bl	10740 <__sfp>
   1070a:	60a0      	str	r0, [r4, #8]
   1070c:	4620      	mov	r0, r4
   1070e:	f000 f817 	bl	10740 <__sfp>
   10712:	2200      	movs	r2, #0
   10714:	60e0      	str	r0, [r4, #12]
   10716:	2104      	movs	r1, #4
   10718:	6860      	ldr	r0, [r4, #4]
   1071a:	f7ff ffa7 	bl	1066c <std.isra.0>
   1071e:	2201      	movs	r2, #1
   10720:	2109      	movs	r1, #9
   10722:	68a0      	ldr	r0, [r4, #8]
   10724:	f7ff ffa2 	bl	1066c <std.isra.0>
   10728:	2202      	movs	r2, #2
   1072a:	2112      	movs	r1, #18
   1072c:	68e0      	ldr	r0, [r4, #12]
   1072e:	f7ff ff9d 	bl	1066c <std.isra.0>
   10732:	2301      	movs	r3, #1
   10734:	61a3      	str	r3, [r4, #24]
   10736:	bd10      	pop	{r4, pc}
   10738:	00011d94 	.word	0x00011d94
   1073c:	00010661 	.word	0x00010661

00010740 <__sfp>:
   10740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10742:	4b1c      	ldr	r3, [pc, #112]	; (107b4 <__sfp+0x74>)
   10744:	681e      	ldr	r6, [r3, #0]
   10746:	69b3      	ldr	r3, [r6, #24]
   10748:	4607      	mov	r7, r0
   1074a:	b913      	cbnz	r3, 10752 <__sfp+0x12>
   1074c:	4630      	mov	r0, r6
   1074e:	f7ff ffc7 	bl	106e0 <__sinit>
   10752:	3648      	adds	r6, #72	; 0x48
   10754:	68b4      	ldr	r4, [r6, #8]
   10756:	6873      	ldr	r3, [r6, #4]
   10758:	3b01      	subs	r3, #1
   1075a:	d503      	bpl.n	10764 <__sfp+0x24>
   1075c:	6833      	ldr	r3, [r6, #0]
   1075e:	b133      	cbz	r3, 1076e <__sfp+0x2e>
   10760:	6836      	ldr	r6, [r6, #0]
   10762:	e7f7      	b.n	10754 <__sfp+0x14>
   10764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   10768:	b16d      	cbz	r5, 10786 <__sfp+0x46>
   1076a:	3468      	adds	r4, #104	; 0x68
   1076c:	e7f4      	b.n	10758 <__sfp+0x18>
   1076e:	2104      	movs	r1, #4
   10770:	4638      	mov	r0, r7
   10772:	f7ff ff9f 	bl	106b4 <__sfmoreglue>
   10776:	6030      	str	r0, [r6, #0]
   10778:	2800      	cmp	r0, #0
   1077a:	d1f1      	bne.n	10760 <__sfp+0x20>
   1077c:	230c      	movs	r3, #12
   1077e:	603b      	str	r3, [r7, #0]
   10780:	4604      	mov	r4, r0
   10782:	4620      	mov	r0, r4
   10784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10786:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1078a:	81e3      	strh	r3, [r4, #14]
   1078c:	2301      	movs	r3, #1
   1078e:	81a3      	strh	r3, [r4, #12]
   10790:	6665      	str	r5, [r4, #100]	; 0x64
   10792:	6025      	str	r5, [r4, #0]
   10794:	60a5      	str	r5, [r4, #8]
   10796:	6065      	str	r5, [r4, #4]
   10798:	6125      	str	r5, [r4, #16]
   1079a:	6165      	str	r5, [r4, #20]
   1079c:	61a5      	str	r5, [r4, #24]
   1079e:	2208      	movs	r2, #8
   107a0:	4629      	mov	r1, r5
   107a2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   107a6:	f7ff fb8c 	bl	fec2 <memset>
   107aa:	6365      	str	r5, [r4, #52]	; 0x34
   107ac:	63a5      	str	r5, [r4, #56]	; 0x38
   107ae:	64a5      	str	r5, [r4, #72]	; 0x48
   107b0:	64e5      	str	r5, [r4, #76]	; 0x4c
   107b2:	e7e6      	b.n	10782 <__sfp+0x42>
   107b4:	00011d94 	.word	0x00011d94

000107b8 <_fwalk_reent>:
   107b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   107bc:	4680      	mov	r8, r0
   107be:	4689      	mov	r9, r1
   107c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
   107c4:	2600      	movs	r6, #0
   107c6:	b914      	cbnz	r4, 107ce <_fwalk_reent+0x16>
   107c8:	4630      	mov	r0, r6
   107ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   107ce:	68a5      	ldr	r5, [r4, #8]
   107d0:	6867      	ldr	r7, [r4, #4]
   107d2:	3f01      	subs	r7, #1
   107d4:	d501      	bpl.n	107da <_fwalk_reent+0x22>
   107d6:	6824      	ldr	r4, [r4, #0]
   107d8:	e7f5      	b.n	107c6 <_fwalk_reent+0xe>
   107da:	89ab      	ldrh	r3, [r5, #12]
   107dc:	2b01      	cmp	r3, #1
   107de:	d907      	bls.n	107f0 <_fwalk_reent+0x38>
   107e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   107e4:	3301      	adds	r3, #1
   107e6:	d003      	beq.n	107f0 <_fwalk_reent+0x38>
   107e8:	4629      	mov	r1, r5
   107ea:	4640      	mov	r0, r8
   107ec:	47c8      	blx	r9
   107ee:	4306      	orrs	r6, r0
   107f0:	3568      	adds	r5, #104	; 0x68
   107f2:	e7ee      	b.n	107d2 <_fwalk_reent+0x1a>

000107f4 <__swhatbuf_r>:
   107f4:	b570      	push	{r4, r5, r6, lr}
   107f6:	460e      	mov	r6, r1
   107f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   107fc:	2900      	cmp	r1, #0
   107fe:	b090      	sub	sp, #64	; 0x40
   10800:	4614      	mov	r4, r2
   10802:	461d      	mov	r5, r3
   10804:	da07      	bge.n	10816 <__swhatbuf_r+0x22>
   10806:	2300      	movs	r3, #0
   10808:	602b      	str	r3, [r5, #0]
   1080a:	89b3      	ldrh	r3, [r6, #12]
   1080c:	061a      	lsls	r2, r3, #24
   1080e:	d410      	bmi.n	10832 <__swhatbuf_r+0x3e>
   10810:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10814:	e00e      	b.n	10834 <__swhatbuf_r+0x40>
   10816:	aa01      	add	r2, sp, #4
   10818:	f000 fcdc 	bl	111d4 <_fstat_r>
   1081c:	2800      	cmp	r0, #0
   1081e:	dbf2      	blt.n	10806 <__swhatbuf_r+0x12>
   10820:	9a02      	ldr	r2, [sp, #8]
   10822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   10826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   1082a:	425a      	negs	r2, r3
   1082c:	415a      	adcs	r2, r3
   1082e:	602a      	str	r2, [r5, #0]
   10830:	e7ee      	b.n	10810 <__swhatbuf_r+0x1c>
   10832:	2340      	movs	r3, #64	; 0x40
   10834:	2000      	movs	r0, #0
   10836:	6023      	str	r3, [r4, #0]
   10838:	b010      	add	sp, #64	; 0x40
   1083a:	bd70      	pop	{r4, r5, r6, pc}

0001083c <__smakebuf_r>:
   1083c:	898b      	ldrh	r3, [r1, #12]
   1083e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10840:	079d      	lsls	r5, r3, #30
   10842:	4606      	mov	r6, r0
   10844:	460c      	mov	r4, r1
   10846:	d507      	bpl.n	10858 <__smakebuf_r+0x1c>
   10848:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1084c:	6023      	str	r3, [r4, #0]
   1084e:	6123      	str	r3, [r4, #16]
   10850:	2301      	movs	r3, #1
   10852:	6163      	str	r3, [r4, #20]
   10854:	b002      	add	sp, #8
   10856:	bd70      	pop	{r4, r5, r6, pc}
   10858:	ab01      	add	r3, sp, #4
   1085a:	466a      	mov	r2, sp
   1085c:	f7ff ffca 	bl	107f4 <__swhatbuf_r>
   10860:	9900      	ldr	r1, [sp, #0]
   10862:	4605      	mov	r5, r0
   10864:	4630      	mov	r0, r6
   10866:	f7ff fb83 	bl	ff70 <_malloc_r>
   1086a:	b948      	cbnz	r0, 10880 <__smakebuf_r+0x44>
   1086c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10870:	059a      	lsls	r2, r3, #22
   10872:	d4ef      	bmi.n	10854 <__smakebuf_r+0x18>
   10874:	f023 0303 	bic.w	r3, r3, #3
   10878:	f043 0302 	orr.w	r3, r3, #2
   1087c:	81a3      	strh	r3, [r4, #12]
   1087e:	e7e3      	b.n	10848 <__smakebuf_r+0xc>
   10880:	4b0d      	ldr	r3, [pc, #52]	; (108b8 <__smakebuf_r+0x7c>)
   10882:	62b3      	str	r3, [r6, #40]	; 0x28
   10884:	89a3      	ldrh	r3, [r4, #12]
   10886:	6020      	str	r0, [r4, #0]
   10888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1088c:	81a3      	strh	r3, [r4, #12]
   1088e:	9b00      	ldr	r3, [sp, #0]
   10890:	6163      	str	r3, [r4, #20]
   10892:	9b01      	ldr	r3, [sp, #4]
   10894:	6120      	str	r0, [r4, #16]
   10896:	b15b      	cbz	r3, 108b0 <__smakebuf_r+0x74>
   10898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1089c:	4630      	mov	r0, r6
   1089e:	f000 fcab 	bl	111f8 <_isatty_r>
   108a2:	b128      	cbz	r0, 108b0 <__smakebuf_r+0x74>
   108a4:	89a3      	ldrh	r3, [r4, #12]
   108a6:	f023 0303 	bic.w	r3, r3, #3
   108aa:	f043 0301 	orr.w	r3, r3, #1
   108ae:	81a3      	strh	r3, [r4, #12]
   108b0:	89a3      	ldrh	r3, [r4, #12]
   108b2:	431d      	orrs	r5, r3
   108b4:	81a5      	strh	r5, [r4, #12]
   108b6:	e7cd      	b.n	10854 <__smakebuf_r+0x18>
   108b8:	00010661 	.word	0x00010661

000108bc <__malloc_lock>:
   108bc:	4770      	bx	lr

000108be <__malloc_unlock>:
   108be:	4770      	bx	lr

000108c0 <__ssputs_r>:
   108c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   108c4:	688e      	ldr	r6, [r1, #8]
   108c6:	429e      	cmp	r6, r3
   108c8:	4682      	mov	sl, r0
   108ca:	460c      	mov	r4, r1
   108cc:	4691      	mov	r9, r2
   108ce:	4698      	mov	r8, r3
   108d0:	d835      	bhi.n	1093e <__ssputs_r+0x7e>
   108d2:	898a      	ldrh	r2, [r1, #12]
   108d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
   108d8:	d031      	beq.n	1093e <__ssputs_r+0x7e>
   108da:	6825      	ldr	r5, [r4, #0]
   108dc:	6909      	ldr	r1, [r1, #16]
   108de:	1a6f      	subs	r7, r5, r1
   108e0:	6965      	ldr	r5, [r4, #20]
   108e2:	2302      	movs	r3, #2
   108e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   108e8:	fb95 f5f3 	sdiv	r5, r5, r3
   108ec:	f108 0301 	add.w	r3, r8, #1
   108f0:	443b      	add	r3, r7
   108f2:	429d      	cmp	r5, r3
   108f4:	bf38      	it	cc
   108f6:	461d      	movcc	r5, r3
   108f8:	0553      	lsls	r3, r2, #21
   108fa:	d531      	bpl.n	10960 <__ssputs_r+0xa0>
   108fc:	4629      	mov	r1, r5
   108fe:	f7ff fb37 	bl	ff70 <_malloc_r>
   10902:	4606      	mov	r6, r0
   10904:	b950      	cbnz	r0, 1091c <__ssputs_r+0x5c>
   10906:	230c      	movs	r3, #12
   10908:	f8ca 3000 	str.w	r3, [sl]
   1090c:	89a3      	ldrh	r3, [r4, #12]
   1090e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10912:	81a3      	strh	r3, [r4, #12]
   10914:	f04f 30ff 	mov.w	r0, #4294967295
   10918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1091c:	463a      	mov	r2, r7
   1091e:	6921      	ldr	r1, [r4, #16]
   10920:	f7ff fac4 	bl	feac <memcpy>
   10924:	89a3      	ldrh	r3, [r4, #12]
   10926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1092e:	81a3      	strh	r3, [r4, #12]
   10930:	6126      	str	r6, [r4, #16]
   10932:	6165      	str	r5, [r4, #20]
   10934:	443e      	add	r6, r7
   10936:	1bed      	subs	r5, r5, r7
   10938:	6026      	str	r6, [r4, #0]
   1093a:	60a5      	str	r5, [r4, #8]
   1093c:	4646      	mov	r6, r8
   1093e:	4546      	cmp	r6, r8
   10940:	bf28      	it	cs
   10942:	4646      	movcs	r6, r8
   10944:	4632      	mov	r2, r6
   10946:	4649      	mov	r1, r9
   10948:	6820      	ldr	r0, [r4, #0]
   1094a:	f000 fcc9 	bl	112e0 <memmove>
   1094e:	68a3      	ldr	r3, [r4, #8]
   10950:	1b9b      	subs	r3, r3, r6
   10952:	60a3      	str	r3, [r4, #8]
   10954:	6823      	ldr	r3, [r4, #0]
   10956:	441e      	add	r6, r3
   10958:	6026      	str	r6, [r4, #0]
   1095a:	2000      	movs	r0, #0
   1095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10960:	462a      	mov	r2, r5
   10962:	f000 fcd7 	bl	11314 <_realloc_r>
   10966:	4606      	mov	r6, r0
   10968:	2800      	cmp	r0, #0
   1096a:	d1e1      	bne.n	10930 <__ssputs_r+0x70>
   1096c:	6921      	ldr	r1, [r4, #16]
   1096e:	4650      	mov	r0, sl
   10970:	f7ff fab0 	bl	fed4 <_free_r>
   10974:	e7c7      	b.n	10906 <__ssputs_r+0x46>
	...

00010978 <_svfiprintf_r>:
   10978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1097c:	b09d      	sub	sp, #116	; 0x74
   1097e:	4680      	mov	r8, r0
   10980:	9303      	str	r3, [sp, #12]
   10982:	898b      	ldrh	r3, [r1, #12]
   10984:	061c      	lsls	r4, r3, #24
   10986:	460d      	mov	r5, r1
   10988:	4616      	mov	r6, r2
   1098a:	d50f      	bpl.n	109ac <_svfiprintf_r+0x34>
   1098c:	690b      	ldr	r3, [r1, #16]
   1098e:	b96b      	cbnz	r3, 109ac <_svfiprintf_r+0x34>
   10990:	2140      	movs	r1, #64	; 0x40
   10992:	f7ff faed 	bl	ff70 <_malloc_r>
   10996:	6028      	str	r0, [r5, #0]
   10998:	6128      	str	r0, [r5, #16]
   1099a:	b928      	cbnz	r0, 109a8 <_svfiprintf_r+0x30>
   1099c:	230c      	movs	r3, #12
   1099e:	f8c8 3000 	str.w	r3, [r8]
   109a2:	f04f 30ff 	mov.w	r0, #4294967295
   109a6:	e0c5      	b.n	10b34 <_svfiprintf_r+0x1bc>
   109a8:	2340      	movs	r3, #64	; 0x40
   109aa:	616b      	str	r3, [r5, #20]
   109ac:	2300      	movs	r3, #0
   109ae:	9309      	str	r3, [sp, #36]	; 0x24
   109b0:	2320      	movs	r3, #32
   109b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   109b6:	2330      	movs	r3, #48	; 0x30
   109b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   109bc:	f04f 0b01 	mov.w	fp, #1
   109c0:	4637      	mov	r7, r6
   109c2:	463c      	mov	r4, r7
   109c4:	f814 3b01 	ldrb.w	r3, [r4], #1
   109c8:	2b00      	cmp	r3, #0
   109ca:	d13c      	bne.n	10a46 <_svfiprintf_r+0xce>
   109cc:	ebb7 0a06 	subs.w	sl, r7, r6
   109d0:	d00b      	beq.n	109ea <_svfiprintf_r+0x72>
   109d2:	4653      	mov	r3, sl
   109d4:	4632      	mov	r2, r6
   109d6:	4629      	mov	r1, r5
   109d8:	4640      	mov	r0, r8
   109da:	f7ff ff71 	bl	108c0 <__ssputs_r>
   109de:	3001      	adds	r0, #1
   109e0:	f000 80a3 	beq.w	10b2a <_svfiprintf_r+0x1b2>
   109e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   109e6:	4453      	add	r3, sl
   109e8:	9309      	str	r3, [sp, #36]	; 0x24
   109ea:	783b      	ldrb	r3, [r7, #0]
   109ec:	2b00      	cmp	r3, #0
   109ee:	f000 809c 	beq.w	10b2a <_svfiprintf_r+0x1b2>
   109f2:	2300      	movs	r3, #0
   109f4:	f04f 32ff 	mov.w	r2, #4294967295
   109f8:	9304      	str	r3, [sp, #16]
   109fa:	9307      	str	r3, [sp, #28]
   109fc:	9205      	str	r2, [sp, #20]
   109fe:	9306      	str	r3, [sp, #24]
   10a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   10a04:	931a      	str	r3, [sp, #104]	; 0x68
   10a06:	2205      	movs	r2, #5
   10a08:	7821      	ldrb	r1, [r4, #0]
   10a0a:	4850      	ldr	r0, [pc, #320]	; (10b4c <_svfiprintf_r+0x1d4>)
   10a0c:	f000 fc18 	bl	11240 <memchr>
   10a10:	1c67      	adds	r7, r4, #1
   10a12:	9b04      	ldr	r3, [sp, #16]
   10a14:	b9d8      	cbnz	r0, 10a4e <_svfiprintf_r+0xd6>
   10a16:	06d9      	lsls	r1, r3, #27
   10a18:	bf44      	itt	mi
   10a1a:	2220      	movmi	r2, #32
   10a1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   10a20:	071a      	lsls	r2, r3, #28
   10a22:	bf44      	itt	mi
   10a24:	222b      	movmi	r2, #43	; 0x2b
   10a26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   10a2a:	7822      	ldrb	r2, [r4, #0]
   10a2c:	2a2a      	cmp	r2, #42	; 0x2a
   10a2e:	d016      	beq.n	10a5e <_svfiprintf_r+0xe6>
   10a30:	9a07      	ldr	r2, [sp, #28]
   10a32:	2100      	movs	r1, #0
   10a34:	200a      	movs	r0, #10
   10a36:	4627      	mov	r7, r4
   10a38:	3401      	adds	r4, #1
   10a3a:	783b      	ldrb	r3, [r7, #0]
   10a3c:	3b30      	subs	r3, #48	; 0x30
   10a3e:	2b09      	cmp	r3, #9
   10a40:	d951      	bls.n	10ae6 <_svfiprintf_r+0x16e>
   10a42:	b1c9      	cbz	r1, 10a78 <_svfiprintf_r+0x100>
   10a44:	e011      	b.n	10a6a <_svfiprintf_r+0xf2>
   10a46:	2b25      	cmp	r3, #37	; 0x25
   10a48:	d0c0      	beq.n	109cc <_svfiprintf_r+0x54>
   10a4a:	4627      	mov	r7, r4
   10a4c:	e7b9      	b.n	109c2 <_svfiprintf_r+0x4a>
   10a4e:	4a3f      	ldr	r2, [pc, #252]	; (10b4c <_svfiprintf_r+0x1d4>)
   10a50:	1a80      	subs	r0, r0, r2
   10a52:	fa0b f000 	lsl.w	r0, fp, r0
   10a56:	4318      	orrs	r0, r3
   10a58:	9004      	str	r0, [sp, #16]
   10a5a:	463c      	mov	r4, r7
   10a5c:	e7d3      	b.n	10a06 <_svfiprintf_r+0x8e>
   10a5e:	9a03      	ldr	r2, [sp, #12]
   10a60:	1d11      	adds	r1, r2, #4
   10a62:	6812      	ldr	r2, [r2, #0]
   10a64:	9103      	str	r1, [sp, #12]
   10a66:	2a00      	cmp	r2, #0
   10a68:	db01      	blt.n	10a6e <_svfiprintf_r+0xf6>
   10a6a:	9207      	str	r2, [sp, #28]
   10a6c:	e004      	b.n	10a78 <_svfiprintf_r+0x100>
   10a6e:	4252      	negs	r2, r2
   10a70:	f043 0302 	orr.w	r3, r3, #2
   10a74:	9207      	str	r2, [sp, #28]
   10a76:	9304      	str	r3, [sp, #16]
   10a78:	783b      	ldrb	r3, [r7, #0]
   10a7a:	2b2e      	cmp	r3, #46	; 0x2e
   10a7c:	d10e      	bne.n	10a9c <_svfiprintf_r+0x124>
   10a7e:	787b      	ldrb	r3, [r7, #1]
   10a80:	2b2a      	cmp	r3, #42	; 0x2a
   10a82:	f107 0101 	add.w	r1, r7, #1
   10a86:	d132      	bne.n	10aee <_svfiprintf_r+0x176>
   10a88:	9b03      	ldr	r3, [sp, #12]
   10a8a:	1d1a      	adds	r2, r3, #4
   10a8c:	681b      	ldr	r3, [r3, #0]
   10a8e:	9203      	str	r2, [sp, #12]
   10a90:	2b00      	cmp	r3, #0
   10a92:	bfb8      	it	lt
   10a94:	f04f 33ff 	movlt.w	r3, #4294967295
   10a98:	3702      	adds	r7, #2
   10a9a:	9305      	str	r3, [sp, #20]
   10a9c:	4c2c      	ldr	r4, [pc, #176]	; (10b50 <_svfiprintf_r+0x1d8>)
   10a9e:	7839      	ldrb	r1, [r7, #0]
   10aa0:	2203      	movs	r2, #3
   10aa2:	4620      	mov	r0, r4
   10aa4:	f000 fbcc 	bl	11240 <memchr>
   10aa8:	b138      	cbz	r0, 10aba <_svfiprintf_r+0x142>
   10aaa:	2340      	movs	r3, #64	; 0x40
   10aac:	1b00      	subs	r0, r0, r4
   10aae:	fa03 f000 	lsl.w	r0, r3, r0
   10ab2:	9b04      	ldr	r3, [sp, #16]
   10ab4:	4303      	orrs	r3, r0
   10ab6:	9304      	str	r3, [sp, #16]
   10ab8:	3701      	adds	r7, #1
   10aba:	7839      	ldrb	r1, [r7, #0]
   10abc:	4825      	ldr	r0, [pc, #148]	; (10b54 <_svfiprintf_r+0x1dc>)
   10abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   10ac2:	2206      	movs	r2, #6
   10ac4:	1c7e      	adds	r6, r7, #1
   10ac6:	f000 fbbb 	bl	11240 <memchr>
   10aca:	2800      	cmp	r0, #0
   10acc:	d035      	beq.n	10b3a <_svfiprintf_r+0x1c2>
   10ace:	4b22      	ldr	r3, [pc, #136]	; (10b58 <_svfiprintf_r+0x1e0>)
   10ad0:	b9fb      	cbnz	r3, 10b12 <_svfiprintf_r+0x19a>
   10ad2:	9b03      	ldr	r3, [sp, #12]
   10ad4:	3307      	adds	r3, #7
   10ad6:	f023 0307 	bic.w	r3, r3, #7
   10ada:	3308      	adds	r3, #8
   10adc:	9303      	str	r3, [sp, #12]
   10ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ae0:	444b      	add	r3, r9
   10ae2:	9309      	str	r3, [sp, #36]	; 0x24
   10ae4:	e76c      	b.n	109c0 <_svfiprintf_r+0x48>
   10ae6:	fb00 3202 	mla	r2, r0, r2, r3
   10aea:	2101      	movs	r1, #1
   10aec:	e7a3      	b.n	10a36 <_svfiprintf_r+0xbe>
   10aee:	2300      	movs	r3, #0
   10af0:	9305      	str	r3, [sp, #20]
   10af2:	4618      	mov	r0, r3
   10af4:	240a      	movs	r4, #10
   10af6:	460f      	mov	r7, r1
   10af8:	3101      	adds	r1, #1
   10afa:	783a      	ldrb	r2, [r7, #0]
   10afc:	3a30      	subs	r2, #48	; 0x30
   10afe:	2a09      	cmp	r2, #9
   10b00:	d903      	bls.n	10b0a <_svfiprintf_r+0x192>
   10b02:	2b00      	cmp	r3, #0
   10b04:	d0ca      	beq.n	10a9c <_svfiprintf_r+0x124>
   10b06:	9005      	str	r0, [sp, #20]
   10b08:	e7c8      	b.n	10a9c <_svfiprintf_r+0x124>
   10b0a:	fb04 2000 	mla	r0, r4, r0, r2
   10b0e:	2301      	movs	r3, #1
   10b10:	e7f1      	b.n	10af6 <_svfiprintf_r+0x17e>
   10b12:	ab03      	add	r3, sp, #12
   10b14:	9300      	str	r3, [sp, #0]
   10b16:	462a      	mov	r2, r5
   10b18:	4b10      	ldr	r3, [pc, #64]	; (10b5c <_svfiprintf_r+0x1e4>)
   10b1a:	a904      	add	r1, sp, #16
   10b1c:	4640      	mov	r0, r8
   10b1e:	f3af 8000 	nop.w
   10b22:	f1b0 3fff 	cmp.w	r0, #4294967295
   10b26:	4681      	mov	r9, r0
   10b28:	d1d9      	bne.n	10ade <_svfiprintf_r+0x166>
   10b2a:	89ab      	ldrh	r3, [r5, #12]
   10b2c:	065b      	lsls	r3, r3, #25
   10b2e:	f53f af38 	bmi.w	109a2 <_svfiprintf_r+0x2a>
   10b32:	9809      	ldr	r0, [sp, #36]	; 0x24
   10b34:	b01d      	add	sp, #116	; 0x74
   10b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b3a:	ab03      	add	r3, sp, #12
   10b3c:	9300      	str	r3, [sp, #0]
   10b3e:	462a      	mov	r2, r5
   10b40:	4b06      	ldr	r3, [pc, #24]	; (10b5c <_svfiprintf_r+0x1e4>)
   10b42:	a904      	add	r1, sp, #16
   10b44:	4640      	mov	r0, r8
   10b46:	f000 f9bf 	bl	10ec8 <_printf_i>
   10b4a:	e7ea      	b.n	10b22 <_svfiprintf_r+0x1aa>
   10b4c:	00011df8 	.word	0x00011df8
   10b50:	00011dfe 	.word	0x00011dfe
   10b54:	00011e02 	.word	0x00011e02
   10b58:	00000000 	.word	0x00000000
   10b5c:	000108c1 	.word	0x000108c1

00010b60 <__sfputc_r>:
   10b60:	6893      	ldr	r3, [r2, #8]
   10b62:	3b01      	subs	r3, #1
   10b64:	2b00      	cmp	r3, #0
   10b66:	b410      	push	{r4}
   10b68:	6093      	str	r3, [r2, #8]
   10b6a:	da08      	bge.n	10b7e <__sfputc_r+0x1e>
   10b6c:	6994      	ldr	r4, [r2, #24]
   10b6e:	42a3      	cmp	r3, r4
   10b70:	db02      	blt.n	10b78 <__sfputc_r+0x18>
   10b72:	b2cb      	uxtb	r3, r1
   10b74:	2b0a      	cmp	r3, #10
   10b76:	d102      	bne.n	10b7e <__sfputc_r+0x1e>
   10b78:	bc10      	pop	{r4}
   10b7a:	f7ff bbff 	b.w	1037c <__swbuf_r>
   10b7e:	6813      	ldr	r3, [r2, #0]
   10b80:	1c58      	adds	r0, r3, #1
   10b82:	6010      	str	r0, [r2, #0]
   10b84:	7019      	strb	r1, [r3, #0]
   10b86:	b2c8      	uxtb	r0, r1
   10b88:	bc10      	pop	{r4}
   10b8a:	4770      	bx	lr

00010b8c <__sfputs_r>:
   10b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10b8e:	4606      	mov	r6, r0
   10b90:	460f      	mov	r7, r1
   10b92:	4614      	mov	r4, r2
   10b94:	18d5      	adds	r5, r2, r3
   10b96:	42ac      	cmp	r4, r5
   10b98:	d101      	bne.n	10b9e <__sfputs_r+0x12>
   10b9a:	2000      	movs	r0, #0
   10b9c:	e007      	b.n	10bae <__sfputs_r+0x22>
   10b9e:	463a      	mov	r2, r7
   10ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
   10ba4:	4630      	mov	r0, r6
   10ba6:	f7ff ffdb 	bl	10b60 <__sfputc_r>
   10baa:	1c43      	adds	r3, r0, #1
   10bac:	d1f3      	bne.n	10b96 <__sfputs_r+0xa>
   10bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010bb0 <_vfiprintf_r>:
   10bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bb4:	b09d      	sub	sp, #116	; 0x74
   10bb6:	460c      	mov	r4, r1
   10bb8:	4617      	mov	r7, r2
   10bba:	9303      	str	r3, [sp, #12]
   10bbc:	4606      	mov	r6, r0
   10bbe:	b118      	cbz	r0, 10bc8 <_vfiprintf_r+0x18>
   10bc0:	6983      	ldr	r3, [r0, #24]
   10bc2:	b90b      	cbnz	r3, 10bc8 <_vfiprintf_r+0x18>
   10bc4:	f7ff fd8c 	bl	106e0 <__sinit>
   10bc8:	4b7c      	ldr	r3, [pc, #496]	; (10dbc <_vfiprintf_r+0x20c>)
   10bca:	429c      	cmp	r4, r3
   10bcc:	d157      	bne.n	10c7e <_vfiprintf_r+0xce>
   10bce:	6874      	ldr	r4, [r6, #4]
   10bd0:	89a3      	ldrh	r3, [r4, #12]
   10bd2:	0718      	lsls	r0, r3, #28
   10bd4:	d55d      	bpl.n	10c92 <_vfiprintf_r+0xe2>
   10bd6:	6923      	ldr	r3, [r4, #16]
   10bd8:	2b00      	cmp	r3, #0
   10bda:	d05a      	beq.n	10c92 <_vfiprintf_r+0xe2>
   10bdc:	2300      	movs	r3, #0
   10bde:	9309      	str	r3, [sp, #36]	; 0x24
   10be0:	2320      	movs	r3, #32
   10be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   10be6:	2330      	movs	r3, #48	; 0x30
   10be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   10bec:	f04f 0b01 	mov.w	fp, #1
   10bf0:	46b8      	mov	r8, r7
   10bf2:	4645      	mov	r5, r8
   10bf4:	f815 3b01 	ldrb.w	r3, [r5], #1
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	d155      	bne.n	10ca8 <_vfiprintf_r+0xf8>
   10bfc:	ebb8 0a07 	subs.w	sl, r8, r7
   10c00:	d00b      	beq.n	10c1a <_vfiprintf_r+0x6a>
   10c02:	4653      	mov	r3, sl
   10c04:	463a      	mov	r2, r7
   10c06:	4621      	mov	r1, r4
   10c08:	4630      	mov	r0, r6
   10c0a:	f7ff ffbf 	bl	10b8c <__sfputs_r>
   10c0e:	3001      	adds	r0, #1
   10c10:	f000 80c4 	beq.w	10d9c <_vfiprintf_r+0x1ec>
   10c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c16:	4453      	add	r3, sl
   10c18:	9309      	str	r3, [sp, #36]	; 0x24
   10c1a:	f898 3000 	ldrb.w	r3, [r8]
   10c1e:	2b00      	cmp	r3, #0
   10c20:	f000 80bc 	beq.w	10d9c <_vfiprintf_r+0x1ec>
   10c24:	2300      	movs	r3, #0
   10c26:	f04f 32ff 	mov.w	r2, #4294967295
   10c2a:	9304      	str	r3, [sp, #16]
   10c2c:	9307      	str	r3, [sp, #28]
   10c2e:	9205      	str	r2, [sp, #20]
   10c30:	9306      	str	r3, [sp, #24]
   10c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   10c36:	931a      	str	r3, [sp, #104]	; 0x68
   10c38:	2205      	movs	r2, #5
   10c3a:	7829      	ldrb	r1, [r5, #0]
   10c3c:	4860      	ldr	r0, [pc, #384]	; (10dc0 <_vfiprintf_r+0x210>)
   10c3e:	f000 faff 	bl	11240 <memchr>
   10c42:	f105 0801 	add.w	r8, r5, #1
   10c46:	9b04      	ldr	r3, [sp, #16]
   10c48:	2800      	cmp	r0, #0
   10c4a:	d131      	bne.n	10cb0 <_vfiprintf_r+0x100>
   10c4c:	06d9      	lsls	r1, r3, #27
   10c4e:	bf44      	itt	mi
   10c50:	2220      	movmi	r2, #32
   10c52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   10c56:	071a      	lsls	r2, r3, #28
   10c58:	bf44      	itt	mi
   10c5a:	222b      	movmi	r2, #43	; 0x2b
   10c5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   10c60:	782a      	ldrb	r2, [r5, #0]
   10c62:	2a2a      	cmp	r2, #42	; 0x2a
   10c64:	d02c      	beq.n	10cc0 <_vfiprintf_r+0x110>
   10c66:	9a07      	ldr	r2, [sp, #28]
   10c68:	2100      	movs	r1, #0
   10c6a:	200a      	movs	r0, #10
   10c6c:	46a8      	mov	r8, r5
   10c6e:	3501      	adds	r5, #1
   10c70:	f898 3000 	ldrb.w	r3, [r8]
   10c74:	3b30      	subs	r3, #48	; 0x30
   10c76:	2b09      	cmp	r3, #9
   10c78:	d96d      	bls.n	10d56 <_vfiprintf_r+0x1a6>
   10c7a:	b371      	cbz	r1, 10cda <_vfiprintf_r+0x12a>
   10c7c:	e026      	b.n	10ccc <_vfiprintf_r+0x11c>
   10c7e:	4b51      	ldr	r3, [pc, #324]	; (10dc4 <_vfiprintf_r+0x214>)
   10c80:	429c      	cmp	r4, r3
   10c82:	d101      	bne.n	10c88 <_vfiprintf_r+0xd8>
   10c84:	68b4      	ldr	r4, [r6, #8]
   10c86:	e7a3      	b.n	10bd0 <_vfiprintf_r+0x20>
   10c88:	4b4f      	ldr	r3, [pc, #316]	; (10dc8 <_vfiprintf_r+0x218>)
   10c8a:	429c      	cmp	r4, r3
   10c8c:	bf08      	it	eq
   10c8e:	68f4      	ldreq	r4, [r6, #12]
   10c90:	e79e      	b.n	10bd0 <_vfiprintf_r+0x20>
   10c92:	4621      	mov	r1, r4
   10c94:	4630      	mov	r0, r6
   10c96:	f7ff fbc3 	bl	10420 <__swsetup_r>
   10c9a:	2800      	cmp	r0, #0
   10c9c:	d09e      	beq.n	10bdc <_vfiprintf_r+0x2c>
   10c9e:	f04f 30ff 	mov.w	r0, #4294967295
   10ca2:	b01d      	add	sp, #116	; 0x74
   10ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ca8:	2b25      	cmp	r3, #37	; 0x25
   10caa:	d0a7      	beq.n	10bfc <_vfiprintf_r+0x4c>
   10cac:	46a8      	mov	r8, r5
   10cae:	e7a0      	b.n	10bf2 <_vfiprintf_r+0x42>
   10cb0:	4a43      	ldr	r2, [pc, #268]	; (10dc0 <_vfiprintf_r+0x210>)
   10cb2:	1a80      	subs	r0, r0, r2
   10cb4:	fa0b f000 	lsl.w	r0, fp, r0
   10cb8:	4318      	orrs	r0, r3
   10cba:	9004      	str	r0, [sp, #16]
   10cbc:	4645      	mov	r5, r8
   10cbe:	e7bb      	b.n	10c38 <_vfiprintf_r+0x88>
   10cc0:	9a03      	ldr	r2, [sp, #12]
   10cc2:	1d11      	adds	r1, r2, #4
   10cc4:	6812      	ldr	r2, [r2, #0]
   10cc6:	9103      	str	r1, [sp, #12]
   10cc8:	2a00      	cmp	r2, #0
   10cca:	db01      	blt.n	10cd0 <_vfiprintf_r+0x120>
   10ccc:	9207      	str	r2, [sp, #28]
   10cce:	e004      	b.n	10cda <_vfiprintf_r+0x12a>
   10cd0:	4252      	negs	r2, r2
   10cd2:	f043 0302 	orr.w	r3, r3, #2
   10cd6:	9207      	str	r2, [sp, #28]
   10cd8:	9304      	str	r3, [sp, #16]
   10cda:	f898 3000 	ldrb.w	r3, [r8]
   10cde:	2b2e      	cmp	r3, #46	; 0x2e
   10ce0:	d110      	bne.n	10d04 <_vfiprintf_r+0x154>
   10ce2:	f898 3001 	ldrb.w	r3, [r8, #1]
   10ce6:	2b2a      	cmp	r3, #42	; 0x2a
   10ce8:	f108 0101 	add.w	r1, r8, #1
   10cec:	d137      	bne.n	10d5e <_vfiprintf_r+0x1ae>
   10cee:	9b03      	ldr	r3, [sp, #12]
   10cf0:	1d1a      	adds	r2, r3, #4
   10cf2:	681b      	ldr	r3, [r3, #0]
   10cf4:	9203      	str	r2, [sp, #12]
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	bfb8      	it	lt
   10cfa:	f04f 33ff 	movlt.w	r3, #4294967295
   10cfe:	f108 0802 	add.w	r8, r8, #2
   10d02:	9305      	str	r3, [sp, #20]
   10d04:	4d31      	ldr	r5, [pc, #196]	; (10dcc <_vfiprintf_r+0x21c>)
   10d06:	f898 1000 	ldrb.w	r1, [r8]
   10d0a:	2203      	movs	r2, #3
   10d0c:	4628      	mov	r0, r5
   10d0e:	f000 fa97 	bl	11240 <memchr>
   10d12:	b140      	cbz	r0, 10d26 <_vfiprintf_r+0x176>
   10d14:	2340      	movs	r3, #64	; 0x40
   10d16:	1b40      	subs	r0, r0, r5
   10d18:	fa03 f000 	lsl.w	r0, r3, r0
   10d1c:	9b04      	ldr	r3, [sp, #16]
   10d1e:	4303      	orrs	r3, r0
   10d20:	9304      	str	r3, [sp, #16]
   10d22:	f108 0801 	add.w	r8, r8, #1
   10d26:	f898 1000 	ldrb.w	r1, [r8]
   10d2a:	4829      	ldr	r0, [pc, #164]	; (10dd0 <_vfiprintf_r+0x220>)
   10d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   10d30:	2206      	movs	r2, #6
   10d32:	f108 0701 	add.w	r7, r8, #1
   10d36:	f000 fa83 	bl	11240 <memchr>
   10d3a:	2800      	cmp	r0, #0
   10d3c:	d034      	beq.n	10da8 <_vfiprintf_r+0x1f8>
   10d3e:	4b25      	ldr	r3, [pc, #148]	; (10dd4 <_vfiprintf_r+0x224>)
   10d40:	bb03      	cbnz	r3, 10d84 <_vfiprintf_r+0x1d4>
   10d42:	9b03      	ldr	r3, [sp, #12]
   10d44:	3307      	adds	r3, #7
   10d46:	f023 0307 	bic.w	r3, r3, #7
   10d4a:	3308      	adds	r3, #8
   10d4c:	9303      	str	r3, [sp, #12]
   10d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d50:	444b      	add	r3, r9
   10d52:	9309      	str	r3, [sp, #36]	; 0x24
   10d54:	e74c      	b.n	10bf0 <_vfiprintf_r+0x40>
   10d56:	fb00 3202 	mla	r2, r0, r2, r3
   10d5a:	2101      	movs	r1, #1
   10d5c:	e786      	b.n	10c6c <_vfiprintf_r+0xbc>
   10d5e:	2300      	movs	r3, #0
   10d60:	9305      	str	r3, [sp, #20]
   10d62:	4618      	mov	r0, r3
   10d64:	250a      	movs	r5, #10
   10d66:	4688      	mov	r8, r1
   10d68:	3101      	adds	r1, #1
   10d6a:	f898 2000 	ldrb.w	r2, [r8]
   10d6e:	3a30      	subs	r2, #48	; 0x30
   10d70:	2a09      	cmp	r2, #9
   10d72:	d903      	bls.n	10d7c <_vfiprintf_r+0x1cc>
   10d74:	2b00      	cmp	r3, #0
   10d76:	d0c5      	beq.n	10d04 <_vfiprintf_r+0x154>
   10d78:	9005      	str	r0, [sp, #20]
   10d7a:	e7c3      	b.n	10d04 <_vfiprintf_r+0x154>
   10d7c:	fb05 2000 	mla	r0, r5, r0, r2
   10d80:	2301      	movs	r3, #1
   10d82:	e7f0      	b.n	10d66 <_vfiprintf_r+0x1b6>
   10d84:	ab03      	add	r3, sp, #12
   10d86:	9300      	str	r3, [sp, #0]
   10d88:	4622      	mov	r2, r4
   10d8a:	4b13      	ldr	r3, [pc, #76]	; (10dd8 <_vfiprintf_r+0x228>)
   10d8c:	a904      	add	r1, sp, #16
   10d8e:	4630      	mov	r0, r6
   10d90:	f3af 8000 	nop.w
   10d94:	f1b0 3fff 	cmp.w	r0, #4294967295
   10d98:	4681      	mov	r9, r0
   10d9a:	d1d8      	bne.n	10d4e <_vfiprintf_r+0x19e>
   10d9c:	89a3      	ldrh	r3, [r4, #12]
   10d9e:	065b      	lsls	r3, r3, #25
   10da0:	f53f af7d 	bmi.w	10c9e <_vfiprintf_r+0xee>
   10da4:	9809      	ldr	r0, [sp, #36]	; 0x24
   10da6:	e77c      	b.n	10ca2 <_vfiprintf_r+0xf2>
   10da8:	ab03      	add	r3, sp, #12
   10daa:	9300      	str	r3, [sp, #0]
   10dac:	4622      	mov	r2, r4
   10dae:	4b0a      	ldr	r3, [pc, #40]	; (10dd8 <_vfiprintf_r+0x228>)
   10db0:	a904      	add	r1, sp, #16
   10db2:	4630      	mov	r0, r6
   10db4:	f000 f888 	bl	10ec8 <_printf_i>
   10db8:	e7ec      	b.n	10d94 <_vfiprintf_r+0x1e4>
   10dba:	bf00      	nop
   10dbc:	00011db8 	.word	0x00011db8
   10dc0:	00011df8 	.word	0x00011df8
   10dc4:	00011dd8 	.word	0x00011dd8
   10dc8:	00011d98 	.word	0x00011d98
   10dcc:	00011dfe 	.word	0x00011dfe
   10dd0:	00011e02 	.word	0x00011e02
   10dd4:	00000000 	.word	0x00000000
   10dd8:	00010b8d 	.word	0x00010b8d

00010ddc <_printf_common>:
   10ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10de0:	4691      	mov	r9, r2
   10de2:	461f      	mov	r7, r3
   10de4:	688a      	ldr	r2, [r1, #8]
   10de6:	690b      	ldr	r3, [r1, #16]
   10de8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10dec:	4293      	cmp	r3, r2
   10dee:	bfb8      	it	lt
   10df0:	4613      	movlt	r3, r2
   10df2:	f8c9 3000 	str.w	r3, [r9]
   10df6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   10dfa:	4606      	mov	r6, r0
   10dfc:	460c      	mov	r4, r1
   10dfe:	b112      	cbz	r2, 10e06 <_printf_common+0x2a>
   10e00:	3301      	adds	r3, #1
   10e02:	f8c9 3000 	str.w	r3, [r9]
   10e06:	6823      	ldr	r3, [r4, #0]
   10e08:	0699      	lsls	r1, r3, #26
   10e0a:	bf42      	ittt	mi
   10e0c:	f8d9 3000 	ldrmi.w	r3, [r9]
   10e10:	3302      	addmi	r3, #2
   10e12:	f8c9 3000 	strmi.w	r3, [r9]
   10e16:	6825      	ldr	r5, [r4, #0]
   10e18:	f015 0506 	ands.w	r5, r5, #6
   10e1c:	d107      	bne.n	10e2e <_printf_common+0x52>
   10e1e:	f104 0a19 	add.w	sl, r4, #25
   10e22:	68e3      	ldr	r3, [r4, #12]
   10e24:	f8d9 2000 	ldr.w	r2, [r9]
   10e28:	1a9b      	subs	r3, r3, r2
   10e2a:	429d      	cmp	r5, r3
   10e2c:	db29      	blt.n	10e82 <_printf_common+0xa6>
   10e2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   10e32:	6822      	ldr	r2, [r4, #0]
   10e34:	3300      	adds	r3, #0
   10e36:	bf18      	it	ne
   10e38:	2301      	movne	r3, #1
   10e3a:	0692      	lsls	r2, r2, #26
   10e3c:	d42e      	bmi.n	10e9c <_printf_common+0xc0>
   10e3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10e42:	4639      	mov	r1, r7
   10e44:	4630      	mov	r0, r6
   10e46:	47c0      	blx	r8
   10e48:	3001      	adds	r0, #1
   10e4a:	d021      	beq.n	10e90 <_printf_common+0xb4>
   10e4c:	6823      	ldr	r3, [r4, #0]
   10e4e:	68e5      	ldr	r5, [r4, #12]
   10e50:	f8d9 2000 	ldr.w	r2, [r9]
   10e54:	f003 0306 	and.w	r3, r3, #6
   10e58:	2b04      	cmp	r3, #4
   10e5a:	bf08      	it	eq
   10e5c:	1aad      	subeq	r5, r5, r2
   10e5e:	68a3      	ldr	r3, [r4, #8]
   10e60:	6922      	ldr	r2, [r4, #16]
   10e62:	bf0c      	ite	eq
   10e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   10e68:	2500      	movne	r5, #0
   10e6a:	4293      	cmp	r3, r2
   10e6c:	bfc4      	itt	gt
   10e6e:	1a9b      	subgt	r3, r3, r2
   10e70:	18ed      	addgt	r5, r5, r3
   10e72:	f04f 0900 	mov.w	r9, #0
   10e76:	341a      	adds	r4, #26
   10e78:	454d      	cmp	r5, r9
   10e7a:	d11b      	bne.n	10eb4 <_printf_common+0xd8>
   10e7c:	2000      	movs	r0, #0
   10e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e82:	2301      	movs	r3, #1
   10e84:	4652      	mov	r2, sl
   10e86:	4639      	mov	r1, r7
   10e88:	4630      	mov	r0, r6
   10e8a:	47c0      	blx	r8
   10e8c:	3001      	adds	r0, #1
   10e8e:	d103      	bne.n	10e98 <_printf_common+0xbc>
   10e90:	f04f 30ff 	mov.w	r0, #4294967295
   10e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e98:	3501      	adds	r5, #1
   10e9a:	e7c2      	b.n	10e22 <_printf_common+0x46>
   10e9c:	18e1      	adds	r1, r4, r3
   10e9e:	1c5a      	adds	r2, r3, #1
   10ea0:	2030      	movs	r0, #48	; 0x30
   10ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   10ea6:	4422      	add	r2, r4
   10ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   10eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   10eb0:	3302      	adds	r3, #2
   10eb2:	e7c4      	b.n	10e3e <_printf_common+0x62>
   10eb4:	2301      	movs	r3, #1
   10eb6:	4622      	mov	r2, r4
   10eb8:	4639      	mov	r1, r7
   10eba:	4630      	mov	r0, r6
   10ebc:	47c0      	blx	r8
   10ebe:	3001      	adds	r0, #1
   10ec0:	d0e6      	beq.n	10e90 <_printf_common+0xb4>
   10ec2:	f109 0901 	add.w	r9, r9, #1
   10ec6:	e7d7      	b.n	10e78 <_printf_common+0x9c>

00010ec8 <_printf_i>:
   10ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10ecc:	4617      	mov	r7, r2
   10ece:	7e0a      	ldrb	r2, [r1, #24]
   10ed0:	b085      	sub	sp, #20
   10ed2:	2a6e      	cmp	r2, #110	; 0x6e
   10ed4:	4698      	mov	r8, r3
   10ed6:	4606      	mov	r6, r0
   10ed8:	460c      	mov	r4, r1
   10eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10edc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
   10ee0:	f000 80bc 	beq.w	1105c <_printf_i+0x194>
   10ee4:	d81a      	bhi.n	10f1c <_printf_i+0x54>
   10ee6:	2a63      	cmp	r2, #99	; 0x63
   10ee8:	d02e      	beq.n	10f48 <_printf_i+0x80>
   10eea:	d80a      	bhi.n	10f02 <_printf_i+0x3a>
   10eec:	2a00      	cmp	r2, #0
   10eee:	f000 80c8 	beq.w	11082 <_printf_i+0x1ba>
   10ef2:	2a58      	cmp	r2, #88	; 0x58
   10ef4:	f000 808a 	beq.w	1100c <_printf_i+0x144>
   10ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   10efc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   10f00:	e02a      	b.n	10f58 <_printf_i+0x90>
   10f02:	2a64      	cmp	r2, #100	; 0x64
   10f04:	d001      	beq.n	10f0a <_printf_i+0x42>
   10f06:	2a69      	cmp	r2, #105	; 0x69
   10f08:	d1f6      	bne.n	10ef8 <_printf_i+0x30>
   10f0a:	6821      	ldr	r1, [r4, #0]
   10f0c:	681a      	ldr	r2, [r3, #0]
   10f0e:	f011 0f80 	tst.w	r1, #128	; 0x80
   10f12:	d023      	beq.n	10f5c <_printf_i+0x94>
   10f14:	1d11      	adds	r1, r2, #4
   10f16:	6019      	str	r1, [r3, #0]
   10f18:	6813      	ldr	r3, [r2, #0]
   10f1a:	e027      	b.n	10f6c <_printf_i+0xa4>
   10f1c:	2a73      	cmp	r2, #115	; 0x73
   10f1e:	f000 80b4 	beq.w	1108a <_printf_i+0x1c2>
   10f22:	d808      	bhi.n	10f36 <_printf_i+0x6e>
   10f24:	2a6f      	cmp	r2, #111	; 0x6f
   10f26:	d02a      	beq.n	10f7e <_printf_i+0xb6>
   10f28:	2a70      	cmp	r2, #112	; 0x70
   10f2a:	d1e5      	bne.n	10ef8 <_printf_i+0x30>
   10f2c:	680a      	ldr	r2, [r1, #0]
   10f2e:	f042 0220 	orr.w	r2, r2, #32
   10f32:	600a      	str	r2, [r1, #0]
   10f34:	e003      	b.n	10f3e <_printf_i+0x76>
   10f36:	2a75      	cmp	r2, #117	; 0x75
   10f38:	d021      	beq.n	10f7e <_printf_i+0xb6>
   10f3a:	2a78      	cmp	r2, #120	; 0x78
   10f3c:	d1dc      	bne.n	10ef8 <_printf_i+0x30>
   10f3e:	2278      	movs	r2, #120	; 0x78
   10f40:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   10f44:	496e      	ldr	r1, [pc, #440]	; (11100 <_printf_i+0x238>)
   10f46:	e064      	b.n	11012 <_printf_i+0x14a>
   10f48:	681a      	ldr	r2, [r3, #0]
   10f4a:	f101 0542 	add.w	r5, r1, #66	; 0x42
   10f4e:	1d11      	adds	r1, r2, #4
   10f50:	6019      	str	r1, [r3, #0]
   10f52:	6813      	ldr	r3, [r2, #0]
   10f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   10f58:	2301      	movs	r3, #1
   10f5a:	e0a3      	b.n	110a4 <_printf_i+0x1dc>
   10f5c:	f011 0f40 	tst.w	r1, #64	; 0x40
   10f60:	f102 0104 	add.w	r1, r2, #4
   10f64:	6019      	str	r1, [r3, #0]
   10f66:	d0d7      	beq.n	10f18 <_printf_i+0x50>
   10f68:	f9b2 3000 	ldrsh.w	r3, [r2]
   10f6c:	2b00      	cmp	r3, #0
   10f6e:	da03      	bge.n	10f78 <_printf_i+0xb0>
   10f70:	222d      	movs	r2, #45	; 0x2d
   10f72:	425b      	negs	r3, r3
   10f74:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
   10f78:	4962      	ldr	r1, [pc, #392]	; (11104 <_printf_i+0x23c>)
   10f7a:	220a      	movs	r2, #10
   10f7c:	e017      	b.n	10fae <_printf_i+0xe6>
   10f7e:	6820      	ldr	r0, [r4, #0]
   10f80:	6819      	ldr	r1, [r3, #0]
   10f82:	f010 0f80 	tst.w	r0, #128	; 0x80
   10f86:	d003      	beq.n	10f90 <_printf_i+0xc8>
   10f88:	1d08      	adds	r0, r1, #4
   10f8a:	6018      	str	r0, [r3, #0]
   10f8c:	680b      	ldr	r3, [r1, #0]
   10f8e:	e006      	b.n	10f9e <_printf_i+0xd6>
   10f90:	f010 0f40 	tst.w	r0, #64	; 0x40
   10f94:	f101 0004 	add.w	r0, r1, #4
   10f98:	6018      	str	r0, [r3, #0]
   10f9a:	d0f7      	beq.n	10f8c <_printf_i+0xc4>
   10f9c:	880b      	ldrh	r3, [r1, #0]
   10f9e:	4959      	ldr	r1, [pc, #356]	; (11104 <_printf_i+0x23c>)
   10fa0:	2a6f      	cmp	r2, #111	; 0x6f
   10fa2:	bf14      	ite	ne
   10fa4:	220a      	movne	r2, #10
   10fa6:	2208      	moveq	r2, #8
   10fa8:	2000      	movs	r0, #0
   10faa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   10fae:	6865      	ldr	r5, [r4, #4]
   10fb0:	60a5      	str	r5, [r4, #8]
   10fb2:	2d00      	cmp	r5, #0
   10fb4:	f2c0 809c 	blt.w	110f0 <_printf_i+0x228>
   10fb8:	6820      	ldr	r0, [r4, #0]
   10fba:	f020 0004 	bic.w	r0, r0, #4
   10fbe:	6020      	str	r0, [r4, #0]
   10fc0:	2b00      	cmp	r3, #0
   10fc2:	d13f      	bne.n	11044 <_printf_i+0x17c>
   10fc4:	2d00      	cmp	r5, #0
   10fc6:	f040 8095 	bne.w	110f4 <_printf_i+0x22c>
   10fca:	4675      	mov	r5, lr
   10fcc:	2a08      	cmp	r2, #8
   10fce:	d10b      	bne.n	10fe8 <_printf_i+0x120>
   10fd0:	6823      	ldr	r3, [r4, #0]
   10fd2:	07da      	lsls	r2, r3, #31
   10fd4:	d508      	bpl.n	10fe8 <_printf_i+0x120>
   10fd6:	6923      	ldr	r3, [r4, #16]
   10fd8:	6862      	ldr	r2, [r4, #4]
   10fda:	429a      	cmp	r2, r3
   10fdc:	bfde      	ittt	le
   10fde:	2330      	movle	r3, #48	; 0x30
   10fe0:	f805 3c01 	strble.w	r3, [r5, #-1]
   10fe4:	f105 35ff 	addle.w	r5, r5, #4294967295
   10fe8:	ebae 0305 	sub.w	r3, lr, r5
   10fec:	6123      	str	r3, [r4, #16]
   10fee:	f8cd 8000 	str.w	r8, [sp]
   10ff2:	463b      	mov	r3, r7
   10ff4:	aa03      	add	r2, sp, #12
   10ff6:	4621      	mov	r1, r4
   10ff8:	4630      	mov	r0, r6
   10ffa:	f7ff feef 	bl	10ddc <_printf_common>
   10ffe:	3001      	adds	r0, #1
   11000:	d155      	bne.n	110ae <_printf_i+0x1e6>
   11002:	f04f 30ff 	mov.w	r0, #4294967295
   11006:	b005      	add	sp, #20
   11008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1100c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
   11010:	493c      	ldr	r1, [pc, #240]	; (11104 <_printf_i+0x23c>)
   11012:	6822      	ldr	r2, [r4, #0]
   11014:	6818      	ldr	r0, [r3, #0]
   11016:	f012 0f80 	tst.w	r2, #128	; 0x80
   1101a:	f100 0504 	add.w	r5, r0, #4
   1101e:	601d      	str	r5, [r3, #0]
   11020:	d001      	beq.n	11026 <_printf_i+0x15e>
   11022:	6803      	ldr	r3, [r0, #0]
   11024:	e002      	b.n	1102c <_printf_i+0x164>
   11026:	0655      	lsls	r5, r2, #25
   11028:	d5fb      	bpl.n	11022 <_printf_i+0x15a>
   1102a:	8803      	ldrh	r3, [r0, #0]
   1102c:	07d0      	lsls	r0, r2, #31
   1102e:	bf44      	itt	mi
   11030:	f042 0220 	orrmi.w	r2, r2, #32
   11034:	6022      	strmi	r2, [r4, #0]
   11036:	b91b      	cbnz	r3, 11040 <_printf_i+0x178>
   11038:	6822      	ldr	r2, [r4, #0]
   1103a:	f022 0220 	bic.w	r2, r2, #32
   1103e:	6022      	str	r2, [r4, #0]
   11040:	2210      	movs	r2, #16
   11042:	e7b1      	b.n	10fa8 <_printf_i+0xe0>
   11044:	4675      	mov	r5, lr
   11046:	fbb3 f0f2 	udiv	r0, r3, r2
   1104a:	fb02 3310 	mls	r3, r2, r0, r3
   1104e:	5ccb      	ldrb	r3, [r1, r3]
   11050:	f805 3d01 	strb.w	r3, [r5, #-1]!
   11054:	4603      	mov	r3, r0
   11056:	2800      	cmp	r0, #0
   11058:	d1f5      	bne.n	11046 <_printf_i+0x17e>
   1105a:	e7b7      	b.n	10fcc <_printf_i+0x104>
   1105c:	6808      	ldr	r0, [r1, #0]
   1105e:	681a      	ldr	r2, [r3, #0]
   11060:	6949      	ldr	r1, [r1, #20]
   11062:	f010 0f80 	tst.w	r0, #128	; 0x80
   11066:	d004      	beq.n	11072 <_printf_i+0x1aa>
   11068:	1d10      	adds	r0, r2, #4
   1106a:	6018      	str	r0, [r3, #0]
   1106c:	6813      	ldr	r3, [r2, #0]
   1106e:	6019      	str	r1, [r3, #0]
   11070:	e007      	b.n	11082 <_printf_i+0x1ba>
   11072:	f010 0f40 	tst.w	r0, #64	; 0x40
   11076:	f102 0004 	add.w	r0, r2, #4
   1107a:	6018      	str	r0, [r3, #0]
   1107c:	6813      	ldr	r3, [r2, #0]
   1107e:	d0f6      	beq.n	1106e <_printf_i+0x1a6>
   11080:	8019      	strh	r1, [r3, #0]
   11082:	2300      	movs	r3, #0
   11084:	6123      	str	r3, [r4, #16]
   11086:	4675      	mov	r5, lr
   11088:	e7b1      	b.n	10fee <_printf_i+0x126>
   1108a:	681a      	ldr	r2, [r3, #0]
   1108c:	1d11      	adds	r1, r2, #4
   1108e:	6019      	str	r1, [r3, #0]
   11090:	6815      	ldr	r5, [r2, #0]
   11092:	6862      	ldr	r2, [r4, #4]
   11094:	2100      	movs	r1, #0
   11096:	4628      	mov	r0, r5
   11098:	f000 f8d2 	bl	11240 <memchr>
   1109c:	b108      	cbz	r0, 110a2 <_printf_i+0x1da>
   1109e:	1b40      	subs	r0, r0, r5
   110a0:	6060      	str	r0, [r4, #4]
   110a2:	6863      	ldr	r3, [r4, #4]
   110a4:	6123      	str	r3, [r4, #16]
   110a6:	2300      	movs	r3, #0
   110a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   110ac:	e79f      	b.n	10fee <_printf_i+0x126>
   110ae:	6923      	ldr	r3, [r4, #16]
   110b0:	462a      	mov	r2, r5
   110b2:	4639      	mov	r1, r7
   110b4:	4630      	mov	r0, r6
   110b6:	47c0      	blx	r8
   110b8:	3001      	adds	r0, #1
   110ba:	d0a2      	beq.n	11002 <_printf_i+0x13a>
   110bc:	6823      	ldr	r3, [r4, #0]
   110be:	079b      	lsls	r3, r3, #30
   110c0:	d507      	bpl.n	110d2 <_printf_i+0x20a>
   110c2:	2500      	movs	r5, #0
   110c4:	f104 0919 	add.w	r9, r4, #25
   110c8:	68e3      	ldr	r3, [r4, #12]
   110ca:	9a03      	ldr	r2, [sp, #12]
   110cc:	1a9b      	subs	r3, r3, r2
   110ce:	429d      	cmp	r5, r3
   110d0:	db05      	blt.n	110de <_printf_i+0x216>
   110d2:	68e0      	ldr	r0, [r4, #12]
   110d4:	9b03      	ldr	r3, [sp, #12]
   110d6:	4298      	cmp	r0, r3
   110d8:	bfb8      	it	lt
   110da:	4618      	movlt	r0, r3
   110dc:	e793      	b.n	11006 <_printf_i+0x13e>
   110de:	2301      	movs	r3, #1
   110e0:	464a      	mov	r2, r9
   110e2:	4639      	mov	r1, r7
   110e4:	4630      	mov	r0, r6
   110e6:	47c0      	blx	r8
   110e8:	3001      	adds	r0, #1
   110ea:	d08a      	beq.n	11002 <_printf_i+0x13a>
   110ec:	3501      	adds	r5, #1
   110ee:	e7eb      	b.n	110c8 <_printf_i+0x200>
   110f0:	2b00      	cmp	r3, #0
   110f2:	d1a7      	bne.n	11044 <_printf_i+0x17c>
   110f4:	780b      	ldrb	r3, [r1, #0]
   110f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   110fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
   110fe:	e765      	b.n	10fcc <_printf_i+0x104>
   11100:	00011e1a 	.word	0x00011e1a
   11104:	00011e09 	.word	0x00011e09

00011108 <__sread>:
   11108:	b510      	push	{r4, lr}
   1110a:	460c      	mov	r4, r1
   1110c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11110:	f000 f926 	bl	11360 <_read_r>
   11114:	2800      	cmp	r0, #0
   11116:	bfab      	itete	ge
   11118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   1111a:	89a3      	ldrhlt	r3, [r4, #12]
   1111c:	181b      	addge	r3, r3, r0
   1111e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   11122:	bfac      	ite	ge
   11124:	6563      	strge	r3, [r4, #84]	; 0x54
   11126:	81a3      	strhlt	r3, [r4, #12]
   11128:	bd10      	pop	{r4, pc}

0001112a <__swrite>:
   1112a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1112e:	461f      	mov	r7, r3
   11130:	898b      	ldrh	r3, [r1, #12]
   11132:	05db      	lsls	r3, r3, #23
   11134:	4605      	mov	r5, r0
   11136:	460c      	mov	r4, r1
   11138:	4616      	mov	r6, r2
   1113a:	d505      	bpl.n	11148 <__swrite+0x1e>
   1113c:	2302      	movs	r3, #2
   1113e:	2200      	movs	r2, #0
   11140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11144:	f000 f868 	bl	11218 <_lseek_r>
   11148:	89a3      	ldrh	r3, [r4, #12]
   1114a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1114e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   11152:	81a3      	strh	r3, [r4, #12]
   11154:	4632      	mov	r2, r6
   11156:	463b      	mov	r3, r7
   11158:	4628      	mov	r0, r5
   1115a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1115e:	f000 b817 	b.w	11190 <_write_r>

00011162 <__sseek>:
   11162:	b510      	push	{r4, lr}
   11164:	460c      	mov	r4, r1
   11166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1116a:	f000 f855 	bl	11218 <_lseek_r>
   1116e:	1c43      	adds	r3, r0, #1
   11170:	89a3      	ldrh	r3, [r4, #12]
   11172:	bf15      	itete	ne
   11174:	6560      	strne	r0, [r4, #84]	; 0x54
   11176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1117a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   1117e:	81a3      	strheq	r3, [r4, #12]
   11180:	bf18      	it	ne
   11182:	81a3      	strhne	r3, [r4, #12]
   11184:	bd10      	pop	{r4, pc}

00011186 <__sclose>:
   11186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1118a:	f000 b813 	b.w	111b4 <_close_r>
	...

00011190 <_write_r>:
   11190:	b538      	push	{r3, r4, r5, lr}
   11192:	4c07      	ldr	r4, [pc, #28]	; (111b0 <_write_r+0x20>)
   11194:	4605      	mov	r5, r0
   11196:	4608      	mov	r0, r1
   11198:	4611      	mov	r1, r2
   1119a:	2200      	movs	r2, #0
   1119c:	6022      	str	r2, [r4, #0]
   1119e:	461a      	mov	r2, r3
   111a0:	f7fd f824 	bl	e1ec <_write>
   111a4:	1c43      	adds	r3, r0, #1
   111a6:	d102      	bne.n	111ae <_write_r+0x1e>
   111a8:	6823      	ldr	r3, [r4, #0]
   111aa:	b103      	cbz	r3, 111ae <_write_r+0x1e>
   111ac:	602b      	str	r3, [r5, #0]
   111ae:	bd38      	pop	{r3, r4, r5, pc}
   111b0:	20007d50 	.word	0x20007d50

000111b4 <_close_r>:
   111b4:	b538      	push	{r3, r4, r5, lr}
   111b6:	4c06      	ldr	r4, [pc, #24]	; (111d0 <_close_r+0x1c>)
   111b8:	2300      	movs	r3, #0
   111ba:	4605      	mov	r5, r0
   111bc:	4608      	mov	r0, r1
   111be:	6023      	str	r3, [r4, #0]
   111c0:	f7f8 ff12 	bl	9fe8 <_close>
   111c4:	1c43      	adds	r3, r0, #1
   111c6:	d102      	bne.n	111ce <_close_r+0x1a>
   111c8:	6823      	ldr	r3, [r4, #0]
   111ca:	b103      	cbz	r3, 111ce <_close_r+0x1a>
   111cc:	602b      	str	r3, [r5, #0]
   111ce:	bd38      	pop	{r3, r4, r5, pc}
   111d0:	20007d50 	.word	0x20007d50

000111d4 <_fstat_r>:
   111d4:	b538      	push	{r3, r4, r5, lr}
   111d6:	4c07      	ldr	r4, [pc, #28]	; (111f4 <_fstat_r+0x20>)
   111d8:	2300      	movs	r3, #0
   111da:	4605      	mov	r5, r0
   111dc:	4608      	mov	r0, r1
   111de:	4611      	mov	r1, r2
   111e0:	6023      	str	r3, [r4, #0]
   111e2:	f7f8 ff04 	bl	9fee <_fstat>
   111e6:	1c43      	adds	r3, r0, #1
   111e8:	d102      	bne.n	111f0 <_fstat_r+0x1c>
   111ea:	6823      	ldr	r3, [r4, #0]
   111ec:	b103      	cbz	r3, 111f0 <_fstat_r+0x1c>
   111ee:	602b      	str	r3, [r5, #0]
   111f0:	bd38      	pop	{r3, r4, r5, pc}
   111f2:	bf00      	nop
   111f4:	20007d50 	.word	0x20007d50

000111f8 <_isatty_r>:
   111f8:	b538      	push	{r3, r4, r5, lr}
   111fa:	4c06      	ldr	r4, [pc, #24]	; (11214 <_isatty_r+0x1c>)
   111fc:	2300      	movs	r3, #0
   111fe:	4605      	mov	r5, r0
   11200:	4608      	mov	r0, r1
   11202:	6023      	str	r3, [r4, #0]
   11204:	f7f8 fef8 	bl	9ff8 <_isatty>
   11208:	1c43      	adds	r3, r0, #1
   1120a:	d102      	bne.n	11212 <_isatty_r+0x1a>
   1120c:	6823      	ldr	r3, [r4, #0]
   1120e:	b103      	cbz	r3, 11212 <_isatty_r+0x1a>
   11210:	602b      	str	r3, [r5, #0]
   11212:	bd38      	pop	{r3, r4, r5, pc}
   11214:	20007d50 	.word	0x20007d50

00011218 <_lseek_r>:
   11218:	b538      	push	{r3, r4, r5, lr}
   1121a:	4c07      	ldr	r4, [pc, #28]	; (11238 <_lseek_r+0x20>)
   1121c:	4605      	mov	r5, r0
   1121e:	4608      	mov	r0, r1
   11220:	4611      	mov	r1, r2
   11222:	2200      	movs	r2, #0
   11224:	6022      	str	r2, [r4, #0]
   11226:	461a      	mov	r2, r3
   11228:	f7f8 fee8 	bl	9ffc <_lseek>
   1122c:	1c43      	adds	r3, r0, #1
   1122e:	d102      	bne.n	11236 <_lseek_r+0x1e>
   11230:	6823      	ldr	r3, [r4, #0]
   11232:	b103      	cbz	r3, 11236 <_lseek_r+0x1e>
   11234:	602b      	str	r3, [r5, #0]
   11236:	bd38      	pop	{r3, r4, r5, pc}
   11238:	20007d50 	.word	0x20007d50
   1123c:	00000000 	.word	0x00000000

00011240 <memchr>:
   11240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11244:	2a10      	cmp	r2, #16
   11246:	db2b      	blt.n	112a0 <memchr+0x60>
   11248:	f010 0f07 	tst.w	r0, #7
   1124c:	d008      	beq.n	11260 <memchr+0x20>
   1124e:	f810 3b01 	ldrb.w	r3, [r0], #1
   11252:	3a01      	subs	r2, #1
   11254:	428b      	cmp	r3, r1
   11256:	d02d      	beq.n	112b4 <memchr+0x74>
   11258:	f010 0f07 	tst.w	r0, #7
   1125c:	b342      	cbz	r2, 112b0 <memchr+0x70>
   1125e:	d1f6      	bne.n	1124e <memchr+0xe>
   11260:	b4f0      	push	{r4, r5, r6, r7}
   11262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1126a:	f022 0407 	bic.w	r4, r2, #7
   1126e:	f07f 0700 	mvns.w	r7, #0
   11272:	2300      	movs	r3, #0
   11274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   11278:	3c08      	subs	r4, #8
   1127a:	ea85 0501 	eor.w	r5, r5, r1
   1127e:	ea86 0601 	eor.w	r6, r6, r1
   11282:	fa85 f547 	uadd8	r5, r5, r7
   11286:	faa3 f587 	sel	r5, r3, r7
   1128a:	fa86 f647 	uadd8	r6, r6, r7
   1128e:	faa5 f687 	sel	r6, r5, r7
   11292:	b98e      	cbnz	r6, 112b8 <memchr+0x78>
   11294:	d1ee      	bne.n	11274 <memchr+0x34>
   11296:	bcf0      	pop	{r4, r5, r6, r7}
   11298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1129c:	f002 0207 	and.w	r2, r2, #7
   112a0:	b132      	cbz	r2, 112b0 <memchr+0x70>
   112a2:	f810 3b01 	ldrb.w	r3, [r0], #1
   112a6:	3a01      	subs	r2, #1
   112a8:	ea83 0301 	eor.w	r3, r3, r1
   112ac:	b113      	cbz	r3, 112b4 <memchr+0x74>
   112ae:	d1f8      	bne.n	112a2 <memchr+0x62>
   112b0:	2000      	movs	r0, #0
   112b2:	4770      	bx	lr
   112b4:	3801      	subs	r0, #1
   112b6:	4770      	bx	lr
   112b8:	2d00      	cmp	r5, #0
   112ba:	bf06      	itte	eq
   112bc:	4635      	moveq	r5, r6
   112be:	3803      	subeq	r0, #3
   112c0:	3807      	subne	r0, #7
   112c2:	f015 0f01 	tst.w	r5, #1
   112c6:	d107      	bne.n	112d8 <memchr+0x98>
   112c8:	3001      	adds	r0, #1
   112ca:	f415 7f80 	tst.w	r5, #256	; 0x100
   112ce:	bf02      	ittt	eq
   112d0:	3001      	addeq	r0, #1
   112d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   112d6:	3001      	addeq	r0, #1
   112d8:	bcf0      	pop	{r4, r5, r6, r7}
   112da:	3801      	subs	r0, #1
   112dc:	4770      	bx	lr
   112de:	bf00      	nop

000112e0 <memmove>:
   112e0:	4288      	cmp	r0, r1
   112e2:	b510      	push	{r4, lr}
   112e4:	eb01 0302 	add.w	r3, r1, r2
   112e8:	d803      	bhi.n	112f2 <memmove+0x12>
   112ea:	1e42      	subs	r2, r0, #1
   112ec:	4299      	cmp	r1, r3
   112ee:	d10c      	bne.n	1130a <memmove+0x2a>
   112f0:	bd10      	pop	{r4, pc}
   112f2:	4298      	cmp	r0, r3
   112f4:	d2f9      	bcs.n	112ea <memmove+0xa>
   112f6:	1881      	adds	r1, r0, r2
   112f8:	1ad2      	subs	r2, r2, r3
   112fa:	42d3      	cmn	r3, r2
   112fc:	d100      	bne.n	11300 <memmove+0x20>
   112fe:	bd10      	pop	{r4, pc}
   11300:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   11304:	f801 4d01 	strb.w	r4, [r1, #-1]!
   11308:	e7f7      	b.n	112fa <memmove+0x1a>
   1130a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1130e:	f802 4f01 	strb.w	r4, [r2, #1]!
   11312:	e7eb      	b.n	112ec <memmove+0xc>

00011314 <_realloc_r>:
   11314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11316:	4607      	mov	r7, r0
   11318:	4614      	mov	r4, r2
   1131a:	460e      	mov	r6, r1
   1131c:	b921      	cbnz	r1, 11328 <_realloc_r+0x14>
   1131e:	4611      	mov	r1, r2
   11320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11324:	f7fe be24 	b.w	ff70 <_malloc_r>
   11328:	b922      	cbnz	r2, 11334 <_realloc_r+0x20>
   1132a:	f7fe fdd3 	bl	fed4 <_free_r>
   1132e:	4625      	mov	r5, r4
   11330:	4628      	mov	r0, r5
   11332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11334:	f000 f826 	bl	11384 <_malloc_usable_size_r>
   11338:	4284      	cmp	r4, r0
   1133a:	d90f      	bls.n	1135c <_realloc_r+0x48>
   1133c:	4621      	mov	r1, r4
   1133e:	4638      	mov	r0, r7
   11340:	f7fe fe16 	bl	ff70 <_malloc_r>
   11344:	4605      	mov	r5, r0
   11346:	2800      	cmp	r0, #0
   11348:	d0f2      	beq.n	11330 <_realloc_r+0x1c>
   1134a:	4631      	mov	r1, r6
   1134c:	4622      	mov	r2, r4
   1134e:	f7fe fdad 	bl	feac <memcpy>
   11352:	4631      	mov	r1, r6
   11354:	4638      	mov	r0, r7
   11356:	f7fe fdbd 	bl	fed4 <_free_r>
   1135a:	e7e9      	b.n	11330 <_realloc_r+0x1c>
   1135c:	4635      	mov	r5, r6
   1135e:	e7e7      	b.n	11330 <_realloc_r+0x1c>

00011360 <_read_r>:
   11360:	b538      	push	{r3, r4, r5, lr}
   11362:	4c07      	ldr	r4, [pc, #28]	; (11380 <_read_r+0x20>)
   11364:	4605      	mov	r5, r0
   11366:	4608      	mov	r0, r1
   11368:	4611      	mov	r1, r2
   1136a:	2200      	movs	r2, #0
   1136c:	6022      	str	r2, [r4, #0]
   1136e:	461a      	mov	r2, r3
   11370:	f7fc ff2c 	bl	e1cc <_read>
   11374:	1c43      	adds	r3, r0, #1
   11376:	d102      	bne.n	1137e <_read_r+0x1e>
   11378:	6823      	ldr	r3, [r4, #0]
   1137a:	b103      	cbz	r3, 1137e <_read_r+0x1e>
   1137c:	602b      	str	r3, [r5, #0]
   1137e:	bd38      	pop	{r3, r4, r5, pc}
   11380:	20007d50 	.word	0x20007d50

00011384 <_malloc_usable_size_r>:
   11384:	f851 0c04 	ldr.w	r0, [r1, #-4]
   11388:	2800      	cmp	r0, #0
   1138a:	f1a0 0004 	sub.w	r0, r0, #4
   1138e:	bfbc      	itt	lt
   11390:	580b      	ldrlt	r3, [r1, r0]
   11392:	18c0      	addlt	r0, r0, r3
   11394:	4770      	bx	lr
   11396:	0000      	movs	r0, r0
   11398:	55204f4e 	.word	0x55204f4e
   1139c:	20524553 	.word	0x20524553
   113a0:	20574f52 	.word	0x20574f52
   113a4:	43454843 	.word	0x43454843
   113a8:	0000214b 	.word	0x0000214b
   113ac:	7974227b 	.word	0x7974227b
   113b0:	3a226570 	.word	0x3a226570
   113b4:	52415722 	.word	0x52415722
   113b8:	474e494e 	.word	0x474e494e
   113bc:	22202c22 	.word	0x22202c22
   113c0:	61746164 	.word	0x61746164
   113c4:	5b203a22 	.word	0x5b203a22
   113c8:	22732522 	.word	0x22732522
   113cc:	0a0d7d5d 	.word	0x0a0d7d5d
   113d0:	00000000 	.word	0x00000000
   113d4:	55206f4e 	.word	0x55206f4e
   113d8:	2074696e 	.word	0x2074696e
   113dc:	74736554 	.word	0x74736554
   113e0:	00000000 	.word	0x00000000
   113e4:	64616552 	.word	0x64616552
   113e8:	20676e69 	.word	0x20676e69
   113ec:	72657355 	.word	0x72657355
   113f0:	776f5220 	.word	0x776f5220
   113f4:	00000000 	.word	0x00000000
   113f8:	7974227b 	.word	0x7974227b
   113fc:	3a226570 	.word	0x3a226570
   11400:	474f4c22 	.word	0x474f4c22
   11404:	22202c22 	.word	0x22202c22
   11408:	61746164 	.word	0x61746164
   1140c:	5b203a22 	.word	0x5b203a22
   11410:	22732522 	.word	0x22732522
   11414:	0a0d7d5d 	.word	0x0a0d7d5d
   11418:	00000000 	.word	0x00000000
   1141c:	69726556 	.word	0x69726556
   11420:	6e697966 	.word	0x6e697966
   11424:	73552067 	.word	0x73552067
   11428:	52207265 	.word	0x52207265
   1142c:	0000776f 	.word	0x0000776f
   11430:	61647055 	.word	0x61647055
   11434:	676e6974 	.word	0x676e6974
   11438:	65735520 	.word	0x65735520
   1143c:	6f522072 	.word	0x6f522072
   11440:	00000077 	.word	0x00000077
   11444:	74737953 	.word	0x74737953
   11448:	52206d65 	.word	0x52206d65
   1144c:	74657365 	.word	0x74657365
   11450:	00000000 	.word	0x00000000
   11454:	68636e55 	.word	0x68636e55
   11458:	65676e61 	.word	0x65676e61
   1145c:	73552064 	.word	0x73552064
   11460:	52207265 	.word	0x52207265
   11464:	0000776f 	.word	0x0000776f
   11468:	64726148 	.word	0x64726148
   1146c:	65726177 	.word	0x65726177
   11470:	73655420 	.word	0x73655420
   11474:	6e492074 	.word	0x6e492074
   11478:	00007469 	.word	0x00007469
   1147c:	7974227b 	.word	0x7974227b
   11480:	3a226570 	.word	0x3a226570
   11484:	44494d22 	.word	0x44494d22
   11488:	202c2249 	.word	0x202c2249
   1148c:	74616422 	.word	0x74616422
   11490:	203a2261 	.word	0x203a2261
   11494:	6425225b 	.word	0x6425225b
   11498:	22202c22 	.word	0x22202c22
   1149c:	2c226425 	.word	0x2c226425
   114a0:	64252220 	.word	0x64252220
   114a4:	22202c22 	.word	0x22202c22
   114a8:	2c226425 	.word	0x2c226425
   114ac:	64252220 	.word	0x64252220
   114b0:	22202c22 	.word	0x22202c22
   114b4:	5d226425 	.word	0x5d226425
   114b8:	000a0d7d 	.word	0x000a0d7d
   114bc:	4952475b 	.word	0x4952475b
   114c0:	25205d44 	.word	0x25205d44
   114c4:	25206433 	.word	0x25206433
   114c8:	25206434 	.word	0x25206434
   114cc:	25206434 	.word	0x25206434
   114d0:	4d5b2064 	.word	0x4d5b2064
   114d4:	5d494449 	.word	0x5d494449
   114d8:	3a684320 	.word	0x3a684320
   114dc:	20642520 	.word	0x20642520
   114e0:	646d4320 	.word	0x646d4320
   114e4:	6425203a 	.word	0x6425203a
   114e8:	61502020 	.word	0x61502020
   114ec:	316d6172 	.word	0x316d6172
   114f0:	6425203a 	.word	0x6425203a
   114f4:	61502020 	.word	0x61502020
   114f8:	326d6172 	.word	0x326d6172
   114fc:	6425203a 	.word	0x6425203a
   11500:	0000000a 	.word	0x0000000a
   11504:	4952475b 	.word	0x4952475b
   11508:	25205d44 	.word	0x25205d44
   1150c:	25206433 	.word	0x25206433
   11510:	25206434 	.word	0x25206434
   11514:	25206434 	.word	0x25206434
   11518:	4b5b2064 	.word	0x4b5b2064
   1151c:	4f425945 	.word	0x4f425945
   11520:	5d445241 	.word	0x5d445241
   11524:	79654b20 	.word	0x79654b20
   11528:	6425203a 	.word	0x6425203a
   1152c:	646f4d20 	.word	0x646f4d20
   11530:	6425203a 	.word	0x6425203a
   11534:	646d4320 	.word	0x646d4320
   11538:	6425203a 	.word	0x6425203a
   1153c:	4357480a 	.word	0x4357480a
   11540:	203a4746 	.word	0x203a4746
   11544:	78383025 	.word	0x78383025
   11548:	0000000a 	.word	0x0000000a
   1154c:	4952475b 	.word	0x4952475b
   11550:	25205d44 	.word	0x25205d44
   11554:	25206433 	.word	0x25206433
   11558:	25206434 	.word	0x25206434
   1155c:	25206434 	.word	0x25206434
   11560:	535b2064 	.word	0x535b2064
   11564:	205d5359 	.word	0x205d5359
   11568:	20643325 	.word	0x20643325
   1156c:	20643325 	.word	0x20643325
   11570:	0a643325 	.word	0x0a643325
   11574:	00000000 	.word	0x00000000
   11578:	7974227b 	.word	0x7974227b
   1157c:	3a226570 	.word	0x3a226570
   11580:	41454822 	.word	0x41454822
   11584:	45425452 	.word	0x45425452
   11588:	2c225441 	.word	0x2c225441
   1158c:	61642220 	.word	0x61642220
   11590:	3a226174 	.word	0x3a226174
   11594:	25225b20 	.word	0x25225b20
   11598:	202c2264 	.word	0x202c2264
   1159c:	22642522 	.word	0x22642522
   115a0:	2522202c 	.word	0x2522202c
   115a4:	7d5d2264 	.word	0x7d5d2264
   115a8:	00000a0d 	.word	0x00000a0d
   115ac:	4b4e555b 	.word	0x4b4e555b
   115b0:	4e574f4e 	.word	0x4e574f4e
   115b4:	3e2d205d 	.word	0x3e2d205d
   115b8:	6f725020 	.word	0x6f725020
   115bc:	6f636f74 	.word	0x6f636f74
   115c0:	25203a6c 	.word	0x25203a6c
   115c4:	00000a64 	.word	0x00000a64
   115c8:	0f0e0d0c 	.word	0x0f0e0d0c
   115cc:	0b0a0908 	.word	0x0b0a0908
   115d0:	07060504 	.word	0x07060504
   115d4:	03020100 	.word	0x03020100
   115d8:	30256325 	.word	0x30256325
   115dc:	30257832 	.word	0x30257832
   115e0:	30257832 	.word	0x30257832
   115e4:	30257832 	.word	0x30257832
   115e8:	30257832 	.word	0x30257832
   115ec:	63257832 	.word	0x63257832
   115f0:	00000000 	.word	0x00000000
   115f4:	78383025 	.word	0x78383025
   115f8:	00000000 	.word	0x00000000
   115fc:	64697267 	.word	0x64697267
   11600:	7379735f 	.word	0x7379735f
   11604:	68633a3a 	.word	0x68633a3a
   11608:	736b6365 	.word	0x736b6365
   1160c:	00006d75 	.word	0x00006d75
   11610:	63656843 	.word	0x63656843
   11614:	6d75736b 	.word	0x6d75736b
   11618:	61655220 	.word	0x61655220
   1161c:	61432f64 	.word	0x61432f64
   11620:	6c75636c 	.word	0x6c75636c
   11624:	00657461 	.word	0x00657461
   11628:	6b636170 	.word	0x6b636170
   1162c:	257b7465 	.word	0x257b7465
   11630:	25202c64 	.word	0x25202c64
   11634:	25202c64 	.word	0x25202c64
   11638:	25202c64 	.word	0x25202c64
   1163c:	25202c64 	.word	0x25202c64
   11640:	25202c64 	.word	0x25202c64
   11644:	25202c64 	.word	0x25202c64
   11648:	25202c64 	.word	0x25202c64
   1164c:	52207d64 	.word	0x52207d64
   11650:	3a646165 	.word	0x3a646165
   11654:	2c642520 	.word	0x2c642520
   11658:	6c614320 	.word	0x6c614320
   1165c:	616c7563 	.word	0x616c7563
   11660:	203a6574 	.word	0x203a6574
   11664:	00006425 	.word	0x00006425
   11668:	63656843 	.word	0x63656843
   1166c:	6d75736b 	.word	0x6d75736b
   11670:	69725720 	.word	0x69725720
   11674:	432f6574 	.word	0x432f6574
   11678:	75636c61 	.word	0x75636c61
   1167c:	6574616c 	.word	0x6574616c
   11680:	00000000 	.word	0x00000000
   11684:	63656843 	.word	0x63656843
   11688:	6d75736b 	.word	0x6d75736b
   1168c:	65764f20 	.word	0x65764f20
   11690:	69727772 	.word	0x69727772
   11694:	00006574 	.word	0x00006574
   11698:	61726150 	.word	0x61726150
   1169c:	72706170 	.word	0x72706170
   116a0:	73616b69 	.word	0x73616b69
   116a4:	00000000 	.word	0x00000000
   116a8:	30256325 	.word	0x30256325
   116ac:	30257832 	.word	0x30257832
   116b0:	30257832 	.word	0x30257832
   116b4:	30257832 	.word	0x30257832
   116b8:	63257832 	.word	0x63257832
   116bc:	00000000 	.word	0x00000000
   116c0:	30256325 	.word	0x30256325
   116c4:	30257832 	.word	0x30257832
   116c8:	30257832 	.word	0x30257832
   116cc:	63257832 	.word	0x63257832
   116d0:	00000000 	.word	0x00000000
   116d4:	63256325 	.word	0x63256325
   116d8:	63256325 	.word	0x63256325
   116dc:	78323025 	.word	0x78323025
   116e0:	78323025 	.word	0x78323025
   116e4:	78323025 	.word	0x78323025
   116e8:	30306325 	.word	0x30306325
   116ec:	0000000a 	.word	0x0000000a
   116f0:	63256325 	.word	0x63256325
   116f4:	78323025 	.word	0x78323025
   116f8:	78323025 	.word	0x78323025
   116fc:	78323025 	.word	0x78323025
   11700:	78323025 	.word	0x78323025
   11704:	78323025 	.word	0x78323025
   11708:	00006325 	.word	0x00006325
   1170c:	78323025 	.word	0x78323025
   11710:	00000000 	.word	0x00000000
   11714:	000a3030 	.word	0x000a3030

00011718 <_adcs>:
   11718:	01000000 0003000c 00041807 00000000     ................
   11728:	0014080b 00010000 000c0100 18040003     ................
   11738:	00000004 080b0000 00000014              ............

00011744 <_cfgs>:
   11744:	00200600 08068000 00200400 08068000     .. ....... .....
   11754:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
   11774:	00200b00 14000003 00200a00 08000002     .. ....... .....
   11784:	00201300 14000003 00000000 00000000     .. .............
	...
   11834:	00005400 1c000000 00005300 0c000000     .T.......S......

00011844 <user_mux_confs>:
	...
   11870:	04030201 04030201 00000000 00000000     ................
	...

00011888 <channel_confs>:
   11888:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

000118c8 <interrupt_cfg>:
   118c8:	00000002 00000002 00000002 00000002     ................
	...
   11948:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
   11958:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00011968 <_usarts>:
   11968:	00000000 40100004 00030000 00700002     .......@......p.
   11978:	0000aaaa 00000000 00000001 40100004     ...............@
   11988:	00030000 00700002 0000aaaa 00000000     ......p.........
   11998:	00000002 40100004 00030000 00700002     .......@......p.
   119a8:	00005555 00000000 00000004 40100004     UU.............@
   119b8:	00030000 00700002 0000aaaa 00000000     ......p.........
   119c8:	00000006 40100004 00030000 00700002     .......@......p.
   119d8:	0000aaaa 00000000                       ........

000119e0 <_i2cms>:
   119e0:	00000005 00200014 00000100 0000e6e5     ...... .........
   119f0:	00d70000 02dc6c00                       .....l..

000119f8 <sercomspi_regs>:
   119f8:	3020000c 00020000 00000000 01ff0005     .. 0............
   11a08:	20000c03 00000000 00000000 ff000600     ... ............
   11a18:	00000701 40003800 40003c00 4101a000     .....8.@.<.@...A
   11a28:	4101c000 42001400 42001800 43001400     ...A...B...B...C
   11a38:	43001800                                ...C

00011a3c <_tcs>:
   11a3c:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
   11a4c:	00000000 006c0001 00000308 00000021     ......l.....!...
   11a5c:	00003a98 00000000 006d0002 00000308     .:........m.....
   11a6c:	00000021 00003a98 00000000 006e0003     !....:........n.
   11a7c:	00000308 00000021 00003a98 00000000     ....!....:......

00011a8c <_usb_ep_cfgs>:
   11a8c:	20000d28 00000000 00000040 00000000     (.. ....@.......
	...
   11aa4:	20000d20 00000000 00000008 20000ce0      .. ........... 
   11ab4:	20000cd8 00080040 00000000 00000000     ... @...........
	...
   11acc:	20000c98 00400000 656d6954 2074756f     ... ..@.Timeout 
   11adc:	63736944 656e6e6f 26207463 73655220     Disconnect & Res
   11aec:	52207465 69656365 00726576 656d6954     et Receiver.Time
   11afc:	2074756f 65522026 20746573 65636552     out & Reset Rece
   11b0c:	72657669 00000000 645f7872 6c62756f     iver....rx_doubl
   11b1c:	75625f65 72656666 65766f20 6e757272     e_buffer overrun
   11b2c:	00003120 645f7872 6c62756f 75625f65      1..rx_double_bu
   11b3c:	72656666 65766f20 6e757272 00003220     ffer overrun 2..
   11b4c:	645f7872 6c62756f 75625f65 72656666     rx_double_buffer
   11b5c:	65766f20 6e757272 00003320 6d617246      overrun 3..Fram
   11b6c:	74532065 20747261 7366664f 00007465     e Start Offset..
   11b7c:	6e6e6f43 00746365 7974227b 3a226570     Connect.{"type":
   11b8c:	41572220 4e494e52 202c2247 74616422      "WARNING", "dat
   11b9c:	203a2261 6e55225b 776f6e6b 73654d20     a": ["Unknow Mes
   11bac:	65676173 70795420 7d5d2265 0000000d     sage Type"]}....
   11bbc:	7974227b 3a226570 41572220 4e494e52     {"type": "WARNIN
   11bcc:	202c2247 74616422 203a2261 6e49225b     G", "data": ["In
   11bdc:	696c6176 68432064 736b6365 5d226d75     valid Checksum"]
   11bec:	00000d7d 7974227b 3a226570 52452220     }...{"type": "ER
   11bfc:	22524f52 6422202c 22617461 225b203a     ROR", "data": ["
   11c0c:	6d617246 72452065 22726f72 000d7d5d     Frame Error"]}..
   11c1c:	7974227b 3a226570 52452220 22524f52     {"type": "ERROR"
   11c2c:	6422202c 22617461 225b203a 69726150     , "data": ["Pari
   11c3c:	45207974 726f7272 0d7d5d22 00000000     ty Error"]}.....
   11c4c:	72617453 6e492074 61697469 657a696c     Start Initialize
   11c5c:	00000064 20313544 74696e49 00000000     d...D51 Init....
   11c6c:	706d6f43 7469736f 65442065 65636976     Composite Device
   11c7c:	696e4920 6c616974 64657a69 00000000      Initialized....
   11c8c:	64697247 646f4d20 20656c75 74696e49     Grid Module Init
   11c9c:	696c6169 0064657a 706f6f4c 00000000     ialized.Loop....
   11cac:	706d6f43 7469736f 65442065 65636976     Composite Device
   11cbc:	6e6f4320 7463656e 00006465 7974227b      Connected..{"ty
   11ccc:	3a226570 53415422 202c224b 74616422     pe":"TASK", "dat
   11cdc:	203a2261 0000005b 22642522 00000000     a": [..."%d"....
   11cec:	0000202c 7974227b 3a226570 4f4f4c22     , ..{"type":"LOO
   11cfc:	202c2250 74616422 203a2261 6425225b     P", "data": ["%d
   11d0c:	22202c22 2c226425 64252220 22202c22     ", "%d", "%d", "
   11d1c:	5d226425 000a0d7d                       %d"]}...

00011d24 <keyboard_report_desc>:
   11d24:	06090105 070501a1 e729e019 01250015     ..........)...%.
   11d34:	08950175 01810281 65290019 65250015     u.........)e..%e
   11d44:	06950875 08050081 05290119 01250015     u.........)...%.
   11d54:	05950175 03950291 00c00191              u...........

00011d60 <mouse_report_desc>:
   11d60:	02090105 010901a1 090500a1 03290119     ..............).
   11d70:	01250015 03950175 05750281 01810195     ..%.u.....u.....
   11d80:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
   11d90:	c0c00681                                ....

00011d94 <_global_impure_ptr>:
   11d94:	2000055c                                \.. 

00011d98 <__sf_fake_stderr>:
	...

00011db8 <__sf_fake_stdin>:
	...

00011dd8 <__sf_fake_stdout>:
	...
   11df8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   11e08:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   11e18:	31300046 35343332 39383736 64636261     F.0123456789abcd
   11e28:	00006665                                ef..

00011e2c <_init>:
   11e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e2e:	bf00      	nop
   11e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11e32:	bc08      	pop	{r3}
   11e34:	469e      	mov	lr, r3
   11e36:	4770      	bx	lr

00011e38 <__init_array_start>:
   11e38:	00004289 	.word	0x00004289

00011e3c <_fini>:
   11e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e3e:	bf00      	nop
   11e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11e42:	bc08      	pop	{r3}
   11e44:	469e      	mov	lr, r3
   11e46:	4770      	bx	lr

00011e48 <__fini_array_start>:
   11e48:	00004265 	.word	0x00004265
