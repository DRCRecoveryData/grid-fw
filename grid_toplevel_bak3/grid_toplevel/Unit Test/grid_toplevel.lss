
grid_toplevel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c7c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  00008c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200bc  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200bc  2**0
                  CONTENTS
  4 .bss          00003434  200000c0  00008d40  000200c0  2**4
                  ALLOC
  5 .stack        00010004  200034f4  0000c174  000200c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200ea  2**0
                  CONTENTS, READONLY
  8 .debug_info   0007250d  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000099a2  00000000  00000000  00092650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a6b7  00000000  00000000  0009bff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f80  00000000  00000000  000c66a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002a00  00000000  00000000  000c8629  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000419a6  00000000  00000000  000cb029  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033357  00000000  00000000  0010c9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00119886  00000000  00000000  0013fd26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005cd4  00000000  00000000  002595ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 34 01 20 f1 02 00 00 ed 02 00 00 ed 02 00 00     .4. ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	45 34 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     E4..............
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	ed 02 00 00 ed 02 00 00 51 30 00 00 65 30 00 00     ........Q0..e0..
      bc:	89 2e 00 00 95 2e 00 00 a1 2e 00 00 ad 2e 00 00     ................
      cc:	b9 2e 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      dc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      f4:	79 32 00 00 89 3d 00 00 9d 3d 00 00 b1 3d 00 00     y2...=...=...=..
     104:	c5 3d 00 00 d9 3d 00 00 ed 3d 00 00 01 3e 00 00     .=...=...=...>..
     114:	15 3e 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .>..............
     124:	ed 02 00 00 29 3e 00 00 3d 3e 00 00 51 3e 00 00     ....)>..=>..Q>..
     134:	65 3e 00 00 79 3e 00 00 8d 3e 00 00 a1 3e 00 00     e>..y>...>...>..
     144:	b5 3e 00 00 c9 3e 00 00 dd 3e 00 00 f1 3e 00 00     .>...>...>...>..
     154:	05 3f 00 00 19 3f 00 00 2d 3f 00 00 41 3f 00 00     .?...?..-?..A?..
     164:	55 3f 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     U?..............
     174:	ed 02 00 00 00 00 00 00 00 00 00 00 11 5c 00 00     .............\..
     184:	1d 5c 00 00 29 5c 00 00 35 5c 00 00 00 00 00 00     .\..)\..5\......
     194:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1a4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1b4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e4:	ed 02 00 00 ed 02 00 00 a5 49 00 00 b9 49 00 00     .........I...I..
     1f4:	cd 49 00 00 e1 49 00 00 ed 02 00 00 ed 02 00 00     .I...I..........
     204:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     214:	ed 02 00 00 85 2b 00 00 99 2b 00 00 ad 2b 00 00     .....+...+...+..
     224:	c1 2b 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     .+..............
     234:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     244:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     254:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000c0 	.word	0x200000c0
     280:	00000000 	.word	0x00000000
     284:	00008c7c 	.word	0x00008c7c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00008c7c 	.word	0x00008c7c
     2c4:	200000c4 	.word	0x200000c4
     2c8:	00008c7c 	.word	0x00008c7c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b03      	ldr	r3, [pc, #12]	; (2e0 <atmel_start_init+0x10>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b03      	ldr	r3, [pc, #12]	; (2e4 <atmel_start_init+0x14>)
     2d8:	4798      	blx	r3
	stdio_redirect_init();
     2da:	4b03      	ldr	r3, [pc, #12]	; (2e8 <atmel_start_init+0x18>)
     2dc:	4798      	blx	r3
     2de:	bd08      	pop	{r3, pc}
     2e0:	00000e25 	.word	0x00000e25
     2e4:	00006c61 	.word	0x00006c61
     2e8:	00005d9d 	.word	0x00005d9d

000002ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2ec:	e7fe      	b.n	2ec <Dummy_Handler>
	...

000002f0 <Reset_Handler>:
{
     2f0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x74>)
     2f4:	4a1c      	ldr	r2, [pc, #112]	; (368 <Reset_Handler+0x78>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d010      	beq.n	31c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2fa:	4b1c      	ldr	r3, [pc, #112]	; (36c <Reset_Handler+0x7c>)
     2fc:	4a19      	ldr	r2, [pc, #100]	; (364 <Reset_Handler+0x74>)
     2fe:	429a      	cmp	r2, r3
     300:	d20c      	bcs.n	31c <Reset_Handler+0x2c>
     302:	3b01      	subs	r3, #1
     304:	1a9b      	subs	r3, r3, r2
     306:	f023 0303 	bic.w	r3, r3, #3
     30a:	3304      	adds	r3, #4
     30c:	4413      	add	r3, r2
     30e:	4916      	ldr	r1, [pc, #88]	; (368 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     310:	f851 0b04 	ldr.w	r0, [r1], #4
     314:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     318:	429a      	cmp	r2, r3
     31a:	d1f9      	bne.n	310 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     31c:	4b14      	ldr	r3, [pc, #80]	; (370 <Reset_Handler+0x80>)
     31e:	4a15      	ldr	r2, [pc, #84]	; (374 <Reset_Handler+0x84>)
     320:	429a      	cmp	r2, r3
     322:	d20a      	bcs.n	33a <Reset_Handler+0x4a>
     324:	3b01      	subs	r3, #1
     326:	1a9b      	subs	r3, r3, r2
     328:	f023 0303 	bic.w	r3, r3, #3
     32c:	3304      	adds	r3, #4
     32e:	4413      	add	r3, r2
                *pDest++ = 0;
     330:	2100      	movs	r1, #0
     332:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     336:	4293      	cmp	r3, r2
     338:	d1fb      	bne.n	332 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     33a:	4b0f      	ldr	r3, [pc, #60]	; (378 <Reset_Handler+0x88>)
     33c:	4a0f      	ldr	r2, [pc, #60]	; (37c <Reset_Handler+0x8c>)
     33e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     342:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     348:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     354:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x90>)
     35a:	4798      	blx	r3
        main();
     35c:	4b09      	ldr	r3, [pc, #36]	; (384 <Reset_Handler+0x94>)
     35e:	4798      	blx	r3
     360:	e7fe      	b.n	360 <Reset_Handler+0x70>
     362:	bf00      	nop
     364:	20000000 	.word	0x20000000
     368:	00008c7c 	.word	0x00008c7c
     36c:	200000bc 	.word	0x200000bc
     370:	200034f4 	.word	0x200034f4
     374:	200000c0 	.word	0x200000c0
     378:	e000ed00 	.word	0xe000ed00
     37c:	00000000 	.word	0x00000000
     380:	00006c6d 	.word	0x00006c6d
     384:	00005cb1 	.word	0x00005cb1

00000388 <ADC_0_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_0_init(void)
{
     388:	b5f0      	push	{r4, r5, r6, r7, lr}
     38a:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     38c:	4a1b      	ldr	r2, [pc, #108]	; (3fc <ADC_0_init+0x74>)
     38e:	6a13      	ldr	r3, [r2, #32]
     390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     394:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     396:	2241      	movs	r2, #65	; 0x41
     398:	4b19      	ldr	r3, [pc, #100]	; (400 <ADC_0_init+0x78>)
     39a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
     39e:	4e19      	ldr	r6, [pc, #100]	; (404 <ADC_0_init+0x7c>)
     3a0:	4d19      	ldr	r5, [pc, #100]	; (408 <ADC_0_init+0x80>)
     3a2:	2400      	movs	r4, #0
     3a4:	9402      	str	r4, [sp, #8]
     3a6:	4b19      	ldr	r3, [pc, #100]	; (40c <ADC_0_init+0x84>)
     3a8:	9301      	str	r3, [sp, #4]
     3aa:	2301      	movs	r3, #1
     3ac:	9300      	str	r3, [sp, #0]
     3ae:	4623      	mov	r3, r4
     3b0:	4632      	mov	r2, r6
     3b2:	4917      	ldr	r1, [pc, #92]	; (410 <ADC_0_init+0x88>)
     3b4:	4628      	mov	r0, r5
     3b6:	4f17      	ldr	r7, [pc, #92]	; (414 <ADC_0_init+0x8c>)
     3b8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
     3ba:	2310      	movs	r3, #16
     3bc:	1d32      	adds	r2, r6, #4
     3be:	4621      	mov	r1, r4
     3c0:	4628      	mov	r0, r5
     3c2:	4c15      	ldr	r4, [pc, #84]	; (418 <ADC_0_init+0x90>)
     3c4:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c6:	4b15      	ldr	r3, [pc, #84]	; (41c <ADC_0_init+0x94>)
     3c8:	2280      	movs	r2, #128	; 0x80
     3ca:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3d0:	629a      	str	r2, [r3, #40]	; 0x28
     3d2:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     3d6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     3dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f0:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
     3f8:	b005      	add	sp, #20
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	40000800 	.word	0x40000800
     400:	40001c00 	.word	0x40001c00
     404:	200000dc 	.word	0x200000dc
     408:	20000a50 	.word	0x20000a50
     40c:	20000b4c 	.word	0x20000b4c
     410:	43001c00 	.word	0x43001c00
     414:	000015d1 	.word	0x000015d1
     418:	00001675 	.word	0x00001675
     41c:	41008000 	.word	0x41008000

00000420 <ADC_1_init>:
 * \brief ADC initialization function
 *
 * Enables ADC peripheral, clocks and initializes ADC driver
 */
void ADC_1_init(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
     422:	b085      	sub	sp, #20
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     424:	4a1e      	ldr	r2, [pc, #120]	; (4a0 <ADC_1_init+0x80>)
     426:	6a13      	ldr	r3, [r2, #32]
     428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     42c:	6213      	str	r3, [r2, #32]
     42e:	2241      	movs	r2, #65	; 0x41
     430:	4b1c      	ldr	r3, [pc, #112]	; (4a4 <ADC_1_init+0x84>)
     432:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
     436:	4e1c      	ldr	r6, [pc, #112]	; (4a8 <ADC_1_init+0x88>)
     438:	4d1c      	ldr	r5, [pc, #112]	; (4ac <ADC_1_init+0x8c>)
     43a:	2400      	movs	r4, #0
     43c:	9402      	str	r4, [sp, #8]
     43e:	4b1c      	ldr	r3, [pc, #112]	; (4b0 <ADC_1_init+0x90>)
     440:	9301      	str	r3, [sp, #4]
     442:	2301      	movs	r3, #1
     444:	9300      	str	r3, [sp, #0]
     446:	4623      	mov	r3, r4
     448:	f106 0214 	add.w	r2, r6, #20
     44c:	4919      	ldr	r1, [pc, #100]	; (4b4 <ADC_1_init+0x94>)
     44e:	4628      	mov	r0, r5
     450:	4f19      	ldr	r7, [pc, #100]	; (4b8 <ADC_1_init+0x98>)
     452:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
     454:	2310      	movs	r3, #16
     456:	f106 0218 	add.w	r2, r6, #24
     45a:	4621      	mov	r1, r4
     45c:	4628      	mov	r0, r5
     45e:	4c17      	ldr	r4, [pc, #92]	; (4bc <ADC_1_init+0x9c>)
     460:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     462:	4b17      	ldr	r3, [pc, #92]	; (4c0 <ADC_1_init+0xa0>)
     464:	2204      	movs	r2, #4
     466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     46e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     472:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     476:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2142 	ldrb.w	r2, [r3, #322]	; 0x142
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     48e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
     49a:	b005      	add	sp, #20
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	bf00      	nop
     4a0:	40000800 	.word	0x40000800
     4a4:	40001c00 	.word	0x40001c00
     4a8:	200000dc 	.word	0x200000dc
     4ac:	20000c24 	.word	0x20000c24
     4b0:	200009ec 	.word	0x200009ec
     4b4:	43002000 	.word	0x43002000
     4b8:	000015d1 	.word	0x000015d1
     4bc:	00001675 	.word	0x00001675
     4c0:	41008000 	.word	0x41008000

000004c4 <CRC_0_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
     4c4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
     4c6:	4a05      	ldr	r2, [pc, #20]	; (4dc <CRC_0_init+0x18>)
     4c8:	6993      	ldr	r3, [r2, #24]
     4ca:	f043 0302 	orr.w	r3, r3, #2
     4ce:	6193      	str	r3, [r2, #24]
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
     4d0:	4903      	ldr	r1, [pc, #12]	; (4e0 <CRC_0_init+0x1c>)
     4d2:	4804      	ldr	r0, [pc, #16]	; (4e4 <CRC_0_init+0x20>)
     4d4:	4b04      	ldr	r3, [pc, #16]	; (4e8 <CRC_0_init+0x24>)
     4d6:	4798      	blx	r3
     4d8:	bd08      	pop	{r3, pc}
     4da:	bf00      	nop
     4dc:	40000800 	.word	0x40000800
     4e0:	41002000 	.word	0x41002000
     4e4:	200009e8 	.word	0x200009e8
     4e8:	00001749 	.word	0x00001749

000004ec <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
     4ee:	4b09      	ldr	r3, [pc, #36]	; (514 <EVENT_SYSTEM_0_init+0x28>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
     4f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     4fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
     4fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     502:	4a05      	ldr	r2, [pc, #20]	; (518 <EVENT_SYSTEM_0_init+0x2c>)
     504:	6993      	ldr	r3, [r2, #24]
     506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     50a:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     50c:	4b03      	ldr	r3, [pc, #12]	; (51c <EVENT_SYSTEM_0_init+0x30>)
     50e:	4798      	blx	r3
     510:	bd08      	pop	{r3, pc}
     512:	bf00      	nop
     514:	40001c00 	.word	0x40001c00
     518:	40000800 	.word	0x40000800
     51c:	0000178d 	.word	0x0000178d

00000520 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     520:	4a02      	ldr	r2, [pc, #8]	; (52c <FLASH_0_CLOCK_init+0xc>)
     522:	6913      	ldr	r3, [r2, #16]
     524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     528:	6113      	str	r3, [r2, #16]
     52a:	4770      	bx	lr
     52c:	40000800 	.word	0x40000800

00000530 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     530:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <FLASH_0_init+0x10>)
     534:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     536:	4903      	ldr	r1, [pc, #12]	; (544 <FLASH_0_init+0x14>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <FLASH_0_init+0x18>)
     53a:	4b04      	ldr	r3, [pc, #16]	; (54c <FLASH_0_init+0x1c>)
     53c:	4798      	blx	r3
     53e:	bd08      	pop	{r3, pc}
     540:	00000521 	.word	0x00000521
     544:	41004000 	.word	0x41004000
     548:	200009cc 	.word	0x200009cc
     54c:	000017ad 	.word	0x000017ad

00000550 <QSPI_INSTANCE_PORT_init>:
}

void QSPI_INSTANCE_PORT_init(void)
{
     550:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     552:	4b5a      	ldr	r3, [pc, #360]	; (6bc <QSPI_INSTANCE_PORT_init+0x16c>)
     554:	f44f 6500 	mov.w	r5, #2048	; 0x800
     558:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     55c:	4a58      	ldr	r2, [pc, #352]	; (6c0 <QSPI_INSTANCE_PORT_init+0x170>)
     55e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     562:	4858      	ldr	r0, [pc, #352]	; (6c4 <QSPI_INSTANCE_PORT_init+0x174>)
     564:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     568:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     56c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     570:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     574:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     57c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     580:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     584:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     588:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     58c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     590:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     594:	f44f 7280 	mov.w	r2, #256	; 0x100
     598:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     59a:	494b      	ldr	r1, [pc, #300]	; (6c8 <QSPI_INSTANCE_PORT_init+0x178>)
     59c:	6299      	str	r1, [r3, #40]	; 0x28
     59e:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     5a2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5a6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     5aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ca:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d8:	f501 7180 	add.w	r1, r1, #256	; 0x100
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
     5de:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5e0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5e2:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ee:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     606:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     60a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     612:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     614:	4a2d      	ldr	r2, [pc, #180]	; (6cc <QSPI_INSTANCE_PORT_init+0x17c>)
     616:	629a      	str	r2, [r3, #40]	; 0x28
     618:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     61a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     61c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     620:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     624:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     628:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     630:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     634:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     638:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     63c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     640:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     648:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     64a:	4a21      	ldr	r2, [pc, #132]	; (6d0 <QSPI_INSTANCE_PORT_init+0x180>)
     64c:	629a      	str	r2, [r3, #40]	; 0x28
     64e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     650:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     652:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     67e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     682:	4a14      	ldr	r2, [pc, #80]	; (6d4 <QSPI_INSTANCE_PORT_init+0x184>)
     684:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     688:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     68c:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     690:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     694:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     698:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     69c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6a0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6a4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6a8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6b0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     6b8:	bc30      	pop	{r4, r5}
     6ba:	4770      	bx	lr
     6bc:	41008000 	.word	0x41008000
     6c0:	40020800 	.word	0x40020800
     6c4:	c0020000 	.word	0xc0020000
     6c8:	40000100 	.word	0x40000100
     6cc:	40000400 	.word	0x40000400
     6d0:	40000800 	.word	0x40000800
     6d4:	40020400 	.word	0x40020400

000006d8 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <QSPI_INSTANCE_CLOCK_init+0x1c>)
     6da:	691a      	ldr	r2, [r3, #16]
     6dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6e0:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     6e2:	691a      	ldr	r2, [r3, #16]
     6e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6e8:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6ea:	69da      	ldr	r2, [r3, #28]
     6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6f0:	61da      	str	r2, [r3, #28]
     6f2:	4770      	bx	lr
     6f4:	40000800 	.word	0x40000800

000006f8 <QSPI_INSTANCE_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QSPI_INSTANCE_init(void)
{
     6f8:	b508      	push	{r3, lr}
	QSPI_INSTANCE_CLOCK_init();
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <QSPI_INSTANCE_init+0x14>)
     6fc:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
     6fe:	4904      	ldr	r1, [pc, #16]	; (710 <QSPI_INSTANCE_init+0x18>)
     700:	4804      	ldr	r0, [pc, #16]	; (714 <QSPI_INSTANCE_init+0x1c>)
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <QSPI_INSTANCE_init+0x20>)
     704:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <QSPI_INSTANCE_init+0x24>)
     708:	4798      	blx	r3
     70a:	bd08      	pop	{r3, pc}
     70c:	000006d9 	.word	0x000006d9
     710:	42003400 	.word	0x42003400
     714:	20000c90 	.word	0x20000c90
     718:	00001959 	.word	0x00001959
     71c:	00000551 	.word	0x00000551

00000720 <USART_EAST_CLOCK_init>:
     720:	4b06      	ldr	r3, [pc, #24]	; (73c <USART_EAST_CLOCK_init+0x1c>)
     722:	2241      	movs	r2, #65	; 0x41
     724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     728:	2242      	movs	r2, #66	; 0x42
     72a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     72e:	4a04      	ldr	r2, [pc, #16]	; (740 <USART_EAST_CLOCK_init+0x20>)
     730:	6953      	ldr	r3, [r2, #20]
     732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     736:	6153      	str	r3, [r2, #20]
     738:	4770      	bx	lr
     73a:	bf00      	nop
     73c:	40001c00 	.word	0x40001c00
     740:	40000800 	.word	0x40000800

00000744 <USART_EAST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <USART_EAST_PORT_init+0x44>)
     746:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
	tmp &= ~PORT_PINCFG_PMUXEN;
     74a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     74e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     752:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     756:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     75a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     75e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     762:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     766:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
	tmp &= ~PORT_PINCFG_PMUXEN;
     76a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     76e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     772:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     776:	f893 2138 	ldrb.w	r2, [r3, #312]	; 0x138
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     77e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     782:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
     786:	4770      	bx	lr
     788:	41008000 	.word	0x41008000

0000078c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
     78c:	b510      	push	{r4, lr}
     78e:	b082      	sub	sp, #8
	USART_EAST_CLOCK_init();
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <USART_EAST_init+0x20>)
     792:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
     794:	2300      	movs	r3, #0
     796:	9300      	str	r3, [sp, #0]
     798:	2310      	movs	r3, #16
     79a:	4a05      	ldr	r2, [pc, #20]	; (7b0 <USART_EAST_init+0x24>)
     79c:	4905      	ldr	r1, [pc, #20]	; (7b4 <USART_EAST_init+0x28>)
     79e:	4806      	ldr	r0, [pc, #24]	; (7b8 <USART_EAST_init+0x2c>)
     7a0:	4c06      	ldr	r4, [pc, #24]	; (7bc <USART_EAST_init+0x30>)
     7a2:	47a0      	blx	r4
	USART_EAST_PORT_init();
     7a4:	4b06      	ldr	r3, [pc, #24]	; (7c0 <USART_EAST_init+0x34>)
     7a6:	4798      	blx	r3
}
     7a8:	b002      	add	sp, #8
     7aa:	bd10      	pop	{r4, pc}
     7ac:	00000721 	.word	0x00000721
     7b0:	20000104 	.word	0x20000104
     7b4:	40003000 	.word	0x40003000
     7b8:	20000a7c 	.word	0x20000a7c
     7bc:	00001f4d 	.word	0x00001f4d
     7c0:	00000745 	.word	0x00000745

000007c4 <USART_NORTH_CLOCK_init>:
     7c4:	4b06      	ldr	r3, [pc, #24]	; (7e0 <USART_NORTH_CLOCK_init+0x1c>)
     7c6:	2241      	movs	r2, #65	; 0x41
     7c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     7cc:	2242      	movs	r2, #66	; 0x42
     7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <USART_NORTH_CLOCK_init+0x20>)
     7d4:	6953      	ldr	r3, [r2, #20]
     7d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     7da:	6153      	str	r3, [r2, #20]
     7dc:	4770      	bx	lr
     7de:	bf00      	nop
     7e0:	40001c00 	.word	0x40001c00
     7e4:	40000800 	.word	0x40000800

000007e8 <USART_NORTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7e8:	4b10      	ldr	r3, [pc, #64]	; (82c <USART_NORTH_PORT_init+0x44>)
     7ea:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7f6:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7fa:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     802:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     806:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     80a:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     80e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     812:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     816:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     81a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     81e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     822:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     826:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     82a:	4770      	bx	lr
     82c:	41008000 	.word	0x41008000

00000830 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
     830:	b510      	push	{r4, lr}
     832:	b082      	sub	sp, #8
	USART_NORTH_CLOCK_init();
     834:	4b06      	ldr	r3, [pc, #24]	; (850 <USART_NORTH_init+0x20>)
     836:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
     838:	2300      	movs	r3, #0
     83a:	9300      	str	r3, [sp, #0]
     83c:	2310      	movs	r3, #16
     83e:	4a05      	ldr	r2, [pc, #20]	; (854 <USART_NORTH_init+0x24>)
     840:	4905      	ldr	r1, [pc, #20]	; (858 <USART_NORTH_init+0x28>)
     842:	4806      	ldr	r0, [pc, #24]	; (85c <USART_NORTH_init+0x2c>)
     844:	4c06      	ldr	r4, [pc, #24]	; (860 <USART_NORTH_init+0x30>)
     846:	47a0      	blx	r4
	USART_NORTH_PORT_init();
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USART_NORTH_init+0x34>)
     84a:	4798      	blx	r3
}
     84c:	b002      	add	sp, #8
     84e:	bd10      	pop	{r4, pc}
     850:	000007c5 	.word	0x000007c5
     854:	20000114 	.word	0x20000114
     858:	40003400 	.word	0x40003400
     85c:	20000ad0 	.word	0x20000ad0
     860:	00001f4d 	.word	0x00001f4d
     864:	000007e9 	.word	0x000007e9

00000868 <GRID_AUX_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     868:	4b10      	ldr	r3, [pc, #64]	; (8ac <GRID_AUX_PORT_init+0x44>)
     86a:	f893 20d9 	ldrb.w	r2, [r3, #217]	; 0xd9
	tmp &= ~PORT_PINCFG_PMUXEN;
     86e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     876:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     87a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     87e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     882:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     886:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
     8aa:	4770      	bx	lr
     8ac:	41008000 	.word	0x41008000

000008b0 <GRID_AUX_CLOCK_init>:
     8b0:	4b06      	ldr	r3, [pc, #24]	; (8cc <GRID_AUX_CLOCK_init+0x1c>)
     8b2:	2241      	movs	r2, #65	; 0x41
     8b4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     8b8:	2242      	movs	r2, #66	; 0x42
     8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     8be:	4a04      	ldr	r2, [pc, #16]	; (8d0 <GRID_AUX_CLOCK_init+0x20>)
     8c0:	6993      	ldr	r3, [r2, #24]
     8c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8c6:	6193      	str	r3, [r2, #24]
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop
     8cc:	40001c00 	.word	0x40001c00
     8d0:	40000800 	.word	0x40000800

000008d4 <GRID_AUX_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void GRID_AUX_init(void)
{
     8d4:	b508      	push	{r3, lr}
	GRID_AUX_CLOCK_init();
     8d6:	4b05      	ldr	r3, [pc, #20]	; (8ec <GRID_AUX_init+0x18>)
     8d8:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
     8da:	2200      	movs	r2, #0
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <GRID_AUX_init+0x1c>)
     8de:	4805      	ldr	r0, [pc, #20]	; (8f4 <GRID_AUX_init+0x20>)
     8e0:	4b05      	ldr	r3, [pc, #20]	; (8f8 <GRID_AUX_init+0x24>)
     8e2:	4798      	blx	r3
	GRID_AUX_PORT_init();
     8e4:	4b05      	ldr	r3, [pc, #20]	; (8fc <GRID_AUX_init+0x28>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008b1 	.word	0x000008b1
     8f0:	41012000 	.word	0x41012000
     8f4:	20000a44 	.word	0x20000a44
     8f8:	000020b1 	.word	0x000020b1
     8fc:	00000869 	.word	0x00000869

00000900 <UI_SPI_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     900:	4b2b      	ldr	r3, [pc, #172]	; (9b0 <UI_SPI_PORT_init+0xb0>)
     902:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     906:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     90a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     912:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     916:	4a27      	ldr	r2, [pc, #156]	; (9b4 <UI_SPI_PORT_init+0xb4>)
     918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     91c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
	tmp &= ~PORT_PINCFG_PMUXEN;
     920:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     924:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     928:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     92c:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     930:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     934:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     938:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     93c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     940:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     94c:	4a1a      	ldr	r2, [pc, #104]	; (9b8 <UI_SPI_PORT_init+0xb8>)
     94e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     952:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
	tmp &= ~PORT_PINCFG_PMUXEN;
     956:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     95a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     95e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     962:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     966:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     96a:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     96e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     972:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     974:	4a11      	ldr	r2, [pc, #68]	; (9bc <UI_SPI_PORT_init+0xbc>)
     976:	629a      	str	r2, [r3, #40]	; 0x28
     978:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
     97c:	3210      	adds	r2, #16
     97e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     980:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
     984:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     994:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     998:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop
     9b0:	41008000 	.word	0x41008000
     9b4:	c0000010 	.word	0xc0000010
     9b8:	c0000020 	.word	0xc0000020
     9bc:	40020000 	.word	0x40020000

000009c0 <UI_SPI_CLOCK_init>:
     9c0:	4b06      	ldr	r3, [pc, #24]	; (9dc <UI_SPI_CLOCK_init+0x1c>)
     9c2:	2241      	movs	r2, #65	; 0x41
     9c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9c8:	2243      	movs	r2, #67	; 0x43
     9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     9ce:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UI_SPI_CLOCK_init+0x20>)
     9d0:	6993      	ldr	r3, [r2, #24]
     9d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9d6:	6193      	str	r3, [r2, #24]
     9d8:	4770      	bx	lr
     9da:	bf00      	nop
     9dc:	40001c00 	.word	0x40001c00
     9e0:	40000800 	.word	0x40000800

000009e4 <UI_SPI_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void UI_SPI_init(void)
{
     9e4:	b508      	push	{r3, lr}
	UI_SPI_CLOCK_init();
     9e6:	4b04      	ldr	r3, [pc, #16]	; (9f8 <UI_SPI_init+0x14>)
     9e8:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
     9ea:	4904      	ldr	r1, [pc, #16]	; (9fc <UI_SPI_init+0x18>)
     9ec:	4804      	ldr	r0, [pc, #16]	; (a00 <UI_SPI_init+0x1c>)
     9ee:	4b05      	ldr	r3, [pc, #20]	; (a04 <UI_SPI_init+0x20>)
     9f0:	4798      	blx	r3
	UI_SPI_PORT_init();
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <UI_SPI_init+0x24>)
     9f4:	4798      	blx	r3
     9f6:	bd08      	pop	{r3, pc}
     9f8:	000009c1 	.word	0x000009c1
     9fc:	41014000 	.word	0x41014000
     a00:	20000944 	.word	0x20000944
     a04:	00001b49 	.word	0x00001b49
     a08:	00000901 	.word	0x00000901

00000a0c <USART_WEST_CLOCK_init>:
     a0c:	4b06      	ldr	r3, [pc, #24]	; (a28 <USART_WEST_CLOCK_init+0x1c>)
     a0e:	2241      	movs	r2, #65	; 0x41
     a10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     a14:	2242      	movs	r2, #66	; 0x42
     a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
     a1a:	4a04      	ldr	r2, [pc, #16]	; (a2c <USART_WEST_CLOCK_init+0x20>)
     a1c:	6a13      	ldr	r3, [r2, #32]
     a1e:	f043 0301 	orr.w	r3, r3, #1
     a22:	6213      	str	r3, [r2, #32]
     a24:	4770      	bx	lr
     a26:	bf00      	nop
     a28:	40001c00 	.word	0x40001c00
     a2c:	40000800 	.word	0x40000800

00000a30 <USART_WEST_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a30:	4b10      	ldr	r3, [pc, #64]	; (a74 <USART_WEST_PORT_init+0x44>)
     a32:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     a36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a3e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a42:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a4e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a52:	f893 20c9 	ldrb.w	r2, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a62:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
     a72:	4770      	bx	lr
     a74:	41008000 	.word	0x41008000

00000a78 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
     a78:	b510      	push	{r4, lr}
     a7a:	b082      	sub	sp, #8
	USART_WEST_CLOCK_init();
     a7c:	4b07      	ldr	r3, [pc, #28]	; (a9c <USART_WEST_init+0x24>)
     a7e:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
     a80:	2300      	movs	r3, #0
     a82:	9300      	str	r3, [sp, #0]
     a84:	2310      	movs	r3, #16
     a86:	4a06      	ldr	r2, [pc, #24]	; (aa0 <USART_WEST_init+0x28>)
     a88:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <USART_WEST_init+0x2c>)
     a8e:	4c06      	ldr	r4, [pc, #24]	; (aa8 <USART_WEST_init+0x30>)
     a90:	47a0      	blx	r4
	USART_WEST_PORT_init();
     a92:	4b06      	ldr	r3, [pc, #24]	; (aac <USART_WEST_init+0x34>)
     a94:	4798      	blx	r3
}
     a96:	b002      	add	sp, #8
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00000a0d 	.word	0x00000a0d
     aa0:	20000124 	.word	0x20000124
     aa4:	20000b84 	.word	0x20000b84
     aa8:	00001f4d 	.word	0x00001f4d
     aac:	00000a31 	.word	0x00000a31

00000ab0 <SYS_I2C_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ab0:	4b16      	ldr	r3, [pc, #88]	; (b0c <SYS_I2C_PORT_init+0x5c>)
     ab2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     ab6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     aba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     ade:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     ae2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     aee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     af2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     af6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     afa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     afe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b06:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     b0a:	4770      	bx	lr
     b0c:	41008000 	.word	0x41008000

00000b10 <SYS_I2C_CLOCK_init>:
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <SYS_I2C_CLOCK_init+0x1c>)
     b12:	2241      	movs	r2, #65	; 0x41
     b14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     b18:	2242      	movs	r2, #66	; 0x42
     b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     b1e:	4a04      	ldr	r2, [pc, #16]	; (b30 <SYS_I2C_CLOCK_init+0x20>)
     b20:	6a13      	ldr	r3, [r2, #32]
     b22:	f043 0302 	orr.w	r3, r3, #2
     b26:	6213      	str	r3, [r2, #32]
     b28:	4770      	bx	lr
     b2a:	bf00      	nop
     b2c:	40001c00 	.word	0x40001c00
     b30:	40000800 	.word	0x40000800

00000b34 <SYS_I2C_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SYS_I2C_init(void)
{
     b34:	b508      	push	{r3, lr}
	SYS_I2C_CLOCK_init();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <SYS_I2C_init+0x14>)
     b38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
     b3a:	4904      	ldr	r1, [pc, #16]	; (b4c <SYS_I2C_init+0x18>)
     b3c:	4804      	ldr	r0, [pc, #16]	; (b50 <SYS_I2C_init+0x1c>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <SYS_I2C_init+0x20>)
     b40:	4798      	blx	r3
	SYS_I2C_PORT_init();
     b42:	4b05      	ldr	r3, [pc, #20]	; (b58 <SYS_I2C_init+0x24>)
     b44:	4798      	blx	r3
     b46:	bd08      	pop	{r3, pc}
     b48:	00000b11 	.word	0x00000b11
     b4c:	43000400 	.word	0x43000400
     b50:	20000a04 	.word	0x20000a04
     b54:	0000188d 	.word	0x0000188d
     b58:	00000ab1 	.word	0x00000ab1

00000b5c <USART_SOUTH_CLOCK_init>:
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <USART_SOUTH_CLOCK_init+0x1c>)
     b5e:	2241      	movs	r2, #65	; 0x41
     b60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
     b64:	2242      	movs	r2, #66	; 0x42
     b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
     b6a:	4a04      	ldr	r2, [pc, #16]	; (b7c <USART_SOUTH_CLOCK_init+0x20>)
     b6c:	6a13      	ldr	r3, [r2, #32]
     b6e:	f043 0304 	orr.w	r3, r3, #4
     b72:	6213      	str	r3, [r2, #32]
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	40001c00 	.word	0x40001c00
     b7c:	40000800 	.word	0x40000800

00000b80 <USART_SOUTH_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <USART_SOUTH_PORT_init+0x44>)
     b82:	f893 214d 	ldrb.w	r2, [r3, #333]	; 0x14d
	tmp &= ~PORT_PINCFG_PMUXEN;
     b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b8a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b92:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b96:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b9a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b9e:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ba2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     ba6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     baa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bae:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bb2:	f893 2136 	ldrb.w	r2, [r3, #310]	; 0x136
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     bb6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     bba:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bbe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
     bc2:	4770      	bx	lr
     bc4:	41008000 	.word	0x41008000

00000bc8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
     bc8:	b510      	push	{r4, lr}
     bca:	b082      	sub	sp, #8
	USART_SOUTH_CLOCK_init();
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <USART_SOUTH_init+0x20>)
     bce:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
     bd0:	2300      	movs	r3, #0
     bd2:	9300      	str	r3, [sp, #0]
     bd4:	2310      	movs	r3, #16
     bd6:	4a05      	ldr	r2, [pc, #20]	; (bec <USART_SOUTH_init+0x24>)
     bd8:	4905      	ldr	r1, [pc, #20]	; (bf0 <USART_SOUTH_init+0x28>)
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <USART_SOUTH_init+0x2c>)
     bdc:	4c06      	ldr	r4, [pc, #24]	; (bf8 <USART_SOUTH_init+0x30>)
     bde:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <USART_SOUTH_init+0x34>)
     be2:	4798      	blx	r3
}
     be4:	b002      	add	sp, #8
     be6:	bd10      	pop	{r4, pc}
     be8:	00000b5d 	.word	0x00000b5d
     bec:	20000134 	.word	0x20000134
     bf0:	43000800 	.word	0x43000800
     bf4:	20000bd4 	.word	0x20000bd4
     bf8:	00001f4d 	.word	0x00001f4d
     bfc:	00000b81 	.word	0x00000b81

00000c00 <GRID_LED_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <GRID_LED_PORT_init+0xa8>)
     c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c0e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c12:	4926      	ldr	r1, [pc, #152]	; (cac <GRID_LED_PORT_init+0xac>)
     c14:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c18:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
	tmp &= ~PORT_PINCFG_PMUXEN;
     c1c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c20:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c24:	f883 10de 	strb.w	r1, [r3, #222]	; 0xde
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c28:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c2c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c30:	f041 0102 	orr.w	r1, r1, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c34:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
     c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     c48:	4919      	ldr	r1, [pc, #100]	; (cb0 <GRID_LED_PORT_init+0xb0>)
     c4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c4e:	f893 10df 	ldrb.w	r1, [r3, #223]	; 0xdf
	tmp &= ~PORT_PINCFG_PMUXEN;
     c52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5a:	f883 10df 	strb.w	r1, [r3, #223]	; 0xdf
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c5e:	f893 10bf 	ldrb.w	r1, [r3, #191]	; 0xbf
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c62:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c66:	f041 0120 	orr.w	r1, r1, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6a:	f883 10bf 	strb.w	r1, [r3, #191]	; 0xbf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     c6e:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c70:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     c74:	629a      	str	r2, [r3, #40]	; 0x28
     c76:	4a0f      	ldr	r2, [pc, #60]	; (cb4 <GRID_LED_PORT_init+0xb4>)
     c78:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     c7a:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     c7e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c82:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c86:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
	tmp &= ~PORT_PINCFG_PMUXEN;
     c8a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c8e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c92:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c96:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c9e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
     ca6:	4770      	bx	lr
     ca8:	41008000 	.word	0x41008000
     cac:	c0004000 	.word	0xc0004000
     cb0:	c0008000 	.word	0xc0008000
     cb4:	c0024000 	.word	0xc0024000

00000cb8 <GRID_LED_CLOCK_init>:
     cb8:	4b06      	ldr	r3, [pc, #24]	; (cd4 <GRID_LED_CLOCK_init+0x1c>)
     cba:	2241      	movs	r2, #65	; 0x41
     cbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     cc0:	2242      	movs	r2, #66	; 0x42
     cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     cc6:	4a04      	ldr	r2, [pc, #16]	; (cd8 <GRID_LED_CLOCK_init+0x20>)
     cc8:	6a13      	ldr	r3, [r2, #32]
     cca:	f043 0308 	orr.w	r3, r3, #8
     cce:	6213      	str	r3, [r2, #32]
     cd0:	4770      	bx	lr
     cd2:	bf00      	nop
     cd4:	40001c00 	.word	0x40001c00
     cd8:	40000800 	.word	0x40000800

00000cdc <GRID_LED_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void GRID_LED_init(void)
{
     cdc:	b508      	push	{r3, lr}
	GRID_LED_CLOCK_init();
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <GRID_LED_init+0x14>)
     ce0:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
     ce2:	4904      	ldr	r1, [pc, #16]	; (cf4 <GRID_LED_init+0x18>)
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <GRID_LED_init+0x1c>)
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <GRID_LED_init+0x20>)
     ce8:	4798      	blx	r3
	GRID_LED_PORT_init();
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <GRID_LED_init+0x24>)
     cec:	4798      	blx	r3
     cee:	bd08      	pop	{r3, pc}
     cf0:	00000cb9 	.word	0x00000cb9
     cf4:	43000c00 	.word	0x43000c00
     cf8:	20000b20 	.word	0x20000b20
     cfc:	00001c35 	.word	0x00001c35
     d00:	00000c01 	.word	0x00000c01

00000d04 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d04:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d06:	4802      	ldr	r0, [pc, #8]	; (d10 <delay_driver_init+0xc>)
     d08:	4b02      	ldr	r3, [pc, #8]	; (d14 <delay_driver_init+0x10>)
     d0a:	4798      	blx	r3
     d0c:	bd08      	pop	{r3, pc}
     d0e:	bf00      	nop
     d10:	e000e010 	.word	0xe000e010
     d14:	00001779 	.word	0x00001779

00000d18 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b1e      	ldr	r3, [pc, #120]	; (d94 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     d1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     d24:	6299      	str	r1, [r3, #40]	; 0x28
     d26:	481c      	ldr	r0, [pc, #112]	; (d98 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     d28:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d2a:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d2c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     d30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d38:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d40:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d48:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     d4c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     d50:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     d5c:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d5e:	6299      	str	r1, [r3, #40]	; 0x28
     d60:	490e      	ldr	r1, [pc, #56]	; (d9c <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     d62:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d64:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     d66:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     d6a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     d6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d72:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     d76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     d7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     d82:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     d86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     d8a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     d92:	4770      	bx	lr
     d94:	41008000 	.word	0x41008000
     d98:	c0000100 	.word	0xc0000100
     d9c:	c0000200 	.word	0xc0000200

00000da0 <USB_DEVICE_INSTANCE_CLOCK_init>:
     da0:	2241      	movs	r2, #65	; 0x41
     da2:	4b07      	ldr	r3, [pc, #28]	; (dc0 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     da4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     da8:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     dac:	691a      	ldr	r2, [r3, #16]
     dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     db2:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     db4:	699a      	ldr	r2, [r3, #24]
     db6:	f042 0201 	orr.w	r2, r2, #1
     dba:	619a      	str	r2, [r3, #24]
     dbc:	4770      	bx	lr
     dbe:	bf00      	nop
     dc0:	40001c00 	.word	0x40001c00

00000dc4 <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     dc4:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     dc6:	4b03      	ldr	r3, [pc, #12]	; (dd4 <USB_DEVICE_INSTANCE_init+0x10>)
     dc8:	4798      	blx	r3
	usb_d_init();
     dca:	4b03      	ldr	r3, [pc, #12]	; (dd8 <USB_DEVICE_INSTANCE_init+0x14>)
     dcc:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <USB_DEVICE_INSTANCE_init+0x18>)
     dd0:	4798      	blx	r3
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00000da1 	.word	0x00000da1
     dd8:	00002379 	.word	0x00002379
     ddc:	00000d19 	.word	0x00000d19

00000de0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     de0:	4a02      	ldr	r2, [pc, #8]	; (dec <WDT_0_CLOCK_init+0xc>)
     de2:	6953      	ldr	r3, [r2, #20]
     de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     de8:	6153      	str	r3, [r2, #20]
     dea:	4770      	bx	lr
     dec:	40000800 	.word	0x40000800

00000df0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     df0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <WDT_0_init+0x1c>)
     df4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     df6:	2248      	movs	r2, #72	; 0x48
     df8:	4905      	ldr	r1, [pc, #20]	; (e10 <WDT_0_init+0x20>)
     dfa:	2001      	movs	r0, #1
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <WDT_0_init+0x24>)
     dfe:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     e00:	4805      	ldr	r0, [pc, #20]	; (e18 <WDT_0_init+0x28>)
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <WDT_0_init+0x2c>)
     e04:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <WDT_0_init+0x30>)
     e08:	4798      	blx	r3
     e0a:	bd08      	pop	{r3, pc}
     e0c:	00000de1 	.word	0x00000de1
     e10:	00008128 	.word	0x00008128
     e14:	000026ad 	.word	0x000026ad
     e18:	20000acc 	.word	0x20000acc
     e1c:	40002000 	.word	0x40002000
     e20:	00005c41 	.word	0x00005c41

00000e24 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     e28:	4ba3      	ldr	r3, [pc, #652]	; (10b8 <system_init+0x294>)
     e2a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     e2c:	4ba3      	ldr	r3, [pc, #652]	; (10bc <system_init+0x298>)
     e2e:	2220      	movs	r2, #32
     e30:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e32:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     e38:	629a      	str	r2, [r3, #40]	; 0x28
     e3a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     e3e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e40:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     e44:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e48:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e4c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
     e50:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e52:	4e9b      	ldr	r6, [pc, #620]	; (10c0 <system_init+0x29c>)
     e54:	629e      	str	r6, [r3, #40]	; 0x28
     e56:	499b      	ldr	r1, [pc, #620]	; (10c4 <system_init+0x2a0>)
     e58:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e5a:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
     e5e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e62:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e66:	f893 1055 	ldrb.w	r1, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     e6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e72:	2180      	movs	r1, #128	; 0x80
     e74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e78:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     e7c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     e80:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     e84:	4d90      	ldr	r5, [pc, #576]	; (10c8 <system_init+0x2a4>)
     e86:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     e8a:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
     e8e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     e92:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     e96:	f893 10c7 	ldrb.w	r1, [r3, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
     e9a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     e9e:	f883 10c7 	strb.w	r1, [r3, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ea2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     ea6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     eaa:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     eae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     eb2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     eb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eba:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     ebe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ec2:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ec6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     eca:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ece:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ed2:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
     ed6:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
     eda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ede:	f893 40ce 	ldrb.w	r4, [r3, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
     ee2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ee6:	f883 40ce 	strb.w	r4, [r3, #206]	; 0xce
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     eea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     eee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ef2:	4c76      	ldr	r4, [pc, #472]	; (10cc <system_init+0x2a8>)
     ef4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     ef8:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     efc:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
     f00:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
     f04:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f08:	f893 40cf 	ldrb.w	r4, [r3, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
     f0c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f10:	f883 40cf 	strb.w	r4, [r3, #207]	; 0xcf
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f14:	f44f 6400 	mov.w	r4, #2048	; 0x800
     f18:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f1c:	f8df e23c 	ldr.w	lr, [pc, #572]	; 115c <system_init+0x338>
     f20:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
     f24:	f8c3 5128 	str.w	r5, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f28:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     f2c:	f893 514b 	ldrb.w	r5, [r3, #331]	; 0x14b
     f30:	f045 0504 	orr.w	r5, r5, #4
     f34:	f883 514b 	strb.w	r5, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     f38:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f3c:	f893 414b 	ldrb.w	r4, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     f40:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f44:	f883 414b 	strb.w	r4, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f48:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f4c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f50:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
     f54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f58:	f893 214e 	ldrb.w	r2, [r3, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
     f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f60:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     f68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f6c:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
     f70:	4a57      	ldr	r2, [pc, #348]	; (10d0 <system_init+0x2ac>)
     f72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f76:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
     f7a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     f7e:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     f82:	f893 2152 	ldrb.w	r2, [r3, #338]	; 0x152
	tmp &= ~PORT_PINCFG_PMUXEN;
     f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     f8a:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     f92:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fa2:	494c      	ldr	r1, [pc, #304]	; (10d4 <system_init+0x2b0>)
     fa4:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fa8:	f893 1153 	ldrb.w	r1, [r3, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
     fac:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fb0:	f883 1153 	strb.w	r1, [r3, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fb4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
     fb8:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fbc:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fc0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fc4:	4944      	ldr	r1, [pc, #272]	; (10d8 <system_init+0x2b4>)
     fc6:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fca:	f893 1154 	ldrb.w	r1, [r3, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
     fce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     fd2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     fd6:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     fda:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     fe2:	4a3e      	ldr	r2, [pc, #248]	; (10dc <system_init+0x2b8>)
     fe4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     fe8:	f893 2155 	ldrb.w	r2, [r3, #341]	; 0x155
	tmp &= ~PORT_PINCFG_PMUXEN;
     fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ff0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <system_init+0x2bc>)
     ff6:	4798      	blx	r3
	ADC_1_init();
     ff8:	4b3a      	ldr	r3, [pc, #232]	; (10e4 <system_init+0x2c0>)
     ffa:	4798      	blx	r3

	CRC_0_init();
     ffc:	4b3a      	ldr	r3, [pc, #232]	; (10e8 <system_init+0x2c4>)
     ffe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1000:	4b3a      	ldr	r3, [pc, #232]	; (10ec <system_init+0x2c8>)
    1002:	4798      	blx	r3

	FLASH_0_init();
    1004:	4b3a      	ldr	r3, [pc, #232]	; (10f0 <system_init+0x2cc>)
    1006:	4798      	blx	r3

	QSPI_INSTANCE_init();
    1008:	4b3a      	ldr	r3, [pc, #232]	; (10f4 <system_init+0x2d0>)
    100a:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    100c:	4c3a      	ldr	r4, [pc, #232]	; (10f8 <system_init+0x2d4>)
    100e:	6963      	ldr	r3, [r4, #20]
    1010:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1014:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <system_init+0x2d8>)
    1018:	4798      	blx	r3
    101a:	4602      	mov	r2, r0
    101c:	4938      	ldr	r1, [pc, #224]	; (1100 <system_init+0x2dc>)
    101e:	4839      	ldr	r0, [pc, #228]	; (1104 <system_init+0x2e0>)
    1020:	4d39      	ldr	r5, [pc, #228]	; (1108 <system_init+0x2e4>)
    1022:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    1024:	4b39      	ldr	r3, [pc, #228]	; (110c <system_init+0x2e8>)
    1026:	4798      	blx	r3
	USART_NORTH_init();
    1028:	4b39      	ldr	r3, [pc, #228]	; (1110 <system_init+0x2ec>)
    102a:	4798      	blx	r3

	GRID_AUX_init();
    102c:	4b39      	ldr	r3, [pc, #228]	; (1114 <system_init+0x2f0>)
    102e:	4798      	blx	r3

	UI_SPI_init();
    1030:	4b39      	ldr	r3, [pc, #228]	; (1118 <system_init+0x2f4>)
    1032:	4798      	blx	r3
	USART_WEST_init();
    1034:	4b39      	ldr	r3, [pc, #228]	; (111c <system_init+0x2f8>)
    1036:	4798      	blx	r3

	SYS_I2C_init();
    1038:	4b39      	ldr	r3, [pc, #228]	; (1120 <system_init+0x2fc>)
    103a:	4798      	blx	r3
	USART_SOUTH_init();
    103c:	4b39      	ldr	r3, [pc, #228]	; (1124 <system_init+0x300>)
    103e:	4798      	blx	r3

	GRID_LED_init();
    1040:	4b39      	ldr	r3, [pc, #228]	; (1128 <system_init+0x304>)
    1042:	4798      	blx	r3

	delay_driver_init();
    1044:	4b39      	ldr	r3, [pc, #228]	; (112c <system_init+0x308>)
    1046:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1048:	6963      	ldr	r3, [r4, #20]
    104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    104e:	6163      	str	r3, [r4, #20]
    1050:	f5a7 5710 	sub.w	r7, r7, #9216	; 0x2400
    1054:	f04f 0840 	mov.w	r8, #64	; 0x40
    1058:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    105c:	4e34      	ldr	r6, [pc, #208]	; (1130 <system_init+0x30c>)
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4934      	ldr	r1, [pc, #208]	; (1134 <system_init+0x310>)
    1064:	4834      	ldr	r0, [pc, #208]	; (1138 <system_init+0x314>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1068:	6963      	ldr	r3, [r4, #20]
    106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    106e:	6163      	str	r3, [r4, #20]
    1070:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	4930      	ldr	r1, [pc, #192]	; (113c <system_init+0x318>)
    107a:	4831      	ldr	r0, [pc, #196]	; (1140 <system_init+0x31c>)
    107c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    107e:	69a3      	ldr	r3, [r4, #24]
    1080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1084:	61a3      	str	r3, [r4, #24]
    1086:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    108a:	47b0      	blx	r6
    108c:	4602      	mov	r2, r0
    108e:	492d      	ldr	r1, [pc, #180]	; (1144 <system_init+0x320>)
    1090:	482d      	ldr	r0, [pc, #180]	; (1148 <system_init+0x324>)
    1092:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1094:	69a3      	ldr	r3, [r4, #24]
    1096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    109a:	61a3      	str	r3, [r4, #24]
    109c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    10a0:	47b0      	blx	r6
    10a2:	4602      	mov	r2, r0
    10a4:	4929      	ldr	r1, [pc, #164]	; (114c <system_init+0x328>)
    10a6:	482a      	ldr	r0, [pc, #168]	; (1150 <system_init+0x32c>)
    10a8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	USB_DEVICE_INSTANCE_init();
    10aa:	4b2a      	ldr	r3, [pc, #168]	; (1154 <system_init+0x330>)
    10ac:	4798      	blx	r3

	WDT_0_init();
    10ae:	4b2a      	ldr	r3, [pc, #168]	; (1158 <system_init+0x334>)
    10b0:	4798      	blx	r3
    10b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10b6:	bf00      	nop
    10b8:	00002bf1 	.word	0x00002bf1
    10bc:	41008000 	.word	0x41008000
    10c0:	40020000 	.word	0x40020000
    10c4:	c0020020 	.word	0xc0020020
    10c8:	c0020000 	.word	0xc0020000
    10cc:	40028000 	.word	0x40028000
    10d0:	c0020004 	.word	0xc0020004
    10d4:	c0000008 	.word	0xc0000008
    10d8:	c0000010 	.word	0xc0000010
    10dc:	c0000020 	.word	0xc0000020
    10e0:	00000389 	.word	0x00000389
    10e4:	00000421 	.word	0x00000421
    10e8:	000004c5 	.word	0x000004c5
    10ec:	000004ed 	.word	0x000004ed
    10f0:	00000531 	.word	0x00000531
    10f4:	000006f9 	.word	0x000006f9
    10f8:	40000800 	.word	0x40000800
    10fc:	0000343d 	.word	0x0000343d
    1100:	40002400 	.word	0x40002400
    1104:	2000098c 	.word	0x2000098c
    1108:	00001d59 	.word	0x00001d59
    110c:	0000078d 	.word	0x0000078d
    1110:	00000831 	.word	0x00000831
    1114:	000008d5 	.word	0x000008d5
    1118:	000009e5 	.word	0x000009e5
    111c:	00000a79 	.word	0x00000a79
    1120:	00000b35 	.word	0x00000b35
    1124:	00000bc9 	.word	0x00000bc9
    1128:	00000cdd 	.word	0x00000cdd
    112c:	00000d05 	.word	0x00000d05
    1130:	0000499d 	.word	0x0000499d
    1134:	40003800 	.word	0x40003800
    1138:	20000c70 	.word	0x20000c70
    113c:	40003c00 	.word	0x40003c00
    1140:	20000b64 	.word	0x20000b64
    1144:	4101a000 	.word	0x4101a000
    1148:	200009ac 	.word	0x200009ac
    114c:	4101c000 	.word	0x4101c000
    1150:	20000c50 	.word	0x20000c50
    1154:	00000dc5 	.word	0x00000dc5
    1158:	00000df1 	.word	0x00000df1
    115c:	40020800 	.word	0x40020800

00001160 <grid_unittest_init>:
 */ 


#include "grid_unittest.h"
	
uint8_t grid_unittest_init(struct grid_unittest_model* mod){
    1160:	1e43      	subs	r3, r0, #1
    1162:	f100 011f 	add.w	r1, r0, #31
	
	for (uint32_t i=0; i<GRID_UNITTEST_CASE_NAME_LENGTH; i++)
	{
		mod->case_name[i] = 0;
    1166:	2200      	movs	r2, #0
    1168:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint32_t i=0; i<GRID_UNITTEST_CASE_NAME_LENGTH; i++)
    116c:	428b      	cmp	r3, r1
    116e:	d1fb      	bne.n	1168 <grid_unittest_init+0x8>
	}
	
	mod->case_done = 1;
    1170:	2301      	movs	r3, #1
    1172:	6283      	str	r3, [r0, #40]	; 0x28
	mod->case_count = 0;
    1174:	2300      	movs	r3, #0
    1176:	62c3      	str	r3, [r0, #44]	; 0x2c
	mod->case_pass = 0;
    1178:	6203      	str	r3, [r0, #32]
	mod->case_fail = 0;
    117a:	6243      	str	r3, [r0, #36]	; 0x24
    117c:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    1180:	f100 014f 	add.w	r1, r0, #79	; 0x4f
	
	
	
	for (uint32_t i=0; i<GRID_UNITTEST_GROUP_NAME_LENGTH; i++)
	{
		mod->group_name[i] = 0;
    1184:	2200      	movs	r2, #0
    1186:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (uint32_t i=0; i<GRID_UNITTEST_GROUP_NAME_LENGTH; i++)
    118a:	428b      	cmp	r3, r1
    118c:	d1fb      	bne.n	1186 <grid_unittest_init+0x26>
	}	
	
	mod->group_done = 1;
    118e:	2301      	movs	r3, #1
    1190:	6583      	str	r3, [r0, #88]	; 0x58
	mod->group_count = 0;
    1192:	2300      	movs	r3, #0
    1194:	65c3      	str	r3, [r0, #92]	; 0x5c
	mod->group_pass = 0;
    1196:	6503      	str	r3, [r0, #80]	; 0x50
	mod->group_fail = 0;
    1198:	6543      	str	r3, [r0, #84]	; 0x54
	
	
}	
    119a:	4770      	bx	lr

0000119c <grid_unittest_group_init>:
	
	
uint8_t grid_unittest_group_init(struct grid_unittest_model* mod, char* gname){
    119c:	b538      	push	{r3, r4, r5, lr}
	
	if (mod->group_done == 1){
    119e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    11a0:	2b01      	cmp	r3, #1
    11a2:	d000      	beq.n	11a6 <grid_unittest_group_init+0xa>
    11a4:	e7fe      	b.n	11a4 <grid_unittest_group_init+0x8>
    11a6:	f100 032f 	add.w	r3, r0, #47	; 0x2f
    11aa:	f100 044f 	add.w	r4, r0, #79	; 0x4f
		
		for (uint32_t i=0; i<GRID_UNITTEST_GROUP_NAME_LENGTH; i++)
		{		
			mod->group_name[i] = 0;		
    11ae:	2200      	movs	r2, #0
    11b0:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (uint32_t i=0; i<GRID_UNITTEST_GROUP_NAME_LENGTH; i++)
    11b4:	42a3      	cmp	r3, r4
    11b6:	d1fb      	bne.n	11b0 <grid_unittest_group_init+0x14>
		}
		
		for (uint32_t i=0; i<GRID_UNITTEST_GROUP_NAME_LENGTH-1; i++)
		{
			
			if(gname[i]==0){
    11b8:	780a      	ldrb	r2, [r1, #0]
    11ba:	b96a      	cbnz	r2, 11d8 <grid_unittest_group_init+0x3c>
    11bc:	4604      	mov	r4, r0
				mod->group_name[i] = gname[i];
			}
			
		}

		mod->group_name[GRID_UNITTEST_GROUP_NAME_LENGTH-1] = 0;
    11be:	2500      	movs	r5, #0
    11c0:	f880 504f 	strb.w	r5, [r0, #79]	; 0x4f
	
		printf(" ===== %s =====\r\n", mod->group_name);
    11c4:	f100 0130 	add.w	r1, r0, #48	; 0x30
    11c8:	480a      	ldr	r0, [pc, #40]	; (11f4 <grid_unittest_group_init+0x58>)
    11ca:	4b0b      	ldr	r3, [pc, #44]	; (11f8 <grid_unittest_group_init+0x5c>)
    11cc:	4798      	blx	r3
		
		mod->case_pass = 0;
    11ce:	6225      	str	r5, [r4, #32]
		mod->case_fail = 0;
    11d0:	6265      	str	r5, [r4, #36]	; 0x24
		
		mod->group_done = 0;
    11d2:	65a5      	str	r5, [r4, #88]	; 0x58
		}
	}
	
	return 1;

}
    11d4:	2001      	movs	r0, #1
    11d6:	bd38      	pop	{r3, r4, r5, pc}
				mod->group_name[i] = gname[i];
    11d8:	4603      	mov	r3, r0
    11da:	f803 2f30 	strb.w	r2, [r3, #48]!
    11de:	460a      	mov	r2, r1
    11e0:	311e      	adds	r1, #30
			if(gname[i]==0){
    11e2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    11e6:	2c00      	cmp	r4, #0
    11e8:	d0e8      	beq.n	11bc <grid_unittest_group_init+0x20>
				mod->group_name[i] = gname[i];
    11ea:	f803 4f01 	strb.w	r4, [r3, #1]!
		for (uint32_t i=0; i<GRID_UNITTEST_GROUP_NAME_LENGTH-1; i++)
    11ee:	428a      	cmp	r2, r1
    11f0:	d1f7      	bne.n	11e2 <grid_unittest_group_init+0x46>
    11f2:	e7e3      	b.n	11bc <grid_unittest_group_init+0x20>
    11f4:	00008144 	.word	0x00008144
    11f8:	00006e45 	.word	0x00006e45

000011fc <grid_unittest_group_done>:

uint8_t grid_unittest_group_done(struct grid_unittest_model* mod){
	
	if (mod->group_done == 0){
    11fc:	6d83      	ldr	r3, [r0, #88]	; 0x58
    11fe:	b98b      	cbnz	r3, 1224 <grid_unittest_group_done+0x28>
uint8_t grid_unittest_group_done(struct grid_unittest_model* mod){
    1200:	b510      	push	{r4, lr}
				
		if (mod->case_fail == 0){
    1202:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1204:	b153      	cbz	r3, 121c <grid_unittest_group_done+0x20>
			
			mod->group_pass++;
		}
		else{
			
			mod->group_fail++;
    1206:	6d43      	ldr	r3, [r0, #84]	; 0x54
    1208:	3301      	adds	r3, #1
    120a:	6543      	str	r3, [r0, #84]	; 0x54
    120c:	4604      	mov	r4, r0
		
			
		//printf("\r\n PASS: %d, FAIL: %d\r\n\r\n", mod->case_pass, mod->case_fail);
		
		
		printf("\r\n");
    120e:	4806      	ldr	r0, [pc, #24]	; (1228 <grid_unittest_group_done+0x2c>)
    1210:	4b06      	ldr	r3, [pc, #24]	; (122c <grid_unittest_group_done+0x30>)
    1212:	4798      	blx	r3
		
		
		
		mod->group_done = 1;
    1214:	2301      	movs	r3, #1
    1216:	65a3      	str	r3, [r4, #88]	; 0x58
			//TRAP
		}
	}
	
	
}
    1218:	2000      	movs	r0, #0
    121a:	bd10      	pop	{r4, pc}
			mod->group_pass++;
    121c:	6d03      	ldr	r3, [r0, #80]	; 0x50
    121e:	3301      	adds	r3, #1
    1220:	6503      	str	r3, [r0, #80]	; 0x50
    1222:	e7f3      	b.n	120c <grid_unittest_group_done+0x10>
    1224:	e7fe      	b.n	1224 <grid_unittest_group_done+0x28>
    1226:	bf00      	nop
    1228:	00008adc 	.word	0x00008adc
    122c:	00006f2d 	.word	0x00006f2d

00001230 <grid_unittest_case_init>:


uint8_t grid_unittest_case_init(struct grid_unittest_model* mod, char* cname){
	
	if (mod->case_done == 1){
    1230:	6a83      	ldr	r3, [r0, #40]	; 0x28
    1232:	2b01      	cmp	r3, #1
    1234:	d000      	beq.n	1238 <grid_unittest_case_init+0x8>
    1236:	e7fe      	b.n	1236 <grid_unittest_case_init+0x6>
uint8_t grid_unittest_case_init(struct grid_unittest_model* mod, char* cname){
    1238:	b410      	push	{r4}
    123a:	1e43      	subs	r3, r0, #1
    123c:	f100 041f 	add.w	r4, r0, #31
		
		for (uint32_t i=0; i<GRID_UNITTEST_CASE_NAME_LENGTH; i++)
		{		
			mod->case_name[i] = 0;		
    1240:	2200      	movs	r2, #0
    1242:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (uint32_t i=0; i<GRID_UNITTEST_CASE_NAME_LENGTH; i++)
    1246:	42a3      	cmp	r3, r4
    1248:	d1fb      	bne.n	1242 <grid_unittest_case_init+0x12>
		}
		
		for (uint32_t i=0; i<GRID_UNITTEST_CASE_NAME_LENGTH-1; i++)
		{
			
			if(cname[i]==0){
    124a:	780b      	ldrb	r3, [r1, #0]
    124c:	b933      	cbnz	r3, 125c <grid_unittest_case_init+0x2c>
				mod->case_name[i] = cname[i];
			}
			
		}

		mod->case_name[GRID_UNITTEST_CASE_NAME_LENGTH-1] = 0;
    124e:	2300      	movs	r3, #0
    1250:	77c3      	strb	r3, [r0, #31]
	
		
		
		mod->case_done = 0;
    1252:	6283      	str	r3, [r0, #40]	; 0x28
	}
	
	
	return 1;

}
    1254:	2001      	movs	r0, #1
    1256:	f85d 4b04 	ldr.w	r4, [sp], #4
    125a:	4770      	bx	lr
				mod->case_name[i] = cname[i];
    125c:	7003      	strb	r3, [r0, #0]
    125e:	460b      	mov	r3, r1
    1260:	4602      	mov	r2, r0
    1262:	311e      	adds	r1, #30
			if(cname[i]==0){
    1264:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    1268:	2c00      	cmp	r4, #0
    126a:	d0f0      	beq.n	124e <grid_unittest_case_init+0x1e>
				mod->case_name[i] = cname[i];
    126c:	f802 4f01 	strb.w	r4, [r2, #1]!
		for (uint32_t i=0; i<GRID_UNITTEST_CASE_NAME_LENGTH-1; i++)
    1270:	428b      	cmp	r3, r1
    1272:	d1f7      	bne.n	1264 <grid_unittest_case_init+0x34>
    1274:	e7eb      	b.n	124e <grid_unittest_case_init+0x1e>
	...

00001278 <grid_unittest_case_pass>:


uint8_t grid_unittest_case_pass(struct grid_unittest_model* mod, char* comment){
    1278:	b510      	push	{r4, lr}
    127a:	4604      	mov	r4, r0
	
	if (strlen(comment)){
    127c:	780b      	ldrb	r3, [r1, #0]
    127e:	b94b      	cbnz	r3, 1294 <grid_unittest_case_pass+0x1c>
		printf(" PASS: %s || %s\r\n", mod->case_name, comment);
		
	}
	else{
		
		printf(" PASS: %s \r\n", mod->case_name);
    1280:	4601      	mov	r1, r0
    1282:	4807      	ldr	r0, [pc, #28]	; (12a0 <grid_unittest_case_pass+0x28>)
    1284:	4b07      	ldr	r3, [pc, #28]	; (12a4 <grid_unittest_case_pass+0x2c>)
    1286:	4798      	blx	r3
	}

	mod->case_pass++;
    1288:	6a23      	ldr	r3, [r4, #32]
    128a:	3301      	adds	r3, #1
    128c:	6223      	str	r3, [r4, #32]
	mod->case_done = 1;
    128e:	2301      	movs	r3, #1
    1290:	62a3      	str	r3, [r4, #40]	; 0x28
	
}
    1292:	bd10      	pop	{r4, pc}
		printf(" PASS: %s || %s\r\n", mod->case_name, comment);
    1294:	460a      	mov	r2, r1
    1296:	4601      	mov	r1, r0
    1298:	4803      	ldr	r0, [pc, #12]	; (12a8 <grid_unittest_case_pass+0x30>)
    129a:	4b02      	ldr	r3, [pc, #8]	; (12a4 <grid_unittest_case_pass+0x2c>)
    129c:	4798      	blx	r3
    129e:	e7f3      	b.n	1288 <grid_unittest_case_pass+0x10>
    12a0:	0000816c 	.word	0x0000816c
    12a4:	00006e45 	.word	0x00006e45
    12a8:	00008158 	.word	0x00008158

000012ac <grid_unittest_case_fail>:
uint8_t grid_unittest_case_fail(struct grid_unittest_model* mod, char* comment){
    12ac:	b510      	push	{r4, lr}
    12ae:	4604      	mov	r4, r0

	if (strlen(comment)){
    12b0:	780b      	ldrb	r3, [r1, #0]
    12b2:	b94b      	cbnz	r3, 12c8 <grid_unittest_case_fail+0x1c>
		printf(" FAIL: %s || %s\r\n", mod->case_name, comment);
		
	}
	else{
		
		printf(" FAIL: %s \r\n", mod->case_name);
    12b4:	4601      	mov	r1, r0
    12b6:	4807      	ldr	r0, [pc, #28]	; (12d4 <grid_unittest_case_fail+0x28>)
    12b8:	4b07      	ldr	r3, [pc, #28]	; (12d8 <grid_unittest_case_fail+0x2c>)
    12ba:	4798      	blx	r3
	}

	mod->case_fail++;
    12bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12be:	3301      	adds	r3, #1
    12c0:	6263      	str	r3, [r4, #36]	; 0x24
	mod->case_done = 1;
    12c2:	2301      	movs	r3, #1
    12c4:	62a3      	str	r3, [r4, #40]	; 0x28
}
    12c6:	bd10      	pop	{r4, pc}
		printf(" FAIL: %s || %s\r\n", mod->case_name, comment);
    12c8:	460a      	mov	r2, r1
    12ca:	4601      	mov	r1, r0
    12cc:	4803      	ldr	r0, [pc, #12]	; (12dc <grid_unittest_case_fail+0x30>)
    12ce:	4b02      	ldr	r3, [pc, #8]	; (12d8 <grid_unittest_case_fail+0x2c>)
    12d0:	4798      	blx	r3
    12d2:	e7f3      	b.n	12bc <grid_unittest_case_fail+0x10>
    12d4:	00008190 	.word	0x00008190
    12d8:	00006e45 	.word	0x00006e45
    12dc:	0000817c 	.word	0x0000817c

000012e0 <grid_unittest_start>:


	
	
	
void grid_unittest_start(){
    12e0:	b508      	push	{r3, lr}
	
	
	grid_unittest_init(&grid_unittest_state);
    12e2:	4803      	ldr	r0, [pc, #12]	; (12f0 <grid_unittest_start+0x10>)
    12e4:	4b03      	ldr	r3, [pc, #12]	; (12f4 <grid_unittest_start+0x14>)
    12e6:	4798      	blx	r3
	
	printf("\r\n Grid Unit Test Start\r\n\r\n");
    12e8:	4803      	ldr	r0, [pc, #12]	; (12f8 <grid_unittest_start+0x18>)
    12ea:	4b04      	ldr	r3, [pc, #16]	; (12fc <grid_unittest_start+0x1c>)
    12ec:	4798      	blx	r3
    12ee:	bd08      	pop	{r3, pc}
    12f0:	2000303c 	.word	0x2000303c
    12f4:	00001161 	.word	0x00001161
    12f8:	000081a0 	.word	0x000081a0
    12fc:	00006f2d 	.word	0x00006f2d

00001300 <grid_sys_read_hex_char_value>:
}




uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
    1300:	4602      	mov	r2, r0
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    1302:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1306:	b2d8      	uxtb	r0, r3
    1308:	2809      	cmp	r0, #9
    130a:	d90d      	bls.n	1328 <grid_sys_read_hex_char_value+0x28>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    130c:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    1310:	b2db      	uxtb	r3, r3
    1312:	2b05      	cmp	r3, #5
    1314:	d903      	bls.n	131e <grid_sys_read_hex_char_value+0x1e>
		result = ascii - 97 + 10;
	}
	else{
		// wrong input
		if (error_flag != NULL){
    1316:	b131      	cbz	r1, 1326 <grid_sys_read_hex_char_value+0x26>
			*error_flag = ascii;
    1318:	700a      	strb	r2, [r1, #0]
	uint8_t result = 0;
    131a:	2000      	movs	r0, #0
    131c:	4770      	bx	lr
		result = ascii - 97 + 10;
    131e:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
    1322:	b2c0      	uxtb	r0, r0
    1324:	4770      	bx	lr
	uint8_t result = 0;
    1326:	2000      	movs	r0, #0
		}
	}
	
	return result;	
}
    1328:	4770      	bx	lr
	...

0000132c <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    132c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
    1330:	b1c1      	cbz	r1, 1364 <grid_sys_read_hex_string_value+0x38>
    1332:	4690      	mov	r8, r2
    1334:	1e45      	subs	r5, r0, #1
    1336:	1e4b      	subs	r3, r1, #1
    1338:	009c      	lsls	r4, r3, #2
    133a:	f101 4780 	add.w	r7, r1, #1073741824	; 0x40000000
    133e:	3f02      	subs	r7, #2
    1340:	b2db      	uxtb	r3, r3
    1342:	1aff      	subs	r7, r7, r3
    1344:	00bf      	lsls	r7, r7, #2
    1346:	2600      	movs	r6, #0
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    1348:	f8df 901c 	ldr.w	r9, [pc, #28]	; 1368 <grid_sys_read_hex_string_value+0x3c>
    134c:	4641      	mov	r1, r8
    134e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    1352:	47c8      	blx	r9
    1354:	40a0      	lsls	r0, r4
    1356:	4406      	add	r6, r0
    1358:	3c04      	subs	r4, #4
	for(uint8_t i=0; i<length; i++){
    135a:	42bc      	cmp	r4, r7
    135c:	d1f6      	bne.n	134c <grid_sys_read_hex_string_value+0x20>

		
	}

	return result;
}
    135e:	4630      	mov	r0, r6
    1360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t result  = 0;
    1364:	2600      	movs	r6, #0
	return result;
    1366:	e7fa      	b.n	135e <grid_sys_read_hex_string_value+0x32>
    1368:	00001301 	.word	0x00001301

0000136c <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    136c:	b530      	push	{r4, r5, lr}
    136e:	b085      	sub	sp, #20
    1370:	4605      	mov	r5, r0
    1372:	460c      	mov	r4, r1
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    1374:	4909      	ldr	r1, [pc, #36]	; (139c <grid_sys_write_hex_string_value+0x30>)
    1376:	a801      	add	r0, sp, #4
    1378:	4b09      	ldr	r3, [pc, #36]	; (13a0 <grid_sys_write_hex_string_value+0x34>)
    137a:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    137c:	b164      	cbz	r4, 1398 <grid_sys_write_hex_string_value+0x2c>
    137e:	ab04      	add	r3, sp, #16
    1380:	1b1a      	subs	r2, r3, r4
    1382:	3a05      	subs	r2, #5
    1384:	1e6b      	subs	r3, r5, #1
    1386:	1e60      	subs	r0, r4, #1
    1388:	fa55 f080 	uxtab	r0, r5, r0
		start_location[i] = str[8-size+i];	
    138c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1390:	f803 1f01 	strb.w	r1, [r3, #1]!
	for(uint8_t i=0; i<size; i++){	
    1394:	4283      	cmp	r3, r0
    1396:	d1f9      	bne.n	138c <grid_sys_write_hex_string_value+0x20>
	}

}
    1398:	b005      	add	sp, #20
    139a:	bd30      	pop	{r4, r5, pc}
    139c:	000081c4 	.word	0x000081c4
    13a0:	000070c9 	.word	0x000070c9

000013a4 <grid_msg_checksum_calculate>:
}

uint8_t grid_msg_checksum_calculate(uint8_t* str, uint32_t length){
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    13a4:	2903      	cmp	r1, #3
    13a6:	d009      	beq.n	13bc <grid_msg_checksum_calculate+0x18>
    13a8:	1e43      	subs	r3, r0, #1
    13aa:	3904      	subs	r1, #4
    13ac:	4401      	add	r1, r0
    13ae:	2000      	movs	r0, #0
		checksum ^= str[i];
    13b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    13b4:	4050      	eors	r0, r2
	for (uint32_t i=0; i<length-3; i++){
    13b6:	428b      	cmp	r3, r1
    13b8:	d1fa      	bne.n	13b0 <grid_msg_checksum_calculate+0xc>
    13ba:	4770      	bx	lr
	uint8_t checksum = 0;
    13bc:	2000      	movs	r0, #0
	}
	
	return checksum;
	
}
    13be:	4770      	bx	lr

000013c0 <grid_msg_checksum_read>:

uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    13c0:	b500      	push	{lr}
    13c2:	b083      	sub	sp, #12
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    13c4:	1ecb      	subs	r3, r1, #3
    13c6:	f10d 0207 	add.w	r2, sp, #7
    13ca:	2102      	movs	r1, #2
    13cc:	4418      	add	r0, r3
    13ce:	4b03      	ldr	r3, [pc, #12]	; (13dc <grid_msg_checksum_read+0x1c>)
    13d0:	4798      	blx	r3
}
    13d2:	b2c0      	uxtb	r0, r0
    13d4:	b003      	add	sp, #12
    13d6:	f85d fb04 	ldr.w	pc, [sp], #4
    13da:	bf00      	nop
    13dc:	0000132d 	.word	0x0000132d

000013e0 <grid_sys_unittest>:
uint32_t grid_sys_unittest(void){
    13e0:	b570      	push	{r4, r5, r6, lr}
    13e2:	b0a4      	sub	sp, #144	; 0x90
	if(grid_unittest_group_init(&grid_unittest_state, "grid_sys::checksum"))
    13e4:	494b      	ldr	r1, [pc, #300]	; (1514 <grid_sys_unittest+0x134>)
    13e6:	484c      	ldr	r0, [pc, #304]	; (1518 <grid_sys_unittest+0x138>)
    13e8:	4b4c      	ldr	r3, [pc, #304]	; (151c <grid_sys_unittest+0x13c>)
    13ea:	4798      	blx	r3
    13ec:	b970      	cbnz	r0, 140c <grid_sys_unittest+0x2c>
	grid_unittest_case_init(&grid_unittest_state, "Checksum Overwrite");
    13ee:	4c4a      	ldr	r4, [pc, #296]	; (1518 <grid_sys_unittest+0x138>)
    13f0:	494b      	ldr	r1, [pc, #300]	; (1520 <grid_sys_unittest+0x140>)
    13f2:	4620      	mov	r0, r4
    13f4:	4b4b      	ldr	r3, [pc, #300]	; (1524 <grid_sys_unittest+0x144>)
    13f6:	4798      	blx	r3
	grid_unittest_case_fail(&grid_unittest_state, "Parapaprikas");
    13f8:	494b      	ldr	r1, [pc, #300]	; (1528 <grid_sys_unittest+0x148>)
    13fa:	4620      	mov	r0, r4
    13fc:	4b4b      	ldr	r3, [pc, #300]	; (152c <grid_sys_unittest+0x14c>)
    13fe:	4798      	blx	r3
	grid_unittest_group_done(&grid_unittest_state);
    1400:	4620      	mov	r0, r4
    1402:	4b4b      	ldr	r3, [pc, #300]	; (1530 <grid_sys_unittest+0x150>)
    1404:	4798      	blx	r3
}
    1406:	2001      	movs	r0, #1
    1408:	b024      	add	sp, #144	; 0x90
    140a:	bd70      	pop	{r4, r5, r6, pc}
		if(grid_unittest_case_init(&grid_unittest_state, "Checksum Read/Calculate"))
    140c:	4949      	ldr	r1, [pc, #292]	; (1534 <grid_sys_unittest+0x154>)
    140e:	4842      	ldr	r0, [pc, #264]	; (1518 <grid_sys_unittest+0x138>)
    1410:	4b44      	ldr	r3, [pc, #272]	; (1524 <grid_sys_unittest+0x144>)
    1412:	4798      	blx	r3
    1414:	2800      	cmp	r0, #0
    1416:	d144      	bne.n	14a2 <grid_sys_unittest+0xc2>
		if (grid_unittest_case_init(&grid_unittest_state, "Checksum Write/Calculate")) // Write/Calculate	
    1418:	4947      	ldr	r1, [pc, #284]	; (1538 <grid_sys_unittest+0x158>)
    141a:	483f      	ldr	r0, [pc, #252]	; (1518 <grid_sys_unittest+0x138>)
    141c:	4b41      	ldr	r3, [pc, #260]	; (1524 <grid_sys_unittest+0x144>)
    141e:	4798      	blx	r3
    1420:	2800      	cmp	r0, #0
    1422:	d0e4      	beq.n	13ee <grid_sys_unittest+0xe>
			uint8_t packet[8] = {1, 0, 2, 2, 4, 0, 0, 10};
    1424:	4b45      	ldr	r3, [pc, #276]	; (153c <grid_sys_unittest+0x15c>)
    1426:	ac09      	add	r4, sp, #36	; 0x24
    1428:	e893 0003 	ldmia.w	r3, {r0, r1}
    142c:	e884 0003 	stmia.w	r4, {r0, r1}
			uint8_t checksum_calc = grid_msg_checksum_calculate(packet, length);
    1430:	2108      	movs	r1, #8
    1432:	4620      	mov	r0, r4
    1434:	4b42      	ldr	r3, [pc, #264]	; (1540 <grid_sys_unittest+0x160>)
    1436:	4798      	blx	r3
    1438:	4605      	mov	r5, r0
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    143a:	4602      	mov	r2, r0
    143c:	2102      	movs	r1, #2
    143e:	f10d 0029 	add.w	r0, sp, #41	; 0x29
    1442:	4b40      	ldr	r3, [pc, #256]	; (1544 <grid_sys_unittest+0x164>)
    1444:	4798      	blx	r3
			uint8_t checksum_read = grid_msg_checksum_read(packet, length);
    1446:	2108      	movs	r1, #8
    1448:	4620      	mov	r0, r4
    144a:	4b3f      	ldr	r3, [pc, #252]	; (1548 <grid_sys_unittest+0x168>)
    144c:	4798      	blx	r3
    144e:	4604      	mov	r4, r0
			char str[100] = {0};
    1450:	2264      	movs	r2, #100	; 0x64
    1452:	2100      	movs	r1, #0
    1454:	a80b      	add	r0, sp, #44	; 0x2c
    1456:	4b3d      	ldr	r3, [pc, #244]	; (154c <grid_sys_unittest+0x16c>)
    1458:	4798      	blx	r3
			sprintf(str, "packet{%d, %d, %d, %d, %d, %d, %d, %d} Read: %d, Calculate: %d", packet[0], packet[1], packet[2], packet[3], packet[4], packet[5], packet[6], packet[7], checksum_read, checksum_calc);	
    145a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    145e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    1462:	9507      	str	r5, [sp, #28]
    1464:	9406      	str	r4, [sp, #24]
    1466:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    146a:	9105      	str	r1, [sp, #20]
    146c:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
    1470:	9104      	str	r1, [sp, #16]
    1472:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
    1476:	9103      	str	r1, [sp, #12]
    1478:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    147c:	9102      	str	r1, [sp, #8]
    147e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    1482:	9101      	str	r1, [sp, #4]
    1484:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    1488:	9100      	str	r1, [sp, #0]
    148a:	4931      	ldr	r1, [pc, #196]	; (1550 <grid_sys_unittest+0x170>)
    148c:	a80b      	add	r0, sp, #44	; 0x2c
    148e:	4e31      	ldr	r6, [pc, #196]	; (1554 <grid_sys_unittest+0x174>)
    1490:	47b0      	blx	r6
			if (checksum_calc == checksum_read){		
    1492:	42a5      	cmp	r5, r4
				grid_unittest_case_pass(&grid_unittest_state,str);
    1494:	a90b      	add	r1, sp, #44	; 0x2c
    1496:	4820      	ldr	r0, [pc, #128]	; (1518 <grid_sys_unittest+0x138>)
    1498:	bf0c      	ite	eq
    149a:	4b2f      	ldreq	r3, [pc, #188]	; (1558 <grid_sys_unittest+0x178>)
				grid_unittest_case_fail(&grid_unittest_state,str);
    149c:	4b23      	ldrne	r3, [pc, #140]	; (152c <grid_sys_unittest+0x14c>)
    149e:	4798      	blx	r3
    14a0:	e7a5      	b.n	13ee <grid_sys_unittest+0xe>
			uint8_t packet[8] = {1, 0, 2, 2, 4, 0, 0, 10};
    14a2:	4b26      	ldr	r3, [pc, #152]	; (153c <grid_sys_unittest+0x15c>)
    14a4:	ac09      	add	r4, sp, #36	; 0x24
    14a6:	e893 0003 	ldmia.w	r3, {r0, r1}
    14aa:	e884 0003 	stmia.w	r4, {r0, r1}
			uint8_t checksum_calc = grid_msg_checksum_calculate(packet, length);
    14ae:	2108      	movs	r1, #8
    14b0:	4620      	mov	r0, r4
    14b2:	4b23      	ldr	r3, [pc, #140]	; (1540 <grid_sys_unittest+0x160>)
    14b4:	4798      	blx	r3
    14b6:	4605      	mov	r5, r0
			uint8_t checksum_read = grid_msg_checksum_read(packet, length);
    14b8:	2108      	movs	r1, #8
    14ba:	4620      	mov	r0, r4
    14bc:	4b22      	ldr	r3, [pc, #136]	; (1548 <grid_sys_unittest+0x168>)
    14be:	4798      	blx	r3
    14c0:	4604      	mov	r4, r0
			char str[100] = {0};
    14c2:	2264      	movs	r2, #100	; 0x64
    14c4:	2100      	movs	r1, #0
    14c6:	a80b      	add	r0, sp, #44	; 0x2c
    14c8:	4b20      	ldr	r3, [pc, #128]	; (154c <grid_sys_unittest+0x16c>)
    14ca:	4798      	blx	r3
			sprintf(str, "packet{%d, %d, %d, %d, %d, %d, %d, %d} Read: %d, Calculate: %d", packet[0], packet[1], packet[2], packet[3], packet[4], packet[5], packet[6], packet[7], checksum_read, checksum_calc);	
    14cc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    14d0:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    14d4:	9507      	str	r5, [sp, #28]
    14d6:	9406      	str	r4, [sp, #24]
    14d8:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    14dc:	9105      	str	r1, [sp, #20]
    14de:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
    14e2:	9104      	str	r1, [sp, #16]
    14e4:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
    14e8:	9103      	str	r1, [sp, #12]
    14ea:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    14ee:	9102      	str	r1, [sp, #8]
    14f0:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    14f4:	9101      	str	r1, [sp, #4]
    14f6:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    14fa:	9100      	str	r1, [sp, #0]
    14fc:	4914      	ldr	r1, [pc, #80]	; (1550 <grid_sys_unittest+0x170>)
    14fe:	a80b      	add	r0, sp, #44	; 0x2c
    1500:	4e14      	ldr	r6, [pc, #80]	; (1554 <grid_sys_unittest+0x174>)
    1502:	47b0      	blx	r6
			if (checksum_calc != checksum_read){		
    1504:	42a5      	cmp	r5, r4
				grid_unittest_case_pass(&grid_unittest_state,str);
    1506:	a90b      	add	r1, sp, #44	; 0x2c
    1508:	4803      	ldr	r0, [pc, #12]	; (1518 <grid_sys_unittest+0x138>)
    150a:	bf14      	ite	ne
    150c:	4b12      	ldrne	r3, [pc, #72]	; (1558 <grid_sys_unittest+0x178>)
				grid_unittest_case_fail(&grid_unittest_state,str);
    150e:	4b07      	ldreq	r3, [pc, #28]	; (152c <grid_sys_unittest+0x14c>)
    1510:	4798      	blx	r3
    1512:	e781      	b.n	1418 <grid_sys_unittest+0x38>
    1514:	000081cc 	.word	0x000081cc
    1518:	2000303c 	.word	0x2000303c
    151c:	0000119d 	.word	0x0000119d
    1520:	00008254 	.word	0x00008254
    1524:	00001231 	.word	0x00001231
    1528:	00008268 	.word	0x00008268
    152c:	000012ad 	.word	0x000012ad
    1530:	000011fd 	.word	0x000011fd
    1534:	000081e0 	.word	0x000081e0
    1538:	00008238 	.word	0x00008238
    153c:	000081bc 	.word	0x000081bc
    1540:	000013a5 	.word	0x000013a5
    1544:	0000136d 	.word	0x0000136d
    1548:	000013c1 	.word	0x000013c1
    154c:	00006cdb 	.word	0x00006cdb
    1550:	000081f8 	.word	0x000081f8
    1554:	000070c9 	.word	0x000070c9
    1558:	00001279 	.word	0x00001279

0000155c <adc_async_window_threshold_reached>:
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
	}
}

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
    155c:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    155e:	6983      	ldr	r3, [r0, #24]
    1560:	b103      	cbz	r3, 1564 <adc_async_window_threshold_reached+0x8>
		descr->adc_async_cb.monitor(descr, channel);
    1562:	4798      	blx	r3
    1564:	bd08      	pop	{r3, pc}

00001566 <adc_async_error_occured>:
	}
}

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
    1566:	b508      	push	{r3, lr}
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    1568:	69c3      	ldr	r3, [r0, #28]
    156a:	b103      	cbz	r3, 156e <adc_async_error_occured+0x8>
		descr->adc_async_cb.error(descr, channel);
    156c:	4798      	blx	r3
    156e:	bd08      	pop	{r3, pc}

00001570 <adc_async_channel_conversion_done>:
{
    1570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1574:	4606      	mov	r6, r0
    1576:	460f      	mov	r7, r1
    1578:	4691      	mov	r9, r2
	uint8_t                              index    = descr->channel_map[channel];
    157a:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    157c:	5c5c      	ldrb	r4, [r3, r1]
    157e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    1582:	00e4      	lsls	r4, r4, #3
    1584:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    1588:	eb08 0504 	add.w	r5, r8, r4
	ringbuffer_put(&descr_ch->convert, data);
    158c:	f105 0a04 	add.w	sl, r5, #4
    1590:	b2d1      	uxtb	r1, r2
    1592:	4650      	mov	r0, sl
    1594:	4b0c      	ldr	r3, [pc, #48]	; (15c8 <adc_async_channel_conversion_done+0x58>)
    1596:	4798      	blx	r3
	if (1 < _adc_async_get_data_size(&descr->device)) {
    1598:	4630      	mov	r0, r6
    159a:	4b0c      	ldr	r3, [pc, #48]	; (15cc <adc_async_channel_conversion_done+0x5c>)
    159c:	4798      	blx	r3
    159e:	2801      	cmp	r0, #1
    15a0:	d907      	bls.n	15b2 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    15a2:	ea4f 2119 	mov.w	r1, r9, lsr #8
    15a6:	4650      	mov	r0, sl
    15a8:	4b07      	ldr	r3, [pc, #28]	; (15c8 <adc_async_channel_conversion_done+0x58>)
    15aa:	4798      	blx	r3
		++descr_ch->bytes_in_buffer;
    15ac:	8aab      	ldrh	r3, [r5, #20]
    15ae:	3301      	adds	r3, #1
    15b0:	82ab      	strh	r3, [r5, #20]
	++descr_ch->bytes_in_buffer;
    15b2:	8aab      	ldrh	r3, [r5, #20]
    15b4:	3301      	adds	r3, #1
    15b6:	82ab      	strh	r3, [r5, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    15b8:	f858 3004 	ldr.w	r3, [r8, r4]
    15bc:	b113      	cbz	r3, 15c4 <adc_async_channel_conversion_done+0x54>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    15be:	4639      	mov	r1, r7
    15c0:	4630      	mov	r0, r6
    15c2:	4798      	blx	r3
    15c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    15c8:	000027e9 	.word	0x000027e9
    15cc:	00002b71 	.word	0x00002b71

000015d0 <adc_async_init>:
{
    15d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15d4:	4689      	mov	r9, r1
    15d6:	4616      	mov	r6, r2
    15d8:	461c      	mov	r4, r3
    15da:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    15de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    15e0:	4607      	mov	r7, r0
    15e2:	b140      	cbz	r0, 15f6 <adc_async_init+0x26>
    15e4:	b149      	cbz	r1, 15fa <adc_async_init+0x2a>
    15e6:	b152      	cbz	r2, 15fe <adc_async_init+0x2e>
    15e8:	f1b8 0f00 	cmp.w	r8, #0
    15ec:	d009      	beq.n	1602 <adc_async_init+0x32>
    15ee:	1c28      	adds	r0, r5, #0
    15f0:	bf18      	it	ne
    15f2:	2001      	movne	r0, #1
    15f4:	e006      	b.n	1604 <adc_async_init+0x34>
    15f6:	2000      	movs	r0, #0
    15f8:	e004      	b.n	1604 <adc_async_init+0x34>
    15fa:	2000      	movs	r0, #0
    15fc:	e002      	b.n	1604 <adc_async_init+0x34>
    15fe:	2000      	movs	r0, #0
    1600:	e000      	b.n	1604 <adc_async_init+0x34>
    1602:	2000      	movs	r0, #0
    1604:	f8df b064 	ldr.w	fp, [pc, #100]	; 166c <adc_async_init+0x9c>
    1608:	223f      	movs	r2, #63	; 0x3f
    160a:	4659      	mov	r1, fp
    160c:	f8df a060 	ldr.w	sl, [pc, #96]	; 1670 <adc_async_init+0xa0>
    1610:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    1612:	1c60      	adds	r0, r4, #1
    1614:	2240      	movs	r2, #64	; 0x40
    1616:	4659      	mov	r1, fp
    1618:	4580      	cmp	r8, r0
    161a:	bfcc      	ite	gt
    161c:	2000      	movgt	r0, #0
    161e:	2001      	movle	r0, #1
    1620:	47d0      	blx	sl
	device = &descr->device;
    1622:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    1624:	21ff      	movs	r1, #255	; 0xff
    1626:	b2da      	uxtb	r2, r3
    1628:	54b1      	strb	r1, [r6, r2]
    162a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i <= channel_max; i++) {
    162c:	b2da      	uxtb	r2, r3
    162e:	42a2      	cmp	r2, r4
    1630:	d9f9      	bls.n	1626 <adc_async_init+0x56>
	descr->channel_map    = channel_map;
    1632:	623e      	str	r6, [r7, #32]
	descr->channel_max    = channel_max;
    1634:	f887 4024 	strb.w	r4, [r7, #36]	; 0x24
	descr->channel_amount = channel_amount;
    1638:	f887 8025 	strb.w	r8, [r7, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    163c:	62bd      	str	r5, [r7, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    163e:	4649      	mov	r1, r9
    1640:	4638      	mov	r0, r7
    1642:	4b06      	ldr	r3, [pc, #24]	; (165c <adc_async_init+0x8c>)
    1644:	4798      	blx	r3
	if (init_status) {
    1646:	4603      	mov	r3, r0
    1648:	b928      	cbnz	r0, 1656 <adc_async_init+0x86>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    164a:	4a05      	ldr	r2, [pc, #20]	; (1660 <adc_async_init+0x90>)
    164c:	60ba      	str	r2, [r7, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    164e:	4a05      	ldr	r2, [pc, #20]	; (1664 <adc_async_init+0x94>)
    1650:	603a      	str	r2, [r7, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    1652:	4a05      	ldr	r2, [pc, #20]	; (1668 <adc_async_init+0x98>)
    1654:	607a      	str	r2, [r7, #4]
}
    1656:	4618      	mov	r0, r3
    1658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    165c:	00002a55 	.word	0x00002a55
    1660:	00001571 	.word	0x00001571
    1664:	0000155d 	.word	0x0000155d
    1668:	00001567 	.word	0x00001567
    166c:	00008278 	.word	0x00008278
    1670:	000026ad 	.word	0x000026ad

00001674 <adc_async_register_channel_buffer>:
{
    1674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1678:	460e      	mov	r6, r1
    167a:	4617      	mov	r7, r2
    167c:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    167e:	4605      	mov	r5, r0
    1680:	2800      	cmp	r0, #0
    1682:	d040      	beq.n	1706 <adc_async_register_channel_buffer+0x92>
    1684:	2a00      	cmp	r2, #0
    1686:	d040      	beq.n	170a <adc_async_register_channel_buffer+0x96>
    1688:	1c18      	adds	r0, r3, #0
    168a:	bf18      	it	ne
    168c:	2001      	movne	r0, #1
    168e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1728 <adc_async_register_channel_buffer+0xb4>
    1692:	2266      	movs	r2, #102	; 0x66
    1694:	4649      	mov	r1, r9
    1696:	4c22      	ldr	r4, [pc, #136]	; (1720 <adc_async_register_channel_buffer+0xac>)
    1698:	47a0      	blx	r4
	ASSERT(descr->channel_max >= channel);
    169a:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    169e:	2267      	movs	r2, #103	; 0x67
    16a0:	4649      	mov	r1, r9
    16a2:	42b0      	cmp	r0, r6
    16a4:	bf34      	ite	cc
    16a6:	2000      	movcc	r0, #0
    16a8:	2001      	movcs	r0, #1
    16aa:	47a0      	blx	r4
	if (descr->channel_map[channel] != 0xFF) {
    16ac:	6a29      	ldr	r1, [r5, #32]
    16ae:	5d8b      	ldrb	r3, [r1, r6]
    16b0:	2bff      	cmp	r3, #255	; 0xff
    16b2:	d12c      	bne.n	170e <adc_async_register_channel_buffer+0x9a>
	for (i = 0; i <= descr->channel_max; i++) {
    16b4:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    16b8:	2300      	movs	r3, #0
    16ba:	461c      	mov	r4, r3
		if (descr->channel_map[i] != 0xFF) {
    16bc:	b2da      	uxtb	r2, r3
    16be:	5c8a      	ldrb	r2, [r1, r2]
    16c0:	2aff      	cmp	r2, #255	; 0xff
			index++;
    16c2:	bf1c      	itt	ne
    16c4:	3401      	addne	r4, #1
    16c6:	b2e4      	uxtbne	r4, r4
    16c8:	3301      	adds	r3, #1
	for (i = 0; i <= descr->channel_max; i++) {
    16ca:	b2da      	uxtb	r2, r3
    16cc:	4282      	cmp	r2, r0
    16ce:	d9f5      	bls.n	16bc <adc_async_register_channel_buffer+0x48>
	if (index > descr->channel_amount) {
    16d0:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    16d4:	42a3      	cmp	r3, r4
    16d6:	d31d      	bcc.n	1714 <adc_async_register_channel_buffer+0xa0>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    16d8:	eb04 0944 	add.w	r9, r4, r4, lsl #1
    16dc:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    16e0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    16e2:	4448      	add	r0, r9
    16e4:	4642      	mov	r2, r8
    16e6:	4639      	mov	r1, r7
    16e8:	3004      	adds	r0, #4
    16ea:	4b0e      	ldr	r3, [pc, #56]	; (1724 <adc_async_register_channel_buffer+0xb0>)
    16ec:	4798      	blx	r3
    16ee:	4602      	mov	r2, r0
    16f0:	b998      	cbnz	r0, 171a <adc_async_register_channel_buffer+0xa6>
	descr->channel_map[channel]            = index;
    16f2:	6a2b      	ldr	r3, [r5, #32]
    16f4:	559c      	strb	r4, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    16f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    16f8:	4499      	add	r9, r3
    16fa:	2300      	movs	r3, #0
    16fc:	f8a9 3014 	strh.w	r3, [r9, #20]
}
    1700:	4610      	mov	r0, r2
    1702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    1706:	2000      	movs	r0, #0
    1708:	e7c1      	b.n	168e <adc_async_register_channel_buffer+0x1a>
    170a:	2000      	movs	r0, #0
    170c:	e7bf      	b.n	168e <adc_async_register_channel_buffer+0x1a>
		return ERR_INVALID_ARG;
    170e:	f06f 020c 	mvn.w	r2, #12
    1712:	e7f5      	b.n	1700 <adc_async_register_channel_buffer+0x8c>
		return ERR_NO_RESOURCE;
    1714:	f06f 021b 	mvn.w	r2, #27
    1718:	e7f2      	b.n	1700 <adc_async_register_channel_buffer+0x8c>
		return ERR_INVALID_ARG;
    171a:	f06f 020c 	mvn.w	r2, #12
    171e:	e7ef      	b.n	1700 <adc_async_register_channel_buffer+0x8c>
    1720:	000026ad 	.word	0x000026ad
    1724:	00002755 	.word	0x00002755
    1728:	00008278 	.word	0x00008278

0000172c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    172c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1730:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1732:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1734:	f3bf 8f5f 	dmb	sy
    1738:	4770      	bx	lr

0000173a <atomic_leave_critical>:
    173a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    173e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1740:	f383 8810 	msr	PRIMASK, r3
    1744:	4770      	bx	lr
	...

00001748 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    1748:	b538      	push	{r3, r4, r5, lr}
    174a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    174c:	4605      	mov	r5, r0
    174e:	b158      	cbz	r0, 1768 <crc_sync_init+0x20>
    1750:	1c08      	adds	r0, r1, #0
    1752:	bf18      	it	ne
    1754:	2001      	movne	r0, #1
    1756:	222b      	movs	r2, #43	; 0x2b
    1758:	4904      	ldr	r1, [pc, #16]	; (176c <crc_sync_init+0x24>)
    175a:	4b05      	ldr	r3, [pc, #20]	; (1770 <crc_sync_init+0x28>)
    175c:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    175e:	4621      	mov	r1, r4
    1760:	4628      	mov	r0, r5
    1762:	4b04      	ldr	r3, [pc, #16]	; (1774 <crc_sync_init+0x2c>)
    1764:	4798      	blx	r3
}
    1766:	bd38      	pop	{r3, r4, r5, pc}
    1768:	2000      	movs	r0, #0
    176a:	e7f4      	b.n	1756 <crc_sync_init+0xe>
    176c:	00008294 	.word	0x00008294
    1770:	000026ad 	.word	0x000026ad
    1774:	00002ec5 	.word	0x00002ec5

00001778 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1778:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    177a:	4b02      	ldr	r3, [pc, #8]	; (1784 <delay_init+0xc>)
    177c:	6018      	str	r0, [r3, #0]
    177e:	4b02      	ldr	r3, [pc, #8]	; (1788 <delay_init+0x10>)
    1780:	4798      	blx	r3
    1782:	bd08      	pop	{r3, pc}
    1784:	20000144 	.word	0x20000144
    1788:	00004575 	.word	0x00004575

0000178c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    178c:	b508      	push	{r3, lr}
	return _event_system_init();
    178e:	4b01      	ldr	r3, [pc, #4]	; (1794 <event_system_init+0x8>)
    1790:	4798      	blx	r3
}
    1792:	bd08      	pop	{r3, pc}
    1794:	00002ecd 	.word	0x00002ecd

00001798 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1798:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    179a:	6943      	ldr	r3, [r0, #20]
    179c:	b103      	cbz	r3, 17a0 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    179e:	4798      	blx	r3
    17a0:	bd08      	pop	{r3, pc}

000017a2 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    17a2:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    17a4:	6983      	ldr	r3, [r0, #24]
    17a6:	b103      	cbz	r3, 17aa <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    17a8:	4798      	blx	r3
    17aa:	bd08      	pop	{r3, pc}

000017ac <flash_init>:
{
    17ac:	b538      	push	{r3, r4, r5, lr}
    17ae:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    17b0:	4604      	mov	r4, r0
    17b2:	b190      	cbz	r0, 17da <flash_init+0x2e>
    17b4:	1c08      	adds	r0, r1, #0
    17b6:	bf18      	it	ne
    17b8:	2001      	movne	r0, #1
    17ba:	2238      	movs	r2, #56	; 0x38
    17bc:	4908      	ldr	r1, [pc, #32]	; (17e0 <flash_init+0x34>)
    17be:	4b09      	ldr	r3, [pc, #36]	; (17e4 <flash_init+0x38>)
    17c0:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    17c2:	4629      	mov	r1, r5
    17c4:	4620      	mov	r0, r4
    17c6:	4b08      	ldr	r3, [pc, #32]	; (17e8 <flash_init+0x3c>)
    17c8:	4798      	blx	r3
	if (rc) {
    17ca:	4603      	mov	r3, r0
    17cc:	b918      	cbnz	r0, 17d6 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    17ce:	4a07      	ldr	r2, [pc, #28]	; (17ec <flash_init+0x40>)
    17d0:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    17d2:	4a07      	ldr	r2, [pc, #28]	; (17f0 <flash_init+0x44>)
    17d4:	6062      	str	r2, [r4, #4]
}
    17d6:	4618      	mov	r0, r3
    17d8:	bd38      	pop	{r3, r4, r5, pc}
    17da:	2000      	movs	r0, #0
    17dc:	e7ed      	b.n	17ba <flash_init+0xe>
    17de:	bf00      	nop
    17e0:	000082b0 	.word	0x000082b0
    17e4:	000026ad 	.word	0x000026ad
    17e8:	00002fd9 	.word	0x00002fd9
    17ec:	00001799 	.word	0x00001799
    17f0:	000017a3 	.word	0x000017a3

000017f4 <i2c_tx_complete>:

/**
 * \brief Callback function for tx complete
 */
static void i2c_tx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    17f4:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    17f6:	8843      	ldrh	r3, [r0, #2]
    17f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    17fc:	d102      	bne.n	1804 <i2c_tx_complete+0x10>
		if (i2c->i2c_cb.tx_complete) {
    17fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
    1800:	b103      	cbz	r3, 1804 <i2c_tx_complete+0x10>
			i2c->i2c_cb.tx_complete(i2c);
    1802:	4798      	blx	r3
    1804:	bd08      	pop	{r3, pc}

00001806 <i2c_rx_complete>:

/**
 * \brief Callback function for rx complete
 */
static void i2c_rx_complete(struct _i2c_m_async_device *const i2c_dev)
{
    1806:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    1808:	8843      	ldrh	r3, [r0, #2]
    180a:	f413 7f80 	tst.w	r3, #256	; 0x100
    180e:	d102      	bne.n	1816 <i2c_rx_complete+0x10>
		if (i2c->i2c_cb.rx_complete) {
    1810:	6b83      	ldr	r3, [r0, #56]	; 0x38
    1812:	b103      	cbz	r3, 1816 <i2c_rx_complete+0x10>
			i2c->i2c_cb.rx_complete(i2c);
    1814:	4798      	blx	r3
    1816:	bd08      	pop	{r3, pc}

00001818 <i2c_error>:
		}
	}
}

static void i2c_error(struct _i2c_m_async_device *const i2c_dev, int32_t error)
{
    1818:	b508      	push	{r3, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(i2c_dev, struct i2c_m_async_desc, device);

	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    181a:	8843      	ldrh	r3, [r0, #2]
    181c:	f413 7f80 	tst.w	r3, #256	; 0x100
    1820:	d102      	bne.n	1828 <i2c_error+0x10>
		if (i2c->i2c_cb.error) {
    1822:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1824:	b103      	cbz	r3, 1828 <i2c_error+0x10>
			i2c->i2c_cb.error(i2c, error);
    1826:	4798      	blx	r3
    1828:	bd08      	pop	{r3, pc}
	...

0000182c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    182c:	b510      	push	{r4, lr}
    182e:	b084      	sub	sp, #16
    1830:	4614      	mov	r4, r2
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    1832:	8a83      	ldrh	r3, [r0, #20]
    1834:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1838:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
    183a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    183e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    1842:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1844:	a901      	add	r1, sp, #4
    1846:	3828      	subs	r0, #40	; 0x28
    1848:	4b03      	ldr	r3, [pc, #12]	; (1858 <i2c_m_async_write+0x2c>)
    184a:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    184c:	2800      	cmp	r0, #0
    184e:	bf08      	it	eq
    1850:	4620      	moveq	r0, r4
    1852:	b004      	add	sp, #16
    1854:	bd10      	pop	{r4, pc}
    1856:	bf00      	nop
    1858:	00003c3d 	.word	0x00003c3d

0000185c <i2c_m_async_read>:
{
    185c:	b510      	push	{r4, lr}
    185e:	b084      	sub	sp, #16
    1860:	4614      	mov	r4, r2
	msg.addr   = i2c->slave_addr;
    1862:	8a83      	ldrh	r3, [r0, #20]
    1864:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
    1868:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    186a:	f248 0301 	movw	r3, #32769	; 0x8001
    186e:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    1872:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    1874:	a901      	add	r1, sp, #4
    1876:	3828      	subs	r0, #40	; 0x28
    1878:	4b03      	ldr	r3, [pc, #12]	; (1888 <i2c_m_async_read+0x2c>)
    187a:	4798      	blx	r3
}
    187c:	2800      	cmp	r0, #0
    187e:	bf08      	it	eq
    1880:	4620      	moveq	r0, r4
    1882:	b004      	add	sp, #16
    1884:	bd10      	pop	{r4, pc}
    1886:	bf00      	nop
    1888:	00003c3d 	.word	0x00003c3d

0000188c <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
    1890:	4604      	mov	r4, r0
    1892:	2289      	movs	r2, #137	; 0x89
    1894:	490f      	ldr	r1, [pc, #60]	; (18d4 <i2c_m_async_init+0x48>)
    1896:	3000      	adds	r0, #0
    1898:	bf18      	it	ne
    189a:	2001      	movne	r0, #1
    189c:	4b0e      	ldr	r3, [pc, #56]	; (18d8 <i2c_m_async_init+0x4c>)
    189e:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    18a0:	4629      	mov	r1, r5
    18a2:	4620      	mov	r0, r4
    18a4:	4b0d      	ldr	r3, [pc, #52]	; (18dc <i2c_m_async_init+0x50>)
    18a6:	4798      	blx	r3
	if (init_status) {
    18a8:	4605      	mov	r5, r0
    18aa:	b108      	cbz	r0, 18b0 <i2c_m_async_init+0x24>
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);

	return ERR_NONE;
}
    18ac:	4628      	mov	r0, r5
    18ae:	bd70      	pop	{r4, r5, r6, pc}
	i2c->io.read  = i2c_m_async_read;
    18b0:	4b0b      	ldr	r3, [pc, #44]	; (18e0 <i2c_m_async_init+0x54>)
    18b2:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    18b4:	4b0b      	ldr	r3, [pc, #44]	; (18e4 <i2c_m_async_init+0x58>)
    18b6:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    18b8:	4a0b      	ldr	r2, [pc, #44]	; (18e8 <i2c_m_async_init+0x5c>)
    18ba:	2101      	movs	r1, #1
    18bc:	4620      	mov	r0, r4
    18be:	4e0b      	ldr	r6, [pc, #44]	; (18ec <i2c_m_async_init+0x60>)
    18c0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    18c2:	4a0b      	ldr	r2, [pc, #44]	; (18f0 <i2c_m_async_init+0x64>)
    18c4:	2102      	movs	r1, #2
    18c6:	4620      	mov	r0, r4
    18c8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    18ca:	4a0a      	ldr	r2, [pc, #40]	; (18f4 <i2c_m_async_init+0x68>)
    18cc:	2100      	movs	r1, #0
    18ce:	4620      	mov	r0, r4
    18d0:	47b0      	blx	r6
	return ERR_NONE;
    18d2:	e7eb      	b.n	18ac <i2c_m_async_init+0x20>
    18d4:	000082c8 	.word	0x000082c8
    18d8:	000026ad 	.word	0x000026ad
    18dc:	00003bbd 	.word	0x00003bbd
    18e0:	0000185d 	.word	0x0000185d
    18e4:	0000182d 	.word	0x0000182d
    18e8:	000017f5 	.word	0x000017f5
    18ec:	00003d6d 	.word	0x00003d6d
    18f0:	00001807 	.word	0x00001807
    18f4:	00001819 	.word	0x00001819

000018f8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    18f8:	b570      	push	{r4, r5, r6, lr}
    18fa:	460d      	mov	r5, r1
    18fc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    18fe:	4604      	mov	r4, r0
    1900:	b160      	cbz	r0, 191c <io_write+0x24>
    1902:	1c08      	adds	r0, r1, #0
    1904:	bf18      	it	ne
    1906:	2001      	movne	r0, #1
    1908:	2234      	movs	r2, #52	; 0x34
    190a:	4905      	ldr	r1, [pc, #20]	; (1920 <io_write+0x28>)
    190c:	4b05      	ldr	r3, [pc, #20]	; (1924 <io_write+0x2c>)
    190e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1910:	6823      	ldr	r3, [r4, #0]
    1912:	4632      	mov	r2, r6
    1914:	4629      	mov	r1, r5
    1916:	4620      	mov	r0, r4
    1918:	4798      	blx	r3
}
    191a:	bd70      	pop	{r4, r5, r6, pc}
    191c:	2000      	movs	r0, #0
    191e:	e7f3      	b.n	1908 <io_write+0x10>
    1920:	000082e8 	.word	0x000082e8
    1924:	000026ad 	.word	0x000026ad

00001928 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1928:	b570      	push	{r4, r5, r6, lr}
    192a:	460d      	mov	r5, r1
    192c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    192e:	4604      	mov	r4, r0
    1930:	b160      	cbz	r0, 194c <io_read+0x24>
    1932:	1c08      	adds	r0, r1, #0
    1934:	bf18      	it	ne
    1936:	2001      	movne	r0, #1
    1938:	223d      	movs	r2, #61	; 0x3d
    193a:	4905      	ldr	r1, [pc, #20]	; (1950 <io_read+0x28>)
    193c:	4b05      	ldr	r3, [pc, #20]	; (1954 <io_read+0x2c>)
    193e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1940:	6863      	ldr	r3, [r4, #4]
    1942:	4632      	mov	r2, r6
    1944:	4629      	mov	r1, r5
    1946:	4620      	mov	r0, r4
    1948:	4798      	blx	r3
}
    194a:	bd70      	pop	{r4, r5, r6, pc}
    194c:	2000      	movs	r0, #0
    194e:	e7f3      	b.n	1938 <io_read+0x10>
    1950:	000082e8 	.word	0x000082e8
    1954:	000026ad 	.word	0x000026ad

00001958 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
    1958:	b538      	push	{r3, r4, r5, lr}
    195a:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    195c:	4605      	mov	r5, r0
    195e:	b158      	cbz	r0, 1978 <qspi_dma_init+0x20>
    1960:	1c08      	adds	r0, r1, #0
    1962:	bf18      	it	ne
    1964:	2001      	movne	r0, #1
    1966:	2231      	movs	r2, #49	; 0x31
    1968:	4904      	ldr	r1, [pc, #16]	; (197c <qspi_dma_init+0x24>)
    196a:	4b05      	ldr	r3, [pc, #20]	; (1980 <qspi_dma_init+0x28>)
    196c:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
    196e:	4621      	mov	r1, r4
    1970:	4628      	mov	r0, r5
    1972:	4b04      	ldr	r3, [pc, #16]	; (1984 <qspi_dma_init+0x2c>)
    1974:	4798      	blx	r3
}
    1976:	bd38      	pop	{r3, r4, r5, pc}
    1978:	2000      	movs	r0, #0
    197a:	e7f4      	b.n	1966 <qspi_dma_init+0xe>
    197c:	000082fc 	.word	0x000082fc
    1980:	000026ad 	.word	0x000026ad
    1984:	000031f9 	.word	0x000031f9

00001988 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    198a:	460f      	mov	r7, r1
    198c:	4616      	mov	r6, r2
	ASSERT(io);
    198e:	4604      	mov	r4, r0
    1990:	f240 1227 	movw	r2, #295	; 0x127
    1994:	4909      	ldr	r1, [pc, #36]	; (19bc <_spi_m_async_io_write+0x34>)
    1996:	3000      	adds	r0, #0
    1998:	bf18      	it	ne
    199a:	2001      	movne	r0, #1
    199c:	4b08      	ldr	r3, [pc, #32]	; (19c0 <_spi_m_async_io_write+0x38>)
    199e:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    19a0:	2500      	movs	r5, #0
    19a2:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = (uint8_t *)buf;
    19a4:	6167      	str	r7, [r4, #20]
	spi->xfer.size  = length;
    19a6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    19a8:	6225      	str	r5, [r4, #32]

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    19aa:	2310      	movs	r3, #16
    19ac:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_tx(&spi->dev, true);
    19ae:	2101      	movs	r1, #1
    19b0:	f1a4 0020 	sub.w	r0, r4, #32
    19b4:	4b03      	ldr	r3, [pc, #12]	; (19c4 <_spi_m_async_io_write+0x3c>)
    19b6:	4798      	blx	r3

	return ERR_NONE;
}
    19b8:	4628      	mov	r0, r5
    19ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19bc:	00008318 	.word	0x00008318
    19c0:	000026ad 	.word	0x000026ad
    19c4:	00004161 	.word	0x00004161

000019c8 <_spi_m_async_io_read>:
{
    19c8:	b570      	push	{r4, r5, r6, lr}
    19ca:	460d      	mov	r5, r1
    19cc:	4616      	mov	r6, r2
	ASSERT(io);
    19ce:	4604      	mov	r4, r0
    19d0:	f240 1205 	movw	r2, #261	; 0x105
    19d4:	490c      	ldr	r1, [pc, #48]	; (1a08 <_spi_m_async_io_read+0x40>)
    19d6:	3000      	adds	r0, #0
    19d8:	bf18      	it	ne
    19da:	2001      	movne	r0, #1
    19dc:	4b0b      	ldr	r3, [pc, #44]	; (1a0c <_spi_m_async_io_read+0x44>)
    19de:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    19e0:	61a5      	str	r5, [r4, #24]
	spi->xfer.txbuf = NULL;
    19e2:	2500      	movs	r5, #0
    19e4:	6165      	str	r5, [r4, #20]
	spi->xfer.size  = length;
    19e6:	61e6      	str	r6, [r4, #28]
	spi->xfercnt    = 0;
    19e8:	6225      	str	r5, [r4, #32]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    19ea:	2310      	movs	r3, #16
    19ec:	7223      	strb	r3, [r4, #8]
	_spi_m_async_enable_rx(&spi->dev, true);
    19ee:	3c20      	subs	r4, #32
    19f0:	2101      	movs	r1, #1
    19f2:	4620      	mov	r0, r4
    19f4:	4b06      	ldr	r3, [pc, #24]	; (1a10 <_spi_m_async_io_read+0x48>)
    19f6:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    19f8:	f240 11ff 	movw	r1, #511	; 0x1ff
    19fc:	4620      	mov	r0, r4
    19fe:	4b05      	ldr	r3, [pc, #20]	; (1a14 <_spi_m_async_io_read+0x4c>)
    1a00:	4798      	blx	r3
}
    1a02:	4628      	mov	r0, r5
    1a04:	bd70      	pop	{r4, r5, r6, pc}
    1a06:	bf00      	nop
    1a08:	00008318 	.word	0x00008318
    1a0c:	000026ad 	.word	0x000026ad
    1a10:	00004195 	.word	0x00004195
    1a14:	00004211 	.word	0x00004211

00001a18 <_spi_dev_error>:
{
    1a18:	b570      	push	{r4, r5, r6, lr}
    1a1a:	4604      	mov	r4, r0
    1a1c:	460e      	mov	r6, r1
	struct spi_m_async_descriptor *spi = CONTAINER_OF(dev, struct spi_m_async_descriptor, dev);
    1a1e:	1f05      	subs	r5, r0, #4
	_spi_m_async_enable_tx(dev, false);
    1a20:	2100      	movs	r1, #0
    1a22:	4b09      	ldr	r3, [pc, #36]	; (1a48 <_spi_dev_error+0x30>)
    1a24:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    1a26:	2100      	movs	r1, #0
    1a28:	4620      	mov	r0, r4
    1a2a:	4b08      	ldr	r3, [pc, #32]	; (1a4c <_spi_dev_error+0x34>)
    1a2c:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    1a2e:	2100      	movs	r1, #0
    1a30:	4620      	mov	r0, r4
    1a32:	4b07      	ldr	r3, [pc, #28]	; (1a50 <_spi_dev_error+0x38>)
    1a34:	4798      	blx	r3
	spi->stat = 0;
    1a36:	2300      	movs	r3, #0
    1a38:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    1a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1a3e:	b113      	cbz	r3, 1a46 <_spi_dev_error+0x2e>
		spi->callbacks.cb_error(spi, status);
    1a40:	4631      	mov	r1, r6
    1a42:	4628      	mov	r0, r5
    1a44:	4798      	blx	r3
    1a46:	bd70      	pop	{r4, r5, r6, pc}
    1a48:	00004161 	.word	0x00004161
    1a4c:	00004195 	.word	0x00004195
    1a50:	000041d5 	.word	0x000041d5

00001a54 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    1a54:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1a56:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    1a58:	429a      	cmp	r2, r3
    1a5a:	d200      	bcs.n	1a5e <_spi_dev_complete+0xa>
    1a5c:	4770      	bx	lr
{
    1a5e:	b510      	push	{r4, lr}
    1a60:	4604      	mov	r4, r0
		_spi_m_async_enable_tx_complete(dev, false);
    1a62:	2100      	movs	r1, #0
    1a64:	4b04      	ldr	r3, [pc, #16]	; (1a78 <_spi_dev_complete+0x24>)
    1a66:	4798      	blx	r3
		spi->stat = 0;
    1a68:	2300      	movs	r3, #0
    1a6a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    1a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1a70:	b10b      	cbz	r3, 1a76 <_spi_dev_complete+0x22>
			spi->callbacks.cb_xfer(spi);
    1a72:	1f20      	subs	r0, r4, #4
    1a74:	4798      	blx	r3
    1a76:	bd10      	pop	{r4, pc}
    1a78:	000041d5 	.word	0x000041d5

00001a7c <_spi_dev_tx>:
{
    1a7c:	b510      	push	{r4, lr}
    1a7e:	4604      	mov	r4, r0
	if (!(dev->char_size > 1)) {
    1a80:	7903      	ldrb	r3, [r0, #4]
    1a82:	2b01      	cmp	r3, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    1a84:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1a86:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1a88:	f103 0101 	add.w	r1, r3, #1
    1a8c:	6401      	str	r1, [r0, #64]	; 0x40
    1a8e:	bf94      	ite	ls
    1a90:	5cd1      	ldrbls	r1, [r2, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    1a92:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1a96:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <_spi_dev_tx+0x3c>)
    1a98:	4798      	blx	r3
	if (spi->xfercnt == spi->xfer.size) {
    1a9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1a9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1a9e:	429a      	cmp	r2, r3
    1aa0:	d000      	beq.n	1aa4 <_spi_dev_tx+0x28>
    1aa2:	bd10      	pop	{r4, pc}
		_spi_m_async_enable_tx(dev, false);
    1aa4:	2100      	movs	r1, #0
    1aa6:	4620      	mov	r0, r4
    1aa8:	4b04      	ldr	r3, [pc, #16]	; (1abc <_spi_dev_tx+0x40>)
    1aaa:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    1aac:	2101      	movs	r1, #1
    1aae:	4620      	mov	r0, r4
    1ab0:	4b03      	ldr	r3, [pc, #12]	; (1ac0 <_spi_dev_tx+0x44>)
    1ab2:	4798      	blx	r3
}
    1ab4:	e7f5      	b.n	1aa2 <_spi_dev_tx+0x26>
    1ab6:	bf00      	nop
    1ab8:	00004211 	.word	0x00004211
    1abc:	00004161 	.word	0x00004161
    1ac0:	000041d5 	.word	0x000041d5

00001ac4 <_spi_dev_rx>:
{
    1ac4:	b570      	push	{r4, r5, r6, lr}
    1ac6:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    1ac8:	6b85      	ldr	r5, [r0, #56]	; 0x38
    1aca:	b305      	cbz	r5, 1b0e <_spi_dev_rx+0x4a>
		if (!(dev->char_size > 1)) {
    1acc:	7903      	ldrb	r3, [r0, #4]
    1ace:	2b01      	cmp	r3, #1
    1ad0:	d916      	bls.n	1b00 <_spi_dev_rx+0x3c>
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    1ad2:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1ad4:	1c73      	adds	r3, r6, #1
    1ad6:	6403      	str	r3, [r0, #64]	; 0x40
    1ad8:	4b18      	ldr	r3, [pc, #96]	; (1b3c <_spi_dev_rx+0x78>)
    1ada:	4798      	blx	r3
    1adc:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
	if (spi->xfercnt < spi->xfer.size) {
    1ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1ae2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1ae4:	4293      	cmp	r3, r2
    1ae6:	d21d      	bcs.n	1b24 <_spi_dev_rx+0x60>
		if (spi->xfer.txbuf) {
    1ae8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1aea:	b1b2      	cbz	r2, 1b1a <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    1aec:	7921      	ldrb	r1, [r4, #4]
    1aee:	2901      	cmp	r1, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    1af0:	bf94      	ite	ls
    1af2:	5cd1      	ldrbls	r1, [r2, r3]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    1af4:	f832 1013 	ldrhhi.w	r1, [r2, r3, lsl #1]
    1af8:	4620      	mov	r0, r4
    1afa:	4b11      	ldr	r3, [pc, #68]	; (1b40 <_spi_dev_rx+0x7c>)
    1afc:	4798      	blx	r3
    1afe:	bd70      	pop	{r4, r5, r6, pc}
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    1b00:	6c06      	ldr	r6, [r0, #64]	; 0x40
    1b02:	1c73      	adds	r3, r6, #1
    1b04:	6403      	str	r3, [r0, #64]	; 0x40
    1b06:	4b0d      	ldr	r3, [pc, #52]	; (1b3c <_spi_dev_rx+0x78>)
    1b08:	4798      	blx	r3
    1b0a:	55a8      	strb	r0, [r5, r6]
    1b0c:	e7e8      	b.n	1ae0 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    1b0e:	4b0b      	ldr	r3, [pc, #44]	; (1b3c <_spi_dev_rx+0x78>)
    1b10:	4798      	blx	r3
		spi->xfercnt++;
    1b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1b14:	3301      	adds	r3, #1
    1b16:	6423      	str	r3, [r4, #64]	; 0x40
    1b18:	e7e2      	b.n	1ae0 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    1b1a:	88e1      	ldrh	r1, [r4, #6]
    1b1c:	4620      	mov	r0, r4
    1b1e:	4b08      	ldr	r3, [pc, #32]	; (1b40 <_spi_dev_rx+0x7c>)
    1b20:	4798      	blx	r3
    1b22:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_enable_rx(dev, false);
    1b24:	2100      	movs	r1, #0
    1b26:	4620      	mov	r0, r4
    1b28:	4b06      	ldr	r3, [pc, #24]	; (1b44 <_spi_dev_rx+0x80>)
    1b2a:	4798      	blx	r3
		spi->stat = 0;
    1b2c:	2300      	movs	r3, #0
    1b2e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    1b32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1b34:	b10b      	cbz	r3, 1b3a <_spi_dev_rx+0x76>
			spi->callbacks.cb_xfer(spi);
    1b36:	1f20      	subs	r0, r4, #4
    1b38:	4798      	blx	r3
    1b3a:	bd70      	pop	{r4, r5, r6, pc}
    1b3c:	00004241 	.word	0x00004241
    1b40:	00004211 	.word	0x00004211
    1b44:	00004195 	.word	0x00004195

00001b48 <spi_m_async_init>:
{
    1b48:	b570      	push	{r4, r5, r6, lr}
    1b4a:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    1b4c:	4606      	mov	r6, r0
    1b4e:	b330      	cbz	r0, 1b9e <spi_m_async_init+0x56>
    1b50:	1c08      	adds	r0, r1, #0
    1b52:	bf18      	it	ne
    1b54:	2001      	movne	r0, #1
    1b56:	22a5      	movs	r2, #165	; 0xa5
    1b58:	4912      	ldr	r1, [pc, #72]	; (1ba4 <spi_m_async_init+0x5c>)
    1b5a:	4b13      	ldr	r3, [pc, #76]	; (1ba8 <spi_m_async_init+0x60>)
    1b5c:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1b5e:	4634      	mov	r4, r6
    1b60:	f844 5f04 	str.w	r5, [r4, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    1b64:	4629      	mov	r1, r5
    1b66:	4620      	mov	r0, r4
    1b68:	4b10      	ldr	r3, [pc, #64]	; (1bac <spi_m_async_init+0x64>)
    1b6a:	4798      	blx	r3
	if (rc >= 0) {
    1b6c:	2800      	cmp	r0, #0
    1b6e:	db15      	blt.n	1b9c <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    1b70:	4a0f      	ldr	r2, [pc, #60]	; (1bb0 <spi_m_async_init+0x68>)
    1b72:	2100      	movs	r1, #0
    1b74:	4620      	mov	r0, r4
    1b76:	4d0f      	ldr	r5, [pc, #60]	; (1bb4 <spi_m_async_init+0x6c>)
    1b78:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    1b7a:	4a0f      	ldr	r2, [pc, #60]	; (1bb8 <spi_m_async_init+0x70>)
    1b7c:	2101      	movs	r1, #1
    1b7e:	4620      	mov	r0, r4
    1b80:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    1b82:	4a0e      	ldr	r2, [pc, #56]	; (1bbc <spi_m_async_init+0x74>)
    1b84:	2102      	movs	r1, #2
    1b86:	4620      	mov	r0, r4
    1b88:	47a8      	blx	r5
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    1b8a:	4a0d      	ldr	r2, [pc, #52]	; (1bc0 <spi_m_async_init+0x78>)
    1b8c:	2103      	movs	r1, #3
    1b8e:	4620      	mov	r0, r4
    1b90:	47a8      	blx	r5
	spi->io.read  = _spi_m_async_io_read;
    1b92:	4b0c      	ldr	r3, [pc, #48]	; (1bc4 <spi_m_async_init+0x7c>)
    1b94:	62b3      	str	r3, [r6, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    1b96:	4b0c      	ldr	r3, [pc, #48]	; (1bc8 <spi_m_async_init+0x80>)
    1b98:	6273      	str	r3, [r6, #36]	; 0x24
	return ERR_NONE;
    1b9a:	2000      	movs	r0, #0
}
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
    1b9e:	2000      	movs	r0, #0
    1ba0:	e7d9      	b.n	1b56 <spi_m_async_init+0xe>
    1ba2:	bf00      	nop
    1ba4:	00008318 	.word	0x00008318
    1ba8:	000026ad 	.word	0x000026ad
    1bac:	000040f9 	.word	0x000040f9
    1bb0:	00001a7d 	.word	0x00001a7d
    1bb4:	0000426d 	.word	0x0000426d
    1bb8:	00001ac5 	.word	0x00001ac5
    1bbc:	00001a55 	.word	0x00001a55
    1bc0:	00001a19 	.word	0x00001a19
    1bc4:	000019c9 	.word	0x000019c9
    1bc8:	00001989 	.word	0x00001989

00001bcc <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    1bcc:	b570      	push	{r4, r5, r6, lr}
    1bce:	460d      	mov	r5, r1
    1bd0:	4616      	mov	r6, r2
	ASSERT(io);
    1bd2:	4604      	mov	r4, r0
    1bd4:	2298      	movs	r2, #152	; 0x98
    1bd6:	4907      	ldr	r1, [pc, #28]	; (1bf4 <_spi_m_dma_io_write+0x28>)
    1bd8:	3000      	adds	r0, #0
    1bda:	bf18      	it	ne
    1bdc:	2001      	movne	r0, #1
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <_spi_m_dma_io_write+0x2c>)
    1be0:	4798      	blx	r3

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    1be2:	4633      	mov	r3, r6
    1be4:	2200      	movs	r2, #0
    1be6:	4629      	mov	r1, r5
    1be8:	f1a4 001c 	sub.w	r0, r4, #28
    1bec:	4c03      	ldr	r4, [pc, #12]	; (1bfc <_spi_m_dma_io_write+0x30>)
    1bee:	47a0      	blx	r4
}
    1bf0:	bd70      	pop	{r4, r5, r6, pc}
    1bf2:	bf00      	nop
    1bf4:	00008338 	.word	0x00008338
    1bf8:	000026ad 	.word	0x000026ad
    1bfc:	0000441d 	.word	0x0000441d

00001c00 <_spi_m_dma_io_read>:
{
    1c00:	b570      	push	{r4, r5, r6, lr}
    1c02:	460d      	mov	r5, r1
    1c04:	4616      	mov	r6, r2
	ASSERT(io);
    1c06:	4604      	mov	r4, r0
    1c08:	2281      	movs	r2, #129	; 0x81
    1c0a:	4907      	ldr	r1, [pc, #28]	; (1c28 <_spi_m_dma_io_read+0x28>)
    1c0c:	3000      	adds	r0, #0
    1c0e:	bf18      	it	ne
    1c10:	2001      	movne	r0, #1
    1c12:	4b06      	ldr	r3, [pc, #24]	; (1c2c <_spi_m_dma_io_read+0x2c>)
    1c14:	4798      	blx	r3
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    1c16:	4633      	mov	r3, r6
    1c18:	462a      	mov	r2, r5
    1c1a:	2100      	movs	r1, #0
    1c1c:	f1a4 001c 	sub.w	r0, r4, #28
    1c20:	4c03      	ldr	r4, [pc, #12]	; (1c30 <_spi_m_dma_io_read+0x30>)
    1c22:	47a0      	blx	r4
}
    1c24:	bd70      	pop	{r4, r5, r6, pc}
    1c26:	bf00      	nop
    1c28:	00008338 	.word	0x00008338
    1c2c:	000026ad 	.word	0x000026ad
    1c30:	0000441d 	.word	0x0000441d

00001c34 <spi_m_dma_init>:
{
    1c34:	b538      	push	{r3, r4, r5, lr}
    1c36:	460c      	mov	r4, r1
	ASSERT(spi && hw);
    1c38:	4605      	mov	r5, r0
    1c3a:	b1a0      	cbz	r0, 1c66 <spi_m_dma_init+0x32>
    1c3c:	1c08      	adds	r0, r1, #0
    1c3e:	bf18      	it	ne
    1c40:	2001      	movne	r0, #1
    1c42:	223b      	movs	r2, #59	; 0x3b
    1c44:	4909      	ldr	r1, [pc, #36]	; (1c6c <spi_m_dma_init+0x38>)
    1c46:	4b0a      	ldr	r3, [pc, #40]	; (1c70 <spi_m_dma_init+0x3c>)
    1c48:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    1c4a:	4628      	mov	r0, r5
    1c4c:	f840 4f04 	str.w	r4, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    1c50:	4621      	mov	r1, r4
    1c52:	4b08      	ldr	r3, [pc, #32]	; (1c74 <spi_m_dma_init+0x40>)
    1c54:	4798      	blx	r3
	if (rc) {
    1c56:	4603      	mov	r3, r0
    1c58:	b918      	cbnz	r0, 1c62 <spi_m_dma_init+0x2e>
	spi->io.read  = _spi_m_dma_io_read;
    1c5a:	4a07      	ldr	r2, [pc, #28]	; (1c78 <spi_m_dma_init+0x44>)
    1c5c:	626a      	str	r2, [r5, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    1c5e:	4a07      	ldr	r2, [pc, #28]	; (1c7c <spi_m_dma_init+0x48>)
    1c60:	622a      	str	r2, [r5, #32]
}
    1c62:	4618      	mov	r0, r3
    1c64:	bd38      	pop	{r3, r4, r5, pc}
    1c66:	2000      	movs	r0, #0
    1c68:	e7eb      	b.n	1c42 <spi_m_dma_init+0xe>
    1c6a:	bf00      	nop
    1c6c:	00008338 	.word	0x00008338
    1c70:	000026ad 	.word	0x000026ad
    1c74:	000042a1 	.word	0x000042a1
    1c78:	00001c01 	.word	0x00001c01
    1c7c:	00001bcd 	.word	0x00001bcd

00001c80 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c82:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1c84:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1c86:	b12f      	cbz	r7, 1c94 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1c88:	688d      	ldr	r5, [r1, #8]
    1c8a:	463c      	mov	r4, r7
    1c8c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c8e:	f1c2 0e01 	rsb	lr, r2, #1
    1c92:	e00b      	b.n	1cac <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1c94:	4b0e      	ldr	r3, [pc, #56]	; (1cd0 <timer_add_timer_task+0x50>)
    1c96:	4798      	blx	r3
		return;
    1c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c9a:	4473      	add	r3, lr
    1c9c:	68a0      	ldr	r0, [r4, #8]
    1c9e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1ca0:	42ab      	cmp	r3, r5
    1ca2:	d20a      	bcs.n	1cba <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1ca4:	6823      	ldr	r3, [r4, #0]
    1ca6:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1ca8:	b153      	cbz	r3, 1cc0 <timer_add_timer_task+0x40>
    1caa:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1cac:	6863      	ldr	r3, [r4, #4]
    1cae:	4293      	cmp	r3, r2
    1cb0:	d8f3      	bhi.n	1c9a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1cb2:	68a0      	ldr	r0, [r4, #8]
    1cb4:	4403      	add	r3, r0
    1cb6:	1a9b      	subs	r3, r3, r2
    1cb8:	e7f2      	b.n	1ca0 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1cba:	42a7      	cmp	r7, r4
    1cbc:	d004      	beq.n	1cc8 <timer_add_timer_task+0x48>
    1cbe:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1cc0:	4620      	mov	r0, r4
    1cc2:	4b04      	ldr	r3, [pc, #16]	; (1cd4 <timer_add_timer_task+0x54>)
    1cc4:	4798      	blx	r3
    1cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1cc8:	4660      	mov	r0, ip
    1cca:	4b01      	ldr	r3, [pc, #4]	; (1cd0 <timer_add_timer_task+0x50>)
    1ccc:	4798      	blx	r3
    1cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cd0:	000026d5 	.word	0x000026d5
    1cd4:	00002701 	.word	0x00002701

00001cd8 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1cdc:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1cde:	6907      	ldr	r7, [r0, #16]
    1ce0:	3701      	adds	r7, #1
    1ce2:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1ce4:	7e03      	ldrb	r3, [r0, #24]
    1ce6:	f013 0f01 	tst.w	r3, #1
    1cea:	d113      	bne.n	1d14 <timer_process_counted+0x3c>
    1cec:	7e03      	ldrb	r3, [r0, #24]
    1cee:	f013 0f02 	tst.w	r3, #2
    1cf2:	d10f      	bne.n	1d14 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1cf4:	b354      	cbz	r4, 1d4c <timer_process_counted+0x74>
    1cf6:	6863      	ldr	r3, [r4, #4]
    1cf8:	1afb      	subs	r3, r7, r3
    1cfa:	68a2      	ldr	r2, [r4, #8]
    1cfc:	4293      	cmp	r3, r2
    1cfe:	d307      	bcc.n	1d10 <timer_process_counted+0x38>
    1d00:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1d02:	f100 0814 	add.w	r8, r0, #20
    1d06:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1d50 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1d0a:	f8df a048 	ldr.w	sl, [pc, #72]	; 1d54 <timer_process_counted+0x7c>
    1d0e:	e012      	b.n	1d36 <timer_process_counted+0x5e>
    1d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1d14:	7e03      	ldrb	r3, [r0, #24]
    1d16:	f043 0302 	orr.w	r3, r3, #2
    1d1a:	7603      	strb	r3, [r0, #24]
		return;
    1d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d20:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1d22:	68e3      	ldr	r3, [r4, #12]
    1d24:	4620      	mov	r0, r4
    1d26:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1d28:	b185      	cbz	r5, 1d4c <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1d2a:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1d2c:	686b      	ldr	r3, [r5, #4]
    1d2e:	1afb      	subs	r3, r7, r3
    1d30:	68aa      	ldr	r2, [r5, #8]
    1d32:	4293      	cmp	r3, r2
    1d34:	d30a      	bcc.n	1d4c <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1d36:	4640      	mov	r0, r8
    1d38:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1d3a:	7c23      	ldrb	r3, [r4, #16]
    1d3c:	2b01      	cmp	r3, #1
    1d3e:	d1ef      	bne.n	1d20 <timer_process_counted+0x48>
			tmp->time_label = time;
    1d40:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1d42:	463a      	mov	r2, r7
    1d44:	4621      	mov	r1, r4
    1d46:	4640      	mov	r0, r8
    1d48:	47d0      	blx	sl
    1d4a:	e7e9      	b.n	1d20 <timer_process_counted+0x48>
    1d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d50:	00002749 	.word	0x00002749
    1d54:	00001c81 	.word	0x00001c81

00001d58 <timer_init>:
{
    1d58:	b570      	push	{r4, r5, r6, lr}
    1d5a:	460e      	mov	r6, r1
    1d5c:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1d5e:	4604      	mov	r4, r0
    1d60:	b190      	cbz	r0, 1d88 <timer_init+0x30>
    1d62:	b199      	cbz	r1, 1d8c <timer_init+0x34>
    1d64:	1c10      	adds	r0, r2, #0
    1d66:	bf18      	it	ne
    1d68:	2001      	movne	r0, #1
    1d6a:	223b      	movs	r2, #59	; 0x3b
    1d6c:	4908      	ldr	r1, [pc, #32]	; (1d90 <timer_init+0x38>)
    1d6e:	4b09      	ldr	r3, [pc, #36]	; (1d94 <timer_init+0x3c>)
    1d70:	4798      	blx	r3
	descr->func = func;
    1d72:	4620      	mov	r0, r4
    1d74:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1d78:	682b      	ldr	r3, [r5, #0]
    1d7a:	4631      	mov	r1, r6
    1d7c:	4798      	blx	r3
	descr->time                           = 0;
    1d7e:	2000      	movs	r0, #0
    1d80:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1d82:	4b05      	ldr	r3, [pc, #20]	; (1d98 <timer_init+0x40>)
    1d84:	6063      	str	r3, [r4, #4]
}
    1d86:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1d88:	2000      	movs	r0, #0
    1d8a:	e7ee      	b.n	1d6a <timer_init+0x12>
    1d8c:	2000      	movs	r0, #0
    1d8e:	e7ec      	b.n	1d6a <timer_init+0x12>
    1d90:	00008354 	.word	0x00008354
    1d94:	000026ad 	.word	0x000026ad
    1d98:	00001cd9 	.word	0x00001cd9

00001d9c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    1d9c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1d9e:	2300      	movs	r3, #0
    1da0:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    1da2:	69c3      	ldr	r3, [r0, #28]
    1da4:	b11b      	cbz	r3, 1dae <usart_transmission_complete+0x12>
    1da6:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
    1daa:	4610      	mov	r0, r2
    1dac:	4798      	blx	r3
    1dae:	bd08      	pop	{r3, pc}

00001db0 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    1db0:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1db2:	2300      	movs	r3, #0
    1db4:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    1db6:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1db8:	b11b      	cbz	r3, 1dc2 <usart_error+0x12>
    1dba:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
    1dbe:	4610      	mov	r0, r2
    1dc0:	4798      	blx	r3
    1dc2:	bd08      	pop	{r3, pc}

00001dc4 <usart_fill_rx_buffer>:
{
    1dc4:	b538      	push	{r3, r4, r5, lr}
    1dc6:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1dc8:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
    1dcc:	302c      	adds	r0, #44	; 0x2c
    1dce:	4b03      	ldr	r3, [pc, #12]	; (1ddc <usart_fill_rx_buffer+0x18>)
    1dd0:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1dd2:	6a23      	ldr	r3, [r4, #32]
    1dd4:	b10b      	cbz	r3, 1dda <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1dd6:	4628      	mov	r0, r5
    1dd8:	4798      	blx	r3
    1dda:	bd38      	pop	{r3, r4, r5, pc}
    1ddc:	000027e9 	.word	0x000027e9

00001de0 <usart_async_write>:
{
    1de0:	b570      	push	{r4, r5, r6, lr}
    1de2:	460e      	mov	r6, r1
    1de4:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    1de6:	4604      	mov	r4, r0
    1de8:	b1e0      	cbz	r0, 1e24 <usart_async_write+0x44>
    1dea:	b1e9      	cbz	r1, 1e28 <usart_async_write+0x48>
    1dec:	1c10      	adds	r0, r2, #0
    1dee:	bf18      	it	ne
    1df0:	2001      	movne	r0, #1
    1df2:	f240 123b 	movw	r2, #315	; 0x13b
    1df6:	490f      	ldr	r1, [pc, #60]	; (1e34 <usart_async_write+0x54>)
    1df8:	4b0f      	ldr	r3, [pc, #60]	; (1e38 <usart_async_write+0x58>)
    1dfa:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1dfc:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    1e00:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    1e04:	429a      	cmp	r2, r3
    1e06:	d111      	bne.n	1e2c <usart_async_write+0x4c>
	descr->tx_buffer        = (uint8_t *)buf;
    1e08:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    1e0a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
    1e0e:	2300      	movs	r3, #0
    1e10:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1e14:	2301      	movs	r3, #1
    1e16:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1e18:	f104 0008 	add.w	r0, r4, #8
    1e1c:	4b07      	ldr	r3, [pc, #28]	; (1e3c <usart_async_write+0x5c>)
    1e1e:	4798      	blx	r3
	return (int32_t)length;
    1e20:	4628      	mov	r0, r5
    1e22:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    1e24:	2000      	movs	r0, #0
    1e26:	e7e4      	b.n	1df2 <usart_async_write+0x12>
    1e28:	2000      	movs	r0, #0
    1e2a:	e7e2      	b.n	1df2 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    1e2c:	f06f 001b 	mvn.w	r0, #27
}
    1e30:	bd70      	pop	{r4, r5, r6, pc}
    1e32:	bf00      	nop
    1e34:	0000836c 	.word	0x0000836c
    1e38:	000026ad 	.word	0x000026ad
    1e3c:	00003bab 	.word	0x00003bab

00001e40 <usart_process_byte_sent>:
{
    1e40:	b510      	push	{r4, lr}
    1e42:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1e44:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1e46:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    1e4a:	429a      	cmp	r2, r3
    1e4c:	d009      	beq.n	1e62 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1e4e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1e50:	1c59      	adds	r1, r3, #1
    1e52:	8781      	strh	r1, [r0, #60]	; 0x3c
    1e54:	5cd1      	ldrb	r1, [r2, r3]
    1e56:	4b04      	ldr	r3, [pc, #16]	; (1e68 <usart_process_byte_sent+0x28>)
    1e58:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1e5a:	4620      	mov	r0, r4
    1e5c:	4b03      	ldr	r3, [pc, #12]	; (1e6c <usart_process_byte_sent+0x2c>)
    1e5e:	4798      	blx	r3
    1e60:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1e62:	4b03      	ldr	r3, [pc, #12]	; (1e70 <usart_process_byte_sent+0x30>)
    1e64:	4798      	blx	r3
    1e66:	bd10      	pop	{r4, pc}
    1e68:	00003b7f 	.word	0x00003b7f
    1e6c:	00003bab 	.word	0x00003bab
    1e70:	00003bb3 	.word	0x00003bb3

00001e74 <usart_async_read>:
{
    1e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e78:	b082      	sub	sp, #8
    1e7a:	460f      	mov	r7, r1
    1e7c:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
    1e7e:	4606      	mov	r6, r0
    1e80:	b1a0      	cbz	r0, 1eac <usart_async_read+0x38>
    1e82:	b199      	cbz	r1, 1eac <usart_async_read+0x38>
    1e84:	2a00      	cmp	r2, #0
    1e86:	d12d      	bne.n	1ee4 <usart_async_read+0x70>
    1e88:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1e8c:	4929      	ldr	r1, [pc, #164]	; (1f34 <usart_async_read+0xc0>)
    1e8e:	2000      	movs	r0, #0
    1e90:	4b29      	ldr	r3, [pc, #164]	; (1f38 <usart_async_read+0xc4>)
    1e92:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1e94:	a801      	add	r0, sp, #4
    1e96:	4b29      	ldr	r3, [pc, #164]	; (1f3c <usart_async_read+0xc8>)
    1e98:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1e9a:	f106 0034 	add.w	r0, r6, #52	; 0x34
    1e9e:	4b28      	ldr	r3, [pc, #160]	; (1f40 <usart_async_read+0xcc>)
    1ea0:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1ea2:	a801      	add	r0, sp, #4
    1ea4:	4b27      	ldr	r3, [pc, #156]	; (1f44 <usart_async_read+0xd0>)
    1ea6:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1ea8:	2500      	movs	r5, #0
	return (int32_t)was_read;
    1eaa:	e03e      	b.n	1f2a <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1eac:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1eb0:	4920      	ldr	r1, [pc, #128]	; (1f34 <usart_async_read+0xc0>)
    1eb2:	2000      	movs	r0, #0
    1eb4:	4b20      	ldr	r3, [pc, #128]	; (1f38 <usart_async_read+0xc4>)
    1eb6:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1eb8:	a801      	add	r0, sp, #4
    1eba:	4b20      	ldr	r3, [pc, #128]	; (1f3c <usart_async_read+0xc8>)
    1ebc:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1ebe:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1ec2:	4650      	mov	r0, sl
    1ec4:	4b1e      	ldr	r3, [pc, #120]	; (1f40 <usart_async_read+0xcc>)
    1ec6:	4798      	blx	r3
    1ec8:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1eca:	a801      	add	r0, sp, #4
    1ecc:	4b1d      	ldr	r3, [pc, #116]	; (1f44 <usart_async_read+0xd0>)
    1ece:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1ed0:	f1b9 0f00 	cmp.w	r9, #0
    1ed4:	d004      	beq.n	1ee0 <usart_async_read+0x6c>
    1ed6:	f1b8 0f00 	cmp.w	r8, #0
    1eda:	d119      	bne.n	1f10 <usart_async_read+0x9c>
	uint16_t                       was_read = 0;
    1edc:	2500      	movs	r5, #0
    1ede:	e024      	b.n	1f2a <usart_async_read+0xb6>
    1ee0:	2500      	movs	r5, #0
    1ee2:	e022      	b.n	1f2a <usart_async_read+0xb6>
	ASSERT(descr && buf && length);
    1ee4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    1ee8:	4912      	ldr	r1, [pc, #72]	; (1f34 <usart_async_read+0xc0>)
    1eea:	2001      	movs	r0, #1
    1eec:	4b12      	ldr	r3, [pc, #72]	; (1f38 <usart_async_read+0xc4>)
    1eee:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    1ef0:	a801      	add	r0, sp, #4
    1ef2:	4b12      	ldr	r3, [pc, #72]	; (1f3c <usart_async_read+0xc8>)
    1ef4:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1ef6:	f106 0a34 	add.w	sl, r6, #52	; 0x34
    1efa:	4650      	mov	r0, sl
    1efc:	4b10      	ldr	r3, [pc, #64]	; (1f40 <usart_async_read+0xcc>)
    1efe:	4798      	blx	r3
    1f00:	4681      	mov	r9, r0
	CRITICAL_SECTION_LEAVE()
    1f02:	a801      	add	r0, sp, #4
    1f04:	4b0f      	ldr	r3, [pc, #60]	; (1f44 <usart_async_read+0xd0>)
    1f06:	4798      	blx	r3
	uint16_t                       was_read = 0;
    1f08:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
    1f0a:	f1b9 0f00 	cmp.w	r9, #0
    1f0e:	d00c      	beq.n	1f2a <usart_async_read+0xb6>
{
    1f10:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1f12:	4e0d      	ldr	r6, [pc, #52]	; (1f48 <usart_async_read+0xd4>)
    1f14:	1c60      	adds	r0, r4, #1
    1f16:	b285      	uxth	r5, r0
    1f18:	1939      	adds	r1, r7, r4
    1f1a:	4650      	mov	r0, sl
    1f1c:	47b0      	blx	r6
    1f1e:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
    1f20:	454c      	cmp	r4, r9
    1f22:	d202      	bcs.n	1f2a <usart_async_read+0xb6>
    1f24:	b2a3      	uxth	r3, r4
    1f26:	4598      	cmp	r8, r3
    1f28:	d8f4      	bhi.n	1f14 <usart_async_read+0xa0>
}
    1f2a:	4628      	mov	r0, r5
    1f2c:	b002      	add	sp, #8
    1f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f32:	bf00      	nop
    1f34:	0000836c 	.word	0x0000836c
    1f38:	000026ad 	.word	0x000026ad
    1f3c:	0000172d 	.word	0x0000172d
    1f40:	00002829 	.word	0x00002829
    1f44:	0000173b 	.word	0x0000173b
    1f48:	000027a5 	.word	0x000027a5

00001f4c <usart_async_init>:
{
    1f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f4e:	460d      	mov	r5, r1
    1f50:	4616      	mov	r6, r2
    1f52:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1f54:	4604      	mov	r4, r0
    1f56:	b320      	cbz	r0, 1fa2 <usart_async_init+0x56>
    1f58:	b329      	cbz	r1, 1fa6 <usart_async_init+0x5a>
    1f5a:	b332      	cbz	r2, 1faa <usart_async_init+0x5e>
    1f5c:	1c18      	adds	r0, r3, #0
    1f5e:	bf18      	it	ne
    1f60:	2001      	movne	r0, #1
    1f62:	223a      	movs	r2, #58	; 0x3a
    1f64:	4913      	ldr	r1, [pc, #76]	; (1fb4 <usart_async_init+0x68>)
    1f66:	4b14      	ldr	r3, [pc, #80]	; (1fb8 <usart_async_init+0x6c>)
    1f68:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1f6a:	463a      	mov	r2, r7
    1f6c:	4631      	mov	r1, r6
    1f6e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    1f72:	4b12      	ldr	r3, [pc, #72]	; (1fbc <usart_async_init+0x70>)
    1f74:	4798      	blx	r3
    1f76:	b9d0      	cbnz	r0, 1fae <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
    1f78:	4629      	mov	r1, r5
    1f7a:	f104 0008 	add.w	r0, r4, #8
    1f7e:	4b10      	ldr	r3, [pc, #64]	; (1fc0 <usart_async_init+0x74>)
    1f80:	4798      	blx	r3
	if (init_status) {
    1f82:	4603      	mov	r3, r0
    1f84:	b958      	cbnz	r0, 1f9e <usart_async_init+0x52>
	descr->io.read  = usart_async_read;
    1f86:	4a0f      	ldr	r2, [pc, #60]	; (1fc4 <usart_async_init+0x78>)
    1f88:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
    1f8a:	4a0f      	ldr	r2, [pc, #60]	; (1fc8 <usart_async_init+0x7c>)
    1f8c:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1f8e:	4a0f      	ldr	r2, [pc, #60]	; (1fcc <usart_async_init+0x80>)
    1f90:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1f92:	4a0f      	ldr	r2, [pc, #60]	; (1fd0 <usart_async_init+0x84>)
    1f94:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1f96:	4a0f      	ldr	r2, [pc, #60]	; (1fd4 <usart_async_init+0x88>)
    1f98:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1f9a:	4a0f      	ldr	r2, [pc, #60]	; (1fd8 <usart_async_init+0x8c>)
    1f9c:	6162      	str	r2, [r4, #20]
}
    1f9e:	4618      	mov	r0, r3
    1fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1fa2:	2000      	movs	r0, #0
    1fa4:	e7dd      	b.n	1f62 <usart_async_init+0x16>
    1fa6:	2000      	movs	r0, #0
    1fa8:	e7db      	b.n	1f62 <usart_async_init+0x16>
    1faa:	2000      	movs	r0, #0
    1fac:	e7d9      	b.n	1f62 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    1fae:	f06f 030c 	mvn.w	r3, #12
    1fb2:	e7f4      	b.n	1f9e <usart_async_init+0x52>
    1fb4:	0000836c 	.word	0x0000836c
    1fb8:	000026ad 	.word	0x000026ad
    1fbc:	00002755 	.word	0x00002755
    1fc0:	00003ae9 	.word	0x00003ae9
    1fc4:	00001e75 	.word	0x00001e75
    1fc8:	00001de1 	.word	0x00001de1
    1fcc:	00001e41 	.word	0x00001e41
    1fd0:	00001dc5 	.word	0x00001dc5
    1fd4:	00001d9d 	.word	0x00001d9d
    1fd8:	00001db1 	.word	0x00001db1

00001fdc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1fe0:	460f      	mov	r7, r1
    1fe2:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    1fe4:	4604      	mov	r4, r0
    1fe6:	b328      	cbz	r0, 2034 <usart_sync_write+0x58>
    1fe8:	b331      	cbz	r1, 2038 <usart_sync_write+0x5c>
    1fea:	1c10      	adds	r0, r2, #0
    1fec:	bf18      	it	ne
    1fee:	2001      	movne	r0, #1
    1ff0:	22f1      	movs	r2, #241	; 0xf1
    1ff2:	4912      	ldr	r1, [pc, #72]	; (203c <usart_sync_write+0x60>)
    1ff4:	4b12      	ldr	r3, [pc, #72]	; (2040 <usart_sync_write+0x64>)
    1ff6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    1ff8:	3408      	adds	r4, #8
    1ffa:	4d12      	ldr	r5, [pc, #72]	; (2044 <usart_sync_write+0x68>)
    1ffc:	4620      	mov	r0, r4
    1ffe:	47a8      	blx	r5
    2000:	2800      	cmp	r0, #0
    2002:	d0fb      	beq.n	1ffc <usart_sync_write+0x20>
    2004:	3f01      	subs	r7, #1
    2006:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    2008:	f8df 9040 	ldr.w	r9, [pc, #64]	; 204c <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
    200c:	4d0d      	ldr	r5, [pc, #52]	; (2044 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
    200e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2012:	4620      	mov	r0, r4
    2014:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
    2016:	4620      	mov	r0, r4
    2018:	47a8      	blx	r5
    201a:	2800      	cmp	r0, #0
    201c:	d0fb      	beq.n	2016 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
    201e:	3601      	adds	r6, #1
    2020:	4546      	cmp	r6, r8
    2022:	d3f4      	bcc.n	200e <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
    2024:	4d08      	ldr	r5, [pc, #32]	; (2048 <usart_sync_write+0x6c>)
    2026:	4620      	mov	r0, r4
    2028:	47a8      	blx	r5
    202a:	2800      	cmp	r0, #0
    202c:	d0fb      	beq.n	2026 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
    202e:	4630      	mov	r0, r6
    2030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    2034:	2000      	movs	r0, #0
    2036:	e7db      	b.n	1ff0 <usart_sync_write+0x14>
    2038:	2000      	movs	r0, #0
    203a:	e7d9      	b.n	1ff0 <usart_sync_write+0x14>
    203c:	0000838c 	.word	0x0000838c
    2040:	000026ad 	.word	0x000026ad
    2044:	00003b8d 	.word	0x00003b8d
    2048:	00003b97 	.word	0x00003b97
    204c:	00003b79 	.word	0x00003b79

00002050 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2054:	460f      	mov	r7, r1
    2056:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    2058:	4604      	mov	r4, r0
    205a:	b1e0      	cbz	r0, 2096 <usart_sync_read+0x46>
    205c:	b1e9      	cbz	r1, 209a <usart_sync_read+0x4a>
    205e:	1c10      	adds	r0, r2, #0
    2060:	bf18      	it	ne
    2062:	2001      	movne	r0, #1
    2064:	f44f 7286 	mov.w	r2, #268	; 0x10c
    2068:	490d      	ldr	r1, [pc, #52]	; (20a0 <usart_sync_read+0x50>)
    206a:	4b0e      	ldr	r3, [pc, #56]	; (20a4 <usart_sync_read+0x54>)
    206c:	4798      	blx	r3
    206e:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
    2070:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    2072:	3408      	adds	r4, #8
    2074:	4d0c      	ldr	r5, [pc, #48]	; (20a8 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2076:	f8df 9034 	ldr.w	r9, [pc, #52]	; 20ac <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
    207a:	4620      	mov	r0, r4
    207c:	47a8      	blx	r5
    207e:	2800      	cmp	r0, #0
    2080:	d0fb      	beq.n	207a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    2082:	4620      	mov	r0, r4
    2084:	47c8      	blx	r9
    2086:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
    208a:	3601      	adds	r6, #1
    208c:	4546      	cmp	r6, r8
    208e:	d3f4      	bcc.n	207a <usart_sync_read+0x2a>

	return (int32_t)offset;
}
    2090:	4630      	mov	r0, r6
    2092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    2096:	2000      	movs	r0, #0
    2098:	e7e4      	b.n	2064 <usart_sync_read+0x14>
    209a:	2000      	movs	r0, #0
    209c:	e7e2      	b.n	2064 <usart_sync_read+0x14>
    209e:	bf00      	nop
    20a0:	0000838c 	.word	0x0000838c
    20a4:	000026ad 	.word	0x000026ad
    20a8:	00003ba1 	.word	0x00003ba1
    20ac:	00003b85 	.word	0x00003b85

000020b0 <usart_sync_init>:
{
    20b0:	b538      	push	{r3, r4, r5, lr}
    20b2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    20b4:	4604      	mov	r4, r0
    20b6:	b198      	cbz	r0, 20e0 <usart_sync_init+0x30>
    20b8:	1c08      	adds	r0, r1, #0
    20ba:	bf18      	it	ne
    20bc:	2001      	movne	r0, #1
    20be:	2234      	movs	r2, #52	; 0x34
    20c0:	4908      	ldr	r1, [pc, #32]	; (20e4 <usart_sync_init+0x34>)
    20c2:	4b09      	ldr	r3, [pc, #36]	; (20e8 <usart_sync_init+0x38>)
    20c4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    20c6:	4629      	mov	r1, r5
    20c8:	f104 0008 	add.w	r0, r4, #8
    20cc:	4b07      	ldr	r3, [pc, #28]	; (20ec <usart_sync_init+0x3c>)
    20ce:	4798      	blx	r3
	if (init_status) {
    20d0:	4603      	mov	r3, r0
    20d2:	b918      	cbnz	r0, 20dc <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
    20d4:	4a06      	ldr	r2, [pc, #24]	; (20f0 <usart_sync_init+0x40>)
    20d6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
    20d8:	4a06      	ldr	r2, [pc, #24]	; (20f4 <usart_sync_init+0x44>)
    20da:	6022      	str	r2, [r4, #0]
}
    20dc:	4618      	mov	r0, r3
    20de:	bd38      	pop	{r3, r4, r5, pc}
    20e0:	2000      	movs	r0, #0
    20e2:	e7ec      	b.n	20be <usart_sync_init+0xe>
    20e4:	0000838c 	.word	0x0000838c
    20e8:	000026ad 	.word	0x000026ad
    20ec:	00003abd 	.word	0x00003abd
    20f0:	00002051 	.word	0x00002051
    20f4:	00001fdd 	.word	0x00001fdd

000020f8 <usart_sync_enable>:
{
    20f8:	b510      	push	{r4, lr}
	ASSERT(descr);
    20fa:	4604      	mov	r4, r0
    20fc:	2253      	movs	r2, #83	; 0x53
    20fe:	4906      	ldr	r1, [pc, #24]	; (2118 <usart_sync_enable+0x20>)
    2100:	3000      	adds	r0, #0
    2102:	bf18      	it	ne
    2104:	2001      	movne	r0, #1
    2106:	4b05      	ldr	r3, [pc, #20]	; (211c <usart_sync_enable+0x24>)
    2108:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    210a:	f104 0008 	add.w	r0, r4, #8
    210e:	4b04      	ldr	r3, [pc, #16]	; (2120 <usart_sync_enable+0x28>)
    2110:	4798      	blx	r3
}
    2112:	2000      	movs	r0, #0
    2114:	bd10      	pop	{r4, pc}
    2116:	bf00      	nop
    2118:	0000838c 	.word	0x0000838c
    211c:	000026ad 	.word	0x000026ad
    2120:	00003b65 	.word	0x00003b65

00002124 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2124:	4b0f      	ldr	r3, [pc, #60]	; (2164 <_usb_d_find_ep+0x40>)
    2126:	7859      	ldrb	r1, [r3, #1]
    2128:	4288      	cmp	r0, r1
    212a:	d018      	beq.n	215e <_usb_d_find_ep+0x3a>
{
    212c:	b430      	push	{r4, r5}
    212e:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2130:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    2132:	f000 050f 	and.w	r5, r0, #15
    2136:	e007      	b.n	2148 <_usb_d_find_ep+0x24>
    2138:	3301      	adds	r3, #1
    213a:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    213c:	2b0d      	cmp	r3, #13
    213e:	d009      	beq.n	2154 <_usb_d_find_ep+0x30>
    2140:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    2142:	7851      	ldrb	r1, [r2, #1]
    2144:	4281      	cmp	r1, r0
    2146:	d007      	beq.n	2158 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    2148:	7814      	ldrb	r4, [r2, #0]
    214a:	2c00      	cmp	r4, #0
    214c:	d1f4      	bne.n	2138 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    214e:	428d      	cmp	r5, r1
    2150:	d1f2      	bne.n	2138 <_usb_d_find_ep+0x14>
    2152:	e001      	b.n	2158 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
    2154:	f04f 33ff 	mov.w	r3, #4294967295
}
    2158:	4618      	mov	r0, r3
    215a:	bc30      	pop	{r4, r5}
    215c:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    215e:	2300      	movs	r3, #0
}
    2160:	4618      	mov	r0, r3
    2162:	4770      	bx	lr
    2164:	20000148 	.word	0x20000148

00002168 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    2168:	2000      	movs	r0, #0
    216a:	4770      	bx	lr

0000216c <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    216c:	b538      	push	{r3, r4, r5, lr}
    216e:	4604      	mov	r4, r0
    2170:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
    2172:	4b09      	ldr	r3, [pc, #36]	; (2198 <usb_d_cb_trans_more+0x2c>)
    2174:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    2176:	4b09      	ldr	r3, [pc, #36]	; (219c <usb_d_cb_trans_more+0x30>)
    2178:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    217c:	789b      	ldrb	r3, [r3, #2]
    217e:	2b03      	cmp	r3, #3
    2180:	d001      	beq.n	2186 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
    2182:	2000      	movs	r0, #0
}
    2184:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
    2186:	4b05      	ldr	r3, [pc, #20]	; (219c <usb_d_cb_trans_more+0x30>)
    2188:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    218c:	6983      	ldr	r3, [r0, #24]
    218e:	4629      	mov	r1, r5
    2190:	4620      	mov	r0, r4
    2192:	4798      	blx	r3
    2194:	bd38      	pop	{r3, r4, r5, pc}
    2196:	bf00      	nop
    2198:	00002125 	.word	0x00002125
    219c:	20000148 	.word	0x20000148

000021a0 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    21a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21a2:	b085      	sub	sp, #20
    21a4:	4606      	mov	r6, r0
    21a6:	460d      	mov	r5, r1
    21a8:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    21aa:	4b4d      	ldr	r3, [pc, #308]	; (22e0 <_usb_d_cb_trans_done+0x140>)
    21ac:	4798      	blx	r3
    21ae:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    21b0:	2d00      	cmp	r5, #0
    21b2:	d15b      	bne.n	226c <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
    21b4:	4a4b      	ldr	r2, [pc, #300]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    21b6:	0143      	lsls	r3, r0, #5
    21b8:	18d1      	adds	r1, r2, r3
    21ba:	2000      	movs	r0, #0
    21bc:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    21be:	5cd3      	ldrb	r3, [r2, r3]
    21c0:	b173      	cbz	r3, 21e0 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    21c2:	4b48      	ldr	r3, [pc, #288]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    21c4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    21c8:	2201      	movs	r2, #1
    21ca:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    21cc:	4845      	ldr	r0, [pc, #276]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    21ce:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    21d2:	69c3      	ldr	r3, [r0, #28]
    21d4:	463a      	mov	r2, r7
    21d6:	78c1      	ldrb	r1, [r0, #3]
    21d8:	4630      	mov	r0, r6
    21da:	4798      	blx	r3
}
    21dc:	b005      	add	sp, #20
    21de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
    21e0:	788b      	ldrb	r3, [r1, #2]
    21e2:	2b03      	cmp	r3, #3
    21e4:	d00b      	beq.n	21fe <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    21e6:	483f      	ldr	r0, [pc, #252]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    21e8:	eb00 1244 	add.w	r2, r0, r4, lsl #5
    21ec:	4614      	mov	r4, r2
    21ee:	69d3      	ldr	r3, [r2, #28]
    21f0:	320c      	adds	r2, #12
    21f2:	2100      	movs	r1, #0
    21f4:	7860      	ldrb	r0, [r4, #1]
    21f6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    21f8:	2302      	movs	r3, #2
    21fa:	70a3      	strb	r3, [r4, #2]
    21fc:	e7ee      	b.n	21dc <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
    21fe:	460b      	mov	r3, r1
    2200:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    2204:	460a      	mov	r2, r1
    2206:	69ce      	ldr	r6, [r1, #28]
    2208:	320c      	adds	r2, #12
    220a:	2101      	movs	r1, #1
    220c:	7858      	ldrb	r0, [r3, #1]
    220e:	47b0      	blx	r6
		if (err) {
    2210:	b1a0      	cbz	r0, 223c <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    2212:	4b34      	ldr	r3, [pc, #208]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    2214:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    2218:	2205      	movs	r2, #5
    221a:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
    221c:	2202      	movs	r2, #2
    221e:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    2220:	2d00      	cmp	r5, #0
    2222:	db09      	blt.n	2238 <_usb_d_cb_trans_done+0x98>
    2224:	482f      	ldr	r0, [pc, #188]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    2226:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    222a:	7840      	ldrb	r0, [r0, #1]
    222c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    2230:	2101      	movs	r1, #1
    2232:	4b2d      	ldr	r3, [pc, #180]	; (22e8 <_usb_d_cb_trans_done+0x148>)
    2234:	4798      	blx	r3
    2236:	e7d1      	b.n	21dc <_usb_d_cb_trans_done+0x3c>
    2238:	7858      	ldrb	r0, [r3, #1]
    223a:	e7f9      	b.n	2230 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    223c:	4829      	ldr	r0, [pc, #164]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    223e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    2242:	2304      	movs	r3, #4
    2244:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
    2246:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
    2248:	2200      	movs	r2, #0
    224a:	9201      	str	r2, [sp, #4]
    224c:	9202      	str	r2, [sp, #8]
    224e:	4295      	cmp	r5, r2
    2250:	bfac      	ite	ge
    2252:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    2256:	f003 030f 	andlt.w	r3, r3, #15
    225a:	f88d 300c 	strb.w	r3, [sp, #12]
    225e:	2301      	movs	r3, #1
    2260:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    2264:	a801      	add	r0, sp, #4
    2266:	4b21      	ldr	r3, [pc, #132]	; (22ec <_usb_d_cb_trans_done+0x14c>)
    2268:	4798      	blx	r3
    226a:	e7b7      	b.n	21dc <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
    226c:	2d01      	cmp	r5, #1
    226e:	d00a      	beq.n	2286 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
    2270:	2d02      	cmp	r5, #2
    2272:	d01c      	beq.n	22ae <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
    2274:	2d03      	cmp	r5, #3
    2276:	d02a      	beq.n	22ce <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    2278:	4b1a      	ldr	r3, [pc, #104]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    227a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    227e:	2206      	movs	r2, #6
    2280:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
    2282:	70da      	strb	r2, [r3, #3]
    2284:	e7a2      	b.n	21cc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
    2286:	4a17      	ldr	r2, [pc, #92]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    2288:	0143      	lsls	r3, r0, #5
    228a:	18d1      	adds	r1, r2, r3
    228c:	2002      	movs	r0, #2
    228e:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2290:	5cd3      	ldrb	r3, [r2, r3]
    2292:	b12b      	cbz	r3, 22a0 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    2294:	4b13      	ldr	r3, [pc, #76]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    2296:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    229a:	2205      	movs	r2, #5
    229c:	709a      	strb	r2, [r3, #2]
    229e:	e795      	b.n	21cc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    22a0:	460b      	mov	r3, r1
    22a2:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    22a4:	2100      	movs	r1, #0
    22a6:	4630      	mov	r0, r6
    22a8:	4b0f      	ldr	r3, [pc, #60]	; (22e8 <_usb_d_cb_trans_done+0x148>)
    22aa:	4798      	blx	r3
    22ac:	e78e      	b.n	21cc <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    22ae:	4a0d      	ldr	r2, [pc, #52]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    22b0:	0143      	lsls	r3, r0, #5
    22b2:	18d1      	adds	r1, r2, r3
    22b4:	2004      	movs	r0, #4
    22b6:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    22b8:	5cd3      	ldrb	r3, [r2, r3]
    22ba:	b12b      	cbz	r3, 22c8 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    22bc:	4b09      	ldr	r3, [pc, #36]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    22be:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    22c2:	2201      	movs	r2, #1
    22c4:	709a      	strb	r2, [r3, #2]
    22c6:	e781      	b.n	21cc <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    22c8:	2302      	movs	r3, #2
    22ca:	708b      	strb	r3, [r1, #2]
			return;
    22cc:	e786      	b.n	21dc <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    22ce:	4b05      	ldr	r3, [pc, #20]	; (22e4 <_usb_d_cb_trans_done+0x144>)
    22d0:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    22d4:	2200      	movs	r2, #0
    22d6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
    22d8:	2205      	movs	r2, #5
    22da:	70da      	strb	r2, [r3, #3]
    22dc:	e776      	b.n	21cc <_usb_d_cb_trans_done+0x2c>
    22de:	bf00      	nop
    22e0:	00002125 	.word	0x00002125
    22e4:	20000148 	.word	0x20000148
    22e8:	0000582d 	.word	0x0000582d
    22ec:	000059d5 	.word	0x000059d5

000022f0 <usb_d_cb_trans_setup>:
{
    22f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22f4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    22f6:	4b1c      	ldr	r3, [pc, #112]	; (2368 <usb_d_cb_trans_setup+0x78>)
    22f8:	4798      	blx	r3
    22fa:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
    22fc:	4c1b      	ldr	r4, [pc, #108]	; (236c <usb_d_cb_trans_setup+0x7c>)
    22fe:	eb04 1440 	add.w	r4, r4, r0, lsl #5
    2302:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    2304:	4621      	mov	r1, r4
    2306:	4628      	mov	r0, r5
    2308:	4b19      	ldr	r3, [pc, #100]	; (2370 <usb_d_cb_trans_setup+0x80>)
    230a:	4798      	blx	r3
	if (n != 8) {
    230c:	b2c0      	uxtb	r0, r0
    230e:	2808      	cmp	r0, #8
    2310:	d009      	beq.n	2326 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2312:	2101      	movs	r1, #1
    2314:	4628      	mov	r0, r5
    2316:	4c17      	ldr	r4, [pc, #92]	; (2374 <usb_d_cb_trans_setup+0x84>)
    2318:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    231a:	2101      	movs	r1, #1
    231c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    2320:	47a0      	blx	r4
		return;
    2322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2326:	2100      	movs	r1, #0
    2328:	4628      	mov	r0, r5
    232a:	4f12      	ldr	r7, [pc, #72]	; (2374 <usb_d_cb_trans_setup+0x84>)
    232c:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    232e:	f045 0880 	orr.w	r8, r5, #128	; 0x80
    2332:	2100      	movs	r1, #0
    2334:	4640      	mov	r0, r8
    2336:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    2338:	4b0c      	ldr	r3, [pc, #48]	; (236c <usb_d_cb_trans_setup+0x7c>)
    233a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    233e:	2201      	movs	r2, #1
    2340:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
    2342:	695b      	ldr	r3, [r3, #20]
    2344:	4621      	mov	r1, r4
    2346:	4628      	mov	r0, r5
    2348:	4798      	blx	r3
    234a:	b108      	cbz	r0, 2350 <usb_d_cb_trans_setup+0x60>
    234c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    2350:	4b06      	ldr	r3, [pc, #24]	; (236c <usb_d_cb_trans_setup+0x7c>)
    2352:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2356:	2305      	movs	r3, #5
    2358:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    235a:	2101      	movs	r1, #1
    235c:	4628      	mov	r0, r5
    235e:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    2360:	2101      	movs	r1, #1
    2362:	4640      	mov	r0, r8
    2364:	47b8      	blx	r7
    2366:	e7f1      	b.n	234c <usb_d_cb_trans_setup+0x5c>
    2368:	00002125 	.word	0x00002125
    236c:	20000148 	.word	0x20000148
    2370:	00005975 	.word	0x00005975
    2374:	0000582d 	.word	0x0000582d

00002378 <usb_d_init>:

int32_t usb_d_init(void)
{
    2378:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    237a:	4b11      	ldr	r3, [pc, #68]	; (23c0 <usb_d_init+0x48>)
    237c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    237e:	2800      	cmp	r0, #0
    2380:	db1d      	blt.n	23be <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    2382:	4c10      	ldr	r4, [pc, #64]	; (23c4 <usb_d_init+0x4c>)
    2384:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    2388:	2100      	movs	r1, #0
    238a:	4620      	mov	r0, r4
    238c:	4b0e      	ldr	r3, [pc, #56]	; (23c8 <usb_d_init+0x50>)
    238e:	4798      	blx	r3
    2390:	4623      	mov	r3, r4
    2392:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    2396:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    2398:	4a0c      	ldr	r2, [pc, #48]	; (23cc <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    239a:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    239c:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    239e:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    23a0:	61da      	str	r2, [r3, #28]
    23a2:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    23a4:	4283      	cmp	r3, r0
    23a6:	d1f8      	bne.n	239a <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    23a8:	4909      	ldr	r1, [pc, #36]	; (23d0 <usb_d_init+0x58>)
    23aa:	2000      	movs	r0, #0
    23ac:	4c09      	ldr	r4, [pc, #36]	; (23d4 <usb_d_init+0x5c>)
    23ae:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    23b0:	4909      	ldr	r1, [pc, #36]	; (23d8 <usb_d_init+0x60>)
    23b2:	2001      	movs	r0, #1
    23b4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    23b6:	4909      	ldr	r1, [pc, #36]	; (23dc <usb_d_init+0x64>)
    23b8:	2002      	movs	r0, #2
    23ba:	47a0      	blx	r4
	return ERR_NONE;
    23bc:	2000      	movs	r0, #0
}
    23be:	bd10      	pop	{r4, pc}
    23c0:	00005285 	.word	0x00005285
    23c4:	20000148 	.word	0x20000148
    23c8:	00006cdb 	.word	0x00006cdb
    23cc:	00002169 	.word	0x00002169
    23d0:	000022f1 	.word	0x000022f1
    23d4:	00005bdd 	.word	0x00005bdd
    23d8:	0000216d 	.word	0x0000216d
    23dc:	000021a1 	.word	0x000021a1

000023e0 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
    23e0:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    23e2:	4b01      	ldr	r3, [pc, #4]	; (23e8 <usb_d_register_callback+0x8>)
    23e4:	4798      	blx	r3
    23e6:	bd08      	pop	{r3, pc}
    23e8:	00005bb5 	.word	0x00005bb5

000023ec <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
    23ec:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
    23ee:	4b01      	ldr	r3, [pc, #4]	; (23f4 <usb_d_set_address+0x8>)
    23f0:	4798      	blx	r3
    23f2:	bd08      	pop	{r3, pc}
    23f4:	0000538d 	.word	0x0000538d

000023f8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    23f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23fa:	4606      	mov	r6, r0
    23fc:	460c      	mov	r4, r1
    23fe:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    2400:	4b0f      	ldr	r3, [pc, #60]	; (2440 <usb_d_ep_init+0x48>)
    2402:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    2404:	2800      	cmp	r0, #0
    2406:	da14      	bge.n	2432 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    2408:	20ff      	movs	r0, #255	; 0xff
    240a:	4b0d      	ldr	r3, [pc, #52]	; (2440 <usb_d_ep_init+0x48>)
    240c:	4798      	blx	r3
		if (ep_index < 0) {
    240e:	1e05      	subs	r5, r0, #0
    2410:	db12      	blt.n	2438 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    2412:	463a      	mov	r2, r7
    2414:	4621      	mov	r1, r4
    2416:	4630      	mov	r0, r6
    2418:	4b0a      	ldr	r3, [pc, #40]	; (2444 <usb_d_ep_init+0x4c>)
    241a:	4798      	blx	r3
	if (rc < 0) {
    241c:	2800      	cmp	r0, #0
    241e:	db0d      	blt.n	243c <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    2420:	4b09      	ldr	r3, [pc, #36]	; (2448 <usb_d_ep_init+0x50>)
    2422:	0168      	lsls	r0, r5, #5
    2424:	181a      	adds	r2, r3, r0
    2426:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    2428:	f004 0403 	and.w	r4, r4, #3
    242c:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
    242e:	2000      	movs	r0, #0
    2430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    2432:	f06f 0013 	mvn.w	r0, #19
    2436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
    2438:	f06f 0014 	mvn.w	r0, #20
}
    243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    243e:	bf00      	nop
    2440:	00002125 	.word	0x00002125
    2444:	00005399 	.word	0x00005399
    2448:	20000148 	.word	0x20000148

0000244c <usb_d_ep0_init>:
{
    244c:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    244e:	4602      	mov	r2, r0
    2450:	2100      	movs	r1, #0
    2452:	4608      	mov	r0, r1
    2454:	4b01      	ldr	r3, [pc, #4]	; (245c <usb_d_ep0_init+0x10>)
    2456:	4798      	blx	r3
}
    2458:	bd08      	pop	{r3, pc}
    245a:	bf00      	nop
    245c:	000023f9 	.word	0x000023f9

00002460 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    2460:	b538      	push	{r3, r4, r5, lr}
    2462:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2464:	4b06      	ldr	r3, [pc, #24]	; (2480 <usb_d_ep_deinit+0x20>)
    2466:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    2468:	1e04      	subs	r4, r0, #0
    246a:	db07      	blt.n	247c <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    246c:	4628      	mov	r0, r5
    246e:	4b05      	ldr	r3, [pc, #20]	; (2484 <usb_d_ep_deinit+0x24>)
    2470:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    2472:	4805      	ldr	r0, [pc, #20]	; (2488 <usb_d_ep_deinit+0x28>)
    2474:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    2478:	23ff      	movs	r3, #255	; 0xff
    247a:	7043      	strb	r3, [r0, #1]
    247c:	bd38      	pop	{r3, r4, r5, pc}
    247e:	bf00      	nop
    2480:	00002125 	.word	0x00002125
    2484:	000054b1 	.word	0x000054b1
    2488:	20000148 	.word	0x20000148

0000248c <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
    248c:	b538      	push	{r3, r4, r5, lr}
    248e:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    2490:	4b0e      	ldr	r3, [pc, #56]	; (24cc <usb_d_ep_enable+0x40>)
    2492:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    2494:	1e04      	subs	r4, r0, #0
    2496:	db16      	blt.n	24c6 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    2498:	0163      	lsls	r3, r4, #5
    249a:	4a0d      	ldr	r2, [pc, #52]	; (24d0 <usb_d_ep_enable+0x44>)
    249c:	5cd3      	ldrb	r3, [r2, r3]
    249e:	2b00      	cmp	r3, #0
    24a0:	bf0c      	ite	eq
    24a2:	2202      	moveq	r2, #2
    24a4:	2201      	movne	r2, #1
    24a6:	4b0a      	ldr	r3, [pc, #40]	; (24d0 <usb_d_ep_enable+0x44>)
    24a8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    24ac:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    24ae:	4628      	mov	r0, r5
    24b0:	4b08      	ldr	r3, [pc, #32]	; (24d4 <usb_d_ep_enable+0x48>)
    24b2:	4798      	blx	r3
	if (rc < 0) {
    24b4:	2800      	cmp	r0, #0
    24b6:	db00      	blt.n	24ba <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
    24b8:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    24ba:	4b05      	ldr	r3, [pc, #20]	; (24d0 <usb_d_ep_enable+0x44>)
    24bc:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    24c0:	2300      	movs	r3, #0
    24c2:	70a3      	strb	r3, [r4, #2]
    24c4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    24c6:	f06f 0011 	mvn.w	r0, #17
    24ca:	e7f5      	b.n	24b8 <usb_d_ep_enable+0x2c>
    24cc:	00002125 	.word	0x00002125
    24d0:	20000148 	.word	0x20000148
    24d4:	00005575 	.word	0x00005575

000024d8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    24d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24dc:	b086      	sub	sp, #24
    24de:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    24e0:	7a07      	ldrb	r7, [r0, #8]
    24e2:	4638      	mov	r0, r7
    24e4:	4b3f      	ldr	r3, [pc, #252]	; (25e4 <usb_d_ep_transfer+0x10c>)
    24e6:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    24e8:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
    24ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    24ee:	1e06      	subs	r6, r0, #0
    24f0:	db72      	blt.n	25d8 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
    24f2:	a804      	add	r0, sp, #16
    24f4:	4b3c      	ldr	r3, [pc, #240]	; (25e8 <usb_d_ep_transfer+0x110>)
    24f6:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    24f8:	4b3c      	ldr	r3, [pc, #240]	; (25ec <usb_d_ep_transfer+0x114>)
    24fa:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    24fe:	789b      	ldrb	r3, [r3, #2]
    2500:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
    2504:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2508:	b2db      	uxtb	r3, r3
    250a:	2b01      	cmp	r3, #1
    250c:	d011      	beq.n	2532 <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
    250e:	a804      	add	r0, sp, #16
    2510:	4b37      	ldr	r3, [pc, #220]	; (25f0 <usb_d_ep_transfer+0x118>)
    2512:	4798      	blx	r3
		switch (state) {
    2514:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2518:	b2db      	uxtb	r3, r3
    251a:	2b05      	cmp	r3, #5
    251c:	d05f      	beq.n	25de <usb_d_ep_transfer+0x106>
    251e:	2b06      	cmp	r3, #6
    2520:	d023      	beq.n	256a <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
    2522:	2b00      	cmp	r3, #0
    2524:	bf0c      	ite	eq
    2526:	f06f 0012 	mvneq.w	r0, #18
    252a:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
    252c:	b006      	add	sp, #24
    252e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    2532:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 25ec <usb_d_ep_transfer+0x114>
    2536:	ea4f 1946 	mov.w	r9, r6, lsl #5
    253a:	eb0a 0309 	add.w	r3, sl, r9
    253e:	2203      	movs	r2, #3
    2540:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
    2542:	a804      	add	r0, sp, #16
    2544:	4b2a      	ldr	r3, [pc, #168]	; (25f0 <usb_d_ep_transfer+0x118>)
    2546:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    2548:	f81a 3009 	ldrb.w	r3, [sl, r9]
    254c:	b183      	cbz	r3, 2570 <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    254e:	7a22      	ldrb	r2, [r4, #8]
    2550:	3500      	adds	r5, #0
    2552:	bf18      	it	ne
    2554:	2501      	movne	r5, #1
	struct usb_d_transfer trans
    2556:	6823      	ldr	r3, [r4, #0]
    2558:	9301      	str	r3, [sp, #4]
    255a:	f8cd 8008 	str.w	r8, [sp, #8]
    255e:	f017 0f80 	tst.w	r7, #128	; 0x80
    2562:	d119      	bne.n	2598 <usb_d_ep_transfer+0xc0>
    2564:	f002 030f 	and.w	r3, r2, #15
    2568:	e018      	b.n	259c <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
    256a:	f06f 000f 	mvn.w	r0, #15
    256e:	e7dd      	b.n	252c <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    2570:	4b1e      	ldr	r3, [pc, #120]	; (25ec <usb_d_ep_transfer+0x114>)
    2572:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    2576:	7cda      	ldrb	r2, [r3, #19]
    2578:	7c9d      	ldrb	r5, [r3, #18]
    257a:	eb05 2502 	add.w	r5, r5, r2, lsl #8
    257e:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
    2580:	b9a5      	cbnz	r5, 25ac <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    2582:	4b1a      	ldr	r3, [pc, #104]	; (25ec <usb_d_ep_transfer+0x114>)
    2584:	eb03 1646 	add.w	r6, r3, r6, lsl #5
    2588:	2304      	movs	r3, #4
    258a:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
    258c:	2300      	movs	r3, #0
			zlp                 = true;
    258e:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    2590:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    2592:	6821      	ldr	r1, [r4, #0]
    2594:	9101      	str	r1, [sp, #4]
    2596:	9302      	str	r3, [sp, #8]
    2598:	f042 0380 	orr.w	r3, r2, #128	; 0x80
    259c:	f88d 300c 	strb.w	r3, [sp, #12]
    25a0:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
    25a4:	a801      	add	r0, sp, #4
    25a6:	4b13      	ldr	r3, [pc, #76]	; (25f4 <usb_d_ep_transfer+0x11c>)
    25a8:	4798      	blx	r3
	return rc;
    25aa:	e7bf      	b.n	252c <usb_d_ep_transfer+0x54>
    25ac:	4643      	mov	r3, r8
    25ae:	45a8      	cmp	r8, r5
    25b0:	bf28      	it	cs
    25b2:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    25b4:	4a0d      	ldr	r2, [pc, #52]	; (25ec <usb_d_ep_transfer+0x114>)
    25b6:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
    25ba:	f996 200c 	ldrsb.w	r2, [r6, #12]
    25be:	2a00      	cmp	r2, #0
    25c0:	db05      	blt.n	25ce <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    25c2:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
    25c4:	6821      	ldr	r1, [r4, #0]
    25c6:	9101      	str	r1, [sp, #4]
    25c8:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    25ca:	2500      	movs	r5, #0
    25cc:	e7ca      	b.n	2564 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
    25ce:	429d      	cmp	r5, r3
    25d0:	bf94      	ite	ls
    25d2:	2500      	movls	r5, #0
    25d4:	2501      	movhi	r5, #1
    25d6:	e7db      	b.n	2590 <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
    25d8:	f06f 0011 	mvn.w	r0, #17
    25dc:	e7a6      	b.n	252c <usb_d_ep_transfer+0x54>
			return USB_HALTED;
    25de:	2002      	movs	r0, #2
    25e0:	e7a4      	b.n	252c <usb_d_ep_transfer+0x54>
    25e2:	bf00      	nop
    25e4:	00002125 	.word	0x00002125
    25e8:	0000172d 	.word	0x0000172d
    25ec:	20000148 	.word	0x20000148
    25f0:	0000173b 	.word	0x0000173b
    25f4:	000059d5 	.word	0x000059d5

000025f8 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    25f8:	b538      	push	{r3, r4, r5, lr}
    25fa:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
    25fc:	b141      	cbz	r1, 2610 <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
    25fe:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    2600:	bf0c      	ite	eq
    2602:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    2604:	2102      	movne	r1, #2
    2606:	4b13      	ldr	r3, [pc, #76]	; (2654 <usb_d_ep_halt+0x5c>)
    2608:	4798      	blx	r3
    260a:	4603      	mov	r3, r0
	}
}
    260c:	4618      	mov	r0, r3
    260e:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
    2610:	4b11      	ldr	r3, [pc, #68]	; (2658 <usb_d_ep_halt+0x60>)
    2612:	4798      	blx	r3
	if (ep_index < 0) {
    2614:	1e05      	subs	r5, r0, #0
    2616:	db19      	blt.n	264c <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    2618:	2102      	movs	r1, #2
    261a:	4620      	mov	r0, r4
    261c:	4b0d      	ldr	r3, [pc, #52]	; (2654 <usb_d_ep_halt+0x5c>)
    261e:	4798      	blx	r3
    2620:	4603      	mov	r3, r0
    2622:	2800      	cmp	r0, #0
    2624:	d0f2      	beq.n	260c <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    2626:	2100      	movs	r1, #0
    2628:	4620      	mov	r0, r4
    262a:	4b0a      	ldr	r3, [pc, #40]	; (2654 <usb_d_ep_halt+0x5c>)
    262c:	4798      	blx	r3
		if (rc < 0) {
    262e:	1e03      	subs	r3, r0, #0
    2630:	dbec      	blt.n	260c <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    2632:	4b0a      	ldr	r3, [pc, #40]	; (265c <usb_d_ep_halt+0x64>)
    2634:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    2638:	2201      	movs	r2, #1
    263a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
    263c:	2103      	movs	r1, #3
    263e:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    2640:	69db      	ldr	r3, [r3, #28]
    2642:	2200      	movs	r2, #0
    2644:	4620      	mov	r0, r4
    2646:	4798      	blx	r3
	return ERR_NONE;
    2648:	2300      	movs	r3, #0
    264a:	e7df      	b.n	260c <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
    264c:	f06f 0311 	mvn.w	r3, #17
    2650:	e7dc      	b.n	260c <usb_d_ep_halt+0x14>
    2652:	bf00      	nop
    2654:	0000582d 	.word	0x0000582d
    2658:	00002125 	.word	0x00002125
    265c:	20000148 	.word	0x20000148

00002660 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    2660:	b538      	push	{r3, r4, r5, lr}
    2662:	460d      	mov	r5, r1
    2664:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    2666:	4b0e      	ldr	r3, [pc, #56]	; (26a0 <usb_d_ep_register_callback+0x40>)
    2668:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
    266a:	4b0e      	ldr	r3, [pc, #56]	; (26a4 <usb_d_ep_register_callback+0x44>)
    266c:	2c00      	cmp	r4, #0
    266e:	bf08      	it	eq
    2670:	461c      	moveq	r4, r3
	if (ep_index < 0) {
    2672:	2800      	cmp	r0, #0
    2674:	db13      	blt.n	269e <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
    2676:	2d01      	cmp	r5, #1
    2678:	d008      	beq.n	268c <usb_d_ep_register_callback+0x2c>
    267a:	b115      	cbz	r5, 2682 <usb_d_ep_register_callback+0x22>
    267c:	2d02      	cmp	r5, #2
    267e:	d00a      	beq.n	2696 <usb_d_ep_register_callback+0x36>
    2680:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    2682:	4b09      	ldr	r3, [pc, #36]	; (26a8 <usb_d_ep_register_callback+0x48>)
    2684:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2688:	6144      	str	r4, [r0, #20]
		break;
    268a:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    268c:	4b06      	ldr	r3, [pc, #24]	; (26a8 <usb_d_ep_register_callback+0x48>)
    268e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    2692:	6184      	str	r4, [r0, #24]
		break;
    2694:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    2696:	4b04      	ldr	r3, [pc, #16]	; (26a8 <usb_d_ep_register_callback+0x48>)
    2698:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    269c:	61c4      	str	r4, [r0, #28]
    269e:	bd38      	pop	{r3, r4, r5, pc}
    26a0:	00002125 	.word	0x00002125
    26a4:	00002169 	.word	0x00002169
    26a8:	20000148 	.word	0x20000148

000026ac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    26ac:	b900      	cbnz	r0, 26b0 <assert+0x4>
		__asm("BKPT #0");
    26ae:	be00      	bkpt	0x0000
    26b0:	4770      	bx	lr

000026b2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    26b2:	6803      	ldr	r3, [r0, #0]
    26b4:	b14b      	cbz	r3, 26ca <is_list_element+0x18>
		if (it == element) {
    26b6:	428b      	cmp	r3, r1
    26b8:	d009      	beq.n	26ce <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    26ba:	681b      	ldr	r3, [r3, #0]
    26bc:	b11b      	cbz	r3, 26c6 <is_list_element+0x14>
		if (it == element) {
    26be:	4299      	cmp	r1, r3
    26c0:	d1fb      	bne.n	26ba <is_list_element+0x8>
			return true;
    26c2:	2001      	movs	r0, #1
		}
	}

	return false;
}
    26c4:	4770      	bx	lr
	return false;
    26c6:	2000      	movs	r0, #0
    26c8:	4770      	bx	lr
    26ca:	2000      	movs	r0, #0
    26cc:	4770      	bx	lr
			return true;
    26ce:	2001      	movs	r0, #1
    26d0:	4770      	bx	lr
	...

000026d4 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    26d4:	b538      	push	{r3, r4, r5, lr}
    26d6:	4604      	mov	r4, r0
    26d8:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    26da:	4b06      	ldr	r3, [pc, #24]	; (26f4 <list_insert_as_head+0x20>)
    26dc:	4798      	blx	r3
    26de:	f080 0001 	eor.w	r0, r0, #1
    26e2:	2239      	movs	r2, #57	; 0x39
    26e4:	4904      	ldr	r1, [pc, #16]	; (26f8 <list_insert_as_head+0x24>)
    26e6:	b2c0      	uxtb	r0, r0
    26e8:	4b04      	ldr	r3, [pc, #16]	; (26fc <list_insert_as_head+0x28>)
    26ea:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    26ec:	6823      	ldr	r3, [r4, #0]
    26ee:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    26f0:	6025      	str	r5, [r4, #0]
    26f2:	bd38      	pop	{r3, r4, r5, pc}
    26f4:	000026b3 	.word	0x000026b3
    26f8:	000083a8 	.word	0x000083a8
    26fc:	000026ad 	.word	0x000026ad

00002700 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2700:	6803      	ldr	r3, [r0, #0]
    2702:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2704:	6001      	str	r1, [r0, #0]
    2706:	4770      	bx	lr

00002708 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    2708:	b570      	push	{r4, r5, r6, lr}
    270a:	4605      	mov	r5, r0
    270c:	460e      	mov	r6, r1
	struct list_element *it = list->head;
    270e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
    2710:	4b0a      	ldr	r3, [pc, #40]	; (273c <list_insert_at_end+0x34>)
    2712:	4798      	blx	r3
    2714:	f080 0001 	eor.w	r0, r0, #1
    2718:	224f      	movs	r2, #79	; 0x4f
    271a:	4909      	ldr	r1, [pc, #36]	; (2740 <list_insert_at_end+0x38>)
    271c:	b2c0      	uxtb	r0, r0
    271e:	4b09      	ldr	r3, [pc, #36]	; (2744 <list_insert_at_end+0x3c>)
    2720:	4798      	blx	r3

	if (!list->head) {
    2722:	682b      	ldr	r3, [r5, #0]
    2724:	b91b      	cbnz	r3, 272e <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
    2726:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
    2728:	6033      	str	r3, [r6, #0]
		return;
    272a:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
    272c:	461c      	mov	r4, r3
	while (it->next) {
    272e:	6823      	ldr	r3, [r4, #0]
    2730:	2b00      	cmp	r3, #0
    2732:	d1fb      	bne.n	272c <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
    2734:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
    2736:	6033      	str	r3, [r6, #0]
    2738:	bd70      	pop	{r4, r5, r6, pc}
    273a:	bf00      	nop
    273c:	000026b3 	.word	0x000026b3
    2740:	000083a8 	.word	0x000083a8
    2744:	000026ad 	.word	0x000026ad

00002748 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2748:	6803      	ldr	r3, [r0, #0]
    274a:	b10b      	cbz	r3, 2750 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    274c:	681a      	ldr	r2, [r3, #0]
    274e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2750:	4618      	mov	r0, r3
    2752:	4770      	bx	lr

00002754 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2754:	b570      	push	{r4, r5, r6, lr}
    2756:	460e      	mov	r6, r1
    2758:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    275a:	4604      	mov	r4, r0
    275c:	b178      	cbz	r0, 277e <ringbuffer_init+0x2a>
    275e:	b181      	cbz	r1, 2782 <ringbuffer_init+0x2e>
    2760:	b1a2      	cbz	r2, 278c <ringbuffer_init+0x38>
    2762:	2001      	movs	r0, #1
    2764:	2228      	movs	r2, #40	; 0x28
    2766:	490d      	ldr	r1, [pc, #52]	; (279c <ringbuffer_init+0x48>)
    2768:	4b0d      	ldr	r3, [pc, #52]	; (27a0 <ringbuffer_init+0x4c>)
    276a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    276c:	1e6b      	subs	r3, r5, #1
    276e:	421d      	tst	r5, r3
    2770:	d109      	bne.n	2786 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2772:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2774:	2000      	movs	r0, #0
    2776:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    2778:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    277a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    277c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    277e:	2000      	movs	r0, #0
    2780:	e7f0      	b.n	2764 <ringbuffer_init+0x10>
    2782:	2000      	movs	r0, #0
    2784:	e7ee      	b.n	2764 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    2786:	f06f 000c 	mvn.w	r0, #12
    278a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    278c:	2228      	movs	r2, #40	; 0x28
    278e:	4903      	ldr	r1, [pc, #12]	; (279c <ringbuffer_init+0x48>)
    2790:	2000      	movs	r0, #0
    2792:	4b03      	ldr	r3, [pc, #12]	; (27a0 <ringbuffer_init+0x4c>)
    2794:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    2796:	1e6b      	subs	r3, r5, #1
    2798:	e7eb      	b.n	2772 <ringbuffer_init+0x1e>
    279a:	bf00      	nop
    279c:	000083c8 	.word	0x000083c8
    27a0:	000026ad 	.word	0x000026ad

000027a4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    27a4:	b538      	push	{r3, r4, r5, lr}
    27a6:	460d      	mov	r5, r1
	ASSERT(rb && data);
    27a8:	4604      	mov	r4, r0
    27aa:	b1a0      	cbz	r0, 27d6 <ringbuffer_get+0x32>
    27ac:	1c08      	adds	r0, r1, #0
    27ae:	bf18      	it	ne
    27b0:	2001      	movne	r0, #1
    27b2:	2240      	movs	r2, #64	; 0x40
    27b4:	490a      	ldr	r1, [pc, #40]	; (27e0 <ringbuffer_get+0x3c>)
    27b6:	4b0b      	ldr	r3, [pc, #44]	; (27e4 <ringbuffer_get+0x40>)
    27b8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    27ba:	68a3      	ldr	r3, [r4, #8]
    27bc:	68e2      	ldr	r2, [r4, #12]
    27be:	429a      	cmp	r2, r3
    27c0:	d00b      	beq.n	27da <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    27c2:	6862      	ldr	r2, [r4, #4]
    27c4:	4013      	ands	r3, r2
    27c6:	6822      	ldr	r2, [r4, #0]
    27c8:	5cd3      	ldrb	r3, [r2, r3]
    27ca:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    27cc:	68a3      	ldr	r3, [r4, #8]
    27ce:	3301      	adds	r3, #1
    27d0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    27d2:	2000      	movs	r0, #0
    27d4:	bd38      	pop	{r3, r4, r5, pc}
    27d6:	2000      	movs	r0, #0
    27d8:	e7eb      	b.n	27b2 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    27da:	f06f 0009 	mvn.w	r0, #9
}
    27de:	bd38      	pop	{r3, r4, r5, pc}
    27e0:	000083c8 	.word	0x000083c8
    27e4:	000026ad 	.word	0x000026ad

000027e8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    27e8:	b538      	push	{r3, r4, r5, lr}
    27ea:	460d      	mov	r5, r1
	ASSERT(rb);
    27ec:	4604      	mov	r4, r0
    27ee:	2251      	movs	r2, #81	; 0x51
    27f0:	490b      	ldr	r1, [pc, #44]	; (2820 <ringbuffer_put+0x38>)
    27f2:	3000      	adds	r0, #0
    27f4:	bf18      	it	ne
    27f6:	2001      	movne	r0, #1
    27f8:	4b0a      	ldr	r3, [pc, #40]	; (2824 <ringbuffer_put+0x3c>)
    27fa:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    27fc:	68e3      	ldr	r3, [r4, #12]
    27fe:	6862      	ldr	r2, [r4, #4]
    2800:	4013      	ands	r3, r2
    2802:	6822      	ldr	r2, [r4, #0]
    2804:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2806:	68e3      	ldr	r3, [r4, #12]
    2808:	6861      	ldr	r1, [r4, #4]
    280a:	68a2      	ldr	r2, [r4, #8]
    280c:	1a9a      	subs	r2, r3, r2
    280e:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2810:	bf84      	itt	hi
    2812:	1a59      	subhi	r1, r3, r1
    2814:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    2816:	3301      	adds	r3, #1
    2818:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    281a:	2000      	movs	r0, #0
    281c:	bd38      	pop	{r3, r4, r5, pc}
    281e:	bf00      	nop
    2820:	000083c8 	.word	0x000083c8
    2824:	000026ad 	.word	0x000026ad

00002828 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2828:	b510      	push	{r4, lr}
	ASSERT(rb);
    282a:	4604      	mov	r4, r0
    282c:	2267      	movs	r2, #103	; 0x67
    282e:	4905      	ldr	r1, [pc, #20]	; (2844 <ringbuffer_num+0x1c>)
    2830:	3000      	adds	r0, #0
    2832:	bf18      	it	ne
    2834:	2001      	movne	r0, #1
    2836:	4b04      	ldr	r3, [pc, #16]	; (2848 <ringbuffer_num+0x20>)
    2838:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    283a:	68e0      	ldr	r0, [r4, #12]
    283c:	68a3      	ldr	r3, [r4, #8]
}
    283e:	1ac0      	subs	r0, r0, r3
    2840:	bd10      	pop	{r4, pc}
    2842:	bf00      	nop
    2844:	000083c8 	.word	0x000083c8
    2848:	000026ad 	.word	0x000026ad

0000284c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    284c:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    284e:	4a06      	ldr	r2, [pc, #24]	; (2868 <_sbrk+0x1c>)
    2850:	6812      	ldr	r2, [r2, #0]
    2852:	b122      	cbz	r2, 285e <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2854:	4a04      	ldr	r2, [pc, #16]	; (2868 <_sbrk+0x1c>)
    2856:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2858:	4403      	add	r3, r0
    285a:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    285c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    285e:	4903      	ldr	r1, [pc, #12]	; (286c <_sbrk+0x20>)
    2860:	4a01      	ldr	r2, [pc, #4]	; (2868 <_sbrk+0x1c>)
    2862:	6011      	str	r1, [r2, #0]
    2864:	e7f6      	b.n	2854 <_sbrk+0x8>
    2866:	bf00      	nop
    2868:	200002e8 	.word	0x200002e8
    286c:	200134f8 	.word	0x200134f8

00002870 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    2870:	f04f 30ff 	mov.w	r0, #4294967295
    2874:	4770      	bx	lr

00002876 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    2876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    287a:	604b      	str	r3, [r1, #4]

	return 0;
}
    287c:	2000      	movs	r0, #0
    287e:	4770      	bx	lr

00002880 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    2880:	2001      	movs	r0, #1
    2882:	4770      	bx	lr

00002884 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    2884:	2000      	movs	r0, #0
    2886:	4770      	bx	lr

00002888 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2888:	6940      	ldr	r0, [r0, #20]
    288a:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    288e:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2892:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    2894:	0040      	lsls	r0, r0, #1
    2896:	3076      	adds	r0, #118	; 0x76
}
    2898:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    289c:	4770      	bx	lr
	...

000028a0 <_adc_init>:
	};
}

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    28a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    28a2:	f013 0f01 	tst.w	r3, #1
    28a6:	d11b      	bne.n	28e0 <_adc_init+0x40>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28aa:	f013 0f03 	tst.w	r3, #3
    28ae:	d1fb      	bne.n	28a8 <_adc_init+0x8>

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    28b0:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    28b2:	f013 0f02 	tst.w	r3, #2
    28b6:	d00d      	beq.n	28d4 <_adc_init+0x34>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    28b8:	8803      	ldrh	r3, [r0, #0]
    28ba:	f023 0302 	bic.w	r3, r3, #2
    28be:	041b      	lsls	r3, r3, #16
    28c0:	0c1b      	lsrs	r3, r3, #16
    28c2:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28c6:	f013 0f03 	tst.w	r3, #3
    28ca:	d1fb      	bne.n	28c4 <_adc_init+0x24>
    28cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28ce:	f013 0f02 	tst.w	r3, #2
    28d2:	d1fb      	bne.n	28cc <_adc_init+0x2c>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    28d4:	2301      	movs	r3, #1
    28d6:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28da:	f013 0f03 	tst.w	r3, #3
    28de:	d1fb      	bne.n	28d8 <_adc_init+0x38>
    28e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28e2:	f013 0f01 	tst.w	r3, #1
    28e6:	d1fb      	bne.n	28e0 <_adc_init+0x40>
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    28e8:	2316      	movs	r3, #22
    28ea:	4a37      	ldr	r2, [pc, #220]	; (29c8 <_adc_init+0x128>)
    28ec:	fb03 2301 	mla	r3, r3, r1, r2
    28f0:	889b      	ldrh	r3, [r3, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    28f2:	80c3      	strh	r3, [r0, #6]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    28f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    28f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    28fa:	2b00      	cmp	r3, #0
    28fc:	d1fa      	bne.n	28f4 <_adc_init+0x54>
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    28fe:	2316      	movs	r3, #22
    2900:	4a31      	ldr	r2, [pc, #196]	; (29c8 <_adc_init+0x128>)
    2902:	fb03 2301 	mla	r3, r3, r1, r2
    2906:	799b      	ldrb	r3, [r3, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2908:	7203      	strb	r3, [r0, #8]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    290a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2910:	2b00      	cmp	r3, #0
    2912:	d1fa      	bne.n	290a <_adc_init+0x6a>
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2914:	2316      	movs	r3, #22
    2916:	4a2c      	ldr	r2, [pc, #176]	; (29c8 <_adc_init+0x128>)
    2918:	fb03 2301 	mla	r3, r3, r1, r2
    291c:	79da      	ldrb	r2, [r3, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    291e:	7082      	strb	r2, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2920:	891b      	ldrh	r3, [r3, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2922:	8083      	strh	r3, [r0, #4]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2924:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2926:	f3c3 030b 	ubfx	r3, r3, #0, #12
    292a:	2b00      	cmp	r3, #0
    292c:	d1fa      	bne.n	2924 <_adc_init+0x84>
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    292e:	2316      	movs	r3, #22
    2930:	4a25      	ldr	r2, [pc, #148]	; (29c8 <_adc_init+0x128>)
    2932:	fb03 2301 	mla	r3, r3, r1, r2
    2936:	7a9b      	ldrb	r3, [r3, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2938:	7283      	strb	r3, [r0, #10]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    293a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    293c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2940:	2b00      	cmp	r3, #0
    2942:	d1fa      	bne.n	293a <_adc_init+0x9a>
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2944:	2316      	movs	r3, #22
    2946:	4a20      	ldr	r2, [pc, #128]	; (29c8 <_adc_init+0x128>)
    2948:	fb03 2301 	mla	r3, r3, r1, r2
    294c:	7adb      	ldrb	r3, [r3, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    294e:	72c3      	strb	r3, [r0, #11]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2950:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2952:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2956:	2b00      	cmp	r3, #0
    2958:	d1fa      	bne.n	2950 <_adc_init+0xb0>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    295a:	2316      	movs	r3, #22
    295c:	4a1a      	ldr	r2, [pc, #104]	; (29c8 <_adc_init+0x128>)
    295e:	fb03 2301 	mla	r3, r3, r1, r2
    2962:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2964:	8183      	strh	r3, [r0, #12]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2966:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2968:	f013 0f80 	tst.w	r3, #128	; 0x80
    296c:	d1fb      	bne.n	2966 <_adc_init+0xc6>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    296e:	2316      	movs	r3, #22
    2970:	4a15      	ldr	r2, [pc, #84]	; (29c8 <_adc_init+0x128>)
    2972:	fb03 2301 	mla	r3, r3, r1, r2
    2976:	89db      	ldrh	r3, [r3, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2978:	81c3      	strh	r3, [r0, #14]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    297a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    297c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2980:	d1fb      	bne.n	297a <_adc_init+0xda>
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2982:	2316      	movs	r3, #22
    2984:	4a10      	ldr	r2, [pc, #64]	; (29c8 <_adc_init+0x128>)
    2986:	fb03 2301 	mla	r3, r3, r1, r2
    298a:	8a1b      	ldrh	r3, [r3, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    298c:	8203      	strh	r3, [r0, #16]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    298e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2990:	f413 7f00 	tst.w	r3, #512	; 0x200
    2994:	d1fb      	bne.n	298e <_adc_init+0xee>
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2996:	2316      	movs	r3, #22
    2998:	4a0b      	ldr	r2, [pc, #44]	; (29c8 <_adc_init+0x128>)
    299a:	fb03 2301 	mla	r3, r3, r1, r2
    299e:	8a5b      	ldrh	r3, [r3, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    29a0:	8243      	strh	r3, [r0, #18]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    29a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
    29a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    29a8:	d1fb      	bne.n	29a2 <_adc_init+0x102>
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    29aa:	2216      	movs	r2, #22
    29ac:	4b06      	ldr	r3, [pc, #24]	; (29c8 <_adc_init+0x128>)
    29ae:	fb02 3101 	mla	r1, r2, r1, r3
    29b2:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    29b4:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    29b6:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    29b8:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    29ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    29bc:	f013 0f03 	tst.w	r3, #3
    29c0:	d1fb      	bne.n	29ba <_adc_init+0x11a>

	return ERR_NONE;
}
    29c2:	2000      	movs	r0, #0
    29c4:	4770      	bx	lr
    29c6:	bf00      	nop
    29c8:	000083ec 	.word	0x000083ec

000029cc <_adc_interrupt_handler>:
 * \internal ADC interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
    29cc:	b508      	push	{r3, lr}
	void *const hw      = device->hw;
    29ce:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
    29d0:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
    29d4:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
    29d8:	400b      	ands	r3, r1
	if (intflag & ADC_INTFLAG_RESRDY) {
    29da:	f013 0f01 	tst.w	r3, #1
    29de:	d106      	bne.n	29ee <_adc_interrupt_handler+0x22>
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
    29e0:	f013 0f02 	tst.w	r3, #2
    29e4:	d10d      	bne.n	2a02 <_adc_interrupt_handler+0x36>
		hri_adc_clear_interrupt_OVERRUN_bit(hw);
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
    29e6:	f013 0f04 	tst.w	r3, #4
    29ea:	d111      	bne.n	2a10 <_adc_interrupt_handler+0x44>
    29ec:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    29ee:	2301      	movs	r3, #1
    29f0:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
    29f4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
    29f8:	6883      	ldr	r3, [r0, #8]
    29fa:	b292      	uxth	r2, r2
    29fc:	2100      	movs	r1, #0
    29fe:	4798      	blx	r3
    2a00:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2a02:	2302      	movs	r3, #2
    2a04:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
    2a08:	6843      	ldr	r3, [r0, #4]
    2a0a:	2100      	movs	r1, #0
    2a0c:	4798      	blx	r3
    2a0e:	bd08      	pop	{r3, pc}
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2a10:	2304      	movs	r3, #4
    2a12:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
    2a16:	6803      	ldr	r3, [r0, #0]
    2a18:	2100      	movs	r1, #0
    2a1a:	4798      	blx	r3
	}
}
    2a1c:	e7e6      	b.n	29ec <_adc_interrupt_handler+0x20>
	...

00002a20 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2a20:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2a24:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2a28:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    2a2c:	b148      	cbz	r0, 2a42 <_adc_get_regs+0x22>
    2a2e:	2801      	cmp	r0, #1
    2a30:	d009      	beq.n	2a46 <_adc_get_regs+0x26>
{
    2a32:	b508      	push	{r3, lr}
	ASSERT(false);
    2a34:	228c      	movs	r2, #140	; 0x8c
    2a36:	4905      	ldr	r1, [pc, #20]	; (2a4c <_adc_get_regs+0x2c>)
    2a38:	2000      	movs	r0, #0
    2a3a:	4b05      	ldr	r3, [pc, #20]	; (2a50 <_adc_get_regs+0x30>)
    2a3c:	4798      	blx	r3
	return 0;
    2a3e:	2000      	movs	r0, #0
    2a40:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2a42:	2000      	movs	r0, #0
    2a44:	4770      	bx	lr
    2a46:	2001      	movs	r0, #1
    2a48:	4770      	bx	lr
    2a4a:	bf00      	nop
    2a4c:	00008418 	.word	0x00008418
    2a50:	000026ad 	.word	0x000026ad

00002a54 <_adc_async_init>:
{
    2a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a58:	460c      	mov	r4, r1
	ASSERT(device);
    2a5a:	4605      	mov	r5, r0
    2a5c:	22e6      	movs	r2, #230	; 0xe6
    2a5e:	493b      	ldr	r1, [pc, #236]	; (2b4c <_adc_async_init+0xf8>)
    2a60:	3000      	adds	r0, #0
    2a62:	bf18      	it	ne
    2a64:	2001      	movne	r0, #1
    2a66:	4b3a      	ldr	r3, [pc, #232]	; (2b50 <_adc_async_init+0xfc>)
    2a68:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2a6a:	4620      	mov	r0, r4
    2a6c:	4b39      	ldr	r3, [pc, #228]	; (2b54 <_adc_async_init+0x100>)
    2a6e:	4798      	blx	r3
    2a70:	4601      	mov	r1, r0
    2a72:	4620      	mov	r0, r4
    2a74:	4b38      	ldr	r3, [pc, #224]	; (2b58 <_adc_async_init+0x104>)
    2a76:	4798      	blx	r3
	if (init_status) {
    2a78:	4606      	mov	r6, r0
    2a7a:	b110      	cbz	r0, 2a82 <_adc_async_init+0x2e>
}
    2a7c:	4630      	mov	r0, r6
    2a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	device->hw = hw;
    2a82:	616c      	str	r4, [r5, #20]
	if (hw == ADC0) {
    2a84:	4b35      	ldr	r3, [pc, #212]	; (2b5c <_adc_async_init+0x108>)
    2a86:	429c      	cmp	r4, r3
    2a88:	d05c      	beq.n	2b44 <_adc_async_init+0xf0>
	if (hw == ADC1) {
    2a8a:	4b35      	ldr	r3, [pc, #212]	; (2b60 <_adc_async_init+0x10c>)
    2a8c:	429c      	cmp	r4, r3
		_adc1_dev = dev;
    2a8e:	bf04      	itt	eq
    2a90:	4b34      	ldreq	r3, [pc, #208]	; (2b64 <_adc_async_init+0x110>)
    2a92:	605d      	streq	r5, [r3, #4]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    2a94:	4628      	mov	r0, r5
    2a96:	4f34      	ldr	r7, [pc, #208]	; (2b68 <_adc_async_init+0x114>)
    2a98:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a9a:	0943      	lsrs	r3, r0, #5
    2a9c:	f000 001f 	and.w	r0, r0, #31
    2aa0:	2401      	movs	r4, #1
    2aa2:	fa04 f000 	lsl.w	r0, r4, r0
    2aa6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2b6c <_adc_async_init+0x118>
    2aaa:	3320      	adds	r3, #32
    2aac:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2ab0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ab4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    2ab8:	4628      	mov	r0, r5
    2aba:	47b8      	blx	r7
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2abc:	0943      	lsrs	r3, r0, #5
    2abe:	f000 001f 	and.w	r0, r0, #31
    2ac2:	fa04 f000 	lsl.w	r0, r4, r0
    2ac6:	3360      	adds	r3, #96	; 0x60
    2ac8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    2acc:	4628      	mov	r0, r5
    2ace:	47b8      	blx	r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ad0:	0943      	lsrs	r3, r0, #5
    2ad2:	f000 001f 	and.w	r0, r0, #31
    2ad6:	4084      	lsls	r4, r0
    2ad8:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    2adc:	4628      	mov	r0, r5
    2ade:	47b8      	blx	r7
    2ae0:	3001      	adds	r0, #1
    2ae2:	b280      	uxth	r0, r0
    2ae4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	dbc8      	blt.n	2a7c <_adc_async_init+0x28>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2aea:	095b      	lsrs	r3, r3, #5
    2aec:	f000 001f 	and.w	r0, r0, #31
    2af0:	2201      	movs	r2, #1
    2af2:	fa02 f000 	lsl.w	r0, r2, r0
    2af6:	3320      	adds	r3, #32
    2af8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2afc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b00:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    2b04:	4628      	mov	r0, r5
    2b06:	47b8      	blx	r7
    2b08:	3001      	adds	r0, #1
    2b0a:	b280      	uxth	r0, r0
    2b0c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2b0e:	2b00      	cmp	r3, #0
    2b10:	dbb4      	blt.n	2a7c <_adc_async_init+0x28>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b12:	095b      	lsrs	r3, r3, #5
    2b14:	f000 001f 	and.w	r0, r0, #31
    2b18:	2201      	movs	r2, #1
    2b1a:	fa02 f000 	lsl.w	r0, r2, r0
    2b1e:	3360      	adds	r3, #96	; 0x60
    2b20:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    2b24:	4628      	mov	r0, r5
    2b26:	47b8      	blx	r7
    2b28:	3001      	adds	r0, #1
    2b2a:	b280      	uxth	r0, r0
    2b2c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    2b2e:	2b00      	cmp	r3, #0
    2b30:	dba4      	blt.n	2a7c <_adc_async_init+0x28>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b32:	095b      	lsrs	r3, r3, #5
    2b34:	f000 001f 	and.w	r0, r0, #31
    2b38:	2201      	movs	r2, #1
    2b3a:	fa02 f000 	lsl.w	r0, r2, r0
    2b3e:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
    2b42:	e79b      	b.n	2a7c <_adc_async_init+0x28>
		_adc0_dev = dev;
    2b44:	4b07      	ldr	r3, [pc, #28]	; (2b64 <_adc_async_init+0x110>)
    2b46:	601d      	str	r5, [r3, #0]
    2b48:	e7a4      	b.n	2a94 <_adc_async_init+0x40>
    2b4a:	bf00      	nop
    2b4c:	00008418 	.word	0x00008418
    2b50:	000026ad 	.word	0x000026ad
    2b54:	00002a21 	.word	0x00002a21
    2b58:	000028a1 	.word	0x000028a1
    2b5c:	43001c00 	.word	0x43001c00
    2b60:	43002000 	.word	0x43002000
    2b64:	200002ec 	.word	0x200002ec
    2b68:	00002889 	.word	0x00002889
    2b6c:	e000e100 	.word	0xe000e100

00002b70 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    2b70:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
    2b72:	88db      	ldrh	r3, [r3, #6]
    2b74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    2b78:	2b03      	cmp	r3, #3
}
    2b7a:	bf0c      	ite	eq
    2b7c:	2001      	moveq	r0, #1
    2b7e:	2002      	movne	r0, #2
    2b80:	4770      	bx	lr
	...

00002b84 <ADC0_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
    2b84:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2b86:	4b02      	ldr	r3, [pc, #8]	; (2b90 <ADC0_0_Handler+0xc>)
    2b88:	6818      	ldr	r0, [r3, #0]
    2b8a:	4b02      	ldr	r3, [pc, #8]	; (2b94 <ADC0_0_Handler+0x10>)
    2b8c:	4798      	blx	r3
    2b8e:	bd08      	pop	{r3, pc}
    2b90:	200002ec 	.word	0x200002ec
    2b94:	000029cd 	.word	0x000029cd

00002b98 <ADC0_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC0_1_Handler(void)
{
    2b98:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc0_dev);
    2b9a:	4b02      	ldr	r3, [pc, #8]	; (2ba4 <ADC0_1_Handler+0xc>)
    2b9c:	6818      	ldr	r0, [r3, #0]
    2b9e:	4b02      	ldr	r3, [pc, #8]	; (2ba8 <ADC0_1_Handler+0x10>)
    2ba0:	4798      	blx	r3
    2ba2:	bd08      	pop	{r3, pc}
    2ba4:	200002ec 	.word	0x200002ec
    2ba8:	000029cd 	.word	0x000029cd

00002bac <ADC1_0_Handler>:

/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
    2bac:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    2bae:	4b02      	ldr	r3, [pc, #8]	; (2bb8 <ADC1_0_Handler+0xc>)
    2bb0:	6858      	ldr	r0, [r3, #4]
    2bb2:	4b02      	ldr	r3, [pc, #8]	; (2bbc <ADC1_0_Handler+0x10>)
    2bb4:	4798      	blx	r3
    2bb6:	bd08      	pop	{r3, pc}
    2bb8:	200002ec 	.word	0x200002ec
    2bbc:	000029cd 	.word	0x000029cd

00002bc0 <ADC1_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void ADC1_1_Handler(void)
{
    2bc0:	b508      	push	{r3, lr}
	_adc_interrupt_handler(_adc1_dev);
    2bc2:	4b02      	ldr	r3, [pc, #8]	; (2bcc <ADC1_1_Handler+0xc>)
    2bc4:	6858      	ldr	r0, [r3, #4]
    2bc6:	4b02      	ldr	r3, [pc, #8]	; (2bd0 <ADC1_1_Handler+0x10>)
    2bc8:	4798      	blx	r3
    2bca:	bd08      	pop	{r3, pc}
    2bcc:	200002ec 	.word	0x200002ec
    2bd0:	000029cd 	.word	0x000029cd

00002bd4 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bd4:	0943      	lsrs	r3, r0, #5
    2bd6:	f000 001f 	and.w	r0, r0, #31
    2bda:	2201      	movs	r2, #1
    2bdc:	fa02 f000 	lsl.w	r0, r2, r0
    2be0:	3340      	adds	r3, #64	; 0x40
    2be2:	4a02      	ldr	r2, [pc, #8]	; (2bec <_irq_set+0x18>)
    2be4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2be8:	4770      	bx	lr
    2bea:	bf00      	nop
    2bec:	e000e100 	.word	0xe000e100

00002bf0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2bf0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2bf2:	4a0e      	ldr	r2, [pc, #56]	; (2c2c <_init_chip+0x3c>)
    2bf4:	8813      	ldrh	r3, [r2, #0]
    2bf6:	b29b      	uxth	r3, r3
    2bf8:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    2bfc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2bfe:	4b0c      	ldr	r3, [pc, #48]	; (2c30 <_init_chip+0x40>)
    2c00:	4798      	blx	r3
	_oscctrl_init_sources();
    2c02:	4b0c      	ldr	r3, [pc, #48]	; (2c34 <_init_chip+0x44>)
    2c04:	4798      	blx	r3
	_mclk_init();
    2c06:	4b0c      	ldr	r3, [pc, #48]	; (2c38 <_init_chip+0x48>)
    2c08:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2c0a:	2004      	movs	r0, #4
    2c0c:	4c0b      	ldr	r4, [pc, #44]	; (2c3c <_init_chip+0x4c>)
    2c0e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2c10:	4b0b      	ldr	r3, [pc, #44]	; (2c40 <_init_chip+0x50>)
    2c12:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2c14:	f640 70fb 	movw	r0, #4091	; 0xffb
    2c18:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2c1a:	4a0a      	ldr	r2, [pc, #40]	; (2c44 <_init_chip+0x54>)
    2c1c:	6913      	ldr	r3, [r2, #16]
    2c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2c22:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    2c24:	4b08      	ldr	r3, [pc, #32]	; (2c48 <_init_chip+0x58>)
    2c26:	4798      	blx	r3
    2c28:	bd10      	pop	{r4, pc}
    2c2a:	bf00      	nop
    2c2c:	41004000 	.word	0x41004000
    2c30:	00003079 	.word	0x00003079
    2c34:	0000308d 	.word	0x0000308d
    2c38:	00002fa1 	.word	0x00002fa1
    2c3c:	00002f29 	.word	0x00002f29
    2c40:	00003091 	.word	0x00003091
    2c44:	40000800 	.word	0x40000800
    2c48:	00002cc1 	.word	0x00002cc1

00002c4c <_dmac_handler>:
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2c4c:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2c4e:	4a1a      	ldr	r2, [pc, #104]	; (2cb8 <_dmac_handler+0x6c>)
    2c50:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    2c52:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2c56:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2c5a:	4818      	ldr	r0, [pc, #96]	; (2cbc <_dmac_handler+0x70>)
    2c5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2c60:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2c64:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2c68:	f012 0f01 	tst.w	r2, #1
    2c6c:	d10a      	bne.n	2c84 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2c6e:	011a      	lsls	r2, r3, #4
    2c70:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c74:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2c78:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2c7c:	f012 0f02 	tst.w	r2, #2
    2c80:	d10b      	bne.n	2c9a <_dmac_handler+0x4e>
    2c82:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2c84:	011a      	lsls	r2, r3, #4
    2c86:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2c8a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2c8e:	2101      	movs	r1, #1
    2c90:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2c94:	6843      	ldr	r3, [r0, #4]
    2c96:	4798      	blx	r3
    2c98:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2c9a:	011a      	lsls	r2, r3, #4
    2c9c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2ca0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2ca4:	2102      	movs	r1, #2
    2ca6:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2caa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2cae:	4a03      	ldr	r2, [pc, #12]	; (2cbc <_dmac_handler+0x70>)
    2cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2cb4:	4798      	blx	r3
	}
}
    2cb6:	e7e4      	b.n	2c82 <_dmac_handler+0x36>
    2cb8:	4100a000 	.word	0x4100a000
    2cbc:	200002f4 	.word	0x200002f4

00002cc0 <_dma_init>:
{
    2cc0:	b470      	push	{r4, r5, r6}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2cc2:	4a32      	ldr	r2, [pc, #200]	; (2d8c <_dma_init+0xcc>)
    2cc4:	8813      	ldrh	r3, [r2, #0]
    2cc6:	f023 0302 	bic.w	r3, r3, #2
    2cca:	041b      	lsls	r3, r3, #16
    2ccc:	0c1b      	lsrs	r3, r3, #16
    2cce:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2cd0:	8853      	ldrh	r3, [r2, #2]
    2cd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2cd6:	041b      	lsls	r3, r3, #16
    2cd8:	0c1b      	lsrs	r3, r3, #16
    2cda:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2cdc:	8813      	ldrh	r3, [r2, #0]
    2cde:	b29b      	uxth	r3, r3
    2ce0:	f043 0301 	orr.w	r3, r3, #1
    2ce4:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2ce6:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2ce8:	f013 0f01 	tst.w	r3, #1
    2cec:	d1fb      	bne.n	2ce6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2cee:	4b27      	ldr	r3, [pc, #156]	; (2d8c <_dma_init+0xcc>)
    2cf0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2cf4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2cf6:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2cf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    2cfc:	f042 0201 	orr.w	r2, r2, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2d00:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2d02:	2100      	movs	r1, #0
    2d04:	6159      	str	r1, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2d06:	4a22      	ldr	r2, [pc, #136]	; (2d90 <_dma_init+0xd0>)
	((Dmac *)hw)->BASEADDR.reg = data;
    2d08:	635a      	str	r2, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2d0a:	4a22      	ldr	r2, [pc, #136]	; (2d94 <_dma_init+0xd4>)
	((Dmac *)hw)->WRBADDR.reg = data;
    2d0c:	639a      	str	r2, [r3, #56]	; 0x38
    2d0e:	4b22      	ldr	r3, [pc, #136]	; (2d98 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2d10:	4c1f      	ldr	r4, [pc, #124]	; (2d90 <_dma_init+0xd0>)
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    2d12:	460e      	mov	r6, r1
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2d14:	681d      	ldr	r5, [r3, #0]
    2d16:	0108      	lsls	r0, r1, #4
    2d18:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    2d1c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2d20:	6415      	str	r5, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2d22:	791d      	ldrb	r5, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2d24:	f882 5045 	strb.w	r5, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2d28:	795d      	ldrb	r5, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2d2a:	f882 5046 	strb.w	r5, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2d2e:	88dd      	ldrh	r5, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2d30:	1822      	adds	r2, r4, r0
    2d32:	5225      	strh	r5, [r4, r0]
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    2d34:	60d6      	str	r6, [r2, #12]
    2d36:	3101      	adds	r1, #1
    2d38:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2d3a:	2920      	cmp	r1, #32
    2d3c:	d1ea      	bne.n	2d14 <_dma_init+0x54>
    2d3e:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d40:	2001      	movs	r0, #1
    2d42:	4916      	ldr	r1, [pc, #88]	; (2d9c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2d44:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2d46:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2d4a:	d00b      	beq.n	2d64 <_dma_init+0xa4>
    2d4c:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2d4e:	2b24      	cmp	r3, #36	; 0x24
    2d50:	d1f8      	bne.n	2d44 <_dma_init+0x84>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2d52:	4a0e      	ldr	r2, [pc, #56]	; (2d8c <_dma_init+0xcc>)
    2d54:	8813      	ldrh	r3, [r2, #0]
    2d56:	b29b      	uxth	r3, r3
    2d58:	f043 0302 	orr.w	r3, r3, #2
    2d5c:	8013      	strh	r3, [r2, #0]
}
    2d5e:	2000      	movs	r0, #0
    2d60:	bc70      	pop	{r4, r5, r6}
    2d62:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d64:	095c      	lsrs	r4, r3, #5
    2d66:	f002 021f 	and.w	r2, r2, #31
    2d6a:	fa00 f202 	lsl.w	r2, r0, r2
    2d6e:	f104 0520 	add.w	r5, r4, #32
    2d72:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2d76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d7a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d7e:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2d82:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d86:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2d8a:	e7df      	b.n	2d4c <_dma_init+0x8c>
    2d8c:	4100a000 	.word	0x4100a000
    2d90:	200030e0 	.word	0x200030e0
    2d94:	200032e0 	.word	0x200032e0
    2d98:	00008430 	.word	0x00008430
    2d9c:	e000e100 	.word	0xe000e100

00002da0 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2da0:	4b02      	ldr	r3, [pc, #8]	; (2dac <_dma_set_destination_address+0xc>)
    2da2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2da6:	6081      	str	r1, [r0, #8]
}
    2da8:	2000      	movs	r0, #0
    2daa:	4770      	bx	lr
    2dac:	200030e0 	.word	0x200030e0

00002db0 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2db0:	4b02      	ldr	r3, [pc, #8]	; (2dbc <_dma_set_source_address+0xc>)
    2db2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2db6:	6041      	str	r1, [r0, #4]
}
    2db8:	2000      	movs	r0, #0
    2dba:	4770      	bx	lr
    2dbc:	200030e0 	.word	0x200030e0

00002dc0 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2dc0:	4a05      	ldr	r2, [pc, #20]	; (2dd8 <_dma_srcinc_enable+0x18>)
    2dc2:	0100      	lsls	r0, r0, #4
    2dc4:	5a13      	ldrh	r3, [r2, r0]
    2dc6:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    2dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    2dcc:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    2dd0:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    2dd2:	5211      	strh	r1, [r2, r0]
}
    2dd4:	2000      	movs	r0, #0
    2dd6:	4770      	bx	lr
    2dd8:	200030e0 	.word	0x200030e0

00002ddc <_dma_set_data_amount>:
{
    2ddc:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    2dde:	4c14      	ldr	r4, [pc, #80]	; (2e30 <_dma_set_data_amount+0x54>)
    2de0:	0102      	lsls	r2, r0, #4
    2de2:	18a3      	adds	r3, r4, r2
    2de4:	689d      	ldr	r5, [r3, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2de6:	5aa3      	ldrh	r3, [r4, r2]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    2de8:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2dec:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    2dee:	f412 6f00 	tst.w	r2, #2048	; 0x800
    2df2:	d006      	beq.n	2e02 <_dma_set_data_amount+0x26>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2df4:	fa01 f403 	lsl.w	r4, r1, r3
    2df8:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    2dfa:	4a0d      	ldr	r2, [pc, #52]	; (2e30 <_dma_set_data_amount+0x54>)
    2dfc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    2e00:	6094      	str	r4, [r2, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2e02:	4c0b      	ldr	r4, [pc, #44]	; (2e30 <_dma_set_data_amount+0x54>)
    2e04:	0102      	lsls	r2, r0, #4
    2e06:	18a5      	adds	r5, r4, r2
    2e08:	686d      	ldr	r5, [r5, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2e0a:	5aa2      	ldrh	r2, [r4, r2]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    2e0c:	f412 6f80 	tst.w	r2, #1024	; 0x400
    2e10:	d005      	beq.n	2e1e <_dma_set_data_amount+0x42>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    2e12:	fa01 f303 	lsl.w	r3, r1, r3
    2e16:	442b      	add	r3, r5
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    2e18:	eb04 1200 	add.w	r2, r4, r0, lsl #4
    2e1c:	6053      	str	r3, [r2, #4]
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2e1e:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    2e20:	4b03      	ldr	r3, [pc, #12]	; (2e30 <_dma_set_data_amount+0x54>)
    2e22:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    2e26:	8041      	strh	r1, [r0, #2]
}
    2e28:	2000      	movs	r0, #0
    2e2a:	bc30      	pop	{r4, r5}
    2e2c:	4770      	bx	lr
    2e2e:	bf00      	nop
    2e30:	200030e0 	.word	0x200030e0

00002e34 <_dma_enable_transaction>:
{
    2e34:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    2e36:	4c0d      	ldr	r4, [pc, #52]	; (2e6c <_dma_enable_transaction+0x38>)
    2e38:	0103      	lsls	r3, r0, #4
    2e3a:	5ae2      	ldrh	r2, [r4, r3]
    2e3c:	b292      	uxth	r2, r2
    2e3e:	f042 0201 	orr.w	r2, r2, #1
    2e42:	52e2      	strh	r2, [r4, r3]
    2e44:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    2e48:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    2e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    2e4e:	f042 0202 	orr.w	r2, r2, #2
    2e52:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    2e54:	b131      	cbz	r1, 2e64 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    2e56:	4a06      	ldr	r2, [pc, #24]	; (2e70 <_dma_enable_transaction+0x3c>)
    2e58:	6911      	ldr	r1, [r2, #16]
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2e5a:	2301      	movs	r3, #1
    2e5c:	fa03 f000 	lsl.w	r0, r3, r0
    2e60:	4308      	orrs	r0, r1
    2e62:	6110      	str	r0, [r2, #16]
}
    2e64:	2000      	movs	r0, #0
    2e66:	f85d 4b04 	ldr.w	r4, [sp], #4
    2e6a:	4770      	bx	lr
    2e6c:	200030e0 	.word	0x200030e0
    2e70:	4100a000 	.word	0x4100a000

00002e74 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    2e74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2e78:	4b02      	ldr	r3, [pc, #8]	; (2e84 <_dma_get_channel_resource+0x10>)
    2e7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2e7e:	6001      	str	r1, [r0, #0]
}
    2e80:	2000      	movs	r0, #0
    2e82:	4770      	bx	lr
    2e84:	200002f4 	.word	0x200002f4

00002e88 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
    2e88:	b508      	push	{r3, lr}
	_dmac_handler();
    2e8a:	4b01      	ldr	r3, [pc, #4]	; (2e90 <DMAC_0_Handler+0x8>)
    2e8c:	4798      	blx	r3
    2e8e:	bd08      	pop	{r3, pc}
    2e90:	00002c4d 	.word	0x00002c4d

00002e94 <DMAC_1_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_1_Handler(void)
{
    2e94:	b508      	push	{r3, lr}
	_dmac_handler();
    2e96:	4b01      	ldr	r3, [pc, #4]	; (2e9c <DMAC_1_Handler+0x8>)
    2e98:	4798      	blx	r3
    2e9a:	bd08      	pop	{r3, pc}
    2e9c:	00002c4d 	.word	0x00002c4d

00002ea0 <DMAC_2_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_2_Handler(void)
{
    2ea0:	b508      	push	{r3, lr}
	_dmac_handler();
    2ea2:	4b01      	ldr	r3, [pc, #4]	; (2ea8 <DMAC_2_Handler+0x8>)
    2ea4:	4798      	blx	r3
    2ea6:	bd08      	pop	{r3, pc}
    2ea8:	00002c4d 	.word	0x00002c4d

00002eac <DMAC_3_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_3_Handler(void)
{
    2eac:	b508      	push	{r3, lr}
	_dmac_handler();
    2eae:	4b01      	ldr	r3, [pc, #4]	; (2eb4 <DMAC_3_Handler+0x8>)
    2eb0:	4798      	blx	r3
    2eb2:	bd08      	pop	{r3, pc}
    2eb4:	00002c4d 	.word	0x00002c4d

00002eb8 <DMAC_4_Handler>:
}
/**
 * \brief DMAC interrupt handler
 */
void DMAC_4_Handler(void)
{
    2eb8:	b508      	push	{r3, lr}
	_dmac_handler();
    2eba:	4b01      	ldr	r3, [pc, #4]	; (2ec0 <DMAC_4_Handler+0x8>)
    2ebc:	4798      	blx	r3
    2ebe:	bd08      	pop	{r3, pc}
    2ec0:	00002c4d 	.word	0x00002c4d

00002ec4 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
    2ec4:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
    2ec6:	2000      	movs	r0, #0
    2ec8:	4770      	bx	lr
	...

00002ecc <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2ecc:	b430      	push	{r4, r5}
    2ece:	4814      	ldr	r0, [pc, #80]	; (2f20 <_event_system_init+0x54>)
    2ed0:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2ed4:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2ed6:	4c13      	ldr	r4, [pc, #76]	; (2f24 <_event_system_init+0x58>)
    2ed8:	1a1a      	subs	r2, r3, r0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2eda:	f813 1b01 	ldrb.w	r1, [r3], #1
    2ede:	3248      	adds	r2, #72	; 0x48
    2ee0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2ee4:	42ab      	cmp	r3, r5
    2ee6:	d1f7      	bne.n	2ed8 <_event_system_init+0xc>
    2ee8:	480d      	ldr	r0, [pc, #52]	; (2f20 <_event_system_init+0x54>)
    2eea:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2eee:	3080      	adds	r0, #128	; 0x80
    2ef0:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2ef2:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2ef6:	00ca      	lsls	r2, r1, #3
    2ef8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2efc:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2f00:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2f02:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2f06:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2f08:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2f0c:	43db      	mvns	r3, r3
    2f0e:	b2db      	uxtb	r3, r3
    2f10:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    2f14:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2f16:	2920      	cmp	r1, #32
    2f18:	d1eb      	bne.n	2ef2 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2f1a:	2000      	movs	r0, #0
    2f1c:	bc30      	pop	{r4, r5}
    2f1e:	4770      	bx	lr
    2f20:	00008530 	.word	0x00008530
    2f24:	4100e000 	.word	0x4100e000

00002f28 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2f28:	f010 0f01 	tst.w	r0, #1
    2f2c:	d008      	beq.n	2f40 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2f2e:	4a17      	ldr	r2, [pc, #92]	; (2f8c <_gclk_init_generators_by_fref+0x64>)
    2f30:	4b17      	ldr	r3, [pc, #92]	; (2f90 <_gclk_init_generators_by_fref+0x68>)
    2f32:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f34:	4619      	mov	r1, r3
    2f36:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2f3a:	684b      	ldr	r3, [r1, #4]
    2f3c:	4213      	tst	r3, r2
    2f3e:	d1fc      	bne.n	2f3a <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2f40:	f010 0f02 	tst.w	r0, #2
    2f44:	d008      	beq.n	2f58 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2f46:	4a13      	ldr	r2, [pc, #76]	; (2f94 <_gclk_init_generators_by_fref+0x6c>)
    2f48:	4b11      	ldr	r3, [pc, #68]	; (2f90 <_gclk_init_generators_by_fref+0x68>)
    2f4a:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f4c:	4619      	mov	r1, r3
    2f4e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2f52:	684b      	ldr	r3, [r1, #4]
    2f54:	4213      	tst	r3, r2
    2f56:	d1fc      	bne.n	2f52 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2f58:	f010 0f04 	tst.w	r0, #4
    2f5c:	d008      	beq.n	2f70 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2f5e:	4a0e      	ldr	r2, [pc, #56]	; (2f98 <_gclk_init_generators_by_fref+0x70>)
    2f60:	4b0b      	ldr	r3, [pc, #44]	; (2f90 <_gclk_init_generators_by_fref+0x68>)
    2f62:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f64:	4619      	mov	r1, r3
    2f66:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2f6a:	684b      	ldr	r3, [r1, #4]
    2f6c:	4213      	tst	r3, r2
    2f6e:	d1fc      	bne.n	2f6a <_gclk_init_generators_by_fref+0x42>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2f70:	f010 0f08 	tst.w	r0, #8
    2f74:	d008      	beq.n	2f88 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2f76:	4a09      	ldr	r2, [pc, #36]	; (2f9c <_gclk_init_generators_by_fref+0x74>)
    2f78:	4b05      	ldr	r3, [pc, #20]	; (2f90 <_gclk_init_generators_by_fref+0x68>)
    2f7a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f7c:	4619      	mov	r1, r3
    2f7e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    2f82:	684b      	ldr	r3, [r1, #4]
    2f84:	4213      	tst	r3, r2
    2f86:	d1fc      	bne.n	2f82 <_gclk_init_generators_by_fref+0x5a>
    2f88:	4770      	bx	lr
    2f8a:	bf00      	nop
    2f8c:	00010108 	.word	0x00010108
    2f90:	40001c00 	.word	0x40001c00
    2f94:	00010106 	.word	0x00010106
    2f98:	00100106 	.word	0x00100106
    2f9c:	00010104 	.word	0x00010104

00002fa0 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2fa0:	2201      	movs	r2, #1
    2fa2:	4b01      	ldr	r3, [pc, #4]	; (2fa8 <_mclk_init+0x8>)
    2fa4:	715a      	strb	r2, [r3, #5]
    2fa6:	4770      	bx	lr
    2fa8:	40000800 	.word	0x40000800

00002fac <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2fac:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2fae:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2fb0:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    2fb2:	f012 0f01 	tst.w	r2, #1
    2fb6:	d005      	beq.n	2fc4 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2fb8:	2201      	movs	r2, #1
    2fba:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2fbc:	6803      	ldr	r3, [r0, #0]
    2fbe:	b153      	cbz	r3, 2fd6 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2fc0:	4798      	blx	r3
    2fc2:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2fc4:	8a1a      	ldrh	r2, [r3, #16]
    2fc6:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2fc8:	b12a      	cbz	r2, 2fd6 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2fca:	f240 225e 	movw	r2, #606	; 0x25e
    2fce:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2fd0:	6843      	ldr	r3, [r0, #4]
    2fd2:	b103      	cbz	r3, 2fd6 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    2fd4:	4798      	blx	r3
    2fd6:	bd08      	pop	{r3, pc}

00002fd8 <_flash_init>:
{
    2fd8:	b538      	push	{r3, r4, r5, lr}
    2fda:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2fdc:	4605      	mov	r5, r0
    2fde:	b350      	cbz	r0, 3036 <_flash_init+0x5e>
    2fe0:	4816      	ldr	r0, [pc, #88]	; (303c <_flash_init+0x64>)
    2fe2:	4281      	cmp	r1, r0
    2fe4:	bf14      	ite	ne
    2fe6:	2000      	movne	r0, #0
    2fe8:	2001      	moveq	r0, #1
    2fea:	224b      	movs	r2, #75	; 0x4b
    2fec:	4914      	ldr	r1, [pc, #80]	; (3040 <_flash_init+0x68>)
    2fee:	4b15      	ldr	r3, [pc, #84]	; (3044 <_flash_init+0x6c>)
    2ff0:	4798      	blx	r3
	device->hw = hw;
    2ff2:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    2ff4:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    2ff6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2ffa:	049b      	lsls	r3, r3, #18
    2ffc:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2ffe:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    3000:	4b11      	ldr	r3, [pc, #68]	; (3048 <_flash_init+0x70>)
    3002:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3004:	4b11      	ldr	r3, [pc, #68]	; (304c <_flash_init+0x74>)
    3006:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    300a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    300e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3012:	f3bf 8f6f 	isb	sy
    3016:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    301a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    301e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3022:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3026:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    302a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    302e:	6019      	str	r1, [r3, #0]
    3030:	601a      	str	r2, [r3, #0]
}
    3032:	2000      	movs	r0, #0
    3034:	bd38      	pop	{r3, r4, r5, pc}
    3036:	2000      	movs	r0, #0
    3038:	e7d7      	b.n	2fea <_flash_init+0x12>
    303a:	bf00      	nop
    303c:	41004000 	.word	0x41004000
    3040:	00008634 	.word	0x00008634
    3044:	000026ad 	.word	0x000026ad
    3048:	20000474 	.word	0x20000474
    304c:	e000e100 	.word	0xe000e100

00003050 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    3050:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    3052:	4b02      	ldr	r3, [pc, #8]	; (305c <NVMCTRL_0_Handler+0xc>)
    3054:	6818      	ldr	r0, [r3, #0]
    3056:	4b02      	ldr	r3, [pc, #8]	; (3060 <NVMCTRL_0_Handler+0x10>)
    3058:	4798      	blx	r3
    305a:	bd08      	pop	{r3, pc}
    305c:	20000474 	.word	0x20000474
    3060:	00002fad 	.word	0x00002fad

00003064 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    3064:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    3066:	4b02      	ldr	r3, [pc, #8]	; (3070 <NVMCTRL_1_Handler+0xc>)
    3068:	6818      	ldr	r0, [r3, #0]
    306a:	4b02      	ldr	r3, [pc, #8]	; (3074 <NVMCTRL_1_Handler+0x10>)
    306c:	4798      	blx	r3
    306e:	bd08      	pop	{r3, pc}
    3070:	20000474 	.word	0x20000474
    3074:	00002fad 	.word	0x00002fad

00003078 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    3078:	4b03      	ldr	r3, [pc, #12]	; (3088 <_osc32kctrl_init_sources+0x10>)
    307a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    307c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    3080:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    3082:	2201      	movs	r2, #1
    3084:	741a      	strb	r2, [r3, #16]
    3086:	4770      	bx	lr
    3088:	40001400 	.word	0x40001400

0000308c <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    308c:	4770      	bx	lr
	...

00003090 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3090:	4a47      	ldr	r2, [pc, #284]	; (31b0 <_oscctrl_init_referenced_generators+0x120>)
    3092:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3094:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3098:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    309c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    309e:	4611      	mov	r1, r2
    30a0:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    30a4:	684b      	ldr	r3, [r1, #4]
    30a6:	4213      	tst	r3, r2
    30a8:	d1fc      	bne.n	30a4 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    30aa:	4a41      	ldr	r2, [pc, #260]	; (31b0 <_oscctrl_init_referenced_generators+0x120>)
    30ac:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    30ae:	f013 0f04 	tst.w	r3, #4
    30b2:	d1fb      	bne.n	30ac <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    30b4:	4b3f      	ldr	r3, [pc, #252]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    30b6:	2200      	movs	r2, #0
    30b8:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    30ba:	4a3f      	ldr	r2, [pc, #252]	; (31b8 <_oscctrl_init_referenced_generators+0x128>)
    30bc:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    30be:	461a      	mov	r2, r3
    30c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    30c4:	f013 0f10 	tst.w	r3, #16
    30c8:	d1fa      	bne.n	30c0 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    30ca:	2200      	movs	r2, #0
    30cc:	4b39      	ldr	r3, [pc, #228]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    30ce:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    30d2:	461a      	mov	r2, r3
    30d4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    30d8:	f013 0f04 	tst.w	r3, #4
    30dc:	d1fa      	bne.n	30d4 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    30de:	2202      	movs	r2, #2
    30e0:	4b34      	ldr	r3, [pc, #208]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    30e2:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    30e4:	461a      	mov	r2, r3
    30e6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    30ea:	f013 0f02 	tst.w	r3, #2
    30ee:	d1fa      	bne.n	30e6 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    30f0:	4b30      	ldr	r3, [pc, #192]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    30f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    30f4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    30f6:	461a      	mov	r2, r3
    30f8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    30fc:	f013 0f08 	tst.w	r3, #8
    3100:	d1fa      	bne.n	30f8 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3102:	2288      	movs	r2, #136	; 0x88
    3104:	4b2b      	ldr	r3, [pc, #172]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    3106:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    310a:	461a      	mov	r2, r3
    310c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3110:	f013 0f04 	tst.w	r3, #4
    3114:	d1fa      	bne.n	310c <_oscctrl_init_referenced_generators+0x7c>
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    3116:	2242      	movs	r2, #66	; 0x42
    3118:	4b25      	ldr	r3, [pc, #148]	; (31b0 <_oscctrl_init_referenced_generators+0x120>)
    311a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    311e:	2227      	movs	r2, #39	; 0x27
    3120:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    3124:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    3126:	461a      	mov	r2, r3
    3128:	6d13      	ldr	r3, [r2, #80]	; 0x50
    312a:	f013 0f06 	tst.w	r3, #6
    312e:	d1fb      	bne.n	3128 <_oscctrl_init_referenced_generators+0x98>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    3130:	4b20      	ldr	r3, [pc, #128]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    3132:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3136:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    3138:	2202      	movs	r2, #2
    313a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    313e:	461a      	mov	r2, r3
    3140:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3142:	f013 0f02 	tst.w	r3, #2
    3146:	d1fb      	bne.n	3140 <_oscctrl_init_referenced_generators+0xb0>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3148:	4b1a      	ldr	r3, [pc, #104]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    314a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    314e:	f013 0f01 	tst.w	r3, #1
    3152:	d026      	beq.n	31a2 <_oscctrl_init_referenced_generators+0x112>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3154:	4a17      	ldr	r2, [pc, #92]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    3156:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3158:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    315c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3160:	d1f9      	bne.n	3156 <_oscctrl_init_referenced_generators+0xc6>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    3162:	4b14      	ldr	r3, [pc, #80]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    3164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    3166:	f012 0f01 	tst.w	r2, #1
    316a:	d103      	bne.n	3174 <_oscctrl_init_referenced_generators+0xe4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    316c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    316e:	f012 0f02 	tst.w	r2, #2
    3172:	d0f7      	beq.n	3164 <_oscctrl_init_referenced_generators+0xd4>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3174:	4a0e      	ldr	r2, [pc, #56]	; (31b0 <_oscctrl_init_referenced_generators+0x120>)
    3176:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3178:	2b00      	cmp	r3, #0
    317a:	d1fc      	bne.n	3176 <_oscctrl_init_referenced_generators+0xe6>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    317c:	4a0c      	ldr	r2, [pc, #48]	; (31b0 <_oscctrl_init_referenced_generators+0x120>)
    317e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3180:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3184:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3188:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    318a:	4611      	mov	r1, r2
    318c:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    3190:	684b      	ldr	r3, [r1, #4]
    3192:	4213      	tst	r3, r2
    3194:	d1fc      	bne.n	3190 <_oscctrl_init_referenced_generators+0x100>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    3196:	4a06      	ldr	r2, [pc, #24]	; (31b0 <_oscctrl_init_referenced_generators+0x120>)
    3198:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    319a:	f013 0f04 	tst.w	r3, #4
    319e:	d1fb      	bne.n	3198 <_oscctrl_init_referenced_generators+0x108>
		;
#endif
	(void)hw;
}
    31a0:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    31a2:	4a04      	ldr	r2, [pc, #16]	; (31b4 <_oscctrl_init_referenced_generators+0x124>)
    31a4:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    31a6:	f413 7f80 	tst.w	r3, #256	; 0x100
    31aa:	d0fb      	beq.n	31a4 <_oscctrl_init_referenced_generators+0x114>
    31ac:	e7d9      	b.n	3162 <_oscctrl_init_referenced_generators+0xd2>
    31ae:	bf00      	nop
    31b0:	40001c00 	.word	0x40001c00
    31b4:	40001000 	.word	0x40001000
    31b8:	04010000 	.word	0x04010000

000031bc <_qspi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
    31bc:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    31be:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    31c0:	681a      	ldr	r2, [r3, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    31c2:	4903      	ldr	r1, [pc, #12]	; (31d0 <_qspi_dma_rx_complete+0x14>)
    31c4:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    31c6:	685b      	ldr	r3, [r3, #4]
    31c8:	b103      	cbz	r3, 31cc <_qspi_dma_rx_complete+0x10>
		dev->cb.xfer_done(resource);
    31ca:	4798      	blx	r3
    31cc:	bd08      	pop	{r3, pc}
    31ce:	bf00      	nop
    31d0:	01000002 	.word	0x01000002

000031d4 <_qspi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_tx_complete(struct _dma_resource *resource)
{
    31d4:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    31d6:	6883      	ldr	r3, [r0, #8]

	_qspi_end_transfer(dev->prvt);
    31d8:	681a      	ldr	r2, [r3, #0]
    31da:	4903      	ldr	r1, [pc, #12]	; (31e8 <_qspi_dma_tx_complete+0x14>)
    31dc:	6011      	str	r1, [r2, #0]

	if (dev->cb.xfer_done) {
    31de:	685b      	ldr	r3, [r3, #4]
    31e0:	b103      	cbz	r3, 31e4 <_qspi_dma_tx_complete+0x10>
		dev->cb.xfer_done(resource);
    31e2:	4798      	blx	r3
    31e4:	bd08      	pop	{r3, pc}
    31e6:	bf00      	nop
    31e8:	01000002 	.word	0x01000002

000031ec <_qspi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
    31ec:	b508      	push	{r3, lr}
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    31ee:	6883      	ldr	r3, [r0, #8]
    31f0:	689b      	ldr	r3, [r3, #8]
    31f2:	b103      	cbz	r3, 31f6 <_qspi_dma_error_occured+0xa>
		dev->cb.error(resource);
    31f4:	4798      	blx	r3
    31f6:	bd08      	pop	{r3, pc}

000031f8 <_qspi_dma_init>:
	}
}

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    31f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31fa:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    31fc:	4604      	mov	r4, r0
    31fe:	2800      	cmp	r0, #0
    3200:	d027      	beq.n	3252 <_qspi_dma_init+0x5a>
    3202:	1c08      	adds	r0, r1, #0
    3204:	bf18      	it	ne
    3206:	2001      	movne	r0, #1
    3208:	22cb      	movs	r2, #203	; 0xcb
    320a:	4913      	ldr	r1, [pc, #76]	; (3258 <_qspi_dma_init+0x60>)
    320c:	4b13      	ldr	r3, [pc, #76]	; (325c <_qspi_dma_init+0x64>)
    320e:	4798      	blx	r3
	dev->prvt = hw;
    3210:	4626      	mov	r6, r4
    3212:	f846 5b0c 	str.w	r5, [r6], #12
    3216:	2301      	movs	r3, #1
    3218:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    321a:	4b11      	ldr	r3, [pc, #68]	; (3260 <_qspi_dma_init+0x68>)
    321c:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    321e:	4b11      	ldr	r3, [pc, #68]	; (3264 <_qspi_dma_init+0x6c>)
    3220:	60ab      	str	r3, [r5, #8]
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    3222:	211f      	movs	r1, #31
    3224:	4630      	mov	r0, r6
    3226:	4f10      	ldr	r7, [pc, #64]	; (3268 <_qspi_dma_init+0x70>)
    3228:	47b8      	blx	r7
	dev->resource->back                 = dev;
    322a:	68e3      	ldr	r3, [r4, #12]
    322c:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    322e:	68e3      	ldr	r3, [r4, #12]
    3230:	4a0e      	ldr	r2, [pc, #56]	; (326c <_qspi_dma_init+0x74>)
    3232:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    3234:	68e3      	ldr	r3, [r4, #12]
    3236:	4d0e      	ldr	r5, [pc, #56]	; (3270 <_qspi_dma_init+0x78>)
    3238:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    323a:	211e      	movs	r1, #30
    323c:	4630      	mov	r0, r6
    323e:	47b8      	blx	r7
	dev->resource->back                 = dev;
    3240:	68e3      	ldr	r3, [r4, #12]
    3242:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    3244:	68e3      	ldr	r3, [r4, #12]
    3246:	4a0b      	ldr	r2, [pc, #44]	; (3274 <_qspi_dma_init+0x7c>)
    3248:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    324a:	68e3      	ldr	r3, [r4, #12]
    324c:	605d      	str	r5, [r3, #4]

	return ERR_NONE;
}
    324e:	2000      	movs	r0, #0
    3250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3252:	2000      	movs	r0, #0
    3254:	e7d8      	b.n	3208 <_qspi_dma_init+0x10>
    3256:	bf00      	nop
    3258:	00008654 	.word	0x00008654
    325c:	000026ad 	.word	0x000026ad
    3260:	06000011 	.word	0x06000011
    3264:	00243b00 	.word	0x00243b00
    3268:	00002e75 	.word	0x00002e75
    326c:	000031bd 	.word	0x000031bd
    3270:	000031ed 	.word	0x000031ed
    3274:	000031d5 	.word	0x000031d5

00003278 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    3278:	b500      	push	{lr}
    327a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    327c:	4b0d      	ldr	r3, [pc, #52]	; (32b4 <RAMECC_Handler+0x3c>)
    327e:	789b      	ldrb	r3, [r3, #2]
    3280:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    3282:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    3284:	9b01      	ldr	r3, [sp, #4]
    3286:	f013 0f02 	tst.w	r3, #2
    328a:	d006      	beq.n	329a <RAMECC_Handler+0x22>
    328c:	4b0a      	ldr	r3, [pc, #40]	; (32b8 <RAMECC_Handler+0x40>)
    328e:	681b      	ldr	r3, [r3, #0]
    3290:	b11b      	cbz	r3, 329a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    3292:	4a08      	ldr	r2, [pc, #32]	; (32b4 <RAMECC_Handler+0x3c>)
    3294:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3296:	4798      	blx	r3
    3298:	e009      	b.n	32ae <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    329a:	9b01      	ldr	r3, [sp, #4]
    329c:	f013 0f01 	tst.w	r3, #1
    32a0:	d005      	beq.n	32ae <RAMECC_Handler+0x36>
    32a2:	4b05      	ldr	r3, [pc, #20]	; (32b8 <RAMECC_Handler+0x40>)
    32a4:	685b      	ldr	r3, [r3, #4]
    32a6:	b113      	cbz	r3, 32ae <RAMECC_Handler+0x36>
    32a8:	4a02      	ldr	r2, [pc, #8]	; (32b4 <RAMECC_Handler+0x3c>)
    32aa:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    32ac:	4798      	blx	r3
	} else {
		return;
	}
}
    32ae:	b003      	add	sp, #12
    32b0:	f85d fb04 	ldr.w	pc, [sp], #4
    32b4:	41020000 	.word	0x41020000
    32b8:	200034e0 	.word	0x200034e0

000032bc <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    32bc:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    32be:	6211      	str	r1, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    32c0:	6913      	ldr	r3, [r2, #16]
    32c2:	f013 0f60 	tst.w	r3, #96	; 0x60
    32c6:	d1fb      	bne.n	32c0 <_rtc_timer_set_period+0x4>
}
    32c8:	4770      	bx	lr

000032ca <_rtc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    32ca:	68c2      	ldr	r2, [r0, #12]
    32cc:	6913      	ldr	r3, [r2, #16]
    32ce:	f013 0f60 	tst.w	r3, #96	; 0x60
    32d2:	d1fb      	bne.n	32cc <_rtc_timer_get_period+0x2>
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    32d4:	6a10      	ldr	r0, [r2, #32]
}
    32d6:	4770      	bx	lr

000032d8 <_rtc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    32d8:	68c2      	ldr	r2, [r0, #12]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    32da:	f248 0103 	movw	r1, #32771	; 0x8003
    32de:	6913      	ldr	r3, [r2, #16]
    32e0:	420b      	tst	r3, r1
    32e2:	d1fc      	bne.n	32de <_rtc_timer_is_started+0x6>
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    32e4:	8810      	ldrh	r0, [r2, #0]
}
    32e6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    32ea:	4770      	bx	lr

000032ec <_rtc_timer_set_irq>:

/**
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
    32ec:	4770      	bx	lr
	...

000032f0 <_rtc_timer_init>:
{
    32f0:	b538      	push	{r3, r4, r5, lr}
    32f2:	460c      	mov	r4, r1
	ASSERT(dev);
    32f4:	4605      	mov	r5, r0
    32f6:	2230      	movs	r2, #48	; 0x30
    32f8:	4914      	ldr	r1, [pc, #80]	; (334c <_rtc_timer_init+0x5c>)
    32fa:	3000      	adds	r0, #0
    32fc:	bf18      	it	ne
    32fe:	2001      	movne	r0, #1
    3300:	4b13      	ldr	r3, [pc, #76]	; (3350 <_rtc_timer_init+0x60>)
    3302:	4798      	blx	r3
	dev->hw = hw;
    3304:	60ec      	str	r4, [r5, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    3306:	2301      	movs	r3, #1
    3308:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    330a:	f248 0203 	movw	r2, #32771	; 0x8003
    330e:	6923      	ldr	r3, [r4, #16]
    3310:	4213      	tst	r3, r2
    3312:	d1fc      	bne.n	330e <_rtc_timer_init+0x1e>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    3314:	68eb      	ldr	r3, [r5, #12]
    3316:	691a      	ldr	r2, [r3, #16]
    3318:	f012 0f01 	tst.w	r2, #1
    331c:	d1fb      	bne.n	3316 <_rtc_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    331e:	f248 0280 	movw	r2, #32896	; 0x8080
    3322:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3324:	f248 0103 	movw	r1, #32771	; 0x8003
    3328:	691a      	ldr	r2, [r3, #16]
    332a:	420a      	tst	r2, r1
    332c:	d1fc      	bne.n	3328 <_rtc_timer_init+0x38>
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    332e:	68ea      	ldr	r2, [r5, #12]
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    3330:	2301      	movs	r3, #1
    3332:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3334:	6913      	ldr	r3, [r2, #16]
    3336:	f013 0f60 	tst.w	r3, #96	; 0x60
    333a:	d1fb      	bne.n	3334 <_rtc_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    333c:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    333e:	f44f 7280 	mov.w	r2, #256	; 0x100
    3342:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    3344:	4b03      	ldr	r3, [pc, #12]	; (3354 <_rtc_timer_init+0x64>)
    3346:	601d      	str	r5, [r3, #0]
}
    3348:	2000      	movs	r0, #0
    334a:	bd38      	pop	{r3, r4, r5, pc}
    334c:	0000866c 	.word	0x0000866c
    3350:	000026ad 	.word	0x000026ad
    3354:	20000478 	.word	0x20000478

00003358 <_rtc_timer_deinit>:
{
    3358:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    335a:	4604      	mov	r4, r0
    335c:	b1c8      	cbz	r0, 3392 <_rtc_timer_deinit+0x3a>
    335e:	68c0      	ldr	r0, [r0, #12]
    3360:	3000      	adds	r0, #0
    3362:	bf18      	it	ne
    3364:	2001      	movne	r0, #1
    3366:	2252      	movs	r2, #82	; 0x52
    3368:	490b      	ldr	r1, [pc, #44]	; (3398 <_rtc_timer_deinit+0x40>)
    336a:	4b0c      	ldr	r3, [pc, #48]	; (339c <_rtc_timer_deinit+0x44>)
    336c:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    336e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3372:	4b0b      	ldr	r3, [pc, #44]	; (33a0 <_rtc_timer_deinit+0x48>)
    3374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3378:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    337c:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    3380:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    3382:	2301      	movs	r3, #1
    3384:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3386:	f248 0103 	movw	r1, #32771	; 0x8003
    338a:	6913      	ldr	r3, [r2, #16]
    338c:	420b      	tst	r3, r1
    338e:	d1fc      	bne.n	338a <_rtc_timer_deinit+0x32>
}
    3390:	bd10      	pop	{r4, pc}
    3392:	2000      	movs	r0, #0
    3394:	e7e7      	b.n	3366 <_rtc_timer_deinit+0xe>
    3396:	bf00      	nop
    3398:	0000866c 	.word	0x0000866c
    339c:	000026ad 	.word	0x000026ad
    33a0:	e000e100 	.word	0xe000e100

000033a4 <_rtc_timer_start>:
{
    33a4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    33a6:	4604      	mov	r4, r0
    33a8:	b310      	cbz	r0, 33f0 <_rtc_timer_start+0x4c>
    33aa:	68c0      	ldr	r0, [r0, #12]
    33ac:	3000      	adds	r0, #0
    33ae:	bf18      	it	ne
    33b0:	2001      	movne	r0, #1
    33b2:	225e      	movs	r2, #94	; 0x5e
    33b4:	490f      	ldr	r1, [pc, #60]	; (33f4 <_rtc_timer_start+0x50>)
    33b6:	4b10      	ldr	r3, [pc, #64]	; (33f8 <_rtc_timer_start+0x54>)
    33b8:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    33ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    33be:	4b0f      	ldr	r3, [pc, #60]	; (33fc <_rtc_timer_start+0x58>)
    33c0:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    33c2:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    33c4:	2300      	movs	r3, #0
    33c6:	6193      	str	r3, [r2, #24]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    33c8:	6913      	ldr	r3, [r2, #16]
    33ca:	f013 0f08 	tst.w	r3, #8
    33ce:	d1fb      	bne.n	33c8 <_rtc_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    33d0:	68e3      	ldr	r3, [r4, #12]
    33d2:	691a      	ldr	r2, [r3, #16]
    33d4:	f012 0f08 	tst.w	r2, #8
    33d8:	d1fb      	bne.n	33d2 <_rtc_timer_start+0x2e>
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    33da:	881a      	ldrh	r2, [r3, #0]
    33dc:	b292      	uxth	r2, r2
    33de:	f042 0202 	orr.w	r2, r2, #2
    33e2:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    33e4:	f248 0103 	movw	r1, #32771	; 0x8003
    33e8:	691a      	ldr	r2, [r3, #16]
    33ea:	420a      	tst	r2, r1
    33ec:	d1fc      	bne.n	33e8 <_rtc_timer_start+0x44>
}
    33ee:	bd10      	pop	{r4, pc}
    33f0:	2000      	movs	r0, #0
    33f2:	e7de      	b.n	33b2 <_rtc_timer_start+0xe>
    33f4:	0000866c 	.word	0x0000866c
    33f8:	000026ad 	.word	0x000026ad
    33fc:	e000e100 	.word	0xe000e100

00003400 <_rtc_timer_stop>:
{
    3400:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    3402:	4604      	mov	r4, r0
    3404:	b1a0      	cbz	r0, 3430 <_rtc_timer_stop+0x30>
    3406:	68c0      	ldr	r0, [r0, #12]
    3408:	3000      	adds	r0, #0
    340a:	bf18      	it	ne
    340c:	2001      	movne	r0, #1
    340e:	226b      	movs	r2, #107	; 0x6b
    3410:	4908      	ldr	r1, [pc, #32]	; (3434 <_rtc_timer_stop+0x34>)
    3412:	4b09      	ldr	r3, [pc, #36]	; (3438 <_rtc_timer_stop+0x38>)
    3414:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    3416:	68e2      	ldr	r2, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    3418:	8813      	ldrh	r3, [r2, #0]
    341a:	f023 0302 	bic.w	r3, r3, #2
    341e:	041b      	lsls	r3, r3, #16
    3420:	0c1b      	lsrs	r3, r3, #16
    3422:	8013      	strh	r3, [r2, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    3424:	f248 0103 	movw	r1, #32771	; 0x8003
    3428:	6913      	ldr	r3, [r2, #16]
    342a:	420b      	tst	r3, r1
    342c:	d1fc      	bne.n	3428 <_rtc_timer_stop+0x28>
}
    342e:	bd10      	pop	{r4, pc}
    3430:	2000      	movs	r0, #0
    3432:	e7ec      	b.n	340e <_rtc_timer_stop+0xe>
    3434:	0000866c 	.word	0x0000866c
    3438:	000026ad 	.word	0x000026ad

0000343c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    343c:	4800      	ldr	r0, [pc, #0]	; (3440 <_rtc_get_timer+0x4>)
    343e:	4770      	bx	lr
    3440:	20000000 	.word	0x20000000

00003444 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    3444:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    3446:	4b08      	ldr	r3, [pc, #32]	; (3468 <RTC_Handler+0x24>)
    3448:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    344a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    344c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    344e:	f413 7f80 	tst.w	r3, #256	; 0x100
    3452:	d007      	beq.n	3464 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    3454:	6823      	ldr	r3, [r4, #0]
    3456:	b10b      	cbz	r3, 345c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    3458:	4620      	mov	r0, r4
    345a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    345c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    345e:	f44f 7280 	mov.w	r2, #256	; 0x100
    3462:	819a      	strh	r2, [r3, #12]
    3464:	bd10      	pop	{r4, pc}
    3466:	bf00      	nop
    3468:	20000478 	.word	0x20000478

0000346c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    346c:	b470      	push	{r4, r5, r6}
    346e:	b089      	sub	sp, #36	; 0x24
    3470:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    3472:	466c      	mov	r4, sp
    3474:	4d0d      	ldr	r5, [pc, #52]	; (34ac <_sercom_get_hardware_index+0x40>)
    3476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    347a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    347e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3482:	9b00      	ldr	r3, [sp, #0]
    3484:	42b3      	cmp	r3, r6
    3486:	d00d      	beq.n	34a4 <_sercom_get_hardware_index+0x38>
    3488:	4631      	mov	r1, r6
    348a:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    348c:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    348e:	f853 2b04 	ldr.w	r2, [r3], #4
    3492:	428a      	cmp	r2, r1
    3494:	d007      	beq.n	34a6 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3496:	3001      	adds	r0, #1
    3498:	2808      	cmp	r0, #8
    349a:	d1f8      	bne.n	348e <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    349c:	2000      	movs	r0, #0
}
    349e:	b009      	add	sp, #36	; 0x24
    34a0:	bc70      	pop	{r4, r5, r6}
    34a2:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    34a4:	2000      	movs	r0, #0
			return i;
    34a6:	b2c0      	uxtb	r0, r0
    34a8:	e7f9      	b.n	349e <_sercom_get_hardware_index+0x32>
    34aa:	bf00      	nop
    34ac:	00008684 	.word	0x00008684

000034b0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    34b0:	b510      	push	{r4, lr}
	void *hw = device->hw;
    34b2:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    34b4:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    34b6:	f013 0f01 	tst.w	r3, #1
    34ba:	d003      	beq.n	34c4 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    34bc:	7da3      	ldrb	r3, [r4, #22]
    34be:	f013 0f01 	tst.w	r3, #1
    34c2:	d112      	bne.n	34ea <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    34c4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    34c6:	f013 0f02 	tst.w	r3, #2
    34ca:	d003      	beq.n	34d4 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    34cc:	7da3      	ldrb	r3, [r4, #22]
    34ce:	f013 0f02 	tst.w	r3, #2
    34d2:	d10f      	bne.n	34f4 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    34d4:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    34d6:	f013 0f04 	tst.w	r3, #4
    34da:	d015      	beq.n	3508 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    34dc:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    34de:	f003 0337 	and.w	r3, r3, #55	; 0x37
    34e2:	b163      	cbz	r3, 34fe <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    34e4:	23ff      	movs	r3, #255	; 0xff
    34e6:	8363      	strh	r3, [r4, #26]
    34e8:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    34ea:	2301      	movs	r3, #1
    34ec:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    34ee:	6803      	ldr	r3, [r0, #0]
    34f0:	4798      	blx	r3
    34f2:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    34f4:	2302      	movs	r3, #2
    34f6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    34f8:	6883      	ldr	r3, [r0, #8]
    34fa:	4798      	blx	r3
    34fc:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    34fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    3500:	6843      	ldr	r3, [r0, #4]
    3502:	b2c9      	uxtb	r1, r1
    3504:	4798      	blx	r3
    3506:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3508:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    350a:	09db      	lsrs	r3, r3, #7
    350c:	d100      	bne.n	3510 <_sercom_usart_interrupt_handler+0x60>
    350e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    3510:	2380      	movs	r3, #128	; 0x80
    3512:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    3514:	68c3      	ldr	r3, [r0, #12]
    3516:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    3518:	8b63      	ldrh	r3, [r4, #26]
    351a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    351c:	8363      	strh	r3, [r4, #26]
    351e:	e7f6      	b.n	350e <_sercom_usart_interrupt_handler+0x5e>

00003520 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    3520:	4b11      	ldr	r3, [pc, #68]	; (3568 <_sercom_init_irq_param+0x48>)
    3522:	4298      	cmp	r0, r3
    3524:	d011      	beq.n	354a <_sercom_init_irq_param+0x2a>
		_sercom0_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM1) {
    3526:	4b11      	ldr	r3, [pc, #68]	; (356c <_sercom_init_irq_param+0x4c>)
    3528:	4298      	cmp	r0, r3
    352a:	d011      	beq.n	3550 <_sercom_init_irq_param+0x30>
		_sercom1_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM3) {
    352c:	4b10      	ldr	r3, [pc, #64]	; (3570 <_sercom_init_irq_param+0x50>)
    352e:	4298      	cmp	r0, r3
    3530:	d011      	beq.n	3556 <_sercom_init_irq_param+0x36>
		_sercom3_dev = (struct _spi_async_dev *)dev;
	}

	if (hw == SERCOM4) {
    3532:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    3536:	d011      	beq.n	355c <_sercom_init_irq_param+0x3c>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}

	if (hw == SERCOM5) {
    3538:	4b0e      	ldr	r3, [pc, #56]	; (3574 <_sercom_init_irq_param+0x54>)
    353a:	4298      	cmp	r0, r3
    353c:	d011      	beq.n	3562 <_sercom_init_irq_param+0x42>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    353e:	4b0e      	ldr	r3, [pc, #56]	; (3578 <_sercom_init_irq_param+0x58>)
    3540:	4298      	cmp	r0, r3
		_sercom6_dev = (struct _usart_async_device *)dev;
    3542:	bf04      	itt	eq
    3544:	4b0d      	ldreq	r3, [pc, #52]	; (357c <_sercom_init_irq_param+0x5c>)
    3546:	6159      	streq	r1, [r3, #20]
    3548:	4770      	bx	lr
		_sercom0_dev = (struct _usart_async_device *)dev;
    354a:	4b0c      	ldr	r3, [pc, #48]	; (357c <_sercom_init_irq_param+0x5c>)
    354c:	6019      	str	r1, [r3, #0]
    354e:	e7f0      	b.n	3532 <_sercom_init_irq_param+0x12>
		_sercom1_dev = (struct _usart_async_device *)dev;
    3550:	4b0a      	ldr	r3, [pc, #40]	; (357c <_sercom_init_irq_param+0x5c>)
    3552:	6059      	str	r1, [r3, #4]
    3554:	e7f0      	b.n	3538 <_sercom_init_irq_param+0x18>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    3556:	4b09      	ldr	r3, [pc, #36]	; (357c <_sercom_init_irq_param+0x5c>)
    3558:	6099      	str	r1, [r3, #8]
    355a:	e7f0      	b.n	353e <_sercom_init_irq_param+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
    355c:	4b07      	ldr	r3, [pc, #28]	; (357c <_sercom_init_irq_param+0x5c>)
    355e:	60d9      	str	r1, [r3, #12]
    3560:	4770      	bx	lr
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    3562:	4b06      	ldr	r3, [pc, #24]	; (357c <_sercom_init_irq_param+0x5c>)
    3564:	6119      	str	r1, [r3, #16]
    3566:	4770      	bx	lr
    3568:	40003000 	.word	0x40003000
    356c:	40003400 	.word	0x40003400
    3570:	41014000 	.word	0x41014000
    3574:	43000400 	.word	0x43000400
    3578:	43000800 	.word	0x43000800
    357c:	2000047c 	.word	0x2000047c

00003580 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3580:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    3582:	4b03      	ldr	r3, [pc, #12]	; (3590 <_sercom_get_irq_num+0x10>)
    3584:	4798      	blx	r3
    3586:	0080      	lsls	r0, r0, #2
    3588:	302e      	adds	r0, #46	; 0x2e
}
    358a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    358e:	bd08      	pop	{r3, pc}
    3590:	0000346d 	.word	0x0000346d

00003594 <_spi_handler>:
/**
 *  \brief IRQ handler used
 *  \param[in, out] p Pointer to SPI device instance.
 */
static void _spi_handler(struct _spi_async_dev *dev)
{
    3594:	b508      	push	{r3, lr}
	void *                      hw = dev->prvt;
    3596:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    3598:	7e11      	ldrb	r1, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
    359a:	7d93      	ldrb	r3, [r2, #22]
	hri_sercomspi_intflag_reg_t st;

	st = hri_sercomspi_read_INTFLAG_reg(hw);
	st &= hri_sercomspi_read_INTEN_reg(hw);
    359c:	400b      	ands	r3, r1

	if (st & SERCOM_SPI_INTFLAG_DRE) {
    359e:	f013 0f01 	tst.w	r3, #1
    35a2:	d109      	bne.n	35b8 <_spi_handler+0x24>
		dev->callbacks.tx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
    35a4:	f013 0f04 	tst.w	r3, #4
    35a8:	d109      	bne.n	35be <_spi_handler+0x2a>
		dev->callbacks.rx(dev);
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
    35aa:	f013 0f02 	tst.w	r3, #2
    35ae:	d109      	bne.n	35c4 <_spi_handler+0x30>
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC);
		dev->callbacks.complete(dev);
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
    35b0:	f013 0f80 	tst.w	r3, #128	; 0x80
    35b4:	d10b      	bne.n	35ce <_spi_handler+0x3a>
    35b6:	bd08      	pop	{r3, pc}
		dev->callbacks.tx(dev);
    35b8:	6883      	ldr	r3, [r0, #8]
    35ba:	4798      	blx	r3
    35bc:	bd08      	pop	{r3, pc}
		dev->callbacks.rx(dev);
    35be:	68c3      	ldr	r3, [r0, #12]
    35c0:	4798      	blx	r3
    35c2:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    35c4:	2302      	movs	r3, #2
    35c6:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
    35c8:	6903      	ldr	r3, [r0, #16]
    35ca:	4798      	blx	r3
    35cc:	bd08      	pop	{r3, pc}
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    35ce:	2304      	movs	r3, #4
    35d0:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    35d2:	2380      	movs	r3, #128	; 0x80
    35d4:	7613      	strb	r3, [r2, #24]
		hri_sercomspi_clear_STATUS_reg(hw, SERCOM_SPI_STATUS_BUFOVF);
		hri_sercomspi_clear_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_ERROR);
		dev->callbacks.err(dev, ERR_OVERFLOW);
    35d6:	6943      	ldr	r3, [r0, #20]
    35d8:	f06f 0112 	mvn.w	r1, #18
    35dc:	4798      	blx	r3
	}
}
    35de:	e7ea      	b.n	35b6 <_spi_handler+0x22>

000035e0 <_spi_get_tx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI TX DMA channel index.
 */
static uint8_t _spi_get_tx_dma_channel(const void *const hw)
{
    35e0:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    35e2:	4b03      	ldr	r3, [pc, #12]	; (35f0 <_spi_get_tx_dma_channel+0x10>)
    35e4:	4798      	blx	r3

	switch (index) {
	case 0:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
    35e6:	2807      	cmp	r0, #7
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    35e8:	bf0c      	ite	eq
    35ea:	2008      	moveq	r0, #8
    35ec:	2000      	movne	r0, #0
    35ee:	bd08      	pop	{r3, pc}
    35f0:	0000346d 	.word	0x0000346d

000035f4 <_spi_get_rx_dma_channel>:
 *  \param[in] hw_addr The hardware register base address
 *
 *  \return SPI RX DMA channel index.
 */
static uint8_t _spi_get_rx_dma_channel(const void *const hw)
{
    35f4:	b508      	push	{r3, lr}
	uint8_t index = _sercom_get_hardware_index(hw);
    35f6:	4b03      	ldr	r3, [pc, #12]	; (3604 <_spi_get_rx_dma_channel+0x10>)
    35f8:	4798      	blx	r3
	case 7:
		return CONF_SERCOM_7_SPI_M_DMA_RX_CHANNEL;
	default:
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
	}
}
    35fa:	2807      	cmp	r0, #7
    35fc:	bf8c      	ite	hi
    35fe:	2000      	movhi	r0, #0
    3600:	2001      	movls	r0, #1
    3602:	bd08      	pop	{r3, pc}
    3604:	0000346d 	.word	0x0000346d

00003608 <_spi_dma_rx_complete>:
/**
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_rx_complete(struct _dma_resource *resource)
{
    3608:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.rx) {
    360a:	6883      	ldr	r3, [r0, #8]
    360c:	689b      	ldr	r3, [r3, #8]
    360e:	b103      	cbz	r3, 3612 <_spi_dma_rx_complete+0xa>
		dev->callbacks.rx(resource);
    3610:	4798      	blx	r3
    3612:	bd08      	pop	{r3, pc}

00003614 <_spi_dma_tx_complete>:
/**
 *  \brief Callback for TX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
    3614:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    3616:	6883      	ldr	r3, [r0, #8]
    3618:	685b      	ldr	r3, [r3, #4]
    361a:	b103      	cbz	r3, 361e <_spi_dma_tx_complete+0xa>
		dev->callbacks.tx(resource);
    361c:	4798      	blx	r3
    361e:	bd08      	pop	{r3, pc}

00003620 <_spi_dma_error_occured>:
/**
 *  \brief Callback for ERROR
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
    3620:	b508      	push	{r3, lr}
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    3622:	6883      	ldr	r3, [r0, #8]
    3624:	68db      	ldr	r3, [r3, #12]
    3626:	b103      	cbz	r3, 362a <_spi_dma_error_occured+0xa>
		dev->callbacks.error(resource);
    3628:	4798      	blx	r3
    362a:	bd08      	pop	{r3, pc}

0000362c <_usart_init>:
{
    362c:	b510      	push	{r4, lr}
    362e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3630:	4b48      	ldr	r3, [pc, #288]	; (3754 <_usart_init+0x128>)
    3632:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    3634:	2800      	cmp	r0, #0
    3636:	d06a      	beq.n	370e <_usart_init+0xe2>
    3638:	2801      	cmp	r0, #1
    363a:	d062      	beq.n	3702 <_usart_init+0xd6>
    363c:	2802      	cmp	r0, #2
    363e:	d062      	beq.n	3706 <_usart_init+0xda>
    3640:	2804      	cmp	r0, #4
    3642:	d062      	beq.n	370a <_usart_init+0xde>
    3644:	2806      	cmp	r0, #6
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3646:	bf08      	it	eq
    3648:	2104      	moveq	r1, #4
		if (_usarts[i].number == sercom_offset) {
    364a:	d006      	beq.n	365a <_usart_init+0x2e>
	ASSERT(false);
    364c:	f240 2276 	movw	r2, #630	; 0x276
    3650:	4941      	ldr	r1, [pc, #260]	; (3758 <_usart_init+0x12c>)
    3652:	2000      	movs	r0, #0
    3654:	4b41      	ldr	r3, [pc, #260]	; (375c <_usart_init+0x130>)
    3656:	4798      	blx	r3
	return 0;
    3658:	2100      	movs	r1, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    365a:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    365c:	f013 0f01 	tst.w	r3, #1
    3660:	d122      	bne.n	36a8 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    3662:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    3666:	4a3e      	ldr	r2, [pc, #248]	; (3760 <_usart_init+0x134>)
    3668:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    366c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    366e:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3672:	69e3      	ldr	r3, [r4, #28]
    3674:	f013 0f03 	tst.w	r3, #3
    3678:	d1fb      	bne.n	3672 <_usart_init+0x46>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    367a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    367c:	f013 0f02 	tst.w	r3, #2
    3680:	d00b      	beq.n	369a <_usart_init+0x6e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3682:	6823      	ldr	r3, [r4, #0]
    3684:	f023 0302 	bic.w	r3, r3, #2
    3688:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    368a:	69e3      	ldr	r3, [r4, #28]
    368c:	f013 0f03 	tst.w	r3, #3
    3690:	d1fb      	bne.n	368a <_usart_init+0x5e>
    3692:	69e3      	ldr	r3, [r4, #28]
    3694:	f013 0f02 	tst.w	r3, #2
    3698:	d1fb      	bne.n	3692 <_usart_init+0x66>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    369a:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    369e:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    36a0:	69e3      	ldr	r3, [r4, #28]
    36a2:	f013 0f03 	tst.w	r3, #3
    36a6:	d1fb      	bne.n	36a0 <_usart_init+0x74>
    36a8:	69e3      	ldr	r3, [r4, #28]
    36aa:	f013 0f01 	tst.w	r3, #1
    36ae:	d1fb      	bne.n	36a8 <_usart_init+0x7c>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    36b0:	460a      	mov	r2, r1
    36b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    36b6:	4b2a      	ldr	r3, [pc, #168]	; (3760 <_usart_init+0x134>)
    36b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    36bc:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    36be:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    36c0:	69e3      	ldr	r3, [r4, #28]
    36c2:	f013 0f03 	tst.w	r3, #3
    36c6:	d1fb      	bne.n	36c0 <_usart_init+0x94>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    36c8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    36cc:	4924      	ldr	r1, [pc, #144]	; (3760 <_usart_init+0x134>)
    36ce:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    36d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    36d4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    36d6:	69e3      	ldr	r3, [r4, #28]
    36d8:	f013 0f1f 	tst.w	r3, #31
    36dc:	d1fb      	bne.n	36d6 <_usart_init+0xaa>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    36de:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    36e2:	491f      	ldr	r1, [pc, #124]	; (3760 <_usart_init+0x134>)
    36e4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    36e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    36ea:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    36ec:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    36f0:	d10f      	bne.n	3712 <_usart_init+0xe6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    36f2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    36f6:	491a      	ldr	r1, [pc, #104]	; (3760 <_usart_init+0x134>)
    36f8:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    36fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    36fe:	81a3      	strh	r3, [r4, #12]
    3700:	e016      	b.n	3730 <_usart_init+0x104>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3702:	2101      	movs	r1, #1
    3704:	e7a9      	b.n	365a <_usart_init+0x2e>
    3706:	2102      	movs	r1, #2
    3708:	e7a7      	b.n	365a <_usart_init+0x2e>
    370a:	2103      	movs	r1, #3
    370c:	e7a5      	b.n	365a <_usart_init+0x2e>
    370e:	2100      	movs	r1, #0
    3710:	e7a3      	b.n	365a <_usart_init+0x2e>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3712:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3716:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    371a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    371c:	89a1      	ldrh	r1, [r4, #12]
    371e:	f360 010c 	bfi	r1, r0, #0, #13
    3722:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3724:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    3728:	89a3      	ldrh	r3, [r4, #12]
    372a:	f361 334f 	bfi	r3, r1, #13, #3
    372e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3730:	4b0b      	ldr	r3, [pc, #44]	; (3760 <_usart_init+0x134>)
    3732:	0051      	lsls	r1, r2, #1
    3734:	1888      	adds	r0, r1, r2
    3736:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    373a:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    373e:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3740:	440a      	add	r2, r1
    3742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    374a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    374e:	2000      	movs	r0, #0
    3750:	bd10      	pop	{r4, pc}
    3752:	bf00      	nop
    3754:	0000346d 	.word	0x0000346d
    3758:	00008758 	.word	0x00008758
    375c:	000026ad 	.word	0x000026ad
    3760:	00008684 	.word	0x00008684

00003764 <_get_i2cm_index>:
{
    3764:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3766:	4b07      	ldr	r3, [pc, #28]	; (3784 <_get_i2cm_index+0x20>)
    3768:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    376a:	2805      	cmp	r0, #5
    376c:	d008      	beq.n	3780 <_get_i2cm_index+0x1c>
	ASSERT(false);
    376e:	f240 32ed 	movw	r2, #1005	; 0x3ed
    3772:	4905      	ldr	r1, [pc, #20]	; (3788 <_get_i2cm_index+0x24>)
    3774:	2000      	movs	r0, #0
    3776:	4b05      	ldr	r3, [pc, #20]	; (378c <_get_i2cm_index+0x28>)
    3778:	4798      	blx	r3
	return -1;
    377a:	f04f 30ff 	mov.w	r0, #4294967295
}
    377e:	bd08      	pop	{r3, pc}
			return i;
    3780:	2000      	movs	r0, #0
    3782:	bd08      	pop	{r3, pc}
    3784:	0000346d 	.word	0x0000346d
    3788:	00008758 	.word	0x00008758
    378c:	000026ad 	.word	0x000026ad

00003790 <_i2c_m_sync_init_impl>:
{
    3790:	b538      	push	{r3, r4, r5, lr}
    3792:	4605      	mov	r5, r0
    3794:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    3796:	4608      	mov	r0, r1
    3798:	4b34      	ldr	r3, [pc, #208]	; (386c <_i2c_m_sync_init_impl+0xdc>)
    379a:	4798      	blx	r3
    379c:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    379e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    37a0:	f013 0f01 	tst.w	r3, #1
    37a4:	d123      	bne.n	37ee <_i2c_m_sync_init_impl+0x5e>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    37a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    37aa:	4a31      	ldr	r2, [pc, #196]	; (3870 <_i2c_m_sync_init_impl+0xe0>)
    37ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    37b0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    37b4:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37b8:	69e3      	ldr	r3, [r4, #28]
    37ba:	f013 0f03 	tst.w	r3, #3
    37be:	d1fb      	bne.n	37b8 <_i2c_m_sync_init_impl+0x28>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    37c0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    37c2:	f013 0f02 	tst.w	r3, #2
    37c6:	d00b      	beq.n	37e0 <_i2c_m_sync_init_impl+0x50>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    37c8:	6823      	ldr	r3, [r4, #0]
    37ca:	f023 0302 	bic.w	r3, r3, #2
    37ce:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37d0:	69e3      	ldr	r3, [r4, #28]
    37d2:	f013 0f03 	tst.w	r3, #3
    37d6:	d1fb      	bne.n	37d0 <_i2c_m_sync_init_impl+0x40>
    37d8:	69e3      	ldr	r3, [r4, #28]
    37da:	f013 0f02 	tst.w	r3, #2
    37de:	d1fb      	bne.n	37d8 <_i2c_m_sync_init_impl+0x48>
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    37e0:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    37e4:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    37e6:	69e3      	ldr	r3, [r4, #28]
    37e8:	f013 0f03 	tst.w	r3, #3
    37ec:	d1fb      	bne.n	37e6 <_i2c_m_sync_init_impl+0x56>
    37ee:	69e3      	ldr	r3, [r4, #28]
    37f0:	f013 0f01 	tst.w	r3, #1
    37f4:	d1fb      	bne.n	37ee <_i2c_m_sync_init_impl+0x5e>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    37f6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    37fa:	4a1d      	ldr	r2, [pc, #116]	; (3870 <_i2c_m_sync_init_impl+0xe0>)
    37fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3800:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    3804:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3806:	69e3      	ldr	r3, [r4, #28]
    3808:	f013 0f03 	tst.w	r3, #3
    380c:	d1fb      	bne.n	3806 <_i2c_m_sync_init_impl+0x76>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    380e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    3812:	4917      	ldr	r1, [pc, #92]	; (3870 <_i2c_m_sync_init_impl+0xe0>)
    3814:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    381c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    381e:	69e3      	ldr	r3, [r4, #28]
    3820:	f013 0f04 	tst.w	r3, #4
    3824:	d1fb      	bne.n	381e <_i2c_m_sync_init_impl+0x8e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    3826:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    382a:	4911      	ldr	r1, [pc, #68]	; (3870 <_i2c_m_sync_init_impl+0xe0>)
    382c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    3834:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    3836:	f3c2 6301 	ubfx	r3, r2, #24, #2
    383a:	81ab      	strh	r3, [r5, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    383c:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    383e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    3842:	2b01      	cmp	r3, #1
    3844:	bf94      	ite	ls
    3846:	2300      	movls	r3, #0
    3848:	2301      	movhi	r3, #1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    384a:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    384e:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3850:	69e3      	ldr	r3, [r4, #28]
    3852:	f013 0f04 	tst.w	r3, #4
    3856:	d1fb      	bne.n	3850 <_i2c_m_sync_init_impl+0xc0>
	service->trise = _i2cms[i].trise;
    3858:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    385c:	4b04      	ldr	r3, [pc, #16]	; (3870 <_i2c_m_sync_init_impl+0xe0>)
    385e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3862:	f8b0 30aa 	ldrh.w	r3, [r0, #170]	; 0xaa
    3866:	81eb      	strh	r3, [r5, #14]
}
    3868:	2000      	movs	r0, #0
    386a:	bd38      	pop	{r3, r4, r5, pc}
    386c:	00003765 	.word	0x00003765
    3870:	00008684 	.word	0x00008684

00003874 <_sercom_i2c_m_irq_handler>:
{
    3874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3878:	4605      	mov	r5, r0
	void *   hw    = i2c_dev->hw;
    387a:	6904      	ldr	r4, [r0, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    387c:	7e26      	ldrb	r6, [r4, #24]
    387e:	b2f6      	uxtb	r6, r6
	ASSERT(i2c_dev);
    3880:	f8df 8234 	ldr.w	r8, [pc, #564]	; 3ab8 <_sercom_i2c_m_irq_handler+0x244>
    3884:	f240 425f 	movw	r2, #1119	; 0x45f
    3888:	4641      	mov	r1, r8
    388a:	3000      	adds	r0, #0
    388c:	bf18      	it	ne
    388e:	2001      	movne	r0, #1
    3890:	4f88      	ldr	r7, [pc, #544]	; (3ab4 <_sercom_i2c_m_irq_handler+0x240>)
    3892:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    3894:	6928      	ldr	r0, [r5, #16]
    3896:	f44f 628c 	mov.w	r2, #1120	; 0x460
    389a:	4641      	mov	r1, r8
    389c:	3000      	adds	r0, #0
    389e:	bf18      	it	ne
    38a0:	2001      	movne	r0, #1
    38a2:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
    38a4:	f016 0f80 	tst.w	r6, #128	; 0x80
    38a8:	f040 80f4 	bne.w	3a94 <_sercom_i2c_m_irq_handler+0x220>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    38ac:	6821      	ldr	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    38ae:	69e3      	ldr	r3, [r4, #28]
    38b0:	f013 0f04 	tst.w	r3, #4
    38b4:	d1fb      	bne.n	38ae <_sercom_i2c_m_irq_handler+0x3a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    38b6:	8b63      	ldrh	r3, [r4, #26]
    38b8:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    38ba:	f016 0f01 	tst.w	r6, #1
    38be:	f000 8090 	beq.w	39e2 <_sercom_i2c_m_irq_handler+0x16e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    38c2:	f013 0f02 	tst.w	r3, #2
    38c6:	d022      	beq.n	390e <_sercom_i2c_m_irq_handler+0x9a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    38c8:	2201      	movs	r2, #1
    38ca:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    38cc:	886a      	ldrh	r2, [r5, #2]
    38ce:	b292      	uxth	r2, r2
    38d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    38d4:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    38d6:	886a      	ldrh	r2, [r5, #2]
    38d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    38dc:	0412      	lsls	r2, r2, #16
    38de:	0c12      	lsrs	r2, r2, #16
    38e0:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    38e2:	f003 0301 	and.w	r3, r3, #1
			return I2C_ERR_BAD_ADDRESS;
    38e6:	2b00      	cmp	r3, #0
    38e8:	bf14      	ite	ne
    38ea:	f06f 0104 	mvnne.w	r1, #4
    38ee:	f06f 0103 	mvneq.w	r1, #3
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    38f2:	886b      	ldrh	r3, [r5, #2]
    38f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    38f8:	041b      	lsls	r3, r3, #16
    38fa:	0c1b      	lsrs	r3, r3, #16
    38fc:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    38fe:	696b      	ldr	r3, [r5, #20]
    3900:	2b00      	cmp	r3, #0
    3902:	f000 80c5 	beq.w	3a90 <_sercom_i2c_m_irq_handler+0x21c>
			i2c_dev->cb.error(i2c_dev, ret);
    3906:	4628      	mov	r0, r5
    3908:	4798      	blx	r3
    390a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    390e:	f013 0f04 	tst.w	r3, #4
    3912:	d124      	bne.n	395e <_sercom_i2c_m_irq_handler+0xea>
			if (msg->flags & I2C_M_TEN) {
    3914:	886b      	ldrh	r3, [r5, #2]
    3916:	f413 6f80 	tst.w	r3, #1024	; 0x400
    391a:	d03e      	beq.n	399a <_sercom_i2c_m_irq_handler+0x126>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    391c:	882b      	ldrh	r3, [r5, #0]
    391e:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3920:	f003 0206 	and.w	r2, r3, #6
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3924:	69e3      	ldr	r3, [r4, #28]
    3926:	f013 0f04 	tst.w	r3, #4
    392a:	d1fb      	bne.n	3924 <_sercom_i2c_m_irq_handler+0xb0>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    392c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    392e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
				hri_sercomi2cm_write_ADDR_reg(hw,
    3932:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    3936:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3938:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    393a:	69e3      	ldr	r3, [r4, #28]
    393c:	f013 0f04 	tst.w	r3, #4
    3940:	d1fb      	bne.n	393a <_sercom_i2c_m_irq_handler+0xc6>
				msg->flags &= ~I2C_M_TEN;
    3942:	886b      	ldrh	r3, [r5, #2]
    3944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3948:	041b      	lsls	r3, r3, #16
    394a:	0c1b      	lsrs	r3, r3, #16
    394c:	806b      	strh	r3, [r5, #2]
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
    394e:	69ab      	ldr	r3, [r5, #24]
    3950:	2b00      	cmp	r3, #0
    3952:	f000 8088 	beq.w	3a66 <_sercom_i2c_m_irq_handler+0x1f2>
			i2c_dev->cb.tx_complete(i2c_dev);
    3956:	4628      	mov	r0, r5
    3958:	4798      	blx	r3
    395a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (msg->len > 0) {
    395e:	686b      	ldr	r3, [r5, #4]
    3960:	2b00      	cmp	r3, #0
    3962:	dd04      	ble.n	396e <_sercom_i2c_m_irq_handler+0xfa>
					msg->flags |= I2C_M_FAIL;
    3964:	886b      	ldrh	r3, [r5, #2]
    3966:	b29b      	uxth	r3, r3
    3968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    396c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    396e:	886b      	ldrh	r3, [r5, #2]
    3970:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3974:	d108      	bne.n	3988 <_sercom_i2c_m_irq_handler+0x114>
				msg->flags &= ~I2C_M_BUSY;
    3976:	886b      	ldrh	r3, [r5, #2]
    3978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    397c:	041b      	lsls	r3, r3, #16
    397e:	0c1b      	lsrs	r3, r3, #16
    3980:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    3982:	f06f 0101 	mvn.w	r1, #1
    3986:	e7b4      	b.n	38f2 <_sercom_i2c_m_irq_handler+0x7e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3988:	6863      	ldr	r3, [r4, #4]
    398a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    398e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3990:	69e3      	ldr	r3, [r4, #28]
    3992:	f013 0f04 	tst.w	r3, #4
    3996:	d1fb      	bne.n	3990 <_sercom_i2c_m_irq_handler+0x11c>
    3998:	e7ed      	b.n	3976 <_sercom_i2c_m_irq_handler+0x102>
			if (msg->len == 0) {
    399a:	686b      	ldr	r3, [r5, #4]
    399c:	b99b      	cbnz	r3, 39c6 <_sercom_i2c_m_irq_handler+0x152>
				if (msg->flags & I2C_M_STOP) {
    399e:	886b      	ldrh	r3, [r5, #2]
    39a0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    39a4:	d106      	bne.n	39b4 <_sercom_i2c_m_irq_handler+0x140>
				msg->flags &= ~I2C_M_BUSY;
    39a6:	886b      	ldrh	r3, [r5, #2]
    39a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    39ac:	041b      	lsls	r3, r3, #16
    39ae:	0c1b      	lsrs	r3, r3, #16
    39b0:	806b      	strh	r3, [r5, #2]
    39b2:	e7cc      	b.n	394e <_sercom_i2c_m_irq_handler+0xda>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    39b4:	6863      	ldr	r3, [r4, #4]
    39b6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    39ba:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    39bc:	69e3      	ldr	r3, [r4, #28]
    39be:	f013 0f04 	tst.w	r3, #4
    39c2:	d1fb      	bne.n	39bc <_sercom_i2c_m_irq_handler+0x148>
    39c4:	e7ef      	b.n	39a6 <_sercom_i2c_m_irq_handler+0x132>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    39c6:	68ab      	ldr	r3, [r5, #8]
    39c8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    39ca:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    39cc:	69e3      	ldr	r3, [r4, #28]
    39ce:	f013 0f04 	tst.w	r3, #4
    39d2:	d1fb      	bne.n	39cc <_sercom_i2c_m_irq_handler+0x158>
				msg->buffer++;
    39d4:	68ab      	ldr	r3, [r5, #8]
    39d6:	3301      	adds	r3, #1
    39d8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    39da:	686b      	ldr	r3, [r5, #4]
    39dc:	3b01      	subs	r3, #1
    39de:	606b      	str	r3, [r5, #4]
    39e0:	e7b5      	b.n	394e <_sercom_i2c_m_irq_handler+0xda>
	} else if (flags & SB_FLAG) {
    39e2:	f016 0f02 	tst.w	r6, #2
    39e6:	d041      	beq.n	3a6c <_sercom_i2c_m_irq_handler+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    39e8:	686a      	ldr	r2, [r5, #4]
    39ea:	2a00      	cmp	r2, #0
    39ec:	d036      	beq.n	3a5c <_sercom_i2c_m_irq_handler+0x1e8>
    39ee:	f013 0f04 	tst.w	r3, #4
    39f2:	d133      	bne.n	3a5c <_sercom_i2c_m_irq_handler+0x1e8>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    39f4:	f3c1 61c0 	ubfx	r1, r1, #27, #1
			msg->len--;
    39f8:	3a01      	subs	r2, #1
    39fa:	606a      	str	r2, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    39fc:	2a00      	cmp	r2, #0
    39fe:	d137      	bne.n	3a70 <_sercom_i2c_m_irq_handler+0x1fc>
    3a00:	2900      	cmp	r1, #0
    3a02:	d039      	beq.n	3a78 <_sercom_i2c_m_irq_handler+0x204>
				if (msg->flags & I2C_M_STOP) {
    3a04:	886b      	ldrh	r3, [r5, #2]
    3a06:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3a0a:	d116      	bne.n	3a3a <_sercom_i2c_m_irq_handler+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    3a0c:	886b      	ldrh	r3, [r5, #2]
    3a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3a12:	041b      	lsls	r3, r3, #16
    3a14:	0c1b      	lsrs	r3, r3, #16
    3a16:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    3a18:	68aa      	ldr	r2, [r5, #8]
    3a1a:	1c53      	adds	r3, r2, #1
    3a1c:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3a1e:	69e3      	ldr	r3, [r4, #28]
    3a20:	f013 0f04 	tst.w	r3, #4
    3a24:	d1fb      	bne.n	3a1e <_sercom_i2c_m_irq_handler+0x1aa>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    3a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3a28:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3a2a:	2302      	movs	r3, #2
    3a2c:	7623      	strb	r3, [r4, #24]
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    3a2e:	69eb      	ldr	r3, [r5, #28]
    3a30:	b1e3      	cbz	r3, 3a6c <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.rx_complete(i2c_dev);
    3a32:	4628      	mov	r0, r5
    3a34:	4798      	blx	r3
    3a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    3a3a:	6863      	ldr	r3, [r4, #4]
    3a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3a40:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3a42:	69e3      	ldr	r3, [r4, #28]
    3a44:	f013 0f04 	tst.w	r3, #4
    3a48:	d1fb      	bne.n	3a42 <_sercom_i2c_m_irq_handler+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3a4a:	6863      	ldr	r3, [r4, #4]
    3a4c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    3a50:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3a52:	69e3      	ldr	r3, [r4, #28]
    3a54:	f013 0f04 	tst.w	r3, #4
    3a58:	d1fb      	bne.n	3a52 <_sercom_i2c_m_irq_handler+0x1de>
    3a5a:	e7d7      	b.n	3a0c <_sercom_i2c_m_irq_handler+0x198>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3a5c:	2302      	movs	r3, #2
    3a5e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    3a60:	f06f 0101 	mvn.w	r1, #1
    3a64:	e745      	b.n	38f2 <_sercom_i2c_m_irq_handler+0x7e>
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
    3a66:	f016 0f02 	tst.w	r6, #2
    3a6a:	d1e0      	bne.n	3a2e <_sercom_i2c_m_irq_handler+0x1ba>
    3a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    3a70:	2a01      	cmp	r2, #1
    3a72:	d1d1      	bne.n	3a18 <_sercom_i2c_m_irq_handler+0x1a4>
    3a74:	2900      	cmp	r1, #0
    3a76:	d0cf      	beq.n	3a18 <_sercom_i2c_m_irq_handler+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3a78:	6863      	ldr	r3, [r4, #4]
    3a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3a7e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3a80:	69e3      	ldr	r3, [r4, #28]
    3a82:	f013 0f04 	tst.w	r3, #4
    3a86:	d1fb      	bne.n	3a80 <_sercom_i2c_m_irq_handler+0x20c>
			if (msg->len == 0) {
    3a88:	686b      	ldr	r3, [r5, #4]
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d0ba      	beq.n	3a04 <_sercom_i2c_m_irq_handler+0x190>
    3a8e:	e7c3      	b.n	3a18 <_sercom_i2c_m_irq_handler+0x1a4>
    3a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    3a94:	886b      	ldrh	r3, [r5, #2]
    3a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3a9a:	041b      	lsls	r3, r3, #16
    3a9c:	0c1b      	lsrs	r3, r3, #16
    3a9e:	806b      	strh	r3, [r5, #2]
	if (i2c_dev->cb.error) {
    3aa0:	696b      	ldr	r3, [r5, #20]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d0e2      	beq.n	3a6c <_sercom_i2c_m_irq_handler+0x1f8>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
    3aa6:	f06f 0104 	mvn.w	r1, #4
    3aaa:	4628      	mov	r0, r5
    3aac:	4798      	blx	r3
    3aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ab2:	bf00      	nop
    3ab4:	000026ad 	.word	0x000026ad
    3ab8:	00008758 	.word	0x00008758

00003abc <_usart_sync_init>:
{
    3abc:	b538      	push	{r3, r4, r5, lr}
    3abe:	460c      	mov	r4, r1
	ASSERT(device);
    3ac0:	4605      	mov	r5, r0
    3ac2:	22c8      	movs	r2, #200	; 0xc8
    3ac4:	4905      	ldr	r1, [pc, #20]	; (3adc <_usart_sync_init+0x20>)
    3ac6:	3000      	adds	r0, #0
    3ac8:	bf18      	it	ne
    3aca:	2001      	movne	r0, #1
    3acc:	4b04      	ldr	r3, [pc, #16]	; (3ae0 <_usart_sync_init+0x24>)
    3ace:	4798      	blx	r3
	device->hw = hw;
    3ad0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    3ad2:	4620      	mov	r0, r4
    3ad4:	4b03      	ldr	r3, [pc, #12]	; (3ae4 <_usart_sync_init+0x28>)
    3ad6:	4798      	blx	r3
}
    3ad8:	bd38      	pop	{r3, r4, r5, pc}
    3ada:	bf00      	nop
    3adc:	00008758 	.word	0x00008758
    3ae0:	000026ad 	.word	0x000026ad
    3ae4:	0000362d 	.word	0x0000362d

00003ae8 <_usart_async_init>:
{
    3ae8:	b570      	push	{r4, r5, r6, lr}
    3aea:	460d      	mov	r5, r1
	ASSERT(device);
    3aec:	4606      	mov	r6, r0
    3aee:	22d6      	movs	r2, #214	; 0xd6
    3af0:	4917      	ldr	r1, [pc, #92]	; (3b50 <_usart_async_init+0x68>)
    3af2:	3000      	adds	r0, #0
    3af4:	bf18      	it	ne
    3af6:	2001      	movne	r0, #1
    3af8:	4b16      	ldr	r3, [pc, #88]	; (3b54 <_usart_async_init+0x6c>)
    3afa:	4798      	blx	r3
	init_status = _usart_init(hw);
    3afc:	4628      	mov	r0, r5
    3afe:	4b16      	ldr	r3, [pc, #88]	; (3b58 <_usart_async_init+0x70>)
    3b00:	4798      	blx	r3
	if (init_status) {
    3b02:	4604      	mov	r4, r0
    3b04:	b108      	cbz	r0, 3b0a <_usart_async_init+0x22>
}
    3b06:	4620      	mov	r0, r4
    3b08:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    3b0a:	61b5      	str	r5, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    3b0c:	4631      	mov	r1, r6
    3b0e:	4628      	mov	r0, r5
    3b10:	4b12      	ldr	r3, [pc, #72]	; (3b5c <_usart_async_init+0x74>)
    3b12:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    3b14:	4628      	mov	r0, r5
    3b16:	4b12      	ldr	r3, [pc, #72]	; (3b60 <_usart_async_init+0x78>)
    3b18:	4798      	blx	r3
    3b1a:	1d01      	adds	r1, r0, #4
    3b1c:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b1e:	2501      	movs	r5, #1
    3b20:	f000 021f 	and.w	r2, r0, #31
    3b24:	fa05 f202 	lsl.w	r2, r5, r2
    3b28:	0943      	lsrs	r3, r0, #5
    3b2a:	009b      	lsls	r3, r3, #2
    3b2c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3b30:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3b34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b3c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b44:	601a      	str	r2, [r3, #0]
		irq++;
    3b46:	3001      	adds	r0, #1
    3b48:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3b4a:	4281      	cmp	r1, r0
    3b4c:	d1e8      	bne.n	3b20 <_usart_async_init+0x38>
    3b4e:	e7da      	b.n	3b06 <_usart_async_init+0x1e>
    3b50:	00008758 	.word	0x00008758
    3b54:	000026ad 	.word	0x000026ad
    3b58:	0000362d 	.word	0x0000362d
    3b5c:	00003521 	.word	0x00003521
    3b60:	00003581 	.word	0x00003581

00003b64 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3b64:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3b66:	6813      	ldr	r3, [r2, #0]
    3b68:	f043 0302 	orr.w	r3, r3, #2
    3b6c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3b6e:	69d3      	ldr	r3, [r2, #28]
    3b70:	f013 0f03 	tst.w	r3, #3
    3b74:	d1fb      	bne.n	3b6e <_usart_sync_enable+0xa>
}
    3b76:	4770      	bx	lr

00003b78 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3b78:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    3b7a:	6299      	str	r1, [r3, #40]	; 0x28
    3b7c:	4770      	bx	lr

00003b7e <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3b7e:	6983      	ldr	r3, [r0, #24]
    3b80:	6299      	str	r1, [r3, #40]	; 0x28
    3b82:	4770      	bx	lr

00003b84 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    3b84:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    3b86:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3b88:	b2c0      	uxtb	r0, r0
    3b8a:	4770      	bx	lr

00003b8c <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3b8c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3b8e:	7e18      	ldrb	r0, [r3, #24]
}
    3b90:	f000 0001 	and.w	r0, r0, #1
    3b94:	4770      	bx	lr

00003b96 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    3b96:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3b98:	7e18      	ldrb	r0, [r3, #24]
}
    3b9a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3b9e:	4770      	bx	lr

00003ba0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3ba0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3ba2:	7e18      	ldrb	r0, [r3, #24]
}
    3ba4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3ba8:	4770      	bx	lr

00003baa <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3baa:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3bac:	2201      	movs	r2, #1
    3bae:	759a      	strb	r2, [r3, #22]
    3bb0:	4770      	bx	lr

00003bb2 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3bb2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3bb4:	2202      	movs	r2, #2
    3bb6:	759a      	strb	r2, [r3, #22]
    3bb8:	4770      	bx	lr
	...

00003bbc <_i2c_m_async_init>:
{
    3bbc:	b570      	push	{r4, r5, r6, lr}
    3bbe:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    3bc0:	4606      	mov	r6, r0
    3bc2:	f240 42d2 	movw	r2, #1234	; 0x4d2
    3bc6:	4918      	ldr	r1, [pc, #96]	; (3c28 <_i2c_m_async_init+0x6c>)
    3bc8:	3000      	adds	r0, #0
    3bca:	bf18      	it	ne
    3bcc:	2001      	movne	r0, #1
    3bce:	4b17      	ldr	r3, [pc, #92]	; (3c2c <_i2c_m_async_init+0x70>)
    3bd0:	4798      	blx	r3
	i2c_dev->hw = hw;
    3bd2:	6135      	str	r5, [r6, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    3bd4:	4629      	mov	r1, r5
    3bd6:	4630      	mov	r0, r6
    3bd8:	4b15      	ldr	r3, [pc, #84]	; (3c30 <_i2c_m_async_init+0x74>)
    3bda:	4798      	blx	r3
	if (init_status) {
    3bdc:	4604      	mov	r4, r0
    3bde:	b108      	cbz	r0, 3be4 <_i2c_m_async_init+0x28>
}
    3be0:	4620      	mov	r0, r4
    3be2:	bd70      	pop	{r4, r5, r6, pc}
	_sercom_init_irq_param(hw, (void *)i2c_dev);
    3be4:	4631      	mov	r1, r6
    3be6:	4628      	mov	r0, r5
    3be8:	4b12      	ldr	r3, [pc, #72]	; (3c34 <_i2c_m_async_init+0x78>)
    3bea:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    3bec:	4628      	mov	r0, r5
    3bee:	4b12      	ldr	r3, [pc, #72]	; (3c38 <_i2c_m_async_init+0x7c>)
    3bf0:	4798      	blx	r3
    3bf2:	1d01      	adds	r1, r0, #4
    3bf4:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bf6:	2501      	movs	r5, #1
    3bf8:	f000 021f 	and.w	r2, r0, #31
    3bfc:	fa05 f202 	lsl.w	r2, r5, r2
    3c00:	0943      	lsrs	r3, r0, #5
    3c02:	009b      	lsls	r3, r3, #2
    3c04:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3c08:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c14:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c1c:	601a      	str	r2, [r3, #0]
		irq++;
    3c1e:	3001      	adds	r0, #1
    3c20:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    3c22:	4281      	cmp	r1, r0
    3c24:	d1e8      	bne.n	3bf8 <_i2c_m_async_init+0x3c>
    3c26:	e7db      	b.n	3be0 <_i2c_m_async_init+0x24>
    3c28:	00008758 	.word	0x00008758
    3c2c:	000026ad 	.word	0x000026ad
    3c30:	00003791 	.word	0x00003791
    3c34:	00003521 	.word	0x00003521
    3c38:	00003581 	.word	0x00003581

00003c3c <_i2c_m_async_transfer>:
{
    3c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c40:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
    3c42:	4605      	mov	r5, r0
    3c44:	f110 0800 	adds.w	r8, r0, #0
    3c48:	bf18      	it	ne
    3c4a:	f04f 0801 	movne.w	r8, #1
    3c4e:	4f45      	ldr	r7, [pc, #276]	; (3d64 <_i2c_m_async_transfer+0x128>)
    3c50:	f44f 62a5 	mov.w	r2, #1320	; 0x528
    3c54:	4639      	mov	r1, r7
    3c56:	4640      	mov	r0, r8
    3c58:	4e43      	ldr	r6, [pc, #268]	; (3d68 <_i2c_m_async_transfer+0x12c>)
    3c5a:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
    3c5c:	6928      	ldr	r0, [r5, #16]
    3c5e:	f240 5229 	movw	r2, #1321	; 0x529
    3c62:	4639      	mov	r1, r7
    3c64:	3000      	adds	r0, #0
    3c66:	bf18      	it	ne
    3c68:	2001      	movne	r0, #1
    3c6a:	47b0      	blx	r6
	ASSERT(msg);
    3c6c:	f240 522a 	movw	r2, #1322	; 0x52a
    3c70:	4639      	mov	r1, r7
    3c72:	1c20      	adds	r0, r4, #0
    3c74:	bf18      	it	ne
    3c76:	2001      	movne	r0, #1
    3c78:	47b0      	blx	r6
	if (msg->len == 0) {
    3c7a:	6860      	ldr	r0, [r4, #4]
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d06f      	beq.n	3d60 <_i2c_m_async_transfer+0x124>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    3c80:	886b      	ldrh	r3, [r5, #2]
    3c82:	f413 7f80 	tst.w	r3, #256	; 0x100
    3c86:	d169      	bne.n	3d5c <_i2c_m_async_transfer+0x120>
	msg->flags |= I2C_M_BUSY;
    3c88:	8863      	ldrh	r3, [r4, #2]
    3c8a:	b29b      	uxth	r3, r3
    3c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3c90:	8063      	strh	r3, [r4, #2]
	i2c_dev->service.msg = *msg;
    3c92:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    3c96:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
    3c9a:	692a      	ldr	r2, [r5, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    3c9c:	6853      	ldr	r3, [r2, #4]
    3c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3ca2:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3ca4:	69d3      	ldr	r3, [r2, #28]
    3ca6:	f013 0f04 	tst.w	r3, #4
    3caa:	d1fb      	bne.n	3ca4 <_i2c_m_async_transfer+0x68>
	void *             hw    = i2c_dev->hw;
    3cac:	692c      	ldr	r4, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3cae:	6826      	ldr	r6, [r4, #0]
	ASSERT(i2c_dev);
    3cb0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    3cb4:	492b      	ldr	r1, [pc, #172]	; (3d64 <_i2c_m_async_transfer+0x128>)
    3cb6:	4640      	mov	r0, r8
    3cb8:	4b2b      	ldr	r3, [pc, #172]	; (3d68 <_i2c_m_async_transfer+0x12c>)
    3cba:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    3cbc:	686b      	ldr	r3, [r5, #4]
    3cbe:	2b01      	cmp	r3, #1
    3cc0:	d02a      	beq.n	3d18 <_i2c_m_async_transfer+0xdc>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3cc2:	6863      	ldr	r3, [r4, #4]
    3cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    3cc8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3cca:	69e3      	ldr	r3, [r4, #28]
    3ccc:	f013 0f04 	tst.w	r3, #4
    3cd0:	d1fb      	bne.n	3cca <_i2c_m_async_transfer+0x8e>
	if (msg->addr & I2C_M_TEN) {
    3cd2:	882b      	ldrh	r3, [r5, #0]
    3cd4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3cd8:	d02a      	beq.n	3d30 <_i2c_m_async_transfer+0xf4>
		if (msg->flags & I2C_M_RD) {
    3cda:	886a      	ldrh	r2, [r5, #2]
    3cdc:	f012 0f01 	tst.w	r2, #1
    3ce0:	d004      	beq.n	3cec <_i2c_m_async_transfer+0xb0>
			msg->flags |= I2C_M_TEN;
    3ce2:	886a      	ldrh	r2, [r5, #2]
    3ce4:	b292      	uxth	r2, r2
    3ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3cea:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3cec:	f240 72fe 	movw	r2, #2046	; 0x7fe
    3cf0:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    3cf4:	69e3      	ldr	r3, [r4, #28]
    3cf6:	f013 0f04 	tst.w	r3, #4
    3cfa:	d1fb      	bne.n	3cf4 <_i2c_m_async_transfer+0xb8>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3d06:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3d08:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3d0a:	69e3      	ldr	r3, [r4, #28]
    3d0c:	f013 0f04 	tst.w	r3, #4
    3d10:	d1fb      	bne.n	3d0a <_i2c_m_async_transfer+0xce>
	return ERR_NONE;
    3d12:	2000      	movs	r0, #0
    3d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (msg->len == 1 && sclsm) {
    3d18:	f016 6f00 	tst.w	r6, #134217728	; 0x8000000
    3d1c:	d0d1      	beq.n	3cc2 <_i2c_m_async_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3d1e:	6863      	ldr	r3, [r4, #4]
    3d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    3d24:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3d26:	69e3      	ldr	r3, [r4, #28]
    3d28:	f013 0f04 	tst.w	r3, #4
    3d2c:	d1fb      	bne.n	3d26 <_i2c_m_async_transfer+0xea>
    3d2e:	e7d0      	b.n	3cd2 <_i2c_m_async_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    3d30:	8869      	ldrh	r1, [r5, #2]
    3d32:	005a      	lsls	r2, r3, #1
    3d34:	b2d2      	uxtb	r2, r2
    3d36:	f001 0301 	and.w	r3, r1, #1
    3d3a:	431a      	orrs	r2, r3
    3d3c:	69e3      	ldr	r3, [r4, #28]
    3d3e:	f013 0f04 	tst.w	r3, #4
    3d42:	d1fb      	bne.n	3d3c <_i2c_m_async_transfer+0x100>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    3d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    3d4a:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3d4c:	6262      	str	r2, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    3d4e:	69e3      	ldr	r3, [r4, #28]
    3d50:	f013 0f04 	tst.w	r3, #4
    3d54:	d1fb      	bne.n	3d4e <_i2c_m_async_transfer+0x112>
	return ERR_NONE;
    3d56:	2000      	movs	r0, #0
    3d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_BUSY;
    3d5c:	f06f 0003 	mvn.w	r0, #3
}
    3d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d64:	00008758 	.word	0x00008758
    3d68:	000026ad 	.word	0x000026ad

00003d6c <_i2c_m_async_register_callback>:
	switch (type) {
    3d6c:	2901      	cmp	r1, #1
    3d6e:	d006      	beq.n	3d7e <_i2c_m_async_register_callback+0x12>
    3d70:	b119      	cbz	r1, 3d7a <_i2c_m_async_register_callback+0xe>
    3d72:	2902      	cmp	r1, #2
    3d74:	d005      	beq.n	3d82 <_i2c_m_async_register_callback+0x16>
}
    3d76:	2000      	movs	r0, #0
    3d78:	4770      	bx	lr
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
    3d7a:	6142      	str	r2, [r0, #20]
		break;
    3d7c:	e7fb      	b.n	3d76 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
    3d7e:	6182      	str	r2, [r0, #24]
		break;
    3d80:	e7f9      	b.n	3d76 <_i2c_m_async_register_callback+0xa>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
    3d82:	61c2      	str	r2, [r0, #28]
		break;
    3d84:	e7f7      	b.n	3d76 <_i2c_m_async_register_callback+0xa>
	...

00003d88 <SERCOM0_0_Handler>:
{
    3d88:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3d8a:	4b02      	ldr	r3, [pc, #8]	; (3d94 <SERCOM0_0_Handler+0xc>)
    3d8c:	6818      	ldr	r0, [r3, #0]
    3d8e:	4b02      	ldr	r3, [pc, #8]	; (3d98 <SERCOM0_0_Handler+0x10>)
    3d90:	4798      	blx	r3
    3d92:	bd08      	pop	{r3, pc}
    3d94:	2000047c 	.word	0x2000047c
    3d98:	000034b1 	.word	0x000034b1

00003d9c <SERCOM0_1_Handler>:
{
    3d9c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3d9e:	4b02      	ldr	r3, [pc, #8]	; (3da8 <SERCOM0_1_Handler+0xc>)
    3da0:	6818      	ldr	r0, [r3, #0]
    3da2:	4b02      	ldr	r3, [pc, #8]	; (3dac <SERCOM0_1_Handler+0x10>)
    3da4:	4798      	blx	r3
    3da6:	bd08      	pop	{r3, pc}
    3da8:	2000047c 	.word	0x2000047c
    3dac:	000034b1 	.word	0x000034b1

00003db0 <SERCOM0_2_Handler>:
{
    3db0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3db2:	4b02      	ldr	r3, [pc, #8]	; (3dbc <SERCOM0_2_Handler+0xc>)
    3db4:	6818      	ldr	r0, [r3, #0]
    3db6:	4b02      	ldr	r3, [pc, #8]	; (3dc0 <SERCOM0_2_Handler+0x10>)
    3db8:	4798      	blx	r3
    3dba:	bd08      	pop	{r3, pc}
    3dbc:	2000047c 	.word	0x2000047c
    3dc0:	000034b1 	.word	0x000034b1

00003dc4 <SERCOM0_3_Handler>:
{
    3dc4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom0_dev);
    3dc6:	4b02      	ldr	r3, [pc, #8]	; (3dd0 <SERCOM0_3_Handler+0xc>)
    3dc8:	6818      	ldr	r0, [r3, #0]
    3dca:	4b02      	ldr	r3, [pc, #8]	; (3dd4 <SERCOM0_3_Handler+0x10>)
    3dcc:	4798      	blx	r3
    3dce:	bd08      	pop	{r3, pc}
    3dd0:	2000047c 	.word	0x2000047c
    3dd4:	000034b1 	.word	0x000034b1

00003dd8 <SERCOM1_0_Handler>:
{
    3dd8:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3dda:	4b02      	ldr	r3, [pc, #8]	; (3de4 <SERCOM1_0_Handler+0xc>)
    3ddc:	6858      	ldr	r0, [r3, #4]
    3dde:	4b02      	ldr	r3, [pc, #8]	; (3de8 <SERCOM1_0_Handler+0x10>)
    3de0:	4798      	blx	r3
    3de2:	bd08      	pop	{r3, pc}
    3de4:	2000047c 	.word	0x2000047c
    3de8:	000034b1 	.word	0x000034b1

00003dec <SERCOM1_1_Handler>:
{
    3dec:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3dee:	4b02      	ldr	r3, [pc, #8]	; (3df8 <SERCOM1_1_Handler+0xc>)
    3df0:	6858      	ldr	r0, [r3, #4]
    3df2:	4b02      	ldr	r3, [pc, #8]	; (3dfc <SERCOM1_1_Handler+0x10>)
    3df4:	4798      	blx	r3
    3df6:	bd08      	pop	{r3, pc}
    3df8:	2000047c 	.word	0x2000047c
    3dfc:	000034b1 	.word	0x000034b1

00003e00 <SERCOM1_2_Handler>:
{
    3e00:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3e02:	4b02      	ldr	r3, [pc, #8]	; (3e0c <SERCOM1_2_Handler+0xc>)
    3e04:	6858      	ldr	r0, [r3, #4]
    3e06:	4b02      	ldr	r3, [pc, #8]	; (3e10 <SERCOM1_2_Handler+0x10>)
    3e08:	4798      	blx	r3
    3e0a:	bd08      	pop	{r3, pc}
    3e0c:	2000047c 	.word	0x2000047c
    3e10:	000034b1 	.word	0x000034b1

00003e14 <SERCOM1_3_Handler>:
{
    3e14:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    3e16:	4b02      	ldr	r3, [pc, #8]	; (3e20 <SERCOM1_3_Handler+0xc>)
    3e18:	6858      	ldr	r0, [r3, #4]
    3e1a:	4b02      	ldr	r3, [pc, #8]	; (3e24 <SERCOM1_3_Handler+0x10>)
    3e1c:	4798      	blx	r3
    3e1e:	bd08      	pop	{r3, pc}
    3e20:	2000047c 	.word	0x2000047c
    3e24:	000034b1 	.word	0x000034b1

00003e28 <SERCOM3_0_Handler>:
{
    3e28:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3e2a:	4b02      	ldr	r3, [pc, #8]	; (3e34 <SERCOM3_0_Handler+0xc>)
    3e2c:	6898      	ldr	r0, [r3, #8]
    3e2e:	4b02      	ldr	r3, [pc, #8]	; (3e38 <SERCOM3_0_Handler+0x10>)
    3e30:	4798      	blx	r3
    3e32:	bd08      	pop	{r3, pc}
    3e34:	2000047c 	.word	0x2000047c
    3e38:	00003595 	.word	0x00003595

00003e3c <SERCOM3_1_Handler>:
{
    3e3c:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3e3e:	4b02      	ldr	r3, [pc, #8]	; (3e48 <SERCOM3_1_Handler+0xc>)
    3e40:	6898      	ldr	r0, [r3, #8]
    3e42:	4b02      	ldr	r3, [pc, #8]	; (3e4c <SERCOM3_1_Handler+0x10>)
    3e44:	4798      	blx	r3
    3e46:	bd08      	pop	{r3, pc}
    3e48:	2000047c 	.word	0x2000047c
    3e4c:	00003595 	.word	0x00003595

00003e50 <SERCOM3_2_Handler>:
{
    3e50:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3e52:	4b02      	ldr	r3, [pc, #8]	; (3e5c <SERCOM3_2_Handler+0xc>)
    3e54:	6898      	ldr	r0, [r3, #8]
    3e56:	4b02      	ldr	r3, [pc, #8]	; (3e60 <SERCOM3_2_Handler+0x10>)
    3e58:	4798      	blx	r3
    3e5a:	bd08      	pop	{r3, pc}
    3e5c:	2000047c 	.word	0x2000047c
    3e60:	00003595 	.word	0x00003595

00003e64 <SERCOM3_3_Handler>:
{
    3e64:	b508      	push	{r3, lr}
	_spi_handler(_sercom3_dev);
    3e66:	4b02      	ldr	r3, [pc, #8]	; (3e70 <SERCOM3_3_Handler+0xc>)
    3e68:	6898      	ldr	r0, [r3, #8]
    3e6a:	4b02      	ldr	r3, [pc, #8]	; (3e74 <SERCOM3_3_Handler+0x10>)
    3e6c:	4798      	blx	r3
    3e6e:	bd08      	pop	{r3, pc}
    3e70:	2000047c 	.word	0x2000047c
    3e74:	00003595 	.word	0x00003595

00003e78 <SERCOM4_0_Handler>:
{
    3e78:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3e7a:	4b02      	ldr	r3, [pc, #8]	; (3e84 <SERCOM4_0_Handler+0xc>)
    3e7c:	68d8      	ldr	r0, [r3, #12]
    3e7e:	4b02      	ldr	r3, [pc, #8]	; (3e88 <SERCOM4_0_Handler+0x10>)
    3e80:	4798      	blx	r3
    3e82:	bd08      	pop	{r3, pc}
    3e84:	2000047c 	.word	0x2000047c
    3e88:	000034b1 	.word	0x000034b1

00003e8c <SERCOM4_1_Handler>:
{
    3e8c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3e8e:	4b02      	ldr	r3, [pc, #8]	; (3e98 <SERCOM4_1_Handler+0xc>)
    3e90:	68d8      	ldr	r0, [r3, #12]
    3e92:	4b02      	ldr	r3, [pc, #8]	; (3e9c <SERCOM4_1_Handler+0x10>)
    3e94:	4798      	blx	r3
    3e96:	bd08      	pop	{r3, pc}
    3e98:	2000047c 	.word	0x2000047c
    3e9c:	000034b1 	.word	0x000034b1

00003ea0 <SERCOM4_2_Handler>:
{
    3ea0:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3ea2:	4b02      	ldr	r3, [pc, #8]	; (3eac <SERCOM4_2_Handler+0xc>)
    3ea4:	68d8      	ldr	r0, [r3, #12]
    3ea6:	4b02      	ldr	r3, [pc, #8]	; (3eb0 <SERCOM4_2_Handler+0x10>)
    3ea8:	4798      	blx	r3
    3eaa:	bd08      	pop	{r3, pc}
    3eac:	2000047c 	.word	0x2000047c
    3eb0:	000034b1 	.word	0x000034b1

00003eb4 <SERCOM4_3_Handler>:
{
    3eb4:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3eb6:	4b02      	ldr	r3, [pc, #8]	; (3ec0 <SERCOM4_3_Handler+0xc>)
    3eb8:	68d8      	ldr	r0, [r3, #12]
    3eba:	4b02      	ldr	r3, [pc, #8]	; (3ec4 <SERCOM4_3_Handler+0x10>)
    3ebc:	4798      	blx	r3
    3ebe:	bd08      	pop	{r3, pc}
    3ec0:	2000047c 	.word	0x2000047c
    3ec4:	000034b1 	.word	0x000034b1

00003ec8 <SERCOM5_0_Handler>:
{
    3ec8:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3eca:	4b02      	ldr	r3, [pc, #8]	; (3ed4 <SERCOM5_0_Handler+0xc>)
    3ecc:	6918      	ldr	r0, [r3, #16]
    3ece:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <SERCOM5_0_Handler+0x10>)
    3ed0:	4798      	blx	r3
    3ed2:	bd08      	pop	{r3, pc}
    3ed4:	2000047c 	.word	0x2000047c
    3ed8:	00003875 	.word	0x00003875

00003edc <SERCOM5_1_Handler>:
{
    3edc:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3ede:	4b02      	ldr	r3, [pc, #8]	; (3ee8 <SERCOM5_1_Handler+0xc>)
    3ee0:	6918      	ldr	r0, [r3, #16]
    3ee2:	4b02      	ldr	r3, [pc, #8]	; (3eec <SERCOM5_1_Handler+0x10>)
    3ee4:	4798      	blx	r3
    3ee6:	bd08      	pop	{r3, pc}
    3ee8:	2000047c 	.word	0x2000047c
    3eec:	00003875 	.word	0x00003875

00003ef0 <SERCOM5_2_Handler>:
{
    3ef0:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3ef2:	4b02      	ldr	r3, [pc, #8]	; (3efc <SERCOM5_2_Handler+0xc>)
    3ef4:	6918      	ldr	r0, [r3, #16]
    3ef6:	4b02      	ldr	r3, [pc, #8]	; (3f00 <SERCOM5_2_Handler+0x10>)
    3ef8:	4798      	blx	r3
    3efa:	bd08      	pop	{r3, pc}
    3efc:	2000047c 	.word	0x2000047c
    3f00:	00003875 	.word	0x00003875

00003f04 <SERCOM5_3_Handler>:
{
    3f04:	b508      	push	{r3, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
    3f06:	4b02      	ldr	r3, [pc, #8]	; (3f10 <SERCOM5_3_Handler+0xc>)
    3f08:	6918      	ldr	r0, [r3, #16]
    3f0a:	4b02      	ldr	r3, [pc, #8]	; (3f14 <SERCOM5_3_Handler+0x10>)
    3f0c:	4798      	blx	r3
    3f0e:	bd08      	pop	{r3, pc}
    3f10:	2000047c 	.word	0x2000047c
    3f14:	00003875 	.word	0x00003875

00003f18 <SERCOM6_0_Handler>:
{
    3f18:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3f1a:	4b02      	ldr	r3, [pc, #8]	; (3f24 <SERCOM6_0_Handler+0xc>)
    3f1c:	6958      	ldr	r0, [r3, #20]
    3f1e:	4b02      	ldr	r3, [pc, #8]	; (3f28 <SERCOM6_0_Handler+0x10>)
    3f20:	4798      	blx	r3
    3f22:	bd08      	pop	{r3, pc}
    3f24:	2000047c 	.word	0x2000047c
    3f28:	000034b1 	.word	0x000034b1

00003f2c <SERCOM6_1_Handler>:
{
    3f2c:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3f2e:	4b02      	ldr	r3, [pc, #8]	; (3f38 <SERCOM6_1_Handler+0xc>)
    3f30:	6958      	ldr	r0, [r3, #20]
    3f32:	4b02      	ldr	r3, [pc, #8]	; (3f3c <SERCOM6_1_Handler+0x10>)
    3f34:	4798      	blx	r3
    3f36:	bd08      	pop	{r3, pc}
    3f38:	2000047c 	.word	0x2000047c
    3f3c:	000034b1 	.word	0x000034b1

00003f40 <SERCOM6_2_Handler>:
{
    3f40:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3f42:	4b02      	ldr	r3, [pc, #8]	; (3f4c <SERCOM6_2_Handler+0xc>)
    3f44:	6958      	ldr	r0, [r3, #20]
    3f46:	4b02      	ldr	r3, [pc, #8]	; (3f50 <SERCOM6_2_Handler+0x10>)
    3f48:	4798      	blx	r3
    3f4a:	bd08      	pop	{r3, pc}
    3f4c:	2000047c 	.word	0x2000047c
    3f50:	000034b1 	.word	0x000034b1

00003f54 <SERCOM6_3_Handler>:
{
    3f54:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom6_dev);
    3f56:	4b02      	ldr	r3, [pc, #8]	; (3f60 <SERCOM6_3_Handler+0xc>)
    3f58:	6958      	ldr	r0, [r3, #20]
    3f5a:	4b02      	ldr	r3, [pc, #8]	; (3f64 <SERCOM6_3_Handler+0x10>)
    3f5c:	4798      	blx	r3
    3f5e:	bd08      	pop	{r3, pc}
    3f60:	2000047c 	.word	0x2000047c
    3f64:	000034b1 	.word	0x000034b1

00003f68 <_spi_m_sync_init>:
{
    3f68:	b570      	push	{r4, r5, r6, lr}
    3f6a:	4606      	mov	r6, r0
    3f6c:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    3f6e:	4608      	mov	r0, r1
    3f70:	4b5d      	ldr	r3, [pc, #372]	; (40e8 <_spi_m_sync_init+0x180>)
    3f72:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    3f74:	2803      	cmp	r0, #3
    3f76:	d00c      	beq.n	3f92 <_spi_m_sync_init+0x2a>
    3f78:	2807      	cmp	r0, #7
    3f7a:	bf08      	it	eq
    3f7c:	2301      	moveq	r3, #1
    3f7e:	d009      	beq.n	3f94 <_spi_m_sync_init+0x2c>
	ASSERT(dev && hw);
    3f80:	2e00      	cmp	r6, #0
    3f82:	f000 809f 	beq.w	40c4 <_spi_m_sync_init+0x15c>
    3f86:	2c00      	cmp	r4, #0
    3f88:	f040 80a5 	bne.w	40d6 <_spi_m_sync_init+0x16e>
	return NULL;
    3f8c:	2500      	movs	r5, #0
	ASSERT(dev && hw);
    3f8e:	2000      	movs	r0, #0
    3f90:	e009      	b.n	3fa6 <_spi_m_sync_init+0x3e>
		if (sercomspi_regs[i].n == n) {
    3f92:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    3f94:	4d55      	ldr	r5, [pc, #340]	; (40ec <_spi_m_sync_init+0x184>)
    3f96:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    3f9a:	441d      	add	r5, r3
	ASSERT(dev && hw);
    3f9c:	2e00      	cmp	r6, #0
    3f9e:	d0f6      	beq.n	3f8e <_spi_m_sync_init+0x26>
    3fa0:	2001      	movs	r0, #1
    3fa2:	2c00      	cmp	r4, #0
    3fa4:	d0f3      	beq.n	3f8e <_spi_m_sync_init+0x26>
    3fa6:	f640 226e 	movw	r2, #2670	; 0xa6e
    3faa:	4951      	ldr	r1, [pc, #324]	; (40f0 <_spi_m_sync_init+0x188>)
    3fac:	4b51      	ldr	r3, [pc, #324]	; (40f4 <_spi_m_sync_init+0x18c>)
    3fae:	4798      	blx	r3
	if (regs == NULL) {
    3fb0:	2d00      	cmp	r5, #0
    3fb2:	f000 8084 	beq.w	40be <_spi_m_sync_init+0x156>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    3fb6:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    3fb8:	f013 0f01 	tst.w	r3, #1
    3fbc:	d11d      	bne.n	3ffa <_spi_m_sync_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    3fbe:	682b      	ldr	r3, [r5, #0]
    3fc0:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3fc4:	69e3      	ldr	r3, [r4, #28]
    3fc6:	f013 0f03 	tst.w	r3, #3
    3fca:	d1fb      	bne.n	3fc4 <_spi_m_sync_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    3fcc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    3fce:	f013 0f02 	tst.w	r3, #2
    3fd2:	d00b      	beq.n	3fec <_spi_m_sync_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3fd4:	6823      	ldr	r3, [r4, #0]
    3fd6:	f023 0302 	bic.w	r3, r3, #2
    3fda:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3fdc:	69e3      	ldr	r3, [r4, #28]
    3fde:	f013 0f03 	tst.w	r3, #3
    3fe2:	d1fb      	bne.n	3fdc <_spi_m_sync_init+0x74>
    3fe4:	69e3      	ldr	r3, [r4, #28]
    3fe6:	f013 0f02 	tst.w	r3, #2
    3fea:	d1fb      	bne.n	3fe4 <_spi_m_sync_init+0x7c>
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    3fec:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    3ff0:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    3ff2:	69e3      	ldr	r3, [r4, #28]
    3ff4:	f013 0f03 	tst.w	r3, #3
    3ff8:	d1fb      	bne.n	3ff2 <_spi_m_sync_init+0x8a>
    3ffa:	69e3      	ldr	r3, [r4, #28]
    3ffc:	f013 0f01 	tst.w	r3, #1
    4000:	d1fb      	bne.n	3ffa <_spi_m_sync_init+0x92>
	dev->prvt = hw;
    4002:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    4004:	682b      	ldr	r3, [r5, #0]
    4006:	f003 031c 	and.w	r3, r3, #28
    400a:	2b08      	cmp	r3, #8
    400c:	d02e      	beq.n	406c <_spi_m_sync_init+0x104>
	ASSERT(hw && regs);
    400e:	f44f 6217 	mov.w	r2, #2416	; 0x970
    4012:	4937      	ldr	r1, [pc, #220]	; (40f0 <_spi_m_sync_init+0x188>)
    4014:	1c20      	adds	r0, r4, #0
    4016:	bf18      	it	ne
    4018:	2001      	movne	r0, #1
    401a:	4b36      	ldr	r3, [pc, #216]	; (40f4 <_spi_m_sync_init+0x18c>)
    401c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    401e:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    4020:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    4024:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4028:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    402a:	69e3      	ldr	r3, [r4, #28]
    402c:	f013 0f03 	tst.w	r3, #3
    4030:	d1fb      	bne.n	402a <_spi_m_sync_init+0xc2>
	    (regs->ctrlb
    4032:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    4034:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    4038:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    403c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    4040:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4042:	69e3      	ldr	r3, [r4, #28]
    4044:	f013 0f17 	tst.w	r3, #23
    4048:	d1fb      	bne.n	4042 <_spi_m_sync_init+0xda>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    404a:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    404c:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    404e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    4050:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    4054:	686b      	ldr	r3, [r5, #4]
    4056:	f003 0307 	and.w	r3, r3, #7
    405a:	2b00      	cmp	r3, #0
    405c:	bf0c      	ite	eq
    405e:	2301      	moveq	r3, #1
    4060:	2302      	movne	r3, #2
    4062:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    4064:	89eb      	ldrh	r3, [r5, #14]
    4066:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
    4068:	2000      	movs	r0, #0
    406a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(hw && regs);
    406c:	f640 1284 	movw	r2, #2436	; 0x984
    4070:	491f      	ldr	r1, [pc, #124]	; (40f0 <_spi_m_sync_init+0x188>)
    4072:	1c20      	adds	r0, r4, #0
    4074:	bf18      	it	ne
    4076:	2001      	movne	r0, #1
    4078:	4b1e      	ldr	r3, [pc, #120]	; (40f4 <_spi_m_sync_init+0x18c>)
    407a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    407c:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
    407e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    4082:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4086:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4088:	69e3      	ldr	r3, [r4, #28]
    408a:	f013 0f03 	tst.w	r3, #3
    408e:	d1fb      	bne.n	4088 <_spi_m_sync_init+0x120>
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    4090:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    4092:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
    4096:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
    409a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    409e:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    40a2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    40a4:	69e3      	ldr	r3, [r4, #28]
    40a6:	f013 0f17 	tst.w	r3, #23
    40aa:	d1fb      	bne.n	40a4 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    40ac:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    40ae:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    40b0:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    40b2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    40b6:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    40b8:	2b00      	cmp	r3, #0
    40ba:	d1fc      	bne.n	40b6 <_spi_m_sync_init+0x14e>
    40bc:	e7ca      	b.n	4054 <_spi_m_sync_init+0xec>
		return ERR_INVALID_ARG;
    40be:	f06f 000c 	mvn.w	r0, #12
    40c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    40c4:	f640 226e 	movw	r2, #2670	; 0xa6e
    40c8:	4909      	ldr	r1, [pc, #36]	; (40f0 <_spi_m_sync_init+0x188>)
    40ca:	2000      	movs	r0, #0
    40cc:	4b09      	ldr	r3, [pc, #36]	; (40f4 <_spi_m_sync_init+0x18c>)
    40ce:	4798      	blx	r3
		return ERR_INVALID_ARG;
    40d0:	f06f 000c 	mvn.w	r0, #12
    40d4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    40d6:	f640 226e 	movw	r2, #2670	; 0xa6e
    40da:	4905      	ldr	r1, [pc, #20]	; (40f0 <_spi_m_sync_init+0x188>)
    40dc:	2001      	movs	r0, #1
    40de:	4b05      	ldr	r3, [pc, #20]	; (40f4 <_spi_m_sync_init+0x18c>)
    40e0:	4798      	blx	r3
		return ERR_INVALID_ARG;
    40e2:	f06f 000c 	mvn.w	r0, #12
    40e6:	bd70      	pop	{r4, r5, r6, pc}
    40e8:	0000346d 	.word	0x0000346d
    40ec:	00008734 	.word	0x00008734
    40f0:	00008758 	.word	0x00008758
    40f4:	000026ad 	.word	0x000026ad

000040f8 <_spi_m_async_init>:
{
    40f8:	b538      	push	{r3, r4, r5, lr}
    40fa:	4604      	mov	r4, r0
    40fc:	460d      	mov	r5, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
    40fe:	4b15      	ldr	r3, [pc, #84]	; (4154 <_spi_m_async_init+0x5c>)
    4100:	4798      	blx	r3
	if (rc < 0) {
    4102:	2800      	cmp	r0, #0
    4104:	db24      	blt.n	4150 <_spi_m_async_init+0x58>
	_sercom_init_irq_param(hw, (void *)dev);
    4106:	4621      	mov	r1, r4
    4108:	4628      	mov	r0, r5
    410a:	4b13      	ldr	r3, [pc, #76]	; (4158 <_spi_m_async_init+0x60>)
    410c:	4798      	blx	r3
	spid->callbacks.complete = NULL;
    410e:	2300      	movs	r3, #0
    4110:	6123      	str	r3, [r4, #16]
	spid->callbacks.rx       = NULL;
    4112:	60e3      	str	r3, [r4, #12]
	spid->callbacks.tx       = NULL;
    4114:	60a3      	str	r3, [r4, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
    4116:	4628      	mov	r0, r5
    4118:	4b10      	ldr	r3, [pc, #64]	; (415c <_spi_m_async_init+0x64>)
    411a:	4798      	blx	r3
    411c:	1d01      	adds	r1, r0, #4
    411e:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4120:	2401      	movs	r4, #1
    4122:	f000 021f 	and.w	r2, r0, #31
    4126:	fa04 f202 	lsl.w	r2, r4, r2
    412a:	0943      	lsrs	r3, r0, #5
    412c:	009b      	lsls	r3, r3, #2
    412e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4132:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    413a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    413e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4142:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq++;
    4146:	3001      	adds	r0, #1
    4148:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    414a:	4281      	cmp	r1, r0
    414c:	d1e9      	bne.n	4122 <_spi_m_async_init+0x2a>
	return ERR_NONE;
    414e:	2000      	movs	r0, #0
}
    4150:	bd38      	pop	{r3, r4, r5, pc}
    4152:	bf00      	nop
    4154:	00003f69 	.word	0x00003f69
    4158:	00003521 	.word	0x00003521
    415c:	00003581 	.word	0x00003581

00004160 <_spi_m_async_enable_tx>:
{
    4160:	b538      	push	{r3, r4, r5, lr}
    4162:	460d      	mov	r5, r1
	void *hw = dev->prvt;
    4164:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
    4166:	b160      	cbz	r0, 4182 <_spi_m_async_enable_tx+0x22>
    4168:	1c20      	adds	r0, r4, #0
    416a:	bf18      	it	ne
    416c:	2001      	movne	r0, #1
    416e:	f640 32fe 	movw	r2, #3070	; 0xbfe
    4172:	4906      	ldr	r1, [pc, #24]	; (418c <_spi_m_async_enable_tx+0x2c>)
    4174:	4b06      	ldr	r3, [pc, #24]	; (4190 <_spi_m_async_enable_tx+0x30>)
    4176:	4798      	blx	r3
	if (state) {
    4178:	b92d      	cbnz	r5, 4186 <_spi_m_async_enable_tx+0x26>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
    417a:	2301      	movs	r3, #1
    417c:	7523      	strb	r3, [r4, #20]
}
    417e:	2000      	movs	r0, #0
    4180:	bd38      	pop	{r3, r4, r5, pc}
    4182:	2000      	movs	r0, #0
    4184:	e7f3      	b.n	416e <_spi_m_async_enable_tx+0xe>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
    4186:	2301      	movs	r3, #1
    4188:	75a3      	strb	r3, [r4, #22]
    418a:	e7f8      	b.n	417e <_spi_m_async_enable_tx+0x1e>
    418c:	00008758 	.word	0x00008758
    4190:	000026ad 	.word	0x000026ad

00004194 <_spi_m_async_enable_rx>:
{
    4194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4196:	460f      	mov	r7, r1
	void *hw = dev->prvt;
    4198:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
    419a:	4e0c      	ldr	r6, [pc, #48]	; (41cc <_spi_m_async_enable_rx+0x38>)
    419c:	f640 4212 	movw	r2, #3090	; 0xc12
    41a0:	4631      	mov	r1, r6
    41a2:	3000      	adds	r0, #0
    41a4:	bf18      	it	ne
    41a6:	2001      	movne	r0, #1
    41a8:	4d09      	ldr	r5, [pc, #36]	; (41d0 <_spi_m_async_enable_rx+0x3c>)
    41aa:	47a8      	blx	r5
	ASSERT(hw);
    41ac:	f640 4213 	movw	r2, #3091	; 0xc13
    41b0:	4631      	mov	r1, r6
    41b2:	1c20      	adds	r0, r4, #0
    41b4:	bf18      	it	ne
    41b6:	2001      	movne	r0, #1
    41b8:	47a8      	blx	r5
	if (state) {
    41ba:	b91f      	cbnz	r7, 41c4 <_spi_m_async_enable_rx+0x30>
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
    41bc:	2304      	movs	r3, #4
    41be:	7523      	strb	r3, [r4, #20]
}
    41c0:	2000      	movs	r0, #0
    41c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
    41c4:	2304      	movs	r3, #4
    41c6:	75a3      	strb	r3, [r4, #22]
    41c8:	e7fa      	b.n	41c0 <_spi_m_async_enable_rx+0x2c>
    41ca:	bf00      	nop
    41cc:	00008758 	.word	0x00008758
    41d0:	000026ad 	.word	0x000026ad

000041d4 <_spi_m_async_enable_tx_complete>:
{
    41d4:	b538      	push	{r3, r4, r5, lr}
    41d6:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    41d8:	4604      	mov	r4, r0
    41da:	b170      	cbz	r0, 41fa <_spi_m_async_enable_tx_complete+0x26>
    41dc:	6800      	ldr	r0, [r0, #0]
    41de:	3000      	adds	r0, #0
    41e0:	bf18      	it	ne
    41e2:	2001      	movne	r0, #1
    41e4:	f640 4225 	movw	r2, #3109	; 0xc25
    41e8:	4907      	ldr	r1, [pc, #28]	; (4208 <_spi_m_async_enable_tx_complete+0x34>)
    41ea:	4b08      	ldr	r3, [pc, #32]	; (420c <_spi_m_async_enable_tx_complete+0x38>)
    41ec:	4798      	blx	r3
	if (state) {
    41ee:	b935      	cbnz	r5, 41fe <_spi_m_async_enable_tx_complete+0x2a>
		hri_sercomspi_clear_INTEN_TXC_bit(dev->prvt);
    41f0:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
    41f2:	2202      	movs	r2, #2
    41f4:	751a      	strb	r2, [r3, #20]
}
    41f6:	2000      	movs	r0, #0
    41f8:	bd38      	pop	{r3, r4, r5, pc}
    41fa:	2000      	movs	r0, #0
    41fc:	e7f2      	b.n	41e4 <_spi_m_async_enable_tx_complete+0x10>
		hri_sercomspi_set_INTEN_TXC_bit(dev->prvt);
    41fe:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
    4200:	2202      	movs	r2, #2
    4202:	759a      	strb	r2, [r3, #22]
    4204:	e7f7      	b.n	41f6 <_spi_m_async_enable_tx_complete+0x22>
    4206:	bf00      	nop
    4208:	00008758 	.word	0x00008758
    420c:	000026ad 	.word	0x000026ad

00004210 <_spi_m_async_write_one>:
{
    4210:	b538      	push	{r3, r4, r5, lr}
    4212:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
    4214:	4604      	mov	r4, r0
    4216:	b160      	cbz	r0, 4232 <_spi_m_async_write_one+0x22>
    4218:	6800      	ldr	r0, [r0, #0]
    421a:	3000      	adds	r0, #0
    421c:	bf18      	it	ne
    421e:	2001      	movne	r0, #1
    4220:	f640 4237 	movw	r2, #3127	; 0xc37
    4224:	4904      	ldr	r1, [pc, #16]	; (4238 <_spi_m_async_write_one+0x28>)
    4226:	4b05      	ldr	r3, [pc, #20]	; (423c <_spi_m_async_write_one+0x2c>)
    4228:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
    422a:	6823      	ldr	r3, [r4, #0]
	((Sercom *)hw)->SPI.DATA.reg = data;
    422c:	629d      	str	r5, [r3, #40]	; 0x28
}
    422e:	2000      	movs	r0, #0
    4230:	bd38      	pop	{r3, r4, r5, pc}
    4232:	2000      	movs	r0, #0
    4234:	e7f4      	b.n	4220 <_spi_m_async_write_one+0x10>
    4236:	bf00      	nop
    4238:	00008758 	.word	0x00008758
    423c:	000026ad 	.word	0x000026ad

00004240 <_spi_m_async_read_one>:
{
    4240:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    4242:	4604      	mov	r4, r0
    4244:	b160      	cbz	r0, 4260 <_spi_m_async_read_one+0x20>
    4246:	6800      	ldr	r0, [r0, #0]
    4248:	3000      	adds	r0, #0
    424a:	bf18      	it	ne
    424c:	2001      	movne	r0, #1
    424e:	f640 4252 	movw	r2, #3154	; 0xc52
    4252:	4904      	ldr	r1, [pc, #16]	; (4264 <_spi_m_async_read_one+0x24>)
    4254:	4b04      	ldr	r3, [pc, #16]	; (4268 <_spi_m_async_read_one+0x28>)
    4256:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
    4258:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
    425a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    425c:	b280      	uxth	r0, r0
    425e:	bd10      	pop	{r4, pc}
    4260:	2000      	movs	r0, #0
    4262:	e7f4      	b.n	424e <_spi_m_async_read_one+0xe>
    4264:	00008758 	.word	0x00008758
    4268:	000026ad 	.word	0x000026ad

0000426c <_spi_m_async_register_callback>:
{
    426c:	b570      	push	{r4, r5, r6, lr}
    426e:	460d      	mov	r5, r1
    4270:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
    4272:	4604      	mov	r4, r0
    4274:	b168      	cbz	r0, 4292 <_spi_m_async_register_callback+0x26>
    4276:	2903      	cmp	r1, #3
    4278:	bf8c      	ite	hi
    427a:	2000      	movhi	r0, #0
    427c:	2001      	movls	r0, #1
    427e:	f640 426b 	movw	r2, #3179	; 0xc6b
    4282:	4905      	ldr	r1, [pc, #20]	; (4298 <_spi_m_async_register_callback+0x2c>)
    4284:	4b05      	ldr	r3, [pc, #20]	; (429c <_spi_m_async_register_callback+0x30>)
    4286:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
    4288:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    428c:	60a6      	str	r6, [r4, #8]
}
    428e:	2000      	movs	r0, #0
    4290:	bd70      	pop	{r4, r5, r6, pc}
    4292:	2000      	movs	r0, #0
    4294:	e7f3      	b.n	427e <_spi_m_async_register_callback+0x12>
    4296:	bf00      	nop
    4298:	00008758 	.word	0x00008758
    429c:	000026ad 	.word	0x000026ad

000042a0 <_spi_m_dma_init>:
	}
}

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
    42a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42a4:	4605      	mov	r5, r0
    42a6:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    42a8:	4608      	mov	r0, r1
    42aa:	4b52      	ldr	r3, [pc, #328]	; (43f4 <_spi_m_dma_init+0x154>)
    42ac:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    42ae:	2803      	cmp	r0, #3
    42b0:	d00c      	beq.n	42cc <_spi_m_dma_init+0x2c>
    42b2:	2807      	cmp	r0, #7
    42b4:	bf08      	it	eq
    42b6:	2301      	moveq	r3, #1
    42b8:	d009      	beq.n	42ce <_spi_m_dma_init+0x2e>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    42ba:	2d00      	cmp	r5, #0
    42bc:	f000 8086 	beq.w	43cc <_spi_m_dma_init+0x12c>
    42c0:	2c00      	cmp	r4, #0
    42c2:	f040 808d 	bne.w	43e0 <_spi_m_dma_init+0x140>
	return NULL;
    42c6:	2600      	movs	r6, #0
	ASSERT(dev && hw);
    42c8:	2000      	movs	r0, #0
    42ca:	e009      	b.n	42e0 <_spi_m_dma_init+0x40>
		if (sercomspi_regs[i].n == n) {
    42cc:	2300      	movs	r3, #0
			return &sercomspi_regs[i];
    42ce:	4e4a      	ldr	r6, [pc, #296]	; (43f8 <_spi_m_dma_init+0x158>)
    42d0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    42d4:	441e      	add	r6, r3
	ASSERT(dev && hw);
    42d6:	2d00      	cmp	r5, #0
    42d8:	d0f6      	beq.n	42c8 <_spi_m_dma_init+0x28>
    42da:	2001      	movs	r0, #1
    42dc:	2c00      	cmp	r4, #0
    42de:	d0f3      	beq.n	42c8 <_spi_m_dma_init+0x28>
    42e0:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    42e4:	4945      	ldr	r1, [pc, #276]	; (43fc <_spi_m_dma_init+0x15c>)
    42e6:	4b46      	ldr	r3, [pc, #280]	; (4400 <_spi_m_dma_init+0x160>)
    42e8:	4798      	blx	r3

	if (regs == NULL) {
    42ea:	2e00      	cmp	r6, #0
    42ec:	d06a      	beq.n	43c4 <_spi_m_dma_init+0x124>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    42ee:	69e3      	ldr	r3, [r4, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    42f0:	f013 0f01 	tst.w	r3, #1
    42f4:	d11d      	bne.n	4332 <_spi_m_dma_init+0x92>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    42f6:	6833      	ldr	r3, [r6, #0]
    42f8:	f003 021c 	and.w	r2, r3, #28
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    42fc:	69e3      	ldr	r3, [r4, #28]
    42fe:	f013 0f03 	tst.w	r3, #3
    4302:	d1fb      	bne.n	42fc <_spi_m_dma_init+0x5c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    4304:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    4306:	f013 0f02 	tst.w	r3, #2
    430a:	d00b      	beq.n	4324 <_spi_m_dma_init+0x84>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    430c:	6823      	ldr	r3, [r4, #0]
    430e:	f023 0302 	bic.w	r3, r3, #2
    4312:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4314:	69e3      	ldr	r3, [r4, #28]
    4316:	f013 0f03 	tst.w	r3, #3
    431a:	d1fb      	bne.n	4314 <_spi_m_dma_init+0x74>
    431c:	69e3      	ldr	r3, [r4, #28]
    431e:	f013 0f02 	tst.w	r3, #2
    4322:	d1fb      	bne.n	431c <_spi_m_dma_init+0x7c>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    4324:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4328:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    432a:	69e3      	ldr	r3, [r4, #28]
    432c:	f013 0f03 	tst.w	r3, #3
    4330:	d1fb      	bne.n	432a <_spi_m_dma_init+0x8a>
    4332:	69e3      	ldr	r3, [r4, #28]
    4334:	f013 0f01 	tst.w	r3, #1
    4338:	d1fb      	bne.n	4332 <_spi_m_dma_init+0x92>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    433a:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    433c:	f44f 6217 	mov.w	r2, #2416	; 0x970
    4340:	492e      	ldr	r1, [pc, #184]	; (43fc <_spi_m_dma_init+0x15c>)
    4342:	1c20      	adds	r0, r4, #0
    4344:	bf18      	it	ne
    4346:	2001      	movne	r0, #1
    4348:	4b2d      	ldr	r3, [pc, #180]	; (4400 <_spi_m_dma_init+0x160>)
    434a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    434c:	6833      	ldr	r3, [r6, #0]
	hri_sercomspi_write_CTRLA_reg(
    434e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
    4352:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    4356:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4358:	69e3      	ldr	r3, [r4, #28]
    435a:	f013 0f03 	tst.w	r3, #3
    435e:	d1fb      	bne.n	4358 <_spi_m_dma_init+0xb8>
	    (regs->ctrlb
    4360:	6873      	ldr	r3, [r6, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
    4362:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
    4366:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
    436a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    436e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4370:	69e3      	ldr	r3, [r4, #28]
    4372:	f013 0f17 	tst.w	r3, #23
    4376:	d1fb      	bne.n	4370 <_spi_m_dma_init+0xd0>
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    4378:	7b33      	ldrb	r3, [r6, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    437a:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    437c:	7b73      	ldrb	r3, [r6, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    437e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	_spi_load_regs_master(hw, regs);

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_rx_dma_channel(hw));
    4382:	f105 0818 	add.w	r8, r5, #24
    4386:	4620      	mov	r0, r4
    4388:	4b1e      	ldr	r3, [pc, #120]	; (4404 <_spi_m_dma_init+0x164>)
    438a:	4798      	blx	r3
    438c:	4601      	mov	r1, r0
    438e:	4640      	mov	r0, r8
    4390:	4f1d      	ldr	r7, [pc, #116]	; (4408 <_spi_m_dma_init+0x168>)
    4392:	47b8      	blx	r7
	dev->resource->back                 = dev;
    4394:	69ab      	ldr	r3, [r5, #24]
    4396:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
    4398:	69ab      	ldr	r3, [r5, #24]
    439a:	4a1c      	ldr	r2, [pc, #112]	; (440c <_spi_m_dma_init+0x16c>)
    439c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    439e:	69ab      	ldr	r3, [r5, #24]
    43a0:	4e1b      	ldr	r6, [pc, #108]	; (4410 <_spi_m_dma_init+0x170>)
    43a2:	605e      	str	r6, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
    43a4:	4620      	mov	r0, r4
    43a6:	4b1b      	ldr	r3, [pc, #108]	; (4414 <_spi_m_dma_init+0x174>)
    43a8:	4798      	blx	r3
    43aa:	4601      	mov	r1, r0
    43ac:	4640      	mov	r0, r8
    43ae:	47b8      	blx	r7
	dev->resource->back                 = dev;
    43b0:	69ab      	ldr	r3, [r5, #24]
    43b2:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
    43b4:	69ab      	ldr	r3, [r5, #24]
    43b6:	4a18      	ldr	r2, [pc, #96]	; (4418 <_spi_m_dma_init+0x178>)
    43b8:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
    43ba:	69ab      	ldr	r3, [r5, #24]
    43bc:	605e      	str	r6, [r3, #4]

	return ERR_NONE;
    43be:	2000      	movs	r0, #0
    43c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ERR_INVALID_ARG;
    43c4:	f06f 000c 	mvn.w	r0, #12
    43c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    43cc:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    43d0:	490a      	ldr	r1, [pc, #40]	; (43fc <_spi_m_dma_init+0x15c>)
    43d2:	2000      	movs	r0, #0
    43d4:	4b0a      	ldr	r3, [pc, #40]	; (4400 <_spi_m_dma_init+0x160>)
    43d6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    43d8:	f06f 000c 	mvn.w	r0, #12
    43dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
    43e0:	f44f 625a 	mov.w	r2, #3488	; 0xda0
    43e4:	4905      	ldr	r1, [pc, #20]	; (43fc <_spi_m_dma_init+0x15c>)
    43e6:	2001      	movs	r0, #1
    43e8:	4b05      	ldr	r3, [pc, #20]	; (4400 <_spi_m_dma_init+0x160>)
    43ea:	4798      	blx	r3
		return ERR_INVALID_ARG;
    43ec:	f06f 000c 	mvn.w	r0, #12
    43f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43f4:	0000346d 	.word	0x0000346d
    43f8:	00008734 	.word	0x00008734
    43fc:	00008758 	.word	0x00008758
    4400:	000026ad 	.word	0x000026ad
    4404:	000035f5 	.word	0x000035f5
    4408:	00002e75 	.word	0x00002e75
    440c:	00003609 	.word	0x00003609
    4410:	00003621 	.word	0x00003621
    4414:	000035e1 	.word	0x000035e1
    4418:	00003615 	.word	0x00003615

0000441c <_spi_m_dma_transfer>:
	}
}

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
    441c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4420:	4605      	mov	r5, r0
    4422:	4689      	mov	r9, r1
    4424:	4617      	mov	r7, r2
    4426:	4698      	mov	r8, r3
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
    4428:	f8d0 b000 	ldr.w	fp, [r0]
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    442c:	4658      	mov	r0, fp
    442e:	4b46      	ldr	r3, [pc, #280]	; (4548 <_spi_m_dma_transfer+0x12c>)
    4430:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    4432:	2803      	cmp	r0, #3
    4434:	d053      	beq.n	44de <_spi_m_dma_transfer+0xc2>
    4436:	2807      	cmp	r0, #7
    4438:	bf08      	it	eq
    443a:	2201      	moveq	r2, #1
    443c:	d050      	beq.n	44e0 <_spi_m_dma_transfer+0xc4>
	return NULL;
    443e:	f04f 0a00 	mov.w	sl, #0
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
    4442:	4658      	mov	r0, fp
    4444:	4b41      	ldr	r3, [pc, #260]	; (454c <_spi_m_dma_transfer+0x130>)
    4446:	4798      	blx	r3
    4448:	4606      	mov	r6, r0
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);
    444a:	4658      	mov	r0, fp
    444c:	4b40      	ldr	r3, [pc, #256]	; (4550 <_spi_m_dma_transfer+0x134>)
    444e:	4798      	blx	r3
    4450:	4604      	mov	r4, r0

	if (rxbuf) {
    4452:	2f00      	cmp	r7, #0
    4454:	d04b      	beq.n	44ee <_spi_m_dma_transfer+0xd2>
	ASSERT(dev && dev->prvt);
    4456:	2d00      	cmp	r5, #0
    4458:	d047      	beq.n	44ea <_spi_m_dma_transfer+0xce>
    445a:	f11b 0000 	adds.w	r0, fp, #0
    445e:	bf18      	it	ne
    4460:	2001      	movne	r0, #1
    4462:	f640 5213 	movw	r2, #3347	; 0xd13
    4466:	493b      	ldr	r1, [pc, #236]	; (4554 <_spi_m_dma_transfer+0x138>)
    4468:	4b3b      	ldr	r3, [pc, #236]	; (4558 <_spi_m_dma_transfer+0x13c>)
    446a:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
    446c:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    446e:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    4470:	f013 0f04 	tst.w	r3, #4
    4474:	d107      	bne.n	4486 <_spi_m_dma_transfer+0x6a>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
    4476:	6853      	ldr	r3, [r2, #4]
    4478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    447c:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    447e:	69d3      	ldr	r3, [r2, #28]
    4480:	f013 0f17 	tst.w	r3, #23
    4484:	d1fb      	bne.n	447e <_spi_m_dma_transfer+0x62>
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    4486:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
    4488:	3128      	adds	r1, #40	; 0x28
    448a:	4630      	mov	r0, r6
    448c:	4b33      	ldr	r3, [pc, #204]	; (455c <_spi_m_dma_transfer+0x140>)
    448e:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
    4490:	4639      	mov	r1, r7
    4492:	4630      	mov	r0, r6
    4494:	4b32      	ldr	r3, [pc, #200]	; (4560 <_spi_m_dma_transfer+0x144>)
    4496:	4798      	blx	r3
		_dma_set_data_amount(rx_ch, length);
    4498:	4641      	mov	r1, r8
    449a:	4630      	mov	r0, r6
    449c:	4b31      	ldr	r3, [pc, #196]	; (4564 <_spi_m_dma_transfer+0x148>)
    449e:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
    44a0:	2100      	movs	r1, #0
    44a2:	4630      	mov	r0, r6
    44a4:	4b30      	ldr	r3, [pc, #192]	; (4568 <_spi_m_dma_transfer+0x14c>)
    44a6:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
    44a8:	f1b9 0f00 	cmp.w	r9, #0
    44ac:	d039      	beq.n	4522 <_spi_m_dma_transfer+0x106>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
    44ae:	4649      	mov	r1, r9
    44b0:	4620      	mov	r0, r4
    44b2:	4b2a      	ldr	r3, [pc, #168]	; (455c <_spi_m_dma_transfer+0x140>)
    44b4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    44b6:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    44b8:	3128      	adds	r1, #40	; 0x28
    44ba:	4620      	mov	r0, r4
    44bc:	4b28      	ldr	r3, [pc, #160]	; (4560 <_spi_m_dma_transfer+0x144>)
    44be:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, true);
    44c0:	2101      	movs	r1, #1
    44c2:	4620      	mov	r0, r4
    44c4:	4b29      	ldr	r3, [pc, #164]	; (456c <_spi_m_dma_transfer+0x150>)
    44c6:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    44c8:	4641      	mov	r1, r8
    44ca:	4620      	mov	r0, r4
    44cc:	4b25      	ldr	r3, [pc, #148]	; (4564 <_spi_m_dma_transfer+0x148>)
    44ce:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
		_dma_set_data_amount(tx_ch, length);
	}
	_dma_enable_transaction(tx_ch, false);
    44d0:	2100      	movs	r1, #0
    44d2:	4620      	mov	r0, r4
    44d4:	4b24      	ldr	r3, [pc, #144]	; (4568 <_spi_m_dma_transfer+0x14c>)
    44d6:	4798      	blx	r3

	return ERR_NONE;
}
    44d8:	2000      	movs	r0, #0
    44da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sercomspi_regs[i].n == n) {
    44de:	2200      	movs	r2, #0
			return &sercomspi_regs[i];
    44e0:	4b23      	ldr	r3, [pc, #140]	; (4570 <_spi_m_dma_transfer+0x154>)
    44e2:	eb03 1a02 	add.w	sl, r3, r2, lsl #4
    44e6:	4492      	add	sl, r2
    44e8:	e7ab      	b.n	4442 <_spi_m_dma_transfer+0x26>
	ASSERT(dev && dev->prvt);
    44ea:	2000      	movs	r0, #0
    44ec:	e7b9      	b.n	4462 <_spi_m_dma_transfer+0x46>
	ASSERT(dev && dev->prvt);
    44ee:	b1b5      	cbz	r5, 451e <_spi_m_dma_transfer+0x102>
    44f0:	f11b 0000 	adds.w	r0, fp, #0
    44f4:	bf18      	it	ne
    44f6:	2001      	movne	r0, #1
    44f8:	f640 521a 	movw	r2, #3354	; 0xd1a
    44fc:	4915      	ldr	r1, [pc, #84]	; (4554 <_spi_m_dma_transfer+0x138>)
    44fe:	4b16      	ldr	r3, [pc, #88]	; (4558 <_spi_m_dma_transfer+0x13c>)
    4500:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
    4502:	682a      	ldr	r2, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    4504:	69d3      	ldr	r3, [r2, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
    4506:	f013 0f04 	tst.w	r3, #4
    450a:	d1cd      	bne.n	44a8 <_spi_m_dma_transfer+0x8c>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
    450c:	6853      	ldr	r3, [r2, #4]
    450e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4512:	6053      	str	r3, [r2, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    4514:	69d3      	ldr	r3, [r2, #28]
    4516:	f013 0f17 	tst.w	r3, #23
    451a:	d1fb      	bne.n	4514 <_spi_m_dma_transfer+0xf8>
    451c:	e7c4      	b.n	44a8 <_spi_m_dma_transfer+0x8c>
	ASSERT(dev && dev->prvt);
    451e:	2000      	movs	r0, #0
    4520:	e7ea      	b.n	44f8 <_spi_m_dma_transfer+0xdc>
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
    4522:	f10a 010e 	add.w	r1, sl, #14
    4526:	4620      	mov	r0, r4
    4528:	4b0c      	ldr	r3, [pc, #48]	; (455c <_spi_m_dma_transfer+0x140>)
    452a:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
    452c:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
    452e:	3128      	adds	r1, #40	; 0x28
    4530:	4620      	mov	r0, r4
    4532:	4b0b      	ldr	r3, [pc, #44]	; (4560 <_spi_m_dma_transfer+0x144>)
    4534:	4798      	blx	r3
		_dma_srcinc_enable(tx_ch, false);
    4536:	2100      	movs	r1, #0
    4538:	4620      	mov	r0, r4
    453a:	4b0c      	ldr	r3, [pc, #48]	; (456c <_spi_m_dma_transfer+0x150>)
    453c:	4798      	blx	r3
		_dma_set_data_amount(tx_ch, length);
    453e:	4641      	mov	r1, r8
    4540:	4620      	mov	r0, r4
    4542:	4b08      	ldr	r3, [pc, #32]	; (4564 <_spi_m_dma_transfer+0x148>)
    4544:	4798      	blx	r3
    4546:	e7c3      	b.n	44d0 <_spi_m_dma_transfer+0xb4>
    4548:	0000346d 	.word	0x0000346d
    454c:	000035f5 	.word	0x000035f5
    4550:	000035e1 	.word	0x000035e1
    4554:	00008758 	.word	0x00008758
    4558:	000026ad 	.word	0x000026ad
    455c:	00002db1 	.word	0x00002db1
    4560:	00002da1 	.word	0x00002da1
    4564:	00002ddd 	.word	0x00002ddd
    4568:	00002e35 	.word	0x00002e35
    456c:	00002dc1 	.word	0x00002dc1
    4570:	00008734 	.word	0x00008734

00004574 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    4574:	4b03      	ldr	r3, [pc, #12]	; (4584 <_delay_init+0x10>)
    4576:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    457a:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    457c:	2205      	movs	r2, #5
    457e:	601a      	str	r2, [r3, #0]
    4580:	4770      	bx	lr
    4582:	bf00      	nop
    4584:	e000e010 	.word	0xe000e010

00004588 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    4588:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    458a:	6813      	ldr	r3, [r2, #0]
    458c:	f043 0302 	orr.w	r3, r3, #2
    4590:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4592:	6913      	ldr	r3, [r2, #16]
    4594:	f013 0f03 	tst.w	r3, #3
    4598:	d1fb      	bne.n	4592 <_tc_timer_start+0xa>
}
    459a:	4770      	bx	lr

0000459c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    459c:	68c2      	ldr	r2, [r0, #12]
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    459e:	6813      	ldr	r3, [r2, #0]
    45a0:	f023 0302 	bic.w	r3, r3, #2
    45a4:	6013      	str	r3, [r2, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    45a6:	6913      	ldr	r3, [r2, #16]
    45a8:	f013 0f03 	tst.w	r3, #3
    45ac:	d1fb      	bne.n	45a6 <_tc_timer_stop+0xa>
}
    45ae:	4770      	bx	lr

000045b0 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    45b0:	68c3      	ldr	r3, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    45b2:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    45b4:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    45b8:	2a02      	cmp	r2, #2
    45ba:	d00a      	beq.n	45d2 <_tc_timer_set_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    45bc:	681a      	ldr	r2, [r3, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    45be:	f012 0f0c 	tst.w	r2, #12
    45c2:	d10c      	bne.n	45de <_tc_timer_set_period+0x2e>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    45c4:	b289      	uxth	r1, r1
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    45c6:	8399      	strh	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    45c8:	691a      	ldr	r2, [r3, #16]
    45ca:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    45ce:	d1fb      	bne.n	45c8 <_tc_timer_set_period+0x18>
    45d0:	4770      	bx	lr
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    45d2:	61d9      	str	r1, [r3, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    45d4:	691a      	ldr	r2, [r3, #16]
    45d6:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    45da:	d1fb      	bne.n	45d4 <_tc_timer_set_period+0x24>
    45dc:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    45de:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    45e0:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    45e4:	2a01      	cmp	r2, #1
    45e6:	d000      	beq.n	45ea <_tc_timer_set_period+0x3a>
    45e8:	4770      	bx	lr
		hri_tccount8_write_PER_reg(hw, clock_cycles);
    45ea:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
    45ec:	76d9      	strb	r1, [r3, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    45ee:	691a      	ldr	r2, [r3, #16]
    45f0:	f012 0f20 	tst.w	r2, #32
    45f4:	d1fb      	bne.n	45ee <_tc_timer_set_period+0x3e>
    45f6:	e7f7      	b.n	45e8 <_tc_timer_set_period+0x38>

000045f8 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    45f8:	68c3      	ldr	r3, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    45fa:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    45fc:	f3c2 0281 	ubfx	r2, r2, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4600:	2a02      	cmp	r2, #2
    4602:	d00a      	beq.n	461a <_tc_timer_get_period+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4604:	681a      	ldr	r2, [r3, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4606:	f012 0f0c 	tst.w	r2, #12
    460a:	d10c      	bne.n	4626 <_tc_timer_get_period+0x2e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    460c:	691a      	ldr	r2, [r3, #16]
    460e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4612:	d1fb      	bne.n	460c <_tc_timer_get_period+0x14>
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    4614:	8b98      	ldrh	r0, [r3, #28]
    4616:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    4618:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    461a:	691a      	ldr	r2, [r3, #16]
    461c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
    4620:	d1fb      	bne.n	461a <_tc_timer_get_period+0x22>
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    4622:	69d8      	ldr	r0, [r3, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    4624:	4770      	bx	lr
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4626:	681a      	ldr	r2, [r3, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4628:	f3c2 0281 	ubfx	r2, r2, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    462c:	2a01      	cmp	r2, #1
    462e:	d001      	beq.n	4634 <_tc_timer_get_period+0x3c>
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
    4630:	2000      	movs	r0, #0
}
    4632:	4770      	bx	lr
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4634:	691a      	ldr	r2, [r3, #16]
    4636:	f012 0f20 	tst.w	r2, #32
    463a:	d1fb      	bne.n	4634 <_tc_timer_get_period+0x3c>
	return ((Tc *)hw)->COUNT8.PER.reg;
    463c:	7ed8      	ldrb	r0, [r3, #27]
    463e:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
    4640:	4770      	bx	lr

00004642 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    4642:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4644:	6913      	ldr	r3, [r2, #16]
    4646:	f013 0f03 	tst.w	r3, #3
    464a:	d1fb      	bne.n	4644 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    464c:	6810      	ldr	r0, [r2, #0]
}
    464e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    4652:	4770      	bx	lr

00004654 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4654:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4656:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4658:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    465a:	f012 0f01 	tst.w	r2, #1
    465e:	d100      	bne.n	4662 <tc_interrupt_handler+0xe>
    4660:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    4662:	2201      	movs	r2, #1
    4664:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    4666:	6803      	ldr	r3, [r0, #0]
    4668:	4798      	blx	r3
	}
}
    466a:	e7f9      	b.n	4660 <tc_interrupt_handler+0xc>

0000466c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    466c:	b570      	push	{r4, r5, r6, lr}
    466e:	b088      	sub	sp, #32
    4670:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4672:	466c      	mov	r4, sp
    4674:	4d19      	ldr	r5, [pc, #100]	; (46dc <get_tc_index+0x70>)
    4676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    467a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    467e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    4682:	9b00      	ldr	r3, [sp, #0]
    4684:	42b3      	cmp	r3, r6
    4686:	d00c      	beq.n	46a2 <get_tc_index+0x36>
    4688:	4630      	mov	r0, r6
    468a:	aa01      	add	r2, sp, #4
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    468c:	2301      	movs	r3, #1
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    468e:	f852 1b04 	ldr.w	r1, [r2], #4
    4692:	4281      	cmp	r1, r0
    4694:	d006      	beq.n	46a4 <get_tc_index+0x38>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4696:	3301      	adds	r3, #1
    4698:	2b08      	cmp	r3, #8
    469a:	d1f8      	bne.n	468e <get_tc_index+0x22>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    469c:	2000      	movs	r0, #0
			return i;
    469e:	b240      	sxtb	r0, r0
    46a0:	e013      	b.n	46ca <get_tc_index+0x5e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    46a2:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    46a4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    46a8:	d015      	beq.n	46d6 <get_tc_index+0x6a>
    46aa:	2b01      	cmp	r3, #1
    46ac:	d00f      	beq.n	46ce <get_tc_index+0x62>
    46ae:	2b02      	cmp	r3, #2
    46b0:	d00f      	beq.n	46d2 <get_tc_index+0x66>
    46b2:	2b03      	cmp	r3, #3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    46b4:	bf08      	it	eq
    46b6:	2003      	moveq	r0, #3
		if (_tcs[i].number == index) {
    46b8:	d0f1      	beq.n	469e <get_tc_index+0x32>
	ASSERT(false);
    46ba:	f240 1267 	movw	r2, #359	; 0x167
    46be:	4908      	ldr	r1, [pc, #32]	; (46e0 <get_tc_index+0x74>)
    46c0:	2000      	movs	r0, #0
    46c2:	4b08      	ldr	r3, [pc, #32]	; (46e4 <get_tc_index+0x78>)
    46c4:	4798      	blx	r3
	return -1;
    46c6:	f04f 30ff 	mov.w	r0, #4294967295
}
    46ca:	b008      	add	sp, #32
    46cc:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    46ce:	2001      	movs	r0, #1
    46d0:	e7e5      	b.n	469e <get_tc_index+0x32>
    46d2:	2002      	movs	r0, #2
    46d4:	e7e3      	b.n	469e <get_tc_index+0x32>
    46d6:	2000      	movs	r0, #0
    46d8:	e7e1      	b.n	469e <get_tc_index+0x32>
    46da:	bf00      	nop
    46dc:	00008774 	.word	0x00008774
    46e0:	000087e4 	.word	0x000087e4
    46e4:	000026ad 	.word	0x000026ad

000046e8 <_tc_timer_init>:
{
    46e8:	b570      	push	{r4, r5, r6, lr}
    46ea:	4606      	mov	r6, r0
    46ec:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    46ee:	4608      	mov	r0, r1
    46f0:	4b71      	ldr	r3, [pc, #452]	; (48b8 <_tc_timer_init+0x1d0>)
    46f2:	4798      	blx	r3
    46f4:	4605      	mov	r5, r0
	device->hw = hw;
    46f6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    46f8:	22a0      	movs	r2, #160	; 0xa0
    46fa:	4970      	ldr	r1, [pc, #448]	; (48bc <_tc_timer_init+0x1d4>)
    46fc:	2001      	movs	r0, #1
    46fe:	4b70      	ldr	r3, [pc, #448]	; (48c0 <_tc_timer_init+0x1d8>)
    4700:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    4702:	6923      	ldr	r3, [r4, #16]
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    4704:	f013 0f01 	tst.w	r3, #1
    4708:	d119      	bne.n	473e <_tc_timer_init+0x56>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    470a:	6923      	ldr	r3, [r4, #16]
    470c:	f013 0f03 	tst.w	r3, #3
    4710:	d1fb      	bne.n	470a <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    4712:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    4714:	f013 0f02 	tst.w	r3, #2
    4718:	d00b      	beq.n	4732 <_tc_timer_init+0x4a>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    471a:	6823      	ldr	r3, [r4, #0]
    471c:	f023 0302 	bic.w	r3, r3, #2
    4720:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4722:	6923      	ldr	r3, [r4, #16]
    4724:	f013 0f03 	tst.w	r3, #3
    4728:	d1fb      	bne.n	4722 <_tc_timer_init+0x3a>
    472a:	6923      	ldr	r3, [r4, #16]
    472c:	f013 0f02 	tst.w	r3, #2
    4730:	d1fb      	bne.n	472a <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    4732:	2301      	movs	r3, #1
    4734:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4736:	6923      	ldr	r3, [r4, #16]
    4738:	f013 0f03 	tst.w	r3, #3
    473c:	d1fb      	bne.n	4736 <_tc_timer_init+0x4e>
    473e:	6923      	ldr	r3, [r4, #16]
    4740:	f013 0f01 	tst.w	r3, #1
    4744:	d1fb      	bne.n	473e <_tc_timer_init+0x56>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4746:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    474a:	4a5e      	ldr	r2, [pc, #376]	; (48c4 <_tc_timer_init+0x1dc>)
    474c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    4752:	6022      	str	r2, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4754:	6923      	ldr	r3, [r4, #16]
    4756:	f013 0f03 	tst.w	r3, #3
    475a:	d1fb      	bne.n	4754 <_tc_timer_init+0x6c>
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    475c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4760:	4958      	ldr	r1, [pc, #352]	; (48c4 <_tc_timer_init+0x1dc>)
    4762:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4766:	f893 102a 	ldrb.w	r1, [r3, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    476a:	73e1      	strb	r1, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    476e:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    4770:	2301      	movs	r3, #1
    4772:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    4774:	f002 020c 	and.w	r2, r2, #12
    4778:	2a08      	cmp	r2, #8
    477a:	d056      	beq.n	482a <_tc_timer_init+0x142>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    477c:	2a00      	cmp	r2, #0
    477e:	d16b      	bne.n	4858 <_tc_timer_init+0x170>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    4780:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4784:	4a4f      	ldr	r2, [pc, #316]	; (48c4 <_tc_timer_init+0x1dc>)
    4786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    478a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    478c:	83a3      	strh	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    478e:	6923      	ldr	r3, [r4, #16]
    4790:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4794:	d1fb      	bne.n	478e <_tc_timer_init+0xa6>
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    4796:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    479a:	4a4a      	ldr	r2, [pc, #296]	; (48c4 <_tc_timer_init+0x1dc>)
    479c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    47a0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    47a2:	83e3      	strh	r3, [r4, #30]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    47a4:	6923      	ldr	r3, [r4, #16]
    47a6:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    47aa:	d1fb      	bne.n	47a4 <_tc_timer_init+0xbc>
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    47ac:	2301      	movs	r3, #1
    47ae:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
    47b0:	4b45      	ldr	r3, [pc, #276]	; (48c8 <_tc_timer_init+0x1e0>)
    47b2:	429c      	cmp	r4, r3
    47b4:	d077      	beq.n	48a6 <_tc_timer_init+0x1be>
	if (hw == TC1) {
    47b6:	4b45      	ldr	r3, [pc, #276]	; (48cc <_tc_timer_init+0x1e4>)
    47b8:	429c      	cmp	r4, r3
    47ba:	d077      	beq.n	48ac <_tc_timer_init+0x1c4>
	if (hw == TC2) {
    47bc:	4b44      	ldr	r3, [pc, #272]	; (48d0 <_tc_timer_init+0x1e8>)
    47be:	429c      	cmp	r4, r3
    47c0:	d077      	beq.n	48b2 <_tc_timer_init+0x1ca>
	if (hw == TC3) {
    47c2:	4b44      	ldr	r3, [pc, #272]	; (48d4 <_tc_timer_init+0x1ec>)
    47c4:	429c      	cmp	r4, r3
		_tc3_dev = (struct _timer_device *)dev;
    47c6:	bf04      	itt	eq
    47c8:	4b43      	ldreq	r3, [pc, #268]	; (48d8 <_tc_timer_init+0x1f0>)
    47ca:	60de      	streq	r6, [r3, #12]
	NVIC_DisableIRQ(_tcs[i].irq);
    47cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    47d0:	4a3c      	ldr	r2, [pc, #240]	; (48c4 <_tc_timer_init+0x1dc>)
    47d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    47d6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    47da:	2b00      	cmp	r3, #0
    47dc:	db23      	blt.n	4826 <_tc_timer_init+0x13e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    47de:	095a      	lsrs	r2, r3, #5
    47e0:	f003 031f 	and.w	r3, r3, #31
    47e4:	2101      	movs	r1, #1
    47e6:	fa01 f303 	lsl.w	r3, r1, r3
    47ea:	3220      	adds	r2, #32
    47ec:	493b      	ldr	r1, [pc, #236]	; (48dc <_tc_timer_init+0x1f4>)
    47ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    47f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47f6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    47fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    47fe:	4b31      	ldr	r3, [pc, #196]	; (48c4 <_tc_timer_init+0x1dc>)
    4800:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4804:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4808:	2b00      	cmp	r3, #0
    480a:	db0c      	blt.n	4826 <_tc_timer_init+0x13e>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    480c:	0959      	lsrs	r1, r3, #5
    480e:	f003 031f 	and.w	r3, r3, #31
    4812:	2201      	movs	r2, #1
    4814:	fa02 f303 	lsl.w	r3, r2, r3
    4818:	4a30      	ldr	r2, [pc, #192]	; (48dc <_tc_timer_init+0x1f4>)
    481a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    481e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4822:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4826:	2000      	movs	r0, #0
    4828:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    482a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    482e:	4a25      	ldr	r2, [pc, #148]	; (48c4 <_tc_timer_init+0x1dc>)
    4830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4836:	61e3      	str	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4838:	6923      	ldr	r3, [r4, #16]
    483a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    483e:	d1fb      	bne.n	4838 <_tc_timer_init+0x150>
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4840:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4844:	4a1f      	ldr	r2, [pc, #124]	; (48c4 <_tc_timer_init+0x1dc>)
    4846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    484c:	6223      	str	r3, [r4, #32]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    484e:	6923      	ldr	r3, [r4, #16]
    4850:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4854:	d1fb      	bne.n	484e <_tc_timer_init+0x166>
    4856:	e7a9      	b.n	47ac <_tc_timer_init+0xc4>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    4858:	2a04      	cmp	r2, #4
    485a:	d1a7      	bne.n	47ac <_tc_timer_init+0xc4>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    485c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4860:	4a18      	ldr	r2, [pc, #96]	; (48c4 <_tc_timer_init+0x1dc>)
    4862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4866:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    486a:	7723      	strb	r3, [r4, #28]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    486c:	6923      	ldr	r3, [r4, #16]
    486e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    4872:	d1fb      	bne.n	486c <_tc_timer_init+0x184>
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    4874:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4878:	4a12      	ldr	r2, [pc, #72]	; (48c4 <_tc_timer_init+0x1dc>)
    487a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    487e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    4882:	7763      	strb	r3, [r4, #29]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4884:	6923      	ldr	r3, [r4, #16]
    4886:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    488a:	d1fb      	bne.n	4884 <_tc_timer_init+0x19c>
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    488c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4890:	4a0c      	ldr	r2, [pc, #48]	; (48c4 <_tc_timer_init+0x1dc>)
    4892:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4896:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
    489a:	76e3      	strb	r3, [r4, #27]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    489c:	6923      	ldr	r3, [r4, #16]
    489e:	f013 0f20 	tst.w	r3, #32
    48a2:	d1fb      	bne.n	489c <_tc_timer_init+0x1b4>
    48a4:	e782      	b.n	47ac <_tc_timer_init+0xc4>
		_tc0_dev = (struct _timer_device *)dev;
    48a6:	4b0c      	ldr	r3, [pc, #48]	; (48d8 <_tc_timer_init+0x1f0>)
    48a8:	601e      	str	r6, [r3, #0]
    48aa:	e78a      	b.n	47c2 <_tc_timer_init+0xda>
		_tc1_dev = (struct _timer_device *)dev;
    48ac:	4b0a      	ldr	r3, [pc, #40]	; (48d8 <_tc_timer_init+0x1f0>)
    48ae:	605e      	str	r6, [r3, #4]
    48b0:	e78c      	b.n	47cc <_tc_timer_init+0xe4>
		_tc2_dev = (struct _timer_device *)dev;
    48b2:	4b09      	ldr	r3, [pc, #36]	; (48d8 <_tc_timer_init+0x1f0>)
    48b4:	609e      	str	r6, [r3, #8]
    48b6:	e789      	b.n	47cc <_tc_timer_init+0xe4>
    48b8:	0000466d 	.word	0x0000466d
    48bc:	000087e4 	.word	0x000087e4
    48c0:	000026ad 	.word	0x000026ad
    48c4:	00008774 	.word	0x00008774
    48c8:	40003800 	.word	0x40003800
    48cc:	40003c00 	.word	0x40003c00
    48d0:	4101a000 	.word	0x4101a000
    48d4:	4101c000 	.word	0x4101c000
    48d8:	20000494 	.word	0x20000494
    48dc:	e000e100 	.word	0xe000e100

000048e0 <_tc_timer_deinit>:
{
    48e0:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    48e2:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    48e4:	4620      	mov	r0, r4
    48e6:	4b18      	ldr	r3, [pc, #96]	; (4948 <_tc_timer_deinit+0x68>)
    48e8:	4798      	blx	r3
    48ea:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    48ec:	22cd      	movs	r2, #205	; 0xcd
    48ee:	4917      	ldr	r1, [pc, #92]	; (494c <_tc_timer_deinit+0x6c>)
    48f0:	2001      	movs	r0, #1
    48f2:	4b17      	ldr	r3, [pc, #92]	; (4950 <_tc_timer_deinit+0x70>)
    48f4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    48f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    48fa:	4b16      	ldr	r3, [pc, #88]	; (4954 <_tc_timer_deinit+0x74>)
    48fc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4900:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
    4904:	2b00      	cmp	r3, #0
    4906:	db0d      	blt.n	4924 <_tc_timer_deinit+0x44>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4908:	095a      	lsrs	r2, r3, #5
    490a:	f003 031f 	and.w	r3, r3, #31
    490e:	2101      	movs	r1, #1
    4910:	fa01 f303 	lsl.w	r3, r1, r3
    4914:	3220      	adds	r2, #32
    4916:	4910      	ldr	r1, [pc, #64]	; (4958 <_tc_timer_deinit+0x78>)
    4918:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    491c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4920:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4924:	6823      	ldr	r3, [r4, #0]
    4926:	f023 0302 	bic.w	r3, r3, #2
    492a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    492c:	6923      	ldr	r3, [r4, #16]
    492e:	f013 0f03 	tst.w	r3, #3
    4932:	d1fb      	bne.n	492c <_tc_timer_deinit+0x4c>
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
    4934:	6823      	ldr	r3, [r4, #0]
    4936:	f043 0301 	orr.w	r3, r3, #1
    493a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    493c:	6923      	ldr	r3, [r4, #16]
    493e:	f013 0f01 	tst.w	r3, #1
    4942:	d1fb      	bne.n	493c <_tc_timer_deinit+0x5c>
}
    4944:	bd38      	pop	{r3, r4, r5, pc}
    4946:	bf00      	nop
    4948:	0000466d 	.word	0x0000466d
    494c:	000087e4 	.word	0x000087e4
    4950:	000026ad 	.word	0x000026ad
    4954:	00008774 	.word	0x00008774
    4958:	e000e100 	.word	0xe000e100

0000495c <_tc_timer_set_irq>:
{
    495c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    495e:	68c0      	ldr	r0, [r0, #12]
    4960:	4b09      	ldr	r3, [pc, #36]	; (4988 <_tc_timer_set_irq+0x2c>)
    4962:	4798      	blx	r3
    4964:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4966:	f44f 7291 	mov.w	r2, #290	; 0x122
    496a:	4908      	ldr	r1, [pc, #32]	; (498c <_tc_timer_set_irq+0x30>)
    496c:	2001      	movs	r0, #1
    496e:	4b08      	ldr	r3, [pc, #32]	; (4990 <_tc_timer_set_irq+0x34>)
    4970:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    4972:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4976:	4b07      	ldr	r3, [pc, #28]	; (4994 <_tc_timer_set_irq+0x38>)
    4978:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    497c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    4980:	4b05      	ldr	r3, [pc, #20]	; (4998 <_tc_timer_set_irq+0x3c>)
    4982:	4798      	blx	r3
    4984:	bd10      	pop	{r4, pc}
    4986:	bf00      	nop
    4988:	0000466d 	.word	0x0000466d
    498c:	000087e4 	.word	0x000087e4
    4990:	000026ad 	.word	0x000026ad
    4994:	00008774 	.word	0x00008774
    4998:	00002bd5 	.word	0x00002bd5

0000499c <_tc_get_timer>:
}
    499c:	4800      	ldr	r0, [pc, #0]	; (49a0 <_tc_get_timer+0x4>)
    499e:	4770      	bx	lr
    49a0:	20000020 	.word	0x20000020

000049a4 <TC0_Handler>:
{
    49a4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
    49a6:	4b02      	ldr	r3, [pc, #8]	; (49b0 <TC0_Handler+0xc>)
    49a8:	6818      	ldr	r0, [r3, #0]
    49aa:	4b02      	ldr	r3, [pc, #8]	; (49b4 <TC0_Handler+0x10>)
    49ac:	4798      	blx	r3
    49ae:	bd08      	pop	{r3, pc}
    49b0:	20000494 	.word	0x20000494
    49b4:	00004655 	.word	0x00004655

000049b8 <TC1_Handler>:
{
    49b8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc1_dev);
    49ba:	4b02      	ldr	r3, [pc, #8]	; (49c4 <TC1_Handler+0xc>)
    49bc:	6858      	ldr	r0, [r3, #4]
    49be:	4b02      	ldr	r3, [pc, #8]	; (49c8 <TC1_Handler+0x10>)
    49c0:	4798      	blx	r3
    49c2:	bd08      	pop	{r3, pc}
    49c4:	20000494 	.word	0x20000494
    49c8:	00004655 	.word	0x00004655

000049cc <TC2_Handler>:
{
    49cc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc2_dev);
    49ce:	4b02      	ldr	r3, [pc, #8]	; (49d8 <TC2_Handler+0xc>)
    49d0:	6898      	ldr	r0, [r3, #8]
    49d2:	4b02      	ldr	r3, [pc, #8]	; (49dc <TC2_Handler+0x10>)
    49d4:	4798      	blx	r3
    49d6:	bd08      	pop	{r3, pc}
    49d8:	20000494 	.word	0x20000494
    49dc:	00004655 	.word	0x00004655

000049e0 <TC3_Handler>:
{
    49e0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    49e2:	4b02      	ldr	r3, [pc, #8]	; (49ec <TC3_Handler+0xc>)
    49e4:	68d8      	ldr	r0, [r3, #12]
    49e6:	4b02      	ldr	r3, [pc, #8]	; (49f0 <TC3_Handler+0x10>)
    49e8:	4798      	blx	r3
    49ea:	bd08      	pop	{r3, pc}
    49ec:	20000494 	.word	0x20000494
    49f0:	00004655 	.word	0x00004655

000049f4 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    49f4:	2000      	movs	r0, #0
    49f6:	4770      	bx	lr

000049f8 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    49f8:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    49fa:	7c83      	ldrb	r3, [r0, #18]
    49fc:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4a00:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    4a02:	f002 0107 	and.w	r1, r2, #7
    4a06:	2901      	cmp	r1, #1
    4a08:	d00b      	beq.n	4a22 <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4a0a:	015a      	lsls	r2, r3, #5
    4a0c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4a10:	2110      	movs	r1, #16
    4a12:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    4a16:	015b      	lsls	r3, r3, #5
    4a18:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a1c:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    4a20:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    4a22:	f012 0f40 	tst.w	r2, #64	; 0x40
    4a26:	d00c      	beq.n	4a42 <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    4a28:	7cc2      	ldrb	r2, [r0, #19]
    4a2a:	f36f 1286 	bfc	r2, #6, #1
    4a2e:	74c2      	strb	r2, [r0, #19]
    4a30:	015a      	lsls	r2, r3, #5
    4a32:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4a36:	2180      	movs	r1, #128	; 0x80
    4a38:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4a3c:	2140      	movs	r1, #64	; 0x40
    4a3e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    4a42:	7cc2      	ldrb	r2, [r0, #19]
    4a44:	f36f 02c3 	bfc	r2, #3, #1
    4a48:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    4a4a:	490a      	ldr	r1, [pc, #40]	; (4a74 <_usb_d_dev_handle_setup+0x7c>)
    4a4c:	015a      	lsls	r2, r3, #5
    4a4e:	188c      	adds	r4, r1, r2
    4a50:	2500      	movs	r5, #0
    4a52:	72a5      	strb	r5, [r4, #10]
    4a54:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4a56:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    4a5a:	246f      	movs	r4, #111	; 0x6f
    4a5c:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4a60:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4a64:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    4a68:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
    4a6c:	7c80      	ldrb	r0, [r0, #18]
    4a6e:	4798      	blx	r3
    4a70:	bd38      	pop	{r3, r4, r5, pc}
    4a72:	bf00      	nop
    4a74:	200004a4 	.word	0x200004a4

00004a78 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    4a78:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    4a7a:	2320      	movs	r3, #32
    4a7c:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    4a80:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4a82:	7c83      	ldrb	r3, [r0, #18]
    4a84:	f003 030f 	and.w	r3, r3, #15
    4a88:	015b      	lsls	r3, r3, #5
    4a8a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4a8e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    4a92:	4b04      	ldr	r3, [pc, #16]	; (4aa4 <_usb_d_dev_handle_stall+0x2c>)
    4a94:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    4a98:	6882      	ldr	r2, [r0, #8]
    4a9a:	2101      	movs	r1, #1
    4a9c:	7c80      	ldrb	r0, [r0, #18]
    4a9e:	4798      	blx	r3
    4aa0:	bd08      	pop	{r3, pc}
    4aa2:	bf00      	nop
    4aa4:	200004a4 	.word	0x200004a4

00004aa8 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    4aa8:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4aaa:	7c84      	ldrb	r4, [r0, #18]
    4aac:	2cff      	cmp	r4, #255	; 0xff
    4aae:	d003      	beq.n	4ab8 <_usb_d_dev_trans_done+0x10>
    4ab0:	7cc3      	ldrb	r3, [r0, #19]
    4ab2:	f013 0f40 	tst.w	r3, #64	; 0x40
    4ab6:	d100      	bne.n	4aba <_usb_d_dev_trans_done+0x12>
    4ab8:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    4aba:	7cc2      	ldrb	r2, [r0, #19]
    4abc:	f36f 1286 	bfc	r2, #6, #1
    4ac0:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    4ac2:	4a03      	ldr	r2, [pc, #12]	; (4ad0 <_usb_d_dev_trans_done+0x28>)
    4ac4:	f8d2 50d0 	ldr.w	r5, [r2, #208]	; 0xd0
    4ac8:	6882      	ldr	r2, [r0, #8]
    4aca:	4620      	mov	r0, r4
    4acc:	47a8      	blx	r5
    4ace:	e7f3      	b.n	4ab8 <_usb_d_dev_trans_done+0x10>
    4ad0:	200004a4 	.word	0x200004a4

00004ad4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    4ad4:	b530      	push	{r4, r5, lr}
    4ad6:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4ad8:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    4ada:	2425      	movs	r4, #37	; 0x25
    4adc:	f88d 4004 	strb.w	r4, [sp, #4]
    4ae0:	244a      	movs	r4, #74	; 0x4a
    4ae2:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    4ae6:	2bff      	cmp	r3, #255	; 0xff
    4ae8:	d01e      	beq.n	4b28 <_usb_d_dev_trans_stop+0x54>
    4aea:	7cc4      	ldrb	r4, [r0, #19]
    4aec:	f014 0f40 	tst.w	r4, #64	; 0x40
    4af0:	d01a      	beq.n	4b28 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    4af2:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    4af6:	b1c9      	cbz	r1, 4b2c <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4af8:	0163      	lsls	r3, r4, #5
    4afa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4afe:	2580      	movs	r5, #128	; 0x80
    4b00:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    4b04:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    4b06:	a902      	add	r1, sp, #8
    4b08:	440b      	add	r3, r1
    4b0a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4b0e:	0163      	lsls	r3, r4, #5
    4b10:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b14:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4b18:	0163      	lsls	r3, r4, #5
    4b1a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b1e:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    4b22:	4611      	mov	r1, r2
    4b24:	4b05      	ldr	r3, [pc, #20]	; (4b3c <_usb_d_dev_trans_stop+0x68>)
    4b26:	4798      	blx	r3
}
    4b28:	b003      	add	sp, #12
    4b2a:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4b2c:	0163      	lsls	r3, r4, #5
    4b2e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4b32:	2540      	movs	r5, #64	; 0x40
    4b34:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    4b38:	e7e4      	b.n	4b04 <_usb_d_dev_trans_stop+0x30>
    4b3a:	bf00      	nop
    4b3c:	00004aa9 	.word	0x00004aa9

00004b40 <_usb_d_dev_handle_trfail>:
{
    4b40:	b530      	push	{r4, r5, lr}
    4b42:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    4b44:	7c83      	ldrb	r3, [r0, #18]
    4b46:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    4b4a:	2204      	movs	r2, #4
    4b4c:	f88d 2004 	strb.w	r2, [sp, #4]
    4b50:	2208      	movs	r2, #8
    4b52:	f88d 2005 	strb.w	r2, [sp, #5]
    4b56:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    4b58:	460c      	mov	r4, r1
    4b5a:	b391      	cbz	r1, 4bc2 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4b5c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    4b60:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    4b64:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    4b68:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4b6c:	4a32      	ldr	r2, [pc, #200]	; (4c38 <_usb_d_dev_handle_trfail+0xf8>)
    4b6e:	440a      	add	r2, r1
    4b70:	7a91      	ldrb	r1, [r2, #10]
    4b72:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    4b74:	2d02      	cmp	r5, #2
    4b76:	d02c      	beq.n	4bd2 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    4b78:	f011 0f02 	tst.w	r1, #2
    4b7c:	d045      	beq.n	4c0a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4b7e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    4b80:	7a91      	ldrb	r1, [r2, #10]
    4b82:	f36f 0141 	bfc	r1, #1, #1
    4b86:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4b88:	aa02      	add	r2, sp, #8
    4b8a:	4422      	add	r2, r4
    4b8c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4b90:	015a      	lsls	r2, r3, #5
    4b92:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4b96:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4b9a:	015b      	lsls	r3, r3, #5
    4b9c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4ba0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    4ba4:	f005 0307 	and.w	r3, r5, #7
    4ba8:	2b01      	cmp	r3, #1
    4baa:	d143      	bne.n	4c34 <_usb_d_dev_handle_trfail+0xf4>
    4bac:	7cc3      	ldrb	r3, [r0, #19]
    4bae:	f013 0f40 	tst.w	r3, #64	; 0x40
    4bb2:	d03f      	beq.n	4c34 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    4bb4:	09d9      	lsrs	r1, r3, #7
    4bb6:	428c      	cmp	r4, r1
    4bb8:	d03c      	beq.n	4c34 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    4bba:	2200      	movs	r2, #0
    4bbc:	4b1f      	ldr	r3, [pc, #124]	; (4c3c <_usb_d_dev_handle_trfail+0xfc>)
    4bbe:	4798      	blx	r3
    4bc0:	e038      	b.n	4c34 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    4bc2:	0159      	lsls	r1, r3, #5
    4bc4:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    4bc8:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    4bcc:	f005 0507 	and.w	r5, r5, #7
    4bd0:	e7ca      	b.n	4b68 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    4bd2:	f011 0f01 	tst.w	r1, #1
    4bd6:	d0cf      	beq.n	4b78 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    4bd8:	7a91      	ldrb	r1, [r2, #10]
    4bda:	f36f 0100 	bfc	r1, #0, #1
    4bde:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4be0:	aa02      	add	r2, sp, #8
    4be2:	4422      	add	r2, r4
    4be4:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4be8:	015a      	lsls	r2, r3, #5
    4bea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4bee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4bf2:	015b      	lsls	r3, r3, #5
    4bf4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4bf8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    4bfc:	2204      	movs	r2, #4
    4bfe:	1c21      	adds	r1, r4, #0
    4c00:	bf18      	it	ne
    4c02:	2101      	movne	r1, #1
    4c04:	4b0d      	ldr	r3, [pc, #52]	; (4c3c <_usb_d_dev_handle_trfail+0xfc>)
    4c06:	4798      	blx	r3
    4c08:	e014      	b.n	4c34 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    4c0a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    4c0e:	4a0a      	ldr	r2, [pc, #40]	; (4c38 <_usb_d_dev_handle_trfail+0xf8>)
    4c10:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    4c14:	2100      	movs	r1, #0
    4c16:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    4c18:	aa02      	add	r2, sp, #8
    4c1a:	4414      	add	r4, r2
    4c1c:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4c20:	015a      	lsls	r2, r3, #5
    4c22:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4c26:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4c2a:	015b      	lsls	r3, r3, #5
    4c2c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4c30:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    4c34:	b003      	add	sp, #12
    4c36:	bd30      	pop	{r4, r5, pc}
    4c38:	200004a4 	.word	0x200004a4
    4c3c:	00004ad5 	.word	0x00004ad5

00004c40 <_usb_d_dev_reset_epts>:
{
    4c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c44:	4d0c      	ldr	r5, [pc, #48]	; (4c78 <_usb_d_dev_reset_epts+0x38>)
    4c46:	f105 04d4 	add.w	r4, r5, #212	; 0xd4
    4c4a:	f505 753c 	add.w	r5, r5, #752	; 0x2f0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4c4e:	f04f 0803 	mov.w	r8, #3
    4c52:	4f0a      	ldr	r7, [pc, #40]	; (4c7c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    4c54:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    4c56:	4641      	mov	r1, r8
    4c58:	4620      	mov	r0, r4
    4c5a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    4c5c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    4c5e:	2300      	movs	r3, #0
    4c60:	74e3      	strb	r3, [r4, #19]
    4c62:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    4c64:	42ac      	cmp	r4, r5
    4c66:	d1f6      	bne.n	4c56 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    4c68:	22c0      	movs	r2, #192	; 0xc0
    4c6a:	4619      	mov	r1, r3
    4c6c:	4802      	ldr	r0, [pc, #8]	; (4c78 <_usb_d_dev_reset_epts+0x38>)
    4c6e:	4b04      	ldr	r3, [pc, #16]	; (4c80 <_usb_d_dev_reset_epts+0x40>)
    4c70:	4798      	blx	r3
    4c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c76:	bf00      	nop
    4c78:	200004a4 	.word	0x200004a4
    4c7c:	00004aa9 	.word	0x00004aa9
    4c80:	00006cdb 	.word	0x00006cdb

00004c84 <_usb_d_dev_in_next>:
{
    4c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c88:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    4c8a:	7c84      	ldrb	r4, [r0, #18]
    4c8c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    4c90:	4688      	mov	r8, r1
    4c92:	2900      	cmp	r1, #0
    4c94:	f000 80a0 	beq.w	4dd8 <_usb_d_dev_in_next+0x154>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    4c98:	4b58      	ldr	r3, [pc, #352]	; (4dfc <_usb_d_dev_in_next+0x178>)
    4c9a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    4c9e:	6958      	ldr	r0, [r3, #20]
    4ca0:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4ca4:	8a2b      	ldrh	r3, [r5, #16]
    4ca6:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4caa:	4293      	cmp	r3, r2
    4cac:	f000 808e 	beq.w	4dcc <_usb_d_dev_in_next+0x148>
    4cb0:	3b01      	subs	r3, #1
    4cb2:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4cb4:	7cef      	ldrb	r7, [r5, #19]
    4cb6:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    4cba:	f1b8 0f00 	cmp.w	r8, #0
    4cbe:	d005      	beq.n	4ccc <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4cc0:	0162      	lsls	r2, r4, #5
    4cc2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4cc6:	2302      	movs	r3, #2
    4cc8:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    4ccc:	68a9      	ldr	r1, [r5, #8]
    4cce:	eb0e 0301 	add.w	r3, lr, r1
    4cd2:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    4cd4:	686e      	ldr	r6, [r5, #4]
    4cd6:	42b3      	cmp	r3, r6
    4cd8:	d23f      	bcs.n	4d5a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    4cda:	1af6      	subs	r6, r6, r3
    4cdc:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    4cde:	7cea      	ldrb	r2, [r5, #19]
    4ce0:	f012 0f20 	tst.w	r2, #32
    4ce4:	d02d      	beq.n	4d42 <_usb_d_dev_in_next+0xbe>
    4ce6:	8a2a      	ldrh	r2, [r5, #16]
    4ce8:	4296      	cmp	r6, r2
    4cea:	bf28      	it	cs
    4cec:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    4cee:	6829      	ldr	r1, [r5, #0]
    4cf0:	4632      	mov	r2, r6
    4cf2:	4419      	add	r1, r3
    4cf4:	68e8      	ldr	r0, [r5, #12]
    4cf6:	4b42      	ldr	r3, [pc, #264]	; (4e00 <_usb_d_dev_in_next+0x17c>)
    4cf8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    4cfa:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    4cfc:	4b3f      	ldr	r3, [pc, #252]	; (4dfc <_usb_d_dev_in_next+0x178>)
    4cfe:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d02:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4d04:	4b3d      	ldr	r3, [pc, #244]	; (4dfc <_usb_d_dev_in_next+0x178>)
    4d06:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d0a:	695a      	ldr	r2, [r3, #20]
    4d0c:	f366 020d 	bfi	r2, r6, #0, #14
    4d10:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4d12:	695a      	ldr	r2, [r3, #20]
    4d14:	f36f 329b 	bfc	r2, #14, #14
    4d18:	615a      	str	r2, [r3, #20]
	if (!isr) {
    4d1a:	f1b8 0f00 	cmp.w	r8, #0
    4d1e:	d108      	bne.n	4d32 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    4d20:	2f01      	cmp	r7, #1
    4d22:	bf0c      	ite	eq
    4d24:	224e      	moveq	r2, #78	; 0x4e
    4d26:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4d28:	0163      	lsls	r3, r4, #5
    4d2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4d2e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    4d32:	0164      	lsls	r4, r4, #5
    4d34:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4d38:	2380      	movs	r3, #128	; 0x80
    4d3a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    4d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d42:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    4d46:	bf28      	it	cs
    4d48:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4d4c:	6829      	ldr	r1, [r5, #0]
    4d4e:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    4d50:	4a2a      	ldr	r2, [pc, #168]	; (4dfc <_usb_d_dev_in_next+0x178>)
    4d52:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    4d56:	6113      	str	r3, [r2, #16]
    4d58:	e7d4      	b.n	4d04 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    4d5a:	7ceb      	ldrb	r3, [r5, #19]
    4d5c:	f013 0f10 	tst.w	r3, #16
    4d60:	d00f      	beq.n	4d82 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    4d62:	7ceb      	ldrb	r3, [r5, #19]
    4d64:	f36f 1304 	bfc	r3, #4, #1
    4d68:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    4d6a:	4b24      	ldr	r3, [pc, #144]	; (4dfc <_usb_d_dev_in_next+0x178>)
    4d6c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    4d70:	695a      	ldr	r2, [r3, #20]
    4d72:	f36f 020d 	bfc	r2, #0, #14
    4d76:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    4d78:	695a      	ldr	r2, [r3, #20]
    4d7a:	f36f 329b 	bfc	r2, #14, #14
    4d7e:	615a      	str	r2, [r3, #20]
    4d80:	e7cb      	b.n	4d1a <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    4d82:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4d84:	ea4f 1444 	mov.w	r4, r4, lsl #5
    4d88:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    4d8c:	bf0c      	ite	eq
    4d8e:	234b      	moveq	r3, #75	; 0x4b
    4d90:	234a      	movne	r3, #74	; 0x4a
    4d92:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    4d96:	8a2a      	ldrh	r2, [r5, #16]
    4d98:	ea00 030e 	and.w	r3, r0, lr
    4d9c:	429a      	cmp	r2, r3
    4d9e:	d005      	beq.n	4dac <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4da0:	2100      	movs	r1, #0
    4da2:	4628      	mov	r0, r5
    4da4:	4b17      	ldr	r3, [pc, #92]	; (4e04 <_usb_d_dev_in_next+0x180>)
    4da6:	4798      	blx	r3
	return;
    4da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    4dac:	7ceb      	ldrb	r3, [r5, #19]
    4dae:	f36f 1386 	bfc	r3, #6, #1
    4db2:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    4db4:	4b11      	ldr	r3, [pc, #68]	; (4dfc <_usb_d_dev_in_next+0x178>)
    4db6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4dba:	68a9      	ldr	r1, [r5, #8]
    4dbc:	7ca8      	ldrb	r0, [r5, #18]
    4dbe:	4798      	blx	r3
    4dc0:	b9d0      	cbnz	r0, 4df8 <_usb_d_dev_in_next+0x174>
		ept->flags.bits.is_busy = 1;
    4dc2:	7ceb      	ldrb	r3, [r5, #19]
    4dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4dc8:	74eb      	strb	r3, [r5, #19]
    4dca:	e7e9      	b.n	4da0 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4dcc:	7cef      	ldrb	r7, [r5, #19]
    4dce:	f007 0707 	and.w	r7, r7, #7
    4dd2:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4dd6:	e773      	b.n	4cc0 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4dd8:	8a03      	ldrh	r3, [r0, #16]
    4dda:	f240 32ff 	movw	r2, #1023	; 0x3ff
    4dde:	4293      	cmp	r3, r2
    4de0:	d107      	bne.n	4df2 <_usb_d_dev_in_next+0x16e>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    4de2:	7cef      	ldrb	r7, [r5, #19]
    4de4:	f007 0707 	and.w	r7, r7, #7
    4de8:	f04f 0e00 	mov.w	lr, #0
    4dec:	f240 30ff 	movw	r0, #1023	; 0x3ff
    4df0:	e76c      	b.n	4ccc <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    4df2:	f04f 0e00 	mov.w	lr, #0
    4df6:	e75b      	b.n	4cb0 <_usb_d_dev_in_next+0x2c>
    4df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dfc:	200004a4 	.word	0x200004a4
    4e00:	00006cc5 	.word	0x00006cc5
    4e04:	00004aa9 	.word	0x00004aa9

00004e08 <_usb_d_dev_out_next>:
{
    4e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e0c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    4e0e:	7c85      	ldrb	r5, [r0, #18]
    4e10:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    4e14:	4689      	mov	r9, r1
    4e16:	2900      	cmp	r1, #0
    4e18:	d056      	beq.n	4ec8 <_usb_d_dev_out_next+0xc0>
    4e1a:	4b74      	ldr	r3, [pc, #464]	; (4fec <_usb_d_dev_out_next+0x1e4>)
    4e1c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4e20:	685a      	ldr	r2, [r3, #4]
    4e22:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    4e26:	685f      	ldr	r7, [r3, #4]
    4e28:	f3c7 070d 	ubfx	r7, r7, #0, #14
    4e2c:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4e2e:	8a06      	ldrh	r6, [r0, #16]
    4e30:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4e34:	429e      	cmp	r6, r3
    4e36:	f000 80ba 	beq.w	4fae <_usb_d_dev_out_next+0x1a6>
    4e3a:	3e01      	subs	r6, #1
    4e3c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    4e3e:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4e42:	f894 8013 	ldrb.w	r8, [r4, #19]
    4e46:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    4e4a:	f1b9 0f00 	cmp.w	r9, #0
    4e4e:	d005      	beq.n	4e5c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    4e50:	016b      	lsls	r3, r5, #5
    4e52:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4e56:	2201      	movs	r2, #1
    4e58:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    4e5c:	7ce3      	ldrb	r3, [r4, #19]
    4e5e:	f013 0f20 	tst.w	r3, #32
    4e62:	d00d      	beq.n	4e80 <_usb_d_dev_out_next+0x78>
    4e64:	6862      	ldr	r2, [r4, #4]
    4e66:	2a00      	cmp	r2, #0
    4e68:	d037      	beq.n	4eda <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    4e6a:	68a0      	ldr	r0, [r4, #8]
    4e6c:	1a12      	subs	r2, r2, r0
    4e6e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    4e70:	6823      	ldr	r3, [r4, #0]
    4e72:	42ba      	cmp	r2, r7
    4e74:	bf28      	it	cs
    4e76:	463a      	movcs	r2, r7
    4e78:	68e1      	ldr	r1, [r4, #12]
    4e7a:	4418      	add	r0, r3
    4e7c:	4b5c      	ldr	r3, [pc, #368]	; (4ff0 <_usb_d_dev_out_next+0x1e8>)
    4e7e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4e80:	6863      	ldr	r3, [r4, #4]
    4e82:	b353      	cbz	r3, 4eda <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    4e84:	f1b9 0f00 	cmp.w	r9, #0
    4e88:	d040      	beq.n	4f0c <_usb_d_dev_out_next+0x104>
    4e8a:	8a22      	ldrh	r2, [r4, #16]
    4e8c:	42ba      	cmp	r2, r7
    4e8e:	d93d      	bls.n	4f0c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    4e90:	7ce3      	ldrb	r3, [r4, #19]
    4e92:	f36f 1304 	bfc	r3, #4, #1
    4e96:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    4e98:	68a3      	ldr	r3, [r4, #8]
    4e9a:	445b      	add	r3, fp
    4e9c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    4e9e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    4ea2:	ea4f 1345 	mov.w	r3, r5, lsl #5
    4ea6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4eaa:	bf0c      	ite	eq
    4eac:	222d      	moveq	r2, #45	; 0x2d
    4eae:	2225      	movne	r2, #37	; 0x25
    4eb0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    4eb4:	b915      	cbnz	r5, 4ebc <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4eb6:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    4eb8:	4b4c      	ldr	r3, [pc, #304]	; (4fec <_usb_d_dev_out_next+0x1e4>)
    4eba:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    4ebc:	2100      	movs	r1, #0
    4ebe:	4620      	mov	r0, r4
    4ec0:	4b4c      	ldr	r3, [pc, #304]	; (4ff4 <_usb_d_dev_out_next+0x1ec>)
    4ec2:	4798      	blx	r3
	return;
    4ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    4ec8:	8a06      	ldrh	r6, [r0, #16]
    4eca:	f240 33ff 	movw	r3, #1023	; 0x3ff
    4ece:	429e      	cmp	r6, r3
    4ed0:	d07b      	beq.n	4fca <_usb_d_dev_out_next+0x1c2>
    4ed2:	f04f 0b00 	mov.w	fp, #0
    4ed6:	46da      	mov	sl, fp
    4ed8:	e7af      	b.n	4e3a <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    4eda:	7ce3      	ldrb	r3, [r4, #19]
    4edc:	f013 0f10 	tst.w	r3, #16
    4ee0:	d06c      	beq.n	4fbc <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    4ee2:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    4ee4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4ee8:	f043 0320 	orr.w	r3, r3, #32
    4eec:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4eee:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4ef0:	493e      	ldr	r1, [pc, #248]	; (4fec <_usb_d_dev_out_next+0x1e4>)
    4ef2:	016a      	lsls	r2, r5, #5
    4ef4:	188b      	adds	r3, r1, r2
    4ef6:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4ef8:	8a21      	ldrh	r1, [r4, #16]
    4efa:	685a      	ldr	r2, [r3, #4]
    4efc:	f361 329b 	bfi	r2, r1, #14, #14
    4f00:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4f02:	685a      	ldr	r2, [r3, #4]
    4f04:	f36f 020d 	bfc	r2, #0, #14
    4f08:	605a      	str	r2, [r3, #4]
    4f0a:	e01d      	b.n	4f48 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    4f0c:	68a2      	ldr	r2, [r4, #8]
    4f0e:	4452      	add	r2, sl
    4f10:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    4f12:	4293      	cmp	r3, r2
    4f14:	d9c3      	bls.n	4e9e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    4f16:	1a9b      	subs	r3, r3, r2
    4f18:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    4f1a:	7ce1      	ldrb	r1, [r4, #19]
    4f1c:	f011 0f20 	tst.w	r1, #32
    4f20:	d026      	beq.n	4f70 <_usb_d_dev_out_next+0x168>
    4f22:	8a22      	ldrh	r2, [r4, #16]
    4f24:	4293      	cmp	r3, r2
    4f26:	bf28      	it	cs
    4f28:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    4f2a:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    4f2c:	016a      	lsls	r2, r5, #5
    4f2e:	492f      	ldr	r1, [pc, #188]	; (4fec <_usb_d_dev_out_next+0x1e4>)
    4f30:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    4f32:	4a2e      	ldr	r2, [pc, #184]	; (4fec <_usb_d_dev_out_next+0x1e4>)
    4f34:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    4f38:	6851      	ldr	r1, [r2, #4]
    4f3a:	f363 319b 	bfi	r1, r3, #14, #14
    4f3e:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    4f40:	6853      	ldr	r3, [r2, #4]
    4f42:	f36f 030d 	bfc	r3, #0, #14
    4f46:	6053      	str	r3, [r2, #4]
	if (!isr) {
    4f48:	f1b9 0f00 	cmp.w	r9, #0
    4f4c:	d108      	bne.n	4f60 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    4f4e:	f1b8 0f01 	cmp.w	r8, #1
    4f52:	d025      	beq.n	4fa0 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    4f54:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    4f56:	016b      	lsls	r3, r5, #5
    4f58:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    4f5c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    4f60:	016d      	lsls	r5, r5, #5
    4f62:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    4f66:	2340      	movs	r3, #64	; 0x40
    4f68:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    4f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    4f70:	8a21      	ldrh	r1, [r4, #16]
    4f72:	428b      	cmp	r3, r1
    4f74:	d90a      	bls.n	4f8c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    4f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    4f7a:	d80e      	bhi.n	4f9a <_usb_d_dev_out_next+0x192>
    4f7c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    4f80:	6821      	ldr	r1, [r4, #0]
    4f82:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    4f84:	0169      	lsls	r1, r5, #5
    4f86:	4819      	ldr	r0, [pc, #100]	; (4fec <_usb_d_dev_out_next+0x1e4>)
    4f88:	5042      	str	r2, [r0, r1]
    4f8a:	e7d2      	b.n	4f32 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    4f8c:	428b      	cmp	r3, r1
    4f8e:	d2f7      	bcs.n	4f80 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    4f90:	7ce1      	ldrb	r1, [r4, #19]
    4f92:	f041 0120 	orr.w	r1, r1, #32
    4f96:	74e1      	strb	r1, [r4, #19]
    4f98:	e7f2      	b.n	4f80 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    4f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    4f9e:	e7ef      	b.n	4f80 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    4fa0:	4b12      	ldr	r3, [pc, #72]	; (4fec <_usb_d_dev_out_next+0x1e4>)
    4fa2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    4fa6:	2200      	movs	r2, #0
    4fa8:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    4faa:	222d      	movs	r2, #45	; 0x2d
    4fac:	e7d3      	b.n	4f56 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    4fae:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4fb2:	f890 8013 	ldrb.w	r8, [r0, #19]
    4fb6:	f008 0807 	and.w	r8, r8, #7
    4fba:	e749      	b.n	4e50 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    4fbc:	f1b9 0f00 	cmp.w	r9, #0
    4fc0:	d10b      	bne.n	4fda <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    4fc2:	68a3      	ldr	r3, [r4, #8]
    4fc4:	4453      	add	r3, sl
    4fc6:	60a3      	str	r3, [r4, #8]
    4fc8:	e769      	b.n	4e9e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4fca:	f890 8013 	ldrb.w	r8, [r0, #19]
    4fce:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    4fd2:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    4fd4:	46bb      	mov	fp, r7
    4fd6:	46ba      	mov	sl, r7
    4fd8:	e740      	b.n	4e5c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    4fda:	8a23      	ldrh	r3, [r4, #16]
    4fdc:	42bb      	cmp	r3, r7
    4fde:	f63f af57 	bhi.w	4e90 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    4fe2:	68a3      	ldr	r3, [r4, #8]
    4fe4:	4453      	add	r3, sl
    4fe6:	60a3      	str	r3, [r4, #8]
    4fe8:	e759      	b.n	4e9e <_usb_d_dev_out_next+0x96>
    4fea:	bf00      	nop
    4fec:	200004a4 	.word	0x200004a4
    4ff0:	00006cc5 	.word	0x00006cc5
    4ff4:	00004aa9 	.word	0x00004aa9

00004ff8 <_usb_d_dev_handler>:
{
    4ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    4ffc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5000:	8c1e      	ldrh	r6, [r3, #32]
    5002:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    5004:	b146      	cbz	r6, 5018 <_usb_d_dev_handler+0x20>
    5006:	4d96      	ldr	r5, [pc, #600]	; (5260 <_usb_d_dev_handler+0x268>)
	uint32_t lpm_variable = 0;
    5008:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    500a:	f1a5 07d4 	sub.w	r7, r5, #212	; 0xd4
			_usb_d_dev_handle_setup(ept);
    500e:	f8df 926c 	ldr.w	r9, [pc, #620]	; 527c <_usb_d_dev_handler+0x284>
			_usb_d_dev_handle_trfail(ept, 1);
    5012:	f8df 826c 	ldr.w	r8, [pc, #620]	; 5280 <_usb_d_dev_handler+0x288>
    5016:	e0de      	b.n	51d6 <_usb_d_dev_handler+0x1de>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    5018:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    501a:	8b1b      	ldrh	r3, [r3, #24]
    501c:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    501e:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    5020:	f013 0f04 	tst.w	r3, #4
    5024:	d11e      	bne.n	5064 <_usb_d_dev_handler+0x6c>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    5026:	f413 7f00 	tst.w	r3, #512	; 0x200
    502a:	d125      	bne.n	5078 <_usb_d_dev_handler+0x80>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    502c:	f013 0f80 	tst.w	r3, #128	; 0x80
    5030:	d14f      	bne.n	50d2 <_usb_d_dev_handler+0xda>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    5032:	f013 0f70 	tst.w	r3, #112	; 0x70
    5036:	d158      	bne.n	50ea <_usb_d_dev_handler+0xf2>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    5038:	f013 0f08 	tst.w	r3, #8
    503c:	d178      	bne.n	5130 <_usb_d_dev_handler+0x138>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    503e:	f013 0f01 	tst.w	r3, #1
    5042:	d0e0      	beq.n	5006 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    5044:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5048:	f240 2201 	movw	r2, #513	; 0x201
    504c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    504e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5050:	2270      	movs	r2, #112	; 0x70
    5052:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    5054:	4b83      	ldr	r3, [pc, #524]	; (5264 <_usb_d_dev_handler+0x26c>)
    5056:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    505a:	2100      	movs	r1, #0
    505c:	2004      	movs	r0, #4
    505e:	4798      	blx	r3
    5060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    5064:	2204      	movs	r2, #4
    5066:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    506a:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    506c:	4b7d      	ldr	r3, [pc, #500]	; (5264 <_usb_d_dev_handler+0x26c>)
    506e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5072:	4798      	blx	r3
    5074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5078:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    507c:	f240 2201 	movw	r2, #513	; 0x201
    5080:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    5082:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5084:	2270      	movs	r2, #112	; 0x70
    5086:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    5088:	4b76      	ldr	r3, [pc, #472]	; (5264 <_usb_d_dev_handler+0x26c>)
    508a:	891b      	ldrh	r3, [r3, #8]
    508c:	f003 030f 	and.w	r3, r3, #15
    5090:	2b03      	cmp	r3, #3
    5092:	d014      	beq.n	50be <_usb_d_dev_handler+0xc6>
    5094:	2301      	movs	r3, #1
    5096:	4873      	ldr	r0, [pc, #460]	; (5264 <_usb_d_dev_handler+0x26c>)
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    5098:	4619      	mov	r1, r3
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    509a:	eb00 1243 	add.w	r2, r0, r3, lsl #5
    509e:	8912      	ldrh	r2, [r2, #8]
    50a0:	f002 020f 	and.w	r2, r2, #15
    50a4:	2a03      	cmp	r2, #3
    50a6:	d00b      	beq.n	50c0 <_usb_d_dev_handler+0xc8>
    50a8:	3301      	adds	r3, #1
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    50aa:	2b05      	cmp	r3, #5
    50ac:	d1f4      	bne.n	5098 <_usb_d_dev_handler+0xa0>
	uint32_t lpm_variable = 0;
    50ae:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    50b0:	4b6c      	ldr	r3, [pc, #432]	; (5264 <_usb_d_dev_handler+0x26c>)
    50b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    50b6:	2003      	movs	r0, #3
    50b8:	4798      	blx	r3
    50ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    50be:	2100      	movs	r1, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    50c0:	4b68      	ldr	r3, [pc, #416]	; (5264 <_usb_d_dev_handler+0x26c>)
    50c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    50c6:	8919      	ldrh	r1, [r3, #8]
    50c8:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    50cc:	2200      	movs	r2, #0
    50ce:	811a      	strh	r2, [r3, #8]
    50d0:	e7ee      	b.n	50b0 <_usb_d_dev_handler+0xb8>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    50d2:	2280      	movs	r2, #128	; 0x80
    50d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    50d8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    50da:	4b62      	ldr	r3, [pc, #392]	; (5264 <_usb_d_dev_handler+0x26c>)
    50dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    50e0:	2100      	movs	r1, #0
    50e2:	2005      	movs	r0, #5
    50e4:	4798      	blx	r3
    50e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50ea:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    50ee:	2270      	movs	r2, #112	; 0x70
    50f0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    50f2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    50f4:	f240 2201 	movw	r2, #513	; 0x201
    50f8:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    50fa:	4b5b      	ldr	r3, [pc, #364]	; (5268 <_usb_d_dev_handler+0x270>)
    50fc:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    5100:	f013 0f01 	tst.w	r3, #1
    5104:	d00e      	beq.n	5124 <_usb_d_dev_handler+0x12c>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5106:	4a58      	ldr	r2, [pc, #352]	; (5268 <_usb_d_dev_handler+0x270>)
    5108:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    510a:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    510e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    5112:	d1f9      	bne.n	5108 <_usb_d_dev_handler+0x110>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    5114:	4b53      	ldr	r3, [pc, #332]	; (5264 <_usb_d_dev_handler+0x26c>)
    5116:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    511a:	2100      	movs	r1, #0
    511c:	2002      	movs	r0, #2
    511e:	4798      	blx	r3
    5120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    5124:	4a50      	ldr	r2, [pc, #320]	; (5268 <_usb_d_dev_handler+0x270>)
    5126:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    5128:	f413 7f80 	tst.w	r3, #256	; 0x100
    512c:	d0fb      	beq.n	5126 <_usb_d_dev_handler+0x12e>
    512e:	e7f1      	b.n	5114 <_usb_d_dev_handler+0x11c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    5130:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5134:	2400      	movs	r4, #0
    5136:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    513a:	2208      	movs	r2, #8
    513c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    513e:	2270      	movs	r2, #112	; 0x70
    5140:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    5142:	f240 2201 	movw	r2, #513	; 0x201
    5146:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    5148:	4b48      	ldr	r3, [pc, #288]	; (526c <_usb_d_dev_handler+0x274>)
    514a:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    514c:	4b45      	ldr	r3, [pc, #276]	; (5264 <_usb_d_dev_handler+0x26c>)
    514e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    5152:	4621      	mov	r1, r4
    5154:	2001      	movs	r0, #1
    5156:	4798      	blx	r3
    5158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    515c:	f011 0f10 	tst.w	r1, #16
    5160:	d109      	bne.n	5176 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    5162:	f011 0f40 	tst.w	r1, #64	; 0x40
    5166:	d108      	bne.n	517a <_usb_d_dev_handler+0x182>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    5168:	f011 0f20 	tst.w	r1, #32
    516c:	d02f      	beq.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    516e:	2100      	movs	r1, #0
    5170:	4b3f      	ldr	r3, [pc, #252]	; (5270 <_usb_d_dev_handler+0x278>)
    5172:	4798      	blx	r3
    5174:	e02b      	b.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_setup(ept);
    5176:	47c8      	blx	r9
    5178:	e029      	b.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    517a:	2101      	movs	r1, #1
    517c:	4b3c      	ldr	r3, [pc, #240]	; (5270 <_usb_d_dev_handler+0x278>)
    517e:	4798      	blx	r3
    5180:	e025      	b.n	51ce <_usb_d_dev_handler+0x1d6>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    5182:	f011 0f40 	tst.w	r1, #64	; 0x40
    5186:	d111      	bne.n	51ac <_usb_d_dev_handler+0x1b4>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    5188:	f011 0f08 	tst.w	r1, #8
    518c:	d112      	bne.n	51b4 <_usb_d_dev_handler+0x1bc>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    518e:	f011 0f02 	tst.w	r1, #2
    5192:	d112      	bne.n	51ba <_usb_d_dev_handler+0x1c2>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    5194:	f003 0307 	and.w	r3, r3, #7
    5198:	2b01      	cmp	r3, #1
    519a:	d118      	bne.n	51ce <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    519c:	f011 0f04 	tst.w	r1, #4
    51a0:	d10f      	bne.n	51c2 <_usb_d_dev_handler+0x1ca>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    51a2:	f011 0f10 	tst.w	r1, #16
    51a6:	d012      	beq.n	51ce <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    51a8:	47c8      	blx	r9
    51aa:	e010      	b.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 1);
    51ac:	2101      	movs	r1, #1
    51ae:	4b30      	ldr	r3, [pc, #192]	; (5270 <_usb_d_dev_handler+0x278>)
    51b0:	4798      	blx	r3
    51b2:	e00c      	b.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 1);
    51b4:	2101      	movs	r1, #1
    51b6:	47c0      	blx	r8
    51b8:	e009      	b.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_in_next(ept, true);
    51ba:	2101      	movs	r1, #1
    51bc:	4b2d      	ldr	r3, [pc, #180]	; (5274 <_usb_d_dev_handler+0x27c>)
    51be:	4798      	blx	r3
    51c0:	e005      	b.n	51ce <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 0);
    51c2:	2100      	movs	r1, #0
    51c4:	47c0      	blx	r8
    51c6:	e002      	b.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_stall(ept, 0);
    51c8:	2100      	movs	r1, #0
    51ca:	4b29      	ldr	r3, [pc, #164]	; (5270 <_usb_d_dev_handler+0x278>)
    51cc:	4798      	blx	r3
    51ce:	3401      	adds	r4, #1
    51d0:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    51d2:	2c1b      	cmp	r4, #27
    51d4:	d042      	beq.n	525c <_usb_d_dev_handler+0x264>
    51d6:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    51d8:	7cab      	ldrb	r3, [r5, #18]
    51da:	2bff      	cmp	r3, #255	; 0xff
    51dc:	d0f7      	beq.n	51ce <_usb_d_dev_handler+0x1d6>
	if (!(epint & (1u << epn))) {
    51de:	f003 030f 	and.w	r3, r3, #15
    51e2:	2101      	movs	r1, #1
    51e4:	4099      	lsls	r1, r3
    51e6:	4231      	tst	r1, r6
    51e8:	d0f1      	beq.n	51ce <_usb_d_dev_handler+0x1d6>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    51ea:	0159      	lsls	r1, r3, #5
    51ec:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    51f0:	f501 7180 	add.w	r1, r1, #256	; 0x100
    51f4:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    51f6:	015b      	lsls	r3, r3, #5
    51f8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    51fc:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    5200:	4019      	ands	r1, r3
    5202:	d0e4      	beq.n	51ce <_usb_d_dev_handler+0x1d6>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    5204:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    5208:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    520c:	f892 30e7 	ldrb.w	r3, [r2, #231]	; 0xe7
    5210:	f003 0247 	and.w	r2, r3, #71	; 0x47
    5214:	2a01      	cmp	r2, #1
    5216:	d0a1      	beq.n	515c <_usb_d_dev_handler+0x164>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    5218:	f013 0f80 	tst.w	r3, #128	; 0x80
    521c:	d1b1      	bne.n	5182 <_usb_d_dev_handler+0x18a>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    521e:	f011 0f20 	tst.w	r1, #32
    5222:	d1d1      	bne.n	51c8 <_usb_d_dev_handler+0x1d0>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    5224:	f011 0f04 	tst.w	r1, #4
    5228:	d10e      	bne.n	5248 <_usb_d_dev_handler+0x250>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    522a:	f011 0f01 	tst.w	r1, #1
    522e:	d10e      	bne.n	524e <_usb_d_dev_handler+0x256>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    5230:	f003 0307 	and.w	r3, r3, #7
    5234:	2b01      	cmp	r3, #1
    5236:	d1ca      	bne.n	51ce <_usb_d_dev_handler+0x1d6>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    5238:	f011 0f08 	tst.w	r1, #8
    523c:	d10b      	bne.n	5256 <_usb_d_dev_handler+0x25e>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    523e:	f011 0f10 	tst.w	r1, #16
    5242:	d0c4      	beq.n	51ce <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_setup(ept);
    5244:	47c8      	blx	r9
    5246:	e7c2      	b.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_handle_trfail(ept, 0);
    5248:	2100      	movs	r1, #0
    524a:	47c0      	blx	r8
    524c:	e7bf      	b.n	51ce <_usb_d_dev_handler+0x1d6>
		_usb_d_dev_out_next(ept, true);
    524e:	2101      	movs	r1, #1
    5250:	4b09      	ldr	r3, [pc, #36]	; (5278 <_usb_d_dev_handler+0x280>)
    5252:	4798      	blx	r3
    5254:	e7bb      	b.n	51ce <_usb_d_dev_handler+0x1d6>
			_usb_d_dev_handle_trfail(ept, 1);
    5256:	2101      	movs	r1, #1
    5258:	47c0      	blx	r8
    525a:	e7b8      	b.n	51ce <_usb_d_dev_handler+0x1d6>
    525c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5260:	20000578 	.word	0x20000578
    5264:	200004a4 	.word	0x200004a4
    5268:	40001000 	.word	0x40001000
    526c:	00004c41 	.word	0x00004c41
    5270:	00004a79 	.word	0x00004a79
    5274:	00004c85 	.word	0x00004c85
    5278:	00004e09 	.word	0x00004e09
    527c:	000049f9 	.word	0x000049f9
    5280:	00004b41 	.word	0x00004b41

00005284 <_usb_d_dev_init>:
{
    5284:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    5286:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    528a:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    528c:	f013 0f01 	tst.w	r3, #1
    5290:	d124      	bne.n	52dc <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5292:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5296:	7893      	ldrb	r3, [r2, #2]
    5298:	f013 0f03 	tst.w	r3, #3
    529c:	d1fb      	bne.n	5296 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    529e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    52a2:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    52a4:	f013 0f02 	tst.w	r3, #2
    52a8:	d00f      	beq.n	52ca <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    52aa:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    52ae:	7813      	ldrb	r3, [r2, #0]
    52b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    52b4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    52b6:	7893      	ldrb	r3, [r2, #2]
    52b8:	f013 0f03 	tst.w	r3, #3
    52bc:	d1fb      	bne.n	52b6 <_usb_d_dev_init+0x32>
    52be:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    52c2:	7893      	ldrb	r3, [r2, #2]
    52c4:	f013 0f02 	tst.w	r3, #2
    52c8:	d1fb      	bne.n	52c2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    52ca:	2201      	movs	r2, #1
    52cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    52d0:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    52d2:	461a      	mov	r2, r3
    52d4:	7893      	ldrb	r3, [r2, #2]
    52d6:	f013 0f03 	tst.w	r3, #3
    52da:	d1fb      	bne.n	52d4 <_usb_d_dev_init+0x50>
    52dc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    52e0:	7893      	ldrb	r3, [r2, #2]
    52e2:	f013 0f01 	tst.w	r3, #1
    52e6:	d1fb      	bne.n	52e0 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    52e8:	4b24      	ldr	r3, [pc, #144]	; (537c <_usb_d_dev_init+0xf8>)
    52ea:	4a25      	ldr	r2, [pc, #148]	; (5380 <_usb_d_dev_init+0xfc>)
    52ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    52f0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    52f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    52f8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    52fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	_usb_d_dev_reset_epts();
    5300:	4b20      	ldr	r3, [pc, #128]	; (5384 <_usb_d_dev_init+0x100>)
    5302:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    5304:	4b20      	ldr	r3, [pc, #128]	; (5388 <_usb_d_dev_init+0x104>)
    5306:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    5308:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    530c:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    5310:	f011 011f 	ands.w	r1, r1, #31
    5314:	d02b      	beq.n	536e <_usb_d_dev_init+0xea>
		pad_transn = 9;
    5316:	291f      	cmp	r1, #31
    5318:	bf08      	it	eq
    531a:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    531c:	b34b      	cbz	r3, 5372 <_usb_d_dev_init+0xee>
		pad_transp = 25;
    531e:	2b1f      	cmp	r3, #31
    5320:	bf08      	it	eq
    5322:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    5324:	b33a      	cbz	r2, 5376 <_usb_d_dev_init+0xf2>
		pad_trim = 6;
    5326:	2a07      	cmp	r2, #7
    5328:	bf08      	it	eq
    532a:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    532c:	f003 031f 	and.w	r3, r3, #31
    5330:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    5334:	0312      	lsls	r2, r2, #12
    5336:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    533a:	4313      	orrs	r3, r2
    533c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    5340:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    5342:	78d3      	ldrb	r3, [r2, #3]
    5344:	f043 0303 	orr.w	r3, r3, #3
    5348:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    534a:	78d3      	ldrb	r3, [r2, #3]
    534c:	f043 030c 	orr.w	r3, r3, #12
    5350:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    5352:	2304      	movs	r3, #4
    5354:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    5356:	7893      	ldrb	r3, [r2, #2]
    5358:	f013 0f03 	tst.w	r3, #3
    535c:	d1fb      	bne.n	5356 <_usb_d_dev_init+0xd2>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    535e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5362:	4a06      	ldr	r2, [pc, #24]	; (537c <_usb_d_dev_init+0xf8>)
    5364:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    5366:	2201      	movs	r2, #1
    5368:	811a      	strh	r2, [r3, #8]
}
    536a:	2000      	movs	r0, #0
    536c:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    536e:	2109      	movs	r1, #9
    5370:	e7d4      	b.n	531c <_usb_d_dev_init+0x98>
		pad_transp = 25;
    5372:	2319      	movs	r3, #25
    5374:	e7d6      	b.n	5324 <_usb_d_dev_init+0xa0>
		pad_trim = 6;
    5376:	2206      	movs	r2, #6
    5378:	e7d8      	b.n	532c <_usb_d_dev_init+0xa8>
    537a:	bf00      	nop
    537c:	200004a4 	.word	0x200004a4
    5380:	000049f5 	.word	0x000049f5
    5384:	00004c41 	.word	0x00004c41
    5388:	00800084 	.word	0x00800084

0000538c <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    538c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    5390:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    5394:	7298      	strb	r0, [r3, #10]
    5396:	4770      	bx	lr

00005398 <_usb_d_dev_ep_init>:
{
    5398:	b5f0      	push	{r4, r5, r6, r7, lr}
    539a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    539e:	f010 050f 	ands.w	r5, r0, #15
    53a2:	d04d      	beq.n	5440 <_usb_d_dev_ep_init+0xa8>
    53a4:	f1be 0f00 	cmp.w	lr, #0
    53a8:	bfb4      	ite	lt
    53aa:	1d6c      	addlt	r4, r5, #5
    53ac:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    53ae:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    53b2:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    53b4:	2d05      	cmp	r5, #5
    53b6:	d947      	bls.n	5448 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    53b8:	f06f 0011 	mvn.w	r0, #17
    53bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    53be:	f1be 0f00 	cmp.w	lr, #0
    53c2:	db1b      	blt.n	53fc <_usb_d_dev_ep_init+0x64>
    53c4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    53c8:	4e37      	ldr	r6, [pc, #220]	; (54a8 <_usb_d_dev_ep_init+0x110>)
    53ca:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    53ce:	2d00      	cmp	r5, #0
    53d0:	d15e      	bne.n	5490 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    53d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    53d6:	4d34      	ldr	r5, [pc, #208]	; (54a8 <_usb_d_dev_ep_init+0x110>)
    53d8:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    53dc:	4d33      	ldr	r5, [pc, #204]	; (54ac <_usb_d_dev_ep_init+0x114>)
    53de:	00a6      	lsls	r6, r4, #2
    53e0:	1933      	adds	r3, r6, r4
    53e2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    53e6:	f8c3 70e0 	str.w	r7, [r3, #224]	; 0xe0
	ept->size     = max_pkt_siz;
    53ea:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	ept->flags.u8 = (ep_type + 1);
    53ee:	3101      	adds	r1, #1
    53f0:	f883 10e7 	strb.w	r1, [r3, #231]	; 0xe7
	ept->ep       = ep;
    53f4:	f883 00e6 	strb.w	r0, [r3, #230]	; 0xe6
	return USB_OK;
    53f8:	2000      	movs	r0, #0
    53fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    53fc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5400:	4e29      	ldr	r6, [pc, #164]	; (54a8 <_usb_d_dev_ep_init+0x110>)
    5402:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5406:	686d      	ldr	r5, [r5, #4]
    5408:	b935      	cbnz	r5, 5418 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    540a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    540e:	4d26      	ldr	r5, [pc, #152]	; (54a8 <_usb_d_dev_ep_init+0x110>)
    5410:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5414:	685f      	ldr	r7, [r3, #4]
    5416:	e7e1      	b.n	53dc <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    5418:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    541c:	4e22      	ldr	r6, [pc, #136]	; (54a8 <_usb_d_dev_ep_init+0x110>)
    541e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5422:	896d      	ldrh	r5, [r5, #10]
    5424:	4295      	cmp	r5, r2
    5426:	daf0      	bge.n	540a <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    5428:	f06f 0012 	mvn.w	r0, #18
    542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    542e:	f06f 0013 	mvn.w	r0, #19
    5432:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    5434:	f06f 0013 	mvn.w	r0, #19
    5438:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    543a:	f06f 0012 	mvn.w	r0, #18
    543e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    5440:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    5444:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    5446:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    5448:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    544c:	4f17      	ldr	r7, [pc, #92]	; (54ac <_usb_d_dev_ep_init+0x114>)
    544e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    5452:	f896 60e6 	ldrb.w	r6, [r6, #230]	; 0xe6
    5456:	2eff      	cmp	r6, #255	; 0xff
    5458:	d1e9      	bne.n	542e <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    545a:	2900      	cmp	r1, #0
    545c:	d1af      	bne.n	53be <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    545e:	b125      	cbz	r5, 546a <_usb_d_dev_ep_init+0xd2>
    5460:	f1be 0f00 	cmp.w	lr, #0
    5464:	bfa4      	itt	ge
    5466:	3505      	addge	r5, #5
    5468:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    546a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    546e:	4e0f      	ldr	r6, [pc, #60]	; (54ac <_usb_d_dev_ep_init+0x114>)
    5470:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    5474:	f895 50e6 	ldrb.w	r5, [r5, #230]	; 0xe6
    5478:	2dff      	cmp	r5, #255	; 0xff
    547a:	d1db      	bne.n	5434 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    547c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5480:	4e09      	ldr	r6, [pc, #36]	; (54a8 <_usb_d_dev_ep_init+0x110>)
    5482:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    5486:	2d00      	cmp	r5, #0
    5488:	d0d7      	beq.n	543a <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    548a:	f1be 0f00 	cmp.w	lr, #0
    548e:	dbb5      	blt.n	53fc <_usb_d_dev_ep_init+0x64>
    5490:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5494:	4e04      	ldr	r6, [pc, #16]	; (54a8 <_usb_d_dev_ep_init+0x110>)
    5496:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    549a:	892d      	ldrh	r5, [r5, #8]
    549c:	4295      	cmp	r5, r2
    549e:	da98      	bge.n	53d2 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    54a0:	f06f 0012 	mvn.w	r0, #18
    54a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54a6:	bf00      	nop
    54a8:	000087f8 	.word	0x000087f8
    54ac:	200004a4 	.word	0x200004a4

000054b0 <_usb_d_dev_ep_deinit>:
{
    54b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54b2:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    54b4:	f010 060f 	ands.w	r6, r0, #15
    54b8:	d00e      	beq.n	54d8 <_usb_d_dev_ep_deinit+0x28>
    54ba:	2f00      	cmp	r7, #0
    54bc:	bfb4      	ite	lt
    54be:	1d73      	addlt	r3, r6, #5
    54c0:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    54c2:	2e05      	cmp	r6, #5
    54c4:	d900      	bls.n	54c8 <_usb_d_dev_ep_deinit+0x18>
    54c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    54c8:	461d      	mov	r5, r3
    54ca:	3301      	adds	r3, #1
    54cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    54d0:	4a24      	ldr	r2, [pc, #144]	; (5564 <_usb_d_dev_ep_deinit+0xb4>)
    54d2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    54d6:	e002      	b.n	54de <_usb_d_dev_ep_deinit+0x2e>
    54d8:	f8df e094 	ldr.w	lr, [pc, #148]	; 5570 <_usb_d_dev_ep_deinit+0xc0>
    54dc:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    54de:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    54e2:	4a21      	ldr	r2, [pc, #132]	; (5568 <_usb_d_dev_ep_deinit+0xb8>)
    54e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    54e8:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
    54ec:	2aff      	cmp	r2, #255	; 0xff
    54ee:	d0ea      	beq.n	54c6 <_usb_d_dev_ep_deinit+0x16>
    54f0:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    54f2:	2203      	movs	r2, #3
    54f4:	0ff9      	lsrs	r1, r7, #31
    54f6:	4670      	mov	r0, lr
    54f8:	4b1c      	ldr	r3, [pc, #112]	; (556c <_usb_d_dev_ep_deinit+0xbc>)
    54fa:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    54fc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5500:	4a19      	ldr	r2, [pc, #100]	; (5568 <_usb_d_dev_ep_deinit+0xb8>)
    5502:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5506:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    550a:	f003 0307 	and.w	r3, r3, #7
    550e:	2b01      	cmp	r3, #1
    5510:	d016      	beq.n	5540 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    5512:	2f00      	cmp	r7, #0
    5514:	db1b      	blt.n	554e <_usb_d_dev_ep_deinit+0x9e>
    5516:	0160      	lsls	r0, r4, #5
    5518:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    551c:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    5520:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    5524:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    5528:	4b0f      	ldr	r3, [pc, #60]	; (5568 <_usb_d_dev_ep_deinit+0xb8>)
    552a:	00aa      	lsls	r2, r5, #2
    552c:	1951      	adds	r1, r2, r5
    552e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5532:	2000      	movs	r0, #0
    5534:	f881 00e7 	strb.w	r0, [r1, #231]	; 0xe7
	ept->ep       = 0xFF;
    5538:	22ff      	movs	r2, #255	; 0xff
    553a:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    553e:	e7c2      	b.n	54c6 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    5540:	0160      	lsls	r0, r4, #5
    5542:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    5546:	2300      	movs	r3, #0
    5548:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    554c:	e7ec      	b.n	5528 <_usb_d_dev_ep_deinit+0x78>
    554e:	0176      	lsls	r6, r6, #5
    5550:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    5554:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    5558:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    555c:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    5560:	e7e2      	b.n	5528 <_usb_d_dev_ep_deinit+0x78>
    5562:	bf00      	nop
    5564:	20000564 	.word	0x20000564
    5568:	200004a4 	.word	0x200004a4
    556c:	00004ad5 	.word	0x00004ad5
    5570:	20000578 	.word	0x20000578

00005574 <_usb_d_dev_ep_enable>:
{
    5574:	b4f0      	push	{r4, r5, r6, r7}
    5576:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5578:	f010 000f 	ands.w	r0, r0, #15
    557c:	f000 80a7 	beq.w	56ce <_usb_d_dev_ep_enable+0x15a>
    5580:	2e00      	cmp	r6, #0
    5582:	bfb4      	ite	lt
    5584:	1d43      	addlt	r3, r0, #5
    5586:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5588:	4605      	mov	r5, r0
    558a:	0142      	lsls	r2, r0, #5
    558c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5590:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    5594:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    5596:	2805      	cmp	r0, #5
    5598:	f240 80a0 	bls.w	56dc <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    559c:	f06f 0011 	mvn.w	r0, #17
    55a0:	e07d      	b.n	569e <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    55a2:	f014 0f77 	tst.w	r4, #119	; 0x77
    55a6:	f040 8089 	bne.w	56bc <_usb_d_dev_ep_enable+0x148>
    55aa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    55ae:	2111      	movs	r1, #17
    55b0:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    55b4:	4c9b      	ldr	r4, [pc, #620]	; (5824 <_usb_d_dev_ep_enable+0x2b0>)
    55b6:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    55ba:	f8b1 10e4 	ldrh.w	r1, [r1, #228]	; 0xe4
    55be:	4c9a      	ldr	r4, [pc, #616]	; (5828 <_usb_d_dev_ep_enable+0x2b4>)
    55c0:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    55c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    55c8:	f200 80cd 	bhi.w	5766 <_usb_d_dev_ep_enable+0x1f2>
    55cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    55d0:	f200 8112 	bhi.w	57f8 <_usb_d_dev_ep_enable+0x284>
    55d4:	2980      	cmp	r1, #128	; 0x80
    55d6:	f200 8101 	bhi.w	57dc <_usb_d_dev_ep_enable+0x268>
    55da:	2940      	cmp	r1, #64	; 0x40
    55dc:	f200 8113 	bhi.w	5806 <_usb_d_dev_ep_enable+0x292>
    55e0:	2920      	cmp	r1, #32
    55e2:	f200 8102 	bhi.w	57ea <_usb_d_dev_ep_enable+0x276>
    55e6:	2910      	cmp	r1, #16
    55e8:	f200 8114 	bhi.w	5814 <_usb_d_dev_ep_enable+0x2a0>
    55ec:	2908      	cmp	r1, #8
    55ee:	bf94      	ite	ls
    55f0:	2600      	movls	r6, #0
    55f2:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    55f4:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    55f8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    55fa:	f3c1 010d 	ubfx	r1, r1, #0, #14
    55fe:	e0b8      	b.n	5772 <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    5600:	f014 0f70 	tst.w	r4, #112	; 0x70
    5604:	d15d      	bne.n	56c2 <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    5606:	4e87      	ldr	r6, [pc, #540]	; (5824 <_usb_d_dev_ep_enable+0x2b0>)
    5608:	009f      	lsls	r7, r3, #2
    560a:	18f9      	adds	r1, r7, r3
    560c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    5610:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    5614:	0109      	lsls	r1, r1, #4
    5616:	f001 0170 	and.w	r1, r1, #112	; 0x70
    561a:	430c      	orrs	r4, r1
    561c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    5620:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5624:	443b      	add	r3, r7
    5626:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    562a:	f8b6 30e4 	ldrh.w	r3, [r6, #228]	; 0xe4
    562e:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5636:	d80f      	bhi.n	5658 <_usb_d_dev_ep_enable+0xe4>
    5638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    563c:	d819      	bhi.n	5672 <_usb_d_dev_ep_enable+0xfe>
    563e:	2b80      	cmp	r3, #128	; 0x80
    5640:	d819      	bhi.n	5676 <_usb_d_dev_ep_enable+0x102>
    5642:	2b40      	cmp	r3, #64	; 0x40
    5644:	d819      	bhi.n	567a <_usb_d_dev_ep_enable+0x106>
    5646:	2b20      	cmp	r3, #32
    5648:	d819      	bhi.n	567e <_usb_d_dev_ep_enable+0x10a>
    564a:	2b10      	cmp	r3, #16
    564c:	d819      	bhi.n	5682 <_usb_d_dev_ep_enable+0x10e>
    564e:	2b08      	cmp	r3, #8
    5650:	bf94      	ite	ls
    5652:	2300      	movls	r3, #0
    5654:	2301      	movhi	r3, #1
    5656:	e000      	b.n	565a <_usb_d_dev_ep_enable+0xe6>
    5658:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    565a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    565e:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5660:	2380      	movs	r3, #128	; 0x80
    5662:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    5666:	4b6f      	ldr	r3, [pc, #444]	; (5824 <_usb_d_dev_ep_enable+0x2b0>)
    5668:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    566c:	2000      	movs	r0, #0
    566e:	76a8      	strb	r0, [r5, #26]
    5670:	e015      	b.n	569e <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5672:	2306      	movs	r3, #6
    5674:	e7f1      	b.n	565a <_usb_d_dev_ep_enable+0xe6>
    5676:	2305      	movs	r3, #5
    5678:	e7ef      	b.n	565a <_usb_d_dev_ep_enable+0xe6>
    567a:	2304      	movs	r3, #4
    567c:	e7ed      	b.n	565a <_usb_d_dev_ep_enable+0xe6>
    567e:	2303      	movs	r3, #3
    5680:	e7eb      	b.n	565a <_usb_d_dev_ep_enable+0xe6>
    5682:	2302      	movs	r3, #2
    5684:	e7e9      	b.n	565a <_usb_d_dev_ep_enable+0xe6>
    5686:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5688:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    568c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    568e:	2340      	movs	r3, #64	; 0x40
    5690:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    5694:	4b63      	ldr	r3, [pc, #396]	; (5824 <_usb_d_dev_ep_enable+0x2b0>)
    5696:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    569a:	2000      	movs	r0, #0
    569c:	72a8      	strb	r0, [r5, #10]
}
    569e:	bcf0      	pop	{r4, r5, r6, r7}
    56a0:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    56a2:	2106      	movs	r1, #6
    56a4:	e7f0      	b.n	5688 <_usb_d_dev_ep_enable+0x114>
    56a6:	2105      	movs	r1, #5
    56a8:	e7ee      	b.n	5688 <_usb_d_dev_ep_enable+0x114>
    56aa:	2104      	movs	r1, #4
    56ac:	e7ec      	b.n	5688 <_usb_d_dev_ep_enable+0x114>
    56ae:	2103      	movs	r1, #3
    56b0:	e7ea      	b.n	5688 <_usb_d_dev_ep_enable+0x114>
    56b2:	2102      	movs	r1, #2
    56b4:	e7e8      	b.n	5688 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    56b6:	f06f 0011 	mvn.w	r0, #17
    56ba:	e7f0      	b.n	569e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    56bc:	f06f 0013 	mvn.w	r0, #19
    56c0:	e7ed      	b.n	569e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    56c2:	f06f 0013 	mvn.w	r0, #19
    56c6:	e7ea      	b.n	569e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    56c8:	f06f 0013 	mvn.w	r0, #19
    56cc:	e7e7      	b.n	569e <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    56ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    56d2:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    56d6:	b2e4      	uxtb	r4, r4
    56d8:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    56da:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    56dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    56e0:	4950      	ldr	r1, [pc, #320]	; (5824 <_usb_d_dev_ep_enable+0x2b0>)
    56e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    56e6:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    56ea:	2aff      	cmp	r2, #255	; 0xff
    56ec:	d0e3      	beq.n	56b6 <_usb_d_dev_ep_enable+0x142>
    56ee:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    56f0:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    56f2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    56f6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    56fa:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    56fe:	f001 0107 	and.w	r1, r1, #7
    5702:	2901      	cmp	r1, #1
    5704:	f43f af4d 	beq.w	55a2 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    5708:	2e00      	cmp	r6, #0
    570a:	f6ff af79 	blt.w	5600 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    570e:	f014 0f07 	tst.w	r4, #7
    5712:	d1d9      	bne.n	56c8 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    5714:	4e43      	ldr	r6, [pc, #268]	; (5824 <_usb_d_dev_ep_enable+0x2b0>)
    5716:	009f      	lsls	r7, r3, #2
    5718:	18f9      	adds	r1, r7, r3
    571a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    571e:	f891 10e7 	ldrb.w	r1, [r1, #231]	; 0xe7
    5722:	f001 0107 	and.w	r1, r1, #7
    5726:	430c      	orrs	r4, r1
    5728:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    572c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5730:	443b      	add	r3, r7
    5732:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    5736:	f8b6 10e4 	ldrh.w	r1, [r6, #228]	; 0xe4
    573a:	4b3b      	ldr	r3, [pc, #236]	; (5828 <_usb_d_dev_ep_enable+0x2b4>)
    573c:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5740:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    5744:	d89f      	bhi.n	5686 <_usb_d_dev_ep_enable+0x112>
    5746:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    574a:	d8aa      	bhi.n	56a2 <_usb_d_dev_ep_enable+0x12e>
    574c:	2980      	cmp	r1, #128	; 0x80
    574e:	d8aa      	bhi.n	56a6 <_usb_d_dev_ep_enable+0x132>
    5750:	2940      	cmp	r1, #64	; 0x40
    5752:	d8aa      	bhi.n	56aa <_usb_d_dev_ep_enable+0x136>
    5754:	2920      	cmp	r1, #32
    5756:	d8aa      	bhi.n	56ae <_usb_d_dev_ep_enable+0x13a>
    5758:	2910      	cmp	r1, #16
    575a:	d8aa      	bhi.n	56b2 <_usb_d_dev_ep_enable+0x13e>
    575c:	2908      	cmp	r1, #8
    575e:	bf94      	ite	ls
    5760:	2100      	movls	r1, #0
    5762:	2101      	movhi	r1, #1
    5764:	e790      	b.n	5688 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5766:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    576a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    576c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5770:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5772:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    5776:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5778:	2640      	movs	r6, #64	; 0x40
    577a:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    577e:	2180      	movs	r1, #128	; 0x80
    5780:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    5784:	4f27      	ldr	r7, [pc, #156]	; (5824 <_usb_d_dev_ep_enable+0x2b0>)
    5786:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    578a:	2000      	movs	r0, #0
    578c:	72a8      	strb	r0, [r5, #10]
    578e:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5790:	009c      	lsls	r4, r3, #2
    5792:	18e1      	adds	r1, r4, r3
    5794:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    5798:	f891 20e6 	ldrb.w	r2, [r1, #230]	; 0xe6
    579c:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    57a0:	f8d1 50e0 	ldr.w	r5, [r1, #224]	; 0xe0
	bank->ADDR.reg          = addr;
    57a4:	0152      	lsls	r2, r2, #5
    57a6:	18b9      	adds	r1, r7, r2
    57a8:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    57aa:	4423      	add	r3, r4
    57ac:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    57b0:	f8b3 40e4 	ldrh.w	r4, [r3, #228]	; 0xe4
    57b4:	684b      	ldr	r3, [r1, #4]
    57b6:	f364 339b 	bfi	r3, r4, #14, #14
    57ba:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    57bc:	684b      	ldr	r3, [r1, #4]
    57be:	f360 030d 	bfi	r3, r0, #0, #14
    57c2:	604b      	str	r3, [r1, #4]
    57c4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    57c8:	21b0      	movs	r1, #176	; 0xb0
    57ca:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    57ce:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    57d2:	461a      	mov	r2, r3
    57d4:	2310      	movs	r3, #16
    57d6:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    57da:	e760      	b.n	569e <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    57dc:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    57e0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    57e2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    57e6:	2605      	movs	r6, #5
    57e8:	e7c3      	b.n	5772 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    57ea:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    57ee:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    57f0:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    57f4:	2603      	movs	r6, #3
    57f6:	e7bc      	b.n	5772 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    57f8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    57fc:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    57fe:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5802:	2606      	movs	r6, #6
    5804:	e7b5      	b.n	5772 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5806:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    580a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    580c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    5810:	2604      	movs	r6, #4
    5812:	e7ae      	b.n	5772 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    5814:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    5818:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    581a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    581e:	2602      	movs	r6, #2
    5820:	e7a7      	b.n	5772 <_usb_d_dev_ep_enable+0x1fe>
    5822:	bf00      	nop
    5824:	200004a4 	.word	0x200004a4
    5828:	0fffc000 	.word	0x0fffc000

0000582c <_usb_d_dev_ep_stall>:
{
    582c:	b470      	push	{r4, r5, r6}
    582e:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    5830:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    5832:	f010 000f 	ands.w	r0, r0, #15
    5836:	d008      	beq.n	584a <_usb_d_dev_ep_stall+0x1e>
    5838:	2b00      	cmp	r3, #0
    583a:	bfb4      	ite	lt
    583c:	1d43      	addlt	r3, r0, #5
    583e:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    5840:	2805      	cmp	r0, #5
    5842:	d903      	bls.n	584c <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    5844:	f06f 0011 	mvn.w	r0, #17
    5848:	e018      	b.n	587c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    584a:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    584c:	2901      	cmp	r1, #1
    584e:	d017      	beq.n	5880 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    5850:	2900      	cmp	r1, #0
    5852:	d03a      	beq.n	58ca <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5854:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5858:	4a45      	ldr	r2, [pc, #276]	; (5970 <_usb_d_dev_ep_stall+0x144>)
    585a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    585e:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5862:	f003 030f 	and.w	r3, r3, #15
    5866:	015b      	lsls	r3, r3, #5
    5868:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    586c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5870:	2310      	movs	r3, #16
    5872:	40a3      	lsls	r3, r4
    5874:	421a      	tst	r2, r3
    5876:	bf14      	ite	ne
    5878:	2001      	movne	r0, #1
    587a:	2000      	moveq	r0, #0
}
    587c:	bc70      	pop	{r4, r5, r6}
    587e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    5880:	2510      	movs	r5, #16
    5882:	40a5      	lsls	r5, r4
    5884:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    5886:	493a      	ldr	r1, [pc, #232]	; (5970 <_usb_d_dev_ep_stall+0x144>)
    5888:	009e      	lsls	r6, r3, #2
    588a:	18f2      	adds	r2, r6, r3
    588c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5890:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    5894:	f002 020f 	and.w	r2, r2, #15
    5898:	0150      	lsls	r0, r2, #5
    589a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    589e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    58a2:	2020      	movs	r0, #32
    58a4:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    58a8:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    58aa:	0152      	lsls	r2, r2, #5
    58ac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    58b0:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    58b4:	4433      	add	r3, r6
    58b6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    58ba:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    58be:	f042 0208 	orr.w	r2, r2, #8
    58c2:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    58c6:	2000      	movs	r0, #0
    58c8:	e7d8      	b.n	587c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    58ca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    58ce:	4928      	ldr	r1, [pc, #160]	; (5970 <_usb_d_dev_ep_stall+0x144>)
    58d0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    58d4:	f892 20e6 	ldrb.w	r2, [r2, #230]	; 0xe6
    58d8:	f002 020f 	and.w	r2, r2, #15
    58dc:	0151      	lsls	r1, r2, #5
    58de:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    58e2:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    58e6:	2010      	movs	r0, #16
    58e8:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    58ea:	4205      	tst	r5, r0
    58ec:	d03c      	beq.n	5968 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    58ee:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    58f0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    58f4:	2020      	movs	r0, #32
    58f6:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    58f8:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    58fa:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    58fe:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    5902:	4202      	tst	r2, r0
    5904:	d007      	beq.n	5916 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    5906:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    590a:	2201      	movs	r2, #1
    590c:	fa02 f404 	lsl.w	r4, r2, r4
    5910:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    5912:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    5916:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    591a:	4815      	ldr	r0, [pc, #84]	; (5970 <_usb_d_dev_ep_stall+0x144>)
    591c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5920:	f892 20e7 	ldrb.w	r2, [r2, #231]	; 0xe7
    5924:	f002 0207 	and.w	r2, r2, #7
    5928:	2a01      	cmp	r2, #1
    592a:	d00c      	beq.n	5946 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    592c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5930:	4a0f      	ldr	r2, [pc, #60]	; (5970 <_usb_d_dev_ep_stall+0x144>)
    5932:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5936:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    593a:	f36f 02c3 	bfc	r2, #3, #1
    593e:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    5942:	2000      	movs	r0, #0
    5944:	e79a      	b.n	587c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    5946:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    594a:	f012 0f30 	tst.w	r2, #48	; 0x30
    594e:	d10d      	bne.n	596c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    5950:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5954:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    5958:	f893 20e7 	ldrb.w	r2, [r3, #231]	; 0xe7
    595c:	f36f 02c3 	bfc	r2, #3, #1
    5960:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    5964:	2000      	movs	r0, #0
    5966:	e789      	b.n	587c <_usb_d_dev_ep_stall+0x50>
    5968:	2000      	movs	r0, #0
    596a:	e787      	b.n	587c <_usb_d_dev_ep_stall+0x50>
    596c:	2000      	movs	r0, #0
    596e:	e785      	b.n	587c <_usb_d_dev_ep_stall+0x50>
    5970:	200004a4 	.word	0x200004a4

00005974 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    5974:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    5976:	f000 040f 	and.w	r4, r0, #15
    597a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    597c:	4a14      	ldr	r2, [pc, #80]	; (59d0 <_usb_d_dev_ep_read_req+0x5c>)
    597e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    5980:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    5982:	6840      	ldr	r0, [r0, #4]
    5984:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    5988:	2c05      	cmp	r4, #5
    598a:	d817      	bhi.n	59bc <_usb_d_dev_ep_read_req+0x48>
    598c:	b1c9      	cbz	r1, 59c2 <_usb_d_dev_ep_read_req+0x4e>
    598e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    5992:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    5996:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    5998:	2a11      	cmp	r2, #17
    599a:	d115      	bne.n	59c8 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    599c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    59a0:	f012 0f10 	tst.w	r2, #16
    59a4:	d102      	bne.n	59ac <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    59a6:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    59a8:	bc30      	pop	{r4, r5}
    59aa:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    59ac:	682c      	ldr	r4, [r5, #0]
    59ae:	686a      	ldr	r2, [r5, #4]
    59b0:	600c      	str	r4, [r1, #0]
    59b2:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    59b4:	2210      	movs	r2, #16
    59b6:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    59ba:	e7f5      	b.n	59a8 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    59bc:	f06f 0011 	mvn.w	r0, #17
    59c0:	e7f2      	b.n	59a8 <_usb_d_dev_ep_read_req+0x34>
    59c2:	f06f 0011 	mvn.w	r0, #17
    59c6:	e7ef      	b.n	59a8 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    59c8:	f06f 0012 	mvn.w	r0, #18
    59cc:	e7ec      	b.n	59a8 <_usb_d_dev_ep_read_req+0x34>
    59ce:	bf00      	nop
    59d0:	200004a4 	.word	0x200004a4

000059d4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    59d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59d8:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    59da:	7a03      	ldrb	r3, [r0, #8]
    59dc:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    59de:	f013 030f 	ands.w	r3, r3, #15
    59e2:	f000 80c2 	beq.w	5b6a <_usb_d_dev_ep_trans+0x196>
    59e6:	2e00      	cmp	r6, #0
    59e8:	bfb4      	ite	lt
    59ea:	1d5a      	addlt	r2, r3, #5
    59ec:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    59ee:	4614      	mov	r4, r2
    59f0:	4969      	ldr	r1, [pc, #420]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    59f2:	f101 07c0 	add.w	r7, r1, #192	; 0xc0
    59f6:	1c55      	adds	r5, r2, #1
    59f8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    59fc:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5a00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5a04:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5a08:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    5a0c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    5a10:	428a      	cmp	r2, r1
    5a12:	d025      	beq.n	5a60 <_usb_d_dev_ep_trans+0x8c>
    5a14:	1e55      	subs	r5, r2, #1
    5a16:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    5a18:	6841      	ldr	r1, [r0, #4]
    5a1a:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    5a1c:	2b05      	cmp	r3, #5
    5a1e:	f200 8092 	bhi.w	5b46 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    5a22:	6803      	ldr	r3, [r0, #0]
    5a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5a28:	d31c      	bcc.n	5a64 <_usb_d_dev_ep_trans+0x90>
    5a2a:	eb03 0c01 	add.w	ip, r3, r1
    5a2e:	f8df e180 	ldr.w	lr, [pc, #384]	; 5bb0 <_usb_d_dev_ep_trans+0x1dc>
    5a32:	45f4      	cmp	ip, lr
    5a34:	d816      	bhi.n	5a64 <_usb_d_dev_ep_trans+0x90>
    5a36:	f013 0f03 	tst.w	r3, #3
    5a3a:	d113      	bne.n	5a64 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    5a3c:	2e00      	cmp	r6, #0
    5a3e:	db2a      	blt.n	5a96 <_usb_d_dev_ep_trans+0xc2>
    5a40:	428a      	cmp	r2, r1
    5a42:	f200 809c 	bhi.w	5b7e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    5a46:	b34d      	cbz	r5, 5a9c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    5a48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5a4c:	4a52      	ldr	r2, [pc, #328]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    5a4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5a56:	2b00      	cmp	r3, #0
    5a58:	d07b      	beq.n	5b52 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    5a5a:	f04f 0800 	mov.w	r8, #0
    5a5e:	e00c      	b.n	5a7a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5a60:	4615      	mov	r5, r2
    5a62:	e7d9      	b.n	5a18 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    5a64:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5a68:	4a4b      	ldr	r2, [pc, #300]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    5a6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5a72:	2b00      	cmp	r3, #0
    5a74:	d06a      	beq.n	5b4c <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    5a76:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    5a7a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5a7e:	4a46      	ldr	r2, [pc, #280]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    5a80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5a84:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5a88:	f013 0f08 	tst.w	r3, #8
    5a8c:	d009      	beq.n	5aa2 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    5a8e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    5a90:	b003      	add	sp, #12
    5a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    5a96:	f04f 0800 	mov.w	r8, #0
    5a9a:	e7ee      	b.n	5a7a <_usb_d_dev_ep_trans+0xa6>
    5a9c:	f04f 0800 	mov.w	r8, #0
    5aa0:	e7eb      	b.n	5a7a <_usb_d_dev_ep_trans+0xa6>
    5aa2:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    5aa4:	a801      	add	r0, sp, #4
    5aa6:	4b3d      	ldr	r3, [pc, #244]	; (5b9c <_usb_d_dev_ep_trans+0x1c8>)
    5aa8:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    5aaa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5aae:	4a3a      	ldr	r2, [pc, #232]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    5ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5ab4:	f893 30e7 	ldrb.w	r3, [r3, #231]	; 0xe7
    5ab8:	f013 0f40 	tst.w	r3, #64	; 0x40
    5abc:	d13c      	bne.n	5b38 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    5abe:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    5ac2:	4b35      	ldr	r3, [pc, #212]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    5ac4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5ac8:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    5acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5ad0:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	atomic_leave_critical(&flags);
    5ad4:	a801      	add	r0, sp, #4
    5ad6:	4b32      	ldr	r3, [pc, #200]	; (5ba0 <_usb_d_dev_ep_trans+0x1cc>)
    5ad8:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    5ada:	f8da 3000 	ldr.w	r3, [sl]
    5ade:	f8c9 30d4 	str.w	r3, [r9, #212]	; 0xd4
	ept->trans_size  = trans->size;
    5ae2:	f8da 3004 	ldr.w	r3, [sl, #4]
    5ae6:	f8c9 30d8 	str.w	r3, [r9, #216]	; 0xd8
	ept->trans_count = 0;
    5aea:	2300      	movs	r3, #0
    5aec:	f8c9 30dc 	str.w	r3, [r9, #220]	; 0xdc
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    5af0:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    5af2:	f899 30e7 	ldrb.w	r3, [r9, #231]	; 0xe7
    5af6:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    5afa:	f368 1345 	bfi	r3, r8, #5, #1
    5afe:	f889 30e7 	strb.w	r3, [r9, #231]	; 0xe7
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    5b02:	f89a 3009 	ldrb.w	r3, [sl, #9]
    5b06:	b1e3      	cbz	r3, 5b42 <_usb_d_dev_ep_trans+0x16e>
    5b08:	fab5 f585 	clz	r5, r5
    5b0c:	096d      	lsrs	r5, r5, #5
    5b0e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5b12:	4b21      	ldr	r3, [pc, #132]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    5b14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5b18:	f894 30e7 	ldrb.w	r3, [r4, #231]	; 0xe7
    5b1c:	f365 1304 	bfi	r3, r5, #4, #1
    5b20:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
	if (dir) {
    5b24:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    5b26:	f04f 0100 	mov.w	r1, #0
    5b2a:	4638      	mov	r0, r7
    5b2c:	bfb4      	ite	lt
    5b2e:	4b1d      	ldrlt	r3, [pc, #116]	; (5ba4 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    5b30:	4b1d      	ldrge	r3, [pc, #116]	; (5ba8 <_usb_d_dev_ep_trans+0x1d4>)
    5b32:	4798      	blx	r3
	return ERR_NONE;
    5b34:	2000      	movs	r0, #0
    5b36:	e7ab      	b.n	5a90 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    5b38:	a801      	add	r0, sp, #4
    5b3a:	4b19      	ldr	r3, [pc, #100]	; (5ba0 <_usb_d_dev_ep_trans+0x1cc>)
    5b3c:	4798      	blx	r3
		return USB_BUSY;
    5b3e:	2001      	movs	r0, #1
    5b40:	e7a6      	b.n	5a90 <_usb_d_dev_ep_trans+0xbc>
    5b42:	2500      	movs	r5, #0
    5b44:	e7e3      	b.n	5b0e <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    5b46:	f06f 0011 	mvn.w	r0, #17
    5b4a:	e7a1      	b.n	5a90 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5b4c:	f06f 0012 	mvn.w	r0, #18
    5b50:	e79e      	b.n	5a90 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    5b52:	f06f 0011 	mvn.w	r0, #17
    5b56:	e79b      	b.n	5a90 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    5b58:	f06f 0012 	mvn.w	r0, #18
    5b5c:	e798      	b.n	5a90 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    5b5e:	6841      	ldr	r1, [r0, #4]
    5b60:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    5b64:	4f11      	ldr	r7, [pc, #68]	; (5bac <_usb_d_dev_ep_trans+0x1d8>)
    5b66:	2400      	movs	r4, #0
    5b68:	e75b      	b.n	5a22 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    5b6a:	4a0b      	ldr	r2, [pc, #44]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    5b6c:	f8b2 20e4 	ldrh.w	r2, [r2, #228]	; 0xe4
    5b70:	f240 31ff 	movw	r1, #1023	; 0x3ff
    5b74:	428a      	cmp	r2, r1
    5b76:	d0f2      	beq.n	5b5e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    5b78:	4f0c      	ldr	r7, [pc, #48]	; (5bac <_usb_d_dev_ep_trans+0x1d8>)
    5b7a:	2400      	movs	r4, #0
    5b7c:	e74a      	b.n	5a14 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    5b7e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    5b82:	4a05      	ldr	r2, [pc, #20]	; (5b98 <_usb_d_dev_ep_trans+0x1c4>)
    5b84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    5b8c:	2b00      	cmp	r3, #0
    5b8e:	d0e3      	beq.n	5b58 <_usb_d_dev_ep_trans+0x184>
    5b90:	f04f 0801 	mov.w	r8, #1
    5b94:	e771      	b.n	5a7a <_usb_d_dev_ep_trans+0xa6>
    5b96:	bf00      	nop
    5b98:	200004a4 	.word	0x200004a4
    5b9c:	0000172d 	.word	0x0000172d
    5ba0:	0000173b 	.word	0x0000173b
    5ba4:	00004c85 	.word	0x00004c85
    5ba8:	00004e09 	.word	0x00004e09
    5bac:	20000578 	.word	0x20000578
    5bb0:	20041fff 	.word	0x20041fff

00005bb4 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5bb4:	4b07      	ldr	r3, [pc, #28]	; (5bd4 <_usb_d_dev_register_callback+0x20>)
    5bb6:	2900      	cmp	r1, #0
    5bb8:	bf08      	it	eq
    5bba:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    5bbc:	2801      	cmp	r0, #1
    5bbe:	d004      	beq.n	5bca <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    5bc0:	b910      	cbnz	r0, 5bc8 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    5bc2:	4b05      	ldr	r3, [pc, #20]	; (5bd8 <_usb_d_dev_register_callback+0x24>)
    5bc4:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    5bc8:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    5bca:	4b03      	ldr	r3, [pc, #12]	; (5bd8 <_usb_d_dev_register_callback+0x24>)
    5bcc:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
    5bd0:	4770      	bx	lr
    5bd2:	bf00      	nop
    5bd4:	000049f5 	.word	0x000049f5
    5bd8:	200004a4 	.word	0x200004a4

00005bdc <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    5bdc:	4b0a      	ldr	r3, [pc, #40]	; (5c08 <_usb_d_dev_register_ep_callback+0x2c>)
    5bde:	2900      	cmp	r1, #0
    5be0:	bf08      	it	eq
    5be2:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    5be4:	4603      	mov	r3, r0
    5be6:	b138      	cbz	r0, 5bf8 <_usb_d_dev_register_ep_callback+0x1c>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    5be8:	2801      	cmp	r0, #1
    5bea:	d009      	beq.n	5c00 <_usb_d_dev_register_ep_callback+0x24>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    5bec:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    5bee:	bf04      	itt	eq
    5bf0:	4b06      	ldreq	r3, [pc, #24]	; (5c0c <_usb_d_dev_register_ep_callback+0x30>)
    5bf2:	f8c3 10d0 	streq.w	r1, [r3, #208]	; 0xd0
    5bf6:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    5bf8:	4b04      	ldr	r3, [pc, #16]	; (5c0c <_usb_d_dev_register_ep_callback+0x30>)
    5bfa:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    5bfe:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    5c00:	4b02      	ldr	r3, [pc, #8]	; (5c0c <_usb_d_dev_register_ep_callback+0x30>)
    5c02:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    5c06:	4770      	bx	lr
    5c08:	000049f5 	.word	0x000049f5
    5c0c:	200004a4 	.word	0x200004a4

00005c10 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    5c10:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5c12:	4b01      	ldr	r3, [pc, #4]	; (5c18 <USB_0_Handler+0x8>)
    5c14:	4798      	blx	r3
    5c16:	bd08      	pop	{r3, pc}
    5c18:	00004ff9 	.word	0x00004ff9

00005c1c <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    5c1c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5c1e:	4b01      	ldr	r3, [pc, #4]	; (5c24 <USB_1_Handler+0x8>)
    5c20:	4798      	blx	r3
    5c22:	bd08      	pop	{r3, pc}
    5c24:	00004ff9 	.word	0x00004ff9

00005c28 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    5c28:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5c2a:	4b01      	ldr	r3, [pc, #4]	; (5c30 <USB_2_Handler+0x8>)
    5c2c:	4798      	blx	r3
    5c2e:	bd08      	pop	{r3, pc}
    5c30:	00004ff9 	.word	0x00004ff9

00005c34 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    5c34:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    5c36:	4b01      	ldr	r3, [pc, #4]	; (5c3c <USB_3_Handler+0x8>)
    5c38:	4798      	blx	r3
    5c3a:	bd08      	pop	{r3, pc}
    5c3c:	00004ff9 	.word	0x00004ff9

00005c40 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    5c40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    5c42:	4604      	mov	r4, r0
    5c44:	b340      	cbz	r0, 5c98 <_wdt_init+0x58>
    5c46:	6800      	ldr	r0, [r0, #0]
    5c48:	3000      	adds	r0, #0
    5c4a:	bf18      	it	ne
    5c4c:	2001      	movne	r0, #1
    5c4e:	2250      	movs	r2, #80	; 0x50
    5c50:	4915      	ldr	r1, [pc, #84]	; (5ca8 <_wdt_init+0x68>)
    5c52:	4b16      	ldr	r3, [pc, #88]	; (5cac <_wdt_init+0x6c>)
    5c54:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    5c56:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    5c58:	689a      	ldr	r2, [r3, #8]
    5c5a:	f012 0f0e 	tst.w	r2, #14
    5c5e:	d1fb      	bne.n	5c58 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5c60:	781a      	ldrb	r2, [r3, #0]
    5c62:	09d2      	lsrs	r2, r2, #7
    5c64:	d11a      	bne.n	5c9c <_wdt_init+0x5c>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    5c66:	689a      	ldr	r2, [r3, #8]
    5c68:	f012 0f0e 	tst.w	r2, #14
    5c6c:	d1fb      	bne.n	5c66 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    5c6e:	781a      	ldrb	r2, [r3, #0]
    5c70:	f012 0f02 	tst.w	r2, #2
    5c74:	d115      	bne.n	5ca2 <_wdt_init+0x62>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    5c76:	781a      	ldrb	r2, [r3, #0]
    5c78:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    5c7c:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    5c7e:	689a      	ldr	r2, [r3, #8]
    5c80:	f012 0f0e 	tst.w	r2, #14
    5c84:	d1fb      	bne.n	5c7e <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    5c86:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    5c88:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    5c8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    5c8e:	f043 030b 	orr.w	r3, r3, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    5c92:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    5c94:	2000      	movs	r0, #0
    5c96:	bd10      	pop	{r4, pc}
    5c98:	2000      	movs	r0, #0
    5c9a:	e7d8      	b.n	5c4e <_wdt_init+0xe>
		return ERR_DENIED;
    5c9c:	f06f 0010 	mvn.w	r0, #16
    5ca0:	bd10      	pop	{r4, pc}
    5ca2:	f06f 0010 	mvn.w	r0, #16
}
    5ca6:	bd10      	pop	{r4, pc}
    5ca8:	00008840 	.word	0x00008840
    5cac:	000026ad 	.word	0x000026ad

00005cb0 <main>:




int main(void)
{
    5cb0:	b508      	push	{r3, lr}



	atmel_start_init();	
    5cb2:	4b06      	ldr	r3, [pc, #24]	; (5ccc <main+0x1c>)
    5cb4:	4798      	blx	r3

	
	printf("Initialization\r\n");
    5cb6:	4806      	ldr	r0, [pc, #24]	; (5cd0 <main+0x20>)
    5cb8:	4c06      	ldr	r4, [pc, #24]	; (5cd4 <main+0x24>)
    5cba:	47a0      	blx	r4
		
	#ifdef UNITTEST	
		#include "grid/grid_unittest.h"
		grid_unittest_start();	
    5cbc:	4b06      	ldr	r3, [pc, #24]	; (5cd8 <main+0x28>)
    5cbe:	4798      	blx	r3
		
		grid_sys_unittest();	
    5cc0:	4d06      	ldr	r5, [pc, #24]	; (5cdc <main+0x2c>)
    5cc2:	47a8      	blx	r5
		grid_sys_unittest();	
    5cc4:	47a8      	blx	r5
	
		printf(" Unit Test Finished\r\n");
    5cc6:	4806      	ldr	r0, [pc, #24]	; (5ce0 <main+0x30>)
    5cc8:	47a0      	blx	r4
    5cca:	e7fe      	b.n	5cca <main+0x1a>
    5ccc:	000002d1 	.word	0x000002d1
    5cd0:	00008b14 	.word	0x00008b14
    5cd4:	00006f2d 	.word	0x00006f2d
    5cd8:	000012e1 	.word	0x000012e1
    5cdc:	000013e1 	.word	0x000013e1
    5ce0:	00008b24 	.word	0x00008b24

00005ce4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    5ce4:	b940      	cbnz	r0, 5cf8 <_read+0x14>
{
    5ce6:	b508      	push	{r3, lr}
    5ce8:	460b      	mov	r3, r1
    5cea:	4611      	mov	r1, r2
    5cec:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    5cee:	4b04      	ldr	r3, [pc, #16]	; (5d00 <_read+0x1c>)
    5cf0:	4798      	blx	r3
    5cf2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5cf6:	bd08      	pop	{r3, pc}
		return -1;
    5cf8:	f04f 30ff 	mov.w	r0, #4294967295
    5cfc:	4770      	bx	lr
    5cfe:	bf00      	nop
    5d00:	00005d55 	.word	0x00005d55

00005d04 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    5d04:	3801      	subs	r0, #1
    5d06:	2802      	cmp	r0, #2
    5d08:	d808      	bhi.n	5d1c <_write+0x18>
{
    5d0a:	b508      	push	{r3, lr}
    5d0c:	460b      	mov	r3, r1
    5d0e:	4611      	mov	r1, r2
    5d10:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    5d12:	4b04      	ldr	r3, [pc, #16]	; (5d24 <_write+0x20>)
    5d14:	4798      	blx	r3
    5d16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    5d1a:	bd08      	pop	{r3, pc}
		return -1;
    5d1c:	f04f 30ff 	mov.w	r0, #4294967295
    5d20:	4770      	bx	lr
    5d22:	bf00      	nop
    5d24:	00005d79 	.word	0x00005d79

00005d28 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    5d28:	b570      	push	{r4, r5, r6, lr}
    5d2a:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    5d2c:	4d06      	ldr	r5, [pc, #24]	; (5d48 <stdio_io_init+0x20>)
    5d2e:	682b      	ldr	r3, [r5, #0]
    5d30:	2100      	movs	r1, #0
    5d32:	6898      	ldr	r0, [r3, #8]
    5d34:	4c05      	ldr	r4, [pc, #20]	; (5d4c <stdio_io_init+0x24>)
    5d36:	47a0      	blx	r4
	setbuf(stdin, NULL);
    5d38:	682b      	ldr	r3, [r5, #0]
    5d3a:	2100      	movs	r1, #0
    5d3c:	6858      	ldr	r0, [r3, #4]
    5d3e:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    5d40:	4b03      	ldr	r3, [pc, #12]	; (5d50 <stdio_io_init+0x28>)
    5d42:	601e      	str	r6, [r3, #0]
    5d44:	bd70      	pop	{r4, r5, r6, pc}
    5d46:	bf00      	nop
    5d48:	20000058 	.word	0x20000058
    5d4c:	00006f5d 	.word	0x00006f5d
    5d50:	20000864 	.word	0x20000864

00005d54 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    5d54:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5d56:	4b06      	ldr	r3, [pc, #24]	; (5d70 <stdio_io_read+0x1c>)
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	b133      	cbz	r3, 5d6a <stdio_io_read+0x16>
    5d5c:	460a      	mov	r2, r1
    5d5e:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    5d60:	b292      	uxth	r2, r2
    5d62:	4618      	mov	r0, r3
    5d64:	4b03      	ldr	r3, [pc, #12]	; (5d74 <stdio_io_read+0x20>)
    5d66:	4798      	blx	r3
    5d68:	bd08      	pop	{r3, pc}
		return 0;
    5d6a:	2000      	movs	r0, #0
}
    5d6c:	bd08      	pop	{r3, pc}
    5d6e:	bf00      	nop
    5d70:	20000864 	.word	0x20000864
    5d74:	00001929 	.word	0x00001929

00005d78 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    5d78:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    5d7a:	4b06      	ldr	r3, [pc, #24]	; (5d94 <stdio_io_write+0x1c>)
    5d7c:	681b      	ldr	r3, [r3, #0]
    5d7e:	b133      	cbz	r3, 5d8e <stdio_io_write+0x16>
    5d80:	460a      	mov	r2, r1
    5d82:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    5d84:	b292      	uxth	r2, r2
    5d86:	4618      	mov	r0, r3
    5d88:	4b03      	ldr	r3, [pc, #12]	; (5d98 <stdio_io_write+0x20>)
    5d8a:	4798      	blx	r3
    5d8c:	bd08      	pop	{r3, pc}
		return 0;
    5d8e:	2000      	movs	r0, #0
}
    5d90:	bd08      	pop	{r3, pc}
    5d92:	bf00      	nop
    5d94:	20000864 	.word	0x20000864
    5d98:	000018f9 	.word	0x000018f9

00005d9c <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    5d9c:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    5d9e:	4c04      	ldr	r4, [pc, #16]	; (5db0 <stdio_redirect_init+0x14>)
    5da0:	4620      	mov	r0, r4
    5da2:	4b04      	ldr	r3, [pc, #16]	; (5db4 <stdio_redirect_init+0x18>)
    5da4:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    5da6:	4620      	mov	r0, r4
    5da8:	4b03      	ldr	r3, [pc, #12]	; (5db8 <stdio_redirect_init+0x1c>)
    5daa:	4798      	blx	r3
    5dac:	bd10      	pop	{r4, pc}
    5dae:	bf00      	nop
    5db0:	20000a44 	.word	0x20000a44
    5db4:	000020f9 	.word	0x000020f9
    5db8:	00005d29 	.word	0x00005d29

00005dbc <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    5dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dbe:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    5dc0:	780b      	ldrb	r3, [r1, #0]
    5dc2:	f3c3 1441 	ubfx	r4, r3, #5, #2
    5dc6:	2c01      	cmp	r4, #1
    5dc8:	d15e      	bne.n	5e88 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    5dca:	888c      	ldrh	r4, [r1, #4]
    5dcc:	4d35      	ldr	r5, [pc, #212]	; (5ea4 <cdcdf_acm_req+0xe8>)
    5dce:	782d      	ldrb	r5, [r5, #0]
    5dd0:	42a5      	cmp	r5, r4
    5dd2:	d003      	beq.n	5ddc <cdcdf_acm_req+0x20>
    5dd4:	4d33      	ldr	r5, [pc, #204]	; (5ea4 <cdcdf_acm_req+0xe8>)
    5dd6:	786d      	ldrb	r5, [r5, #1]
    5dd8:	42a5      	cmp	r5, r4
    5dda:	d158      	bne.n	5e8e <cdcdf_acm_req+0xd2>
    5ddc:	4616      	mov	r6, r2
    5dde:	460c      	mov	r4, r1
    5de0:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    5de2:	f013 0f80 	tst.w	r3, #128	; 0x80
    5de6:	d10c      	bne.n	5e02 <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    5de8:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    5dea:	4b2f      	ldr	r3, [pc, #188]	; (5ea8 <cdcdf_acm_req+0xec>)
    5dec:	4798      	blx	r3
    5dee:	4601      	mov	r1, r0
	switch (req->bRequest) {
    5df0:	7863      	ldrb	r3, [r4, #1]
    5df2:	2b20      	cmp	r3, #32
    5df4:	d013      	beq.n	5e1e <cdcdf_acm_req+0x62>
    5df6:	2b22      	cmp	r3, #34	; 0x22
    5df8:	d032      	beq.n	5e60 <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    5dfa:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    5dfe:	b003      	add	sp, #12
    5e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    5e02:	2a01      	cmp	r2, #1
    5e04:	d046      	beq.n	5e94 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    5e06:	784b      	ldrb	r3, [r1, #1]
    5e08:	2b21      	cmp	r3, #33	; 0x21
    5e0a:	d145      	bne.n	5e98 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5e0c:	88cb      	ldrh	r3, [r1, #6]
    5e0e:	2b07      	cmp	r3, #7
    5e10:	d145      	bne.n	5e9e <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    5e12:	2300      	movs	r3, #0
    5e14:	2207      	movs	r2, #7
    5e16:	4925      	ldr	r1, [pc, #148]	; (5eac <cdcdf_acm_req+0xf0>)
    5e18:	4c25      	ldr	r4, [pc, #148]	; (5eb0 <cdcdf_acm_req+0xf4>)
    5e1a:	47a0      	blx	r4
    5e1c:	e7ef      	b.n	5dfe <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    5e1e:	2f07      	cmp	r7, #7
    5e20:	d12b      	bne.n	5e7a <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    5e22:	b1be      	cbz	r6, 5e54 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    5e24:	6800      	ldr	r0, [r0, #0]
    5e26:	9000      	str	r0, [sp, #0]
    5e28:	888a      	ldrh	r2, [r1, #4]
    5e2a:	798b      	ldrb	r3, [r1, #6]
    5e2c:	f8ad 2004 	strh.w	r2, [sp, #4]
    5e30:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    5e34:	4b1b      	ldr	r3, [pc, #108]	; (5ea4 <cdcdf_acm_req+0xe8>)
    5e36:	691b      	ldr	r3, [r3, #16]
    5e38:	b113      	cbz	r3, 5e40 <cdcdf_acm_req+0x84>
    5e3a:	4668      	mov	r0, sp
    5e3c:	4798      	blx	r3
    5e3e:	b1f8      	cbz	r0, 5e80 <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    5e40:	4b18      	ldr	r3, [pc, #96]	; (5ea4 <cdcdf_acm_req+0xe8>)
    5e42:	aa02      	add	r2, sp, #8
    5e44:	e912 0003 	ldmdb	r2, {r0, r1}
    5e48:	6098      	str	r0, [r3, #8]
    5e4a:	8199      	strh	r1, [r3, #12]
    5e4c:	0c09      	lsrs	r1, r1, #16
    5e4e:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    5e50:	2000      	movs	r0, #0
    5e52:	e7d4      	b.n	5dfe <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    5e54:	2300      	movs	r3, #0
    5e56:	2207      	movs	r2, #7
    5e58:	4628      	mov	r0, r5
    5e5a:	4c15      	ldr	r4, [pc, #84]	; (5eb0 <cdcdf_acm_req+0xf4>)
    5e5c:	47a0      	blx	r4
    5e5e:	e7ce      	b.n	5dfe <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    5e60:	2300      	movs	r3, #0
    5e62:	461a      	mov	r2, r3
    5e64:	4619      	mov	r1, r3
    5e66:	4618      	mov	r0, r3
    5e68:	4d11      	ldr	r5, [pc, #68]	; (5eb0 <cdcdf_acm_req+0xf4>)
    5e6a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    5e6c:	4b0d      	ldr	r3, [pc, #52]	; (5ea4 <cdcdf_acm_req+0xe8>)
    5e6e:	695b      	ldr	r3, [r3, #20]
    5e70:	b143      	cbz	r3, 5e84 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    5e72:	8860      	ldrh	r0, [r4, #2]
    5e74:	4798      	blx	r3
		return ERR_NONE;
    5e76:	2000      	movs	r0, #0
    5e78:	e7c1      	b.n	5dfe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    5e7a:	f04f 30ff 	mov.w	r0, #4294967295
    5e7e:	e7be      	b.n	5dfe <cdcdf_acm_req+0x42>
			return ERR_NONE;
    5e80:	2000      	movs	r0, #0
    5e82:	e7bc      	b.n	5dfe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    5e84:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    5e86:	e7ba      	b.n	5dfe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    5e88:	f06f 0009 	mvn.w	r0, #9
    5e8c:	e7b7      	b.n	5dfe <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    5e8e:	f06f 0009 	mvn.w	r0, #9
    5e92:	e7b4      	b.n	5dfe <cdcdf_acm_req+0x42>
		return ERR_NONE;
    5e94:	2000      	movs	r0, #0
    5e96:	e7b2      	b.n	5dfe <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    5e98:	f06f 000c 	mvn.w	r0, #12
    5e9c:	e7af      	b.n	5dfe <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    5e9e:	f04f 30ff 	mov.w	r0, #4294967295
    5ea2:	e7ac      	b.n	5dfe <cdcdf_acm_req+0x42>
    5ea4:	20000868 	.word	0x20000868
    5ea8:	00006ae5 	.word	0x00006ae5
    5eac:	20000870 	.word	0x20000870
    5eb0:	00006601 	.word	0x00006601

00005eb4 <cdcdf_acm_ctrl>:
{
    5eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5eb8:	b083      	sub	sp, #12
    5eba:	4616      	mov	r6, r2
	switch (ctrl) {
    5ebc:	2901      	cmp	r1, #1
    5ebe:	d066      	beq.n	5f8e <cdcdf_acm_ctrl+0xda>
    5ec0:	b141      	cbz	r1, 5ed4 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    5ec2:	2902      	cmp	r1, #2
    5ec4:	bf0c      	ite	eq
    5ec6:	f06f 001a 	mvneq.w	r0, #26
    5eca:	f06f 000c 	mvnne.w	r0, #12
}
    5ece:	b003      	add	sp, #12
    5ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    5ed4:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    5ed8:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    5eda:	2800      	cmp	r0, #0
    5edc:	f000 8085 	beq.w	5fea <cdcdf_acm_ctrl+0x136>
    5ee0:	f10a 3bff 	add.w	fp, sl, #4294967295
    5ee4:	f10a 0301 	add.w	r3, sl, #1
    5ee8:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5eea:	4f46      	ldr	r7, [pc, #280]	; (6004 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    5eec:	f8df 9124 	ldr.w	r9, [pc, #292]	; 6014 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    5ef0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 6018 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    5ef4:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    5ef6:	7943      	ldrb	r3, [r0, #5]
    5ef8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    5efc:	2b02      	cmp	r3, #2
    5efe:	d002      	beq.n	5f06 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    5f00:	f06f 0009 	mvn.w	r0, #9
    5f04:	e7e3      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
    5f06:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    5f0a:	f89b 3000 	ldrb.w	r3, [fp]
    5f0e:	429a      	cmp	r2, r3
    5f10:	d06e      	beq.n	5ff0 <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    5f12:	2bff      	cmp	r3, #255	; 0xff
    5f14:	d16f      	bne.n	5ff6 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    5f16:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    5f1a:	2205      	movs	r2, #5
    5f1c:	6871      	ldr	r1, [r6, #4]
    5f1e:	4b3a      	ldr	r3, [pc, #232]	; (6008 <cdcdf_acm_ctrl+0x154>)
    5f20:	4798      	blx	r3
		while (NULL != ep) {
    5f22:	4604      	mov	r4, r0
    5f24:	b1f8      	cbz	r0, 5f66 <cdcdf_acm_ctrl+0xb2>
    5f26:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    5f2a:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    5f2c:	7963      	ldrb	r3, [r4, #5]
    5f2e:	7922      	ldrb	r2, [r4, #4]
    5f30:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    5f34:	b292      	uxth	r2, r2
    5f36:	78e1      	ldrb	r1, [r4, #3]
    5f38:	4628      	mov	r0, r5
    5f3a:	47b8      	blx	r7
    5f3c:	2800      	cmp	r0, #0
    5f3e:	d15d      	bne.n	5ffc <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    5f40:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    5f44:	bf14      	ite	ne
    5f46:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    5f4a:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    5f4e:	4628      	mov	r0, r5
    5f50:	47c8      	blx	r9
			desc->sod = ep;
    5f52:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    5f54:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    5f56:	6871      	ldr	r1, [r6, #4]
    5f58:	4420      	add	r0, r4
    5f5a:	47c0      	blx	r8
		while (NULL != ep) {
    5f5c:	4604      	mov	r4, r0
    5f5e:	2800      	cmp	r0, #0
    5f60:	d1e3      	bne.n	5f2a <cdcdf_acm_ctrl+0x76>
    5f62:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    5f66:	6833      	ldr	r3, [r6, #0]
    5f68:	7818      	ldrb	r0, [r3, #0]
    5f6a:	2204      	movs	r2, #4
    5f6c:	6871      	ldr	r1, [r6, #4]
    5f6e:	4418      	add	r0, r3
    5f70:	4b25      	ldr	r3, [pc, #148]	; (6008 <cdcdf_acm_ctrl+0x154>)
    5f72:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    5f74:	9b00      	ldr	r3, [sp, #0]
    5f76:	459b      	cmp	fp, r3
    5f78:	d004      	beq.n	5f84 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    5f7a:	2800      	cmp	r0, #0
    5f7c:	d1ba      	bne.n	5ef4 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    5f7e:	f06f 0009 	mvn.w	r0, #9
    5f82:	e7a4      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    5f84:	2201      	movs	r2, #1
    5f86:	4b21      	ldr	r3, [pc, #132]	; (600c <cdcdf_acm_ctrl+0x158>)
    5f88:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    5f8a:	2000      	movs	r0, #0
    5f8c:	e79f      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    5f8e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    5f90:	b142      	cbz	r2, 5fa4 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    5f92:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    5f94:	795b      	ldrb	r3, [r3, #5]
    5f96:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    5f9a:	2b02      	cmp	r3, #2
    5f9c:	d002      	beq.n	5fa4 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    5f9e:	f06f 0009 	mvn.w	r0, #9
    5fa2:	e794      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    5fa4:	7823      	ldrb	r3, [r4, #0]
    5fa6:	2bff      	cmp	r3, #255	; 0xff
    5fa8:	d008      	beq.n	5fbc <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    5faa:	23ff      	movs	r3, #255	; 0xff
    5fac:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    5fae:	78a0      	ldrb	r0, [r4, #2]
    5fb0:	4298      	cmp	r0, r3
    5fb2:	d003      	beq.n	5fbc <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    5fb4:	4b16      	ldr	r3, [pc, #88]	; (6010 <cdcdf_acm_ctrl+0x15c>)
    5fb6:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    5fb8:	23ff      	movs	r3, #255	; 0xff
    5fba:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    5fbc:	7863      	ldrb	r3, [r4, #1]
    5fbe:	2bff      	cmp	r3, #255	; 0xff
    5fc0:	d008      	beq.n	5fd4 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    5fc2:	23ff      	movs	r3, #255	; 0xff
    5fc4:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    5fc6:	78e0      	ldrb	r0, [r4, #3]
    5fc8:	4298      	cmp	r0, r3
    5fca:	d003      	beq.n	5fd4 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    5fcc:	4b10      	ldr	r3, [pc, #64]	; (6010 <cdcdf_acm_ctrl+0x15c>)
    5fce:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    5fd0:	23ff      	movs	r3, #255	; 0xff
    5fd2:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    5fd4:	7920      	ldrb	r0, [r4, #4]
    5fd6:	28ff      	cmp	r0, #255	; 0xff
    5fd8:	d003      	beq.n	5fe2 <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    5fda:	4b0d      	ldr	r3, [pc, #52]	; (6010 <cdcdf_acm_ctrl+0x15c>)
    5fdc:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    5fde:	23ff      	movs	r3, #255	; 0xff
    5fe0:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    5fe2:	2000      	movs	r0, #0
    5fe4:	4b09      	ldr	r3, [pc, #36]	; (600c <cdcdf_acm_ctrl+0x158>)
    5fe6:	7158      	strb	r0, [r3, #5]
    5fe8:	e771      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    5fea:	f06f 0009 	mvn.w	r0, #9
    5fee:	e76e      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    5ff0:	f06f 0011 	mvn.w	r0, #17
    5ff4:	e76b      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    5ff6:	f06f 001b 	mvn.w	r0, #27
    5ffa:	e768      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    5ffc:	f06f 0013 	mvn.w	r0, #19
    6000:	e765      	b.n	5ece <cdcdf_acm_ctrl+0x1a>
    6002:	bf00      	nop
    6004:	000023f9 	.word	0x000023f9
    6008:	00006b05 	.word	0x00006b05
    600c:	20000868 	.word	0x20000868
    6010:	00002461 	.word	0x00002461
    6014:	0000248d 	.word	0x0000248d
    6018:	00006b3f 	.word	0x00006b3f

0000601c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    601c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    601e:	4b0a      	ldr	r3, [pc, #40]	; (6048 <cdcdf_acm_init+0x2c>)
    6020:	4798      	blx	r3
    6022:	2801      	cmp	r0, #1
    6024:	d80c      	bhi.n	6040 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    6026:	4809      	ldr	r0, [pc, #36]	; (604c <cdcdf_acm_init+0x30>)
    6028:	4b09      	ldr	r3, [pc, #36]	; (6050 <cdcdf_acm_init+0x34>)
    602a:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    602c:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    602e:	3018      	adds	r0, #24
    6030:	4b08      	ldr	r3, [pc, #32]	; (6054 <cdcdf_acm_init+0x38>)
    6032:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    6034:	4908      	ldr	r1, [pc, #32]	; (6058 <cdcdf_acm_init+0x3c>)
    6036:	2001      	movs	r0, #1
    6038:	4b08      	ldr	r3, [pc, #32]	; (605c <cdcdf_acm_init+0x40>)
    603a:	4798      	blx	r3
	return ERR_NONE;
    603c:	2000      	movs	r0, #0
    603e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    6040:	f06f 0010 	mvn.w	r0, #16
}
    6044:	bd08      	pop	{r3, pc}
    6046:	bf00      	nop
    6048:	00006af1 	.word	0x00006af1
    604c:	20000868 	.word	0x20000868
    6050:	00005eb5 	.word	0x00005eb5
    6054:	00006ad1 	.word	0x00006ad1
    6058:	20000040 	.word	0x20000040
    605c:	00006a3d 	.word	0x00006a3d

00006060 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    6060:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    6062:	780b      	ldrb	r3, [r1, #0]
    6064:	2b81      	cmp	r3, #129	; 0x81
    6066:	d010      	beq.n	608a <hid_keyboard_req+0x2a>
		return hid_keyboard_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    6068:	f3c3 1341 	ubfx	r3, r3, #5, #2
    606c:	2b01      	cmp	r3, #1
    606e:	d13f      	bne.n	60f0 <hid_keyboard_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    6070:	888a      	ldrh	r2, [r1, #4]
    6072:	4b22      	ldr	r3, [pc, #136]	; (60fc <hid_keyboard_req+0x9c>)
    6074:	7b1b      	ldrb	r3, [r3, #12]
    6076:	429a      	cmp	r2, r3
    6078:	d13d      	bne.n	60f6 <hid_keyboard_req+0x96>
			switch (req->bRequest) {
    607a:	784b      	ldrb	r3, [r1, #1]
    607c:	2b03      	cmp	r3, #3
    607e:	d028      	beq.n	60d2 <hid_keyboard_req+0x72>
    6080:	2b0b      	cmp	r3, #11
    6082:	d02c      	beq.n	60de <hid_keyboard_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_keyboard_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    6084:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    6088:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    608a:	784b      	ldrb	r3, [r1, #1]
    608c:	2b06      	cmp	r3, #6
    608e:	d002      	beq.n	6096 <hid_keyboard_req+0x36>
			return ERR_NOT_FOUND;
    6090:	f06f 0009 	mvn.w	r0, #9
    6094:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    6096:	888a      	ldrh	r2, [r1, #4]
    6098:	4b18      	ldr	r3, [pc, #96]	; (60fc <hid_keyboard_req+0x9c>)
    609a:	7b1b      	ldrb	r3, [r3, #12]
    609c:	429a      	cmp	r2, r3
    609e:	d002      	beq.n	60a6 <hid_keyboard_req+0x46>
			return ERR_NOT_FOUND;
    60a0:	f06f 0009 	mvn.w	r0, #9
    60a4:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    60a6:	884b      	ldrh	r3, [r1, #2]
    60a8:	0a1b      	lsrs	r3, r3, #8
    60aa:	2b21      	cmp	r3, #33	; 0x21
    60ac:	d004      	beq.n	60b8 <hid_keyboard_req+0x58>
    60ae:	2b22      	cmp	r3, #34	; 0x22
    60b0:	d009      	beq.n	60c6 <hid_keyboard_req+0x66>
		return ERR_INVALID_ARG;
    60b2:	f06f 000c 	mvn.w	r0, #12
    60b6:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    60b8:	4b10      	ldr	r3, [pc, #64]	; (60fc <hid_keyboard_req+0x9c>)
    60ba:	6819      	ldr	r1, [r3, #0]
    60bc:	2300      	movs	r3, #0
    60be:	780a      	ldrb	r2, [r1, #0]
    60c0:	4c0f      	ldr	r4, [pc, #60]	; (6100 <hid_keyboard_req+0xa0>)
    60c2:	47a0      	blx	r4
    60c4:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    60c6:	2300      	movs	r3, #0
    60c8:	223b      	movs	r2, #59	; 0x3b
    60ca:	490e      	ldr	r1, [pc, #56]	; (6104 <hid_keyboard_req+0xa4>)
    60cc:	4c0c      	ldr	r4, [pc, #48]	; (6100 <hid_keyboard_req+0xa0>)
    60ce:	47a0      	blx	r4
    60d0:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    60d2:	2300      	movs	r3, #0
    60d4:	2201      	movs	r2, #1
    60d6:	490c      	ldr	r1, [pc, #48]	; (6108 <hid_keyboard_req+0xa8>)
    60d8:	4c09      	ldr	r4, [pc, #36]	; (6100 <hid_keyboard_req+0xa0>)
    60da:	47a0      	blx	r4
    60dc:	bd10      	pop	{r4, pc}
				_hiddf_keyboard_funcd.protocol = req->wValue;
    60de:	884a      	ldrh	r2, [r1, #2]
    60e0:	4b06      	ldr	r3, [pc, #24]	; (60fc <hid_keyboard_req+0x9c>)
    60e2:	73da      	strb	r2, [r3, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    60e4:	2300      	movs	r3, #0
    60e6:	461a      	mov	r2, r3
    60e8:	4619      	mov	r1, r3
    60ea:	4c05      	ldr	r4, [pc, #20]	; (6100 <hid_keyboard_req+0xa0>)
    60ec:	47a0      	blx	r4
    60ee:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    60f0:	f06f 0009 	mvn.w	r0, #9
    60f4:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    60f6:	f06f 0009 	mvn.w	r0, #9
    60fa:	bd10      	pop	{r4, pc}
    60fc:	2000088c 	.word	0x2000088c
    6100:	00006601 	.word	0x00006601
    6104:	00008b3c 	.word	0x00008b3c
    6108:	2000089b 	.word	0x2000089b

0000610c <hid_keyboard_ctrl>:
{
    610c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6110:	4614      	mov	r4, r2
	switch (ctrl) {
    6112:	2901      	cmp	r1, #1
    6114:	d050      	beq.n	61b8 <hid_keyboard_ctrl+0xac>
    6116:	b141      	cbz	r1, 612a <hid_keyboard_ctrl+0x1e>
		return ERR_INVALID_ARG;
    6118:	2902      	cmp	r1, #2
    611a:	bf0c      	ite	eq
    611c:	f06f 051a 	mvneq.w	r5, #26
    6120:	f06f 050c 	mvnne.w	r5, #12
}
    6124:	4628      	mov	r0, r5
    6126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    612a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	ifc = desc->sod;
    612e:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    6130:	2b00      	cmp	r3, #0
    6132:	d05e      	beq.n	61f2 <hid_keyboard_ctrl+0xe6>
	ifc_desc.bInterfaceNumber = ifc[2];
    6134:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    6136:	795b      	ldrb	r3, [r3, #5]
    6138:	2b03      	cmp	r3, #3
    613a:	d15d      	bne.n	61f8 <hid_keyboard_ctrl+0xec>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    613c:	f898 300c 	ldrb.w	r3, [r8, #12]
    6140:	429a      	cmp	r2, r3
    6142:	d05c      	beq.n	61fe <hid_keyboard_ctrl+0xf2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    6144:	2bff      	cmp	r3, #255	; 0xff
    6146:	d15d      	bne.n	6204 <hid_keyboard_ctrl+0xf8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    6148:	f888 200c 	strb.w	r2, [r8, #12]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    614c:	6823      	ldr	r3, [r4, #0]
    614e:	7818      	ldrb	r0, [r3, #0]
    6150:	2221      	movs	r2, #33	; 0x21
    6152:	6861      	ldr	r1, [r4, #4]
    6154:	4418      	add	r0, r3
    6156:	4b31      	ldr	r3, [pc, #196]	; (621c <hid_keyboard_ctrl+0x110>)
    6158:	4798      	blx	r3
    615a:	4b31      	ldr	r3, [pc, #196]	; (6220 <hid_keyboard_ctrl+0x114>)
    615c:	6018      	str	r0, [r3, #0]
    615e:	2602      	movs	r6, #2
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    6160:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 6228 <hid_keyboard_ctrl+0x11c>
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    6164:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 622c <hid_keyboard_ctrl+0x120>
				usb_d_ep_enable(func_data->func_ep_out);
    6168:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 6230 <hid_keyboard_ctrl+0x124>
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    616c:	6823      	ldr	r3, [r4, #0]
    616e:	7818      	ldrb	r0, [r3, #0]
    6170:	6861      	ldr	r1, [r4, #4]
    6172:	4418      	add	r0, r3
    6174:	47c8      	blx	r9
		desc->sod = ep;
    6176:	6020      	str	r0, [r4, #0]
		if (NULL != ep) {
    6178:	2800      	cmp	r0, #0
    617a:	d046      	beq.n	620a <hid_keyboard_ctrl+0xfe>
			ep_desc.bEndpointAddress = ep[2];
    617c:	7887      	ldrb	r7, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    617e:	7943      	ldrb	r3, [r0, #5]
    6180:	7902      	ldrb	r2, [r0, #4]
    6182:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    6186:	b292      	uxth	r2, r2
    6188:	78c1      	ldrb	r1, [r0, #3]
    618a:	4638      	mov	r0, r7
    618c:	47d0      	blx	sl
    618e:	4605      	mov	r5, r0
    6190:	2800      	cmp	r0, #0
    6192:	d13d      	bne.n	6210 <hid_keyboard_ctrl+0x104>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    6194:	f017 0f80 	tst.w	r7, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    6198:	bf14      	ite	ne
    619a:	f888 700d 	strbne.w	r7, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    619e:	f888 700e 	strbeq.w	r7, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    61a2:	4638      	mov	r0, r7
    61a4:	47d8      	blx	fp
    61a6:	3e01      	subs	r6, #1
	for (i = 0; i < 2; i++) {
    61a8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    61ac:	d1de      	bne.n	616c <hid_keyboard_ctrl+0x60>
	_hiddf_keyboard_funcd.protocol = 1;
    61ae:	4b1c      	ldr	r3, [pc, #112]	; (6220 <hid_keyboard_ctrl+0x114>)
    61b0:	2201      	movs	r2, #1
    61b2:	73da      	strb	r2, [r3, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    61b4:	741a      	strb	r2, [r3, #16]
    61b6:	e7b5      	b.n	6124 <hid_keyboard_ctrl+0x18>
	struct hiddf_keyboard_func_data *func_data = (struct hiddf_keyboard_func_data *)(drv->func_data);
    61b8:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    61ba:	b11a      	cbz	r2, 61c4 <hid_keyboard_ctrl+0xb8>
		ifc_desc.bInterfaceClass = desc->sod[5];
    61bc:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    61be:	795b      	ldrb	r3, [r3, #5]
    61c0:	2b03      	cmp	r3, #3
    61c2:	d128      	bne.n	6216 <hid_keyboard_ctrl+0x10a>
	if (func_data->func_iface != 0xFF) {
    61c4:	7b2b      	ldrb	r3, [r5, #12]
    61c6:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    61c8:	bf1c      	itt	ne
    61ca:	23ff      	movne	r3, #255	; 0xff
    61cc:	732b      	strbne	r3, [r5, #12]
	if (func_data->func_ep_in != 0xFF) {
    61ce:	7b68      	ldrb	r0, [r5, #13]
    61d0:	28ff      	cmp	r0, #255	; 0xff
    61d2:	d003      	beq.n	61dc <hid_keyboard_ctrl+0xd0>
		usb_d_ep_deinit(func_data->func_ep_in);
    61d4:	4b13      	ldr	r3, [pc, #76]	; (6224 <hid_keyboard_ctrl+0x118>)
    61d6:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    61d8:	23ff      	movs	r3, #255	; 0xff
    61da:	736b      	strb	r3, [r5, #13]
	if (func_data->func_ep_out != 0xFF) {
    61dc:	7ba8      	ldrb	r0, [r5, #14]
    61de:	28ff      	cmp	r0, #255	; 0xff
    61e0:	d003      	beq.n	61ea <hid_keyboard_ctrl+0xde>
		usb_d_ep_deinit(func_data->func_ep_out);
    61e2:	4b10      	ldr	r3, [pc, #64]	; (6224 <hid_keyboard_ctrl+0x118>)
    61e4:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    61e6:	23ff      	movs	r3, #255	; 0xff
    61e8:	73ab      	strb	r3, [r5, #14]
	_hiddf_keyboard_funcd.enabled = false;
    61ea:	2500      	movs	r5, #0
    61ec:	4b0c      	ldr	r3, [pc, #48]	; (6220 <hid_keyboard_ctrl+0x114>)
    61ee:	741d      	strb	r5, [r3, #16]
    61f0:	e798      	b.n	6124 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    61f2:	f06f 0509 	mvn.w	r5, #9
    61f6:	e795      	b.n	6124 <hid_keyboard_ctrl+0x18>
		return ERR_NOT_FOUND;
    61f8:	f06f 0509 	mvn.w	r5, #9
    61fc:	e792      	b.n	6124 <hid_keyboard_ctrl+0x18>
			return ERR_ALREADY_INITIALIZED;
    61fe:	f06f 0511 	mvn.w	r5, #17
    6202:	e78f      	b.n	6124 <hid_keyboard_ctrl+0x18>
			return ERR_NO_RESOURCE;
    6204:	f06f 051b 	mvn.w	r5, #27
    6208:	e78c      	b.n	6124 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    620a:	f06f 0509 	mvn.w	r5, #9
    620e:	e789      	b.n	6124 <hid_keyboard_ctrl+0x18>
				return ERR_NOT_INITIALIZED;
    6210:	f06f 0513 	mvn.w	r5, #19
    6214:	e786      	b.n	6124 <hid_keyboard_ctrl+0x18>
			return ERR_NOT_FOUND;
    6216:	f06f 0509 	mvn.w	r5, #9
    621a:	e783      	b.n	6124 <hid_keyboard_ctrl+0x18>
    621c:	00006b05 	.word	0x00006b05
    6220:	2000088c 	.word	0x2000088c
    6224:	00002461 	.word	0x00002461
    6228:	00006b3f 	.word	0x00006b3f
    622c:	000023f9 	.word	0x000023f9
    6230:	0000248d 	.word	0x0000248d

00006234 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    6234:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    6236:	4b0a      	ldr	r3, [pc, #40]	; (6260 <hiddf_keyboard_init+0x2c>)
    6238:	4798      	blx	r3
    623a:	2801      	cmp	r0, #1
    623c:	d80c      	bhi.n	6258 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    623e:	4809      	ldr	r0, [pc, #36]	; (6264 <hiddf_keyboard_init+0x30>)
    6240:	4b09      	ldr	r3, [pc, #36]	; (6268 <hiddf_keyboard_init+0x34>)
    6242:	6183      	str	r3, [r0, #24]
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    6244:	61c0      	str	r0, [r0, #28]

	usbdc_register_function(&_hiddf_keyboard);
    6246:	3014      	adds	r0, #20
    6248:	4b08      	ldr	r3, [pc, #32]	; (626c <hiddf_keyboard_init+0x38>)
    624a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    624c:	4908      	ldr	r1, [pc, #32]	; (6270 <hiddf_keyboard_init+0x3c>)
    624e:	2001      	movs	r0, #1
    6250:	4b08      	ldr	r3, [pc, #32]	; (6274 <hiddf_keyboard_init+0x40>)
    6252:	4798      	blx	r3
	return ERR_NONE;
    6254:	2000      	movs	r0, #0
    6256:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    6258:	f06f 0010 	mvn.w	r0, #16
}
    625c:	bd08      	pop	{r3, pc}
    625e:	bf00      	nop
    6260:	00006af1 	.word	0x00006af1
    6264:	2000088c 	.word	0x2000088c
    6268:	0000610d 	.word	0x0000610d
    626c:	00006ad1 	.word	0x00006ad1
    6270:	20000048 	.word	0x20000048
    6274:	00006a3d 	.word	0x00006a3d

00006278 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    6278:	b510      	push	{r4, lr}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    627a:	780b      	ldrb	r3, [r1, #0]
    627c:	2b81      	cmp	r3, #129	; 0x81
    627e:	d010      	beq.n	62a2 <hid_mouse_req+0x2a>
		return hid_mouse_get_desc(ep, req);
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    6280:	f3c3 1341 	ubfx	r3, r3, #5, #2
    6284:	2b01      	cmp	r3, #1
    6286:	d13f      	bne.n	6308 <hid_mouse_req+0x90>
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    6288:	888a      	ldrh	r2, [r1, #4]
    628a:	4b22      	ldr	r3, [pc, #136]	; (6314 <hid_mouse_req+0x9c>)
    628c:	7a1b      	ldrb	r3, [r3, #8]
    628e:	429a      	cmp	r2, r3
    6290:	d13d      	bne.n	630e <hid_mouse_req+0x96>
			switch (req->bRequest) {
    6292:	784b      	ldrb	r3, [r1, #1]
    6294:	2b03      	cmp	r3, #3
    6296:	d028      	beq.n	62ea <hid_mouse_req+0x72>
    6298:	2b0b      	cmp	r3, #11
    629a:	d02c      	beq.n	62f6 <hid_mouse_req+0x7e>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
			case 0x0B: /* Set Protocol */
				_hiddf_mouse_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
			default:
				return ERR_INVALID_ARG;
    629c:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    62a0:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    62a2:	784b      	ldrb	r3, [r1, #1]
    62a4:	2b06      	cmp	r3, #6
    62a6:	d002      	beq.n	62ae <hid_mouse_req+0x36>
			return ERR_NOT_FOUND;
    62a8:	f06f 0009 	mvn.w	r0, #9
    62ac:	bd10      	pop	{r4, pc}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    62ae:	888a      	ldrh	r2, [r1, #4]
    62b0:	4b18      	ldr	r3, [pc, #96]	; (6314 <hid_mouse_req+0x9c>)
    62b2:	7a1b      	ldrb	r3, [r3, #8]
    62b4:	429a      	cmp	r2, r3
    62b6:	d002      	beq.n	62be <hid_mouse_req+0x46>
			return ERR_NOT_FOUND;
    62b8:	f06f 0009 	mvn.w	r0, #9
    62bc:	bd10      	pop	{r4, pc}
	switch (req->wValue >> 8) {
    62be:	884b      	ldrh	r3, [r1, #2]
    62c0:	0a1b      	lsrs	r3, r3, #8
    62c2:	2b21      	cmp	r3, #33	; 0x21
    62c4:	d004      	beq.n	62d0 <hid_mouse_req+0x58>
    62c6:	2b22      	cmp	r3, #34	; 0x22
    62c8:	d009      	beq.n	62de <hid_mouse_req+0x66>
		return ERR_INVALID_ARG;
    62ca:	f06f 000c 	mvn.w	r0, #12
    62ce:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    62d0:	4b10      	ldr	r3, [pc, #64]	; (6314 <hid_mouse_req+0x9c>)
    62d2:	6819      	ldr	r1, [r3, #0]
    62d4:	2300      	movs	r3, #0
    62d6:	780a      	ldrb	r2, [r1, #0]
    62d8:	4c0f      	ldr	r4, [pc, #60]	; (6318 <hid_mouse_req+0xa0>)
    62da:	47a0      	blx	r4
    62dc:	bd10      	pop	{r4, pc}
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    62de:	2300      	movs	r3, #0
    62e0:	2234      	movs	r2, #52	; 0x34
    62e2:	490e      	ldr	r1, [pc, #56]	; (631c <hid_mouse_req+0xa4>)
    62e4:	4c0c      	ldr	r4, [pc, #48]	; (6318 <hid_mouse_req+0xa0>)
    62e6:	47a0      	blx	r4
    62e8:	bd10      	pop	{r4, pc}
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    62ea:	2300      	movs	r3, #0
    62ec:	2201      	movs	r2, #1
    62ee:	490c      	ldr	r1, [pc, #48]	; (6320 <hid_mouse_req+0xa8>)
    62f0:	4c09      	ldr	r4, [pc, #36]	; (6318 <hid_mouse_req+0xa0>)
    62f2:	47a0      	blx	r4
    62f4:	bd10      	pop	{r4, pc}
				_hiddf_mouse_funcd.protocol = req->wValue;
    62f6:	884a      	ldrh	r2, [r1, #2]
    62f8:	4b06      	ldr	r3, [pc, #24]	; (6314 <hid_mouse_req+0x9c>)
    62fa:	729a      	strb	r2, [r3, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    62fc:	2300      	movs	r3, #0
    62fe:	461a      	mov	r2, r3
    6300:	4619      	mov	r1, r3
    6302:	4c05      	ldr	r4, [pc, #20]	; (6318 <hid_mouse_req+0xa0>)
    6304:	47a0      	blx	r4
    6306:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    6308:	f06f 0009 	mvn.w	r0, #9
    630c:	bd10      	pop	{r4, pc}
			return ERR_NOT_FOUND;
    630e:	f06f 0009 	mvn.w	r0, #9
    6312:	bd10      	pop	{r4, pc}
    6314:	200008ac 	.word	0x200008ac
    6318:	00006601 	.word	0x00006601
    631c:	00008b78 	.word	0x00008b78
    6320:	200008b6 	.word	0x200008b6

00006324 <hid_mouse_ctrl>:
{
    6324:	b570      	push	{r4, r5, r6, lr}
    6326:	4614      	mov	r4, r2
	switch (ctrl) {
    6328:	2901      	cmp	r1, #1
    632a:	d040      	beq.n	63ae <hid_mouse_ctrl+0x8a>
    632c:	b139      	cbz	r1, 633e <hid_mouse_ctrl+0x1a>
		return ERR_INVALID_ARG;
    632e:	2902      	cmp	r1, #2
    6330:	bf0c      	ite	eq
    6332:	f06f 041a 	mvneq.w	r4, #26
    6336:	f06f 040c 	mvnne.w	r4, #12
}
    633a:	4620      	mov	r0, r4
    633c:	bd70      	pop	{r4, r5, r6, pc}
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    633e:	6885      	ldr	r5, [r0, #8]
	ifc = desc->sod;
    6340:	6813      	ldr	r3, [r2, #0]
	if (NULL == ifc) {
    6342:	2b00      	cmp	r3, #0
    6344:	d049      	beq.n	63da <hid_mouse_ctrl+0xb6>
	ifc_desc.bInterfaceNumber = ifc[2];
    6346:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    6348:	795b      	ldrb	r3, [r3, #5]
    634a:	2b03      	cmp	r3, #3
    634c:	d148      	bne.n	63e0 <hid_mouse_ctrl+0xbc>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    634e:	7a2b      	ldrb	r3, [r5, #8]
    6350:	429a      	cmp	r2, r3
    6352:	d048      	beq.n	63e6 <hid_mouse_ctrl+0xc2>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    6354:	2bff      	cmp	r3, #255	; 0xff
    6356:	d149      	bne.n	63ec <hid_mouse_ctrl+0xc8>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    6358:	722a      	strb	r2, [r5, #8]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    635a:	6823      	ldr	r3, [r4, #0]
	return (desc + usb_desc_len(desc));
    635c:	7818      	ldrb	r0, [r3, #0]
    635e:	2221      	movs	r2, #33	; 0x21
    6360:	6861      	ldr	r1, [r4, #4]
    6362:	4418      	add	r0, r3
    6364:	4b29      	ldr	r3, [pc, #164]	; (640c <hid_mouse_ctrl+0xe8>)
    6366:	4798      	blx	r3
    6368:	4b29      	ldr	r3, [pc, #164]	; (6410 <hid_mouse_ctrl+0xec>)
    636a:	6018      	str	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    636c:	6823      	ldr	r3, [r4, #0]
    636e:	7818      	ldrb	r0, [r3, #0]
    6370:	6861      	ldr	r1, [r4, #4]
    6372:	4418      	add	r0, r3
    6374:	4b27      	ldr	r3, [pc, #156]	; (6414 <hid_mouse_ctrl+0xf0>)
    6376:	4798      	blx	r3
	desc->sod = ep;
    6378:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    637a:	2800      	cmp	r0, #0
    637c:	d039      	beq.n	63f2 <hid_mouse_ctrl+0xce>
		ep_desc.bEndpointAddress = ep[2];
    637e:	7886      	ldrb	r6, [r0, #2]
	return (ptr[0] + (ptr[1] << 8));
    6380:	7943      	ldrb	r3, [r0, #5]
    6382:	7902      	ldrb	r2, [r0, #4]
    6384:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    6388:	b292      	uxth	r2, r2
    638a:	78c1      	ldrb	r1, [r0, #3]
    638c:	4630      	mov	r0, r6
    638e:	4b22      	ldr	r3, [pc, #136]	; (6418 <hid_mouse_ctrl+0xf4>)
    6390:	4798      	blx	r3
    6392:	4604      	mov	r4, r0
    6394:	bb80      	cbnz	r0, 63f8 <hid_mouse_ctrl+0xd4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    6396:	f016 0f80 	tst.w	r6, #128	; 0x80
    639a:	d030      	beq.n	63fe <hid_mouse_ctrl+0xda>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    639c:	726e      	strb	r6, [r5, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    639e:	4630      	mov	r0, r6
    63a0:	4b1e      	ldr	r3, [pc, #120]	; (641c <hid_mouse_ctrl+0xf8>)
    63a2:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    63a4:	4b1a      	ldr	r3, [pc, #104]	; (6410 <hid_mouse_ctrl+0xec>)
    63a6:	2201      	movs	r2, #1
    63a8:	729a      	strb	r2, [r3, #10]
	_hiddf_mouse_funcd.enabled  = true;
    63aa:	72da      	strb	r2, [r3, #11]
    63ac:	e7c5      	b.n	633a <hid_mouse_ctrl+0x16>
	struct hiddf_mouse_func_data *func_data = (struct hiddf_mouse_func_data *)(drv->func_data);
    63ae:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    63b0:	b11a      	cbz	r2, 63ba <hid_mouse_ctrl+0x96>
		ifc_desc.bInterfaceClass = desc->sod[5];
    63b2:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    63b4:	795b      	ldrb	r3, [r3, #5]
    63b6:	2b03      	cmp	r3, #3
    63b8:	d124      	bne.n	6404 <hid_mouse_ctrl+0xe0>
	if (func_data->func_iface != 0xFF) {
    63ba:	7a2b      	ldrb	r3, [r5, #8]
    63bc:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    63be:	bf1c      	itt	ne
    63c0:	23ff      	movne	r3, #255	; 0xff
    63c2:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    63c4:	7a68      	ldrb	r0, [r5, #9]
    63c6:	28ff      	cmp	r0, #255	; 0xff
    63c8:	d003      	beq.n	63d2 <hid_mouse_ctrl+0xae>
		usb_d_ep_deinit(func_data->func_ep_in);
    63ca:	4b15      	ldr	r3, [pc, #84]	; (6420 <hid_mouse_ctrl+0xfc>)
    63cc:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    63ce:	23ff      	movs	r3, #255	; 0xff
    63d0:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    63d2:	2400      	movs	r4, #0
    63d4:	4b0e      	ldr	r3, [pc, #56]	; (6410 <hid_mouse_ctrl+0xec>)
    63d6:	72dc      	strb	r4, [r3, #11]
    63d8:	e7af      	b.n	633a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    63da:	f06f 0409 	mvn.w	r4, #9
    63de:	e7ac      	b.n	633a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    63e0:	f06f 0409 	mvn.w	r4, #9
    63e4:	e7a9      	b.n	633a <hid_mouse_ctrl+0x16>
			return ERR_ALREADY_INITIALIZED;
    63e6:	f06f 0411 	mvn.w	r4, #17
    63ea:	e7a6      	b.n	633a <hid_mouse_ctrl+0x16>
			return ERR_NO_RESOURCE;
    63ec:	f06f 041b 	mvn.w	r4, #27
    63f0:	e7a3      	b.n	633a <hid_mouse_ctrl+0x16>
		return ERR_NOT_FOUND;
    63f2:	f06f 0409 	mvn.w	r4, #9
    63f6:	e7a0      	b.n	633a <hid_mouse_ctrl+0x16>
			return ERR_NOT_INITIALIZED;
    63f8:	f06f 0413 	mvn.w	r4, #19
    63fc:	e79d      	b.n	633a <hid_mouse_ctrl+0x16>
			return ERR_INVALID_DATA;
    63fe:	f04f 34ff 	mov.w	r4, #4294967295
    6402:	e79a      	b.n	633a <hid_mouse_ctrl+0x16>
			return ERR_NOT_FOUND;
    6404:	f06f 0409 	mvn.w	r4, #9
    6408:	e797      	b.n	633a <hid_mouse_ctrl+0x16>
    640a:	bf00      	nop
    640c:	00006b05 	.word	0x00006b05
    6410:	200008ac 	.word	0x200008ac
    6414:	00006b3f 	.word	0x00006b3f
    6418:	000023f9 	.word	0x000023f9
    641c:	0000248d 	.word	0x0000248d
    6420:	00002461 	.word	0x00002461

00006424 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    6424:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    6426:	4b0a      	ldr	r3, [pc, #40]	; (6450 <hiddf_mouse_init+0x2c>)
    6428:	4798      	blx	r3
    642a:	2801      	cmp	r0, #1
    642c:	d80c      	bhi.n	6448 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    642e:	4809      	ldr	r0, [pc, #36]	; (6454 <hiddf_mouse_init+0x30>)
    6430:	4b09      	ldr	r3, [pc, #36]	; (6458 <hiddf_mouse_init+0x34>)
    6432:	6103      	str	r3, [r0, #16]
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    6434:	6140      	str	r0, [r0, #20]

	usbdc_register_function(&_hiddf_mouse);
    6436:	300c      	adds	r0, #12
    6438:	4b08      	ldr	r3, [pc, #32]	; (645c <hiddf_mouse_init+0x38>)
    643a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    643c:	4908      	ldr	r1, [pc, #32]	; (6460 <hiddf_mouse_init+0x3c>)
    643e:	2001      	movs	r0, #1
    6440:	4b08      	ldr	r3, [pc, #32]	; (6464 <hiddf_mouse_init+0x40>)
    6442:	4798      	blx	r3
	return ERR_NONE;
    6444:	2000      	movs	r0, #0
    6446:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    6448:	f06f 0010 	mvn.w	r0, #16
}
    644c:	bd08      	pop	{r3, pc}
    644e:	bf00      	nop
    6450:	00006af1 	.word	0x00006af1
    6454:	200008ac 	.word	0x200008ac
    6458:	00006325 	.word	0x00006325
    645c:	00006ad1 	.word	0x00006ad1
    6460:	20000050 	.word	0x20000050
    6464:	00006a3d 	.word	0x00006a3d

00006468 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    6468:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    646a:	4b07      	ldr	r3, [pc, #28]	; (6488 <usbdc_unconfig+0x20>)
    646c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    646e:	b14c      	cbz	r4, 6484 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    6470:	2600      	movs	r6, #0
    6472:	2501      	movs	r5, #1
    6474:	6863      	ldr	r3, [r4, #4]
    6476:	4632      	mov	r2, r6
    6478:	4629      	mov	r1, r5
    647a:	4620      	mov	r0, r4
    647c:	4798      	blx	r3
		func = func->next;
    647e:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    6480:	2c00      	cmp	r4, #0
    6482:	d1f7      	bne.n	6474 <usbdc_unconfig+0xc>
    6484:	bd70      	pop	{r4, r5, r6, pc}
    6486:	bf00      	nop
    6488:	200008c4 	.word	0x200008c4

0000648c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    648c:	b570      	push	{r4, r5, r6, lr}
    648e:	4606      	mov	r6, r0
    6490:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    6492:	4b07      	ldr	r3, [pc, #28]	; (64b0 <usbdc_change_notify+0x24>)
    6494:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    6496:	b91c      	cbnz	r4, 64a0 <usbdc_change_notify+0x14>
    6498:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    649a:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    649c:	2c00      	cmp	r4, #0
    649e:	d0fb      	beq.n	6498 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    64a0:	6863      	ldr	r3, [r4, #4]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d0f9      	beq.n	649a <usbdc_change_notify+0xe>
			cg->cb(change, value);
    64a6:	4629      	mov	r1, r5
    64a8:	4630      	mov	r0, r6
    64aa:	4798      	blx	r3
    64ac:	e7f5      	b.n	649a <usbdc_change_notify+0xe>
    64ae:	bf00      	nop
    64b0:	200008c4 	.word	0x200008c4

000064b4 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    64b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64b6:	4607      	mov	r7, r0
    64b8:	460e      	mov	r6, r1
    64ba:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    64bc:	4b0c      	ldr	r3, [pc, #48]	; (64f0 <usbdc_request_handler+0x3c>)
    64be:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    64c0:	b91c      	cbnz	r4, 64ca <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    64c2:	2000      	movs	r0, #0
    64c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    64c6:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    64c8:	b16c      	cbz	r4, 64e6 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    64ca:	6863      	ldr	r3, [r4, #4]
    64cc:	2b00      	cmp	r3, #0
    64ce:	d0fa      	beq.n	64c6 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    64d0:	462a      	mov	r2, r5
    64d2:	4631      	mov	r1, r6
    64d4:	4638      	mov	r0, r7
    64d6:	4798      	blx	r3
			if (0 == rc) {
    64d8:	b138      	cbz	r0, 64ea <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    64da:	f110 0f0a 	cmn.w	r0, #10
    64de:	d0f2      	beq.n	64c6 <usbdc_request_handler+0x12>
				return -1;
    64e0:	f04f 30ff 	mov.w	r0, #4294967295
}
    64e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    64e6:	2000      	movs	r0, #0
    64e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    64ea:	2001      	movs	r0, #1
    64ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64ee:	bf00      	nop
    64f0:	200008c4 	.word	0x200008c4

000064f4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    64f4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    64f6:	4b06      	ldr	r3, [pc, #24]	; (6510 <usbd_sof_cb+0x1c>)
    64f8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    64fa:	b91c      	cbnz	r4, 6504 <usbd_sof_cb+0x10>
    64fc:	bd10      	pop	{r4, pc}
		sof = sof->next;
    64fe:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    6500:	2c00      	cmp	r4, #0
    6502:	d0fb      	beq.n	64fc <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    6504:	6863      	ldr	r3, [r4, #4]
    6506:	2b00      	cmp	r3, #0
    6508:	d0f9      	beq.n	64fe <usbd_sof_cb+0xa>
			sof->cb();
    650a:	4798      	blx	r3
    650c:	e7f7      	b.n	64fe <usbd_sof_cb+0xa>
    650e:	bf00      	nop
    6510:	200008c4 	.word	0x200008c4

00006514 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    6514:	b510      	push	{r4, lr}
    6516:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    6518:	b119      	cbz	r1, 6522 <usbdc_cb_ctl_done+0xe>
    651a:	2901      	cmp	r1, #1
    651c:	d026      	beq.n	656c <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    651e:	2000      	movs	r0, #0
    6520:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    6522:	7813      	ldrb	r3, [r2, #0]
    6524:	2b00      	cmp	r3, #0
    6526:	d1fa      	bne.n	651e <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    6528:	7853      	ldrb	r3, [r2, #1]
    652a:	2b05      	cmp	r3, #5
    652c:	d00f      	beq.n	654e <usbdc_cb_ctl_done+0x3a>
    652e:	2b09      	cmp	r3, #9
    6530:	d1f5      	bne.n	651e <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    6532:	8852      	ldrh	r2, [r2, #2]
    6534:	4b10      	ldr	r3, [pc, #64]	; (6578 <usbdc_cb_ctl_done+0x64>)
    6536:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    6538:	8863      	ldrh	r3, [r4, #2]
    653a:	2b00      	cmp	r3, #0
    653c:	bf14      	ite	ne
    653e:	2104      	movne	r1, #4
    6540:	2103      	moveq	r1, #3
    6542:	4b0d      	ldr	r3, [pc, #52]	; (6578 <usbdc_cb_ctl_done+0x64>)
    6544:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    6546:	2001      	movs	r0, #1
    6548:	4b0c      	ldr	r3, [pc, #48]	; (657c <usbdc_cb_ctl_done+0x68>)
    654a:	4798      	blx	r3
    654c:	e7e7      	b.n	651e <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    654e:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    6550:	b2c0      	uxtb	r0, r0
    6552:	4b0b      	ldr	r3, [pc, #44]	; (6580 <usbdc_cb_ctl_done+0x6c>)
    6554:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    6556:	8863      	ldrh	r3, [r4, #2]
    6558:	2b00      	cmp	r3, #0
    655a:	bf14      	ite	ne
    655c:	2103      	movne	r1, #3
    655e:	2102      	moveq	r1, #2
    6560:	4b05      	ldr	r3, [pc, #20]	; (6578 <usbdc_cb_ctl_done+0x64>)
    6562:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    6564:	2001      	movs	r0, #1
    6566:	4b05      	ldr	r3, [pc, #20]	; (657c <usbdc_cb_ctl_done+0x68>)
    6568:	4798      	blx	r3
    656a:	e7d8      	b.n	651e <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    656c:	2201      	movs	r2, #1
    656e:	4621      	mov	r1, r4
    6570:	2000      	movs	r0, #0
    6572:	4b04      	ldr	r3, [pc, #16]	; (6584 <usbdc_cb_ctl_done+0x70>)
    6574:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    6576:	e7d2      	b.n	651e <usbdc_cb_ctl_done+0xa>
    6578:	200008c4 	.word	0x200008c4
    657c:	0000648d 	.word	0x0000648d
    6580:	000023ed 	.word	0x000023ed
    6584:	000064b5 	.word	0x000064b5

00006588 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    6588:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    658a:	4b0d      	ldr	r3, [pc, #52]	; (65c0 <usbdc_reset+0x38>)
    658c:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    658e:	4d0d      	ldr	r5, [pc, #52]	; (65c4 <usbdc_reset+0x3c>)
    6590:	2602      	movs	r6, #2
    6592:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    6594:	2400      	movs	r4, #0
    6596:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    6598:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    659a:	4620      	mov	r0, r4
    659c:	4b0a      	ldr	r3, [pc, #40]	; (65c8 <usbdc_reset+0x40>)
    659e:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    65a0:	7f28      	ldrb	r0, [r5, #28]
    65a2:	4b0a      	ldr	r3, [pc, #40]	; (65cc <usbdc_reset+0x44>)
    65a4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    65a6:	4a0a      	ldr	r2, [pc, #40]	; (65d0 <usbdc_reset+0x48>)
    65a8:	4621      	mov	r1, r4
    65aa:	4620      	mov	r0, r4
    65ac:	4d09      	ldr	r5, [pc, #36]	; (65d4 <usbdc_reset+0x4c>)
    65ae:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    65b0:	4a09      	ldr	r2, [pc, #36]	; (65d8 <usbdc_reset+0x50>)
    65b2:	4631      	mov	r1, r6
    65b4:	4620      	mov	r0, r4
    65b6:	47a8      	blx	r5
	usb_d_ep_enable(0);
    65b8:	4620      	mov	r0, r4
    65ba:	4b08      	ldr	r3, [pc, #32]	; (65dc <usbdc_reset+0x54>)
    65bc:	4798      	blx	r3
    65be:	bd70      	pop	{r4, r5, r6, pc}
    65c0:	00006469 	.word	0x00006469
    65c4:	200008c4 	.word	0x200008c4
    65c8:	00002461 	.word	0x00002461
    65cc:	0000244d 	.word	0x0000244d
    65d0:	00006621 	.word	0x00006621
    65d4:	00002661 	.word	0x00002661
    65d8:	00006515 	.word	0x00006515
    65dc:	0000248d 	.word	0x0000248d

000065e0 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    65e0:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    65e2:	b110      	cbz	r0, 65ea <usbd_event_cb+0xa>
    65e4:	2801      	cmp	r0, #1
    65e6:	d004      	beq.n	65f2 <usbd_event_cb+0x12>
    65e8:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    65ea:	2000      	movs	r0, #0
    65ec:	4b02      	ldr	r3, [pc, #8]	; (65f8 <usbd_event_cb+0x18>)
    65ee:	4798      	blx	r3
		break;
    65f0:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    65f2:	4b02      	ldr	r3, [pc, #8]	; (65fc <usbd_event_cb+0x1c>)
    65f4:	4798      	blx	r3
    65f6:	bd08      	pop	{r3, pc}
    65f8:	0000648d 	.word	0x0000648d
    65fc:	00006589 	.word	0x00006589

00006600 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    6600:	b500      	push	{lr}
    6602:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    6604:	9101      	str	r1, [sp, #4]
    6606:	9202      	str	r2, [sp, #8]
    6608:	f88d 000c 	strb.w	r0, [sp, #12]
    660c:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    6610:	a801      	add	r0, sp, #4
    6612:	4b02      	ldr	r3, [pc, #8]	; (661c <usbdc_xfer+0x1c>)
    6614:	4798      	blx	r3
}
    6616:	b005      	add	sp, #20
    6618:	f85d fb04 	ldr.w	pc, [sp], #4
    661c:	000024d9 	.word	0x000024d9

00006620 <usbdc_cb_ctl_req>:
{
    6620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6624:	b083      	sub	sp, #12
    6626:	4605      	mov	r5, r0
    6628:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    662a:	2200      	movs	r2, #0
    662c:	4b9b      	ldr	r3, [pc, #620]	; (689c <usbdc_cb_ctl_req+0x27c>)
    662e:	4798      	blx	r3
    6630:	f1b0 3fff 	cmp.w	r0, #4294967295
    6634:	d00b      	beq.n	664e <usbdc_cb_ctl_req+0x2e>
    6636:	2801      	cmp	r0, #1
    6638:	f000 81e3 	beq.w	6a02 <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    663c:	7823      	ldrb	r3, [r4, #0]
    663e:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    6642:	d008      	beq.n	6656 <usbdc_cb_ctl_req+0x36>
    6644:	2a80      	cmp	r2, #128	; 0x80
    6646:	f000 80f4 	beq.w	6832 <usbdc_cb_ctl_req+0x212>
		return false;
    664a:	2000      	movs	r0, #0
    664c:	e000      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    664e:	2000      	movs	r0, #0
}
    6650:	b003      	add	sp, #12
    6652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    6656:	7862      	ldrb	r2, [r4, #1]
    6658:	3a01      	subs	r2, #1
    665a:	2a0a      	cmp	r2, #10
    665c:	f200 81d3 	bhi.w	6a06 <usbdc_cb_ctl_req+0x3e6>
    6660:	e8df f012 	tbh	[pc, r2, lsl #1]
    6664:	01d10060 	.word	0x01d10060
    6668:	01d10076 	.word	0x01d10076
    666c:	01d1000b 	.word	0x01d1000b
    6670:	01d101d1 	.word	0x01d101d1
    6674:	01d10015 	.word	0x01d10015
    6678:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    667a:	2301      	movs	r3, #1
    667c:	2200      	movs	r2, #0
    667e:	4611      	mov	r1, r2
    6680:	4628      	mov	r0, r5
    6682:	4c87      	ldr	r4, [pc, #540]	; (68a0 <usbdc_cb_ctl_req+0x280>)
    6684:	47a0      	blx	r4
    6686:	fab0 f080 	clz	r0, r0
    668a:	0940      	lsrs	r0, r0, #5
    668c:	e7e0      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    668e:	8862      	ldrh	r2, [r4, #2]
    6690:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    6692:	b1ca      	cbz	r2, 66c8 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    6694:	4b83      	ldr	r3, [pc, #524]	; (68a4 <usbdc_cb_ctl_req+0x284>)
    6696:	681b      	ldr	r3, [r3, #0]
    6698:	6859      	ldr	r1, [r3, #4]
    669a:	6818      	ldr	r0, [r3, #0]
    669c:	4b82      	ldr	r3, [pc, #520]	; (68a8 <usbdc_cb_ctl_req+0x288>)
    669e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    66a0:	2800      	cmp	r0, #0
    66a2:	f000 81be 	beq.w	6a22 <usbdc_cb_ctl_req+0x402>
    66a6:	78c2      	ldrb	r2, [r0, #3]
    66a8:	7881      	ldrb	r1, [r0, #2]
    66aa:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    66ae:	fa10 f181 	uxtah	r1, r0, r1
    66b2:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    66b4:	2204      	movs	r2, #4
    66b6:	4b7d      	ldr	r3, [pc, #500]	; (68ac <usbdc_cb_ctl_req+0x28c>)
    66b8:	4798      	blx	r3
    66ba:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    66bc:	b130      	cbz	r0, 66cc <usbdc_cb_ctl_req+0xac>
    66be:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    66c0:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 68a4 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    66c4:	4f79      	ldr	r7, [pc, #484]	; (68ac <usbdc_cb_ctl_req+0x28c>)
    66c6:	e018      	b.n	66fa <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    66c8:	4b79      	ldr	r3, [pc, #484]	; (68b0 <usbdc_cb_ctl_req+0x290>)
    66ca:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    66cc:	2301      	movs	r3, #1
    66ce:	2200      	movs	r2, #0
    66d0:	4611      	mov	r1, r2
    66d2:	4628      	mov	r0, r5
    66d4:	4c72      	ldr	r4, [pc, #456]	; (68a0 <usbdc_cb_ctl_req+0x280>)
    66d6:	47a0      	blx	r4
    66d8:	fab0 f080 	clz	r0, r0
    66dc:	0940      	lsrs	r0, r0, #5
    66de:	e7b7      	b.n	6650 <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    66e0:	464c      	mov	r4, r9
    66e2:	e000      	b.n	66e6 <usbdc_cb_ctl_req+0xc6>
    66e4:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    66e6:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    66e8:	7803      	ldrb	r3, [r0, #0]
    66ea:	4418      	add	r0, r3
    66ec:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    66ee:	2204      	movs	r2, #4
    66f0:	9901      	ldr	r1, [sp, #4]
    66f2:	47b8      	blx	r7
    66f4:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    66f6:	2800      	cmp	r0, #0
    66f8:	d0e8      	beq.n	66cc <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    66fa:	f890 9002 	ldrb.w	r9, [r0, #2]
    66fe:	45a1      	cmp	r9, r4
    6700:	d0f1      	beq.n	66e6 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    6702:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    6706:	2c00      	cmp	r4, #0
    6708:	d0ea      	beq.n	66e0 <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    670a:	2600      	movs	r6, #0
    670c:	6863      	ldr	r3, [r4, #4]
    670e:	466a      	mov	r2, sp
    6710:	4631      	mov	r1, r6
    6712:	4620      	mov	r0, r4
    6714:	4798      	blx	r3
    6716:	2800      	cmp	r0, #0
    6718:	d0e4      	beq.n	66e4 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    671a:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    671c:	2c00      	cmp	r4, #0
    671e:	d1f5      	bne.n	670c <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    6720:	464c      	mov	r4, r9
    6722:	e7e0      	b.n	66e6 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    6724:	f003 031f 	and.w	r3, r3, #31
    6728:	2b02      	cmp	r3, #2
    672a:	f040 816e 	bne.w	6a0a <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    672e:	88e3      	ldrh	r3, [r4, #6]
    6730:	b10b      	cbz	r3, 6736 <usbdc_cb_ctl_req+0x116>
			return false;
    6732:	2000      	movs	r0, #0
    6734:	e78c      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    6736:	88a0      	ldrh	r0, [r4, #4]
    6738:	2100      	movs	r1, #0
    673a:	b2c0      	uxtb	r0, r0
    673c:	4b5d      	ldr	r3, [pc, #372]	; (68b4 <usbdc_cb_ctl_req+0x294>)
    673e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    6740:	2301      	movs	r3, #1
    6742:	2200      	movs	r2, #0
    6744:	4611      	mov	r1, r2
    6746:	4628      	mov	r0, r5
    6748:	4c55      	ldr	r4, [pc, #340]	; (68a0 <usbdc_cb_ctl_req+0x280>)
    674a:	47a0      	blx	r4
		return true;
    674c:	2001      	movs	r0, #1
    674e:	e77f      	b.n	6650 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    6750:	f003 031f 	and.w	r3, r3, #31
    6754:	2b02      	cmp	r3, #2
    6756:	f040 815a 	bne.w	6a0e <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    675a:	88e3      	ldrh	r3, [r4, #6]
    675c:	b10b      	cbz	r3, 6762 <usbdc_cb_ctl_req+0x142>
			return false;
    675e:	2000      	movs	r0, #0
    6760:	e776      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    6762:	88a0      	ldrh	r0, [r4, #4]
    6764:	2101      	movs	r1, #1
    6766:	b2c0      	uxtb	r0, r0
    6768:	4b52      	ldr	r3, [pc, #328]	; (68b4 <usbdc_cb_ctl_req+0x294>)
    676a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    676c:	2301      	movs	r3, #1
    676e:	2200      	movs	r2, #0
    6770:	4611      	mov	r1, r2
    6772:	4628      	mov	r0, r5
    6774:	4c4a      	ldr	r4, [pc, #296]	; (68a0 <usbdc_cb_ctl_req+0x280>)
    6776:	47a0      	blx	r4
		return true;
    6778:	2001      	movs	r0, #1
    677a:	e769      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    677c:	8866      	ldrh	r6, [r4, #2]
    677e:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    6780:	4a48      	ldr	r2, [pc, #288]	; (68a4 <usbdc_cb_ctl_req+0x284>)
    6782:	6813      	ldr	r3, [r2, #0]
    6784:	7ed2      	ldrb	r2, [r2, #27]
    6786:	6859      	ldr	r1, [r3, #4]
    6788:	6818      	ldr	r0, [r3, #0]
    678a:	4b47      	ldr	r3, [pc, #284]	; (68a8 <usbdc_cb_ctl_req+0x288>)
    678c:	4798      	blx	r3
	if (NULL == ifc) {
    678e:	2800      	cmp	r0, #0
    6790:	d045      	beq.n	681e <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    6792:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    6794:	78c2      	ldrb	r2, [r0, #3]
    6796:	7881      	ldrb	r1, [r0, #2]
    6798:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    679c:	fa10 f181 	uxtah	r1, r0, r1
    67a0:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    67a2:	2204      	movs	r2, #4
    67a4:	4b41      	ldr	r3, [pc, #260]	; (68ac <usbdc_cb_ctl_req+0x28c>)
    67a6:	4798      	blx	r3
    67a8:	4603      	mov	r3, r0
    67aa:	2800      	cmp	r0, #0
    67ac:	d039      	beq.n	6822 <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    67ae:	2704      	movs	r7, #4
    67b0:	4d3e      	ldr	r5, [pc, #248]	; (68ac <usbdc_cb_ctl_req+0x28c>)
    67b2:	e008      	b.n	67c6 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    67b4:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    67b6:	7803      	ldrb	r3, [r0, #0]
    67b8:	4418      	add	r0, r3
    67ba:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    67bc:	463a      	mov	r2, r7
    67be:	9901      	ldr	r1, [sp, #4]
    67c0:	47a8      	blx	r5
		if (NULL == ifc) {
    67c2:	4603      	mov	r3, r0
    67c4:	b378      	cbz	r0, 6826 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    67c6:	789a      	ldrb	r2, [r3, #2]
    67c8:	42a2      	cmp	r2, r4
    67ca:	d1f3      	bne.n	67b4 <usbdc_cb_ctl_req+0x194>
    67cc:	78da      	ldrb	r2, [r3, #3]
    67ce:	42b2      	cmp	r2, r6
    67d0:	d1f0      	bne.n	67b4 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    67d2:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    67d4:	4b33      	ldr	r3, [pc, #204]	; (68a4 <usbdc_cb_ctl_req+0x284>)
    67d6:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    67d8:	b33d      	cbz	r5, 682a <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    67da:	2701      	movs	r7, #1
    67dc:	686b      	ldr	r3, [r5, #4]
    67de:	466a      	mov	r2, sp
    67e0:	4639      	mov	r1, r7
    67e2:	4628      	mov	r0, r5
    67e4:	4798      	blx	r3
    67e6:	b120      	cbz	r0, 67f2 <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    67e8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    67ea:	2d00      	cmp	r5, #0
    67ec:	d1f6      	bne.n	67dc <usbdc_cb_ctl_req+0x1bc>
	return false;
    67ee:	2000      	movs	r0, #0
    67f0:	e72e      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    67f2:	686b      	ldr	r3, [r5, #4]
    67f4:	466a      	mov	r2, sp
    67f6:	2100      	movs	r1, #0
    67f8:	4628      	mov	r0, r5
    67fa:	4798      	blx	r3
    67fc:	b9b8      	cbnz	r0, 682e <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    67fe:	b136      	cbz	r6, 680e <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    6800:	4a28      	ldr	r2, [pc, #160]	; (68a4 <usbdc_cb_ctl_req+0x284>)
    6802:	2301      	movs	r3, #1
    6804:	fa03 f404 	lsl.w	r4, r3, r4
    6808:	7f53      	ldrb	r3, [r2, #29]
    680a:	4323      	orrs	r3, r4
    680c:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    680e:	2300      	movs	r3, #0
    6810:	461a      	mov	r2, r3
    6812:	4619      	mov	r1, r3
    6814:	4618      	mov	r0, r3
    6816:	4c22      	ldr	r4, [pc, #136]	; (68a0 <usbdc_cb_ctl_req+0x280>)
    6818:	47a0      	blx	r4
			return true;
    681a:	2001      	movs	r0, #1
    681c:	e718      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    681e:	2000      	movs	r0, #0
    6820:	e716      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    6822:	2000      	movs	r0, #0
    6824:	e714      	b.n	6650 <usbdc_cb_ctl_req+0x30>
			return false;
    6826:	2000      	movs	r0, #0
    6828:	e712      	b.n	6650 <usbdc_cb_ctl_req+0x30>
	return false;
    682a:	2000      	movs	r0, #0
    682c:	e710      	b.n	6650 <usbdc_cb_ctl_req+0x30>
			return false;
    682e:	2000      	movs	r0, #0
    6830:	e70e      	b.n	6650 <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    6832:	7862      	ldrb	r2, [r4, #1]
    6834:	2a0a      	cmp	r2, #10
    6836:	f200 80ec 	bhi.w	6a12 <usbdc_cb_ctl_req+0x3f2>
    683a:	e8df f012 	tbh	[pc, r2, lsl #1]
    683e:	008e      	.short	0x008e
    6840:	00ea00ea 	.word	0x00ea00ea
    6844:	00ea00ea 	.word	0x00ea00ea
    6848:	000b00ea 	.word	0x000b00ea
    684c:	008200ea 	.word	0x008200ea
    6850:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    6854:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    6856:	0a13      	lsrs	r3, r2, #8
    6858:	2b02      	cmp	r3, #2
    685a:	d02d      	beq.n	68b8 <usbdc_cb_ctl_req+0x298>
    685c:	2b03      	cmp	r3, #3
    685e:	d050      	beq.n	6902 <usbdc_cb_ctl_req+0x2e2>
    6860:	2b01      	cmp	r3, #1
    6862:	d001      	beq.n	6868 <usbdc_cb_ctl_req+0x248>
	return false;
    6864:	2000      	movs	r0, #0
    6866:	e6f3      	b.n	6650 <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    6868:	88e2      	ldrh	r2, [r4, #6]
    686a:	2a12      	cmp	r2, #18
    686c:	bf28      	it	cs
    686e:	2212      	movcs	r2, #18
    6870:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    6872:	4b0c      	ldr	r3, [pc, #48]	; (68a4 <usbdc_cb_ctl_req+0x284>)
    6874:	681b      	ldr	r3, [r3, #0]
    6876:	2201      	movs	r2, #1
    6878:	6859      	ldr	r1, [r3, #4]
    687a:	6818      	ldr	r0, [r3, #0]
    687c:	4b0b      	ldr	r3, [pc, #44]	; (68ac <usbdc_cb_ctl_req+0x28c>)
    687e:	4798      	blx	r3
	if (!dev_desc) {
    6880:	4601      	mov	r1, r0
    6882:	2800      	cmp	r0, #0
    6884:	f000 80c7 	beq.w	6a16 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    6888:	2300      	movs	r3, #0
    688a:	4622      	mov	r2, r4
    688c:	4628      	mov	r0, r5
    688e:	4c04      	ldr	r4, [pc, #16]	; (68a0 <usbdc_cb_ctl_req+0x280>)
    6890:	47a0      	blx	r4
    6892:	fab0 f080 	clz	r0, r0
    6896:	0940      	lsrs	r0, r0, #5
    6898:	e6da      	b.n	6650 <usbdc_cb_ctl_req+0x30>
    689a:	bf00      	nop
    689c:	000064b5 	.word	0x000064b5
    68a0:	00006601 	.word	0x00006601
    68a4:	200008c4 	.word	0x200008c4
    68a8:	00006b85 	.word	0x00006b85
    68ac:	00006b05 	.word	0x00006b05
    68b0:	00006469 	.word	0x00006469
    68b4:	000025f9 	.word	0x000025f9
	uint16_t length   = req->wLength;
    68b8:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    68ba:	4b5b      	ldr	r3, [pc, #364]	; (6a28 <usbdc_cb_ctl_req+0x408>)
    68bc:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    68be:	681b      	ldr	r3, [r3, #0]
    68c0:	3201      	adds	r2, #1
    68c2:	b2d2      	uxtb	r2, r2
    68c4:	6859      	ldr	r1, [r3, #4]
    68c6:	6818      	ldr	r0, [r3, #0]
    68c8:	4b58      	ldr	r3, [pc, #352]	; (6a2c <usbdc_cb_ctl_req+0x40c>)
    68ca:	4798      	blx	r3
	if (NULL == cfg_desc) {
    68cc:	4601      	mov	r1, r0
    68ce:	2800      	cmp	r0, #0
    68d0:	f000 80a3 	beq.w	6a1a <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    68d4:	78c3      	ldrb	r3, [r0, #3]
    68d6:	7882      	ldrb	r2, [r0, #2]
    68d8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    68dc:	b292      	uxth	r2, r2
	if (length <= total_len) {
    68de:	4294      	cmp	r4, r2
    68e0:	d90d      	bls.n	68fe <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    68e2:	3e01      	subs	r6, #1
    68e4:	4226      	tst	r6, r4
    68e6:	bf0c      	ite	eq
    68e8:	2301      	moveq	r3, #1
    68ea:	2300      	movne	r3, #0
		length = total_len;
    68ec:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    68ee:	4622      	mov	r2, r4
    68f0:	4628      	mov	r0, r5
    68f2:	4c4f      	ldr	r4, [pc, #316]	; (6a30 <usbdc_cb_ctl_req+0x410>)
    68f4:	47a0      	blx	r4
    68f6:	fab0 f080 	clz	r0, r0
    68fa:	0940      	lsrs	r0, r0, #5
    68fc:	e6a8      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    68fe:	2300      	movs	r3, #0
    6900:	e7f5      	b.n	68ee <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    6902:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    6904:	4b48      	ldr	r3, [pc, #288]	; (6a28 <usbdc_cb_ctl_req+0x408>)
    6906:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    6908:	681b      	ldr	r3, [r3, #0]
    690a:	b2d2      	uxtb	r2, r2
    690c:	6859      	ldr	r1, [r3, #4]
    690e:	6818      	ldr	r0, [r3, #0]
    6910:	4b48      	ldr	r3, [pc, #288]	; (6a34 <usbdc_cb_ctl_req+0x414>)
    6912:	4798      	blx	r3
	if (NULL == str_desc) {
    6914:	4601      	mov	r1, r0
    6916:	2800      	cmp	r0, #0
    6918:	f000 8081 	beq.w	6a1e <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    691c:	7802      	ldrb	r2, [r0, #0]
    691e:	4294      	cmp	r4, r2
    6920:	d90d      	bls.n	693e <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    6922:	3e01      	subs	r6, #1
    6924:	4226      	tst	r6, r4
    6926:	bf0c      	ite	eq
    6928:	2301      	moveq	r3, #1
    692a:	2300      	movne	r3, #0
		length = str_desc[0];
    692c:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    692e:	4622      	mov	r2, r4
    6930:	4628      	mov	r0, r5
    6932:	4c3f      	ldr	r4, [pc, #252]	; (6a30 <usbdc_cb_ctl_req+0x410>)
    6934:	47a0      	blx	r4
    6936:	fab0 f080 	clz	r0, r0
    693a:	0940      	lsrs	r0, r0, #5
    693c:	e688      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    693e:	2300      	movs	r3, #0
    6940:	e7f5      	b.n	692e <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    6942:	4939      	ldr	r1, [pc, #228]	; (6a28 <usbdc_cb_ctl_req+0x408>)
    6944:	694b      	ldr	r3, [r1, #20]
    6946:	7eca      	ldrb	r2, [r1, #27]
    6948:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    694a:	2300      	movs	r3, #0
    694c:	2201      	movs	r2, #1
    694e:	6949      	ldr	r1, [r1, #20]
    6950:	4628      	mov	r0, r5
    6952:	4c37      	ldr	r4, [pc, #220]	; (6a30 <usbdc_cb_ctl_req+0x410>)
    6954:	47a0      	blx	r4
		return true;
    6956:	2001      	movs	r0, #1
    6958:	e67a      	b.n	6650 <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    695a:	f003 031f 	and.w	r3, r3, #31
    695e:	2b01      	cmp	r3, #1
    6960:	d903      	bls.n	696a <usbdc_cb_ctl_req+0x34a>
    6962:	2b02      	cmp	r3, #2
    6964:	d010      	beq.n	6988 <usbdc_cb_ctl_req+0x368>
		return false;
    6966:	2000      	movs	r0, #0
    6968:	e672      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		st = 0;
    696a:	2300      	movs	r3, #0
    696c:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    696e:	492e      	ldr	r1, [pc, #184]	; (6a28 <usbdc_cb_ctl_req+0x408>)
    6970:	694b      	ldr	r3, [r1, #20]
    6972:	f8bd 2000 	ldrh.w	r2, [sp]
    6976:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    6978:	2300      	movs	r3, #0
    697a:	2202      	movs	r2, #2
    697c:	6949      	ldr	r1, [r1, #20]
    697e:	4628      	mov	r0, r5
    6980:	4c2b      	ldr	r4, [pc, #172]	; (6a30 <usbdc_cb_ctl_req+0x410>)
    6982:	47a0      	blx	r4
	return true;
    6984:	2001      	movs	r0, #1
    6986:	e663      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    6988:	88a0      	ldrh	r0, [r4, #4]
    698a:	2102      	movs	r1, #2
    698c:	b2c0      	uxtb	r0, r0
    698e:	4b2a      	ldr	r3, [pc, #168]	; (6a38 <usbdc_cb_ctl_req+0x418>)
    6990:	4798      	blx	r3
		if (st < 0) {
    6992:	2800      	cmp	r0, #0
    6994:	db03      	blt.n	699e <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    6996:	f000 0001 	and.w	r0, r0, #1
    699a:	9000      	str	r0, [sp, #0]
    699c:	e7e7      	b.n	696e <usbdc_cb_ctl_req+0x34e>
			return false;
    699e:	2000      	movs	r0, #0
    69a0:	e656      	b.n	6650 <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    69a2:	4b21      	ldr	r3, [pc, #132]	; (6a28 <usbdc_cb_ctl_req+0x408>)
    69a4:	7f5b      	ldrb	r3, [r3, #29]
    69a6:	88a2      	ldrh	r2, [r4, #4]
    69a8:	4113      	asrs	r3, r2
    69aa:	f013 0f01 	tst.w	r3, #1
    69ae:	d012      	beq.n	69d6 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    69b0:	4b1d      	ldr	r3, [pc, #116]	; (6a28 <usbdc_cb_ctl_req+0x408>)
    69b2:	691d      	ldr	r5, [r3, #16]
	return false;
    69b4:	2000      	movs	r0, #0
	while (NULL != func) {
    69b6:	2d00      	cmp	r5, #0
    69b8:	f43f ae4a 	beq.w	6650 <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    69bc:	2602      	movs	r6, #2
    69be:	686b      	ldr	r3, [r5, #4]
    69c0:	4622      	mov	r2, r4
    69c2:	4631      	mov	r1, r6
    69c4:	4628      	mov	r0, r5
    69c6:	4798      	blx	r3
    69c8:	2800      	cmp	r0, #0
    69ca:	da0f      	bge.n	69ec <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    69cc:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    69ce:	2d00      	cmp	r5, #0
    69d0:	d1f5      	bne.n	69be <usbdc_cb_ctl_req+0x39e>
	return false;
    69d2:	2000      	movs	r0, #0
    69d4:	e63c      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    69d6:	4914      	ldr	r1, [pc, #80]	; (6a28 <usbdc_cb_ctl_req+0x408>)
    69d8:	694b      	ldr	r3, [r1, #20]
    69da:	2000      	movs	r0, #0
    69dc:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    69de:	4603      	mov	r3, r0
    69e0:	2201      	movs	r2, #1
    69e2:	6949      	ldr	r1, [r1, #20]
    69e4:	4c12      	ldr	r4, [pc, #72]	; (6a30 <usbdc_cb_ctl_req+0x410>)
    69e6:	47a0      	blx	r4
		return true;
    69e8:	2001      	movs	r0, #1
    69ea:	e631      	b.n	6650 <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    69ec:	490e      	ldr	r1, [pc, #56]	; (6a28 <usbdc_cb_ctl_req+0x408>)
    69ee:	694b      	ldr	r3, [r1, #20]
    69f0:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    69f2:	2300      	movs	r3, #0
    69f4:	2201      	movs	r2, #1
    69f6:	6949      	ldr	r1, [r1, #20]
    69f8:	4618      	mov	r0, r3
    69fa:	4c0d      	ldr	r4, [pc, #52]	; (6a30 <usbdc_cb_ctl_req+0x410>)
    69fc:	47a0      	blx	r4
			return true;
    69fe:	2001      	movs	r0, #1
    6a00:	e626      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return true;
    6a02:	2001      	movs	r0, #1
    6a04:	e624      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    6a06:	2000      	movs	r0, #0
    6a08:	e622      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    6a0a:	2000      	movs	r0, #0
    6a0c:	e620      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    6a0e:	2000      	movs	r0, #0
    6a10:	e61e      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    6a12:	2000      	movs	r0, #0
    6a14:	e61c      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    6a16:	2000      	movs	r0, #0
    6a18:	e61a      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    6a1a:	2000      	movs	r0, #0
    6a1c:	e618      	b.n	6650 <usbdc_cb_ctl_req+0x30>
		return false;
    6a1e:	2000      	movs	r0, #0
    6a20:	e616      	b.n	6650 <usbdc_cb_ctl_req+0x30>
			return false;
    6a22:	2000      	movs	r0, #0
    6a24:	e614      	b.n	6650 <usbdc_cb_ctl_req+0x30>
    6a26:	bf00      	nop
    6a28:	200008c4 	.word	0x200008c4
    6a2c:	00006b85 	.word	0x00006b85
    6a30:	00006601 	.word	0x00006601
    6a34:	00006bed 	.word	0x00006bed
    6a38:	000025f9 	.word	0x000025f9

00006a3c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    6a3c:	b508      	push	{r3, lr}
	switch (type) {
    6a3e:	2801      	cmp	r0, #1
    6a40:	d007      	beq.n	6a52 <usbdc_register_handler+0x16>
    6a42:	b110      	cbz	r0, 6a4a <usbdc_register_handler+0xe>
    6a44:	2802      	cmp	r0, #2
    6a46:	d008      	beq.n	6a5a <usbdc_register_handler+0x1e>
    6a48:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    6a4a:	4806      	ldr	r0, [pc, #24]	; (6a64 <usbdc_register_handler+0x28>)
    6a4c:	4b06      	ldr	r3, [pc, #24]	; (6a68 <usbdc_register_handler+0x2c>)
    6a4e:	4798      	blx	r3
		break;
    6a50:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    6a52:	4806      	ldr	r0, [pc, #24]	; (6a6c <usbdc_register_handler+0x30>)
    6a54:	4b04      	ldr	r3, [pc, #16]	; (6a68 <usbdc_register_handler+0x2c>)
    6a56:	4798      	blx	r3
		break;
    6a58:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    6a5a:	4805      	ldr	r0, [pc, #20]	; (6a70 <usbdc_register_handler+0x34>)
    6a5c:	4b02      	ldr	r3, [pc, #8]	; (6a68 <usbdc_register_handler+0x2c>)
    6a5e:	4798      	blx	r3
    6a60:	bd08      	pop	{r3, pc}
    6a62:	bf00      	nop
    6a64:	200008c8 	.word	0x200008c8
    6a68:	00002709 	.word	0x00002709
    6a6c:	200008cc 	.word	0x200008cc
    6a70:	200008d0 	.word	0x200008d0

00006a74 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    6a74:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    6a76:	4605      	mov	r5, r0
    6a78:	f240 3255 	movw	r2, #853	; 0x355
    6a7c:	490c      	ldr	r1, [pc, #48]	; (6ab0 <usbdc_init+0x3c>)
    6a7e:	3000      	adds	r0, #0
    6a80:	bf18      	it	ne
    6a82:	2001      	movne	r0, #1
    6a84:	4b0b      	ldr	r3, [pc, #44]	; (6ab4 <usbdc_init+0x40>)
    6a86:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    6a88:	4b0b      	ldr	r3, [pc, #44]	; (6ab8 <usbdc_init+0x44>)
    6a8a:	4798      	blx	r3
	if (rc < 0) {
    6a8c:	2800      	cmp	r0, #0
    6a8e:	db0e      	blt.n	6aae <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    6a90:	4c0a      	ldr	r4, [pc, #40]	; (6abc <usbdc_init+0x48>)
    6a92:	2220      	movs	r2, #32
    6a94:	2100      	movs	r1, #0
    6a96:	4620      	mov	r0, r4
    6a98:	4b09      	ldr	r3, [pc, #36]	; (6ac0 <usbdc_init+0x4c>)
    6a9a:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    6a9c:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    6a9e:	4909      	ldr	r1, [pc, #36]	; (6ac4 <usbdc_init+0x50>)
    6aa0:	2000      	movs	r0, #0
    6aa2:	4c09      	ldr	r4, [pc, #36]	; (6ac8 <usbdc_init+0x54>)
    6aa4:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    6aa6:	4909      	ldr	r1, [pc, #36]	; (6acc <usbdc_init+0x58>)
    6aa8:	2001      	movs	r0, #1
    6aaa:	47a0      	blx	r4

	return 0;
    6aac:	2000      	movs	r0, #0
}
    6aae:	bd38      	pop	{r3, r4, r5, pc}
    6ab0:	00008bac 	.word	0x00008bac
    6ab4:	000026ad 	.word	0x000026ad
    6ab8:	00002379 	.word	0x00002379
    6abc:	200008c4 	.word	0x200008c4
    6ac0:	00006cdb 	.word	0x00006cdb
    6ac4:	000064f5 	.word	0x000064f5
    6ac8:	000023e1 	.word	0x000023e1
    6acc:	000065e1 	.word	0x000065e1

00006ad0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    6ad0:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    6ad2:	4601      	mov	r1, r0
    6ad4:	4801      	ldr	r0, [pc, #4]	; (6adc <usbdc_register_function+0xc>)
    6ad6:	4b02      	ldr	r3, [pc, #8]	; (6ae0 <usbdc_register_function+0x10>)
    6ad8:	4798      	blx	r3
    6ada:	bd08      	pop	{r3, pc}
    6adc:	200008d4 	.word	0x200008d4
    6ae0:	00002709 	.word	0x00002709

00006ae4 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    6ae4:	4b01      	ldr	r3, [pc, #4]	; (6aec <usbdc_get_ctrl_buffer+0x8>)
    6ae6:	6958      	ldr	r0, [r3, #20]
    6ae8:	4770      	bx	lr
    6aea:	bf00      	nop
    6aec:	200008c4 	.word	0x200008c4

00006af0 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    6af0:	4b03      	ldr	r3, [pc, #12]	; (6b00 <usbdc_get_state+0x10>)
    6af2:	7e98      	ldrb	r0, [r3, #26]
    6af4:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    6af8:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    6afa:	bf18      	it	ne
    6afc:	2010      	movne	r0, #16
    6afe:	4770      	bx	lr
    6b00:	200008c4 	.word	0x200008c4

00006b04 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    6b04:	4288      	cmp	r0, r1
    6b06:	d214      	bcs.n	6b32 <usb_find_desc+0x2e>
	return desc[0];
    6b08:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6b0a:	2b01      	cmp	r3, #1
    6b0c:	d913      	bls.n	6b36 <usb_find_desc+0x32>
{
    6b0e:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    6b10:	7844      	ldrb	r4, [r0, #1]
    6b12:	4294      	cmp	r4, r2
    6b14:	d00a      	beq.n	6b2c <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    6b16:	4418      	add	r0, r3
	while (desc < eof) {
    6b18:	4281      	cmp	r1, r0
    6b1a:	d906      	bls.n	6b2a <usb_find_desc+0x26>
	return desc[0];
    6b1c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6b1e:	2b01      	cmp	r3, #1
    6b20:	d90b      	bls.n	6b3a <usb_find_desc+0x36>
	return desc[1];
    6b22:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    6b24:	4294      	cmp	r4, r2
    6b26:	d1f6      	bne.n	6b16 <usb_find_desc+0x12>
    6b28:	e000      	b.n	6b2c <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    6b2a:	2000      	movs	r0, #0
}
    6b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
    6b30:	4770      	bx	lr
	return NULL;
    6b32:	2000      	movs	r0, #0
    6b34:	4770      	bx	lr
		_desc_len_check();
    6b36:	2000      	movs	r0, #0
    6b38:	4770      	bx	lr
    6b3a:	2000      	movs	r0, #0
    6b3c:	e7f6      	b.n	6b2c <usb_find_desc+0x28>

00006b3e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    6b3e:	4288      	cmp	r0, r1
    6b40:	d216      	bcs.n	6b70 <usb_find_ep_desc+0x32>
	return desc[0];
    6b42:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6b44:	2b01      	cmp	r3, #1
    6b46:	d915      	bls.n	6b74 <usb_find_ep_desc+0x36>
	return desc[1];
    6b48:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    6b4a:	2a04      	cmp	r2, #4
    6b4c:	d014      	beq.n	6b78 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    6b4e:	2a05      	cmp	r2, #5
    6b50:	d00b      	beq.n	6b6a <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    6b52:	4418      	add	r0, r3
	while (desc < eof) {
    6b54:	4281      	cmp	r1, r0
    6b56:	d909      	bls.n	6b6c <usb_find_ep_desc+0x2e>
	return desc[0];
    6b58:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    6b5a:	2b01      	cmp	r3, #1
    6b5c:	d90e      	bls.n	6b7c <usb_find_ep_desc+0x3e>
	return desc[1];
    6b5e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    6b60:	2a04      	cmp	r2, #4
    6b62:	d00d      	beq.n	6b80 <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    6b64:	2a05      	cmp	r2, #5
    6b66:	d1f4      	bne.n	6b52 <usb_find_ep_desc+0x14>
    6b68:	e00b      	b.n	6b82 <usb_find_ep_desc+0x44>
    6b6a:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    6b6c:	2000      	movs	r0, #0
    6b6e:	4770      	bx	lr
    6b70:	2000      	movs	r0, #0
    6b72:	4770      	bx	lr
		_desc_len_check();
    6b74:	2000      	movs	r0, #0
    6b76:	4770      	bx	lr
	return NULL;
    6b78:	2000      	movs	r0, #0
    6b7a:	4770      	bx	lr
		_desc_len_check();
    6b7c:	2000      	movs	r0, #0
    6b7e:	4770      	bx	lr
	return NULL;
    6b80:	2000      	movs	r0, #0
}
    6b82:	4770      	bx	lr

00006b84 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    6b84:	b538      	push	{r3, r4, r5, lr}
    6b86:	460c      	mov	r4, r1
    6b88:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    6b8a:	2202      	movs	r2, #2
    6b8c:	4b16      	ldr	r3, [pc, #88]	; (6be8 <usb_find_cfg_desc+0x64>)
    6b8e:	4798      	blx	r3
	if (!desc) {
    6b90:	4603      	mov	r3, r0
    6b92:	b1e8      	cbz	r0, 6bd0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    6b94:	4284      	cmp	r4, r0
    6b96:	d91d      	bls.n	6bd4 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    6b98:	7802      	ldrb	r2, [r0, #0]
    6b9a:	2a01      	cmp	r2, #1
    6b9c:	d91c      	bls.n	6bd8 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    6b9e:	7842      	ldrb	r2, [r0, #1]
    6ba0:	2a02      	cmp	r2, #2
    6ba2:	d11b      	bne.n	6bdc <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    6ba4:	7942      	ldrb	r2, [r0, #5]
    6ba6:	42aa      	cmp	r2, r5
    6ba8:	d012      	beq.n	6bd0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    6baa:	78d9      	ldrb	r1, [r3, #3]
    6bac:	789a      	ldrb	r2, [r3, #2]
    6bae:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    6bb2:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    6bb6:	429c      	cmp	r4, r3
    6bb8:	d909      	bls.n	6bce <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    6bba:	781a      	ldrb	r2, [r3, #0]
    6bbc:	2a01      	cmp	r2, #1
    6bbe:	d90f      	bls.n	6be0 <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    6bc0:	785a      	ldrb	r2, [r3, #1]
    6bc2:	2a02      	cmp	r2, #2
    6bc4:	d10e      	bne.n	6be4 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    6bc6:	795a      	ldrb	r2, [r3, #5]
    6bc8:	42aa      	cmp	r2, r5
    6bca:	d1ee      	bne.n	6baa <usb_find_cfg_desc+0x26>
    6bcc:	e000      	b.n	6bd0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    6bce:	2300      	movs	r3, #0
}
    6bd0:	4618      	mov	r0, r3
    6bd2:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    6bd4:	2300      	movs	r3, #0
    6bd6:	e7fb      	b.n	6bd0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    6bd8:	2300      	movs	r3, #0
    6bda:	e7f9      	b.n	6bd0 <usb_find_cfg_desc+0x4c>
	return NULL;
    6bdc:	2300      	movs	r3, #0
    6bde:	e7f7      	b.n	6bd0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    6be0:	2300      	movs	r3, #0
    6be2:	e7f5      	b.n	6bd0 <usb_find_cfg_desc+0x4c>
	return NULL;
    6be4:	2300      	movs	r3, #0
    6be6:	e7f3      	b.n	6bd0 <usb_find_cfg_desc+0x4c>
    6be8:	00006b05 	.word	0x00006b05

00006bec <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    6bec:	4288      	cmp	r0, r1
    6bee:	d217      	bcs.n	6c20 <usb_find_str_desc+0x34>
{
    6bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6bf4:	460d      	mov	r5, r1
    6bf6:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    6bf8:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    6bfa:	f04f 0803 	mov.w	r8, #3
    6bfe:	4f0c      	ldr	r7, [pc, #48]	; (6c30 <usb_find_str_desc+0x44>)
    6c00:	4642      	mov	r2, r8
    6c02:	4629      	mov	r1, r5
    6c04:	47b8      	blx	r7
		if (desc) {
    6c06:	4603      	mov	r3, r0
    6c08:	b170      	cbz	r0, 6c28 <usb_find_str_desc+0x3c>
	return desc[0];
    6c0a:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    6c0c:	2801      	cmp	r0, #1
    6c0e:	d90a      	bls.n	6c26 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    6c10:	42a6      	cmp	r6, r4
    6c12:	d009      	beq.n	6c28 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    6c14:	4418      	add	r0, r3
    6c16:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    6c18:	4285      	cmp	r5, r0
    6c1a:	d8f1      	bhi.n	6c00 <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    6c1c:	2300      	movs	r3, #0
    6c1e:	e003      	b.n	6c28 <usb_find_str_desc+0x3c>
    6c20:	2300      	movs	r3, #0
}
    6c22:	4618      	mov	r0, r3
    6c24:	4770      	bx	lr
			_desc_len_check();
    6c26:	2300      	movs	r3, #0
}
    6c28:	4618      	mov	r0, r3
    6c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6c2e:	bf00      	nop
    6c30:	00006b05 	.word	0x00006b05

00006c34 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    6c34:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    6c36:	4805      	ldr	r0, [pc, #20]	; (6c4c <composite_device_init+0x18>)
    6c38:	4b05      	ldr	r3, [pc, #20]	; (6c50 <composite_device_init+0x1c>)
    6c3a:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    6c3c:	4b05      	ldr	r3, [pc, #20]	; (6c54 <composite_device_init+0x20>)
    6c3e:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    6c40:	4b05      	ldr	r3, [pc, #20]	; (6c58 <composite_device_init+0x24>)
    6c42:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_KEYBOARD_EN
	hiddf_keyboard_init();
    6c44:	4b05      	ldr	r3, [pc, #20]	; (6c5c <composite_device_init+0x28>)
    6c46:	4798      	blx	r3
    6c48:	bd08      	pop	{r3, pc}
    6c4a:	bf00      	nop
    6c4c:	200008fc 	.word	0x200008fc
    6c50:	00006a75 	.word	0x00006a75
    6c54:	0000601d 	.word	0x0000601d
    6c58:	00006425 	.word	0x00006425
    6c5c:	00006235 	.word	0x00006235

00006c60 <usb_init>:
		}
	}
}

void usb_init(void)
{
    6c60:	b508      	push	{r3, lr}

	composite_device_init();
    6c62:	4b01      	ldr	r3, [pc, #4]	; (6c68 <usb_init+0x8>)
    6c64:	4798      	blx	r3
    6c66:	bd08      	pop	{r3, pc}
    6c68:	00006c35 	.word	0x00006c35

00006c6c <__libc_init_array>:
    6c6c:	b570      	push	{r4, r5, r6, lr}
    6c6e:	4e0d      	ldr	r6, [pc, #52]	; (6ca4 <__libc_init_array+0x38>)
    6c70:	4c0d      	ldr	r4, [pc, #52]	; (6ca8 <__libc_init_array+0x3c>)
    6c72:	1ba4      	subs	r4, r4, r6
    6c74:	10a4      	asrs	r4, r4, #2
    6c76:	2500      	movs	r5, #0
    6c78:	42a5      	cmp	r5, r4
    6c7a:	d109      	bne.n	6c90 <__libc_init_array+0x24>
    6c7c:	4e0b      	ldr	r6, [pc, #44]	; (6cac <__libc_init_array+0x40>)
    6c7e:	4c0c      	ldr	r4, [pc, #48]	; (6cb0 <__libc_init_array+0x44>)
    6c80:	f001 ffec 	bl	8c5c <_init>
    6c84:	1ba4      	subs	r4, r4, r6
    6c86:	10a4      	asrs	r4, r4, #2
    6c88:	2500      	movs	r5, #0
    6c8a:	42a5      	cmp	r5, r4
    6c8c:	d105      	bne.n	6c9a <__libc_init_array+0x2e>
    6c8e:	bd70      	pop	{r4, r5, r6, pc}
    6c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6c94:	4798      	blx	r3
    6c96:	3501      	adds	r5, #1
    6c98:	e7ee      	b.n	6c78 <__libc_init_array+0xc>
    6c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6c9e:	4798      	blx	r3
    6ca0:	3501      	adds	r5, #1
    6ca2:	e7f2      	b.n	6c8a <__libc_init_array+0x1e>
    6ca4:	00008c68 	.word	0x00008c68
    6ca8:	00008c68 	.word	0x00008c68
    6cac:	00008c68 	.word	0x00008c68
    6cb0:	00008c6c 	.word	0x00008c6c

00006cb4 <malloc>:
    6cb4:	4b02      	ldr	r3, [pc, #8]	; (6cc0 <malloc+0xc>)
    6cb6:	4601      	mov	r1, r0
    6cb8:	6818      	ldr	r0, [r3, #0]
    6cba:	f000 b865 	b.w	6d88 <_malloc_r>
    6cbe:	bf00      	nop
    6cc0:	20000058 	.word	0x20000058

00006cc4 <memcpy>:
    6cc4:	b510      	push	{r4, lr}
    6cc6:	1e43      	subs	r3, r0, #1
    6cc8:	440a      	add	r2, r1
    6cca:	4291      	cmp	r1, r2
    6ccc:	d100      	bne.n	6cd0 <memcpy+0xc>
    6cce:	bd10      	pop	{r4, pc}
    6cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
    6cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
    6cd8:	e7f7      	b.n	6cca <memcpy+0x6>

00006cda <memset>:
    6cda:	4402      	add	r2, r0
    6cdc:	4603      	mov	r3, r0
    6cde:	4293      	cmp	r3, r2
    6ce0:	d100      	bne.n	6ce4 <memset+0xa>
    6ce2:	4770      	bx	lr
    6ce4:	f803 1b01 	strb.w	r1, [r3], #1
    6ce8:	e7f9      	b.n	6cde <memset+0x4>
	...

00006cec <_free_r>:
    6cec:	b538      	push	{r3, r4, r5, lr}
    6cee:	4605      	mov	r5, r0
    6cf0:	2900      	cmp	r1, #0
    6cf2:	d045      	beq.n	6d80 <_free_r+0x94>
    6cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6cf8:	1f0c      	subs	r4, r1, #4
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	bfb8      	it	lt
    6cfe:	18e4      	addlt	r4, r4, r3
    6d00:	f000 fca6 	bl	7650 <__malloc_lock>
    6d04:	4a1f      	ldr	r2, [pc, #124]	; (6d84 <_free_r+0x98>)
    6d06:	6813      	ldr	r3, [r2, #0]
    6d08:	4610      	mov	r0, r2
    6d0a:	b933      	cbnz	r3, 6d1a <_free_r+0x2e>
    6d0c:	6063      	str	r3, [r4, #4]
    6d0e:	6014      	str	r4, [r2, #0]
    6d10:	4628      	mov	r0, r5
    6d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6d16:	f000 bc9c 	b.w	7652 <__malloc_unlock>
    6d1a:	42a3      	cmp	r3, r4
    6d1c:	d90c      	bls.n	6d38 <_free_r+0x4c>
    6d1e:	6821      	ldr	r1, [r4, #0]
    6d20:	1862      	adds	r2, r4, r1
    6d22:	4293      	cmp	r3, r2
    6d24:	bf04      	itt	eq
    6d26:	681a      	ldreq	r2, [r3, #0]
    6d28:	685b      	ldreq	r3, [r3, #4]
    6d2a:	6063      	str	r3, [r4, #4]
    6d2c:	bf04      	itt	eq
    6d2e:	1852      	addeq	r2, r2, r1
    6d30:	6022      	streq	r2, [r4, #0]
    6d32:	6004      	str	r4, [r0, #0]
    6d34:	e7ec      	b.n	6d10 <_free_r+0x24>
    6d36:	4613      	mov	r3, r2
    6d38:	685a      	ldr	r2, [r3, #4]
    6d3a:	b10a      	cbz	r2, 6d40 <_free_r+0x54>
    6d3c:	42a2      	cmp	r2, r4
    6d3e:	d9fa      	bls.n	6d36 <_free_r+0x4a>
    6d40:	6819      	ldr	r1, [r3, #0]
    6d42:	1858      	adds	r0, r3, r1
    6d44:	42a0      	cmp	r0, r4
    6d46:	d10b      	bne.n	6d60 <_free_r+0x74>
    6d48:	6820      	ldr	r0, [r4, #0]
    6d4a:	4401      	add	r1, r0
    6d4c:	1858      	adds	r0, r3, r1
    6d4e:	4282      	cmp	r2, r0
    6d50:	6019      	str	r1, [r3, #0]
    6d52:	d1dd      	bne.n	6d10 <_free_r+0x24>
    6d54:	6810      	ldr	r0, [r2, #0]
    6d56:	6852      	ldr	r2, [r2, #4]
    6d58:	605a      	str	r2, [r3, #4]
    6d5a:	4401      	add	r1, r0
    6d5c:	6019      	str	r1, [r3, #0]
    6d5e:	e7d7      	b.n	6d10 <_free_r+0x24>
    6d60:	d902      	bls.n	6d68 <_free_r+0x7c>
    6d62:	230c      	movs	r3, #12
    6d64:	602b      	str	r3, [r5, #0]
    6d66:	e7d3      	b.n	6d10 <_free_r+0x24>
    6d68:	6820      	ldr	r0, [r4, #0]
    6d6a:	1821      	adds	r1, r4, r0
    6d6c:	428a      	cmp	r2, r1
    6d6e:	bf04      	itt	eq
    6d70:	6811      	ldreq	r1, [r2, #0]
    6d72:	6852      	ldreq	r2, [r2, #4]
    6d74:	6062      	str	r2, [r4, #4]
    6d76:	bf04      	itt	eq
    6d78:	1809      	addeq	r1, r1, r0
    6d7a:	6021      	streq	r1, [r4, #0]
    6d7c:	605c      	str	r4, [r3, #4]
    6d7e:	e7c7      	b.n	6d10 <_free_r+0x24>
    6d80:	bd38      	pop	{r3, r4, r5, pc}
    6d82:	bf00      	nop
    6d84:	2000093c 	.word	0x2000093c

00006d88 <_malloc_r>:
    6d88:	b570      	push	{r4, r5, r6, lr}
    6d8a:	1ccd      	adds	r5, r1, #3
    6d8c:	f025 0503 	bic.w	r5, r5, #3
    6d90:	3508      	adds	r5, #8
    6d92:	2d0c      	cmp	r5, #12
    6d94:	bf38      	it	cc
    6d96:	250c      	movcc	r5, #12
    6d98:	2d00      	cmp	r5, #0
    6d9a:	4606      	mov	r6, r0
    6d9c:	db01      	blt.n	6da2 <_malloc_r+0x1a>
    6d9e:	42a9      	cmp	r1, r5
    6da0:	d903      	bls.n	6daa <_malloc_r+0x22>
    6da2:	230c      	movs	r3, #12
    6da4:	6033      	str	r3, [r6, #0]
    6da6:	2000      	movs	r0, #0
    6da8:	bd70      	pop	{r4, r5, r6, pc}
    6daa:	f000 fc51 	bl	7650 <__malloc_lock>
    6dae:	4a23      	ldr	r2, [pc, #140]	; (6e3c <_malloc_r+0xb4>)
    6db0:	6814      	ldr	r4, [r2, #0]
    6db2:	4621      	mov	r1, r4
    6db4:	b991      	cbnz	r1, 6ddc <_malloc_r+0x54>
    6db6:	4c22      	ldr	r4, [pc, #136]	; (6e40 <_malloc_r+0xb8>)
    6db8:	6823      	ldr	r3, [r4, #0]
    6dba:	b91b      	cbnz	r3, 6dc4 <_malloc_r+0x3c>
    6dbc:	4630      	mov	r0, r6
    6dbe:	f000 f8bd 	bl	6f3c <_sbrk_r>
    6dc2:	6020      	str	r0, [r4, #0]
    6dc4:	4629      	mov	r1, r5
    6dc6:	4630      	mov	r0, r6
    6dc8:	f000 f8b8 	bl	6f3c <_sbrk_r>
    6dcc:	1c43      	adds	r3, r0, #1
    6dce:	d126      	bne.n	6e1e <_malloc_r+0x96>
    6dd0:	230c      	movs	r3, #12
    6dd2:	6033      	str	r3, [r6, #0]
    6dd4:	4630      	mov	r0, r6
    6dd6:	f000 fc3c 	bl	7652 <__malloc_unlock>
    6dda:	e7e4      	b.n	6da6 <_malloc_r+0x1e>
    6ddc:	680b      	ldr	r3, [r1, #0]
    6dde:	1b5b      	subs	r3, r3, r5
    6de0:	d41a      	bmi.n	6e18 <_malloc_r+0x90>
    6de2:	2b0b      	cmp	r3, #11
    6de4:	d90f      	bls.n	6e06 <_malloc_r+0x7e>
    6de6:	600b      	str	r3, [r1, #0]
    6de8:	50cd      	str	r5, [r1, r3]
    6dea:	18cc      	adds	r4, r1, r3
    6dec:	4630      	mov	r0, r6
    6dee:	f000 fc30 	bl	7652 <__malloc_unlock>
    6df2:	f104 000b 	add.w	r0, r4, #11
    6df6:	1d23      	adds	r3, r4, #4
    6df8:	f020 0007 	bic.w	r0, r0, #7
    6dfc:	1ac3      	subs	r3, r0, r3
    6dfe:	d01b      	beq.n	6e38 <_malloc_r+0xb0>
    6e00:	425a      	negs	r2, r3
    6e02:	50e2      	str	r2, [r4, r3]
    6e04:	bd70      	pop	{r4, r5, r6, pc}
    6e06:	428c      	cmp	r4, r1
    6e08:	bf0d      	iteet	eq
    6e0a:	6863      	ldreq	r3, [r4, #4]
    6e0c:	684b      	ldrne	r3, [r1, #4]
    6e0e:	6063      	strne	r3, [r4, #4]
    6e10:	6013      	streq	r3, [r2, #0]
    6e12:	bf18      	it	ne
    6e14:	460c      	movne	r4, r1
    6e16:	e7e9      	b.n	6dec <_malloc_r+0x64>
    6e18:	460c      	mov	r4, r1
    6e1a:	6849      	ldr	r1, [r1, #4]
    6e1c:	e7ca      	b.n	6db4 <_malloc_r+0x2c>
    6e1e:	1cc4      	adds	r4, r0, #3
    6e20:	f024 0403 	bic.w	r4, r4, #3
    6e24:	42a0      	cmp	r0, r4
    6e26:	d005      	beq.n	6e34 <_malloc_r+0xac>
    6e28:	1a21      	subs	r1, r4, r0
    6e2a:	4630      	mov	r0, r6
    6e2c:	f000 f886 	bl	6f3c <_sbrk_r>
    6e30:	3001      	adds	r0, #1
    6e32:	d0cd      	beq.n	6dd0 <_malloc_r+0x48>
    6e34:	6025      	str	r5, [r4, #0]
    6e36:	e7d9      	b.n	6dec <_malloc_r+0x64>
    6e38:	bd70      	pop	{r4, r5, r6, pc}
    6e3a:	bf00      	nop
    6e3c:	2000093c 	.word	0x2000093c
    6e40:	20000940 	.word	0x20000940

00006e44 <iprintf>:
    6e44:	b40f      	push	{r0, r1, r2, r3}
    6e46:	4b0a      	ldr	r3, [pc, #40]	; (6e70 <iprintf+0x2c>)
    6e48:	b513      	push	{r0, r1, r4, lr}
    6e4a:	681c      	ldr	r4, [r3, #0]
    6e4c:	b124      	cbz	r4, 6e58 <iprintf+0x14>
    6e4e:	69a3      	ldr	r3, [r4, #24]
    6e50:	b913      	cbnz	r3, 6e58 <iprintf+0x14>
    6e52:	4620      	mov	r0, r4
    6e54:	f000 fb0e 	bl	7474 <__sinit>
    6e58:	ab05      	add	r3, sp, #20
    6e5a:	9a04      	ldr	r2, [sp, #16]
    6e5c:	68a1      	ldr	r1, [r4, #8]
    6e5e:	9301      	str	r3, [sp, #4]
    6e60:	4620      	mov	r0, r4
    6e62:	f000 fd6f 	bl	7944 <_vfiprintf_r>
    6e66:	b002      	add	sp, #8
    6e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e6c:	b004      	add	sp, #16
    6e6e:	4770      	bx	lr
    6e70:	20000058 	.word	0x20000058

00006e74 <_puts_r>:
    6e74:	b570      	push	{r4, r5, r6, lr}
    6e76:	460e      	mov	r6, r1
    6e78:	4605      	mov	r5, r0
    6e7a:	b118      	cbz	r0, 6e84 <_puts_r+0x10>
    6e7c:	6983      	ldr	r3, [r0, #24]
    6e7e:	b90b      	cbnz	r3, 6e84 <_puts_r+0x10>
    6e80:	f000 faf8 	bl	7474 <__sinit>
    6e84:	69ab      	ldr	r3, [r5, #24]
    6e86:	68ac      	ldr	r4, [r5, #8]
    6e88:	b913      	cbnz	r3, 6e90 <_puts_r+0x1c>
    6e8a:	4628      	mov	r0, r5
    6e8c:	f000 faf2 	bl	7474 <__sinit>
    6e90:	4b23      	ldr	r3, [pc, #140]	; (6f20 <_puts_r+0xac>)
    6e92:	429c      	cmp	r4, r3
    6e94:	d117      	bne.n	6ec6 <_puts_r+0x52>
    6e96:	686c      	ldr	r4, [r5, #4]
    6e98:	89a3      	ldrh	r3, [r4, #12]
    6e9a:	071b      	lsls	r3, r3, #28
    6e9c:	d51d      	bpl.n	6eda <_puts_r+0x66>
    6e9e:	6923      	ldr	r3, [r4, #16]
    6ea0:	b1db      	cbz	r3, 6eda <_puts_r+0x66>
    6ea2:	3e01      	subs	r6, #1
    6ea4:	68a3      	ldr	r3, [r4, #8]
    6ea6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    6eaa:	3b01      	subs	r3, #1
    6eac:	60a3      	str	r3, [r4, #8]
    6eae:	b9e9      	cbnz	r1, 6eec <_puts_r+0x78>
    6eb0:	2b00      	cmp	r3, #0
    6eb2:	da2e      	bge.n	6f12 <_puts_r+0x9e>
    6eb4:	4622      	mov	r2, r4
    6eb6:	210a      	movs	r1, #10
    6eb8:	4628      	mov	r0, r5
    6eba:	f000 f929 	bl	7110 <__swbuf_r>
    6ebe:	3001      	adds	r0, #1
    6ec0:	d011      	beq.n	6ee6 <_puts_r+0x72>
    6ec2:	200a      	movs	r0, #10
    6ec4:	bd70      	pop	{r4, r5, r6, pc}
    6ec6:	4b17      	ldr	r3, [pc, #92]	; (6f24 <_puts_r+0xb0>)
    6ec8:	429c      	cmp	r4, r3
    6eca:	d101      	bne.n	6ed0 <_puts_r+0x5c>
    6ecc:	68ac      	ldr	r4, [r5, #8]
    6ece:	e7e3      	b.n	6e98 <_puts_r+0x24>
    6ed0:	4b15      	ldr	r3, [pc, #84]	; (6f28 <_puts_r+0xb4>)
    6ed2:	429c      	cmp	r4, r3
    6ed4:	bf08      	it	eq
    6ed6:	68ec      	ldreq	r4, [r5, #12]
    6ed8:	e7de      	b.n	6e98 <_puts_r+0x24>
    6eda:	4621      	mov	r1, r4
    6edc:	4628      	mov	r0, r5
    6ede:	f000 f969 	bl	71b4 <__swsetup_r>
    6ee2:	2800      	cmp	r0, #0
    6ee4:	d0dd      	beq.n	6ea2 <_puts_r+0x2e>
    6ee6:	f04f 30ff 	mov.w	r0, #4294967295
    6eea:	bd70      	pop	{r4, r5, r6, pc}
    6eec:	2b00      	cmp	r3, #0
    6eee:	da04      	bge.n	6efa <_puts_r+0x86>
    6ef0:	69a2      	ldr	r2, [r4, #24]
    6ef2:	4293      	cmp	r3, r2
    6ef4:	db06      	blt.n	6f04 <_puts_r+0x90>
    6ef6:	290a      	cmp	r1, #10
    6ef8:	d004      	beq.n	6f04 <_puts_r+0x90>
    6efa:	6823      	ldr	r3, [r4, #0]
    6efc:	1c5a      	adds	r2, r3, #1
    6efe:	6022      	str	r2, [r4, #0]
    6f00:	7019      	strb	r1, [r3, #0]
    6f02:	e7cf      	b.n	6ea4 <_puts_r+0x30>
    6f04:	4622      	mov	r2, r4
    6f06:	4628      	mov	r0, r5
    6f08:	f000 f902 	bl	7110 <__swbuf_r>
    6f0c:	3001      	adds	r0, #1
    6f0e:	d1c9      	bne.n	6ea4 <_puts_r+0x30>
    6f10:	e7e9      	b.n	6ee6 <_puts_r+0x72>
    6f12:	6823      	ldr	r3, [r4, #0]
    6f14:	200a      	movs	r0, #10
    6f16:	1c5a      	adds	r2, r3, #1
    6f18:	6022      	str	r2, [r4, #0]
    6f1a:	7018      	strb	r0, [r3, #0]
    6f1c:	bd70      	pop	{r4, r5, r6, pc}
    6f1e:	bf00      	nop
    6f20:	00008be8 	.word	0x00008be8
    6f24:	00008c08 	.word	0x00008c08
    6f28:	00008bc8 	.word	0x00008bc8

00006f2c <puts>:
    6f2c:	4b02      	ldr	r3, [pc, #8]	; (6f38 <puts+0xc>)
    6f2e:	4601      	mov	r1, r0
    6f30:	6818      	ldr	r0, [r3, #0]
    6f32:	f7ff bf9f 	b.w	6e74 <_puts_r>
    6f36:	bf00      	nop
    6f38:	20000058 	.word	0x20000058

00006f3c <_sbrk_r>:
    6f3c:	b538      	push	{r3, r4, r5, lr}
    6f3e:	4c06      	ldr	r4, [pc, #24]	; (6f58 <_sbrk_r+0x1c>)
    6f40:	2300      	movs	r3, #0
    6f42:	4605      	mov	r5, r0
    6f44:	4608      	mov	r0, r1
    6f46:	6023      	str	r3, [r4, #0]
    6f48:	f7fb fc80 	bl	284c <_sbrk>
    6f4c:	1c43      	adds	r3, r0, #1
    6f4e:	d102      	bne.n	6f56 <_sbrk_r+0x1a>
    6f50:	6823      	ldr	r3, [r4, #0]
    6f52:	b103      	cbz	r3, 6f56 <_sbrk_r+0x1a>
    6f54:	602b      	str	r3, [r5, #0]
    6f56:	bd38      	pop	{r3, r4, r5, pc}
    6f58:	200034f0 	.word	0x200034f0

00006f5c <setbuf>:
    6f5c:	2900      	cmp	r1, #0
    6f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6f62:	bf0c      	ite	eq
    6f64:	2202      	moveq	r2, #2
    6f66:	2200      	movne	r2, #0
    6f68:	f000 b800 	b.w	6f6c <setvbuf>

00006f6c <setvbuf>:
    6f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6f70:	461d      	mov	r5, r3
    6f72:	4b51      	ldr	r3, [pc, #324]	; (70b8 <setvbuf+0x14c>)
    6f74:	681e      	ldr	r6, [r3, #0]
    6f76:	4604      	mov	r4, r0
    6f78:	460f      	mov	r7, r1
    6f7a:	4690      	mov	r8, r2
    6f7c:	b126      	cbz	r6, 6f88 <setvbuf+0x1c>
    6f7e:	69b3      	ldr	r3, [r6, #24]
    6f80:	b913      	cbnz	r3, 6f88 <setvbuf+0x1c>
    6f82:	4630      	mov	r0, r6
    6f84:	f000 fa76 	bl	7474 <__sinit>
    6f88:	4b4c      	ldr	r3, [pc, #304]	; (70bc <setvbuf+0x150>)
    6f8a:	429c      	cmp	r4, r3
    6f8c:	d152      	bne.n	7034 <setvbuf+0xc8>
    6f8e:	6874      	ldr	r4, [r6, #4]
    6f90:	f1b8 0f02 	cmp.w	r8, #2
    6f94:	d006      	beq.n	6fa4 <setvbuf+0x38>
    6f96:	f1b8 0f01 	cmp.w	r8, #1
    6f9a:	f200 8089 	bhi.w	70b0 <setvbuf+0x144>
    6f9e:	2d00      	cmp	r5, #0
    6fa0:	f2c0 8086 	blt.w	70b0 <setvbuf+0x144>
    6fa4:	4621      	mov	r1, r4
    6fa6:	4630      	mov	r0, r6
    6fa8:	f000 f9fa 	bl	73a0 <_fflush_r>
    6fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6fae:	b141      	cbz	r1, 6fc2 <setvbuf+0x56>
    6fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    6fb4:	4299      	cmp	r1, r3
    6fb6:	d002      	beq.n	6fbe <setvbuf+0x52>
    6fb8:	4630      	mov	r0, r6
    6fba:	f7ff fe97 	bl	6cec <_free_r>
    6fbe:	2300      	movs	r3, #0
    6fc0:	6363      	str	r3, [r4, #52]	; 0x34
    6fc2:	2300      	movs	r3, #0
    6fc4:	61a3      	str	r3, [r4, #24]
    6fc6:	6063      	str	r3, [r4, #4]
    6fc8:	89a3      	ldrh	r3, [r4, #12]
    6fca:	061b      	lsls	r3, r3, #24
    6fcc:	d503      	bpl.n	6fd6 <setvbuf+0x6a>
    6fce:	6921      	ldr	r1, [r4, #16]
    6fd0:	4630      	mov	r0, r6
    6fd2:	f7ff fe8b 	bl	6cec <_free_r>
    6fd6:	89a3      	ldrh	r3, [r4, #12]
    6fd8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    6fdc:	f023 0303 	bic.w	r3, r3, #3
    6fe0:	f1b8 0f02 	cmp.w	r8, #2
    6fe4:	81a3      	strh	r3, [r4, #12]
    6fe6:	d05d      	beq.n	70a4 <setvbuf+0x138>
    6fe8:	ab01      	add	r3, sp, #4
    6fea:	466a      	mov	r2, sp
    6fec:	4621      	mov	r1, r4
    6fee:	4630      	mov	r0, r6
    6ff0:	f000 faca 	bl	7588 <__swhatbuf_r>
    6ff4:	89a3      	ldrh	r3, [r4, #12]
    6ff6:	4318      	orrs	r0, r3
    6ff8:	81a0      	strh	r0, [r4, #12]
    6ffa:	bb2d      	cbnz	r5, 7048 <setvbuf+0xdc>
    6ffc:	9d00      	ldr	r5, [sp, #0]
    6ffe:	4628      	mov	r0, r5
    7000:	f7ff fe58 	bl	6cb4 <malloc>
    7004:	4607      	mov	r7, r0
    7006:	2800      	cmp	r0, #0
    7008:	d14e      	bne.n	70a8 <setvbuf+0x13c>
    700a:	f8dd 9000 	ldr.w	r9, [sp]
    700e:	45a9      	cmp	r9, r5
    7010:	d13c      	bne.n	708c <setvbuf+0x120>
    7012:	f04f 30ff 	mov.w	r0, #4294967295
    7016:	89a3      	ldrh	r3, [r4, #12]
    7018:	f043 0302 	orr.w	r3, r3, #2
    701c:	81a3      	strh	r3, [r4, #12]
    701e:	2300      	movs	r3, #0
    7020:	60a3      	str	r3, [r4, #8]
    7022:	f104 0347 	add.w	r3, r4, #71	; 0x47
    7026:	6023      	str	r3, [r4, #0]
    7028:	6123      	str	r3, [r4, #16]
    702a:	2301      	movs	r3, #1
    702c:	6163      	str	r3, [r4, #20]
    702e:	b003      	add	sp, #12
    7030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7034:	4b22      	ldr	r3, [pc, #136]	; (70c0 <setvbuf+0x154>)
    7036:	429c      	cmp	r4, r3
    7038:	d101      	bne.n	703e <setvbuf+0xd2>
    703a:	68b4      	ldr	r4, [r6, #8]
    703c:	e7a8      	b.n	6f90 <setvbuf+0x24>
    703e:	4b21      	ldr	r3, [pc, #132]	; (70c4 <setvbuf+0x158>)
    7040:	429c      	cmp	r4, r3
    7042:	bf08      	it	eq
    7044:	68f4      	ldreq	r4, [r6, #12]
    7046:	e7a3      	b.n	6f90 <setvbuf+0x24>
    7048:	2f00      	cmp	r7, #0
    704a:	d0d8      	beq.n	6ffe <setvbuf+0x92>
    704c:	69b3      	ldr	r3, [r6, #24]
    704e:	b913      	cbnz	r3, 7056 <setvbuf+0xea>
    7050:	4630      	mov	r0, r6
    7052:	f000 fa0f 	bl	7474 <__sinit>
    7056:	f1b8 0f01 	cmp.w	r8, #1
    705a:	bf08      	it	eq
    705c:	89a3      	ldrheq	r3, [r4, #12]
    705e:	6027      	str	r7, [r4, #0]
    7060:	bf04      	itt	eq
    7062:	f043 0301 	orreq.w	r3, r3, #1
    7066:	81a3      	strheq	r3, [r4, #12]
    7068:	89a3      	ldrh	r3, [r4, #12]
    706a:	6127      	str	r7, [r4, #16]
    706c:	f013 0008 	ands.w	r0, r3, #8
    7070:	6165      	str	r5, [r4, #20]
    7072:	d01b      	beq.n	70ac <setvbuf+0x140>
    7074:	f013 0001 	ands.w	r0, r3, #1
    7078:	bf18      	it	ne
    707a:	426d      	negne	r5, r5
    707c:	f04f 0300 	mov.w	r3, #0
    7080:	bf1d      	ittte	ne
    7082:	60a3      	strne	r3, [r4, #8]
    7084:	61a5      	strne	r5, [r4, #24]
    7086:	4618      	movne	r0, r3
    7088:	60a5      	streq	r5, [r4, #8]
    708a:	e7d0      	b.n	702e <setvbuf+0xc2>
    708c:	4648      	mov	r0, r9
    708e:	f7ff fe11 	bl	6cb4 <malloc>
    7092:	4607      	mov	r7, r0
    7094:	2800      	cmp	r0, #0
    7096:	d0bc      	beq.n	7012 <setvbuf+0xa6>
    7098:	89a3      	ldrh	r3, [r4, #12]
    709a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    709e:	81a3      	strh	r3, [r4, #12]
    70a0:	464d      	mov	r5, r9
    70a2:	e7d3      	b.n	704c <setvbuf+0xe0>
    70a4:	2000      	movs	r0, #0
    70a6:	e7b6      	b.n	7016 <setvbuf+0xaa>
    70a8:	46a9      	mov	r9, r5
    70aa:	e7f5      	b.n	7098 <setvbuf+0x12c>
    70ac:	60a0      	str	r0, [r4, #8]
    70ae:	e7be      	b.n	702e <setvbuf+0xc2>
    70b0:	f04f 30ff 	mov.w	r0, #4294967295
    70b4:	e7bb      	b.n	702e <setvbuf+0xc2>
    70b6:	bf00      	nop
    70b8:	20000058 	.word	0x20000058
    70bc:	00008be8 	.word	0x00008be8
    70c0:	00008c08 	.word	0x00008c08
    70c4:	00008bc8 	.word	0x00008bc8

000070c8 <siprintf>:
    70c8:	b40e      	push	{r1, r2, r3}
    70ca:	b500      	push	{lr}
    70cc:	b09c      	sub	sp, #112	; 0x70
    70ce:	f44f 7102 	mov.w	r1, #520	; 0x208
    70d2:	ab1d      	add	r3, sp, #116	; 0x74
    70d4:	f8ad 1014 	strh.w	r1, [sp, #20]
    70d8:	9002      	str	r0, [sp, #8]
    70da:	9006      	str	r0, [sp, #24]
    70dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    70e0:	480a      	ldr	r0, [pc, #40]	; (710c <siprintf+0x44>)
    70e2:	9104      	str	r1, [sp, #16]
    70e4:	9107      	str	r1, [sp, #28]
    70e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70ea:	f853 2b04 	ldr.w	r2, [r3], #4
    70ee:	f8ad 1016 	strh.w	r1, [sp, #22]
    70f2:	6800      	ldr	r0, [r0, #0]
    70f4:	9301      	str	r3, [sp, #4]
    70f6:	a902      	add	r1, sp, #8
    70f8:	f000 fb08 	bl	770c <_svfiprintf_r>
    70fc:	9b02      	ldr	r3, [sp, #8]
    70fe:	2200      	movs	r2, #0
    7100:	701a      	strb	r2, [r3, #0]
    7102:	b01c      	add	sp, #112	; 0x70
    7104:	f85d eb04 	ldr.w	lr, [sp], #4
    7108:	b003      	add	sp, #12
    710a:	4770      	bx	lr
    710c:	20000058 	.word	0x20000058

00007110 <__swbuf_r>:
    7110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7112:	460e      	mov	r6, r1
    7114:	4614      	mov	r4, r2
    7116:	4605      	mov	r5, r0
    7118:	b118      	cbz	r0, 7122 <__swbuf_r+0x12>
    711a:	6983      	ldr	r3, [r0, #24]
    711c:	b90b      	cbnz	r3, 7122 <__swbuf_r+0x12>
    711e:	f000 f9a9 	bl	7474 <__sinit>
    7122:	4b21      	ldr	r3, [pc, #132]	; (71a8 <__swbuf_r+0x98>)
    7124:	429c      	cmp	r4, r3
    7126:	d12a      	bne.n	717e <__swbuf_r+0x6e>
    7128:	686c      	ldr	r4, [r5, #4]
    712a:	69a3      	ldr	r3, [r4, #24]
    712c:	60a3      	str	r3, [r4, #8]
    712e:	89a3      	ldrh	r3, [r4, #12]
    7130:	071a      	lsls	r2, r3, #28
    7132:	d52e      	bpl.n	7192 <__swbuf_r+0x82>
    7134:	6923      	ldr	r3, [r4, #16]
    7136:	b363      	cbz	r3, 7192 <__swbuf_r+0x82>
    7138:	6923      	ldr	r3, [r4, #16]
    713a:	6820      	ldr	r0, [r4, #0]
    713c:	1ac0      	subs	r0, r0, r3
    713e:	6963      	ldr	r3, [r4, #20]
    7140:	b2f6      	uxtb	r6, r6
    7142:	4298      	cmp	r0, r3
    7144:	4637      	mov	r7, r6
    7146:	db04      	blt.n	7152 <__swbuf_r+0x42>
    7148:	4621      	mov	r1, r4
    714a:	4628      	mov	r0, r5
    714c:	f000 f928 	bl	73a0 <_fflush_r>
    7150:	bb28      	cbnz	r0, 719e <__swbuf_r+0x8e>
    7152:	68a3      	ldr	r3, [r4, #8]
    7154:	3b01      	subs	r3, #1
    7156:	60a3      	str	r3, [r4, #8]
    7158:	6823      	ldr	r3, [r4, #0]
    715a:	1c5a      	adds	r2, r3, #1
    715c:	6022      	str	r2, [r4, #0]
    715e:	701e      	strb	r6, [r3, #0]
    7160:	6963      	ldr	r3, [r4, #20]
    7162:	3001      	adds	r0, #1
    7164:	4298      	cmp	r0, r3
    7166:	d004      	beq.n	7172 <__swbuf_r+0x62>
    7168:	89a3      	ldrh	r3, [r4, #12]
    716a:	07db      	lsls	r3, r3, #31
    716c:	d519      	bpl.n	71a2 <__swbuf_r+0x92>
    716e:	2e0a      	cmp	r6, #10
    7170:	d117      	bne.n	71a2 <__swbuf_r+0x92>
    7172:	4621      	mov	r1, r4
    7174:	4628      	mov	r0, r5
    7176:	f000 f913 	bl	73a0 <_fflush_r>
    717a:	b190      	cbz	r0, 71a2 <__swbuf_r+0x92>
    717c:	e00f      	b.n	719e <__swbuf_r+0x8e>
    717e:	4b0b      	ldr	r3, [pc, #44]	; (71ac <__swbuf_r+0x9c>)
    7180:	429c      	cmp	r4, r3
    7182:	d101      	bne.n	7188 <__swbuf_r+0x78>
    7184:	68ac      	ldr	r4, [r5, #8]
    7186:	e7d0      	b.n	712a <__swbuf_r+0x1a>
    7188:	4b09      	ldr	r3, [pc, #36]	; (71b0 <__swbuf_r+0xa0>)
    718a:	429c      	cmp	r4, r3
    718c:	bf08      	it	eq
    718e:	68ec      	ldreq	r4, [r5, #12]
    7190:	e7cb      	b.n	712a <__swbuf_r+0x1a>
    7192:	4621      	mov	r1, r4
    7194:	4628      	mov	r0, r5
    7196:	f000 f80d 	bl	71b4 <__swsetup_r>
    719a:	2800      	cmp	r0, #0
    719c:	d0cc      	beq.n	7138 <__swbuf_r+0x28>
    719e:	f04f 37ff 	mov.w	r7, #4294967295
    71a2:	4638      	mov	r0, r7
    71a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71a6:	bf00      	nop
    71a8:	00008be8 	.word	0x00008be8
    71ac:	00008c08 	.word	0x00008c08
    71b0:	00008bc8 	.word	0x00008bc8

000071b4 <__swsetup_r>:
    71b4:	4b32      	ldr	r3, [pc, #200]	; (7280 <__swsetup_r+0xcc>)
    71b6:	b570      	push	{r4, r5, r6, lr}
    71b8:	681d      	ldr	r5, [r3, #0]
    71ba:	4606      	mov	r6, r0
    71bc:	460c      	mov	r4, r1
    71be:	b125      	cbz	r5, 71ca <__swsetup_r+0x16>
    71c0:	69ab      	ldr	r3, [r5, #24]
    71c2:	b913      	cbnz	r3, 71ca <__swsetup_r+0x16>
    71c4:	4628      	mov	r0, r5
    71c6:	f000 f955 	bl	7474 <__sinit>
    71ca:	4b2e      	ldr	r3, [pc, #184]	; (7284 <__swsetup_r+0xd0>)
    71cc:	429c      	cmp	r4, r3
    71ce:	d10f      	bne.n	71f0 <__swsetup_r+0x3c>
    71d0:	686c      	ldr	r4, [r5, #4]
    71d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    71d6:	b29a      	uxth	r2, r3
    71d8:	0715      	lsls	r5, r2, #28
    71da:	d42c      	bmi.n	7236 <__swsetup_r+0x82>
    71dc:	06d0      	lsls	r0, r2, #27
    71de:	d411      	bmi.n	7204 <__swsetup_r+0x50>
    71e0:	2209      	movs	r2, #9
    71e2:	6032      	str	r2, [r6, #0]
    71e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    71e8:	81a3      	strh	r3, [r4, #12]
    71ea:	f04f 30ff 	mov.w	r0, #4294967295
    71ee:	bd70      	pop	{r4, r5, r6, pc}
    71f0:	4b25      	ldr	r3, [pc, #148]	; (7288 <__swsetup_r+0xd4>)
    71f2:	429c      	cmp	r4, r3
    71f4:	d101      	bne.n	71fa <__swsetup_r+0x46>
    71f6:	68ac      	ldr	r4, [r5, #8]
    71f8:	e7eb      	b.n	71d2 <__swsetup_r+0x1e>
    71fa:	4b24      	ldr	r3, [pc, #144]	; (728c <__swsetup_r+0xd8>)
    71fc:	429c      	cmp	r4, r3
    71fe:	bf08      	it	eq
    7200:	68ec      	ldreq	r4, [r5, #12]
    7202:	e7e6      	b.n	71d2 <__swsetup_r+0x1e>
    7204:	0751      	lsls	r1, r2, #29
    7206:	d512      	bpl.n	722e <__swsetup_r+0x7a>
    7208:	6b61      	ldr	r1, [r4, #52]	; 0x34
    720a:	b141      	cbz	r1, 721e <__swsetup_r+0x6a>
    720c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    7210:	4299      	cmp	r1, r3
    7212:	d002      	beq.n	721a <__swsetup_r+0x66>
    7214:	4630      	mov	r0, r6
    7216:	f7ff fd69 	bl	6cec <_free_r>
    721a:	2300      	movs	r3, #0
    721c:	6363      	str	r3, [r4, #52]	; 0x34
    721e:	89a3      	ldrh	r3, [r4, #12]
    7220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    7224:	81a3      	strh	r3, [r4, #12]
    7226:	2300      	movs	r3, #0
    7228:	6063      	str	r3, [r4, #4]
    722a:	6923      	ldr	r3, [r4, #16]
    722c:	6023      	str	r3, [r4, #0]
    722e:	89a3      	ldrh	r3, [r4, #12]
    7230:	f043 0308 	orr.w	r3, r3, #8
    7234:	81a3      	strh	r3, [r4, #12]
    7236:	6923      	ldr	r3, [r4, #16]
    7238:	b94b      	cbnz	r3, 724e <__swsetup_r+0x9a>
    723a:	89a3      	ldrh	r3, [r4, #12]
    723c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    7240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    7244:	d003      	beq.n	724e <__swsetup_r+0x9a>
    7246:	4621      	mov	r1, r4
    7248:	4630      	mov	r0, r6
    724a:	f000 f9c1 	bl	75d0 <__smakebuf_r>
    724e:	89a2      	ldrh	r2, [r4, #12]
    7250:	f012 0301 	ands.w	r3, r2, #1
    7254:	d00c      	beq.n	7270 <__swsetup_r+0xbc>
    7256:	2300      	movs	r3, #0
    7258:	60a3      	str	r3, [r4, #8]
    725a:	6963      	ldr	r3, [r4, #20]
    725c:	425b      	negs	r3, r3
    725e:	61a3      	str	r3, [r4, #24]
    7260:	6923      	ldr	r3, [r4, #16]
    7262:	b953      	cbnz	r3, 727a <__swsetup_r+0xc6>
    7264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7268:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    726c:	d1ba      	bne.n	71e4 <__swsetup_r+0x30>
    726e:	bd70      	pop	{r4, r5, r6, pc}
    7270:	0792      	lsls	r2, r2, #30
    7272:	bf58      	it	pl
    7274:	6963      	ldrpl	r3, [r4, #20]
    7276:	60a3      	str	r3, [r4, #8]
    7278:	e7f2      	b.n	7260 <__swsetup_r+0xac>
    727a:	2000      	movs	r0, #0
    727c:	e7f7      	b.n	726e <__swsetup_r+0xba>
    727e:	bf00      	nop
    7280:	20000058 	.word	0x20000058
    7284:	00008be8 	.word	0x00008be8
    7288:	00008c08 	.word	0x00008c08
    728c:	00008bc8 	.word	0x00008bc8

00007290 <__sflush_r>:
    7290:	898a      	ldrh	r2, [r1, #12]
    7292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7296:	4605      	mov	r5, r0
    7298:	0710      	lsls	r0, r2, #28
    729a:	460c      	mov	r4, r1
    729c:	d45a      	bmi.n	7354 <__sflush_r+0xc4>
    729e:	684b      	ldr	r3, [r1, #4]
    72a0:	2b00      	cmp	r3, #0
    72a2:	dc05      	bgt.n	72b0 <__sflush_r+0x20>
    72a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    72a6:	2b00      	cmp	r3, #0
    72a8:	dc02      	bgt.n	72b0 <__sflush_r+0x20>
    72aa:	2000      	movs	r0, #0
    72ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    72b2:	2e00      	cmp	r6, #0
    72b4:	d0f9      	beq.n	72aa <__sflush_r+0x1a>
    72b6:	2300      	movs	r3, #0
    72b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    72bc:	682f      	ldr	r7, [r5, #0]
    72be:	602b      	str	r3, [r5, #0]
    72c0:	d033      	beq.n	732a <__sflush_r+0x9a>
    72c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    72c4:	89a3      	ldrh	r3, [r4, #12]
    72c6:	075a      	lsls	r2, r3, #29
    72c8:	d505      	bpl.n	72d6 <__sflush_r+0x46>
    72ca:	6863      	ldr	r3, [r4, #4]
    72cc:	1ac0      	subs	r0, r0, r3
    72ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
    72d0:	b10b      	cbz	r3, 72d6 <__sflush_r+0x46>
    72d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    72d4:	1ac0      	subs	r0, r0, r3
    72d6:	2300      	movs	r3, #0
    72d8:	4602      	mov	r2, r0
    72da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    72dc:	6a21      	ldr	r1, [r4, #32]
    72de:	4628      	mov	r0, r5
    72e0:	47b0      	blx	r6
    72e2:	1c43      	adds	r3, r0, #1
    72e4:	89a3      	ldrh	r3, [r4, #12]
    72e6:	d106      	bne.n	72f6 <__sflush_r+0x66>
    72e8:	6829      	ldr	r1, [r5, #0]
    72ea:	291d      	cmp	r1, #29
    72ec:	d84b      	bhi.n	7386 <__sflush_r+0xf6>
    72ee:	4a2b      	ldr	r2, [pc, #172]	; (739c <__sflush_r+0x10c>)
    72f0:	40ca      	lsrs	r2, r1
    72f2:	07d6      	lsls	r6, r2, #31
    72f4:	d547      	bpl.n	7386 <__sflush_r+0xf6>
    72f6:	2200      	movs	r2, #0
    72f8:	6062      	str	r2, [r4, #4]
    72fa:	04d9      	lsls	r1, r3, #19
    72fc:	6922      	ldr	r2, [r4, #16]
    72fe:	6022      	str	r2, [r4, #0]
    7300:	d504      	bpl.n	730c <__sflush_r+0x7c>
    7302:	1c42      	adds	r2, r0, #1
    7304:	d101      	bne.n	730a <__sflush_r+0x7a>
    7306:	682b      	ldr	r3, [r5, #0]
    7308:	b903      	cbnz	r3, 730c <__sflush_r+0x7c>
    730a:	6560      	str	r0, [r4, #84]	; 0x54
    730c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    730e:	602f      	str	r7, [r5, #0]
    7310:	2900      	cmp	r1, #0
    7312:	d0ca      	beq.n	72aa <__sflush_r+0x1a>
    7314:	f104 0344 	add.w	r3, r4, #68	; 0x44
    7318:	4299      	cmp	r1, r3
    731a:	d002      	beq.n	7322 <__sflush_r+0x92>
    731c:	4628      	mov	r0, r5
    731e:	f7ff fce5 	bl	6cec <_free_r>
    7322:	2000      	movs	r0, #0
    7324:	6360      	str	r0, [r4, #52]	; 0x34
    7326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    732a:	6a21      	ldr	r1, [r4, #32]
    732c:	2301      	movs	r3, #1
    732e:	4628      	mov	r0, r5
    7330:	47b0      	blx	r6
    7332:	1c41      	adds	r1, r0, #1
    7334:	d1c6      	bne.n	72c4 <__sflush_r+0x34>
    7336:	682b      	ldr	r3, [r5, #0]
    7338:	2b00      	cmp	r3, #0
    733a:	d0c3      	beq.n	72c4 <__sflush_r+0x34>
    733c:	2b1d      	cmp	r3, #29
    733e:	d001      	beq.n	7344 <__sflush_r+0xb4>
    7340:	2b16      	cmp	r3, #22
    7342:	d101      	bne.n	7348 <__sflush_r+0xb8>
    7344:	602f      	str	r7, [r5, #0]
    7346:	e7b0      	b.n	72aa <__sflush_r+0x1a>
    7348:	89a3      	ldrh	r3, [r4, #12]
    734a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    734e:	81a3      	strh	r3, [r4, #12]
    7350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7354:	690f      	ldr	r7, [r1, #16]
    7356:	2f00      	cmp	r7, #0
    7358:	d0a7      	beq.n	72aa <__sflush_r+0x1a>
    735a:	0793      	lsls	r3, r2, #30
    735c:	680e      	ldr	r6, [r1, #0]
    735e:	bf08      	it	eq
    7360:	694b      	ldreq	r3, [r1, #20]
    7362:	600f      	str	r7, [r1, #0]
    7364:	bf18      	it	ne
    7366:	2300      	movne	r3, #0
    7368:	eba6 0807 	sub.w	r8, r6, r7
    736c:	608b      	str	r3, [r1, #8]
    736e:	f1b8 0f00 	cmp.w	r8, #0
    7372:	dd9a      	ble.n	72aa <__sflush_r+0x1a>
    7374:	4643      	mov	r3, r8
    7376:	463a      	mov	r2, r7
    7378:	6a21      	ldr	r1, [r4, #32]
    737a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    737c:	4628      	mov	r0, r5
    737e:	47b0      	blx	r6
    7380:	2800      	cmp	r0, #0
    7382:	dc07      	bgt.n	7394 <__sflush_r+0x104>
    7384:	89a3      	ldrh	r3, [r4, #12]
    7386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    738a:	81a3      	strh	r3, [r4, #12]
    738c:	f04f 30ff 	mov.w	r0, #4294967295
    7390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7394:	4407      	add	r7, r0
    7396:	eba8 0800 	sub.w	r8, r8, r0
    739a:	e7e8      	b.n	736e <__sflush_r+0xde>
    739c:	20400001 	.word	0x20400001

000073a0 <_fflush_r>:
    73a0:	b538      	push	{r3, r4, r5, lr}
    73a2:	690b      	ldr	r3, [r1, #16]
    73a4:	4605      	mov	r5, r0
    73a6:	460c      	mov	r4, r1
    73a8:	b1db      	cbz	r3, 73e2 <_fflush_r+0x42>
    73aa:	b118      	cbz	r0, 73b4 <_fflush_r+0x14>
    73ac:	6983      	ldr	r3, [r0, #24]
    73ae:	b90b      	cbnz	r3, 73b4 <_fflush_r+0x14>
    73b0:	f000 f860 	bl	7474 <__sinit>
    73b4:	4b0c      	ldr	r3, [pc, #48]	; (73e8 <_fflush_r+0x48>)
    73b6:	429c      	cmp	r4, r3
    73b8:	d109      	bne.n	73ce <_fflush_r+0x2e>
    73ba:	686c      	ldr	r4, [r5, #4]
    73bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    73c0:	b17b      	cbz	r3, 73e2 <_fflush_r+0x42>
    73c2:	4621      	mov	r1, r4
    73c4:	4628      	mov	r0, r5
    73c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    73ca:	f7ff bf61 	b.w	7290 <__sflush_r>
    73ce:	4b07      	ldr	r3, [pc, #28]	; (73ec <_fflush_r+0x4c>)
    73d0:	429c      	cmp	r4, r3
    73d2:	d101      	bne.n	73d8 <_fflush_r+0x38>
    73d4:	68ac      	ldr	r4, [r5, #8]
    73d6:	e7f1      	b.n	73bc <_fflush_r+0x1c>
    73d8:	4b05      	ldr	r3, [pc, #20]	; (73f0 <_fflush_r+0x50>)
    73da:	429c      	cmp	r4, r3
    73dc:	bf08      	it	eq
    73de:	68ec      	ldreq	r4, [r5, #12]
    73e0:	e7ec      	b.n	73bc <_fflush_r+0x1c>
    73e2:	2000      	movs	r0, #0
    73e4:	bd38      	pop	{r3, r4, r5, pc}
    73e6:	bf00      	nop
    73e8:	00008be8 	.word	0x00008be8
    73ec:	00008c08 	.word	0x00008c08
    73f0:	00008bc8 	.word	0x00008bc8

000073f4 <_cleanup_r>:
    73f4:	4901      	ldr	r1, [pc, #4]	; (73fc <_cleanup_r+0x8>)
    73f6:	f000 b8a9 	b.w	754c <_fwalk_reent>
    73fa:	bf00      	nop
    73fc:	000073a1 	.word	0x000073a1

00007400 <std.isra.0>:
    7400:	2300      	movs	r3, #0
    7402:	b510      	push	{r4, lr}
    7404:	4604      	mov	r4, r0
    7406:	6003      	str	r3, [r0, #0]
    7408:	6043      	str	r3, [r0, #4]
    740a:	6083      	str	r3, [r0, #8]
    740c:	8181      	strh	r1, [r0, #12]
    740e:	6643      	str	r3, [r0, #100]	; 0x64
    7410:	81c2      	strh	r2, [r0, #14]
    7412:	6103      	str	r3, [r0, #16]
    7414:	6143      	str	r3, [r0, #20]
    7416:	6183      	str	r3, [r0, #24]
    7418:	4619      	mov	r1, r3
    741a:	2208      	movs	r2, #8
    741c:	305c      	adds	r0, #92	; 0x5c
    741e:	f7ff fc5c 	bl	6cda <memset>
    7422:	4b05      	ldr	r3, [pc, #20]	; (7438 <std.isra.0+0x38>)
    7424:	6263      	str	r3, [r4, #36]	; 0x24
    7426:	4b05      	ldr	r3, [pc, #20]	; (743c <std.isra.0+0x3c>)
    7428:	62a3      	str	r3, [r4, #40]	; 0x28
    742a:	4b05      	ldr	r3, [pc, #20]	; (7440 <std.isra.0+0x40>)
    742c:	62e3      	str	r3, [r4, #44]	; 0x2c
    742e:	4b05      	ldr	r3, [pc, #20]	; (7444 <std.isra.0+0x44>)
    7430:	6224      	str	r4, [r4, #32]
    7432:	6323      	str	r3, [r4, #48]	; 0x30
    7434:	bd10      	pop	{r4, pc}
    7436:	bf00      	nop
    7438:	00007e9d 	.word	0x00007e9d
    743c:	00007ebf 	.word	0x00007ebf
    7440:	00007ef7 	.word	0x00007ef7
    7444:	00007f1b 	.word	0x00007f1b

00007448 <__sfmoreglue>:
    7448:	b570      	push	{r4, r5, r6, lr}
    744a:	1e4a      	subs	r2, r1, #1
    744c:	2568      	movs	r5, #104	; 0x68
    744e:	4355      	muls	r5, r2
    7450:	460e      	mov	r6, r1
    7452:	f105 0174 	add.w	r1, r5, #116	; 0x74
    7456:	f7ff fc97 	bl	6d88 <_malloc_r>
    745a:	4604      	mov	r4, r0
    745c:	b140      	cbz	r0, 7470 <__sfmoreglue+0x28>
    745e:	2100      	movs	r1, #0
    7460:	e880 0042 	stmia.w	r0, {r1, r6}
    7464:	300c      	adds	r0, #12
    7466:	60a0      	str	r0, [r4, #8]
    7468:	f105 0268 	add.w	r2, r5, #104	; 0x68
    746c:	f7ff fc35 	bl	6cda <memset>
    7470:	4620      	mov	r0, r4
    7472:	bd70      	pop	{r4, r5, r6, pc}

00007474 <__sinit>:
    7474:	6983      	ldr	r3, [r0, #24]
    7476:	b510      	push	{r4, lr}
    7478:	4604      	mov	r4, r0
    747a:	bb33      	cbnz	r3, 74ca <__sinit+0x56>
    747c:	6483      	str	r3, [r0, #72]	; 0x48
    747e:	64c3      	str	r3, [r0, #76]	; 0x4c
    7480:	6503      	str	r3, [r0, #80]	; 0x50
    7482:	4b12      	ldr	r3, [pc, #72]	; (74cc <__sinit+0x58>)
    7484:	4a12      	ldr	r2, [pc, #72]	; (74d0 <__sinit+0x5c>)
    7486:	681b      	ldr	r3, [r3, #0]
    7488:	6282      	str	r2, [r0, #40]	; 0x28
    748a:	4298      	cmp	r0, r3
    748c:	bf04      	itt	eq
    748e:	2301      	moveq	r3, #1
    7490:	6183      	streq	r3, [r0, #24]
    7492:	f000 f81f 	bl	74d4 <__sfp>
    7496:	6060      	str	r0, [r4, #4]
    7498:	4620      	mov	r0, r4
    749a:	f000 f81b 	bl	74d4 <__sfp>
    749e:	60a0      	str	r0, [r4, #8]
    74a0:	4620      	mov	r0, r4
    74a2:	f000 f817 	bl	74d4 <__sfp>
    74a6:	2200      	movs	r2, #0
    74a8:	60e0      	str	r0, [r4, #12]
    74aa:	2104      	movs	r1, #4
    74ac:	6860      	ldr	r0, [r4, #4]
    74ae:	f7ff ffa7 	bl	7400 <std.isra.0>
    74b2:	2201      	movs	r2, #1
    74b4:	2109      	movs	r1, #9
    74b6:	68a0      	ldr	r0, [r4, #8]
    74b8:	f7ff ffa2 	bl	7400 <std.isra.0>
    74bc:	2202      	movs	r2, #2
    74be:	2112      	movs	r1, #18
    74c0:	68e0      	ldr	r0, [r4, #12]
    74c2:	f7ff ff9d 	bl	7400 <std.isra.0>
    74c6:	2301      	movs	r3, #1
    74c8:	61a3      	str	r3, [r4, #24]
    74ca:	bd10      	pop	{r4, pc}
    74cc:	00008bc4 	.word	0x00008bc4
    74d0:	000073f5 	.word	0x000073f5

000074d4 <__sfp>:
    74d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74d6:	4b1c      	ldr	r3, [pc, #112]	; (7548 <__sfp+0x74>)
    74d8:	681e      	ldr	r6, [r3, #0]
    74da:	69b3      	ldr	r3, [r6, #24]
    74dc:	4607      	mov	r7, r0
    74de:	b913      	cbnz	r3, 74e6 <__sfp+0x12>
    74e0:	4630      	mov	r0, r6
    74e2:	f7ff ffc7 	bl	7474 <__sinit>
    74e6:	3648      	adds	r6, #72	; 0x48
    74e8:	68b4      	ldr	r4, [r6, #8]
    74ea:	6873      	ldr	r3, [r6, #4]
    74ec:	3b01      	subs	r3, #1
    74ee:	d503      	bpl.n	74f8 <__sfp+0x24>
    74f0:	6833      	ldr	r3, [r6, #0]
    74f2:	b133      	cbz	r3, 7502 <__sfp+0x2e>
    74f4:	6836      	ldr	r6, [r6, #0]
    74f6:	e7f7      	b.n	74e8 <__sfp+0x14>
    74f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    74fc:	b16d      	cbz	r5, 751a <__sfp+0x46>
    74fe:	3468      	adds	r4, #104	; 0x68
    7500:	e7f4      	b.n	74ec <__sfp+0x18>
    7502:	2104      	movs	r1, #4
    7504:	4638      	mov	r0, r7
    7506:	f7ff ff9f 	bl	7448 <__sfmoreglue>
    750a:	6030      	str	r0, [r6, #0]
    750c:	2800      	cmp	r0, #0
    750e:	d1f1      	bne.n	74f4 <__sfp+0x20>
    7510:	230c      	movs	r3, #12
    7512:	603b      	str	r3, [r7, #0]
    7514:	4604      	mov	r4, r0
    7516:	4620      	mov	r0, r4
    7518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    751a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    751e:	81e3      	strh	r3, [r4, #14]
    7520:	2301      	movs	r3, #1
    7522:	81a3      	strh	r3, [r4, #12]
    7524:	6665      	str	r5, [r4, #100]	; 0x64
    7526:	6025      	str	r5, [r4, #0]
    7528:	60a5      	str	r5, [r4, #8]
    752a:	6065      	str	r5, [r4, #4]
    752c:	6125      	str	r5, [r4, #16]
    752e:	6165      	str	r5, [r4, #20]
    7530:	61a5      	str	r5, [r4, #24]
    7532:	2208      	movs	r2, #8
    7534:	4629      	mov	r1, r5
    7536:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    753a:	f7ff fbce 	bl	6cda <memset>
    753e:	6365      	str	r5, [r4, #52]	; 0x34
    7540:	63a5      	str	r5, [r4, #56]	; 0x38
    7542:	64a5      	str	r5, [r4, #72]	; 0x48
    7544:	64e5      	str	r5, [r4, #76]	; 0x4c
    7546:	e7e6      	b.n	7516 <__sfp+0x42>
    7548:	00008bc4 	.word	0x00008bc4

0000754c <_fwalk_reent>:
    754c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7550:	4680      	mov	r8, r0
    7552:	4689      	mov	r9, r1
    7554:	f100 0448 	add.w	r4, r0, #72	; 0x48
    7558:	2600      	movs	r6, #0
    755a:	b914      	cbnz	r4, 7562 <_fwalk_reent+0x16>
    755c:	4630      	mov	r0, r6
    755e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7562:	68a5      	ldr	r5, [r4, #8]
    7564:	6867      	ldr	r7, [r4, #4]
    7566:	3f01      	subs	r7, #1
    7568:	d501      	bpl.n	756e <_fwalk_reent+0x22>
    756a:	6824      	ldr	r4, [r4, #0]
    756c:	e7f5      	b.n	755a <_fwalk_reent+0xe>
    756e:	89ab      	ldrh	r3, [r5, #12]
    7570:	2b01      	cmp	r3, #1
    7572:	d907      	bls.n	7584 <_fwalk_reent+0x38>
    7574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    7578:	3301      	adds	r3, #1
    757a:	d003      	beq.n	7584 <_fwalk_reent+0x38>
    757c:	4629      	mov	r1, r5
    757e:	4640      	mov	r0, r8
    7580:	47c8      	blx	r9
    7582:	4306      	orrs	r6, r0
    7584:	3568      	adds	r5, #104	; 0x68
    7586:	e7ee      	b.n	7566 <_fwalk_reent+0x1a>

00007588 <__swhatbuf_r>:
    7588:	b570      	push	{r4, r5, r6, lr}
    758a:	460e      	mov	r6, r1
    758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7590:	2900      	cmp	r1, #0
    7592:	b090      	sub	sp, #64	; 0x40
    7594:	4614      	mov	r4, r2
    7596:	461d      	mov	r5, r3
    7598:	da07      	bge.n	75aa <__swhatbuf_r+0x22>
    759a:	2300      	movs	r3, #0
    759c:	602b      	str	r3, [r5, #0]
    759e:	89b3      	ldrh	r3, [r6, #12]
    75a0:	061a      	lsls	r2, r3, #24
    75a2:	d410      	bmi.n	75c6 <__swhatbuf_r+0x3e>
    75a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    75a8:	e00e      	b.n	75c8 <__swhatbuf_r+0x40>
    75aa:	aa01      	add	r2, sp, #4
    75ac:	f000 fcdc 	bl	7f68 <_fstat_r>
    75b0:	2800      	cmp	r0, #0
    75b2:	dbf2      	blt.n	759a <__swhatbuf_r+0x12>
    75b4:	9a02      	ldr	r2, [sp, #8]
    75b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    75ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    75be:	425a      	negs	r2, r3
    75c0:	415a      	adcs	r2, r3
    75c2:	602a      	str	r2, [r5, #0]
    75c4:	e7ee      	b.n	75a4 <__swhatbuf_r+0x1c>
    75c6:	2340      	movs	r3, #64	; 0x40
    75c8:	2000      	movs	r0, #0
    75ca:	6023      	str	r3, [r4, #0]
    75cc:	b010      	add	sp, #64	; 0x40
    75ce:	bd70      	pop	{r4, r5, r6, pc}

000075d0 <__smakebuf_r>:
    75d0:	898b      	ldrh	r3, [r1, #12]
    75d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    75d4:	079d      	lsls	r5, r3, #30
    75d6:	4606      	mov	r6, r0
    75d8:	460c      	mov	r4, r1
    75da:	d507      	bpl.n	75ec <__smakebuf_r+0x1c>
    75dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
    75e0:	6023      	str	r3, [r4, #0]
    75e2:	6123      	str	r3, [r4, #16]
    75e4:	2301      	movs	r3, #1
    75e6:	6163      	str	r3, [r4, #20]
    75e8:	b002      	add	sp, #8
    75ea:	bd70      	pop	{r4, r5, r6, pc}
    75ec:	ab01      	add	r3, sp, #4
    75ee:	466a      	mov	r2, sp
    75f0:	f7ff ffca 	bl	7588 <__swhatbuf_r>
    75f4:	9900      	ldr	r1, [sp, #0]
    75f6:	4605      	mov	r5, r0
    75f8:	4630      	mov	r0, r6
    75fa:	f7ff fbc5 	bl	6d88 <_malloc_r>
    75fe:	b948      	cbnz	r0, 7614 <__smakebuf_r+0x44>
    7600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7604:	059a      	lsls	r2, r3, #22
    7606:	d4ef      	bmi.n	75e8 <__smakebuf_r+0x18>
    7608:	f023 0303 	bic.w	r3, r3, #3
    760c:	f043 0302 	orr.w	r3, r3, #2
    7610:	81a3      	strh	r3, [r4, #12]
    7612:	e7e3      	b.n	75dc <__smakebuf_r+0xc>
    7614:	4b0d      	ldr	r3, [pc, #52]	; (764c <__smakebuf_r+0x7c>)
    7616:	62b3      	str	r3, [r6, #40]	; 0x28
    7618:	89a3      	ldrh	r3, [r4, #12]
    761a:	6020      	str	r0, [r4, #0]
    761c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7620:	81a3      	strh	r3, [r4, #12]
    7622:	9b00      	ldr	r3, [sp, #0]
    7624:	6163      	str	r3, [r4, #20]
    7626:	9b01      	ldr	r3, [sp, #4]
    7628:	6120      	str	r0, [r4, #16]
    762a:	b15b      	cbz	r3, 7644 <__smakebuf_r+0x74>
    762c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7630:	4630      	mov	r0, r6
    7632:	f000 fcab 	bl	7f8c <_isatty_r>
    7636:	b128      	cbz	r0, 7644 <__smakebuf_r+0x74>
    7638:	89a3      	ldrh	r3, [r4, #12]
    763a:	f023 0303 	bic.w	r3, r3, #3
    763e:	f043 0301 	orr.w	r3, r3, #1
    7642:	81a3      	strh	r3, [r4, #12]
    7644:	89a3      	ldrh	r3, [r4, #12]
    7646:	431d      	orrs	r5, r3
    7648:	81a5      	strh	r5, [r4, #12]
    764a:	e7cd      	b.n	75e8 <__smakebuf_r+0x18>
    764c:	000073f5 	.word	0x000073f5

00007650 <__malloc_lock>:
    7650:	4770      	bx	lr

00007652 <__malloc_unlock>:
    7652:	4770      	bx	lr

00007654 <__ssputs_r>:
    7654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7658:	688e      	ldr	r6, [r1, #8]
    765a:	429e      	cmp	r6, r3
    765c:	4682      	mov	sl, r0
    765e:	460c      	mov	r4, r1
    7660:	4691      	mov	r9, r2
    7662:	4698      	mov	r8, r3
    7664:	d835      	bhi.n	76d2 <__ssputs_r+0x7e>
    7666:	898a      	ldrh	r2, [r1, #12]
    7668:	f412 6f90 	tst.w	r2, #1152	; 0x480
    766c:	d031      	beq.n	76d2 <__ssputs_r+0x7e>
    766e:	6825      	ldr	r5, [r4, #0]
    7670:	6909      	ldr	r1, [r1, #16]
    7672:	1a6f      	subs	r7, r5, r1
    7674:	6965      	ldr	r5, [r4, #20]
    7676:	2302      	movs	r3, #2
    7678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    767c:	fb95 f5f3 	sdiv	r5, r5, r3
    7680:	f108 0301 	add.w	r3, r8, #1
    7684:	443b      	add	r3, r7
    7686:	429d      	cmp	r5, r3
    7688:	bf38      	it	cc
    768a:	461d      	movcc	r5, r3
    768c:	0553      	lsls	r3, r2, #21
    768e:	d531      	bpl.n	76f4 <__ssputs_r+0xa0>
    7690:	4629      	mov	r1, r5
    7692:	f7ff fb79 	bl	6d88 <_malloc_r>
    7696:	4606      	mov	r6, r0
    7698:	b950      	cbnz	r0, 76b0 <__ssputs_r+0x5c>
    769a:	230c      	movs	r3, #12
    769c:	f8ca 3000 	str.w	r3, [sl]
    76a0:	89a3      	ldrh	r3, [r4, #12]
    76a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    76a6:	81a3      	strh	r3, [r4, #12]
    76a8:	f04f 30ff 	mov.w	r0, #4294967295
    76ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76b0:	463a      	mov	r2, r7
    76b2:	6921      	ldr	r1, [r4, #16]
    76b4:	f7ff fb06 	bl	6cc4 <memcpy>
    76b8:	89a3      	ldrh	r3, [r4, #12]
    76ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    76be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    76c2:	81a3      	strh	r3, [r4, #12]
    76c4:	6126      	str	r6, [r4, #16]
    76c6:	6165      	str	r5, [r4, #20]
    76c8:	443e      	add	r6, r7
    76ca:	1bed      	subs	r5, r5, r7
    76cc:	6026      	str	r6, [r4, #0]
    76ce:	60a5      	str	r5, [r4, #8]
    76d0:	4646      	mov	r6, r8
    76d2:	4546      	cmp	r6, r8
    76d4:	bf28      	it	cs
    76d6:	4646      	movcs	r6, r8
    76d8:	4632      	mov	r2, r6
    76da:	4649      	mov	r1, r9
    76dc:	6820      	ldr	r0, [r4, #0]
    76de:	f000 fcc7 	bl	8070 <memmove>
    76e2:	68a3      	ldr	r3, [r4, #8]
    76e4:	1b9b      	subs	r3, r3, r6
    76e6:	60a3      	str	r3, [r4, #8]
    76e8:	6823      	ldr	r3, [r4, #0]
    76ea:	441e      	add	r6, r3
    76ec:	6026      	str	r6, [r4, #0]
    76ee:	2000      	movs	r0, #0
    76f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76f4:	462a      	mov	r2, r5
    76f6:	f000 fcd5 	bl	80a4 <_realloc_r>
    76fa:	4606      	mov	r6, r0
    76fc:	2800      	cmp	r0, #0
    76fe:	d1e1      	bne.n	76c4 <__ssputs_r+0x70>
    7700:	6921      	ldr	r1, [r4, #16]
    7702:	4650      	mov	r0, sl
    7704:	f7ff faf2 	bl	6cec <_free_r>
    7708:	e7c7      	b.n	769a <__ssputs_r+0x46>
	...

0000770c <_svfiprintf_r>:
    770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7710:	b09d      	sub	sp, #116	; 0x74
    7712:	4680      	mov	r8, r0
    7714:	9303      	str	r3, [sp, #12]
    7716:	898b      	ldrh	r3, [r1, #12]
    7718:	061c      	lsls	r4, r3, #24
    771a:	460d      	mov	r5, r1
    771c:	4616      	mov	r6, r2
    771e:	d50f      	bpl.n	7740 <_svfiprintf_r+0x34>
    7720:	690b      	ldr	r3, [r1, #16]
    7722:	b96b      	cbnz	r3, 7740 <_svfiprintf_r+0x34>
    7724:	2140      	movs	r1, #64	; 0x40
    7726:	f7ff fb2f 	bl	6d88 <_malloc_r>
    772a:	6028      	str	r0, [r5, #0]
    772c:	6128      	str	r0, [r5, #16]
    772e:	b928      	cbnz	r0, 773c <_svfiprintf_r+0x30>
    7730:	230c      	movs	r3, #12
    7732:	f8c8 3000 	str.w	r3, [r8]
    7736:	f04f 30ff 	mov.w	r0, #4294967295
    773a:	e0c5      	b.n	78c8 <_svfiprintf_r+0x1bc>
    773c:	2340      	movs	r3, #64	; 0x40
    773e:	616b      	str	r3, [r5, #20]
    7740:	2300      	movs	r3, #0
    7742:	9309      	str	r3, [sp, #36]	; 0x24
    7744:	2320      	movs	r3, #32
    7746:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    774a:	2330      	movs	r3, #48	; 0x30
    774c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    7750:	f04f 0b01 	mov.w	fp, #1
    7754:	4637      	mov	r7, r6
    7756:	463c      	mov	r4, r7
    7758:	f814 3b01 	ldrb.w	r3, [r4], #1
    775c:	2b00      	cmp	r3, #0
    775e:	d13c      	bne.n	77da <_svfiprintf_r+0xce>
    7760:	ebb7 0a06 	subs.w	sl, r7, r6
    7764:	d00b      	beq.n	777e <_svfiprintf_r+0x72>
    7766:	4653      	mov	r3, sl
    7768:	4632      	mov	r2, r6
    776a:	4629      	mov	r1, r5
    776c:	4640      	mov	r0, r8
    776e:	f7ff ff71 	bl	7654 <__ssputs_r>
    7772:	3001      	adds	r0, #1
    7774:	f000 80a3 	beq.w	78be <_svfiprintf_r+0x1b2>
    7778:	9b09      	ldr	r3, [sp, #36]	; 0x24
    777a:	4453      	add	r3, sl
    777c:	9309      	str	r3, [sp, #36]	; 0x24
    777e:	783b      	ldrb	r3, [r7, #0]
    7780:	2b00      	cmp	r3, #0
    7782:	f000 809c 	beq.w	78be <_svfiprintf_r+0x1b2>
    7786:	2300      	movs	r3, #0
    7788:	f04f 32ff 	mov.w	r2, #4294967295
    778c:	9304      	str	r3, [sp, #16]
    778e:	9307      	str	r3, [sp, #28]
    7790:	9205      	str	r2, [sp, #20]
    7792:	9306      	str	r3, [sp, #24]
    7794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    7798:	931a      	str	r3, [sp, #104]	; 0x68
    779a:	2205      	movs	r2, #5
    779c:	7821      	ldrb	r1, [r4, #0]
    779e:	4850      	ldr	r0, [pc, #320]	; (78e0 <_svfiprintf_r+0x1d4>)
    77a0:	f000 fc16 	bl	7fd0 <memchr>
    77a4:	1c67      	adds	r7, r4, #1
    77a6:	9b04      	ldr	r3, [sp, #16]
    77a8:	b9d8      	cbnz	r0, 77e2 <_svfiprintf_r+0xd6>
    77aa:	06d9      	lsls	r1, r3, #27
    77ac:	bf44      	itt	mi
    77ae:	2220      	movmi	r2, #32
    77b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    77b4:	071a      	lsls	r2, r3, #28
    77b6:	bf44      	itt	mi
    77b8:	222b      	movmi	r2, #43	; 0x2b
    77ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    77be:	7822      	ldrb	r2, [r4, #0]
    77c0:	2a2a      	cmp	r2, #42	; 0x2a
    77c2:	d016      	beq.n	77f2 <_svfiprintf_r+0xe6>
    77c4:	9a07      	ldr	r2, [sp, #28]
    77c6:	2100      	movs	r1, #0
    77c8:	200a      	movs	r0, #10
    77ca:	4627      	mov	r7, r4
    77cc:	3401      	adds	r4, #1
    77ce:	783b      	ldrb	r3, [r7, #0]
    77d0:	3b30      	subs	r3, #48	; 0x30
    77d2:	2b09      	cmp	r3, #9
    77d4:	d951      	bls.n	787a <_svfiprintf_r+0x16e>
    77d6:	b1c9      	cbz	r1, 780c <_svfiprintf_r+0x100>
    77d8:	e011      	b.n	77fe <_svfiprintf_r+0xf2>
    77da:	2b25      	cmp	r3, #37	; 0x25
    77dc:	d0c0      	beq.n	7760 <_svfiprintf_r+0x54>
    77de:	4627      	mov	r7, r4
    77e0:	e7b9      	b.n	7756 <_svfiprintf_r+0x4a>
    77e2:	4a3f      	ldr	r2, [pc, #252]	; (78e0 <_svfiprintf_r+0x1d4>)
    77e4:	1a80      	subs	r0, r0, r2
    77e6:	fa0b f000 	lsl.w	r0, fp, r0
    77ea:	4318      	orrs	r0, r3
    77ec:	9004      	str	r0, [sp, #16]
    77ee:	463c      	mov	r4, r7
    77f0:	e7d3      	b.n	779a <_svfiprintf_r+0x8e>
    77f2:	9a03      	ldr	r2, [sp, #12]
    77f4:	1d11      	adds	r1, r2, #4
    77f6:	6812      	ldr	r2, [r2, #0]
    77f8:	9103      	str	r1, [sp, #12]
    77fa:	2a00      	cmp	r2, #0
    77fc:	db01      	blt.n	7802 <_svfiprintf_r+0xf6>
    77fe:	9207      	str	r2, [sp, #28]
    7800:	e004      	b.n	780c <_svfiprintf_r+0x100>
    7802:	4252      	negs	r2, r2
    7804:	f043 0302 	orr.w	r3, r3, #2
    7808:	9207      	str	r2, [sp, #28]
    780a:	9304      	str	r3, [sp, #16]
    780c:	783b      	ldrb	r3, [r7, #0]
    780e:	2b2e      	cmp	r3, #46	; 0x2e
    7810:	d10e      	bne.n	7830 <_svfiprintf_r+0x124>
    7812:	787b      	ldrb	r3, [r7, #1]
    7814:	2b2a      	cmp	r3, #42	; 0x2a
    7816:	f107 0101 	add.w	r1, r7, #1
    781a:	d132      	bne.n	7882 <_svfiprintf_r+0x176>
    781c:	9b03      	ldr	r3, [sp, #12]
    781e:	1d1a      	adds	r2, r3, #4
    7820:	681b      	ldr	r3, [r3, #0]
    7822:	9203      	str	r2, [sp, #12]
    7824:	2b00      	cmp	r3, #0
    7826:	bfb8      	it	lt
    7828:	f04f 33ff 	movlt.w	r3, #4294967295
    782c:	3702      	adds	r7, #2
    782e:	9305      	str	r3, [sp, #20]
    7830:	4c2c      	ldr	r4, [pc, #176]	; (78e4 <_svfiprintf_r+0x1d8>)
    7832:	7839      	ldrb	r1, [r7, #0]
    7834:	2203      	movs	r2, #3
    7836:	4620      	mov	r0, r4
    7838:	f000 fbca 	bl	7fd0 <memchr>
    783c:	b138      	cbz	r0, 784e <_svfiprintf_r+0x142>
    783e:	2340      	movs	r3, #64	; 0x40
    7840:	1b00      	subs	r0, r0, r4
    7842:	fa03 f000 	lsl.w	r0, r3, r0
    7846:	9b04      	ldr	r3, [sp, #16]
    7848:	4303      	orrs	r3, r0
    784a:	9304      	str	r3, [sp, #16]
    784c:	3701      	adds	r7, #1
    784e:	7839      	ldrb	r1, [r7, #0]
    7850:	4825      	ldr	r0, [pc, #148]	; (78e8 <_svfiprintf_r+0x1dc>)
    7852:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    7856:	2206      	movs	r2, #6
    7858:	1c7e      	adds	r6, r7, #1
    785a:	f000 fbb9 	bl	7fd0 <memchr>
    785e:	2800      	cmp	r0, #0
    7860:	d035      	beq.n	78ce <_svfiprintf_r+0x1c2>
    7862:	4b22      	ldr	r3, [pc, #136]	; (78ec <_svfiprintf_r+0x1e0>)
    7864:	b9fb      	cbnz	r3, 78a6 <_svfiprintf_r+0x19a>
    7866:	9b03      	ldr	r3, [sp, #12]
    7868:	3307      	adds	r3, #7
    786a:	f023 0307 	bic.w	r3, r3, #7
    786e:	3308      	adds	r3, #8
    7870:	9303      	str	r3, [sp, #12]
    7872:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7874:	444b      	add	r3, r9
    7876:	9309      	str	r3, [sp, #36]	; 0x24
    7878:	e76c      	b.n	7754 <_svfiprintf_r+0x48>
    787a:	fb00 3202 	mla	r2, r0, r2, r3
    787e:	2101      	movs	r1, #1
    7880:	e7a3      	b.n	77ca <_svfiprintf_r+0xbe>
    7882:	2300      	movs	r3, #0
    7884:	9305      	str	r3, [sp, #20]
    7886:	4618      	mov	r0, r3
    7888:	240a      	movs	r4, #10
    788a:	460f      	mov	r7, r1
    788c:	3101      	adds	r1, #1
    788e:	783a      	ldrb	r2, [r7, #0]
    7890:	3a30      	subs	r2, #48	; 0x30
    7892:	2a09      	cmp	r2, #9
    7894:	d903      	bls.n	789e <_svfiprintf_r+0x192>
    7896:	2b00      	cmp	r3, #0
    7898:	d0ca      	beq.n	7830 <_svfiprintf_r+0x124>
    789a:	9005      	str	r0, [sp, #20]
    789c:	e7c8      	b.n	7830 <_svfiprintf_r+0x124>
    789e:	fb04 2000 	mla	r0, r4, r0, r2
    78a2:	2301      	movs	r3, #1
    78a4:	e7f1      	b.n	788a <_svfiprintf_r+0x17e>
    78a6:	ab03      	add	r3, sp, #12
    78a8:	9300      	str	r3, [sp, #0]
    78aa:	462a      	mov	r2, r5
    78ac:	4b10      	ldr	r3, [pc, #64]	; (78f0 <_svfiprintf_r+0x1e4>)
    78ae:	a904      	add	r1, sp, #16
    78b0:	4640      	mov	r0, r8
    78b2:	f3af 8000 	nop.w
    78b6:	f1b0 3fff 	cmp.w	r0, #4294967295
    78ba:	4681      	mov	r9, r0
    78bc:	d1d9      	bne.n	7872 <_svfiprintf_r+0x166>
    78be:	89ab      	ldrh	r3, [r5, #12]
    78c0:	065b      	lsls	r3, r3, #25
    78c2:	f53f af38 	bmi.w	7736 <_svfiprintf_r+0x2a>
    78c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    78c8:	b01d      	add	sp, #116	; 0x74
    78ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78ce:	ab03      	add	r3, sp, #12
    78d0:	9300      	str	r3, [sp, #0]
    78d2:	462a      	mov	r2, r5
    78d4:	4b06      	ldr	r3, [pc, #24]	; (78f0 <_svfiprintf_r+0x1e4>)
    78d6:	a904      	add	r1, sp, #16
    78d8:	4640      	mov	r0, r8
    78da:	f000 f9bf 	bl	7c5c <_printf_i>
    78de:	e7ea      	b.n	78b6 <_svfiprintf_r+0x1aa>
    78e0:	00008c28 	.word	0x00008c28
    78e4:	00008c2e 	.word	0x00008c2e
    78e8:	00008c32 	.word	0x00008c32
    78ec:	00000000 	.word	0x00000000
    78f0:	00007655 	.word	0x00007655

000078f4 <__sfputc_r>:
    78f4:	6893      	ldr	r3, [r2, #8]
    78f6:	3b01      	subs	r3, #1
    78f8:	2b00      	cmp	r3, #0
    78fa:	b410      	push	{r4}
    78fc:	6093      	str	r3, [r2, #8]
    78fe:	da08      	bge.n	7912 <__sfputc_r+0x1e>
    7900:	6994      	ldr	r4, [r2, #24]
    7902:	42a3      	cmp	r3, r4
    7904:	db02      	blt.n	790c <__sfputc_r+0x18>
    7906:	b2cb      	uxtb	r3, r1
    7908:	2b0a      	cmp	r3, #10
    790a:	d102      	bne.n	7912 <__sfputc_r+0x1e>
    790c:	bc10      	pop	{r4}
    790e:	f7ff bbff 	b.w	7110 <__swbuf_r>
    7912:	6813      	ldr	r3, [r2, #0]
    7914:	1c58      	adds	r0, r3, #1
    7916:	6010      	str	r0, [r2, #0]
    7918:	7019      	strb	r1, [r3, #0]
    791a:	b2c8      	uxtb	r0, r1
    791c:	bc10      	pop	{r4}
    791e:	4770      	bx	lr

00007920 <__sfputs_r>:
    7920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7922:	4606      	mov	r6, r0
    7924:	460f      	mov	r7, r1
    7926:	4614      	mov	r4, r2
    7928:	18d5      	adds	r5, r2, r3
    792a:	42ac      	cmp	r4, r5
    792c:	d101      	bne.n	7932 <__sfputs_r+0x12>
    792e:	2000      	movs	r0, #0
    7930:	e007      	b.n	7942 <__sfputs_r+0x22>
    7932:	463a      	mov	r2, r7
    7934:	f814 1b01 	ldrb.w	r1, [r4], #1
    7938:	4630      	mov	r0, r6
    793a:	f7ff ffdb 	bl	78f4 <__sfputc_r>
    793e:	1c43      	adds	r3, r0, #1
    7940:	d1f3      	bne.n	792a <__sfputs_r+0xa>
    7942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007944 <_vfiprintf_r>:
    7944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7948:	b09d      	sub	sp, #116	; 0x74
    794a:	460c      	mov	r4, r1
    794c:	4617      	mov	r7, r2
    794e:	9303      	str	r3, [sp, #12]
    7950:	4606      	mov	r6, r0
    7952:	b118      	cbz	r0, 795c <_vfiprintf_r+0x18>
    7954:	6983      	ldr	r3, [r0, #24]
    7956:	b90b      	cbnz	r3, 795c <_vfiprintf_r+0x18>
    7958:	f7ff fd8c 	bl	7474 <__sinit>
    795c:	4b7c      	ldr	r3, [pc, #496]	; (7b50 <_vfiprintf_r+0x20c>)
    795e:	429c      	cmp	r4, r3
    7960:	d157      	bne.n	7a12 <_vfiprintf_r+0xce>
    7962:	6874      	ldr	r4, [r6, #4]
    7964:	89a3      	ldrh	r3, [r4, #12]
    7966:	0718      	lsls	r0, r3, #28
    7968:	d55d      	bpl.n	7a26 <_vfiprintf_r+0xe2>
    796a:	6923      	ldr	r3, [r4, #16]
    796c:	2b00      	cmp	r3, #0
    796e:	d05a      	beq.n	7a26 <_vfiprintf_r+0xe2>
    7970:	2300      	movs	r3, #0
    7972:	9309      	str	r3, [sp, #36]	; 0x24
    7974:	2320      	movs	r3, #32
    7976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    797a:	2330      	movs	r3, #48	; 0x30
    797c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    7980:	f04f 0b01 	mov.w	fp, #1
    7984:	46b8      	mov	r8, r7
    7986:	4645      	mov	r5, r8
    7988:	f815 3b01 	ldrb.w	r3, [r5], #1
    798c:	2b00      	cmp	r3, #0
    798e:	d155      	bne.n	7a3c <_vfiprintf_r+0xf8>
    7990:	ebb8 0a07 	subs.w	sl, r8, r7
    7994:	d00b      	beq.n	79ae <_vfiprintf_r+0x6a>
    7996:	4653      	mov	r3, sl
    7998:	463a      	mov	r2, r7
    799a:	4621      	mov	r1, r4
    799c:	4630      	mov	r0, r6
    799e:	f7ff ffbf 	bl	7920 <__sfputs_r>
    79a2:	3001      	adds	r0, #1
    79a4:	f000 80c4 	beq.w	7b30 <_vfiprintf_r+0x1ec>
    79a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    79aa:	4453      	add	r3, sl
    79ac:	9309      	str	r3, [sp, #36]	; 0x24
    79ae:	f898 3000 	ldrb.w	r3, [r8]
    79b2:	2b00      	cmp	r3, #0
    79b4:	f000 80bc 	beq.w	7b30 <_vfiprintf_r+0x1ec>
    79b8:	2300      	movs	r3, #0
    79ba:	f04f 32ff 	mov.w	r2, #4294967295
    79be:	9304      	str	r3, [sp, #16]
    79c0:	9307      	str	r3, [sp, #28]
    79c2:	9205      	str	r2, [sp, #20]
    79c4:	9306      	str	r3, [sp, #24]
    79c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    79ca:	931a      	str	r3, [sp, #104]	; 0x68
    79cc:	2205      	movs	r2, #5
    79ce:	7829      	ldrb	r1, [r5, #0]
    79d0:	4860      	ldr	r0, [pc, #384]	; (7b54 <_vfiprintf_r+0x210>)
    79d2:	f000 fafd 	bl	7fd0 <memchr>
    79d6:	f105 0801 	add.w	r8, r5, #1
    79da:	9b04      	ldr	r3, [sp, #16]
    79dc:	2800      	cmp	r0, #0
    79de:	d131      	bne.n	7a44 <_vfiprintf_r+0x100>
    79e0:	06d9      	lsls	r1, r3, #27
    79e2:	bf44      	itt	mi
    79e4:	2220      	movmi	r2, #32
    79e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    79ea:	071a      	lsls	r2, r3, #28
    79ec:	bf44      	itt	mi
    79ee:	222b      	movmi	r2, #43	; 0x2b
    79f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    79f4:	782a      	ldrb	r2, [r5, #0]
    79f6:	2a2a      	cmp	r2, #42	; 0x2a
    79f8:	d02c      	beq.n	7a54 <_vfiprintf_r+0x110>
    79fa:	9a07      	ldr	r2, [sp, #28]
    79fc:	2100      	movs	r1, #0
    79fe:	200a      	movs	r0, #10
    7a00:	46a8      	mov	r8, r5
    7a02:	3501      	adds	r5, #1
    7a04:	f898 3000 	ldrb.w	r3, [r8]
    7a08:	3b30      	subs	r3, #48	; 0x30
    7a0a:	2b09      	cmp	r3, #9
    7a0c:	d96d      	bls.n	7aea <_vfiprintf_r+0x1a6>
    7a0e:	b371      	cbz	r1, 7a6e <_vfiprintf_r+0x12a>
    7a10:	e026      	b.n	7a60 <_vfiprintf_r+0x11c>
    7a12:	4b51      	ldr	r3, [pc, #324]	; (7b58 <_vfiprintf_r+0x214>)
    7a14:	429c      	cmp	r4, r3
    7a16:	d101      	bne.n	7a1c <_vfiprintf_r+0xd8>
    7a18:	68b4      	ldr	r4, [r6, #8]
    7a1a:	e7a3      	b.n	7964 <_vfiprintf_r+0x20>
    7a1c:	4b4f      	ldr	r3, [pc, #316]	; (7b5c <_vfiprintf_r+0x218>)
    7a1e:	429c      	cmp	r4, r3
    7a20:	bf08      	it	eq
    7a22:	68f4      	ldreq	r4, [r6, #12]
    7a24:	e79e      	b.n	7964 <_vfiprintf_r+0x20>
    7a26:	4621      	mov	r1, r4
    7a28:	4630      	mov	r0, r6
    7a2a:	f7ff fbc3 	bl	71b4 <__swsetup_r>
    7a2e:	2800      	cmp	r0, #0
    7a30:	d09e      	beq.n	7970 <_vfiprintf_r+0x2c>
    7a32:	f04f 30ff 	mov.w	r0, #4294967295
    7a36:	b01d      	add	sp, #116	; 0x74
    7a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a3c:	2b25      	cmp	r3, #37	; 0x25
    7a3e:	d0a7      	beq.n	7990 <_vfiprintf_r+0x4c>
    7a40:	46a8      	mov	r8, r5
    7a42:	e7a0      	b.n	7986 <_vfiprintf_r+0x42>
    7a44:	4a43      	ldr	r2, [pc, #268]	; (7b54 <_vfiprintf_r+0x210>)
    7a46:	1a80      	subs	r0, r0, r2
    7a48:	fa0b f000 	lsl.w	r0, fp, r0
    7a4c:	4318      	orrs	r0, r3
    7a4e:	9004      	str	r0, [sp, #16]
    7a50:	4645      	mov	r5, r8
    7a52:	e7bb      	b.n	79cc <_vfiprintf_r+0x88>
    7a54:	9a03      	ldr	r2, [sp, #12]
    7a56:	1d11      	adds	r1, r2, #4
    7a58:	6812      	ldr	r2, [r2, #0]
    7a5a:	9103      	str	r1, [sp, #12]
    7a5c:	2a00      	cmp	r2, #0
    7a5e:	db01      	blt.n	7a64 <_vfiprintf_r+0x120>
    7a60:	9207      	str	r2, [sp, #28]
    7a62:	e004      	b.n	7a6e <_vfiprintf_r+0x12a>
    7a64:	4252      	negs	r2, r2
    7a66:	f043 0302 	orr.w	r3, r3, #2
    7a6a:	9207      	str	r2, [sp, #28]
    7a6c:	9304      	str	r3, [sp, #16]
    7a6e:	f898 3000 	ldrb.w	r3, [r8]
    7a72:	2b2e      	cmp	r3, #46	; 0x2e
    7a74:	d110      	bne.n	7a98 <_vfiprintf_r+0x154>
    7a76:	f898 3001 	ldrb.w	r3, [r8, #1]
    7a7a:	2b2a      	cmp	r3, #42	; 0x2a
    7a7c:	f108 0101 	add.w	r1, r8, #1
    7a80:	d137      	bne.n	7af2 <_vfiprintf_r+0x1ae>
    7a82:	9b03      	ldr	r3, [sp, #12]
    7a84:	1d1a      	adds	r2, r3, #4
    7a86:	681b      	ldr	r3, [r3, #0]
    7a88:	9203      	str	r2, [sp, #12]
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	bfb8      	it	lt
    7a8e:	f04f 33ff 	movlt.w	r3, #4294967295
    7a92:	f108 0802 	add.w	r8, r8, #2
    7a96:	9305      	str	r3, [sp, #20]
    7a98:	4d31      	ldr	r5, [pc, #196]	; (7b60 <_vfiprintf_r+0x21c>)
    7a9a:	f898 1000 	ldrb.w	r1, [r8]
    7a9e:	2203      	movs	r2, #3
    7aa0:	4628      	mov	r0, r5
    7aa2:	f000 fa95 	bl	7fd0 <memchr>
    7aa6:	b140      	cbz	r0, 7aba <_vfiprintf_r+0x176>
    7aa8:	2340      	movs	r3, #64	; 0x40
    7aaa:	1b40      	subs	r0, r0, r5
    7aac:	fa03 f000 	lsl.w	r0, r3, r0
    7ab0:	9b04      	ldr	r3, [sp, #16]
    7ab2:	4303      	orrs	r3, r0
    7ab4:	9304      	str	r3, [sp, #16]
    7ab6:	f108 0801 	add.w	r8, r8, #1
    7aba:	f898 1000 	ldrb.w	r1, [r8]
    7abe:	4829      	ldr	r0, [pc, #164]	; (7b64 <_vfiprintf_r+0x220>)
    7ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    7ac4:	2206      	movs	r2, #6
    7ac6:	f108 0701 	add.w	r7, r8, #1
    7aca:	f000 fa81 	bl	7fd0 <memchr>
    7ace:	2800      	cmp	r0, #0
    7ad0:	d034      	beq.n	7b3c <_vfiprintf_r+0x1f8>
    7ad2:	4b25      	ldr	r3, [pc, #148]	; (7b68 <_vfiprintf_r+0x224>)
    7ad4:	bb03      	cbnz	r3, 7b18 <_vfiprintf_r+0x1d4>
    7ad6:	9b03      	ldr	r3, [sp, #12]
    7ad8:	3307      	adds	r3, #7
    7ada:	f023 0307 	bic.w	r3, r3, #7
    7ade:	3308      	adds	r3, #8
    7ae0:	9303      	str	r3, [sp, #12]
    7ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7ae4:	444b      	add	r3, r9
    7ae6:	9309      	str	r3, [sp, #36]	; 0x24
    7ae8:	e74c      	b.n	7984 <_vfiprintf_r+0x40>
    7aea:	fb00 3202 	mla	r2, r0, r2, r3
    7aee:	2101      	movs	r1, #1
    7af0:	e786      	b.n	7a00 <_vfiprintf_r+0xbc>
    7af2:	2300      	movs	r3, #0
    7af4:	9305      	str	r3, [sp, #20]
    7af6:	4618      	mov	r0, r3
    7af8:	250a      	movs	r5, #10
    7afa:	4688      	mov	r8, r1
    7afc:	3101      	adds	r1, #1
    7afe:	f898 2000 	ldrb.w	r2, [r8]
    7b02:	3a30      	subs	r2, #48	; 0x30
    7b04:	2a09      	cmp	r2, #9
    7b06:	d903      	bls.n	7b10 <_vfiprintf_r+0x1cc>
    7b08:	2b00      	cmp	r3, #0
    7b0a:	d0c5      	beq.n	7a98 <_vfiprintf_r+0x154>
    7b0c:	9005      	str	r0, [sp, #20]
    7b0e:	e7c3      	b.n	7a98 <_vfiprintf_r+0x154>
    7b10:	fb05 2000 	mla	r0, r5, r0, r2
    7b14:	2301      	movs	r3, #1
    7b16:	e7f0      	b.n	7afa <_vfiprintf_r+0x1b6>
    7b18:	ab03      	add	r3, sp, #12
    7b1a:	9300      	str	r3, [sp, #0]
    7b1c:	4622      	mov	r2, r4
    7b1e:	4b13      	ldr	r3, [pc, #76]	; (7b6c <_vfiprintf_r+0x228>)
    7b20:	a904      	add	r1, sp, #16
    7b22:	4630      	mov	r0, r6
    7b24:	f3af 8000 	nop.w
    7b28:	f1b0 3fff 	cmp.w	r0, #4294967295
    7b2c:	4681      	mov	r9, r0
    7b2e:	d1d8      	bne.n	7ae2 <_vfiprintf_r+0x19e>
    7b30:	89a3      	ldrh	r3, [r4, #12]
    7b32:	065b      	lsls	r3, r3, #25
    7b34:	f53f af7d 	bmi.w	7a32 <_vfiprintf_r+0xee>
    7b38:	9809      	ldr	r0, [sp, #36]	; 0x24
    7b3a:	e77c      	b.n	7a36 <_vfiprintf_r+0xf2>
    7b3c:	ab03      	add	r3, sp, #12
    7b3e:	9300      	str	r3, [sp, #0]
    7b40:	4622      	mov	r2, r4
    7b42:	4b0a      	ldr	r3, [pc, #40]	; (7b6c <_vfiprintf_r+0x228>)
    7b44:	a904      	add	r1, sp, #16
    7b46:	4630      	mov	r0, r6
    7b48:	f000 f888 	bl	7c5c <_printf_i>
    7b4c:	e7ec      	b.n	7b28 <_vfiprintf_r+0x1e4>
    7b4e:	bf00      	nop
    7b50:	00008be8 	.word	0x00008be8
    7b54:	00008c28 	.word	0x00008c28
    7b58:	00008c08 	.word	0x00008c08
    7b5c:	00008bc8 	.word	0x00008bc8
    7b60:	00008c2e 	.word	0x00008c2e
    7b64:	00008c32 	.word	0x00008c32
    7b68:	00000000 	.word	0x00000000
    7b6c:	00007921 	.word	0x00007921

00007b70 <_printf_common>:
    7b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b74:	4691      	mov	r9, r2
    7b76:	461f      	mov	r7, r3
    7b78:	688a      	ldr	r2, [r1, #8]
    7b7a:	690b      	ldr	r3, [r1, #16]
    7b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    7b80:	4293      	cmp	r3, r2
    7b82:	bfb8      	it	lt
    7b84:	4613      	movlt	r3, r2
    7b86:	f8c9 3000 	str.w	r3, [r9]
    7b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    7b8e:	4606      	mov	r6, r0
    7b90:	460c      	mov	r4, r1
    7b92:	b112      	cbz	r2, 7b9a <_printf_common+0x2a>
    7b94:	3301      	adds	r3, #1
    7b96:	f8c9 3000 	str.w	r3, [r9]
    7b9a:	6823      	ldr	r3, [r4, #0]
    7b9c:	0699      	lsls	r1, r3, #26
    7b9e:	bf42      	ittt	mi
    7ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
    7ba4:	3302      	addmi	r3, #2
    7ba6:	f8c9 3000 	strmi.w	r3, [r9]
    7baa:	6825      	ldr	r5, [r4, #0]
    7bac:	f015 0506 	ands.w	r5, r5, #6
    7bb0:	d107      	bne.n	7bc2 <_printf_common+0x52>
    7bb2:	f104 0a19 	add.w	sl, r4, #25
    7bb6:	68e3      	ldr	r3, [r4, #12]
    7bb8:	f8d9 2000 	ldr.w	r2, [r9]
    7bbc:	1a9b      	subs	r3, r3, r2
    7bbe:	429d      	cmp	r5, r3
    7bc0:	db29      	blt.n	7c16 <_printf_common+0xa6>
    7bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    7bc6:	6822      	ldr	r2, [r4, #0]
    7bc8:	3300      	adds	r3, #0
    7bca:	bf18      	it	ne
    7bcc:	2301      	movne	r3, #1
    7bce:	0692      	lsls	r2, r2, #26
    7bd0:	d42e      	bmi.n	7c30 <_printf_common+0xc0>
    7bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
    7bd6:	4639      	mov	r1, r7
    7bd8:	4630      	mov	r0, r6
    7bda:	47c0      	blx	r8
    7bdc:	3001      	adds	r0, #1
    7bde:	d021      	beq.n	7c24 <_printf_common+0xb4>
    7be0:	6823      	ldr	r3, [r4, #0]
    7be2:	68e5      	ldr	r5, [r4, #12]
    7be4:	f8d9 2000 	ldr.w	r2, [r9]
    7be8:	f003 0306 	and.w	r3, r3, #6
    7bec:	2b04      	cmp	r3, #4
    7bee:	bf08      	it	eq
    7bf0:	1aad      	subeq	r5, r5, r2
    7bf2:	68a3      	ldr	r3, [r4, #8]
    7bf4:	6922      	ldr	r2, [r4, #16]
    7bf6:	bf0c      	ite	eq
    7bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    7bfc:	2500      	movne	r5, #0
    7bfe:	4293      	cmp	r3, r2
    7c00:	bfc4      	itt	gt
    7c02:	1a9b      	subgt	r3, r3, r2
    7c04:	18ed      	addgt	r5, r5, r3
    7c06:	f04f 0900 	mov.w	r9, #0
    7c0a:	341a      	adds	r4, #26
    7c0c:	454d      	cmp	r5, r9
    7c0e:	d11b      	bne.n	7c48 <_printf_common+0xd8>
    7c10:	2000      	movs	r0, #0
    7c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c16:	2301      	movs	r3, #1
    7c18:	4652      	mov	r2, sl
    7c1a:	4639      	mov	r1, r7
    7c1c:	4630      	mov	r0, r6
    7c1e:	47c0      	blx	r8
    7c20:	3001      	adds	r0, #1
    7c22:	d103      	bne.n	7c2c <_printf_common+0xbc>
    7c24:	f04f 30ff 	mov.w	r0, #4294967295
    7c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c2c:	3501      	adds	r5, #1
    7c2e:	e7c2      	b.n	7bb6 <_printf_common+0x46>
    7c30:	18e1      	adds	r1, r4, r3
    7c32:	1c5a      	adds	r2, r3, #1
    7c34:	2030      	movs	r0, #48	; 0x30
    7c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    7c3a:	4422      	add	r2, r4
    7c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    7c40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7c44:	3302      	adds	r3, #2
    7c46:	e7c4      	b.n	7bd2 <_printf_common+0x62>
    7c48:	2301      	movs	r3, #1
    7c4a:	4622      	mov	r2, r4
    7c4c:	4639      	mov	r1, r7
    7c4e:	4630      	mov	r0, r6
    7c50:	47c0      	blx	r8
    7c52:	3001      	adds	r0, #1
    7c54:	d0e6      	beq.n	7c24 <_printf_common+0xb4>
    7c56:	f109 0901 	add.w	r9, r9, #1
    7c5a:	e7d7      	b.n	7c0c <_printf_common+0x9c>

00007c5c <_printf_i>:
    7c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7c60:	4617      	mov	r7, r2
    7c62:	7e0a      	ldrb	r2, [r1, #24]
    7c64:	b085      	sub	sp, #20
    7c66:	2a6e      	cmp	r2, #110	; 0x6e
    7c68:	4698      	mov	r8, r3
    7c6a:	4606      	mov	r6, r0
    7c6c:	460c      	mov	r4, r1
    7c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7c70:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    7c74:	f000 80bc 	beq.w	7df0 <_printf_i+0x194>
    7c78:	d81a      	bhi.n	7cb0 <_printf_i+0x54>
    7c7a:	2a63      	cmp	r2, #99	; 0x63
    7c7c:	d02e      	beq.n	7cdc <_printf_i+0x80>
    7c7e:	d80a      	bhi.n	7c96 <_printf_i+0x3a>
    7c80:	2a00      	cmp	r2, #0
    7c82:	f000 80c8 	beq.w	7e16 <_printf_i+0x1ba>
    7c86:	2a58      	cmp	r2, #88	; 0x58
    7c88:	f000 808a 	beq.w	7da0 <_printf_i+0x144>
    7c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7c90:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    7c94:	e02a      	b.n	7cec <_printf_i+0x90>
    7c96:	2a64      	cmp	r2, #100	; 0x64
    7c98:	d001      	beq.n	7c9e <_printf_i+0x42>
    7c9a:	2a69      	cmp	r2, #105	; 0x69
    7c9c:	d1f6      	bne.n	7c8c <_printf_i+0x30>
    7c9e:	6821      	ldr	r1, [r4, #0]
    7ca0:	681a      	ldr	r2, [r3, #0]
    7ca2:	f011 0f80 	tst.w	r1, #128	; 0x80
    7ca6:	d023      	beq.n	7cf0 <_printf_i+0x94>
    7ca8:	1d11      	adds	r1, r2, #4
    7caa:	6019      	str	r1, [r3, #0]
    7cac:	6813      	ldr	r3, [r2, #0]
    7cae:	e027      	b.n	7d00 <_printf_i+0xa4>
    7cb0:	2a73      	cmp	r2, #115	; 0x73
    7cb2:	f000 80b4 	beq.w	7e1e <_printf_i+0x1c2>
    7cb6:	d808      	bhi.n	7cca <_printf_i+0x6e>
    7cb8:	2a6f      	cmp	r2, #111	; 0x6f
    7cba:	d02a      	beq.n	7d12 <_printf_i+0xb6>
    7cbc:	2a70      	cmp	r2, #112	; 0x70
    7cbe:	d1e5      	bne.n	7c8c <_printf_i+0x30>
    7cc0:	680a      	ldr	r2, [r1, #0]
    7cc2:	f042 0220 	orr.w	r2, r2, #32
    7cc6:	600a      	str	r2, [r1, #0]
    7cc8:	e003      	b.n	7cd2 <_printf_i+0x76>
    7cca:	2a75      	cmp	r2, #117	; 0x75
    7ccc:	d021      	beq.n	7d12 <_printf_i+0xb6>
    7cce:	2a78      	cmp	r2, #120	; 0x78
    7cd0:	d1dc      	bne.n	7c8c <_printf_i+0x30>
    7cd2:	2278      	movs	r2, #120	; 0x78
    7cd4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    7cd8:	496e      	ldr	r1, [pc, #440]	; (7e94 <_printf_i+0x238>)
    7cda:	e064      	b.n	7da6 <_printf_i+0x14a>
    7cdc:	681a      	ldr	r2, [r3, #0]
    7cde:	f101 0542 	add.w	r5, r1, #66	; 0x42
    7ce2:	1d11      	adds	r1, r2, #4
    7ce4:	6019      	str	r1, [r3, #0]
    7ce6:	6813      	ldr	r3, [r2, #0]
    7ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7cec:	2301      	movs	r3, #1
    7cee:	e0a3      	b.n	7e38 <_printf_i+0x1dc>
    7cf0:	f011 0f40 	tst.w	r1, #64	; 0x40
    7cf4:	f102 0104 	add.w	r1, r2, #4
    7cf8:	6019      	str	r1, [r3, #0]
    7cfa:	d0d7      	beq.n	7cac <_printf_i+0x50>
    7cfc:	f9b2 3000 	ldrsh.w	r3, [r2]
    7d00:	2b00      	cmp	r3, #0
    7d02:	da03      	bge.n	7d0c <_printf_i+0xb0>
    7d04:	222d      	movs	r2, #45	; 0x2d
    7d06:	425b      	negs	r3, r3
    7d08:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    7d0c:	4962      	ldr	r1, [pc, #392]	; (7e98 <_printf_i+0x23c>)
    7d0e:	220a      	movs	r2, #10
    7d10:	e017      	b.n	7d42 <_printf_i+0xe6>
    7d12:	6820      	ldr	r0, [r4, #0]
    7d14:	6819      	ldr	r1, [r3, #0]
    7d16:	f010 0f80 	tst.w	r0, #128	; 0x80
    7d1a:	d003      	beq.n	7d24 <_printf_i+0xc8>
    7d1c:	1d08      	adds	r0, r1, #4
    7d1e:	6018      	str	r0, [r3, #0]
    7d20:	680b      	ldr	r3, [r1, #0]
    7d22:	e006      	b.n	7d32 <_printf_i+0xd6>
    7d24:	f010 0f40 	tst.w	r0, #64	; 0x40
    7d28:	f101 0004 	add.w	r0, r1, #4
    7d2c:	6018      	str	r0, [r3, #0]
    7d2e:	d0f7      	beq.n	7d20 <_printf_i+0xc4>
    7d30:	880b      	ldrh	r3, [r1, #0]
    7d32:	4959      	ldr	r1, [pc, #356]	; (7e98 <_printf_i+0x23c>)
    7d34:	2a6f      	cmp	r2, #111	; 0x6f
    7d36:	bf14      	ite	ne
    7d38:	220a      	movne	r2, #10
    7d3a:	2208      	moveq	r2, #8
    7d3c:	2000      	movs	r0, #0
    7d3e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    7d42:	6865      	ldr	r5, [r4, #4]
    7d44:	60a5      	str	r5, [r4, #8]
    7d46:	2d00      	cmp	r5, #0
    7d48:	f2c0 809c 	blt.w	7e84 <_printf_i+0x228>
    7d4c:	6820      	ldr	r0, [r4, #0]
    7d4e:	f020 0004 	bic.w	r0, r0, #4
    7d52:	6020      	str	r0, [r4, #0]
    7d54:	2b00      	cmp	r3, #0
    7d56:	d13f      	bne.n	7dd8 <_printf_i+0x17c>
    7d58:	2d00      	cmp	r5, #0
    7d5a:	f040 8095 	bne.w	7e88 <_printf_i+0x22c>
    7d5e:	4675      	mov	r5, lr
    7d60:	2a08      	cmp	r2, #8
    7d62:	d10b      	bne.n	7d7c <_printf_i+0x120>
    7d64:	6823      	ldr	r3, [r4, #0]
    7d66:	07da      	lsls	r2, r3, #31
    7d68:	d508      	bpl.n	7d7c <_printf_i+0x120>
    7d6a:	6923      	ldr	r3, [r4, #16]
    7d6c:	6862      	ldr	r2, [r4, #4]
    7d6e:	429a      	cmp	r2, r3
    7d70:	bfde      	ittt	le
    7d72:	2330      	movle	r3, #48	; 0x30
    7d74:	f805 3c01 	strble.w	r3, [r5, #-1]
    7d78:	f105 35ff 	addle.w	r5, r5, #4294967295
    7d7c:	ebae 0305 	sub.w	r3, lr, r5
    7d80:	6123      	str	r3, [r4, #16]
    7d82:	f8cd 8000 	str.w	r8, [sp]
    7d86:	463b      	mov	r3, r7
    7d88:	aa03      	add	r2, sp, #12
    7d8a:	4621      	mov	r1, r4
    7d8c:	4630      	mov	r0, r6
    7d8e:	f7ff feef 	bl	7b70 <_printf_common>
    7d92:	3001      	adds	r0, #1
    7d94:	d155      	bne.n	7e42 <_printf_i+0x1e6>
    7d96:	f04f 30ff 	mov.w	r0, #4294967295
    7d9a:	b005      	add	sp, #20
    7d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7da0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    7da4:	493c      	ldr	r1, [pc, #240]	; (7e98 <_printf_i+0x23c>)
    7da6:	6822      	ldr	r2, [r4, #0]
    7da8:	6818      	ldr	r0, [r3, #0]
    7daa:	f012 0f80 	tst.w	r2, #128	; 0x80
    7dae:	f100 0504 	add.w	r5, r0, #4
    7db2:	601d      	str	r5, [r3, #0]
    7db4:	d001      	beq.n	7dba <_printf_i+0x15e>
    7db6:	6803      	ldr	r3, [r0, #0]
    7db8:	e002      	b.n	7dc0 <_printf_i+0x164>
    7dba:	0655      	lsls	r5, r2, #25
    7dbc:	d5fb      	bpl.n	7db6 <_printf_i+0x15a>
    7dbe:	8803      	ldrh	r3, [r0, #0]
    7dc0:	07d0      	lsls	r0, r2, #31
    7dc2:	bf44      	itt	mi
    7dc4:	f042 0220 	orrmi.w	r2, r2, #32
    7dc8:	6022      	strmi	r2, [r4, #0]
    7dca:	b91b      	cbnz	r3, 7dd4 <_printf_i+0x178>
    7dcc:	6822      	ldr	r2, [r4, #0]
    7dce:	f022 0220 	bic.w	r2, r2, #32
    7dd2:	6022      	str	r2, [r4, #0]
    7dd4:	2210      	movs	r2, #16
    7dd6:	e7b1      	b.n	7d3c <_printf_i+0xe0>
    7dd8:	4675      	mov	r5, lr
    7dda:	fbb3 f0f2 	udiv	r0, r3, r2
    7dde:	fb02 3310 	mls	r3, r2, r0, r3
    7de2:	5ccb      	ldrb	r3, [r1, r3]
    7de4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    7de8:	4603      	mov	r3, r0
    7dea:	2800      	cmp	r0, #0
    7dec:	d1f5      	bne.n	7dda <_printf_i+0x17e>
    7dee:	e7b7      	b.n	7d60 <_printf_i+0x104>
    7df0:	6808      	ldr	r0, [r1, #0]
    7df2:	681a      	ldr	r2, [r3, #0]
    7df4:	6949      	ldr	r1, [r1, #20]
    7df6:	f010 0f80 	tst.w	r0, #128	; 0x80
    7dfa:	d004      	beq.n	7e06 <_printf_i+0x1aa>
    7dfc:	1d10      	adds	r0, r2, #4
    7dfe:	6018      	str	r0, [r3, #0]
    7e00:	6813      	ldr	r3, [r2, #0]
    7e02:	6019      	str	r1, [r3, #0]
    7e04:	e007      	b.n	7e16 <_printf_i+0x1ba>
    7e06:	f010 0f40 	tst.w	r0, #64	; 0x40
    7e0a:	f102 0004 	add.w	r0, r2, #4
    7e0e:	6018      	str	r0, [r3, #0]
    7e10:	6813      	ldr	r3, [r2, #0]
    7e12:	d0f6      	beq.n	7e02 <_printf_i+0x1a6>
    7e14:	8019      	strh	r1, [r3, #0]
    7e16:	2300      	movs	r3, #0
    7e18:	6123      	str	r3, [r4, #16]
    7e1a:	4675      	mov	r5, lr
    7e1c:	e7b1      	b.n	7d82 <_printf_i+0x126>
    7e1e:	681a      	ldr	r2, [r3, #0]
    7e20:	1d11      	adds	r1, r2, #4
    7e22:	6019      	str	r1, [r3, #0]
    7e24:	6815      	ldr	r5, [r2, #0]
    7e26:	6862      	ldr	r2, [r4, #4]
    7e28:	2100      	movs	r1, #0
    7e2a:	4628      	mov	r0, r5
    7e2c:	f000 f8d0 	bl	7fd0 <memchr>
    7e30:	b108      	cbz	r0, 7e36 <_printf_i+0x1da>
    7e32:	1b40      	subs	r0, r0, r5
    7e34:	6060      	str	r0, [r4, #4]
    7e36:	6863      	ldr	r3, [r4, #4]
    7e38:	6123      	str	r3, [r4, #16]
    7e3a:	2300      	movs	r3, #0
    7e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    7e40:	e79f      	b.n	7d82 <_printf_i+0x126>
    7e42:	6923      	ldr	r3, [r4, #16]
    7e44:	462a      	mov	r2, r5
    7e46:	4639      	mov	r1, r7
    7e48:	4630      	mov	r0, r6
    7e4a:	47c0      	blx	r8
    7e4c:	3001      	adds	r0, #1
    7e4e:	d0a2      	beq.n	7d96 <_printf_i+0x13a>
    7e50:	6823      	ldr	r3, [r4, #0]
    7e52:	079b      	lsls	r3, r3, #30
    7e54:	d507      	bpl.n	7e66 <_printf_i+0x20a>
    7e56:	2500      	movs	r5, #0
    7e58:	f104 0919 	add.w	r9, r4, #25
    7e5c:	68e3      	ldr	r3, [r4, #12]
    7e5e:	9a03      	ldr	r2, [sp, #12]
    7e60:	1a9b      	subs	r3, r3, r2
    7e62:	429d      	cmp	r5, r3
    7e64:	db05      	blt.n	7e72 <_printf_i+0x216>
    7e66:	68e0      	ldr	r0, [r4, #12]
    7e68:	9b03      	ldr	r3, [sp, #12]
    7e6a:	4298      	cmp	r0, r3
    7e6c:	bfb8      	it	lt
    7e6e:	4618      	movlt	r0, r3
    7e70:	e793      	b.n	7d9a <_printf_i+0x13e>
    7e72:	2301      	movs	r3, #1
    7e74:	464a      	mov	r2, r9
    7e76:	4639      	mov	r1, r7
    7e78:	4630      	mov	r0, r6
    7e7a:	47c0      	blx	r8
    7e7c:	3001      	adds	r0, #1
    7e7e:	d08a      	beq.n	7d96 <_printf_i+0x13a>
    7e80:	3501      	adds	r5, #1
    7e82:	e7eb      	b.n	7e5c <_printf_i+0x200>
    7e84:	2b00      	cmp	r3, #0
    7e86:	d1a7      	bne.n	7dd8 <_printf_i+0x17c>
    7e88:	780b      	ldrb	r3, [r1, #0]
    7e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7e92:	e765      	b.n	7d60 <_printf_i+0x104>
    7e94:	00008c4a 	.word	0x00008c4a
    7e98:	00008c39 	.word	0x00008c39

00007e9c <__sread>:
    7e9c:	b510      	push	{r4, lr}
    7e9e:	460c      	mov	r4, r1
    7ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7ea4:	f000 f924 	bl	80f0 <_read_r>
    7ea8:	2800      	cmp	r0, #0
    7eaa:	bfab      	itete	ge
    7eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    7eae:	89a3      	ldrhlt	r3, [r4, #12]
    7eb0:	181b      	addge	r3, r3, r0
    7eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    7eb6:	bfac      	ite	ge
    7eb8:	6563      	strge	r3, [r4, #84]	; 0x54
    7eba:	81a3      	strhlt	r3, [r4, #12]
    7ebc:	bd10      	pop	{r4, pc}

00007ebe <__swrite>:
    7ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ec2:	461f      	mov	r7, r3
    7ec4:	898b      	ldrh	r3, [r1, #12]
    7ec6:	05db      	lsls	r3, r3, #23
    7ec8:	4605      	mov	r5, r0
    7eca:	460c      	mov	r4, r1
    7ecc:	4616      	mov	r6, r2
    7ece:	d505      	bpl.n	7edc <__swrite+0x1e>
    7ed0:	2302      	movs	r3, #2
    7ed2:	2200      	movs	r2, #0
    7ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7ed8:	f000 f868 	bl	7fac <_lseek_r>
    7edc:	89a3      	ldrh	r3, [r4, #12]
    7ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    7ee6:	81a3      	strh	r3, [r4, #12]
    7ee8:	4632      	mov	r2, r6
    7eea:	463b      	mov	r3, r7
    7eec:	4628      	mov	r0, r5
    7eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ef2:	f000 b817 	b.w	7f24 <_write_r>

00007ef6 <__sseek>:
    7ef6:	b510      	push	{r4, lr}
    7ef8:	460c      	mov	r4, r1
    7efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7efe:	f000 f855 	bl	7fac <_lseek_r>
    7f02:	1c43      	adds	r3, r0, #1
    7f04:	89a3      	ldrh	r3, [r4, #12]
    7f06:	bf15      	itete	ne
    7f08:	6560      	strne	r0, [r4, #84]	; 0x54
    7f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    7f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    7f12:	81a3      	strheq	r3, [r4, #12]
    7f14:	bf18      	it	ne
    7f16:	81a3      	strhne	r3, [r4, #12]
    7f18:	bd10      	pop	{r4, pc}

00007f1a <__sclose>:
    7f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7f1e:	f000 b813 	b.w	7f48 <_close_r>
	...

00007f24 <_write_r>:
    7f24:	b538      	push	{r3, r4, r5, lr}
    7f26:	4c07      	ldr	r4, [pc, #28]	; (7f44 <_write_r+0x20>)
    7f28:	4605      	mov	r5, r0
    7f2a:	4608      	mov	r0, r1
    7f2c:	4611      	mov	r1, r2
    7f2e:	2200      	movs	r2, #0
    7f30:	6022      	str	r2, [r4, #0]
    7f32:	461a      	mov	r2, r3
    7f34:	f7fd fee6 	bl	5d04 <_write>
    7f38:	1c43      	adds	r3, r0, #1
    7f3a:	d102      	bne.n	7f42 <_write_r+0x1e>
    7f3c:	6823      	ldr	r3, [r4, #0]
    7f3e:	b103      	cbz	r3, 7f42 <_write_r+0x1e>
    7f40:	602b      	str	r3, [r5, #0]
    7f42:	bd38      	pop	{r3, r4, r5, pc}
    7f44:	200034f0 	.word	0x200034f0

00007f48 <_close_r>:
    7f48:	b538      	push	{r3, r4, r5, lr}
    7f4a:	4c06      	ldr	r4, [pc, #24]	; (7f64 <_close_r+0x1c>)
    7f4c:	2300      	movs	r3, #0
    7f4e:	4605      	mov	r5, r0
    7f50:	4608      	mov	r0, r1
    7f52:	6023      	str	r3, [r4, #0]
    7f54:	f7fa fc8c 	bl	2870 <_close>
    7f58:	1c43      	adds	r3, r0, #1
    7f5a:	d102      	bne.n	7f62 <_close_r+0x1a>
    7f5c:	6823      	ldr	r3, [r4, #0]
    7f5e:	b103      	cbz	r3, 7f62 <_close_r+0x1a>
    7f60:	602b      	str	r3, [r5, #0]
    7f62:	bd38      	pop	{r3, r4, r5, pc}
    7f64:	200034f0 	.word	0x200034f0

00007f68 <_fstat_r>:
    7f68:	b538      	push	{r3, r4, r5, lr}
    7f6a:	4c07      	ldr	r4, [pc, #28]	; (7f88 <_fstat_r+0x20>)
    7f6c:	2300      	movs	r3, #0
    7f6e:	4605      	mov	r5, r0
    7f70:	4608      	mov	r0, r1
    7f72:	4611      	mov	r1, r2
    7f74:	6023      	str	r3, [r4, #0]
    7f76:	f7fa fc7e 	bl	2876 <_fstat>
    7f7a:	1c43      	adds	r3, r0, #1
    7f7c:	d102      	bne.n	7f84 <_fstat_r+0x1c>
    7f7e:	6823      	ldr	r3, [r4, #0]
    7f80:	b103      	cbz	r3, 7f84 <_fstat_r+0x1c>
    7f82:	602b      	str	r3, [r5, #0]
    7f84:	bd38      	pop	{r3, r4, r5, pc}
    7f86:	bf00      	nop
    7f88:	200034f0 	.word	0x200034f0

00007f8c <_isatty_r>:
    7f8c:	b538      	push	{r3, r4, r5, lr}
    7f8e:	4c06      	ldr	r4, [pc, #24]	; (7fa8 <_isatty_r+0x1c>)
    7f90:	2300      	movs	r3, #0
    7f92:	4605      	mov	r5, r0
    7f94:	4608      	mov	r0, r1
    7f96:	6023      	str	r3, [r4, #0]
    7f98:	f7fa fc72 	bl	2880 <_isatty>
    7f9c:	1c43      	adds	r3, r0, #1
    7f9e:	d102      	bne.n	7fa6 <_isatty_r+0x1a>
    7fa0:	6823      	ldr	r3, [r4, #0]
    7fa2:	b103      	cbz	r3, 7fa6 <_isatty_r+0x1a>
    7fa4:	602b      	str	r3, [r5, #0]
    7fa6:	bd38      	pop	{r3, r4, r5, pc}
    7fa8:	200034f0 	.word	0x200034f0

00007fac <_lseek_r>:
    7fac:	b538      	push	{r3, r4, r5, lr}
    7fae:	4c07      	ldr	r4, [pc, #28]	; (7fcc <_lseek_r+0x20>)
    7fb0:	4605      	mov	r5, r0
    7fb2:	4608      	mov	r0, r1
    7fb4:	4611      	mov	r1, r2
    7fb6:	2200      	movs	r2, #0
    7fb8:	6022      	str	r2, [r4, #0]
    7fba:	461a      	mov	r2, r3
    7fbc:	f7fa fc62 	bl	2884 <_lseek>
    7fc0:	1c43      	adds	r3, r0, #1
    7fc2:	d102      	bne.n	7fca <_lseek_r+0x1e>
    7fc4:	6823      	ldr	r3, [r4, #0]
    7fc6:	b103      	cbz	r3, 7fca <_lseek_r+0x1e>
    7fc8:	602b      	str	r3, [r5, #0]
    7fca:	bd38      	pop	{r3, r4, r5, pc}
    7fcc:	200034f0 	.word	0x200034f0

00007fd0 <memchr>:
    7fd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7fd4:	2a10      	cmp	r2, #16
    7fd6:	db2b      	blt.n	8030 <memchr+0x60>
    7fd8:	f010 0f07 	tst.w	r0, #7
    7fdc:	d008      	beq.n	7ff0 <memchr+0x20>
    7fde:	f810 3b01 	ldrb.w	r3, [r0], #1
    7fe2:	3a01      	subs	r2, #1
    7fe4:	428b      	cmp	r3, r1
    7fe6:	d02d      	beq.n	8044 <memchr+0x74>
    7fe8:	f010 0f07 	tst.w	r0, #7
    7fec:	b342      	cbz	r2, 8040 <memchr+0x70>
    7fee:	d1f6      	bne.n	7fde <memchr+0xe>
    7ff0:	b4f0      	push	{r4, r5, r6, r7}
    7ff2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7ff6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    7ffa:	f022 0407 	bic.w	r4, r2, #7
    7ffe:	f07f 0700 	mvns.w	r7, #0
    8002:	2300      	movs	r3, #0
    8004:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    8008:	3c08      	subs	r4, #8
    800a:	ea85 0501 	eor.w	r5, r5, r1
    800e:	ea86 0601 	eor.w	r6, r6, r1
    8012:	fa85 f547 	uadd8	r5, r5, r7
    8016:	faa3 f587 	sel	r5, r3, r7
    801a:	fa86 f647 	uadd8	r6, r6, r7
    801e:	faa5 f687 	sel	r6, r5, r7
    8022:	b98e      	cbnz	r6, 8048 <memchr+0x78>
    8024:	d1ee      	bne.n	8004 <memchr+0x34>
    8026:	bcf0      	pop	{r4, r5, r6, r7}
    8028:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    802c:	f002 0207 	and.w	r2, r2, #7
    8030:	b132      	cbz	r2, 8040 <memchr+0x70>
    8032:	f810 3b01 	ldrb.w	r3, [r0], #1
    8036:	3a01      	subs	r2, #1
    8038:	ea83 0301 	eor.w	r3, r3, r1
    803c:	b113      	cbz	r3, 8044 <memchr+0x74>
    803e:	d1f8      	bne.n	8032 <memchr+0x62>
    8040:	2000      	movs	r0, #0
    8042:	4770      	bx	lr
    8044:	3801      	subs	r0, #1
    8046:	4770      	bx	lr
    8048:	2d00      	cmp	r5, #0
    804a:	bf06      	itte	eq
    804c:	4635      	moveq	r5, r6
    804e:	3803      	subeq	r0, #3
    8050:	3807      	subne	r0, #7
    8052:	f015 0f01 	tst.w	r5, #1
    8056:	d107      	bne.n	8068 <memchr+0x98>
    8058:	3001      	adds	r0, #1
    805a:	f415 7f80 	tst.w	r5, #256	; 0x100
    805e:	bf02      	ittt	eq
    8060:	3001      	addeq	r0, #1
    8062:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    8066:	3001      	addeq	r0, #1
    8068:	bcf0      	pop	{r4, r5, r6, r7}
    806a:	3801      	subs	r0, #1
    806c:	4770      	bx	lr
    806e:	bf00      	nop

00008070 <memmove>:
    8070:	4288      	cmp	r0, r1
    8072:	b510      	push	{r4, lr}
    8074:	eb01 0302 	add.w	r3, r1, r2
    8078:	d803      	bhi.n	8082 <memmove+0x12>
    807a:	1e42      	subs	r2, r0, #1
    807c:	4299      	cmp	r1, r3
    807e:	d10c      	bne.n	809a <memmove+0x2a>
    8080:	bd10      	pop	{r4, pc}
    8082:	4298      	cmp	r0, r3
    8084:	d2f9      	bcs.n	807a <memmove+0xa>
    8086:	1881      	adds	r1, r0, r2
    8088:	1ad2      	subs	r2, r2, r3
    808a:	42d3      	cmn	r3, r2
    808c:	d100      	bne.n	8090 <memmove+0x20>
    808e:	bd10      	pop	{r4, pc}
    8090:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    8094:	f801 4d01 	strb.w	r4, [r1, #-1]!
    8098:	e7f7      	b.n	808a <memmove+0x1a>
    809a:	f811 4b01 	ldrb.w	r4, [r1], #1
    809e:	f802 4f01 	strb.w	r4, [r2, #1]!
    80a2:	e7eb      	b.n	807c <memmove+0xc>

000080a4 <_realloc_r>:
    80a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80a6:	4607      	mov	r7, r0
    80a8:	4614      	mov	r4, r2
    80aa:	460e      	mov	r6, r1
    80ac:	b921      	cbnz	r1, 80b8 <_realloc_r+0x14>
    80ae:	4611      	mov	r1, r2
    80b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    80b4:	f7fe be68 	b.w	6d88 <_malloc_r>
    80b8:	b922      	cbnz	r2, 80c4 <_realloc_r+0x20>
    80ba:	f7fe fe17 	bl	6cec <_free_r>
    80be:	4625      	mov	r5, r4
    80c0:	4628      	mov	r0, r5
    80c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80c4:	f000 f826 	bl	8114 <_malloc_usable_size_r>
    80c8:	4284      	cmp	r4, r0
    80ca:	d90f      	bls.n	80ec <_realloc_r+0x48>
    80cc:	4621      	mov	r1, r4
    80ce:	4638      	mov	r0, r7
    80d0:	f7fe fe5a 	bl	6d88 <_malloc_r>
    80d4:	4605      	mov	r5, r0
    80d6:	2800      	cmp	r0, #0
    80d8:	d0f2      	beq.n	80c0 <_realloc_r+0x1c>
    80da:	4631      	mov	r1, r6
    80dc:	4622      	mov	r2, r4
    80de:	f7fe fdf1 	bl	6cc4 <memcpy>
    80e2:	4631      	mov	r1, r6
    80e4:	4638      	mov	r0, r7
    80e6:	f7fe fe01 	bl	6cec <_free_r>
    80ea:	e7e9      	b.n	80c0 <_realloc_r+0x1c>
    80ec:	4635      	mov	r5, r6
    80ee:	e7e7      	b.n	80c0 <_realloc_r+0x1c>

000080f0 <_read_r>:
    80f0:	b538      	push	{r3, r4, r5, lr}
    80f2:	4c07      	ldr	r4, [pc, #28]	; (8110 <_read_r+0x20>)
    80f4:	4605      	mov	r5, r0
    80f6:	4608      	mov	r0, r1
    80f8:	4611      	mov	r1, r2
    80fa:	2200      	movs	r2, #0
    80fc:	6022      	str	r2, [r4, #0]
    80fe:	461a      	mov	r2, r3
    8100:	f7fd fdf0 	bl	5ce4 <_read>
    8104:	1c43      	adds	r3, r0, #1
    8106:	d102      	bne.n	810e <_read_r+0x1e>
    8108:	6823      	ldr	r3, [r4, #0]
    810a:	b103      	cbz	r3, 810e <_read_r+0x1e>
    810c:	602b      	str	r3, [r5, #0]
    810e:	bd38      	pop	{r3, r4, r5, pc}
    8110:	200034f0 	.word	0x200034f0

00008114 <_malloc_usable_size_r>:
    8114:	f851 0c04 	ldr.w	r0, [r1, #-4]
    8118:	2800      	cmp	r0, #0
    811a:	f1a0 0004 	sub.w	r0, r0, #4
    811e:	bfbc      	itt	lt
    8120:	580b      	ldrlt	r3, [r1, r0]
    8122:	18c0      	addlt	r0, r0, r3
    8124:	4770      	bx	lr
    8126:	0000      	movs	r0, r0
    8128:	682f2e2e 	.word	0x682f2e2e
    812c:	692f6c61 	.word	0x692f6c61
    8130:	756c636e 	.word	0x756c636e
    8134:	682f6564 	.word	0x682f6564
    8138:	775f6c61 	.word	0x775f6c61
    813c:	682e7464 	.word	0x682e7464
    8140:	00000000 	.word	0x00000000
    8144:	3d3d3d20 	.word	0x3d3d3d20
    8148:	25203d3d 	.word	0x25203d3d
    814c:	3d3d2073 	.word	0x3d3d2073
    8150:	0d3d3d3d 	.word	0x0d3d3d3d
    8154:	0000000a 	.word	0x0000000a
    8158:	53415020 	.word	0x53415020
    815c:	25203a53 	.word	0x25203a53
    8160:	7c7c2073 	.word	0x7c7c2073
    8164:	0d732520 	.word	0x0d732520
    8168:	0000000a 	.word	0x0000000a
    816c:	53415020 	.word	0x53415020
    8170:	25203a53 	.word	0x25203a53
    8174:	0a0d2073 	.word	0x0a0d2073
    8178:	00000000 	.word	0x00000000
    817c:	49414620 	.word	0x49414620
    8180:	25203a4c 	.word	0x25203a4c
    8184:	7c7c2073 	.word	0x7c7c2073
    8188:	0d732520 	.word	0x0d732520
    818c:	0000000a 	.word	0x0000000a
    8190:	49414620 	.word	0x49414620
    8194:	25203a4c 	.word	0x25203a4c
    8198:	0a0d2073 	.word	0x0a0d2073
    819c:	00000000 	.word	0x00000000
    81a0:	47200a0d 	.word	0x47200a0d
    81a4:	20646972 	.word	0x20646972
    81a8:	74696e55 	.word	0x74696e55
    81ac:	73655420 	.word	0x73655420
    81b0:	74532074 	.word	0x74532074
    81b4:	0d747261 	.word	0x0d747261
    81b8:	00000d0a 	.word	0x00000d0a
    81bc:	02020001 	.word	0x02020001
    81c0:	0a000004 	.word	0x0a000004
    81c4:	78383025 	.word	0x78383025
    81c8:	00000000 	.word	0x00000000
    81cc:	64697267 	.word	0x64697267
    81d0:	7379735f 	.word	0x7379735f
    81d4:	68633a3a 	.word	0x68633a3a
    81d8:	736b6365 	.word	0x736b6365
    81dc:	00006d75 	.word	0x00006d75
    81e0:	63656843 	.word	0x63656843
    81e4:	6d75736b 	.word	0x6d75736b
    81e8:	61655220 	.word	0x61655220
    81ec:	61432f64 	.word	0x61432f64
    81f0:	6c75636c 	.word	0x6c75636c
    81f4:	00657461 	.word	0x00657461
    81f8:	6b636170 	.word	0x6b636170
    81fc:	257b7465 	.word	0x257b7465
    8200:	25202c64 	.word	0x25202c64
    8204:	25202c64 	.word	0x25202c64
    8208:	25202c64 	.word	0x25202c64
    820c:	25202c64 	.word	0x25202c64
    8210:	25202c64 	.word	0x25202c64
    8214:	25202c64 	.word	0x25202c64
    8218:	25202c64 	.word	0x25202c64
    821c:	52207d64 	.word	0x52207d64
    8220:	3a646165 	.word	0x3a646165
    8224:	2c642520 	.word	0x2c642520
    8228:	6c614320 	.word	0x6c614320
    822c:	616c7563 	.word	0x616c7563
    8230:	203a6574 	.word	0x203a6574
    8234:	00006425 	.word	0x00006425
    8238:	63656843 	.word	0x63656843
    823c:	6d75736b 	.word	0x6d75736b
    8240:	69725720 	.word	0x69725720
    8244:	432f6574 	.word	0x432f6574
    8248:	75636c61 	.word	0x75636c61
    824c:	6574616c 	.word	0x6574616c
    8250:	00000000 	.word	0x00000000
    8254:	63656843 	.word	0x63656843
    8258:	6d75736b 	.word	0x6d75736b
    825c:	65764f20 	.word	0x65764f20
    8260:	69727772 	.word	0x69727772
    8264:	00006574 	.word	0x00006574
    8268:	61726150 	.word	0x61726150
    826c:	72706170 	.word	0x72706170
    8270:	73616b69 	.word	0x73616b69
    8274:	00000000 	.word	0x00000000
    8278:	682f2e2e 	.word	0x682f2e2e
    827c:	732f6c61 	.word	0x732f6c61
    8280:	682f6372 	.word	0x682f6372
    8284:	615f6c61 	.word	0x615f6c61
    8288:	615f6364 	.word	0x615f6364
    828c:	636e7973 	.word	0x636e7973
    8290:	0000632e 	.word	0x0000632e
    8294:	682f2e2e 	.word	0x682f2e2e
    8298:	732f6c61 	.word	0x732f6c61
    829c:	682f6372 	.word	0x682f6372
    82a0:	635f6c61 	.word	0x635f6c61
    82a4:	735f6372 	.word	0x735f6372
    82a8:	2e636e79 	.word	0x2e636e79
    82ac:	00000063 	.word	0x00000063
    82b0:	682f2e2e 	.word	0x682f2e2e
    82b4:	732f6c61 	.word	0x732f6c61
    82b8:	682f6372 	.word	0x682f6372
    82bc:	665f6c61 	.word	0x665f6c61
    82c0:	6873616c 	.word	0x6873616c
    82c4:	0000632e 	.word	0x0000632e
    82c8:	682f2e2e 	.word	0x682f2e2e
    82cc:	732f6c61 	.word	0x732f6c61
    82d0:	682f6372 	.word	0x682f6372
    82d4:	695f6c61 	.word	0x695f6c61
    82d8:	6d5f6332 	.word	0x6d5f6332
    82dc:	7973615f 	.word	0x7973615f
    82e0:	632e636e 	.word	0x632e636e
    82e4:	00000000 	.word	0x00000000
    82e8:	682f2e2e 	.word	0x682f2e2e
    82ec:	732f6c61 	.word	0x732f6c61
    82f0:	682f6372 	.word	0x682f6372
    82f4:	695f6c61 	.word	0x695f6c61
    82f8:	00632e6f 	.word	0x00632e6f
    82fc:	682f2e2e 	.word	0x682f2e2e
    8300:	732f6c61 	.word	0x732f6c61
    8304:	682f6372 	.word	0x682f6372
    8308:	715f6c61 	.word	0x715f6c61
    830c:	5f697073 	.word	0x5f697073
    8310:	2e616d64 	.word	0x2e616d64
    8314:	00000063 	.word	0x00000063
    8318:	682f2e2e 	.word	0x682f2e2e
    831c:	732f6c61 	.word	0x732f6c61
    8320:	682f6372 	.word	0x682f6372
    8324:	735f6c61 	.word	0x735f6c61
    8328:	6d5f6970 	.word	0x6d5f6970
    832c:	7973615f 	.word	0x7973615f
    8330:	632e636e 	.word	0x632e636e
    8334:	00000000 	.word	0x00000000
    8338:	682f2e2e 	.word	0x682f2e2e
    833c:	732f6c61 	.word	0x732f6c61
    8340:	682f6372 	.word	0x682f6372
    8344:	735f6c61 	.word	0x735f6c61
    8348:	6d5f6970 	.word	0x6d5f6970
    834c:	616d645f 	.word	0x616d645f
    8350:	0000632e 	.word	0x0000632e
    8354:	682f2e2e 	.word	0x682f2e2e
    8358:	732f6c61 	.word	0x732f6c61
    835c:	682f6372 	.word	0x682f6372
    8360:	745f6c61 	.word	0x745f6c61
    8364:	72656d69 	.word	0x72656d69
    8368:	0000632e 	.word	0x0000632e
    836c:	682f2e2e 	.word	0x682f2e2e
    8370:	732f6c61 	.word	0x732f6c61
    8374:	682f6372 	.word	0x682f6372
    8378:	755f6c61 	.word	0x755f6c61
    837c:	74726173 	.word	0x74726173
    8380:	7973615f 	.word	0x7973615f
    8384:	632e636e 	.word	0x632e636e
    8388:	00000000 	.word	0x00000000
    838c:	682f2e2e 	.word	0x682f2e2e
    8390:	732f6c61 	.word	0x732f6c61
    8394:	682f6372 	.word	0x682f6372
    8398:	755f6c61 	.word	0x755f6c61
    839c:	74726173 	.word	0x74726173
    83a0:	6e79735f 	.word	0x6e79735f
    83a4:	00632e63 	.word	0x00632e63
    83a8:	682f2e2e 	.word	0x682f2e2e
    83ac:	752f6c61 	.word	0x752f6c61
    83b0:	736c6974 	.word	0x736c6974
    83b4:	6372732f 	.word	0x6372732f
    83b8:	6974752f 	.word	0x6974752f
    83bc:	6c5f736c 	.word	0x6c5f736c
    83c0:	2e747369 	.word	0x2e747369
    83c4:	00000063 	.word	0x00000063
    83c8:	682f2e2e 	.word	0x682f2e2e
    83cc:	752f6c61 	.word	0x752f6c61
    83d0:	736c6974 	.word	0x736c6974
    83d4:	6372732f 	.word	0x6372732f
    83d8:	6974752f 	.word	0x6974752f
    83dc:	725f736c 	.word	0x725f736c
    83e0:	62676e69 	.word	0x62676e69
    83e4:	65666675 	.word	0x65666675
    83e8:	00632e72 	.word	0x00632e72

000083ec <_adcs>:
    83ec:	01000000 0003000c 00041807 00000000     ................
    83fc:	0014080b 00010000 000c0100 18040003     ................
    840c:	00000004 080b0000 00000014 682f2e2e     ............../h
    841c:	612f6c70 682f6364 615f6c70 632e6364     pl/adc/hpl_adc.c
    842c:	00000000                                ....

00008430 <_cfgs>:
    8430:	00200600 08068000 00200400 08068000     .. ....... .....
    8440:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
    8460:	00200b00 14000003 00200a00 08000002     .. ....... .....
    8470:	00201300 14000003 00000000 00000000     .. .............
	...
    8520:	00005400 1c000000 00005300 0c000000     .T.......S......

00008530 <user_mux_confs>:
	...
    855c:	04030201 04030201 00000000 00000000     ................
	...

00008574 <channel_confs>:
    8574:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

000085b4 <interrupt_cfg>:
    85b4:	00000002 00000002 00000002 00000002     ................
	...
    8634:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    8644:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    8654:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    8664:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    8674:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    8684:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    8694:	43000000 43000400 43000800 43000c00     ...C...C...C...C

000086a4 <_usarts>:
    86a4:	00000000 40100004 00030000 00700002     .......@......p.
    86b4:	0000aaaa 00000000 00000001 40100004     ...............@
    86c4:	00030000 00700002 0000aaaa 00000000     ......p.........
    86d4:	00000002 40100004 00030000 00700002     .......@......p.
    86e4:	00005555 00000000 00000004 40100004     UU.............@
    86f4:	00030000 00700002 0000aaaa 00000000     ......p.........
    8704:	00000006 40100004 00030000 00700002     .......@......p.
    8714:	0000aaaa 00000000                       ........

0000871c <_i2cms>:
    871c:	00000005 00200014 00000100 0000e6e5     ...... .........
    872c:	00d70000 02dc6c00                       .....l..

00008734 <sercomspi_regs>:
    8734:	3020000c 00020000 00000000 01ff0005     .. 0............
    8744:	20000c03 00000000 00000000 ff000600     ... ............
    8754:	00000701 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    8764:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
    8774:	40003800 40003c00 4101a000 4101c000     .8.@.<.@...A...A
    8784:	42001400 42001800 43001400 43001800     ...B...B...C...C

00008794 <_tcs>:
    8794:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
    87a4:	00000000 006c0001 00000308 00000021     ......l.....!...
    87b4:	00003a98 00000000 006d0002 00000308     .:........m.....
    87c4:	00000021 00003a98 00000000 006e0003     !....:........n.
    87d4:	00000308 00000021 00003a98 00000000     ....!....:......
    87e4:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    87f4:	0000632e                                .c..

000087f8 <_usb_ep_cfgs>:
    87f8:	20000824 00000000 00000040 00000000     $.. ....@.......
	...
    8810:	2000081c 00000000 00000008 200007dc     ... ........... 
    8820:	200007d4 00080040 00000000 00000000     ... @...........
	...
    8838:	20000794 00400000 682f2e2e 772f6c70     ... ..@.../hpl/w
    8848:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    8858:	7974227b 3a226570 524f5022 202c2254     {"type":"PORT", 
    8868:	74616422 203a2261 6954225b 756f656d     "data": ["Timeou
    8878:	44203a74 6f637369 63656e6e 7d5d2274     t: Disconnect"]}
    8888:	0000000d 7974227b 3a226570 52524522     ....{"type":"ERR
    8898:	2c22524f 61642220 3a226174 42225b20     OR", "data": ["B
    88a8:	65666675 764f2072 75727265 7d5d226e     uffer Overrun"]}
    88b8:	0000000d 7974227b 3a226570 41525422     ....{"type":"TRA
    88c8:	202c2250 74616422 203a2261 5254225b     P", "data": ["TR
    88d8:	22315041 000d7d5d 7974227b 3a226570     AP1"]}..{"type":
    88e8:	41525422 202c2250 74616422 203a2261     "TRAP", "data": 
    88f8:	5254225b 22325041 000d7d5d 7974227b     ["TRAP2"]}..{"ty
    8908:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    8918:	203a2261 6544225b 65646f63 0d7d5d22     a": ["Decode"]}.
    8928:	00000000 7974227b 3a226570 41572220     ....{"type": "WA
    8938:	4e494e52 202c2247 74616422 203a2261     RNING", "data": 
    8948:	7246225b 20656d61 72617453 664f2074     ["Frame Start Of
    8958:	74657366 0d7d5d22 00000000 7974227b     fset"]}.....{"ty
    8968:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    8978:	203a2261 6f43225b 63656e6e 43203a74     a": ["Connect: C
    8988:	656e6e6f 5d227463 00000d7d 7974227b     onnect"]}...{"ty
    8998:	3a226570 524f5022 202c2254 74616422     pe":"PORT", "dat
    89a8:	203a2261 6f43225b 63656e6e 44203a74     a": ["Connect: D
    89b8:	6f637369 63656e6e 7d5d2274 0000000d     isconnect"]}....
    89c8:	7974227b 3a226570 524f5022 202c2254     {"type":"PORT", 
    89d8:	74616422 203a2261 6f43225b 63656e6e     "data": ["Connec
    89e8:	56203a74 64696c61 22657461 000d7d5d     t: Validate"]}..
    89f8:	7974227b 3a226570 52452220 22524f52     {"type": "ERROR"
    8a08:	6422202c 22617461 225b203a 6d617246     , "data": ["Fram
    8a18:	72452065 22726f72 000d7d5d 7974227b     e Error"]}..{"ty
    8a28:	3a226570 52452220 22524f52 6422202c     pe": "ERROR", "d
    8a38:	22617461 225b203a 69726150 45207974     ata": ["Parity E
    8a48:	726f7272 0d7d5d22 00000000 49505351     rror"]}.....QSPI
    8a58:	6f725020 6d617267 61745320 64657472      Program Started
    8a68:	00000d0a 73616c46 72652068 20657361     ....Flash erase 
    8a78:	63637573 66737365 0d0a6c75 00000000     successful......
    8a88:	73616c46 72772068 20657469 63637573     Flash write succ
    8a98:	66737365 0d0a6c75 00000000 73616c46     essful......Flas
    8aa8:	65722068 73206461 65636375 75667373     h read successfu
    8ab8:	000d0a6c 73616c46 61642068 76206174     l...Flash data v
    8ac8:	66697265 74616369 206e6f69 6c696166     erification fail
    8ad8:	0a2e6465 0000000d 74697257 202d2065     ed......Write - 
    8ae8:	64616552 20736920 63637573 66737365     Read is successf
    8af8:	69206c75 5351206e 46204950 6873616c     ul in QSPI Flash
    8b08:	6d656d20 2e79726f 00000d0a 74696e49      memory.....Init
    8b18:	696c6169 6974617a 000d6e6f 696e5520     ialization.. Uni
    8b28:	65542074 46207473 73696e69 0d646568     t Test Finished.
    8b38:	00000000                                ....

00008b3c <keyboard_report_desc>:
    8b3c:	06090105 070501a1 e729e019 01250015     ..........)...%.
    8b4c:	08950175 01810281 65290019 65250015     u.........)e..%e
    8b5c:	06950875 08050081 05290119 01250015     u.........)...%.
    8b6c:	05950175 03950291 00c00191              u...........

00008b78 <mouse_report_desc>:
    8b78:	02090105 010901a1 090500a1 03290119     ..............).
    8b88:	01250015 03950175 05750281 01810195     ..%.u.....u.....
    8b98:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
    8ba8:	c0c00681 752f2e2e 642f6273 63697665     ....../usb/devic
    8bb8:	73752f65 2e636462 00000063              e/usbdc.c...

00008bc4 <_global_impure_ptr>:
    8bc4:	2000005c                                \.. 

00008bc8 <__sf_fake_stderr>:
	...

00008be8 <__sf_fake_stdin>:
	...

00008c08 <__sf_fake_stdout>:
	...
    8c28:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8c38:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8c48:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8c58:	00006665                                ef..

00008c5c <_init>:
    8c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c5e:	bf00      	nop
    8c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8c62:	bc08      	pop	{r3}
    8c64:	469e      	mov	lr, r3
    8c66:	4770      	bx	lr

00008c68 <__init_array_start>:
    8c68:	00000289 	.word	0x00000289

00008c6c <_fini>:
    8c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c6e:	bf00      	nop
    8c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8c72:	bc08      	pop	{r3}
    8c74:	469e      	mov	lr, r3
    8c76:	4770      	bx	lr

00008c78 <__fini_array_start>:
    8c78:	00000265 	.word	0x00000265
