
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001208c  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005ac  20000000  0001608c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205ac  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205ac  2**0
                  CONTENTS
  4 .bss          00014888  200005b0  00016640  000205b0  2**4
                  ALLOC
  5 .stack        00010000  20014e38  0002aec8  000205b0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY
  7 .comment      000000a7  00000000  00000000  000205da  2**0
                  CONTENTS, READONLY
  8 .debug_info   000c10cb  00000000  00000000  00020681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00014c37  00000000  00000000  000e174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000320b9  00000000  00000000  000f6383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002c80  00000000  00000000  00128440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000081a0  00000000  00000000  0012b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004c00d  00000000  00000000  00133260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000583e3  00000000  00000000  0017f26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00121eed  00000000  00000000  001d7650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007b30  00000000  00000000  002f9540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00004000 <exception_table>:
    4000:	38 4e 02 20 19 19 01 00 15 19 01 00 15 19 01 00     8N. ............
    4010:	15 19 01 00 15 19 01 00 15 19 01 00 00 00 00 00     ................
	...
    402c:	15 19 01 00 15 19 01 00 00 00 00 00 15 19 01 00     ................
    403c:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    404c:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    405c:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    406c:	79 f4 00 00 15 19 01 00 15 19 01 00 15 19 01 00     y...............
    407c:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    408c:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    409c:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    40ac:	15 19 01 00 15 19 01 00 21 be 00 00 4d be 00 00     ........!...M...
    40bc:	5d d5 00 00 65 d5 00 00 6d d5 00 00 75 d5 00 00     ]...e...m...u...
    40cc:	7d d5 00 00 15 19 01 00 15 19 01 00 15 19 01 00     }...............
    40dc:	15 19 01 00 15 19 01 00 15 19 01 00 00 00 00 00     ................
	...
    40f4:	d5 d0 00 00 e9 0c 01 00 f9 0c 01 00 01 0d 01 00     ................
    4104:	09 0d 01 00 11 0d 01 00 21 0d 01 00 29 0d 01 00     ........!...)...
    4114:	31 0d 01 00 15 19 01 00 15 19 01 00 15 19 01 00     1...............
    4124:	15 19 01 00 39 0d 01 00 7d 0d 01 00 85 0d 01 00     ....9...}.......
    4134:	8d 0d 01 00 95 0d 01 00 a5 0d 01 00 ad 0d 01 00     ................
    4144:	b5 0d 01 00 bd 0d 01 00 4d 0e 01 00 55 0e 01 00     ........M...U...
    4154:	5d 0e 01 00 65 0e 01 00 75 0e 01 00 7d 0e 01 00     ]...e...u...}...
    4164:	85 0e 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    4174:	15 19 01 00 00 00 00 00 00 00 00 00 e1 cf 00 00     ................
    4184:	e9 cf 00 00 f1 cf 00 00 f9 cf 00 00 00 00 00 00     ................
    4194:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    41a4:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    41b4:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    41c4:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    41d4:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    41e4:	15 19 01 00 15 19 01 00 e9 22 01 00 f9 22 01 00     ........."..."..
    41f4:	09 23 01 00 19 23 01 00 15 19 01 00 15 19 01 00     .#...#..........
    4204:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    4214:	15 19 01 00 e5 18 01 00 f5 18 01 00 fd 18 01 00     ................
    4224:	0d 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    4234:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    4244:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................
    4254:	15 19 01 00 15 19 01 00 15 19 01 00 15 19 01 00     ................

00004264 <deregister_tm_clones>:
    4264:	4803      	ldr	r0, [pc, #12]	; (4274 <deregister_tm_clones+0x10>)
    4266:	4b04      	ldr	r3, [pc, #16]	; (4278 <deregister_tm_clones+0x14>)
    4268:	4283      	cmp	r3, r0
    426a:	d002      	beq.n	4272 <deregister_tm_clones+0xe>
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <deregister_tm_clones+0x18>)
    426e:	b103      	cbz	r3, 4272 <deregister_tm_clones+0xe>
    4270:	4718      	bx	r3
    4272:	4770      	bx	lr
    4274:	0001608c 	.word	0x0001608c
    4278:	0001608c 	.word	0x0001608c
    427c:	00000000 	.word	0x00000000

00004280 <register_tm_clones>:
    4280:	4805      	ldr	r0, [pc, #20]	; (4298 <register_tm_clones+0x18>)
    4282:	4906      	ldr	r1, [pc, #24]	; (429c <register_tm_clones+0x1c>)
    4284:	1a0b      	subs	r3, r1, r0
    4286:	0fd9      	lsrs	r1, r3, #31
    4288:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    428c:	1049      	asrs	r1, r1, #1
    428e:	d002      	beq.n	4296 <register_tm_clones+0x16>
    4290:	4b03      	ldr	r3, [pc, #12]	; (42a0 <register_tm_clones+0x20>)
    4292:	b103      	cbz	r3, 4296 <register_tm_clones+0x16>
    4294:	4718      	bx	r3
    4296:	4770      	bx	lr
    4298:	0001608c 	.word	0x0001608c
    429c:	0001608c 	.word	0x0001608c
    42a0:	00000000 	.word	0x00000000

000042a4 <__do_global_dtors_aux>:
    42a4:	b510      	push	{r4, lr}
    42a6:	4c06      	ldr	r4, [pc, #24]	; (42c0 <__do_global_dtors_aux+0x1c>)
    42a8:	7823      	ldrb	r3, [r4, #0]
    42aa:	b943      	cbnz	r3, 42be <__do_global_dtors_aux+0x1a>
    42ac:	f7ff ffda 	bl	4264 <deregister_tm_clones>
    42b0:	4b04      	ldr	r3, [pc, #16]	; (42c4 <__do_global_dtors_aux+0x20>)
    42b2:	b113      	cbz	r3, 42ba <__do_global_dtors_aux+0x16>
    42b4:	4804      	ldr	r0, [pc, #16]	; (42c8 <__do_global_dtors_aux+0x24>)
    42b6:	f3af 8000 	nop.w
    42ba:	2301      	movs	r3, #1
    42bc:	7023      	strb	r3, [r4, #0]
    42be:	bd10      	pop	{r4, pc}
    42c0:	200005b0 	.word	0x200005b0
    42c4:	00000000 	.word	0x00000000
    42c8:	0001608c 	.word	0x0001608c

000042cc <frame_dummy>:
    42cc:	b508      	push	{r3, lr}
    42ce:	4b04      	ldr	r3, [pc, #16]	; (42e0 <frame_dummy+0x14>)
    42d0:	b11b      	cbz	r3, 42da <frame_dummy+0xe>
    42d2:	4904      	ldr	r1, [pc, #16]	; (42e4 <frame_dummy+0x18>)
    42d4:	4804      	ldr	r0, [pc, #16]	; (42e8 <frame_dummy+0x1c>)
    42d6:	f3af 8000 	nop.w
    42da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    42de:	e7cf      	b.n	4280 <register_tm_clones>
    42e0:	00000000 	.word	0x00000000
    42e4:	200005b4 	.word	0x200005b4
    42e8:	0001608c 	.word	0x0001608c

000042ec <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    42ec:	b410      	push	{r4}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    42ee:	780b      	ldrb	r3, [r1, #0]
    42f0:	2b81      	cmp	r3, #129	; 0x81
    42f2:	d110      	bne.n	4316 <audio_midi_req+0x2a>
    42f4:	4b1a      	ldr	r3, [pc, #104]	; (4360 <audio_midi_req+0x74>)
    42f6:	888a      	ldrh	r2, [r1, #4]
    42f8:	7919      	ldrb	r1, [r3, #4]
    42fa:	4291      	cmp	r1, r2
    42fc:	4619      	mov	r1, r3
    42fe:	d002      	beq.n	4306 <audio_midi_req+0x1a>
    4300:	795b      	ldrb	r3, [r3, #5]
    4302:	4293      	cmp	r3, r2
    4304:	d128      	bne.n	4358 <audio_midi_req+0x6c>
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    4306:	6809      	ldr	r1, [r1, #0]
    4308:	780a      	ldrb	r2, [r1, #0]
    430a:	2300      	movs	r3, #0
			switch (req->bRequest) {
				case 0x03: /* Get Protocol */
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
    430c:	4c15      	ldr	r4, [pc, #84]	; (4364 <audio_midi_req+0x78>)
    430e:	46a4      	mov	ip, r4
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    4310:	f85d 4b04 	ldr.w	r4, [sp], #4
				return usbdc_xfer(ep, NULL, 0, 0);
    4314:	4760      	bx	ip
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    4316:	f3c3 1341 	ubfx	r3, r3, #5, #2
    431a:	2b01      	cmp	r3, #1
    431c:	d11c      	bne.n	4358 <audio_midi_req+0x6c>
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    431e:	4b10      	ldr	r3, [pc, #64]	; (4360 <audio_midi_req+0x74>)
    4320:	888a      	ldrh	r2, [r1, #4]
    4322:	791c      	ldrb	r4, [r3, #4]
    4324:	4294      	cmp	r4, r2
    4326:	461c      	mov	r4, r3
    4328:	d002      	beq.n	4330 <audio_midi_req+0x44>
    432a:	795b      	ldrb	r3, [r3, #5]
    432c:	4293      	cmp	r3, r2
    432e:	d113      	bne.n	4358 <audio_midi_req+0x6c>
			switch (req->bRequest) {
    4330:	784b      	ldrb	r3, [r1, #1]
    4332:	2b03      	cmp	r3, #3
    4334:	d006      	beq.n	4344 <audio_midi_req+0x58>
    4336:	2b0b      	cmp	r3, #11
    4338:	d008      	beq.n	434c <audio_midi_req+0x60>
    433a:	f06f 000c 	mvn.w	r0, #12
}
    433e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4342:	4770      	bx	lr
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    4344:	4908      	ldr	r1, [pc, #32]	; (4368 <audio_midi_req+0x7c>)
    4346:	2300      	movs	r3, #0
    4348:	2201      	movs	r2, #1
    434a:	e7df      	b.n	430c <audio_midi_req+0x20>
				_audiodf_midi_funcd.protocol = req->wValue;
    434c:	884b      	ldrh	r3, [r1, #2]
    434e:	7223      	strb	r3, [r4, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    4350:	2300      	movs	r3, #0
    4352:	461a      	mov	r2, r3
    4354:	4619      	mov	r1, r3
    4356:	e7d9      	b.n	430c <audio_midi_req+0x20>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    4358:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    435c:	e7ef      	b.n	433e <audio_midi_req+0x52>
    435e:	bf00      	nop
    4360:	200005cc 	.word	0x200005cc
    4364:	00011b19 	.word	0x00011b19
    4368:	200005d4 	.word	0x200005d4

0000436c <audio_midi_ctrl>:
	switch (ctrl) {
    436c:	2901      	cmp	r1, #1
{
    436e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4372:	460d      	mov	r5, r1
    4374:	4614      	mov	r4, r2
	switch (ctrl) {
    4376:	d070      	beq.n	445a <audio_midi_ctrl+0xee>
    4378:	2902      	cmp	r1, #2
    437a:	f000 8092 	beq.w	44a2 <audio_midi_ctrl+0x136>
    437e:	2900      	cmp	r1, #0
    4380:	f040 8092 	bne.w	44a8 <audio_midi_ctrl+0x13c>
		return audio_midi_enable(drv, (struct usbd_descriptors *)param);
    4384:	6886      	ldr	r6, [r0, #8]
	ifc = desc->sod;
    4386:	f8df 8148 	ldr.w	r8, [pc, #328]	; 44d0 <audio_midi_ctrl+0x164>
    438a:	6810      	ldr	r0, [r2, #0]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    438c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 44d4 <audio_midi_ctrl+0x168>
    4390:	1d37      	adds	r7, r6, #4
		if (NULL == ifc) {
    4392:	b920      	cbnz	r0, 439e <audio_midi_ctrl+0x32>
			return ERR_NOT_FOUND;
    4394:	f06f 0009 	mvn.w	r0, #9
}
    4398:	b003      	add	sp, #12
    439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    439e:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    43a0:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    43a2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    43a6:	2b01      	cmp	r3, #1
    43a8:	d1f4      	bne.n	4394 <audio_midi_ctrl+0x28>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    43aa:	783b      	ldrb	r3, [r7, #0]
    43ac:	429a      	cmp	r2, r3
    43ae:	d07e      	beq.n	44ae <audio_midi_ctrl+0x142>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    43b0:	2bff      	cmp	r3, #255	; 0xff
    43b2:	d17f      	bne.n	44b4 <audio_midi_ctrl+0x148>
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    43b4:	2d01      	cmp	r5, #1
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    43b6:	f807 2b01 	strb.w	r2, [r7], #1
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    43ba:	d009      	beq.n	43d0 <audio_midi_ctrl+0x64>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    43bc:	6823      	ldr	r3, [r4, #0]
    43be:	6861      	ldr	r1, [r4, #4]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    43c0:	7818      	ldrb	r0, [r3, #0]
    43c2:	2204      	movs	r2, #4
    43c4:	4418      	add	r0, r3
    43c6:	47c0      	blx	r8
	for (i=0; i<2; i++){
    43c8:	2d01      	cmp	r5, #1
    43ca:	d042      	beq.n	4452 <audio_midi_ctrl+0xe6>
    43cc:	2501      	movs	r5, #1
    43ce:	e7e0      	b.n	4392 <audio_midi_ctrl+0x26>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    43d0:	6861      	ldr	r1, [r4, #4]
    43d2:	f8df a104 	ldr.w	sl, [pc, #260]	; 44d8 <audio_midi_ctrl+0x16c>
    43d6:	2205      	movs	r2, #5
    43d8:	47c0      	blx	r8
    43da:	4683      	mov	fp, r0
			while (NULL != ep) {
    43dc:	f1bb 0f00 	cmp.w	fp, #0
    43e0:	d0ec      	beq.n	43bc <audio_midi_ctrl+0x50>
				ep_desc.bEndpointAddress = ep[2];
    43e2:	f89b 2002 	ldrb.w	r2, [fp, #2]
    43e6:	f88d 2002 	strb.w	r2, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    43ea:	f89b 2003 	ldrb.w	r2, [fp, #3]
    43ee:	f88d 2003 	strb.w	r2, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    43f2:	f89b 1005 	ldrb.w	r1, [fp, #5]
    43f6:	f89b 2004 	ldrb.w	r2, [fp, #4]
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    43fa:	4b31      	ldr	r3, [pc, #196]	; (44c0 <audio_midi_ctrl+0x154>)
    43fc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    4400:	b292      	uxth	r2, r2
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    4402:	f8ad 2004 	strh.w	r2, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    4406:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    440a:	b2d2      	uxtb	r2, r2
    440c:	f889 2004 	strb.w	r2, [r9, #4]
				usb_debug2[0] = i;
    4410:	2201      	movs	r2, #1
    4412:	f889 2000 	strb.w	r2, [r9]
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4416:	f89d 0002 	ldrb.w	r0, [sp, #2]
    441a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    441e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4422:	b292      	uxth	r2, r2
    4424:	4798      	blx	r3
    4426:	2800      	cmp	r0, #0
    4428:	d147      	bne.n	44ba <audio_midi_ctrl+0x14e>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    442a:	f89d 2002 	ldrb.w	r2, [sp, #2]
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    442e:	f89d 0002 	ldrb.w	r0, [sp, #2]
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    4432:	0613      	lsls	r3, r2, #24
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    4434:	b2c0      	uxtb	r0, r0
    4436:	bf4c      	ite	mi
    4438:	71b0      	strbmi	r0, [r6, #6]
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    443a:	71f0      	strbpl	r0, [r6, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    443c:	47d0      	blx	sl
				desc->sod = ep;
    443e:	f8c4 b000 	str.w	fp, [r4]
	return (desc + usb_desc_len(desc));
    4442:	f89b 0000 	ldrb.w	r0, [fp]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4446:	6861      	ldr	r1, [r4, #4]
    4448:	4b1e      	ldr	r3, [pc, #120]	; (44c4 <audio_midi_ctrl+0x158>)
    444a:	4458      	add	r0, fp
    444c:	4798      	blx	r3
    444e:	4683      	mov	fp, r0
    4450:	e7c4      	b.n	43dc <audio_midi_ctrl+0x70>
	_audiodf_midi_funcd.enabled = true;
    4452:	4b1d      	ldr	r3, [pc, #116]	; (44c8 <audio_midi_ctrl+0x15c>)
	return ERR_NONE;
    4454:	2000      	movs	r0, #0
	_audiodf_midi_funcd.enabled = true;
    4456:	745d      	strb	r5, [r3, #17]
	return ERR_NONE;
    4458:	e79e      	b.n	4398 <audio_midi_ctrl+0x2c>
		return audio_midi_disable(drv, (struct usbd_descriptors *)param);
    445a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    445c:	b12a      	cbz	r2, 446a <audio_midi_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    445e:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    4460:	795b      	ldrb	r3, [r3, #5]
    4462:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4466:	2b01      	cmp	r3, #1
    4468:	d194      	bne.n	4394 <audio_midi_ctrl+0x28>
	if (func_data->func_iface[0] != 0xFF) {
    446a:	792b      	ldrb	r3, [r5, #4]
	if (func_data->func_ep_in != 0xFF) {
    446c:	79a8      	ldrb	r0, [r5, #6]
	if (func_data->func_iface[0] != 0xFF) {
    446e:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    4470:	bf1c      	itt	ne
    4472:	23ff      	movne	r3, #255	; 0xff
    4474:	712b      	strbne	r3, [r5, #4]
	if (func_data->func_iface[1] != 0xFF) {
    4476:	796b      	ldrb	r3, [r5, #5]
    4478:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    447a:	bf1c      	itt	ne
    447c:	23ff      	movne	r3, #255	; 0xff
    447e:	716b      	strbne	r3, [r5, #5]
	if (func_data->func_ep_in != 0xFF) {
    4480:	28ff      	cmp	r0, #255	; 0xff
    4482:	d003      	beq.n	448c <audio_midi_ctrl+0x120>
		usb_d_ep_deinit(func_data->func_ep_in);
    4484:	4b11      	ldr	r3, [pc, #68]	; (44cc <audio_midi_ctrl+0x160>)
    4486:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    4488:	23ff      	movs	r3, #255	; 0xff
    448a:	71ab      	strb	r3, [r5, #6]
	if (func_data->func_ep_out != 0xFF) {
    448c:	79e8      	ldrb	r0, [r5, #7]
    448e:	28ff      	cmp	r0, #255	; 0xff
    4490:	d003      	beq.n	449a <audio_midi_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    4492:	4b0e      	ldr	r3, [pc, #56]	; (44cc <audio_midi_ctrl+0x160>)
    4494:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    4496:	23ff      	movs	r3, #255	; 0xff
    4498:	71eb      	strb	r3, [r5, #7]
	_audiodf_midi_funcd.enabled = false;
    449a:	4b0b      	ldr	r3, [pc, #44]	; (44c8 <audio_midi_ctrl+0x15c>)
    449c:	2000      	movs	r0, #0
    449e:	7458      	strb	r0, [r3, #17]
	return ERR_NONE;
    44a0:	e77a      	b.n	4398 <audio_midi_ctrl+0x2c>
		return ERR_UNSUPPORTED_OP;
    44a2:	f06f 001a 	mvn.w	r0, #26
    44a6:	e777      	b.n	4398 <audio_midi_ctrl+0x2c>
	switch (ctrl) {
    44a8:	f06f 000c 	mvn.w	r0, #12
    44ac:	e774      	b.n	4398 <audio_midi_ctrl+0x2c>
				return ERR_ALREADY_INITIALIZED;
    44ae:	f06f 0011 	mvn.w	r0, #17
    44b2:	e771      	b.n	4398 <audio_midi_ctrl+0x2c>
				return ERR_NO_RESOURCE;
    44b4:	f06f 001b 	mvn.w	r0, #27
    44b8:	e76e      	b.n	4398 <audio_midi_ctrl+0x2c>
					return ERR_NOT_INITIALIZED;
    44ba:	f06f 0013 	mvn.w	r0, #19
    44be:	e76b      	b.n	4398 <audio_midi_ctrl+0x2c>
    44c0:	0000e7e9 	.word	0x0000e7e9
    44c4:	0000b59f 	.word	0x0000b59f
    44c8:	200005cc 	.word	0x200005cc
    44cc:	0000e84d 	.word	0x0000e84d
    44d0:	0000b585 	.word	0x0000b585
    44d4:	200010dc 	.word	0x200010dc
    44d8:	0000e879 	.word	0x0000e879

000044dc <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    44dc:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    44de:	4b0a      	ldr	r3, [pc, #40]	; (4508 <audiodf_midi_init+0x2c>)
    44e0:	4798      	blx	r3
    44e2:	2801      	cmp	r0, #1
    44e4:	d80c      	bhi.n	4500 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    44e6:	4809      	ldr	r0, [pc, #36]	; (450c <audiodf_midi_init+0x30>)
    44e8:	4b09      	ldr	r3, [pc, #36]	; (4510 <audiodf_midi_init+0x34>)
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    44ea:	e9c0 3006 	strd	r3, r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <audiodf_midi_init+0x38>)
    44f0:	3014      	adds	r0, #20
    44f2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    44f4:	2001      	movs	r0, #1
    44f6:	4908      	ldr	r1, [pc, #32]	; (4518 <audiodf_midi_init+0x3c>)
    44f8:	4b08      	ldr	r3, [pc, #32]	; (451c <audiodf_midi_init+0x40>)
    44fa:	4798      	blx	r3
	return ERR_NONE;
    44fc:	2000      	movs	r0, #0
}
    44fe:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    4500:	f06f 0010 	mvn.w	r0, #16
    4504:	e7fb      	b.n	44fe <audiodf_midi_init+0x22>
    4506:	bf00      	nop
    4508:	00011f51 	.word	0x00011f51
    450c:	200005cc 	.word	0x200005cc
    4510:	0000436d 	.word	0x0000436d
    4514:	00011ef9 	.word	0x00011ef9
    4518:	20000000 	.word	0x20000000
    451c:	00011e71 	.word	0x00011e71

00004520 <audiodf_midi_write>:
}



int32_t audiodf_midi_write(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    4520:	b410      	push	{r4}
		return ERR_DENIED;
	}
	
	// if previous xfer is completed
	
	_audiodf_midi_funcd.midi_report[0] = byte0;
    4522:	4c07      	ldr	r4, [pc, #28]	; (4540 <audiodf_midi_write+0x20>)
    4524:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    4526:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    4528:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    452a:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    452c:	79a0      	ldrb	r0, [r4, #6]
    452e:	f104 0109 	add.w	r1, r4, #9
    4532:	4c04      	ldr	r4, [pc, #16]	; (4544 <audiodf_midi_write+0x24>)
    4534:	2300      	movs	r3, #0
    4536:	46a4      	mov	ip, r4
    4538:	2204      	movs	r2, #4
	
}
    453a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    453e:	4760      	bx	ip
    4540:	200005cc 	.word	0x200005cc
    4544:	00011b19 	.word	0x00011b19

00004548 <audiodf_midi_write_status>:

int32_t audiodf_midi_write_status(){
    4548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	
	struct usb_d_ep_status epstat;
	return usb_d_ep_get_status(_audiodf_midi_funcd.func_ep_in, &epstat);
    454a:	4b04      	ldr	r3, [pc, #16]	; (455c <audiodf_midi_write_status+0x14>)
    454c:	a901      	add	r1, sp, #4
    454e:	7998      	ldrb	r0, [r3, #6]
    4550:	4b03      	ldr	r3, [pc, #12]	; (4560 <audiodf_midi_write_status+0x18>)
    4552:	4798      	blx	r3
	
}
    4554:	b005      	add	sp, #20
    4556:	f85d fb04 	ldr.w	pc, [sp], #4
    455a:	bf00      	nop
    455c:	200005cc 	.word	0x200005cc
    4560:	0000e9a1 	.word	0x0000e9a1

00004564 <audiodf_midi_read>:



int32_t audiodf_midi_read(uint8_t *buf, uint32_t size)
{
    4564:	b410      	push	{r4}
    4566:	460a      	mov	r2, r1
	if (!audiodf_midi_is_enabled()) {
		return ERR_DENIED;
	}
		
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_out, buf, size, false);
    4568:	4c04      	ldr	r4, [pc, #16]	; (457c <audiodf_midi_read+0x18>)
    456a:	4601      	mov	r1, r0
    456c:	4804      	ldr	r0, [pc, #16]	; (4580 <audiodf_midi_read+0x1c>)
    456e:	46a4      	mov	ip, r4
    4570:	79c0      	ldrb	r0, [r0, #7]
}
    4572:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_out, buf, size, false);
    4576:	2300      	movs	r3, #0
    4578:	4760      	bx	ip
    457a:	bf00      	nop
    457c:	00011b19 	.word	0x00011b19
    4580:	200005cc 	.word	0x200005cc

00004584 <audiodf_midi_register_callback>:


int32_t audiodf_midi_register_callback(enum audiodf_midi_cb_type cb_type, FUNC_PTR func)
{
    4584:	b510      	push	{r4, lr}
    4586:	460a      	mov	r2, r1
	switch (cb_type) {
    4588:	b120      	cbz	r0, 4594 <audiodf_midi_register_callback+0x10>
    458a:	2801      	cmp	r0, #1
    458c:	d009      	beq.n	45a2 <audiodf_midi_register_callback+0x1e>
    458e:	f06f 000c 	mvn.w	r0, #12
		break;
		default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
}
    4592:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    4594:	4b05      	ldr	r3, [pc, #20]	; (45ac <audiodf_midi_register_callback+0x28>)
    4596:	79d8      	ldrb	r0, [r3, #7]
    4598:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    459a:	4b05      	ldr	r3, [pc, #20]	; (45b0 <audiodf_midi_register_callback+0x2c>)
    459c:	4798      	blx	r3
	return ERR_NONE;
    459e:	2000      	movs	r0, #0
		break;
    45a0:	e7f7      	b.n	4592 <audiodf_midi_register_callback+0xe>
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    45a2:	4b02      	ldr	r3, [pc, #8]	; (45ac <audiodf_midi_register_callback+0x28>)
    45a4:	2102      	movs	r1, #2
    45a6:	7998      	ldrb	r0, [r3, #6]
    45a8:	e7f7      	b.n	459a <audiodf_midi_register_callback+0x16>
    45aa:	bf00      	nop
    45ac:	200005cc 	.word	0x200005cc
    45b0:	0000ea61 	.word	0x0000ea61

000045b4 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45b4:	b570      	push	{r4, r5, r6, lr}
	instance->buffer_depth = buffer_depth;
	
	instance->result_format = result_format;
	instance->result_resolution = result_resolution;
	
	instance->result_average = 0;
    45b6:	2500      	movs	r5, #0
	instance->result_format = result_format;
    45b8:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    45ba:	7183      	strb	r3, [r0, #6]
uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45bc:	4604      	mov	r4, r0
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45be:	4b0a      	ldr	r3, [pc, #40]	; (45e8 <grid_ain_channel_init+0x34>)
	instance->buffer_depth = buffer_depth;
    45c0:	7101      	strb	r1, [r0, #4]
	instance->result_average = 0;
    45c2:	8145      	strh	r5, [r0, #10]
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45c4:	0048      	lsls	r0, r1, #1
uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45c6:	460e      	mov	r6, r1
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45c8:	4798      	blx	r3
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45ca:	462b      	mov	r3, r5
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45cc:	6020      	str	r0, [r4, #0]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45ce:	462a      	mov	r2, r5
    45d0:	b2d9      	uxtb	r1, r3
    45d2:	428e      	cmp	r6, r1
    45d4:	d803      	bhi.n	45de <grid_ain_channel_init+0x2a>
		instance->buffer[i] = 0;
	}
	
	instance->result_changed = 0;
    45d6:	81a2      	strh	r2, [r4, #12]
	instance->result_value = 0;
    45d8:	8122      	strh	r2, [r4, #8]
		
	return 0;
}
    45da:	2000      	movs	r0, #0
    45dc:	bd70      	pop	{r4, r5, r6, pc}
		instance->buffer[i] = 0;
    45de:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45e2:	3301      	adds	r3, #1
    45e4:	e7f4      	b.n	45d0 <grid_ain_channel_init+0x1c>
    45e6:	bf00      	nop
    45e8:	00012ba1 	.word	0x00012ba1

000045ec <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    45ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45f0:	4605      	mov	r5, r0
    45f2:	4699      	mov	r9, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    45f4:	0100      	lsls	r0, r0, #4
    45f6:	4b0b      	ldr	r3, [pc, #44]	; (4624 <grid_ain_init+0x38>)
    45f8:	4e0b      	ldr	r6, [pc, #44]	; (4628 <grid_ain_init+0x3c>)

	for (uint8_t i=0; i<length; i++){
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    45fa:	f8df a030 	ldr.w	sl, [pc, #48]	; 462c <grid_ain_init+0x40>
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    45fe:	460f      	mov	r7, r1
    4600:	4690      	mov	r8, r2
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    4602:	4798      	blx	r3
	for (uint8_t i=0; i<length; i++){
    4604:	2400      	movs	r4, #0
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    4606:	6030      	str	r0, [r6, #0]
	for (uint8_t i=0; i<length; i++){
    4608:	42a5      	cmp	r5, r4
    460a:	d102      	bne.n	4612 <grid_ain_init+0x26>
	}

	return 0;
}
    460c:	2000      	movs	r0, #0
    460e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    4612:	6830      	ldr	r0, [r6, #0]
    4614:	464b      	mov	r3, r9
    4616:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    461a:	4642      	mov	r2, r8
    461c:	4639      	mov	r1, r7
    461e:	47d0      	blx	sl
	for (uint8_t i=0; i<length; i++){
    4620:	3401      	adds	r4, #1
    4622:	e7f1      	b.n	4608 <grid_ain_init+0x1c>
    4624:	00012ba1 	.word	0x00012ba1
    4628:	20004044 	.word	0x20004044
    462c:	000045b5 	.word	0x000045b5

00004630 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    4630:	4b30      	ldr	r3, [pc, #192]	; (46f4 <grid_ain_add_sample+0xc4>)
uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    4632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    4636:	681a      	ldr	r2, [r3, #0]
    4638:	0104      	lsls	r4, r0, #4
    463a:	eb02 1300 	add.w	r3, r2, r0, lsl #4
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    463e:	5914      	ldr	r4, [r2, r4]
    4640:	f893 e004 	ldrb.w	lr, [r3, #4]
    4644:	2200      	movs	r2, #0
	uint8_t maximum_index = 0;
    4646:	4615      	mov	r5, r2
	uint8_t minimum_index = 0;
    4648:	4616      	mov	r6, r2
	uint16_t maximum = 0;
    464a:	4691      	mov	r9, r2
	uint16_t minimum = -1; // -1 trick to get the largest possible number
    464c:	f64f 78ff 	movw	r8, #65535	; 0xffff
	uint32_t sum = 0;
    4650:	4610      	mov	r0, r2
    4652:	fa5f fc82 	uxtb.w	ip, r2
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    4656:	45e6      	cmp	lr, ip
    4658:	d83c      	bhi.n	46d4 <grid_ain_add_sample+0xa4>
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
	
	if (value>average){		
    465a:	180a      	adds	r2, r1, r0
	uint16_t average = sum/instance->buffer_depth;
    465c:	fbb0 f0fe 	udiv	r0, r0, lr
	if (value>average){		
    4660:	b280      	uxth	r0, r0
    4662:	4288      	cmp	r0, r1
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    4664:	bf34      	ite	cc
    4666:	b230      	sxthcc	r0, r6
		instance->buffer[minimum_index] = value;		
	}else{
		// Replace maximum in the buffer and recalculate sum
		sum = sum - instance->buffer[maximum_index] + value;
    4668:	b228      	sxthcs	r0, r5
    466a:	f834 5010 	ldrh.w	r5, [r4, r0, lsl #1]
		instance->buffer[maximum_index] = value;
    466e:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
    4672:	1b52      	subs	r2, r2, r5
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    4674:	7919      	ldrb	r1, [r3, #4]
    4676:	fbb2 f2f1 	udiv	r2, r2, r1
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    467a:	7999      	ldrb	r1, [r3, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    467c:	795c      	ldrb	r4, [r3, #5]
	
	uint16_t downsampled = average>>downscale_factor;
	uint16_t upscaled    = downsampled<<upscale_factor;
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    467e:	895e      	ldrh	r6, [r3, #10]
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    4680:	f8b3 e008 	ldrh.w	lr, [r3, #8]
	uint8_t downscale_factor = (16-instance->result_resolution);
    4684:	f1c1 0710 	rsb	r7, r1, #16
	uint16_t downsampled = average>>downscale_factor;
    4688:	b295      	uxth	r5, r2
    468a:	b2ff      	uxtb	r7, r7
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    468c:	1a61      	subs	r1, r4, r1
	uint16_t upscaled    = downsampled<<upscale_factor;
    468e:	b2c8      	uxtb	r0, r1
	uint16_t downsampled = average>>downscale_factor;
    4690:	fa45 f107 	asr.w	r1, r5, r7
	uint16_t upscaled    = downsampled<<upscale_factor;
    4694:	b289      	uxth	r1, r1
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    4696:	1b76      	subs	r6, r6, r5
	uint16_t upscaled    = downsampled<<upscale_factor;
    4698:	4081      	lsls	r1, r0
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    469a:	2e00      	cmp	r6, #0
	uint16_t upscaled    = downsampled<<upscale_factor;
    469c:	fa1f fc81 	uxth.w	ip, r1
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    46a0:	bfb8      	it	lt
    46a2:	4276      	neglt	r6, r6
    46a4:	2501      	movs	r5, #1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46a6:	45e6      	cmp	lr, ip
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    46a8:	fa05 f707 	lsl.w	r7, r5, r7
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46ac:	d01f      	beq.n	46ee <grid_ain_add_sample+0xbe>
    46ae:	42be      	cmp	r6, r7
    46b0:	dc09      	bgt.n	46c6 <grid_ain_add_sample+0x96>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    46b2:	fa05 f404 	lsl.w	r4, r5, r4
    46b6:	fa05 f000 	lsl.w	r0, r5, r0
    46ba:	1a20      	subs	r0, r4, r0
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46bc:	4560      	cmp	r0, ip
    46be:	d002      	beq.n	46c6 <grid_ain_add_sample+0x96>
    46c0:	f1bc 0f00 	cmp.w	ip, #0
    46c4:	d113      	bne.n	46ee <grid_ain_add_sample+0xbe>
		
		instance->result_average = average;
		instance->result_value = upscaled;
		instance->result_changed = 1;
    46c6:	2001      	movs	r0, #1
	average = sum/instance->buffer_depth;
    46c8:	815a      	strh	r2, [r3, #10]
		instance->result_value = upscaled;
    46ca:	f8a3 c008 	strh.w	ip, [r3, #8]
		instance->result_changed = 1;
    46ce:	8198      	strh	r0, [r3, #12]
		return 1;
	}else{		
		return 0;
	}
	
}
    46d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint16_t current = instance->buffer[i];
    46d4:	f834 7012 	ldrh.w	r7, [r4, r2, lsl #1]
		if (current > maximum){
    46d8:	45b9      	cmp	r9, r7
    46da:	bf3c      	itt	cc
    46dc:	4665      	movcc	r5, ip
    46de:	46b9      	movcc	r9, r7
		if (current < minimum){
    46e0:	45b8      	cmp	r8, r7
		sum += current;
    46e2:	4438      	add	r0, r7
		if (current < minimum){
    46e4:	bf84      	itt	hi
    46e6:	4666      	movhi	r6, ip
    46e8:	46b8      	movhi	r8, r7
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    46ea:	3201      	adds	r2, #1
    46ec:	e7b1      	b.n	4652 <grid_ain_add_sample+0x22>
		return 0;
    46ee:	2000      	movs	r0, #0
    46f0:	e7ee      	b.n	46d0 <grid_ain_add_sample+0xa0>
    46f2:	bf00      	nop
    46f4:	20004044 	.word	0x20004044

000046f8 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    46f8:	4b02      	ldr	r3, [pc, #8]	; (4704 <grid_ain_get_changed+0xc>)
    46fa:	681b      	ldr	r3, [r3, #0]
    46fc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    4700:	7b00      	ldrb	r0, [r0, #12]
    4702:	4770      	bx	lr
    4704:	20004044 	.word	0x20004044

00004708 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    4708:	4b08      	ldr	r3, [pc, #32]	; (472c <grid_ain_get_average+0x24>)
    470a:	681a      	ldr	r2, [r3, #0]
	instance->result_changed = 0;
	
	if (resolution>6 && resolution<15){
    470c:	1fcb      	subs	r3, r1, #7
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    470e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
	if (resolution>6 && resolution<15){
    4712:	2b07      	cmp	r3, #7
	instance->result_changed = 0;
    4714:	f04f 0000 	mov.w	r0, #0
    4718:	8190      	strh	r0, [r2, #12]
	if (resolution>6 && resolution<15){
    471a:	d805      	bhi.n	4728 <grid_ain_get_average+0x20>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    471c:	7950      	ldrb	r0, [r2, #5]
    471e:	8913      	ldrh	r3, [r2, #8]
    4720:	1a40      	subs	r0, r0, r1
    4722:	fa43 f000 	asr.w	r0, r3, r0
    4726:	b280      	uxth	r0, r0
		
	}
	else{
		return 0;
	}
}
    4728:	4770      	bx	lr
    472a:	bf00      	nop
    472c:	20004044 	.word	0x20004044

00004730 <grid_port_reset_receiver>:
#include "grid_buf.h"

// PORTS


void grid_port_reset_receiver(struct grid_port* por){
    4730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
	usart_async_disable(por->usart);
    4732:	4b24      	ldr	r3, [pc, #144]	; (47c4 <grid_port_reset_receiver+0x94>)
	
	
	por->ping_partner_token = 255;
	por->ping_local_token = 255;
	
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4734:	4e24      	ldr	r6, [pc, #144]	; (47c8 <grid_port_reset_receiver+0x98>)
void grid_port_reset_receiver(struct grid_port* por){
    4736:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    4738:	6840      	ldr	r0, [r0, #4]
    473a:	4798      	blx	r3
	por->partner_status = 0;
    473c:	f642 734b 	movw	r3, #12107	; 0x2f4b
	por->rx_double_buffer_seek_start_index = 0;
    4740:	2500      	movs	r5, #0
	por->rx_double_buffer_read_start_index = 0;
    4742:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	por->ping_local_token = 255;
    4746:	f642 7731 	movw	r7, #12081	; 0x2f31
	por->partner_status = 0;
    474a:	54e5      	strb	r5, [r4, r3]
	por->ping_partner_token = 255;
    474c:	f642 7332 	movw	r3, #12082	; 0x2f32
    4750:	22ff      	movs	r2, #255	; 0xff
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4752:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
	por->ping_partner_token = 255;
    4756:	54e2      	strb	r2, [r4, r3]
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4758:	2102      	movs	r1, #2
	por->ping_local_token = 255;
    475a:	55e2      	strb	r2, [r4, r7]
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    475c:	303b      	adds	r0, #59	; 0x3b
    475e:	47b0      	blx	r6
	grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4760:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
    4764:	5de2      	ldrb	r2, [r4, r7]
    4766:	2102      	movs	r1, #2
    4768:	3039      	adds	r0, #57	; 0x39
    476a:	47b0      	blx	r6
	grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    476c:	f642 7347 	movw	r3, #12103	; 0x2f47
    4770:	f504 563c 	add.w	r6, r4, #12032	; 0x2f00
    4774:	3633      	adds	r6, #51	; 0x33
    4776:	5ce1      	ldrb	r1, [r4, r3]
    4778:	4b14      	ldr	r3, [pc, #80]	; (47cc <grid_port_reset_receiver+0x9c>)
    477a:	9101      	str	r1, [sp, #4]
    477c:	4630      	mov	r0, r6
    477e:	4798      	blx	r3
    4780:	9901      	ldr	r1, [sp, #4]
    4782:	4b13      	ldr	r3, [pc, #76]	; (47d0 <grid_port_reset_receiver+0xa0>)
    4784:	4602      	mov	r2, r0
    4786:	4630      	mov	r0, r6
    4788:	4798      	blx	r3


	
	por->rx_double_buffer_timeout = 0;
	grid_sys_port_reset_dma(por);
    478a:	4b12      	ldr	r3, [pc, #72]	; (47d4 <grid_port_reset_receiver+0xa4>)
	por->rx_double_buffer_timeout = 0;
    478c:	61e5      	str	r5, [r4, #28]
	grid_sys_port_reset_dma(por);
    478e:	4620      	mov	r0, r4
    4790:	4798      	blx	r3
	
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    4792:	f504 539d 	add.w	r3, r4, #5024	; 0x13a0
    4796:	3314      	adds	r3, #20
    4798:	f504 521c 	add.w	r2, r4, #9984	; 0x2700
    479c:	323c      	adds	r2, #60	; 0x3c
    479e:	4619      	mov	r1, r3
		por->rx_double_buffer[i] = 0;
    47a0:	f803 5b01 	strb.w	r5, [r3], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    47a4:	4293      	cmp	r3, r2
    47a6:	d1fb      	bne.n	47a0 <grid_port_reset_receiver+0x70>
    47a8:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	}
	
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;
    47ac:	2200      	movs	r2, #0
    47ae:	f803 2b01 	strb.w	r2, [r3], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    47b2:	428b      	cmp	r3, r1
    47b4:	d1fb      	bne.n	47ae <grid_port_reset_receiver+0x7e>
	}
	
	usart_async_enable(por->usart);
    47b6:	6860      	ldr	r0, [r4, #4]
    47b8:	4b07      	ldr	r3, [pc, #28]	; (47d8 <grid_port_reset_receiver+0xa8>)
	
}
    47ba:	b003      	add	sp, #12
    47bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	usart_async_enable(por->usart);
    47c0:	4718      	bx	r3
    47c2:	bf00      	nop
    47c4:	00010241 	.word	0x00010241
    47c8:	00009821 	.word	0x00009821
    47cc:	00009969 	.word	0x00009969
    47d0:	0000999d 	.word	0x0000999d
    47d4:	000093b1 	.word	0x000093b1
    47d8:	00010215 	.word	0x00010215

000047dc <grid_buffer_init>:



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
	
	grid_buffer_error_count = 0;
    47dc:	4a0f      	ldr	r2, [pc, #60]	; (481c <grid_buffer_init+0x40>)
    47de:	2300      	movs	r3, #0
uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    47e0:	b510      	push	{r4, lr}
    47e2:	3002      	adds	r0, #2
	grid_buffer_error_count = 0;
    47e4:	7013      	strb	r3, [r2, #0]
	
	buf->buffer_length = length;
	
	buf->read_length   = 0;
    47e6:	f8a0 33ee 	strh.w	r3, [r0, #1006]	; 0x3ee
	buf->buffer_length = length;
    47ea:	f820 1c02 	strh.w	r1, [r0, #-2]
	
	buf->read_start    = 0;
    47ee:	f8a0 33e8 	strh.w	r3, [r0, #1000]	; 0x3e8
	buf->read_stop     = 0;
    47f2:	f8a0 33ea 	strh.w	r3, [r0, #1002]	; 0x3ea
	buf->read_active   = 0;
    47f6:	f8a0 33ec 	strh.w	r3, [r0, #1004]	; 0x3ec
	
	buf->write_start    = 0;
    47fa:	f8a0 33f0 	strh.w	r3, [r0, #1008]	; 0x3f0
	buf->write_stop     = 0;
    47fe:	f8a0 33f2 	strh.w	r3, [r0, #1010]	; 0x3f2
	buf->write_active   = 0;
    4802:	f8a0 33f4 	strh.w	r3, [r0, #1012]	; 0x3f4
	

	for (uint16_t i=0; i<buf->buffer_length; i++){
		buf->buffer_storage[i] = 0;
    4806:	461c      	mov	r4, r3
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4808:	b29a      	uxth	r2, r3
    480a:	4291      	cmp	r1, r2
    480c:	d801      	bhi.n	4812 <grid_buffer_init+0x36>
	}
	
	return 1;
	
}
    480e:	2001      	movs	r0, #1
    4810:	bd10      	pop	{r4, pc}
		buf->buffer_storage[i] = 0;
    4812:	f800 4b01 	strb.w	r4, [r0], #1
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4816:	3301      	adds	r3, #1
    4818:	e7f6      	b.n	4808 <grid_buffer_init+0x2c>
    481a:	bf00      	nop
    481c:	20004038 	.word	0x20004038

00004820 <grid_buffer_get_space>:

uint16_t grid_buffer_get_space(struct grid_buffer* buf){
	
	uint16_t space = 0;
		
	if (buf->read_start > buf->write_start){
    4820:	f8b0 33ea 	ldrh.w	r3, [r0, #1002]	; 0x3ea
    4824:	f8b0 23f2 	ldrh.w	r2, [r0, #1010]	; 0x3f2
    4828:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    482a:	bf9b      	ittet	ls
    482c:	8800      	ldrhls	r0, [r0, #0]
    482e:	18c0      	addls	r0, r0, r3
		space = buf->read_start - buf->write_start;
    4830:	1a98      	subhi	r0, r3, r2
		space = buf->buffer_length - buf->write_start + buf->read_start;
    4832:	1a80      	subls	r0, r0, r2
    4834:	b280      	uxth	r0, r0
	}
	
	return space;
}
    4836:	4770      	bx	lr

00004838 <grid_buffer_write_init>:





uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    4838:	b510      	push	{r4, lr}
	
	
	
	uint16_t space = grid_buffer_get_space(buf);
    483a:	4b0c      	ldr	r3, [pc, #48]	; (486c <grid_buffer_write_init+0x34>)
uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    483c:	4604      	mov	r4, r0
	uint16_t space = grid_buffer_get_space(buf);
    483e:	4798      	blx	r3

	
	if (space>length){
    4840:	4288      	cmp	r0, r1
    4842:	d90b      	bls.n	485c <grid_buffer_write_init+0x24>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    4844:	f8b4 33f2 	ldrh.w	r3, [r4, #1010]	; 0x3f2
    4848:	8820      	ldrh	r0, [r4, #0]
    484a:	440b      	add	r3, r1
    484c:	fbb3 f2f0 	udiv	r2, r3, r0
    4850:	fb00 3312 	mls	r3, r0, r2, r3
    4854:	f8a4 33f4 	strh.w	r3, [r4, #1012]	; 0x3f4
	}
	
	
	
	
}
    4858:	4608      	mov	r0, r1
    485a:	bd10      	pop	{r4, pc}
		grid_buffer_error_count++;
    485c:	4a04      	ldr	r2, [pc, #16]	; (4870 <grid_buffer_write_init+0x38>)
    485e:	7813      	ldrb	r3, [r2, #0]
    4860:	3301      	adds	r3, #1
    4862:	b2db      	uxtb	r3, r3
    4864:	7013      	strb	r3, [r2, #0]
		return 0; // failed
    4866:	2100      	movs	r1, #0
    4868:	e7f6      	b.n	4858 <grid_buffer_write_init+0x20>
    486a:	bf00      	nop
    486c:	00004821 	.word	0x00004821
    4870:	20004038 	.word	0x20004038

00004874 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    4874:	f8b0 33f6 	ldrh.w	r3, [r0, #1014]	; 0x3f6
    4878:	18c2      	adds	r2, r0, r3
		
	buf->write_active++;
    487a:	3301      	adds	r3, #1
	buf->buffer_storage[buf->write_active] = character;
    487c:	7091      	strb	r1, [r2, #2]
	buf->write_active %= buf->buffer_length;
    487e:	8801      	ldrh	r1, [r0, #0]
    4880:	b29b      	uxth	r3, r3
    4882:	fbb3 f2f1 	udiv	r2, r3, r1
    4886:	fb01 3312 	mls	r3, r1, r2, r3
    488a:	f8a0 33f6 	strh.w	r3, [r0, #1014]	; 0x3f6
		
	return 1;
		

}
    488e:	2001      	movs	r0, #1
    4890:	4770      	bx	lr
	...

00004894 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    4894:	f8b0 33f4 	ldrh.w	r3, [r0, #1012]	; 0x3f4
    4898:	f8b0 23f6 	ldrh.w	r2, [r0, #1014]	; 0x3f6
    489c:	4293      	cmp	r3, r2
		buf->write_start = buf->write_active;
		return 1;
	}
	else{
		
		grid_buffer_error_count++;
    489e:	bf17      	itett	ne
    48a0:	4a05      	ldrne	r2, [pc, #20]	; (48b8 <grid_buffer_write_acknowledge+0x24>)
		buf->write_start = buf->write_active;
    48a2:	f8a0 33f2 	strheq.w	r3, [r0, #1010]	; 0x3f2
		grid_buffer_error_count++;
    48a6:	7813      	ldrbne	r3, [r2, #0]
    48a8:	3301      	addne	r3, #1
    48aa:	bf17      	itett	ne
    48ac:	b2db      	uxtbne	r3, r3
		return 1;
    48ae:	2001      	moveq	r0, #1
		grid_buffer_error_count++;
    48b0:	7013      	strbne	r3, [r2, #0]
    48b2:	2000      	movne	r0, #0
		return 0;
	}
	
	
}
    48b4:	4770      	bx	lr
    48b6:	bf00      	nop
    48b8:	20004038 	.word	0x20004038

000048bc <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48c0:	ed2d 8b02 	vpush	{d8}
	uint8_t buffer[length];
    48c4:	1dd3      	adds	r3, r2, #7
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48c6:	b08b      	sub	sp, #44	; 0x2c
    48c8:	4690      	mov	r8, r2
	uint8_t buffer[length];
    48ca:	08db      	lsrs	r3, r3, #3
    48cc:	466a      	mov	r2, sp
    48ce:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
	for (uint16_t i = 0; i<length; i++){
    48d2:	2200      	movs	r2, #0
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48d4:	af02      	add	r7, sp, #8
	uint8_t buffer[length];
    48d6:	469d      	mov	sp, r3
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48d8:	4604      	mov	r4, r0
    48da:	6a83      	ldr	r3, [r0, #40]	; 0x28
	uint8_t buffer[length];
    48dc:	f10d 0908 	add.w	r9, sp, #8
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    48e0:	f241 3088 	movw	r0, #5000	; 0x1388
    48e4:	f241 35b4 	movw	r5, #5044	; 0x13b4
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    48e8:	4694      	mov	ip, r2
	for (uint16_t i = 0; i<length; i++){
    48ea:	b291      	uxth	r1, r2
    48ec:	4588      	cmp	r8, r1
    48ee:	f200 80e3 	bhi.w	4ab8 <grid_port_receive_decode+0x1fc>
	for (uint16_t i = 0; i<length; i++){
    48f2:	2200      	movs	r2, #0
	message = &buffer[0];
    48f4:	464d      	mov	r5, r9
	for (uint16_t i = 0; i<length; i++){
    48f6:	f241 3088 	movw	r0, #5000	; 0x1388
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    48fa:	f241 3cb4 	movw	ip, #5044	; 0x13b4
    48fe:	4696      	mov	lr, r2
	for (uint16_t i = 0; i<length; i++){
    4900:	b291      	uxth	r1, r2
    4902:	4588      	cmp	r8, r1
    4904:	f200 80e5 	bhi.w	4ad2 <grid_port_receive_decode+0x216>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    4908:	4443      	add	r3, r8
    490a:	fbb3 f2f0 	udiv	r2, r3, r0
    490e:	fb00 3312 	mls	r3, r0, r2, r3
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    4912:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
	por->rx_double_buffer_status = 0;
    4916:	2300      	movs	r3, #0
    4918:	6223      	str	r3, [r4, #32]
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    491a:	f8df a250 	ldr.w	sl, [pc, #592]	; 4b6c <grid_port_receive_decode+0x2b0>
    491e:	f8df b250 	ldr.w	fp, [pc, #592]	; 4b70 <grid_port_receive_decode+0x2b4>
    4922:	4b88      	ldr	r3, [pc, #544]	; (4b44 <grid_port_receive_decode+0x288>)
	for (uint16_t i = 1; i<length; i++){
    4924:	2601      	movs	r6, #1
    4926:	45b0      	cmp	r8, r6
    4928:	f200 80dd 	bhi.w	4ae6 <grid_port_receive_decode+0x22a>
	if (message[0] == GRID_CONST_SOH && message[length-1] == GRID_CONST_LF){
    492c:	782b      	ldrb	r3, [r5, #0]
    492e:	2b01      	cmp	r3, #1
    4930:	f040 80bc 	bne.w	4aac <grid_port_receive_decode+0x1f0>
    4934:	eb05 0308 	add.w	r3, r5, r8
    4938:	f813 9c01 	ldrb.w	r9, [r3, #-1]
    493c:	f1b9 0f0a 	cmp.w	r9, #10
    4940:	f040 80b4 	bne.w	4aac <grid_port_receive_decode+0x1f0>
		checksum_received = grid_msg_checksum_read(message, length);
    4944:	4b80      	ldr	r3, [pc, #512]	; (4b48 <grid_port_receive_decode+0x28c>)
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    4946:	4e81      	ldr	r6, [pc, #516]	; (4b4c <grid_port_receive_decode+0x290>)
		checksum_received = grid_msg_checksum_read(message, length);
    4948:	4641      	mov	r1, r8
    494a:	4628      	mov	r0, r5
    494c:	4798      	blx	r3
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    494e:	4641      	mov	r1, r8
		checksum_received = grid_msg_checksum_read(message, length);
    4950:	4682      	mov	sl, r0
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    4952:	4628      	mov	r0, r5
    4954:	47b0      	blx	r6
		if (checksum_calculated == checksum_received && error_flag == 0){
    4956:	4582      	cmp	sl, r0
    4958:	f040 81fc 	bne.w	4d54 <grid_port_receive_decode+0x498>
			if (message[1] == GRID_CONST_BRC){ // Broadcast message
    495c:	786b      	ldrb	r3, [r5, #1]
    495e:	2b0f      	cmp	r3, #15
    4960:	f040 810c 	bne.w	4b7c <grid_port_receive_decode+0x2c0>
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    4964:	f107 061f 	add.w	r6, r7, #31
				uint8_t error=0;
    4968:	f04f 0300 	mov.w	r3, #0
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    496c:	f8df b204 	ldr.w	fp, [pc, #516]	; 4b74 <grid_port_receive_decode+0x2b8>
				uint8_t error=0;
    4970:	77fb      	strb	r3, [r7, #31]
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    4972:	2202      	movs	r2, #2
    4974:	4633      	mov	r3, r6
    4976:	2104      	movs	r1, #4
    4978:	4628      	mov	r0, r5
    497a:	47d8      	blx	fp
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    497c:	4649      	mov	r1, r9
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    497e:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    4980:	4633      	mov	r3, r6
    4982:	2202      	movs	r2, #2
    4984:	4628      	mov	r0, r5
    4986:	47d8      	blx	fp
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    4988:	4633      	mov	r3, r6
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    498a:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    498c:	2202      	movs	r2, #2
    498e:	2106      	movs	r1, #6
    4990:	4628      	mov	r0, r5
    4992:	47d8      	blx	fp
    4994:	b2c3      	uxtb	r3, r0
    4996:	617b      	str	r3, [r7, #20]
    4998:	f1a3 0a7f 	sub.w	sl, r3, #127	; 0x7f
				int8_t received_dy  = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    499c:	2202      	movs	r2, #2
    499e:	4633      	mov	r3, r6
    49a0:	2108      	movs	r1, #8
    49a2:	4628      	mov	r0, r5
    49a4:	47d8      	blx	fp
    49a6:	b2c3      	uxtb	r3, r0
    49a8:	613b      	str	r3, [r7, #16]
    49aa:	f1a3 097f 	sub.w	r9, r3, #127	; 0x7f
				uint8_t received_rot = grid_msg_get_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, &error);
    49ae:	2202      	movs	r2, #2
    49b0:	4633      	mov	r3, r6
    49b2:	210c      	movs	r1, #12
    49b4:	4628      	mov	r0, r5
    49b6:	47d8      	blx	fp
				uint8_t updated_rot = (received_rot + por->partner_fi)%4;
    49b8:	f642 7330 	movw	r3, #12080	; 0x2f30
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    49bc:	fa4f fa8a 	sxtb.w	sl, sl
				uint8_t updated_rot = (received_rot + por->partner_fi)%4;
    49c0:	5ce3      	ldrb	r3, [r4, r3]
    49c2:	4418      	add	r0, r3
    49c4:	f000 0203 	and.w	r2, r0, #3
    49c8:	ee08 2a10 	vmov	s16, r2
				int8_t received_dy  = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    49cc:	fa4f f989 	sxtb.w	r9, r9
				if (por->partner_fi == 0){ // 0 deg
    49d0:	b143      	cbz	r3, 49e4 <grid_port_receive_decode+0x128>
				else if(por->partner_fi == 1){ // 90 deg
    49d2:	2b01      	cmp	r3, #1
    49d4:	f040 8098 	bne.w	4b08 <grid_port_receive_decode+0x24c>
					rotated_dx  -= received_dy;
    49d8:	693b      	ldr	r3, [r7, #16]
    49da:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					rotated_dy  += received_dx;
    49de:	46d1      	mov	r9, sl
					rotated_dx  -= received_dy;
    49e0:	fa4f fa83 	sxtb.w	sl, r3
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    49e4:	f642 7349 	movw	r3, #12105	; 0x2f49
    49e8:	f897 b000 	ldrb.w	fp, [r7]
    49ec:	5ce3      	ldrb	r3, [r4, r3]
    49ee:	337f      	adds	r3, #127	; 0x7f
    49f0:	449a      	add	sl, r3
    49f2:	fa5f f38a 	uxtb.w	r3, sl
    49f6:	60fb      	str	r3, [r7, #12]
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    49f8:	f642 734a 	movw	r3, #12106	; 0x2f4a
    49fc:	f814 a003 	ldrb.w	sl, [r4, r3]
    4a00:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    4a04:	44d1      	add	r9, sl
    4a06:	fa5f f389 	uxtb.w	r3, r9
    4a0a:	60bb      	str	r3, [r7, #8]
				if (received_dx + GRID_SYS_DEFAULT_POSITION == 0 && received_dy + GRID_SYS_DEFAULT_POSITION == 0)
    4a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    4a10:	4313      	orrs	r3, r2
    4a12:	f897 a004 	ldrb.w	sl, [r7, #4]
    4a16:	d020      	beq.n	4a5a <grid_port_receive_decode+0x19e>
					grid_msg_set_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, updated_id, &error);
    4a18:	f8df 915c 	ldr.w	r9, [pc, #348]	; 4b78 <grid_port_receive_decode+0x2bc>
    4a1c:	9600      	str	r6, [sp, #0]
    4a1e:	4653      	mov	r3, sl
    4a20:	2202      	movs	r2, #2
    4a22:	2104      	movs	r1, #4
    4a24:	4628      	mov	r0, r5
    4a26:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, updated_dx, &error);
    4a28:	9600      	str	r6, [sp, #0]
    4a2a:	68fb      	ldr	r3, [r7, #12]
    4a2c:	2202      	movs	r2, #2
    4a2e:	2106      	movs	r1, #6
    4a30:	4628      	mov	r0, r5
    4a32:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, updated_dy, &error);
    4a34:	9600      	str	r6, [sp, #0]
    4a36:	68bb      	ldr	r3, [r7, #8]
    4a38:	2202      	movs	r2, #2
    4a3a:	2108      	movs	r1, #8
    4a3c:	4628      	mov	r0, r5
    4a3e:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, updated_age, &error);
    4a40:	465b      	mov	r3, fp
    4a42:	2202      	movs	r2, #2
    4a44:	210a      	movs	r1, #10
    4a46:	9600      	str	r6, [sp, #0]
    4a48:	4628      	mov	r0, r5
    4a4a:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, updated_rot, &error);
    4a4c:	ee18 3a10 	vmov	r3, s16
    4a50:	9600      	str	r6, [sp, #0]
    4a52:	2202      	movs	r2, #2
    4a54:	210c      	movs	r1, #12
    4a56:	4628      	mov	r0, r5
    4a58:	47c8      	blx	r9
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    4a5a:	68fb      	ldr	r3, [r7, #12]
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    4a5c:	483c      	ldr	r0, [pc, #240]	; (4b50 <grid_port_receive_decode+0x294>)
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    4a5e:	eb03 2a0a 	add.w	sl, r3, sl, lsl #8
    4a62:	68bb      	ldr	r3, [r7, #8]
    4a64:	eb03 2a0a 	add.w	sl, r3, sl, lsl #8
    4a68:	eb0b 2a0a 	add.w	sl, fp, sl, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    4a6c:	4b39      	ldr	r3, [pc, #228]	; (4b54 <grid_port_receive_decode+0x298>)
    4a6e:	4651      	mov	r1, sl
    4a70:	4798      	blx	r3
    4a72:	b9d8      	cbnz	r0, 4aac <grid_port_receive_decode+0x1f0>
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a74:	4b35      	ldr	r3, [pc, #212]	; (4b4c <grid_port_receive_decode+0x290>)
    4a76:	4641      	mov	r1, r8
    4a78:	4628      	mov	r0, r5
    4a7a:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a7c:	f504 542c 	add.w	r4, r4, #11008	; 0x2b00
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a80:	4b35      	ldr	r3, [pc, #212]	; (4b58 <grid_port_receive_decode+0x29c>)
    4a82:	4602      	mov	r2, r0
    4a84:	4641      	mov	r1, r8
    4a86:	4628      	mov	r0, r5
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a88:	3434      	adds	r4, #52	; 0x34
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a8a:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a8c:	4b33      	ldr	r3, [pc, #204]	; (4b5c <grid_port_receive_decode+0x2a0>)
    4a8e:	4641      	mov	r1, r8
    4a90:	4620      	mov	r0, r4
    4a92:	4798      	blx	r3
    4a94:	b150      	cbz	r0, 4aac <grid_port_receive_decode+0x1f0>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    4a96:	4e32      	ldr	r6, [pc, #200]	; (4b60 <grid_port_receive_decode+0x2a4>)
    4a98:	44a8      	add	r8, r5
						for (uint16_t i=0; i<length; i++){
    4a9a:	45a8      	cmp	r8, r5
    4a9c:	d14d      	bne.n	4b3a <grid_port_receive_decode+0x27e>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    4a9e:	4b31      	ldr	r3, [pc, #196]	; (4b64 <grid_port_receive_decode+0x2a8>)
    4aa0:	4620      	mov	r0, r4
    4aa2:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    4aa4:	482a      	ldr	r0, [pc, #168]	; (4b50 <grid_port_receive_decode+0x294>)
    4aa6:	4b30      	ldr	r3, [pc, #192]	; (4b68 <grid_port_receive_decode+0x2ac>)
    4aa8:	4651      	mov	r1, sl
    4aaa:	4798      	blx	r3
}
    4aac:	3724      	adds	r7, #36	; 0x24
    4aae:	46bd      	mov	sp, r7
    4ab0:	ecbd 8b02 	vpop	{d8}
    4ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    4ab8:	18d6      	adds	r6, r2, r3
    4aba:	fbb6 f1f0 	udiv	r1, r6, r0
    4abe:	fb00 6111 	mls	r1, r0, r1, r6
    4ac2:	4421      	add	r1, r4
    4ac4:	5d4e      	ldrb	r6, [r1, r5]
    4ac6:	f809 6002 	strb.w	r6, [r9, r2]
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    4aca:	f801 c005 	strb.w	ip, [r1, r5]
	for (uint16_t i = 0; i<length; i++){
    4ace:	3201      	adds	r2, #1
    4ad0:	e70b      	b.n	48ea <grid_port_receive_decode+0x2e>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    4ad2:	18d6      	adds	r6, r2, r3
    4ad4:	fbb6 f1f0 	udiv	r1, r6, r0
    4ad8:	fb00 6111 	mls	r1, r0, r1, r6
    4adc:	4421      	add	r1, r4
    4ade:	3201      	adds	r2, #1
    4ae0:	f801 e00c 	strb.w	lr, [r1, ip]
	for (uint16_t i = 0; i<length; i++){
    4ae4:	e70c      	b.n	4900 <grid_port_receive_decode+0x44>
		if (buffer[i] == GRID_CONST_SOH){
    4ae6:	f819 2006 	ldrb.w	r2, [r9, r6]
    4aea:	2a01      	cmp	r2, #1
    4aec:	d109      	bne.n	4b02 <grid_port_receive_decode+0x246>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    4aee:	4651      	mov	r1, sl
    4af0:	4658      	mov	r0, fp
    4af2:	4798      	blx	r3
			length -= i;
    4af4:	eba8 0806 	sub.w	r8, r8, r6
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    4af8:	4b12      	ldr	r3, [pc, #72]	; (4b44 <grid_port_receive_decode+0x288>)
			length -= i;
    4afa:	fa1f f888 	uxth.w	r8, r8
			message = &buffer[i];
    4afe:	eb09 0506 	add.w	r5, r9, r6
	for (uint16_t i = 1; i<length; i++){
    4b02:	3601      	adds	r6, #1
    4b04:	b2b6      	uxth	r6, r6
    4b06:	e70e      	b.n	4926 <grid_port_receive_decode+0x6a>
				else if(por->partner_fi == 2){ // 180 deg
    4b08:	2b02      	cmp	r3, #2
    4b0a:	d10a      	bne.n	4b22 <grid_port_receive_decode+0x266>
					rotated_dx  -= received_dx;
    4b0c:	697b      	ldr	r3, [r7, #20]
    4b0e:	f1c3 0a7f 	rsb	sl, r3, #127	; 0x7f
					rotated_dy  -= received_dy;
    4b12:	693b      	ldr	r3, [r7, #16]
					rotated_dx  -= received_dx;
    4b14:	fa4f fa8a 	sxtb.w	sl, sl
					rotated_dy  -= received_dy;
    4b18:	f1c3 097f 	rsb	r9, r3, #127	; 0x7f
					rotated_dy  -= received_dx;
    4b1c:	fa4f f989 	sxtb.w	r9, r9
    4b20:	e760      	b.n	49e4 <grid_port_receive_decode+0x128>
				else if(por->partner_fi == 3){ // 270 deg
    4b22:	2b03      	cmp	r3, #3
    4b24:	d105      	bne.n	4b32 <grid_port_receive_decode+0x276>
					rotated_dy  -= received_dx;
    4b26:	697b      	ldr	r3, [r7, #20]
    4b28:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					rotated_dx  += received_dy;
    4b2c:	46ca      	mov	sl, r9
					rotated_dy  -= received_dx;
    4b2e:	4699      	mov	r9, r3
    4b30:	e7f4      	b.n	4b1c <grid_port_receive_decode+0x260>
				int8_t rotated_dy = 0;
    4b32:	f04f 0900 	mov.w	r9, #0
				int8_t rotated_dx = 0;
    4b36:	46ca      	mov	sl, r9
    4b38:	e754      	b.n	49e4 <grid_port_receive_decode+0x128>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    4b3a:	f815 1b01 	ldrb.w	r1, [r5], #1
    4b3e:	4620      	mov	r0, r4
    4b40:	47b0      	blx	r6
						for (uint16_t i=0; i<length; i++){
    4b42:	e7aa      	b.n	4a9a <grid_port_receive_decode+0x1de>
    4b44:	00012f39 	.word	0x00012f39
    4b48:	00009981 	.word	0x00009981
    4b4c:	00009969 	.word	0x00009969
    4b50:	20006fa4 	.word	0x20006fa4
    4b54:	000099d9 	.word	0x000099d9
    4b58:	0000999d 	.word	0x0000999d
    4b5c:	00004839 	.word	0x00004839
    4b60:	00004875 	.word	0x00004875
    4b64:	00004895 	.word	0x00004895
    4b68:	000099f3 	.word	0x000099f3
    4b6c:	000151a8 	.word	0x000151a8
    4b70:	000151bb 	.word	0x000151bb
    4b74:	000099ad 	.word	0x000099ad
    4b78:	000099c5 	.word	0x000099c5
			else if (message[1] == GRID_CONST_DCT){ // Direct Message
    4b7c:	2b0e      	cmp	r3, #14
    4b7e:	f040 80e5 	bne.w	4d4c <grid_port_receive_decode+0x490>
				if (message[2] == GRID_CONST_ACK){
    4b82:	78ab      	ldrb	r3, [r5, #2]
    4b84:	2b07      	cmp	r3, #7
    4b86:	d191      	bne.n	4aac <grid_port_receive_decode+0x1f0>
					uint8_t local_token_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    4b88:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 4d68 <grid_port_receive_decode+0x4ac>
    4b8c:	2200      	movs	r2, #0
    4b8e:	2102      	movs	r1, #2
    4b90:	f105 0008 	add.w	r0, r5, #8
    4b94:	47c8      	blx	r9
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4b96:	2200      	movs	r2, #0
					uint8_t local_token_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    4b98:	fa5f fa80 	uxtb.w	sl, r0
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4b9c:	2102      	movs	r1, #2
    4b9e:	1da8      	adds	r0, r5, #6
    4ba0:	47c8      	blx	r9
					if (por->partner_status == 0){
    4ba2:	f642 724b 	movw	r2, #12107	; 0x2f4b
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4ba6:	fa5f fb80 	uxtb.w	fp, r0
					if (por->partner_status == 0){
    4baa:	5ca2      	ldrb	r2, [r4, r2]
    4bac:	2a00      	cmp	r2, #0
    4bae:	d172      	bne.n	4c96 <grid_port_receive_decode+0x3da>
						if (por->ping_local_token == 255){ // I have no clue
    4bb0:	f642 7931 	movw	r9, #12081	; 0x2f31
    4bb4:	f814 2009 	ldrb.w	r2, [r4, r9]
    4bb8:	2aff      	cmp	r2, #255	; 0xff
    4bba:	d11b      	bne.n	4bf4 <grid_port_receive_decode+0x338>
							por->ping_local_token  = grid_sys_rtc_get_time(&grid_sys_state)%128;
    4bbc:	4a66      	ldr	r2, [pc, #408]	; (4d58 <grid_port_receive_decode+0x49c>)
    4bbe:	4867      	ldr	r0, [pc, #412]	; (4d5c <grid_port_receive_decode+0x4a0>)
    4bc0:	4790      	blx	r2
    4bc2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4bc6:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_local_token  = grid_sys_rtc_get_time(&grid_sys_state)%128;
    4bca:	f804 2009 	strb.w	r2, [r4, r9]
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4bce:	4b64      	ldr	r3, [pc, #400]	; (4d60 <grid_port_receive_decode+0x4a4>)
    4bd0:	2102      	movs	r1, #2
    4bd2:	3039      	adds	r0, #57	; 0x39
    4bd4:	4798      	blx	r3
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4bd6:	f504 593c 	add.w	r9, r4, #12032	; 0x2f00
    4bda:	f642 7247 	movw	r2, #12103	; 0x2f47
    4bde:	f109 0933 	add.w	r9, r9, #51	; 0x33
    4be2:	5ca1      	ldrb	r1, [r4, r2]
    4be4:	6179      	str	r1, [r7, #20]
    4be6:	4648      	mov	r0, r9
    4be8:	47b0      	blx	r6
    4bea:	6979      	ldr	r1, [r7, #20]
    4bec:	4b5d      	ldr	r3, [pc, #372]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4bee:	4602      	mov	r2, r0
    4bf0:	4648      	mov	r0, r9
    4bf2:	4798      	blx	r3
						if (partner_token_received != por->ping_partner_token){
    4bf4:	f642 7232 	movw	r2, #12082	; 0x2f32
    4bf8:	5ca1      	ldrb	r1, [r4, r2]
    4bfa:	4559      	cmp	r1, fp
    4bfc:	d017      	beq.n	4c2e <grid_port_receive_decode+0x372>
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, partner_token_received);
    4bfe:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_partner_token = partner_token_received;							
    4c02:	f804 b002 	strb.w	fp, [r4, r2]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, partner_token_received);
    4c06:	4b56      	ldr	r3, [pc, #344]	; (4d60 <grid_port_receive_decode+0x4a4>)
    4c08:	465a      	mov	r2, fp
    4c0a:	2102      	movs	r1, #2
    4c0c:	303b      	adds	r0, #59	; 0x3b
    4c0e:	4798      	blx	r3
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4c10:	f504 593c 	add.w	r9, r4, #12032	; 0x2f00
    4c14:	f642 7347 	movw	r3, #12103	; 0x2f47
    4c18:	f109 0933 	add.w	r9, r9, #51	; 0x33
    4c1c:	5ce1      	ldrb	r1, [r4, r3]
    4c1e:	6179      	str	r1, [r7, #20]
    4c20:	4648      	mov	r0, r9
    4c22:	47b0      	blx	r6
    4c24:	6979      	ldr	r1, [r7, #20]
    4c26:	4b4f      	ldr	r3, [pc, #316]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4c28:	4602      	mov	r2, r0
    4c2a:	4648      	mov	r0, r9
    4c2c:	4798      	blx	r3
						if (por->ping_local_token != local_token_received){
    4c2e:	f642 7331 	movw	r3, #12081	; 0x2f31
    4c32:	5ce3      	ldrb	r3, [r4, r3]
    4c34:	4553      	cmp	r3, sl
    4c36:	d129      	bne.n	4c8c <grid_port_receive_decode+0x3d0>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    4c38:	7a62      	ldrb	r2, [r4, #9]
    4c3a:	78eb      	ldrb	r3, [r5, #3]
    4c3c:	1a9b      	subs	r3, r3, r2
    4c3e:	3306      	adds	r3, #6
    4c40:	425a      	negs	r2, r3
    4c42:	f002 0203 	and.w	r2, r2, #3
    4c46:	f003 0303 	and.w	r3, r3, #3
    4c4a:	bf58      	it	pl
    4c4c:	4253      	negpl	r3, r2
    4c4e:	f642 7230 	movw	r2, #12080	; 0x2f30
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c52:	f1a8 000a 	sub.w	r0, r8, #10
							por->partner_fi = (message[3] - por->direction + 6)%4;
    4c56:	54a3      	strb	r3, [r4, r2]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c58:	2102      	movs	r1, #2
    4c5a:	4b43      	ldr	r3, [pc, #268]	; (4d68 <grid_port_receive_decode+0x4ac>)
    4c5c:	2200      	movs	r2, #0
    4c5e:	4428      	add	r0, r5
    4c60:	4798      	blx	r3
    4c62:	f642 732c 	movw	r3, #12076	; 0x2f2c
							por->partner_status = 1;
    4c66:	2201      	movs	r2, #1
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c68:	50e0      	str	r0, [r4, r3]
							por->partner_status = 1;
    4c6a:	f642 734b 	movw	r3, #12107	; 0x2f4b
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c6e:	493f      	ldr	r1, [pc, #252]	; (4d6c <grid_port_receive_decode+0x4b0>)
							por->partner_status = 1;
    4c70:	54e2      	strb	r2, [r4, r3]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c72:	483f      	ldr	r0, [pc, #252]	; (4d70 <grid_port_receive_decode+0x4b4>)
    4c74:	4b3f      	ldr	r3, [pc, #252]	; (4d74 <grid_port_receive_decode+0x4b8>)
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN
    4c76:	4d40      	ldr	r5, [pc, #256]	; (4d78 <grid_port_receive_decode+0x4bc>)
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c78:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN
    4c7a:	2300      	movs	r3, #0
    4c7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    4c80:	e9cd 3200 	strd	r3, r2, [sp]
    4c84:	4835      	ldr	r0, [pc, #212]	; (4d5c <grid_port_receive_decode+0x4a0>)
    4c86:	22ff      	movs	r2, #255	; 0xff
    4c88:	4619      	mov	r1, r3
    4c8a:	47a8      	blx	r5
						por->ping_flag = 1;
    4c8c:	f642 7348 	movw	r3, #12104	; 0x2f48
    4c90:	2201      	movs	r2, #1
    4c92:	54e2      	strb	r2, [r4, r3]
    4c94:	e70a      	b.n	4aac <grid_port_receive_decode+0x1f0>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4c96:	7a61      	ldrb	r1, [r4, #9]
    4c98:	78ea      	ldrb	r2, [r5, #3]
    4c9a:	1a52      	subs	r2, r2, r1
    4c9c:	3206      	adds	r2, #6
    4c9e:	4251      	negs	r1, r2
						validator &= local_token_received == por->ping_local_token;
    4ca0:	f642 7031 	movw	r0, #12081	; 0x2f31
						validator &= partner_token_received == por->ping_partner_token;
    4ca4:	f642 7c32 	movw	ip, #12082	; 0x2f32
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4ca8:	f001 0103 	and.w	r1, r1, #3
						validator &= local_token_received == por->ping_local_token;
    4cac:	5c20      	ldrb	r0, [r4, r0]
						validator &= partner_token_received == por->ping_partner_token;
    4cae:	f814 c00c 	ldrb.w	ip, [r4, ip]
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4cb2:	f002 0203 	and.w	r2, r2, #3
    4cb6:	bf58      	it	pl
    4cb8:	424a      	negpl	r2, r1
    4cba:	f642 7130 	movw	r1, #12080	; 0x2f30
    4cbe:	4550      	cmp	r0, sl
    4cc0:	bf08      	it	eq
    4cc2:	45dc      	cmpeq	ip, fp
    4cc4:	5c61      	ldrb	r1, [r4, r1]
    4cc6:	bf0c      	ite	eq
    4cc8:	f04f 0a01 	moveq.w	sl, #1
    4ccc:	f04f 0a00 	movne.w	sl, #0
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4cd0:	f642 732c 	movw	r3, #12076	; 0x2f2c
    4cd4:	f1a8 000a 	sub.w	r0, r8, #10
    4cd8:	428a      	cmp	r2, r1
    4cda:	bf14      	ite	ne
    4cdc:	f04f 0a00 	movne.w	sl, #0
    4ce0:	f00a 0a01 	andeq.w	sl, sl, #1
    4ce4:	4428      	add	r0, r5
    4ce6:	2200      	movs	r2, #0
    4ce8:	2102      	movs	r1, #2
    4cea:	f854 b003 	ldr.w	fp, [r4, r3]
    4cee:	47c8      	blx	r9
						if (validator == 1){
    4cf0:	4558      	cmp	r0, fp
    4cf2:	d103      	bne.n	4cfc <grid_port_receive_decode+0x440>
    4cf4:	f1ba 0f00 	cmp.w	sl, #0
    4cf8:	f47f aed8 	bne.w	4aac <grid_port_receive_decode+0x1f0>
							por->partner_status = 0;
    4cfc:	f642 734b 	movw	r3, #12107	; 0x2f4b
    4d00:	2200      	movs	r2, #0
    4d02:	54e2      	strb	r2, [r4, r3]
							por->ping_local_token = 255;
    4d04:	f642 7831 	movw	r8, #12081	; 0x2f31
							por->ping_partner_token = 255;
    4d08:	f642 7332 	movw	r3, #12082	; 0x2f32
    4d0c:	22ff      	movs	r2, #255	; 0xff
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d0e:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_partner_token = 255;
    4d12:	54e2      	strb	r2, [r4, r3]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d14:	4d12      	ldr	r5, [pc, #72]	; (4d60 <grid_port_receive_decode+0x4a4>)
							por->ping_local_token = 255;
    4d16:	f804 2008 	strb.w	r2, [r4, r8]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d1a:	2102      	movs	r1, #2
    4d1c:	303b      	adds	r0, #59	; 0x3b
    4d1e:	47a8      	blx	r5
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4d20:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
    4d24:	f814 2008 	ldrb.w	r2, [r4, r8]
    4d28:	2102      	movs	r1, #2
    4d2a:	3039      	adds	r0, #57	; 0x39
    4d2c:	47a8      	blx	r5
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4d2e:	f642 7347 	movw	r3, #12103	; 0x2f47
    4d32:	f504 553c 	add.w	r5, r4, #12032	; 0x2f00
    4d36:	3533      	adds	r5, #51	; 0x33
    4d38:	5ce1      	ldrb	r1, [r4, r3]
    4d3a:	6179      	str	r1, [r7, #20]
    4d3c:	4628      	mov	r0, r5
    4d3e:	47b0      	blx	r6
    4d40:	6979      	ldr	r1, [r7, #20]
    4d42:	4b08      	ldr	r3, [pc, #32]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4d44:	4602      	mov	r2, r0
    4d46:	4628      	mov	r0, r5
    4d48:	4798      	blx	r3
    4d4a:	e6af      	b.n	4aac <grid_port_receive_decode+0x1f0>
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    4d4c:	480b      	ldr	r0, [pc, #44]	; (4d7c <grid_port_receive_decode+0x4c0>)
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    4d4e:	4b0c      	ldr	r3, [pc, #48]	; (4d80 <grid_port_receive_decode+0x4c4>)
    4d50:	4798      	blx	r3
	return;
    4d52:	e6ab      	b.n	4aac <grid_port_receive_decode+0x1f0>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    4d54:	480b      	ldr	r0, [pc, #44]	; (4d84 <grid_port_receive_decode+0x4c8>)
    4d56:	e7fa      	b.n	4d4e <grid_port_receive_decode+0x492>
    4d58:	00009741 	.word	0x00009741
    4d5c:	20006fa4 	.word	0x20006fa4
    4d60:	00009821 	.word	0x00009821
    4d64:	0000999d 	.word	0x0000999d
    4d68:	000097f9 	.word	0x000097f9
    4d6c:	000151e0 	.word	0x000151e0
    4d70:	000151bb 	.word	0x000151bb
    4d74:	00012f39 	.word	0x00012f39
    4d78:	000097ab 	.word	0x000097ab
    4d7c:	000151e8 	.word	0x000151e8
    4d80:	00013049 	.word	0x00013049
    4d84:	0001521e 	.word	0x0001521e

00004d88 <grid_port_receive_task>:
void grid_port_receive_task(struct grid_port* por){
    4d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (por->usart_error_flag == 1){
    4d8a:	7e03      	ldrb	r3, [r0, #24]
    4d8c:	2b01      	cmp	r3, #1
void grid_port_receive_task(struct grid_port* por){
    4d8e:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    4d90:	d10d      	bne.n	4dae <grid_port_receive_task+0x26>
		por->usart_error_flag = 0;
    4d92:	2500      	movs	r5, #0
    4d94:	7605      	strb	r5, [r0, #24]
		grid_port_reset_receiver(por);
    4d96:	4b53      	ldr	r3, [pc, #332]	; (4ee4 <grid_port_receive_task+0x15c>)
    4d98:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500); // White triangle
    4d9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    4d9e:	e9cd 5300 	strd	r5, r3, [sp]
    4da2:	23ff      	movs	r3, #255	; 0xff
    4da4:	4850      	ldr	r0, [pc, #320]	; (4ee8 <grid_port_receive_task+0x160>)
    4da6:	4d51      	ldr	r5, [pc, #324]	; (4eec <grid_port_receive_task+0x164>)
    4da8:	461a      	mov	r2, r3
    4daa:	4619      	mov	r1, r3
    4dac:	47a8      	blx	r5
	if	(por->rx_double_buffer_status == 0){
    4dae:	6a25      	ldr	r5, [r4, #32]
    4db0:	bb7d      	cbnz	r5, 4e12 <grid_port_receive_task+0x8a>
		if (por->usart!=NULL){ // His is GRID usart port
    4db2:	6863      	ldr	r3, [r4, #4]
    4db4:	b1cb      	cbz	r3, 4dea <grid_port_receive_task+0x62>
			if (por->rx_double_buffer_timeout > 1000){
    4db6:	69e3      	ldr	r3, [r4, #28]
    4db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    4dbc:	d93e      	bls.n	4e3c <grid_port_receive_task+0xb4>
				if (por->partner_status == 1){
    4dbe:	f642 734b 	movw	r3, #12107	; 0x2f4b
    4dc2:	5ce3      	ldrb	r3, [r4, r3]
    4dc4:	2b01      	cmp	r3, #1
    4dc6:	d12c      	bne.n	4e22 <grid_port_receive_task+0x9a>
					GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    4dc8:	4949      	ldr	r1, [pc, #292]	; (4ef0 <grid_port_receive_task+0x168>)
    4dca:	4b4a      	ldr	r3, [pc, #296]	; (4ef4 <grid_port_receive_task+0x16c>)
    4dcc:	484a      	ldr	r0, [pc, #296]	; (4ef8 <grid_port_receive_task+0x170>)
    4dce:	4798      	blx	r3
					grid_port_reset_receiver(por);
    4dd0:	4b44      	ldr	r3, [pc, #272]	; (4ee4 <grid_port_receive_task+0x15c>)
    4dd2:	4620      	mov	r0, r4
    4dd4:	4798      	blx	r3
					grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500);
    4dd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    4dda:	e9cd 5300 	strd	r5, r3, [sp]
    4dde:	23ff      	movs	r3, #255	; 0xff
    4de0:	4841      	ldr	r0, [pc, #260]	; (4ee8 <grid_port_receive_task+0x160>)
    4de2:	4d42      	ldr	r5, [pc, #264]	; (4eec <grid_port_receive_task+0x164>)
    4de4:	461a      	mov	r2, r3
    4de6:	4619      	mov	r1, r3
    4de8:	47a8      	blx	r5
			if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0)
    4dea:	f241 3687 	movw	r6, #4999	; 0x1387
void grid_port_receive_task(struct grid_port* por){
    4dee:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
			if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    4df2:	f241 30b4 	movw	r0, #5044	; 0x13b4
    4df6:	46b4      	mov	ip, r6
			if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0)
    4df8:	f241 3788 	movw	r7, #5000	; 0x1388
			if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    4dfc:	f241 3e86 	movw	lr, #4998	; 0x1386
			if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    4e00:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4e02:	18a3      	adds	r3, r4, r2
    4e04:	5c1b      	ldrb	r3, [r3, r0]
    4e06:	2b0a      	cmp	r3, #10
    4e08:	d11b      	bne.n	4e42 <grid_port_receive_task+0xba>
				por->rx_double_buffer_timeout = 0;
    4e0a:	2300      	movs	r3, #0
    4e0c:	2501      	movs	r5, #1
    4e0e:	e9c4 3507 	strd	r3, r5, [r4, #28]
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    4e12:	e9d4 2109 	ldrd	r2, r1, [r4, #36]	; 0x24
    4e16:	4291      	cmp	r1, r2
    4e18:	d359      	bcc.n	4ece <grid_port_receive_task+0x146>
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4e1a:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
    4e1e:	3209      	adds	r2, #9
    4e20:	e056      	b.n	4ed0 <grid_port_receive_task+0x148>
					if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    4e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e24:	b913      	cbnz	r3, 4e2c <grid_port_receive_task+0xa4>
    4e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d0de      	beq.n	4dea <grid_port_receive_task+0x62>
						GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    4e2c:	4933      	ldr	r1, [pc, #204]	; (4efc <grid_port_receive_task+0x174>)
    4e2e:	4b31      	ldr	r3, [pc, #196]	; (4ef4 <grid_port_receive_task+0x16c>)
    4e30:	4831      	ldr	r0, [pc, #196]	; (4ef8 <grid_port_receive_task+0x170>)
    4e32:	4798      	blx	r3
						grid_port_reset_receiver(por);
    4e34:	4b2b      	ldr	r3, [pc, #172]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e36:	4620      	mov	r0, r4
    4e38:	4798      	blx	r3
    4e3a:	e7d6      	b.n	4dea <grid_port_receive_task+0x62>
				por->rx_double_buffer_timeout++;
    4e3c:	3301      	adds	r3, #1
    4e3e:	61e3      	str	r3, [r4, #28]
    4e40:	e7d3      	b.n	4dea <grid_port_receive_task+0x62>
			else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    4e42:	b923      	cbnz	r3, 4e4e <grid_port_receive_task+0xc6>
	if (por->rx_double_buffer_status == 0){
    4e44:	6a23      	ldr	r3, [r4, #32]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d1e3      	bne.n	4e12 <grid_port_receive_task+0x8a>
}
    4e4a:	b003      	add	sp, #12
    4e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1)
    4e4e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    4e50:	1e6b      	subs	r3, r5, #1
    4e52:	429a      	cmp	r2, r3
    4e54:	d10d      	bne.n	4e72 <grid_port_receive_task+0xea>
				grid_port_reset_receiver(por);	
    4e56:	4b23      	ldr	r3, [pc, #140]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e58:	4620      	mov	r0, r4
    4e5a:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED
    4e5c:	2302      	movs	r3, #2
    4e5e:	20c8      	movs	r0, #200	; 0xc8
    4e60:	e9cd 3000 	strd	r3, r0, [sp]
    4e64:	2300      	movs	r3, #0
    4e66:	461a      	mov	r2, r3
    4e68:	21ff      	movs	r1, #255	; 0xff
				grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 255, 2, 200); // RED
    4e6a:	481f      	ldr	r0, [pc, #124]	; (4ee8 <grid_port_receive_task+0x160>)
    4e6c:	4c1f      	ldr	r4, [pc, #124]	; (4eec <grid_port_receive_task+0x164>)
    4e6e:	47a0      	blx	r4
				return;
    4e70:	e7eb      	b.n	4e4a <grid_port_receive_task+0xc2>
			if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0)
    4e72:	42b2      	cmp	r2, r6
    4e74:	d10b      	bne.n	4e8e <grid_port_receive_task+0x106>
    4e76:	b955      	cbnz	r5, 4e8e <grid_port_receive_task+0x106>
				grid_port_reset_receiver(por);
    4e78:	4b1a      	ldr	r3, [pc, #104]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e7a:	4620      	mov	r0, r4
    4e7c:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // RED
    4e7e:	2302      	movs	r3, #2
    4e80:	21c8      	movs	r1, #200	; 0xc8
    4e82:	e9cd 3100 	strd	r3, r1, [sp]
    4e86:	22ff      	movs	r2, #255	; 0xff
    4e88:	462b      	mov	r3, r5
    4e8a:	4629      	mov	r1, r5
    4e8c:	e7ed      	b.n	4e6a <grid_port_receive_task+0xe2>
			if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0)
    4e8e:	4465      	add	r5, ip
    4e90:	fbb5 f3f7 	udiv	r3, r5, r7
    4e94:	fb07 5513 	mls	r5, r7, r3, r5
    4e98:	4425      	add	r5, r4
    4e9a:	5c2b      	ldrb	r3, [r5, r0]
    4e9c:	b153      	cbz	r3, 4eb4 <grid_port_receive_task+0x12c>
				grid_port_reset_receiver(por);
    4e9e:	4b11      	ldr	r3, [pc, #68]	; (4ee4 <grid_port_receive_task+0x15c>)
    4ea0:	4620      	mov	r0, r4
    4ea2:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 255, 2, 200); // RED
    4ea4:	2302      	movs	r3, #2
    4ea6:	22c8      	movs	r2, #200	; 0xc8
    4ea8:	e9cd 3200 	strd	r3, r2, [sp]
    4eac:	2200      	movs	r2, #0
    4eae:	23ff      	movs	r3, #255	; 0xff
    4eb0:	4611      	mov	r1, r2
    4eb2:	e7da      	b.n	4e6a <grid_port_receive_task+0xe2>
			if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    4eb4:	4572      	cmp	r2, lr
				por->rx_double_buffer_seek_start_index++;
    4eb6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    4eba:	bf98      	it	ls
    4ebc:	3201      	addls	r2, #1
    4ebe:	b289      	uxth	r1, r1
				por->rx_double_buffer_timeout = 0;
    4ec0:	61e3      	str	r3, [r4, #28]
				por->rx_double_buffer_seek_start_index++;
    4ec2:	bf94      	ite	ls
    4ec4:	6262      	strls	r2, [r4, #36]	; 0x24
				por->rx_double_buffer_seek_start_index=0;
    4ec6:	6263      	strhi	r3, [r4, #36]	; 0x24
		for(uint16_t i = 0; i<490; i++){
    4ec8:	2900      	cmp	r1, #0
    4eca:	d199      	bne.n	4e00 <grid_port_receive_task+0x78>
    4ecc:	e7ba      	b.n	4e44 <grid_port_receive_task+0xbc>
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4ece:	3201      	adds	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4ed0:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    4ed2:	4b0b      	ldr	r3, [pc, #44]	; (4f00 <grid_port_receive_task+0x178>)
    4ed4:	b292      	uxth	r2, r2
    4ed6:	b289      	uxth	r1, r1
    4ed8:	4620      	mov	r0, r4
    4eda:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    4edc:	2300      	movs	r3, #0
    4ede:	6223      	str	r3, [r4, #32]
    4ee0:	e7b3      	b.n	4e4a <grid_port_receive_task+0xc2>
    4ee2:	bf00      	nop
    4ee4:	00004731 	.word	0x00004731
    4ee8:	20006fa4 	.word	0x20006fa4
    4eec:	000097ab 	.word	0x000097ab
    4ef0:	00015251 	.word	0x00015251
    4ef4:	00012f39 	.word	0x00012f39
    4ef8:	000151bb 	.word	0x000151bb
    4efc:	00015275 	.word	0x00015275
    4f00:	000048bd 	.word	0x000048bd

00004f04 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    4f04:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
    4f08:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4f0c:	428b      	cmp	r3, r1
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    4f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f10:	4602      	mov	r2, r0
	if (buf->read_active != buf->read_stop) {
    4f12:	d000      	beq.n	4f16 <grid_buffer_read_size+0x12>
		while(1){
    4f14:	e7fe      	b.n	4f14 <grid_buffer_read_size+0x10>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    4f16:	f8b0 63ea 	ldrh.w	r6, [r0, #1002]	; 0x3ea
    4f1a:	42b3      	cmp	r3, r6
    4f1c:	d000      	beq.n	4f20 <grid_buffer_read_size+0x1c>
		while(1){
    4f1e:	e7fe      	b.n	4f1e <grid_buffer_read_size+0x1a>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    4f20:	f8b0 73f2 	ldrh.w	r7, [r0, #1010]	; 0x3f2
    4f24:	42be      	cmp	r6, r7
    4f26:	d016      	beq.n	4f56 <grid_buffer_read_size+0x52>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f28:	8805      	ldrh	r5, [r0, #0]
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f2a:	2400      	movs	r4, #0
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f2c:	b2a3      	uxth	r3, r4
    4f2e:	429d      	cmp	r5, r3
    4f30:	d800      	bhi.n	4f34 <grid_buffer_read_size+0x30>
		}
		
		
	}
	
	while(1){
    4f32:	e7fe      	b.n	4f32 <grid_buffer_read_size+0x2e>
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f34:	1930      	adds	r0, r6, r4
    4f36:	fbb0 f1f5 	udiv	r1, r0, r5
    4f3a:	fb05 0111 	mls	r1, r5, r1, r0
		if (index == buf->write_start) return 0;
    4f3e:	b288      	uxth	r0, r1
    4f40:	4287      	cmp	r7, r0
    4f42:	d008      	beq.n	4f56 <grid_buffer_read_size+0x52>
		if (buf->buffer_storage[index] == '\n'){
    4f44:	4411      	add	r1, r2
    4f46:	3301      	adds	r3, #1
    4f48:	b298      	uxth	r0, r3
    4f4a:	788b      	ldrb	r3, [r1, #2]
    4f4c:	2b0a      	cmp	r3, #10
    4f4e:	f104 0401 	add.w	r4, r4, #1
    4f52:	d1eb      	bne.n	4f2c <grid_buffer_read_size+0x28>
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    4f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    4f56:	2000      	movs	r0, #0
    4f58:	e7fc      	b.n	4f54 <grid_buffer_read_size+0x50>

00004f5a <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    4f5a:	f8b0 23ec 	ldrh.w	r2, [r0, #1004]	; 0x3ec
    4f5e:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4f62:	4293      	cmp	r3, r2
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    4f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->read_active != buf->read_stop) {
    4f66:	d000      	beq.n	4f6a <grid_buffer_read_init+0x10>
		while(1){
    4f68:	e7fe      	b.n	4f68 <grid_buffer_read_init+0xe>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    4f6a:	f8b0 53ea 	ldrh.w	r5, [r0, #1002]	; 0x3ea
    4f6e:	42ab      	cmp	r3, r5
    4f70:	d000      	beq.n	4f74 <grid_buffer_read_init+0x1a>
		while(1){
    4f72:	e7fe      	b.n	4f72 <grid_buffer_read_init+0x18>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    4f74:	f8b0 63f2 	ldrh.w	r6, [r0, #1010]	; 0x3f2
    4f78:	42b5      	cmp	r5, r6
    4f7a:	d020      	beq.n	4fbe <grid_buffer_read_init+0x64>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f7c:	8801      	ldrh	r1, [r0, #0]
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f7e:	2400      	movs	r4, #0
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f80:	b2a3      	uxth	r3, r4
    4f82:	4299      	cmp	r1, r3
    4f84:	d800      	bhi.n	4f88 <grid_buffer_read_init+0x2e>
		}
		
		
	}
		
	while(1){
    4f86:	e7fe      	b.n	4f86 <grid_buffer_read_init+0x2c>
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f88:	192f      	adds	r7, r5, r4
    4f8a:	fbb7 f2f1 	udiv	r2, r7, r1
    4f8e:	fb01 7212 	mls	r2, r1, r2, r7
		if (index == buf->write_start) return 0;	
    4f92:	b297      	uxth	r7, r2
    4f94:	42be      	cmp	r6, r7
    4f96:	d012      	beq.n	4fbe <grid_buffer_read_init+0x64>
		if (buf->buffer_storage[index] == '\n'){
    4f98:	1887      	adds	r7, r0, r2
    4f9a:	3301      	adds	r3, #1
    4f9c:	78bf      	ldrb	r7, [r7, #2]
    4f9e:	2f0a      	cmp	r7, #10
    4fa0:	b29b      	uxth	r3, r3
    4fa2:	f104 0401 	add.w	r4, r4, #1
    4fa6:	d1eb      	bne.n	4f80 <grid_buffer_read_init+0x26>
			buf->read_stop = (index+1)%buf->buffer_length;
    4fa8:	3201      	adds	r2, #1
    4faa:	fbb2 f4f1 	udiv	r4, r2, r1
    4fae:	fb01 2214 	mls	r2, r1, r4, r2
    4fb2:	f8a0 23ec 	strh.w	r2, [r0, #1004]	; 0x3ec
			buf->read_length = i+1;
    4fb6:	f8a0 33f0 	strh.w	r3, [r0, #1008]	; 0x3f0
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    4fba:	4618      	mov	r0, r3
    4fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    4fbe:	2300      	movs	r3, #0
    4fc0:	e7fb      	b.n	4fba <grid_buffer_read_init+0x60>

00004fc2 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    4fc2:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4fc6:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
    4fca:	4299      	cmp	r1, r3
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    4fcc:	b510      	push	{r4, lr}
    4fce:	4602      	mov	r2, r0
	if (buf->read_active != buf->read_stop){
    4fd0:	d00b      	beq.n	4fea <grid_buffer_read_character+0x28>
		
		uint8_t character = buf->buffer_storage[buf->read_active];
		
		buf->read_active++;
		buf->read_active %= buf->buffer_length;
    4fd2:	8814      	ldrh	r4, [r2, #0]
		uint8_t character = buf->buffer_storage[buf->read_active];
    4fd4:	18c1      	adds	r1, r0, r3
		buf->read_active++;
    4fd6:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    4fd8:	b29b      	uxth	r3, r3
		uint8_t character = buf->buffer_storage[buf->read_active];
    4fda:	7888      	ldrb	r0, [r1, #2]
		buf->read_active %= buf->buffer_length;
    4fdc:	fbb3 f1f4 	udiv	r1, r3, r4
    4fe0:	fb04 3311 	mls	r3, r4, r1, r3
    4fe4:	f8a2 33ee 	strh.w	r3, [r2, #1006]	; 0x3ee
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    4fe8:	bd10      	pop	{r4, pc}
		while(1){
    4fea:	e7fe      	b.n	4fea <grid_buffer_read_character+0x28>

00004fec <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    4fec:	f8b0 23ec 	ldrh.w	r2, [r0, #1004]	; 0x3ec
    4ff0:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4ff4:	4293      	cmp	r3, r2
    4ff6:	d000      	beq.n	4ffa <grid_buffer_read_acknowledge+0xe>
		buf->read_start = buf->read_stop;
		return 1;
	}else{
		
		while(1){
    4ff8:	e7fe      	b.n	4ff8 <grid_buffer_read_acknowledge+0xc>
		buf->read_start = buf->read_stop;
    4ffa:	f8a0 33ea 	strh.w	r3, [r0, #1002]	; 0x3ea
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    4ffe:	2001      	movs	r0, #1
    5000:	4770      	bx	lr
	...

00005004 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    5004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5008:	4604      	mov	r4, r0
	
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    500a:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    500e:	b087      	sub	sp, #28
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5010:	f8df 8148 	ldr.w	r8, [pc, #328]	; 515c <grid_port_init+0x158>
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    5014:	460d      	mov	r5, r1
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5016:	303c      	adds	r0, #60	; 0x3c
    5018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    501c:	4616      	mov	r6, r2
    501e:	461f      	mov	r7, r3
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5020:	47c0      	blx	r8
	grid_buffer_init(&por->rx_buffer, GRID_BUFFER_SIZE);
    5022:	f504 502c 	add.w	r0, r4, #11008	; 0x2b00
    5026:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    502a:	3034      	adds	r0, #52	; 0x34
    502c:	47c0      	blx	r8
	
	
	por->cooldown = 0;
    502e:	2000      	movs	r0, #0
	
	por->dma_channel = dma;
    5030:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	por->cooldown = 0;
    5034:	6020      	str	r0, [r4, #0]
	
	por->tx_double_buffer_status	= 0;
	por->rx_double_buffer_status	= 0;
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    5036:	f241 3288 	movw	r2, #5000	; 0x1388
	por->dma_channel = dma;
    503a:	72a3      	strb	r3, [r4, #10]
	por->direction = dir;
    503c:	7267      	strb	r7, [r4, #9]
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    503e:	4603      	mov	r3, r0
	por->usart	= usart;
    5040:	6065      	str	r5, [r4, #4]
	por->type		= type;
    5042:	7226      	strb	r6, [r4, #8]
	por->tx_double_buffer_status	= 0;
    5044:	81a0      	strh	r0, [r4, #12]
	por->rx_double_buffer_status	= 0;
    5046:	6220      	str	r0, [r4, #32]
		por->tx_double_buffer[i] = 0;		
    5048:	18e1      	adds	r1, r4, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    504a:	3301      	adds	r3, #1
    504c:	4293      	cmp	r3, r2
		por->tx_double_buffer[i] = 0;		
    504e:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    5052:	d1f9      	bne.n	5048 <grid_port_init+0x44>
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5054:	2300      	movs	r3, #0
		por->rx_double_buffer[i] = 0;
    5056:	f241 31b4 	movw	r1, #5044	; 0x13b4
    505a:	461d      	mov	r5, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    505c:	f241 3288 	movw	r2, #5000	; 0x1388
		por->rx_double_buffer[i] = 0;
    5060:	18e0      	adds	r0, r4, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5062:	3301      	adds	r3, #1
    5064:	4293      	cmp	r3, r2
		por->rx_double_buffer[i] = 0;
    5066:	5445      	strb	r5, [r0, r1]
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5068:	d1fa      	bne.n	5060 <grid_port_init+0x5c>
	}
	
	por->partner_fi = 0;
	
	por->partner_hwcfg = 0;
    506a:	f642 732c 	movw	r3, #12076	; 0x2f2c
	por->partner_fi = 0;
    506e:	f642 7130 	movw	r1, #12080	; 0x2f30
	por->partner_status = 1;
	
	por->ping_local_token = 255;
    5072:	f642 7031 	movw	r0, #12081	; 0x2f31
	por->partner_fi = 0;
    5076:	5465      	strb	r5, [r4, r1]
	por->partner_hwcfg = 0;
    5078:	50e5      	str	r5, [r4, r3]
	por->partner_status = 1;
    507a:	f642 734b 	movw	r3, #12107	; 0x2f4b
    507e:	2201      	movs	r2, #1
	por->ping_local_token = 255;
    5080:	27ff      	movs	r7, #255	; 0xff
	por->partner_status = 1;
    5082:	54e2      	strb	r2, [r4, r3]
	por->ping_local_token = 255;
    5084:	5427      	strb	r7, [r4, r0]
	por->ping_partner_token = 255;
    5086:	f642 7032 	movw	r0, #12082	; 0x2f32
	
	por->ping_flag = 0;
	
	if (type == GRID_PORT_TYPE_USART){	
    508a:	4296      	cmp	r6, r2
	por->ping_partner_token = 255;
    508c:	5427      	strb	r7, [r4, r0]
	por->ping_flag = 0;
    508e:	f642 7048 	movw	r0, #12104	; 0x2f48
    5092:	5425      	strb	r5, [r4, r0]
	if (type == GRID_PORT_TYPE_USART){	
    5094:	d156      	bne.n	5144 <grid_port_init+0x140>
		
		por->partner_status = 0;
    5096:	54e5      	strb	r5, [r4, r3]
		por->partner_fi = 0;
    5098:	5465      	strb	r5, [r4, r1]
		
		
		sprintf(por->ping_packet, "%c%c%c%c%02x%02x%02x%c00\n", GRID_CONST_SOH, GRID_CONST_DCT, GRID_CONST_BELL, por->direction, grid_sys_get_hwcfg(), 255, 255, GRID_CONST_EOT);
    509a:	4b2b      	ldr	r3, [pc, #172]	; (5148 <grid_port_init+0x144>)
    509c:	f894 9009 	ldrb.w	r9, [r4, #9]
    50a0:	4798      	blx	r3
    50a2:	f504 583c 	add.w	r8, r4, #12032	; 0x2f00
    50a6:	2304      	movs	r3, #4
    50a8:	f108 0833 	add.w	r8, r8, #51	; 0x33
    50ac:	e9cd 7304 	strd	r7, r3, [sp, #16]
    50b0:	fa5f f989 	uxtb.w	r9, r9
    50b4:	2307      	movs	r3, #7
    50b6:	4632      	mov	r2, r6
    50b8:	4924      	ldr	r1, [pc, #144]	; (514c <grid_port_init+0x148>)
    50ba:	f8cd 9004 	str.w	r9, [sp, #4]
    50be:	e9cd 0702 	strd	r0, r7, [sp, #8]
    50c2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 5160 <grid_port_init+0x15c>
    50c6:	9300      	str	r3, [sp, #0]
    50c8:	4640      	mov	r0, r8
    50ca:	230e      	movs	r3, #14
    50cc:	47c8      	blx	r9
		
		por->ping_packet_length = strlen(por->ping_packet);	
    50ce:	4b20      	ldr	r3, [pc, #128]	; (5150 <grid_port_init+0x14c>)
    50d0:	4640      	mov	r0, r8
    50d2:	4798      	blx	r3
    50d4:	f642 7347 	movw	r3, #12103	; 0x2f47
    50d8:	b2c0      	uxtb	r0, r0
    50da:	54e0      	strb	r0, [r4, r3]
			
		grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    50dc:	4640      	mov	r0, r8
    50de:	f814 9003 	ldrb.w	r9, [r4, r3]
    50e2:	5ce1      	ldrb	r1, [r4, r3]
    50e4:	4b1b      	ldr	r3, [pc, #108]	; (5154 <grid_port_init+0x150>)
    50e6:	4798      	blx	r3
    50e8:	fa5f f989 	uxtb.w	r9, r9
    50ec:	4b1a      	ldr	r3, [pc, #104]	; (5158 <grid_port_init+0x154>)
    50ee:	4602      	mov	r2, r0
    50f0:	4649      	mov	r1, r9
    50f2:	4640      	mov	r0, r8
    50f4:	4798      	blx	r3
		

		
		if (por->direction == GRID_CONST_NORTH){
    50f6:	7a63      	ldrb	r3, [r4, #9]
    50f8:	2b11      	cmp	r3, #17
    50fa:	d108      	bne.n	510e <grid_port_init+0x10a>
			por->dx = 0;
    50fc:	f642 7349 	movw	r3, #12105	; 0x2f49
    5100:	54e5      	strb	r5, [r4, r3]
			por->dy = 1;
    5102:	f642 734a 	movw	r3, #12106	; 0x2f4a
    5106:	54e6      	strb	r6, [r4, r3]
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
	}
	
}
    5108:	b007      	add	sp, #28
    510a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else if (por->direction == GRID_CONST_EAST){
    510e:	7a63      	ldrb	r3, [r4, #9]
    5110:	2b12      	cmp	r3, #18
    5112:	d106      	bne.n	5122 <grid_port_init+0x11e>
			por->dx = 1;
    5114:	f642 7349 	movw	r3, #12105	; 0x2f49
    5118:	54e6      	strb	r6, [r4, r3]
			por->dy = 0;
    511a:	f642 734a 	movw	r3, #12106	; 0x2f4a
    511e:	54e5      	strb	r5, [r4, r3]
    5120:	e7f2      	b.n	5108 <grid_port_init+0x104>
		else if (por->direction == GRID_CONST_SOUTH){
    5122:	7a63      	ldrb	r3, [r4, #9]
    5124:	2b13      	cmp	r3, #19
    5126:	d106      	bne.n	5136 <grid_port_init+0x132>
			por->dx = 0;
    5128:	f642 7349 	movw	r3, #12105	; 0x2f49
    512c:	54e5      	strb	r5, [r4, r3]
			por->dy = -1;
    512e:	f642 734a 	movw	r3, #12106	; 0x2f4a
    5132:	54e7      	strb	r7, [r4, r3]
    5134:	e7e8      	b.n	5108 <grid_port_init+0x104>
		else if (por->direction == GRID_CONST_WEST){
    5136:	7a63      	ldrb	r3, [r4, #9]
    5138:	2b14      	cmp	r3, #20
    513a:	d1e5      	bne.n	5108 <grid_port_init+0x104>
			por->dx = -1;
    513c:	f642 7349 	movw	r3, #12105	; 0x2f49
    5140:	54e7      	strb	r7, [r4, r3]
    5142:	e7ea      	b.n	511a <grid_port_init+0x116>
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    5144:	54e2      	strb	r2, [r4, r3]
}
    5146:	e7df      	b.n	5108 <grid_port_init+0x104>
    5148:	00009885 	.word	0x00009885
    514c:	0001528e 	.word	0x0001528e
    5150:	00013801 	.word	0x00013801
    5154:	00009969 	.word	0x00009969
    5158:	0000999d 	.word	0x0000999d
    515c:	000047dd 	.word	0x000047dd
    5160:	00013351 	.word	0x00013351

00005164 <grid_port_init_all>:

void grid_port_init_all(void){
    5164:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	
	grid_port_init(&GRID_PORT_N, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_CONST_NORTH ,0);
    5168:	2600      	movs	r6, #0
    516a:	4d1c      	ldr	r5, [pc, #112]	; (51dc <grid_port_init_all+0x78>)
    516c:	491c      	ldr	r1, [pc, #112]	; (51e0 <grid_port_init_all+0x7c>)
    516e:	481d      	ldr	r0, [pc, #116]	; (51e4 <grid_port_init_all+0x80>)
    5170:	9600      	str	r6, [sp, #0]
	grid_port_init(&GRID_PORT_E, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_CONST_EAST  ,1);
    5172:	2401      	movs	r4, #1
	grid_port_init(&GRID_PORT_N, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_CONST_NORTH ,0);
    5174:	2311      	movs	r3, #17
    5176:	2201      	movs	r2, #1
    5178:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_CONST_SOUTH ,2);
    517a:	f04f 0902 	mov.w	r9, #2
	grid_port_init(&GRID_PORT_E, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_CONST_EAST  ,1);
    517e:	4622      	mov	r2, r4
    5180:	4919      	ldr	r1, [pc, #100]	; (51e8 <grid_port_init_all+0x84>)
    5182:	481a      	ldr	r0, [pc, #104]	; (51ec <grid_port_init_all+0x88>)
    5184:	9400      	str	r4, [sp, #0]
    5186:	2312      	movs	r3, #18
    5188:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_CONST_WEST  ,3);
    518a:	2703      	movs	r7, #3
	grid_port_init(&GRID_PORT_S, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_CONST_SOUTH ,2);
    518c:	4622      	mov	r2, r4
    518e:	4918      	ldr	r1, [pc, #96]	; (51f0 <grid_port_init_all+0x8c>)
    5190:	4818      	ldr	r0, [pc, #96]	; (51f4 <grid_port_init_all+0x90>)
    5192:	f8cd 9000 	str.w	r9, [sp]
    5196:	2313      	movs	r3, #19
    5198:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    519a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 5204 <grid_port_init_all+0xa0>
	grid_port_init(&GRID_PORT_W, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_CONST_WEST  ,3);
    519e:	9700      	str	r7, [sp, #0]
    51a0:	4622      	mov	r2, r4
    51a2:	4915      	ldr	r1, [pc, #84]	; (51f8 <grid_port_init_all+0x94>)
    51a4:	4815      	ldr	r0, [pc, #84]	; (51fc <grid_port_init_all+0x98>)
    51a6:	2314      	movs	r3, #20
    51a8:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    51aa:	f04f 0aff 	mov.w	sl, #255	; 0xff
    51ae:	463a      	mov	r2, r7
	grid_port_init(&GRID_PORT_H, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    51b0:	4f13      	ldr	r7, [pc, #76]	; (5200 <grid_port_init_all+0x9c>)
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    51b2:	f8cd a000 	str.w	sl, [sp]
    51b6:	4633      	mov	r3, r6
    51b8:	4631      	mov	r1, r6
    51ba:	4640      	mov	r0, r8
    51bc:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    51be:	4633      	mov	r3, r6
    51c0:	f8cd a000 	str.w	sl, [sp]
    51c4:	464a      	mov	r2, r9
    51c6:	4631      	mov	r1, r6
    51c8:	4638      	mov	r0, r7
    51ca:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    51cc:	f642 734b 	movw	r3, #12107	; 0x2f4b
    51d0:	f808 4003 	strb.w	r4, [r8, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    51d4:	54fc      	strb	r4, [r7, r3]
	
	
}
    51d6:	b002      	add	sp, #8
    51d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51dc:	00005005 	.word	0x00005005
    51e0:	20014c64 	.word	0x20014c64
    51e4:	200010ec 	.word	0x200010ec
    51e8:	20014c10 	.word	0x20014c10
    51ec:	200116d8 	.word	0x200116d8
    51f0:	20014d68 	.word	0x20014d68
    51f4:	2000b73c 	.word	0x2000b73c
    51f8:	20014d18 	.word	0x20014d18
    51fc:	20008270 	.word	0x20008270
    5200:	2000e68c 	.word	0x2000e68c
    5204:	2000404c 	.word	0x2000404c

00005208 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    520c:	f500 582c 	add.w	r8, r0, #11008	; 0x2b00
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5210:	b091      	sub	sp, #68	; 0x44
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    5212:	f108 0834 	add.w	r8, r8, #52	; 0x34
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5216:	af02      	add	r7, sp, #8
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    5218:	4b5c      	ldr	r3, [pc, #368]	; (538c <grid_port_process_inbound+0x184>)
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    521a:	6079      	str	r1, [r7, #4]
    521c:	4606      	mov	r6, r0
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    521e:	4640      	mov	r0, r8
    5220:	4798      	blx	r3
	
	if (!packet_size){
    5222:	4605      	mov	r5, r0
    5224:	2800      	cmp	r0, #0
    5226:	f000 80af 	beq.w	5388 <grid_port_process_inbound+0x180>
		uint8_t port_count = 6;
		struct grid_port* port_array_default[port_count];
		struct grid_port* port_array[port_count];
		
		
		port_array_default[0] = &GRID_PORT_N;
    522a:	4b59      	ldr	r3, [pc, #356]	; (5390 <grid_port_process_inbound+0x188>)
    522c:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    522e:	4b59      	ldr	r3, [pc, #356]	; (5394 <grid_port_process_inbound+0x18c>)
    5230:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    5232:	4b59      	ldr	r3, [pc, #356]	; (5398 <grid_port_process_inbound+0x190>)
    5234:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    5236:	4b59      	ldr	r3, [pc, #356]	; (539c <grid_port_process_inbound+0x194>)
    5238:	617b      	str	r3, [r7, #20]
		
		port_array_default[4] = &GRID_PORT_U;
    523a:	4b59      	ldr	r3, [pc, #356]	; (53a0 <grid_port_process_inbound+0x198>)
    523c:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    523e:	4b59      	ldr	r3, [pc, #356]	; (53a4 <grid_port_process_inbound+0x19c>)
    5240:	61fb      	str	r3, [r7, #28]
	}else{
    5242:	46eb      	mov	fp, sp
		
		uint8_t j=0;
		
		for(uint8_t i=0; i<port_count; i++){
    5244:	f107 0308 	add.w	r3, r7, #8
		port_array_default[5] = &GRID_PORT_H;
    5248:	f04f 0906 	mov.w	r9, #6
		uint8_t j=0;
    524c:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    524e:	f642 714b 	movw	r1, #12107	; 0x2f4b
    5252:	f853 2b04 	ldr.w	r2, [r3], #4
    5256:	5c50      	ldrb	r0, [r2, r1]
    5258:	b138      	cbz	r0, 526a <grid_port_process_inbound+0x62>
				port_array[j] = port_array_default[i];
    525a:	f107 0038 	add.w	r0, r7, #56	; 0x38
    525e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
				j++;
    5262:	3401      	adds	r4, #1
				port_array[j] = port_array_default[i];
    5264:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    5268:	b2e4      	uxtb	r4, r4
		for(uint8_t i=0; i<port_count; i++){
    526a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    526e:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    5272:	d1ee      	bne.n	5252 <grid_port_process_inbound+0x4a>
		
		for (uint8_t i=0; i<port_count; i++)
		{
			if (port_array[i] != por || loopback){
			
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    5274:	4a4c      	ldr	r2, [pc, #304]	; (53a8 <grid_port_process_inbound+0x1a0>)
    5276:	4649      	mov	r1, r9
			if (port_array[i] != por || loopback){
    5278:	f107 0a20 	add.w	sl, r7, #32
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    527c:	f242 7c3c 	movw	ip, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    5280:	b2c8      	uxtb	r0, r1
    5282:	4284      	cmp	r4, r0
    5284:	d805      	bhi.n	5292 <grid_port_process_inbound+0x8a>
					return 0;
				}	
			}	
		}
		
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    5286:	4b49      	ldr	r3, [pc, #292]	; (53ac <grid_port_process_inbound+0x1a4>)
    5288:	4640      	mov	r0, r8
    528a:	4798      	blx	r3
    528c:	42a8      	cmp	r0, r5
    528e:	d047      	beq.n	5320 <grid_port_process_inbound+0x118>
			while(1){			
    5290:	e7fe      	b.n	5290 <grid_port_process_inbound+0x88>
			if (port_array[i] != por || loopback){
    5292:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
    5296:	42b0      	cmp	r0, r6
    5298:	d101      	bne.n	529e <grid_port_process_inbound+0x96>
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	b1b3      	cbz	r3, 52cc <grid_port_process_inbound+0xc4>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    529e:	4460      	add	r0, ip
    52a0:	4790      	blx	r2
    52a2:	42a8      	cmp	r0, r5
    52a4:	4a40      	ldr	r2, [pc, #256]	; (53a8 <grid_port_process_inbound+0x1a0>)
    52a6:	f242 7c3c 	movw	ip, #10044	; 0x273c
    52aa:	d20f      	bcs.n	52cc <grid_port_process_inbound+0xc4>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    52ac:	2302      	movs	r3, #2
    52ae:	22c8      	movs	r2, #200	; 0xc8
    52b0:	e9cd 3200 	strd	r3, r2, [sp]
    52b4:	2264      	movs	r2, #100	; 0x64
    52b6:	483e      	ldr	r0, [pc, #248]	; (53b0 <grid_port_process_inbound+0x1a8>)
    52b8:	4c3e      	ldr	r4, [pc, #248]	; (53b4 <grid_port_process_inbound+0x1ac>)
    52ba:	2300      	movs	r3, #0
    52bc:	4611      	mov	r1, r2
    52be:	47a0      	blx	r4
					return 0;
    52c0:	46dd      	mov	sp, fp
		}	

		return 1;
	}
		
}
    52c2:	4648      	mov	r0, r9
    52c4:	373c      	adds	r7, #60	; 0x3c
    52c6:	46bd      	mov	sp, r7
    52c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (uint8_t i=0; i<port_count; i++)
    52cc:	3101      	adds	r1, #1
    52ce:	e7d7      	b.n	5280 <grid_port_process_inbound+0x78>
			if (port_array[i] != por || loopback){
    52d0:	f85a 0029 	ldr.w	r0, [sl, r9, lsl #2]
    52d4:	42b0      	cmp	r0, r6
    52d6:	d101      	bne.n	52dc <grid_port_process_inbound+0xd4>
    52d8:	6879      	ldr	r1, [r7, #4]
    52da:	b129      	cbz	r1, 52e8 <grid_port_process_inbound+0xe0>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    52dc:	4418      	add	r0, r3
    52de:	4629      	mov	r1, r5
    52e0:	4790      	blx	r2
    52e2:	4a35      	ldr	r2, [pc, #212]	; (53b8 <grid_port_process_inbound+0x1b0>)
    52e4:	f242 733c 	movw	r3, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    52e8:	f109 0901 	add.w	r9, r9, #1
    52ec:	fa5f f189 	uxtb.w	r1, r9
    52f0:	428c      	cmp	r4, r1
    52f2:	d8ed      	bhi.n	52d0 <grid_port_process_inbound+0xc8>
    52f4:	f04f 0a00 	mov.w	sl, #0
		for (uint16_t j=0; j<packet_size; j++)
    52f8:	fa1f f38a 	uxth.w	r3, sl
    52fc:	429d      	cmp	r5, r3
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    52fe:	4640      	mov	r0, r8
		for (uint16_t j=0; j<packet_size; j++)
    5300:	d816      	bhi.n	5330 <grid_port_process_inbound+0x128>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    5302:	4b2e      	ldr	r3, [pc, #184]	; (53bc <grid_port_process_inbound+0x1b4>)
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5304:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 53c8 <grid_port_process_inbound+0x1c0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    5308:	4798      	blx	r3
			if (port_array[i] != por || loopback){
    530a:	f107 0520 	add.w	r5, r7, #32
		for (uint8_t i=0; i<port_count; i++)
    530e:	2100      	movs	r1, #0
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5310:	f242 783c 	movw	r8, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    5314:	b2cb      	uxtb	r3, r1
    5316:	429c      	cmp	r4, r3
    5318:	d82c      	bhi.n	5374 <grid_port_process_inbound+0x16c>
		return 1;
    531a:	f04f 0901 	mov.w	r9, #1
    531e:	e7cf      	b.n	52c0 <grid_port_process_inbound+0xb8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    5320:	4a25      	ldr	r2, [pc, #148]	; (53b8 <grid_port_process_inbound+0x1b0>)
    5322:	f04f 0900 	mov.w	r9, #0
			if (port_array[i] != por || loopback){
    5326:	f107 0a20 	add.w	sl, r7, #32
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    532a:	f242 733c 	movw	r3, #10044	; 0x273c
    532e:	e7dd      	b.n	52ec <grid_port_process_inbound+0xe4>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    5330:	4b23      	ldr	r3, [pc, #140]	; (53c0 <grid_port_process_inbound+0x1b8>)
    5332:	4798      	blx	r3
			for (uint8_t i=0; i<port_count; i++){
    5334:	f04f 0900 	mov.w	r9, #0
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    5338:	4601      	mov	r1, r0
				if (port_array[i] != por || loopback){
    533a:	f107 0320 	add.w	r3, r7, #32
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    533e:	f242 7c3c 	movw	ip, #10044	; 0x273c
			for (uint8_t i=0; i<port_count; i++){
    5342:	fa5f f089 	uxtb.w	r0, r9
    5346:	4284      	cmp	r4, r0
    5348:	d802      	bhi.n	5350 <grid_port_process_inbound+0x148>
		for (uint16_t j=0; j<packet_size; j++)
    534a:	f10a 0a01 	add.w	sl, sl, #1
    534e:	e7d3      	b.n	52f8 <grid_port_process_inbound+0xf0>
				if (port_array[i] != por || loopback){
    5350:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    5354:	42b0      	cmp	r0, r6
    5356:	d101      	bne.n	535c <grid_port_process_inbound+0x154>
    5358:	687a      	ldr	r2, [r7, #4]
    535a:	b142      	cbz	r2, 536e <grid_port_process_inbound+0x166>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    535c:	4b19      	ldr	r3, [pc, #100]	; (53c4 <grid_port_process_inbound+0x1bc>)
    535e:	6039      	str	r1, [r7, #0]
    5360:	4460      	add	r0, ip
    5362:	4798      	blx	r3
    5364:	6839      	ldr	r1, [r7, #0]
    5366:	f107 0320 	add.w	r3, r7, #32
    536a:	f242 7c3c 	movw	ip, #10044	; 0x273c
			for (uint8_t i=0; i<port_count; i++){
    536e:	f109 0901 	add.w	r9, r9, #1
    5372:	e7e6      	b.n	5342 <grid_port_process_inbound+0x13a>
			if (port_array[i] != por || loopback){
    5374:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
    5378:	42b0      	cmp	r0, r6
    537a:	d101      	bne.n	5380 <grid_port_process_inbound+0x178>
    537c:	687b      	ldr	r3, [r7, #4]
    537e:	b10b      	cbz	r3, 5384 <grid_port_process_inbound+0x17c>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5380:	4440      	add	r0, r8
    5382:	47c8      	blx	r9
		for (uint8_t i=0; i<port_count; i++)
    5384:	3101      	adds	r1, #1
    5386:	e7c5      	b.n	5314 <grid_port_process_inbound+0x10c>
		return 0;
    5388:	4681      	mov	r9, r0
    538a:	e79a      	b.n	52c2 <grid_port_process_inbound+0xba>
    538c:	00004f05 	.word	0x00004f05
    5390:	200010ec 	.word	0x200010ec
    5394:	200116d8 	.word	0x200116d8
    5398:	2000b73c 	.word	0x2000b73c
    539c:	20008270 	.word	0x20008270
    53a0:	2000404c 	.word	0x2000404c
    53a4:	2000e68c 	.word	0x2000e68c
    53a8:	00004821 	.word	0x00004821
    53ac:	00004f5b 	.word	0x00004f5b
    53b0:	20006fa4 	.word	0x20006fa4
    53b4:	000097ab 	.word	0x000097ab
    53b8:	00004839 	.word	0x00004839
    53bc:	00004fed 	.word	0x00004fed
    53c0:	00004fc3 	.word	0x00004fc3
    53c4:	00004875 	.word	0x00004875
    53c8:	00004895 	.word	0x00004895

000053cc <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    53cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			

	// OLD DEBUG IMPLEMENTATION
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    53d0:	f500 551c 	add.w	r5, r0, #9984	; 0x2700
    53d4:	353c      	adds	r5, #60	; 0x3c
    53d6:	4ba7      	ldr	r3, [pc, #668]	; (5674 <grid_port_process_outbound_usb+0x2a8>)
uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    53d8:	b0ed      	sub	sp, #436	; 0x1b4
    53da:	4680      	mov	r8, r0
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    53dc:	4628      	mov	r0, r5
    53de:	4798      	blx	r3
	
	if (!length){		
    53e0:	4604      	mov	r4, r0
    53e2:	b910      	cbnz	r0, 53ea <grid_port_process_outbound_usb+0x1e>
			
	// Let's send the packet through USB
	cdcdf_acm_write(por->tx_double_buffer, packet_length);

	
}
    53e4:	b06d      	add	sp, #436	; 0x1b4
    53e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53ea:	f108 0b2c 	add.w	fp, r8, #44	; 0x2c
    53ee:	f508 539d 	add.w	r3, r8, #5024	; 0x13a0
    53f2:	3314      	adds	r3, #20
	if (!length){		
    53f4:	465a      	mov	r2, fp
		por->tx_double_buffer[i] = 0;
    53f6:	2100      	movs	r1, #0
    53f8:	f802 1b01 	strb.w	r1, [r2], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    53fc:	429a      	cmp	r2, r3
    53fe:	d1fb      	bne.n	53f8 <grid_port_process_outbound_usb+0x2c>
	grid_msg_init(&message);
    5400:	4b9d      	ldr	r3, [pc, #628]	; (5678 <grid_port_process_outbound_usb+0x2ac>)
		grid_msg_packet_receive_char(&message, nextchar);
    5402:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 56bc <grid_port_process_outbound_usb+0x2f0>
	grid_msg_init(&message);
    5406:	a805      	add	r0, sp, #20
    5408:	4798      	blx	r3
	grid_buffer_read_init(&por->tx_buffer);
    540a:	4b9c      	ldr	r3, [pc, #624]	; (567c <grid_port_process_outbound_usb+0x2b0>)
    540c:	4628      	mov	r0, r5
    540e:	4798      	blx	r3
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    5410:	4b9b      	ldr	r3, [pc, #620]	; (5680 <grid_port_process_outbound_usb+0x2b4>)
	for (uint16_t i = 0; i<length; i++){
    5412:	46da      	mov	sl, fp
    5414:	2700      	movs	r7, #0
    5416:	b2ba      	uxth	r2, r7
    5418:	4294      	cmp	r4, r2
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    541a:	4628      	mov	r0, r5
	for (uint16_t i = 0; i<length; i++){
    541c:	d825      	bhi.n	546a <grid_port_process_outbound_usb+0x9e>
	grid_buffer_read_acknowledge(&por->tx_buffer);
    541e:	4b99      	ldr	r3, [pc, #612]	; (5684 <grid_port_process_outbound_usb+0x2b8>)
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    5420:	4c99      	ldr	r4, [pc, #612]	; (5688 <grid_port_process_outbound_usb+0x2bc>)
	grid_buffer_read_acknowledge(&por->tx_buffer);
    5422:	4798      	blx	r3
	int8_t dx = grid_msg_header_get_dx(&message) - GRID_SYS_DEFAULT_POSITION;
    5424:	4b99      	ldr	r3, [pc, #612]	; (568c <grid_port_process_outbound_usb+0x2c0>)
    5426:	a805      	add	r0, sp, #20
    5428:	4798      	blx	r3
    542a:	387f      	subs	r0, #127	; 0x7f
    542c:	b243      	sxtb	r3, r0
    542e:	9300      	str	r3, [sp, #0]
	int8_t dy = grid_msg_header_get_dy(&message) - GRID_SYS_DEFAULT_POSITION;	
    5430:	a805      	add	r0, sp, #20
    5432:	4b97      	ldr	r3, [pc, #604]	; (5690 <grid_port_process_outbound_usb+0x2c4>)
    5434:	4798      	blx	r3
    5436:	387f      	subs	r0, #127	; 0x7f
    5438:	b243      	sxtb	r3, r0
	for (uint16_t i=0; i<message.body_length; i++){
    543a:	f04f 0a00 	mov.w	sl, #0
	int8_t dy = grid_msg_header_get_dy(&message) - GRID_SYS_DEFAULT_POSITION;	
    543e:	9301      	str	r3, [sp, #4]
	uint8_t current_start		= 0;
    5440:	4656      	mov	r6, sl
	for (uint16_t i=0; i<message.body_length; i++){
    5442:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
    5444:	fa1f f38a 	uxth.w	r3, sl
    5448:	429a      	cmp	r2, r3
    544a:	d818      	bhi.n	547e <grid_port_process_outbound_usb+0xb2>
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    544c:	4b91      	ldr	r3, [pc, #580]	; (5694 <grid_port_process_outbound_usb+0x2c8>)
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    544e:	4e92      	ldr	r6, [pc, #584]	; (5698 <grid_port_process_outbound_usb+0x2cc>)
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    5450:	a805      	add	r0, sp, #20
    5452:	4798      	blx	r3
	for (uint32_t i=0; i<packet_length; i++){
    5454:	2400      	movs	r4, #0
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    5456:	4605      	mov	r5, r0
	for (uint32_t i=0; i<packet_length; i++){
    5458:	42ac      	cmp	r4, r5
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    545a:	4621      	mov	r1, r4
	for (uint32_t i=0; i<packet_length; i++){
    545c:	f040 8104 	bne.w	5668 <grid_port_process_outbound_usb+0x29c>
	cdcdf_acm_write(por->tx_double_buffer, packet_length);
    5460:	4b8e      	ldr	r3, [pc, #568]	; (569c <grid_port_process_outbound_usb+0x2d0>)
    5462:	f108 002c 	add.w	r0, r8, #44	; 0x2c
    5466:	4798      	blx	r3
}
    5468:	e7bc      	b.n	53e4 <grid_port_process_outbound_usb+0x18>
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    546a:	4798      	blx	r3
    546c:	4606      	mov	r6, r0
		grid_msg_packet_receive_char(&message, nextchar);
    546e:	4601      	mov	r1, r0
    5470:	a805      	add	r0, sp, #20
    5472:	47c8      	blx	r9
		por->tx_double_buffer[i] = nextchar;	
    5474:	3701      	adds	r7, #1
    5476:	f80a 6b01 	strb.w	r6, [sl], #1
	for (uint16_t i = 0; i<length; i++){
    547a:	4b81      	ldr	r3, [pc, #516]	; (5680 <grid_port_process_outbound_usb+0x2b4>)
    547c:	e7cb      	b.n	5416 <grid_port_process_outbound_usb+0x4a>
		if (message.body[i] == GRID_CONST_STX){
    547e:	aa05      	add	r2, sp, #20
    5480:	4413      	add	r3, r2
    5482:	7d1b      	ldrb	r3, [r3, #20]
    5484:	2b02      	cmp	r3, #2
    5486:	d104      	bne.n	5492 <grid_port_process_outbound_usb+0xc6>
			current_start = i;
    5488:	fa5f f68a 	uxtb.w	r6, sl
	for (uint16_t i=0; i<message.body_length; i++){
    548c:	f10a 0a01 	add.w	sl, sl, #1
    5490:	e7d7      	b.n	5442 <grid_port_process_outbound_usb+0x76>
		else if (message.body[i] == GRID_CONST_ETX && current_start!=0){
    5492:	2b03      	cmp	r3, #3
    5494:	d1fa      	bne.n	548c <grid_port_process_outbound_usb+0xc0>
    5496:	b90e      	cbnz	r6, 549c <grid_port_process_outbound_usb+0xd0>
			current_start = 0;
    5498:	2600      	movs	r6, #0
			else if (msg_class == GRID_CLASS_HIDKEYBOARD_code && msg_instr == GRID_INSTR_EXECUTE_code){
    549a:	e7f7      	b.n	548c <grid_port_process_outbound_usb+0xc0>
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    549c:	4631      	mov	r1, r6
    549e:	2201      	movs	r2, #1
    54a0:	a805      	add	r0, sp, #20
    54a2:	47a0      	blx	r4
    54a4:	4635      	mov	r5, r6
			uint8_t msg_instr = grid_msg_text_get_parameter(&message, current_start, GRID_INSTR_offset, GRID_INSTR_length);
    54a6:	2301      	movs	r3, #1
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    54a8:	b2c6      	uxtb	r6, r0
			uint8_t msg_instr = grid_msg_text_get_parameter(&message, current_start, GRID_INSTR_offset, GRID_INSTR_length);
    54aa:	2204      	movs	r2, #4
    54ac:	4629      	mov	r1, r5
    54ae:	a805      	add	r0, sp, #20
    54b0:	47a0      	blx	r4
    54b2:	b2c0      	uxtb	r0, r0
			if (msg_class == GRID_CLASS_MIDIRELATIVE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    54b4:	2e00      	cmp	r6, #0
    54b6:	d13f      	bne.n	5538 <grid_port_process_outbound_usb+0x16c>
    54b8:	280e      	cmp	r0, #14
    54ba:	d1ed      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t midi_cablecommand = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset,		GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length);
    54bc:	4629      	mov	r1, r5
    54be:	2302      	movs	r3, #2
    54c0:	2205      	movs	r2, #5
    54c2:	a805      	add	r0, sp, #20
    54c4:	47a0      	blx	r4
				uint8_t midi_commandchannel = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset ,		GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length);
    54c6:	4629      	mov	r1, r5
    54c8:	2302      	movs	r3, #2
    54ca:	2207      	movs	r2, #7
    54cc:	a805      	add	r0, sp, #20
    54ce:	47a0      	blx	r4
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54d0:	4629      	mov	r1, r5
				uint8_t midi_commandchannel = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset ,		GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length);
    54d2:	4681      	mov	r9, r0
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54d4:	2302      	movs	r3, #2
    54d6:	2209      	movs	r2, #9
    54d8:	a805      	add	r0, sp, #20
    54da:	47a0      	blx	r4
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54dc:	4629      	mov	r1, r5
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54de:	4607      	mov	r7, r0
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54e0:	2302      	movs	r3, #2
    54e2:	220b      	movs	r2, #11
    54e4:	a805      	add	r0, sp, #20
    54e6:	47a0      	blx	r4
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54e8:	9901      	ldr	r1, [sp, #4]
    54ea:	4a6d      	ldr	r2, [pc, #436]	; (56a0 <grid_port_process_outbound_usb+0x2d4>)
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54ec:	f88d 000f 	strb.w	r0, [sp, #15]
				uint8_t midi_command = 	(midi_commandchannel&0xF0)>>4;
    54f0:	f3c9 1303 	ubfx	r3, r9, #4, #4
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54f4:	7bd2      	ldrb	r2, [r2, #15]
				midievent.byte0 = 0<<4|midi_command;
    54f6:	f88d 300c 	strb.w	r3, [sp, #12]
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54fa:	f1c1 0900 	rsb	r9, r1, #0
    54fe:	f009 0903 	and.w	r9, r9, #3
    5502:	eb09 0982 	add.w	r9, r9, r2, lsl #2
    5506:	f009 090f 	and.w	r9, r9, #15
				midievent.byte1 = midi_command<<4|midi_channel;
    550a:	ea49 1903 	orr.w	r9, r9, r3, lsl #4
				midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    550e:	b2ff      	uxtb	r7, r7
    5510:	9b00      	ldr	r3, [sp, #0]
				midievent.byte1 = midi_command<<4|midi_channel;
    5512:	f88d 900d 	strb.w	r9, [sp, #13]
				midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    5516:	37e0      	adds	r7, #224	; 0xe0
    5518:	2260      	movs	r2, #96	; 0x60
    551a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    551e:	fb97 f3f2 	sdiv	r3, r7, r2
    5522:	fb02 7713 	mls	r7, r2, r3, r7
    5526:	f88d 700e 	strb.w	r7, [sp, #14]
				grid_midi_tx_push(midievent);
    552a:	9803      	ldr	r0, [sp, #12]
    552c:	4b5d      	ldr	r3, [pc, #372]	; (56a4 <grid_port_process_outbound_usb+0x2d8>)
    552e:	4798      	blx	r3
				grid_midi_tx_pop(midievent);				
    5530:	9803      	ldr	r0, [sp, #12]
    5532:	4b5d      	ldr	r3, [pc, #372]	; (56a8 <grid_port_process_outbound_usb+0x2dc>)
    5534:	4798      	blx	r3
			if (msg_class == GRID_CLASS_MIDIRELATIVE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    5536:	e7a9      	b.n	548c <grid_port_process_outbound_usb+0xc0>
			else if (msg_class == GRID_CLASS_MIDIABSOLUTE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    5538:	2e01      	cmp	r6, #1
    553a:	d127      	bne.n	558c <grid_port_process_outbound_usb+0x1c0>
    553c:	280e      	cmp	r0, #14
    553e:	d1ab      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    5540:	4629      	mov	r1, r5
    5542:	2302      	movs	r3, #2
    5544:	2205      	movs	r2, #5
    5546:	a805      	add	r0, sp, #20
    5548:	47a0      	blx	r4
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    554a:	4629      	mov	r1, r5
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    554c:	4681      	mov	r9, r0
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    554e:	2302      	movs	r3, #2
    5550:	2207      	movs	r2, #7
    5552:	a805      	add	r0, sp, #20
    5554:	47a0      	blx	r4
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5556:	4629      	mov	r1, r5
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    5558:	4607      	mov	r7, r0
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    555a:	2302      	movs	r3, #2
    555c:	2209      	movs	r2, #9
    555e:	a805      	add	r0, sp, #20
    5560:	47a0      	blx	r4
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    5562:	220b      	movs	r2, #11
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5564:	4606      	mov	r6, r0
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    5566:	4629      	mov	r1, r5
    5568:	2302      	movs	r3, #2
    556a:	a805      	add	r0, sp, #20
    556c:	47a0      	blx	r4
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    556e:	f88d 900c 	strb.w	r9, [sp, #12]
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    5572:	f88d 700d 	strb.w	r7, [sp, #13]
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5576:	f88d 600e 	strb.w	r6, [sp, #14]
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    557a:	f88d 000f 	strb.w	r0, [sp, #15]
				grid_midi_tx_push(midievent);
    557e:	9803      	ldr	r0, [sp, #12]
    5580:	4b48      	ldr	r3, [pc, #288]	; (56a4 <grid_port_process_outbound_usb+0x2d8>)
    5582:	4798      	blx	r3
				grid_midi_tx_pop(midievent);	
    5584:	9803      	ldr	r0, [sp, #12]
    5586:	4b48      	ldr	r3, [pc, #288]	; (56a8 <grid_port_process_outbound_usb+0x2dc>)
    5588:	4798      	blx	r3
    558a:	e785      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
			else if (msg_class == GRID_CLASS_HIDKEYBOARD_code && msg_instr == GRID_INSTR_EXECUTE_code){
    558c:	2e90      	cmp	r6, #144	; 0x90
    558e:	d11d      	bne.n	55cc <grid_port_process_outbound_usb+0x200>
    5590:	280e      	cmp	r0, #14
    5592:	d181      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    5594:	4629      	mov	r1, r5
    5596:	2302      	movs	r3, #2
    5598:	2205      	movs	r2, #5
    559a:	a805      	add	r0, sp, #20
    559c:	47a0      	blx	r4
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    559e:	4629      	mov	r1, r5
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    55a0:	4607      	mov	r7, r0
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55a2:	2302      	movs	r3, #2
    55a4:	2207      	movs	r2, #7
    55a6:	a805      	add	r0, sp, #20
    55a8:	47a0      	blx	r4
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55aa:	4629      	mov	r1, r5
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55ac:	4606      	mov	r6, r0
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55ae:	2302      	movs	r3, #2
    55b0:	2209      	movs	r2, #9
    55b2:	a805      	add	r0, sp, #20
    55b4:	47a0      	blx	r4
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55b6:	4b3d      	ldr	r3, [pc, #244]	; (56ac <grid_port_process_outbound_usb+0x2e0>)
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55b8:	f88d 000e 	strb.w	r0, [sp, #14]
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55bc:	a903      	add	r1, sp, #12
    55be:	483c      	ldr	r0, [pc, #240]	; (56b0 <grid_port_process_outbound_usb+0x2e4>)
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    55c0:	f88d 700d 	strb.w	r7, [sp, #13]
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55c4:	f88d 600c 	strb.w	r6, [sp, #12]
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55c8:	4798      	blx	r3
    55ca:	e765      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
			else if (msg_class == GRID_CLASS_HIDKEYMACRO_code && msg_instr == GRID_INSTR_EXECUTE_code){
    55cc:	2e91      	cmp	r6, #145	; 0x91
    55ce:	f47f af63 	bne.w	5498 <grid_port_process_outbound_usb+0xcc>
    55d2:	280e      	cmp	r0, #14
    55d4:	f47f af60 	bne.w	5498 <grid_port_process_outbound_usb+0xcc>
    55d8:	2605      	movs	r6, #5
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    55da:	2302      	movs	r3, #2
    55dc:	4632      	mov	r2, r6
    55de:	4629      	mov	r1, r5
    55e0:	a805      	add	r0, sp, #20
    55e2:	47a0      	blx	r4
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    55e4:	1cb2      	adds	r2, r6, #2
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    55e6:	4607      	mov	r7, r0
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    55e8:	2302      	movs	r3, #2
    55ea:	b2d2      	uxtb	r2, r2
    55ec:	4629      	mov	r1, r5
    55ee:	a805      	add	r0, sp, #20
    55f0:	47a0      	blx	r4
    55f2:	b2c0      	uxtb	r0, r0
                    if (key_code != 255){
    55f4:	28ff      	cmp	r0, #255	; 0xff
    55f6:	d00d      	beq.n	5614 <grid_port_process_outbound_usb+0x248>
                        key.ispressed = 1;
    55f8:	2201      	movs	r2, #1
    55fa:	f88d 200e 	strb.w	r2, [sp, #14]
                        key.delay = 100;
    55fe:	2264      	movs	r2, #100	; 0x64
                        key.ismodifier = key_ismodifier;
    5600:	ab03      	add	r3, sp, #12
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5602:	f88d 700d 	strb.w	r7, [sp, #13]
                        key.keycode = key_code;
    5606:	f88d 000c 	strb.w	r0, [sp, #12]
                        key.delay = 100;
    560a:	9204      	str	r2, [sp, #16]
                        grid_keyboard_tx_push(key);
    560c:	e893 0003 	ldmia.w	r3, {r0, r1}
    5610:	4b28      	ldr	r3, [pc, #160]	; (56b4 <grid_port_process_outbound_usb+0x2e8>)
    5612:	4798      	blx	r3
				for (uint8_t k=0; k<6; k++){
    5614:	3604      	adds	r6, #4
    5616:	b2f6      	uxtb	r6, r6
    5618:	2e1d      	cmp	r6, #29
    561a:	d1de      	bne.n	55da <grid_port_process_outbound_usb+0x20e>
                delay_ms(5);
    561c:	4b26      	ldr	r3, [pc, #152]	; (56b8 <grid_port_process_outbound_usb+0x2ec>)
    561e:	2005      	movs	r0, #5
    5620:	4798      	blx	r3
    5622:	2605      	movs	r6, #5
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5624:	2302      	movs	r3, #2
    5626:	4632      	mov	r2, r6
    5628:	4629      	mov	r1, r5
    562a:	a805      	add	r0, sp, #20
    562c:	47a0      	blx	r4
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    562e:	1cb2      	adds	r2, r6, #2
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5630:	4607      	mov	r7, r0
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    5632:	2302      	movs	r3, #2
    5634:	b2d2      	uxtb	r2, r2
    5636:	4629      	mov	r1, r5
    5638:	a805      	add	r0, sp, #20
    563a:	47a0      	blx	r4
    563c:	b2c0      	uxtb	r0, r0
                    if (key_code != 255){
    563e:	28ff      	cmp	r0, #255	; 0xff
    5640:	d00d      	beq.n	565e <grid_port_process_outbound_usb+0x292>
                        key.ispressed = 0;
    5642:	2200      	movs	r2, #0
    5644:	f88d 200e 	strb.w	r2, [sp, #14]
                        key.delay = 100;
    5648:	2264      	movs	r2, #100	; 0x64
                        key.ismodifier = key_ismodifier;
    564a:	ab03      	add	r3, sp, #12
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    564c:	f88d 700d 	strb.w	r7, [sp, #13]
                        key.keycode = key_code;
    5650:	f88d 000c 	strb.w	r0, [sp, #12]
                        key.delay = 100;
    5654:	9204      	str	r2, [sp, #16]
                        grid_keyboard_tx_push(key);
    5656:	e893 0003 	ldmia.w	r3, {r0, r1}
    565a:	4b16      	ldr	r3, [pc, #88]	; (56b4 <grid_port_process_outbound_usb+0x2e8>)
    565c:	4798      	blx	r3
				for (uint8_t k=0; k<6; k++){
    565e:	3604      	adds	r6, #4
    5660:	b2f6      	uxtb	r6, r6
    5662:	2e1d      	cmp	r6, #29
    5664:	d1de      	bne.n	5624 <grid_port_process_outbound_usb+0x258>
    5666:	e717      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    5668:	a805      	add	r0, sp, #20
    566a:	47b0      	blx	r6
	for (uint32_t i=0; i<packet_length; i++){
    566c:	3401      	adds	r4, #1
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    566e:	f80b 0b01 	strb.w	r0, [fp], #1
	for (uint32_t i=0; i<packet_length; i++){
    5672:	e6f1      	b.n	5458 <grid_port_process_outbound_usb+0x8c>
    5674:	00004f05 	.word	0x00004f05
    5678:	00008545 	.word	0x00008545
    567c:	00004f5b 	.word	0x00004f5b
    5680:	00004fc3 	.word	0x00004fc3
    5684:	00004fed 	.word	0x00004fed
    5688:	0000850d 	.word	0x0000850d
    568c:	00008401 	.word	0x00008401
    5690:	00008441 	.word	0x00008441
    5694:	000084a1 	.word	0x000084a1
    5698:	0000863b 	.word	0x0000863b
    569c:	0000ba8d 	.word	0x0000ba8d
    56a0:	20006fa4 	.word	0x20006fa4
    56a4:	0000b1a5 	.word	0x0000b1a5
    56a8:	0000b1cd 	.word	0x0000b1cd
    56ac:	0000afdd 	.word	0x0000afdd
    56b0:	20008200 	.word	0x20008200
    56b4:	0000b2b5 	.word	0x0000b2b5
    56b8:	0000d055 	.word	0x0000d055
    56bc:	000085ed 	.word	0x000085ed

000056c0 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    56c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56c4:	ed2d 8b02 	vpush	{d8}
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    56c8:	f500 541c 	add.w	r4, r0, #9984	; 0x2700
    56cc:	343c      	adds	r4, #60	; 0x3c
uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    56ce:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    56d2:	4bb5      	ldr	r3, [pc, #724]	; (59a8 <grid_port_process_outbound_ui+0x2e8>)
    56d4:	4620      	mov	r0, r4
    56d6:	4798      	blx	r3
	
	if (!length){
    56d8:	2500      	movs	r5, #0
    56da:	9006      	str	r0, [sp, #24]
    56dc:	b928      	cbnz	r0, 56ea <grid_port_process_outbound_ui+0x2a>

		
	}
	
	
}
    56de:	f50d 7d77 	add.w	sp, sp, #988	; 0x3dc
    56e2:	ecbd 8b02 	vpop	{d8}
    56e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    56ea:	4bb0      	ldr	r3, [pc, #704]	; (59ac <grid_port_process_outbound_ui+0x2ec>)
    56ec:	952b      	str	r5, [sp, #172]	; 0xac
    56ee:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    56f2:	4629      	mov	r1, r5
    56f4:	a82c      	add	r0, sp, #176	; 0xb0
    56f6:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    56f8:	4bad      	ldr	r3, [pc, #692]	; (59b0 <grid_port_process_outbound_ui+0x2f0>)
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    56fa:	4fae      	ldr	r7, [pc, #696]	; (59b4 <grid_port_process_outbound_ui+0x2f4>)
		grid_buffer_read_init(&por->tx_buffer);
    56fc:	4620      	mov	r0, r4
    56fe:	4798      	blx	r3
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    5700:	ae2b      	add	r6, sp, #172	; 0xac
		for (uint16_t i = 0; i<length; i++){
    5702:	9a06      	ldr	r2, [sp, #24]
    5704:	b2ab      	uxth	r3, r5
    5706:	429a      	cmp	r2, r3
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    5708:	4620      	mov	r0, r4
		for (uint16_t i = 0; i<length; i++){
    570a:	d839      	bhi.n	5780 <grid_port_process_outbound_ui+0xc0>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    570c:	4baa      	ldr	r3, [pc, #680]	; (59b8 <grid_port_process_outbound_ui+0x2f8>)
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    570e:	4fab      	ldr	r7, [pc, #684]	; (59bc <grid_port_process_outbound_ui+0x2fc>)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    5710:	4798      	blx	r3
		uint8_t error=0;
    5712:	2500      	movs	r5, #0
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5714:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    5718:	2202      	movs	r2, #2
    571a:	2106      	movs	r1, #6
    571c:	4630      	mov	r0, r6
		uint8_t error=0;
    571e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5722:	47b8      	blx	r7
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    5724:	f10d 0322 	add.w	r3, sp, #34	; 0x22
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5728:	fa5f fb80 	uxtb.w	fp, r0
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    572c:	2202      	movs	r2, #2
    572e:	2108      	movs	r1, #8
    5730:	4630      	mov	r0, r6
    5732:	47b8      	blx	r7
		if (dx == GRID_SYS_DEFAULT_POSITION && dy == GRID_SYS_DEFAULT_POSITION){
    5734:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    5738:	b2c0      	uxtb	r0, r0
		if (dx == GRID_SYS_DEFAULT_POSITION && dy == GRID_SYS_DEFAULT_POSITION){
    573a:	d125      	bne.n	5788 <grid_port_process_outbound_ui+0xc8>
			position_is_me = 1;
    573c:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
    5740:	f1d2 0b00 	rsbs	fp, r2, #0
    5744:	eb4b 0b02 	adc.w	fp, fp, r2
		uint8_t position_is_local = 0;
    5748:	462c      	mov	r4, r5
		uint8_t position_is_global = 0;
    574a:	9502      	str	r5, [sp, #8]
		uint8_t error_flag = 0;	
    574c:	2300      	movs	r3, #0
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    574e:	4d9c      	ldr	r5, [pc, #624]	; (59c0 <grid_port_process_outbound_ui+0x300>)
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    5750:	f8df a298 	ldr.w	sl, [pc, #664]	; 59ec <grid_port_process_outbound_ui+0x32c>
		uint8_t error_flag = 0;	
    5754:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    5758:	9303      	str	r3, [sp, #12]
		uint8_t current_start		= 0;
    575a:	4698      	mov	r8, r3
			if (message[i] == GRID_CONST_STX){
    575c:	9b03      	ldr	r3, [sp, #12]
    575e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    5762:	f813 1009 	ldrb.w	r1, [r3, r9]
    5766:	2902      	cmp	r1, #2
    5768:	d120      	bne.n	57ac <grid_port_process_outbound_ui+0xec>
				current_start = i;
    576a:	f89d 800c 	ldrb.w	r8, [sp, #12]
		for (uint16_t i=0; i<length; i++){
    576e:	9b03      	ldr	r3, [sp, #12]
    5770:	9a06      	ldr	r2, [sp, #24]
    5772:	3301      	adds	r3, #1
    5774:	9303      	str	r3, [sp, #12]
    5776:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    577a:	429a      	cmp	r2, r3
    577c:	d8ee      	bhi.n	575c <grid_port_process_outbound_ui+0x9c>
    577e:	e7ae      	b.n	56de <grid_port_process_outbound_ui+0x1e>
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    5780:	47b8      	blx	r7
    5782:	5570      	strb	r0, [r6, r5]
		for (uint16_t i = 0; i<length; i++){
    5784:	3501      	adds	r5, #1
    5786:	e7bc      	b.n	5702 <grid_port_process_outbound_ui+0x42>
		else if (dx == GRID_SYS_GLOBAL_POSITION && dy==GRID_SYS_GLOBAL_POSITION){
    5788:	f1bb 0f00 	cmp.w	fp, #0
    578c:	d105      	bne.n	579a <grid_port_process_outbound_ui+0xda>
		uint8_t position_is_global = 0;
    578e:	fab0 f380 	clz	r3, r0
    5792:	095b      	lsrs	r3, r3, #5
    5794:	9302      	str	r3, [sp, #8]
		uint8_t position_is_local = 0;
    5796:	465c      	mov	r4, fp
    5798:	e7d8      	b.n	574c <grid_port_process_outbound_ui+0x8c>
		else if (dx == GRID_SYS_LOCAL_POSITION && dy==GRID_SYS_LOCAL_POSITION){
    579a:	ea0b 0000 	and.w	r0, fp, r0
    579e:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
    57a2:	425c      	negs	r4, r3
    57a4:	415c      	adcs	r4, r3
		uint8_t position_is_global = 0;
    57a6:	46ab      	mov	fp, r5
		uint8_t position_is_me = 0;
    57a8:	9502      	str	r5, [sp, #8]
    57aa:	e7cf      	b.n	574c <grid_port_process_outbound_ui+0x8c>
			else if (message[i] == GRID_CONST_ETX && current_start!=0){
    57ac:	2903      	cmp	r1, #3
    57ae:	d1de      	bne.n	576e <grid_port_process_outbound_ui+0xae>
    57b0:	f1b8 0f00 	cmp.w	r8, #0
    57b4:	d102      	bne.n	57bc <grid_port_process_outbound_ui+0xfc>
				current_start = 0;
    57b6:	f04f 0800 	mov.w	r8, #0
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    57ba:	e7d8      	b.n	576e <grid_port_process_outbound_ui+0xae>
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    57bc:	f108 0001 	add.w	r0, r8, #1
    57c0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57c4:	4448      	add	r0, r9
    57c6:	47a8      	blx	r5
    57c8:	b2c6      	uxtb	r6, r0
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    57ca:	f108 0004 	add.w	r0, r8, #4
    57ce:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57d2:	2101      	movs	r1, #1
    57d4:	4448      	add	r0, r9
    57d6:	47a8      	blx	r5
				if (msg_class == GRID_CLASS_BANKACTIVE_code){
    57d8:	2e30      	cmp	r6, #48	; 0x30
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    57da:	b2c7      	uxtb	r7, r0
				if (msg_class == GRID_CLASS_BANKACTIVE_code){
    57dc:	d126      	bne.n	582c <grid_port_process_outbound_ui+0x16c>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    57de:	f108 0005 	add.w	r0, r8, #5
    57e2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57e6:	2102      	movs	r1, #2
    57e8:	4448      	add	r0, r9
    57ea:	47a8      	blx	r5
					if (msg_instr == GRID_INSTR_EXECUTE_code){ //SET BANK
    57ec:	2f0e      	cmp	r7, #14
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    57ee:	4606      	mov	r6, r0
					if (msg_instr == GRID_INSTR_EXECUTE_code){ //SET BANK
    57f0:	d10e      	bne.n	5810 <grid_port_process_outbound_ui+0x150>
						if (grid_sys_get_bank_valid(&grid_sys_state) == 0){
    57f2:	4874      	ldr	r0, [pc, #464]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    57f4:	4b74      	ldr	r3, [pc, #464]	; (59c8 <grid_port_process_outbound_ui+0x308>)
    57f6:	4798      	blx	r3
    57f8:	4602      	mov	r2, r0
    57fa:	b920      	cbnz	r0, 5806 <grid_port_process_outbound_ui+0x146>
							grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    57fc:	4601      	mov	r1, r0
    57fe:	4f73      	ldr	r7, [pc, #460]	; (59cc <grid_port_process_outbound_ui+0x30c>)
    5800:	4873      	ldr	r0, [pc, #460]	; (59d0 <grid_port_process_outbound_ui+0x310>)
    5802:	230c      	movs	r3, #12
    5804:	47b8      	blx	r7
						grid_sys_set_bank(&grid_sys_state, banknumber);
    5806:	486f      	ldr	r0, [pc, #444]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5808:	b2f1      	uxtb	r1, r6
								grid_sys_set_bank(&grid_sys_state, banknumber);
    580a:	4b72      	ldr	r3, [pc, #456]	; (59d4 <grid_port_process_outbound_ui+0x314>)
					grid_sys_recall_configuration(&grid_sys_state, banknumber);
    580c:	4798      	blx	r3
    580e:	e7d2      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
					else if (msg_instr == GRID_INSTR_FETCH_code){ //GET BANK
    5810:	2f0f      	cmp	r7, #15
    5812:	d1d0      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_get_bank_valid(&grid_sys_state) != 0){
    5814:	486b      	ldr	r0, [pc, #428]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5816:	4b6c      	ldr	r3, [pc, #432]	; (59c8 <grid_port_process_outbound_ui+0x308>)
    5818:	4798      	blx	r3
    581a:	2800      	cmp	r0, #0
    581c:	d0cb      	beq.n	57b6 <grid_port_process_outbound_ui+0xf6>
							grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    581e:	2200      	movs	r2, #0
    5820:	486b      	ldr	r0, [pc, #428]	; (59d0 <grid_port_process_outbound_ui+0x310>)
    5822:	4e6a      	ldr	r6, [pc, #424]	; (59cc <grid_port_process_outbound_ui+0x30c>)
    5824:	2309      	movs	r3, #9
    5826:	4611      	mov	r1, r2
    5828:	47b0      	blx	r6
    582a:	e7c4      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_BANKENABLED_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_global || position_is_me || position_is_local)){
    582c:	2e31      	cmp	r6, #49	; 0x31
    582e:	d140      	bne.n	58b2 <grid_port_process_outbound_ui+0x1f2>
    5830:	2f0e      	cmp	r7, #14
    5832:	d1c0      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
    5834:	9b02      	ldr	r3, [sp, #8]
    5836:	ea4b 0303 	orr.w	r3, fp, r3
    583a:	4323      	orrs	r3, r4
    583c:	d0bb      	beq.n	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_BANKNUMBER_offset], GRID_CLASS_BANKENABLED_BANKNUMBER_length, &error_flag);
    583e:	f108 0005 	add.w	r0, r8, #5
    5842:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5846:	2102      	movs	r1, #2
    5848:	4448      	add	r0, r9
    584a:	47a8      	blx	r5
    584c:	b2c6      	uxtb	r6, r0
					uint8_t isenabled  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_ISENABLED_offset], GRID_CLASS_BANKENABLED_ISENABLED_length, &error_flag);
    584e:	f108 0007 	add.w	r0, r8, #7
    5852:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5856:	2102      	movs	r1, #2
    5858:	4448      	add	r0, r9
    585a:	47a8      	blx	r5
    585c:	fa5f f880 	uxtb.w	r8, r0
					if (isenabled == 1){
    5860:	f1b8 0f01 	cmp.w	r8, #1
    5864:	d110      	bne.n	5888 <grid_port_process_outbound_ui+0x1c8>
						grid_sys_bank_enable(&grid_sys_state, banknumber);
    5866:	4f57      	ldr	r7, [pc, #348]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5868:	4b5b      	ldr	r3, [pc, #364]	; (59d8 <grid_port_process_outbound_ui+0x318>)
    586a:	4631      	mov	r1, r6
    586c:	4638      	mov	r0, r7
    586e:	4798      	blx	r3
						if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    5870:	4b5a      	ldr	r3, [pc, #360]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5872:	4638      	mov	r0, r7
    5874:	4798      	blx	r3
    5876:	42b0      	cmp	r0, r6
    5878:	d19d      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
							if (grid_sys_state.bank_activebank_valid == 1){
    587a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    587e:	2b01      	cmp	r3, #1
    5880:	d199      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
								grid_sys_set_bank(&grid_sys_state, banknumber);
    5882:	4631      	mov	r1, r6
    5884:	4638      	mov	r0, r7
    5886:	e7c0      	b.n	580a <grid_port_process_outbound_ui+0x14a>
					}else if (isenabled == 0){	
    5888:	f1b8 0f00 	cmp.w	r8, #0
    588c:	d193      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    588e:	484d      	ldr	r0, [pc, #308]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5890:	4b52      	ldr	r3, [pc, #328]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5892:	4798      	blx	r3
    5894:	42b0      	cmp	r0, r6
    5896:	d107      	bne.n	58a8 <grid_port_process_outbound_ui+0x1e8>
							if (grid_sys_state.bank_activebank_valid == 1){
    5898:	484a      	ldr	r0, [pc, #296]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    589a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    589e:	2b01      	cmp	r3, #1
    58a0:	d102      	bne.n	58a8 <grid_port_process_outbound_ui+0x1e8>
								grid_sys_set_bank(&grid_sys_state, 255);
    58a2:	4b4c      	ldr	r3, [pc, #304]	; (59d4 <grid_port_process_outbound_ui+0x314>)
    58a4:	21ff      	movs	r1, #255	; 0xff
    58a6:	4798      	blx	r3
						grid_sys_bank_disable(&grid_sys_state, banknumber);
    58a8:	4b4d      	ldr	r3, [pc, #308]	; (59e0 <grid_port_process_outbound_ui+0x320>)
    58aa:	4846      	ldr	r0, [pc, #280]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    58ac:	4631      	mov	r1, r6
    58ae:	4798      	blx	r3
    58b0:	e75d      	b.n	576e <grid_port_process_outbound_ui+0xae>
				else if (msg_class == GRID_CLASS_BANKCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_global || position_is_me || position_is_local)){
    58b2:	2e32      	cmp	r6, #50	; 0x32
    58b4:	d147      	bne.n	5946 <grid_port_process_outbound_ui+0x286>
    58b6:	2f0e      	cmp	r7, #14
    58b8:	f47f af7d 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    58bc:	9b02      	ldr	r3, [sp, #8]
    58be:	ea4b 0303 	orr.w	r3, fp, r3
    58c2:	4323      	orrs	r3, r4
    58c4:	f43f af77 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_NUM_offset], GRID_CLASS_BANKCOLOR_NUM_length, &error_flag);
    58c8:	f108 0005 	add.w	r0, r8, #5
    58cc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58d0:	2102      	movs	r1, #2
    58d2:	4448      	add	r0, r9
    58d4:	47a8      	blx	r5
    58d6:	b2c3      	uxtb	r3, r0
					uint8_t red		   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_RED_offset], GRID_CLASS_BANKCOLOR_RED_length, &error_flag);
    58d8:	f108 0007 	add.w	r0, r8, #7
    58dc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58e0:	2102      	movs	r1, #2
    58e2:	4448      	add	r0, r9
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_NUM_offset], GRID_CLASS_BANKCOLOR_NUM_length, &error_flag);
    58e4:	ee08 3a10 	vmov	s16, r3
					uint8_t red		   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_RED_offset], GRID_CLASS_BANKCOLOR_RED_length, &error_flag);
    58e8:	47a8      	blx	r5
    58ea:	4606      	mov	r6, r0
					uint8_t green	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_GRE_offset], GRID_CLASS_BANKCOLOR_GRE_length, &error_flag);
    58ec:	f108 0009 	add.w	r0, r8, #9
    58f0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58f4:	2102      	movs	r1, #2
    58f6:	4448      	add	r0, r9
    58f8:	47a8      	blx	r5
    58fa:	4607      	mov	r7, r0
					uint8_t blue	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BLU_offset], GRID_CLASS_BANKCOLOR_BLU_length, &error_flag);
    58fc:	f108 000b 	add.w	r0, r8, #11
    5900:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5904:	2102      	movs	r1, #2
    5906:	4448      	add	r0, r9
					grid_sys_bank_set_color(&grid_sys_state, banknumber, (red<<16) + (green<<8) + (blue<<0) );
    5908:	0436      	lsls	r6, r6, #16
    590a:	023f      	lsls	r7, r7, #8
					uint8_t blue	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BLU_offset], GRID_CLASS_BANKCOLOR_BLU_length, &error_flag);
    590c:	47a8      	blx	r5
					grid_sys_bank_set_color(&grid_sys_state, banknumber, (red<<16) + (green<<8) + (blue<<0) );
    590e:	b2bf      	uxth	r7, r7
    5910:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    5914:	433e      	orrs	r6, r7
    5916:	4f2b      	ldr	r7, [pc, #172]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5918:	4b32      	ldr	r3, [pc, #200]	; (59e4 <grid_port_process_outbound_ui+0x324>)
    591a:	fa56 f280 	uxtab	r2, r6, r0
    591e:	ee18 1a10 	vmov	r1, s16
    5922:	4638      	mov	r0, r7
    5924:	4798      	blx	r3
					if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    5926:	4b2d      	ldr	r3, [pc, #180]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5928:	4638      	mov	r0, r7
    592a:	4798      	blx	r3
    592c:	ee18 3a10 	vmov	r3, s16
    5930:	4298      	cmp	r0, r3
    5932:	f47f af40 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_state.bank_activebank_valid == 1){
    5936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    593a:	2b01      	cmp	r3, #1
    593c:	f47f af3b 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
							grid_sys_set_bank(&grid_sys_state, banknumber);
    5940:	ee18 1a10 	vmov	r1, s16
    5944:	e79e      	b.n	5884 <grid_port_process_outbound_ui+0x1c4>
				else if (msg_class == GRID_CLASS_LEDPHASE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    5946:	2e40      	cmp	r6, #64	; 0x40
    5948:	d154      	bne.n	59f4 <grid_port_process_outbound_ui+0x334>
    594a:	2f0e      	cmp	r7, #14
    594c:	f47f af33 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5950:	ea5b 0304 	orrs.w	r3, fp, r4
    5954:	f43f af2f 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t led_num  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_NUM_offset], GRID_CLASS_LEDPHASE_NUM_length, &error_flag);
    5958:	f108 0005 	add.w	r0, r8, #5
    595c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5960:	2102      	movs	r1, #2
    5962:	4448      	add	r0, r9
    5964:	47a8      	blx	r5
    5966:	b2c6      	uxtb	r6, r0
					uint8_t led_lay = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_LAY_offset], GRID_CLASS_LEDPHASE_LAY_length, &error_flag);
    5968:	f108 0007 	add.w	r0, r8, #7
    596c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5970:	2102      	movs	r1, #2
    5972:	4448      	add	r0, r9
    5974:	47a8      	blx	r5
    5976:	b2c7      	uxtb	r7, r0
					uint16_t led_pha  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_PHA_offset], GRID_CLASS_LEDPHASE_PHA_length, &error_flag);
    5978:	f108 0009 	add.w	r0, r8, #9
    597c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5980:	2102      	movs	r1, #2
    5982:	4448      	add	r0, r9
    5984:	47a8      	blx	r5
					if (led_pha*2 > 255){
    5986:	b283      	uxth	r3, r0
    5988:	005b      	lsls	r3, r3, #1
    598a:	2bff      	cmp	r3, #255	; 0xff
						grid_led_set_phase(&grid_led_state, led_num, led_lay, led_pha*2);
    598c:	bfdc      	itt	le
    598e:	0040      	lslle	r0, r0, #1
    5990:	f000 03fe 	andle.w	r3, r0, #254	; 0xfe
    5994:	f8df 8058 	ldr.w	r8, [pc, #88]	; 59f0 <grid_port_process_outbound_ui+0x330>
    5998:	4813      	ldr	r0, [pc, #76]	; (59e8 <grid_port_process_outbound_ui+0x328>)
						grid_led_set_phase(&grid_led_state, led_num, led_lay, 255);
    599a:	bfc8      	it	gt
    599c:	23ff      	movgt	r3, #255	; 0xff
						grid_led_set_phase(&grid_led_state, led_num, led_lay, led_pha*2);
    599e:	463a      	mov	r2, r7
    59a0:	4631      	mov	r1, r6
    59a2:	47c0      	blx	r8
    59a4:	e707      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
    59a6:	bf00      	nop
    59a8:	00004f05 	.word	0x00004f05
    59ac:	00012cf5 	.word	0x00012cf5
    59b0:	00004f5b 	.word	0x00004f5b
    59b4:	00004fc3 	.word	0x00004fc3
    59b8:	00004fed 	.word	0x00004fed
    59bc:	000099ad 	.word	0x000099ad
    59c0:	000097f9 	.word	0x000097f9
    59c4:	20006fa4 	.word	0x20006fa4
    59c8:	000096a7 	.word	0x000096a7
    59cc:	0000a9ad 	.word	0x0000a9ad
    59d0:	20014628 	.word	0x20014628
    59d4:	000096fb 	.word	0x000096fb
    59d8:	00009675 	.word	0x00009675
    59dc:	000096a3 	.word	0x000096a3
    59e0:	00009681 	.word	0x00009681
    59e4:	0000968d 	.word	0x0000968d
    59e8:	200146a0 	.word	0x200146a0
    59ec:	20006f98 	.word	0x20006f98
    59f0:	00006d0d 	.word	0x00006d0d
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    59f4:	2e41      	cmp	r6, #65	; 0x41
    59f6:	d13a      	bne.n	5a6e <grid_port_process_outbound_ui+0x3ae>
    59f8:	2f0e      	cmp	r7, #14
    59fa:	f47f aedc 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    59fe:	ea5b 0304 	orrs.w	r3, fp, r4
    5a02:	f43f aed8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t led_num = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_NUM_offset], GRID_CLASS_LEDCOLOR_NUM_length, &error_flag);
    5a06:	f108 0005 	add.w	r0, r8, #5
    5a0a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a0e:	2102      	movs	r1, #2
    5a10:	4448      	add	r0, r9
    5a12:	47a8      	blx	r5
    5a14:	4607      	mov	r7, r0
					uint8_t led_lay = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_LAY_offset], GRID_CLASS_LEDCOLOR_LAY_length, &error_flag);
    5a16:	f108 0007 	add.w	r0, r8, #7
    5a1a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a1e:	2102      	movs	r1, #2
    5a20:	4448      	add	r0, r9
    5a22:	47a8      	blx	r5
    5a24:	9004      	str	r0, [sp, #16]
					uint8_t led_red	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_RED_offset], GRID_CLASS_LEDCOLOR_RED_length, &error_flag);
    5a26:	f108 0009 	add.w	r0, r8, #9
    5a2a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a2e:	2102      	movs	r1, #2
    5a30:	4448      	add	r0, r9
    5a32:	47a8      	blx	r5
    5a34:	9005      	str	r0, [sp, #20]
					uint8_t led_gre	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_GRE_offset], GRID_CLASS_LEDCOLOR_GRE_length, &error_flag);
    5a36:	f108 000b 	add.w	r0, r8, #11
    5a3a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a3e:	2102      	movs	r1, #2
    5a40:	4448      	add	r0, r9
    5a42:	47a8      	blx	r5
    5a44:	4606      	mov	r6, r0
					uint8_t led_blu	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_BLU_offset], GRID_CLASS_LEDCOLOR_BLU_length, &error_flag);
    5a46:	f108 000d 	add.w	r0, r8, #13
    5a4a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a4e:	2102      	movs	r1, #2
    5a50:	4448      	add	r0, r9
    5a52:	47a8      	blx	r5
					grid_led_set_color(&grid_led_state, led_num, led_lay, led_red, led_gre, led_blu);
    5a54:	9b05      	ldr	r3, [sp, #20]
    5a56:	f89d 2010 	ldrb.w	r2, [sp, #16]
    5a5a:	b2c0      	uxtb	r0, r0
    5a5c:	b2f6      	uxtb	r6, r6
    5a5e:	9001      	str	r0, [sp, #4]
    5a60:	9600      	str	r6, [sp, #0]
    5a62:	48a9      	ldr	r0, [pc, #676]	; (5d08 <grid_port_process_outbound_ui+0x648>)
    5a64:	4ea9      	ldr	r6, [pc, #676]	; (5d0c <grid_port_process_outbound_ui+0x64c>)
    5a66:	b2db      	uxtb	r3, r3
    5a68:	b2f9      	uxtb	r1, r7
    5a6a:	47b0      	blx	r6
    5a6c:	e6a3      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if(msg_class == GRID_CLASS_SERIALNUMBER_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5a6e:	2e11      	cmp	r6, #17
    5a70:	d15d      	bne.n	5b2e <grid_port_process_outbound_ui+0x46e>
    5a72:	2f0f      	cmp	r7, #15
    5a74:	f47f ae9f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5a78:	9b02      	ldr	r3, [sp, #8]
    5a7a:	ea5b 0303 	orrs.w	r3, fp, r3
    5a7e:	f43f ae9a 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint32_t uniqueid[4] = {0};
    5a82:	2210      	movs	r2, #16
    5a84:	2100      	movs	r1, #0
    5a86:	4fa2      	ldr	r7, [pc, #648]	; (5d10 <grid_port_process_outbound_ui+0x650>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5a88:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 5d38 <grid_port_process_outbound_ui+0x678>
					uint32_t uniqueid[4] = {0};
    5a8c:	a809      	add	r0, sp, #36	; 0x24
    5a8e:	47b8      	blx	r7
					grid_sys_get_id(uniqueid);					
    5a90:	4ba0      	ldr	r3, [pc, #640]	; (5d14 <grid_port_process_outbound_ui+0x654>)
    5a92:	a809      	add	r0, sp, #36	; 0x24
    5a94:	4798      	blx	r3
					grid_msg_init(&response);
    5a96:	4ba0      	ldr	r3, [pc, #640]	; (5d18 <grid_port_process_outbound_ui+0x658>)
    5a98:	a88f      	add	r0, sp, #572	; 0x23c
    5a9a:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5a9c:	227f      	movs	r2, #127	; 0x7f
    5a9e:	2300      	movs	r3, #0
    5aa0:	4611      	mov	r1, r2
    5aa2:	a88f      	add	r0, sp, #572	; 0x23c
    5aa4:	47c0      	blx	r8
					uint8_t response_payload[50] = {0};
    5aa6:	f04f 0800 	mov.w	r8, #0
    5aaa:	222e      	movs	r2, #46	; 0x2e
    5aac:	4641      	mov	r1, r8
    5aae:	a80e      	add	r0, sp, #56	; 0x38
    5ab0:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    5ab4:	47b8      	blx	r7
					snprintf(response_payload, 49, GRID_CLASS_SERIALNUMBER_frame);
    5ab6:	2303      	movs	r3, #3
    5ab8:	e9cd 6300 	strd	r6, r3, [sp]
    5abc:	4a97      	ldr	r2, [pc, #604]	; (5d1c <grid_port_process_outbound_ui+0x65c>)
    5abe:	4e98      	ldr	r6, [pc, #608]	; (5d20 <grid_port_process_outbound_ui+0x660>)
    5ac0:	2131      	movs	r1, #49	; 0x31
    5ac2:	2302      	movs	r3, #2
    5ac4:	a80d      	add	r0, sp, #52	; 0x34
    5ac6:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ac8:	4b96      	ldr	r3, [pc, #600]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5aca:	4e97      	ldr	r6, [pc, #604]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5acc:	a80d      	add	r0, sp, #52	; 0x34
    5ace:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5ad0:	270d      	movs	r7, #13
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ad2:	4602      	mov	r2, r0
    5ad4:	4b95      	ldr	r3, [pc, #596]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5ad6:	a90d      	add	r1, sp, #52	; 0x34
    5ad8:	a88f      	add	r0, sp, #572	; 0x23c
    5ada:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5adc:	2301      	movs	r3, #1
    5ade:	2204      	movs	r2, #4
    5ae0:	4641      	mov	r1, r8
    5ae2:	a88f      	add	r0, sp, #572	; 0x23c
    5ae4:	9700      	str	r7, [sp, #0]
    5ae6:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD0_offset, GRID_CLASS_SERIALNUMBER_WORD0_length, uniqueid[0]);
    5ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5aea:	9300      	str	r3, [sp, #0]
    5aec:	2205      	movs	r2, #5
    5aee:	2308      	movs	r3, #8
    5af0:	4641      	mov	r1, r8
    5af2:	a88f      	add	r0, sp, #572	; 0x23c
    5af4:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD1_offset, GRID_CLASS_SERIALNUMBER_WORD1_length, uniqueid[1]);
    5af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5af8:	9300      	str	r3, [sp, #0]
    5afa:	463a      	mov	r2, r7
    5afc:	2308      	movs	r3, #8
    5afe:	4641      	mov	r1, r8
    5b00:	a88f      	add	r0, sp, #572	; 0x23c
    5b02:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD2_offset, GRID_CLASS_SERIALNUMBER_WORD2_length, uniqueid[2]);
    5b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5b06:	9300      	str	r3, [sp, #0]
    5b08:	2215      	movs	r2, #21
    5b0a:	2308      	movs	r3, #8
    5b0c:	4641      	mov	r1, r8
    5b0e:	a88f      	add	r0, sp, #572	; 0x23c
    5b10:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD3_offset, GRID_CLASS_SERIALNUMBER_WORD3_length, uniqueid[3]);
    5b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b14:	9300      	str	r3, [sp, #0]
    5b16:	221d      	movs	r2, #29
    5b18:	2308      	movs	r3, #8
    5b1a:	4641      	mov	r1, r8
    5b1c:	a88f      	add	r0, sp, #572	; 0x23c
    5b1e:	47b0      	blx	r6
					grid_msg_packet_close(&response);
    5b20:	4b83      	ldr	r3, [pc, #524]	; (5d30 <grid_port_process_outbound_ui+0x670>)
    5b22:	a88f      	add	r0, sp, #572	; 0x23c
    5b24:	4798      	blx	r3
					grid_msg_packet_send_everywhere(&response);
    5b26:	4b83      	ldr	r3, [pc, #524]	; (5d34 <grid_port_process_outbound_ui+0x674>)
    5b28:	a88f      	add	r0, sp, #572	; 0x23c
    5b2a:	4798      	blx	r3
				else if(msg_class == GRID_CLASS_UPTIME_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5b2c:	e61f      	b.n	576e <grid_port_process_outbound_ui+0xae>
    5b2e:	2e14      	cmp	r6, #20
    5b30:	d13f      	bne.n	5bb2 <grid_port_process_outbound_ui+0x4f2>
    5b32:	2f0f      	cmp	r7, #15
    5b34:	f47f ae3f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5b38:	9b02      	ldr	r3, [sp, #8]
    5b3a:	ea5b 0303 	orrs.w	r3, fp, r3
    5b3e:	f43f ae3a 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_msg_init(&response);
    5b42:	4b75      	ldr	r3, [pc, #468]	; (5d18 <grid_port_process_outbound_ui+0x658>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b44:	4f7c      	ldr	r7, [pc, #496]	; (5d38 <grid_port_process_outbound_ui+0x678>)
					grid_msg_init(&response);
    5b46:	a88f      	add	r0, sp, #572	; 0x23c
    5b48:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b4a:	227f      	movs	r2, #127	; 0x7f
					uint8_t response_payload[50] = {0};
    5b4c:	f04f 0800 	mov.w	r8, #0
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b50:	4611      	mov	r1, r2
    5b52:	2300      	movs	r3, #0
    5b54:	a88f      	add	r0, sp, #572	; 0x23c
    5b56:	47b8      	blx	r7
					uint8_t response_payload[50] = {0};
    5b58:	4b6d      	ldr	r3, [pc, #436]	; (5d10 <grid_port_process_outbound_ui+0x650>)
    5b5a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    5b5e:	222e      	movs	r2, #46	; 0x2e
    5b60:	4641      	mov	r1, r8
    5b62:	a80e      	add	r0, sp, #56	; 0x38
    5b64:	4798      	blx	r3
					snprintf(response_payload, 49, GRID_CLASS_UPTIME_frame);
    5b66:	2303      	movs	r3, #3
    5b68:	e9cd 6300 	strd	r6, r3, [sp]
    5b6c:	4a73      	ldr	r2, [pc, #460]	; (5d3c <grid_port_process_outbound_ui+0x67c>)
    5b6e:	4e6c      	ldr	r6, [pc, #432]	; (5d20 <grid_port_process_outbound_ui+0x660>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5b70:	4f6d      	ldr	r7, [pc, #436]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					snprintf(response_payload, 49, GRID_CLASS_UPTIME_frame);
    5b72:	2131      	movs	r1, #49	; 0x31
    5b74:	2302      	movs	r3, #2
    5b76:	a80d      	add	r0, sp, #52	; 0x34
    5b78:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5b7a:	4b6a      	ldr	r3, [pc, #424]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_UPTIME_UPTIME_offset, GRID_CLASS_UPTIME_UPTIME_length, grid_sys_state.uptime);
    5b7c:	4e70      	ldr	r6, [pc, #448]	; (5d40 <grid_port_process_outbound_ui+0x680>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5b7e:	a80d      	add	r0, sp, #52	; 0x34
    5b80:	4798      	blx	r3
    5b82:	4b6a      	ldr	r3, [pc, #424]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5b84:	4602      	mov	r2, r0
    5b86:	a90d      	add	r1, sp, #52	; 0x34
    5b88:	a88f      	add	r0, sp, #572	; 0x23c
    5b8a:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5b8c:	230d      	movs	r3, #13
    5b8e:	9300      	str	r3, [sp, #0]
    5b90:	2204      	movs	r2, #4
    5b92:	2301      	movs	r3, #1
    5b94:	4641      	mov	r1, r8
    5b96:	a88f      	add	r0, sp, #572	; 0x23c
    5b98:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_UPTIME_UPTIME_offset, GRID_CLASS_UPTIME_UPTIME_length, grid_sys_state.uptime);
    5b9a:	6833      	ldr	r3, [r6, #0]
    5b9c:	9300      	str	r3, [sp, #0]
    5b9e:	2205      	movs	r2, #5
    5ba0:	2308      	movs	r3, #8
    5ba2:	4641      	mov	r1, r8
    5ba4:	a88f      	add	r0, sp, #572	; 0x23c
    5ba6:	47b8      	blx	r7
					uint32_t milliseconds = grid_sys_state.uptime/RTC1MS%1000;
    5ba8:	6833      	ldr	r3, [r6, #0]
					uint32_t seconds =		grid_sys_state.uptime/RTC1MS/1000%60;
    5baa:	6833      	ldr	r3, [r6, #0]
					uint32_t minutes =		grid_sys_state.uptime/RTC1MS/1000/60%60;
    5bac:	6833      	ldr	r3, [r6, #0]
					uint32_t hours =		grid_sys_state.uptime/RTC1MS/1000/60/60%60;
    5bae:	6833      	ldr	r3, [r6, #0]
    5bb0:	e7b6      	b.n	5b20 <grid_port_process_outbound_ui+0x460>
				else if(msg_class == GRID_CLASS_RESETCAUSE_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5bb2:	2e12      	cmp	r6, #18
    5bb4:	d137      	bne.n	5c26 <grid_port_process_outbound_ui+0x566>
    5bb6:	2f0f      	cmp	r7, #15
    5bb8:	f47f adfd 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5bbc:	9b02      	ldr	r3, [sp, #8]
    5bbe:	ea5b 0303 	orrs.w	r3, fp, r3
    5bc2:	f43f adf8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_msg_init(&response);
    5bc6:	4b54      	ldr	r3, [pc, #336]	; (5d18 <grid_port_process_outbound_ui+0x658>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5bc8:	4f5b      	ldr	r7, [pc, #364]	; (5d38 <grid_port_process_outbound_ui+0x678>)
					grid_msg_init(&response);
    5bca:	a88f      	add	r0, sp, #572	; 0x23c
    5bcc:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5bce:	227f      	movs	r2, #127	; 0x7f
    5bd0:	4611      	mov	r1, r2
    5bd2:	2300      	movs	r3, #0
    5bd4:	a88f      	add	r0, sp, #572	; 0x23c
    5bd6:	47b8      	blx	r7
					uint8_t response_payload[50] = {0};
    5bd8:	2700      	movs	r7, #0
    5bda:	4b4d      	ldr	r3, [pc, #308]	; (5d10 <grid_port_process_outbound_ui+0x650>)
    5bdc:	970d      	str	r7, [sp, #52]	; 0x34
    5bde:	222e      	movs	r2, #46	; 0x2e
    5be0:	4639      	mov	r1, r7
    5be2:	a80e      	add	r0, sp, #56	; 0x38
    5be4:	4798      	blx	r3
					snprintf(response_payload, 49, GRID_CLASS_RESETCAUSE_frame);
    5be6:	2303      	movs	r3, #3
    5be8:	e9cd 6300 	strd	r6, r3, [sp]
    5bec:	4a55      	ldr	r2, [pc, #340]	; (5d44 <grid_port_process_outbound_ui+0x684>)
    5bee:	4e4c      	ldr	r6, [pc, #304]	; (5d20 <grid_port_process_outbound_ui+0x660>)
    5bf0:	2131      	movs	r1, #49	; 0x31
    5bf2:	2302      	movs	r3, #2
    5bf4:	a80d      	add	r0, sp, #52	; 0x34
    5bf6:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5bf8:	4b4a      	ldr	r3, [pc, #296]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5bfa:	4e4b      	ldr	r6, [pc, #300]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5bfc:	a80d      	add	r0, sp, #52	; 0x34
    5bfe:	4798      	blx	r3
    5c00:	4b4a      	ldr	r3, [pc, #296]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5c02:	4602      	mov	r2, r0
    5c04:	a90d      	add	r1, sp, #52	; 0x34
    5c06:	a88f      	add	r0, sp, #572	; 0x23c
    5c08:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5c0a:	230d      	movs	r3, #13
    5c0c:	9300      	str	r3, [sp, #0]
    5c0e:	2204      	movs	r2, #4
    5c10:	2301      	movs	r3, #1
    5c12:	4639      	mov	r1, r7
    5c14:	a88f      	add	r0, sp, #572	; 0x23c
    5c16:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_RESETCAUSE_CAUSE_offset, GRID_CLASS_RESETCAUSE_CAUSE_length,grid_sys_state.reset_cause);
    5c18:	4b49      	ldr	r3, [pc, #292]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c1a:	791b      	ldrb	r3, [r3, #4]
    5c1c:	9300      	str	r3, [sp, #0]
    5c1e:	2205      	movs	r2, #5
    5c20:	2302      	movs	r3, #2
                    grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    5c22:	4639      	mov	r1, r7
    5c24:	e26e      	b.n	6104 <grid_port_process_outbound_ui+0xa44>
				else if(msg_class == GRID_CLASS_RESET_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me)){
    5c26:	2e13      	cmp	r6, #19
    5c28:	d113      	bne.n	5c52 <grid_port_process_outbound_ui+0x592>
    5c2a:	2f0e      	cmp	r7, #14
    5c2c:	f47f adc3 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c30:	f1bb 0f00 	cmp.w	fp, #0
    5c34:	f43f adbf 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5c38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5c3c:	4942      	ldr	r1, [pc, #264]	; (5d48 <grid_port_process_outbound_ui+0x688>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5c3e:	4b43      	ldr	r3, [pc, #268]	; (5d4c <grid_port_process_outbound_ui+0x68c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5c40:	68ca      	ldr	r2, [r1, #12]
    5c42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5c46:	4313      	orrs	r3, r2
    5c48:	60cb      	str	r3, [r1, #12]
    5c4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5c4e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5c50:	e7fd      	b.n	5c4e <grid_port_process_outbound_ui+0x58e>
				else if (msg_class == GRID_CLASS_GLOBALLOAD_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5c52:	2e61      	cmp	r6, #97	; 0x61
    5c54:	d10c      	bne.n	5c70 <grid_port_process_outbound_ui+0x5b0>
    5c56:	2f0e      	cmp	r7, #14
    5c58:	f47f adad 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c5c:	9b02      	ldr	r3, [sp, #8]
    5c5e:	ea5b 0303 	orrs.w	r3, fp, r3
    5c62:	f43f ada8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    5c66:	493a      	ldr	r1, [pc, #232]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5c68:	4835      	ldr	r0, [pc, #212]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c6a:	4b3a      	ldr	r3, [pc, #232]	; (5d54 <grid_port_process_outbound_ui+0x694>)
					grid_ui_nvm_clear_all_configuration(&grid_ui_state, &grid_nvm_state);
    5c6c:	4798      	blx	r3
    5c6e:	e5a2      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_GLOBALSTORE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5c70:	2e60      	cmp	r6, #96	; 0x60
    5c72:	d117      	bne.n	5ca4 <grid_port_process_outbound_ui+0x5e4>
    5c74:	2f0e      	cmp	r7, #14
    5c76:	f47f ad9e 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c7a:	9b02      	ldr	r3, [sp, #8]
    5c7c:	ea5b 0303 	orrs.w	r3, fp, r3
    5c80:	f43f ad99 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_store_configuration(&grid_sys_state, &grid_nvm_state);
    5c84:	4932      	ldr	r1, [pc, #200]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5c86:	482e      	ldr	r0, [pc, #184]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c88:	4b33      	ldr	r3, [pc, #204]	; (5d58 <grid_port_process_outbound_ui+0x698>)
                    grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    5c8a:	4e34      	ldr	r6, [pc, #208]	; (5d5c <grid_port_process_outbound_ui+0x69c>)
					grid_sys_nvm_clear_configuration(&grid_ui_state, &grid_nvm_state);
    5c8c:	4798      	blx	r3
                    grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    5c8e:	2700      	movs	r7, #0
    5c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5c94:	e9cd 7300 	strd	r7, r3, [sp]
    5c98:	4829      	ldr	r0, [pc, #164]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c9a:	463b      	mov	r3, r7
    5c9c:	22ff      	movs	r2, #255	; 0xff
    5c9e:	4639      	mov	r1, r7
    5ca0:	47b0      	blx	r6
    5ca2:	e588      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_GLOBALCLEAR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5ca4:	2e62      	cmp	r6, #98	; 0x62
    5ca6:	d10b      	bne.n	5cc0 <grid_port_process_outbound_ui+0x600>
    5ca8:	2f0e      	cmp	r7, #14
    5caa:	f47f ad84 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cae:	9b02      	ldr	r3, [sp, #8]
    5cb0:	ea5b 0303 	orrs.w	r3, fp, r3
    5cb4:	f43f ad7f 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_clear_configuration(&grid_ui_state, &grid_nvm_state);
    5cb8:	4925      	ldr	r1, [pc, #148]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5cba:	4b29      	ldr	r3, [pc, #164]	; (5d60 <grid_port_process_outbound_ui+0x6a0>)
    5cbc:	4650      	mov	r0, sl
    5cbe:	e7e4      	b.n	5c8a <grid_port_process_outbound_ui+0x5ca>
				else if (msg_class == GRID_CLASS_GLOBALRECALL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5cc0:	2e63      	cmp	r6, #99	; 0x63
    5cc2:	d112      	bne.n	5cea <grid_port_process_outbound_ui+0x62a>
    5cc4:	2f0e      	cmp	r7, #14
    5cc6:	f47f ad76 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cca:	9b02      	ldr	r3, [sp, #8]
    5ccc:	ea5b 0303 	orrs.w	r3, fp, r3
    5cd0:	f43f ad71 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_GLOBALRECALL_BANKNUMBER_offset], GRID_CLASS_GLOBALRECALL_BANKNUMBER_length	, &error_flag);
    5cd4:	f108 0005 	add.w	r0, r8, #5
    5cd8:	2102      	movs	r1, #2
    5cda:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5cde:	4448      	add	r0, r9
    5ce0:	47a8      	blx	r5
					grid_sys_recall_configuration(&grid_sys_state, banknumber);
    5ce2:	4b20      	ldr	r3, [pc, #128]	; (5d64 <grid_port_process_outbound_ui+0x6a4>)
    5ce4:	b2c1      	uxtb	r1, r0
    5ce6:	4816      	ldr	r0, [pc, #88]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5ce8:	e590      	b.n	580c <grid_port_process_outbound_ui+0x14c>
				else if (msg_class == GRID_CLASS_LOCALLOAD_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5cea:	2e71      	cmp	r6, #113	; 0x71
    5cec:	d13e      	bne.n	5d6c <grid_port_process_outbound_ui+0x6ac>
    5cee:	2f0e      	cmp	r7, #14
    5cf0:	f47f ad61 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cf4:	9b02      	ldr	r3, [sp, #8]
    5cf6:	ea5b 0303 	orrs.w	r3, fp, r3
    5cfa:	f43f ad5c 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_load_all_configuration(&grid_ui_state, &grid_nvm_state);						
    5cfe:	4914      	ldr	r1, [pc, #80]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5d00:	4b19      	ldr	r3, [pc, #100]	; (5d68 <grid_port_process_outbound_ui+0x6a8>)
    5d02:	4650      	mov	r0, sl
    5d04:	e7b2      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
    5d06:	bf00      	nop
    5d08:	200146a0 	.word	0x200146a0
    5d0c:	00006c9d 	.word	0x00006c9d
    5d10:	00012cf5 	.word	0x00012cf5
    5d14:	00009859 	.word	0x00009859
    5d18:	00008545 	.word	0x00008545
    5d1c:	000152a8 	.word	0x000152a8
    5d20:	00013289 	.word	0x00013289
    5d24:	00013801 	.word	0x00013801
    5d28:	00008529 	.word	0x00008529
    5d2c:	000084b5 	.word	0x000084b5
    5d30:	00008671 	.word	0x00008671
    5d34:	00008745 	.word	0x00008745
    5d38:	00008579 	.word	0x00008579
    5d3c:	000152d2 	.word	0x000152d2
    5d40:	20006fa4 	.word	0x20006fa4
    5d44:	000152e4 	.word	0x000152e4
    5d48:	e000ed00 	.word	0xe000ed00
    5d4c:	05fa0004 	.word	0x05fa0004
    5d50:	200079b8 	.word	0x200079b8
    5d54:	00009081 	.word	0x00009081
    5d58:	00008d2d 	.word	0x00008d2d
    5d5c:	000097ab 	.word	0x000097ab
    5d60:	00009179 	.word	0x00009179
    5d64:	00008f25 	.word	0x00008f25
    5d68:	00009a8d 	.word	0x00009a8d
				else if (msg_class == GRID_CLASS_LOCALSTORE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5d6c:	2e70      	cmp	r6, #112	; 0x70
    5d6e:	d10b      	bne.n	5d88 <grid_port_process_outbound_ui+0x6c8>
    5d70:	2f0e      	cmp	r7, #14
    5d72:	f47f ad20 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5d76:	9b02      	ldr	r3, [sp, #8]
    5d78:	ea5b 0303 	orrs.w	r3, fp, r3
    5d7c:	f43f ad1b 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_store_all_configuration(&grid_ui_state, &grid_nvm_state);
    5d80:	49b4      	ldr	r1, [pc, #720]	; (6054 <grid_port_process_outbound_ui+0x994>)
    5d82:	4bb5      	ldr	r3, [pc, #724]	; (6058 <grid_port_process_outbound_ui+0x998>)
    5d84:	4650      	mov	r0, sl
    5d86:	e771      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
				else if (msg_class == GRID_CLASS_LOCALCLEAR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5d88:	2e72      	cmp	r6, #114	; 0x72
    5d8a:	d10b      	bne.n	5da4 <grid_port_process_outbound_ui+0x6e4>
    5d8c:	2f0e      	cmp	r7, #14
    5d8e:	f47f ad12 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5d92:	9b02      	ldr	r3, [sp, #8]
    5d94:	ea5b 0303 	orrs.w	r3, fp, r3
    5d98:	f43f ad0d 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_clear_all_configuration(&grid_ui_state, &grid_nvm_state);
    5d9c:	49ad      	ldr	r1, [pc, #692]	; (6054 <grid_port_process_outbound_ui+0x994>)
    5d9e:	4baf      	ldr	r3, [pc, #700]	; (605c <grid_port_process_outbound_ui+0x99c>)
    5da0:	4650      	mov	r0, sl
    5da2:	e763      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
				else if (msg_class == GRID_CLASS_CONFIGURATION_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5da4:	2e80      	cmp	r6, #128	; 0x80
    5da6:	f040 81b0 	bne.w	610a <grid_port_process_outbound_ui+0xa4a>
    5daa:	2f0f      	cmp	r7, #15
    5dac:	d122      	bne.n	5df4 <grid_port_process_outbound_ui+0x734>
    5dae:	9b02      	ldr	r3, [sp, #8]
    5db0:	ea5b 0303 	orrs.w	r3, fp, r3
    5db4:	f43f acff 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    5db8:	f108 0005 	add.w	r0, r8, #5
    5dbc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5dc0:	2102      	movs	r1, #2
    5dc2:	4448      	add	r0, r9
    5dc4:	47a8      	blx	r5
    5dc6:	4606      	mov	r6, r0
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5dc8:	f108 0007 	add.w	r0, r8, #7
    5dcc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5dd0:	2102      	movs	r1, #2
    5dd2:	4448      	add	r0, r9
    5dd4:	47a8      	blx	r5
    5dd6:	4607      	mov	r7, r0
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5dd8:	f108 0009 	add.w	r0, r8, #9
    5ddc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5de0:	2102      	movs	r1, #2
    5de2:	4448      	add	r0, r9
    5de4:	47a8      	blx	r5
					grid_ui_recall_event_configuration(&grid_ui_state, banknumber, elementnumber, eventtype);
    5de6:	b2f1      	uxtb	r1, r6
    5de8:	b2c3      	uxtb	r3, r0
    5dea:	4e9d      	ldr	r6, [pc, #628]	; (6060 <grid_port_process_outbound_ui+0x9a0>)
    5dec:	b2fa      	uxtb	r2, r7
    5dee:	4650      	mov	r0, sl
    5df0:	47b0      	blx	r6
    5df2:	e4e0      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_CONFIGURATION_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_local)){
    5df4:	2f0e      	cmp	r7, #14
    5df6:	f47f acde 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5dfa:	f1bb 0f00 	cmp.w	fp, #0
    5dfe:	f040 80e0 	bne.w	5fc2 <grid_port_process_outbound_ui+0x902>
    5e02:	2c00      	cmp	r4, #0
    5e04:	f000 8150 	beq.w	60a8 <grid_port_process_outbound_ui+0x9e8>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    5e08:	ab2b      	add	r3, sp, #172	; 0xac
    5e0a:	f108 0005 	add.w	r0, r8, #5
    5e0e:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e12:	2102      	movs	r1, #2
    5e14:	4418      	add	r0, r3
    5e16:	47a8      	blx	r5
    5e18:	b2c3      	uxtb	r3, r0
    5e1a:	9305      	str	r3, [sp, #20]
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5e1c:	f108 0007 	add.w	r0, r8, #7
    5e20:	ab2b      	add	r3, sp, #172	; 0xac
    5e22:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e26:	2102      	movs	r1, #2
    5e28:	4418      	add	r0, r3
    5e2a:	47a8      	blx	r5
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e2c:	ab2b      	add	r3, sp, #172	; 0xac
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5e2e:	9007      	str	r0, [sp, #28]
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e30:	f108 0009 	add.w	r0, r8, #9
    5e34:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e38:	2102      	movs	r1, #2
    5e3a:	4418      	add	r0, r3
    5e3c:	47a8      	blx	r5
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e3e:	2700      	movs	r7, #0
    5e40:	4b88      	ldr	r3, [pc, #544]	; (6064 <grid_port_process_outbound_ui+0x9a4>)
    5e42:	970d      	str	r7, [sp, #52]	; 0x34
    5e44:	2274      	movs	r2, #116	; 0x74
    5e46:	4639      	mov	r1, r7
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e48:	fa5f f980 	uxtb.w	r9, r0
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e4c:	a80e      	add	r0, sp, #56	; 0x38
    5e4e:	4798      	blx	r3
					uint32_t actionstring_length = current_stop-current_start-GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset;
    5e50:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5e54:	f108 000b 	add.w	r0, r8, #11
    5e58:	eba3 0308 	sub.w	r3, r3, r8
    5e5c:	aa2b      	add	r2, sp, #172	; 0xac
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e5e:	ae0d      	add	r6, sp, #52	; 0x34
					uint32_t actionstring_length = current_stop-current_start-GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset;
    5e60:	3b0b      	subs	r3, #11
					for(uint32_t j = 0; j<actionstring_length; j++){
    5e62:	eb02 0800 	add.w	r8, r2, r0
    5e66:	4639      	mov	r1, r7
    5e68:	4299      	cmp	r1, r3
    5e6a:	f0c0 80ed 	bcc.w	6048 <grid_port_process_outbound_ui+0x988>
					grid_ui_event_register_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype, actionstring, actionstring_length);
    5e6e:	9905      	ldr	r1, [sp, #20]
    5e70:	f8da 2004 	ldr.w	r2, [sl, #4]
    5e74:	f89d 801c 	ldrb.w	r8, [sp, #28]
    5e78:	4f7b      	ldr	r7, [pc, #492]	; (6068 <grid_port_process_outbound_ui+0x9a8>)
    5e7a:	0109      	lsls	r1, r1, #4
    5e7c:	9104      	str	r1, [sp, #16]
    5e7e:	9905      	ldr	r1, [sp, #20]
    5e80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    5e84:	2664      	movs	r6, #100	; 0x64
    5e86:	68d0      	ldr	r0, [r2, #12]
    5e88:	fb06 f608 	mul.w	r6, r6, r8
    5e8c:	aa0d      	add	r2, sp, #52	; 0x34
    5e8e:	4649      	mov	r1, r9
    5e90:	4430      	add	r0, r6
    5e92:	47b8      	blx	r7
					if (banknumber == grid_sys_state.bank_activebank_number){
    5e94:	4b75      	ldr	r3, [pc, #468]	; (606c <grid_port_process_outbound_ui+0x9ac>)
    5e96:	9a05      	ldr	r2, [sp, #20]
    5e98:	7bdb      	ldrb	r3, [r3, #15]
    5e9a:	4293      	cmp	r3, r2
    5e9c:	d105      	bne.n	5eaa <grid_port_process_outbound_ui+0x7ea>
						grid_ui_smart_trigger(&grid_ui_state, banknumber, elementnumber, eventtype);
    5e9e:	9905      	ldr	r1, [sp, #20]
    5ea0:	4f73      	ldr	r7, [pc, #460]	; (6070 <grid_port_process_outbound_ui+0x9b0>)
    5ea2:	464b      	mov	r3, r9
    5ea4:	4642      	mov	r2, r8
    5ea6:	4650      	mov	r0, sl
    5ea8:	47b8      	blx	r7
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    5eaa:	f8da 3004 	ldr.w	r3, [sl, #4]
    5eae:	9a04      	ldr	r2, [sp, #16]
    5eb0:	4413      	add	r3, r2
    5eb2:	4649      	mov	r1, r9
    5eb4:	68d8      	ldr	r0, [r3, #12]
    5eb6:	4b6f      	ldr	r3, [pc, #444]	; (6074 <grid_port_process_outbound_ui+0x9b4>)
    5eb8:	4430      	add	r0, r6
    5eba:	4798      	blx	r3
					if (event_index != 255){
    5ebc:	28ff      	cmp	r0, #255	; 0xff
    5ebe:	d03d      	beq.n	5f3c <grid_port_process_outbound_ui+0x87c>
						if (position_is_local){
    5ec0:	b304      	cbz	r4, 5f04 <grid_port_process_outbound_ui+0x844>
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_flashempty_flag=0;
    5ec2:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ec6:	9904      	ldr	r1, [sp, #16]
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 0;
    5ec8:	9f04      	ldr	r7, [sp, #16]
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_flashempty_flag=0;
    5eca:	440a      	add	r2, r1
    5ecc:	f44f 7386 	mov.w	r3, #268	; 0x10c
    5ed0:	68d2      	ldr	r2, [r2, #12]
    5ed2:	4432      	add	r2, r6
    5ed4:	4343      	muls	r3, r0
    5ed6:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5ed8:	441a      	add	r2, r3
    5eda:	2100      	movs	r1, #0
    5edc:	f882 1109 	strb.w	r1, [r2, #265]	; 0x109
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 0;
    5ee0:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ee4:	443a      	add	r2, r7
    5ee6:	68d2      	ldr	r2, [r2, #12]
    5ee8:	4432      	add	r2, r6
    5eea:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5eec:	441a      	add	r2, r3
    5eee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 0;
    5ef2:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ef6:	443a      	add	r2, r7
    5ef8:	68d2      	ldr	r2, [r2, #12]
    5efa:	4432      	add	r2, r6
    5efc:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5efe:	4413      	add	r3, r2
    5f00:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
						if (position_is_me){
    5f04:	f1bb 0f00 	cmp.w	fp, #0
    5f08:	d018      	beq.n	5f3c <grid_port_process_outbound_ui+0x87c>
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    5f0a:	f44f 7286 	mov.w	r2, #268	; 0x10c
    5f0e:	4350      	muls	r0, r2
    5f10:	f8da 3004 	ldr.w	r3, [sl, #4]
    5f14:	9a04      	ldr	r2, [sp, #16]
    5f16:	4413      	add	r3, r2
    5f18:	2201      	movs	r2, #1
    5f1a:	68db      	ldr	r3, [r3, #12]
    5f1c:	4433      	add	r3, r6
    5f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5f20:	4403      	add	r3, r0
    5f22:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 0;
    5f26:	f8da 3004 	ldr.w	r3, [sl, #4]
    5f2a:	9a04      	ldr	r2, [sp, #16]
    5f2c:	441a      	add	r2, r3
    5f2e:	68d3      	ldr	r3, [r2, #12]
    5f30:	441e      	add	r6, r3
    5f32:	6e33      	ldr	r3, [r6, #96]	; 0x60
    5f34:	4418      	add	r0, r3
    5f36:	2300      	movs	r3, #0
    5f38:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
					grid_msg_init(&response);
    5f3c:	4b4e      	ldr	r3, [pc, #312]	; (6078 <grid_port_process_outbound_ui+0x9b8>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5f3e:	4e4f      	ldr	r6, [pc, #316]	; (607c <grid_port_process_outbound_ui+0x9bc>)
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f40:	4f4f      	ldr	r7, [pc, #316]	; (6080 <grid_port_process_outbound_ui+0x9c0>)
					grid_msg_init(&response);
    5f42:	a88f      	add	r0, sp, #572	; 0x23c
    5f44:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5f46:	227f      	movs	r2, #127	; 0x7f
    5f48:	4611      	mov	r1, r2
    5f4a:	2300      	movs	r3, #0
    5f4c:	a88f      	add	r0, sp, #572	; 0x23c
    5f4e:	47b0      	blx	r6
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f50:	2303      	movs	r3, #3
					uint8_t response_payload[10] = {0};
    5f52:	2600      	movs	r6, #0
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f54:	494b      	ldr	r1, [pc, #300]	; (6084 <grid_port_process_outbound_ui+0x9c4>)
    5f56:	9300      	str	r3, [sp, #0]
    5f58:	2202      	movs	r2, #2
    5f5a:	2380      	movs	r3, #128	; 0x80
    5f5c:	a809      	add	r0, sp, #36	; 0x24
					uint8_t response_payload[10] = {0};
    5f5e:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
    5f62:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f66:	47b8      	blx	r7
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5f68:	4b47      	ldr	r3, [pc, #284]	; (6088 <grid_port_process_outbound_ui+0x9c8>)
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    5f6a:	4f48      	ldr	r7, [pc, #288]	; (608c <grid_port_process_outbound_ui+0x9cc>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5f6c:	a809      	add	r0, sp, #36	; 0x24
    5f6e:	4798      	blx	r3
    5f70:	4b47      	ldr	r3, [pc, #284]	; (6090 <grid_port_process_outbound_ui+0x9d0>)
    5f72:	4602      	mov	r2, r0
    5f74:	a909      	add	r1, sp, #36	; 0x24
    5f76:	a88f      	add	r0, sp, #572	; 0x23c
    5f78:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    5f7a:	9b05      	ldr	r3, [sp, #20]
    5f7c:	9300      	str	r3, [sp, #0]
    5f7e:	2205      	movs	r2, #5
    5f80:	2302      	movs	r3, #2
    5f82:	4631      	mov	r1, r6
    5f84:	a88f      	add	r0, sp, #572	; 0x23c
    5f86:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, elementnumber);
    5f88:	2302      	movs	r3, #2
    5f8a:	2207      	movs	r2, #7
    5f8c:	4631      	mov	r1, r6
    5f8e:	a88f      	add	r0, sp, #572	; 0x23c
    5f90:	f8cd 8000 	str.w	r8, [sp]
    5f94:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eventtype);
    5f96:	2302      	movs	r3, #2
    5f98:	2209      	movs	r2, #9
    5f9a:	4631      	mov	r1, r6
    5f9c:	a88f      	add	r0, sp, #572	; 0x23c
    5f9e:	f8cd 9000 	str.w	r9, [sp]
    5fa2:	47b8      	blx	r7
						grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    5fa4:	230a      	movs	r3, #10
    5fa6:	9300      	str	r3, [sp, #0]
    5fa8:	2204      	movs	r2, #4
    5faa:	2301      	movs	r3, #1
    5fac:	4631      	mov	r1, r6
    5fae:	a88f      	add	r0, sp, #572	; 0x23c
    5fb0:	47b8      	blx	r7
                        grid_msg_packet_close(&response);
    5fb2:	4b38      	ldr	r3, [pc, #224]	; (6094 <grid_port_process_outbound_ui+0x9d4>)
    5fb4:	a88f      	add	r0, sp, #572	; 0x23c
    5fb6:	4798      	blx	r3
                        grid_msg_packet_send_everywhere(&response);
    5fb8:	4b37      	ldr	r3, [pc, #220]	; (6098 <grid_port_process_outbound_ui+0x9d8>)
    5fba:	a88f      	add	r0, sp, #572	; 0x23c
    5fbc:	4798      	blx	r3
    5fbe:	f7ff bbfa 	b.w	57b6 <grid_port_process_outbound_ui+0xf6>
                    if (!position_is_local){
    5fc2:	2c00      	cmp	r4, #0
    5fc4:	f47f af20 	bne.w	5e08 <grid_port_process_outbound_ui+0x748>
                        grid_keyboard_state.isenabled = 0;             
    5fc8:	4e34      	ldr	r6, [pc, #208]	; (609c <grid_port_process_outbound_ui+0x9dc>)
                        grid_msg_init(&response);
    5fca:	4b2b      	ldr	r3, [pc, #172]	; (6078 <grid_port_process_outbound_ui+0x9b8>)
                        grid_keyboard_state.isenabled = 0;             
    5fcc:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
                        grid_msg_init(&response);
    5fd0:	a88f      	add	r0, sp, #572	; 0x23c
    5fd2:	4798      	blx	r3
                        grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5fd4:	227f      	movs	r2, #127	; 0x7f
    5fd6:	4623      	mov	r3, r4
    5fd8:	4611      	mov	r1, r2
    5fda:	a88f      	add	r0, sp, #572	; 0x23c
    5fdc:	4f27      	ldr	r7, [pc, #156]	; (607c <grid_port_process_outbound_ui+0x9bc>)
    5fde:	47b8      	blx	r7
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5fe0:	2303      	movs	r3, #3
    5fe2:	492f      	ldr	r1, [pc, #188]	; (60a0 <grid_port_process_outbound_ui+0x9e0>)
    5fe4:	9300      	str	r3, [sp, #0]
    5fe6:	2202      	movs	r2, #2
    5fe8:	4f25      	ldr	r7, [pc, #148]	; (6080 <grid_port_process_outbound_ui+0x9c0>)
                        uint8_t response_payload[10] = {0};
    5fea:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5fee:	2392      	movs	r3, #146	; 0x92
    5ff0:	a80d      	add	r0, sp, #52	; 0x34
                        uint8_t response_payload[10] = {0};
    5ff2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5ff6:	47b8      	blx	r7
                        grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ff8:	4b23      	ldr	r3, [pc, #140]	; (6088 <grid_port_process_outbound_ui+0x9c8>)
    5ffa:	a80d      	add	r0, sp, #52	; 0x34
    5ffc:	4798      	blx	r3
    5ffe:	a90d      	add	r1, sp, #52	; 0x34
    6000:	4602      	mov	r2, r0
    6002:	4b23      	ldr	r3, [pc, #140]	; (6090 <grid_port_process_outbound_ui+0x9d0>)
    6004:	a88f      	add	r0, sp, #572	; 0x23c
    6006:	4798      	blx	r3
                        grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6008:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
    600c:	9300      	str	r3, [sp, #0]
    600e:	4e1f      	ldr	r6, [pc, #124]	; (608c <grid_port_process_outbound_ui+0x9cc>)
    6010:	4621      	mov	r1, r4
    6012:	a88f      	add	r0, sp, #572	; 0x23c
    6014:	2302      	movs	r3, #2
    6016:	2205      	movs	r2, #5
    6018:	47b0      	blx	r6
                        grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    601a:	230d      	movs	r3, #13
    601c:	4621      	mov	r1, r4
    601e:	2204      	movs	r2, #4
    6020:	9300      	str	r3, [sp, #0]
    6022:	a88f      	add	r0, sp, #572	; 0x23c
    6024:	2301      	movs	r3, #1
    6026:	47b0      	blx	r6
                        grid_msg_packet_close(&response);
    6028:	4b1a      	ldr	r3, [pc, #104]	; (6094 <grid_port_process_outbound_ui+0x9d4>)
                        grid_sys_alert_set_alert(&grid_sys_state, 100, 100, 100, 0, 250);
    602a:	4e1e      	ldr	r6, [pc, #120]	; (60a4 <grid_port_process_outbound_ui+0x9e4>)
                        grid_msg_packet_close(&response);
    602c:	a88f      	add	r0, sp, #572	; 0x23c
    602e:	4798      	blx	r3
                        grid_msg_packet_send_everywhere(&response);
    6030:	4b19      	ldr	r3, [pc, #100]	; (6098 <grid_port_process_outbound_ui+0x9d8>)
    6032:	a88f      	add	r0, sp, #572	; 0x23c
    6034:	4798      	blx	r3
                        grid_sys_alert_set_alert(&grid_sys_state, 100, 100, 100, 0, 250);
    6036:	23fa      	movs	r3, #250	; 0xfa
    6038:	e9cd 4300 	strd	r4, r3, [sp]
    603c:	2364      	movs	r3, #100	; 0x64
    603e:	480b      	ldr	r0, [pc, #44]	; (606c <grid_port_process_outbound_ui+0x9ac>)
    6040:	461a      	mov	r2, r3
    6042:	4619      	mov	r1, r3
    6044:	47b0      	blx	r6
    6046:	e6df      	b.n	5e08 <grid_port_process_outbound_ui+0x748>
						actionstring[j] = message[current_start+GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset + j];
    6048:	f818 2b01 	ldrb.w	r2, [r8], #1
    604c:	558a      	strb	r2, [r1, r6]
					for(uint32_t j = 0; j<actionstring_length; j++){
    604e:	3101      	adds	r1, #1
    6050:	e70a      	b.n	5e68 <grid_port_process_outbound_ui+0x7a8>
    6052:	bf00      	nop
    6054:	200079b8 	.word	0x200079b8
    6058:	00009a7d 	.word	0x00009a7d
    605c:	00009a9d 	.word	0x00009a9d
    6060:	00009aad 	.word	0x00009aad
    6064:	00012cf5 	.word	0x00012cf5
    6068:	0000a6e9 	.word	0x0000a6e9
    606c:	20006fa4 	.word	0x20006fa4
    6070:	0000a9ad 	.word	0x0000a9ad
    6074:	00009f55 	.word	0x00009f55
    6078:	00008545 	.word	0x00008545
    607c:	00008579 	.word	0x00008579
    6080:	00013351 	.word	0x00013351
    6084:	000152f0 	.word	0x000152f0
    6088:	00013801 	.word	0x00013801
    608c:	00008529 	.word	0x00008529
    6090:	000084b5 	.word	0x000084b5
    6094:	00008671 	.word	0x00008671
    6098:	00008745 	.word	0x00008745
    609c:	20008200 	.word	0x20008200
    60a0:	000152e4 	.word	0x000152e4
    60a4:	000097ab 	.word	0x000097ab
                        grid_keyboard_state.isenabled = 0;             
    60a8:	4e8b      	ldr	r6, [pc, #556]	; (62d8 <grid_port_process_outbound_ui+0xc18>)
                        grid_msg_init(&response);
    60aa:	4b8c      	ldr	r3, [pc, #560]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
                        grid_keyboard_state.isenabled = 0;             
    60ac:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
                        grid_msg_init(&response);
    60b0:	a88f      	add	r0, sp, #572	; 0x23c
    60b2:	4798      	blx	r3
                        grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    60b4:	227f      	movs	r2, #127	; 0x7f
    60b6:	4611      	mov	r1, r2
    60b8:	4f89      	ldr	r7, [pc, #548]	; (62e0 <grid_port_process_outbound_ui+0xc20>)
    60ba:	4623      	mov	r3, r4
    60bc:	a88f      	add	r0, sp, #572	; 0x23c
    60be:	47b8      	blx	r7
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60c0:	2303      	movs	r3, #3
    60c2:	4988      	ldr	r1, [pc, #544]	; (62e4 <grid_port_process_outbound_ui+0xc24>)
    60c4:	9300      	str	r3, [sp, #0]
    60c6:	2202      	movs	r2, #2
    60c8:	2392      	movs	r3, #146	; 0x92
    60ca:	4f87      	ldr	r7, [pc, #540]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
                        uint8_t response_payload[10] = {0};
    60cc:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60d0:	a80d      	add	r0, sp, #52	; 0x34
                        uint8_t response_payload[10] = {0};
    60d2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60d6:	47b8      	blx	r7
                        grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    60d8:	4b84      	ldr	r3, [pc, #528]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
    60da:	a80d      	add	r0, sp, #52	; 0x34
    60dc:	4798      	blx	r3
    60de:	4b84      	ldr	r3, [pc, #528]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    60e0:	4602      	mov	r2, r0
    60e2:	a90d      	add	r1, sp, #52	; 0x34
    60e4:	a88f      	add	r0, sp, #572	; 0x23c
    60e6:	4798      	blx	r3
                        grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    60e8:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
    60ec:	9300      	str	r3, [sp, #0]
    60ee:	2205      	movs	r2, #5
    60f0:	2302      	movs	r3, #2
    60f2:	4621      	mov	r1, r4
    60f4:	4e7f      	ldr	r6, [pc, #508]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
    60f6:	a88f      	add	r0, sp, #572	; 0x23c
    60f8:	47b0      	blx	r6
                        grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    60fa:	230d      	movs	r3, #13
    60fc:	9300      	str	r3, [sp, #0]
    60fe:	2204      	movs	r2, #4
    6100:	2301      	movs	r3, #1
    6102:	4621      	mov	r1, r4
    6104:	a88f      	add	r0, sp, #572	; 0x23c
    6106:	47b0      	blx	r6
    6108:	e753      	b.n	5fb2 <grid_port_process_outbound_ui+0x8f2>
                else if (msg_class == GRID_CLASS_HIDKEYSTATUS_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    610a:	2e92      	cmp	r6, #146	; 0x92
    610c:	d13e      	bne.n	618c <grid_port_process_outbound_ui+0xacc>
    610e:	2f0e      	cmp	r7, #14
    6110:	f47f ab51 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6114:	9b02      	ldr	r3, [sp, #8]
    6116:	ea5b 0303 	orrs.w	r3, fp, r3
    611a:	f43f ab4c 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
                    uint8_t isenabled =	grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset]		, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length	, &error_flag);
    611e:	f108 0005 	add.w	r0, r8, #5
    6122:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    6126:	2102      	movs	r1, #2
    6128:	4448      	add	r0, r9
    612a:	47a8      	blx	r5
                    grid_keyboard_state.isenabled = isenabled;
    612c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 62d8 <grid_port_process_outbound_ui+0xc18>
                    grid_msg_init(&response);
    6130:	4b6a      	ldr	r3, [pc, #424]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
                    uint8_t isenabled =	grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset]		, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length	, &error_flag);
    6132:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
                    grid_msg_init(&response);
    6136:	a88f      	add	r0, sp, #572	; 0x23c
    6138:	4798      	blx	r3
                    grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    613a:	227f      	movs	r2, #127	; 0x7f
    613c:	4611      	mov	r1, r2
    613e:	4f68      	ldr	r7, [pc, #416]	; (62e0 <grid_port_process_outbound_ui+0xc20>)
    6140:	2300      	movs	r3, #0
    6142:	a88f      	add	r0, sp, #572	; 0x23c
    6144:	47b8      	blx	r7
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    6146:	2303      	movs	r3, #3
    6148:	4966      	ldr	r1, [pc, #408]	; (62e4 <grid_port_process_outbound_ui+0xc24>)
    614a:	9300      	str	r3, [sp, #0]
                    uint8_t response_payload[10] = {0};
    614c:	2700      	movs	r7, #0
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    614e:	4633      	mov	r3, r6
    6150:	2202      	movs	r2, #2
    6152:	4e65      	ldr	r6, [pc, #404]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
                    uint8_t response_payload[10] = {0};
    6154:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    6158:	a80d      	add	r0, sp, #52	; 0x34
                    uint8_t response_payload[10] = {0};
    615a:	e9cd 770d 	strd	r7, r7, [sp, #52]	; 0x34
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    615e:	47b0      	blx	r6
                    grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    6160:	4b62      	ldr	r3, [pc, #392]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
                    grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6162:	4e64      	ldr	r6, [pc, #400]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
                    grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    6164:	a80d      	add	r0, sp, #52	; 0x34
    6166:	4798      	blx	r3
    6168:	4b61      	ldr	r3, [pc, #388]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    616a:	4602      	mov	r2, r0
    616c:	a90d      	add	r1, sp, #52	; 0x34
    616e:	a88f      	add	r0, sp, #572	; 0x23c
    6170:	4798      	blx	r3
                    grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6172:	f898 3045 	ldrb.w	r3, [r8, #69]	; 0x45
    6176:	9300      	str	r3, [sp, #0]
    6178:	2205      	movs	r2, #5
    617a:	2302      	movs	r3, #2
    617c:	4639      	mov	r1, r7
    617e:	a88f      	add	r0, sp, #572	; 0x23c
    6180:	47b0      	blx	r6
                    grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    6182:	230a      	movs	r3, #10
    6184:	9300      	str	r3, [sp, #0]
    6186:	2204      	movs	r2, #4
    6188:	2301      	movs	r3, #1
    618a:	e54a      	b.n	5c22 <grid_port_process_outbound_ui+0x562>
				else if (msg_class == GRID_CLASS_CONFIGDEFAULT_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_local)){
    618c:	2e81      	cmp	r6, #129	; 0x81
    618e:	f47f ab12 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6192:	2f0e      	cmp	r7, #14
    6194:	f47f ab0f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6198:	ea5b 0304 	orrs.w	r3, fp, r4
    619c:	f43f ab0b 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    61a0:	f108 0005 	add.w	r0, r8, #5
    61a4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61a8:	2102      	movs	r1, #2
    61aa:	4448      	add	r0, r9
    61ac:	47a8      	blx	r5
    61ae:	b2c7      	uxtb	r7, r0
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    61b0:	f108 0007 	add.w	r0, r8, #7
    61b4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61b8:	2102      	movs	r1, #2
    61ba:	4448      	add	r0, r9
    61bc:	47a8      	blx	r5
    61be:	4606      	mov	r6, r0
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    61c0:	f108 0009 	add.w	r0, r8, #9
    61c4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61c8:	2102      	movs	r1, #2
    61ca:	4448      	add	r0, r9
    61cc:	47a8      	blx	r5
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    61ce:	f8da 3004 	ldr.w	r3, [sl, #4]
    61d2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    61d6:	b2f2      	uxtb	r2, r6
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    61d8:	fa5f f880 	uxtb.w	r8, r0
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    61dc:	f04f 0964 	mov.w	r9, #100	; 0x64
    61e0:	68d8      	ldr	r0, [r3, #12]
    61e2:	4b45      	ldr	r3, [pc, #276]	; (62f8 <grid_port_process_outbound_ui+0xc38>)
    61e4:	9204      	str	r2, [sp, #16]
    61e6:	fb09 f902 	mul.w	r9, r9, r2
    61ea:	4641      	mov	r1, r8
    61ec:	4448      	add	r0, r9
    61ee:	4798      	blx	r3
					if (banknumber == grid_sys_state.bank_activebank_number){
    61f0:	4b42      	ldr	r3, [pc, #264]	; (62fc <grid_port_process_outbound_ui+0xc3c>)
    61f2:	7bdb      	ldrb	r3, [r3, #15]
    61f4:	42bb      	cmp	r3, r7
    61f6:	d105      	bne.n	6204 <grid_port_process_outbound_ui+0xb44>
						grid_ui_smart_trigger(&grid_ui_state, banknumber, elementnumber, eventtype);
    61f8:	9a04      	ldr	r2, [sp, #16]
    61fa:	4e41      	ldr	r6, [pc, #260]	; (6300 <grid_port_process_outbound_ui+0xc40>)
    61fc:	4643      	mov	r3, r8
    61fe:	4639      	mov	r1, r7
    6200:	4650      	mov	r0, sl
    6202:	47b0      	blx	r6
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    6204:	f8da 3004 	ldr.w	r3, [sl, #4]
    6208:	013a      	lsls	r2, r7, #4
    620a:	4413      	add	r3, r2
    620c:	4641      	mov	r1, r8
    620e:	68d8      	ldr	r0, [r3, #12]
    6210:	4b3c      	ldr	r3, [pc, #240]	; (6304 <grid_port_process_outbound_ui+0xc44>)
    6212:	4448      	add	r0, r9
    6214:	4798      	blx	r3
					if (event_index != 255){
    6216:	28ff      	cmp	r0, #255	; 0xff
    6218:	d018      	beq.n	624c <grid_port_process_outbound_ui+0xb8c>
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    621a:	f8da 3004 	ldr.w	r3, [sl, #4]
    621e:	f44f 7286 	mov.w	r2, #268	; 0x10c
    6222:	4350      	muls	r0, r2
    6224:	013a      	lsls	r2, r7, #4
    6226:	4413      	add	r3, r2
    6228:	2201      	movs	r2, #1
    622a:	68db      	ldr	r3, [r3, #12]
    622c:	444b      	add	r3, r9
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 1;
    622e:	0139      	lsls	r1, r7, #4
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    6230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6232:	4403      	add	r3, r0
    6234:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 1;
    6238:	f8da 3004 	ldr.w	r3, [sl, #4]
    623c:	440b      	add	r3, r1
    623e:	68db      	ldr	r3, [r3, #12]
    6240:	4499      	add	r9, r3
    6242:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
    6246:	4418      	add	r0, r3
    6248:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
					grid_msg_init(&response);
    624c:	4b23      	ldr	r3, [pc, #140]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    624e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 62e0 <grid_port_process_outbound_ui+0xc20>
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6252:	4e25      	ldr	r6, [pc, #148]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
					grid_msg_init(&response);
    6254:	a88f      	add	r0, sp, #572	; 0x23c
    6256:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    6258:	227f      	movs	r2, #127	; 0x7f
    625a:	4611      	mov	r1, r2
    625c:	2300      	movs	r3, #0
    625e:	a88f      	add	r0, sp, #572	; 0x23c
    6260:	47c8      	blx	r9
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6262:	2303      	movs	r3, #3
					uint8_t response_payload[10] = {0};
    6264:	f04f 0900 	mov.w	r9, #0
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6268:	4927      	ldr	r1, [pc, #156]	; (6308 <grid_port_process_outbound_ui+0xc48>)
    626a:	9300      	str	r3, [sp, #0]
    626c:	2202      	movs	r2, #2
    626e:	2380      	movs	r3, #128	; 0x80
    6270:	a80d      	add	r0, sp, #52	; 0x34
					uint8_t response_payload[10] = {0};
    6272:	e9cd 990d 	strd	r9, r9, [sp, #52]	; 0x34
    6276:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    627a:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    627c:	4b1b      	ldr	r3, [pc, #108]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
    627e:	a80d      	add	r0, sp, #52	; 0x34
    6280:	4798      	blx	r3
    6282:	4b1b      	ldr	r3, [pc, #108]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    6284:	4602      	mov	r2, r0
    6286:	a90d      	add	r1, sp, #52	; 0x34
    6288:	a88f      	add	r0, sp, #572	; 0x23c
    628a:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    628c:	9700      	str	r7, [sp, #0]
    628e:	2302      	movs	r3, #2
    6290:	4f18      	ldr	r7, [pc, #96]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
    6292:	2205      	movs	r2, #5
    6294:	4649      	mov	r1, r9
    6296:	a88f      	add	r0, sp, #572	; 0x23c
    6298:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, elementnumber);
    629a:	9b04      	ldr	r3, [sp, #16]
    629c:	9300      	str	r3, [sp, #0]
    629e:	2207      	movs	r2, #7
    62a0:	2302      	movs	r3, #2
    62a2:	4649      	mov	r1, r9
    62a4:	a88f      	add	r0, sp, #572	; 0x23c
    62a6:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eventtype);
    62a8:	f8cd 8000 	str.w	r8, [sp]
    62ac:	2302      	movs	r3, #2
    62ae:	2209      	movs	r2, #9
    62b0:	4649      	mov	r1, r9
    62b2:	a88f      	add	r0, sp, #572	; 0x23c
    62b4:	47b8      	blx	r7
						grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    62b6:	230a      	movs	r3, #10
    62b8:	2204      	movs	r2, #4
    62ba:	4649      	mov	r1, r9
    62bc:	9300      	str	r3, [sp, #0]
    62be:	a88f      	add	r0, sp, #572	; 0x23c
    62c0:	2301      	movs	r3, #1
    62c2:	47b8      	blx	r7
					grid_msg_packet_close(&response);
    62c4:	4b11      	ldr	r3, [pc, #68]	; (630c <grid_port_process_outbound_ui+0xc4c>)
    62c6:	a88f      	add	r0, sp, #572	; 0x23c
    62c8:	4798      	blx	r3
					grid_msg_packet_send_everywhere(&response);
    62ca:	4b11      	ldr	r3, [pc, #68]	; (6310 <grid_port_process_outbound_ui+0xc50>)
    62cc:	a88f      	add	r0, sp, #572	; 0x23c
    62ce:	4798      	blx	r3
				current_start = 0;
    62d0:	46c8      	mov	r8, r9
    62d2:	f7ff ba4c 	b.w	576e <grid_port_process_outbound_ui+0xae>
    62d6:	bf00      	nop
    62d8:	20008200 	.word	0x20008200
    62dc:	00008545 	.word	0x00008545
    62e0:	00008579 	.word	0x00008579
    62e4:	000152e4 	.word	0x000152e4
    62e8:	00013351 	.word	0x00013351
    62ec:	00013801 	.word	0x00013801
    62f0:	000084b5 	.word	0x000084b5
    62f4:	00008529 	.word	0x00008529
    62f8:	0000a805 	.word	0x0000a805
    62fc:	20006fa4 	.word	0x20006fa4
    6300:	0000a9ad 	.word	0x0000a9ad
    6304:	00009f55 	.word	0x00009f55
    6308:	000152f0 	.word	0x000152f0
    630c:	00008671 	.word	0x00008671
    6310:	00008745 	.word	0x00008745

00006314 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    6314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    6318:	8987      	ldrh	r7, [r0, #12]
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    631a:	4605      	mov	r5, r0
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    631c:	bb1f      	cbnz	r7, 6366 <grid_port_process_outbound_usart+0x52>
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    631e:	f500 561c 	add.w	r6, r0, #9984	; 0x2700
    6322:	363c      	adds	r6, #60	; 0x3c
    6324:	4b11      	ldr	r3, [pc, #68]	; (636c <grid_port_process_outbound_usart+0x58>)
    6326:	4630      	mov	r0, r6
    6328:	4798      	blx	r3
		
		if (!packet_size){
    632a:	4604      	mov	r4, r0
    632c:	b1a0      	cbz	r0, 6358 <grid_port_process_outbound_usart+0x44>
			// NO PACKET IN RX BUFFER
			return 0;
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    632e:	4b10      	ldr	r3, [pc, #64]	; (6370 <grid_port_process_outbound_usart+0x5c>)
			
			por->tx_double_buffer_status = packet_size;
			
			for (uint16_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6330:	f8df a048 	ldr.w	sl, [pc, #72]	; 637c <grid_port_process_outbound_usart+0x68>
			grid_buffer_read_init(&por->tx_buffer);
    6334:	4630      	mov	r0, r6
    6336:	f105 082c 	add.w	r8, r5, #44	; 0x2c
    633a:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    633c:	46c1      	mov	r9, r8
    633e:	81ac      	strh	r4, [r5, #12]
			for (uint16_t i = 0; i<packet_size; i++){
    6340:	b2bb      	uxth	r3, r7
    6342:	429c      	cmp	r4, r3
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6344:	4630      	mov	r0, r6
			for (uint16_t i = 0; i<packet_size; i++){
    6346:	d809      	bhi.n	635c <grid_port_process_outbound_usart+0x48>
				por->tx_double_buffer[i] = character;
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    6348:	4b0a      	ldr	r3, [pc, #40]	; (6374 <grid_port_process_outbound_usart+0x60>)
    634a:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    634c:	89aa      	ldrh	r2, [r5, #12]
    634e:	6868      	ldr	r0, [r5, #4]
    6350:	4b09      	ldr	r3, [pc, #36]	; (6378 <grid_port_process_outbound_usart+0x64>)
    6352:	4649      	mov	r1, r9
    6354:	4798      	blx	r3
			
			return 1;
    6356:	2001      	movs	r0, #1
		}
		
	}
	
	return 0;
}
    6358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    635c:	47d0      	blx	sl
				por->tx_double_buffer[i] = character;
    635e:	3701      	adds	r7, #1
    6360:	f808 0b01 	strb.w	r0, [r8], #1
			for (uint16_t i = 0; i<packet_size; i++){
    6364:	e7ec      	b.n	6340 <grid_port_process_outbound_usart+0x2c>
	return 0;
    6366:	2000      	movs	r0, #0
    6368:	e7f6      	b.n	6358 <grid_port_process_outbound_usart+0x44>
    636a:	bf00      	nop
    636c:	00004f05 	.word	0x00004f05
    6370:	00004f5b 	.word	0x00004f5b
    6374:	00004fed 	.word	0x00004fed
    6378:	0000b371 	.word	0x0000b371
    637c:	00004fc3 	.word	0x00004fc3

00006380 <grid_d51_init>:
	
}



void grid_d51_init(){
    6380:	b570      	push	{r4, r5, r6, lr}
	
	uint32_t hwid = grid_sys_get_hwcfg();
    6382:	4b09      	ldr	r3, [pc, #36]	; (63a8 <grid_d51_init+0x28>)
	
	#ifdef NDEBUG		
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "USER ROW CHECK!");
	grid_d51_verify_user_row();
	#else
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    6384:	4d09      	ldr	r5, [pc, #36]	; (63ac <grid_d51_init+0x2c>)
	printf("{\"type\":\"HWCFG\", \"data\": \"%d\"}\r\n", hwid);
    6386:	4c0a      	ldr	r4, [pc, #40]	; (63b0 <grid_d51_init+0x30>)
	uint32_t hwid = grid_sys_get_hwcfg();
    6388:	4798      	blx	r3
    638a:	4601      	mov	r1, r0
	printf("{\"type\":\"HWCFG\", \"data\": \"%d\"}\r\n", hwid);
    638c:	4809      	ldr	r0, [pc, #36]	; (63b4 <grid_d51_init+0x34>)
    638e:	47a0      	blx	r4
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    6390:	4909      	ldr	r1, [pc, #36]	; (63b8 <grid_d51_init+0x38>)
    6392:	4628      	mov	r0, r5
    6394:	47a0      	blx	r4
	{
	}
	
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    6396:	4909      	ldr	r1, [pc, #36]	; (63bc <grid_d51_init+0x3c>)
    6398:	4628      	mov	r0, r5
    639a:	47a0      	blx	r4
	while (1)
	{
	}
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    639c:	4628      	mov	r0, r5
    639e:	4623      	mov	r3, r4
    63a0:	4907      	ldr	r1, [pc, #28]	; (63c0 <grid_d51_init+0x40>)
	#endif
		
}
    63a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    63a6:	4718      	bx	r3
    63a8:	00009885 	.word	0x00009885
    63ac:	000151bb 	.word	0x000151bb
    63b0:	00012f39 	.word	0x00012f39
    63b4:	00015300 	.word	0x00015300
    63b8:	00015321 	.word	0x00015321
    63bc:	00015334 	.word	0x00015334
    63c0:	00015341 	.word	0x00015341

000063c4 <grid_expr_clear_input>:
}


grid_expr_clear_input(struct grid_expr_model* expr){

    expr->input_string_length = 0;
    63c4:	2300      	movs	r3, #0
    63c6:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

    for (uint32_t i=0; i<GRID_EXPR_INPUT_STRING_MAXLENGTH; i++){
    63ca:	1e42      	subs	r2, r0, #1
    63cc:	3063      	adds	r0, #99	; 0x63

        expr->input_string[i] = 0;
    63ce:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (uint32_t i=0; i<GRID_EXPR_INPUT_STRING_MAXLENGTH; i++){
    63d2:	4282      	cmp	r2, r0
    63d4:	d1fb      	bne.n	63ce <grid_expr_clear_input+0xa>

    }

}
    63d6:	4770      	bx	lr

000063d8 <grid_expr_clear_output>:

grid_expr_clear_output(struct grid_expr_model* expr){


    expr->output_string_length = 0;
    63d8:	2300      	movs	r3, #0
    63da:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca

    for (uint32_t i=0; i<GRID_EXPR_OUTPUT_STRING_MAXLENGTH; i++){
    63de:	f100 0265 	add.w	r2, r0, #101	; 0x65
    63e2:	30c9      	adds	r0, #201	; 0xc9

        expr->output_string[i] = 0;
    63e4:	f802 3b01 	strb.w	r3, [r2], #1
    for (uint32_t i=0; i<GRID_EXPR_OUTPUT_STRING_MAXLENGTH; i++){
    63e8:	4282      	cmp	r2, r0
    63ea:	d1fb      	bne.n	63e4 <grid_expr_clear_output+0xc>

    }

}
    63ec:	4770      	bx	lr
	...

000063f0 <grid_expr_init>:
void grid_expr_init(struct grid_expr_model* expr){
    63f0:	b510      	push	{r4, lr}
    grid_expr_clear_input(expr);
    63f2:	4b04      	ldr	r3, [pc, #16]	; (6404 <grid_expr_init+0x14>)
void grid_expr_init(struct grid_expr_model* expr){
    63f4:	4601      	mov	r1, r0
    grid_expr_clear_input(expr);
    63f6:	4798      	blx	r3
}
    63f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    grid_expr_clear_output(expr);
    63fc:	4b02      	ldr	r3, [pc, #8]	; (6408 <grid_expr_init+0x18>)
    63fe:	4608      	mov	r0, r1
    6400:	4718      	bx	r3
    6402:	bf00      	nop
    6404:	000063c5 	.word	0x000063c5
    6408:	000063d9 	.word	0x000063d9

0000640c <get>:
}


char get(char** e)
{
    char ret = **e;
    640c:	6802      	ldr	r2, [r0, #0]
{
    640e:	4603      	mov	r3, r0
    char ret = **e;
    6410:	f812 0b01 	ldrb.w	r0, [r2], #1
    ++*e;
    6414:	601a      	str	r2, [r3, #0]
    return ret;
}
    6416:	4770      	bx	lr

00006418 <number>:

int number(char** e)
{
    6418:	b530      	push	{r4, r5, lr}
    char ret = **e;
    641a:	6801      	ldr	r1, [r0, #0]
    641c:	f811 3b01 	ldrb.w	r3, [r1], #1
    ++*e;
    6420:	6001      	str	r1, [r0, #0]
{
    6422:	4602      	mov	r2, r0
    int result = get(e) - '0';
    while (peek(e) >= '0' && peek(e) <= '9') // HEX para
    {
        result = 10*result + get(e) - '0'; // HEX para
    6424:	250a      	movs	r5, #10
    int result = get(e) - '0';
    6426:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    return **e;
    642a:	6811      	ldr	r1, [r2, #0]
    642c:	780b      	ldrb	r3, [r1, #0]
    while (peek(e) >= '0' && peek(e) <= '9') // HEX para
    642e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    6432:	2c09      	cmp	r4, #9
    6434:	d900      	bls.n	6438 <number+0x20>
    }
    return result;
}
    6436:	bd30      	pop	{r4, r5, pc}
    ++*e;
    6438:	3101      	adds	r1, #1
        result = 10*result + get(e) - '0'; // HEX para
    643a:	fb05 3300 	mla	r3, r5, r0, r3
    ++*e;
    643e:	6011      	str	r1, [r2, #0]
        result = 10*result + get(e) - '0'; // HEX para
    6440:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6444:	e7f1      	b.n	642a <number+0x12>
	...

00006448 <expr_level_0>:
            result -= expr_level_2(e);
    return result;
}

int expr_level_0(char ** e) // equality
{
    6448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = expr_level_1(e);
    644a:	4e2a      	ldr	r6, [pc, #168]	; (64f4 <expr_level_0+0xac>)
        else if (peeked == '=' && peeked2 == '='){
            get(e); // burn the second character
            result = (result == expr_level_1(e));
        }
        else if (peeked == '!' && peeked2 == '='){
            get(e); // burn the second character
    644c:	4f2a      	ldr	r7, [pc, #168]	; (64f8 <expr_level_0+0xb0>)
{
    644e:	4605      	mov	r5, r0
    int result = expr_level_1(e);
    6450:	47b0      	blx	r6
    6452:	4604      	mov	r4, r0
    return **e;
    6454:	682a      	ldr	r2, [r5, #0]
    6456:	7813      	ldrb	r3, [r2, #0]
    while (     (peek(e) == '>' && peek2(e) != '=') || 
    6458:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
    645c:	293c      	cmp	r1, #60	; 0x3c
    645e:	d004      	beq.n	646a <expr_level_0+0x22>
                (peek(e) == '<' && peek2(e) != '=') || 
    6460:	2b3d      	cmp	r3, #61	; 0x3d
    6462:	d143      	bne.n	64ec <expr_level_0+0xa4>
                (peek(e) == '!' && peek2(e) == '=') ||
    6464:	7851      	ldrb	r1, [r2, #1]
    6466:	293d      	cmp	r1, #61	; 0x3d
    6468:	d142      	bne.n	64f0 <expr_level_0+0xa8>
    ++*e;
    646a:	1c51      	adds	r1, r2, #1
    646c:	6029      	str	r1, [r5, #0]
        if ((peeked == '>' && peeked2 != '=')){
    646e:	2b3e      	cmp	r3, #62	; 0x3e
    return **e;
    6470:	7852      	ldrb	r2, [r2, #1]
        if ((peeked == '>' && peeked2 != '=')){
    6472:	d108      	bne.n	6486 <expr_level_0+0x3e>
    6474:	2a3d      	cmp	r2, #61	; 0x3d
            result = (result>expr_level_1(e));
    6476:	4628      	mov	r0, r5
        if ((peeked == '>' && peeked2 != '=')){
    6478:	d028      	beq.n	64cc <expr_level_0+0x84>
            result = (result>expr_level_1(e));
    647a:	47b0      	blx	r6
    647c:	42a0      	cmp	r0, r4
    647e:	bfac      	ite	ge
    6480:	2400      	movge	r4, #0
    6482:	2401      	movlt	r4, #1
    6484:	e7e6      	b.n	6454 <expr_level_0+0xc>
        else if (peeked == '<' && peeked2 != '='){
    6486:	2b3c      	cmp	r3, #60	; 0x3c
    6488:	d108      	bne.n	649c <expr_level_0+0x54>
    648a:	2a3d      	cmp	r2, #61	; 0x3d
            result = (result<expr_level_1(e));
    648c:	4628      	mov	r0, r5
        else if (peeked == '<' && peeked2 != '='){
    648e:	d025      	beq.n	64dc <expr_level_0+0x94>
            result = (result<expr_level_1(e));
    6490:	47b0      	blx	r6
    6492:	42a0      	cmp	r0, r4
    6494:	bfd4      	ite	le
    6496:	2400      	movle	r4, #0
    6498:	2401      	movgt	r4, #1
    649a:	e7db      	b.n	6454 <expr_level_0+0xc>
        else if (peeked == '=' && peeked2 == '='){
    649c:	2b3d      	cmp	r3, #61	; 0x3d
    649e:	d109      	bne.n	64b4 <expr_level_0+0x6c>
    64a0:	2a3d      	cmp	r2, #61	; 0x3d
    64a2:	d1d7      	bne.n	6454 <expr_level_0+0xc>
            get(e); // burn the second character
    64a4:	4628      	mov	r0, r5
    64a6:	47b8      	blx	r7
            result = (result == expr_level_1(e));
    64a8:	4628      	mov	r0, r5
    64aa:	47b0      	blx	r6
    64ac:	1b03      	subs	r3, r0, r4
    64ae:	425c      	negs	r4, r3
    64b0:	415c      	adcs	r4, r3
    64b2:	e7cf      	b.n	6454 <expr_level_0+0xc>
        else if (peeked == '!' && peeked2 == '='){
    64b4:	2b21      	cmp	r3, #33	; 0x21
    64b6:	d1cd      	bne.n	6454 <expr_level_0+0xc>
    64b8:	2a3d      	cmp	r2, #61	; 0x3d
    64ba:	d1cb      	bne.n	6454 <expr_level_0+0xc>
            get(e); // burn the second character
    64bc:	4628      	mov	r0, r5
    64be:	47b8      	blx	r7
            result = (result != expr_level_1(e));
    64c0:	4628      	mov	r0, r5
    64c2:	47b0      	blx	r6
    64c4:	1b04      	subs	r4, r0, r4
    64c6:	bf18      	it	ne
    64c8:	2401      	movne	r4, #1
    64ca:	e7c3      	b.n	6454 <expr_level_0+0xc>
        }
        else if (peeked == '>' && peeked2 == '='){
            get(e); // burn the second character
    64cc:	47b8      	blx	r7
            result = (result >= expr_level_1(e));
    64ce:	4628      	mov	r0, r5
    64d0:	47b0      	blx	r6
    64d2:	42a0      	cmp	r0, r4
    64d4:	bfcc      	ite	gt
    64d6:	2400      	movgt	r4, #0
    64d8:	2401      	movle	r4, #1
    64da:	e7bb      	b.n	6454 <expr_level_0+0xc>
        }
        else if (peeked == '<' && peeked2 == '='){
            get(e); // burn the second character
    64dc:	47b8      	blx	r7
            result = (result <= expr_level_1(e));
    64de:	4628      	mov	r0, r5
    64e0:	47b0      	blx	r6
    64e2:	42a0      	cmp	r0, r4
    64e4:	bfb4      	ite	lt
    64e6:	2400      	movlt	r4, #0
    64e8:	2401      	movge	r4, #1
    64ea:	e7b3      	b.n	6454 <expr_level_0+0xc>
                (peek(e) == '=' && peek2(e) == '=') ||
    64ec:	2b21      	cmp	r3, #33	; 0x21
    64ee:	d0b9      	beq.n	6464 <expr_level_0+0x1c>
        }
    }
    return result;
}
    64f0:	4620      	mov	r0, r4
    64f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64f4:	000065b5 	.word	0x000065b5
    64f8:	0000640d 	.word	0x0000640d

000064fc <expr_level_3>:
        get(e);
    64fc:	4913      	ldr	r1, [pc, #76]	; (654c <expr_level_3+0x50>)
{
    64fe:	b570      	push	{r4, r5, r6, lr}
    6500:	4604      	mov	r4, r0
    6502:	2501      	movs	r5, #1
    return **e;
    6504:	6823      	ldr	r3, [r4, #0]
    6506:	781b      	ldrb	r3, [r3, #0]
    if (peek(e) >= '0' && peek(e) <= '9') // HEX para
    6508:	2b2f      	cmp	r3, #47	; 0x2f
    650a:	d908      	bls.n	651e <expr_level_3+0x22>
    650c:	2b39      	cmp	r3, #57	; 0x39
    650e:	d818      	bhi.n	6542 <expr_level_3+0x46>
        return number(e);
    6510:	4b0f      	ldr	r3, [pc, #60]	; (6550 <expr_level_3+0x54>)
    6512:	4620      	mov	r0, r4
    6514:	4798      	blx	r3
    6516:	4601      	mov	r1, r0
}
    6518:	fb05 f001 	mul.w	r0, r5, r1
    651c:	bd70      	pop	{r4, r5, r6, pc}
    else if (peek(e) == '(')
    651e:	2b28      	cmp	r3, #40	; 0x28
    6520:	d109      	bne.n	6536 <expr_level_3+0x3a>
        get(e); // '('
    6522:	4e0a      	ldr	r6, [pc, #40]	; (654c <expr_level_3+0x50>)
    6524:	4620      	mov	r0, r4
    6526:	47b0      	blx	r6
        int result = expr_level_0(e);
    6528:	4b0a      	ldr	r3, [pc, #40]	; (6554 <expr_level_3+0x58>)
    652a:	4620      	mov	r0, r4
    652c:	4798      	blx	r3
    652e:	4601      	mov	r1, r0
        get(e); // ')'
    6530:	4620      	mov	r0, r4
    6532:	47b0      	blx	r6
        return result;
    6534:	e7f0      	b.n	6518 <expr_level_3+0x1c>
    else if (peek(e) == '-')
    6536:	2b2d      	cmp	r3, #45	; 0x2d
    6538:	d103      	bne.n	6542 <expr_level_3+0x46>
        get(e);
    653a:	4620      	mov	r0, r4
    653c:	4788      	blx	r1
        return -expr_level_3(e);
    653e:	426d      	negs	r5, r5
    6540:	e7e0      	b.n	6504 <expr_level_3+0x8>
    printf("ERROR in expr_level_3()\n");
    6542:	4805      	ldr	r0, [pc, #20]	; (6558 <expr_level_3+0x5c>)
    6544:	4b05      	ldr	r3, [pc, #20]	; (655c <expr_level_3+0x60>)
    6546:	4798      	blx	r3
    return 0; // error
    6548:	2100      	movs	r1, #0
    654a:	e7e5      	b.n	6518 <expr_level_3+0x1c>
    654c:	0000640d 	.word	0x0000640d
    6550:	00006419 	.word	0x00006419
    6554:	00006449 	.word	0x00006449
    6558:	000153c9 	.word	0x000153c9
    655c:	00013049 	.word	0x00013049

00006560 <expr_level_2>:
{
    6560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = expr_level_3(e);
    6562:	4e13      	ldr	r6, [pc, #76]	; (65b0 <expr_level_2+0x50>)
{
    6564:	4605      	mov	r5, r0
    int result = expr_level_3(e);
    6566:	47b0      	blx	r6
    while (peek(e) == '*' || peek(e) == '/' || peek(e) == '%'){
    6568:	f240 4721 	movw	r7, #1057	; 0x421
    int result = expr_level_3(e);
    656c:	4604      	mov	r4, r0
    return **e;
    656e:	682a      	ldr	r2, [r5, #0]
    6570:	7811      	ldrb	r1, [r2, #0]
    while (peek(e) == '*' || peek(e) == '/' || peek(e) == '%'){
    6572:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
    6576:	b2db      	uxtb	r3, r3
    6578:	2b0a      	cmp	r3, #10
    657a:	d803      	bhi.n	6584 <expr_level_2+0x24>
    657c:	fa27 f303 	lsr.w	r3, r7, r3
    6580:	07db      	lsls	r3, r3, #31
    6582:	d401      	bmi.n	6588 <expr_level_2+0x28>
}
    6584:	4620      	mov	r0, r4
    6586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ++*e;
    6588:	3201      	adds	r2, #1
        if (peeked == '*'){
    658a:	292a      	cmp	r1, #42	; 0x2a
    ++*e;
    658c:	602a      	str	r2, [r5, #0]
            result *= expr_level_3(e);
    658e:	4628      	mov	r0, r5
        if (peeked == '*'){
    6590:	d102      	bne.n	6598 <expr_level_2+0x38>
            result *= expr_level_3(e);
    6592:	47b0      	blx	r6
    6594:	4344      	muls	r4, r0
    6596:	e7ea      	b.n	656e <expr_level_2+0xe>
        else if (peeked == '%'){
    6598:	2925      	cmp	r1, #37	; 0x25
    659a:	d105      	bne.n	65a8 <expr_level_2+0x48>
            result %= expr_level_3(e);
    659c:	47b0      	blx	r6
    659e:	fb94 f3f0 	sdiv	r3, r4, r0
    65a2:	fb03 4410 	mls	r4, r3, r0, r4
    65a6:	e7e2      	b.n	656e <expr_level_2+0xe>
            result /= expr_level_3(e);
    65a8:	47b0      	blx	r6
    65aa:	fb94 f4f0 	sdiv	r4, r4, r0
    65ae:	e7de      	b.n	656e <expr_level_2+0xe>
    65b0:	000064fd 	.word	0x000064fd

000065b4 <expr_level_1>:
{
    65b4:	b570      	push	{r4, r5, r6, lr}
    int result = expr_level_2(e);
    65b6:	4e0b      	ldr	r6, [pc, #44]	; (65e4 <expr_level_1+0x30>)
{
    65b8:	4605      	mov	r5, r0
    int result = expr_level_2(e);
    65ba:	47b0      	blx	r6
    65bc:	4604      	mov	r4, r0
    return **e;
    65be:	682b      	ldr	r3, [r5, #0]
    65c0:	781a      	ldrb	r2, [r3, #0]
    while (peek(e) == '+' || peek(e) == '-')
    65c2:	2a2b      	cmp	r2, #43	; 0x2b
    65c4:	d003      	beq.n	65ce <expr_level_1+0x1a>
    65c6:	2a2d      	cmp	r2, #45	; 0x2d
    65c8:	d001      	beq.n	65ce <expr_level_1+0x1a>
}
    65ca:	4620      	mov	r0, r4
    65cc:	bd70      	pop	{r4, r5, r6, pc}
    ++*e;
    65ce:	3301      	adds	r3, #1
        if (get(e) == '+')
    65d0:	2a2b      	cmp	r2, #43	; 0x2b
    ++*e;
    65d2:	602b      	str	r3, [r5, #0]
            result += expr_level_2(e);
    65d4:	4628      	mov	r0, r5
        if (get(e) == '+')
    65d6:	d102      	bne.n	65de <expr_level_1+0x2a>
            result += expr_level_2(e);
    65d8:	47b0      	blx	r6
    65da:	4404      	add	r4, r0
    65dc:	e7ef      	b.n	65be <expr_level_1+0xa>
            result -= expr_level_2(e);
    65de:	47b0      	blx	r6
    65e0:	1a24      	subs	r4, r4, r0
    65e2:	e7ec      	b.n	65be <expr_level_1+0xa>
    65e4:	00006561 	.word	0x00006561

000065e8 <insertTo>:


    return expression_inner(&str);
}

void insertTo(char* start,int length,char* that){
    65e8:	b570      	push	{r4, r5, r6, lr}
    65ea:	b09a      	sub	sp, #104	; 0x68
    65ec:	4604      	mov	r4, r0
    
    char ending[100] = {0};
    65ee:	4b0b      	ldr	r3, [pc, #44]	; (661c <insertTo+0x34>)
void insertTo(char* start,int length,char* that){
    65f0:	4615      	mov	r5, r2
    65f2:	460e      	mov	r6, r1
    char ending[100] = {0};
    65f4:	2260      	movs	r2, #96	; 0x60
    65f6:	2100      	movs	r1, #0
    65f8:	a802      	add	r0, sp, #8
    65fa:	9101      	str	r1, [sp, #4]
    65fc:	4798      	blx	r3
    
    //printf("insertTo: Hova: %s Milyen hosszú helyre: %d Mit: %s\n", start, length, that);
    
    sprintf(ending,"%s",start+length);
    65fe:	19a1      	adds	r1, r4, r6
    6600:	a801      	add	r0, sp, #4
    6602:	4e07      	ldr	r6, [pc, #28]	; (6620 <insertTo+0x38>)
    6604:	47b0      	blx	r6
    sprintf(start,"%s",that);
    6606:	4629      	mov	r1, r5
    6608:	4620      	mov	r0, r4
    660a:	47b0      	blx	r6
    sprintf(start+strlen(that),"%s",ending);
    660c:	4b05      	ldr	r3, [pc, #20]	; (6624 <insertTo+0x3c>)
    660e:	4628      	mov	r0, r5
    6610:	4798      	blx	r3
    6612:	a901      	add	r1, sp, #4
    6614:	4420      	add	r0, r4
    6616:	47b0      	blx	r6
}
    6618:	b01a      	add	sp, #104	; 0x68
    661a:	bd70      	pop	{r4, r5, r6, pc}
    661c:	00012cf5 	.word	0x00012cf5
    6620:	0001373d 	.word	0x0001373d
    6624:	00013801 	.word	0x00013801

00006628 <brack_len>:
        // START: SUKU
    
    int nyitCount = 0;
    int zarCount = 0;
    
    for(int i=0; i<maxLen; i++){
    6628:	2300      	movs	r3, #0
int brack_len(char* funcDesc,int maxLen){ //pl.: almafa(6*(2+2))*45
    662a:	b530      	push	{r4, r5, lr}
    int nyitCount = 0;
    662c:	461a      	mov	r2, r3
    int zarCount = 0;
    662e:	461c      	mov	r4, r3
    for(int i=0; i<maxLen; i++){
    6630:	428b      	cmp	r3, r1
    6632:	da0c      	bge.n	664e <brack_len+0x26>
        
        if (funcDesc[i] == '('){
    6634:	5cc5      	ldrb	r5, [r0, r3]
    6636:	2d28      	cmp	r5, #40	; 0x28
    6638:	f103 0301 	add.w	r3, r3, #1
    663c:	d101      	bne.n	6642 <brack_len+0x1a>
            
            nyitCount++;
    663e:	3201      	adds	r2, #1
    6640:	e7f6      	b.n	6630 <brack_len+0x8>
        }
        else if (funcDesc[i] == ')'){
    6642:	2d29      	cmp	r5, #41	; 0x29
    6644:	d1f4      	bne.n	6630 <brack_len+0x8>
            zarCount++;
    6646:	3401      	adds	r4, #1
            
            if (zarCount == nyitCount){
    6648:	42a2      	cmp	r2, r4
    664a:	d1f1      	bne.n	6630 <brack_len+0x8>
                return i+1;
    664c:	4618      	mov	r0, r3
            }
        }
        
    }
}
    664e:	bd30      	pop	{r4, r5, pc}

00006650 <calcSubFnc>:



void calcSubFnc(char* startposition){
    6650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char* fName = startposition;
    char* fNameEnd = strstr(fName,"(");
    6654:	4b85      	ldr	r3, [pc, #532]	; (686c <calcSubFnc+0x21c>)
    
    int max_offset = brack_len(fNameEnd,strlen(fNameEnd)) -2;
    6656:	f8df b270 	ldr.w	fp, [pc, #624]	; 68c8 <calcSubFnc+0x278>
    
    printf("Maxoffset: %d  ## \r\n", max_offset);
    
    int param_expr_results[10] = {0};
    665a:	f8df a228 	ldr.w	sl, [pc, #552]	; 6884 <calcSubFnc+0x234>
    printf("Maxoffset: %d  ## \r\n", max_offset);
    665e:	4d84      	ldr	r5, [pc, #528]	; (6870 <calcSubFnc+0x220>)
void calcSubFnc(char* startposition){
    6660:	b0ad      	sub	sp, #180	; 0xb4
    char* fNameEnd = strstr(fName,"(");
    6662:	2128      	movs	r1, #40	; 0x28
void calcSubFnc(char* startposition){
    6664:	4681      	mov	r9, r0
    char* fNameEnd = strstr(fName,"(");
    6666:	4798      	blx	r3
    6668:	4606      	mov	r6, r0
    int max_offset = brack_len(fNameEnd,strlen(fNameEnd)) -2;
    666a:	47d8      	blx	fp
    666c:	4b81      	ldr	r3, [pc, #516]	; (6874 <calcSubFnc+0x224>)
    666e:	4601      	mov	r1, r0
    6670:	4630      	mov	r0, r6
    6672:	4798      	blx	r3
    6674:	1e87      	subs	r7, r0, #2
    printf("Maxoffset: %d  ## \r\n", max_offset);
    6676:	4639      	mov	r1, r7
    6678:	487f      	ldr	r0, [pc, #508]	; (6878 <calcSubFnc+0x228>)
    667a:	47a8      	blx	r5
    int param_expr_results[10] = {0};
    667c:	2228      	movs	r2, #40	; 0x28
    667e:	2100      	movs	r1, #0
    6680:	a809      	add	r0, sp, #36	; 0x24
    6682:	47d0      	blx	sl
    char* comma = strstr(start, ",");
    int commaoffset = -1;
    
    
    
    for (int i=0; i<max_offset; i=i){
    6684:	e9cd ab01 	strd	sl, fp, [sp, #4]
    6688:	2400      	movs	r4, #0
    int param_expr_results_count = 0;
    668a:	46a0      	mov	r8, r4
    for (int i=0; i<max_offset; i=i){
    668c:	42bc      	cmp	r4, r7
    668e:	da32      	bge.n	66f6 <calcSubFnc+0xa6>
    6690:	eb06 0a04 	add.w	sl, r6, r4
    6694:	4652      	mov	r2, sl
    6696:	46a3      	mov	fp, r4
        
        int commaoffset = -1;
        
        for(int j=i; j<max_offset; j++){
            
            if (start[j] == ','){
    6698:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    669c:	292c      	cmp	r1, #44	; 0x2c
    669e:	465b      	mov	r3, fp
    66a0:	f10b 0b01 	add.w	fp, fp, #1
    66a4:	f000 80d1 	beq.w	684a <calcSubFnc+0x1fa>
        for(int j=i; j<max_offset; j++){
    66a8:	455f      	cmp	r7, fp
    66aa:	dcf5      	bgt.n	6698 <calcSubFnc+0x48>
 
        if (commaoffset==-1){
            
            printf("No more commas! \r\n");
            
            char param_expr[20] = {0};
    66ac:	f04f 0b00 	mov.w	fp, #0
            printf("No more commas! \r\n");
    66b0:	4b72      	ldr	r3, [pc, #456]	; (687c <calcSubFnc+0x22c>)
    66b2:	4873      	ldr	r0, [pc, #460]	; (6880 <calcSubFnc+0x230>)
    66b4:	4798      	blx	r3
            char param_expr[20] = {0};
    66b6:	4b73      	ldr	r3, [pc, #460]	; (6884 <calcSubFnc+0x234>)
    66b8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
    66bc:	2210      	movs	r2, #16
    66be:	4659      	mov	r1, fp
    66c0:	a814      	add	r0, sp, #80	; 0x50
    66c2:	4798      	blx	r3
            
            for (int j=0; j<(max_offset-i); j++){
    66c4:	1b3a      	subs	r2, r7, r4
    66c6:	465b      	mov	r3, fp
    66c8:	ac13      	add	r4, sp, #76	; 0x4c
    66ca:	e003      	b.n	66d4 <calcSubFnc+0x84>
                param_expr[j] = start[i+j];
    66cc:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
    66d0:	54e1      	strb	r1, [r4, r3]
            for (int j=0; j<(max_offset-i); j++){
    66d2:	3301      	adds	r3, #1
    66d4:	429a      	cmp	r2, r3
    66d6:	dcf9      	bgt.n	66cc <calcSubFnc+0x7c>
                
                
            }
            
            printf("Parameter: \"%s\", ", param_expr);
    66d8:	4621      	mov	r1, r4
    66da:	486b      	ldr	r0, [pc, #428]	; (6888 <calcSubFnc+0x238>)
    66dc:	47a8      	blx	r5
    int result = expr_level_0(e);
    66de:	4b6b      	ldr	r3, [pc, #428]	; (688c <calcSubFnc+0x23c>)
    66e0:	9406      	str	r4, [sp, #24]
    66e2:	a806      	add	r0, sp, #24
    66e4:	4798      	blx	r3
        
            
            param_expr_results[param_expr_results_count] = expression(param_expr);
    66e6:	ab2c      	add	r3, sp, #176	; 0xb0
    66e8:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    int result = expr_level_0(e);
    66ec:	4601      	mov	r1, r0
            param_expr_results[param_expr_results_count] = expression(param_expr);
    66ee:	f848 0c8c 	str.w	r0, [r8, #-140]
            
            
            printf("Result: \"%d\" \r\n", param_expr_results[param_expr_results_count]);
    66f2:	4867      	ldr	r0, [pc, #412]	; (6890 <calcSubFnc+0x240>)
    66f4:	47a8      	blx	r5
    
    
    // START: CALC BUILTIN


    char justName[10] = {0};
    66f6:	2300      	movs	r3, #0
    66f8:	aa06      	add	r2, sp, #24
    66fa:	e9cd 3306 	strd	r3, r3, [sp, #24]
    66fe:	f8ad 3020 	strh.w	r3, [sp, #32]
    
    for (int i=0; i<9; i++){
    6702:	f109 0008 	add.w	r0, r9, #8
    6706:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    670a:	4693      	mov	fp, r2
        
        if (fName[i] == '('){
    670c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    6710:	2928      	cmp	r1, #40	; 0x28
    6712:	d12e      	bne.n	6772 <calcSubFnc+0x122>
        }
        
    }

    
    if(strcmp(justName,"abs")==0){
    6714:	495f      	ldr	r1, [pc, #380]	; (6894 <calcSubFnc+0x244>)
    6716:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 68cc <calcSubFnc+0x27c>
    671a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 68d0 <calcSubFnc+0x280>
    671e:	4658      	mov	r0, fp
    6720:	47c0      	blx	r8
    6722:	ac13      	add	r4, sp, #76	; 0x4c
    6724:	b350      	cbz	r0, 677c <calcSubFnc+0x12c>
        resultOfFnc = abs(param_expr_results[0]);
    }
    else if(strcmp(justName,"six")==0){
    6726:	495c      	ldr	r1, [pc, #368]	; (6898 <calcSubFnc+0x248>)
    6728:	4658      	mov	r0, fp
    672a:	47c0      	blx	r8
    672c:	2800      	cmp	r0, #0
    672e:	f000 808a 	beq.w	6846 <calcSubFnc+0x1f6>
        resultOfFnc = 666666;
    }
    else if(strcmp(justName,"add")==0){
    6732:	495a      	ldr	r1, [pc, #360]	; (689c <calcSubFnc+0x24c>)
    6734:	4658      	mov	r0, fp
    6736:	47c0      	blx	r8
    6738:	2800      	cmp	r0, #0
    673a:	d138      	bne.n	67ae <calcSubFnc+0x15e>
        resultOfFnc = param_expr_results[0] + param_expr_results[1];
    673c:	e9dd 5309 	ldrd	r5, r3, [sp, #36]	; 0x24
    6740:	441d      	add	r5, r3
    6742:	e01f      	b.n	6784 <calcSubFnc+0x134>
                param_expr[j] = start[i+j];
    6744:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
    6748:	54a1      	strb	r1, [r4, r2]
            for (int j=0; j<commaoffset-i; j++){
    674a:	3201      	adds	r2, #1
    674c:	4293      	cmp	r3, r2
    674e:	dcf9      	bgt.n	6744 <calcSubFnc+0xf4>
            printf("Parameter: \"%s\" , ", param_expr);
    6750:	4621      	mov	r1, r4
    6752:	4853      	ldr	r0, [pc, #332]	; (68a0 <calcSubFnc+0x250>)
    6754:	47a8      	blx	r5
    int result = expr_level_0(e);
    6756:	4b4d      	ldr	r3, [pc, #308]	; (688c <calcSubFnc+0x23c>)
    6758:	9406      	str	r4, [sp, #24]
    675a:	a806      	add	r0, sp, #24
    675c:	4798      	blx	r3
            param_expr_results[param_expr_results_count] = expression(param_expr);
    675e:	ab09      	add	r3, sp, #36	; 0x24
    int result = expr_level_0(e);
    6760:	4601      	mov	r1, r0
            param_expr_results[param_expr_results_count] = expression(param_expr);
    6762:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
            printf("Result: \"%d\" \r\n", param_expr_results[param_expr_results_count]);
    6766:	484a      	ldr	r0, [pc, #296]	; (6890 <calcSubFnc+0x240>)
    6768:	47a8      	blx	r5
            param_expr_results_count++;
    676a:	f108 0801 	add.w	r8, r8, #1
    for (int i=0; i<max_offset; i=i){
    676e:	465c      	mov	r4, fp
    6770:	e78c      	b.n	668c <calcSubFnc+0x3c>
    for (int i=0; i<9; i++){
    6772:	4283      	cmp	r3, r0
            justName[i] = fName[i];
    6774:	f802 1b01 	strb.w	r1, [r2], #1
    for (int i=0; i<9; i++){
    6778:	d1c8      	bne.n	670c <calcSubFnc+0xbc>
    677a:	e7cb      	b.n	6714 <calcSubFnc+0xc4>
        resultOfFnc = abs(param_expr_results[0]);
    677c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    677e:	2d00      	cmp	r5, #0
    6780:	bfb8      	it	lt
    6782:	426d      	neglt	r5, r5
    
    //printf("resultOfFnc: %d\n", resultOfFnc);
    

    
    char buff[100] = {0};
    6784:	9b01      	ldr	r3, [sp, #4]
    6786:	2100      	movs	r1, #0
    6788:	2260      	movs	r2, #96	; 0x60
    678a:	a814      	add	r0, sp, #80	; 0x50
    678c:	9113      	str	r1, [sp, #76]	; 0x4c
    678e:	4798      	blx	r3
    
    sprintf(buff,"(%d)",resultOfFnc); //HEX para
    6790:	462a      	mov	r2, r5
    6792:	4944      	ldr	r1, [pc, #272]	; (68a4 <calcSubFnc+0x254>)
    6794:	4620      	mov	r0, r4
    6796:	47d0      	blx	sl
    
    // hova, milyen hosszan, mit
    insertTo(startposition,(fNameEnd-fName)+max_offset+2,buff);
    6798:	eba6 0109 	sub.w	r1, r6, r9
    679c:	4439      	add	r1, r7
    679e:	4b42      	ldr	r3, [pc, #264]	; (68a8 <calcSubFnc+0x258>)
    67a0:	4622      	mov	r2, r4
    67a2:	3102      	adds	r1, #2
    67a4:	4648      	mov	r0, r9
    67a6:	4798      	blx	r3
    
        
    //printf(" @@ debug: %s @@\n", startposition);
}
    67a8:	b02d      	add	sp, #180	; 0xb4
    67aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(strcmp(justName,"print")==0){
    67ae:	493f      	ldr	r1, [pc, #252]	; (68ac <calcSubFnc+0x25c>)
    67b0:	4658      	mov	r0, fp
    67b2:	47c0      	blx	r8
    67b4:	2800      	cmp	r0, #0
    67b6:	d137      	bne.n	6828 <calcSubFnc+0x1d8>
        char fmt_str[] = "%02x";
    67b8:	4b3d      	ldr	r3, [pc, #244]	; (68b0 <calcSubFnc+0x260>)
    67ba:	6818      	ldr	r0, [r3, #0]
    67bc:	791b      	ldrb	r3, [r3, #4]
    67be:	f88d 3014 	strb.w	r3, [sp, #20]
        if (param_expr_results[1]<=8){
    67c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        char fmt_str[] = "%02x";
    67c4:	9004      	str	r0, [sp, #16]
        if (param_expr_results[1]<=8){
    67c6:	2b08      	cmp	r3, #8
            fmt_str[2] = param_expr_results[1]+'0';
    67c8:	bfda      	itte	le
    67ca:	3330      	addle	r3, #48	; 0x30
    67cc:	b2db      	uxtble	r3, r3
            fmt_str[2] = 8+'0';
    67ce:	2338      	movgt	r3, #56	; 0x38
        uint8_t temp_array[20] = {0};
    67d0:	f04f 0800 	mov.w	r8, #0
    67d4:	f88d 3012 	strb.w	r3, [sp, #18]
    67d8:	2210      	movs	r2, #16
    67da:	9b01      	ldr	r3, [sp, #4]
    67dc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    67e0:	4641      	mov	r1, r8
    67e2:	a814      	add	r0, sp, #80	; 0x50
    67e4:	4798      	blx	r3
        sprintf(temp_array, fmt_str, param_expr_results[0]);
    67e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    67e8:	a904      	add	r1, sp, #16
    67ea:	462a      	mov	r2, r5
    67ec:	4620      	mov	r0, r4
    67ee:	47d0      	blx	sl
        temp_array_length = strlen(temp_array);
    67f0:	9b02      	ldr	r3, [sp, #8]
    67f2:	4620      	mov	r0, r4
    67f4:	4798      	blx	r3
            expr->output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-expr->output_string_length-temp_array_length+i] = temp_array[i];
    67f6:	4a2f      	ldr	r2, [pc, #188]	; (68b4 <calcSubFnc+0x264>)
    67f8:	f892 30ca 	ldrb.w	r3, [r2, #202]	; 0xca
    67fc:	b2d9      	uxtb	r1, r3
    67fe:	f1c3 03c9 	rsb	r3, r3, #201	; 0xc9
        temp_array_length = strlen(temp_array);
    6802:	fa5f fc80 	uxtb.w	ip, r0
        for (uint8_t i=0; i<temp_array_length; i++){
    6806:	1a18      	subs	r0, r3, r0
    6808:	4410      	add	r0, r2
    680a:	fa5f f388 	uxtb.w	r3, r8
    680e:	4563      	cmp	r3, ip
    6810:	d303      	bcc.n	681a <calcSubFnc+0x1ca>
        expr->output_string_length += temp_array_length;
    6812:	4461      	add	r1, ip
    6814:	f882 10ca 	strb.w	r1, [r2, #202]	; 0xca
        resultOfFnc = param_expr_results[0];
    6818:	e7b4      	b.n	6784 <calcSubFnc+0x134>
            expr->output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-expr->output_string_length-temp_array_length+i] = temp_array[i];
    681a:	f814 3008 	ldrb.w	r3, [r4, r8]
    681e:	f800 3b01 	strb.w	r3, [r0], #1
        for (uint8_t i=0; i<temp_array_length; i++){
    6822:	f108 0801 	add.w	r8, r8, #1
    6826:	e7f0      	b.n	680a <calcSubFnc+0x1ba>
    else if(strcmp(justName,"if")==0){
    6828:	4923      	ldr	r1, [pc, #140]	; (68b8 <calcSubFnc+0x268>)
    682a:	4658      	mov	r0, fp
    682c:	47c0      	blx	r8
    682e:	b928      	cbnz	r0, 683c <calcSubFnc+0x1ec>
        if (param_expr_results[0]){
    6830:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6832:	b10b      	cbz	r3, 6838 <calcSubFnc+0x1e8>
            resultOfFnc = param_expr_results[1];
    6834:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6836:	e7a5      	b.n	6784 <calcSubFnc+0x134>
            resultOfFnc = param_expr_results[2];
    6838:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    683a:	e7a3      	b.n	6784 <calcSubFnc+0x134>
        printf("Function \"%s\" not found!\n", justName);
    683c:	481f      	ldr	r0, [pc, #124]	; (68bc <calcSubFnc+0x26c>)
    683e:	4659      	mov	r1, fp
    6840:	47a8      	blx	r5
        resultOfFnc = 0;
    6842:	2500      	movs	r5, #0
    6844:	e79e      	b.n	6784 <calcSubFnc+0x134>
        resultOfFnc = 666666;
    6846:	4d1e      	ldr	r5, [pc, #120]	; (68c0 <calcSubFnc+0x270>)
    6848:	e79c      	b.n	6784 <calcSubFnc+0x134>
            printf("Commaoffset : %d: %d!  ", i, commaoffset);
    684a:	461a      	mov	r2, r3
    684c:	4621      	mov	r1, r4
    684e:	481d      	ldr	r0, [pc, #116]	; (68c4 <calcSubFnc+0x274>)
    6850:	9303      	str	r3, [sp, #12]
    6852:	47a8      	blx	r5
            char param_expr[20] = {0};
    6854:	2100      	movs	r1, #0
    6856:	4b0b      	ldr	r3, [pc, #44]	; (6884 <calcSubFnc+0x234>)
    6858:	9113      	str	r1, [sp, #76]	; 0x4c
    685a:	2210      	movs	r2, #16
    685c:	a814      	add	r0, sp, #80	; 0x50
    685e:	4798      	blx	r3
            for (int j=0; j<commaoffset-i; j++){
    6860:	9b03      	ldr	r3, [sp, #12]
    6862:	2100      	movs	r1, #0
    6864:	1b1b      	subs	r3, r3, r4
    6866:	460a      	mov	r2, r1
    6868:	ac13      	add	r4, sp, #76	; 0x4c
    686a:	e76f      	b.n	674c <calcSubFnc+0xfc>
    686c:	00013395 	.word	0x00013395
    6870:	00012f39 	.word	0x00012f39
    6874:	00006629 	.word	0x00006629
    6878:	000153e1 	.word	0x000153e1
    687c:	00013049 	.word	0x00013049
    6880:	0001545f 	.word	0x0001545f
    6884:	00012cf5 	.word	0x00012cf5
    6888:	000153f6 	.word	0x000153f6
    688c:	00006449 	.word	0x00006449
    6890:	00015408 	.word	0x00015408
    6894:	0001542b 	.word	0x0001542b
    6898:	0001542f 	.word	0x0001542f
    689c:	00015433 	.word	0x00015433
    68a0:	00015418 	.word	0x00015418
    68a4:	0001545a 	.word	0x0001545a
    68a8:	000065e9 	.word	0x000065e9
    68ac:	00015437 	.word	0x00015437
    68b0:	00015489 	.word	0x00015489
    68b4:	2000b1bc 	.word	0x2000b1bc
    68b8:	0001543d 	.word	0x0001543d
    68bc:	00015440 	.word	0x00015440
    68c0:	000a2c2a 	.word	0x000a2c2a
    68c4:	00015471 	.word	0x00015471
    68c8:	00013801 	.word	0x00013801
    68cc:	00013469 	.word	0x00013469
    68d0:	00013351 	.word	0x00013351

000068d4 <subst_all_variables_starting_from_the_back>:

void subst_all_variables_starting_from_the_back(char* expr_string, int len){
    68d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    
    int izgi = 0;
    int var_end_pos = -1;
    char var_name[10] = {0};
    68d8:	2300      	movs	r3, #0
void subst_all_variables_starting_from_the_back(char* expr_string, int len){
    68da:	b0a1      	sub	sp, #132	; 0x84
    char var_name[10] = {0};
    68dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
                        
                        var_name[var_end_pos-i] = expr_string[i];
                       i--;
                    }

                int var_name_len = strlen(var_name);
    68e0:	4e62      	ldr	r6, [pc, #392]	; (6a6c <subst_all_variables_starting_from_the_back+0x198>)
                }
                
                
                char* found = &expr_string[i+1]; // i+1 helyen lesz mindenképpen!
                
                char buff[100] = {0};
    68e2:	4f63      	ldr	r7, [pc, #396]	; (6a70 <subst_all_variables_starting_from_the_back+0x19c>)
                
                sprintf(buff,"%d",variable_value); // HEX para
    68e4:	f8df 8194 	ldr.w	r8, [pc, #404]	; 6a7c <subst_all_variables_starting_from_the_back+0x1a8>
    char var_name[10] = {0};
    68e8:	f8ad 300c 	strh.w	r3, [sp, #12]
void subst_all_variables_starting_from_the_back(char* expr_string, int len){
    68ec:	4605      	mov	r5, r0
    68ee:	460c      	mov	r4, r1
    int var_end_pos = -1;
    68f0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    for(int i= len; i>=0; i--){
    68f4:	2c00      	cmp	r4, #0
    68f6:	da02      	bge.n	68fe <subst_all_variables_starting_from_the_back+0x2a>
        
        
        
    }
    
}
    68f8:	b021      	add	sp, #132	; 0x84
    68fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (izgi == -1){
    68fe:	1c5a      	adds	r2, r3, #1
    6900:	d10d      	bne.n	691e <subst_all_variables_starting_from_the_back+0x4a>
            if ((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    6902:	5d2a      	ldrb	r2, [r5, r4]
    6904:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    6908:	2909      	cmp	r1, #9
    690a:	d906      	bls.n	691a <subst_all_variables_starting_from_the_back+0x46>
                (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    690c:	f022 0120 	bic.w	r1, r2, #32
    6910:	3941      	subs	r1, #65	; 0x41
    6912:	2919      	cmp	r1, #25
    6914:	d901      	bls.n	691a <subst_all_variables_starting_from_the_back+0x46>
                (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    6916:	2a5f      	cmp	r2, #95	; 0x5f
    6918:	d102      	bne.n	6920 <subst_all_variables_starting_from_the_back+0x4c>
    for(int i= len; i>=0; i--){
    691a:	3c01      	subs	r4, #1
    691c:	e7ea      	b.n	68f4 <subst_all_variables_starting_from_the_back+0x20>
        if (izgi == 0){
    691e:	b9cb      	cbnz	r3, 6954 <subst_all_variables_starting_from_the_back+0x80>
            if  ((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    6920:	5d2b      	ldrb	r3, [r5, r4]
    6922:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6926:	b2d2      	uxtb	r2, r2
    6928:	2a09      	cmp	r2, #9
    692a:	d906      	bls.n	693a <subst_all_variables_starting_from_the_back+0x66>
                (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    692c:	f023 0120 	bic.w	r1, r3, #32
    6930:	3941      	subs	r1, #65	; 0x41
    6932:	2919      	cmp	r1, #25
    6934:	d901      	bls.n	693a <subst_all_variables_starting_from_the_back+0x66>
                (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    6936:	2b5f      	cmp	r3, #95	; 0x5f
    6938:	d171      	bne.n	6a1e <subst_all_variables_starting_from_the_back+0x14a>
                if (expr_string[i+1] == '('){
    693a:	1929      	adds	r1, r5, r4
    693c:	7849      	ldrb	r1, [r1, #1]
    693e:	2928      	cmp	r1, #40	; 0x28
    6940:	f000 8085 	beq.w	6a4e <subst_all_variables_starting_from_the_back+0x17a>
                    if ((expr_string[i] >= '0' && expr_string[i] <= '9')){
    6944:	2a09      	cmp	r2, #9
                        var_name[var_end_pos-i] = expr_string[i];                     
    6946:	f88d 3004 	strb.w	r3, [sp, #4]
    694a:	46a1      	mov	r9, r4
                        izgi = 1;
    694c:	bf94      	ite	ls
    694e:	2301      	movls	r3, #1
                        izgi = 2;
    6950:	2302      	movhi	r3, #2
    6952:	e7e2      	b.n	691a <subst_all_variables_starting_from_the_back+0x46>
            if (((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    6954:	5d2a      	ldrb	r2, [r5, r4]
    6956:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    695a:	b2c9      	uxtb	r1, r1
    695c:	2909      	cmp	r1, #9
    695e:	d906      	bls.n	696e <subst_all_variables_starting_from_the_back+0x9a>
            (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    6960:	f022 0020 	bic.w	r0, r2, #32
    6964:	3841      	subs	r0, #65	; 0x41
    6966:	2819      	cmp	r0, #25
    6968:	d901      	bls.n	696e <subst_all_variables_starting_from_the_back+0x9a>
            (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    696a:	2a5f      	cmp	r2, #95	; 0x5f
    696c:	d172      	bne.n	6a54 <subst_all_variables_starting_from_the_back+0x180>
            (expr_string[i] == '_') )&& i!=0){
    696e:	b154      	cbz	r4, 6986 <subst_all_variables_starting_from_the_back+0xb2>
                var_name[var_end_pos-i] = expr_string[i];
    6970:	eba9 0004 	sub.w	r0, r9, r4
    6974:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
    6978:	4460      	add	r0, ip
                    izgi = 2;
    697a:	290a      	cmp	r1, #10
                var_name[var_end_pos-i] = expr_string[i];
    697c:	f800 2c7c 	strb.w	r2, [r0, #-124]
                    izgi = 2;
    6980:	bf28      	it	cs
    6982:	2302      	movcs	r3, #2
    6984:	e7c9      	b.n	691a <subst_all_variables_starting_from_the_back+0x46>
            else if (izgi==2){
    6986:	2b02      	cmp	r3, #2
    6988:	d166      	bne.n	6a58 <subst_all_variables_starting_from_the_back+0x184>
                if (((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    698a:	2909      	cmp	r1, #9
    698c:	d90a      	bls.n	69a4 <subst_all_variables_starting_from_the_back+0xd0>
    698e:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    6992:	2b19      	cmp	r3, #25
    6994:	d906      	bls.n	69a4 <subst_all_variables_starting_from_the_back+0xd0>
                    (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    6996:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    699a:	2b19      	cmp	r3, #25
    699c:	d901      	bls.n	69a2 <subst_all_variables_starting_from_the_back+0xce>
                    (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    699e:	2a5f      	cmp	r2, #95	; 0x5f
    69a0:	d106      	bne.n	69b0 <subst_all_variables_starting_from_the_back+0xdc>
                    (expr_string[i] == '_') )&& i==0){
    69a2:	b92c      	cbnz	r4, 69b0 <subst_all_variables_starting_from_the_back+0xdc>
                        var_name[var_end_pos-i] = expr_string[i];
    69a4:	ab20      	add	r3, sp, #128	; 0x80
    69a6:	444b      	add	r3, r9
                       i--;
    69a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
                        var_name[var_end_pos-i] = expr_string[i];
    69ac:	f803 2c7c 	strb.w	r2, [r3, #-124]
                int var_name_len = strlen(var_name);
    69b0:	a801      	add	r0, sp, #4
    69b2:	47b0      	blx	r6
                char var_name_good[10] = {0};
    69b4:	2300      	movs	r3, #0
    69b6:	e9cd 3304 	strd	r3, r3, [sp, #16]
    69ba:	aa01      	add	r2, sp, #4
                int var_name_len = strlen(var_name);
    69bc:	4682      	mov	sl, r0
                char var_name_good[10] = {0};
    69be:	4402      	add	r2, r0
    69c0:	f8ad 3018 	strh.w	r3, [sp, #24]
                for (int j = 0; j<var_name_len; j++){
    69c4:	a904      	add	r1, sp, #16
                    var_name_good[j+1] = 0;
    69c6:	4618      	mov	r0, r3
                for (int j = 0; j<var_name_len; j++){
    69c8:	4553      	cmp	r3, sl
    69ca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    69ce:	db28      	blt.n	6a22 <subst_all_variables_starting_from_the_back+0x14e>
                if (var_name_len == 2){
    69d0:	f1ba 0f02 	cmp.w	sl, #2
    69d4:	d138      	bne.n	6a48 <subst_all_variables_starting_from_the_back+0x174>
                    if (var_name_good[0] == 'E'){
    69d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    69da:	2b45      	cmp	r3, #69	; 0x45
    69dc:	d129      	bne.n	6a32 <subst_all_variables_starting_from_the_back+0x15e>
                        if (var_name_good[1] >= '0' && var_name_good[1] <= '9' ){
    69de:	f89d 3011 	ldrb.w	r3, [sp, #17]
    69e2:	3b30      	subs	r3, #48	; 0x30
    69e4:	b2da      	uxtb	r2, r3
    69e6:	2a09      	cmp	r2, #9
    69e8:	d82e      	bhi.n	6a48 <subst_all_variables_starting_from_the_back+0x174>
                            variable_value = e_param_list[index];
    69ea:	4a22      	ldr	r2, [pc, #136]	; (6a74 <subst_all_variables_starting_from_the_back+0x1a0>)
    69ec:	6812      	ldr	r2, [r2, #0]
                            variable_value = p_param_list[index];
    69ee:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
                char buff[100] = {0};
    69f2:	2300      	movs	r3, #0
    69f4:	4619      	mov	r1, r3
    69f6:	2260      	movs	r2, #96	; 0x60
    69f8:	a808      	add	r0, sp, #32
    69fa:	9307      	str	r3, [sp, #28]
    69fc:	47b8      	blx	r7
                sprintf(buff,"%d",variable_value); // HEX para
    69fe:	465a      	mov	r2, fp
    6a00:	4641      	mov	r1, r8
    6a02:	f8df b07c 	ldr.w	fp, [pc, #124]	; 6a80 <subst_all_variables_starting_from_the_back+0x1ac>
    6a06:	a807      	add	r0, sp, #28
    6a08:	47d8      	blx	fp
                char* found = &expr_string[i+1]; // i+1 helyen lesz mindenképpen!
    6a0a:	1c60      	adds	r0, r4, #1
                insertTo(found,var_name_len,buff);
    6a0c:	aa07      	add	r2, sp, #28
    6a0e:	4651      	mov	r1, sl
    6a10:	4428      	add	r0, r5
    6a12:	f8df a070 	ldr.w	sl, [pc, #112]	; 6a84 <subst_all_variables_starting_from_the_back+0x1b0>
    6a16:	47d0      	blx	sl
                printf("%s\n", expr_string);
    6a18:	4a17      	ldr	r2, [pc, #92]	; (6a78 <subst_all_variables_starting_from_the_back+0x1a4>)
    6a1a:	4628      	mov	r0, r5
    6a1c:	4790      	blx	r2
    6a1e:	2300      	movs	r3, #0
    6a20:	e77b      	b.n	691a <subst_all_variables_starting_from_the_back+0x46>
                    var_name_good[j] = var_name[var_name_len-1-j];
    6a22:	f892 c000 	ldrb.w	ip, [r2]
    6a26:	f881 c000 	strb.w	ip, [r1]
                    var_name_good[j+1] = 0;
    6a2a:	3301      	adds	r3, #1
    6a2c:	f801 0f01 	strb.w	r0, [r1, #1]!
                for (int j = 0; j<var_name_len; j++){
    6a30:	e7ca      	b.n	69c8 <subst_all_variables_starting_from_the_back+0xf4>
                    else if (var_name_good[0] == 'P'){
    6a32:	2b50      	cmp	r3, #80	; 0x50
    6a34:	d108      	bne.n	6a48 <subst_all_variables_starting_from_the_back+0x174>
                        if (var_name_good[1] >= '0' && var_name_good[1] <= '9' ){
    6a36:	f89d 3011 	ldrb.w	r3, [sp, #17]
    6a3a:	3b30      	subs	r3, #48	; 0x30
    6a3c:	b2da      	uxtb	r2, r3
    6a3e:	2a09      	cmp	r2, #9
    6a40:	d802      	bhi.n	6a48 <subst_all_variables_starting_from_the_back+0x174>
                            variable_value = p_param_list[index];
    6a42:	4a0c      	ldr	r2, [pc, #48]	; (6a74 <subst_all_variables_starting_from_the_back+0x1a0>)
    6a44:	6852      	ldr	r2, [r2, #4]
    6a46:	e7d2      	b.n	69ee <subst_all_variables_starting_from_the_back+0x11a>
                int variable_value = 1;
    6a48:	f04f 0b01 	mov.w	fp, #1
    6a4c:	e7d1      	b.n	69f2 <subst_all_variables_starting_from_the_back+0x11e>
                    izgi = -1;
    6a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a52:	e762      	b.n	691a <subst_all_variables_starting_from_the_back+0x46>
            else if (izgi==2){
    6a54:	2b02      	cmp	r3, #2
    6a56:	d09e      	beq.n	6996 <subst_all_variables_starting_from_the_back+0xc2>
                int variable_value = 1;
    6a58:	2300      	movs	r3, #0
    6a5a:	aa01      	add	r2, sp, #4
                    var_name[j] = 0;
    6a5c:	4619      	mov	r1, r3
                for (int j = 0; j<10; j++){
    6a5e:	3301      	adds	r3, #1
    6a60:	2b0a      	cmp	r3, #10
                    var_name[j] = 0;
    6a62:	f802 1b01 	strb.w	r1, [r2], #1
                for (int j = 0; j<10; j++){
    6a66:	d1fa      	bne.n	6a5e <subst_all_variables_starting_from_the_back+0x18a>
    6a68:	e7d9      	b.n	6a1e <subst_all_variables_starting_from_the_back+0x14a>
    6a6a:	bf00      	nop
    6a6c:	00013801 	.word	0x00013801
    6a70:	00012cf5 	.word	0x00012cf5
    6a74:	200005ec 	.word	0x200005ec
    6a78:	00013049 	.word	0x00013049
    6a7c:	00015687 	.word	0x00015687
    6a80:	00013351 	.word	0x00013351
    6a84:	000065e9 	.word	0x000065e9

00006a88 <subst_all_functions_starting_from_the_back>:


void subst_all_functions_starting_from_the_back(char* expr_string, int len){
    6a88:	b570      	push	{r4, r5, r6, lr}
    
    int izgi = 0;
    
    printf("Subst Fncs\n");
    6a8a:	4b1b      	ldr	r3, [pc, #108]	; (6af8 <subst_all_functions_starting_from_the_back+0x70>)
                    
                }
                
                
                if (i==0 && izgi==3){ // start of expr string special case
                    calcSubFnc(&expr_string[i]);
    6a8c:	4e1b      	ldr	r6, [pc, #108]	; (6afc <subst_all_functions_starting_from_the_back+0x74>)
void subst_all_functions_starting_from_the_back(char* expr_string, int len){
    6a8e:	4605      	mov	r5, r0
    printf("Subst Fncs\n");
    6a90:	481b      	ldr	r0, [pc, #108]	; (6b00 <subst_all_functions_starting_from_the_back+0x78>)
void subst_all_functions_starting_from_the_back(char* expr_string, int len){
    6a92:	460c      	mov	r4, r1
    printf("Subst Fncs\n");
    6a94:	4798      	blx	r3
    int izgi = 0;
    6a96:	2300      	movs	r3, #0
    for(int i= len; i>=0; i--){
    6a98:	2c00      	cmp	r4, #0
    6a9a:	da00      	bge.n	6a9e <subst_all_functions_starting_from_the_back+0x16>
            }
            
        }
    }
    
}
    6a9c:	bd70      	pop	{r4, r5, r6, pc}
        if (izgi == 0){
    6a9e:	b933      	cbnz	r3, 6aae <subst_all_functions_starting_from_the_back+0x26>
            if (expr_string[i] == '(' ){
    6aa0:	5d2b      	ldrb	r3, [r5, r4]
    6aa2:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    6aa6:	4253      	negs	r3, r2
    6aa8:	4153      	adcs	r3, r2
    for(int i= len; i>=0; i--){
    6aaa:	3c01      	subs	r4, #1
    6aac:	e7f4      	b.n	6a98 <subst_all_functions_starting_from_the_back+0x10>
        else if (izgi == 1 || izgi == 2 || izgi == 3){
    6aae:	1e5a      	subs	r2, r3, #1
    6ab0:	2a02      	cmp	r2, #2
    6ab2:	d8fa      	bhi.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
            if ((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    6ab4:	5d2a      	ldrb	r2, [r5, r4]
    6ab6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    6aba:	2909      	cmp	r1, #9
    6abc:	eb04 0005 	add.w	r0, r4, r5
    6ac0:	d916      	bls.n	6af0 <subst_all_functions_starting_from_the_back+0x68>
            (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    6ac2:	f022 0120 	bic.w	r1, r2, #32
    6ac6:	3941      	subs	r1, #65	; 0x41
    6ac8:	2919      	cmp	r1, #25
    6aca:	d901      	bls.n	6ad0 <subst_all_functions_starting_from_the_back+0x48>
            (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    6acc:	2a5f      	cmp	r2, #95	; 0x5f
    6ace:	d108      	bne.n	6ae2 <subst_all_functions_starting_from_the_back+0x5a>
                if (i==0 && izgi==3){ // start of expr string special case
    6ad0:	b92c      	cbnz	r4, 6ade <subst_all_functions_starting_from_the_back+0x56>
    6ad2:	e003      	b.n	6adc <subst_all_functions_starting_from_the_back+0x54>
    6ad4:	2c00      	cmp	r4, #0
    6ad6:	d1e8      	bne.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
    6ad8:	2b03      	cmp	r3, #3
    6ada:	d10b      	bne.n	6af4 <subst_all_functions_starting_from_the_back+0x6c>
                    calcSubFnc(&expr_string[i]);
    6adc:	47b0      	blx	r6
                    izgi = 3;
    6ade:	2303      	movs	r3, #3
    6ae0:	e7e3      	b.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
            else if (izgi==3){
    6ae2:	2b03      	cmp	r3, #3
    6ae4:	d102      	bne.n	6aec <subst_all_functions_starting_from_the_back+0x64>
                calcSubFnc(&expr_string[i+1]);
    6ae6:	1c68      	adds	r0, r5, #1
    6ae8:	4420      	add	r0, r4
    6aea:	47b0      	blx	r6
                izgi = 0;
    6aec:	2300      	movs	r3, #0
    6aee:	e7dc      	b.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
                if (izgi==1){
    6af0:	2b01      	cmp	r3, #1
    6af2:	d1ef      	bne.n	6ad4 <subst_all_functions_starting_from_the_back+0x4c>
                if (i==0 && izgi==3){ // start of expr string special case
    6af4:	2302      	movs	r3, #2
    6af6:	e7d8      	b.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
    6af8:	00013049 	.word	0x00013049
    6afc:	00006651 	.word	0x00006651
    6b00:	0001548e 	.word	0x0001548e

00006b04 <grid_expr_evaluate>:
grid_expr_evaluate(struct grid_expr_model* expr, char* input_str, uint8_t input_length){
    6b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    grid_expr_clear_input(expr);
    6b06:	4b15      	ldr	r3, [pc, #84]	; (6b5c <grid_expr_evaluate+0x58>)
grid_expr_evaluate(struct grid_expr_model* expr, char* input_str, uint8_t input_length){
    6b08:	4604      	mov	r4, r0
    6b0a:	460d      	mov	r5, r1
    6b0c:	4611      	mov	r1, r2
    grid_expr_clear_input(expr);
    6b0e:	4798      	blx	r3
    grid_expr_clear_output(expr);
    6b10:	4b13      	ldr	r3, [pc, #76]	; (6b60 <grid_expr_evaluate+0x5c>)
    6b12:	4620      	mov	r0, r4
    6b14:	4798      	blx	r3
    for (uint32_t i=0; i<input_length; i++){
    6b16:	2300      	movs	r3, #0
    6b18:	4299      	cmp	r1, r3
    6b1a:	d81a      	bhi.n	6b52 <grid_expr_evaluate+0x4e>
    expr->input_string_length = input_length;
    6b1c:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    subst_all_variables_starting_from_the_back(expr->input_string, expr->input_string_length);    
    6b20:	4b10      	ldr	r3, [pc, #64]	; (6b64 <grid_expr_evaluate+0x60>)
    printf("Result: %d\r\n", result);
    6b22:	4d11      	ldr	r5, [pc, #68]	; (6b68 <grid_expr_evaluate+0x64>)
    subst_all_variables_starting_from_the_back(expr->input_string, expr->input_string_length);    
    6b24:	4620      	mov	r0, r4
    6b26:	4798      	blx	r3
    subst_all_functions_starting_from_the_back(expr->input_string, expr->input_string_length);
    6b28:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    6b2c:	4b0f      	ldr	r3, [pc, #60]	; (6b6c <grid_expr_evaluate+0x68>)
    6b2e:	4620      	mov	r0, r4
    6b30:	4798      	blx	r3
    int result = expr_level_0(e);
    6b32:	4b0f      	ldr	r3, [pc, #60]	; (6b70 <grid_expr_evaluate+0x6c>)
    6b34:	9401      	str	r4, [sp, #4]
    6b36:	a801      	add	r0, sp, #4
    6b38:	4798      	blx	r3
    6b3a:	4601      	mov	r1, r0
    printf("Result: %d\r\n", result);
    6b3c:	480d      	ldr	r0, [pc, #52]	; (6b74 <grid_expr_evaluate+0x70>)
    6b3e:	47a8      	blx	r5
    printf("Result String: \"%s\"\r\n", &expr->output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-expr->output_string_length]);
    6b40:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    6b44:	480c      	ldr	r0, [pc, #48]	; (6b78 <grid_expr_evaluate+0x74>)
    6b46:	f1c1 01c9 	rsb	r1, r1, #201	; 0xc9
    6b4a:	4421      	add	r1, r4
    6b4c:	47a8      	blx	r5
}
    6b4e:	b003      	add	sp, #12
    6b50:	bd30      	pop	{r4, r5, pc}
        expr->input_string[i] = input_str[i];
    6b52:	5cea      	ldrb	r2, [r5, r3]
    6b54:	54e2      	strb	r2, [r4, r3]
    for (uint32_t i=0; i<input_length; i++){
    6b56:	3301      	adds	r3, #1
    6b58:	e7de      	b.n	6b18 <grid_expr_evaluate+0x14>
    6b5a:	bf00      	nop
    6b5c:	000063c5 	.word	0x000063c5
    6b60:	000063d9 	.word	0x000063d9
    6b64:	000068d5 	.word	0x000068d5
    6b68:	00012f39 	.word	0x00012f39
    6b6c:	00006a89 	.word	0x00006a89
    6b70:	00006449 	.word	0x00006449
    6b74:	00015499 	.word	0x00015499
    6b78:	000154a6 	.word	0x000154a6

00006b7c <grid_led_lowlevel_hardware_transfer_complete_cb>:


void grid_led_lowlevel_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    6b7c:	4b01      	ldr	r3, [pc, #4]	; (6b84 <grid_led_lowlevel_hardware_transfer_complete_cb+0x8>)
    6b7e:	2201      	movs	r2, #1
    6b80:	701a      	strb	r2, [r3, #0]
	
	
}
    6b82:	4770      	bx	lr
    6b84:	200010e8 	.word	0x200010e8

00006b88 <grid_led_lowlevel_set_color>:
uint8_t grid_led_lowlevel_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    6b88:	b510      	push	{r4, lr}
	if (led_index<mod->led_number){
    6b8a:	7844      	ldrb	r4, [r0, #1]
    6b8c:	428c      	cmp	r4, r1
    6b8e:	d91c      	bls.n	6bca <grid_led_lowlevel_set_color+0x42>
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    6b90:	2bff      	cmp	r3, #255	; 0xff
    6b92:	f04f 040c 	mov.w	r4, #12
    6b96:	fb04 f101 	mul.w	r1, r4, r1
    6b9a:	bf28      	it	cs
    6b9c:	23ff      	movcs	r3, #255	; 0xff
    6b9e:	4c0c      	ldr	r4, [pc, #48]	; (6bd0 <grid_led_lowlevel_set_color+0x48>)
    6ba0:	68c0      	ldr	r0, [r0, #12]
    6ba2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    6ba6:	5043      	str	r3, [r0, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    6ba8:	2aff      	cmp	r2, #255	; 0xff
    6baa:	bf28      	it	cs
    6bac:	22ff      	movcs	r2, #255	; 0xff
    6bae:	4401      	add	r1, r0
    6bb0:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    6bb4:	604b      	str	r3, [r1, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    6bb6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6bba:	2bff      	cmp	r3, #255	; 0xff
    6bbc:	bf28      	it	cs
    6bbe:	23ff      	movcs	r3, #255	; 0xff
		return 0;
    6bc0:	2000      	movs	r0, #0
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    6bc2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    6bc6:	608b      	str	r3, [r1, #8]
}
    6bc8:	bd10      	pop	{r4, pc}
		return -1;		
    6bca:	20ff      	movs	r0, #255	; 0xff
    6bcc:	e7fc      	b.n	6bc8 <grid_led_lowlevel_set_color+0x40>
    6bce:	bf00      	nop
    6bd0:	20007dfc 	.word	0x20007dfc

00006bd4 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    6bd4:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    6bd6:	4c06      	ldr	r4, [pc, #24]	; (6bf0 <grid_led_hardware_init+0x1c>)
    6bd8:	4b06      	ldr	r3, [pc, #24]	; (6bf4 <grid_led_hardware_init+0x20>)
    6bda:	f100 0114 	add.w	r1, r0, #20
    6bde:	4620      	mov	r0, r4
    6be0:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_lowlevel_hardware_transfer_complete_cb);
    6be2:	4620      	mov	r0, r4
    6be4:	4a04      	ldr	r2, [pc, #16]	; (6bf8 <grid_led_hardware_init+0x24>)
    6be6:	4b05      	ldr	r3, [pc, #20]	; (6bfc <grid_led_hardware_init+0x28>)
	

		
}
    6be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_lowlevel_hardware_transfer_complete_cb);
    6bec:	2100      	movs	r1, #0
    6bee:	4718      	bx	r3
    6bf0:	20014cb4 	.word	0x20014cb4
    6bf4:	0000b735 	.word	0x0000b735
    6bf8:	00006b7d 	.word	0x00006b7d
    6bfc:	0000b701 	.word	0x0000b701

00006c00 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    6c00:	7840      	ldrb	r0, [r0, #1]
    6c02:	4770      	bx	lr

00006c04 <grid_led_tick>:

/** ================== ANIMATION ==================  */


void grid_led_tick(struct grid_led_model* mod){
    6c04:	b5f0      	push	{r4, r5, r6, r7, lr}
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    6c06:	7846      	ldrb	r6, [r0, #1]
    6c08:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    6c0c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6c10:	2400      	movs	r4, #0
    6c12:	270d      	movs	r7, #13
    6c14:	b2e3      	uxtb	r3, r4
    6c16:	429e      	cmp	r6, r3
    6c18:	d800      	bhi.n	6c1c <grid_led_tick+0x18>
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
		}	
	}
	/** END */
	
}
    6c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c1c:	6903      	ldr	r3, [r0, #16]
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    6c1e:	2103      	movs	r1, #3
    6c20:	fb07 3304 	mla	r3, r7, r4, r3
    6c24:	7add      	ldrb	r5, [r3, #11]
    6c26:	f893 c00c 	ldrb.w	ip, [r3, #12]
    6c2a:	3901      	subs	r1, #1
    6c2c:	4465      	add	r5, ip
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    6c2e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    6c32:	72dd      	strb	r5, [r3, #11]
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    6c34:	4413      	add	r3, r2
    6c36:	d1f5      	bne.n	6c24 <grid_led_tick+0x20>
	for (uint8_t j=0; j<mod->led_number; j++){
    6c38:	3401      	adds	r4, #1
    6c3a:	e7eb      	b.n	6c14 <grid_led_tick+0x10>

00006c3c <grid_led_set_min>:
	grid_led_set_max(mod, num, layer, r, g, b);

}


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6c3c:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    6c3e:	7844      	ldrb	r4, [r0, #1]
    6c40:	6900      	ldr	r0, [r0, #16]
    6c42:	fb04 1202 	mla	r2, r4, r2, r1
    6c46:	240d      	movs	r4, #13
    6c48:	4362      	muls	r2, r4
    6c4a:	1881      	adds	r1, r0, r2
    6c4c:	5483      	strb	r3, [r0, r2]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    6c4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6c52:	704b      	strb	r3, [r1, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    6c54:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c58:	708b      	strb	r3, [r1, #2]
}
    6c5a:	bd10      	pop	{r4, pc}

00006c5c <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6c5c:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    6c5e:	7844      	ldrb	r4, [r0, #1]
    6c60:	fb04 1102 	mla	r1, r4, r2, r1
    6c64:	6902      	ldr	r2, [r0, #16]
    6c66:	200d      	movs	r0, #13
    6c68:	fb00 2201 	mla	r2, r0, r1, r2
    6c6c:	70d3      	strb	r3, [r2, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    6c6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6c72:	7113      	strb	r3, [r2, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    6c74:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c78:	7153      	strb	r3, [r2, #5]
}
    6c7a:	bd10      	pop	{r4, pc}

00006c7c <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6c7c:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    6c7e:	7844      	ldrb	r4, [r0, #1]
    6c80:	fb04 1102 	mla	r1, r4, r2, r1
    6c84:	6902      	ldr	r2, [r0, #16]
    6c86:	200d      	movs	r0, #13
    6c88:	fb00 2201 	mla	r2, r0, r1, r2
    6c8c:	7193      	strb	r3, [r2, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    6c8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6c92:	71d3      	strb	r3, [r2, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    6c94:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c98:	7213      	strb	r3, [r2, #8]
}
    6c9a:	bd10      	pop	{r4, pc}

00006c9c <grid_led_set_color>:
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6c9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6ca0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    6ca4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    6ca8:	f8df a058 	ldr.w	sl, [pc, #88]	; 6d04 <grid_led_set_color+0x68>
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6cac:	461c      	mov	r4, r3
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    6cae:	2314      	movs	r3, #20
    6cb0:	fbb9 fcf3 	udiv	ip, r9, r3
    6cb4:	f8cd c004 	str.w	ip, [sp, #4]
    6cb8:	fbb8 fcf3 	udiv	ip, r8, r3
    6cbc:	fbb4 f3f3 	udiv	r3, r4, r3
    6cc0:	f8cd c000 	str.w	ip, [sp]
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6cc4:	4605      	mov	r5, r0
    6cc6:	460e      	mov	r6, r1
    6cc8:	4617      	mov	r7, r2
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    6cca:	47d0      	blx	sl
	grid_led_set_mid(mod, num, layer, r/2, g/2, b/2);
    6ccc:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6cd0:	9301      	str	r3, [sp, #4]
    6cd2:	ea4f 0358 	mov.w	r3, r8, lsr #1
    6cd6:	9300      	str	r3, [sp, #0]
    6cd8:	463a      	mov	r2, r7
    6cda:	0863      	lsrs	r3, r4, #1
    6cdc:	4631      	mov	r1, r6
    6cde:	4628      	mov	r0, r5
    6ce0:	f8df a024 	ldr.w	sl, [pc, #36]	; 6d08 <grid_led_set_color+0x6c>
    6ce4:	47d0      	blx	sl
	grid_led_set_max(mod, num, layer, r, g, b);
    6ce6:	4623      	mov	r3, r4
    6ce8:	4c05      	ldr	r4, [pc, #20]	; (6d00 <grid_led_set_color+0x64>)
    6cea:	463a      	mov	r2, r7
    6cec:	4631      	mov	r1, r6
    6cee:	4628      	mov	r0, r5
    6cf0:	46a4      	mov	ip, r4
    6cf2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
}
    6cf6:	b002      	add	sp, #8
    6cf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_led_set_max(mod, num, layer, r, g, b);
    6cfc:	4760      	bx	ip
    6cfe:	bf00      	nop
    6d00:	00006c7d 	.word	0x00006c7d
    6d04:	00006c3d 	.word	0x00006c3d
    6d08:	00006c5d 	.word	0x00006c5d

00006d0c <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    6d0c:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    6d0e:	7844      	ldrb	r4, [r0, #1]
    6d10:	fb04 1102 	mla	r1, r4, r2, r1
    6d14:	6902      	ldr	r2, [r0, #16]
    6d16:	200d      	movs	r0, #13
    6d18:	fb00 2101 	mla	r1, r0, r1, r2
    6d1c:	72cb      	strb	r3, [r1, #11]
}
    6d1e:	bd10      	pop	{r4, pc}

00006d20 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    6d20:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    6d22:	7844      	ldrb	r4, [r0, #1]
    6d24:	fb04 1102 	mla	r1, r4, r2, r1
    6d28:	6902      	ldr	r2, [r0, #16]
    6d2a:	200d      	movs	r0, #13
    6d2c:	fb00 2101 	mla	r1, r0, r1, r2
    6d30:	730b      	strb	r3, [r1, #12]
}
    6d32:	bd10      	pop	{r4, pc}

00006d34 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    6d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d38:	4604      	mov	r4, r0
	mod->led_number = length;
    6d3a:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    6d3c:	b2cd      	uxtb	r5, r1
    6d3e:	200c      	movs	r0, #12
    6d40:	4368      	muls	r0, r5
    6d42:	3090      	adds	r0, #144	; 0x90
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6d44:	4f4c      	ldr	r7, [pc, #304]	; (6e78 <grid_led_buffer_init+0x144>)
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    6d46:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6d48:	47b8      	blx	r7
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    6d4a:	f100 0390 	add.w	r3, r0, #144	; 0x90
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6d4e:	60a0      	str	r0, [r4, #8]
    6d50:	4606      	mov	r6, r0
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    6d52:	2027      	movs	r0, #39	; 0x27
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    6d54:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    6d56:	4368      	muls	r0, r5
    6d58:	47b8      	blx	r7
    6d5a:	6120      	str	r0, [r4, #16]
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    6d5c:	b106      	cbz	r6, 6d60 <grid_led_buffer_init+0x2c>
    6d5e:	b900      	cbnz	r0, 6d62 <grid_led_buffer_init+0x2e>
		while(1){
    6d60:	e7fe      	b.n	6d60 <grid_led_buffer_init+0x2c>
    6d62:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    6d64:	4619      	mov	r1, r3
    6d66:	68a2      	ldr	r2, [r4, #8]
    6d68:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    6d6a:	3301      	adds	r3, #1
    6d6c:	2b90      	cmp	r3, #144	; 0x90
    6d6e:	d1fa      	bne.n	6d66 <grid_led_buffer_init+0x32>
	for (uint32_t i = 0; i<mod->led_number; i++){
    6d70:	2500      	movs	r5, #0
		grid_led_lowlevel_set_color(mod,i,0,0,0);
    6d72:	4f42      	ldr	r7, [pc, #264]	; (6e7c <grid_led_buffer_init+0x148>)
    6d74:	462e      	mov	r6, r5
	for (uint32_t i = 0; i<mod->led_number; i++){
    6d76:	7863      	ldrb	r3, [r4, #1]
    6d78:	429d      	cmp	r5, r3
    6d7a:	d30c      	bcc.n	6d96 <grid_led_buffer_init+0x62>
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    6d7c:	4d40      	ldr	r5, [pc, #256]	; (6e80 <grid_led_buffer_init+0x14c>)
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    6d7e:	4e41      	ldr	r6, [pc, #260]	; (6e84 <grid_led_buffer_init+0x150>)
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    6d80:	4f41      	ldr	r7, [pc, #260]	; (6e88 <grid_led_buffer_init+0x154>)
    6d82:	f04f 0b00 	mov.w	fp, #0
	for(uint8_t i = 0; i<mod->led_number; i++){
    6d86:	7863      	ldrb	r3, [r4, #1]
    6d88:	fa5f fa8b 	uxtb.w	sl, fp
    6d8c:	4553      	cmp	r3, sl
    6d8e:	d80a      	bhi.n	6da6 <grid_led_buffer_init+0x72>
}
    6d90:	b003      	add	sp, #12
    6d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_led_lowlevel_set_color(mod,i,0,0,0);
    6d96:	2300      	movs	r3, #0
    6d98:	4629      	mov	r1, r5
    6d9a:	9600      	str	r6, [sp, #0]
    6d9c:	461a      	mov	r2, r3
    6d9e:	4620      	mov	r0, r4
    6da0:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    6da2:	3501      	adds	r5, #1
    6da4:	e7e7      	b.n	6d76 <grid_led_buffer_init+0x42>
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    6da6:	2300      	movs	r3, #0
    6da8:	e9cd 3300 	strd	r3, r3, [sp]
    6dac:	2201      	movs	r2, #1
    6dae:	4651      	mov	r1, sl
    6db0:	4620      	mov	r0, r4
    6db2:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    6db4:	2300      	movs	r3, #0
    6db6:	227f      	movs	r2, #127	; 0x7f
    6db8:	e9cd 2300 	strd	r2, r3, [sp]
    6dbc:	4651      	mov	r1, sl
    6dbe:	2201      	movs	r2, #1
    6dc0:	4620      	mov	r0, r4
    6dc2:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    6dc4:	2300      	movs	r3, #0
    6dc6:	22ff      	movs	r2, #255	; 0xff
    6dc8:	e9cd 2300 	strd	r2, r3, [sp]
    6dcc:	4651      	mov	r1, sl
    6dce:	2201      	movs	r2, #1
    6dd0:	4620      	mov	r0, r4
    6dd2:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    6dd4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6e8c <grid_led_buffer_init+0x158>
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    6dd8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6e90 <grid_led_buffer_init+0x15c>
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    6ddc:	2300      	movs	r3, #0
    6dde:	2201      	movs	r2, #1
    6de0:	4651      	mov	r1, sl
    6de2:	4620      	mov	r0, r4
    6de4:	47c8      	blx	r9
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    6de6:	2300      	movs	r3, #0
    6de8:	2201      	movs	r2, #1
    6dea:	4651      	mov	r1, sl
    6dec:	4620      	mov	r0, r4
    6dee:	47c0      	blx	r8
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    6df0:	2300      	movs	r3, #0
    6df2:	e9cd 3300 	strd	r3, r3, [sp]
    6df6:	2202      	movs	r2, #2
    6df8:	4651      	mov	r1, sl
    6dfa:	4620      	mov	r0, r4
    6dfc:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    6dfe:	2300      	movs	r3, #0
    6e00:	227f      	movs	r2, #127	; 0x7f
    6e02:	e9cd 2300 	strd	r2, r3, [sp]
    6e06:	4651      	mov	r1, sl
    6e08:	2202      	movs	r2, #2
    6e0a:	4620      	mov	r0, r4
    6e0c:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    6e0e:	2300      	movs	r3, #0
    6e10:	22ff      	movs	r2, #255	; 0xff
    6e12:	e9cd 2300 	strd	r2, r3, [sp]
    6e16:	4651      	mov	r1, sl
    6e18:	2202      	movs	r2, #2
    6e1a:	4620      	mov	r0, r4
    6e1c:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    6e1e:	2300      	movs	r3, #0
    6e20:	2202      	movs	r2, #2
    6e22:	4651      	mov	r1, sl
    6e24:	4620      	mov	r0, r4
    6e26:	47c8      	blx	r9
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    6e28:	2300      	movs	r3, #0
    6e2a:	2202      	movs	r2, #2
    6e2c:	4651      	mov	r1, sl
    6e2e:	4620      	mov	r0, r4
    6e30:	47c0      	blx	r8
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6e32:	2300      	movs	r3, #0
    6e34:	461a      	mov	r2, r3
    6e36:	e9cd 3300 	strd	r3, r3, [sp]
    6e3a:	4651      	mov	r1, sl
    6e3c:	4620      	mov	r0, r4
    6e3e:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6e40:	2300      	movs	r3, #0
    6e42:	461a      	mov	r2, r3
    6e44:	e9cd 3300 	strd	r3, r3, [sp]
    6e48:	4651      	mov	r1, sl
    6e4a:	4620      	mov	r0, r4
    6e4c:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6e4e:	2300      	movs	r3, #0
    6e50:	461a      	mov	r2, r3
    6e52:	e9cd 3300 	strd	r3, r3, [sp]
    6e56:	4651      	mov	r1, sl
    6e58:	4620      	mov	r0, r4
    6e5a:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    6e5c:	2300      	movs	r3, #0
    6e5e:	461a      	mov	r2, r3
    6e60:	4651      	mov	r1, sl
    6e62:	4620      	mov	r0, r4
    6e64:	47c8      	blx	r9
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    6e66:	2300      	movs	r3, #0
    6e68:	461a      	mov	r2, r3
    6e6a:	4651      	mov	r1, sl
    6e6c:	4620      	mov	r0, r4
    6e6e:	47c0      	blx	r8
	for(uint8_t i = 0; i<mod->led_number; i++){
    6e70:	f10b 0b01 	add.w	fp, fp, #1
    6e74:	e787      	b.n	6d86 <grid_led_buffer_init+0x52>
    6e76:	bf00      	nop
    6e78:	00012ba1 	.word	0x00012ba1
    6e7c:	00006b89 	.word	0x00006b89
    6e80:	00006c3d 	.word	0x00006c3d
    6e84:	00006c5d 	.word	0x00006c5d
    6e88:	00006c7d 	.word	0x00006c7d
    6e8c:	00006d21 	.word	0x00006d21
    6e90:	00006d0d 	.word	0x00006d0d

00006e94 <grid_led_lowlevel_init>:
uint8_t grid_led_lowlevel_init(struct grid_led_model* mod, uint8_t num){
    6e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e96:	4e29      	ldr	r6, [pc, #164]	; (6f3c <grid_led_lowlevel_init+0xa8>)
	for(uint16_t i=0; i<256; i++){
    6e98:	2300      	movs	r3, #0
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    6e9a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    6e9e:	f013 0f02 	tst.w	r3, #2
    6ea2:	bf0c      	ite	eq
    6ea4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    6ea8:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    6eac:	f013 0f04 	tst.w	r3, #4
    6eb0:	bf0c      	ite	eq
    6eb2:	f44f 2400 	moveq.w	r4, #524288	; 0x80000
    6eb6:	f44f 2460 	movne.w	r4, #917504	; 0xe0000
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    6eba:	f013 0f08 	tst.w	r3, #8
    6ebe:	ea45 0504 	orr.w	r5, r5, r4
    6ec2:	bf0c      	ite	eq
    6ec4:	f44f 0400 	moveq.w	r4, #8388608	; 0x800000
    6ec8:	f44f 0460 	movne.w	r4, #14680064	; 0xe00000
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    6ecc:	f013 0f10 	tst.w	r3, #16
    6ed0:	ea45 0504 	orr.w	r5, r5, r4
    6ed4:	bf0c      	ite	eq
    6ed6:	f44f 6400 	moveq.w	r4, #2048	; 0x800
    6eda:	f44f 6460 	movne.w	r4, #3584	; 0xe00
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    6ede:	f013 0f20 	tst.w	r3, #32
    6ee2:	bf0c      	ite	eq
    6ee4:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
    6ee8:	f44f 4260 	movne.w	r2, #57344	; 0xe000
    6eec:	432c      	orrs	r4, r5
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    6eee:	f013 0f40 	tst.w	r3, #64	; 0x40
    6ef2:	ea44 0402 	orr.w	r4, r4, r2
    6ef6:	bf0c      	ite	eq
    6ef8:	2208      	moveq	r2, #8
    6efa:	220e      	movne	r2, #14
    6efc:	4314      	orrs	r4, r2
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6efe:	09da      	lsrs	r2, r3, #7
    6f00:	bf14      	ite	ne
    6f02:	22e0      	movne	r2, #224	; 0xe0
    6f04:	2280      	moveq	r2, #128	; 0x80
	for(uint16_t i=0; i<256; i++){
    6f06:	3301      	adds	r3, #1
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6f08:	4322      	orrs	r2, r4
	for(uint16_t i=0; i<256; i++){
    6f0a:	b29b      	uxth	r3, r3
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6f0c:	433a      	orrs	r2, r7
	for(uint16_t i=0; i<256; i++){
    6f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		grid_led_color_code[i] = temp;
    6f12:	f846 2b04 	str.w	r2, [r6], #4
	for(uint16_t i=0; i<256; i++){
    6f16:	d108      	bne.n	6f2a <grid_led_lowlevel_init+0x96>
	grid_led_buffer_init(mod, num);		
    6f18:	4b09      	ldr	r3, [pc, #36]	; (6f40 <grid_led_lowlevel_init+0xac>)
    6f1a:	9001      	str	r0, [sp, #4]
    6f1c:	4798      	blx	r3
	grid_led_hardware_init(mod);
    6f1e:	9801      	ldr	r0, [sp, #4]
    6f20:	4b08      	ldr	r3, [pc, #32]	; (6f44 <grid_led_lowlevel_init+0xb0>)
    6f22:	4798      	blx	r3
}
    6f24:	2000      	movs	r0, #0
    6f26:	b003      	add	sp, #12
    6f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    6f2a:	f013 0f01 	tst.w	r3, #1
    6f2e:	bf14      	ite	ne
    6f30:	f04f 6760 	movne.w	r7, #234881024	; 0xe000000
    6f34:	f04f 6700 	moveq.w	r7, #134217728	; 0x8000000
    6f38:	e7b1      	b.n	6e9e <grid_led_lowlevel_init+0xa>
    6f3a:	bf00      	nop
    6f3c:	20007dfc 	.word	0x20007dfc
    6f40:	00006d35 	.word	0x00006d35
    6f44:	00006bd5 	.word	0x00006bd5

00006f48 <grid_led_lowlevel_render>:


void grid_led_lowlevel_render(struct grid_led_model* mod, uint32_t num){
    6f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f4c:	7847      	ldrb	r7, [r0, #1]
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f4e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6ff0 <grid_led_lowlevel_render+0xa8>
    6f52:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    6f56:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    6f5a:	6903      	ldr	r3, [r0, #16]
	uint32_t mix_b = 0;
    6f5c:	2500      	movs	r5, #0
    6f5e:	240d      	movs	r4, #13
    6f60:	fb04 3401 	mla	r4, r4, r1, r3
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    6f64:	2603      	movs	r6, #3
	uint32_t mix_g = 0;
    6f66:	462b      	mov	r3, r5
	uint32_t mix_r = 0;
    6f68:	462a      	mov	r2, r5
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f6a:	f894 900b 	ldrb.w	r9, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    6f6e:	f894 b003 	ldrb.w	fp, [r4, #3]
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f72:	f818 e009 	ldrb.w	lr, [r8, r9]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f76:	44c1      	add	r9, r8
    6f78:	3e01      	subs	r6, #1
    6f7a:	f899 a100 	ldrb.w	sl, [r9, #256]	; 0x100
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f7e:	f899 c200 	ldrb.w	ip, [r9, #512]	; 0x200
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    6f82:	f894 9000 	ldrb.w	r9, [r4]
    6f86:	fb1b fb0a 	smulbb	fp, fp, sl
    6f8a:	fb09 bb0e 	mla	fp, r9, lr, fp
    6f8e:	f894 9006 	ldrb.w	r9, [r4, #6]
    6f92:	fb09 b90c 	mla	r9, r9, ip, fp
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    6f96:	f894 b004 	ldrb.w	fp, [r4, #4]
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    6f9a:	444a      	add	r2, r9
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    6f9c:	f894 9001 	ldrb.w	r9, [r4, #1]
    6fa0:	fb1b fb0a 	smulbb	fp, fp, sl
    6fa4:	fb09 bb0e 	mla	fp, r9, lr, fp
    6fa8:	f894 9007 	ldrb.w	r9, [r4, #7]
    6fac:	fb09 b90c 	mla	r9, r9, ip, fp
    6fb0:	444b      	add	r3, r9
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    6fb2:	f894 9005 	ldrb.w	r9, [r4, #5]
    6fb6:	f894 b002 	ldrb.w	fp, [r4, #2]
    6fba:	fb19 f90a 	smulbb	r9, r9, sl
    6fbe:	fb0b 9e0e 	mla	lr, fp, lr, r9
    6fc2:	f894 9008 	ldrb.w	r9, [r4, #8]
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    6fc6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    6fca:	fb09 ec0c 	mla	ip, r9, ip, lr
    6fce:	4465      	add	r5, ip
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    6fd0:	443c      	add	r4, r7
    6fd2:	d1ca      	bne.n	6f6a <grid_led_lowlevel_render+0x22>

	mix_r = (mix_r)/2/256;
	mix_g = (mix_g)/2/256;
	mix_b = (mix_b)/2/256;
				
	grid_led_lowlevel_set_color(mod, num, mix_r, mix_g, mix_b);
    6fd4:	f3c5 254f 	ubfx	r5, r5, #9, #16
    6fd8:	4c04      	ldr	r4, [pc, #16]	; (6fec <grid_led_lowlevel_render+0xa4>)
    6fda:	9500      	str	r5, [sp, #0]
    6fdc:	f3c3 234f 	ubfx	r3, r3, #9, #16
    6fe0:	f3c2 224f 	ubfx	r2, r2, #9, #16
    6fe4:	47a0      	blx	r4
	
}
    6fe6:	b003      	add	sp, #12
    6fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fec:	00006b89 	.word	0x00006b89
    6ff0:	20000008 	.word	0x20000008

00006ff4 <grid_led_lowlevel_render_all>:


void grid_led_lowlevel_render_all(struct grid_led_model* mod){
    6ff4:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<mod->led_number; i++){
		
		grid_led_lowlevel_render(mod, i);
    6ff6:	4e06      	ldr	r6, [pc, #24]	; (7010 <grid_led_lowlevel_render_all+0x1c>)
void grid_led_lowlevel_render_all(struct grid_led_model* mod){
    6ff8:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    6ffa:	2400      	movs	r4, #0
    6ffc:	786b      	ldrb	r3, [r5, #1]
    6ffe:	42a3      	cmp	r3, r4
    7000:	d800      	bhi.n	7004 <grid_led_lowlevel_render_all+0x10>
	}
	
}
    7002:	bd70      	pop	{r4, r5, r6, pc}
		grid_led_lowlevel_render(mod, i);
    7004:	4621      	mov	r1, r4
    7006:	4628      	mov	r0, r5
    7008:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    700a:	3401      	adds	r4, #1
    700c:	e7f6      	b.n	6ffc <grid_led_lowlevel_render_all+0x8>
    700e:	bf00      	nop
    7010:	00006f49 	.word	0x00006f49

00007014 <grid_led_lowlevel_hardware_start_transfer>:
			
	}
	
}

void grid_led_lowlevel_hardware_start_transfer (struct grid_led_model* mod){
    7014:	b510      	push	{r4, lr}
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    7016:	4b07      	ldr	r3, [pc, #28]	; (7034 <grid_led_lowlevel_hardware_start_transfer+0x20>)
void grid_led_lowlevel_hardware_start_transfer (struct grid_led_model* mod){
    7018:	4604      	mov	r4, r0
	grid_led_hardware_transfer_done = 0;
    701a:	2200      	movs	r2, #0
    701c:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    701e:	4806      	ldr	r0, [pc, #24]	; (7038 <grid_led_lowlevel_hardware_start_transfer+0x24>)
    7020:	4b06      	ldr	r3, [pc, #24]	; (703c <grid_led_lowlevel_hardware_start_transfer+0x28>)
    7022:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_lowlevel_get_frame_buffer_pointer(mod), grid_led_lowlevel_get_frame_buffer_size(mod));
    7024:	88a2      	ldrh	r2, [r4, #4]
    7026:	68a1      	ldr	r1, [r4, #8]
    7028:	6960      	ldr	r0, [r4, #20]
    702a:	4b05      	ldr	r3, [pc, #20]	; (7040 <grid_led_lowlevel_hardware_start_transfer+0x2c>)

}
    702c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	io_write(mod->hardware_io_descriptor, grid_led_lowlevel_get_frame_buffer_pointer(mod), grid_led_lowlevel_get_frame_buffer_size(mod));
    7030:	4718      	bx	r3
    7032:	bf00      	nop
    7034:	200010e8 	.word	0x200010e8
    7038:	20014cb4 	.word	0x20014cb4
    703c:	0000b6d9 	.word	0x0000b6d9
    7040:	0000b371 	.word	0x0000b371

00007044 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    7044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	grid_ui_model_init(&grid_core_state, 1);
    7048:	4d70      	ldr	r5, [pc, #448]	; (720c <grid_module_common_init+0x1c8>)
    704a:	4b71      	ldr	r3, [pc, #452]	; (7210 <grid_module_common_init+0x1cc>)
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
	
		
	if (1){	// INIT CORE_STATE->hearbeat	
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    704c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 7290 <grid_module_common_init+0x24c>
		uint8_t payload_length = 0;
	
		sprintf(payload_template, GRID_EVENTSTRING_HEARTBEAT );
		payload_length = strlen(payload_template);
    7050:	f8df 8240 	ldr.w	r8, [pc, #576]	; 7294 <grid_module_common_init+0x250>
	
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    7054:	4f6f      	ldr	r7, [pc, #444]	; (7214 <grid_module_common_init+0x1d0>)
		uint8_t error = 0;
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    7056:	f8df a240 	ldr.w	sl, [pc, #576]	; 7298 <grid_module_common_init+0x254>
void grid_module_common_init(void){
    705a:	b0a3      	sub	sp, #140	; 0x8c
	grid_ui_model_init(&grid_core_state, 1);
    705c:	4628      	mov	r0, r5
    705e:	2101      	movs	r1, #1
    7060:	4798      	blx	r3
	grid_ui_bank_init(&grid_core_state, 0, 1);
    7062:	4628      	mov	r0, r5
    7064:	4b6c      	ldr	r3, [pc, #432]	; (7218 <grid_module_common_init+0x1d4>)
    7066:	2201      	movs	r2, #1
    7068:	2100      	movs	r1, #0
    706a:	4798      	blx	r3
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
    706c:	2200      	movs	r2, #0
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    706e:	2400      	movs	r4, #0
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
    7070:	6868      	ldr	r0, [r5, #4]
    7072:	4b6a      	ldr	r3, [pc, #424]	; (721c <grid_module_common_init+0x1d8>)
    7074:	4611      	mov	r1, r2
    7076:	4798      	blx	r3
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    7078:	2274      	movs	r2, #116	; 0x74
    707a:	4621      	mov	r1, r4
    707c:	a805      	add	r0, sp, #20
    707e:	9404      	str	r4, [sp, #16]
    7080:	47c8      	blx	r9
		sprintf(payload_template, GRID_EVENTSTRING_HEARTBEAT );
    7082:	4967      	ldr	r1, [pc, #412]	; (7220 <grid_module_common_init+0x1dc>)
    7084:	4b67      	ldr	r3, [pc, #412]	; (7224 <grid_module_common_init+0x1e0>)
    7086:	a804      	add	r0, sp, #16
    7088:	4798      	blx	r3
		payload_length = strlen(payload_template);
    708a:	a804      	add	r0, sp, #16
    708c:	47c0      	blx	r8
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    708e:	aa04      	add	r2, sp, #16
    7090:	1816      	adds	r6, r2, r0
    7092:	2303      	movs	r3, #3
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    7094:	f10d 0b0f 	add.w	fp, sp, #15
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    7098:	4963      	ldr	r1, [pc, #396]	; (7228 <grid_module_common_init+0x1e4>)
    709a:	9300      	str	r3, [sp, #0]
    709c:	2202      	movs	r2, #2
    709e:	2310      	movs	r3, #16
    70a0:	4630      	mov	r0, r6
    70a2:	47b8      	blx	r7
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    70a4:	230e      	movs	r3, #14
    70a6:	2201      	movs	r2, #1
    70a8:	2104      	movs	r1, #4
	
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_HWCFG_offset, GRID_CLASS_HEARTBEAT_HWCFG_length, grid_sys_get_hwcfg(), &error);
    70aa:	4f60      	ldr	r7, [pc, #384]	; (722c <grid_module_common_init+0x1e8>)
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    70ac:	f8cd b000 	str.w	fp, [sp]
    70b0:	4630      	mov	r0, r6
		uint8_t error = 0;
    70b2:	f88d 400f 	strb.w	r4, [sp, #15]
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    70b6:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_HWCFG_offset, GRID_CLASS_HEARTBEAT_HWCFG_length, grid_sys_get_hwcfg(), &error);
    70b8:	47b8      	blx	r7
    70ba:	2202      	movs	r2, #2
    70bc:	4603      	mov	r3, r0
    70be:	2105      	movs	r1, #5
    70c0:	4630      	mov	r0, r6
    70c2:	f8cd b000 	str.w	fp, [sp]
    70c6:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VMAJOR_offset, GRID_CLASS_HEARTBEAT_VMAJOR_length , GRID_PROTOCOL_VERSION_MAJOR, &error);
    70c8:	2301      	movs	r3, #1
    70ca:	2202      	movs	r2, #2
    70cc:	2107      	movs	r1, #7
    70ce:	4630      	mov	r0, r6
    70d0:	f8cd b000 	str.w	fp, [sp]
    70d4:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VMINOR_offset, GRID_CLASS_HEARTBEAT_VMINOR_length  , GRID_PROTOCOL_VERSION_MINOR, &error);
    70d6:	2301      	movs	r3, #1
    70d8:	2202      	movs	r2, #2
    70da:	2109      	movs	r1, #9
    70dc:	4630      	mov	r0, r6
    70de:	f8cd b000 	str.w	fp, [sp]
    70e2:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VPATCH_offset, GRID_CLASS_HEARTBEAT_VPATCH_length  , GRID_PROTOCOL_VERSION_PATCH, &error);
    70e4:	2309      	movs	r3, #9
    70e6:	2202      	movs	r2, #2
    70e8:	210b      	movs	r1, #11
    70ea:	4630      	mov	r0, r6
    70ec:	f8cd b000 	str.w	fp, [sp]
    70f0:	47d0      	blx	sl
	
		payload_length = strlen(payload_template);
    70f2:	a804      	add	r0, sp, #16
    70f4:	47c0      	blx	r8
	
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_HEARTBEAT, payload_template, payload_length);		
    70f6:	686e      	ldr	r6, [r5, #4]
		payload_length = strlen(payload_template);
    70f8:	4603      	mov	r3, r0
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_HEARTBEAT, payload_template, payload_length);		
    70fa:	aa04      	add	r2, sp, #16
    70fc:	68f0      	ldr	r0, [r6, #12]
    70fe:	4e4c      	ldr	r6, [pc, #304]	; (7230 <grid_module_common_init+0x1ec>)
    7100:	210c      	movs	r1, #12
    7102:	47b0      	blx	r6
		
	}

	if (1){	// INIT CORE_STATE->mapmode press
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    7104:	2274      	movs	r2, #116	; 0x74
    7106:	4621      	mov	r1, r4
    7108:	a805      	add	r0, sp, #20
    710a:	9404      	str	r4, [sp, #16]
    710c:	47c8      	blx	r9
		uint8_t payload_length = 0;
	
		sprintf(payload_template, GRID_EVENTSTRING_MAPMODE_PRESS GRID_ACTIONSTRING_MAPMODE_PRESS);
    710e:	4949      	ldr	r1, [pc, #292]	; (7234 <grid_module_common_init+0x1f0>)
    7110:	4b44      	ldr	r3, [pc, #272]	; (7224 <grid_module_common_init+0x1e0>)
    7112:	a804      	add	r0, sp, #16
    7114:	4798      	blx	r3
		payload_length = strlen(payload_template);
    7116:	a804      	add	r0, sp, #16
    7118:	47c0      	blx	r8
    711a:	4603      	mov	r3, r0
	
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_MAPMODE_PRESS, payload_template, payload_length);			
    711c:	6868      	ldr	r0, [r5, #4]
    711e:	aa04      	add	r2, sp, #16
    7120:	68c0      	ldr	r0, [r0, #12]
    7122:	2107      	movs	r1, #7
    7124:	47b0      	blx	r6
		
	}	

	if (1){ // INIT CORE_STATE->mapmode release
			
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    7126:	2274      	movs	r2, #116	; 0x74
    7128:	4621      	mov	r1, r4
    712a:	a805      	add	r0, sp, #20
    712c:	9404      	str	r4, [sp, #16]
    712e:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_MAPMODE_RELEASE GRID_ACTIONSTRING_MAPMODE_RELEASE);
    7130:	4941      	ldr	r1, [pc, #260]	; (7238 <grid_module_common_init+0x1f4>)
    7132:	4b3c      	ldr	r3, [pc, #240]	; (7224 <grid_module_common_init+0x1e0>)
    7134:	a804      	add	r0, sp, #16
    7136:	4798      	blx	r3
		payload_length = strlen(payload_template);
    7138:	a804      	add	r0, sp, #16
    713a:	47c0      	blx	r8
    713c:	4603      	mov	r3, r0
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_MAPMODE_RELEASE, payload_template, payload_length);
    713e:	6868      	ldr	r0, [r5, #4]
    7140:	aa04      	add	r2, sp, #16
    7142:	68c0      	ldr	r0, [r0, #12]
    7144:	2108      	movs	r1, #8
    7146:	47b0      	blx	r6
		
	}	
	
	if (1){ // INIT CORE_STATE->cfgresponse
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    7148:	2274      	movs	r2, #116	; 0x74
    714a:	4621      	mov	r1, r4
    714c:	a805      	add	r0, sp, #20
    714e:	9404      	str	r4, [sp, #16]
    7150:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_CFG_RESPONES GRID_ACTIONSTRING_CFG_RESPONSE);
    7152:	493a      	ldr	r1, [pc, #232]	; (723c <grid_module_common_init+0x1f8>)
    7154:	4b33      	ldr	r3, [pc, #204]	; (7224 <grid_module_common_init+0x1e0>)
    7156:	a804      	add	r0, sp, #16
    7158:	4798      	blx	r3
		payload_length = strlen(payload_template);
    715a:	a804      	add	r0, sp, #16
    715c:	47c0      	blx	r8
    715e:	4603      	mov	r3, r0
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_RESPONSE, payload_template, payload_length);
    7160:	6868      	ldr	r0, [r5, #4]
    7162:	aa04      	add	r2, sp, #16
    7164:	68c0      	ldr	r0, [r0, #12]
    7166:	2109      	movs	r1, #9
    7168:	47b0      	blx	r6
		
	}	
	
	if (1){ // INIT CORE_STATE->cfgrequest
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    716a:	2274      	movs	r2, #116	; 0x74
    716c:	4621      	mov	r1, r4
    716e:	a805      	add	r0, sp, #20
    7170:	9404      	str	r4, [sp, #16]
    7172:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_CFG_REQUEST GRID_ACTIONSTRING_CFG_REQUEST);
    7174:	4932      	ldr	r1, [pc, #200]	; (7240 <grid_module_common_init+0x1fc>)
    7176:	4b2b      	ldr	r3, [pc, #172]	; (7224 <grid_module_common_init+0x1e0>)
    7178:	a804      	add	r0, sp, #16
    717a:	4798      	blx	r3
		payload_length = strlen(payload_template);
    717c:	a804      	add	r0, sp, #16
    717e:	47c0      	blx	r8
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    7180:	686c      	ldr	r4, [r5, #4]
		payload_length = strlen(payload_template);
    7182:	4603      	mov	r3, r0
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    7184:	aa04      	add	r2, sp, #16
    7186:	68e0      	ldr	r0, [r4, #12]
	}	
	
	
	//enable pwr!
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "UI Power Enable");
    7188:	4c2e      	ldr	r4, [pc, #184]	; (7244 <grid_module_common_init+0x200>)
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    718a:	210a      	movs	r1, #10
    718c:	47b0      	blx	r6
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "UI Power Enable");
    718e:	492e      	ldr	r1, [pc, #184]	; (7248 <grid_module_common_init+0x204>)
    7190:	482e      	ldr	r0, [pc, #184]	; (724c <grid_module_common_init+0x208>)
    7192:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7194:	4b2e      	ldr	r3, [pc, #184]	; (7250 <grid_module_common_init+0x20c>)
    7196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    719a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    719e:	47b8      	blx	r7
    71a0:	4625      	mov	r5, r4
    71a2:	b970      	cbnz	r0, 71c2 <grid_module_common_init+0x17e>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PO16");
    71a4:	492b      	ldr	r1, [pc, #172]	; (7254 <grid_module_common_init+0x210>)
    71a6:	4829      	ldr	r0, [pc, #164]	; (724c <grid_module_common_init+0x208>)
    71a8:	47a8      	blx	r5
		grid_module_po16_revb_init();
    71aa:	4b2b      	ldr	r3, [pc, #172]	; (7258 <grid_module_common_init+0x214>)
	}
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
		grid_module_bu16_revb_init();
    71ac:	4798      	blx	r3
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: Unknown Module");
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "HWCFG Mismatch");
	}


	grid_sys_init(&grid_sys_state);
    71ae:	4b2b      	ldr	r3, [pc, #172]	; (725c <grid_module_common_init+0x218>)
    71b0:	482b      	ldr	r0, [pc, #172]	; (7260 <grid_module_common_init+0x21c>)
    71b2:	4798      	blx	r3


	grid_nvm_init(&grid_nvm_state, &FLASH_0);
    71b4:	492b      	ldr	r1, [pc, #172]	; (7264 <grid_module_common_init+0x220>)
    71b6:	482c      	ldr	r0, [pc, #176]	; (7268 <grid_module_common_init+0x224>)
    71b8:	4b2c      	ldr	r3, [pc, #176]	; (726c <grid_module_common_init+0x228>)
    71ba:	4798      	blx	r3
	
		
}
    71bc:	b023      	add	sp, #140	; 0x8c
    71be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    71c2:	47b8      	blx	r7
    71c4:	2808      	cmp	r0, #8
    71c6:	d0ed      	beq.n	71a4 <grid_module_common_init+0x160>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
    71c8:	47b8      	blx	r7
    71ca:	2880      	cmp	r0, #128	; 0x80
    71cc:	d104      	bne.n	71d8 <grid_module_common_init+0x194>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
    71ce:	4928      	ldr	r1, [pc, #160]	; (7270 <grid_module_common_init+0x22c>)
    71d0:	481e      	ldr	r0, [pc, #120]	; (724c <grid_module_common_init+0x208>)
    71d2:	47a8      	blx	r5
		grid_module_bu16_revb_init();
    71d4:	4b27      	ldr	r3, [pc, #156]	; (7274 <grid_module_common_init+0x230>)
    71d6:	e7e9      	b.n	71ac <grid_module_common_init+0x168>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
    71d8:	47b8      	blx	r7
    71da:	2888      	cmp	r0, #136	; 0x88
    71dc:	d0f7      	beq.n	71ce <grid_module_common_init+0x18a>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    71de:	47b8      	blx	r7
    71e0:	2840      	cmp	r0, #64	; 0x40
    71e2:	d104      	bne.n	71ee <grid_module_common_init+0x1aa>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PBF4");					
    71e4:	4924      	ldr	r1, [pc, #144]	; (7278 <grid_module_common_init+0x234>)
    71e6:	4819      	ldr	r0, [pc, #100]	; (724c <grid_module_common_init+0x208>)
    71e8:	47a0      	blx	r4
		grid_module_pbf4_reva_init();			
    71ea:	4b24      	ldr	r3, [pc, #144]	; (727c <grid_module_common_init+0x238>)
    71ec:	e7de      	b.n	71ac <grid_module_common_init+0x168>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){
    71ee:	47b8      	blx	r7
    71f0:	28c0      	cmp	r0, #192	; 0xc0
    71f2:	d104      	bne.n	71fe <grid_module_common_init+0x1ba>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: EN16");
    71f4:	4922      	ldr	r1, [pc, #136]	; (7280 <grid_module_common_init+0x23c>)
    71f6:	4815      	ldr	r0, [pc, #84]	; (724c <grid_module_common_init+0x208>)
    71f8:	47a0      	blx	r4
		grid_module_en16_reva_init();	
    71fa:	4b22      	ldr	r3, [pc, #136]	; (7284 <grid_module_common_init+0x240>)
    71fc:	e7d6      	b.n	71ac <grid_module_common_init+0x168>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: Unknown Module");
    71fe:	4922      	ldr	r1, [pc, #136]	; (7288 <grid_module_common_init+0x244>)
    7200:	4812      	ldr	r0, [pc, #72]	; (724c <grid_module_common_init+0x208>)
    7202:	47a0      	blx	r4
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "HWCFG Mismatch");
    7204:	4921      	ldr	r1, [pc, #132]	; (728c <grid_module_common_init+0x248>)
    7206:	4811      	ldr	r0, [pc, #68]	; (724c <grid_module_common_init+0x208>)
    7208:	47a0      	blx	r4
    720a:	e7d0      	b.n	71ae <grid_module_common_init+0x16a>
    720c:	20014628 	.word	0x20014628
    7210:	00009a09 	.word	0x00009a09
    7214:	00013351 	.word	0x00013351
    7218:	00009a3d 	.word	0x00009a3d
    721c:	0000ace5 	.word	0x0000ace5
    7220:	000154bc 	.word	0x000154bc
    7224:	0001373d 	.word	0x0001373d
    7228:	000152d2 	.word	0x000152d2
    722c:	00009885 	.word	0x00009885
    7230:	0000a6e9 	.word	0x0000a6e9
    7234:	000154cb 	.word	0x000154cb
    7238:	000154e2 	.word	0x000154e2
    723c:	000154f1 	.word	0x000154f1
    7240:	00015508 	.word	0x00015508
    7244:	00012f39 	.word	0x00012f39
    7248:	0001551f 	.word	0x0001551f
    724c:	00015363 	.word	0x00015363
    7250:	41008000 	.word	0x41008000
    7254:	0001552f 	.word	0x0001552f
    7258:	00008321 	.word	0x00008321
    725c:	000095ed 	.word	0x000095ed
    7260:	20006fa4 	.word	0x20006fa4
    7264:	20014b58 	.word	0x20014b58
    7268:	200079b8 	.word	0x200079b8
    726c:	00008c79 	.word	0x00008c79
    7270:	00015541 	.word	0x00015541
    7274:	000075cd 	.word	0x000075cd
    7278:	00015553 	.word	0x00015553
    727c:	00007fc5 	.word	0x00007fc5
    7280:	00015565 	.word	0x00015565
    7284:	00007ae5 	.word	0x00007ae5
    7288:	00015577 	.word	0x00015577
    728c:	00015593 	.word	0x00015593
    7290:	00012cf5 	.word	0x00012cf5
    7294:	00013801 	.word	0x00013801
    7298:	000099c5 	.word	0x000099c5

0000729c <grid_module_bu16_revb_hardware_start_transfer>:

static uint8_t grid_bu16_helper_template_b_tgl2[GRID_SYS_BANK_MAXNUMBER][16] = {0};
static uint8_t grid_bu16_helper_template_b_tgl3[GRID_SYS_BANK_MAXNUMBER][16] = {0};
	
	
void grid_module_bu16_revb_hardware_start_transfer(void){
    729c:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    729e:	4c04      	ldr	r4, [pc, #16]	; (72b0 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    72a0:	4804      	ldr	r0, [pc, #16]	; (72b4 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    72a2:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    72a4:	4623      	mov	r3, r4
    72a6:	4804      	ldr	r0, [pc, #16]	; (72b8 <grid_module_bu16_revb_hardware_start_transfer+0x1c>)

}
    72a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    72ac:	4718      	bx	r3
    72ae:	bf00      	nop
    72b0:	0000d8bd 	.word	0x0000d8bd
    72b4:	20014be4 	.word	0x20014be4
    72b8:	20014db8 	.word	0x20014db8

000072bc <grid_module_bu16_revb_hardware_transfer_complete_cb>:

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    72bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    72c0:	4aa4      	ldr	r2, [pc, #656]	; (7554 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x298>)
    72c2:	7813      	ldrb	r3, [r2, #0]
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    72c4:	b08b      	sub	sp, #44	; 0x2c
    72c6:	4614      	mov	r4, r2
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    72c8:	b933      	cbnz	r3, 72d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c>
		grid_module_bu16_revb_hardware_transfer_complete++;
    72ca:	7813      	ldrb	r3, [r2, #0]
    72cc:	3301      	adds	r3, #1
    72ce:	b2db      	uxtb	r3, r3
    72d0:	7013      	strb	r3, [r2, #0]
	}
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
	grid_module_bu16_revb_hardware_start_transfer();
}
    72d2:	b00b      	add	sp, #44	; 0x2c
    72d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    72d8:	4b9f      	ldr	r3, [pc, #636]	; (7558 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x29c>)
    72da:	48a0      	ldr	r0, [pc, #640]	; (755c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a0>)
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    72dc:	4d9f      	ldr	r5, [pc, #636]	; (755c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a0>)
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    72de:	4798      	blx	r3
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    72e0:	7c6a      	ldrb	r2, [r5, #17]
		bank=0;
    72e2:	28ff      	cmp	r0, #255	; 0xff
    72e4:	bf14      	ite	ne
    72e6:	4603      	movne	r3, r0
    72e8:	2300      	moveq	r3, #0
	if (bank_changed){
    72ea:	b9fa      	cbnz	r2, 732c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x70>
	uint16_t adcresult_0 = 0;
    72ec:	2300      	movs	r3, #0
    72ee:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t adcresult_1 = 0;
    72f2:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    72f6:	7863      	ldrb	r3, [r4, #1]
    72f8:	4a99      	ldr	r2, [pc, #612]	; (7560 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a4>)
    72fa:	3308      	adds	r3, #8
    72fc:	5cd7      	ldrb	r7, [r2, r3]
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    72fe:	7863      	ldrb	r3, [r4, #1]
    7300:	b2db      	uxtb	r3, r3
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    7302:	b2ff      	uxtb	r7, r7
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    7304:	5cd6      	ldrb	r6, [r2, r3]
	grid_module_bu16_revb_mux++;
    7306:	7863      	ldrb	r3, [r4, #1]
    7308:	3301      	adds	r3, #1
    730a:	b2db      	uxtb	r3, r3
    730c:	7063      	strb	r3, [r4, #1]
	grid_module_bu16_revb_mux%=8;
    730e:	7863      	ldrb	r3, [r4, #1]
    7310:	f003 0307 	and.w	r3, r3, #7
    7314:	7063      	strb	r3, [r4, #1]
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    7316:	7863      	ldrb	r3, [r4, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    7318:	f013 0f01 	tst.w	r3, #1
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    731c:	b2f6      	uxtb	r6, r6
    731e:	4b91      	ldr	r3, [pc, #580]	; (7564 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    7320:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    7324:	d141      	bne.n	73aa <grid_module_bu16_revb_hardware_transfer_complete_cb+0xee>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7326:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    732a:	e040      	b.n	73ae <grid_module_bu16_revb_hardware_transfer_complete_cb+0xf2>
		grid_sys_state.bank_active_changed = 0;
    732c:	f04f 0900 	mov.w	r9, #0
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7330:	fa0f fa83 	sxth.w	sl, r3
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7334:	f8df 823c 	ldr.w	r8, [pc, #572]	; 7574 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>
		grid_sys_state.bank_active_changed = 0;
    7338:	f885 9011 	strb.w	r9, [r5, #17]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    733c:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    7340:	eb04 1703 	add.w	r7, r4, r3, lsl #4
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7344:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7348:	7bea      	ldrb	r2, [r5, #15]
    734a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    734e:	fa5f f689 	uxtb.w	r6, r9
    7352:	7a5b      	ldrb	r3, [r3, #9]
    7354:	42b3      	cmp	r3, r6
    7356:	d9c9      	bls.n	72ec <grid_module_bu16_revb_hardware_transfer_complete_cb+0x30>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7358:	f8d8 2004 	ldr.w	r2, [r8, #4]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    735c:	f8df b220 	ldr.w	fp, [pc, #544]	; 7580 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c4>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7360:	4452      	add	r2, sl
    7362:	2364      	movs	r3, #100	; 0x64
    7364:	68d2      	ldr	r2, [r2, #12]
    7366:	4373      	muls	r3, r6
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    7368:	19b9      	adds	r1, r7, r6
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    736a:	441a      	add	r2, r3
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    736c:	7888      	ldrb	r0, [r1, #2]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_bu16_helper_template_b_tgl3[bank][i];
    736e:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    7372:	6190      	str	r0, [r2, #24]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_bu16_helper_template_b_tgl3[bank][i];
    7374:	61d1      	str	r1, [r2, #28]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7376:	f8d8 2004 	ldr.w	r2, [r8, #4]
    737a:	7be9      	ldrb	r1, [r5, #15]
    737c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7380:	4640      	mov	r0, r8
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7382:	68d2      	ldr	r2, [r2, #12]
    7384:	4413      	add	r3, r2
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7386:	4632      	mov	r2, r6
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7388:	60de      	str	r6, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    738a:	7be9      	ldrb	r1, [r5, #15]
    738c:	2300      	movs	r3, #0
    738e:	47d8      	blx	fp
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    7390:	7be9      	ldrb	r1, [r5, #15]
    7392:	2304      	movs	r3, #4
    7394:	4632      	mov	r2, r6
    7396:	4640      	mov	r0, r8
    7398:	47d8      	blx	fp
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    739a:	7be9      	ldrb	r1, [r5, #15]
    739c:	2305      	movs	r3, #5
    739e:	4632      	mov	r2, r6
    73a0:	4640      	mov	r0, r8
    73a2:	47d8      	blx	fp
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    73a4:	f109 0901 	add.w	r9, r9, #1
    73a8:	e7cc      	b.n	7344 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x88>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    73aa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    73ae:	7863      	ldrb	r3, [r4, #1]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    73b0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 7584 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c8>
    73b4:	486c      	ldr	r0, [pc, #432]	; (7568 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2ac>)
    73b6:	f013 0f02 	tst.w	r3, #2
    73ba:	4b6a      	ldr	r3, [pc, #424]	; (7564 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    73bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    73c0:	bf14      	ite	ne
    73c2:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73c6:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    73ca:	7863      	ldrb	r3, [r4, #1]
    73cc:	f013 0f04 	tst.w	r3, #4
    73d0:	4b64      	ldr	r3, [pc, #400]	; (7564 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    73d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    73d6:	bf14      	ite	ne
    73d8:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73dc:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    73e0:	2100      	movs	r1, #0
    73e2:	2302      	movs	r3, #2
    73e4:	aa05      	add	r2, sp, #20
    73e6:	47c0      	blx	r8
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    73e8:	2302      	movs	r3, #2
    73ea:	f10d 0216 	add.w	r2, sp, #22
    73ee:	485f      	ldr	r0, [pc, #380]	; (756c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b0>)
    73f0:	2100      	movs	r1, #0
    73f2:	47c0      	blx	r8
	uint8_t result_value[2] = {0};
    73f4:	2300      	movs	r3, #0
    73f6:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t result_valid[2] = {0};
    73fa:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (adcresult_0>60000){
    73fe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	result_index[0] = adc_index_0;
    7402:	f88d 7008 	strb.w	r7, [sp, #8]
	if (adcresult_0>60000){
    7406:	f64e 2260 	movw	r2, #60000	; 0xea60
    740a:	4293      	cmp	r3, r2
	result_index[1] = adc_index_1;
    740c:	f88d 6009 	strb.w	r6, [sp, #9]
	if (adcresult_0>60000){
    7410:	d978      	bls.n	7504 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>
		result_valid[0] = 1;
    7412:	2301      	movs	r3, #1
    7414:	f88d 3010 	strb.w	r3, [sp, #16]
	if (adcresult_1>60000){
    7418:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    741c:	f64e 2260 	movw	r2, #60000	; 0xea60
    7420:	4293      	cmp	r3, r2
    7422:	d975      	bls.n	7510 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>
		result_value[1] = 0;
    7424:	2300      	movs	r3, #0
		result_value[1] = 127;
    7426:	f88d 300d 	strb.w	r3, [sp, #13]
		result_valid[1] = 1;
    742a:	2301      	movs	r3, #1
    742c:	f88d 3011 	strb.w	r3, [sp, #17]
	uint8_t grid_module_bu16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};	
    7430:	4b4f      	ldr	r3, [pc, #316]	; (7570 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b4>)
    7432:	ae06      	add	r6, sp, #24
    7434:	f103 0710 	add.w	r7, r3, #16
    7438:	6818      	ldr	r0, [r3, #0]
    743a:	6859      	ldr	r1, [r3, #4]
    743c:	4632      	mov	r2, r6
    743e:	c203      	stmia	r2!, {r0, r1}
    7440:	3308      	adds	r3, #8
    7442:	42bb      	cmp	r3, r7
    7444:	4616      	mov	r6, r2
    7446:	d1f7      	bne.n	7438 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x17c>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    7448:	484a      	ldr	r0, [pc, #296]	; (7574 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>)
	uint8_t grid_module_bu16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};	
    744a:	2300      	movs	r3, #0
    744c:	f10d 0908 	add.w	r9, sp, #8
    7450:	f10d 0b0c 	add.w	fp, sp, #12
    7454:	9301      	str	r3, [sp, #4]
    7456:	4682      	mov	sl, r0
		uint8_t res_index = result_index[i];
    7458:	f819 6b01 	ldrb.w	r6, [r9], #1
		uint8_t res_value = result_value[i];
    745c:	f81b 8b01 	ldrb.w	r8, [fp], #1
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    7460:	6843      	ldr	r3, [r0, #4]
    7462:	7bea      	ldrb	r2, [r5, #15]
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    7464:	19a1      	adds	r1, r4, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    7466:	b2d2      	uxtb	r2, r2
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    7468:	f891 c082 	ldrb.w	ip, [r1, #130]	; 0x82
    746c:	45e0      	cmp	r8, ip
    746e:	d042      	beq.n	74f6 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23a>
    7470:	9f01      	ldr	r7, [sp, #4]
		uint8_t res_valid = result_valid[i];
    7472:	a904      	add	r1, sp, #16
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    7474:	5c79      	ldrb	r1, [r7, r1]
    7476:	2901      	cmp	r1, #1
    7478:	d13d      	bne.n	74f6 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23a>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    747a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    747e:	2164      	movs	r1, #100	; 0x64
    7480:	68db      	ldr	r3, [r3, #12]
    7482:	fb16 f101 	smulbb	r1, r6, r1
    7486:	440b      	add	r3, r1
			if (grid_bu16_helper_template_b_abs[res_index] == 0){ // Button Press Event
    7488:	f1bc 0f00 	cmp.w	ip, #0
    748c:	d14d      	bne.n	752a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x26e>
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    748e:	699a      	ldr	r2, [r3, #24]
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    7490:	f8d3 e01c 	ldr.w	lr, [r3, #28]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    7494:	2a00      	cmp	r2, #0
    7496:	bf0c      	ite	eq
    7498:	227f      	moveq	r2, #127	; 0x7f
    749a:	2200      	movne	r2, #0
    749c:	619a      	str	r2, [r3, #24]
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    749e:	f1be 0f00 	cmp.w	lr, #0
    74a2:	d13c      	bne.n	751e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x262>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    74a4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 0;
    74a8:	f8c3 c01c 	str.w	ip, [r3, #28]
				grid_bu16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    74ac:	f895 c00f 	ldrb.w	ip, [r5, #15]
    74b0:	9f01      	ldr	r7, [sp, #4]
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    74b2:	69db      	ldr	r3, [r3, #28]
				grid_bu16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    74b4:	eb04 1c0c 	add.w	ip, r4, ip, lsl #4
    74b8:	44bc      	add	ip, r7
    74ba:	f88c 2002 	strb.w	r2, [ip, #2]
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    74be:	7bea      	ldrb	r2, [r5, #15]
    74c0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
    74c4:	443a      	add	r2, r7
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    74c6:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    74ca:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
    74ce:	2300      	movs	r3, #0
                    template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    74d0:	f8da 2004 	ldr.w	r2, [sl, #4]
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    74d4:	441a      	add	r2, r3
    74d6:	3310      	adds	r3, #16
    74d8:	68d2      	ldr	r2, [r2, #12]
    74da:	440a      	add	r2, r1
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    74dc:	2b40      	cmp	r3, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    74de:	f8c2 c014 	str.w	ip, [r2, #20]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    74e2:	d1f5      	bne.n	74d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DP);
    74e4:	7be9      	ldrb	r1, [r5, #15]
    74e6:	2304      	movs	r3, #4
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    74e8:	4632      	mov	r2, r6
    74ea:	4f23      	ldr	r7, [pc, #140]	; (7578 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2bc>)
				grid_bu16_helper_template_b_abs[result_index[i]] = res_value;
    74ec:	4426      	add	r6, r4
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    74ee:	47b8      	blx	r7
				grid_bu16_helper_template_b_abs[result_index[i]] = res_value;
    74f0:	4820      	ldr	r0, [pc, #128]	; (7574 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>)
    74f2:	f886 8082 	strb.w	r8, [r6, #130]	; 0x82
	for (uint8_t i=0; i<2; i++)
    74f6:	9b01      	ldr	r3, [sp, #4]
    74f8:	b173      	cbz	r3, 7518 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    74fa:	2300      	movs	r3, #0
    74fc:	7023      	strb	r3, [r4, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    74fe:	4b1f      	ldr	r3, [pc, #124]	; (757c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c0>)
    7500:	4798      	blx	r3
    7502:	e6e6      	b.n	72d2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x16>
	else if (adcresult_0<200){
    7504:	2bc7      	cmp	r3, #199	; 0xc7
    7506:	d887      	bhi.n	7418 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x15c>
		result_value[0] = 127;
    7508:	237f      	movs	r3, #127	; 0x7f
    750a:	f88d 300c 	strb.w	r3, [sp, #12]
    750e:	e780      	b.n	7412 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
	else if (adcresult_1<200){
    7510:	2bc7      	cmp	r3, #199	; 0xc7
    7512:	d88d      	bhi.n	7430 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x174>
		result_value[1] = 127;
    7514:	237f      	movs	r3, #127	; 0x7f
    7516:	e786      	b.n	7426 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x16a>
    7518:	2301      	movs	r3, #1
    751a:	9301      	str	r3, [sp, #4]
    751c:	e79c      	b.n	7458 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x19c>
				else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    751e:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7522:	bf08      	it	eq
    7524:	f04f 0c7f 	moveq.w	ip, #127	; 0x7f
    7528:	e7be      	b.n	74a8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1ec>
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    752a:	aa0a      	add	r2, sp, #40	; 0x28
    752c:	4432      	add	r2, r6
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    752e:	60de      	str	r6, [r3, #12]
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    7530:	f812 2c10 	ldrb.w	r2, [r2, #-16]
    7534:	611a      	str	r2, [r3, #16]
    7536:	2300      	movs	r3, #0
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7538:	469c      	mov	ip, r3
                    template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    753a:	f8da 2004 	ldr.w	r2, [sl, #4]
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    753e:	441a      	add	r2, r3
    7540:	3310      	adds	r3, #16
    7542:	68d2      	ldr	r2, [r2, #12]
    7544:	440a      	add	r2, r1
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7546:	2b40      	cmp	r3, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7548:	f8c2 c014 	str.w	ip, [r2, #20]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    754c:	d1f5      	bne.n	753a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x27e>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    754e:	7be9      	ldrb	r1, [r5, #15]
    7550:	2305      	movs	r3, #5
    7552:	e7c9      	b.n	74e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>
    7554:	200005fc 	.word	0x200005fc
    7558:	000096a3 	.word	0x000096a3
    755c:	20006fa4 	.word	0x20006fa4
    7560:	20000308 	.word	0x20000308
    7564:	41008000 	.word	0x41008000
    7568:	20014be4 	.word	0x20014be4
    756c:	20014db8 	.word	0x20014db8
    7570:	000155a2 	.word	0x000155a2
    7574:	20006f98 	.word	0x20006f98
    7578:	0000a9ad 	.word	0x0000a9ad
    757c:	0000729d 	.word	0x0000729d
    7580:	0000adf9 	.word	0x0000adf9
    7584:	0000d801 	.word	0x0000d801

00007588 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    7588:	b570      	push	{r4, r5, r6, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    758a:	4c0b      	ldr	r4, [pc, #44]	; (75b8 <grid_module_bu16_revb_hardware_init+0x30>)
    758c:	4e0b      	ldr	r6, [pc, #44]	; (75bc <grid_module_bu16_revb_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    758e:	4d0c      	ldr	r5, [pc, #48]	; (75c0 <grid_module_bu16_revb_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    7590:	4b0c      	ldr	r3, [pc, #48]	; (75c4 <grid_module_bu16_revb_hardware_init+0x3c>)
    7592:	2200      	movs	r2, #0
    7594:	4611      	mov	r1, r2
    7596:	4620      	mov	r0, r4
    7598:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    759a:	2200      	movs	r2, #0
    759c:	4b09      	ldr	r3, [pc, #36]	; (75c4 <grid_module_bu16_revb_hardware_init+0x3c>)
    759e:	4611      	mov	r1, r2
    75a0:	4628      	mov	r0, r5
    75a2:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    75a4:	4620      	mov	r0, r4
    75a6:	4c08      	ldr	r4, [pc, #32]	; (75c8 <grid_module_bu16_revb_hardware_init+0x40>)
    75a8:	2100      	movs	r1, #0
    75aa:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    75ac:	4628      	mov	r0, r5
    75ae:	4623      	mov	r3, r4
    75b0:	2100      	movs	r1, #0

}
    75b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    75b6:	4718      	bx	r3
    75b8:	20014be4 	.word	0x20014be4
    75bc:	0000d789 	.word	0x0000d789
    75c0:	20014db8 	.word	0x20014db8
    75c4:	000072bd 	.word	0x000072bd
    75c8:	0000d749 	.word	0x0000d749

000075cc <grid_module_bu16_revb_init>:



void grid_module_bu16_revb_init(){
    75cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	grid_led_lowlevel_init(&grid_led_state, 16);
    75d0:	4b12      	ldr	r3, [pc, #72]	; (761c <grid_module_bu16_revb_init+0x50>)
    75d2:	4813      	ldr	r0, [pc, #76]	; (7620 <grid_module_bu16_revb_init+0x54>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
	
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
		
		grid_ui_bank_init(&grid_ui_state, i, 16);
    75d4:	4e13      	ldr	r6, [pc, #76]	; (7624 <grid_module_bu16_revb_init+0x58>)
    75d6:	4f14      	ldr	r7, [pc, #80]	; (7628 <grid_module_bu16_revb_init+0x5c>)
		
		for (uint8_t j=0; j<16; j++){

			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    75d8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 7638 <grid_module_bu16_revb_init+0x6c>
	grid_led_lowlevel_init(&grid_led_state, 16);
    75dc:	2110      	movs	r1, #16
    75de:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    75e0:	4810      	ldr	r0, [pc, #64]	; (7624 <grid_module_bu16_revb_init+0x58>)
    75e2:	4b12      	ldr	r3, [pc, #72]	; (762c <grid_module_bu16_revb_init+0x60>)
    75e4:	2104      	movs	r1, #4
    75e6:	4798      	blx	r3
    75e8:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);
    75ea:	2210      	movs	r2, #16
    75ec:	b2e1      	uxtb	r1, r4
    75ee:	4630      	mov	r0, r6
    75f0:	47b8      	blx	r7
		for (uint8_t j=0; j<16; j++){
    75f2:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);
    75f6:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    75f8:	6870      	ldr	r0, [r6, #4]
    75fa:	b2e9      	uxtb	r1, r5
    75fc:	2202      	movs	r2, #2
    75fe:	4448      	add	r0, r9
    7600:	3501      	adds	r5, #1
    7602:	47c0      	blx	r8
		for (uint8_t j=0; j<16; j++){
    7604:	2d10      	cmp	r5, #16
    7606:	d1f7      	bne.n	75f8 <grid_module_bu16_revb_init+0x2c>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    7608:	3401      	adds	r4, #1
    760a:	2c04      	cmp	r4, #4
    760c:	d1ed      	bne.n	75ea <grid_module_bu16_revb_init+0x1e>

		}		
		
	}
				
	grid_module_bu16_revb_hardware_init();
    760e:	4b08      	ldr	r3, [pc, #32]	; (7630 <grid_module_bu16_revb_init+0x64>)
    7610:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();

};
    7612:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_bu16_revb_hardware_start_transfer();
    7616:	4b07      	ldr	r3, [pc, #28]	; (7634 <grid_module_bu16_revb_init+0x68>)
    7618:	4718      	bx	r3
    761a:	bf00      	nop
    761c:	00006e95 	.word	0x00006e95
    7620:	200146a0 	.word	0x200146a0
    7624:	20006f98 	.word	0x20006f98
    7628:	00009a3d 	.word	0x00009a3d
    762c:	00009a09 	.word	0x00009a09
    7630:	00007589 	.word	0x00007589
    7634:	0000729d 	.word	0x0000729d
    7638:	0000ace5 	.word	0x0000ace5

0000763c <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    763c:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    763e:	4b08      	ldr	r3, [pc, #32]	; (7660 <grid_module_en16_reva_hardware_start_transfer+0x24>)
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    7640:	4808      	ldr	r0, [pc, #32]	; (7664 <grid_module_en16_reva_hardware_start_transfer+0x28>)

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    7642:	4c09      	ldr	r4, [pc, #36]	; (7668 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    7644:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7648:	619a      	str	r2, [r3, #24]
	spi_m_async_enable(&UI_SPI);
    764a:	4b08      	ldr	r3, [pc, #32]	; (766c <grid_module_en16_reva_hardware_start_transfer+0x30>)
    764c:	4798      	blx	r3
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    764e:	4a08      	ldr	r2, [pc, #32]	; (7670 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    7650:	4804      	ldr	r0, [pc, #16]	; (7664 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    7652:	46a4      	mov	ip, r4
    7654:	2308      	movs	r3, #8

}
    7656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    765a:	f102 010e 	add.w	r1, r2, #14
    765e:	4760      	bx	ip
    7660:	41008000 	.word	0x41008000
    7664:	20014ad0 	.word	0x20014ad0
    7668:	0000e485 	.word	0x0000e485
    766c:	0000e3e5 	.word	0x0000e3e5
    7670:	2000068e 	.word	0x2000068e

00007674 <grid_module_en16_reva_hardware_transfer_complete_cb>:

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    7674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7678:	4ba8      	ldr	r3, [pc, #672]	; (791c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a8>)
	
	// Set the shift registers to continuously load data until new transaction is issued
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);


	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    767a:	48a9      	ldr	r0, [pc, #676]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
	if (bank == 255){
		bank=0;
	}


	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    767c:	4fa8      	ldr	r7, [pc, #672]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    767e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7682:	615a      	str	r2, [r3, #20]
void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    7684:	b089      	sub	sp, #36	; 0x24
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    7686:	4ba7      	ldr	r3, [pc, #668]	; (7924 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b0>)
    7688:	4798      	blx	r3
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    768a:	7c7b      	ldrb	r3, [r7, #17]
		bank=0;
    768c:	28ff      	cmp	r0, #255	; 0xff
    768e:	bf14      	ite	ne
    7690:	4606      	movne	r6, r0
    7692:	2600      	moveq	r6, #0
		
	if (bank_changed){
    7694:	2b00      	cmp	r3, #0
    7696:	f040 815f 	bne.w	7958 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>
		

		uint8_t i = UI_ENCODER_LOOKUP[j];
		

		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    769a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 7954 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>
				uint8_t controlnumber = i;
 
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER] = res_index;
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 

				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    769e:	0133      	lsls	r3, r6, #4
    76a0:	9302      	str	r3, [sp, #8]
    76a2:	eb08 1306 	add.w	r3, r8, r6, lsl #4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    76a6:	f04f 0b00 	mov.w	fp, #0
				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    76aa:	9303      	str	r3, [sp, #12]
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    76ac:	f3cb 0346 	ubfx	r3, fp, #1, #7
    76b0:	f00b 0201 	and.w	r2, fp, #1
    76b4:	f818 3003 	ldrb.w	r3, [r8, r3]
    76b8:	0092      	lsls	r2, r2, #2
    76ba:	4113      	asrs	r3, r2
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    76bc:	eb08 020b 	add.w	r2, r8, fp
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    76c0:	b2de      	uxtb	r6, r3
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    76c2:	f892 015c 	ldrb.w	r0, [r2, #348]	; 0x15c
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    76c6:	f003 030f 	and.w	r3, r3, #15
		if (old_value != new_value){
    76ca:	4283      	cmp	r3, r0
    76cc:	fa5f f18b 	uxtb.w	r1, fp
    76d0:	f000 8115 	beq.w	78fe <grid_module_en16_reva_hardware_transfer_complete_cb+0x28a>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    76d4:	4894      	ldr	r0, [pc, #592]	; (7928 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b4>)
            UI_SPI_RX_BUFFER_LAST[j] = new_value;
    76d6:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
			UI_SPI_DEBUG = j;
    76da:	4a94      	ldr	r2, [pc, #592]	; (792c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
		uint8_t i = UI_ENCODER_LOOKUP[j];
    76dc:	f81b 4000 	ldrb.w	r4, [fp, r0]
			UI_SPI_DEBUG = j;
    76e0:	7011      	strb	r1, [r2, #0]
			if (button_value != grid_ui_encoder_array[i].button_value){
    76e2:	4d93      	ldr	r5, [pc, #588]	; (7930 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2bc>)
			uint8_t button_value = (new_value&0b00000100)?1:0;
    76e4:	f3c3 0280 	ubfx	r2, r3, #2, #1
    76e8:	9201      	str	r2, [sp, #4]
            uint8_t phase_a      = (new_value&0b00000010)?1:0;
    76ea:	f3c3 0240 	ubfx	r2, r3, #1, #1
    76ee:	9200      	str	r2, [sp, #0]
			if (button_value != grid_ui_encoder_array[i].button_value){
    76f0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
    76f4:	9801      	ldr	r0, [sp, #4]
    76f6:	7851      	ldrb	r1, [r2, #1]
    76f8:	4281      	cmp	r1, r0
			uint8_t phase_b      = (new_value&0b00000001)?1:0;
    76fa:	f006 0601 	and.w	r6, r6, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    76fe:	ea4f 1704 	mov.w	r7, r4, lsl #4
    7702:	d04d      	beq.n	77a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x12c>
				grid_ui_encoder_array[i].button_changed = 1;
    7704:	2101      	movs	r1, #1
				grid_ui_encoder_array[i].button_value = new_value>>2;
    7706:	089b      	lsrs	r3, r3, #2
				grid_ui_encoder_array[i].button_changed = 1;
    7708:	7091      	strb	r1, [r2, #2]
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    770a:	f8df a214 	ldr.w	sl, [pc, #532]	; 7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>
				grid_ui_encoder_array[i].button_value = new_value>>2;
    770e:	7053      	strb	r3, [r2, #1]
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    7710:	4a88      	ldr	r2, [pc, #544]	; (7934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7712:	f8df c230 	ldr.w	ip, [pc, #560]	; 7944 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    7716:	6852      	ldr	r2, [r2, #4]
    7718:	f89a 100f 	ldrb.w	r1, [sl, #15]
    771c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    7720:	2164      	movs	r1, #100	; 0x64
    7722:	68d2      	ldr	r2, [r2, #12]
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7724:	f10d 0910 	add.w	r9, sp, #16
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    7728:	fb04 2201 	mla	r2, r4, r1, r2
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    772c:	f8dc 1004 	ldr.w	r1, [ip, #4]
    7730:	f8dc 0000 	ldr.w	r0, [ip]
    7734:	46ce      	mov	lr, r9
    7736:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    773a:	497f      	ldr	r1, [pc, #508]	; (7938 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    773c:	f10c 0c08 	add.w	ip, ip, #8
    7740:	458c      	cmp	ip, r1
    7742:	46f1      	mov	r9, lr
    7744:	d1f2      	bne.n	772c <grid_module_en16_reva_hardware_transfer_complete_cb+0xb8>
				if (grid_ui_encoder_array[i].button_value == 0){ // Button Press Event
    7746:	a908      	add	r1, sp, #32
    7748:	4421      	add	r1, r4
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    774a:	60d4      	str	r4, [r2, #12]
				if (grid_ui_encoder_array[i].button_value == 0){ // Button Press Event
    774c:	2b00      	cmp	r3, #0
    774e:	f040 8152 	bne.w	79f6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x382>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    7752:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    7756:	6111      	str	r1, [r2, #16]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    7758:	6991      	ldr	r1, [r2, #24]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;
    775a:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    775e:	2900      	cmp	r1, #0
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    7760:	69d1      	ldr	r1, [r2, #28]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;
    7762:	f8c2 c014 	str.w	ip, [r2, #20]
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    7766:	bf0c      	ite	eq
    7768:	4660      	moveq	r0, ip
    776a:	2000      	movne	r0, #0
    776c:	6190      	str	r0, [r2, #24]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    776e:	2900      	cmp	r1, #0
    7770:	f040 813d 	bne.w	79ee <grid_module_en16_reva_hardware_transfer_complete_cb+0x37a>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    7774:	233f      	movs	r3, #63	; 0x3f
					grid_en16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    7776:	496a      	ldr	r1, [pc, #424]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7778:	61d3      	str	r3, [r2, #28]
					grid_en16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    777a:	7bcb      	ldrb	r3, [r1, #15]
    777c:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    7780:	4423      	add	r3, r4
    7782:	7718      	strb	r0, [r3, #28]
					grid_en16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    7784:	7bcb      	ldrb	r3, [r1, #15]
    7786:	69d2      	ldr	r2, [r2, #28]
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    7788:	7bc9      	ldrb	r1, [r1, #15]
					grid_en16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    778a:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    778e:	4423      	add	r3, r4
    7790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    7794:	2304      	movs	r3, #4
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    7796:	4867      	ldr	r0, [pc, #412]	; (7934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    7798:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 7948 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>
    779c:	4622      	mov	r2, r4
    779e:	47c8      	blx	r9
            if (a_now == 1 && b_now == 1){ //detent found
    77a0:	9b00      	ldr	r3, [sp, #0]
    77a2:	2b00      	cmp	r3, #0
    77a4:	f000 8155 	beq.w	7a52 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3de>
    77a8:	2e00      	cmp	r6, #0
    77aa:	f000 8155 	beq.w	7a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
			uint8_t b_prev = grid_ui_encoder_array[i].phase_b_previous;
    77ae:	19eb      	adds	r3, r5, r7
                if (b_prev == 0 && grid_ui_encoder_array[i].phase_change_lock == 0){
    77b0:	7b9a      	ldrb	r2, [r3, #14]
    77b2:	2a00      	cmp	r2, #0
    77b4:	f040 8128 	bne.w	7a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x394>
    77b8:	7bd9      	ldrb	r1, [r3, #15]
    77ba:	2900      	cmp	r1, #0
    77bc:	f040 814c 	bne.w	7a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
                    grid_ui_encoder_array[i].phase_change_lock = 1;
    77c0:	2201      	movs	r2, #1
    77c2:	73da      	strb	r2, [r3, #15]
                    delta = -1;
    77c4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    77c8:	442f      	add	r7, r5
    77ca:	9b00      	ldr	r3, [sp, #0]
    77cc:	737b      	strb	r3, [r7, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    77ce:	73be      	strb	r6, [r7, #14]
			if (delta != 0){
    77d0:	f1b9 0f00 	cmp.w	r9, #0
    77d4:	f000 8093 	beq.w	78fe <grid_module_en16_reva_hardware_transfer_complete_cb+0x28a>
				uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time);
    77d8:	68b9      	ldr	r1, [r7, #8]
    77da:	4851      	ldr	r0, [pc, #324]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    77dc:	4b57      	ldr	r3, [pc, #348]	; (793c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    77de:	4798      	blx	r3
				if (elapsed_ms>25){
    77e0:	f5b0 7fd0 	cmp.w	r0, #416	; 0x1a0
    77e4:	f080 811b 	bcs.w	7a1e <grid_module_en16_reva_hardware_transfer_complete_cb+0x3aa>
                uint32_t elapsed_ms = elapsed_time/RTC1MS;
    77e8:	0900      	lsrs	r0, r0, #4
    77ea:	2801      	cmp	r0, #1
    77ec:	bf38      	it	cc
    77ee:	2001      	movcc	r0, #1
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    77f0:	4e4b      	ldr	r6, [pc, #300]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    77f2:	4b53      	ldr	r3, [pc, #332]	; (7940 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
				uint8_t velocityfactor = (25*25-elapsed_ms*elapsed_ms)/150 + 1;
    77f4:	f240 2771 	movw	r7, #625	; 0x271
    77f8:	fb00 7010 	mls	r0, r0, r0, r7
    77fc:	2796      	movs	r7, #150	; 0x96
    77fe:	fbb0 f7f7 	udiv	r7, r0, r7
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    7802:	4630      	mov	r0, r6
    7804:	4798      	blx	r3
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7806:	4a4b      	ldr	r2, [pc, #300]	; (7934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    7808:	6852      	ldr	r2, [r2, #4]
    780a:	7bf1      	ldrb	r1, [r6, #15]
                uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    780c:	4e4d      	ldr	r6, [pc, #308]	; (7944 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    780e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
				uint8_t velocityfactor = (25*25-elapsed_ms*elapsed_ms)/150 + 1;
    7812:	3701      	adds	r7, #1
    7814:	b2ff      	uxtb	r7, r7
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    7816:	eb05 1504 	add.w	r5, r5, r4, lsl #4
				delta_high = delta * (velocityfactor * 2 - 1);
    781a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    781e:	eb0a 0a47 	add.w	sl, sl, r7, lsl #1
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7822:	68d2      	ldr	r2, [r2, #12]
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    7824:	60a8      	str	r0, [r5, #8]
				delta_high = delta * (velocityfactor * 2 - 1);
    7826:	fb0a fa09 	mul.w	sl, sl, r9
				delta_low =  delta * velocityfactor;			
    782a:	fb07 f509 	mul.w	r5, r7, r9
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    782e:	2164      	movs	r1, #100	; 0x64
				delta_low =  delta * velocityfactor;			
    7830:	b2ab      	uxth	r3, r5
				delta_high = delta * (velocityfactor * 2 - 1);
    7832:	fa1f f78a 	uxth.w	r7, sl
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7836:	fb04 2201 	mla	r2, r4, r1, r2
                uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    783a:	f10d 0e10 	add.w	lr, sp, #16
    783e:	6871      	ldr	r1, [r6, #4]
    7840:	6830      	ldr	r0, [r6, #0]
    7842:	46f4      	mov	ip, lr
    7844:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    7848:	493b      	ldr	r1, [pc, #236]	; (7938 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    784a:	3608      	adds	r6, #8
    784c:	428e      	cmp	r6, r1
    784e:	46e6      	mov	lr, ip
    7850:	d1f5      	bne.n	783e <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ca>
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 
    7852:	a908      	add	r1, sp, #32
    7854:	4421      	add	r1, r4
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7856:	6214      	str	r4, [r2, #32]
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 
    7858:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    785c:	6251      	str	r1, [r2, #36]	; 0x24
				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    785e:	9903      	ldr	r1, [sp, #12]
    7860:	4421      	add	r1, r4
    7862:	f891 c09c 	ldrb.w	ip, [r1, #156]	; 0x9c
				uint8_t new_abs_low_velocity_value = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    7866:	f891 60dc 	ldrb.w	r6, [r1, #220]	; 0xdc
				uint8_t new_abs_high_velocity_value = grid_en16_helper_template_e_abs_high_velocity[bank][i];
    786a:	f891 011c 	ldrb.w	r0, [r1, #284]	; 0x11c
                
				uint8_t new_rel_no_velocity_value =  template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL];
    786e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
				
				if (delta != 0){
                    
                    
                    // ABSOLUTE NO VELOCITY						
					if (new_abs_no_velocity_value + delta < 0){
    7872:	44cc      	add	ip, r9
    7874:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    7878:	f000 80d3 	beq.w	7a22 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ae>
						new_abs_no_velocity_value = 0;
					}
					else if (new_abs_no_velocity_value + delta > 127){
    787c:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    7880:	f300 80d2 	bgt.w	7a28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b4>
						new_abs_no_velocity_value = 127;
					}
					else{
						new_abs_no_velocity_value += delta;
    7884:	fa5f fc8c 	uxtb.w	ip, ip
					}	
                    
                    // ABSOLUTE LOW VELOCITY						
					if (new_abs_low_velocity_value + delta_low < 0){
    7888:	1975      	adds	r5, r6, r5
    788a:	b2db      	uxtb	r3, r3
    788c:	f100 80cf 	bmi.w	7a2e <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ba>
						new_abs_low_velocity_value = 0;
					}
					else if (new_abs_low_velocity_value + delta_low > 127){
    7890:	2d7f      	cmp	r5, #127	; 0x7f
    7892:	f300 80ce 	bgt.w	7a32 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3be>
						new_abs_low_velocity_value = 127;
					}
					else{
						new_abs_low_velocity_value += delta_low;
    7896:	441e      	add	r6, r3
    7898:	b2f6      	uxtb	r6, r6
					}	
  					
                    // ABSOLUTE HIGH VELOCITY						
					if (new_abs_high_velocity_value + delta_high < 0){
    789a:	eb10 0a0a 	adds.w	sl, r0, sl
    789e:	b2ff      	uxtb	r7, r7
    78a0:	f100 80c9 	bmi.w	7a36 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c2>
						new_abs_high_velocity_value = 0;
					}
					else if (new_abs_high_velocity_value + delta_high > 127){
    78a4:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    78a8:	f300 80c7 	bgt.w	7a3a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c6>
						new_abs_high_velocity_value = 127;
					}
					else{
						new_abs_high_velocity_value += delta_high;
    78ac:	4438      	add	r0, r7
    78ae:	b2c0      	uxtb	r0, r0
					}	



                    // RELATIVE NO VELOCITY
					if (new_rel_no_velocity_value == 255){
    78b0:	29ff      	cmp	r1, #255	; 0xff
    78b2:	f040 80c4 	bne.w	7a3e <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ca>
						if (delta>0){
							new_rel_no_velocity_value = 65;
						}
						else{
							new_rel_no_velocity_value = 63;
    78b6:	f1b9 0f01 	cmp.w	r9, #1
					}
                    
                    // RELATIVE LOW VELOCITY
					if (new_rel_low_velocity_value == 255){
                        
                        new_rel_low_velocity_value = 64 + delta_low;
    78ba:	f103 0340 	add.w	r3, r3, #64	; 0x40
							new_rel_no_velocity_value = 63;
    78be:	bf0c      	ite	eq
    78c0:	2541      	moveq	r5, #65	; 0x41
    78c2:	253f      	movne	r5, #63	; 0x3f
                        new_rel_low_velocity_value = 64 + delta_low;
    78c4:	b2db      	uxtb	r3, r3
					}
                    
                    // RELATIVE HIGH VELOCITY
					if (new_rel_high_velocity_value == 255){
				
                        new_rel_high_velocity_value = 64 + delta_high;
    78c6:	3740      	adds	r7, #64	; 0x40
	
                    
                    
					
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL] = new_rel_no_velocity_value;
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_LOW] = new_rel_low_velocity_value;
    78c8:	e9c2 530d 	strd	r5, r3, [r2, #52]	; 0x34
                    
                    
                    
                    
                    
                    if (button_value == 1){
    78cc:	9b01      	ldr	r3, [sp, #4]
    78ce:	4914      	ldr	r1, [pc, #80]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    78d0:	4d1d      	ldr	r5, [pc, #116]	; (7948 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
						new_rel_high_velocity_value += delta_high;
    78d2:	b2ff      	uxtb	r7, r7
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_HIGH] = new_rel_high_velocity_value;
    78d4:	63d7      	str	r7, [r2, #60]	; 0x3c
                    if (button_value == 1){
    78d6:	2b00      	cmp	r3, #0
    78d8:	f000 80b8 	beq.w	7a4c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d8>
                        
                        // ABS is only updated if nonpush rotation event happened
                        grid_en16_helper_template_e_abs[bank][i] = new_abs_no_velocity_value;
    78dc:	9b02      	ldr	r3, [sp, #8]
                        
                        // ABS high velocity
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = new_abs_high_velocity_value;
                        
                        
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);				
    78de:	7bc9      	ldrb	r1, [r1, #15]
                        grid_en16_helper_template_e_abs[bank][i] = new_abs_no_velocity_value;
    78e0:	4443      	add	r3, r8
    78e2:	4423      	add	r3, r4
    78e4:	f883 c09c 	strb.w	ip, [r3, #156]	; 0x9c
                        grid_en16_helper_template_e_abs_low_velocity[bank][i] = new_abs_low_velocity_value;
    78e8:	f883 60dc 	strb.w	r6, [r3, #220]	; 0xdc
                        grid_en16_helper_template_e_abs_high_velocity[bank][i] = new_abs_high_velocity_value;
    78ec:	f883 011c 	strb.w	r0, [r3, #284]	; 0x11c
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = new_abs_low_velocity_value;
    78f0:	e9c2 c60a 	strd	ip, r6, [r2, #40]	; 0x28
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = new_abs_high_velocity_value;
    78f4:	6310      	str	r0, [r2, #48]	; 0x30
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);				
    78f6:	2301      	movs	r3, #1
                    }
                    else{
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_ENCPUSHROT);
    78f8:	480e      	ldr	r0, [pc, #56]	; (7934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    78fa:	4622      	mov	r2, r4
    78fc:	47a8      	blx	r5
	for (uint8_t j=0; j<16; j++){
    78fe:	f10b 0b01 	add.w	fp, fp, #1
    7902:	f1bb 0f10 	cmp.w	fp, #16
    7906:	f47f aed1 	bne.w	76ac <grid_module_en16_reva_hardware_transfer_complete_cb+0x38>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    790a:	4b10      	ldr	r3, [pc, #64]	; (794c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    790c:	2200      	movs	r2, #0
    790e:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    7910:	4b0f      	ldr	r3, [pc, #60]	; (7950 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
}
    7912:	b009      	add	sp, #36	; 0x24
    7914:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	grid_module_en16_reva_hardware_start_transfer();
    7918:	4718      	bx	r3
    791a:	bf00      	nop
    791c:	41008000 	.word	0x41008000
    7920:	20006fa4 	.word	0x20006fa4
    7924:	000096a3 	.word	0x000096a3
    7928:	20000318 	.word	0x20000318
    792c:	20004039 	.word	0x20004039
    7930:	200115d8 	.word	0x200115d8
    7934:	20006f98 	.word	0x20006f98
    7938:	000155c2 	.word	0x000155c2
    793c:	00009745 	.word	0x00009745
    7940:	00009741 	.word	0x00009741
    7944:	000155b2 	.word	0x000155b2
    7948:	0000a9ad 	.word	0x0000a9ad
    794c:	200146bc 	.word	0x200146bc
    7950:	0000763d 	.word	0x0000763d
    7954:	2000068e 	.word	0x2000068e
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7958:	b233      	sxth	r3, r6
		grid_sys_state.bank_active_changed = 0;
    795a:	2400      	movs	r4, #0
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    795c:	ea4f 1b03 	mov.w	fp, r3, lsl #4
    7960:	f8df 8108 	ldr.w	r8, [pc, #264]	; 7a6c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f8>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_en16_helper_template_b_tgl2[bank][i];
    7964:	f8df a108 	ldr.w	sl, [pc, #264]	; 7a70 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3fc>
		grid_sys_state.bank_active_changed = 0;
    7968:	747c      	strb	r4, [r7, #17]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    796a:	465d      	mov	r5, fp
    796c:	f8d8 3004 	ldr.w	r3, [r8, #4]
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7970:	f8df c100 	ldr.w	ip, [pc, #256]	; 7a74 <grid_module_en16_reva_hardware_transfer_complete_cb+0x400>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7974:	445b      	add	r3, fp
    7976:	2164      	movs	r1, #100	; 0x64
    7978:	68db      	ldr	r3, [r3, #12]
    797a:	b2e2      	uxtb	r2, r4
    797c:	fb01 3304 	mla	r3, r1, r4, r3
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7980:	f10d 0e10 	add.w	lr, sp, #16
    7984:	f8dc 1004 	ldr.w	r1, [ip, #4]
    7988:	f8dc 0000 	ldr.w	r0, [ip]
    798c:	46f1      	mov	r9, lr
    798e:	e8a9 0003 	stmia.w	r9!, {r0, r1}
    7992:	4933      	ldr	r1, [pc, #204]	; (7a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ec>)
    7994:	f10c 0c08 	add.w	ip, ip, #8
    7998:	458c      	cmp	ip, r1
    799a:	46ce      	mov	lr, r9
    799c:	d1f2      	bne.n	7984 <grid_module_en16_reva_hardware_transfer_complete_cb+0x310>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    799e:	a904      	add	r1, sp, #16
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    79a0:	60dc      	str	r4, [r3, #12]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    79a2:	5d09      	ldrb	r1, [r1, r4]
    79a4:	6119      	str	r1, [r3, #16]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_en16_helper_template_b_tgl2[bank][i];
    79a6:	f815 000a 	ldrb.w	r0, [r5, sl]
    79aa:	6198      	str	r0, [r3, #24]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_en16_helper_template_b_tgl3[bank][i];
    79ac:	482d      	ldr	r0, [pc, #180]	; (7a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f0>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    79ae:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7a78 <grid_module_en16_reva_hardware_transfer_complete_cb+0x404>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_en16_helper_template_b_tgl3[bank][i];
    79b2:	5c28      	ldrb	r0, [r5, r0]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    79b4:	6259      	str	r1, [r3, #36]	; 0x24
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER] = res_index;
    79b6:	e9c3 0407 	strd	r0, r4, [r3, #28]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS] = grid_en16_helper_template_e_abs[bank][i];
    79ba:	492b      	ldr	r1, [pc, #172]	; (7a68 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f4>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    79bc:	9200      	str	r2, [sp, #0]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS] = grid_en16_helper_template_e_abs[bank][i];
    79be:	5c68      	ldrb	r0, [r5, r1]
    79c0:	6298      	str	r0, [r3, #40]	; 0x28
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    79c2:	f101 0040 	add.w	r0, r1, #64	; 0x40
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = grid_en16_helper_template_e_abs_high_velocity[bank][i];			
    79c6:	3180      	adds	r1, #128	; 0x80
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    79c8:	5c28      	ldrb	r0, [r5, r0]
    79ca:	62d8      	str	r0, [r3, #44]	; 0x2c
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = grid_en16_helper_template_e_abs_high_velocity[bank][i];			
    79cc:	5c69      	ldrb	r1, [r5, r1]
    79ce:	6319      	str	r1, [r3, #48]	; 0x30
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    79d0:	4640      	mov	r0, r8
    79d2:	7bf9      	ldrb	r1, [r7, #15]
    79d4:	2300      	movs	r3, #0
    79d6:	47c8      	blx	r9
            grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    79d8:	3401      	adds	r4, #1
    79da:	7bf9      	ldrb	r1, [r7, #15]
    79dc:	9a00      	ldr	r2, [sp, #0]
    79de:	2301      	movs	r3, #1
    79e0:	4640      	mov	r0, r8
    79e2:	47c8      	blx	r9
		for (uint8_t i = 0; i<16; i++)
    79e4:	2c10      	cmp	r4, #16
    79e6:	f105 0501 	add.w	r5, r5, #1
    79ea:	d1bf      	bne.n	796c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>
    79ec:	e655      	b.n	769a <grid_module_en16_reva_hardware_transfer_complete_cb+0x26>
					else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    79ee:	293f      	cmp	r1, #63	; 0x3f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    79f0:	bf08      	it	eq
    79f2:	4663      	moveq	r3, ip
    79f4:	e6bf      	b.n	7776 <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
 					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    79f6:	f811 3c10 	ldrb.w	r3, [r1, #-16]
    79fa:	6113      	str	r3, [r2, #16]
 					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;
    79fc:	2300      	movs	r3, #0
    79fe:	6153      	str	r3, [r2, #20]
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    7a00:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7a04:	2305      	movs	r3, #5
    7a06:	e6c6      	b.n	7796 <grid_module_en16_reva_hardware_transfer_complete_cb+0x122>
                if (a_prev == 0 && grid_ui_encoder_array[i].phase_change_lock == 0){
    7a08:	7b5a      	ldrb	r2, [r3, #13]
    7a0a:	bb2a      	cbnz	r2, 7a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
    7a0c:	7bd9      	ldrb	r1, [r3, #15]
    7a0e:	b921      	cbnz	r1, 7a1a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a6>
                    grid_ui_encoder_array[i].phase_change_lock = 1;
    7a10:	f04f 0901 	mov.w	r9, #1
    7a14:	f883 900f 	strb.w	r9, [r3, #15]
    7a18:	e6d6      	b.n	77c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
			int16_t delta = 0;
    7a1a:	4691      	mov	r9, r2
    7a1c:	e6d4      	b.n	77c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
					elapsed_ms = 25;
    7a1e:	2019      	movs	r0, #25
    7a20:	e6e6      	b.n	77f0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x17c>
						new_abs_no_velocity_value = 0;
    7a22:	f04f 0c00 	mov.w	ip, #0
    7a26:	e72f      	b.n	7888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
						new_abs_no_velocity_value = 127;
    7a28:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
    7a2c:	e72c      	b.n	7888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
						new_abs_low_velocity_value = 0;
    7a2e:	2600      	movs	r6, #0
    7a30:	e733      	b.n	789a <grid_module_en16_reva_hardware_transfer_complete_cb+0x226>
						new_abs_low_velocity_value = 127;
    7a32:	267f      	movs	r6, #127	; 0x7f
    7a34:	e731      	b.n	789a <grid_module_en16_reva_hardware_transfer_complete_cb+0x226>
						new_abs_high_velocity_value = 0;
    7a36:	2000      	movs	r0, #0
    7a38:	e73a      	b.n	78b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x23c>
						new_abs_high_velocity_value = 127;
    7a3a:	207f      	movs	r0, #127	; 0x7f
    7a3c:	e738      	b.n	78b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x23c>
						new_rel_no_velocity_value += delta;
    7a3e:	4489      	add	r9, r1
						new_rel_low_velocity_value += delta_low;
    7a40:	440b      	add	r3, r1
						new_rel_no_velocity_value += delta;
    7a42:	fa5f f589 	uxtb.w	r5, r9
						new_rel_low_velocity_value += delta_low;
    7a46:	b2db      	uxtb	r3, r3
						new_rel_high_velocity_value += delta_high;
    7a48:	440f      	add	r7, r1
    7a4a:	e73d      	b.n	78c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x254>
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_ENCPUSHROT);
    7a4c:	7bc9      	ldrb	r1, [r1, #15]
    7a4e:	230d      	movs	r3, #13
    7a50:	e752      	b.n	78f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x284>
            if (a_now == 0 && b_now == 0){
    7a52:	b90e      	cbnz	r6, 7a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
                grid_ui_encoder_array[i].phase_change_lock = 0;
    7a54:	19eb      	adds	r3, r5, r7
    7a56:	73de      	strb	r6, [r3, #15]
			int16_t delta = 0;
    7a58:	f04f 0900 	mov.w	r9, #0
    7a5c:	e6b4      	b.n	77c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
    7a5e:	bf00      	nop
    7a60:	000155c2 	.word	0x000155c2
    7a64:	200006ea 	.word	0x200006ea
    7a68:	2000072a 	.word	0x2000072a
    7a6c:	20006f98 	.word	0x20006f98
    7a70:	200006aa 	.word	0x200006aa
    7a74:	000155b2 	.word	0x000155b2
    7a78:	0000adf9 	.word	0x0000adf9

00007a7c <grid_module_en16_reva_hardware_init>:
    7a7c:	4b0f      	ldr	r3, [pc, #60]	; (7abc <grid_module_en16_reva_hardware_init+0x40>)
    7a7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

void grid_module_en16_reva_hardware_init(void){
    7a82:	b510      	push	{r4, lr}
    7a84:	615a      	str	r2, [r3, #20]
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    7a86:	4c0e      	ldr	r4, [pc, #56]	; (7ac0 <grid_module_en16_reva_hardware_init+0x44>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7a88:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7a8e:	629a      	str	r2, [r3, #40]	; 0x28
    7a90:	4a0c      	ldr	r2, [pc, #48]	; (7ac4 <grid_module_en16_reva_hardware_init+0x48>)
    7a92:	629a      	str	r2, [r3, #40]	; 0x28
    7a94:	2103      	movs	r1, #3
    7a96:	4b0c      	ldr	r3, [pc, #48]	; (7ac8 <grid_module_en16_reva_hardware_init+0x4c>)
    7a98:	4620      	mov	r0, r4
    7a9a:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 1000000); // was 400000 check clock div setting
    7a9c:	490b      	ldr	r1, [pc, #44]	; (7acc <grid_module_en16_reva_hardware_init+0x50>)
    7a9e:	4b0c      	ldr	r3, [pc, #48]	; (7ad0 <grid_module_en16_reva_hardware_init+0x54>)
    7aa0:	4620      	mov	r0, r4
    7aa2:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    7aa4:	490b      	ldr	r1, [pc, #44]	; (7ad4 <grid_module_en16_reva_hardware_init+0x58>)
    7aa6:	4b0c      	ldr	r3, [pc, #48]	; (7ad8 <grid_module_en16_reva_hardware_init+0x5c>)
    7aa8:	4620      	mov	r0, r4
    7aaa:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    7aac:	4620      	mov	r0, r4
    7aae:	4a0b      	ldr	r2, [pc, #44]	; (7adc <grid_module_en16_reva_hardware_init+0x60>)
    7ab0:	4b0b      	ldr	r3, [pc, #44]	; (7ae0 <grid_module_en16_reva_hardware_init+0x64>)


}
    7ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    7ab6:	2100      	movs	r1, #0
    7ab8:	4718      	bx	r3
    7aba:	bf00      	nop
    7abc:	41008000 	.word	0x41008000
    7ac0:	20014ad0 	.word	0x20014ad0
    7ac4:	c0000020 	.word	0xc0000020
    7ac8:	0000e449 	.word	0x0000e449
    7acc:	000f4240 	.word	0x000f4240
    7ad0:	0000e40d 	.word	0x0000e40d
    7ad4:	2000403c 	.word	0x2000403c
    7ad8:	0000e52d 	.word	0x0000e52d
    7adc:	00007675 	.word	0x00007675
    7ae0:	0000e4e9 	.word	0x0000e4e9

00007ae4 <grid_module_en16_reva_init>:

void grid_module_en16_reva_init(){
    7ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	
	grid_led_lowlevel_init(&grid_led_state, 16);
    7ae8:	4b1d      	ldr	r3, [pc, #116]	; (7b60 <grid_module_en16_reva_init+0x7c>)
    7aea:	481e      	ldr	r0, [pc, #120]	; (7b64 <grid_module_en16_reva_init+0x80>)

	
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++)
	{
		
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    7aec:	4e1e      	ldr	r6, [pc, #120]	; (7b68 <grid_module_en16_reva_init+0x84>)
    7aee:	4f1f      	ldr	r7, [pc, #124]	; (7b6c <grid_module_en16_reva_init+0x88>)
		
		for(uint8_t j=0; j<16; j++){
		
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_ENCODER);	
    7af0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 7b80 <grid_module_en16_reva_init+0x9c>
	grid_led_lowlevel_init(&grid_led_state, 16);
    7af4:	2110      	movs	r1, #16
    7af6:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);	
    7af8:	481b      	ldr	r0, [pc, #108]	; (7b68 <grid_module_en16_reva_init+0x84>)
    7afa:	4b1d      	ldr	r3, [pc, #116]	; (7b70 <grid_module_en16_reva_init+0x8c>)
    7afc:	2104      	movs	r1, #4
    7afe:	4798      	blx	r3
    7b00:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    7b02:	2210      	movs	r2, #16
    7b04:	b2e1      	uxtb	r1, r4
    7b06:	4630      	mov	r0, r6
    7b08:	47b8      	blx	r7
		for(uint8_t j=0; j<16; j++){
    7b0a:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    7b0e:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_ENCODER);	
    7b10:	6870      	ldr	r0, [r6, #4]
    7b12:	b2e9      	uxtb	r1, r5
    7b14:	2203      	movs	r2, #3
    7b16:	4448      	add	r0, r9
    7b18:	3501      	adds	r5, #1
    7b1a:	47c0      	blx	r8
		for(uint8_t j=0; j<16; j++){
    7b1c:	2d10      	cmp	r5, #16
    7b1e:	d1f7      	bne.n	7b10 <grid_module_en16_reva_init+0x2c>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++)
    7b20:	3401      	adds	r4, #1
    7b22:	2c04      	cmp	r4, #4
    7b24:	d1ed      	bne.n	7b02 <grid_module_en16_reva_init+0x1e>
    7b26:	2200      	movs	r2, #0
    7b28:	4b12      	ldr	r3, [pc, #72]	; (7b74 <grid_module_en16_reva_init+0x90>)
	// initialize local encoder helper struct
	for (uint8_t j = 0; j<16; j++)
	{
		grid_ui_encoder_array[j].controller_number = j;
		
		grid_ui_encoder_array[j].button_value = 1;
    7b2a:	2001      	movs	r0, #1
		grid_ui_encoder_array[j].button_changed = 0; 
    7b2c:	4611      	mov	r1, r2
		grid_ui_encoder_array[j].rotation_value = 0;
		grid_ui_encoder_array[j].rotation_changed = 1;
		grid_ui_encoder_array[j].rotation_direction = 0;
		grid_ui_encoder_array[j].last_real_time = -1;
    7b2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		grid_ui_encoder_array[j].controller_number = j;
    7b32:	701a      	strb	r2, [r3, #0]
		grid_ui_encoder_array[j].button_value = 1;
    7b34:	3201      	adds	r2, #1
	for (uint8_t j = 0; j<16; j++)
    7b36:	2a10      	cmp	r2, #16
		grid_ui_encoder_array[j].button_value = 1;
    7b38:	7058      	strb	r0, [r3, #1]
		grid_ui_encoder_array[j].button_changed = 0; 
    7b3a:	7099      	strb	r1, [r3, #2]
		grid_ui_encoder_array[j].rotation_value = 0;
    7b3c:	70d9      	strb	r1, [r3, #3]
		grid_ui_encoder_array[j].rotation_changed = 1;
    7b3e:	7118      	strb	r0, [r3, #4]
		grid_ui_encoder_array[j].rotation_direction = 0;
    7b40:	7159      	strb	r1, [r3, #5]
		grid_ui_encoder_array[j].last_real_time = -1;
    7b42:	609c      	str	r4, [r3, #8]
		grid_ui_encoder_array[j].velocity = 0;
    7b44:	7319      	strb	r1, [r3, #12]
		grid_ui_encoder_array[j].phase_a_previous = 1;
    7b46:	7358      	strb	r0, [r3, #13]
		grid_ui_encoder_array[j].phase_b_previous = 1;	
    7b48:	7398      	strb	r0, [r3, #14]
        
        grid_ui_encoder_array[j].phase_change_lock = 0;
    7b4a:	73d9      	strb	r1, [r3, #15]
	for (uint8_t j = 0; j<16; j++)
    7b4c:	f103 0310 	add.w	r3, r3, #16
    7b50:	d1ef      	bne.n	7b32 <grid_module_en16_reva_init+0x4e>
		
	}
	
	
	grid_module_en16_reva_hardware_init();
    7b52:	4b09      	ldr	r3, [pc, #36]	; (7b78 <grid_module_en16_reva_init+0x94>)
    7b54:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
	
}
    7b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_en16_reva_hardware_start_transfer();
    7b5a:	4b08      	ldr	r3, [pc, #32]	; (7b7c <grid_module_en16_reva_init+0x98>)
    7b5c:	4718      	bx	r3
    7b5e:	bf00      	nop
    7b60:	00006e95 	.word	0x00006e95
    7b64:	200146a0 	.word	0x200146a0
    7b68:	20006f98 	.word	0x20006f98
    7b6c:	00009a3d 	.word	0x00009a3d
    7b70:	00009a09 	.word	0x00009a09
    7b74:	200115d8 	.word	0x200115d8
    7b78:	00007a7d 	.word	0x00007a7d
    7b7c:	0000763d 	.word	0x0000763d
    7b80:	0000ace5 	.word	0x0000ace5

00007b84 <grid_module_pbf4_reva_hardware_start_transfer>:
static uint8_t grid_pbf4_helper_template_b_abs[16] = {0};
	
static uint8_t grid_pbf4_helper_template_b_tgl2[GRID_SYS_BANK_MAXNUMBER][16] = {0};
static uint8_t grid_pbf4_helper_template_b_tgl3[GRID_SYS_BANK_MAXNUMBER][16] = {0};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    7b84:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    7b86:	4c04      	ldr	r4, [pc, #16]	; (7b98 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    7b88:	4804      	ldr	r0, [pc, #16]	; (7b9c <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    7b8a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    7b8c:	4623      	mov	r3, r4
    7b8e:	4804      	ldr	r0, [pc, #16]	; (7ba0 <grid_module_pbf4_reva_hardware_start_transfer+0x1c>)
	
}
    7b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    7b94:	4718      	bx	r3
    7b96:	bf00      	nop
    7b98:	0000d8bd 	.word	0x0000d8bd
    7b9c:	20014be4 	.word	0x20014be4
    7ba0:	20014db8 	.word	0x20014db8
    7ba4:	00000000 	.word	0x00000000

00007ba8 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    7ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    7bac:	4aa8      	ldr	r2, [pc, #672]	; (7e50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    7bae:	7813      	ldrb	r3, [r2, #0]
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    7bb0:	b08b      	sub	sp, #44	; 0x2c
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    7bb2:	b933      	cbnz	r3, 7bc2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    7bb4:	7813      	ldrb	r3, [r2, #0]
    7bb6:	3301      	adds	r3, #1
    7bb8:	b2db      	uxtb	r3, r3
    7bba:	7013      	strb	r3, [r2, #0]
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
	grid_module_pbf4_reva_hardware_start_transfer();
}
    7bbc:	b00b      	add	sp, #44	; 0x2c
    7bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_state.bank_active_changed){
    7bc2:	4ba4      	ldr	r3, [pc, #656]	; (7e54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    7bc4:	7c5a      	ldrb	r2, [r3, #17]
    7bc6:	469a      	mov	sl, r3
    7bc8:	bb02      	cbnz	r2, 7c0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x64>
	uint16_t adcresult_0 = 0;
    7bca:	2300      	movs	r3, #0
    7bcc:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t adcresult_1 = 0;
    7bd0:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    7bd4:	4ba0      	ldr	r3, [pc, #640]	; (7e58 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    7bd6:	49a1      	ldr	r1, [pc, #644]	; (7e5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    7bd8:	781a      	ldrb	r2, [r3, #0]
    7bda:	3208      	adds	r2, #8
    7bdc:	5c8d      	ldrb	r5, [r1, r2]
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7bde:	781a      	ldrb	r2, [r3, #0]
    7be0:	b2d2      	uxtb	r2, r2
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    7be2:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7be4:	5c8c      	ldrb	r4, [r1, r2]
	grid_module_pbf4_reva_mux++;
    7be6:	781a      	ldrb	r2, [r3, #0]
    7be8:	3201      	adds	r2, #1
    7bea:	b2d2      	uxtb	r2, r2
    7bec:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    7bee:	781a      	ldrb	r2, [r3, #0]
    7bf0:	f002 0207 	and.w	r2, r2, #7
    7bf4:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    7bf6:	781a      	ldrb	r2, [r3, #0]
    7bf8:	f012 0f01 	tst.w	r2, #1
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7bfc:	b2e4      	uxtb	r4, r4
    7bfe:	4a98      	ldr	r2, [pc, #608]	; (7e60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    7c00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    7c04:	d133      	bne.n	7c6e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0xc6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c06:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
}
    7c0a:	e032      	b.n	7c72 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0xca>
		grid_sys_state.bank_active_changed = 0;
    7c0c:	2500      	movs	r5, #0
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7c0e:	4c95      	ldr	r4, [pc, #596]	; (7e64 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7c10:	4e95      	ldr	r6, [pc, #596]	; (7e68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
		grid_sys_state.bank_active_changed = 0;
    7c12:	745d      	strb	r5, [r3, #17]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7c14:	2764      	movs	r7, #100	; 0x64
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7c16:	6863      	ldr	r3, [r4, #4]
    7c18:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c1c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    7c20:	b2ea      	uxtb	r2, r5
    7c22:	7a5b      	ldrb	r3, [r3, #9]
    7c24:	4293      	cmp	r3, r2
    7c26:	d9d0      	bls.n	7bca <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x22>
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7c28:	6863      	ldr	r3, [r4, #4]
    7c2a:	f89a 100f 	ldrb.w	r1, [sl, #15]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7c2e:	9201      	str	r2, [sp, #4]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7c30:	eb03 1301 	add.w	r3, r3, r1, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7c34:	4620      	mov	r0, r4
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7c36:	68db      	ldr	r3, [r3, #12]
    7c38:	fb07 3302 	mla	r3, r7, r2, r3
    7c3c:	3501      	adds	r5, #1
    7c3e:	60da      	str	r2, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7c40:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c44:	2300      	movs	r3, #0
    7c46:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    7c48:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c4c:	9a01      	ldr	r2, [sp, #4]
    7c4e:	2301      	movs	r3, #1
    7c50:	4620      	mov	r0, r4
    7c52:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    7c54:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c58:	9a01      	ldr	r2, [sp, #4]
    7c5a:	2304      	movs	r3, #4
    7c5c:	4620      	mov	r0, r4
    7c5e:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    7c60:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c64:	9a01      	ldr	r2, [sp, #4]
    7c66:	2305      	movs	r3, #5
    7c68:	4620      	mov	r0, r4
    7c6a:	47b0      	blx	r6
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7c6c:	e7d3      	b.n	7c16 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x6e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c6e:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    7c72:	781a      	ldrb	r2, [r3, #0]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    7c74:	4e7d      	ldr	r6, [pc, #500]	; (7e6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    7c76:	487e      	ldr	r0, [pc, #504]	; (7e70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
	uint32_t input_0 = adcresult_0*1.03;
    7c78:	f8df b210 	ldr.w	fp, [pc, #528]	; 7e8c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>
    7c7c:	f8df 9210 	ldr.w	r9, [pc, #528]	; 7e90 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>
    7c80:	f012 0f02 	tst.w	r2, #2
    7c84:	4a76      	ldr	r2, [pc, #472]	; (7e60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    7c86:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    7c8a:	bf14      	ite	ne
    7c8c:	f8c2 1118 	strne.w	r1, [r2, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c90:	f8c2 1114 	streq.w	r1, [r2, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    7c94:	781b      	ldrb	r3, [r3, #0]
    7c96:	f013 0f04 	tst.w	r3, #4
    7c9a:	4b71      	ldr	r3, [pc, #452]	; (7e60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    7c9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ca0:	bf14      	ite	ne
    7ca2:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7ca6:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    7caa:	2100      	movs	r1, #0
    7cac:	2302      	movs	r3, #2
    7cae:	aa05      	add	r2, sp, #20
    7cb0:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    7cb2:	2302      	movs	r3, #2
    7cb4:	f10d 0216 	add.w	r2, sp, #22
    7cb8:	2100      	movs	r1, #0
    7cba:	486e      	ldr	r0, [pc, #440]	; (7e74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    7cbc:	47b0      	blx	r6
	uint32_t input_0 = adcresult_0*1.03;
    7cbe:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7cc2:	4e6d      	ldr	r6, [pc, #436]	; (7e78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    7cc4:	47d8      	blx	fp
    7cc6:	a360      	add	r3, pc, #384	; (adr r3, 7e48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    7cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ccc:	47b0      	blx	r6
    7cce:	47c8      	blx	r9
    7cd0:	f64f 77ff 	movw	r7, #65535	; 0xffff
    7cd4:	42b8      	cmp	r0, r7
    7cd6:	4680      	mov	r8, r0
    7cd8:	bf28      	it	cs
    7cda:	46b8      	movcs	r8, r7
    7cdc:	9001      	str	r0, [sp, #4]
	adcresult_0 = input_0;
    7cde:	f8ad 8014 	strh.w	r8, [sp, #20]
	uint32_t input_1 = adcresult_1*1.03;
    7ce2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    7ce6:	47d8      	blx	fp
    7ce8:	a357      	add	r3, pc, #348	; (adr r3, 7e48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    7cea:	e9d3 2300 	ldrd	r2, r3, [r3]
    7cee:	47b0      	blx	r6
    7cf0:	47c8      	blx	r9
	adcresult_1 = input_1;
    7cf2:	42b8      	cmp	r0, r7
    7cf4:	4603      	mov	r3, r0
    7cf6:	bf28      	it	cs
    7cf8:	463b      	movcs	r3, r7
    7cfa:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (adc_index_1 == 8 || adc_index_1 == 9){
    7cfe:	f1a4 0308 	sub.w	r3, r4, #8
    7d02:	2b01      	cmp	r3, #1
    7d04:	d972      	bls.n	7dec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
	else if (adc_index_0 > 13){ // BUTTON
    7d06:	2d0d      	cmp	r5, #13
    7d08:	f8df 9188 	ldr.w	r9, [pc, #392]	; 7e94 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>
    7d0c:	f240 80c4 	bls.w	7e98 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>
		uint8_t result_value[2] = {0};
    7d10:	2300      	movs	r3, #0
		if (adcresult_0>60000){
    7d12:	9a01      	ldr	r2, [sp, #4]
		uint8_t result_value[2] = {0};
    7d14:	f8ad 300c 	strh.w	r3, [sp, #12]
		uint8_t result_valid[2] = {0};
    7d18:	f8ad 3010 	strh.w	r3, [sp, #16]
		if (adcresult_0>60000){
    7d1c:	f64e 2360 	movw	r3, #60000	; 0xea60
		result_index[0] = adc_index_0-4;
    7d20:	3d04      	subs	r5, #4
		result_index[1] = adc_index_1-4;
    7d22:	3c04      	subs	r4, #4
		if (adcresult_0>60000){
    7d24:	429a      	cmp	r2, r3
		result_index[0] = adc_index_0-4;
    7d26:	f88d 5008 	strb.w	r5, [sp, #8]
		result_index[1] = adc_index_1-4;
    7d2a:	f88d 4009 	strb.w	r4, [sp, #9]
		if (adcresult_0>60000){
    7d2e:	d963      	bls.n	7df8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x250>
			result_valid[0] = 1;
    7d30:	2301      	movs	r3, #1
    7d32:	f88d 3010 	strb.w	r3, [sp, #16]
		if (adcresult_1>60000){
    7d36:	f64e 2360 	movw	r3, #60000	; 0xea60
    7d3a:	4298      	cmp	r0, r3
    7d3c:	d963      	bls.n	7e06 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x25e>
			result_value[1] = 0;
    7d3e:	2300      	movs	r3, #0
			result_value[1] = 127;
    7d40:	f88d 300d 	strb.w	r3, [sp, #13]
			result_valid[1] = 1;
    7d44:	2301      	movs	r3, #1
    7d46:	f88d 3011 	strb.w	r3, [sp, #17]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7d4a:	4b4c      	ldr	r3, [pc, #304]	; (7e7c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    7d4c:	ac06      	add	r4, sp, #24
    7d4e:	6818      	ldr	r0, [r3, #0]
    7d50:	6859      	ldr	r1, [r3, #4]
    7d52:	4622      	mov	r2, r4
    7d54:	c203      	stmia	r2!, {r0, r1}
    7d56:	3308      	adds	r3, #8
    7d58:	454b      	cmp	r3, r9
    7d5a:	4614      	mov	r4, r2
    7d5c:	d1f7      	bne.n	7d4e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a6>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7d5e:	f8df b104 	ldr.w	fp, [pc, #260]	; 7e64 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>
    7d62:	ab03      	add	r3, sp, #12
    7d64:	f10d 0808 	add.w	r8, sp, #8
    7d68:	9301      	str	r3, [sp, #4]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7d6a:	2400      	movs	r4, #0
    7d6c:	46d9      	mov	r9, fp
			uint8_t res_value = result_value[i];
    7d6e:	9b01      	ldr	r3, [sp, #4]
			uint8_t res_index = result_index[i];
    7d70:	f818 7b01 	ldrb.w	r7, [r8], #1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d74:	4a42      	ldr	r2, [pc, #264]	; (7e80 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
			uint8_t res_value = result_value[i];
    7d76:	f813 6b01 	ldrb.w	r6, [r3], #1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d7a:	5dd2      	ldrb	r2, [r2, r7]
			uint8_t res_value = result_value[i];
    7d7c:	9301      	str	r3, [sp, #4]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7d7e:	f8db 3004 	ldr.w	r3, [fp, #4]
    7d82:	f89a 100f 	ldrb.w	r1, [sl, #15]
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d86:	4296      	cmp	r6, r2
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7d88:	b2c9      	uxtb	r1, r1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d8a:	d02e      	beq.n	7dea <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x242>
			uint8_t res_valid = result_valid[i];
    7d8c:	a804      	add	r0, sp, #16
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d8e:	5c20      	ldrb	r0, [r4, r0]
    7d90:	2801      	cmp	r0, #1
    7d92:	d12a      	bne.n	7dea <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x242>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7d94:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    7d98:	2064      	movs	r0, #100	; 0x64
    7d9a:	68db      	ldr	r3, [r3, #12]
    7d9c:	fb17 f000 	smulbb	r0, r7, r0
    7da0:	4403      	add	r3, r0
				if (grid_pbf4_helper_template_b_abs[res_index] == 0){ // Button Press Event
    7da2:	2a00      	cmp	r2, #0
    7da4:	d13b      	bne.n	7e1e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x276>
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    7da6:	6999      	ldr	r1, [r3, #24]
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    7da8:	2900      	cmp	r1, #0
    7daa:	bf0c      	ite	eq
    7dac:	217f      	moveq	r1, #127	; 0x7f
    7dae:	2100      	movne	r1, #0
    7db0:	6199      	str	r1, [r3, #24]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    7db2:	69d9      	ldr	r1, [r3, #28]
    7db4:	bb69      	cbnz	r1, 7e12 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x26a>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    7db6:	213f      	movs	r1, #63	; 0x3f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7db8:	61d9      	str	r1, [r3, #28]
					grid_pbf4_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    7dba:	f89a 300f 	ldrb.w	r3, [sl, #15]
					grid_pbf4_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    7dbe:	f89a 300f 	ldrb.w	r3, [sl, #15]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    7dc2:	227f      	movs	r2, #127	; 0x7f
					grid_pbf4_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    7dc4:	2300      	movs	r3, #0
                        template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7dc6:	f8d9 1004 	ldr.w	r1, [r9, #4]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    7dca:	4419      	add	r1, r3
    7dcc:	3310      	adds	r3, #16
    7dce:	68c9      	ldr	r1, [r1, #12]
    7dd0:	4401      	add	r1, r0
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7dd2:	2b40      	cmp	r3, #64	; 0x40
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    7dd4:	614a      	str	r2, [r1, #20]
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7dd6:	d1f6      	bne.n	7dc6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x21e>
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DP);
    7dd8:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7ddc:	2304      	movs	r3, #4
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    7dde:	4d29      	ldr	r5, [pc, #164]	; (7e84 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    7de0:	463a      	mov	r2, r7
    7de2:	4658      	mov	r0, fp
    7de4:	47a8      	blx	r5
					grid_pbf4_helper_template_b_abs[result_index[i]] = res_value;
    7de6:	4b26      	ldr	r3, [pc, #152]	; (7e80 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    7de8:	55de      	strb	r6, [r3, r7]
		for (uint8_t i=0; i<2; i++)
    7dea:	b184      	cbz	r4, 7e0e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x266>
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    7dec:	4a18      	ldr	r2, [pc, #96]	; (7e50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    7dee:	2300      	movs	r3, #0
    7df0:	7013      	strb	r3, [r2, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    7df2:	4b25      	ldr	r3, [pc, #148]	; (7e88 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    7df4:	4798      	blx	r3
    7df6:	e6e1      	b.n	7bbc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x14>
		else if (adcresult_0<200){
    7df8:	9b01      	ldr	r3, [sp, #4]
    7dfa:	2bc7      	cmp	r3, #199	; 0xc7
    7dfc:	d89b      	bhi.n	7d36 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x18e>
			result_value[0] = 127;
    7dfe:	237f      	movs	r3, #127	; 0x7f
    7e00:	f88d 300c 	strb.w	r3, [sp, #12]
    7e04:	e794      	b.n	7d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x188>
		else if (adcresult_1<200){
    7e06:	28c7      	cmp	r0, #199	; 0xc7
    7e08:	d89f      	bhi.n	7d4a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a2>
			result_value[1] = 127;
    7e0a:	237f      	movs	r3, #127	; 0x7f
    7e0c:	e798      	b.n	7d40 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x198>
    7e0e:	2401      	movs	r4, #1
    7e10:	e7ad      	b.n	7d6e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1c6>
					else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    7e12:	293f      	cmp	r1, #63	; 0x3f
    7e14:	d101      	bne.n	7e1a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x272>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7e16:	217f      	movs	r1, #127	; 0x7f
    7e18:	e7ce      	b.n	7db8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x210>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 0;
    7e1a:	61da      	str	r2, [r3, #28]
    7e1c:	e7cd      	b.n	7dba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x212>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7e1e:	aa0a      	add	r2, sp, #40	; 0x28
    7e20:	19d1      	adds	r1, r2, r7
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    7e22:	60df      	str	r7, [r3, #12]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7e24:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    7e28:	6119      	str	r1, [r3, #16]
    7e2a:	2300      	movs	r3, #0
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7e2c:	461a      	mov	r2, r3
                        template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7e2e:	f8d9 1004 	ldr.w	r1, [r9, #4]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7e32:	4419      	add	r1, r3
    7e34:	3310      	adds	r3, #16
    7e36:	68c9      	ldr	r1, [r1, #12]
    7e38:	4401      	add	r1, r0
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7e3a:	2b40      	cmp	r3, #64	; 0x40
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7e3c:	614a      	str	r2, [r1, #20]
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7e3e:	d1f6      	bne.n	7e2e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x286>
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    7e40:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7e44:	2305      	movs	r3, #5
    7e46:	e7ca      	b.n	7dde <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x236>
    7e48:	47ae147b 	.word	0x47ae147b
    7e4c:	3ff07ae1 	.word	0x3ff07ae1
    7e50:	20004048 	.word	0x20004048
    7e54:	20006fa4 	.word	0x20006fa4
    7e58:	20014630 	.word	0x20014630
    7e5c:	20000329 	.word	0x20000329
    7e60:	41008000 	.word	0x41008000
    7e64:	20006f98 	.word	0x20006f98
    7e68:	0000adf9 	.word	0x0000adf9
    7e6c:	0000d801 	.word	0x0000d801
    7e70:	20014be4 	.word	0x20014be4
    7e74:	20014db8 	.word	0x20014db8
    7e78:	000126f5 	.word	0x000126f5
    7e7c:	000155c2 	.word	0x000155c2
    7e80:	200007fb 	.word	0x200007fb
    7e84:	0000a9ad 	.word	0x0000a9ad
    7e88:	00007b85 	.word	0x00007b85
    7e8c:	00012621 	.word	0x00012621
    7e90:	00012b19 	.word	0x00012b19
    7e94:	000155d2 	.word	0x000155d2
		if (adc_index_1 == 0 || adc_index_1 == 1){
    7e98:	2c01      	cmp	r4, #1
    7e9a:	4e33      	ldr	r6, [pc, #204]	; (7f68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c0>)
    7e9c:	d85e      	bhi.n	7f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b4>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    7e9e:	ea88 0107 	eor.w	r1, r8, r7
    7ea2:	4628      	mov	r0, r5
    7ea4:	47b0      	blx	r6
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    7ea6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    7eaa:	1a79      	subs	r1, r7, r1
			grid_ain_add_sample(adc_index_1, adcresult_1);
    7eac:	4620      	mov	r0, r4
    7eae:	47b0      	blx	r6
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7eb0:	4a2e      	ldr	r2, [pc, #184]	; (7f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c4>)
		result_index[0] = adc_index_0;
    7eb2:	f88d 5010 	strb.w	r5, [sp, #16]
		result_index[1] = adc_index_1;
    7eb6:	f88d 4011 	strb.w	r4, [sp, #17]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7eba:	ab06      	add	r3, sp, #24
    7ebc:	6810      	ldr	r0, [r2, #0]
    7ebe:	6851      	ldr	r1, [r2, #4]
    7ec0:	461c      	mov	r4, r3
    7ec2:	c403      	stmia	r4!, {r0, r1}
    7ec4:	3208      	adds	r2, #8
    7ec6:	454a      	cmp	r2, r9
    7ec8:	4623      	mov	r3, r4
    7eca:	d1f7      	bne.n	7ebc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
		for (uint8_t i=0; i<2; i++)
    7ecc:	ab04      	add	r3, sp, #16
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7ece:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 7f78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>
    7ed2:	9301      	str	r3, [sp, #4]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7ed4:	f04f 0902 	mov.w	r9, #2
			uint8_t res_index = result_index[i];
    7ed8:	9b01      	ldr	r3, [sp, #4]
    7eda:	f813 4b01 	ldrb.w	r4, [r3], #1
    7ede:	9301      	str	r3, [sp, #4]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7ee0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7ee4:	f89a 200f 	ldrb.w	r2, [sl, #15]
    7ee8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			if (grid_ain_get_changed(res_index)){
    7eec:	4620      	mov	r0, r4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7eee:	68dd      	ldr	r5, [r3, #12]
			if (grid_ain_get_changed(res_index)){
    7ef0:	4b1f      	ldr	r3, [pc, #124]	; (7f70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c8>)
    7ef2:	4798      	blx	r3
    7ef4:	b358      	cbz	r0, 7f4e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3a6>
				uint8_t res_value = grid_ain_get_average(res_index, 7);
    7ef6:	4e1f      	ldr	r6, [pc, #124]	; (7f74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    7ef8:	2107      	movs	r1, #7
    7efa:	4620      	mov	r0, r4
    7efc:	47b0      	blx	r6
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7efe:	2764      	movs	r7, #100	; 0x64
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7f00:	ab0a      	add	r3, sp, #40	; 0x28
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7f02:	fb14 f707 	smulbb	r7, r4, r7
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7f06:	4423      	add	r3, r4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7f08:	443d      	add	r5, r7
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7f0a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7f0e:	60ec      	str	r4, [r5, #12]
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7f10:	612b      	str	r3, [r5, #16]
    7f12:	2500      	movs	r5, #0
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7f14:	4b18      	ldr	r3, [pc, #96]	; (7f78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    7f16:	685a      	ldr	r2, [r3, #4]
    7f18:	442a      	add	r2, r5
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7f1a:	2107      	movs	r1, #7
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7f1c:	68d2      	ldr	r2, [r2, #12]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7f1e:	4620      	mov	r0, r4
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7f20:	eb02 0b07 	add.w	fp, r2, r7
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7f24:	47b0      	blx	r6
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7f26:	2107      	movs	r1, #7
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7f28:	f8cb 0014 	str.w	r0, [fp, #20]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7f2c:	4620      	mov	r0, r4
    7f2e:	47b0      	blx	r6
    7f30:	3510      	adds	r5, #16
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    7f32:	2300      	movs	r3, #0
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7f34:	2d40      	cmp	r5, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7f36:	f8cb 0018 	str.w	r0, [fp, #24]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    7f3a:	f8cb 301c 	str.w	r3, [fp, #28]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7f3e:	d1e9      	bne.n	7f14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x36c>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_AVC7);
    7f40:	4622      	mov	r2, r4
    7f42:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7f46:	4c0d      	ldr	r4, [pc, #52]	; (7f7c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>)
    7f48:	2301      	movs	r3, #1
    7f4a:	4640      	mov	r0, r8
    7f4c:	47a0      	blx	r4
		for (uint8_t i=0; i<2; i++)
    7f4e:	f1b9 0f01 	cmp.w	r9, #1
    7f52:	f43f af4b 	beq.w	7dec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
    7f56:	f04f 0901 	mov.w	r9, #1
    7f5a:	e7bd      	b.n	7ed8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x330>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    7f5c:	4641      	mov	r1, r8
    7f5e:	4628      	mov	r0, r5
    7f60:	47b0      	blx	r6
			grid_ain_add_sample(adc_index_1, adcresult_1);
    7f62:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    7f66:	e7a1      	b.n	7eac <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
    7f68:	00004631 	.word	0x00004631
    7f6c:	000155c2 	.word	0x000155c2
    7f70:	000046f9 	.word	0x000046f9
    7f74:	00004709 	.word	0x00004709
    7f78:	20006f98 	.word	0x20006f98
    7f7c:	0000a9ad 	.word	0x0000a9ad

00007f80 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    7f80:	b570      	push	{r4, r5, r6, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    7f82:	4c0b      	ldr	r4, [pc, #44]	; (7fb0 <grid_module_pbf4_reva_hardware_init+0x30>)
    7f84:	4e0b      	ldr	r6, [pc, #44]	; (7fb4 <grid_module_pbf4_reva_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    7f86:	4d0c      	ldr	r5, [pc, #48]	; (7fb8 <grid_module_pbf4_reva_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    7f88:	4b0c      	ldr	r3, [pc, #48]	; (7fbc <grid_module_pbf4_reva_hardware_init+0x3c>)
    7f8a:	2200      	movs	r2, #0
    7f8c:	4611      	mov	r1, r2
    7f8e:	4620      	mov	r0, r4
    7f90:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    7f92:	2200      	movs	r2, #0
    7f94:	4b09      	ldr	r3, [pc, #36]	; (7fbc <grid_module_pbf4_reva_hardware_init+0x3c>)
    7f96:	4611      	mov	r1, r2
    7f98:	4628      	mov	r0, r5
    7f9a:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    7f9c:	4620      	mov	r0, r4
    7f9e:	4c08      	ldr	r4, [pc, #32]	; (7fc0 <grid_module_pbf4_reva_hardware_init+0x40>)
    7fa0:	2100      	movs	r1, #0
    7fa2:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    7fa4:	4628      	mov	r0, r5
    7fa6:	4623      	mov	r3, r4
    7fa8:	2100      	movs	r1, #0

}
    7faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    7fae:	4718      	bx	r3
    7fb0:	20014be4 	.word	0x20014be4
    7fb4:	0000d789 	.word	0x0000d789
    7fb8:	20014db8 	.word	0x20014db8
    7fbc:	00007ba9 	.word	0x00007ba9
    7fc0:	0000d749 	.word	0x0000d749

00007fc4 <grid_module_pbf4_reva_init>:




void grid_module_pbf4_reva_init(){
    7fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    7fc8:	220e      	movs	r2, #14
    7fca:	4c16      	ldr	r4, [pc, #88]	; (8024 <grid_module_pbf4_reva_init+0x60>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);

	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
		
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7fcc:	4e16      	ldr	r6, [pc, #88]	; (8028 <grid_module_pbf4_reva_init+0x64>)
    7fce:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8044 <grid_module_pbf4_reva_init+0x80>
    7fd2:	4f16      	ldr	r7, [pc, #88]	; (802c <grid_module_pbf4_reva_init+0x68>)
	grid_ain_init(16, 5, 14, 7);
    7fd4:	2307      	movs	r3, #7
    7fd6:	2105      	movs	r1, #5
    7fd8:	2010      	movs	r0, #16
    7fda:	47a0      	blx	r4
	grid_led_lowlevel_init(&grid_led_state, 12);	
    7fdc:	4b14      	ldr	r3, [pc, #80]	; (8030 <grid_module_pbf4_reva_init+0x6c>)
    7fde:	4815      	ldr	r0, [pc, #84]	; (8034 <grid_module_pbf4_reva_init+0x70>)
    7fe0:	210c      	movs	r1, #12
    7fe2:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    7fe4:	4810      	ldr	r0, [pc, #64]	; (8028 <grid_module_pbf4_reva_init+0x64>)
    7fe6:	4b14      	ldr	r3, [pc, #80]	; (8038 <grid_module_pbf4_reva_init+0x74>)
    7fe8:	2104      	movs	r1, #4
    7fea:	4798      	blx	r3
    7fec:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7fee:	220c      	movs	r2, #12
    7ff0:	b2e1      	uxtb	r1, r4
    7ff2:	4630      	mov	r0, r6
    7ff4:	47c8      	blx	r9
		
		for(uint8_t j=0; j<12; j++){
    7ff6:	ea4f 1804 	mov.w	r8, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7ffa:	2500      	movs	r5, #0
			
				
			if (j<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
				
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    7ffc:	6870      	ldr	r0, [r6, #4]
			if (j<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
    7ffe:	2d07      	cmp	r5, #7
    8000:	b2e9      	uxtb	r1, r5
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    8002:	bf94      	ite	ls
    8004:	2201      	movls	r2, #1
			
			}
			else{ // BUTTONS -> MIDI Note On/Off
				
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    8006:	2202      	movhi	r2, #2
    8008:	4440      	add	r0, r8
    800a:	3501      	adds	r5, #1
    800c:	47b8      	blx	r7
		for(uint8_t j=0; j<12; j++){
    800e:	2d0c      	cmp	r5, #12
    8010:	d1f4      	bne.n	7ffc <grid_module_pbf4_reva_init+0x38>
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8012:	3401      	adds	r4, #1
    8014:	2c04      	cmp	r4, #4
    8016:	d1ea      	bne.n	7fee <grid_module_pbf4_reva_init+0x2a>
			}
			
		}	
	}
			
	grid_module_pbf4_reva_hardware_init();
    8018:	4b08      	ldr	r3, [pc, #32]	; (803c <grid_module_pbf4_reva_init+0x78>)
    801a:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
	
    801c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_pbf4_reva_hardware_start_transfer();
    8020:	4b07      	ldr	r3, [pc, #28]	; (8040 <grid_module_pbf4_reva_init+0x7c>)
    8022:	4718      	bx	r3
    8024:	000045ed 	.word	0x000045ed
    8028:	20006f98 	.word	0x20006f98
    802c:	0000ace5 	.word	0x0000ace5
    8030:	00006e95 	.word	0x00006e95
    8034:	200146a0 	.word	0x200146a0
    8038:	00009a09 	.word	0x00009a09
    803c:	00007f81 	.word	0x00007f81
    8040:	00007b85 	.word	0x00007b85
    8044:	00009a3d 	.word	0x00009a3d

00008048 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    8048:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    804a:	4c04      	ldr	r4, [pc, #16]	; (805c <grid_module_po16_revb_hardware_start_transfer+0x14>)
    804c:	4804      	ldr	r0, [pc, #16]	; (8060 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    804e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    8050:	4623      	mov	r3, r4
    8052:	4804      	ldr	r0, [pc, #16]	; (8064 <grid_module_po16_revb_hardware_start_transfer+0x1c>)
	
}
    8054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    8058:	4718      	bx	r3
    805a:	bf00      	nop
    805c:	0000d8bd 	.word	0x0000d8bd
    8060:	20014be4 	.word	0x20014be4
    8064:	20014db8 	.word	0x20014db8

00008068 <grid_module_po16_revb_hardware_transfer_complete_cb>:

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    8068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    806c:	4a88      	ldr	r2, [pc, #544]	; (8290 <grid_module_po16_revb_hardware_transfer_complete_cb+0x228>)
    806e:	7813      	ldrb	r3, [r2, #0]
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    8070:	b089      	sub	sp, #36	; 0x24
    8072:	4614      	mov	r4, r2
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    8074:	b933      	cbnz	r3, 8084 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c>
		grid_module_po16_revb_hardware_transfer_complete++;
    8076:	7813      	ldrb	r3, [r2, #0]
    8078:	3301      	adds	r3, #1
    807a:	b2db      	uxtb	r3, r3
    807c:	7013      	strb	r3, [r2, #0]
	}
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
	grid_module_po16_revb_hardware_start_transfer();
}
    807e:	b009      	add	sp, #36	; 0x24
    8080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_state.bank_active_changed){
    8084:	4d83      	ldr	r5, [pc, #524]	; (8294 <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>)
    8086:	7c6b      	ldrb	r3, [r5, #17]
    8088:	b9fb      	cbnz	r3, 80ca <grid_module_po16_revb_hardware_transfer_complete_cb+0x62>
	uint16_t adcresult_0 = 0;
    808a:	2300      	movs	r3, #0
    808c:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint16_t adcresult_1 = 0;
    8090:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    8094:	7863      	ldrb	r3, [r4, #1]
    8096:	4a80      	ldr	r2, [pc, #512]	; (8298 <grid_module_po16_revb_hardware_transfer_complete_cb+0x230>)
    8098:	3308      	adds	r3, #8
    809a:	5cd7      	ldrb	r7, [r2, r3]
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    809c:	7863      	ldrb	r3, [r4, #1]
    809e:	b2db      	uxtb	r3, r3
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    80a0:	b2ff      	uxtb	r7, r7
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    80a2:	5cd6      	ldrb	r6, [r2, r3]
	grid_module_po16_revb_mux++;
    80a4:	7863      	ldrb	r3, [r4, #1]
    80a6:	3301      	adds	r3, #1
    80a8:	b2db      	uxtb	r3, r3
    80aa:	7063      	strb	r3, [r4, #1]
	grid_module_po16_revb_mux%=8;
    80ac:	7863      	ldrb	r3, [r4, #1]
    80ae:	f003 0307 	and.w	r3, r3, #7
    80b2:	7063      	strb	r3, [r4, #1]
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    80b4:	7863      	ldrb	r3, [r4, #1]
    80b6:	f013 0f01 	tst.w	r3, #1
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    80ba:	b2f6      	uxtb	r6, r6
    80bc:	4b77      	ldr	r3, [pc, #476]	; (829c <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    80be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    80c2:	d128      	bne.n	8116 <grid_module_po16_revb_hardware_transfer_complete_cb+0xae>
    80c4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    80c8:	e027      	b.n	811a <grid_module_po16_revb_hardware_transfer_complete_cb+0xb2>
		grid_sys_state.bank_active_changed = 0;
    80ca:	2600      	movs	r6, #0
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    80cc:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 82b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    80d0:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 82c4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>
		grid_sys_state.bank_active_changed = 0;
    80d4:	746e      	strb	r6, [r5, #17]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    80d6:	f04f 0a64 	mov.w	sl, #100	; 0x64
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    80da:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80de:	7bea      	ldrb	r2, [r5, #15]
    80e0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    80e4:	b2f7      	uxtb	r7, r6
    80e6:	7a5b      	ldrb	r3, [r3, #9]
    80e8:	42bb      	cmp	r3, r7
    80ea:	d9ce      	bls.n	808a <grid_module_po16_revb_hardware_transfer_complete_cb+0x22>
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    80ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80f0:	7bea      	ldrb	r2, [r5, #15]
    80f2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    80f6:	4640      	mov	r0, r8
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    80f8:	68db      	ldr	r3, [r3, #12]
    80fa:	fb0a 3307 	mla	r3, sl, r7, r3
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    80fe:	463a      	mov	r2, r7
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    8100:	60df      	str	r7, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    8102:	7be9      	ldrb	r1, [r5, #15]
    8104:	2300      	movs	r3, #0
    8106:	47c8      	blx	r9
            grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    8108:	7be9      	ldrb	r1, [r5, #15]
    810a:	2301      	movs	r3, #1
    810c:	463a      	mov	r2, r7
    810e:	4640      	mov	r0, r8
    8110:	47c8      	blx	r9
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    8112:	3601      	adds	r6, #1
    8114:	e7e1      	b.n	80da <grid_module_po16_revb_hardware_transfer_complete_cb+0x72>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8116:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    811a:	7863      	ldrb	r3, [r4, #1]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    811c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 82c8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>
    8120:	485f      	ldr	r0, [pc, #380]	; (82a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
	uint32_t input_0 = adcresult_0*1.03;	
    8122:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 82cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>
    8126:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 82d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>
    812a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 82d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>
    812e:	f013 0f02 	tst.w	r3, #2
    8132:	4b5a      	ldr	r3, [pc, #360]	; (829c <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    8134:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    8138:	bf14      	ite	ne
    813a:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    813e:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    8142:	7863      	ldrb	r3, [r4, #1]
    8144:	f013 0f04 	tst.w	r3, #4
    8148:	4b54      	ldr	r3, [pc, #336]	; (829c <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    814a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    814e:	bf14      	ite	ne
    8150:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8154:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    8158:	2100      	movs	r1, #0
    815a:	2302      	movs	r3, #2
    815c:	aa03      	add	r2, sp, #12
    815e:	47c0      	blx	r8
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    8160:	2302      	movs	r3, #2
    8162:	f10d 020e 	add.w	r2, sp, #14
    8166:	2100      	movs	r1, #0
    8168:	484e      	ldr	r0, [pc, #312]	; (82a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x23c>)
    816a:	47c0      	blx	r8
	uint32_t input_0 = adcresult_0*1.03;	
    816c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    8170:	47d8      	blx	fp
    8172:	a345      	add	r3, pc, #276	; (adr r3, 8288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>)
    8174:	e9d3 2300 	ldrd	r2, r3, [r3]
    8178:	47d0      	blx	sl
    817a:	47c8      	blx	r9
	adcresult_0 = input_0;
    817c:	f64f 78ff 	movw	r8, #65535	; 0xffff
    8180:	4540      	cmp	r0, r8
    8182:	bf28      	it	cs
    8184:	4640      	movcs	r0, r8
    8186:	f8ad 000c 	strh.w	r0, [sp, #12]
	uint32_t input_1 = adcresult_1*1.03;	
    818a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    818e:	47d8      	blx	fp
    8190:	a33d      	add	r3, pc, #244	; (adr r3, 8288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>)
    8192:	e9d3 2300 	ldrd	r2, r3, [r3]
    8196:	47d0      	blx	sl
    8198:	47c8      	blx	r9
	adcresult_1 = input_1;
    819a:	4540      	cmp	r0, r8
    819c:	bf28      	it	cs
    819e:	4640      	movcs	r0, r8
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    81a0:	4b41      	ldr	r3, [pc, #260]	; (82a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
	adcresult_1 = input_1;
    81a2:	f8ad 000e 	strh.w	r0, [sp, #14]
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    81a6:	4798      	blx	r3
    81a8:	2808      	cmp	r0, #8
    81aa:	d109      	bne.n	81c0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x158>
		adcresult_0	= 65535 - adcresult_0;
    81ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    81b0:	43db      	mvns	r3, r3
    81b2:	f8ad 300c 	strh.w	r3, [sp, #12]
		adcresult_1 = 65535 - adcresult_1;
    81b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    81ba:	43db      	mvns	r3, r3
    81bc:	f8ad 300e 	strh.w	r3, [sp, #14]
	grid_ain_add_sample(adc_index_0, adcresult_0);
    81c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    81c4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 82d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>
    81c8:	4638      	mov	r0, r7
    81ca:	47c0      	blx	r8
	grid_ain_add_sample(adc_index_1, adcresult_1);
    81cc:	4630      	mov	r0, r6
    81ce:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    81d2:	47c0      	blx	r8
	uint8_t grid_module_po16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    81d4:	4b35      	ldr	r3, [pc, #212]	; (82ac <grid_module_po16_revb_hardware_transfer_complete_cb+0x244>)
	result_index[0] = adc_index_0;
    81d6:	f88d 7008 	strb.w	r7, [sp, #8]
	result_index[1] = adc_index_1;
    81da:	f88d 6009 	strb.w	r6, [sp, #9]
	uint8_t grid_module_po16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    81de:	f103 0710 	add.w	r7, r3, #16
    81e2:	ae04      	add	r6, sp, #16
    81e4:	6818      	ldr	r0, [r3, #0]
    81e6:	6859      	ldr	r1, [r3, #4]
    81e8:	4632      	mov	r2, r6
    81ea:	c203      	stmia	r2!, {r0, r1}
    81ec:	3308      	adds	r3, #8
    81ee:	42bb      	cmp	r3, r7
    81f0:	4616      	mov	r6, r2
    81f2:	d1f7      	bne.n	81e4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x17c>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    81f4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 82b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>
    81f8:	f10d 0a08 	add.w	sl, sp, #8
	for (uint8_t i=0; i<2; i++)
    81fc:	f04f 0900 	mov.w	r9, #0
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8200:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8204:	7bea      	ldrb	r2, [r5, #15]
		uint8_t res_index = result_index[i];
    8206:	f81a 6b01 	ldrb.w	r6, [sl], #1
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    820a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
		if (grid_ain_get_changed(res_index)){
    820e:	4630      	mov	r0, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8210:	68df      	ldr	r7, [r3, #12]
		if (grid_ain_get_changed(res_index)){
    8212:	4b27      	ldr	r3, [pc, #156]	; (82b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    8214:	4798      	blx	r3
    8216:	b350      	cbz	r0, 826e <grid_module_po16_revb_hardware_transfer_complete_cb+0x206>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8218:	2264      	movs	r2, #100	; 0x64
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    821a:	a908      	add	r1, sp, #32
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    821c:	fb16 f202 	smulbb	r2, r6, r2
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    8220:	4431      	add	r1, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8222:	18bb      	adds	r3, r7, r2
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    8224:	f811 1c10 	ldrb.w	r1, [r1, #-16]
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8228:	60de      	str	r6, [r3, #12]
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    822a:	6119      	str	r1, [r3, #16]
    822c:	2700      	movs	r7, #0
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    822e:	4b21      	ldr	r3, [pc, #132]	; (82b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>)
    8230:	9201      	str	r2, [sp, #4]
    8232:	685b      	ldr	r3, [r3, #4]
    8234:	443b      	add	r3, r7
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    8236:	2107      	movs	r1, #7
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    8238:	68db      	ldr	r3, [r3, #12]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    823a:	4630      	mov	r0, r6
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    823c:	eb03 0b02 	add.w	fp, r3, r2
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    8240:	4b1d      	ldr	r3, [pc, #116]	; (82b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    8242:	4798      	blx	r3
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    8244:	4b1c      	ldr	r3, [pc, #112]	; (82b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    8246:	f8cb 0014 	str.w	r0, [fp, #20]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    824a:	2107      	movs	r1, #7
    824c:	4630      	mov	r0, r6
    824e:	4798      	blx	r3
    8250:	3710      	adds	r7, #16
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    8252:	2300      	movs	r3, #0
            for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    8254:	2f40      	cmp	r7, #64	; 0x40
    8256:	9a01      	ldr	r2, [sp, #4]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    8258:	f8cb 0018 	str.w	r0, [fp, #24]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    825c:	f8cb 301c 	str.w	r3, [fp, #28]
            for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    8260:	d1e5      	bne.n	822e <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c6>
			grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_AVC7);		
    8262:	4632      	mov	r2, r6
    8264:	7be9      	ldrb	r1, [r5, #15]
    8266:	4e15      	ldr	r6, [pc, #84]	; (82bc <grid_module_po16_revb_hardware_transfer_complete_cb+0x254>)
    8268:	2301      	movs	r3, #1
    826a:	4640      	mov	r0, r8
    826c:	47b0      	blx	r6
	for (uint8_t i=0; i<2; i++)
    826e:	f1b9 0f00 	cmp.w	r9, #0
    8272:	d004      	beq.n	827e <grid_module_po16_revb_hardware_transfer_complete_cb+0x216>
	grid_module_po16_revb_hardware_transfer_complete = 0;
    8274:	2300      	movs	r3, #0
    8276:	7023      	strb	r3, [r4, #0]
	grid_module_po16_revb_hardware_start_transfer();
    8278:	4b11      	ldr	r3, [pc, #68]	; (82c0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    827a:	4798      	blx	r3
    827c:	e6ff      	b.n	807e <grid_module_po16_revb_hardware_transfer_complete_cb+0x16>
    827e:	f04f 0901 	mov.w	r9, #1
    8282:	e7bd      	b.n	8200 <grid_module_po16_revb_hardware_transfer_complete_cb+0x198>
    8284:	f3af 8000 	nop.w
    8288:	47ae147b 	.word	0x47ae147b
    828c:	3ff07ae1 	.word	0x3ff07ae1
    8290:	2000080d 	.word	0x2000080d
    8294:	20006fa4 	.word	0x20006fa4
    8298:	20000339 	.word	0x20000339
    829c:	41008000 	.word	0x41008000
    82a0:	20014be4 	.word	0x20014be4
    82a4:	20014db8 	.word	0x20014db8
    82a8:	00009885 	.word	0x00009885
    82ac:	000155d2 	.word	0x000155d2
    82b0:	000046f9 	.word	0x000046f9
    82b4:	20006f98 	.word	0x20006f98
    82b8:	00004709 	.word	0x00004709
    82bc:	0000a9ad 	.word	0x0000a9ad
    82c0:	00008049 	.word	0x00008049
    82c4:	0000adf9 	.word	0x0000adf9
    82c8:	0000d801 	.word	0x0000d801
    82cc:	00012621 	.word	0x00012621
    82d0:	000126f5 	.word	0x000126f5
    82d4:	00012b19 	.word	0x00012b19
    82d8:	00004631 	.word	0x00004631

000082dc <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    82dc:	b570      	push	{r4, r5, r6, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    82de:	4c0b      	ldr	r4, [pc, #44]	; (830c <grid_module_po16_revb_hardware_init+0x30>)
    82e0:	4e0b      	ldr	r6, [pc, #44]	; (8310 <grid_module_po16_revb_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    82e2:	4d0c      	ldr	r5, [pc, #48]	; (8314 <grid_module_po16_revb_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    82e4:	4b0c      	ldr	r3, [pc, #48]	; (8318 <grid_module_po16_revb_hardware_init+0x3c>)
    82e6:	2200      	movs	r2, #0
    82e8:	4611      	mov	r1, r2
    82ea:	4620      	mov	r0, r4
    82ec:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    82ee:	2200      	movs	r2, #0
    82f0:	4b09      	ldr	r3, [pc, #36]	; (8318 <grid_module_po16_revb_hardware_init+0x3c>)
    82f2:	4611      	mov	r1, r2
    82f4:	4628      	mov	r0, r5
    82f6:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    82f8:	4620      	mov	r0, r4
    82fa:	4c08      	ldr	r4, [pc, #32]	; (831c <grid_module_po16_revb_hardware_init+0x40>)
    82fc:	2100      	movs	r1, #0
    82fe:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    8300:	4628      	mov	r0, r5
    8302:	4623      	mov	r3, r4
    8304:	2100      	movs	r1, #0

}
    8306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    830a:	4718      	bx	r3
    830c:	20014be4 	.word	0x20014be4
    8310:	0000d789 	.word	0x0000d789
    8314:	20014db8 	.word	0x20014db8
    8318:	00008069 	.word	0x00008069
    831c:	0000d749 	.word	0x0000d749

00008320 <grid_module_po16_revb_init>:




void grid_module_po16_revb_init(){
    8320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    8324:	220e      	movs	r2, #14
    8326:	4c15      	ldr	r4, [pc, #84]	; (837c <grid_module_po16_revb_init+0x5c>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
	
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){	
		
		grid_ui_bank_init(&grid_ui_state, i, 16);
    8328:	4e15      	ldr	r6, [pc, #84]	; (8380 <grid_module_po16_revb_init+0x60>)
    832a:	4f16      	ldr	r7, [pc, #88]	; (8384 <grid_module_po16_revb_init+0x64>)
		
		for(uint8_t j=0; j<16; j++){
			
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    832c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 839c <grid_module_po16_revb_init+0x7c>
	grid_ain_init(16, 5, 14, 7);
    8330:	2307      	movs	r3, #7
    8332:	2105      	movs	r1, #5
    8334:	2010      	movs	r0, #16
    8336:	47a0      	blx	r4
	grid_led_lowlevel_init(&grid_led_state, 16);
    8338:	4b13      	ldr	r3, [pc, #76]	; (8388 <grid_module_po16_revb_init+0x68>)
    833a:	4814      	ldr	r0, [pc, #80]	; (838c <grid_module_po16_revb_init+0x6c>)
    833c:	2110      	movs	r1, #16
    833e:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    8340:	480f      	ldr	r0, [pc, #60]	; (8380 <grid_module_po16_revb_init+0x60>)
    8342:	4b13      	ldr	r3, [pc, #76]	; (8390 <grid_module_po16_revb_init+0x70>)
    8344:	2104      	movs	r1, #4
    8346:	4798      	blx	r3
    8348:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);
    834a:	2210      	movs	r2, #16
    834c:	b2e1      	uxtb	r1, r4
    834e:	4630      	mov	r0, r6
    8350:	47b8      	blx	r7
		for(uint8_t j=0; j<16; j++){
    8352:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);
    8356:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    8358:	6870      	ldr	r0, [r6, #4]
    835a:	b2e9      	uxtb	r1, r5
    835c:	2201      	movs	r2, #1
    835e:	4448      	add	r0, r9
    8360:	3501      	adds	r5, #1
    8362:	47c0      	blx	r8
		for(uint8_t j=0; j<16; j++){
    8364:	2d10      	cmp	r5, #16
    8366:	d1f7      	bne.n	8358 <grid_module_po16_revb_init+0x38>
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){	
    8368:	3401      	adds	r4, #1
    836a:	2c04      	cmp	r4, #4
    836c:	d1ed      	bne.n	834a <grid_module_po16_revb_init+0x2a>

		}
	}
	
	grid_module_po16_revb_hardware_init();
    836e:	4b09      	ldr	r3, [pc, #36]	; (8394 <grid_module_po16_revb_init+0x74>)
    8370:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
	
    8372:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_po16_revb_hardware_start_transfer();
    8376:	4b08      	ldr	r3, [pc, #32]	; (8398 <grid_module_po16_revb_init+0x78>)
    8378:	4718      	bx	r3
    837a:	bf00      	nop
    837c:	000045ed 	.word	0x000045ed
    8380:	20006f98 	.word	0x20006f98
    8384:	00009a3d 	.word	0x00009a3d
    8388:	00006e95 	.word	0x00006e95
    838c:	200146a0 	.word	0x200146a0
    8390:	00009a09 	.word	0x00009a09
    8394:	000082dd 	.word	0x000082dd
    8398:	00008049 	.word	0x00008049
    839c:	0000ace5 	.word	0x0000ace5

000083a0 <grid_msg_header_set_len>:

#include "grid_msg.h"


// ======================= GRID MSG LEN ======================//
void	grid_msg_header_set_len(struct grid_msg* msg, uint8_t len){
    83a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    83a2:	2200      	movs	r2, #0
    83a4:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, len, &error);
    83a8:	f10d 020f 	add.w	r2, sp, #15
    83ac:	9200      	str	r2, [sp, #0]
    83ae:	2202      	movs	r2, #2
void	grid_msg_header_set_len(struct grid_msg* msg, uint8_t len){
    83b0:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, len, &error);
    83b2:	4c02      	ldr	r4, [pc, #8]	; (83bc <grid_msg_header_set_len+0x1c>)
    83b4:	4611      	mov	r1, r2
    83b6:	47a0      	blx	r4
	
}
    83b8:	b004      	add	sp, #16
    83ba:	bd10      	pop	{r4, pc}
    83bc:	000099c5 	.word	0x000099c5

000083c0 <grid_msg_header_set_id>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, &error);
}

// ======================= GRID MSG ID ======================//
void	grid_msg_header_set_id(struct grid_msg* msg, uint8_t id){
    83c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    83c2:	2200      	movs	r2, #0
    83c4:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, id, &error);
    83c8:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_id(struct grid_msg* msg, uint8_t id){
    83cc:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, id, &error);
    83ce:	9200      	str	r2, [sp, #0]
    83d0:	4c02      	ldr	r4, [pc, #8]	; (83dc <grid_msg_header_set_id+0x1c>)
    83d2:	2202      	movs	r2, #2
    83d4:	2104      	movs	r1, #4
    83d6:	47a0      	blx	r4
	
}
    83d8:	b004      	add	sp, #16
    83da:	bd10      	pop	{r4, pc}
    83dc:	000099c5 	.word	0x000099c5

000083e0 <grid_msg_header_set_dx>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
}

// ======================= GRID MSG DX ======================//
void	grid_msg_header_set_dx(struct grid_msg* msg, uint8_t dx){
    83e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    83e2:	2200      	movs	r2, #0
    83e4:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, dx, &error);
    83e8:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_dx(struct grid_msg* msg, uint8_t dx){
    83ec:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, dx, &error);
    83ee:	9200      	str	r2, [sp, #0]
    83f0:	4c02      	ldr	r4, [pc, #8]	; (83fc <grid_msg_header_set_dx+0x1c>)
    83f2:	2202      	movs	r2, #2
    83f4:	2106      	movs	r1, #6
    83f6:	47a0      	blx	r4
	
}
    83f8:	b004      	add	sp, #16
    83fa:	bd10      	pop	{r4, pc}
    83fc:	000099c5 	.word	0x000099c5

00008400 <grid_msg_header_get_dx>:


uint8_t grid_msg_header_get_dx(struct grid_msg* msg){
    8400:	b513      	push	{r0, r1, r4, lr}
	
	uint8_t error = 0;
    8402:	2300      	movs	r3, #0
    8404:	f88d 3007 	strb.w	r3, [sp, #7]
	return grid_msg_get_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    8408:	4c04      	ldr	r4, [pc, #16]	; (841c <grid_msg_header_get_dx+0x1c>)
    840a:	f10d 0307 	add.w	r3, sp, #7
    840e:	2202      	movs	r2, #2
    8410:	2106      	movs	r1, #6
    8412:	47a0      	blx	r4
}
    8414:	b2c0      	uxtb	r0, r0
    8416:	b002      	add	sp, #8
    8418:	bd10      	pop	{r4, pc}
    841a:	bf00      	nop
    841c:	000099ad 	.word	0x000099ad

00008420 <grid_msg_header_set_dy>:

// ======================= GRID MSG DY ======================//
void	grid_msg_header_set_dy(struct grid_msg* msg, uint8_t dy){
    8420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    8422:	2200      	movs	r2, #0
    8424:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, dy, &error);
    8428:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_dy(struct grid_msg* msg, uint8_t dy){
    842c:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, dy, &error);
    842e:	9200      	str	r2, [sp, #0]
    8430:	4c02      	ldr	r4, [pc, #8]	; (843c <grid_msg_header_set_dy+0x1c>)
    8432:	2202      	movs	r2, #2
    8434:	2108      	movs	r1, #8
    8436:	47a0      	blx	r4
	
}
    8438:	b004      	add	sp, #16
    843a:	bd10      	pop	{r4, pc}
    843c:	000099c5 	.word	0x000099c5

00008440 <grid_msg_header_get_dy>:


uint8_t grid_msg_header_get_dy(struct grid_msg* msg){
    8440:	b513      	push	{r0, r1, r4, lr}
	
	uint8_t error = 0;
    8442:	2300      	movs	r3, #0
    8444:	f88d 3007 	strb.w	r3, [sp, #7]
	return grid_msg_get_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    8448:	4c04      	ldr	r4, [pc, #16]	; (845c <grid_msg_header_get_dy+0x1c>)
    844a:	f10d 0307 	add.w	r3, sp, #7
    844e:	2202      	movs	r2, #2
    8450:	2108      	movs	r1, #8
    8452:	47a0      	blx	r4
}
    8454:	b2c0      	uxtb	r0, r0
    8456:	b002      	add	sp, #8
    8458:	bd10      	pop	{r4, pc}
    845a:	bf00      	nop
    845c:	000099ad 	.word	0x000099ad

00008460 <grid_msg_header_set_rot>:

// ======================= GRID MSG ROT ======================//
void	grid_msg_header_set_rot(struct grid_msg* msg, uint8_t rot){
    8460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    8462:	2200      	movs	r2, #0
    8464:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, rot, &error);
    8468:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_rot(struct grid_msg* msg, uint8_t rot){
    846c:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, rot, &error);
    846e:	9200      	str	r2, [sp, #0]
    8470:	4c02      	ldr	r4, [pc, #8]	; (847c <grid_msg_header_set_rot+0x1c>)
    8472:	2202      	movs	r2, #2
    8474:	210c      	movs	r1, #12
    8476:	47a0      	blx	r4
	
}
    8478:	b004      	add	sp, #16
    847a:	bd10      	pop	{r4, pc}
    847c:	000099c5 	.word	0x000099c5

00008480 <grid_msg_header_set_age>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, &error);
}

// ======================= GRID MSG AGE ======================//
void	grid_msg_header_set_age(struct grid_msg* msg, uint8_t age){
    8480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    8482:	2200      	movs	r2, #0
    8484:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, age, &error);
    8488:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_age(struct grid_msg* msg, uint8_t age){
    848c:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, age, &error);
    848e:	9200      	str	r2, [sp, #0]
    8490:	4c02      	ldr	r4, [pc, #8]	; (849c <grid_msg_header_set_age+0x1c>)
    8492:	2202      	movs	r2, #2
    8494:	210a      	movs	r1, #10
    8496:	47a0      	blx	r4
	
}
    8498:	b004      	add	sp, #16
    849a:	bd10      	pop	{r4, pc}
    849c:	000099c5 	.word	0x000099c5

000084a0 <grid_msg_packet_get_length>:
}

// ======================= MSG GET PACKET LENGTH ======================//
uint32_t grid_msg_packet_get_length(struct grid_msg* msg){
	
	return (msg->header_length + msg->body_length + msg->footer_length);
    84a0:	e9d0 3264 	ldrd	r3, r2, [r0, #400]	; 0x190
    84a4:	f8d0 0198 	ldr.w	r0, [r0, #408]	; 0x198
    84a8:	4413      	add	r3, r2
}
    84aa:	4418      	add	r0, r3
    84ac:	4770      	bx	lr

000084ae <grid_msg_body_get_length>:

// ======================= MSG GET BODY LENGTH ======================//
uint32_t grid_msg_body_get_length(struct grid_msg* msg){
	
	return (msg->body_length);
}
    84ae:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    84b2:	4770      	bx	lr

000084b4 <grid_msg_body_append_text>:
	
	return (msg->footer_length);
}


void	grid_msg_body_append_text(struct grid_msg* msg, uint8_t* str, uint32_t len){
    84b4:	b570      	push	{r4, r5, r6, lr}
    84b6:	f8d0 5194 	ldr.w	r5, [r0, #404]	; 0x194

	
	for(uint32_t i=0; i<len; i++){
    84ba:	2300      	movs	r3, #0
    84bc:	4293      	cmp	r3, r2
    84be:	d103      	bne.n	84c8 <grid_msg_body_append_text+0x14>
		
		msg->body[msg->body_length + i] = str[i];
	}
	
	msg->body_length += len;
    84c0:	442b      	add	r3, r5
    84c2:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194

}
    84c6:	bd70      	pop	{r4, r5, r6, pc}
		msg->body[msg->body_length + i] = str[i];
    84c8:	18c4      	adds	r4, r0, r3
    84ca:	442c      	add	r4, r5
    84cc:	5cce      	ldrb	r6, [r1, r3]
    84ce:	7526      	strb	r6, [r4, #20]
	for(uint32_t i=0; i<len; i++){
    84d0:	3301      	adds	r3, #1
    84d2:	e7f3      	b.n	84bc <grid_msg_body_append_text+0x8>

000084d4 <grid_msg_body_append_text_escaped>:

void	grid_msg_body_append_text_escaped(struct grid_msg* msg, uint8_t* str, uint32_t len){
    84d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    84d6:	f8d0 6194 	ldr.w	r6, [r0, #404]	; 0x194
	
	for(uint32_t i=0; i<len; i++){
    84da:	2400      	movs	r4, #0
		
		if (str[i] == GRID_CONST_STX){
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
		}
		else if (str[i] == GRID_CONST_ETX){
			msg->body[msg->body_length + i] = GRID_CONST_ETX+128;
    84dc:	2783      	movs	r7, #131	; 0x83
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
    84de:	f04f 0c82 	mov.w	ip, #130	; 0x82
	for(uint32_t i=0; i<len; i++){
    84e2:	4294      	cmp	r4, r2
    84e4:	eb04 0306 	add.w	r3, r4, r6
    84e8:	d102      	bne.n	84f0 <grid_msg_body_append_text_escaped+0x1c>
			msg->body[msg->body_length + i] = str[i];
		}
		
	}
	
	msg->body_length += len;
    84ea:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194

}
    84ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (str[i] == GRID_CONST_STX){
    84f0:	5d0d      	ldrb	r5, [r1, r4]
    84f2:	2d02      	cmp	r5, #2
    84f4:	4403      	add	r3, r0
    84f6:	d103      	bne.n	8500 <grid_msg_body_append_text_escaped+0x2c>
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
    84f8:	f883 c014 	strb.w	ip, [r3, #20]
	for(uint32_t i=0; i<len; i++){
    84fc:	3401      	adds	r4, #1
    84fe:	e7f0      	b.n	84e2 <grid_msg_body_append_text_escaped+0xe>
		else if (str[i] == GRID_CONST_ETX){
    8500:	2d03      	cmp	r5, #3
			msg->body[msg->body_length + i] = GRID_CONST_ETX+128;
    8502:	bf0c      	ite	eq
    8504:	751f      	strbeq	r7, [r3, #20]
			msg->body[msg->body_length + i] = str[i];
    8506:	751d      	strbne	r5, [r3, #20]
    8508:	e7f8      	b.n	84fc <grid_msg_body_append_text_escaped+0x28>
	...

0000850c <grid_msg_text_get_parameter>:


uint32_t grid_msg_text_get_parameter(struct grid_msg* msg, uint32_t text_start_offset, uint8_t parameter_offset, uint8_t parameter_length){
    850c:	b420      	push	{r5}
	
	uint8_t error;
	
	return grid_sys_read_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, error);
    850e:	f101 0514 	add.w	r5, r1, #20
    8512:	4415      	add	r5, r2
    8514:	4619      	mov	r1, r3
    8516:	4428      	add	r0, r5
    8518:	4b02      	ldr	r3, [pc, #8]	; (8524 <grid_msg_text_get_parameter+0x18>)
	
}
    851a:	f85d 5b04 	ldr.w	r5, [sp], #4
	return grid_sys_read_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, error);
    851e:	2200      	movs	r2, #0
    8520:	4718      	bx	r3
    8522:	bf00      	nop
    8524:	000097f9 	.word	0x000097f9

00008528 <grid_msg_text_set_parameter>:

void grid_msg_text_set_parameter(struct grid_msg* msg, uint32_t text_start_offset, uint8_t parameter_offset, uint8_t parameter_length, uint32_t value){
    8528:	b420      	push	{r5}
	
	return grid_sys_write_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, value);
    852a:	f101 0514 	add.w	r5, r1, #20
    852e:	4415      	add	r5, r2
    8530:	4619      	mov	r1, r3
    8532:	9a01      	ldr	r2, [sp, #4]
    8534:	4b02      	ldr	r3, [pc, #8]	; (8540 <grid_msg_text_set_parameter+0x18>)
    8536:	4428      	add	r0, r5
	
}
    8538:	f85d 5b04 	ldr.w	r5, [sp], #4
	return grid_sys_write_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, value);
    853c:	4718      	bx	r3
    853e:	bf00      	nop
    8540:	00009821 	.word	0x00009821

00008544 <grid_msg_init>:


// ======================= GRID MSG INIT ======================//
void	grid_msg_init(struct grid_msg* msg){
	
	msg->header_length = 0;
    8544:	2300      	movs	r3, #0
	msg->body_length = 0;
    8546:	e9c0 3364 	strd	r3, r3, [r0, #400]	; 0x190
	msg->footer_length = 0;
    854a:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
	
	for (uint32_t i=0; i<GRID_MSG_HEADER_maxlength; i++)
    854e:	1e42      	subs	r2, r0, #1
    8550:	f100 0113 	add.w	r1, r0, #19
	{
		msg->header[i] = 0;
    8554:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (uint32_t i=0; i<GRID_MSG_HEADER_maxlength; i++)
    8558:	4291      	cmp	r1, r2
    855a:	d1fb      	bne.n	8554 <grid_msg_init+0x10>
    855c:	f100 0214 	add.w	r2, r0, #20
    8560:	f200 118b 	addw	r1, r0, #395	; 0x18b
	}
	
	for (uint32_t i=0; i<GRID_MSG_BODY_maxlength; i++)
	{
		msg->body[i] = 0;
    8564:	2300      	movs	r3, #0
    8566:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i=0; i<GRID_MSG_BODY_maxlength; i++)
    856a:	428a      	cmp	r2, r1
    856c:	d1fb      	bne.n	8566 <grid_msg_init+0x22>
	}
	
	for (uint32_t i=0; i<GRID_MSG_FOOTER_maxlength; i++)
	{
		msg->footer[i] = 0;
    856e:	f880 318b 	strb.w	r3, [r0, #395]	; 0x18b
    8572:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
	}
	
		
}
    8576:	4770      	bx	lr

00008578 <grid_msg_init_header>:

// ======================= MSG INIT HEADER======================//

void	grid_msg_init_header(struct grid_msg* msg, uint8_t dx, uint8_t dy, uint8_t rot){
    8578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    857c:	461e      	mov	r6, r3
	
    
    uint8_t age = grid_sys_state.sessionid;
    857e:	4b13      	ldr	r3, [pc, #76]	; (85cc <grid_msg_init_header+0x54>)
    
	sprintf(msg->header, GRID_BRC_frame);
    8580:	f8df 9064 	ldr.w	r9, [pc, #100]	; 85e8 <grid_msg_init_header+0x70>
    uint8_t age = grid_sys_state.sessionid;
    8584:	795d      	ldrb	r5, [r3, #5]
	sprintf(msg->header, GRID_BRC_frame);
    8586:	2317      	movs	r3, #23
void	grid_msg_init_header(struct grid_msg* msg, uint8_t dx, uint8_t dy, uint8_t rot){
    8588:	4604      	mov	r4, r0
    858a:	4688      	mov	r8, r1
    858c:	4617      	mov	r7, r2
	sprintf(msg->header, GRID_BRC_frame);
    858e:	4910      	ldr	r1, [pc, #64]	; (85d0 <grid_msg_init_header+0x58>)
    8590:	9300      	str	r3, [sp, #0]
    8592:	2201      	movs	r2, #1
    8594:	230f      	movs	r3, #15
    8596:	47c8      	blx	r9
	msg->header_length = strlen(msg->header);
    8598:	4b0e      	ldr	r3, [pc, #56]	; (85d4 <grid_msg_init_header+0x5c>)
    859a:	4620      	mov	r0, r4
    859c:	4798      	blx	r3
	
	grid_msg_header_set_dx(msg, dx);
    859e:	4641      	mov	r1, r8
	msg->header_length = strlen(msg->header);
    85a0:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
	grid_msg_header_set_dx(msg, dx);
    85a4:	4b0c      	ldr	r3, [pc, #48]	; (85d8 <grid_msg_init_header+0x60>)
    85a6:	4620      	mov	r0, r4
    85a8:	4798      	blx	r3
	grid_msg_header_set_dy(msg, dy);
    85aa:	4639      	mov	r1, r7
    85ac:	4620      	mov	r0, r4
    85ae:	4b0b      	ldr	r3, [pc, #44]	; (85dc <grid_msg_init_header+0x64>)
    85b0:	4798      	blx	r3
	grid_msg_header_set_rot(msg, rot);
    85b2:	4631      	mov	r1, r6
    85b4:	4620      	mov	r0, r4
    85b6:	4b0a      	ldr	r3, [pc, #40]	; (85e0 <grid_msg_init_header+0x68>)
    85b8:	4798      	blx	r3
    uint8_t age = grid_sys_state.sessionid;
    85ba:	b2ed      	uxtb	r5, r5
	grid_msg_header_set_age(msg, age);
    85bc:	4b09      	ldr	r3, [pc, #36]	; (85e4 <grid_msg_init_header+0x6c>)
    85be:	4629      	mov	r1, r5
    85c0:	4620      	mov	r0, r4
	
	
}
    85c2:	b003      	add	sp, #12
    85c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	grid_msg_header_set_age(msg, age);
    85c8:	4718      	bx	r3
    85ca:	bf00      	nop
    85cc:	20006fa4 	.word	0x20006fa4
    85d0:	000155e2 	.word	0x000155e2
    85d4:	00013801 	.word	0x00013801
    85d8:	000083e1 	.word	0x000083e1
    85dc:	00008421 	.word	0x00008421
    85e0:	00008461 	.word	0x00008461
    85e4:	00008481 	.word	0x00008481
    85e8:	00013351 	.word	0x00013351

000085ec <grid_msg_packet_receive_char>:

// ======================= MSG RECEIVE CHAR ======================//
void	grid_msg_packet_receive_char(struct grid_msg* msg, uint8_t nextchar){
	
	if (msg->body_length == 0){
    85ec:	f8d0 2194 	ldr.w	r2, [r0, #404]	; 0x194
    85f0:	b96a      	cbnz	r2, 860e <grid_msg_packet_receive_char+0x22>
		
		if (nextchar != GRID_CONST_EOB){
    85f2:	2917      	cmp	r1, #23
			msg->header[msg->header_length] = nextchar;
    85f4:	bf15      	itete	ne
    85f6:	f8d0 3190 	ldrne.w	r3, [r0, #400]	; 0x190
			msg->header_length++;
		}
		else{
			msg->body[msg->body_length] = nextchar;
    85fa:	7501      	strbeq	r1, [r0, #20]
			msg->header[msg->header_length] = nextchar;
    85fc:	54c1      	strbne	r1, [r0, r3]
			msg->body_length++;
    85fe:	2301      	moveq	r3, #1
			msg->header_length++;
    8600:	bf1a      	itte	ne
    8602:	3301      	addne	r3, #1
    8604:	f8c0 3190 	strne.w	r3, [r0, #400]	; 0x190
			msg->body_length++;
    8608:	f8c0 3194 	streq.w	r3, [r0, #404]	; 0x194
    860c:	4770      	bx	lr
			
		}
		
	}
	else if(msg->footer_length == 0){
    860e:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    8612:	b96b      	cbnz	r3, 8630 <grid_msg_packet_receive_char+0x44>
		
		if (nextchar != GRID_CONST_EOT){
    8614:	2904      	cmp	r1, #4
    8616:	d005      	beq.n	8624 <grid_msg_packet_receive_char+0x38>
			msg->body[msg->body_length] = nextchar;
    8618:	1883      	adds	r3, r0, r2
			msg->body_length++;
    861a:	3201      	adds	r2, #1
			msg->body[msg->body_length] = nextchar;
    861c:	7519      	strb	r1, [r3, #20]
			msg->body_length++;
    861e:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
    8622:	4770      	bx	lr
		}
		else{
			msg->footer[msg->footer_length] = nextchar;
    8624:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
			msg->footer_length++;
    8628:	2301      	movs	r3, #1
		
	}
	else{
		
		msg->footer[msg->footer_length] = nextchar;
		msg->footer_length++;
    862a:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
		
	}
	
}
    862e:	4770      	bx	lr
		msg->footer[msg->footer_length] = nextchar;
    8630:	18c2      	adds	r2, r0, r3
		msg->footer_length++;
    8632:	3301      	adds	r3, #1
		msg->footer[msg->footer_length] = nextchar;
    8634:	f882 118b 	strb.w	r1, [r2, #395]	; 0x18b
		msg->footer_length++;
    8638:	e7f7      	b.n	862a <grid_msg_packet_receive_char+0x3e>

0000863a <grid_msg_packet_send_char>:

// ======================= GRID MSG SEND CHAR ======================//

uint8_t	grid_msg_packet_send_char(struct grid_msg* msg, uint32_t charindex){
	
	if (charindex < msg->header_length){
    863a:	f8d0 2190 	ldr.w	r2, [r0, #400]	; 0x190
    863e:	428a      	cmp	r2, r1
    8640:	d901      	bls.n	8646 <grid_msg_packet_send_char+0xc>
		
		return msg->header[charindex];
    8642:	5c40      	ldrb	r0, [r0, r1]
    8644:	4770      	bx	lr
	}
	else if (charindex < msg->body_length + msg->header_length){
    8646:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
    864a:	4413      	add	r3, r2
    864c:	428b      	cmp	r3, r1
    864e:	d903      	bls.n	8658 <grid_msg_packet_send_char+0x1e>
	
		return msg->body[charindex - msg->header_length];
    8650:	1a89      	subs	r1, r1, r2
    8652:	4408      	add	r0, r1
    8654:	7d00      	ldrb	r0, [r0, #20]
    8656:	4770      	bx	lr
	}
	else if (charindex < msg->footer_length + msg->body_length + msg->header_length){
    8658:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
    865c:	441a      	add	r2, r3
    865e:	428a      	cmp	r2, r1
	
		return msg->footer[charindex - msg->header_length - msg->body_length];
    8660:	bf83      	ittte	hi
    8662:	1ac9      	subhi	r1, r1, r3
    8664:	1840      	addhi	r0, r0, r1
    8666:	f890 018b 	ldrbhi.w	r0, [r0, #395]	; 0x18b
	}
	else{
		// OVERRUN
		return -1;
    866a:	20ff      	movls	r0, #255	; 0xff
	}
	
	
}
    866c:	4770      	bx	lr
	...

00008670 <grid_msg_packet_close>:



uint8_t	grid_msg_packet_close(struct grid_msg* msg){
    8670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8672:	4604      	mov	r4, r0
	
	
	sprintf(&msg->footer[msg->footer_length], "%c", GRID_CONST_EOT);
    8674:	f8d0 0198 	ldr.w	r0, [r0, #408]	; 0x198
    8678:	492b      	ldr	r1, [pc, #172]	; (8728 <grid_msg_packet_close+0xb8>)
    867a:	4d2c      	ldr	r5, [pc, #176]	; (872c <grid_msg_packet_close+0xbc>)
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    867c:	4e2c      	ldr	r6, [pc, #176]	; (8730 <grid_msg_packet_close+0xc0>)
	sprintf(&msg->footer[msg->footer_length], "%c", GRID_CONST_EOT);
    867e:	f200 108b 	addw	r0, r0, #395	; 0x18b
    8682:	2204      	movs	r2, #4
    8684:	4420      	add	r0, r4
    8686:	47a8      	blx	r5
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    8688:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
    868c:	f207 108b 	addw	r0, r7, #395	; 0x18b
    8690:	4420      	add	r0, r4
    8692:	47b0      	blx	r6
	
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    8694:	e9d4 3164 	ldrd	r3, r1, [r4, #400]	; 0x190
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    8698:	4438      	add	r0, r7
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    869a:	440b      	add	r3, r1
	grid_msg_header_set_id(msg, grid_sys_state.next_broadcast_message_id);	
    869c:	4f25      	ldr	r7, [pc, #148]	; (8734 <grid_msg_packet_close+0xc4>)
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    869e:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    86a2:	1819      	adds	r1, r3, r0
    86a4:	b2c9      	uxtb	r1, r1
    86a6:	4b24      	ldr	r3, [pc, #144]	; (8738 <grid_msg_packet_close+0xc8>)
    86a8:	4620      	mov	r0, r4
    86aa:	4798      	blx	r3
	grid_msg_header_set_id(msg, grid_sys_state.next_broadcast_message_id);	
    86ac:	f897 10ad 	ldrb.w	r1, [r7, #173]	; 0xad
    86b0:	4b22      	ldr	r3, [pc, #136]	; (873c <grid_msg_packet_close+0xcc>)
    86b2:	4620      	mov	r0, r4
    86b4:	4798      	blx	r3
	
	grid_sys_state.next_broadcast_message_id++;
    86b6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
    86ba:	3301      	adds	r3, #1
    86bc:	b2db      	uxtb	r3, r3
    86be:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
	
	
	uint8_t checksum = 0;
	
	for (uint32_t i=0; i<msg->header_length; i++){
    86c2:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    86c6:	4621      	mov	r1, r4
    86c8:	4423      	add	r3, r4
	uint8_t checksum = 0;
    86ca:	2200      	movs	r2, #0
	for (uint32_t i=0; i<msg->header_length; i++){
    86cc:	4299      	cmp	r1, r3
    86ce:	d11f      	bne.n	8710 <grid_msg_packet_close+0xa0>
    86d0:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    86d4:	4423      	add	r3, r4
    86d6:	f104 0114 	add.w	r1, r4, #20
    86da:	3314      	adds	r3, #20
		checksum ^= msg->header[i];
	}
		
	for (uint32_t i=0; i<msg->body_length; i++){
    86dc:	4299      	cmp	r1, r3
    86de:	d11b      	bne.n	8718 <grid_msg_packet_close+0xa8>
		checksum ^= msg->body[i];
	}
		
	for (uint32_t i=0; i<msg->footer_length; i++){
    86e0:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    86e4:	1823      	adds	r3, r4, r0
    86e6:	f204 118b 	addw	r1, r4, #395	; 0x18b
    86ea:	f203 138b 	addw	r3, r3, #395	; 0x18b
    86ee:	4299      	cmp	r1, r3
    86f0:	d116      	bne.n	8720 <grid_msg_packet_close+0xb0>
		checksum ^= msg->footer[i];
	}
	
	sprintf(&msg->footer[msg->footer_length], "%02x\n", checksum);
    86f2:	f200 108b 	addw	r0, r0, #395	; 0x18b
    86f6:	4912      	ldr	r1, [pc, #72]	; (8740 <grid_msg_packet_close+0xd0>)
    86f8:	4420      	add	r0, r4
    86fa:	47a8      	blx	r5
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    86fc:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    8700:	f205 108b 	addw	r0, r5, #395	; 0x18b
    8704:	4420      	add	r0, r4
    8706:	47b0      	blx	r6
    8708:	4428      	add	r0, r5
    870a:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
	
	
}
    870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		checksum ^= msg->header[i];
    8710:	f811 0b01 	ldrb.w	r0, [r1], #1
    8714:	4042      	eors	r2, r0
	for (uint32_t i=0; i<msg->header_length; i++){
    8716:	e7d9      	b.n	86cc <grid_msg_packet_close+0x5c>
		checksum ^= msg->body[i];
    8718:	f811 0b01 	ldrb.w	r0, [r1], #1
    871c:	4042      	eors	r2, r0
	for (uint32_t i=0; i<msg->body_length; i++){
    871e:	e7dd      	b.n	86dc <grid_msg_packet_close+0x6c>
		checksum ^= msg->footer[i];
    8720:	f811 7b01 	ldrb.w	r7, [r1], #1
    8724:	407a      	eors	r2, r7
	for (uint32_t i=0; i<msg->footer_length; i++){
    8726:	e7e2      	b.n	86ee <grid_msg_packet_close+0x7e>
    8728:	000152cf 	.word	0x000152cf
    872c:	00013351 	.word	0x00013351
    8730:	00013801 	.word	0x00013801
    8734:	20006fa4 	.word	0x20006fa4
    8738:	000083a1 	.word	0x000083a1
    873c:	000083c1 	.word	0x000083c1
    8740:	00015d37 	.word	0x00015d37

00008744 <grid_msg_packet_send_everywhere>:

uint8_t	grid_msg_packet_send_everywhere(struct grid_msg* msg){
    8744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t message_length = grid_msg_packet_get_length(msg);
    8748:	4b0f      	ldr	r3, [pc, #60]	; (8788 <grid_msg_packet_send_everywhere+0x44>)
uint8_t	grid_msg_packet_send_everywhere(struct grid_msg* msg){
    874a:	4606      	mov	r6, r0
	uint32_t message_length = grid_msg_packet_get_length(msg);
    874c:	4798      	blx	r3
	
	if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, message_length)){
    874e:	4b0f      	ldr	r3, [pc, #60]	; (878c <grid_msg_packet_send_everywhere+0x48>)
	uint32_t message_length = grid_msg_packet_get_length(msg);
    8750:	4604      	mov	r4, r0
	if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, message_length)){
    8752:	b281      	uxth	r1, r0
    8754:	480e      	ldr	r0, [pc, #56]	; (8790 <grid_msg_packet_send_everywhere+0x4c>)
    8756:	4798      	blx	r3
    8758:	b978      	cbnz	r0, 877a <grid_msg_packet_send_everywhere+0x36>
		
		return 0;
	}
	
	
}
    875a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(msg, i));
    875e:	4629      	mov	r1, r5
    8760:	4630      	mov	r0, r6
    8762:	47b8      	blx	r7
    8764:	4601      	mov	r1, r0
    8766:	4640      	mov	r0, r8
    8768:	47c8      	blx	r9
		for(uint32_t i = 0; i<message_length; i++){
    876a:	3501      	adds	r5, #1
    876c:	42a5      	cmp	r5, r4
    876e:	d1f6      	bne.n	875e <grid_msg_packet_send_everywhere+0x1a>
		grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    8770:	4807      	ldr	r0, [pc, #28]	; (8790 <grid_msg_packet_send_everywhere+0x4c>)
    8772:	4b08      	ldr	r3, [pc, #32]	; (8794 <grid_msg_packet_send_everywhere+0x50>)
    8774:	4798      	blx	r3
		return 1;
    8776:	2001      	movs	r0, #1
    8778:	e7ef      	b.n	875a <grid_msg_packet_send_everywhere+0x16>
			grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(msg, i));
    877a:	4f07      	ldr	r7, [pc, #28]	; (8798 <grid_msg_packet_send_everywhere+0x54>)
    877c:	f8df 8010 	ldr.w	r8, [pc, #16]	; 8790 <grid_msg_packet_send_everywhere+0x4c>
    8780:	f8df 9018 	ldr.w	r9, [pc, #24]	; 879c <grid_msg_packet_send_everywhere+0x58>
		for(uint32_t i = 0; i<message_length; i++){
    8784:	2500      	movs	r5, #0
    8786:	e7f1      	b.n	876c <grid_msg_packet_send_everywhere+0x28>
    8788:	000084a1 	.word	0x000084a1
    878c:	00004839 	.word	0x00004839
    8790:	20006b80 	.word	0x20006b80
    8794:	00004895 	.word	0x00004895
    8798:	0000863b 	.word	0x0000863b
    879c:	00004875 	.word	0x00004875

000087a0 <grid_nvm_ui_bulk_read_init>:
}


void grid_nvm_ui_bulk_read_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->read_bulk_page_index = 0;
    87a0:	2300      	movs	r3, #0
    87a2:	f8c0 3424 	str.w	r3, [r0, #1060]	; 0x424
	nvm->read_bulk_status = 1;
    87a6:	2301      	movs	r3, #1
    87a8:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
			
}
    87ac:	4770      	bx	lr

000087ae <grid_nvm_ui_bulk_read_is_in_progress>:

uint8_t grid_nvm_ui_bulk_read_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->read_bulk_status;
	
}
    87ae:	f890 0428 	ldrb.w	r0, [r0, #1064]	; 0x428
    87b2:	4770      	bx	lr

000087b4 <grid_nvm_ui_bulk_read_next>:

void grid_nvm_ui_bulk_read_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    87b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    87b6:	4604      	mov	r4, r0
    87b8:	b0ed      	sub	sp, #436	; 0x1b4
	
	if (nvm->read_bulk_status == 1){
    87ba:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    87be:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_read_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    87c0:	4608      	mov	r0, r1
	if (nvm->read_bulk_status == 1){
    87c2:	d130      	bne.n	8826 <grid_nvm_ui_bulk_read_next+0x72>
		uint8_t bank    = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
		uint8_t event   = nvm->read_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
		
		
		if (bank < ui->bank_list_length){
    87c4:	7849      	ldrb	r1, [r1, #1]
		uint8_t bank    = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    87c6:	f8d4 2424 	ldr.w	r2, [r4, #1060]	; 0x424
    87ca:	23a0      	movs	r3, #160	; 0xa0
    87cc:	fbb2 f3f3 	udiv	r3, r2, r3
    87d0:	f003 0303 	and.w	r3, r3, #3
		if (bank < ui->bank_list_length){
    87d4:	4299      	cmp	r1, r3
    87d6:	d91d      	bls.n	8814 <grid_nvm_ui_bulk_read_next+0x60>
			
			if (element < ui->bank_list[bank].element_list_length){
    87d8:	6845      	ldr	r5, [r0, #4]
    87da:	eb05 1303 	add.w	r3, r5, r3, lsl #4
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    87de:	270a      	movs	r7, #10
			if (element < ui->bank_list[bank].element_list_length){
    87e0:	7a5d      	ldrb	r5, [r3, #9]
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    87e2:	fbb2 f1f7 	udiv	r1, r2, r7
    87e6:	f001 060f 	and.w	r6, r1, #15
			if (element < ui->bank_list[bank].element_list_length){
    87ea:	42b5      	cmp	r5, r6
    87ec:	d912      	bls.n	8814 <grid_nvm_ui_bulk_read_next+0x60>
		uint8_t event   = nvm->read_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    87ee:	fb07 2111 	mls	r1, r7, r1, r2
				
				if (event < ui->bank_list[bank].element_list[element].event_list_length){
    87f2:	68da      	ldr	r2, [r3, #12]
    87f4:	2364      	movs	r3, #100	; 0x64
    87f6:	fb06 2303 	mla	r3, r6, r3, r2
    87fa:	b2ca      	uxtb	r2, r1
    87fc:	f893 505c 	ldrb.w	r5, [r3, #92]	; 0x5c
    8800:	4295      	cmp	r5, r2
    8802:	d907      	bls.n	8814 <grid_nvm_ui_bulk_read_next+0x60>
					// Valid memory location
					
					int status = grid_ui_nvm_load_event_configuration(ui, nvm, &ui->bank_list[bank].element_list[element].event_list[event]);
    8804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8806:	f44f 7286 	mov.w	r2, #268	; 0x10c
    880a:	fb02 3201 	mla	r2, r2, r1, r3
    880e:	4b1f      	ldr	r3, [pc, #124]	; (888c <grid_nvm_ui_bulk_read_next+0xd8>)
    8810:	4621      	mov	r1, r4
    8812:	4798      	blx	r3
			}
	
		}
		
		
		if (nvm->read_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8814:	f8d4 3424 	ldr.w	r3, [r4, #1060]	; 0x424
    8818:	f240 227e 	movw	r2, #638	; 0x27e
    881c:	4293      	cmp	r3, r2
    881e:	d804      	bhi.n	882a <grid_nvm_ui_bulk_read_next+0x76>
			
			nvm->read_bulk_page_index++;
    8820:	3301      	adds	r3, #1
    8822:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
	}
	
	
	
	
}
    8826:	b06d      	add	sp, #436	; 0x1b4
    8828:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nvm->read_bulk_page_index = 0;
    882a:	2500      	movs	r5, #0
    882c:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
			nvm->read_bulk_status = 0;
    8830:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
			grid_msg_init(&response);
    8834:	a805      	add	r0, sp, #20
    8836:	4b16      	ldr	r3, [pc, #88]	; (8890 <grid_nvm_ui_bulk_read_next+0xdc>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8838:	4c16      	ldr	r4, [pc, #88]	; (8894 <grid_nvm_ui_bulk_read_next+0xe0>)
			grid_msg_init(&response);
    883a:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    883c:	227f      	movs	r2, #127	; 0x7f
    883e:	462b      	mov	r3, r5
    8840:	4611      	mov	r1, r2
    8842:	a805      	add	r0, sp, #20
    8844:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    8846:	2303      	movs	r3, #3
    8848:	4913      	ldr	r1, [pc, #76]	; (8898 <grid_nvm_ui_bulk_read_next+0xe4>)
    884a:	9300      	str	r3, [sp, #0]
    884c:	2202      	movs	r2, #2
    884e:	4c13      	ldr	r4, [pc, #76]	; (889c <grid_nvm_ui_bulk_read_next+0xe8>)
			uint8_t response_payload[10] = {0};
    8850:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    8854:	2371      	movs	r3, #113	; 0x71
    8856:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    8858:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    885c:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    885e:	4b10      	ldr	r3, [pc, #64]	; (88a0 <grid_nvm_ui_bulk_read_next+0xec>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8860:	4c10      	ldr	r4, [pc, #64]	; (88a4 <grid_nvm_ui_bulk_read_next+0xf0>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8862:	a802      	add	r0, sp, #8
    8864:	4798      	blx	r3
    8866:	a902      	add	r1, sp, #8
    8868:	4602      	mov	r2, r0
    886a:	4b0f      	ldr	r3, [pc, #60]	; (88a8 <grid_nvm_ui_bulk_read_next+0xf4>)
    886c:	a805      	add	r0, sp, #20
    886e:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8870:	230a      	movs	r3, #10
    8872:	9300      	str	r3, [sp, #0]
    8874:	2204      	movs	r2, #4
    8876:	4629      	mov	r1, r5
    8878:	a805      	add	r0, sp, #20
    887a:	2301      	movs	r3, #1
    887c:	47a0      	blx	r4
			grid_msg_packet_close(&response);
    887e:	4b0b      	ldr	r3, [pc, #44]	; (88ac <grid_nvm_ui_bulk_read_next+0xf8>)
    8880:	a805      	add	r0, sp, #20
    8882:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    8884:	4b0a      	ldr	r3, [pc, #40]	; (88b0 <grid_nvm_ui_bulk_read_next+0xfc>)
    8886:	a805      	add	r0, sp, #20
    8888:	4798      	blx	r3
}
    888a:	e7cc      	b.n	8826 <grid_nvm_ui_bulk_read_next+0x72>
    888c:	00009eb5 	.word	0x00009eb5
    8890:	00008545 	.word	0x00008545
    8894:	00008579 	.word	0x00008579
    8898:	000155f5 	.word	0x000155f5
    889c:	00013351 	.word	0x00013351
    88a0:	00013801 	.word	0x00013801
    88a4:	00008529 	.word	0x00008529
    88a8:	000084b5 	.word	0x000084b5
    88ac:	00008671 	.word	0x00008671
    88b0:	00008745 	.word	0x00008745

000088b4 <grid_nvm_ui_bulk_store_init>:


void grid_nvm_ui_bulk_store_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->store_bulk_page_index = 0;
    88b4:	2300      	movs	r3, #0
    88b6:	f8c0 3434 	str.w	r3, [r0, #1076]	; 0x434
	nvm->store_bulk_status = 1;
    88ba:	2301      	movs	r3, #1
    88bc:	f880 3438 	strb.w	r3, [r0, #1080]	; 0x438
	
}
    88c0:	4770      	bx	lr

000088c2 <grid_nvm_ui_bulk_store_is_in_progress>:

uint8_t grid_nvm_ui_bulk_store_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->store_bulk_status;
	
}
    88c2:	f890 0438 	ldrb.w	r0, [r0, #1080]	; 0x438
    88c6:	4770      	bx	lr

000088c8 <grid_nvm_ui_bulk_store_next>:

// DO THIS!!
void grid_nvm_ui_bulk_store_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    88c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     
    // START: NEW
    
    
	if (nvm->store_bulk_status == 1){
    88ca:	f890 3438 	ldrb.w	r3, [r0, #1080]	; 0x438
    88ce:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_store_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    88d0:	b0ed      	sub	sp, #436	; 0x1b4
    88d2:	4604      	mov	r4, r0
    88d4:	460d      	mov	r5, r1
	if (nvm->store_bulk_status == 1){
    88d6:	d169      	bne.n	89ac <grid_nvm_ui_bulk_store_next+0xe4>
                        struct grid_ui_event* eve = &ui->bank_list[bank].element_list[element].event_list[event];

                        if (eve->cfg_changed_flag == 1){


                            if (grid_ui_nvm_store_event_configuration(ui, nvm, eve)){
    88d8:	4f53      	ldr	r7, [pc, #332]	; (8a28 <grid_nvm_ui_bulk_store_next+0x160>)
            uint8_t bank    = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    88da:	26a0      	movs	r6, #160	; 0xa0
            if (bank < ui->bank_list_length){
    88dc:	786a      	ldrb	r2, [r5, #1]
            uint8_t bank    = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    88de:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    88e2:	fbb3 f1f6 	udiv	r1, r3, r6
    88e6:	f001 0003 	and.w	r0, r1, #3
            if (bank < ui->bank_list_length){
    88ea:	4282      	cmp	r2, r0
    88ec:	d960      	bls.n	89b0 <grid_nvm_ui_bulk_store_next+0xe8>
                if (element < ui->bank_list[bank].element_list_length){
    88ee:	6869      	ldr	r1, [r5, #4]
    88f0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
            uint8_t element = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    88f4:	f04f 0e0a 	mov.w	lr, #10
                if (element < ui->bank_list[bank].element_list_length){
    88f8:	7a48      	ldrb	r0, [r1, #9]
            uint8_t element = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    88fa:	fbb3 f2fe 	udiv	r2, r3, lr
    88fe:	f002 0c0f 	and.w	ip, r2, #15
                if (element < ui->bank_list[bank].element_list_length){
    8902:	4560      	cmp	r0, ip
    8904:	d954      	bls.n	89b0 <grid_nvm_ui_bulk_store_next+0xe8>
                    if (event < ui->bank_list[bank].element_list[element].event_list_length){
    8906:	68c9      	ldr	r1, [r1, #12]
            uint8_t event   = nvm->store_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    8908:	fb0e 3212 	mls	r2, lr, r2, r3
                    if (event < ui->bank_list[bank].element_list[element].event_list_length){
    890c:	2364      	movs	r3, #100	; 0x64
    890e:	fb0c 1303 	mla	r3, ip, r3, r1
    8912:	b2d1      	uxtb	r1, r2
    8914:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
    8918:	4288      	cmp	r0, r1
    891a:	d949      	bls.n	89b0 <grid_nvm_ui_bulk_store_next+0xe8>
                        struct grid_ui_event* eve = &ui->bank_list[bank].element_list[element].event_list[event];
    891c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    891e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8922:	fb01 3202 	mla	r2, r1, r2, r3
                        if (eve->cfg_changed_flag == 1){
    8926:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
    892a:	2b01      	cmp	r3, #1
    892c:	d140      	bne.n	89b0 <grid_nvm_ui_bulk_store_next+0xe8>
                            if (grid_ui_nvm_store_event_configuration(ui, nvm, eve)){
    892e:	4621      	mov	r1, r4
    8930:	4628      	mov	r0, r5
    8932:	47b8      	blx	r7
    8934:	3800      	subs	r0, #0
    8936:	bf18      	it	ne
    8938:	2001      	movne	r0, #1

            }
            
            

            if (nvm->store_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    893a:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    893e:	f240 227e 	movw	r2, #638	; 0x27e
    8942:	4293      	cmp	r3, r2
    8944:	d804      	bhi.n	8950 <grid_nvm_ui_bulk_store_next+0x88>



                nvm->store_bulk_page_index++;       
    8946:	3301      	adds	r3, #1
    8948:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
        while (something_was_stored == 0){
    894c:	2800      	cmp	r0, #0
    894e:	d0c5      	beq.n	88dc <grid_nvm_ui_bulk_store_next+0x14>
		

		
		
		
		if (nvm->store_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8950:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    8954:	4e35      	ldr	r6, [pc, #212]	; (8a2c <grid_nvm_ui_bulk_store_next+0x164>)
    8956:	f240 227e 	movw	r2, #638	; 0x27e
    895a:	4293      	cmp	r3, r2
    895c:	d82a      	bhi.n	89b4 <grid_nvm_ui_bulk_store_next+0xec>
			
            
            uint8_t intensity = abs(nvm->store_bulk_page_index%100 - 50)/1.5 + 40;
    895e:	2264      	movs	r2, #100	; 0x64
    8960:	fbb3 f0f2 	udiv	r0, r3, r2
    8964:	fb02 3010 	mls	r0, r2, r0, r3
    8968:	3832      	subs	r0, #50	; 0x32
    896a:	2800      	cmp	r0, #0
    896c:	bfb8      	it	lt
    896e:	4240      	neglt	r0, r0
    8970:	4f2f      	ldr	r7, [pc, #188]	; (8a30 <grid_nvm_ui_bulk_store_next+0x168>)
    8972:	4c30      	ldr	r4, [pc, #192]	; (8a34 <grid_nvm_ui_bulk_store_next+0x16c>)
    8974:	4d30      	ldr	r5, [pc, #192]	; (8a38 <grid_nvm_ui_bulk_store_next+0x170>)
    8976:	47b8      	blx	r7
    8978:	4b30      	ldr	r3, [pc, #192]	; (8a3c <grid_nvm_ui_bulk_store_next+0x174>)
    897a:	2200      	movs	r2, #0
    897c:	47a0      	blx	r4
    897e:	4b30      	ldr	r3, [pc, #192]	; (8a40 <grid_nvm_ui_bulk_store_next+0x178>)
    8980:	4c30      	ldr	r4, [pc, #192]	; (8a44 <grid_nvm_ui_bulk_store_next+0x17c>)
    8982:	2200      	movs	r2, #0
    8984:	47a0      	blx	r4
    8986:	47a8      	blx	r5
    8988:	b2c4      	uxtb	r4, r0
  
            grid_sys_alert_set_alert(&grid_sys_state, 0, intensity*0.75, intensity, 1, 1000);
    898a:	4620      	mov	r0, r4
    898c:	47b8      	blx	r7
    898e:	4b2e      	ldr	r3, [pc, #184]	; (8a48 <grid_nvm_ui_bulk_store_next+0x180>)
    8990:	4f2e      	ldr	r7, [pc, #184]	; (8a4c <grid_nvm_ui_bulk_store_next+0x184>)
    8992:	2200      	movs	r2, #0
    8994:	47b8      	blx	r7
    8996:	47a8      	blx	r5
    8998:	2301      	movs	r3, #1
    899a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    899e:	e9cd 3200 	strd	r3, r2, [sp]
    89a2:	2100      	movs	r1, #0
    89a4:	b2c2      	uxtb	r2, r0
    89a6:	4623      	mov	r3, r4
    89a8:	4829      	ldr	r0, [pc, #164]	; (8a50 <grid_nvm_ui_bulk_store_next+0x188>)
    89aa:	47b0      	blx	r6
	}
	
	
	
	
}
    89ac:	b06d      	add	sp, #436	; 0x1b4
    89ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89b0:	2000      	movs	r0, #0
    89b2:	e7c2      	b.n	893a <grid_nvm_ui_bulk_store_next+0x72>
			nvm->store_bulk_page_index = 0;
    89b4:	2500      	movs	r5, #0
    89b6:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
			nvm->store_bulk_status = 0;
    89ba:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
			grid_msg_init(&response);
    89be:	a805      	add	r0, sp, #20
    89c0:	4b24      	ldr	r3, [pc, #144]	; (8a54 <grid_nvm_ui_bulk_store_next+0x18c>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    89c2:	4c25      	ldr	r4, [pc, #148]	; (8a58 <grid_nvm_ui_bulk_store_next+0x190>)
			grid_msg_init(&response);
    89c4:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    89c6:	227f      	movs	r2, #127	; 0x7f
    89c8:	462b      	mov	r3, r5
    89ca:	4611      	mov	r1, r2
    89cc:	a805      	add	r0, sp, #20
    89ce:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    89d0:	2303      	movs	r3, #3
    89d2:	4922      	ldr	r1, [pc, #136]	; (8a5c <grid_nvm_ui_bulk_store_next+0x194>)
    89d4:	9300      	str	r3, [sp, #0]
    89d6:	2202      	movs	r2, #2
    89d8:	4c21      	ldr	r4, [pc, #132]	; (8a60 <grid_nvm_ui_bulk_store_next+0x198>)
			uint8_t response_payload[10] = {0};
    89da:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    89de:	2370      	movs	r3, #112	; 0x70
    89e0:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    89e2:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    89e6:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    89e8:	4b1e      	ldr	r3, [pc, #120]	; (8a64 <grid_nvm_ui_bulk_store_next+0x19c>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    89ea:	4c1f      	ldr	r4, [pc, #124]	; (8a68 <grid_nvm_ui_bulk_store_next+0x1a0>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    89ec:	a802      	add	r0, sp, #8
    89ee:	4798      	blx	r3
    89f0:	a902      	add	r1, sp, #8
    89f2:	4602      	mov	r2, r0
    89f4:	4b1d      	ldr	r3, [pc, #116]	; (8a6c <grid_nvm_ui_bulk_store_next+0x1a4>)
    89f6:	a805      	add	r0, sp, #20
    89f8:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    89fa:	230a      	movs	r3, #10
    89fc:	9300      	str	r3, [sp, #0]
    89fe:	4629      	mov	r1, r5
    8a00:	a805      	add	r0, sp, #20
    8a02:	2301      	movs	r3, #1
    8a04:	2204      	movs	r2, #4
    8a06:	47a0      	blx	r4
                grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    8a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8a0c:	e9cd 5300 	strd	r5, r3, [sp]
    8a10:	22ff      	movs	r2, #255	; 0xff
    8a12:	462b      	mov	r3, r5
    8a14:	4629      	mov	r1, r5
    8a16:	480e      	ldr	r0, [pc, #56]	; (8a50 <grid_nvm_ui_bulk_store_next+0x188>)
    8a18:	47b0      	blx	r6
			grid_msg_packet_close(&response);
    8a1a:	4b15      	ldr	r3, [pc, #84]	; (8a70 <grid_nvm_ui_bulk_store_next+0x1a8>)
    8a1c:	a805      	add	r0, sp, #20
    8a1e:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    8a20:	4b14      	ldr	r3, [pc, #80]	; (8a74 <grid_nvm_ui_bulk_store_next+0x1ac>)
    8a22:	a805      	add	r0, sp, #20
    8a24:	4798      	blx	r3
}
    8a26:	e7c1      	b.n	89ac <grid_nvm_ui_bulk_store_next+0xe4>
    8a28:	00009cd9 	.word	0x00009cd9
    8a2c:	000097ab 	.word	0x000097ab
    8a30:	00012621 	.word	0x00012621
    8a34:	00012949 	.word	0x00012949
    8a38:	00012b19 	.word	0x00012b19
    8a3c:	3ff80000 	.word	0x3ff80000
    8a40:	40440000 	.word	0x40440000
    8a44:	00012389 	.word	0x00012389
    8a48:	3fe80000 	.word	0x3fe80000
    8a4c:	000126f5 	.word	0x000126f5
    8a50:	20006fa4 	.word	0x20006fa4
    8a54:	00008545 	.word	0x00008545
    8a58:	00008579 	.word	0x00008579
    8a5c:	000155f5 	.word	0x000155f5
    8a60:	00013351 	.word	0x00013351
    8a64:	00013801 	.word	0x00013801
    8a68:	00008529 	.word	0x00008529
    8a6c:	000084b5 	.word	0x000084b5
    8a70:	00008671 	.word	0x00008671
    8a74:	00008745 	.word	0x00008745

00008a78 <grid_nvm_ui_bulk_clear_init>:



void grid_nvm_ui_bulk_clear_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->clear_bulk_page_index = 0;
    8a78:	2300      	movs	r3, #0
    8a7a:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
	nvm->clear_bulk_status = 1;
    8a7e:	2301      	movs	r3, #1
    8a80:	f880 3430 	strb.w	r3, [r0, #1072]	; 0x430
	
}
    8a84:	4770      	bx	lr

00008a86 <grid_nvm_ui_bulk_clear_is_in_progress>:

uint8_t grid_nvm_ui_bulk_clear_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->clear_bulk_status;
	
}
    8a86:	f890 0430 	ldrb.w	r0, [r0, #1072]	; 0x430
    8a8a:	4770      	bx	lr

00008a8c <grid_nvm_ui_bulk_clear_next>:


void grid_nvm_ui_bulk_clear_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    8a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a90:	4604      	mov	r4, r0
    8a92:	b0ec      	sub	sp, #432	; 0x1b0
	
	if (nvm->clear_bulk_status == 1){
    8a94:	f894 3430 	ldrb.w	r3, [r4, #1072]	; 0x430
    8a98:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_clear_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    8a9a:	4608      	mov	r0, r1
	if (nvm->clear_bulk_status == 1){
    8a9c:	d15c      	bne.n	8b58 <grid_nvm_ui_bulk_clear_next+0xcc>
		uint8_t bank    = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
		uint8_t event   = nvm->clear_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
		
		
		if (bank < ui->bank_list_length){
    8a9e:	7849      	ldrb	r1, [r1, #1]
		uint8_t bank    = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    8aa0:	f8d4 242c 	ldr.w	r2, [r4, #1068]	; 0x42c
    8aa4:	23a0      	movs	r3, #160	; 0xa0
    8aa6:	fbb2 f3f3 	udiv	r3, r2, r3
    8aaa:	f003 0303 	and.w	r3, r3, #3
		if (bank < ui->bank_list_length){
    8aae:	4299      	cmp	r1, r3
    8ab0:	d91d      	bls.n	8aee <grid_nvm_ui_bulk_clear_next+0x62>
			
			if (element < ui->bank_list[bank].element_list_length){
    8ab2:	6845      	ldr	r5, [r0, #4]
    8ab4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    8ab8:	270a      	movs	r7, #10
			if (element < ui->bank_list[bank].element_list_length){
    8aba:	7a5d      	ldrb	r5, [r3, #9]
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    8abc:	fbb2 f1f7 	udiv	r1, r2, r7
    8ac0:	f001 060f 	and.w	r6, r1, #15
			if (element < ui->bank_list[bank].element_list_length){
    8ac4:	42b5      	cmp	r5, r6
    8ac6:	d912      	bls.n	8aee <grid_nvm_ui_bulk_clear_next+0x62>
		uint8_t event   = nvm->clear_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    8ac8:	fb07 2111 	mls	r1, r7, r1, r2
				
				if (event < ui->bank_list[bank].element_list[element].event_list_length){
    8acc:	68da      	ldr	r2, [r3, #12]
    8ace:	2364      	movs	r3, #100	; 0x64
    8ad0:	fb06 2303 	mla	r3, r6, r3, r2
    8ad4:	b2ca      	uxtb	r2, r1
    8ad6:	f893 505c 	ldrb.w	r5, [r3, #92]	; 0x5c
    8ada:	4295      	cmp	r5, r2
    8adc:	d907      	bls.n	8aee <grid_nvm_ui_bulk_clear_next+0x62>
					// Valid memory location
					
					grid_ui_nvm_clear_event_configuration(ui, nvm, &ui->bank_list[bank].element_list[element].event_list[event]);		
    8ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8ae0:	f44f 7286 	mov.w	r2, #268	; 0x10c
    8ae4:	fb02 3201 	mla	r2, r2, r1, r3
    8ae8:	4b3b      	ldr	r3, [pc, #236]	; (8bd8 <grid_nvm_ui_bulk_clear_next+0x14c>)
    8aea:	4621      	mov	r1, r4
    8aec:	4798      	blx	r3
	
		}
		
		
		
		if (nvm->clear_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8aee:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    8af2:	4e3a      	ldr	r6, [pc, #232]	; (8bdc <grid_nvm_ui_bulk_clear_next+0x150>)
    8af4:	f240 227e 	movw	r2, #638	; 0x27e
    8af8:	4293      	cmp	r3, r2
    8afa:	d830      	bhi.n	8b5e <grid_nvm_ui_bulk_clear_next+0xd2>
			
            
            uint8_t intensity = abs(nvm->clear_bulk_page_index%100 - 50)/1.5 + 40;
    8afc:	2264      	movs	r2, #100	; 0x64
    8afe:	fbb3 f0f2 	udiv	r0, r3, r2
    8b02:	fb02 3010 	mls	r0, r2, r0, r3
    8b06:	3832      	subs	r0, #50	; 0x32
    8b08:	2800      	cmp	r0, #0
    8b0a:	bfb8      	it	lt
    8b0c:	4240      	neglt	r0, r0
    8b0e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8c28 <grid_nvm_ui_bulk_clear_next+0x19c>
    8b12:	4d33      	ldr	r5, [pc, #204]	; (8be0 <grid_nvm_ui_bulk_clear_next+0x154>)
    8b14:	4f33      	ldr	r7, [pc, #204]	; (8be4 <grid_nvm_ui_bulk_clear_next+0x158>)
    8b16:	47c0      	blx	r8
    8b18:	4b33      	ldr	r3, [pc, #204]	; (8be8 <grid_nvm_ui_bulk_clear_next+0x15c>)
    8b1a:	2200      	movs	r2, #0
    8b1c:	47a8      	blx	r5
    8b1e:	4b33      	ldr	r3, [pc, #204]	; (8bec <grid_nvm_ui_bulk_clear_next+0x160>)
    8b20:	4d33      	ldr	r5, [pc, #204]	; (8bf0 <grid_nvm_ui_bulk_clear_next+0x164>)
    8b22:	2200      	movs	r2, #0
    8b24:	47a8      	blx	r5
    8b26:	47b8      	blx	r7
    8b28:	b2c5      	uxtb	r5, r0
  
            grid_sys_alert_set_alert(&grid_sys_state, intensity, intensity*0.75, 0, 1, 1000);
    8b2a:	4628      	mov	r0, r5
    8b2c:	47c0      	blx	r8
    8b2e:	4b31      	ldr	r3, [pc, #196]	; (8bf4 <grid_nvm_ui_bulk_clear_next+0x168>)
    8b30:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8c2c <grid_nvm_ui_bulk_clear_next+0x1a0>
    8b34:	2200      	movs	r2, #0
    8b36:	47c0      	blx	r8
    8b38:	47b8      	blx	r7
    8b3a:	2301      	movs	r3, #1
    8b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8b40:	e9cd 3200 	strd	r3, r2, [sp]
    8b44:	4629      	mov	r1, r5
    8b46:	2300      	movs	r3, #0
    8b48:	b2c2      	uxtb	r2, r0
    8b4a:	482b      	ldr	r0, [pc, #172]	; (8bf8 <grid_nvm_ui_bulk_clear_next+0x16c>)
    8b4c:	47b0      	blx	r6


            
            nvm->clear_bulk_page_index++;
    8b4e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    8b52:	3301      	adds	r3, #1
    8b54:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	}
	
	
	
	
}
    8b58:	b06c      	add	sp, #432	; 0x1b0
    8b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nvm->clear_bulk_page_index = 0;
    8b5e:	2500      	movs	r5, #0
    8b60:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
			nvm->clear_bulk_status = 0;
    8b64:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
			grid_msg_init(&response);
    8b68:	a805      	add	r0, sp, #20
    8b6a:	4b24      	ldr	r3, [pc, #144]	; (8bfc <grid_nvm_ui_bulk_clear_next+0x170>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8b6c:	4c24      	ldr	r4, [pc, #144]	; (8c00 <grid_nvm_ui_bulk_clear_next+0x174>)
			grid_msg_init(&response);
    8b6e:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8b70:	227f      	movs	r2, #127	; 0x7f
    8b72:	462b      	mov	r3, r5
    8b74:	4611      	mov	r1, r2
    8b76:	a805      	add	r0, sp, #20
    8b78:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    8b7a:	2303      	movs	r3, #3
    8b7c:	4921      	ldr	r1, [pc, #132]	; (8c04 <grid_nvm_ui_bulk_clear_next+0x178>)
    8b7e:	9300      	str	r3, [sp, #0]
    8b80:	2202      	movs	r2, #2
    8b82:	4c21      	ldr	r4, [pc, #132]	; (8c08 <grid_nvm_ui_bulk_clear_next+0x17c>)
			uint8_t response_payload[10] = {0};
    8b84:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    8b88:	2372      	movs	r3, #114	; 0x72
    8b8a:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    8b8c:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    8b90:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8b92:	4b1e      	ldr	r3, [pc, #120]	; (8c0c <grid_nvm_ui_bulk_clear_next+0x180>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8b94:	4c1e      	ldr	r4, [pc, #120]	; (8c10 <grid_nvm_ui_bulk_clear_next+0x184>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8b96:	a802      	add	r0, sp, #8
    8b98:	4798      	blx	r3
    8b9a:	a902      	add	r1, sp, #8
    8b9c:	4602      	mov	r2, r0
    8b9e:	4b1d      	ldr	r3, [pc, #116]	; (8c14 <grid_nvm_ui_bulk_clear_next+0x188>)
    8ba0:	a805      	add	r0, sp, #20
    8ba2:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8ba4:	230a      	movs	r3, #10
    8ba6:	9300      	str	r3, [sp, #0]
    8ba8:	4629      	mov	r1, r5
    8baa:	a805      	add	r0, sp, #20
    8bac:	2301      	movs	r3, #1
    8bae:	2204      	movs	r2, #4
    8bb0:	47a0      	blx	r4
                grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    8bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8bb6:	22ff      	movs	r2, #255	; 0xff
    8bb8:	4629      	mov	r1, r5
    8bba:	e9cd 5300 	strd	r5, r3, [sp]
    8bbe:	480e      	ldr	r0, [pc, #56]	; (8bf8 <grid_nvm_ui_bulk_clear_next+0x16c>)
    8bc0:	462b      	mov	r3, r5
    8bc2:	47b0      	blx	r6
			grid_msg_packet_close(&response);
    8bc4:	4b14      	ldr	r3, [pc, #80]	; (8c18 <grid_nvm_ui_bulk_clear_next+0x18c>)
    8bc6:	a805      	add	r0, sp, #20
    8bc8:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    8bca:	4b14      	ldr	r3, [pc, #80]	; (8c1c <grid_nvm_ui_bulk_clear_next+0x190>)
    8bcc:	a805      	add	r0, sp, #20
    8bce:	4798      	blx	r3
            grid_ui_reinit_local(&grid_ui_state);
    8bd0:	4813      	ldr	r0, [pc, #76]	; (8c20 <grid_nvm_ui_bulk_clear_next+0x194>)
    8bd2:	4b14      	ldr	r3, [pc, #80]	; (8c24 <grid_nvm_ui_bulk_clear_next+0x198>)
    8bd4:	4798      	blx	r3
}
    8bd6:	e7bf      	b.n	8b58 <grid_nvm_ui_bulk_clear_next+0xcc>
    8bd8:	00009f2d 	.word	0x00009f2d
    8bdc:	000097ab 	.word	0x000097ab
    8be0:	00012949 	.word	0x00012949
    8be4:	00012b19 	.word	0x00012b19
    8be8:	3ff80000 	.word	0x3ff80000
    8bec:	40440000 	.word	0x40440000
    8bf0:	00012389 	.word	0x00012389
    8bf4:	3fe80000 	.word	0x3fe80000
    8bf8:	20006fa4 	.word	0x20006fa4
    8bfc:	00008545 	.word	0x00008545
    8c00:	00008579 	.word	0x00008579
    8c04:	000155f5 	.word	0x000155f5
    8c08:	00013351 	.word	0x00013351
    8c0c:	00013801 	.word	0x00013801
    8c10:	00008529 	.word	0x00008529
    8c14:	000084b5 	.word	0x000084b5
    8c18:	00008671 	.word	0x00008671
    8c1c:	00008745 	.word	0x00008745
    8c20:	20006f98 	.word	0x20006f98
    8c24:	0000ae4d 	.word	0x0000ae4d
    8c28:	00012621 	.word	0x00012621
    8c2c:	000126f5 	.word	0x000126f5

00008c30 <grid_nvm_clear_read_buffer>:



void grid_nvm_clear_read_buffer(struct grid_nvm_model* mod){
	
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8c30:	f100 0309 	add.w	r3, r0, #9
    8c34:	f200 2209 	addw	r2, r0, #521	; 0x209
		
		mod->read_buffer[i] = 255;
    8c38:	21ff      	movs	r1, #255	; 0xff
    8c3a:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8c3e:	4293      	cmp	r3, r2
    8c40:	d1fb      	bne.n	8c3a <grid_nvm_clear_read_buffer+0xa>
		
	}

	mod->read_buffer_status = GRID_NVM_BUFFER_STATUS_EMPTY;
    8c42:	2302      	movs	r3, #2
    8c44:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	mod->read_buffer_length = 0;
    8c48:	2300      	movs	r3, #0
    8c4a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	
}
    8c4e:	4770      	bx	lr

00008c50 <grid_nvm_clear_write_buffer>:

void grid_nvm_clear_write_buffer(struct grid_nvm_model* mod){
	
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8c50:	f500 7306 	add.w	r3, r0, #536	; 0x218
    8c54:	f500 6283 	add.w	r2, r0, #1048	; 0x418
		
		mod->write_buffer[i] = 255;
    8c58:	21ff      	movs	r1, #255	; 0xff
    8c5a:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8c5e:	4293      	cmp	r3, r2
    8c60:	d1fb      	bne.n	8c5a <grid_nvm_clear_write_buffer+0xa>
		
	}
	
	mod->write_buffer_status = GRID_NVM_BUFFER_STATUS_EMPTY;
    8c62:	2302      	movs	r3, #2
    8c64:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	mod->write_buffer_length = 0;
    8c68:	2300      	movs	r3, #0
    8c6a:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
	mod->write_target_address = -1;
    8c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8c72:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
}
    8c76:	4770      	bx	lr

00008c78 <grid_nvm_init>:
void grid_nvm_init(struct grid_nvm_model* nvm, struct flash_descriptor* flash_instance){
    8c78:	b510      	push	{r4, lr}
	nvm->bank_settings_page_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    8c7a:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
	nvm->flash = flash_instance;
    8c7e:	e9c0 1300 	strd	r1, r3, [r0]
	nvm->status = 1;
    8c82:	2301      	movs	r3, #1
    8c84:	7203      	strb	r3, [r0, #8]
	nvm->read_buffer_status = GRID_NVM_BUFFER_STATUS_UNINITIALIZED;
    8c86:	2300      	movs	r3, #0
    8c88:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	nvm->write_buffer_status = GRID_NVM_BUFFER_STATUS_UNINITIALIZED;
    8c8c:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	nvm->read_bulk_page_index = 0;
    8c90:	f8c0 3424 	str.w	r3, [r0, #1060]	; 0x424
	nvm->read_bulk_status = 0;
    8c94:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
	nvm->clear_bulk_page_index = 0;
    8c98:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
	nvm->clear_bulk_status = 0;	
    8c9c:	f880 3430 	strb.w	r3, [r0, #1072]	; 0x430
	nvm->write_bulk_page_index = 0;
    8ca0:	f8c0 343c 	str.w	r3, [r0, #1084]	; 0x43c
	nvm->write_bulk_status = 0;
    8ca4:	f880 3440 	strb.w	r3, [r0, #1088]	; 0x440
	grid_nvm_clear_read_buffer(nvm);
    8ca8:	4b02      	ldr	r3, [pc, #8]	; (8cb4 <grid_nvm_init+0x3c>)
    8caa:	4798      	blx	r3
}
    8cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	grid_nvm_clear_write_buffer(nvm);
    8cb0:	4b01      	ldr	r3, [pc, #4]	; (8cb8 <grid_nvm_init+0x40>)
    8cb2:	4718      	bx	r3
    8cb4:	00008c31 	.word	0x00008c31
    8cb8:	00008c51 	.word	0x00008c51

00008cbc <grid_nvm_calculate_event_page_offset>:


uint32_t grid_nvm_calculate_event_page_offset(struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    8cbc:	b510      	push	{r4, lr}
	
	
	
	uint8_t bank_number		= eve->parent->parent->index;
    8cbe:	684a      	ldr	r2, [r1, #4]
    8cc0:	6853      	ldr	r3, [r2, #4]
	uint8_t element_number	= eve->parent->index;
	uint8_t event_number	= eve->index;

	return GRID_NVM_STRATEGY_BANK_size * bank_number + GRID_NVM_STRATEGY_ELEMENT_size * element_number + GRID_NVM_STRATEGY_EVENT_size * event_number;
    8cc2:	7a1c      	ldrb	r4, [r3, #8]
    8cc4:	7a13      	ldrb	r3, [r2, #8]
    8cc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8cca:	20a0      	movs	r0, #160	; 0xa0
    8ccc:	005b      	lsls	r3, r3, #1
    8cce:	fb10 3304 	smlabb	r3, r0, r4, r3
    8cd2:	7a08      	ldrb	r0, [r1, #8]
	
    8cd4:	4418      	add	r0, r3
    8cd6:	bd10      	pop	{r4, pc}

00008cd8 <_gpio_set_pin_pull_mode.constprop.0>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8cd8:	01c0      	lsls	r0, r0, #7
    8cda:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8cde:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
		break;

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    8ce2:	2301      	movs	r3, #1
    8ce4:	408b      	lsls	r3, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8ce6:	4401      	add	r1, r0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8ce8:	6043      	str	r3, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8cea:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
    8cee:	f042 0204 	orr.w	r2, r2, #4
    8cf2:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8cf6:	6183      	str	r3, [r0, #24]

	default:
		ASSERT(false);
		break;
	}
}
    8cf8:	4770      	bx	lr

00008cfa <grid_task_enter_task>:
 * Author : SUKU WC
*/

#include "grid_sys.h"

enum grid_task grid_task_enter_task(struct grid_task_model* mod, enum grid_task next_task){
    8cfa:	4603      	mov	r3, r0
	
	
	enum grid_task previous_task = mod->current_task;
    8cfc:	7840      	ldrb	r0, [r0, #1]
	mod->current_task = next_task;
    8cfe:	7059      	strb	r1, [r3, #1]
	return previous_task;
	
}
    8d00:	4770      	bx	lr

00008d02 <grid_task_timer_tick>:
	
}

void grid_task_timer_tick(struct grid_task_model* mod){
	
	mod->timer[mod->current_task]++;
    8d02:	7843      	ldrb	r3, [r0, #1]
    8d04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8d08:	6843      	ldr	r3, [r0, #4]
    8d0a:	3301      	adds	r3, #1
    8d0c:	6043      	str	r3, [r0, #4]
	
}
    8d0e:	4770      	bx	lr

00008d10 <grid_task_timer_reset>:

void grid_task_timer_reset(struct grid_task_model* mod){
	
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
		mod->timer[i] = 0;
    8d10:	2300      	movs	r3, #0
    8d12:	e9c0 3301 	strd	r3, r3, [r0, #4]
    8d16:	e9c0 3303 	strd	r3, r3, [r0, #12]
    8d1a:	e9c0 3305 	strd	r3, r3, [r0, #20]
    8d1e:	e9c0 3307 	strd	r3, r3, [r0, #28]
	}
	
}
    8d22:	4770      	bx	lr

00008d24 <grid_task_timer_read>:

uint32_t grid_task_timer_read(struct grid_task_model* mod, enum grid_task task){

	return 	mod->timer[task];
    8d24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	
}
    8d28:	6848      	ldr	r0, [r1, #4]
    8d2a:	4770      	bx	lr

00008d2c <grid_sys_nvm_store_configuration>:




void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d30:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec

	struct grid_msg message;
	
	grid_msg_init(&message);
    8d34:	4b6a      	ldr	r3, [pc, #424]	; (8ee0 <grid_sys_nvm_store_configuration+0x1b4>)
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8d36:	4c6b      	ldr	r4, [pc, #428]	; (8ee4 <grid_sys_nvm_store_configuration+0x1b8>)
	for(uint8_t i=0; i<4; i++){
		
		// BANK ENABLED	
		offset = grid_msg_body_get_length(&message);
			
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8d38:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8f0c <grid_sys_nvm_store_configuration+0x1e0>
void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8d3c:	4606      	mov	r6, r0
	grid_msg_init(&message);
    8d3e:	a86c      	add	r0, sp, #432	; 0x1b0
void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8d40:	460f      	mov	r7, r1
	grid_msg_init(&message);
    8d42:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8d44:	22ff      	movs	r2, #255	; 0xff
    8d46:	4611      	mov	r1, r2
    8d48:	2300      	movs	r3, #0
    8d4a:	a86c      	add	r0, sp, #432	; 0x1b0
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8d4c:	2500      	movs	r5, #0
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8d4e:	47a0      	blx	r4
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8d50:	4b65      	ldr	r3, [pc, #404]	; (8ee8 <grid_sys_nvm_store_configuration+0x1bc>)
    8d52:	9508      	str	r5, [sp, #32]
    8d54:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    8d58:	4629      	mov	r1, r5
    8d5a:	a809      	add	r0, sp, #36	; 0x24
    8d5c:	4798      	blx	r3
	for(uint8_t i=0; i<4; i++){
    8d5e:	3613      	adds	r6, #19
		offset = grid_msg_body_get_length(&message);
    8d60:	4b62      	ldr	r3, [pc, #392]	; (8eec <grid_sys_nvm_store_configuration+0x1c0>)
		payload_length = strlen(payload);
    8d62:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8f18 <grid_sys_nvm_store_configuration+0x1ec>
			
		grid_msg_body_append_text(&message, payload, payload_length);
    8d66:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8f1c <grid_sys_nvm_store_configuration+0x1f0>
			
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    8d6a:	4c61      	ldr	r4, [pc, #388]	; (8ef0 <grid_sys_nvm_store_configuration+0x1c4>)
		offset = grid_msg_body_get_length(&message);
    8d6c:	a86c      	add	r0, sp, #432	; 0x1b0
    8d6e:	4798      	blx	r3
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8d70:	2203      	movs	r2, #3
		offset = grid_msg_body_get_length(&message);
    8d72:	4680      	mov	r8, r0
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8d74:	2331      	movs	r3, #49	; 0x31
    8d76:	495f      	ldr	r1, [pc, #380]	; (8ef4 <grid_sys_nvm_store_configuration+0x1c8>)
    8d78:	9200      	str	r2, [sp, #0]
    8d7a:	a808      	add	r0, sp, #32
    8d7c:	2202      	movs	r2, #2
    8d7e:	47d0      	blx	sl
		payload_length = strlen(payload);
    8d80:	a808      	add	r0, sp, #32
    8d82:	47d8      	blx	fp
		grid_msg_body_append_text(&message, payload, payload_length);
    8d84:	a908      	add	r1, sp, #32
    8d86:	b2c2      	uxtb	r2, r0
    8d88:	a86c      	add	r0, sp, #432	; 0x1b0
    8d8a:	47c8      	blx	r9
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    8d8c:	220e      	movs	r2, #14
    8d8e:	4641      	mov	r1, r8
    8d90:	9200      	str	r2, [sp, #0]
    8d92:	2301      	movs	r3, #1
    8d94:	2204      	movs	r2, #4
    8d96:	a86c      	add	r0, sp, #432	; 0x1b0
    8d98:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_BANKNUMBER_offset, GRID_CLASS_BANKENABLED_BANKNUMBER_length, i);
    8d9a:	4641      	mov	r1, r8
    8d9c:	9500      	str	r5, [sp, #0]
    8d9e:	2302      	movs	r3, #2
    8da0:	2205      	movs	r2, #5
    8da2:	a86c      	add	r0, sp, #432	; 0x1b0
    8da4:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_ISENABLED_offset, GRID_CLASS_BANKENABLED_ISENABLED_length, sys->bank_enabled[i]);		
    8da6:	f816 3b01 	ldrb.w	r3, [r6], #1
    8daa:	9300      	str	r3, [sp, #0]
    8dac:	4641      	mov	r1, r8
    8dae:	2207      	movs	r2, #7
    8db0:	2302      	movs	r3, #2
    8db2:	a86c      	add	r0, sp, #432	; 0x1b0
    8db4:	47a0      	blx	r4
			
		// BANK COLOR	
		offset = grid_msg_body_get_length(&message);
    8db6:	4b4d      	ldr	r3, [pc, #308]	; (8eec <grid_sys_nvm_store_configuration+0x1c0>)
    8db8:	a86c      	add	r0, sp, #432	; 0x1b0
    8dba:	4798      	blx	r3
		
		sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8dbc:	2303      	movs	r3, #3
		offset = grid_msg_body_get_length(&message);
    8dbe:	4680      	mov	r8, r0
		sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8dc0:	494d      	ldr	r1, [pc, #308]	; (8ef8 <grid_sys_nvm_store_configuration+0x1cc>)
    8dc2:	9300      	str	r3, [sp, #0]
    8dc4:	2202      	movs	r2, #2
    8dc6:	2332      	movs	r3, #50	; 0x32
    8dc8:	a808      	add	r0, sp, #32
    8dca:	47d0      	blx	sl
		payload_length = strlen(payload);
    8dcc:	a808      	add	r0, sp, #32
    8dce:	47d8      	blx	fp
		
		grid_msg_body_append_text(&message, payload, payload_length);
    8dd0:	a908      	add	r1, sp, #32
    8dd2:	b2c2      	uxtb	r2, r0
    8dd4:	a86c      	add	r0, sp, #432	; 0x1b0
    8dd6:	47c8      	blx	r9

		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    8dd8:	230e      	movs	r3, #14
    8dda:	4641      	mov	r1, r8
    8ddc:	9300      	str	r3, [sp, #0]
    8dde:	2204      	movs	r2, #4
    8de0:	2301      	movs	r3, #1
    8de2:	a86c      	add	r0, sp, #432	; 0x1b0
    8de4:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_NUM_offset, GRID_CLASS_BANKCOLOR_NUM_length, i);
    8de6:	4641      	mov	r1, r8
    8de8:	9500      	str	r5, [sp, #0]
    8dea:	2302      	movs	r3, #2
    8dec:	2205      	movs	r2, #5
    8dee:	a86c      	add	r0, sp, #432	; 0x1b0
    8df0:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_RED_offset, GRID_CLASS_BANKCOLOR_RED_length, sys->bank_color_r[i]);
    8df2:	78f3      	ldrb	r3, [r6, #3]
    8df4:	9300      	str	r3, [sp, #0]
    8df6:	4641      	mov	r1, r8
    8df8:	2302      	movs	r3, #2
    8dfa:	2207      	movs	r2, #7
    8dfc:	a86c      	add	r0, sp, #432	; 0x1b0
    8dfe:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_GRE_offset, GRID_CLASS_BANKCOLOR_GRE_length, sys->bank_color_g[i]);
    8e00:	79f3      	ldrb	r3, [r6, #7]
    8e02:	9300      	str	r3, [sp, #0]
    8e04:	4641      	mov	r1, r8
    8e06:	2302      	movs	r3, #2
    8e08:	2209      	movs	r2, #9
    8e0a:	a86c      	add	r0, sp, #432	; 0x1b0
    8e0c:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_BLU_offset, GRID_CLASS_BANKCOLOR_BLU_length, sys->bank_color_b[i]);
    8e0e:	7af3      	ldrb	r3, [r6, #11]
    8e10:	9300      	str	r3, [sp, #0]
    8e12:	4641      	mov	r1, r8
    8e14:	2302      	movs	r3, #2
    8e16:	220b      	movs	r2, #11
    8e18:	a86c      	add	r0, sp, #432	; 0x1b0
    8e1a:	3501      	adds	r5, #1
    8e1c:	47a0      	blx	r4
	for(uint8_t i=0; i<4; i++){
    8e1e:	2d04      	cmp	r5, #4
    8e20:	46d8      	mov	r8, fp
    8e22:	d19d      	bne.n	8d60 <grid_sys_nvm_store_configuration+0x34>
		
		
	}
	
	grid_msg_packet_close(&message);
    8e24:	4e35      	ldr	r6, [pc, #212]	; (8efc <grid_sys_nvm_store_configuration+0x1d0>)

	grid_nvm_clear_write_buffer(nvm);
	
	uint8_t acknowledge = 0;
	
	if (grid_msg_packet_get_length(&message)){
    8e26:	4d36      	ldr	r5, [pc, #216]	; (8f00 <grid_sys_nvm_store_configuration+0x1d4>)
	grid_msg_packet_close(&message);
    8e28:	a86c      	add	r0, sp, #432	; 0x1b0
    8e2a:	47b0      	blx	r6
	grid_nvm_clear_write_buffer(nvm);
    8e2c:	4b35      	ldr	r3, [pc, #212]	; (8f04 <grid_sys_nvm_store_configuration+0x1d8>)
    8e2e:	4638      	mov	r0, r7
    8e30:	4798      	blx	r3
	if (grid_msg_packet_get_length(&message)){
    8e32:	a86c      	add	r0, sp, #432	; 0x1b0
    8e34:	47a8      	blx	r5
    8e36:	9602      	str	r6, [sp, #8]
    8e38:	2800      	cmp	r0, #0
    8e3a:	d04c      	beq.n	8ed6 <grid_sys_nvm_store_configuration+0x1aa>

		nvm->write_buffer_length = grid_msg_packet_get_length(&message);
    8e3c:	a86c      	add	r0, sp, #432	; 0x1b0
    8e3e:	47a8      	blx	r5
    8e40:	f507 7a06 	add.w	sl, r7, #536	; 0x218
		
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
			
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    8e44:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8f20 <grid_sys_nvm_store_configuration+0x1f4>
		nvm->write_buffer_length = grid_msg_packet_get_length(&message);
    8e48:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    8e4c:	2500      	movs	r5, #0
    8e4e:	4652      	mov	r2, sl
    8e50:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
    8e54:	42ab      	cmp	r3, r5
    8e56:	d835      	bhi.n	8ec4 <grid_sys_nvm_store_configuration+0x198>
		}
		
		nvm->write_target_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    8e58:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, nvm->write_buffer_length);
    8e5c:	4d2a      	ldr	r5, [pc, #168]	; (8f08 <grid_sys_nvm_store_configuration+0x1dc>)
    8e5e:	6838      	ldr	r0, [r7, #0]
		nvm->write_target_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    8e60:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, nvm->write_buffer_length);
    8e64:	47a8      	blx	r5
		
		acknowledge = 1;
    8e66:	2501      	movs	r5, #1

	
	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
	
	grid_msg_init(&response);
    8e68:	4b1d      	ldr	r3, [pc, #116]	; (8ee0 <grid_sys_nvm_store_configuration+0x1b4>)
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8e6a:	4f1e      	ldr	r7, [pc, #120]	; (8ee4 <grid_sys_nvm_store_configuration+0x1b8>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    8e6c:	4e27      	ldr	r6, [pc, #156]	; (8f0c <grid_sys_nvm_store_configuration+0x1e0>)
	grid_msg_init(&response);
    8e6e:	a8d3      	add	r0, sp, #844	; 0x34c
    8e70:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8e72:	227f      	movs	r2, #127	; 0x7f
    8e74:	4611      	mov	r1, r2
    8e76:	2300      	movs	r3, #0
    8e78:	a8d3      	add	r0, sp, #844	; 0x34c
    8e7a:	47b8      	blx	r7
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    8e7c:	2303      	movs	r3, #3
    8e7e:	4924      	ldr	r1, [pc, #144]	; (8f10 <grid_sys_nvm_store_configuration+0x1e4>)
    8e80:	9300      	str	r3, [sp, #0]
    8e82:	2202      	movs	r2, #2
	uint8_t response_payload[10] = {0};
    8e84:	2700      	movs	r7, #0
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    8e86:	2360      	movs	r3, #96	; 0x60
    8e88:	a805      	add	r0, sp, #20
	uint8_t response_payload[10] = {0};
    8e8a:	e9cd 7705 	strd	r7, r7, [sp, #20]
    8e8e:	f8ad 701c 	strh.w	r7, [sp, #28]
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    8e92:	47b0      	blx	r6

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8e94:	a805      	add	r0, sp, #20
    8e96:	47c0      	blx	r8
    8e98:	a905      	add	r1, sp, #20
    8e9a:	4602      	mov	r2, r0
    8e9c:	a8d3      	add	r0, sp, #844	; 0x34c
    8e9e:	47c8      	blx	r9
	
	if (acknowledge == 1){
    8ea0:	b1dd      	cbz	r5, 8eda <grid_sys_nvm_store_configuration+0x1ae>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);	
    8ea2:	230a      	movs	r3, #10
	}
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);	
    8ea4:	2204      	movs	r2, #4
    8ea6:	4639      	mov	r1, r7
    8ea8:	9300      	str	r3, [sp, #0]
    8eaa:	a8d3      	add	r0, sp, #844	; 0x34c
    8eac:	2301      	movs	r3, #1
    8eae:	47a0      	blx	r4
	}

	
	grid_msg_packet_close(&response);
    8eb0:	9b02      	ldr	r3, [sp, #8]
    8eb2:	a8d3      	add	r0, sp, #844	; 0x34c
    8eb4:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    8eb6:	4b17      	ldr	r3, [pc, #92]	; (8f14 <grid_sys_nvm_store_configuration+0x1e8>)
    8eb8:	a8d3      	add	r0, sp, #844	; 0x34c
    8eba:	4798      	blx	r3
		
	
}
    8ebc:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
    8ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    8ec4:	4629      	mov	r1, r5
    8ec6:	a86c      	add	r0, sp, #432	; 0x1b0
    8ec8:	9203      	str	r2, [sp, #12]
    8eca:	47d8      	blx	fp
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    8ecc:	3501      	adds	r5, #1
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    8ece:	f80a 0b01 	strb.w	r0, [sl], #1
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    8ed2:	9a03      	ldr	r2, [sp, #12]
    8ed4:	e7bc      	b.n	8e50 <grid_sys_nvm_store_configuration+0x124>
	uint8_t acknowledge = 0;
    8ed6:	4605      	mov	r5, r0
    8ed8:	e7c6      	b.n	8e68 <grid_sys_nvm_store_configuration+0x13c>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);	
    8eda:	230b      	movs	r3, #11
    8edc:	e7e2      	b.n	8ea4 <grid_sys_nvm_store_configuration+0x178>
    8ede:	bf00      	nop
    8ee0:	00008545 	.word	0x00008545
    8ee4:	00008579 	.word	0x00008579
    8ee8:	00012cf5 	.word	0x00012cf5
    8eec:	000084af 	.word	0x000084af
    8ef0:	00008529 	.word	0x00008529
    8ef4:	000155ff 	.word	0x000155ff
    8ef8:	000152d2 	.word	0x000152d2
    8efc:	00008671 	.word	0x00008671
    8f00:	000084a1 	.word	0x000084a1
    8f04:	00008c51 	.word	0x00008c51
    8f08:	0000e0a9 	.word	0x0000e0a9
    8f0c:	00013351 	.word	0x00013351
    8f10:	000155f5 	.word	0x000155f5
    8f14:	00008745 	.word	0x00008745
    8f18:	00013801 	.word	0x00013801
    8f1c:	000084b5 	.word	0x000084b5
    8f20:	0000863b 	.word	0x0000863b

00008f24 <grid_sys_recall_configuration>:


void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    8f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f28:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344

	struct grid_msg message;
	
	grid_msg_init(&message);
    8f2c:	4b48      	ldr	r3, [pc, #288]	; (9050 <grid_sys_recall_configuration+0x12c>)
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8f2e:	4c49      	ldr	r4, [pc, #292]	; (9054 <grid_sys_recall_configuration+0x130>)
void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    8f30:	4605      	mov	r5, r0
	grid_msg_init(&message);
    8f32:	a869      	add	r0, sp, #420	; 0x1a4
void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    8f34:	468a      	mov	sl, r1
	grid_msg_init(&message);
    8f36:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8f38:	227f      	movs	r2, #127	; 0x7f
    8f3a:	4611      	mov	r1, r2
    8f3c:	2300      	movs	r3, #0
    8f3e:	a869      	add	r0, sp, #420	; 0x1a4
    8f40:	47a0      	blx	r4


	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8f42:	2400      	movs	r4, #0
    8f44:	4b44      	ldr	r3, [pc, #272]	; (9058 <grid_sys_recall_configuration+0x134>)
    8f46:	9405      	str	r4, [sp, #20]
    8f48:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    8f4c:	4621      	mov	r1, r4
    8f4e:	a806      	add	r0, sp, #24
    8f50:	4798      	blx	r3
	uint8_t payload_length = 0;
	uint32_t offset = 0;
	
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8f52:	3513      	adds	r5, #19
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8f54:	9403      	str	r4, [sp, #12]
		
		if (bank > GRID_SYS_BANK_MAXNUMBER || bank == i){
    8f56:	f1ba 0f04 	cmp.w	sl, #4
    8f5a:	d803      	bhi.n	8f64 <grid_sys_recall_configuration+0x40>
    8f5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8f60:	459a      	cmp	sl, r3
    8f62:	d164      	bne.n	902e <grid_sys_recall_configuration+0x10a>
			
			// BANK ENABLED
			offset = grid_msg_body_get_length(&message);
    8f64:	4b3d      	ldr	r3, [pc, #244]	; (905c <grid_sys_recall_configuration+0x138>)
		
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8f66:	4e3e      	ldr	r6, [pc, #248]	; (9060 <grid_sys_recall_configuration+0x13c>)
			payload_length = strlen(payload);
		
			grid_msg_body_append_text(&message, payload, payload_length);
    8f68:	f8df 9110 	ldr.w	r9, [pc, #272]	; 907c <grid_sys_recall_configuration+0x158>
			offset = grid_msg_body_get_length(&message);
    8f6c:	a869      	add	r0, sp, #420	; 0x1a4
    8f6e:	4798      	blx	r3
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8f70:	f04f 0b03 	mov.w	fp, #3
			offset = grid_msg_body_get_length(&message);
    8f74:	4607      	mov	r7, r0
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8f76:	2331      	movs	r3, #49	; 0x31
    8f78:	493a      	ldr	r1, [pc, #232]	; (9064 <grid_sys_recall_configuration+0x140>)
    8f7a:	f8cd b000 	str.w	fp, [sp]
    8f7e:	2202      	movs	r2, #2
    8f80:	a805      	add	r0, sp, #20
    8f82:	47b0      	blx	r6
			payload_length = strlen(payload);
    8f84:	4a38      	ldr	r2, [pc, #224]	; (9068 <grid_sys_recall_configuration+0x144>)
    8f86:	a805      	add	r0, sp, #20
    8f88:	4790      	blx	r2
		
			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    8f8a:	f04f 080d 	mov.w	r8, #13
			grid_msg_body_append_text(&message, payload, payload_length);
    8f8e:	b2c2      	uxtb	r2, r0
    8f90:	a905      	add	r1, sp, #20
    8f92:	a869      	add	r0, sp, #420	; 0x1a4
    8f94:	47c8      	blx	r9
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8f96:	4634      	mov	r4, r6
			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    8f98:	4639      	mov	r1, r7
    8f9a:	4e34      	ldr	r6, [pc, #208]	; (906c <grid_sys_recall_configuration+0x148>)
    8f9c:	f8cd 8000 	str.w	r8, [sp]
    8fa0:	2301      	movs	r3, #1
    8fa2:	2204      	movs	r2, #4
    8fa4:	a869      	add	r0, sp, #420	; 0x1a4
    8fa6:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_BANKNUMBER_offset, GRID_CLASS_BANKENABLED_BANKNUMBER_length, i);
    8fa8:	9b03      	ldr	r3, [sp, #12]
    8faa:	9300      	str	r3, [sp, #0]
    8fac:	4639      	mov	r1, r7
    8fae:	2302      	movs	r3, #2
    8fb0:	2205      	movs	r2, #5
    8fb2:	a869      	add	r0, sp, #420	; 0x1a4
    8fb4:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_ISENABLED_offset, GRID_CLASS_BANKENABLED_ISENABLED_length, sys->bank_enabled[i]);
    8fb6:	782b      	ldrb	r3, [r5, #0]
    8fb8:	9300      	str	r3, [sp, #0]
    8fba:	4639      	mov	r1, r7
    8fbc:	2207      	movs	r2, #7
    8fbe:	2302      	movs	r3, #2
    8fc0:	a869      	add	r0, sp, #420	; 0x1a4
    8fc2:	47b0      	blx	r6
		
			// BANK COLOR
			offset = grid_msg_body_get_length(&message);
    8fc4:	4b25      	ldr	r3, [pc, #148]	; (905c <grid_sys_recall_configuration+0x138>)
    8fc6:	a869      	add	r0, sp, #420	; 0x1a4
    8fc8:	4798      	blx	r3
		
			sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8fca:	2332      	movs	r3, #50	; 0x32
			offset = grid_msg_body_get_length(&message);
    8fcc:	4607      	mov	r7, r0
			sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8fce:	4928      	ldr	r1, [pc, #160]	; (9070 <grid_sys_recall_configuration+0x14c>)
    8fd0:	f8cd b000 	str.w	fp, [sp]
    8fd4:	2202      	movs	r2, #2
    8fd6:	a805      	add	r0, sp, #20
    8fd8:	47a0      	blx	r4
			payload_length = strlen(payload);
    8fda:	4a23      	ldr	r2, [pc, #140]	; (9068 <grid_sys_recall_configuration+0x144>)
    8fdc:	a805      	add	r0, sp, #20
    8fde:	4790      	blx	r2
		
			grid_msg_body_append_text(&message, payload, payload_length);
    8fe0:	a905      	add	r1, sp, #20
    8fe2:	b2c2      	uxtb	r2, r0
    8fe4:	a869      	add	r0, sp, #420	; 0x1a4
    8fe6:	47c8      	blx	r9

			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    8fe8:	2301      	movs	r3, #1
    8fea:	2204      	movs	r2, #4
    8fec:	4639      	mov	r1, r7
    8fee:	a869      	add	r0, sp, #420	; 0x1a4
    8ff0:	f8cd 8000 	str.w	r8, [sp]
    8ff4:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_NUM_offset, GRID_CLASS_BANKCOLOR_NUM_length, i);
    8ff6:	9b03      	ldr	r3, [sp, #12]
    8ff8:	9300      	str	r3, [sp, #0]
    8ffa:	2205      	movs	r2, #5
    8ffc:	2302      	movs	r3, #2
    8ffe:	4639      	mov	r1, r7
    9000:	a869      	add	r0, sp, #420	; 0x1a4
    9002:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_RED_offset, GRID_CLASS_BANKCOLOR_RED_length, sys->bank_color_r[i]);
    9004:	792b      	ldrb	r3, [r5, #4]
    9006:	9300      	str	r3, [sp, #0]
    9008:	2207      	movs	r2, #7
    900a:	2302      	movs	r3, #2
    900c:	4639      	mov	r1, r7
    900e:	a869      	add	r0, sp, #420	; 0x1a4
    9010:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_GRE_offset, GRID_CLASS_BANKCOLOR_GRE_length, sys->bank_color_g[i]);
    9012:	7a2b      	ldrb	r3, [r5, #8]
    9014:	9300      	str	r3, [sp, #0]
    9016:	2209      	movs	r2, #9
    9018:	2302      	movs	r3, #2
    901a:	4639      	mov	r1, r7
    901c:	a869      	add	r0, sp, #420	; 0x1a4
    901e:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_BLU_offset, GRID_CLASS_BANKCOLOR_BLU_length, sys->bank_color_b[i]);
    9020:	7b2b      	ldrb	r3, [r5, #12]
    9022:	9300      	str	r3, [sp, #0]
    9024:	220b      	movs	r2, #11
    9026:	2302      	movs	r3, #2
    9028:	4639      	mov	r1, r7
    902a:	a869      	add	r0, sp, #420	; 0x1a4
    902c:	47b0      	blx	r6
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    902e:	9b03      	ldr	r3, [sp, #12]
    9030:	3301      	adds	r3, #1
    9032:	2b04      	cmp	r3, #4
    9034:	9303      	str	r3, [sp, #12]
    9036:	f105 0501 	add.w	r5, r5, #1
    903a:	d18c      	bne.n	8f56 <grid_sys_recall_configuration+0x32>
		}

		
	}
	
	grid_msg_packet_close(&message);
    903c:	4b0d      	ldr	r3, [pc, #52]	; (9074 <grid_sys_recall_configuration+0x150>)
    903e:	a869      	add	r0, sp, #420	; 0x1a4
    9040:	4798      	blx	r3

	grid_msg_packet_send_everywhere(&message);
    9042:	4b0d      	ldr	r3, [pc, #52]	; (9078 <grid_sys_recall_configuration+0x154>)
    9044:	a869      	add	r0, sp, #420	; 0x1a4
    9046:	4798      	blx	r3
// 	
// 	grid_msg_packet_close(&response);
// 	grid_msg_packet_send_everywhere(&response);
	
	
}
    9048:	f50d 7d51 	add.w	sp, sp, #836	; 0x344
    904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9050:	00008545 	.word	0x00008545
    9054:	00008579 	.word	0x00008579
    9058:	00012cf5 	.word	0x00012cf5
    905c:	000084af 	.word	0x000084af
    9060:	00013351 	.word	0x00013351
    9064:	000155ff 	.word	0x000155ff
    9068:	00013801 	.word	0x00013801
    906c:	00008529 	.word	0x00008529
    9070:	000152d2 	.word	0x000152d2
    9074:	00008671 	.word	0x00008671
    9078:	00008745 	.word	0x00008745
    907c:	000084b5 	.word	0x000084b5

00009080 <grid_sys_nvm_load_configuration>:


void grid_sys_nvm_load_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    9080:	b5f0      	push	{r4, r5, r6, r7, lr}
    9082:	f5ad 7d6d 	sub.w	sp, sp, #948	; 0x3b4
	
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
    9086:	2400      	movs	r4, #0
void grid_sys_nvm_load_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    9088:	460e      	mov	r6, r1
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
    908a:	4b2f      	ldr	r3, [pc, #188]	; (9148 <grid_sys_nvm_load_configuration+0xc8>)
    908c:	946c      	str	r4, [sp, #432]	; 0x1b0
    908e:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
    9092:	4621      	mov	r1, r4
    9094:	a86d      	add	r0, sp, #436	; 0x1b4
    9096:	4798      	blx	r3
    9098:	ad6c      	add	r5, sp, #432	; 0x1b0
	uint16_t length = 0;
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    909a:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
    909e:	f8c6 1214 	str.w	r1, [r6, #532]	; 0x214
	
	flash_read(nvm->flash, nvm->read_source_address, temp, GRID_NVM_PAGE_SIZE);
    90a2:	6830      	ldr	r0, [r6, #0]
    90a4:	4e29      	ldr	r6, [pc, #164]	; (914c <grid_sys_nvm_load_configuration+0xcc>)
    90a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    90aa:	462a      	mov	r2, r5
    90ac:	47b0      	blx	r6
			}
			else if (temp[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
				copydone = 1;
			}
			else{ // NORMAL CHARACTER, can be copied
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    90ae:	4a28      	ldr	r2, [pc, #160]	; (9150 <grid_sys_nvm_load_configuration+0xd0>)
	flash_read(nvm->flash, nvm->read_source_address, temp, GRID_NVM_PAGE_SIZE);
    90b0:	4621      	mov	r1, r4
	uint8_t acknowledge = 0;	
    90b2:	4626      	mov	r6, r4
	uint8_t copydone = 0;
    90b4:	4623      	mov	r3, r4
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    90b6:	f241 37b4 	movw	r7, #5044	; 0x13b4
		if (copydone == 0){
    90ba:	1c4c      	adds	r4, r1, #1
    90bc:	b943      	cbnz	r3, 90d0 <grid_sys_nvm_load_configuration+0x50>
			if (temp[i] == '\n'){ // END OF PACKET, copy newline character
    90be:	5c68      	ldrb	r0, [r5, r1]
    90c0:	280a      	cmp	r0, #10
    90c2:	d139      	bne.n	9138 <grid_sys_nvm_load_configuration+0xb8>
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    90c4:	4411      	add	r1, r2
    90c6:	55c8      	strb	r0, [r1, r7]
				GRID_PORT_U.rx_double_buffer_status = i+1;
    90c8:	6214      	str	r4, [r2, #32]
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    90ca:	6293      	str	r3, [r2, #40]	; 0x28
				acknowledge = 1;
    90cc:	2301      	movs	r3, #1
				copydone = 1;
    90ce:	461e      	mov	r6, r3
	for (uint16_t i=0; i<GRID_NVM_PAGE_SIZE; i++){		
    90d0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    90d4:	4621      	mov	r1, r4
    90d6:	d1f0      	bne.n	90ba <grid_sys_nvm_load_configuration+0x3a>
	
	
	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
	
	grid_msg_init(&response);
    90d8:	4b1e      	ldr	r3, [pc, #120]	; (9154 <grid_sys_nvm_load_configuration+0xd4>)
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    90da:	4c1f      	ldr	r4, [pc, #124]	; (9158 <grid_sys_nvm_load_configuration+0xd8>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    90dc:	4d1f      	ldr	r5, [pc, #124]	; (915c <grid_sys_nvm_load_configuration+0xdc>)
	grid_msg_init(&response);
    90de:	a805      	add	r0, sp, #20
    90e0:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    90e2:	227f      	movs	r2, #127	; 0x7f
    90e4:	4611      	mov	r1, r2
    90e6:	2300      	movs	r3, #0
    90e8:	a805      	add	r0, sp, #20
    90ea:	47a0      	blx	r4
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    90ec:	2303      	movs	r3, #3
    90ee:	491c      	ldr	r1, [pc, #112]	; (9160 <grid_sys_nvm_load_configuration+0xe0>)
    90f0:	9300      	str	r3, [sp, #0]
    90f2:	2202      	movs	r2, #2
	uint8_t response_payload[10] = {0};
    90f4:	2400      	movs	r4, #0
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    90f6:	2361      	movs	r3, #97	; 0x61
    90f8:	a802      	add	r0, sp, #8
	uint8_t response_payload[10] = {0};
    90fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
    90fe:	f8ad 4010 	strh.w	r4, [sp, #16]
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    9102:	47a8      	blx	r5

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    9104:	4b17      	ldr	r3, [pc, #92]	; (9164 <grid_sys_nvm_load_configuration+0xe4>)
    9106:	4d18      	ldr	r5, [pc, #96]	; (9168 <grid_sys_nvm_load_configuration+0xe8>)
    9108:	a802      	add	r0, sp, #8
    910a:	4798      	blx	r3
    910c:	4b17      	ldr	r3, [pc, #92]	; (916c <grid_sys_nvm_load_configuration+0xec>)
    910e:	4602      	mov	r2, r0
    9110:	a902      	add	r1, sp, #8
    9112:	a805      	add	r0, sp, #20
    9114:	4798      	blx	r3
	
	if (acknowledge == 1){
    9116:	b1ae      	cbz	r6, 9144 <grid_sys_nvm_load_configuration+0xc4>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    9118:	230a      	movs	r3, #10
	}
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    911a:	2204      	movs	r2, #4
    911c:	4621      	mov	r1, r4
    911e:	9300      	str	r3, [sp, #0]
    9120:	a805      	add	r0, sp, #20
    9122:	2301      	movs	r3, #1
    9124:	47a8      	blx	r5
	}

	
	grid_msg_packet_close(&response);
    9126:	4b12      	ldr	r3, [pc, #72]	; (9170 <grid_sys_nvm_load_configuration+0xf0>)
    9128:	a805      	add	r0, sp, #20
    912a:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    912c:	4b11      	ldr	r3, [pc, #68]	; (9174 <grid_sys_nvm_load_configuration+0xf4>)
    912e:	a805      	add	r0, sp, #20
    9130:	4798      	blx	r3
	
}
    9132:	f50d 7d6d 	add.w	sp, sp, #948	; 0x3b4
    9136:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (temp[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
    9138:	28ff      	cmp	r0, #255	; 0xff
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    913a:	bf16      	itet	ne
    913c:	1889      	addne	r1, r1, r2
				copydone = 1;
    913e:	2301      	moveq	r3, #1
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    9140:	55c8      	strbne	r0, [r1, r7]
    9142:	e7c5      	b.n	90d0 <grid_sys_nvm_load_configuration+0x50>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    9144:	230b      	movs	r3, #11
    9146:	e7e8      	b.n	911a <grid_sys_nvm_load_configuration+0x9a>
    9148:	00012cf5 	.word	0x00012cf5
    914c:	0000e03d 	.word	0x0000e03d
    9150:	2000404c 	.word	0x2000404c
    9154:	00008545 	.word	0x00008545
    9158:	00008579 	.word	0x00008579
    915c:	00013351 	.word	0x00013351
    9160:	000155f5 	.word	0x000155f5
    9164:	00013801 	.word	0x00013801
    9168:	00008529 	.word	0x00008529
    916c:	000084b5 	.word	0x000084b5
    9170:	00008671 	.word	0x00008671
    9174:	00008745 	.word	0x00008745

00009178 <grid_sys_nvm_clear_configuration>:

void grid_sys_nvm_clear_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    9178:	b530      	push	{r4, r5, lr}
    917a:	460b      	mov	r3, r1
	
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
	uint16_t length = 0;
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    917c:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
void grid_sys_nvm_clear_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    9180:	b0ed      	sub	sp, #436	; 0x1b4
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    9182:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
	
	flash_erase(nvm->flash, GRID_NVM_GLOBAL_BASE_ADDRESS, 1);
    9186:	2201      	movs	r2, #1
    9188:	6818      	ldr	r0, [r3, #0]
    918a:	4b18      	ldr	r3, [pc, #96]	; (91ec <grid_sys_nvm_clear_configuration+0x74>)

	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
		
	grid_msg_init(&response);
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    918c:	4c18      	ldr	r4, [pc, #96]	; (91f0 <grid_sys_nvm_clear_configuration+0x78>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    918e:	4d19      	ldr	r5, [pc, #100]	; (91f4 <grid_sys_nvm_clear_configuration+0x7c>)
	flash_erase(nvm->flash, GRID_NVM_GLOBAL_BASE_ADDRESS, 1);
    9190:	4798      	blx	r3
	grid_msg_init(&response);
    9192:	a805      	add	r0, sp, #20
    9194:	4b18      	ldr	r3, [pc, #96]	; (91f8 <grid_sys_nvm_clear_configuration+0x80>)
    9196:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9198:	227f      	movs	r2, #127	; 0x7f
    919a:	4611      	mov	r1, r2
    919c:	a805      	add	r0, sp, #20
    919e:	2300      	movs	r3, #0
    91a0:	47a0      	blx	r4
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    91a2:	2303      	movs	r3, #3
	uint8_t response_payload[10] = {0};
    91a4:	2400      	movs	r4, #0
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    91a6:	4915      	ldr	r1, [pc, #84]	; (91fc <grid_sys_nvm_clear_configuration+0x84>)
    91a8:	9300      	str	r3, [sp, #0]
    91aa:	2202      	movs	r2, #2
    91ac:	2362      	movs	r3, #98	; 0x62
    91ae:	a802      	add	r0, sp, #8
	uint8_t response_payload[10] = {0};
    91b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
    91b4:	f8ad 4010 	strh.w	r4, [sp, #16]
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    91b8:	47a8      	blx	r5

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    91ba:	4b11      	ldr	r3, [pc, #68]	; (9200 <grid_sys_nvm_clear_configuration+0x88>)
    91bc:	a802      	add	r0, sp, #8
    91be:	4798      	blx	r3
    91c0:	a902      	add	r1, sp, #8
    91c2:	4602      	mov	r2, r0
    91c4:	4b0f      	ldr	r3, [pc, #60]	; (9204 <grid_sys_nvm_clear_configuration+0x8c>)
    91c6:	a805      	add	r0, sp, #20
    91c8:	4798      	blx	r3
		
	if (acknowledge == 1){
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    91ca:	230a      	movs	r3, #10
    91cc:	4621      	mov	r1, r4
    91ce:	2204      	movs	r2, #4
    91d0:	9300      	str	r3, [sp, #0]
    91d2:	a805      	add	r0, sp, #20
    91d4:	4c0c      	ldr	r4, [pc, #48]	; (9208 <grid_sys_nvm_clear_configuration+0x90>)
    91d6:	2301      	movs	r3, #1
    91d8:	47a0      	blx	r4
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
	}

		
	grid_msg_packet_close(&response);
    91da:	4b0c      	ldr	r3, [pc, #48]	; (920c <grid_sys_nvm_clear_configuration+0x94>)
    91dc:	a805      	add	r0, sp, #20
    91de:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    91e0:	4b0b      	ldr	r3, [pc, #44]	; (9210 <grid_sys_nvm_clear_configuration+0x98>)
    91e2:	a805      	add	r0, sp, #20
    91e4:	4798      	blx	r3
	
	
}
    91e6:	b06d      	add	sp, #436	; 0x1b4
    91e8:	bd30      	pop	{r4, r5, pc}
    91ea:	bf00      	nop
    91ec:	0000e129 	.word	0x0000e129
    91f0:	00008579 	.word	0x00008579
    91f4:	00013351 	.word	0x00013351
    91f8:	00008545 	.word	0x00008545
    91fc:	000155f5 	.word	0x000155f5
    9200:	00013801 	.word	0x00013801
    9204:	000084b5 	.word	0x000084b5
    9208:	00008529 	.word	0x00008529
    920c:	00008671 	.word	0x00008671
    9210:	00008745 	.word	0x00008745

00009214 <grid_debug_print_text>:



void grid_debug_print_text(uint8_t* debug_string){
    9214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	uint32_t debug_string_length = strlen(debug_string);
    9218:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 92fc <grid_debug_print_text+0xe8>
	
	struct grid_msg message;
	
	grid_msg_init(&message);
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    921c:	4c2b      	ldr	r4, [pc, #172]	; (92cc <grid_debug_print_text+0xb8>)
	
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
	uint32_t offset = 0;
	
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_start);
    921e:	4e2c      	ldr	r6, [pc, #176]	; (92d0 <grid_debug_print_text+0xbc>)
	offset += strlen(&payload[offset]);
		
	sprintf(&payload[offset], "# ");
    9220:	4f2c      	ldr	r7, [pc, #176]	; (92d4 <grid_debug_print_text+0xc0>)
void grid_debug_print_text(uint8_t* debug_string){
    9222:	f5ad 7d4c 	sub.w	sp, sp, #816	; 0x330
    9226:	4681      	mov	r9, r0
	uint32_t debug_string_length = strlen(debug_string);
    9228:	47d0      	blx	sl
	grid_msg_init(&message);
    922a:	4b2b      	ldr	r3, [pc, #172]	; (92d8 <grid_debug_print_text+0xc4>)
	uint32_t debug_string_length = strlen(debug_string);
    922c:	4680      	mov	r8, r0
	grid_msg_init(&message);
    922e:	a865      	add	r0, sp, #404	; 0x194
    9230:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9232:	227f      	movs	r2, #127	; 0x7f
    9234:	4611      	mov	r1, r2
    9236:	2300      	movs	r3, #0
    9238:	a865      	add	r0, sp, #404	; 0x194
    923a:	47a0      	blx	r4
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    923c:	2400      	movs	r4, #0
    923e:	4621      	mov	r1, r4
    9240:	4b26      	ldr	r3, [pc, #152]	; (92dc <grid_debug_print_text+0xc8>)
    9242:	9401      	str	r4, [sp, #4]
    9244:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9248:	a802      	add	r0, sp, #8
    924a:	4798      	blx	r3
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_start);
    924c:	2202      	movs	r2, #2
    924e:	4924      	ldr	r1, [pc, #144]	; (92e0 <grid_debug_print_text+0xcc>)
    9250:	2320      	movs	r3, #32
    9252:	a801      	add	r0, sp, #4
    9254:	47b0      	blx	r6
	offset += strlen(&payload[offset]);
    9256:	a801      	add	r0, sp, #4
    9258:	47d0      	blx	sl
	sprintf(&payload[offset], "# ");
    925a:	ab01      	add	r3, sp, #4
    925c:	4403      	add	r3, r0
    925e:	4921      	ldr	r1, [pc, #132]	; (92e4 <grid_debug_print_text+0xd0>)
	offset += strlen(&payload[offset]);
    9260:	4605      	mov	r5, r0
	sprintf(&payload[offset], "# ");
    9262:	4618      	mov	r0, r3
    9264:	47b8      	blx	r7
	offset += strlen(&payload[offset]);
    9266:	47d0      	blx	sl
    9268:	ab01      	add	r3, sp, #4
    926a:	4405      	add	r5, r0

	for(uint32_t i=0; i<debug_string_length; i++){
    926c:	1958      	adds	r0, r3, r5
    926e:	4621      	mov	r1, r4
    9270:	4603      	mov	r3, r0
    9272:	4654      	mov	r4, sl
    9274:	4541      	cmp	r1, r8
    9276:	d006      	beq.n	9286 <grid_debug_print_text+0x72>
		
		payload[offset+i] = debug_string[i];
    9278:	f819 2001 	ldrb.w	r2, [r9, r1]
    927c:	f803 2b01 	strb.w	r2, [r3], #1
		
		if (offset + i > GRID_PARAMETER_PACKET_marign)
    9280:	194a      	adds	r2, r1, r5
    9282:	2ac8      	cmp	r2, #200	; 0xc8
    9284:	d91f      	bls.n	92c6 <grid_debug_print_text+0xb2>
		{
			break;
		}
	}
	offset += strlen(&payload[offset]);
    9286:	47a0      	blx	r4
	
	
	sprintf(&payload[offset], " #");
    9288:	ab01      	add	r3, sp, #4
	offset += strlen(&payload[offset]);
    928a:	4405      	add	r5, r0
	sprintf(&payload[offset], " #");
    928c:	442b      	add	r3, r5
    928e:	4916      	ldr	r1, [pc, #88]	; (92e8 <grid_debug_print_text+0xd4>)
    9290:	4618      	mov	r0, r3
    9292:	47b8      	blx	r7
	offset += strlen(&payload[offset]);
    9294:	47a0      	blx	r4
	
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_end);
    9296:	ab01      	add	r3, sp, #4
	offset += strlen(&payload[offset]);
    9298:	4405      	add	r5, r0
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_end);
    929a:	195f      	adds	r7, r3, r5
    929c:	4913      	ldr	r1, [pc, #76]	; (92ec <grid_debug_print_text+0xd8>)
    929e:	2203      	movs	r2, #3
    92a0:	4638      	mov	r0, r7
    92a2:	47b0      	blx	r6
	offset += strlen(&payload[offset]);	
    92a4:	4638      	mov	r0, r7
    92a6:	47a0      	blx	r4
	
	grid_msg_body_append_text(&message, payload, offset);
    92a8:	a901      	add	r1, sp, #4
    92aa:	1942      	adds	r2, r0, r5
    92ac:	4b10      	ldr	r3, [pc, #64]	; (92f0 <grid_debug_print_text+0xdc>)
    92ae:	a865      	add	r0, sp, #404	; 0x194
    92b0:	4798      	blx	r3
	grid_msg_packet_close(&message);
    92b2:	4b10      	ldr	r3, [pc, #64]	; (92f4 <grid_debug_print_text+0xe0>)
    92b4:	a865      	add	r0, sp, #404	; 0x194
    92b6:	4798      	blx	r3
	
	grid_msg_packet_send_everywhere(&message);
    92b8:	4b0f      	ldr	r3, [pc, #60]	; (92f8 <grid_debug_print_text+0xe4>)
    92ba:	a865      	add	r0, sp, #404	; 0x194
    92bc:	4798      	blx	r3
	

	
	
}
    92be:	f50d 7d4c 	add.w	sp, sp, #816	; 0x330
    92c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for(uint32_t i=0; i<debug_string_length; i++){
    92c6:	3101      	adds	r1, #1
    92c8:	e7d4      	b.n	9274 <grid_debug_print_text+0x60>
    92ca:	bf00      	nop
    92cc:	00008579 	.word	0x00008579
    92d0:	00013351 	.word	0x00013351
    92d4:	0001373d 	.word	0x0001373d
    92d8:	00008545 	.word	0x00008545
    92dc:	00012cf5 	.word	0x00012cf5
    92e0:	0001560d 	.word	0x0001560d
    92e4:	00015615 	.word	0x00015615
    92e8:	00015618 	.word	0x00015618
    92ec:	000152cf 	.word	0x000152cf
    92f0:	000084b5 	.word	0x000084b5
    92f4:	00008671 	.word	0x00008671
    92f8:	00008745 	.word	0x00008745
    92fc:	00013801 	.word	0x00013801

00009300 <tx_cb_USART_GRID>:
static void tx_cb_USART_GRID_W(const struct usart_async_descriptor *const descr)
{
	tx_cb_USART_GRID(&GRID_PORT_W);
}

void tx_cb_USART_GRID(struct grid_port* const por){
    9300:	b530      	push	{r4, r5, lr}
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    9302:	f06f 052b 	mvn.w	r5, #43	; 0x2b
    9306:	8984      	ldrh	r4, [r0, #12]
    9308:	f100 032c 	add.w	r3, r0, #44	; 0x2c
    930c:	1a2d      	subs	r5, r5, r0
    930e:	2200      	movs	r2, #0
    9310:	18e9      	adds	r1, r5, r3
    9312:	428c      	cmp	r4, r1
    9314:	d801      	bhi.n	931a <tx_cb_USART_GRID+0x1a>
		por->tx_double_buffer[i] = 0;
	}
	por->tx_double_buffer_status = 0;	
    9316:	8182      	strh	r2, [r0, #12]
}
    9318:	bd30      	pop	{r4, r5, pc}
		por->tx_double_buffer[i] = 0;
    931a:	f803 2b01 	strb.w	r2, [r3], #1
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    931e:	e7f7      	b.n	9310 <tx_cb_USART_GRID+0x10>

00009320 <tx_cb_USART_GRID_W>:
	tx_cb_USART_GRID(&GRID_PORT_W);
    9320:	4801      	ldr	r0, [pc, #4]	; (9328 <tx_cb_USART_GRID_W+0x8>)
    9322:	4b02      	ldr	r3, [pc, #8]	; (932c <tx_cb_USART_GRID_W+0xc>)
    9324:	4718      	bx	r3
    9326:	bf00      	nop
    9328:	20008270 	.word	0x20008270
    932c:	00009301 	.word	0x00009301

00009330 <tx_cb_USART_GRID_S>:
	tx_cb_USART_GRID(&GRID_PORT_S);
    9330:	4801      	ldr	r0, [pc, #4]	; (9338 <tx_cb_USART_GRID_S+0x8>)
    9332:	4b02      	ldr	r3, [pc, #8]	; (933c <tx_cb_USART_GRID_S+0xc>)
    9334:	4718      	bx	r3
    9336:	bf00      	nop
    9338:	2000b73c 	.word	0x2000b73c
    933c:	00009301 	.word	0x00009301

00009340 <tx_cb_USART_GRID_E>:
	tx_cb_USART_GRID(&GRID_PORT_E);
    9340:	4801      	ldr	r0, [pc, #4]	; (9348 <tx_cb_USART_GRID_E+0x8>)
    9342:	4b02      	ldr	r3, [pc, #8]	; (934c <tx_cb_USART_GRID_E+0xc>)
    9344:	4718      	bx	r3
    9346:	bf00      	nop
    9348:	200116d8 	.word	0x200116d8
    934c:	00009301 	.word	0x00009301

00009350 <tx_cb_USART_GRID_N>:
	tx_cb_USART_GRID(&GRID_PORT_N);
    9350:	4801      	ldr	r0, [pc, #4]	; (9358 <tx_cb_USART_GRID_N+0x8>)
    9352:	4b02      	ldr	r3, [pc, #8]	; (935c <tx_cb_USART_GRID_N+0xc>)
    9354:	4718      	bx	r3
    9356:	bf00      	nop
    9358:	200010ec 	.word	0x200010ec
    935c:	00009301 	.word	0x00009301

00009360 <err_cb_USART_GRID>:
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
	por->usart_error_flag = 1;	
    9360:	2301      	movs	r3, #1
    9362:	7603      	strb	r3, [r0, #24]
	
	usart_async_disable(por->usart);
    9364:	6840      	ldr	r0, [r0, #4]
    9366:	4b01      	ldr	r3, [pc, #4]	; (936c <err_cb_USART_GRID+0xc>)
    9368:	4718      	bx	r3
    936a:	bf00      	nop
    936c:	00010241 	.word	0x00010241

00009370 <err_cb_USART_GRID_W>:
	err_cb_USART_GRID(&GRID_PORT_W);
    9370:	4801      	ldr	r0, [pc, #4]	; (9378 <err_cb_USART_GRID_W+0x8>)
    9372:	4b02      	ldr	r3, [pc, #8]	; (937c <err_cb_USART_GRID_W+0xc>)
    9374:	4718      	bx	r3
    9376:	bf00      	nop
    9378:	20008270 	.word	0x20008270
    937c:	00009361 	.word	0x00009361

00009380 <err_cb_USART_GRID_S>:
	err_cb_USART_GRID(&GRID_PORT_S);
    9380:	4801      	ldr	r0, [pc, #4]	; (9388 <err_cb_USART_GRID_S+0x8>)
    9382:	4b02      	ldr	r3, [pc, #8]	; (938c <err_cb_USART_GRID_S+0xc>)
    9384:	4718      	bx	r3
    9386:	bf00      	nop
    9388:	2000b73c 	.word	0x2000b73c
    938c:	00009361 	.word	0x00009361

00009390 <err_cb_USART_GRID_E>:
	err_cb_USART_GRID(&GRID_PORT_E);
    9390:	4801      	ldr	r0, [pc, #4]	; (9398 <err_cb_USART_GRID_E+0x8>)
    9392:	4b02      	ldr	r3, [pc, #8]	; (939c <err_cb_USART_GRID_E+0xc>)
    9394:	4718      	bx	r3
    9396:	bf00      	nop
    9398:	200116d8 	.word	0x200116d8
    939c:	00009361 	.word	0x00009361

000093a0 <err_cb_USART_GRID_N>:
	err_cb_USART_GRID(&GRID_PORT_N);
    93a0:	4801      	ldr	r0, [pc, #4]	; (93a8 <err_cb_USART_GRID_N+0x8>)
    93a2:	4b02      	ldr	r3, [pc, #8]	; (93ac <err_cb_USART_GRID_N+0xc>)
    93a4:	4718      	bx	r3
    93a6:	bf00      	nop
    93a8:	200010ec 	.word	0x200010ec
    93ac:	00009361 	.word	0x00009361

000093b0 <grid_sys_port_reset_dma>:
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
    93b0:	7a80      	ldrb	r0, [r0, #10]
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    93b2:	0103      	lsls	r3, r0, #4
    93b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    93b8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	_dma_enable_transaction(por->dma_channel, false);
    93bc:	2100      	movs	r1, #0
    93be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    93c0:	f022 0202 	bic.w	r2, r2, #2
    93c4:	641a      	str	r2, [r3, #64]	; 0x40
    93c6:	4b01      	ldr	r3, [pc, #4]	; (93cc <grid_sys_port_reset_dma+0x1c>)
    93c8:	4718      	bx	r3
    93ca:	bf00      	nop
    93cc:	0000d50d 	.word	0x0000d50d

000093d0 <dma_transfer_complete_n_cb>:
	grid_sys_port_reset_dma(por);
    93d0:	4801      	ldr	r0, [pc, #4]	; (93d8 <dma_transfer_complete_n_cb+0x8>)
    93d2:	4b02      	ldr	r3, [pc, #8]	; (93dc <dma_transfer_complete_n_cb+0xc>)
    93d4:	4718      	bx	r3
    93d6:	bf00      	nop
    93d8:	200010ec 	.word	0x200010ec
    93dc:	000093b1 	.word	0x000093b1

000093e0 <dma_transfer_complete_e_cb>:
    93e0:	4801      	ldr	r0, [pc, #4]	; (93e8 <dma_transfer_complete_e_cb+0x8>)
    93e2:	4b02      	ldr	r3, [pc, #8]	; (93ec <dma_transfer_complete_e_cb+0xc>)
    93e4:	4718      	bx	r3
    93e6:	bf00      	nop
    93e8:	200116d8 	.word	0x200116d8
    93ec:	000093b1 	.word	0x000093b1

000093f0 <dma_transfer_complete_s_cb>:
    93f0:	4801      	ldr	r0, [pc, #4]	; (93f8 <dma_transfer_complete_s_cb+0x8>)
    93f2:	4b02      	ldr	r3, [pc, #8]	; (93fc <dma_transfer_complete_s_cb+0xc>)
    93f4:	4718      	bx	r3
    93f6:	bf00      	nop
    93f8:	2000b73c 	.word	0x2000b73c
    93fc:	000093b1 	.word	0x000093b1

00009400 <dma_transfer_complete_w_cb>:
    9400:	4801      	ldr	r0, [pc, #4]	; (9408 <dma_transfer_complete_w_cb+0x8>)
    9402:	4b02      	ldr	r3, [pc, #8]	; (940c <dma_transfer_complete_w_cb+0xc>)
    9404:	4718      	bx	r3
    9406:	bf00      	nop
    9408:	20008270 	.word	0x20008270
    940c:	000093b1 	.word	0x000093b1

00009410 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    9410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    9414:	211c      	movs	r1, #28
    9416:	4c2c      	ldr	r4, [pc, #176]	; (94c8 <grid_sys_uart_init+0xb8>)
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    9418:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 9514 <grid_sys_uart_init+0x104>
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    941c:	4f2b      	ldr	r7, [pc, #172]	; (94cc <grid_sys_uart_init+0xbc>)
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    941e:	4e2c      	ldr	r6, [pc, #176]	; (94d0 <grid_sys_uart_init+0xc0>)
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    9420:	4d2c      	ldr	r5, [pc, #176]	; (94d4 <grid_sys_uart_init+0xc4>)
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    9422:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 9518 <grid_sys_uart_init+0x108>
    9426:	2002      	movs	r0, #2
    9428:	47a0      	blx	r4
    942a:	2110      	movs	r1, #16
    942c:	2002      	movs	r0, #2
    942e:	47a0      	blx	r4
    9430:	210c      	movs	r1, #12
    9432:	2002      	movs	r0, #2
    9434:	47a0      	blx	r4
    9436:	2109      	movs	r1, #9
    9438:	2001      	movs	r0, #1
    943a:	47a0      	blx	r4
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    943c:	4c26      	ldr	r4, [pc, #152]	; (94d8 <grid_sys_uart_init+0xc8>)
    943e:	4a27      	ldr	r2, [pc, #156]	; (94dc <grid_sys_uart_init+0xcc>)
    9440:	2101      	movs	r1, #1
    9442:	4640      	mov	r0, r8
    9444:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    9446:	4a26      	ldr	r2, [pc, #152]	; (94e0 <grid_sys_uart_init+0xd0>)
    9448:	2101      	movs	r1, #1
    944a:	4638      	mov	r0, r7
    944c:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    944e:	4a25      	ldr	r2, [pc, #148]	; (94e4 <grid_sys_uart_init+0xd4>)
    9450:	2101      	movs	r1, #1
    9452:	4630      	mov	r0, r6
    9454:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    9456:	4a24      	ldr	r2, [pc, #144]	; (94e8 <grid_sys_uart_init+0xd8>)
    9458:	2101      	movs	r1, #1
    945a:	4628      	mov	r0, r5
    945c:	47a0      	blx	r4
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    945e:	2101      	movs	r1, #1
    9460:	4640      	mov	r0, r8
    9462:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    9464:	2101      	movs	r1, #1
    9466:	4638      	mov	r0, r7
    9468:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    946a:	2101      	movs	r1, #1
    946c:	4630      	mov	r0, r6
    946e:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    9470:	2101      	movs	r1, #1
    9472:	4628      	mov	r0, r5
    9474:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    9476:	4a1d      	ldr	r2, [pc, #116]	; (94ec <grid_sys_uart_init+0xdc>)
    9478:	2102      	movs	r1, #2
    947a:	4640      	mov	r0, r8
    947c:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    947e:	4a1c      	ldr	r2, [pc, #112]	; (94f0 <grid_sys_uart_init+0xe0>)
    9480:	2102      	movs	r1, #2
    9482:	4638      	mov	r0, r7
    9484:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    9486:	4a1b      	ldr	r2, [pc, #108]	; (94f4 <grid_sys_uart_init+0xe4>)
    9488:	2102      	movs	r1, #2
    948a:	4630      	mov	r0, r6
    948c:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    948e:	4a1a      	ldr	r2, [pc, #104]	; (94f8 <grid_sys_uart_init+0xe8>)
    9490:	2102      	movs	r1, #2
    9492:	4628      	mov	r0, r5
    9494:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    9496:	4c19      	ldr	r4, [pc, #100]	; (94fc <grid_sys_uart_init+0xec>)
    9498:	4919      	ldr	r1, [pc, #100]	; (9500 <grid_sys_uart_init+0xf0>)
    949a:	4640      	mov	r0, r8
    949c:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    949e:	4919      	ldr	r1, [pc, #100]	; (9504 <grid_sys_uart_init+0xf4>)
    94a0:	4638      	mov	r0, r7
    94a2:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    94a4:	4918      	ldr	r1, [pc, #96]	; (9508 <grid_sys_uart_init+0xf8>)
    94a6:	4630      	mov	r0, r6
    94a8:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    94aa:	4918      	ldr	r1, [pc, #96]	; (950c <grid_sys_uart_init+0xfc>)
    94ac:	4628      	mov	r0, r5
    94ae:	47a0      	blx	r4
	
	
	usart_async_enable(&USART_NORTH);
    94b0:	4c17      	ldr	r4, [pc, #92]	; (9510 <grid_sys_uart_init+0x100>)
    94b2:	4640      	mov	r0, r8
    94b4:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    94b6:	4638      	mov	r0, r7
    94b8:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    94ba:	4630      	mov	r0, r6
    94bc:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    94be:	4628      	mov	r0, r5
    94c0:	4623      	mov	r3, r4




}
    94c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	usart_async_enable(&USART_WEST);
    94c6:	4718      	bx	r3
    94c8:	00008cd9 	.word	0x00008cd9
    94cc:	20014c10 	.word	0x20014c10
    94d0:	20014d68 	.word	0x20014d68
    94d4:	20014d18 	.word	0x20014d18
    94d8:	00010291 	.word	0x00010291
    94dc:	00009351 	.word	0x00009351
    94e0:	00009341 	.word	0x00009341
    94e4:	00009331 	.word	0x00009331
    94e8:	00009321 	.word	0x00009321
    94ec:	000093a1 	.word	0x000093a1
    94f0:	00009391 	.word	0x00009391
    94f4:	00009381 	.word	0x00009381
    94f8:	00009371 	.word	0x00009371
    94fc:	0001026d 	.word	0x0001026d
    9500:	20006fa0 	.word	0x20006fa0
    9504:	2000b738 	.word	0x2000b738
    9508:	2000e688 	.word	0x2000e688
    950c:	200146b8 	.word	0x200146b8
    9510:	00010215 	.word	0x00010215
    9514:	20014c64 	.word	0x20014c64
    9518:	000102f1 	.word	0x000102f1

0000951c <grid_sys_dma_rx_init_one>:



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    951c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
	
	uint8_t dma_rx_channel = por->dma_channel;
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    951e:	6843      	ldr	r3, [r0, #4]
	uint8_t dma_rx_channel = por->dma_channel;
    9520:	7a84      	ldrb	r4, [r0, #10]
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    9522:	460f      	mov	r7, r1
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    9524:	6a19      	ldr	r1, [r3, #32]
    9526:	4b10      	ldr	r3, [pc, #64]	; (9568 <grid_sys_dma_rx_init_one+0x4c>)
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    9528:	4605      	mov	r5, r0
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    952a:	3128      	adds	r1, #40	; 0x28
    952c:	4620      	mov	r0, r4
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    952e:	4616      	mov	r6, r2
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    9530:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    9532:	f505 519d 	add.w	r1, r5, #5024	; 0x13a0
    9536:	4b0d      	ldr	r3, [pc, #52]	; (956c <grid_sys_dma_rx_init_one+0x50>)
    9538:	3114      	adds	r1, #20
    953a:	4620      	mov	r0, r4
    953c:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    953e:	4639      	mov	r1, r7
    9540:	4b0b      	ldr	r3, [pc, #44]	; (9570 <grid_sys_dma_rx_init_one+0x54>)
    9542:	4620      	mov	r0, r4
    9544:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    9546:	4621      	mov	r1, r4
    9548:	4b0a      	ldr	r3, [pc, #40]	; (9574 <grid_sys_dma_rx_init_one+0x58>)
    954a:	a801      	add	r0, sp, #4
    954c:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    954e:	9b01      	ldr	r3, [sp, #4]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    9550:	2201      	movs	r2, #1
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    9552:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    9554:	4620      	mov	r0, r4
    9556:	4b08      	ldr	r3, [pc, #32]	; (9578 <grid_sys_dma_rx_init_one+0x5c>)
    9558:	2100      	movs	r1, #0
    955a:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    955c:	4b07      	ldr	r3, [pc, #28]	; (957c <grid_sys_dma_rx_init_one+0x60>)
    955e:	2100      	movs	r1, #0
    9560:	4620      	mov	r0, r4
    9562:	4798      	blx	r3
	

}
    9564:	b003      	add	sp, #12
    9566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9568:	0000d49d 	.word	0x0000d49d
    956c:	0000d48d 	.word	0x0000d48d
    9570:	0000d4c9 	.word	0x0000d4c9
    9574:	0000d549 	.word	0x0000d549
    9578:	0000d465 	.word	0x0000d465
    957c:	0000d50d 	.word	0x0000d50d

00009580 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    9580:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    9582:	4a10      	ldr	r2, [pc, #64]	; (95c4 <grid_sys_dma_rx_init+0x44>)
    9584:	4c10      	ldr	r4, [pc, #64]	; (95c8 <grid_sys_dma_rx_init+0x48>)
    9586:	4811      	ldr	r0, [pc, #68]	; (95cc <grid_sys_dma_rx_init+0x4c>)
    9588:	f241 3188 	movw	r1, #5000	; 0x1388
    958c:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    958e:	4a10      	ldr	r2, [pc, #64]	; (95d0 <grid_sys_dma_rx_init+0x50>)
    9590:	4810      	ldr	r0, [pc, #64]	; (95d4 <grid_sys_dma_rx_init+0x54>)
    9592:	f241 3188 	movw	r1, #5000	; 0x1388
    9596:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    9598:	4a0f      	ldr	r2, [pc, #60]	; (95d8 <grid_sys_dma_rx_init+0x58>)
    959a:	4810      	ldr	r0, [pc, #64]	; (95dc <grid_sys_dma_rx_init+0x5c>)
    959c:	f241 3188 	movw	r1, #5000	; 0x1388
    95a0:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    95a2:	4a0f      	ldr	r2, [pc, #60]	; (95e0 <grid_sys_dma_rx_init+0x60>)
    95a4:	480f      	ldr	r0, [pc, #60]	; (95e4 <grid_sys_dma_rx_init+0x64>)
    95a6:	f241 3188 	movw	r1, #5000	; 0x1388
    95aa:	47a0      	blx	r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95ac:	4b0e      	ldr	r3, [pc, #56]	; (95e8 <grid_sys_dma_rx_init+0x68>)
    95ae:	2200      	movs	r2, #0
    95b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    95b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    95b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    95bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
	NVIC_SetPriority(DMAC_0_IRQn, 0);
	NVIC_SetPriority(DMAC_1_IRQn, 0);
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}
    95c0:	bd10      	pop	{r4, pc}
    95c2:	bf00      	nop
    95c4:	000093d1 	.word	0x000093d1
    95c8:	0000951d 	.word	0x0000951d
    95cc:	200010ec 	.word	0x200010ec
    95d0:	000093e1 	.word	0x000093e1
    95d4:	200116d8 	.word	0x200116d8
    95d8:	000093f1 	.word	0x000093f1
    95dc:	2000b73c 	.word	0x2000b73c
    95e0:	00009401 	.word	0x00009401
    95e4:	20008270 	.word	0x20008270
    95e8:	e000e100 	.word	0xe000e100

000095ec <grid_sys_init>:
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    95ec:	4b16      	ldr	r3, [pc, #88]	; (9648 <grid_sys_init+0x5c>)

void grid_sys_init(struct grid_sys_model* mod){
    95ee:	b570      	push	{r4, r5, r6, lr}
    95f0:	781b      	ldrb	r3, [r3, #0]
	
	mod->uptime = 0;
	mod->reset_cause = hri_rstc_read_RCAUSE_reg(RSTC);
    95f2:	7103      	strb	r3, [r0, #4]
	mod->uptime = 0;
    95f4:	2500      	movs	r5, #0
void grid_sys_init(struct grid_sys_model* mod){
    95f6:	4604      	mov	r4, r0
	mod->uptime = 0;
    95f8:	6005      	str	r5, [r0, #0]
	
    
	mod->sessionid = rand_sync_read8(&RAND_0);
    95fa:	4b14      	ldr	r3, [pc, #80]	; (964c <grid_sys_init+0x60>)
    95fc:	4814      	ldr	r0, [pc, #80]	; (9650 <grid_sys_init+0x64>)
    95fe:	4798      	blx	r3
	mod->bank_color_r[3] = 100;
	mod->bank_color_g[3] = 0;
	mod->bank_color_b[3] = 200;
	
	mod->bank_enabled[0] = 1;
	mod->bank_enabled[1] = 1;
    9600:	4a14      	ldr	r2, [pc, #80]	; (9654 <grid_sys_init+0x68>)
    9602:	4b15      	ldr	r3, [pc, #84]	; (9658 <grid_sys_init+0x6c>)
	mod->bank_color_g[1] = 100;
    9604:	4915      	ldr	r1, [pc, #84]	; (965c <grid_sys_init+0x70>)
	mod->sessionid = rand_sync_read8(&RAND_0);
    9606:	7160      	strb	r0, [r4, #5]
	mod->bank_enabled[1] = 1;
    9608:	e9c4 2304 	strd	r2, r3, [r4, #16]
	mod->bank_color_g[1] = 100;
    960c:	4b14      	ldr	r3, [pc, #80]	; (9660 <grid_sys_init+0x74>)
	mod->bank_setting_changed_flag = 0;
	
	mod->bank_init_flag = 0;


	mod->bank_activebank_number = 0;
    960e:	73e5      	strb	r5, [r4, #15]
	mod->bank_color_g[1] = 100;
    9610:	e9c4 1306 	strd	r1, r3, [r4, #24]
	mod->bank_color_b[1] = 0;
    9614:	f44f 5348 	mov.w	r3, #12800	; 0x3200
    9618:	8423      	strh	r3, [r4, #32]
	mod->bank_color_b[3] = 200;
    961a:	23c8      	movs	r3, #200	; 0xc8
    961c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	if (banknumber == 255){
			
		//mod->bank_activebank_number = 0;
		mod->bank_activebank_valid = 0;
		
		mod->bank_active_changed = 1;
    9620:	4b10      	ldr	r3, [pc, #64]	; (9664 <grid_sys_init+0x78>)
	mod->bank_activebank_color_r = 0;
    9622:	6265      	str	r5, [r4, #36]	; 0x24
		mod->bank_active_changed = 1;
    9624:	2201      	movs	r2, #1
    9626:	745a      	strb	r2, [r3, #17]
				
		mod->bank_activebank_color_r = 127;
    9628:	f647 727f 	movw	r2, #32639	; 0x7f7f
		mod->bank_activebank_valid = 0;
    962c:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
		mod->bank_activebank_color_r = 127;
    9630:	849a      	strh	r2, [r3, #36]	; 0x24
		mod->bank_activebank_color_g = 127;
		mod->bank_activebank_color_b = 127;
    9632:	227f      	movs	r2, #127	; 0x7f
    9634:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	grid_port_init_all();
    9638:	4b0b      	ldr	r3, [pc, #44]	; (9668 <grid_sys_init+0x7c>)
    963a:	4798      	blx	r3
	grid_sys_uart_init();
    963c:	4b0b      	ldr	r3, [pc, #44]	; (966c <grid_sys_init+0x80>)
    963e:	4798      	blx	r3
}
    9640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	grid_sys_dma_rx_init();
    9644:	4b0a      	ldr	r3, [pc, #40]	; (9670 <grid_sys_init+0x84>)
    9646:	4718      	bx	r3
    9648:	40000c00 	.word	0x40000c00
    964c:	0000da7d 	.word	0x0000da7d
    9650:	20014bdc 	.word	0x20014bdc
    9654:	01000001 	.word	0x01000001
    9658:	00010101 	.word	0x00010101
    965c:	646432c8 	.word	0x646432c8
    9660:	c800c864 	.word	0xc800c864
    9664:	20006fa4 	.word	0x20006fa4
    9668:	00005165 	.word	0x00005165
    966c:	00009411 	.word	0x00009411
    9670:	00009581 	.word	0x00009581

00009674 <grid_sys_bank_enable>:
	if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    9674:	2903      	cmp	r1, #3
		mod->bank_enabled[banknumber] = 1;
    9676:	bf9e      	ittt	ls
    9678:	1809      	addls	r1, r1, r0
    967a:	2301      	movls	r3, #1
    967c:	74cb      	strbls	r3, [r1, #19]
}
    967e:	4770      	bx	lr

00009680 <grid_sys_bank_disable>:
	if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    9680:	2903      	cmp	r1, #3
		mod->bank_enabled[banknumber] = 0;
    9682:	bf9e      	ittt	ls
    9684:	1809      	addls	r1, r1, r0
    9686:	2300      	movls	r3, #0
    9688:	74cb      	strbls	r3, [r1, #19]
}
    968a:	4770      	bx	lr

0000968c <grid_sys_bank_set_color>:
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    968c:	2904      	cmp	r1, #4
    968e:	d901      	bls.n	9694 <grid_sys_bank_set_color+0x8>
		return false;
    9690:	2000      	movs	r0, #0
    9692:	4770      	bx	lr
	mod->bank_color_r[banknumber] = ((rgb&0x00FF0000)>>16);
    9694:	4401      	add	r1, r0
    9696:	0c13      	lsrs	r3, r2, #16
    9698:	75cb      	strb	r3, [r1, #23]
	mod->bank_color_g[banknumber] = ((rgb&0x0000FF00)>>8);
    969a:	0a13      	lsrs	r3, r2, #8
    969c:	76cb      	strb	r3, [r1, #27]
	mod->bank_color_b[banknumber] = ((rgb&0x000000FF)>>0);
    969e:	77ca      	strb	r2, [r1, #31]
}
    96a0:	4770      	bx	lr

000096a2 <grid_sys_get_bank_num>:
}
    96a2:	7bc0      	ldrb	r0, [r0, #15]
    96a4:	4770      	bx	lr

000096a6 <grid_sys_get_bank_valid>:
}
    96a6:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    96aa:	4770      	bx	lr

000096ac <grid_sys_get_bank_red>:
}
    96ac:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    96b0:	4770      	bx	lr

000096b2 <grid_sys_get_bank_gre>:
}
    96b2:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    96b6:	4770      	bx	lr

000096b8 <grid_sys_get_bank_blu>:
}
    96b8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    96bc:	4770      	bx	lr

000096be <grid_sys_get_bank_next>:
uint8_t grid_sys_get_bank_next(struct grid_sys_model* mod){
    96be:	b530      	push	{r4, r5, lr}
    96c0:	4602      	mov	r2, r0
	return mod->bank_activebank_number;
    96c2:	7bc0      	ldrb	r0, [r0, #15]
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    96c4:	1c43      	adds	r3, r0, #1
    96c6:	1d44      	adds	r4, r0, #5
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    96c8:	f003 0103 	and.w	r1, r3, #3
		if (mod->bank_enabled[bank_check] == 1){
    96cc:	1855      	adds	r5, r2, r1
    96ce:	7ced      	ldrb	r5, [r5, #19]
    96d0:	2d01      	cmp	r5, #1
    96d2:	d003      	beq.n	96dc <grid_sys_get_bank_next+0x1e>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    96d4:	3301      	adds	r3, #1
    96d6:	42a3      	cmp	r3, r4
    96d8:	d1f6      	bne.n	96c8 <grid_sys_get_bank_next+0xa>
}
    96da:	bd30      	pop	{r4, r5, pc}
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    96dc:	b2c8      	uxtb	r0, r1
    96de:	e7fc      	b.n	96da <grid_sys_get_bank_next+0x1c>

000096e0 <grid_sys_get_bank_number_of_first_valid>:
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    96e0:	f100 0213 	add.w	r2, r0, #19
uint8_t grid_sys_get_bank_number_of_first_valid(struct grid_sys_model* mod){
    96e4:	2300      	movs	r3, #0
		if (mod->bank_enabled[i] == 1){
    96e6:	f812 1b01 	ldrb.w	r1, [r2], #1
    96ea:	2901      	cmp	r1, #1
    96ec:	b2d8      	uxtb	r0, r3
    96ee:	d003      	beq.n	96f8 <grid_sys_get_bank_number_of_first_valid+0x18>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    96f0:	3301      	adds	r3, #1
    96f2:	2b04      	cmp	r3, #4
    96f4:	d1f7      	bne.n	96e6 <grid_sys_get_bank_number_of_first_valid+0x6>
	return 255;
    96f6:	20ff      	movs	r0, #255	; 0xff
}
    96f8:	4770      	bx	lr

000096fa <grid_sys_set_bank>:
	if (banknumber == 255){
    96fa:	29ff      	cmp	r1, #255	; 0xff
    96fc:	d10b      	bne.n	9716 <grid_sys_set_bank+0x1c>
		mod->bank_active_changed = 1;
    96fe:	2301      	movs	r3, #1
    9700:	7443      	strb	r3, [r0, #17]
		mod->bank_activebank_valid = 0;
    9702:	2300      	movs	r3, #0
    9704:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		mod->bank_activebank_color_r = 127;
    9708:	f647 737f 	movw	r3, #32639	; 0x7f7f
    970c:	8483      	strh	r3, [r0, #36]	; 0x24
		mod->bank_activebank_color_b = 127;
    970e:	237f      	movs	r3, #127	; 0x7f
			
			mod->bank_active_changed = 1;
			
			mod->bank_activebank_color_r = mod->bank_color_r[mod->bank_activebank_number];
			mod->bank_activebank_color_g = mod->bank_color_g[mod->bank_activebank_number];
			mod->bank_activebank_color_b = mod->bank_color_b[mod->bank_activebank_number];	
    9710:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
		//grid_debug_print_text("Invalid Bank Number");	
				
	}

	
}
    9714:	4770      	bx	lr
	else if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    9716:	2903      	cmp	r1, #3
    9718:	d8fc      	bhi.n	9714 <grid_sys_set_bank+0x1a>
		mod->bank_init_flag = 1;
    971a:	2301      	movs	r3, #1
    971c:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
		if (mod->bank_enabled[banknumber] == 1){
    9720:	1843      	adds	r3, r0, r1
    9722:	7cda      	ldrb	r2, [r3, #19]
    9724:	2a01      	cmp	r2, #1
    9726:	d1f5      	bne.n	9714 <grid_sys_set_bank+0x1a>
			mod->bank_activebank_number = banknumber;
    9728:	73c1      	strb	r1, [r0, #15]
			mod->bank_activebank_valid = 1;
    972a:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
			mod->bank_active_changed = 1;
    972e:	7442      	strb	r2, [r0, #17]
			mod->bank_activebank_color_r = mod->bank_color_r[mod->bank_activebank_number];
    9730:	7dda      	ldrb	r2, [r3, #23]
    9732:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
			mod->bank_activebank_color_g = mod->bank_color_g[mod->bank_activebank_number];
    9736:	7eda      	ldrb	r2, [r3, #27]
    9738:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
			mod->bank_activebank_color_b = mod->bank_color_b[mod->bank_activebank_number];	
    973c:	7fdb      	ldrb	r3, [r3, #31]
    973e:	e7e7      	b.n	9710 <grid_sys_set_bank+0x16>

00009740 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    9740:	6a80      	ldr	r0, [r0, #40]	; 0x28
    9742:	4770      	bx	lr

00009744 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    9744:	6a80      	ldr	r0, [r0, #40]	; 0x28
	
	

}
    9746:	1a40      	subs	r0, r0, r1
    9748:	4770      	bx	lr

0000974a <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	
	mod->realtime++;
    974a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    974c:	3301      	adds	r3, #1
    974e:	6283      	str	r3, [r0, #40]	; 0x28
	if (mod->uptime != -1){
    9750:	6803      	ldr	r3, [r0, #0]
    9752:	1c5a      	adds	r2, r3, #1
		mod->uptime++;
    9754:	bf1c      	itt	ne
    9756:	3301      	addne	r3, #1
    9758:	6003      	strne	r3, [r0, #0]
	}
	
}
    975a:	4770      	bx	lr

0000975c <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    975c:	7b80      	ldrb	r0, [r0, #14]
    975e:	4770      	bx	lr

00009760 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    9760:	2300      	movs	r3, #0
    9762:	7383      	strb	r3, [r0, #14]
	
}
    9764:	4770      	bx	lr

00009766 <grid_sys_alert_get_color_intensity>:

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    9766:	7b03      	ldrb	r3, [r0, #12]
    9768:	b963      	cbnz	r3, 9784 <grid_sys_alert_get_color_intensity+0x1e>
		
		return (250-abs(mod->alert_state/2-250))/2;
    976a:	8940      	ldrh	r0, [r0, #10]
    976c:	0840      	lsrs	r0, r0, #1
    976e:	38fa      	subs	r0, #250	; 0xfa
    9770:	2800      	cmp	r0, #0
    9772:	bfb8      	it	lt
    9774:	4240      	neglt	r0, r0
    9776:	f1c0 00fa 	rsb	r0, r0, #250	; 0xfa
    977a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    977e:	f3c0 0047 	ubfx	r0, r0, #1, #8
    9782:	4770      	bx	lr
	}
	else if (mod->alert_style == 1){ // SQUARE
    9784:	2b01      	cmp	r3, #1
    9786:	d107      	bne.n	9798 <grid_sys_alert_get_color_intensity+0x32>
		
		return 255*(mod->alert_state/250%2);
    9788:	8940      	ldrh	r0, [r0, #10]
    978a:	23fa      	movs	r3, #250	; 0xfa
    978c:	fbb0 f0f3 	udiv	r0, r0, r3
    9790:	f340 0000 	sbfx	r0, r0, #0, #1
    9794:	b2c0      	uxtb	r0, r0
    9796:	4770      	bx	lr
	}
	else if (mod->alert_style == 2){ // CONST
    9798:	2b02      	cmp	r3, #2
    979a:	d105      	bne.n	97a8 <grid_sys_alert_get_color_intensity+0x42>
		
		return 255*(mod->alert_state>100);
    979c:	8940      	ldrh	r0, [r0, #10]
    979e:	2864      	cmp	r0, #100	; 0x64
    97a0:	bf8c      	ite	hi
    97a2:	20ff      	movhi	r0, #255	; 0xff
    97a4:	2000      	movls	r0, #0
    97a6:	4770      	bx	lr
	}
	
	
}
    97a8:	4770      	bx	lr

000097aa <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    97aa:	b510      	push	{r4, lr}
	mod->alert_color_blue = blue;
    97ac:	7203      	strb	r3, [r0, #8]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    97ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    97b2:	8143      	strh	r3, [r0, #10]
	mod->alert_color_changed = 1;
    97b4:	2401      	movs	r4, #1
	mod->alert_style = style;
    97b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	mod->alert_color_changed = 1;
    97ba:	7384      	strb	r4, [r0, #14]
	mod->alert_color_red = red;
    97bc:	7181      	strb	r1, [r0, #6]
	mod->alert_color_green = green;
    97be:	71c2      	strb	r2, [r0, #7]
	mod->alert_style = style;
    97c0:	7303      	strb	r3, [r0, #12]
	
}
    97c2:	bd10      	pop	{r4, pc}

000097c4 <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    97c4:	7980      	ldrb	r0, [r0, #6]
    97c6:	4770      	bx	lr

000097c8 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    97c8:	79c0      	ldrb	r0, [r0, #7]
    97ca:	4770      	bx	lr

000097cc <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    97cc:	7a00      	ldrb	r0, [r0, #8]
    97ce:	4770      	bx	lr

000097d0 <grid_sys_read_hex_char_value>:

uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    97d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    97d4:	b2db      	uxtb	r3, r3
    97d6:	2b09      	cmp	r3, #9
    97d8:	d905      	bls.n	97e6 <grid_sys_read_hex_char_value+0x16>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    97da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    97de:	2b05      	cmp	r3, #5
    97e0:	d803      	bhi.n	97ea <grid_sys_read_hex_char_value+0x1a>
		result = ascii - 97 + 10;
    97e2:	3857      	subs	r0, #87	; 0x57
    97e4:	b2c3      	uxtb	r3, r0
			*error_flag = ascii;
		}
	}
	
	return result;	
}
    97e6:	4618      	mov	r0, r3
    97e8:	4770      	bx	lr
		if (error_flag != NULL){
    97ea:	b111      	cbz	r1, 97f2 <grid_sys_read_hex_char_value+0x22>
			*error_flag = ascii;
    97ec:	7008      	strb	r0, [r1, #0]
	uint8_t result = 0;
    97ee:	2300      	movs	r3, #0
    97f0:	e7f9      	b.n	97e6 <grid_sys_read_hex_char_value+0x16>
    97f2:	460b      	mov	r3, r1
    97f4:	e7f7      	b.n	97e6 <grid_sys_read_hex_char_value+0x16>
	...

000097f8 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    97f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    97fa:	4f08      	ldr	r7, [pc, #32]	; (981c <grid_sys_read_hex_string_value+0x24>)
    97fc:	1e45      	subs	r5, r0, #1
    97fe:	008c      	lsls	r4, r1, #2
	uint32_t result  = 0;
    9800:	2600      	movs	r6, #0
	for(uint8_t i=0; i<length; i++){
    9802:	3c04      	subs	r4, #4
    9804:	1d23      	adds	r3, r4, #4
    9806:	d101      	bne.n	980c <grid_sys_read_hex_string_value+0x14>

		
	}

	return result;
}
    9808:	4630      	mov	r0, r6
    980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    980c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    9810:	4611      	mov	r1, r2
    9812:	47b8      	blx	r7
    9814:	40a0      	lsls	r0, r4
    9816:	4406      	add	r6, r0
	for(uint8_t i=0; i<length; i++){
    9818:	e7f3      	b.n	9802 <grid_sys_read_hex_string_value+0xa>
    981a:	bf00      	nop
    981c:	000097d1 	.word	0x000097d1

00009820 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    9820:	b530      	push	{r4, r5, lr}
    9822:	b085      	sub	sp, #20
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    9824:	4b0a      	ldr	r3, [pc, #40]	; (9850 <grid_sys_write_hex_string_value+0x30>)
void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    9826:	460c      	mov	r4, r1
    9828:	4605      	mov	r5, r0
	sprintf(str, "%08x", value);
    982a:	490a      	ldr	r1, [pc, #40]	; (9854 <grid_sys_write_hex_string_value+0x34>)
    982c:	a801      	add	r0, sp, #4
    982e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    9830:	aa01      	add	r2, sp, #4
    9832:	f1c4 0308 	rsb	r3, r4, #8
    9836:	4413      	add	r3, r2
    9838:	2200      	movs	r2, #0
    983a:	b2d1      	uxtb	r1, r2
    983c:	428c      	cmp	r4, r1
    983e:	d801      	bhi.n	9844 <grid_sys_write_hex_string_value+0x24>
		start_location[i] = str[8-size+i];	
	}

}
    9840:	b005      	add	sp, #20
    9842:	bd30      	pop	{r4, r5, pc}
		start_location[i] = str[8-size+i];	
    9844:	f813 1b01 	ldrb.w	r1, [r3], #1
    9848:	54a9      	strb	r1, [r5, r2]
	for(uint8_t i=0; i<size; i++){	
    984a:	3201      	adds	r2, #1
    984c:	e7f5      	b.n	983a <grid_sys_write_hex_string_value+0x1a>
    984e:	bf00      	nop
    9850:	00013351 	.word	0x00013351
    9854:	0001561b 	.word	0x0001561b

00009858 <grid_sys_get_id>:



uint32_t grid_sys_get_id(uint32_t* return_array){
			
	return_array[0] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_0);
    9858:	4b06      	ldr	r3, [pc, #24]	; (9874 <grid_sys_get_id+0x1c>)
    985a:	681b      	ldr	r3, [r3, #0]
    985c:	6003      	str	r3, [r0, #0]
	return_array[1] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_1);
    985e:	4b06      	ldr	r3, [pc, #24]	; (9878 <grid_sys_get_id+0x20>)
    9860:	681b      	ldr	r3, [r3, #0]
    9862:	6043      	str	r3, [r0, #4]
	return_array[2] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_2);
    9864:	4b05      	ldr	r3, [pc, #20]	; (987c <grid_sys_get_id+0x24>)
    9866:	681b      	ldr	r3, [r3, #0]
    9868:	6083      	str	r3, [r0, #8]
	return_array[3] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_3);
    986a:	4b05      	ldr	r3, [pc, #20]	; (9880 <grid_sys_get_id+0x28>)
    986c:	681b      	ldr	r3, [r3, #0]
    986e:	60c3      	str	r3, [r0, #12]
	
	return 1;
	
}
    9870:	2001      	movs	r0, #1
    9872:	4770      	bx	lr
    9874:	008061fc 	.word	0x008061fc
    9878:	00806010 	.word	0x00806010
    987c:	00806014 	.word	0x00806014
    9880:	00806018 	.word	0x00806018

00009884 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
    9884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    9888:	4e30      	ldr	r6, [pc, #192]	; (994c <grid_sys_get_hwcfg+0xc8>)
    988a:	6833      	ldr	r3, [r6, #0]
    988c:	3301      	adds	r3, #1
    988e:	d158      	bne.n	9942 <grid_sys_get_hwcfg+0xbe>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    9890:	4c2f      	ldr	r4, [pc, #188]	; (9950 <grid_sys_get_hwcfg+0xcc>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    9892:	4b30      	ldr	r3, [pc, #192]	; (9954 <grid_sys_get_hwcfg+0xd0>)
		gpio_set_pin_direction(HWCFG_CLOCK, GPIO_DIRECTION_OUT);
		gpio_set_pin_direction(HWCFG_DATA, GPIO_DIRECTION_IN);
			
		// LOAD DATA
		gpio_set_pin_level(HWCFG_SHIFT, 0);
		delay_ms(1);
    9894:	4f30      	ldr	r7, [pc, #192]	; (9958 <grid_sys_get_hwcfg+0xd4>)
	CRITICAL_SECTION_ENTER();
    9896:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 9964 <grid_sys_get_hwcfg+0xe0>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    989a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    989e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    98a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    98a6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    98aa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    98ae:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    98b2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    98b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    98ba:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    98be:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    98c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    98c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    98ca:	4b24      	ldr	r3, [pc, #144]	; (995c <grid_sys_get_hwcfg+0xd8>)
    98cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    98d0:	f1a3 2380 	sub.w	r3, r3, #2147516416	; 0x80008000
    98d4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    98d8:	2001      	movs	r0, #1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    98da:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    98de:	47b8      	blx	r7
    98e0:	f04f 0a00 	mov.w	sl, #0
			
			
			
		uint8_t hwcfg_value = 0;
    98e4:	46d3      	mov	fp, sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    98e6:	46a8      	mov	r8, r5
			
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
				
			// SHIFT DATA
			gpio_set_pin_level(HWCFG_SHIFT, 1); //This outputs the first value to HWCFG_DATA
			delay_ms(1);
    98e8:	2001      	movs	r0, #1
    98ea:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
    98ee:	47b8      	blx	r7
    98f0:	a801      	add	r0, sp, #4
    98f2:	47c8      	blx	r9
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    98f4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    98f8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    98fc:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9900:	405d      	eors	r5, r3
    9902:	4015      	ands	r5, r2
    9904:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    9906:	a801      	add	r0, sp, #4
    9908:	4b15      	ldr	r3, [pc, #84]	; (9960 <grid_sys_get_hwcfg+0xdc>)
    990a:	4798      	blx	r3
				
				
			if(gpio_get_pin_level(HWCFG_DATA)){
    990c:	042b      	lsls	r3, r5, #16
					
				hwcfg_value |= (1<<i);
    990e:	bf41      	itttt	mi
    9910:	2301      	movmi	r3, #1
    9912:	fa03 f30a 	lslmi.w	r3, r3, sl
    9916:	ea43 0b0b 	orrmi.w	fp, r3, fp
    991a:	fa5f fb8b 	uxtbmi.w	fp, fp
				}else{
					
					
			}
				
			if(i!=7){
    991e:	f1ba 0f07 	cmp.w	sl, #7
    9922:	d007      	beq.n	9934 <grid_sys_get_hwcfg+0xb0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9924:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    9928:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
					
				// Clock rise
				gpio_set_pin_level(HWCFG_CLOCK, 1);
					
				delay_ms(1);
    992c:	2001      	movs	r0, #1
    992e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9930:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    9934:	f10a 0a01 	add.w	sl, sl, #1
    9938:	f1ba 0f08 	cmp.w	sl, #8
    993c:	d1d4      	bne.n	98e8 <grid_sys_get_hwcfg+0x64>
				gpio_set_pin_level(HWCFG_CLOCK, 0);
			}
							
		}
		
		grid_sys_hwfcg = hwcfg_value;
    993e:	f8c6 b000 	str.w	fp, [r6]
	}

	
	return grid_sys_hwfcg;

}
    9942:	6830      	ldr	r0, [r6, #0]
    9944:	b003      	add	sp, #12
    9946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    994a:	bf00      	nop
    994c:	2000034c 	.word	0x2000034c
    9950:	41008000 	.word	0x41008000
    9954:	40002000 	.word	0x40002000
    9958:	0000d055 	.word	0x0000d055
    995c:	40028000 	.word	0x40028000
    9960:	00011577 	.word	0x00011577
    9964:	00011569 	.word	0x00011569

00009968 <grid_msg_calculate_checksum_of_packet_string>:
	grid_sys_ping(&GRID_PORT_S);
	grid_sys_ping(&GRID_PORT_W);
	
}

uint8_t grid_msg_calculate_checksum_of_packet_string(uint8_t* str, uint32_t length){
    9968:	b510      	push	{r4, lr}
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    996a:	2300      	movs	r3, #0
uint8_t grid_msg_calculate_checksum_of_packet_string(uint8_t* str, uint32_t length){
    996c:	4602      	mov	r2, r0
	for (uint32_t i=0; i<length-3; i++){
    996e:	3903      	subs	r1, #3
	uint8_t checksum = 0;
    9970:	4618      	mov	r0, r3
	for (uint32_t i=0; i<length-3; i++){
    9972:	4299      	cmp	r1, r3
    9974:	d800      	bhi.n	9978 <grid_msg_calculate_checksum_of_packet_string+0x10>
		checksum ^= str[i];
	}
	
	return checksum;
	
}
    9976:	bd10      	pop	{r4, pc}
		checksum ^= str[i];
    9978:	5cd4      	ldrb	r4, [r2, r3]
	for (uint32_t i=0; i<length-3; i++){
    997a:	3301      	adds	r3, #1
		checksum ^= str[i];
    997c:	4060      	eors	r0, r4
	for (uint32_t i=0; i<length-3; i++){
    997e:	e7f8      	b.n	9972 <grid_msg_calculate_checksum_of_packet_string+0xa>

00009980 <grid_msg_checksum_read>:
	return checksum;
	
}


uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    9980:	b507      	push	{r0, r1, r2, lr}
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    9982:	1ecb      	subs	r3, r1, #3
    9984:	f10d 0207 	add.w	r2, sp, #7
    9988:	2102      	movs	r1, #2
    998a:	4418      	add	r0, r3
    998c:	4b02      	ldr	r3, [pc, #8]	; (9998 <grid_msg_checksum_read+0x18>)
    998e:	4798      	blx	r3
}
    9990:	b2c0      	uxtb	r0, r0
    9992:	b003      	add	sp, #12
    9994:	f85d fb04 	ldr.w	pc, [sp], #4
    9998:	000097f9 	.word	0x000097f9

0000999c <grid_msg_checksum_write>:
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    999c:	1ecb      	subs	r3, r1, #3
    999e:	4418      	add	r0, r3
    99a0:	2102      	movs	r1, #2
    99a2:	4b01      	ldr	r3, [pc, #4]	; (99a8 <grid_msg_checksum_write+0xc>)
    99a4:	4718      	bx	r3
    99a6:	bf00      	nop
    99a8:	00009821 	.word	0x00009821

000099ac <grid_msg_get_parameter>:
}


// MESSAGE PARAMETER FUNCTIONS

uint32_t grid_msg_get_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint8_t* error){
    99ac:	b410      	push	{r4}
    99ae:	460c      	mov	r4, r1
		
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
    99b0:	4420      	add	r0, r4
uint32_t grid_msg_get_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint8_t* error){
    99b2:	4611      	mov	r1, r2
}
    99b4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
    99b8:	461a      	mov	r2, r3
    99ba:	4b01      	ldr	r3, [pc, #4]	; (99c0 <grid_msg_get_parameter+0x14>)
    99bc:	4718      	bx	r3
    99be:	bf00      	nop
    99c0:	000097f9 	.word	0x000097f9

000099c4 <grid_msg_set_parameter>:

uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
    99c4:	b510      	push	{r4, lr}
    99c6:	460c      	mov	r4, r1
	
	grid_sys_write_hex_string_value(&message[offset], length, value);
    99c8:	4420      	add	r0, r4
uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
    99ca:	4611      	mov	r1, r2
	grid_sys_write_hex_string_value(&message[offset], length, value);
    99cc:	461a      	mov	r2, r3
    99ce:	4b01      	ldr	r3, [pc, #4]	; (99d4 <grid_msg_set_parameter+0x10>)
    99d0:	4798      	blx	r3
	
}
    99d2:	bd10      	pop	{r4, pc}
    99d4:	00009821 	.word	0x00009821

000099d8 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
    //uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    99d8:	f100 032c 	add.w	r3, r0, #44	; 0x2c
    99dc:	30ac      	adds	r0, #172	; 0xac
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    99de:	f853 2b04 	ldr.w	r2, [r3], #4
    99e2:	428a      	cmp	r2, r1
    99e4:	d003      	beq.n	99ee <grid_msg_find_recent+0x16>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    99e6:	4283      	cmp	r3, r0
    99e8:	d1f9      	bne.n	99de <grid_msg_find_recent+0x6>
			
		}
		
	}
	
	return 0;
    99ea:	2000      	movs	r0, #0
    99ec:	4770      	bx	lr
			return 1;
    99ee:	2001      	movs	r0, #1
}
    99f0:	4770      	bx	lr

000099f2 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    99f2:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
    99f6:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    99f8:	f003 031f 	and.w	r3, r3, #31
    99fc:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    9a00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9a04:	62c1      	str	r1, [r0, #44]	; 0x2c
	
}
    9a06:	4770      	bx	lr

00009a08 <grid_ui_model_init>:
	}
	
}


void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    9a08:	b538      	push	{r3, r4, r5, lr}
	
	mod->status = GRID_UI_STATUS_INITIALIZED;
    9a0a:	2301      	movs	r3, #1
    9a0c:	7003      	strb	r3, [r0, #0]
void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    9a0e:	4605      	mov	r5, r0
	
	mod->bank_list_length = bank_list_length;	
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9a10:	4b09      	ldr	r3, [pc, #36]	; (9a38 <grid_ui_model_init+0x30>)
	mod->bank_list_length = bank_list_length;	
    9a12:	7041      	strb	r1, [r0, #1]
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9a14:	0108      	lsls	r0, r1, #4
void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    9a16:	460c      	mov	r4, r1
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9a18:	4798      	blx	r3
	
	for(uint8_t i=0; i<bank_list_length; i++){
    9a1a:	2300      	movs	r3, #0
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9a1c:	6068      	str	r0, [r5, #4]
		
		mod->bank_list[i].status = GRID_UI_STATUS_UNDEFINED;		
    9a1e:	461a      	mov	r2, r3
	for(uint8_t i=0; i<bank_list_length; i++){
    9a20:	b2d9      	uxtb	r1, r3
    9a22:	428c      	cmp	r4, r1
    9a24:	f100 0010 	add.w	r0, r0, #16
    9a28:	d800      	bhi.n	9a2c <grid_ui_model_init+0x24>
		mod->bank_list[i].element_list_length = 0;
		
	}
	
}
    9a2a:	bd38      	pop	{r3, r4, r5, pc}
		mod->bank_list[i].status = GRID_UI_STATUS_UNDEFINED;		
    9a2c:	f800 2c10 	strb.w	r2, [r0, #-16]
		mod->bank_list[i].element_list_length = 0;
    9a30:	f800 2c07 	strb.w	r2, [r0, #-7]
	for(uint8_t i=0; i<bank_list_length; i++){
    9a34:	3301      	adds	r3, #1
    9a36:	e7f3      	b.n	9a20 <grid_ui_model_init+0x18>
    9a38:	00012ba1 	.word	0x00012ba1

00009a3c <grid_ui_bank_init>:

void grid_ui_bank_init(struct grid_ui_model* parent, uint8_t index, uint8_t element_list_length){
    9a3c:	b538      	push	{r3, r4, r5, lr}
	
	struct grid_ui_bank* bank = &parent->bank_list[index];
    9a3e:	6843      	ldr	r3, [r0, #4]
    9a40:	eb03 1501 	add.w	r5, r3, r1, lsl #4
void grid_ui_bank_init(struct grid_ui_model* parent, uint8_t index, uint8_t element_list_length){
    9a44:	4614      	mov	r4, r2
	struct grid_ui_bank* bank = &parent->bank_list[index];
    9a46:	010a      	lsls	r2, r1, #4
	bank->parent = parent;
    9a48:	6068      	str	r0, [r5, #4]
	bank->index = index;
    9a4a:	7229      	strb	r1, [r5, #8]
	
	
	bank->status = GRID_UI_STATUS_INITIALIZED;
	
	bank->element_list_length = element_list_length;
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9a4c:	2064      	movs	r0, #100	; 0x64
	bank->status = GRID_UI_STATUS_INITIALIZED;
    9a4e:	2101      	movs	r1, #1
    9a50:	5499      	strb	r1, [r3, r2]
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9a52:	4360      	muls	r0, r4
    9a54:	4b08      	ldr	r3, [pc, #32]	; (9a78 <grid_ui_bank_init+0x3c>)
	bank->element_list_length = element_list_length;
    9a56:	726c      	strb	r4, [r5, #9]
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9a58:	4798      	blx	r3
	
	for(uint8_t i=0; i<element_list_length; i++){
    9a5a:	2300      	movs	r3, #0
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9a5c:	60e8      	str	r0, [r5, #12]
		
		bank->element_list[i].status = GRID_UI_STATUS_UNDEFINED;
    9a5e:	461a      	mov	r2, r3
	for(uint8_t i=0; i<element_list_length; i++){
    9a60:	b2d9      	uxtb	r1, r3
    9a62:	428c      	cmp	r4, r1
    9a64:	f100 0064 	add.w	r0, r0, #100	; 0x64
    9a68:	d800      	bhi.n	9a6c <grid_ui_bank_init+0x30>
		bank->element_list[i].event_list_length = 0;
		
	}
	
}
    9a6a:	bd38      	pop	{r3, r4, r5, pc}
		bank->element_list[i].status = GRID_UI_STATUS_UNDEFINED;
    9a6c:	f800 2c64 	strb.w	r2, [r0, #-100]
		bank->element_list[i].event_list_length = 0;
    9a70:	f800 2c08 	strb.w	r2, [r0, #-8]
	for(uint8_t i=0; i<element_list_length; i++){
    9a74:	3301      	adds	r3, #1
    9a76:	e7f3      	b.n	9a60 <grid_ui_bank_init+0x24>
    9a78:	00012ba1 	.word	0x00012ba1

00009a7c <grid_ui_nvm_store_all_configuration>:
	
}



void grid_ui_nvm_store_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    9a7c:	460b      	mov	r3, r1
	
    grid_nvm_ui_bulk_store_init(nvm, ui);
    9a7e:	4601      	mov	r1, r0
    9a80:	4618      	mov	r0, r3
    9a82:	4b01      	ldr	r3, [pc, #4]	; (9a88 <grid_ui_nvm_store_all_configuration+0xc>)
    9a84:	4718      	bx	r3
    9a86:	bf00      	nop
    9a88:	000088b5 	.word	0x000088b5

00009a8c <grid_ui_nvm_load_all_configuration>:

}

void grid_ui_nvm_load_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    9a8c:	460b      	mov	r3, r1
	
	grid_nvm_ui_bulk_read_init(nvm, ui);
    9a8e:	4601      	mov	r1, r0
    9a90:	4618      	mov	r0, r3
    9a92:	4b01      	ldr	r3, [pc, #4]	; (9a98 <grid_ui_nvm_load_all_configuration+0xc>)
    9a94:	4718      	bx	r3
    9a96:	bf00      	nop
    9a98:	000087a1 	.word	0x000087a1

00009a9c <grid_ui_nvm_clear_all_configuration>:

		
	
}

void grid_ui_nvm_clear_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    9a9c:	460b      	mov	r3, r1
	
	grid_nvm_ui_bulk_clear_init(nvm, ui);
    9a9e:	4601      	mov	r1, r0
    9aa0:	4618      	mov	r0, r3
    9aa2:	4b01      	ldr	r3, [pc, #4]	; (9aa8 <grid_ui_nvm_clear_all_configuration+0xc>)
    9aa4:	4718      	bx	r3
    9aa6:	bf00      	nop
    9aa8:	00008a79 	.word	0x00008a79

00009aac <grid_ui_recall_event_configuration>:

}


uint8_t grid_ui_recall_event_configuration(struct grid_ui_model* ui, uint8_t bank, uint8_t element, enum grid_ui_event_t event_type){
    9aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ab0:	4698      	mov	r8, r3
	
	struct grid_ui_element* ele = NULL;
	struct grid_ui_event* eve = NULL;
	uint8_t event_index = 255;
	
	if (bank < ui->bank_list_length){
    9ab2:	7843      	ldrb	r3, [r0, #1]
    9ab4:	428b      	cmp	r3, r1
uint8_t grid_ui_recall_event_configuration(struct grid_ui_model* ui, uint8_t bank, uint8_t element, enum grid_ui_event_t event_type){
    9ab6:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
    9aba:	460f      	mov	r7, r1
    9abc:	4616      	mov	r6, r2
	if (bank < ui->bank_list_length){
    9abe:	f240 80a5 	bls.w	9c0c <grid_ui_recall_event_configuration+0x160>
		
		if (element < ui->bank_list[bank].element_list_length){
    9ac2:	6843      	ldr	r3, [r0, #4]
    9ac4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    9ac8:	7a5a      	ldrb	r2, [r3, #9]
    9aca:	42b2      	cmp	r2, r6
    9acc:	f240 809e 	bls.w	9c0c <grid_ui_recall_event_configuration+0x160>
			
			ele = &ui->bank_list[bank].element_list[element];
    9ad0:	68da      	ldr	r2, [r3, #12]
    9ad2:	2364      	movs	r3, #100	; 0x64
    9ad4:	fb06 2303 	mla	r3, r6, r3, r2
			
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9ad8:	2200      	movs	r2, #0
    9ada:	f893 c05c 	ldrb.w	ip, [r3, #92]	; 0x5c
	uint8_t event_index = 255;
    9ade:	20ff      	movs	r0, #255	; 0xff
	struct grid_ui_event* eve = NULL;
    9ae0:	4615      	mov	r5, r2
				if (ele->event_list[i].type == event_type){
    9ae2:	f44f 7e86 	mov.w	lr, #268	; 0x10c
    9ae6:	b2d4      	uxtb	r4, r2
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9ae8:	45a4      	cmp	ip, r4
    9aea:	d86b      	bhi.n	9bc4 <grid_ui_recall_event_configuration+0x118>
		
		
	}
	
	
	if (event_index != 255){ // OK
    9aec:	28ff      	cmp	r0, #255	; 0xff
    9aee:	f000 808d 	beq.w	9c0c <grid_ui_recall_event_configuration+0x160>
		
		struct grid_msg message;

		grid_msg_init(&message);
    9af2:	4b6c      	ldr	r3, [pc, #432]	; (9ca4 <grid_ui_recall_event_configuration+0x1f8>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9af4:	4c6c      	ldr	r4, [pc, #432]	; (9ca8 <grid_ui_recall_event_configuration+0x1fc>)
		uint32_t offset = 0;



		// BANK ENABLED
		offset = grid_msg_body_get_length(&message);
    9af6:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 9cc8 <grid_ui_recall_event_configuration+0x21c>

		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9afa:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 9ccc <grid_ui_recall_event_configuration+0x220>
		payload_length = strlen(payload);
    9afe:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 9cd0 <grid_ui_recall_event_configuration+0x224>

		grid_msg_body_append_text(&message, payload, payload_length);
    9b02:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 9cd4 <grid_ui_recall_event_configuration+0x228>

		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    9b06:	4f69      	ldr	r7, [pc, #420]	; (9cac <grid_ui_recall_event_configuration+0x200>)
		grid_msg_init(&message);
    9b08:	a867      	add	r0, sp, #412	; 0x19c
    9b0a:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9b0c:	227f      	movs	r2, #127	; 0x7f
    9b0e:	4611      	mov	r1, r2
    9b10:	2300      	movs	r3, #0
    9b12:	a867      	add	r0, sp, #412	; 0x19c
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9b14:	2600      	movs	r6, #0
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9b16:	47a0      	blx	r4
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9b18:	4b65      	ldr	r3, [pc, #404]	; (9cb0 <grid_ui_recall_event_configuration+0x204>)
    9b1a:	9603      	str	r6, [sp, #12]
    9b1c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9b20:	4631      	mov	r1, r6
    9b22:	a804      	add	r0, sp, #16
    9b24:	4798      	blx	r3
		offset = grid_msg_body_get_length(&message);
    9b26:	a867      	add	r0, sp, #412	; 0x19c
    9b28:	47d8      	blx	fp
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9b2a:	2380      	movs	r3, #128	; 0x80
		offset = grid_msg_body_get_length(&message);
    9b2c:	4604      	mov	r4, r0
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9b2e:	4961      	ldr	r1, [pc, #388]	; (9cb4 <grid_ui_recall_event_configuration+0x208>)
    9b30:	2202      	movs	r2, #2
    9b32:	a803      	add	r0, sp, #12
    9b34:	47d0      	blx	sl
		payload_length = strlen(payload);
    9b36:	a803      	add	r0, sp, #12
    9b38:	47c8      	blx	r9
		grid_msg_body_append_text(&message, payload, payload_length);
    9b3a:	a903      	add	r1, sp, #12
    9b3c:	b2c2      	uxtb	r2, r0
    9b3e:	a867      	add	r0, sp, #412	; 0x19c
    9b40:	47c0      	blx	r8
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    9b42:	230d      	movs	r3, #13
    9b44:	9300      	str	r3, [sp, #0]
    9b46:	2204      	movs	r2, #4
    9b48:	2301      	movs	r3, #1
    9b4a:	4621      	mov	r1, r4
    9b4c:	a867      	add	r0, sp, #412	; 0x19c
    9b4e:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, eve->parent->parent->index);
    9b50:	686b      	ldr	r3, [r5, #4]
    9b52:	685b      	ldr	r3, [r3, #4]
    9b54:	7a1b      	ldrb	r3, [r3, #8]
    9b56:	9300      	str	r3, [sp, #0]
    9b58:	2205      	movs	r2, #5
    9b5a:	2302      	movs	r3, #2
    9b5c:	4621      	mov	r1, r4
    9b5e:	a867      	add	r0, sp, #412	; 0x19c
    9b60:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, eve->parent->index);
    9b62:	686b      	ldr	r3, [r5, #4]
    9b64:	7a1b      	ldrb	r3, [r3, #8]
    9b66:	9300      	str	r3, [sp, #0]
    9b68:	2207      	movs	r2, #7
    9b6a:	2302      	movs	r3, #2
    9b6c:	4621      	mov	r1, r4
    9b6e:	a867      	add	r0, sp, #412	; 0x19c
    9b70:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eve->type);
    9b72:	7aab      	ldrb	r3, [r5, #10]
    9b74:	9300      	str	r3, [sp, #0]
    9b76:	2209      	movs	r2, #9
    9b78:	2302      	movs	r3, #2
    9b7a:	4621      	mov	r1, r4
    9b7c:	a867      	add	r0, sp, #412	; 0x19c
    9b7e:	47b8      	blx	r7

		offset = grid_msg_body_get_length(&message);
    9b80:	a867      	add	r0, sp, #412	; 0x19c
    9b82:	47d8      	blx	fp
		grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    9b84:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    9b86:	4b4c      	ldr	r3, [pc, #304]	; (9cb8 <grid_ui_recall_event_configuration+0x20c>)
		offset = grid_msg_body_get_length(&message);
    9b88:	4683      	mov	fp, r0
		grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    9b8a:	f105 0148 	add.w	r1, r5, #72	; 0x48
    9b8e:	a867      	add	r0, sp, #412	; 0x19c
    9b90:	4798      	blx	r3

		for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9b92:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    9b96:	b2f4      	uxtb	r4, r6
    9b98:	42a3      	cmp	r3, r4
    9b9a:	d81e      	bhi.n	9bda <grid_ui_recall_event_configuration+0x12e>
		}




		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    9b9c:	4947      	ldr	r1, [pc, #284]	; (9cbc <grid_ui_recall_event_configuration+0x210>)
    9b9e:	2203      	movs	r2, #3
    9ba0:	a803      	add	r0, sp, #12
    9ba2:	47d0      	blx	sl
		payload_length = strlen(payload);
    9ba4:	a803      	add	r0, sp, #12
    9ba6:	47c8      	blx	r9

		grid_msg_body_append_text(&message, payload, payload_length);
    9ba8:	a903      	add	r1, sp, #12
    9baa:	b2c2      	uxtb	r2, r0
    9bac:	a867      	add	r0, sp, #412	; 0x19c
    9bae:	47c0      	blx	r8
		payload_length = strlen(payload);

		grid_msg_body_append_text(&message, payload, payload_length);


		grid_msg_packet_close(&message);
    9bb0:	4b43      	ldr	r3, [pc, #268]	; (9cc0 <grid_ui_recall_event_configuration+0x214>)
    9bb2:	a867      	add	r0, sp, #412	; 0x19c
    9bb4:	4798      	blx	r3
		grid_msg_packet_send_everywhere(&message);		
    9bb6:	4b43      	ldr	r3, [pc, #268]	; (9cc4 <grid_ui_recall_event_configuration+0x218>)
    9bb8:	a867      	add	r0, sp, #412	; 0x19c
    9bba:	4798      	blx	r3
		
		
	}

	
}
    9bbc:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
    9bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (ele->event_list[i].type == event_type){
    9bc4:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9bc6:	fb0e 1102 	mla	r1, lr, r2, r1
    9bca:	3201      	adds	r2, #1
    9bcc:	f891 900a 	ldrb.w	r9, [r1, #10]
    9bd0:	45c1      	cmp	r9, r8
    9bd2:	bf04      	itt	eq
    9bd4:	4620      	moveq	r0, r4
    9bd6:	460d      	moveq	r5, r1
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9bd8:	e785      	b.n	9ae6 <grid_ui_recall_event_configuration+0x3a>
			uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9bda:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9bde:	442c      	add	r4, r5
			message.body[offset + parameter_offset] = parameter_group;
    9be0:	a967      	add	r1, sp, #412	; 0x19c
			uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9be2:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
			uint8_t	 parameter_lenght  = eve->action_parameter_list[t].length;
    9be6:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
			uint8_t	 parameter_address = eve->action_parameter_list[t].address;
    9bea:	f894 00c3 	ldrb.w	r0, [r4, #195]	; 0xc3
			message.body[offset + parameter_offset] = parameter_group;
    9bee:	f894 40c2 	ldrb.w	r4, [r4, #194]	; 0xc2
    9bf2:	4411      	add	r1, r2
    9bf4:	4459      	add	r1, fp
			grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9bf6:	3b01      	subs	r3, #1
    9bf8:	3201      	adds	r2, #1
			message.body[offset + parameter_offset] = parameter_group;
    9bfa:	750c      	strb	r4, [r1, #20]
			grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9bfc:	b2db      	uxtb	r3, r3
    9bfe:	9000      	str	r0, [sp, #0]
    9c00:	b2d2      	uxtb	r2, r2
    9c02:	4659      	mov	r1, fp
    9c04:	a867      	add	r0, sp, #412	; 0x19c
    9c06:	47b8      	blx	r7
		for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9c08:	3601      	adds	r6, #1
    9c0a:	e7c2      	b.n	9b92 <grid_ui_recall_event_configuration+0xe6>
		grid_msg_init(&message);
    9c0c:	a867      	add	r0, sp, #412	; 0x19c
    9c0e:	4b25      	ldr	r3, [pc, #148]	; (9ca4 <grid_ui_recall_event_configuration+0x1f8>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9c10:	4c25      	ldr	r4, [pc, #148]	; (9ca8 <grid_ui_recall_event_configuration+0x1fc>)
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9c12:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 9ccc <grid_ui_recall_event_configuration+0x220>
		payload_length = strlen(payload);
    9c16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 9cd0 <grid_ui_recall_event_configuration+0x224>
		grid_msg_body_append_text(&message, payload, payload_length);
    9c1a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 9cd4 <grid_ui_recall_event_configuration+0x228>
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    9c1e:	4d23      	ldr	r5, [pc, #140]	; (9cac <grid_ui_recall_event_configuration+0x200>)
		grid_msg_init(&message);
    9c20:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9c22:	227f      	movs	r2, #127	; 0x7f
    9c24:	4611      	mov	r1, r2
    9c26:	a867      	add	r0, sp, #412	; 0x19c
    9c28:	2300      	movs	r3, #0
    9c2a:	47a0      	blx	r4
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9c2c:	2100      	movs	r1, #0
    9c2e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9c32:	4b1f      	ldr	r3, [pc, #124]	; (9cb0 <grid_ui_recall_event_configuration+0x204>)
    9c34:	9103      	str	r1, [sp, #12]
    9c36:	a804      	add	r0, sp, #16
    9c38:	4798      	blx	r3
		offset = grid_msg_body_get_length(&message);
    9c3a:	4b23      	ldr	r3, [pc, #140]	; (9cc8 <grid_ui_recall_event_configuration+0x21c>)
    9c3c:	a867      	add	r0, sp, #412	; 0x19c
    9c3e:	4798      	blx	r3
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9c40:	2380      	movs	r3, #128	; 0x80
		offset = grid_msg_body_get_length(&message);
    9c42:	4604      	mov	r4, r0
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9c44:	491b      	ldr	r1, [pc, #108]	; (9cb4 <grid_ui_recall_event_configuration+0x208>)
    9c46:	2202      	movs	r2, #2
    9c48:	a803      	add	r0, sp, #12
    9c4a:	47d8      	blx	fp
		payload_length = strlen(payload);
    9c4c:	a803      	add	r0, sp, #12
    9c4e:	47d0      	blx	sl
		grid_msg_body_append_text(&message, payload, payload_length);
    9c50:	a903      	add	r1, sp, #12
    9c52:	b2c2      	uxtb	r2, r0
    9c54:	a867      	add	r0, sp, #412	; 0x19c
    9c56:	47c8      	blx	r9
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    9c58:	230b      	movs	r3, #11
    9c5a:	9300      	str	r3, [sp, #0]
    9c5c:	4621      	mov	r1, r4
    9c5e:	a867      	add	r0, sp, #412	; 0x19c
    9c60:	2301      	movs	r3, #1
    9c62:	2204      	movs	r2, #4
    9c64:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, bank);
    9c66:	4621      	mov	r1, r4
    9c68:	a867      	add	r0, sp, #412	; 0x19c
    9c6a:	9700      	str	r7, [sp, #0]
    9c6c:	2302      	movs	r3, #2
    9c6e:	2205      	movs	r2, #5
    9c70:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, element);
    9c72:	4621      	mov	r1, r4
    9c74:	a867      	add	r0, sp, #412	; 0x19c
    9c76:	9600      	str	r6, [sp, #0]
    9c78:	2302      	movs	r3, #2
    9c7a:	2207      	movs	r2, #7
    9c7c:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, event_type);
    9c7e:	2302      	movs	r3, #2
    9c80:	4621      	mov	r1, r4
    9c82:	a867      	add	r0, sp, #412	; 0x19c
    9c84:	f8cd 8000 	str.w	r8, [sp]
    9c88:	2209      	movs	r2, #9
    9c8a:	47a8      	blx	r5
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    9c8c:	490b      	ldr	r1, [pc, #44]	; (9cbc <grid_ui_recall_event_configuration+0x210>)
    9c8e:	2203      	movs	r2, #3
    9c90:	a803      	add	r0, sp, #12
    9c92:	47d8      	blx	fp
		payload_length = strlen(payload);
    9c94:	a803      	add	r0, sp, #12
    9c96:	47d0      	blx	sl
		grid_msg_body_append_text(&message, payload, payload_length);
    9c98:	a903      	add	r1, sp, #12
    9c9a:	b2c2      	uxtb	r2, r0
    9c9c:	a867      	add	r0, sp, #412	; 0x19c
    9c9e:	47c8      	blx	r9
    9ca0:	e786      	b.n	9bb0 <grid_ui_recall_event_configuration+0x104>
    9ca2:	bf00      	nop
    9ca4:	00008545 	.word	0x00008545
    9ca8:	00008579 	.word	0x00008579
    9cac:	00008529 	.word	0x00008529
    9cb0:	00012cf5 	.word	0x00012cf5
    9cb4:	000156c3 	.word	0x000156c3
    9cb8:	000084d5 	.word	0x000084d5
    9cbc:	000152cf 	.word	0x000152cf
    9cc0:	00008671 	.word	0x00008671
    9cc4:	00008745 	.word	0x00008745
    9cc8:	000084af 	.word	0x000084af
    9ccc:	00013351 	.word	0x00013351
    9cd0:	00013801 	.word	0x00013801
    9cd4:	000084b5 	.word	0x000084b5

00009cd8 <grid_ui_nvm_store_event_configuration>:



uint8_t grid_ui_nvm_store_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cdc:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
	

	struct grid_msg message;

	grid_msg_init(&message);
    9ce0:	4b62      	ldr	r3, [pc, #392]	; (9e6c <grid_ui_nvm_store_event_configuration+0x194>)
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9ce2:	4e63      	ldr	r6, [pc, #396]	; (9e70 <grid_ui_nvm_store_event_configuration+0x198>)
	uint32_t offset = 0;



	// BANK ENABLED
	offset = grid_msg_body_get_length(&message);
    9ce4:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 9ea0 <grid_ui_nvm_store_event_configuration+0x1c8>

	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9ce8:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 9ea4 <grid_ui_nvm_store_event_configuration+0x1cc>
	payload_length = strlen(payload);
    9cec:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 9ea8 <grid_ui_nvm_store_event_configuration+0x1d0>

	grid_msg_body_append_text(&message, payload, payload_length);

	grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    9cf0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 9eac <grid_ui_nvm_store_event_configuration+0x1d4>
	grid_msg_init(&message);
    9cf4:	a867      	add	r0, sp, #412	; 0x19c
uint8_t grid_ui_nvm_store_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9cf6:	4614      	mov	r4, r2
    9cf8:	460d      	mov	r5, r1
	grid_msg_init(&message);
    9cfa:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9cfc:	22ff      	movs	r2, #255	; 0xff
    9cfe:	4611      	mov	r1, r2
    9d00:	2300      	movs	r3, #0
    9d02:	a867      	add	r0, sp, #412	; 0x19c
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9d04:	2700      	movs	r7, #0
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9d06:	47b0      	blx	r6
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9d08:	4b5a      	ldr	r3, [pc, #360]	; (9e74 <grid_ui_nvm_store_event_configuration+0x19c>)
    9d0a:	9703      	str	r7, [sp, #12]
    9d0c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9d10:	4639      	mov	r1, r7
    9d12:	a804      	add	r0, sp, #16
    9d14:	4798      	blx	r3
	offset = grid_msg_body_get_length(&message);
    9d16:	a867      	add	r0, sp, #412	; 0x19c
    9d18:	47d8      	blx	fp
	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9d1a:	4957      	ldr	r1, [pc, #348]	; (9e78 <grid_ui_nvm_store_event_configuration+0x1a0>)
	offset = grid_msg_body_get_length(&message);
    9d1c:	4606      	mov	r6, r0
	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9d1e:	2380      	movs	r3, #128	; 0x80
    9d20:	2202      	movs	r2, #2
    9d22:	a803      	add	r0, sp, #12
    9d24:	47d0      	blx	sl
	payload_length = strlen(payload);
    9d26:	a803      	add	r0, sp, #12
    9d28:	47c8      	blx	r9
	grid_msg_body_append_text(&message, payload, payload_length);
    9d2a:	4b54      	ldr	r3, [pc, #336]	; (9e7c <grid_ui_nvm_store_event_configuration+0x1a4>)
    9d2c:	b2c2      	uxtb	r2, r0
    9d2e:	a903      	add	r1, sp, #12
    9d30:	a867      	add	r0, sp, #412	; 0x19c
    9d32:	4798      	blx	r3
	grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    9d34:	230e      	movs	r3, #14
    9d36:	9300      	str	r3, [sp, #0]
    9d38:	2204      	movs	r2, #4
    9d3a:	2301      	movs	r3, #1
    9d3c:	4631      	mov	r1, r6
    9d3e:	a867      	add	r0, sp, #412	; 0x19c
    9d40:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, eve->parent->parent->index);
    9d42:	6863      	ldr	r3, [r4, #4]
    9d44:	685b      	ldr	r3, [r3, #4]
    9d46:	7a1b      	ldrb	r3, [r3, #8]
    9d48:	9300      	str	r3, [sp, #0]
    9d4a:	2205      	movs	r2, #5
    9d4c:	2302      	movs	r3, #2
    9d4e:	4631      	mov	r1, r6
    9d50:	a867      	add	r0, sp, #412	; 0x19c
    9d52:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, eve->parent->index);
    9d54:	6863      	ldr	r3, [r4, #4]
    9d56:	7a1b      	ldrb	r3, [r3, #8]
    9d58:	9300      	str	r3, [sp, #0]
    9d5a:	2207      	movs	r2, #7
    9d5c:	2302      	movs	r3, #2
    9d5e:	4631      	mov	r1, r6
    9d60:	a867      	add	r0, sp, #412	; 0x19c
    9d62:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eve->type);
    9d64:	7aa3      	ldrb	r3, [r4, #10]
    9d66:	9300      	str	r3, [sp, #0]
    9d68:	2209      	movs	r2, #9
    9d6a:	2302      	movs	r3, #2
    9d6c:	4631      	mov	r1, r6
    9d6e:	a867      	add	r0, sp, #412	; 0x19c
    9d70:	47c0      	blx	r8

	offset = grid_msg_body_get_length(&message);
    9d72:	a867      	add	r0, sp, #412	; 0x19c
    9d74:	47d8      	blx	fp
	grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    9d76:	6c62      	ldr	r2, [r4, #68]	; 0x44
    9d78:	4b41      	ldr	r3, [pc, #260]	; (9e80 <grid_ui_nvm_store_event_configuration+0x1a8>)
	offset = grid_msg_body_get_length(&message);
    9d7a:	4683      	mov	fp, r0
	grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    9d7c:	f104 0148 	add.w	r1, r4, #72	; 0x48
    9d80:	a867      	add	r0, sp, #412	; 0x19c
    9d82:	4798      	blx	r3

	for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9d84:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    9d88:	b2fe      	uxtb	r6, r7
    9d8a:	42b3      	cmp	r3, r6
    9d8c:	d83c      	bhi.n	9e08 <grid_ui_nvm_store_event_configuration+0x130>
	}




	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    9d8e:	493d      	ldr	r1, [pc, #244]	; (9e84 <grid_ui_nvm_store_event_configuration+0x1ac>)
    9d90:	2203      	movs	r2, #3
    9d92:	a803      	add	r0, sp, #12
    9d94:	47d0      	blx	sl
	payload_length = strlen(payload);
    9d96:	a803      	add	r0, sp, #12
    9d98:	47c8      	blx	r9

	grid_msg_body_append_text(&message, payload, payload_length);
    9d9a:	a903      	add	r1, sp, #12
    9d9c:	b2c2      	uxtb	r2, r0
    9d9e:	4b37      	ldr	r3, [pc, #220]	; (9e7c <grid_ui_nvm_store_event_configuration+0x1a4>)
    9da0:	a867      	add	r0, sp, #412	; 0x19c
    9da2:	4798      	blx	r3


	grid_msg_packet_close(&message);
    9da4:	4b38      	ldr	r3, [pc, #224]	; (9e88 <grid_ui_nvm_store_event_configuration+0x1b0>)
    9da6:	a867      	add	r0, sp, #412	; 0x19c
    9da8:	4798      	blx	r3

	grid_nvm_clear_write_buffer(nvm);
    9daa:	4b38      	ldr	r3, [pc, #224]	; (9e8c <grid_ui_nvm_store_event_configuration+0x1b4>)
    9dac:	4628      	mov	r0, r5
    9dae:	4798      	blx	r3

	uint32_t message_length = grid_msg_packet_get_length(&message);
    9db0:	4b37      	ldr	r3, [pc, #220]	; (9e90 <grid_ui_nvm_store_event_configuration+0x1b8>)
    9db2:	a867      	add	r0, sp, #412	; 0x19c
    9db4:	4798      	blx	r3

	if (message_length){
    9db6:	4606      	mov	r6, r0
    9db8:	2800      	cmp	r0, #0
    9dba:	d13e      	bne.n	9e3a <grid_ui_nvm_store_event_configuration+0x162>
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
		}

	}

	uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);
    9dbc:	4621      	mov	r1, r4
    9dbe:	4b35      	ldr	r3, [pc, #212]	; (9e94 <grid_ui_nvm_store_event_configuration+0x1bc>)
    9dc0:	4628      	mov	r0, r5
    9dc2:	4798      	blx	r3
	nvm->write_target_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;
    9dc4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9dc8:	0241      	lsls	r1, r0, #9
    9dca:	f8c5 1420 	str.w	r1, [r5, #1056]	; 0x420
	int status = 0;
	
	
	uint8_t debugtext[200] = {0};

	if (eve->cfg_default_flag == 1 && eve->cfg_flashempty_flag == 0){
    9dce:	f8b4 6108 	ldrh.w	r6, [r4, #264]	; 0x108
    9dd2:	2e01      	cmp	r6, #1
    9dd4:	d041      	beq.n	9e5a <grid_ui_nvm_store_event_configuration+0x182>
	int status = 0;
    9dd6:	2000      	movs	r0, #0
		eve->cfg_flashempty_flag = 1;
		status = 1;
	}
	
	
	if (eve->cfg_default_flag == 0 && eve->cfg_changed_flag == 1){
    9dd8:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
    9ddc:	b96b      	cbnz	r3, 9dfa <grid_ui_nvm_store_event_configuration+0x122>
    9dde:	f894 6107 	ldrb.w	r6, [r4, #263]	; 0x107
    9de2:	2e01      	cmp	r6, #1
    9de4:	d109      	bne.n	9dfa <grid_ui_nvm_store_event_configuration+0x122>
		
		//sprintf(debugtext, "Cfg: Store B:%d E:%d Ev:%d => Page: %d Status: %d", eve->parent->parent->index, eve->parent->index, eve->index, event_page_offset, status);		
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, GRID_NVM_PAGE_SIZE);
    9de6:	f8d5 1420 	ldr.w	r1, [r5, #1056]	; 0x420
    9dea:	6828      	ldr	r0, [r5, #0]
    9dec:	f505 7206 	add.w	r2, r5, #536	; 0x218
    9df0:	f44f 7300 	mov.w	r3, #512	; 0x200
    9df4:	4d28      	ldr	r5, [pc, #160]	; (9e98 <grid_ui_nvm_store_event_configuration+0x1c0>)
    9df6:	47a8      	blx	r5
		status = 1;
    9df8:	4630      	mov	r0, r6
	}


	//grid_debug_print_text(debugtext);

	eve->cfg_changed_flag = 0;
    9dfa:	2300      	movs	r3, #0
    9dfc:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	
	return status;
	
}
    9e00:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
    9e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9e08:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    9e0c:	4426      	add	r6, r4
		message.body[offset + parameter_offset] = parameter_group;
    9e0e:	a967      	add	r1, sp, #412	; 0x19c
		uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9e10:	f896 20c5 	ldrb.w	r2, [r6, #197]	; 0xc5
		uint8_t	 parameter_lenght  = eve->action_parameter_list[t].length;
    9e14:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
		uint8_t	 parameter_address = eve->action_parameter_list[t].address;
    9e18:	f896 00c3 	ldrb.w	r0, [r6, #195]	; 0xc3
		message.body[offset + parameter_offset] = parameter_group;
    9e1c:	f896 60c2 	ldrb.w	r6, [r6, #194]	; 0xc2
    9e20:	4411      	add	r1, r2
    9e22:	4459      	add	r1, fp
		grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9e24:	3b01      	subs	r3, #1
    9e26:	3201      	adds	r2, #1
		message.body[offset + parameter_offset] = parameter_group;
    9e28:	750e      	strb	r6, [r1, #20]
		grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9e2a:	b2db      	uxtb	r3, r3
    9e2c:	9000      	str	r0, [sp, #0]
    9e2e:	b2d2      	uxtb	r2, r2
    9e30:	4659      	mov	r1, fp
    9e32:	a867      	add	r0, sp, #412	; 0x19c
    9e34:	47c0      	blx	r8
	for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9e36:	3701      	adds	r7, #1
    9e38:	e7a4      	b.n	9d84 <grid_ui_nvm_store_event_configuration+0xac>
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    9e3a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 9eb0 <grid_ui_nvm_store_event_configuration+0x1d8>
		nvm->write_buffer_length = message_length;
    9e3e:	f8c5 0418 	str.w	r0, [r5, #1048]	; 0x418
		for(uint32_t i = 0; i<message_length; i++){
    9e42:	f505 7806 	add.w	r8, r5, #536	; 0x218
    9e46:	2700      	movs	r7, #0
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    9e48:	4639      	mov	r1, r7
    9e4a:	a867      	add	r0, sp, #412	; 0x19c
    9e4c:	47c8      	blx	r9
		for(uint32_t i = 0; i<message_length; i++){
    9e4e:	3701      	adds	r7, #1
    9e50:	42be      	cmp	r6, r7
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    9e52:	f808 0b01 	strb.w	r0, [r8], #1
		for(uint32_t i = 0; i<message_length; i++){
    9e56:	d1f7      	bne.n	9e48 <grid_ui_nvm_store_event_configuration+0x170>
    9e58:	e7b0      	b.n	9dbc <grid_ui_nvm_store_event_configuration+0xe4>
		flash_erase(nvm->flash, nvm->write_target_address, 1);
    9e5a:	6828      	ldr	r0, [r5, #0]
    9e5c:	4b0f      	ldr	r3, [pc, #60]	; (9e9c <grid_ui_nvm_store_event_configuration+0x1c4>)
    9e5e:	4632      	mov	r2, r6
    9e60:	4798      	blx	r3
		eve->cfg_flashempty_flag = 1;
    9e62:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
		status = 1;
    9e66:	4630      	mov	r0, r6
    9e68:	e7b6      	b.n	9dd8 <grid_ui_nvm_store_event_configuration+0x100>
    9e6a:	bf00      	nop
    9e6c:	00008545 	.word	0x00008545
    9e70:	00008579 	.word	0x00008579
    9e74:	00012cf5 	.word	0x00012cf5
    9e78:	000156c3 	.word	0x000156c3
    9e7c:	000084b5 	.word	0x000084b5
    9e80:	000084d5 	.word	0x000084d5
    9e84:	000152cf 	.word	0x000152cf
    9e88:	00008671 	.word	0x00008671
    9e8c:	00008c51 	.word	0x00008c51
    9e90:	000084a1 	.word	0x000084a1
    9e94:	00008cbd 	.word	0x00008cbd
    9e98:	0000e0a9 	.word	0x0000e0a9
    9e9c:	0000e129 	.word	0x0000e129
    9ea0:	000084af 	.word	0x000084af
    9ea4:	00013351 	.word	0x00013351
    9ea8:	00013801 	.word	0x00013801
    9eac:	00008529 	.word	0x00008529
    9eb0:	0000863b 	.word	0x0000863b

00009eb4 <grid_ui_nvm_load_event_configuration>:



uint8_t grid_ui_nvm_load_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
		
	grid_nvm_clear_read_buffer(nvm);
    9eb6:	4b19      	ldr	r3, [pc, #100]	; (9f1c <grid_ui_nvm_load_event_configuration+0x68>)
uint8_t grid_ui_nvm_load_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9eb8:	9201      	str	r2, [sp, #4]
    9eba:	460c      	mov	r4, r1
	grid_nvm_clear_read_buffer(nvm);
    9ebc:	4608      	mov	r0, r1
    9ebe:	4798      	blx	r3
	
	uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);	
    9ec0:	9901      	ldr	r1, [sp, #4]
    9ec2:	4b17      	ldr	r3, [pc, #92]	; (9f20 <grid_ui_nvm_load_event_configuration+0x6c>)
    9ec4:	4620      	mov	r0, r4
    9ec6:	4798      	blx	r3
	nvm->read_source_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;	
    9ec8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9ecc:	0241      	lsls	r1, r0, #9
	

	int status = flash_read(nvm->flash, nvm->read_source_address, nvm->read_buffer, GRID_NVM_PAGE_SIZE);	
    9ece:	f104 0609 	add.w	r6, r4, #9
	nvm->read_source_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;	
    9ed2:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
	int status = flash_read(nvm->flash, nvm->read_source_address, nvm->read_buffer, GRID_NVM_PAGE_SIZE);	
    9ed6:	6820      	ldr	r0, [r4, #0]
    9ed8:	4c12      	ldr	r4, [pc, #72]	; (9f24 <grid_ui_nvm_load_event_configuration+0x70>)
    9eda:	f44f 7300 	mov.w	r3, #512	; 0x200
    9ede:	4632      	mov	r2, r6
    9ee0:	47a0      	blx	r4
    9ee2:	2300      	movs	r3, #0
			}
			else if (nvm->read_buffer[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
				copydone = 1;
			}
			else{ // NORMAL CHARACTER, can be copied
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9ee4:	4c10      	ldr	r4, [pc, #64]	; (9f28 <grid_ui_nvm_load_event_configuration+0x74>)
	uint8_t cfgfound = 0;
    9ee6:	4618      	mov	r0, r3
	uint8_t copydone = 0;
    9ee8:	4619      	mov	r1, r3
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9eea:	f241 37b4 	movw	r7, #5044	; 0x13b4
		if (copydone == 0){
    9eee:	1c5a      	adds	r2, r3, #1
    9ef0:	b971      	cbnz	r1, 9f10 <grid_ui_nvm_load_event_configuration+0x5c>
			if (nvm->read_buffer[i] == '\n'){ // END OF PACKET, copy newline character
    9ef2:	5cf5      	ldrb	r5, [r6, r3]
    9ef4:	2d0a      	cmp	r5, #10
    9ef6:	d106      	bne.n	9f06 <grid_ui_nvm_load_event_configuration+0x52>
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9ef8:	4423      	add	r3, r4
				cfgfound=2;
    9efa:	2002      	movs	r0, #2
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9efc:	55dd      	strb	r5, [r3, r7]
				GRID_PORT_U.rx_double_buffer_status = i+1;
    9efe:	6222      	str	r2, [r4, #32]
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    9f00:	62a1      	str	r1, [r4, #40]	; 0x28
				copydone = 1;
    9f02:	2101      	movs	r1, #1
    9f04:	e004      	b.n	9f10 <grid_ui_nvm_load_event_configuration+0x5c>
			else if (nvm->read_buffer[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
    9f06:	2dff      	cmp	r5, #255	; 0xff
    9f08:	d0fb      	beq.n	9f02 <grid_ui_nvm_load_event_configuration+0x4e>
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9f0a:	4423      	add	r3, r4
				
				cfgfound=1;
    9f0c:	2001      	movs	r0, #1
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9f0e:	55dd      	strb	r5, [r3, r7]
	for (uint16_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    9f10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9f14:	4613      	mov	r3, r2
    9f16:	d1ea      	bne.n	9eee <grid_ui_nvm_load_event_configuration+0x3a>
	}
	
	return cfgfound;
	
	
}
    9f18:	b003      	add	sp, #12
    9f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f1c:	00008c31 	.word	0x00008c31
    9f20:	00008cbd 	.word	0x00008cbd
    9f24:	0000e03d 	.word	0x0000e03d
    9f28:	2000404c 	.word	0x2000404c

00009f2c <grid_ui_nvm_clear_event_configuration>:
uint8_t grid_ui_nvm_clear_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9f2c:	b510      	push	{r4, lr}
    9f2e:	460c      	mov	r4, r1
		
		uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);
    9f30:	4b06      	ldr	r3, [pc, #24]	; (9f4c <grid_ui_nvm_clear_event_configuration+0x20>)
    9f32:	4611      	mov	r1, r2
    9f34:	4620      	mov	r0, r4
    9f36:	4798      	blx	r3
		
		

		flash_erase(nvm->flash, GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset, 1);
    9f38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9f3c:	0241      	lsls	r1, r0, #9
    9f3e:	4b04      	ldr	r3, [pc, #16]	; (9f50 <grid_ui_nvm_clear_event_configuration+0x24>)
    9f40:	6820      	ldr	r0, [r4, #0]
    9f42:	2201      	movs	r2, #1
    9f44:	4798      	blx	r3

		
		
		return 1;
		
}
    9f46:	2001      	movs	r0, #1
    9f48:	bd10      	pop	{r4, pc}
    9f4a:	bf00      	nop
    9f4c:	00008cbd 	.word	0x00008cbd
    9f50:	0000e129 	.word	0x0000e129

00009f54 <grid_ui_event_find>:
	
}



uint8_t grid_ui_event_find(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    9f54:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t event_index = 255;
		
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f56:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
    9f5a:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    9f5c:	22ff      	movs	r2, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    9f5e:	f44f 7786 	mov.w	r7, #268	; 0x10c
    9f62:	b2dd      	uxtb	r5, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f64:	42ae      	cmp	r6, r5
    9f66:	d801      	bhi.n	9f6c <grid_ui_event_find+0x18>

		
		
	return event_index;
	
}
    9f68:	4610      	mov	r0, r2
    9f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ele->event_list[i].type == event_type){
    9f6c:	6e04      	ldr	r4, [r0, #96]	; 0x60
    9f6e:	fb07 4403 	mla	r4, r7, r3, r4
    9f72:	3301      	adds	r3, #1
    9f74:	7aa4      	ldrb	r4, [r4, #10]
    9f76:	428c      	cmp	r4, r1
    9f78:	bf08      	it	eq
    9f7a:	462a      	moveq	r2, r5
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f7c:	e7f1      	b.n	9f62 <grid_ui_event_find+0xe>

00009f7e <grid_ui_event_trigger>:

void grid_ui_event_trigger(struct grid_ui_element* ele, uint8_t event_index){

	if (event_index == 255){
    9f7e:	29ff      	cmp	r1, #255	; 0xff
    9f80:	d006      	beq.n	9f90 <grid_ui_event_trigger+0x12>
	
	struct grid_ui_event* eve = &ele->event_list[event_index];


		
	eve->trigger = GRID_UI_STATUS_TRIGGERED;
    9f82:	6e03      	ldr	r3, [r0, #96]	; 0x60
    9f84:	f44f 7286 	mov.w	r2, #268	; 0x10c
    9f88:	fb02 3101 	mla	r1, r2, r1, r3
    9f8c:	2305      	movs	r3, #5
    9f8e:	724b      	strb	r3, [r1, #9]

}
    9f90:	4770      	bx	lr

00009f92 <grid_ui_event_trigger_local>:

void grid_ui_event_trigger_local(struct grid_ui_element* ele, uint8_t event_index){

	if (event_index == 255){
    9f92:	29ff      	cmp	r1, #255	; 0xff
    9f94:	d006      	beq.n	9fa4 <grid_ui_event_trigger_local+0x12>
	
	struct grid_ui_event* eve = &ele->event_list[event_index];


		
	eve->trigger = GRID_UI_STATUS_TRIGGERED_LOCAL;
    9f96:	6e03      	ldr	r3, [r0, #96]	; 0x60
    9f98:	f44f 7286 	mov.w	r2, #268	; 0x10c
    9f9c:	fb02 3101 	mla	r1, r2, r1, r3
    9fa0:	2306      	movs	r3, #6
    9fa2:	724b      	strb	r3, [r1, #9]

}
    9fa4:	4770      	bx	lr

00009fa6 <grid_ui_event_render_action>:
		return 0;
	}
			
}

uint32_t grid_ui_event_render_action(struct grid_ui_event* eve, uint8_t* target_string){
    9fa6:	b510      	push	{r4, lr}
    9fa8:	f100 0210 	add.w	r2, r0, #16

	
	uint32_t i=0;
    9fac:	2300      	movs	r3, #0
	
	for(true; i<eve->event_string_length; i++){
    9fae:	68c4      	ldr	r4, [r0, #12]
    9fb0:	429c      	cmp	r4, r3
    9fb2:	d80e      	bhi.n	9fd2 <grid_ui_event_render_action+0x2c>
		target_string[i] = eve->event_string[i];
		
	}
		
	for(true; i<(eve->event_string_length + eve->action_string_length) ; i++){
    9fb4:	68c2      	ldr	r2, [r0, #12]
    9fb6:	6c44      	ldr	r4, [r0, #68]	; 0x44
    9fb8:	4414      	add	r4, r2
    9fba:	429c      	cmp	r4, r3
    9fbc:	d80e      	bhi.n	9fdc <grid_ui_event_render_action+0x36>
		
	}
	
	
	// RESET ENCODER RELATIVE TEMPLATE PARAMETER VALUES
	if(eve->parent->type == GRID_UI_ELEMENT_ENCODER){	
    9fbe:	6843      	ldr	r3, [r0, #4]
    9fc0:	7a5a      	ldrb	r2, [r3, #9]
    9fc2:	2a03      	cmp	r2, #3
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL] = 255;	
    9fc4:	bf02      	ittt	eq
    9fc6:	22ff      	moveq	r2, #255	; 0xff
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_LOW] = 255;	
    9fc8:	e9c3 220d 	strdeq	r2, r2, [r3, #52]	; 0x34
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_HIGH] = 255;	
    9fcc:	63da      	streq	r2, [r3, #60]	; 0x3c
    }
	
	
	return eve->event_string_length + eve->action_string_length;
		
}
    9fce:	4620      	mov	r0, r4
    9fd0:	bd10      	pop	{r4, pc}
		target_string[i] = eve->event_string[i];
    9fd2:	f812 4b01 	ldrb.w	r4, [r2], #1
    9fd6:	54cc      	strb	r4, [r1, r3]
	for(true; i<eve->event_string_length; i++){
    9fd8:	3301      	adds	r3, #1
    9fda:	e7e8      	b.n	9fae <grid_ui_event_render_action+0x8>
		target_string[i] = eve->action_string[i-eve->event_string_length];
    9fdc:	1a9a      	subs	r2, r3, r2
    9fde:	4402      	add	r2, r0
    9fe0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
    9fe4:	54ca      	strb	r2, [r1, r3]
	for(true; i<(eve->event_string_length + eve->action_string_length) ; i++){
    9fe6:	3301      	adds	r3, #1
    9fe8:	e7e4      	b.n	9fb4 <grid_ui_event_render_action+0xe>
	...

00009fec <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    9fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    9ff0:	4fb1      	ldr	r7, [pc, #708]	; (a2b8 <grid_port_process_ui+0x2cc>)
void grid_port_process_ui(struct grid_port* por){
    9ff2:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    9ff6:	2100      	movs	r1, #0
void grid_port_process_ui(struct grid_port* por){
    9ff8:	9001      	str	r0, [sp, #4]
	uint8_t message_local_action_available = 0;
    9ffa:	4688      	mov	r8, r1
	uint8_t message_broadcast_action_available = 0;
    9ffc:	460d      	mov	r5, r1
    9ffe:	46ba      	mov	sl, r7
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a000:	f04f 0c64 	mov.w	ip, #100	; 0x64
				if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a004:	f44f 7e86 	mov.w	lr, #268	; 0x10c
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    a008:	787a      	ldrb	r2, [r7, #1]
    a00a:	b2cb      	uxtb	r3, r1
    a00c:	429a      	cmp	r2, r3
    a00e:	d95e      	bls.n	a0ce <grid_port_process_ui+0xe2>
		for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a010:	011b      	lsls	r3, r3, #4
    a012:	2400      	movs	r4, #0
    a014:	e02e      	b.n	a074 <grid_port_process_ui+0x88>
				if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a016:	f8da 9004 	ldr.w	r9, [sl, #4]
    a01a:	4499      	add	r9, r3
    a01c:	fb0e f000 	mul.w	r0, lr, r0
    a020:	f8d9 900c 	ldr.w	r9, [r9, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a024:	4491      	add	r9, r2
    a026:	3601      	adds	r6, #1
    a028:	f8d9 9060 	ldr.w	r9, [r9, #96]	; 0x60
    a02c:	4481      	add	r9, r0
    a02e:	f899 9009 	ldrb.w	r9, [r9, #9]
    a032:	f1b9 0f05 	cmp.w	r9, #5
				if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a036:	f8da 9004 	ldr.w	r9, [sl, #4]
    a03a:	4499      	add	r9, r3
					message_broadcast_action_available++;
    a03c:	bf08      	it	eq
    a03e:	3501      	addeq	r5, #1
				if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a040:	f8d9 900c 	ldr.w	r9, [r9, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    a044:	4491      	add	r9, r2
					message_broadcast_action_available++;
    a046:	bf08      	it	eq
    a048:	b2ed      	uxtbeq	r5, r5
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    a04a:	f8d9 9060 	ldr.w	r9, [r9, #96]	; 0x60
    a04e:	4448      	add	r0, r9
    a050:	7a40      	ldrb	r0, [r0, #9]
    a052:	2806      	cmp	r0, #6
                    message_local_action_available++;
    a054:	bf04      	itt	eq
    a056:	f108 0801 	addeq.w	r8, r8, #1
    a05a:	fa5f f888 	uxtbeq.w	r8, r8
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a05e:	f8da 0004 	ldr.w	r0, [sl, #4]
    a062:	4418      	add	r0, r3
    a064:	68c0      	ldr	r0, [r0, #12]
    a066:	4410      	add	r0, r2
    a068:	f890 905c 	ldrb.w	r9, [r0, #92]	; 0x5c
    a06c:	b2f0      	uxtb	r0, r6
    a06e:	4581      	cmp	r9, r0
    a070:	d8d1      	bhi.n	a016 <grid_port_process_ui+0x2a>
		for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a072:	3401      	adds	r4, #1
    a074:	f8da 2004 	ldr.w	r2, [sl, #4]
    a078:	441a      	add	r2, r3
    a07a:	7a50      	ldrb	r0, [r2, #9]
    a07c:	b2e2      	uxtb	r2, r4
    a07e:	4290      	cmp	r0, r2
    a080:	d903      	bls.n	a08a <grid_port_process_ui+0x9e>
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a082:	fb0c f202 	mul.w	r2, ip, r2
    a086:	2600      	movs	r6, #0
    a088:	e7e9      	b.n	a05e <grid_port_process_ui+0x72>
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    a08a:	3101      	adds	r1, #1
    a08c:	e7bc      	b.n	a008 <grid_port_process_ui+0x1c>
			if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    a08e:	6870      	ldr	r0, [r6, #4]
    a090:	68c0      	ldr	r0, [r0, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a092:	eb00 0e03 	add.w	lr, r0, r3
    a096:	3201      	adds	r2, #1
    a098:	f8de 0060 	ldr.w	r0, [lr, #96]	; 0x60
    a09c:	fb0c 0009 	mla	r0, ip, r9, r0
    a0a0:	7a40      	ldrb	r0, [r0, #9]
    a0a2:	2805      	cmp	r0, #5
				message_broadcast_action_available++;
    a0a4:	bf04      	itt	eq
    a0a6:	3501      	addeq	r5, #1
    a0a8:	b2ed      	uxtbeq	r5, r5
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a0aa:	6870      	ldr	r0, [r6, #4]
    a0ac:	68c0      	ldr	r0, [r0, #12]
    a0ae:	4418      	add	r0, r3
    a0b0:	fa5f f982 	uxtb.w	r9, r2
    a0b4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    a0b8:	4548      	cmp	r0, r9
    a0ba:	d8e8      	bhi.n	a08e <grid_port_process_ui+0xa2>
	for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a0bc:	3101      	adds	r1, #1
    a0be:	6863      	ldr	r3, [r4, #4]
    a0c0:	7a5a      	ldrb	r2, [r3, #9]
    a0c2:	b2cb      	uxtb	r3, r1
    a0c4:	429a      	cmp	r2, r3
    a0c6:	d909      	bls.n	a0dc <grid_port_process_ui+0xf0>
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a0c8:	437b      	muls	r3, r7
    a0ca:	2200      	movs	r2, #0
    a0cc:	e7ed      	b.n	a0aa <grid_port_process_ui+0xbe>
	for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a0ce:	4c7b      	ldr	r4, [pc, #492]	; (a2bc <grid_port_process_ui+0x2d0>)
    a0d0:	2100      	movs	r1, #0
    a0d2:	4626      	mov	r6, r4
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a0d4:	2764      	movs	r7, #100	; 0x64
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a0d6:	f44f 7c86 	mov.w	ip, #268	; 0x10c
    a0da:	e7f0      	b.n	a0be <grid_port_process_ui+0xd2>
	struct grid_port* port[4] = {&GRID_PORT_N, &GRID_PORT_E, &GRID_PORT_S, &GRID_PORT_W};
    a0dc:	4b78      	ldr	r3, [pc, #480]	; (a2c0 <grid_port_process_ui+0x2d4>)
    a0de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a0e0:	ae07      	add	r6, sp, #28
    a0e2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    a0e6:	2404      	movs	r4, #4
		if (port[k]->ping_flag == 1){
    a0e8:	f856 7b04 	ldr.w	r7, [r6], #4
    a0ec:	f642 7348 	movw	r3, #12104	; 0x2f48
    a0f0:	5cfb      	ldrb	r3, [r7, r3]
    a0f2:	2b01      	cmp	r3, #1
    a0f4:	d11f      	bne.n	a136 <grid_port_process_ui+0x14a>
			if (grid_buffer_write_init(&port[k]->tx_buffer, port[k]->ping_packet_length)){
    a0f6:	f642 7347 	movw	r3, #12103	; 0x2f47
    a0fa:	f507 591c 	add.w	r9, r7, #9984	; 0x2700
    a0fe:	f109 093c 	add.w	r9, r9, #60	; 0x3c
    a102:	18fa      	adds	r2, r7, r3
    a104:	5cf9      	ldrb	r1, [r7, r3]
    a106:	4b6f      	ldr	r3, [pc, #444]	; (a2c4 <grid_port_process_ui+0x2d8>)
    a108:	9202      	str	r2, [sp, #8]
    a10a:	4648      	mov	r0, r9
    a10c:	4798      	blx	r3
    a10e:	b170      	cbz	r0, a12e <grid_port_process_ui+0x142>
				for(uint32_t i = 0; i<port[k]->ping_packet_length; i++){
    a110:	4b6d      	ldr	r3, [pc, #436]	; (a2c8 <grid_port_process_ui+0x2dc>)
    a112:	f507 5b3c 	add.w	fp, r7, #12032	; 0x2f00
    a116:	f10b 0b33 	add.w	fp, fp, #51	; 0x33
    a11a:	1bdb      	subs	r3, r3, r7
    a11c:	9a02      	ldr	r2, [sp, #8]
    a11e:	7811      	ldrb	r1, [r2, #0]
    a120:	eb03 020b 	add.w	r2, r3, fp
    a124:	4291      	cmp	r1, r2
    a126:	d826      	bhi.n	a176 <grid_port_process_ui+0x18a>
				grid_buffer_write_acknowledge(&port[k]->tx_buffer);
    a128:	4b68      	ldr	r3, [pc, #416]	; (a2cc <grid_port_process_ui+0x2e0>)
    a12a:	4648      	mov	r0, r9
    a12c:	4798      	blx	r3
			port[k]->ping_flag = 0;
    a12e:	f642 7248 	movw	r2, #12104	; 0x2f48
    a132:	2300      	movs	r3, #0
    a134:	54bb      	strb	r3, [r7, r2]
	for (uint8_t k = 0; k<4; k++){
    a136:	3c01      	subs	r4, #1
    a138:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    a13c:	d1d4      	bne.n	a0e8 <grid_port_process_ui+0xfc>
	if (message_local_action_available){
    a13e:	f1b8 0f00 	cmp.w	r8, #0
    a142:	d07f      	beq.n	a244 <grid_port_process_ui+0x258>
		grid_msg_init(&message);
    a144:	4b62      	ldr	r3, [pc, #392]	; (a2d0 <grid_port_process_ui+0x2e4>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a146:	4e63      	ldr	r6, [pc, #396]	; (a2d4 <grid_port_process_ui+0x2e8>)
		grid_msg_init(&message);
    a148:	a86f      	add	r0, sp, #444	; 0x1bc
    a14a:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a14c:	227f      	movs	r2, #127	; 0x7f
    a14e:	4611      	mov	r1, r2
    a150:	4623      	mov	r3, r4
    a152:	a86f      	add	r0, sp, #444	; 0x1bc
    a154:	47b0      	blx	r6
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};				
    a156:	4b60      	ldr	r3, [pc, #384]	; (a2d8 <grid_port_process_ui+0x2ec>)
    a158:	940b      	str	r4, [sp, #44]	; 0x2c
    a15a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    a15e:	4621      	mov	r1, r4
    a160:	a80c      	add	r0, sp, #48	; 0x30
    a162:	4798      	blx	r3
		uint32_t offset=0;
    a164:	46a0      	mov	r8, r4
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++)
    a166:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a16a:	b2e6      	uxtb	r6, r4
    a16c:	42b3      	cmp	r3, r6
    a16e:	d957      	bls.n	a220 <grid_port_process_ui+0x234>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a170:	0136      	lsls	r6, r6, #4
    a172:	2300      	movs	r3, #0
    a174:	e044      	b.n	a200 <grid_port_process_ui+0x214>
    a176:	9303      	str	r3, [sp, #12]
					grid_buffer_write_character(&port[k]->tx_buffer, port[k]->ping_packet[i]);
    a178:	f81b 1b01 	ldrb.w	r1, [fp], #1
    a17c:	4b57      	ldr	r3, [pc, #348]	; (a2dc <grid_port_process_ui+0x2f0>)
    a17e:	4648      	mov	r0, r9
    a180:	4798      	blx	r3
    a182:	9b03      	ldr	r3, [sp, #12]
				for(uint32_t i = 0; i<port[k]->ping_packet_length; i++){
    a184:	e7ca      	b.n	a11c <grid_port_process_ui+0x130>
					if (offset>GRID_PARAMETER_PACKET_marign){
    a186:	f1b8 0fc8 	cmp.w	r8, #200	; 0xc8
    a18a:	d82a      	bhi.n	a1e2 <grid_port_process_ui+0x1f6>
						CRITICAL_SECTION_ENTER()
    a18c:	4b54      	ldr	r3, [pc, #336]	; (a2e0 <grid_port_process_ui+0x2f4>)
    a18e:	a805      	add	r0, sp, #20
    a190:	4798      	blx	r3
						if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a192:	f8da 3004 	ldr.w	r3, [sl, #4]
    a196:	4433      	add	r3, r6
    a198:	f44f 7286 	mov.w	r2, #268	; 0x10c
    a19c:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    a19e:	443b      	add	r3, r7
						if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a1a0:	fb02 fb0b 	mul.w	fp, r2, fp
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    a1a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a1a6:	445b      	add	r3, fp
    a1a8:	7a5b      	ldrb	r3, [r3, #9]
    a1aa:	2b06      	cmp	r3, #6
    a1ac:	d116      	bne.n	a1dc <grid_port_process_ui+0x1f0>
                            offset += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &payload[offset]);
    a1ae:	f8da 3004 	ldr.w	r3, [sl, #4]
    a1b2:	4433      	add	r3, r6
    a1b4:	68db      	ldr	r3, [r3, #12]
    a1b6:	443b      	add	r3, r7
    a1b8:	6e18      	ldr	r0, [r3, #96]	; 0x60
    a1ba:	ab0b      	add	r3, sp, #44	; 0x2c
    a1bc:	eb03 0108 	add.w	r1, r3, r8
    a1c0:	4458      	add	r0, fp
    a1c2:	4b48      	ldr	r3, [pc, #288]	; (a2e4 <grid_port_process_ui+0x2f8>)
    a1c4:	4798      	blx	r3
                            grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    a1c6:	f8da 3004 	ldr.w	r3, [sl, #4]
    a1ca:	4433      	add	r3, r6
                            offset += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &payload[offset]);
    a1cc:	4480      	add	r8, r0
                            grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    a1ce:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    a1d0:	443b      	add	r3, r7
    a1d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a1d4:	449b      	add	fp, r3
    a1d6:	2304      	movs	r3, #4
    a1d8:	f88b 3009 	strb.w	r3, [fp, #9]
						CRITICAL_SECTION_LEAVE()
    a1dc:	4b42      	ldr	r3, [pc, #264]	; (a2e8 <grid_port_process_ui+0x2fc>)
    a1de:	a805      	add	r0, sp, #20
    a1e0:	4798      	blx	r3
                for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a1e2:	f109 0901 	add.w	r9, r9, #1
    a1e6:	f8da 3004 	ldr.w	r3, [sl, #4]
    a1ea:	4433      	add	r3, r6
    a1ec:	fa5f fb89 	uxtb.w	fp, r9
    a1f0:	68db      	ldr	r3, [r3, #12]
    a1f2:	443b      	add	r3, r7
    a1f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    a1f8:	455b      	cmp	r3, fp
    a1fa:	d8c4      	bhi.n	a186 <grid_port_process_ui+0x19a>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a1fc:	9b02      	ldr	r3, [sp, #8]
    a1fe:	3301      	adds	r3, #1
    a200:	9302      	str	r3, [sp, #8]
    a202:	f8da 3004 	ldr.w	r3, [sl, #4]
    a206:	4433      	add	r3, r6
    a208:	7a5a      	ldrb	r2, [r3, #9]
    a20a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a20e:	429a      	cmp	r2, r3
    a210:	d904      	bls.n	a21c <grid_port_process_ui+0x230>
                for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a212:	2764      	movs	r7, #100	; 0x64
    a214:	435f      	muls	r7, r3
    a216:	f04f 0900 	mov.w	r9, #0
    a21a:	e7e4      	b.n	a1e6 <grid_port_process_ui+0x1fa>
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++)
    a21c:	3401      	adds	r4, #1
    a21e:	e7a2      	b.n	a166 <grid_port_process_ui+0x17a>
		grid_msg_body_append_text(&message, payload, offset);
    a220:	a90b      	add	r1, sp, #44	; 0x2c
    a222:	4642      	mov	r2, r8
    a224:	4b31      	ldr	r3, [pc, #196]	; (a2ec <grid_port_process_ui+0x300>)
    a226:	a86f      	add	r0, sp, #444	; 0x1bc
    a228:	4798      	blx	r3
		grid_msg_packet_close(&message);
    a22a:	4b31      	ldr	r3, [pc, #196]	; (a2f0 <grid_port_process_ui+0x304>)
    a22c:	a86f      	add	r0, sp, #444	; 0x1bc
    a22e:	4798      	blx	r3
		uint32_t message_length = grid_msg_packet_get_length(&message);
    a230:	4b30      	ldr	r3, [pc, #192]	; (a2f4 <grid_port_process_ui+0x308>)
    a232:	a86f      	add	r0, sp, #444	; 0x1bc
    a234:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, message_length)){
    a236:	4b23      	ldr	r3, [pc, #140]	; (a2c4 <grid_port_process_ui+0x2d8>)
		uint32_t message_length = grid_msg_packet_get_length(&message);
    a238:	4604      	mov	r4, r0
		if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, message_length)){
    a23a:	b281      	uxth	r1, r0
    a23c:	482e      	ldr	r0, [pc, #184]	; (a2f8 <grid_port_process_ui+0x30c>)
    a23e:	4798      	blx	r3
    a240:	2800      	cmp	r0, #0
    a242:	d132      	bne.n	a2aa <grid_port_process_ui+0x2be>
	if (por->cooldown > 0){
    a244:	9b01      	ldr	r3, [sp, #4]
    a246:	681b      	ldr	r3, [r3, #0]
    a248:	b12b      	cbz	r3, a256 <grid_port_process_ui+0x26a>
		por->cooldown--;
    a24a:	3b01      	subs	r3, #1
    a24c:	9a01      	ldr	r2, [sp, #4]
	if (por->cooldown > 10){
    a24e:	2b0a      	cmp	r3, #10
		por->cooldown--;
    a250:	6013      	str	r3, [r2, #0]
	if (por->cooldown > 10){
    a252:	f200 80fd 	bhi.w	a450 <grid_port_process_ui+0x464>
	if (message_broadcast_action_available){
    a256:	2d00      	cmp	r5, #0
    a258:	f000 80fa 	beq.w	a450 <grid_port_process_ui+0x464>
		grid_msg_init(&message);
    a25c:	4b1c      	ldr	r3, [pc, #112]	; (a2d0 <grid_port_process_ui+0x2e4>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a25e:	4c1d      	ldr	r4, [pc, #116]	; (a2d4 <grid_port_process_ui+0x2e8>)
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a260:	f8df 8058 	ldr.w	r8, [pc, #88]	; a2bc <grid_port_process_ui+0x2d0>
		grid_msg_init(&message);
    a264:	a86f      	add	r0, sp, #444	; 0x1bc
    a266:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a268:	227f      	movs	r2, #127	; 0x7f
    a26a:	2300      	movs	r3, #0
    a26c:	4611      	mov	r1, r2
    a26e:	a86f      	add	r0, sp, #444	; 0x1bc
    a270:	47a0      	blx	r4
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a272:	2700      	movs	r7, #0
    a274:	4645      	mov	r5, r8
    a276:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a27a:	7a5a      	ldrb	r2, [r3, #9]
    a27c:	b2fb      	uxtb	r3, r7
    a27e:	429a      	cmp	r2, r3
    a280:	f240 80d3 	bls.w	a42a <grid_port_process_ui+0x43e>
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a284:	2464      	movs	r4, #100	; 0x64
					CRITICAL_SECTION_LEAVE()
    a286:	f8df b060 	ldr.w	fp, [pc, #96]	; a2e8 <grid_port_process_ui+0x2fc>
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a28a:	435c      	muls	r4, r3
    a28c:	2600      	movs	r6, #0
    a28e:	e067      	b.n	a360 <grid_port_process_ui+0x374>
				grid_buffer_write_character(&GRID_PORT_U.tx_buffer, grid_msg_packet_send_char(&message, i));
    a290:	4631      	mov	r1, r6
    a292:	a86f      	add	r0, sp, #444	; 0x1bc
    a294:	47b8      	blx	r7
    a296:	4601      	mov	r1, r0
    a298:	4640      	mov	r0, r8
    a29a:	47c8      	blx	r9
			for(uint32_t i = 0; i<message_length; i++){
    a29c:	3601      	adds	r6, #1
    a29e:	42a6      	cmp	r6, r4
    a2a0:	d1f6      	bne.n	a290 <grid_port_process_ui+0x2a4>
			grid_buffer_write_acknowledge(&GRID_PORT_U.tx_buffer);
    a2a2:	4b0a      	ldr	r3, [pc, #40]	; (a2cc <grid_port_process_ui+0x2e0>)
    a2a4:	4814      	ldr	r0, [pc, #80]	; (a2f8 <grid_port_process_ui+0x30c>)
    a2a6:	4798      	blx	r3
		}
    a2a8:	e7cc      	b.n	a244 <grid_port_process_ui+0x258>
				grid_buffer_write_character(&GRID_PORT_U.tx_buffer, grid_msg_packet_send_char(&message, i));
    a2aa:	4f14      	ldr	r7, [pc, #80]	; (a2fc <grid_port_process_ui+0x310>)
    a2ac:	f8df 8048 	ldr.w	r8, [pc, #72]	; a2f8 <grid_port_process_ui+0x30c>
    a2b0:	f8df 9028 	ldr.w	r9, [pc, #40]	; a2dc <grid_port_process_ui+0x2f0>
			for(uint32_t i = 0; i<message_length; i++){
    a2b4:	2600      	movs	r6, #0
    a2b6:	e7f2      	b.n	a29e <grid_port_process_ui+0x2b2>
    a2b8:	20006f98 	.word	0x20006f98
    a2bc:	20014628 	.word	0x20014628
    a2c0:	00015864 	.word	0x00015864
    a2c4:	00004839 	.word	0x00004839
    a2c8:	ffffd0cd 	.word	0xffffd0cd
    a2cc:	00004895 	.word	0x00004895
    a2d0:	00008545 	.word	0x00008545
    a2d4:	00008579 	.word	0x00008579
    a2d8:	00012cf5 	.word	0x00012cf5
    a2dc:	00004875 	.word	0x00004875
    a2e0:	00011569 	.word	0x00011569
    a2e4:	00009fa7 	.word	0x00009fa7
    a2e8:	00011577 	.word	0x00011577
    a2ec:	000084b5 	.word	0x000084b5
    a2f0:	00008671 	.word	0x00008671
    a2f4:	000084a1 	.word	0x000084a1
    a2f8:	20006788 	.word	0x20006788
    a2fc:	0000863b 	.word	0x0000863b
				if (grid_msg_packet_get_length(&message)>GRID_PARAMETER_PACKET_marign){
    a300:	4b5f      	ldr	r3, [pc, #380]	; (a480 <grid_port_process_ui+0x494>)
    a302:	a86f      	add	r0, sp, #444	; 0x1bc
    a304:	4798      	blx	r3
    a306:	28c8      	cmp	r0, #200	; 0xc8
    a308:	d829      	bhi.n	a35e <grid_port_process_ui+0x372>
					CRITICAL_SECTION_ENTER()
    a30a:	4b5e      	ldr	r3, [pc, #376]	; (a484 <grid_port_process_ui+0x498>)
    a30c:	a806      	add	r0, sp, #24
    a30e:	4798      	blx	r3
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    a310:	686b      	ldr	r3, [r5, #4]
    a312:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a314:	4423      	add	r3, r4
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    a316:	f44f 7286 	mov.w	r2, #268	; 0x10c
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a31a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    a31c:	fb02 f909 	mul.w	r9, r2, r9
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a320:	444b      	add	r3, r9
    a322:	7a5b      	ldrb	r3, [r3, #9]
    a324:	2b05      	cmp	r3, #5
    a326:	d118      	bne.n	a35a <grid_port_process_ui+0x36e>
						uint32_t offset = grid_msg_body_get_length(&message); 
    a328:	4b57      	ldr	r3, [pc, #348]	; (a488 <grid_port_process_ui+0x49c>)
    a32a:	a86f      	add	r0, sp, #444	; 0x1bc
    a32c:	4798      	blx	r3
						message.body_length += grid_ui_event_render_action(&grid_core_state.bank_list[0].element_list[i].event_list[j], &message.body[offset]);
    a32e:	686b      	ldr	r3, [r5, #4]
    a330:	68db      	ldr	r3, [r3, #12]
    a332:	4423      	add	r3, r4
    a334:	3014      	adds	r0, #20
    a336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a338:	aa6f      	add	r2, sp, #444	; 0x1bc
    a33a:	1811      	adds	r1, r2, r0
    a33c:	eb03 0009 	add.w	r0, r3, r9
    a340:	4b52      	ldr	r3, [pc, #328]	; (a48c <grid_port_process_ui+0x4a0>)
    a342:	4798      	blx	r3
    a344:	9bd4      	ldr	r3, [sp, #848]	; 0x350
    a346:	4418      	add	r0, r3
						grid_ui_event_reset(&grid_core_state.bank_list[0].element_list[i].event_list[j]);
    a348:	686b      	ldr	r3, [r5, #4]
						message.body_length += grid_ui_event_render_action(&grid_core_state.bank_list[0].element_list[i].event_list[j], &message.body[offset]);
    a34a:	90d4      	str	r0, [sp, #848]	; 0x350
						grid_ui_event_reset(&grid_core_state.bank_list[0].element_list[i].event_list[j]);
    a34c:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    a34e:	4423      	add	r3, r4
    a350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a352:	4499      	add	r9, r3
    a354:	2304      	movs	r3, #4
    a356:	f889 3009 	strb.w	r3, [r9, #9]
					CRITICAL_SECTION_LEAVE()
    a35a:	a806      	add	r0, sp, #24
    a35c:	47d8      	blx	fp
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a35e:	3601      	adds	r6, #1
    a360:	686b      	ldr	r3, [r5, #4]
    a362:	68db      	ldr	r3, [r3, #12]
    a364:	4423      	add	r3, r4
    a366:	fa5f f986 	uxtb.w	r9, r6
    a36a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    a36e:	454b      	cmp	r3, r9
    a370:	d8c6      	bhi.n	a300 <grid_port_process_ui+0x314>
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a372:	3701      	adds	r7, #1
    a374:	e77f      	b.n	a276 <grid_port_process_ui+0x28a>
					if (grid_msg_packet_get_length(&message)>GRID_PARAMETER_PACKET_marign){
    a376:	4b42      	ldr	r3, [pc, #264]	; (a480 <grid_port_process_ui+0x494>)
    a378:	a86f      	add	r0, sp, #444	; 0x1bc
    a37a:	4798      	blx	r3
    a37c:	28c8      	cmp	r0, #200	; 0xc8
    a37e:	d82f      	bhi.n	a3e0 <grid_port_process_ui+0x3f4>
						CRITICAL_SECTION_ENTER()
    a380:	4b40      	ldr	r3, [pc, #256]	; (a484 <grid_port_process_ui+0x498>)
    a382:	a80b      	add	r0, sp, #44	; 0x2c
    a384:	4798      	blx	r3
						if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a386:	f8da 3004 	ldr.w	r3, [sl, #4]
    a38a:	4423      	add	r3, r4
    a38c:	f44f 7286 	mov.w	r2, #268	; 0x10c
    a390:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a392:	442b      	add	r3, r5
						if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a394:	fb02 f909 	mul.w	r9, r2, r9
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a39a:	444b      	add	r3, r9
    a39c:	7a5b      	ldrb	r3, [r3, #9]
    a39e:	2b05      	cmp	r3, #5
    a3a0:	d11c      	bne.n	a3dc <grid_port_process_ui+0x3f0>
							uint32_t offset = grid_msg_body_get_length(&message); 
    a3a2:	4b39      	ldr	r3, [pc, #228]	; (a488 <grid_port_process_ui+0x49c>)
    a3a4:	a86f      	add	r0, sp, #444	; 0x1bc
    a3a6:	4798      	blx	r3
							message.body_length += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &message.body[offset]);
    a3a8:	f8da 3004 	ldr.w	r3, [sl, #4]
    a3ac:	4423      	add	r3, r4
    a3ae:	3014      	adds	r0, #20
    a3b0:	68db      	ldr	r3, [r3, #12]
    a3b2:	442b      	add	r3, r5
    a3b4:	aa6f      	add	r2, sp, #444	; 0x1bc
    a3b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a3b8:	1811      	adds	r1, r2, r0
    a3ba:	eb03 0009 	add.w	r0, r3, r9
    a3be:	4b33      	ldr	r3, [pc, #204]	; (a48c <grid_port_process_ui+0x4a0>)
    a3c0:	4798      	blx	r3
    a3c2:	9bd4      	ldr	r3, [sp, #848]	; 0x350
    a3c4:	4418      	add	r0, r3
							grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    a3c6:	f8da 3004 	ldr.w	r3, [sl, #4]
							message.body_length += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &message.body[offset]);
    a3ca:	90d4      	str	r0, [sp, #848]	; 0x350
							grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    a3cc:	4423      	add	r3, r4
    a3ce:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    a3d0:	442b      	add	r3, r5
    a3d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a3d4:	4499      	add	r9, r3
    a3d6:	2304      	movs	r3, #4
    a3d8:	f889 3009 	strb.w	r3, [r9, #9]
						CRITICAL_SECTION_LEAVE()
    a3dc:	a80b      	add	r0, sp, #44	; 0x2c
    a3de:	47d8      	blx	fp
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    a3e0:	f108 0801 	add.w	r8, r8, #1
    a3e4:	f8da 3004 	ldr.w	r3, [sl, #4]
    a3e8:	4423      	add	r3, r4
    a3ea:	fa5f f988 	uxtb.w	r9, r8
    a3ee:	68db      	ldr	r3, [r3, #12]
    a3f0:	442b      	add	r3, r5
    a3f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    a3f6:	454b      	cmp	r3, r9
    a3f8:	d8bd      	bhi.n	a376 <grid_port_process_ui+0x38a>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a3fa:	3601      	adds	r6, #1
    a3fc:	f8da 3004 	ldr.w	r3, [sl, #4]
    a400:	4423      	add	r3, r4
    a402:	7a5a      	ldrb	r2, [r3, #9]
    a404:	b2f3      	uxtb	r3, r6
    a406:	429a      	cmp	r2, r3
    a408:	d906      	bls.n	a418 <grid_port_process_ui+0x42c>
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    a40a:	2564      	movs	r5, #100	; 0x64
						CRITICAL_SECTION_LEAVE()
    a40c:	f8df b094 	ldr.w	fp, [pc, #148]	; a4a4 <grid_port_process_ui+0x4b8>
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    a410:	435d      	muls	r5, r3
    a412:	f04f 0800 	mov.w	r8, #0
    a416:	e7e5      	b.n	a3e4 <grid_port_process_ui+0x3f8>
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    a418:	3701      	adds	r7, #1
    a41a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a41e:	b2fc      	uxtb	r4, r7
    a420:	42a3      	cmp	r3, r4
    a422:	d904      	bls.n	a42e <grid_port_process_ui+0x442>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a424:	0124      	lsls	r4, r4, #4
    a426:	2600      	movs	r6, #0
    a428:	e7e8      	b.n	a3fc <grid_port_process_ui+0x410>
    a42a:	2700      	movs	r7, #0
    a42c:	e7f5      	b.n	a41a <grid_port_process_ui+0x42e>
		por->cooldown += 10;
    a42e:	9b01      	ldr	r3, [sp, #4]
    a430:	9a01      	ldr	r2, [sp, #4]
    a432:	681b      	ldr	r3, [r3, #0]
    a434:	330a      	adds	r3, #10
    a436:	6013      	str	r3, [r2, #0]
		grid_msg_packet_close(&message);
    a438:	a86f      	add	r0, sp, #444	; 0x1bc
    a43a:	4b15      	ldr	r3, [pc, #84]	; (a490 <grid_port_process_ui+0x4a4>)
    a43c:	4798      	blx	r3
		uint32_t length = grid_msg_packet_get_length(&message);
    a43e:	4b10      	ldr	r3, [pc, #64]	; (a480 <grid_port_process_ui+0x494>)
    a440:	a86f      	add	r0, sp, #444	; 0x1bc
    a442:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    a444:	4b13      	ldr	r3, [pc, #76]	; (a494 <grid_port_process_ui+0x4a8>)
		uint32_t length = grid_msg_packet_get_length(&message);
    a446:	4604      	mov	r4, r0
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    a448:	b281      	uxth	r1, r0
    a44a:	4813      	ldr	r0, [pc, #76]	; (a498 <grid_port_process_ui+0x4ac>)
    a44c:	4798      	blx	r3
    a44e:	b988      	cbnz	r0, a474 <grid_port_process_ui+0x488>
}
    a450:	f50d 7d57 	add.w	sp, sp, #860	; 0x35c
    a454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(&message, i));
    a458:	a86f      	add	r0, sp, #444	; 0x1bc
    a45a:	47b0      	blx	r6
    a45c:	4601      	mov	r1, r0
    a45e:	4638      	mov	r0, r7
    a460:	47c0      	blx	r8
			for(uint16_t i = 0; i<length; i++){
    a462:	b2a9      	uxth	r1, r5
    a464:	428c      	cmp	r4, r1
    a466:	f105 0501 	add.w	r5, r5, #1
    a46a:	d8f5      	bhi.n	a458 <grid_port_process_ui+0x46c>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    a46c:	4b0b      	ldr	r3, [pc, #44]	; (a49c <grid_port_process_ui+0x4b0>)
    a46e:	480a      	ldr	r0, [pc, #40]	; (a498 <grid_port_process_ui+0x4ac>)
    a470:	4798      	blx	r3
		}
    a472:	e7ed      	b.n	a450 <grid_port_process_ui+0x464>
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(&message, i));
    a474:	4e0a      	ldr	r6, [pc, #40]	; (a4a0 <grid_port_process_ui+0x4b4>)
    a476:	4f08      	ldr	r7, [pc, #32]	; (a498 <grid_port_process_ui+0x4ac>)
    a478:	f8df 802c 	ldr.w	r8, [pc, #44]	; a4a8 <grid_port_process_ui+0x4bc>
    a47c:	2500      	movs	r5, #0
    a47e:	e7f0      	b.n	a462 <grid_port_process_ui+0x476>
    a480:	000084a1 	.word	0x000084a1
    a484:	00011569 	.word	0x00011569
    a488:	000084af 	.word	0x000084af
    a48c:	00009fa7 	.word	0x00009fa7
    a490:	00008671 	.word	0x00008671
    a494:	00004839 	.word	0x00004839
    a498:	20006b80 	.word	0x20006b80
    a49c:	00004895 	.word	0x00004895
    a4a0:	0000863b 	.word	0x0000863b
    a4a4:	00011577 	.word	0x00011577
    a4a8:	00004875 	.word	0x00004875

0000a4ac <grid_ui_event_template_action>:

uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
    a4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	if (event_index == 255){
    a4b0:	29ff      	cmp	r1, #255	; 0xff
uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
    a4b2:	b085      	sub	sp, #20
    a4b4:	4604      	mov	r4, r0
	if (event_index == 255){
    a4b6:	d01e      	beq.n	a4f6 <grid_ui_event_template_action+0x4a>
		
		return;
	}
	
	// TEMPLATE EVENT
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    a4b8:	f44f 7586 	mov.w	r5, #268	; 0x10c
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
				
			uint8_t error = 0;
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a4bc:	f8df 8220 	ldr.w	r8, [pc, #544]	; a6e0 <grid_ui_event_template_action+0x234>
			}
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
				parameter_value = grid_sys_state.mapmodestate;
			}
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    a4c0:	4e82      	ldr	r6, [pc, #520]	; (a6cc <grid_ui_event_template_action+0x220>)
    a4c2:	f8df 9220 	ldr.w	r9, [pc, #544]	; a6e4 <grid_ui_event_template_action+0x238>
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    a4c6:	434d      	muls	r5, r1
    a4c8:	2700      	movs	r7, #0
    a4ca:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a4cc:	4428      	add	r0, r5
    a4ce:	fa5f fb87 	uxtb.w	fp, r7
    a4d2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    a4d6:	455b      	cmp	r3, fp
    a4d8:	d811      	bhi.n	a4fe <grid_ui_event_template_action+0x52>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
			
			uint8_t error = 0;
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a4da:	f8df 8204 	ldr.w	r8, [pc, #516]	; a6e0 <grid_ui_event_template_action+0x234>
			}
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
				parameter_value = grid_sys_state.mapmodestate;
			}
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    a4de:	4e7b      	ldr	r6, [pc, #492]	; (a6cc <grid_ui_event_template_action+0x220>)
    a4e0:	f8df 9200 	ldr.w	r9, [pc, #512]	; a6e4 <grid_ui_event_template_action+0x238>
    a4e4:	2700      	movs	r7, #0
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    a4e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a4e8:	4428      	add	r0, r5
    a4ea:	fa5f fb87 	uxtb.w	fp, r7
    a4ee:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    a4f2:	455b      	cmp	r3, fp
    a4f4:	d876      	bhi.n	a5e4 <grid_ui_event_template_action+0x138>
	
	
	
	
	
}
    a4f6:	2000      	movs	r0, #0
    a4f8:	b005      	add	sp, #20
    a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ele->event_list[event_index].event_parameter_list[i].group == 'P' || ele->event_list[event_index].event_parameter_list[i].group == 'B'){
    a4fe:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
    a502:	4403      	add	r3, r0
    a504:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    a508:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    a50c:	2b50      	cmp	r3, #80	; 0x50
    a50e:	d001      	beq.n	a514 <grid_ui_event_template_action+0x68>
    a510:	2b42      	cmp	r3, #66	; 0x42
    a512:	d114      	bne.n	a53e <grid_ui_event_template_action+0x92>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    a514:	eb0a 030b 	add.w	r3, sl, fp
    a518:	4403      	add	r3, r0
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a51a:	3010      	adds	r0, #16
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    a51c:	f893 c031 	ldrb.w	ip, [r3, #49]	; 0x31
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    a520:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    a524:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
			uint8_t error = 0;
    a528:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    a52a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    a52e:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a532:	f10d 030f 	add.w	r3, sp, #15
    a536:	9300      	str	r3, [sp, #0]
    a538:	f8dc 300c 	ldr.w	r3, [ip, #12]
    a53c:	47c0      	blx	r8
		if (ele->event_list[event_index].event_parameter_list[i].group == 'E'){
    a53e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a540:	eb0a 030b 	add.w	r3, sl, fp
    a544:	4428      	add	r0, r5
    a546:	4403      	add	r3, r0
    a548:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a54c:	2a45      	cmp	r2, #69	; 0x45
    a54e:	d113      	bne.n	a578 <grid_ui_event_template_action+0xcc>
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].event_parameter_list[i].address];
    a550:	f893 c031 	ldrb.w	ip, [r3, #49]	; 0x31
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    a554:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    a558:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
			uint8_t error = 0;
    a55c:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].event_parameter_list[i].address];
    a55e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    a562:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a566:	f10d 030f 	add.w	r3, sp, #15
    a56a:	9300      	str	r3, [sp, #0]
    a56c:	f8dc 3020 	ldr.w	r3, [ip, #32]
    a570:	3010      	adds	r0, #16
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a572:	47c0      	blx	r8
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    a574:	3701      	adds	r7, #1
    a576:	e7a8      	b.n	a4ca <grid_ui_event_template_action+0x1e>
		else if (ele->event_list[event_index].event_parameter_list[i].group == 'Z'){
    a578:	2a5a      	cmp	r2, #90	; 0x5a
    a57a:	d1fb      	bne.n	a574 <grid_ui_event_template_action+0xc8>
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    a57c:	f893 a033 	ldrb.w	sl, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    a580:	f893 b032 	ldrb.w	fp, [r3, #50]	; 0x32
			if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NUMBER_ACTIVE){
    a584:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    a588:	b98b      	cbnz	r3, a5ae <grid_ui_event_template_action+0x102>
				parameter_value = grid_sys_get_bank_num(&grid_sys_state);
    a58a:	4b51      	ldr	r3, [pc, #324]	; (a6d0 <grid_ui_event_template_action+0x224>)
    a58c:	4630      	mov	r0, r6
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    a58e:	4798      	blx	r3
			uint8_t error = 0;
    a590:	2300      	movs	r3, #0
    a592:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a596:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a598:	eb03 0c05 	add.w	ip, r3, r5
    a59c:	f10d 030f 	add.w	r3, sp, #15
    a5a0:	9300      	str	r3, [sp, #0]
    a5a2:	465a      	mov	r2, fp
    a5a4:	4603      	mov	r3, r0
    a5a6:	4651      	mov	r1, sl
    a5a8:	f10c 0010 	add.w	r0, ip, #16
    a5ac:	e7e1      	b.n	a572 <grid_ui_event_template_action+0xc6>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_RED){
    a5ae:	2b01      	cmp	r3, #1
    a5b0:	d102      	bne.n	a5b8 <grid_ui_event_template_action+0x10c>
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    a5b2:	4b48      	ldr	r3, [pc, #288]	; (a6d4 <grid_ui_event_template_action+0x228>)
    a5b4:	4630      	mov	r0, r6
    a5b6:	e7ea      	b.n	a58e <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_GRE){
    a5b8:	2b02      	cmp	r3, #2
    a5ba:	d102      	bne.n	a5c2 <grid_ui_event_template_action+0x116>
				parameter_value = grid_sys_get_bank_gre(&grid_sys_state);
    a5bc:	4b46      	ldr	r3, [pc, #280]	; (a6d8 <grid_ui_event_template_action+0x22c>)
    a5be:	4630      	mov	r0, r6
    a5c0:	e7e5      	b.n	a58e <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_BLU){
    a5c2:	2b03      	cmp	r3, #3
    a5c4:	d102      	bne.n	a5cc <grid_ui_event_template_action+0x120>
				parameter_value = grid_sys_get_bank_blu(&grid_sys_state);
    a5c6:	4b45      	ldr	r3, [pc, #276]	; (a6dc <grid_ui_event_template_action+0x230>)
    a5c8:	4630      	mov	r0, r6
    a5ca:	e7e0      	b.n	a58e <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
    a5cc:	2b04      	cmp	r3, #4
    a5ce:	d102      	bne.n	a5d6 <grid_ui_event_template_action+0x12a>
				parameter_value = grid_sys_state.mapmodestate;
    a5d0:	7c30      	ldrb	r0, [r6, #16]
    a5d2:	b2c0      	uxtb	r0, r0
    a5d4:	e7dc      	b.n	a590 <grid_ui_event_template_action+0xe4>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
    a5d6:	2b05      	cmp	r3, #5
    a5d8:	d102      	bne.n	a5e0 <grid_ui_event_template_action+0x134>
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    a5da:	4630      	mov	r0, r6
    a5dc:	47c8      	blx	r9
    a5de:	e7d7      	b.n	a590 <grid_ui_event_template_action+0xe4>
			uint32_t parameter_value = 0;
    a5e0:	2000      	movs	r0, #0
    a5e2:	e7d5      	b.n	a590 <grid_ui_event_template_action+0xe4>
		if (ele->event_list[event_index].action_parameter_list[i].group == 'P' || ele->event_list[event_index].action_parameter_list[i].group == 'B'){
    a5e4:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
    a5e8:	4403      	add	r3, r0
    a5ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    a5ee:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    a5f2:	2b50      	cmp	r3, #80	; 0x50
    a5f4:	d001      	beq.n	a5fa <grid_ui_event_template_action+0x14e>
    a5f6:	2b42      	cmp	r3, #66	; 0x42
    a5f8:	d114      	bne.n	a624 <grid_ui_event_template_action+0x178>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    a5fa:	eb0a 030b 	add.w	r3, sl, fp
    a5fe:	4403      	add	r3, r0
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a600:	3048      	adds	r0, #72	; 0x48
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    a602:	f893 c0c3 	ldrb.w	ip, [r3, #195]	; 0xc3
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    a606:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    a60a:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
			uint8_t error = 0;
    a60e:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    a610:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    a614:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a618:	f10d 030f 	add.w	r3, sp, #15
    a61c:	9300      	str	r3, [sp, #0]
    a61e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    a622:	47c0      	blx	r8
		if (ele->event_list[event_index].action_parameter_list[i].group == 'E'){
    a624:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a626:	eb0a 030b 	add.w	r3, sl, fp
    a62a:	4428      	add	r0, r5
    a62c:	4403      	add	r3, r0
    a62e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    a632:	2a45      	cmp	r2, #69	; 0x45
    a634:	d113      	bne.n	a65e <grid_ui_event_template_action+0x1b2>
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].action_parameter_list[i].address];
    a636:	f893 c0c3 	ldrb.w	ip, [r3, #195]	; 0xc3
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    a63a:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    a63e:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
			uint8_t error = 0;
    a642:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].action_parameter_list[i].address];
    a644:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    a648:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a64c:	f10d 030f 	add.w	r3, sp, #15
    a650:	9300      	str	r3, [sp, #0]
    a652:	f8dc 3020 	ldr.w	r3, [ip, #32]
    a656:	3048      	adds	r0, #72	; 0x48
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a658:	47c0      	blx	r8
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    a65a:	3701      	adds	r7, #1
    a65c:	e743      	b.n	a4e6 <grid_ui_event_template_action+0x3a>
		else if (ele->event_list[event_index].action_parameter_list[i].group == 'Z'){
    a65e:	2a5a      	cmp	r2, #90	; 0x5a
    a660:	d1fb      	bne.n	a65a <grid_ui_event_template_action+0x1ae>
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    a662:	f893 a0c5 	ldrb.w	sl, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    a666:	f893 b0c4 	ldrb.w	fp, [r3, #196]	; 0xc4
			if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NUMBER_ACTIVE){
    a66a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    a66e:	b98b      	cbnz	r3, a694 <grid_ui_event_template_action+0x1e8>
				parameter_value = grid_sys_get_bank_num(&grid_sys_state);
    a670:	4b17      	ldr	r3, [pc, #92]	; (a6d0 <grid_ui_event_template_action+0x224>)
    a672:	4630      	mov	r0, r6
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    a674:	4798      	blx	r3
			uint8_t error = 0;
    a676:	2300      	movs	r3, #0
    a678:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a67c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a67e:	eb03 0c05 	add.w	ip, r3, r5
    a682:	f10d 030f 	add.w	r3, sp, #15
    a686:	9300      	str	r3, [sp, #0]
    a688:	465a      	mov	r2, fp
    a68a:	4603      	mov	r3, r0
    a68c:	4651      	mov	r1, sl
    a68e:	f10c 0048 	add.w	r0, ip, #72	; 0x48
    a692:	e7e1      	b.n	a658 <grid_ui_event_template_action+0x1ac>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_RED){
    a694:	2b01      	cmp	r3, #1
    a696:	d102      	bne.n	a69e <grid_ui_event_template_action+0x1f2>
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    a698:	4b0e      	ldr	r3, [pc, #56]	; (a6d4 <grid_ui_event_template_action+0x228>)
    a69a:	4630      	mov	r0, r6
    a69c:	e7ea      	b.n	a674 <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_GRE){
    a69e:	2b02      	cmp	r3, #2
    a6a0:	d102      	bne.n	a6a8 <grid_ui_event_template_action+0x1fc>
				parameter_value = grid_sys_get_bank_gre(&grid_sys_state);
    a6a2:	4b0d      	ldr	r3, [pc, #52]	; (a6d8 <grid_ui_event_template_action+0x22c>)
    a6a4:	4630      	mov	r0, r6
    a6a6:	e7e5      	b.n	a674 <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_BLU){
    a6a8:	2b03      	cmp	r3, #3
    a6aa:	d102      	bne.n	a6b2 <grid_ui_event_template_action+0x206>
				parameter_value = grid_sys_get_bank_blu(&grid_sys_state);
    a6ac:	4b0b      	ldr	r3, [pc, #44]	; (a6dc <grid_ui_event_template_action+0x230>)
    a6ae:	4630      	mov	r0, r6
    a6b0:	e7e0      	b.n	a674 <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
    a6b2:	2b04      	cmp	r3, #4
    a6b4:	d102      	bne.n	a6bc <grid_ui_event_template_action+0x210>
				parameter_value = grid_sys_state.mapmodestate;
    a6b6:	7c30      	ldrb	r0, [r6, #16]
    a6b8:	b2c0      	uxtb	r0, r0
    a6ba:	e7dc      	b.n	a676 <grid_ui_event_template_action+0x1ca>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
    a6bc:	2b05      	cmp	r3, #5
    a6be:	d102      	bne.n	a6c6 <grid_ui_event_template_action+0x21a>
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    a6c0:	4630      	mov	r0, r6
    a6c2:	47c8      	blx	r9
    a6c4:	e7d7      	b.n	a676 <grid_ui_event_template_action+0x1ca>
			uint32_t parameter_value = 0;
    a6c6:	2000      	movs	r0, #0
    a6c8:	e7d5      	b.n	a676 <grid_ui_event_template_action+0x1ca>
    a6ca:	bf00      	nop
    a6cc:	20006fa4 	.word	0x20006fa4
    a6d0:	000096a3 	.word	0x000096a3
    a6d4:	000096ad 	.word	0x000096ad
    a6d8:	000096b3 	.word	0x000096b3
    a6dc:	000096b9 	.word	0x000096b9
    a6e0:	000099c5 	.word	0x000099c5
    a6e4:	000096bf 	.word	0x000096bf

0000a6e8 <grid_ui_event_register_actionstring>:
void grid_ui_event_register_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* action_string, uint32_t action_string_length){
    a6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a6ec:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
void grid_ui_event_register_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* action_string, uint32_t action_string_length){
    a6f0:	460d      	mov	r5, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a6f2:	2400      	movs	r4, #0
	uint8_t event_index = 255;
    a6f4:	21ff      	movs	r1, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    a6f6:	f44f 7e86 	mov.w	lr, #268	; 0x10c
    a6fa:	b2e7      	uxtb	r7, r4
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a6fc:	45bc      	cmp	ip, r7
    a6fe:	d839      	bhi.n	a774 <grid_ui_event_register_actionstring+0x8c>
	if (event_index == 255){
    a700:	29ff      	cmp	r1, #255	; 0xff
    a702:	d07a      	beq.n	a7fa <grid_ui_event_register_actionstring+0x112>
		ele->event_list[event_index].action_string[i] = 0;
    a704:	6e04      	ldr	r4, [r0, #96]	; 0x60
    a706:	f44f 7586 	mov.w	r5, #268	; 0x10c
    a70a:	fb05 4401 	mla	r4, r5, r1, r4
    a70e:	f104 0c48 	add.w	ip, r4, #72	; 0x48
    a712:	4625      	mov	r5, r4
    a714:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    a718:	4666      	mov	r6, ip
    a71a:	2700      	movs	r7, #0
    a71c:	f806 7b01 	strb.w	r7, [r6], #1
	for(uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    a720:	4576      	cmp	r6, lr
    a722:	d1fb      	bne.n	a71c <grid_ui_event_register_actionstring+0x34>
	ele->event_list[event_index].action_string_length = 0;
    a724:	6467      	str	r7, [r4, #68]	; 0x44
		ele->event_list[event_index].action_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    a726:	2600      	movs	r6, #0
    a728:	f104 0746 	add.w	r7, r4, #70	; 0x46
    a72c:	f885 60c1 	strb.w	r6, [r5, #193]	; 0xc1
		ele->event_list[event_index].action_parameter_list[i].address = 0;
    a730:	f885 60c3 	strb.w	r6, [r5, #195]	; 0xc3
		ele->event_list[event_index].action_parameter_list[i].group = 0;
    a734:	f885 60c2 	strb.w	r6, [r5, #194]	; 0xc2
		ele->event_list[event_index].action_parameter_list[i].length = 0;
    a738:	f885 60c4 	strb.w	r6, [r5, #196]	; 0xc4
		ele->event_list[event_index].action_parameter_list[i].offset = 0;
    a73c:	f885 60c5 	strb.w	r6, [r5, #197]	; 0xc5
	for(uint8_t i=0; i<GRID_UI_ACTION_PARAMETER_maxcount; i++){
    a740:	3505      	adds	r5, #5
    a742:	42bd      	cmp	r5, r7
    a744:	d1f2      	bne.n	a72c <grid_ui_event_register_actionstring+0x44>
	ele->event_list[event_index].action_parameter_count = 0;
    a746:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
	for (uint32_t i=0; i<action_string_length; i++){
    a74a:	2600      	movs	r6, #0
    a74c:	3a01      	subs	r2, #1
	uint8_t parameter_list_length = 0;
    a74e:	4635      	mov	r5, r6
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    a750:	f244 0909 	movw	r9, #16393	; 0x4009
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    a754:	f04f 0e01 	mov.w	lr, #1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].length = 2;
    a758:	f04f 0802 	mov.w	r8, #2
	for (uint32_t i=0; i<action_string_length; i++){
    a75c:	429e      	cmp	r6, r3
    a75e:	d112      	bne.n	a786 <grid_ui_event_register_actionstring+0x9e>
	ele->event_list[event_index].cfg_changed_flag = 1;
    a760:	2301      	movs	r3, #1
    a762:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	ele->event_list[event_index].action_parameter_count = parameter_list_length;
    a766:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
	ele->event_list[event_index].action_string_length = action_string_length;
    a76a:	6466      	str	r6, [r4, #68]	; 0x44
	grid_ui_event_template_action(ele, event_index);
    a76c:	4b24      	ldr	r3, [pc, #144]	; (a800 <grid_ui_event_register_actionstring+0x118>)
}
    a76e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_ui_event_template_action(ele, event_index);
    a772:	4718      	bx	r3
		if (ele->event_list[i].type == event_type){
    a774:	6e06      	ldr	r6, [r0, #96]	; 0x60
    a776:	fb0e 6604 	mla	r6, lr, r4, r6
    a77a:	3401      	adds	r4, #1
    a77c:	7ab6      	ldrb	r6, [r6, #10]
    a77e:	42ae      	cmp	r6, r5
    a780:	bf08      	it	eq
    a782:	4639      	moveq	r1, r7
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a784:	e7b9      	b.n	a6fa <grid_ui_event_register_actionstring+0x12>
		if (ele->event_list[event_index].action_string[i] > 127){
    a786:	f992 a001 	ldrsb.w	sl, [r2, #1]
		ele->event_list[event_index].action_string[i] = action_string[i];
    a78a:	7857      	ldrb	r7, [r2, #1]
		if (ele->event_list[event_index].action_string[i] > 127){
    a78c:	f1ba 0f00 	cmp.w	sl, #0
			ele->event_list[event_index].action_string[i] -= 128;
    a790:	bfb8      	it	lt
    a792:	3f80      	sublt	r7, #128	; 0x80
    a794:	f88c 7000 	strb.w	r7, [ip]
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    a798:	f892 a000 	ldrb.w	sl, [r2]
    a79c:	f1aa 0742 	sub.w	r7, sl, #66	; 0x42
    a7a0:	b2ff      	uxtb	r7, r7
    a7a2:	2f0e      	cmp	r7, #14
    a7a4:	d907      	bls.n	a7b6 <grid_ui_event_register_actionstring+0xce>
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a7a6:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
    a7aa:	d023      	beq.n	a7f4 <grid_ui_event_register_actionstring+0x10c>
	for (uint32_t i=0; i<action_string_length; i++){
    a7ac:	3601      	adds	r6, #1
    a7ae:	f10c 0c01 	add.w	ip, ip, #1
    a7b2:	3201      	adds	r2, #1
    a7b4:	e7d2      	b.n	a75c <grid_ui_event_register_actionstring+0x74>
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    a7b6:	fa29 f707 	lsr.w	r7, r9, r7
    a7ba:	07ff      	lsls	r7, r7, #31
    a7bc:	d5f6      	bpl.n	a7ac <grid_ui_event_register_actionstring+0xc4>
    a7be:	7857      	ldrb	r7, [r2, #1]
    a7c0:	2f39      	cmp	r7, #57	; 0x39
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a7c2:	d8f3      	bhi.n	a7ac <grid_ui_event_register_actionstring+0xc4>
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;		
    a7c4:	eb05 0785 	add.w	r7, r5, r5, lsl #2
    a7c8:	4427      	add	r7, r4
			parameter_list_length++;
    a7ca:	3501      	adds	r5, #1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;		
    a7cc:	f887 e0c1 	strb.w	lr, [r7, #193]	; 0xc1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].group = action_string[i-1];
    a7d0:	f892 a000 	ldrb.w	sl, [r2]
    a7d4:	f887 a0c2 	strb.w	sl, [r7, #194]	; 0xc2
			ele->event_list[event_index].action_parameter_list[parameter_list_length].address = (action_string[i]-'0');
    a7d8:	f892 a001 	ldrb.w	sl, [r2, #1]
			ele->event_list[event_index].action_parameter_list[parameter_list_length].length = 2;
    a7dc:	f887 80c4 	strb.w	r8, [r7, #196]	; 0xc4
			ele->event_list[event_index].action_parameter_list[parameter_list_length].address = (action_string[i]-'0');
    a7e0:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    a7e4:	f887 a0c3 	strb.w	sl, [r7, #195]	; 0xc3
			ele->event_list[event_index].action_parameter_list[parameter_list_length].offset = i-1;
    a7e8:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
    a7ec:	f887 a0c5 	strb.w	sl, [r7, #197]	; 0xc5
			parameter_list_length++;
    a7f0:	b2ed      	uxtb	r5, r5
    a7f2:	e7db      	b.n	a7ac <grid_ui_event_register_actionstring+0xc4>
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a7f4:	7857      	ldrb	r7, [r2, #1]
    a7f6:	2f35      	cmp	r7, #53	; 0x35
    a7f8:	e7e3      	b.n	a7c2 <grid_ui_event_register_actionstring+0xda>
}
    a7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7fe:	bf00      	nop
    a800:	0000a4ad 	.word	0x0000a4ad

0000a804 <grid_ui_event_generate_actionstring>:
void grid_ui_event_generate_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    a804:	b5f0      	push	{r4, r5, r6, r7, lr}
    a806:	4606      	mov	r6, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a808:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
void grid_ui_event_generate_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    a80c:	b09f      	sub	sp, #124	; 0x7c
    a80e:	460c      	mov	r4, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a810:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    a812:	25ff      	movs	r5, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    a814:	f44f 7786 	mov.w	r7, #268	; 0x10c
    a818:	b2d9      	uxtb	r1, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a81a:	4288      	cmp	r0, r1
    a81c:	d82c      	bhi.n	a878 <grid_ui_event_generate_actionstring+0x74>
	if (event_index == 255){
    a81e:	2dff      	cmp	r5, #255	; 0xff
    a820:	d028      	beq.n	a874 <grid_ui_event_generate_actionstring+0x70>
	uint8_t action_string[GRID_UI_ACTION_STRING_maxlength] = {0};
    a822:	4b36      	ldr	r3, [pc, #216]	; (a8fc <grid_ui_event_generate_actionstring+0xf8>)
    a824:	2100      	movs	r1, #0
    a826:	2274      	movs	r2, #116	; 0x74
    a828:	a801      	add	r0, sp, #4
    a82a:	9100      	str	r1, [sp, #0]
    a82c:	4798      	blx	r3
	if (ele->type == GRID_UI_ELEMENT_BUTTON){
    a82e:	7a73      	ldrb	r3, [r6, #9]
    a830:	2b02      	cmp	r3, #2
    a832:	d12e      	bne.n	a892 <grid_ui_event_generate_actionstring+0x8e>
		switch(event_type){
    a834:	2c04      	cmp	r4, #4
    a836:	d028      	beq.n	a88a <grid_ui_event_generate_actionstring+0x86>
    a838:	2c05      	cmp	r4, #5
    a83a:	d028      	beq.n	a88e <grid_ui_event_generate_actionstring+0x8a>
    a83c:	b91c      	cbnz	r4, a846 <grid_ui_event_generate_actionstring+0x42>
			case GRID_UI_EVENT_INIT:	sprintf(action_string, GRID_ACTIONSTRING_INIT_BUT);		break;
    a83e:	4930      	ldr	r1, [pc, #192]	; (a900 <grid_ui_event_generate_actionstring+0xfc>)
			case GRID_UI_EVENT_DR:          sprintf(action_string, GRID_ACTIONSTRING_DR_ENC);	break;
    a840:	4b30      	ldr	r3, [pc, #192]	; (a904 <grid_ui_event_generate_actionstring+0x100>)
    a842:	4668      	mov	r0, sp
    a844:	4798      	blx	r3
	if (strlen(action_string)){
    a846:	f89d 3000 	ldrb.w	r3, [sp]
    a84a:	b143      	cbz	r3, a85e <grid_ui_event_generate_actionstring+0x5a>
		grid_ui_event_register_actionstring(ele, event_type, action_string, strlen(action_string));
    a84c:	4b2e      	ldr	r3, [pc, #184]	; (a908 <grid_ui_event_generate_actionstring+0x104>)
    a84e:	4668      	mov	r0, sp
    a850:	4798      	blx	r3
    a852:	4621      	mov	r1, r4
    a854:	4603      	mov	r3, r0
    a856:	4c2d      	ldr	r4, [pc, #180]	; (a90c <grid_ui_event_generate_actionstring+0x108>)
    a858:	466a      	mov	r2, sp
    a85a:	4630      	mov	r0, r6
    a85c:	47a0      	blx	r4
	ele->event_list[event_index].cfg_changed_flag = 0;
    a85e:	6e33      	ldr	r3, [r6, #96]	; 0x60
    a860:	f44f 7286 	mov.w	r2, #268	; 0x10c
    a864:	fb02 3505 	mla	r5, r2, r5, r3
    a868:	2300      	movs	r3, #0
    a86a:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
	ele->event_list[event_index].cfg_default_flag = 1;	
    a86e:	2301      	movs	r3, #1
    a870:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
}
    a874:	b01f      	add	sp, #124	; 0x7c
    a876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ele->event_list[i].type == event_type){
    a878:	6e32      	ldr	r2, [r6, #96]	; 0x60
    a87a:	fb07 2203 	mla	r2, r7, r3, r2
    a87e:	3301      	adds	r3, #1
    a880:	7a92      	ldrb	r2, [r2, #10]
    a882:	42a2      	cmp	r2, r4
    a884:	bf08      	it	eq
    a886:	460d      	moveq	r5, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a888:	e7c6      	b.n	a818 <grid_ui_event_generate_actionstring+0x14>
			case GRID_UI_EVENT_DP:		sprintf(action_string, GRID_ACTIONSTRING_DP_BUT);		break;
    a88a:	4921      	ldr	r1, [pc, #132]	; (a910 <grid_ui_event_generate_actionstring+0x10c>)
    a88c:	e7d8      	b.n	a840 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DR:		sprintf(action_string, GRID_ACTIONSTRING_DR_BUT);		break;
    a88e:	4921      	ldr	r1, [pc, #132]	; (a914 <grid_ui_event_generate_actionstring+0x110>)
    a890:	e7d6      	b.n	a840 <grid_ui_event_generate_actionstring+0x3c>
	else if (ele->type == GRID_UI_ELEMENT_POTENTIOMETER){
    a892:	2b01      	cmp	r3, #1
    a894:	d105      	bne.n	a8a2 <grid_ui_event_generate_actionstring+0x9e>
		switch(event_type){
    a896:	2c00      	cmp	r4, #0
    a898:	d0d1      	beq.n	a83e <grid_ui_event_generate_actionstring+0x3a>
    a89a:	2c01      	cmp	r4, #1
    a89c:	d1d3      	bne.n	a846 <grid_ui_event_generate_actionstring+0x42>
			case GRID_UI_EVENT_AVC7:	sprintf(action_string, GRID_ACTIONSTRING_AVC7_POT);		break;
    a89e:	491e      	ldr	r1, [pc, #120]	; (a918 <grid_ui_event_generate_actionstring+0x114>)
    a8a0:	e7ce      	b.n	a840 <grid_ui_event_generate_actionstring+0x3c>
	else if (ele->type == GRID_UI_ELEMENT_ENCODER){
    a8a2:	2b03      	cmp	r3, #3
    a8a4:	d1cf      	bne.n	a846 <grid_ui_event_generate_actionstring+0x42>
		switch(event_type){
    a8a6:	2c0d      	cmp	r4, #13
    a8a8:	d8cd      	bhi.n	a846 <grid_ui_event_generate_actionstring+0x42>
    a8aa:	a301      	add	r3, pc, #4	; (adr r3, a8b0 <grid_ui_event_generate_actionstring+0xac>)
    a8ac:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    a8b0:	0000a8e9 	.word	0x0000a8e9
    a8b4:	0000a8ed 	.word	0x0000a8ed
    a8b8:	0000a847 	.word	0x0000a847
    a8bc:	0000a847 	.word	0x0000a847
    a8c0:	0000a8f5 	.word	0x0000a8f5
    a8c4:	0000a8f9 	.word	0x0000a8f9
    a8c8:	0000a847 	.word	0x0000a847
    a8cc:	0000a847 	.word	0x0000a847
    a8d0:	0000a847 	.word	0x0000a847
    a8d4:	0000a847 	.word	0x0000a847
    a8d8:	0000a847 	.word	0x0000a847
    a8dc:	0000a847 	.word	0x0000a847
    a8e0:	0000a847 	.word	0x0000a847
    a8e4:	0000a8f1 	.word	0x0000a8f1
			case GRID_UI_EVENT_INIT:        sprintf(action_string, GRID_ACTIONSTRING_INIT_ENC);	break;
    a8e8:	490c      	ldr	r1, [pc, #48]	; (a91c <grid_ui_event_generate_actionstring+0x118>)
    a8ea:	e7a9      	b.n	a840 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_AVC7:        sprintf(action_string, GRID_ACTIONSTRING_AVC7_ENC);	break;
    a8ec:	490c      	ldr	r1, [pc, #48]	; (a920 <grid_ui_event_generate_actionstring+0x11c>)
    a8ee:	e7a7      	b.n	a840 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_ENCPUSHROT:	sprintf(action_string, GRID_ACTIONSTRING_PUSHROT_ENC);	break;
    a8f0:	490c      	ldr	r1, [pc, #48]	; (a924 <grid_ui_event_generate_actionstring+0x120>)
    a8f2:	e7a5      	b.n	a840 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DP:          sprintf(action_string, GRID_ACTIONSTRING_DP_ENC);	break;
    a8f4:	490c      	ldr	r1, [pc, #48]	; (a928 <grid_ui_event_generate_actionstring+0x124>)
    a8f6:	e7a3      	b.n	a840 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DR:          sprintf(action_string, GRID_ACTIONSTRING_DR_ENC);	break;
    a8f8:	490c      	ldr	r1, [pc, #48]	; (a92c <grid_ui_event_generate_actionstring+0x128>)
    a8fa:	e7a1      	b.n	a840 <grid_ui_event_generate_actionstring+0x3c>
    a8fc:	00012cf5 	.word	0x00012cf5
    a900:	000156d1 	.word	0x000156d1
    a904:	0001373d 	.word	0x0001373d
    a908:	00013801 	.word	0x00013801
    a90c:	0000a6e9 	.word	0x0000a6e9
    a910:	000156e2 	.word	0x000156e2
    a914:	000156fd 	.word	0x000156fd
    a918:	00015718 	.word	0x00015718
    a91c:	00015733 	.word	0x00015733
    a920:	00015754 	.word	0x00015754
    a924:	0001576f 	.word	0x0001576f
    a928:	0001577e 	.word	0x0001577e
    a92c:	00015799 	.word	0x00015799

0000a930 <grid_ui_reinit>:
void grid_ui_reinit(struct grid_ui_model* ui){
    a930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a934:	4606      	mov	r6, r0
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    a936:	2700      	movs	r7, #0
    a938:	7873      	ldrb	r3, [r6, #1]
    a93a:	b2fc      	uxtb	r4, r7
    a93c:	42a3      	cmp	r3, r4
    a93e:	d805      	bhi.n	a94c <grid_ui_reinit+0x1c>
	grid_sys_state.bank_active_changed = 1;
    a940:	4b18      	ldr	r3, [pc, #96]	; (a9a4 <grid_ui_reinit+0x74>)
    a942:	2201      	movs	r2, #1
    a944:	745a      	strb	r2, [r3, #17]
}
    a946:	b003      	add	sp, #12
    a948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct grid_ui_bank* bank = &ui->bank_list[i];
    a94c:	6873      	ldr	r3, [r6, #4]
		for (uint8_t j=0; j<bank->element_list_length; j++){
    a94e:	f04f 0800 	mov.w	r8, #0
		struct grid_ui_bank* bank = &ui->bank_list[i];
    a952:	eb03 1404 	add.w	r4, r3, r4, lsl #4
			struct grid_ui_element* ele = &bank->element_list[j];
    a956:	f04f 0b64 	mov.w	fp, #100	; 0x64
		for (uint8_t j=0; j<bank->element_list_length; j++){
    a95a:	7a63      	ldrb	r3, [r4, #9]
    a95c:	fa5f f088 	uxtb.w	r0, r8
    a960:	4283      	cmp	r3, r0
    a962:	d801      	bhi.n	a968 <grid_ui_reinit+0x38>
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    a964:	3701      	adds	r7, #1
    a966:	e7e7      	b.n	a938 <grid_ui_reinit+0x8>
			struct grid_ui_element* ele = &bank->element_list[j];
    a968:	68e3      	ldr	r3, [r4, #12]
			for (uint8_t k=0; k<ele->event_list_length; k++){
    a96a:	f04f 0900 	mov.w	r9, #0
			struct grid_ui_element* ele = &bank->element_list[j];
    a96e:	fb0b 3000 	mla	r0, fp, r0, r3
				struct grid_ui_event* eve = &ele->event_list[k];
    a972:	f44f 7a86 	mov.w	sl, #268	; 0x10c
			for (uint8_t k=0; k<ele->event_list_length; k++){
    a976:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    a97a:	fa5f f589 	uxtb.w	r5, r9
    a97e:	42a9      	cmp	r1, r5
    a980:	d802      	bhi.n	a988 <grid_ui_reinit+0x58>
		for (uint8_t j=0; j<bank->element_list_length; j++){
    a982:	f108 0801 	add.w	r8, r8, #1
    a986:	e7e8      	b.n	a95a <grid_ui_reinit+0x2a>
				struct grid_ui_event* eve = &ele->event_list[k];
    a988:	6e01      	ldr	r1, [r0, #96]	; 0x60
				grid_ui_event_generate_actionstring(ele, eve->type);
    a98a:	4b07      	ldr	r3, [pc, #28]	; (a9a8 <grid_ui_reinit+0x78>)
    a98c:	9001      	str	r0, [sp, #4]
				struct grid_ui_event* eve = &ele->event_list[k];
    a98e:	fb0a 1505 	mla	r5, sl, r5, r1
				grid_ui_event_generate_actionstring(ele, eve->type);
    a992:	f109 0901 	add.w	r9, r9, #1
    a996:	7aa9      	ldrb	r1, [r5, #10]
    a998:	4798      	blx	r3
	eve->trigger = GRID_UI_STATUS_READY;
    a99a:	2204      	movs	r2, #4
    a99c:	9801      	ldr	r0, [sp, #4]
    a99e:	726a      	strb	r2, [r5, #9]
			for (uint8_t k=0; k<ele->event_list_length; k++){
    a9a0:	e7e9      	b.n	a976 <grid_ui_reinit+0x46>
    a9a2:	bf00      	nop
    a9a4:	20006fa4 	.word	0x20006fa4
    a9a8:	0000a805 	.word	0x0000a805

0000a9ac <grid_ui_smart_trigger>:
void grid_ui_smart_trigger(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    a9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a9ae:	4605      	mov	r5, r0
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a9b0:	010f      	lsls	r7, r1, #4
void grid_ui_smart_trigger(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    a9b2:	4608      	mov	r0, r1
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a9b4:	2164      	movs	r1, #100	; 0x64
    a9b6:	fb02 f401 	mul.w	r4, r2, r1
    a9ba:	686a      	ldr	r2, [r5, #4]
    a9bc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    a9c0:	4619      	mov	r1, r3
    a9c2:	68d6      	ldr	r6, [r2, #12]
    a9c4:	4b0b      	ldr	r3, [pc, #44]	; (a9f4 <grid_ui_smart_trigger+0x48>)
    a9c6:	4426      	add	r6, r4
    a9c8:	4630      	mov	r0, r6
    a9ca:	4798      	blx	r3
	if (event_index == 255){
    a9cc:	28ff      	cmp	r0, #255	; 0xff
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a9ce:	4601      	mov	r1, r0
	if (event_index == 255){
    a9d0:	d00d      	beq.n	a9ee <grid_ui_smart_trigger+0x42>
	grid_ui_event_template_action(&mod->bank_list[bank].element_list[element], event_index);
    a9d2:	9001      	str	r0, [sp, #4]
    a9d4:	4b08      	ldr	r3, [pc, #32]	; (a9f8 <grid_ui_smart_trigger+0x4c>)
    a9d6:	4630      	mov	r0, r6
    a9d8:	4798      	blx	r3
	grid_ui_event_trigger(&mod->bank_list[bank].element_list[element], event_index);
    a9da:	686b      	ldr	r3, [r5, #4]
    a9dc:	9901      	ldr	r1, [sp, #4]
    a9de:	443b      	add	r3, r7
    a9e0:	68d8      	ldr	r0, [r3, #12]
    a9e2:	4b06      	ldr	r3, [pc, #24]	; (a9fc <grid_ui_smart_trigger+0x50>)
    a9e4:	4420      	add	r0, r4
}
    a9e6:	b003      	add	sp, #12
    a9e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	grid_ui_event_trigger(&mod->bank_list[bank].element_list[element], event_index);
    a9ec:	4718      	bx	r3
}
    a9ee:	b003      	add	sp, #12
    a9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9f2:	bf00      	nop
    a9f4:	00009f55 	.word	0x00009f55
    a9f8:	0000a4ad 	.word	0x0000a4ad
    a9fc:	00009f7f 	.word	0x00009f7f

0000aa00 <grid_ui_event_register_eventstring>:
void grid_ui_event_register_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length){
    aa00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa04:	4606      	mov	r6, r0
	grid_debug_print_text("Register Action");
    aa06:	4d4f      	ldr	r5, [pc, #316]	; (ab44 <grid_ui_event_register_eventstring+0x144>)
    aa08:	484f      	ldr	r0, [pc, #316]	; (ab48 <grid_ui_event_register_eventstring+0x148>)
void grid_ui_event_register_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length){
    aa0a:	9301      	str	r3, [sp, #4]
    aa0c:	4614      	mov	r4, r2
    aa0e:	4689      	mov	r9, r1
	grid_debug_print_text("Register Action");
    aa10:	47a8      	blx	r5
	for(uint8_t i=0; i<ele->event_list_length; i++){
    aa12:	f896 705c 	ldrb.w	r7, [r6, #92]	; 0x5c
    aa16:	46aa      	mov	sl, r5
    aa18:	2200      	movs	r2, #0
	uint8_t event_index = 255;
    aa1a:	23ff      	movs	r3, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    aa1c:	f44f 7586 	mov.w	r5, #268	; 0x10c
    aa20:	b2d0      	uxtb	r0, r2
	for(uint8_t i=0; i<ele->event_list_length; i++){
    aa22:	4287      	cmp	r7, r0
    aa24:	d807      	bhi.n	aa36 <grid_ui_event_register_eventstring+0x36>
	if (event_index == 255){
    aa26:	2bff      	cmp	r3, #255	; 0xff
    aa28:	d10e      	bne.n	aa48 <grid_ui_event_register_eventstring+0x48>
		grid_debug_print_text("Event Not Found");
    aa2a:	4848      	ldr	r0, [pc, #288]	; (ab4c <grid_ui_event_register_eventstring+0x14c>)
    aa2c:	4653      	mov	r3, sl
}
    aa2e:	b003      	add	sp, #12
    aa30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		grid_debug_print_text("Event Not Found");
    aa34:	4718      	bx	r3
		if (ele->event_list[i].type == event_type){
    aa36:	6e31      	ldr	r1, [r6, #96]	; 0x60
    aa38:	fb05 1102 	mla	r1, r5, r2, r1
    aa3c:	3201      	adds	r2, #1
    aa3e:	7a89      	ldrb	r1, [r1, #10]
    aa40:	4549      	cmp	r1, r9
    aa42:	bf08      	it	eq
    aa44:	4603      	moveq	r3, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    aa46:	e7eb      	b.n	aa20 <grid_ui_event_register_eventstring+0x20>
		ele->event_list[event_index].event_string[i] = 0;
    aa48:	f44f 7886 	mov.w	r8, #268	; 0x10c
    aa4c:	fb08 f803 	mul.w	r8, r8, r3
    aa50:	6e33      	ldr	r3, [r6, #96]	; 0x60
    aa52:	4443      	add	r3, r8
    aa54:	f103 0210 	add.w	r2, r3, #16
    aa58:	4619      	mov	r1, r3
    aa5a:	f103 052e 	add.w	r5, r3, #46	; 0x2e
    aa5e:	2000      	movs	r0, #0
    aa60:	f802 0b01 	strb.w	r0, [r2], #1
	for(uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    aa64:	42aa      	cmp	r2, r5
    aa66:	d1fb      	bne.n	aa60 <grid_ui_event_register_eventstring+0x60>
	ele->event_list[event_index].event_string_length = 0;
    aa68:	60d8      	str	r0, [r3, #12]
	for(uint8_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    aa6a:	f103 0214 	add.w	r2, r3, #20
		ele->event_list[event_index].event_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    aa6e:	2000      	movs	r0, #0
    aa70:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
		ele->event_list[event_index].event_parameter_list[i].address = 0;
    aa74:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
		ele->event_list[event_index].event_parameter_list[i].group = 0;
    aa78:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
		ele->event_list[event_index].event_parameter_list[i].length = 0;
    aa7c:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
		ele->event_list[event_index].event_parameter_list[i].offset = 0;
    aa80:	f881 0033 	strb.w	r0, [r1, #51]	; 0x33
	for(uint8_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    aa84:	3105      	adds	r1, #5
    aa86:	428a      	cmp	r2, r1
    aa88:	d1f2      	bne.n	aa70 <grid_ui_event_register_eventstring+0x70>
	ele->event_list[event_index].event_parameter_count = 0;
    aa8a:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
	for (uint32_t i=0; i<event_string_length; i++){
    aa8e:	2700      	movs	r7, #0
			grid_debug_print_text(" Escaped Char Found ");
    aa90:	482f      	ldr	r0, [pc, #188]	; (ab50 <grid_ui_event_register_eventstring+0x150>)
    aa92:	3c01      	subs	r4, #1
	uint8_t parameter_list_length = 0;
    aa94:	463d      	mov	r5, r7
		if ((event_string[i-1] == 'P' || event_string[i-1] == 'B' || event_string[i-1] == 'E') && (event_string[i]-'0') < 10){
    aa96:	f04f 0b01 	mov.w	fp, #1
    aa9a:	f244 0209 	movw	r2, #16393	; 0x4009
	for (uint32_t i=0; i<event_string_length; i++){
    aa9e:	9901      	ldr	r1, [sp, #4]
    aaa0:	6e33      	ldr	r3, [r6, #96]	; 0x60
    aaa2:	428f      	cmp	r7, r1
    aaa4:	4443      	add	r3, r8
    aaa6:	d10d      	bne.n	aac4 <grid_ui_event_register_eventstring+0xc4>
	ele->event_list[event_index].event_parameter_count = parameter_list_length;
    aaa8:	f883 502e 	strb.w	r5, [r3, #46]	; 0x2e
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    aaac:	6870      	ldr	r0, [r6, #4]
	ele->event_list[event_index].event_string_length = event_string_length;
    aaae:	60df      	str	r7, [r3, #12]
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    aab0:	4c28      	ldr	r4, [pc, #160]	; (ab54 <grid_ui_event_register_eventstring+0x154>)
    aab2:	7a01      	ldrb	r1, [r0, #8]
    aab4:	7a32      	ldrb	r2, [r6, #8]
    aab6:	6840      	ldr	r0, [r0, #4]
    aab8:	464b      	mov	r3, r9
    aaba:	46a4      	mov	ip, r4
}
    aabc:	b003      	add	sp, #12
    aabe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    aac2:	4760      	bx	ip
		ele->event_list[event_index].event_string[i] = event_string[i];
    aac4:	7861      	ldrb	r1, [r4, #1]
    aac6:	443b      	add	r3, r7
    aac8:	7419      	strb	r1, [r3, #16]
		if (ele->event_list[event_index].event_string[i] > 127){
    aaca:	060b      	lsls	r3, r1, #24
    aacc:	d509      	bpl.n	aae2 <grid_ui_event_register_eventstring+0xe2>
			grid_debug_print_text(" Escaped Char Found ");
    aace:	47d0      	blx	sl
			ele->event_list[event_index].event_string[i] -= 128;
    aad0:	6e33      	ldr	r3, [r6, #96]	; 0x60
    aad2:	481f      	ldr	r0, [pc, #124]	; (ab50 <grid_ui_event_register_eventstring+0x150>)
    aad4:	4443      	add	r3, r8
    aad6:	443b      	add	r3, r7
    aad8:	f244 0209 	movw	r2, #16393	; 0x4009
    aadc:	7c19      	ldrb	r1, [r3, #16]
    aade:	3980      	subs	r1, #128	; 0x80
    aae0:	7419      	strb	r1, [r3, #16]
		if ((event_string[i-1] == 'P' || event_string[i-1] == 'B' || event_string[i-1] == 'E') && (event_string[i]-'0') < 10){
    aae2:	f894 c000 	ldrb.w	ip, [r4]
    aae6:	6e33      	ldr	r3, [r6, #96]	; 0x60
    aae8:	f1ac 0142 	sub.w	r1, ip, #66	; 0x42
    aaec:	b2c9      	uxtb	r1, r1
    aaee:	290e      	cmp	r1, #14
    aaf0:	bf9d      	ittte	ls
    aaf2:	fa22 f101 	lsrls.w	r1, r2, r1
    aaf6:	43c9      	mvnls	r1, r1
    aaf8:	f001 0101 	andls.w	r1, r1, #1
    aafc:	2101      	movhi	r1, #1
    aafe:	4443      	add	r3, r8
    ab00:	b9b9      	cbnz	r1, ab32 <grid_ui_event_register_eventstring+0x132>
    ab02:	7861      	ldrb	r1, [r4, #1]
    ab04:	2939      	cmp	r1, #57	; 0x39
    ab06:	d814      	bhi.n	ab32 <grid_ui_event_register_eventstring+0x132>
			ele->event_list[event_index].event_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    ab08:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    ab0c:	440b      	add	r3, r1
			parameter_list_length++;
    ab0e:	3501      	adds	r5, #1
			ele->event_list[event_index].event_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    ab10:	f883 b02f 	strb.w	fp, [r3, #47]	; 0x2f
			ele->event_list[event_index].event_parameter_list[parameter_list_length].group = event_string[i-1];
    ab14:	7821      	ldrb	r1, [r4, #0]
    ab16:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
			ele->event_list[event_index].event_parameter_list[parameter_list_length].address = (event_string[i]-'0');
    ab1a:	7861      	ldrb	r1, [r4, #1]
    ab1c:	3930      	subs	r1, #48	; 0x30
    ab1e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
			ele->event_list[event_index].event_parameter_list[parameter_list_length].offset = i-1;
    ab22:	1e79      	subs	r1, r7, #1
    ab24:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
			ele->event_list[event_index].event_parameter_list[parameter_list_length].length = 2;
    ab28:	2102      	movs	r1, #2
    ab2a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
			parameter_list_length++;
    ab2e:	b2ed      	uxtb	r5, r5
    ab30:	e005      	b.n	ab3e <grid_ui_event_register_eventstring+0x13e>
		else if (event_string[i-1] == 'Z' && (event_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    ab32:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
    ab36:	d102      	bne.n	ab3e <grid_ui_event_register_eventstring+0x13e>
    ab38:	7861      	ldrb	r1, [r4, #1]
    ab3a:	2935      	cmp	r1, #53	; 0x35
    ab3c:	d9e4      	bls.n	ab08 <grid_ui_event_register_eventstring+0x108>
	for (uint32_t i=0; i<event_string_length; i++){
    ab3e:	3701      	adds	r7, #1
    ab40:	3401      	adds	r4, #1
    ab42:	e7ac      	b.n	aa9e <grid_ui_event_register_eventstring+0x9e>
    ab44:	00009215 	.word	0x00009215
    ab48:	000157b4 	.word	0x000157b4
    ab4c:	000157c4 	.word	0x000157c4
    ab50:	000157d4 	.word	0x000157d4
    ab54:	0000a9ad 	.word	0x0000a9ad

0000ab58 <grid_ui_event_generate_eventstring>:
void grid_ui_event_generate_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    ab58:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ab5a:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
void grid_ui_event_generate_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    ab5e:	b089      	sub	sp, #36	; 0x24
    ab60:	4605      	mov	r5, r0
    ab62:	460c      	mov	r4, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ab64:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    ab66:	22ff      	movs	r2, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    ab68:	f44f 7786 	mov.w	r7, #268	; 0x10c
    ab6c:	b2d8      	uxtb	r0, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ab6e:	4286      	cmp	r6, r0
    ab70:	d816      	bhi.n	aba0 <grid_ui_event_generate_eventstring+0x48>
	if (event_index == 255){
    ab72:	2aff      	cmp	r2, #255	; 0xff
    ab74:	d02c      	beq.n	abd0 <grid_ui_event_generate_eventstring+0x78>
	uint8_t event_string[GRID_UI_EVENT_STRING_maxlength] = {0};	
    ab76:	4b24      	ldr	r3, [pc, #144]	; (ac08 <grid_ui_event_generate_eventstring+0xb0>)
    ab78:	2100      	movs	r1, #0
    ab7a:	221a      	movs	r2, #26
    ab7c:	a801      	add	r0, sp, #4
    ab7e:	9100      	str	r1, [sp, #0]
    ab80:	4798      	blx	r3
	if (ele->type == GRID_UI_ELEMENT_BUTTON){
    ab82:	7a6b      	ldrb	r3, [r5, #9]
    ab84:	2b02      	cmp	r3, #2
    ab86:	d129      	bne.n	abdc <grid_ui_event_generate_eventstring+0x84>
		if (event_type == GRID_UI_EVENT_INIT){
    ab88:	b99c      	cbnz	r4, abb2 <grid_ui_event_generate_eventstring+0x5a>
			sprintf(event_string, GRID_EVENTSTRING_INIT_BUT); // !!
    ab8a:	4920      	ldr	r1, [pc, #128]	; (ac0c <grid_ui_event_generate_eventstring+0xb4>)
			sprintf(event_string, GRID_EVENTSTRING_PUSHROT_ENC); // !!
    ab8c:	4b20      	ldr	r3, [pc, #128]	; (ac10 <grid_ui_event_generate_eventstring+0xb8>)
    ab8e:	4668      	mov	r0, sp
    ab90:	4798      	blx	r3
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    ab92:	4b20      	ldr	r3, [pc, #128]	; (ac14 <grid_ui_event_generate_eventstring+0xbc>)
    ab94:	4668      	mov	r0, sp
    ab96:	4798      	blx	r3
    ab98:	466a      	mov	r2, sp
    ab9a:	4603      	mov	r3, r0
    ab9c:	4621      	mov	r1, r4
    ab9e:	e014      	b.n	abca <grid_ui_event_generate_eventstring+0x72>
		if (ele->event_list[i].type == event_type){
    aba0:	6e29      	ldr	r1, [r5, #96]	; 0x60
    aba2:	fb07 1103 	mla	r1, r7, r3, r1
    aba6:	3301      	adds	r3, #1
    aba8:	7a89      	ldrb	r1, [r1, #10]
    abaa:	42a1      	cmp	r1, r4
    abac:	bf08      	it	eq
    abae:	4602      	moveq	r2, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    abb0:	e7dc      	b.n	ab6c <grid_ui_event_generate_eventstring+0x14>
		else if (event_type == GRID_UI_EVENT_DP){
    abb2:	2c04      	cmp	r4, #4
    abb4:	d10e      	bne.n	abd4 <grid_ui_event_generate_eventstring+0x7c>
			sprintf(event_string, GRID_EVENTSTRING_DP_BUT); // !!
    abb6:	4918      	ldr	r1, [pc, #96]	; (ac18 <grid_ui_event_generate_eventstring+0xc0>)
    abb8:	4b15      	ldr	r3, [pc, #84]	; (ac10 <grid_ui_event_generate_eventstring+0xb8>)
    abba:	4668      	mov	r0, sp
    abbc:	4798      	blx	r3
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    abbe:	4b15      	ldr	r3, [pc, #84]	; (ac14 <grid_ui_event_generate_eventstring+0xbc>)
    abc0:	4668      	mov	r0, sp
    abc2:	4798      	blx	r3
    abc4:	466a      	mov	r2, sp
    abc6:	4603      	mov	r3, r0
    abc8:	2104      	movs	r1, #4
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    abca:	4c14      	ldr	r4, [pc, #80]	; (ac1c <grid_ui_event_generate_eventstring+0xc4>)
    abcc:	4628      	mov	r0, r5
    abce:	47a0      	blx	r4
}
    abd0:	b009      	add	sp, #36	; 0x24
    abd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (event_type == GRID_UI_EVENT_DR){
    abd4:	2c05      	cmp	r4, #5
    abd6:	d1fb      	bne.n	abd0 <grid_ui_event_generate_eventstring+0x78>
			sprintf(event_string, GRID_EVENTSTRING_DR_BUT); // !!
    abd8:	4911      	ldr	r1, [pc, #68]	; (ac20 <grid_ui_event_generate_eventstring+0xc8>)
    abda:	e7d7      	b.n	ab8c <grid_ui_event_generate_eventstring+0x34>
	else if (ele->type == GRID_UI_ELEMENT_POTENTIOMETER){
    abdc:	2b01      	cmp	r3, #1
    abde:	d106      	bne.n	abee <grid_ui_event_generate_eventstring+0x96>
		if (event_type == GRID_UI_EVENT_INIT){
    abe0:	b90c      	cbnz	r4, abe6 <grid_ui_event_generate_eventstring+0x8e>
			sprintf(event_string, GRID_EVENTSTRING_INIT_POT); // !!
    abe2:	4910      	ldr	r1, [pc, #64]	; (ac24 <grid_ui_event_generate_eventstring+0xcc>)
    abe4:	e7d2      	b.n	ab8c <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_AVC7){
    abe6:	2c01      	cmp	r4, #1
    abe8:	d1f2      	bne.n	abd0 <grid_ui_event_generate_eventstring+0x78>
			sprintf(event_string, GRID_EVENTSTRING_AVC7_POT); // !!
    abea:	490f      	ldr	r1, [pc, #60]	; (ac28 <grid_ui_event_generate_eventstring+0xd0>)
    abec:	e7ce      	b.n	ab8c <grid_ui_event_generate_eventstring+0x34>
	else if (ele->type == GRID_UI_ELEMENT_ENCODER){
    abee:	2b03      	cmp	r3, #3
    abf0:	d1ee      	bne.n	abd0 <grid_ui_event_generate_eventstring+0x78>
		if (event_type == GRID_UI_EVENT_INIT){
    abf2:	b90c      	cbnz	r4, abf8 <grid_ui_event_generate_eventstring+0xa0>
			sprintf(event_string, GRID_EVENTSTRING_INIT_ENC); // !!
    abf4:	490d      	ldr	r1, [pc, #52]	; (ac2c <grid_ui_event_generate_eventstring+0xd4>)
    abf6:	e7c9      	b.n	ab8c <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_AVC7){
    abf8:	2c01      	cmp	r4, #1
    abfa:	d101      	bne.n	ac00 <grid_ui_event_generate_eventstring+0xa8>
			sprintf(event_string, GRID_EVENTSTRING_AVC7_ENC); // !!
    abfc:	490c      	ldr	r1, [pc, #48]	; (ac30 <grid_ui_event_generate_eventstring+0xd8>)
    abfe:	e7c5      	b.n	ab8c <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_ENCPUSHROT){
    ac00:	2c0d      	cmp	r4, #13
    ac02:	d1d6      	bne.n	abb2 <grid_ui_event_generate_eventstring+0x5a>
			sprintf(event_string, GRID_EVENTSTRING_PUSHROT_ENC); // !!
    ac04:	490b      	ldr	r1, [pc, #44]	; (ac34 <grid_ui_event_generate_eventstring+0xdc>)
    ac06:	e7c1      	b.n	ab8c <grid_ui_event_generate_eventstring+0x34>
    ac08:	00012cf5 	.word	0x00012cf5
    ac0c:	000157e9 	.word	0x000157e9
    ac10:	0001373d 	.word	0x0001373d
    ac14:	00013801 	.word	0x00013801
    ac18:	000157f8 	.word	0x000157f8
    ac1c:	0000aa01 	.word	0x0000aa01
    ac20:	00015807 	.word	0x00015807
    ac24:	00015816 	.word	0x00015816
    ac28:	00015825 	.word	0x00015825
    ac2c:	00015834 	.word	0x00015834
    ac30:	00015843 	.word	0x00015843
    ac34:	00015852 	.word	0x00015852

0000ac38 <grid_ui_event_init>:
void grid_ui_event_init(struct grid_ui_element* parent, uint8_t index, enum grid_ui_event_t event_type){
    ac38:	b570      	push	{r4, r5, r6, lr}
	struct grid_ui_event* eve = &parent->event_list[index];
    ac3a:	f44f 7386 	mov.w	r3, #268	; 0x10c
    ac3e:	6e05      	ldr	r5, [r0, #96]	; 0x60
    ac40:	434b      	muls	r3, r1
    ac42:	18ec      	adds	r4, r5, r3
void grid_ui_event_init(struct grid_ui_element* parent, uint8_t index, enum grid_ui_event_t event_type){
    ac44:	4616      	mov	r6, r2
	eve->index = index;
    ac46:	7221      	strb	r1, [r4, #8]
	eve->cfg_changed_flag = 0;
    ac48:	2200      	movs	r2, #0
	eve->status = GRID_UI_STATUS_READY;
    ac4a:	2104      	movs	r1, #4
	eve->parent = parent;
    ac4c:	6060      	str	r0, [r4, #4]
	eve->cfg_changed_flag = 0;
    ac4e:	f884 2107 	strb.w	r2, [r4, #263]	; 0x107
	eve->type   = event_type;	
    ac52:	72a6      	strb	r6, [r4, #10]
	eve->status = GRID_UI_STATUS_READY;
    ac54:	54e9      	strb	r1, [r5, r3]
	for (uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    ac56:	f104 0110 	add.w	r1, r4, #16
    ac5a:	4623      	mov	r3, r4
    ac5c:	f104 052e 	add.w	r5, r4, #46	; 0x2e
		eve->event_string[i] = 0;
    ac60:	f801 2b01 	strb.w	r2, [r1], #1
	for (uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    ac64:	42a9      	cmp	r1, r5
    ac66:	d1fb      	bne.n	ac60 <grid_ui_event_init+0x28>
	eve->event_string_length = 0;
    ac68:	60e2      	str	r2, [r4, #12]
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    ac6a:	f104 0148 	add.w	r1, r4, #72	; 0x48
    ac6e:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
		eve->action_string[i] = 0;
    ac72:	2200      	movs	r2, #0
    ac74:	f801 2b01 	strb.w	r2, [r1], #1
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    ac78:	42a9      	cmp	r1, r5
    ac7a:	d1fb      	bne.n	ac74 <grid_ui_event_init+0x3c>
	eve->action_string_length = 0;
    ac7c:	6462      	str	r2, [r4, #68]	; 0x44
	eve->event_parameter_count = 0;
    ac7e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	for (uint32_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    ac82:	f104 0114 	add.w	r1, r4, #20
	eve->event_parameter_count = 0;
    ac86:	4625      	mov	r5, r4
		eve->event_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    ac88:	2200      	movs	r2, #0
    ac8a:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
		eve->event_parameter_list[i].address = 0;
    ac8e:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
		eve->event_parameter_list[i].offset = 0;
    ac92:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
		eve->event_parameter_list[i].length = 0;
    ac96:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
	for (uint32_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    ac9a:	3505      	adds	r5, #5
    ac9c:	428d      	cmp	r5, r1
    ac9e:	d1f4      	bne.n	ac8a <grid_ui_event_init+0x52>
	eve->action_parameter_count = 0;
    aca0:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		eve->action_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    aca4:	2500      	movs	r5, #0
    aca6:	f104 0246 	add.w	r2, r4, #70	; 0x46
    acaa:	f883 50c1 	strb.w	r5, [r3, #193]	; 0xc1
		eve->action_parameter_list[i].address = 0;
    acae:	f883 50c3 	strb.w	r5, [r3, #195]	; 0xc3
		eve->action_parameter_list[i].offset = 0;
    acb2:	f883 50c5 	strb.w	r5, [r3, #197]	; 0xc5
		eve->action_parameter_list[i].length = 0;
    acb6:	f883 50c4 	strb.w	r5, [r3, #196]	; 0xc4
	for (uint32_t i=0; i<GRID_UI_ACTION_PARAMETER_maxcount; i++){
    acba:	3305      	adds	r3, #5
    acbc:	429a      	cmp	r2, r3
    acbe:	d1f4      	bne.n	acaa <grid_ui_event_init+0x72>
	grid_ui_event_generate_eventstring(eve->parent, event_type);
    acc0:	4b06      	ldr	r3, [pc, #24]	; (acdc <grid_ui_event_init+0xa4>)
    acc2:	4631      	mov	r1, r6
    acc4:	4798      	blx	r3
	grid_ui_event_generate_actionstring(eve->parent, event_type);	
    acc6:	4b06      	ldr	r3, [pc, #24]	; (ace0 <grid_ui_event_init+0xa8>)
    acc8:	6860      	ldr	r0, [r4, #4]
    acca:	4631      	mov	r1, r6
    accc:	4798      	blx	r3
	eve->cfg_default_flag = 1;
    acce:	f240 1301 	movw	r3, #257	; 0x101
	eve->cfg_changed_flag = 0;
    acd2:	f884 5107 	strb.w	r5, [r4, #263]	; 0x107
	eve->cfg_default_flag = 1;
    acd6:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
}
    acda:	bd70      	pop	{r4, r5, r6, pc}
    acdc:	0000ab59 	.word	0x0000ab59
    ace0:	0000a805 	.word	0x0000a805

0000ace4 <grid_ui_element_init>:
void grid_ui_element_init(struct grid_ui_bank* parent, uint8_t index, enum grid_ui_element_t element_type){
    ace4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct grid_ui_element* ele = &parent->element_list[index];
    ace8:	2364      	movs	r3, #100	; 0x64
void grid_ui_element_init(struct grid_ui_bank* parent, uint8_t index, enum grid_ui_element_t element_type){
    acea:	4615      	mov	r5, r2
	struct grid_ui_element* ele = &parent->element_list[index];
    acec:	68c2      	ldr	r2, [r0, #12]
    acee:	fb11 f303 	smulbb	r3, r1, r3
    acf2:	18d4      	adds	r4, r2, r3
	ele->index = index;
    acf4:	7221      	strb	r1, [r4, #8]
	ele->status = GRID_UI_STATUS_INITIALIZED;
    acf6:	2101      	movs	r1, #1
	ele->parent = parent;
    acf8:	6060      	str	r0, [r4, #4]
	ele->status = GRID_UI_STATUS_INITIALIZED;
    acfa:	54d1      	strb	r1, [r2, r3]
	ele->type = element_type;
    acfc:	7265      	strb	r5, [r4, #9]
	for(uint8_t i=0; i<GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH; i++){
    acfe:	f104 030c 	add.w	r3, r4, #12
    ad02:	f104 025c 	add.w	r2, r4, #92	; 0x5c
		ele->template_parameter_list[i] = 0;
    ad06:	2100      	movs	r1, #0
    ad08:	f843 1b04 	str.w	r1, [r3], #4
	for(uint8_t i=0; i<GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH; i++){
    ad0c:	429a      	cmp	r2, r3
    ad0e:	d1fb      	bne.n	ad08 <grid_ui_element_init+0x24>
	if (element_type == GRID_UI_ELEMENT_SYSTEM){
    ad10:	bb1d      	cbnz	r5, ad5a <grid_ui_element_init+0x76>
		ele->event_list_length = 6;
    ad12:	2306      	movs	r3, #6
    ad14:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ad18:	f44f 60c9 	mov.w	r0, #1608	; 0x648
    ad1c:	4b34      	ldr	r3, [pc, #208]	; (adf0 <grid_ui_element_init+0x10c>)
    ad1e:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ad20:	462a      	mov	r2, r5
    ad22:	4629      	mov	r1, r5
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ad24:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ad26:	4d33      	ldr	r5, [pc, #204]	; (adf4 <grid_ui_element_init+0x110>)
    ad28:	4620      	mov	r0, r4
    ad2a:	47a8      	blx	r5
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_HEARTBEAT); // Heartbeat
    ad2c:	220c      	movs	r2, #12
    ad2e:	2101      	movs	r1, #1
    ad30:	4620      	mov	r0, r4
    ad32:	47a8      	blx	r5
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_MAPMODE_PRESS); // Mapmode press
    ad34:	2207      	movs	r2, #7
    ad36:	2102      	movs	r1, #2
    ad38:	4620      	mov	r0, r4
    ad3a:	47a8      	blx	r5
		grid_ui_event_init(ele, 3, GRID_UI_EVENT_MAPMODE_RELEASE); // Mapmode release
    ad3c:	2208      	movs	r2, #8
    ad3e:	2103      	movs	r1, #3
    ad40:	4620      	mov	r0, r4
    ad42:	47a8      	blx	r5
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_CFG_RESPONSE); //
    ad44:	2209      	movs	r2, #9
    ad46:	2104      	movs	r1, #4
    ad48:	4620      	mov	r0, r4
    ad4a:	47a8      	blx	r5
		grid_ui_event_init(ele, 5, GRID_UI_EVENT_CFG_REQUEST); //
    ad4c:	220a      	movs	r2, #10
    ad4e:	2105      	movs	r1, #5
    ad50:	4620      	mov	r0, r4
    ad52:	462b      	mov	r3, r5
}
    ad54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    ad58:	4718      	bx	r3
	else if (element_type == GRID_UI_ELEMENT_POTENTIOMETER){
    ad5a:	2d01      	cmp	r5, #1
    ad5c:	d111      	bne.n	ad82 <grid_ui_element_init+0x9e>
		ele->event_list_length = 2;
    ad5e:	2302      	movs	r3, #2
    ad60:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ad64:	f44f 7006 	mov.w	r0, #536	; 0x218
    ad68:	4b21      	ldr	r3, [pc, #132]	; (adf0 <grid_ui_element_init+0x10c>)
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ad6a:	4e22      	ldr	r6, [pc, #136]	; (adf4 <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ad6c:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ad6e:	2200      	movs	r2, #0
    ad70:	4611      	mov	r1, r2
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ad72:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ad74:	4620      	mov	r0, r4
    ad76:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    ad78:	462a      	mov	r2, r5
    ad7a:	4629      	mov	r1, r5
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    ad7c:	4620      	mov	r0, r4
    ad7e:	4633      	mov	r3, r6
    ad80:	e7e8      	b.n	ad54 <grid_ui_element_init+0x70>
	else if (element_type == GRID_UI_ELEMENT_BUTTON){
    ad82:	2d02      	cmp	r5, #2
    ad84:	d113      	bne.n	adae <grid_ui_element_init+0xca>
		ele->event_list_length = 3;
    ad86:	2303      	movs	r3, #3
    ad88:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ad8c:	f44f 7049 	mov.w	r0, #804	; 0x324
    ad90:	4b17      	ldr	r3, [pc, #92]	; (adf0 <grid_ui_element_init+0x10c>)
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ad92:	4e18      	ldr	r6, [pc, #96]	; (adf4 <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ad94:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ad96:	2200      	movs	r2, #0
    ad98:	4611      	mov	r1, r2
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ad9a:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ad9c:	4620      	mov	r0, r4
    ad9e:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_DP);	// Press
    ada0:	2204      	movs	r2, #4
    ada2:	2101      	movs	r1, #1
    ada4:	4620      	mov	r0, r4
    ada6:	47b0      	blx	r6
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_DR);	// Release
    ada8:	2205      	movs	r2, #5
    adaa:	4629      	mov	r1, r5
    adac:	e7e6      	b.n	ad7c <grid_ui_element_init+0x98>
	else if (element_type == GRID_UI_ELEMENT_ENCODER){
    adae:	2d03      	cmp	r5, #3
    adb0:	d11b      	bne.n	adea <grid_ui_element_init+0x106>
		ele->event_list_length = 5;
    adb2:	2705      	movs	r7, #5
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    adb4:	4b0e      	ldr	r3, [pc, #56]	; (adf0 <grid_ui_element_init+0x10c>)
		ele->event_list_length = 5;
    adb6:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    adba:	f240 503c 	movw	r0, #1340	; 0x53c
    adbe:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    adc0:	2200      	movs	r2, #0
    adc2:	4e0c      	ldr	r6, [pc, #48]	; (adf4 <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    adc4:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    adc6:	4611      	mov	r1, r2
    adc8:	4620      	mov	r0, r4
    adca:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_DP);	// Press
    adcc:	2204      	movs	r2, #4
    adce:	2101      	movs	r1, #1
    add0:	4620      	mov	r0, r4
    add2:	47b0      	blx	r6
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_DR);	// Release
    add4:	463a      	mov	r2, r7
    add6:	2102      	movs	r1, #2
    add8:	4620      	mov	r0, r4
    adda:	47b0      	blx	r6
		grid_ui_event_init(ele, 3, GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    addc:	2201      	movs	r2, #1
    adde:	4629      	mov	r1, r5
    ade0:	4620      	mov	r0, r4
    ade2:	47b0      	blx	r6
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    ade4:	220d      	movs	r2, #13
    ade6:	2104      	movs	r1, #4
    ade8:	e7c8      	b.n	ad7c <grid_ui_element_init+0x98>
}
    adea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    adee:	bf00      	nop
    adf0:	00012ba1 	.word	0x00012ba1
    adf4:	0000ac39 	.word	0x0000ac39

0000adf8 <grid_ui_smart_trigger_local>:
void grid_ui_smart_trigger_local(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    adf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    adfa:	4605      	mov	r5, r0
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    adfc:	010f      	lsls	r7, r1, #4
void grid_ui_smart_trigger_local(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    adfe:	4608      	mov	r0, r1
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    ae00:	2164      	movs	r1, #100	; 0x64
    ae02:	fb02 f401 	mul.w	r4, r2, r1
    ae06:	686a      	ldr	r2, [r5, #4]
    ae08:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    ae0c:	4619      	mov	r1, r3
    ae0e:	68d6      	ldr	r6, [r2, #12]
    ae10:	4b0b      	ldr	r3, [pc, #44]	; (ae40 <grid_ui_smart_trigger_local+0x48>)
    ae12:	4426      	add	r6, r4
    ae14:	4630      	mov	r0, r6
    ae16:	4798      	blx	r3
	if (event_index == 255){
    ae18:	28ff      	cmp	r0, #255	; 0xff
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    ae1a:	4601      	mov	r1, r0
	if (event_index == 255){
    ae1c:	d00d      	beq.n	ae3a <grid_ui_smart_trigger_local+0x42>
	grid_ui_event_template_action(&mod->bank_list[bank].element_list[element], event_index);
    ae1e:	9001      	str	r0, [sp, #4]
    ae20:	4b08      	ldr	r3, [pc, #32]	; (ae44 <grid_ui_smart_trigger_local+0x4c>)
    ae22:	4630      	mov	r0, r6
    ae24:	4798      	blx	r3
    grid_ui_event_trigger_local(&mod->bank_list[bank].element_list[element], event_index);
    ae26:	686b      	ldr	r3, [r5, #4]
    ae28:	9901      	ldr	r1, [sp, #4]
    ae2a:	443b      	add	r3, r7
    ae2c:	68d8      	ldr	r0, [r3, #12]
    ae2e:	4b06      	ldr	r3, [pc, #24]	; (ae48 <grid_ui_smart_trigger_local+0x50>)
    ae30:	4420      	add	r0, r4
}
    ae32:	b003      	add	sp, #12
    ae34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    grid_ui_event_trigger_local(&mod->bank_list[bank].element_list[element], event_index);
    ae38:	4718      	bx	r3
}
    ae3a:	b003      	add	sp, #12
    ae3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae3e:	bf00      	nop
    ae40:	00009f55 	.word	0x00009f55
    ae44:	0000a4ad 	.word	0x0000a4ad
    ae48:	00009f93 	.word	0x00009f93

0000ae4c <grid_ui_reinit_local>:
void grid_ui_reinit_local(struct grid_ui_model* ui){
    ae4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae50:	4604      	mov	r4, r0
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    ae52:	f04f 0800 	mov.w	r8, #0
    ae56:	7863      	ldrb	r3, [r4, #1]
    ae58:	fa5f f788 	uxtb.w	r7, r8
    ae5c:	42bb      	cmp	r3, r7
    ae5e:	d805      	bhi.n	ae6c <grid_ui_reinit_local+0x20>
	grid_sys_state.bank_active_changed = 1;
    ae60:	4b1d      	ldr	r3, [pc, #116]	; (aed8 <grid_ui_reinit_local+0x8c>)
    ae62:	2201      	movs	r2, #1
    ae64:	745a      	strb	r2, [r3, #17]
}
    ae66:	b003      	add	sp, #12
    ae68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct grid_ui_bank* bank = &ui->bank_list[i];
    ae6c:	6866      	ldr	r6, [r4, #4]
    ae6e:	eb06 1307 	add.w	r3, r6, r7, lsl #4
    ae72:	9300      	str	r3, [sp, #0]
		for (uint8_t j=0; j<bank->element_list_length; j++){
    ae74:	f04f 0900 	mov.w	r9, #0
    ae78:	9b00      	ldr	r3, [sp, #0]
    ae7a:	7a5b      	ldrb	r3, [r3, #9]
    ae7c:	fa5f fb89 	uxtb.w	fp, r9
    ae80:	455b      	cmp	r3, fp
    ae82:	d802      	bhi.n	ae8a <grid_ui_reinit_local+0x3e>
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    ae84:	f108 0801 	add.w	r8, r8, #1
    ae88:	e7e5      	b.n	ae56 <grid_ui_reinit_local+0xa>
			struct grid_ui_element* ele = &bank->element_list[j];
    ae8a:	9b00      	ldr	r3, [sp, #0]
    ae8c:	68db      	ldr	r3, [r3, #12]
    ae8e:	2564      	movs	r5, #100	; 0x64
    ae90:	fb05 350b 	mla	r5, r5, fp, r3
			for (uint8_t k=0; k<ele->event_list_length; k++){
    ae94:	f04f 0a00 	mov.w	sl, #0
    ae98:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    ae9c:	fa5f f38a 	uxtb.w	r3, sl
    aea0:	4299      	cmp	r1, r3
    aea2:	d802      	bhi.n	aeaa <grid_ui_reinit_local+0x5e>
		for (uint8_t j=0; j<bank->element_list_length; j++){
    aea4:	f109 0901 	add.w	r9, r9, #1
    aea8:	e7e6      	b.n	ae78 <grid_ui_reinit_local+0x2c>
				struct grid_ui_event* eve = &ele->event_list[k];
    aeaa:	6e29      	ldr	r1, [r5, #96]	; 0x60
                grid_ui_smart_trigger_local(ui, i, j, eve->type);
    aeac:	4e0b      	ldr	r6, [pc, #44]	; (aedc <grid_ui_reinit_local+0x90>)
				struct grid_ui_event* eve = &ele->event_list[k];
    aeae:	f44f 7286 	mov.w	r2, #268	; 0x10c
    aeb2:	fb02 1303 	mla	r3, r2, r3, r1
				grid_ui_event_generate_actionstring(ele, eve->type);
    aeb6:	9301      	str	r3, [sp, #4]
    aeb8:	7a99      	ldrb	r1, [r3, #10]
    aeba:	4b09      	ldr	r3, [pc, #36]	; (aee0 <grid_ui_reinit_local+0x94>)
    aebc:	4628      	mov	r0, r5
    aebe:	4798      	blx	r3
	eve->trigger = GRID_UI_STATUS_READY;
    aec0:	9b01      	ldr	r3, [sp, #4]
    aec2:	2104      	movs	r1, #4
    aec4:	7259      	strb	r1, [r3, #9]
                grid_ui_smart_trigger_local(ui, i, j, eve->type);
    aec6:	465a      	mov	r2, fp
    aec8:	7a9b      	ldrb	r3, [r3, #10]
    aeca:	4639      	mov	r1, r7
    aecc:	4620      	mov	r0, r4
    aece:	47b0      	blx	r6
			for (uint8_t k=0; k<ele->event_list_length; k++){
    aed0:	f10a 0a01 	add.w	sl, sl, #1
    aed4:	e7e0      	b.n	ae98 <grid_ui_reinit_local+0x4c>
    aed6:	bf00      	nop
    aed8:	20006fa4 	.word	0x20006fa4
    aedc:	0000adf9 	.word	0x0000adf9
    aee0:	0000a805 	.word	0x0000a805

0000aee4 <grid_usb_serial_bulkout_cb>:
	//grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	
	//cdcdf_acm_write(cdcdf_demo_buf, count); /* Echo data */
	return false;                           /* No error. */
}
    aee4:	2000      	movs	r0, #0
    aee6:	4770      	bx	lr

0000aee8 <grid_usb_serial_statechange_cb>:

//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS); /* Another read */
	return false;                                                                                 /* No error. */
}
static bool grid_usb_serial_statechange_cb(usb_cdc_control_signal_t state)
{
    aee8:	b513      	push	{r0, r1, r4, lr}
	
	//grid_sys_alert_set_alert(&grid_sys_state, 0,255,255,2,300);
	
	if (state.rs232.DTR || 1) {
		/* After connection the R/W callbacks can be registered */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)grid_usb_serial_bulkout_cb);
    aeea:	4c06      	ldr	r4, [pc, #24]	; (af04 <grid_usb_serial_statechange_cb+0x1c>)
{
    aeec:	f8ad 0004 	strh.w	r0, [sp, #4]
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)grid_usb_serial_bulkout_cb);
    aef0:	4905      	ldr	r1, [pc, #20]	; (af08 <grid_usb_serial_statechange_cb+0x20>)
    aef2:	2000      	movs	r0, #0
    aef4:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)grid_usb_serial_bulkin_cb);
    aef6:	4905      	ldr	r1, [pc, #20]	; (af0c <grid_usb_serial_statechange_cb+0x24>)
    aef8:	2001      	movs	r0, #1
    aefa:	47a0      	blx	r4
		/* Start Rx */
		//cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	}
	return false; /* No error. */
}
    aefc:	2000      	movs	r0, #0
    aefe:	b002      	add	sp, #8
    af00:	bd10      	pop	{r4, pc}
    af02:	bf00      	nop
    af04:	0000bab9 	.word	0x0000bab9
    af08:	0000aee5 	.word	0x0000aee5
    af0c:	0000af61 	.word	0x0000af61

0000af10 <grid_usb_midi_bulkin_cb>:

	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
	return false;
}
static bool grid_usb_midi_bulkin_cb(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    af10:	b513      	push	{r0, r1, r4, lr}

	grid_sys_alert_set_alert(&grid_sys_state, 255,0,255,2,300);
    af12:	2302      	movs	r3, #2
    af14:	f44f 7296 	mov.w	r2, #300	; 0x12c
    af18:	e9cd 3200 	strd	r3, r2, [sp]
    af1c:	23ff      	movs	r3, #255	; 0xff
    af1e:	4804      	ldr	r0, [pc, #16]	; (af30 <grid_usb_midi_bulkin_cb+0x20>)
    af20:	4c04      	ldr	r4, [pc, #16]	; (af34 <grid_usb_midi_bulkin_cb+0x24>)
    af22:	2200      	movs	r2, #0
    af24:	4619      	mov	r1, r3
    af26:	47a0      	blx	r4
	return false;
}
    af28:	2000      	movs	r0, #0
    af2a:	b002      	add	sp, #8
    af2c:	bd10      	pop	{r4, pc}
    af2e:	bf00      	nop
    af30:	20006fa4 	.word	0x20006fa4
    af34:	000097ab 	.word	0x000097ab

0000af38 <grid_usb_midi_bulkout_cb>:
{
    af38:	b513      	push	{r0, r1, r4, lr}
	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
    af3a:	2302      	movs	r3, #2
    af3c:	f44f 7296 	mov.w	r2, #300	; 0x12c
    af40:	e9cd 3200 	strd	r3, r2, [sp]
    af44:	22ff      	movs	r2, #255	; 0xff
    af46:	4804      	ldr	r0, [pc, #16]	; (af58 <grid_usb_midi_bulkout_cb+0x20>)
    af48:	4c04      	ldr	r4, [pc, #16]	; (af5c <grid_usb_midi_bulkout_cb+0x24>)
    af4a:	2300      	movs	r3, #0
    af4c:	4611      	mov	r1, r2
    af4e:	47a0      	blx	r4
}
    af50:	2000      	movs	r0, #0
    af52:	b002      	add	sp, #8
    af54:	bd10      	pop	{r4, pc}
    af56:	bf00      	nop
    af58:	20006fa4 	.word	0x20006fa4
    af5c:	000097ab 	.word	0x000097ab

0000af60 <grid_usb_serial_bulkin_cb>:
    af60:	2000      	movs	r0, #0
    af62:	4770      	bx	lr

0000af64 <grid_usb_serial_init>:
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)grid_usb_serial_statechange_cb);
    af64:	4901      	ldr	r1, [pc, #4]	; (af6c <grid_usb_serial_init+0x8>)
    af66:	4b02      	ldr	r3, [pc, #8]	; (af70 <grid_usb_serial_init+0xc>)
    af68:	2003      	movs	r0, #3
    af6a:	4718      	bx	r3
    af6c:	0000aee9 	.word	0x0000aee9
    af70:	0000bab9 	.word	0x0000bab9

0000af74 <grid_keyboard_cleanup>:
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
	
	uint8_t changed_flag = 0;
	
	// Remove all inactive (released) keys
	for(uint8_t i=0; i<kb->key_active_count; i++){
    af74:	2300      	movs	r3, #0
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
    af76:	b5f0      	push	{r4, r5, r6, r7, lr}
			
			changed_flag = 1;
			
			kb->key_list[i].ismodifier = 0;
			kb->key_list[i].ispressed = 0;
			kb->key_list[i].keycode = 255;	
    af78:	f04f 0cff 	mov.w	ip, #255	; 0xff
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
    af7c:	4604      	mov	r4, r0
			// Pop item, move each remaining after this forvard one index
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
				
				kb->key_list[j-1] = kb->key_list[j];
				
				kb->key_list[j].ismodifier = 0;
    af7e:	469e      	mov	lr, r3
	uint8_t changed_flag = 0;
    af80:	4618      	mov	r0, r3
	for(uint8_t i=0; i<kb->key_active_count; i++){
    af82:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
    af86:	429d      	cmp	r5, r3
    af88:	d800      	bhi.n	af8c <grid_keyboard_cleanup+0x18>
		// USB SEND
	}
	
	return changed_flag;
	
}
    af8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (kb->key_list[i].ispressed == false){
    af8c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    af90:	7d8f      	ldrb	r7, [r1, #22]
    af92:	b98f      	cbnz	r7, afb8 <grid_keyboard_cleanup+0x44>
    af94:	1c5a      	adds	r2, r3, #1
    af96:	b2d6      	uxtb	r6, r2
			kb->key_list[i].ismodifier = 0;
    af98:	754f      	strb	r7, [r1, #21]
			kb->key_list[i].ispressed = 0;
    af9a:	758f      	strb	r7, [r1, #22]
			kb->key_list[i].keycode = 255;	
    af9c:	f881 c014 	strb.w	ip, [r1, #20]
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    afa0:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    afa4:	42b5      	cmp	r5, r6
    afa6:	f102 0208 	add.w	r2, r2, #8
    afaa:	d108      	bne.n	afbe <grid_keyboard_cleanup+0x4a>
			kb->key_active_count--;
    afac:	3d01      	subs	r5, #1
			i--; // Retest this index, because it now points to a new item
    afae:	3b01      	subs	r3, #1
			kb->key_active_count--;
    afb0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
			i--; // Retest this index, because it now points to a new item
    afb4:	b2db      	uxtb	r3, r3
			changed_flag = 1;
    afb6:	2001      	movs	r0, #1
	for(uint8_t i=0; i<kb->key_active_count; i++){
    afb8:	3301      	adds	r3, #1
    afba:	b2db      	uxtb	r3, r3
    afbc:	e7e1      	b.n	af82 <grid_keyboard_cleanup+0xe>
				kb->key_list[j-1] = kb->key_list[j];
    afbe:	e9d2 0103 	ldrd	r0, r1, [r2, #12]
    afc2:	1d17      	adds	r7, r2, #4
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    afc4:	3601      	adds	r6, #1
				kb->key_list[j-1] = kb->key_list[j];
    afc6:	e887 0003 	stmia.w	r7, {r0, r1}
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    afca:	b2f6      	uxtb	r6, r6
				kb->key_list[j].ismodifier = 0;
    afcc:	f882 e00d 	strb.w	lr, [r2, #13]
				kb->key_list[j].ispressed = 0;
    afd0:	f882 e00e 	strb.w	lr, [r2, #14]
				kb->key_list[j].keycode = 255;
    afd4:	f882 c00c 	strb.w	ip, [r2, #12]
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    afd8:	e7e4      	b.n	afa4 <grid_keyboard_cleanup+0x30>
	...

0000afdc <grid_keyboard_keychange>:


uint8_t grid_keyboard_keychange(struct grid_keyboard_model* kb, struct grid_keyboard_event_desc* key){
    afdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    afe0:	4604      	mov	r4, r0
	uint8_t item_index = 255;
	uint8_t remove_flag = 0;
	uint8_t changed_flag = 0;
	

	grid_keyboard_cleanup(kb);
    afe2:	f8df 814c 	ldr.w	r8, [pc, #332]	; b130 <grid_keyboard_keychange+0x154>
uint8_t grid_keyboard_keychange(struct grid_keyboard_model* kb, struct grid_keyboard_event_desc* key){
    afe6:	b0ec      	sub	sp, #432	; 0x1b0
    afe8:	460d      	mov	r5, r1
	grid_keyboard_cleanup(kb);
    afea:	47c0      	blx	r8
	

	for(uint8_t i=0; i<kb->key_active_count; i++){
    afec:	2200      	movs	r2, #0
    afee:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    aff2:	4626      	mov	r6, r4
    aff4:	4623      	mov	r3, r4
	uint8_t changed_flag = 0;
    aff6:	4691      	mov	r9, r2
	uint8_t item_index = 255;
    aff8:	27ff      	movs	r7, #255	; 0xff
				if (key->ispressed == true){
					// OK nothing to do here
				}
				else{
					// Release the damn key
					kb->key_list[i].ispressed = false;
    affa:	4696      	mov	lr, r2
    affc:	b2d1      	uxtb	r1, r2
	for(uint8_t i=0; i<kb->key_active_count; i++){
    affe:	458c      	cmp	ip, r1
    b000:	d82e      	bhi.n	b060 <grid_keyboard_keychange+0x84>
		}
		
	}
	
	
	uint8_t print_happened = grid_keyboard_cleanup(kb);
    b002:	4620      	mov	r0, r4
    b004:	47c0      	blx	r8
	
	
	if (item_index == 255){
    b006:	2fff      	cmp	r7, #255	; 0xff
    b008:	d143      	bne.n	b092 <grid_keyboard_keychange+0xb6>
		
		// item not in list
		
		if (kb->key_active_count< GRID_KEYBOARD_KEY_maxcount){
    b00a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    b00e:	2b05      	cmp	r3, #5
    b010:	d83f      	bhi.n	b092 <grid_keyboard_keychange+0xb6>
			
			if (key->ispressed == true){
    b012:	78aa      	ldrb	r2, [r5, #2]
    b014:	2a01      	cmp	r2, #1
    b016:	d13c      	bne.n	b092 <grid_keyboard_keychange+0xb6>
				
				kb->key_list[kb->key_active_count] = *key;
    b018:	e895 0003 	ldmia.w	r5, {r0, r1}
    b01c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b020:	3214      	adds	r2, #20
				kb->key_active_count++;
    b022:	3301      	adds	r3, #1
				kb->key_list[kb->key_active_count] = *key;
    b024:	e882 0003 	stmia.w	r2, {r0, r1}
				kb->key_active_count++;
    b028:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		}
		
	}
	
	
	if (changed_flag == 1){
    b02c:	f104 0112 	add.w	r1, r4, #18
	uint8_t item_index = 255;
    b030:	4623      	mov	r3, r4
//		}
			
		
		for(uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++){
		
			kb->hid_key_array[i].b_modifier = kb->key_list[i].ismodifier;
    b032:	7d72      	ldrb	r2, [r6, #21]
    b034:	3a00      	subs	r2, #0
    b036:	bf18      	it	ne
    b038:	2201      	movne	r2, #1
    b03a:	705a      	strb	r2, [r3, #1]
			kb->hid_key_array[i].key_id = kb->key_list[i].keycode;
    b03c:	7d32      	ldrb	r2, [r6, #20]
    b03e:	701a      	strb	r2, [r3, #0]
			kb->hid_key_array[i].state = kb->key_list[i].ispressed;
    b040:	7db2      	ldrb	r2, [r6, #22]
    b042:	709a      	strb	r2, [r3, #2]
		for(uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++){
    b044:	3303      	adds	r3, #3
    b046:	428b      	cmp	r3, r1
    b048:	f106 0608 	add.w	r6, r6, #8
    b04c:	d1f1      	bne.n	b032 <grid_keyboard_keychange+0x56>
		
		}
        
        
        if (kb->isenabled){
    b04e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    b052:	b325      	cbz	r5, b09e <grid_keyboard_keychange+0xc2>
            
            
    		hiddf_keyboard_keys_state_change(kb->hid_key_array, kb->key_active_count);    
    b054:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    b058:	4b2b      	ldr	r3, [pc, #172]	; (b108 <grid_keyboard_keychange+0x12c>)
    b05a:	4620      	mov	r0, r4
    b05c:	4798      	blx	r3
    b05e:	e01b      	b.n	b098 <grid_keyboard_keychange+0xbc>
		if (kb->key_list[i].keycode == key->keycode && kb->key_list[i].ismodifier == key->ismodifier){
    b060:	f893 a014 	ldrb.w	sl, [r3, #20]
    b064:	7828      	ldrb	r0, [r5, #0]
    b066:	4582      	cmp	sl, r0
    b068:	d111      	bne.n	b08e <grid_keyboard_keychange+0xb2>
    b06a:	f893 a015 	ldrb.w	sl, [r3, #21]
    b06e:	7868      	ldrb	r0, [r5, #1]
    b070:	4582      	cmp	sl, r0
    b072:	d10c      	bne.n	b08e <grid_keyboard_keychange+0xb2>
			if (kb->key_list[i].ispressed == true){
    b074:	7d98      	ldrb	r0, [r3, #22]
    b076:	2801      	cmp	r0, #1
    b078:	d105      	bne.n	b086 <grid_keyboard_keychange+0xaa>
				if (key->ispressed == true){
    b07a:	78af      	ldrb	r7, [r5, #2]
    b07c:	2f01      	cmp	r7, #1
    b07e:	d002      	beq.n	b086 <grid_keyboard_keychange+0xaa>
					kb->key_list[i].ispressed = false;
    b080:	f883 e016 	strb.w	lr, [r3, #22]
					changed_flag = 1;
    b084:	4681      	mov	r9, r0
	for(uint8_t i=0; i<kb->key_active_count; i++){
    b086:	3201      	adds	r2, #1
    b088:	3308      	adds	r3, #8
	uint8_t item_index = 255;
    b08a:	460f      	mov	r7, r1
    b08c:	e7b6      	b.n	affc <grid_keyboard_keychange+0x20>
    b08e:	4639      	mov	r1, r7
    b090:	e7f9      	b.n	b086 <grid_keyboard_keychange+0xaa>
	if (changed_flag == 1){
    b092:	f1b9 0f00 	cmp.w	r9, #0
    b096:	d1c9      	bne.n	b02c <grid_keyboard_keychange+0x50>
		
		
		// USB SEND
	}
	
}
    b098:	b06c      	add	sp, #432	; 0x1b0
    b09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            grid_msg_init(&response);
    b09e:	a805      	add	r0, sp, #20
    b0a0:	4b1a      	ldr	r3, [pc, #104]	; (b10c <grid_keyboard_keychange+0x130>)
            grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    b0a2:	4e1b      	ldr	r6, [pc, #108]	; (b110 <grid_keyboard_keychange+0x134>)
            grid_msg_init(&response);
    b0a4:	4798      	blx	r3
            grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    b0a6:	227f      	movs	r2, #127	; 0x7f
    b0a8:	462b      	mov	r3, r5
    b0aa:	4611      	mov	r1, r2
    b0ac:	a805      	add	r0, sp, #20
    b0ae:	47b0      	blx	r6
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    b0b0:	2303      	movs	r3, #3
    b0b2:	4918      	ldr	r1, [pc, #96]	; (b114 <grid_keyboard_keychange+0x138>)
    b0b4:	9300      	str	r3, [sp, #0]
    b0b6:	2202      	movs	r2, #2
    b0b8:	4e17      	ldr	r6, [pc, #92]	; (b118 <grid_keyboard_keychange+0x13c>)
            uint8_t response_payload[10] = {0};
    b0ba:	f8ad 5010 	strh.w	r5, [sp, #16]
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    b0be:	2392      	movs	r3, #146	; 0x92
    b0c0:	a802      	add	r0, sp, #8
            uint8_t response_payload[10] = {0};
    b0c2:	e9cd 5502 	strd	r5, r5, [sp, #8]
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    b0c6:	47b0      	blx	r6
            grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    b0c8:	4b14      	ldr	r3, [pc, #80]	; (b11c <grid_keyboard_keychange+0x140>)
    b0ca:	a802      	add	r0, sp, #8
    b0cc:	4798      	blx	r3
    b0ce:	a902      	add	r1, sp, #8
    b0d0:	4602      	mov	r2, r0
    b0d2:	4b13      	ldr	r3, [pc, #76]	; (b120 <grid_keyboard_keychange+0x144>)
    b0d4:	a805      	add	r0, sp, #20
    b0d6:	4798      	blx	r3
            grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, kb->isenabled);
    b0d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    b0dc:	9300      	str	r3, [sp, #0]
    b0de:	4c11      	ldr	r4, [pc, #68]	; (b124 <grid_keyboard_keychange+0x148>)
    b0e0:	4629      	mov	r1, r5
    b0e2:	a805      	add	r0, sp, #20
    b0e4:	2302      	movs	r3, #2
    b0e6:	2205      	movs	r2, #5
    b0e8:	47a0      	blx	r4
            grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    b0ea:	230d      	movs	r3, #13
    b0ec:	9300      	str	r3, [sp, #0]
    b0ee:	2204      	movs	r2, #4
    b0f0:	4629      	mov	r1, r5
    b0f2:	a805      	add	r0, sp, #20
    b0f4:	2301      	movs	r3, #1
    b0f6:	47a0      	blx	r4
            grid_msg_packet_close(&response);
    b0f8:	4b0b      	ldr	r3, [pc, #44]	; (b128 <grid_keyboard_keychange+0x14c>)
    b0fa:	a805      	add	r0, sp, #20
    b0fc:	4798      	blx	r3
            grid_msg_packet_send_everywhere(&response);
    b0fe:	4b0b      	ldr	r3, [pc, #44]	; (b12c <grid_keyboard_keychange+0x150>)
    b100:	a805      	add	r0, sp, #20
    b102:	4798      	blx	r3
    b104:	e7c8      	b.n	b098 <grid_keyboard_keychange+0xbc>
    b106:	bf00      	nop
    b108:	0000dd49 	.word	0x0000dd49
    b10c:	00008545 	.word	0x00008545
    b110:	00008579 	.word	0x00008579
    b114:	000152e4 	.word	0x000152e4
    b118:	00013351 	.word	0x00013351
    b11c:	00013801 	.word	0x00013801
    b120:	000084b5 	.word	0x000084b5
    b124:	00008529 	.word	0x00008529
    b128:	00008671 	.word	0x00008671
    b12c:	00008745 	.word	0x00008745
    b130:	0000af75 	.word	0x0000af75

0000b134 <grid_midi_buffer_init>:



void grid_midi_buffer_init(struct grid_midi_event_desc* buf, uint16_t length){
    b134:	b510      	push	{r4, lr}
	
	
	for (uint16_t i=0; i<length; i++)
    b136:	2300      	movs	r3, #0
	{
		buf[i].byte0 = 0;
    b138:	461a      	mov	r2, r3
	for (uint16_t i=0; i<length; i++)
    b13a:	b29c      	uxth	r4, r3
    b13c:	42a1      	cmp	r1, r4
    b13e:	f100 0004 	add.w	r0, r0, #4
    b142:	d800      	bhi.n	b146 <grid_midi_buffer_init+0x12>
		buf[i].byte1 = 0;
		buf[i].byte2 = 0;
		buf[i].byte3 = 0;
	}
	
}
    b144:	bd10      	pop	{r4, pc}
		buf[i].byte0 = 0;
    b146:	f800 2c04 	strb.w	r2, [r0, #-4]
		buf[i].byte1 = 0;
    b14a:	f800 2c03 	strb.w	r2, [r0, #-3]
		buf[i].byte2 = 0;
    b14e:	f800 2c02 	strb.w	r2, [r0, #-2]
		buf[i].byte3 = 0;
    b152:	f800 2c01 	strb.w	r2, [r0, #-1]
	for (uint16_t i=0; i<length; i++)
    b156:	3301      	adds	r3, #1
    b158:	e7ef      	b.n	b13a <grid_midi_buffer_init+0x6>
	...

0000b15c <grid_usb_midi_init>:
	grid_midi_tx_write_index = 0;
    b15c:	4b0a      	ldr	r3, [pc, #40]	; (b188 <grid_usb_midi_init+0x2c>)
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    b15e:	480b      	ldr	r0, [pc, #44]	; (b18c <grid_usb_midi_init+0x30>)
{
    b160:	b510      	push	{r4, lr}
	grid_midi_tx_write_index = 0;
    b162:	2400      	movs	r4, #0
    b164:	801c      	strh	r4, [r3, #0]
	grid_midi_tx_read_index = 0;
    b166:	4b0a      	ldr	r3, [pc, #40]	; (b190 <grid_usb_midi_init+0x34>)
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    b168:	f44f 7196 	mov.w	r1, #300	; 0x12c
	grid_midi_tx_read_index = 0;
    b16c:	801c      	strh	r4, [r3, #0]
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    b16e:	4b09      	ldr	r3, [pc, #36]	; (b194 <grid_usb_midi_init+0x38>)
    b170:	4798      	blx	r3
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_READ, (FUNC_PTR)grid_usb_midi_bulkout_cb);
    b172:	4620      	mov	r0, r4
    b174:	4c08      	ldr	r4, [pc, #32]	; (b198 <grid_usb_midi_init+0x3c>)
    b176:	4909      	ldr	r1, [pc, #36]	; (b19c <grid_usb_midi_init+0x40>)
    b178:	47a0      	blx	r4
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_WRITE, (FUNC_PTR)grid_usb_midi_bulkin_cb);
    b17a:	4623      	mov	r3, r4
    b17c:	4908      	ldr	r1, [pc, #32]	; (b1a0 <grid_usb_midi_init+0x44>)
}
    b17e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_WRITE, (FUNC_PTR)grid_usb_midi_bulkin_cb);
    b182:	2001      	movs	r0, #1
    b184:	4718      	bx	r3
    b186:	bf00      	nop
    b188:	20004040 	.word	0x20004040
    b18c:	2000b287 	.word	0x2000b287
    b190:	200081fc 	.word	0x200081fc
    b194:	0000b135 	.word	0x0000b135
    b198:	00004585 	.word	0x00004585
    b19c:	0000af39 	.word	0x0000af39
    b1a0:	0000af11 	.word	0x0000af11

0000b1a4 <grid_midi_tx_push>:

uint8_t grid_midi_tx_push(struct grid_midi_event_desc midi_event){


	grid_midi_tx_buffer[grid_midi_tx_write_index] = midi_event;
    b1a4:	4907      	ldr	r1, [pc, #28]	; (b1c4 <grid_midi_tx_push+0x20>)
    b1a6:	4a08      	ldr	r2, [pc, #32]	; (b1c8 <grid_midi_tx_push+0x24>)
    b1a8:	880b      	ldrh	r3, [r1, #0]
    b1aa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

	grid_midi_tx_write_index = (grid_midi_tx_write_index+1)%GRID_MIDI_TX_BUFFER_length;
    b1ae:	f44f 7096 	mov.w	r0, #300	; 0x12c
    b1b2:	3301      	adds	r3, #1
uint8_t grid_midi_tx_push(struct grid_midi_event_desc midi_event){
    b1b4:	b082      	sub	sp, #8
	grid_midi_tx_write_index = (grid_midi_tx_write_index+1)%GRID_MIDI_TX_BUFFER_length;
    b1b6:	fbb3 f2f0 	udiv	r2, r3, r0
    b1ba:	fb00 3312 	mls	r3, r0, r2, r3
    b1be:	800b      	strh	r3, [r1, #0]




}
    b1c0:	b002      	add	sp, #8
    b1c2:	4770      	bx	lr
    b1c4:	20004040 	.word	0x20004040
    b1c8:	2000b287 	.word	0x2000b287

0000b1cc <grid_midi_tx_pop>:

uint8_t grid_midi_tx_pop(){
    b1cc:	b538      	push	{r3, r4, r5, lr}

	if (grid_midi_tx_read_index != grid_midi_tx_write_index){
    b1ce:	4c0f      	ldr	r4, [pc, #60]	; (b20c <grid_midi_tx_pop+0x40>)
    b1d0:	4b0f      	ldr	r3, [pc, #60]	; (b210 <grid_midi_tx_pop+0x44>)
    b1d2:	8822      	ldrh	r2, [r4, #0]
    b1d4:	881b      	ldrh	r3, [r3, #0]
    b1d6:	429a      	cmp	r2, r3
    b1d8:	d017      	beq.n	b20a <grid_midi_tx_pop+0x3e>
		
		if (audiodf_midi_write_status() != USB_BUSY){
    b1da:	4b0e      	ldr	r3, [pc, #56]	; (b214 <grid_midi_tx_pop+0x48>)
    b1dc:	4798      	blx	r3
    b1de:	2801      	cmp	r0, #1
    b1e0:	d013      	beq.n	b20a <grid_midi_tx_pop+0x3e>

			uint8_t byte0 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte0;
    b1e2:	8825      	ldrh	r5, [r4, #0]
			uint8_t byte1 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte1;
			uint8_t byte2 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte2;
			uint8_t byte3 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte3;
    b1e4:	480c      	ldr	r0, [pc, #48]	; (b218 <grid_midi_tx_pop+0x4c>)
    b1e6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
			
			audiodf_midi_write(byte0, byte1, byte2, byte3);
    b1ea:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
    b1ee:	78cb      	ldrb	r3, [r1, #3]
    b1f0:	788a      	ldrb	r2, [r1, #2]
    b1f2:	4d0a      	ldr	r5, [pc, #40]	; (b21c <grid_midi_tx_pop+0x50>)
    b1f4:	7849      	ldrb	r1, [r1, #1]
    b1f6:	47a8      	blx	r5

			grid_midi_tx_read_index = (grid_midi_tx_read_index+1)%GRID_MIDI_TX_BUFFER_length;
    b1f8:	8823      	ldrh	r3, [r4, #0]
    b1fa:	f44f 7196 	mov.w	r1, #300	; 0x12c
    b1fe:	3301      	adds	r3, #1
    b200:	fbb3 f2f1 	udiv	r2, r3, r1
    b204:	fb01 3312 	mls	r3, r1, r2, r3
    b208:	8023      	strh	r3, [r4, #0]

		}
		
	}

}
    b20a:	bd38      	pop	{r3, r4, r5, pc}
    b20c:	200081fc 	.word	0x200081fc
    b210:	20004040 	.word	0x20004040
    b214:	00004549 	.word	0x00004549
    b218:	2000b287 	.word	0x2000b287
    b21c:	00004521 	.word	0x00004521

0000b220 <grid_keyboard_buffer_init>:


void grid_keyboard_buffer_init(struct grid_keyboard_event_desc* buf, uint16_t length){
    b220:	b510      	push	{r4, lr}
	
	
	for (uint16_t i=0; i<length; i++)
    b222:	2300      	movs	r3, #0
	{
		buf[i].ismodifier = 0;
    b224:	461a      	mov	r2, r3
	for (uint16_t i=0; i<length; i++)
    b226:	b29c      	uxth	r4, r3
    b228:	42a1      	cmp	r1, r4
    b22a:	f100 0008 	add.w	r0, r0, #8
    b22e:	d800      	bhi.n	b232 <grid_keyboard_buffer_init+0x12>
		buf[i].keycode = 0;
		buf[i].ispressed = 0;
		buf[i].delay = 0;
	}
	
}
    b230:	bd10      	pop	{r4, pc}
		buf[i].ismodifier = 0;
    b232:	f800 2c07 	strb.w	r2, [r0, #-7]
		buf[i].keycode = 0;
    b236:	f800 2c08 	strb.w	r2, [r0, #-8]
		buf[i].ispressed = 0;
    b23a:	f800 2c06 	strb.w	r2, [r0, #-6]
		buf[i].delay = 0;
    b23e:	f840 2c04 	str.w	r2, [r0, #-4]
	for (uint16_t i=0; i<length; i++)
    b242:	3301      	adds	r3, #1
    b244:	e7ef      	b.n	b226 <grid_keyboard_buffer_init+0x6>
	...

0000b248 <grid_keyboard_init>:
void grid_keyboard_init(struct grid_keyboard_model* kb){
    b248:	b570      	push	{r4, r5, r6, lr}
    grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    b24a:	4b13      	ldr	r3, [pc, #76]	; (b298 <grid_keyboard_init+0x50>)
void grid_keyboard_init(struct grid_keyboard_model* kb){
    b24c:	4605      	mov	r5, r0
    grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    b24e:	4813      	ldr	r0, [pc, #76]	; (b29c <grid_keyboard_init+0x54>)
    b250:	4798      	blx	r3
    b252:	4b13      	ldr	r3, [pc, #76]	; (b2a0 <grid_keyboard_init+0x58>)
    b254:	6018      	str	r0, [r3, #0]
    grid_keyboard_tx_write_index = 0;
    b256:	4b13      	ldr	r3, [pc, #76]	; (b2a4 <grid_keyboard_init+0x5c>)
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    b258:	4813      	ldr	r0, [pc, #76]	; (b2a8 <grid_keyboard_init+0x60>)
    grid_keyboard_tx_write_index = 0;
    b25a:	2400      	movs	r4, #0
    b25c:	801c      	strh	r4, [r3, #0]
	grid_keyboard_tx_read_index = 0;
    b25e:	4b13      	ldr	r3, [pc, #76]	; (b2ac <grid_keyboard_init+0x64>)
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    b260:	f44f 7196 	mov.w	r1, #300	; 0x12c
	grid_keyboard_tx_read_index = 0;
    b264:	801c      	strh	r4, [r3, #0]
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    b266:	4b12      	ldr	r3, [pc, #72]	; (b2b0 <grid_keyboard_init+0x68>)
    b268:	4798      	blx	r3
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    b26a:	f105 0612 	add.w	r6, r5, #18
    b26e:	462a      	mov	r2, r5
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    b270:	4629      	mov	r1, r5
		kb->hid_key_array[i].b_modifier = false;
    b272:	4623      	mov	r3, r4
		kb->hid_key_array[i].key_id = 255;
    b274:	20ff      	movs	r0, #255	; 0xff
		kb->hid_key_array[i].b_modifier = false;
    b276:	7053      	strb	r3, [r2, #1]
		kb->hid_key_array[i].key_id = 255;
    b278:	7010      	strb	r0, [r2, #0]
		kb->hid_key_array[i].state = HID_KB_KEY_UP;
    b27a:	7093      	strb	r3, [r2, #2]
		kb->key_list[i].ismodifier = 0;
    b27c:	3203      	adds	r2, #3
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    b27e:	42b2      	cmp	r2, r6
		kb->key_list[i].ismodifier = 0;
    b280:	754b      	strb	r3, [r1, #21]
		kb->key_list[i].ispressed = 0;
    b282:	758b      	strb	r3, [r1, #22]
		kb->key_list[i].keycode = 255;
    b284:	7508      	strb	r0, [r1, #20]
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    b286:	f101 0108 	add.w	r1, r1, #8
    b28a:	d1f4      	bne.n	b276 <grid_keyboard_init+0x2e>
	kb->key_active_count = 0;
    b28c:	f44f 7380 	mov.w	r3, #256	; 0x100
    b290:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
}
    b294:	bd70      	pop	{r4, r5, r6, pc}
    b296:	bf00      	nop
    b298:	00009741 	.word	0x00009741
    b29c:	20006fa4 	.word	0x20006fa4
    b2a0:	20014634 	.word	0x20014634
    b2a4:	20007054 	.word	0x20007054
    b2a8:	20007058 	.word	0x20007058
    b2ac:	20008248 	.word	0x20008248
    b2b0:	0000b221 	.word	0x0000b221

0000b2b4 <grid_keyboard_tx_push>:

uint8_t grid_keyboard_tx_push(struct grid_keyboard_event_desc keyboard_event){
    b2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b2b6:	466c      	mov	r4, sp
    b2b8:	e884 0003 	stmia.w	r4, {r0, r1}


	grid_keyboard_tx_buffer[grid_keyboard_tx_write_index] = keyboard_event;
    b2bc:	4d09      	ldr	r5, [pc, #36]	; (b2e4 <grid_keyboard_tx_push+0x30>)
    b2be:	4a0a      	ldr	r2, [pc, #40]	; (b2e8 <grid_keyboard_tx_push+0x34>)
    b2c0:	882b      	ldrh	r3, [r5, #0]
    b2c2:	e894 0003 	ldmia.w	r4, {r0, r1}
    b2c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b2ca:	e882 0003 	stmia.w	r2, {r0, r1}

	grid_keyboard_tx_write_index = (grid_keyboard_tx_write_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    b2ce:	f44f 7196 	mov.w	r1, #300	; 0x12c
    b2d2:	3301      	adds	r3, #1
    b2d4:	fbb3 f2f1 	udiv	r2, r3, r1
    b2d8:	fb01 3312 	mls	r3, r1, r2, r3
    b2dc:	802b      	strh	r3, [r5, #0]



}
    b2de:	b003      	add	sp, #12
    b2e0:	bd30      	pop	{r4, r5, pc}
    b2e2:	bf00      	nop
    b2e4:	20007054 	.word	0x20007054
    b2e8:	20007058 	.word	0x20007058

0000b2ec <grid_keyboard_tx_pop>:

uint8_t grid_keyboard_tx_pop(){
    b2ec:	b573      	push	{r0, r1, r4, r5, r6, lr}

	if (grid_keyboard_tx_read_index != grid_keyboard_tx_write_index){
    b2ee:	4b17      	ldr	r3, [pc, #92]	; (b34c <grid_keyboard_tx_pop+0x60>)
    b2f0:	4c17      	ldr	r4, [pc, #92]	; (b350 <grid_keyboard_tx_pop+0x64>)
    b2f2:	881b      	ldrh	r3, [r3, #0]
    b2f4:	8822      	ldrh	r2, [r4, #0]
    b2f6:	429a      	cmp	r2, r3
    b2f8:	d026      	beq.n	b348 <grid_keyboard_tx_pop+0x5c>
		
        
        
        uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_keyboard_tx_rtc_lasttimestamp);
    b2fa:	4d16      	ldr	r5, [pc, #88]	; (b354 <grid_keyboard_tx_pop+0x68>)
    b2fc:	4b16      	ldr	r3, [pc, #88]	; (b358 <grid_keyboard_tx_pop+0x6c>)
    b2fe:	6829      	ldr	r1, [r5, #0]
    b300:	4816      	ldr	r0, [pc, #88]	; (b35c <grid_keyboard_tx_pop+0x70>)
    b302:	4798      	blx	r3
        
        
		if (elapsed > grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].delay*RTC1MS){
    b304:	8822      	ldrh	r2, [r4, #0]
    b306:	4b16      	ldr	r3, [pc, #88]	; (b360 <grid_keyboard_tx_pop+0x74>)
    b308:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    b30c:	684e      	ldr	r6, [r1, #4]
    b30e:	ebb0 1f06 	cmp.w	r0, r6, lsl #4
    b312:	d919      	bls.n	b348 <grid_keyboard_tx_pop+0x5c>
            
            struct grid_keyboard_event_desc key;
            
            key.ismodifier = grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ismodifier;
            key.keycode =    grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].keycode;
    b314:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
            key.ispressed =  grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ispressed;
    b318:	7889      	ldrb	r1, [r1, #2]
            key.keycode =    grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].keycode;
    b31a:	f8ad 3000 	strh.w	r3, [sp]
            key.delay = 0;
    b31e:	2300      	movs	r3, #0
            key.ispressed =  grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ispressed;
    b320:	f88d 1002 	strb.w	r1, [sp, #2]
            key.delay = 0;
    b324:	9301      	str	r3, [sp, #4]
            
                  
            //grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 50);
            
            grid_keyboard_keychange(&grid_keyboard_state, &key);
    b326:	4669      	mov	r1, sp
    b328:	4b0e      	ldr	r3, [pc, #56]	; (b364 <grid_keyboard_tx_pop+0x78>)
    b32a:	480f      	ldr	r0, [pc, #60]	; (b368 <grid_keyboard_tx_pop+0x7c>)
    b32c:	4798      	blx	r3

			grid_keyboard_tx_read_index = (grid_keyboard_tx_read_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    b32e:	8823      	ldrh	r3, [r4, #0]
            
            grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    b330:	480a      	ldr	r0, [pc, #40]	; (b35c <grid_keyboard_tx_pop+0x70>)
			grid_keyboard_tx_read_index = (grid_keyboard_tx_read_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    b332:	f44f 7196 	mov.w	r1, #300	; 0x12c
    b336:	3301      	adds	r3, #1
    b338:	fbb3 f2f1 	udiv	r2, r3, r1
    b33c:	fb01 3312 	mls	r3, r1, r2, r3
    b340:	8023      	strh	r3, [r4, #0]
            grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    b342:	4b0a      	ldr	r3, [pc, #40]	; (b36c <grid_keyboard_tx_pop+0x80>)
    b344:	4798      	blx	r3
    b346:	6028      	str	r0, [r5, #0]

		}
		
	}

}
    b348:	b002      	add	sp, #8
    b34a:	bd70      	pop	{r4, r5, r6, pc}
    b34c:	20007054 	.word	0x20007054
    b350:	20008248 	.word	0x20008248
    b354:	20014634 	.word	0x20014634
    b358:	00009745 	.word	0x00009745
    b35c:	20006fa4 	.word	0x20006fa4
    b360:	20007058 	.word	0x20007058
    b364:	0000afdd 	.word	0x0000afdd
    b368:	20008200 	.word	0x20008200
    b36c:	00009741 	.word	0x00009741

0000b370 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    b370:	b570      	push	{r4, r5, r6, lr}
    b372:	460d      	mov	r5, r1
    b374:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    b376:	4604      	mov	r4, r0
    b378:	b110      	cbz	r0, b380 <io_write+0x10>
    b37a:	1e08      	subs	r0, r1, #0
    b37c:	bf18      	it	ne
    b37e:	2001      	movne	r0, #1
    b380:	4905      	ldr	r1, [pc, #20]	; (b398 <io_write+0x28>)
    b382:	4b06      	ldr	r3, [pc, #24]	; (b39c <io_write+0x2c>)
    b384:	2234      	movs	r2, #52	; 0x34
    b386:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    b388:	6823      	ldr	r3, [r4, #0]
    b38a:	4632      	mov	r2, r6
    b38c:	4629      	mov	r1, r5
    b38e:	4620      	mov	r0, r4
}
    b390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->write(io_descr, buf, length);
    b394:	4718      	bx	r3
    b396:	bf00      	nop
    b398:	00015874 	.word	0x00015874
    b39c:	0000d305 	.word	0x0000d305

0000b3a0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    b3a0:	b570      	push	{r4, r5, r6, lr}
    b3a2:	460d      	mov	r5, r1
    b3a4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    b3a6:	4604      	mov	r4, r0
    b3a8:	b110      	cbz	r0, b3b0 <io_read+0x10>
    b3aa:	1e08      	subs	r0, r1, #0
    b3ac:	bf18      	it	ne
    b3ae:	2001      	movne	r0, #1
    b3b0:	4905      	ldr	r1, [pc, #20]	; (b3c8 <io_read+0x28>)
    b3b2:	4b06      	ldr	r3, [pc, #24]	; (b3cc <io_read+0x2c>)
    b3b4:	223d      	movs	r2, #61	; 0x3d
    b3b6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    b3b8:	6863      	ldr	r3, [r4, #4]
    b3ba:	4632      	mov	r2, r6
    b3bc:	4629      	mov	r1, r5
    b3be:	4620      	mov	r0, r4
}
    b3c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->read(io_descr, buf, length);
    b3c4:	4718      	bx	r3
    b3c6:	bf00      	nop
    b3c8:	00015874 	.word	0x00015874
    b3cc:	0000d305 	.word	0x0000d305

0000b3d0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    b3d0:	b570      	push	{r4, r5, r6, lr}
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    b3d2:	4e07      	ldr	r6, [pc, #28]	; (b3f0 <stdio_io_init+0x20>)
    b3d4:	4d07      	ldr	r5, [pc, #28]	; (b3f4 <stdio_io_init+0x24>)
    b3d6:	6833      	ldr	r3, [r6, #0]
{
    b3d8:	4604      	mov	r4, r0
	setbuf(stdout, NULL);
    b3da:	2100      	movs	r1, #0
    b3dc:	6898      	ldr	r0, [r3, #8]
    b3de:	47a8      	blx	r5
	setbuf(stdin, NULL);
    b3e0:	6833      	ldr	r3, [r6, #0]
    b3e2:	2100      	movs	r1, #0
    b3e4:	6858      	ldr	r0, [r3, #4]
    b3e6:	47a8      	blx	r5
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    b3e8:	4b03      	ldr	r3, [pc, #12]	; (b3f8 <stdio_io_init+0x28>)
    b3ea:	601c      	str	r4, [r3, #0]
}
    b3ec:	bd70      	pop	{r4, r5, r6, pc}
    b3ee:	bf00      	nop
    b3f0:	20000548 	.word	0x20000548
    b3f4:	0001307d 	.word	0x0001307d
    b3f8:	20000810 	.word	0x20000810

0000b3fc <stdio_io_read>:
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
	if (stdio_io == NULL) {
    b3fc:	4a04      	ldr	r2, [pc, #16]	; (b410 <stdio_io_read+0x14>)
{
    b3fe:	4603      	mov	r3, r0
	if (stdio_io == NULL) {
    b400:	6810      	ldr	r0, [r2, #0]
    b402:	b118      	cbz	r0, b40c <stdio_io_read+0x10>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    b404:	b28a      	uxth	r2, r1
    b406:	4619      	mov	r1, r3
    b408:	4b02      	ldr	r3, [pc, #8]	; (b414 <stdio_io_read+0x18>)
    b40a:	4718      	bx	r3
}
    b40c:	4770      	bx	lr
    b40e:	bf00      	nop
    b410:	20000810 	.word	0x20000810
    b414:	0000b3a1 	.word	0x0000b3a1

0000b418 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
	if (stdio_io == NULL) {
    b418:	4a04      	ldr	r2, [pc, #16]	; (b42c <stdio_io_write+0x14>)
{
    b41a:	4603      	mov	r3, r0
	if (stdio_io == NULL) {
    b41c:	6810      	ldr	r0, [r2, #0]
    b41e:	b118      	cbz	r0, b428 <stdio_io_write+0x10>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    b420:	b28a      	uxth	r2, r1
    b422:	4619      	mov	r1, r3
    b424:	4b02      	ldr	r3, [pc, #8]	; (b430 <stdio_io_write+0x18>)
    b426:	4718      	bx	r3
}
    b428:	4770      	bx	lr
    b42a:	bf00      	nop
    b42c:	20000810 	.word	0x20000810
    b430:	0000b371 	.word	0x0000b371

0000b434 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    b434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    b436:	8a83      	ldrh	r3, [r0, #20]
    b438:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
	msg.flags  = I2C_M_STOP;
    b43c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    b440:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    b444:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b446:	4b05      	ldr	r3, [pc, #20]	; (b45c <i2c_m_async_write+0x28>)
	msg.len    = n;
    b448:	9202      	str	r2, [sp, #8]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b44a:	a901      	add	r1, sp, #4
    b44c:	3828      	subs	r0, #40	; 0x28
{
    b44e:	4614      	mov	r4, r2
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b450:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    b452:	2800      	cmp	r0, #0
    b454:	bf08      	it	eq
    b456:	4620      	moveq	r0, r4
    b458:	b004      	add	sp, #16
    b45a:	bd10      	pop	{r4, pc}
    b45c:	00010bc9 	.word	0x00010bc9

0000b460 <i2c_m_async_read>:
{
    b460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.addr   = i2c->slave_addr;
    b462:	8a83      	ldrh	r3, [r0, #20]
    b464:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    b468:	f248 0301 	movw	r3, #32769	; 0x8001
    b46c:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    b470:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b472:	4b05      	ldr	r3, [pc, #20]	; (b488 <i2c_m_async_read+0x28>)
	msg.len    = n;
    b474:	9202      	str	r2, [sp, #8]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b476:	a901      	add	r1, sp, #4
    b478:	3828      	subs	r0, #40	; 0x28
{
    b47a:	4614      	mov	r4, r2
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b47c:	4798      	blx	r3
}
    b47e:	2800      	cmp	r0, #0
    b480:	bf08      	it	eq
    b482:	4620      	moveq	r0, r4
    b484:	b004      	add	sp, #16
    b486:	bd10      	pop	{r4, pc}
    b488:	00010bc9 	.word	0x00010bc9

0000b48c <i2c_tx_complete>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    b48c:	8842      	ldrh	r2, [r0, #2]
    b48e:	05d2      	lsls	r2, r2, #23
    b490:	d402      	bmi.n	b498 <i2c_tx_complete+0xc>
		if (i2c->i2c_cb.tx_complete) {
    b492:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b494:	b103      	cbz	r3, b498 <i2c_tx_complete+0xc>
			i2c->i2c_cb.tx_complete(i2c);
    b496:	4718      	bx	r3
}
    b498:	4770      	bx	lr

0000b49a <i2c_rx_complete>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    b49a:	8842      	ldrh	r2, [r0, #2]
    b49c:	05d2      	lsls	r2, r2, #23
    b49e:	d402      	bmi.n	b4a6 <i2c_rx_complete+0xc>
		if (i2c->i2c_cb.rx_complete) {
    b4a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b4a2:	b103      	cbz	r3, b4a6 <i2c_rx_complete+0xc>
			i2c->i2c_cb.rx_complete(i2c);
    b4a4:	4718      	bx	r3
}
    b4a6:	4770      	bx	lr

0000b4a8 <i2c_error>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    b4a8:	8842      	ldrh	r2, [r0, #2]
    b4aa:	05d2      	lsls	r2, r2, #23
    b4ac:	d402      	bmi.n	b4b4 <i2c_error+0xc>
		if (i2c->i2c_cb.error) {
    b4ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
    b4b0:	b103      	cbz	r3, b4b4 <i2c_error+0xc>
			i2c->i2c_cb.error(i2c, error);
    b4b2:	4718      	bx	r3
}
    b4b4:	4770      	bx	lr
	...

0000b4b8 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    b4b8:	b570      	push	{r4, r5, r6, lr}
	int32_t init_status;
	ASSERT(i2c);
    b4ba:	4604      	mov	r4, r0
    b4bc:	3800      	subs	r0, #0
{
    b4be:	460d      	mov	r5, r1
	ASSERT(i2c);
    b4c0:	bf18      	it	ne
    b4c2:	2001      	movne	r0, #1
    b4c4:	490e      	ldr	r1, [pc, #56]	; (b500 <i2c_m_async_init+0x48>)
    b4c6:	4b0f      	ldr	r3, [pc, #60]	; (b504 <i2c_m_async_init+0x4c>)
    b4c8:	2289      	movs	r2, #137	; 0x89
    b4ca:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    b4cc:	4629      	mov	r1, r5
    b4ce:	4b0e      	ldr	r3, [pc, #56]	; (b508 <i2c_m_async_init+0x50>)
    b4d0:	4620      	mov	r0, r4
    b4d2:	4798      	blx	r3
	if (init_status) {
    b4d4:	4605      	mov	r5, r0
    b4d6:	b980      	cbnz	r0, b4fa <i2c_m_async_init+0x42>
		return init_status;
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    b4d8:	4b0c      	ldr	r3, [pc, #48]	; (b50c <i2c_m_async_init+0x54>)
    b4da:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    b4dc:	4b0c      	ldr	r3, [pc, #48]	; (b510 <i2c_m_async_init+0x58>)

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    b4de:	4a0d      	ldr	r2, [pc, #52]	; (b514 <i2c_m_async_init+0x5c>)
    b4e0:	4e0d      	ldr	r6, [pc, #52]	; (b518 <i2c_m_async_init+0x60>)
	i2c->io.write = i2c_m_async_write;
    b4e2:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    b4e4:	2101      	movs	r1, #1
    b4e6:	4620      	mov	r0, r4
    b4e8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    b4ea:	4a0c      	ldr	r2, [pc, #48]	; (b51c <i2c_m_async_init+0x64>)
    b4ec:	2102      	movs	r1, #2
    b4ee:	4620      	mov	r0, r4
    b4f0:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    b4f2:	4a0b      	ldr	r2, [pc, #44]	; (b520 <i2c_m_async_init+0x68>)
    b4f4:	4629      	mov	r1, r5
    b4f6:	4620      	mov	r0, r4
    b4f8:	47b0      	blx	r6

	return ERR_NONE;
}
    b4fa:	4628      	mov	r0, r5
    b4fc:	bd70      	pop	{r4, r5, r6, pc}
    b4fe:	bf00      	nop
    b500:	00015888 	.word	0x00015888
    b504:	0000d305 	.word	0x0000d305
    b508:	00010b4d 	.word	0x00010b4d
    b50c:	0000b461 	.word	0x0000b461
    b510:	0000b435 	.word	0x0000b435
    b514:	0000b48d 	.word	0x0000b48d
    b518:	00010cd1 	.word	0x00010cd1
    b51c:	0000b49b 	.word	0x0000b49b
    b520:	0000b4a9 	.word	0x0000b4a9

0000b524 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b524:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b526:	4604      	mov	r4, r0
    b528:	b118      	cbz	r0, b532 <_wdt_init+0xe>
    b52a:	6800      	ldr	r0, [r0, #0]
    b52c:	3800      	subs	r0, #0
    b52e:	bf18      	it	ne
    b530:	2001      	movne	r0, #1
    b532:	4b12      	ldr	r3, [pc, #72]	; (b57c <_wdt_init+0x58>)
    b534:	4912      	ldr	r1, [pc, #72]	; (b580 <_wdt_init+0x5c>)
    b536:	2250      	movs	r2, #80	; 0x50
    b538:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b53a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b53c:	689a      	ldr	r2, [r3, #8]
    b53e:	f012 0f0e 	tst.w	r2, #14
    b542:	d1fb      	bne.n	b53c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b544:	781a      	ldrb	r2, [r3, #0]
    b546:	09d2      	lsrs	r2, r2, #7
    b548:	d115      	bne.n	b576 <_wdt_init+0x52>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b54a:	689a      	ldr	r2, [r3, #8]
    b54c:	f012 0f0e 	tst.w	r2, #14
    b550:	d1fb      	bne.n	b54a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b552:	781a      	ldrb	r2, [r3, #0]
    b554:	0792      	lsls	r2, r2, #30
    b556:	d40e      	bmi.n	b576 <_wdt_init+0x52>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b558:	781a      	ldrb	r2, [r3, #0]
    b55a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    b55e:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b560:	6898      	ldr	r0, [r3, #8]
    b562:	f010 000e 	ands.w	r0, r0, #14
    b566:	d1fb      	bne.n	b560 <_wdt_init+0x3c>

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b568:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b56a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    b56e:	f042 020b 	orr.w	r2, r2, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    b572:	705a      	strb	r2, [r3, #1]

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
	}

	return ERR_NONE;
}
    b574:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    b576:	f06f 0010 	mvn.w	r0, #16
    b57a:	e7fb      	b.n	b574 <_wdt_init+0x50>
    b57c:	0000d305 	.word	0x0000d305
    b580:	000158a5 	.word	0x000158a5

0000b584 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    b584:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b586:	4288      	cmp	r0, r1
    b588:	d301      	bcc.n	b58e <usb_find_desc+0xa>
		_desc_len_check();
    b58a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    b58c:	bd10      	pop	{r4, pc}
		_desc_len_check();
    b58e:	7803      	ldrb	r3, [r0, #0]
    b590:	2b01      	cmp	r3, #1
    b592:	d9fa      	bls.n	b58a <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
    b594:	7844      	ldrb	r4, [r0, #1]
    b596:	4294      	cmp	r4, r2
    b598:	d0f8      	beq.n	b58c <usb_find_desc+0x8>
    b59a:	4418      	add	r0, r3
    b59c:	e7f3      	b.n	b586 <usb_find_desc+0x2>

0000b59e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b59e:	4288      	cmp	r0, r1
    b5a0:	d301      	bcc.n	b5a6 <usb_find_ep_desc+0x8>
		_desc_len_check();
    b5a2:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    b5a4:	4770      	bx	lr
		_desc_len_check();
    b5a6:	7803      	ldrb	r3, [r0, #0]
    b5a8:	2b01      	cmp	r3, #1
    b5aa:	d9fa      	bls.n	b5a2 <usb_find_ep_desc+0x4>
	return desc[1];
    b5ac:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b5ae:	2a04      	cmp	r2, #4
    b5b0:	d0f7      	beq.n	b5a2 <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b5b2:	2a05      	cmp	r2, #5
    b5b4:	d0f6      	beq.n	b5a4 <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
    b5b6:	4418      	add	r0, r3
    b5b8:	e7f1      	b.n	b59e <usb_find_ep_desc>
	...

0000b5bc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b5bc:	b538      	push	{r3, r4, r5, lr}
    b5be:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b5c0:	4b0c      	ldr	r3, [pc, #48]	; (b5f4 <usb_find_cfg_desc+0x38>)
    b5c2:	2202      	movs	r2, #2
{
    b5c4:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b5c6:	4798      	blx	r3
	if (!desc) {
    b5c8:	b978      	cbnz	r0, b5ea <usb_find_cfg_desc+0x2e>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    b5ca:	bd38      	pop	{r3, r4, r5, pc}
		_desc_len_check();
    b5cc:	7803      	ldrb	r3, [r0, #0]
    b5ce:	2b01      	cmp	r3, #1
    b5d0:	d90d      	bls.n	b5ee <usb_find_cfg_desc+0x32>
		if (desc[1] != USB_DT_CONFIG) {
    b5d2:	7843      	ldrb	r3, [r0, #1]
    b5d4:	2b02      	cmp	r3, #2
    b5d6:	d10a      	bne.n	b5ee <usb_find_cfg_desc+0x32>
		if (desc[5] == cfg_value) {
    b5d8:	7943      	ldrb	r3, [r0, #5]
    b5da:	42ab      	cmp	r3, r5
    b5dc:	d0f5      	beq.n	b5ca <usb_find_cfg_desc+0xe>
	return (ptr[0] + (ptr[1] << 8));
    b5de:	78c2      	ldrb	r2, [r0, #3]
    b5e0:	7883      	ldrb	r3, [r0, #2]
    b5e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b5e6:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    b5ea:	42a0      	cmp	r0, r4
    b5ec:	d3ee      	bcc.n	b5cc <usb_find_cfg_desc+0x10>
		return NULL;
    b5ee:	2000      	movs	r0, #0
    b5f0:	e7eb      	b.n	b5ca <usb_find_cfg_desc+0xe>
    b5f2:	bf00      	nop
    b5f4:	0000b585 	.word	0x0000b585

0000b5f8 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    b5f8:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b5fa:	4e09      	ldr	r6, [pc, #36]	; (b620 <usb_find_str_desc+0x28>)
{
    b5fc:	4615      	mov	r5, r2
	for (i = 0; desc < eof;) {
    b5fe:	2400      	movs	r4, #0
    b600:	4288      	cmp	r0, r1
    b602:	d301      	bcc.n	b608 <usb_find_str_desc+0x10>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    b604:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    b606:	bd70      	pop	{r4, r5, r6, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b608:	2203      	movs	r2, #3
    b60a:	47b0      	blx	r6
		if (desc) {
    b60c:	2800      	cmp	r0, #0
    b60e:	d0fa      	beq.n	b606 <usb_find_str_desc+0xe>
			_desc_len_check();
    b610:	7803      	ldrb	r3, [r0, #0]
    b612:	2b01      	cmp	r3, #1
    b614:	d9f6      	bls.n	b604 <usb_find_str_desc+0xc>
			if (i == str_index) {
    b616:	42ac      	cmp	r4, r5
    b618:	d0f5      	beq.n	b606 <usb_find_str_desc+0xe>
	return (desc + usb_desc_len(desc));
    b61a:	4418      	add	r0, r3
    b61c:	3401      	adds	r4, #1
    b61e:	e7ef      	b.n	b600 <usb_find_str_desc+0x8>
    b620:	0000b585 	.word	0x0000b585

0000b624 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    b624:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ASSERT(io);
    b626:	4604      	mov	r4, r0
    b628:	3800      	subs	r0, #0
{
    b62a:	460d      	mov	r5, r1
    b62c:	9201      	str	r2, [sp, #4]
	ASSERT(io);
    b62e:	bf18      	it	ne
    b630:	2001      	movne	r0, #1
    b632:	4907      	ldr	r1, [pc, #28]	; (b650 <_spi_m_dma_io_write+0x2c>)
    b634:	4e07      	ldr	r6, [pc, #28]	; (b654 <_spi_m_dma_io_write+0x30>)
    b636:	2298      	movs	r2, #152	; 0x98
    b638:	47b0      	blx	r6

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    b63a:	f1a4 001c 	sub.w	r0, r4, #28
    b63e:	4c06      	ldr	r4, [pc, #24]	; (b658 <_spi_m_dma_io_write+0x34>)
    b640:	9b01      	ldr	r3, [sp, #4]
    b642:	2200      	movs	r2, #0
    b644:	4629      	mov	r1, r5
    b646:	46a4      	mov	ip, r4
}
    b648:	b002      	add	sp, #8
    b64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    b64e:	4760      	bx	ip
    b650:	000158ba 	.word	0x000158ba
    b654:	0000d305 	.word	0x0000d305
    b658:	00011355 	.word	0x00011355

0000b65c <_spi_m_dma_io_read>:
{
    b65c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ASSERT(io);
    b65e:	4604      	mov	r4, r0
    b660:	3800      	subs	r0, #0
{
    b662:	460d      	mov	r5, r1
    b664:	9201      	str	r2, [sp, #4]
	ASSERT(io);
    b666:	bf18      	it	ne
    b668:	2001      	movne	r0, #1
    b66a:	4907      	ldr	r1, [pc, #28]	; (b688 <_spi_m_dma_io_read+0x2c>)
    b66c:	4e07      	ldr	r6, [pc, #28]	; (b68c <_spi_m_dma_io_read+0x30>)
    b66e:	2281      	movs	r2, #129	; 0x81
    b670:	47b0      	blx	r6
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    b672:	f1a4 001c 	sub.w	r0, r4, #28
    b676:	4c06      	ldr	r4, [pc, #24]	; (b690 <_spi_m_dma_io_read+0x34>)
    b678:	9b01      	ldr	r3, [sp, #4]
    b67a:	462a      	mov	r2, r5
    b67c:	2100      	movs	r1, #0
    b67e:	46a4      	mov	ip, r4
}
    b680:	b002      	add	sp, #8
    b682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    b686:	4760      	bx	ip
    b688:	000158ba 	.word	0x000158ba
    b68c:	0000d305 	.word	0x0000d305
    b690:	00011355 	.word	0x00011355

0000b694 <spi_m_dma_init>:
{
    b694:	b538      	push	{r3, r4, r5, lr}
    b696:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    b698:	4604      	mov	r4, r0
    b69a:	b110      	cbz	r0, b6a2 <spi_m_dma_init+0xe>
    b69c:	1e08      	subs	r0, r1, #0
    b69e:	bf18      	it	ne
    b6a0:	2001      	movne	r0, #1
    b6a2:	4908      	ldr	r1, [pc, #32]	; (b6c4 <spi_m_dma_init+0x30>)
    b6a4:	4b08      	ldr	r3, [pc, #32]	; (b6c8 <spi_m_dma_init+0x34>)
    b6a6:	223b      	movs	r2, #59	; 0x3b
    b6a8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    b6aa:	4620      	mov	r0, r4
	rc            = _spi_m_dma_init(&spi->dev, hw);
    b6ac:	4b07      	ldr	r3, [pc, #28]	; (b6cc <spi_m_dma_init+0x38>)
	spi->dev.prvt = (void *)hw;
    b6ae:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    b6b2:	4629      	mov	r1, r5
    b6b4:	4798      	blx	r3
	if (rc) {
    b6b6:	b918      	cbnz	r0, b6c0 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
    b6b8:	4b05      	ldr	r3, [pc, #20]	; (b6d0 <spi_m_dma_init+0x3c>)
    b6ba:	6263      	str	r3, [r4, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    b6bc:	4b05      	ldr	r3, [pc, #20]	; (b6d4 <spi_m_dma_init+0x40>)
    b6be:	6223      	str	r3, [r4, #32]
}
    b6c0:	bd38      	pop	{r3, r4, r5, pc}
    b6c2:	bf00      	nop
    b6c4:	000158ba 	.word	0x000158ba
    b6c8:	0000d305 	.word	0x0000d305
    b6cc:	000111cd 	.word	0x000111cd
    b6d0:	0000b65d 	.word	0x0000b65d
    b6d4:	0000b625 	.word	0x0000b625

0000b6d8 <spi_m_dma_enable>:
{
    b6d8:	b510      	push	{r4, lr}
	ASSERT(spi);
    b6da:	4604      	mov	r4, r0
    b6dc:	3800      	subs	r0, #0
    b6de:	4b05      	ldr	r3, [pc, #20]	; (b6f4 <spi_m_dma_enable+0x1c>)
    b6e0:	4905      	ldr	r1, [pc, #20]	; (b6f8 <spi_m_dma_enable+0x20>)
    b6e2:	bf18      	it	ne
    b6e4:	2001      	movne	r0, #1
    b6e6:	2251      	movs	r2, #81	; 0x51
    b6e8:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    b6ea:	1d20      	adds	r0, r4, #4
    b6ec:	4b03      	ldr	r3, [pc, #12]	; (b6fc <spi_m_dma_enable+0x24>)
}
    b6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_spi_m_dma_enable(&spi->dev);
    b6f2:	4718      	bx	r3
    b6f4:	0000d305 	.word	0x0000d305
    b6f8:	000158ba 	.word	0x000158ba
    b6fc:	00011291 	.word	0x00011291

0000b700 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    b700:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    b702:	4604      	mov	r4, r0
    b704:	3800      	subs	r0, #0
{
    b706:	460d      	mov	r5, r1
    b708:	4616      	mov	r6, r2
	ASSERT(spi);
    b70a:	4907      	ldr	r1, [pc, #28]	; (b728 <spi_m_dma_register_callback+0x28>)
    b70c:	4b07      	ldr	r3, [pc, #28]	; (b72c <spi_m_dma_register_callback+0x2c>)
    b70e:	f04f 02a8 	mov.w	r2, #168	; 0xa8
    b712:	bf18      	it	ne
    b714:	2001      	movne	r0, #1
    b716:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    b718:	4632      	mov	r2, r6
    b71a:	4629      	mov	r1, r5
    b71c:	1d20      	adds	r0, r4, #4
    b71e:	4b04      	ldr	r3, [pc, #16]	; (b730 <spi_m_dma_register_callback+0x30>)
}
    b720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    b724:	4718      	bx	r3
    b726:	bf00      	nop
    b728:	000158ba 	.word	0x000158ba
    b72c:	0000d305 	.word	0x0000d305
    b730:	000112c1 	.word	0x000112c1

0000b734 <spi_m_dma_get_io_descriptor>:

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    b734:	b538      	push	{r3, r4, r5, lr}
    b736:	460d      	mov	r5, r1
	ASSERT(spi && io);
    b738:	4604      	mov	r4, r0
    b73a:	b110      	cbz	r0, b742 <spi_m_dma_get_io_descriptor+0xe>
    b73c:	1e08      	subs	r0, r1, #0
    b73e:	bf18      	it	ne
    b740:	2001      	movne	r0, #1
    b742:	4904      	ldr	r1, [pc, #16]	; (b754 <spi_m_dma_get_io_descriptor+0x20>)
    b744:	4b04      	ldr	r3, [pc, #16]	; (b758 <spi_m_dma_get_io_descriptor+0x24>)
    b746:	22ae      	movs	r2, #174	; 0xae
	*io = &spi->io;
    b748:	3420      	adds	r4, #32
	ASSERT(spi && io);
    b74a:	4798      	blx	r3
	*io = &spi->io;
    b74c:	602c      	str	r4, [r5, #0]

	return 0;
}
    b74e:	2000      	movs	r0, #0
    b750:	bd38      	pop	{r3, r4, r5, pc}
    b752:	bf00      	nop
    b754:	000158ba 	.word	0x000158ba
    b758:	0000d305 	.word	0x0000d305

0000b75c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    b75c:	3801      	subs	r0, #1
    b75e:	2802      	cmp	r0, #2
{
    b760:	b508      	push	{r3, lr}
    b762:	460b      	mov	r3, r1
    b764:	4611      	mov	r1, r2
	if ((file != 1) && (file != 2) && (file != 3)) {
    b766:	d805      	bhi.n	b774 <_write+0x18>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    b768:	4618      	mov	r0, r3
    b76a:	4b04      	ldr	r3, [pc, #16]	; (b77c <_write+0x20>)
    b76c:	4798      	blx	r3
	if (n < 0) {
    b76e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		return -1;
	}

	return n;
}
    b772:	bd08      	pop	{r3, pc}
		return -1;
    b774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b778:	e7fb      	b.n	b772 <_write+0x16>
    b77a:	bf00      	nop
    b77c:	0000b419 	.word	0x0000b419

0000b780 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    b780:	b510      	push	{r4, lr}
    b782:	4a13      	ldr	r2, [pc, #76]	; (b7d0 <_event_system_init+0x50>)
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    b784:	4913      	ldr	r1, [pc, #76]	; (b7d4 <_event_system_init+0x54>)
    b786:	2300      	movs	r3, #0
    b788:	f103 0048 	add.w	r0, r3, #72	; 0x48
    b78c:	3301      	adds	r3, #1
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    b78e:	f812 4b01 	ldrb.w	r4, [r2], #1
    b792:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    b796:	2b43      	cmp	r3, #67	; 0x43
    b798:	d1f6      	bne.n	b788 <_event_system_init+0x8>
    b79a:	480f      	ldr	r0, [pc, #60]	; (b7d8 <_event_system_init+0x58>)
    b79c:	2100      	movs	r1, #0
    b79e:	f100 0440 	add.w	r4, r0, #64	; 0x40
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    b7a2:	00ca      	lsls	r2, r1, #3
    b7a4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    b7a8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    b7ac:	f830 3b02 	ldrh.w	r3, [r0], #2

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    b7b0:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    b7b2:	f854 3b04 	ldr.w	r3, [r4], #4
    b7b6:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    b7b8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    b7bc:	3101      	adds	r1, #1
    b7be:	43db      	mvns	r3, r3
    b7c0:	b2db      	uxtb	r3, r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    b7c2:	2920      	cmp	r1, #32
    b7c4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    b7c8:	d1eb      	bne.n	b7a2 <_event_system_init+0x22>
	}

	return ERR_NONE;
}
    b7ca:	2000      	movs	r0, #0
    b7cc:	bd10      	pop	{r4, pc}
    b7ce:	bf00      	nop
    b7d0:	000158d8 	.word	0x000158d8
    b7d4:	4100e000 	.word	0x4100e000
    b7d8:	0001591c 	.word	0x0001591c

0000b7dc <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b7dc:	0943      	lsrs	r3, r0, #5
    b7de:	2201      	movs	r2, #1
    b7e0:	f000 001f 	and.w	r0, r0, #31
    b7e4:	fa02 f000 	lsl.w	r0, r2, r0
    b7e8:	3340      	adds	r3, #64	; 0x40
    b7ea:	4a02      	ldr	r2, [pc, #8]	; (b7f4 <_irq_set+0x18>)
    b7ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    b7f0:	4770      	bx	lr
    b7f2:	bf00      	nop
    b7f4:	e000e100 	.word	0xe000e100

0000b7f8 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    b7f8:	2378      	movs	r3, #120	; 0x78
    b7fa:	4358      	muls	r0, r3
    b7fc:	4770      	bx	lr
	...

0000b800 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    b800:	4b01      	ldr	r3, [pc, #4]	; (b808 <_get_cycles_for_ms+0x8>)
    b802:	4358      	muls	r0, r3
    b804:	4770      	bx	lr
    b806:	bf00      	nop
    b808:	0001d4c0 	.word	0x0001d4c0

0000b80c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b80c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b810:	4615      	mov	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b812:	780a      	ldrb	r2, [r1, #0]
    b814:	f3c2 1341 	ubfx	r3, r2, #5, #2
    b818:	2b01      	cmp	r3, #1
{
    b81a:	4606      	mov	r6, r0
    b81c:	460c      	mov	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b81e:	d155      	bne.n	b8cc <cdcdf_acm_req+0xc0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b820:	4b2d      	ldr	r3, [pc, #180]	; (b8d8 <cdcdf_acm_req+0xcc>)
    b822:	8889      	ldrh	r1, [r1, #4]
    b824:	7818      	ldrb	r0, [r3, #0]
    b826:	4288      	cmp	r0, r1
    b828:	4698      	mov	r8, r3
    b82a:	d002      	beq.n	b832 <cdcdf_acm_req+0x26>
    b82c:	785b      	ldrb	r3, [r3, #1]
    b82e:	428b      	cmp	r3, r1
    b830:	d14c      	bne.n	b8cc <cdcdf_acm_req+0xc0>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b832:	0613      	lsls	r3, r2, #24
    b834:	88e7      	ldrh	r7, [r4, #6]
    b836:	d50f      	bpl.n	b858 <cdcdf_acm_req+0x4c>
	if (USB_DATA_STAGE == stage) {
    b838:	2d01      	cmp	r5, #1
    b83a:	d033      	beq.n	b8a4 <cdcdf_acm_req+0x98>
	switch (req->bRequest) {
    b83c:	7863      	ldrb	r3, [r4, #1]
    b83e:	2b21      	cmp	r3, #33	; 0x21
    b840:	d112      	bne.n	b868 <cdcdf_acm_req+0x5c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b842:	2f07      	cmp	r7, #7
    b844:	d145      	bne.n	b8d2 <cdcdf_acm_req+0xc6>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b846:	4925      	ldr	r1, [pc, #148]	; (b8dc <cdcdf_acm_req+0xd0>)
    b848:	2300      	movs	r3, #0
    b84a:	463a      	mov	r2, r7
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b84c:	4c24      	ldr	r4, [pc, #144]	; (b8e0 <cdcdf_acm_req+0xd4>)
    b84e:	4630      	mov	r0, r6
    b850:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    b852:	b002      	add	sp, #8
    b854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b858:	4b22      	ldr	r3, [pc, #136]	; (b8e4 <cdcdf_acm_req+0xd8>)
    b85a:	4798      	blx	r3
	switch (req->bRequest) {
    b85c:	7863      	ldrb	r3, [r4, #1]
    b85e:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b860:	4601      	mov	r1, r0
	switch (req->bRequest) {
    b862:	d004      	beq.n	b86e <cdcdf_acm_req+0x62>
    b864:	2b22      	cmp	r3, #34	; 0x22
    b866:	d024      	beq.n	b8b2 <cdcdf_acm_req+0xa6>
		return ERR_INVALID_ARG;
    b868:	f06f 000c 	mvn.w	r0, #12
    b86c:	e7f1      	b.n	b852 <cdcdf_acm_req+0x46>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b86e:	2f07      	cmp	r7, #7
    b870:	d12f      	bne.n	b8d2 <cdcdf_acm_req+0xc6>
		if (USB_SETUP_STAGE == stage) {
    b872:	b915      	cbnz	r5, b87a <cdcdf_acm_req+0x6e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b874:	462b      	mov	r3, r5
    b876:	463a      	mov	r2, r7
    b878:	e7e8      	b.n	b84c <cdcdf_acm_req+0x40>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b87a:	6800      	ldr	r0, [r0, #0]
    b87c:	9000      	str	r0, [sp, #0]
    b87e:	798b      	ldrb	r3, [r1, #6]
    b880:	888a      	ldrh	r2, [r1, #4]
    b882:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b886:	f8d8 3010 	ldr.w	r3, [r8, #16]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b88a:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b88e:	b95b      	cbnz	r3, b8a8 <cdcdf_acm_req+0x9c>
				usbd_cdc_line_coding = line_coding_tmp;
    b890:	4b12      	ldr	r3, [pc, #72]	; (b8dc <cdcdf_acm_req+0xd0>)
    b892:	9800      	ldr	r0, [sp, #0]
    b894:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b898:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b89c:	f8c8 0006 	str.w	r0, [r8, #6]
    b8a0:	8099      	strh	r1, [r3, #4]
    b8a2:	719a      	strb	r2, [r3, #6]
		return ERR_NONE;
    b8a4:	2000      	movs	r0, #0
    b8a6:	e7d4      	b.n	b852 <cdcdf_acm_req+0x46>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b8a8:	4668      	mov	r0, sp
    b8aa:	4798      	blx	r3
    b8ac:	2800      	cmp	r0, #0
    b8ae:	d1ef      	bne.n	b890 <cdcdf_acm_req+0x84>
    b8b0:	e7f8      	b.n	b8a4 <cdcdf_acm_req+0x98>
		usbdc_xfer(0, NULL, 0, 0);
    b8b2:	2300      	movs	r3, #0
    b8b4:	461a      	mov	r2, r3
    b8b6:	4619      	mov	r1, r3
    b8b8:	4618      	mov	r0, r3
    b8ba:	4d09      	ldr	r5, [pc, #36]	; (b8e0 <cdcdf_acm_req+0xd4>)
    b8bc:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    b8be:	f8d8 3014 	ldr.w	r3, [r8, #20]
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	d0ee      	beq.n	b8a4 <cdcdf_acm_req+0x98>
			cdcdf_acm_notify_state(req->wValue);
    b8c6:	8860      	ldrh	r0, [r4, #2]
    b8c8:	4798      	blx	r3
    b8ca:	e7eb      	b.n	b8a4 <cdcdf_acm_req+0x98>
		return ERR_NOT_FOUND;
    b8cc:	f06f 0009 	mvn.w	r0, #9
    b8d0:	e7bf      	b.n	b852 <cdcdf_acm_req+0x46>
			return ERR_INVALID_DATA;
    b8d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b8d6:	e7bc      	b.n	b852 <cdcdf_acm_req+0x46>
    b8d8:	20000814 	.word	0x20000814
    b8dc:	2000081a 	.word	0x2000081a
    b8e0:	00011b19 	.word	0x00011b19
    b8e4:	00011f45 	.word	0x00011f45

0000b8e8 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    b8e8:	2901      	cmp	r1, #1
{
    b8ea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8ee:	4615      	mov	r5, r2
	switch (ctrl) {
    b8f0:	d04f      	beq.n	b992 <cdcdf_acm_ctrl+0xaa>
    b8f2:	2902      	cmp	r1, #2
    b8f4:	d076      	beq.n	b9e4 <cdcdf_acm_ctrl+0xfc>
    b8f6:	2900      	cmp	r1, #0
    b8f8:	d177      	bne.n	b9ea <cdcdf_acm_ctrl+0x102>
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b8fa:	6887      	ldr	r7, [r0, #8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b8fc:	f8df 8114 	ldr.w	r8, [pc, #276]	; ba14 <cdcdf_acm_ctrl+0x12c>
	ifc = desc->sod;
    b900:	6810      	ldr	r0, [r2, #0]
	for (i = 0; i < 2; i++) {
    b902:	1e7e      	subs	r6, r7, #1
		if (NULL == ifc) {
    b904:	b928      	cbnz	r0, b912 <cdcdf_acm_ctrl+0x2a>
			return ERR_NOT_FOUND;
    b906:	f06f 0009 	mvn.w	r0, #9
}
    b90a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b90e:	464e      	mov	r6, r9
    b910:	e7f8      	b.n	b904 <cdcdf_acm_ctrl+0x1c>
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b912:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    b914:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b916:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b91a:	2b02      	cmp	r3, #2
    b91c:	d1f3      	bne.n	b906 <cdcdf_acm_ctrl+0x1e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b91e:	7873      	ldrb	r3, [r6, #1]
    b920:	429a      	cmp	r2, r3
    b922:	d065      	beq.n	b9f0 <cdcdf_acm_ctrl+0x108>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b924:	2bff      	cmp	r3, #255	; 0xff
    b926:	d166      	bne.n	b9f6 <cdcdf_acm_ctrl+0x10e>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b928:	7072      	strb	r2, [r6, #1]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b92a:	6869      	ldr	r1, [r5, #4]
    b92c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; ba18 <cdcdf_acm_ctrl+0x130>
    b930:	2205      	movs	r2, #5
    b932:	47c0      	blx	r8
    b934:	f106 0901 	add.w	r9, r6, #1
    b938:	4604      	mov	r4, r0
		while (NULL != ep) {
    b93a:	b964      	cbnz	r4, b956 <cdcdf_acm_ctrl+0x6e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b93c:	682b      	ldr	r3, [r5, #0]
    b93e:	6869      	ldr	r1, [r5, #4]
    b940:	7818      	ldrb	r0, [r3, #0]
    b942:	2204      	movs	r2, #4
    b944:	4418      	add	r0, r3
    b946:	47c0      	blx	r8
	for (i = 0; i < 2; i++) {
    b948:	42be      	cmp	r6, r7
    b94a:	d1e0      	bne.n	b90e <cdcdf_acm_ctrl+0x26>
	_cdcdf_acm_funcd.enabled = true;
    b94c:	4b2d      	ldr	r3, [pc, #180]	; (ba04 <cdcdf_acm_ctrl+0x11c>)
    b94e:	2201      	movs	r2, #1
    b950:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b952:	4620      	mov	r0, r4
    b954:	e7d9      	b.n	b90a <cdcdf_acm_ctrl+0x22>
	return (ptr[0] + (ptr[1] << 8));
    b956:	7961      	ldrb	r1, [r4, #5]
    b958:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    b95a:	f894 b002 	ldrb.w	fp, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b95e:	4b2a      	ldr	r3, [pc, #168]	; (ba08 <cdcdf_acm_ctrl+0x120>)
    b960:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    b964:	b292      	uxth	r2, r2
    b966:	78e1      	ldrb	r1, [r4, #3]
    b968:	4658      	mov	r0, fp
    b96a:	4798      	blx	r3
    b96c:	2800      	cmp	r0, #0
    b96e:	d145      	bne.n	b9fc <cdcdf_acm_ctrl+0x114>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b970:	f01b 0f80 	tst.w	fp, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b974:	bf14      	ite	ne
    b976:	f889 b002 	strbne.w	fp, [r9, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b97a:	f887 b004 	strbeq.w	fp, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b97e:	4658      	mov	r0, fp
    b980:	47d0      	blx	sl
			desc->sod = ep;
    b982:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    b984:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b986:	6869      	ldr	r1, [r5, #4]
    b988:	4b20      	ldr	r3, [pc, #128]	; (ba0c <cdcdf_acm_ctrl+0x124>)
    b98a:	4420      	add	r0, r4
    b98c:	4798      	blx	r3
    b98e:	4604      	mov	r4, r0
    b990:	e7d3      	b.n	b93a <cdcdf_acm_ctrl+0x52>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b992:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    b994:	b12a      	cbz	r2, b9a2 <cdcdf_acm_ctrl+0xba>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b996:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b998:	795b      	ldrb	r3, [r3, #5]
    b99a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b99e:	2b02      	cmp	r3, #2
    b9a0:	d1b1      	bne.n	b906 <cdcdf_acm_ctrl+0x1e>
		if (func_data->func_iface[i] == 0xFF) {
    b9a2:	7823      	ldrb	r3, [r4, #0]
    b9a4:	2bff      	cmp	r3, #255	; 0xff
    b9a6:	d007      	beq.n	b9b8 <cdcdf_acm_ctrl+0xd0>
			if (func_data->func_ep_in[i] != 0xFF) {
    b9a8:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    b9aa:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    b9ac:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    b9ae:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    b9b0:	d002      	beq.n	b9b8 <cdcdf_acm_ctrl+0xd0>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b9b2:	4b17      	ldr	r3, [pc, #92]	; (ba10 <cdcdf_acm_ctrl+0x128>)
    b9b4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b9b6:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    b9b8:	7863      	ldrb	r3, [r4, #1]
    b9ba:	2bff      	cmp	r3, #255	; 0xff
    b9bc:	d007      	beq.n	b9ce <cdcdf_acm_ctrl+0xe6>
			if (func_data->func_ep_in[i] != 0xFF) {
    b9be:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    b9c0:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    b9c2:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    b9c4:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    b9c6:	d002      	beq.n	b9ce <cdcdf_acm_ctrl+0xe6>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b9c8:	4b11      	ldr	r3, [pc, #68]	; (ba10 <cdcdf_acm_ctrl+0x128>)
    b9ca:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b9cc:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    b9ce:	7920      	ldrb	r0, [r4, #4]
    b9d0:	28ff      	cmp	r0, #255	; 0xff
    b9d2:	d003      	beq.n	b9dc <cdcdf_acm_ctrl+0xf4>
		usb_d_ep_deinit(func_data->func_ep_out);
    b9d4:	4b0e      	ldr	r3, [pc, #56]	; (ba10 <cdcdf_acm_ctrl+0x128>)
    b9d6:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b9d8:	23ff      	movs	r3, #255	; 0xff
    b9da:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    b9dc:	4b09      	ldr	r3, [pc, #36]	; (ba04 <cdcdf_acm_ctrl+0x11c>)
    b9de:	2000      	movs	r0, #0
    b9e0:	7158      	strb	r0, [r3, #5]
	return ERR_NONE;
    b9e2:	e792      	b.n	b90a <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    b9e4:	f06f 001a 	mvn.w	r0, #26
    b9e8:	e78f      	b.n	b90a <cdcdf_acm_ctrl+0x22>
	switch (ctrl) {
    b9ea:	f06f 000c 	mvn.w	r0, #12
    b9ee:	e78c      	b.n	b90a <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    b9f0:	f06f 0011 	mvn.w	r0, #17
    b9f4:	e789      	b.n	b90a <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    b9f6:	f06f 001b 	mvn.w	r0, #27
    b9fa:	e786      	b.n	b90a <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    b9fc:	f06f 0013 	mvn.w	r0, #19
    ba00:	e783      	b.n	b90a <cdcdf_acm_ctrl+0x22>
    ba02:	bf00      	nop
    ba04:	20000814 	.word	0x20000814
    ba08:	0000e7e9 	.word	0x0000e7e9
    ba0c:	0000b59f 	.word	0x0000b59f
    ba10:	0000e84d 	.word	0x0000e84d
    ba14:	0000b585 	.word	0x0000b585
    ba18:	0000e879 	.word	0x0000e879

0000ba1c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    ba1c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    ba1e:	4b0a      	ldr	r3, [pc, #40]	; (ba48 <cdcdf_acm_init+0x2c>)
    ba20:	4798      	blx	r3
    ba22:	2801      	cmp	r0, #1
    ba24:	d80c      	bhi.n	ba40 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    ba26:	4809      	ldr	r0, [pc, #36]	; (ba4c <cdcdf_acm_init+0x30>)
    ba28:	4b09      	ldr	r3, [pc, #36]	; (ba50 <cdcdf_acm_init+0x34>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    ba2a:	e9c0 3007 	strd	r3, r0, [r0, #28]

	usbdc_register_function(&_cdcdf_acm);
    ba2e:	4b09      	ldr	r3, [pc, #36]	; (ba54 <cdcdf_acm_init+0x38>)
    ba30:	3018      	adds	r0, #24
    ba32:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    ba34:	2001      	movs	r0, #1
    ba36:	4908      	ldr	r1, [pc, #32]	; (ba58 <cdcdf_acm_init+0x3c>)
    ba38:	4b08      	ldr	r3, [pc, #32]	; (ba5c <cdcdf_acm_init+0x40>)
    ba3a:	4798      	blx	r3
	return ERR_NONE;
    ba3c:	2000      	movs	r0, #0
}
    ba3e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    ba40:	f06f 0010 	mvn.w	r0, #16
    ba44:	e7fb      	b.n	ba3e <cdcdf_acm_init+0x22>
    ba46:	bf00      	nop
    ba48:	00011f51 	.word	0x00011f51
    ba4c:	20000814 	.word	0x20000814
    ba50:	0000b8e9 	.word	0x0000b8e9
    ba54:	00011ef9 	.word	0x00011ef9
    ba58:	20000350 	.word	0x20000350
    ba5c:	00011e71 	.word	0x00011e71

0000ba60 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    ba60:	b410      	push	{r4}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    ba62:	4c08      	ldr	r4, [pc, #32]	; (ba84 <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    ba64:	7963      	ldrb	r3, [r4, #5]
{
    ba66:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    ba68:	b13b      	cbz	r3, ba7a <cdcdf_acm_read+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ba6a:	4601      	mov	r1, r0
    ba6c:	7920      	ldrb	r0, [r4, #4]
    ba6e:	4c06      	ldr	r4, [pc, #24]	; (ba88 <cdcdf_acm_read+0x28>)
    ba70:	2300      	movs	r3, #0
    ba72:	46a4      	mov	ip, r4
}
    ba74:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    ba78:	4760      	bx	ip
}
    ba7a:	f06f 0010 	mvn.w	r0, #16
    ba7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba82:	4770      	bx	lr
    ba84:	20000814 	.word	0x20000814
    ba88:	00011b19 	.word	0x00011b19

0000ba8c <cdcdf_acm_write>:
{
    ba8c:	b410      	push	{r4}
	return _cdcdf_acm_funcd.enabled;
    ba8e:	4c08      	ldr	r4, [pc, #32]	; (bab0 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    ba90:	7963      	ldrb	r3, [r4, #5]
{
    ba92:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    ba94:	b13b      	cbz	r3, baa6 <cdcdf_acm_write+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    ba96:	4601      	mov	r1, r0
    ba98:	78e0      	ldrb	r0, [r4, #3]
    ba9a:	4c06      	ldr	r4, [pc, #24]	; (bab4 <cdcdf_acm_write+0x28>)
    ba9c:	2301      	movs	r3, #1
    ba9e:	46a4      	mov	ip, r4
}
    baa0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    baa4:	4760      	bx	ip
}
    baa6:	f06f 0010 	mvn.w	r0, #16
    baaa:	f85d 4b04 	ldr.w	r4, [sp], #4
    baae:	4770      	bx	lr
    bab0:	20000814 	.word	0x20000814
    bab4:	00011b19 	.word	0x00011b19

0000bab8 <cdcdf_acm_register_callback>:
{
    bab8:	b508      	push	{r3, lr}
    baba:	460a      	mov	r2, r1
    babc:	2803      	cmp	r0, #3
    babe:	d814      	bhi.n	baea <cdcdf_acm_register_callback+0x32>
    bac0:	e8df f000 	tbb	[pc, r0]
    bac4:	100d0902 	.word	0x100d0902
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bac8:	4b09      	ldr	r3, [pc, #36]	; (baf0 <cdcdf_acm_register_callback+0x38>)
    baca:	7918      	ldrb	r0, [r3, #4]
    bacc:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bace:	4b09      	ldr	r3, [pc, #36]	; (baf4 <cdcdf_acm_register_callback+0x3c>)
    bad0:	4798      	blx	r3
	return ERR_NONE;
    bad2:	2000      	movs	r0, #0
}
    bad4:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bad6:	4b06      	ldr	r3, [pc, #24]	; (baf0 <cdcdf_acm_register_callback+0x38>)
    bad8:	2102      	movs	r1, #2
    bada:	78d8      	ldrb	r0, [r3, #3]
    badc:	e7f7      	b.n	bace <cdcdf_acm_register_callback+0x16>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    bade:	4b04      	ldr	r3, [pc, #16]	; (baf0 <cdcdf_acm_register_callback+0x38>)
    bae0:	6119      	str	r1, [r3, #16]
		break;
    bae2:	e7f6      	b.n	bad2 <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    bae4:	4b02      	ldr	r3, [pc, #8]	; (baf0 <cdcdf_acm_register_callback+0x38>)
    bae6:	6159      	str	r1, [r3, #20]
    bae8:	e7f3      	b.n	bad2 <cdcdf_acm_register_callback+0x1a>
	return ERR_NONE;
    baea:	f06f 000c 	mvn.w	r0, #12
    baee:	e7f1      	b.n	bad4 <cdcdf_acm_register_callback+0x1c>
    baf0:	20000814 	.word	0x20000814
    baf4:	0000ea61 	.word	0x0000ea61

0000baf8 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    baf8:	4b04      	ldr	r3, [pc, #16]	; (bb0c <_sbrk+0x14>)
    bafa:	6819      	ldr	r1, [r3, #0]
{
    bafc:	4602      	mov	r2, r0
	if (heap == NULL) {
    bafe:	b909      	cbnz	r1, bb04 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    bb00:	4903      	ldr	r1, [pc, #12]	; (bb10 <_sbrk+0x18>)
    bb02:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    bb04:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    bb06:	4402      	add	r2, r0
    bb08:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
    bb0a:	4770      	bx	lr
    bb0c:	20000838 	.word	0x20000838
    bb10:	20024e38 	.word	0x20024e38

0000bb14 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    bb14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bb18:	4770      	bx	lr

0000bb1a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    bb1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bb1e:	604b      	str	r3, [r1, #4]

	return 0;
}
    bb20:	2000      	movs	r0, #0
    bb22:	4770      	bx	lr

0000bb24 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    bb24:	2001      	movs	r0, #1
    bb26:	4770      	bx	lr

0000bb28 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    bb28:	2000      	movs	r0, #0
    bb2a:	4770      	bx	lr

0000bb2c <_qspi_dma_rx_complete>:
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    bb2c:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    bb2e:	4903      	ldr	r1, [pc, #12]	; (bb3c <_qspi_dma_rx_complete+0x10>)

	_qspi_end_transfer(dev->prvt);
    bb30:	681a      	ldr	r2, [r3, #0]

	if (dev->cb.xfer_done) {
    bb32:	685b      	ldr	r3, [r3, #4]
    bb34:	6011      	str	r1, [r2, #0]
    bb36:	b103      	cbz	r3, bb3a <_qspi_dma_rx_complete+0xe>
		dev->cb.xfer_done(resource);
    bb38:	4718      	bx	r3
	}
}
    bb3a:	4770      	bx	lr
    bb3c:	01000002 	.word	0x01000002

0000bb40 <_qspi_dma_tx_complete>:
    bb40:	4b00      	ldr	r3, [pc, #0]	; (bb44 <_qspi_dma_tx_complete+0x4>)
    bb42:	4718      	bx	r3
    bb44:	0000bb2d 	.word	0x0000bb2d

0000bb48 <_qspi_dma_error_occured>:
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    bb48:	6883      	ldr	r3, [r0, #8]
    bb4a:	689b      	ldr	r3, [r3, #8]
    bb4c:	b103      	cbz	r3, bb50 <_qspi_dma_error_occured+0x8>
		dev->cb.error(resource);
    bb4e:	4718      	bx	r3
	}
}
    bb50:	4770      	bx	lr
	...

0000bb54 <_qspi_dma_init>:

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb56:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    bb58:	4604      	mov	r4, r0
    bb5a:	b110      	cbz	r0, bb62 <_qspi_dma_init+0xe>
    bb5c:	1e08      	subs	r0, r1, #0
    bb5e:	bf18      	it	ne
    bb60:	2001      	movne	r0, #1
	dev->prvt = hw;
    bb62:	4626      	mov	r6, r4
	ASSERT(dev && hw);
    bb64:	22cb      	movs	r2, #203	; 0xcb
    bb66:	490f      	ldr	r1, [pc, #60]	; (bba4 <_qspi_dma_init+0x50>)
    bb68:	4b0f      	ldr	r3, [pc, #60]	; (bba8 <_qspi_dma_init+0x54>)
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    bb6a:	4f10      	ldr	r7, [pc, #64]	; (bbac <_qspi_dma_init+0x58>)
	ASSERT(dev && hw);
    bb6c:	4798      	blx	r3
    bb6e:	2301      	movs	r3, #1
	dev->prvt = hw;
    bb70:	f846 5b0c 	str.w	r5, [r6], #12
    bb74:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    bb76:	4b0e      	ldr	r3, [pc, #56]	; (bbb0 <_qspi_dma_init+0x5c>)
    bb78:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    bb7a:	4b0e      	ldr	r3, [pc, #56]	; (bbb4 <_qspi_dma_init+0x60>)
    bb7c:	60ab      	str	r3, [r5, #8]
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    bb7e:	211f      	movs	r1, #31
    bb80:	4630      	mov	r0, r6
    bb82:	47b8      	blx	r7
	dev->resource->back                 = dev;
    bb84:	68e3      	ldr	r3, [r4, #12]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    bb86:	4a0c      	ldr	r2, [pc, #48]	; (bbb8 <_qspi_dma_init+0x64>)
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    bb88:	4d0c      	ldr	r5, [pc, #48]	; (bbbc <_qspi_dma_init+0x68>)
	dev->resource->back                 = dev;
    bb8a:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    bb8c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    bb8e:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    bb90:	211e      	movs	r1, #30
    bb92:	4630      	mov	r0, r6
    bb94:	47b8      	blx	r7
	dev->resource->back                 = dev;
    bb96:	68e3      	ldr	r3, [r4, #12]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    bb98:	4a09      	ldr	r2, [pc, #36]	; (bbc0 <_qspi_dma_init+0x6c>)
	dev->resource->back                 = dev;
    bb9a:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    bb9c:	e9c3 2500 	strd	r2, r5, [r3]

	return ERR_NONE;
}
    bba0:	2000      	movs	r0, #0
    bba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bba4:	000159dc 	.word	0x000159dc
    bba8:	0000d305 	.word	0x0000d305
    bbac:	0000d549 	.word	0x0000d549
    bbb0:	06000011 	.word	0x06000011
    bbb4:	00243b00 	.word	0x00243b00
    bbb8:	0000bb2d 	.word	0x0000bb2d
    bbbc:	0000bb49 	.word	0x0000bb49
    bbc0:	0000bb41 	.word	0x0000bb41

0000bbc4 <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    bbc4:	b570      	push	{r4, r5, r6, lr}
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
    bbc6:	088d      	lsrs	r5, r1, #2
	return ((Nvmctrl *)hw)->PARAM.reg;
}

static inline bool hri_nvmctrl_get_STATUS_READY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    bbc8:	8a44      	ldrh	r4, [r0, #18]
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bbca:	07e6      	lsls	r6, r4, #31
    bbcc:	d5fc      	bpl.n	bbc8 <_flash_program+0x4>
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bbce:	f24a 5415 	movw	r4, #42261	; 0xa515
    bbd2:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    bbd4:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bbd6:	07e4      	lsls	r4, r4, #31
    bbd8:	d5fc      	bpl.n	bbd4 <_flash_program+0x10>
    bbda:	00ad      	lsls	r5, r5, #2
    bbdc:	2400      	movs	r4, #0
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    bbde:	b2a6      	uxth	r6, r4
    bbe0:	429e      	cmp	r6, r3
    bbe2:	d307      	bcc.n	bbf4 <_flash_program+0x30>
    bbe4:	8a43      	ldrh	r3, [r0, #18]
		NVM_MEMORY[nvm_address++] = *ptr_read;
		ptr_read++;
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bbe6:	07db      	lsls	r3, r3, #31
    bbe8:	d5fc      	bpl.n	bbe4 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bbea:	f24a 5303 	movw	r3, #42243	; 0xa503
	((Nvmctrl *)hw)->ADDR.reg = data;
    bbee:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bbf0:	8083      	strh	r3, [r0, #4]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr);
	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_WP | NVMCTRL_CTRLB_CMDEX_KEY);
}
    bbf2:	bd70      	pop	{r4, r5, r6, pc}
		NVM_MEMORY[nvm_address++] = *ptr_read;
    bbf4:	5916      	ldr	r6, [r2, r4]
    bbf6:	5166      	str	r6, [r4, r5]
	for (i = 0; i < size; i += 4) {
    bbf8:	3404      	adds	r4, #4
    bbfa:	e7f0      	b.n	bbde <_flash_program+0x1a>

0000bbfc <_flash_init>:
{
    bbfc:	b538      	push	{r3, r4, r5, lr}
    bbfe:	460d      	mov	r5, r1
	ASSERT(device && (hw == NVMCTRL));
    bc00:	4604      	mov	r4, r0
    bc02:	b118      	cbz	r0, bc0c <_flash_init+0x10>
    bc04:	4814      	ldr	r0, [pc, #80]	; (bc58 <_flash_init+0x5c>)
    bc06:	1a0b      	subs	r3, r1, r0
    bc08:	4258      	negs	r0, r3
    bc0a:	4158      	adcs	r0, r3
    bc0c:	4913      	ldr	r1, [pc, #76]	; (bc5c <_flash_init+0x60>)
    bc0e:	4b14      	ldr	r3, [pc, #80]	; (bc60 <_flash_init+0x64>)
    bc10:	224b      	movs	r2, #75	; 0x4b
    bc12:	4798      	blx	r3
	return ((Nvmctrl *)hw)->CTRLA.reg;
    bc14:	882b      	ldrh	r3, [r5, #0]
	device->hw = hw;
    bc16:	6125      	str	r5, [r4, #16]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    bc18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    bc1c:	049b      	lsls	r3, r3, #18
    bc1e:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    bc20:	802b      	strh	r3, [r5, #0]
	_nvm_dev = device;
    bc22:	4b10      	ldr	r3, [pc, #64]	; (bc64 <_flash_init+0x68>)
    bc24:	601c      	str	r4, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bc26:	4b10      	ldr	r3, [pc, #64]	; (bc68 <_flash_init+0x6c>)
    bc28:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    bc2c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    bc30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bc34:	f3bf 8f6f 	isb	sy
    bc38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bc3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    bc40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bc44:	f3bf 8f6f 	isb	sy
}
    bc48:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bc4a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    bc4e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bc52:	6019      	str	r1, [r3, #0]
    bc54:	601a      	str	r2, [r3, #0]
    bc56:	bd38      	pop	{r3, r4, r5, pc}
    bc58:	41004000 	.word	0x41004000
    bc5c:	000159f3 	.word	0x000159f3
    bc60:	0000d305 	.word	0x0000d305
    bc64:	2000083c 	.word	0x2000083c
    bc68:	e000e100 	.word	0xe000e100

0000bc6c <_flash_get_page_size>:
}
    bc6c:	f44f 7000 	mov.w	r0, #512	; 0x200
    bc70:	4770      	bx	lr

0000bc72 <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    bc72:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    bc74:	6898      	ldr	r0, [r3, #8]
}
    bc76:	b280      	uxth	r0, r0
    bc78:	4770      	bx	lr

0000bc7a <_flash_read>:
{
    bc7a:	b510      	push	{r4, lr}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    bc7c:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    bc7e:	8a60      	ldrh	r0, [r4, #18]
    bc80:	07c0      	lsls	r0, r0, #31
    bc82:	d5fc      	bpl.n	bc7e <_flash_read+0x4>
	for (i = 0; i < length; i++) {
    bc84:	2000      	movs	r0, #0
    bc86:	e002      	b.n	bc8e <_flash_read+0x14>
		buffer[i] = nvm_addr[src_addr + i];
    bc88:	5c44      	ldrb	r4, [r0, r1]
    bc8a:	5414      	strb	r4, [r2, r0]
	for (i = 0; i < length; i++) {
    bc8c:	3001      	adds	r0, #1
    bc8e:	4298      	cmp	r0, r3
    bc90:	d1fa      	bne.n	bc88 <_flash_read+0xe>
}
    bc92:	bd10      	pop	{r4, pc}

0000bc94 <_flash_write>:
{
    bc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc98:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    bc9c:	b083      	sub	sp, #12
    bc9e:	4606      	mov	r6, r0
    bca0:	460c      	mov	r4, r1
    bca2:	4617      	mov	r7, r2
    bca4:	9301      	str	r3, [sp, #4]
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    bca6:	f424 59ff 	bic.w	r9, r4, #8160	; 0x1fe0
    bcaa:	f029 091f 	bic.w	r9, r9, #31
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    bcae:	f509 5aff 	add.w	sl, r9, #8160	; 0x1fe0
    bcb2:	f10a 0a1f 	add.w	sl, sl, #31
    bcb6:	f04f 0800 	mov.w	r8, #0
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    bcba:	aa02      	add	r2, sp, #8
    bcbc:	4442      	add	r2, r8
    bcbe:	eb09 0108 	add.w	r1, r9, r8
    bcc2:	4d24      	ldr	r5, [pc, #144]	; (bd54 <_flash_write+0xc0>)
    bcc4:	f44f 7300 	mov.w	r3, #512	; 0x200
    bcc8:	4630      	mov	r0, r6
    bcca:	f508 7800 	add.w	r8, r8, #512	; 0x200
    bcce:	47a8      	blx	r5
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    bcd0:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    bcd4:	d1f1      	bne.n	bcba <_flash_write+0x26>
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    bcd6:	eba4 0309 	sub.w	r3, r4, r9
    bcda:	0a5a      	lsrs	r2, r3, #9
		k = wr_start_addr - block_start_addr - j * NVMCTRL_PAGE_SIZE;
    bcdc:	4639      	mov	r1, r7
    bcde:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    bce2:	4554      	cmp	r4, sl
    bce4:	460f      	mov	r7, r1
    bce6:	d801      	bhi.n	bcec <_flash_write+0x58>
    bce8:	9801      	ldr	r0, [sp, #4]
    bcea:	bb18      	cbnz	r0, bd34 <_flash_write+0xa0>
		_flash_erase_block(device->hw, block_start_addr);
    bcec:	6933      	ldr	r3, [r6, #16]
    bcee:	8a5a      	ldrh	r2, [r3, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bcf0:	07d2      	lsls	r2, r2, #31
    bcf2:	d5fc      	bpl.n	bcee <_flash_write+0x5a>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bcf4:	f24a 5201 	movw	r2, #42241	; 0xa501
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    bcf8:	f8df b05c 	ldr.w	fp, [pc, #92]	; bd58 <_flash_write+0xc4>
	((Nvmctrl *)hw)->ADDR.reg = data;
    bcfc:	f8c3 9014 	str.w	r9, [r3, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bd00:	f04f 0800 	mov.w	r8, #0
    bd04:	809a      	strh	r2, [r3, #4]
    bd06:	aa02      	add	r2, sp, #8
    bd08:	4442      	add	r2, r8
    bd0a:	eb09 0108 	add.w	r1, r9, r8
    bd0e:	6930      	ldr	r0, [r6, #16]
    bd10:	f44f 7300 	mov.w	r3, #512	; 0x200
    bd14:	f508 7800 	add.w	r8, r8, #512	; 0x200
    bd18:	47d8      	blx	fp
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    bd1a:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    bd1e:	d1f2      	bne.n	bd06 <_flash_write+0x72>
	} while (block_end_addr < (wr_start_addr + length - 1));
    bd20:	9b01      	ldr	r3, [sp, #4]
    bd22:	4423      	add	r3, r4
    bd24:	3b01      	subs	r3, #1
    bd26:	4553      	cmp	r3, sl
    bd28:	d8bd      	bhi.n	bca6 <_flash_write+0x12>
}
    bd2a:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    bd2e:	b003      	add	sp, #12
    bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tmp_buffer[j][k] = *buffer;
    bd34:	a802      	add	r0, sp, #8
    bd36:	eb00 2042 	add.w	r0, r0, r2, lsl #9
    bd3a:	783f      	ldrb	r7, [r7, #0]
    bd3c:	54c7      	strb	r7, [r0, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    bd3e:	3301      	adds	r3, #1
    bd40:	f3c3 0308 	ubfx	r3, r3, #0, #9
			if (0 == k) {
    bd44:	3101      	adds	r1, #1
    bd46:	b903      	cbnz	r3, bd4a <_flash_write+0xb6>
				j++;
    bd48:	3201      	adds	r2, #1
			length--;
    bd4a:	9801      	ldr	r0, [sp, #4]
    bd4c:	3801      	subs	r0, #1
			wr_start_addr++;
    bd4e:	3401      	adds	r4, #1
			length--;
    bd50:	9001      	str	r0, [sp, #4]
    bd52:	e7c6      	b.n	bce2 <_flash_write+0x4e>
    bd54:	0000bc7b 	.word	0x0000bc7b
    bd58:	0000bbc5 	.word	0x0000bbc5

0000bd5c <_flash_erase>:
{
    bd5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    bd60:	f421 54ff 	bic.w	r4, r1, #8160	; 0x1fe0
{
    bd64:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    bd68:	460e      	mov	r6, r1
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    bd6a:	4b25      	ldr	r3, [pc, #148]	; (be00 <_flash_erase+0xa4>)
{
    bd6c:	4607      	mov	r7, r0
    bd6e:	4615      	mov	r5, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    bd70:	f024 041f 	bic.w	r4, r4, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    bd74:	f44f 7200 	mov.w	r2, #512	; 0x200
    bd78:	21ff      	movs	r1, #255	; 0xff
    bd7a:	4668      	mov	r0, sp
    bd7c:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    bd7e:	42a6      	cmp	r6, r4
    bd80:	d11e      	bne.n	bdc0 <_flash_erase+0x64>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    bd82:	4622      	mov	r2, r4
    bd84:	462b      	mov	r3, r5
    bd86:	f24a 5001 	movw	r0, #42241	; 0xa501
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    bd8a:	2b0f      	cmp	r3, #15
    bd8c:	d82e      	bhi.n	bdec <_flash_erase+0x90>
    bd8e:	0929      	lsrs	r1, r5, #4
    bd90:	f06f 020f 	mvn.w	r2, #15
    bd94:	fb02 5501 	mla	r5, r2, r1, r5
    bd98:	eb04 3441 	add.w	r4, r4, r1, lsl #13
	if (page_nums != 0) {
    bd9c:	b165      	cbz	r5, bdb8 <_flash_erase+0x5c>
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    bd9e:	4e19      	ldr	r6, [pc, #100]	; (be04 <_flash_erase+0xa8>)
    bda0:	eb04 2545 	add.w	r5, r4, r5, lsl #9
    bda4:	4621      	mov	r1, r4
    bda6:	f44f 7300 	mov.w	r3, #512	; 0x200
    bdaa:	466a      	mov	r2, sp
    bdac:	4638      	mov	r0, r7
			block_start_addr += NVMCTRL_PAGE_SIZE;
    bdae:	f504 7400 	add.w	r4, r4, #512	; 0x200
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    bdb2:	47b0      	blx	r6
		for (i = 0; i < page_nums; i++) {
    bdb4:	42a5      	cmp	r5, r4
    bdb6:	d1f5      	bne.n	bda4 <_flash_erase+0x48>
}
    bdb8:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bdbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    bdc0:	f504 5800 	add.w	r8, r4, #8192	; 0x2000
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    bdc4:	f506 59f0 	add.w	r9, r6, #7680	; 0x1e00
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    bdc8:	4634      	mov	r4, r6
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    bdca:	4e0e      	ldr	r6, [pc, #56]	; (be04 <_flash_erase+0xa8>)
    bdcc:	f44f 7300 	mov.w	r3, #512	; 0x200
    bdd0:	466a      	mov	r2, sp
    bdd2:	4621      	mov	r1, r4
    bdd4:	4638      	mov	r0, r7
    bdd6:	47b0      	blx	r6
			if (--page_nums == 0) {
    bdd8:	3d01      	subs	r5, #1
    bdda:	d0ed      	beq.n	bdb8 <_flash_erase+0x5c>
			dst_addr += NVMCTRL_PAGE_SIZE;
    bddc:	f504 7400 	add.w	r4, r4, #512	; 0x200
			if (dst_addr == block_start_addr) {
    bde0:	45a0      	cmp	r8, r4
    bde2:	d0ce      	beq.n	bd82 <_flash_erase+0x26>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    bde4:	45a1      	cmp	r9, r4
    bde6:	d1f1      	bne.n	bdcc <_flash_erase+0x70>
    bde8:	4644      	mov	r4, r8
    bdea:	e7ca      	b.n	bd82 <_flash_erase+0x26>
		_flash_erase_block(device->hw, block_start_addr);
    bdec:	6939      	ldr	r1, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    bdee:	8a4e      	ldrh	r6, [r1, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bdf0:	07f6      	lsls	r6, r6, #31
    bdf2:	d5fc      	bpl.n	bdee <_flash_erase+0x92>
	((Nvmctrl *)hw)->ADDR.reg = data;
    bdf4:	614a      	str	r2, [r1, #20]
		page_nums -= NVMCTRL_BLOCK_PAGES;
    bdf6:	3b10      	subs	r3, #16
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bdf8:	8088      	strh	r0, [r1, #4]
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    bdfa:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		page_nums -= NVMCTRL_BLOCK_PAGES;
    bdfe:	e7c4      	b.n	bd8a <_flash_erase+0x2e>
    be00:	00012cf5 	.word	0x00012cf5
    be04:	0000bc95 	.word	0x0000bc95

0000be08 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    be08:	6903      	ldr	r3, [r0, #16]
    be0a:	f3c1 31cf 	ubfx	r1, r1, #15, #16
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    be0e:	699a      	ldr	r2, [r3, #24]
    be10:	2301      	movs	r3, #1
    be12:	fa03 f101 	lsl.w	r1, r3, r1
    be16:	4211      	tst	r1, r2
}
    be18:	bf0c      	ite	eq
    be1a:	4618      	moveq	r0, r3
    be1c:	2000      	movne	r0, #0
    be1e:	4770      	bx	lr

0000be20 <NVMCTRL_0_Handler>:
/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
	_nvm_interrupt_handler(_nvm_dev);
    be20:	4b09      	ldr	r3, [pc, #36]	; (be48 <NVMCTRL_0_Handler+0x28>)
    be22:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    be24:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    be26:	8a1a      	ldrh	r2, [r3, #16]
	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    be28:	07d2      	lsls	r2, r2, #31
    be2a:	d504      	bpl.n	be36 <NVMCTRL_0_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    be2c:	2201      	movs	r2, #1
    be2e:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.ready_cb) {
    be30:	6803      	ldr	r3, [r0, #0]
		if (NULL != device->flash_cb.error_cb) {
    be32:	b143      	cbz	r3, be46 <NVMCTRL_0_Handler+0x26>
			device->flash_cb.error_cb(device);
    be34:	4718      	bx	r3
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    be36:	8a1a      	ldrh	r2, [r3, #16]
    be38:	b292      	uxth	r2, r2
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    be3a:	b122      	cbz	r2, be46 <NVMCTRL_0_Handler+0x26>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    be3c:	f240 225e 	movw	r2, #606	; 0x25e
    be40:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.error_cb) {
    be42:	6843      	ldr	r3, [r0, #4]
    be44:	e7f5      	b.n	be32 <NVMCTRL_0_Handler+0x12>
}
    be46:	4770      	bx	lr
    be48:	2000083c 	.word	0x2000083c

0000be4c <NVMCTRL_1_Handler>:
    be4c:	4b00      	ldr	r3, [pc, #0]	; (be50 <NVMCTRL_1_Handler+0x4>)
    be4e:	4718      	bx	r3
    be50:	0000be21 	.word	0x0000be21

0000be54 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    be54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CRITICAL_SECTION_ENTER();
    be56:	4b0e      	ldr	r3, [pc, #56]	; (be90 <gpio_get_pin_level+0x3c>)
    be58:	4605      	mov	r5, r0
    be5a:	a801      	add	r0, sp, #4
    be5c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    be5e:	4a0d      	ldr	r2, [pc, #52]	; (be94 <gpio_get_pin_level+0x40>)
    be60:	096b      	lsrs	r3, r5, #5
    be62:	01d9      	lsls	r1, r3, #7
    be64:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    be68:	5851      	ldr	r1, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    be6a:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    be6c:	691c      	ldr	r4, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    be6e:	4b0a      	ldr	r3, [pc, #40]	; (be98 <gpio_get_pin_level+0x44>)
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    be70:	4054      	eors	r4, r2
    be72:	400c      	ands	r4, r1
	CRITICAL_SECTION_LEAVE();
    be74:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    be76:	4054      	eors	r4, r2
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    be78:	f005 051f 	and.w	r5, r5, #31
	CRITICAL_SECTION_LEAVE();
    be7c:	4798      	blx	r3
    be7e:	2001      	movs	r0, #1
    be80:	fa00 f505 	lsl.w	r5, r0, r5
    be84:	4225      	tst	r5, r4
}
    be86:	bf08      	it	eq
    be88:	2000      	moveq	r0, #0
    be8a:	b003      	add	sp, #12
    be8c:	bd30      	pop	{r4, r5, pc}
    be8e:	bf00      	nop
    be90:	00011569 	.word	0x00011569
    be94:	41008000 	.word	0x41008000
    be98:	00011577 	.word	0x00011577

0000be9c <hiddf_demo_sof_event>:
#endif /* CONF_USB_COMPOSITE_CDC_ECHO_DEMO */

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
static uint32_t pin_btn1, pin_btn2, pin_btn3;
static void     hiddf_demo_sof_event(void)
{
    be9c:	b570      	push	{r4, r5, r6, lr}
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    be9e:	4a15      	ldr	r2, [pc, #84]	; (bef4 <hiddf_demo_sof_event+0x58>)
    bea0:	7913      	ldrb	r3, [r2, #4]
    bea2:	2b0a      	cmp	r3, #10
    bea4:	4614      	mov	r4, r2
    bea6:	d802      	bhi.n	beae <hiddf_demo_sof_event+0x12>
    bea8:	3301      	adds	r3, #1
    beaa:	7113      	strb	r3, [r2, #4]
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    beac:	bd70      	pop	{r4, r5, r6, pc}
		interval = 0;
    beae:	2300      	movs	r3, #0
		if (!gpio_get_pin_level(pin_btn1)) {
    beb0:	7a10      	ldrb	r0, [r2, #8]
    beb2:	4d11      	ldr	r5, [pc, #68]	; (bef8 <hiddf_demo_sof_event+0x5c>)
		interval = 0;
    beb4:	7113      	strb	r3, [r2, #4]
		if (!gpio_get_pin_level(pin_btn1)) {
    beb6:	47a8      	blx	r5
    beb8:	b920      	cbnz	r0, bec4 <hiddf_demo_sof_event+0x28>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    beba:	4b10      	ldr	r3, [pc, #64]	; (befc <hiddf_demo_sof_event+0x60>)
    bebc:	2101      	movs	r1, #1
    bebe:	f06f 0004 	mvn.w	r0, #4
    bec2:	4798      	blx	r3
		if (!gpio_get_pin_level(pin_btn3)) {
    bec4:	7b20      	ldrb	r0, [r4, #12]
    bec6:	47a8      	blx	r5
    bec8:	b918      	cbnz	r0, bed2 <hiddf_demo_sof_event+0x36>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    beca:	4b0c      	ldr	r3, [pc, #48]	; (befc <hiddf_demo_sof_event+0x60>)
    becc:	2101      	movs	r1, #1
    bece:	2005      	movs	r0, #5
    bed0:	4798      	blx	r3
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    bed2:	7c20      	ldrb	r0, [r4, #16]
    bed4:	47a8      	blx	r5
    bed6:	7d22      	ldrb	r2, [r4, #20]
    bed8:	f080 0001 	eor.w	r0, r0, #1
    bedc:	b2c3      	uxtb	r3, r0
    bede:	429a      	cmp	r2, r3
    bee0:	d0e4      	beq.n	beac <hiddf_demo_sof_event+0x10>
			b_btn_last_state = b_btn_state;
    bee2:	4807      	ldr	r0, [pc, #28]	; (bf00 <hiddf_demo_sof_event+0x64>)
    bee4:	7523      	strb	r3, [r4, #20]
			if (1 == b_btn_last_state) {
    bee6:	7083      	strb	r3, [r0, #2]
}
    bee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			hiddf_keyboard_keys_state_change(key_array, 1);
    beec:	4b05      	ldr	r3, [pc, #20]	; (bf04 <hiddf_demo_sof_event+0x68>)
    beee:	2101      	movs	r1, #1
    bef0:	4718      	bx	r3
    bef2:	bf00      	nop
    bef4:	20000840 	.word	0x20000840
    bef8:	0000be55 	.word	0x0000be55
    befc:	0000d2bd 	.word	0x0000d2bd
    bf00:	20000358 	.word	0x20000358
    bf04:	0000dd49 	.word	0x0000dd49

0000bf08 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    bf08:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    bf0a:	4b05      	ldr	r3, [pc, #20]	; (bf20 <composite_device_init+0x18>)
    bf0c:	4805      	ldr	r0, [pc, #20]	; (bf24 <composite_device_init+0x1c>)
    bf0e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    bf10:	4b05      	ldr	r3, [pc, #20]	; (bf28 <composite_device_init+0x20>)
    bf12:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    bf14:	4b05      	ldr	r3, [pc, #20]	; (bf2c <composite_device_init+0x24>)
    bf16:	4798      	blx	r3
	hiddf_keyboard_init();
#endif
#if CONF_USB_COMPOSITE_MSC_EN
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}
    bf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hiddf_keyboard_init();
    bf1c:	4b04      	ldr	r3, [pc, #16]	; (bf30 <composite_device_init+0x28>)
    bf1e:	4718      	bx	r3
    bf20:	00011e9d 	.word	0x00011e9d
    bf24:	20000855 	.word	0x20000855
    bf28:	0000ba1d 	.word	0x0000ba1d
    bf2c:	0000d279 	.word	0x0000d279
    bf30:	0000dd05 	.word	0x0000dd05

0000bf34 <composite_device_start>:

void composite_device_start(void)
{
    bf34:	b510      	push	{r4, lr}
	usbdc_start(multi_desc);
    bf36:	4b03      	ldr	r3, [pc, #12]	; (bf44 <composite_device_start+0x10>)
    bf38:	4803      	ldr	r0, [pc, #12]	; (bf48 <composite_device_start+0x14>)
    bf3a:	4798      	blx	r3
	usbdc_attach();
}
    bf3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbdc_attach();
    bf40:	4b02      	ldr	r3, [pc, #8]	; (bf4c <composite_device_start+0x18>)
    bf42:	4718      	bx	r3
    bf44:	00011f09 	.word	0x00011f09
    bf48:	20000364 	.word	0x20000364
    bf4c:	00011f3d 	.word	0x00011f3d

0000bf50 <usb_init>:
}

void usb_init(void)
{

	composite_device_init();
    bf50:	4b00      	ldr	r3, [pc, #0]	; (bf54 <usb_init+0x4>)
    bf52:	4718      	bx	r3
    bf54:	0000bf09 	.word	0x0000bf09

0000bf58 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    bf58:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    bf5a:	6805      	ldr	r5, [r0, #0]

	if (!head) {
    bf5c:	b91d      	cbnz	r5, bf66 <timer_add_timer_task+0xe>
		list_insert_as_head(list, new_task);
    bf5e:	4b0f      	ldr	r3, [pc, #60]	; (bf9c <timer_add_timer_task+0x44>)
	if (it == head) {
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
	}
}
    bf60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		list_insert_after(prev, new_task);
    bf64:	4718      	bx	r3
		if (time_left >= new_task->interval)
    bf66:	f8d1 c008 	ldr.w	ip, [r1, #8]
    bf6a:	462c      	mov	r4, r5
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    bf6c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    bf6e:	f1c2 0e01 	rsb	lr, r2, #1
		if (it->time_label <= time) {
    bf72:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    bf76:	4293      	cmp	r3, r2
			time_left = it->interval - (time - it->time_label);
    bf78:	bf95      	itete	ls
    bf7a:	19db      	addls	r3, r3, r7
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    bf7c:	4473      	addhi	r3, lr
			time_left = it->interval - (time - it->time_label);
    bf7e:	1a9b      	subls	r3, r3, r2
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    bf80:	19db      	addhi	r3, r3, r7
		if (time_left >= new_task->interval)
    bf82:	459c      	cmp	ip, r3
    bf84:	d907      	bls.n	bf96 <timer_add_timer_task+0x3e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    bf86:	6823      	ldr	r3, [r4, #0]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    bf88:	4626      	mov	r6, r4
    bf8a:	b913      	cbnz	r3, bf92 <timer_add_timer_task+0x3a>
		list_insert_after(prev, new_task);
    bf8c:	4b04      	ldr	r3, [pc, #16]	; (bfa0 <timer_add_timer_task+0x48>)
    bf8e:	4630      	mov	r0, r6
    bf90:	e7e6      	b.n	bf60 <timer_add_timer_task+0x8>
    bf92:	461c      	mov	r4, r3
    bf94:	e7ed      	b.n	bf72 <timer_add_timer_task+0x1a>
	if (it == head) {
    bf96:	42a5      	cmp	r5, r4
    bf98:	d0e1      	beq.n	bf5e <timer_add_timer_task+0x6>
    bf9a:	e7f7      	b.n	bf8c <timer_add_timer_task+0x34>
    bf9c:	0000f255 	.word	0x0000f255
    bfa0:	0000f281 	.word	0x0000f281

0000bfa4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    bfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    bfa8:	e9d0 6504 	ldrd	r6, r5, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    bfac:	7e03      	ldrb	r3, [r0, #24]
	uint32_t                 time  = ++timer->time;
    bfae:	3601      	adds	r6, #1
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    bfb0:	07da      	lsls	r2, r3, #31
{
    bfb2:	4604      	mov	r4, r0
	uint32_t                 time  = ++timer->time;
    bfb4:	6106      	str	r6, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    bfb6:	d41f      	bmi.n	bff8 <timer_process_counted+0x54>
    bfb8:	7e03      	ldrb	r3, [r0, #24]
    bfba:	079b      	lsls	r3, r3, #30
    bfbc:	d41c      	bmi.n	bff8 <timer_process_counted+0x54>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    bfbe:	f8df 8044 	ldr.w	r8, [pc, #68]	; c004 <timer_process_counted+0x60>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    bfc2:	f8df 9044 	ldr.w	r9, [pc, #68]	; c008 <timer_process_counted+0x64>
		list_remove_head(&timer->tasks);
    bfc6:	f100 0714 	add.w	r7, r0, #20
	while (it && ((time - it->time_label) >= it->interval)) {
    bfca:	b1cd      	cbz	r5, c000 <timer_process_counted+0x5c>
    bfcc:	686b      	ldr	r3, [r5, #4]
    bfce:	68aa      	ldr	r2, [r5, #8]
    bfd0:	1af3      	subs	r3, r6, r3
    bfd2:	4293      	cmp	r3, r2
    bfd4:	d314      	bcc.n	c000 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    bfd6:	4638      	mov	r0, r7
    bfd8:	47c0      	blx	r8
		if (TIMER_TASK_REPEAT == tmp->mode) {
    bfda:	7c2b      	ldrb	r3, [r5, #16]
    bfdc:	2b01      	cmp	r3, #1
    bfde:	d104      	bne.n	bfea <timer_process_counted+0x46>
			tmp->time_label = time;
    bfe0:	606e      	str	r6, [r5, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    bfe2:	4632      	mov	r2, r6
    bfe4:	4629      	mov	r1, r5
    bfe6:	4638      	mov	r0, r7
    bfe8:	47c8      	blx	r9
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    bfea:	f8d4 a014 	ldr.w	sl, [r4, #20]

		tmp->cb(tmp);
    bfee:	68eb      	ldr	r3, [r5, #12]
    bff0:	4628      	mov	r0, r5
    bff2:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    bff4:	4655      	mov	r5, sl
    bff6:	e7e8      	b.n	bfca <timer_process_counted+0x26>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    bff8:	7e23      	ldrb	r3, [r4, #24]
    bffa:	f043 0302 	orr.w	r3, r3, #2
    bffe:	7623      	strb	r3, [r4, #24]
	}
}
    c000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c004:	0000f2c9 	.word	0x0000f2c9
    c008:	0000bf59 	.word	0x0000bf59

0000c00c <timer_init>:
{
    c00c:	b570      	push	{r4, r5, r6, lr}
    c00e:	460d      	mov	r5, r1
    c010:	4616      	mov	r6, r2
	ASSERT(descr && hw && func);
    c012:	4604      	mov	r4, r0
    c014:	b118      	cbz	r0, c01e <timer_init+0x12>
    c016:	b189      	cbz	r1, c03c <timer_init+0x30>
    c018:	1e10      	subs	r0, r2, #0
    c01a:	bf18      	it	ne
    c01c:	2001      	movne	r0, #1
    c01e:	223b      	movs	r2, #59	; 0x3b
    c020:	4907      	ldr	r1, [pc, #28]	; (c040 <timer_init+0x34>)
    c022:	4b08      	ldr	r3, [pc, #32]	; (c044 <timer_init+0x38>)
    c024:	4798      	blx	r3
	descr->func = func;
    c026:	4620      	mov	r0, r4
	descr->func->init(&descr->device, hw);
    c028:	6833      	ldr	r3, [r6, #0]
	descr->func = func;
    c02a:	f840 6b04 	str.w	r6, [r0], #4
	descr->func->init(&descr->device, hw);
    c02e:	4629      	mov	r1, r5
    c030:	4798      	blx	r3
	descr->device.timer_cb.period_expired = timer_process_counted;
    c032:	4b05      	ldr	r3, [pc, #20]	; (c048 <timer_init+0x3c>)
    c034:	6063      	str	r3, [r4, #4]
	descr->time                           = 0;
    c036:	2000      	movs	r0, #0
    c038:	6160      	str	r0, [r4, #20]
}
    c03a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    c03c:	4608      	mov	r0, r1
    c03e:	e7ee      	b.n	c01e <timer_init+0x12>
    c040:	00015a10 	.word	0x00015a10
    c044:	0000d305 	.word	0x0000d305
    c048:	0000bfa5 	.word	0x0000bfa5

0000c04c <timer_start>:
{
    c04c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr && descr->func);
    c04e:	4605      	mov	r5, r0
    c050:	b118      	cbz	r0, c05a <timer_start+0xe>
    c052:	6800      	ldr	r0, [r0, #0]
    c054:	3800      	subs	r0, #0
    c056:	bf18      	it	ne
    c058:	2001      	movne	r0, #1
	if (descr->func->is_timer_started(&descr->device)) {
    c05a:	462e      	mov	r6, r5
	ASSERT(descr && descr->func);
    c05c:	4909      	ldr	r1, [pc, #36]	; (c084 <timer_start+0x38>)
    c05e:	4b0a      	ldr	r3, [pc, #40]	; (c088 <timer_start+0x3c>)
    c060:	2254      	movs	r2, #84	; 0x54
    c062:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    c064:	f856 3b04 	ldr.w	r3, [r6], #4
    c068:	699b      	ldr	r3, [r3, #24]
    c06a:	4630      	mov	r0, r6
    c06c:	4798      	blx	r3
    c06e:	4604      	mov	r4, r0
    c070:	b928      	cbnz	r0, c07e <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    c072:	682b      	ldr	r3, [r5, #0]
    c074:	4630      	mov	r0, r6
    c076:	689b      	ldr	r3, [r3, #8]
    c078:	4798      	blx	r3
	return ERR_NONE;
    c07a:	4620      	mov	r0, r4
}
    c07c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    c07e:	f06f 0010 	mvn.w	r0, #16
    c082:	e7fb      	b.n	c07c <timer_start+0x30>
    c084:	00015a10 	.word	0x00015a10
    c088:	0000d305 	.word	0x0000d305

0000c08c <timer_add_task>:
{
    c08c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c090:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    c092:	4604      	mov	r4, r0
    c094:	b120      	cbz	r0, c0a0 <timer_add_task+0x14>
    c096:	b309      	cbz	r1, c0dc <timer_add_task+0x50>
    c098:	6800      	ldr	r0, [r0, #0]
    c09a:	3800      	subs	r0, #0
    c09c:	bf18      	it	ne
    c09e:	2001      	movne	r0, #1
    c0a0:	4920      	ldr	r1, [pc, #128]	; (c124 <timer_add_task+0x98>)
    c0a2:	f8df 8094 	ldr.w	r8, [pc, #148]	; c138 <timer_add_task+0xac>
    c0a6:	227b      	movs	r2, #123	; 0x7b
    c0a8:	47c0      	blx	r8
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    c0aa:	7f23      	ldrb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    c0ac:	f104 0718 	add.w	r7, r4, #24
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    c0b0:	f043 0301 	orr.w	r3, r3, #1
    c0b4:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    c0b6:	4629      	mov	r1, r5
    c0b8:	4b1b      	ldr	r3, [pc, #108]	; (c128 <timer_add_task+0x9c>)
    c0ba:	4638      	mov	r0, r7
    c0bc:	4798      	blx	r3
    c0be:	4606      	mov	r6, r0
    c0c0:	b170      	cbz	r0, c0e0 <timer_add_task+0x54>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    c0c2:	7f23      	ldrb	r3, [r4, #28]
		ASSERT(false);
    c0c4:	4917      	ldr	r1, [pc, #92]	; (c124 <timer_add_task+0x98>)
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    c0c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		ASSERT(false);
    c0ca:	2000      	movs	r0, #0
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    c0cc:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    c0ce:	2280      	movs	r2, #128	; 0x80
    c0d0:	47c0      	blx	r8
		return ERR_ALREADY_INITIALIZED;
    c0d2:	f06f 0011 	mvn.w	r0, #17
}
    c0d6:	b002      	add	sp, #8
    c0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(descr && task && descr->func);
    c0dc:	4608      	mov	r0, r1
    c0de:	e7df      	b.n	c0a0 <timer_add_task+0x14>
	task->time_label = descr->time;
    c0e0:	6962      	ldr	r2, [r4, #20]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    c0e2:	4b12      	ldr	r3, [pc, #72]	; (c12c <timer_add_task+0xa0>)
	task->time_label = descr->time;
    c0e4:	606a      	str	r2, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    c0e6:	4629      	mov	r1, r5
    c0e8:	4638      	mov	r0, r7
    c0ea:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    c0ec:	7f23      	ldrb	r3, [r4, #28]
    c0ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    c0f2:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    c0f4:	7f23      	ldrb	r3, [r4, #28]
    c0f6:	f013 0302 	ands.w	r3, r3, #2
    c0fa:	d010      	beq.n	c11e <timer_add_task+0x92>
		CRITICAL_SECTION_ENTER()
    c0fc:	4b0c      	ldr	r3, [pc, #48]	; (c130 <timer_add_task+0xa4>)
    c0fe:	a801      	add	r0, sp, #4
    c100:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    c102:	7f23      	ldrb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    c104:	4620      	mov	r0, r4
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    c106:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c10a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    c10c:	f850 3b04 	ldr.w	r3, [r0], #4
    c110:	69db      	ldr	r3, [r3, #28]
    c112:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    c114:	a801      	add	r0, sp, #4
    c116:	4b07      	ldr	r3, [pc, #28]	; (c134 <timer_add_task+0xa8>)
    c118:	4798      	blx	r3
	return ERR_NONE;
    c11a:	4630      	mov	r0, r6
    c11c:	e7db      	b.n	c0d6 <timer_add_task+0x4a>
    c11e:	4618      	mov	r0, r3
    c120:	e7d9      	b.n	c0d6 <timer_add_task+0x4a>
    c122:	bf00      	nop
    c124:	00015a10 	.word	0x00015a10
    c128:	0000f245 	.word	0x0000f245
    c12c:	0000bf59 	.word	0x0000bf59
    c130:	00011569 	.word	0x00011569
    c134:	00011577 	.word	0x00011577
    c138:	0000d305 	.word	0x0000d305

0000c13c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    c13c:	2000      	movs	r0, #0
    c13e:	4770      	bx	lr

0000c140 <_usb_d_dev_wait_dfll_rdy>:
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    c140:	4b07      	ldr	r3, [pc, #28]	; (c160 <_usb_d_dev_wait_dfll_rdy+0x20>)
    c142:	f893 2020 	ldrb.w	r2, [r3, #32]
/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    c146:	07d1      	lsls	r1, r2, #31
    c148:	d506      	bpl.n	c158 <_usb_d_dev_wait_dfll_rdy+0x18>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c14a:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    c14c:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    c150:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    c154:	d1f9      	bne.n	c14a <_usb_d_dev_wait_dfll_rdy+0xa>
    c156:	4770      	bx	lr
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c158:	691a      	ldr	r2, [r3, #16]
		       != (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    c15a:	05d2      	lsls	r2, r2, #23
    c15c:	d5fc      	bpl.n	c158 <_usb_d_dev_wait_dfll_rdy+0x18>
			;
	}
}
    c15e:	4770      	bx	lr
    c160:	40001000 	.word	0x40001000

0000c164 <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    c164:	b110      	cbz	r0, c16c <_usb_d_dev_ept+0x8>
    c166:	b109      	cbz	r1, c16c <_usb_d_dev_ept+0x8>
    c168:	3005      	adds	r0, #5
    c16a:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    c16c:	2314      	movs	r3, #20
    c16e:	fb00 3003 	mla	r0, r0, r3, r3
}
    c172:	4b01      	ldr	r3, [pc, #4]	; (c178 <_usb_d_dev_ept+0x14>)
    c174:	4418      	add	r0, r3
    c176:	4770      	bx	lr
    c178:	20000898 	.word	0x20000898

0000c17c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    c17c:	b430      	push	{r4, r5}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c17e:	7cc1      	ldrb	r1, [r0, #19]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    c180:	7c85      	ldrb	r5, [r0, #18]

	if (!is_ctrl) {
    c182:	f001 0307 	and.w	r3, r1, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    c186:	f005 020f 	and.w	r2, r5, #15
	if (!is_ctrl) {
    c18a:	2b01      	cmp	r3, #1
    c18c:	ea4f 1442 	mov.w	r4, r2, lsl #5
    c190:	f102 0308 	add.w	r3, r2, #8
    c194:	d00a      	beq.n	c1ac <_usb_d_dev_handle_setup+0x30>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c196:	015a      	lsls	r2, r3, #5
    c198:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    c19c:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c1a0:	2110      	movs	r1, #16
    c1a2:	71d1      	strb	r1, [r2, #7]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    c1a4:	bc30      	pop	{r4, r5}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    c1a6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    c1aa:	4770      	bx	lr
	if (_usb_d_dev_ep_is_busy(ept)) {
    c1ac:	f011 0f40 	tst.w	r1, #64	; 0x40
    c1b0:	d00b      	beq.n	c1ca <_usb_d_dev_handle_setup+0x4e>
		ept->flags.bits.is_busy = 0;
    c1b2:	0152      	lsls	r2, r2, #5
    c1b4:	f36f 1186 	bfc	r1, #6, #1
    c1b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c1bc:	74c1      	strb	r1, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c1be:	2180      	movs	r1, #128	; 0x80
    c1c0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c1c4:	2140      	movs	r1, #64	; 0x40
    c1c6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
    c1ca:	7cc2      	ldrb	r2, [r0, #19]
    c1cc:	f36f 02c3 	bfc	r2, #3, #1
    c1d0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    c1d2:	4a0a      	ldr	r2, [pc, #40]	; (c1fc <_usb_d_dev_handle_setup+0x80>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c1d4:	015b      	lsls	r3, r3, #5
    c1d6:	1911      	adds	r1, r2, r4
    c1d8:	2000      	movs	r0, #0
    c1da:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c1de:	f881 023a 	strb.w	r0, [r1, #570]	; 0x23a
    c1e2:	f881 024a 	strb.w	r0, [r1, #586]	; 0x24a
    c1e6:	216f      	movs	r1, #111	; 0x6f
    c1e8:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c1ea:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	dev_inst.ep_callbacks.setup(ept->ep);
    c1ee:	4628      	mov	r0, r5
    c1f0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    c1f4:	bc30      	pop	{r4, r5}
	dev_inst.ep_callbacks.setup(ept->ep);
    c1f6:	6893      	ldr	r3, [r2, #8]
    c1f8:	4718      	bx	r3
    c1fa:	bf00      	nop
    c1fc:	20000898 	.word	0x20000898

0000c200 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    c200:	b410      	push	{r4}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c202:	7c84      	ldrb	r4, [r0, #18]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c204:	6882      	ldr	r2, [r0, #8]
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c206:	2320      	movs	r3, #32
    c208:	fa03 f101 	lsl.w	r1, r3, r1
    c20c:	f004 030f 	and.w	r3, r4, #15
    c210:	015b      	lsls	r3, r3, #5
    c212:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    c216:	b2c9      	uxtb	r1, r1
    c218:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c21c:	4b03      	ldr	r3, [pc, #12]	; (c22c <_usb_d_dev_handle_stall+0x2c>)
    c21e:	4620      	mov	r0, r4
    c220:	691b      	ldr	r3, [r3, #16]
}
    c222:	f85d 4b04 	ldr.w	r4, [sp], #4
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c226:	2101      	movs	r1, #1
    c228:	4718      	bx	r3
    c22a:	bf00      	nop
    c22c:	20000898 	.word	0x20000898

0000c230 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c230:	b410      	push	{r4}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c232:	7c84      	ldrb	r4, [r0, #18]
    c234:	2cff      	cmp	r4, #255	; 0xff
    c236:	d00c      	beq.n	c252 <_usb_d_dev_trans_done+0x22>
    c238:	7cc3      	ldrb	r3, [r0, #19]
    c23a:	065a      	lsls	r2, r3, #25
    c23c:	d509      	bpl.n	c252 <_usb_d_dev_trans_done+0x22>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c23e:	f36f 1386 	bfc	r3, #6, #1
    c242:	74c3      	strb	r3, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c244:	4b04      	ldr	r3, [pc, #16]	; (c258 <_usb_d_dev_trans_done+0x28>)
    c246:	6882      	ldr	r2, [r0, #8]
    c248:	691b      	ldr	r3, [r3, #16]
    c24a:	4620      	mov	r0, r4
}
    c24c:	f85d 4b04 	ldr.w	r4, [sp], #4
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c250:	4718      	bx	r3
}
    c252:	f85d 4b04 	ldr.w	r4, [sp], #4
    c256:	4770      	bx	lr
    c258:	20000898 	.word	0x20000898

0000c25c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c25c:	b477      	push	{r0, r1, r2, r4, r5, r6}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c25e:	7c83      	ldrb	r3, [r0, #18]
{
    c260:	460d      	mov	r5, r1
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c262:	2bff      	cmp	r3, #255	; 0xff
{
    c264:	4611      	mov	r1, r2
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c266:	f644 2225 	movw	r2, #18981	; 0x4a25
    c26a:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c26e:	d020      	beq.n	c2b2 <_usb_d_dev_trans_stop+0x56>
    c270:	7cc2      	ldrb	r2, [r0, #19]
    c272:	0652      	lsls	r2, r2, #25
    c274:	d51d      	bpl.n	c2b2 <_usb_d_dev_trans_stop+0x56>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c276:	f003 030f 	and.w	r3, r3, #15
    c27a:	f103 0408 	add.w	r4, r3, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c27e:	0162      	lsls	r2, r4, #5
    c280:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c284:	b195      	cbz	r5, c2ac <_usb_d_dev_trans_stop+0x50>
    c286:	2680      	movs	r6, #128	; 0x80
    c288:	7116      	strb	r6, [r2, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c28a:	aa02      	add	r2, sp, #8
    c28c:	4415      	add	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c28e:	0164      	lsls	r4, r4, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c290:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c292:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c296:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c29a:	f815 2c04 	ldrb.w	r2, [r5, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c29e:	71e2      	strb	r2, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c2a0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    c2a4:	4b04      	ldr	r3, [pc, #16]	; (c2b8 <_usb_d_dev_trans_stop+0x5c>)
}
    c2a6:	b003      	add	sp, #12
    c2a8:	bc70      	pop	{r4, r5, r6}
	_usb_d_dev_trans_done(ept, code);
    c2aa:	4718      	bx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c2ac:	2640      	movs	r6, #64	; 0x40
    c2ae:	7156      	strb	r6, [r2, #5]
}
    c2b0:	e7eb      	b.n	c28a <_usb_d_dev_trans_stop+0x2e>
}
    c2b2:	b003      	add	sp, #12
    c2b4:	bc70      	pop	{r4, r5, r6}
    c2b6:	4770      	bx	lr
    c2b8:	0000c231 	.word	0x0000c231

0000c2bc <_usb_d_dev_handle_trfail>:
{
    c2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    c2be:	7c83      	ldrb	r3, [r0, #18]
    c2c0:	f003 0c0f 	and.w	ip, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    c2c4:	f640 0204 	movw	r2, #2052	; 0x804
    c2c8:	4663      	mov	r3, ip
    c2ca:	f8ad 2004 	strh.w	r2, [sp, #4]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    c2ce:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    c2d0:	f10c 0308 	add.w	r3, ip, #8
    c2d4:	460c      	mov	r4, r1

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c2d6:	0159      	lsls	r1, r3, #5
    c2d8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    c2dc:	780f      	ldrb	r7, [r1, #0]
    c2de:	b334      	cbz	r4, c32e <_usb_d_dev_handle_trfail+0x72>
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    c2e0:	f3c7 1702 	ubfx	r7, r7, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    c2e4:	4e2c      	ldr	r6, [pc, #176]	; (c398 <_usb_d_dev_handle_trfail+0xdc>)
    c2e6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    c2ea:	4416      	add	r6, r2
    c2ec:	aa02      	add	r2, sp, #8
    c2ee:	4422      	add	r2, r4
    c2f0:	7ab5      	ldrb	r5, [r6, #10]
    c2f2:	f812 ec04 	ldrb.w	lr, [r2, #-4]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    c2f6:	2f02      	cmp	r7, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
    c2f8:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    c2fa:	ea4f 124c 	mov.w	r2, ip, lsl #5
    c2fe:	d119      	bne.n	c334 <_usb_d_dev_handle_trfail+0x78>
    c300:	07e9      	lsls	r1, r5, #31
    c302:	d517      	bpl.n	c334 <_usb_d_dev_handle_trfail+0x78>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    c304:	7ab1      	ldrb	r1, [r6, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c306:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c308:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c30c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c310:	f36f 0100 	bfc	r1, #0, #1
    c314:	72b1      	strb	r1, [r6, #10]
    c316:	f883 e007 	strb.w	lr, [r3, #7]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    c31a:	f004 0101 	and.w	r1, r4, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c31e:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
    c322:	2204      	movs	r2, #4
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c324:	4b1d      	ldr	r3, [pc, #116]	; (c39c <_usb_d_dev_handle_trfail+0xe0>)
}
    c326:	b003      	add	sp, #12
    c328:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c32c:	4718      	bx	r3
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    c32e:	f007 0707 	and.w	r7, r7, #7
	return tmp;
    c332:	e7d7      	b.n	c2e4 <_usb_d_dev_handle_trfail+0x28>
	} else if (st.bit.ERRORFLOW) {
    c334:	f015 0502 	ands.w	r5, r5, #2
    c338:	d01b      	beq.n	c372 <_usb_d_dev_handle_trfail+0xb6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    c33a:	7ab1      	ldrb	r1, [r6, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c33c:	7cc5      	ldrb	r5, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c33e:	015b      	lsls	r3, r3, #5
    c340:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    c344:	f36f 0141 	bfc	r1, #1, #1
    c348:	72b1      	strb	r1, [r6, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c34a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c34e:	f883 e007 	strb.w	lr, [r3, #7]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    c352:	f005 0307 	and.w	r3, r5, #7
    c356:	2b01      	cmp	r3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c358:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
    c35c:	d119      	bne.n	c392 <_usb_d_dev_handle_trfail+0xd6>
    c35e:	066b      	lsls	r3, r5, #25
    c360:	d517      	bpl.n	c392 <_usb_d_dev_handle_trfail+0xd6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    c362:	7cc3      	ldrb	r3, [r0, #19]
    c364:	ebb4 1fd3 	cmp.w	r4, r3, lsr #7
    c368:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    c36c:	d011      	beq.n	c392 <_usb_d_dev_handle_trfail+0xd6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c36e:	2200      	movs	r2, #0
    c370:	e7d8      	b.n	c324 <_usb_d_dev_handle_trfail+0x68>
	bank->STATUS_BK.reg     = 0;
    c372:	490b      	ldr	r1, [pc, #44]	; (c3a0 <_usb_d_dev_handle_trfail+0xe4>)
    c374:	eb04 044c 	add.w	r4, r4, ip, lsl #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c378:	015b      	lsls	r3, r3, #5
    c37a:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    c37e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c382:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c386:	f884 523a 	strb.w	r5, [r4, #570]	; 0x23a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c38a:	f883 e007 	strb.w	lr, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c38e:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
}
    c392:	b003      	add	sp, #12
    c394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c396:	bf00      	nop
    c398:	20000ac8 	.word	0x20000ac8
    c39c:	0000c25d 	.word	0x0000c25d
    c3a0:	20000898 	.word	0x20000898

0000c3a4 <_usb_d_dev_reset_epts>:
{
    c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3a8:	4c0a      	ldr	r4, [pc, #40]	; (c3d4 <_usb_d_dev_reset_epts+0x30>)
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c3aa:	4f0b      	ldr	r7, [pc, #44]	; (c3d8 <_usb_d_dev_reset_epts+0x34>)
{
    c3ac:	2501      	movs	r5, #1
		dev_inst.ep[i].ep       = 0xFF;
    c3ae:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c3b0:	2103      	movs	r1, #3
    c3b2:	4620      	mov	r0, r4
    c3b4:	3501      	adds	r5, #1
    c3b6:	47b8      	blx	r7
		dev_inst.ep[i].flags.u8 = 0;
    c3b8:	2100      	movs	r1, #0
	for (i = 0; i < USB_D_N_EP; i++) {
    c3ba:	2d1c      	cmp	r5, #28
		dev_inst.ep[i].ep       = 0xFF;
    c3bc:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    c3be:	74e1      	strb	r1, [r4, #19]
	for (i = 0; i < USB_D_N_EP; i++) {
    c3c0:	f104 0414 	add.w	r4, r4, #20
    c3c4:	d1f4      	bne.n	c3b0 <_usb_d_dev_reset_epts+0xc>
}
    c3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    c3ca:	4804      	ldr	r0, [pc, #16]	; (c3dc <_usb_d_dev_reset_epts+0x38>)
    c3cc:	4b04      	ldr	r3, [pc, #16]	; (c3e0 <_usb_d_dev_reset_epts+0x3c>)
    c3ce:	22c0      	movs	r2, #192	; 0xc0
    c3d0:	4718      	bx	r3
    c3d2:	bf00      	nop
    c3d4:	200008ac 	.word	0x200008ac
    c3d8:	0000c231 	.word	0x0000c231
    c3dc:	20000ac8 	.word	0x20000ac8
    c3e0:	00012cf5 	.word	0x00012cf5

0000c3e4 <_usb_d_dev_in_next>:
{
    c3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3e8:	4604      	mov	r4, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c3ea:	7c80      	ldrb	r0, [r0, #18]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c3ec:	4688      	mov	r8, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c3ee:	f000 070f 	and.w	r7, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c3f2:	2900      	cmp	r1, #0
    c3f4:	d05b      	beq.n	c4ae <_usb_d_dev_in_next+0xca>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c3f6:	4b4d      	ldr	r3, [pc, #308]	; (c52c <_usb_d_dev_in_next+0x148>)
    c3f8:	eb03 1347 	add.w	r3, r3, r7, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c3fc:	695e      	ldr	r6, [r3, #20]
    c3fe:	f3c6 060d 	ubfx	r6, r6, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c402:	8a22      	ldrh	r2, [r4, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c404:	f894 e013 	ldrb.w	lr, [r4, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c408:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c40c:	429a      	cmp	r2, r3
    c40e:	bf1a      	itte	ne
    c410:	f102 3cff 	addne.w	ip, r2, #4294967295	; 0xffffffff
    c414:	fa0f fc8c 	sxthne.w	ip, ip
    c418:	4694      	moveq	ip, r2
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c41a:	f00e 0907 	and.w	r9, lr, #7
	if (isr) {
    c41e:	f1b8 0f00 	cmp.w	r8, #0
    c422:	d005      	beq.n	c430 <_usb_d_dev_in_next+0x4c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c424:	017b      	lsls	r3, r7, #5
    c426:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c42a:	2102      	movs	r1, #2
    c42c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	ept->trans_count += trans_count;
    c430:	68a1      	ldr	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    c432:	6863      	ldr	r3, [r4, #4]
	ept->trans_count += trans_count;
    c434:	4431      	add	r1, r6
	if (ept->trans_count < ept->trans_size) {
    c436:	4299      	cmp	r1, r3
	ept->trans_count += trans_count;
    c438:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    c43a:	ea4f 1547 	mov.w	r5, r7, lsl #5
    c43e:	d242      	bcs.n	c4c6 <_usb_d_dev_in_next+0xe2>
		trans_next = ept->trans_size - ept->trans_count;
    c440:	1a5b      	subs	r3, r3, r1
    c442:	b29e      	uxth	r6, r3
		if (ept->flags.bits.use_cache) {
    c444:	6823      	ldr	r3, [r4, #0]
    c446:	f8df a0f0 	ldr.w	sl, [pc, #240]	; c538 <_usb_d_dev_in_next+0x154>
    c44a:	f01e 0f20 	tst.w	lr, #32
    c44e:	4419      	add	r1, r3
    c450:	d02f      	beq.n	c4b2 <_usb_d_dev_in_next+0xce>
			if (trans_next > ept->size) {
    c452:	4296      	cmp	r6, r2
    c454:	bf28      	it	cs
    c456:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    c458:	4b35      	ldr	r3, [pc, #212]	; (c530 <_usb_d_dev_in_next+0x14c>)
    c45a:	68e0      	ldr	r0, [r4, #12]
    c45c:	4632      	mov	r2, r6
    c45e:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    c460:	eb0a 0305 	add.w	r3, sl, r5
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    c464:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    c466:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c46a:	eb0a 0205 	add.w	r2, sl, r5
    c46e:	f8d2 3244 	ldr.w	r3, [r2, #580]	; 0x244
    c472:	f366 030d 	bfi	r3, r6, #0, #14
    c476:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c47a:	f8d2 3244 	ldr.w	r3, [r2, #580]	; 0x244
    c47e:	f36f 339b 	bfc	r3, #14, #14
    c482:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
	if (!isr) {
    c486:	f1b8 0f00 	cmp.w	r8, #0
    c48a:	d108      	bne.n	c49e <_usb_d_dev_in_next+0xba>
			inten = USB_D_BANK1_INT_FLAGS;
    c48c:	f1b9 0f01 	cmp.w	r9, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c490:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    c494:	bf0c      	ite	eq
    c496:	234e      	moveq	r3, #78	; 0x4e
    c498:	234a      	movne	r3, #74	; 0x4a
    c49a:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c49e:	017b      	lsls	r3, r7, #5
    c4a0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c4a4:	2280      	movs	r2, #128	; 0x80
    c4a6:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
}
    c4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c4ae:	460e      	mov	r6, r1
    c4b0:	e7a7      	b.n	c402 <_usb_d_dev_in_next+0x1e>
	bank->ADDR.reg          = addr;
    c4b2:	eb0a 0305 	add.w	r3, sl, r5
    c4b6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    c4ba:	bf28      	it	cs
    c4bc:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
    c4c0:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
}
    c4c4:	e7d1      	b.n	c46a <_usb_d_dev_in_next+0x86>
	} else if (ept->flags.bits.need_zlp) {
    c4c6:	f01e 0f10 	tst.w	lr, #16
    c4ca:	d00e      	beq.n	c4ea <_usb_d_dev_in_next+0x106>
		ept->flags.bits.need_zlp = 0;
    c4cc:	7ce3      	ldrb	r3, [r4, #19]
    c4ce:	f36f 1304 	bfc	r3, #4, #1
    c4d2:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c4d4:	4b17      	ldr	r3, [pc, #92]	; (c534 <_usb_d_dev_in_next+0x150>)
    c4d6:	442b      	add	r3, r5
    c4d8:	685a      	ldr	r2, [r3, #4]
    c4da:	f36f 020d 	bfc	r2, #0, #14
    c4de:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c4e0:	685a      	ldr	r2, [r3, #4]
    c4e2:	f36f 329b 	bfc	r2, #14, #14
    c4e6:	605a      	str	r2, [r3, #4]
		goto _in_tx_exec;
    c4e8:	e7cd      	b.n	c486 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    c4ea:	f1b9 0f01 	cmp.w	r9, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c4ee:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
	if (last_pkt == ept->size) {
    c4f2:	ea0c 0c06 	and.w	ip, ip, r6
    c4f6:	bf0c      	ite	eq
    c4f8:	234b      	moveq	r3, #75	; 0x4b
    c4fa:	234a      	movne	r3, #74	; 0x4a
    c4fc:	4562      	cmp	r2, ip
    c4fe:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
    c502:	d10c      	bne.n	c51e <_usb_d_dev_in_next+0x13a>
		ept->flags.bits.is_busy = 0;
    c504:	7ce3      	ldrb	r3, [r4, #19]
    c506:	f36f 1386 	bfc	r3, #6, #1
    c50a:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    c50c:	4b0a      	ldr	r3, [pc, #40]	; (c538 <_usb_d_dev_in_next+0x154>)
    c50e:	68db      	ldr	r3, [r3, #12]
    c510:	4798      	blx	r3
    c512:	2800      	cmp	r0, #0
    c514:	d1c9      	bne.n	c4aa <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    c516:	7ce3      	ldrb	r3, [r4, #19]
    c518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c51c:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c51e:	4620      	mov	r0, r4
    c520:	4b06      	ldr	r3, [pc, #24]	; (c53c <_usb_d_dev_in_next+0x158>)
}
    c522:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c526:	2100      	movs	r1, #0
    c528:	4718      	bx	r3
    c52a:	bf00      	nop
    c52c:	20000ac8 	.word	0x20000ac8
    c530:	00012bc1 	.word	0x00012bc1
    c534:	20000ad8 	.word	0x20000ad8
    c538:	20000898 	.word	0x20000898
    c53c:	0000c231 	.word	0x0000c231

0000c540 <_usb_d_dev_out_next>:
{
    c540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    c544:	7c86      	ldrb	r6, [r0, #18]
    c546:	f006 060f 	and.w	r6, r6, #15
{
    c54a:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c54c:	460f      	mov	r7, r1
    c54e:	0175      	lsls	r5, r6, #5
    c550:	2900      	cmp	r1, #0
    c552:	d060      	beq.n	c616 <_usb_d_dev_out_next+0xd6>
    c554:	4b5d      	ldr	r3, [pc, #372]	; (c6cc <_usb_d_dev_out_next+0x18c>)
    c556:	442b      	add	r3, r5
    c558:	685a      	ldr	r2, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c55a:	685b      	ldr	r3, [r3, #4]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c55c:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c560:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c564:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c568:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c56a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c56e:	4598      	cmp	r8, r3
    c570:	bf1c      	itt	ne
    c572:	f108 38ff 	addne.w	r8, r8, #4294967295	; 0xffffffff
    c576:	fa1f f888 	uxthne.w	r8, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c57a:	f002 0307 	and.w	r3, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    c57e:	ea09 0b08 	and.w	fp, r9, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c582:	9301      	str	r3, [sp, #4]
	if (isr) {
    c584:	b12f      	cbz	r7, c592 <_usb_d_dev_out_next+0x52>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c586:	0173      	lsls	r3, r6, #5
    c588:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c58c:	2101      	movs	r1, #1
    c58e:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    c592:	0690      	lsls	r0, r2, #26
    c594:	d50c      	bpl.n	c5b0 <_usb_d_dev_out_next+0x70>
    c596:	6862      	ldr	r2, [r4, #4]
    c598:	b152      	cbz	r2, c5b0 <_usb_d_dev_out_next+0x70>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c59a:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c59c:	6823      	ldr	r3, [r4, #0]
    c59e:	68e1      	ldr	r1, [r4, #12]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c5a0:	1a12      	subs	r2, r2, r0
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c5a2:	b292      	uxth	r2, r2
    c5a4:	455a      	cmp	r2, fp
    c5a6:	4418      	add	r0, r3
    c5a8:	bf28      	it	cs
    c5aa:	465a      	movcs	r2, fp
    c5ac:	4b48      	ldr	r3, [pc, #288]	; (c6d0 <_usb_d_dev_out_next+0x190>)
    c5ae:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    c5b0:	6863      	ldr	r3, [r4, #4]
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d132      	bne.n	c61c <_usb_d_dev_out_next+0xdc>
    c5b6:	7ce2      	ldrb	r2, [r4, #19]
    c5b8:	06d1      	lsls	r1, r2, #27
    c5ba:	d52f      	bpl.n	c61c <_usb_d_dev_out_next+0xdc>
	bank->ADDR.reg          = addr;
    c5bc:	4845      	ldr	r0, [pc, #276]	; (c6d4 <_usb_d_dev_out_next+0x194>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c5be:	68e1      	ldr	r1, [r4, #12]
		ept->flags.bits.need_zlp  = 0;
    c5c0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	bank->ADDR.reg          = addr;
    c5c4:	4428      	add	r0, r5
		ept->flags.bits.need_zlp  = 0;
    c5c6:	f042 0220 	orr.w	r2, r2, #32
    c5ca:	74e2      	strb	r2, [r4, #19]
	bank->ADDR.reg          = addr;
    c5cc:	f500 720c 	add.w	r2, r0, #560	; 0x230
    c5d0:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c5d4:	6851      	ldr	r1, [r2, #4]
    c5d6:	8a20      	ldrh	r0, [r4, #16]
    c5d8:	f360 319b 	bfi	r1, r0, #14, #14
    c5dc:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c5de:	6851      	ldr	r1, [r2, #4]
    c5e0:	f363 010d 	bfi	r1, r3, #0, #14
    c5e4:	6051      	str	r1, [r2, #4]
	if (!isr) {
    c5e6:	b96f      	cbnz	r7, c604 <_usb_d_dev_out_next+0xc4>
		if (is_ctrl) {
    c5e8:	9b01      	ldr	r3, [sp, #4]
    c5ea:	2b01      	cmp	r3, #1
	bank->STATUS_BK.reg     = 0;
    c5ec:	bf04      	itt	eq
    c5ee:	4b39      	ldreq	r3, [pc, #228]	; (c6d4 <_usb_d_dev_out_next+0x194>)
    c5f0:	195b      	addeq	r3, r3, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c5f2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    c5f6:	bf0a      	itet	eq
    c5f8:	f883 724a 	strbeq.w	r7, [r3, #586]	; 0x24a
			inten = USB_D_BANK0_INT_FLAGS;
    c5fc:	2325      	movne	r3, #37	; 0x25
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    c5fe:	232d      	moveq	r3, #45	; 0x2d
    c600:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c604:	0176      	lsls	r6, r6, #5
    c606:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
    c60a:	2340      	movs	r3, #64	; 0x40
    c60c:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
}
    c610:	b003      	add	sp, #12
    c612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c616:	468a      	mov	sl, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c618:	4689      	mov	r9, r1
    c61a:	e7a3      	b.n	c564 <_usb_d_dev_out_next+0x24>
	} else if (isr && last_pkt < ept->size) {
    c61c:	68a1      	ldr	r1, [r4, #8]
    c61e:	b1ef      	cbz	r7, c65c <_usb_d_dev_out_next+0x11c>
    c620:	8a22      	ldrh	r2, [r4, #16]
    c622:	455a      	cmp	r2, fp
    c624:	d91a      	bls.n	c65c <_usb_d_dev_out_next+0x11c>
		ept->flags.bits.need_zlp = 0;
    c626:	7ce3      	ldrb	r3, [r4, #19]
		ept->trans_count += last_trans;
    c628:	4449      	add	r1, r9
		ept->flags.bits.need_zlp = 0;
    c62a:	f36f 1304 	bfc	r3, #4, #1
    c62e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    c630:	60a1      	str	r1, [r4, #8]
	if (is_ctrl) {
    c632:	9b01      	ldr	r3, [sp, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c634:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    c638:	2b01      	cmp	r3, #1
    c63a:	bf0c      	ite	eq
    c63c:	232d      	moveq	r3, #45	; 0x2d
    c63e:	2325      	movne	r3, #37	; 0x25
    c640:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
	if (0 == epn) {
    c644:	b91e      	cbnz	r6, c64e <_usb_d_dev_out_next+0x10e>
	bank->ADDR.reg          = addr;
    c646:	4b23      	ldr	r3, [pc, #140]	; (c6d4 <_usb_d_dev_out_next+0x194>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c648:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    c64a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c64e:	4b22      	ldr	r3, [pc, #136]	; (c6d8 <_usb_d_dev_out_next+0x198>)
    c650:	2100      	movs	r1, #0
    c652:	4620      	mov	r0, r4
}
    c654:	b003      	add	sp, #12
    c656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c65a:	4718      	bx	r3
		ept->trans_count += trans_size;
    c65c:	4451      	add	r1, sl
		if (ept->trans_count < ept->trans_size) {
    c65e:	428b      	cmp	r3, r1
		ept->trans_count += trans_size;
    c660:	60a1      	str	r1, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    c662:	d9e6      	bls.n	c632 <_usb_d_dev_out_next+0xf2>
			if (ept->flags.bits.use_cache) {
    c664:	7ce0      	ldrb	r0, [r4, #19]
    c666:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    c66a:	4a1a      	ldr	r2, [pc, #104]	; (c6d4 <_usb_d_dev_out_next+0x194>)
			trans_next = ept->trans_size - ept->trans_count;
    c66c:	1a5b      	subs	r3, r3, r1
			if (ept->flags.bits.use_cache) {
    c66e:	f010 0f20 	tst.w	r0, #32
			trans_next = ept->trans_size - ept->trans_count;
    c672:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    c674:	d014      	beq.n	c6a0 <_usb_d_dev_out_next+0x160>
	bank->ADDR.reg          = addr;
    c676:	1951      	adds	r1, r2, r5
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c678:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    c67a:	f8c1 0230 	str.w	r0, [r1, #560]	; 0x230
    c67e:	4563      	cmp	r3, ip
    c680:	bf28      	it	cs
    c682:	4663      	movcs	r3, ip
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c684:	442a      	add	r2, r5
    c686:	f8d2 1234 	ldr.w	r1, [r2, #564]	; 0x234
    c68a:	f363 319b 	bfi	r1, r3, #14, #14
    c68e:	f8c2 1234 	str.w	r1, [r2, #564]	; 0x234
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c692:	f8d2 3234 	ldr.w	r3, [r2, #564]	; 0x234
    c696:	f36f 030d 	bfc	r3, #0, #14
    c69a:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
			goto _out_rx_exec;
    c69e:	e7a2      	b.n	c5e6 <_usb_d_dev_out_next+0xa6>
				if (trans_next > ept->size) {
    c6a0:	4563      	cmp	r3, ip
    c6a2:	d90a      	bls.n	c6ba <_usb_d_dev_out_next+0x17a>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    c6a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c6a8:	d80c      	bhi.n	c6c4 <_usb_d_dev_out_next+0x184>
						trans_next -= trans_next & size_mask;
    c6aa:	ea23 0308 	bic.w	r3, r3, r8
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c6ae:	6820      	ldr	r0, [r4, #0]
    c6b0:	4401      	add	r1, r0
	bank->ADDR.reg          = addr;
    c6b2:	1950      	adds	r0, r2, r5
    c6b4:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
}
    c6b8:	e7e4      	b.n	c684 <_usb_d_dev_out_next+0x144>
				} else if (trans_next < ept->size) {
    c6ba:	d2f8      	bcs.n	c6ae <_usb_d_dev_out_next+0x16e>
					ept->flags.bits.use_cache = 1;
    c6bc:	f040 0020 	orr.w	r0, r0, #32
    c6c0:	74e0      	strb	r0, [r4, #19]
    c6c2:	e7f4      	b.n	c6ae <_usb_d_dev_out_next+0x16e>
						trans_next = USB_D_DEV_TRANS_MAX;
    c6c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c6c8:	e7f1      	b.n	c6ae <_usb_d_dev_out_next+0x16e>
    c6ca:	bf00      	nop
    c6cc:	20000ac8 	.word	0x20000ac8
    c6d0:	00012bc1 	.word	0x00012bc1
    c6d4:	20000898 	.word	0x20000898
    c6d8:	0000c231 	.word	0x0000c231

0000c6dc <_usb_d_dev_handler>:
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c6dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
{
    c6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c6e4:	8c1f      	ldrh	r7, [r3, #32]
    c6e6:	4d69      	ldr	r5, [pc, #420]	; (c88c <_usb_d_dev_handler+0x1b0>)
    c6e8:	b2bf      	uxth	r7, r7
	if (0 == epint) {
    c6ea:	2f00      	cmp	r7, #0
    c6ec:	d163      	bne.n	c7b6 <_usb_d_dev_handler+0xda>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    c6ee:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    c6f0:	8b1a      	ldrh	r2, [r3, #24]
    c6f2:	b292      	uxth	r2, r2
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    c6f4:	400a      	ands	r2, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    c6f6:	f012 0004 	ands.w	r0, r2, #4
    c6fa:	d005      	beq.n	c708 <_usb_d_dev_handler+0x2c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c6fc:	2204      	movs	r2, #4
    c6fe:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    c700:	682b      	ldr	r3, [r5, #0]
}
    c702:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.sof();
    c706:	4718      	bx	r3
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    c708:	f412 7100 	ands.w	r1, r2, #512	; 0x200
    c70c:	d01f      	beq.n	c74e <_usb_d_dev_handler+0x72>
    c70e:	f240 2201 	movw	r2, #513	; 0x201
    c712:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c714:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c716:	2270      	movs	r2, #112	; 0x70
    c718:	831a      	strh	r2, [r3, #24]
    c71a:	4603      	mov	r3, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c71c:	eb05 1243 	add.w	r2, r5, r3, lsl #5
    c720:	f502 700e 	add.w	r0, r2, #568	; 0x238
    c724:	f8b2 2238 	ldrh.w	r2, [r2, #568]	; 0x238
    c728:	f002 020f 	and.w	r2, r2, #15
    c72c:	2a03      	cmp	r2, #3
    c72e:	d109      	bne.n	c744 <_usb_d_dev_handler+0x68>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c730:	8801      	ldrh	r1, [r0, #0]
			bank->EXTREG.reg = 0;
    c732:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c734:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    c738:	8003      	strh	r3, [r0, #0]
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    c73a:	686b      	ldr	r3, [r5, #4]
    c73c:	2003      	movs	r0, #3
}
    c73e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c742:	4718      	bx	r3
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c744:	3301      	adds	r3, #1
    c746:	2b05      	cmp	r3, #5
    c748:	d1e8      	bne.n	c71c <_usb_d_dev_handler+0x40>
	uint32_t lpm_variable = 0;
    c74a:	2100      	movs	r1, #0
    c74c:	e7f5      	b.n	c73a <_usb_d_dev_handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    c74e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    c752:	d004      	beq.n	c75e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c754:	2280      	movs	r2, #128	; 0x80
    c756:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    c758:	2005      	movs	r0, #5
    c75a:	686b      	ldr	r3, [r5, #4]
    c75c:	e7ef      	b.n	c73e <_usb_d_dev_handler+0x62>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    c75e:	f012 0470 	ands.w	r4, r2, #112	; 0x70
    c762:	d00b      	beq.n	c77c <_usb_d_dev_handler+0xa0>
    c764:	2270      	movs	r2, #112	; 0x70
    c766:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c768:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c76a:	f240 2201 	movw	r2, #513	; 0x201
    c76e:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    c770:	4b47      	ldr	r3, [pc, #284]	; (c890 <_usb_d_dev_handler+0x1b4>)
    c772:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    c774:	686b      	ldr	r3, [r5, #4]
    c776:	4601      	mov	r1, r0
    c778:	2002      	movs	r0, #2
    c77a:	e7e0      	b.n	c73e <_usb_d_dev_handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    c77c:	f012 0108 	ands.w	r1, r2, #8
    c780:	d00e      	beq.n	c7a0 <_usb_d_dev_handler+0xc4>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c782:	2208      	movs	r2, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c784:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c788:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c78a:	2270      	movs	r2, #112	; 0x70
    c78c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c78e:	f240 2201 	movw	r2, #513	; 0x201
    c792:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    c794:	4b3f      	ldr	r3, [pc, #252]	; (c894 <_usb_d_dev_handler+0x1b8>)
    c796:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    c798:	686b      	ldr	r3, [r5, #4]
    c79a:	4621      	mov	r1, r4
    c79c:	2001      	movs	r0, #1
    c79e:	e7ce      	b.n	c73e <_usb_d_dev_handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    c7a0:	07d0      	lsls	r0, r2, #31
    c7a2:	d508      	bpl.n	c7b6 <_usb_d_dev_handler+0xda>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c7a4:	f240 2201 	movw	r2, #513	; 0x201
    c7a8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c7aa:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c7ac:	2270      	movs	r2, #112	; 0x70
    c7ae:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c7b0:	2004      	movs	r0, #4
    c7b2:	686b      	ldr	r3, [r5, #4]
    c7b4:	e7c3      	b.n	c73e <_usb_d_dev_handler+0x62>
    c7b6:	4c35      	ldr	r4, [pc, #212]	; (c88c <_usb_d_dev_handler+0x1b0>)
			_usb_d_dev_handle_setup(ept);
    c7b8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; c8a0 <_usb_d_dev_handler+0x1c4>
			_usb_d_dev_handle_trfail(ept, 1);
    c7bc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c8a4 <_usb_d_dev_handler+0x1c8>
		_usb_d_dev_out_next(ept, true);
    c7c0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c8a8 <_usb_d_dev_handler+0x1cc>
	uint32_t lpm_variable = 0;
    c7c4:	2600      	movs	r6, #0
		if (ept->ep == 0xFF) {
    c7c6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    c7ca:	2aff      	cmp	r2, #255	; 0xff
    c7cc:	f104 0414 	add.w	r4, r4, #20
    c7d0:	d029      	beq.n	c826 <_usb_d_dev_handler+0x14a>
	if (!(epint & (1u << epn))) {
    c7d2:	f002 020f 	and.w	r2, r2, #15
    c7d6:	2101      	movs	r1, #1
    c7d8:	fa01 f302 	lsl.w	r3, r1, r2
    c7dc:	423b      	tst	r3, r7
    c7de:	d022      	beq.n	c826 <_usb_d_dev_handler+0x14a>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c7e0:	0153      	lsls	r3, r2, #5
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c7e2:	0152      	lsls	r2, r2, #5
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c7e4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c7e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c7ec:	f893 0107 	ldrb.w	r0, [r3, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c7f0:	f892 3109 	ldrb.w	r3, [r2, #265]	; 0x109
	if (flags) {
    c7f4:	4003      	ands	r3, r0
    c7f6:	d016      	beq.n	c826 <_usb_d_dev_handler+0x14a>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c7f8:	2214      	movs	r2, #20
    c7fa:	fb02 5206 	mla	r2, r2, r6, r5
    c7fe:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
    c802:	f002 0047 	and.w	r0, r2, #71	; 0x47
    c806:	4288      	cmp	r0, r1
    c808:	d112      	bne.n	c830 <_usb_d_dev_handler+0x154>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c80a:	06da      	lsls	r2, r3, #27
    c80c:	d502      	bpl.n	c814 <_usb_d_dev_handler+0x138>
			_usb_d_dev_handle_setup(ept);
    c80e:	4620      	mov	r0, r4
    c810:	47c8      	blx	r9
    c812:	e008      	b.n	c826 <_usb_d_dev_handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c814:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    c818:	d003      	beq.n	c822 <_usb_d_dev_handler+0x146>
		_usb_d_dev_handle_stall(ept, 1);
    c81a:	4601      	mov	r1, r0
		_usb_d_dev_handle_stall(ept, 0);
    c81c:	4b1e      	ldr	r3, [pc, #120]	; (c898 <_usb_d_dev_handler+0x1bc>)
    c81e:	4620      	mov	r0, r4
    c820:	e013      	b.n	c84a <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c822:	069b      	lsls	r3, r3, #26
    c824:	d4fa      	bmi.n	c81c <_usb_d_dev_handler+0x140>
	for (i = 0; i < USB_D_N_EP; i++) {
    c826:	3601      	adds	r6, #1
    c828:	2e1b      	cmp	r6, #27
    c82a:	d1cc      	bne.n	c7c6 <_usb_d_dev_handler+0xea>
}
    c82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (_usb_d_dev_ep_is_in(ept)) {
    c830:	0610      	lsls	r0, r2, #24
    c832:	d514      	bpl.n	c85e <_usb_d_dev_handler+0x182>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c834:	0658      	lsls	r0, r3, #25
    c836:	d4f1      	bmi.n	c81c <_usb_d_dev_handler+0x140>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c838:	0718      	lsls	r0, r3, #28
    c83a:	d502      	bpl.n	c842 <_usb_d_dev_handler+0x166>
			_usb_d_dev_handle_trfail(ept, 1);
    c83c:	4620      	mov	r0, r4
    c83e:	47c0      	blx	r8
    c840:	e7f1      	b.n	c826 <_usb_d_dev_handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    c842:	0798      	lsls	r0, r3, #30
    c844:	d503      	bpl.n	c84e <_usb_d_dev_handler+0x172>
		_usb_d_dev_in_next(ept, true);
    c846:	4b15      	ldr	r3, [pc, #84]	; (c89c <_usb_d_dev_handler+0x1c0>)
    c848:	4620      	mov	r0, r4
		_usb_d_dev_handle_stall(ept, 0);
    c84a:	4798      	blx	r3
    c84c:	e7eb      	b.n	c826 <_usb_d_dev_handler+0x14a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c84e:	f002 0207 	and.w	r2, r2, #7
    c852:	2a01      	cmp	r2, #1
    c854:	d1e7      	bne.n	c826 <_usb_d_dev_handler+0x14a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c856:	075a      	lsls	r2, r3, #29
    c858:	d515      	bpl.n	c886 <_usb_d_dev_handler+0x1aa>
			_usb_d_dev_handle_trfail(ept, 0);
    c85a:	2100      	movs	r1, #0
    c85c:	e7ee      	b.n	c83c <_usb_d_dev_handler+0x160>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c85e:	f013 0020 	ands.w	r0, r3, #32
    c862:	d001      	beq.n	c868 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    c864:	2100      	movs	r1, #0
    c866:	e7d9      	b.n	c81c <_usb_d_dev_handler+0x140>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c868:	0758      	lsls	r0, r3, #29
    c86a:	d4f6      	bmi.n	c85a <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    c86c:	07d8      	lsls	r0, r3, #31
    c86e:	d502      	bpl.n	c876 <_usb_d_dev_handler+0x19a>
		_usb_d_dev_out_next(ept, true);
    c870:	4620      	mov	r0, r4
    c872:	47d0      	blx	sl
    c874:	e7d7      	b.n	c826 <_usb_d_dev_handler+0x14a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c876:	f002 0207 	and.w	r2, r2, #7
    c87a:	2a01      	cmp	r2, #1
    c87c:	d1d3      	bne.n	c826 <_usb_d_dev_handler+0x14a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c87e:	071a      	lsls	r2, r3, #28
    c880:	d501      	bpl.n	c886 <_usb_d_dev_handler+0x1aa>
			_usb_d_dev_handle_trfail(ept, 1);
    c882:	2101      	movs	r1, #1
    c884:	e7da      	b.n	c83c <_usb_d_dev_handler+0x160>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c886:	06db      	lsls	r3, r3, #27
    c888:	d5cd      	bpl.n	c826 <_usb_d_dev_handler+0x14a>
    c88a:	e7c0      	b.n	c80e <_usb_d_dev_handler+0x132>
    c88c:	20000898 	.word	0x20000898
    c890:	0000c141 	.word	0x0000c141
    c894:	0000c3a5 	.word	0x0000c3a5
    c898:	0000c201 	.word	0x0000c201
    c89c:	0000c3e5 	.word	0x0000c3e5
    c8a0:	0000c17d 	.word	0x0000c17d
    c8a4:	0000c2bd 	.word	0x0000c2bd
    c8a8:	0000c541 	.word	0x0000c541

0000c8ac <_usbd_ep_pcksize_size>:
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    c8ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c8b0:	d80f      	bhi.n	c8d2 <_usbd_ep_pcksize_size+0x26>
    c8b2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    c8b6:	d80e      	bhi.n	c8d6 <_usbd_ep_pcksize_size+0x2a>
    c8b8:	2880      	cmp	r0, #128	; 0x80
    c8ba:	d80e      	bhi.n	c8da <_usbd_ep_pcksize_size+0x2e>
    c8bc:	2840      	cmp	r0, #64	; 0x40
    c8be:	d80e      	bhi.n	c8de <_usbd_ep_pcksize_size+0x32>
    c8c0:	2820      	cmp	r0, #32
    c8c2:	d80e      	bhi.n	c8e2 <_usbd_ep_pcksize_size+0x36>
    c8c4:	2810      	cmp	r0, #16
    c8c6:	d80e      	bhi.n	c8e6 <_usbd_ep_pcksize_size+0x3a>
    c8c8:	2808      	cmp	r0, #8
    c8ca:	bf94      	ite	ls
    c8cc:	2000      	movls	r0, #0
    c8ce:	2001      	movhi	r0, #1
    c8d0:	4770      	bx	lr
    c8d2:	2007      	movs	r0, #7
    c8d4:	4770      	bx	lr
    c8d6:	2006      	movs	r0, #6
    c8d8:	4770      	bx	lr
    c8da:	2005      	movs	r0, #5
    c8dc:	4770      	bx	lr
    c8de:	2004      	movs	r0, #4
    c8e0:	4770      	bx	lr
    c8e2:	2003      	movs	r0, #3
    c8e4:	4770      	bx	lr
    c8e6:	2002      	movs	r0, #2
}
    c8e8:	4770      	bx	lr
	...

0000c8ec <_usb_d_dev_init>:
{
    c8ec:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    c8ee:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c8f2:	789a      	ldrb	r2, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    c8f4:	07d0      	lsls	r0, r2, #31
    c8f6:	d41a      	bmi.n	c92e <_usb_d_dev_init+0x42>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c8f8:	789a      	ldrb	r2, [r3, #2]
    c8fa:	0791      	lsls	r1, r2, #30
    c8fc:	d1fc      	bne.n	c8f8 <_usb_d_dev_init+0xc>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    c8fe:	781a      	ldrb	r2, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    c900:	0792      	lsls	r2, r2, #30
    c902:	d50d      	bpl.n	c920 <_usb_d_dev_init+0x34>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    c904:	781a      	ldrb	r2, [r3, #0]
    c906:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    c90a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c90c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c910:	7893      	ldrb	r3, [r2, #2]
    c912:	0798      	lsls	r0, r3, #30
    c914:	d1fc      	bne.n	c910 <_usb_d_dev_init+0x24>
    c916:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c91a:	7893      	ldrb	r3, [r2, #2]
    c91c:	0799      	lsls	r1, r3, #30
    c91e:	d4fc      	bmi.n	c91a <_usb_d_dev_init+0x2e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c920:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c924:	2201      	movs	r2, #1
    c926:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c928:	789a      	ldrb	r2, [r3, #2]
    c92a:	0792      	lsls	r2, r2, #30
    c92c:	d1fc      	bne.n	c928 <_usb_d_dev_init+0x3c>
    c92e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c932:	7893      	ldrb	r3, [r2, #2]
    c934:	07db      	lsls	r3, r3, #31
    c936:	d4fc      	bmi.n	c932 <_usb_d_dev_init+0x46>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    c938:	4a1e      	ldr	r2, [pc, #120]	; (c9b4 <_usb_d_dev_init+0xc8>)
    c93a:	4b1f      	ldr	r3, [pc, #124]	; (c9b8 <_usb_d_dev_init+0xcc>)
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    c93c:	e9c3 2200 	strd	r2, r2, [r3]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    c940:	e9c3 2202 	strd	r2, r2, [r3, #8]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    c944:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    c946:	4b1d      	ldr	r3, [pc, #116]	; (c9bc <_usb_d_dev_init+0xd0>)
    c948:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    c94a:	4b1d      	ldr	r3, [pc, #116]	; (c9c0 <_usb_d_dev_init+0xd4>)
    c94c:	681a      	ldr	r2, [r3, #0]
	uint32_t pad_transp
    c94e:	f3c2 1344 	ubfx	r3, r2, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    c952:	f3c2 2182 	ubfx	r1, r2, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    c956:	f012 021f 	ands.w	r2, r2, #31
    c95a:	d025      	beq.n	c9a8 <_usb_d_dev_init+0xbc>
		pad_transn = 9;
    c95c:	2a1f      	cmp	r2, #31
    c95e:	bf08      	it	eq
    c960:	2209      	moveq	r2, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    c962:	b31b      	cbz	r3, c9ac <_usb_d_dev_init+0xc0>
		pad_transp = 25;
    c964:	2b1f      	cmp	r3, #31
    c966:	bf08      	it	eq
    c968:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    c96a:	b309      	cbz	r1, c9b0 <_usb_d_dev_init+0xc4>
		pad_trim = 6;
    c96c:	2907      	cmp	r1, #7
    c96e:	bf08      	it	eq
    c970:	2106      	moveq	r1, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    c972:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    c976:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    c97a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c97e:	b29b      	uxth	r3, r3
    c980:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    c982:	78d3      	ldrb	r3, [r2, #3]
    c984:	f043 0303 	orr.w	r3, r3, #3
    c988:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    c98a:	78d3      	ldrb	r3, [r2, #3]
    c98c:	f043 030c 	orr.w	r3, r3, #12
    c990:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c992:	2304      	movs	r3, #4
    c994:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c996:	7890      	ldrb	r0, [r2, #2]
    c998:	f010 0003 	ands.w	r0, r0, #3
    c99c:	d1fb      	bne.n	c996 <_usb_d_dev_init+0xaa>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    c99e:	4b09      	ldr	r3, [pc, #36]	; (c9c4 <_usb_d_dev_init+0xd8>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    c9a0:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    c9a2:	2301      	movs	r3, #1
    c9a4:	8113      	strh	r3, [r2, #8]
}
    c9a6:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    c9a8:	2209      	movs	r2, #9
    c9aa:	e7da      	b.n	c962 <_usb_d_dev_init+0x76>
		pad_transp = 25;
    c9ac:	2319      	movs	r3, #25
    c9ae:	e7dc      	b.n	c96a <_usb_d_dev_init+0x7e>
		pad_trim = 6;
    c9b0:	2106      	movs	r1, #6
    c9b2:	e7de      	b.n	c972 <_usb_d_dev_init+0x86>
    c9b4:	0000c13d 	.word	0x0000c13d
    c9b8:	20000898 	.word	0x20000898
    c9bc:	0000c3a5 	.word	0x0000c3a5
    c9c0:	00800084 	.word	0x00800084
    c9c4:	20000ac8 	.word	0x20000ac8

0000c9c8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    c9c8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c9cc:	789a      	ldrb	r2, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    c9ce:	0792      	lsls	r2, r2, #30
    c9d0:	d122      	bne.n	ca18 <_usb_d_dev_enable+0x50>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c9d2:	789a      	ldrb	r2, [r3, #2]
    c9d4:	0790      	lsls	r0, r2, #30
    c9d6:	d1fc      	bne.n	c9d2 <_usb_d_dev_enable+0xa>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    c9d8:	7819      	ldrb	r1, [r3, #0]
    c9da:	b2ca      	uxtb	r2, r1
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    c9dc:	0789      	lsls	r1, r1, #30
    c9de:	d407      	bmi.n	c9f0 <_usb_d_dev_enable+0x28>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    c9e0:	f042 0202 	orr.w	r2, r2, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c9e4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c9e6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c9ea:	7893      	ldrb	r3, [r2, #2]
    c9ec:	079b      	lsls	r3, r3, #30
    c9ee:	d1fc      	bne.n	c9ea <_usb_d_dev_enable+0x22>
    c9f0:	4b0b      	ldr	r3, [pc, #44]	; (ca20 <_usb_d_dev_enable+0x58>)
    c9f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c9f6:	609a      	str	r2, [r3, #8]
    c9f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    c9fc:	609a      	str	r2, [r3, #8]
    c9fe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    ca02:	609a      	str	r2, [r3, #8]
    ca04:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    ca08:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    ca0a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ca0e:	f240 228d 	movw	r2, #653	; 0x28d
    ca12:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    ca14:	2000      	movs	r0, #0
    ca16:	4770      	bx	lr
		return -USB_ERR_DENIED;
    ca18:	f06f 0010 	mvn.w	r0, #16
}
    ca1c:	4770      	bx	lr
    ca1e:	bf00      	nop
    ca20:	e000e100 	.word	0xe000e100

0000ca24 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    ca24:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    ca28:	8913      	ldrh	r3, [r2, #8]
    ca2a:	f023 0301 	bic.w	r3, r3, #1
    ca2e:	041b      	lsls	r3, r3, #16
    ca30:	0c1b      	lsrs	r3, r3, #16
    ca32:	8113      	strh	r3, [r2, #8]
}
    ca34:	4770      	bx	lr

0000ca36 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
    ca36:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    ca3a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    ca3e:	7298      	strb	r0, [r3, #10]
}
    ca40:	4770      	bx	lr

0000ca42 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    ca42:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ca46:	8a18      	ldrh	r0, [r3, #16]
}
    ca48:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    ca4c:	4770      	bx	lr
	...

0000ca50 <_usb_d_dev_ep_init>:
{
    ca50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    ca54:	f000 040f 	and.w	r4, r0, #15
{
    ca58:	460d      	mov	r5, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ca5a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; cb0c <_usb_d_dev_ep_init+0xbc>
    ca5e:	09c1      	lsrs	r1, r0, #7
{
    ca60:	4607      	mov	r7, r0
    ca62:	fa4f f880 	sxtb.w	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ca66:	4620      	mov	r0, r4
    ca68:	47c8      	blx	r9
	if (epn > CONF_USB_D_MAX_EP_N) {
    ca6a:	2c05      	cmp	r4, #5
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ca6c:	4606      	mov	r6, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    ca6e:	f005 0503 	and.w	r5, r5, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
    ca72:	d83f      	bhi.n	caf4 <_usb_d_dev_ep_init+0xa4>
	if (ept->ep != 0xFF) {
    ca74:	7c83      	ldrb	r3, [r0, #18]
    ca76:	2bff      	cmp	r3, #255	; 0xff
    ca78:	d13f      	bne.n	cafa <_usb_d_dev_ep_init+0xaa>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    ca7a:	b985      	cbnz	r5, ca9e <_usb_d_dev_ep_init+0x4e>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    ca7c:	ea6f 0108 	mvn.w	r1, r8
    ca80:	0fc9      	lsrs	r1, r1, #31
    ca82:	4620      	mov	r0, r4
    ca84:	47c8      	blx	r9
		if (ept_in->ep != 0xFF) {
    ca86:	7c83      	ldrb	r3, [r0, #18]
    ca88:	2bff      	cmp	r3, #255	; 0xff
    ca8a:	d136      	bne.n	cafa <_usb_d_dev_ep_init+0xaa>
		if (pcfg->cache == NULL) {
    ca8c:	230c      	movs	r3, #12
    ca8e:	491e      	ldr	r1, [pc, #120]	; (cb08 <_usb_d_dev_ep_init+0xb8>)
    ca90:	4363      	muls	r3, r4
    ca92:	58cb      	ldr	r3, [r1, r3]
    ca94:	2b00      	cmp	r3, #0
    ca96:	d133      	bne.n	cb00 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    ca98:	f06f 0012 	mvn.w	r0, #18
    ca9c:	e018      	b.n	cad0 <_usb_d_dev_ep_init+0x80>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    ca9e:	f1b8 0f00 	cmp.w	r8, #0
    caa2:	da17      	bge.n	cad4 <_usb_d_dev_ep_init+0x84>
    caa4:	4918      	ldr	r1, [pc, #96]	; (cb08 <_usb_d_dev_ep_init+0xb8>)
    caa6:	230c      	movs	r3, #12
    caa8:	fb03 1304 	mla	r3, r3, r4, r1
    caac:	6859      	ldr	r1, [r3, #4]
    caae:	b9e9      	cbnz	r1, caec <_usb_d_dev_ep_init+0x9c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cab0:	4915      	ldr	r1, [pc, #84]	; (cb08 <_usb_d_dev_ep_init+0xb8>)
	ept->size     = max_pkt_siz;
    cab2:	8232      	strh	r2, [r6, #16]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cab4:	230c      	movs	r3, #12
    cab6:	435c      	muls	r4, r3
    cab8:	190b      	adds	r3, r1, r4
    caba:	5909      	ldr	r1, [r1, r4]
    cabc:	685b      	ldr	r3, [r3, #4]
	ept->ep       = ep;
    cabe:	74b7      	strb	r7, [r6, #18]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cac0:	ea13 0328 	ands.w	r3, r3, r8, asr #32
    cac4:	bf38      	it	cc
    cac6:	460b      	movcc	r3, r1
	ept->flags.u8 = (ep_type + 1);
    cac8:	3501      	adds	r5, #1
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    caca:	60f3      	str	r3, [r6, #12]
	ept->flags.u8 = (ep_type + 1);
    cacc:	74f5      	strb	r5, [r6, #19]
	return USB_OK;
    cace:	2000      	movs	r0, #0
}
    cad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cad4:	230c      	movs	r3, #12
    cad6:	490c      	ldr	r1, [pc, #48]	; (cb08 <_usb_d_dev_ep_init+0xb8>)
    cad8:	4363      	muls	r3, r4
    cada:	58cb      	ldr	r3, [r1, r3]
    cadc:	2b00      	cmp	r3, #0
    cade:	d0e7      	beq.n	cab0 <_usb_d_dev_ep_init+0x60>
    cae0:	4909      	ldr	r1, [pc, #36]	; (cb08 <_usb_d_dev_ep_init+0xb8>)
    cae2:	230c      	movs	r3, #12
    cae4:	fb03 1304 	mla	r3, r3, r4, r1
    cae8:	891b      	ldrh	r3, [r3, #8]
    caea:	e000      	b.n	caee <_usb_d_dev_ep_init+0x9e>
    caec:	895b      	ldrh	r3, [r3, #10]
    caee:	429a      	cmp	r2, r3
    caf0:	ddde      	ble.n	cab0 <_usb_d_dev_ep_init+0x60>
    caf2:	e7d1      	b.n	ca98 <_usb_d_dev_ep_init+0x48>
		return -USB_ERR_PARAM;
    caf4:	f06f 0011 	mvn.w	r0, #17
    caf8:	e7ea      	b.n	cad0 <_usb_d_dev_ep_init+0x80>
		return -USB_ERR_REDO;
    cafa:	f06f 0013 	mvn.w	r0, #19
    cafe:	e7e7      	b.n	cad0 <_usb_d_dev_ep_init+0x80>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cb00:	f1b8 0f00 	cmp.w	r8, #0
    cb04:	daec      	bge.n	cae0 <_usb_d_dev_ep_init+0x90>
    cb06:	e7cd      	b.n	caa4 <_usb_d_dev_ep_init+0x54>
    cb08:	00015a28 	.word	0x00015a28
    cb0c:	0000c165 	.word	0x0000c165

0000cb10 <_usb_d_dev_ep_deinit>:
{
    cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    cb12:	f000 050f 	and.w	r5, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cb16:	2d05      	cmp	r5, #5
{
    cb18:	4604      	mov	r4, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cb1a:	d818      	bhi.n	cb4e <_usb_d_dev_ep_deinit+0x3e>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cb1c:	4b17      	ldr	r3, [pc, #92]	; (cb7c <_usb_d_dev_ep_deinit+0x6c>)
	bool                  dir = USB_EP_GET_DIR(ep);
    cb1e:	09c1      	lsrs	r1, r0, #7
    cb20:	b247      	sxtb	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cb22:	4628      	mov	r0, r5
    cb24:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cb26:	7c83      	ldrb	r3, [r0, #18]
    cb28:	2bff      	cmp	r3, #255	; 0xff
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cb2a:	4606      	mov	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cb2c:	d00f      	beq.n	cb4e <_usb_d_dev_ep_deinit+0x3e>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    cb2e:	4b14      	ldr	r3, [pc, #80]	; (cb80 <_usb_d_dev_ep_deinit+0x70>)
    cb30:	2203      	movs	r2, #3
    cb32:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    cb34:	7cf3      	ldrb	r3, [r6, #19]
    cb36:	f003 0307 	and.w	r3, r3, #7
    cb3a:	2b01      	cmp	r3, #1
    cb3c:	d108      	bne.n	cb50 <_usb_d_dev_ep_deinit+0x40>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    cb3e:	0164      	lsls	r4, r4, #5
    cb40:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    cb44:	2300      	movs	r3, #0
    cb46:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	ept->ep       = 0xFF;
    cb4a:	23ff      	movs	r3, #255	; 0xff
    cb4c:	8273      	strh	r3, [r6, #18]
}
    cb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (USB_EP_GET_DIR(ep)) {
    cb50:	2f00      	cmp	r7, #0
    cb52:	da09      	bge.n	cb68 <_usb_d_dev_ep_deinit+0x58>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    cb54:	016b      	lsls	r3, r5, #5
    cb56:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    cb5a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    cb5e:	f002 028f 	and.w	r2, r2, #143	; 0x8f
    cb62:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    cb66:	e7f0      	b.n	cb4a <_usb_d_dev_ep_deinit+0x3a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    cb68:	0164      	lsls	r4, r4, #5
    cb6a:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    cb6e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    cb72:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    cb76:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    cb7a:	e7e6      	b.n	cb4a <_usb_d_dev_ep_deinit+0x3a>
    cb7c:	0000c165 	.word	0x0000c165
    cb80:	0000c25d 	.word	0x0000c25d

0000cb84 <_usb_d_dev_ep_enable>:
{
    cb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    cb88:	f000 050f 	and.w	r5, r0, #15
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    cb8c:	09c1      	lsrs	r1, r0, #7
    cb8e:	4b55      	ldr	r3, [pc, #340]	; (cce4 <_usb_d_dev_ep_enable+0x160>)
    cb90:	fa4f f980 	sxtb.w	r9, r0
    cb94:	4628      	mov	r0, r5
    cb96:	4798      	blx	r3
    cb98:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    cb9c:	f10c 4682 	add.w	r6, ip, #1090519040	; 0x41000000
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cba0:	2d05      	cmp	r5, #5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    cba2:	f896 1100 	ldrb.w	r1, [r6, #256]	; 0x100
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    cba6:	4607      	mov	r7, r0
    cba8:	b2c8      	uxtb	r0, r1
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cbaa:	f200 8094 	bhi.w	ccd6 <_usb_d_dev_ep_enable+0x152>
    cbae:	7cba      	ldrb	r2, [r7, #18]
    cbb0:	2aff      	cmp	r2, #255	; 0xff
    cbb2:	f000 8090 	beq.w	ccd6 <_usb_d_dev_ep_enable+0x152>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    cbb6:	7cf9      	ldrb	r1, [r7, #19]
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    cbb8:	4c4b      	ldr	r4, [pc, #300]	; (cce8 <_usb_d_dev_ep_enable+0x164>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    cbba:	f001 0307 	and.w	r3, r1, #7
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    cbbe:	f504 780c 	add.w	r8, r4, #560	; 0x230
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    cbc2:	2b01      	cmp	r3, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    cbc4:	44e0      	add	r8, ip
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    cbc6:	d147      	bne.n	cc58 <_usb_d_dev_ep_enable+0xd4>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    cbc8:	f010 0377 	ands.w	r3, r0, #119	; 0x77
    cbcc:	f040 8086 	bne.w	ccdc <_usb_d_dev_ep_enable+0x158>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cbd0:	f8b7 9010 	ldrh.w	r9, [r7, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    cbd4:	2111      	movs	r1, #17
    cbd6:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cbda:	4648      	mov	r0, r9
    cbdc:	4943      	ldr	r1, [pc, #268]	; (ccec <_usb_d_dev_ep_enable+0x168>)
    cbde:	4788      	blx	r1
    cbe0:	0700      	lsls	r0, r0, #28
    cbe2:	f000 41e0 	and.w	r1, r0, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cbe6:	4842      	ldr	r0, [pc, #264]	; (ccf0 <_usb_d_dev_ep_enable+0x16c>)
    cbe8:	ea00 3089 	and.w	r0, r0, r9, lsl #14
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cbec:	f3c9 090d 	ubfx	r9, r9, #0, #14
	bank->STATUS_BK.reg     = 0;
    cbf0:	eb04 1545 	add.w	r5, r4, r5, lsl #5
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cbf4:	4308      	orrs	r0, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cbf6:	f002 020f 	and.w	r2, r2, #15
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cbfa:	ea49 0101 	orr.w	r1, r9, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cbfe:	f8c8 0004 	str.w	r0, [r8, #4]
	bank->ADDR.reg          = addr;
    cc02:	eb04 1442 	add.w	r4, r4, r2, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cc06:	f8c8 1014 	str.w	r1, [r8, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cc0a:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cc0e:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cc10:	f886 c105 	strb.w	ip, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cc14:	f886 1104 	strb.w	r1, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    cc18:	f885 323a 	strb.w	r3, [r5, #570]	; 0x23a
    cc1c:	f885 324a 	strb.w	r3, [r5, #586]	; 0x24a
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cc20:	68fd      	ldr	r5, [r7, #12]
	bank->ADDR.reg          = addr;
    cc22:	f8c4 5230 	str.w	r5, [r4, #560]	; 0x230
    cc26:	f504 710c 	add.w	r1, r4, #560	; 0x230
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    cc2a:	f8d4 4234 	ldr.w	r4, [r4, #564]	; 0x234
    cc2e:	f369 349b 	bfi	r4, r9, #14, #14
    cc32:	604c      	str	r4, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    cc34:	684c      	ldr	r4, [r1, #4]
	bank->ADDR.reg          = addr;
    cc36:	0150      	lsls	r0, r2, #5
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    cc38:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    cc3c:	f363 040d 	bfi	r4, r3, #0, #14
    cc40:	604c      	str	r4, [r1, #4]
    cc42:	21b0      	movs	r1, #176	; 0xb0
    cc44:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    cc48:	2110      	movs	r1, #16
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cc4a:	f882 c105 	strb.w	ip, [r2, #261]	; 0x105
	return USB_OK;
    cc4e:	4618      	mov	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    cc50:	f882 1109 	strb.w	r1, [r2, #265]	; 0x109
}
    cc54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (dir) {
    cc58:	f1b9 0f00 	cmp.w	r9, #0
    cc5c:	da1e      	bge.n	cc9c <_usb_d_dev_ep_enable+0x118>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    cc5e:	f010 0270 	ands.w	r2, r0, #112	; 0x70
    cc62:	d13b      	bne.n	ccdc <_usb_d_dev_ep_enable+0x158>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    cc64:	f3c1 0102 	ubfx	r1, r1, #0, #3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cc68:	8a3b      	ldrh	r3, [r7, #16]
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    cc6a:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
    cc6e:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    cc70:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cc74:	4618      	mov	r0, r3
    cc76:	491d      	ldr	r1, [pc, #116]	; (ccec <_usb_d_dev_ep_enable+0x168>)
    cc78:	4788      	blx	r1
    cc7a:	0700      	lsls	r0, r0, #28
    cc7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cc80:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
    cc84:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cc88:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cc8a:	2380      	movs	r3, #128	; 0x80
    cc8c:	f8c8 0014 	str.w	r0, [r8, #20]
    cc90:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    cc94:	f884 224a 	strb.w	r2, [r4, #586]	; 0x24a
	return USB_OK;
    cc98:	4610      	mov	r0, r2
}
    cc9a:	e7db      	b.n	cc54 <_usb_d_dev_ep_enable+0xd0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    cc9c:	f010 0207 	ands.w	r2, r0, #7
    cca0:	d11c      	bne.n	ccdc <_usb_d_dev_ep_enable+0x158>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    cca2:	f001 0107 	and.w	r1, r1, #7
    cca6:	4301      	orrs	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    cca8:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ccac:	8a39      	ldrh	r1, [r7, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ccae:	4b0f      	ldr	r3, [pc, #60]	; (ccec <_usb_d_dev_ep_enable+0x168>)
    ccb0:	4608      	mov	r0, r1
    ccb2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ccb4:	4b0e      	ldr	r3, [pc, #56]	; (ccf0 <_usb_d_dev_ep_enable+0x16c>)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ccb6:	0700      	lsls	r0, r0, #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ccb8:	ea03 3381 	and.w	r3, r3, r1, lsl #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ccbc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    ccc0:	4303      	orrs	r3, r0
	bank->STATUS_BK.reg     = 0;
    ccc2:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ccc6:	f8c8 3004 	str.w	r3, [r8, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    ccca:	2340      	movs	r3, #64	; 0x40
    cccc:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    ccd0:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
    ccd4:	e7e0      	b.n	cc98 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    ccd6:	f06f 0011 	mvn.w	r0, #17
    ccda:	e7bb      	b.n	cc54 <_usb_d_dev_ep_enable+0xd0>
			return -USB_ERR_REDO;
    ccdc:	f06f 0013 	mvn.w	r0, #19
    cce0:	e7b8      	b.n	cc54 <_usb_d_dev_ep_enable+0xd0>
    cce2:	bf00      	nop
    cce4:	0000c165 	.word	0x0000c165
    cce8:	20000898 	.word	0x20000898
    ccec:	0000c8ad 	.word	0x0000c8ad
    ccf0:	0fffc000 	.word	0x0fffc000

0000ccf4 <_usb_d_dev_ep_stall>:
{
    ccf4:	b538      	push	{r3, r4, r5, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    ccf6:	f000 020f 	and.w	r2, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    ccfa:	09c4      	lsrs	r4, r0, #7
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ccfc:	4b2f      	ldr	r3, [pc, #188]	; (cdbc <_usb_d_dev_ep_stall+0xc8>)
{
    ccfe:	460d      	mov	r5, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cd00:	4610      	mov	r0, r2
    cd02:	4621      	mov	r1, r4
    cd04:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    cd06:	2a05      	cmp	r2, #5
    cd08:	d855      	bhi.n	cdb6 <_usb_d_dev_ep_stall+0xc2>
	if (USB_EP_STALL_SET == ctrl) {
    cd0a:	7c83      	ldrb	r3, [r0, #18]
    cd0c:	2210      	movs	r2, #16
    cd0e:	2d01      	cmp	r5, #1
    cd10:	f003 030f 	and.w	r3, r3, #15
    cd14:	fa02 f204 	lsl.w	r2, r2, r4
    cd18:	d113      	bne.n	cd42 <_usb_d_dev_ep_stall+0x4e>
    cd1a:	0159      	lsls	r1, r3, #5
    cd1c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cd20:	b2d2      	uxtb	r2, r2
    cd22:	f881 2105 	strb.w	r2, [r1, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    cd26:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    cd28:	2120      	movs	r1, #32
    cd2a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    cd2e:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    cd30:	b2c9      	uxtb	r1, r1
    cd32:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    cd36:	7cc3      	ldrb	r3, [r0, #19]
    cd38:	f043 0308 	orr.w	r3, r3, #8
    cd3c:	74c3      	strb	r3, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    cd3e:	2000      	movs	r0, #0
}
    cd40:	bd38      	pop	{r3, r4, r5, pc}
	} else if (USB_EP_STALL_CLR == ctrl) {
    cd42:	bb6d      	cbnz	r5, cda0 <_usb_d_dev_ep_stall+0xac>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    cd44:	015d      	lsls	r5, r3, #5
    cd46:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    cd4a:	f895 1106 	ldrb.w	r1, [r5, #262]	; 0x106
	if (!is_stalled) {
    cd4e:	4211      	tst	r1, r2
    cd50:	d0f5      	beq.n	cd3e <_usb_d_dev_ep_stall+0x4a>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cd52:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cd54:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    cd58:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    cd5a:	2220      	movs	r2, #32
    cd5c:	40a2      	lsls	r2, r4
    cd5e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    cd62:	b2d1      	uxtb	r1, r2
    cd64:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    cd68:	f895 3107 	ldrb.w	r3, [r5, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    cd6c:	4213      	tst	r3, r2
    cd6e:	d006      	beq.n	cd7e <_usb_d_dev_ep_stall+0x8a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    cd70:	f885 1107 	strb.w	r1, [r5, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    cd74:	2101      	movs	r1, #1
    cd76:	40a1      	lsls	r1, r4
    cd78:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cd7a:	f885 1104 	strb.w	r1, [r5, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    cd7e:	7cc2      	ldrb	r2, [r0, #19]
    cd80:	f002 0307 	and.w	r3, r2, #7
    cd84:	2b01      	cmp	r3, #1
    cd86:	d108      	bne.n	cd9a <_usb_d_dev_ep_stall+0xa6>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    cd88:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    cd8c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    cd90:	d1d5      	bne.n	cd3e <_usb_d_dev_ep_stall+0x4a>
			ept->flags.bits.is_stalled = 0;
    cd92:	f363 02c3 	bfi	r2, r3, #3, #1
		ept->flags.bits.is_stalled = 0;
    cd96:	74c2      	strb	r2, [r0, #19]
    cd98:	e7d1      	b.n	cd3e <_usb_d_dev_ep_stall+0x4a>
    cd9a:	f36f 02c3 	bfc	r2, #3, #1
    cd9e:	e7fa      	b.n	cd96 <_usb_d_dev_ep_stall+0xa2>
    cda0:	015b      	lsls	r3, r3, #5
    cda2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    cda6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    cdaa:	799b      	ldrb	r3, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cdac:	4213      	tst	r3, r2
    cdae:	bf14      	ite	ne
    cdb0:	2001      	movne	r0, #1
    cdb2:	2000      	moveq	r0, #0
    cdb4:	e7c4      	b.n	cd40 <_usb_d_dev_ep_stall+0x4c>
		return -USB_ERR_PARAM;
    cdb6:	f06f 0011 	mvn.w	r0, #17
    cdba:	e7c1      	b.n	cd40 <_usb_d_dev_ep_stall+0x4c>
    cdbc:	0000c165 	.word	0x0000c165

0000cdc0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    cdc0:	b570      	push	{r4, r5, r6, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    cdc2:	4b13      	ldr	r3, [pc, #76]	; (ce10 <_usb_d_dev_ep_read_req+0x50>)
	uint8_t            epn   = USB_EP_GET_N(ep);
    cdc4:	f000 060f 	and.w	r6, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    cdc8:	0172      	lsls	r2, r6, #5
    cdca:	eb03 1046 	add.w	r0, r3, r6, lsl #5
	uint32_t           addr  = bank[0].ADDR.reg;
    cdce:	589d      	ldr	r5, [r3, r2]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    cdd0:	6844      	ldr	r4, [r0, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    cdd2:	2e05      	cmp	r6, #5
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    cdd4:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    cdd8:	d814      	bhi.n	ce04 <_usb_d_dev_ep_read_req+0x44>
    cdda:	b199      	cbz	r1, ce04 <_usb_d_dev_ep_read_req+0x44>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    cddc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    cde0:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    cde4:	2b11      	cmp	r3, #17
    cde6:	d110      	bne.n	ce0a <_usb_d_dev_ep_read_req+0x4a>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    cde8:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    cdec:	f013 0010 	ands.w	r0, r3, #16
    cdf0:	d007      	beq.n	ce02 <_usb_d_dev_ep_read_req+0x42>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
    cdf2:	682b      	ldr	r3, [r5, #0]
    cdf4:	600b      	str	r3, [r1, #0]
    cdf6:	686b      	ldr	r3, [r5, #4]
    cdf8:	604b      	str	r3, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    cdfa:	2310      	movs	r3, #16
    cdfc:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	_usbd_ep_ack_setup(epn);

	return bytes;
    ce00:	4620      	mov	r0, r4
}
    ce02:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_PARAM;
    ce04:	f06f 0011 	mvn.w	r0, #17
    ce08:	e7fb      	b.n	ce02 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_FUNC;
    ce0a:	f06f 0012 	mvn.w	r0, #18
    ce0e:	e7f8      	b.n	ce02 <_usb_d_dev_ep_read_req+0x42>
    ce10:	20000ac8 	.word	0x20000ac8

0000ce14 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    ce14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ce18:	f890 9008 	ldrb.w	r9, [r0, #8]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ce1c:	4b39      	ldr	r3, [pc, #228]	; (cf04 <_usb_d_dev_ep_trans+0xf0>)
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    ce1e:	f009 050f 	and.w	r5, r9, #15
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    ce22:	fa4f f789 	sxtb.w	r7, r9
    ce26:	ea4f 19d9 	mov.w	r9, r9, lsr #7
{
    ce2a:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ce2c:	4649      	mov	r1, r9
    ce2e:	4628      	mov	r0, r5
    ce30:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ce32:	8a02      	ldrh	r2, [r0, #16]
	bool     size_n_aligned = (trans->size & size_mask);
    ce34:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    ce38:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ce3c:	429a      	cmp	r2, r3
    ce3e:	bf1a      	itte	ne
    ce40:	f102 33ff 	addne.w	r3, r2, #4294967295	; 0xffffffff
    ce44:	b29b      	uxthne	r3, r3
    ce46:	4613      	moveq	r3, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    ce48:	2d05      	cmp	r5, #5
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ce4a:	4604      	mov	r4, r0
	bool     size_n_aligned = (trans->size & size_mask);
    ce4c:	ea03 0601 	and.w	r6, r3, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
    ce50:	d828      	bhi.n	cea4 <_usb_d_dev_ep_trans+0x90>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    ce52:	f8d8 5000 	ldr.w	r5, [r8]
    ce56:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    ce5a:	d30a      	bcc.n	ce72 <_usb_d_dev_ep_trans+0x5e>
    ce5c:	4b2a      	ldr	r3, [pc, #168]	; (cf08 <_usb_d_dev_ep_trans+0xf4>)
    ce5e:	1948      	adds	r0, r1, r5
    ce60:	4298      	cmp	r0, r3
    ce62:	d206      	bcs.n	ce72 <_usb_d_dev_ep_trans+0x5e>
    ce64:	f015 0503 	ands.w	r5, r5, #3
    ce68:	d103      	bne.n	ce72 <_usb_d_dev_ep_trans+0x5e>
	    || (!dir && (trans->size < ept->size))) {
    ce6a:	2f00      	cmp	r7, #0
    ce6c:	db05      	blt.n	ce7a <_usb_d_dev_ep_trans+0x66>
    ce6e:	4291      	cmp	r1, r2
    ce70:	d214      	bcs.n	ce9c <_usb_d_dev_ep_trans+0x88>
		if (!ept->cache) {
    ce72:	68e3      	ldr	r3, [r4, #12]
    ce74:	2b00      	cmp	r3, #0
    ce76:	d03f      	beq.n	cef8 <_usb_d_dev_ep_trans+0xe4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    ce78:	2501      	movs	r5, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    ce7a:	7ce3      	ldrb	r3, [r4, #19]
    ce7c:	071b      	lsls	r3, r3, #28
    ce7e:	d43e      	bmi.n	cefe <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    ce80:	4b22      	ldr	r3, [pc, #136]	; (cf0c <_usb_d_dev_ep_trans+0xf8>)
    ce82:	a801      	add	r0, sp, #4
    ce84:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    ce86:	7ce3      	ldrb	r3, [r4, #19]
    ce88:	4a21      	ldr	r2, [pc, #132]	; (cf10 <_usb_d_dev_ep_trans+0xfc>)
    ce8a:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
    ce8e:	d00e      	beq.n	ceae <_usb_d_dev_ep_trans+0x9a>
		atomic_leave_critical(&flags);
    ce90:	a801      	add	r0, sp, #4
    ce92:	4790      	blx	r2
		return USB_BUSY;
    ce94:	2001      	movs	r0, #1
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    ce96:	b002      	add	sp, #8
    ce98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dir && size_n_aligned) {
    ce9c:	b12e      	cbz	r6, ceaa <_usb_d_dev_ep_trans+0x96>
		if (!ept->cache) {
    ce9e:	68e3      	ldr	r3, [r4, #12]
    cea0:	2b00      	cmp	r3, #0
    cea2:	d1ea      	bne.n	ce7a <_usb_d_dev_ep_trans+0x66>
		return -USB_ERR_PARAM;
    cea4:	f06f 0011 	mvn.w	r0, #17
    cea8:	e7f5      	b.n	ce96 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
    ceaa:	4635      	mov	r5, r6
    ceac:	e7e5      	b.n	ce7a <_usb_d_dev_ep_trans+0x66>
	ept->flags.bits.is_busy = 1;
    ceae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ceb2:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    ceb4:	a801      	add	r0, sp, #4
    ceb6:	4790      	blx	r2
	ept->trans_buf   = trans->buf;
    ceb8:	f8d8 3000 	ldr.w	r3, [r8]
    cebc:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    cebe:	f8d8 3004 	ldr.w	r3, [r8, #4]
	ept->trans_count = 0;
    cec2:	e9c4 3a01 	strd	r3, sl, [r4, #4]
	ept->flags.bits.dir       = dir;
    cec6:	7ce3      	ldrb	r3, [r4, #19]
    cec8:	f369 13c7 	bfi	r3, r9, #7, #1
	ept->flags.bits.use_cache = use_cache;
    cecc:	f365 1345 	bfi	r3, r5, #5, #1
    ced0:	74e3      	strb	r3, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ced2:	f898 3009 	ldrb.w	r3, [r8, #9]
    ced6:	b113      	cbz	r3, cede <_usb_d_dev_ep_trans+0xca>
    ced8:	fab6 f386 	clz	r3, r6
    cedc:	095b      	lsrs	r3, r3, #5
    cede:	7ce2      	ldrb	r2, [r4, #19]
	if (dir) {
    cee0:	2f00      	cmp	r7, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    cee2:	f363 1204 	bfi	r2, r3, #4, #1
		_usb_d_dev_in_next(ept, false);
    cee6:	4620      	mov	r0, r4
    cee8:	bfb4      	ite	lt
    ceea:	4b0a      	ldrlt	r3, [pc, #40]	; (cf14 <_usb_d_dev_ep_trans+0x100>)
		_usb_d_dev_out_next(ept, false);
    ceec:	4b0a      	ldrge	r3, [pc, #40]	; (cf18 <_usb_d_dev_ep_trans+0x104>)
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    ceee:	74e2      	strb	r2, [r4, #19]
		_usb_d_dev_in_next(ept, false);
    cef0:	2100      	movs	r1, #0
		_usb_d_dev_out_next(ept, false);
    cef2:	4798      	blx	r3
	return ERR_NONE;
    cef4:	2000      	movs	r0, #0
    cef6:	e7ce      	b.n	ce96 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
    cef8:	f06f 0012 	mvn.w	r0, #18
    cefc:	e7cb      	b.n	ce96 <_usb_d_dev_ep_trans+0x82>
		return USB_HALTED;
    cefe:	2002      	movs	r0, #2
    cf00:	e7c9      	b.n	ce96 <_usb_d_dev_ep_trans+0x82>
    cf02:	bf00      	nop
    cf04:	0000c165 	.word	0x0000c165
    cf08:	20042000 	.word	0x20042000
    cf0c:	00011569 	.word	0x00011569
    cf10:	00011577 	.word	0x00011577
    cf14:	0000c3e5 	.word	0x0000c3e5
    cf18:	0000c541 	.word	0x0000c541

0000cf1c <_usb_d_dev_ep_get_status>:
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}

int32_t _usb_d_dev_ep_get_status(const uint8_t ep, struct usb_d_trans_status *stat)
{
    cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    cf1e:	f000 040f 	and.w	r4, r0, #15
{
    cf22:	460a      	mov	r2, r1
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cf24:	4b19      	ldr	r3, [pc, #100]	; (cf8c <_usb_d_dev_ep_get_status+0x70>)
    cf26:	09c1      	lsrs	r1, r0, #7
{
    cf28:	4607      	mov	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cf2a:	4620      	mov	r0, r4
    cf2c:	4798      	blx	r3
	bool                  busy, stall;

	if (epn > CONF_USB_D_MAX_EP_N) {
    cf2e:	2c05      	cmp	r4, #5
    cf30:	d82a      	bhi.n	cf88 <_usb_d_dev_ep_get_status+0x6c>
		return USB_ERR_PARAM;
	}
	busy  = ept->flags.bits.is_busy;
    cf32:	7cc5      	ldrb	r5, [r0, #19]
    cf34:	f3c5 1180 	ubfx	r1, r5, #6, #1
	stall = ept->flags.bits.is_stalled;
    cf38:	f3c5 06c0 	ubfx	r6, r5, #3, #1
	if (stat) {
    cf3c:	b1fa      	cbz	r2, cf7e <_usb_d_dev_ep_get_status+0x62>
		stat->stall = stall;
    cf3e:	7a53      	ldrb	r3, [r2, #9]
		stat->busy  = busy;
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    cf40:	0164      	lsls	r4, r4, #5
		stat->stall = stall;
    cf42:	f366 1304 	bfi	r3, r6, #4, #1
		stat->busy  = busy;
    cf46:	f361 0382 	bfi	r3, r1, #2, #1
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    cf4a:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
		stat->busy  = busy;
    cf4e:	7253      	strb	r3, [r2, #9]
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    cf50:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
    cf54:	f3c3 1400 	ubfx	r4, r3, #4, #1
		stat->dir   = ept->flags.bits.dir;
		stat->size  = ept->trans_size;
    cf58:	6843      	ldr	r3, [r0, #4]
    cf5a:	6013      	str	r3, [r2, #0]
		stat->count = ept->trans_count;
    cf5c:	6883      	ldr	r3, [r0, #8]
		stat->ep    = ep;
    cf5e:	7217      	strb	r7, [r2, #8]
		stat->count = ept->trans_count;
    cf60:	6053      	str	r3, [r2, #4]
		stat->xtype = ept->flags.bits.eptype - 1;
    cf62:	7cc3      	ldrb	r3, [r0, #19]
    cf64:	7a50      	ldrb	r0, [r2, #9]
    cf66:	3303      	adds	r3, #3
    cf68:	f003 0303 	and.w	r3, r3, #3
		stat->dir   = ept->flags.bits.dir;
    cf6c:	09ed      	lsrs	r5, r5, #7
		stat->xtype = ept->flags.bits.eptype - 1;
    cf6e:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
    cf72:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    cf76:	f020 002b 	bic.w	r0, r0, #43	; 0x2b
    cf7a:	4303      	orrs	r3, r0
    cf7c:	7253      	strb	r3, [r2, #9]
		return USB_ERR_PARAM;
    cf7e:	2e00      	cmp	r6, #0
    cf80:	bf0c      	ite	eq
    cf82:	4608      	moveq	r0, r1
    cf84:	2002      	movne	r0, #2
	}
	if (busy) {
		return USB_BUSY;
	}
	return USB_OK;
}
    cf86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return USB_ERR_PARAM;
    cf88:	2012      	movs	r0, #18
    cf8a:	e7fc      	b.n	cf86 <_usb_d_dev_ep_get_status+0x6a>
    cf8c:	0000c165 	.word	0x0000c165

0000cf90 <_usb_d_dev_register_callback>:

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    cf90:	4b06      	ldr	r3, [pc, #24]	; (cfac <_usb_d_dev_register_callback+0x1c>)
    cf92:	2900      	cmp	r1, #0
    cf94:	bf08      	it	eq
    cf96:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    cf98:	2801      	cmp	r0, #1
    cf9a:	d102      	bne.n	cfa2 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    cf9c:	4b04      	ldr	r3, [pc, #16]	; (cfb0 <_usb_d_dev_register_callback+0x20>)
    cf9e:	6059      	str	r1, [r3, #4]
    cfa0:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    cfa2:	b908      	cbnz	r0, cfa8 <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    cfa4:	4b02      	ldr	r3, [pc, #8]	; (cfb0 <_usb_d_dev_register_callback+0x20>)
    cfa6:	6019      	str	r1, [r3, #0]
	}
}
    cfa8:	4770      	bx	lr
    cfaa:	bf00      	nop
    cfac:	0000c13d 	.word	0x0000c13d
    cfb0:	20000898 	.word	0x20000898

0000cfb4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    cfb4:	4b08      	ldr	r3, [pc, #32]	; (cfd8 <_usb_d_dev_register_ep_callback+0x24>)
    cfb6:	2900      	cmp	r1, #0
    cfb8:	bf08      	it	eq
    cfba:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    cfbc:	b910      	cbnz	r0, cfc4 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    cfbe:	4b07      	ldr	r3, [pc, #28]	; (cfdc <_usb_d_dev_register_ep_callback+0x28>)
    cfc0:	6099      	str	r1, [r3, #8]
    cfc2:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    cfc4:	2801      	cmp	r0, #1
    cfc6:	d102      	bne.n	cfce <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    cfc8:	4b04      	ldr	r3, [pc, #16]	; (cfdc <_usb_d_dev_register_ep_callback+0x28>)
    cfca:	60d9      	str	r1, [r3, #12]
    cfcc:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    cfce:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    cfd0:	bf04      	itt	eq
    cfd2:	4b02      	ldreq	r3, [pc, #8]	; (cfdc <_usb_d_dev_register_ep_callback+0x28>)
    cfd4:	6119      	streq	r1, [r3, #16]
	}
}
    cfd6:	4770      	bx	lr
    cfd8:	0000c13d 	.word	0x0000c13d
    cfdc:	20000898 	.word	0x20000898

0000cfe0 <USB_0_Handler>:
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{

	_usb_d_dev_handler();
    cfe0:	4b00      	ldr	r3, [pc, #0]	; (cfe4 <USB_0_Handler+0x4>)
    cfe2:	4718      	bx	r3
    cfe4:	0000c6dd 	.word	0x0000c6dd

0000cfe8 <USB_1_Handler>:
    cfe8:	4b00      	ldr	r3, [pc, #0]	; (cfec <USB_1_Handler+0x4>)
    cfea:	4718      	bx	r3
    cfec:	0000c6dd 	.word	0x0000c6dd

0000cff0 <USB_2_Handler>:
    cff0:	4b00      	ldr	r3, [pc, #0]	; (cff4 <USB_2_Handler+0x4>)
    cff2:	4718      	bx	r3
    cff4:	0000c6dd 	.word	0x0000c6dd

0000cff8 <USB_3_Handler>:
    cff8:	4b00      	ldr	r3, [pc, #0]	; (cffc <USB_3_Handler+0x4>)
    cffa:	4718      	bx	r3
    cffc:	0000c6dd 	.word	0x0000c6dd

0000d000 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    d000:	b508      	push	{r3, lr}
    d002:	4603      	mov	r3, r0
    d004:	4608      	mov	r0, r1
    d006:	4611      	mov	r1, r2
	int n = 0;

	if (file != 0) {
    d008:	b923      	cbnz	r3, d014 <_read+0x14>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    d00a:	4b04      	ldr	r3, [pc, #16]	; (d01c <_read+0x1c>)
    d00c:	4798      	blx	r3
	if (n < 0) {
    d00e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		return -1;
	}

	return n;
}
    d012:	bd08      	pop	{r3, pc}
		return -1;
    d014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d018:	e7fb      	b.n	d012 <_read+0x12>
    d01a:	bf00      	nop
    d01c:	0000b3fd 	.word	0x0000b3fd

0000d020 <delay_init>:
/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
	_delay_init(hardware = hw);
    d020:	4b01      	ldr	r3, [pc, #4]	; (d028 <delay_init+0x8>)
    d022:	6018      	str	r0, [r3, #0]
    d024:	4b01      	ldr	r3, [pc, #4]	; (d02c <delay_init+0xc>)
    d026:	4718      	bx	r3
    d028:	20000c58 	.word	0x20000c58
    d02c:	00012329 	.word	0x00012329

0000d030 <delay_us>:
/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
	_delay_cycles(hardware, _get_cycles_for_us(us));
    d030:	4b05      	ldr	r3, [pc, #20]	; (d048 <delay_us+0x18>)
{
    d032:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    d034:	681c      	ldr	r4, [r3, #0]
    d036:	4b05      	ldr	r3, [pc, #20]	; (d04c <delay_us+0x1c>)
    d038:	4798      	blx	r3
    d03a:	4b05      	ldr	r3, [pc, #20]	; (d050 <delay_us+0x20>)
    d03c:	4601      	mov	r1, r0
    d03e:	4620      	mov	r0, r4
}
    d040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    d044:	4718      	bx	r3
    d046:	bf00      	nop
    d048:	20000c58 	.word	0x20000c58
    d04c:	0000b7f9 	.word	0x0000b7f9
    d050:	0001233d 	.word	0x0001233d

0000d054 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    d054:	4b05      	ldr	r3, [pc, #20]	; (d06c <delay_ms+0x18>)
{
    d056:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    d058:	681c      	ldr	r4, [r3, #0]
    d05a:	4b05      	ldr	r3, [pc, #20]	; (d070 <delay_ms+0x1c>)
    d05c:	4798      	blx	r3
    d05e:	4b05      	ldr	r3, [pc, #20]	; (d074 <delay_ms+0x20>)
    d060:	4601      	mov	r1, r0
    d062:	4620      	mov	r0, r4
}
    d064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    d068:	4718      	bx	r3
    d06a:	bf00      	nop
    d06c:	20000c58 	.word	0x20000c58
    d070:	0000b801 	.word	0x0000b801
    d074:	0001233d 	.word	0x0001233d

0000d078 <_init_chip>:
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    d078:	4a0e      	ldr	r2, [pc, #56]	; (d0b4 <_init_chip+0x3c>)
    d07a:	8813      	ldrh	r3, [r2, #0]
    d07c:	b29b      	uxth	r3, r3
    d07e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    d082:	b510      	push	{r4, lr}
    d084:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    d086:	4b0c      	ldr	r3, [pc, #48]	; (d0b8 <_init_chip+0x40>)
	_oscctrl_init_sources();
	_mclk_init();
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    d088:	4c0c      	ldr	r4, [pc, #48]	; (d0bc <_init_chip+0x44>)
	_osc32kctrl_init_sources();
    d08a:	4798      	blx	r3
	_oscctrl_init_sources();
    d08c:	4b0c      	ldr	r3, [pc, #48]	; (d0c0 <_init_chip+0x48>)
    d08e:	4798      	blx	r3
	_mclk_init();
    d090:	4b0c      	ldr	r3, [pc, #48]	; (d0c4 <_init_chip+0x4c>)
    d092:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    d094:	2004      	movs	r0, #4
    d096:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    d098:	4b0b      	ldr	r3, [pc, #44]	; (d0c8 <_init_chip+0x50>)
    d09a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    d09c:	f640 70fb 	movw	r0, #4091	; 0xffb
    d0a0:	47a0      	blx	r4
}

static inline void hri_mclk_set_AHBMASK_DMAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    d0a2:	4a0a      	ldr	r2, [pc, #40]	; (d0cc <_init_chip+0x54>)
    d0a4:	6913      	ldr	r3, [r2, #16]
    d0a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d0aa:	6113      	str	r3, [r2, #16]
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    d0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_dma_init();
    d0b0:	4b07      	ldr	r3, [pc, #28]	; (d0d0 <_init_chip+0x58>)
    d0b2:	4718      	bx	r3
    d0b4:	41004000 	.word	0x41004000
    d0b8:	0000f2d5 	.word	0x0000f2d5
    d0bc:	0000df3d 	.word	0x0000df3d
    d0c0:	0000d8e5 	.word	0x0000d8e5
    d0c4:	0000df1d 	.word	0x0000df1d
    d0c8:	0000d8e9 	.word	0x0000d8e9
    d0cc:	40000800 	.word	0x40000800
    d0d0:	0000d359 	.word	0x0000d359

0000d0d4 <RAMECC_Handler>:
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    d0d4:	4a0b      	ldr	r2, [pc, #44]	; (d104 <RAMECC_Handler+0x30>)
    d0d6:	7893      	ldrb	r3, [r2, #2]

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    d0d8:	b082      	sub	sp, #8
    d0da:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    d0dc:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    d0de:	9b01      	ldr	r3, [sp, #4]
    d0e0:	0799      	lsls	r1, r3, #30
    d0e2:	d505      	bpl.n	d0f0 <RAMECC_Handler+0x1c>
    d0e4:	4b08      	ldr	r3, [pc, #32]	; (d108 <RAMECC_Handler+0x34>)
    d0e6:	681b      	ldr	r3, [r3, #0]
    d0e8:	b113      	cbz	r3, d0f0 <RAMECC_Handler+0x1c>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    d0ea:	6850      	ldr	r0, [r2, #4]
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else {
		return;
	}
}
    d0ec:	b002      	add	sp, #8
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    d0ee:	4718      	bx	r3
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    d0f0:	9b01      	ldr	r3, [sp, #4]
    d0f2:	07db      	lsls	r3, r3, #31
    d0f4:	d504      	bpl.n	d100 <RAMECC_Handler+0x2c>
    d0f6:	4b04      	ldr	r3, [pc, #16]	; (d108 <RAMECC_Handler+0x34>)
    d0f8:	685b      	ldr	r3, [r3, #4]
    d0fa:	b10b      	cbz	r3, d100 <RAMECC_Handler+0x2c>
    d0fc:	4a01      	ldr	r2, [pc, #4]	; (d104 <RAMECC_Handler+0x30>)
    d0fe:	e7f4      	b.n	d0ea <RAMECC_Handler+0x16>
}
    d100:	b002      	add	sp, #8
    d102:	4770      	bx	lr
    d104:	41020000 	.word	0x41020000
    d108:	200146c0 	.word	0x200146c0

0000d10c <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d10c:	b430      	push	{r4, r5}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    d10e:	780a      	ldrb	r2, [r1, #0]
    d110:	2a81      	cmp	r2, #129	; 0x81
    d112:	d11c      	bne.n	d14e <hid_mouse_req+0x42>
    d114:	784b      	ldrb	r3, [r1, #1]
    d116:	2b06      	cmp	r3, #6
    d118:	d131      	bne.n	d17e <hid_mouse_req+0x72>
    d11a:	4a1a      	ldr	r2, [pc, #104]	; (d184 <hid_mouse_req+0x78>)
    d11c:	888c      	ldrh	r4, [r1, #4]
    d11e:	7a13      	ldrb	r3, [r2, #8]
    d120:	429c      	cmp	r4, r3
    d122:	d12c      	bne.n	d17e <hid_mouse_req+0x72>
	switch (req->wValue >> 8) {
    d124:	884b      	ldrh	r3, [r1, #2]
    d126:	0a1b      	lsrs	r3, r3, #8
    d128:	2b21      	cmp	r3, #33	; 0x21
    d12a:	d005      	beq.n	d138 <hid_mouse_req+0x2c>
    d12c:	2b22      	cmp	r3, #34	; 0x22
    d12e:	d00a      	beq.n	d146 <hid_mouse_req+0x3a>
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
			switch (req->bRequest) {
    d130:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    d134:	bc30      	pop	{r4, r5}
    d136:	4770      	bx	lr
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    d138:	6811      	ldr	r1, [r2, #0]
    d13a:	780a      	ldrb	r2, [r1, #0]
    d13c:	2300      	movs	r3, #0
				return usbdc_xfer(ep, NULL, 0, 0);
    d13e:	4c12      	ldr	r4, [pc, #72]	; (d188 <hid_mouse_req+0x7c>)
    d140:	46a4      	mov	ip, r4
}
    d142:	bc30      	pop	{r4, r5}
				return usbdc_xfer(ep, NULL, 0, 0);
    d144:	4760      	bx	ip
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    d146:	4911      	ldr	r1, [pc, #68]	; (d18c <hid_mouse_req+0x80>)
    d148:	2300      	movs	r3, #0
    d14a:	2234      	movs	r2, #52	; 0x34
    d14c:	e7f7      	b.n	d13e <hid_mouse_req+0x32>
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    d14e:	f3c2 1241 	ubfx	r2, r2, #5, #2
    d152:	2a01      	cmp	r2, #1
    d154:	d113      	bne.n	d17e <hid_mouse_req+0x72>
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    d156:	4c0b      	ldr	r4, [pc, #44]	; (d184 <hid_mouse_req+0x78>)
    d158:	888d      	ldrh	r5, [r1, #4]
    d15a:	7a23      	ldrb	r3, [r4, #8]
    d15c:	429d      	cmp	r5, r3
    d15e:	d10e      	bne.n	d17e <hid_mouse_req+0x72>
			switch (req->bRequest) {
    d160:	784b      	ldrb	r3, [r1, #1]
    d162:	2b03      	cmp	r3, #3
    d164:	d007      	beq.n	d176 <hid_mouse_req+0x6a>
    d166:	2b0b      	cmp	r3, #11
    d168:	d1e2      	bne.n	d130 <hid_mouse_req+0x24>
				_hiddf_mouse_funcd.protocol = req->wValue;
    d16a:	884b      	ldrh	r3, [r1, #2]
    d16c:	72a3      	strb	r3, [r4, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    d16e:	2300      	movs	r3, #0
    d170:	461a      	mov	r2, r3
    d172:	4619      	mov	r1, r3
    d174:	e7e3      	b.n	d13e <hid_mouse_req+0x32>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    d176:	2300      	movs	r3, #0
    d178:	f104 010a 	add.w	r1, r4, #10
    d17c:	e7df      	b.n	d13e <hid_mouse_req+0x32>
			return ERR_NOT_FOUND;
    d17e:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    d182:	e7d7      	b.n	d134 <hid_mouse_req+0x28>
    d184:	20000c5c 	.word	0x20000c5c
    d188:	00011b19 	.word	0x00011b19
    d18c:	00015a70 	.word	0x00015a70

0000d190 <hid_mouse_ctrl>:
	switch (ctrl) {
    d190:	2901      	cmp	r1, #1
{
    d192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d194:	4614      	mov	r4, r2
	switch (ctrl) {
    d196:	d03b      	beq.n	d210 <hid_mouse_ctrl+0x80>
    d198:	2902      	cmp	r1, #2
    d19a:	d04f      	beq.n	d23c <hid_mouse_ctrl+0xac>
    d19c:	2900      	cmp	r1, #0
    d19e:	d150      	bne.n	d242 <hid_mouse_ctrl+0xb2>
	ifc = desc->sod;
    d1a0:	6813      	ldr	r3, [r2, #0]
		return hid_mouse_enable(drv, (struct usbd_descriptors *)param);
    d1a2:	6886      	ldr	r6, [r0, #8]
	if (NULL == ifc) {
    d1a4:	b91b      	cbnz	r3, d1ae <hid_mouse_ctrl+0x1e>
		return ERR_NOT_FOUND;
    d1a6:	f06f 0409 	mvn.w	r4, #9
}
    d1aa:	4620      	mov	r0, r4
    d1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    d1ae:	7959      	ldrb	r1, [r3, #5]
	ifc_desc.bInterfaceNumber = ifc[2];
    d1b0:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    d1b2:	2903      	cmp	r1, #3
    d1b4:	d1f7      	bne.n	d1a6 <hid_mouse_ctrl+0x16>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    d1b6:	7a31      	ldrb	r1, [r6, #8]
    d1b8:	428a      	cmp	r2, r1
    d1ba:	d045      	beq.n	d248 <hid_mouse_ctrl+0xb8>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    d1bc:	29ff      	cmp	r1, #255	; 0xff
    d1be:	d146      	bne.n	d24e <hid_mouse_ctrl+0xbe>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    d1c0:	7232      	strb	r2, [r6, #8]
    d1c2:	7818      	ldrb	r0, [r3, #0]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    d1c4:	6861      	ldr	r1, [r4, #4]
    d1c6:	4f26      	ldr	r7, [pc, #152]	; (d260 <hid_mouse_ctrl+0xd0>)
    d1c8:	2221      	movs	r2, #33	; 0x21
    d1ca:	4418      	add	r0, r3
    d1cc:	4b25      	ldr	r3, [pc, #148]	; (d264 <hid_mouse_ctrl+0xd4>)
    d1ce:	4798      	blx	r3
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d1d0:	6823      	ldr	r3, [r4, #0]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    d1d2:	6038      	str	r0, [r7, #0]
    d1d4:	7818      	ldrb	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d1d6:	6861      	ldr	r1, [r4, #4]
    d1d8:	4418      	add	r0, r3
    d1da:	4b23      	ldr	r3, [pc, #140]	; (d268 <hid_mouse_ctrl+0xd8>)
    d1dc:	4798      	blx	r3
	desc->sod = ep;
    d1de:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    d1e0:	2800      	cmp	r0, #0
    d1e2:	d0e0      	beq.n	d1a6 <hid_mouse_ctrl+0x16>
	return (ptr[0] + (ptr[1] << 8));
    d1e4:	7943      	ldrb	r3, [r0, #5]
    d1e6:	7902      	ldrb	r2, [r0, #4]
		ep_desc.bEndpointAddress = ep[2];
    d1e8:	7885      	ldrb	r5, [r0, #2]
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d1ea:	78c1      	ldrb	r1, [r0, #3]
    d1ec:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    d1f0:	b292      	uxth	r2, r2
    d1f2:	4b1e      	ldr	r3, [pc, #120]	; (d26c <hid_mouse_ctrl+0xdc>)
    d1f4:	4628      	mov	r0, r5
    d1f6:	4798      	blx	r3
    d1f8:	4604      	mov	r4, r0
    d1fa:	bb58      	cbnz	r0, d254 <hid_mouse_ctrl+0xc4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d1fc:	062b      	lsls	r3, r5, #24
    d1fe:	d52c      	bpl.n	d25a <hid_mouse_ctrl+0xca>
			usb_d_ep_enable(func_data->func_ep_in);
    d200:	4b1b      	ldr	r3, [pc, #108]	; (d270 <hid_mouse_ctrl+0xe0>)
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    d202:	7275      	strb	r5, [r6, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    d204:	4628      	mov	r0, r5
    d206:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    d208:	f240 1301 	movw	r3, #257	; 0x101
    d20c:	817b      	strh	r3, [r7, #10]
	return ERR_NONE;
    d20e:	e7cc      	b.n	d1aa <hid_mouse_ctrl+0x1a>
		return hid_mouse_disable(drv, (struct usbd_descriptors *)param);
    d210:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    d212:	b11a      	cbz	r2, d21c <hid_mouse_ctrl+0x8c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d214:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    d216:	795b      	ldrb	r3, [r3, #5]
    d218:	2b03      	cmp	r3, #3
    d21a:	d1c4      	bne.n	d1a6 <hid_mouse_ctrl+0x16>
	if (func_data->func_iface != 0xFF) {
    d21c:	7a2b      	ldrb	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    d21e:	7a68      	ldrb	r0, [r5, #9]
	if (func_data->func_iface != 0xFF) {
    d220:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    d222:	bf1c      	itt	ne
    d224:	23ff      	movne	r3, #255	; 0xff
    d226:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    d228:	28ff      	cmp	r0, #255	; 0xff
    d22a:	d003      	beq.n	d234 <hid_mouse_ctrl+0xa4>
		usb_d_ep_deinit(func_data->func_ep_in);
    d22c:	4b11      	ldr	r3, [pc, #68]	; (d274 <hid_mouse_ctrl+0xe4>)
    d22e:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    d230:	23ff      	movs	r3, #255	; 0xff
    d232:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    d234:	4b0a      	ldr	r3, [pc, #40]	; (d260 <hid_mouse_ctrl+0xd0>)
    d236:	2400      	movs	r4, #0
    d238:	72dc      	strb	r4, [r3, #11]
	return ERR_NONE;
    d23a:	e7b6      	b.n	d1aa <hid_mouse_ctrl+0x1a>
		return ERR_UNSUPPORTED_OP;
    d23c:	f06f 041a 	mvn.w	r4, #26
    d240:	e7b3      	b.n	d1aa <hid_mouse_ctrl+0x1a>
	switch (ctrl) {
    d242:	f06f 040c 	mvn.w	r4, #12
    d246:	e7b0      	b.n	d1aa <hid_mouse_ctrl+0x1a>
			return ERR_ALREADY_INITIALIZED;
    d248:	f06f 0411 	mvn.w	r4, #17
    d24c:	e7ad      	b.n	d1aa <hid_mouse_ctrl+0x1a>
			return ERR_NO_RESOURCE;
    d24e:	f06f 041b 	mvn.w	r4, #27
    d252:	e7aa      	b.n	d1aa <hid_mouse_ctrl+0x1a>
			return ERR_NOT_INITIALIZED;
    d254:	f06f 0413 	mvn.w	r4, #19
    d258:	e7a7      	b.n	d1aa <hid_mouse_ctrl+0x1a>
			return ERR_INVALID_DATA;
    d25a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d25e:	e7a4      	b.n	d1aa <hid_mouse_ctrl+0x1a>
    d260:	20000c5c 	.word	0x20000c5c
    d264:	0000b585 	.word	0x0000b585
    d268:	0000b59f 	.word	0x0000b59f
    d26c:	0000e7e9 	.word	0x0000e7e9
    d270:	0000e879 	.word	0x0000e879
    d274:	0000e84d 	.word	0x0000e84d

0000d278 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    d278:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    d27a:	4b0a      	ldr	r3, [pc, #40]	; (d2a4 <hiddf_mouse_init+0x2c>)
    d27c:	4798      	blx	r3
    d27e:	2801      	cmp	r0, #1
    d280:	d80c      	bhi.n	d29c <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    d282:	4809      	ldr	r0, [pc, #36]	; (d2a8 <hiddf_mouse_init+0x30>)
    d284:	4b09      	ldr	r3, [pc, #36]	; (d2ac <hiddf_mouse_init+0x34>)
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    d286:	e9c0 3004 	strd	r3, r0, [r0, #16]

	usbdc_register_function(&_hiddf_mouse);
    d28a:	4b09      	ldr	r3, [pc, #36]	; (d2b0 <hiddf_mouse_init+0x38>)
    d28c:	300c      	adds	r0, #12
    d28e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    d290:	2001      	movs	r0, #1
    d292:	4908      	ldr	r1, [pc, #32]	; (d2b4 <hiddf_mouse_init+0x3c>)
    d294:	4b08      	ldr	r3, [pc, #32]	; (d2b8 <hiddf_mouse_init+0x40>)
    d296:	4798      	blx	r3
	return ERR_NONE;
    d298:	2000      	movs	r0, #0
}
    d29a:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    d29c:	f06f 0010 	mvn.w	r0, #16
    d2a0:	e7fb      	b.n	d29a <hiddf_mouse_init+0x22>
    d2a2:	bf00      	nop
    d2a4:	00011f51 	.word	0x00011f51
    d2a8:	20000c5c 	.word	0x20000c5c
    d2ac:	0000d191 	.word	0x0000d191
    d2b0:	00011ef9 	.word	0x00011ef9
    d2b4:	200004f8 	.word	0x200004f8
    d2b8:	00011e71 	.word	0x00011e71

0000d2bc <hiddf_mouse_move>:
 * \param pos     Signed value to move
 * \param type    HID mouse class pointer move type
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{
    d2bc:	b410      	push	{r4}

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    d2be:	4c0e      	ldr	r4, [pc, #56]	; (d2f8 <hiddf_mouse_move+0x3c>)
    d2c0:	2300      	movs	r3, #0

	if (type == HID_MOUSE_X_AXIS_MV) {
    d2c2:	2901      	cmp	r1, #1
	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    d2c4:	6063      	str	r3, [r4, #4]
	if (type == HID_MOUSE_X_AXIS_MV) {
    d2c6:	d109      	bne.n	d2dc <hiddf_mouse_move+0x20>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    d2c8:	7160      	strb	r0, [r4, #5]
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    d2ca:	7a60      	ldrb	r0, [r4, #9]
    d2cc:	4c0b      	ldr	r4, [pc, #44]	; (d2fc <hiddf_mouse_move+0x40>)
    d2ce:	490c      	ldr	r1, [pc, #48]	; (d300 <hiddf_mouse_move+0x44>)
    d2d0:	46a4      	mov	ip, r4
    d2d2:	2300      	movs	r3, #0
}
    d2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    d2d8:	2204      	movs	r2, #4
    d2da:	4760      	bx	ip
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    d2dc:	2902      	cmp	r1, #2
    d2de:	d101      	bne.n	d2e4 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    d2e0:	71a0      	strb	r0, [r4, #6]
    d2e2:	e7f2      	b.n	d2ca <hiddf_mouse_move+0xe>
	} else if (type == HID_MOUSE_SCROLL_MV) {
    d2e4:	2903      	cmp	r1, #3
    d2e6:	d101      	bne.n	d2ec <hiddf_mouse_move+0x30>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    d2e8:	71e0      	strb	r0, [r4, #7]
    d2ea:	e7ee      	b.n	d2ca <hiddf_mouse_move+0xe>
}
    d2ec:	f06f 000c 	mvn.w	r0, #12
    d2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
    d2f4:	4770      	bx	lr
    d2f6:	bf00      	nop
    d2f8:	20000c5c 	.word	0x20000c5c
    d2fc:	00011b19 	.word	0x00011b19
    d300:	20000c60 	.word	0x20000c60

0000d304 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    d304:	b900      	cbnz	r0, d308 <assert+0x4>
		__asm("BKPT #0");
    d306:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    d308:	4770      	bx	lr
	...

0000d30c <_dmac_handler>:
	tmp = ((Dmac *)hw)->INTPEND.reg;
    d30c:	4b10      	ldr	r3, [pc, #64]	; (d350 <_dmac_handler+0x44>)
    d30e:	8c1a      	ldrh	r2, [r3, #32]
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    d310:	b430      	push	{r4, r5}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    d312:	8c1d      	ldrh	r5, [r3, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
	struct _dma_resource *tmp_resource = &_resources[channel];
    d314:	4c0f      	ldr	r4, [pc, #60]	; (d354 <_dmac_handler+0x48>)
	tmp &= mask;
    d316:	f002 021f 	and.w	r2, r2, #31
    d31a:	210c      	movs	r1, #12
    d31c:	4351      	muls	r1, r2

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    d31e:	05ed      	lsls	r5, r5, #23
	struct _dma_resource *tmp_resource = &_resources[channel];
    d320:	eb04 0001 	add.w	r0, r4, r1
	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    d324:	d507      	bpl.n	d336 <_dmac_handler+0x2a>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    d326:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    d32a:	2201      	movs	r2, #1
    d32c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
    d330:	6843      	ldr	r3, [r0, #4]
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	}
}
    d332:	bc30      	pop	{r4, r5}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    d334:	4718      	bx	r3
	tmp = ((Dmac *)hw)->INTPEND.reg;
    d336:	8c1d      	ldrh	r5, [r3, #32]
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    d338:	05ad      	lsls	r5, r5, #22
    d33a:	d506      	bpl.n	d34a <_dmac_handler+0x3e>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    d33c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    d340:	2202      	movs	r2, #2
    d342:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    d346:	5863      	ldr	r3, [r4, r1]
    d348:	e7f3      	b.n	d332 <_dmac_handler+0x26>
}
    d34a:	bc30      	pop	{r4, r5}
    d34c:	4770      	bx	lr
    d34e:	bf00      	nop
    d350:	4100a000 	.word	0x4100a000
    d354:	20000c74 	.word	0x20000c74

0000d358 <_dma_init>:
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    d358:	4b3d      	ldr	r3, [pc, #244]	; (d450 <_dma_init+0xf8>)
    d35a:	881a      	ldrh	r2, [r3, #0]
    d35c:	f022 0202 	bic.w	r2, r2, #2
    d360:	0412      	lsls	r2, r2, #16
    d362:	0c12      	lsrs	r2, r2, #16
{
    d364:	b570      	push	{r4, r5, r6, lr}
    d366:	801a      	strh	r2, [r3, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    d368:	885a      	ldrh	r2, [r3, #2]
    d36a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
    d36e:	0412      	lsls	r2, r2, #16
    d370:	0c12      	lsrs	r2, r2, #16
    d372:	805a      	strh	r2, [r3, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    d374:	881a      	ldrh	r2, [r3, #0]
    d376:	b292      	uxth	r2, r2
    d378:	f042 0201 	orr.w	r2, r2, #1
    d37c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    d37e:	881a      	ldrh	r2, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    d380:	f012 0201 	ands.w	r2, r2, #1
    d384:	d1fb      	bne.n	d37e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    d386:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    d38a:	8019      	strh	r1, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    d38c:	7b59      	ldrb	r1, [r3, #13]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    d38e:	4831      	ldr	r0, [pc, #196]	; (d454 <_dma_init+0xfc>)
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    d390:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    d394:	f041 0101 	orr.w	r1, r1, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    d398:	7359      	strb	r1, [r3, #13]
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    d39a:	492f      	ldr	r1, [pc, #188]	; (d458 <_dma_init+0x100>)
	((Dmac *)hw)->PRICTRL0.reg = data;
    d39c:	615a      	str	r2, [r3, #20]
	((Dmac *)hw)->BASEADDR.reg = data;
    d39e:	6358      	str	r0, [r3, #52]	; 0x34
	((Dmac *)hw)->WRBADDR.reg = data;
    d3a0:	6399      	str	r1, [r3, #56]	; 0x38
    d3a2:	4613      	mov	r3, r2
    d3a4:	492d      	ldr	r1, [pc, #180]	; (d45c <_dma_init+0x104>)
    d3a6:	4602      	mov	r2, r0
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    d3a8:	461d      	mov	r5, r3
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    d3aa:	011c      	lsls	r4, r3, #4
    d3ac:	f104 4082 	add.w	r0, r4, #1090519040	; 0x41000000
    d3b0:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    d3b4:	680e      	ldr	r6, [r1, #0]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    d3b6:	6406      	str	r6, [r0, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    d3b8:	790e      	ldrb	r6, [r1, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    d3ba:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    d3be:	794e      	ldrb	r6, [r1, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    d3c0:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    d3c4:	3301      	adds	r3, #1
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    d3c6:	1910      	adds	r0, r2, r4
    d3c8:	88ce      	ldrh	r6, [r1, #6]
    d3ca:	5316      	strh	r6, [r2, r4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    d3cc:	2b20      	cmp	r3, #32
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    d3ce:	60c5      	str	r5, [r0, #12]
    d3d0:	f101 0108 	add.w	r1, r1, #8
    d3d4:	d1e9      	bne.n	d3aa <_dma_init+0x52>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d3d6:	4b22      	ldr	r3, [pc, #136]	; (d460 <_dma_init+0x108>)
    d3d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d3dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    d3e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d3e4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d3e8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d3ec:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d3ee:	2201      	movs	r2, #1
    d3f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    d3f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d3f8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d3fc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d400:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d402:	2202      	movs	r2, #2
    d404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    d408:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d40c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d410:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d414:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d416:	2204      	movs	r2, #4
    d418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    d41c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d420:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d424:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d428:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d42a:	2208      	movs	r2, #8
    d42c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    d430:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d434:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d438:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d43c:	605a      	str	r2, [r3, #4]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    d43e:	4a04      	ldr	r2, [pc, #16]	; (d450 <_dma_init+0xf8>)
    d440:	8813      	ldrh	r3, [r2, #0]
    d442:	b29b      	uxth	r3, r3
    d444:	f043 0302 	orr.w	r3, r3, #2
    d448:	8013      	strh	r3, [r2, #0]
}
    d44a:	2000      	movs	r0, #0
    d44c:	bd70      	pop	{r4, r5, r6, pc}
    d44e:	bf00      	nop
    d450:	4100a000 	.word	0x4100a000
    d454:	200146d0 	.word	0x200146d0
    d458:	200148d0 	.word	0x200148d0
    d45c:	00015aa4 	.word	0x00015aa4
    d460:	e000e100 	.word	0xe000e100

0000d464 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    d464:	b939      	cbnz	r1, d476 <_dma_set_irq_state+0x12>
	if (value == 0x0) {
    d466:	4b08      	ldr	r3, [pc, #32]	; (d488 <_dma_set_irq_state+0x24>)
    d468:	0100      	lsls	r0, r0, #4
    d46a:	2102      	movs	r1, #2
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    d46c:	4418      	add	r0, r3
	if (value == 0x0) {
    d46e:	b93a      	cbnz	r2, d480 <_dma_set_irq_state+0x1c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    d470:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    d474:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    d476:	2901      	cmp	r1, #1
    d478:	d104      	bne.n	d484 <_dma_set_irq_state+0x20>
	if (value == 0x0) {
    d47a:	4b03      	ldr	r3, [pc, #12]	; (d488 <_dma_set_irq_state+0x24>)
    d47c:	0100      	lsls	r0, r0, #4
    d47e:	e7f5      	b.n	d46c <_dma_set_irq_state+0x8>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    d480:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
}
    d484:	4770      	bx	lr
    d486:	bf00      	nop
    d488:	4100a000 	.word	0x4100a000

0000d48c <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    d48c:	4b02      	ldr	r3, [pc, #8]	; (d498 <_dma_set_destination_address+0xc>)
    d48e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d492:	6081      	str	r1, [r0, #8]
}
    d494:	2000      	movs	r0, #0
    d496:	4770      	bx	lr
    d498:	200146d0 	.word	0x200146d0

0000d49c <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    d49c:	4b02      	ldr	r3, [pc, #8]	; (d4a8 <_dma_set_source_address+0xc>)
    d49e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d4a2:	6041      	str	r1, [r0, #4]
}
    d4a4:	2000      	movs	r0, #0
    d4a6:	4770      	bx	lr
    d4a8:	200146d0 	.word	0x200146d0

0000d4ac <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    d4ac:	4a05      	ldr	r2, [pc, #20]	; (d4c4 <_dma_srcinc_enable+0x18>)
    d4ae:	0100      	lsls	r0, r0, #4
    d4b0:	5a13      	ldrh	r3, [r2, r0]
    d4b2:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    d4b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    d4b8:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    d4bc:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    d4be:	5211      	strh	r1, [r2, r0]
}
    d4c0:	2000      	movs	r0, #0
    d4c2:	4770      	bx	lr
    d4c4:	200146d0 	.word	0x200146d0

0000d4c8 <_dma_set_data_amount>:
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    d4c8:	4b0f      	ldr	r3, [pc, #60]	; (d508 <_dma_set_data_amount+0x40>)
{
    d4ca:	b570      	push	{r4, r5, r6, lr}
    d4cc:	0104      	lsls	r4, r0, #4
    d4ce:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d4d2:	6886      	ldr	r6, [r0, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    d4d4:	5b1a      	ldrh	r2, [r3, r4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    d4d6:	5b1d      	ldrh	r5, [r3, r4]
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    d4d8:	f3c2 2201 	ubfx	r2, r2, #8, #2
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    d4dc:	052d      	lsls	r5, r5, #20
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    d4de:	bf42      	ittt	mi
    d4e0:	fa01 f502 	lslmi.w	r5, r1, r2
    d4e4:	19ad      	addmi	r5, r5, r6
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    d4e6:	6085      	strmi	r5, [r0, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    d4e8:	1918      	adds	r0, r3, r4
    d4ea:	6845      	ldr	r5, [r0, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    d4ec:	5b1e      	ldrh	r6, [r3, r4]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    d4ee:	0576      	lsls	r6, r6, #21
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    d4f0:	bf48      	it	mi
    d4f2:	fa01 f202 	lslmi.w	r2, r1, r2
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    d4f6:	4423      	add	r3, r4
    d4f8:	bf48      	it	mi
    d4fa:	1952      	addmi	r2, r2, r5
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    d4fc:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    d4fe:	bf48      	it	mi
    d500:	6042      	strmi	r2, [r0, #4]
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    d502:	8059      	strh	r1, [r3, #2]
}
    d504:	2000      	movs	r0, #0
    d506:	bd70      	pop	{r4, r5, r6, pc}
    d508:	200146d0 	.word	0x200146d0

0000d50c <_dma_enable_transaction>:
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    d50c:	0102      	lsls	r2, r0, #4
{
    d50e:	b510      	push	{r4, lr}
    d510:	4c0b      	ldr	r4, [pc, #44]	; (d540 <_dma_enable_transaction+0x34>)
    d512:	5aa3      	ldrh	r3, [r4, r2]
    d514:	b29b      	uxth	r3, r3
    d516:	f043 0301 	orr.w	r3, r3, #1
    d51a:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d51c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    d520:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    d524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    d526:	f042 0202 	orr.w	r2, r2, #2
    d52a:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    d52c:	b131      	cbz	r1, d53c <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    d52e:	4a05      	ldr	r2, [pc, #20]	; (d544 <_dma_enable_transaction+0x38>)
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    d530:	2301      	movs	r3, #1
    d532:	6911      	ldr	r1, [r2, #16]
    d534:	fa03 f000 	lsl.w	r0, r3, r0
    d538:	4308      	orrs	r0, r1
    d53a:	6110      	str	r0, [r2, #16]
}
    d53c:	2000      	movs	r0, #0
    d53e:	bd10      	pop	{r4, pc}
    d540:	200146d0 	.word	0x200146d0
    d544:	4100a000 	.word	0x4100a000

0000d548 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    d548:	4b03      	ldr	r3, [pc, #12]	; (d558 <_dma_get_channel_resource+0x10>)
    d54a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d54e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d552:	6001      	str	r1, [r0, #0]
}
    d554:	2000      	movs	r0, #0
    d556:	4770      	bx	lr
    d558:	20000c74 	.word	0x20000c74

0000d55c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
	_dmac_handler();
    d55c:	4b00      	ldr	r3, [pc, #0]	; (d560 <DMAC_0_Handler+0x4>)
    d55e:	4718      	bx	r3
    d560:	0000d30d 	.word	0x0000d30d

0000d564 <DMAC_1_Handler>:
    d564:	4b00      	ldr	r3, [pc, #0]	; (d568 <DMAC_1_Handler+0x4>)
    d566:	4718      	bx	r3
    d568:	0000d30d 	.word	0x0000d30d

0000d56c <DMAC_2_Handler>:
    d56c:	4b00      	ldr	r3, [pc, #0]	; (d570 <DMAC_2_Handler+0x4>)
    d56e:	4718      	bx	r3
    d570:	0000d30d 	.word	0x0000d30d

0000d574 <DMAC_3_Handler>:
    d574:	4b00      	ldr	r3, [pc, #0]	; (d578 <DMAC_3_Handler+0x4>)
    d576:	4718      	bx	r3
    d578:	0000d30d 	.word	0x0000d30d

0000d57c <DMAC_4_Handler>:
    d57c:	4b00      	ldr	r3, [pc, #0]	; (d580 <DMAC_4_Handler+0x4>)
    d57e:	4718      	bx	r3
    d580:	0000d30d 	.word	0x0000d30d

0000d584 <adc_async_window_threshold_reached>:

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    d584:	6983      	ldr	r3, [r0, #24]
    d586:	b103      	cbz	r3, d58a <adc_async_window_threshold_reached+0x6>
		descr->adc_async_cb.monitor(descr, channel);
    d588:	4718      	bx	r3
	}
}
    d58a:	4770      	bx	lr

0000d58c <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    d58c:	69c3      	ldr	r3, [r0, #28]
    d58e:	b103      	cbz	r3, d592 <adc_async_error_occured+0x6>
		descr->adc_async_cb.error(descr, channel);
    d590:	4718      	bx	r3
	}
}
    d592:	4770      	bx	lr

0000d594 <adc_async_channel_conversion_done>:
{
    d594:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t                              index    = descr->channel_map[channel];
    d598:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    d59a:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    d59e:	5c5c      	ldrb	r4, [r3, r1]
	ringbuffer_put(&descr_ch->convert, data);
    d5a0:	f8df a054 	ldr.w	sl, [pc, #84]	; d5f8 <adc_async_channel_conversion_done+0x64>
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    d5a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d5a8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
    d5ac:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
	ringbuffer_put(&descr_ch->convert, data);
    d5b0:	f104 0b04 	add.w	fp, r4, #4
{
    d5b4:	4605      	mov	r5, r0
    d5b6:	460e      	mov	r6, r1
	ringbuffer_put(&descr_ch->convert, data);
    d5b8:	4658      	mov	r0, fp
    d5ba:	b2d1      	uxtb	r1, r2
{
    d5bc:	4617      	mov	r7, r2
	ringbuffer_put(&descr_ch->convert, data);
    d5be:	47d0      	blx	sl
	if (1 < _adc_async_get_data_size(&descr->device)) {
    d5c0:	4b0c      	ldr	r3, [pc, #48]	; (d5f4 <adc_async_channel_conversion_done+0x60>)
    d5c2:	4628      	mov	r0, r5
    d5c4:	4798      	blx	r3
    d5c6:	2801      	cmp	r0, #1
    d5c8:	d905      	bls.n	d5d6 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    d5ca:	0a39      	lsrs	r1, r7, #8
    d5cc:	4658      	mov	r0, fp
    d5ce:	47d0      	blx	sl
		++descr_ch->bytes_in_buffer;
    d5d0:	8aa3      	ldrh	r3, [r4, #20]
    d5d2:	3301      	adds	r3, #1
    d5d4:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
    d5d6:	8aa3      	ldrh	r3, [r4, #20]
    d5d8:	3301      	adds	r3, #1
    d5da:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    d5dc:	f858 3009 	ldr.w	r3, [r8, r9]
    d5e0:	b12b      	cbz	r3, d5ee <adc_async_channel_conversion_done+0x5a>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    d5e2:	4631      	mov	r1, r6
    d5e4:	4628      	mov	r0, r5
}
    d5e6:	b001      	add	sp, #4
    d5e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    d5ec:	4718      	bx	r3
}
    d5ee:	b001      	add	sp, #4
    d5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5f4:	00011899 	.word	0x00011899
    d5f8:	00011501 	.word	0x00011501

0000d5fc <adc_async_init>:
{
    d5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d600:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    d604:	f89d 8020 	ldrb.w	r8, [sp, #32]
    d608:	460e      	mov	r6, r1
    d60a:	4615      	mov	r5, r2
    d60c:	461f      	mov	r7, r3
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    d60e:	4604      	mov	r4, r0
    d610:	b150      	cbz	r0, d628 <adc_async_init+0x2c>
    d612:	2900      	cmp	r1, #0
    d614:	d032      	beq.n	d67c <adc_async_init+0x80>
    d616:	2a00      	cmp	r2, #0
    d618:	d032      	beq.n	d680 <adc_async_init+0x84>
    d61a:	f1b8 0f00 	cmp.w	r8, #0
    d61e:	d031      	beq.n	d684 <adc_async_init+0x88>
    d620:	f1b9 0000 	subs.w	r0, r9, #0
    d624:	bf18      	it	ne
    d626:	2001      	movne	r0, #1
    d628:	4917      	ldr	r1, [pc, #92]	; (d688 <adc_async_init+0x8c>)
    d62a:	f8df a070 	ldr.w	sl, [pc, #112]	; d69c <adc_async_init+0xa0>
    d62e:	223f      	movs	r2, #63	; 0x3f
    d630:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    d632:	1c78      	adds	r0, r7, #1
    d634:	4580      	cmp	r8, r0
    d636:	4914      	ldr	r1, [pc, #80]	; (d688 <adc_async_init+0x8c>)
    d638:	f04f 0240 	mov.w	r2, #64	; 0x40
    d63c:	bfcc      	ite	gt
    d63e:	2000      	movgt	r0, #0
    d640:	2001      	movle	r0, #1
    d642:	47d0      	blx	sl
	device = &descr->device;
    d644:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    d646:	21ff      	movs	r1, #255	; 0xff
    d648:	b2da      	uxtb	r2, r3
    d64a:	3301      	adds	r3, #1
    d64c:	54a9      	strb	r1, [r5, r2]
	for (uint8_t i = 0; i <= channel_max; i++) {
    d64e:	b2da      	uxtb	r2, r3
    d650:	4297      	cmp	r7, r2
    d652:	d2f9      	bcs.n	d648 <adc_async_init+0x4c>
	init_status           = _adc_async_init(device, hw);
    d654:	4b0d      	ldr	r3, [pc, #52]	; (d68c <adc_async_init+0x90>)
	descr->channel_map    = channel_map;
    d656:	6225      	str	r5, [r4, #32]
	descr->channel_max    = channel_max;
    d658:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
	descr->channel_amount = channel_amount;
    d65c:	f884 8025 	strb.w	r8, [r4, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    d660:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    d664:	4631      	mov	r1, r6
    d666:	4620      	mov	r0, r4
    d668:	4798      	blx	r3
	if (init_status) {
    d66a:	b928      	cbnz	r0, d678 <adc_async_init+0x7c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    d66c:	4b08      	ldr	r3, [pc, #32]	; (d690 <adc_async_init+0x94>)
    d66e:	60a3      	str	r3, [r4, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    d670:	4b08      	ldr	r3, [pc, #32]	; (d694 <adc_async_init+0x98>)
    d672:	6023      	str	r3, [r4, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    d674:	4b08      	ldr	r3, [pc, #32]	; (d698 <adc_async_init+0x9c>)
    d676:	6063      	str	r3, [r4, #4]
}
    d678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    d67c:	4608      	mov	r0, r1
    d67e:	e7d3      	b.n	d628 <adc_async_init+0x2c>
    d680:	4610      	mov	r0, r2
    d682:	e7d1      	b.n	d628 <adc_async_init+0x2c>
    d684:	4640      	mov	r0, r8
    d686:	e7cf      	b.n	d628 <adc_async_init+0x2c>
    d688:	00015ba4 	.word	0x00015ba4
    d68c:	000117c1 	.word	0x000117c1
    d690:	0000d595 	.word	0x0000d595
    d694:	0000d585 	.word	0x0000d585
    d698:	0000d58d 	.word	0x0000d58d
    d69c:	0000d305 	.word	0x0000d305

0000d6a0 <adc_async_register_channel_buffer>:
{
    d6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d6a4:	460e      	mov	r6, r1
    d6a6:	4617      	mov	r7, r2
    d6a8:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    d6aa:	4604      	mov	r4, r0
    d6ac:	b118      	cbz	r0, d6b6 <adc_async_register_channel_buffer+0x16>
    d6ae:	b1c2      	cbz	r2, d6e2 <adc_async_register_channel_buffer+0x42>
    d6b0:	1e18      	subs	r0, r3, #0
    d6b2:	bf18      	it	ne
    d6b4:	2001      	movne	r0, #1
    d6b6:	4921      	ldr	r1, [pc, #132]	; (d73c <adc_async_register_channel_buffer+0x9c>)
    d6b8:	4d21      	ldr	r5, [pc, #132]	; (d740 <adc_async_register_channel_buffer+0xa0>)
    d6ba:	2266      	movs	r2, #102	; 0x66
    d6bc:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
    d6be:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d6c2:	491e      	ldr	r1, [pc, #120]	; (d73c <adc_async_register_channel_buffer+0x9c>)
    d6c4:	42b0      	cmp	r0, r6
    d6c6:	f04f 0267 	mov.w	r2, #103	; 0x67
    d6ca:	bf34      	ite	cc
    d6cc:	2000      	movcc	r0, #0
    d6ce:	2001      	movcs	r0, #1
    d6d0:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
    d6d2:	6a23      	ldr	r3, [r4, #32]
    d6d4:	5d9a      	ldrb	r2, [r3, r6]
    d6d6:	2aff      	cmp	r2, #255	; 0xff
    d6d8:	d005      	beq.n	d6e6 <adc_async_register_channel_buffer+0x46>
		return ERR_INVALID_ARG;
    d6da:	f06f 000c 	mvn.w	r0, #12
}
    d6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    d6e2:	4610      	mov	r0, r2
    d6e4:	e7e7      	b.n	d6b6 <adc_async_register_channel_buffer+0x16>
	for (i = 0; i <= descr->channel_max; i++) {
    d6e6:	2200      	movs	r2, #0
    d6e8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
	uint8_t i, index = 0;
    d6ec:	4615      	mov	r5, r2
		if (descr->channel_map[i] != 0xFF) {
    d6ee:	b2d1      	uxtb	r1, r2
    d6f0:	3201      	adds	r2, #1
    d6f2:	5c59      	ldrb	r1, [r3, r1]
    d6f4:	29ff      	cmp	r1, #255	; 0xff
			index++;
    d6f6:	bf18      	it	ne
    d6f8:	3501      	addne	r5, #1
	for (i = 0; i <= descr->channel_max; i++) {
    d6fa:	b2d1      	uxtb	r1, r2
			index++;
    d6fc:	bf18      	it	ne
    d6fe:	b2ed      	uxtbne	r5, r5
	for (i = 0; i <= descr->channel_max; i++) {
    d700:	4288      	cmp	r0, r1
    d702:	d2f4      	bcs.n	d6ee <adc_async_register_channel_buffer+0x4e>
	if (index > descr->channel_amount) {
    d704:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    d708:	42ab      	cmp	r3, r5
    d70a:	d313      	bcc.n	d734 <adc_async_register_channel_buffer+0x94>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    d70c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    d70e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    d712:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    d716:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    d71a:	4642      	mov	r2, r8
    d71c:	4b09      	ldr	r3, [pc, #36]	; (d744 <adc_async_register_channel_buffer+0xa4>)
    d71e:	4639      	mov	r1, r7
    d720:	3004      	adds	r0, #4
    d722:	4798      	blx	r3
    d724:	2800      	cmp	r0, #0
    d726:	d1d8      	bne.n	d6da <adc_async_register_channel_buffer+0x3a>
	descr->channel_map[channel]            = index;
    d728:	6a23      	ldr	r3, [r4, #32]
    d72a:	559d      	strb	r5, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    d72c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d72e:	444b      	add	r3, r9
    d730:	8298      	strh	r0, [r3, #20]
	return ERR_NONE;
    d732:	e7d4      	b.n	d6de <adc_async_register_channel_buffer+0x3e>
		return ERR_NO_RESOURCE;
    d734:	f06f 001b 	mvn.w	r0, #27
    d738:	e7d1      	b.n	d6de <adc_async_register_channel_buffer+0x3e>
    d73a:	bf00      	nop
    d73c:	00015ba4 	.word	0x00015ba4
    d740:	0000d305 	.word	0x0000d305
    d744:	00011485 	.word	0x00011485

0000d748 <adc_async_enable_channel>:
{
    d748:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    d74a:	4604      	mov	r4, r0
    d74c:	3800      	subs	r0, #0
{
    d74e:	460d      	mov	r5, r1
	ASSERT(descr);
    d750:	bf18      	it	ne
    d752:	2001      	movne	r0, #1
    d754:	4e09      	ldr	r6, [pc, #36]	; (d77c <adc_async_enable_channel+0x34>)
    d756:	490a      	ldr	r1, [pc, #40]	; (d780 <adc_async_enable_channel+0x38>)
    d758:	2283      	movs	r2, #131	; 0x83
    d75a:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    d75c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d760:	4907      	ldr	r1, [pc, #28]	; (d780 <adc_async_enable_channel+0x38>)
    d762:	42a8      	cmp	r0, r5
    d764:	bf34      	ite	cc
    d766:	2000      	movcc	r0, #0
    d768:	2001      	movcs	r0, #1
    d76a:	2284      	movs	r2, #132	; 0x84
    d76c:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    d76e:	4620      	mov	r0, r4
    d770:	4b04      	ldr	r3, [pc, #16]	; (d784 <adc_async_enable_channel+0x3c>)
    d772:	4629      	mov	r1, r5
    d774:	4798      	blx	r3
}
    d776:	2000      	movs	r0, #0
    d778:	bd70      	pop	{r4, r5, r6, pc}
    d77a:	bf00      	nop
    d77c:	0000d305 	.word	0x0000d305
    d780:	00015ba4 	.word	0x00015ba4
    d784:	0001188d 	.word	0x0001188d

0000d788 <adc_async_register_callback>:
{
    d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT(descr);
    d78c:	4604      	mov	r4, r0
    d78e:	3800      	subs	r0, #0
    d790:	bf18      	it	ne
    d792:	2001      	movne	r0, #1
    d794:	f8df 8064 	ldr.w	r8, [pc, #100]	; d7fc <adc_async_register_callback+0x74>
{
    d798:	460f      	mov	r7, r1
    d79a:	4615      	mov	r5, r2
	ASSERT(descr);
    d79c:	4915      	ldr	r1, [pc, #84]	; (d7f4 <adc_async_register_callback+0x6c>)
    d79e:	229c      	movs	r2, #156	; 0x9c
{
    d7a0:	461e      	mov	r6, r3
	ASSERT(descr);
    d7a2:	47c0      	blx	r8
	ASSERT(descr->channel_max >= channel);
    d7a4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d7a8:	4912      	ldr	r1, [pc, #72]	; (d7f4 <adc_async_register_callback+0x6c>)
    d7aa:	42b8      	cmp	r0, r7
    d7ac:	bf34      	ite	cc
    d7ae:	2000      	movcc	r0, #0
    d7b0:	2001      	movcs	r0, #1
    d7b2:	229d      	movs	r2, #157	; 0x9d
    d7b4:	47c0      	blx	r8
	switch (type) {
    d7b6:	2d01      	cmp	r5, #1
    d7b8:	d014      	beq.n	d7e4 <adc_async_register_callback+0x5c>
    d7ba:	2d02      	cmp	r5, #2
    d7bc:	d014      	beq.n	d7e8 <adc_async_register_callback+0x60>
    d7be:	b9ad      	cbnz	r5, d7ec <adc_async_register_callback+0x64>
	uint8_t index = descr->channel_map[channel];
    d7c0:	6a23      	ldr	r3, [r4, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    d7c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d7c4:	5ddb      	ldrb	r3, [r3, r7]
    d7c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d7ca:	f842 6033 	str.w	r6, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    d7ce:	1e33      	subs	r3, r6, #0
    d7d0:	4620      	mov	r0, r4
    d7d2:	bf18      	it	ne
    d7d4:	2301      	movne	r3, #1
    d7d6:	4c08      	ldr	r4, [pc, #32]	; (d7f8 <adc_async_register_callback+0x70>)
    d7d8:	462a      	mov	r2, r5
    d7da:	4639      	mov	r1, r7
    d7dc:	47a0      	blx	r4
	return ERR_NONE;
    d7de:	2000      	movs	r0, #0
}
    d7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		descr->adc_async_cb.monitor = cb;
    d7e4:	61a6      	str	r6, [r4, #24]
		break;
    d7e6:	e7f2      	b.n	d7ce <adc_async_register_callback+0x46>
		descr->adc_async_cb.error = cb;
    d7e8:	61e6      	str	r6, [r4, #28]
		break;
    d7ea:	e7f0      	b.n	d7ce <adc_async_register_callback+0x46>
	switch (type) {
    d7ec:	f06f 000c 	mvn.w	r0, #12
    d7f0:	e7f6      	b.n	d7e0 <adc_async_register_callback+0x58>
    d7f2:	bf00      	nop
    d7f4:	00015ba4 	.word	0x00015ba4
    d7f8:	000118c5 	.word	0x000118c5
    d7fc:	0000d305 	.word	0x0000d305

0000d800 <adc_async_read_channel>:
{
    d800:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d804:	460e      	mov	r6, r1
    d806:	4617      	mov	r7, r2
    d808:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    d80a:	4604      	mov	r4, r0
    d80c:	b120      	cbz	r0, d818 <adc_async_read_channel+0x18>
    d80e:	2a00      	cmp	r2, #0
    d810:	d03f      	beq.n	d892 <adc_async_read_channel+0x92>
    d812:	1e18      	subs	r0, r3, #0
    d814:	bf18      	it	ne
    d816:	2001      	movne	r0, #1
    d818:	f8df 8098 	ldr.w	r8, [pc, #152]	; d8b4 <adc_async_read_channel+0xb4>
    d81c:	4920      	ldr	r1, [pc, #128]	; (d8a0 <adc_async_read_channel+0xa0>)
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    d81e:	f8df a098 	ldr.w	sl, [pc, #152]	; d8b8 <adc_async_read_channel+0xb8>
	ASSERT(descr && buffer && length);
    d822:	22bc      	movs	r2, #188	; 0xbc
    d824:	47c0      	blx	r8
	ASSERT(descr->channel_max >= channel);
    d826:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d82a:	491d      	ldr	r1, [pc, #116]	; (d8a0 <adc_async_read_channel+0xa0>)
    d82c:	42b0      	cmp	r0, r6
    d82e:	bf34      	ite	cc
    d830:	2000      	movcc	r0, #0
    d832:	2001      	movcs	r0, #1
    d834:	22bd      	movs	r2, #189	; 0xbd
    d836:	47c0      	blx	r8
	data_size = _adc_async_get_data_size(&descr->device);
    d838:	4b1a      	ldr	r3, [pc, #104]	; (d8a4 <adc_async_read_channel+0xa4>)
    d83a:	4620      	mov	r0, r4
    d83c:	4798      	blx	r3
	ASSERT(!(length % data_size));
    d83e:	fbb5 f3f0 	udiv	r3, r5, r0
    d842:	fb03 5010 	mls	r0, r3, r0, r5
    d846:	fab0 f080 	clz	r0, r0
    d84a:	4915      	ldr	r1, [pc, #84]	; (d8a0 <adc_async_read_channel+0xa0>)
    d84c:	22bf      	movs	r2, #191	; 0xbf
    d84e:	0940      	lsrs	r0, r0, #5
    d850:	47c0      	blx	r8
	index                                         = descr->channel_map[channel];
    d852:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    d854:	5d9e      	ldrb	r6, [r3, r6]
    d856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d858:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    d85c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
	CRITICAL_SECTION_ENTER()
    d860:	a801      	add	r0, sp, #4
    d862:	4b11      	ldr	r3, [pc, #68]	; (d8a8 <adc_async_read_channel+0xa8>)
	num = ringbuffer_num(&descr_ch->convert);
    d864:	f106 0904 	add.w	r9, r6, #4
	CRITICAL_SECTION_ENTER()
    d868:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    d86a:	4b10      	ldr	r3, [pc, #64]	; (d8ac <adc_async_read_channel+0xac>)
    d86c:	4648      	mov	r0, r9
    d86e:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    d870:	4b0f      	ldr	r3, [pc, #60]	; (d8b0 <adc_async_read_channel+0xb0>)
	num = ringbuffer_num(&descr_ch->convert);
    d872:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    d874:	a801      	add	r0, sp, #4
    d876:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    d878:	2400      	movs	r4, #0
    d87a:	45a0      	cmp	r8, r4
    d87c:	b2a2      	uxth	r2, r4
    d87e:	d001      	beq.n	d884 <adc_async_read_channel+0x84>
    d880:	42a5      	cmp	r5, r4
    d882:	d108      	bne.n	d896 <adc_async_read_channel+0x96>
	descr_ch->bytes_in_buffer -= was_read;
    d884:	8ab3      	ldrh	r3, [r6, #20]
}
    d886:	4620      	mov	r0, r4
	descr_ch->bytes_in_buffer -= was_read;
    d888:	1a9b      	subs	r3, r3, r2
    d88a:	82b3      	strh	r3, [r6, #20]
}
    d88c:	b002      	add	sp, #8
    d88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(descr && buffer && length);
    d892:	4610      	mov	r0, r2
    d894:	e7c0      	b.n	d818 <adc_async_read_channel+0x18>
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    d896:	1939      	adds	r1, r7, r4
    d898:	4648      	mov	r0, r9
    d89a:	47d0      	blx	sl
    d89c:	3401      	adds	r4, #1
    d89e:	e7ec      	b.n	d87a <adc_async_read_channel+0x7a>
    d8a0:	00015ba4 	.word	0x00015ba4
    d8a4:	00011899 	.word	0x00011899
    d8a8:	00011569 	.word	0x00011569
    d8ac:	00011545 	.word	0x00011545
    d8b0:	00011577 	.word	0x00011577
    d8b4:	0000d305 	.word	0x0000d305
    d8b8:	000114c1 	.word	0x000114c1

0000d8bc <adc_async_start_conversion>:
{
    d8bc:	b510      	push	{r4, lr}
	ASSERT(descr);
    d8be:	4604      	mov	r4, r0
    d8c0:	3800      	subs	r0, #0
    d8c2:	bf18      	it	ne
    d8c4:	2001      	movne	r0, #1
    d8c6:	4904      	ldr	r1, [pc, #16]	; (d8d8 <adc_async_start_conversion+0x1c>)
    d8c8:	4b04      	ldr	r3, [pc, #16]	; (d8dc <adc_async_start_conversion+0x20>)
    d8ca:	22d6      	movs	r2, #214	; 0xd6
    d8cc:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    d8ce:	4620      	mov	r0, r4
    d8d0:	4b03      	ldr	r3, [pc, #12]	; (d8e0 <adc_async_start_conversion+0x24>)
    d8d2:	4798      	blx	r3
}
    d8d4:	2000      	movs	r0, #0
    d8d6:	bd10      	pop	{r4, pc}
    d8d8:	00015ba4 	.word	0x00015ba4
    d8dc:	0000d305 	.word	0x0000d305
    d8e0:	000118ad 	.word	0x000118ad

0000d8e4 <_oscctrl_init_sources>:
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    d8e4:	4770      	bx	lr
	...

0000d8e8 <_oscctrl_init_referenced_generators>:

static inline void hri_gclk_write_GENCTRL_SRC_bf(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	uint32_t tmp;
	GCLK_CRITICAL_SECTION_ENTER();
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    d8e8:	4b3b      	ldr	r3, [pc, #236]	; (d9d8 <_oscctrl_init_referenced_generators+0xf0>)
    d8ea:	6a1a      	ldr	r2, [r3, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    d8ec:	f022 020f 	bic.w	r2, r2, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    d8f0:	f042 0204 	orr.w	r2, r2, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    d8f4:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    d8f6:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    d8fa:	6859      	ldr	r1, [r3, #4]
    d8fc:	4211      	tst	r1, r2
    d8fe:	d1fc      	bne.n	d8fa <_oscctrl_init_referenced_generators+0x12>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    d900:	685a      	ldr	r2, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    d902:	0750      	lsls	r0, r2, #29
    d904:	f3c2 0180 	ubfx	r1, r2, #2, #1
    d908:	d4fa      	bmi.n	d900 <_oscctrl_init_referenced_generators+0x18>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    d90a:	4b34      	ldr	r3, [pc, #208]	; (d9dc <_oscctrl_init_referenced_generators+0xf4>)
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    d90c:	4a34      	ldr	r2, [pc, #208]	; (d9e0 <_oscctrl_init_referenced_generators+0xf8>)
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    d90e:	7719      	strb	r1, [r3, #28]
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    d910:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d912:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    d916:	f3c2 1100 	ubfx	r1, r2, #4, #1
    d91a:	06d2      	lsls	r2, r2, #27
    d91c:	d4f9      	bmi.n	d912 <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    d91e:	f883 1020 	strb.w	r1, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d922:	4b2e      	ldr	r3, [pc, #184]	; (d9dc <_oscctrl_init_referenced_generators+0xf4>)
    d924:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    d928:	0750      	lsls	r0, r2, #29
    d92a:	d4fb      	bmi.n	d924 <_oscctrl_init_referenced_generators+0x3c>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    d92c:	2202      	movs	r2, #2
    d92e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d930:	4b2a      	ldr	r3, [pc, #168]	; (d9dc <_oscctrl_init_referenced_generators+0xf4>)
    d932:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    d936:	0791      	lsls	r1, r2, #30
    d938:	d4fb      	bmi.n	d932 <_oscctrl_init_referenced_generators+0x4a>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    d93a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    d93c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d93e:	4b27      	ldr	r3, [pc, #156]	; (d9dc <_oscctrl_init_referenced_generators+0xf4>)
    d940:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    d944:	0712      	lsls	r2, r2, #28
    d946:	d4fb      	bmi.n	d940 <_oscctrl_init_referenced_generators+0x58>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    d948:	2288      	movs	r2, #136	; 0x88
    d94a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d94e:	4a23      	ldr	r2, [pc, #140]	; (d9dc <_oscctrl_init_referenced_generators+0xf4>)
    d950:	4613      	mov	r3, r2
    d952:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    d956:	0748      	lsls	r0, r1, #29
    d958:	d4fb      	bmi.n	d952 <_oscctrl_init_referenced_generators+0x6a>
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    d95a:	491f      	ldr	r1, [pc, #124]	; (d9d8 <_oscctrl_init_referenced_generators+0xf0>)
    d95c:	2042      	movs	r0, #66	; 0x42
    d95e:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    d962:	2127      	movs	r1, #39	; 0x27
    d964:	6491      	str	r1, [r2, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    d966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    d968:	f012 0f06 	tst.w	r2, #6
    d96c:	d1fb      	bne.n	d966 <_oscctrl_init_referenced_generators+0x7e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    d96e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d972:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    d974:	2202      	movs	r2, #2
    d976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    d97a:	4b18      	ldr	r3, [pc, #96]	; (d9dc <_oscctrl_init_referenced_generators+0xf4>)
    d97c:	461a      	mov	r2, r3
    d97e:	6d19      	ldr	r1, [r3, #80]	; 0x50
    d980:	0789      	lsls	r1, r1, #30
    d982:	d4fc      	bmi.n	d97e <_oscctrl_init_referenced_generators+0x96>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    d984:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    d988:	07db      	lsls	r3, r3, #31
    d98a:	d521      	bpl.n	d9d0 <_oscctrl_init_referenced_generators+0xe8>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    d98c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    d98e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    d992:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    d996:	d1f9      	bne.n	d98c <_oscctrl_init_referenced_generators+0xa4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    d998:	4b10      	ldr	r3, [pc, #64]	; (d9dc <_oscctrl_init_referenced_generators+0xf4>)
    d99a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    d99c:	07d1      	lsls	r1, r2, #31
    d99e:	d402      	bmi.n	d9a6 <_oscctrl_init_referenced_generators+0xbe>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    d9a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    d9a2:	0792      	lsls	r2, r2, #30
    d9a4:	d5f9      	bpl.n	d99a <_oscctrl_init_referenced_generators+0xb2>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    d9a6:	4a0c      	ldr	r2, [pc, #48]	; (d9d8 <_oscctrl_init_referenced_generators+0xf0>)
    d9a8:	4611      	mov	r1, r2
    d9aa:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d1fc      	bne.n	d9aa <_oscctrl_init_referenced_generators+0xc2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    d9b0:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    d9b2:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    d9b6:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    d9ba:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    d9bc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    d9c0:	684a      	ldr	r2, [r1, #4]
    d9c2:	421a      	tst	r2, r3
    d9c4:	d1fc      	bne.n	d9c0 <_oscctrl_init_referenced_generators+0xd8>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    d9c6:	4a04      	ldr	r2, [pc, #16]	; (d9d8 <_oscctrl_init_referenced_generators+0xf0>)
    d9c8:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    d9ca:	075b      	lsls	r3, r3, #29
    d9cc:	d4fc      	bmi.n	d9c8 <_oscctrl_init_referenced_generators+0xe0>
		;
#endif
	(void)hw;
}
    d9ce:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    d9d0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    d9d2:	05d8      	lsls	r0, r3, #23
    d9d4:	d5fc      	bpl.n	d9d0 <_oscctrl_init_referenced_generators+0xe8>
    d9d6:	e7df      	b.n	d998 <_oscctrl_init_referenced_generators+0xb0>
    d9d8:	40001c00 	.word	0x40001c00
    d9dc:	40001000 	.word	0x40001000
    d9e0:	04010000 	.word	0x04010000

0000d9e4 <_rand_sync_read_data>:

/**
 * \brief Read data bits
 */
static uint32_t _rand_sync_read_data(const struct _rand_sync_dev *dev, const uint8_t n_bits)
{
    d9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t r_bits = (dev->n_bits < 1) ? 32 : dev->n_bits;
    d9e8:	f890 8004 	ldrb.w	r8, [r0, #4]
    d9ec:	f8df 9034 	ldr.w	r9, [pc, #52]	; da24 <_rand_sync_read_data+0x40>
{
    d9f0:	4605      	mov	r5, r0
    d9f2:	460f      	mov	r7, r1
	uint8_t r_bits = (dev->n_bits < 1) ? 32 : dev->n_bits;
    d9f4:	f1b8 0f00 	cmp.w	r8, #0
    d9f8:	d00f      	beq.n	da1a <_rand_sync_read_data+0x36>
	if (r_bits < n_bits) {
    d9fa:	4588      	cmp	r8, r1
    d9fc:	d20d      	bcs.n	da1a <_rand_sync_read_data+0x36>
		uint8_t  i;
		uint32_t d = 0;
    d9fe:	2600      	movs	r6, #0
		/* Join read bits */
		for (i = 0; i < n_bits; i += r_bits) {
    da00:	4634      	mov	r4, r6
			d |= (uint32_t)(_rand_sync_read_one(dev) << i);
    da02:	4628      	mov	r0, r5
    da04:	47c8      	blx	r9
    da06:	40a0      	lsls	r0, r4
		for (i = 0; i < n_bits; i += r_bits) {
    da08:	4444      	add	r4, r8
    da0a:	b2e4      	uxtb	r4, r4
    da0c:	42a7      	cmp	r7, r4
			d |= (uint32_t)(_rand_sync_read_one(dev) << i);
    da0e:	ea46 0600 	orr.w	r6, r6, r0
		for (i = 0; i < n_bits; i += r_bits) {
    da12:	d8f6      	bhi.n	da02 <_rand_sync_read_data+0x1e>
		}
		return d;
	} else {
		return _rand_sync_read_one(dev);
	}
}
    da14:	4630      	mov	r0, r6
    da16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return _rand_sync_read_one(dev);
    da1a:	4628      	mov	r0, r5
    da1c:	464b      	mov	r3, r9
}
    da1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return _rand_sync_read_one(dev);
    da22:	4718      	bx	r3
    da24:	0000db29 	.word	0x0000db29

0000da28 <rand_sync_init>:
{
    da28:	b570      	push	{r4, r5, r6, lr}
	ASSERT(desc);
    da2a:	4604      	mov	r4, r0
    da2c:	3800      	subs	r0, #0
{
    da2e:	460d      	mov	r5, r1
	ASSERT(desc);
    da30:	4b05      	ldr	r3, [pc, #20]	; (da48 <rand_sync_init+0x20>)
    da32:	4906      	ldr	r1, [pc, #24]	; (da4c <rand_sync_init+0x24>)
    da34:	bf18      	it	ne
    da36:	2001      	movne	r0, #1
    da38:	2229      	movs	r2, #41	; 0x29
    da3a:	4798      	blx	r3
	return _rand_sync_init(&desc->dev, hw);
    da3c:	4629      	mov	r1, r5
    da3e:	4620      	mov	r0, r4
    da40:	4b03      	ldr	r3, [pc, #12]	; (da50 <rand_sync_init+0x28>)
}
    da42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _rand_sync_init(&desc->dev, hw);
    da46:	4718      	bx	r3
    da48:	0000d305 	.word	0x0000d305
    da4c:	00015bbf 	.word	0x00015bbf
    da50:	0000daa9 	.word	0x0000daa9

0000da54 <rand_sync_enable>:
{
    da54:	b510      	push	{r4, lr}
	ASSERT(desc);
    da56:	4604      	mov	r4, r0
    da58:	3800      	subs	r0, #0
    da5a:	4b05      	ldr	r3, [pc, #20]	; (da70 <rand_sync_enable+0x1c>)
    da5c:	4905      	ldr	r1, [pc, #20]	; (da74 <rand_sync_enable+0x20>)
    da5e:	bf18      	it	ne
    da60:	2001      	movne	r0, #1
    da62:	2236      	movs	r2, #54	; 0x36
    da64:	4798      	blx	r3
	return _rand_sync_enable(&desc->dev);
    da66:	4620      	mov	r0, r4
    da68:	4b03      	ldr	r3, [pc, #12]	; (da78 <rand_sync_enable+0x24>)
}
    da6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _rand_sync_enable(&desc->dev);
    da6e:	4718      	bx	r3
    da70:	0000d305 	.word	0x0000d305
    da74:	00015bbf 	.word	0x00015bbf
    da78:	0000daf1 	.word	0x0000daf1

0000da7c <rand_sync_read8>:

uint8_t rand_sync_read8(const struct rand_sync_desc *const desc)
{
    da7c:	b510      	push	{r4, lr}
	ASSERT(desc);
    da7e:	4604      	mov	r4, r0
    da80:	3800      	subs	r0, #0
    da82:	bf18      	it	ne
    da84:	2001      	movne	r0, #1
    da86:	225b      	movs	r2, #91	; 0x5b
    da88:	4904      	ldr	r1, [pc, #16]	; (da9c <rand_sync_read8+0x20>)
    da8a:	4b05      	ldr	r3, [pc, #20]	; (daa0 <rand_sync_read8+0x24>)
    da8c:	4798      	blx	r3
	return (uint8_t)_rand_sync_read_data(&desc->dev, 8);
    da8e:	4b05      	ldr	r3, [pc, #20]	; (daa4 <rand_sync_read8+0x28>)
    da90:	2108      	movs	r1, #8
    da92:	4620      	mov	r0, r4
    da94:	4798      	blx	r3
}
    da96:	b2c0      	uxtb	r0, r0
    da98:	bd10      	pop	{r4, pc}
    da9a:	bf00      	nop
    da9c:	00015bbf 	.word	0x00015bbf
    daa0:	0000d305 	.word	0x0000d305
    daa4:	0000d9e5 	.word	0x0000d9e5

0000daa8 <_rand_sync_init>:
	}
	return ERR_NONE;
}

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
    daa8:	b538      	push	{r3, r4, r5, lr}
    daaa:	460c      	mov	r4, r1
	int32_t rc;

	ASSERT(dev && hw);
    daac:	4605      	mov	r5, r0
    daae:	b110      	cbz	r0, dab6 <_rand_sync_init+0xe>
    dab0:	1e08      	subs	r0, r1, #0
    dab2:	bf18      	it	ne
    dab4:	2001      	movne	r0, #1
    dab6:	4b0c      	ldr	r3, [pc, #48]	; (dae8 <_rand_sync_init+0x40>)
    dab8:	490c      	ldr	r1, [pc, #48]	; (daec <_rand_sync_init+0x44>)
    daba:	223d      	movs	r2, #61	; 0x3d
    dabc:	4798      	blx	r3
}

static inline hri_trng_ctrla_reg_t hri_trng_get_CTRLA_reg(const void *const hw, hri_trng_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Trng *)hw)->CTRLA.reg;
    dabe:	7823      	ldrb	r3, [r4, #0]
	if (hri_trng_get_CTRLA_reg(hw, TRNG_CTRLA_ENABLE)) {
    dac0:	f013 0302 	ands.w	r3, r3, #2
    dac4:	d10c      	bne.n	dae0 <_rand_sync_init+0x38>
	((Trng *)hw)->CTRLA.reg &= ~TRNG_CTRLA_RUNSTDBY;
    dac6:	7822      	ldrb	r2, [r4, #0]
    dac8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    dacc:	7022      	strb	r2, [r4, #0]
}

static inline void hri_trng_clear_EVCTRL_DATARDYEO_bit(const void *const hw)
{
	TRNG_CRITICAL_SECTION_ENTER();
	((Trng *)hw)->EVCTRL.reg &= ~TRNG_EVCTRL_DATARDYEO;
    dace:	7922      	ldrb	r2, [r4, #4]
    dad0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    dad4:	7122      	strb	r2, [r4, #4]

	rc = _trng_init(hw);
	if (rc == ERR_NONE) {
		dev->prvt   = hw;
		dev->n_bits = 32;
    dad6:	2220      	movs	r2, #32
		dev->prvt   = hw;
    dad8:	602c      	str	r4, [r5, #0]
		dev->n_bits = 32;
    dada:	712a      	strb	r2, [r5, #4]
	return ERR_NONE;
    dadc:	4618      	mov	r0, r3
	}
	return rc;
}
    dade:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
    dae0:	f06f 0010 	mvn.w	r0, #16
	return rc;
    dae4:	e7fb      	b.n	dade <_rand_sync_init+0x36>
    dae6:	bf00      	nop
    dae8:	0000d305 	.word	0x0000d305
    daec:	00015bda 	.word	0x00015bda

0000daf0 <_rand_sync_enable>:
{
	_rand_sync_disable(dev);
}

int32_t _rand_sync_enable(struct _rand_sync_dev *const dev)
{
    daf0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev);
    daf2:	4604      	mov	r4, r0
    daf4:	3800      	subs	r0, #0
    daf6:	bf18      	it	ne
    daf8:	2001      	movne	r0, #1
    dafa:	4d09      	ldr	r5, [pc, #36]	; (db20 <_rand_sync_enable+0x30>)
    dafc:	4909      	ldr	r1, [pc, #36]	; (db24 <_rand_sync_enable+0x34>)
    dafe:	224e      	movs	r2, #78	; 0x4e
    db00:	47a8      	blx	r5
	ASSERT(dev->prvt);
    db02:	6820      	ldr	r0, [r4, #0]
    db04:	4907      	ldr	r1, [pc, #28]	; (db24 <_rand_sync_enable+0x34>)
    db06:	3800      	subs	r0, #0
    db08:	bf18      	it	ne
    db0a:	2001      	movne	r0, #1
    db0c:	224f      	movs	r2, #79	; 0x4f
    db0e:	47a8      	blx	r5

	hri_trng_set_CTRLA_ENABLE_bit(dev->prvt);
    db10:	6822      	ldr	r2, [r4, #0]
	((Trng *)hw)->CTRLA.reg |= TRNG_CTRLA_ENABLE;
    db12:	7813      	ldrb	r3, [r2, #0]
    db14:	f043 0302 	orr.w	r3, r3, #2
    db18:	7013      	strb	r3, [r2, #0]
	return ERR_NONE;
}
    db1a:	2000      	movs	r0, #0
    db1c:	bd38      	pop	{r3, r4, r5, pc}
    db1e:	bf00      	nop
    db20:	0000d305 	.word	0x0000d305
    db24:	00015bda 	.word	0x00015bda

0000db28 <_rand_sync_read_one>:
	(void)seed;
	return ERR_UNSUPPORTED_OP;
}

uint32_t _rand_sync_read_one(const struct _rand_sync_dev *const dev)
{
    db28:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev);
    db2a:	4604      	mov	r4, r0
    db2c:	3800      	subs	r0, #0
    db2e:	4d0d      	ldr	r5, [pc, #52]	; (db64 <_rand_sync_read_one+0x3c>)
    db30:	490d      	ldr	r1, [pc, #52]	; (db68 <_rand_sync_read_one+0x40>)
    db32:	bf18      	it	ne
    db34:	2001      	movne	r0, #1
    db36:	2266      	movs	r2, #102	; 0x66
    db38:	47a8      	blx	r5
	ASSERT(dev->prvt);
    db3a:	6820      	ldr	r0, [r4, #0]
    db3c:	490a      	ldr	r1, [pc, #40]	; (db68 <_rand_sync_read_one+0x40>)
    db3e:	3800      	subs	r0, #0
    db40:	bf18      	it	ne
    db42:	2001      	movne	r0, #1
    db44:	2267      	movs	r2, #103	; 0x67
    db46:	47a8      	blx	r5
	ASSERT(hri_trng_get_CTRLA_reg(dev->prvt, TRNG_CTRLA_ENABLE));
    db48:	6823      	ldr	r3, [r4, #0]
    db4a:	4907      	ldr	r1, [pc, #28]	; (db68 <_rand_sync_read_one+0x40>)
	tmp = ((Trng *)hw)->CTRLA.reg;
    db4c:	7818      	ldrb	r0, [r3, #0]
    db4e:	2268      	movs	r2, #104	; 0x68
    db50:	f3c0 0040 	ubfx	r0, r0, #1, #1
    db54:	47a8      	blx	r5

	while (!hri_trng_get_INTFLAG_reg(dev->prvt, TRNG_INTFLAG_DATARDY)) {
    db56:	6823      	ldr	r3, [r4, #0]
	tmp = ((Trng *)hw)->INTFLAG.reg;
    db58:	7a9a      	ldrb	r2, [r3, #10]
    db5a:	07d2      	lsls	r2, r2, #31
    db5c:	d5fc      	bpl.n	db58 <_rand_sync_read_one+0x30>
	return ((Trng *)hw)->DATA.reg;
    db5e:	6a18      	ldr	r0, [r3, #32]
		/* Wait until data ready. */
	}
	return hri_trng_read_DATA_reg(dev->prvt);
}
    db60:	bd38      	pop	{r3, r4, r5, pc}
    db62:	bf00      	nop
    db64:	0000d305 	.word	0x0000d305
    db68:	00015bda 	.word	0x00015bda

0000db6c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    db6c:	b430      	push	{r4, r5}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    db6e:	780a      	ldrb	r2, [r1, #0]
    db70:	2a81      	cmp	r2, #129	; 0x81
    db72:	d11c      	bne.n	dbae <hid_keyboard_req+0x42>
    db74:	784b      	ldrb	r3, [r1, #1]
    db76:	2b06      	cmp	r3, #6
    db78:	d131      	bne.n	dbde <hid_keyboard_req+0x72>
    db7a:	4a1a      	ldr	r2, [pc, #104]	; (dbe4 <hid_keyboard_req+0x78>)
    db7c:	888c      	ldrh	r4, [r1, #4]
    db7e:	7b13      	ldrb	r3, [r2, #12]
    db80:	429c      	cmp	r4, r3
    db82:	d12c      	bne.n	dbde <hid_keyboard_req+0x72>
	switch (req->wValue >> 8) {
    db84:	884b      	ldrh	r3, [r1, #2]
    db86:	0a1b      	lsrs	r3, r3, #8
    db88:	2b21      	cmp	r3, #33	; 0x21
    db8a:	d005      	beq.n	db98 <hid_keyboard_req+0x2c>
    db8c:	2b22      	cmp	r3, #34	; 0x22
    db8e:	d00a      	beq.n	dba6 <hid_keyboard_req+0x3a>
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
			switch (req->bRequest) {
    db90:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    db94:	bc30      	pop	{r4, r5}
    db96:	4770      	bx	lr
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    db98:	6811      	ldr	r1, [r2, #0]
    db9a:	780a      	ldrb	r2, [r1, #0]
    db9c:	2300      	movs	r3, #0
				return usbdc_xfer(ep, NULL, 0, 0);
    db9e:	4c12      	ldr	r4, [pc, #72]	; (dbe8 <hid_keyboard_req+0x7c>)
    dba0:	46a4      	mov	ip, r4
}
    dba2:	bc30      	pop	{r4, r5}
				return usbdc_xfer(ep, NULL, 0, 0);
    dba4:	4760      	bx	ip
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    dba6:	4911      	ldr	r1, [pc, #68]	; (dbec <hid_keyboard_req+0x80>)
    dba8:	2300      	movs	r3, #0
    dbaa:	223b      	movs	r2, #59	; 0x3b
    dbac:	e7f7      	b.n	db9e <hid_keyboard_req+0x32>
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    dbae:	f3c2 1241 	ubfx	r2, r2, #5, #2
    dbb2:	2a01      	cmp	r2, #1
    dbb4:	d113      	bne.n	dbde <hid_keyboard_req+0x72>
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    dbb6:	4c0b      	ldr	r4, [pc, #44]	; (dbe4 <hid_keyboard_req+0x78>)
    dbb8:	888d      	ldrh	r5, [r1, #4]
    dbba:	7b23      	ldrb	r3, [r4, #12]
    dbbc:	429d      	cmp	r5, r3
    dbbe:	d10e      	bne.n	dbde <hid_keyboard_req+0x72>
			switch (req->bRequest) {
    dbc0:	784b      	ldrb	r3, [r1, #1]
    dbc2:	2b03      	cmp	r3, #3
    dbc4:	d007      	beq.n	dbd6 <hid_keyboard_req+0x6a>
    dbc6:	2b0b      	cmp	r3, #11
    dbc8:	d1e2      	bne.n	db90 <hid_keyboard_req+0x24>
				_hiddf_keyboard_funcd.protocol = req->wValue;
    dbca:	884b      	ldrh	r3, [r1, #2]
    dbcc:	73e3      	strb	r3, [r4, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    dbce:	2300      	movs	r3, #0
    dbd0:	461a      	mov	r2, r3
    dbd2:	4619      	mov	r1, r3
    dbd4:	e7e3      	b.n	db9e <hid_keyboard_req+0x32>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    dbd6:	2300      	movs	r3, #0
    dbd8:	f104 010f 	add.w	r1, r4, #15
    dbdc:	e7df      	b.n	db9e <hid_keyboard_req+0x32>
			return ERR_NOT_FOUND;
    dbde:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    dbe2:	e7d7      	b.n	db94 <hid_keyboard_req+0x28>
    dbe4:	20000df4 	.word	0x20000df4
    dbe8:	00011b19 	.word	0x00011b19
    dbec:	00015bf1 	.word	0x00015bf1

0000dbf0 <hid_keyboard_ctrl>:
	switch (ctrl) {
    dbf0:	2901      	cmp	r1, #1
{
    dbf2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbf6:	4615      	mov	r5, r2
	switch (ctrl) {
    dbf8:	d04b      	beq.n	dc92 <hid_keyboard_ctrl+0xa2>
    dbfa:	2902      	cmp	r1, #2
    dbfc:	d066      	beq.n	dccc <hid_keyboard_ctrl+0xdc>
    dbfe:	2900      	cmp	r1, #0
    dc00:	d167      	bne.n	dcd2 <hid_keyboard_ctrl+0xe2>
	ifc = desc->sod;
    dc02:	6813      	ldr	r3, [r2, #0]
		return hid_keyboard_enable(drv, (struct usbd_descriptors *)param);
    dc04:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (NULL == ifc) {
    dc08:	b923      	cbnz	r3, dc14 <hid_keyboard_ctrl+0x24>
		return ERR_NOT_FOUND;
    dc0a:	f06f 0409 	mvn.w	r4, #9
}
    dc0e:	4620      	mov	r0, r4
    dc10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    dc14:	7959      	ldrb	r1, [r3, #5]
	ifc_desc.bInterfaceNumber = ifc[2];
    dc16:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    dc18:	2903      	cmp	r1, #3
    dc1a:	d1f6      	bne.n	dc0a <hid_keyboard_ctrl+0x1a>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    dc1c:	f898 100c 	ldrb.w	r1, [r8, #12]
    dc20:	428a      	cmp	r2, r1
    dc22:	d059      	beq.n	dcd8 <hid_keyboard_ctrl+0xe8>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    dc24:	29ff      	cmp	r1, #255	; 0xff
    dc26:	d15a      	bne.n	dcde <hid_keyboard_ctrl+0xee>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    dc28:	f888 200c 	strb.w	r2, [r8, #12]
	return (desc + usb_desc_len(desc));
    dc2c:	7818      	ldrb	r0, [r3, #0]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    dc2e:	6869      	ldr	r1, [r5, #4]
    dc30:	4e2e      	ldr	r6, [pc, #184]	; (dcec <hid_keyboard_ctrl+0xfc>)
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    dc32:	f8df b0c8 	ldr.w	fp, [pc, #200]	; dcfc <hid_keyboard_ctrl+0x10c>
    dc36:	f8df 90c8 	ldr.w	r9, [pc, #200]	; dd00 <hid_keyboard_ctrl+0x110>
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    dc3a:	4418      	add	r0, r3
    dc3c:	2221      	movs	r2, #33	; 0x21
    dc3e:	4b2c      	ldr	r3, [pc, #176]	; (dcf0 <hid_keyboard_ctrl+0x100>)
    dc40:	4798      	blx	r3
    dc42:	2702      	movs	r7, #2
    dc44:	6030      	str	r0, [r6, #0]
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    dc46:	682b      	ldr	r3, [r5, #0]
    dc48:	6869      	ldr	r1, [r5, #4]
    dc4a:	7818      	ldrb	r0, [r3, #0]
    dc4c:	4418      	add	r0, r3
    dc4e:	4b29      	ldr	r3, [pc, #164]	; (dcf4 <hid_keyboard_ctrl+0x104>)
    dc50:	4798      	blx	r3
		desc->sod = ep;
    dc52:	6028      	str	r0, [r5, #0]
		if (NULL != ep) {
    dc54:	2800      	cmp	r0, #0
    dc56:	d0d8      	beq.n	dc0a <hid_keyboard_ctrl+0x1a>
	return (ptr[0] + (ptr[1] << 8));
    dc58:	7941      	ldrb	r1, [r0, #5]
    dc5a:	7902      	ldrb	r2, [r0, #4]
			ep_desc.bEndpointAddress = ep[2];
    dc5c:	f890 a002 	ldrb.w	sl, [r0, #2]
    dc60:	eb02 2201 	add.w	r2, r2, r1, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    dc64:	b292      	uxth	r2, r2
    dc66:	78c1      	ldrb	r1, [r0, #3]
    dc68:	4650      	mov	r0, sl
    dc6a:	47d8      	blx	fp
    dc6c:	4604      	mov	r4, r0
    dc6e:	2800      	cmp	r0, #0
    dc70:	d138      	bne.n	dce4 <hid_keyboard_ctrl+0xf4>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    dc72:	f01a 0f80 	tst.w	sl, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    dc76:	bf14      	ite	ne
    dc78:	f888 a00d 	strbne.w	sl, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    dc7c:	f888 a00e 	strbeq.w	sl, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    dc80:	4650      	mov	r0, sl
    dc82:	47c8      	blx	r9
	for (i = 0; i < 2; i++) {
    dc84:	2f01      	cmp	r7, #1
    dc86:	d102      	bne.n	dc8e <hid_keyboard_ctrl+0x9e>
	_hiddf_keyboard_funcd.protocol = 1;
    dc88:	73f7      	strb	r7, [r6, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    dc8a:	7437      	strb	r7, [r6, #16]
	return ERR_NONE;
    dc8c:	e7bf      	b.n	dc0e <hid_keyboard_ctrl+0x1e>
    dc8e:	2701      	movs	r7, #1
    dc90:	e7d9      	b.n	dc46 <hid_keyboard_ctrl+0x56>
		return hid_keyboard_disable(drv, (struct usbd_descriptors *)param);
    dc92:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    dc94:	b11a      	cbz	r2, dc9e <hid_keyboard_ctrl+0xae>
		ifc_desc.bInterfaceClass = desc->sod[5];
    dc96:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    dc98:	795b      	ldrb	r3, [r3, #5]
    dc9a:	2b03      	cmp	r3, #3
    dc9c:	d1b5      	bne.n	dc0a <hid_keyboard_ctrl+0x1a>
	if (func_data->func_iface != 0xFF) {
    dc9e:	7b23      	ldrb	r3, [r4, #12]
	if (func_data->func_ep_in != 0xFF) {
    dca0:	7b60      	ldrb	r0, [r4, #13]
	if (func_data->func_iface != 0xFF) {
    dca2:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    dca4:	bf1c      	itt	ne
    dca6:	23ff      	movne	r3, #255	; 0xff
    dca8:	7323      	strbne	r3, [r4, #12]
	if (func_data->func_ep_in != 0xFF) {
    dcaa:	28ff      	cmp	r0, #255	; 0xff
    dcac:	d003      	beq.n	dcb6 <hid_keyboard_ctrl+0xc6>
		usb_d_ep_deinit(func_data->func_ep_in);
    dcae:	4b12      	ldr	r3, [pc, #72]	; (dcf8 <hid_keyboard_ctrl+0x108>)
    dcb0:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    dcb2:	23ff      	movs	r3, #255	; 0xff
    dcb4:	7363      	strb	r3, [r4, #13]
	if (func_data->func_ep_out != 0xFF) {
    dcb6:	7ba0      	ldrb	r0, [r4, #14]
    dcb8:	28ff      	cmp	r0, #255	; 0xff
    dcba:	d003      	beq.n	dcc4 <hid_keyboard_ctrl+0xd4>
		usb_d_ep_deinit(func_data->func_ep_out);
    dcbc:	4b0e      	ldr	r3, [pc, #56]	; (dcf8 <hid_keyboard_ctrl+0x108>)
    dcbe:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    dcc0:	23ff      	movs	r3, #255	; 0xff
    dcc2:	73a3      	strb	r3, [r4, #14]
	_hiddf_keyboard_funcd.enabled = false;
    dcc4:	4b09      	ldr	r3, [pc, #36]	; (dcec <hid_keyboard_ctrl+0xfc>)
    dcc6:	2400      	movs	r4, #0
    dcc8:	741c      	strb	r4, [r3, #16]
	return ERR_NONE;
    dcca:	e7a0      	b.n	dc0e <hid_keyboard_ctrl+0x1e>
		return ERR_UNSUPPORTED_OP;
    dccc:	f06f 041a 	mvn.w	r4, #26
    dcd0:	e79d      	b.n	dc0e <hid_keyboard_ctrl+0x1e>
	switch (ctrl) {
    dcd2:	f06f 040c 	mvn.w	r4, #12
    dcd6:	e79a      	b.n	dc0e <hid_keyboard_ctrl+0x1e>
			return ERR_ALREADY_INITIALIZED;
    dcd8:	f06f 0411 	mvn.w	r4, #17
    dcdc:	e797      	b.n	dc0e <hid_keyboard_ctrl+0x1e>
			return ERR_NO_RESOURCE;
    dcde:	f06f 041b 	mvn.w	r4, #27
    dce2:	e794      	b.n	dc0e <hid_keyboard_ctrl+0x1e>
				return ERR_NOT_INITIALIZED;
    dce4:	f06f 0413 	mvn.w	r4, #19
    dce8:	e791      	b.n	dc0e <hid_keyboard_ctrl+0x1e>
    dcea:	bf00      	nop
    dcec:	20000df4 	.word	0x20000df4
    dcf0:	0000b585 	.word	0x0000b585
    dcf4:	0000b59f 	.word	0x0000b59f
    dcf8:	0000e84d 	.word	0x0000e84d
    dcfc:	0000e7e9 	.word	0x0000e7e9
    dd00:	0000e879 	.word	0x0000e879

0000dd04 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    dd04:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    dd06:	4b0a      	ldr	r3, [pc, #40]	; (dd30 <hiddf_keyboard_init+0x2c>)
    dd08:	4798      	blx	r3
    dd0a:	2801      	cmp	r0, #1
    dd0c:	d80c      	bhi.n	dd28 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    dd0e:	4809      	ldr	r0, [pc, #36]	; (dd34 <hiddf_keyboard_init+0x30>)
    dd10:	4b09      	ldr	r3, [pc, #36]	; (dd38 <hiddf_keyboard_init+0x34>)
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    dd12:	e9c0 3006 	strd	r3, r0, [r0, #24]

	usbdc_register_function(&_hiddf_keyboard);
    dd16:	4b09      	ldr	r3, [pc, #36]	; (dd3c <hiddf_keyboard_init+0x38>)
    dd18:	3014      	adds	r0, #20
    dd1a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    dd1c:	2001      	movs	r0, #1
    dd1e:	4908      	ldr	r1, [pc, #32]	; (dd40 <hiddf_keyboard_init+0x3c>)
    dd20:	4b08      	ldr	r3, [pc, #32]	; (dd44 <hiddf_keyboard_init+0x40>)
    dd22:	4798      	blx	r3
	return ERR_NONE;
    dd24:	2000      	movs	r0, #0
}
    dd26:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    dd28:	f06f 0010 	mvn.w	r0, #16
    dd2c:	e7fb      	b.n	dd26 <hiddf_keyboard_init+0x22>
    dd2e:	bf00      	nop
    dd30:	00011f51 	.word	0x00011f51
    dd34:	20000df4 	.word	0x20000df4
    dd38:	0000dbf1 	.word	0x0000dbf1
    dd3c:	00011ef9 	.word	0x00011ef9
    dd40:	20000500 	.word	0x20000500
    dd44:	00011e71 	.word	0x00011e71

0000dd48 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    dd48:	b470      	push	{r4, r5, r6}
	return _hiddf_keyboard_funcd.enabled;
    dd4a:	4c20      	ldr	r4, [pc, #128]	; (ddcc <hiddf_keyboard_keys_state_change+0x84>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    dd4c:	7c23      	ldrb	r3, [r4, #16]
    dd4e:	2b00      	cmp	r3, #0
    dd50:	d037      	beq.n	ddc2 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    dd52:	2300      	movs	r3, #0
    dd54:	e9c4 3301 	strd	r3, r3, [r4, #4]
	modifier_keys = 0;
    dd58:	461a      	mov	r2, r3

	for (i = 0; i < keys_count; i++) {
		if (true == keys_desc[i].b_modifier) {
    dd5a:	1c46      	adds	r6, r0, #1
	for (i = 0; i < keys_count; i++) {
    dd5c:	b2dd      	uxtb	r5, r3
    dd5e:	42a9      	cmp	r1, r5
    dd60:	d814      	bhi.n	dd8c <hiddf_keyboard_keys_state_change+0x44>
			modifier_keys++;
		}
	}

	regular_keys = keys_count - modifier_keys;
    dd62:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    dd64:	b2d2      	uxtb	r2, r2
    dd66:	2a06      	cmp	r2, #6
    dd68:	d818      	bhi.n	dd9c <hiddf_keyboard_keys_state_change+0x54>
    dd6a:	2500      	movs	r5, #0
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
	} else {
		i = 2;
    dd6c:	2302      	movs	r3, #2
		for (j = 0; j < keys_count; j++) {
    dd6e:	b2ea      	uxtb	r2, r5
    dd70:	4291      	cmp	r1, r2
    dd72:	d919      	bls.n	dda8 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    dd74:	7882      	ldrb	r2, [r0, #2]
    dd76:	2a01      	cmp	r2, #1
    dd78:	d105      	bne.n	dd86 <hiddf_keyboard_keys_state_change+0x3e>
				if (true == keys_desc[j].b_modifier) {
    dd7a:	7846      	ldrb	r6, [r0, #1]
    dd7c:	7802      	ldrb	r2, [r0, #0]
    dd7e:	b1de      	cbz	r6, ddb8 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    dd80:	7926      	ldrb	r6, [r4, #4]
    dd82:	4332      	orrs	r2, r6
    dd84:	7122      	strb	r2, [r4, #4]
		for (j = 0; j < keys_count; j++) {
    dd86:	3501      	adds	r5, #1
    dd88:	3003      	adds	r0, #3
    dd8a:	e7f0      	b.n	dd6e <hiddf_keyboard_keys_state_change+0x26>
		if (true == keys_desc[i].b_modifier) {
    dd8c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    dd90:	5d75      	ldrb	r5, [r6, r5]
    dd92:	b10d      	cbz	r5, dd98 <hiddf_keyboard_keys_state_change+0x50>
			modifier_keys++;
    dd94:	3201      	adds	r2, #1
    dd96:	b2d2      	uxtb	r2, r2
	for (i = 0; i < keys_count; i++) {
    dd98:	3301      	adds	r3, #1
    dd9a:	e7df      	b.n	dd5c <hiddf_keyboard_keys_state_change+0x14>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    dd9c:	4a0c      	ldr	r2, [pc, #48]	; (ddd0 <hiddf_keyboard_keys_state_change+0x88>)
    dd9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dda2:	f8c4 3006 	str.w	r3, [r4, #6]
    dda6:	8093      	strh	r3, [r2, #4]
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    dda8:	7b60      	ldrb	r0, [r4, #13]
    ddaa:	4c0a      	ldr	r4, [pc, #40]	; (ddd4 <hiddf_keyboard_keys_state_change+0x8c>)
    ddac:	490a      	ldr	r1, [pc, #40]	; (ddd8 <hiddf_keyboard_keys_state_change+0x90>)
    ddae:	46a4      	mov	ip, r4
    ddb0:	2300      	movs	r3, #0
}
    ddb2:	bc70      	pop	{r4, r5, r6}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    ddb4:	2208      	movs	r2, #8
    ddb6:	4760      	bx	ip
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    ddb8:	1c5e      	adds	r6, r3, #1
    ddba:	4423      	add	r3, r4
    ddbc:	711a      	strb	r2, [r3, #4]
    ddbe:	b2f3      	uxtb	r3, r6
    ddc0:	e7e1      	b.n	dd86 <hiddf_keyboard_keys_state_change+0x3e>
}
    ddc2:	f06f 0010 	mvn.w	r0, #16
    ddc6:	bc70      	pop	{r4, r5, r6}
    ddc8:	4770      	bx	lr
    ddca:	bf00      	nop
    ddcc:	20000df4 	.word	0x20000df4
    ddd0:	20000dfa 	.word	0x20000dfa
    ddd4:	00011b19 	.word	0x00011b19
    ddd8:	20000df8 	.word	0x20000df8

0000dddc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    dddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dde0:	460e      	mov	r6, r1
    dde2:	4615      	mov	r5, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    dde4:	4604      	mov	r4, r0
    dde6:	b118      	cbz	r0, ddf0 <usart_sync_write+0x14>
    dde8:	b329      	cbz	r1, de36 <usart_sync_write+0x5a>
    ddea:	1e10      	subs	r0, r2, #0
    ddec:	bf18      	it	ne
    ddee:	2001      	movne	r0, #1
    ddf0:	4912      	ldr	r1, [pc, #72]	; (de3c <usart_sync_write+0x60>)
    ddf2:	4b13      	ldr	r3, [pc, #76]	; (de40 <usart_sync_write+0x64>)
	while (!_usart_sync_is_ready_to_send(&descr->device))
    ddf4:	4f13      	ldr	r7, [pc, #76]	; (de44 <usart_sync_write+0x68>)
	ASSERT(io_descr && buf && length);
    ddf6:	22f1      	movs	r2, #241	; 0xf1
    ddf8:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    ddfa:	3408      	adds	r4, #8
    ddfc:	46b9      	mov	r9, r7
    ddfe:	4620      	mov	r0, r4
    de00:	47b8      	blx	r7
    de02:	2800      	cmp	r0, #0
    de04:	d0fb      	beq.n	ddfe <usart_sync_write+0x22>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    de06:	f8df 8044 	ldr.w	r8, [pc, #68]	; de4c <usart_sync_write+0x70>
	uint32_t                      offset = 0;
    de0a:	2700      	movs	r7, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
    de0c:	5df1      	ldrb	r1, [r6, r7]
    de0e:	4620      	mov	r0, r4
    de10:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
    de12:	4620      	mov	r0, r4
    de14:	47c8      	blx	r9
    de16:	2800      	cmp	r0, #0
    de18:	d0fb      	beq.n	de12 <usart_sync_write+0x36>
			;
	} while (++offset < length);
    de1a:	3701      	adds	r7, #1
    de1c:	42bd      	cmp	r5, r7
    de1e:	d8f5      	bhi.n	de0c <usart_sync_write+0x30>
    de20:	2d00      	cmp	r5, #0
	while (!_usart_sync_is_transmit_done(&descr->device))
    de22:	4e09      	ldr	r6, [pc, #36]	; (de48 <usart_sync_write+0x6c>)
    de24:	bf08      	it	eq
    de26:	2501      	moveq	r5, #1
    de28:	4620      	mov	r0, r4
    de2a:	47b0      	blx	r6
    de2c:	2800      	cmp	r0, #0
    de2e:	d0fb      	beq.n	de28 <usart_sync_write+0x4c>
		;
	return (int32_t)offset;
}
    de30:	4628      	mov	r0, r5
    de32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    de36:	4608      	mov	r0, r1
    de38:	e7da      	b.n	ddf0 <usart_sync_write+0x14>
    de3a:	bf00      	nop
    de3c:	00015c2c 	.word	0x00015c2c
    de40:	0000d305 	.word	0x0000d305
    de44:	00010ac9 	.word	0x00010ac9
    de48:	00010ad3 	.word	0x00010ad3
    de4c:	00010ab5 	.word	0x00010ab5

0000de50 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    de50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de54:	460e      	mov	r6, r1
    de56:	4615      	mov	r5, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    de58:	4604      	mov	r4, r0
    de5a:	b118      	cbz	r0, de64 <usart_sync_read+0x14>
    de5c:	b1e9      	cbz	r1, de9a <usart_sync_read+0x4a>
    de5e:	1e10      	subs	r0, r2, #0
    de60:	bf18      	it	ne
    de62:	2001      	movne	r0, #1
    de64:	490e      	ldr	r1, [pc, #56]	; (dea0 <usart_sync_read+0x50>)
    de66:	4b0f      	ldr	r3, [pc, #60]	; (dea4 <usart_sync_read+0x54>)
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    de68:	f8df 903c 	ldr.w	r9, [pc, #60]	; dea8 <usart_sync_read+0x58>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    de6c:	f8df 803c 	ldr.w	r8, [pc, #60]	; deac <usart_sync_read+0x5c>
	ASSERT(io_descr && buf && length);
    de70:	f44f 7286 	mov.w	r2, #268	; 0x10c
    de74:	4798      	blx	r3
	uint32_t                      offset = 0;
    de76:	2700      	movs	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
    de78:	3408      	adds	r4, #8
    de7a:	4620      	mov	r0, r4
    de7c:	47c8      	blx	r9
    de7e:	2800      	cmp	r0, #0
    de80:	d0fb      	beq.n	de7a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    de82:	4620      	mov	r0, r4
    de84:	47c0      	blx	r8
    de86:	55f0      	strb	r0, [r6, r7]
	} while (++offset < length);
    de88:	3701      	adds	r7, #1
    de8a:	42bd      	cmp	r5, r7
    de8c:	d8f5      	bhi.n	de7a <usart_sync_read+0x2a>

	return (int32_t)offset;
    de8e:	2d00      	cmp	r5, #0
}
    de90:	bf14      	ite	ne
    de92:	4628      	movne	r0, r5
    de94:	2001      	moveq	r0, #1
    de96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    de9a:	4608      	mov	r0, r1
    de9c:	e7e2      	b.n	de64 <usart_sync_read+0x14>
    de9e:	bf00      	nop
    dea0:	00015c2c 	.word	0x00015c2c
    dea4:	0000d305 	.word	0x0000d305
    dea8:	00010add 	.word	0x00010add
    deac:	00010ac1 	.word	0x00010ac1

0000deb0 <usart_sync_init>:
{
    deb0:	b538      	push	{r3, r4, r5, lr}
    deb2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    deb4:	4604      	mov	r4, r0
    deb6:	b110      	cbz	r0, debe <usart_sync_init+0xe>
    deb8:	1e08      	subs	r0, r1, #0
    deba:	bf18      	it	ne
    debc:	2001      	movne	r0, #1
    debe:	4907      	ldr	r1, [pc, #28]	; (dedc <usart_sync_init+0x2c>)
    dec0:	4b07      	ldr	r3, [pc, #28]	; (dee0 <usart_sync_init+0x30>)
    dec2:	2234      	movs	r2, #52	; 0x34
    dec4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    dec6:	4b07      	ldr	r3, [pc, #28]	; (dee4 <usart_sync_init+0x34>)
    dec8:	4629      	mov	r1, r5
    deca:	f104 0008 	add.w	r0, r4, #8
    dece:	4798      	blx	r3
	if (init_status) {
    ded0:	b918      	cbnz	r0, deda <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    ded2:	4b05      	ldr	r3, [pc, #20]	; (dee8 <usart_sync_init+0x38>)
    ded4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    ded6:	4b05      	ldr	r3, [pc, #20]	; (deec <usart_sync_init+0x3c>)
    ded8:	6023      	str	r3, [r4, #0]
}
    deda:	bd38      	pop	{r3, r4, r5, pc}
    dedc:	00015c2c 	.word	0x00015c2c
    dee0:	0000d305 	.word	0x0000d305
    dee4:	000109d1 	.word	0x000109d1
    dee8:	0000de51 	.word	0x0000de51
    deec:	0000dddd 	.word	0x0000dddd

0000def0 <usart_sync_enable>:
{
    def0:	b510      	push	{r4, lr}
	ASSERT(descr);
    def2:	4604      	mov	r4, r0
    def4:	3800      	subs	r0, #0
    def6:	bf18      	it	ne
    def8:	2001      	movne	r0, #1
    defa:	4905      	ldr	r1, [pc, #20]	; (df10 <usart_sync_enable+0x20>)
    defc:	4b05      	ldr	r3, [pc, #20]	; (df14 <usart_sync_enable+0x24>)
    defe:	2253      	movs	r2, #83	; 0x53
    df00:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    df02:	f104 0008 	add.w	r0, r4, #8
    df06:	4b04      	ldr	r3, [pc, #16]	; (df18 <usart_sync_enable+0x28>)
    df08:	4798      	blx	r3
}
    df0a:	2000      	movs	r0, #0
    df0c:	bd10      	pop	{r4, pc}
    df0e:	bf00      	nop
    df10:	00015c2c 	.word	0x00015c2c
    df14:	0000d305 	.word	0x0000d305
    df18:	00010a75 	.word	0x00010a75

0000df1c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    df1c:	4b01      	ldr	r3, [pc, #4]	; (df24 <_mclk_init+0x8>)
    df1e:	2201      	movs	r2, #1
    df20:	715a      	strb	r2, [r3, #5]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
}
    df22:	4770      	bx	lr
    df24:	40000800 	.word	0x40000800

0000df28 <hri_gclk_wait_for_sync.constprop.0>:
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    df28:	4903      	ldr	r1, [pc, #12]	; (df38 <hri_gclk_wait_for_sync.constprop.0+0x10>)
    df2a:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    df2e:	684a      	ldr	r2, [r1, #4]
    df30:	421a      	tst	r2, r3
    df32:	d1fc      	bne.n	df2e <hri_gclk_wait_for_sync.constprop.0+0x6>
}
    df34:	4770      	bx	lr
    df36:	bf00      	nop
    df38:	40001c00 	.word	0x40001c00

0000df3c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    df3c:	b510      	push	{r4, lr}

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    df3e:	07c4      	lsls	r4, r0, #31
    df40:	d504      	bpl.n	df4c <_gclk_init_generators_by_fref+0x10>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    df42:	4b0e      	ldr	r3, [pc, #56]	; (df7c <_gclk_init_generators_by_fref+0x40>)
    df44:	4a0e      	ldr	r2, [pc, #56]	; (df80 <_gclk_init_generators_by_fref+0x44>)
    df46:	621a      	str	r2, [r3, #32]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    df48:	4b0e      	ldr	r3, [pc, #56]	; (df84 <_gclk_init_generators_by_fref+0x48>)
    df4a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    df4c:	0781      	lsls	r1, r0, #30
    df4e:	d504      	bpl.n	df5a <_gclk_init_generators_by_fref+0x1e>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    df50:	4b0a      	ldr	r3, [pc, #40]	; (df7c <_gclk_init_generators_by_fref+0x40>)
    df52:	4a0d      	ldr	r2, [pc, #52]	; (df88 <_gclk_init_generators_by_fref+0x4c>)
    df54:	625a      	str	r2, [r3, #36]	; 0x24
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    df56:	4b0b      	ldr	r3, [pc, #44]	; (df84 <_gclk_init_generators_by_fref+0x48>)
    df58:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    df5a:	0742      	lsls	r2, r0, #29
    df5c:	d504      	bpl.n	df68 <_gclk_init_generators_by_fref+0x2c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    df5e:	4b07      	ldr	r3, [pc, #28]	; (df7c <_gclk_init_generators_by_fref+0x40>)
    df60:	4a0a      	ldr	r2, [pc, #40]	; (df8c <_gclk_init_generators_by_fref+0x50>)
    df62:	629a      	str	r2, [r3, #40]	; 0x28
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    df64:	4b07      	ldr	r3, [pc, #28]	; (df84 <_gclk_init_generators_by_fref+0x48>)
    df66:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    df68:	0703      	lsls	r3, r0, #28
    df6a:	d506      	bpl.n	df7a <_gclk_init_generators_by_fref+0x3e>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    df6c:	4b03      	ldr	r3, [pc, #12]	; (df7c <_gclk_init_generators_by_fref+0x40>)
    df6e:	4a08      	ldr	r2, [pc, #32]	; (df90 <_gclk_init_generators_by_fref+0x54>)
    df70:	62da      	str	r2, [r3, #44]	; 0x2c
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    df72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    df76:	4b03      	ldr	r3, [pc, #12]	; (df84 <_gclk_init_generators_by_fref+0x48>)
    df78:	4718      	bx	r3
    df7a:	bd10      	pop	{r4, pc}
    df7c:	40001c00 	.word	0x40001c00
    df80:	00010108 	.word	0x00010108
    df84:	0000df29 	.word	0x0000df29
    df88:	00010106 	.word	0x00010106
    df8c:	00100106 	.word	0x00100106
    df90:	00010104 	.word	0x00010104

0000df94 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    df94:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    df96:	4c04      	ldr	r4, [pc, #16]	; (dfa8 <stdio_redirect_init+0x14>)
    df98:	4b04      	ldr	r3, [pc, #16]	; (dfac <stdio_redirect_init+0x18>)
    df9a:	4620      	mov	r0, r4
    df9c:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    df9e:	4620      	mov	r0, r4
    dfa0:	4b03      	ldr	r3, [pc, #12]	; (dfb0 <stdio_redirect_init+0x1c>)
}
    dfa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stdio_io_init(&GRID_AUX.io);
    dfa6:	4718      	bx	r3
    dfa8:	20014bd0 	.word	0x20014bd0
    dfac:	0000def1 	.word	0x0000def1
    dfb0:	0000b3d1 	.word	0x0000b3d1

0000dfb4 <flash_ready>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    dfb4:	6943      	ldr	r3, [r0, #20]
    dfb6:	b103      	cbz	r3, dfba <flash_ready+0x6>
		descr->callbacks.cb_ready(descr);
    dfb8:	4718      	bx	r3
	}
}
    dfba:	4770      	bx	lr

0000dfbc <flash_error>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    dfbc:	6983      	ldr	r3, [r0, #24]
    dfbe:	b103      	cbz	r3, dfc2 <flash_error+0x6>
		descr->callbacks.cb_error(descr);
    dfc0:	4718      	bx	r3
	}
}
    dfc2:	4770      	bx	lr

0000dfc4 <flash_is_address_aligned>:
{
    dfc4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(flash);
    dfc6:	4604      	mov	r4, r0
    dfc8:	3800      	subs	r0, #0
    dfca:	bf18      	it	ne
    dfcc:	2001      	movne	r0, #1
{
    dfce:	460d      	mov	r5, r1
	ASSERT(flash);
    dfd0:	f240 1217 	movw	r2, #279	; 0x117
    dfd4:	4906      	ldr	r1, [pc, #24]	; (dff0 <flash_is_address_aligned+0x2c>)
    dfd6:	4b07      	ldr	r3, [pc, #28]	; (dff4 <flash_is_address_aligned+0x30>)
    dfd8:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    dfda:	4b07      	ldr	r3, [pc, #28]	; (dff8 <flash_is_address_aligned+0x34>)
    dfdc:	4620      	mov	r0, r4
    dfde:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    dfe0:	3801      	subs	r0, #1
    dfe2:	4228      	tst	r0, r5
}
    dfe4:	bf14      	ite	ne
    dfe6:	f06f 000d 	mvnne.w	r0, #13
    dfea:	2000      	moveq	r0, #0
    dfec:	bd38      	pop	{r3, r4, r5, pc}
    dfee:	bf00      	nop
    dff0:	00015c48 	.word	0x00015c48
    dff4:	0000d305 	.word	0x0000d305
    dff8:	0000bc6d 	.word	0x0000bc6d

0000dffc <flash_init>:
{
    dffc:	b538      	push	{r3, r4, r5, lr}
    dffe:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    e000:	4604      	mov	r4, r0
    e002:	b110      	cbz	r0, e00a <flash_init+0xe>
    e004:	1e08      	subs	r0, r1, #0
    e006:	bf18      	it	ne
    e008:	2001      	movne	r0, #1
    e00a:	4907      	ldr	r1, [pc, #28]	; (e028 <flash_init+0x2c>)
    e00c:	4b07      	ldr	r3, [pc, #28]	; (e02c <flash_init+0x30>)
    e00e:	2238      	movs	r2, #56	; 0x38
    e010:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    e012:	4b07      	ldr	r3, [pc, #28]	; (e030 <flash_init+0x34>)
    e014:	4629      	mov	r1, r5
    e016:	4620      	mov	r0, r4
    e018:	4798      	blx	r3
	if (rc) {
    e01a:	b918      	cbnz	r0, e024 <flash_init+0x28>
	flash->dev.flash_cb.ready_cb = flash_ready;
    e01c:	4b05      	ldr	r3, [pc, #20]	; (e034 <flash_init+0x38>)
    e01e:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    e020:	4b05      	ldr	r3, [pc, #20]	; (e038 <flash_init+0x3c>)
    e022:	6063      	str	r3, [r4, #4]
}
    e024:	bd38      	pop	{r3, r4, r5, pc}
    e026:	bf00      	nop
    e028:	00015c48 	.word	0x00015c48
    e02c:	0000d305 	.word	0x0000d305
    e030:	0000bbfd 	.word	0x0000bbfd
    e034:	0000dfb5 	.word	0x0000dfb5
    e038:	0000dfbd 	.word	0x0000dfbd

0000e03c <flash_read>:
{
    e03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e040:	460d      	mov	r5, r1
    e042:	4616      	mov	r6, r2
    e044:	461f      	mov	r7, r3
	ASSERT(flash && buffer && length);
    e046:	4604      	mov	r4, r0
    e048:	b118      	cbz	r0, e052 <flash_read+0x16>
    e04a:	b1ea      	cbz	r2, e088 <flash_read+0x4c>
    e04c:	1e18      	subs	r0, r3, #0
    e04e:	bf18      	it	ne
    e050:	2001      	movne	r0, #1
    e052:	4910      	ldr	r1, [pc, #64]	; (e094 <flash_read+0x58>)
    e054:	4b10      	ldr	r3, [pc, #64]	; (e098 <flash_read+0x5c>)
    e056:	2256      	movs	r2, #86	; 0x56
    e058:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e05a:	4b10      	ldr	r3, [pc, #64]	; (e09c <flash_read+0x60>)
    e05c:	4620      	mov	r0, r4
    e05e:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e060:	4b0f      	ldr	r3, [pc, #60]	; (e0a0 <flash_read+0x64>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e062:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e064:	4620      	mov	r0, r4
    e066:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    e068:	fb00 f008 	mul.w	r0, r0, r8
    e06c:	42a8      	cmp	r0, r5
    e06e:	d30d      	bcc.n	e08c <flash_read+0x50>
    e070:	197b      	adds	r3, r7, r5
    e072:	4298      	cmp	r0, r3
    e074:	d30a      	bcc.n	e08c <flash_read+0x50>
	_flash_read(&flash->dev, src_addr, buffer, length);
    e076:	4620      	mov	r0, r4
    e078:	463b      	mov	r3, r7
    e07a:	4c0a      	ldr	r4, [pc, #40]	; (e0a4 <flash_read+0x68>)
    e07c:	4632      	mov	r2, r6
    e07e:	4629      	mov	r1, r5
    e080:	47a0      	blx	r4
	return ERR_NONE;
    e082:	2000      	movs	r0, #0
}
    e084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(flash && buffer && length);
    e088:	4610      	mov	r0, r2
    e08a:	e7e2      	b.n	e052 <flash_read+0x16>
		return ERR_BAD_ADDRESS;
    e08c:	f06f 000d 	mvn.w	r0, #13
    e090:	e7f8      	b.n	e084 <flash_read+0x48>
    e092:	bf00      	nop
    e094:	00015c48 	.word	0x00015c48
    e098:	0000d305 	.word	0x0000d305
    e09c:	0000bc6d 	.word	0x0000bc6d
    e0a0:	0000bc73 	.word	0x0000bc73
    e0a4:	0000bc7b 	.word	0x0000bc7b

0000e0a8 <flash_write>:
{
    e0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e0ac:	460e      	mov	r6, r1
    e0ae:	4617      	mov	r7, r2
    e0b0:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    e0b2:	4605      	mov	r5, r0
    e0b4:	b118      	cbz	r0, e0be <flash_write+0x16>
    e0b6:	b31a      	cbz	r2, e100 <flash_write+0x58>
    e0b8:	1e18      	subs	r0, r3, #0
    e0ba:	bf18      	it	ne
    e0bc:	2001      	movne	r0, #1
    e0be:	4914      	ldr	r1, [pc, #80]	; (e110 <flash_write+0x68>)
    e0c0:	4b14      	ldr	r3, [pc, #80]	; (e114 <flash_write+0x6c>)
    e0c2:	226a      	movs	r2, #106	; 0x6a
    e0c4:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e0c6:	4b14      	ldr	r3, [pc, #80]	; (e118 <flash_write+0x70>)
    e0c8:	4628      	mov	r0, r5
    e0ca:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e0cc:	4b13      	ldr	r3, [pc, #76]	; (e11c <flash_write+0x74>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e0ce:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e0d0:	4628      	mov	r0, r5
    e0d2:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    e0d4:	4360      	muls	r0, r4
    e0d6:	42b0      	cmp	r0, r6
    e0d8:	d314      	bcc.n	e104 <flash_write+0x5c>
    e0da:	eb08 0306 	add.w	r3, r8, r6
    e0de:	4298      	cmp	r0, r3
    e0e0:	d310      	bcc.n	e104 <flash_write+0x5c>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    e0e2:	4b0f      	ldr	r3, [pc, #60]	; (e120 <flash_write+0x78>)
    e0e4:	4631      	mov	r1, r6
    e0e6:	4628      	mov	r0, r5
    e0e8:	4798      	blx	r3
    e0ea:	4604      	mov	r4, r0
    e0ec:	b968      	cbnz	r0, e10a <flash_write+0x62>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    e0ee:	4628      	mov	r0, r5
    e0f0:	4643      	mov	r3, r8
    e0f2:	4d0c      	ldr	r5, [pc, #48]	; (e124 <flash_write+0x7c>)
    e0f4:	463a      	mov	r2, r7
    e0f6:	4631      	mov	r1, r6
    e0f8:	47a8      	blx	r5
	return ERR_NONE;
    e0fa:	4620      	mov	r0, r4
}
    e0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(flash && buffer && length);
    e100:	4610      	mov	r0, r2
    e102:	e7dc      	b.n	e0be <flash_write+0x16>
		return ERR_BAD_ADDRESS;
    e104:	f06f 000d 	mvn.w	r0, #13
    e108:	e7f8      	b.n	e0fc <flash_write+0x54>
		return ERR_DENIED;
    e10a:	f06f 0010 	mvn.w	r0, #16
    e10e:	e7f5      	b.n	e0fc <flash_write+0x54>
    e110:	00015c48 	.word	0x00015c48
    e114:	0000d305 	.word	0x0000d305
    e118:	0000bc6d 	.word	0x0000bc6d
    e11c:	0000bc73 	.word	0x0000bc73
    e120:	0000be09 	.word	0x0000be09
    e124:	0000bc95 	.word	0x0000bc95

0000e128 <flash_erase>:
{
    e128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e12c:	4688      	mov	r8, r1
    e12e:	4617      	mov	r7, r2
	ASSERT(flash && page_nums);
    e130:	4604      	mov	r4, r0
    e132:	b110      	cbz	r0, e13a <flash_erase+0x12>
    e134:	1e10      	subs	r0, r2, #0
    e136:	bf18      	it	ne
    e138:	2001      	movne	r0, #1
    e13a:	4912      	ldr	r1, [pc, #72]	; (e184 <flash_erase+0x5c>)
    e13c:	4b12      	ldr	r3, [pc, #72]	; (e188 <flash_erase+0x60>)
    e13e:	229a      	movs	r2, #154	; 0x9a
    e140:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e142:	4b12      	ldr	r3, [pc, #72]	; (e18c <flash_erase+0x64>)
    e144:	4620      	mov	r0, r4
    e146:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e148:	4b11      	ldr	r3, [pc, #68]	; (e190 <flash_erase+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e14a:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e14c:	4620      	mov	r0, r4
    e14e:	4798      	blx	r3
	rc = flash_is_address_aligned(flash, dst_addr);
    e150:	4b10      	ldr	r3, [pc, #64]	; (e194 <flash_erase+0x6c>)
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e152:	4681      	mov	r9, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    e154:	4641      	mov	r1, r8
    e156:	4620      	mov	r0, r4
    e158:	4798      	blx	r3
	if (rc) {
    e15a:	4606      	mov	r6, r0
    e15c:	b958      	cbnz	r0, e176 <flash_erase+0x4e>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    e15e:	454f      	cmp	r7, r9
    e160:	d80c      	bhi.n	e17c <flash_erase+0x54>
    e162:	fbb8 f5f5 	udiv	r5, r8, r5
    e166:	443d      	add	r5, r7
    e168:	454d      	cmp	r5, r9
    e16a:	d807      	bhi.n	e17c <flash_erase+0x54>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    e16c:	4b0a      	ldr	r3, [pc, #40]	; (e198 <flash_erase+0x70>)
    e16e:	463a      	mov	r2, r7
    e170:	4641      	mov	r1, r8
    e172:	4620      	mov	r0, r4
    e174:	4798      	blx	r3
}
    e176:	4630      	mov	r0, r6
    e178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
    e17c:	f06f 060c 	mvn.w	r6, #12
    e180:	e7f9      	b.n	e176 <flash_erase+0x4e>
    e182:	bf00      	nop
    e184:	00015c48 	.word	0x00015c48
    e188:	0000d305 	.word	0x0000d305
    e18c:	0000bc6d 	.word	0x0000bc6d
    e190:	0000bc73 	.word	0x0000bc73
    e194:	0000dfc5 	.word	0x0000dfc5
    e198:	0000bd5d 	.word	0x0000bd5d

0000e19c <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ASSERT(io);
    e19e:	4604      	mov	r4, r0
    e1a0:	3800      	subs	r0, #0
    e1a2:	bf18      	it	ne
    e1a4:	2001      	movne	r0, #1
{
    e1a6:	460f      	mov	r7, r1
    e1a8:	4616      	mov	r6, r2
	ASSERT(io);
    e1aa:	4909      	ldr	r1, [pc, #36]	; (e1d0 <_spi_m_async_io_write+0x34>)
    e1ac:	4b09      	ldr	r3, [pc, #36]	; (e1d4 <_spi_m_async_io_write+0x38>)
    e1ae:	f240 1227 	movw	r2, #295	; 0x127
    e1b2:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    e1b4:	2500      	movs	r5, #0
	spi->xfer.txbuf = (uint8_t *)buf;
	spi->xfer.size  = length;
	spi->xfercnt    = 0;

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    e1b6:	2310      	movs	r3, #16
    e1b8:	7223      	strb	r3, [r4, #8]
	spi->xfer.txbuf = (uint8_t *)buf;
    e1ba:	e9c4 7505 	strd	r7, r5, [r4, #20]
	spi->xfercnt    = 0;
    e1be:	e9c4 6507 	strd	r6, r5, [r4, #28]
	_spi_m_async_enable_tx(&spi->dev, true);
    e1c2:	4b05      	ldr	r3, [pc, #20]	; (e1d8 <_spi_m_async_io_write+0x3c>)
    e1c4:	2101      	movs	r1, #1
    e1c6:	f1a4 0020 	sub.w	r0, r4, #32
    e1ca:	4798      	blx	r3

	return ERR_NONE;
}
    e1cc:	4628      	mov	r0, r5
    e1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1d0:	00015c5f 	.word	0x00015c5f
    e1d4:	0000d305 	.word	0x0000d305
    e1d8:	0001107d 	.word	0x0001107d

0000e1dc <_spi_m_async_io_read>:
{
    e1dc:	b570      	push	{r4, r5, r6, lr}
	ASSERT(io);
    e1de:	4604      	mov	r4, r0
    e1e0:	3800      	subs	r0, #0
    e1e2:	bf18      	it	ne
    e1e4:	2001      	movne	r0, #1
{
    e1e6:	460d      	mov	r5, r1
    e1e8:	4616      	mov	r6, r2
	ASSERT(io);
    e1ea:	490c      	ldr	r1, [pc, #48]	; (e21c <_spi_m_async_io_read+0x40>)
    e1ec:	4b0c      	ldr	r3, [pc, #48]	; (e220 <_spi_m_async_io_read+0x44>)
    e1ee:	f240 1205 	movw	r2, #261	; 0x105
    e1f2:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    e1f4:	61a5      	str	r5, [r4, #24]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    e1f6:	2310      	movs	r3, #16
	spi->xfer.txbuf = NULL;
    e1f8:	2500      	movs	r5, #0
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    e1fa:	7223      	strb	r3, [r4, #8]
	spi->xfer.txbuf = NULL;
    e1fc:	6165      	str	r5, [r4, #20]
	spi->xfercnt    = 0;
    e1fe:	e9c4 6507 	strd	r6, r5, [r4, #28]
	_spi_m_async_enable_rx(&spi->dev, true);
    e202:	3c20      	subs	r4, #32
    e204:	4b07      	ldr	r3, [pc, #28]	; (e224 <_spi_m_async_io_read+0x48>)
    e206:	2101      	movs	r1, #1
    e208:	4620      	mov	r0, r4
    e20a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    e20c:	4b06      	ldr	r3, [pc, #24]	; (e228 <_spi_m_async_io_read+0x4c>)
    e20e:	f240 11ff 	movw	r1, #511	; 0x1ff
    e212:	4620      	mov	r0, r4
    e214:	4798      	blx	r3
}
    e216:	4628      	mov	r0, r5
    e218:	bd70      	pop	{r4, r5, r6, pc}
    e21a:	bf00      	nop
    e21c:	00015c5f 	.word	0x00015c5f
    e220:	0000d305 	.word	0x0000d305
    e224:	000110a9 	.word	0x000110a9
    e228:	00011115 	.word	0x00011115

0000e22c <_spi_dev_error>:
{
    e22c:	b570      	push	{r4, r5, r6, lr}
	_spi_m_async_enable_tx(dev, false);
    e22e:	4b0c      	ldr	r3, [pc, #48]	; (e260 <_spi_dev_error+0x34>)
{
    e230:	4604      	mov	r4, r0
    e232:	460d      	mov	r5, r1
	_spi_m_async_enable_tx(dev, false);
    e234:	2100      	movs	r1, #0
    e236:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    e238:	4b0a      	ldr	r3, [pc, #40]	; (e264 <_spi_dev_error+0x38>)
    e23a:	2100      	movs	r1, #0
    e23c:	4620      	mov	r0, r4
    e23e:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    e240:	4b09      	ldr	r3, [pc, #36]	; (e268 <_spi_dev_error+0x3c>)
    e242:	2100      	movs	r1, #0
    e244:	4620      	mov	r0, r4
    e246:	4798      	blx	r3
	spi->stat = 0;
    e248:	2300      	movs	r3, #0
    e24a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    e24e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e250:	b123      	cbz	r3, e25c <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
    e252:	4629      	mov	r1, r5
    e254:	1f20      	subs	r0, r4, #4
}
    e256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		spi->callbacks.cb_error(spi, status);
    e25a:	4718      	bx	r3
}
    e25c:	bd70      	pop	{r4, r5, r6, pc}
    e25e:	bf00      	nop
    e260:	0001107d 	.word	0x0001107d
    e264:	000110a9 	.word	0x000110a9
    e268:	000110e1 	.word	0x000110e1

0000e26c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    e26c:	e9d0 320f 	ldrd	r3, r2, [r0, #60]	; 0x3c
    e270:	429a      	cmp	r2, r3
{
    e272:	b510      	push	{r4, lr}
    e274:	4604      	mov	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
    e276:	d30b      	bcc.n	e290 <_spi_dev_complete+0x24>
		_spi_m_async_enable_tx_complete(dev, false);
    e278:	4b06      	ldr	r3, [pc, #24]	; (e294 <_spi_dev_complete+0x28>)
    e27a:	2100      	movs	r1, #0
    e27c:	4798      	blx	r3
		spi->stat = 0;
    e27e:	2300      	movs	r3, #0
    e280:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    e284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e286:	b11b      	cbz	r3, e290 <_spi_dev_complete+0x24>
			spi->callbacks.cb_xfer(spi);
    e288:	1f20      	subs	r0, r4, #4
}
    e28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			spi->callbacks.cb_xfer(spi);
    e28e:	4718      	bx	r3
}
    e290:	bd10      	pop	{r4, pc}
    e292:	bf00      	nop
    e294:	000110e1 	.word	0x000110e1

0000e298 <_spi_dev_rx>:
{
    e298:	b570      	push	{r4, r5, r6, lr}
	if (spi->xfer.rxbuf) {
    e29a:	6b85      	ldr	r5, [r0, #56]	; 0x38
    e29c:	4b1c      	ldr	r3, [pc, #112]	; (e310 <_spi_dev_rx+0x78>)
{
    e29e:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    e2a0:	b305      	cbz	r5, e2e4 <_spi_dev_rx+0x4c>
		if (!(dev->char_size > 1)) {
    e2a2:	7902      	ldrb	r2, [r0, #4]
    e2a4:	2a01      	cmp	r2, #1
    e2a6:	d816      	bhi.n	e2d6 <_spi_dev_rx+0x3e>
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    e2a8:	4798      	blx	r3
    e2aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e2ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e2ae:	1c59      	adds	r1, r3, #1
    e2b0:	6421      	str	r1, [r4, #64]	; 0x40
    e2b2:	54d0      	strb	r0, [r2, r3]
	if (spi->xfercnt < spi->xfer.size) {
    e2b4:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
    e2b8:	4299      	cmp	r1, r3
    e2ba:	d21a      	bcs.n	e2f2 <_spi_dev_rx+0x5a>
		if (spi->xfer.txbuf) {
    e2bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e2be:	4b15      	ldr	r3, [pc, #84]	; (e314 <_spi_dev_rx+0x7c>)
    e2c0:	b1aa      	cbz	r2, e2ee <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    e2c2:	7920      	ldrb	r0, [r4, #4]
    e2c4:	2801      	cmp	r0, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    e2c6:	bf94      	ite	ls
    e2c8:	5c51      	ldrbls	r1, [r2, r1]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    e2ca:	f832 1011 	ldrhhi.w	r1, [r2, r1, lsl #1]
    e2ce:	4620      	mov	r0, r4
}
    e2d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    e2d4:	4718      	bx	r3
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    e2d6:	6c06      	ldr	r6, [r0, #64]	; 0x40
    e2d8:	1c72      	adds	r2, r6, #1
    e2da:	6402      	str	r2, [r0, #64]	; 0x40
    e2dc:	4798      	blx	r3
    e2de:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    e2e2:	e7e7      	b.n	e2b4 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    e2e4:	4798      	blx	r3
		spi->xfercnt++;
    e2e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e2e8:	3301      	adds	r3, #1
    e2ea:	6423      	str	r3, [r4, #64]	; 0x40
    e2ec:	e7e2      	b.n	e2b4 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    e2ee:	88e1      	ldrh	r1, [r4, #6]
    e2f0:	e7ed      	b.n	e2ce <_spi_dev_rx+0x36>
		_spi_m_async_enable_rx(dev, false);
    e2f2:	4b09      	ldr	r3, [pc, #36]	; (e318 <_spi_dev_rx+0x80>)
    e2f4:	2100      	movs	r1, #0
    e2f6:	4620      	mov	r0, r4
    e2f8:	4798      	blx	r3
		spi->stat = 0;
    e2fa:	2300      	movs	r3, #0
    e2fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    e300:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e302:	b11b      	cbz	r3, e30c <_spi_dev_rx+0x74>
			spi->callbacks.cb_xfer(spi);
    e304:	1f20      	subs	r0, r4, #4
}
    e306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			spi->callbacks.cb_xfer(spi);
    e30a:	4718      	bx	r3
}
    e30c:	bd70      	pop	{r4, r5, r6, pc}
    e30e:	bf00      	nop
    e310:	00011141 	.word	0x00011141
    e314:	00011115 	.word	0x00011115
    e318:	000110a9 	.word	0x000110a9

0000e31c <_spi_dev_tx>:
{
    e31c:	b570      	push	{r4, r5, r6, lr}
    e31e:	6c03      	ldr	r3, [r0, #64]	; 0x40
	if (!(dev->char_size > 1)) {
    e320:	7902      	ldrb	r2, [r0, #4]
    e322:	6b41      	ldr	r1, [r0, #52]	; 0x34
    e324:	1c5d      	adds	r5, r3, #1
    e326:	2a01      	cmp	r2, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    e328:	6405      	str	r5, [r0, #64]	; 0x40
    e32a:	bf94      	ite	ls
    e32c:	5cc9      	ldrbls	r1, [r1, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    e32e:	f831 1013 	ldrhhi.w	r1, [r1, r3, lsl #1]
    e332:	4a09      	ldr	r2, [pc, #36]	; (e358 <_spi_dev_tx+0x3c>)
{
    e334:	4604      	mov	r4, r0
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    e336:	4790      	blx	r2
	if (spi->xfercnt == spi->xfer.size) {
    e338:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
    e33c:	429a      	cmp	r2, r3
    e33e:	d109      	bne.n	e354 <_spi_dev_tx+0x38>
		_spi_m_async_enable_tx(dev, false);
    e340:	4b06      	ldr	r3, [pc, #24]	; (e35c <_spi_dev_tx+0x40>)
    e342:	2100      	movs	r1, #0
    e344:	4620      	mov	r0, r4
    e346:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    e348:	4620      	mov	r0, r4
    e34a:	4b05      	ldr	r3, [pc, #20]	; (e360 <_spi_dev_tx+0x44>)
}
    e34c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_spi_m_async_enable_tx_complete(dev, true);
    e350:	2101      	movs	r1, #1
    e352:	4718      	bx	r3
}
    e354:	bd70      	pop	{r4, r5, r6, pc}
    e356:	bf00      	nop
    e358:	00011115 	.word	0x00011115
    e35c:	0001107d 	.word	0x0001107d
    e360:	000110e1 	.word	0x000110e1

0000e364 <spi_m_async_init>:
{
    e364:	b570      	push	{r4, r5, r6, lr}
    e366:	460e      	mov	r6, r1
	ASSERT(spi && hw);
    e368:	4604      	mov	r4, r0
    e36a:	b110      	cbz	r0, e372 <spi_m_async_init+0xe>
    e36c:	1e08      	subs	r0, r1, #0
    e36e:	bf18      	it	ne
    e370:	2001      	movne	r0, #1
	spi->dev.prvt = (void *)hw;
    e372:	4625      	mov	r5, r4
	ASSERT(spi && hw);
    e374:	4911      	ldr	r1, [pc, #68]	; (e3bc <spi_m_async_init+0x58>)
    e376:	4b12      	ldr	r3, [pc, #72]	; (e3c0 <spi_m_async_init+0x5c>)
    e378:	22a5      	movs	r2, #165	; 0xa5
    e37a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    e37c:	f845 6f04 	str.w	r6, [r5, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    e380:	4b10      	ldr	r3, [pc, #64]	; (e3c4 <spi_m_async_init+0x60>)
    e382:	4631      	mov	r1, r6
    e384:	4628      	mov	r0, r5
    e386:	4798      	blx	r3
	if (rc >= 0) {
    e388:	2800      	cmp	r0, #0
    e38a:	db15      	blt.n	e3b8 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    e38c:	4e0e      	ldr	r6, [pc, #56]	; (e3c8 <spi_m_async_init+0x64>)
    e38e:	4a0f      	ldr	r2, [pc, #60]	; (e3cc <spi_m_async_init+0x68>)
    e390:	2100      	movs	r1, #0
    e392:	4628      	mov	r0, r5
    e394:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    e396:	4a0e      	ldr	r2, [pc, #56]	; (e3d0 <spi_m_async_init+0x6c>)
    e398:	2101      	movs	r1, #1
    e39a:	4628      	mov	r0, r5
    e39c:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    e39e:	4a0d      	ldr	r2, [pc, #52]	; (e3d4 <spi_m_async_init+0x70>)
    e3a0:	2102      	movs	r1, #2
    e3a2:	4628      	mov	r0, r5
    e3a4:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    e3a6:	4a0c      	ldr	r2, [pc, #48]	; (e3d8 <spi_m_async_init+0x74>)
    e3a8:	2103      	movs	r1, #3
    e3aa:	4628      	mov	r0, r5
    e3ac:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    e3ae:	4b0b      	ldr	r3, [pc, #44]	; (e3dc <spi_m_async_init+0x78>)
    e3b0:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    e3b2:	4b0b      	ldr	r3, [pc, #44]	; (e3e0 <spi_m_async_init+0x7c>)
    e3b4:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    e3b6:	2000      	movs	r0, #0
}
    e3b8:	bd70      	pop	{r4, r5, r6, pc}
    e3ba:	bf00      	nop
    e3bc:	00015c5f 	.word	0x00015c5f
    e3c0:	0000d305 	.word	0x0000d305
    e3c4:	00010f89 	.word	0x00010f89
    e3c8:	00011169 	.word	0x00011169
    e3cc:	0000e31d 	.word	0x0000e31d
    e3d0:	0000e299 	.word	0x0000e299
    e3d4:	0000e26d 	.word	0x0000e26d
    e3d8:	0000e22d 	.word	0x0000e22d
    e3dc:	0000e1dd 	.word	0x0000e1dd
    e3e0:	0000e19d 	.word	0x0000e19d

0000e3e4 <spi_m_async_enable>:
{
    e3e4:	b510      	push	{r4, lr}
	ASSERT(spi);
    e3e6:	4604      	mov	r4, r0
    e3e8:	3800      	subs	r0, #0
    e3ea:	4b05      	ldr	r3, [pc, #20]	; (e400 <spi_m_async_enable+0x1c>)
    e3ec:	4905      	ldr	r1, [pc, #20]	; (e404 <spi_m_async_enable+0x20>)
    e3ee:	bf18      	it	ne
    e3f0:	2001      	movne	r0, #1
    e3f2:	22c1      	movs	r2, #193	; 0xc1
    e3f4:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    e3f6:	1d20      	adds	r0, r4, #4
    e3f8:	4b03      	ldr	r3, [pc, #12]	; (e408 <spi_m_async_enable+0x24>)
}
    e3fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_spi_m_async_enable(&spi->dev);
    e3fe:	4718      	bx	r3
    e400:	0000d305 	.word	0x0000d305
    e404:	00015c5f 	.word	0x00015c5f
    e408:	00010fe1 	.word	0x00010fe1

0000e40c <spi_m_async_set_baudrate>:
{
    e40c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    e40e:	4604      	mov	r4, r0
    e410:	3800      	subs	r0, #0
    e412:	4b0a      	ldr	r3, [pc, #40]	; (e43c <spi_m_async_set_baudrate+0x30>)
    e414:	bf18      	it	ne
    e416:	2001      	movne	r0, #1
{
    e418:	460d      	mov	r5, r1
	ASSERT(spi);
    e41a:	22cf      	movs	r2, #207	; 0xcf
    e41c:	4908      	ldr	r1, [pc, #32]	; (e440 <spi_m_async_set_baudrate+0x34>)
    e41e:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    e420:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e424:	06db      	lsls	r3, r3, #27
    e426:	d405      	bmi.n	e434 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    e428:	4629      	mov	r1, r5
    e42a:	1d20      	adds	r0, r4, #4
    e42c:	4b05      	ldr	r3, [pc, #20]	; (e444 <spi_m_async_set_baudrate+0x38>)
}
    e42e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    e432:	4718      	bx	r3
}
    e434:	f06f 0003 	mvn.w	r0, #3
    e438:	bd70      	pop	{r4, r5, r6, pc}
    e43a:	bf00      	nop
    e43c:	0000d305 	.word	0x0000d305
    e440:	00015c5f 	.word	0x00015c5f
    e444:	00011045 	.word	0x00011045

0000e448 <spi_m_async_set_mode>:
{
    e448:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    e44a:	4604      	mov	r4, r0
    e44c:	3800      	subs	r0, #0
    e44e:	4b0a      	ldr	r3, [pc, #40]	; (e478 <spi_m_async_set_mode+0x30>)
    e450:	bf18      	it	ne
    e452:	2001      	movne	r0, #1
{
    e454:	460d      	mov	r5, r1
	ASSERT(spi);
    e456:	22d9      	movs	r2, #217	; 0xd9
    e458:	4908      	ldr	r1, [pc, #32]	; (e47c <spi_m_async_set_mode+0x34>)
    e45a:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    e45c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e460:	06db      	lsls	r3, r3, #27
    e462:	d405      	bmi.n	e470 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    e464:	4629      	mov	r1, r5
    e466:	1d20      	adds	r0, r4, #4
    e468:	4b05      	ldr	r3, [pc, #20]	; (e480 <spi_m_async_set_mode+0x38>)
}
    e46a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_async_set_mode(&spi->dev, mode);
    e46e:	4718      	bx	r3
}
    e470:	f06f 0003 	mvn.w	r0, #3
    e474:	bd70      	pop	{r4, r5, r6, pc}
    e476:	bf00      	nop
    e478:	0000d305 	.word	0x0000d305
    e47c:	00015c5f 	.word	0x00015c5f
    e480:	00011011 	.word	0x00011011

0000e484 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ASSERT(spi);
    e486:	4604      	mov	r4, r0
    e488:	3800      	subs	r0, #0
{
    e48a:	461e      	mov	r6, r3
	ASSERT(spi);
    e48c:	bf18      	it	ne
    e48e:	2001      	movne	r0, #1
    e490:	4b11      	ldr	r3, [pc, #68]	; (e4d8 <spi_m_async_transfer+0x54>)
{
    e492:	460d      	mov	r5, r1
    e494:	4617      	mov	r7, r2
	ASSERT(spi);
    e496:	4911      	ldr	r1, [pc, #68]	; (e4dc <spi_m_async_transfer+0x58>)
    e498:	f44f 729c 	mov.w	r2, #312	; 0x138
    e49c:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
	spi->xfer.txbuf = (uint8_t *)txbuf;
	spi->xfer.size  = length;
	spi->xfercnt    = 0;
    e49e:	2300      	movs	r3, #0
	spi->xfer.size  = length;
    e4a0:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    e4a2:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
	_spi_m_async_enable_rx(&spi->dev, true);
    e4a4:	1d26      	adds	r6, r4, #4
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    e4a6:	2310      	movs	r3, #16
    e4a8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    e4ac:	e9c4 570e 	strd	r5, r7, [r4, #56]	; 0x38
	_spi_m_async_enable_rx(&spi->dev, true);
    e4b0:	4b0b      	ldr	r3, [pc, #44]	; (e4e0 <spi_m_async_transfer+0x5c>)
    e4b2:	2101      	movs	r1, #1
    e4b4:	4630      	mov	r0, r6
    e4b6:	4798      	blx	r3
	if (txbuf) {
    e4b8:	4b0a      	ldr	r3, [pc, #40]	; (e4e4 <spi_m_async_transfer+0x60>)
    e4ba:	b155      	cbz	r5, e4d2 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    e4bc:	7a21      	ldrb	r1, [r4, #8]
    e4be:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e4c0:	2901      	cmp	r1, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    e4c2:	bf94      	ite	ls
    e4c4:	5ca9      	ldrbls	r1, [r5, r2]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    e4c6:	f835 1012 	ldrhhi.w	r1, [r5, r2, lsl #1]
		}
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    e4ca:	4630      	mov	r0, r6
    e4cc:	4798      	blx	r3
	}

	return ERR_NONE;
}
    e4ce:	2000      	movs	r0, #0
    e4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    e4d2:	8961      	ldrh	r1, [r4, #10]
    e4d4:	e7f9      	b.n	e4ca <spi_m_async_transfer+0x46>
    e4d6:	bf00      	nop
    e4d8:	0000d305 	.word	0x0000d305
    e4dc:	00015c5f 	.word	0x00015c5f
    e4e0:	000110a9 	.word	0x000110a9
    e4e4:	00011115 	.word	0x00011115

0000e4e8 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    e4e8:	b570      	push	{r4, r5, r6, lr}
    e4ea:	460e      	mov	r6, r1
    e4ec:	4615      	mov	r5, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    e4ee:	4604      	mov	r4, r0
    e4f0:	b118      	cbz	r0, e4fa <spi_m_async_register_callback+0x12>
    e4f2:	2901      	cmp	r1, #1
    e4f4:	bf8c      	ite	hi
    e4f6:	2000      	movhi	r0, #0
    e4f8:	2001      	movls	r0, #1
    e4fa:	4909      	ldr	r1, [pc, #36]	; (e520 <spi_m_async_register_callback+0x38>)
    e4fc:	4b09      	ldr	r3, [pc, #36]	; (e524 <spi_m_async_register_callback+0x3c>)
    e4fe:	f240 1263 	movw	r2, #355	; 0x163
    e502:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    e504:	b90e      	cbnz	r6, e50a <spi_m_async_register_callback+0x22>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    e506:	6325      	str	r5, [r4, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    e508:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    e50a:	1e2a      	subs	r2, r5, #0
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    e50c:	6365      	str	r5, [r4, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    e50e:	f104 0004 	add.w	r0, r4, #4
    e512:	4b05      	ldr	r3, [pc, #20]	; (e528 <spi_m_async_register_callback+0x40>)
}
    e514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    e518:	bf18      	it	ne
    e51a:	2201      	movne	r2, #1
    e51c:	2103      	movs	r1, #3
    e51e:	4718      	bx	r3
    e520:	00015c5f 	.word	0x00015c5f
    e524:	0000d305 	.word	0x0000d305
    e528:	00011199 	.word	0x00011199

0000e52c <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    e52c:	b538      	push	{r3, r4, r5, lr}
    e52e:	460d      	mov	r5, r1
	ASSERT(spi && io);
    e530:	4604      	mov	r4, r0
    e532:	b110      	cbz	r0, e53a <spi_m_async_get_io_descriptor+0xe>
    e534:	1e08      	subs	r0, r1, #0
    e536:	bf18      	it	ne
    e538:	2001      	movne	r0, #1
    e53a:	4904      	ldr	r1, [pc, #16]	; (e54c <spi_m_async_get_io_descriptor+0x20>)
    e53c:	4b04      	ldr	r3, [pc, #16]	; (e550 <spi_m_async_get_io_descriptor+0x24>)
    e53e:	f240 126f 	movw	r2, #367	; 0x16f
	*io = &spi->io;
    e542:	3424      	adds	r4, #36	; 0x24
	ASSERT(spi && io);
    e544:	4798      	blx	r3
	*io = &spi->io;
    e546:	602c      	str	r4, [r5, #0]
	return 0;
}
    e548:	2000      	movs	r0, #0
    e54a:	bd38      	pop	{r3, r4, r5, pc}
    e54c:	00015c5f 	.word	0x00015c5f
    e550:	0000d305 	.word	0x0000d305

0000e554 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    e554:	b570      	push	{r4, r5, r6, lr}
    e556:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    e558:	4604      	mov	r4, r0
    e55a:	b110      	cbz	r0, e562 <crc_sync_init+0xe>
    e55c:	1e08      	subs	r0, r1, #0
    e55e:	bf18      	it	ne
    e560:	2001      	movne	r0, #1
    e562:	4905      	ldr	r1, [pc, #20]	; (e578 <crc_sync_init+0x24>)
    e564:	4b05      	ldr	r3, [pc, #20]	; (e57c <crc_sync_init+0x28>)
    e566:	222b      	movs	r2, #43	; 0x2b
    e568:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    e56a:	4629      	mov	r1, r5
    e56c:	4620      	mov	r0, r4
    e56e:	4b04      	ldr	r3, [pc, #16]	; (e580 <crc_sync_init+0x2c>)
}
    e570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _crc_sync_init(&descr->dev, hw);
    e574:	4718      	bx	r3
    e576:	bf00      	nop
    e578:	00015c7c 	.word	0x00015c7c
    e57c:	0000d305 	.word	0x0000d305
    e580:	00012375 	.word	0x00012375

0000e584 <_usb_d_find_ep>:
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e584:	4a0a      	ldr	r2, [pc, #40]	; (e5b0 <_usb_d_find_ep+0x2c>)
{
    e586:	b570      	push	{r4, r5, r6, lr}
    e588:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e58a:	f000 050f 	and.w	r5, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    e58e:	7854      	ldrb	r4, [r2, #1]
    e590:	4284      	cmp	r4, r0
    e592:	b259      	sxtb	r1, r3
    e594:	d00a      	beq.n	e5ac <_usb_d_find_ep+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    e596:	7816      	ldrb	r6, [r2, #0]
    e598:	b90e      	cbnz	r6, e59e <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e59a:	42ac      	cmp	r4, r5
    e59c:	d006      	beq.n	e5ac <_usb_d_find_ep+0x28>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e59e:	3301      	adds	r3, #1
    e5a0:	2b0d      	cmp	r3, #13
    e5a2:	f102 0220 	add.w	r2, r2, #32
    e5a6:	d1f2      	bne.n	e58e <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
    e5a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    e5ac:	4608      	mov	r0, r1
    e5ae:	bd70      	pop	{r4, r5, r6, pc}
    e5b0:	20000e14 	.word	0x20000e14

0000e5b4 <usb_d_dummy_cb_false>:

	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    e5b4:	2000      	movs	r0, #0
    e5b6:	4770      	bx	lr

0000e5b8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    e5b8:	b513      	push	{r0, r1, r4, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e5ba:	4b0a      	ldr	r3, [pc, #40]	; (e5e4 <usb_d_cb_trans_more+0x2c>)
{
    e5bc:	9101      	str	r1, [sp, #4]
    e5be:	4604      	mov	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e5c0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    e5c2:	4b09      	ldr	r3, [pc, #36]	; (e5e8 <usb_d_cb_trans_more+0x30>)
    e5c4:	9901      	ldr	r1, [sp, #4]
    e5c6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    e5ca:	789a      	ldrb	r2, [r3, #2]
    e5cc:	2a03      	cmp	r2, #3
    e5ce:	d105      	bne.n	e5dc <usb_d_cb_trans_more+0x24>
		return ept->callbacks.more(ep, transfered);
    e5d0:	699b      	ldr	r3, [r3, #24]
    e5d2:	4620      	mov	r0, r4
	}
	return false;
}
    e5d4:	b002      	add	sp, #8
    e5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return ept->callbacks.more(ep, transfered);
    e5da:	4718      	bx	r3
}
    e5dc:	2000      	movs	r0, #0
    e5de:	b002      	add	sp, #8
    e5e0:	bd10      	pop	{r4, pc}
    e5e2:	bf00      	nop
    e5e4:	0000e585 	.word	0x0000e585
    e5e8:	20000e14 	.word	0x20000e14

0000e5ec <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    e5ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e5f0:	4b37      	ldr	r3, [pc, #220]	; (e6d0 <_usb_d_cb_trans_done+0xe4>)
    e5f2:	4c38      	ldr	r4, [pc, #224]	; (e6d4 <_usb_d_cb_trans_done+0xe8>)
{
    e5f4:	b085      	sub	sp, #20
    e5f6:	4680      	mov	r8, r0
    e5f8:	460f      	mov	r7, r1
    e5fa:	4691      	mov	r9, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    e5fc:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    e5fe:	0146      	lsls	r6, r0, #5
    e600:	2f00      	cmp	r7, #0
    e602:	d143      	bne.n	e68c <_usb_d_cb_trans_done+0xa0>
		ept->xfer.hdr.status = USB_XFER_DONE;
    e604:	19a5      	adds	r5, r4, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e606:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    e608:	70ef      	strb	r7, [r5, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e60a:	2900      	cmp	r1, #0
    e60c:	d135      	bne.n	e67a <_usb_d_cb_trans_done+0x8e>
	if (state == USB_EP_S_X_DATA) {
    e60e:	2320      	movs	r3, #32
    e610:	220c      	movs	r2, #12
    e612:	fb13 2000 	smlabb	r0, r3, r0, r2
    e616:	78ab      	ldrb	r3, [r5, #2]
    e618:	2b03      	cmp	r3, #3
    e61a:	eb04 0200 	add.w	r2, r4, r0
    e61e:	69eb      	ldr	r3, [r5, #28]
    e620:	7868      	ldrb	r0, [r5, #1]
    e622:	d126      	bne.n	e672 <_usb_d_cb_trans_done+0x86>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    e624:	2101      	movs	r1, #1
    e626:	f995 400c 	ldrsb.w	r4, [r5, #12]
    e62a:	4798      	blx	r3
		if (err) {
    e62c:	786b      	ldrb	r3, [r5, #1]
    e62e:	b168      	cbz	r0, e64c <_usb_d_cb_trans_done+0x60>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    e630:	2c00      	cmp	r4, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    e632:	f240 2205 	movw	r2, #517	; 0x205
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    e636:	bfb4      	ite	lt
    e638:	4618      	movlt	r0, r3
    e63a:	f043 0080 	orrge.w	r0, r3, #128	; 0x80
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    e63e:	806a      	strh	r2, [r5, #2]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    e640:	4b25      	ldr	r3, [pc, #148]	; (e6d8 <_usb_d_cb_trans_done+0xec>)
    e642:	2101      	movs	r1, #1
    e644:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
    e646:	b005      	add	sp, #20
    e648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct usb_d_transfer trans
    e64c:	2c00      	cmp	r4, #0
    e64e:	bfac      	ite	ge
    e650:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    e654:	f003 030f 	andlt.w	r3, r3, #15
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    e658:	2204      	movs	r2, #4
	struct usb_d_transfer trans
    e65a:	f88d 300c 	strb.w	r3, [sp, #12]
    e65e:	2301      	movs	r3, #1
    e660:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e664:	f88d 300d 	strb.w	r3, [sp, #13]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    e668:	70aa      	strb	r2, [r5, #2]
	return _usb_d_dev_ep_trans(&trans);
    e66a:	4b1c      	ldr	r3, [pc, #112]	; (e6dc <_usb_d_cb_trans_done+0xf0>)
    e66c:	a801      	add	r0, sp, #4
    e66e:	4798      	blx	r3
    e670:	e7e9      	b.n	e646 <_usb_d_cb_trans_done+0x5a>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    e672:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    e674:	2302      	movs	r3, #2
    e676:	70ab      	strb	r3, [r5, #2]
    e678:	e7e5      	b.n	e646 <_usb_d_cb_trans_done+0x5a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    e67a:	2301      	movs	r3, #1
    e67c:	70ab      	strb	r3, [r5, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    e67e:	4434      	add	r4, r6
    e680:	464a      	mov	r2, r9
    e682:	69e3      	ldr	r3, [r4, #28]
    e684:	78e1      	ldrb	r1, [r4, #3]
    e686:	4640      	mov	r0, r8
    e688:	4798      	blx	r3
    e68a:	e7dc      	b.n	e646 <_usb_d_cb_trans_done+0x5a>
	} else if (code == USB_TRANS_STALL) {
    e68c:	2f01      	cmp	r7, #1
		ept->xfer.hdr.status = USB_XFER_HALT;
    e68e:	eb04 0306 	add.w	r3, r4, r6
	} else if (code == USB_TRANS_STALL) {
    e692:	d10b      	bne.n	e6ac <_usb_d_cb_trans_done+0xc0>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e694:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    e696:	2202      	movs	r2, #2
    e698:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e69a:	b921      	cbnz	r1, e6a6 <_usb_d_cb_trans_done+0xba>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    e69c:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    e69e:	4640      	mov	r0, r8
    e6a0:	4b0d      	ldr	r3, [pc, #52]	; (e6d8 <_usb_d_cb_trans_done+0xec>)
    e6a2:	4798      	blx	r3
    e6a4:	e7eb      	b.n	e67e <_usb_d_cb_trans_done+0x92>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    e6a6:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    e6a8:	709a      	strb	r2, [r3, #2]
    e6aa:	e7e8      	b.n	e67e <_usb_d_cb_trans_done+0x92>
	} else if (code == USB_TRANS_ABORT) {
    e6ac:	2f02      	cmp	r7, #2
    e6ae:	d107      	bne.n	e6c0 <_usb_d_cb_trans_done+0xd4>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    e6b0:	2204      	movs	r2, #4
    e6b2:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e6b4:	5da2      	ldrb	r2, [r4, r6]
    e6b6:	b90a      	cbnz	r2, e6bc <_usb_d_cb_trans_done+0xd0>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    e6b8:	709f      	strb	r7, [r3, #2]
			return;
    e6ba:	e7c4      	b.n	e646 <_usb_d_cb_trans_done+0x5a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    e6bc:	2201      	movs	r2, #1
    e6be:	e7f3      	b.n	e6a8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    e6c0:	2f03      	cmp	r7, #3
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    e6c2:	bf0c      	ite	eq
    e6c4:	f44f 62a0 	moveq.w	r2, #1280	; 0x500
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    e6c8:	f240 6206 	movwne	r2, #1542	; 0x606
    e6cc:	805a      	strh	r2, [r3, #2]
    e6ce:	e7d6      	b.n	e67e <_usb_d_cb_trans_done+0x92>
    e6d0:	0000e585 	.word	0x0000e585
    e6d4:	20000e14 	.word	0x20000e14
    e6d8:	0000ccf5 	.word	0x0000ccf5
    e6dc:	0000ce15 	.word	0x0000ce15

0000e6e0 <usb_d_cb_trans_setup>:
{
    e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e6e4:	4b18      	ldr	r3, [pc, #96]	; (e748 <usb_d_cb_trans_setup+0x68>)
	uint8_t *        req      = ept->xfer.req;
    e6e6:	4f19      	ldr	r7, [pc, #100]	; (e74c <usb_d_cb_trans_setup+0x6c>)
    e6e8:	4d19      	ldr	r5, [pc, #100]	; (e750 <usb_d_cb_trans_setup+0x70>)
{
    e6ea:	4604      	mov	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e6ec:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
    e6ee:	f04f 0820 	mov.w	r8, #32
    e6f2:	230c      	movs	r3, #12
    e6f4:	fb18 3800 	smlabb	r8, r8, r0, r3
    e6f8:	44b8      	add	r8, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    e6fa:	4b16      	ldr	r3, [pc, #88]	; (e754 <usb_d_cb_trans_setup+0x74>)
	int8_t           ep_index = _usb_d_find_ep(ep);
    e6fc:	4606      	mov	r6, r0
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    e6fe:	4641      	mov	r1, r8
    e700:	4620      	mov	r0, r4
    e702:	4798      	blx	r3
	if (n != 8) {
    e704:	b2c0      	uxtb	r0, r0
    e706:	2808      	cmp	r0, #8
    e708:	f044 0980 	orr.w	r9, r4, #128	; 0x80
    e70c:	d008      	beq.n	e720 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    e70e:	2101      	movs	r1, #1
    e710:	4620      	mov	r0, r4
    e712:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    e714:	4648      	mov	r0, r9
    e716:	462b      	mov	r3, r5
    e718:	2101      	movs	r1, #1
}
    e71a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    e71e:	4718      	bx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    e720:	eb07 1646 	add.w	r6, r7, r6, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    e724:	2100      	movs	r1, #0
    e726:	4620      	mov	r0, r4
    e728:	47a8      	blx	r5
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    e72a:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    e72c:	2100      	movs	r1, #0
    e72e:	4648      	mov	r0, r9
    e730:	47a8      	blx	r5
	if (!ept->callbacks.req(ep, req)) {
    e732:	6973      	ldr	r3, [r6, #20]
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    e734:	70b7      	strb	r7, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
    e736:	4641      	mov	r1, r8
    e738:	4620      	mov	r0, r4
    e73a:	4798      	blx	r3
    e73c:	b910      	cbnz	r0, e744 <usb_d_cb_trans_setup+0x64>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    e73e:	2305      	movs	r3, #5
    e740:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    e742:	e7e4      	b.n	e70e <usb_d_cb_trans_setup+0x2e>
}
    e744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e748:	0000e585 	.word	0x0000e585
    e74c:	20000e14 	.word	0x20000e14
    e750:	0000ccf5 	.word	0x0000ccf5
    e754:	0000cdc1 	.word	0x0000cdc1

0000e758 <usb_d_init>:

int32_t usb_d_init(void)
{
    e758:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    e75a:	4b11      	ldr	r3, [pc, #68]	; (e7a0 <usb_d_init+0x48>)
    e75c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    e75e:	2800      	cmp	r0, #0
    e760:	db1d      	blt.n	e79e <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    e762:	4b10      	ldr	r3, [pc, #64]	; (e7a4 <usb_d_init+0x4c>)
    e764:	4810      	ldr	r0, [pc, #64]	; (e7a8 <usb_d_init+0x50>)
    e766:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    e76a:	2100      	movs	r1, #0
    e76c:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e76e:	4b0e      	ldr	r3, [pc, #56]	; (e7a8 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    e770:	490e      	ldr	r1, [pc, #56]	; (e7ac <usb_d_init+0x54>)
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    e772:	2200      	movs	r2, #0
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    e774:	20ff      	movs	r0, #255	; 0xff
    e776:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e778:	2a0d      	cmp	r2, #13
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    e77a:	e9c3 1105 	strd	r1, r1, [r3, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    e77e:	7058      	strb	r0, [r3, #1]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    e780:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e782:	f103 0320 	add.w	r3, r3, #32
    e786:	d1f6      	bne.n	e776 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    e788:	4c09      	ldr	r4, [pc, #36]	; (e7b0 <usb_d_init+0x58>)
    e78a:	490a      	ldr	r1, [pc, #40]	; (e7b4 <usb_d_init+0x5c>)
    e78c:	2000      	movs	r0, #0
    e78e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    e790:	4909      	ldr	r1, [pc, #36]	; (e7b8 <usb_d_init+0x60>)
    e792:	2001      	movs	r0, #1
    e794:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    e796:	2002      	movs	r0, #2
    e798:	4908      	ldr	r1, [pc, #32]	; (e7bc <usb_d_init+0x64>)
    e79a:	47a0      	blx	r4
	return ERR_NONE;
    e79c:	2000      	movs	r0, #0
}
    e79e:	bd10      	pop	{r4, pc}
    e7a0:	0000c8ed 	.word	0x0000c8ed
    e7a4:	00012cf5 	.word	0x00012cf5
    e7a8:	20000e14 	.word	0x20000e14
    e7ac:	0000e5b5 	.word	0x0000e5b5
    e7b0:	0000cfb5 	.word	0x0000cfb5
    e7b4:	0000e6e1 	.word	0x0000e6e1
    e7b8:	0000e5b9 	.word	0x0000e5b9
    e7bc:	0000e5ed 	.word	0x0000e5ed

0000e7c0 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    e7c0:	4b00      	ldr	r3, [pc, #0]	; (e7c4 <usb_d_register_callback+0x4>)
    e7c2:	4718      	bx	r3
    e7c4:	0000cf91 	.word	0x0000cf91

0000e7c8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    e7c8:	4b00      	ldr	r3, [pc, #0]	; (e7cc <usb_d_enable+0x4>)
    e7ca:	4718      	bx	r3
    e7cc:	0000c9c9 	.word	0x0000c9c9

0000e7d0 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    e7d0:	4b00      	ldr	r3, [pc, #0]	; (e7d4 <usb_d_attach+0x4>)
    e7d2:	4718      	bx	r3
    e7d4:	0000ca25 	.word	0x0000ca25

0000e7d8 <usb_d_get_frame_num>:
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
	return _usb_d_dev_get_frame_n();
    e7d8:	4b00      	ldr	r3, [pc, #0]	; (e7dc <usb_d_get_frame_num+0x4>)
    e7da:	4718      	bx	r3
    e7dc:	0000ca43 	.word	0x0000ca43

0000e7e0 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    e7e0:	4b00      	ldr	r3, [pc, #0]	; (e7e4 <usb_d_set_address+0x4>)
    e7e2:	4718      	bx	r3
    e7e4:	0000ca37 	.word	0x0000ca37

0000e7e8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    e7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    e7ea:	4c11      	ldr	r4, [pc, #68]	; (e830 <usb_d_ep_init+0x48>)
{
    e7ec:	4606      	mov	r6, r0
    e7ee:	460d      	mov	r5, r1
    e7f0:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    e7f2:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    e7f4:	2800      	cmp	r0, #0
    e7f6:	da14      	bge.n	e822 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    e7f8:	20ff      	movs	r0, #255	; 0xff
    e7fa:	47a0      	blx	r4
		if (ep_index < 0) {
    e7fc:	1e04      	subs	r4, r0, #0
    e7fe:	db13      	blt.n	e828 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    e800:	4b0c      	ldr	r3, [pc, #48]	; (e834 <usb_d_ep_init+0x4c>)
    e802:	463a      	mov	r2, r7
    e804:	4629      	mov	r1, r5
    e806:	4630      	mov	r0, r6
    e808:	4798      	blx	r3
	if (rc < 0) {
    e80a:	2800      	cmp	r0, #0
    e80c:	db08      	blt.n	e820 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    e80e:	4b0a      	ldr	r3, [pc, #40]	; (e838 <usb_d_ep_init+0x50>)
    e810:	0162      	lsls	r2, r4, #5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    e812:	f005 0503 	and.w	r5, r5, #3
	ept->xfer.hdr.ep   = ep;
    e816:	eb03 1444 	add.w	r4, r3, r4, lsl #5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    e81a:	549d      	strb	r5, [r3, r2]
	ept->xfer.hdr.ep   = ep;
    e81c:	7066      	strb	r6, [r4, #1]
	return ERR_NONE;
    e81e:	2000      	movs	r0, #0
}
    e820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    e822:	f06f 0013 	mvn.w	r0, #19
    e826:	e7fb      	b.n	e820 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    e828:	f06f 0014 	mvn.w	r0, #20
    e82c:	e7f8      	b.n	e820 <usb_d_ep_init+0x38>
    e82e:	bf00      	nop
    e830:	0000e585 	.word	0x0000e585
    e834:	0000ca51 	.word	0x0000ca51
    e838:	20000e14 	.word	0x20000e14

0000e83c <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    e83c:	2100      	movs	r1, #0
{
    e83e:	4602      	mov	r2, r0
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    e840:	4b01      	ldr	r3, [pc, #4]	; (e848 <usb_d_ep0_init+0xc>)
    e842:	4608      	mov	r0, r1
    e844:	4718      	bx	r3
    e846:	bf00      	nop
    e848:	0000e7e9 	.word	0x0000e7e9

0000e84c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    e84c:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e84e:	4b07      	ldr	r3, [pc, #28]	; (e86c <usb_d_ep_deinit+0x20>)
{
    e850:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e852:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    e854:	1e04      	subs	r4, r0, #0
    e856:	db07      	blt.n	e868 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    e858:	4b05      	ldr	r3, [pc, #20]	; (e870 <usb_d_ep_deinit+0x24>)
    e85a:	4628      	mov	r0, r5
    e85c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    e85e:	4805      	ldr	r0, [pc, #20]	; (e874 <usb_d_ep_deinit+0x28>)
    e860:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    e864:	23ff      	movs	r3, #255	; 0xff
    e866:	7043      	strb	r3, [r0, #1]
}
    e868:	bd38      	pop	{r3, r4, r5, pc}
    e86a:	bf00      	nop
    e86c:	0000e585 	.word	0x0000e585
    e870:	0000cb11 	.word	0x0000cb11
    e874:	20000e14 	.word	0x20000e14

0000e878 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    e878:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e87a:	4b0c      	ldr	r3, [pc, #48]	; (e8ac <usb_d_ep_enable+0x34>)
{
    e87c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e87e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    e880:	1e03      	subs	r3, r0, #0
    e882:	db10      	blt.n	e8a6 <usb_d_ep_enable+0x2e>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    e884:	015b      	lsls	r3, r3, #5
    e886:	4c0a      	ldr	r4, [pc, #40]	; (e8b0 <usb_d_ep_enable+0x38>)
    e888:	5ce2      	ldrb	r2, [r4, r3]
    e88a:	441c      	add	r4, r3
    e88c:	2a00      	cmp	r2, #0
    e88e:	bf0c      	ite	eq
    e890:	2202      	moveq	r2, #2
    e892:	2201      	movne	r2, #1
	rc                  = _usb_d_dev_ep_enable(ep);
    e894:	4b07      	ldr	r3, [pc, #28]	; (e8b4 <usb_d_ep_enable+0x3c>)
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    e896:	70a2      	strb	r2, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    e898:	4628      	mov	r0, r5
    e89a:	4798      	blx	r3
	if (rc < 0) {
    e89c:	2800      	cmp	r0, #0
    e89e:	da01      	bge.n	e8a4 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    e8a0:	2300      	movs	r3, #0
    e8a2:	70a3      	strb	r3, [r4, #2]
	}
	return rc;
}
    e8a4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    e8a6:	f06f 0011 	mvn.w	r0, #17
    e8aa:	e7fb      	b.n	e8a4 <usb_d_ep_enable+0x2c>
    e8ac:	0000e585 	.word	0x0000e585
    e8b0:	20000e14 	.word	0x20000e14
    e8b4:	0000cb85 	.word	0x0000cb85

0000e8b8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    e8bc:	f890 8008 	ldrb.w	r8, [r0, #8]
    e8c0:	4b31      	ldr	r3, [pc, #196]	; (e988 <usb_d_ep_transfer+0xd0>)
{
    e8c2:	4605      	mov	r5, r0
    e8c4:	b087      	sub	sp, #28
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    e8c6:	4640      	mov	r0, r8
    e8c8:	4798      	blx	r3
	uint32_t              len = xfer->size;
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    e8ca:	1e04      	subs	r4, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    e8cc:	7a6f      	ldrb	r7, [r5, #9]
	uint32_t              len = xfer->size;
    e8ce:	686e      	ldr	r6, [r5, #4]
	if (ep_index < 0) {
    e8d0:	db55      	blt.n	e97e <usb_d_ep_transfer+0xc6>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
	state = ept->xfer.hdr.state;
    e8d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; e99c <usb_d_ep_transfer+0xe4>
	atomic_enter_critical(&flags);
    e8d6:	4b2d      	ldr	r3, [pc, #180]	; (e98c <usb_d_ep_transfer+0xd4>)
	state = ept->xfer.hdr.state;
    e8d8:	ea4f 1b44 	mov.w	fp, r4, lsl #5
    e8dc:	eb0a 1444 	add.w	r4, sl, r4, lsl #5
	atomic_enter_critical(&flags);
    e8e0:	a802      	add	r0, sp, #8
    e8e2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    e8e4:	78a3      	ldrb	r3, [r4, #2]
    e8e6:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    e8ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8ee:	2b01      	cmp	r3, #1
    e8f0:	fa5f f983 	uxtb.w	r9, r3
    e8f4:	4b26      	ldr	r3, [pc, #152]	; (e990 <usb_d_ep_transfer+0xd8>)
    e8f6:	d11a      	bne.n	e92e <usb_d_ep_transfer+0x76>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    e8f8:	2203      	movs	r2, #3
    e8fa:	70a2      	strb	r2, [r4, #2]
		atomic_leave_critical(&flags);
    e8fc:	a802      	add	r0, sp, #8
    e8fe:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e900:	f81a 300b 	ldrb.w	r3, [sl, fp]
    e904:	b1fb      	cbz	r3, e946 <usb_d_ep_transfer+0x8e>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    e906:	1e3b      	subs	r3, r7, #0
    e908:	ea4f 12d8 	mov.w	r2, r8, lsr #7
    e90c:	bf18      	it	ne
    e90e:	2301      	movne	r3, #1
	struct usb_d_transfer trans
    e910:	6828      	ldr	r0, [r5, #0]
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    e912:	7a29      	ldrb	r1, [r5, #8]
	struct usb_d_transfer trans
    e914:	e9cd 0603 	strd	r0, r6, [sp, #12]
    e918:	b372      	cbz	r2, e978 <usb_d_ep_transfer+0xc0>
    e91a:	f041 0280 	orr.w	r2, r1, #128	; 0x80
    e91e:	f88d 3015 	strb.w	r3, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    e922:	a803      	add	r0, sp, #12
    e924:	4b1b      	ldr	r3, [pc, #108]	; (e994 <usb_d_ep_transfer+0xdc>)
	struct usb_d_transfer trans
    e926:	f88d 2014 	strb.w	r2, [sp, #20]
	return _usb_d_dev_ep_trans(&trans);
    e92a:	4798      	blx	r3
	return rc;
    e92c:	e008      	b.n	e940 <usb_d_ep_transfer+0x88>
		atomic_leave_critical(&flags);
    e92e:	a802      	add	r0, sp, #8
    e930:	4798      	blx	r3
		switch (state) {
    e932:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e936:	2b06      	cmp	r3, #6
    e938:	b2da      	uxtb	r2, r3
    e93a:	d823      	bhi.n	e984 <usb_d_ep_transfer+0xcc>
    e93c:	4b16      	ldr	r3, [pc, #88]	; (e998 <usb_d_ep_transfer+0xe0>)
    e93e:	5698      	ldrsb	r0, [r3, r2]
}
    e940:	b007      	add	sp, #28
    e942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    e946:	7ce1      	ldrb	r1, [r4, #19]
    e948:	7ca2      	ldrb	r2, [r4, #18]
    e94a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    e94e:	b292      	uxth	r2, r2
		if (req_len == 0) {
    e950:	b92a      	cbnz	r2, e95e <usb_d_ep_transfer+0xa6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    e952:	2304      	movs	r3, #4
    e954:	70a3      	strb	r3, [r4, #2]
			len                 = 0;
    e956:	4616      	mov	r6, r2
			zlp                 = true;
    e958:	464b      	mov	r3, r9
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    e95a:	461a      	mov	r2, r3
    e95c:	e7d8      	b.n	e910 <usb_d_ep_transfer+0x58>
			if (dir) {
    e95e:	f994 100c 	ldrsb.w	r1, [r4, #12]
    e962:	4296      	cmp	r6, r2
    e964:	bf28      	it	cs
    e966:	4616      	movcs	r6, r2
    e968:	2900      	cmp	r1, #0
    e96a:	daf6      	bge.n	e95a <usb_d_ep_transfer+0xa2>
				zlp = (req_len > len);
    e96c:	42b2      	cmp	r2, r6
    e96e:	bf94      	ite	ls
    e970:	2300      	movls	r3, #0
    e972:	2301      	movhi	r3, #1
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    e974:	464a      	mov	r2, r9
    e976:	e7cb      	b.n	e910 <usb_d_ep_transfer+0x58>
	struct usb_d_transfer trans
    e978:	f001 020f 	and.w	r2, r1, #15
    e97c:	e7cf      	b.n	e91e <usb_d_ep_transfer+0x66>
		return -USB_ERR_PARAM;
    e97e:	f06f 0011 	mvn.w	r0, #17
    e982:	e7dd      	b.n	e940 <usb_d_ep_transfer+0x88>
		switch (state) {
    e984:	2001      	movs	r0, #1
    e986:	e7db      	b.n	e940 <usb_d_ep_transfer+0x88>
    e988:	0000e585 	.word	0x0000e585
    e98c:	00011569 	.word	0x00011569
    e990:	00011577 	.word	0x00011577
    e994:	0000ce15 	.word	0x0000ce15
    e998:	00015c96 	.word	0x00015c96
    e99c:	20000e14 	.word	0x20000e14

0000e9a0 <usb_d_ep_get_status>:
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
	ept->xfer.hdr.status = USB_XFER_ABORT;
}

int32_t usb_d_ep_get_status(const uint8_t ep, struct usb_d_ep_status *stat)
{
    e9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t                    ep_index = _usb_d_find_ep(ep);
    e9a2:	4b12      	ldr	r3, [pc, #72]	; (e9ec <usb_d_ep_get_status+0x4c>)
	struct usb_d_ep *         ept      = &usb_d_inst.ep[ep_index];
	struct usb_d_trans_status tmp;
	uint8_t                   state = ept->xfer.hdr.state;
    e9a4:	4d12      	ldr	r5, [pc, #72]	; (e9f0 <usb_d_ep_get_status+0x50>)
{
    e9a6:	b085      	sub	sp, #20
    e9a8:	4606      	mov	r6, r0
    e9aa:	460c      	mov	r4, r1
	int8_t                    ep_index = _usb_d_find_ep(ep);
    e9ac:	4798      	blx	r3
	uint8_t                   state = ept->xfer.hdr.state;
    e9ae:	eb05 1540 	add.w	r5, r5, r0, lsl #5
	if (ep_index < 0) {
    e9b2:	2800      	cmp	r0, #0
	uint8_t                   state = ept->xfer.hdr.state;
    e9b4:	78af      	ldrb	r7, [r5, #2]
	if (ep_index < 0) {
    e9b6:	db14      	blt.n	e9e2 <usb_d_ep_get_status+0x42>
		return -USB_ERR_PARAM;
	}
	if (stat) {
    e9b8:	b15c      	cbz	r4, e9d2 <usb_d_ep_get_status+0x32>
		/* Check transaction status if transferring data. */
		_usb_d_dev_ep_get_status(ep, &tmp);
    e9ba:	4b0e      	ldr	r3, [pc, #56]	; (e9f4 <usb_d_ep_get_status+0x54>)
    e9bc:	a901      	add	r1, sp, #4
    e9be:	4630      	mov	r0, r6
    e9c0:	4798      	blx	r3
		stat->ep    = ep;
    e9c2:	7026      	strb	r6, [r4, #0]
		stat->state = state;
    e9c4:	70e7      	strb	r7, [r4, #3]
		stat->code  = ept->xfer.hdr.status;
    e9c6:	78eb      	ldrb	r3, [r5, #3]
    e9c8:	7063      	strb	r3, [r4, #1]
		stat->count = tmp.count;
    e9ca:	9b02      	ldr	r3, [sp, #8]
    e9cc:	6063      	str	r3, [r4, #4]
		stat->size  = tmp.size;
    e9ce:	9b01      	ldr	r3, [sp, #4]
    e9d0:	60a3      	str	r3, [r4, #8]
	}
	switch (state) {
    e9d2:	2f06      	cmp	r7, #6
    e9d4:	d808      	bhi.n	e9e8 <usb_d_ep_get_status+0x48>
    e9d6:	4b08      	ldr	r3, [pc, #32]	; (e9f8 <usb_d_ep_get_status+0x58>)
    e9d8:	443b      	add	r3, r7
    e9da:	f993 0007 	ldrsb.w	r0, [r3, #7]
		return -USB_ERR_FUNC;
	default:
		/* Busy */
		return USB_BUSY;
	}
}
    e9de:	b005      	add	sp, #20
    e9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_PARAM;
    e9e2:	f06f 0011 	mvn.w	r0, #17
    e9e6:	e7fa      	b.n	e9de <usb_d_ep_get_status+0x3e>
    e9e8:	2001      	movs	r0, #1
    e9ea:	e7f8      	b.n	e9de <usb_d_ep_get_status+0x3e>
    e9ec:	0000e585 	.word	0x0000e585
    e9f0:	20000e14 	.word	0x20000e14
    e9f4:	0000cf1d 	.word	0x0000cf1d
    e9f8:	00015c96 	.word	0x00015c96

0000e9fc <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    e9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea00:	4605      	mov	r5, r0
	if (ctrl == USB_EP_HALT_CLR) {
    ea02:	460c      	mov	r4, r1
    ea04:	b9d9      	cbnz	r1, ea3e <usb_d_ep_halt+0x42>
	int8_t           ep_index = _usb_d_find_ep(ep);
    ea06:	4b13      	ldr	r3, [pc, #76]	; (ea54 <usb_d_ep_halt+0x58>)
    ea08:	4798      	blx	r3
	if (ep_index < 0) {
    ea0a:	1e06      	subs	r6, r0, #0
    ea0c:	db1e      	blt.n	ea4c <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    ea0e:	4f12      	ldr	r7, [pc, #72]	; (ea58 <usb_d_ep_halt+0x5c>)
    ea10:	2102      	movs	r1, #2
    ea12:	4628      	mov	r0, r5
    ea14:	47b8      	blx	r7
    ea16:	b180      	cbz	r0, ea3a <usb_d_ep_halt+0x3e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    ea18:	4621      	mov	r1, r4
    ea1a:	4628      	mov	r0, r5
    ea1c:	47b8      	blx	r7
		if (rc < 0) {
    ea1e:	2800      	cmp	r0, #0
    ea20:	db0b      	blt.n	ea3a <usb_d_ep_halt+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    ea22:	480e      	ldr	r0, [pc, #56]	; (ea5c <usb_d_ep_halt+0x60>)
    ea24:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    ea28:	f240 3301 	movw	r3, #769	; 0x301
    ea2c:	8043      	strh	r3, [r0, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    ea2e:	4622      	mov	r2, r4
    ea30:	69c3      	ldr	r3, [r0, #28]
    ea32:	2103      	movs	r1, #3
    ea34:	4628      	mov	r0, r5
    ea36:	4798      	blx	r3
	return ERR_NONE;
    ea38:	4620      	mov	r0, r4
	} else if (ctrl == USB_EP_HALT_SET) {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
	}
}
    ea3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (ctrl == USB_EP_HALT_SET) {
    ea3e:	2901      	cmp	r1, #1
}
    ea40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea44:	4b04      	ldr	r3, [pc, #16]	; (ea58 <usb_d_ep_halt+0x5c>)
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    ea46:	bf18      	it	ne
    ea48:	2102      	movne	r1, #2
    ea4a:	4718      	bx	r3
		return -USB_ERR_PARAM;
    ea4c:	f06f 0011 	mvn.w	r0, #17
    ea50:	e7f3      	b.n	ea3a <usb_d_ep_halt+0x3e>
    ea52:	bf00      	nop
    ea54:	0000e585 	.word	0x0000e585
    ea58:	0000ccf5 	.word	0x0000ccf5
    ea5c:	20000e14 	.word	0x20000e14

0000ea60 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    ea60:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    ea62:	4b0d      	ldr	r3, [pc, #52]	; (ea98 <usb_d_ep_register_callback+0x38>)
{
    ea64:	460d      	mov	r5, r1
    ea66:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    ea68:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;

	f = (FUNC_PTR)func; // SUKU EDIT

	if (ep_index < 0) {
    ea6a:	2800      	cmp	r0, #0
    ea6c:	db08      	blt.n	ea80 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    ea6e:	2d01      	cmp	r5, #1
    ea70:	d007      	beq.n	ea82 <usb_d_ep_register_callback+0x22>
    ea72:	2d02      	cmp	r5, #2
    ea74:	d00a      	beq.n	ea8c <usb_d_ep_register_callback+0x2c>
    ea76:	b91d      	cbnz	r5, ea80 <usb_d_ep_register_callback+0x20>
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    ea78:	4b08      	ldr	r3, [pc, #32]	; (ea9c <usb_d_ep_register_callback+0x3c>)
    ea7a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    ea7e:	6144      	str	r4, [r0, #20]
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    ea80:	bd38      	pop	{r3, r4, r5, pc}
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    ea82:	4b06      	ldr	r3, [pc, #24]	; (ea9c <usb_d_ep_register_callback+0x3c>)
    ea84:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    ea88:	6184      	str	r4, [r0, #24]
		break;
    ea8a:	e7f9      	b.n	ea80 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    ea8c:	4b03      	ldr	r3, [pc, #12]	; (ea9c <usb_d_ep_register_callback+0x3c>)
    ea8e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    ea92:	61c4      	str	r4, [r0, #28]
		break;
    ea94:	e7f4      	b.n	ea80 <usb_d_ep_register_callback+0x20>
    ea96:	bf00      	nop
    ea98:	0000e585 	.word	0x0000e585
    ea9c:	20000e14 	.word	0x20000e14

0000eaa0 <RTC_Scheduler_ping_cb>:
static struct timer_task RTC_Scheduler_heartbeat;

void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{

	pingflag++;
    eaa0:	4a0d      	ldr	r2, [pc, #52]	; (ead8 <RTC_Scheduler_ping_cb+0x38>)
    eaa2:	7813      	ldrb	r3, [r2, #0]
    eaa4:	3301      	adds	r3, #1
    eaa6:	b2db      	uxtb	r3, r3
    eaa8:	7013      	strb	r3, [r2, #0]
	
	switch (pingflag%4)
    eaaa:	7813      	ldrb	r3, [r2, #0]
    eaac:	f003 0303 	and.w	r3, r3, #3
    eab0:	2b02      	cmp	r3, #2
    eab2:	f642 7248 	movw	r2, #12104	; 0x2f48
    eab6:	d00a      	beq.n	eace <RTC_Scheduler_ping_cb+0x2e>
    eab8:	2b03      	cmp	r3, #3
    eaba:	d00a      	beq.n	ead2 <RTC_Scheduler_ping_cb+0x32>
    eabc:	2b01      	cmp	r3, #1
    eabe:	d003      	beq.n	eac8 <RTC_Scheduler_ping_cb+0x28>
	{
		case 0:
			GRID_PORT_N.ping_flag = 1;
    eac0:	4b06      	ldr	r3, [pc, #24]	; (eadc <RTC_Scheduler_ping_cb+0x3c>)
			break;
		case 2:
			GRID_PORT_S.ping_flag = 1;
			break;
		case 3:
			GRID_PORT_W.ping_flag = 1;
    eac2:	2101      	movs	r1, #1
    eac4:	5499      	strb	r1, [r3, r2]
			break;
	}
	
}
    eac6:	4770      	bx	lr
			GRID_PORT_E.ping_flag = 1;
    eac8:	4905      	ldr	r1, [pc, #20]	; (eae0 <RTC_Scheduler_ping_cb+0x40>)
    eaca:	548b      	strb	r3, [r1, r2]
			break;
    eacc:	4770      	bx	lr
			GRID_PORT_S.ping_flag = 1;
    eace:	4b05      	ldr	r3, [pc, #20]	; (eae4 <RTC_Scheduler_ping_cb+0x44>)
    ead0:	e7f7      	b.n	eac2 <RTC_Scheduler_ping_cb+0x22>
			GRID_PORT_W.ping_flag = 1;
    ead2:	4b05      	ldr	r3, [pc, #20]	; (eae8 <RTC_Scheduler_ping_cb+0x48>)
    ead4:	e7f5      	b.n	eac2 <RTC_Scheduler_ping_cb+0x22>
    ead6:	bf00      	nop
    ead8:	20000fb4 	.word	0x20000fb4
    eadc:	200010ec 	.word	0x200010ec
    eae0:	200116d8 	.word	0x200116d8
    eae4:	2000b73c 	.word	0x2000b73c
    eae8:	20008270 	.word	0x20008270

0000eaec <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    eaec:	4b01      	ldr	r3, [pc, #4]	; (eaf4 <RTC_Scheduler_report_cb+0x8>)
    eaee:	2201      	movs	r2, #1
    eaf0:	705a      	strb	r2, [r3, #1]
	
}
    eaf2:	4770      	bx	lr
    eaf4:	20000fb4 	.word	0x20000fb4

0000eaf8 <RTC_Scheduler_heartbeat_cb>:
{
    eaf8:	b410      	push	{r4}
	grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    eafa:	4c04      	ldr	r4, [pc, #16]	; (eb0c <RTC_Scheduler_heartbeat_cb+0x14>)
    eafc:	4804      	ldr	r0, [pc, #16]	; (eb10 <RTC_Scheduler_heartbeat_cb+0x18>)
    eafe:	2200      	movs	r2, #0
    eb00:	46a4      	mov	ip, r4
    eb02:	230c      	movs	r3, #12
}
    eb04:	f85d 4b04 	ldr.w	r4, [sp], #4
	grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    eb08:	4611      	mov	r1, r2
    eb0a:	4760      	bx	ip
    eb0c:	0000a9ad 	.word	0x0000a9ad
    eb10:	20014628 	.word	0x20014628

0000eb14 <RTC_Scheduler_realtime_cb>:
{
    eb14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	grid_sys_rtc_tick_time(&grid_sys_state);	
    eb16:	4d16      	ldr	r5, [pc, #88]	; (eb70 <RTC_Scheduler_realtime_cb+0x5c>)
    eb18:	4b16      	ldr	r3, [pc, #88]	; (eb74 <RTC_Scheduler_realtime_cb+0x60>)
    eb1a:	4628      	mov	r0, r5
    eb1c:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    eb1e:	4816      	ldr	r0, [pc, #88]	; (eb78 <RTC_Scheduler_realtime_cb+0x64>)
    eb20:	4b16      	ldr	r3, [pc, #88]	; (eb7c <RTC_Scheduler_realtime_cb+0x68>)
    eb22:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    eb24:	4b16      	ldr	r3, [pc, #88]	; (eb80 <RTC_Scheduler_realtime_cb+0x6c>)
    eb26:	a801      	add	r0, sp, #4
    eb28:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    eb2a:	4a16      	ldr	r2, [pc, #88]	; (eb84 <RTC_Scheduler_realtime_cb+0x70>)
    eb2c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    eb30:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    eb34:	f8d2 4110 	ldr.w	r4, [r2, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    eb38:	405c      	eors	r4, r3
    eb3a:	400c      	ands	r4, r1
    eb3c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    eb3e:	a801      	add	r0, sp, #4
    eb40:	4b11      	ldr	r3, [pc, #68]	; (eb88 <RTC_Scheduler_realtime_cb+0x74>)
    eb42:	4798      	blx	r3
	if (mapmode_value != grid_sys_state.mapmodestate){
    eb44:	7c2a      	ldrb	r2, [r5, #16]
	uint8_t mapmode_value = !gpio_get_pin_level(MAP_MODE);
    eb46:	f484 6300 	eor.w	r3, r4, #2048	; 0x800
    eb4a:	f3c3 23c0 	ubfx	r3, r3, #11, #1
	if (mapmode_value != grid_sys_state.mapmodestate){
    eb4e:	429a      	cmp	r2, r3
    eb50:	d009      	beq.n	eb66 <RTC_Scheduler_realtime_cb+0x52>
		grid_sys_state.mapmodestate = mapmode_value;
    eb52:	742b      	strb	r3, [r5, #16]
		if (grid_sys_state.mapmodestate == 0){ // RELEASE
    eb54:	7c2b      	ldrb	r3, [r5, #16]
    eb56:	4c0d      	ldr	r4, [pc, #52]	; (eb8c <RTC_Scheduler_realtime_cb+0x78>)
    eb58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    eb5c:	b92b      	cbnz	r3, eb6a <RTC_Scheduler_realtime_cb+0x56>
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_RELEASE);
    eb5e:	2308      	movs	r3, #8
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_PRESS);		
    eb60:	480b      	ldr	r0, [pc, #44]	; (eb90 <RTC_Scheduler_realtime_cb+0x7c>)
    eb62:	4611      	mov	r1, r2
    eb64:	47a0      	blx	r4
}
    eb66:	b003      	add	sp, #12
    eb68:	bd30      	pop	{r4, r5, pc}
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_PRESS);		
    eb6a:	2307      	movs	r3, #7
    eb6c:	2200      	movs	r2, #0
    eb6e:	e7f7      	b.n	eb60 <RTC_Scheduler_realtime_cb+0x4c>
    eb70:	20006fa4 	.word	0x20006fa4
    eb74:	0000974b 	.word	0x0000974b
    eb78:	2000824c 	.word	0x2000824c
    eb7c:	00008d03 	.word	0x00008d03
    eb80:	00011569 	.word	0x00011569
    eb84:	41008000 	.word	0x41008000
    eb88:	00011577 	.word	0x00011577
    eb8c:	0000a9ad 	.word	0x0000a9ad
    eb90:	20014628 	.word	0x20014628

0000eb94 <init_timer>:



void init_timer(void)
{
    eb94:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    eb96:	4c18      	ldr	r4, [pc, #96]	; (ebf8 <init_timer+0x64>)
	
	RTC_Scheduler_realtime.interval = 1;
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    eb98:	4d18      	ldr	r5, [pc, #96]	; (ebfc <init_timer+0x68>)
    eb9a:	4e19      	ldr	r6, [pc, #100]	; (ec00 <init_timer+0x6c>)
	RTC_Scheduler_heartbeat.interval = RTC1MS*GRID_PARAMETER_HEARTBEAT_interval;
    eb9c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    eba0:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    eba2:	4a18      	ldr	r2, [pc, #96]	; (ec04 <init_timer+0x70>)
    eba4:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    eba6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
	RTC_Scheduler_report.interval = RTC1SEC/10;
    ebaa:	f240 6266 	movw	r2, #1638	; 0x666
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    ebae:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_report.interval = RTC1SEC/10;
    ebb0:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    ebb2:	4b15      	ldr	r3, [pc, #84]	; (ec08 <init_timer+0x74>)
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    ebb4:	4a15      	ldr	r2, [pc, #84]	; (ec0c <init_timer+0x78>)
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    ebb6:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    ebb8:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    ebba:	2301      	movs	r3, #1
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    ebbc:	4a14      	ldr	r2, [pc, #80]	; (ec10 <init_timer+0x7c>)
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    ebbe:	7523      	strb	r3, [r4, #20]
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    ebc0:	1d21      	adds	r1, r4, #4
    ebc2:	4628      	mov	r0, r5
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    ebc4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    ebc8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	RTC_Scheduler_realtime.interval = 1;
    ebcc:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    ebce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    ebd2:	64e2      	str	r2, [r4, #76]	; 0x4c
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    ebd4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    ebd6:	f104 0118 	add.w	r1, r4, #24
    ebda:	4628      	mov	r0, r5
    ebdc:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    ebde:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    ebe2:	4628      	mov	r0, r5
    ebe4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    ebe6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    ebea:	4628      	mov	r0, r5
    ebec:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    ebee:	4628      	mov	r0, r5
    ebf0:	4b08      	ldr	r3, [pc, #32]	; (ec14 <init_timer+0x80>)
	
}
    ebf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	timer_start(&RTC_Scheduler);
    ebf6:	4718      	bx	r3
    ebf8:	20000fb4 	.word	0x20000fb4
    ebfc:	20014b18 	.word	0x20014b18
    ec00:	0000c08d 	.word	0x0000c08d
    ec04:	0000eaf9 	.word	0x0000eaf9
    ec08:	0000eaa1 	.word	0x0000eaa1
    ec0c:	0000eaed 	.word	0x0000eaed
    ec10:	0000eb15 	.word	0x0000eb15
    ec14:	0000c04d 	.word	0x0000c04d

0000ec18 <main>:

//====================== USB TEST =====================//

int main(void)
{
    ec18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec1c:	ed2d 8b02 	vpush	{d8}

	


	atmel_start_init();	
    ec20:	4b98      	ldr	r3, [pc, #608]	; (ee84 <main+0x26c>)
    
            
            
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    ec22:	4d99      	ldr	r5, [pc, #612]	; (ee88 <main+0x270>)
{
    ec24:	b099      	sub	sp, #100	; 0x64
	atmel_start_init();	
    ec26:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    ec28:	4998      	ldr	r1, [pc, #608]	; (ee8c <main+0x274>)
    ec2a:	4899      	ldr	r0, [pc, #612]	; (ee90 <main+0x278>)
    ec2c:	47a8      	blx	r5

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "D51 Init");
    ec2e:	4999      	ldr	r1, [pc, #612]	; (ee94 <main+0x27c>)
    ec30:	4897      	ldr	r0, [pc, #604]	; (ee90 <main+0x278>)
    ec32:	47a8      	blx	r5
	grid_d51_init(); // Check User Row
    ec34:	4b98      	ldr	r3, [pc, #608]	; (ee98 <main+0x280>)
    ec36:	4798      	blx	r3


	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    ec38:	4b98      	ldr	r3, [pc, #608]	; (ee9c <main+0x284>)
    ec3a:	4798      	blx	r3

	composite_device_start();
    ec3c:	4b98      	ldr	r3, [pc, #608]	; (eea0 <main+0x288>)
    ec3e:	4798      	blx	r3


	grid_usb_serial_init();
    ec40:	4b98      	ldr	r3, [pc, #608]	; (eea4 <main+0x28c>)
    ec42:	4798      	blx	r3
	//grid_usb_midi_init();
	grid_usb_midi_init();
    ec44:	4b98      	ldr	r3, [pc, #608]	; (eea8 <main+0x290>)
    ec46:	4798      	blx	r3

	grid_keyboard_init(&grid_keyboard_state);
    ec48:	4b98      	ldr	r3, [pc, #608]	; (eeac <main+0x294>)
    ec4a:	4899      	ldr	r0, [pc, #612]	; (eeb0 <main+0x298>)
    ec4c:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    ec4e:	4999      	ldr	r1, [pc, #612]	; (eeb4 <main+0x29c>)
    ec50:	488f      	ldr	r0, [pc, #572]	; (ee90 <main+0x278>)
    ec52:	47a8      	blx	r5
		
		
	rand_sync_enable(&RAND_0);	
    ec54:	4b98      	ldr	r3, [pc, #608]	; (eeb8 <main+0x2a0>)
    ec56:	4899      	ldr	r0, [pc, #612]	; (eebc <main+0x2a4>)
    ec58:	4798      	blx	r3
		
	grid_expr_init(&grid_expr_state);
    ec5a:	4b99      	ldr	r3, [pc, #612]	; (eec0 <main+0x2a8>)
    ec5c:	4899      	ldr	r0, [pc, #612]	; (eec4 <main+0x2ac>)
    ec5e:	4798      	blx	r3

	uint8_t test_string[] = "print(2*add(3+4+5+6,10),4)";
    ec60:	4b99      	ldr	r3, [pc, #612]	; (eec8 <main+0x2b0>)
    ec62:	aa09      	add	r2, sp, #36	; 0x24
    ec64:	f103 0718 	add.w	r7, r3, #24
    ec68:	4616      	mov	r6, r2
    ec6a:	6818      	ldr	r0, [r3, #0]
    ec6c:	6859      	ldr	r1, [r3, #4]
    ec6e:	4614      	mov	r4, r2
    ec70:	c403      	stmia	r4!, {r0, r1}
    ec72:	3308      	adds	r3, #8
    ec74:	42bb      	cmp	r3, r7
    ec76:	4622      	mov	r2, r4
    ec78:	d1f7      	bne.n	ec6a <main+0x52>
    ec7a:	8819      	ldrh	r1, [r3, #0]
    ec7c:	789b      	ldrb	r3, [r3, #2]
    ec7e:	8021      	strh	r1, [r4, #0]
    ec80:	70a3      	strb	r3, [r4, #2]

	grid_expr_evaluate(&grid_expr_state, test_string, strlen(test_string));
    ec82:	4630      	mov	r0, r6
    ec84:	4b91      	ldr	r3, [pc, #580]	; (eecc <main+0x2b4>)
			if (usb_d_get_frame_num() == 0){
				
			}
			else{			
			
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN	
    ec86:	4c92      	ldr	r4, [pc, #584]	; (eed0 <main+0x2b8>)
				
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
				
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    ec88:	ed9f 8a92 	vldr	s16, [pc, #584]	; eed4 <main+0x2bc>
	grid_expr_evaluate(&grid_expr_state, test_string, strlen(test_string));
    ec8c:	4798      	blx	r3
    ec8e:	4631      	mov	r1, r6
    ec90:	b2c2      	uxtb	r2, r0
    ec92:	4b91      	ldr	r3, [pc, #580]	; (eed8 <main+0x2c0>)
    ec94:	488b      	ldr	r0, [pc, #556]	; (eec4 <main+0x2ac>)
    ec96:	4798      	blx	r3
	grid_module_common_init();
    ec98:	4b90      	ldr	r3, [pc, #576]	; (eedc <main+0x2c4>)
    ec9a:	4798      	blx	r3
    grid_ui_reinit(&grid_ui_state);
    ec9c:	4b90      	ldr	r3, [pc, #576]	; (eee0 <main+0x2c8>)
    ec9e:	4891      	ldr	r0, [pc, #580]	; (eee4 <main+0x2cc>)
    eca0:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    eca2:	4991      	ldr	r1, [pc, #580]	; (eee8 <main+0x2d0>)
    eca4:	487a      	ldr	r0, [pc, #488]	; (ee90 <main+0x278>)
    eca6:	47a8      	blx	r5
	init_timer();
    eca8:	4b90      	ldr	r3, [pc, #576]	; (eeec <main+0x2d4>)
    ecaa:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Entering Main Loop");
    ecac:	4990      	ldr	r1, [pc, #576]	; (eef0 <main+0x2d8>)
    ecae:	4878      	ldr	r0, [pc, #480]	; (ee90 <main+0x278>)
    ecb0:	47a8      	blx	r5
	grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    ecb2:	4990      	ldr	r1, [pc, #576]	; (eef4 <main+0x2dc>)
    ecb4:	4886      	ldr	r0, [pc, #536]	; (eed0 <main+0x2b8>)
    ecb6:	4b90      	ldr	r3, [pc, #576]	; (eef8 <main+0x2e0>)
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    ecb8:	4d90      	ldr	r5, [pc, #576]	; (eefc <main+0x2e4>)
	grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    ecba:	4798      	blx	r3
	uint8_t usb_init_flag = 0;	
    ecbc:	f04f 0b00 	mov.w	fp, #0
	grid_ui_nvm_load_all_configuration(&grid_ui_state, &grid_nvm_state);	
    ecc0:	498c      	ldr	r1, [pc, #560]	; (eef4 <main+0x2dc>)
    ecc2:	4888      	ldr	r0, [pc, #544]	; (eee4 <main+0x2cc>)
    ecc4:	4b8e      	ldr	r3, [pc, #568]	; (ef00 <main+0x2e8>)
    ecc6:	4798      	blx	r3
	uint32_t loopwarp = 0;
    ecc8:	46da      	mov	sl, fp
	uint32_t loopcounter = 0;
    ecca:	f8cd b00c 	str.w	fp, [sp, #12]
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    ecce:	4f8d      	ldr	r7, [pc, #564]	; (ef04 <main+0x2ec>)
    ecd0:	2101      	movs	r1, #1
    ecd2:	4628      	mov	r0, r5
    ecd4:	47b8      	blx	r7
		if (usb_init_flag == 0){
    ecd6:	46b8      	mov	r8, r7
    ecd8:	f1bb 0f00 	cmp.w	fp, #0
    ecdc:	d11f      	bne.n	ed1e <main+0x106>
			if (usb_d_get_frame_num() == 0){
    ecde:	4b8a      	ldr	r3, [pc, #552]	; (ef08 <main+0x2f0>)
    ece0:	4798      	blx	r3
    ece2:	b1e0      	cbz	r0, ed1e <main+0x106>
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN	
    ece4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    ece8:	22ff      	movs	r2, #255	; 0xff
    ecea:	e9cd b300 	strd	fp, r3, [sp]
    ecee:	4659      	mov	r1, fp
    ecf0:	465b      	mov	r3, fp
    ecf2:	4f86      	ldr	r7, [pc, #536]	; (ef0c <main+0x2f4>)
    ecf4:	4620      	mov	r0, r4
    ecf6:	47b8      	blx	r7
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    ecf8:	4985      	ldr	r1, [pc, #532]	; (ef10 <main+0x2f8>)
    ecfa:	4b63      	ldr	r3, [pc, #396]	; (ee88 <main+0x270>)
    ecfc:	4864      	ldr	r0, [pc, #400]	; (ee90 <main+0x278>)
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    ecfe:	4f85      	ldr	r7, [pc, #532]	; (ef14 <main+0x2fc>)
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    ed00:	4798      	blx	r3
				grid_sys_set_bank(&grid_sys_state, grid_sys_get_bank_number_of_first_valid(&grid_sys_state));
    ed02:	4b85      	ldr	r3, [pc, #532]	; (ef18 <main+0x300>)
    ed04:	4620      	mov	r0, r4
    ed06:	4798      	blx	r3
    ed08:	4b84      	ldr	r3, [pc, #528]	; (ef1c <main+0x304>)
    ed0a:	4601      	mov	r1, r0
    ed0c:	4620      	mov	r0, r4
    ed0e:	4798      	blx	r3
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    ed10:	465a      	mov	r2, fp
    ed12:	4659      	mov	r1, fp
    ed14:	4882      	ldr	r0, [pc, #520]	; (ef20 <main+0x308>)
    ed16:	2309      	movs	r3, #9
    ed18:	47b8      	blx	r7
				usb_init_flag = 1;
    ed1a:	f04f 0b01 	mov.w	fp, #1
 		if (grid_sys_get_bank_valid(&grid_sys_state) == 0 && loopcounter%80 == 0){
    ed1e:	486c      	ldr	r0, [pc, #432]	; (eed0 <main+0x2b8>)
    ed20:	4b80      	ldr	r3, [pc, #512]	; (ef24 <main+0x30c>)
    ed22:	4798      	blx	r3
    ed24:	b988      	cbnz	r0, ed4a <main+0x132>
    ed26:	9903      	ldr	r1, [sp, #12]
    ed28:	9b03      	ldr	r3, [sp, #12]
    ed2a:	2250      	movs	r2, #80	; 0x50
    ed2c:	fbb3 f3f2 	udiv	r3, r3, r2
    ed30:	fb02 1313 	mls	r3, r2, r3, r1
    ed34:	b94b      	cbnz	r3, ed4a <main+0x132>
			if (grid_sys_state.bank_init_flag == 0)	{
    ed36:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    ed3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    ed3e:	b923      	cbnz	r3, ed4a <main+0x132>
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_REQUEST);
    ed40:	4877      	ldr	r0, [pc, #476]	; (ef20 <main+0x308>)
    ed42:	4f74      	ldr	r7, [pc, #464]	; (ef14 <main+0x2fc>)
    ed44:	230a      	movs	r3, #10
    ed46:	4611      	mov	r1, r2
    ed48:	47b8      	blx	r7
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    ed4a:	4b77      	ldr	r3, [pc, #476]	; (ef28 <main+0x310>)
		if (scheduler_report_flag){
    ed4c:	4f77      	ldr	r7, [pc, #476]	; (ef2c <main+0x314>)
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    ed4e:	4620      	mov	r0, r4
    ed50:	4798      	blx	r3
		if (scheduler_report_flag){
    ed52:	787b      	ldrb	r3, [r7, #1]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    ed54:	9004      	str	r0, [sp, #16]
		if (scheduler_report_flag){
    ed56:	46b9      	mov	r9, r7
    ed58:	2b00      	cmp	r3, #0
    ed5a:	f040 8180 	bne.w	f05e <main+0x446>
		loopcounter++;
    ed5e:	9b03      	ldr	r3, [sp, #12]
    ed60:	3301      	adds	r3, #1
    ed62:	9303      	str	r3, [sp, #12]
		grid_task_enter_task(&grid_task_state, GRID_TASK_RECEIVE);
    ed64:	2102      	movs	r1, #2
    ed66:	4628      	mov	r0, r5
    ed68:	47c0      	blx	r8
		grid_keyboard_tx_pop();
    ed6a:	4b71      	ldr	r3, [pc, #452]	; (ef30 <main+0x318>)
    ed6c:	4798      	blx	r3
		grid_midi_tx_pop();        
    ed6e:	4b71      	ldr	r3, [pc, #452]	; (ef34 <main+0x31c>)
    ed70:	4798      	blx	r3
		audiodf_midi_read(midi_rx_buffer,16);
    ed72:	4b71      	ldr	r3, [pc, #452]	; (ef38 <main+0x320>)
    ed74:	4871      	ldr	r0, [pc, #452]	; (ef3c <main+0x324>)
    ed76:	2110      	movs	r1, #16
    ed78:	4798      	blx	r3
    ed7a:	2200      	movs	r2, #0
		uint8_t found = 0;
    ed7c:	4613      	mov	r3, r2
			if (midi_rx_buffer[i]){
    ed7e:	eb09 0102 	add.w	r1, r9, r2
    ed82:	f891 1054 	ldrb.w	r1, [r1, #84]	; 0x54
    ed86:	b109      	cbz	r1, ed8c <main+0x174>
				found++;
    ed88:	3301      	adds	r3, #1
    ed8a:	b2db      	uxtb	r3, r3
		for (uint8_t i=0; i<16; i++){
    ed8c:	3201      	adds	r2, #1
    ed8e:	2a10      	cmp	r2, #16
    ed90:	d1f5      	bne.n	ed7e <main+0x166>
		if (found){
    ed92:	b36b      	cbz	r3, edf0 <main+0x1d8>
			printf("MIDI: %02x %02x %02x %02x\n", midi_rx_buffer[0],midi_rx_buffer[1],midi_rx_buffer[2],midi_rx_buffer[3]);
    ed94:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
    ed98:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
    ed9c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
    eda0:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
    eda4:	9000      	str	r0, [sp, #0]
    eda6:	4e38      	ldr	r6, [pc, #224]	; (ee88 <main+0x270>)
    eda8:	4865      	ldr	r0, [pc, #404]	; (ef40 <main+0x328>)
    edaa:	47b0      	blx	r6
			uint8_t message[30] = {0};
    edac:	2300      	movs	r3, #0
    edae:	4619      	mov	r1, r3
    edb0:	9310      	str	r3, [sp, #64]	; 0x40
    edb2:	221a      	movs	r2, #26
    edb4:	4b63      	ldr	r3, [pc, #396]	; (ef44 <main+0x32c>)
    edb6:	a811      	add	r0, sp, #68	; 0x44
    edb8:	4798      	blx	r3
			sprintf(message, "MIDI: %02x %02x %02x %02x\n", midi_rx_buffer[0],midi_rx_buffer[1],midi_rx_buffer[2],midi_rx_buffer[3]);
    edba:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
    edbe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
    edc2:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
    edc6:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
    edca:	4f5f      	ldr	r7, [pc, #380]	; (ef48 <main+0x330>)
    edcc:	e9cd 1000 	strd	r1, r0, [sp]
    edd0:	495b      	ldr	r1, [pc, #364]	; (ef40 <main+0x328>)
    edd2:	a810      	add	r0, sp, #64	; 0x40
    edd4:	47b8      	blx	r7
			grid_debug_print_text(message);
    edd6:	4b5d      	ldr	r3, [pc, #372]	; (ef4c <main+0x334>)
    edd8:	a810      	add	r0, sp, #64	; 0x40
    edda:	4798      	blx	r3
    eddc:	2300      	movs	r3, #0
				midi_rx_buffer[i] = 0;
    edde:	eb09 0203 	add.w	r2, r9, r3
    ede2:	3301      	adds	r3, #1
    ede4:	f04f 0100 	mov.w	r1, #0
			for (uint8_t i=0; i<16; i++){
    ede8:	2b10      	cmp	r3, #16
				midi_rx_buffer[i] = 0;
    edea:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
			for (uint8_t i=0; i<16; i++){
    edee:	d1f6      	bne.n	edde <main+0x1c6>
		cdcdf_acm_read(GRID_PORT_H.rx_double_buffer, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);			
    edf0:	4b57      	ldr	r3, [pc, #348]	; (ef50 <main+0x338>)
    edf2:	4858      	ldr	r0, [pc, #352]	; (ef54 <main+0x33c>)
    edf4:	f44f 7100 	mov.w	r1, #512	; 0x200
    edf8:	4798      	blx	r3
		uint16_t usblength = strlen(GRID_PORT_H.rx_double_buffer);
    edfa:	4856      	ldr	r0, [pc, #344]	; (ef54 <main+0x33c>)
    edfc:	4b33      	ldr	r3, [pc, #204]	; (eecc <main+0x2b4>)
    edfe:	4798      	blx	r3
		if (usblength){	
    ee00:	4681      	mov	r9, r0
    ee02:	b198      	cbz	r0, ee2c <main+0x214>
			GRID_PORT_H.rx_double_buffer_status = 1;			
    ee04:	4f54      	ldr	r7, [pc, #336]	; (ef58 <main+0x340>)
    ee06:	2301      	movs	r3, #1
    ee08:	623b      	str	r3, [r7, #32]
			GRID_PORT_H.rx_double_buffer_read_start_index = 0;
    ee0a:	2300      	movs	r3, #0
    ee0c:	62bb      	str	r3, [r7, #40]	; 0x28
			GRID_PORT_H.rx_double_buffer_seek_start_index = usblength-3; //-3
    ee0e:	1ec3      	subs	r3, r0, #3
    ee10:	627b      	str	r3, [r7, #36]	; 0x24
			grid_port_receive_task(&GRID_PORT_H);
    ee12:	4638      	mov	r0, r7
    ee14:	4b51      	ldr	r3, [pc, #324]	; (ef5c <main+0x344>)
    ee16:	4798      	blx	r3
			for(uint32_t i=0; i<usblength; i++){
    ee18:	2300      	movs	r3, #0
				GRID_PORT_H.rx_double_buffer[i] = 0;
    ee1a:	f241 32b4 	movw	r2, #5044	; 0x13b4
    ee1e:	18f9      	adds	r1, r7, r3
			for(uint32_t i=0; i<usblength; i++){
    ee20:	3301      	adds	r3, #1
				GRID_PORT_H.rx_double_buffer[i] = 0;
    ee22:	f04f 0000 	mov.w	r0, #0
			for(uint32_t i=0; i<usblength; i++){
    ee26:	4599      	cmp	r9, r3
				GRID_PORT_H.rx_double_buffer[i] = 0;
    ee28:	5488      	strb	r0, [r1, r2]
			for(uint32_t i=0; i<usblength; i++){
    ee2a:	d1f8      	bne.n	ee1e <main+0x206>
		if (GRID_PORT_U.rx_double_buffer_status == 0){
    ee2c:	4b4c      	ldr	r3, [pc, #304]	; (ef60 <main+0x348>)
    ee2e:	6a1b      	ldr	r3, [r3, #32]
    ee30:	b943      	cbnz	r3, ee44 <main+0x22c>
			if (grid_nvm_ui_bulk_read_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    ee32:	492c      	ldr	r1, [pc, #176]	; (eee4 <main+0x2cc>)
    ee34:	482f      	ldr	r0, [pc, #188]	; (eef4 <main+0x2dc>)
    ee36:	4b4b      	ldr	r3, [pc, #300]	; (ef64 <main+0x34c>)
    ee38:	4798      	blx	r3
    ee3a:	b118      	cbz	r0, ee44 <main+0x22c>
				grid_nvm_ui_bulk_read_next(&grid_nvm_state, &grid_ui_state);
    ee3c:	4929      	ldr	r1, [pc, #164]	; (eee4 <main+0x2cc>)
    ee3e:	482d      	ldr	r0, [pc, #180]	; (eef4 <main+0x2dc>)
    ee40:	4b49      	ldr	r3, [pc, #292]	; (ef68 <main+0x350>)
    ee42:	4798      	blx	r3
		if (grid_nvm_ui_bulk_clear_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    ee44:	4927      	ldr	r1, [pc, #156]	; (eee4 <main+0x2cc>)
    ee46:	482b      	ldr	r0, [pc, #172]	; (eef4 <main+0x2dc>)
    ee48:	4b48      	ldr	r3, [pc, #288]	; (ef6c <main+0x354>)
    ee4a:	4798      	blx	r3
    ee4c:	b118      	cbz	r0, ee56 <main+0x23e>
			grid_nvm_ui_bulk_clear_next(&grid_nvm_state, &grid_ui_state);
    ee4e:	4925      	ldr	r1, [pc, #148]	; (eee4 <main+0x2cc>)
    ee50:	4828      	ldr	r0, [pc, #160]	; (eef4 <main+0x2dc>)
    ee52:	4b47      	ldr	r3, [pc, #284]	; (ef70 <main+0x358>)
    ee54:	4798      	blx	r3
		if (grid_nvm_ui_bulk_store_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    ee56:	4923      	ldr	r1, [pc, #140]	; (eee4 <main+0x2cc>)
    ee58:	4826      	ldr	r0, [pc, #152]	; (eef4 <main+0x2dc>)
    ee5a:	4b46      	ldr	r3, [pc, #280]	; (ef74 <main+0x35c>)
    ee5c:	4798      	blx	r3
    ee5e:	b118      	cbz	r0, ee68 <main+0x250>
			grid_nvm_ui_bulk_store_next(&grid_nvm_state, &grid_ui_state);
    ee60:	4920      	ldr	r1, [pc, #128]	; (eee4 <main+0x2cc>)
    ee62:	4824      	ldr	r0, [pc, #144]	; (eef4 <main+0x2dc>)
    ee64:	4b44      	ldr	r3, [pc, #272]	; (ef78 <main+0x360>)
    ee66:	4798      	blx	r3
		uint32_t nvmlength = GRID_PORT_U.rx_double_buffer_status;
    ee68:	4b3d      	ldr	r3, [pc, #244]	; (ef60 <main+0x348>)
    ee6a:	6a1b      	ldr	r3, [r3, #32]
		if (nvmlength){
    ee6c:	2b00      	cmp	r3, #0
    ee6e:	f000 8089 	beq.w	ef84 <main+0x36c>
			GRID_PORT_U.rx_double_buffer_status = 1;
    ee72:	493b      	ldr	r1, [pc, #236]	; (ef60 <main+0x348>)
    ee74:	2201      	movs	r2, #1
    ee76:	620a      	str	r2, [r1, #32]
			GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    ee78:	460a      	mov	r2, r1
			GRID_PORT_U.rx_double_buffer_seek_start_index = nvmlength-1; //-3
    ee7a:	3b01      	subs	r3, #1
			GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    ee7c:	2100      	movs	r1, #0
    ee7e:	6291      	str	r1, [r2, #40]	; 0x28
    ee80:	e07c      	b.n	ef7c <main+0x364>
    ee82:	bf00      	nop
    ee84:	00011991 	.word	0x00011991
    ee88:	00012f39 	.word	0x00012f39
    ee8c:	00015ca4 	.word	0x00015ca4
    ee90:	00015363 	.word	0x00015363
    ee94:	00015cb6 	.word	0x00015cb6
    ee98:	00006381 	.word	0x00006381
    ee9c:	000044dd 	.word	0x000044dd
    eea0:	0000bf35 	.word	0x0000bf35
    eea4:	0000af65 	.word	0x0000af65
    eea8:	0000b15d 	.word	0x0000b15d
    eeac:	0000b249 	.word	0x0000b249
    eeb0:	20008200 	.word	0x20008200
    eeb4:	00015cbf 	.word	0x00015cbf
    eeb8:	0000da55 	.word	0x0000da55
    eebc:	20014bdc 	.word	0x20014bdc
    eec0:	000063f1 	.word	0x000063f1
    eec4:	2000b1bc 	.word	0x2000b1bc
    eec8:	00015d3d 	.word	0x00015d3d
    eecc:	00013801 	.word	0x00013801
    eed0:	20006fa4 	.word	0x20006fa4
    eed4:	200146a0 	.word	0x200146a0
    eed8:	00006b05 	.word	0x00006b05
    eedc:	00007045 	.word	0x00007045
    eee0:	0000a931 	.word	0x0000a931
    eee4:	20006f98 	.word	0x20006f98
    eee8:	00015cdc 	.word	0x00015cdc
    eeec:	0000eb95 	.word	0x0000eb95
    eef0:	00015cf4 	.word	0x00015cf4
    eef4:	200079b8 	.word	0x200079b8
    eef8:	00009081 	.word	0x00009081
    eefc:	2000824c 	.word	0x2000824c
    ef00:	00009a8d 	.word	0x00009a8d
    ef04:	00008cfb 	.word	0x00008cfb
    ef08:	0000e7d9 	.word	0x0000e7d9
    ef0c:	000097ab 	.word	0x000097ab
    ef10:	00015d07 	.word	0x00015d07
    ef14:	0000a9ad 	.word	0x0000a9ad
    ef18:	000096e1 	.word	0x000096e1
    ef1c:	000096fb 	.word	0x000096fb
    ef20:	20014628 	.word	0x20014628
    ef24:	000096a7 	.word	0x000096a7
    ef28:	00009741 	.word	0x00009741
    ef2c:	20000fb4 	.word	0x20000fb4
    ef30:	0000b2ed 	.word	0x0000b2ed
    ef34:	0000b1cd 	.word	0x0000b1cd
    ef38:	00004565 	.word	0x00004565
    ef3c:	20001008 	.word	0x20001008
    ef40:	00015d22 	.word	0x00015d22
    ef44:	00012cf5 	.word	0x00012cf5
    ef48:	00013351 	.word	0x00013351
    ef4c:	00009215 	.word	0x00009215
    ef50:	0000ba61 	.word	0x0000ba61
    ef54:	2000fa40 	.word	0x2000fa40
    ef58:	2000e68c 	.word	0x2000e68c
    ef5c:	00004d89 	.word	0x00004d89
    ef60:	2000404c 	.word	0x2000404c
    ef64:	000087af 	.word	0x000087af
    ef68:	000087b5 	.word	0x000087b5
    ef6c:	00008a87 	.word	0x00008a87
    ef70:	00008a8d 	.word	0x00008a8d
    ef74:	000088c3 	.word	0x000088c3
    ef78:	000088c9 	.word	0x000088c9
			grid_port_receive_task(&GRID_PORT_U);	
    ef7c:	4610      	mov	r0, r2
			GRID_PORT_U.rx_double_buffer_seek_start_index = nvmlength-1; //-3
    ef7e:	6253      	str	r3, [r2, #36]	; 0x24
			grid_port_receive_task(&GRID_PORT_U);	
    ef80:	4b8d      	ldr	r3, [pc, #564]	; (f1b8 <main+0x5a0>)
    ef82:	4798      	blx	r3
			for(uint32_t i=0; i<usblength; i++){
    ef84:	2300      	movs	r3, #0
			GRID_PORT_U.rx_double_buffer[i] = 0;
    ef86:	f241 32b4 	movw	r2, #5044	; 0x13b4
    ef8a:	498c      	ldr	r1, [pc, #560]	; (f1bc <main+0x5a4>)
    ef8c:	4419      	add	r1, r3
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    ef8e:	3301      	adds	r3, #1
			GRID_PORT_U.rx_double_buffer[i] = 0;
    ef90:	f04f 0000 	mov.w	r0, #0
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    ef94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			GRID_PORT_U.rx_double_buffer[i] = 0;
    ef98:	5488      	strb	r0, [r1, r2]
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    ef9a:	d1f6      	bne.n	ef8a <main+0x372>
		grid_port_receive_task(&GRID_PORT_N);
    ef9c:	4f86      	ldr	r7, [pc, #536]	; (f1b8 <main+0x5a0>)
    ef9e:	4888      	ldr	r0, [pc, #544]	; (f1c0 <main+0x5a8>)
    efa0:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_E);
    efa2:	4888      	ldr	r0, [pc, #544]	; (f1c4 <main+0x5ac>)
    efa4:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_S);
    efa6:	4888      	ldr	r0, [pc, #544]	; (f1c8 <main+0x5b0>)
    efa8:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_W);							
    efaa:	4888      	ldr	r0, [pc, #544]	; (f1cc <main+0x5b4>)
    efac:	47b8      	blx	r7
		grid_task_enter_task(&grid_task_state, GRID_TASK_REPORT);
    efae:	2103      	movs	r1, #3
    efb0:	4628      	mov	r0, r5
    efb2:	47c0      	blx	r8
		grid_port_process_ui(&GRID_PORT_U); // COOLDOWN DELAY IMPLEMENTED INSIDE
    efb4:	4b86      	ldr	r3, [pc, #536]	; (f1d0 <main+0x5b8>)
    efb6:	4881      	ldr	r0, [pc, #516]	; (f1bc <main+0x5a4>)
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    efb8:	4f86      	ldr	r7, [pc, #536]	; (f1d4 <main+0x5bc>)
		grid_port_process_ui(&GRID_PORT_U); // COOLDOWN DELAY IMPLEMENTED INSIDE
    efba:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_INBOUND);	
    efbc:	2104      	movs	r1, #4
    efbe:	4628      	mov	r0, r5
    efc0:	47c0      	blx	r8
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    efc2:	2101      	movs	r1, #1
    efc4:	487d      	ldr	r0, [pc, #500]	; (f1bc <main+0x5a4>)
    efc6:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    efc8:	2100      	movs	r1, #0
    efca:	487d      	ldr	r0, [pc, #500]	; (f1c0 <main+0x5a8>)
    efcc:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    efce:	2100      	movs	r1, #0
    efd0:	487c      	ldr	r0, [pc, #496]	; (f1c4 <main+0x5ac>)
    efd2:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_S, 0);
    efd4:	2100      	movs	r1, #0
    efd6:	487c      	ldr	r0, [pc, #496]	; (f1c8 <main+0x5b0>)
    efd8:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_W, 0);
    efda:	2100      	movs	r1, #0
    efdc:	487b      	ldr	r0, [pc, #492]	; (f1cc <main+0x5b4>)
    efde:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_H, 0);	// USB	
    efe0:	2100      	movs	r1, #0
    efe2:	487d      	ldr	r0, [pc, #500]	; (f1d8 <main+0x5c0>)
    efe4:	47b8      	blx	r7
		grid_task_enter_task(&grid_task_state, GRID_TASK_OUTBOUND);
    efe6:	2105      	movs	r1, #5
    efe8:	4628      	mov	r0, r5
    efea:	47c0      	blx	r8
		grid_port_process_outbound_usart(&GRID_PORT_N);
    efec:	4f7b      	ldr	r7, [pc, #492]	; (f1dc <main+0x5c4>)
    efee:	4874      	ldr	r0, [pc, #464]	; (f1c0 <main+0x5a8>)
    eff0:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_E);
    eff2:	4874      	ldr	r0, [pc, #464]	; (f1c4 <main+0x5ac>)
    eff4:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_S);
    eff6:	4874      	ldr	r0, [pc, #464]	; (f1c8 <main+0x5b0>)
    eff8:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_W);
    effa:	4874      	ldr	r0, [pc, #464]	; (f1cc <main+0x5b4>)
    effc:	47b8      	blx	r7
		grid_port_process_outbound_usb(&GRID_PORT_H);
    effe:	4b78      	ldr	r3, [pc, #480]	; (f1e0 <main+0x5c8>)
    f000:	4875      	ldr	r0, [pc, #468]	; (f1d8 <main+0x5c0>)
    f002:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    f004:	4b77      	ldr	r3, [pc, #476]	; (f1e4 <main+0x5cc>)
    f006:	486d      	ldr	r0, [pc, #436]	; (f1bc <main+0x5a4>)
    f008:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_ALERT);	
    f00a:	2107      	movs	r1, #7
    f00c:	4628      	mov	r0, r5
    f00e:	47c0      	blx	r8
		if (grid_sys_state.alert_state){
    f010:	8963      	ldrh	r3, [r4, #10]
    f012:	b29b      	uxth	r3, r3
    f014:	2b00      	cmp	r3, #0
    f016:	d13a      	bne.n	f08e <main+0x476>
			}
			
			
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
    f018:	2106      	movs	r1, #6
    f01a:	4f73      	ldr	r7, [pc, #460]	; (f1e8 <main+0x5d0>)


		// IDLETASK
		
		
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    f01c:	f8df 820c 	ldr.w	r8, [pc, #524]	; f22c <main+0x614>
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
    f020:	4628      	mov	r0, r5
    f022:	47b8      	blx	r7
		grid_led_tick(&grid_led_state);
    f024:	ee18 0a10 	vmov	r0, s16
    f028:	4b70      	ldr	r3, [pc, #448]	; (f1ec <main+0x5d4>)
    f02a:	4798      	blx	r3
			grid_led_lowlevel_render_all(&grid_led_state);	
    f02c:	ee18 0a10 	vmov	r0, s16
    f030:	4b6f      	ldr	r3, [pc, #444]	; (f1f0 <main+0x5d8>)
    f032:	4798      	blx	r3
			grid_led_lowlevel_hardware_start_transfer(&grid_led_state);
    f034:	4b6f      	ldr	r3, [pc, #444]	; (f1f4 <main+0x5dc>)
    f036:	ee18 0a10 	vmov	r0, s16
    f03a:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_IDLE);
    f03c:	2100      	movs	r1, #0
    f03e:	4628      	mov	r0, r5
    f040:	47b8      	blx	r7
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    f042:	9904      	ldr	r1, [sp, #16]
    f044:	4620      	mov	r0, r4
    f046:	47c0      	blx	r8
		
		if (elapsed < RTC1MS){
    f048:	280f      	cmp	r0, #15
    f04a:	f240 8097 	bls.w	f17c <main+0x564>
				delay_us(1);			
			}	
					
		}
		else{
			loopwarp+= elapsed - RTC1MS;
    f04e:	f1aa 0310 	sub.w	r3, sl, #16
    f052:	eb03 0a00 	add.w	sl, r3, r0
			
			loopslow++;
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);		
    f056:	2101      	movs	r1, #1
    f058:	4628      	mov	r0, r5
    f05a:	47b8      	blx	r7
	while (1) {
    f05c:	e637      	b.n	ecce <main+0xb6>
			scheduler_report_flag=0;
    f05e:	f04f 0300 	mov.w	r3, #0
    f062:	707b      	strb	r3, [r7, #1]
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    f064:	4b64      	ldr	r3, [pc, #400]	; (f1f8 <main+0x5e0>)
			scheduler_report_flag=0;
    f066:	f04f 0a00 	mov.w	sl, #0
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    f06a:	fa5f f18a 	uxtb.w	r1, sl
    f06e:	4628      	mov	r0, r5
    f070:	f10a 0a01 	add.w	sl, sl, #1
    f074:	4798      	blx	r3
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    f076:	f1ba 0f08 	cmp.w	sl, #8
    f07a:	4b5f      	ldr	r3, [pc, #380]	; (f1f8 <main+0x5e0>)
    f07c:	d1f5      	bne.n	f06a <main+0x452>
			grid_task_timer_reset(&grid_task_state);
    f07e:	4b5f      	ldr	r3, [pc, #380]	; (f1fc <main+0x5e4>)
    f080:	4628      	mov	r0, r5
			loopwarp = 0;
    f082:	f04f 0a00 	mov.w	sl, #0
			grid_task_timer_reset(&grid_task_state);
    f086:	4798      	blx	r3
			loopcounter = 0;
    f088:	f8cd a00c 	str.w	sl, [sp, #12]
    f08c:	e66a      	b.n	ed64 <main+0x14c>
			grid_sys_state.alert_state--;
    f08e:	8963      	ldrh	r3, [r4, #10]
    f090:	3b01      	subs	r3, #1
    f092:	b29b      	uxth	r3, r3
    f094:	8163      	strh	r3, [r4, #10]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    f096:	4620      	mov	r0, r4
    f098:	4b59      	ldr	r3, [pc, #356]	; (f200 <main+0x5e8>)
    f09a:	4798      	blx	r3
    f09c:	b998      	cbnz	r0, f0c6 <main+0x4ae>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    f09e:	4b59      	ldr	r3, [pc, #356]	; (f204 <main+0x5ec>)
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    f0a0:	f8df 818c 	ldr.w	r8, [pc, #396]	; f230 <main+0x618>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    f0a4:	4620      	mov	r0, r4
    f0a6:	4798      	blx	r3
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    f0a8:	2700      	movs	r7, #0
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    f0aa:	4681      	mov	r9, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    f0ac:	ee18 3a10 	vmov	r3, s16
    f0b0:	785b      	ldrb	r3, [r3, #1]
    f0b2:	b2f9      	uxtb	r1, r7
    f0b4:	428b      	cmp	r3, r1
    f0b6:	d9af      	bls.n	f018 <main+0x400>
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    f0b8:	ee18 0a10 	vmov	r0, s16
    f0bc:	464b      	mov	r3, r9
    f0be:	2200      	movs	r2, #0
    f0c0:	47c0      	blx	r8
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    f0c2:	3701      	adds	r7, #1
    f0c4:	e7f2      	b.n	f0ac <main+0x494>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    f0c6:	4b50      	ldr	r3, [pc, #320]	; (f208 <main+0x5f0>)
    f0c8:	4620      	mov	r0, r4
    f0ca:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    f0cc:	4b4f      	ldr	r3, [pc, #316]	; (f20c <main+0x5f4>)
    f0ce:	4620      	mov	r0, r4
    f0d0:	4798      	blx	r3
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    f0d2:	4b4f      	ldr	r3, [pc, #316]	; (f210 <main+0x5f8>)
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    f0d4:	4681      	mov	r9, r0
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    f0d6:	4620      	mov	r0, r4
    f0d8:	4798      	blx	r3
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    f0da:	4b4e      	ldr	r3, [pc, #312]	; (f214 <main+0x5fc>)
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    f0dc:	9006      	str	r0, [sp, #24]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    f0de:	4620      	mov	r0, r4
    f0e0:	4798      	blx	r3
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    f0e2:	2300      	movs	r3, #0
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    f0e4:	9007      	str	r0, [sp, #28]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    f0e6:	9305      	str	r3, [sp, #20]
    f0e8:	4b4b      	ldr	r3, [pc, #300]	; (f218 <main+0x600>)
    f0ea:	f89d 6014 	ldrb.w	r6, [sp, #20]
    f0ee:	ee18 0a10 	vmov	r0, s16
    f0f2:	4798      	blx	r3
    f0f4:	9b05      	ldr	r3, [sp, #20]
    f0f6:	42b0      	cmp	r0, r6
    f0f8:	f103 0301 	add.w	r3, r3, #1
    f0fc:	9305      	str	r3, [sp, #20]
    f0fe:	d9ce      	bls.n	f09e <main+0x486>
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    f100:	2300      	movs	r3, #0
    f102:	461a      	mov	r2, r3
    f104:	e9cd 3300 	strd	r3, r3, [sp]
    f108:	ee18 0a10 	vmov	r0, s16
    f10c:	4631      	mov	r1, r6
    f10e:	f8df 8124 	ldr.w	r8, [pc, #292]	; f234 <main+0x61c>
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    f112:	4f42      	ldr	r7, [pc, #264]	; (f21c <main+0x604>)
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    f114:	47c0      	blx	r8
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    f116:	4b42      	ldr	r3, [pc, #264]	; (f220 <main+0x608>)
    f118:	f8df 811c 	ldr.w	r8, [pc, #284]	; f238 <main+0x620>
    f11c:	4648      	mov	r0, r9
    f11e:	4798      	blx	r3
    f120:	4b40      	ldr	r3, [pc, #256]	; (f224 <main+0x60c>)
    f122:	2200      	movs	r2, #0
    f124:	47b8      	blx	r7
    f126:	47c0      	blx	r8
    f128:	4b3d      	ldr	r3, [pc, #244]	; (f220 <main+0x608>)
    f12a:	b2c2      	uxtb	r2, r0
    f12c:	9807      	ldr	r0, [sp, #28]
    f12e:	ee08 2a90 	vmov	s17, r2
    f132:	4798      	blx	r3
    f134:	2200      	movs	r2, #0
    f136:	4b3b      	ldr	r3, [pc, #236]	; (f224 <main+0x60c>)
    f138:	47b8      	blx	r7
    f13a:	47c0      	blx	r8
    f13c:	b2c0      	uxtb	r0, r0
    f13e:	9001      	str	r0, [sp, #4]
    f140:	4b37      	ldr	r3, [pc, #220]	; (f220 <main+0x608>)
    f142:	9806      	ldr	r0, [sp, #24]
    f144:	4798      	blx	r3
    f146:	4b37      	ldr	r3, [pc, #220]	; (f224 <main+0x60c>)
    f148:	2200      	movs	r2, #0
    f14a:	47b8      	blx	r7
    f14c:	47c0      	blx	r8
    f14e:	b2c0      	uxtb	r0, r0
    f150:	ee18 3a90 	vmov	r3, s17
    f154:	9000      	str	r0, [sp, #0]
    f156:	4631      	mov	r1, r6
    f158:	ee18 0a10 	vmov	r0, s16
    f15c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; f23c <main+0x624>
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    f160:	4f31      	ldr	r7, [pc, #196]	; (f228 <main+0x610>)
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    f162:	2200      	movs	r2, #0
    f164:	47c0      	blx	r8
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    f166:	9b07      	ldr	r3, [sp, #28]
    f168:	9301      	str	r3, [sp, #4]
    f16a:	9b06      	ldr	r3, [sp, #24]
    f16c:	9300      	str	r3, [sp, #0]
    f16e:	ee18 0a10 	vmov	r0, s16
    f172:	464b      	mov	r3, r9
    f174:	2200      	movs	r2, #0
    f176:	4631      	mov	r1, r6
    f178:	47b8      	blx	r7
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    f17a:	e7b5      	b.n	f0e8 <main+0x4d0>
			if (loopwarp>5){
    f17c:	f1ba 0f05 	cmp.w	sl, #5
    f180:	d90e      	bls.n	f1a0 <main+0x588>
					if ((RTC1MS - elapsed)<loopwarp){				
    f182:	f1c0 0310 	rsb	r3, r0, #16
    f186:	4553      	cmp	r3, sl
						loopwarp-=(RTC1MS - elapsed);
    f188:	bf3f      	itttt	cc
    f18a:	f1aa 0310 	subcc.w	r3, sl, #16
    f18e:	eb03 0a00 	addcc.w	sl, r3, r0
						loopstart-=(RTC1MS - elapsed);
    f192:	9b04      	ldrcc	r3, [sp, #16]
    f194:	3b10      	subcc	r3, #16
    f196:	bf3a      	itte	cc
    f198:	181b      	addcc	r3, r3, r0
    f19a:	9304      	strcc	r3, [sp, #16]
						loopwarp-=loopwarp;
    f19c:	f04f 0a00 	movcs.w	sl, #0
				delay_us(1);			
    f1a0:	f8df 909c 	ldr.w	r9, [pc, #156]	; f240 <main+0x628>
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    f1a4:	9904      	ldr	r1, [sp, #16]
    f1a6:	4620      	mov	r0, r4
    f1a8:	47c0      	blx	r8
    f1aa:	280f      	cmp	r0, #15
    f1ac:	f63f af53 	bhi.w	f056 <main+0x43e>
				delay_us(1);			
    f1b0:	2001      	movs	r0, #1
    f1b2:	47c8      	blx	r9
    f1b4:	e7f6      	b.n	f1a4 <main+0x58c>
    f1b6:	bf00      	nop
    f1b8:	00004d89 	.word	0x00004d89
    f1bc:	2000404c 	.word	0x2000404c
    f1c0:	200010ec 	.word	0x200010ec
    f1c4:	200116d8 	.word	0x200116d8
    f1c8:	2000b73c 	.word	0x2000b73c
    f1cc:	20008270 	.word	0x20008270
    f1d0:	00009fed 	.word	0x00009fed
    f1d4:	00005209 	.word	0x00005209
    f1d8:	2000e68c 	.word	0x2000e68c
    f1dc:	00006315 	.word	0x00006315
    f1e0:	000053cd 	.word	0x000053cd
    f1e4:	000056c1 	.word	0x000056c1
    f1e8:	00008cfb 	.word	0x00008cfb
    f1ec:	00006c05 	.word	0x00006c05
    f1f0:	00006ff5 	.word	0x00006ff5
    f1f4:	00007015 	.word	0x00007015
    f1f8:	00008d25 	.word	0x00008d25
    f1fc:	00008d11 	.word	0x00008d11
    f200:	0000975d 	.word	0x0000975d
    f204:	00009767 	.word	0x00009767
    f208:	00009761 	.word	0x00009761
    f20c:	000097c5 	.word	0x000097c5
    f210:	000097c9 	.word	0x000097c9
    f214:	000097cd 	.word	0x000097cd
    f218:	00006c01 	.word	0x00006c01
    f21c:	000126f5 	.word	0x000126f5
    f220:	00012621 	.word	0x00012621
    f224:	3fe00000 	.word	0x3fe00000
    f228:	00006c7d 	.word	0x00006c7d
    f22c:	00009745 	.word	0x00009745
    f230:	00006d0d 	.word	0x00006d0d
    f234:	00006c3d 	.word	0x00006c3d
    f238:	00012b19 	.word	0x00012b19
    f23c:	00006c5d 	.word	0x00006c5d
    f240:	0000d031 	.word	0x0000d031

0000f244 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    f244:	6800      	ldr	r0, [r0, #0]
    f246:	b900      	cbnz	r0, f24a <is_list_element+0x6>
    f248:	4770      	bx	lr
		if (it == element) {
    f24a:	4288      	cmp	r0, r1
    f24c:	d1fa      	bne.n	f244 <is_list_element>
			return true;
    f24e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    f250:	4770      	bx	lr
	...

0000f254 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    f254:	b538      	push	{r3, r4, r5, lr}
	ASSERT(!is_list_element(list, element));
    f256:	4b07      	ldr	r3, [pc, #28]	; (f274 <list_insert_as_head+0x20>)
{
    f258:	460d      	mov	r5, r1
    f25a:	4604      	mov	r4, r0
	ASSERT(!is_list_element(list, element));
    f25c:	4798      	blx	r3
    f25e:	f080 0001 	eor.w	r0, r0, #1
    f262:	4b05      	ldr	r3, [pc, #20]	; (f278 <list_insert_as_head+0x24>)
    f264:	4905      	ldr	r1, [pc, #20]	; (f27c <list_insert_as_head+0x28>)
    f266:	2239      	movs	r2, #57	; 0x39
    f268:	b2c0      	uxtb	r0, r0
    f26a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    f26c:	6823      	ldr	r3, [r4, #0]
    f26e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    f270:	6025      	str	r5, [r4, #0]
}
    f272:	bd38      	pop	{r3, r4, r5, pc}
    f274:	0000f245 	.word	0x0000f245
    f278:	0000d305 	.word	0x0000d305
    f27c:	00015d58 	.word	0x00015d58

0000f280 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    f280:	6803      	ldr	r3, [r0, #0]
    f282:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    f284:	6001      	str	r1, [r0, #0]
}
    f286:	4770      	bx	lr

0000f288 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    f288:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
    f28a:	4b0c      	ldr	r3, [pc, #48]	; (f2bc <list_insert_at_end+0x34>)
	struct list_element *it = list->head;
    f28c:	6805      	ldr	r5, [r0, #0]
{
    f28e:	4606      	mov	r6, r0
    f290:	460c      	mov	r4, r1
	ASSERT(!is_list_element(list, element));
    f292:	4798      	blx	r3
    f294:	f080 0001 	eor.w	r0, r0, #1
    f298:	4b09      	ldr	r3, [pc, #36]	; (f2c0 <list_insert_at_end+0x38>)
    f29a:	490a      	ldr	r1, [pc, #40]	; (f2c4 <list_insert_at_end+0x3c>)
    f29c:	224f      	movs	r2, #79	; 0x4f
    f29e:	b2c0      	uxtb	r0, r0
    f2a0:	4798      	blx	r3

	if (!list->head) {
    f2a2:	6833      	ldr	r3, [r6, #0]
    f2a4:	b913      	cbnz	r3, f2ac <list_insert_at_end+0x24>
		list->head                             = (struct list_element *)element;
    f2a6:	6034      	str	r4, [r6, #0]
		((struct list_element *)element)->next = NULL;
    f2a8:	6023      	str	r3, [r4, #0]
	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
}
    f2aa:	bd70      	pop	{r4, r5, r6, pc}
	while (it->next) {
    f2ac:	462b      	mov	r3, r5
    f2ae:	682d      	ldr	r5, [r5, #0]
    f2b0:	2d00      	cmp	r5, #0
    f2b2:	d1fb      	bne.n	f2ac <list_insert_at_end+0x24>
	it->next                               = (struct list_element *)element;
    f2b4:	601c      	str	r4, [r3, #0]
	((struct list_element *)element)->next = NULL;
    f2b6:	6025      	str	r5, [r4, #0]
    f2b8:	e7f7      	b.n	f2aa <list_insert_at_end+0x22>
    f2ba:	bf00      	nop
    f2bc:	0000f245 	.word	0x0000f245
    f2c0:	0000d305 	.word	0x0000d305
    f2c4:	00015d58 	.word	0x00015d58

0000f2c8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    f2c8:	6803      	ldr	r3, [r0, #0]
    f2ca:	b10b      	cbz	r3, f2d0 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    f2cc:	681a      	ldr	r2, [r3, #0]
    f2ce:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    f2d0:	4618      	mov	r0, r3
    f2d2:	4770      	bx	lr

0000f2d4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    f2d4:	4b03      	ldr	r3, [pc, #12]	; (f2e4 <_osc32kctrl_init_sources+0x10>)
    f2d6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    f2d8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    f2dc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    f2de:	2201      	movs	r2, #1
    f2e0:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    f2e2:	4770      	bx	lr
    f2e4:	40001400 	.word	0x40001400

0000f2e8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    f2e8:	6903      	ldr	r3, [r0, #16]
    f2ea:	420b      	tst	r3, r1
    f2ec:	d1fc      	bne.n	f2e8 <hri_rtcmode0_wait_for_sync>
	};
}
    f2ee:	4770      	bx	lr

0000f2f0 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    f2f0:	68c0      	ldr	r0, [r0, #12]

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f2f2:	4b02      	ldr	r3, [pc, #8]	; (f2fc <_rtc_timer_set_period+0xc>)
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    f2f4:	6201      	str	r1, [r0, #32]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f2f6:	2160      	movs	r1, #96	; 0x60
    f2f8:	4718      	bx	r3
    f2fa:	bf00      	nop
    f2fc:	0000f2e9 	.word	0x0000f2e9

0000f300 <_rtc_timer_get_period>:

/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
    f300:	b508      	push	{r3, lr}
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    f302:	68c0      	ldr	r0, [r0, #12]
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f304:	4b02      	ldr	r3, [pc, #8]	; (f310 <_rtc_timer_get_period+0x10>)
    f306:	2160      	movs	r1, #96	; 0x60
    f308:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    f30a:	6a00      	ldr	r0, [r0, #32]
}
    f30c:	bd08      	pop	{r3, pc}
    f30e:	bf00      	nop
    f310:	0000f2e9 	.word	0x0000f2e9

0000f314 <_rtc_timer_is_started>:

/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
    f314:	b508      	push	{r3, lr}
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    f316:	68c0      	ldr	r0, [r0, #12]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f318:	4b03      	ldr	r3, [pc, #12]	; (f328 <_rtc_timer_is_started+0x14>)
    f31a:	f248 0103 	movw	r1, #32771	; 0x8003
    f31e:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    f320:	8800      	ldrh	r0, [r0, #0]
}
    f322:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f326:	bd08      	pop	{r3, pc}
    f328:	0000f2e9 	.word	0x0000f2e9

0000f32c <_rtc_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    f32c:	4770      	bx	lr
	...

0000f330 <_rtc_timer_stop>:
{
    f330:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    f332:	4604      	mov	r4, r0
    f334:	b118      	cbz	r0, f33e <_rtc_timer_stop+0xe>
    f336:	68c0      	ldr	r0, [r0, #12]
    f338:	3800      	subs	r0, #0
    f33a:	bf18      	it	ne
    f33c:	2001      	movne	r0, #1
    f33e:	4908      	ldr	r1, [pc, #32]	; (f360 <_rtc_timer_stop+0x30>)
    f340:	4b08      	ldr	r3, [pc, #32]	; (f364 <_rtc_timer_stop+0x34>)
    f342:	226b      	movs	r2, #107	; 0x6b
    f344:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    f346:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    f348:	8803      	ldrh	r3, [r0, #0]
    f34a:	f023 0302 	bic.w	r3, r3, #2
    f34e:	041b      	lsls	r3, r3, #16
    f350:	0c1b      	lsrs	r3, r3, #16
    f352:	8003      	strh	r3, [r0, #0]
}
    f354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f358:	4b03      	ldr	r3, [pc, #12]	; (f368 <_rtc_timer_stop+0x38>)
    f35a:	f248 0103 	movw	r1, #32771	; 0x8003
    f35e:	4718      	bx	r3
    f360:	00015d76 	.word	0x00015d76
    f364:	0000d305 	.word	0x0000d305
    f368:	0000f2e9 	.word	0x0000f2e9

0000f36c <_rtc_timer_start>:
{
    f36c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    f36e:	4604      	mov	r4, r0
    f370:	b118      	cbz	r0, f37a <_rtc_timer_start+0xe>
    f372:	68c0      	ldr	r0, [r0, #12]
    f374:	3800      	subs	r0, #0
    f376:	bf18      	it	ne
    f378:	2001      	movne	r0, #1
    f37a:	490e      	ldr	r1, [pc, #56]	; (f3b4 <_rtc_timer_start+0x48>)
    f37c:	4b0e      	ldr	r3, [pc, #56]	; (f3b8 <_rtc_timer_start+0x4c>)
    f37e:	225e      	movs	r2, #94	; 0x5e
    f380:	4798      	blx	r3
    f382:	4b0e      	ldr	r3, [pc, #56]	; (f3bc <_rtc_timer_start+0x50>)
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    f384:	68e0      	ldr	r0, [r4, #12]
    f386:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f38a:	601a      	str	r2, [r3, #0]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    f38c:	2300      	movs	r3, #0
    f38e:	6183      	str	r3, [r0, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    f390:	4a0b      	ldr	r2, [pc, #44]	; (f3c0 <_rtc_timer_start+0x54>)
    f392:	2108      	movs	r1, #8
    f394:	4790      	blx	r2
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    f396:	68e0      	ldr	r0, [r4, #12]
    f398:	2108      	movs	r1, #8
    f39a:	4790      	blx	r2
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    f39c:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    f39e:	8803      	ldrh	r3, [r0, #0]
    f3a0:	b29b      	uxth	r3, r3
    f3a2:	f043 0302 	orr.w	r3, r3, #2
}
    f3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3aa:	8003      	strh	r3, [r0, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f3ac:	f248 0103 	movw	r1, #32771	; 0x8003
    f3b0:	4710      	bx	r2
    f3b2:	bf00      	nop
    f3b4:	00015d76 	.word	0x00015d76
    f3b8:	0000d305 	.word	0x0000d305
    f3bc:	e000e100 	.word	0xe000e100
    f3c0:	0000f2e9 	.word	0x0000f2e9

0000f3c4 <_rtc_timer_deinit>:
{
    f3c4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    f3c6:	4604      	mov	r4, r0
    f3c8:	b118      	cbz	r0, f3d2 <_rtc_timer_deinit+0xe>
    f3ca:	68c0      	ldr	r0, [r0, #12]
    f3cc:	3800      	subs	r0, #0
    f3ce:	bf18      	it	ne
    f3d0:	2001      	movne	r0, #1
    f3d2:	490b      	ldr	r1, [pc, #44]	; (f400 <_rtc_timer_deinit+0x3c>)
    f3d4:	4b0b      	ldr	r3, [pc, #44]	; (f404 <_rtc_timer_deinit+0x40>)
    f3d6:	2252      	movs	r2, #82	; 0x52
    f3d8:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f3da:	4b0b      	ldr	r3, [pc, #44]	; (f408 <_rtc_timer_deinit+0x44>)
    f3dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f3e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    f3e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f3e8:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    f3ec:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    f3ee:	2301      	movs	r3, #1
    f3f0:	8003      	strh	r3, [r0, #0]
}
    f3f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f3f6:	4b05      	ldr	r3, [pc, #20]	; (f40c <_rtc_timer_deinit+0x48>)
    f3f8:	f248 0103 	movw	r1, #32771	; 0x8003
    f3fc:	4718      	bx	r3
    f3fe:	bf00      	nop
    f400:	00015d76 	.word	0x00015d76
    f404:	0000d305 	.word	0x0000d305
    f408:	e000e100 	.word	0xe000e100
    f40c:	0000f2e9 	.word	0x0000f2e9

0000f410 <_rtc_timer_init>:
{
    f410:	b570      	push	{r4, r5, r6, lr}
	ASSERT(dev);
    f412:	4604      	mov	r4, r0
{
    f414:	460d      	mov	r5, r1
	ASSERT(dev);
    f416:	3800      	subs	r0, #0
    f418:	bf18      	it	ne
    f41a:	2001      	movne	r0, #1
    f41c:	4b10      	ldr	r3, [pc, #64]	; (f460 <_rtc_timer_init+0x50>)
    f41e:	4911      	ldr	r1, [pc, #68]	; (f464 <_rtc_timer_init+0x54>)
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    f420:	2601      	movs	r6, #1
    f422:	2230      	movs	r2, #48	; 0x30
    f424:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f426:	4a10      	ldr	r2, [pc, #64]	; (f468 <_rtc_timer_init+0x58>)
	dev->hw = hw;
    f428:	60e5      	str	r5, [r4, #12]
    f42a:	4628      	mov	r0, r5
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    f42c:	802e      	strh	r6, [r5, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f42e:	f248 0103 	movw	r1, #32771	; 0x8003
    f432:	4790      	blx	r2
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    f434:	68e0      	ldr	r0, [r4, #12]
    f436:	4631      	mov	r1, r6
    f438:	4790      	blx	r2
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    f43a:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    f43c:	f248 0380 	movw	r3, #32896	; 0x8080
    f440:	8003      	strh	r3, [r0, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f442:	f248 0103 	movw	r1, #32771	; 0x8003
    f446:	4790      	blx	r2
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    f448:	68e0      	ldr	r0, [r4, #12]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f44a:	2160      	movs	r1, #96	; 0x60
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    f44c:	6206      	str	r6, [r0, #32]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f44e:	4790      	blx	r2
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    f450:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    f452:	f44f 7280 	mov.w	r2, #256	; 0x100
    f456:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    f458:	4b04      	ldr	r3, [pc, #16]	; (f46c <_rtc_timer_init+0x5c>)
}
    f45a:	2000      	movs	r0, #0
	_rtc_dev = dev;
    f45c:	601c      	str	r4, [r3, #0]
}
    f45e:	bd70      	pop	{r4, r5, r6, pc}
    f460:	0000d305 	.word	0x0000d305
    f464:	00015d76 	.word	0x00015d76
    f468:	0000f2e9 	.word	0x0000f2e9
    f46c:	2000101c 	.word	0x2000101c

0000f470 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    f470:	4800      	ldr	r0, [pc, #0]	; (f474 <_rtc_get_timer+0x4>)
    f472:	4770      	bx	lr
    f474:	20000508 	.word	0x20000508

0000f478 <RTC_Handler>:
/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
	_rtc_timer_interrupt_handler(_rtc_dev);
    f478:	4b07      	ldr	r3, [pc, #28]	; (f498 <RTC_Handler+0x20>)
{
    f47a:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    f47c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    f47e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    f480:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    f482:	05db      	lsls	r3, r3, #23
    f484:	d507      	bpl.n	f496 <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    f486:	6823      	ldr	r3, [r4, #0]
    f488:	b10b      	cbz	r3, f48e <RTC_Handler+0x16>
			dev->timer_cb.period_expired(dev);
    f48a:	4620      	mov	r0, r4
    f48c:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    f48e:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    f490:	f44f 7280 	mov.w	r2, #256	; 0x100
    f494:	819a      	strh	r2, [r3, #12]
}
    f496:	bd10      	pop	{r4, pc}
    f498:	2000101c 	.word	0x2000101c

0000f49c <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    f49c:	b530      	push	{r4, r5, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
    f49e:	1c4b      	adds	r3, r1, #1
	uint8_t pin  = GPIO_PIN(gpio);
    f4a0:	b2c5      	uxtb	r5, r0
    f4a2:	4b18      	ldr	r3, [pc, #96]	; (f504 <_gpio_set_pin_function+0x68>)
    f4a4:	f000 041f 	and.w	r4, r0, #31
	uint8_t port = GPIO_PORT(gpio);
    f4a8:	ea4f 1050 	mov.w	r0, r0, lsr #5
    f4ac:	ea4f 10c0 	mov.w	r0, r0, lsl #7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f4b0:	4403      	add	r3, r0
	if (function == GPIO_PIN_FUNCTION_OFF) {
    f4b2:	d107      	bne.n	f4c4 <_gpio_set_pin_function+0x28>
    f4b4:	4423      	add	r3, r4
    f4b6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    f4ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f4be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    f4c2:	bd30      	pop	{r4, r5, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f4c4:	1918      	adds	r0, r3, r4
    f4c6:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    f4ca:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    f4ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    f4d2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f4d6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    f4da:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
		if (pin & 1) {
    f4de:	f015 0f01 	tst.w	r5, #1
    f4e2:	b2c9      	uxtb	r1, r1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    f4e4:	bf19      	ittee	ne
    f4e6:	f002 020f 	andne.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    f4ea:	ea42 1101 	orrne.w	r1, r2, r1, lsl #4
	tmp |= PORT_PMUX_PMUXE(data);
    f4ee:	f001 010f 	andeq.w	r1, r1, #15
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    f4f2:	f002 02f0 	andeq.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXO(data);
    f4f6:	bf14      	ite	ne
    f4f8:	b2c9      	uxtbne	r1, r1
	tmp |= PORT_PMUX_PMUXE(data);
    f4fa:	4311      	orreq	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    f4fc:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    f500:	e7df      	b.n	f4c2 <_gpio_set_pin_function+0x26>
    f502:	bf00      	nop
    f504:	41008000 	.word	0x41008000

0000f508 <gpio_set_pin_direction>:
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    f508:	f000 031f 	and.w	r3, r0, #31
{
    f50c:	b530      	push	{r4, r5, lr}
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    f50e:	2501      	movs	r5, #1
    f510:	409d      	lsls	r5, r3
	switch (direction) {
    f512:	0940      	lsrs	r0, r0, #5
    f514:	4b0f      	ldr	r3, [pc, #60]	; (f554 <gpio_set_pin_direction+0x4c>)
    f516:	01c0      	lsls	r0, r0, #7
    f518:	2901      	cmp	r1, #1
    f51a:	b2ac      	uxth	r4, r5
    f51c:	ea4f 4215 	mov.w	r2, r5, lsr #16
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f520:	4403      	add	r3, r0
    f522:	d008      	beq.n	f536 <gpio_set_pin_direction+0x2e>
    f524:	2902      	cmp	r1, #2
    f526:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    f52a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    f52e:	d00e      	beq.n	f54e <gpio_set_pin_direction+0x46>
    f530:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    f532:	629c      	str	r4, [r3, #40]	; 0x28
    f534:	e009      	b.n	f54a <gpio_set_pin_direction+0x42>
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    f536:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    f53a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
		hri_port_write_WRCONFIG_reg(PORT,
    f53e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f542:	605d      	str	r5, [r3, #4]
    f544:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    f548:	629c      	str	r4, [r3, #40]	; 0x28
    f54a:	629a      	str	r2, [r3, #40]	; 0x28
}
    f54c:	bd30      	pop	{r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    f54e:	609d      	str	r5, [r3, #8]
    f550:	e7ef      	b.n	f532 <gpio_set_pin_direction+0x2a>
    f552:	bf00      	nop
    f554:	41008000 	.word	0x41008000

0000f558 <gpio_set_pin_pull_mode>:
	switch (pull_mode) {
    f558:	0942      	lsrs	r2, r0, #5
    f55a:	2901      	cmp	r1, #1
    f55c:	4b0d      	ldr	r3, [pc, #52]	; (f594 <gpio_set_pin_pull_mode+0x3c>)
    f55e:	f000 001f 	and.w	r0, r0, #31
    f562:	ea4f 12c2 	mov.w	r2, r2, lsl #7
    f566:	d008      	beq.n	f57a <gpio_set_pin_pull_mode+0x22>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    f568:	4413      	add	r3, r2
    f56a:	4418      	add	r0, r3
    f56c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    f570:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f574:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
    f578:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f57a:	4413      	add	r3, r2
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    f57c:	4081      	lsls	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    f57e:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f580:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    f582:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    f586:	f042 0204 	orr.w	r2, r2, #4
    f58a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    f58e:	6199      	str	r1, [r3, #24]
}
    f590:	4770      	bx	lr
    f592:	bf00      	nop
    f594:	41008000 	.word	0x41008000

0000f598 <ADC_0_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    f598:	4a14      	ldr	r2, [pc, #80]	; (f5ec <ADC_0_init+0x54>)
 */
void ADC_0_init(void)
{
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    f59a:	4915      	ldr	r1, [pc, #84]	; (f5f0 <ADC_0_init+0x58>)
    f59c:	6a13      	ldr	r3, [r2, #32]
{
    f59e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f5a4:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    f5a6:	4b13      	ldr	r3, [pc, #76]	; (f5f4 <ADC_0_init+0x5c>)
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    f5a8:	4e13      	ldr	r6, [pc, #76]	; (f5f8 <ADC_0_init+0x60>)
    f5aa:	4d14      	ldr	r5, [pc, #80]	; (f5fc <ADC_0_init+0x64>)
    f5ac:	4f14      	ldr	r7, [pc, #80]	; (f600 <ADC_0_init+0x68>)
{
    f5ae:	b085      	sub	sp, #20
    f5b0:	2241      	movs	r2, #65	; 0x41
    f5b2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    f5b6:	4b13      	ldr	r3, [pc, #76]	; (f604 <ADC_0_init+0x6c>)
    f5b8:	9301      	str	r3, [sp, #4]
    f5ba:	2400      	movs	r4, #0
    f5bc:	2301      	movs	r3, #1
    f5be:	9300      	str	r3, [sp, #0]
    f5c0:	4632      	mov	r2, r6
    f5c2:	4623      	mov	r3, r4
    f5c4:	9402      	str	r4, [sp, #8]
    f5c6:	4628      	mov	r0, r5
    f5c8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
    f5ca:	1c72      	adds	r2, r6, #1
    f5cc:	4621      	mov	r1, r4
    f5ce:	2310      	movs	r3, #16
    f5d0:	4628      	mov	r0, r5
    f5d2:	4d0d      	ldr	r5, [pc, #52]	; (f608 <ADC_0_init+0x70>)
    f5d4:	47a8      	blx	r5

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);
    f5d6:	4621      	mov	r1, r4
    f5d8:	4b0c      	ldr	r3, [pc, #48]	; (f60c <ADC_0_init+0x74>)
    f5da:	2007      	movs	r0, #7
    f5dc:	4798      	blx	r3
	_gpio_set_pin_function(pin, function);
    f5de:	490c      	ldr	r1, [pc, #48]	; (f610 <ADC_0_init+0x78>)
    f5e0:	4b0c      	ldr	r3, [pc, #48]	; (f614 <ADC_0_init+0x7c>)
    f5e2:	2007      	movs	r0, #7

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
    f5e4:	b005      	add	sp, #20
    f5e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f5ea:	4718      	bx	r3
    f5ec:	40000800 	.word	0x40000800
    f5f0:	43001c00 	.word	0x43001c00
    f5f4:	40001c00 	.word	0x40001c00
    f5f8:	20001020 	.word	0x20001020
    f5fc:	20014be4 	.word	0x20014be4
    f600:	0000d5fd 	.word	0x0000d5fd
    f604:	20014ce0 	.word	0x20014ce0
    f608:	0000d6a1 	.word	0x0000d6a1
    f60c:	0000f509 	.word	0x0000f509
    f610:	00070001 	.word	0x00070001
    f614:	0000f49d 	.word	0x0000f49d

0000f618 <ADC_1_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    f618:	4a15      	ldr	r2, [pc, #84]	; (f670 <ADC_1_init+0x58>)
 */
void ADC_1_init(void)
{
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    f61a:	4916      	ldr	r1, [pc, #88]	; (f674 <ADC_1_init+0x5c>)
    f61c:	6a13      	ldr	r3, [r2, #32]
{
    f61e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f624:	6213      	str	r3, [r2, #32]
    f626:	4b14      	ldr	r3, [pc, #80]	; (f678 <ADC_1_init+0x60>)
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    f628:	4e14      	ldr	r6, [pc, #80]	; (f67c <ADC_1_init+0x64>)
    f62a:	4d15      	ldr	r5, [pc, #84]	; (f680 <ADC_1_init+0x68>)
    f62c:	4f15      	ldr	r7, [pc, #84]	; (f684 <ADC_1_init+0x6c>)
{
    f62e:	b085      	sub	sp, #20
    f630:	2241      	movs	r2, #65	; 0x41
    f632:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    f636:	4b14      	ldr	r3, [pc, #80]	; (f688 <ADC_1_init+0x70>)
    f638:	9301      	str	r3, [sp, #4]
    f63a:	2400      	movs	r4, #0
    f63c:	2301      	movs	r3, #1
    f63e:	9300      	str	r3, [sp, #0]
    f640:	f106 0211 	add.w	r2, r6, #17
    f644:	4623      	mov	r3, r4
    f646:	9402      	str	r4, [sp, #8]
    f648:	4628      	mov	r0, r5
    f64a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
    f64c:	f106 0212 	add.w	r2, r6, #18
    f650:	4621      	mov	r1, r4
    f652:	2310      	movs	r3, #16
    f654:	4628      	mov	r0, r5
    f656:	4d0d      	ldr	r5, [pc, #52]	; (f68c <ADC_1_init+0x74>)
    f658:	47a8      	blx	r5

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);
    f65a:	4621      	mov	r1, r4
    f65c:	4b0c      	ldr	r3, [pc, #48]	; (f690 <ADC_1_init+0x78>)
    f65e:	2042      	movs	r0, #66	; 0x42
    f660:	4798      	blx	r3
    f662:	490c      	ldr	r1, [pc, #48]	; (f694 <ADC_1_init+0x7c>)
    f664:	4b0c      	ldr	r3, [pc, #48]	; (f698 <ADC_1_init+0x80>)
    f666:	2042      	movs	r0, #66	; 0x42

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
    f668:	b005      	add	sp, #20
    f66a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f66e:	4718      	bx	r3
    f670:	40000800 	.word	0x40000800
    f674:	43002000 	.word	0x43002000
    f678:	40001c00 	.word	0x40001c00
    f67c:	20001020 	.word	0x20001020
    f680:	20014db8 	.word	0x20014db8
    f684:	0000d5fd 	.word	0x0000d5fd
    f688:	20014b78 	.word	0x20014b78
    f68c:	0000d6a1 	.word	0x0000d6a1
    f690:	0000f509 	.word	0x0000f509
    f694:	00420001 	.word	0x00420001
    f698:	0000f49d 	.word	0x0000f49d

0000f69c <CRC_0_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    f69c:	4a04      	ldr	r2, [pc, #16]	; (f6b0 <CRC_0_init+0x14>)
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
    f69e:	4905      	ldr	r1, [pc, #20]	; (f6b4 <CRC_0_init+0x18>)
    f6a0:	6993      	ldr	r3, [r2, #24]
    f6a2:	4805      	ldr	r0, [pc, #20]	; (f6b8 <CRC_0_init+0x1c>)
    f6a4:	f043 0302 	orr.w	r3, r3, #2
    f6a8:	6193      	str	r3, [r2, #24]
    f6aa:	4b04      	ldr	r3, [pc, #16]	; (f6bc <CRC_0_init+0x20>)
    f6ac:	4718      	bx	r3
    f6ae:	bf00      	nop
    f6b0:	40000800 	.word	0x40000800
    f6b4:	41002000 	.word	0x41002000
    f6b8:	20014b74 	.word	0x20014b74
    f6bc:	0000e555 	.word	0x0000e555

0000f6c0 <EVENT_SYSTEM_0_init>:
    f6c0:	4b08      	ldr	r3, [pc, #32]	; (f6e4 <EVENT_SYSTEM_0_init+0x24>)
    f6c2:	2240      	movs	r2, #64	; 0x40
    f6c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    f6c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    f6cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    f6d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    f6d4:	4a04      	ldr	r2, [pc, #16]	; (f6e8 <EVENT_SYSTEM_0_init+0x28>)
    f6d6:	6993      	ldr	r3, [r2, #24]
    f6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f6dc:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    f6de:	4b03      	ldr	r3, [pc, #12]	; (f6ec <EVENT_SYSTEM_0_init+0x2c>)
    f6e0:	4718      	bx	r3
    f6e2:	bf00      	nop
    f6e4:	40001c00 	.word	0x40001c00
    f6e8:	40000800 	.word	0x40000800
    f6ec:	000115b5 	.word	0x000115b5

0000f6f0 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    f6f0:	4a02      	ldr	r2, [pc, #8]	; (f6fc <FLASH_0_CLOCK_init+0xc>)
    f6f2:	6913      	ldr	r3, [r2, #16]
    f6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f6f8:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
    f6fa:	4770      	bx	lr
    f6fc:	40000800 	.word	0x40000800

0000f700 <FLASH_0_init>:

void FLASH_0_init(void)
{
    f700:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
    f702:	4b04      	ldr	r3, [pc, #16]	; (f714 <FLASH_0_init+0x14>)
    f704:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
}
    f706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	flash_init(&FLASH_0, NVMCTRL);
    f70a:	4903      	ldr	r1, [pc, #12]	; (f718 <FLASH_0_init+0x18>)
    f70c:	4803      	ldr	r0, [pc, #12]	; (f71c <FLASH_0_init+0x1c>)
    f70e:	4b04      	ldr	r3, [pc, #16]	; (f720 <FLASH_0_init+0x20>)
    f710:	4718      	bx	r3
    f712:	bf00      	nop
    f714:	0000f6f1 	.word	0x0000f6f1
    f718:	41004000 	.word	0x41004000
    f71c:	20014b58 	.word	0x20014b58
    f720:	0000dffd 	.word	0x0000dffd

0000f724 <QSPI_INSTANCE_PORT_init>:

void QSPI_INSTANCE_PORT_init(void)
{
    f724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Set pin direction to input
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_IN);
    f728:	2101      	movs	r1, #1
    f72a:	4e24      	ldr	r6, [pc, #144]	; (f7bc <QSPI_INSTANCE_PORT_init+0x98>)

	gpio_set_pin_pull_mode(PB11,
    f72c:	4d24      	ldr	r5, [pc, #144]	; (f7c0 <QSPI_INSTANCE_PORT_init+0x9c>)
    f72e:	4c25      	ldr	r4, [pc, #148]	; (f7c4 <QSPI_INSTANCE_PORT_init+0xa0>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f730:	4f25      	ldr	r7, [pc, #148]	; (f7c8 <QSPI_INSTANCE_PORT_init+0xa4>)
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_IN);
    f732:	202b      	movs	r0, #43	; 0x2b
    f734:	47b0      	blx	r6
	gpio_set_pin_pull_mode(PB11,
    f736:	2100      	movs	r1, #0
    f738:	202b      	movs	r0, #43	; 0x2b
    f73a:	47a8      	blx	r5
    f73c:	4923      	ldr	r1, [pc, #140]	; (f7cc <QSPI_INSTANCE_PORT_init+0xa8>)
    f73e:	202b      	movs	r0, #43	; 0x2b
    f740:	47a0      	blx	r4
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB11, PINMUX_PB11H_QSPI_CS);

	gpio_set_pin_direction(PA08,
    f742:	2102      	movs	r1, #2
    f744:	2008      	movs	r0, #8
    f746:	47b0      	blx	r6
    f748:	f44f 7380 	mov.w	r3, #256	; 0x100
    f74c:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA08,
    f74e:	2100      	movs	r1, #0
    f750:	2008      	movs	r0, #8
    f752:	47a8      	blx	r5
    f754:	491e      	ldr	r1, [pc, #120]	; (f7d0 <QSPI_INSTANCE_PORT_init+0xac>)
    f756:	2008      	movs	r0, #8
    f758:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(PA09,
    f75a:	2102      	movs	r1, #2
    f75c:	2009      	movs	r0, #9
    f75e:	47b0      	blx	r6
    f760:	f44f 7300 	mov.w	r3, #512	; 0x200
    f764:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA09,
    f766:	2100      	movs	r1, #0
    f768:	2009      	movs	r0, #9
    f76a:	47a8      	blx	r5
    f76c:	4919      	ldr	r1, [pc, #100]	; (f7d4 <QSPI_INSTANCE_PORT_init+0xb0>)
    f76e:	2009      	movs	r0, #9
    f770:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(PA10,
    f772:	2102      	movs	r1, #2
    f774:	200a      	movs	r0, #10
    f776:	47b0      	blx	r6
    f778:	f44f 6380 	mov.w	r3, #1024	; 0x400
    f77c:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA10,
    f77e:	2100      	movs	r1, #0
    f780:	200a      	movs	r0, #10
    f782:	47a8      	blx	r5
    f784:	4914      	ldr	r1, [pc, #80]	; (f7d8 <QSPI_INSTANCE_PORT_init+0xb4>)
    f786:	200a      	movs	r0, #10
    f788:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(PA11,
    f78a:	2102      	movs	r1, #2
    f78c:	200b      	movs	r0, #11
    f78e:	47b0      	blx	r6
    f790:	f44f 6300 	mov.w	r3, #2048	; 0x800
    f794:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA11,
    f796:	2100      	movs	r1, #0
    f798:	200b      	movs	r0, #11
    f79a:	47a8      	blx	r5
    f79c:	490f      	ldr	r1, [pc, #60]	; (f7dc <QSPI_INSTANCE_PORT_init+0xb8>)
    f79e:	200b      	movs	r0, #11
    f7a0:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(PB10, GPIO_DIRECTION_IN);
    f7a2:	2101      	movs	r1, #1
    f7a4:	202a      	movs	r0, #42	; 0x2a
    f7a6:	47b0      	blx	r6

	gpio_set_pin_pull_mode(PB10,
    f7a8:	2100      	movs	r1, #0
    f7aa:	202a      	movs	r0, #42	; 0x2a
    f7ac:	47a8      	blx	r5
    f7ae:	4623      	mov	r3, r4
    f7b0:	490b      	ldr	r1, [pc, #44]	; (f7e0 <QSPI_INSTANCE_PORT_init+0xbc>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
    f7b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f7b6:	202a      	movs	r0, #42	; 0x2a
    f7b8:	4718      	bx	r3
    f7ba:	bf00      	nop
    f7bc:	0000f509 	.word	0x0000f509
    f7c0:	0000f559 	.word	0x0000f559
    f7c4:	0000f49d 	.word	0x0000f49d
    f7c8:	41008000 	.word	0x41008000
    f7cc:	002b0007 	.word	0x002b0007
    f7d0:	00080007 	.word	0x00080007
    f7d4:	00090007 	.word	0x00090007
    f7d8:	000a0007 	.word	0x000a0007
    f7dc:	000b0007 	.word	0x000b0007
    f7e0:	002a0007 	.word	0x002a0007

0000f7e4 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    f7e4:	4b06      	ldr	r3, [pc, #24]	; (f800 <QSPI_INSTANCE_CLOCK_init+0x1c>)
    f7e6:	691a      	ldr	r2, [r3, #16]
    f7e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f7ec:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    f7ee:	691a      	ldr	r2, [r3, #16]
    f7f0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    f7f4:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    f7f6:	69da      	ldr	r2, [r3, #28]
    f7f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f7fc:	61da      	str	r2, [r3, #28]
void QSPI_INSTANCE_CLOCK_init(void)
{
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}
    f7fe:	4770      	bx	lr
    f800:	40000800 	.word	0x40000800

0000f804 <QSPI_INSTANCE_init>:

void QSPI_INSTANCE_init(void)
{
    f804:	b510      	push	{r4, lr}
	QSPI_INSTANCE_CLOCK_init();
    f806:	4b05      	ldr	r3, [pc, #20]	; (f81c <QSPI_INSTANCE_init+0x18>)
    f808:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
    f80a:	4b05      	ldr	r3, [pc, #20]	; (f820 <QSPI_INSTANCE_init+0x1c>)
    f80c:	4905      	ldr	r1, [pc, #20]	; (f824 <QSPI_INSTANCE_init+0x20>)
    f80e:	4806      	ldr	r0, [pc, #24]	; (f828 <QSPI_INSTANCE_init+0x24>)
    f810:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
}
    f812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	QSPI_INSTANCE_PORT_init();
    f816:	4b05      	ldr	r3, [pc, #20]	; (f82c <QSPI_INSTANCE_init+0x28>)
    f818:	4718      	bx	r3
    f81a:	bf00      	nop
    f81c:	0000f7e5 	.word	0x0000f7e5
    f820:	00011585 	.word	0x00011585
    f824:	42003400 	.word	0x42003400
    f828:	20014e24 	.word	0x20014e24
    f82c:	0000f725 	.word	0x0000f725

0000f830 <USART_EAST_CLOCK_init>:
    f830:	4b06      	ldr	r3, [pc, #24]	; (f84c <USART_EAST_CLOCK_init+0x1c>)
    f832:	2241      	movs	r2, #65	; 0x41
    f834:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    f838:	2242      	movs	r2, #66	; 0x42
    f83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    f83e:	4a04      	ldr	r2, [pc, #16]	; (f850 <USART_EAST_CLOCK_init+0x20>)
    f840:	6953      	ldr	r3, [r2, #20]
    f842:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f846:	6153      	str	r3, [r2, #20]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}
    f848:	4770      	bx	lr
    f84a:	bf00      	nop
    f84c:	40001c00 	.word	0x40001c00
    f850:	40000800 	.word	0x40000800

0000f854 <USART_EAST_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_EAST_PORT_init()
{
    f854:	b510      	push	{r4, lr}
    f856:	4c05      	ldr	r4, [pc, #20]	; (f86c <USART_EAST_PORT_init+0x18>)
    f858:	4905      	ldr	r1, [pc, #20]	; (f870 <USART_EAST_PORT_init+0x1c>)
    f85a:	2051      	movs	r0, #81	; 0x51
    f85c:	47a0      	blx	r4
    f85e:	4623      	mov	r3, r4
    f860:	4904      	ldr	r1, [pc, #16]	; (f874 <USART_EAST_PORT_init+0x20>)

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
}
    f862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f866:	2050      	movs	r0, #80	; 0x50
    f868:	4718      	bx	r3
    f86a:	bf00      	nop
    f86c:	0000f49d 	.word	0x0000f49d
    f870:	00510003 	.word	0x00510003
    f874:	00500003 	.word	0x00500003

0000f878 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
    f878:	b513      	push	{r0, r1, r4, lr}
	USART_EAST_CLOCK_init();
    f87a:	4b07      	ldr	r3, [pc, #28]	; (f898 <USART_EAST_init+0x20>)
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    f87c:	4c07      	ldr	r4, [pc, #28]	; (f89c <USART_EAST_init+0x24>)
	USART_EAST_CLOCK_init();
    f87e:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    f880:	2300      	movs	r3, #0
    f882:	9300      	str	r3, [sp, #0]
    f884:	4a06      	ldr	r2, [pc, #24]	; (f8a0 <USART_EAST_init+0x28>)
    f886:	4907      	ldr	r1, [pc, #28]	; (f8a4 <USART_EAST_init+0x2c>)
    f888:	4807      	ldr	r0, [pc, #28]	; (f8a8 <USART_EAST_init+0x30>)
    f88a:	2310      	movs	r3, #16
    f88c:	47a0      	blx	r4
	USART_EAST_PORT_init();
    f88e:	4b07      	ldr	r3, [pc, #28]	; (f8ac <USART_EAST_init+0x34>)
}
    f890:	b002      	add	sp, #8
    f892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_EAST_PORT_init();
    f896:	4718      	bx	r3
    f898:	0000f831 	.word	0x0000f831
    f89c:	0001018d 	.word	0x0001018d
    f8a0:	20001042 	.word	0x20001042
    f8a4:	40003000 	.word	0x40003000
    f8a8:	20014c10 	.word	0x20014c10
    f8ac:	0000f855 	.word	0x0000f855

0000f8b0 <USART_NORTH_CLOCK_init>:
    f8b0:	4b06      	ldr	r3, [pc, #24]	; (f8cc <USART_NORTH_CLOCK_init+0x1c>)
    f8b2:	2241      	movs	r2, #65	; 0x41
    f8b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    f8b8:	2242      	movs	r2, #66	; 0x42
    f8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    f8be:	4a04      	ldr	r2, [pc, #16]	; (f8d0 <USART_NORTH_CLOCK_init+0x20>)
    f8c0:	6953      	ldr	r3, [r2, #20]
    f8c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f8c6:	6153      	str	r3, [r2, #20]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}
    f8c8:	4770      	bx	lr
    f8ca:	bf00      	nop
    f8cc:	40001c00 	.word	0x40001c00
    f8d0:	40000800 	.word	0x40000800

0000f8d4 <USART_NORTH_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_NORTH_PORT_init()
{
    f8d4:	b510      	push	{r4, lr}
    f8d6:	4c05      	ldr	r4, [pc, #20]	; (f8ec <USART_NORTH_PORT_init+0x18>)
    f8d8:	4905      	ldr	r1, [pc, #20]	; (f8f0 <USART_NORTH_PORT_init+0x1c>)
    f8da:	205b      	movs	r0, #91	; 0x5b
    f8dc:	47a0      	blx	r4
    f8de:	4623      	mov	r3, r4
    f8e0:	4904      	ldr	r1, [pc, #16]	; (f8f4 <USART_NORTH_PORT_init+0x20>)

	gpio_set_pin_function(PC27, PINMUX_PC27C_SERCOM1_PAD0);

	gpio_set_pin_function(PC28, PINMUX_PC28C_SERCOM1_PAD1);
}
    f8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8e6:	205c      	movs	r0, #92	; 0x5c
    f8e8:	4718      	bx	r3
    f8ea:	bf00      	nop
    f8ec:	0000f49d 	.word	0x0000f49d
    f8f0:	005b0002 	.word	0x005b0002
    f8f4:	005c0002 	.word	0x005c0002

0000f8f8 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
    f8f8:	b513      	push	{r0, r1, r4, lr}
	USART_NORTH_CLOCK_init();
    f8fa:	4b07      	ldr	r3, [pc, #28]	; (f918 <USART_NORTH_init+0x20>)
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    f8fc:	4c07      	ldr	r4, [pc, #28]	; (f91c <USART_NORTH_init+0x24>)
	USART_NORTH_CLOCK_init();
    f8fe:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    f900:	2300      	movs	r3, #0
    f902:	9300      	str	r3, [sp, #0]
    f904:	4a06      	ldr	r2, [pc, #24]	; (f920 <USART_NORTH_init+0x28>)
    f906:	4907      	ldr	r1, [pc, #28]	; (f924 <USART_NORTH_init+0x2c>)
    f908:	4807      	ldr	r0, [pc, #28]	; (f928 <USART_NORTH_init+0x30>)
    f90a:	2310      	movs	r3, #16
    f90c:	47a0      	blx	r4
	USART_NORTH_PORT_init();
    f90e:	4b07      	ldr	r3, [pc, #28]	; (f92c <USART_NORTH_init+0x34>)
}
    f910:	b002      	add	sp, #8
    f912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_NORTH_PORT_init();
    f916:	4718      	bx	r3
    f918:	0000f8b1 	.word	0x0000f8b1
    f91c:	0001018d 	.word	0x0001018d
    f920:	20001052 	.word	0x20001052
    f924:	40003400 	.word	0x40003400
    f928:	20014c64 	.word	0x20014c64
    f92c:	0000f8d5 	.word	0x0000f8d5

0000f930 <GRID_AUX_PORT_init>:

void GRID_AUX_PORT_init(void)
{
    f930:	b510      	push	{r4, lr}
    f932:	4c05      	ldr	r4, [pc, #20]	; (f948 <GRID_AUX_PORT_init+0x18>)
    f934:	4905      	ldr	r1, [pc, #20]	; (f94c <GRID_AUX_PORT_init+0x1c>)
    f936:	2039      	movs	r0, #57	; 0x39
    f938:	47a0      	blx	r4
    f93a:	4623      	mov	r3, r4
    f93c:	4904      	ldr	r1, [pc, #16]	; (f950 <GRID_AUX_PORT_init+0x20>)

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
}
    f93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f942:	2038      	movs	r0, #56	; 0x38
    f944:	4718      	bx	r3
    f946:	bf00      	nop
    f948:	0000f49d 	.word	0x0000f49d
    f94c:	00390003 	.word	0x00390003
    f950:	00380003 	.word	0x00380003

0000f954 <GRID_AUX_CLOCK_init>:
    f954:	4b06      	ldr	r3, [pc, #24]	; (f970 <GRID_AUX_CLOCK_init+0x1c>)
    f956:	2241      	movs	r2, #65	; 0x41
    f958:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    f95c:	2242      	movs	r2, #66	; 0x42
    f95e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    f962:	4a04      	ldr	r2, [pc, #16]	; (f974 <GRID_AUX_CLOCK_init+0x20>)
    f964:	6993      	ldr	r3, [r2, #24]
    f966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f96a:	6193      	str	r3, [r2, #24]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}
    f96c:	4770      	bx	lr
    f96e:	bf00      	nop
    f970:	40001c00 	.word	0x40001c00
    f974:	40000800 	.word	0x40000800

0000f978 <GRID_AUX_init>:

void GRID_AUX_init(void)
{
    f978:	b510      	push	{r4, lr}
	GRID_AUX_CLOCK_init();
    f97a:	4b05      	ldr	r3, [pc, #20]	; (f990 <GRID_AUX_init+0x18>)
    f97c:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
    f97e:	4b05      	ldr	r3, [pc, #20]	; (f994 <GRID_AUX_init+0x1c>)
    f980:	4905      	ldr	r1, [pc, #20]	; (f998 <GRID_AUX_init+0x20>)
    f982:	4806      	ldr	r0, [pc, #24]	; (f99c <GRID_AUX_init+0x24>)
    f984:	2200      	movs	r2, #0
    f986:	4798      	blx	r3
	GRID_AUX_PORT_init();
}
    f988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GRID_AUX_PORT_init();
    f98c:	4b04      	ldr	r3, [pc, #16]	; (f9a0 <GRID_AUX_init+0x28>)
    f98e:	4718      	bx	r3
    f990:	0000f955 	.word	0x0000f955
    f994:	0000deb1 	.word	0x0000deb1
    f998:	41012000 	.word	0x41012000
    f99c:	20014bd0 	.word	0x20014bd0
    f9a0:	0000f931 	.word	0x0000f931

0000f9a4 <UI_SPI_PORT_init>:

void UI_SPI_PORT_init(void)
{
    f9a4:	b570      	push	{r4, r5, r6, lr}
    f9a6:	4e12      	ldr	r6, [pc, #72]	; (f9f0 <UI_SPI_PORT_init+0x4c>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB20, GPIO_DIRECTION_OUT);
    f9a8:	4d12      	ldr	r5, [pc, #72]	; (f9f4 <UI_SPI_PORT_init+0x50>)
    f9aa:	4c13      	ldr	r4, [pc, #76]	; (f9f8 <UI_SPI_PORT_init+0x54>)
    f9ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    f9b0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
    f9b4:	2102      	movs	r1, #2
    f9b6:	2034      	movs	r0, #52	; 0x34
    f9b8:	47a8      	blx	r5
    f9ba:	4910      	ldr	r1, [pc, #64]	; (f9fc <UI_SPI_PORT_init+0x58>)
    f9bc:	2034      	movs	r0, #52	; 0x34
    f9be:	47a0      	blx	r4
    f9c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    f9c4:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB21, GPIO_DIRECTION_OUT);
    f9c8:	2102      	movs	r1, #2
    f9ca:	2035      	movs	r0, #53	; 0x35
    f9cc:	47a8      	blx	r5
    f9ce:	490c      	ldr	r1, [pc, #48]	; (fa00 <UI_SPI_PORT_init+0x5c>)
    f9d0:	2035      	movs	r0, #53	; 0x35
    f9d2:	47a0      	blx	r4

	gpio_set_pin_function(PB21, PINMUX_PB21C_SERCOM3_PAD1);

	// Set pin direction to input
	gpio_set_pin_direction(PA20, GPIO_DIRECTION_IN);
    f9d4:	2101      	movs	r1, #1
    f9d6:	2014      	movs	r0, #20
    f9d8:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PA20,
    f9da:	4b0a      	ldr	r3, [pc, #40]	; (fa04 <UI_SPI_PORT_init+0x60>)
    f9dc:	2100      	movs	r1, #0
    f9de:	2014      	movs	r0, #20
    f9e0:	4798      	blx	r3
    f9e2:	4623      	mov	r3, r4
    f9e4:	4908      	ldr	r1, [pc, #32]	; (fa08 <UI_SPI_PORT_init+0x64>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA20, PINMUX_PA20D_SERCOM3_PAD2);
}
    f9e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f9ea:	2014      	movs	r0, #20
    f9ec:	4718      	bx	r3
    f9ee:	bf00      	nop
    f9f0:	41008000 	.word	0x41008000
    f9f4:	0000f509 	.word	0x0000f509
    f9f8:	0000f49d 	.word	0x0000f49d
    f9fc:	00340002 	.word	0x00340002
    fa00:	00350002 	.word	0x00350002
    fa04:	0000f559 	.word	0x0000f559
    fa08:	00140003 	.word	0x00140003

0000fa0c <UI_SPI_CLOCK_init>:
    fa0c:	4b06      	ldr	r3, [pc, #24]	; (fa28 <UI_SPI_CLOCK_init+0x1c>)
    fa0e:	2241      	movs	r2, #65	; 0x41
    fa10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    fa14:	2243      	movs	r2, #67	; 0x43
    fa16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    fa1a:	4a04      	ldr	r2, [pc, #16]	; (fa2c <UI_SPI_CLOCK_init+0x20>)
    fa1c:	6993      	ldr	r3, [r2, #24]
    fa1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    fa22:	6193      	str	r3, [r2, #24]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}
    fa24:	4770      	bx	lr
    fa26:	bf00      	nop
    fa28:	40001c00 	.word	0x40001c00
    fa2c:	40000800 	.word	0x40000800

0000fa30 <UI_SPI_init>:

void UI_SPI_init(void)
{
    fa30:	b510      	push	{r4, lr}
	UI_SPI_CLOCK_init();
    fa32:	4b05      	ldr	r3, [pc, #20]	; (fa48 <UI_SPI_init+0x18>)
    fa34:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
    fa36:	4b05      	ldr	r3, [pc, #20]	; (fa4c <UI_SPI_init+0x1c>)
    fa38:	4905      	ldr	r1, [pc, #20]	; (fa50 <UI_SPI_init+0x20>)
    fa3a:	4806      	ldr	r0, [pc, #24]	; (fa54 <UI_SPI_init+0x24>)
    fa3c:	4798      	blx	r3
	UI_SPI_PORT_init();
}
    fa3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	UI_SPI_PORT_init();
    fa42:	4b05      	ldr	r3, [pc, #20]	; (fa58 <UI_SPI_init+0x28>)
    fa44:	4718      	bx	r3
    fa46:	bf00      	nop
    fa48:	0000fa0d 	.word	0x0000fa0d
    fa4c:	0000e365 	.word	0x0000e365
    fa50:	41014000 	.word	0x41014000
    fa54:	20014ad0 	.word	0x20014ad0
    fa58:	0000f9a5 	.word	0x0000f9a5

0000fa5c <USART_WEST_CLOCK_init>:
    fa5c:	4b06      	ldr	r3, [pc, #24]	; (fa78 <USART_WEST_CLOCK_init+0x1c>)
    fa5e:	2241      	movs	r2, #65	; 0x41
    fa60:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    fa64:	2242      	movs	r2, #66	; 0x42
    fa66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    fa6a:	4a04      	ldr	r2, [pc, #16]	; (fa7c <USART_WEST_CLOCK_init+0x20>)
    fa6c:	6a13      	ldr	r3, [r2, #32]
    fa6e:	f043 0301 	orr.w	r3, r3, #1
    fa72:	6213      	str	r3, [r2, #32]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}
    fa74:	4770      	bx	lr
    fa76:	bf00      	nop
    fa78:	40001c00 	.word	0x40001c00
    fa7c:	40000800 	.word	0x40000800

0000fa80 <USART_WEST_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_WEST_PORT_init()
{
    fa80:	b510      	push	{r4, lr}
    fa82:	4c05      	ldr	r4, [pc, #20]	; (fa98 <USART_WEST_PORT_init+0x18>)
    fa84:	4905      	ldr	r1, [pc, #20]	; (fa9c <USART_WEST_PORT_init+0x1c>)
    fa86:	2028      	movs	r0, #40	; 0x28
    fa88:	47a0      	blx	r4
    fa8a:	4623      	mov	r3, r4
    fa8c:	4904      	ldr	r1, [pc, #16]	; (faa0 <USART_WEST_PORT_init+0x20>)

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
    fa8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa92:	2029      	movs	r0, #41	; 0x29
    fa94:	4718      	bx	r3
    fa96:	bf00      	nop
    fa98:	0000f49d 	.word	0x0000f49d
    fa9c:	00280003 	.word	0x00280003
    faa0:	00290003 	.word	0x00290003

0000faa4 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
    faa4:	b513      	push	{r0, r1, r4, lr}
	USART_WEST_CLOCK_init();
    faa6:	4b08      	ldr	r3, [pc, #32]	; (fac8 <USART_WEST_init+0x24>)
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    faa8:	4c08      	ldr	r4, [pc, #32]	; (facc <USART_WEST_init+0x28>)
	USART_WEST_CLOCK_init();
    faaa:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    faac:	2300      	movs	r3, #0
    faae:	9300      	str	r3, [sp, #0]
    fab0:	4a07      	ldr	r2, [pc, #28]	; (fad0 <USART_WEST_init+0x2c>)
    fab2:	4808      	ldr	r0, [pc, #32]	; (fad4 <USART_WEST_init+0x30>)
    fab4:	2310      	movs	r3, #16
    fab6:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    faba:	47a0      	blx	r4
	USART_WEST_PORT_init();
    fabc:	4b06      	ldr	r3, [pc, #24]	; (fad8 <USART_WEST_init+0x34>)
}
    fabe:	b002      	add	sp, #8
    fac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_WEST_PORT_init();
    fac4:	4718      	bx	r3
    fac6:	bf00      	nop
    fac8:	0000fa5d 	.word	0x0000fa5d
    facc:	0001018d 	.word	0x0001018d
    fad0:	20001062 	.word	0x20001062
    fad4:	20014d18 	.word	0x20014d18
    fad8:	0000fa81 	.word	0x0000fa81

0000fadc <SYS_I2C_PORT_init>:

void SYS_I2C_PORT_init(void)
{
    fadc:	b570      	push	{r4, r5, r6, lr}

	gpio_set_pin_pull_mode(PA23,
    fade:	2100      	movs	r1, #0
    fae0:	4d07      	ldr	r5, [pc, #28]	; (fb00 <SYS_I2C_PORT_init+0x24>)
    fae2:	4c08      	ldr	r4, [pc, #32]	; (fb04 <SYS_I2C_PORT_init+0x28>)
    fae4:	2017      	movs	r0, #23
    fae6:	47a8      	blx	r5
    fae8:	4907      	ldr	r1, [pc, #28]	; (fb08 <SYS_I2C_PORT_init+0x2c>)
    faea:	2017      	movs	r0, #23
    faec:	47a0      	blx	r4
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);

	gpio_set_pin_pull_mode(PA22,
    faee:	2100      	movs	r1, #0
    faf0:	2016      	movs	r0, #22
    faf2:	47a8      	blx	r5
    faf4:	4623      	mov	r3, r4
    faf6:	4905      	ldr	r1, [pc, #20]	; (fb0c <SYS_I2C_PORT_init+0x30>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
}
    faf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fafc:	2016      	movs	r0, #22
    fafe:	4718      	bx	r3
    fb00:	0000f559 	.word	0x0000f559
    fb04:	0000f49d 	.word	0x0000f49d
    fb08:	00170003 	.word	0x00170003
    fb0c:	00160003 	.word	0x00160003

0000fb10 <SYS_I2C_CLOCK_init>:
    fb10:	4b06      	ldr	r3, [pc, #24]	; (fb2c <SYS_I2C_CLOCK_init+0x1c>)
    fb12:	2241      	movs	r2, #65	; 0x41
    fb14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    fb18:	2242      	movs	r2, #66	; 0x42
    fb1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    fb1e:	4a04      	ldr	r2, [pc, #16]	; (fb30 <SYS_I2C_CLOCK_init+0x20>)
    fb20:	6a13      	ldr	r3, [r2, #32]
    fb22:	f043 0302 	orr.w	r3, r3, #2
    fb26:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}
    fb28:	4770      	bx	lr
    fb2a:	bf00      	nop
    fb2c:	40001c00 	.word	0x40001c00
    fb30:	40000800 	.word	0x40000800

0000fb34 <SYS_I2C_init>:

void SYS_I2C_init(void)
{
    fb34:	b510      	push	{r4, lr}
	SYS_I2C_CLOCK_init();
    fb36:	4b05      	ldr	r3, [pc, #20]	; (fb4c <SYS_I2C_init+0x18>)
    fb38:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
    fb3a:	4b05      	ldr	r3, [pc, #20]	; (fb50 <SYS_I2C_init+0x1c>)
    fb3c:	4905      	ldr	r1, [pc, #20]	; (fb54 <SYS_I2C_init+0x20>)
    fb3e:	4806      	ldr	r0, [pc, #24]	; (fb58 <SYS_I2C_init+0x24>)
    fb40:	4798      	blx	r3
	SYS_I2C_PORT_init();
}
    fb42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SYS_I2C_PORT_init();
    fb46:	4b05      	ldr	r3, [pc, #20]	; (fb5c <SYS_I2C_init+0x28>)
    fb48:	4718      	bx	r3
    fb4a:	bf00      	nop
    fb4c:	0000fb11 	.word	0x0000fb11
    fb50:	0000b4b9 	.word	0x0000b4b9
    fb54:	43000400 	.word	0x43000400
    fb58:	20014b90 	.word	0x20014b90
    fb5c:	0000fadd 	.word	0x0000fadd

0000fb60 <USART_SOUTH_CLOCK_init>:
    fb60:	4b06      	ldr	r3, [pc, #24]	; (fb7c <USART_SOUTH_CLOCK_init+0x1c>)
    fb62:	2241      	movs	r2, #65	; 0x41
    fb64:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    fb68:	2242      	movs	r2, #66	; 0x42
    fb6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    fb6e:	4a04      	ldr	r2, [pc, #16]	; (fb80 <USART_SOUTH_CLOCK_init+0x20>)
    fb70:	6a13      	ldr	r3, [r2, #32]
    fb72:	f043 0304 	orr.w	r3, r3, #4
    fb76:	6213      	str	r3, [r2, #32]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}
    fb78:	4770      	bx	lr
    fb7a:	bf00      	nop
    fb7c:	40001c00 	.word	0x40001c00
    fb80:	40000800 	.word	0x40000800

0000fb84 <USART_SOUTH_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_SOUTH_PORT_init()
{
    fb84:	b510      	push	{r4, lr}
    fb86:	4c05      	ldr	r4, [pc, #20]	; (fb9c <USART_SOUTH_PORT_init+0x18>)
    fb88:	4905      	ldr	r1, [pc, #20]	; (fba0 <USART_SOUTH_PORT_init+0x1c>)
    fb8a:	204d      	movs	r0, #77	; 0x4d
    fb8c:	47a0      	blx	r4
    fb8e:	4623      	mov	r3, r4
    fb90:	4904      	ldr	r1, [pc, #16]	; (fba4 <USART_SOUTH_PORT_init+0x20>)

	gpio_set_pin_function(PC13, PINMUX_PC13D_SERCOM6_PAD0);

	gpio_set_pin_function(PC12, PINMUX_PC12D_SERCOM6_PAD1);
}
    fb92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb96:	204c      	movs	r0, #76	; 0x4c
    fb98:	4718      	bx	r3
    fb9a:	bf00      	nop
    fb9c:	0000f49d 	.word	0x0000f49d
    fba0:	004d0003 	.word	0x004d0003
    fba4:	004c0003 	.word	0x004c0003

0000fba8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
    fba8:	b513      	push	{r0, r1, r4, lr}
	USART_SOUTH_CLOCK_init();
    fbaa:	4b07      	ldr	r3, [pc, #28]	; (fbc8 <USART_SOUTH_init+0x20>)
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    fbac:	4c07      	ldr	r4, [pc, #28]	; (fbcc <USART_SOUTH_init+0x24>)
	USART_SOUTH_CLOCK_init();
    fbae:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    fbb0:	2300      	movs	r3, #0
    fbb2:	9300      	str	r3, [sp, #0]
    fbb4:	4a06      	ldr	r2, [pc, #24]	; (fbd0 <USART_SOUTH_init+0x28>)
    fbb6:	4907      	ldr	r1, [pc, #28]	; (fbd4 <USART_SOUTH_init+0x2c>)
    fbb8:	4807      	ldr	r0, [pc, #28]	; (fbd8 <USART_SOUTH_init+0x30>)
    fbba:	2310      	movs	r3, #16
    fbbc:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
    fbbe:	4b07      	ldr	r3, [pc, #28]	; (fbdc <USART_SOUTH_init+0x34>)
}
    fbc0:	b002      	add	sp, #8
    fbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_SOUTH_PORT_init();
    fbc6:	4718      	bx	r3
    fbc8:	0000fb61 	.word	0x0000fb61
    fbcc:	0001018d 	.word	0x0001018d
    fbd0:	20001072 	.word	0x20001072
    fbd4:	43000800 	.word	0x43000800
    fbd8:	20014d68 	.word	0x20014d68
    fbdc:	0000fb85 	.word	0x0000fb85

0000fbe0 <GRID_LED_PORT_init>:

void GRID_LED_PORT_init(void)
{
    fbe0:	b570      	push	{r4, r5, r6, lr}
    fbe2:	4e12      	ldr	r6, [pc, #72]	; (fc2c <GRID_LED_PORT_init+0x4c>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB30, GPIO_DIRECTION_OUT);
    fbe4:	4d12      	ldr	r5, [pc, #72]	; (fc30 <GRID_LED_PORT_init+0x50>)
    fbe6:	4c13      	ldr	r4, [pc, #76]	; (fc34 <GRID_LED_PORT_init+0x54>)
    fbe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fbec:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
    fbf0:	2102      	movs	r1, #2
    fbf2:	203e      	movs	r0, #62	; 0x3e
    fbf4:	47a8      	blx	r5
    fbf6:	4910      	ldr	r1, [pc, #64]	; (fc38 <GRID_LED_PORT_init+0x58>)
    fbf8:	203e      	movs	r0, #62	; 0x3e
    fbfa:	47a0      	blx	r4
    fbfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    fc00:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB31, GPIO_DIRECTION_OUT);
    fc04:	2102      	movs	r1, #2
    fc06:	203f      	movs	r0, #63	; 0x3f
    fc08:	47a8      	blx	r5
    fc0a:	490c      	ldr	r1, [pc, #48]	; (fc3c <GRID_LED_PORT_init+0x5c>)
    fc0c:	203f      	movs	r0, #63	; 0x3f
    fc0e:	47a0      	blx	r4

	gpio_set_pin_function(PB31, PINMUX_PB31C_SERCOM7_PAD1);

	// Set pin direction to input
	gpio_set_pin_direction(PA30, GPIO_DIRECTION_IN);
    fc10:	2101      	movs	r1, #1
    fc12:	201e      	movs	r0, #30
    fc14:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PA30,
    fc16:	4b0a      	ldr	r3, [pc, #40]	; (fc40 <GRID_LED_PORT_init+0x60>)
    fc18:	2100      	movs	r1, #0
    fc1a:	201e      	movs	r0, #30
    fc1c:	4798      	blx	r3
    fc1e:	4623      	mov	r3, r4
    fc20:	4908      	ldr	r1, [pc, #32]	; (fc44 <GRID_LED_PORT_init+0x64>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA30, PINMUX_PA30C_SERCOM7_PAD2);
}
    fc22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fc26:	201e      	movs	r0, #30
    fc28:	4718      	bx	r3
    fc2a:	bf00      	nop
    fc2c:	41008000 	.word	0x41008000
    fc30:	0000f509 	.word	0x0000f509
    fc34:	0000f49d 	.word	0x0000f49d
    fc38:	003e0002 	.word	0x003e0002
    fc3c:	003f0002 	.word	0x003f0002
    fc40:	0000f559 	.word	0x0000f559
    fc44:	001e0002 	.word	0x001e0002

0000fc48 <GRID_LED_CLOCK_init>:
    fc48:	4b06      	ldr	r3, [pc, #24]	; (fc64 <GRID_LED_CLOCK_init+0x1c>)
    fc4a:	2241      	movs	r2, #65	; 0x41
    fc4c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    fc50:	2242      	movs	r2, #66	; 0x42
    fc52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    fc56:	4a04      	ldr	r2, [pc, #16]	; (fc68 <GRID_LED_CLOCK_init+0x20>)
    fc58:	6a13      	ldr	r3, [r2, #32]
    fc5a:	f043 0308 	orr.w	r3, r3, #8
    fc5e:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}
    fc60:	4770      	bx	lr
    fc62:	bf00      	nop
    fc64:	40001c00 	.word	0x40001c00
    fc68:	40000800 	.word	0x40000800

0000fc6c <GRID_LED_init>:

void GRID_LED_init(void)
{
    fc6c:	b510      	push	{r4, lr}
	GRID_LED_CLOCK_init();
    fc6e:	4b05      	ldr	r3, [pc, #20]	; (fc84 <GRID_LED_init+0x18>)
    fc70:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
    fc72:	4b05      	ldr	r3, [pc, #20]	; (fc88 <GRID_LED_init+0x1c>)
    fc74:	4905      	ldr	r1, [pc, #20]	; (fc8c <GRID_LED_init+0x20>)
    fc76:	4806      	ldr	r0, [pc, #24]	; (fc90 <GRID_LED_init+0x24>)
    fc78:	4798      	blx	r3
	GRID_LED_PORT_init();
}
    fc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GRID_LED_PORT_init();
    fc7e:	4b05      	ldr	r3, [pc, #20]	; (fc94 <GRID_LED_init+0x28>)
    fc80:	4718      	bx	r3
    fc82:	bf00      	nop
    fc84:	0000fc49 	.word	0x0000fc49
    fc88:	0000b695 	.word	0x0000b695
    fc8c:	43000c00 	.word	0x43000c00
    fc90:	20014cb4 	.word	0x20014cb4
    fc94:	0000fbe1 	.word	0x0000fbe1

0000fc98 <delay_driver_init>:

void delay_driver_init(void)
{
	delay_init(SysTick);
    fc98:	4801      	ldr	r0, [pc, #4]	; (fca0 <delay_driver_init+0x8>)
    fc9a:	4b02      	ldr	r3, [pc, #8]	; (fca4 <delay_driver_init+0xc>)
    fc9c:	4718      	bx	r3
    fc9e:	bf00      	nop
    fca0:	e000e010 	.word	0xe000e010
    fca4:	0000d021 	.word	0x0000d021

0000fca8 <RAND_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TRNG;
    fca8:	4a02      	ldr	r2, [pc, #8]	; (fcb4 <RAND_0_CLOCK_init+0xc>)
    fcaa:	69d3      	ldr	r3, [r2, #28]
    fcac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    fcb0:	61d3      	str	r3, [r2, #28]
}

void RAND_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TRNG_bit(MCLK);
}
    fcb2:	4770      	bx	lr
    fcb4:	40000800 	.word	0x40000800

0000fcb8 <RAND_0_init>:

void RAND_0_init(void)
{
    fcb8:	b510      	push	{r4, lr}
	RAND_0_CLOCK_init();
    fcba:	4b04      	ldr	r3, [pc, #16]	; (fccc <RAND_0_init+0x14>)
    fcbc:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
}
    fcbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rand_sync_init(&RAND_0, TRNG);
    fcc2:	4903      	ldr	r1, [pc, #12]	; (fcd0 <RAND_0_init+0x18>)
    fcc4:	4803      	ldr	r0, [pc, #12]	; (fcd4 <RAND_0_init+0x1c>)
    fcc6:	4b04      	ldr	r3, [pc, #16]	; (fcd8 <RAND_0_init+0x20>)
    fcc8:	4718      	bx	r3
    fcca:	bf00      	nop
    fccc:	0000fca9 	.word	0x0000fca9
    fcd0:	42002800 	.word	0x42002800
    fcd4:	20014bdc 	.word	0x20014bdc
    fcd8:	0000da29 	.word	0x0000da29

0000fcdc <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    fcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	gpio_set_pin_direction(PA24,
    fce0:	2102      	movs	r1, #2
    fce2:	4f0f      	ldr	r7, [pc, #60]	; (fd20 <USB_DEVICE_INSTANCE_PORT_init+0x44>)
    fce4:	4e0f      	ldr	r6, [pc, #60]	; (fd24 <USB_DEVICE_INSTANCE_PORT_init+0x48>)
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    fce6:	4d10      	ldr	r5, [pc, #64]	; (fd28 <USB_DEVICE_INSTANCE_PORT_init+0x4c>)
    fce8:	4c10      	ldr	r4, [pc, #64]	; (fd2c <USB_DEVICE_INSTANCE_PORT_init+0x50>)
	gpio_set_pin_direction(PA24,
    fcea:	2018      	movs	r0, #24
    fcec:	47b8      	blx	r7
    fcee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    fcf2:	6173      	str	r3, [r6, #20]
	gpio_set_pin_pull_mode(PA24,
    fcf4:	2100      	movs	r1, #0
    fcf6:	2018      	movs	r0, #24
    fcf8:	47a8      	blx	r5
    fcfa:	490d      	ldr	r1, [pc, #52]	; (fd30 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    fcfc:	2018      	movs	r0, #24
    fcfe:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    fd00:	2102      	movs	r1, #2
    fd02:	2019      	movs	r0, #25
    fd04:	47b8      	blx	r7
    fd06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    fd0a:	6173      	str	r3, [r6, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    fd0c:	2100      	movs	r1, #0
    fd0e:	2019      	movs	r0, #25
    fd10:	47a8      	blx	r5
    fd12:	4623      	mov	r3, r4
    fd14:	4907      	ldr	r1, [pc, #28]	; (fd34 <USB_DEVICE_INSTANCE_PORT_init+0x58>)
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    fd16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fd1a:	2019      	movs	r0, #25
    fd1c:	4718      	bx	r3
    fd1e:	bf00      	nop
    fd20:	0000f509 	.word	0x0000f509
    fd24:	41008000 	.word	0x41008000
    fd28:	0000f559 	.word	0x0000f559
    fd2c:	0000f49d 	.word	0x0000f49d
    fd30:	00180007 	.word	0x00180007
    fd34:	00190007 	.word	0x00190007

0000fd38 <USB_DEVICE_INSTANCE_CLOCK_init>:
    fd38:	4b07      	ldr	r3, [pc, #28]	; (fd58 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    fd3a:	2241      	movs	r2, #65	; 0x41
    fd3c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    fd40:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    fd44:	691a      	ldr	r2, [r3, #16]
    fd46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    fd4a:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    fd4c:	699a      	ldr	r2, [r3, #24]
    fd4e:	f042 0201 	orr.w	r2, r2, #1
    fd52:	619a      	str	r2, [r3, #24]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}
    fd54:	4770      	bx	lr
    fd56:	bf00      	nop
    fd58:	40001c00 	.word	0x40001c00

0000fd5c <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    fd5c:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    fd5e:	4b04      	ldr	r3, [pc, #16]	; (fd70 <USB_DEVICE_INSTANCE_init+0x14>)
    fd60:	4798      	blx	r3
	usb_d_init();
    fd62:	4b04      	ldr	r3, [pc, #16]	; (fd74 <USB_DEVICE_INSTANCE_init+0x18>)
    fd64:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
}
    fd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USB_DEVICE_INSTANCE_PORT_init();
    fd6a:	4b03      	ldr	r3, [pc, #12]	; (fd78 <USB_DEVICE_INSTANCE_init+0x1c>)
    fd6c:	4718      	bx	r3
    fd6e:	bf00      	nop
    fd70:	0000fd39 	.word	0x0000fd39
    fd74:	0000e759 	.word	0x0000e759
    fd78:	0000fcdd 	.word	0x0000fcdd

0000fd7c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    fd7c:	4a02      	ldr	r2, [pc, #8]	; (fd88 <WDT_0_CLOCK_init+0xc>)
    fd7e:	6953      	ldr	r3, [r2, #20]
    fd80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fd84:	6153      	str	r3, [r2, #20]

void WDT_0_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}
    fd86:	4770      	bx	lr
    fd88:	40000800 	.word	0x40000800

0000fd8c <WDT_0_init>:

void WDT_0_init(void)
{
    fd8c:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
    fd8e:	4b07      	ldr	r3, [pc, #28]	; (fdac <WDT_0_init+0x20>)
    fd90:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
    fd92:	4b07      	ldr	r3, [pc, #28]	; (fdb0 <WDT_0_init+0x24>)
    fd94:	4907      	ldr	r1, [pc, #28]	; (fdb4 <WDT_0_init+0x28>)
    fd96:	2001      	movs	r0, #1
    fd98:	2248      	movs	r2, #72	; 0x48
    fd9a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    fd9c:	4806      	ldr	r0, [pc, #24]	; (fdb8 <WDT_0_init+0x2c>)
    fd9e:	4b07      	ldr	r3, [pc, #28]	; (fdbc <WDT_0_init+0x30>)
    fda0:	6003      	str	r3, [r0, #0]
	wdt_init(&WDT_0, WDT);
}
    fda2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	return _wdt_init(&wdt->dev);
    fda6:	4b06      	ldr	r3, [pc, #24]	; (fdc0 <WDT_0_init+0x34>)
    fda8:	4718      	bx	r3
    fdaa:	bf00      	nop
    fdac:	0000fd7d 	.word	0x0000fd7d
    fdb0:	0000d305 	.word	0x0000d305
    fdb4:	00015d8b 	.word	0x00015d8b
    fdb8:	20014c60 	.word	0x20014c60
    fdbc:	40002000 	.word	0x40002000
    fdc0:	0000b525 	.word	0x0000b525

0000fdc4 <system_init>:

void system_init(void)
{
    fdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    fdc8:	4b7c      	ldr	r3, [pc, #496]	; (ffbc <system_init+0x1f8>)
    fdca:	4c7d      	ldr	r4, [pc, #500]	; (ffc0 <system_init+0x1fc>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    fdcc:	4d7d      	ldr	r5, [pc, #500]	; (ffc4 <system_init+0x200>)
	// GPIO on PA21

	// Set pin direction to input
	gpio_set_pin_direction(PIN_UI_SPI_CS0, GPIO_DIRECTION_IN);

	gpio_set_pin_pull_mode(PIN_UI_SPI_CS0,
    fdce:	4e7e      	ldr	r6, [pc, #504]	; (ffc8 <system_init+0x204>)
    fdd0:	4798      	blx	r3
    fdd2:	2320      	movs	r3, #32
    fdd4:	6163      	str	r3, [r4, #20]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    fdd6:	2102      	movs	r1, #2
    fdd8:	2005      	movs	r0, #5
    fdda:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fddc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    fde0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fde4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	gpio_set_pin_direction(PIN_UI_SPI_CS0, GPIO_DIRECTION_IN);
    fde8:	2101      	movs	r1, #1
    fdea:	2015      	movs	r0, #21
    fdec:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PIN_UI_SPI_CS0,
    fdee:	2100      	movs	r1, #0
    fdf0:	2015      	movs	r0, #21
    fdf2:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fdf4:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
    fdf8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fdfc:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
	gpio_set_pin_function(PIN_UI_SPI_CS0, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(PIN_GRID_SYNC_2, GPIO_DIRECTION_IN);
    fe00:	2101      	movs	r1, #1
    fe02:	2027      	movs	r0, #39	; 0x27
    fe04:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PIN_GRID_SYNC_2,
    fe06:	2100      	movs	r1, #0
    fe08:	2027      	movs	r0, #39	; 0x27
    fe0a:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fe0c:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    fe10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fe14:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fe18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    fe1c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(HWCFG_SHIFT, GPIO_DIRECTION_OUT);
    fe20:	2102      	movs	r1, #2
    fe22:	202d      	movs	r0, #45	; 0x2d
    fe24:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fe26:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fe2a:	f44f 4780 	mov.w	r7, #16384	; 0x4000
	tmp &= ~PORT_PINCFG_PMUXEN;
    fe2e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fe32:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(HWCFG_CLOCK, GPIO_DIRECTION_OUT);
    fe36:	2102      	movs	r1, #2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fe38:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
    fe3c:	202e      	movs	r0, #46	; 0x2e
    fe3e:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fe40:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
    fe44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fe48:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	gpio_set_pin_function(HWCFG_CLOCK, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PB15

	// Set pin direction to input
	gpio_set_pin_direction(HWCFG_DATA, GPIO_DIRECTION_IN);
    fe4c:	2101      	movs	r1, #1
    fe4e:	202f      	movs	r0, #47	; 0x2f
    fe50:	47a8      	blx	r5

	gpio_set_pin_pull_mode(HWCFG_DATA,
    fe52:	2100      	movs	r1, #0
    fe54:	202f      	movs	r0, #47	; 0x2f
    fe56:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fe58:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
    fe5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fe60:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
	gpio_set_pin_function(HWCFG_DATA, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PC11

	// Set pin direction to input
	gpio_set_pin_direction(MAP_MODE, GPIO_DIRECTION_IN);
    fe64:	2101      	movs	r1, #1
    fe66:	204b      	movs	r0, #75	; 0x4b
    fe68:	47a8      	blx	r5

	gpio_set_pin_pull_mode(MAP_MODE,
    fe6a:	2101      	movs	r1, #1
    fe6c:	204b      	movs	r0, #75	; 0x4b
    fe6e:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fe70:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    fe74:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fe78:	f884 314b 	strb.w	r3, [r4, #331]	; 0x14b
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(UI_PWR_EN, GPIO_DIRECTION_OUT);
    fe7c:	2102      	movs	r1, #2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fe7e:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    fe82:	204e      	movs	r0, #78	; 0x4e
    fe84:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fe86:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    fe8a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fe8e:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
	gpio_set_pin_function(UI_PWR_EN, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PC18

	// Set pin direction to input
	gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_IN);
    fe92:	2101      	movs	r1, #1
    fe94:	2052      	movs	r0, #82	; 0x52
    fe96:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PIN_GRID_SYNC_1,
    fe98:	2100      	movs	r1, #0
    fe9a:	2052      	movs	r0, #82	; 0x52
    fe9c:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fe9e:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    fea2:	4e4a      	ldr	r6, [pc, #296]	; (ffcc <system_init+0x208>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    fea4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fea8:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    feac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    feb0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_A, GPIO_DIRECTION_OUT);
    feb4:	2102      	movs	r1, #2
    feb6:	2053      	movs	r0, #83	; 0x53
    feb8:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    feba:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    febe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fec2:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fec6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    feca:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_B, GPIO_DIRECTION_OUT);
    fece:	2102      	movs	r1, #2
    fed0:	2054      	movs	r0, #84	; 0x54
    fed2:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fed4:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    fed8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fedc:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fee0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);
    fee4:	2102      	movs	r1, #2
    fee6:	2055      	movs	r0, #85	; 0x55
    fee8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    feec:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    feee:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    fef2:	4d37      	ldr	r5, [pc, #220]	; (ffd0 <system_init+0x20c>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    fef4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fef8:	f884 3155 	strb.w	r3, [r4, #341]	; 0x155

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    fefc:	4b35      	ldr	r3, [pc, #212]	; (ffd4 <system_init+0x210>)
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    fefe:	4c36      	ldr	r4, [pc, #216]	; (ffd8 <system_init+0x214>)
    ff00:	4798      	blx	r3
	ADC_1_init();
    ff02:	4b36      	ldr	r3, [pc, #216]	; (ffdc <system_init+0x218>)
    ff04:	4798      	blx	r3

	CRC_0_init();
    ff06:	4b36      	ldr	r3, [pc, #216]	; (ffe0 <system_init+0x21c>)
    ff08:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    ff0a:	4b36      	ldr	r3, [pc, #216]	; (ffe4 <system_init+0x220>)
    ff0c:	4798      	blx	r3

	FLASH_0_init();
    ff0e:	4b36      	ldr	r3, [pc, #216]	; (ffe8 <system_init+0x224>)
    ff10:	4798      	blx	r3

	QSPI_INSTANCE_init();
    ff12:	4b36      	ldr	r3, [pc, #216]	; (ffec <system_init+0x228>)
    ff14:	4798      	blx	r3
    ff16:	6963      	ldr	r3, [r4, #20]
    ff18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ff1c:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    ff1e:	4b34      	ldr	r3, [pc, #208]	; (fff0 <system_init+0x22c>)
    ff20:	4798      	blx	r3
    ff22:	4934      	ldr	r1, [pc, #208]	; (fff4 <system_init+0x230>)
    ff24:	4602      	mov	r2, r0
    ff26:	4834      	ldr	r0, [pc, #208]	; (fff8 <system_init+0x234>)
    ff28:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    ff2a:	4b34      	ldr	r3, [pc, #208]	; (fffc <system_init+0x238>)
    ff2c:	4798      	blx	r3
	USART_NORTH_init();
    ff2e:	4b34      	ldr	r3, [pc, #208]	; (10000 <STACK_SIZE>)
    ff30:	4798      	blx	r3

	GRID_AUX_init();
    ff32:	4b34      	ldr	r3, [pc, #208]	; (10004 <STACK_SIZE+0x4>)
    ff34:	4798      	blx	r3

	UI_SPI_init();
    ff36:	4b34      	ldr	r3, [pc, #208]	; (10008 <STACK_SIZE+0x8>)
    ff38:	4798      	blx	r3
	USART_WEST_init();
    ff3a:	4b34      	ldr	r3, [pc, #208]	; (1000c <STACK_SIZE+0xc>)
    ff3c:	4798      	blx	r3

	SYS_I2C_init();
    ff3e:	4b34      	ldr	r3, [pc, #208]	; (10010 <STACK_SIZE+0x10>)
    ff40:	4798      	blx	r3
	USART_SOUTH_init();
    ff42:	4b34      	ldr	r3, [pc, #208]	; (10014 <STACK_SIZE+0x14>)
    ff44:	4798      	blx	r3

	GRID_LED_init();
    ff46:	4b34      	ldr	r3, [pc, #208]	; (10018 <STACK_SIZE+0x18>)
    ff48:	4798      	blx	r3

	delay_driver_init();
    ff4a:	4b34      	ldr	r3, [pc, #208]	; (1001c <STACK_SIZE+0x1c>)
    ff4c:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    ff4e:	6963      	ldr	r3, [r4, #20]
    ff50:	433b      	orrs	r3, r7
    ff52:	4f33      	ldr	r7, [pc, #204]	; (10020 <STACK_SIZE+0x20>)
    ff54:	6163      	str	r3, [r4, #20]
    ff56:	f04f 0840 	mov.w	r8, #64	; 0x40
    ff5a:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    ff5e:	47b0      	blx	r6
    ff60:	4930      	ldr	r1, [pc, #192]	; (10024 <STACK_SIZE+0x24>)
    ff62:	4602      	mov	r2, r0
    ff64:	4830      	ldr	r0, [pc, #192]	; (10028 <STACK_SIZE+0x28>)
    ff66:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    ff68:	6963      	ldr	r3, [r4, #20]
    ff6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ff6e:	6163      	str	r3, [r4, #20]
    ff70:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    ff74:	47b0      	blx	r6
    ff76:	492d      	ldr	r1, [pc, #180]	; (1002c <STACK_SIZE+0x2c>)
    ff78:	4602      	mov	r2, r0
    ff7a:	482d      	ldr	r0, [pc, #180]	; (10030 <STACK_SIZE+0x30>)
    ff7c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    ff7e:	69a3      	ldr	r3, [r4, #24]
    ff80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ff84:	61a3      	str	r3, [r4, #24]
    ff86:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    ff8a:	47b0      	blx	r6
    ff8c:	4929      	ldr	r1, [pc, #164]	; (10034 <STACK_SIZE+0x34>)
    ff8e:	4602      	mov	r2, r0
    ff90:	4829      	ldr	r0, [pc, #164]	; (10038 <STACK_SIZE+0x38>)
    ff92:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    ff94:	69a3      	ldr	r3, [r4, #24]
    ff96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    ff9a:	61a3      	str	r3, [r4, #24]
    ff9c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    ffa0:	47b0      	blx	r6
    ffa2:	4926      	ldr	r1, [pc, #152]	; (1003c <STACK_SIZE+0x3c>)
    ffa4:	4602      	mov	r2, r0
    ffa6:	4826      	ldr	r0, [pc, #152]	; (10040 <STACK_SIZE+0x40>)
    ffa8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	RAND_0_init();
    ffaa:	4b26      	ldr	r3, [pc, #152]	; (10044 <STACK_SIZE+0x44>)
    ffac:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    ffae:	4b26      	ldr	r3, [pc, #152]	; (10048 <STACK_SIZE+0x48>)
    ffb0:	4798      	blx	r3

	WDT_0_init();
}
    ffb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	WDT_0_init();
    ffb6:	4b25      	ldr	r3, [pc, #148]	; (1004c <STACK_SIZE+0x4c>)
    ffb8:	4718      	bx	r3
    ffba:	bf00      	nop
    ffbc:	0000d079 	.word	0x0000d079
    ffc0:	41008000 	.word	0x41008000
    ffc4:	0000f509 	.word	0x0000f509
    ffc8:	0000f559 	.word	0x0000f559
    ffcc:	000122e1 	.word	0x000122e1
    ffd0:	0000c00d 	.word	0x0000c00d
    ffd4:	0000f599 	.word	0x0000f599
    ffd8:	40000800 	.word	0x40000800
    ffdc:	0000f619 	.word	0x0000f619
    ffe0:	0000f69d 	.word	0x0000f69d
    ffe4:	0000f6c1 	.word	0x0000f6c1
    ffe8:	0000f701 	.word	0x0000f701
    ffec:	0000f805 	.word	0x0000f805
    fff0:	0000f471 	.word	0x0000f471
    fff4:	40002400 	.word	0x40002400
    fff8:	20014b18 	.word	0x20014b18
    fffc:	0000f879 	.word	0x0000f879
   10000:	0000f8f9 	.word	0x0000f8f9
   10004:	0000f979 	.word	0x0000f979
   10008:	0000fa31 	.word	0x0000fa31
   1000c:	0000faa5 	.word	0x0000faa5
   10010:	0000fb35 	.word	0x0000fb35
   10014:	0000fba9 	.word	0x0000fba9
   10018:	0000fc6d 	.word	0x0000fc6d
   1001c:	0000fc99 	.word	0x0000fc99
   10020:	40001c00 	.word	0x40001c00
   10024:	40003800 	.word	0x40003800
   10028:	20014e04 	.word	0x20014e04
   1002c:	40003c00 	.word	0x40003c00
   10030:	20014cf8 	.word	0x20014cf8
   10034:	4101a000 	.word	0x4101a000
   10038:	20014b38 	.word	0x20014b38
   1003c:	4101c000 	.word	0x4101c000
   10040:	20014de4 	.word	0x20014de4
   10044:	0000fcb9 	.word	0x0000fcb9
   10048:	0000fd5d 	.word	0x0000fd5d
   1004c:	0000fd8d 	.word	0x0000fd8d

00010050 <usart_transmission_complete>:
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
   10050:	2300      	movs	r3, #0
   10052:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
   10054:	69c3      	ldr	r3, [r0, #28]
   10056:	b10b      	cbz	r3, 1005c <usart_transmission_complete+0xc>
		descr->usart_cb.tx_done(descr);
   10058:	3808      	subs	r0, #8
   1005a:	4718      	bx	r3
	}
}
   1005c:	4770      	bx	lr

0001005e <usart_error>:
 */
static void usart_error(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
   1005e:	2300      	movs	r3, #0
   10060:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
   10062:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10064:	b10b      	cbz	r3, 1006a <usart_error+0xc>
		descr->usart_cb.error(descr);
   10066:	3808      	subs	r0, #8
   10068:	4718      	bx	r3
	}
}
   1006a:	4770      	bx	lr

0001006c <usart_fill_rx_buffer>:
{
   1006c:	b570      	push	{r4, r5, r6, lr}
   1006e:	4604      	mov	r4, r0
	ringbuffer_put(&descr->rx, data);
   10070:	4b05      	ldr	r3, [pc, #20]	; (10088 <usart_fill_rx_buffer+0x1c>)
   10072:	f1a0 0508 	sub.w	r5, r0, #8
   10076:	302c      	adds	r0, #44	; 0x2c
   10078:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
   1007a:	6a23      	ldr	r3, [r4, #32]
   1007c:	b11b      	cbz	r3, 10086 <usart_fill_rx_buffer+0x1a>
		descr->usart_cb.rx_done(descr);
   1007e:	4628      	mov	r0, r5
}
   10080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		descr->usart_cb.rx_done(descr);
   10084:	4718      	bx	r3
}
   10086:	bd70      	pop	{r4, r5, r6, pc}
   10088:	00011501 	.word	0x00011501

0001008c <usart_async_write>:
{
   1008c:	b570      	push	{r4, r5, r6, lr}
   1008e:	460e      	mov	r6, r1
   10090:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
   10092:	4604      	mov	r4, r0
   10094:	b118      	cbz	r0, 1009e <usart_async_write+0x12>
   10096:	b1d9      	cbz	r1, 100d0 <usart_async_write+0x44>
   10098:	1e10      	subs	r0, r2, #0
   1009a:	bf18      	it	ne
   1009c:	2001      	movne	r0, #1
   1009e:	4b0f      	ldr	r3, [pc, #60]	; (100dc <usart_async_write+0x50>)
   100a0:	490f      	ldr	r1, [pc, #60]	; (100e0 <usart_async_write+0x54>)
   100a2:	f240 123b 	movw	r2, #315	; 0x13b
   100a6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
   100a8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
   100ac:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   100b0:	429a      	cmp	r2, r3
   100b2:	d10f      	bne.n	100d4 <usart_async_write+0x48>
	descr->tx_por           = 0;
   100b4:	2300      	movs	r3, #0
   100b6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
   100ba:	2301      	movs	r3, #1
   100bc:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
   100be:	f104 0008 	add.w	r0, r4, #8
   100c2:	4b08      	ldr	r3, [pc, #32]	; (100e4 <usart_async_write+0x58>)
	descr->tx_buffer        = (uint8_t *)buf;
   100c4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
   100c6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	_usart_async_enable_byte_sent_irq(&descr->device);
   100ca:	4798      	blx	r3
	return (int32_t)length;
   100cc:	4628      	mov	r0, r5
}
   100ce:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
   100d0:	4608      	mov	r0, r1
   100d2:	e7e4      	b.n	1009e <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
   100d4:	f06f 001b 	mvn.w	r0, #27
   100d8:	e7f9      	b.n	100ce <usart_async_write+0x42>
   100da:	bf00      	nop
   100dc:	0000d305 	.word	0x0000d305
   100e0:	00015da4 	.word	0x00015da4
   100e4:	00010ae7 	.word	0x00010ae7

000100e8 <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
   100e8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   100ea:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   100ee:	429a      	cmp	r2, r3
{
   100f0:	b510      	push	{r4, lr}
   100f2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
   100f4:	d00a      	beq.n	1010c <usart_process_byte_sent+0x24>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
   100f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
   100f8:	1c59      	adds	r1, r3, #1
   100fa:	8781      	strh	r1, [r0, #60]	; 0x3c
   100fc:	5cd1      	ldrb	r1, [r2, r3]
   100fe:	4b04      	ldr	r3, [pc, #16]	; (10110 <usart_process_byte_sent+0x28>)
   10100:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
   10102:	4b04      	ldr	r3, [pc, #16]	; (10114 <usart_process_byte_sent+0x2c>)
   10104:	4620      	mov	r0, r4
}
   10106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_usart_async_enable_tx_done_irq(&descr->device);
   1010a:	4718      	bx	r3
   1010c:	4b02      	ldr	r3, [pc, #8]	; (10118 <usart_process_byte_sent+0x30>)
   1010e:	e7fa      	b.n	10106 <usart_process_byte_sent+0x1e>
   10110:	00010abb 	.word	0x00010abb
   10114:	00010ae7 	.word	0x00010ae7
   10118:	00010aef 	.word	0x00010aef

0001011c <usart_async_read>:
{
   1011c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10120:	460e      	mov	r6, r1
   10122:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
   10124:	4604      	mov	r4, r0
   10126:	b118      	cbz	r0, 10130 <usart_async_read+0x14>
   10128:	b1e9      	cbz	r1, 10166 <usart_async_read+0x4a>
   1012a:	1e10      	subs	r0, r2, #0
   1012c:	bf18      	it	ne
   1012e:	2001      	movne	r0, #1
   10130:	4910      	ldr	r1, [pc, #64]	; (10174 <usart_async_read+0x58>)
   10132:	4b11      	ldr	r3, [pc, #68]	; (10178 <usart_async_read+0x5c>)
		ringbuffer_get(&descr->rx, &buf[was_read++]);
   10134:	f8df 9050 	ldr.w	r9, [pc, #80]	; 10188 <usart_async_read+0x6c>
	ASSERT(descr && buf && length);
   10138:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1013c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
   1013e:	3434      	adds	r4, #52	; 0x34
	CRITICAL_SECTION_ENTER()
   10140:	4b0e      	ldr	r3, [pc, #56]	; (1017c <usart_async_read+0x60>)
   10142:	a801      	add	r0, sp, #4
   10144:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
   10146:	4b0e      	ldr	r3, [pc, #56]	; (10180 <usart_async_read+0x64>)
   10148:	4620      	mov	r0, r4
   1014a:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
   1014c:	4b0d      	ldr	r3, [pc, #52]	; (10184 <usart_async_read+0x68>)
	num = ringbuffer_num(&descr->rx);
   1014e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
   10150:	a801      	add	r0, sp, #4
   10152:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
   10154:	2500      	movs	r5, #0
   10156:	45a8      	cmp	r8, r5
   10158:	d001      	beq.n	1015e <usart_async_read+0x42>
   1015a:	42bd      	cmp	r5, r7
   1015c:	d105      	bne.n	1016a <usart_async_read+0x4e>
}
   1015e:	4628      	mov	r0, r5
   10160:	b003      	add	sp, #12
   10162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && buf && length);
   10166:	4608      	mov	r0, r1
   10168:	e7e2      	b.n	10130 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
   1016a:	1971      	adds	r1, r6, r5
   1016c:	4620      	mov	r0, r4
   1016e:	47c8      	blx	r9
   10170:	3501      	adds	r5, #1
   10172:	e7f0      	b.n	10156 <usart_async_read+0x3a>
   10174:	00015da4 	.word	0x00015da4
   10178:	0000d305 	.word	0x0000d305
   1017c:	00011569 	.word	0x00011569
   10180:	00011545 	.word	0x00011545
   10184:	00011577 	.word	0x00011577
   10188:	000114c1 	.word	0x000114c1

0001018c <usart_async_init>:
{
   1018c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1018e:	460d      	mov	r5, r1
   10190:	4616      	mov	r6, r2
   10192:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
   10194:	4604      	mov	r4, r0
   10196:	b120      	cbz	r0, 101a2 <usart_async_init+0x16>
   10198:	b309      	cbz	r1, 101de <usart_async_init+0x52>
   1019a:	b312      	cbz	r2, 101e2 <usart_async_init+0x56>
   1019c:	1e18      	subs	r0, r3, #0
   1019e:	bf18      	it	ne
   101a0:	2001      	movne	r0, #1
   101a2:	4912      	ldr	r1, [pc, #72]	; (101ec <usart_async_init+0x60>)
   101a4:	4b12      	ldr	r3, [pc, #72]	; (101f0 <usart_async_init+0x64>)
   101a6:	223a      	movs	r2, #58	; 0x3a
   101a8:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
   101aa:	4b12      	ldr	r3, [pc, #72]	; (101f4 <usart_async_init+0x68>)
   101ac:	463a      	mov	r2, r7
   101ae:	4631      	mov	r1, r6
   101b0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   101b4:	4798      	blx	r3
   101b6:	b9b0      	cbnz	r0, 101e6 <usart_async_init+0x5a>
	init_status = _usart_async_init(&descr->device, hw);
   101b8:	4b0f      	ldr	r3, [pc, #60]	; (101f8 <usart_async_init+0x6c>)
   101ba:	4629      	mov	r1, r5
   101bc:	f104 0008 	add.w	r0, r4, #8
   101c0:	4798      	blx	r3
	if (init_status) {
   101c2:	b958      	cbnz	r0, 101dc <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
   101c4:	4b0d      	ldr	r3, [pc, #52]	; (101fc <usart_async_init+0x70>)
   101c6:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
   101c8:	4b0d      	ldr	r3, [pc, #52]	; (10200 <usart_async_init+0x74>)
   101ca:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
   101cc:	4b0d      	ldr	r3, [pc, #52]	; (10204 <usart_async_init+0x78>)
   101ce:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
   101d0:	4b0d      	ldr	r3, [pc, #52]	; (10208 <usart_async_init+0x7c>)
   101d2:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
   101d4:	4b0d      	ldr	r3, [pc, #52]	; (1020c <usart_async_init+0x80>)
   101d6:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
   101d8:	4b0d      	ldr	r3, [pc, #52]	; (10210 <usart_async_init+0x84>)
   101da:	6163      	str	r3, [r4, #20]
}
   101dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
   101de:	4608      	mov	r0, r1
   101e0:	e7df      	b.n	101a2 <usart_async_init+0x16>
   101e2:	4610      	mov	r0, r2
   101e4:	e7dd      	b.n	101a2 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
   101e6:	f06f 000c 	mvn.w	r0, #12
   101ea:	e7f7      	b.n	101dc <usart_async_init+0x50>
   101ec:	00015da4 	.word	0x00015da4
   101f0:	0000d305 	.word	0x0000d305
   101f4:	00011485 	.word	0x00011485
   101f8:	000109fd 	.word	0x000109fd
   101fc:	0001011d 	.word	0x0001011d
   10200:	0001008d 	.word	0x0001008d
   10204:	000100e9 	.word	0x000100e9
   10208:	0001006d 	.word	0x0001006d
   1020c:	00010051 	.word	0x00010051
   10210:	0001005f 	.word	0x0001005f

00010214 <usart_async_enable>:
{
   10214:	b510      	push	{r4, lr}
	ASSERT(descr);
   10216:	4604      	mov	r4, r0
   10218:	3800      	subs	r0, #0
   1021a:	bf18      	it	ne
   1021c:	2001      	movne	r0, #1
   1021e:	4905      	ldr	r1, [pc, #20]	; (10234 <usart_async_enable+0x20>)
   10220:	4b05      	ldr	r3, [pc, #20]	; (10238 <usart_async_enable+0x24>)
   10222:	2261      	movs	r2, #97	; 0x61
   10224:	4798      	blx	r3
	_usart_async_enable(&descr->device);
   10226:	f104 0008 	add.w	r0, r4, #8
   1022a:	4b04      	ldr	r3, [pc, #16]	; (1023c <usart_async_enable+0x28>)
   1022c:	4798      	blx	r3
}
   1022e:	2000      	movs	r0, #0
   10230:	bd10      	pop	{r4, pc}
   10232:	bf00      	nop
   10234:	00015da4 	.word	0x00015da4
   10238:	0000d305 	.word	0x0000d305
   1023c:	00010a89 	.word	0x00010a89

00010240 <usart_async_disable>:
{
   10240:	b510      	push	{r4, lr}
	ASSERT(descr);
   10242:	4604      	mov	r4, r0
   10244:	3800      	subs	r0, #0
   10246:	bf18      	it	ne
   10248:	2001      	movne	r0, #1
   1024a:	4905      	ldr	r1, [pc, #20]	; (10260 <usart_async_disable+0x20>)
   1024c:	4b05      	ldr	r3, [pc, #20]	; (10264 <usart_async_disable+0x24>)
   1024e:	226c      	movs	r2, #108	; 0x6c
   10250:	4798      	blx	r3
	_usart_async_disable(&descr->device);
   10252:	f104 0008 	add.w	r0, r4, #8
   10256:	4b04      	ldr	r3, [pc, #16]	; (10268 <usart_async_disable+0x28>)
   10258:	4798      	blx	r3
}
   1025a:	2000      	movs	r0, #0
   1025c:	bd10      	pop	{r4, pc}
   1025e:	bf00      	nop
   10260:	00015da4 	.word	0x00015da4
   10264:	0000d305 	.word	0x0000d305
   10268:	00010a9d 	.word	0x00010a9d

0001026c <usart_async_get_io_descriptor>:
{
   1026c:	b538      	push	{r3, r4, r5, lr}
   1026e:	460d      	mov	r5, r1
	ASSERT(descr && io);
   10270:	4604      	mov	r4, r0
   10272:	b110      	cbz	r0, 1027a <usart_async_get_io_descriptor+0xe>
   10274:	1e08      	subs	r0, r1, #0
   10276:	bf18      	it	ne
   10278:	2001      	movne	r0, #1
   1027a:	4903      	ldr	r1, [pc, #12]	; (10288 <usart_async_get_io_descriptor+0x1c>)
   1027c:	4b03      	ldr	r3, [pc, #12]	; (1028c <usart_async_get_io_descriptor+0x20>)
   1027e:	2277      	movs	r2, #119	; 0x77
   10280:	4798      	blx	r3
	*io = &descr->io;
   10282:	602c      	str	r4, [r5, #0]
}
   10284:	2000      	movs	r0, #0
   10286:	bd38      	pop	{r3, r4, r5, pc}
   10288:	00015da4 	.word	0x00015da4
   1028c:	0000d305 	.word	0x0000d305

00010290 <usart_async_register_callback>:
{
   10290:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
   10292:	4605      	mov	r5, r0
   10294:	3800      	subs	r0, #0
{
   10296:	460c      	mov	r4, r1
	ASSERT(descr);
   10298:	bf18      	it	ne
   1029a:	2001      	movne	r0, #1
   1029c:	4911      	ldr	r1, [pc, #68]	; (102e4 <usart_async_register_callback+0x54>)
   1029e:	4b12      	ldr	r3, [pc, #72]	; (102e8 <usart_async_register_callback+0x58>)
{
   102a0:	4616      	mov	r6, r2
	ASSERT(descr);
   102a2:	2283      	movs	r2, #131	; 0x83
   102a4:	4798      	blx	r3
	switch (type) {
   102a6:	2c01      	cmp	r4, #1
   102a8:	d00d      	beq.n	102c6 <usart_async_register_callback+0x36>
   102aa:	2c02      	cmp	r4, #2
   102ac:	d011      	beq.n	102d2 <usart_async_register_callback+0x42>
   102ae:	b9b4      	cbnz	r4, 102de <usart_async_register_callback+0x4e>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
   102b0:	1e32      	subs	r2, r6, #0
		descr->usart_cb.rx_done = cb;
   102b2:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
   102b4:	bf18      	it	ne
   102b6:	2201      	movne	r2, #1
   102b8:	2101      	movs	r1, #1
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
   102ba:	f105 0008 	add.w	r0, r5, #8
   102be:	4b0b      	ldr	r3, [pc, #44]	; (102ec <usart_async_register_callback+0x5c>)
   102c0:	4798      	blx	r3
	return ERR_NONE;
   102c2:	2000      	movs	r0, #0
}
   102c4:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
   102c6:	1e32      	subs	r2, r6, #0
		descr->usart_cb.tx_done = cb;
   102c8:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
   102ca:	bf18      	it	ne
   102cc:	2201      	movne	r2, #1
   102ce:	2102      	movs	r1, #2
   102d0:	e7f3      	b.n	102ba <usart_async_register_callback+0x2a>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
   102d2:	1e32      	subs	r2, r6, #0
		descr->usart_cb.error = cb;
   102d4:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
   102d6:	bf18      	it	ne
   102d8:	2201      	movne	r2, #1
   102da:	2103      	movs	r1, #3
   102dc:	e7ed      	b.n	102ba <usart_async_register_callback+0x2a>
	switch (type) {
   102de:	f06f 000c 	mvn.w	r0, #12
   102e2:	e7ef      	b.n	102c4 <usart_async_register_callback+0x34>
   102e4:	00015da4 	.word	0x00015da4
   102e8:	0000d305 	.word	0x0000d305
   102ec:	00010af9 	.word	0x00010af9

000102f0 <usart_async_set_parity>:
{
   102f0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
   102f2:	4604      	mov	r4, r0
   102f4:	3800      	subs	r0, #0
   102f6:	bf18      	it	ne
   102f8:	2001      	movne	r0, #1
{
   102fa:	460d      	mov	r5, r1
	ASSERT(descr);
   102fc:	22cb      	movs	r2, #203	; 0xcb
   102fe:	4905      	ldr	r1, [pc, #20]	; (10314 <usart_async_set_parity+0x24>)
   10300:	4b05      	ldr	r3, [pc, #20]	; (10318 <usart_async_set_parity+0x28>)
   10302:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
   10304:	f104 0008 	add.w	r0, r4, #8
   10308:	4b04      	ldr	r3, [pc, #16]	; (1031c <usart_async_set_parity+0x2c>)
   1030a:	4629      	mov	r1, r5
   1030c:	4798      	blx	r3
}
   1030e:	2000      	movs	r0, #0
   10310:	bd38      	pop	{r3, r4, r5, pc}
   10312:	bf00      	nop
   10314:	00015da4 	.word	0x00015da4
   10318:	0000d305 	.word	0x0000d305
   1031c:	00010aa9 	.word	0x00010aa9

00010320 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
   10320:	69c3      	ldr	r3, [r0, #28]
   10322:	420b      	tst	r3, r1
   10324:	d1fc      	bne.n	10320 <hri_sercomi2cm_wait_for_sync>
	};
}
   10326:	4770      	bx	lr

00010328 <hri_sercomspi_wait_for_sync>:
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
   10328:	69c3      	ldr	r3, [r0, #28]
   1032a:	420b      	tst	r3, r1
   1032c:	d1fc      	bne.n	10328 <hri_sercomspi_wait_for_sync>
	};
}
   1032e:	4770      	bx	lr

00010330 <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
   10330:	69c3      	ldr	r3, [r0, #28]
   10332:	420b      	tst	r3, r1
   10334:	d1fc      	bne.n	10330 <hri_sercomusart_wait_for_sync>
	};
}
   10336:	4770      	bx	lr

00010338 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   10338:	6802      	ldr	r2, [r0, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   1033a:	4b03      	ldr	r3, [pc, #12]	; (10348 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1033c:	f022 0202 	bic.w	r2, r2, #2
   10340:	6002      	str	r2, [r0, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   10342:	2103      	movs	r1, #3
   10344:	4718      	bx	r3
   10346:	bf00      	nop
   10348:	00010321 	.word	0x00010321

0001034c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1034c:	6802      	ldr	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   1034e:	4b03      	ldr	r3, [pc, #12]	; (1035c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   10350:	f022 0202 	bic.w	r2, r2, #2
   10354:	6002      	str	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10356:	2103      	movs	r1, #3
   10358:	4718      	bx	r3
   1035a:	bf00      	nop
   1035c:	00010329 	.word	0x00010329

00010360 <hri_sercomusart_get_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
   10360:	b508      	push	{r3, lr}
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10362:	2103      	movs	r1, #3
   10364:	4b02      	ldr	r3, [pc, #8]	; (10370 <hri_sercomusart_get_CTRLA_ENABLE_bit+0x10>)
   10366:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
   10368:	6800      	ldr	r0, [r0, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}
   1036a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1036e:	bd08      	pop	{r3, pc}
   10370:	00010331 	.word	0x00010331

00010374 <hri_sercomusart_write_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
   10374:	6803      	ldr	r3, [r0, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
   10376:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
   1037a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
   1037e:	6001      	str	r1, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10380:	4b01      	ldr	r3, [pc, #4]	; (10388 <hri_sercomusart_write_CTRLA_ENABLE_bit+0x14>)
   10382:	2103      	movs	r1, #3
   10384:	4718      	bx	r3
   10386:	bf00      	nop
   10388:	00010331 	.word	0x00010331

0001038c <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   1038c:	6802      	ldr	r2, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   1038e:	4b03      	ldr	r3, [pc, #12]	; (1039c <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   10390:	f022 0202 	bic.w	r2, r2, #2
   10394:	6002      	str	r2, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10396:	2103      	movs	r1, #3
   10398:	4718      	bx	r3
   1039a:	bf00      	nop
   1039c:	00010331 	.word	0x00010331

000103a0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
   103a0:	b570      	push	{r4, r5, r6, lr}
	Sercom *const sercom_modules[] = SERCOM_INSTS;
   103a2:	4d0c      	ldr	r5, [pc, #48]	; (103d4 <_sercom_get_hardware_index+0x34>)
{
   103a4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
   103a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   103a8:	b088      	sub	sp, #32
	Sercom *const sercom_modules[] = SERCOM_INSTS;
   103aa:	466c      	mov	r4, sp
   103ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   103ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   103b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   103b6:	466a      	mov	r2, sp
   103b8:	2300      	movs	r3, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
   103ba:	f852 1b04 	ldr.w	r1, [r2], #4
   103be:	42b1      	cmp	r1, r6
   103c0:	d102      	bne.n	103c8 <_sercom_get_hardware_index+0x28>
			return i;
   103c2:	b2d8      	uxtb	r0, r3
		}
	}
	return 0;
}
   103c4:	b008      	add	sp, #32
   103c6:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   103c8:	3301      	adds	r3, #1
   103ca:	2b08      	cmp	r3, #8
   103cc:	d1f5      	bne.n	103ba <_sercom_get_hardware_index+0x1a>
	return 0;
   103ce:	2000      	movs	r0, #0
   103d0:	e7f8      	b.n	103c4 <_sercom_get_hardware_index+0x24>
   103d2:	bf00      	nop
   103d4:	00015ddc 	.word	0x00015ddc

000103d8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
   103d8:	b510      	push	{r4, lr}
	void *hw = device->hw;
   103da:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
   103dc:	7e22      	ldrb	r2, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
   103de:	07d1      	lsls	r1, r2, #31
{
   103e0:	4603      	mov	r3, r0
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
   103e2:	d508      	bpl.n	103f6 <_sercom_usart_interrupt_handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
   103e4:	7da2      	ldrb	r2, [r4, #22]
   103e6:	07d2      	lsls	r2, r2, #31
   103e8:	d505      	bpl.n	103f6 <_sercom_usart_interrupt_handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
   103ea:	2201      	movs	r2, #1
   103ec:	7522      	strb	r2, [r4, #20]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
   103ee:	6803      	ldr	r3, [r0, #0]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
   103f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_byte_sent(device);
   103f4:	4718      	bx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
   103f6:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
   103f8:	0790      	lsls	r0, r2, #30
   103fa:	d509      	bpl.n	10410 <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
   103fc:	7da2      	ldrb	r2, [r4, #22]
   103fe:	0791      	lsls	r1, r2, #30
   10400:	d506      	bpl.n	10410 <_sercom_usart_interrupt_handler+0x38>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
   10402:	2202      	movs	r2, #2
   10404:	7522      	strb	r2, [r4, #20]
		device->usart_cb.tx_done_cb(device);
   10406:	4618      	mov	r0, r3
}
   10408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_done_cb(device);
   1040c:	689a      	ldr	r2, [r3, #8]
   1040e:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
   10410:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
   10412:	0752      	lsls	r2, r2, #29
   10414:	d50d      	bpl.n	10432 <_sercom_usart_interrupt_handler+0x5a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
   10416:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
   10418:	f002 0237 	and.w	r2, r2, #55	; 0x37
   1041c:	b112      	cbz	r2, 10424 <_sercom_usart_interrupt_handler+0x4c>
	((Sercom *)hw)->USART.STATUS.reg = mask;
   1041e:	23ff      	movs	r3, #255	; 0xff
   10420:	8363      	strh	r3, [r4, #26]
}
   10422:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
   10424:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
   10426:	685a      	ldr	r2, [r3, #4]
}
   10428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
   1042c:	b2c9      	uxtb	r1, r1
   1042e:	4618      	mov	r0, r3
   10430:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
   10432:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
   10434:	09d2      	lsrs	r2, r2, #7
   10436:	d0f4      	beq.n	10422 <_sercom_usart_interrupt_handler+0x4a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   10438:	2280      	movs	r2, #128	; 0x80
   1043a:	7622      	strb	r2, [r4, #24]
		device->usart_cb.error_cb(device);
   1043c:	4618      	mov	r0, r3
   1043e:	68da      	ldr	r2, [r3, #12]
   10440:	4790      	blx	r2
	return ((Sercom *)hw)->USART.STATUS.reg;
   10442:	8b63      	ldrh	r3, [r4, #26]
   10444:	b29b      	uxth	r3, r3
   10446:	e7eb      	b.n	10420 <_sercom_usart_interrupt_handler+0x48>

00010448 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
   10448:	4b11      	ldr	r3, [pc, #68]	; (10490 <_sercom_init_irq_param+0x48>)
   1044a:	4298      	cmp	r0, r3
   1044c:	d105      	bne.n	1045a <_sercom_init_irq_param+0x12>
		_sercom0_dev = (struct _usart_async_device *)dev;
   1044e:	4b11      	ldr	r3, [pc, #68]	; (10494 <_sercom_init_irq_param+0x4c>)
   10450:	6019      	str	r1, [r3, #0]

	if (hw == SERCOM5) {
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
   10452:	4b11      	ldr	r3, [pc, #68]	; (10498 <_sercom_init_irq_param+0x50>)
   10454:	4298      	cmp	r0, r3
   10456:	d018      	beq.n	1048a <_sercom_init_irq_param+0x42>
   10458:	4770      	bx	lr
	if (hw == SERCOM1) {
   1045a:	4b10      	ldr	r3, [pc, #64]	; (1049c <_sercom_init_irq_param+0x54>)
   1045c:	4298      	cmp	r0, r3
   1045e:	d00b      	beq.n	10478 <_sercom_init_irq_param+0x30>
	if (hw == SERCOM3) {
   10460:	4b0f      	ldr	r3, [pc, #60]	; (104a0 <_sercom_init_irq_param+0x58>)
   10462:	4298      	cmp	r0, r3
   10464:	d00b      	beq.n	1047e <_sercom_init_irq_param+0x36>
	if (hw == SERCOM4) {
   10466:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
   1046a:	d00b      	beq.n	10484 <_sercom_init_irq_param+0x3c>
	if (hw == SERCOM5) {
   1046c:	4b0d      	ldr	r3, [pc, #52]	; (104a4 <_sercom_init_irq_param+0x5c>)
   1046e:	4298      	cmp	r0, r3
   10470:	d1ef      	bne.n	10452 <_sercom_init_irq_param+0xa>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
   10472:	4b08      	ldr	r3, [pc, #32]	; (10494 <_sercom_init_irq_param+0x4c>)
   10474:	6119      	str	r1, [r3, #16]
	if (hw == SERCOM6) {
   10476:	4770      	bx	lr
		_sercom1_dev = (struct _usart_async_device *)dev;
   10478:	4b06      	ldr	r3, [pc, #24]	; (10494 <_sercom_init_irq_param+0x4c>)
   1047a:	6059      	str	r1, [r3, #4]
	if (hw == SERCOM5) {
   1047c:	e7e9      	b.n	10452 <_sercom_init_irq_param+0xa>
		_sercom3_dev = (struct _spi_async_dev *)dev;
   1047e:	4b05      	ldr	r3, [pc, #20]	; (10494 <_sercom_init_irq_param+0x4c>)
   10480:	6099      	str	r1, [r3, #8]
	if (hw == SERCOM6) {
   10482:	4770      	bx	lr
		_sercom4_dev = (struct _usart_async_device *)dev;
   10484:	4b03      	ldr	r3, [pc, #12]	; (10494 <_sercom_init_irq_param+0x4c>)
   10486:	60d9      	str	r1, [r3, #12]
	if (hw == SERCOM6) {
   10488:	4770      	bx	lr
		_sercom6_dev = (struct _usart_async_device *)dev;
   1048a:	4b02      	ldr	r3, [pc, #8]	; (10494 <_sercom_init_irq_param+0x4c>)
   1048c:	6159      	str	r1, [r3, #20]
	}
}
   1048e:	4770      	bx	lr
   10490:	40003000 	.word	0x40003000
   10494:	20001084 	.word	0x20001084
   10498:	43000800 	.word	0x43000800
   1049c:	40003400 	.word	0x40003400
   104a0:	41014000 	.word	0x41014000
   104a4:	43000400 	.word	0x43000400

000104a8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
   104a8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
   104aa:	4b03      	ldr	r3, [pc, #12]	; (104b8 <_sercom_get_irq_num+0x10>)
   104ac:	4798      	blx	r3
   104ae:	0080      	lsls	r0, r0, #2
   104b0:	302e      	adds	r0, #46	; 0x2e
}
   104b2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   104b6:	bd08      	pop	{r3, pc}
   104b8:	000103a1 	.word	0x000103a1

000104bc <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   104bc:	69c2      	ldr	r2, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   104be:	f012 0201 	ands.w	r2, r2, #1
{
   104c2:	b508      	push	{r3, lr}
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   104c4:	d108      	bne.n	104d8 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   104c6:	6803      	ldr	r3, [r0, #0]
   104c8:	f043 0302 	orr.w	r3, r3, #2
   104cc:	6003      	str	r3, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   104ce:	2103      	movs	r1, #3
   104d0:	4b03      	ldr	r3, [pc, #12]	; (104e0 <_spi_sync_enable+0x24>)
   104d2:	4798      	blx	r3
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
   104d4:	4610      	mov	r0, r2
}
   104d6:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
   104d8:	f06f 0003 	mvn.w	r0, #3
   104dc:	e7fb      	b.n	104d6 <_spi_sync_enable+0x1a>
   104de:	bf00      	nop
   104e0:	00010329 	.word	0x00010329

000104e4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
   104e4:	b508      	push	{r3, lr}
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
   104e6:	4b08      	ldr	r3, [pc, #32]	; (10508 <_spi_get_regs+0x24>)
   104e8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
		if (sercomspi_regs[i].n == n) {
   104ea:	2803      	cmp	r0, #3
   104ec:	d007      	beq.n	104fe <_spi_get_regs+0x1a>
   104ee:	2807      	cmp	r0, #7
   104f0:	d107      	bne.n	10502 <_spi_get_regs+0x1e>
   104f2:	2301      	movs	r3, #1
			return &sercomspi_regs[i];
   104f4:	4805      	ldr	r0, [pc, #20]	; (1050c <_spi_get_regs+0x28>)
   104f6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   104fa:	4418      	add	r0, r3
		}
	}

	return NULL;
}
   104fc:	bd08      	pop	{r3, pc}
		if (sercomspi_regs[i].n == n) {
   104fe:	2300      	movs	r3, #0
   10500:	e7f8      	b.n	104f4 <_spi_get_regs+0x10>
	return NULL;
   10502:	2000      	movs	r0, #0
   10504:	e7fa      	b.n	104fc <_spi_get_regs+0x18>
   10506:	bf00      	nop
   10508:	000103a1 	.word	0x000103a1
   1050c:	00015dfc 	.word	0x00015dfc

00010510 <_spi_dma_tx_complete>:
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
   10510:	6883      	ldr	r3, [r0, #8]
   10512:	685b      	ldr	r3, [r3, #4]
   10514:	b103      	cbz	r3, 10518 <_spi_dma_tx_complete+0x8>
		dev->callbacks.tx(resource);
   10516:	4718      	bx	r3
	}
}
   10518:	4770      	bx	lr

0001051a <_spi_dma_error_occured>:
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
   1051a:	6883      	ldr	r3, [r0, #8]
   1051c:	68db      	ldr	r3, [r3, #12]
   1051e:	b103      	cbz	r3, 10522 <_spi_dma_error_occured+0x8>
		dev->callbacks.error(resource);
   10520:	4718      	bx	r3
	}
}
   10522:	4770      	bx	lr

00010524 <__NVIC_EnableIRQ>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10524:	0942      	lsrs	r2, r0, #5
   10526:	2301      	movs	r3, #1
   10528:	f000 001f 	and.w	r0, r0, #31
   1052c:	fa03 f000 	lsl.w	r0, r3, r0
   10530:	4b01      	ldr	r3, [pc, #4]	; (10538 <__NVIC_EnableIRQ+0x14>)
   10532:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
}
   10536:	4770      	bx	lr
   10538:	e000e100 	.word	0xe000e100

0001053c <_spi_async_enable>:
{
   1053c:	b538      	push	{r3, r4, r5, lr}
   1053e:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
   10540:	4b07      	ldr	r3, [pc, #28]	; (10560 <_spi_async_enable+0x24>)
		NVIC_EnableIRQ((IRQn_Type)irq++);
   10542:	4d08      	ldr	r5, [pc, #32]	; (10564 <_spi_async_enable+0x28>)
	_spi_sync_enable(hw);
   10544:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
   10546:	4620      	mov	r0, r4
   10548:	4b07      	ldr	r3, [pc, #28]	; (10568 <_spi_async_enable+0x2c>)
   1054a:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   1054c:	2100      	movs	r1, #0
	uint8_t irq = _sercom_get_irq_num(hw);
   1054e:	4604      	mov	r4, r0
		NVIC_EnableIRQ((IRQn_Type)irq++);
   10550:	1860      	adds	r0, r4, r1
   10552:	b2c0      	uxtb	r0, r0
   10554:	47a8      	blx	r5
	for (uint32_t i = 0; i < 4; i++) {
   10556:	3101      	adds	r1, #1
   10558:	2904      	cmp	r1, #4
   1055a:	d1f9      	bne.n	10550 <_spi_async_enable+0x14>
}
   1055c:	2000      	movs	r0, #0
   1055e:	bd38      	pop	{r3, r4, r5, pc}
   10560:	000104bd 	.word	0x000104bd
   10564:	00010525 	.word	0x00010525
   10568:	000104a9 	.word	0x000104a9

0001056c <__NVIC_DisableIRQ>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1056c:	0943      	lsrs	r3, r0, #5
   1056e:	2201      	movs	r2, #1
   10570:	f000 001f 	and.w	r0, r0, #31
   10574:	fa02 f000 	lsl.w	r0, r2, r0
   10578:	3320      	adds	r3, #32
   1057a:	4a04      	ldr	r2, [pc, #16]	; (1058c <__NVIC_DisableIRQ+0x20>)
   1057c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   10580:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10584:	f3bf 8f6f 	isb	sy
}
   10588:	4770      	bx	lr
   1058a:	bf00      	nop
   1058c:	e000e100 	.word	0xe000e100

00010590 <__NVIC_ClearPendingIRQ>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10590:	0943      	lsrs	r3, r0, #5
   10592:	2201      	movs	r2, #1
   10594:	f000 001f 	and.w	r0, r0, #31
   10598:	fa02 f000 	lsl.w	r0, r2, r0
   1059c:	3360      	adds	r3, #96	; 0x60
   1059e:	4a02      	ldr	r2, [pc, #8]	; (105a8 <__NVIC_ClearPendingIRQ+0x18>)
   105a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   105a4:	4770      	bx	lr
   105a6:	bf00      	nop
   105a8:	e000e100 	.word	0xe000e100

000105ac <_get_i2cm_index>:
{
   105ac:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
   105ae:	4b07      	ldr	r3, [pc, #28]	; (105cc <_get_i2cm_index+0x20>)
   105b0:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
   105b2:	2805      	cmp	r0, #5
   105b4:	d008      	beq.n	105c8 <_get_i2cm_index+0x1c>
	ASSERT(false);
   105b6:	2000      	movs	r0, #0
   105b8:	4905      	ldr	r1, [pc, #20]	; (105d0 <_get_i2cm_index+0x24>)
   105ba:	4b06      	ldr	r3, [pc, #24]	; (105d4 <_get_i2cm_index+0x28>)
   105bc:	f240 32ed 	movw	r2, #1005	; 0x3ed
   105c0:	4798      	blx	r3
   105c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   105c6:	bd08      	pop	{r3, pc}
			return i;
   105c8:	2000      	movs	r0, #0
   105ca:	e7fc      	b.n	105c6 <_get_i2cm_index+0x1a>
   105cc:	000103a1 	.word	0x000103a1
   105d0:	00015dc1 	.word	0x00015dc1
   105d4:	0000d305 	.word	0x0000d305

000105d8 <_sercom_i2c_send_stop>:
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
   105d8:	6842      	ldr	r2, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   105da:	4b03      	ldr	r3, [pc, #12]	; (105e8 <_sercom_i2c_send_stop+0x10>)
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
   105dc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
   105e0:	6042      	str	r2, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   105e2:	2104      	movs	r1, #4
   105e4:	4718      	bx	r3
   105e6:	bf00      	nop
   105e8:	00010321 	.word	0x00010321

000105ec <_sercom_i2c_sync_analyse_flags>:
{
   105ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105f0:	460e      	mov	r6, r1
   105f2:	4614      	mov	r4, r2
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   105f4:	2104      	movs	r1, #4
   105f6:	4a56      	ldr	r2, [pc, #344]	; (10750 <_sercom_i2c_sync_analyse_flags+0x164>)
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
   105f8:	f8d0 8000 	ldr.w	r8, [r0]
   105fc:	4605      	mov	r5, r0
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   105fe:	4790      	blx	r2
	return ((Sercom *)hw)->I2CM.STATUS.reg;
   10600:	8b43      	ldrh	r3, [r0, #26]
	if (flags & MB_FLAG) {
   10602:	f016 0f01 	tst.w	r6, #1
   10606:	b29b      	uxth	r3, r3
   10608:	4617      	mov	r7, r2
   1060a:	d064      	beq.n	106d6 <_sercom_i2c_sync_analyse_flags+0xea>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
   1060c:	079f      	lsls	r7, r3, #30
   1060e:	d516      	bpl.n	1063e <_sercom_i2c_sync_analyse_flags+0x52>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   10610:	2201      	movs	r2, #1
   10612:	7602      	strb	r2, [r0, #24]
			msg->flags |= I2C_M_FAIL;
   10614:	8862      	ldrh	r2, [r4, #2]
   10616:	b292      	uxth	r2, r2
   10618:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1061c:	8062      	strh	r2, [r4, #2]
			msg->flags &= ~I2C_M_BUSY;
   1061e:	8862      	ldrh	r2, [r4, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
   10620:	f003 0601 	and.w	r6, r3, #1
			msg->flags &= ~I2C_M_BUSY;
   10624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   10628:	0412      	lsls	r2, r2, #16
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
   1062a:	f1c6 26ff 	rsb	r6, r6, #4278255360	; 0xff00ff00
			msg->flags &= ~I2C_M_BUSY;
   1062e:	0c12      	lsrs	r2, r2, #16
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
   10630:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
			msg->flags &= ~I2C_M_BUSY;
   10634:	8062      	strh	r2, [r4, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
   10636:	36fc      	adds	r6, #252	; 0xfc
}
   10638:	4630      	mov	r0, r6
   1063a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
   1063e:	f013 0604 	ands.w	r6, r3, #4
   10642:	d015      	beq.n	10670 <_sercom_i2c_sync_analyse_flags+0x84>
				if (msg->len > 0) {
   10644:	6863      	ldr	r3, [r4, #4]
   10646:	2b00      	cmp	r3, #0
					msg->flags |= I2C_M_FAIL;
   10648:	bfc1      	itttt	gt
   1064a:	8863      	ldrhgt	r3, [r4, #2]
   1064c:	b29b      	uxthgt	r3, r3
   1064e:	f443 5380 	orrgt.w	r3, r3, #4096	; 0x1000
   10652:	8063      	strhgt	r3, [r4, #2]
				if (msg->flags & I2C_M_STOP) {
   10654:	8863      	ldrh	r3, [r4, #2]
   10656:	041e      	lsls	r6, r3, #16
   10658:	d501      	bpl.n	1065e <_sercom_i2c_sync_analyse_flags+0x72>
					_sercom_i2c_send_stop(hw);
   1065a:	4b3e      	ldr	r3, [pc, #248]	; (10754 <_sercom_i2c_sync_analyse_flags+0x168>)
   1065c:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
   1065e:	8863      	ldrh	r3, [r4, #2]
   10660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10664:	041b      	lsls	r3, r3, #16
   10666:	0c1b      	lsrs	r3, r3, #16
   10668:	8063      	strh	r3, [r4, #2]
			return I2C_NACK;
   1066a:	f06f 0601 	mvn.w	r6, #1
   1066e:	e7e3      	b.n	10638 <_sercom_i2c_sync_analyse_flags+0x4c>
			if (msg->flags & I2C_M_TEN) {
   10670:	8863      	ldrh	r3, [r4, #2]
   10672:	f413 6780 	ands.w	r7, r3, #1024	; 0x400
   10676:	d015      	beq.n	106a4 <_sercom_i2c_sync_analyse_flags+0xb8>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
   10678:	8823      	ldrh	r3, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   1067a:	2104      	movs	r1, #4
   1067c:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
   1067e:	f003 0706 	and.w	r7, r3, #6
   10682:	4790      	blx	r2
	return ((Sercom *)hw)->I2CM.ADDR.reg;
   10684:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   1068a:	433b      	orrs	r3, r7
				hri_sercomi2cm_write_ADDR_reg(hw,
   1068c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
   10690:	6243      	str	r3, [r0, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10692:	2104      	movs	r1, #4
   10694:	4790      	blx	r2
				msg->flags &= ~I2C_M_TEN;
   10696:	8863      	ldrh	r3, [r4, #2]
   10698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
				msg->flags &= ~I2C_M_BUSY;
   1069c:	041b      	lsls	r3, r3, #16
   1069e:	0c1b      	lsrs	r3, r3, #16
   106a0:	8063      	strh	r3, [r4, #2]
   106a2:	e7c9      	b.n	10638 <_sercom_i2c_sync_analyse_flags+0x4c>
			if (msg->len == 0) {
   106a4:	6866      	ldr	r6, [r4, #4]
   106a6:	b94e      	cbnz	r6, 106bc <_sercom_i2c_sync_analyse_flags+0xd0>
				if (msg->flags & I2C_M_STOP) {
   106a8:	8863      	ldrh	r3, [r4, #2]
   106aa:	0418      	lsls	r0, r3, #16
   106ac:	d502      	bpl.n	106b4 <_sercom_i2c_sync_analyse_flags+0xc8>
					_sercom_i2c_send_stop(hw);
   106ae:	4b29      	ldr	r3, [pc, #164]	; (10754 <_sercom_i2c_sync_analyse_flags+0x168>)
   106b0:	4628      	mov	r0, r5
   106b2:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
   106b4:	8863      	ldrh	r3, [r4, #2]
   106b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   106ba:	e7ef      	b.n	1069c <_sercom_i2c_sync_analyse_flags+0xb0>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
   106bc:	68a3      	ldr	r3, [r4, #8]
   106be:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
   106c0:	6283      	str	r3, [r0, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   106c2:	2104      	movs	r1, #4
   106c4:	4790      	blx	r2
				msg->buffer++;
   106c6:	68a3      	ldr	r3, [r4, #8]
   106c8:	3301      	adds	r3, #1
   106ca:	60a3      	str	r3, [r4, #8]
				msg->len--;
   106cc:	6863      	ldr	r3, [r4, #4]
   106ce:	3b01      	subs	r3, #1
   106d0:	6063      	str	r3, [r4, #4]
	return I2C_OK;
   106d2:	2600      	movs	r6, #0
}
   106d4:	e7b0      	b.n	10638 <_sercom_i2c_sync_analyse_flags+0x4c>
	} else if (flags & SB_FLAG) {
   106d6:	f016 0602 	ands.w	r6, r6, #2
   106da:	d0ad      	beq.n	10638 <_sercom_i2c_sync_analyse_flags+0x4c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
   106dc:	6862      	ldr	r2, [r4, #4]
   106de:	2a00      	cmp	r2, #0
   106e0:	d032      	beq.n	10748 <_sercom_i2c_sync_analyse_flags+0x15c>
   106e2:	0759      	lsls	r1, r3, #29
   106e4:	d430      	bmi.n	10748 <_sercom_i2c_sync_analyse_flags+0x15c>
			msg->len--;
   106e6:	3a01      	subs	r2, #1
   106e8:	f3c8 61c0 	ubfx	r1, r8, #27, #1
   106ec:	6062      	str	r2, [r4, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
   106ee:	b99a      	cbnz	r2, 10718 <_sercom_i2c_sync_analyse_flags+0x12c>
   106f0:	b1a9      	cbz	r1, 1071e <_sercom_i2c_sync_analyse_flags+0x132>
				if (msg->flags & I2C_M_STOP) {
   106f2:	8863      	ldrh	r3, [r4, #2]
   106f4:	041b      	lsls	r3, r3, #16
   106f6:	d508      	bpl.n	1070a <_sercom_i2c_sync_analyse_flags+0x11e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
   106f8:	686b      	ldr	r3, [r5, #4]
   106fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   106fe:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10700:	2104      	movs	r1, #4
   10702:	4628      	mov	r0, r5
   10704:	47b8      	blx	r7
					_sercom_i2c_send_stop(hw);
   10706:	4b13      	ldr	r3, [pc, #76]	; (10754 <_sercom_i2c_sync_analyse_flags+0x168>)
   10708:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
   1070a:	8863      	ldrh	r3, [r4, #2]
   1070c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10710:	041b      	lsls	r3, r3, #16
   10712:	0c1b      	lsrs	r3, r3, #16
   10714:	8063      	strh	r3, [r4, #2]
   10716:	e00c      	b.n	10732 <_sercom_i2c_sync_analyse_flags+0x146>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
   10718:	2a01      	cmp	r2, #1
   1071a:	d10a      	bne.n	10732 <_sercom_i2c_sync_analyse_flags+0x146>
   1071c:	b149      	cbz	r1, 10732 <_sercom_i2c_sync_analyse_flags+0x146>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1071e:	686b      	ldr	r3, [r5, #4]
   10720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   10724:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10726:	2104      	movs	r1, #4
   10728:	4628      	mov	r0, r5
   1072a:	47b8      	blx	r7
			if (msg->len == 0) {
   1072c:	6863      	ldr	r3, [r4, #4]
   1072e:	2b00      	cmp	r3, #0
   10730:	d0df      	beq.n	106f2 <_sercom_i2c_sync_analyse_flags+0x106>
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10732:	2104      	movs	r1, #4
   10734:	4628      	mov	r0, r5
   10736:	47b8      	blx	r7
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
   10738:	68a3      	ldr	r3, [r4, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
   1073a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1073c:	1c59      	adds	r1, r3, #1
   1073e:	60a1      	str	r1, [r4, #8]
   10740:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   10742:	2302      	movs	r3, #2
   10744:	762b      	strb	r3, [r5, #24]
   10746:	e7c4      	b.n	106d2 <_sercom_i2c_sync_analyse_flags+0xe6>
   10748:	2302      	movs	r3, #2
   1074a:	762b      	strb	r3, [r5, #24]
   1074c:	e78d      	b.n	1066a <_sercom_i2c_sync_analyse_flags+0x7e>
   1074e:	bf00      	nop
   10750:	00010321 	.word	0x00010321
   10754:	000105d9 	.word	0x000105d9

00010758 <_usart_set_parity>:
{
   10758:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
   1075a:	4b16      	ldr	r3, [pc, #88]	; (107b4 <_usart_set_parity+0x5c>)
{
   1075c:	4604      	mov	r4, r0
   1075e:	460d      	mov	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
   10760:	4798      	blx	r3
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
   10762:	4b15      	ldr	r3, [pc, #84]	; (107b8 <_usart_set_parity+0x60>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
   10764:	4606      	mov	r6, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
   10766:	4620      	mov	r0, r4
   10768:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
   1076a:	4b14      	ldr	r3, [pc, #80]	; (107bc <_usart_set_parity+0x64>)
   1076c:	a801      	add	r0, sp, #4
   1076e:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
   10770:	4a13      	ldr	r2, [pc, #76]	; (107c0 <_usart_set_parity+0x68>)
   10772:	4620      	mov	r0, r4
   10774:	2102      	movs	r1, #2
   10776:	4790      	blx	r2
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
   10778:	6823      	ldr	r3, [r4, #0]
	if (USART_PARITY_NONE != parity) {
   1077a:	2d02      	cmp	r5, #2
   1077c:	bf14      	ite	ne
   1077e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
   10782:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
   10786:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   10788:	211f      	movs	r1, #31
   1078a:	4790      	blx	r2
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
   1078c:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
   1078e:	3d00      	subs	r5, #0
   10790:	bf18      	it	ne
   10792:	2501      	movne	r5, #1
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
   10794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
   10798:	ea43 3545 	orr.w	r5, r3, r5, lsl #13
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   1079c:	211f      	movs	r1, #31
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
   1079e:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   107a0:	4790      	blx	r2
	CRITICAL_SECTION_LEAVE()
   107a2:	a801      	add	r0, sp, #4
   107a4:	4b07      	ldr	r3, [pc, #28]	; (107c4 <_usart_set_parity+0x6c>)
   107a6:	4798      	blx	r3
	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
   107a8:	4b07      	ldr	r3, [pc, #28]	; (107c8 <_usart_set_parity+0x70>)
   107aa:	4631      	mov	r1, r6
   107ac:	4620      	mov	r0, r4
   107ae:	4798      	blx	r3
}
   107b0:	b002      	add	sp, #8
   107b2:	bd70      	pop	{r4, r5, r6, pc}
   107b4:	00010361 	.word	0x00010361
   107b8:	0001038d 	.word	0x0001038d
   107bc:	00011569 	.word	0x00011569
   107c0:	00010331 	.word	0x00010331
   107c4:	00011577 	.word	0x00011577
   107c8:	00010375 	.word	0x00010375

000107cc <_spi_set_mode>:
{
   107cc:	b570      	push	{r4, r5, r6, lr}
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   107ce:	69c4      	ldr	r4, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
   107d0:	f014 0403 	ands.w	r4, r4, #3
{
   107d4:	460a      	mov	r2, r1
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
   107d6:	d10e      	bne.n	107f6 <_spi_set_mode+0x2a>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   107d8:	4e08      	ldr	r6, [pc, #32]	; (107fc <_spi_set_mode+0x30>)
   107da:	2103      	movs	r1, #3
   107dc:	47b0      	blx	r6
	return ((Sercom *)hw)->SPI.CTRLA.reg;
   107de:	6803      	ldr	r3, [r0, #0]
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
   107e0:	0712      	lsls	r2, r2, #28
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
   107e2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
   107e6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
   107ea:	431a      	orrs	r2, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   107ec:	6002      	str	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   107ee:	2103      	movs	r1, #3
   107f0:	47b0      	blx	r6
	return ERR_NONE;
   107f2:	4620      	mov	r0, r4
}
   107f4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
   107f6:	f06f 0003 	mvn.w	r0, #3
   107fa:	e7fb      	b.n	107f4 <_spi_set_mode+0x28>
   107fc:	00010329 	.word	0x00010329

00010800 <_spi_load_regs_master>:
{
   10800:	b538      	push	{r3, r4, r5, lr}
   10802:	460d      	mov	r5, r1
	ASSERT(hw && regs);
   10804:	4604      	mov	r4, r0
   10806:	b110      	cbz	r0, 1080e <_spi_load_regs_master+0xe>
   10808:	1e08      	subs	r0, r1, #0
   1080a:	bf18      	it	ne
   1080c:	2001      	movne	r0, #1
   1080e:	490f      	ldr	r1, [pc, #60]	; (1084c <_spi_load_regs_master+0x4c>)
   10810:	4b0f      	ldr	r3, [pc, #60]	; (10850 <_spi_load_regs_master+0x50>)
   10812:	f640 127a 	movw	r2, #2426	; 0x97a
   10816:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
   10818:	682b      	ldr	r3, [r5, #0]
   1081a:	4a0e      	ldr	r2, [pc, #56]	; (10854 <_spi_load_regs_master+0x54>)
	hri_sercomspi_write_CTRLA_reg(
   1081c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
   10820:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10824:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10826:	2103      	movs	r1, #3
   10828:	4620      	mov	r0, r4
   1082a:	4790      	blx	r2
	    (regs->ctrlb
   1082c:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
   1082e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
   10832:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
   10836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
   1083a:	6063      	str	r3, [r4, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   1083c:	2117      	movs	r1, #23
   1083e:	4790      	blx	r2
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
   10840:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
   10842:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
   10844:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
   10846:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   1084a:	bd38      	pop	{r3, r4, r5, pc}
   1084c:	00015dc1 	.word	0x00015dc1
   10850:	0000d305 	.word	0x0000d305
   10854:	00010329 	.word	0x00010329

00010858 <_i2c_m_sync_init_impl>:
{
   10858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1085c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
   1085e:	4b23      	ldr	r3, [pc, #140]	; (108ec <_i2c_m_sync_init_impl+0x94>)
   10860:	f8df 9094 	ldr.w	r9, [pc, #148]	; 108f8 <_i2c_m_sync_init_impl+0xa0>
   10864:	4d22      	ldr	r5, [pc, #136]	; (108f0 <_i2c_m_sync_init_impl+0x98>)
{
   10866:	4607      	mov	r7, r0
	uint8_t i = _get_i2cm_index(hw);
   10868:	4608      	mov	r0, r1
   1086a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
   1086c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
   1086e:	f013 0f01 	tst.w	r3, #1
   10872:	fa5f f880 	uxtb.w	r8, r0
   10876:	d115      	bne.n	108a4 <_i2c_m_sync_init_impl+0x4c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
   10878:	2318      	movs	r3, #24
   1087a:	fb03 9308 	mla	r3, r3, r8, r9
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   1087e:	2103      	movs	r1, #3
   10880:	4620      	mov	r0, r4
   10882:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   10884:	47a8      	blx	r5
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
   10886:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
   10888:	079b      	lsls	r3, r3, #30
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
   1088a:	f006 061c 	and.w	r6, r6, #28
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
   1088e:	d503      	bpl.n	10898 <_i2c_m_sync_init_impl+0x40>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
   10890:	4b18      	ldr	r3, [pc, #96]	; (108f4 <_i2c_m_sync_init_impl+0x9c>)
   10892:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
   10894:	2102      	movs	r1, #2
   10896:	47a8      	blx	r5
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
   10898:	f046 0601 	orr.w	r6, r6, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
   1089c:	6026      	str	r6, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   1089e:	2103      	movs	r1, #3
   108a0:	4620      	mov	r0, r4
   108a2:	47a8      	blx	r5
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
   108a4:	4620      	mov	r0, r4
   108a6:	2101      	movs	r1, #1
   108a8:	47a8      	blx	r5
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
   108aa:	2218      	movs	r2, #24
   108ac:	fb02 9208 	mla	r2, r2, r8, r9
   108b0:	2103      	movs	r1, #3
   108b2:	6c96      	ldr	r6, [r2, #72]	; 0x48
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
   108b4:	6026      	str	r6, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   108b6:	47a8      	blx	r5
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
   108b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
   108ba:	6063      	str	r3, [r4, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   108bc:	2104      	movs	r1, #4
   108be:	47a8      	blx	r5
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
   108c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
	((Sercom *)hw)->I2CM.BAUD.reg = data;
   108c2:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
   108c4:	f3c6 6301 	ubfx	r3, r6, #24, #2
   108c8:	81bb      	strh	r3, [r7, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
   108ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
   108cc:	f3c6 6640 	ubfx	r6, r6, #25, #1
	tmp &= ~SERCOM_I2CM_ADDR_HS;
   108d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
   108d4:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
   108d8:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   108da:	2104      	movs	r1, #4
   108dc:	47a8      	blx	r5
	service->trise = _i2cms[i].trise;
   108de:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
   108e2:	81fb      	strh	r3, [r7, #14]
}
   108e4:	2000      	movs	r0, #0
   108e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   108ea:	bf00      	nop
   108ec:	000105ad 	.word	0x000105ad
   108f0:	00010321 	.word	0x00010321
   108f4:	00010339 	.word	0x00010339
   108f8:	00015ddc 	.word	0x00015ddc

000108fc <_usart_init>:
{
   108fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
   10900:	4b2d      	ldr	r3, [pc, #180]	; (109b8 <_usart_init+0xbc>)
{
   10902:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
   10904:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
   10906:	4605      	mov	r5, r0
   10908:	b170      	cbz	r0, 10928 <_usart_init+0x2c>
   1090a:	2801      	cmp	r0, #1
   1090c:	d00c      	beq.n	10928 <_usart_init+0x2c>
   1090e:	2802      	cmp	r0, #2
   10910:	d00a      	beq.n	10928 <_usart_init+0x2c>
   10912:	2804      	cmp	r0, #4
   10914:	d04b      	beq.n	109ae <_usart_init+0xb2>
   10916:	2806      	cmp	r0, #6
   10918:	d04b      	beq.n	109b2 <_usart_init+0xb6>
	ASSERT(false);
   1091a:	4928      	ldr	r1, [pc, #160]	; (109bc <_usart_init+0xc0>)
   1091c:	4b28      	ldr	r3, [pc, #160]	; (109c0 <_usart_init+0xc4>)
   1091e:	f240 2276 	movw	r2, #630	; 0x276
   10922:	2000      	movs	r0, #0
   10924:	4798      	blx	r3
	return 0;
   10926:	2500      	movs	r5, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
   10928:	69e3      	ldr	r3, [r4, #28]
   1092a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 109cc <_usart_init+0xd0>
   1092e:	4e25      	ldr	r6, [pc, #148]	; (109c4 <_usart_init+0xc8>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
   10930:	f013 0f01 	tst.w	r3, #1
   10934:	d115      	bne.n	10962 <_usart_init+0x66>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
   10936:	2318      	movs	r3, #24
   10938:	fb03 8305 	mla	r3, r3, r5, r8
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   1093c:	2103      	movs	r1, #3
   1093e:	4620      	mov	r0, r4
   10940:	6e1f      	ldr	r7, [r3, #96]	; 0x60
   10942:	47b0      	blx	r6
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
   10944:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
   10946:	079b      	lsls	r3, r3, #30
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
   10948:	f007 071c 	and.w	r7, r7, #28
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
   1094c:	d503      	bpl.n	10956 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
   1094e:	4b1e      	ldr	r3, [pc, #120]	; (109c8 <_usart_init+0xcc>)
   10950:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
   10952:	2102      	movs	r1, #2
   10954:	47b0      	blx	r6
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
   10956:	f047 0701 	orr.w	r7, r7, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
   1095a:	6027      	str	r7, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   1095c:	2103      	movs	r1, #3
   1095e:	4620      	mov	r0, r4
   10960:	47b0      	blx	r6
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
   10962:	2101      	movs	r1, #1
   10964:	4620      	mov	r0, r4
   10966:	47b0      	blx	r6
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
   10968:	2018      	movs	r0, #24
   1096a:	fb00 8505 	mla	r5, r0, r5, r8
   1096e:	2103      	movs	r1, #3
   10970:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	((Sercom *)hw)->USART.CTRLA.reg = data;
   10972:	6022      	str	r2, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10974:	4620      	mov	r0, r4
   10976:	47b0      	blx	r6
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
   10978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
	((Sercom *)hw)->USART.CTRLB.reg = data;
   1097a:	6063      	str	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   1097c:	211f      	movs	r1, #31
   1097e:	47b0      	blx	r6
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
   10980:	6eab      	ldr	r3, [r5, #104]	; 0x68
	((Sercom *)hw)->USART.CTRLC.reg = data;
   10982:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
   10984:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
   10988:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   1098c:	d008      	beq.n	109a0 <_usart_init+0xa4>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
   1098e:	89a2      	ldrh	r2, [r4, #12]
   10990:	f363 020c 	bfi	r2, r3, #0, #13
   10994:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
   10996:	89a3      	ldrh	r3, [r4, #12]
   10998:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
   1099c:	f362 334f 	bfi	r3, r2, #13, #3
	((Sercom *)hw)->USART.RXPL.reg = data;
   109a0:	2000      	movs	r0, #0
	((Sercom *)hw)->USART.BAUD.reg = data;
   109a2:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
   109a4:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
   109a6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
   109aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
   109ae:	2503      	movs	r5, #3
   109b0:	e7ba      	b.n	10928 <_usart_init+0x2c>
   109b2:	2504      	movs	r5, #4
   109b4:	e7b8      	b.n	10928 <_usart_init+0x2c>
   109b6:	bf00      	nop
   109b8:	000103a1 	.word	0x000103a1
   109bc:	00015dc1 	.word	0x00015dc1
   109c0:	0000d305 	.word	0x0000d305
   109c4:	00010331 	.word	0x00010331
   109c8:	0001038d 	.word	0x0001038d
   109cc:	00015ddc 	.word	0x00015ddc

000109d0 <_usart_sync_init>:
{
   109d0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   109d2:	4605      	mov	r5, r0
   109d4:	3800      	subs	r0, #0
{
   109d6:	460c      	mov	r4, r1
	ASSERT(device);
   109d8:	4b05      	ldr	r3, [pc, #20]	; (109f0 <_usart_sync_init+0x20>)
   109da:	4906      	ldr	r1, [pc, #24]	; (109f4 <_usart_sync_init+0x24>)
   109dc:	bf18      	it	ne
   109de:	2001      	movne	r0, #1
   109e0:	22c8      	movs	r2, #200	; 0xc8
   109e2:	4798      	blx	r3
	device->hw = hw;
   109e4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
   109e6:	4620      	mov	r0, r4
   109e8:	4b03      	ldr	r3, [pc, #12]	; (109f8 <_usart_sync_init+0x28>)
}
   109ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _usart_init(hw);
   109ee:	4718      	bx	r3
   109f0:	0000d305 	.word	0x0000d305
   109f4:	00015dc1 	.word	0x00015dc1
   109f8:	000108fd 	.word	0x000108fd

000109fc <_usart_async_init>:
{
   109fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ASSERT(device);
   10a00:	4606      	mov	r6, r0
   10a02:	3800      	subs	r0, #0
   10a04:	bf18      	it	ne
   10a06:	2001      	movne	r0, #1
   10a08:	4b12      	ldr	r3, [pc, #72]	; (10a54 <_usart_async_init+0x58>)
{
   10a0a:	460c      	mov	r4, r1
	ASSERT(device);
   10a0c:	22d6      	movs	r2, #214	; 0xd6
   10a0e:	4912      	ldr	r1, [pc, #72]	; (10a58 <_usart_async_init+0x5c>)
   10a10:	4798      	blx	r3
	init_status = _usart_init(hw);
   10a12:	4b12      	ldr	r3, [pc, #72]	; (10a5c <_usart_async_init+0x60>)
   10a14:	4620      	mov	r0, r4
   10a16:	4798      	blx	r3
	if (init_status) {
   10a18:	4605      	mov	r5, r0
   10a1a:	b9b8      	cbnz	r0, 10a4c <_usart_async_init+0x50>
	_sercom_init_irq_param(hw, (void *)device);
   10a1c:	4631      	mov	r1, r6
	device->hw = hw;
   10a1e:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
   10a20:	4620      	mov	r0, r4
   10a22:	4b0f      	ldr	r3, [pc, #60]	; (10a60 <_usart_async_init+0x64>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   10a24:	f8df 8048 	ldr.w	r8, [pc, #72]	; 10a70 <_usart_async_init+0x74>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10a28:	4f0e      	ldr	r7, [pc, #56]	; (10a64 <_usart_async_init+0x68>)
		NVIC_EnableIRQ((IRQn_Type)irq);
   10a2a:	4e0f      	ldr	r6, [pc, #60]	; (10a68 <_usart_async_init+0x6c>)
	_sercom_init_irq_param(hw, (void *)device);
   10a2c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
   10a2e:	4b0f      	ldr	r3, [pc, #60]	; (10a6c <_usart_async_init+0x70>)
   10a30:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   10a32:	4629      	mov	r1, r5
	uint8_t irq = _sercom_get_irq_num(hw);
   10a34:	4604      	mov	r4, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   10a36:	1863      	adds	r3, r4, r1
   10a38:	b2d8      	uxtb	r0, r3
   10a3a:	9001      	str	r0, [sp, #4]
   10a3c:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10a3e:	9801      	ldr	r0, [sp, #4]
   10a40:	47b8      	blx	r7
		NVIC_EnableIRQ((IRQn_Type)irq);
   10a42:	9801      	ldr	r0, [sp, #4]
   10a44:	47b0      	blx	r6
	for (uint32_t i = 0; i < 4; i++) {
   10a46:	3101      	adds	r1, #1
   10a48:	2904      	cmp	r1, #4
   10a4a:	d1f4      	bne.n	10a36 <_usart_async_init+0x3a>
}
   10a4c:	4628      	mov	r0, r5
   10a4e:	b002      	add	sp, #8
   10a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a54:	0000d305 	.word	0x0000d305
   10a58:	00015dc1 	.word	0x00015dc1
   10a5c:	000108fd 	.word	0x000108fd
   10a60:	00010449 	.word	0x00010449
   10a64:	00010591 	.word	0x00010591
   10a68:	00010525 	.word	0x00010525
   10a6c:	000104a9 	.word	0x000104a9
   10a70:	0001056d 	.word	0x0001056d

00010a74 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
   10a74:	6800      	ldr	r0, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   10a76:	6803      	ldr	r3, [r0, #0]
   10a78:	f043 0302 	orr.w	r3, r3, #2
   10a7c:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10a7e:	2103      	movs	r1, #3
   10a80:	4b00      	ldr	r3, [pc, #0]	; (10a84 <_usart_sync_enable+0x10>)
   10a82:	4718      	bx	r3
   10a84:	00010331 	.word	0x00010331

00010a88 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
   10a88:	6980      	ldr	r0, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   10a8a:	6803      	ldr	r3, [r0, #0]
   10a8c:	f043 0302 	orr.w	r3, r3, #2
   10a90:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10a92:	2103      	movs	r1, #3
   10a94:	4b00      	ldr	r3, [pc, #0]	; (10a98 <_usart_async_enable+0x10>)
   10a96:	4718      	bx	r3
   10a98:	00010331 	.word	0x00010331

00010a9c <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
   10a9c:	6980      	ldr	r0, [r0, #24]
   10a9e:	4b01      	ldr	r3, [pc, #4]	; (10aa4 <_usart_async_disable+0x8>)
   10aa0:	4718      	bx	r3
   10aa2:	bf00      	nop
   10aa4:	0001038d 	.word	0x0001038d

00010aa8 <_usart_async_set_parity>:
	_usart_set_parity(device->hw, parity);
   10aa8:	6980      	ldr	r0, [r0, #24]
   10aaa:	4b01      	ldr	r3, [pc, #4]	; (10ab0 <_usart_async_set_parity+0x8>)
   10aac:	4718      	bx	r3
   10aae:	bf00      	nop
   10ab0:	00010759 	.word	0x00010759

00010ab4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
   10ab4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
   10ab6:	6299      	str	r1, [r3, #40]	; 0x28
}
   10ab8:	4770      	bx	lr

00010aba <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
   10aba:	6983      	ldr	r3, [r0, #24]
   10abc:	6299      	str	r1, [r3, #40]	; 0x28
}
   10abe:	4770      	bx	lr

00010ac0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
   10ac0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
   10ac2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
   10ac4:	b2c0      	uxtb	r0, r0
   10ac6:	4770      	bx	lr

00010ac8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
   10ac8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
   10aca:	7e18      	ldrb	r0, [r3, #24]
}
   10acc:	f000 0001 	and.w	r0, r0, #1
   10ad0:	4770      	bx	lr

00010ad2 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
   10ad2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
   10ad4:	7e18      	ldrb	r0, [r3, #24]
}
   10ad6:	f3c0 0040 	ubfx	r0, r0, #1, #1
   10ada:	4770      	bx	lr

00010adc <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
   10adc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
   10ade:	7e18      	ldrb	r0, [r3, #24]
}
   10ae0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   10ae4:	4770      	bx	lr

00010ae6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
   10ae6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10ae8:	2201      	movs	r2, #1
   10aea:	759a      	strb	r2, [r3, #22]
}
   10aec:	4770      	bx	lr

00010aee <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
   10aee:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
   10af0:	2202      	movs	r2, #2
   10af2:	759a      	strb	r2, [r3, #22]
}
   10af4:	4770      	bx	lr
	...

00010af8 <_usart_async_set_irq_state>:
{
   10af8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   10afa:	4604      	mov	r4, r0
   10afc:	3800      	subs	r0, #0
{
   10afe:	460e      	mov	r6, r1
	ASSERT(device);
   10b00:	bf18      	it	ne
   10b02:	2001      	movne	r0, #1
   10b04:	490f      	ldr	r1, [pc, #60]	; (10b44 <_usart_async_set_irq_state+0x4c>)
   10b06:	4b10      	ldr	r3, [pc, #64]	; (10b48 <_usart_async_set_irq_state+0x50>)
{
   10b08:	4615      	mov	r5, r2
	ASSERT(device);
   10b0a:	f240 2236 	movw	r2, #566	; 0x236
   10b0e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
   10b10:	f016 0ffd 	tst.w	r6, #253	; 0xfd
   10b14:	d109      	bne.n	10b2a <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
   10b16:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
   10b18:	2101      	movs	r1, #1
   10b1a:	2202      	movs	r2, #2
   10b1c:	b915      	cbnz	r5, 10b24 <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
   10b1e:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
   10b20:	751a      	strb	r2, [r3, #20]
}
   10b22:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10b24:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
   10b26:	759a      	strb	r2, [r3, #22]
   10b28:	e7fb      	b.n	10b22 <_usart_async_set_irq_state+0x2a>
	} else if (USART_ASYNC_RX_DONE == type) {
   10b2a:	2e01      	cmp	r6, #1
   10b2c:	d104      	bne.n	10b38 <_usart_async_set_irq_state+0x40>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
   10b2e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
   10b30:	2204      	movs	r2, #4
	if (value == 0x0) {
   10b32:	2d00      	cmp	r5, #0
   10b34:	d1f7      	bne.n	10b26 <_usart_async_set_irq_state+0x2e>
   10b36:	e7f3      	b.n	10b20 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
   10b38:	2e03      	cmp	r6, #3
   10b3a:	d1f2      	bne.n	10b22 <_usart_async_set_irq_state+0x2a>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
   10b3c:	69a3      	ldr	r3, [r4, #24]
   10b3e:	2280      	movs	r2, #128	; 0x80
   10b40:	e7f7      	b.n	10b32 <_usart_async_set_irq_state+0x3a>
   10b42:	bf00      	nop
   10b44:	00015dc1 	.word	0x00015dc1
   10b48:	0000d305 	.word	0x0000d305

00010b4c <_i2c_m_async_init>:
{
   10b4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ASSERT(i2c_dev);
   10b50:	4605      	mov	r5, r0
   10b52:	3800      	subs	r0, #0
{
   10b54:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
   10b56:	bf18      	it	ne
   10b58:	2001      	movne	r0, #1
   10b5a:	4913      	ldr	r1, [pc, #76]	; (10ba8 <_i2c_m_async_init+0x5c>)
   10b5c:	4b13      	ldr	r3, [pc, #76]	; (10bac <_i2c_m_async_init+0x60>)
   10b5e:	f240 42d3 	movw	r2, #1235	; 0x4d3
   10b62:	4798      	blx	r3
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
   10b64:	4b12      	ldr	r3, [pc, #72]	; (10bb0 <_i2c_m_async_init+0x64>)
	i2c_dev->hw = hw;
   10b66:	612c      	str	r4, [r5, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
   10b68:	4621      	mov	r1, r4
   10b6a:	4628      	mov	r0, r5
   10b6c:	4798      	blx	r3
	if (init_status) {
   10b6e:	4606      	mov	r6, r0
   10b70:	b9b0      	cbnz	r0, 10ba0 <_i2c_m_async_init+0x54>
	_sercom_init_irq_param(hw, (void *)i2c_dev);
   10b72:	4629      	mov	r1, r5
   10b74:	4620      	mov	r0, r4
   10b76:	4b0f      	ldr	r3, [pc, #60]	; (10bb4 <_i2c_m_async_init+0x68>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   10b78:	f8df 8048 	ldr.w	r8, [pc, #72]	; 10bc4 <_i2c_m_async_init+0x78>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10b7c:	4f0e      	ldr	r7, [pc, #56]	; (10bb8 <_i2c_m_async_init+0x6c>)
		NVIC_EnableIRQ((IRQn_Type)irq);
   10b7e:	4d0f      	ldr	r5, [pc, #60]	; (10bbc <_i2c_m_async_init+0x70>)
	_sercom_init_irq_param(hw, (void *)i2c_dev);
   10b80:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
   10b82:	4b0f      	ldr	r3, [pc, #60]	; (10bc0 <_i2c_m_async_init+0x74>)
   10b84:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   10b86:	4631      	mov	r1, r6
	uint8_t irq = _sercom_get_irq_num(hw);
   10b88:	4604      	mov	r4, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   10b8a:	1863      	adds	r3, r4, r1
   10b8c:	b2d8      	uxtb	r0, r3
   10b8e:	9001      	str	r0, [sp, #4]
   10b90:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10b92:	9801      	ldr	r0, [sp, #4]
   10b94:	47b8      	blx	r7
		NVIC_EnableIRQ((IRQn_Type)irq);
   10b96:	9801      	ldr	r0, [sp, #4]
   10b98:	47a8      	blx	r5
	for (uint32_t i = 0; i < 4; i++) {
   10b9a:	3101      	adds	r1, #1
   10b9c:	2904      	cmp	r1, #4
   10b9e:	d1f4      	bne.n	10b8a <_i2c_m_async_init+0x3e>
}
   10ba0:	4630      	mov	r0, r6
   10ba2:	b002      	add	sp, #8
   10ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10ba8:	00015dc1 	.word	0x00015dc1
   10bac:	0000d305 	.word	0x0000d305
   10bb0:	00010859 	.word	0x00010859
   10bb4:	00010449 	.word	0x00010449
   10bb8:	00010591 	.word	0x00010591
   10bbc:	00010525 	.word	0x00010525
   10bc0:	000104a9 	.word	0x000104a9
   10bc4:	0001056d 	.word	0x0001056d

00010bc8 <_i2c_m_async_transfer>:
{
   10bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT(i2c_dev);
   10bcc:	4604      	mov	r4, r0
   10bce:	3800      	subs	r0, #0
   10bd0:	4e3c      	ldr	r6, [pc, #240]	; (10cc4 <_i2c_m_async_transfer+0xfc>)
{
   10bd2:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
   10bd4:	bf18      	it	ne
   10bd6:	2001      	movne	r0, #1
   10bd8:	493b      	ldr	r1, [pc, #236]	; (10cc8 <_i2c_m_async_transfer+0x100>)
   10bda:	f240 5229 	movw	r2, #1321	; 0x529
   10bde:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
   10be0:	6920      	ldr	r0, [r4, #16]
   10be2:	4939      	ldr	r1, [pc, #228]	; (10cc8 <_i2c_m_async_transfer+0x100>)
   10be4:	3800      	subs	r0, #0
   10be6:	f240 522a 	movw	r2, #1322	; 0x52a
   10bea:	bf18      	it	ne
   10bec:	2001      	movne	r0, #1
   10bee:	47b0      	blx	r6
	ASSERT(msg);
   10bf0:	1e28      	subs	r0, r5, #0
   10bf2:	bf18      	it	ne
   10bf4:	2001      	movne	r0, #1
   10bf6:	4934      	ldr	r1, [pc, #208]	; (10cc8 <_i2c_m_async_transfer+0x100>)
   10bf8:	f240 522b 	movw	r2, #1323	; 0x52b
   10bfc:	47b0      	blx	r6
	if (msg->len == 0) {
   10bfe:	6868      	ldr	r0, [r5, #4]
   10c00:	2800      	cmp	r0, #0
   10c02:	d048      	beq.n	10c96 <_i2c_m_async_transfer+0xce>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
   10c04:	8863      	ldrh	r3, [r4, #2]
   10c06:	05da      	lsls	r2, r3, #23
   10c08:	d458      	bmi.n	10cbc <_i2c_m_async_transfer+0xf4>
	msg->flags |= I2C_M_BUSY;
   10c0a:	886b      	ldrh	r3, [r5, #2]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10c0c:	4f2f      	ldr	r7, [pc, #188]	; (10ccc <_i2c_m_async_transfer+0x104>)
   10c0e:	b29b      	uxth	r3, r3
   10c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10c14:	806b      	strh	r3, [r5, #2]
	i2c_dev->service.msg = *msg;
   10c16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   10c1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
   10c1e:	6920      	ldr	r0, [r4, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
   10c20:	6843      	ldr	r3, [r0, #4]
   10c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10c26:	6043      	str	r3, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10c28:	2104      	movs	r1, #4
   10c2a:	47b8      	blx	r7
	void *             hw    = i2c_dev->hw;
   10c2c:	6925      	ldr	r5, [r4, #16]
	ASSERT(i2c_dev);
   10c2e:	4926      	ldr	r1, [pc, #152]	; (10cc8 <_i2c_m_async_transfer+0x100>)
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
   10c30:	f8d5 8000 	ldr.w	r8, [r5]
   10c34:	f240 5201 	movw	r2, #1281	; 0x501
   10c38:	2001      	movs	r0, #1
   10c3a:	47b0      	blx	r6
	if (msg->len == 1 && sclsm) {
   10c3c:	6863      	ldr	r3, [r4, #4]
   10c3e:	2b01      	cmp	r3, #1
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   10c40:	686b      	ldr	r3, [r5, #4]
   10c42:	d12a      	bne.n	10c9a <_i2c_m_async_transfer+0xd2>
   10c44:	f018 6f00 	tst.w	r8, #134217728	; 0x8000000
   10c48:	d027      	beq.n	10c9a <_i2c_m_async_transfer+0xd2>
   10c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10c4e:	4628      	mov	r0, r5
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   10c50:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10c52:	2104      	movs	r1, #4
   10c54:	47b8      	blx	r7
	if (msg->addr & I2C_M_TEN) {
   10c56:	8820      	ldrh	r0, [r4, #0]
   10c58:	f410 6680 	ands.w	r6, r0, #1024	; 0x400
   10c5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   10c60:	d01e      	beq.n	10ca0 <_i2c_m_async_transfer+0xd8>
		if (msg->flags & I2C_M_RD) {
   10c62:	8863      	ldrh	r3, [r4, #2]
   10c64:	07db      	lsls	r3, r3, #31
			msg->flags |= I2C_M_TEN;
   10c66:	bf41      	itttt	mi
   10c68:	8863      	ldrhmi	r3, [r4, #2]
   10c6a:	b29b      	uxthmi	r3, r3
   10c6c:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
   10c70:	8063      	strhmi	r3, [r4, #2]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10c72:	2104      	movs	r1, #4
   10c74:	4628      	mov	r0, r5
   10c76:	47b8      	blx	r7
	return ((Sercom *)hw)->I2CM.ADDR.reg;
   10c78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
   10c7a:	f022 0201 	bic.w	r2, r2, #1
   10c7e:	0552      	lsls	r2, r2, #21
   10c80:	0d52      	lsrs	r2, r2, #21
   10c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   10c86:	431a      	orrs	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
   10c88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10c8c:	4628      	mov	r0, r5
	((Sercom *)hw)->I2CM.ADDR.reg = data;
   10c8e:	626a      	str	r2, [r5, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10c90:	2104      	movs	r1, #4
   10c92:	47b8      	blx	r7
	return ERR_NONE;
   10c94:	2000      	movs	r0, #0
}
   10c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   10c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   10c9e:	e7d6      	b.n	10c4e <_i2c_m_async_transfer+0x86>
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10ca0:	2104      	movs	r1, #4
   10ca2:	4628      	mov	r0, r5
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
   10ca4:	8864      	ldrh	r4, [r4, #2]
   10ca6:	47b8      	blx	r7
   10ca8:	b2a4      	uxth	r4, r4
	return ((Sercom *)hw)->I2CM.ADDR.reg;
   10caa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10cac:	b2d2      	uxtb	r2, r2
   10cae:	f004 0401 	and.w	r4, r4, #1
   10cb2:	4322      	orrs	r2, r4
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
   10cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
   10cb8:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
   10cba:	e7e7      	b.n	10c8c <_i2c_m_async_transfer+0xc4>
		return ERR_BUSY;
   10cbc:	f06f 0003 	mvn.w	r0, #3
   10cc0:	e7e9      	b.n	10c96 <_i2c_m_async_transfer+0xce>
   10cc2:	bf00      	nop
   10cc4:	0000d305 	.word	0x0000d305
   10cc8:	00015dc1 	.word	0x00015dc1
   10ccc:	00010321 	.word	0x00010321

00010cd0 <_i2c_m_async_register_callback>:
	switch (type) {
   10cd0:	2901      	cmp	r1, #1
   10cd2:	d005      	beq.n	10ce0 <_i2c_m_async_register_callback+0x10>
   10cd4:	2902      	cmp	r1, #2
   10cd6:	d005      	beq.n	10ce4 <_i2c_m_async_register_callback+0x14>
   10cd8:	b901      	cbnz	r1, 10cdc <_i2c_m_async_register_callback+0xc>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
   10cda:	6142      	str	r2, [r0, #20]
}
   10cdc:	2000      	movs	r0, #0
   10cde:	4770      	bx	lr
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
   10ce0:	6182      	str	r2, [r0, #24]
		break;
   10ce2:	e7fb      	b.n	10cdc <_i2c_m_async_register_callback+0xc>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
   10ce4:	61c2      	str	r2, [r0, #28]
		break;
   10ce6:	e7f9      	b.n	10cdc <_i2c_m_async_register_callback+0xc>

00010ce8 <SERCOM0_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom0_dev);
   10ce8:	4b01      	ldr	r3, [pc, #4]	; (10cf0 <SERCOM0_0_Handler+0x8>)
   10cea:	6818      	ldr	r0, [r3, #0]
   10cec:	4b01      	ldr	r3, [pc, #4]	; (10cf4 <SERCOM0_0_Handler+0xc>)
   10cee:	4718      	bx	r3
   10cf0:	20001084 	.word	0x20001084
   10cf4:	000103d9 	.word	0x000103d9

00010cf8 <SERCOM0_1_Handler>:
   10cf8:	4b00      	ldr	r3, [pc, #0]	; (10cfc <SERCOM0_1_Handler+0x4>)
   10cfa:	4718      	bx	r3
   10cfc:	00010ce9 	.word	0x00010ce9

00010d00 <SERCOM0_2_Handler>:
   10d00:	4b00      	ldr	r3, [pc, #0]	; (10d04 <SERCOM0_2_Handler+0x4>)
   10d02:	4718      	bx	r3
   10d04:	00010ce9 	.word	0x00010ce9

00010d08 <SERCOM0_3_Handler>:
   10d08:	4b00      	ldr	r3, [pc, #0]	; (10d0c <SERCOM0_3_Handler+0x4>)
   10d0a:	4718      	bx	r3
   10d0c:	00010ce9 	.word	0x00010ce9

00010d10 <SERCOM1_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom1_dev);
   10d10:	4b01      	ldr	r3, [pc, #4]	; (10d18 <SERCOM1_0_Handler+0x8>)
   10d12:	6858      	ldr	r0, [r3, #4]
   10d14:	4b01      	ldr	r3, [pc, #4]	; (10d1c <SERCOM1_0_Handler+0xc>)
   10d16:	4718      	bx	r3
   10d18:	20001084 	.word	0x20001084
   10d1c:	000103d9 	.word	0x000103d9

00010d20 <SERCOM1_1_Handler>:
   10d20:	4b00      	ldr	r3, [pc, #0]	; (10d24 <SERCOM1_1_Handler+0x4>)
   10d22:	4718      	bx	r3
   10d24:	00010d11 	.word	0x00010d11

00010d28 <SERCOM1_2_Handler>:
   10d28:	4b00      	ldr	r3, [pc, #0]	; (10d2c <SERCOM1_2_Handler+0x4>)
   10d2a:	4718      	bx	r3
   10d2c:	00010d11 	.word	0x00010d11

00010d30 <SERCOM1_3_Handler>:
   10d30:	4b00      	ldr	r3, [pc, #0]	; (10d34 <SERCOM1_3_Handler+0x4>)
   10d32:	4718      	bx	r3
   10d34:	00010d11 	.word	0x00010d11

00010d38 <SERCOM3_0_Handler>:
	_spi_handler(_sercom3_dev);
   10d38:	4b0f      	ldr	r3, [pc, #60]	; (10d78 <SERCOM3_0_Handler+0x40>)
   10d3a:	6898      	ldr	r0, [r3, #8]
	void *                      hw = dev->prvt;
   10d3c:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
   10d3e:	7e13      	ldrb	r3, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
   10d40:	7d91      	ldrb	r1, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
   10d42:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
   10d44:	07d9      	lsls	r1, r3, #31
   10d46:	d501      	bpl.n	10d4c <SERCOM3_0_Handler+0x14>
		dev->callbacks.tx(dev);
   10d48:	6883      	ldr	r3, [r0, #8]
		dev->callbacks.rx(dev);
   10d4a:	4718      	bx	r3
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
   10d4c:	0759      	lsls	r1, r3, #29
   10d4e:	d501      	bpl.n	10d54 <SERCOM3_0_Handler+0x1c>
		dev->callbacks.rx(dev);
   10d50:	68c3      	ldr	r3, [r0, #12]
   10d52:	e7fa      	b.n	10d4a <SERCOM3_0_Handler+0x12>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
   10d54:	0799      	lsls	r1, r3, #30
   10d56:	d503      	bpl.n	10d60 <SERCOM3_0_Handler+0x28>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
   10d58:	2302      	movs	r3, #2
   10d5a:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
   10d5c:	6903      	ldr	r3, [r0, #16]
   10d5e:	e7f4      	b.n	10d4a <SERCOM3_0_Handler+0x12>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
   10d60:	061b      	lsls	r3, r3, #24
   10d62:	d507      	bpl.n	10d74 <SERCOM3_0_Handler+0x3c>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
   10d64:	2304      	movs	r3, #4
   10d66:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
   10d68:	2380      	movs	r3, #128	; 0x80
   10d6a:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
   10d6c:	f06f 0112 	mvn.w	r1, #18
   10d70:	6943      	ldr	r3, [r0, #20]
   10d72:	4718      	bx	r3
}
   10d74:	4770      	bx	lr
   10d76:	bf00      	nop
   10d78:	20001084 	.word	0x20001084

00010d7c <SERCOM3_1_Handler>:
   10d7c:	4b00      	ldr	r3, [pc, #0]	; (10d80 <SERCOM3_1_Handler+0x4>)
   10d7e:	4718      	bx	r3
   10d80:	00010d39 	.word	0x00010d39

00010d84 <SERCOM3_2_Handler>:
   10d84:	4b00      	ldr	r3, [pc, #0]	; (10d88 <SERCOM3_2_Handler+0x4>)
   10d86:	4718      	bx	r3
   10d88:	00010d39 	.word	0x00010d39

00010d8c <SERCOM3_3_Handler>:
   10d8c:	4b00      	ldr	r3, [pc, #0]	; (10d90 <SERCOM3_3_Handler+0x4>)
   10d8e:	4718      	bx	r3
   10d90:	00010d39 	.word	0x00010d39

00010d94 <SERCOM4_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom4_dev);
   10d94:	4b01      	ldr	r3, [pc, #4]	; (10d9c <SERCOM4_0_Handler+0x8>)
   10d96:	68d8      	ldr	r0, [r3, #12]
   10d98:	4b01      	ldr	r3, [pc, #4]	; (10da0 <SERCOM4_0_Handler+0xc>)
   10d9a:	4718      	bx	r3
   10d9c:	20001084 	.word	0x20001084
   10da0:	000103d9 	.word	0x000103d9

00010da4 <SERCOM4_1_Handler>:
   10da4:	4b00      	ldr	r3, [pc, #0]	; (10da8 <SERCOM4_1_Handler+0x4>)
   10da6:	4718      	bx	r3
   10da8:	00010d95 	.word	0x00010d95

00010dac <SERCOM4_2_Handler>:
   10dac:	4b00      	ldr	r3, [pc, #0]	; (10db0 <SERCOM4_2_Handler+0x4>)
   10dae:	4718      	bx	r3
   10db0:	00010d95 	.word	0x00010d95

00010db4 <SERCOM4_3_Handler>:
   10db4:	4b00      	ldr	r3, [pc, #0]	; (10db8 <SERCOM4_3_Handler+0x4>)
   10db6:	4718      	bx	r3
   10db8:	00010d95 	.word	0x00010d95

00010dbc <SERCOM5_0_Handler>:
	_sercom_i2c_m_irq_handler(_sercom5_dev);
   10dbc:	4b1f      	ldr	r3, [pc, #124]	; (10e3c <SERCOM5_0_Handler+0x80>)
	ASSERT(i2c_dev);
   10dbe:	4920      	ldr	r1, [pc, #128]	; (10e40 <SERCOM5_0_Handler+0x84>)
{
   10dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
   10dc4:	691c      	ldr	r4, [r3, #16]
	ASSERT(i2c_dev);
   10dc6:	4f1f      	ldr	r7, [pc, #124]	; (10e44 <SERCOM5_0_Handler+0x88>)
	void *   hw    = i2c_dev->hw;
   10dc8:	6926      	ldr	r6, [r4, #16]
	ASSERT(i2c_dev);
   10dca:	f240 425f 	movw	r2, #1119	; 0x45f
   10dce:	2001      	movs	r0, #1
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
   10dd0:	7e35      	ldrb	r5, [r6, #24]
   10dd2:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
   10dd4:	6920      	ldr	r0, [r4, #16]
   10dd6:	491a      	ldr	r1, [pc, #104]	; (10e40 <SERCOM5_0_Handler+0x84>)
   10dd8:	3800      	subs	r0, #0
   10dda:	bf18      	it	ne
   10ddc:	2001      	movne	r0, #1
   10dde:	b2ed      	uxtb	r5, r5
   10de0:	f44f 628c 	mov.w	r2, #1120	; 0x460
   10de4:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
   10de6:	0629      	lsls	r1, r5, #24
   10de8:	d415      	bmi.n	10e16 <SERCOM5_0_Handler+0x5a>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
   10dea:	4629      	mov	r1, r5
   10dec:	4b16      	ldr	r3, [pc, #88]	; (10e48 <SERCOM5_0_Handler+0x8c>)
   10dee:	4622      	mov	r2, r4
   10df0:	4630      	mov	r0, r6
   10df2:	4798      	blx	r3
		if (ret != 0) {
   10df4:	4601      	mov	r1, r0
   10df6:	b978      	cbnz	r0, 10e18 <SERCOM5_0_Handler+0x5c>
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
   10df8:	07ea      	lsls	r2, r5, #31
   10dfa:	d505      	bpl.n	10e08 <SERCOM5_0_Handler+0x4c>
   10dfc:	69a3      	ldr	r3, [r4, #24]
   10dfe:	b11b      	cbz	r3, 10e08 <SERCOM5_0_Handler+0x4c>
			i2c_dev->cb.rx_complete(i2c_dev);
   10e00:	4620      	mov	r0, r4
}
   10e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			i2c_dev->cb.rx_complete(i2c_dev);
   10e06:	4718      	bx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
   10e08:	07ab      	lsls	r3, r5, #30
   10e0a:	d502      	bpl.n	10e12 <SERCOM5_0_Handler+0x56>
   10e0c:	69e3      	ldr	r3, [r4, #28]
   10e0e:	2b00      	cmp	r3, #0
   10e10:	d1f6      	bne.n	10e00 <SERCOM5_0_Handler+0x44>
}
   10e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int32_t  ret   = I2C_OK;
   10e16:	2100      	movs	r1, #0
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
   10e18:	8863      	ldrh	r3, [r4, #2]
   10e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10e1e:	041b      	lsls	r3, r3, #16
   10e20:	0c1b      	lsrs	r3, r3, #16
   10e22:	8063      	strh	r3, [r4, #2]
	if (i2c_dev->cb.error) {
   10e24:	6963      	ldr	r3, [r4, #20]
   10e26:	2b00      	cmp	r3, #0
   10e28:	d0f3      	beq.n	10e12 <SERCOM5_0_Handler+0x56>
		if (ret != I2C_OK) {
   10e2a:	b121      	cbz	r1, 10e36 <SERCOM5_0_Handler+0x7a>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
   10e2c:	4620      	mov	r0, r4
   10e2e:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
   10e30:	2380      	movs	r3, #128	; 0x80
   10e32:	7633      	strb	r3, [r6, #24]
}
   10e34:	e7ed      	b.n	10e12 <SERCOM5_0_Handler+0x56>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
   10e36:	f06f 0104 	mvn.w	r1, #4
   10e3a:	e7f7      	b.n	10e2c <SERCOM5_0_Handler+0x70>
   10e3c:	20001084 	.word	0x20001084
   10e40:	00015dc1 	.word	0x00015dc1
   10e44:	0000d305 	.word	0x0000d305
   10e48:	000105ed 	.word	0x000105ed

00010e4c <SERCOM5_1_Handler>:
   10e4c:	4b00      	ldr	r3, [pc, #0]	; (10e50 <SERCOM5_1_Handler+0x4>)
   10e4e:	4718      	bx	r3
   10e50:	00010dbd 	.word	0x00010dbd

00010e54 <SERCOM5_2_Handler>:
   10e54:	4b00      	ldr	r3, [pc, #0]	; (10e58 <SERCOM5_2_Handler+0x4>)
   10e56:	4718      	bx	r3
   10e58:	00010dbd 	.word	0x00010dbd

00010e5c <SERCOM5_3_Handler>:
   10e5c:	4b00      	ldr	r3, [pc, #0]	; (10e60 <SERCOM5_3_Handler+0x4>)
   10e5e:	4718      	bx	r3
   10e60:	00010dbd 	.word	0x00010dbd

00010e64 <SERCOM6_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom6_dev);
   10e64:	4b01      	ldr	r3, [pc, #4]	; (10e6c <SERCOM6_0_Handler+0x8>)
   10e66:	6958      	ldr	r0, [r3, #20]
   10e68:	4b01      	ldr	r3, [pc, #4]	; (10e70 <SERCOM6_0_Handler+0xc>)
   10e6a:	4718      	bx	r3
   10e6c:	20001084 	.word	0x20001084
   10e70:	000103d9 	.word	0x000103d9

00010e74 <SERCOM6_1_Handler>:
   10e74:	4b00      	ldr	r3, [pc, #0]	; (10e78 <SERCOM6_1_Handler+0x4>)
   10e76:	4718      	bx	r3
   10e78:	00010e65 	.word	0x00010e65

00010e7c <SERCOM6_2_Handler>:
   10e7c:	4b00      	ldr	r3, [pc, #0]	; (10e80 <SERCOM6_2_Handler+0x4>)
   10e7e:	4718      	bx	r3
   10e80:	00010e65 	.word	0x00010e65

00010e84 <SERCOM6_3_Handler>:
   10e84:	4b00      	ldr	r3, [pc, #0]	; (10e88 <SERCOM6_3_Handler+0x4>)
   10e86:	4718      	bx	r3
   10e88:	00010e65 	.word	0x00010e65

00010e8c <_spi_m_sync_init>:
{
   10e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   10e90:	4b37      	ldr	r3, [pc, #220]	; (10f70 <_spi_m_sync_init+0xe4>)
{
   10e92:	4606      	mov	r6, r0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   10e94:	4608      	mov	r0, r1
{
   10e96:	460c      	mov	r4, r1
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   10e98:	4798      	blx	r3
   10e9a:	4605      	mov	r5, r0
	ASSERT(dev && hw);
   10e9c:	2e00      	cmp	r6, #0
   10e9e:	d05d      	beq.n	10f5c <_spi_m_sync_init+0xd0>
   10ea0:	1e20      	subs	r0, r4, #0
   10ea2:	bf18      	it	ne
   10ea4:	2001      	movne	r0, #1
   10ea6:	4f33      	ldr	r7, [pc, #204]	; (10f74 <_spi_m_sync_init+0xe8>)
   10ea8:	4933      	ldr	r1, [pc, #204]	; (10f78 <_spi_m_sync_init+0xec>)
   10eaa:	f640 2278 	movw	r2, #2680	; 0xa78
   10eae:	47b8      	blx	r7
	if (regs == NULL) {
   10eb0:	46b9      	mov	r9, r7
   10eb2:	2d00      	cmp	r5, #0
   10eb4:	d058      	beq.n	10f68 <_spi_m_sync_init+0xdc>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   10eb6:	69e3      	ldr	r3, [r4, #28]
   10eb8:	4f30      	ldr	r7, [pc, #192]	; (10f7c <_spi_m_sync_init+0xf0>)
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   10eba:	f013 0f01 	tst.w	r3, #1
   10ebe:	d113      	bne.n	10ee8 <_spi_m_sync_init+0x5c>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10ec0:	2103      	movs	r1, #3
   10ec2:	4620      	mov	r0, r4
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   10ec4:	f8d5 8000 	ldr.w	r8, [r5]
   10ec8:	47b8      	blx	r7
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
   10eca:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   10ecc:	079b      	lsls	r3, r3, #30
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   10ece:	f008 081c 	and.w	r8, r8, #28
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   10ed2:	d503      	bpl.n	10edc <_spi_m_sync_init+0x50>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
   10ed4:	4b2a      	ldr	r3, [pc, #168]	; (10f80 <_spi_m_sync_init+0xf4>)
   10ed6:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
   10ed8:	2102      	movs	r1, #2
   10eda:	47b8      	blx	r7
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
   10edc:	f048 0301 	orr.w	r3, r8, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10ee0:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10ee2:	2103      	movs	r1, #3
   10ee4:	4620      	mov	r0, r4
   10ee6:	47b8      	blx	r7
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
   10ee8:	2101      	movs	r1, #1
   10eea:	4620      	mov	r0, r4
   10eec:	47b8      	blx	r7
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
   10eee:	682b      	ldr	r3, [r5, #0]
	dev->prvt = hw;
   10ef0:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
   10ef2:	f003 031c 	and.w	r3, r3, #28
   10ef6:	2b08      	cmp	r3, #8
   10ef8:	d132      	bne.n	10f60 <_spi_m_sync_init+0xd4>
	ASSERT(hw && regs);
   10efa:	f640 128e 	movw	r2, #2446	; 0x98e
   10efe:	491e      	ldr	r1, [pc, #120]	; (10f78 <_spi_m_sync_init+0xec>)
   10f00:	2001      	movs	r0, #1
   10f02:	47c8      	blx	r9
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
   10f04:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
   10f06:	f423 7381 	bic.w	r3, r3, #258	; 0x102
   10f0a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10f0e:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10f10:	2103      	movs	r1, #3
   10f12:	4620      	mov	r0, r4
   10f14:	47b8      	blx	r7
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
   10f16:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
   10f18:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
   10f1c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
   10f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10f24:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
   10f28:	6063      	str	r3, [r4, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   10f2a:	2117      	movs	r1, #23
   10f2c:	47b8      	blx	r7
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
   10f2e:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
   10f30:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
   10f32:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
   10f34:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   10f38:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
   10f3a:	2b00      	cmp	r3, #0
   10f3c:	d1fc      	bne.n	10f38 <_spi_m_sync_init+0xac>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
   10f3e:	686b      	ldr	r3, [r5, #4]
   10f40:	f013 0f07 	tst.w	r3, #7
   10f44:	bf0c      	ite	eq
   10f46:	2301      	moveq	r3, #1
   10f48:	2302      	movne	r3, #2
   10f4a:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
   10f4c:	7bab      	ldrb	r3, [r5, #14]
   10f4e:	7bea      	ldrb	r2, [r5, #15]
   10f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10f54:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
   10f56:	2000      	movs	r0, #0
}
   10f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(dev && hw);
   10f5c:	4630      	mov	r0, r6
   10f5e:	e7a2      	b.n	10ea6 <_spi_m_sync_init+0x1a>
		_spi_load_regs_master(hw, regs);
   10f60:	4b08      	ldr	r3, [pc, #32]	; (10f84 <_spi_m_sync_init+0xf8>)
   10f62:	4629      	mov	r1, r5
   10f64:	4798      	blx	r3
   10f66:	e7ea      	b.n	10f3e <_spi_m_sync_init+0xb2>
		return ERR_INVALID_ARG;
   10f68:	f06f 000c 	mvn.w	r0, #12
   10f6c:	e7f4      	b.n	10f58 <_spi_m_sync_init+0xcc>
   10f6e:	bf00      	nop
   10f70:	000104e5 	.word	0x000104e5
   10f74:	0000d305 	.word	0x0000d305
   10f78:	00015dc1 	.word	0x00015dc1
   10f7c:	00010329 	.word	0x00010329
   10f80:	0001034d 	.word	0x0001034d
   10f84:	00010801 	.word	0x00010801

00010f88 <_spi_m_async_init>:
{
   10f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
   10f8a:	4b10      	ldr	r3, [pc, #64]	; (10fcc <_spi_m_async_init+0x44>)
{
   10f8c:	4605      	mov	r5, r0
   10f8e:	460e      	mov	r6, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
   10f90:	4798      	blx	r3
	if (rc < 0) {
   10f92:	2800      	cmp	r0, #0
   10f94:	db17      	blt.n	10fc6 <_spi_m_async_init+0x3e>
	_sercom_init_irq_param(hw, (void *)dev);
   10f96:	4629      	mov	r1, r5
	spid->callbacks.complete = NULL;
   10f98:	2400      	movs	r4, #0
	_sercom_init_irq_param(hw, (void *)dev);
   10f9a:	4630      	mov	r0, r6
   10f9c:	4b0c      	ldr	r3, [pc, #48]	; (10fd0 <_spi_m_async_init+0x48>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   10f9e:	4e0d      	ldr	r6, [pc, #52]	; (10fd4 <_spi_m_async_init+0x4c>)
	_sercom_init_irq_param(hw, (void *)dev);
   10fa0:	4798      	blx	r3
	spid->callbacks.rx       = NULL;
   10fa2:	e9c5 4403 	strd	r4, r4, [r5, #12]
	spid->callbacks.tx       = NULL;
   10fa6:	60ac      	str	r4, [r5, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
   10fa8:	4b0b      	ldr	r3, [pc, #44]	; (10fd8 <_spi_m_async_init+0x50>)
   10faa:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   10fac:	4621      	mov	r1, r4
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10fae:	4c0b      	ldr	r4, [pc, #44]	; (10fdc <_spi_m_async_init+0x54>)
	uint8_t irq              = _sercom_get_irq_num(hw);
   10fb0:	4605      	mov	r5, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   10fb2:	186b      	adds	r3, r5, r1
   10fb4:	b2d8      	uxtb	r0, r3
   10fb6:	9001      	str	r0, [sp, #4]
   10fb8:	47b0      	blx	r6
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10fba:	9801      	ldr	r0, [sp, #4]
   10fbc:	47a0      	blx	r4
	for (uint32_t i = 0; i < 4; i++) {
   10fbe:	3101      	adds	r1, #1
   10fc0:	2904      	cmp	r1, #4
   10fc2:	d1f6      	bne.n	10fb2 <_spi_m_async_init+0x2a>
   10fc4:	2000      	movs	r0, #0
}
   10fc6:	b002      	add	sp, #8
   10fc8:	bd70      	pop	{r4, r5, r6, pc}
   10fca:	bf00      	nop
   10fcc:	00010e8d 	.word	0x00010e8d
   10fd0:	00010449 	.word	0x00010449
   10fd4:	0001056d 	.word	0x0001056d
   10fd8:	000104a9 	.word	0x000104a9
   10fdc:	00010591 	.word	0x00010591

00010fe0 <_spi_m_async_enable>:
{
   10fe0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   10fe2:	4604      	mov	r4, r0
   10fe4:	b118      	cbz	r0, 10fee <_spi_m_async_enable+0xe>
   10fe6:	6800      	ldr	r0, [r0, #0]
   10fe8:	3800      	subs	r0, #0
   10fea:	bf18      	it	ne
   10fec:	2001      	movne	r0, #1
   10fee:	4b05      	ldr	r3, [pc, #20]	; (11004 <_spi_m_async_enable+0x24>)
   10ff0:	4905      	ldr	r1, [pc, #20]	; (11008 <_spi_m_async_enable+0x28>)
   10ff2:	f640 22e5 	movw	r2, #2789	; 0xae5
   10ff6:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
   10ff8:	6820      	ldr	r0, [r4, #0]
   10ffa:	4b04      	ldr	r3, [pc, #16]	; (1100c <_spi_m_async_enable+0x2c>)
}
   10ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _spi_async_enable(dev->prvt);
   11000:	4718      	bx	r3
   11002:	bf00      	nop
   11004:	0000d305 	.word	0x0000d305
   11008:	00015dc1 	.word	0x00015dc1
   1100c:	0001053d 	.word	0x0001053d

00011010 <_spi_m_async_set_mode>:
{
   11010:	b570      	push	{r4, r5, r6, lr}
   11012:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   11014:	4604      	mov	r4, r0
   11016:	b118      	cbz	r0, 11020 <_spi_m_async_set_mode+0x10>
   11018:	6800      	ldr	r0, [r0, #0]
   1101a:	3800      	subs	r0, #0
   1101c:	bf18      	it	ne
   1101e:	2001      	movne	r0, #1
   11020:	4905      	ldr	r1, [pc, #20]	; (11038 <_spi_m_async_set_mode+0x28>)
   11022:	4b06      	ldr	r3, [pc, #24]	; (1103c <_spi_m_async_set_mode+0x2c>)
   11024:	f640 3216 	movw	r2, #2838	; 0xb16
   11028:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
   1102a:	6820      	ldr	r0, [r4, #0]
   1102c:	4b04      	ldr	r3, [pc, #16]	; (11040 <_spi_m_async_set_mode+0x30>)
   1102e:	4629      	mov	r1, r5
}
   11030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_set_mode(dev->prvt, mode);
   11034:	4718      	bx	r3
   11036:	bf00      	nop
   11038:	00015dc1 	.word	0x00015dc1
   1103c:	0000d305 	.word	0x0000d305
   11040:	000107cd 	.word	0x000107cd

00011044 <_spi_m_async_set_baudrate>:
{
   11044:	b538      	push	{r3, r4, r5, lr}
   11046:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   11048:	4604      	mov	r4, r0
   1104a:	b118      	cbz	r0, 11054 <_spi_m_async_set_baudrate+0x10>
   1104c:	6800      	ldr	r0, [r0, #0]
   1104e:	3800      	subs	r0, #0
   11050:	bf18      	it	ne
   11052:	2001      	movne	r0, #1
   11054:	4907      	ldr	r1, [pc, #28]	; (11074 <_spi_m_async_set_baudrate+0x30>)
   11056:	4b08      	ldr	r3, [pc, #32]	; (11078 <_spi_m_async_set_baudrate+0x34>)
   11058:	f640 3245 	movw	r2, #2885	; 0xb45
   1105c:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
   1105e:	6823      	ldr	r3, [r4, #0]
   11060:	69d8      	ldr	r0, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   11062:	f010 0001 	ands.w	r0, r0, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
   11066:	bf06      	itte	eq
   11068:	b2ed      	uxtbeq	r5, r5
	((Sercom *)hw)->SPI.BAUD.reg = data;
   1106a:	731d      	strbeq	r5, [r3, #12]
		return ERR_BUSY;
   1106c:	f06f 0003 	mvnne.w	r0, #3
}
   11070:	bd38      	pop	{r3, r4, r5, pc}
   11072:	bf00      	nop
   11074:	00015dc1 	.word	0x00015dc1
   11078:	0000d305 	.word	0x0000d305

0001107c <_spi_m_async_enable_tx>:
{
   1107c:	b538      	push	{r3, r4, r5, lr}
	void *hw = dev->prvt;
   1107e:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
   11080:	4b07      	ldr	r3, [pc, #28]	; (110a0 <_spi_m_async_enable_tx+0x24>)
   11082:	1e20      	subs	r0, r4, #0
{
   11084:	460d      	mov	r5, r1
	ASSERT(dev && hw);
   11086:	f640 4208 	movw	r2, #3080	; 0xc08
   1108a:	4906      	ldr	r1, [pc, #24]	; (110a4 <_spi_m_async_enable_tx+0x28>)
   1108c:	bf18      	it	ne
   1108e:	2001      	movne	r0, #1
   11090:	4798      	blx	r3
	if (state) {
   11092:	2301      	movs	r3, #1
   11094:	b115      	cbz	r5, 1109c <_spi_m_async_enable_tx+0x20>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
   11096:	75a3      	strb	r3, [r4, #22]
}
   11098:	2000      	movs	r0, #0
   1109a:	bd38      	pop	{r3, r4, r5, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
   1109c:	7523      	strb	r3, [r4, #20]
}
   1109e:	e7fb      	b.n	11098 <_spi_m_async_enable_tx+0x1c>
   110a0:	0000d305 	.word	0x0000d305
   110a4:	00015dc1 	.word	0x00015dc1

000110a8 <_spi_m_async_enable_rx>:
{
   110a8:	b570      	push	{r4, r5, r6, lr}
	void *hw = dev->prvt;
   110aa:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
   110ac:	4e0a      	ldr	r6, [pc, #40]	; (110d8 <_spi_m_async_enable_rx+0x30>)
   110ae:	f640 421c 	movw	r2, #3100	; 0xc1c
   110b2:	2001      	movs	r0, #1
{
   110b4:	460d      	mov	r5, r1
	ASSERT(dev);
   110b6:	4909      	ldr	r1, [pc, #36]	; (110dc <_spi_m_async_enable_rx+0x34>)
   110b8:	47b0      	blx	r6
	ASSERT(hw);
   110ba:	1e20      	subs	r0, r4, #0
   110bc:	4907      	ldr	r1, [pc, #28]	; (110dc <_spi_m_async_enable_rx+0x34>)
   110be:	f640 421d 	movw	r2, #3101	; 0xc1d
   110c2:	bf18      	it	ne
   110c4:	2001      	movne	r0, #1
   110c6:	47b0      	blx	r6
	if (state) {
   110c8:	2304      	movs	r3, #4
   110ca:	b115      	cbz	r5, 110d2 <_spi_m_async_enable_rx+0x2a>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
   110cc:	75a3      	strb	r3, [r4, #22]
}
   110ce:	2000      	movs	r0, #0
   110d0:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
   110d2:	7523      	strb	r3, [r4, #20]
}
   110d4:	e7fb      	b.n	110ce <_spi_m_async_enable_rx+0x26>
   110d6:	bf00      	nop
   110d8:	0000d305 	.word	0x0000d305
   110dc:	00015dc1 	.word	0x00015dc1

000110e0 <_spi_m_async_enable_tx_complete>:
{
   110e0:	b538      	push	{r3, r4, r5, lr}
   110e2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   110e4:	4604      	mov	r4, r0
   110e6:	b118      	cbz	r0, 110f0 <_spi_m_async_enable_tx_complete+0x10>
   110e8:	6800      	ldr	r0, [r0, #0]
   110ea:	3800      	subs	r0, #0
   110ec:	bf18      	it	ne
   110ee:	2001      	movne	r0, #1
   110f0:	4b06      	ldr	r3, [pc, #24]	; (1110c <_spi_m_async_enable_tx_complete+0x2c>)
   110f2:	4907      	ldr	r1, [pc, #28]	; (11110 <_spi_m_async_enable_tx_complete+0x30>)
   110f4:	f640 422f 	movw	r2, #3119	; 0xc2f
   110f8:	4798      	blx	r3
	if (state) {
   110fa:	6823      	ldr	r3, [r4, #0]
   110fc:	2202      	movs	r2, #2
   110fe:	b115      	cbz	r5, 11106 <_spi_m_async_enable_tx_complete+0x26>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
   11100:	759a      	strb	r2, [r3, #22]
}
   11102:	2000      	movs	r0, #0
   11104:	bd38      	pop	{r3, r4, r5, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
   11106:	751a      	strb	r2, [r3, #20]
}
   11108:	e7fb      	b.n	11102 <_spi_m_async_enable_tx_complete+0x22>
   1110a:	bf00      	nop
   1110c:	0000d305 	.word	0x0000d305
   11110:	00015dc1 	.word	0x00015dc1

00011114 <_spi_m_async_write_one>:
{
   11114:	b538      	push	{r3, r4, r5, lr}
   11116:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   11118:	4604      	mov	r4, r0
   1111a:	b118      	cbz	r0, 11124 <_spi_m_async_write_one+0x10>
   1111c:	6800      	ldr	r0, [r0, #0]
   1111e:	3800      	subs	r0, #0
   11120:	bf18      	it	ne
   11122:	2001      	movne	r0, #1
   11124:	4904      	ldr	r1, [pc, #16]	; (11138 <_spi_m_async_write_one+0x24>)
   11126:	4b05      	ldr	r3, [pc, #20]	; (1113c <_spi_m_async_write_one+0x28>)
   11128:	f640 4241 	movw	r2, #3137	; 0xc41
   1112c:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
   1112e:	6823      	ldr	r3, [r4, #0]
}
   11130:	2000      	movs	r0, #0
	((Sercom *)hw)->SPI.DATA.reg = data;
   11132:	629d      	str	r5, [r3, #40]	; 0x28
   11134:	bd38      	pop	{r3, r4, r5, pc}
   11136:	bf00      	nop
   11138:	00015dc1 	.word	0x00015dc1
   1113c:	0000d305 	.word	0x0000d305

00011140 <_spi_m_async_read_one>:
{
   11140:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   11142:	4604      	mov	r4, r0
   11144:	b118      	cbz	r0, 1114e <_spi_m_async_read_one+0xe>
   11146:	6800      	ldr	r0, [r0, #0]
   11148:	3800      	subs	r0, #0
   1114a:	bf18      	it	ne
   1114c:	2001      	movne	r0, #1
   1114e:	4904      	ldr	r1, [pc, #16]	; (11160 <_spi_m_async_read_one+0x20>)
   11150:	4b04      	ldr	r3, [pc, #16]	; (11164 <_spi_m_async_read_one+0x24>)
   11152:	f640 425c 	movw	r2, #3164	; 0xc5c
   11156:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
   11158:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
   1115a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
   1115c:	b280      	uxth	r0, r0
   1115e:	bd10      	pop	{r4, pc}
   11160:	00015dc1 	.word	0x00015dc1
   11164:	0000d305 	.word	0x0000d305

00011168 <_spi_m_async_register_callback>:
{
   11168:	b570      	push	{r4, r5, r6, lr}
   1116a:	460d      	mov	r5, r1
   1116c:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
   1116e:	4604      	mov	r4, r0
   11170:	b118      	cbz	r0, 1117a <_spi_m_async_register_callback+0x12>
   11172:	2903      	cmp	r1, #3
   11174:	bf8c      	ite	hi
   11176:	2000      	movhi	r0, #0
   11178:	2001      	movls	r0, #1
   1117a:	4905      	ldr	r1, [pc, #20]	; (11190 <_spi_m_async_register_callback+0x28>)
   1117c:	4b05      	ldr	r3, [pc, #20]	; (11194 <_spi_m_async_register_callback+0x2c>)
   1117e:	f640 4275 	movw	r2, #3189	; 0xc75
   11182:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
   11184:	eb04 0185 	add.w	r1, r4, r5, lsl #2
}
   11188:	2000      	movs	r0, #0
	p_ls[cb_type] = (func_t)func;
   1118a:	608e      	str	r6, [r1, #8]
}
   1118c:	bd70      	pop	{r4, r5, r6, pc}
   1118e:	bf00      	nop
   11190:	00015dc1 	.word	0x00015dc1
   11194:	0000d305 	.word	0x0000d305

00011198 <_spi_m_async_set_irq_state>:
{
   11198:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   1119a:	4604      	mov	r4, r0
   1119c:	3800      	subs	r0, #0
{
   1119e:	460e      	mov	r6, r1
	ASSERT(device);
   111a0:	bf18      	it	ne
   111a2:	2001      	movne	r0, #1
   111a4:	4907      	ldr	r1, [pc, #28]	; (111c4 <_spi_m_async_set_irq_state+0x2c>)
   111a6:	4b08      	ldr	r3, [pc, #32]	; (111c8 <_spi_m_async_set_irq_state+0x30>)
{
   111a8:	4615      	mov	r5, r2
	ASSERT(device);
   111aa:	f640 42b6 	movw	r2, #3254	; 0xcb6
   111ae:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
   111b0:	2e03      	cmp	r6, #3
   111b2:	d103      	bne.n	111bc <_spi_m_async_set_irq_state+0x24>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
   111b4:	6823      	ldr	r3, [r4, #0]
	if (value == 0x0) {
   111b6:	2280      	movs	r2, #128	; 0x80
   111b8:	b90d      	cbnz	r5, 111be <_spi_m_async_set_irq_state+0x26>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
   111ba:	751a      	strb	r2, [r3, #20]
}
   111bc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
   111be:	759a      	strb	r2, [r3, #22]
   111c0:	e7fc      	b.n	111bc <_spi_m_async_set_irq_state+0x24>
   111c2:	bf00      	nop
   111c4:	00015dc1 	.word	0x00015dc1
   111c8:	0000d305 	.word	0x0000d305

000111cc <_spi_m_dma_init>:

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
   111cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   111d0:	4b25      	ldr	r3, [pc, #148]	; (11268 <_spi_m_dma_init+0x9c>)
{
   111d2:	4605      	mov	r5, r0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   111d4:	4608      	mov	r0, r1
{
   111d6:	460c      	mov	r4, r1
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   111d8:	4798      	blx	r3
   111da:	4606      	mov	r6, r0

	ASSERT(dev && hw);
   111dc:	2d00      	cmp	r5, #0
   111de:	d03e      	beq.n	1125e <_spi_m_dma_init+0x92>
   111e0:	1e20      	subs	r0, r4, #0
   111e2:	bf18      	it	ne
   111e4:	2001      	movne	r0, #1
   111e6:	4921      	ldr	r1, [pc, #132]	; (1126c <_spi_m_dma_init+0xa0>)
   111e8:	4b21      	ldr	r3, [pc, #132]	; (11270 <_spi_m_dma_init+0xa4>)
   111ea:	f640 52e3 	movw	r2, #3555	; 0xde3
   111ee:	4798      	blx	r3

	if (regs == NULL) {
   111f0:	2e00      	cmp	r6, #0
   111f2:	d036      	beq.n	11262 <_spi_m_dma_init+0x96>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   111f4:	69e3      	ldr	r3, [r4, #28]
   111f6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1128c <_spi_m_dma_init+0xc0>
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   111fa:	f013 0f01 	tst.w	r3, #1
   111fe:	d112      	bne.n	11226 <_spi_m_dma_init+0x5a>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   11200:	2103      	movs	r1, #3
   11202:	4620      	mov	r0, r4
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   11204:	6837      	ldr	r7, [r6, #0]
   11206:	47c0      	blx	r8
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
   11208:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   1120a:	079b      	lsls	r3, r3, #30
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   1120c:	f007 071c 	and.w	r7, r7, #28
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   11210:	d503      	bpl.n	1121a <_spi_m_dma_init+0x4e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
   11212:	4b18      	ldr	r3, [pc, #96]	; (11274 <_spi_m_dma_init+0xa8>)
   11214:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
   11216:	2102      	movs	r1, #2
   11218:	47c0      	blx	r8
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
   1121a:	f047 0701 	orr.w	r7, r7, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   1121e:	6027      	str	r7, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   11220:	2103      	movs	r1, #3
   11222:	4620      	mov	r0, r4
   11224:	47c0      	blx	r8
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
   11226:	462f      	mov	r7, r5
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
   11228:	4620      	mov	r0, r4
   1122a:	2101      	movs	r1, #1
   1122c:	47c0      	blx	r8

	_spi_load_regs_master(hw, regs);
   1122e:	4631      	mov	r1, r6
	dev->prvt = hw;
   11230:	f847 4b18 	str.w	r4, [r7], #24
	_spi_load_regs_master(hw, regs);
   11234:	4b10      	ldr	r3, [pc, #64]	; (11278 <_spi_m_dma_init+0xac>)
   11236:	4798      	blx	r3
	uint8_t index = _sercom_get_hardware_index(hw);
   11238:	4b10      	ldr	r3, [pc, #64]	; (1127c <_spi_m_dma_init+0xb0>)
   1123a:	4620      	mov	r0, r4
   1123c:	4798      	blx	r3
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   1123e:	2807      	cmp	r0, #7
		dev->resource->back                 = dev;
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
   11240:	4b0f      	ldr	r3, [pc, #60]	; (11280 <_spi_m_dma_init+0xb4>)
   11242:	bf0c      	ite	eq
   11244:	2108      	moveq	r1, #8
   11246:	2100      	movne	r1, #0
   11248:	4638      	mov	r0, r7
   1124a:	4798      	blx	r3
	dev->resource->back                 = dev;
   1124c:	69ab      	ldr	r3, [r5, #24]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
   1124e:	4a0d      	ldr	r2, [pc, #52]	; (11284 <_spi_m_dma_init+0xb8>)
   11250:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
   11252:	4a0d      	ldr	r2, [pc, #52]	; (11288 <_spi_m_dma_init+0xbc>)
	dev->resource->back                 = dev;
   11254:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
   11256:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
   11258:	2000      	movs	r0, #0
}
   1125a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
   1125e:	4628      	mov	r0, r5
   11260:	e7c1      	b.n	111e6 <_spi_m_dma_init+0x1a>
		return ERR_INVALID_ARG;
   11262:	f06f 000c 	mvn.w	r0, #12
   11266:	e7f8      	b.n	1125a <_spi_m_dma_init+0x8e>
   11268:	000104e5 	.word	0x000104e5
   1126c:	00015dc1 	.word	0x00015dc1
   11270:	0000d305 	.word	0x0000d305
   11274:	0001034d 	.word	0x0001034d
   11278:	00010801 	.word	0x00010801
   1127c:	000103a1 	.word	0x000103a1
   11280:	0000d549 	.word	0x0000d549
   11284:	00010511 	.word	0x00010511
   11288:	0001051b 	.word	0x0001051b
   1128c:	00010329 	.word	0x00010329

00011290 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
   11290:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   11292:	4604      	mov	r4, r0
   11294:	b118      	cbz	r0, 1129e <_spi_m_dma_enable+0xe>
   11296:	6800      	ldr	r0, [r0, #0]
   11298:	3800      	subs	r0, #0
   1129a:	bf18      	it	ne
   1129c:	2001      	movne	r0, #1
   1129e:	4b05      	ldr	r3, [pc, #20]	; (112b4 <_spi_m_dma_enable+0x24>)
   112a0:	4905      	ldr	r1, [pc, #20]	; (112b8 <_spi_m_dma_enable+0x28>)
   112a2:	f640 620e 	movw	r2, #3598	; 0xe0e
   112a6:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
   112a8:	6820      	ldr	r0, [r4, #0]
   112aa:	4b04      	ldr	r3, [pc, #16]	; (112bc <_spi_m_dma_enable+0x2c>)
}
   112ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _spi_sync_enable(dev->prvt);
   112b0:	4718      	bx	r3
   112b2:	bf00      	nop
   112b4:	0000d305 	.word	0x0000d305
   112b8:	00015dc1 	.word	0x00015dc1
   112bc:	000104bd 	.word	0x000104bd

000112c0 <_spi_m_dma_register_callback>:
	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
	switch (type) {
   112c0:	2901      	cmp	r1, #1
{
   112c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   112c4:	4605      	mov	r5, r0
   112c6:	460e      	mov	r6, r1
   112c8:	4614      	mov	r4, r2
	switch (type) {
   112ca:	d014      	beq.n	112f6 <_spi_m_dma_register_callback+0x36>
   112cc:	2902      	cmp	r1, #2
   112ce:	d020      	beq.n	11312 <_spi_m_dma_register_callback+0x52>
   112d0:	2900      	cmp	r1, #0
   112d2:	d138      	bne.n	11346 <_spi_m_dma_register_callback+0x86>
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
   112d4:	6042      	str	r2, [r0, #4]
	uint8_t index = _sercom_get_hardware_index(hw);
   112d6:	4b1d      	ldr	r3, [pc, #116]	; (1134c <_spi_m_dma_register_callback+0x8c>)
   112d8:	6800      	ldr	r0, [r0, #0]
   112da:	4798      	blx	r3
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   112dc:	2807      	cmp	r0, #7
   112de:	bf08      	it	eq
   112e0:	2608      	moveq	r6, #8
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   112e2:	1e22      	subs	r2, r4, #0
   112e4:	bf18      	it	ne
   112e6:	2201      	movne	r2, #1
   112e8:	2100      	movs	r1, #0
   112ea:	4630      	mov	r0, r6
		break;
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   112ec:	4b18      	ldr	r3, [pc, #96]	; (11350 <_spi_m_dma_register_callback+0x90>)
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
		break;
	case SPI_DEV_CB_DMA_N:
		break;
	}
}
   112ee:	b002      	add	sp, #8
   112f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   112f4:	4718      	bx	r3
		dev->callbacks.rx = func;
   112f6:	6082      	str	r2, [r0, #8]
	uint8_t index = _sercom_get_hardware_index(hw);
   112f8:	4b14      	ldr	r3, [pc, #80]	; (1134c <_spi_m_dma_register_callback+0x8c>)
   112fa:	6800      	ldr	r0, [r0, #0]
   112fc:	4798      	blx	r3
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   112fe:	1e22      	subs	r2, r4, #0
   11300:	bf18      	it	ne
   11302:	2201      	movne	r2, #1
   11304:	2807      	cmp	r0, #7
   11306:	f04f 0100 	mov.w	r1, #0
   1130a:	bf8c      	ite	hi
   1130c:	2000      	movhi	r0, #0
   1130e:	2001      	movls	r0, #1
   11310:	e7ec      	b.n	112ec <_spi_m_dma_register_callback+0x2c>
		dev->callbacks.error = func;
   11312:	60c2      	str	r2, [r0, #12]
	uint8_t index = _sercom_get_hardware_index(hw);
   11314:	4e0d      	ldr	r6, [pc, #52]	; (1134c <_spi_m_dma_register_callback+0x8c>)
   11316:	6800      	ldr	r0, [r0, #0]
   11318:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   1131a:	1e22      	subs	r2, r4, #0
   1131c:	bf18      	it	ne
   1131e:	2201      	movne	r2, #1
   11320:	2807      	cmp	r0, #7
   11322:	bf8c      	ite	hi
   11324:	2000      	movhi	r0, #0
   11326:	2001      	movls	r0, #1
   11328:	2101      	movs	r1, #1
   1132a:	4c09      	ldr	r4, [pc, #36]	; (11350 <_spi_m_dma_register_callback+0x90>)
   1132c:	9201      	str	r2, [sp, #4]
   1132e:	47a0      	blx	r4
	uint8_t index = _sercom_get_hardware_index(hw);
   11330:	6828      	ldr	r0, [r5, #0]
   11332:	47b0      	blx	r6
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   11334:	2807      	cmp	r0, #7
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   11336:	9a01      	ldr	r2, [sp, #4]
   11338:	f04f 0101 	mov.w	r1, #1
   1133c:	bf0c      	ite	eq
   1133e:	2008      	moveq	r0, #8
   11340:	2000      	movne	r0, #0
   11342:	4623      	mov	r3, r4
   11344:	e7d3      	b.n	112ee <_spi_m_dma_register_callback+0x2e>
}
   11346:	b002      	add	sp, #8
   11348:	bd70      	pop	{r4, r5, r6, pc}
   1134a:	bf00      	nop
   1134c:	000103a1 	.word	0x000103a1
   11350:	0000d465 	.word	0x0000d465

00011354 <_spi_m_dma_transfer>:

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
   11354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
   11358:	f8d0 8000 	ldr.w	r8, [r0]
	uint8_t index = _sercom_get_hardware_index(hw);
   1135c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 1147c <_spi_m_dma_transfer+0x128>
{
   11360:	4605      	mov	r5, r0
   11362:	461f      	mov	r7, r3
	uint8_t index = _sercom_get_hardware_index(hw);
   11364:	4640      	mov	r0, r8
   11366:	4b3d      	ldr	r3, [pc, #244]	; (1145c <_spi_m_dma_transfer+0x108>)
{
   11368:	460e      	mov	r6, r1
   1136a:	4692      	mov	sl, r2
	uint8_t index = _sercom_get_hardware_index(hw);
   1136c:	4798      	blx	r3
	switch (index) {
   1136e:	2807      	cmp	r0, #7
   11370:	4b3b      	ldr	r3, [pc, #236]	; (11460 <_spi_m_dma_transfer+0x10c>)
   11372:	d86a      	bhi.n	1144a <_spi_m_dma_transfer+0xf6>
	switch (index) {
   11374:	d06c      	beq.n	11450 <_spi_m_dma_transfer+0xfc>
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
   11376:	f04f 0b01 	mov.w	fp, #1
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
   1137a:	f1ba 0f00 	cmp.w	sl, #0
   1137e:	d114      	bne.n	113aa <_spi_m_dma_transfer+0x56>
   11380:	4654      	mov	r4, sl
	ASSERT(dev && dev->prvt);
   11382:	f1b8 0000 	subs.w	r0, r8, #0
   11386:	bf18      	it	ne
   11388:	2001      	movne	r0, #1
   1138a:	4936      	ldr	r1, [pc, #216]	; (11464 <_spi_m_dma_transfer+0x110>)
   1138c:	f640 523d 	movw	r2, #3389	; 0xd3d
   11390:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
   11392:	6828      	ldr	r0, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   11394:	69c3      	ldr	r3, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
   11396:	075b      	lsls	r3, r3, #29
   11398:	d42b      	bmi.n	113f2 <_spi_m_dma_transfer+0x9e>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
   1139a:	6843      	ldr	r3, [r0, #4]
   1139c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   113a0:	6043      	str	r3, [r0, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   113a2:	2117      	movs	r1, #23
   113a4:	4b30      	ldr	r3, [pc, #192]	; (11468 <_spi_m_dma_transfer+0x114>)
   113a6:	4798      	blx	r3
}
   113a8:	e023      	b.n	113f2 <_spi_m_dma_transfer+0x9e>
	if (rxbuf) {
   113aa:	2400      	movs	r4, #0
	ASSERT(dev && dev->prvt);
   113ac:	f1b8 0000 	subs.w	r0, r8, #0
   113b0:	bf18      	it	ne
   113b2:	2001      	movne	r0, #1
   113b4:	f640 5236 	movw	r2, #3382	; 0xd36
   113b8:	492a      	ldr	r1, [pc, #168]	; (11464 <_spi_m_dma_transfer+0x110>)
   113ba:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
   113bc:	6828      	ldr	r0, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   113be:	69c3      	ldr	r3, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
   113c0:	075a      	lsls	r2, r3, #29
   113c2:	d406      	bmi.n	113d2 <_spi_m_dma_transfer+0x7e>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
   113c4:	6843      	ldr	r3, [r0, #4]
   113c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   113ca:	6043      	str	r3, [r0, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   113cc:	2117      	movs	r1, #23
   113ce:	4b26      	ldr	r3, [pc, #152]	; (11468 <_spi_m_dma_transfer+0x114>)
   113d0:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   113d2:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
   113d4:	4b25      	ldr	r3, [pc, #148]	; (1146c <_spi_m_dma_transfer+0x118>)
   113d6:	3128      	adds	r1, #40	; 0x28
   113d8:	4658      	mov	r0, fp
   113da:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
   113dc:	4651      	mov	r1, sl
   113de:	4658      	mov	r0, fp
   113e0:	47c8      	blx	r9
		_dma_set_data_amount(rx_ch, length);
   113e2:	4b23      	ldr	r3, [pc, #140]	; (11470 <_spi_m_dma_transfer+0x11c>)
   113e4:	4639      	mov	r1, r7
   113e6:	4658      	mov	r0, fp
   113e8:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
   113ea:	4b22      	ldr	r3, [pc, #136]	; (11474 <_spi_m_dma_transfer+0x120>)
   113ec:	2100      	movs	r1, #0
   113ee:	4658      	mov	r0, fp
   113f0:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
   113f2:	f8df a07c 	ldr.w	sl, [pc, #124]	; 11470 <_spi_m_dma_transfer+0x11c>
   113f6:	f8df b088 	ldr.w	fp, [pc, #136]	; 11480 <_spi_m_dma_transfer+0x12c>
   113fa:	b1c6      	cbz	r6, 1142e <_spi_m_dma_transfer+0xda>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
   113fc:	4b1b      	ldr	r3, [pc, #108]	; (1146c <_spi_m_dma_transfer+0x118>)
   113fe:	4631      	mov	r1, r6
   11400:	4620      	mov	r0, r4
   11402:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   11404:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
   11406:	4620      	mov	r0, r4
   11408:	3128      	adds	r1, #40	; 0x28
   1140a:	47c8      	blx	r9
		_dma_srcinc_enable(tx_ch, true);
   1140c:	2101      	movs	r1, #1
		_dma_set_data_amount(tx_ch, length);
	} else {
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
   1140e:	4620      	mov	r0, r4
   11410:	47d8      	blx	fp
		_dma_set_data_amount(tx_ch, length);
   11412:	4639      	mov	r1, r7
   11414:	4620      	mov	r0, r4
   11416:	47d0      	blx	sl
	}
	_dma_enable_transaction(tx_ch, false);
   11418:	4b16      	ldr	r3, [pc, #88]	; (11474 <_spi_m_dma_transfer+0x120>)
   1141a:	2100      	movs	r1, #0
   1141c:	4620      	mov	r0, r4
   1141e:	4798      	blx	r3

	return ERR_NONE;
}
   11420:	2000      	movs	r0, #0
   11422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
   11426:	f04f 0b01 	mov.w	fp, #1
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   1142a:	2408      	movs	r4, #8
   1142c:	e7be      	b.n	113ac <_spi_m_dma_transfer+0x58>
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
   1142e:	4b12      	ldr	r3, [pc, #72]	; (11478 <_spi_m_dma_transfer+0x124>)
   11430:	4640      	mov	r0, r8
   11432:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
   11434:	4b0d      	ldr	r3, [pc, #52]	; (1146c <_spi_m_dma_transfer+0x118>)
   11436:	f100 010e 	add.w	r1, r0, #14
   1143a:	4620      	mov	r0, r4
   1143c:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   1143e:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
   11440:	4620      	mov	r0, r4
   11442:	3128      	adds	r1, #40	; 0x28
   11444:	47c8      	blx	r9
		_dma_srcinc_enable(tx_ch, false);
   11446:	4631      	mov	r1, r6
   11448:	e7e1      	b.n	1140e <_spi_m_dma_transfer+0xba>
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
   1144a:	f04f 0b00 	mov.w	fp, #0
   1144e:	e794      	b.n	1137a <_spi_m_dma_transfer+0x26>
	if (rxbuf) {
   11450:	f1ba 0f00 	cmp.w	sl, #0
   11454:	d1e7      	bne.n	11426 <_spi_m_dma_transfer+0xd2>
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   11456:	2408      	movs	r4, #8
   11458:	e793      	b.n	11382 <_spi_m_dma_transfer+0x2e>
   1145a:	bf00      	nop
   1145c:	000103a1 	.word	0x000103a1
   11460:	0000d305 	.word	0x0000d305
   11464:	00015dc1 	.word	0x00015dc1
   11468:	00010329 	.word	0x00010329
   1146c:	0000d49d 	.word	0x0000d49d
   11470:	0000d4c9 	.word	0x0000d4c9
   11474:	0000d50d 	.word	0x0000d50d
   11478:	000104e5 	.word	0x000104e5
   1147c:	0000d48d 	.word	0x0000d48d
   11480:	0000d4ad 	.word	0x0000d4ad

00011484 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
   11484:	b570      	push	{r4, r5, r6, lr}
   11486:	460e      	mov	r6, r1
   11488:	4614      	mov	r4, r2
	ASSERT(rb && buf && size);
   1148a:	4605      	mov	r5, r0
   1148c:	b118      	cbz	r0, 11496 <ringbuffer_init+0x12>
   1148e:	b189      	cbz	r1, 114b4 <ringbuffer_init+0x30>
   11490:	1e10      	subs	r0, r2, #0
   11492:	bf18      	it	ne
   11494:	2001      	movne	r0, #1
   11496:	4908      	ldr	r1, [pc, #32]	; (114b8 <ringbuffer_init+0x34>)
   11498:	4b08      	ldr	r3, [pc, #32]	; (114bc <ringbuffer_init+0x38>)
   1149a:	2228      	movs	r2, #40	; 0x28
   1149c:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
   1149e:	1e63      	subs	r3, r4, #1
   114a0:	ea13 0004 	ands.w	r0, r3, r4
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
	rb->read_index  = 0;
   114a4:	bf03      	ittte	eq
   114a6:	e9c5 3001 	strdeq	r3, r0, [r5, #4]
	rb->write_index = rb->read_index;
   114aa:	60e8      	streq	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
   114ac:	602e      	streq	r6, [r5, #0]
		return ERR_INVALID_ARG;
   114ae:	f06f 000c 	mvnne.w	r0, #12

	return ERR_NONE;
}
   114b2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
   114b4:	4608      	mov	r0, r1
   114b6:	e7ee      	b.n	11496 <ringbuffer_init+0x12>
   114b8:	00015eb0 	.word	0x00015eb0
   114bc:	0000d305 	.word	0x0000d305

000114c0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
   114c0:	b538      	push	{r3, r4, r5, lr}
   114c2:	460d      	mov	r5, r1
	ASSERT(rb && data);
   114c4:	4604      	mov	r4, r0
   114c6:	b110      	cbz	r0, 114ce <ringbuffer_get+0xe>
   114c8:	1e08      	subs	r0, r1, #0
   114ca:	bf18      	it	ne
   114cc:	2001      	movne	r0, #1
   114ce:	4b0a      	ldr	r3, [pc, #40]	; (114f8 <ringbuffer_get+0x38>)
   114d0:	490a      	ldr	r1, [pc, #40]	; (114fc <ringbuffer_get+0x3c>)
   114d2:	2240      	movs	r2, #64	; 0x40
   114d4:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
   114d6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   114da:	429a      	cmp	r2, r3
   114dc:	d009      	beq.n	114f2 <ringbuffer_get+0x32>
		*data = rb->buf[rb->read_index & rb->size];
   114de:	6862      	ldr	r2, [r4, #4]
   114e0:	4013      	ands	r3, r2
   114e2:	6822      	ldr	r2, [r4, #0]
   114e4:	5cd3      	ldrb	r3, [r2, r3]
   114e6:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
   114e8:	68a3      	ldr	r3, [r4, #8]
   114ea:	3301      	adds	r3, #1
   114ec:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
   114ee:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
   114f0:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NOT_FOUND;
   114f2:	f06f 0009 	mvn.w	r0, #9
   114f6:	e7fb      	b.n	114f0 <ringbuffer_get+0x30>
   114f8:	0000d305 	.word	0x0000d305
   114fc:	00015eb0 	.word	0x00015eb0

00011500 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
   11500:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb);
   11502:	4604      	mov	r4, r0
   11504:	3800      	subs	r0, #0
   11506:	bf18      	it	ne
   11508:	2001      	movne	r0, #1
{
   1150a:	460d      	mov	r5, r1
	ASSERT(rb);
   1150c:	4b0b      	ldr	r3, [pc, #44]	; (1153c <ringbuffer_put+0x3c>)
   1150e:	490c      	ldr	r1, [pc, #48]	; (11540 <ringbuffer_put+0x40>)
   11510:	2251      	movs	r2, #81	; 0x51
   11512:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
   11514:	68e3      	ldr	r3, [r4, #12]
   11516:	6862      	ldr	r2, [r4, #4]
   11518:	4013      	ands	r3, r2
   1151a:	6822      	ldr	r2, [r4, #0]
   1151c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
   1151e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   11522:	68e3      	ldr	r3, [r4, #12]
   11524:	1a59      	subs	r1, r3, r1
   11526:	4291      	cmp	r1, r2
		rb->read_index = rb->write_index - rb->size;
   11528:	bf88      	it	hi
   1152a:	1a9a      	subhi	r2, r3, r2
	}

	rb->write_index++;
   1152c:	f103 0301 	add.w	r3, r3, #1
		rb->read_index = rb->write_index - rb->size;
   11530:	bf88      	it	hi
   11532:	60a2      	strhi	r2, [r4, #8]
	rb->write_index++;
   11534:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
   11536:	2000      	movs	r0, #0
   11538:	bd38      	pop	{r3, r4, r5, pc}
   1153a:	bf00      	nop
   1153c:	0000d305 	.word	0x0000d305
   11540:	00015eb0 	.word	0x00015eb0

00011544 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
   11544:	b510      	push	{r4, lr}
	ASSERT(rb);
   11546:	4604      	mov	r4, r0
   11548:	3800      	subs	r0, #0
   1154a:	bf18      	it	ne
   1154c:	2001      	movne	r0, #1
   1154e:	4904      	ldr	r1, [pc, #16]	; (11560 <ringbuffer_num+0x1c>)
   11550:	4b04      	ldr	r3, [pc, #16]	; (11564 <ringbuffer_num+0x20>)
   11552:	2267      	movs	r2, #103	; 0x67
   11554:	4798      	blx	r3

	return rb->write_index - rb->read_index;
   11556:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
}
   1155a:	1ac0      	subs	r0, r0, r3
   1155c:	bd10      	pop	{r4, pc}
   1155e:	bf00      	nop
   11560:	00015eb0 	.word	0x00015eb0
   11564:	0000d305 	.word	0x0000d305

00011568 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   11568:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   1156c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   1156e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11570:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   11574:	4770      	bx	lr

00011576 <atomic_leave_critical>:
   11576:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   1157a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1157c:	f383 8810 	msr	PRIMASK, r3
}
   11580:	4770      	bx	lr
	...

00011584 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
   11584:	b570      	push	{r4, r5, r6, lr}
   11586:	460d      	mov	r5, r1
	ASSERT(qspi && hw);
   11588:	4604      	mov	r4, r0
   1158a:	b110      	cbz	r0, 11592 <qspi_dma_init+0xe>
   1158c:	1e08      	subs	r0, r1, #0
   1158e:	bf18      	it	ne
   11590:	2001      	movne	r0, #1
   11592:	4905      	ldr	r1, [pc, #20]	; (115a8 <qspi_dma_init+0x24>)
   11594:	4b05      	ldr	r3, [pc, #20]	; (115ac <qspi_dma_init+0x28>)
   11596:	2231      	movs	r2, #49	; 0x31
   11598:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
   1159a:	4629      	mov	r1, r5
   1159c:	4620      	mov	r0, r4
   1159e:	4b04      	ldr	r3, [pc, #16]	; (115b0 <qspi_dma_init+0x2c>)
}
   115a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _qspi_dma_init(&qspi->dev, hw);
   115a4:	4718      	bx	r3
   115a6:	bf00      	nop
   115a8:	00015ed4 	.word	0x00015ed4
   115ac:	0000d305 	.word	0x0000d305
   115b0:	0000bb55 	.word	0x0000bb55

000115b4 <event_system_init>:
/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
	return _event_system_init();
   115b4:	4b00      	ldr	r3, [pc, #0]	; (115b8 <event_system_init+0x4>)
   115b6:	4718      	bx	r3
   115b8:	0000b781 	.word	0x0000b781

000115bc <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
   115bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   115be:	420b      	tst	r3, r1
   115c0:	d1fc      	bne.n	115bc <hri_adc_wait_for_sync>
	};
}
   115c2:	4770      	bx	lr

000115c4 <hri_adc_set_CTRLA_ENABLE_bit>:
}

static inline void hri_adc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
   115c4:	8803      	ldrh	r3, [r0, #0]
   115c6:	b29b      	uxth	r3, r3
   115c8:	f043 0302 	orr.w	r3, r3, #2
   115cc:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   115ce:	2103      	movs	r1, #3
   115d0:	4b00      	ldr	r3, [pc, #0]	; (115d4 <hri_adc_set_CTRLA_ENABLE_bit+0x10>)
   115d2:	4718      	bx	r3
   115d4:	000115bd 	.word	0x000115bd

000115d8 <hri_adc_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_adc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
   115d8:	8803      	ldrh	r3, [r0, #0]
   115da:	f023 0302 	bic.w	r3, r3, #2
   115de:	041b      	lsls	r3, r3, #16
   115e0:	0c1b      	lsrs	r3, r3, #16
   115e2:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   115e4:	2103      	movs	r1, #3
   115e6:	4b01      	ldr	r3, [pc, #4]	; (115ec <hri_adc_clear_CTRLA_ENABLE_bit+0x14>)
   115e8:	4718      	bx	r3
   115ea:	bf00      	nop
   115ec:	000115bd 	.word	0x000115bd

000115f0 <_adc_interrupt_handler>:
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
	void *const hw      = device->hw;
   115f0:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
   115f2:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
   115f6:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
   115fa:	400b      	ands	r3, r1
{
   115fc:	b430      	push	{r4, r5}
	if (intflag & ADC_INTFLAG_RESRDY) {
   115fe:	f013 0501 	ands.w	r5, r3, #1
   11602:	d009      	beq.n	11618 <_adc_interrupt_handler+0x28>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   11604:	2301      	movs	r3, #1
   11606:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
   1160a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
   1160e:	6883      	ldr	r3, [r0, #8]
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
   11610:	bc30      	pop	{r4, r5}
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
   11612:	b292      	uxth	r2, r2
   11614:	2100      	movs	r1, #0
   11616:	4718      	bx	r3
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
   11618:	f013 0102 	ands.w	r1, r3, #2
   1161c:	d006      	beq.n	1162c <_adc_interrupt_handler+0x3c>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1161e:	2302      	movs	r3, #2
   11620:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
   11624:	6843      	ldr	r3, [r0, #4]
   11626:	4629      	mov	r1, r5
}
   11628:	bc30      	pop	{r4, r5}
		device->adc_async_cb.window_cb(device, 0);
   1162a:	4718      	bx	r3
	} else if (intflag & ADC_INTFLAG_WINMON) {
   1162c:	075b      	lsls	r3, r3, #29
   1162e:	d504      	bpl.n	1163a <_adc_interrupt_handler+0x4a>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
   11630:	2304      	movs	r3, #4
   11632:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.window_cb(device, 0);
   11636:	6803      	ldr	r3, [r0, #0]
   11638:	e7f6      	b.n	11628 <_adc_interrupt_handler+0x38>
}
   1163a:	bc30      	pop	{r4, r5}
   1163c:	4770      	bx	lr
	...

00011640 <_adc_get_regs>:
{
   11640:	b508      	push	{r3, lr}
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   11642:	f100 433d 	add.w	r3, r0, #3170893824	; 0xbd000000
   11646:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
		if (_adcs[i].number == n) {
   1164a:	f413 3f7f 	tst.w	r3, #261120	; 0x3fc00
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   1164e:	f3c3 2087 	ubfx	r0, r3, #10, #8
		if (_adcs[i].number == n) {
   11652:	d007      	beq.n	11664 <_adc_get_regs+0x24>
   11654:	2801      	cmp	r0, #1
   11656:	d005      	beq.n	11664 <_adc_get_regs+0x24>
	ASSERT(false);
   11658:	2000      	movs	r0, #0
   1165a:	4903      	ldr	r1, [pc, #12]	; (11668 <_adc_get_regs+0x28>)
   1165c:	4b03      	ldr	r3, [pc, #12]	; (1166c <_adc_get_regs+0x2c>)
   1165e:	228c      	movs	r2, #140	; 0x8c
   11660:	4798      	blx	r3
	return 0;
   11662:	2000      	movs	r0, #0
}
   11664:	bd08      	pop	{r3, pc}
   11666:	bf00      	nop
   11668:	00015eee 	.word	0x00015eee
   1166c:	0000d305 	.word	0x0000d305

00011670 <__NVIC_ClearPendingIRQ>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11670:	0943      	lsrs	r3, r0, #5
   11672:	2201      	movs	r2, #1
   11674:	f000 001f 	and.w	r0, r0, #31
   11678:	fa02 f000 	lsl.w	r0, r2, r0
   1167c:	3360      	adds	r3, #96	; 0x60
   1167e:	4a02      	ldr	r2, [pc, #8]	; (11688 <__NVIC_ClearPendingIRQ+0x18>)
   11680:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11684:	4770      	bx	lr
   11686:	bf00      	nop
   11688:	e000e100 	.word	0xe000e100

0001168c <_adc_get_irq_num.isra.0>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   1168c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
   11690:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
   11694:	0a80      	lsrs	r0, r0, #10
	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
   11696:	0040      	lsls	r0, r0, #1
   11698:	3076      	adds	r0, #118	; 0x76
}
   1169a:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   1169e:	4770      	bx	lr

000116a0 <__NVIC_DisableIRQ>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   116a0:	0943      	lsrs	r3, r0, #5
   116a2:	2201      	movs	r2, #1
   116a4:	f000 001f 	and.w	r0, r0, #31
   116a8:	fa02 f000 	lsl.w	r0, r2, r0
   116ac:	3320      	adds	r3, #32
   116ae:	4a04      	ldr	r2, [pc, #16]	; (116c0 <__NVIC_DisableIRQ+0x20>)
   116b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   116b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   116b8:	f3bf 8f6f 	isb	sy
}
   116bc:	4770      	bx	lr
   116be:	bf00      	nop
   116c0:	e000e100 	.word	0xe000e100

000116c4 <_adc_init>:
{
   116c4:	b538      	push	{r3, r4, r5, lr}
	if (hw == ADC0) {
   116c6:	4b39      	ldr	r3, [pc, #228]	; (117ac <_adc_init+0xe8>)
   116c8:	4298      	cmp	r0, r3
{
   116ca:	460c      	mov	r4, r1
	if (hw == ADC0) {
   116cc:	d15c      	bne.n	11788 <_adc_init+0xc4>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
   116ce:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
   116d2:	681b      	ldr	r3, [r3, #0]
   116d4:	00da      	lsls	r2, r3, #3
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
   116d6:	0919      	lsrs	r1, r3, #4
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
   116d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
   116dc:	f001 0170 	and.w	r1, r1, #112	; 0x70
   116e0:	430a      	orrs	r2, r1
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
   116e2:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   116e6:	431a      	orrs	r2, r3
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
   116e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   116ea:	4d31      	ldr	r5, [pc, #196]	; (117b0 <_adc_init+0xec>)
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
   116ec:	f013 0f01 	tst.w	r3, #1
   116f0:	d10c      	bne.n	1170c <_adc_init+0x48>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   116f2:	2103      	movs	r1, #3
   116f4:	47a8      	blx	r5
	tmp = ((Adc *)hw)->CTRLA.reg;
   116f6:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
   116f8:	079b      	lsls	r3, r3, #30
   116fa:	d503      	bpl.n	11704 <_adc_init+0x40>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
   116fc:	4b2d      	ldr	r3, [pc, #180]	; (117b4 <_adc_init+0xf0>)
   116fe:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
   11700:	2102      	movs	r1, #2
   11702:	47a8      	blx	r5
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
   11704:	2301      	movs	r3, #1
   11706:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   11708:	2103      	movs	r1, #3
   1170a:	47a8      	blx	r5
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
   1170c:	2101      	movs	r1, #1
   1170e:	47a8      	blx	r5
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
   11710:	4929      	ldr	r1, [pc, #164]	; (117b8 <_adc_init+0xf4>)
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
   11712:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   11716:	2316      	movs	r3, #22
   11718:	fb03 1404 	mla	r4, r3, r4, r1
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   1171c:	f640 71ff 	movw	r1, #4095	; 0xfff
   11720:	88a3      	ldrh	r3, [r4, #4]
	((Adc *)hw)->CTRLB.reg = data;
   11722:	80c3      	strh	r3, [r0, #6]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   11724:	47a8      	blx	r5
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
   11726:	79a3      	ldrb	r3, [r4, #6]
	((Adc *)hw)->REFCTRL.reg = data;
   11728:	7203      	strb	r3, [r0, #8]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   1172a:	f640 71ff 	movw	r1, #4095	; 0xfff
   1172e:	47a8      	blx	r5
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
   11730:	79e3      	ldrb	r3, [r4, #7]
	((Adc *)hw)->EVCTRL.reg = data;
   11732:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
   11734:	8923      	ldrh	r3, [r4, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
   11736:	8083      	strh	r3, [r0, #4]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   11738:	f640 71ff 	movw	r1, #4095	; 0xfff
   1173c:	47a8      	blx	r5
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
   1173e:	7aa3      	ldrb	r3, [r4, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
   11740:	7283      	strb	r3, [r0, #10]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   11742:	f640 71ff 	movw	r1, #4095	; 0xfff
   11746:	47a8      	blx	r5
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
   11748:	7ae3      	ldrb	r3, [r4, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
   1174a:	72c3      	strb	r3, [r0, #11]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   1174c:	f640 71ff 	movw	r1, #4095	; 0xfff
   11750:	47a8      	blx	r5
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
   11752:	89a3      	ldrh	r3, [r4, #12]
	((Adc *)hw)->WINLT.reg = data;
   11754:	8183      	strh	r3, [r0, #12]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINLT);
   11756:	2180      	movs	r1, #128	; 0x80
   11758:	47a8      	blx	r5
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
   1175a:	89e3      	ldrh	r3, [r4, #14]
	((Adc *)hw)->WINUT.reg = data;
   1175c:	81c3      	strh	r3, [r0, #14]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINUT);
   1175e:	f44f 7180 	mov.w	r1, #256	; 0x100
   11762:	47a8      	blx	r5
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
   11764:	8a23      	ldrh	r3, [r4, #16]
	((Adc *)hw)->GAINCORR.reg = data;
   11766:	8203      	strh	r3, [r0, #16]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_GAINCORR);
   11768:	f44f 7100 	mov.w	r1, #512	; 0x200
   1176c:	47a8      	blx	r5
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
   1176e:	8a63      	ldrh	r3, [r4, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
   11770:	8243      	strh	r3, [r0, #18]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_OFFSETCORR);
   11772:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11776:	47a8      	blx	r5
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
   11778:	7d23      	ldrb	r3, [r4, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
   1177a:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
   1177c:	8863      	ldrh	r3, [r4, #2]
	((Adc *)hw)->CTRLA.reg = data;
   1177e:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   11780:	2103      	movs	r1, #3
   11782:	47a8      	blx	r5
}
   11784:	2000      	movs	r0, #0
   11786:	bd38      	pop	{r3, r4, r5, pc}
	} else if (hw == ADC1) {
   11788:	4b0c      	ldr	r3, [pc, #48]	; (117bc <_adc_init+0xf8>)
   1178a:	4298      	cmp	r0, r3
   1178c:	d10c      	bne.n	117a8 <_adc_init+0xe4>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   1178e:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
   11792:	681b      	ldr	r3, [r3, #0]
   11794:	0ada      	lsrs	r2, r3, #11
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
   11796:	0c99      	lsrs	r1, r3, #18
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   11798:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
   1179c:	f001 0170 	and.w	r1, r1, #112	; 0x70
   117a0:	430a      	orrs	r2, r1
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
   117a2:	f3c3 4302 	ubfx	r3, r3, #16, #3
   117a6:	e79e      	b.n	116e6 <_adc_init+0x22>
	uint16_t calib_reg = 0;
   117a8:	2200      	movs	r2, #0
   117aa:	e79d      	b.n	116e8 <_adc_init+0x24>
   117ac:	43001c00 	.word	0x43001c00
   117b0:	000115bd 	.word	0x000115bd
   117b4:	000115d9 	.word	0x000115d9
   117b8:	00015f04 	.word	0x00015f04
   117bc:	43002000 	.word	0x43002000

000117c0 <_adc_async_init>:
{
   117c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ASSERT(device);
   117c4:	4604      	mov	r4, r0
   117c6:	3800      	subs	r0, #0
   117c8:	bf18      	it	ne
   117ca:	2001      	movne	r0, #1
{
   117cc:	460d      	mov	r5, r1
	ASSERT(device);
   117ce:	22f1      	movs	r2, #241	; 0xf1
   117d0:	4923      	ldr	r1, [pc, #140]	; (11860 <_adc_async_init+0xa0>)
   117d2:	4b24      	ldr	r3, [pc, #144]	; (11864 <_adc_async_init+0xa4>)
   117d4:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
   117d6:	4b24      	ldr	r3, [pc, #144]	; (11868 <_adc_async_init+0xa8>)
   117d8:	4628      	mov	r0, r5
   117da:	4798      	blx	r3
   117dc:	4b23      	ldr	r3, [pc, #140]	; (1186c <_adc_async_init+0xac>)
   117de:	4601      	mov	r1, r0
   117e0:	4628      	mov	r0, r5
   117e2:	4798      	blx	r3
	if (init_status) {
   117e4:	4606      	mov	r6, r0
   117e6:	2800      	cmp	r0, #0
   117e8:	d130      	bne.n	1184c <_adc_async_init+0x8c>
	if (hw == ADC0) {
   117ea:	4b21      	ldr	r3, [pc, #132]	; (11870 <_adc_async_init+0xb0>)
	device->hw = hw;
   117ec:	6165      	str	r5, [r4, #20]
	if (hw == ADC0) {
   117ee:	429d      	cmp	r5, r3
   117f0:	d12f      	bne.n	11852 <_adc_async_init+0x92>
		_adc0_dev = dev;
   117f2:	4b20      	ldr	r3, [pc, #128]	; (11874 <_adc_async_init+0xb4>)
   117f4:	601c      	str	r4, [r3, #0]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
   117f6:	4920      	ldr	r1, [pc, #128]	; (11878 <_adc_async_init+0xb8>)
   117f8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 11884 <_adc_async_init+0xc4>
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
   117fc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 11888 <_adc_async_init+0xc8>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11800:	4f1e      	ldr	r7, [pc, #120]	; (1187c <_adc_async_init+0xbc>)
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
   11802:	4628      	mov	r0, r5
   11804:	4788      	blx	r1
   11806:	b200      	sxth	r0, r0
   11808:	47c8      	blx	r9
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
   1180a:	6960      	ldr	r0, [r4, #20]
   1180c:	4788      	blx	r1
   1180e:	b200      	sxth	r0, r0
   11810:	47c0      	blx	r8
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
   11812:	6960      	ldr	r0, [r4, #20]
   11814:	4788      	blx	r1
   11816:	2501      	movs	r5, #1
   11818:	0942      	lsrs	r2, r0, #5
   1181a:	f000 031f 	and.w	r3, r0, #31
   1181e:	fa05 f303 	lsl.w	r3, r5, r3
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
   11822:	4428      	add	r0, r5
   11824:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   11828:	b200      	sxth	r0, r0
   1182a:	47c8      	blx	r9
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
   1182c:	6960      	ldr	r0, [r4, #20]
   1182e:	4788      	blx	r1
   11830:	4428      	add	r0, r5
   11832:	b200      	sxth	r0, r0
   11834:	47c0      	blx	r8
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
   11836:	6960      	ldr	r0, [r4, #20]
   11838:	4788      	blx	r1
   1183a:	1943      	adds	r3, r0, r5
   1183c:	f3c3 124a 	ubfx	r2, r3, #5, #11
   11840:	f003 031f 	and.w	r3, r3, #31
   11844:	fa05 f303 	lsl.w	r3, r5, r3
   11848:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
}
   1184c:	4630      	mov	r0, r6
   1184e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (hw == ADC1) {
   11852:	4b0b      	ldr	r3, [pc, #44]	; (11880 <_adc_async_init+0xc0>)
   11854:	429d      	cmp	r5, r3
		_adc1_dev = dev;
   11856:	bf04      	itt	eq
   11858:	4b06      	ldreq	r3, [pc, #24]	; (11874 <_adc_async_init+0xb4>)
   1185a:	605c      	streq	r4, [r3, #4]
   1185c:	e7cb      	b.n	117f6 <_adc_async_init+0x36>
   1185e:	bf00      	nop
   11860:	00015eee 	.word	0x00015eee
   11864:	0000d305 	.word	0x0000d305
   11868:	00011641 	.word	0x00011641
   1186c:	000116c5 	.word	0x000116c5
   11870:	43001c00 	.word	0x43001c00
   11874:	2000109c 	.word	0x2000109c
   11878:	0001168d 	.word	0x0001168d
   1187c:	e000e100 	.word	0xe000e100
   11880:	43002000 	.word	0x43002000
   11884:	000116a1 	.word	0x000116a1
   11888:	00011671 	.word	0x00011671

0001188c <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
   1188c:	6940      	ldr	r0, [r0, #20]
   1188e:	4b01      	ldr	r3, [pc, #4]	; (11894 <_adc_async_enable_channel+0x8>)
   11890:	4718      	bx	r3
   11892:	bf00      	nop
   11894:	000115c5 	.word	0x000115c5

00011898 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
   11898:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
   1189a:	88db      	ldrh	r3, [r3, #6]
   1189c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   118a0:	2b03      	cmp	r3, #3
}
   118a2:	bf0c      	ite	eq
   118a4:	2001      	moveq	r0, #1
   118a6:	2002      	movne	r0, #2
   118a8:	4770      	bx	lr
	...

000118ac <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
   118ac:	6940      	ldr	r0, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
   118ae:	7d03      	ldrb	r3, [r0, #20]
   118b0:	f043 0302 	orr.w	r3, r3, #2
   118b4:	7503      	strb	r3, [r0, #20]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   118b6:	f640 71ff 	movw	r1, #4095	; 0xfff
   118ba:	4b01      	ldr	r3, [pc, #4]	; (118c0 <_adc_async_convert+0x14>)
   118bc:	4718      	bx	r3
   118be:	bf00      	nop
   118c0:	000115bd 	.word	0x000115bd

000118c4 <_adc_async_set_irq_state>:
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
   118c4:	2a01      	cmp	r2, #1
	void *const hw = device->hw;
   118c6:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
   118c8:	d104      	bne.n	118d4 <_adc_async_set_irq_state+0x10>
	if (value == 0x0) {
   118ca:	2204      	movs	r2, #4
	if (value == 0x0) {
   118cc:	b93b      	cbnz	r3, 118de <_adc_async_set_irq_state+0x1a>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
   118ce:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
   118d2:	4770      	bx	lr
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
   118d4:	2a02      	cmp	r2, #2
   118d6:	d0f9      	beq.n	118cc <_adc_async_set_irq_state+0x8>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
   118d8:	b91a      	cbnz	r2, 118e2 <_adc_async_set_irq_state+0x1e>
	if (value == 0x0) {
   118da:	2201      	movs	r2, #1
   118dc:	e7f6      	b.n	118cc <_adc_async_set_irq_state+0x8>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
   118de:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
}
   118e2:	4770      	bx	lr

000118e4 <ADC0_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
	_adc_interrupt_handler(_adc0_dev);
   118e4:	4b01      	ldr	r3, [pc, #4]	; (118ec <ADC0_0_Handler+0x8>)
   118e6:	6818      	ldr	r0, [r3, #0]
   118e8:	4b01      	ldr	r3, [pc, #4]	; (118f0 <ADC0_0_Handler+0xc>)
   118ea:	4718      	bx	r3
   118ec:	2000109c 	.word	0x2000109c
   118f0:	000115f1 	.word	0x000115f1

000118f4 <ADC0_1_Handler>:
   118f4:	4b00      	ldr	r3, [pc, #0]	; (118f8 <ADC0_1_Handler+0x4>)
   118f6:	4718      	bx	r3
   118f8:	000118e5 	.word	0x000118e5

000118fc <ADC1_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
	_adc_interrupt_handler(_adc1_dev);
   118fc:	4b01      	ldr	r3, [pc, #4]	; (11904 <ADC1_0_Handler+0x8>)
   118fe:	6858      	ldr	r0, [r3, #4]
   11900:	4b01      	ldr	r3, [pc, #4]	; (11908 <ADC1_0_Handler+0xc>)
   11902:	4718      	bx	r3
   11904:	2000109c 	.word	0x2000109c
   11908:	000115f1 	.word	0x000115f1

0001190c <ADC1_1_Handler>:
   1190c:	4b00      	ldr	r3, [pc, #0]	; (11910 <ADC1_1_Handler+0x4>)
   1190e:	4718      	bx	r3
   11910:	000118fd 	.word	0x000118fd

00011914 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   11914:	e7fe      	b.n	11914 <Dummy_Handler>
	...

00011918 <Reset_Handler>:
{
   11918:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   1191a:	4a14      	ldr	r2, [pc, #80]	; (1196c <Reset_Handler+0x54>)
   1191c:	4b14      	ldr	r3, [pc, #80]	; (11970 <Reset_Handler+0x58>)
   1191e:	429a      	cmp	r2, r3
   11920:	d002      	beq.n	11928 <Reset_Handler+0x10>
		for (; pDest < &_erelocate;) {
   11922:	4914      	ldr	r1, [pc, #80]	; (11974 <Reset_Handler+0x5c>)
   11924:	428b      	cmp	r3, r1
   11926:	d318      	bcc.n	1195a <Reset_Handler+0x42>
	pSrc  = &_etext;
   11928:	4b13      	ldr	r3, [pc, #76]	; (11978 <Reset_Handler+0x60>)
	for (pDest = &_szero; pDest < &_ezero;) {
   1192a:	4a14      	ldr	r2, [pc, #80]	; (1197c <Reset_Handler+0x64>)
		*pDest++ = 0;
   1192c:	2100      	movs	r1, #0
	for (pDest = &_szero; pDest < &_ezero;) {
   1192e:	4293      	cmp	r3, r2
   11930:	d318      	bcc.n	11964 <Reset_Handler+0x4c>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
   11932:	4a13      	ldr	r2, [pc, #76]	; (11980 <Reset_Handler+0x68>)
   11934:	4b13      	ldr	r3, [pc, #76]	; (11984 <Reset_Handler+0x6c>)
   11936:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1193a:	609a      	str	r2, [r3, #8]
	SCB->CPACR |= (0xFu << 20);
   1193c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11940:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   11944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   11948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1194c:	f3bf 8f6f 	isb	sy
	__libc_init_array();
   11950:	4b0d      	ldr	r3, [pc, #52]	; (11988 <Reset_Handler+0x70>)
   11952:	4798      	blx	r3
	main();
   11954:	4b0d      	ldr	r3, [pc, #52]	; (1198c <Reset_Handler+0x74>)
   11956:	4798      	blx	r3
	while (1)
   11958:	e7fe      	b.n	11958 <Reset_Handler+0x40>
			*pDest++ = *pSrc++;
   1195a:	f852 0b04 	ldr.w	r0, [r2], #4
   1195e:	f843 0b04 	str.w	r0, [r3], #4
   11962:	e7df      	b.n	11924 <Reset_Handler+0xc>
		*pDest++ = 0;
   11964:	f843 1b04 	str.w	r1, [r3], #4
   11968:	e7e1      	b.n	1192e <Reset_Handler+0x16>
   1196a:	bf00      	nop
   1196c:	0001608c 	.word	0x0001608c
   11970:	20000000 	.word	0x20000000
   11974:	200005ac 	.word	0x200005ac
   11978:	200005b0 	.word	0x200005b0
   1197c:	20014e38 	.word	0x20014e38
   11980:	00004000 	.word	0x00004000
   11984:	e000ed00 	.word	0xe000ed00
   11988:	00012b59 	.word	0x00012b59
   1198c:	0000ec19 	.word	0x0000ec19

00011990 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
   11990:	b510      	push	{r4, lr}
	system_init();
   11992:	4b04      	ldr	r3, [pc, #16]	; (119a4 <atmel_start_init+0x14>)
   11994:	4798      	blx	r3
	usb_init();
   11996:	4b04      	ldr	r3, [pc, #16]	; (119a8 <atmel_start_init+0x18>)
   11998:	4798      	blx	r3
	stdio_redirect_init();
}
   1199a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stdio_redirect_init();
   1199e:	4b03      	ldr	r3, [pc, #12]	; (119ac <atmel_start_init+0x1c>)
   119a0:	4718      	bx	r3
   119a2:	bf00      	nop
   119a4:	0000fdc5 	.word	0x0000fdc5
   119a8:	0000bf51 	.word	0x0000bf51
   119ac:	0000df95 	.word	0x0000df95

000119b0 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   119b0:	4b05      	ldr	r3, [pc, #20]	; (119c8 <usbdc_unconfig+0x18>)
{
   119b2:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   119b4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
   119b6:	b904      	cbnz	r4, 119ba <usbdc_unconfig+0xa>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
   119b8:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
   119ba:	6863      	ldr	r3, [r4, #4]
   119bc:	4620      	mov	r0, r4
   119be:	2200      	movs	r2, #0
   119c0:	2101      	movs	r1, #1
   119c2:	4798      	blx	r3
		func = func->next;
   119c4:	6824      	ldr	r4, [r4, #0]
   119c6:	e7f6      	b.n	119b6 <usbdc_unconfig+0x6>
   119c8:	200010a4 	.word	0x200010a4

000119cc <usbdc_change_notify>:
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   119cc:	4b06      	ldr	r3, [pc, #24]	; (119e8 <usbdc_change_notify+0x1c>)
{
   119ce:	b570      	push	{r4, r5, r6, lr}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   119d0:	68dc      	ldr	r4, [r3, #12]
{
   119d2:	4605      	mov	r5, r0
   119d4:	460e      	mov	r6, r1

	while (cg != NULL) {
   119d6:	b904      	cbnz	r4, 119da <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
   119d8:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
   119da:	6863      	ldr	r3, [r4, #4]
   119dc:	b113      	cbz	r3, 119e4 <usbdc_change_notify+0x18>
			cg->cb(change, value);
   119de:	4631      	mov	r1, r6
   119e0:	4628      	mov	r0, r5
   119e2:	4798      	blx	r3
		cg = cg->next;
   119e4:	6824      	ldr	r4, [r4, #0]
   119e6:	e7f6      	b.n	119d6 <usbdc_change_notify+0xa>
   119e8:	200010a4 	.word	0x200010a4

000119ec <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   119ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   119ee:	4b0c      	ldr	r3, [pc, #48]	; (11a20 <usbdc_request_handler+0x34>)
   119f0:	689c      	ldr	r4, [r3, #8]
{
   119f2:	4605      	mov	r5, r0
   119f4:	460e      	mov	r6, r1
   119f6:	4617      	mov	r7, r2
	int32_t                   rc;

	while (h != NULL) {
   119f8:	b90c      	cbnz	r4, 119fe <usbdc_request_handler+0x12>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
   119fa:	4620      	mov	r0, r4
}
   119fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
   119fe:	6863      	ldr	r3, [r4, #4]
   11a00:	b90b      	cbnz	r3, 11a06 <usbdc_request_handler+0x1a>
		h = h->next;
   11a02:	6824      	ldr	r4, [r4, #0]
   11a04:	e7f8      	b.n	119f8 <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
   11a06:	463a      	mov	r2, r7
   11a08:	4631      	mov	r1, r6
   11a0a:	4628      	mov	r0, r5
   11a0c:	4798      	blx	r3
			if (0 == rc) {
   11a0e:	b120      	cbz	r0, 11a1a <usbdc_request_handler+0x2e>
			} else if (ERR_NOT_FOUND != rc) {
   11a10:	300a      	adds	r0, #10
   11a12:	d0f6      	beq.n	11a02 <usbdc_request_handler+0x16>
				return -1;
   11a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11a18:	e7f0      	b.n	119fc <usbdc_request_handler+0x10>
				return true;
   11a1a:	2001      	movs	r0, #1
   11a1c:	e7ee      	b.n	119fc <usbdc_request_handler+0x10>
   11a1e:	bf00      	nop
   11a20:	200010a4 	.word	0x200010a4

00011a24 <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   11a24:	4b04      	ldr	r3, [pc, #16]	; (11a38 <usbd_sof_cb+0x14>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   11a26:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   11a28:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
   11a2a:	b904      	cbnz	r4, 11a2e <usbd_sof_cb+0xa>
	usbdc_sof_notify();
}
   11a2c:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
   11a2e:	6863      	ldr	r3, [r4, #4]
   11a30:	b103      	cbz	r3, 11a34 <usbd_sof_cb+0x10>
			sof->cb();
   11a32:	4798      	blx	r3
		sof = sof->next;
   11a34:	6824      	ldr	r4, [r4, #0]
   11a36:	e7f8      	b.n	11a2a <usbd_sof_cb+0x6>
   11a38:	200010a4 	.word	0x200010a4

00011a3c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   11a3c:	b510      	push	{r4, lr}
   11a3e:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
   11a40:	460a      	mov	r2, r1
   11a42:	b119      	cbz	r1, 11a4c <usbdc_cb_ctl_done+0x10>
   11a44:	2901      	cmp	r1, #1
   11a46:	d021      	beq.n	11a8c <usbdc_cb_ctl_done+0x50>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
   11a48:	2000      	movs	r0, #0
   11a4a:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   11a4c:	7823      	ldrb	r3, [r4, #0]
   11a4e:	2b00      	cmp	r3, #0
   11a50:	d1fa      	bne.n	11a48 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
   11a52:	7863      	ldrb	r3, [r4, #1]
   11a54:	2b05      	cmp	r3, #5
   11a56:	d00d      	beq.n	11a74 <usbdc_cb_ctl_done+0x38>
   11a58:	2b09      	cmp	r3, #9
   11a5a:	d1f5      	bne.n	11a48 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
   11a5c:	8862      	ldrh	r2, [r4, #2]
   11a5e:	4b0e      	ldr	r3, [pc, #56]	; (11a98 <usbdc_cb_ctl_done+0x5c>)
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   11a60:	2a00      	cmp	r2, #0
		usbdc.cfg_value = req->wValue;
   11a62:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   11a64:	bf14      	ite	ne
   11a66:	2104      	movne	r1, #4
   11a68:	2103      	moveq	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   11a6a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   11a6c:	2001      	movs	r0, #1
   11a6e:	4b0b      	ldr	r3, [pc, #44]	; (11a9c <usbdc_cb_ctl_done+0x60>)
   11a70:	4798      	blx	r3
		break;
   11a72:	e7e9      	b.n	11a48 <usbdc_cb_ctl_done+0xc>
		usbdc_set_address(req->wValue);
   11a74:	8860      	ldrh	r0, [r4, #2]
	usb_d_set_address(addr);
   11a76:	4b0a      	ldr	r3, [pc, #40]	; (11aa0 <usbdc_cb_ctl_done+0x64>)
   11a78:	b2c0      	uxtb	r0, r0
   11a7a:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   11a7c:	8863      	ldrh	r3, [r4, #2]
   11a7e:	2b00      	cmp	r3, #0
   11a80:	bf18      	it	ne
   11a82:	2103      	movne	r1, #3
   11a84:	4b04      	ldr	r3, [pc, #16]	; (11a98 <usbdc_cb_ctl_done+0x5c>)
   11a86:	bf08      	it	eq
   11a88:	2102      	moveq	r1, #2
   11a8a:	e7ee      	b.n	11a6a <usbdc_cb_ctl_done+0x2e>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   11a8c:	4b05      	ldr	r3, [pc, #20]	; (11aa4 <usbdc_cb_ctl_done+0x68>)
   11a8e:	4621      	mov	r1, r4
   11a90:	2000      	movs	r0, #0
   11a92:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
   11a94:	e7d8      	b.n	11a48 <usbdc_cb_ctl_done+0xc>
   11a96:	bf00      	nop
   11a98:	200010a4 	.word	0x200010a4
   11a9c:	000119cd 	.word	0x000119cd
   11aa0:	0000e7e1 	.word	0x0000e7e1
   11aa4:	000119ed 	.word	0x000119ed

00011aa8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   11aa8:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();

	usbdc.state       = USBD_S_DEFAULT;
   11aaa:	4d0d      	ldr	r5, [pc, #52]	; (11ae0 <usbdc_reset+0x38>)
	usbdc_unconfig();
   11aac:	4b0d      	ldr	r3, [pc, #52]	; (11ae4 <usbdc_reset+0x3c>)
	usbdc.cfg_value   = 0;
	usbdc.ifc_alt_map = 0;
   11aae:	2400      	movs	r4, #0
	usbdc.state       = USBD_S_DEFAULT;
   11ab0:	2602      	movs	r6, #2
	usbdc_unconfig();
   11ab2:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
   11ab4:	836e      	strh	r6, [r5, #26]

	// Setup EP0
	usb_d_ep_deinit(0);
   11ab6:	4620      	mov	r0, r4
   11ab8:	4b0b      	ldr	r3, [pc, #44]	; (11ae8 <usbdc_reset+0x40>)
	usbdc.ifc_alt_map = 0;
   11aba:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
   11abc:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   11abe:	4b0b      	ldr	r3, [pc, #44]	; (11aec <usbdc_reset+0x44>)
   11ac0:	7f28      	ldrb	r0, [r5, #28]
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   11ac2:	4d0b      	ldr	r5, [pc, #44]	; (11af0 <usbdc_reset+0x48>)
	usb_d_ep0_init(usbdc.ctrl_size);
   11ac4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   11ac6:	4621      	mov	r1, r4
   11ac8:	4620      	mov	r0, r4
   11aca:	4a0a      	ldr	r2, [pc, #40]	; (11af4 <usbdc_reset+0x4c>)
   11acc:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   11ace:	4620      	mov	r0, r4
   11ad0:	4631      	mov	r1, r6
   11ad2:	4a09      	ldr	r2, [pc, #36]	; (11af8 <usbdc_reset+0x50>)
   11ad4:	47a8      	blx	r5
	usb_d_ep_enable(0);
   11ad6:	4620      	mov	r0, r4
   11ad8:	4b08      	ldr	r3, [pc, #32]	; (11afc <usbdc_reset+0x54>)
}
   11ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
   11ade:	4718      	bx	r3
   11ae0:	200010a4 	.word	0x200010a4
   11ae4:	000119b1 	.word	0x000119b1
   11ae8:	0000e84d 	.word	0x0000e84d
   11aec:	0000e83d 	.word	0x0000e83d
   11af0:	0000ea61 	.word	0x0000ea61
   11af4:	00011b39 	.word	0x00011b39
   11af8:	00011a3d 	.word	0x00011a3d
   11afc:	0000e879 	.word	0x0000e879

00011b00 <usbd_event_cb>:
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
	(void)param;

	switch (ev) {
   11b00:	b110      	cbz	r0, 11b08 <usbd_event_cb+0x8>
   11b02:	2801      	cmp	r0, #1
   11b04:	d002      	beq.n	11b0c <usbd_event_cb+0xc>
   11b06:	4770      	bx	lr
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
   11b08:	4b01      	ldr	r3, [pc, #4]	; (11b10 <usbd_event_cb+0x10>)
   11b0a:	4718      	bx	r3
		break;

	case USB_EV_RESET:
		usbdc_reset();
   11b0c:	4b01      	ldr	r3, [pc, #4]	; (11b14 <usbd_event_cb+0x14>)
   11b0e:	4718      	bx	r3
   11b10:	000119cd 	.word	0x000119cd
   11b14:	00011aa9 	.word	0x00011aa9

00011b18 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   11b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   11b1a:	f88d 000c 	strb.w	r0, [sp, #12]
   11b1e:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
   11b22:	a801      	add	r0, sp, #4
   11b24:	4b03      	ldr	r3, [pc, #12]	; (11b34 <usbdc_xfer+0x1c>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   11b26:	e9cd 1201 	strd	r1, r2, [sp, #4]
	return usb_d_ep_transfer(&xfer);
   11b2a:	4798      	blx	r3
}
   11b2c:	b005      	add	sp, #20
   11b2e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b32:	bf00      	nop
   11b34:	0000e8b9 	.word	0x0000e8b9

00011b38 <usbdc_cb_ctl_req>:
{
   11b38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11b3c:	4ba6      	ldr	r3, [pc, #664]	; (11dd8 <usbdc_cb_ctl_req+0x2a0>)
   11b3e:	2200      	movs	r2, #0
{
   11b40:	4605      	mov	r5, r0
   11b42:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11b44:	4798      	blx	r3
   11b46:	1c43      	adds	r3, r0, #1
   11b48:	d008      	beq.n	11b5c <usbdc_cb_ctl_req+0x24>
   11b4a:	2801      	cmp	r0, #1
   11b4c:	d034      	beq.n	11bb8 <usbdc_cb_ctl_req+0x80>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11b4e:	7823      	ldrb	r3, [r4, #0]
   11b50:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
   11b54:	d004      	beq.n	11b60 <usbdc_cb_ctl_req+0x28>
   11b56:	2a80      	cmp	r2, #128	; 0x80
   11b58:	f000 80ca 	beq.w	11cf0 <usbdc_cb_ctl_req+0x1b8>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11b5c:	2000      	movs	r0, #0
   11b5e:	e02b      	b.n	11bb8 <usbdc_cb_ctl_req+0x80>
	switch (req->bRequest) {
   11b60:	7862      	ldrb	r2, [r4, #1]
   11b62:	3a01      	subs	r2, #1
   11b64:	2a0a      	cmp	r2, #10
   11b66:	d8f9      	bhi.n	11b5c <usbdc_cb_ctl_req+0x24>
   11b68:	a101      	add	r1, pc, #4	; (adr r1, 11b70 <usbdc_cb_ctl_req+0x38>)
   11b6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   11b6e:	bf00      	nop
   11b70:	00011c23 	.word	0x00011c23
   11b74:	00011b5d 	.word	0x00011b5d
   11b78:	00011c49 	.word	0x00011c49
   11b7c:	00011b5d 	.word	0x00011b5d
   11b80:	00011ba7 	.word	0x00011ba7
   11b84:	00011b5d 	.word	0x00011b5d
   11b88:	00011b5d 	.word	0x00011b5d
   11b8c:	00011b5d 	.word	0x00011b5d
   11b90:	00011b9d 	.word	0x00011b9d
   11b94:	00011b5d 	.word	0x00011b5d
   11b98:	00011c63 	.word	0x00011c63
		if (!usbdc_set_config(req->wValue)) {
   11b9c:	8862      	ldrh	r2, [r4, #2]
   11b9e:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
   11ba0:	b96a      	cbnz	r2, 11bbe <usbdc_cb_ctl_req+0x86>
		usbdc_unconfig();
   11ba2:	4b8e      	ldr	r3, [pc, #568]	; (11ddc <usbdc_cb_ctl_req+0x2a4>)
   11ba4:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   11ba6:	2200      	movs	r2, #0
   11ba8:	2301      	movs	r3, #1
   11baa:	4611      	mov	r1, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11bac:	4c8c      	ldr	r4, [pc, #560]	; (11de0 <usbdc_cb_ctl_req+0x2a8>)
   11bae:	4628      	mov	r0, r5
   11bb0:	47a0      	blx	r4
   11bb2:	fab0 f080 	clz	r0, r0
   11bb6:	0940      	lsrs	r0, r0, #5
}
   11bb8:	b004      	add	sp, #16
   11bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   11bbe:	4c89      	ldr	r4, [pc, #548]	; (11de4 <usbdc_cb_ctl_req+0x2ac>)
   11bc0:	6823      	ldr	r3, [r4, #0]
   11bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
   11bc6:	4b88      	ldr	r3, [pc, #544]	; (11de8 <usbdc_cb_ctl_req+0x2b0>)
   11bc8:	4798      	blx	r3
	if (NULL == cfg_desc) {
   11bca:	2800      	cmp	r0, #0
   11bcc:	d0c6      	beq.n	11b5c <usbdc_cb_ctl_req+0x24>
   11bce:	78c2      	ldrb	r2, [r0, #3]
   11bd0:	7883      	ldrb	r3, [r0, #2]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11bd2:	4f86      	ldr	r7, [pc, #536]	; (11dec <usbdc_cb_ctl_req+0x2b4>)
   11bd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
   11bd8:	fa10 f183 	uxtah	r1, r0, r3
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11bdc:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
   11bde:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11be0:	47b8      	blx	r7
	uint8_t                 last_iface = 0xFF;
   11be2:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11be4:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
   11be6:	9a02      	ldr	r2, [sp, #8]
   11be8:	2a00      	cmp	r2, #0
   11bea:	d0dc      	beq.n	11ba6 <usbdc_cb_ctl_req+0x6e>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   11bec:	f892 8002 	ldrb.w	r8, [r2, #2]
   11bf0:	4598      	cmp	r8, r3
   11bf2:	d014      	beq.n	11c1e <usbdc_cb_ctl_req+0xe6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   11bf4:	6926      	ldr	r6, [r4, #16]
			while (NULL != func) {
   11bf6:	b94e      	cbnz	r6, 11c0c <usbdc_cb_ctl_req+0xd4>
		desc.sod = usb_desc_next(desc.sod);
   11bf8:	9802      	ldr	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11bfa:	9903      	ldr	r1, [sp, #12]
	return (desc + usb_desc_len(desc));
   11bfc:	7803      	ldrb	r3, [r0, #0]
   11bfe:	2204      	movs	r2, #4
   11c00:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
   11c02:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11c04:	47b8      	blx	r7
   11c06:	4643      	mov	r3, r8
   11c08:	9002      	str	r0, [sp, #8]
   11c0a:	e7ec      	b.n	11be6 <usbdc_cb_ctl_req+0xae>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   11c0c:	6873      	ldr	r3, [r6, #4]
   11c0e:	aa02      	add	r2, sp, #8
   11c10:	2100      	movs	r1, #0
   11c12:	4630      	mov	r0, r6
   11c14:	4798      	blx	r3
   11c16:	2800      	cmp	r0, #0
   11c18:	d0ee      	beq.n	11bf8 <usbdc_cb_ctl_req+0xc0>
					func = func->next;
   11c1a:	6836      	ldr	r6, [r6, #0]
   11c1c:	e7eb      	b.n	11bf6 <usbdc_cb_ctl_req+0xbe>
   11c1e:	4698      	mov	r8, r3
   11c20:	e7ea      	b.n	11bf8 <usbdc_cb_ctl_req+0xc0>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11c22:	2b02      	cmp	r3, #2
   11c24:	d19a      	bne.n	11b5c <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
   11c26:	88e2      	ldrh	r2, [r4, #6]
   11c28:	2a00      	cmp	r2, #0
   11c2a:	d197      	bne.n	11b5c <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   11c2c:	88a0      	ldrh	r0, [r4, #4]
   11c2e:	4b70      	ldr	r3, [pc, #448]	; (11df0 <usbdc_cb_ctl_req+0x2b8>)
   11c30:	9201      	str	r2, [sp, #4]
   11c32:	4611      	mov	r1, r2
   11c34:	b2c0      	uxtb	r0, r0
   11c36:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11c38:	9a01      	ldr	r2, [sp, #4]
   11c3a:	2301      	movs	r3, #1
		usbdc_xfer(ep, NULL, 0, true);
   11c3c:	4611      	mov	r1, r2
   11c3e:	4628      	mov	r0, r5
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11c40:	4c67      	ldr	r4, [pc, #412]	; (11de0 <usbdc_cb_ctl_req+0x2a8>)
   11c42:	47a0      	blx	r4
			return true;
   11c44:	2001      	movs	r0, #1
   11c46:	e7b7      	b.n	11bb8 <usbdc_cb_ctl_req+0x80>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11c48:	2b02      	cmp	r3, #2
   11c4a:	d187      	bne.n	11b5c <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
   11c4c:	88e6      	ldrh	r6, [r4, #6]
   11c4e:	2e00      	cmp	r6, #0
   11c50:	d184      	bne.n	11b5c <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   11c52:	88a0      	ldrh	r0, [r4, #4]
   11c54:	4b66      	ldr	r3, [pc, #408]	; (11df0 <usbdc_cb_ctl_req+0x2b8>)
   11c56:	2101      	movs	r1, #1
   11c58:	b2c0      	uxtb	r0, r0
   11c5a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11c5c:	2301      	movs	r3, #1
   11c5e:	4632      	mov	r2, r6
   11c60:	e7ec      	b.n	11c3c <usbdc_cb_ctl_req+0x104>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11c62:	4d60      	ldr	r5, [pc, #384]	; (11de4 <usbdc_cb_ctl_req+0x2ac>)
		return usbdc_set_interface(req->wValue, req->wIndex);
   11c64:	8866      	ldrh	r6, [r4, #2]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11c66:	682b      	ldr	r3, [r5, #0]
   11c68:	7eea      	ldrb	r2, [r5, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
   11c6a:	88a7      	ldrh	r7, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
   11c70:	4b5d      	ldr	r3, [pc, #372]	; (11de8 <usbdc_cb_ctl_req+0x2b0>)
   11c72:	4798      	blx	r3
	if (NULL == ifc) {
   11c74:	2800      	cmp	r0, #0
   11c76:	f43f af71 	beq.w	11b5c <usbdc_cb_ctl_req+0x24>
	desc.sod = ifc;
   11c7a:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
   11c7c:	78c2      	ldrb	r2, [r0, #3]
   11c7e:	7883      	ldrb	r3, [r0, #2]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   11c80:	4c5a      	ldr	r4, [pc, #360]	; (11dec <usbdc_cb_ctl_req+0x2b4>)
   11c82:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   11c86:	fa10 f183 	uxtah	r1, r0, r3
   11c8a:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   11c8c:	2204      	movs	r2, #4
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11c8e:	47a0      	blx	r4
		if (NULL == ifc) {
   11c90:	2800      	cmp	r0, #0
   11c92:	f43f af63 	beq.w	11b5c <usbdc_cb_ctl_req+0x24>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   11c96:	7883      	ldrb	r3, [r0, #2]
   11c98:	42bb      	cmp	r3, r7
   11c9a:	d110      	bne.n	11cbe <usbdc_cb_ctl_req+0x186>
   11c9c:	78c3      	ldrb	r3, [r0, #3]
   11c9e:	42b3      	cmp	r3, r6
   11ca0:	d10d      	bne.n	11cbe <usbdc_cb_ctl_req+0x186>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   11ca2:	692c      	ldr	r4, [r5, #16]
	desc.sod = ifc;
   11ca4:	9002      	str	r0, [sp, #8]
	while (NULL != func) {
   11ca6:	2c00      	cmp	r4, #0
   11ca8:	f43f af58 	beq.w	11b5c <usbdc_cb_ctl_req+0x24>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   11cac:	2101      	movs	r1, #1
   11cae:	6863      	ldr	r3, [r4, #4]
   11cb0:	aa02      	add	r2, sp, #8
   11cb2:	4620      	mov	r0, r4
   11cb4:	4798      	blx	r3
   11cb6:	4601      	mov	r1, r0
   11cb8:	b140      	cbz	r0, 11ccc <usbdc_cb_ctl_req+0x194>
			func = func->next;
   11cba:	6824      	ldr	r4, [r4, #0]
   11cbc:	e7f3      	b.n	11ca6 <usbdc_cb_ctl_req+0x16e>
		desc.sod = usb_desc_next(desc.sod);
   11cbe:	9802      	ldr	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11cc0:	9903      	ldr	r1, [sp, #12]
	return (desc + usb_desc_len(desc));
   11cc2:	7803      	ldrb	r3, [r0, #0]
   11cc4:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
   11cc6:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11cc8:	2204      	movs	r2, #4
   11cca:	e7e0      	b.n	11c8e <usbdc_cb_ctl_req+0x156>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   11ccc:	6863      	ldr	r3, [r4, #4]
   11cce:	aa02      	add	r2, sp, #8
   11cd0:	4620      	mov	r0, r4
   11cd2:	4798      	blx	r3
   11cd4:	2800      	cmp	r0, #0
   11cd6:	f47f af41 	bne.w	11b5c <usbdc_cb_ctl_req+0x24>
			if (alt_set) {
   11cda:	b126      	cbz	r6, 11ce6 <usbdc_cb_ctl_req+0x1ae>
				usbdc.ifc_alt_map |= 1 << ifc_id;
   11cdc:	2301      	movs	r3, #1
   11cde:	40bb      	lsls	r3, r7
   11ce0:	7f6f      	ldrb	r7, [r5, #29]
   11ce2:	431f      	orrs	r7, r3
   11ce4:	776f      	strb	r7, [r5, #29]
			usbdc_xfer(0, NULL, 0, 0);
   11ce6:	2300      	movs	r3, #0
   11ce8:	461a      	mov	r2, r3
   11cea:	4619      	mov	r1, r3
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11cec:	4618      	mov	r0, r3
   11cee:	e7a7      	b.n	11c40 <usbdc_cb_ctl_req+0x108>
	switch (req->bRequest) {
   11cf0:	7862      	ldrb	r2, [r4, #1]
   11cf2:	2a0a      	cmp	r2, #10
   11cf4:	f63f af32 	bhi.w	11b5c <usbdc_cb_ctl_req+0x24>
   11cf8:	a101      	add	r1, pc, #4	; (adr r1, 11d00 <usbdc_cb_ctl_req+0x1c8>)
   11cfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   11cfe:	bf00      	nop
   11d00:	00011df9 	.word	0x00011df9
   11d04:	00011b5d 	.word	0x00011b5d
   11d08:	00011b5d 	.word	0x00011b5d
   11d0c:	00011b5d 	.word	0x00011b5d
   11d10:	00011b5d 	.word	0x00011b5d
   11d14:	00011b5d 	.word	0x00011b5d
   11d18:	00011d2d 	.word	0x00011d2d
   11d1c:	00011b5d 	.word	0x00011b5d
   11d20:	00011dc9 	.word	0x00011dc9
   11d24:	00011b5d 	.word	0x00011b5d
   11d28:	00011e27 	.word	0x00011e27
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11d2c:	8863      	ldrh	r3, [r4, #2]
   11d2e:	0a19      	lsrs	r1, r3, #8
	switch (type) {
   11d30:	2902      	cmp	r1, #2
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11d32:	460a      	mov	r2, r1
	switch (type) {
   11d34:	d016      	beq.n	11d64 <usbdc_cb_ctl_req+0x22c>
   11d36:	2903      	cmp	r1, #3
   11d38:	d031      	beq.n	11d9e <usbdc_cb_ctl_req+0x266>
   11d3a:	2901      	cmp	r1, #1
   11d3c:	f47f af0e 	bne.w	11b5c <usbdc_cb_ctl_req+0x24>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11d40:	4b28      	ldr	r3, [pc, #160]	; (11de4 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   11d42:	88e4      	ldrh	r4, [r4, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11d44:	681b      	ldr	r3, [r3, #0]
   11d46:	e9d3 0100 	ldrd	r0, r1, [r3]
   11d4a:	4b28      	ldr	r3, [pc, #160]	; (11dec <usbdc_cb_ctl_req+0x2b4>)
   11d4c:	4798      	blx	r3
	if (!dev_desc) {
   11d4e:	4601      	mov	r1, r0
   11d50:	2800      	cmp	r0, #0
   11d52:	f43f af03 	beq.w	11b5c <usbdc_cb_ctl_req+0x24>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   11d56:	2c12      	cmp	r4, #18
   11d58:	4622      	mov	r2, r4
   11d5a:	f04f 0300 	mov.w	r3, #0
   11d5e:	bf28      	it	cs
   11d60:	2212      	movcs	r2, #18
   11d62:	e723      	b.n	11bac <usbdc_cb_ctl_req+0x74>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11d64:	4a1f      	ldr	r2, [pc, #124]	; (11de4 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   11d66:	88e4      	ldrh	r4, [r4, #6]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11d68:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11d6a:	7f16      	ldrb	r6, [r2, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11d6c:	1c5a      	adds	r2, r3, #1
   11d6e:	e9d0 0100 	ldrd	r0, r1, [r0]
   11d72:	4b1d      	ldr	r3, [pc, #116]	; (11de8 <usbdc_cb_ctl_req+0x2b0>)
   11d74:	b2d2      	uxtb	r2, r2
   11d76:	4798      	blx	r3
	if (NULL == cfg_desc) {
   11d78:	4601      	mov	r1, r0
   11d7a:	2800      	cmp	r0, #0
   11d7c:	f43f aeee 	beq.w	11b5c <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
   11d80:	78c3      	ldrb	r3, [r0, #3]
   11d82:	7882      	ldrb	r2, [r0, #2]
   11d84:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   11d88:	b292      	uxth	r2, r2
	if (length <= total_len) {
   11d8a:	4294      	cmp	r4, r2
   11d8c:	d91a      	bls.n	11dc4 <usbdc_cb_ctl_req+0x28c>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11d8e:	3e01      	subs	r6, #1
   11d90:	4226      	tst	r6, r4
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11d92:	bf0c      	ite	eq
   11d94:	2301      	moveq	r3, #1
   11d96:	2300      	movne	r3, #0
   11d98:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11d9a:	4622      	mov	r2, r4
   11d9c:	e706      	b.n	11bac <usbdc_cb_ctl_req+0x74>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11d9e:	4a11      	ldr	r2, [pc, #68]	; (11de4 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   11da0:	88e4      	ldrh	r4, [r4, #6]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11da2:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11da4:	7f16      	ldrb	r6, [r2, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11da6:	e9d0 0100 	ldrd	r0, r1, [r0]
   11daa:	b2da      	uxtb	r2, r3
   11dac:	4b11      	ldr	r3, [pc, #68]	; (11df4 <usbdc_cb_ctl_req+0x2bc>)
   11dae:	4798      	blx	r3
	if (NULL == str_desc) {
   11db0:	4601      	mov	r1, r0
   11db2:	2800      	cmp	r0, #0
   11db4:	f43f aed2 	beq.w	11b5c <usbdc_cb_ctl_req+0x24>
	if (length <= str_desc[0]) {
   11db8:	7802      	ldrb	r2, [r0, #0]
   11dba:	4294      	cmp	r4, r2
   11dbc:	d902      	bls.n	11dc4 <usbdc_cb_ctl_req+0x28c>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11dbe:	1e73      	subs	r3, r6, #1
   11dc0:	4223      	tst	r3, r4
   11dc2:	e7e6      	b.n	11d92 <usbdc_cb_ctl_req+0x25a>
		need_zlp = false;
   11dc4:	2300      	movs	r3, #0
   11dc6:	e7e8      	b.n	11d9a <usbdc_cb_ctl_req+0x262>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   11dc8:	4906      	ldr	r1, [pc, #24]	; (11de4 <usbdc_cb_ctl_req+0x2ac>)
   11dca:	694b      	ldr	r3, [r1, #20]
   11dcc:	7eca      	ldrb	r2, [r1, #27]
   11dce:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   11dd0:	2300      	movs	r3, #0
   11dd2:	2201      	movs	r2, #1
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11dd4:	6949      	ldr	r1, [r1, #20]
   11dd6:	e732      	b.n	11c3e <usbdc_cb_ctl_req+0x106>
   11dd8:	000119ed 	.word	0x000119ed
   11ddc:	000119b1 	.word	0x000119b1
   11de0:	00011b19 	.word	0x00011b19
   11de4:	200010a4 	.word	0x200010a4
   11de8:	0000b5bd 	.word	0x0000b5bd
   11dec:	0000b585 	.word	0x0000b585
   11df0:	0000e9fd 	.word	0x0000e9fd
   11df4:	0000b5f9 	.word	0x0000b5f9
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11df8:	f003 011f 	and.w	r1, r3, #31
   11dfc:	f013 031e 	ands.w	r3, r3, #30
   11e00:	d00b      	beq.n	11e1a <usbdc_cb_ctl_req+0x2e2>
   11e02:	2902      	cmp	r1, #2
   11e04:	f47f aeaa 	bne.w	11b5c <usbdc_cb_ctl_req+0x24>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   11e08:	88a0      	ldrh	r0, [r4, #4]
   11e0a:	4b17      	ldr	r3, [pc, #92]	; (11e68 <usbdc_cb_ctl_req+0x330>)
   11e0c:	b2c0      	uxtb	r0, r0
   11e0e:	4798      	blx	r3
		if (st < 0) {
   11e10:	1e03      	subs	r3, r0, #0
   11e12:	f6ff aea3 	blt.w	11b5c <usbdc_cb_ctl_req+0x24>
		st = st & 0x1;
   11e16:	f003 0301 	and.w	r3, r3, #1
	memcpy(usbdc.ctrl_buf, &st, 2);
   11e1a:	4914      	ldr	r1, [pc, #80]	; (11e6c <usbdc_cb_ctl_req+0x334>)
   11e1c:	694a      	ldr	r2, [r1, #20]
   11e1e:	8013      	strh	r3, [r2, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11e20:	2300      	movs	r3, #0
   11e22:	2202      	movs	r2, #2
   11e24:	e7d6      	b.n	11dd4 <usbdc_cb_ctl_req+0x29c>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   11e26:	4911      	ldr	r1, [pc, #68]	; (11e6c <usbdc_cb_ctl_req+0x334>)
   11e28:	88a2      	ldrh	r2, [r4, #4]
   11e2a:	7f4b      	ldrb	r3, [r1, #29]
   11e2c:	4113      	asrs	r3, r2
   11e2e:	f013 0301 	ands.w	r3, r3, #1
   11e32:	460e      	mov	r6, r1
   11e34:	d00c      	beq.n	11e50 <usbdc_cb_ctl_req+0x318>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11e36:	690d      	ldr	r5, [r1, #16]
	while (NULL != func) {
   11e38:	2d00      	cmp	r5, #0
   11e3a:	f43f ae8f 	beq.w	11b5c <usbdc_cb_ctl_req+0x24>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11e3e:	686b      	ldr	r3, [r5, #4]
   11e40:	4622      	mov	r2, r4
   11e42:	2102      	movs	r1, #2
   11e44:	4628      	mov	r0, r5
   11e46:	4798      	blx	r3
   11e48:	2800      	cmp	r0, #0
   11e4a:	da06      	bge.n	11e5a <usbdc_cb_ctl_req+0x322>
			func = func->next;
   11e4c:	682d      	ldr	r5, [r5, #0]
   11e4e:	e7f3      	b.n	11e38 <usbdc_cb_ctl_req+0x300>
		usbdc.ctrl_buf[0] = 0;
   11e50:	694a      	ldr	r2, [r1, #20]
   11e52:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11e54:	6949      	ldr	r1, [r1, #20]
   11e56:	2201      	movs	r2, #1
   11e58:	e748      	b.n	11cec <usbdc_cb_ctl_req+0x1b4>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11e5a:	6973      	ldr	r3, [r6, #20]
   11e5c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11e5e:	6971      	ldr	r1, [r6, #20]
   11e60:	2300      	movs	r3, #0
   11e62:	2201      	movs	r2, #1
   11e64:	e742      	b.n	11cec <usbdc_cb_ctl_req+0x1b4>
   11e66:	bf00      	nop
   11e68:	0000e9fd 	.word	0x0000e9fd
   11e6c:	200010a4 	.word	0x200010a4

00011e70 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
   11e70:	2801      	cmp	r0, #1
   11e72:	d005      	beq.n	11e80 <usbdc_register_handler+0x10>
   11e74:	2802      	cmp	r0, #2
   11e76:	d005      	beq.n	11e84 <usbdc_register_handler+0x14>
   11e78:	b930      	cbnz	r0, 11e88 <usbdc_register_handler+0x18>
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   11e7a:	4804      	ldr	r0, [pc, #16]	; (11e8c <usbdc_register_handler+0x1c>)
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   11e7c:	4b04      	ldr	r3, [pc, #16]	; (11e90 <usbdc_register_handler+0x20>)
   11e7e:	4718      	bx	r3
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   11e80:	4804      	ldr	r0, [pc, #16]	; (11e94 <usbdc_register_handler+0x24>)
   11e82:	e7fb      	b.n	11e7c <usbdc_register_handler+0xc>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   11e84:	4804      	ldr	r0, [pc, #16]	; (11e98 <usbdc_register_handler+0x28>)
   11e86:	e7f9      	b.n	11e7c <usbdc_register_handler+0xc>
		break;
	default:
		break;
	}
}
   11e88:	4770      	bx	lr
   11e8a:	bf00      	nop
   11e8c:	200010a8 	.word	0x200010a8
   11e90:	0000f289 	.word	0x0000f289
   11e94:	200010ac 	.word	0x200010ac
   11e98:	200010b0 	.word	0x200010b0

00011e9c <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   11e9c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
   11e9e:	4604      	mov	r4, r0
   11ea0:	3800      	subs	r0, #0
   11ea2:	bf18      	it	ne
   11ea4:	2001      	movne	r0, #1
   11ea6:	490c      	ldr	r1, [pc, #48]	; (11ed8 <usbdc_init+0x3c>)
   11ea8:	4b0c      	ldr	r3, [pc, #48]	; (11edc <usbdc_init+0x40>)
   11eaa:	f240 3255 	movw	r2, #853	; 0x355
   11eae:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   11eb0:	4b0b      	ldr	r3, [pc, #44]	; (11ee0 <usbdc_init+0x44>)
   11eb2:	4798      	blx	r3
	if (rc < 0) {
   11eb4:	2800      	cmp	r0, #0
   11eb6:	db0e      	blt.n	11ed6 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
   11eb8:	4b0a      	ldr	r3, [pc, #40]	; (11ee4 <usbdc_init+0x48>)
   11eba:	4d0b      	ldr	r5, [pc, #44]	; (11ee8 <usbdc_init+0x4c>)
   11ebc:	2220      	movs	r2, #32
   11ebe:	4618      	mov	r0, r3
   11ec0:	2100      	movs	r1, #0
   11ec2:	47a8      	blx	r5
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   11ec4:	4909      	ldr	r1, [pc, #36]	; (11eec <usbdc_init+0x50>)
	usbdc.ctrl_buf = ctrl_buf;
   11ec6:	6144      	str	r4, [r0, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   11ec8:	4c09      	ldr	r4, [pc, #36]	; (11ef0 <usbdc_init+0x54>)
   11eca:	2000      	movs	r0, #0
   11ecc:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   11ece:	2001      	movs	r0, #1
   11ed0:	4908      	ldr	r1, [pc, #32]	; (11ef4 <usbdc_init+0x58>)
   11ed2:	47a0      	blx	r4

	return 0;
   11ed4:	2000      	movs	r0, #0
}
   11ed6:	bd38      	pop	{r3, r4, r5, pc}
   11ed8:	00015f30 	.word	0x00015f30
   11edc:	0000d305 	.word	0x0000d305
   11ee0:	0000e759 	.word	0x0000e759
   11ee4:	200010a4 	.word	0x200010a4
   11ee8:	00012cf5 	.word	0x00012cf5
   11eec:	00011a25 	.word	0x00011a25
   11ef0:	0000e7c1 	.word	0x0000e7c1
   11ef4:	00011b01 	.word	0x00011b01

00011ef8 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   11ef8:	4601      	mov	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
   11efa:	4b01      	ldr	r3, [pc, #4]	; (11f00 <usbdc_register_function+0x8>)
   11efc:	4801      	ldr	r0, [pc, #4]	; (11f04 <usbdc_register_function+0xc>)
   11efe:	4718      	bx	r3
   11f00:	0000f289 	.word	0x0000f289
   11f04:	200010b4 	.word	0x200010b4

00011f08 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   11f08:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
   11f0a:	4b0a      	ldr	r3, [pc, #40]	; (11f34 <usbdc_start+0x2c>)
   11f0c:	7e9c      	ldrb	r4, [r3, #26]
   11f0e:	b954      	cbnz	r4, 11f26 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
   11f10:	b160      	cbz	r0, 11f2c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   11f12:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
   11f14:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
   11f16:	79d2      	ldrb	r2, [r2, #7]
   11f18:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   11f1a:	2201      	movs	r2, #1
   11f1c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   11f1e:	4b06      	ldr	r3, [pc, #24]	; (11f38 <usbdc_start+0x30>)
   11f20:	4798      	blx	r3
	return ERR_NONE;
   11f22:	4620      	mov	r0, r4
}
   11f24:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
   11f26:	f06f 0003 	mvn.w	r0, #3
   11f2a:	e7fb      	b.n	11f24 <usbdc_start+0x1c>
		return ERR_BAD_DATA;
   11f2c:	f06f 0008 	mvn.w	r0, #8
   11f30:	e7f8      	b.n	11f24 <usbdc_start+0x1c>
   11f32:	bf00      	nop
   11f34:	200010a4 	.word	0x200010a4
   11f38:	0000e7c9 	.word	0x0000e7c9

00011f3c <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
   11f3c:	4b00      	ldr	r3, [pc, #0]	; (11f40 <usbdc_attach+0x4>)
   11f3e:	4718      	bx	r3
   11f40:	0000e7d1 	.word	0x0000e7d1

00011f44 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
   11f44:	4b01      	ldr	r3, [pc, #4]	; (11f4c <usbdc_get_ctrl_buffer+0x8>)
   11f46:	6958      	ldr	r0, [r3, #20]
   11f48:	4770      	bx	lr
   11f4a:	bf00      	nop
   11f4c:	200010a4 	.word	0x200010a4

00011f50 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
   11f50:	4b03      	ldr	r3, [pc, #12]	; (11f60 <usbdc_get_state+0x10>)
   11f52:	7e98      	ldrb	r0, [r3, #26]
   11f54:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
   11f58:	bf18      	it	ne
   11f5a:	2010      	movne	r0, #16
   11f5c:	4770      	bx	lr
   11f5e:	bf00      	nop
   11f60:	200010a4 	.word	0x200010a4

00011f64 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
   11f64:	6903      	ldr	r3, [r0, #16]
   11f66:	420b      	tst	r3, r1
   11f68:	d1fc      	bne.n	11f64 <hri_tc_wait_for_sync>
	};
}
   11f6a:	4770      	bx	lr

00011f6c <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
   11f6c:	68c0      	ldr	r0, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
   11f6e:	6803      	ldr	r3, [r0, #0]
   11f70:	f043 0302 	orr.w	r3, r3, #2
   11f74:	6003      	str	r3, [r0, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   11f76:	2103      	movs	r1, #3
   11f78:	4b00      	ldr	r3, [pc, #0]	; (11f7c <_tc_timer_start+0x10>)
   11f7a:	4718      	bx	r3
   11f7c:	00011f65 	.word	0x00011f65

00011f80 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
   11f80:	68c0      	ldr	r0, [r0, #12]
{
   11f82:	b508      	push	{r3, lr}
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   11f84:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   11f86:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   11f8a:	2b02      	cmp	r3, #2
   11f8c:	d104      	bne.n	11f98 <_tc_timer_get_period+0x18>
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   11f8e:	4b0e      	ldr	r3, [pc, #56]	; (11fc8 <_tc_timer_get_period+0x48>)
   11f90:	21c0      	movs	r1, #192	; 0xc0
   11f92:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
   11f94:	69c0      	ldr	r0, [r0, #28]
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
}
   11f96:	bd08      	pop	{r3, pc}
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   11f98:	6803      	ldr	r3, [r0, #0]
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   11f9a:	f013 0f0c 	tst.w	r3, #12
   11f9e:	d105      	bne.n	11fac <_tc_timer_get_period+0x2c>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   11fa0:	4b09      	ldr	r3, [pc, #36]	; (11fc8 <_tc_timer_get_period+0x48>)
   11fa2:	21c0      	movs	r1, #192	; 0xc0
   11fa4:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
   11fa6:	8b80      	ldrh	r0, [r0, #28]
   11fa8:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
   11faa:	e7f4      	b.n	11f96 <_tc_timer_get_period+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   11fac:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   11fae:	f3c3 0381 	ubfx	r3, r3, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   11fb2:	2b01      	cmp	r3, #1
   11fb4:	d105      	bne.n	11fc2 <_tc_timer_get_period+0x42>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   11fb6:	4b04      	ldr	r3, [pc, #16]	; (11fc8 <_tc_timer_get_period+0x48>)
   11fb8:	2120      	movs	r1, #32
   11fba:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
   11fbc:	7ec0      	ldrb	r0, [r0, #27]
   11fbe:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
   11fc0:	e7e9      	b.n	11f96 <_tc_timer_get_period+0x16>
	return 0;
   11fc2:	2000      	movs	r0, #0
   11fc4:	e7e7      	b.n	11f96 <_tc_timer_get_period+0x16>
   11fc6:	bf00      	nop
   11fc8:	00011f65 	.word	0x00011f65

00011fcc <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
   11fcc:	b508      	push	{r3, lr}
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
   11fce:	68c0      	ldr	r0, [r0, #12]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   11fd0:	4b03      	ldr	r3, [pc, #12]	; (11fe0 <_tc_timer_is_started+0x14>)
   11fd2:	2103      	movs	r1, #3
   11fd4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   11fd6:	6800      	ldr	r0, [r0, #0]
}
   11fd8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11fdc:	bd08      	pop	{r3, pc}
   11fde:	bf00      	nop
   11fe0:	00011f65 	.word	0x00011f65

00011fe4 <tc_interrupt_handler>:
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
	void *const hw = device->hw;
   11fe4:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
   11fe6:	7a91      	ldrb	r1, [r2, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
   11fe8:	07c9      	lsls	r1, r1, #31
   11fea:	d503      	bpl.n	11ff4 <tc_interrupt_handler+0x10>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
   11fec:	2101      	movs	r1, #1
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
   11fee:	6803      	ldr	r3, [r0, #0]
   11ff0:	7291      	strb	r1, [r2, #10]
   11ff2:	4718      	bx	r3
	}
}
   11ff4:	4770      	bx	lr
	...

00011ff8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
   11ff8:	b570      	push	{r4, r5, r6, lr}
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   11ffa:	4d15      	ldr	r5, [pc, #84]	; (12050 <get_tc_index+0x58>)
{
   11ffc:	4606      	mov	r6, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   11ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   12000:	b088      	sub	sp, #32
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   12002:	466c      	mov	r4, sp
   12004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12006:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1200a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   1200e:	466a      	mov	r2, sp
   12010:	2300      	movs	r3, #0
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
   12012:	f852 1b04 	ldr.w	r1, [r2], #4
   12016:	42b1      	cmp	r1, r6
   12018:	d104      	bne.n	12024 <get_tc_index+0x2c>
			return i;
   1201a:	b2d8      	uxtb	r0, r3
		if (_tcs[i].number == index) {
   1201c:	b93b      	cbnz	r3, 1202e <get_tc_index+0x36>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
   1201e:	4618      	mov	r0, r3
			return i;
   12020:	b240      	sxtb	r0, r0
   12022:	e012      	b.n	1204a <get_tc_index+0x52>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   12024:	3301      	adds	r3, #1
   12026:	2b08      	cmp	r3, #8
   12028:	d1f3      	bne.n	12012 <get_tc_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
   1202a:	2000      	movs	r0, #0
   1202c:	e7f8      	b.n	12020 <get_tc_index+0x28>
		if (_tcs[i].number == index) {
   1202e:	2801      	cmp	r0, #1
   12030:	d0f6      	beq.n	12020 <get_tc_index+0x28>
   12032:	2802      	cmp	r0, #2
   12034:	d0f4      	beq.n	12020 <get_tc_index+0x28>
   12036:	2803      	cmp	r0, #3
   12038:	d0f2      	beq.n	12020 <get_tc_index+0x28>
	ASSERT(false);
   1203a:	2000      	movs	r0, #0
   1203c:	4905      	ldr	r1, [pc, #20]	; (12054 <get_tc_index+0x5c>)
   1203e:	4b06      	ldr	r3, [pc, #24]	; (12058 <get_tc_index+0x60>)
   12040:	f240 1267 	movw	r2, #359	; 0x167
   12044:	4798      	blx	r3
	return -1;
   12046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1204a:	b008      	add	sp, #32
   1204c:	bd70      	pop	{r4, r5, r6, pc}
   1204e:	bf00      	nop
   12050:	00015f5c 	.word	0x00015f5c
   12054:	00015f46 	.word	0x00015f46
   12058:	0000d305 	.word	0x0000d305

0001205c <_tc_timer_set_irq>:
{
   1205c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
   1205e:	4b0a      	ldr	r3, [pc, #40]	; (12088 <_tc_timer_set_irq+0x2c>)
   12060:	68c0      	ldr	r0, [r0, #12]
   12062:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   12064:	4b09      	ldr	r3, [pc, #36]	; (1208c <_tc_timer_set_irq+0x30>)
   12066:	490a      	ldr	r1, [pc, #40]	; (12090 <_tc_timer_set_irq+0x34>)
	int8_t      i  = get_tc_index(hw);
   12068:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
   1206a:	f44f 7291 	mov.w	r2, #290	; 0x122
   1206e:	2001      	movs	r0, #1
   12070:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
   12072:	4808      	ldr	r0, [pc, #32]	; (12094 <_tc_timer_set_irq+0x38>)
   12074:	2314      	movs	r3, #20
   12076:	fb03 0404 	mla	r4, r3, r4, r0
   1207a:	4b07      	ldr	r3, [pc, #28]	; (12098 <_tc_timer_set_irq+0x3c>)
   1207c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
   12080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_irq_set(_tcs[i].irq);
   12084:	4718      	bx	r3
   12086:	bf00      	nop
   12088:	00011ff9 	.word	0x00011ff9
   1208c:	0000d305 	.word	0x0000d305
   12090:	00015f46 	.word	0x00015f46
   12094:	00015f5c 	.word	0x00015f5c
   12098:	0000b7dd 	.word	0x0000b7dd

0001209c <_tc_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
   1209c:	68c0      	ldr	r0, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   1209e:	6803      	ldr	r3, [r0, #0]
   120a0:	f023 0302 	bic.w	r3, r3, #2
   120a4:	6003      	str	r3, [r0, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   120a6:	2103      	movs	r1, #3
   120a8:	4b00      	ldr	r3, [pc, #0]	; (120ac <_tc_timer_stop+0x10>)
   120aa:	4718      	bx	r3
   120ac:	00011f65 	.word	0x00011f65

000120b0 <_tc_timer_deinit>:
{
   120b0:	b570      	push	{r4, r5, r6, lr}
	void *const hw = device->hw;
   120b2:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
   120b4:	4b17      	ldr	r3, [pc, #92]	; (12114 <_tc_timer_deinit+0x64>)
   120b6:	4620      	mov	r0, r4
   120b8:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   120ba:	4b17      	ldr	r3, [pc, #92]	; (12118 <_tc_timer_deinit+0x68>)
   120bc:	4917      	ldr	r1, [pc, #92]	; (1211c <_tc_timer_deinit+0x6c>)
	int8_t      i  = get_tc_index(hw);
   120be:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
   120c0:	22cd      	movs	r2, #205	; 0xcd
   120c2:	2001      	movs	r0, #1
   120c4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
   120c6:	4816      	ldr	r0, [pc, #88]	; (12120 <_tc_timer_deinit+0x70>)
   120c8:	2314      	movs	r3, #20
   120ca:	fb03 0505 	mla	r5, r3, r5, r0
   120ce:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   120d2:	2b00      	cmp	r3, #0
   120d4:	db0d      	blt.n	120f2 <_tc_timer_deinit+0x42>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   120d6:	095a      	lsrs	r2, r3, #5
   120d8:	2101      	movs	r1, #1
   120da:	f003 031f 	and.w	r3, r3, #31
   120de:	fa01 f303 	lsl.w	r3, r1, r3
   120e2:	3220      	adds	r2, #32
   120e4:	490f      	ldr	r1, [pc, #60]	; (12124 <_tc_timer_deinit+0x74>)
   120e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   120ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   120ee:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   120f2:	6823      	ldr	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   120f4:	4a0c      	ldr	r2, [pc, #48]	; (12128 <_tc_timer_deinit+0x78>)
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   120f6:	f023 0302 	bic.w	r3, r3, #2
   120fa:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   120fc:	2103      	movs	r1, #3
   120fe:	4620      	mov	r0, r4
   12100:	4790      	blx	r2
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
   12102:	6823      	ldr	r3, [r4, #0]
   12104:	f043 0301 	orr.w	r3, r3, #1
   12108:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
   1210a:	2101      	movs	r1, #1
}
   1210c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12110:	4710      	bx	r2
   12112:	bf00      	nop
   12114:	00011ff9 	.word	0x00011ff9
   12118:	0000d305 	.word	0x0000d305
   1211c:	00015f46 	.word	0x00015f46
   12120:	00015f5c 	.word	0x00015f5c
   12124:	e000e100 	.word	0xe000e100
   12128:	00011f65 	.word	0x00011f65

0001212c <_tc_timer_init>:
{
   1212c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int8_t i = get_tc_index(hw);
   12130:	4b51      	ldr	r3, [pc, #324]	; (12278 <_tc_timer_init+0x14c>)
{
   12132:	4607      	mov	r7, r0
	int8_t i = get_tc_index(hw);
   12134:	4608      	mov	r0, r1
{
   12136:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
   12138:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   1213a:	4b50      	ldr	r3, [pc, #320]	; (1227c <_tc_timer_init+0x150>)
   1213c:	4950      	ldr	r1, [pc, #320]	; (12280 <_tc_timer_init+0x154>)
	device->hw = hw;
   1213e:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
   12140:	22a0      	movs	r2, #160	; 0xa0
	int8_t i = get_tc_index(hw);
   12142:	4606      	mov	r6, r0
	ASSERT(ARRAY_SIZE(_tcs));
   12144:	2001      	movs	r0, #1
   12146:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
   12148:	6923      	ldr	r3, [r4, #16]
   1214a:	4a4e      	ldr	r2, [pc, #312]	; (12284 <_tc_timer_init+0x158>)
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
   1214c:	f013 0f01 	tst.w	r3, #1
   12150:	d112      	bne.n	12178 <_tc_timer_init+0x4c>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12152:	2103      	movs	r1, #3
   12154:	4620      	mov	r0, r4
   12156:	4790      	blx	r2
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   12158:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
   1215a:	079b      	lsls	r3, r3, #30
   1215c:	d507      	bpl.n	1216e <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   1215e:	6823      	ldr	r3, [r4, #0]
   12160:	f023 0302 	bic.w	r3, r3, #2
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12164:	2103      	movs	r1, #3
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   12166:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12168:	4790      	blx	r2
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
   1216a:	2102      	movs	r1, #2
   1216c:	4790      	blx	r2
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
   1216e:	2301      	movs	r3, #1
   12170:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12172:	2103      	movs	r1, #3
   12174:	4620      	mov	r0, r4
   12176:	4790      	blx	r2
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
   12178:	f8df 9124 	ldr.w	r9, [pc, #292]	; 122a0 <_tc_timer_init+0x174>
   1217c:	2514      	movs	r5, #20
   1217e:	fb05 9506 	mla	r5, r5, r6, r9
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
   12182:	2101      	movs	r1, #1
   12184:	4620      	mov	r0, r4
   12186:	4790      	blx	r2
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
   12188:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
   1218c:	f8c4 8000 	str.w	r8, [r4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12190:	2103      	movs	r1, #3
   12192:	4790      	blx	r2
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
   12194:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
   12198:	73e3      	strb	r3, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
   1219a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
   1219c:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
   1219e:	2301      	movs	r3, #1
   121a0:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
   121a2:	f008 030c 	and.w	r3, r8, #12
   121a6:	2b08      	cmp	r3, #8
   121a8:	d13b      	bne.n	12222 <_tc_timer_init+0xf6>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
   121aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   121ac:	61e3      	str	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   121ae:	21c0      	movs	r1, #192	; 0xc0
   121b0:	4790      	blx	r2
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
   121b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   121b4:	6223      	str	r3, [r4, #32]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   121b6:	21c0      	movs	r1, #192	; 0xc0
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   121b8:	4620      	mov	r0, r4
   121ba:	4790      	blx	r2
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
   121bc:	2301      	movs	r3, #1
   121be:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
   121c0:	4b31      	ldr	r3, [pc, #196]	; (12288 <_tc_timer_init+0x15c>)
   121c2:	429c      	cmp	r4, r3
   121c4:	d146      	bne.n	12254 <_tc_timer_init+0x128>
		_tc0_dev = (struct _timer_device *)dev;
   121c6:	4b31      	ldr	r3, [pc, #196]	; (1228c <_tc_timer_init+0x160>)
   121c8:	601f      	str	r7, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
   121ca:	2314      	movs	r3, #20
   121cc:	fb03 9306 	mla	r3, r3, r6, r9
   121d0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   121d4:	2b00      	cmp	r3, #0
   121d6:	db0d      	blt.n	121f4 <_tc_timer_init+0xc8>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   121d8:	095a      	lsrs	r2, r3, #5
   121da:	2101      	movs	r1, #1
   121dc:	f003 031f 	and.w	r3, r3, #31
   121e0:	fa01 f303 	lsl.w	r3, r1, r3
   121e4:	3220      	adds	r2, #32
   121e6:	492a      	ldr	r1, [pc, #168]	; (12290 <_tc_timer_init+0x164>)
   121e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   121ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   121f0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
   121f4:	2014      	movs	r0, #20
   121f6:	fb00 9606 	mla	r6, r0, r6, r9
   121fa:	f9b6 3022 	ldrsh.w	r3, [r6, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   121fe:	2b00      	cmp	r3, #0
   12200:	db0c      	blt.n	1221c <_tc_timer_init+0xf0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12202:	f003 011f 	and.w	r1, r3, #31
   12206:	095b      	lsrs	r3, r3, #5
   12208:	009b      	lsls	r3, r3, #2
   1220a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1220e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   12212:	2201      	movs	r2, #1
   12214:	408a      	lsls	r2, r1
   12216:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1221a:	601a      	str	r2, [r3, #0]
}
   1221c:	2000      	movs	r0, #0
   1221e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
   12222:	b933      	cbnz	r3, 12232 <_tc_timer_init+0x106>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
   12224:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   12226:	83a3      	strh	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   12228:	21c0      	movs	r1, #192	; 0xc0
   1222a:	4790      	blx	r2
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
   1222c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   1222e:	83e3      	strh	r3, [r4, #30]
   12230:	e7c1      	b.n	121b6 <_tc_timer_init+0x8a>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
   12232:	2b04      	cmp	r3, #4
   12234:	d1c2      	bne.n	121bc <_tc_timer_init+0x90>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
   12236:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
   1223a:	7723      	strb	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   1223c:	21c0      	movs	r1, #192	; 0xc0
   1223e:	4790      	blx	r2
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
   12240:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
   12244:	7763      	strb	r3, [r4, #29]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   12246:	21c0      	movs	r1, #192	; 0xc0
   12248:	4790      	blx	r2
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
   1224a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
   1224e:	76e3      	strb	r3, [r4, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   12250:	2120      	movs	r1, #32
   12252:	e7b1      	b.n	121b8 <_tc_timer_init+0x8c>
	if (hw == TC1) {
   12254:	4b0f      	ldr	r3, [pc, #60]	; (12294 <_tc_timer_init+0x168>)
   12256:	429c      	cmp	r4, r3
   12258:	d008      	beq.n	1226c <_tc_timer_init+0x140>
	if (hw == TC2) {
   1225a:	4b0f      	ldr	r3, [pc, #60]	; (12298 <_tc_timer_init+0x16c>)
   1225c:	429c      	cmp	r4, r3
   1225e:	d008      	beq.n	12272 <_tc_timer_init+0x146>
	if (hw == TC3) {
   12260:	4b0e      	ldr	r3, [pc, #56]	; (1229c <_tc_timer_init+0x170>)
   12262:	429c      	cmp	r4, r3
   12264:	d1b1      	bne.n	121ca <_tc_timer_init+0x9e>
		_tc3_dev = (struct _timer_device *)dev;
   12266:	4b09      	ldr	r3, [pc, #36]	; (1228c <_tc_timer_init+0x160>)
   12268:	60df      	str	r7, [r3, #12]
   1226a:	e7ae      	b.n	121ca <_tc_timer_init+0x9e>
		_tc1_dev = (struct _timer_device *)dev;
   1226c:	4b07      	ldr	r3, [pc, #28]	; (1228c <_tc_timer_init+0x160>)
   1226e:	605f      	str	r7, [r3, #4]
	if (hw == TC3) {
   12270:	e7ab      	b.n	121ca <_tc_timer_init+0x9e>
		_tc2_dev = (struct _timer_device *)dev;
   12272:	4b06      	ldr	r3, [pc, #24]	; (1228c <_tc_timer_init+0x160>)
   12274:	609f      	str	r7, [r3, #8]
	if (hw == TC3) {
   12276:	e7a8      	b.n	121ca <_tc_timer_init+0x9e>
   12278:	00011ff9 	.word	0x00011ff9
   1227c:	0000d305 	.word	0x0000d305
   12280:	00015f46 	.word	0x00015f46
   12284:	00011f65 	.word	0x00011f65
   12288:	40003800 	.word	0x40003800
   1228c:	200010c4 	.word	0x200010c4
   12290:	e000e100 	.word	0xe000e100
   12294:	40003c00 	.word	0x40003c00
   12298:	4101a000 	.word	0x4101a000
   1229c:	4101c000 	.word	0x4101c000
   122a0:	00015f5c 	.word	0x00015f5c

000122a4 <_tc_timer_set_period>:
	void *const hw = device->hw;
   122a4:	68c0      	ldr	r0, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   122a6:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   122a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   122ac:	2b02      	cmp	r3, #2
   122ae:	d103      	bne.n	122b8 <_tc_timer_set_period+0x14>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   122b0:	61c1      	str	r1, [r0, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   122b2:	21c0      	movs	r1, #192	; 0xc0
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   122b4:	4b09      	ldr	r3, [pc, #36]	; (122dc <_tc_timer_set_period+0x38>)
   122b6:	4718      	bx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   122b8:	6803      	ldr	r3, [r0, #0]
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   122ba:	f013 0f0c 	tst.w	r3, #12
   122be:	d102      	bne.n	122c6 <_tc_timer_set_period+0x22>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
   122c0:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   122c2:	8381      	strh	r1, [r0, #28]
   122c4:	e7f5      	b.n	122b2 <_tc_timer_set_period+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   122c6:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   122c8:	f3c3 0381 	ubfx	r3, r3, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   122cc:	2b01      	cmp	r3, #1
   122ce:	d103      	bne.n	122d8 <_tc_timer_set_period+0x34>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
   122d0:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
   122d2:	76c1      	strb	r1, [r0, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   122d4:	2120      	movs	r1, #32
   122d6:	e7ed      	b.n	122b4 <_tc_timer_set_period+0x10>
}
   122d8:	4770      	bx	lr
   122da:	bf00      	nop
   122dc:	00011f65 	.word	0x00011f65

000122e0 <_tc_get_timer>:
}
   122e0:	4800      	ldr	r0, [pc, #0]	; (122e4 <_tc_get_timer+0x4>)
   122e2:	4770      	bx	lr
   122e4:	20000528 	.word	0x20000528

000122e8 <TC0_Handler>:
	tc_interrupt_handler(_tc0_dev);
   122e8:	4b01      	ldr	r3, [pc, #4]	; (122f0 <TC0_Handler+0x8>)
   122ea:	6818      	ldr	r0, [r3, #0]
   122ec:	4b01      	ldr	r3, [pc, #4]	; (122f4 <TC0_Handler+0xc>)
   122ee:	4718      	bx	r3
   122f0:	200010c4 	.word	0x200010c4
   122f4:	00011fe5 	.word	0x00011fe5

000122f8 <TC1_Handler>:
	tc_interrupt_handler(_tc1_dev);
   122f8:	4b01      	ldr	r3, [pc, #4]	; (12300 <TC1_Handler+0x8>)
   122fa:	6858      	ldr	r0, [r3, #4]
   122fc:	4b01      	ldr	r3, [pc, #4]	; (12304 <TC1_Handler+0xc>)
   122fe:	4718      	bx	r3
   12300:	200010c4 	.word	0x200010c4
   12304:	00011fe5 	.word	0x00011fe5

00012308 <TC2_Handler>:
	tc_interrupt_handler(_tc2_dev);
   12308:	4b01      	ldr	r3, [pc, #4]	; (12310 <TC2_Handler+0x8>)
   1230a:	6898      	ldr	r0, [r3, #8]
   1230c:	4b01      	ldr	r3, [pc, #4]	; (12314 <TC2_Handler+0xc>)
   1230e:	4718      	bx	r3
   12310:	200010c4 	.word	0x200010c4
   12314:	00011fe5 	.word	0x00011fe5

00012318 <TC3_Handler>:
	tc_interrupt_handler(_tc3_dev);
   12318:	4b01      	ldr	r3, [pc, #4]	; (12320 <TC3_Handler+0x8>)
   1231a:	68d8      	ldr	r0, [r3, #12]
   1231c:	4b01      	ldr	r3, [pc, #4]	; (12324 <TC3_Handler+0xc>)
   1231e:	4718      	bx	r3
   12320:	200010c4 	.word	0x200010c4
   12324:	00011fe5 	.word	0x00011fe5

00012328 <_delay_init>:
   12328:	4b03      	ldr	r3, [pc, #12]	; (12338 <_delay_init+0x10>)
   1232a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   1232e:	605a      	str	r2, [r3, #4]
   12330:	2205      	movs	r2, #5
   12332:	601a      	str	r2, [r3, #0]
   12334:	4770      	bx	lr
   12336:	bf00      	nop
   12338:	e000e010 	.word	0xe000e010

0001233c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
   1233c:	0e0b      	lsrs	r3, r1, #24
   1233e:	4a0c      	ldr	r2, [pc, #48]	; (12370 <_delay_cycles+0x34>)
{
   12340:	b530      	push	{r4, r5, lr}
	uint8_t  n   = cycles >> 24;
   12342:	4618      	mov	r0, r3
	uint32_t buf = cycles;

	while (n--) {
		SysTick->LOAD = 0xFFFFFF;
   12344:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
	while (n--) {
   12348:	3801      	subs	r0, #1
   1234a:	b2c0      	uxtb	r0, r0
   1234c:	28ff      	cmp	r0, #255	; 0xff
   1234e:	d108      	bne.n	12362 <_delay_cycles+0x26>
   12350:	eba3 6303 	sub.w	r3, r3, r3, lsl #24
   12354:	4419      	add	r1, r3
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
   12356:	6051      	str	r1, [r2, #4]
	SysTick->VAL  = buf;
   12358:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
   1235a:	6813      	ldr	r3, [r2, #0]
   1235c:	03db      	lsls	r3, r3, #15
   1235e:	d5fc      	bpl.n	1235a <_delay_cycles+0x1e>
		;
}
   12360:	bd30      	pop	{r4, r5, pc}
		SysTick->LOAD = 0xFFFFFF;
   12362:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
   12364:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
   12366:	6815      	ldr	r5, [r2, #0]
   12368:	03ed      	lsls	r5, r5, #15
   1236a:	d5fc      	bpl.n	12366 <_delay_cycles+0x2a>
   1236c:	e7ec      	b.n	12348 <_delay_cycles+0xc>
   1236e:	bf00      	nop
   12370:	e000e010 	.word	0xe000e010

00012374 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
   12374:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
   12376:	2000      	movs	r0, #0
   12378:	4770      	bx	lr
	...

0001237c <__aeabi_drsub>:
   1237c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   12380:	e002      	b.n	12388 <__adddf3>
   12382:	bf00      	nop

00012384 <__aeabi_dsub>:
   12384:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00012388 <__adddf3>:
   12388:	b530      	push	{r4, r5, lr}
   1238a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1238e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   12392:	ea94 0f05 	teq	r4, r5
   12396:	bf08      	it	eq
   12398:	ea90 0f02 	teqeq	r0, r2
   1239c:	bf1f      	itttt	ne
   1239e:	ea54 0c00 	orrsne.w	ip, r4, r0
   123a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   123a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   123aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   123ae:	f000 80e2 	beq.w	12576 <__adddf3+0x1ee>
   123b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   123b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   123ba:	bfb8      	it	lt
   123bc:	426d      	neglt	r5, r5
   123be:	dd0c      	ble.n	123da <__adddf3+0x52>
   123c0:	442c      	add	r4, r5
   123c2:	ea80 0202 	eor.w	r2, r0, r2
   123c6:	ea81 0303 	eor.w	r3, r1, r3
   123ca:	ea82 0000 	eor.w	r0, r2, r0
   123ce:	ea83 0101 	eor.w	r1, r3, r1
   123d2:	ea80 0202 	eor.w	r2, r0, r2
   123d6:	ea81 0303 	eor.w	r3, r1, r3
   123da:	2d36      	cmp	r5, #54	; 0x36
   123dc:	bf88      	it	hi
   123de:	bd30      	pophi	{r4, r5, pc}
   123e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   123e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   123e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   123ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   123f0:	d002      	beq.n	123f8 <__adddf3+0x70>
   123f2:	4240      	negs	r0, r0
   123f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   123f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   123fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12400:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   12404:	d002      	beq.n	1240c <__adddf3+0x84>
   12406:	4252      	negs	r2, r2
   12408:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1240c:	ea94 0f05 	teq	r4, r5
   12410:	f000 80a7 	beq.w	12562 <__adddf3+0x1da>
   12414:	f1a4 0401 	sub.w	r4, r4, #1
   12418:	f1d5 0e20 	rsbs	lr, r5, #32
   1241c:	db0d      	blt.n	1243a <__adddf3+0xb2>
   1241e:	fa02 fc0e 	lsl.w	ip, r2, lr
   12422:	fa22 f205 	lsr.w	r2, r2, r5
   12426:	1880      	adds	r0, r0, r2
   12428:	f141 0100 	adc.w	r1, r1, #0
   1242c:	fa03 f20e 	lsl.w	r2, r3, lr
   12430:	1880      	adds	r0, r0, r2
   12432:	fa43 f305 	asr.w	r3, r3, r5
   12436:	4159      	adcs	r1, r3
   12438:	e00e      	b.n	12458 <__adddf3+0xd0>
   1243a:	f1a5 0520 	sub.w	r5, r5, #32
   1243e:	f10e 0e20 	add.w	lr, lr, #32
   12442:	2a01      	cmp	r2, #1
   12444:	fa03 fc0e 	lsl.w	ip, r3, lr
   12448:	bf28      	it	cs
   1244a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1244e:	fa43 f305 	asr.w	r3, r3, r5
   12452:	18c0      	adds	r0, r0, r3
   12454:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   12458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1245c:	d507      	bpl.n	1246e <__adddf3+0xe6>
   1245e:	f04f 0e00 	mov.w	lr, #0
   12462:	f1dc 0c00 	rsbs	ip, ip, #0
   12466:	eb7e 0000 	sbcs.w	r0, lr, r0
   1246a:	eb6e 0101 	sbc.w	r1, lr, r1
   1246e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   12472:	d31b      	bcc.n	124ac <__adddf3+0x124>
   12474:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   12478:	d30c      	bcc.n	12494 <__adddf3+0x10c>
   1247a:	0849      	lsrs	r1, r1, #1
   1247c:	ea5f 0030 	movs.w	r0, r0, rrx
   12480:	ea4f 0c3c 	mov.w	ip, ip, rrx
   12484:	f104 0401 	add.w	r4, r4, #1
   12488:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1248c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   12490:	f080 809a 	bcs.w	125c8 <__adddf3+0x240>
   12494:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   12498:	bf08      	it	eq
   1249a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1249e:	f150 0000 	adcs.w	r0, r0, #0
   124a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   124a6:	ea41 0105 	orr.w	r1, r1, r5
   124aa:	bd30      	pop	{r4, r5, pc}
   124ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   124b0:	4140      	adcs	r0, r0
   124b2:	eb41 0101 	adc.w	r1, r1, r1
   124b6:	3c01      	subs	r4, #1
   124b8:	bf28      	it	cs
   124ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   124be:	d2e9      	bcs.n	12494 <__adddf3+0x10c>
   124c0:	f091 0f00 	teq	r1, #0
   124c4:	bf04      	itt	eq
   124c6:	4601      	moveq	r1, r0
   124c8:	2000      	moveq	r0, #0
   124ca:	fab1 f381 	clz	r3, r1
   124ce:	bf08      	it	eq
   124d0:	3320      	addeq	r3, #32
   124d2:	f1a3 030b 	sub.w	r3, r3, #11
   124d6:	f1b3 0220 	subs.w	r2, r3, #32
   124da:	da0c      	bge.n	124f6 <__adddf3+0x16e>
   124dc:	320c      	adds	r2, #12
   124de:	dd08      	ble.n	124f2 <__adddf3+0x16a>
   124e0:	f102 0c14 	add.w	ip, r2, #20
   124e4:	f1c2 020c 	rsb	r2, r2, #12
   124e8:	fa01 f00c 	lsl.w	r0, r1, ip
   124ec:	fa21 f102 	lsr.w	r1, r1, r2
   124f0:	e00c      	b.n	1250c <__adddf3+0x184>
   124f2:	f102 0214 	add.w	r2, r2, #20
   124f6:	bfd8      	it	le
   124f8:	f1c2 0c20 	rsble	ip, r2, #32
   124fc:	fa01 f102 	lsl.w	r1, r1, r2
   12500:	fa20 fc0c 	lsr.w	ip, r0, ip
   12504:	bfdc      	itt	le
   12506:	ea41 010c 	orrle.w	r1, r1, ip
   1250a:	4090      	lslle	r0, r2
   1250c:	1ae4      	subs	r4, r4, r3
   1250e:	bfa2      	ittt	ge
   12510:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   12514:	4329      	orrge	r1, r5
   12516:	bd30      	popge	{r4, r5, pc}
   12518:	ea6f 0404 	mvn.w	r4, r4
   1251c:	3c1f      	subs	r4, #31
   1251e:	da1c      	bge.n	1255a <__adddf3+0x1d2>
   12520:	340c      	adds	r4, #12
   12522:	dc0e      	bgt.n	12542 <__adddf3+0x1ba>
   12524:	f104 0414 	add.w	r4, r4, #20
   12528:	f1c4 0220 	rsb	r2, r4, #32
   1252c:	fa20 f004 	lsr.w	r0, r0, r4
   12530:	fa01 f302 	lsl.w	r3, r1, r2
   12534:	ea40 0003 	orr.w	r0, r0, r3
   12538:	fa21 f304 	lsr.w	r3, r1, r4
   1253c:	ea45 0103 	orr.w	r1, r5, r3
   12540:	bd30      	pop	{r4, r5, pc}
   12542:	f1c4 040c 	rsb	r4, r4, #12
   12546:	f1c4 0220 	rsb	r2, r4, #32
   1254a:	fa20 f002 	lsr.w	r0, r0, r2
   1254e:	fa01 f304 	lsl.w	r3, r1, r4
   12552:	ea40 0003 	orr.w	r0, r0, r3
   12556:	4629      	mov	r1, r5
   12558:	bd30      	pop	{r4, r5, pc}
   1255a:	fa21 f004 	lsr.w	r0, r1, r4
   1255e:	4629      	mov	r1, r5
   12560:	bd30      	pop	{r4, r5, pc}
   12562:	f094 0f00 	teq	r4, #0
   12566:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1256a:	bf06      	itte	eq
   1256c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12570:	3401      	addeq	r4, #1
   12572:	3d01      	subne	r5, #1
   12574:	e74e      	b.n	12414 <__adddf3+0x8c>
   12576:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1257a:	bf18      	it	ne
   1257c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12580:	d029      	beq.n	125d6 <__adddf3+0x24e>
   12582:	ea94 0f05 	teq	r4, r5
   12586:	bf08      	it	eq
   12588:	ea90 0f02 	teqeq	r0, r2
   1258c:	d005      	beq.n	1259a <__adddf3+0x212>
   1258e:	ea54 0c00 	orrs.w	ip, r4, r0
   12592:	bf04      	itt	eq
   12594:	4619      	moveq	r1, r3
   12596:	4610      	moveq	r0, r2
   12598:	bd30      	pop	{r4, r5, pc}
   1259a:	ea91 0f03 	teq	r1, r3
   1259e:	bf1e      	ittt	ne
   125a0:	2100      	movne	r1, #0
   125a2:	2000      	movne	r0, #0
   125a4:	bd30      	popne	{r4, r5, pc}
   125a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   125aa:	d105      	bne.n	125b8 <__adddf3+0x230>
   125ac:	0040      	lsls	r0, r0, #1
   125ae:	4149      	adcs	r1, r1
   125b0:	bf28      	it	cs
   125b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   125b6:	bd30      	pop	{r4, r5, pc}
   125b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   125bc:	bf3c      	itt	cc
   125be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   125c2:	bd30      	popcc	{r4, r5, pc}
   125c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   125c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   125cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   125d0:	f04f 0000 	mov.w	r0, #0
   125d4:	bd30      	pop	{r4, r5, pc}
   125d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   125da:	bf1a      	itte	ne
   125dc:	4619      	movne	r1, r3
   125de:	4610      	movne	r0, r2
   125e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   125e4:	bf1c      	itt	ne
   125e6:	460b      	movne	r3, r1
   125e8:	4602      	movne	r2, r0
   125ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   125ee:	bf06      	itte	eq
   125f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   125f4:	ea91 0f03 	teqeq	r1, r3
   125f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   125fc:	bd30      	pop	{r4, r5, pc}
   125fe:	bf00      	nop

00012600 <__aeabi_ui2d>:
   12600:	f090 0f00 	teq	r0, #0
   12604:	bf04      	itt	eq
   12606:	2100      	moveq	r1, #0
   12608:	4770      	bxeq	lr
   1260a:	b530      	push	{r4, r5, lr}
   1260c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12610:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12614:	f04f 0500 	mov.w	r5, #0
   12618:	f04f 0100 	mov.w	r1, #0
   1261c:	e750      	b.n	124c0 <__adddf3+0x138>
   1261e:	bf00      	nop

00012620 <__aeabi_i2d>:
   12620:	f090 0f00 	teq	r0, #0
   12624:	bf04      	itt	eq
   12626:	2100      	moveq	r1, #0
   12628:	4770      	bxeq	lr
   1262a:	b530      	push	{r4, r5, lr}
   1262c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12630:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12634:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   12638:	bf48      	it	mi
   1263a:	4240      	negmi	r0, r0
   1263c:	f04f 0100 	mov.w	r1, #0
   12640:	e73e      	b.n	124c0 <__adddf3+0x138>
   12642:	bf00      	nop

00012644 <__aeabi_f2d>:
   12644:	0042      	lsls	r2, r0, #1
   12646:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1264a:	ea4f 0131 	mov.w	r1, r1, rrx
   1264e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   12652:	bf1f      	itttt	ne
   12654:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   12658:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1265c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   12660:	4770      	bxne	lr
   12662:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   12666:	bf08      	it	eq
   12668:	4770      	bxeq	lr
   1266a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1266e:	bf04      	itt	eq
   12670:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   12674:	4770      	bxeq	lr
   12676:	b530      	push	{r4, r5, lr}
   12678:	f44f 7460 	mov.w	r4, #896	; 0x380
   1267c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12684:	e71c      	b.n	124c0 <__adddf3+0x138>
   12686:	bf00      	nop

00012688 <__aeabi_ul2d>:
   12688:	ea50 0201 	orrs.w	r2, r0, r1
   1268c:	bf08      	it	eq
   1268e:	4770      	bxeq	lr
   12690:	b530      	push	{r4, r5, lr}
   12692:	f04f 0500 	mov.w	r5, #0
   12696:	e00a      	b.n	126ae <__aeabi_l2d+0x16>

00012698 <__aeabi_l2d>:
   12698:	ea50 0201 	orrs.w	r2, r0, r1
   1269c:	bf08      	it	eq
   1269e:	4770      	bxeq	lr
   126a0:	b530      	push	{r4, r5, lr}
   126a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   126a6:	d502      	bpl.n	126ae <__aeabi_l2d+0x16>
   126a8:	4240      	negs	r0, r0
   126aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   126ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
   126b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   126b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   126ba:	f43f aed8 	beq.w	1246e <__adddf3+0xe6>
   126be:	f04f 0203 	mov.w	r2, #3
   126c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   126c6:	bf18      	it	ne
   126c8:	3203      	addne	r2, #3
   126ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   126ce:	bf18      	it	ne
   126d0:	3203      	addne	r2, #3
   126d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   126d6:	f1c2 0320 	rsb	r3, r2, #32
   126da:	fa00 fc03 	lsl.w	ip, r0, r3
   126de:	fa20 f002 	lsr.w	r0, r0, r2
   126e2:	fa01 fe03 	lsl.w	lr, r1, r3
   126e6:	ea40 000e 	orr.w	r0, r0, lr
   126ea:	fa21 f102 	lsr.w	r1, r1, r2
   126ee:	4414      	add	r4, r2
   126f0:	e6bd      	b.n	1246e <__adddf3+0xe6>
   126f2:	bf00      	nop

000126f4 <__aeabi_dmul>:
   126f4:	b570      	push	{r4, r5, r6, lr}
   126f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   126fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   126fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12702:	bf1d      	ittte	ne
   12704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12708:	ea94 0f0c 	teqne	r4, ip
   1270c:	ea95 0f0c 	teqne	r5, ip
   12710:	f000 f8de 	bleq	128d0 <__aeabi_dmul+0x1dc>
   12714:	442c      	add	r4, r5
   12716:	ea81 0603 	eor.w	r6, r1, r3
   1271a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1271e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12722:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12726:	bf18      	it	ne
   12728:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1272c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12734:	d038      	beq.n	127a8 <__aeabi_dmul+0xb4>
   12736:	fba0 ce02 	umull	ip, lr, r0, r2
   1273a:	f04f 0500 	mov.w	r5, #0
   1273e:	fbe1 e502 	umlal	lr, r5, r1, r2
   12742:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12746:	fbe0 e503 	umlal	lr, r5, r0, r3
   1274a:	f04f 0600 	mov.w	r6, #0
   1274e:	fbe1 5603 	umlal	r5, r6, r1, r3
   12752:	f09c 0f00 	teq	ip, #0
   12756:	bf18      	it	ne
   12758:	f04e 0e01 	orrne.w	lr, lr, #1
   1275c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12760:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12764:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12768:	d204      	bcs.n	12774 <__aeabi_dmul+0x80>
   1276a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1276e:	416d      	adcs	r5, r5
   12770:	eb46 0606 	adc.w	r6, r6, r6
   12774:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12778:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1277c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12780:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12784:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12788:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1278c:	bf88      	it	hi
   1278e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12792:	d81e      	bhi.n	127d2 <__aeabi_dmul+0xde>
   12794:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12798:	bf08      	it	eq
   1279a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1279e:	f150 0000 	adcs.w	r0, r0, #0
   127a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   127a6:	bd70      	pop	{r4, r5, r6, pc}
   127a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   127ac:	ea46 0101 	orr.w	r1, r6, r1
   127b0:	ea40 0002 	orr.w	r0, r0, r2
   127b4:	ea81 0103 	eor.w	r1, r1, r3
   127b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   127bc:	bfc2      	ittt	gt
   127be:	ebd4 050c 	rsbsgt	r5, r4, ip
   127c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   127c6:	bd70      	popgt	{r4, r5, r6, pc}
   127c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   127cc:	f04f 0e00 	mov.w	lr, #0
   127d0:	3c01      	subs	r4, #1
   127d2:	f300 80ab 	bgt.w	1292c <__aeabi_dmul+0x238>
   127d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   127da:	bfde      	ittt	le
   127dc:	2000      	movle	r0, #0
   127de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   127e2:	bd70      	pople	{r4, r5, r6, pc}
   127e4:	f1c4 0400 	rsb	r4, r4, #0
   127e8:	3c20      	subs	r4, #32
   127ea:	da35      	bge.n	12858 <__aeabi_dmul+0x164>
   127ec:	340c      	adds	r4, #12
   127ee:	dc1b      	bgt.n	12828 <__aeabi_dmul+0x134>
   127f0:	f104 0414 	add.w	r4, r4, #20
   127f4:	f1c4 0520 	rsb	r5, r4, #32
   127f8:	fa00 f305 	lsl.w	r3, r0, r5
   127fc:	fa20 f004 	lsr.w	r0, r0, r4
   12800:	fa01 f205 	lsl.w	r2, r1, r5
   12804:	ea40 0002 	orr.w	r0, r0, r2
   12808:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1280c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12810:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12814:	fa21 f604 	lsr.w	r6, r1, r4
   12818:	eb42 0106 	adc.w	r1, r2, r6
   1281c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12820:	bf08      	it	eq
   12822:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12826:	bd70      	pop	{r4, r5, r6, pc}
   12828:	f1c4 040c 	rsb	r4, r4, #12
   1282c:	f1c4 0520 	rsb	r5, r4, #32
   12830:	fa00 f304 	lsl.w	r3, r0, r4
   12834:	fa20 f005 	lsr.w	r0, r0, r5
   12838:	fa01 f204 	lsl.w	r2, r1, r4
   1283c:	ea40 0002 	orr.w	r0, r0, r2
   12840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12848:	f141 0100 	adc.w	r1, r1, #0
   1284c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12850:	bf08      	it	eq
   12852:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12856:	bd70      	pop	{r4, r5, r6, pc}
   12858:	f1c4 0520 	rsb	r5, r4, #32
   1285c:	fa00 f205 	lsl.w	r2, r0, r5
   12860:	ea4e 0e02 	orr.w	lr, lr, r2
   12864:	fa20 f304 	lsr.w	r3, r0, r4
   12868:	fa01 f205 	lsl.w	r2, r1, r5
   1286c:	ea43 0302 	orr.w	r3, r3, r2
   12870:	fa21 f004 	lsr.w	r0, r1, r4
   12874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12878:	fa21 f204 	lsr.w	r2, r1, r4
   1287c:	ea20 0002 	bic.w	r0, r0, r2
   12880:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12888:	bf08      	it	eq
   1288a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1288e:	bd70      	pop	{r4, r5, r6, pc}
   12890:	f094 0f00 	teq	r4, #0
   12894:	d10f      	bne.n	128b6 <__aeabi_dmul+0x1c2>
   12896:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1289a:	0040      	lsls	r0, r0, #1
   1289c:	eb41 0101 	adc.w	r1, r1, r1
   128a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   128a4:	bf08      	it	eq
   128a6:	3c01      	subeq	r4, #1
   128a8:	d0f7      	beq.n	1289a <__aeabi_dmul+0x1a6>
   128aa:	ea41 0106 	orr.w	r1, r1, r6
   128ae:	f095 0f00 	teq	r5, #0
   128b2:	bf18      	it	ne
   128b4:	4770      	bxne	lr
   128b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   128ba:	0052      	lsls	r2, r2, #1
   128bc:	eb43 0303 	adc.w	r3, r3, r3
   128c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   128c4:	bf08      	it	eq
   128c6:	3d01      	subeq	r5, #1
   128c8:	d0f7      	beq.n	128ba <__aeabi_dmul+0x1c6>
   128ca:	ea43 0306 	orr.w	r3, r3, r6
   128ce:	4770      	bx	lr
   128d0:	ea94 0f0c 	teq	r4, ip
   128d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   128d8:	bf18      	it	ne
   128da:	ea95 0f0c 	teqne	r5, ip
   128de:	d00c      	beq.n	128fa <__aeabi_dmul+0x206>
   128e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   128e4:	bf18      	it	ne
   128e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   128ea:	d1d1      	bne.n	12890 <__aeabi_dmul+0x19c>
   128ec:	ea81 0103 	eor.w	r1, r1, r3
   128f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   128f4:	f04f 0000 	mov.w	r0, #0
   128f8:	bd70      	pop	{r4, r5, r6, pc}
   128fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   128fe:	bf06      	itte	eq
   12900:	4610      	moveq	r0, r2
   12902:	4619      	moveq	r1, r3
   12904:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12908:	d019      	beq.n	1293e <__aeabi_dmul+0x24a>
   1290a:	ea94 0f0c 	teq	r4, ip
   1290e:	d102      	bne.n	12916 <__aeabi_dmul+0x222>
   12910:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12914:	d113      	bne.n	1293e <__aeabi_dmul+0x24a>
   12916:	ea95 0f0c 	teq	r5, ip
   1291a:	d105      	bne.n	12928 <__aeabi_dmul+0x234>
   1291c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12920:	bf1c      	itt	ne
   12922:	4610      	movne	r0, r2
   12924:	4619      	movne	r1, r3
   12926:	d10a      	bne.n	1293e <__aeabi_dmul+0x24a>
   12928:	ea81 0103 	eor.w	r1, r1, r3
   1292c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12930:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12938:	f04f 0000 	mov.w	r0, #0
   1293c:	bd70      	pop	{r4, r5, r6, pc}
   1293e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12942:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12946:	bd70      	pop	{r4, r5, r6, pc}

00012948 <__aeabi_ddiv>:
   12948:	b570      	push	{r4, r5, r6, lr}
   1294a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1294e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12956:	bf1d      	ittte	ne
   12958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1295c:	ea94 0f0c 	teqne	r4, ip
   12960:	ea95 0f0c 	teqne	r5, ip
   12964:	f000 f8a7 	bleq	12ab6 <__aeabi_ddiv+0x16e>
   12968:	eba4 0405 	sub.w	r4, r4, r5
   1296c:	ea81 0e03 	eor.w	lr, r1, r3
   12970:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12974:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12978:	f000 8088 	beq.w	12a8c <__aeabi_ddiv+0x144>
   1297c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12980:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12984:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12988:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1298c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12990:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12994:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12998:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1299c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   129a0:	429d      	cmp	r5, r3
   129a2:	bf08      	it	eq
   129a4:	4296      	cmpeq	r6, r2
   129a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   129aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   129ae:	d202      	bcs.n	129b6 <__aeabi_ddiv+0x6e>
   129b0:	085b      	lsrs	r3, r3, #1
   129b2:	ea4f 0232 	mov.w	r2, r2, rrx
   129b6:	1ab6      	subs	r6, r6, r2
   129b8:	eb65 0503 	sbc.w	r5, r5, r3
   129bc:	085b      	lsrs	r3, r3, #1
   129be:	ea4f 0232 	mov.w	r2, r2, rrx
   129c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   129c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   129ca:	ebb6 0e02 	subs.w	lr, r6, r2
   129ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   129d2:	bf22      	ittt	cs
   129d4:	1ab6      	subcs	r6, r6, r2
   129d6:	4675      	movcs	r5, lr
   129d8:	ea40 000c 	orrcs.w	r0, r0, ip
   129dc:	085b      	lsrs	r3, r3, #1
   129de:	ea4f 0232 	mov.w	r2, r2, rrx
   129e2:	ebb6 0e02 	subs.w	lr, r6, r2
   129e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   129ea:	bf22      	ittt	cs
   129ec:	1ab6      	subcs	r6, r6, r2
   129ee:	4675      	movcs	r5, lr
   129f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   129f4:	085b      	lsrs	r3, r3, #1
   129f6:	ea4f 0232 	mov.w	r2, r2, rrx
   129fa:	ebb6 0e02 	subs.w	lr, r6, r2
   129fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   12a02:	bf22      	ittt	cs
   12a04:	1ab6      	subcs	r6, r6, r2
   12a06:	4675      	movcs	r5, lr
   12a08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12a0c:	085b      	lsrs	r3, r3, #1
   12a0e:	ea4f 0232 	mov.w	r2, r2, rrx
   12a12:	ebb6 0e02 	subs.w	lr, r6, r2
   12a16:	eb75 0e03 	sbcs.w	lr, r5, r3
   12a1a:	bf22      	ittt	cs
   12a1c:	1ab6      	subcs	r6, r6, r2
   12a1e:	4675      	movcs	r5, lr
   12a20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12a24:	ea55 0e06 	orrs.w	lr, r5, r6
   12a28:	d018      	beq.n	12a5c <__aeabi_ddiv+0x114>
   12a2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12a2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12a32:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12a36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12a3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12a3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12a42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12a46:	d1c0      	bne.n	129ca <__aeabi_ddiv+0x82>
   12a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12a4c:	d10b      	bne.n	12a66 <__aeabi_ddiv+0x11e>
   12a4e:	ea41 0100 	orr.w	r1, r1, r0
   12a52:	f04f 0000 	mov.w	r0, #0
   12a56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12a5a:	e7b6      	b.n	129ca <__aeabi_ddiv+0x82>
   12a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12a60:	bf04      	itt	eq
   12a62:	4301      	orreq	r1, r0
   12a64:	2000      	moveq	r0, #0
   12a66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12a6a:	bf88      	it	hi
   12a6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12a70:	f63f aeaf 	bhi.w	127d2 <__aeabi_dmul+0xde>
   12a74:	ebb5 0c03 	subs.w	ip, r5, r3
   12a78:	bf04      	itt	eq
   12a7a:	ebb6 0c02 	subseq.w	ip, r6, r2
   12a7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12a82:	f150 0000 	adcs.w	r0, r0, #0
   12a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12a8a:	bd70      	pop	{r4, r5, r6, pc}
   12a8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12a90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12a94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12a98:	bfc2      	ittt	gt
   12a9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   12a9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12aa2:	bd70      	popgt	{r4, r5, r6, pc}
   12aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12aa8:	f04f 0e00 	mov.w	lr, #0
   12aac:	3c01      	subs	r4, #1
   12aae:	e690      	b.n	127d2 <__aeabi_dmul+0xde>
   12ab0:	ea45 0e06 	orr.w	lr, r5, r6
   12ab4:	e68d      	b.n	127d2 <__aeabi_dmul+0xde>
   12ab6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12aba:	ea94 0f0c 	teq	r4, ip
   12abe:	bf08      	it	eq
   12ac0:	ea95 0f0c 	teqeq	r5, ip
   12ac4:	f43f af3b 	beq.w	1293e <__aeabi_dmul+0x24a>
   12ac8:	ea94 0f0c 	teq	r4, ip
   12acc:	d10a      	bne.n	12ae4 <__aeabi_ddiv+0x19c>
   12ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12ad2:	f47f af34 	bne.w	1293e <__aeabi_dmul+0x24a>
   12ad6:	ea95 0f0c 	teq	r5, ip
   12ada:	f47f af25 	bne.w	12928 <__aeabi_dmul+0x234>
   12ade:	4610      	mov	r0, r2
   12ae0:	4619      	mov	r1, r3
   12ae2:	e72c      	b.n	1293e <__aeabi_dmul+0x24a>
   12ae4:	ea95 0f0c 	teq	r5, ip
   12ae8:	d106      	bne.n	12af8 <__aeabi_ddiv+0x1b0>
   12aea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12aee:	f43f aefd 	beq.w	128ec <__aeabi_dmul+0x1f8>
   12af2:	4610      	mov	r0, r2
   12af4:	4619      	mov	r1, r3
   12af6:	e722      	b.n	1293e <__aeabi_dmul+0x24a>
   12af8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12afc:	bf18      	it	ne
   12afe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12b02:	f47f aec5 	bne.w	12890 <__aeabi_dmul+0x19c>
   12b06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   12b0a:	f47f af0d 	bne.w	12928 <__aeabi_dmul+0x234>
   12b0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12b12:	f47f aeeb 	bne.w	128ec <__aeabi_dmul+0x1f8>
   12b16:	e712      	b.n	1293e <__aeabi_dmul+0x24a>

00012b18 <__aeabi_d2uiz>:
   12b18:	004a      	lsls	r2, r1, #1
   12b1a:	d211      	bcs.n	12b40 <__aeabi_d2uiz+0x28>
   12b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12b20:	d211      	bcs.n	12b46 <__aeabi_d2uiz+0x2e>
   12b22:	d50d      	bpl.n	12b40 <__aeabi_d2uiz+0x28>
   12b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12b2c:	d40e      	bmi.n	12b4c <__aeabi_d2uiz+0x34>
   12b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12b3a:	fa23 f002 	lsr.w	r0, r3, r2
   12b3e:	4770      	bx	lr
   12b40:	f04f 0000 	mov.w	r0, #0
   12b44:	4770      	bx	lr
   12b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12b4a:	d102      	bne.n	12b52 <__aeabi_d2uiz+0x3a>
   12b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b50:	4770      	bx	lr
   12b52:	f04f 0000 	mov.w	r0, #0
   12b56:	4770      	bx	lr

00012b58 <__libc_init_array>:
   12b58:	b570      	push	{r4, r5, r6, lr}
   12b5a:	4e0d      	ldr	r6, [pc, #52]	; (12b90 <__libc_init_array+0x38>)
   12b5c:	4d0d      	ldr	r5, [pc, #52]	; (12b94 <__libc_init_array+0x3c>)
   12b5e:	1b76      	subs	r6, r6, r5
   12b60:	10b6      	asrs	r6, r6, #2
   12b62:	d006      	beq.n	12b72 <__libc_init_array+0x1a>
   12b64:	2400      	movs	r4, #0
   12b66:	3401      	adds	r4, #1
   12b68:	f855 3b04 	ldr.w	r3, [r5], #4
   12b6c:	4798      	blx	r3
   12b6e:	42a6      	cmp	r6, r4
   12b70:	d1f9      	bne.n	12b66 <__libc_init_array+0xe>
   12b72:	4e09      	ldr	r6, [pc, #36]	; (12b98 <__libc_init_array+0x40>)
   12b74:	4d09      	ldr	r5, [pc, #36]	; (12b9c <__libc_init_array+0x44>)
   12b76:	1b76      	subs	r6, r6, r5
   12b78:	f003 fa78 	bl	1606c <_init>
   12b7c:	10b6      	asrs	r6, r6, #2
   12b7e:	d006      	beq.n	12b8e <__libc_init_array+0x36>
   12b80:	2400      	movs	r4, #0
   12b82:	3401      	adds	r4, #1
   12b84:	f855 3b04 	ldr.w	r3, [r5], #4
   12b88:	4798      	blx	r3
   12b8a:	42a6      	cmp	r6, r4
   12b8c:	d1f9      	bne.n	12b82 <__libc_init_array+0x2a>
   12b8e:	bd70      	pop	{r4, r5, r6, pc}
   12b90:	00016078 	.word	0x00016078
   12b94:	00016078 	.word	0x00016078
   12b98:	0001607c 	.word	0x0001607c
   12b9c:	00016078 	.word	0x00016078

00012ba0 <malloc>:
   12ba0:	4b02      	ldr	r3, [pc, #8]	; (12bac <malloc+0xc>)
   12ba2:	4601      	mov	r1, r0
   12ba4:	6818      	ldr	r0, [r3, #0]
   12ba6:	f000 b94b 	b.w	12e40 <_malloc_r>
   12baa:	bf00      	nop
   12bac:	20000548 	.word	0x20000548

00012bb0 <free>:
   12bb0:	4b02      	ldr	r3, [pc, #8]	; (12bbc <free+0xc>)
   12bb2:	4601      	mov	r1, r0
   12bb4:	6818      	ldr	r0, [r3, #0]
   12bb6:	f000 b8ed 	b.w	12d94 <_free_r>
   12bba:	bf00      	nop
   12bbc:	20000548 	.word	0x20000548

00012bc0 <memcpy>:
   12bc0:	4684      	mov	ip, r0
   12bc2:	ea41 0300 	orr.w	r3, r1, r0
   12bc6:	f013 0303 	ands.w	r3, r3, #3
   12bca:	d16d      	bne.n	12ca8 <memcpy+0xe8>
   12bcc:	3a40      	subs	r2, #64	; 0x40
   12bce:	d341      	bcc.n	12c54 <memcpy+0x94>
   12bd0:	f851 3b04 	ldr.w	r3, [r1], #4
   12bd4:	f840 3b04 	str.w	r3, [r0], #4
   12bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bdc:	f840 3b04 	str.w	r3, [r0], #4
   12be0:	f851 3b04 	ldr.w	r3, [r1], #4
   12be4:	f840 3b04 	str.w	r3, [r0], #4
   12be8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bec:	f840 3b04 	str.w	r3, [r0], #4
   12bf0:	f851 3b04 	ldr.w	r3, [r1], #4
   12bf4:	f840 3b04 	str.w	r3, [r0], #4
   12bf8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bfc:	f840 3b04 	str.w	r3, [r0], #4
   12c00:	f851 3b04 	ldr.w	r3, [r1], #4
   12c04:	f840 3b04 	str.w	r3, [r0], #4
   12c08:	f851 3b04 	ldr.w	r3, [r1], #4
   12c0c:	f840 3b04 	str.w	r3, [r0], #4
   12c10:	f851 3b04 	ldr.w	r3, [r1], #4
   12c14:	f840 3b04 	str.w	r3, [r0], #4
   12c18:	f851 3b04 	ldr.w	r3, [r1], #4
   12c1c:	f840 3b04 	str.w	r3, [r0], #4
   12c20:	f851 3b04 	ldr.w	r3, [r1], #4
   12c24:	f840 3b04 	str.w	r3, [r0], #4
   12c28:	f851 3b04 	ldr.w	r3, [r1], #4
   12c2c:	f840 3b04 	str.w	r3, [r0], #4
   12c30:	f851 3b04 	ldr.w	r3, [r1], #4
   12c34:	f840 3b04 	str.w	r3, [r0], #4
   12c38:	f851 3b04 	ldr.w	r3, [r1], #4
   12c3c:	f840 3b04 	str.w	r3, [r0], #4
   12c40:	f851 3b04 	ldr.w	r3, [r1], #4
   12c44:	f840 3b04 	str.w	r3, [r0], #4
   12c48:	f851 3b04 	ldr.w	r3, [r1], #4
   12c4c:	f840 3b04 	str.w	r3, [r0], #4
   12c50:	3a40      	subs	r2, #64	; 0x40
   12c52:	d2bd      	bcs.n	12bd0 <memcpy+0x10>
   12c54:	3230      	adds	r2, #48	; 0x30
   12c56:	d311      	bcc.n	12c7c <memcpy+0xbc>
   12c58:	f851 3b04 	ldr.w	r3, [r1], #4
   12c5c:	f840 3b04 	str.w	r3, [r0], #4
   12c60:	f851 3b04 	ldr.w	r3, [r1], #4
   12c64:	f840 3b04 	str.w	r3, [r0], #4
   12c68:	f851 3b04 	ldr.w	r3, [r1], #4
   12c6c:	f840 3b04 	str.w	r3, [r0], #4
   12c70:	f851 3b04 	ldr.w	r3, [r1], #4
   12c74:	f840 3b04 	str.w	r3, [r0], #4
   12c78:	3a10      	subs	r2, #16
   12c7a:	d2ed      	bcs.n	12c58 <memcpy+0x98>
   12c7c:	320c      	adds	r2, #12
   12c7e:	d305      	bcc.n	12c8c <memcpy+0xcc>
   12c80:	f851 3b04 	ldr.w	r3, [r1], #4
   12c84:	f840 3b04 	str.w	r3, [r0], #4
   12c88:	3a04      	subs	r2, #4
   12c8a:	d2f9      	bcs.n	12c80 <memcpy+0xc0>
   12c8c:	3204      	adds	r2, #4
   12c8e:	d008      	beq.n	12ca2 <memcpy+0xe2>
   12c90:	07d2      	lsls	r2, r2, #31
   12c92:	bf1c      	itt	ne
   12c94:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12c98:	f800 3b01 	strbne.w	r3, [r0], #1
   12c9c:	d301      	bcc.n	12ca2 <memcpy+0xe2>
   12c9e:	880b      	ldrh	r3, [r1, #0]
   12ca0:	8003      	strh	r3, [r0, #0]
   12ca2:	4660      	mov	r0, ip
   12ca4:	4770      	bx	lr
   12ca6:	bf00      	nop
   12ca8:	2a08      	cmp	r2, #8
   12caa:	d313      	bcc.n	12cd4 <memcpy+0x114>
   12cac:	078b      	lsls	r3, r1, #30
   12cae:	d08d      	beq.n	12bcc <memcpy+0xc>
   12cb0:	f010 0303 	ands.w	r3, r0, #3
   12cb4:	d08a      	beq.n	12bcc <memcpy+0xc>
   12cb6:	f1c3 0304 	rsb	r3, r3, #4
   12cba:	1ad2      	subs	r2, r2, r3
   12cbc:	07db      	lsls	r3, r3, #31
   12cbe:	bf1c      	itt	ne
   12cc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12cc4:	f800 3b01 	strbne.w	r3, [r0], #1
   12cc8:	d380      	bcc.n	12bcc <memcpy+0xc>
   12cca:	f831 3b02 	ldrh.w	r3, [r1], #2
   12cce:	f820 3b02 	strh.w	r3, [r0], #2
   12cd2:	e77b      	b.n	12bcc <memcpy+0xc>
   12cd4:	3a04      	subs	r2, #4
   12cd6:	d3d9      	bcc.n	12c8c <memcpy+0xcc>
   12cd8:	3a01      	subs	r2, #1
   12cda:	f811 3b01 	ldrb.w	r3, [r1], #1
   12cde:	f800 3b01 	strb.w	r3, [r0], #1
   12ce2:	d2f9      	bcs.n	12cd8 <memcpy+0x118>
   12ce4:	780b      	ldrb	r3, [r1, #0]
   12ce6:	7003      	strb	r3, [r0, #0]
   12ce8:	784b      	ldrb	r3, [r1, #1]
   12cea:	7043      	strb	r3, [r0, #1]
   12cec:	788b      	ldrb	r3, [r1, #2]
   12cee:	7083      	strb	r3, [r0, #2]
   12cf0:	4660      	mov	r0, ip
   12cf2:	4770      	bx	lr

00012cf4 <memset>:
   12cf4:	b4f0      	push	{r4, r5, r6, r7}
   12cf6:	0786      	lsls	r6, r0, #30
   12cf8:	d046      	beq.n	12d88 <memset+0x94>
   12cfa:	1e54      	subs	r4, r2, #1
   12cfc:	2a00      	cmp	r2, #0
   12cfe:	d03c      	beq.n	12d7a <memset+0x86>
   12d00:	b2ca      	uxtb	r2, r1
   12d02:	4603      	mov	r3, r0
   12d04:	e002      	b.n	12d0c <memset+0x18>
   12d06:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   12d0a:	d336      	bcc.n	12d7a <memset+0x86>
   12d0c:	f803 2b01 	strb.w	r2, [r3], #1
   12d10:	079d      	lsls	r5, r3, #30
   12d12:	d1f8      	bne.n	12d06 <memset+0x12>
   12d14:	2c03      	cmp	r4, #3
   12d16:	d929      	bls.n	12d6c <memset+0x78>
   12d18:	b2cd      	uxtb	r5, r1
   12d1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12d1e:	2c0f      	cmp	r4, #15
   12d20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12d24:	d933      	bls.n	12d8e <memset+0x9a>
   12d26:	f1a4 0610 	sub.w	r6, r4, #16
   12d2a:	0936      	lsrs	r6, r6, #4
   12d2c:	f103 0720 	add.w	r7, r3, #32
   12d30:	eb07 1706 	add.w	r7, r7, r6, lsl #4
   12d34:	f103 0210 	add.w	r2, r3, #16
   12d38:	e942 5504 	strd	r5, r5, [r2, #-16]
   12d3c:	e942 5502 	strd	r5, r5, [r2, #-8]
   12d40:	3210      	adds	r2, #16
   12d42:	42ba      	cmp	r2, r7
   12d44:	d1f8      	bne.n	12d38 <memset+0x44>
   12d46:	1c72      	adds	r2, r6, #1
   12d48:	f014 0f0c 	tst.w	r4, #12
   12d4c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   12d50:	f004 060f 	and.w	r6, r4, #15
   12d54:	d013      	beq.n	12d7e <memset+0x8a>
   12d56:	1f33      	subs	r3, r6, #4
   12d58:	f023 0303 	bic.w	r3, r3, #3
   12d5c:	3304      	adds	r3, #4
   12d5e:	4413      	add	r3, r2
   12d60:	f842 5b04 	str.w	r5, [r2], #4
   12d64:	4293      	cmp	r3, r2
   12d66:	d1fb      	bne.n	12d60 <memset+0x6c>
   12d68:	f006 0403 	and.w	r4, r6, #3
   12d6c:	b12c      	cbz	r4, 12d7a <memset+0x86>
   12d6e:	b2c9      	uxtb	r1, r1
   12d70:	441c      	add	r4, r3
   12d72:	f803 1b01 	strb.w	r1, [r3], #1
   12d76:	429c      	cmp	r4, r3
   12d78:	d1fb      	bne.n	12d72 <memset+0x7e>
   12d7a:	bcf0      	pop	{r4, r5, r6, r7}
   12d7c:	4770      	bx	lr
   12d7e:	4634      	mov	r4, r6
   12d80:	4613      	mov	r3, r2
   12d82:	2c00      	cmp	r4, #0
   12d84:	d1f3      	bne.n	12d6e <memset+0x7a>
   12d86:	e7f8      	b.n	12d7a <memset+0x86>
   12d88:	4614      	mov	r4, r2
   12d8a:	4603      	mov	r3, r0
   12d8c:	e7c2      	b.n	12d14 <memset+0x20>
   12d8e:	461a      	mov	r2, r3
   12d90:	4626      	mov	r6, r4
   12d92:	e7e0      	b.n	12d56 <memset+0x62>

00012d94 <_free_r>:
   12d94:	2900      	cmp	r1, #0
   12d96:	d03c      	beq.n	12e12 <_free_r+0x7e>
   12d98:	b538      	push	{r3, r4, r5, lr}
   12d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12d9e:	1f0c      	subs	r4, r1, #4
   12da0:	2b00      	cmp	r3, #0
   12da2:	bfb8      	it	lt
   12da4:	18e4      	addlt	r4, r4, r3
   12da6:	4605      	mov	r5, r0
   12da8:	f001 f920 	bl	13fec <__malloc_lock>
   12dac:	4b23      	ldr	r3, [pc, #140]	; (12e3c <_free_r+0xa8>)
   12dae:	681a      	ldr	r2, [r3, #0]
   12db0:	b12a      	cbz	r2, 12dbe <_free_r+0x2a>
   12db2:	42a2      	cmp	r2, r4
   12db4:	d90d      	bls.n	12dd2 <_free_r+0x3e>
   12db6:	6821      	ldr	r1, [r4, #0]
   12db8:	1860      	adds	r0, r4, r1
   12dba:	4282      	cmp	r2, r0
   12dbc:	d023      	beq.n	12e06 <_free_r+0x72>
   12dbe:	6062      	str	r2, [r4, #4]
   12dc0:	4628      	mov	r0, r5
   12dc2:	601c      	str	r4, [r3, #0]
   12dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12dc8:	f001 b912 	b.w	13ff0 <__malloc_unlock>
   12dcc:	42a3      	cmp	r3, r4
   12dce:	d803      	bhi.n	12dd8 <_free_r+0x44>
   12dd0:	461a      	mov	r2, r3
   12dd2:	6853      	ldr	r3, [r2, #4]
   12dd4:	2b00      	cmp	r3, #0
   12dd6:	d1f9      	bne.n	12dcc <_free_r+0x38>
   12dd8:	6811      	ldr	r1, [r2, #0]
   12dda:	1850      	adds	r0, r2, r1
   12ddc:	42a0      	cmp	r0, r4
   12dde:	d019      	beq.n	12e14 <_free_r+0x80>
   12de0:	d824      	bhi.n	12e2c <_free_r+0x98>
   12de2:	6821      	ldr	r1, [r4, #0]
   12de4:	1860      	adds	r0, r4, r1
   12de6:	4283      	cmp	r3, r0
   12de8:	d006      	beq.n	12df8 <_free_r+0x64>
   12dea:	6063      	str	r3, [r4, #4]
   12dec:	6054      	str	r4, [r2, #4]
   12dee:	4628      	mov	r0, r5
   12df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12df4:	f001 b8fc 	b.w	13ff0 <__malloc_unlock>
   12df8:	e9d3 0300 	ldrd	r0, r3, [r3]
   12dfc:	4401      	add	r1, r0
   12dfe:	6063      	str	r3, [r4, #4]
   12e00:	6021      	str	r1, [r4, #0]
   12e02:	6054      	str	r4, [r2, #4]
   12e04:	e7f3      	b.n	12dee <_free_r+0x5a>
   12e06:	e9d2 0200 	ldrd	r0, r2, [r2]
   12e0a:	4401      	add	r1, r0
   12e0c:	6062      	str	r2, [r4, #4]
   12e0e:	6021      	str	r1, [r4, #0]
   12e10:	e7d6      	b.n	12dc0 <_free_r+0x2c>
   12e12:	4770      	bx	lr
   12e14:	6820      	ldr	r0, [r4, #0]
   12e16:	4401      	add	r1, r0
   12e18:	1850      	adds	r0, r2, r1
   12e1a:	4283      	cmp	r3, r0
   12e1c:	6011      	str	r1, [r2, #0]
   12e1e:	d1e6      	bne.n	12dee <_free_r+0x5a>
   12e20:	e9d3 0300 	ldrd	r0, r3, [r3]
   12e24:	4401      	add	r1, r0
   12e26:	6053      	str	r3, [r2, #4]
   12e28:	6011      	str	r1, [r2, #0]
   12e2a:	e7e0      	b.n	12dee <_free_r+0x5a>
   12e2c:	230c      	movs	r3, #12
   12e2e:	602b      	str	r3, [r5, #0]
   12e30:	4628      	mov	r0, r5
   12e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12e36:	f001 b8db 	b.w	13ff0 <__malloc_unlock>
   12e3a:	bf00      	nop
   12e3c:	200010d4 	.word	0x200010d4

00012e40 <_malloc_r>:
   12e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e42:	1ccd      	adds	r5, r1, #3
   12e44:	f025 0503 	bic.w	r5, r5, #3
   12e48:	3508      	adds	r5, #8
   12e4a:	2d0c      	cmp	r5, #12
   12e4c:	bf38      	it	cc
   12e4e:	250c      	movcc	r5, #12
   12e50:	2d00      	cmp	r5, #0
   12e52:	4606      	mov	r6, r0
   12e54:	db33      	blt.n	12ebe <_malloc_r+0x7e>
   12e56:	42a9      	cmp	r1, r5
   12e58:	d831      	bhi.n	12ebe <_malloc_r+0x7e>
   12e5a:	4f2a      	ldr	r7, [pc, #168]	; (12f04 <_malloc_r+0xc4>)
   12e5c:	f001 f8c6 	bl	13fec <__malloc_lock>
   12e60:	683a      	ldr	r2, [r7, #0]
   12e62:	b152      	cbz	r2, 12e7a <_malloc_r+0x3a>
   12e64:	6813      	ldr	r3, [r2, #0]
   12e66:	1b5b      	subs	r3, r3, r5
   12e68:	d404      	bmi.n	12e74 <_malloc_r+0x34>
   12e6a:	e03f      	b.n	12eec <_malloc_r+0xac>
   12e6c:	6823      	ldr	r3, [r4, #0]
   12e6e:	1b5b      	subs	r3, r3, r5
   12e70:	d529      	bpl.n	12ec6 <_malloc_r+0x86>
   12e72:	4622      	mov	r2, r4
   12e74:	6854      	ldr	r4, [r2, #4]
   12e76:	2c00      	cmp	r4, #0
   12e78:	d1f8      	bne.n	12e6c <_malloc_r+0x2c>
   12e7a:	6879      	ldr	r1, [r7, #4]
   12e7c:	2900      	cmp	r1, #0
   12e7e:	d03b      	beq.n	12ef8 <_malloc_r+0xb8>
   12e80:	4629      	mov	r1, r5
   12e82:	4630      	mov	r0, r6
   12e84:	f000 f8e8 	bl	13058 <_sbrk_r>
   12e88:	1c43      	adds	r3, r0, #1
   12e8a:	d028      	beq.n	12ede <_malloc_r+0x9e>
   12e8c:	1cc4      	adds	r4, r0, #3
   12e8e:	f024 0403 	bic.w	r4, r4, #3
   12e92:	42a0      	cmp	r0, r4
   12e94:	d005      	beq.n	12ea2 <_malloc_r+0x62>
   12e96:	1a21      	subs	r1, r4, r0
   12e98:	4630      	mov	r0, r6
   12e9a:	f000 f8dd 	bl	13058 <_sbrk_r>
   12e9e:	3001      	adds	r0, #1
   12ea0:	d01d      	beq.n	12ede <_malloc_r+0x9e>
   12ea2:	6025      	str	r5, [r4, #0]
   12ea4:	4630      	mov	r0, r6
   12ea6:	f001 f8a3 	bl	13ff0 <__malloc_unlock>
   12eaa:	f104 000b 	add.w	r0, r4, #11
   12eae:	f020 0007 	bic.w	r0, r0, #7
   12eb2:	1d23      	adds	r3, r4, #4
   12eb4:	1ac2      	subs	r2, r0, r3
   12eb6:	d001      	beq.n	12ebc <_malloc_r+0x7c>
   12eb8:	1a1b      	subs	r3, r3, r0
   12eba:	50a3      	str	r3, [r4, r2]
   12ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ebe:	220c      	movs	r2, #12
   12ec0:	6032      	str	r2, [r6, #0]
   12ec2:	2000      	movs	r0, #0
   12ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ec6:	2b0b      	cmp	r3, #11
   12ec8:	d805      	bhi.n	12ed6 <_malloc_r+0x96>
   12eca:	42a2      	cmp	r2, r4
   12ecc:	6863      	ldr	r3, [r4, #4]
   12ece:	d011      	beq.n	12ef4 <_malloc_r+0xb4>
   12ed0:	6053      	str	r3, [r2, #4]
   12ed2:	e7e7      	b.n	12ea4 <_malloc_r+0x64>
   12ed4:	4614      	mov	r4, r2
   12ed6:	6023      	str	r3, [r4, #0]
   12ed8:	441c      	add	r4, r3
   12eda:	6025      	str	r5, [r4, #0]
   12edc:	e7e2      	b.n	12ea4 <_malloc_r+0x64>
   12ede:	230c      	movs	r3, #12
   12ee0:	4630      	mov	r0, r6
   12ee2:	6033      	str	r3, [r6, #0]
   12ee4:	f001 f884 	bl	13ff0 <__malloc_unlock>
   12ee8:	2000      	movs	r0, #0
   12eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12eec:	2b0b      	cmp	r3, #11
   12eee:	d8f1      	bhi.n	12ed4 <_malloc_r+0x94>
   12ef0:	6853      	ldr	r3, [r2, #4]
   12ef2:	4614      	mov	r4, r2
   12ef4:	603b      	str	r3, [r7, #0]
   12ef6:	e7d5      	b.n	12ea4 <_malloc_r+0x64>
   12ef8:	4630      	mov	r0, r6
   12efa:	f000 f8ad 	bl	13058 <_sbrk_r>
   12efe:	6078      	str	r0, [r7, #4]
   12f00:	e7be      	b.n	12e80 <_malloc_r+0x40>
   12f02:	bf00      	nop
   12f04:	200010d4 	.word	0x200010d4

00012f08 <_iprintf_r>:
   12f08:	b40e      	push	{r1, r2, r3}
   12f0a:	b510      	push	{r4, lr}
   12f0c:	4604      	mov	r4, r0
   12f0e:	b083      	sub	sp, #12
   12f10:	b108      	cbz	r0, 12f16 <_iprintf_r+0xe>
   12f12:	6983      	ldr	r3, [r0, #24]
   12f14:	b163      	cbz	r3, 12f30 <_iprintf_r+0x28>
   12f16:	a806      	add	r0, sp, #24
   12f18:	4603      	mov	r3, r0
   12f1a:	9001      	str	r0, [sp, #4]
   12f1c:	9a05      	ldr	r2, [sp, #20]
   12f1e:	68a1      	ldr	r1, [r4, #8]
   12f20:	4620      	mov	r0, r4
   12f22:	f001 fabf 	bl	144a4 <_vfiprintf_r>
   12f26:	b003      	add	sp, #12
   12f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12f2c:	b003      	add	sp, #12
   12f2e:	4770      	bx	lr
   12f30:	f000 ff74 	bl	13e1c <__sinit>
   12f34:	e7ef      	b.n	12f16 <_iprintf_r+0xe>
   12f36:	bf00      	nop

00012f38 <iprintf>:
   12f38:	b40f      	push	{r0, r1, r2, r3}
   12f3a:	b510      	push	{r4, lr}
   12f3c:	4b0b      	ldr	r3, [pc, #44]	; (12f6c <iprintf+0x34>)
   12f3e:	681c      	ldr	r4, [r3, #0]
   12f40:	b082      	sub	sp, #8
   12f42:	b10c      	cbz	r4, 12f48 <iprintf+0x10>
   12f44:	69a3      	ldr	r3, [r4, #24]
   12f46:	b163      	cbz	r3, 12f62 <iprintf+0x2a>
   12f48:	a805      	add	r0, sp, #20
   12f4a:	4603      	mov	r3, r0
   12f4c:	9001      	str	r0, [sp, #4]
   12f4e:	9a04      	ldr	r2, [sp, #16]
   12f50:	68a1      	ldr	r1, [r4, #8]
   12f52:	4620      	mov	r0, r4
   12f54:	f001 faa6 	bl	144a4 <_vfiprintf_r>
   12f58:	b002      	add	sp, #8
   12f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12f5e:	b004      	add	sp, #16
   12f60:	4770      	bx	lr
   12f62:	4620      	mov	r0, r4
   12f64:	f000 ff5a 	bl	13e1c <__sinit>
   12f68:	e7ee      	b.n	12f48 <iprintf+0x10>
   12f6a:	bf00      	nop
   12f6c:	20000548 	.word	0x20000548

00012f70 <_puts_r>:
   12f70:	6983      	ldr	r3, [r0, #24]
   12f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f76:	4680      	mov	r8, r0
   12f78:	460e      	mov	r6, r1
   12f7a:	b333      	cbz	r3, 12fca <_puts_r+0x5a>
   12f7c:	6884      	ldr	r4, [r0, #8]
   12f7e:	4b2f      	ldr	r3, [pc, #188]	; (1303c <_puts_r+0xcc>)
   12f80:	429c      	cmp	r4, r3
   12f82:	d030      	beq.n	12fe6 <_puts_r+0x76>
   12f84:	4b2e      	ldr	r3, [pc, #184]	; (13040 <_puts_r+0xd0>)
   12f86:	429c      	cmp	r4, r3
   12f88:	d039      	beq.n	12ffe <_puts_r+0x8e>
   12f8a:	4b2e      	ldr	r3, [pc, #184]	; (13044 <_puts_r+0xd4>)
   12f8c:	429c      	cmp	r4, r3
   12f8e:	bf08      	it	eq
   12f90:	f8d8 400c 	ldreq.w	r4, [r8, #12]
   12f94:	89a3      	ldrh	r3, [r4, #12]
   12f96:	071b      	lsls	r3, r3, #28
   12f98:	d52a      	bpl.n	12ff0 <_puts_r+0x80>
   12f9a:	6923      	ldr	r3, [r4, #16]
   12f9c:	b343      	cbz	r3, 12ff0 <_puts_r+0x80>
   12f9e:	3e01      	subs	r6, #1
   12fa0:	68a3      	ldr	r3, [r4, #8]
   12fa2:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   12fa6:	3b01      	subs	r3, #1
   12fa8:	60a3      	str	r3, [r4, #8]
   12faa:	b39d      	cbz	r5, 13014 <_puts_r+0xa4>
   12fac:	2b00      	cmp	r3, #0
   12fae:	da07      	bge.n	12fc0 <_puts_r+0x50>
   12fb0:	69a7      	ldr	r7, [r4, #24]
   12fb2:	429f      	cmp	r7, r3
   12fb4:	4622      	mov	r2, r4
   12fb6:	4629      	mov	r1, r5
   12fb8:	4640      	mov	r0, r8
   12fba:	dc23      	bgt.n	13004 <_puts_r+0x94>
   12fbc:	2d0a      	cmp	r5, #10
   12fbe:	d021      	beq.n	13004 <_puts_r+0x94>
   12fc0:	6823      	ldr	r3, [r4, #0]
   12fc2:	1c5a      	adds	r2, r3, #1
   12fc4:	6022      	str	r2, [r4, #0]
   12fc6:	701d      	strb	r5, [r3, #0]
   12fc8:	e7ea      	b.n	12fa0 <_puts_r+0x30>
   12fca:	f000 ff27 	bl	13e1c <__sinit>
   12fce:	f8d8 3018 	ldr.w	r3, [r8, #24]
   12fd2:	f8d8 4008 	ldr.w	r4, [r8, #8]
   12fd6:	2b00      	cmp	r3, #0
   12fd8:	d1d1      	bne.n	12f7e <_puts_r+0xe>
   12fda:	4640      	mov	r0, r8
   12fdc:	f000 ff1e 	bl	13e1c <__sinit>
   12fe0:	4b16      	ldr	r3, [pc, #88]	; (1303c <_puts_r+0xcc>)
   12fe2:	429c      	cmp	r4, r3
   12fe4:	d1ce      	bne.n	12f84 <_puts_r+0x14>
   12fe6:	f8d8 4004 	ldr.w	r4, [r8, #4]
   12fea:	89a3      	ldrh	r3, [r4, #12]
   12fec:	071b      	lsls	r3, r3, #28
   12fee:	d4d4      	bmi.n	12f9a <_puts_r+0x2a>
   12ff0:	4621      	mov	r1, r4
   12ff2:	4640      	mov	r0, r8
   12ff4:	f000 fcd2 	bl	1399c <__swsetup_r>
   12ff8:	2800      	cmp	r0, #0
   12ffa:	d0d0      	beq.n	12f9e <_puts_r+0x2e>
   12ffc:	e006      	b.n	1300c <_puts_r+0x9c>
   12ffe:	f8d8 4008 	ldr.w	r4, [r8, #8]
   13002:	e7c7      	b.n	12f94 <_puts_r+0x24>
   13004:	f000 fc6a 	bl	138dc <__swbuf_r>
   13008:	3001      	adds	r0, #1
   1300a:	d1c9      	bne.n	12fa0 <_puts_r+0x30>
   1300c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13014:	2b00      	cmp	r3, #0
   13016:	da09      	bge.n	1302c <_puts_r+0xbc>
   13018:	4622      	mov	r2, r4
   1301a:	4640      	mov	r0, r8
   1301c:	210a      	movs	r1, #10
   1301e:	f000 fc5d 	bl	138dc <__swbuf_r>
   13022:	3001      	adds	r0, #1
   13024:	d0f2      	beq.n	1300c <_puts_r+0x9c>
   13026:	200a      	movs	r0, #10
   13028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1302c:	6823      	ldr	r3, [r4, #0]
   1302e:	220a      	movs	r2, #10
   13030:	1c59      	adds	r1, r3, #1
   13032:	6021      	str	r1, [r4, #0]
   13034:	701a      	strb	r2, [r3, #0]
   13036:	4610      	mov	r0, r2
   13038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1303c:	00016010 	.word	0x00016010
   13040:	00015ff0 	.word	0x00015ff0
   13044:	00015fd0 	.word	0x00015fd0

00013048 <puts>:
   13048:	4b02      	ldr	r3, [pc, #8]	; (13054 <puts+0xc>)
   1304a:	4601      	mov	r1, r0
   1304c:	6818      	ldr	r0, [r3, #0]
   1304e:	f7ff bf8f 	b.w	12f70 <_puts_r>
   13052:	bf00      	nop
   13054:	20000548 	.word	0x20000548

00013058 <_sbrk_r>:
   13058:	b538      	push	{r3, r4, r5, lr}
   1305a:	4c07      	ldr	r4, [pc, #28]	; (13078 <_sbrk_r+0x20>)
   1305c:	2300      	movs	r3, #0
   1305e:	4605      	mov	r5, r0
   13060:	4608      	mov	r0, r1
   13062:	6023      	str	r3, [r4, #0]
   13064:	f7f8 fd48 	bl	baf8 <_sbrk>
   13068:	1c43      	adds	r3, r0, #1
   1306a:	d000      	beq.n	1306e <_sbrk_r+0x16>
   1306c:	bd38      	pop	{r3, r4, r5, pc}
   1306e:	6823      	ldr	r3, [r4, #0]
   13070:	2b00      	cmp	r3, #0
   13072:	d0fb      	beq.n	1306c <_sbrk_r+0x14>
   13074:	602b      	str	r3, [r5, #0]
   13076:	bd38      	pop	{r3, r4, r5, pc}
   13078:	20014e34 	.word	0x20014e34

0001307c <setbuf>:
   1307c:	2900      	cmp	r1, #0
   1307e:	bf0c      	ite	eq
   13080:	2202      	moveq	r2, #2
   13082:	2200      	movne	r2, #0
   13084:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13088:	f000 b800 	b.w	1308c <setvbuf>

0001308c <setvbuf>:
   1308c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13090:	4c58      	ldr	r4, [pc, #352]	; (131f4 <setvbuf+0x168>)
   13092:	6825      	ldr	r5, [r4, #0]
   13094:	b083      	sub	sp, #12
   13096:	4604      	mov	r4, r0
   13098:	460f      	mov	r7, r1
   1309a:	4690      	mov	r8, r2
   1309c:	461e      	mov	r6, r3
   1309e:	b115      	cbz	r5, 130a6 <setvbuf+0x1a>
   130a0:	69ab      	ldr	r3, [r5, #24]
   130a2:	2b00      	cmp	r3, #0
   130a4:	d062      	beq.n	1316c <setvbuf+0xe0>
   130a6:	4b54      	ldr	r3, [pc, #336]	; (131f8 <setvbuf+0x16c>)
   130a8:	429c      	cmp	r4, r3
   130aa:	d065      	beq.n	13178 <setvbuf+0xec>
   130ac:	4b53      	ldr	r3, [pc, #332]	; (131fc <setvbuf+0x170>)
   130ae:	429c      	cmp	r4, r3
   130b0:	d064      	beq.n	1317c <setvbuf+0xf0>
   130b2:	4b53      	ldr	r3, [pc, #332]	; (13200 <setvbuf+0x174>)
   130b4:	429c      	cmp	r4, r3
   130b6:	bf08      	it	eq
   130b8:	68ec      	ldreq	r4, [r5, #12]
   130ba:	f1b8 0f02 	cmp.w	r8, #2
   130be:	d006      	beq.n	130ce <setvbuf+0x42>
   130c0:	f1b8 0f01 	cmp.w	r8, #1
   130c4:	f200 8093 	bhi.w	131ee <setvbuf+0x162>
   130c8:	2e00      	cmp	r6, #0
   130ca:	f2c0 8090 	blt.w	131ee <setvbuf+0x162>
   130ce:	4621      	mov	r1, r4
   130d0:	4628      	mov	r0, r5
   130d2:	f000 fd79 	bl	13bc8 <_fflush_r>
   130d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   130d8:	b141      	cbz	r1, 130ec <setvbuf+0x60>
   130da:	f104 0344 	add.w	r3, r4, #68	; 0x44
   130de:	4299      	cmp	r1, r3
   130e0:	d002      	beq.n	130e8 <setvbuf+0x5c>
   130e2:	4628      	mov	r0, r5
   130e4:	f7ff fe56 	bl	12d94 <_free_r>
   130e8:	2300      	movs	r3, #0
   130ea:	6363      	str	r3, [r4, #52]	; 0x34
   130ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   130f0:	2200      	movs	r2, #0
   130f2:	61a2      	str	r2, [r4, #24]
   130f4:	6062      	str	r2, [r4, #4]
   130f6:	061a      	lsls	r2, r3, #24
   130f8:	d44f      	bmi.n	1319a <setvbuf+0x10e>
   130fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   130fe:	f023 0303 	bic.w	r3, r3, #3
   13102:	f1b8 0f02 	cmp.w	r8, #2
   13106:	81a3      	strh	r3, [r4, #12]
   13108:	d04e      	beq.n	131a8 <setvbuf+0x11c>
   1310a:	ab01      	add	r3, sp, #4
   1310c:	466a      	mov	r2, sp
   1310e:	4621      	mov	r1, r4
   13110:	4628      	mov	r0, r5
   13112:	f000 fef3 	bl	13efc <__swhatbuf_r>
   13116:	89a3      	ldrh	r3, [r4, #12]
   13118:	4318      	orrs	r0, r3
   1311a:	81a0      	strh	r0, [r4, #12]
   1311c:	2e00      	cmp	r6, #0
   1311e:	d12f      	bne.n	13180 <setvbuf+0xf4>
   13120:	9e00      	ldr	r6, [sp, #0]
   13122:	4630      	mov	r0, r6
   13124:	f7ff fd3c 	bl	12ba0 <malloc>
   13128:	4607      	mov	r7, r0
   1312a:	2800      	cmp	r0, #0
   1312c:	d04f      	beq.n	131ce <setvbuf+0x142>
   1312e:	89a3      	ldrh	r3, [r4, #12]
   13130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13134:	81a3      	strh	r3, [r4, #12]
   13136:	69ab      	ldr	r3, [r5, #24]
   13138:	b33b      	cbz	r3, 1318a <setvbuf+0xfe>
   1313a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1313e:	6027      	str	r7, [r4, #0]
   13140:	f1b8 0f01 	cmp.w	r8, #1
   13144:	bf04      	itt	eq
   13146:	f043 0301 	orreq.w	r3, r3, #1
   1314a:	81a3      	strheq	r3, [r4, #12]
   1314c:	b29b      	uxth	r3, r3
   1314e:	f013 0008 	ands.w	r0, r3, #8
   13152:	e9c4 7604 	strd	r7, r6, [r4, #16]
   13156:	d01c      	beq.n	13192 <setvbuf+0x106>
   13158:	f013 0001 	ands.w	r0, r3, #1
   1315c:	d033      	beq.n	131c6 <setvbuf+0x13a>
   1315e:	2000      	movs	r0, #0
   13160:	4276      	negs	r6, r6
   13162:	61a6      	str	r6, [r4, #24]
   13164:	60a0      	str	r0, [r4, #8]
   13166:	b003      	add	sp, #12
   13168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1316c:	4628      	mov	r0, r5
   1316e:	f000 fe55 	bl	13e1c <__sinit>
   13172:	4b21      	ldr	r3, [pc, #132]	; (131f8 <setvbuf+0x16c>)
   13174:	429c      	cmp	r4, r3
   13176:	d199      	bne.n	130ac <setvbuf+0x20>
   13178:	686c      	ldr	r4, [r5, #4]
   1317a:	e79e      	b.n	130ba <setvbuf+0x2e>
   1317c:	68ac      	ldr	r4, [r5, #8]
   1317e:	e79c      	b.n	130ba <setvbuf+0x2e>
   13180:	2f00      	cmp	r7, #0
   13182:	d0ce      	beq.n	13122 <setvbuf+0x96>
   13184:	69ab      	ldr	r3, [r5, #24]
   13186:	2b00      	cmp	r3, #0
   13188:	d1d7      	bne.n	1313a <setvbuf+0xae>
   1318a:	4628      	mov	r0, r5
   1318c:	f000 fe46 	bl	13e1c <__sinit>
   13190:	e7d3      	b.n	1313a <setvbuf+0xae>
   13192:	60a0      	str	r0, [r4, #8]
   13194:	b003      	add	sp, #12
   13196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1319a:	6921      	ldr	r1, [r4, #16]
   1319c:	4628      	mov	r0, r5
   1319e:	f7ff fdf9 	bl	12d94 <_free_r>
   131a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   131a6:	e7a8      	b.n	130fa <setvbuf+0x6e>
   131a8:	2000      	movs	r0, #0
   131aa:	f104 0247 	add.w	r2, r4, #71	; 0x47
   131ae:	f043 0302 	orr.w	r3, r3, #2
   131b2:	2500      	movs	r5, #0
   131b4:	2101      	movs	r1, #1
   131b6:	81a3      	strh	r3, [r4, #12]
   131b8:	60a5      	str	r5, [r4, #8]
   131ba:	6022      	str	r2, [r4, #0]
   131bc:	e9c4 2104 	strd	r2, r1, [r4, #16]
   131c0:	b003      	add	sp, #12
   131c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   131c6:	60a6      	str	r6, [r4, #8]
   131c8:	b003      	add	sp, #12
   131ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   131ce:	f8dd 9000 	ldr.w	r9, [sp]
   131d2:	45b1      	cmp	r9, r6
   131d4:	d006      	beq.n	131e4 <setvbuf+0x158>
   131d6:	4648      	mov	r0, r9
   131d8:	f7ff fce2 	bl	12ba0 <malloc>
   131dc:	4607      	mov	r7, r0
   131de:	b108      	cbz	r0, 131e4 <setvbuf+0x158>
   131e0:	464e      	mov	r6, r9
   131e2:	e7a4      	b.n	1312e <setvbuf+0xa2>
   131e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   131e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   131ec:	e7dd      	b.n	131aa <setvbuf+0x11e>
   131ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   131f2:	e7cf      	b.n	13194 <setvbuf+0x108>
   131f4:	20000548 	.word	0x20000548
   131f8:	00016010 	.word	0x00016010
   131fc:	00015ff0 	.word	0x00015ff0
   13200:	00015fd0 	.word	0x00015fd0

00013204 <_sniprintf_r>:
   13204:	b408      	push	{r3}
   13206:	b530      	push	{r4, r5, lr}
   13208:	2a00      	cmp	r2, #0
   1320a:	b09c      	sub	sp, #112	; 0x70
   1320c:	4604      	mov	r4, r0
   1320e:	db35      	blt.n	1327c <_sniprintf_r+0x78>
   13210:	f44f 7302 	mov.w	r3, #520	; 0x208
   13214:	9102      	str	r1, [sp, #8]
   13216:	9106      	str	r1, [sp, #24]
   13218:	f8ad 3014 	strh.w	r3, [sp, #20]
   1321c:	a920      	add	r1, sp, #128	; 0x80
   1321e:	d018      	beq.n	13252 <_sniprintf_r+0x4e>
   13220:	3a01      	subs	r2, #1
   13222:	460b      	mov	r3, r1
   13224:	9204      	str	r2, [sp, #16]
   13226:	9207      	str	r2, [sp, #28]
   13228:	9101      	str	r1, [sp, #4]
   1322a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1322c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   13230:	a902      	add	r1, sp, #8
   13232:	f8ad 5016 	strh.w	r5, [sp, #22]
   13236:	f000 ffb9 	bl	141ac <_svfiprintf_r>
   1323a:	1c42      	adds	r2, r0, #1
   1323c:	da01      	bge.n	13242 <_sniprintf_r+0x3e>
   1323e:	238b      	movs	r3, #139	; 0x8b
   13240:	6023      	str	r3, [r4, #0]
   13242:	9b02      	ldr	r3, [sp, #8]
   13244:	2200      	movs	r2, #0
   13246:	701a      	strb	r2, [r3, #0]
   13248:	b01c      	add	sp, #112	; 0x70
   1324a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1324e:	b001      	add	sp, #4
   13250:	4770      	bx	lr
   13252:	460b      	mov	r3, r1
   13254:	9204      	str	r2, [sp, #16]
   13256:	9207      	str	r2, [sp, #28]
   13258:	9101      	str	r1, [sp, #4]
   1325a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1325e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13260:	f8ad 5016 	strh.w	r5, [sp, #22]
   13264:	a902      	add	r1, sp, #8
   13266:	f000 ffa1 	bl	141ac <_svfiprintf_r>
   1326a:	1c43      	adds	r3, r0, #1
   1326c:	da01      	bge.n	13272 <_sniprintf_r+0x6e>
   1326e:	238b      	movs	r3, #139	; 0x8b
   13270:	6023      	str	r3, [r4, #0]
   13272:	b01c      	add	sp, #112	; 0x70
   13274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   13278:	b001      	add	sp, #4
   1327a:	4770      	bx	lr
   1327c:	228b      	movs	r2, #139	; 0x8b
   1327e:	6002      	str	r2, [r0, #0]
   13280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13284:	e7f5      	b.n	13272 <_sniprintf_r+0x6e>
   13286:	bf00      	nop

00013288 <sniprintf>:
   13288:	b40c      	push	{r2, r3}
   1328a:	b530      	push	{r4, r5, lr}
   1328c:	4b20      	ldr	r3, [pc, #128]	; (13310 <sniprintf+0x88>)
   1328e:	2900      	cmp	r1, #0
   13290:	b09d      	sub	sp, #116	; 0x74
   13292:	681c      	ldr	r4, [r3, #0]
   13294:	db37      	blt.n	13306 <sniprintf+0x7e>
   13296:	f44f 7302 	mov.w	r3, #520	; 0x208
   1329a:	9002      	str	r0, [sp, #8]
   1329c:	9006      	str	r0, [sp, #24]
   1329e:	f8ad 3014 	strh.w	r3, [sp, #20]
   132a2:	a821      	add	r0, sp, #132	; 0x84
   132a4:	d019      	beq.n	132da <sniprintf+0x52>
   132a6:	3901      	subs	r1, #1
   132a8:	4603      	mov	r3, r0
   132aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
   132ac:	9104      	str	r1, [sp, #16]
   132ae:	9107      	str	r1, [sp, #28]
   132b0:	9001      	str	r0, [sp, #4]
   132b2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   132b6:	a902      	add	r1, sp, #8
   132b8:	4620      	mov	r0, r4
   132ba:	f8ad 5016 	strh.w	r5, [sp, #22]
   132be:	f000 ff75 	bl	141ac <_svfiprintf_r>
   132c2:	1c42      	adds	r2, r0, #1
   132c4:	da01      	bge.n	132ca <sniprintf+0x42>
   132c6:	238b      	movs	r3, #139	; 0x8b
   132c8:	6023      	str	r3, [r4, #0]
   132ca:	9b02      	ldr	r3, [sp, #8]
   132cc:	2200      	movs	r2, #0
   132ce:	701a      	strb	r2, [r3, #0]
   132d0:	b01d      	add	sp, #116	; 0x74
   132d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   132d6:	b002      	add	sp, #8
   132d8:	4770      	bx	lr
   132da:	4603      	mov	r3, r0
   132dc:	9104      	str	r1, [sp, #16]
   132de:	9107      	str	r1, [sp, #28]
   132e0:	9001      	str	r0, [sp, #4]
   132e2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   132e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   132e8:	f8ad 5016 	strh.w	r5, [sp, #22]
   132ec:	a902      	add	r1, sp, #8
   132ee:	4620      	mov	r0, r4
   132f0:	f000 ff5c 	bl	141ac <_svfiprintf_r>
   132f4:	1c43      	adds	r3, r0, #1
   132f6:	da01      	bge.n	132fc <sniprintf+0x74>
   132f8:	238b      	movs	r3, #139	; 0x8b
   132fa:	6023      	str	r3, [r4, #0]
   132fc:	b01d      	add	sp, #116	; 0x74
   132fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   13302:	b002      	add	sp, #8
   13304:	4770      	bx	lr
   13306:	238b      	movs	r3, #139	; 0x8b
   13308:	6023      	str	r3, [r4, #0]
   1330a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1330e:	e7f5      	b.n	132fc <sniprintf+0x74>
   13310:	20000548 	.word	0x20000548

00013314 <_siprintf_r>:
   13314:	b40c      	push	{r2, r3}
   13316:	b570      	push	{r4, r5, r6, lr}
   13318:	b09c      	sub	sp, #112	; 0x70
   1331a:	ac20      	add	r4, sp, #128	; 0x80
   1331c:	4e0b      	ldr	r6, [pc, #44]	; (1334c <_siprintf_r+0x38>)
   1331e:	f854 2b04 	ldr.w	r2, [r4], #4
   13322:	9102      	str	r1, [sp, #8]
   13324:	4623      	mov	r3, r4
   13326:	9106      	str	r1, [sp, #24]
   13328:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1332c:	a902      	add	r1, sp, #8
   1332e:	9401      	str	r4, [sp, #4]
   13330:	9507      	str	r5, [sp, #28]
   13332:	e9cd 5604 	strd	r5, r6, [sp, #16]
   13336:	f000 ff39 	bl	141ac <_svfiprintf_r>
   1333a:	9b02      	ldr	r3, [sp, #8]
   1333c:	2200      	movs	r2, #0
   1333e:	701a      	strb	r2, [r3, #0]
   13340:	b01c      	add	sp, #112	; 0x70
   13342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13346:	b002      	add	sp, #8
   13348:	4770      	bx	lr
   1334a:	bf00      	nop
   1334c:	ffff0208 	.word	0xffff0208

00013350 <siprintf>:
   13350:	b40e      	push	{r1, r2, r3}
   13352:	b530      	push	{r4, r5, lr}
   13354:	b09c      	sub	sp, #112	; 0x70
   13356:	ab1f      	add	r3, sp, #124	; 0x7c
   13358:	4c0c      	ldr	r4, [pc, #48]	; (1338c <siprintf+0x3c>)
   1335a:	4d0d      	ldr	r5, [pc, #52]	; (13390 <siprintf+0x40>)
   1335c:	f853 2b04 	ldr.w	r2, [r3], #4
   13360:	9301      	str	r3, [sp, #4]
   13362:	4601      	mov	r1, r0
   13364:	9102      	str	r1, [sp, #8]
   13366:	9106      	str	r1, [sp, #24]
   13368:	6820      	ldr	r0, [r4, #0]
   1336a:	a902      	add	r1, sp, #8
   1336c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   13370:	9407      	str	r4, [sp, #28]
   13372:	e9cd 4504 	strd	r4, r5, [sp, #16]
   13376:	f000 ff19 	bl	141ac <_svfiprintf_r>
   1337a:	9b02      	ldr	r3, [sp, #8]
   1337c:	2200      	movs	r2, #0
   1337e:	701a      	strb	r2, [r3, #0]
   13380:	b01c      	add	sp, #112	; 0x70
   13382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   13386:	b003      	add	sp, #12
   13388:	4770      	bx	lr
   1338a:	bf00      	nop
   1338c:	20000548 	.word	0x20000548
   13390:	ffff0208 	.word	0xffff0208

00013394 <strchr>:
   13394:	b2c9      	uxtb	r1, r1
   13396:	f000 0303 	and.w	r3, r0, #3
   1339a:	2900      	cmp	r1, #0
   1339c:	d035      	beq.n	1340a <strchr+0x76>
   1339e:	b17b      	cbz	r3, 133c0 <strchr+0x2c>
   133a0:	7803      	ldrb	r3, [r0, #0]
   133a2:	2b00      	cmp	r3, #0
   133a4:	d057      	beq.n	13456 <strchr+0xc2>
   133a6:	4299      	cmp	r1, r3
   133a8:	d052      	beq.n	13450 <strchr+0xbc>
   133aa:	1c43      	adds	r3, r0, #1
   133ac:	e005      	b.n	133ba <strchr+0x26>
   133ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   133b2:	2a00      	cmp	r2, #0
   133b4:	d04d      	beq.n	13452 <strchr+0xbe>
   133b6:	428a      	cmp	r2, r1
   133b8:	d04a      	beq.n	13450 <strchr+0xbc>
   133ba:	079a      	lsls	r2, r3, #30
   133bc:	4618      	mov	r0, r3
   133be:	d1f6      	bne.n	133ae <strchr+0x1a>
   133c0:	b470      	push	{r4, r5, r6}
   133c2:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   133c6:	6804      	ldr	r4, [r0, #0]
   133c8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   133cc:	e001      	b.n	133d2 <strchr+0x3e>
   133ce:	f850 4f04 	ldr.w	r4, [r0, #4]!
   133d2:	ea86 0504 	eor.w	r5, r6, r4
   133d6:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   133da:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   133de:	ea22 0205 	bic.w	r2, r2, r5
   133e2:	ea23 0304 	bic.w	r3, r3, r4
   133e6:	4313      	orrs	r3, r2
   133e8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   133ec:	d0ef      	beq.n	133ce <strchr+0x3a>
   133ee:	7803      	ldrb	r3, [r0, #0]
   133f0:	b143      	cbz	r3, 13404 <strchr+0x70>
   133f2:	4299      	cmp	r1, r3
   133f4:	d102      	bne.n	133fc <strchr+0x68>
   133f6:	e006      	b.n	13406 <strchr+0x72>
   133f8:	428b      	cmp	r3, r1
   133fa:	d004      	beq.n	13406 <strchr+0x72>
   133fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   13400:	2b00      	cmp	r3, #0
   13402:	d1f9      	bne.n	133f8 <strchr+0x64>
   13404:	4618      	mov	r0, r3
   13406:	bc70      	pop	{r4, r5, r6}
   13408:	4770      	bx	lr
   1340a:	b14b      	cbz	r3, 13420 <strchr+0x8c>
   1340c:	7803      	ldrb	r3, [r0, #0]
   1340e:	b1fb      	cbz	r3, 13450 <strchr+0xbc>
   13410:	1c43      	adds	r3, r0, #1
   13412:	e002      	b.n	1341a <strchr+0x86>
   13414:	7802      	ldrb	r2, [r0, #0]
   13416:	3301      	adds	r3, #1
   13418:	b1d2      	cbz	r2, 13450 <strchr+0xbc>
   1341a:	0799      	lsls	r1, r3, #30
   1341c:	4618      	mov	r0, r3
   1341e:	d1f9      	bne.n	13414 <strchr+0x80>
   13420:	6802      	ldr	r2, [r0, #0]
   13422:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   13426:	ea23 0302 	bic.w	r3, r3, r2
   1342a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1342e:	d108      	bne.n	13442 <strchr+0xae>
   13430:	f850 2f04 	ldr.w	r2, [r0, #4]!
   13434:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   13438:	ea23 0302 	bic.w	r3, r3, r2
   1343c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   13440:	d0f6      	beq.n	13430 <strchr+0x9c>
   13442:	7803      	ldrb	r3, [r0, #0]
   13444:	b123      	cbz	r3, 13450 <strchr+0xbc>
   13446:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1344a:	2b00      	cmp	r3, #0
   1344c:	d1fb      	bne.n	13446 <strchr+0xb2>
   1344e:	4770      	bx	lr
   13450:	4770      	bx	lr
   13452:	4610      	mov	r0, r2
   13454:	4770      	bx	lr
   13456:	4618      	mov	r0, r3
   13458:	4770      	bx	lr
   1345a:	bf00      	nop
   1345c:	0000      	movs	r0, r0
   1345e:	0000      	movs	r0, r0
   13460:	eba2 0003 	sub.w	r0, r2, r3
   13464:	4770      	bx	lr
   13466:	bf00      	nop

00013468 <strcmp>:
   13468:	7802      	ldrb	r2, [r0, #0]
   1346a:	780b      	ldrb	r3, [r1, #0]
   1346c:	2a01      	cmp	r2, #1
   1346e:	bf28      	it	cs
   13470:	429a      	cmpcs	r2, r3
   13472:	d1f5      	bne.n	13460 <strchr+0xcc>
   13474:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   13478:	ea40 0401 	orr.w	r4, r0, r1
   1347c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   13480:	f06f 0c00 	mvn.w	ip, #0
   13484:	ea4f 7244 	mov.w	r2, r4, lsl #29
   13488:	b312      	cbz	r2, 134d0 <strcmp+0x68>
   1348a:	ea80 0401 	eor.w	r4, r0, r1
   1348e:	f014 0f07 	tst.w	r4, #7
   13492:	d16a      	bne.n	1356a <strcmp+0x102>
   13494:	f000 0407 	and.w	r4, r0, #7
   13498:	f020 0007 	bic.w	r0, r0, #7
   1349c:	f004 0503 	and.w	r5, r4, #3
   134a0:	f021 0107 	bic.w	r1, r1, #7
   134a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   134a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   134ac:	f014 0f04 	tst.w	r4, #4
   134b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   134b4:	fa0c f405 	lsl.w	r4, ip, r5
   134b8:	ea62 0204 	orn	r2, r2, r4
   134bc:	ea66 0604 	orn	r6, r6, r4
   134c0:	d00a      	beq.n	134d8 <strcmp+0x70>
   134c2:	ea63 0304 	orn	r3, r3, r4
   134c6:	4662      	mov	r2, ip
   134c8:	ea67 0704 	orn	r7, r7, r4
   134cc:	4666      	mov	r6, ip
   134ce:	e003      	b.n	134d8 <strcmp+0x70>
   134d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   134d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   134d8:	fa82 f54c 	uadd8	r5, r2, ip
   134dc:	ea82 0406 	eor.w	r4, r2, r6
   134e0:	faa4 f48c 	sel	r4, r4, ip
   134e4:	bb6c      	cbnz	r4, 13542 <strcmp+0xda>
   134e6:	fa83 f54c 	uadd8	r5, r3, ip
   134ea:	ea83 0507 	eor.w	r5, r3, r7
   134ee:	faa5 f58c 	sel	r5, r5, ip
   134f2:	b995      	cbnz	r5, 1351a <strcmp+0xb2>
   134f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   134f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   134fc:	fa82 f54c 	uadd8	r5, r2, ip
   13500:	ea82 0406 	eor.w	r4, r2, r6
   13504:	faa4 f48c 	sel	r4, r4, ip
   13508:	fa83 f54c 	uadd8	r5, r3, ip
   1350c:	ea83 0507 	eor.w	r5, r3, r7
   13510:	faa5 f58c 	sel	r5, r5, ip
   13514:	4325      	orrs	r5, r4
   13516:	d0db      	beq.n	134d0 <strcmp+0x68>
   13518:	b99c      	cbnz	r4, 13542 <strcmp+0xda>
   1351a:	ba2d      	rev	r5, r5
   1351c:	fab5 f485 	clz	r4, r5
   13520:	f024 0407 	bic.w	r4, r4, #7
   13524:	fa27 f104 	lsr.w	r1, r7, r4
   13528:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1352c:	fa23 f304 	lsr.w	r3, r3, r4
   13530:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   13534:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   13538:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1353c:	eba0 0001 	sub.w	r0, r0, r1
   13540:	4770      	bx	lr
   13542:	ba24      	rev	r4, r4
   13544:	fab4 f484 	clz	r4, r4
   13548:	f024 0407 	bic.w	r4, r4, #7
   1354c:	fa26 f104 	lsr.w	r1, r6, r4
   13550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   13554:	fa22 f204 	lsr.w	r2, r2, r4
   13558:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1355c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   13560:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   13564:	eba0 0001 	sub.w	r0, r0, r1
   13568:	4770      	bx	lr
   1356a:	f014 0f03 	tst.w	r4, #3
   1356e:	d13c      	bne.n	135ea <strcmp+0x182>
   13570:	f010 0403 	ands.w	r4, r0, #3
   13574:	d128      	bne.n	135c8 <strcmp+0x160>
   13576:	f850 2b08 	ldr.w	r2, [r0], #8
   1357a:	f851 3b08 	ldr.w	r3, [r1], #8
   1357e:	fa82 f54c 	uadd8	r5, r2, ip
   13582:	ea82 0503 	eor.w	r5, r2, r3
   13586:	faa5 f58c 	sel	r5, r5, ip
   1358a:	b95d      	cbnz	r5, 135a4 <strcmp+0x13c>
   1358c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   13590:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13594:	fa82 f54c 	uadd8	r5, r2, ip
   13598:	ea82 0503 	eor.w	r5, r2, r3
   1359c:	faa5 f58c 	sel	r5, r5, ip
   135a0:	2d00      	cmp	r5, #0
   135a2:	d0e8      	beq.n	13576 <strcmp+0x10e>
   135a4:	ba2d      	rev	r5, r5
   135a6:	fab5 f485 	clz	r4, r5
   135aa:	f024 0407 	bic.w	r4, r4, #7
   135ae:	fa23 f104 	lsr.w	r1, r3, r4
   135b2:	fa22 f204 	lsr.w	r2, r2, r4
   135b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   135ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   135be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   135c2:	eba0 0001 	sub.w	r0, r0, r1
   135c6:	4770      	bx	lr
   135c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   135cc:	f020 0003 	bic.w	r0, r0, #3
   135d0:	f850 2b08 	ldr.w	r2, [r0], #8
   135d4:	f021 0103 	bic.w	r1, r1, #3
   135d8:	f851 3b08 	ldr.w	r3, [r1], #8
   135dc:	fa0c f404 	lsl.w	r4, ip, r4
   135e0:	ea62 0204 	orn	r2, r2, r4
   135e4:	ea63 0304 	orn	r3, r3, r4
   135e8:	e7c9      	b.n	1357e <strcmp+0x116>
   135ea:	f010 0403 	ands.w	r4, r0, #3
   135ee:	d01a      	beq.n	13626 <strcmp+0x1be>
   135f0:	eba1 0104 	sub.w	r1, r1, r4
   135f4:	f020 0003 	bic.w	r0, r0, #3
   135f8:	07e4      	lsls	r4, r4, #31
   135fa:	f850 2b04 	ldr.w	r2, [r0], #4
   135fe:	d006      	beq.n	1360e <strcmp+0x1a6>
   13600:	d20f      	bcs.n	13622 <strcmp+0x1ba>
   13602:	788b      	ldrb	r3, [r1, #2]
   13604:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   13608:	1ae4      	subs	r4, r4, r3
   1360a:	d106      	bne.n	1361a <strcmp+0x1b2>
   1360c:	b12b      	cbz	r3, 1361a <strcmp+0x1b2>
   1360e:	78cb      	ldrb	r3, [r1, #3]
   13610:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   13614:	1ae4      	subs	r4, r4, r3
   13616:	d100      	bne.n	1361a <strcmp+0x1b2>
   13618:	b91b      	cbnz	r3, 13622 <strcmp+0x1ba>
   1361a:	4620      	mov	r0, r4
   1361c:	f85d 4b10 	ldr.w	r4, [sp], #16
   13620:	4770      	bx	lr
   13622:	f101 0104 	add.w	r1, r1, #4
   13626:	f850 2b04 	ldr.w	r2, [r0], #4
   1362a:	07cc      	lsls	r4, r1, #31
   1362c:	f021 0103 	bic.w	r1, r1, #3
   13630:	f851 3b04 	ldr.w	r3, [r1], #4
   13634:	d848      	bhi.n	136c8 <strcmp+0x260>
   13636:	d224      	bcs.n	13682 <strcmp+0x21a>
   13638:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1363c:	fa82 f54c 	uadd8	r5, r2, ip
   13640:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   13644:	faa5 f58c 	sel	r5, r5, ip
   13648:	d10a      	bne.n	13660 <strcmp+0x1f8>
   1364a:	b965      	cbnz	r5, 13666 <strcmp+0x1fe>
   1364c:	f851 3b04 	ldr.w	r3, [r1], #4
   13650:	ea84 0402 	eor.w	r4, r4, r2
   13654:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   13658:	d10e      	bne.n	13678 <strcmp+0x210>
   1365a:	f850 2b04 	ldr.w	r2, [r0], #4
   1365e:	e7eb      	b.n	13638 <strcmp+0x1d0>
   13660:	ea4f 2313 	mov.w	r3, r3, lsr #8
   13664:	e055      	b.n	13712 <strcmp+0x2aa>
   13666:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1366a:	d14d      	bne.n	13708 <strcmp+0x2a0>
   1366c:	7808      	ldrb	r0, [r1, #0]
   1366e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   13672:	f1c0 0000 	rsb	r0, r0, #0
   13676:	4770      	bx	lr
   13678:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1367c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   13680:	e047      	b.n	13712 <strcmp+0x2aa>
   13682:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   13686:	fa82 f54c 	uadd8	r5, r2, ip
   1368a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1368e:	faa5 f58c 	sel	r5, r5, ip
   13692:	d10a      	bne.n	136aa <strcmp+0x242>
   13694:	b965      	cbnz	r5, 136b0 <strcmp+0x248>
   13696:	f851 3b04 	ldr.w	r3, [r1], #4
   1369a:	ea84 0402 	eor.w	r4, r4, r2
   1369e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   136a2:	d10c      	bne.n	136be <strcmp+0x256>
   136a4:	f850 2b04 	ldr.w	r2, [r0], #4
   136a8:	e7eb      	b.n	13682 <strcmp+0x21a>
   136aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   136ae:	e030      	b.n	13712 <strcmp+0x2aa>
   136b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   136b4:	d128      	bne.n	13708 <strcmp+0x2a0>
   136b6:	880b      	ldrh	r3, [r1, #0]
   136b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   136bc:	e029      	b.n	13712 <strcmp+0x2aa>
   136be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   136c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   136c6:	e024      	b.n	13712 <strcmp+0x2aa>
   136c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   136cc:	fa82 f54c 	uadd8	r5, r2, ip
   136d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   136d4:	faa5 f58c 	sel	r5, r5, ip
   136d8:	d10a      	bne.n	136f0 <strcmp+0x288>
   136da:	b965      	cbnz	r5, 136f6 <strcmp+0x28e>
   136dc:	f851 3b04 	ldr.w	r3, [r1], #4
   136e0:	ea84 0402 	eor.w	r4, r4, r2
   136e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   136e8:	d109      	bne.n	136fe <strcmp+0x296>
   136ea:	f850 2b04 	ldr.w	r2, [r0], #4
   136ee:	e7eb      	b.n	136c8 <strcmp+0x260>
   136f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   136f4:	e00d      	b.n	13712 <strcmp+0x2aa>
   136f6:	f015 0fff 	tst.w	r5, #255	; 0xff
   136fa:	d105      	bne.n	13708 <strcmp+0x2a0>
   136fc:	680b      	ldr	r3, [r1, #0]
   136fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   13702:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   13706:	e004      	b.n	13712 <strcmp+0x2aa>
   13708:	f04f 0000 	mov.w	r0, #0
   1370c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   13710:	4770      	bx	lr
   13712:	ba12      	rev	r2, r2
   13714:	ba1b      	rev	r3, r3
   13716:	fa82 f44c 	uadd8	r4, r2, ip
   1371a:	ea82 0403 	eor.w	r4, r2, r3
   1371e:	faa4 f58c 	sel	r5, r4, ip
   13722:	fab5 f485 	clz	r4, r5
   13726:	fa02 f204 	lsl.w	r2, r2, r4
   1372a:	fa03 f304 	lsl.w	r3, r3, r4
   1372e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   13732:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   13736:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1373a:	4770      	bx	lr

0001373c <strcpy>:
   1373c:	ea80 0201 	eor.w	r2, r0, r1
   13740:	4684      	mov	ip, r0
   13742:	f012 0f03 	tst.w	r2, #3
   13746:	d14f      	bne.n	137e8 <strcpy+0xac>
   13748:	f011 0f03 	tst.w	r1, #3
   1374c:	d132      	bne.n	137b4 <strcpy+0x78>
   1374e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   13752:	f011 0f04 	tst.w	r1, #4
   13756:	f851 3b04 	ldr.w	r3, [r1], #4
   1375a:	d00b      	beq.n	13774 <strcpy+0x38>
   1375c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   13760:	439a      	bics	r2, r3
   13762:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   13766:	bf04      	itt	eq
   13768:	f84c 3b04 	streq.w	r3, [ip], #4
   1376c:	f851 3b04 	ldreq.w	r3, [r1], #4
   13770:	d116      	bne.n	137a0 <strcpy+0x64>
   13772:	bf00      	nop
   13774:	f851 4b04 	ldr.w	r4, [r1], #4
   13778:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1377c:	439a      	bics	r2, r3
   1377e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   13782:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   13786:	d10b      	bne.n	137a0 <strcpy+0x64>
   13788:	f84c 3b04 	str.w	r3, [ip], #4
   1378c:	43a2      	bics	r2, r4
   1378e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   13792:	bf04      	itt	eq
   13794:	f851 3b04 	ldreq.w	r3, [r1], #4
   13798:	f84c 4b04 	streq.w	r4, [ip], #4
   1379c:	d0ea      	beq.n	13774 <strcpy+0x38>
   1379e:	4623      	mov	r3, r4
   137a0:	f80c 3b01 	strb.w	r3, [ip], #1
   137a4:	f013 0fff 	tst.w	r3, #255	; 0xff
   137a8:	ea4f 2333 	mov.w	r3, r3, ror #8
   137ac:	d1f8      	bne.n	137a0 <strcpy+0x64>
   137ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   137b2:	4770      	bx	lr
   137b4:	f011 0f01 	tst.w	r1, #1
   137b8:	d006      	beq.n	137c8 <strcpy+0x8c>
   137ba:	f811 2b01 	ldrb.w	r2, [r1], #1
   137be:	f80c 2b01 	strb.w	r2, [ip], #1
   137c2:	2a00      	cmp	r2, #0
   137c4:	bf08      	it	eq
   137c6:	4770      	bxeq	lr
   137c8:	f011 0f02 	tst.w	r1, #2
   137cc:	d0bf      	beq.n	1374e <strcpy+0x12>
   137ce:	f831 2b02 	ldrh.w	r2, [r1], #2
   137d2:	f012 0fff 	tst.w	r2, #255	; 0xff
   137d6:	bf16      	itet	ne
   137d8:	f82c 2b02 	strhne.w	r2, [ip], #2
   137dc:	f88c 2000 	strbeq.w	r2, [ip]
   137e0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   137e4:	d1b3      	bne.n	1374e <strcpy+0x12>
   137e6:	4770      	bx	lr
   137e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   137ec:	f80c 2b01 	strb.w	r2, [ip], #1
   137f0:	2a00      	cmp	r2, #0
   137f2:	d1f9      	bne.n	137e8 <strcpy+0xac>
   137f4:	4770      	bx	lr
   137f6:	bf00      	nop
	...

00013800 <strlen>:
   13800:	f890 f000 	pld	[r0]
   13804:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   13808:	f020 0107 	bic.w	r1, r0, #7
   1380c:	f06f 0c00 	mvn.w	ip, #0
   13810:	f010 0407 	ands.w	r4, r0, #7
   13814:	f891 f020 	pld	[r1, #32]
   13818:	f040 8049 	bne.w	138ae <strlen+0xae>
   1381c:	f04f 0400 	mov.w	r4, #0
   13820:	f06f 0007 	mvn.w	r0, #7
   13824:	e9d1 2300 	ldrd	r2, r3, [r1]
   13828:	f891 f040 	pld	[r1, #64]	; 0x40
   1382c:	f100 0008 	add.w	r0, r0, #8
   13830:	fa82 f24c 	uadd8	r2, r2, ip
   13834:	faa4 f28c 	sel	r2, r4, ip
   13838:	fa83 f34c 	uadd8	r3, r3, ip
   1383c:	faa2 f38c 	sel	r3, r2, ip
   13840:	bb4b      	cbnz	r3, 13896 <strlen+0x96>
   13842:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   13846:	fa82 f24c 	uadd8	r2, r2, ip
   1384a:	f100 0008 	add.w	r0, r0, #8
   1384e:	faa4 f28c 	sel	r2, r4, ip
   13852:	fa83 f34c 	uadd8	r3, r3, ip
   13856:	faa2 f38c 	sel	r3, r2, ip
   1385a:	b9e3      	cbnz	r3, 13896 <strlen+0x96>
   1385c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   13860:	fa82 f24c 	uadd8	r2, r2, ip
   13864:	f100 0008 	add.w	r0, r0, #8
   13868:	faa4 f28c 	sel	r2, r4, ip
   1386c:	fa83 f34c 	uadd8	r3, r3, ip
   13870:	faa2 f38c 	sel	r3, r2, ip
   13874:	b97b      	cbnz	r3, 13896 <strlen+0x96>
   13876:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1387a:	f101 0120 	add.w	r1, r1, #32
   1387e:	fa82 f24c 	uadd8	r2, r2, ip
   13882:	f100 0008 	add.w	r0, r0, #8
   13886:	faa4 f28c 	sel	r2, r4, ip
   1388a:	fa83 f34c 	uadd8	r3, r3, ip
   1388e:	faa2 f38c 	sel	r3, r2, ip
   13892:	2b00      	cmp	r3, #0
   13894:	d0c6      	beq.n	13824 <strlen+0x24>
   13896:	2a00      	cmp	r2, #0
   13898:	bf04      	itt	eq
   1389a:	3004      	addeq	r0, #4
   1389c:	461a      	moveq	r2, r3
   1389e:	ba12      	rev	r2, r2
   138a0:	fab2 f282 	clz	r2, r2
   138a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   138a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   138ac:	4770      	bx	lr
   138ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   138b2:	f004 0503 	and.w	r5, r4, #3
   138b6:	f1c4 0000 	rsb	r0, r4, #0
   138ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   138be:	f014 0f04 	tst.w	r4, #4
   138c2:	f891 f040 	pld	[r1, #64]	; 0x40
   138c6:	fa0c f505 	lsl.w	r5, ip, r5
   138ca:	ea62 0205 	orn	r2, r2, r5
   138ce:	bf1c      	itt	ne
   138d0:	ea63 0305 	ornne	r3, r3, r5
   138d4:	4662      	movne	r2, ip
   138d6:	f04f 0400 	mov.w	r4, #0
   138da:	e7a9      	b.n	13830 <strlen+0x30>

000138dc <__swbuf_r>:
   138dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138de:	460d      	mov	r5, r1
   138e0:	4614      	mov	r4, r2
   138e2:	4606      	mov	r6, r0
   138e4:	b108      	cbz	r0, 138ea <__swbuf_r+0xe>
   138e6:	6983      	ldr	r3, [r0, #24]
   138e8:	b343      	cbz	r3, 1393c <__swbuf_r+0x60>
   138ea:	4b25      	ldr	r3, [pc, #148]	; (13980 <__swbuf_r+0xa4>)
   138ec:	429c      	cmp	r4, r3
   138ee:	d02a      	beq.n	13946 <__swbuf_r+0x6a>
   138f0:	4b24      	ldr	r3, [pc, #144]	; (13984 <__swbuf_r+0xa8>)
   138f2:	429c      	cmp	r4, r3
   138f4:	d029      	beq.n	1394a <__swbuf_r+0x6e>
   138f6:	4b24      	ldr	r3, [pc, #144]	; (13988 <__swbuf_r+0xac>)
   138f8:	429c      	cmp	r4, r3
   138fa:	bf08      	it	eq
   138fc:	68f4      	ldreq	r4, [r6, #12]
   138fe:	89a3      	ldrh	r3, [r4, #12]
   13900:	69a2      	ldr	r2, [r4, #24]
   13902:	60a2      	str	r2, [r4, #8]
   13904:	071a      	lsls	r2, r3, #28
   13906:	d522      	bpl.n	1394e <__swbuf_r+0x72>
   13908:	6923      	ldr	r3, [r4, #16]
   1390a:	b303      	cbz	r3, 1394e <__swbuf_r+0x72>
   1390c:	6822      	ldr	r2, [r4, #0]
   1390e:	6961      	ldr	r1, [r4, #20]
   13910:	1ad3      	subs	r3, r2, r3
   13912:	b2ed      	uxtb	r5, r5
   13914:	4299      	cmp	r1, r3
   13916:	462f      	mov	r7, r5
   13918:	dd29      	ble.n	1396e <__swbuf_r+0x92>
   1391a:	3301      	adds	r3, #1
   1391c:	68a1      	ldr	r1, [r4, #8]
   1391e:	1c50      	adds	r0, r2, #1
   13920:	3901      	subs	r1, #1
   13922:	60a1      	str	r1, [r4, #8]
   13924:	6020      	str	r0, [r4, #0]
   13926:	7015      	strb	r5, [r2, #0]
   13928:	6962      	ldr	r2, [r4, #20]
   1392a:	429a      	cmp	r2, r3
   1392c:	d016      	beq.n	1395c <__swbuf_r+0x80>
   1392e:	89a3      	ldrh	r3, [r4, #12]
   13930:	07db      	lsls	r3, r3, #31
   13932:	d501      	bpl.n	13938 <__swbuf_r+0x5c>
   13934:	2d0a      	cmp	r5, #10
   13936:	d011      	beq.n	1395c <__swbuf_r+0x80>
   13938:	4638      	mov	r0, r7
   1393a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1393c:	f000 fa6e 	bl	13e1c <__sinit>
   13940:	4b0f      	ldr	r3, [pc, #60]	; (13980 <__swbuf_r+0xa4>)
   13942:	429c      	cmp	r4, r3
   13944:	d1d4      	bne.n	138f0 <__swbuf_r+0x14>
   13946:	6874      	ldr	r4, [r6, #4]
   13948:	e7d9      	b.n	138fe <__swbuf_r+0x22>
   1394a:	68b4      	ldr	r4, [r6, #8]
   1394c:	e7d7      	b.n	138fe <__swbuf_r+0x22>
   1394e:	4621      	mov	r1, r4
   13950:	4630      	mov	r0, r6
   13952:	f000 f823 	bl	1399c <__swsetup_r>
   13956:	b938      	cbnz	r0, 13968 <__swbuf_r+0x8c>
   13958:	6923      	ldr	r3, [r4, #16]
   1395a:	e7d7      	b.n	1390c <__swbuf_r+0x30>
   1395c:	4621      	mov	r1, r4
   1395e:	4630      	mov	r0, r6
   13960:	f000 f932 	bl	13bc8 <_fflush_r>
   13964:	2800      	cmp	r0, #0
   13966:	d0e7      	beq.n	13938 <__swbuf_r+0x5c>
   13968:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1396c:	e7e4      	b.n	13938 <__swbuf_r+0x5c>
   1396e:	4621      	mov	r1, r4
   13970:	4630      	mov	r0, r6
   13972:	f000 f929 	bl	13bc8 <_fflush_r>
   13976:	2800      	cmp	r0, #0
   13978:	d1f6      	bne.n	13968 <__swbuf_r+0x8c>
   1397a:	6822      	ldr	r2, [r4, #0]
   1397c:	2301      	movs	r3, #1
   1397e:	e7cd      	b.n	1391c <__swbuf_r+0x40>
   13980:	00016010 	.word	0x00016010
   13984:	00015ff0 	.word	0x00015ff0
   13988:	00015fd0 	.word	0x00015fd0

0001398c <__swbuf>:
   1398c:	4b02      	ldr	r3, [pc, #8]	; (13998 <__swbuf+0xc>)
   1398e:	460a      	mov	r2, r1
   13990:	4601      	mov	r1, r0
   13992:	6818      	ldr	r0, [r3, #0]
   13994:	f7ff bfa2 	b.w	138dc <__swbuf_r>
   13998:	20000548 	.word	0x20000548

0001399c <__swsetup_r>:
   1399c:	4b3b      	ldr	r3, [pc, #236]	; (13a8c <__swsetup_r+0xf0>)
   1399e:	b570      	push	{r4, r5, r6, lr}
   139a0:	681d      	ldr	r5, [r3, #0]
   139a2:	4606      	mov	r6, r0
   139a4:	460c      	mov	r4, r1
   139a6:	b10d      	cbz	r5, 139ac <__swsetup_r+0x10>
   139a8:	69ab      	ldr	r3, [r5, #24]
   139aa:	b1db      	cbz	r3, 139e4 <__swsetup_r+0x48>
   139ac:	4b38      	ldr	r3, [pc, #224]	; (13a90 <__swsetup_r+0xf4>)
   139ae:	429c      	cmp	r4, r3
   139b0:	d01e      	beq.n	139f0 <__swsetup_r+0x54>
   139b2:	4b38      	ldr	r3, [pc, #224]	; (13a94 <__swsetup_r+0xf8>)
   139b4:	429c      	cmp	r4, r3
   139b6:	d04a      	beq.n	13a4e <__swsetup_r+0xb2>
   139b8:	4b37      	ldr	r3, [pc, #220]	; (13a98 <__swsetup_r+0xfc>)
   139ba:	429c      	cmp	r4, r3
   139bc:	bf08      	it	eq
   139be:	68ec      	ldreq	r4, [r5, #12]
   139c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   139c4:	b293      	uxth	r3, r2
   139c6:	0719      	lsls	r1, r3, #28
   139c8:	d518      	bpl.n	139fc <__swsetup_r+0x60>
   139ca:	6920      	ldr	r0, [r4, #16]
   139cc:	b308      	cbz	r0, 13a12 <__swsetup_r+0x76>
   139ce:	f013 0201 	ands.w	r2, r3, #1
   139d2:	d02c      	beq.n	13a2e <__swsetup_r+0x92>
   139d4:	6963      	ldr	r3, [r4, #20]
   139d6:	2200      	movs	r2, #0
   139d8:	425b      	negs	r3, r3
   139da:	61a3      	str	r3, [r4, #24]
   139dc:	60a2      	str	r2, [r4, #8]
   139de:	b360      	cbz	r0, 13a3a <__swsetup_r+0x9e>
   139e0:	2000      	movs	r0, #0
   139e2:	bd70      	pop	{r4, r5, r6, pc}
   139e4:	4628      	mov	r0, r5
   139e6:	f000 fa19 	bl	13e1c <__sinit>
   139ea:	4b29      	ldr	r3, [pc, #164]	; (13a90 <__swsetup_r+0xf4>)
   139ec:	429c      	cmp	r4, r3
   139ee:	d1e0      	bne.n	139b2 <__swsetup_r+0x16>
   139f0:	686c      	ldr	r4, [r5, #4]
   139f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   139f6:	b293      	uxth	r3, r2
   139f8:	0719      	lsls	r1, r3, #28
   139fa:	d4e6      	bmi.n	139ca <__swsetup_r+0x2e>
   139fc:	06dd      	lsls	r5, r3, #27
   139fe:	d53c      	bpl.n	13a7a <__swsetup_r+0xde>
   13a00:	0758      	lsls	r0, r3, #29
   13a02:	d426      	bmi.n	13a52 <__swsetup_r+0xb6>
   13a04:	6920      	ldr	r0, [r4, #16]
   13a06:	f042 0308 	orr.w	r3, r2, #8
   13a0a:	81a3      	strh	r3, [r4, #12]
   13a0c:	b29b      	uxth	r3, r3
   13a0e:	2800      	cmp	r0, #0
   13a10:	d1dd      	bne.n	139ce <__swsetup_r+0x32>
   13a12:	f403 7220 	and.w	r2, r3, #640	; 0x280
   13a16:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   13a1a:	d0d8      	beq.n	139ce <__swsetup_r+0x32>
   13a1c:	4630      	mov	r0, r6
   13a1e:	4621      	mov	r1, r4
   13a20:	f000 fa9a 	bl	13f58 <__smakebuf_r>
   13a24:	89a3      	ldrh	r3, [r4, #12]
   13a26:	6920      	ldr	r0, [r4, #16]
   13a28:	f013 0201 	ands.w	r2, r3, #1
   13a2c:	d1d2      	bne.n	139d4 <__swsetup_r+0x38>
   13a2e:	0799      	lsls	r1, r3, #30
   13a30:	bf58      	it	pl
   13a32:	6962      	ldrpl	r2, [r4, #20]
   13a34:	60a2      	str	r2, [r4, #8]
   13a36:	2800      	cmp	r0, #0
   13a38:	d1d2      	bne.n	139e0 <__swsetup_r+0x44>
   13a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a3e:	061a      	lsls	r2, r3, #24
   13a40:	d5cf      	bpl.n	139e2 <__swsetup_r+0x46>
   13a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13a46:	81a3      	strh	r3, [r4, #12]
   13a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13a4c:	bd70      	pop	{r4, r5, r6, pc}
   13a4e:	68ac      	ldr	r4, [r5, #8]
   13a50:	e7b6      	b.n	139c0 <__swsetup_r+0x24>
   13a52:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13a54:	b151      	cbz	r1, 13a6c <__swsetup_r+0xd0>
   13a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13a5a:	4299      	cmp	r1, r3
   13a5c:	d004      	beq.n	13a68 <__swsetup_r+0xcc>
   13a5e:	4630      	mov	r0, r6
   13a60:	f7ff f998 	bl	12d94 <_free_r>
   13a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13a68:	2300      	movs	r3, #0
   13a6a:	6363      	str	r3, [r4, #52]	; 0x34
   13a6c:	2300      	movs	r3, #0
   13a6e:	6920      	ldr	r0, [r4, #16]
   13a70:	6063      	str	r3, [r4, #4]
   13a72:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   13a76:	6020      	str	r0, [r4, #0]
   13a78:	e7c5      	b.n	13a06 <__swsetup_r+0x6a>
   13a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13a7e:	2309      	movs	r3, #9
   13a80:	6033      	str	r3, [r6, #0]
   13a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13a86:	81a2      	strh	r2, [r4, #12]
   13a88:	bd70      	pop	{r4, r5, r6, pc}
   13a8a:	bf00      	nop
   13a8c:	20000548 	.word	0x20000548
   13a90:	00016010 	.word	0x00016010
   13a94:	00015ff0 	.word	0x00015ff0
   13a98:	00015fd0 	.word	0x00015fd0

00013a9c <__sflush_r>:
   13a9c:	898b      	ldrh	r3, [r1, #12]
   13a9e:	071a      	lsls	r2, r3, #28
   13aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13aa4:	460c      	mov	r4, r1
   13aa6:	4680      	mov	r8, r0
   13aa8:	d441      	bmi.n	13b2e <__sflush_r+0x92>
   13aaa:	684a      	ldr	r2, [r1, #4]
   13aac:	2a00      	cmp	r2, #0
   13aae:	dd59      	ble.n	13b64 <__sflush_r+0xc8>
   13ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13ab2:	2e00      	cmp	r6, #0
   13ab4:	d053      	beq.n	13b5e <__sflush_r+0xc2>
   13ab6:	2200      	movs	r2, #0
   13ab8:	f8d8 5000 	ldr.w	r5, [r8]
   13abc:	6a21      	ldr	r1, [r4, #32]
   13abe:	f8c8 2000 	str.w	r2, [r8]
   13ac2:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   13ac6:	d151      	bne.n	13b6c <__sflush_r+0xd0>
   13ac8:	2301      	movs	r3, #1
   13aca:	4640      	mov	r0, r8
   13acc:	47b0      	blx	r6
   13ace:	1c43      	adds	r3, r0, #1
   13ad0:	d05f      	beq.n	13b92 <__sflush_r+0xf6>
   13ad2:	89a3      	ldrh	r3, [r4, #12]
   13ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13ad6:	6a21      	ldr	r1, [r4, #32]
   13ad8:	075f      	lsls	r7, r3, #29
   13ada:	d505      	bpl.n	13ae8 <__sflush_r+0x4c>
   13adc:	6862      	ldr	r2, [r4, #4]
   13ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13ae0:	1a80      	subs	r0, r0, r2
   13ae2:	b10b      	cbz	r3, 13ae8 <__sflush_r+0x4c>
   13ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13ae6:	1ac0      	subs	r0, r0, r3
   13ae8:	4602      	mov	r2, r0
   13aea:	2300      	movs	r3, #0
   13aec:	4640      	mov	r0, r8
   13aee:	47b0      	blx	r6
   13af0:	1c46      	adds	r6, r0, #1
   13af2:	d145      	bne.n	13b80 <__sflush_r+0xe4>
   13af4:	f8d8 3000 	ldr.w	r3, [r8]
   13af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13afc:	2b00      	cmp	r3, #0
   13afe:	d055      	beq.n	13bac <__sflush_r+0x110>
   13b00:	2b1d      	cmp	r3, #29
   13b02:	d001      	beq.n	13b08 <__sflush_r+0x6c>
   13b04:	2b16      	cmp	r3, #22
   13b06:	d15a      	bne.n	13bbe <__sflush_r+0x122>
   13b08:	6923      	ldr	r3, [r4, #16]
   13b0a:	2200      	movs	r2, #0
   13b0c:	e9c4 3200 	strd	r3, r2, [r4]
   13b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13b12:	f8c8 5000 	str.w	r5, [r8]
   13b16:	b311      	cbz	r1, 13b5e <__sflush_r+0xc2>
   13b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13b1c:	4299      	cmp	r1, r3
   13b1e:	d002      	beq.n	13b26 <__sflush_r+0x8a>
   13b20:	4640      	mov	r0, r8
   13b22:	f7ff f937 	bl	12d94 <_free_r>
   13b26:	2000      	movs	r0, #0
   13b28:	6360      	str	r0, [r4, #52]	; 0x34
   13b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b2e:	690e      	ldr	r6, [r1, #16]
   13b30:	b1ae      	cbz	r6, 13b5e <__sflush_r+0xc2>
   13b32:	680d      	ldr	r5, [r1, #0]
   13b34:	600e      	str	r6, [r1, #0]
   13b36:	0799      	lsls	r1, r3, #30
   13b38:	bf0c      	ite	eq
   13b3a:	6963      	ldreq	r3, [r4, #20]
   13b3c:	2300      	movne	r3, #0
   13b3e:	1bad      	subs	r5, r5, r6
   13b40:	60a3      	str	r3, [r4, #8]
   13b42:	e00a      	b.n	13b5a <__sflush_r+0xbe>
   13b44:	462b      	mov	r3, r5
   13b46:	4632      	mov	r2, r6
   13b48:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   13b4a:	6a21      	ldr	r1, [r4, #32]
   13b4c:	4640      	mov	r0, r8
   13b4e:	47b8      	blx	r7
   13b50:	2800      	cmp	r0, #0
   13b52:	eba5 0500 	sub.w	r5, r5, r0
   13b56:	4406      	add	r6, r0
   13b58:	dd0a      	ble.n	13b70 <__sflush_r+0xd4>
   13b5a:	2d00      	cmp	r5, #0
   13b5c:	dcf2      	bgt.n	13b44 <__sflush_r+0xa8>
   13b5e:	2000      	movs	r0, #0
   13b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b64:	6c0a      	ldr	r2, [r1, #64]	; 0x40
   13b66:	2a00      	cmp	r2, #0
   13b68:	dca2      	bgt.n	13ab0 <__sflush_r+0x14>
   13b6a:	e7f8      	b.n	13b5e <__sflush_r+0xc2>
   13b6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   13b6e:	e7b3      	b.n	13ad8 <__sflush_r+0x3c>
   13b70:	89a3      	ldrh	r3, [r4, #12]
   13b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b76:	81a3      	strh	r3, [r4, #12]
   13b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b80:	6922      	ldr	r2, [r4, #16]
   13b82:	89a3      	ldrh	r3, [r4, #12]
   13b84:	6022      	str	r2, [r4, #0]
   13b86:	2200      	movs	r2, #0
   13b88:	6062      	str	r2, [r4, #4]
   13b8a:	04da      	lsls	r2, r3, #19
   13b8c:	d5c0      	bpl.n	13b10 <__sflush_r+0x74>
   13b8e:	6560      	str	r0, [r4, #84]	; 0x54
   13b90:	e7be      	b.n	13b10 <__sflush_r+0x74>
   13b92:	f8d8 3000 	ldr.w	r3, [r8]
   13b96:	2b00      	cmp	r3, #0
   13b98:	d09b      	beq.n	13ad2 <__sflush_r+0x36>
   13b9a:	2b1d      	cmp	r3, #29
   13b9c:	d00c      	beq.n	13bb8 <__sflush_r+0x11c>
   13b9e:	2b16      	cmp	r3, #22
   13ba0:	d00a      	beq.n	13bb8 <__sflush_r+0x11c>
   13ba2:	89a3      	ldrh	r3, [r4, #12]
   13ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13ba8:	81a3      	strh	r3, [r4, #12]
   13baa:	e7d9      	b.n	13b60 <__sflush_r+0xc4>
   13bac:	6921      	ldr	r1, [r4, #16]
   13bae:	e9c4 1300 	strd	r1, r3, [r4]
   13bb2:	04d3      	lsls	r3, r2, #19
   13bb4:	d5ac      	bpl.n	13b10 <__sflush_r+0x74>
   13bb6:	e7ea      	b.n	13b8e <__sflush_r+0xf2>
   13bb8:	f8c8 5000 	str.w	r5, [r8]
   13bbc:	e7cf      	b.n	13b5e <__sflush_r+0xc2>
   13bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13bc2:	81a2      	strh	r2, [r4, #12]
   13bc4:	e7cc      	b.n	13b60 <__sflush_r+0xc4>
   13bc6:	bf00      	nop

00013bc8 <_fflush_r>:
   13bc8:	690b      	ldr	r3, [r1, #16]
   13bca:	b323      	cbz	r3, 13c16 <_fflush_r+0x4e>
   13bcc:	b510      	push	{r4, lr}
   13bce:	4604      	mov	r4, r0
   13bd0:	b082      	sub	sp, #8
   13bd2:	b108      	cbz	r0, 13bd8 <_fflush_r+0x10>
   13bd4:	6983      	ldr	r3, [r0, #24]
   13bd6:	b1bb      	cbz	r3, 13c08 <_fflush_r+0x40>
   13bd8:	4b10      	ldr	r3, [pc, #64]	; (13c1c <_fflush_r+0x54>)
   13bda:	4299      	cmp	r1, r3
   13bdc:	d012      	beq.n	13c04 <_fflush_r+0x3c>
   13bde:	4b10      	ldr	r3, [pc, #64]	; (13c20 <_fflush_r+0x58>)
   13be0:	4299      	cmp	r1, r3
   13be2:	d016      	beq.n	13c12 <_fflush_r+0x4a>
   13be4:	4b0f      	ldr	r3, [pc, #60]	; (13c24 <_fflush_r+0x5c>)
   13be6:	4299      	cmp	r1, r3
   13be8:	bf08      	it	eq
   13bea:	68e1      	ldreq	r1, [r4, #12]
   13bec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   13bf0:	b12b      	cbz	r3, 13bfe <_fflush_r+0x36>
   13bf2:	4620      	mov	r0, r4
   13bf4:	b002      	add	sp, #8
   13bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13bfa:	f7ff bf4f 	b.w	13a9c <__sflush_r>
   13bfe:	2000      	movs	r0, #0
   13c00:	b002      	add	sp, #8
   13c02:	bd10      	pop	{r4, pc}
   13c04:	6861      	ldr	r1, [r4, #4]
   13c06:	e7f1      	b.n	13bec <_fflush_r+0x24>
   13c08:	9101      	str	r1, [sp, #4]
   13c0a:	f000 f907 	bl	13e1c <__sinit>
   13c0e:	9901      	ldr	r1, [sp, #4]
   13c10:	e7e2      	b.n	13bd8 <_fflush_r+0x10>
   13c12:	68a1      	ldr	r1, [r4, #8]
   13c14:	e7ea      	b.n	13bec <_fflush_r+0x24>
   13c16:	2000      	movs	r0, #0
   13c18:	4770      	bx	lr
   13c1a:	bf00      	nop
   13c1c:	00016010 	.word	0x00016010
   13c20:	00015ff0 	.word	0x00015ff0
   13c24:	00015fd0 	.word	0x00015fd0

00013c28 <fflush>:
   13c28:	b120      	cbz	r0, 13c34 <fflush+0xc>
   13c2a:	4b05      	ldr	r3, [pc, #20]	; (13c40 <fflush+0x18>)
   13c2c:	4601      	mov	r1, r0
   13c2e:	6818      	ldr	r0, [r3, #0]
   13c30:	f7ff bfca 	b.w	13bc8 <_fflush_r>
   13c34:	4b03      	ldr	r3, [pc, #12]	; (13c44 <fflush+0x1c>)
   13c36:	4904      	ldr	r1, [pc, #16]	; (13c48 <fflush+0x20>)
   13c38:	6818      	ldr	r0, [r3, #0]
   13c3a:	f000 b935 	b.w	13ea8 <_fwalk_reent>
   13c3e:	bf00      	nop
   13c40:	20000548 	.word	0x20000548
   13c44:	00015fcc 	.word	0x00015fcc
   13c48:	00013bc9 	.word	0x00013bc9

00013c4c <__fp_lock>:
   13c4c:	2000      	movs	r0, #0
   13c4e:	4770      	bx	lr

00013c50 <_cleanup_r>:
   13c50:	4901      	ldr	r1, [pc, #4]	; (13c58 <_cleanup_r+0x8>)
   13c52:	f000 b929 	b.w	13ea8 <_fwalk_reent>
   13c56:	bf00      	nop
   13c58:	00013bc9 	.word	0x00013bc9

00013c5c <__fp_unlock>:
   13c5c:	2000      	movs	r0, #0
   13c5e:	4770      	bx	lr

00013c60 <__sfmoreglue>:
   13c60:	b570      	push	{r4, r5, r6, lr}
   13c62:	1e4a      	subs	r2, r1, #1
   13c64:	2568      	movs	r5, #104	; 0x68
   13c66:	fb05 f502 	mul.w	r5, r5, r2
   13c6a:	460e      	mov	r6, r1
   13c6c:	f105 0174 	add.w	r1, r5, #116	; 0x74
   13c70:	f7ff f8e6 	bl	12e40 <_malloc_r>
   13c74:	4604      	mov	r4, r0
   13c76:	b140      	cbz	r0, 13c8a <__sfmoreglue+0x2a>
   13c78:	2100      	movs	r1, #0
   13c7a:	300c      	adds	r0, #12
   13c7c:	6066      	str	r6, [r4, #4]
   13c7e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   13c82:	6021      	str	r1, [r4, #0]
   13c84:	60a0      	str	r0, [r4, #8]
   13c86:	f7ff f835 	bl	12cf4 <memset>
   13c8a:	4620      	mov	r0, r4
   13c8c:	bd70      	pop	{r4, r5, r6, pc}
   13c8e:	bf00      	nop

00013c90 <__sfp>:
   13c90:	4b1e      	ldr	r3, [pc, #120]	; (13d0c <__sfp+0x7c>)
   13c92:	b570      	push	{r4, r5, r6, lr}
   13c94:	681d      	ldr	r5, [r3, #0]
   13c96:	69ab      	ldr	r3, [r5, #24]
   13c98:	4606      	mov	r6, r0
   13c9a:	b343      	cbz	r3, 13cee <__sfp+0x5e>
   13c9c:	3548      	adds	r5, #72	; 0x48
   13c9e:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
   13ca2:	3b01      	subs	r3, #1
   13ca4:	d505      	bpl.n	13cb2 <__sfp+0x22>
   13ca6:	e01e      	b.n	13ce6 <__sfp+0x56>
   13ca8:	3b01      	subs	r3, #1
   13caa:	1c5a      	adds	r2, r3, #1
   13cac:	f104 0468 	add.w	r4, r4, #104	; 0x68
   13cb0:	d019      	beq.n	13ce6 <__sfp+0x56>
   13cb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13cb6:	2a00      	cmp	r2, #0
   13cb8:	d1f6      	bne.n	13ca8 <__sfp+0x18>
   13cba:	2500      	movs	r5, #0
   13cbc:	4b14      	ldr	r3, [pc, #80]	; (13d10 <__sfp+0x80>)
   13cbe:	6665      	str	r5, [r4, #100]	; 0x64
   13cc0:	e9c4 5500 	strd	r5, r5, [r4]
   13cc4:	60a5      	str	r5, [r4, #8]
   13cc6:	e9c4 5504 	strd	r5, r5, [r4, #16]
   13cca:	61a5      	str	r5, [r4, #24]
   13ccc:	4629      	mov	r1, r5
   13cce:	60e3      	str	r3, [r4, #12]
   13cd0:	2208      	movs	r2, #8
   13cd2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   13cd6:	f7ff f80d 	bl	12cf4 <memset>
   13cda:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   13cde:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   13ce2:	4620      	mov	r0, r4
   13ce4:	bd70      	pop	{r4, r5, r6, pc}
   13ce6:	682c      	ldr	r4, [r5, #0]
   13ce8:	b12c      	cbz	r4, 13cf6 <__sfp+0x66>
   13cea:	4625      	mov	r5, r4
   13cec:	e7d7      	b.n	13c9e <__sfp+0xe>
   13cee:	4628      	mov	r0, r5
   13cf0:	f000 f810 	bl	13d14 <__sinit.part.0>
   13cf4:	e7d2      	b.n	13c9c <__sfp+0xc>
   13cf6:	2104      	movs	r1, #4
   13cf8:	4630      	mov	r0, r6
   13cfa:	f7ff ffb1 	bl	13c60 <__sfmoreglue>
   13cfe:	4604      	mov	r4, r0
   13d00:	6028      	str	r0, [r5, #0]
   13d02:	2800      	cmp	r0, #0
   13d04:	d1f1      	bne.n	13cea <__sfp+0x5a>
   13d06:	230c      	movs	r3, #12
   13d08:	6033      	str	r3, [r6, #0]
   13d0a:	e7ea      	b.n	13ce2 <__sfp+0x52>
   13d0c:	00015fcc 	.word	0x00015fcc
   13d10:	ffff0001 	.word	0xffff0001

00013d14 <__sinit.part.0>:
   13d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d18:	4b33      	ldr	r3, [pc, #204]	; (13de8 <__sinit.part.0+0xd4>)
   13d1a:	4934      	ldr	r1, [pc, #208]	; (13dec <__sinit.part.0+0xd8>)
   13d1c:	681a      	ldr	r2, [r3, #0]
   13d1e:	6281      	str	r1, [r0, #40]	; 0x28
   13d20:	4290      	cmp	r0, r2
   13d22:	f04f 0300 	mov.w	r3, #0
   13d26:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   13d2a:	6503      	str	r3, [r0, #80]	; 0x50
   13d2c:	bf04      	itt	eq
   13d2e:	2301      	moveq	r3, #1
   13d30:	6183      	streq	r3, [r0, #24]
   13d32:	4605      	mov	r5, r0
   13d34:	f7ff ffac 	bl	13c90 <__sfp>
   13d38:	6068      	str	r0, [r5, #4]
   13d3a:	4628      	mov	r0, r5
   13d3c:	f7ff ffa8 	bl	13c90 <__sfp>
   13d40:	60a8      	str	r0, [r5, #8]
   13d42:	4628      	mov	r0, r5
   13d44:	f7ff ffa4 	bl	13c90 <__sfp>
   13d48:	686e      	ldr	r6, [r5, #4]
   13d4a:	60e8      	str	r0, [r5, #12]
   13d4c:	2400      	movs	r4, #0
   13d4e:	2304      	movs	r3, #4
   13d50:	60f3      	str	r3, [r6, #12]
   13d52:	6674      	str	r4, [r6, #100]	; 0x64
   13d54:	e9c6 4400 	strd	r4, r4, [r6]
   13d58:	60b4      	str	r4, [r6, #8]
   13d5a:	e9c6 4404 	strd	r4, r4, [r6, #16]
   13d5e:	61b4      	str	r4, [r6, #24]
   13d60:	4621      	mov	r1, r4
   13d62:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   13d66:	2208      	movs	r2, #8
   13d68:	f7fe ffc4 	bl	12cf4 <memset>
   13d6c:	f8df b088 	ldr.w	fp, [pc, #136]	; 13df8 <__sinit.part.0+0xe4>
   13d70:	68af      	ldr	r7, [r5, #8]
   13d72:	f8df a088 	ldr.w	sl, [pc, #136]	; 13dfc <__sinit.part.0+0xe8>
   13d76:	f8df 9088 	ldr.w	r9, [pc, #136]	; 13e00 <__sinit.part.0+0xec>
   13d7a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 13e04 <__sinit.part.0+0xf0>
   13d7e:	4b1c      	ldr	r3, [pc, #112]	; (13df0 <__sinit.part.0+0xdc>)
   13d80:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
   13d84:	e9c6 6b08 	strd	r6, fp, [r6, #32]
   13d88:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
   13d8c:	4621      	mov	r1, r4
   13d8e:	60fb      	str	r3, [r7, #12]
   13d90:	2208      	movs	r2, #8
   13d92:	667c      	str	r4, [r7, #100]	; 0x64
   13d94:	e9c7 4400 	strd	r4, r4, [r7]
   13d98:	60bc      	str	r4, [r7, #8]
   13d9a:	e9c7 4404 	strd	r4, r4, [r7, #16]
   13d9e:	61bc      	str	r4, [r7, #24]
   13da0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   13da4:	f7fe ffa6 	bl	12cf4 <memset>
   13da8:	68ee      	ldr	r6, [r5, #12]
   13daa:	4b12      	ldr	r3, [pc, #72]	; (13df4 <__sinit.part.0+0xe0>)
   13dac:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
   13db0:	e9c7 7b08 	strd	r7, fp, [r7, #32]
   13db4:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
   13db8:	4621      	mov	r1, r4
   13dba:	60f3      	str	r3, [r6, #12]
   13dbc:	6674      	str	r4, [r6, #100]	; 0x64
   13dbe:	e9c6 4400 	strd	r4, r4, [r6]
   13dc2:	60b4      	str	r4, [r6, #8]
   13dc4:	e9c6 4404 	strd	r4, r4, [r6, #16]
   13dc8:	61b4      	str	r4, [r6, #24]
   13dca:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   13dce:	2208      	movs	r2, #8
   13dd0:	f7fe ff90 	bl	12cf4 <memset>
   13dd4:	2301      	movs	r3, #1
   13dd6:	e9c6 6b08 	strd	r6, fp, [r6, #32]
   13dda:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
   13dde:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
   13de2:	61ab      	str	r3, [r5, #24]
   13de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de8:	00015fcc 	.word	0x00015fcc
   13dec:	00013c51 	.word	0x00013c51
   13df0:	00010009 	.word	0x00010009
   13df4:	00020012 	.word	0x00020012
   13df8:	00014b45 	.word	0x00014b45
   13dfc:	00014b6d 	.word	0x00014b6d
   13e00:	00014bad 	.word	0x00014bad
   13e04:	00014bcd 	.word	0x00014bcd

00013e08 <_cleanup>:
   13e08:	4b02      	ldr	r3, [pc, #8]	; (13e14 <_cleanup+0xc>)
   13e0a:	4903      	ldr	r1, [pc, #12]	; (13e18 <_cleanup+0x10>)
   13e0c:	6818      	ldr	r0, [r3, #0]
   13e0e:	f000 b84b 	b.w	13ea8 <_fwalk_reent>
   13e12:	bf00      	nop
   13e14:	00015fcc 	.word	0x00015fcc
   13e18:	00013bc9 	.word	0x00013bc9

00013e1c <__sinit>:
   13e1c:	6983      	ldr	r3, [r0, #24]
   13e1e:	b903      	cbnz	r3, 13e22 <__sinit+0x6>
   13e20:	e778      	b.n	13d14 <__sinit.part.0>
   13e22:	4770      	bx	lr

00013e24 <__sfp_lock_acquire>:
   13e24:	4770      	bx	lr
   13e26:	bf00      	nop

00013e28 <__sfp_lock_release>:
   13e28:	4770      	bx	lr
   13e2a:	bf00      	nop

00013e2c <__sinit_lock_acquire>:
   13e2c:	4770      	bx	lr
   13e2e:	bf00      	nop

00013e30 <__sinit_lock_release>:
   13e30:	4770      	bx	lr
   13e32:	bf00      	nop

00013e34 <__fp_lock_all>:
   13e34:	4b02      	ldr	r3, [pc, #8]	; (13e40 <__fp_lock_all+0xc>)
   13e36:	4903      	ldr	r1, [pc, #12]	; (13e44 <__fp_lock_all+0x10>)
   13e38:	6818      	ldr	r0, [r3, #0]
   13e3a:	f000 b80f 	b.w	13e5c <_fwalk>
   13e3e:	bf00      	nop
   13e40:	20000548 	.word	0x20000548
   13e44:	00013c4d 	.word	0x00013c4d

00013e48 <__fp_unlock_all>:
   13e48:	4b02      	ldr	r3, [pc, #8]	; (13e54 <__fp_unlock_all+0xc>)
   13e4a:	4903      	ldr	r1, [pc, #12]	; (13e58 <__fp_unlock_all+0x10>)
   13e4c:	6818      	ldr	r0, [r3, #0]
   13e4e:	f000 b805 	b.w	13e5c <_fwalk>
   13e52:	bf00      	nop
   13e54:	20000548 	.word	0x20000548
   13e58:	00013c5d 	.word	0x00013c5d

00013e5c <_fwalk>:
   13e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e60:	f110 0748 	adds.w	r7, r0, #72	; 0x48
   13e64:	d01b      	beq.n	13e9e <_fwalk+0x42>
   13e66:	4688      	mov	r8, r1
   13e68:	2600      	movs	r6, #0
   13e6a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   13e6e:	3d01      	subs	r5, #1
   13e70:	d40f      	bmi.n	13e92 <_fwalk+0x36>
   13e72:	89a3      	ldrh	r3, [r4, #12]
   13e74:	2b01      	cmp	r3, #1
   13e76:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   13e7a:	d906      	bls.n	13e8a <_fwalk+0x2e>
   13e7c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   13e80:	3301      	adds	r3, #1
   13e82:	4620      	mov	r0, r4
   13e84:	d001      	beq.n	13e8a <_fwalk+0x2e>
   13e86:	47c0      	blx	r8
   13e88:	4306      	orrs	r6, r0
   13e8a:	1c6b      	adds	r3, r5, #1
   13e8c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   13e90:	d1ef      	bne.n	13e72 <_fwalk+0x16>
   13e92:	683f      	ldr	r7, [r7, #0]
   13e94:	2f00      	cmp	r7, #0
   13e96:	d1e8      	bne.n	13e6a <_fwalk+0xe>
   13e98:	4630      	mov	r0, r6
   13e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e9e:	463e      	mov	r6, r7
   13ea0:	4630      	mov	r0, r6
   13ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ea6:	bf00      	nop

00013ea8 <_fwalk_reent>:
   13ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13eac:	f110 0748 	adds.w	r7, r0, #72	; 0x48
   13eb0:	d01f      	beq.n	13ef2 <_fwalk_reent+0x4a>
   13eb2:	4688      	mov	r8, r1
   13eb4:	4606      	mov	r6, r0
   13eb6:	f04f 0900 	mov.w	r9, #0
   13eba:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   13ebe:	3d01      	subs	r5, #1
   13ec0:	d411      	bmi.n	13ee6 <_fwalk_reent+0x3e>
   13ec2:	89a3      	ldrh	r3, [r4, #12]
   13ec4:	2b01      	cmp	r3, #1
   13ec6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   13eca:	d908      	bls.n	13ede <_fwalk_reent+0x36>
   13ecc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   13ed0:	3301      	adds	r3, #1
   13ed2:	4621      	mov	r1, r4
   13ed4:	4630      	mov	r0, r6
   13ed6:	d002      	beq.n	13ede <_fwalk_reent+0x36>
   13ed8:	47c0      	blx	r8
   13eda:	ea49 0900 	orr.w	r9, r9, r0
   13ede:	1c6b      	adds	r3, r5, #1
   13ee0:	f104 0468 	add.w	r4, r4, #104	; 0x68
   13ee4:	d1ed      	bne.n	13ec2 <_fwalk_reent+0x1a>
   13ee6:	683f      	ldr	r7, [r7, #0]
   13ee8:	2f00      	cmp	r7, #0
   13eea:	d1e6      	bne.n	13eba <_fwalk_reent+0x12>
   13eec:	4648      	mov	r0, r9
   13eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13ef2:	46b9      	mov	r9, r7
   13ef4:	4648      	mov	r0, r9
   13ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13efa:	bf00      	nop

00013efc <__swhatbuf_r>:
   13efc:	b570      	push	{r4, r5, r6, lr}
   13efe:	460c      	mov	r4, r1
   13f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   13f04:	2900      	cmp	r1, #0
   13f06:	b096      	sub	sp, #88	; 0x58
   13f08:	4616      	mov	r6, r2
   13f0a:	461d      	mov	r5, r3
   13f0c:	db13      	blt.n	13f36 <__swhatbuf_r+0x3a>
   13f0e:	466a      	mov	r2, sp
   13f10:	f000 fe88 	bl	14c24 <_fstat_r>
   13f14:	2800      	cmp	r0, #0
   13f16:	db0e      	blt.n	13f36 <__swhatbuf_r+0x3a>
   13f18:	9a01      	ldr	r2, [sp, #4]
   13f1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   13f1e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   13f22:	fab2 f282 	clz	r2, r2
   13f26:	0952      	lsrs	r2, r2, #5
   13f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13f2c:	2000      	movs	r0, #0
   13f2e:	602a      	str	r2, [r5, #0]
   13f30:	6033      	str	r3, [r6, #0]
   13f32:	b016      	add	sp, #88	; 0x58
   13f34:	bd70      	pop	{r4, r5, r6, pc}
   13f36:	89a3      	ldrh	r3, [r4, #12]
   13f38:	2200      	movs	r2, #0
   13f3a:	061b      	lsls	r3, r3, #24
   13f3c:	602a      	str	r2, [r5, #0]
   13f3e:	d504      	bpl.n	13f4a <__swhatbuf_r+0x4e>
   13f40:	2340      	movs	r3, #64	; 0x40
   13f42:	2000      	movs	r0, #0
   13f44:	6033      	str	r3, [r6, #0]
   13f46:	b016      	add	sp, #88	; 0x58
   13f48:	bd70      	pop	{r4, r5, r6, pc}
   13f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   13f4e:	2000      	movs	r0, #0
   13f50:	6033      	str	r3, [r6, #0]
   13f52:	b016      	add	sp, #88	; 0x58
   13f54:	bd70      	pop	{r4, r5, r6, pc}
   13f56:	bf00      	nop

00013f58 <__smakebuf_r>:
   13f58:	898a      	ldrh	r2, [r1, #12]
   13f5a:	0792      	lsls	r2, r2, #30
   13f5c:	460b      	mov	r3, r1
   13f5e:	d506      	bpl.n	13f6e <__smakebuf_r+0x16>
   13f60:	f101 0247 	add.w	r2, r1, #71	; 0x47
   13f64:	2101      	movs	r1, #1
   13f66:	601a      	str	r2, [r3, #0]
   13f68:	e9c3 2104 	strd	r2, r1, [r3, #16]
   13f6c:	4770      	bx	lr
   13f6e:	b570      	push	{r4, r5, r6, lr}
   13f70:	b082      	sub	sp, #8
   13f72:	ab01      	add	r3, sp, #4
   13f74:	466a      	mov	r2, sp
   13f76:	460c      	mov	r4, r1
   13f78:	4606      	mov	r6, r0
   13f7a:	f7ff ffbf 	bl	13efc <__swhatbuf_r>
   13f7e:	9900      	ldr	r1, [sp, #0]
   13f80:	4605      	mov	r5, r0
   13f82:	4630      	mov	r0, r6
   13f84:	f7fe ff5c 	bl	12e40 <_malloc_r>
   13f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f8c:	b170      	cbz	r0, 13fac <__smakebuf_r+0x54>
   13f8e:	4916      	ldr	r1, [pc, #88]	; (13fe8 <__smakebuf_r+0x90>)
   13f90:	62b1      	str	r1, [r6, #40]	; 0x28
   13f92:	9a01      	ldr	r2, [sp, #4]
   13f94:	9900      	ldr	r1, [sp, #0]
   13f96:	6020      	str	r0, [r4, #0]
   13f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f9c:	81a3      	strh	r3, [r4, #12]
   13f9e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   13fa2:	b98a      	cbnz	r2, 13fc8 <__smakebuf_r+0x70>
   13fa4:	432b      	orrs	r3, r5
   13fa6:	81a3      	strh	r3, [r4, #12]
   13fa8:	b002      	add	sp, #8
   13faa:	bd70      	pop	{r4, r5, r6, pc}
   13fac:	059a      	lsls	r2, r3, #22
   13fae:	d4fb      	bmi.n	13fa8 <__smakebuf_r+0x50>
   13fb0:	f023 0303 	bic.w	r3, r3, #3
   13fb4:	f104 0247 	add.w	r2, r4, #71	; 0x47
   13fb8:	f043 0302 	orr.w	r3, r3, #2
   13fbc:	2101      	movs	r1, #1
   13fbe:	81a3      	strh	r3, [r4, #12]
   13fc0:	6022      	str	r2, [r4, #0]
   13fc2:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13fc6:	e7ef      	b.n	13fa8 <__smakebuf_r+0x50>
   13fc8:	4630      	mov	r0, r6
   13fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13fce:	f000 ffc1 	bl	14f54 <_isatty_r>
   13fd2:	b910      	cbnz	r0, 13fda <__smakebuf_r+0x82>
   13fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13fd8:	e7e4      	b.n	13fa4 <__smakebuf_r+0x4c>
   13fda:	89a3      	ldrh	r3, [r4, #12]
   13fdc:	f023 0303 	bic.w	r3, r3, #3
   13fe0:	f043 0301 	orr.w	r3, r3, #1
   13fe4:	b21b      	sxth	r3, r3
   13fe6:	e7dd      	b.n	13fa4 <__smakebuf_r+0x4c>
   13fe8:	00013c51 	.word	0x00013c51

00013fec <__malloc_lock>:
   13fec:	4770      	bx	lr
   13fee:	bf00      	nop

00013ff0 <__malloc_unlock>:
   13ff0:	4770      	bx	lr
   13ff2:	bf00      	nop

00013ff4 <__ssputs_r>:
   13ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ff8:	688e      	ldr	r6, [r1, #8]
   13ffa:	461d      	mov	r5, r3
   13ffc:	42ae      	cmp	r6, r5
   13ffe:	460c      	mov	r4, r1
   14000:	680b      	ldr	r3, [r1, #0]
   14002:	4617      	mov	r7, r2
   14004:	d836      	bhi.n	14074 <__ssputs_r+0x80>
   14006:	4680      	mov	r8, r0
   14008:	8988      	ldrh	r0, [r1, #12]
   1400a:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1400e:	d10e      	bne.n	1402e <__ssputs_r+0x3a>
   14010:	4635      	mov	r5, r6
   14012:	4618      	mov	r0, r3
   14014:	462a      	mov	r2, r5
   14016:	4639      	mov	r1, r7
   14018:	f001 f81a 	bl	15050 <memmove>
   1401c:	68a2      	ldr	r2, [r4, #8]
   1401e:	6823      	ldr	r3, [r4, #0]
   14020:	1b96      	subs	r6, r2, r6
   14022:	442b      	add	r3, r5
   14024:	60a6      	str	r6, [r4, #8]
   14026:	6023      	str	r3, [r4, #0]
   14028:	2000      	movs	r0, #0
   1402a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1402e:	e9d1 1604 	ldrd	r1, r6, [r1, #16]
   14032:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   14036:	eba3 0901 	sub.w	r9, r3, r1
   1403a:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1403e:	1c6b      	adds	r3, r5, #1
   14040:	1076      	asrs	r6, r6, #1
   14042:	444b      	add	r3, r9
   14044:	42b3      	cmp	r3, r6
   14046:	4632      	mov	r2, r6
   14048:	bf84      	itt	hi
   1404a:	461e      	movhi	r6, r3
   1404c:	4632      	movhi	r2, r6
   1404e:	0543      	lsls	r3, r0, #21
   14050:	d512      	bpl.n	14078 <__ssputs_r+0x84>
   14052:	4611      	mov	r1, r2
   14054:	4640      	mov	r0, r8
   14056:	f7fe fef3 	bl	12e40 <_malloc_r>
   1405a:	4682      	mov	sl, r0
   1405c:	b300      	cbz	r0, 140a0 <__ssputs_r+0xac>
   1405e:	464a      	mov	r2, r9
   14060:	6921      	ldr	r1, [r4, #16]
   14062:	f7fe fdad 	bl	12bc0 <memcpy>
   14066:	89a3      	ldrh	r3, [r4, #12]
   14068:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1406c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14070:	81a3      	strh	r3, [r4, #12]
   14072:	e006      	b.n	14082 <__ssputs_r+0x8e>
   14074:	462e      	mov	r6, r5
   14076:	e7cc      	b.n	14012 <__ssputs_r+0x1e>
   14078:	4640      	mov	r0, r8
   1407a:	f001 f851 	bl	15120 <_realloc_r>
   1407e:	4682      	mov	sl, r0
   14080:	b150      	cbz	r0, 14098 <__ssputs_r+0xa4>
   14082:	eba6 0209 	sub.w	r2, r6, r9
   14086:	eb0a 0309 	add.w	r3, sl, r9
   1408a:	6166      	str	r6, [r4, #20]
   1408c:	f8c4 a010 	str.w	sl, [r4, #16]
   14090:	6023      	str	r3, [r4, #0]
   14092:	60a2      	str	r2, [r4, #8]
   14094:	462e      	mov	r6, r5
   14096:	e7bc      	b.n	14012 <__ssputs_r+0x1e>
   14098:	6921      	ldr	r1, [r4, #16]
   1409a:	4640      	mov	r0, r8
   1409c:	f7fe fe7a 	bl	12d94 <_free_r>
   140a0:	230c      	movs	r3, #12
   140a2:	f8c8 3000 	str.w	r3, [r8]
   140a6:	89a3      	ldrh	r3, [r4, #12]
   140a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   140ac:	81a3      	strh	r3, [r4, #12]
   140ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   140b2:	e7ba      	b.n	1402a <__ssputs_r+0x36>

000140b4 <__ssprint_r>:
   140b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140b8:	6893      	ldr	r3, [r2, #8]
   140ba:	b083      	sub	sp, #12
   140bc:	4690      	mov	r8, r2
   140be:	2b00      	cmp	r3, #0
   140c0:	d06d      	beq.n	1419e <__ssprint_r+0xea>
   140c2:	6817      	ldr	r7, [r2, #0]
   140c4:	688d      	ldr	r5, [r1, #8]
   140c6:	4682      	mov	sl, r0
   140c8:	460c      	mov	r4, r1
   140ca:	6808      	ldr	r0, [r1, #0]
   140cc:	3708      	adds	r7, #8
   140ce:	e043      	b.n	14158 <__ssprint_r+0xa4>
   140d0:	89a3      	ldrh	r3, [r4, #12]
   140d2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   140d6:	d02e      	beq.n	14136 <__ssprint_r+0x82>
   140d8:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   140dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   140e0:	eba0 0b01 	sub.w	fp, r0, r1
   140e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   140e8:	eb0b 0006 	add.w	r0, fp, r6
   140ec:	106d      	asrs	r5, r5, #1
   140ee:	3001      	adds	r0, #1
   140f0:	42a8      	cmp	r0, r5
   140f2:	462a      	mov	r2, r5
   140f4:	bf84      	itt	hi
   140f6:	4605      	movhi	r5, r0
   140f8:	462a      	movhi	r2, r5
   140fa:	055b      	lsls	r3, r3, #21
   140fc:	d536      	bpl.n	1416c <__ssprint_r+0xb8>
   140fe:	4611      	mov	r1, r2
   14100:	4650      	mov	r0, sl
   14102:	f7fe fe9d 	bl	12e40 <_malloc_r>
   14106:	2800      	cmp	r0, #0
   14108:	d03a      	beq.n	14180 <__ssprint_r+0xcc>
   1410a:	465a      	mov	r2, fp
   1410c:	6921      	ldr	r1, [r4, #16]
   1410e:	9001      	str	r0, [sp, #4]
   14110:	f7fe fd56 	bl	12bc0 <memcpy>
   14114:	89a2      	ldrh	r2, [r4, #12]
   14116:	9b01      	ldr	r3, [sp, #4]
   14118:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1411c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14120:	81a2      	strh	r2, [r4, #12]
   14122:	eba5 020b 	sub.w	r2, r5, fp
   14126:	eb03 000b 	add.w	r0, r3, fp
   1412a:	6165      	str	r5, [r4, #20]
   1412c:	6123      	str	r3, [r4, #16]
   1412e:	6020      	str	r0, [r4, #0]
   14130:	60a2      	str	r2, [r4, #8]
   14132:	4635      	mov	r5, r6
   14134:	46b3      	mov	fp, r6
   14136:	465a      	mov	r2, fp
   14138:	4649      	mov	r1, r9
   1413a:	f000 ff89 	bl	15050 <memmove>
   1413e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14142:	68a2      	ldr	r2, [r4, #8]
   14144:	6820      	ldr	r0, [r4, #0]
   14146:	1b55      	subs	r5, r2, r5
   14148:	4458      	add	r0, fp
   1414a:	1b9e      	subs	r6, r3, r6
   1414c:	60a5      	str	r5, [r4, #8]
   1414e:	6020      	str	r0, [r4, #0]
   14150:	f8c8 6008 	str.w	r6, [r8, #8]
   14154:	b31e      	cbz	r6, 1419e <__ssprint_r+0xea>
   14156:	3708      	adds	r7, #8
   14158:	e957 9602 	ldrd	r9, r6, [r7, #-8]
   1415c:	46ab      	mov	fp, r5
   1415e:	2e00      	cmp	r6, #0
   14160:	d0f9      	beq.n	14156 <__ssprint_r+0xa2>
   14162:	42ae      	cmp	r6, r5
   14164:	d2b4      	bcs.n	140d0 <__ssprint_r+0x1c>
   14166:	4635      	mov	r5, r6
   14168:	46b3      	mov	fp, r6
   1416a:	e7e4      	b.n	14136 <__ssprint_r+0x82>
   1416c:	4650      	mov	r0, sl
   1416e:	f000 ffd7 	bl	15120 <_realloc_r>
   14172:	4603      	mov	r3, r0
   14174:	2800      	cmp	r0, #0
   14176:	d1d4      	bne.n	14122 <__ssprint_r+0x6e>
   14178:	6921      	ldr	r1, [r4, #16]
   1417a:	4650      	mov	r0, sl
   1417c:	f7fe fe0a 	bl	12d94 <_free_r>
   14180:	230c      	movs	r3, #12
   14182:	f8ca 3000 	str.w	r3, [sl]
   14186:	89a3      	ldrh	r3, [r4, #12]
   14188:	2200      	movs	r2, #0
   1418a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1418e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14192:	81a3      	strh	r3, [r4, #12]
   14194:	e9c8 2201 	strd	r2, r2, [r8, #4]
   14198:	b003      	add	sp, #12
   1419a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1419e:	2000      	movs	r0, #0
   141a0:	f8c8 0004 	str.w	r0, [r8, #4]
   141a4:	b003      	add	sp, #12
   141a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141aa:	bf00      	nop

000141ac <_svfiprintf_r>:
   141ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b0:	4690      	mov	r8, r2
   141b2:	898a      	ldrh	r2, [r1, #12]
   141b4:	b09f      	sub	sp, #124	; 0x7c
   141b6:	0614      	lsls	r4, r2, #24
   141b8:	468b      	mov	fp, r1
   141ba:	9002      	str	r0, [sp, #8]
   141bc:	d503      	bpl.n	141c6 <_svfiprintf_r+0x1a>
   141be:	690a      	ldr	r2, [r1, #16]
   141c0:	2a00      	cmp	r2, #0
   141c2:	f000 810b 	beq.w	143dc <_svfiprintf_r+0x230>
   141c6:	9305      	str	r3, [sp, #20]
   141c8:	2330      	movs	r3, #48	; 0x30
   141ca:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   141ce:	f898 3000 	ldrb.w	r3, [r8]
   141d2:	4e8e      	ldr	r6, [pc, #568]	; (1440c <_svfiprintf_r+0x260>)
   141d4:	2100      	movs	r1, #0
   141d6:	2220      	movs	r2, #32
   141d8:	910b      	str	r1, [sp, #44]	; 0x2c
   141da:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   141de:	2701      	movs	r7, #1
   141e0:	2b00      	cmp	r3, #0
   141e2:	f000 8084 	beq.w	142ee <_svfiprintf_r+0x142>
   141e6:	2b25      	cmp	r3, #37	; 0x25
   141e8:	f000 80f6 	beq.w	143d8 <_svfiprintf_r+0x22c>
   141ec:	4645      	mov	r5, r8
   141ee:	e003      	b.n	141f8 <_svfiprintf_r+0x4c>
   141f0:	2b25      	cmp	r3, #37	; 0x25
   141f2:	f000 8086 	beq.w	14302 <_svfiprintf_r+0x156>
   141f6:	4625      	mov	r5, r4
   141f8:	786b      	ldrb	r3, [r5, #1]
   141fa:	1c6c      	adds	r4, r5, #1
   141fc:	2b00      	cmp	r3, #0
   141fe:	d1f7      	bne.n	141f0 <_svfiprintf_r+0x44>
   14200:	ebb4 0a08 	subs.w	sl, r4, r8
   14204:	d073      	beq.n	142ee <_svfiprintf_r+0x142>
   14206:	4642      	mov	r2, r8
   14208:	4653      	mov	r3, sl
   1420a:	4659      	mov	r1, fp
   1420c:	9802      	ldr	r0, [sp, #8]
   1420e:	f7ff fef1 	bl	13ff4 <__ssputs_r>
   14212:	3001      	adds	r0, #1
   14214:	d06b      	beq.n	142ee <_svfiprintf_r+0x142>
   14216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14218:	786a      	ldrb	r2, [r5, #1]
   1421a:	4453      	add	r3, sl
   1421c:	930b      	str	r3, [sp, #44]	; 0x2c
   1421e:	2a00      	cmp	r2, #0
   14220:	d065      	beq.n	142ee <_svfiprintf_r+0x142>
   14222:	2300      	movs	r3, #0
   14224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14228:	3401      	adds	r4, #1
   1422a:	9306      	str	r3, [sp, #24]
   1422c:	e9cd 3308 	strd	r3, r3, [sp, #32]
   14230:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
   14234:	931c      	str	r3, [sp, #112]	; 0x70
   14236:	9207      	str	r2, [sp, #28]
   14238:	e005      	b.n	14246 <_svfiprintf_r+0x9a>
   1423a:	9a06      	ldr	r2, [sp, #24]
   1423c:	fa07 f303 	lsl.w	r3, r7, r3
   14240:	4313      	orrs	r3, r2
   14242:	462c      	mov	r4, r5
   14244:	9306      	str	r3, [sp, #24]
   14246:	4625      	mov	r5, r4
   14248:	2205      	movs	r2, #5
   1424a:	f815 1b01 	ldrb.w	r1, [r5], #1
   1424e:	4630      	mov	r0, r6
   14250:	f000 feae 	bl	14fb0 <memchr>
   14254:	46aa      	mov	sl, r5
   14256:	1b83      	subs	r3, r0, r6
   14258:	2800      	cmp	r0, #0
   1425a:	d1ee      	bne.n	1423a <_svfiprintf_r+0x8e>
   1425c:	9b06      	ldr	r3, [sp, #24]
   1425e:	06d9      	lsls	r1, r3, #27
   14260:	bf44      	itt	mi
   14262:	2220      	movmi	r2, #32
   14264:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   14268:	7821      	ldrb	r1, [r4, #0]
   1426a:	071a      	lsls	r2, r3, #28
   1426c:	bf44      	itt	mi
   1426e:	222b      	movmi	r2, #43	; 0x2b
   14270:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   14274:	292a      	cmp	r1, #42	; 0x2a
   14276:	d148      	bne.n	1430a <_svfiprintf_r+0x15e>
   14278:	9a05      	ldr	r2, [sp, #20]
   1427a:	6811      	ldr	r1, [r2, #0]
   1427c:	3204      	adds	r2, #4
   1427e:	2900      	cmp	r1, #0
   14280:	9205      	str	r2, [sp, #20]
   14282:	db7e      	blt.n	14382 <_svfiprintf_r+0x1d6>
   14284:	9109      	str	r1, [sp, #36]	; 0x24
   14286:	7861      	ldrb	r1, [r4, #1]
   14288:	1ca5      	adds	r5, r4, #2
   1428a:	292e      	cmp	r1, #46	; 0x2e
   1428c:	d056      	beq.n	1433c <_svfiprintf_r+0x190>
   1428e:	4c60      	ldr	r4, [pc, #384]	; (14410 <_svfiprintf_r+0x264>)
   14290:	2203      	movs	r2, #3
   14292:	4620      	mov	r0, r4
   14294:	f000 fe8c 	bl	14fb0 <memchr>
   14298:	2800      	cmp	r0, #0
   1429a:	d068      	beq.n	1436e <_svfiprintf_r+0x1c2>
   1429c:	1b00      	subs	r0, r0, r4
   1429e:	9b06      	ldr	r3, [sp, #24]
   142a0:	2440      	movs	r4, #64	; 0x40
   142a2:	fa04 f000 	lsl.w	r0, r4, r0
   142a6:	4303      	orrs	r3, r0
   142a8:	9306      	str	r3, [sp, #24]
   142aa:	f105 0801 	add.w	r8, r5, #1
   142ae:	7829      	ldrb	r1, [r5, #0]
   142b0:	4858      	ldr	r0, [pc, #352]	; (14414 <_svfiprintf_r+0x268>)
   142b2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   142b6:	2206      	movs	r2, #6
   142b8:	f000 fe7a 	bl	14fb0 <memchr>
   142bc:	2800      	cmp	r0, #0
   142be:	d066      	beq.n	1438e <_svfiprintf_r+0x1e2>
   142c0:	4b55      	ldr	r3, [pc, #340]	; (14418 <_svfiprintf_r+0x26c>)
   142c2:	2b00      	cmp	r3, #0
   142c4:	d056      	beq.n	14374 <_svfiprintf_r+0x1c8>
   142c6:	ab05      	add	r3, sp, #20
   142c8:	9300      	str	r3, [sp, #0]
   142ca:	465a      	mov	r2, fp
   142cc:	4b53      	ldr	r3, [pc, #332]	; (1441c <_svfiprintf_r+0x270>)
   142ce:	9802      	ldr	r0, [sp, #8]
   142d0:	a906      	add	r1, sp, #24
   142d2:	f3af 8000 	nop.w
   142d6:	4681      	mov	r9, r0
   142d8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   142dc:	d007      	beq.n	142ee <_svfiprintf_r+0x142>
   142de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142e0:	444b      	add	r3, r9
   142e2:	930b      	str	r3, [sp, #44]	; 0x2c
   142e4:	f898 3000 	ldrb.w	r3, [r8]
   142e8:	2b00      	cmp	r3, #0
   142ea:	f47f af7c 	bne.w	141e6 <_svfiprintf_r+0x3a>
   142ee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   142f2:	065b      	lsls	r3, r3, #25
   142f4:	bf54      	ite	pl
   142f6:	980b      	ldrpl	r0, [sp, #44]	; 0x2c
   142f8:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
   142fc:	b01f      	add	sp, #124	; 0x7c
   142fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14302:	ebb4 0a08 	subs.w	sl, r4, r8
   14306:	d08c      	beq.n	14222 <_svfiprintf_r+0x76>
   14308:	e77d      	b.n	14206 <_svfiprintf_r+0x5a>
   1430a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1430e:	2a09      	cmp	r2, #9
   14310:	bf88      	it	hi
   14312:	46a2      	movhi	sl, r4
   14314:	d8b9      	bhi.n	1428a <_svfiprintf_r+0xde>
   14316:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14318:	e001      	b.n	1431e <_svfiprintf_r+0x172>
   1431a:	462c      	mov	r4, r5
   1431c:	3501      	adds	r5, #1
   1431e:	7829      	ldrb	r1, [r5, #0]
   14320:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14324:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   14328:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1432c:	2a09      	cmp	r2, #9
   1432e:	46aa      	mov	sl, r5
   14330:	d9f3      	bls.n	1431a <_svfiprintf_r+0x16e>
   14332:	292e      	cmp	r1, #46	; 0x2e
   14334:	f104 0502 	add.w	r5, r4, #2
   14338:	9309      	str	r3, [sp, #36]	; 0x24
   1433a:	d1a8      	bne.n	1428e <_svfiprintf_r+0xe2>
   1433c:	f89a 1001 	ldrb.w	r1, [sl, #1]
   14340:	292a      	cmp	r1, #42	; 0x2a
   14342:	d12e      	bne.n	143a2 <_svfiprintf_r+0x1f6>
   14344:	9b05      	ldr	r3, [sp, #20]
   14346:	f89a 1002 	ldrb.w	r1, [sl, #2]
   1434a:	681a      	ldr	r2, [r3, #0]
   1434c:	9207      	str	r2, [sp, #28]
   1434e:	3304      	adds	r3, #4
   14350:	2a00      	cmp	r2, #0
   14352:	9305      	str	r3, [sp, #20]
   14354:	f10a 0503 	add.w	r5, sl, #3
   14358:	f10a 0302 	add.w	r3, sl, #2
   1435c:	db37      	blt.n	143ce <_svfiprintf_r+0x222>
   1435e:	4c2c      	ldr	r4, [pc, #176]	; (14410 <_svfiprintf_r+0x264>)
   14360:	2203      	movs	r2, #3
   14362:	4620      	mov	r0, r4
   14364:	469a      	mov	sl, r3
   14366:	f000 fe23 	bl	14fb0 <memchr>
   1436a:	2800      	cmp	r0, #0
   1436c:	d196      	bne.n	1429c <_svfiprintf_r+0xf0>
   1436e:	46a8      	mov	r8, r5
   14370:	4655      	mov	r5, sl
   14372:	e79c      	b.n	142ae <_svfiprintf_r+0x102>
   14374:	9b05      	ldr	r3, [sp, #20]
   14376:	3307      	adds	r3, #7
   14378:	f023 0307 	bic.w	r3, r3, #7
   1437c:	3308      	adds	r3, #8
   1437e:	9305      	str	r3, [sp, #20]
   14380:	e7ad      	b.n	142de <_svfiprintf_r+0x132>
   14382:	4249      	negs	r1, r1
   14384:	f043 0302 	orr.w	r3, r3, #2
   14388:	9109      	str	r1, [sp, #36]	; 0x24
   1438a:	9306      	str	r3, [sp, #24]
   1438c:	e77b      	b.n	14286 <_svfiprintf_r+0xda>
   1438e:	ab05      	add	r3, sp, #20
   14390:	9300      	str	r3, [sp, #0]
   14392:	465a      	mov	r2, fp
   14394:	4b21      	ldr	r3, [pc, #132]	; (1441c <_svfiprintf_r+0x270>)
   14396:	9802      	ldr	r0, [sp, #8]
   14398:	a906      	add	r1, sp, #24
   1439a:	f000 fa87 	bl	148ac <_printf_i>
   1439e:	4681      	mov	r9, r0
   143a0:	e79a      	b.n	142d8 <_svfiprintf_r+0x12c>
   143a2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   143a6:	2300      	movs	r3, #0
   143a8:	2a09      	cmp	r2, #9
   143aa:	9307      	str	r3, [sp, #28]
   143ac:	d901      	bls.n	143b2 <_svfiprintf_r+0x206>
   143ae:	e023      	b.n	143f8 <_svfiprintf_r+0x24c>
   143b0:	4655      	mov	r5, sl
   143b2:	7869      	ldrb	r1, [r5, #1]
   143b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   143b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   143bc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   143c0:	2a09      	cmp	r2, #9
   143c2:	f105 0a01 	add.w	sl, r5, #1
   143c6:	d9f3      	bls.n	143b0 <_svfiprintf_r+0x204>
   143c8:	3502      	adds	r5, #2
   143ca:	9307      	str	r3, [sp, #28]
   143cc:	e75f      	b.n	1428e <_svfiprintf_r+0xe2>
   143ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   143d2:	469a      	mov	sl, r3
   143d4:	9207      	str	r2, [sp, #28]
   143d6:	e75a      	b.n	1428e <_svfiprintf_r+0xe2>
   143d8:	4644      	mov	r4, r8
   143da:	e722      	b.n	14222 <_svfiprintf_r+0x76>
   143dc:	2140      	movs	r1, #64	; 0x40
   143de:	9303      	str	r3, [sp, #12]
   143e0:	f7fe fd2e 	bl	12e40 <_malloc_r>
   143e4:	9b03      	ldr	r3, [sp, #12]
   143e6:	f8cb 0000 	str.w	r0, [fp]
   143ea:	f8cb 0010 	str.w	r0, [fp, #16]
   143ee:	b130      	cbz	r0, 143fe <_svfiprintf_r+0x252>
   143f0:	2240      	movs	r2, #64	; 0x40
   143f2:	f8cb 2014 	str.w	r2, [fp, #20]
   143f6:	e6e6      	b.n	141c6 <_svfiprintf_r+0x1a>
   143f8:	46aa      	mov	sl, r5
   143fa:	3501      	adds	r5, #1
   143fc:	e747      	b.n	1428e <_svfiprintf_r+0xe2>
   143fe:	9a02      	ldr	r2, [sp, #8]
   14400:	230c      	movs	r3, #12
   14402:	6013      	str	r3, [r2, #0]
   14404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14408:	e778      	b.n	142fc <_svfiprintf_r+0x150>
   1440a:	bf00      	nop
   1440c:	00016030 	.word	0x00016030
   14410:	00016038 	.word	0x00016038
   14414:	0001603c 	.word	0x0001603c
   14418:	00000000 	.word	0x00000000
   1441c:	00013ff5 	.word	0x00013ff5

00014420 <__sfputc_r>:
   14420:	6893      	ldr	r3, [r2, #8]
   14422:	3b01      	subs	r3, #1
   14424:	2b00      	cmp	r3, #0
   14426:	6093      	str	r3, [r2, #8]
   14428:	da0f      	bge.n	1444a <__sfputc_r+0x2a>
   1442a:	b410      	push	{r4}
   1442c:	6994      	ldr	r4, [r2, #24]
   1442e:	42a3      	cmp	r3, r4
   14430:	db08      	blt.n	14444 <__sfputc_r+0x24>
   14432:	290a      	cmp	r1, #10
   14434:	d006      	beq.n	14444 <__sfputc_r+0x24>
   14436:	6813      	ldr	r3, [r2, #0]
   14438:	1c58      	adds	r0, r3, #1
   1443a:	6010      	str	r0, [r2, #0]
   1443c:	7019      	strb	r1, [r3, #0]
   1443e:	4608      	mov	r0, r1
   14440:	bc10      	pop	{r4}
   14442:	4770      	bx	lr
   14444:	bc10      	pop	{r4}
   14446:	f7ff ba49 	b.w	138dc <__swbuf_r>
   1444a:	6813      	ldr	r3, [r2, #0]
   1444c:	1c58      	adds	r0, r3, #1
   1444e:	6010      	str	r0, [r2, #0]
   14450:	7019      	strb	r1, [r3, #0]
   14452:	4608      	mov	r0, r1
   14454:	4770      	bx	lr
   14456:	bf00      	nop

00014458 <__sfputs_r>:
   14458:	b19b      	cbz	r3, 14482 <__sfputs_r+0x2a>
   1445a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1445c:	4413      	add	r3, r2
   1445e:	460f      	mov	r7, r1
   14460:	4606      	mov	r6, r0
   14462:	1e5d      	subs	r5, r3, #1
   14464:	1e54      	subs	r4, r2, #1
   14466:	e001      	b.n	1446c <__sfputs_r+0x14>
   14468:	42ac      	cmp	r4, r5
   1446a:	d008      	beq.n	1447e <__sfputs_r+0x26>
   1446c:	463a      	mov	r2, r7
   1446e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   14472:	4630      	mov	r0, r6
   14474:	f7ff ffd4 	bl	14420 <__sfputc_r>
   14478:	1c43      	adds	r3, r0, #1
   1447a:	d1f5      	bne.n	14468 <__sfputs_r+0x10>
   1447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1447e:	2000      	movs	r0, #0
   14480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14482:	2000      	movs	r0, #0
   14484:	4770      	bx	lr
   14486:	bf00      	nop

00014488 <__sprint_r>:
   14488:	6893      	ldr	r3, [r2, #8]
   1448a:	b510      	push	{r4, lr}
   1448c:	4614      	mov	r4, r2
   1448e:	b913      	cbnz	r3, 14496 <__sprint_r+0xe>
   14490:	6053      	str	r3, [r2, #4]
   14492:	4618      	mov	r0, r3
   14494:	bd10      	pop	{r4, pc}
   14496:	f000 fbd9 	bl	14c4c <__sfvwrite_r>
   1449a:	2300      	movs	r3, #0
   1449c:	e9c4 3301 	strd	r3, r3, [r4, #4]
   144a0:	bd10      	pop	{r4, pc}
   144a2:	bf00      	nop

000144a4 <_vfiprintf_r>:
   144a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144a8:	b09f      	sub	sp, #124	; 0x7c
   144aa:	468b      	mov	fp, r1
   144ac:	4690      	mov	r8, r2
   144ae:	461c      	mov	r4, r3
   144b0:	9003      	str	r0, [sp, #12]
   144b2:	b118      	cbz	r0, 144bc <_vfiprintf_r+0x18>
   144b4:	6983      	ldr	r3, [r0, #24]
   144b6:	2b00      	cmp	r3, #0
   144b8:	f000 80b7 	beq.w	1462a <_vfiprintf_r+0x186>
   144bc:	4ba2      	ldr	r3, [pc, #648]	; (14748 <_vfiprintf_r+0x2a4>)
   144be:	459b      	cmp	fp, r3
   144c0:	f000 80b9 	beq.w	14636 <_vfiprintf_r+0x192>
   144c4:	4ba1      	ldr	r3, [pc, #644]	; (1474c <_vfiprintf_r+0x2a8>)
   144c6:	459b      	cmp	fp, r3
   144c8:	f000 80c7 	beq.w	1465a <_vfiprintf_r+0x1b6>
   144cc:	4ba0      	ldr	r3, [pc, #640]	; (14750 <_vfiprintf_r+0x2ac>)
   144ce:	459b      	cmp	fp, r3
   144d0:	bf04      	itt	eq
   144d2:	9b03      	ldreq	r3, [sp, #12]
   144d4:	f8d3 b00c 	ldreq.w	fp, [r3, #12]
   144d8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   144dc:	0718      	lsls	r0, r3, #28
   144de:	f140 80b2 	bpl.w	14646 <_vfiprintf_r+0x1a2>
   144e2:	f8db 3010 	ldr.w	r3, [fp, #16]
   144e6:	2b00      	cmp	r3, #0
   144e8:	f000 80ad 	beq.w	14646 <_vfiprintf_r+0x1a2>
   144ec:	2330      	movs	r3, #48	; 0x30
   144ee:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   144f2:	f898 3000 	ldrb.w	r3, [r8]
   144f6:	9405      	str	r4, [sp, #20]
   144f8:	2100      	movs	r1, #0
   144fa:	2220      	movs	r2, #32
   144fc:	910b      	str	r1, [sp, #44]	; 0x2c
   144fe:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   14502:	4e94      	ldr	r6, [pc, #592]	; (14754 <_vfiprintf_r+0x2b0>)
   14504:	2701      	movs	r7, #1
   14506:	2b00      	cmp	r3, #0
   14508:	f000 8087 	beq.w	1461a <_vfiprintf_r+0x176>
   1450c:	2b25      	cmp	r3, #37	; 0x25
   1450e:	f000 8115 	beq.w	1473c <_vfiprintf_r+0x298>
   14512:	4645      	mov	r5, r8
   14514:	e003      	b.n	1451e <_vfiprintf_r+0x7a>
   14516:	2b25      	cmp	r3, #37	; 0x25
   14518:	f000 80a3 	beq.w	14662 <_vfiprintf_r+0x1be>
   1451c:	4625      	mov	r5, r4
   1451e:	786b      	ldrb	r3, [r5, #1]
   14520:	1c6c      	adds	r4, r5, #1
   14522:	2b00      	cmp	r3, #0
   14524:	d1f7      	bne.n	14516 <_vfiprintf_r+0x72>
   14526:	ebb4 0a08 	subs.w	sl, r4, r8
   1452a:	d076      	beq.n	1461a <_vfiprintf_r+0x176>
   1452c:	4642      	mov	r2, r8
   1452e:	4653      	mov	r3, sl
   14530:	4659      	mov	r1, fp
   14532:	9803      	ldr	r0, [sp, #12]
   14534:	f7ff ff90 	bl	14458 <__sfputs_r>
   14538:	3001      	adds	r0, #1
   1453a:	d06e      	beq.n	1461a <_vfiprintf_r+0x176>
   1453c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1453e:	786a      	ldrb	r2, [r5, #1]
   14540:	4453      	add	r3, sl
   14542:	930b      	str	r3, [sp, #44]	; 0x2c
   14544:	2a00      	cmp	r2, #0
   14546:	d068      	beq.n	1461a <_vfiprintf_r+0x176>
   14548:	2300      	movs	r3, #0
   1454a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1454e:	3401      	adds	r4, #1
   14550:	9306      	str	r3, [sp, #24]
   14552:	e9cd 3308 	strd	r3, r3, [sp, #32]
   14556:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
   1455a:	931c      	str	r3, [sp, #112]	; 0x70
   1455c:	9207      	str	r2, [sp, #28]
   1455e:	e005      	b.n	1456c <_vfiprintf_r+0xc8>
   14560:	9a06      	ldr	r2, [sp, #24]
   14562:	fa07 f303 	lsl.w	r3, r7, r3
   14566:	4313      	orrs	r3, r2
   14568:	462c      	mov	r4, r5
   1456a:	9306      	str	r3, [sp, #24]
   1456c:	4625      	mov	r5, r4
   1456e:	2205      	movs	r2, #5
   14570:	f815 1b01 	ldrb.w	r1, [r5], #1
   14574:	4630      	mov	r0, r6
   14576:	f000 fd1b 	bl	14fb0 <memchr>
   1457a:	46aa      	mov	sl, r5
   1457c:	1b83      	subs	r3, r0, r6
   1457e:	2800      	cmp	r0, #0
   14580:	d1ee      	bne.n	14560 <_vfiprintf_r+0xbc>
   14582:	9b06      	ldr	r3, [sp, #24]
   14584:	06d9      	lsls	r1, r3, #27
   14586:	bf44      	itt	mi
   14588:	2220      	movmi	r2, #32
   1458a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   1458e:	7821      	ldrb	r1, [r4, #0]
   14590:	071a      	lsls	r2, r3, #28
   14592:	bf44      	itt	mi
   14594:	222b      	movmi	r2, #43	; 0x2b
   14596:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   1459a:	292a      	cmp	r1, #42	; 0x2a
   1459c:	d166      	bne.n	1466c <_vfiprintf_r+0x1c8>
   1459e:	9a05      	ldr	r2, [sp, #20]
   145a0:	6811      	ldr	r1, [r2, #0]
   145a2:	3204      	adds	r2, #4
   145a4:	2900      	cmp	r1, #0
   145a6:	9205      	str	r2, [sp, #20]
   145a8:	f2c0 809d 	blt.w	146e6 <_vfiprintf_r+0x242>
   145ac:	9109      	str	r1, [sp, #36]	; 0x24
   145ae:	7861      	ldrb	r1, [r4, #1]
   145b0:	1ca5      	adds	r5, r4, #2
   145b2:	292e      	cmp	r1, #46	; 0x2e
   145b4:	d073      	beq.n	1469e <_vfiprintf_r+0x1fa>
   145b6:	4c68      	ldr	r4, [pc, #416]	; (14758 <_vfiprintf_r+0x2b4>)
   145b8:	2203      	movs	r2, #3
   145ba:	4620      	mov	r0, r4
   145bc:	f000 fcf8 	bl	14fb0 <memchr>
   145c0:	2800      	cmp	r0, #0
   145c2:	f000 8086 	beq.w	146d2 <_vfiprintf_r+0x22e>
   145c6:	1b00      	subs	r0, r0, r4
   145c8:	9b06      	ldr	r3, [sp, #24]
   145ca:	2440      	movs	r4, #64	; 0x40
   145cc:	fa04 f000 	lsl.w	r0, r4, r0
   145d0:	4303      	orrs	r3, r0
   145d2:	9306      	str	r3, [sp, #24]
   145d4:	f105 0801 	add.w	r8, r5, #1
   145d8:	7829      	ldrb	r1, [r5, #0]
   145da:	4860      	ldr	r0, [pc, #384]	; (1475c <_vfiprintf_r+0x2b8>)
   145dc:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   145e0:	2206      	movs	r2, #6
   145e2:	f000 fce5 	bl	14fb0 <memchr>
   145e6:	2800      	cmp	r0, #0
   145e8:	f000 8083 	beq.w	146f2 <_vfiprintf_r+0x24e>
   145ec:	4b5c      	ldr	r3, [pc, #368]	; (14760 <_vfiprintf_r+0x2bc>)
   145ee:	2b00      	cmp	r3, #0
   145f0:	d072      	beq.n	146d8 <_vfiprintf_r+0x234>
   145f2:	ab05      	add	r3, sp, #20
   145f4:	9300      	str	r3, [sp, #0]
   145f6:	465a      	mov	r2, fp
   145f8:	4b5a      	ldr	r3, [pc, #360]	; (14764 <_vfiprintf_r+0x2c0>)
   145fa:	9803      	ldr	r0, [sp, #12]
   145fc:	a906      	add	r1, sp, #24
   145fe:	f3af 8000 	nop.w
   14602:	4681      	mov	r9, r0
   14604:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   14608:	d007      	beq.n	1461a <_vfiprintf_r+0x176>
   1460a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1460c:	444b      	add	r3, r9
   1460e:	930b      	str	r3, [sp, #44]	; 0x2c
   14610:	f898 3000 	ldrb.w	r3, [r8]
   14614:	2b00      	cmp	r3, #0
   14616:	f47f af79 	bne.w	1450c <_vfiprintf_r+0x68>
   1461a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1461e:	065b      	lsls	r3, r3, #25
   14620:	d418      	bmi.n	14654 <_vfiprintf_r+0x1b0>
   14622:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14624:	b01f      	add	sp, #124	; 0x7c
   14626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1462a:	f7ff fbf7 	bl	13e1c <__sinit>
   1462e:	4b46      	ldr	r3, [pc, #280]	; (14748 <_vfiprintf_r+0x2a4>)
   14630:	459b      	cmp	fp, r3
   14632:	f47f af47 	bne.w	144c4 <_vfiprintf_r+0x20>
   14636:	9b03      	ldr	r3, [sp, #12]
   14638:	f8d3 b004 	ldr.w	fp, [r3, #4]
   1463c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   14640:	0718      	lsls	r0, r3, #28
   14642:	f53f af4e 	bmi.w	144e2 <_vfiprintf_r+0x3e>
   14646:	4659      	mov	r1, fp
   14648:	9803      	ldr	r0, [sp, #12]
   1464a:	f7ff f9a7 	bl	1399c <__swsetup_r>
   1464e:	2800      	cmp	r0, #0
   14650:	f43f af4c 	beq.w	144ec <_vfiprintf_r+0x48>
   14654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14658:	e7e4      	b.n	14624 <_vfiprintf_r+0x180>
   1465a:	9b03      	ldr	r3, [sp, #12]
   1465c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   14660:	e73a      	b.n	144d8 <_vfiprintf_r+0x34>
   14662:	ebb4 0a08 	subs.w	sl, r4, r8
   14666:	f43f af6f 	beq.w	14548 <_vfiprintf_r+0xa4>
   1466a:	e75f      	b.n	1452c <_vfiprintf_r+0x88>
   1466c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14670:	2a09      	cmp	r2, #9
   14672:	bf88      	it	hi
   14674:	46a2      	movhi	sl, r4
   14676:	d89c      	bhi.n	145b2 <_vfiprintf_r+0x10e>
   14678:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1467a:	e001      	b.n	14680 <_vfiprintf_r+0x1dc>
   1467c:	462c      	mov	r4, r5
   1467e:	3501      	adds	r5, #1
   14680:	7829      	ldrb	r1, [r5, #0]
   14682:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14686:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1468a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1468e:	2a09      	cmp	r2, #9
   14690:	46aa      	mov	sl, r5
   14692:	d9f3      	bls.n	1467c <_vfiprintf_r+0x1d8>
   14694:	292e      	cmp	r1, #46	; 0x2e
   14696:	f104 0502 	add.w	r5, r4, #2
   1469a:	9309      	str	r3, [sp, #36]	; 0x24
   1469c:	d18b      	bne.n	145b6 <_vfiprintf_r+0x112>
   1469e:	f89a 1001 	ldrb.w	r1, [sl, #1]
   146a2:	292a      	cmp	r1, #42	; 0x2a
   146a4:	d12f      	bne.n	14706 <_vfiprintf_r+0x262>
   146a6:	9b05      	ldr	r3, [sp, #20]
   146a8:	f89a 1002 	ldrb.w	r1, [sl, #2]
   146ac:	681a      	ldr	r2, [r3, #0]
   146ae:	9207      	str	r2, [sp, #28]
   146b0:	3304      	adds	r3, #4
   146b2:	2a00      	cmp	r2, #0
   146b4:	9305      	str	r3, [sp, #20]
   146b6:	f10a 0503 	add.w	r5, sl, #3
   146ba:	f10a 0302 	add.w	r3, sl, #2
   146be:	db38      	blt.n	14732 <_vfiprintf_r+0x28e>
   146c0:	4c25      	ldr	r4, [pc, #148]	; (14758 <_vfiprintf_r+0x2b4>)
   146c2:	2203      	movs	r2, #3
   146c4:	4620      	mov	r0, r4
   146c6:	469a      	mov	sl, r3
   146c8:	f000 fc72 	bl	14fb0 <memchr>
   146cc:	2800      	cmp	r0, #0
   146ce:	f47f af7a 	bne.w	145c6 <_vfiprintf_r+0x122>
   146d2:	46a8      	mov	r8, r5
   146d4:	4655      	mov	r5, sl
   146d6:	e77f      	b.n	145d8 <_vfiprintf_r+0x134>
   146d8:	9b05      	ldr	r3, [sp, #20]
   146da:	3307      	adds	r3, #7
   146dc:	f023 0307 	bic.w	r3, r3, #7
   146e0:	3308      	adds	r3, #8
   146e2:	9305      	str	r3, [sp, #20]
   146e4:	e791      	b.n	1460a <_vfiprintf_r+0x166>
   146e6:	4249      	negs	r1, r1
   146e8:	f043 0302 	orr.w	r3, r3, #2
   146ec:	9109      	str	r1, [sp, #36]	; 0x24
   146ee:	9306      	str	r3, [sp, #24]
   146f0:	e75d      	b.n	145ae <_vfiprintf_r+0x10a>
   146f2:	ab05      	add	r3, sp, #20
   146f4:	9300      	str	r3, [sp, #0]
   146f6:	465a      	mov	r2, fp
   146f8:	4b1a      	ldr	r3, [pc, #104]	; (14764 <_vfiprintf_r+0x2c0>)
   146fa:	9803      	ldr	r0, [sp, #12]
   146fc:	a906      	add	r1, sp, #24
   146fe:	f000 f8d5 	bl	148ac <_printf_i>
   14702:	4681      	mov	r9, r0
   14704:	e77e      	b.n	14604 <_vfiprintf_r+0x160>
   14706:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1470a:	2300      	movs	r3, #0
   1470c:	2a09      	cmp	r2, #9
   1470e:	9307      	str	r3, [sp, #28]
   14710:	d901      	bls.n	14716 <_vfiprintf_r+0x272>
   14712:	e015      	b.n	14740 <_vfiprintf_r+0x29c>
   14714:	4655      	mov	r5, sl
   14716:	7869      	ldrb	r1, [r5, #1]
   14718:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1471c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   14720:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14724:	2a09      	cmp	r2, #9
   14726:	f105 0a01 	add.w	sl, r5, #1
   1472a:	d9f3      	bls.n	14714 <_vfiprintf_r+0x270>
   1472c:	3502      	adds	r5, #2
   1472e:	9307      	str	r3, [sp, #28]
   14730:	e741      	b.n	145b6 <_vfiprintf_r+0x112>
   14732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14736:	469a      	mov	sl, r3
   14738:	9207      	str	r2, [sp, #28]
   1473a:	e73c      	b.n	145b6 <_vfiprintf_r+0x112>
   1473c:	4644      	mov	r4, r8
   1473e:	e703      	b.n	14548 <_vfiprintf_r+0xa4>
   14740:	46aa      	mov	sl, r5
   14742:	3501      	adds	r5, #1
   14744:	e737      	b.n	145b6 <_vfiprintf_r+0x112>
   14746:	bf00      	nop
   14748:	00016010 	.word	0x00016010
   1474c:	00015ff0 	.word	0x00015ff0
   14750:	00015fd0 	.word	0x00015fd0
   14754:	00016030 	.word	0x00016030
   14758:	00016038 	.word	0x00016038
   1475c:	0001603c 	.word	0x0001603c
   14760:	00000000 	.word	0x00000000
   14764:	00014459 	.word	0x00014459

00014768 <vfiprintf>:
   14768:	b410      	push	{r4}
   1476a:	4c04      	ldr	r4, [pc, #16]	; (1477c <vfiprintf+0x14>)
   1476c:	4613      	mov	r3, r2
   1476e:	460a      	mov	r2, r1
   14770:	4601      	mov	r1, r0
   14772:	6820      	ldr	r0, [r4, #0]
   14774:	bc10      	pop	{r4}
   14776:	f7ff be95 	b.w	144a4 <_vfiprintf_r>
   1477a:	bf00      	nop
   1477c:	20000548 	.word	0x20000548

00014780 <_printf_common>:
   14780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14784:	460c      	mov	r4, r1
   14786:	4691      	mov	r9, r2
   14788:	690a      	ldr	r2, [r1, #16]
   1478a:	6889      	ldr	r1, [r1, #8]
   1478c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   14790:	428a      	cmp	r2, r1
   14792:	bfb8      	it	lt
   14794:	460a      	movlt	r2, r1
   14796:	f8c9 2000 	str.w	r2, [r9]
   1479a:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   1479e:	4606      	mov	r6, r0
   147a0:	461f      	mov	r7, r3
   147a2:	b111      	cbz	r1, 147aa <_printf_common+0x2a>
   147a4:	3201      	adds	r2, #1
   147a6:	f8c9 2000 	str.w	r2, [r9]
   147aa:	6823      	ldr	r3, [r4, #0]
   147ac:	0699      	lsls	r1, r3, #26
   147ae:	d55c      	bpl.n	1486a <_printf_common+0xea>
   147b0:	f8d9 2000 	ldr.w	r2, [r9]
   147b4:	3202      	adds	r2, #2
   147b6:	f8c9 2000 	str.w	r2, [r9]
   147ba:	6823      	ldr	r3, [r4, #0]
   147bc:	f013 0f06 	tst.w	r3, #6
   147c0:	4619      	mov	r1, r3
   147c2:	d11d      	bne.n	14800 <_printf_common+0x80>
   147c4:	68e1      	ldr	r1, [r4, #12]
   147c6:	1a8a      	subs	r2, r1, r2
   147c8:	2a00      	cmp	r2, #0
   147ca:	bfd8      	it	le
   147cc:	4619      	movle	r1, r3
   147ce:	dd17      	ble.n	14800 <_printf_common+0x80>
   147d0:	f104 0a19 	add.w	sl, r4, #25
   147d4:	2500      	movs	r5, #0
   147d6:	e005      	b.n	147e4 <_printf_common+0x64>
   147d8:	68e3      	ldr	r3, [r4, #12]
   147da:	f8d9 2000 	ldr.w	r2, [r9]
   147de:	1a9b      	subs	r3, r3, r2
   147e0:	42ab      	cmp	r3, r5
   147e2:	dd0c      	ble.n	147fe <_printf_common+0x7e>
   147e4:	2301      	movs	r3, #1
   147e6:	4652      	mov	r2, sl
   147e8:	4639      	mov	r1, r7
   147ea:	4630      	mov	r0, r6
   147ec:	47c0      	blx	r8
   147ee:	3001      	adds	r0, #1
   147f0:	f105 0501 	add.w	r5, r5, #1
   147f4:	d1f0      	bne.n	147d8 <_printf_common+0x58>
   147f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   147fe:	6821      	ldr	r1, [r4, #0]
   14800:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   14804:	3300      	adds	r3, #0
   14806:	bf18      	it	ne
   14808:	2301      	movne	r3, #1
   1480a:	068a      	lsls	r2, r1, #26
   1480c:	d50a      	bpl.n	14824 <_printf_common+0xa4>
   1480e:	18e1      	adds	r1, r4, r3
   14810:	1c5a      	adds	r2, r3, #1
   14812:	2030      	movs	r0, #48	; 0x30
   14814:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   14818:	4422      	add	r2, r4
   1481a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1481e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   14822:	3302      	adds	r3, #2
   14824:	f104 0243 	add.w	r2, r4, #67	; 0x43
   14828:	4639      	mov	r1, r7
   1482a:	4630      	mov	r0, r6
   1482c:	47c0      	blx	r8
   1482e:	3001      	adds	r0, #1
   14830:	d0e1      	beq.n	147f6 <_printf_common+0x76>
   14832:	6823      	ldr	r3, [r4, #0]
   14834:	68a2      	ldr	r2, [r4, #8]
   14836:	6921      	ldr	r1, [r4, #16]
   14838:	f003 0306 	and.w	r3, r3, #6
   1483c:	2b04      	cmp	r3, #4
   1483e:	d01d      	beq.n	1487c <_printf_common+0xfc>
   14840:	428a      	cmp	r2, r1
   14842:	dd26      	ble.n	14892 <_printf_common+0x112>
   14844:	f04f 0900 	mov.w	r9, #0
   14848:	1a52      	subs	r2, r2, r1
   1484a:	4491      	add	r9, r2
   1484c:	341a      	adds	r4, #26
   1484e:	2500      	movs	r5, #0
   14850:	e001      	b.n	14856 <_printf_common+0xd6>
   14852:	454d      	cmp	r5, r9
   14854:	da1d      	bge.n	14892 <_printf_common+0x112>
   14856:	2301      	movs	r3, #1
   14858:	4622      	mov	r2, r4
   1485a:	4639      	mov	r1, r7
   1485c:	4630      	mov	r0, r6
   1485e:	47c0      	blx	r8
   14860:	3001      	adds	r0, #1
   14862:	f105 0501 	add.w	r5, r5, #1
   14866:	d1f4      	bne.n	14852 <_printf_common+0xd2>
   14868:	e7c5      	b.n	147f6 <_printf_common+0x76>
   1486a:	f013 0f06 	tst.w	r3, #6
   1486e:	d013      	beq.n	14898 <_printf_common+0x118>
   14870:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   14874:	3300      	adds	r3, #0
   14876:	bf18      	it	ne
   14878:	2301      	movne	r3, #1
   1487a:	e7d3      	b.n	14824 <_printf_common+0xa4>
   1487c:	f8d9 0000 	ldr.w	r0, [r9]
   14880:	68e3      	ldr	r3, [r4, #12]
   14882:	428a      	cmp	r2, r1
   14884:	eba3 0300 	sub.w	r3, r3, r0
   14888:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
   1488c:	dcdc      	bgt.n	14848 <_printf_common+0xc8>
   1488e:	2b00      	cmp	r3, #0
   14890:	dcdc      	bgt.n	1484c <_printf_common+0xcc>
   14892:	2000      	movs	r0, #0
   14894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14898:	68e1      	ldr	r1, [r4, #12]
   1489a:	f8d9 2000 	ldr.w	r2, [r9]
   1489e:	1a8a      	subs	r2, r1, r2
   148a0:	2a00      	cmp	r2, #0
   148a2:	bfd8      	it	le
   148a4:	4619      	movle	r1, r3
   148a6:	dc93      	bgt.n	147d0 <_printf_common+0x50>
   148a8:	e7aa      	b.n	14800 <_printf_common+0x80>
   148aa:	bf00      	nop

000148ac <_printf_i>:
   148ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   148b0:	460c      	mov	r4, r1
   148b2:	7e09      	ldrb	r1, [r1, #24]
   148b4:	b085      	sub	sp, #20
   148b6:	296e      	cmp	r1, #110	; 0x6e
   148b8:	4606      	mov	r6, r0
   148ba:	4617      	mov	r7, r2
   148bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   148be:	4698      	mov	r8, r3
   148c0:	f104 0e43 	add.w	lr, r4, #67	; 0x43
   148c4:	d06d      	beq.n	149a2 <_printf_i+0xf6>
   148c6:	d939      	bls.n	1493c <_printf_i+0x90>
   148c8:	2973      	cmp	r1, #115	; 0x73
   148ca:	f000 80f6 	beq.w	14aba <_printf_i+0x20e>
   148ce:	d944      	bls.n	1495a <_printf_i+0xae>
   148d0:	2975      	cmp	r1, #117	; 0x75
   148d2:	f000 8104 	beq.w	14ade <_printf_i+0x232>
   148d6:	2978      	cmp	r1, #120	; 0x78
   148d8:	f040 8111 	bne.w	14afe <_printf_i+0x252>
   148dc:	2378      	movs	r3, #120	; 0x78
   148de:	6822      	ldr	r2, [r4, #0]
   148e0:	f8df c258 	ldr.w	ip, [pc, #600]	; 14b3c <_printf_i+0x290>
   148e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   148e8:	6801      	ldr	r1, [r0, #0]
   148ea:	0615      	lsls	r5, r2, #24
   148ec:	f851 3b04 	ldr.w	r3, [r1], #4
   148f0:	6001      	str	r1, [r0, #0]
   148f2:	f140 80a1 	bpl.w	14a38 <_printf_i+0x18c>
   148f6:	07d1      	lsls	r1, r2, #31
   148f8:	bf44      	itt	mi
   148fa:	f042 0220 	orrmi.w	r2, r2, #32
   148fe:	6022      	strmi	r2, [r4, #0]
   14900:	2b00      	cmp	r3, #0
   14902:	f000 8093 	beq.w	14a2c <_printf_i+0x180>
   14906:	2210      	movs	r2, #16
   14908:	2100      	movs	r1, #0
   1490a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1490e:	6860      	ldr	r0, [r4, #4]
   14910:	60a0      	str	r0, [r4, #8]
   14912:	2800      	cmp	r0, #0
   14914:	f2c0 80c8 	blt.w	14aa8 <_printf_i+0x1fc>
   14918:	6821      	ldr	r1, [r4, #0]
   1491a:	f021 0104 	bic.w	r1, r1, #4
   1491e:	6021      	str	r1, [r4, #0]
   14920:	2b00      	cmp	r3, #0
   14922:	f040 80a3 	bne.w	14a6c <_printf_i+0x1c0>
   14926:	2800      	cmp	r0, #0
   14928:	f040 80c0 	bne.w	14aac <_printf_i+0x200>
   1492c:	4675      	mov	r5, lr
   1492e:	2a08      	cmp	r2, #8
   14930:	f000 80ac 	beq.w	14a8c <_printf_i+0x1e0>
   14934:	ebae 0305 	sub.w	r3, lr, r5
   14938:	6123      	str	r3, [r4, #16]
   1493a:	e041      	b.n	149c0 <_printf_i+0x114>
   1493c:	2963      	cmp	r1, #99	; 0x63
   1493e:	f000 80e5 	beq.w	14b0c <_printf_i+0x260>
   14942:	d81a      	bhi.n	1497a <_printf_i+0xce>
   14944:	2900      	cmp	r1, #0
   14946:	d038      	beq.n	149ba <_printf_i+0x10e>
   14948:	2958      	cmp	r1, #88	; 0x58
   1494a:	f040 80d8 	bne.w	14afe <_printf_i+0x252>
   1494e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   14952:	6822      	ldr	r2, [r4, #0]
   14954:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 14b40 <_printf_i+0x294>
   14958:	e7c6      	b.n	148e8 <_printf_i+0x3c>
   1495a:	296f      	cmp	r1, #111	; 0x6f
   1495c:	f000 80bf 	beq.w	14ade <_printf_i+0x232>
   14960:	2970      	cmp	r1, #112	; 0x70
   14962:	f040 80cc 	bne.w	14afe <_printf_i+0x252>
   14966:	6822      	ldr	r2, [r4, #0]
   14968:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 14b3c <_printf_i+0x290>
   1496c:	f042 0220 	orr.w	r2, r2, #32
   14970:	2378      	movs	r3, #120	; 0x78
   14972:	6022      	str	r2, [r4, #0]
   14974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   14978:	e7b6      	b.n	148e8 <_printf_i+0x3c>
   1497a:	2964      	cmp	r1, #100	; 0x64
   1497c:	d002      	beq.n	14984 <_printf_i+0xd8>
   1497e:	2969      	cmp	r1, #105	; 0x69
   14980:	f040 80bd 	bne.w	14afe <_printf_i+0x252>
   14984:	6822      	ldr	r2, [r4, #0]
   14986:	6803      	ldr	r3, [r0, #0]
   14988:	0611      	lsls	r1, r2, #24
   1498a:	f103 0504 	add.w	r5, r3, #4
   1498e:	d557      	bpl.n	14a40 <_printf_i+0x194>
   14990:	6819      	ldr	r1, [r3, #0]
   14992:	6005      	str	r5, [r0, #0]
   14994:	460b      	mov	r3, r1
   14996:	2900      	cmp	r1, #0
   14998:	db59      	blt.n	14a4e <_printf_i+0x1a2>
   1499a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 14b40 <_printf_i+0x294>
   1499e:	220a      	movs	r2, #10
   149a0:	e7b5      	b.n	1490e <_printf_i+0x62>
   149a2:	6803      	ldr	r3, [r0, #0]
   149a4:	6822      	ldr	r2, [r4, #0]
   149a6:	6961      	ldr	r1, [r4, #20]
   149a8:	1d1d      	adds	r5, r3, #4
   149aa:	6005      	str	r5, [r0, #0]
   149ac:	0615      	lsls	r5, r2, #24
   149ae:	681b      	ldr	r3, [r3, #0]
   149b0:	d402      	bmi.n	149b8 <_printf_i+0x10c>
   149b2:	0650      	lsls	r0, r2, #25
   149b4:	f100 80bd 	bmi.w	14b32 <_printf_i+0x286>
   149b8:	6019      	str	r1, [r3, #0]
   149ba:	2300      	movs	r3, #0
   149bc:	4675      	mov	r5, lr
   149be:	6123      	str	r3, [r4, #16]
   149c0:	f8cd 8000 	str.w	r8, [sp]
   149c4:	463b      	mov	r3, r7
   149c6:	aa03      	add	r2, sp, #12
   149c8:	4621      	mov	r1, r4
   149ca:	4630      	mov	r0, r6
   149cc:	f7ff fed8 	bl	14780 <_printf_common>
   149d0:	3001      	adds	r0, #1
   149d2:	d020      	beq.n	14a16 <_printf_i+0x16a>
   149d4:	462a      	mov	r2, r5
   149d6:	6923      	ldr	r3, [r4, #16]
   149d8:	4639      	mov	r1, r7
   149da:	4630      	mov	r0, r6
   149dc:	47c0      	blx	r8
   149de:	3001      	adds	r0, #1
   149e0:	d019      	beq.n	14a16 <_printf_i+0x16a>
   149e2:	6822      	ldr	r2, [r4, #0]
   149e4:	9803      	ldr	r0, [sp, #12]
   149e6:	68e3      	ldr	r3, [r4, #12]
   149e8:	0792      	lsls	r2, r2, #30
   149ea:	d519      	bpl.n	14a20 <_printf_i+0x174>
   149ec:	1a1a      	subs	r2, r3, r0
   149ee:	2a00      	cmp	r2, #0
   149f0:	dd16      	ble.n	14a20 <_printf_i+0x174>
   149f2:	f104 0919 	add.w	r9, r4, #25
   149f6:	2500      	movs	r5, #0
   149f8:	e004      	b.n	14a04 <_printf_i+0x158>
   149fa:	68e3      	ldr	r3, [r4, #12]
   149fc:	9803      	ldr	r0, [sp, #12]
   149fe:	1a1a      	subs	r2, r3, r0
   14a00:	42aa      	cmp	r2, r5
   14a02:	dd0d      	ble.n	14a20 <_printf_i+0x174>
   14a04:	2301      	movs	r3, #1
   14a06:	464a      	mov	r2, r9
   14a08:	4639      	mov	r1, r7
   14a0a:	4630      	mov	r0, r6
   14a0c:	47c0      	blx	r8
   14a0e:	3001      	adds	r0, #1
   14a10:	f105 0501 	add.w	r5, r5, #1
   14a14:	d1f1      	bne.n	149fa <_printf_i+0x14e>
   14a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a1a:	b005      	add	sp, #20
   14a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14a20:	4298      	cmp	r0, r3
   14a22:	bfb8      	it	lt
   14a24:	4618      	movlt	r0, r3
   14a26:	b005      	add	sp, #20
   14a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14a2c:	6822      	ldr	r2, [r4, #0]
   14a2e:	f022 0220 	bic.w	r2, r2, #32
   14a32:	6022      	str	r2, [r4, #0]
   14a34:	2210      	movs	r2, #16
   14a36:	e767      	b.n	14908 <_printf_i+0x5c>
   14a38:	0650      	lsls	r0, r2, #25
   14a3a:	bf48      	it	mi
   14a3c:	b29b      	uxthmi	r3, r3
   14a3e:	e75a      	b.n	148f6 <_printf_i+0x4a>
   14a40:	0651      	lsls	r1, r2, #25
   14a42:	d5a5      	bpl.n	14990 <_printf_i+0xe4>
   14a44:	f9b3 3000 	ldrsh.w	r3, [r3]
   14a48:	6005      	str	r5, [r0, #0]
   14a4a:	4619      	mov	r1, r3
   14a4c:	e7a3      	b.n	14996 <_printf_i+0xea>
   14a4e:	6861      	ldr	r1, [r4, #4]
   14a50:	60a1      	str	r1, [r4, #8]
   14a52:	202d      	movs	r0, #45	; 0x2d
   14a54:	2900      	cmp	r1, #0
   14a56:	f1c3 0300 	rsb	r3, r3, #0
   14a5a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   14a5e:	db02      	blt.n	14a66 <_printf_i+0x1ba>
   14a60:	f022 0204 	bic.w	r2, r2, #4
   14a64:	6022      	str	r2, [r4, #0]
   14a66:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 14b40 <_printf_i+0x294>
   14a6a:	220a      	movs	r2, #10
   14a6c:	4675      	mov	r5, lr
   14a6e:	e000      	b.n	14a72 <_printf_i+0x1c6>
   14a70:	460b      	mov	r3, r1
   14a72:	fbb3 f1f2 	udiv	r1, r3, r2
   14a76:	fb02 3011 	mls	r0, r2, r1, r3
   14a7a:	4293      	cmp	r3, r2
   14a7c:	f81c 0000 	ldrb.w	r0, [ip, r0]
   14a80:	f805 0d01 	strb.w	r0, [r5, #-1]!
   14a84:	d2f4      	bcs.n	14a70 <_printf_i+0x1c4>
   14a86:	2a08      	cmp	r2, #8
   14a88:	f47f af54 	bne.w	14934 <_printf_i+0x88>
   14a8c:	6823      	ldr	r3, [r4, #0]
   14a8e:	07db      	lsls	r3, r3, #31
   14a90:	f57f af50 	bpl.w	14934 <_printf_i+0x88>
   14a94:	6862      	ldr	r2, [r4, #4]
   14a96:	6923      	ldr	r3, [r4, #16]
   14a98:	429a      	cmp	r2, r3
   14a9a:	f73f af4b 	bgt.w	14934 <_printf_i+0x88>
   14a9e:	2330      	movs	r3, #48	; 0x30
   14aa0:	f805 3c01 	strb.w	r3, [r5, #-1]
   14aa4:	3d01      	subs	r5, #1
   14aa6:	e745      	b.n	14934 <_printf_i+0x88>
   14aa8:	2b00      	cmp	r3, #0
   14aaa:	d1df      	bne.n	14a6c <_printf_i+0x1c0>
   14aac:	f89c 3000 	ldrb.w	r3, [ip]
   14ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   14ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
   14ab8:	e739      	b.n	1492e <_printf_i+0x82>
   14aba:	6803      	ldr	r3, [r0, #0]
   14abc:	6862      	ldr	r2, [r4, #4]
   14abe:	1d19      	adds	r1, r3, #4
   14ac0:	6001      	str	r1, [r0, #0]
   14ac2:	681d      	ldr	r5, [r3, #0]
   14ac4:	2100      	movs	r1, #0
   14ac6:	4628      	mov	r0, r5
   14ac8:	f000 fa72 	bl	14fb0 <memchr>
   14acc:	2800      	cmp	r0, #0
   14ace:	d032      	beq.n	14b36 <_printf_i+0x28a>
   14ad0:	1b40      	subs	r0, r0, r5
   14ad2:	6060      	str	r0, [r4, #4]
   14ad4:	6120      	str	r0, [r4, #16]
   14ad6:	2300      	movs	r3, #0
   14ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   14adc:	e770      	b.n	149c0 <_printf_i+0x114>
   14ade:	6822      	ldr	r2, [r4, #0]
   14ae0:	6803      	ldr	r3, [r0, #0]
   14ae2:	f012 0f80 	tst.w	r2, #128	; 0x80
   14ae6:	f103 0504 	add.w	r5, r3, #4
   14aea:	d01a      	beq.n	14b22 <_printf_i+0x276>
   14aec:	681b      	ldr	r3, [r3, #0]
   14aee:	6005      	str	r5, [r0, #0]
   14af0:	296f      	cmp	r1, #111	; 0x6f
   14af2:	bf0c      	ite	eq
   14af4:	2208      	moveq	r2, #8
   14af6:	220a      	movne	r2, #10
   14af8:	f8df c044 	ldr.w	ip, [pc, #68]	; 14b40 <_printf_i+0x294>
   14afc:	e704      	b.n	14908 <_printf_i+0x5c>
   14afe:	2301      	movs	r3, #1
   14b00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   14b04:	6123      	str	r3, [r4, #16]
   14b06:	f104 0542 	add.w	r5, r4, #66	; 0x42
   14b0a:	e7e4      	b.n	14ad6 <_printf_i+0x22a>
   14b0c:	6803      	ldr	r3, [r0, #0]
   14b0e:	681a      	ldr	r2, [r3, #0]
   14b10:	1d19      	adds	r1, r3, #4
   14b12:	2301      	movs	r3, #1
   14b14:	6001      	str	r1, [r0, #0]
   14b16:	f104 0542 	add.w	r5, r4, #66	; 0x42
   14b1a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   14b1e:	6123      	str	r3, [r4, #16]
   14b20:	e7d9      	b.n	14ad6 <_printf_i+0x22a>
   14b22:	f012 0f40 	tst.w	r2, #64	; 0x40
   14b26:	bf0d      	iteet	eq
   14b28:	681b      	ldreq	r3, [r3, #0]
   14b2a:	6005      	strne	r5, [r0, #0]
   14b2c:	881b      	ldrhne	r3, [r3, #0]
   14b2e:	6005      	streq	r5, [r0, #0]
   14b30:	e7de      	b.n	14af0 <_printf_i+0x244>
   14b32:	8019      	strh	r1, [r3, #0]
   14b34:	e741      	b.n	149ba <_printf_i+0x10e>
   14b36:	6860      	ldr	r0, [r4, #4]
   14b38:	e7cc      	b.n	14ad4 <_printf_i+0x228>
   14b3a:	bf00      	nop
   14b3c:	00016058 	.word	0x00016058
   14b40:	00016044 	.word	0x00016044

00014b44 <__sread>:
   14b44:	b510      	push	{r4, lr}
   14b46:	460c      	mov	r4, r1
   14b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14b4c:	f000 fb0e 	bl	1516c <_read_r>
   14b50:	2800      	cmp	r0, #0
   14b52:	db03      	blt.n	14b5c <__sread+0x18>
   14b54:	6d63      	ldr	r3, [r4, #84]	; 0x54
   14b56:	4403      	add	r3, r0
   14b58:	6563      	str	r3, [r4, #84]	; 0x54
   14b5a:	bd10      	pop	{r4, pc}
   14b5c:	89a3      	ldrh	r3, [r4, #12]
   14b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   14b62:	81a3      	strh	r3, [r4, #12]
   14b64:	bd10      	pop	{r4, pc}
   14b66:	bf00      	nop

00014b68 <__seofread>:
   14b68:	2000      	movs	r0, #0
   14b6a:	4770      	bx	lr

00014b6c <__swrite>:
   14b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b70:	4616      	mov	r6, r2
   14b72:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   14b76:	461f      	mov	r7, r3
   14b78:	05d3      	lsls	r3, r2, #23
   14b7a:	460c      	mov	r4, r1
   14b7c:	4605      	mov	r5, r0
   14b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14b82:	d409      	bmi.n	14b98 <__swrite+0x2c>
   14b84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   14b88:	81a2      	strh	r2, [r4, #12]
   14b8a:	463b      	mov	r3, r7
   14b8c:	4632      	mov	r2, r6
   14b8e:	4628      	mov	r0, r5
   14b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14b94:	f000 b81e 	b.w	14bd4 <_write_r>
   14b98:	2200      	movs	r2, #0
   14b9a:	2302      	movs	r3, #2
   14b9c:	f000 f9ec 	bl	14f78 <_lseek_r>
   14ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14ba8:	e7ec      	b.n	14b84 <__swrite+0x18>
   14baa:	bf00      	nop

00014bac <__sseek>:
   14bac:	b510      	push	{r4, lr}
   14bae:	460c      	mov	r4, r1
   14bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14bb4:	f000 f9e0 	bl	14f78 <_lseek_r>
   14bb8:	89a3      	ldrh	r3, [r4, #12]
   14bba:	1c42      	adds	r2, r0, #1
   14bbc:	bf0e      	itee	eq
   14bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   14bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   14bc6:	6560      	strne	r0, [r4, #84]	; 0x54
   14bc8:	81a3      	strh	r3, [r4, #12]
   14bca:	bd10      	pop	{r4, pc}

00014bcc <__sclose>:
   14bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14bd0:	f000 b816 	b.w	14c00 <_close_r>

00014bd4 <_write_r>:
   14bd4:	b570      	push	{r4, r5, r6, lr}
   14bd6:	460d      	mov	r5, r1
   14bd8:	4c08      	ldr	r4, [pc, #32]	; (14bfc <_write_r+0x28>)
   14bda:	4611      	mov	r1, r2
   14bdc:	4606      	mov	r6, r0
   14bde:	461a      	mov	r2, r3
   14be0:	4628      	mov	r0, r5
   14be2:	2300      	movs	r3, #0
   14be4:	6023      	str	r3, [r4, #0]
   14be6:	f7f6 fdb9 	bl	b75c <_write>
   14bea:	1c43      	adds	r3, r0, #1
   14bec:	d000      	beq.n	14bf0 <_write_r+0x1c>
   14bee:	bd70      	pop	{r4, r5, r6, pc}
   14bf0:	6823      	ldr	r3, [r4, #0]
   14bf2:	2b00      	cmp	r3, #0
   14bf4:	d0fb      	beq.n	14bee <_write_r+0x1a>
   14bf6:	6033      	str	r3, [r6, #0]
   14bf8:	bd70      	pop	{r4, r5, r6, pc}
   14bfa:	bf00      	nop
   14bfc:	20014e34 	.word	0x20014e34

00014c00 <_close_r>:
   14c00:	b538      	push	{r3, r4, r5, lr}
   14c02:	4c07      	ldr	r4, [pc, #28]	; (14c20 <_close_r+0x20>)
   14c04:	2300      	movs	r3, #0
   14c06:	4605      	mov	r5, r0
   14c08:	4608      	mov	r0, r1
   14c0a:	6023      	str	r3, [r4, #0]
   14c0c:	f7f6 ff82 	bl	bb14 <_close>
   14c10:	1c43      	adds	r3, r0, #1
   14c12:	d000      	beq.n	14c16 <_close_r+0x16>
   14c14:	bd38      	pop	{r3, r4, r5, pc}
   14c16:	6823      	ldr	r3, [r4, #0]
   14c18:	2b00      	cmp	r3, #0
   14c1a:	d0fb      	beq.n	14c14 <_close_r+0x14>
   14c1c:	602b      	str	r3, [r5, #0]
   14c1e:	bd38      	pop	{r3, r4, r5, pc}
   14c20:	20014e34 	.word	0x20014e34

00014c24 <_fstat_r>:
   14c24:	b538      	push	{r3, r4, r5, lr}
   14c26:	460b      	mov	r3, r1
   14c28:	4c07      	ldr	r4, [pc, #28]	; (14c48 <_fstat_r+0x24>)
   14c2a:	4605      	mov	r5, r0
   14c2c:	4611      	mov	r1, r2
   14c2e:	4618      	mov	r0, r3
   14c30:	2300      	movs	r3, #0
   14c32:	6023      	str	r3, [r4, #0]
   14c34:	f7f6 ff71 	bl	bb1a <_fstat>
   14c38:	1c43      	adds	r3, r0, #1
   14c3a:	d000      	beq.n	14c3e <_fstat_r+0x1a>
   14c3c:	bd38      	pop	{r3, r4, r5, pc}
   14c3e:	6823      	ldr	r3, [r4, #0]
   14c40:	2b00      	cmp	r3, #0
   14c42:	d0fb      	beq.n	14c3c <_fstat_r+0x18>
   14c44:	602b      	str	r3, [r5, #0]
   14c46:	bd38      	pop	{r3, r4, r5, pc}
   14c48:	20014e34 	.word	0x20014e34

00014c4c <__sfvwrite_r>:
   14c4c:	6893      	ldr	r3, [r2, #8]
   14c4e:	2b00      	cmp	r3, #0
   14c50:	f000 8102 	beq.w	14e58 <__sfvwrite_r+0x20c>
   14c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c58:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   14c5c:	b29b      	uxth	r3, r3
   14c5e:	460c      	mov	r4, r1
   14c60:	0719      	lsls	r1, r3, #28
   14c62:	b083      	sub	sp, #12
   14c64:	4682      	mov	sl, r0
   14c66:	4690      	mov	r8, r2
   14c68:	d535      	bpl.n	14cd6 <__sfvwrite_r+0x8a>
   14c6a:	6922      	ldr	r2, [r4, #16]
   14c6c:	b39a      	cbz	r2, 14cd6 <__sfvwrite_r+0x8a>
   14c6e:	f013 0202 	ands.w	r2, r3, #2
   14c72:	f8d8 6000 	ldr.w	r6, [r8]
   14c76:	d03d      	beq.n	14cf4 <__sfvwrite_r+0xa8>
   14c78:	2700      	movs	r7, #0
   14c7a:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
   14c7e:	f8d4 c020 	ldr.w	ip, [r4, #32]
   14c82:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 14f50 <__sfvwrite_r+0x304>
   14c86:	463d      	mov	r5, r7
   14c88:	454d      	cmp	r5, r9
   14c8a:	462b      	mov	r3, r5
   14c8c:	463a      	mov	r2, r7
   14c8e:	bf28      	it	cs
   14c90:	464b      	movcs	r3, r9
   14c92:	4661      	mov	r1, ip
   14c94:	4650      	mov	r0, sl
   14c96:	b1d5      	cbz	r5, 14cce <__sfvwrite_r+0x82>
   14c98:	47d8      	blx	fp
   14c9a:	2800      	cmp	r0, #0
   14c9c:	f340 80d2 	ble.w	14e44 <__sfvwrite_r+0x1f8>
   14ca0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14ca4:	1a1b      	subs	r3, r3, r0
   14ca6:	4407      	add	r7, r0
   14ca8:	1a2d      	subs	r5, r5, r0
   14caa:	f8c8 3008 	str.w	r3, [r8, #8]
   14cae:	2b00      	cmp	r3, #0
   14cb0:	f000 80b7 	beq.w	14e22 <__sfvwrite_r+0x1d6>
   14cb4:	f8d4 c020 	ldr.w	ip, [r4, #32]
   14cb8:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
   14cbc:	454d      	cmp	r5, r9
   14cbe:	462b      	mov	r3, r5
   14cc0:	463a      	mov	r2, r7
   14cc2:	bf28      	it	cs
   14cc4:	464b      	movcs	r3, r9
   14cc6:	4661      	mov	r1, ip
   14cc8:	4650      	mov	r0, sl
   14cca:	2d00      	cmp	r5, #0
   14ccc:	d1e4      	bne.n	14c98 <__sfvwrite_r+0x4c>
   14cce:	e9d6 7500 	ldrd	r7, r5, [r6]
   14cd2:	3608      	adds	r6, #8
   14cd4:	e7d8      	b.n	14c88 <__sfvwrite_r+0x3c>
   14cd6:	4621      	mov	r1, r4
   14cd8:	4650      	mov	r0, sl
   14cda:	f7fe fe5f 	bl	1399c <__swsetup_r>
   14cde:	2800      	cmp	r0, #0
   14ce0:	f040 8130 	bne.w	14f44 <__sfvwrite_r+0x2f8>
   14ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14ce8:	f8d8 6000 	ldr.w	r6, [r8]
   14cec:	b29b      	uxth	r3, r3
   14cee:	f013 0202 	ands.w	r2, r3, #2
   14cf2:	d1c1      	bne.n	14c78 <__sfvwrite_r+0x2c>
   14cf4:	f013 0901 	ands.w	r9, r3, #1
   14cf8:	f040 80b0 	bne.w	14e5c <__sfvwrite_r+0x210>
   14cfc:	68a7      	ldr	r7, [r4, #8]
   14cfe:	6820      	ldr	r0, [r4, #0]
   14d00:	464d      	mov	r5, r9
   14d02:	2d00      	cmp	r5, #0
   14d04:	d054      	beq.n	14db0 <__sfvwrite_r+0x164>
   14d06:	059a      	lsls	r2, r3, #22
   14d08:	f140 80bc 	bpl.w	14e84 <__sfvwrite_r+0x238>
   14d0c:	42af      	cmp	r7, r5
   14d0e:	46bb      	mov	fp, r7
   14d10:	f200 80e7 	bhi.w	14ee2 <__sfvwrite_r+0x296>
   14d14:	f413 6f90 	tst.w	r3, #1152	; 0x480
   14d18:	d02f      	beq.n	14d7a <__sfvwrite_r+0x12e>
   14d1a:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   14d1e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   14d22:	eba0 0b01 	sub.w	fp, r0, r1
   14d26:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   14d2a:	1c68      	adds	r0, r5, #1
   14d2c:	107f      	asrs	r7, r7, #1
   14d2e:	4458      	add	r0, fp
   14d30:	42b8      	cmp	r0, r7
   14d32:	463a      	mov	r2, r7
   14d34:	bf84      	itt	hi
   14d36:	4607      	movhi	r7, r0
   14d38:	463a      	movhi	r2, r7
   14d3a:	055b      	lsls	r3, r3, #21
   14d3c:	f140 80e9 	bpl.w	14f12 <__sfvwrite_r+0x2c6>
   14d40:	4611      	mov	r1, r2
   14d42:	4650      	mov	r0, sl
   14d44:	f7fe f87c 	bl	12e40 <_malloc_r>
   14d48:	2800      	cmp	r0, #0
   14d4a:	f000 80f5 	beq.w	14f38 <__sfvwrite_r+0x2ec>
   14d4e:	465a      	mov	r2, fp
   14d50:	6921      	ldr	r1, [r4, #16]
   14d52:	9001      	str	r0, [sp, #4]
   14d54:	f7fd ff34 	bl	12bc0 <memcpy>
   14d58:	89a2      	ldrh	r2, [r4, #12]
   14d5a:	9b01      	ldr	r3, [sp, #4]
   14d5c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   14d60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14d64:	81a2      	strh	r2, [r4, #12]
   14d66:	eba7 020b 	sub.w	r2, r7, fp
   14d6a:	eb03 000b 	add.w	r0, r3, fp
   14d6e:	6167      	str	r7, [r4, #20]
   14d70:	6123      	str	r3, [r4, #16]
   14d72:	6020      	str	r0, [r4, #0]
   14d74:	60a2      	str	r2, [r4, #8]
   14d76:	462f      	mov	r7, r5
   14d78:	46ab      	mov	fp, r5
   14d7a:	465a      	mov	r2, fp
   14d7c:	4649      	mov	r1, r9
   14d7e:	f000 f967 	bl	15050 <memmove>
   14d82:	68a2      	ldr	r2, [r4, #8]
   14d84:	6823      	ldr	r3, [r4, #0]
   14d86:	1bd2      	subs	r2, r2, r7
   14d88:	445b      	add	r3, fp
   14d8a:	462f      	mov	r7, r5
   14d8c:	60a2      	str	r2, [r4, #8]
   14d8e:	6023      	str	r3, [r4, #0]
   14d90:	2500      	movs	r5, #0
   14d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14d96:	1bdb      	subs	r3, r3, r7
   14d98:	44b9      	add	r9, r7
   14d9a:	f8c8 3008 	str.w	r3, [r8, #8]
   14d9e:	2b00      	cmp	r3, #0
   14da0:	d03f      	beq.n	14e22 <__sfvwrite_r+0x1d6>
   14da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14da6:	68a7      	ldr	r7, [r4, #8]
   14da8:	6820      	ldr	r0, [r4, #0]
   14daa:	b29b      	uxth	r3, r3
   14dac:	2d00      	cmp	r5, #0
   14dae:	d1aa      	bne.n	14d06 <__sfvwrite_r+0xba>
   14db0:	e9d6 9500 	ldrd	r9, r5, [r6]
   14db4:	3608      	adds	r6, #8
   14db6:	e7a4      	b.n	14d02 <__sfvwrite_r+0xb6>
   14db8:	f10b 0308 	add.w	r3, fp, #8
   14dbc:	e953 6702 	ldrd	r6, r7, [r3, #-8]
   14dc0:	469b      	mov	fp, r3
   14dc2:	3308      	adds	r3, #8
   14dc4:	2f00      	cmp	r7, #0
   14dc6:	d0f9      	beq.n	14dbc <__sfvwrite_r+0x170>
   14dc8:	463a      	mov	r2, r7
   14dca:	210a      	movs	r1, #10
   14dcc:	4630      	mov	r0, r6
   14dce:	f000 f8ef 	bl	14fb0 <memchr>
   14dd2:	2800      	cmp	r0, #0
   14dd4:	d053      	beq.n	14e7e <__sfvwrite_r+0x232>
   14dd6:	3001      	adds	r0, #1
   14dd8:	eba0 0906 	sub.w	r9, r0, r6
   14ddc:	464b      	mov	r3, r9
   14dde:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   14de2:	6820      	ldr	r0, [r4, #0]
   14de4:	42bb      	cmp	r3, r7
   14de6:	bf28      	it	cs
   14de8:	463b      	movcs	r3, r7
   14dea:	4288      	cmp	r0, r1
   14dec:	d903      	bls.n	14df6 <__sfvwrite_r+0x1aa>
   14dee:	68a5      	ldr	r5, [r4, #8]
   14df0:	4415      	add	r5, r2
   14df2:	42ab      	cmp	r3, r5
   14df4:	dc19      	bgt.n	14e2a <__sfvwrite_r+0x1de>
   14df6:	429a      	cmp	r2, r3
   14df8:	dc7d      	bgt.n	14ef6 <__sfvwrite_r+0x2aa>
   14dfa:	4613      	mov	r3, r2
   14dfc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   14dfe:	6a21      	ldr	r1, [r4, #32]
   14e00:	4632      	mov	r2, r6
   14e02:	4650      	mov	r0, sl
   14e04:	47a8      	blx	r5
   14e06:	1e05      	subs	r5, r0, #0
   14e08:	dd1c      	ble.n	14e44 <__sfvwrite_r+0x1f8>
   14e0a:	ebb9 0905 	subs.w	r9, r9, r5
   14e0e:	d06b      	beq.n	14ee8 <__sfvwrite_r+0x29c>
   14e10:	2001      	movs	r0, #1
   14e12:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14e16:	1b5b      	subs	r3, r3, r5
   14e18:	442e      	add	r6, r5
   14e1a:	1b7f      	subs	r7, r7, r5
   14e1c:	f8c8 3008 	str.w	r3, [r8, #8]
   14e20:	bb13      	cbnz	r3, 14e68 <__sfvwrite_r+0x21c>
   14e22:	2000      	movs	r0, #0
   14e24:	b003      	add	sp, #12
   14e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e2a:	4631      	mov	r1, r6
   14e2c:	462a      	mov	r2, r5
   14e2e:	f000 f90f 	bl	15050 <memmove>
   14e32:	6823      	ldr	r3, [r4, #0]
   14e34:	442b      	add	r3, r5
   14e36:	6023      	str	r3, [r4, #0]
   14e38:	4621      	mov	r1, r4
   14e3a:	4650      	mov	r0, sl
   14e3c:	f7fe fec4 	bl	13bc8 <_fflush_r>
   14e40:	2800      	cmp	r0, #0
   14e42:	d0e2      	beq.n	14e0a <__sfvwrite_r+0x1be>
   14e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14e50:	81a3      	strh	r3, [r4, #12]
   14e52:	b003      	add	sp, #12
   14e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e58:	2000      	movs	r0, #0
   14e5a:	4770      	bx	lr
   14e5c:	4633      	mov	r3, r6
   14e5e:	4691      	mov	r9, r2
   14e60:	4610      	mov	r0, r2
   14e62:	4617      	mov	r7, r2
   14e64:	464e      	mov	r6, r9
   14e66:	469b      	mov	fp, r3
   14e68:	2f00      	cmp	r7, #0
   14e6a:	d0a5      	beq.n	14db8 <__sfvwrite_r+0x16c>
   14e6c:	2800      	cmp	r0, #0
   14e6e:	d1b5      	bne.n	14ddc <__sfvwrite_r+0x190>
   14e70:	463a      	mov	r2, r7
   14e72:	210a      	movs	r1, #10
   14e74:	4630      	mov	r0, r6
   14e76:	f000 f89b 	bl	14fb0 <memchr>
   14e7a:	2800      	cmp	r0, #0
   14e7c:	d1ab      	bne.n	14dd6 <__sfvwrite_r+0x18a>
   14e7e:	1c7b      	adds	r3, r7, #1
   14e80:	4699      	mov	r9, r3
   14e82:	e7ac      	b.n	14dde <__sfvwrite_r+0x192>
   14e84:	6923      	ldr	r3, [r4, #16]
   14e86:	4283      	cmp	r3, r0
   14e88:	d315      	bcc.n	14eb6 <__sfvwrite_r+0x26a>
   14e8a:	6961      	ldr	r1, [r4, #20]
   14e8c:	42a9      	cmp	r1, r5
   14e8e:	d812      	bhi.n	14eb6 <__sfvwrite_r+0x26a>
   14e90:	4b2e      	ldr	r3, [pc, #184]	; (14f4c <__sfvwrite_r+0x300>)
   14e92:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   14e94:	429d      	cmp	r5, r3
   14e96:	bf94      	ite	ls
   14e98:	462b      	movls	r3, r5
   14e9a:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
   14e9e:	464a      	mov	r2, r9
   14ea0:	fb93 f3f1 	sdiv	r3, r3, r1
   14ea4:	4650      	mov	r0, sl
   14ea6:	fb01 f303 	mul.w	r3, r1, r3
   14eaa:	6a21      	ldr	r1, [r4, #32]
   14eac:	47b8      	blx	r7
   14eae:	1e07      	subs	r7, r0, #0
   14eb0:	ddc8      	ble.n	14e44 <__sfvwrite_r+0x1f8>
   14eb2:	1bed      	subs	r5, r5, r7
   14eb4:	e76d      	b.n	14d92 <__sfvwrite_r+0x146>
   14eb6:	42af      	cmp	r7, r5
   14eb8:	bf28      	it	cs
   14eba:	462f      	movcs	r7, r5
   14ebc:	463a      	mov	r2, r7
   14ebe:	4649      	mov	r1, r9
   14ec0:	f000 f8c6 	bl	15050 <memmove>
   14ec4:	68a3      	ldr	r3, [r4, #8]
   14ec6:	6822      	ldr	r2, [r4, #0]
   14ec8:	1bdb      	subs	r3, r3, r7
   14eca:	443a      	add	r2, r7
   14ecc:	60a3      	str	r3, [r4, #8]
   14ece:	6022      	str	r2, [r4, #0]
   14ed0:	2b00      	cmp	r3, #0
   14ed2:	d1ee      	bne.n	14eb2 <__sfvwrite_r+0x266>
   14ed4:	4621      	mov	r1, r4
   14ed6:	4650      	mov	r0, sl
   14ed8:	f7fe fe76 	bl	13bc8 <_fflush_r>
   14edc:	2800      	cmp	r0, #0
   14ede:	d0e8      	beq.n	14eb2 <__sfvwrite_r+0x266>
   14ee0:	e7b0      	b.n	14e44 <__sfvwrite_r+0x1f8>
   14ee2:	462f      	mov	r7, r5
   14ee4:	46ab      	mov	fp, r5
   14ee6:	e748      	b.n	14d7a <__sfvwrite_r+0x12e>
   14ee8:	4621      	mov	r1, r4
   14eea:	4650      	mov	r0, sl
   14eec:	f7fe fe6c 	bl	13bc8 <_fflush_r>
   14ef0:	2800      	cmp	r0, #0
   14ef2:	d08e      	beq.n	14e12 <__sfvwrite_r+0x1c6>
   14ef4:	e7a6      	b.n	14e44 <__sfvwrite_r+0x1f8>
   14ef6:	461a      	mov	r2, r3
   14ef8:	4631      	mov	r1, r6
   14efa:	9301      	str	r3, [sp, #4]
   14efc:	f000 f8a8 	bl	15050 <memmove>
   14f00:	9b01      	ldr	r3, [sp, #4]
   14f02:	68a1      	ldr	r1, [r4, #8]
   14f04:	6822      	ldr	r2, [r4, #0]
   14f06:	1ac9      	subs	r1, r1, r3
   14f08:	441a      	add	r2, r3
   14f0a:	60a1      	str	r1, [r4, #8]
   14f0c:	6022      	str	r2, [r4, #0]
   14f0e:	461d      	mov	r5, r3
   14f10:	e77b      	b.n	14e0a <__sfvwrite_r+0x1be>
   14f12:	4650      	mov	r0, sl
   14f14:	f000 f904 	bl	15120 <_realloc_r>
   14f18:	4603      	mov	r3, r0
   14f1a:	2800      	cmp	r0, #0
   14f1c:	f47f af23 	bne.w	14d66 <__sfvwrite_r+0x11a>
   14f20:	6921      	ldr	r1, [r4, #16]
   14f22:	4650      	mov	r0, sl
   14f24:	f7fd ff36 	bl	12d94 <_free_r>
   14f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14f2c:	220c      	movs	r2, #12
   14f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14f32:	f8ca 2000 	str.w	r2, [sl]
   14f36:	e787      	b.n	14e48 <__sfvwrite_r+0x1fc>
   14f38:	230c      	movs	r3, #12
   14f3a:	f8ca 3000 	str.w	r3, [sl]
   14f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14f42:	e781      	b.n	14e48 <__sfvwrite_r+0x1fc>
   14f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14f48:	e76c      	b.n	14e24 <__sfvwrite_r+0x1d8>
   14f4a:	bf00      	nop
   14f4c:	7ffffffe 	.word	0x7ffffffe
   14f50:	7ffffc00 	.word	0x7ffffc00

00014f54 <_isatty_r>:
   14f54:	b538      	push	{r3, r4, r5, lr}
   14f56:	4c07      	ldr	r4, [pc, #28]	; (14f74 <_isatty_r+0x20>)
   14f58:	2300      	movs	r3, #0
   14f5a:	4605      	mov	r5, r0
   14f5c:	4608      	mov	r0, r1
   14f5e:	6023      	str	r3, [r4, #0]
   14f60:	f7f6 fde0 	bl	bb24 <_isatty>
   14f64:	1c43      	adds	r3, r0, #1
   14f66:	d000      	beq.n	14f6a <_isatty_r+0x16>
   14f68:	bd38      	pop	{r3, r4, r5, pc}
   14f6a:	6823      	ldr	r3, [r4, #0]
   14f6c:	2b00      	cmp	r3, #0
   14f6e:	d0fb      	beq.n	14f68 <_isatty_r+0x14>
   14f70:	602b      	str	r3, [r5, #0]
   14f72:	bd38      	pop	{r3, r4, r5, pc}
   14f74:	20014e34 	.word	0x20014e34

00014f78 <_lseek_r>:
   14f78:	b570      	push	{r4, r5, r6, lr}
   14f7a:	460d      	mov	r5, r1
   14f7c:	4c08      	ldr	r4, [pc, #32]	; (14fa0 <_lseek_r+0x28>)
   14f7e:	4611      	mov	r1, r2
   14f80:	4606      	mov	r6, r0
   14f82:	461a      	mov	r2, r3
   14f84:	4628      	mov	r0, r5
   14f86:	2300      	movs	r3, #0
   14f88:	6023      	str	r3, [r4, #0]
   14f8a:	f7f6 fdcd 	bl	bb28 <_lseek>
   14f8e:	1c43      	adds	r3, r0, #1
   14f90:	d000      	beq.n	14f94 <_lseek_r+0x1c>
   14f92:	bd70      	pop	{r4, r5, r6, pc}
   14f94:	6823      	ldr	r3, [r4, #0]
   14f96:	2b00      	cmp	r3, #0
   14f98:	d0fb      	beq.n	14f92 <_lseek_r+0x1a>
   14f9a:	6033      	str	r3, [r6, #0]
   14f9c:	bd70      	pop	{r4, r5, r6, pc}
   14f9e:	bf00      	nop
   14fa0:	20014e34 	.word	0x20014e34
	...

00014fb0 <memchr>:
   14fb0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   14fb4:	2a10      	cmp	r2, #16
   14fb6:	db2b      	blt.n	15010 <memchr+0x60>
   14fb8:	f010 0f07 	tst.w	r0, #7
   14fbc:	d008      	beq.n	14fd0 <memchr+0x20>
   14fbe:	f810 3b01 	ldrb.w	r3, [r0], #1
   14fc2:	3a01      	subs	r2, #1
   14fc4:	428b      	cmp	r3, r1
   14fc6:	d02d      	beq.n	15024 <memchr+0x74>
   14fc8:	f010 0f07 	tst.w	r0, #7
   14fcc:	b342      	cbz	r2, 15020 <memchr+0x70>
   14fce:	d1f6      	bne.n	14fbe <memchr+0xe>
   14fd0:	b4f0      	push	{r4, r5, r6, r7}
   14fd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   14fd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   14fda:	f022 0407 	bic.w	r4, r2, #7
   14fde:	f07f 0700 	mvns.w	r7, #0
   14fe2:	2300      	movs	r3, #0
   14fe4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   14fe8:	3c08      	subs	r4, #8
   14fea:	ea85 0501 	eor.w	r5, r5, r1
   14fee:	ea86 0601 	eor.w	r6, r6, r1
   14ff2:	fa85 f547 	uadd8	r5, r5, r7
   14ff6:	faa3 f587 	sel	r5, r3, r7
   14ffa:	fa86 f647 	uadd8	r6, r6, r7
   14ffe:	faa5 f687 	sel	r6, r5, r7
   15002:	b98e      	cbnz	r6, 15028 <memchr+0x78>
   15004:	d1ee      	bne.n	14fe4 <memchr+0x34>
   15006:	bcf0      	pop	{r4, r5, r6, r7}
   15008:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1500c:	f002 0207 	and.w	r2, r2, #7
   15010:	b132      	cbz	r2, 15020 <memchr+0x70>
   15012:	f810 3b01 	ldrb.w	r3, [r0], #1
   15016:	3a01      	subs	r2, #1
   15018:	ea83 0301 	eor.w	r3, r3, r1
   1501c:	b113      	cbz	r3, 15024 <memchr+0x74>
   1501e:	d1f8      	bne.n	15012 <memchr+0x62>
   15020:	2000      	movs	r0, #0
   15022:	4770      	bx	lr
   15024:	3801      	subs	r0, #1
   15026:	4770      	bx	lr
   15028:	2d00      	cmp	r5, #0
   1502a:	bf06      	itte	eq
   1502c:	4635      	moveq	r5, r6
   1502e:	3803      	subeq	r0, #3
   15030:	3807      	subne	r0, #7
   15032:	f015 0f01 	tst.w	r5, #1
   15036:	d107      	bne.n	15048 <memchr+0x98>
   15038:	3001      	adds	r0, #1
   1503a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1503e:	bf02      	ittt	eq
   15040:	3001      	addeq	r0, #1
   15042:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   15046:	3001      	addeq	r0, #1
   15048:	bcf0      	pop	{r4, r5, r6, r7}
   1504a:	3801      	subs	r0, #1
   1504c:	4770      	bx	lr
   1504e:	bf00      	nop

00015050 <memmove>:
   15050:	4288      	cmp	r0, r1
   15052:	b4f0      	push	{r4, r5, r6, r7}
   15054:	d90d      	bls.n	15072 <memmove+0x22>
   15056:	188b      	adds	r3, r1, r2
   15058:	4283      	cmp	r3, r0
   1505a:	d90a      	bls.n	15072 <memmove+0x22>
   1505c:	1884      	adds	r4, r0, r2
   1505e:	b132      	cbz	r2, 1506e <memmove+0x1e>
   15060:	4622      	mov	r2, r4
   15062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   15066:	f802 4d01 	strb.w	r4, [r2, #-1]!
   1506a:	4299      	cmp	r1, r3
   1506c:	d1f9      	bne.n	15062 <memmove+0x12>
   1506e:	bcf0      	pop	{r4, r5, r6, r7}
   15070:	4770      	bx	lr
   15072:	2a0f      	cmp	r2, #15
   15074:	d80e      	bhi.n	15094 <memmove+0x44>
   15076:	4603      	mov	r3, r0
   15078:	1e54      	subs	r4, r2, #1
   1507a:	2a00      	cmp	r2, #0
   1507c:	d0f7      	beq.n	1506e <memmove+0x1e>
   1507e:	3401      	adds	r4, #1
   15080:	440c      	add	r4, r1
   15082:	3b01      	subs	r3, #1
   15084:	f811 2b01 	ldrb.w	r2, [r1], #1
   15088:	f803 2f01 	strb.w	r2, [r3, #1]!
   1508c:	42a1      	cmp	r1, r4
   1508e:	d1f9      	bne.n	15084 <memmove+0x34>
   15090:	bcf0      	pop	{r4, r5, r6, r7}
   15092:	4770      	bx	lr
   15094:	ea40 0301 	orr.w	r3, r0, r1
   15098:	079b      	lsls	r3, r3, #30
   1509a:	d13b      	bne.n	15114 <memmove+0xc4>
   1509c:	f1a2 0710 	sub.w	r7, r2, #16
   150a0:	093f      	lsrs	r7, r7, #4
   150a2:	f101 0620 	add.w	r6, r1, #32
   150a6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   150aa:	f101 0310 	add.w	r3, r1, #16
   150ae:	f100 0410 	add.w	r4, r0, #16
   150b2:	f853 5c10 	ldr.w	r5, [r3, #-16]
   150b6:	f844 5c10 	str.w	r5, [r4, #-16]
   150ba:	f853 5c0c 	ldr.w	r5, [r3, #-12]
   150be:	f844 5c0c 	str.w	r5, [r4, #-12]
   150c2:	f853 5c08 	ldr.w	r5, [r3, #-8]
   150c6:	f844 5c08 	str.w	r5, [r4, #-8]
   150ca:	f853 5c04 	ldr.w	r5, [r3, #-4]
   150ce:	f844 5c04 	str.w	r5, [r4, #-4]
   150d2:	3310      	adds	r3, #16
   150d4:	42b3      	cmp	r3, r6
   150d6:	f104 0410 	add.w	r4, r4, #16
   150da:	d1ea      	bne.n	150b2 <memmove+0x62>
   150dc:	1c7b      	adds	r3, r7, #1
   150de:	011b      	lsls	r3, r3, #4
   150e0:	f012 0f0c 	tst.w	r2, #12
   150e4:	4419      	add	r1, r3
   150e6:	f002 050f 	and.w	r5, r2, #15
   150ea:	4403      	add	r3, r0
   150ec:	d015      	beq.n	1511a <memmove+0xca>
   150ee:	3d04      	subs	r5, #4
   150f0:	08ad      	lsrs	r5, r5, #2
   150f2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
   150f6:	1f1c      	subs	r4, r3, #4
   150f8:	460e      	mov	r6, r1
   150fa:	f856 7b04 	ldr.w	r7, [r6], #4
   150fe:	f844 7f04 	str.w	r7, [r4, #4]!
   15102:	4564      	cmp	r4, ip
   15104:	d1f9      	bne.n	150fa <memmove+0xaa>
   15106:	3501      	adds	r5, #1
   15108:	00ad      	lsls	r5, r5, #2
   1510a:	442b      	add	r3, r5
   1510c:	4429      	add	r1, r5
   1510e:	f002 0203 	and.w	r2, r2, #3
   15112:	e7b1      	b.n	15078 <memmove+0x28>
   15114:	1e54      	subs	r4, r2, #1
   15116:	4603      	mov	r3, r0
   15118:	e7b1      	b.n	1507e <memmove+0x2e>
   1511a:	462a      	mov	r2, r5
   1511c:	e7ac      	b.n	15078 <memmove+0x28>
   1511e:	bf00      	nop

00015120 <_realloc_r>:
   15120:	b309      	cbz	r1, 15166 <_realloc_r+0x46>
   15122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15124:	4614      	mov	r4, r2
   15126:	b1ca      	cbz	r2, 1515c <_realloc_r+0x3c>
   15128:	4606      	mov	r6, r0
   1512a:	460d      	mov	r5, r1
   1512c:	f000 f834 	bl	15198 <_malloc_usable_size_r>
   15130:	42a0      	cmp	r0, r4
   15132:	d302      	bcc.n	1513a <_realloc_r+0x1a>
   15134:	462f      	mov	r7, r5
   15136:	4638      	mov	r0, r7
   15138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1513a:	4621      	mov	r1, r4
   1513c:	4630      	mov	r0, r6
   1513e:	f7fd fe7f 	bl	12e40 <_malloc_r>
   15142:	4607      	mov	r7, r0
   15144:	2800      	cmp	r0, #0
   15146:	d0f6      	beq.n	15136 <_realloc_r+0x16>
   15148:	4622      	mov	r2, r4
   1514a:	4629      	mov	r1, r5
   1514c:	f7fd fd38 	bl	12bc0 <memcpy>
   15150:	4630      	mov	r0, r6
   15152:	4629      	mov	r1, r5
   15154:	f7fd fe1e 	bl	12d94 <_free_r>
   15158:	4638      	mov	r0, r7
   1515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1515c:	4627      	mov	r7, r4
   1515e:	f7fd fe19 	bl	12d94 <_free_r>
   15162:	4638      	mov	r0, r7
   15164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15166:	4611      	mov	r1, r2
   15168:	f7fd be6a 	b.w	12e40 <_malloc_r>

0001516c <_read_r>:
   1516c:	b570      	push	{r4, r5, r6, lr}
   1516e:	460d      	mov	r5, r1
   15170:	4c08      	ldr	r4, [pc, #32]	; (15194 <_read_r+0x28>)
   15172:	4611      	mov	r1, r2
   15174:	4606      	mov	r6, r0
   15176:	461a      	mov	r2, r3
   15178:	4628      	mov	r0, r5
   1517a:	2300      	movs	r3, #0
   1517c:	6023      	str	r3, [r4, #0]
   1517e:	f7f7 ff3f 	bl	d000 <_read>
   15182:	1c43      	adds	r3, r0, #1
   15184:	d000      	beq.n	15188 <_read_r+0x1c>
   15186:	bd70      	pop	{r4, r5, r6, pc}
   15188:	6823      	ldr	r3, [r4, #0]
   1518a:	2b00      	cmp	r3, #0
   1518c:	d0fb      	beq.n	15186 <_read_r+0x1a>
   1518e:	6033      	str	r3, [r6, #0]
   15190:	bd70      	pop	{r4, r5, r6, pc}
   15192:	bf00      	nop
   15194:	20014e34 	.word	0x20014e34

00015198 <_malloc_usable_size_r>:
   15198:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1519c:	1f18      	subs	r0, r3, #4
   1519e:	2b00      	cmp	r3, #0
   151a0:	bfbc      	itt	lt
   151a2:	580b      	ldrlt	r3, [r1, r0]
   151a4:	18c0      	addlt	r0, r0, r3
   151a6:	4770      	bx	lr
   151a8:	6d617246 	.word	0x6d617246
   151ac:	74532065 	.word	0x74532065
   151b0:	20747261 	.word	0x20747261
   151b4:	7366664f 	.word	0x7366664f
   151b8:	7b007465 	.word	0x7b007465
   151bc:	70797422 	.word	0x70797422
   151c0:	223a2265 	.word	0x223a2265
   151c4:	4e524157 	.word	0x4e524157
   151c8:	22474e49 	.word	0x22474e49
   151cc:	6422202c 	.word	0x6422202c
   151d0:	22617461 	.word	0x22617461
   151d4:	225b203a 	.word	0x225b203a
   151d8:	5d227325 	.word	0x5d227325
   151dc:	000a0d7d 	.word	0x000a0d7d
   151e0:	6e6e6f43 	.word	0x6e6e6f43
   151e4:	00746365 	.word	0x00746365
   151e8:	7974227b 	.word	0x7974227b
   151ec:	3a226570 	.word	0x3a226570
   151f0:	41572220 	.word	0x41572220
   151f4:	4e494e52 	.word	0x4e494e52
   151f8:	202c2247 	.word	0x202c2247
   151fc:	74616422 	.word	0x74616422
   15200:	203a2261 	.word	0x203a2261
   15204:	6e55225b 	.word	0x6e55225b
   15208:	776f6e6b 	.word	0x776f6e6b
   1520c:	73654d20 	.word	0x73654d20
   15210:	65676173 	.word	0x65676173
   15214:	70795420 	.word	0x70795420
   15218:	7d5d2265 	.word	0x7d5d2265
   1521c:	227b000d 	.word	0x227b000d
   15220:	65707974 	.word	0x65707974
   15224:	22203a22 	.word	0x22203a22
   15228:	4e524157 	.word	0x4e524157
   1522c:	22474e49 	.word	0x22474e49
   15230:	6422202c 	.word	0x6422202c
   15234:	22617461 	.word	0x22617461
   15238:	225b203a 	.word	0x225b203a
   1523c:	61766e49 	.word	0x61766e49
   15240:	2064696c 	.word	0x2064696c
   15244:	63656843 	.word	0x63656843
   15248:	6d75736b 	.word	0x6d75736b
   1524c:	0d7d5d22 	.word	0x0d7d5d22
   15250:	6d695400 	.word	0x6d695400
   15254:	74756f65 	.word	0x74756f65
   15258:	73694420 	.word	0x73694420
   1525c:	6e6e6f63 	.word	0x6e6e6f63
   15260:	20746365 	.word	0x20746365
   15264:	65522026 	.word	0x65522026
   15268:	20746573 	.word	0x20746573
   1526c:	65636552 	.word	0x65636552
   15270:	72657669 	.word	0x72657669
   15274:	6d695400 	.word	0x6d695400
   15278:	74756f65 	.word	0x74756f65
   1527c:	52202620 	.word	0x52202620
   15280:	74657365 	.word	0x74657365
   15284:	63655220 	.word	0x63655220
   15288:	65766965 	.word	0x65766965
   1528c:	63250072 	.word	0x63250072
   15290:	63256325 	.word	0x63256325
   15294:	30256325 	.word	0x30256325
   15298:	30257832 	.word	0x30257832
   1529c:	30257832 	.word	0x30257832
   152a0:	63257832 	.word	0x63257832
   152a4:	000a3030 	.word	0x000a3030
   152a8:	30256325 	.word	0x30256325
   152ac:	2e5f7833 	.word	0x2e5f7833
   152b0:	2e2e2e2e 	.word	0x2e2e2e2e
   152b4:	2e2e2e2e 	.word	0x2e2e2e2e
   152b8:	2e2e2e2e 	.word	0x2e2e2e2e
   152bc:	2e2e2e2e 	.word	0x2e2e2e2e
   152c0:	2e2e2e2e 	.word	0x2e2e2e2e
   152c4:	2e2e2e2e 	.word	0x2e2e2e2e
   152c8:	2e2e2e2e 	.word	0x2e2e2e2e
   152cc:	252e2e2e 	.word	0x252e2e2e
   152d0:	63250063 	.word	0x63250063
   152d4:	78333025 	.word	0x78333025
   152d8:	2e2e2e5f 	.word	0x2e2e2e5f
   152dc:	2e2e2e2e 	.word	0x2e2e2e2e
   152e0:	0063252e 	.word	0x0063252e
   152e4:	30256325 	.word	0x30256325
   152e8:	2e5f7833 	.word	0x2e5f7833
   152ec:	0063252e 	.word	0x0063252e
   152f0:	30256325 	.word	0x30256325
   152f4:	2e5f7833 	.word	0x2e5f7833
   152f8:	2e2e2e2e 	.word	0x2e2e2e2e
   152fc:	0063252e 	.word	0x0063252e
   15300:	7974227b 	.word	0x7974227b
   15304:	3a226570 	.word	0x3a226570
   15308:	43574822 	.word	0x43574822
   1530c:	2c224746 	.word	0x2c224746
   15310:	61642220 	.word	0x61642220
   15314:	3a226174 	.word	0x3a226174
   15318:	64252220 	.word	0x64252220
   1531c:	0a0d7d22 	.word	0x0a0d7d22
   15320:	204f4e00 	.word	0x204f4e00
   15324:	52455355 	.word	0x52455355
   15328:	574f5220 	.word	0x574f5220
   1532c:	45484320 	.word	0x45484320
   15330:	00214b43 	.word	0x00214b43
   15334:	55206f4e 	.word	0x55206f4e
   15338:	2074696e 	.word	0x2074696e
   1533c:	74736554 	.word	0x74736554
   15340:	206f4e00 	.word	0x206f4e00
   15344:	64726148 	.word	0x64726148
   15348:	65726177 	.word	0x65726177
   1534c:	73655420 	.word	0x73655420
   15350:	65520074 	.word	0x65520074
   15354:	6e696461 	.word	0x6e696461
   15358:	73552067 	.word	0x73552067
   1535c:	52207265 	.word	0x52207265
   15360:	7b00776f 	.word	0x7b00776f
   15364:	70797422 	.word	0x70797422
   15368:	223a2265 	.word	0x223a2265
   1536c:	22474f4c 	.word	0x22474f4c
   15370:	6422202c 	.word	0x6422202c
   15374:	22617461 	.word	0x22617461
   15378:	225b203a 	.word	0x225b203a
   1537c:	5d227325 	.word	0x5d227325
   15380:	000a0d7d 	.word	0x000a0d7d
   15384:	69726556 	.word	0x69726556
   15388:	6e697966 	.word	0x6e697966
   1538c:	73552067 	.word	0x73552067
   15390:	52207265 	.word	0x52207265
   15394:	5500776f 	.word	0x5500776f
   15398:	74616470 	.word	0x74616470
   1539c:	20676e69 	.word	0x20676e69
   153a0:	72657355 	.word	0x72657355
   153a4:	776f5220 	.word	0x776f5220
   153a8:	73795300 	.word	0x73795300
   153ac:	206d6574 	.word	0x206d6574
   153b0:	65736552 	.word	0x65736552
   153b4:	6e550074 	.word	0x6e550074
   153b8:	6e616863 	.word	0x6e616863
   153bc:	20646567 	.word	0x20646567
   153c0:	72657355 	.word	0x72657355
   153c4:	776f5220 	.word	0x776f5220
   153c8:	00          	.byte	0x00
   153c9:	45          	.byte	0x45
   153ca:	5252      	.short	0x5252
   153cc:	6920524f 	.word	0x6920524f
   153d0:	7865206e 	.word	0x7865206e
   153d4:	6c5f7270 	.word	0x6c5f7270
   153d8:	6c657665 	.word	0x6c657665
   153dc:	2928335f 	.word	0x2928335f
   153e0:	78614d00 	.word	0x78614d00
   153e4:	7366666f 	.word	0x7366666f
   153e8:	203a7465 	.word	0x203a7465
   153ec:	20206425 	.word	0x20206425
   153f0:	0d202323 	.word	0x0d202323
   153f4:	6150000a 	.word	0x6150000a
   153f8:	656d6172 	.word	0x656d6172
   153fc:	3a726574 	.word	0x3a726574
   15400:	73252220 	.word	0x73252220
   15404:	00202c22 	.word	0x00202c22
   15408:	75736552 	.word	0x75736552
   1540c:	203a746c 	.word	0x203a746c
   15410:	22642522 	.word	0x22642522
   15414:	000a0d20 	.word	0x000a0d20
   15418:	61726150 	.word	0x61726150
   1541c:	6574656d 	.word	0x6574656d
   15420:	22203a72 	.word	0x22203a72
   15424:	20227325 	.word	0x20227325
   15428:	6100202c 	.word	0x6100202c
   1542c:	73007362 	.word	0x73007362
   15430:	61007869 	.word	0x61007869
   15434:	70006464 	.word	0x70006464
   15438:	746e6972 	.word	0x746e6972
   1543c:	00666900 	.word	0x00666900
   15440:	636e7546 	.word	0x636e7546
   15444:	6e6f6974 	.word	0x6e6f6974
   15448:	73252220 	.word	0x73252220
   1544c:	6f6e2022 	.word	0x6f6e2022
   15450:	6f662074 	.word	0x6f662074
   15454:	21646e75 	.word	0x21646e75
   15458:	2528000a 	.word	0x2528000a
   1545c:	4e002964 	.word	0x4e002964
   15460:	6f6d206f 	.word	0x6f6d206f
   15464:	63206572 	.word	0x63206572
   15468:	616d6d6f 	.word	0x616d6d6f
   1546c:	0d202173 	.word	0x0d202173
   15470:	6d6f4300 	.word	0x6d6f4300
   15474:	666f616d 	.word	0x666f616d
   15478:	74657366 	.word	0x74657366
   1547c:	25203a20 	.word	0x25203a20
   15480:	25203a64 	.word	0x25203a64
   15484:	20202164 	.word	0x20202164
   15488:	32302500 	.word	0x32302500
   1548c:	75530078 	.word	0x75530078
   15490:	20747362 	.word	0x20747362
   15494:	73636e46 	.word	0x73636e46
   15498:	73655200 	.word	0x73655200
   1549c:	3a746c75 	.word	0x3a746c75
   154a0:	0d642520 	.word	0x0d642520
   154a4:	6552000a 	.word	0x6552000a
   154a8:	746c7573 	.word	0x746c7573
   154ac:	72745320 	.word	0x72745320
   154b0:	3a676e69 	.word	0x3a676e69
   154b4:	73252220 	.word	0x73252220
   154b8:	000a0d22 	.word	0x000a0d22
   154bc:	30353002 	.word	0x30353002
   154c0:	30305a65 	.word	0x30305a65
   154c4:	30633030 	.word	0x30633030
   154c8:	02000330 	.word	0x02000330
   154cc:	65303530 	.word	0x65303530
   154d0:	3030305a 	.word	0x3030305a
   154d4:	345a3830 	.word	0x345a3830
   154d8:	33300203 	.word	0x33300203
   154dc:	355a6530 	.word	0x355a6530
   154e0:	30020003 	.word	0x30020003
   154e4:	5a653035 	.word	0x5a653035
   154e8:	30303030 	.word	0x30303030
   154ec:	03345a39 	.word	0x03345a39
   154f0:	35300200 	.word	0x35300200
   154f4:	305a6530 	.word	0x305a6530
   154f8:	61303030 	.word	0x61303030
   154fc:	0203345a 	.word	0x0203345a
   15500:	65303330 	.word	0x65303330
   15504:	0003305a 	.word	0x0003305a
   15508:	30353002 	.word	0x30353002
   1550c:	30305a65 	.word	0x30305a65
   15510:	5a623030 	.word	0x5a623030
   15514:	30020334 	.word	0x30020334
   15518:	5a663033 	.word	0x5a663033
   1551c:	55000330 	.word	0x55000330
   15520:	6f502049 	.word	0x6f502049
   15524:	20726577 	.word	0x20726577
   15528:	62616e45 	.word	0x62616e45
   1552c:	4900656c 	.word	0x4900656c
   15530:	2074696e 	.word	0x2074696e
   15534:	75646f4d 	.word	0x75646f4d
   15538:	203a656c 	.word	0x203a656c
   1553c:	36314f50 	.word	0x36314f50
   15540:	696e4900 	.word	0x696e4900
   15544:	6f4d2074 	.word	0x6f4d2074
   15548:	656c7564 	.word	0x656c7564
   1554c:	5542203a 	.word	0x5542203a
   15550:	49003631 	.word	0x49003631
   15554:	2074696e 	.word	0x2074696e
   15558:	75646f4d 	.word	0x75646f4d
   1555c:	203a656c 	.word	0x203a656c
   15560:	34464250 	.word	0x34464250
   15564:	696e4900 	.word	0x696e4900
   15568:	6f4d2074 	.word	0x6f4d2074
   1556c:	656c7564 	.word	0x656c7564
   15570:	4e45203a 	.word	0x4e45203a
   15574:	49003631 	.word	0x49003631
   15578:	2074696e 	.word	0x2074696e
   1557c:	75646f4d 	.word	0x75646f4d
   15580:	203a656c 	.word	0x203a656c
   15584:	6e6b6e55 	.word	0x6e6b6e55
   15588:	206e776f 	.word	0x206e776f
   1558c:	75646f4d 	.word	0x75646f4d
   15590:	4800656c 	.word	0x4800656c
   15594:	47464357 	.word	0x47464357
   15598:	73694d20 	.word	0x73694d20
   1559c:	6374616d 	.word	0x6374616d
   155a0:	0068      	.short	0x0068
   155a2:	0d0c      	.short	0x0d0c
   155a4:	09080f0e 	.word	0x09080f0e
   155a8:	05040b0a 	.word	0x05040b0a
   155ac:	01000706 	.word	0x01000706
   155b0:	0302      	.short	0x0302
   155b2:	0d0c      	.short	0x0d0c
   155b4:	09080f0e 	.word	0x09080f0e
   155b8:	05040b0a 	.word	0x05040b0a
   155bc:	01000706 	.word	0x01000706
   155c0:	0302      	.short	0x0302
   155c2:	0d0c      	.short	0x0d0c
   155c4:	09080f0e 	.word	0x09080f0e
   155c8:	05040b0a 	.word	0x05040b0a
   155cc:	01000706 	.word	0x01000706
   155d0:	0302      	.short	0x0302
   155d2:	0d0c      	.short	0x0d0c
   155d4:	09080f0e 	.word	0x09080f0e
   155d8:	05040b0a 	.word	0x05040b0a
   155dc:	01000706 	.word	0x01000706
   155e0:	0302      	.short	0x0302
   155e2:	6325      	.short	0x6325
   155e4:	2e2e6325 	.word	0x2e2e6325
   155e8:	2e2e2e2e 	.word	0x2e2e2e2e
   155ec:	2e2e2e2e 	.word	0x2e2e2e2e
   155f0:	63252e2e 	.word	0x63252e2e
   155f4:	00          	.byte	0x00
   155f5:	25          	.byte	0x25
   155f6:	2563      	.short	0x2563
   155f8:	65783330 	.word	0x65783330
   155fc:	6325      	.short	0x6325
   155fe:	00          	.byte	0x00
   155ff:	25          	.byte	0x25
   15600:	33302563 	.word	0x33302563
   15604:	2e2e5f78 	.word	0x2e2e5f78
   15608:	63252e2e 	.word	0x63252e2e
   1560c:	25632500 	.word	0x25632500
   15610:	65783330 	.word	0x65783330
   15614:	00202300 	.word	0x00202300
   15618:	25002320 	.word	0x25002320
   1561c:	00783830 	.word	0x00783830
   15620:	64697267 	.word	0x64697267
   15624:	7379735f 	.word	0x7379735f
   15628:	68633a3a 	.word	0x68633a3a
   1562c:	736b6365 	.word	0x736b6365
   15630:	43006d75 	.word	0x43006d75
   15634:	6b636568 	.word	0x6b636568
   15638:	206d7573 	.word	0x206d7573
   1563c:	64616552 	.word	0x64616552
   15640:	6c61432f 	.word	0x6c61432f
   15644:	616c7563 	.word	0x616c7563
   15648:	70006574 	.word	0x70006574
   1564c:	656b6361 	.word	0x656b6361
   15650:	64257b74 	.word	0x64257b74
   15654:	6425202c 	.word	0x6425202c
   15658:	6425202c 	.word	0x6425202c
   1565c:	6425202c 	.word	0x6425202c
   15660:	6425202c 	.word	0x6425202c
   15664:	6425202c 	.word	0x6425202c
   15668:	6425202c 	.word	0x6425202c
   1566c:	6425202c 	.word	0x6425202c
   15670:	6552207d 	.word	0x6552207d
   15674:	203a6461 	.word	0x203a6461
   15678:	202c6425 	.word	0x202c6425
   1567c:	636c6143 	.word	0x636c6143
   15680:	74616c75 	.word	0x74616c75
   15684:	25203a65 	.word	0x25203a65
   15688:	68430064 	.word	0x68430064
   1568c:	736b6365 	.word	0x736b6365
   15690:	57206d75 	.word	0x57206d75
   15694:	65746972 	.word	0x65746972
   15698:	6c61432f 	.word	0x6c61432f
   1569c:	616c7563 	.word	0x616c7563
   156a0:	43006574 	.word	0x43006574
   156a4:	6b636568 	.word	0x6b636568
   156a8:	206d7573 	.word	0x206d7573
   156ac:	7265764f 	.word	0x7265764f
   156b0:	74697277 	.word	0x74697277
   156b4:	61500065 	.word	0x61500065
   156b8:	61706172 	.word	0x61706172
   156bc:	6b697270 	.word	0x6b697270
   156c0:	7361      	.short	0x7361
   156c2:	00          	.byte	0x00
   156c3:	25          	.byte	0x25
   156c4:	33302563 	.word	0x33302563
   156c8:	2e2e5f78 	.word	0x2e2e5f78
   156cc:	2e2e2e2e 	.word	0x2e2e2e2e
   156d0:	34300200 	.word	0x34300200
   156d4:	30426531 	.word	0x30426531
   156d8:	315a3130 	.word	0x315a3130
   156dc:	335a325a 	.word	0x335a325a
   156e0:	30020003 	.word	0x30020003
   156e4:	30653030 	.word	0x30653030
   156e8:	42303930 	.word	0x42303930
   156ec:	03324230 	.word	0x03324230
   156f0:	30343002 	.word	0x30343002
   156f4:	30304265 	.word	0x30304265
   156f8:	03324231 	.word	0x03324231
   156fc:	30300200 	.word	0x30300200
   15700:	30306530 	.word	0x30306530
   15704:	30423038 	.word	0x30423038
   15708:	02033242 	.word	0x02033242
   1570c:	65303430 	.word	0x65303430
   15710:	31303042 	.word	0x31303042
   15714:	00033242 	.word	0x00033242
   15718:	30303002 	.word	0x30303002
   1571c:	62303065 	.word	0x62303065
   15720:	50305030 	.word	0x50305030
   15724:	30020332 	.word	0x30020332
   15728:	50653034 	.word	0x50653034
   1572c:	50313030 	.word	0x50313030
   15730:	02000332 	.word	0x02000332
   15734:	65313430 	.word	0x65313430
   15738:	31303045 	.word	0x31303045
   1573c:	325a315a 	.word	0x325a315a
   15740:	0203335a 	.word	0x0203335a
   15744:	65313430 	.word	0x65313430
   15748:	32303042 	.word	0x32303042
   1574c:	325a315a 	.word	0x325a315a
   15750:	0003335a 	.word	0x0003335a
   15754:	30303002 	.word	0x30303002
   15758:	62303065 	.word	0x62303065
   1575c:	45304530 	.word	0x45304530
   15760:	30020332 	.word	0x30020332
   15764:	45653034 	.word	0x45653034
   15768:	45313030 	.word	0x45313030
   1576c:	02000332 	.word	0x02000332
   15770:	65303030 	.word	0x65303030
   15774:	30623030 	.word	0x30623030
   15778:	35453045 	.word	0x35453045
   1577c:	30020003 	.word	0x30020003
   15780:	30653030 	.word	0x30653030
   15784:	42303930 	.word	0x42303930
   15788:	03324230 	.word	0x03324230
   1578c:	30343002 	.word	0x30343002
   15790:	30304265 	.word	0x30304265
   15794:	03324232 	.word	0x03324232
   15798:	30300200 	.word	0x30300200
   1579c:	30306530 	.word	0x30306530
   157a0:	30423038 	.word	0x30423038
   157a4:	02033242 	.word	0x02033242
   157a8:	65303430 	.word	0x65303430
   157ac:	32303042 	.word	0x32303042
   157b0:	00033242 	.word	0x00033242
   157b4:	69676552 	.word	0x69676552
   157b8:	72657473 	.word	0x72657473
   157bc:	74634120 	.word	0x74634120
   157c0:	006e6f69 	.word	0x006e6f69
   157c4:	6e657645 	.word	0x6e657645
   157c8:	6f4e2074 	.word	0x6f4e2074
   157cc:	6f462074 	.word	0x6f462074
   157d0:	00646e75 	.word	0x00646e75
   157d4:	63734520 	.word	0x63734520
   157d8:	64657061 	.word	0x64657061
   157dc:	61684320 	.word	0x61684320
   157e0:	6f462072 	.word	0x6f462072
   157e4:	20646e75 	.word	0x20646e75
   157e8:	35300200 	.word	0x35300200
   157ec:	305a6530 	.word	0x305a6530
   157f0:	30303042 	.word	0x30303042
   157f4:	00033030 	.word	0x00033030
   157f8:	30353002 	.word	0x30353002
   157fc:	42305a65 	.word	0x42305a65
   15800:	42343030 	.word	0x42343030
   15804:	02000332 	.word	0x02000332
   15808:	65303530 	.word	0x65303530
   1580c:	3042305a 	.word	0x3042305a
   15810:	32423530 	.word	0x32423530
   15814:	30020003 	.word	0x30020003
   15818:	5a653035 	.word	0x5a653035
   1581c:	30305030 	.word	0x30305030
   15820:	03303030 	.word	0x03303030
   15824:	35300200 	.word	0x35300200
   15828:	305a6530 	.word	0x305a6530
   1582c:	31303050 	.word	0x31303050
   15830:	00033250 	.word	0x00033250
   15834:	30353002 	.word	0x30353002
   15838:	45305a65 	.word	0x45305a65
   1583c:	30303030 	.word	0x30303030
   15840:	02000330 	.word	0x02000330
   15844:	65303530 	.word	0x65303530
   15848:	3045305a 	.word	0x3045305a
   1584c:	35453130 	.word	0x35453130
   15850:	30020003 	.word	0x30020003
   15854:	5a653035 	.word	0x5a653035
   15858:	30304530 	.word	0x30304530
   1585c:	03354564 	.word	0x03354564
   15860:	00000000 	.word	0x00000000
   15864:	200010ec 	.word	0x200010ec
   15868:	200116d8 	.word	0x200116d8
   1586c:	2000b73c 	.word	0x2000b73c
   15870:	20008270 	.word	0x20008270
   15874:	682f2e2e 	.word	0x682f2e2e
   15878:	732f6c61 	.word	0x732f6c61
   1587c:	682f6372 	.word	0x682f6372
   15880:	695f6c61 	.word	0x695f6c61
   15884:	00632e6f 	.word	0x00632e6f
   15888:	682f2e2e 	.word	0x682f2e2e
   1588c:	732f6c61 	.word	0x732f6c61
   15890:	682f6372 	.word	0x682f6372
   15894:	695f6c61 	.word	0x695f6c61
   15898:	6d5f6332 	.word	0x6d5f6332
   1589c:	7973615f 	.word	0x7973615f
   158a0:	632e636e 	.word	0x632e636e
   158a4:	00          	.byte	0x00
   158a5:	2e          	.byte	0x2e
   158a6:	2f2e      	.short	0x2f2e
   158a8:	2f6c7068 	.word	0x2f6c7068
   158ac:	2f746477 	.word	0x2f746477
   158b0:	5f6c7068 	.word	0x5f6c7068
   158b4:	2e746477 	.word	0x2e746477
   158b8:	0063      	.short	0x0063
   158ba:	2e2e      	.short	0x2e2e
   158bc:	6c61682f 	.word	0x6c61682f
   158c0:	6372732f 	.word	0x6372732f
   158c4:	6c61682f 	.word	0x6c61682f
   158c8:	6970735f 	.word	0x6970735f
   158cc:	645f6d5f 	.word	0x645f6d5f
   158d0:	632e616d 	.word	0x632e616d
   158d4:	00000000 	.word	0x00000000

000158d8 <user_mux_confs>:
	...
   15904:	04030201 04030201 00000000 00000000     ................
	...

0001591c <channel_confs>:
   1591c:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

0001595c <interrupt_cfg>:
   1595c:	00000002 00000002 00000002 00000002     ................
	...
   159dc:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   159ec:	69707371 2e00632e 70682f2e 766e2f6c     qspi.c.../hpl/nv
   159fc:	7274636d 70682f6c 766e5f6c 7274636d     mctrl/hpl_nvmctr
   15a0c:	00632e6c 682f2e2e 732f6c61 682f6372     l.c.../hal/src/h
   15a1c:	745f6c61 72656d69 0000632e              al_timer.c..

00015a28 <_usb_ep_cfgs>:
   15a28:	20000c18 00000000 00000040 00000000     ... ....@.......
	...
   15a40:	20000c10 00000000 00000008 20000bd0     ... ........... 
   15a50:	20000bc8 00080040 00000000 00000000     ... @...........
	...
   15a68:	20000b88 00400000                       ... ..@.

00015a70 <mouse_report_desc>:
   15a70:	02090105 010901a1 090500a1 03290119     ..............).
   15a80:	01250015 03950175 05750281 01810195     ..%.u.....u.....
   15a90:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
   15aa0:	c0c00681                                ....

00015aa4 <_cfgs>:
   15aa4:	00200600 08068000 00200400 08068000     .. ....... .....
   15ab4:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
   15ad4:	00200b00 14000003 00200a00 08000002     .. ....... .....
   15ae4:	00201300 14000003 00000000 00000000     .. .............
	...
   15b94:	00005400 1c000000 00005300 0c000000     .T.......S......
   15ba4:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
   15bb4:	615f6364 636e7973 2e00632e 61682f2e     dc_async.c.../ha
   15bc4:	72732f6c 61682f63 61725f6c 735f646e     l/src/hal_rand_s
   15bd4:	2e636e79 2e2e0063 6c70682f 6e72742f     ync.c.../hpl/trn
   15be4:	70682f67 72745f6c 632e676e               g/hpl_trng.c.

00015bf1 <keyboard_report_desc>:
   15bf1:	06090105 070501a1 e729e019 01250015     ..........)...%.
   15c01:	08950175 01810281 65290019 65250015     u.........)e..%e
   15c11:	06950875 08050081 05290119 01250015     u.........)...%.
   15c21:	05950175 03950291 2ec00191 61682f2e     u............/ha
   15c31:	72732f6c 61682f63 73755f6c 5f747261     l/src/hal_usart_
   15c41:	636e7973 2e00632e 61682f2e 72732f6c     sync.c.../hal/sr
   15c51:	61682f63 6c665f6c 2e687361 2e2e0063     c/hal_flash.c...
   15c61:	6c61682f 6372732f 6c61682f 6970735f     /hal/src/hal_spi
   15c71:	615f6d5f 636e7973 2e00632e 61682f2e     _m_async.c.../ha
   15c81:	72732f6c 61682f63 72635f6c 79735f63     l/src/hal_crc_sy
   15c91:	632e636e                                 nc.c.

00015c96 <CSWTCH.37>:
   15c96:	010101ed                                 .......

00015c9d <CSWTCH.40>:
   15c9d:	010100ed 53f00201 74726174 696e4920     .......Start Ini
   15cad:	6c616974 64657a69 31354400 696e4920     tialized.D51 Ini
   15cbd:	6f430074 736f706d 20657469 69766544     t.Composite Devi
   15ccd:	49206563 6974696e 7a696c61 47006465     ce Initialized.G
   15cdd:	20646972 75646f4d 4920656c 6974696e     rid Module Initi
   15ced:	7a696c61 45006465 7265746e 20676e69     alized.Entering 
   15cfd:	6e69614d 6f6f4c20 6f430070 736f706d     Main Loop.Compos
   15d0d:	20657469 69766544 43206563 656e6e6f     ite Device Conne
   15d1d:	64657463 44494d00 25203a49 20783230     cted.MIDI: %02x 
   15d2d:	78323025 32302520 30252078 000a7832     %02x %02x %02x..
   15d3d:	6e697270 2a322874 28646461 2b342b33     print(2*add(3+4+
   15d4d:	2c362b35 2c293031 2e002934 61682f2e     5+6,10),4).../ha
   15d5d:	74752f6c 2f736c69 2f637273 6c697475     l/utils/src/util
   15d6d:	696c5f73 632e7473 2f2e2e00 2f6c7068     s_list.c.../hpl/
   15d7d:	2f637472 5f6c7068 2e637472 2e2e0063     rtc/hpl_rtc.c...
   15d8d:	6c61682f 636e692f 6564756c 6c61682f     /hal/include/hal
   15d9d:	7464775f 2e00682e 61682f2e 72732f6c     _wdt.h.../hal/sr
   15dad:	61682f63 73755f6c 5f747261 6e797361     c/hal_usart_asyn
   15dbd:	00632e63 682f2e2e 732f6c70 6f637265     c.c.../hpl/serco
   15dcd:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
   15ddd:	00400030 00400034 00410120 00410140     0.@.4.@. .A.@.A.
   15ded:	00430000 00430004 00430008               ..C...C...C...C

00015dfc <sercomspi_regs>:
   15dfc:	3020000c 00020000 00000000 01ff0005     .. 0............
   15e0c:	20000c03 00000000 00000000 ff000600     ... ............
   15e1c:	00000701                                ....

00015e20 <_i2cms>:
   15e20:	00000005 00200014 00000100 0000e6e5     ...... .........
   15e30:	00d70000 02dc6c00                       .....l..

00015e38 <_usarts>:
   15e38:	00000000 40100004 00030000 00700002     .......@......p.
   15e48:	0000aaaa 00000000 00000001 40100004     ...............@
   15e58:	00030000 00700002 0000aaaa 00000000     ......p.........
   15e68:	00000002 40100004 00030000 00700002     .......@......p.
   15e78:	00005555 00000000 00000004 40100004     UU.............@
   15e88:	00030000 00700002 0000aaaa 00000000     ......p.........
   15e98:	00000006 40100004 00030000 00700002     .......@......p.
   15ea8:	0000aaaa 00000000 682f2e2e 752f6c61     ........../hal/u
   15eb8:	736c6974 6372732f 6974752f 725f736c     tils/src/utils_r
   15ec8:	62676e69 65666675 00632e72 682f2e2e     ingbuffer.c.../h
   15ed8:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
   15ee8:	2e616d64 2e2e0063 6c70682f 6364612f     dma.c.../hpl/adc
   15ef8:	6c70682f 6364615f 0000632e              /hpl_adc.c..

00015f04 <_adcs>:
   15f04:	01000000 0003000c 00041807 00000000     ................
   15f14:	0014080b 00010000 000c0100 18040003     ................
   15f24:	00000004 080b0000 00000014 752f2e2e     ............../u
   15f34:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
   15f44:	2e2e0063 6c70682f 2f63742f 5f6c7068     c.../hpl/tc/hpl_
   15f54:	632e6374 00000000 40003800 40003c00     tc.c.....8.@.<.@
   15f64:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   15f74:	43001400 43001800                       ...C...C

00015f7c <_tcs>:
   15f7c:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
   15f8c:	00000000 006c0001 00000308 00000021     ......l.....!...
   15f9c:	00003a98 00000000 006d0002 00000308     .:........m.....
   15fac:	00000021 00003a98 00000000 006e0003     !....:........n.
   15fbc:	00000308 00000021 00003a98 00000000     ....!....:......

00015fcc <_global_impure_ptr>:
   15fcc:	2000054c                                L.. 

00015fd0 <__sf_fake_stderr>:
	...

00015ff0 <__sf_fake_stdout>:
	...

00016010 <__sf_fake_stdin>:
	...
   16030:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
   16040:	00004746 33323130 37363534 42413938     FG..0123456789AB
   16050:	46454443 00000000 33323130 37363534     CDEF....01234567
   16060:	62613938 66656463 00000000              89abcdef....

0001606c <_init>:
   1606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1606e:	bf00      	nop
   16070:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16072:	bc08      	pop	{r3}
   16074:	469e      	mov	lr, r3
   16076:	4770      	bx	lr

00016078 <__frame_dummy_init_array_entry>:
   16078:	42cd 0000                                   .B..

0001607c <_fini>:
   1607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1607e:	bf00      	nop
   16080:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16082:	bc08      	pop	{r3}
   16084:	469e      	mov	lr, r3
   16086:	4770      	bx	lr

00016088 <__do_global_dtors_aux_fini_array_entry>:
   16088:	42a5 0000                                   .B..
