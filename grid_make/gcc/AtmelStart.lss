
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011424  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005ac  20000000  00015424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205ac  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205ac  2**0
                  CONTENTS
  4 .bss          000147b8  200005b0  000159e0  000205b0  2**4
                  ALLOC
  5 .stack        00010000  20014d68  0002a198  000205b0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY
  7 .comment      000000a7  00000000  00000000  000205da  2**0
                  CONTENTS, READONLY
  8 .debug_info   000be163  00000000  00000000  00020681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000145e5  00000000  00000000  000de7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00030df4  00000000  00000000  000f2dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002b90  00000000  00000000  00123bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00007e00  00000000  00000000  00126750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004b8bb  00000000  00000000  0012e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00056a79  00000000  00000000  00179e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00121abb  00000000  00000000  001d0884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000788c  00000000  00000000  002f2340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00004000 <exception_table>:
    4000:	68 4d 02 20 3d 11 01 00 39 11 01 00 39 11 01 00     hM. =...9...9...
    4010:	39 11 01 00 39 11 01 00 39 11 01 00 00 00 00 00     9...9...9.......
	...
    402c:	39 11 01 00 39 11 01 00 00 00 00 00 39 11 01 00     9...9.......9...
    403c:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    404c:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    405c:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    406c:	9d ec 00 00 39 11 01 00 39 11 01 00 39 11 01 00     ....9...9...9...
    407c:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    408c:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    409c:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    40ac:	39 11 01 00 39 11 01 00 69 b6 00 00 95 b6 00 00     9...9...i.......
    40bc:	a5 cd 00 00 ad cd 00 00 b5 cd 00 00 bd cd 00 00     ................
    40cc:	c5 cd 00 00 39 11 01 00 39 11 01 00 39 11 01 00     ....9...9...9...
    40dc:	39 11 01 00 39 11 01 00 39 11 01 00 00 00 00 00     9...9...9.......
	...
    40f4:	1d c9 00 00 0d 05 01 00 1d 05 01 00 25 05 01 00     ............%...
    4104:	2d 05 01 00 35 05 01 00 45 05 01 00 4d 05 01 00     -...5...E...M...
    4114:	55 05 01 00 39 11 01 00 39 11 01 00 39 11 01 00     U...9...9...9...
    4124:	39 11 01 00 5d 05 01 00 a1 05 01 00 a9 05 01 00     9...]...........
    4134:	b1 05 01 00 b9 05 01 00 c9 05 01 00 d1 05 01 00     ................
    4144:	d9 05 01 00 e1 05 01 00 71 06 01 00 79 06 01 00     ........q...y...
    4154:	81 06 01 00 89 06 01 00 99 06 01 00 a1 06 01 00     ................
    4164:	a9 06 01 00 39 11 01 00 39 11 01 00 39 11 01 00     ....9...9...9...
    4174:	39 11 01 00 00 00 00 00 00 00 00 00 29 c8 00 00     9...........)...
    4184:	31 c8 00 00 39 c8 00 00 41 c8 00 00 00 00 00 00     1...9...A.......
    4194:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    41a4:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    41b4:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    41c4:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    41d4:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    41e4:	39 11 01 00 39 11 01 00 0d 1b 01 00 1d 1b 01 00     9...9...........
    41f4:	2d 1b 01 00 3d 1b 01 00 39 11 01 00 39 11 01 00     -...=...9...9...
    4204:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    4214:	39 11 01 00 09 11 01 00 19 11 01 00 21 11 01 00     9...........!...
    4224:	31 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     1...9...9...9...
    4234:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    4244:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...
    4254:	39 11 01 00 39 11 01 00 39 11 01 00 39 11 01 00     9...9...9...9...

00004264 <deregister_tm_clones>:
    4264:	4803      	ldr	r0, [pc, #12]	; (4274 <deregister_tm_clones+0x10>)
    4266:	4b04      	ldr	r3, [pc, #16]	; (4278 <deregister_tm_clones+0x14>)
    4268:	4283      	cmp	r3, r0
    426a:	d002      	beq.n	4272 <deregister_tm_clones+0xe>
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <deregister_tm_clones+0x18>)
    426e:	b103      	cbz	r3, 4272 <deregister_tm_clones+0xe>
    4270:	4718      	bx	r3
    4272:	4770      	bx	lr
    4274:	00015424 	.word	0x00015424
    4278:	00015424 	.word	0x00015424
    427c:	00000000 	.word	0x00000000

00004280 <register_tm_clones>:
    4280:	4805      	ldr	r0, [pc, #20]	; (4298 <register_tm_clones+0x18>)
    4282:	4906      	ldr	r1, [pc, #24]	; (429c <register_tm_clones+0x1c>)
    4284:	1a0b      	subs	r3, r1, r0
    4286:	0fd9      	lsrs	r1, r3, #31
    4288:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    428c:	1049      	asrs	r1, r1, #1
    428e:	d002      	beq.n	4296 <register_tm_clones+0x16>
    4290:	4b03      	ldr	r3, [pc, #12]	; (42a0 <register_tm_clones+0x20>)
    4292:	b103      	cbz	r3, 4296 <register_tm_clones+0x16>
    4294:	4718      	bx	r3
    4296:	4770      	bx	lr
    4298:	00015424 	.word	0x00015424
    429c:	00015424 	.word	0x00015424
    42a0:	00000000 	.word	0x00000000

000042a4 <__do_global_dtors_aux>:
    42a4:	b510      	push	{r4, lr}
    42a6:	4c06      	ldr	r4, [pc, #24]	; (42c0 <__do_global_dtors_aux+0x1c>)
    42a8:	7823      	ldrb	r3, [r4, #0]
    42aa:	b943      	cbnz	r3, 42be <__do_global_dtors_aux+0x1a>
    42ac:	f7ff ffda 	bl	4264 <deregister_tm_clones>
    42b0:	4b04      	ldr	r3, [pc, #16]	; (42c4 <__do_global_dtors_aux+0x20>)
    42b2:	b113      	cbz	r3, 42ba <__do_global_dtors_aux+0x16>
    42b4:	4804      	ldr	r0, [pc, #16]	; (42c8 <__do_global_dtors_aux+0x24>)
    42b6:	f3af 8000 	nop.w
    42ba:	2301      	movs	r3, #1
    42bc:	7023      	strb	r3, [r4, #0]
    42be:	bd10      	pop	{r4, pc}
    42c0:	200005b0 	.word	0x200005b0
    42c4:	00000000 	.word	0x00000000
    42c8:	00015424 	.word	0x00015424

000042cc <frame_dummy>:
    42cc:	b508      	push	{r3, lr}
    42ce:	4b04      	ldr	r3, [pc, #16]	; (42e0 <frame_dummy+0x14>)
    42d0:	b11b      	cbz	r3, 42da <frame_dummy+0xe>
    42d2:	4904      	ldr	r1, [pc, #16]	; (42e4 <frame_dummy+0x18>)
    42d4:	4804      	ldr	r0, [pc, #16]	; (42e8 <frame_dummy+0x1c>)
    42d6:	f3af 8000 	nop.w
    42da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    42de:	e7cf      	b.n	4280 <register_tm_clones>
    42e0:	00000000 	.word	0x00000000
    42e4:	200005b4 	.word	0x200005b4
    42e8:	00015424 	.word	0x00015424

000042ec <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    42ec:	b410      	push	{r4}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    42ee:	780b      	ldrb	r3, [r1, #0]
    42f0:	2b81      	cmp	r3, #129	; 0x81
    42f2:	d110      	bne.n	4316 <audio_midi_req+0x2a>
    42f4:	4b1a      	ldr	r3, [pc, #104]	; (4360 <audio_midi_req+0x74>)
    42f6:	888a      	ldrh	r2, [r1, #4]
    42f8:	7919      	ldrb	r1, [r3, #4]
    42fa:	4291      	cmp	r1, r2
    42fc:	4619      	mov	r1, r3
    42fe:	d002      	beq.n	4306 <audio_midi_req+0x1a>
    4300:	795b      	ldrb	r3, [r3, #5]
    4302:	4293      	cmp	r3, r2
    4304:	d128      	bne.n	4358 <audio_midi_req+0x6c>
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    4306:	6809      	ldr	r1, [r1, #0]
    4308:	780a      	ldrb	r2, [r1, #0]
    430a:	2300      	movs	r3, #0
			switch (req->bRequest) {
				case 0x03: /* Get Protocol */
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
    430c:	4c15      	ldr	r4, [pc, #84]	; (4364 <audio_midi_req+0x78>)
    430e:	46a4      	mov	ip, r4
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    4310:	f85d 4b04 	ldr.w	r4, [sp], #4
				return usbdc_xfer(ep, NULL, 0, 0);
    4314:	4760      	bx	ip
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    4316:	f3c3 1341 	ubfx	r3, r3, #5, #2
    431a:	2b01      	cmp	r3, #1
    431c:	d11c      	bne.n	4358 <audio_midi_req+0x6c>
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    431e:	4b10      	ldr	r3, [pc, #64]	; (4360 <audio_midi_req+0x74>)
    4320:	888a      	ldrh	r2, [r1, #4]
    4322:	791c      	ldrb	r4, [r3, #4]
    4324:	4294      	cmp	r4, r2
    4326:	461c      	mov	r4, r3
    4328:	d002      	beq.n	4330 <audio_midi_req+0x44>
    432a:	795b      	ldrb	r3, [r3, #5]
    432c:	4293      	cmp	r3, r2
    432e:	d113      	bne.n	4358 <audio_midi_req+0x6c>
			switch (req->bRequest) {
    4330:	784b      	ldrb	r3, [r1, #1]
    4332:	2b03      	cmp	r3, #3
    4334:	d006      	beq.n	4344 <audio_midi_req+0x58>
    4336:	2b0b      	cmp	r3, #11
    4338:	d008      	beq.n	434c <audio_midi_req+0x60>
    433a:	f06f 000c 	mvn.w	r0, #12
}
    433e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4342:	4770      	bx	lr
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    4344:	4908      	ldr	r1, [pc, #32]	; (4368 <audio_midi_req+0x7c>)
    4346:	2300      	movs	r3, #0
    4348:	2201      	movs	r2, #1
    434a:	e7df      	b.n	430c <audio_midi_req+0x20>
				_audiodf_midi_funcd.protocol = req->wValue;
    434c:	884b      	ldrh	r3, [r1, #2]
    434e:	7223      	strb	r3, [r4, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    4350:	2300      	movs	r3, #0
    4352:	461a      	mov	r2, r3
    4354:	4619      	mov	r1, r3
    4356:	e7d9      	b.n	430c <audio_midi_req+0x20>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    4358:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    435c:	e7ef      	b.n	433e <audio_midi_req+0x52>
    435e:	bf00      	nop
    4360:	200005cc 	.word	0x200005cc
    4364:	0001133d 	.word	0x0001133d
    4368:	200005d4 	.word	0x200005d4

0000436c <audio_midi_ctrl>:
	switch (ctrl) {
    436c:	2901      	cmp	r1, #1
{
    436e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4372:	460d      	mov	r5, r1
    4374:	4614      	mov	r4, r2
	switch (ctrl) {
    4376:	d070      	beq.n	445a <audio_midi_ctrl+0xee>
    4378:	2902      	cmp	r1, #2
    437a:	f000 8092 	beq.w	44a2 <audio_midi_ctrl+0x136>
    437e:	2900      	cmp	r1, #0
    4380:	f040 8092 	bne.w	44a8 <audio_midi_ctrl+0x13c>
		return audio_midi_enable(drv, (struct usbd_descriptors *)param);
    4384:	6886      	ldr	r6, [r0, #8]
	ifc = desc->sod;
    4386:	f8df 8148 	ldr.w	r8, [pc, #328]	; 44d0 <audio_midi_ctrl+0x164>
    438a:	6810      	ldr	r0, [r2, #0]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    438c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 44d4 <audio_midi_ctrl+0x168>
    4390:	1d37      	adds	r7, r6, #4
		if (NULL == ifc) {
    4392:	b920      	cbnz	r0, 439e <audio_midi_ctrl+0x32>
			return ERR_NOT_FOUND;
    4394:	f06f 0009 	mvn.w	r0, #9
}
    4398:	b003      	add	sp, #12
    439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    439e:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    43a0:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    43a2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    43a6:	2b01      	cmp	r3, #1
    43a8:	d1f4      	bne.n	4394 <audio_midi_ctrl+0x28>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    43aa:	783b      	ldrb	r3, [r7, #0]
    43ac:	429a      	cmp	r2, r3
    43ae:	d07e      	beq.n	44ae <audio_midi_ctrl+0x142>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    43b0:	2bff      	cmp	r3, #255	; 0xff
    43b2:	d17f      	bne.n	44b4 <audio_midi_ctrl+0x148>
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    43b4:	2d01      	cmp	r5, #1
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    43b6:	f807 2b01 	strb.w	r2, [r7], #1
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    43ba:	d009      	beq.n	43d0 <audio_midi_ctrl+0x64>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    43bc:	6823      	ldr	r3, [r4, #0]
    43be:	6861      	ldr	r1, [r4, #4]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    43c0:	7818      	ldrb	r0, [r3, #0]
    43c2:	2204      	movs	r2, #4
    43c4:	4418      	add	r0, r3
    43c6:	47c0      	blx	r8
	for (i=0; i<2; i++){
    43c8:	2d01      	cmp	r5, #1
    43ca:	d042      	beq.n	4452 <audio_midi_ctrl+0xe6>
    43cc:	2501      	movs	r5, #1
    43ce:	e7e0      	b.n	4392 <audio_midi_ctrl+0x26>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    43d0:	6861      	ldr	r1, [r4, #4]
    43d2:	f8df a104 	ldr.w	sl, [pc, #260]	; 44d8 <audio_midi_ctrl+0x16c>
    43d6:	2205      	movs	r2, #5
    43d8:	47c0      	blx	r8
    43da:	4683      	mov	fp, r0
			while (NULL != ep) {
    43dc:	f1bb 0f00 	cmp.w	fp, #0
    43e0:	d0ec      	beq.n	43bc <audio_midi_ctrl+0x50>
				ep_desc.bEndpointAddress = ep[2];
    43e2:	f89b 2002 	ldrb.w	r2, [fp, #2]
    43e6:	f88d 2002 	strb.w	r2, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    43ea:	f89b 2003 	ldrb.w	r2, [fp, #3]
    43ee:	f88d 2003 	strb.w	r2, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    43f2:	f89b 1005 	ldrb.w	r1, [fp, #5]
    43f6:	f89b 2004 	ldrb.w	r2, [fp, #4]
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    43fa:	4b31      	ldr	r3, [pc, #196]	; (44c0 <audio_midi_ctrl+0x154>)
    43fc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    4400:	b292      	uxth	r2, r2
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    4402:	f8ad 2004 	strh.w	r2, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    4406:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    440a:	b2d2      	uxtb	r2, r2
    440c:	f889 2004 	strb.w	r2, [r9, #4]
				usb_debug2[0] = i;
    4410:	2201      	movs	r2, #1
    4412:	f889 2000 	strb.w	r2, [r9]
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4416:	f89d 0002 	ldrb.w	r0, [sp, #2]
    441a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    441e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4422:	b292      	uxth	r2, r2
    4424:	4798      	blx	r3
    4426:	2800      	cmp	r0, #0
    4428:	d147      	bne.n	44ba <audio_midi_ctrl+0x14e>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    442a:	f89d 2002 	ldrb.w	r2, [sp, #2]
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    442e:	f89d 0002 	ldrb.w	r0, [sp, #2]
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    4432:	0613      	lsls	r3, r2, #24
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    4434:	b2c0      	uxtb	r0, r0
    4436:	bf4c      	ite	mi
    4438:	71b0      	strbmi	r0, [r6, #6]
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    443a:	71f0      	strbpl	r0, [r6, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    443c:	47d0      	blx	sl
				desc->sod = ep;
    443e:	f8c4 b000 	str.w	fp, [r4]
	return (desc + usb_desc_len(desc));
    4442:	f89b 0000 	ldrb.w	r0, [fp]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4446:	6861      	ldr	r1, [r4, #4]
    4448:	4b1e      	ldr	r3, [pc, #120]	; (44c4 <audio_midi_ctrl+0x158>)
    444a:	4458      	add	r0, fp
    444c:	4798      	blx	r3
    444e:	4683      	mov	fp, r0
    4450:	e7c4      	b.n	43dc <audio_midi_ctrl+0x70>
	_audiodf_midi_funcd.enabled = true;
    4452:	4b1d      	ldr	r3, [pc, #116]	; (44c8 <audio_midi_ctrl+0x15c>)
	return ERR_NONE;
    4454:	2000      	movs	r0, #0
	_audiodf_midi_funcd.enabled = true;
    4456:	745d      	strb	r5, [r3, #17]
	return ERR_NONE;
    4458:	e79e      	b.n	4398 <audio_midi_ctrl+0x2c>
		return audio_midi_disable(drv, (struct usbd_descriptors *)param);
    445a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    445c:	b12a      	cbz	r2, 446a <audio_midi_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    445e:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    4460:	795b      	ldrb	r3, [r3, #5]
    4462:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4466:	2b01      	cmp	r3, #1
    4468:	d194      	bne.n	4394 <audio_midi_ctrl+0x28>
	if (func_data->func_iface[0] != 0xFF) {
    446a:	792b      	ldrb	r3, [r5, #4]
	if (func_data->func_ep_in != 0xFF) {
    446c:	79a8      	ldrb	r0, [r5, #6]
	if (func_data->func_iface[0] != 0xFF) {
    446e:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    4470:	bf1c      	itt	ne
    4472:	23ff      	movne	r3, #255	; 0xff
    4474:	712b      	strbne	r3, [r5, #4]
	if (func_data->func_iface[1] != 0xFF) {
    4476:	796b      	ldrb	r3, [r5, #5]
    4478:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    447a:	bf1c      	itt	ne
    447c:	23ff      	movne	r3, #255	; 0xff
    447e:	716b      	strbne	r3, [r5, #5]
	if (func_data->func_ep_in != 0xFF) {
    4480:	28ff      	cmp	r0, #255	; 0xff
    4482:	d003      	beq.n	448c <audio_midi_ctrl+0x120>
		usb_d_ep_deinit(func_data->func_ep_in);
    4484:	4b11      	ldr	r3, [pc, #68]	; (44cc <audio_midi_ctrl+0x160>)
    4486:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    4488:	23ff      	movs	r3, #255	; 0xff
    448a:	71ab      	strb	r3, [r5, #6]
	if (func_data->func_ep_out != 0xFF) {
    448c:	79e8      	ldrb	r0, [r5, #7]
    448e:	28ff      	cmp	r0, #255	; 0xff
    4490:	d003      	beq.n	449a <audio_midi_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    4492:	4b0e      	ldr	r3, [pc, #56]	; (44cc <audio_midi_ctrl+0x160>)
    4494:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    4496:	23ff      	movs	r3, #255	; 0xff
    4498:	71eb      	strb	r3, [r5, #7]
	_audiodf_midi_funcd.enabled = false;
    449a:	4b0b      	ldr	r3, [pc, #44]	; (44c8 <audio_midi_ctrl+0x15c>)
    449c:	2000      	movs	r0, #0
    449e:	7458      	strb	r0, [r3, #17]
	return ERR_NONE;
    44a0:	e77a      	b.n	4398 <audio_midi_ctrl+0x2c>
		return ERR_UNSUPPORTED_OP;
    44a2:	f06f 001a 	mvn.w	r0, #26
    44a6:	e777      	b.n	4398 <audio_midi_ctrl+0x2c>
	switch (ctrl) {
    44a8:	f06f 000c 	mvn.w	r0, #12
    44ac:	e774      	b.n	4398 <audio_midi_ctrl+0x2c>
				return ERR_ALREADY_INITIALIZED;
    44ae:	f06f 0011 	mvn.w	r0, #17
    44b2:	e771      	b.n	4398 <audio_midi_ctrl+0x2c>
				return ERR_NO_RESOURCE;
    44b4:	f06f 001b 	mvn.w	r0, #27
    44b8:	e76e      	b.n	4398 <audio_midi_ctrl+0x2c>
					return ERR_NOT_INITIALIZED;
    44ba:	f06f 0013 	mvn.w	r0, #19
    44be:	e76b      	b.n	4398 <audio_midi_ctrl+0x2c>
    44c0:	0000e051 	.word	0x0000e051
    44c4:	0000ade7 	.word	0x0000ade7
    44c8:	200005cc 	.word	0x200005cc
    44cc:	0000e0b5 	.word	0x0000e0b5
    44d0:	0000adcd 	.word	0x0000adcd
    44d4:	200010cc 	.word	0x200010cc
    44d8:	0000e0e1 	.word	0x0000e0e1

000044dc <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    44dc:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    44de:	4b0a      	ldr	r3, [pc, #40]	; (4508 <audiodf_midi_init+0x2c>)
    44e0:	4798      	blx	r3
    44e2:	2801      	cmp	r0, #1
    44e4:	d80c      	bhi.n	4500 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    44e6:	4809      	ldr	r0, [pc, #36]	; (450c <audiodf_midi_init+0x30>)
    44e8:	4b09      	ldr	r3, [pc, #36]	; (4510 <audiodf_midi_init+0x34>)
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    44ea:	e9c0 3006 	strd	r3, r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <audiodf_midi_init+0x38>)
    44f0:	3014      	adds	r0, #20
    44f2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    44f4:	2001      	movs	r0, #1
    44f6:	4908      	ldr	r1, [pc, #32]	; (4518 <audiodf_midi_init+0x3c>)
    44f8:	4b08      	ldr	r3, [pc, #32]	; (451c <audiodf_midi_init+0x40>)
    44fa:	4798      	blx	r3
	return ERR_NONE;
    44fc:	2000      	movs	r0, #0
}
    44fe:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    4500:	f06f 0010 	mvn.w	r0, #16
    4504:	e7fb      	b.n	44fe <audiodf_midi_init+0x22>
    4506:	bf00      	nop
    4508:	00011775 	.word	0x00011775
    450c:	200005cc 	.word	0x200005cc
    4510:	0000436d 	.word	0x0000436d
    4514:	0001171d 	.word	0x0001171d
    4518:	20000000 	.word	0x20000000
    451c:	00011695 	.word	0x00011695

00004520 <audiodf_midi_write>:
}



int32_t audiodf_midi_write(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    4520:	b410      	push	{r4}
		return ERR_DENIED;
	}
	
	// if previous xfer is completed
	
	_audiodf_midi_funcd.midi_report[0] = byte0;
    4522:	4c07      	ldr	r4, [pc, #28]	; (4540 <audiodf_midi_write+0x20>)
    4524:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    4526:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    4528:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    452a:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    452c:	79a0      	ldrb	r0, [r4, #6]
    452e:	f104 0109 	add.w	r1, r4, #9
    4532:	4c04      	ldr	r4, [pc, #16]	; (4544 <audiodf_midi_write+0x24>)
    4534:	2300      	movs	r3, #0
    4536:	46a4      	mov	ip, r4
    4538:	2204      	movs	r2, #4
	
}
    453a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    453e:	4760      	bx	ip
    4540:	200005cc 	.word	0x200005cc
    4544:	0001133d 	.word	0x0001133d

00004548 <audiodf_midi_write_status>:

int32_t audiodf_midi_write_status(){
    4548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	
	struct usb_d_ep_status epstat;
	return usb_d_ep_get_status(_audiodf_midi_funcd.func_ep_in, &epstat);
    454a:	4b04      	ldr	r3, [pc, #16]	; (455c <audiodf_midi_write_status+0x14>)
    454c:	a901      	add	r1, sp, #4
    454e:	7998      	ldrb	r0, [r3, #6]
    4550:	4b03      	ldr	r3, [pc, #12]	; (4560 <audiodf_midi_write_status+0x18>)
    4552:	4798      	blx	r3
	
}
    4554:	b005      	add	sp, #20
    4556:	f85d fb04 	ldr.w	pc, [sp], #4
    455a:	bf00      	nop
    455c:	200005cc 	.word	0x200005cc
    4560:	0000e209 	.word	0x0000e209

00004564 <audiodf_midi_read>:



int32_t audiodf_midi_read(uint8_t *buf, uint32_t size)
{
    4564:	b410      	push	{r4}
    4566:	460a      	mov	r2, r1
	if (!audiodf_midi_is_enabled()) {
		return ERR_DENIED;
	}
		
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_out, buf, size, false);
    4568:	4c04      	ldr	r4, [pc, #16]	; (457c <audiodf_midi_read+0x18>)
    456a:	4601      	mov	r1, r0
    456c:	4804      	ldr	r0, [pc, #16]	; (4580 <audiodf_midi_read+0x1c>)
    456e:	46a4      	mov	ip, r4
    4570:	79c0      	ldrb	r0, [r0, #7]
}
    4572:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_out, buf, size, false);
    4576:	2300      	movs	r3, #0
    4578:	4760      	bx	ip
    457a:	bf00      	nop
    457c:	0001133d 	.word	0x0001133d
    4580:	200005cc 	.word	0x200005cc

00004584 <audiodf_midi_register_callback>:


int32_t audiodf_midi_register_callback(enum audiodf_midi_cb_type cb_type, FUNC_PTR func)
{
    4584:	b510      	push	{r4, lr}
    4586:	460a      	mov	r2, r1
	switch (cb_type) {
    4588:	b120      	cbz	r0, 4594 <audiodf_midi_register_callback+0x10>
    458a:	2801      	cmp	r0, #1
    458c:	d009      	beq.n	45a2 <audiodf_midi_register_callback+0x1e>
    458e:	f06f 000c 	mvn.w	r0, #12
		break;
		default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
}
    4592:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    4594:	4b05      	ldr	r3, [pc, #20]	; (45ac <audiodf_midi_register_callback+0x28>)
    4596:	79d8      	ldrb	r0, [r3, #7]
    4598:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    459a:	4b05      	ldr	r3, [pc, #20]	; (45b0 <audiodf_midi_register_callback+0x2c>)
    459c:	4798      	blx	r3
	return ERR_NONE;
    459e:	2000      	movs	r0, #0
		break;
    45a0:	e7f7      	b.n	4592 <audiodf_midi_register_callback+0xe>
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    45a2:	4b02      	ldr	r3, [pc, #8]	; (45ac <audiodf_midi_register_callback+0x28>)
    45a4:	2102      	movs	r1, #2
    45a6:	7998      	ldrb	r0, [r3, #6]
    45a8:	e7f7      	b.n	459a <audiodf_midi_register_callback+0x16>
    45aa:	bf00      	nop
    45ac:	200005cc 	.word	0x200005cc
    45b0:	0000e2c9 	.word	0x0000e2c9

000045b4 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45b4:	b570      	push	{r4, r5, r6, lr}
	instance->buffer_depth = buffer_depth;
	
	instance->result_format = result_format;
	instance->result_resolution = result_resolution;
	
	instance->result_average = 0;
    45b6:	2500      	movs	r5, #0
	instance->result_format = result_format;
    45b8:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    45ba:	7183      	strb	r3, [r0, #6]
uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45bc:	4604      	mov	r4, r0
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45be:	4b0a      	ldr	r3, [pc, #40]	; (45e8 <grid_ain_channel_init+0x34>)
	instance->buffer_depth = buffer_depth;
    45c0:	7101      	strb	r1, [r0, #4]
	instance->result_average = 0;
    45c2:	8145      	strh	r5, [r0, #10]
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45c4:	0048      	lsls	r0, r1, #1
uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45c6:	460e      	mov	r6, r1
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45c8:	4798      	blx	r3
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45ca:	462b      	mov	r3, r5
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45cc:	6020      	str	r0, [r4, #0]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45ce:	462a      	mov	r2, r5
    45d0:	b2d9      	uxtb	r1, r3
    45d2:	428e      	cmp	r6, r1
    45d4:	d803      	bhi.n	45de <grid_ain_channel_init+0x2a>
		instance->buffer[i] = 0;
	}
	
	instance->result_changed = 0;
    45d6:	81a2      	strh	r2, [r4, #12]
	instance->result_value = 0;
    45d8:	8122      	strh	r2, [r4, #8]
		
	return 0;
}
    45da:	2000      	movs	r0, #0
    45dc:	bd70      	pop	{r4, r5, r6, pc}
		instance->buffer[i] = 0;
    45de:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45e2:	3301      	adds	r3, #1
    45e4:	e7f4      	b.n	45d0 <grid_ain_channel_init+0x1c>
    45e6:	bf00      	nop
    45e8:	000123c5 	.word	0x000123c5

000045ec <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    45ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45f0:	4605      	mov	r5, r0
    45f2:	4699      	mov	r9, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    45f4:	0100      	lsls	r0, r0, #4
    45f6:	4b0b      	ldr	r3, [pc, #44]	; (4624 <grid_ain_init+0x38>)
    45f8:	4e0b      	ldr	r6, [pc, #44]	; (4628 <grid_ain_init+0x3c>)

	for (uint8_t i=0; i<length; i++){
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    45fa:	f8df a030 	ldr.w	sl, [pc, #48]	; 462c <grid_ain_init+0x40>
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    45fe:	460f      	mov	r7, r1
    4600:	4690      	mov	r8, r2
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    4602:	4798      	blx	r3
	for (uint8_t i=0; i<length; i++){
    4604:	2400      	movs	r4, #0
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    4606:	6030      	str	r0, [r6, #0]
	for (uint8_t i=0; i<length; i++){
    4608:	42a5      	cmp	r5, r4
    460a:	d102      	bne.n	4612 <grid_ain_init+0x26>
	}

	return 0;
}
    460c:	2000      	movs	r0, #0
    460e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    4612:	6830      	ldr	r0, [r6, #0]
    4614:	464b      	mov	r3, r9
    4616:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    461a:	4642      	mov	r2, r8
    461c:	4639      	mov	r1, r7
    461e:	47d0      	blx	sl
	for (uint8_t i=0; i<length; i++){
    4620:	3401      	adds	r4, #1
    4622:	e7f1      	b.n	4608 <grid_ain_init+0x1c>
    4624:	000123c5 	.word	0x000123c5
    4628:	20004034 	.word	0x20004034
    462c:	000045b5 	.word	0x000045b5

00004630 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    4630:	4b30      	ldr	r3, [pc, #192]	; (46f4 <grid_ain_add_sample+0xc4>)
uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    4632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    4636:	681a      	ldr	r2, [r3, #0]
    4638:	0104      	lsls	r4, r0, #4
    463a:	eb02 1300 	add.w	r3, r2, r0, lsl #4
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    463e:	5914      	ldr	r4, [r2, r4]
    4640:	f893 e004 	ldrb.w	lr, [r3, #4]
    4644:	2200      	movs	r2, #0
	uint8_t maximum_index = 0;
    4646:	4615      	mov	r5, r2
	uint8_t minimum_index = 0;
    4648:	4616      	mov	r6, r2
	uint16_t maximum = 0;
    464a:	4691      	mov	r9, r2
	uint16_t minimum = -1; // -1 trick to get the largest possible number
    464c:	f64f 78ff 	movw	r8, #65535	; 0xffff
	uint32_t sum = 0;
    4650:	4610      	mov	r0, r2
    4652:	fa5f fc82 	uxtb.w	ip, r2
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    4656:	45e6      	cmp	lr, ip
    4658:	d83c      	bhi.n	46d4 <grid_ain_add_sample+0xa4>
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
	
	if (value>average){		
    465a:	180a      	adds	r2, r1, r0
	uint16_t average = sum/instance->buffer_depth;
    465c:	fbb0 f0fe 	udiv	r0, r0, lr
	if (value>average){		
    4660:	b280      	uxth	r0, r0
    4662:	4288      	cmp	r0, r1
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    4664:	bf34      	ite	cc
    4666:	b230      	sxthcc	r0, r6
		instance->buffer[minimum_index] = value;		
	}else{
		// Replace maximum in the buffer and recalculate sum
		sum = sum - instance->buffer[maximum_index] + value;
    4668:	b228      	sxthcs	r0, r5
    466a:	f834 5010 	ldrh.w	r5, [r4, r0, lsl #1]
		instance->buffer[maximum_index] = value;
    466e:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
    4672:	1b52      	subs	r2, r2, r5
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    4674:	7919      	ldrb	r1, [r3, #4]
    4676:	fbb2 f2f1 	udiv	r2, r2, r1
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    467a:	7999      	ldrb	r1, [r3, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    467c:	795c      	ldrb	r4, [r3, #5]
	
	uint16_t downsampled = average>>downscale_factor;
	uint16_t upscaled    = downsampled<<upscale_factor;
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    467e:	895e      	ldrh	r6, [r3, #10]
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    4680:	f8b3 e008 	ldrh.w	lr, [r3, #8]
	uint8_t downscale_factor = (16-instance->result_resolution);
    4684:	f1c1 0710 	rsb	r7, r1, #16
	uint16_t downsampled = average>>downscale_factor;
    4688:	b295      	uxth	r5, r2
    468a:	b2ff      	uxtb	r7, r7
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    468c:	1a61      	subs	r1, r4, r1
	uint16_t upscaled    = downsampled<<upscale_factor;
    468e:	b2c8      	uxtb	r0, r1
	uint16_t downsampled = average>>downscale_factor;
    4690:	fa45 f107 	asr.w	r1, r5, r7
	uint16_t upscaled    = downsampled<<upscale_factor;
    4694:	b289      	uxth	r1, r1
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    4696:	1b76      	subs	r6, r6, r5
	uint16_t upscaled    = downsampled<<upscale_factor;
    4698:	4081      	lsls	r1, r0
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    469a:	2e00      	cmp	r6, #0
	uint16_t upscaled    = downsampled<<upscale_factor;
    469c:	fa1f fc81 	uxth.w	ip, r1
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    46a0:	bfb8      	it	lt
    46a2:	4276      	neglt	r6, r6
    46a4:	2501      	movs	r5, #1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46a6:	45e6      	cmp	lr, ip
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    46a8:	fa05 f707 	lsl.w	r7, r5, r7
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46ac:	d01f      	beq.n	46ee <grid_ain_add_sample+0xbe>
    46ae:	42be      	cmp	r6, r7
    46b0:	dc09      	bgt.n	46c6 <grid_ain_add_sample+0x96>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    46b2:	fa05 f404 	lsl.w	r4, r5, r4
    46b6:	fa05 f000 	lsl.w	r0, r5, r0
    46ba:	1a20      	subs	r0, r4, r0
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46bc:	4560      	cmp	r0, ip
    46be:	d002      	beq.n	46c6 <grid_ain_add_sample+0x96>
    46c0:	f1bc 0f00 	cmp.w	ip, #0
    46c4:	d113      	bne.n	46ee <grid_ain_add_sample+0xbe>
		
		instance->result_average = average;
		instance->result_value = upscaled;
		instance->result_changed = 1;
    46c6:	2001      	movs	r0, #1
	average = sum/instance->buffer_depth;
    46c8:	815a      	strh	r2, [r3, #10]
		instance->result_value = upscaled;
    46ca:	f8a3 c008 	strh.w	ip, [r3, #8]
		instance->result_changed = 1;
    46ce:	8198      	strh	r0, [r3, #12]
		return 1;
	}else{		
		return 0;
	}
	
}
    46d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint16_t current = instance->buffer[i];
    46d4:	f834 7012 	ldrh.w	r7, [r4, r2, lsl #1]
		if (current > maximum){
    46d8:	45b9      	cmp	r9, r7
    46da:	bf3c      	itt	cc
    46dc:	4665      	movcc	r5, ip
    46de:	46b9      	movcc	r9, r7
		if (current < minimum){
    46e0:	45b8      	cmp	r8, r7
		sum += current;
    46e2:	4438      	add	r0, r7
		if (current < minimum){
    46e4:	bf84      	itt	hi
    46e6:	4666      	movhi	r6, ip
    46e8:	46b8      	movhi	r8, r7
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    46ea:	3201      	adds	r2, #1
    46ec:	e7b1      	b.n	4652 <grid_ain_add_sample+0x22>
		return 0;
    46ee:	2000      	movs	r0, #0
    46f0:	e7ee      	b.n	46d0 <grid_ain_add_sample+0xa0>
    46f2:	bf00      	nop
    46f4:	20004034 	.word	0x20004034

000046f8 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    46f8:	4b02      	ldr	r3, [pc, #8]	; (4704 <grid_ain_get_changed+0xc>)
    46fa:	681b      	ldr	r3, [r3, #0]
    46fc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    4700:	7b00      	ldrb	r0, [r0, #12]
    4702:	4770      	bx	lr
    4704:	20004034 	.word	0x20004034

00004708 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    4708:	4b08      	ldr	r3, [pc, #32]	; (472c <grid_ain_get_average+0x24>)
    470a:	681a      	ldr	r2, [r3, #0]
	instance->result_changed = 0;
	
	if (resolution>6 && resolution<15){
    470c:	1fcb      	subs	r3, r1, #7
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    470e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
	if (resolution>6 && resolution<15){
    4712:	2b07      	cmp	r3, #7
	instance->result_changed = 0;
    4714:	f04f 0000 	mov.w	r0, #0
    4718:	8190      	strh	r0, [r2, #12]
	if (resolution>6 && resolution<15){
    471a:	d805      	bhi.n	4728 <grid_ain_get_average+0x20>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    471c:	7950      	ldrb	r0, [r2, #5]
    471e:	8913      	ldrh	r3, [r2, #8]
    4720:	1a40      	subs	r0, r0, r1
    4722:	fa43 f000 	asr.w	r0, r3, r0
    4726:	b280      	uxth	r0, r0
		
	}
	else{
		return 0;
	}
}
    4728:	4770      	bx	lr
    472a:	bf00      	nop
    472c:	20004034 	.word	0x20004034

00004730 <grid_port_reset_receiver>:
#include "grid_buf.h"

// PORTS


void grid_port_reset_receiver(struct grid_port* por){
    4730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
	usart_async_disable(por->usart);
    4732:	4b24      	ldr	r3, [pc, #144]	; (47c4 <grid_port_reset_receiver+0x94>)
	
	
	por->ping_partner_token = 255;
	por->ping_local_token = 255;
	
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4734:	4e24      	ldr	r6, [pc, #144]	; (47c8 <grid_port_reset_receiver+0x98>)
void grid_port_reset_receiver(struct grid_port* por){
    4736:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    4738:	6840      	ldr	r0, [r0, #4]
    473a:	4798      	blx	r3
	por->partner_status = 0;
    473c:	f642 734b 	movw	r3, #12107	; 0x2f4b
	por->rx_double_buffer_seek_start_index = 0;
    4740:	2500      	movs	r5, #0
	por->rx_double_buffer_read_start_index = 0;
    4742:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	por->ping_local_token = 255;
    4746:	f642 7731 	movw	r7, #12081	; 0x2f31
	por->partner_status = 0;
    474a:	54e5      	strb	r5, [r4, r3]
	por->ping_partner_token = 255;
    474c:	f642 7332 	movw	r3, #12082	; 0x2f32
    4750:	22ff      	movs	r2, #255	; 0xff
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4752:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
	por->ping_partner_token = 255;
    4756:	54e2      	strb	r2, [r4, r3]
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4758:	2102      	movs	r1, #2
	por->ping_local_token = 255;
    475a:	55e2      	strb	r2, [r4, r7]
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    475c:	303b      	adds	r0, #59	; 0x3b
    475e:	47b0      	blx	r6
	grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4760:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
    4764:	5de2      	ldrb	r2, [r4, r7]
    4766:	2102      	movs	r1, #2
    4768:	3039      	adds	r0, #57	; 0x39
    476a:	47b0      	blx	r6
	grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    476c:	f642 7347 	movw	r3, #12103	; 0x2f47
    4770:	f504 563c 	add.w	r6, r4, #12032	; 0x2f00
    4774:	3633      	adds	r6, #51	; 0x33
    4776:	5ce1      	ldrb	r1, [r4, r3]
    4778:	4b14      	ldr	r3, [pc, #80]	; (47cc <grid_port_reset_receiver+0x9c>)
    477a:	9101      	str	r1, [sp, #4]
    477c:	4630      	mov	r0, r6
    477e:	4798      	blx	r3
    4780:	9901      	ldr	r1, [sp, #4]
    4782:	4b13      	ldr	r3, [pc, #76]	; (47d0 <grid_port_reset_receiver+0xa0>)
    4784:	4602      	mov	r2, r0
    4786:	4630      	mov	r0, r6
    4788:	4798      	blx	r3


	
	por->rx_double_buffer_timeout = 0;
	grid_sys_port_reset_dma(por);
    478a:	4b12      	ldr	r3, [pc, #72]	; (47d4 <grid_port_reset_receiver+0xa4>)
	por->rx_double_buffer_timeout = 0;
    478c:	61e5      	str	r5, [r4, #28]
	grid_sys_port_reset_dma(por);
    478e:	4620      	mov	r0, r4
    4790:	4798      	blx	r3
	
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    4792:	f504 539d 	add.w	r3, r4, #5024	; 0x13a0
    4796:	3314      	adds	r3, #20
    4798:	f504 521c 	add.w	r2, r4, #9984	; 0x2700
    479c:	323c      	adds	r2, #60	; 0x3c
    479e:	4619      	mov	r1, r3
		por->rx_double_buffer[i] = 0;
    47a0:	f803 5b01 	strb.w	r5, [r3], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    47a4:	4293      	cmp	r3, r2
    47a6:	d1fb      	bne.n	47a0 <grid_port_reset_receiver+0x70>
    47a8:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	}
	
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;
    47ac:	2200      	movs	r2, #0
    47ae:	f803 2b01 	strb.w	r2, [r3], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    47b2:	428b      	cmp	r3, r1
    47b4:	d1fb      	bne.n	47ae <grid_port_reset_receiver+0x7e>
	}
	
	usart_async_enable(por->usart);
    47b6:	6860      	ldr	r0, [r4, #4]
    47b8:	4b07      	ldr	r3, [pc, #28]	; (47d8 <grid_port_reset_receiver+0xa8>)
	
}
    47ba:	b003      	add	sp, #12
    47bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	usart_async_enable(por->usart);
    47c0:	4718      	bx	r3
    47c2:	bf00      	nop
    47c4:	0000fa65 	.word	0x0000fa65
    47c8:	00009069 	.word	0x00009069
    47cc:	000091b1 	.word	0x000091b1
    47d0:	000091e5 	.word	0x000091e5
    47d4:	00008bf9 	.word	0x00008bf9
    47d8:	0000fa39 	.word	0x0000fa39

000047dc <grid_buffer_init>:



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
	
	grid_buffer_error_count = 0;
    47dc:	4a0f      	ldr	r2, [pc, #60]	; (481c <grid_buffer_init+0x40>)
    47de:	2300      	movs	r3, #0
uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    47e0:	b510      	push	{r4, lr}
    47e2:	3002      	adds	r0, #2
	grid_buffer_error_count = 0;
    47e4:	7013      	strb	r3, [r2, #0]
	
	buf->buffer_length = length;
	
	buf->read_length   = 0;
    47e6:	f8a0 33ee 	strh.w	r3, [r0, #1006]	; 0x3ee
	buf->buffer_length = length;
    47ea:	f820 1c02 	strh.w	r1, [r0, #-2]
	
	buf->read_start    = 0;
    47ee:	f8a0 33e8 	strh.w	r3, [r0, #1000]	; 0x3e8
	buf->read_stop     = 0;
    47f2:	f8a0 33ea 	strh.w	r3, [r0, #1002]	; 0x3ea
	buf->read_active   = 0;
    47f6:	f8a0 33ec 	strh.w	r3, [r0, #1004]	; 0x3ec
	
	buf->write_start    = 0;
    47fa:	f8a0 33f0 	strh.w	r3, [r0, #1008]	; 0x3f0
	buf->write_stop     = 0;
    47fe:	f8a0 33f2 	strh.w	r3, [r0, #1010]	; 0x3f2
	buf->write_active   = 0;
    4802:	f8a0 33f4 	strh.w	r3, [r0, #1012]	; 0x3f4
	

	for (uint16_t i=0; i<buf->buffer_length; i++){
		buf->buffer_storage[i] = 0;
    4806:	461c      	mov	r4, r3
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4808:	b29a      	uxth	r2, r3
    480a:	4291      	cmp	r1, r2
    480c:	d801      	bhi.n	4812 <grid_buffer_init+0x36>
	}
	
	return 1;
	
}
    480e:	2001      	movs	r0, #1
    4810:	bd10      	pop	{r4, pc}
		buf->buffer_storage[i] = 0;
    4812:	f800 4b01 	strb.w	r4, [r0], #1
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4816:	3301      	adds	r3, #1
    4818:	e7f6      	b.n	4808 <grid_buffer_init+0x2c>
    481a:	bf00      	nop
    481c:	20004028 	.word	0x20004028

00004820 <grid_buffer_get_space>:

uint16_t grid_buffer_get_space(struct grid_buffer* buf){
	
	uint16_t space = 0;
		
	if (buf->read_start > buf->write_start){
    4820:	f8b0 33ea 	ldrh.w	r3, [r0, #1002]	; 0x3ea
    4824:	f8b0 23f2 	ldrh.w	r2, [r0, #1010]	; 0x3f2
    4828:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    482a:	bf9b      	ittet	ls
    482c:	8800      	ldrhls	r0, [r0, #0]
    482e:	18c0      	addls	r0, r0, r3
		space = buf->read_start - buf->write_start;
    4830:	1a98      	subhi	r0, r3, r2
		space = buf->buffer_length - buf->write_start + buf->read_start;
    4832:	1a80      	subls	r0, r0, r2
    4834:	b280      	uxth	r0, r0
	}
	
	return space;
}
    4836:	4770      	bx	lr

00004838 <grid_buffer_write_init>:





uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    4838:	b510      	push	{r4, lr}
	
	
	
	uint16_t space = grid_buffer_get_space(buf);
    483a:	4b0c      	ldr	r3, [pc, #48]	; (486c <grid_buffer_write_init+0x34>)
uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    483c:	4604      	mov	r4, r0
	uint16_t space = grid_buffer_get_space(buf);
    483e:	4798      	blx	r3

	
	if (space>length){
    4840:	4288      	cmp	r0, r1
    4842:	d90b      	bls.n	485c <grid_buffer_write_init+0x24>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    4844:	f8b4 33f2 	ldrh.w	r3, [r4, #1010]	; 0x3f2
    4848:	8820      	ldrh	r0, [r4, #0]
    484a:	440b      	add	r3, r1
    484c:	fbb3 f2f0 	udiv	r2, r3, r0
    4850:	fb00 3312 	mls	r3, r0, r2, r3
    4854:	f8a4 33f4 	strh.w	r3, [r4, #1012]	; 0x3f4
	}
	
	
	
	
}
    4858:	4608      	mov	r0, r1
    485a:	bd10      	pop	{r4, pc}
		grid_buffer_error_count++;
    485c:	4a04      	ldr	r2, [pc, #16]	; (4870 <grid_buffer_write_init+0x38>)
    485e:	7813      	ldrb	r3, [r2, #0]
    4860:	3301      	adds	r3, #1
    4862:	b2db      	uxtb	r3, r3
    4864:	7013      	strb	r3, [r2, #0]
		return 0; // failed
    4866:	2100      	movs	r1, #0
    4868:	e7f6      	b.n	4858 <grid_buffer_write_init+0x20>
    486a:	bf00      	nop
    486c:	00004821 	.word	0x00004821
    4870:	20004028 	.word	0x20004028

00004874 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    4874:	f8b0 33f6 	ldrh.w	r3, [r0, #1014]	; 0x3f6
    4878:	18c2      	adds	r2, r0, r3
		
	buf->write_active++;
    487a:	3301      	adds	r3, #1
	buf->buffer_storage[buf->write_active] = character;
    487c:	7091      	strb	r1, [r2, #2]
	buf->write_active %= buf->buffer_length;
    487e:	8801      	ldrh	r1, [r0, #0]
    4880:	b29b      	uxth	r3, r3
    4882:	fbb3 f2f1 	udiv	r2, r3, r1
    4886:	fb01 3312 	mls	r3, r1, r2, r3
    488a:	f8a0 33f6 	strh.w	r3, [r0, #1014]	; 0x3f6
		
	return 1;
		

}
    488e:	2001      	movs	r0, #1
    4890:	4770      	bx	lr
	...

00004894 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    4894:	f8b0 33f4 	ldrh.w	r3, [r0, #1012]	; 0x3f4
    4898:	f8b0 23f6 	ldrh.w	r2, [r0, #1014]	; 0x3f6
    489c:	4293      	cmp	r3, r2
		buf->write_start = buf->write_active;
		return 1;
	}
	else{
		
		grid_buffer_error_count++;
    489e:	bf17      	itett	ne
    48a0:	4a05      	ldrne	r2, [pc, #20]	; (48b8 <grid_buffer_write_acknowledge+0x24>)
		buf->write_start = buf->write_active;
    48a2:	f8a0 33f2 	strheq.w	r3, [r0, #1010]	; 0x3f2
		grid_buffer_error_count++;
    48a6:	7813      	ldrbne	r3, [r2, #0]
    48a8:	3301      	addne	r3, #1
    48aa:	bf17      	itett	ne
    48ac:	b2db      	uxtbne	r3, r3
		return 1;
    48ae:	2001      	moveq	r0, #1
		grid_buffer_error_count++;
    48b0:	7013      	strbne	r3, [r2, #0]
    48b2:	2000      	movne	r0, #0
		return 0;
	}
	
	
}
    48b4:	4770      	bx	lr
    48b6:	bf00      	nop
    48b8:	20004028 	.word	0x20004028

000048bc <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48c0:	ed2d 8b02 	vpush	{d8}
	uint8_t buffer[length];
    48c4:	1dd3      	adds	r3, r2, #7
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48c6:	b08b      	sub	sp, #44	; 0x2c
    48c8:	4690      	mov	r8, r2
	uint8_t buffer[length];
    48ca:	08db      	lsrs	r3, r3, #3
    48cc:	466a      	mov	r2, sp
    48ce:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
	for (uint16_t i = 0; i<length; i++){
    48d2:	2200      	movs	r2, #0
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48d4:	af02      	add	r7, sp, #8
	uint8_t buffer[length];
    48d6:	469d      	mov	sp, r3
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48d8:	4604      	mov	r4, r0
    48da:	6a83      	ldr	r3, [r0, #40]	; 0x28
	uint8_t buffer[length];
    48dc:	f10d 0908 	add.w	r9, sp, #8
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    48e0:	f241 3088 	movw	r0, #5000	; 0x1388
    48e4:	f241 35b4 	movw	r5, #5044	; 0x13b4
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    48e8:	4694      	mov	ip, r2
	for (uint16_t i = 0; i<length; i++){
    48ea:	b291      	uxth	r1, r2
    48ec:	4588      	cmp	r8, r1
    48ee:	f200 80e3 	bhi.w	4ab8 <grid_port_receive_decode+0x1fc>
	for (uint16_t i = 0; i<length; i++){
    48f2:	2200      	movs	r2, #0
	message = &buffer[0];
    48f4:	464d      	mov	r5, r9
	for (uint16_t i = 0; i<length; i++){
    48f6:	f241 3088 	movw	r0, #5000	; 0x1388
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    48fa:	f241 3cb4 	movw	ip, #5044	; 0x13b4
    48fe:	4696      	mov	lr, r2
	for (uint16_t i = 0; i<length; i++){
    4900:	b291      	uxth	r1, r2
    4902:	4588      	cmp	r8, r1
    4904:	f200 80e5 	bhi.w	4ad2 <grid_port_receive_decode+0x216>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    4908:	4443      	add	r3, r8
    490a:	fbb3 f2f0 	udiv	r2, r3, r0
    490e:	fb00 3312 	mls	r3, r0, r2, r3
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    4912:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
	por->rx_double_buffer_status = 0;
    4916:	2300      	movs	r3, #0
    4918:	6223      	str	r3, [r4, #32]
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    491a:	f8df a250 	ldr.w	sl, [pc, #592]	; 4b6c <grid_port_receive_decode+0x2b0>
    491e:	f8df b250 	ldr.w	fp, [pc, #592]	; 4b70 <grid_port_receive_decode+0x2b4>
    4922:	4b88      	ldr	r3, [pc, #544]	; (4b44 <grid_port_receive_decode+0x288>)
	for (uint16_t i = 1; i<length; i++){
    4924:	2601      	movs	r6, #1
    4926:	45b0      	cmp	r8, r6
    4928:	f200 80dd 	bhi.w	4ae6 <grid_port_receive_decode+0x22a>
	if (message[0] == GRID_CONST_SOH && message[length-1] == GRID_CONST_LF){
    492c:	782b      	ldrb	r3, [r5, #0]
    492e:	2b01      	cmp	r3, #1
    4930:	f040 80bc 	bne.w	4aac <grid_port_receive_decode+0x1f0>
    4934:	eb05 0308 	add.w	r3, r5, r8
    4938:	f813 9c01 	ldrb.w	r9, [r3, #-1]
    493c:	f1b9 0f0a 	cmp.w	r9, #10
    4940:	f040 80b4 	bne.w	4aac <grid_port_receive_decode+0x1f0>
		checksum_received = grid_msg_checksum_read(message, length);
    4944:	4b80      	ldr	r3, [pc, #512]	; (4b48 <grid_port_receive_decode+0x28c>)
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    4946:	4e81      	ldr	r6, [pc, #516]	; (4b4c <grid_port_receive_decode+0x290>)
		checksum_received = grid_msg_checksum_read(message, length);
    4948:	4641      	mov	r1, r8
    494a:	4628      	mov	r0, r5
    494c:	4798      	blx	r3
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    494e:	4641      	mov	r1, r8
		checksum_received = grid_msg_checksum_read(message, length);
    4950:	4682      	mov	sl, r0
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    4952:	4628      	mov	r0, r5
    4954:	47b0      	blx	r6
		if (checksum_calculated == checksum_received && error_flag == 0){
    4956:	4582      	cmp	sl, r0
    4958:	f040 81fc 	bne.w	4d54 <grid_port_receive_decode+0x498>
			if (message[1] == GRID_CONST_BRC){ // Broadcast message
    495c:	786b      	ldrb	r3, [r5, #1]
    495e:	2b0f      	cmp	r3, #15
    4960:	f040 810c 	bne.w	4b7c <grid_port_receive_decode+0x2c0>
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    4964:	f107 061f 	add.w	r6, r7, #31
				uint8_t error=0;
    4968:	f04f 0300 	mov.w	r3, #0
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    496c:	f8df b204 	ldr.w	fp, [pc, #516]	; 4b74 <grid_port_receive_decode+0x2b8>
				uint8_t error=0;
    4970:	77fb      	strb	r3, [r7, #31]
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    4972:	2202      	movs	r2, #2
    4974:	4633      	mov	r3, r6
    4976:	2104      	movs	r1, #4
    4978:	4628      	mov	r0, r5
    497a:	47d8      	blx	fp
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    497c:	4649      	mov	r1, r9
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    497e:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    4980:	4633      	mov	r3, r6
    4982:	2202      	movs	r2, #2
    4984:	4628      	mov	r0, r5
    4986:	47d8      	blx	fp
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    4988:	4633      	mov	r3, r6
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    498a:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    498c:	2202      	movs	r2, #2
    498e:	2106      	movs	r1, #6
    4990:	4628      	mov	r0, r5
    4992:	47d8      	blx	fp
    4994:	b2c3      	uxtb	r3, r0
    4996:	617b      	str	r3, [r7, #20]
    4998:	f1a3 0a7f 	sub.w	sl, r3, #127	; 0x7f
				int8_t received_dy  = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    499c:	2202      	movs	r2, #2
    499e:	4633      	mov	r3, r6
    49a0:	2108      	movs	r1, #8
    49a2:	4628      	mov	r0, r5
    49a4:	47d8      	blx	fp
    49a6:	b2c3      	uxtb	r3, r0
    49a8:	613b      	str	r3, [r7, #16]
    49aa:	f1a3 097f 	sub.w	r9, r3, #127	; 0x7f
				uint8_t received_rot = grid_msg_get_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, &error);
    49ae:	2202      	movs	r2, #2
    49b0:	4633      	mov	r3, r6
    49b2:	210c      	movs	r1, #12
    49b4:	4628      	mov	r0, r5
    49b6:	47d8      	blx	fp
				uint8_t updated_rot = (received_rot + por->partner_fi)%4;
    49b8:	f642 7330 	movw	r3, #12080	; 0x2f30
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    49bc:	fa4f fa8a 	sxtb.w	sl, sl
				uint8_t updated_rot = (received_rot + por->partner_fi)%4;
    49c0:	5ce3      	ldrb	r3, [r4, r3]
    49c2:	4418      	add	r0, r3
    49c4:	f000 0203 	and.w	r2, r0, #3
    49c8:	ee08 2a10 	vmov	s16, r2
				int8_t received_dy  = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    49cc:	fa4f f989 	sxtb.w	r9, r9
				if (por->partner_fi == 0){ // 0 deg
    49d0:	b143      	cbz	r3, 49e4 <grid_port_receive_decode+0x128>
				else if(por->partner_fi == 1){ // 90 deg
    49d2:	2b01      	cmp	r3, #1
    49d4:	f040 8098 	bne.w	4b08 <grid_port_receive_decode+0x24c>
					rotated_dx  -= received_dy;
    49d8:	693b      	ldr	r3, [r7, #16]
    49da:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					rotated_dy  += received_dx;
    49de:	46d1      	mov	r9, sl
					rotated_dx  -= received_dy;
    49e0:	fa4f fa83 	sxtb.w	sl, r3
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    49e4:	f642 7349 	movw	r3, #12105	; 0x2f49
    49e8:	f897 b000 	ldrb.w	fp, [r7]
    49ec:	5ce3      	ldrb	r3, [r4, r3]
    49ee:	337f      	adds	r3, #127	; 0x7f
    49f0:	449a      	add	sl, r3
    49f2:	fa5f f38a 	uxtb.w	r3, sl
    49f6:	60fb      	str	r3, [r7, #12]
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    49f8:	f642 734a 	movw	r3, #12106	; 0x2f4a
    49fc:	f814 a003 	ldrb.w	sl, [r4, r3]
    4a00:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    4a04:	44d1      	add	r9, sl
    4a06:	fa5f f389 	uxtb.w	r3, r9
    4a0a:	60bb      	str	r3, [r7, #8]
				if (received_dx + GRID_SYS_DEFAULT_POSITION == 0 && received_dy + GRID_SYS_DEFAULT_POSITION == 0)
    4a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    4a10:	4313      	orrs	r3, r2
    4a12:	f897 a004 	ldrb.w	sl, [r7, #4]
    4a16:	d020      	beq.n	4a5a <grid_port_receive_decode+0x19e>
					grid_msg_set_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, updated_id, &error);
    4a18:	f8df 915c 	ldr.w	r9, [pc, #348]	; 4b78 <grid_port_receive_decode+0x2bc>
    4a1c:	9600      	str	r6, [sp, #0]
    4a1e:	4653      	mov	r3, sl
    4a20:	2202      	movs	r2, #2
    4a22:	2104      	movs	r1, #4
    4a24:	4628      	mov	r0, r5
    4a26:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, updated_dx, &error);
    4a28:	9600      	str	r6, [sp, #0]
    4a2a:	68fb      	ldr	r3, [r7, #12]
    4a2c:	2202      	movs	r2, #2
    4a2e:	2106      	movs	r1, #6
    4a30:	4628      	mov	r0, r5
    4a32:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, updated_dy, &error);
    4a34:	9600      	str	r6, [sp, #0]
    4a36:	68bb      	ldr	r3, [r7, #8]
    4a38:	2202      	movs	r2, #2
    4a3a:	2108      	movs	r1, #8
    4a3c:	4628      	mov	r0, r5
    4a3e:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, updated_age, &error);
    4a40:	465b      	mov	r3, fp
    4a42:	2202      	movs	r2, #2
    4a44:	210a      	movs	r1, #10
    4a46:	9600      	str	r6, [sp, #0]
    4a48:	4628      	mov	r0, r5
    4a4a:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, updated_rot, &error);
    4a4c:	ee18 3a10 	vmov	r3, s16
    4a50:	9600      	str	r6, [sp, #0]
    4a52:	2202      	movs	r2, #2
    4a54:	210c      	movs	r1, #12
    4a56:	4628      	mov	r0, r5
    4a58:	47c8      	blx	r9
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    4a5a:	68fb      	ldr	r3, [r7, #12]
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    4a5c:	483c      	ldr	r0, [pc, #240]	; (4b50 <grid_port_receive_decode+0x294>)
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    4a5e:	eb03 2a0a 	add.w	sl, r3, sl, lsl #8
    4a62:	68bb      	ldr	r3, [r7, #8]
    4a64:	eb03 2a0a 	add.w	sl, r3, sl, lsl #8
    4a68:	eb0b 2a0a 	add.w	sl, fp, sl, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    4a6c:	4b39      	ldr	r3, [pc, #228]	; (4b54 <grid_port_receive_decode+0x298>)
    4a6e:	4651      	mov	r1, sl
    4a70:	4798      	blx	r3
    4a72:	b9d8      	cbnz	r0, 4aac <grid_port_receive_decode+0x1f0>
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a74:	4b35      	ldr	r3, [pc, #212]	; (4b4c <grid_port_receive_decode+0x290>)
    4a76:	4641      	mov	r1, r8
    4a78:	4628      	mov	r0, r5
    4a7a:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a7c:	f504 542c 	add.w	r4, r4, #11008	; 0x2b00
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a80:	4b35      	ldr	r3, [pc, #212]	; (4b58 <grid_port_receive_decode+0x29c>)
    4a82:	4602      	mov	r2, r0
    4a84:	4641      	mov	r1, r8
    4a86:	4628      	mov	r0, r5
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a88:	3434      	adds	r4, #52	; 0x34
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a8a:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a8c:	4b33      	ldr	r3, [pc, #204]	; (4b5c <grid_port_receive_decode+0x2a0>)
    4a8e:	4641      	mov	r1, r8
    4a90:	4620      	mov	r0, r4
    4a92:	4798      	blx	r3
    4a94:	b150      	cbz	r0, 4aac <grid_port_receive_decode+0x1f0>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    4a96:	4e32      	ldr	r6, [pc, #200]	; (4b60 <grid_port_receive_decode+0x2a4>)
    4a98:	44a8      	add	r8, r5
						for (uint16_t i=0; i<length; i++){
    4a9a:	45a8      	cmp	r8, r5
    4a9c:	d14d      	bne.n	4b3a <grid_port_receive_decode+0x27e>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    4a9e:	4b31      	ldr	r3, [pc, #196]	; (4b64 <grid_port_receive_decode+0x2a8>)
    4aa0:	4620      	mov	r0, r4
    4aa2:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    4aa4:	482a      	ldr	r0, [pc, #168]	; (4b50 <grid_port_receive_decode+0x294>)
    4aa6:	4b30      	ldr	r3, [pc, #192]	; (4b68 <grid_port_receive_decode+0x2ac>)
    4aa8:	4651      	mov	r1, sl
    4aaa:	4798      	blx	r3
}
    4aac:	3724      	adds	r7, #36	; 0x24
    4aae:	46bd      	mov	sp, r7
    4ab0:	ecbd 8b02 	vpop	{d8}
    4ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    4ab8:	18d6      	adds	r6, r2, r3
    4aba:	fbb6 f1f0 	udiv	r1, r6, r0
    4abe:	fb00 6111 	mls	r1, r0, r1, r6
    4ac2:	4421      	add	r1, r4
    4ac4:	5d4e      	ldrb	r6, [r1, r5]
    4ac6:	f809 6002 	strb.w	r6, [r9, r2]
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    4aca:	f801 c005 	strb.w	ip, [r1, r5]
	for (uint16_t i = 0; i<length; i++){
    4ace:	3201      	adds	r2, #1
    4ad0:	e70b      	b.n	48ea <grid_port_receive_decode+0x2e>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    4ad2:	18d6      	adds	r6, r2, r3
    4ad4:	fbb6 f1f0 	udiv	r1, r6, r0
    4ad8:	fb00 6111 	mls	r1, r0, r1, r6
    4adc:	4421      	add	r1, r4
    4ade:	3201      	adds	r2, #1
    4ae0:	f801 e00c 	strb.w	lr, [r1, ip]
	for (uint16_t i = 0; i<length; i++){
    4ae4:	e70c      	b.n	4900 <grid_port_receive_decode+0x44>
		if (buffer[i] == GRID_CONST_SOH){
    4ae6:	f819 2006 	ldrb.w	r2, [r9, r6]
    4aea:	2a01      	cmp	r2, #1
    4aec:	d109      	bne.n	4b02 <grid_port_receive_decode+0x246>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    4aee:	4651      	mov	r1, sl
    4af0:	4658      	mov	r0, fp
    4af2:	4798      	blx	r3
			length -= i;
    4af4:	eba8 0806 	sub.w	r8, r8, r6
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    4af8:	4b12      	ldr	r3, [pc, #72]	; (4b44 <grid_port_receive_decode+0x288>)
			length -= i;
    4afa:	fa1f f888 	uxth.w	r8, r8
			message = &buffer[i];
    4afe:	eb09 0506 	add.w	r5, r9, r6
	for (uint16_t i = 1; i<length; i++){
    4b02:	3601      	adds	r6, #1
    4b04:	b2b6      	uxth	r6, r6
    4b06:	e70e      	b.n	4926 <grid_port_receive_decode+0x6a>
				else if(por->partner_fi == 2){ // 180 deg
    4b08:	2b02      	cmp	r3, #2
    4b0a:	d10a      	bne.n	4b22 <grid_port_receive_decode+0x266>
					rotated_dx  -= received_dx;
    4b0c:	697b      	ldr	r3, [r7, #20]
    4b0e:	f1c3 0a7f 	rsb	sl, r3, #127	; 0x7f
					rotated_dy  -= received_dy;
    4b12:	693b      	ldr	r3, [r7, #16]
					rotated_dx  -= received_dx;
    4b14:	fa4f fa8a 	sxtb.w	sl, sl
					rotated_dy  -= received_dy;
    4b18:	f1c3 097f 	rsb	r9, r3, #127	; 0x7f
					rotated_dy  -= received_dx;
    4b1c:	fa4f f989 	sxtb.w	r9, r9
    4b20:	e760      	b.n	49e4 <grid_port_receive_decode+0x128>
				else if(por->partner_fi == 3){ // 270 deg
    4b22:	2b03      	cmp	r3, #3
    4b24:	d105      	bne.n	4b32 <grid_port_receive_decode+0x276>
					rotated_dy  -= received_dx;
    4b26:	697b      	ldr	r3, [r7, #20]
    4b28:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					rotated_dx  += received_dy;
    4b2c:	46ca      	mov	sl, r9
					rotated_dy  -= received_dx;
    4b2e:	4699      	mov	r9, r3
    4b30:	e7f4      	b.n	4b1c <grid_port_receive_decode+0x260>
				int8_t rotated_dy = 0;
    4b32:	f04f 0900 	mov.w	r9, #0
				int8_t rotated_dx = 0;
    4b36:	46ca      	mov	sl, r9
    4b38:	e754      	b.n	49e4 <grid_port_receive_decode+0x128>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    4b3a:	f815 1b01 	ldrb.w	r1, [r5], #1
    4b3e:	4620      	mov	r0, r4
    4b40:	47b0      	blx	r6
						for (uint16_t i=0; i<length; i++){
    4b42:	e7aa      	b.n	4a9a <grid_port_receive_decode+0x1de>
    4b44:	0001275d 	.word	0x0001275d
    4b48:	000091c9 	.word	0x000091c9
    4b4c:	000091b1 	.word	0x000091b1
    4b50:	20006f94 	.word	0x20006f94
    4b54:	00009221 	.word	0x00009221
    4b58:	000091e5 	.word	0x000091e5
    4b5c:	00004839 	.word	0x00004839
    4b60:	00004875 	.word	0x00004875
    4b64:	00004895 	.word	0x00004895
    4b68:	0000923b 	.word	0x0000923b
    4b6c:	00014628 	.word	0x00014628
    4b70:	0001463b 	.word	0x0001463b
    4b74:	000091f5 	.word	0x000091f5
    4b78:	0000920d 	.word	0x0000920d
			else if (message[1] == GRID_CONST_DCT){ // Direct Message
    4b7c:	2b0e      	cmp	r3, #14
    4b7e:	f040 80e5 	bne.w	4d4c <grid_port_receive_decode+0x490>
				if (message[2] == GRID_CONST_ACK){
    4b82:	78ab      	ldrb	r3, [r5, #2]
    4b84:	2b07      	cmp	r3, #7
    4b86:	d191      	bne.n	4aac <grid_port_receive_decode+0x1f0>
					uint8_t local_token_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    4b88:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 4d68 <grid_port_receive_decode+0x4ac>
    4b8c:	2200      	movs	r2, #0
    4b8e:	2102      	movs	r1, #2
    4b90:	f105 0008 	add.w	r0, r5, #8
    4b94:	47c8      	blx	r9
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4b96:	2200      	movs	r2, #0
					uint8_t local_token_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    4b98:	fa5f fa80 	uxtb.w	sl, r0
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4b9c:	2102      	movs	r1, #2
    4b9e:	1da8      	adds	r0, r5, #6
    4ba0:	47c8      	blx	r9
					if (por->partner_status == 0){
    4ba2:	f642 724b 	movw	r2, #12107	; 0x2f4b
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4ba6:	fa5f fb80 	uxtb.w	fp, r0
					if (por->partner_status == 0){
    4baa:	5ca2      	ldrb	r2, [r4, r2]
    4bac:	2a00      	cmp	r2, #0
    4bae:	d172      	bne.n	4c96 <grid_port_receive_decode+0x3da>
						if (por->ping_local_token == 255){ // I have no clue
    4bb0:	f642 7931 	movw	r9, #12081	; 0x2f31
    4bb4:	f814 2009 	ldrb.w	r2, [r4, r9]
    4bb8:	2aff      	cmp	r2, #255	; 0xff
    4bba:	d11b      	bne.n	4bf4 <grid_port_receive_decode+0x338>
							por->ping_local_token  = grid_sys_rtc_get_time(&grid_sys_state)%128;
    4bbc:	4a66      	ldr	r2, [pc, #408]	; (4d58 <grid_port_receive_decode+0x49c>)
    4bbe:	4867      	ldr	r0, [pc, #412]	; (4d5c <grid_port_receive_decode+0x4a0>)
    4bc0:	4790      	blx	r2
    4bc2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4bc6:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_local_token  = grid_sys_rtc_get_time(&grid_sys_state)%128;
    4bca:	f804 2009 	strb.w	r2, [r4, r9]
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4bce:	4b64      	ldr	r3, [pc, #400]	; (4d60 <grid_port_receive_decode+0x4a4>)
    4bd0:	2102      	movs	r1, #2
    4bd2:	3039      	adds	r0, #57	; 0x39
    4bd4:	4798      	blx	r3
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4bd6:	f504 593c 	add.w	r9, r4, #12032	; 0x2f00
    4bda:	f642 7247 	movw	r2, #12103	; 0x2f47
    4bde:	f109 0933 	add.w	r9, r9, #51	; 0x33
    4be2:	5ca1      	ldrb	r1, [r4, r2]
    4be4:	6179      	str	r1, [r7, #20]
    4be6:	4648      	mov	r0, r9
    4be8:	47b0      	blx	r6
    4bea:	6979      	ldr	r1, [r7, #20]
    4bec:	4b5d      	ldr	r3, [pc, #372]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4bee:	4602      	mov	r2, r0
    4bf0:	4648      	mov	r0, r9
    4bf2:	4798      	blx	r3
						if (partner_token_received != por->ping_partner_token){
    4bf4:	f642 7232 	movw	r2, #12082	; 0x2f32
    4bf8:	5ca1      	ldrb	r1, [r4, r2]
    4bfa:	4559      	cmp	r1, fp
    4bfc:	d017      	beq.n	4c2e <grid_port_receive_decode+0x372>
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, partner_token_received);
    4bfe:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_partner_token = partner_token_received;							
    4c02:	f804 b002 	strb.w	fp, [r4, r2]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, partner_token_received);
    4c06:	4b56      	ldr	r3, [pc, #344]	; (4d60 <grid_port_receive_decode+0x4a4>)
    4c08:	465a      	mov	r2, fp
    4c0a:	2102      	movs	r1, #2
    4c0c:	303b      	adds	r0, #59	; 0x3b
    4c0e:	4798      	blx	r3
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4c10:	f504 593c 	add.w	r9, r4, #12032	; 0x2f00
    4c14:	f642 7347 	movw	r3, #12103	; 0x2f47
    4c18:	f109 0933 	add.w	r9, r9, #51	; 0x33
    4c1c:	5ce1      	ldrb	r1, [r4, r3]
    4c1e:	6179      	str	r1, [r7, #20]
    4c20:	4648      	mov	r0, r9
    4c22:	47b0      	blx	r6
    4c24:	6979      	ldr	r1, [r7, #20]
    4c26:	4b4f      	ldr	r3, [pc, #316]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4c28:	4602      	mov	r2, r0
    4c2a:	4648      	mov	r0, r9
    4c2c:	4798      	blx	r3
						if (por->ping_local_token != local_token_received){
    4c2e:	f642 7331 	movw	r3, #12081	; 0x2f31
    4c32:	5ce3      	ldrb	r3, [r4, r3]
    4c34:	4553      	cmp	r3, sl
    4c36:	d129      	bne.n	4c8c <grid_port_receive_decode+0x3d0>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    4c38:	7a62      	ldrb	r2, [r4, #9]
    4c3a:	78eb      	ldrb	r3, [r5, #3]
    4c3c:	1a9b      	subs	r3, r3, r2
    4c3e:	3306      	adds	r3, #6
    4c40:	425a      	negs	r2, r3
    4c42:	f002 0203 	and.w	r2, r2, #3
    4c46:	f003 0303 	and.w	r3, r3, #3
    4c4a:	bf58      	it	pl
    4c4c:	4253      	negpl	r3, r2
    4c4e:	f642 7230 	movw	r2, #12080	; 0x2f30
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c52:	f1a8 000a 	sub.w	r0, r8, #10
							por->partner_fi = (message[3] - por->direction + 6)%4;
    4c56:	54a3      	strb	r3, [r4, r2]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c58:	2102      	movs	r1, #2
    4c5a:	4b43      	ldr	r3, [pc, #268]	; (4d68 <grid_port_receive_decode+0x4ac>)
    4c5c:	2200      	movs	r2, #0
    4c5e:	4428      	add	r0, r5
    4c60:	4798      	blx	r3
    4c62:	f642 732c 	movw	r3, #12076	; 0x2f2c
							por->partner_status = 1;
    4c66:	2201      	movs	r2, #1
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c68:	50e0      	str	r0, [r4, r3]
							por->partner_status = 1;
    4c6a:	f642 734b 	movw	r3, #12107	; 0x2f4b
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c6e:	493f      	ldr	r1, [pc, #252]	; (4d6c <grid_port_receive_decode+0x4b0>)
							por->partner_status = 1;
    4c70:	54e2      	strb	r2, [r4, r3]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c72:	483f      	ldr	r0, [pc, #252]	; (4d70 <grid_port_receive_decode+0x4b4>)
    4c74:	4b3f      	ldr	r3, [pc, #252]	; (4d74 <grid_port_receive_decode+0x4b8>)
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN
    4c76:	4d40      	ldr	r5, [pc, #256]	; (4d78 <grid_port_receive_decode+0x4bc>)
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c78:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN
    4c7a:	2300      	movs	r3, #0
    4c7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    4c80:	e9cd 3200 	strd	r3, r2, [sp]
    4c84:	4835      	ldr	r0, [pc, #212]	; (4d5c <grid_port_receive_decode+0x4a0>)
    4c86:	22ff      	movs	r2, #255	; 0xff
    4c88:	4619      	mov	r1, r3
    4c8a:	47a8      	blx	r5
						por->ping_flag = 1;
    4c8c:	f642 7348 	movw	r3, #12104	; 0x2f48
    4c90:	2201      	movs	r2, #1
    4c92:	54e2      	strb	r2, [r4, r3]
    4c94:	e70a      	b.n	4aac <grid_port_receive_decode+0x1f0>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4c96:	7a61      	ldrb	r1, [r4, #9]
    4c98:	78ea      	ldrb	r2, [r5, #3]
    4c9a:	1a52      	subs	r2, r2, r1
    4c9c:	3206      	adds	r2, #6
    4c9e:	4251      	negs	r1, r2
						validator &= local_token_received == por->ping_local_token;
    4ca0:	f642 7031 	movw	r0, #12081	; 0x2f31
						validator &= partner_token_received == por->ping_partner_token;
    4ca4:	f642 7c32 	movw	ip, #12082	; 0x2f32
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4ca8:	f001 0103 	and.w	r1, r1, #3
						validator &= local_token_received == por->ping_local_token;
    4cac:	5c20      	ldrb	r0, [r4, r0]
						validator &= partner_token_received == por->ping_partner_token;
    4cae:	f814 c00c 	ldrb.w	ip, [r4, ip]
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4cb2:	f002 0203 	and.w	r2, r2, #3
    4cb6:	bf58      	it	pl
    4cb8:	424a      	negpl	r2, r1
    4cba:	f642 7130 	movw	r1, #12080	; 0x2f30
    4cbe:	4550      	cmp	r0, sl
    4cc0:	bf08      	it	eq
    4cc2:	45dc      	cmpeq	ip, fp
    4cc4:	5c61      	ldrb	r1, [r4, r1]
    4cc6:	bf0c      	ite	eq
    4cc8:	f04f 0a01 	moveq.w	sl, #1
    4ccc:	f04f 0a00 	movne.w	sl, #0
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4cd0:	f642 732c 	movw	r3, #12076	; 0x2f2c
    4cd4:	f1a8 000a 	sub.w	r0, r8, #10
    4cd8:	428a      	cmp	r2, r1
    4cda:	bf14      	ite	ne
    4cdc:	f04f 0a00 	movne.w	sl, #0
    4ce0:	f00a 0a01 	andeq.w	sl, sl, #1
    4ce4:	4428      	add	r0, r5
    4ce6:	2200      	movs	r2, #0
    4ce8:	2102      	movs	r1, #2
    4cea:	f854 b003 	ldr.w	fp, [r4, r3]
    4cee:	47c8      	blx	r9
						if (validator == 1){
    4cf0:	4558      	cmp	r0, fp
    4cf2:	d103      	bne.n	4cfc <grid_port_receive_decode+0x440>
    4cf4:	f1ba 0f00 	cmp.w	sl, #0
    4cf8:	f47f aed8 	bne.w	4aac <grid_port_receive_decode+0x1f0>
							por->partner_status = 0;
    4cfc:	f642 734b 	movw	r3, #12107	; 0x2f4b
    4d00:	2200      	movs	r2, #0
    4d02:	54e2      	strb	r2, [r4, r3]
							por->ping_local_token = 255;
    4d04:	f642 7831 	movw	r8, #12081	; 0x2f31
							por->ping_partner_token = 255;
    4d08:	f642 7332 	movw	r3, #12082	; 0x2f32
    4d0c:	22ff      	movs	r2, #255	; 0xff
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d0e:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_partner_token = 255;
    4d12:	54e2      	strb	r2, [r4, r3]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d14:	4d12      	ldr	r5, [pc, #72]	; (4d60 <grid_port_receive_decode+0x4a4>)
							por->ping_local_token = 255;
    4d16:	f804 2008 	strb.w	r2, [r4, r8]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d1a:	2102      	movs	r1, #2
    4d1c:	303b      	adds	r0, #59	; 0x3b
    4d1e:	47a8      	blx	r5
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4d20:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
    4d24:	f814 2008 	ldrb.w	r2, [r4, r8]
    4d28:	2102      	movs	r1, #2
    4d2a:	3039      	adds	r0, #57	; 0x39
    4d2c:	47a8      	blx	r5
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4d2e:	f642 7347 	movw	r3, #12103	; 0x2f47
    4d32:	f504 553c 	add.w	r5, r4, #12032	; 0x2f00
    4d36:	3533      	adds	r5, #51	; 0x33
    4d38:	5ce1      	ldrb	r1, [r4, r3]
    4d3a:	6179      	str	r1, [r7, #20]
    4d3c:	4628      	mov	r0, r5
    4d3e:	47b0      	blx	r6
    4d40:	6979      	ldr	r1, [r7, #20]
    4d42:	4b08      	ldr	r3, [pc, #32]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4d44:	4602      	mov	r2, r0
    4d46:	4628      	mov	r0, r5
    4d48:	4798      	blx	r3
    4d4a:	e6af      	b.n	4aac <grid_port_receive_decode+0x1f0>
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    4d4c:	480b      	ldr	r0, [pc, #44]	; (4d7c <grid_port_receive_decode+0x4c0>)
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    4d4e:	4b0c      	ldr	r3, [pc, #48]	; (4d80 <grid_port_receive_decode+0x4c4>)
    4d50:	4798      	blx	r3
	return;
    4d52:	e6ab      	b.n	4aac <grid_port_receive_decode+0x1f0>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    4d54:	480b      	ldr	r0, [pc, #44]	; (4d84 <grid_port_receive_decode+0x4c8>)
    4d56:	e7fa      	b.n	4d4e <grid_port_receive_decode+0x492>
    4d58:	00008f89 	.word	0x00008f89
    4d5c:	20006f94 	.word	0x20006f94
    4d60:	00009069 	.word	0x00009069
    4d64:	000091e5 	.word	0x000091e5
    4d68:	00009041 	.word	0x00009041
    4d6c:	00014660 	.word	0x00014660
    4d70:	0001463b 	.word	0x0001463b
    4d74:	0001275d 	.word	0x0001275d
    4d78:	00008ff3 	.word	0x00008ff3
    4d7c:	00014668 	.word	0x00014668
    4d80:	0001286d 	.word	0x0001286d
    4d84:	0001469e 	.word	0x0001469e

00004d88 <grid_port_receive_task>:
void grid_port_receive_task(struct grid_port* por){
    4d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (por->usart_error_flag == 1){
    4d8a:	7e03      	ldrb	r3, [r0, #24]
    4d8c:	2b01      	cmp	r3, #1
void grid_port_receive_task(struct grid_port* por){
    4d8e:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    4d90:	d10d      	bne.n	4dae <grid_port_receive_task+0x26>
		por->usart_error_flag = 0;
    4d92:	2500      	movs	r5, #0
    4d94:	7605      	strb	r5, [r0, #24]
		grid_port_reset_receiver(por);
    4d96:	4b53      	ldr	r3, [pc, #332]	; (4ee4 <grid_port_receive_task+0x15c>)
    4d98:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500); // White triangle
    4d9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    4d9e:	e9cd 5300 	strd	r5, r3, [sp]
    4da2:	23ff      	movs	r3, #255	; 0xff
    4da4:	4850      	ldr	r0, [pc, #320]	; (4ee8 <grid_port_receive_task+0x160>)
    4da6:	4d51      	ldr	r5, [pc, #324]	; (4eec <grid_port_receive_task+0x164>)
    4da8:	461a      	mov	r2, r3
    4daa:	4619      	mov	r1, r3
    4dac:	47a8      	blx	r5
	if	(por->rx_double_buffer_status == 0){
    4dae:	6a25      	ldr	r5, [r4, #32]
    4db0:	bb7d      	cbnz	r5, 4e12 <grid_port_receive_task+0x8a>
		if (por->usart!=NULL){ // His is GRID usart port
    4db2:	6863      	ldr	r3, [r4, #4]
    4db4:	b1cb      	cbz	r3, 4dea <grid_port_receive_task+0x62>
			if (por->rx_double_buffer_timeout > 1000){
    4db6:	69e3      	ldr	r3, [r4, #28]
    4db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    4dbc:	d93e      	bls.n	4e3c <grid_port_receive_task+0xb4>
				if (por->partner_status == 1){
    4dbe:	f642 734b 	movw	r3, #12107	; 0x2f4b
    4dc2:	5ce3      	ldrb	r3, [r4, r3]
    4dc4:	2b01      	cmp	r3, #1
    4dc6:	d12c      	bne.n	4e22 <grid_port_receive_task+0x9a>
					GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    4dc8:	4949      	ldr	r1, [pc, #292]	; (4ef0 <grid_port_receive_task+0x168>)
    4dca:	4b4a      	ldr	r3, [pc, #296]	; (4ef4 <grid_port_receive_task+0x16c>)
    4dcc:	484a      	ldr	r0, [pc, #296]	; (4ef8 <grid_port_receive_task+0x170>)
    4dce:	4798      	blx	r3
					grid_port_reset_receiver(por);
    4dd0:	4b44      	ldr	r3, [pc, #272]	; (4ee4 <grid_port_receive_task+0x15c>)
    4dd2:	4620      	mov	r0, r4
    4dd4:	4798      	blx	r3
					grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500);
    4dd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    4dda:	e9cd 5300 	strd	r5, r3, [sp]
    4dde:	23ff      	movs	r3, #255	; 0xff
    4de0:	4841      	ldr	r0, [pc, #260]	; (4ee8 <grid_port_receive_task+0x160>)
    4de2:	4d42      	ldr	r5, [pc, #264]	; (4eec <grid_port_receive_task+0x164>)
    4de4:	461a      	mov	r2, r3
    4de6:	4619      	mov	r1, r3
    4de8:	47a8      	blx	r5
			if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0)
    4dea:	f241 3687 	movw	r6, #4999	; 0x1387
void grid_port_receive_task(struct grid_port* por){
    4dee:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
			if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    4df2:	f241 30b4 	movw	r0, #5044	; 0x13b4
    4df6:	46b4      	mov	ip, r6
			if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0)
    4df8:	f241 3788 	movw	r7, #5000	; 0x1388
			if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    4dfc:	f241 3e86 	movw	lr, #4998	; 0x1386
			if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    4e00:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4e02:	18a3      	adds	r3, r4, r2
    4e04:	5c1b      	ldrb	r3, [r3, r0]
    4e06:	2b0a      	cmp	r3, #10
    4e08:	d11b      	bne.n	4e42 <grid_port_receive_task+0xba>
				por->rx_double_buffer_timeout = 0;
    4e0a:	2300      	movs	r3, #0
    4e0c:	2501      	movs	r5, #1
    4e0e:	e9c4 3507 	strd	r3, r5, [r4, #28]
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    4e12:	e9d4 2109 	ldrd	r2, r1, [r4, #36]	; 0x24
    4e16:	4291      	cmp	r1, r2
    4e18:	d359      	bcc.n	4ece <grid_port_receive_task+0x146>
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4e1a:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
    4e1e:	3209      	adds	r2, #9
    4e20:	e056      	b.n	4ed0 <grid_port_receive_task+0x148>
					if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    4e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e24:	b913      	cbnz	r3, 4e2c <grid_port_receive_task+0xa4>
    4e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d0de      	beq.n	4dea <grid_port_receive_task+0x62>
						GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    4e2c:	4933      	ldr	r1, [pc, #204]	; (4efc <grid_port_receive_task+0x174>)
    4e2e:	4b31      	ldr	r3, [pc, #196]	; (4ef4 <grid_port_receive_task+0x16c>)
    4e30:	4831      	ldr	r0, [pc, #196]	; (4ef8 <grid_port_receive_task+0x170>)
    4e32:	4798      	blx	r3
						grid_port_reset_receiver(por);
    4e34:	4b2b      	ldr	r3, [pc, #172]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e36:	4620      	mov	r0, r4
    4e38:	4798      	blx	r3
    4e3a:	e7d6      	b.n	4dea <grid_port_receive_task+0x62>
				por->rx_double_buffer_timeout++;
    4e3c:	3301      	adds	r3, #1
    4e3e:	61e3      	str	r3, [r4, #28]
    4e40:	e7d3      	b.n	4dea <grid_port_receive_task+0x62>
			else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    4e42:	b923      	cbnz	r3, 4e4e <grid_port_receive_task+0xc6>
	if (por->rx_double_buffer_status == 0){
    4e44:	6a23      	ldr	r3, [r4, #32]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d1e3      	bne.n	4e12 <grid_port_receive_task+0x8a>
}
    4e4a:	b003      	add	sp, #12
    4e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1)
    4e4e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    4e50:	1e6b      	subs	r3, r5, #1
    4e52:	429a      	cmp	r2, r3
    4e54:	d10d      	bne.n	4e72 <grid_port_receive_task+0xea>
				grid_port_reset_receiver(por);	
    4e56:	4b23      	ldr	r3, [pc, #140]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e58:	4620      	mov	r0, r4
    4e5a:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED
    4e5c:	2302      	movs	r3, #2
    4e5e:	20c8      	movs	r0, #200	; 0xc8
    4e60:	e9cd 3000 	strd	r3, r0, [sp]
    4e64:	2300      	movs	r3, #0
    4e66:	461a      	mov	r2, r3
    4e68:	21ff      	movs	r1, #255	; 0xff
				grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 255, 2, 200); // RED
    4e6a:	481f      	ldr	r0, [pc, #124]	; (4ee8 <grid_port_receive_task+0x160>)
    4e6c:	4c1f      	ldr	r4, [pc, #124]	; (4eec <grid_port_receive_task+0x164>)
    4e6e:	47a0      	blx	r4
				return;
    4e70:	e7eb      	b.n	4e4a <grid_port_receive_task+0xc2>
			if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0)
    4e72:	42b2      	cmp	r2, r6
    4e74:	d10b      	bne.n	4e8e <grid_port_receive_task+0x106>
    4e76:	b955      	cbnz	r5, 4e8e <grid_port_receive_task+0x106>
				grid_port_reset_receiver(por);
    4e78:	4b1a      	ldr	r3, [pc, #104]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e7a:	4620      	mov	r0, r4
    4e7c:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // RED
    4e7e:	2302      	movs	r3, #2
    4e80:	21c8      	movs	r1, #200	; 0xc8
    4e82:	e9cd 3100 	strd	r3, r1, [sp]
    4e86:	22ff      	movs	r2, #255	; 0xff
    4e88:	462b      	mov	r3, r5
    4e8a:	4629      	mov	r1, r5
    4e8c:	e7ed      	b.n	4e6a <grid_port_receive_task+0xe2>
			if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0)
    4e8e:	4465      	add	r5, ip
    4e90:	fbb5 f3f7 	udiv	r3, r5, r7
    4e94:	fb07 5513 	mls	r5, r7, r3, r5
    4e98:	4425      	add	r5, r4
    4e9a:	5c2b      	ldrb	r3, [r5, r0]
    4e9c:	b153      	cbz	r3, 4eb4 <grid_port_receive_task+0x12c>
				grid_port_reset_receiver(por);
    4e9e:	4b11      	ldr	r3, [pc, #68]	; (4ee4 <grid_port_receive_task+0x15c>)
    4ea0:	4620      	mov	r0, r4
    4ea2:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 255, 2, 200); // RED
    4ea4:	2302      	movs	r3, #2
    4ea6:	22c8      	movs	r2, #200	; 0xc8
    4ea8:	e9cd 3200 	strd	r3, r2, [sp]
    4eac:	2200      	movs	r2, #0
    4eae:	23ff      	movs	r3, #255	; 0xff
    4eb0:	4611      	mov	r1, r2
    4eb2:	e7da      	b.n	4e6a <grid_port_receive_task+0xe2>
			if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    4eb4:	4572      	cmp	r2, lr
				por->rx_double_buffer_seek_start_index++;
    4eb6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    4eba:	bf98      	it	ls
    4ebc:	3201      	addls	r2, #1
    4ebe:	b289      	uxth	r1, r1
				por->rx_double_buffer_timeout = 0;
    4ec0:	61e3      	str	r3, [r4, #28]
				por->rx_double_buffer_seek_start_index++;
    4ec2:	bf94      	ite	ls
    4ec4:	6262      	strls	r2, [r4, #36]	; 0x24
				por->rx_double_buffer_seek_start_index=0;
    4ec6:	6263      	strhi	r3, [r4, #36]	; 0x24
		for(uint16_t i = 0; i<490; i++){
    4ec8:	2900      	cmp	r1, #0
    4eca:	d199      	bne.n	4e00 <grid_port_receive_task+0x78>
    4ecc:	e7ba      	b.n	4e44 <grid_port_receive_task+0xbc>
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4ece:	3201      	adds	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4ed0:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    4ed2:	4b0b      	ldr	r3, [pc, #44]	; (4f00 <grid_port_receive_task+0x178>)
    4ed4:	b292      	uxth	r2, r2
    4ed6:	b289      	uxth	r1, r1
    4ed8:	4620      	mov	r0, r4
    4eda:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    4edc:	2300      	movs	r3, #0
    4ede:	6223      	str	r3, [r4, #32]
    4ee0:	e7b3      	b.n	4e4a <grid_port_receive_task+0xc2>
    4ee2:	bf00      	nop
    4ee4:	00004731 	.word	0x00004731
    4ee8:	20006f94 	.word	0x20006f94
    4eec:	00008ff3 	.word	0x00008ff3
    4ef0:	000146d1 	.word	0x000146d1
    4ef4:	0001275d 	.word	0x0001275d
    4ef8:	0001463b 	.word	0x0001463b
    4efc:	000146f5 	.word	0x000146f5
    4f00:	000048bd 	.word	0x000048bd

00004f04 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    4f04:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
    4f08:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4f0c:	428b      	cmp	r3, r1
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    4f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f10:	4602      	mov	r2, r0
	if (buf->read_active != buf->read_stop) {
    4f12:	d000      	beq.n	4f16 <grid_buffer_read_size+0x12>
		while(1){
    4f14:	e7fe      	b.n	4f14 <grid_buffer_read_size+0x10>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    4f16:	f8b0 63ea 	ldrh.w	r6, [r0, #1002]	; 0x3ea
    4f1a:	42b3      	cmp	r3, r6
    4f1c:	d000      	beq.n	4f20 <grid_buffer_read_size+0x1c>
		while(1){
    4f1e:	e7fe      	b.n	4f1e <grid_buffer_read_size+0x1a>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    4f20:	f8b0 73f2 	ldrh.w	r7, [r0, #1010]	; 0x3f2
    4f24:	42be      	cmp	r6, r7
    4f26:	d016      	beq.n	4f56 <grid_buffer_read_size+0x52>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f28:	8805      	ldrh	r5, [r0, #0]
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f2a:	2400      	movs	r4, #0
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f2c:	b2a3      	uxth	r3, r4
    4f2e:	429d      	cmp	r5, r3
    4f30:	d800      	bhi.n	4f34 <grid_buffer_read_size+0x30>
		}
		
		
	}
	
	while(1){
    4f32:	e7fe      	b.n	4f32 <grid_buffer_read_size+0x2e>
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f34:	1930      	adds	r0, r6, r4
    4f36:	fbb0 f1f5 	udiv	r1, r0, r5
    4f3a:	fb05 0111 	mls	r1, r5, r1, r0
		if (index == buf->write_start) return 0;
    4f3e:	b288      	uxth	r0, r1
    4f40:	4287      	cmp	r7, r0
    4f42:	d008      	beq.n	4f56 <grid_buffer_read_size+0x52>
		if (buf->buffer_storage[index] == '\n'){
    4f44:	4411      	add	r1, r2
    4f46:	3301      	adds	r3, #1
    4f48:	b298      	uxth	r0, r3
    4f4a:	788b      	ldrb	r3, [r1, #2]
    4f4c:	2b0a      	cmp	r3, #10
    4f4e:	f104 0401 	add.w	r4, r4, #1
    4f52:	d1eb      	bne.n	4f2c <grid_buffer_read_size+0x28>
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    4f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    4f56:	2000      	movs	r0, #0
    4f58:	e7fc      	b.n	4f54 <grid_buffer_read_size+0x50>

00004f5a <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    4f5a:	f8b0 23ec 	ldrh.w	r2, [r0, #1004]	; 0x3ec
    4f5e:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4f62:	4293      	cmp	r3, r2
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    4f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->read_active != buf->read_stop) {
    4f66:	d000      	beq.n	4f6a <grid_buffer_read_init+0x10>
		while(1){
    4f68:	e7fe      	b.n	4f68 <grid_buffer_read_init+0xe>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    4f6a:	f8b0 53ea 	ldrh.w	r5, [r0, #1002]	; 0x3ea
    4f6e:	42ab      	cmp	r3, r5
    4f70:	d000      	beq.n	4f74 <grid_buffer_read_init+0x1a>
		while(1){
    4f72:	e7fe      	b.n	4f72 <grid_buffer_read_init+0x18>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    4f74:	f8b0 63f2 	ldrh.w	r6, [r0, #1010]	; 0x3f2
    4f78:	42b5      	cmp	r5, r6
    4f7a:	d020      	beq.n	4fbe <grid_buffer_read_init+0x64>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f7c:	8801      	ldrh	r1, [r0, #0]
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f7e:	2400      	movs	r4, #0
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f80:	b2a3      	uxth	r3, r4
    4f82:	4299      	cmp	r1, r3
    4f84:	d800      	bhi.n	4f88 <grid_buffer_read_init+0x2e>
		}
		
		
	}
		
	while(1){
    4f86:	e7fe      	b.n	4f86 <grid_buffer_read_init+0x2c>
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f88:	192f      	adds	r7, r5, r4
    4f8a:	fbb7 f2f1 	udiv	r2, r7, r1
    4f8e:	fb01 7212 	mls	r2, r1, r2, r7
		if (index == buf->write_start) return 0;	
    4f92:	b297      	uxth	r7, r2
    4f94:	42be      	cmp	r6, r7
    4f96:	d012      	beq.n	4fbe <grid_buffer_read_init+0x64>
		if (buf->buffer_storage[index] == '\n'){
    4f98:	1887      	adds	r7, r0, r2
    4f9a:	3301      	adds	r3, #1
    4f9c:	78bf      	ldrb	r7, [r7, #2]
    4f9e:	2f0a      	cmp	r7, #10
    4fa0:	b29b      	uxth	r3, r3
    4fa2:	f104 0401 	add.w	r4, r4, #1
    4fa6:	d1eb      	bne.n	4f80 <grid_buffer_read_init+0x26>
			buf->read_stop = (index+1)%buf->buffer_length;
    4fa8:	3201      	adds	r2, #1
    4faa:	fbb2 f4f1 	udiv	r4, r2, r1
    4fae:	fb01 2214 	mls	r2, r1, r4, r2
    4fb2:	f8a0 23ec 	strh.w	r2, [r0, #1004]	; 0x3ec
			buf->read_length = i+1;
    4fb6:	f8a0 33f0 	strh.w	r3, [r0, #1008]	; 0x3f0
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    4fba:	4618      	mov	r0, r3
    4fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    4fbe:	2300      	movs	r3, #0
    4fc0:	e7fb      	b.n	4fba <grid_buffer_read_init+0x60>

00004fc2 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    4fc2:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4fc6:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
    4fca:	4299      	cmp	r1, r3
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    4fcc:	b510      	push	{r4, lr}
    4fce:	4602      	mov	r2, r0
	if (buf->read_active != buf->read_stop){
    4fd0:	d00b      	beq.n	4fea <grid_buffer_read_character+0x28>
		
		uint8_t character = buf->buffer_storage[buf->read_active];
		
		buf->read_active++;
		buf->read_active %= buf->buffer_length;
    4fd2:	8814      	ldrh	r4, [r2, #0]
		uint8_t character = buf->buffer_storage[buf->read_active];
    4fd4:	18c1      	adds	r1, r0, r3
		buf->read_active++;
    4fd6:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    4fd8:	b29b      	uxth	r3, r3
		uint8_t character = buf->buffer_storage[buf->read_active];
    4fda:	7888      	ldrb	r0, [r1, #2]
		buf->read_active %= buf->buffer_length;
    4fdc:	fbb3 f1f4 	udiv	r1, r3, r4
    4fe0:	fb04 3311 	mls	r3, r4, r1, r3
    4fe4:	f8a2 33ee 	strh.w	r3, [r2, #1006]	; 0x3ee
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    4fe8:	bd10      	pop	{r4, pc}
		while(1){
    4fea:	e7fe      	b.n	4fea <grid_buffer_read_character+0x28>

00004fec <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    4fec:	f8b0 23ec 	ldrh.w	r2, [r0, #1004]	; 0x3ec
    4ff0:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4ff4:	4293      	cmp	r3, r2
    4ff6:	d000      	beq.n	4ffa <grid_buffer_read_acknowledge+0xe>
		buf->read_start = buf->read_stop;
		return 1;
	}else{
		
		while(1){
    4ff8:	e7fe      	b.n	4ff8 <grid_buffer_read_acknowledge+0xc>
		buf->read_start = buf->read_stop;
    4ffa:	f8a0 33ea 	strh.w	r3, [r0, #1002]	; 0x3ea
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    4ffe:	2001      	movs	r0, #1
    5000:	4770      	bx	lr
	...

00005004 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    5004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5008:	4604      	mov	r4, r0
	
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    500a:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    500e:	b087      	sub	sp, #28
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5010:	f8df 8148 	ldr.w	r8, [pc, #328]	; 515c <grid_port_init+0x158>
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    5014:	460d      	mov	r5, r1
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5016:	303c      	adds	r0, #60	; 0x3c
    5018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    501c:	4616      	mov	r6, r2
    501e:	461f      	mov	r7, r3
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5020:	47c0      	blx	r8
	grid_buffer_init(&por->rx_buffer, GRID_BUFFER_SIZE);
    5022:	f504 502c 	add.w	r0, r4, #11008	; 0x2b00
    5026:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    502a:	3034      	adds	r0, #52	; 0x34
    502c:	47c0      	blx	r8
	
	
	por->cooldown = 0;
    502e:	2000      	movs	r0, #0
	
	por->dma_channel = dma;
    5030:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	por->cooldown = 0;
    5034:	6020      	str	r0, [r4, #0]
	
	por->tx_double_buffer_status	= 0;
	por->rx_double_buffer_status	= 0;
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    5036:	f241 3288 	movw	r2, #5000	; 0x1388
	por->dma_channel = dma;
    503a:	72a3      	strb	r3, [r4, #10]
	por->direction = dir;
    503c:	7267      	strb	r7, [r4, #9]
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    503e:	4603      	mov	r3, r0
	por->usart	= usart;
    5040:	6065      	str	r5, [r4, #4]
	por->type		= type;
    5042:	7226      	strb	r6, [r4, #8]
	por->tx_double_buffer_status	= 0;
    5044:	81a0      	strh	r0, [r4, #12]
	por->rx_double_buffer_status	= 0;
    5046:	6220      	str	r0, [r4, #32]
		por->tx_double_buffer[i] = 0;		
    5048:	18e1      	adds	r1, r4, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    504a:	3301      	adds	r3, #1
    504c:	4293      	cmp	r3, r2
		por->tx_double_buffer[i] = 0;		
    504e:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    5052:	d1f9      	bne.n	5048 <grid_port_init+0x44>
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5054:	2300      	movs	r3, #0
		por->rx_double_buffer[i] = 0;
    5056:	f241 31b4 	movw	r1, #5044	; 0x13b4
    505a:	461d      	mov	r5, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    505c:	f241 3288 	movw	r2, #5000	; 0x1388
		por->rx_double_buffer[i] = 0;
    5060:	18e0      	adds	r0, r4, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5062:	3301      	adds	r3, #1
    5064:	4293      	cmp	r3, r2
		por->rx_double_buffer[i] = 0;
    5066:	5445      	strb	r5, [r0, r1]
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5068:	d1fa      	bne.n	5060 <grid_port_init+0x5c>
	}
	
	por->partner_fi = 0;
	
	por->partner_hwcfg = 0;
    506a:	f642 732c 	movw	r3, #12076	; 0x2f2c
	por->partner_fi = 0;
    506e:	f642 7130 	movw	r1, #12080	; 0x2f30
	por->partner_status = 1;
	
	por->ping_local_token = 255;
    5072:	f642 7031 	movw	r0, #12081	; 0x2f31
	por->partner_fi = 0;
    5076:	5465      	strb	r5, [r4, r1]
	por->partner_hwcfg = 0;
    5078:	50e5      	str	r5, [r4, r3]
	por->partner_status = 1;
    507a:	f642 734b 	movw	r3, #12107	; 0x2f4b
    507e:	2201      	movs	r2, #1
	por->ping_local_token = 255;
    5080:	27ff      	movs	r7, #255	; 0xff
	por->partner_status = 1;
    5082:	54e2      	strb	r2, [r4, r3]
	por->ping_local_token = 255;
    5084:	5427      	strb	r7, [r4, r0]
	por->ping_partner_token = 255;
    5086:	f642 7032 	movw	r0, #12082	; 0x2f32
	
	por->ping_flag = 0;
	
	if (type == GRID_PORT_TYPE_USART){	
    508a:	4296      	cmp	r6, r2
	por->ping_partner_token = 255;
    508c:	5427      	strb	r7, [r4, r0]
	por->ping_flag = 0;
    508e:	f642 7048 	movw	r0, #12104	; 0x2f48
    5092:	5425      	strb	r5, [r4, r0]
	if (type == GRID_PORT_TYPE_USART){	
    5094:	d156      	bne.n	5144 <grid_port_init+0x140>
		
		por->partner_status = 0;
    5096:	54e5      	strb	r5, [r4, r3]
		por->partner_fi = 0;
    5098:	5465      	strb	r5, [r4, r1]
		
		
		sprintf(por->ping_packet, "%c%c%c%c%02x%02x%02x%c00\n", GRID_CONST_SOH, GRID_CONST_DCT, GRID_CONST_BELL, por->direction, grid_sys_get_hwcfg(), 255, 255, GRID_CONST_EOT);
    509a:	4b2b      	ldr	r3, [pc, #172]	; (5148 <grid_port_init+0x144>)
    509c:	f894 9009 	ldrb.w	r9, [r4, #9]
    50a0:	4798      	blx	r3
    50a2:	f504 583c 	add.w	r8, r4, #12032	; 0x2f00
    50a6:	2304      	movs	r3, #4
    50a8:	f108 0833 	add.w	r8, r8, #51	; 0x33
    50ac:	e9cd 7304 	strd	r7, r3, [sp, #16]
    50b0:	fa5f f989 	uxtb.w	r9, r9
    50b4:	2307      	movs	r3, #7
    50b6:	4632      	mov	r2, r6
    50b8:	4924      	ldr	r1, [pc, #144]	; (514c <grid_port_init+0x148>)
    50ba:	f8cd 9004 	str.w	r9, [sp, #4]
    50be:	e9cd 0702 	strd	r0, r7, [sp, #8]
    50c2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 5160 <grid_port_init+0x15c>
    50c6:	9300      	str	r3, [sp, #0]
    50c8:	4640      	mov	r0, r8
    50ca:	230e      	movs	r3, #14
    50cc:	47c8      	blx	r9
		
		por->ping_packet_length = strlen(por->ping_packet);	
    50ce:	4b20      	ldr	r3, [pc, #128]	; (5150 <grid_port_init+0x14c>)
    50d0:	4640      	mov	r0, r8
    50d2:	4798      	blx	r3
    50d4:	f642 7347 	movw	r3, #12103	; 0x2f47
    50d8:	b2c0      	uxtb	r0, r0
    50da:	54e0      	strb	r0, [r4, r3]
			
		grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    50dc:	4640      	mov	r0, r8
    50de:	f814 9003 	ldrb.w	r9, [r4, r3]
    50e2:	5ce1      	ldrb	r1, [r4, r3]
    50e4:	4b1b      	ldr	r3, [pc, #108]	; (5154 <grid_port_init+0x150>)
    50e6:	4798      	blx	r3
    50e8:	fa5f f989 	uxtb.w	r9, r9
    50ec:	4b1a      	ldr	r3, [pc, #104]	; (5158 <grid_port_init+0x154>)
    50ee:	4602      	mov	r2, r0
    50f0:	4649      	mov	r1, r9
    50f2:	4640      	mov	r0, r8
    50f4:	4798      	blx	r3
		

		
		if (por->direction == GRID_CONST_NORTH){
    50f6:	7a63      	ldrb	r3, [r4, #9]
    50f8:	2b11      	cmp	r3, #17
    50fa:	d108      	bne.n	510e <grid_port_init+0x10a>
			por->dx = 0;
    50fc:	f642 7349 	movw	r3, #12105	; 0x2f49
    5100:	54e5      	strb	r5, [r4, r3]
			por->dy = 1;
    5102:	f642 734a 	movw	r3, #12106	; 0x2f4a
    5106:	54e6      	strb	r6, [r4, r3]
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
	}
	
}
    5108:	b007      	add	sp, #28
    510a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else if (por->direction == GRID_CONST_EAST){
    510e:	7a63      	ldrb	r3, [r4, #9]
    5110:	2b12      	cmp	r3, #18
    5112:	d106      	bne.n	5122 <grid_port_init+0x11e>
			por->dx = 1;
    5114:	f642 7349 	movw	r3, #12105	; 0x2f49
    5118:	54e6      	strb	r6, [r4, r3]
			por->dy = 0;
    511a:	f642 734a 	movw	r3, #12106	; 0x2f4a
    511e:	54e5      	strb	r5, [r4, r3]
    5120:	e7f2      	b.n	5108 <grid_port_init+0x104>
		else if (por->direction == GRID_CONST_SOUTH){
    5122:	7a63      	ldrb	r3, [r4, #9]
    5124:	2b13      	cmp	r3, #19
    5126:	d106      	bne.n	5136 <grid_port_init+0x132>
			por->dx = 0;
    5128:	f642 7349 	movw	r3, #12105	; 0x2f49
    512c:	54e5      	strb	r5, [r4, r3]
			por->dy = -1;
    512e:	f642 734a 	movw	r3, #12106	; 0x2f4a
    5132:	54e7      	strb	r7, [r4, r3]
    5134:	e7e8      	b.n	5108 <grid_port_init+0x104>
		else if (por->direction == GRID_CONST_WEST){
    5136:	7a63      	ldrb	r3, [r4, #9]
    5138:	2b14      	cmp	r3, #20
    513a:	d1e5      	bne.n	5108 <grid_port_init+0x104>
			por->dx = -1;
    513c:	f642 7349 	movw	r3, #12105	; 0x2f49
    5140:	54e7      	strb	r7, [r4, r3]
    5142:	e7ea      	b.n	511a <grid_port_init+0x116>
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    5144:	54e2      	strb	r2, [r4, r3]
}
    5146:	e7df      	b.n	5108 <grid_port_init+0x104>
    5148:	000090cd 	.word	0x000090cd
    514c:	0001470e 	.word	0x0001470e
    5150:	00012c81 	.word	0x00012c81
    5154:	000091b1 	.word	0x000091b1
    5158:	000091e5 	.word	0x000091e5
    515c:	000047dd 	.word	0x000047dd
    5160:	00012b75 	.word	0x00012b75

00005164 <grid_port_init_all>:

void grid_port_init_all(void){
    5164:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	
	grid_port_init(&GRID_PORT_N, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_CONST_NORTH ,0);
    5168:	2600      	movs	r6, #0
    516a:	4d1c      	ldr	r5, [pc, #112]	; (51dc <grid_port_init_all+0x78>)
    516c:	491c      	ldr	r1, [pc, #112]	; (51e0 <grid_port_init_all+0x7c>)
    516e:	481d      	ldr	r0, [pc, #116]	; (51e4 <grid_port_init_all+0x80>)
    5170:	9600      	str	r6, [sp, #0]
	grid_port_init(&GRID_PORT_E, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_CONST_EAST  ,1);
    5172:	2401      	movs	r4, #1
	grid_port_init(&GRID_PORT_N, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_CONST_NORTH ,0);
    5174:	2311      	movs	r3, #17
    5176:	2201      	movs	r2, #1
    5178:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_CONST_SOUTH ,2);
    517a:	f04f 0902 	mov.w	r9, #2
	grid_port_init(&GRID_PORT_E, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_CONST_EAST  ,1);
    517e:	4622      	mov	r2, r4
    5180:	4919      	ldr	r1, [pc, #100]	; (51e8 <grid_port_init_all+0x84>)
    5182:	481a      	ldr	r0, [pc, #104]	; (51ec <grid_port_init_all+0x88>)
    5184:	9400      	str	r4, [sp, #0]
    5186:	2312      	movs	r3, #18
    5188:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_CONST_WEST  ,3);
    518a:	2703      	movs	r7, #3
	grid_port_init(&GRID_PORT_S, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_CONST_SOUTH ,2);
    518c:	4622      	mov	r2, r4
    518e:	4918      	ldr	r1, [pc, #96]	; (51f0 <grid_port_init_all+0x8c>)
    5190:	4818      	ldr	r0, [pc, #96]	; (51f4 <grid_port_init_all+0x90>)
    5192:	f8cd 9000 	str.w	r9, [sp]
    5196:	2313      	movs	r3, #19
    5198:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    519a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 5204 <grid_port_init_all+0xa0>
	grid_port_init(&GRID_PORT_W, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_CONST_WEST  ,3);
    519e:	9700      	str	r7, [sp, #0]
    51a0:	4622      	mov	r2, r4
    51a2:	4915      	ldr	r1, [pc, #84]	; (51f8 <grid_port_init_all+0x94>)
    51a4:	4815      	ldr	r0, [pc, #84]	; (51fc <grid_port_init_all+0x98>)
    51a6:	2314      	movs	r3, #20
    51a8:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    51aa:	f04f 0aff 	mov.w	sl, #255	; 0xff
    51ae:	463a      	mov	r2, r7
	grid_port_init(&GRID_PORT_H, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    51b0:	4f13      	ldr	r7, [pc, #76]	; (5200 <grid_port_init_all+0x9c>)
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    51b2:	f8cd a000 	str.w	sl, [sp]
    51b6:	4633      	mov	r3, r6
    51b8:	4631      	mov	r1, r6
    51ba:	4640      	mov	r0, r8
    51bc:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    51be:	4633      	mov	r3, r6
    51c0:	f8cd a000 	str.w	sl, [sp]
    51c4:	464a      	mov	r2, r9
    51c6:	4631      	mov	r1, r6
    51c8:	4638      	mov	r0, r7
    51ca:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    51cc:	f642 734b 	movw	r3, #12107	; 0x2f4b
    51d0:	f808 4003 	strb.w	r4, [r8, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    51d4:	54fc      	strb	r4, [r7, r3]
	
	
}
    51d6:	b002      	add	sp, #8
    51d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51dc:	00005005 	.word	0x00005005
    51e0:	20014b94 	.word	0x20014b94
    51e4:	200010dc 	.word	0x200010dc
    51e8:	20014b40 	.word	0x20014b40
    51ec:	200115fc 	.word	0x200115fc
    51f0:	20014c98 	.word	0x20014c98
    51f4:	2000b660 	.word	0x2000b660
    51f8:	20014c48 	.word	0x20014c48
    51fc:	20008260 	.word	0x20008260
    5200:	2000e5b0 	.word	0x2000e5b0
    5204:	2000403c 	.word	0x2000403c

00005208 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    520c:	f500 582c 	add.w	r8, r0, #11008	; 0x2b00
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5210:	b091      	sub	sp, #68	; 0x44
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    5212:	f108 0834 	add.w	r8, r8, #52	; 0x34
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5216:	af02      	add	r7, sp, #8
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    5218:	4b5c      	ldr	r3, [pc, #368]	; (538c <grid_port_process_inbound+0x184>)
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    521a:	6079      	str	r1, [r7, #4]
    521c:	4606      	mov	r6, r0
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    521e:	4640      	mov	r0, r8
    5220:	4798      	blx	r3
	
	if (!packet_size){
    5222:	4605      	mov	r5, r0
    5224:	2800      	cmp	r0, #0
    5226:	f000 80af 	beq.w	5388 <grid_port_process_inbound+0x180>
		uint8_t port_count = 6;
		struct grid_port* port_array_default[port_count];
		struct grid_port* port_array[port_count];
		
		
		port_array_default[0] = &GRID_PORT_N;
    522a:	4b59      	ldr	r3, [pc, #356]	; (5390 <grid_port_process_inbound+0x188>)
    522c:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    522e:	4b59      	ldr	r3, [pc, #356]	; (5394 <grid_port_process_inbound+0x18c>)
    5230:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    5232:	4b59      	ldr	r3, [pc, #356]	; (5398 <grid_port_process_inbound+0x190>)
    5234:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    5236:	4b59      	ldr	r3, [pc, #356]	; (539c <grid_port_process_inbound+0x194>)
    5238:	617b      	str	r3, [r7, #20]
		
		port_array_default[4] = &GRID_PORT_U;
    523a:	4b59      	ldr	r3, [pc, #356]	; (53a0 <grid_port_process_inbound+0x198>)
    523c:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    523e:	4b59      	ldr	r3, [pc, #356]	; (53a4 <grid_port_process_inbound+0x19c>)
    5240:	61fb      	str	r3, [r7, #28]
	}else{
    5242:	46eb      	mov	fp, sp
		
		uint8_t j=0;
		
		for(uint8_t i=0; i<port_count; i++){
    5244:	f107 0308 	add.w	r3, r7, #8
		port_array_default[5] = &GRID_PORT_H;
    5248:	f04f 0906 	mov.w	r9, #6
		uint8_t j=0;
    524c:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    524e:	f642 714b 	movw	r1, #12107	; 0x2f4b
    5252:	f853 2b04 	ldr.w	r2, [r3], #4
    5256:	5c50      	ldrb	r0, [r2, r1]
    5258:	b138      	cbz	r0, 526a <grid_port_process_inbound+0x62>
				port_array[j] = port_array_default[i];
    525a:	f107 0038 	add.w	r0, r7, #56	; 0x38
    525e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
				j++;
    5262:	3401      	adds	r4, #1
				port_array[j] = port_array_default[i];
    5264:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    5268:	b2e4      	uxtb	r4, r4
		for(uint8_t i=0; i<port_count; i++){
    526a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    526e:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    5272:	d1ee      	bne.n	5252 <grid_port_process_inbound+0x4a>
		
		for (uint8_t i=0; i<port_count; i++)
		{
			if (port_array[i] != por || loopback){
			
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    5274:	4a4c      	ldr	r2, [pc, #304]	; (53a8 <grid_port_process_inbound+0x1a0>)
    5276:	4649      	mov	r1, r9
			if (port_array[i] != por || loopback){
    5278:	f107 0a20 	add.w	sl, r7, #32
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    527c:	f242 7c3c 	movw	ip, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    5280:	b2c8      	uxtb	r0, r1
    5282:	4284      	cmp	r4, r0
    5284:	d805      	bhi.n	5292 <grid_port_process_inbound+0x8a>
					return 0;
				}	
			}	
		}
		
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    5286:	4b49      	ldr	r3, [pc, #292]	; (53ac <grid_port_process_inbound+0x1a4>)
    5288:	4640      	mov	r0, r8
    528a:	4798      	blx	r3
    528c:	42a8      	cmp	r0, r5
    528e:	d047      	beq.n	5320 <grid_port_process_inbound+0x118>
			while(1){			
    5290:	e7fe      	b.n	5290 <grid_port_process_inbound+0x88>
			if (port_array[i] != por || loopback){
    5292:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
    5296:	42b0      	cmp	r0, r6
    5298:	d101      	bne.n	529e <grid_port_process_inbound+0x96>
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	b1b3      	cbz	r3, 52cc <grid_port_process_inbound+0xc4>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    529e:	4460      	add	r0, ip
    52a0:	4790      	blx	r2
    52a2:	42a8      	cmp	r0, r5
    52a4:	4a40      	ldr	r2, [pc, #256]	; (53a8 <grid_port_process_inbound+0x1a0>)
    52a6:	f242 7c3c 	movw	ip, #10044	; 0x273c
    52aa:	d20f      	bcs.n	52cc <grid_port_process_inbound+0xc4>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    52ac:	2302      	movs	r3, #2
    52ae:	22c8      	movs	r2, #200	; 0xc8
    52b0:	e9cd 3200 	strd	r3, r2, [sp]
    52b4:	2264      	movs	r2, #100	; 0x64
    52b6:	483e      	ldr	r0, [pc, #248]	; (53b0 <grid_port_process_inbound+0x1a8>)
    52b8:	4c3e      	ldr	r4, [pc, #248]	; (53b4 <grid_port_process_inbound+0x1ac>)
    52ba:	2300      	movs	r3, #0
    52bc:	4611      	mov	r1, r2
    52be:	47a0      	blx	r4
					return 0;
    52c0:	46dd      	mov	sp, fp
		}	

		return 1;
	}
		
}
    52c2:	4648      	mov	r0, r9
    52c4:	373c      	adds	r7, #60	; 0x3c
    52c6:	46bd      	mov	sp, r7
    52c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (uint8_t i=0; i<port_count; i++)
    52cc:	3101      	adds	r1, #1
    52ce:	e7d7      	b.n	5280 <grid_port_process_inbound+0x78>
			if (port_array[i] != por || loopback){
    52d0:	f85a 0029 	ldr.w	r0, [sl, r9, lsl #2]
    52d4:	42b0      	cmp	r0, r6
    52d6:	d101      	bne.n	52dc <grid_port_process_inbound+0xd4>
    52d8:	6879      	ldr	r1, [r7, #4]
    52da:	b129      	cbz	r1, 52e8 <grid_port_process_inbound+0xe0>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    52dc:	4418      	add	r0, r3
    52de:	4629      	mov	r1, r5
    52e0:	4790      	blx	r2
    52e2:	4a35      	ldr	r2, [pc, #212]	; (53b8 <grid_port_process_inbound+0x1b0>)
    52e4:	f242 733c 	movw	r3, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    52e8:	f109 0901 	add.w	r9, r9, #1
    52ec:	fa5f f189 	uxtb.w	r1, r9
    52f0:	428c      	cmp	r4, r1
    52f2:	d8ed      	bhi.n	52d0 <grid_port_process_inbound+0xc8>
    52f4:	f04f 0a00 	mov.w	sl, #0
		for (uint16_t j=0; j<packet_size; j++)
    52f8:	fa1f f38a 	uxth.w	r3, sl
    52fc:	429d      	cmp	r5, r3
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    52fe:	4640      	mov	r0, r8
		for (uint16_t j=0; j<packet_size; j++)
    5300:	d816      	bhi.n	5330 <grid_port_process_inbound+0x128>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    5302:	4b2e      	ldr	r3, [pc, #184]	; (53bc <grid_port_process_inbound+0x1b4>)
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5304:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 53c8 <grid_port_process_inbound+0x1c0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    5308:	4798      	blx	r3
			if (port_array[i] != por || loopback){
    530a:	f107 0520 	add.w	r5, r7, #32
		for (uint8_t i=0; i<port_count; i++)
    530e:	2100      	movs	r1, #0
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5310:	f242 783c 	movw	r8, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    5314:	b2cb      	uxtb	r3, r1
    5316:	429c      	cmp	r4, r3
    5318:	d82c      	bhi.n	5374 <grid_port_process_inbound+0x16c>
		return 1;
    531a:	f04f 0901 	mov.w	r9, #1
    531e:	e7cf      	b.n	52c0 <grid_port_process_inbound+0xb8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    5320:	4a25      	ldr	r2, [pc, #148]	; (53b8 <grid_port_process_inbound+0x1b0>)
    5322:	f04f 0900 	mov.w	r9, #0
			if (port_array[i] != por || loopback){
    5326:	f107 0a20 	add.w	sl, r7, #32
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    532a:	f242 733c 	movw	r3, #10044	; 0x273c
    532e:	e7dd      	b.n	52ec <grid_port_process_inbound+0xe4>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    5330:	4b23      	ldr	r3, [pc, #140]	; (53c0 <grid_port_process_inbound+0x1b8>)
    5332:	4798      	blx	r3
			for (uint8_t i=0; i<port_count; i++){
    5334:	f04f 0900 	mov.w	r9, #0
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    5338:	4601      	mov	r1, r0
				if (port_array[i] != por || loopback){
    533a:	f107 0320 	add.w	r3, r7, #32
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    533e:	f242 7c3c 	movw	ip, #10044	; 0x273c
			for (uint8_t i=0; i<port_count; i++){
    5342:	fa5f f089 	uxtb.w	r0, r9
    5346:	4284      	cmp	r4, r0
    5348:	d802      	bhi.n	5350 <grid_port_process_inbound+0x148>
		for (uint16_t j=0; j<packet_size; j++)
    534a:	f10a 0a01 	add.w	sl, sl, #1
    534e:	e7d3      	b.n	52f8 <grid_port_process_inbound+0xf0>
				if (port_array[i] != por || loopback){
    5350:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    5354:	42b0      	cmp	r0, r6
    5356:	d101      	bne.n	535c <grid_port_process_inbound+0x154>
    5358:	687a      	ldr	r2, [r7, #4]
    535a:	b142      	cbz	r2, 536e <grid_port_process_inbound+0x166>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    535c:	4b19      	ldr	r3, [pc, #100]	; (53c4 <grid_port_process_inbound+0x1bc>)
    535e:	6039      	str	r1, [r7, #0]
    5360:	4460      	add	r0, ip
    5362:	4798      	blx	r3
    5364:	6839      	ldr	r1, [r7, #0]
    5366:	f107 0320 	add.w	r3, r7, #32
    536a:	f242 7c3c 	movw	ip, #10044	; 0x273c
			for (uint8_t i=0; i<port_count; i++){
    536e:	f109 0901 	add.w	r9, r9, #1
    5372:	e7e6      	b.n	5342 <grid_port_process_inbound+0x13a>
			if (port_array[i] != por || loopback){
    5374:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
    5378:	42b0      	cmp	r0, r6
    537a:	d101      	bne.n	5380 <grid_port_process_inbound+0x178>
    537c:	687b      	ldr	r3, [r7, #4]
    537e:	b10b      	cbz	r3, 5384 <grid_port_process_inbound+0x17c>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5380:	4440      	add	r0, r8
    5382:	47c8      	blx	r9
		for (uint8_t i=0; i<port_count; i++)
    5384:	3101      	adds	r1, #1
    5386:	e7c5      	b.n	5314 <grid_port_process_inbound+0x10c>
		return 0;
    5388:	4681      	mov	r9, r0
    538a:	e79a      	b.n	52c2 <grid_port_process_inbound+0xba>
    538c:	00004f05 	.word	0x00004f05
    5390:	200010dc 	.word	0x200010dc
    5394:	200115fc 	.word	0x200115fc
    5398:	2000b660 	.word	0x2000b660
    539c:	20008260 	.word	0x20008260
    53a0:	2000403c 	.word	0x2000403c
    53a4:	2000e5b0 	.word	0x2000e5b0
    53a8:	00004821 	.word	0x00004821
    53ac:	00004f5b 	.word	0x00004f5b
    53b0:	20006f94 	.word	0x20006f94
    53b4:	00008ff3 	.word	0x00008ff3
    53b8:	00004839 	.word	0x00004839
    53bc:	00004fed 	.word	0x00004fed
    53c0:	00004fc3 	.word	0x00004fc3
    53c4:	00004875 	.word	0x00004875
    53c8:	00004895 	.word	0x00004895

000053cc <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    53cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			

	// OLD DEBUG IMPLEMENTATION
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    53d0:	f500 551c 	add.w	r5, r0, #9984	; 0x2700
    53d4:	353c      	adds	r5, #60	; 0x3c
    53d6:	4ba7      	ldr	r3, [pc, #668]	; (5674 <grid_port_process_outbound_usb+0x2a8>)
uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    53d8:	b0ed      	sub	sp, #436	; 0x1b4
    53da:	4680      	mov	r8, r0
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    53dc:	4628      	mov	r0, r5
    53de:	4798      	blx	r3
	
	if (!length){		
    53e0:	4604      	mov	r4, r0
    53e2:	b910      	cbnz	r0, 53ea <grid_port_process_outbound_usb+0x1e>
			
	// Let's send the packet through USB
	cdcdf_acm_write(por->tx_double_buffer, packet_length);

	
}
    53e4:	b06d      	add	sp, #436	; 0x1b4
    53e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53ea:	f108 0b2c 	add.w	fp, r8, #44	; 0x2c
    53ee:	f508 539d 	add.w	r3, r8, #5024	; 0x13a0
    53f2:	3314      	adds	r3, #20
	if (!length){		
    53f4:	465a      	mov	r2, fp
		por->tx_double_buffer[i] = 0;
    53f6:	2100      	movs	r1, #0
    53f8:	f802 1b01 	strb.w	r1, [r2], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    53fc:	429a      	cmp	r2, r3
    53fe:	d1fb      	bne.n	53f8 <grid_port_process_outbound_usb+0x2c>
	grid_msg_init(&message);
    5400:	4b9d      	ldr	r3, [pc, #628]	; (5678 <grid_port_process_outbound_usb+0x2ac>)
		grid_msg_packet_receive_char(&message, nextchar);
    5402:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 56bc <grid_port_process_outbound_usb+0x2f0>
	grid_msg_init(&message);
    5406:	a805      	add	r0, sp, #20
    5408:	4798      	blx	r3
	grid_buffer_read_init(&por->tx_buffer);
    540a:	4b9c      	ldr	r3, [pc, #624]	; (567c <grid_port_process_outbound_usb+0x2b0>)
    540c:	4628      	mov	r0, r5
    540e:	4798      	blx	r3
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    5410:	4b9b      	ldr	r3, [pc, #620]	; (5680 <grid_port_process_outbound_usb+0x2b4>)
	for (uint16_t i = 0; i<length; i++){
    5412:	46da      	mov	sl, fp
    5414:	2700      	movs	r7, #0
    5416:	b2ba      	uxth	r2, r7
    5418:	4294      	cmp	r4, r2
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    541a:	4628      	mov	r0, r5
	for (uint16_t i = 0; i<length; i++){
    541c:	d825      	bhi.n	546a <grid_port_process_outbound_usb+0x9e>
	grid_buffer_read_acknowledge(&por->tx_buffer);
    541e:	4b99      	ldr	r3, [pc, #612]	; (5684 <grid_port_process_outbound_usb+0x2b8>)
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    5420:	4c99      	ldr	r4, [pc, #612]	; (5688 <grid_port_process_outbound_usb+0x2bc>)
	grid_buffer_read_acknowledge(&por->tx_buffer);
    5422:	4798      	blx	r3
	int8_t dx = grid_msg_header_get_dx(&message) - GRID_SYS_DEFAULT_POSITION;
    5424:	4b99      	ldr	r3, [pc, #612]	; (568c <grid_port_process_outbound_usb+0x2c0>)
    5426:	a805      	add	r0, sp, #20
    5428:	4798      	blx	r3
    542a:	387f      	subs	r0, #127	; 0x7f
    542c:	b243      	sxtb	r3, r0
    542e:	9300      	str	r3, [sp, #0]
	int8_t dy = grid_msg_header_get_dy(&message) - GRID_SYS_DEFAULT_POSITION;	
    5430:	a805      	add	r0, sp, #20
    5432:	4b97      	ldr	r3, [pc, #604]	; (5690 <grid_port_process_outbound_usb+0x2c4>)
    5434:	4798      	blx	r3
    5436:	387f      	subs	r0, #127	; 0x7f
    5438:	b243      	sxtb	r3, r0
	for (uint16_t i=0; i<message.body_length; i++){
    543a:	f04f 0a00 	mov.w	sl, #0
	int8_t dy = grid_msg_header_get_dy(&message) - GRID_SYS_DEFAULT_POSITION;	
    543e:	9301      	str	r3, [sp, #4]
	uint8_t current_start		= 0;
    5440:	4656      	mov	r6, sl
	for (uint16_t i=0; i<message.body_length; i++){
    5442:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
    5444:	fa1f f38a 	uxth.w	r3, sl
    5448:	429a      	cmp	r2, r3
    544a:	d818      	bhi.n	547e <grid_port_process_outbound_usb+0xb2>
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    544c:	4b91      	ldr	r3, [pc, #580]	; (5694 <grid_port_process_outbound_usb+0x2c8>)
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    544e:	4e92      	ldr	r6, [pc, #584]	; (5698 <grid_port_process_outbound_usb+0x2cc>)
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    5450:	a805      	add	r0, sp, #20
    5452:	4798      	blx	r3
	for (uint32_t i=0; i<packet_length; i++){
    5454:	2400      	movs	r4, #0
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    5456:	4605      	mov	r5, r0
	for (uint32_t i=0; i<packet_length; i++){
    5458:	42ac      	cmp	r4, r5
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    545a:	4621      	mov	r1, r4
	for (uint32_t i=0; i<packet_length; i++){
    545c:	f040 8104 	bne.w	5668 <grid_port_process_outbound_usb+0x29c>
	cdcdf_acm_write(por->tx_double_buffer, packet_length);
    5460:	4b8e      	ldr	r3, [pc, #568]	; (569c <grid_port_process_outbound_usb+0x2d0>)
    5462:	f108 002c 	add.w	r0, r8, #44	; 0x2c
    5466:	4798      	blx	r3
}
    5468:	e7bc      	b.n	53e4 <grid_port_process_outbound_usb+0x18>
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    546a:	4798      	blx	r3
    546c:	4606      	mov	r6, r0
		grid_msg_packet_receive_char(&message, nextchar);
    546e:	4601      	mov	r1, r0
    5470:	a805      	add	r0, sp, #20
    5472:	47c8      	blx	r9
		por->tx_double_buffer[i] = nextchar;	
    5474:	3701      	adds	r7, #1
    5476:	f80a 6b01 	strb.w	r6, [sl], #1
	for (uint16_t i = 0; i<length; i++){
    547a:	4b81      	ldr	r3, [pc, #516]	; (5680 <grid_port_process_outbound_usb+0x2b4>)
    547c:	e7cb      	b.n	5416 <grid_port_process_outbound_usb+0x4a>
		if (message.body[i] == GRID_CONST_STX){
    547e:	aa05      	add	r2, sp, #20
    5480:	4413      	add	r3, r2
    5482:	7d1b      	ldrb	r3, [r3, #20]
    5484:	2b02      	cmp	r3, #2
    5486:	d104      	bne.n	5492 <grid_port_process_outbound_usb+0xc6>
			current_start = i;
    5488:	fa5f f68a 	uxtb.w	r6, sl
	for (uint16_t i=0; i<message.body_length; i++){
    548c:	f10a 0a01 	add.w	sl, sl, #1
    5490:	e7d7      	b.n	5442 <grid_port_process_outbound_usb+0x76>
		else if (message.body[i] == GRID_CONST_ETX && current_start!=0){
    5492:	2b03      	cmp	r3, #3
    5494:	d1fa      	bne.n	548c <grid_port_process_outbound_usb+0xc0>
    5496:	b90e      	cbnz	r6, 549c <grid_port_process_outbound_usb+0xd0>
			current_start = 0;
    5498:	2600      	movs	r6, #0
			else if (msg_class == GRID_CLASS_HIDKEYBOARD_code && msg_instr == GRID_INSTR_EXECUTE_code){
    549a:	e7f7      	b.n	548c <grid_port_process_outbound_usb+0xc0>
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    549c:	4631      	mov	r1, r6
    549e:	2201      	movs	r2, #1
    54a0:	a805      	add	r0, sp, #20
    54a2:	47a0      	blx	r4
    54a4:	4635      	mov	r5, r6
			uint8_t msg_instr = grid_msg_text_get_parameter(&message, current_start, GRID_INSTR_offset, GRID_INSTR_length);
    54a6:	2301      	movs	r3, #1
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    54a8:	b2c6      	uxtb	r6, r0
			uint8_t msg_instr = grid_msg_text_get_parameter(&message, current_start, GRID_INSTR_offset, GRID_INSTR_length);
    54aa:	2204      	movs	r2, #4
    54ac:	4629      	mov	r1, r5
    54ae:	a805      	add	r0, sp, #20
    54b0:	47a0      	blx	r4
    54b2:	b2c0      	uxtb	r0, r0
			if (msg_class == GRID_CLASS_MIDIRELATIVE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    54b4:	2e00      	cmp	r6, #0
    54b6:	d13f      	bne.n	5538 <grid_port_process_outbound_usb+0x16c>
    54b8:	280e      	cmp	r0, #14
    54ba:	d1ed      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t midi_cablecommand = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset,		GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length);
    54bc:	4629      	mov	r1, r5
    54be:	2302      	movs	r3, #2
    54c0:	2205      	movs	r2, #5
    54c2:	a805      	add	r0, sp, #20
    54c4:	47a0      	blx	r4
				uint8_t midi_commandchannel = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset ,		GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length);
    54c6:	4629      	mov	r1, r5
    54c8:	2302      	movs	r3, #2
    54ca:	2207      	movs	r2, #7
    54cc:	a805      	add	r0, sp, #20
    54ce:	47a0      	blx	r4
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54d0:	4629      	mov	r1, r5
				uint8_t midi_commandchannel = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset ,		GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length);
    54d2:	4681      	mov	r9, r0
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54d4:	2302      	movs	r3, #2
    54d6:	2209      	movs	r2, #9
    54d8:	a805      	add	r0, sp, #20
    54da:	47a0      	blx	r4
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54dc:	4629      	mov	r1, r5
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54de:	4607      	mov	r7, r0
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54e0:	2302      	movs	r3, #2
    54e2:	220b      	movs	r2, #11
    54e4:	a805      	add	r0, sp, #20
    54e6:	47a0      	blx	r4
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54e8:	9901      	ldr	r1, [sp, #4]
    54ea:	4a6d      	ldr	r2, [pc, #436]	; (56a0 <grid_port_process_outbound_usb+0x2d4>)
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54ec:	f88d 000f 	strb.w	r0, [sp, #15]
				uint8_t midi_command = 	(midi_commandchannel&0xF0)>>4;
    54f0:	f3c9 1303 	ubfx	r3, r9, #4, #4
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54f4:	7bd2      	ldrb	r2, [r2, #15]
				midievent.byte0 = 0<<4|midi_command;
    54f6:	f88d 300c 	strb.w	r3, [sp, #12]
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54fa:	f1c1 0900 	rsb	r9, r1, #0
    54fe:	f009 0903 	and.w	r9, r9, #3
    5502:	eb09 0982 	add.w	r9, r9, r2, lsl #2
    5506:	f009 090f 	and.w	r9, r9, #15
				midievent.byte1 = midi_command<<4|midi_channel;
    550a:	ea49 1903 	orr.w	r9, r9, r3, lsl #4
				midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    550e:	b2ff      	uxtb	r7, r7
    5510:	9b00      	ldr	r3, [sp, #0]
				midievent.byte1 = midi_command<<4|midi_channel;
    5512:	f88d 900d 	strb.w	r9, [sp, #13]
				midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    5516:	37e0      	adds	r7, #224	; 0xe0
    5518:	2260      	movs	r2, #96	; 0x60
    551a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    551e:	fb97 f3f2 	sdiv	r3, r7, r2
    5522:	fb02 7713 	mls	r7, r2, r3, r7
    5526:	f88d 700e 	strb.w	r7, [sp, #14]
				grid_midi_tx_push(midievent);
    552a:	9803      	ldr	r0, [sp, #12]
    552c:	4b5d      	ldr	r3, [pc, #372]	; (56a4 <grid_port_process_outbound_usb+0x2d8>)
    552e:	4798      	blx	r3
				grid_midi_tx_pop(midievent);				
    5530:	9803      	ldr	r0, [sp, #12]
    5532:	4b5d      	ldr	r3, [pc, #372]	; (56a8 <grid_port_process_outbound_usb+0x2dc>)
    5534:	4798      	blx	r3
			if (msg_class == GRID_CLASS_MIDIRELATIVE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    5536:	e7a9      	b.n	548c <grid_port_process_outbound_usb+0xc0>
			else if (msg_class == GRID_CLASS_MIDIABSOLUTE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    5538:	2e01      	cmp	r6, #1
    553a:	d127      	bne.n	558c <grid_port_process_outbound_usb+0x1c0>
    553c:	280e      	cmp	r0, #14
    553e:	d1ab      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    5540:	4629      	mov	r1, r5
    5542:	2302      	movs	r3, #2
    5544:	2205      	movs	r2, #5
    5546:	a805      	add	r0, sp, #20
    5548:	47a0      	blx	r4
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    554a:	4629      	mov	r1, r5
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    554c:	4681      	mov	r9, r0
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    554e:	2302      	movs	r3, #2
    5550:	2207      	movs	r2, #7
    5552:	a805      	add	r0, sp, #20
    5554:	47a0      	blx	r4
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5556:	4629      	mov	r1, r5
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    5558:	4607      	mov	r7, r0
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    555a:	2302      	movs	r3, #2
    555c:	2209      	movs	r2, #9
    555e:	a805      	add	r0, sp, #20
    5560:	47a0      	blx	r4
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    5562:	220b      	movs	r2, #11
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5564:	4606      	mov	r6, r0
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    5566:	4629      	mov	r1, r5
    5568:	2302      	movs	r3, #2
    556a:	a805      	add	r0, sp, #20
    556c:	47a0      	blx	r4
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    556e:	f88d 900c 	strb.w	r9, [sp, #12]
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    5572:	f88d 700d 	strb.w	r7, [sp, #13]
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5576:	f88d 600e 	strb.w	r6, [sp, #14]
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    557a:	f88d 000f 	strb.w	r0, [sp, #15]
				grid_midi_tx_push(midievent);
    557e:	9803      	ldr	r0, [sp, #12]
    5580:	4b48      	ldr	r3, [pc, #288]	; (56a4 <grid_port_process_outbound_usb+0x2d8>)
    5582:	4798      	blx	r3
				grid_midi_tx_pop(midievent);	
    5584:	9803      	ldr	r0, [sp, #12]
    5586:	4b48      	ldr	r3, [pc, #288]	; (56a8 <grid_port_process_outbound_usb+0x2dc>)
    5588:	4798      	blx	r3
    558a:	e785      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
			else if (msg_class == GRID_CLASS_HIDKEYBOARD_code && msg_instr == GRID_INSTR_EXECUTE_code){
    558c:	2e90      	cmp	r6, #144	; 0x90
    558e:	d11d      	bne.n	55cc <grid_port_process_outbound_usb+0x200>
    5590:	280e      	cmp	r0, #14
    5592:	d181      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    5594:	4629      	mov	r1, r5
    5596:	2302      	movs	r3, #2
    5598:	2205      	movs	r2, #5
    559a:	a805      	add	r0, sp, #20
    559c:	47a0      	blx	r4
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    559e:	4629      	mov	r1, r5
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    55a0:	4607      	mov	r7, r0
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55a2:	2302      	movs	r3, #2
    55a4:	2207      	movs	r2, #7
    55a6:	a805      	add	r0, sp, #20
    55a8:	47a0      	blx	r4
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55aa:	4629      	mov	r1, r5
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55ac:	4606      	mov	r6, r0
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55ae:	2302      	movs	r3, #2
    55b0:	2209      	movs	r2, #9
    55b2:	a805      	add	r0, sp, #20
    55b4:	47a0      	blx	r4
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55b6:	4b3d      	ldr	r3, [pc, #244]	; (56ac <grid_port_process_outbound_usb+0x2e0>)
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55b8:	f88d 000e 	strb.w	r0, [sp, #14]
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55bc:	a903      	add	r1, sp, #12
    55be:	483c      	ldr	r0, [pc, #240]	; (56b0 <grid_port_process_outbound_usb+0x2e4>)
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    55c0:	f88d 700d 	strb.w	r7, [sp, #13]
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55c4:	f88d 600c 	strb.w	r6, [sp, #12]
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55c8:	4798      	blx	r3
    55ca:	e765      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
			else if (msg_class == GRID_CLASS_HIDKEYMACRO_code && msg_instr == GRID_INSTR_EXECUTE_code){
    55cc:	2e91      	cmp	r6, #145	; 0x91
    55ce:	f47f af63 	bne.w	5498 <grid_port_process_outbound_usb+0xcc>
    55d2:	280e      	cmp	r0, #14
    55d4:	f47f af60 	bne.w	5498 <grid_port_process_outbound_usb+0xcc>
    55d8:	2605      	movs	r6, #5
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    55da:	2302      	movs	r3, #2
    55dc:	4632      	mov	r2, r6
    55de:	4629      	mov	r1, r5
    55e0:	a805      	add	r0, sp, #20
    55e2:	47a0      	blx	r4
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    55e4:	1cb2      	adds	r2, r6, #2
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    55e6:	4607      	mov	r7, r0
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    55e8:	2302      	movs	r3, #2
    55ea:	b2d2      	uxtb	r2, r2
    55ec:	4629      	mov	r1, r5
    55ee:	a805      	add	r0, sp, #20
    55f0:	47a0      	blx	r4
    55f2:	b2c0      	uxtb	r0, r0
                    if (key_code != 255){
    55f4:	28ff      	cmp	r0, #255	; 0xff
    55f6:	d00d      	beq.n	5614 <grid_port_process_outbound_usb+0x248>
                        key.ispressed = 1;
    55f8:	2201      	movs	r2, #1
    55fa:	f88d 200e 	strb.w	r2, [sp, #14]
                        key.delay = 100;
    55fe:	2264      	movs	r2, #100	; 0x64
                        key.ismodifier = key_ismodifier;
    5600:	ab03      	add	r3, sp, #12
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5602:	f88d 700d 	strb.w	r7, [sp, #13]
                        key.keycode = key_code;
    5606:	f88d 000c 	strb.w	r0, [sp, #12]
                        key.delay = 100;
    560a:	9204      	str	r2, [sp, #16]
                        grid_keyboard_tx_push(key);
    560c:	e893 0003 	ldmia.w	r3, {r0, r1}
    5610:	4b28      	ldr	r3, [pc, #160]	; (56b4 <grid_port_process_outbound_usb+0x2e8>)
    5612:	4798      	blx	r3
				for (uint8_t k=0; k<6; k++){
    5614:	3604      	adds	r6, #4
    5616:	b2f6      	uxtb	r6, r6
    5618:	2e1d      	cmp	r6, #29
    561a:	d1de      	bne.n	55da <grid_port_process_outbound_usb+0x20e>
                delay_ms(5);
    561c:	4b26      	ldr	r3, [pc, #152]	; (56b8 <grid_port_process_outbound_usb+0x2ec>)
    561e:	2005      	movs	r0, #5
    5620:	4798      	blx	r3
    5622:	2605      	movs	r6, #5
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5624:	2302      	movs	r3, #2
    5626:	4632      	mov	r2, r6
    5628:	4629      	mov	r1, r5
    562a:	a805      	add	r0, sp, #20
    562c:	47a0      	blx	r4
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    562e:	1cb2      	adds	r2, r6, #2
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5630:	4607      	mov	r7, r0
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    5632:	2302      	movs	r3, #2
    5634:	b2d2      	uxtb	r2, r2
    5636:	4629      	mov	r1, r5
    5638:	a805      	add	r0, sp, #20
    563a:	47a0      	blx	r4
    563c:	b2c0      	uxtb	r0, r0
                    if (key_code != 255){
    563e:	28ff      	cmp	r0, #255	; 0xff
    5640:	d00d      	beq.n	565e <grid_port_process_outbound_usb+0x292>
                        key.ispressed = 0;
    5642:	2200      	movs	r2, #0
    5644:	f88d 200e 	strb.w	r2, [sp, #14]
                        key.delay = 100;
    5648:	2264      	movs	r2, #100	; 0x64
                        key.ismodifier = key_ismodifier;
    564a:	ab03      	add	r3, sp, #12
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    564c:	f88d 700d 	strb.w	r7, [sp, #13]
                        key.keycode = key_code;
    5650:	f88d 000c 	strb.w	r0, [sp, #12]
                        key.delay = 100;
    5654:	9204      	str	r2, [sp, #16]
                        grid_keyboard_tx_push(key);
    5656:	e893 0003 	ldmia.w	r3, {r0, r1}
    565a:	4b16      	ldr	r3, [pc, #88]	; (56b4 <grid_port_process_outbound_usb+0x2e8>)
    565c:	4798      	blx	r3
				for (uint8_t k=0; k<6; k++){
    565e:	3604      	adds	r6, #4
    5660:	b2f6      	uxtb	r6, r6
    5662:	2e1d      	cmp	r6, #29
    5664:	d1de      	bne.n	5624 <grid_port_process_outbound_usb+0x258>
    5666:	e717      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    5668:	a805      	add	r0, sp, #20
    566a:	47b0      	blx	r6
	for (uint32_t i=0; i<packet_length; i++){
    566c:	3401      	adds	r4, #1
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    566e:	f80b 0b01 	strb.w	r0, [fp], #1
	for (uint32_t i=0; i<packet_length; i++){
    5672:	e6f1      	b.n	5458 <grid_port_process_outbound_usb+0x8c>
    5674:	00004f05 	.word	0x00004f05
    5678:	00007d8d 	.word	0x00007d8d
    567c:	00004f5b 	.word	0x00004f5b
    5680:	00004fc3 	.word	0x00004fc3
    5684:	00004fed 	.word	0x00004fed
    5688:	00007d55 	.word	0x00007d55
    568c:	00007c49 	.word	0x00007c49
    5690:	00007c89 	.word	0x00007c89
    5694:	00007ce9 	.word	0x00007ce9
    5698:	00007e83 	.word	0x00007e83
    569c:	0000b2d5 	.word	0x0000b2d5
    56a0:	20006f94 	.word	0x20006f94
    56a4:	0000a9ed 	.word	0x0000a9ed
    56a8:	0000aa15 	.word	0x0000aa15
    56ac:	0000a825 	.word	0x0000a825
    56b0:	200081f0 	.word	0x200081f0
    56b4:	0000aafd 	.word	0x0000aafd
    56b8:	0000c89d 	.word	0x0000c89d
    56bc:	00007e35 	.word	0x00007e35

000056c0 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    56c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56c4:	ed2d 8b02 	vpush	{d8}
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    56c8:	f500 541c 	add.w	r4, r0, #9984	; 0x2700
    56cc:	343c      	adds	r4, #60	; 0x3c
uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    56ce:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    56d2:	4bb5      	ldr	r3, [pc, #724]	; (59a8 <grid_port_process_outbound_ui+0x2e8>)
    56d4:	4620      	mov	r0, r4
    56d6:	4798      	blx	r3
	
	if (!length){
    56d8:	2500      	movs	r5, #0
    56da:	9006      	str	r0, [sp, #24]
    56dc:	b928      	cbnz	r0, 56ea <grid_port_process_outbound_ui+0x2a>

		
	}
	
	
}
    56de:	f50d 7d77 	add.w	sp, sp, #988	; 0x3dc
    56e2:	ecbd 8b02 	vpop	{d8}
    56e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    56ea:	4bb0      	ldr	r3, [pc, #704]	; (59ac <grid_port_process_outbound_ui+0x2ec>)
    56ec:	952b      	str	r5, [sp, #172]	; 0xac
    56ee:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    56f2:	4629      	mov	r1, r5
    56f4:	a82c      	add	r0, sp, #176	; 0xb0
    56f6:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    56f8:	4bad      	ldr	r3, [pc, #692]	; (59b0 <grid_port_process_outbound_ui+0x2f0>)
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    56fa:	4fae      	ldr	r7, [pc, #696]	; (59b4 <grid_port_process_outbound_ui+0x2f4>)
		grid_buffer_read_init(&por->tx_buffer);
    56fc:	4620      	mov	r0, r4
    56fe:	4798      	blx	r3
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    5700:	ae2b      	add	r6, sp, #172	; 0xac
		for (uint16_t i = 0; i<length; i++){
    5702:	9a06      	ldr	r2, [sp, #24]
    5704:	b2ab      	uxth	r3, r5
    5706:	429a      	cmp	r2, r3
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    5708:	4620      	mov	r0, r4
		for (uint16_t i = 0; i<length; i++){
    570a:	d839      	bhi.n	5780 <grid_port_process_outbound_ui+0xc0>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    570c:	4baa      	ldr	r3, [pc, #680]	; (59b8 <grid_port_process_outbound_ui+0x2f8>)
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    570e:	4fab      	ldr	r7, [pc, #684]	; (59bc <grid_port_process_outbound_ui+0x2fc>)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    5710:	4798      	blx	r3
		uint8_t error=0;
    5712:	2500      	movs	r5, #0
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5714:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    5718:	2202      	movs	r2, #2
    571a:	2106      	movs	r1, #6
    571c:	4630      	mov	r0, r6
		uint8_t error=0;
    571e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5722:	47b8      	blx	r7
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    5724:	f10d 0322 	add.w	r3, sp, #34	; 0x22
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5728:	fa5f fb80 	uxtb.w	fp, r0
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    572c:	2202      	movs	r2, #2
    572e:	2108      	movs	r1, #8
    5730:	4630      	mov	r0, r6
    5732:	47b8      	blx	r7
		if (dx == GRID_SYS_DEFAULT_POSITION && dy == GRID_SYS_DEFAULT_POSITION){
    5734:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    5738:	b2c0      	uxtb	r0, r0
		if (dx == GRID_SYS_DEFAULT_POSITION && dy == GRID_SYS_DEFAULT_POSITION){
    573a:	d125      	bne.n	5788 <grid_port_process_outbound_ui+0xc8>
			position_is_me = 1;
    573c:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
    5740:	f1d2 0b00 	rsbs	fp, r2, #0
    5744:	eb4b 0b02 	adc.w	fp, fp, r2
		uint8_t position_is_local = 0;
    5748:	462c      	mov	r4, r5
		uint8_t position_is_global = 0;
    574a:	9502      	str	r5, [sp, #8]
		uint8_t error_flag = 0;	
    574c:	2300      	movs	r3, #0
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    574e:	4d9c      	ldr	r5, [pc, #624]	; (59c0 <grid_port_process_outbound_ui+0x300>)
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    5750:	f8df a298 	ldr.w	sl, [pc, #664]	; 59ec <grid_port_process_outbound_ui+0x32c>
		uint8_t error_flag = 0;	
    5754:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    5758:	9303      	str	r3, [sp, #12]
		uint8_t current_start		= 0;
    575a:	4698      	mov	r8, r3
			if (message[i] == GRID_CONST_STX){
    575c:	9b03      	ldr	r3, [sp, #12]
    575e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    5762:	f813 1009 	ldrb.w	r1, [r3, r9]
    5766:	2902      	cmp	r1, #2
    5768:	d120      	bne.n	57ac <grid_port_process_outbound_ui+0xec>
				current_start = i;
    576a:	f89d 800c 	ldrb.w	r8, [sp, #12]
		for (uint16_t i=0; i<length; i++){
    576e:	9b03      	ldr	r3, [sp, #12]
    5770:	9a06      	ldr	r2, [sp, #24]
    5772:	3301      	adds	r3, #1
    5774:	9303      	str	r3, [sp, #12]
    5776:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    577a:	429a      	cmp	r2, r3
    577c:	d8ee      	bhi.n	575c <grid_port_process_outbound_ui+0x9c>
    577e:	e7ae      	b.n	56de <grid_port_process_outbound_ui+0x1e>
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    5780:	47b8      	blx	r7
    5782:	5570      	strb	r0, [r6, r5]
		for (uint16_t i = 0; i<length; i++){
    5784:	3501      	adds	r5, #1
    5786:	e7bc      	b.n	5702 <grid_port_process_outbound_ui+0x42>
		else if (dx == GRID_SYS_GLOBAL_POSITION && dy==GRID_SYS_GLOBAL_POSITION){
    5788:	f1bb 0f00 	cmp.w	fp, #0
    578c:	d105      	bne.n	579a <grid_port_process_outbound_ui+0xda>
		uint8_t position_is_global = 0;
    578e:	fab0 f380 	clz	r3, r0
    5792:	095b      	lsrs	r3, r3, #5
    5794:	9302      	str	r3, [sp, #8]
		uint8_t position_is_local = 0;
    5796:	465c      	mov	r4, fp
    5798:	e7d8      	b.n	574c <grid_port_process_outbound_ui+0x8c>
		else if (dx == GRID_SYS_LOCAL_POSITION && dy==GRID_SYS_LOCAL_POSITION){
    579a:	ea0b 0000 	and.w	r0, fp, r0
    579e:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
    57a2:	425c      	negs	r4, r3
    57a4:	415c      	adcs	r4, r3
		uint8_t position_is_global = 0;
    57a6:	46ab      	mov	fp, r5
		uint8_t position_is_me = 0;
    57a8:	9502      	str	r5, [sp, #8]
    57aa:	e7cf      	b.n	574c <grid_port_process_outbound_ui+0x8c>
			else if (message[i] == GRID_CONST_ETX && current_start!=0){
    57ac:	2903      	cmp	r1, #3
    57ae:	d1de      	bne.n	576e <grid_port_process_outbound_ui+0xae>
    57b0:	f1b8 0f00 	cmp.w	r8, #0
    57b4:	d102      	bne.n	57bc <grid_port_process_outbound_ui+0xfc>
				current_start = 0;
    57b6:	f04f 0800 	mov.w	r8, #0
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    57ba:	e7d8      	b.n	576e <grid_port_process_outbound_ui+0xae>
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    57bc:	f108 0001 	add.w	r0, r8, #1
    57c0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57c4:	4448      	add	r0, r9
    57c6:	47a8      	blx	r5
    57c8:	b2c6      	uxtb	r6, r0
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    57ca:	f108 0004 	add.w	r0, r8, #4
    57ce:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57d2:	2101      	movs	r1, #1
    57d4:	4448      	add	r0, r9
    57d6:	47a8      	blx	r5
				if (msg_class == GRID_CLASS_BANKACTIVE_code){
    57d8:	2e30      	cmp	r6, #48	; 0x30
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    57da:	b2c7      	uxtb	r7, r0
				if (msg_class == GRID_CLASS_BANKACTIVE_code){
    57dc:	d126      	bne.n	582c <grid_port_process_outbound_ui+0x16c>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    57de:	f108 0005 	add.w	r0, r8, #5
    57e2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57e6:	2102      	movs	r1, #2
    57e8:	4448      	add	r0, r9
    57ea:	47a8      	blx	r5
					if (msg_instr == GRID_INSTR_EXECUTE_code){ //SET BANK
    57ec:	2f0e      	cmp	r7, #14
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    57ee:	4606      	mov	r6, r0
					if (msg_instr == GRID_INSTR_EXECUTE_code){ //SET BANK
    57f0:	d10e      	bne.n	5810 <grid_port_process_outbound_ui+0x150>
						if (grid_sys_get_bank_valid(&grid_sys_state) == 0){
    57f2:	4874      	ldr	r0, [pc, #464]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    57f4:	4b74      	ldr	r3, [pc, #464]	; (59c8 <grid_port_process_outbound_ui+0x308>)
    57f6:	4798      	blx	r3
    57f8:	4602      	mov	r2, r0
    57fa:	b920      	cbnz	r0, 5806 <grid_port_process_outbound_ui+0x146>
							grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    57fc:	4601      	mov	r1, r0
    57fe:	4f73      	ldr	r7, [pc, #460]	; (59cc <grid_port_process_outbound_ui+0x30c>)
    5800:	4873      	ldr	r0, [pc, #460]	; (59d0 <grid_port_process_outbound_ui+0x310>)
    5802:	230c      	movs	r3, #12
    5804:	47b8      	blx	r7
						grid_sys_set_bank(&grid_sys_state, banknumber);
    5806:	486f      	ldr	r0, [pc, #444]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5808:	b2f1      	uxtb	r1, r6
								grid_sys_set_bank(&grid_sys_state, banknumber);
    580a:	4b72      	ldr	r3, [pc, #456]	; (59d4 <grid_port_process_outbound_ui+0x314>)
					grid_sys_recall_configuration(&grid_sys_state, banknumber);
    580c:	4798      	blx	r3
    580e:	e7d2      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
					else if (msg_instr == GRID_INSTR_FETCH_code){ //GET BANK
    5810:	2f0f      	cmp	r7, #15
    5812:	d1d0      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_get_bank_valid(&grid_sys_state) != 0){
    5814:	486b      	ldr	r0, [pc, #428]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5816:	4b6c      	ldr	r3, [pc, #432]	; (59c8 <grid_port_process_outbound_ui+0x308>)
    5818:	4798      	blx	r3
    581a:	2800      	cmp	r0, #0
    581c:	d0cb      	beq.n	57b6 <grid_port_process_outbound_ui+0xf6>
							grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    581e:	2200      	movs	r2, #0
    5820:	486b      	ldr	r0, [pc, #428]	; (59d0 <grid_port_process_outbound_ui+0x310>)
    5822:	4e6a      	ldr	r6, [pc, #424]	; (59cc <grid_port_process_outbound_ui+0x30c>)
    5824:	2309      	movs	r3, #9
    5826:	4611      	mov	r1, r2
    5828:	47b0      	blx	r6
    582a:	e7c4      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_BANKENABLED_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_global || position_is_me || position_is_local)){
    582c:	2e31      	cmp	r6, #49	; 0x31
    582e:	d140      	bne.n	58b2 <grid_port_process_outbound_ui+0x1f2>
    5830:	2f0e      	cmp	r7, #14
    5832:	d1c0      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
    5834:	9b02      	ldr	r3, [sp, #8]
    5836:	ea4b 0303 	orr.w	r3, fp, r3
    583a:	4323      	orrs	r3, r4
    583c:	d0bb      	beq.n	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_BANKNUMBER_offset], GRID_CLASS_BANKENABLED_BANKNUMBER_length, &error_flag);
    583e:	f108 0005 	add.w	r0, r8, #5
    5842:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5846:	2102      	movs	r1, #2
    5848:	4448      	add	r0, r9
    584a:	47a8      	blx	r5
    584c:	b2c6      	uxtb	r6, r0
					uint8_t isenabled  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_ISENABLED_offset], GRID_CLASS_BANKENABLED_ISENABLED_length, &error_flag);
    584e:	f108 0007 	add.w	r0, r8, #7
    5852:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5856:	2102      	movs	r1, #2
    5858:	4448      	add	r0, r9
    585a:	47a8      	blx	r5
    585c:	fa5f f880 	uxtb.w	r8, r0
					if (isenabled == 1){
    5860:	f1b8 0f01 	cmp.w	r8, #1
    5864:	d110      	bne.n	5888 <grid_port_process_outbound_ui+0x1c8>
						grid_sys_bank_enable(&grid_sys_state, banknumber);
    5866:	4f57      	ldr	r7, [pc, #348]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5868:	4b5b      	ldr	r3, [pc, #364]	; (59d8 <grid_port_process_outbound_ui+0x318>)
    586a:	4631      	mov	r1, r6
    586c:	4638      	mov	r0, r7
    586e:	4798      	blx	r3
						if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    5870:	4b5a      	ldr	r3, [pc, #360]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5872:	4638      	mov	r0, r7
    5874:	4798      	blx	r3
    5876:	42b0      	cmp	r0, r6
    5878:	d19d      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
							if (grid_sys_state.bank_activebank_valid == 1){
    587a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    587e:	2b01      	cmp	r3, #1
    5880:	d199      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
								grid_sys_set_bank(&grid_sys_state, banknumber);
    5882:	4631      	mov	r1, r6
    5884:	4638      	mov	r0, r7
    5886:	e7c0      	b.n	580a <grid_port_process_outbound_ui+0x14a>
					}else if (isenabled == 0){	
    5888:	f1b8 0f00 	cmp.w	r8, #0
    588c:	d193      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    588e:	484d      	ldr	r0, [pc, #308]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5890:	4b52      	ldr	r3, [pc, #328]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5892:	4798      	blx	r3
    5894:	42b0      	cmp	r0, r6
    5896:	d107      	bne.n	58a8 <grid_port_process_outbound_ui+0x1e8>
							if (grid_sys_state.bank_activebank_valid == 1){
    5898:	484a      	ldr	r0, [pc, #296]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    589a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    589e:	2b01      	cmp	r3, #1
    58a0:	d102      	bne.n	58a8 <grid_port_process_outbound_ui+0x1e8>
								grid_sys_set_bank(&grid_sys_state, 255);
    58a2:	4b4c      	ldr	r3, [pc, #304]	; (59d4 <grid_port_process_outbound_ui+0x314>)
    58a4:	21ff      	movs	r1, #255	; 0xff
    58a6:	4798      	blx	r3
						grid_sys_bank_disable(&grid_sys_state, banknumber);
    58a8:	4b4d      	ldr	r3, [pc, #308]	; (59e0 <grid_port_process_outbound_ui+0x320>)
    58aa:	4846      	ldr	r0, [pc, #280]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    58ac:	4631      	mov	r1, r6
    58ae:	4798      	blx	r3
    58b0:	e75d      	b.n	576e <grid_port_process_outbound_ui+0xae>
				else if (msg_class == GRID_CLASS_BANKCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_global || position_is_me || position_is_local)){
    58b2:	2e32      	cmp	r6, #50	; 0x32
    58b4:	d147      	bne.n	5946 <grid_port_process_outbound_ui+0x286>
    58b6:	2f0e      	cmp	r7, #14
    58b8:	f47f af7d 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    58bc:	9b02      	ldr	r3, [sp, #8]
    58be:	ea4b 0303 	orr.w	r3, fp, r3
    58c2:	4323      	orrs	r3, r4
    58c4:	f43f af77 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_NUM_offset], GRID_CLASS_BANKCOLOR_NUM_length, &error_flag);
    58c8:	f108 0005 	add.w	r0, r8, #5
    58cc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58d0:	2102      	movs	r1, #2
    58d2:	4448      	add	r0, r9
    58d4:	47a8      	blx	r5
    58d6:	b2c3      	uxtb	r3, r0
					uint8_t red		   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_RED_offset], GRID_CLASS_BANKCOLOR_RED_length, &error_flag);
    58d8:	f108 0007 	add.w	r0, r8, #7
    58dc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58e0:	2102      	movs	r1, #2
    58e2:	4448      	add	r0, r9
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_NUM_offset], GRID_CLASS_BANKCOLOR_NUM_length, &error_flag);
    58e4:	ee08 3a10 	vmov	s16, r3
					uint8_t red		   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_RED_offset], GRID_CLASS_BANKCOLOR_RED_length, &error_flag);
    58e8:	47a8      	blx	r5
    58ea:	4606      	mov	r6, r0
					uint8_t green	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_GRE_offset], GRID_CLASS_BANKCOLOR_GRE_length, &error_flag);
    58ec:	f108 0009 	add.w	r0, r8, #9
    58f0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58f4:	2102      	movs	r1, #2
    58f6:	4448      	add	r0, r9
    58f8:	47a8      	blx	r5
    58fa:	4607      	mov	r7, r0
					uint8_t blue	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BLU_offset], GRID_CLASS_BANKCOLOR_BLU_length, &error_flag);
    58fc:	f108 000b 	add.w	r0, r8, #11
    5900:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5904:	2102      	movs	r1, #2
    5906:	4448      	add	r0, r9
					grid_sys_bank_set_color(&grid_sys_state, banknumber, (red<<16) + (green<<8) + (blue<<0) );
    5908:	0436      	lsls	r6, r6, #16
    590a:	023f      	lsls	r7, r7, #8
					uint8_t blue	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BLU_offset], GRID_CLASS_BANKCOLOR_BLU_length, &error_flag);
    590c:	47a8      	blx	r5
					grid_sys_bank_set_color(&grid_sys_state, banknumber, (red<<16) + (green<<8) + (blue<<0) );
    590e:	b2bf      	uxth	r7, r7
    5910:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    5914:	433e      	orrs	r6, r7
    5916:	4f2b      	ldr	r7, [pc, #172]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5918:	4b32      	ldr	r3, [pc, #200]	; (59e4 <grid_port_process_outbound_ui+0x324>)
    591a:	fa56 f280 	uxtab	r2, r6, r0
    591e:	ee18 1a10 	vmov	r1, s16
    5922:	4638      	mov	r0, r7
    5924:	4798      	blx	r3
					if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    5926:	4b2d      	ldr	r3, [pc, #180]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5928:	4638      	mov	r0, r7
    592a:	4798      	blx	r3
    592c:	ee18 3a10 	vmov	r3, s16
    5930:	4298      	cmp	r0, r3
    5932:	f47f af40 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_state.bank_activebank_valid == 1){
    5936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    593a:	2b01      	cmp	r3, #1
    593c:	f47f af3b 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
							grid_sys_set_bank(&grid_sys_state, banknumber);
    5940:	ee18 1a10 	vmov	r1, s16
    5944:	e79e      	b.n	5884 <grid_port_process_outbound_ui+0x1c4>
				else if (msg_class == GRID_CLASS_LEDPHASE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    5946:	2e40      	cmp	r6, #64	; 0x40
    5948:	d154      	bne.n	59f4 <grid_port_process_outbound_ui+0x334>
    594a:	2f0e      	cmp	r7, #14
    594c:	f47f af33 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5950:	ea5b 0304 	orrs.w	r3, fp, r4
    5954:	f43f af2f 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t led_num  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_NUM_offset], GRID_CLASS_LEDPHASE_NUM_length, &error_flag);
    5958:	f108 0005 	add.w	r0, r8, #5
    595c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5960:	2102      	movs	r1, #2
    5962:	4448      	add	r0, r9
    5964:	47a8      	blx	r5
    5966:	b2c6      	uxtb	r6, r0
					uint8_t led_lay = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_LAY_offset], GRID_CLASS_LEDPHASE_LAY_length, &error_flag);
    5968:	f108 0007 	add.w	r0, r8, #7
    596c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5970:	2102      	movs	r1, #2
    5972:	4448      	add	r0, r9
    5974:	47a8      	blx	r5
    5976:	b2c7      	uxtb	r7, r0
					uint16_t led_pha  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_PHA_offset], GRID_CLASS_LEDPHASE_PHA_length, &error_flag);
    5978:	f108 0009 	add.w	r0, r8, #9
    597c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5980:	2102      	movs	r1, #2
    5982:	4448      	add	r0, r9
    5984:	47a8      	blx	r5
					if (led_pha*2 > 255){
    5986:	b283      	uxth	r3, r0
    5988:	005b      	lsls	r3, r3, #1
    598a:	2bff      	cmp	r3, #255	; 0xff
						grid_led_set_phase(&grid_led_state, led_num, led_lay, led_pha*2);
    598c:	bfdc      	itt	le
    598e:	0040      	lslle	r0, r0, #1
    5990:	f000 03fe 	andle.w	r3, r0, #254	; 0xfe
    5994:	f8df 8058 	ldr.w	r8, [pc, #88]	; 59f0 <grid_port_process_outbound_ui+0x330>
    5998:	4813      	ldr	r0, [pc, #76]	; (59e8 <grid_port_process_outbound_ui+0x328>)
						grid_led_set_phase(&grid_led_state, led_num, led_lay, 255);
    599a:	bfc8      	it	gt
    599c:	23ff      	movgt	r3, #255	; 0xff
						grid_led_set_phase(&grid_led_state, led_num, led_lay, led_pha*2);
    599e:	463a      	mov	r2, r7
    59a0:	4631      	mov	r1, r6
    59a2:	47c0      	blx	r8
    59a4:	e707      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
    59a6:	bf00      	nop
    59a8:	00004f05 	.word	0x00004f05
    59ac:	00012519 	.word	0x00012519
    59b0:	00004f5b 	.word	0x00004f5b
    59b4:	00004fc3 	.word	0x00004fc3
    59b8:	00004fed 	.word	0x00004fed
    59bc:	000091f5 	.word	0x000091f5
    59c0:	00009041 	.word	0x00009041
    59c4:	20006f94 	.word	0x20006f94
    59c8:	00008eef 	.word	0x00008eef
    59cc:	0000a1f5 	.word	0x0000a1f5
    59d0:	2001454c 	.word	0x2001454c
    59d4:	00008f43 	.word	0x00008f43
    59d8:	00008ebd 	.word	0x00008ebd
    59dc:	00008eeb 	.word	0x00008eeb
    59e0:	00008ec9 	.word	0x00008ec9
    59e4:	00008ed5 	.word	0x00008ed5
    59e8:	200145c4 	.word	0x200145c4
    59ec:	20006f88 	.word	0x20006f88
    59f0:	00006555 	.word	0x00006555
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    59f4:	2e41      	cmp	r6, #65	; 0x41
    59f6:	d13a      	bne.n	5a6e <grid_port_process_outbound_ui+0x3ae>
    59f8:	2f0e      	cmp	r7, #14
    59fa:	f47f aedc 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    59fe:	ea5b 0304 	orrs.w	r3, fp, r4
    5a02:	f43f aed8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t led_num = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_NUM_offset], GRID_CLASS_LEDCOLOR_NUM_length, &error_flag);
    5a06:	f108 0005 	add.w	r0, r8, #5
    5a0a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a0e:	2102      	movs	r1, #2
    5a10:	4448      	add	r0, r9
    5a12:	47a8      	blx	r5
    5a14:	4607      	mov	r7, r0
					uint8_t led_lay = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_LAY_offset], GRID_CLASS_LEDCOLOR_LAY_length, &error_flag);
    5a16:	f108 0007 	add.w	r0, r8, #7
    5a1a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a1e:	2102      	movs	r1, #2
    5a20:	4448      	add	r0, r9
    5a22:	47a8      	blx	r5
    5a24:	9004      	str	r0, [sp, #16]
					uint8_t led_red	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_RED_offset], GRID_CLASS_LEDCOLOR_RED_length, &error_flag);
    5a26:	f108 0009 	add.w	r0, r8, #9
    5a2a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a2e:	2102      	movs	r1, #2
    5a30:	4448      	add	r0, r9
    5a32:	47a8      	blx	r5
    5a34:	9005      	str	r0, [sp, #20]
					uint8_t led_gre	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_GRE_offset], GRID_CLASS_LEDCOLOR_GRE_length, &error_flag);
    5a36:	f108 000b 	add.w	r0, r8, #11
    5a3a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a3e:	2102      	movs	r1, #2
    5a40:	4448      	add	r0, r9
    5a42:	47a8      	blx	r5
    5a44:	4606      	mov	r6, r0
					uint8_t led_blu	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_BLU_offset], GRID_CLASS_LEDCOLOR_BLU_length, &error_flag);
    5a46:	f108 000d 	add.w	r0, r8, #13
    5a4a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a4e:	2102      	movs	r1, #2
    5a50:	4448      	add	r0, r9
    5a52:	47a8      	blx	r5
					grid_led_set_color(&grid_led_state, led_num, led_lay, led_red, led_gre, led_blu);
    5a54:	9b05      	ldr	r3, [sp, #20]
    5a56:	f89d 2010 	ldrb.w	r2, [sp, #16]
    5a5a:	b2c0      	uxtb	r0, r0
    5a5c:	b2f6      	uxtb	r6, r6
    5a5e:	9001      	str	r0, [sp, #4]
    5a60:	9600      	str	r6, [sp, #0]
    5a62:	48a9      	ldr	r0, [pc, #676]	; (5d08 <grid_port_process_outbound_ui+0x648>)
    5a64:	4ea9      	ldr	r6, [pc, #676]	; (5d0c <grid_port_process_outbound_ui+0x64c>)
    5a66:	b2db      	uxtb	r3, r3
    5a68:	b2f9      	uxtb	r1, r7
    5a6a:	47b0      	blx	r6
    5a6c:	e6a3      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if(msg_class == GRID_CLASS_SERIALNUMBER_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5a6e:	2e11      	cmp	r6, #17
    5a70:	d15d      	bne.n	5b2e <grid_port_process_outbound_ui+0x46e>
    5a72:	2f0f      	cmp	r7, #15
    5a74:	f47f ae9f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5a78:	9b02      	ldr	r3, [sp, #8]
    5a7a:	ea5b 0303 	orrs.w	r3, fp, r3
    5a7e:	f43f ae9a 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint32_t uniqueid[4] = {0};
    5a82:	2210      	movs	r2, #16
    5a84:	2100      	movs	r1, #0
    5a86:	4fa2      	ldr	r7, [pc, #648]	; (5d10 <grid_port_process_outbound_ui+0x650>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5a88:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 5d38 <grid_port_process_outbound_ui+0x678>
					uint32_t uniqueid[4] = {0};
    5a8c:	a809      	add	r0, sp, #36	; 0x24
    5a8e:	47b8      	blx	r7
					grid_sys_get_id(uniqueid);					
    5a90:	4ba0      	ldr	r3, [pc, #640]	; (5d14 <grid_port_process_outbound_ui+0x654>)
    5a92:	a809      	add	r0, sp, #36	; 0x24
    5a94:	4798      	blx	r3
					grid_msg_init(&response);
    5a96:	4ba0      	ldr	r3, [pc, #640]	; (5d18 <grid_port_process_outbound_ui+0x658>)
    5a98:	a88f      	add	r0, sp, #572	; 0x23c
    5a9a:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5a9c:	227f      	movs	r2, #127	; 0x7f
    5a9e:	2300      	movs	r3, #0
    5aa0:	4611      	mov	r1, r2
    5aa2:	a88f      	add	r0, sp, #572	; 0x23c
    5aa4:	47c0      	blx	r8
					uint8_t response_payload[50] = {0};
    5aa6:	f04f 0800 	mov.w	r8, #0
    5aaa:	222e      	movs	r2, #46	; 0x2e
    5aac:	4641      	mov	r1, r8
    5aae:	a80e      	add	r0, sp, #56	; 0x38
    5ab0:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    5ab4:	47b8      	blx	r7
					snprintf(response_payload, 49, GRID_CLASS_SERIALNUMBER_frame);
    5ab6:	2303      	movs	r3, #3
    5ab8:	e9cd 6300 	strd	r6, r3, [sp]
    5abc:	4a97      	ldr	r2, [pc, #604]	; (5d1c <grid_port_process_outbound_ui+0x65c>)
    5abe:	4e98      	ldr	r6, [pc, #608]	; (5d20 <grid_port_process_outbound_ui+0x660>)
    5ac0:	2131      	movs	r1, #49	; 0x31
    5ac2:	2302      	movs	r3, #2
    5ac4:	a80d      	add	r0, sp, #52	; 0x34
    5ac6:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ac8:	4b96      	ldr	r3, [pc, #600]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5aca:	4e97      	ldr	r6, [pc, #604]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5acc:	a80d      	add	r0, sp, #52	; 0x34
    5ace:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5ad0:	270d      	movs	r7, #13
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ad2:	4602      	mov	r2, r0
    5ad4:	4b95      	ldr	r3, [pc, #596]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5ad6:	a90d      	add	r1, sp, #52	; 0x34
    5ad8:	a88f      	add	r0, sp, #572	; 0x23c
    5ada:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5adc:	2301      	movs	r3, #1
    5ade:	2204      	movs	r2, #4
    5ae0:	4641      	mov	r1, r8
    5ae2:	a88f      	add	r0, sp, #572	; 0x23c
    5ae4:	9700      	str	r7, [sp, #0]
    5ae6:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD0_offset, GRID_CLASS_SERIALNUMBER_WORD0_length, uniqueid[0]);
    5ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5aea:	9300      	str	r3, [sp, #0]
    5aec:	2205      	movs	r2, #5
    5aee:	2308      	movs	r3, #8
    5af0:	4641      	mov	r1, r8
    5af2:	a88f      	add	r0, sp, #572	; 0x23c
    5af4:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD1_offset, GRID_CLASS_SERIALNUMBER_WORD1_length, uniqueid[1]);
    5af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5af8:	9300      	str	r3, [sp, #0]
    5afa:	463a      	mov	r2, r7
    5afc:	2308      	movs	r3, #8
    5afe:	4641      	mov	r1, r8
    5b00:	a88f      	add	r0, sp, #572	; 0x23c
    5b02:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD2_offset, GRID_CLASS_SERIALNUMBER_WORD2_length, uniqueid[2]);
    5b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5b06:	9300      	str	r3, [sp, #0]
    5b08:	2215      	movs	r2, #21
    5b0a:	2308      	movs	r3, #8
    5b0c:	4641      	mov	r1, r8
    5b0e:	a88f      	add	r0, sp, #572	; 0x23c
    5b10:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD3_offset, GRID_CLASS_SERIALNUMBER_WORD3_length, uniqueid[3]);
    5b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b14:	9300      	str	r3, [sp, #0]
    5b16:	221d      	movs	r2, #29
    5b18:	2308      	movs	r3, #8
    5b1a:	4641      	mov	r1, r8
    5b1c:	a88f      	add	r0, sp, #572	; 0x23c
    5b1e:	47b0      	blx	r6
					grid_msg_packet_close(&response);
    5b20:	4b83      	ldr	r3, [pc, #524]	; (5d30 <grid_port_process_outbound_ui+0x670>)
    5b22:	a88f      	add	r0, sp, #572	; 0x23c
    5b24:	4798      	blx	r3
					grid_msg_packet_send_everywhere(&response);
    5b26:	4b83      	ldr	r3, [pc, #524]	; (5d34 <grid_port_process_outbound_ui+0x674>)
    5b28:	a88f      	add	r0, sp, #572	; 0x23c
    5b2a:	4798      	blx	r3
				else if(msg_class == GRID_CLASS_UPTIME_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5b2c:	e61f      	b.n	576e <grid_port_process_outbound_ui+0xae>
    5b2e:	2e14      	cmp	r6, #20
    5b30:	d13f      	bne.n	5bb2 <grid_port_process_outbound_ui+0x4f2>
    5b32:	2f0f      	cmp	r7, #15
    5b34:	f47f ae3f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5b38:	9b02      	ldr	r3, [sp, #8]
    5b3a:	ea5b 0303 	orrs.w	r3, fp, r3
    5b3e:	f43f ae3a 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_msg_init(&response);
    5b42:	4b75      	ldr	r3, [pc, #468]	; (5d18 <grid_port_process_outbound_ui+0x658>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b44:	4f7c      	ldr	r7, [pc, #496]	; (5d38 <grid_port_process_outbound_ui+0x678>)
					grid_msg_init(&response);
    5b46:	a88f      	add	r0, sp, #572	; 0x23c
    5b48:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b4a:	227f      	movs	r2, #127	; 0x7f
					uint8_t response_payload[50] = {0};
    5b4c:	f04f 0800 	mov.w	r8, #0
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b50:	4611      	mov	r1, r2
    5b52:	2300      	movs	r3, #0
    5b54:	a88f      	add	r0, sp, #572	; 0x23c
    5b56:	47b8      	blx	r7
					uint8_t response_payload[50] = {0};
    5b58:	4b6d      	ldr	r3, [pc, #436]	; (5d10 <grid_port_process_outbound_ui+0x650>)
    5b5a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    5b5e:	222e      	movs	r2, #46	; 0x2e
    5b60:	4641      	mov	r1, r8
    5b62:	a80e      	add	r0, sp, #56	; 0x38
    5b64:	4798      	blx	r3
					snprintf(response_payload, 49, GRID_CLASS_UPTIME_frame);
    5b66:	2303      	movs	r3, #3
    5b68:	e9cd 6300 	strd	r6, r3, [sp]
    5b6c:	4a73      	ldr	r2, [pc, #460]	; (5d3c <grid_port_process_outbound_ui+0x67c>)
    5b6e:	4e6c      	ldr	r6, [pc, #432]	; (5d20 <grid_port_process_outbound_ui+0x660>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5b70:	4f6d      	ldr	r7, [pc, #436]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					snprintf(response_payload, 49, GRID_CLASS_UPTIME_frame);
    5b72:	2131      	movs	r1, #49	; 0x31
    5b74:	2302      	movs	r3, #2
    5b76:	a80d      	add	r0, sp, #52	; 0x34
    5b78:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5b7a:	4b6a      	ldr	r3, [pc, #424]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_UPTIME_UPTIME_offset, GRID_CLASS_UPTIME_UPTIME_length, grid_sys_state.uptime);
    5b7c:	4e70      	ldr	r6, [pc, #448]	; (5d40 <grid_port_process_outbound_ui+0x680>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5b7e:	a80d      	add	r0, sp, #52	; 0x34
    5b80:	4798      	blx	r3
    5b82:	4b6a      	ldr	r3, [pc, #424]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5b84:	4602      	mov	r2, r0
    5b86:	a90d      	add	r1, sp, #52	; 0x34
    5b88:	a88f      	add	r0, sp, #572	; 0x23c
    5b8a:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5b8c:	230d      	movs	r3, #13
    5b8e:	9300      	str	r3, [sp, #0]
    5b90:	2204      	movs	r2, #4
    5b92:	2301      	movs	r3, #1
    5b94:	4641      	mov	r1, r8
    5b96:	a88f      	add	r0, sp, #572	; 0x23c
    5b98:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_UPTIME_UPTIME_offset, GRID_CLASS_UPTIME_UPTIME_length, grid_sys_state.uptime);
    5b9a:	6833      	ldr	r3, [r6, #0]
    5b9c:	9300      	str	r3, [sp, #0]
    5b9e:	2205      	movs	r2, #5
    5ba0:	2308      	movs	r3, #8
    5ba2:	4641      	mov	r1, r8
    5ba4:	a88f      	add	r0, sp, #572	; 0x23c
    5ba6:	47b8      	blx	r7
					uint32_t milliseconds = grid_sys_state.uptime/RTC1MS%1000;
    5ba8:	6833      	ldr	r3, [r6, #0]
					uint32_t seconds =		grid_sys_state.uptime/RTC1MS/1000%60;
    5baa:	6833      	ldr	r3, [r6, #0]
					uint32_t minutes =		grid_sys_state.uptime/RTC1MS/1000/60%60;
    5bac:	6833      	ldr	r3, [r6, #0]
					uint32_t hours =		grid_sys_state.uptime/RTC1MS/1000/60/60%60;
    5bae:	6833      	ldr	r3, [r6, #0]
    5bb0:	e7b6      	b.n	5b20 <grid_port_process_outbound_ui+0x460>
				else if(msg_class == GRID_CLASS_RESETCAUSE_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5bb2:	2e12      	cmp	r6, #18
    5bb4:	d137      	bne.n	5c26 <grid_port_process_outbound_ui+0x566>
    5bb6:	2f0f      	cmp	r7, #15
    5bb8:	f47f adfd 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5bbc:	9b02      	ldr	r3, [sp, #8]
    5bbe:	ea5b 0303 	orrs.w	r3, fp, r3
    5bc2:	f43f adf8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_msg_init(&response);
    5bc6:	4b54      	ldr	r3, [pc, #336]	; (5d18 <grid_port_process_outbound_ui+0x658>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5bc8:	4f5b      	ldr	r7, [pc, #364]	; (5d38 <grid_port_process_outbound_ui+0x678>)
					grid_msg_init(&response);
    5bca:	a88f      	add	r0, sp, #572	; 0x23c
    5bcc:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5bce:	227f      	movs	r2, #127	; 0x7f
    5bd0:	4611      	mov	r1, r2
    5bd2:	2300      	movs	r3, #0
    5bd4:	a88f      	add	r0, sp, #572	; 0x23c
    5bd6:	47b8      	blx	r7
					uint8_t response_payload[50] = {0};
    5bd8:	2700      	movs	r7, #0
    5bda:	4b4d      	ldr	r3, [pc, #308]	; (5d10 <grid_port_process_outbound_ui+0x650>)
    5bdc:	970d      	str	r7, [sp, #52]	; 0x34
    5bde:	222e      	movs	r2, #46	; 0x2e
    5be0:	4639      	mov	r1, r7
    5be2:	a80e      	add	r0, sp, #56	; 0x38
    5be4:	4798      	blx	r3
					snprintf(response_payload, 49, GRID_CLASS_RESETCAUSE_frame);
    5be6:	2303      	movs	r3, #3
    5be8:	e9cd 6300 	strd	r6, r3, [sp]
    5bec:	4a55      	ldr	r2, [pc, #340]	; (5d44 <grid_port_process_outbound_ui+0x684>)
    5bee:	4e4c      	ldr	r6, [pc, #304]	; (5d20 <grid_port_process_outbound_ui+0x660>)
    5bf0:	2131      	movs	r1, #49	; 0x31
    5bf2:	2302      	movs	r3, #2
    5bf4:	a80d      	add	r0, sp, #52	; 0x34
    5bf6:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5bf8:	4b4a      	ldr	r3, [pc, #296]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5bfa:	4e4b      	ldr	r6, [pc, #300]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5bfc:	a80d      	add	r0, sp, #52	; 0x34
    5bfe:	4798      	blx	r3
    5c00:	4b4a      	ldr	r3, [pc, #296]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5c02:	4602      	mov	r2, r0
    5c04:	a90d      	add	r1, sp, #52	; 0x34
    5c06:	a88f      	add	r0, sp, #572	; 0x23c
    5c08:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5c0a:	230d      	movs	r3, #13
    5c0c:	9300      	str	r3, [sp, #0]
    5c0e:	2204      	movs	r2, #4
    5c10:	2301      	movs	r3, #1
    5c12:	4639      	mov	r1, r7
    5c14:	a88f      	add	r0, sp, #572	; 0x23c
    5c16:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_RESETCAUSE_CAUSE_offset, GRID_CLASS_RESETCAUSE_CAUSE_length,grid_sys_state.reset_cause);
    5c18:	4b49      	ldr	r3, [pc, #292]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c1a:	791b      	ldrb	r3, [r3, #4]
    5c1c:	9300      	str	r3, [sp, #0]
    5c1e:	2205      	movs	r2, #5
    5c20:	2302      	movs	r3, #2
                    grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    5c22:	4639      	mov	r1, r7
    5c24:	e26e      	b.n	6104 <grid_port_process_outbound_ui+0xa44>
				else if(msg_class == GRID_CLASS_RESET_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me)){
    5c26:	2e13      	cmp	r6, #19
    5c28:	d113      	bne.n	5c52 <grid_port_process_outbound_ui+0x592>
    5c2a:	2f0e      	cmp	r7, #14
    5c2c:	f47f adc3 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c30:	f1bb 0f00 	cmp.w	fp, #0
    5c34:	f43f adbf 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5c38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5c3c:	4942      	ldr	r1, [pc, #264]	; (5d48 <grid_port_process_outbound_ui+0x688>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5c3e:	4b43      	ldr	r3, [pc, #268]	; (5d4c <grid_port_process_outbound_ui+0x68c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5c40:	68ca      	ldr	r2, [r1, #12]
    5c42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5c46:	4313      	orrs	r3, r2
    5c48:	60cb      	str	r3, [r1, #12]
    5c4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5c4e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5c50:	e7fd      	b.n	5c4e <grid_port_process_outbound_ui+0x58e>
				else if (msg_class == GRID_CLASS_GLOBALLOAD_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5c52:	2e61      	cmp	r6, #97	; 0x61
    5c54:	d10c      	bne.n	5c70 <grid_port_process_outbound_ui+0x5b0>
    5c56:	2f0e      	cmp	r7, #14
    5c58:	f47f adad 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c5c:	9b02      	ldr	r3, [sp, #8]
    5c5e:	ea5b 0303 	orrs.w	r3, fp, r3
    5c62:	f43f ada8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    5c66:	493a      	ldr	r1, [pc, #232]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5c68:	4835      	ldr	r0, [pc, #212]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c6a:	4b3a      	ldr	r3, [pc, #232]	; (5d54 <grid_port_process_outbound_ui+0x694>)
					grid_ui_nvm_clear_all_configuration(&grid_ui_state, &grid_nvm_state);
    5c6c:	4798      	blx	r3
    5c6e:	e5a2      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_GLOBALSTORE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5c70:	2e60      	cmp	r6, #96	; 0x60
    5c72:	d117      	bne.n	5ca4 <grid_port_process_outbound_ui+0x5e4>
    5c74:	2f0e      	cmp	r7, #14
    5c76:	f47f ad9e 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c7a:	9b02      	ldr	r3, [sp, #8]
    5c7c:	ea5b 0303 	orrs.w	r3, fp, r3
    5c80:	f43f ad99 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_store_configuration(&grid_sys_state, &grid_nvm_state);
    5c84:	4932      	ldr	r1, [pc, #200]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5c86:	482e      	ldr	r0, [pc, #184]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c88:	4b33      	ldr	r3, [pc, #204]	; (5d58 <grid_port_process_outbound_ui+0x698>)
                    grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    5c8a:	4e34      	ldr	r6, [pc, #208]	; (5d5c <grid_port_process_outbound_ui+0x69c>)
					grid_sys_nvm_clear_configuration(&grid_ui_state, &grid_nvm_state);
    5c8c:	4798      	blx	r3
                    grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    5c8e:	2700      	movs	r7, #0
    5c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5c94:	e9cd 7300 	strd	r7, r3, [sp]
    5c98:	4829      	ldr	r0, [pc, #164]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c9a:	463b      	mov	r3, r7
    5c9c:	22ff      	movs	r2, #255	; 0xff
    5c9e:	4639      	mov	r1, r7
    5ca0:	47b0      	blx	r6
    5ca2:	e588      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_GLOBALCLEAR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5ca4:	2e62      	cmp	r6, #98	; 0x62
    5ca6:	d10b      	bne.n	5cc0 <grid_port_process_outbound_ui+0x600>
    5ca8:	2f0e      	cmp	r7, #14
    5caa:	f47f ad84 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cae:	9b02      	ldr	r3, [sp, #8]
    5cb0:	ea5b 0303 	orrs.w	r3, fp, r3
    5cb4:	f43f ad7f 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_clear_configuration(&grid_ui_state, &grid_nvm_state);
    5cb8:	4925      	ldr	r1, [pc, #148]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5cba:	4b29      	ldr	r3, [pc, #164]	; (5d60 <grid_port_process_outbound_ui+0x6a0>)
    5cbc:	4650      	mov	r0, sl
    5cbe:	e7e4      	b.n	5c8a <grid_port_process_outbound_ui+0x5ca>
				else if (msg_class == GRID_CLASS_GLOBALRECALL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5cc0:	2e63      	cmp	r6, #99	; 0x63
    5cc2:	d112      	bne.n	5cea <grid_port_process_outbound_ui+0x62a>
    5cc4:	2f0e      	cmp	r7, #14
    5cc6:	f47f ad76 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cca:	9b02      	ldr	r3, [sp, #8]
    5ccc:	ea5b 0303 	orrs.w	r3, fp, r3
    5cd0:	f43f ad71 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_GLOBALRECALL_BANKNUMBER_offset], GRID_CLASS_GLOBALRECALL_BANKNUMBER_length	, &error_flag);
    5cd4:	f108 0005 	add.w	r0, r8, #5
    5cd8:	2102      	movs	r1, #2
    5cda:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5cde:	4448      	add	r0, r9
    5ce0:	47a8      	blx	r5
					grid_sys_recall_configuration(&grid_sys_state, banknumber);
    5ce2:	4b20      	ldr	r3, [pc, #128]	; (5d64 <grid_port_process_outbound_ui+0x6a4>)
    5ce4:	b2c1      	uxtb	r1, r0
    5ce6:	4816      	ldr	r0, [pc, #88]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5ce8:	e590      	b.n	580c <grid_port_process_outbound_ui+0x14c>
				else if (msg_class == GRID_CLASS_LOCALLOAD_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5cea:	2e71      	cmp	r6, #113	; 0x71
    5cec:	d13e      	bne.n	5d6c <grid_port_process_outbound_ui+0x6ac>
    5cee:	2f0e      	cmp	r7, #14
    5cf0:	f47f ad61 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cf4:	9b02      	ldr	r3, [sp, #8]
    5cf6:	ea5b 0303 	orrs.w	r3, fp, r3
    5cfa:	f43f ad5c 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_load_all_configuration(&grid_ui_state, &grid_nvm_state);						
    5cfe:	4914      	ldr	r1, [pc, #80]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5d00:	4b19      	ldr	r3, [pc, #100]	; (5d68 <grid_port_process_outbound_ui+0x6a8>)
    5d02:	4650      	mov	r0, sl
    5d04:	e7b2      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
    5d06:	bf00      	nop
    5d08:	200145c4 	.word	0x200145c4
    5d0c:	000064e5 	.word	0x000064e5
    5d10:	00012519 	.word	0x00012519
    5d14:	000090a1 	.word	0x000090a1
    5d18:	00007d8d 	.word	0x00007d8d
    5d1c:	00014728 	.word	0x00014728
    5d20:	00012aad 	.word	0x00012aad
    5d24:	00012c81 	.word	0x00012c81
    5d28:	00007d71 	.word	0x00007d71
    5d2c:	00007cfd 	.word	0x00007cfd
    5d30:	00007eb9 	.word	0x00007eb9
    5d34:	00007f8d 	.word	0x00007f8d
    5d38:	00007dc1 	.word	0x00007dc1
    5d3c:	00014752 	.word	0x00014752
    5d40:	20006f94 	.word	0x20006f94
    5d44:	00014764 	.word	0x00014764
    5d48:	e000ed00 	.word	0xe000ed00
    5d4c:	05fa0004 	.word	0x05fa0004
    5d50:	200079a8 	.word	0x200079a8
    5d54:	000088c9 	.word	0x000088c9
    5d58:	00008575 	.word	0x00008575
    5d5c:	00008ff3 	.word	0x00008ff3
    5d60:	000089c1 	.word	0x000089c1
    5d64:	0000876d 	.word	0x0000876d
    5d68:	000092d5 	.word	0x000092d5
				else if (msg_class == GRID_CLASS_LOCALSTORE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5d6c:	2e70      	cmp	r6, #112	; 0x70
    5d6e:	d10b      	bne.n	5d88 <grid_port_process_outbound_ui+0x6c8>
    5d70:	2f0e      	cmp	r7, #14
    5d72:	f47f ad20 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5d76:	9b02      	ldr	r3, [sp, #8]
    5d78:	ea5b 0303 	orrs.w	r3, fp, r3
    5d7c:	f43f ad1b 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_store_all_configuration(&grid_ui_state, &grid_nvm_state);
    5d80:	49b4      	ldr	r1, [pc, #720]	; (6054 <grid_port_process_outbound_ui+0x994>)
    5d82:	4bb5      	ldr	r3, [pc, #724]	; (6058 <grid_port_process_outbound_ui+0x998>)
    5d84:	4650      	mov	r0, sl
    5d86:	e771      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
				else if (msg_class == GRID_CLASS_LOCALCLEAR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5d88:	2e72      	cmp	r6, #114	; 0x72
    5d8a:	d10b      	bne.n	5da4 <grid_port_process_outbound_ui+0x6e4>
    5d8c:	2f0e      	cmp	r7, #14
    5d8e:	f47f ad12 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5d92:	9b02      	ldr	r3, [sp, #8]
    5d94:	ea5b 0303 	orrs.w	r3, fp, r3
    5d98:	f43f ad0d 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_clear_all_configuration(&grid_ui_state, &grid_nvm_state);
    5d9c:	49ad      	ldr	r1, [pc, #692]	; (6054 <grid_port_process_outbound_ui+0x994>)
    5d9e:	4baf      	ldr	r3, [pc, #700]	; (605c <grid_port_process_outbound_ui+0x99c>)
    5da0:	4650      	mov	r0, sl
    5da2:	e763      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
				else if (msg_class == GRID_CLASS_CONFIGURATION_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5da4:	2e80      	cmp	r6, #128	; 0x80
    5da6:	f040 81b0 	bne.w	610a <grid_port_process_outbound_ui+0xa4a>
    5daa:	2f0f      	cmp	r7, #15
    5dac:	d122      	bne.n	5df4 <grid_port_process_outbound_ui+0x734>
    5dae:	9b02      	ldr	r3, [sp, #8]
    5db0:	ea5b 0303 	orrs.w	r3, fp, r3
    5db4:	f43f acff 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    5db8:	f108 0005 	add.w	r0, r8, #5
    5dbc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5dc0:	2102      	movs	r1, #2
    5dc2:	4448      	add	r0, r9
    5dc4:	47a8      	blx	r5
    5dc6:	4606      	mov	r6, r0
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5dc8:	f108 0007 	add.w	r0, r8, #7
    5dcc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5dd0:	2102      	movs	r1, #2
    5dd2:	4448      	add	r0, r9
    5dd4:	47a8      	blx	r5
    5dd6:	4607      	mov	r7, r0
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5dd8:	f108 0009 	add.w	r0, r8, #9
    5ddc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5de0:	2102      	movs	r1, #2
    5de2:	4448      	add	r0, r9
    5de4:	47a8      	blx	r5
					grid_ui_recall_event_configuration(&grid_ui_state, banknumber, elementnumber, eventtype);
    5de6:	b2f1      	uxtb	r1, r6
    5de8:	b2c3      	uxtb	r3, r0
    5dea:	4e9d      	ldr	r6, [pc, #628]	; (6060 <grid_port_process_outbound_ui+0x9a0>)
    5dec:	b2fa      	uxtb	r2, r7
    5dee:	4650      	mov	r0, sl
    5df0:	47b0      	blx	r6
    5df2:	e4e0      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_CONFIGURATION_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_local)){
    5df4:	2f0e      	cmp	r7, #14
    5df6:	f47f acde 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5dfa:	f1bb 0f00 	cmp.w	fp, #0
    5dfe:	f040 80e0 	bne.w	5fc2 <grid_port_process_outbound_ui+0x902>
    5e02:	2c00      	cmp	r4, #0
    5e04:	f000 8150 	beq.w	60a8 <grid_port_process_outbound_ui+0x9e8>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    5e08:	ab2b      	add	r3, sp, #172	; 0xac
    5e0a:	f108 0005 	add.w	r0, r8, #5
    5e0e:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e12:	2102      	movs	r1, #2
    5e14:	4418      	add	r0, r3
    5e16:	47a8      	blx	r5
    5e18:	b2c3      	uxtb	r3, r0
    5e1a:	9305      	str	r3, [sp, #20]
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5e1c:	f108 0007 	add.w	r0, r8, #7
    5e20:	ab2b      	add	r3, sp, #172	; 0xac
    5e22:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e26:	2102      	movs	r1, #2
    5e28:	4418      	add	r0, r3
    5e2a:	47a8      	blx	r5
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e2c:	ab2b      	add	r3, sp, #172	; 0xac
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5e2e:	9007      	str	r0, [sp, #28]
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e30:	f108 0009 	add.w	r0, r8, #9
    5e34:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e38:	2102      	movs	r1, #2
    5e3a:	4418      	add	r0, r3
    5e3c:	47a8      	blx	r5
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e3e:	2700      	movs	r7, #0
    5e40:	4b88      	ldr	r3, [pc, #544]	; (6064 <grid_port_process_outbound_ui+0x9a4>)
    5e42:	970d      	str	r7, [sp, #52]	; 0x34
    5e44:	2274      	movs	r2, #116	; 0x74
    5e46:	4639      	mov	r1, r7
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e48:	fa5f f980 	uxtb.w	r9, r0
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e4c:	a80e      	add	r0, sp, #56	; 0x38
    5e4e:	4798      	blx	r3
					uint32_t actionstring_length = current_stop-current_start-GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset;
    5e50:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5e54:	f108 000b 	add.w	r0, r8, #11
    5e58:	eba3 0308 	sub.w	r3, r3, r8
    5e5c:	aa2b      	add	r2, sp, #172	; 0xac
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e5e:	ae0d      	add	r6, sp, #52	; 0x34
					uint32_t actionstring_length = current_stop-current_start-GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset;
    5e60:	3b0b      	subs	r3, #11
					for(uint32_t j = 0; j<actionstring_length; j++){
    5e62:	eb02 0800 	add.w	r8, r2, r0
    5e66:	4639      	mov	r1, r7
    5e68:	4299      	cmp	r1, r3
    5e6a:	f0c0 80ed 	bcc.w	6048 <grid_port_process_outbound_ui+0x988>
					grid_ui_event_register_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype, actionstring, actionstring_length);
    5e6e:	9905      	ldr	r1, [sp, #20]
    5e70:	f8da 2004 	ldr.w	r2, [sl, #4]
    5e74:	f89d 801c 	ldrb.w	r8, [sp, #28]
    5e78:	4f7b      	ldr	r7, [pc, #492]	; (6068 <grid_port_process_outbound_ui+0x9a8>)
    5e7a:	0109      	lsls	r1, r1, #4
    5e7c:	9104      	str	r1, [sp, #16]
    5e7e:	9905      	ldr	r1, [sp, #20]
    5e80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    5e84:	2664      	movs	r6, #100	; 0x64
    5e86:	68d0      	ldr	r0, [r2, #12]
    5e88:	fb06 f608 	mul.w	r6, r6, r8
    5e8c:	aa0d      	add	r2, sp, #52	; 0x34
    5e8e:	4649      	mov	r1, r9
    5e90:	4430      	add	r0, r6
    5e92:	47b8      	blx	r7
					if (banknumber == grid_sys_state.bank_activebank_number){
    5e94:	4b75      	ldr	r3, [pc, #468]	; (606c <grid_port_process_outbound_ui+0x9ac>)
    5e96:	9a05      	ldr	r2, [sp, #20]
    5e98:	7bdb      	ldrb	r3, [r3, #15]
    5e9a:	4293      	cmp	r3, r2
    5e9c:	d105      	bne.n	5eaa <grid_port_process_outbound_ui+0x7ea>
						grid_ui_smart_trigger(&grid_ui_state, banknumber, elementnumber, eventtype);
    5e9e:	9905      	ldr	r1, [sp, #20]
    5ea0:	4f73      	ldr	r7, [pc, #460]	; (6070 <grid_port_process_outbound_ui+0x9b0>)
    5ea2:	464b      	mov	r3, r9
    5ea4:	4642      	mov	r2, r8
    5ea6:	4650      	mov	r0, sl
    5ea8:	47b8      	blx	r7
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    5eaa:	f8da 3004 	ldr.w	r3, [sl, #4]
    5eae:	9a04      	ldr	r2, [sp, #16]
    5eb0:	4413      	add	r3, r2
    5eb2:	4649      	mov	r1, r9
    5eb4:	68d8      	ldr	r0, [r3, #12]
    5eb6:	4b6f      	ldr	r3, [pc, #444]	; (6074 <grid_port_process_outbound_ui+0x9b4>)
    5eb8:	4430      	add	r0, r6
    5eba:	4798      	blx	r3
					if (event_index != 255){
    5ebc:	28ff      	cmp	r0, #255	; 0xff
    5ebe:	d03d      	beq.n	5f3c <grid_port_process_outbound_ui+0x87c>
						if (position_is_local){
    5ec0:	b304      	cbz	r4, 5f04 <grid_port_process_outbound_ui+0x844>
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_flashempty_flag=0;
    5ec2:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ec6:	9904      	ldr	r1, [sp, #16]
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 0;
    5ec8:	9f04      	ldr	r7, [sp, #16]
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_flashempty_flag=0;
    5eca:	440a      	add	r2, r1
    5ecc:	f44f 7386 	mov.w	r3, #268	; 0x10c
    5ed0:	68d2      	ldr	r2, [r2, #12]
    5ed2:	4432      	add	r2, r6
    5ed4:	4343      	muls	r3, r0
    5ed6:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5ed8:	441a      	add	r2, r3
    5eda:	2100      	movs	r1, #0
    5edc:	f882 1109 	strb.w	r1, [r2, #265]	; 0x109
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 0;
    5ee0:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ee4:	443a      	add	r2, r7
    5ee6:	68d2      	ldr	r2, [r2, #12]
    5ee8:	4432      	add	r2, r6
    5eea:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5eec:	441a      	add	r2, r3
    5eee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 0;
    5ef2:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ef6:	443a      	add	r2, r7
    5ef8:	68d2      	ldr	r2, [r2, #12]
    5efa:	4432      	add	r2, r6
    5efc:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5efe:	4413      	add	r3, r2
    5f00:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
						if (position_is_me){
    5f04:	f1bb 0f00 	cmp.w	fp, #0
    5f08:	d018      	beq.n	5f3c <grid_port_process_outbound_ui+0x87c>
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    5f0a:	f44f 7286 	mov.w	r2, #268	; 0x10c
    5f0e:	4350      	muls	r0, r2
    5f10:	f8da 3004 	ldr.w	r3, [sl, #4]
    5f14:	9a04      	ldr	r2, [sp, #16]
    5f16:	4413      	add	r3, r2
    5f18:	2201      	movs	r2, #1
    5f1a:	68db      	ldr	r3, [r3, #12]
    5f1c:	4433      	add	r3, r6
    5f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5f20:	4403      	add	r3, r0
    5f22:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 0;
    5f26:	f8da 3004 	ldr.w	r3, [sl, #4]
    5f2a:	9a04      	ldr	r2, [sp, #16]
    5f2c:	441a      	add	r2, r3
    5f2e:	68d3      	ldr	r3, [r2, #12]
    5f30:	441e      	add	r6, r3
    5f32:	6e33      	ldr	r3, [r6, #96]	; 0x60
    5f34:	4418      	add	r0, r3
    5f36:	2300      	movs	r3, #0
    5f38:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
					grid_msg_init(&response);
    5f3c:	4b4e      	ldr	r3, [pc, #312]	; (6078 <grid_port_process_outbound_ui+0x9b8>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5f3e:	4e4f      	ldr	r6, [pc, #316]	; (607c <grid_port_process_outbound_ui+0x9bc>)
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f40:	4f4f      	ldr	r7, [pc, #316]	; (6080 <grid_port_process_outbound_ui+0x9c0>)
					grid_msg_init(&response);
    5f42:	a88f      	add	r0, sp, #572	; 0x23c
    5f44:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5f46:	227f      	movs	r2, #127	; 0x7f
    5f48:	4611      	mov	r1, r2
    5f4a:	2300      	movs	r3, #0
    5f4c:	a88f      	add	r0, sp, #572	; 0x23c
    5f4e:	47b0      	blx	r6
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f50:	2303      	movs	r3, #3
					uint8_t response_payload[10] = {0};
    5f52:	2600      	movs	r6, #0
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f54:	494b      	ldr	r1, [pc, #300]	; (6084 <grid_port_process_outbound_ui+0x9c4>)
    5f56:	9300      	str	r3, [sp, #0]
    5f58:	2202      	movs	r2, #2
    5f5a:	2380      	movs	r3, #128	; 0x80
    5f5c:	a809      	add	r0, sp, #36	; 0x24
					uint8_t response_payload[10] = {0};
    5f5e:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
    5f62:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f66:	47b8      	blx	r7
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5f68:	4b47      	ldr	r3, [pc, #284]	; (6088 <grid_port_process_outbound_ui+0x9c8>)
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    5f6a:	4f48      	ldr	r7, [pc, #288]	; (608c <grid_port_process_outbound_ui+0x9cc>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5f6c:	a809      	add	r0, sp, #36	; 0x24
    5f6e:	4798      	blx	r3
    5f70:	4b47      	ldr	r3, [pc, #284]	; (6090 <grid_port_process_outbound_ui+0x9d0>)
    5f72:	4602      	mov	r2, r0
    5f74:	a909      	add	r1, sp, #36	; 0x24
    5f76:	a88f      	add	r0, sp, #572	; 0x23c
    5f78:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    5f7a:	9b05      	ldr	r3, [sp, #20]
    5f7c:	9300      	str	r3, [sp, #0]
    5f7e:	2205      	movs	r2, #5
    5f80:	2302      	movs	r3, #2
    5f82:	4631      	mov	r1, r6
    5f84:	a88f      	add	r0, sp, #572	; 0x23c
    5f86:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, elementnumber);
    5f88:	2302      	movs	r3, #2
    5f8a:	2207      	movs	r2, #7
    5f8c:	4631      	mov	r1, r6
    5f8e:	a88f      	add	r0, sp, #572	; 0x23c
    5f90:	f8cd 8000 	str.w	r8, [sp]
    5f94:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eventtype);
    5f96:	2302      	movs	r3, #2
    5f98:	2209      	movs	r2, #9
    5f9a:	4631      	mov	r1, r6
    5f9c:	a88f      	add	r0, sp, #572	; 0x23c
    5f9e:	f8cd 9000 	str.w	r9, [sp]
    5fa2:	47b8      	blx	r7
						grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    5fa4:	230a      	movs	r3, #10
    5fa6:	9300      	str	r3, [sp, #0]
    5fa8:	2204      	movs	r2, #4
    5faa:	2301      	movs	r3, #1
    5fac:	4631      	mov	r1, r6
    5fae:	a88f      	add	r0, sp, #572	; 0x23c
    5fb0:	47b8      	blx	r7
                        grid_msg_packet_close(&response);
    5fb2:	4b38      	ldr	r3, [pc, #224]	; (6094 <grid_port_process_outbound_ui+0x9d4>)
    5fb4:	a88f      	add	r0, sp, #572	; 0x23c
    5fb6:	4798      	blx	r3
                        grid_msg_packet_send_everywhere(&response);
    5fb8:	4b37      	ldr	r3, [pc, #220]	; (6098 <grid_port_process_outbound_ui+0x9d8>)
    5fba:	a88f      	add	r0, sp, #572	; 0x23c
    5fbc:	4798      	blx	r3
    5fbe:	f7ff bbfa 	b.w	57b6 <grid_port_process_outbound_ui+0xf6>
                    if (!position_is_local){
    5fc2:	2c00      	cmp	r4, #0
    5fc4:	f47f af20 	bne.w	5e08 <grid_port_process_outbound_ui+0x748>
                        grid_keyboard_state.isenabled = 0;             
    5fc8:	4e34      	ldr	r6, [pc, #208]	; (609c <grid_port_process_outbound_ui+0x9dc>)
                        grid_msg_init(&response);
    5fca:	4b2b      	ldr	r3, [pc, #172]	; (6078 <grid_port_process_outbound_ui+0x9b8>)
                        grid_keyboard_state.isenabled = 0;             
    5fcc:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
                        grid_msg_init(&response);
    5fd0:	a88f      	add	r0, sp, #572	; 0x23c
    5fd2:	4798      	blx	r3
                        grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5fd4:	227f      	movs	r2, #127	; 0x7f
    5fd6:	4623      	mov	r3, r4
    5fd8:	4611      	mov	r1, r2
    5fda:	a88f      	add	r0, sp, #572	; 0x23c
    5fdc:	4f27      	ldr	r7, [pc, #156]	; (607c <grid_port_process_outbound_ui+0x9bc>)
    5fde:	47b8      	blx	r7
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5fe0:	2303      	movs	r3, #3
    5fe2:	492f      	ldr	r1, [pc, #188]	; (60a0 <grid_port_process_outbound_ui+0x9e0>)
    5fe4:	9300      	str	r3, [sp, #0]
    5fe6:	2202      	movs	r2, #2
    5fe8:	4f25      	ldr	r7, [pc, #148]	; (6080 <grid_port_process_outbound_ui+0x9c0>)
                        uint8_t response_payload[10] = {0};
    5fea:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5fee:	2392      	movs	r3, #146	; 0x92
    5ff0:	a80d      	add	r0, sp, #52	; 0x34
                        uint8_t response_payload[10] = {0};
    5ff2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5ff6:	47b8      	blx	r7
                        grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ff8:	4b23      	ldr	r3, [pc, #140]	; (6088 <grid_port_process_outbound_ui+0x9c8>)
    5ffa:	a80d      	add	r0, sp, #52	; 0x34
    5ffc:	4798      	blx	r3
    5ffe:	a90d      	add	r1, sp, #52	; 0x34
    6000:	4602      	mov	r2, r0
    6002:	4b23      	ldr	r3, [pc, #140]	; (6090 <grid_port_process_outbound_ui+0x9d0>)
    6004:	a88f      	add	r0, sp, #572	; 0x23c
    6006:	4798      	blx	r3
                        grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6008:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
    600c:	9300      	str	r3, [sp, #0]
    600e:	4e1f      	ldr	r6, [pc, #124]	; (608c <grid_port_process_outbound_ui+0x9cc>)
    6010:	4621      	mov	r1, r4
    6012:	a88f      	add	r0, sp, #572	; 0x23c
    6014:	2302      	movs	r3, #2
    6016:	2205      	movs	r2, #5
    6018:	47b0      	blx	r6
                        grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    601a:	230d      	movs	r3, #13
    601c:	4621      	mov	r1, r4
    601e:	2204      	movs	r2, #4
    6020:	9300      	str	r3, [sp, #0]
    6022:	a88f      	add	r0, sp, #572	; 0x23c
    6024:	2301      	movs	r3, #1
    6026:	47b0      	blx	r6
                        grid_msg_packet_close(&response);
    6028:	4b1a      	ldr	r3, [pc, #104]	; (6094 <grid_port_process_outbound_ui+0x9d4>)
                        grid_sys_alert_set_alert(&grid_sys_state, 100, 100, 100, 0, 250);
    602a:	4e1e      	ldr	r6, [pc, #120]	; (60a4 <grid_port_process_outbound_ui+0x9e4>)
                        grid_msg_packet_close(&response);
    602c:	a88f      	add	r0, sp, #572	; 0x23c
    602e:	4798      	blx	r3
                        grid_msg_packet_send_everywhere(&response);
    6030:	4b19      	ldr	r3, [pc, #100]	; (6098 <grid_port_process_outbound_ui+0x9d8>)
    6032:	a88f      	add	r0, sp, #572	; 0x23c
    6034:	4798      	blx	r3
                        grid_sys_alert_set_alert(&grid_sys_state, 100, 100, 100, 0, 250);
    6036:	23fa      	movs	r3, #250	; 0xfa
    6038:	e9cd 4300 	strd	r4, r3, [sp]
    603c:	2364      	movs	r3, #100	; 0x64
    603e:	480b      	ldr	r0, [pc, #44]	; (606c <grid_port_process_outbound_ui+0x9ac>)
    6040:	461a      	mov	r2, r3
    6042:	4619      	mov	r1, r3
    6044:	47b0      	blx	r6
    6046:	e6df      	b.n	5e08 <grid_port_process_outbound_ui+0x748>
						actionstring[j] = message[current_start+GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset + j];
    6048:	f818 2b01 	ldrb.w	r2, [r8], #1
    604c:	558a      	strb	r2, [r1, r6]
					for(uint32_t j = 0; j<actionstring_length; j++){
    604e:	3101      	adds	r1, #1
    6050:	e70a      	b.n	5e68 <grid_port_process_outbound_ui+0x7a8>
    6052:	bf00      	nop
    6054:	200079a8 	.word	0x200079a8
    6058:	000092c5 	.word	0x000092c5
    605c:	000092e5 	.word	0x000092e5
    6060:	000092f5 	.word	0x000092f5
    6064:	00012519 	.word	0x00012519
    6068:	00009f31 	.word	0x00009f31
    606c:	20006f94 	.word	0x20006f94
    6070:	0000a1f5 	.word	0x0000a1f5
    6074:	0000979d 	.word	0x0000979d
    6078:	00007d8d 	.word	0x00007d8d
    607c:	00007dc1 	.word	0x00007dc1
    6080:	00012b75 	.word	0x00012b75
    6084:	00014770 	.word	0x00014770
    6088:	00012c81 	.word	0x00012c81
    608c:	00007d71 	.word	0x00007d71
    6090:	00007cfd 	.word	0x00007cfd
    6094:	00007eb9 	.word	0x00007eb9
    6098:	00007f8d 	.word	0x00007f8d
    609c:	200081f0 	.word	0x200081f0
    60a0:	00014764 	.word	0x00014764
    60a4:	00008ff3 	.word	0x00008ff3
                        grid_keyboard_state.isenabled = 0;             
    60a8:	4e8b      	ldr	r6, [pc, #556]	; (62d8 <grid_port_process_outbound_ui+0xc18>)
                        grid_msg_init(&response);
    60aa:	4b8c      	ldr	r3, [pc, #560]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
                        grid_keyboard_state.isenabled = 0;             
    60ac:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
                        grid_msg_init(&response);
    60b0:	a88f      	add	r0, sp, #572	; 0x23c
    60b2:	4798      	blx	r3
                        grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    60b4:	227f      	movs	r2, #127	; 0x7f
    60b6:	4611      	mov	r1, r2
    60b8:	4f89      	ldr	r7, [pc, #548]	; (62e0 <grid_port_process_outbound_ui+0xc20>)
    60ba:	4623      	mov	r3, r4
    60bc:	a88f      	add	r0, sp, #572	; 0x23c
    60be:	47b8      	blx	r7
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60c0:	2303      	movs	r3, #3
    60c2:	4988      	ldr	r1, [pc, #544]	; (62e4 <grid_port_process_outbound_ui+0xc24>)
    60c4:	9300      	str	r3, [sp, #0]
    60c6:	2202      	movs	r2, #2
    60c8:	2392      	movs	r3, #146	; 0x92
    60ca:	4f87      	ldr	r7, [pc, #540]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
                        uint8_t response_payload[10] = {0};
    60cc:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60d0:	a80d      	add	r0, sp, #52	; 0x34
                        uint8_t response_payload[10] = {0};
    60d2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60d6:	47b8      	blx	r7
                        grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    60d8:	4b84      	ldr	r3, [pc, #528]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
    60da:	a80d      	add	r0, sp, #52	; 0x34
    60dc:	4798      	blx	r3
    60de:	4b84      	ldr	r3, [pc, #528]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    60e0:	4602      	mov	r2, r0
    60e2:	a90d      	add	r1, sp, #52	; 0x34
    60e4:	a88f      	add	r0, sp, #572	; 0x23c
    60e6:	4798      	blx	r3
                        grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    60e8:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
    60ec:	9300      	str	r3, [sp, #0]
    60ee:	2205      	movs	r2, #5
    60f0:	2302      	movs	r3, #2
    60f2:	4621      	mov	r1, r4
    60f4:	4e7f      	ldr	r6, [pc, #508]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
    60f6:	a88f      	add	r0, sp, #572	; 0x23c
    60f8:	47b0      	blx	r6
                        grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    60fa:	230d      	movs	r3, #13
    60fc:	9300      	str	r3, [sp, #0]
    60fe:	2204      	movs	r2, #4
    6100:	2301      	movs	r3, #1
    6102:	4621      	mov	r1, r4
    6104:	a88f      	add	r0, sp, #572	; 0x23c
    6106:	47b0      	blx	r6
    6108:	e753      	b.n	5fb2 <grid_port_process_outbound_ui+0x8f2>
                else if (msg_class == GRID_CLASS_HIDKEYSTATUS_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    610a:	2e92      	cmp	r6, #146	; 0x92
    610c:	d13e      	bne.n	618c <grid_port_process_outbound_ui+0xacc>
    610e:	2f0e      	cmp	r7, #14
    6110:	f47f ab51 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6114:	9b02      	ldr	r3, [sp, #8]
    6116:	ea5b 0303 	orrs.w	r3, fp, r3
    611a:	f43f ab4c 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
                    uint8_t isenabled =	grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset]		, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length	, &error_flag);
    611e:	f108 0005 	add.w	r0, r8, #5
    6122:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    6126:	2102      	movs	r1, #2
    6128:	4448      	add	r0, r9
    612a:	47a8      	blx	r5
                    grid_keyboard_state.isenabled = isenabled;
    612c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 62d8 <grid_port_process_outbound_ui+0xc18>
                    grid_msg_init(&response);
    6130:	4b6a      	ldr	r3, [pc, #424]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
                    uint8_t isenabled =	grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset]		, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length	, &error_flag);
    6132:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
                    grid_msg_init(&response);
    6136:	a88f      	add	r0, sp, #572	; 0x23c
    6138:	4798      	blx	r3
                    grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    613a:	227f      	movs	r2, #127	; 0x7f
    613c:	4611      	mov	r1, r2
    613e:	4f68      	ldr	r7, [pc, #416]	; (62e0 <grid_port_process_outbound_ui+0xc20>)
    6140:	2300      	movs	r3, #0
    6142:	a88f      	add	r0, sp, #572	; 0x23c
    6144:	47b8      	blx	r7
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    6146:	2303      	movs	r3, #3
    6148:	4966      	ldr	r1, [pc, #408]	; (62e4 <grid_port_process_outbound_ui+0xc24>)
    614a:	9300      	str	r3, [sp, #0]
                    uint8_t response_payload[10] = {0};
    614c:	2700      	movs	r7, #0
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    614e:	4633      	mov	r3, r6
    6150:	2202      	movs	r2, #2
    6152:	4e65      	ldr	r6, [pc, #404]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
                    uint8_t response_payload[10] = {0};
    6154:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    6158:	a80d      	add	r0, sp, #52	; 0x34
                    uint8_t response_payload[10] = {0};
    615a:	e9cd 770d 	strd	r7, r7, [sp, #52]	; 0x34
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    615e:	47b0      	blx	r6
                    grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    6160:	4b62      	ldr	r3, [pc, #392]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
                    grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6162:	4e64      	ldr	r6, [pc, #400]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
                    grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    6164:	a80d      	add	r0, sp, #52	; 0x34
    6166:	4798      	blx	r3
    6168:	4b61      	ldr	r3, [pc, #388]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    616a:	4602      	mov	r2, r0
    616c:	a90d      	add	r1, sp, #52	; 0x34
    616e:	a88f      	add	r0, sp, #572	; 0x23c
    6170:	4798      	blx	r3
                    grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6172:	f898 3045 	ldrb.w	r3, [r8, #69]	; 0x45
    6176:	9300      	str	r3, [sp, #0]
    6178:	2205      	movs	r2, #5
    617a:	2302      	movs	r3, #2
    617c:	4639      	mov	r1, r7
    617e:	a88f      	add	r0, sp, #572	; 0x23c
    6180:	47b0      	blx	r6
                    grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    6182:	230a      	movs	r3, #10
    6184:	9300      	str	r3, [sp, #0]
    6186:	2204      	movs	r2, #4
    6188:	2301      	movs	r3, #1
    618a:	e54a      	b.n	5c22 <grid_port_process_outbound_ui+0x562>
				else if (msg_class == GRID_CLASS_CONFIGDEFAULT_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_local)){
    618c:	2e81      	cmp	r6, #129	; 0x81
    618e:	f47f ab12 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6192:	2f0e      	cmp	r7, #14
    6194:	f47f ab0f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6198:	ea5b 0304 	orrs.w	r3, fp, r4
    619c:	f43f ab0b 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    61a0:	f108 0005 	add.w	r0, r8, #5
    61a4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61a8:	2102      	movs	r1, #2
    61aa:	4448      	add	r0, r9
    61ac:	47a8      	blx	r5
    61ae:	b2c7      	uxtb	r7, r0
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    61b0:	f108 0007 	add.w	r0, r8, #7
    61b4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61b8:	2102      	movs	r1, #2
    61ba:	4448      	add	r0, r9
    61bc:	47a8      	blx	r5
    61be:	4606      	mov	r6, r0
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    61c0:	f108 0009 	add.w	r0, r8, #9
    61c4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61c8:	2102      	movs	r1, #2
    61ca:	4448      	add	r0, r9
    61cc:	47a8      	blx	r5
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    61ce:	f8da 3004 	ldr.w	r3, [sl, #4]
    61d2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    61d6:	b2f2      	uxtb	r2, r6
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    61d8:	fa5f f880 	uxtb.w	r8, r0
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    61dc:	f04f 0964 	mov.w	r9, #100	; 0x64
    61e0:	68d8      	ldr	r0, [r3, #12]
    61e2:	4b45      	ldr	r3, [pc, #276]	; (62f8 <grid_port_process_outbound_ui+0xc38>)
    61e4:	9204      	str	r2, [sp, #16]
    61e6:	fb09 f902 	mul.w	r9, r9, r2
    61ea:	4641      	mov	r1, r8
    61ec:	4448      	add	r0, r9
    61ee:	4798      	blx	r3
					if (banknumber == grid_sys_state.bank_activebank_number){
    61f0:	4b42      	ldr	r3, [pc, #264]	; (62fc <grid_port_process_outbound_ui+0xc3c>)
    61f2:	7bdb      	ldrb	r3, [r3, #15]
    61f4:	42bb      	cmp	r3, r7
    61f6:	d105      	bne.n	6204 <grid_port_process_outbound_ui+0xb44>
						grid_ui_smart_trigger(&grid_ui_state, banknumber, elementnumber, eventtype);
    61f8:	9a04      	ldr	r2, [sp, #16]
    61fa:	4e41      	ldr	r6, [pc, #260]	; (6300 <grid_port_process_outbound_ui+0xc40>)
    61fc:	4643      	mov	r3, r8
    61fe:	4639      	mov	r1, r7
    6200:	4650      	mov	r0, sl
    6202:	47b0      	blx	r6
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    6204:	f8da 3004 	ldr.w	r3, [sl, #4]
    6208:	013a      	lsls	r2, r7, #4
    620a:	4413      	add	r3, r2
    620c:	4641      	mov	r1, r8
    620e:	68d8      	ldr	r0, [r3, #12]
    6210:	4b3c      	ldr	r3, [pc, #240]	; (6304 <grid_port_process_outbound_ui+0xc44>)
    6212:	4448      	add	r0, r9
    6214:	4798      	blx	r3
					if (event_index != 255){
    6216:	28ff      	cmp	r0, #255	; 0xff
    6218:	d018      	beq.n	624c <grid_port_process_outbound_ui+0xb8c>
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    621a:	f8da 3004 	ldr.w	r3, [sl, #4]
    621e:	f44f 7286 	mov.w	r2, #268	; 0x10c
    6222:	4350      	muls	r0, r2
    6224:	013a      	lsls	r2, r7, #4
    6226:	4413      	add	r3, r2
    6228:	2201      	movs	r2, #1
    622a:	68db      	ldr	r3, [r3, #12]
    622c:	444b      	add	r3, r9
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 1;
    622e:	0139      	lsls	r1, r7, #4
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    6230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6232:	4403      	add	r3, r0
    6234:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 1;
    6238:	f8da 3004 	ldr.w	r3, [sl, #4]
    623c:	440b      	add	r3, r1
    623e:	68db      	ldr	r3, [r3, #12]
    6240:	4499      	add	r9, r3
    6242:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
    6246:	4418      	add	r0, r3
    6248:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
					grid_msg_init(&response);
    624c:	4b23      	ldr	r3, [pc, #140]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    624e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 62e0 <grid_port_process_outbound_ui+0xc20>
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6252:	4e25      	ldr	r6, [pc, #148]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
					grid_msg_init(&response);
    6254:	a88f      	add	r0, sp, #572	; 0x23c
    6256:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    6258:	227f      	movs	r2, #127	; 0x7f
    625a:	4611      	mov	r1, r2
    625c:	2300      	movs	r3, #0
    625e:	a88f      	add	r0, sp, #572	; 0x23c
    6260:	47c8      	blx	r9
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6262:	2303      	movs	r3, #3
					uint8_t response_payload[10] = {0};
    6264:	f04f 0900 	mov.w	r9, #0
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6268:	4927      	ldr	r1, [pc, #156]	; (6308 <grid_port_process_outbound_ui+0xc48>)
    626a:	9300      	str	r3, [sp, #0]
    626c:	2202      	movs	r2, #2
    626e:	2380      	movs	r3, #128	; 0x80
    6270:	a80d      	add	r0, sp, #52	; 0x34
					uint8_t response_payload[10] = {0};
    6272:	e9cd 990d 	strd	r9, r9, [sp, #52]	; 0x34
    6276:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    627a:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    627c:	4b1b      	ldr	r3, [pc, #108]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
    627e:	a80d      	add	r0, sp, #52	; 0x34
    6280:	4798      	blx	r3
    6282:	4b1b      	ldr	r3, [pc, #108]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    6284:	4602      	mov	r2, r0
    6286:	a90d      	add	r1, sp, #52	; 0x34
    6288:	a88f      	add	r0, sp, #572	; 0x23c
    628a:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    628c:	9700      	str	r7, [sp, #0]
    628e:	2302      	movs	r3, #2
    6290:	4f18      	ldr	r7, [pc, #96]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
    6292:	2205      	movs	r2, #5
    6294:	4649      	mov	r1, r9
    6296:	a88f      	add	r0, sp, #572	; 0x23c
    6298:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, elementnumber);
    629a:	9b04      	ldr	r3, [sp, #16]
    629c:	9300      	str	r3, [sp, #0]
    629e:	2207      	movs	r2, #7
    62a0:	2302      	movs	r3, #2
    62a2:	4649      	mov	r1, r9
    62a4:	a88f      	add	r0, sp, #572	; 0x23c
    62a6:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eventtype);
    62a8:	f8cd 8000 	str.w	r8, [sp]
    62ac:	2302      	movs	r3, #2
    62ae:	2209      	movs	r2, #9
    62b0:	4649      	mov	r1, r9
    62b2:	a88f      	add	r0, sp, #572	; 0x23c
    62b4:	47b8      	blx	r7
						grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    62b6:	230a      	movs	r3, #10
    62b8:	2204      	movs	r2, #4
    62ba:	4649      	mov	r1, r9
    62bc:	9300      	str	r3, [sp, #0]
    62be:	a88f      	add	r0, sp, #572	; 0x23c
    62c0:	2301      	movs	r3, #1
    62c2:	47b8      	blx	r7
					grid_msg_packet_close(&response);
    62c4:	4b11      	ldr	r3, [pc, #68]	; (630c <grid_port_process_outbound_ui+0xc4c>)
    62c6:	a88f      	add	r0, sp, #572	; 0x23c
    62c8:	4798      	blx	r3
					grid_msg_packet_send_everywhere(&response);
    62ca:	4b11      	ldr	r3, [pc, #68]	; (6310 <grid_port_process_outbound_ui+0xc50>)
    62cc:	a88f      	add	r0, sp, #572	; 0x23c
    62ce:	4798      	blx	r3
				current_start = 0;
    62d0:	46c8      	mov	r8, r9
    62d2:	f7ff ba4c 	b.w	576e <grid_port_process_outbound_ui+0xae>
    62d6:	bf00      	nop
    62d8:	200081f0 	.word	0x200081f0
    62dc:	00007d8d 	.word	0x00007d8d
    62e0:	00007dc1 	.word	0x00007dc1
    62e4:	00014764 	.word	0x00014764
    62e8:	00012b75 	.word	0x00012b75
    62ec:	00012c81 	.word	0x00012c81
    62f0:	00007cfd 	.word	0x00007cfd
    62f4:	00007d71 	.word	0x00007d71
    62f8:	0000a04d 	.word	0x0000a04d
    62fc:	20006f94 	.word	0x20006f94
    6300:	0000a1f5 	.word	0x0000a1f5
    6304:	0000979d 	.word	0x0000979d
    6308:	00014770 	.word	0x00014770
    630c:	00007eb9 	.word	0x00007eb9
    6310:	00007f8d 	.word	0x00007f8d

00006314 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    6314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    6318:	8987      	ldrh	r7, [r0, #12]
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    631a:	4605      	mov	r5, r0
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    631c:	bb1f      	cbnz	r7, 6366 <grid_port_process_outbound_usart+0x52>
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    631e:	f500 561c 	add.w	r6, r0, #9984	; 0x2700
    6322:	363c      	adds	r6, #60	; 0x3c
    6324:	4b11      	ldr	r3, [pc, #68]	; (636c <grid_port_process_outbound_usart+0x58>)
    6326:	4630      	mov	r0, r6
    6328:	4798      	blx	r3
		
		if (!packet_size){
    632a:	4604      	mov	r4, r0
    632c:	b1a0      	cbz	r0, 6358 <grid_port_process_outbound_usart+0x44>
			// NO PACKET IN RX BUFFER
			return 0;
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    632e:	4b10      	ldr	r3, [pc, #64]	; (6370 <grid_port_process_outbound_usart+0x5c>)
			
			por->tx_double_buffer_status = packet_size;
			
			for (uint16_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6330:	f8df a048 	ldr.w	sl, [pc, #72]	; 637c <grid_port_process_outbound_usart+0x68>
			grid_buffer_read_init(&por->tx_buffer);
    6334:	4630      	mov	r0, r6
    6336:	f105 082c 	add.w	r8, r5, #44	; 0x2c
    633a:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    633c:	46c1      	mov	r9, r8
    633e:	81ac      	strh	r4, [r5, #12]
			for (uint16_t i = 0; i<packet_size; i++){
    6340:	b2bb      	uxth	r3, r7
    6342:	429c      	cmp	r4, r3
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6344:	4630      	mov	r0, r6
			for (uint16_t i = 0; i<packet_size; i++){
    6346:	d809      	bhi.n	635c <grid_port_process_outbound_usart+0x48>
				por->tx_double_buffer[i] = character;
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    6348:	4b0a      	ldr	r3, [pc, #40]	; (6374 <grid_port_process_outbound_usart+0x60>)
    634a:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    634c:	89aa      	ldrh	r2, [r5, #12]
    634e:	6868      	ldr	r0, [r5, #4]
    6350:	4b09      	ldr	r3, [pc, #36]	; (6378 <grid_port_process_outbound_usart+0x64>)
    6352:	4649      	mov	r1, r9
    6354:	4798      	blx	r3
			
			return 1;
    6356:	2001      	movs	r0, #1
		}
		
	}
	
	return 0;
}
    6358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    635c:	47d0      	blx	sl
				por->tx_double_buffer[i] = character;
    635e:	3701      	adds	r7, #1
    6360:	f808 0b01 	strb.w	r0, [r8], #1
			for (uint16_t i = 0; i<packet_size; i++){
    6364:	e7ec      	b.n	6340 <grid_port_process_outbound_usart+0x2c>
	return 0;
    6366:	2000      	movs	r0, #0
    6368:	e7f6      	b.n	6358 <grid_port_process_outbound_usart+0x44>
    636a:	bf00      	nop
    636c:	00004f05 	.word	0x00004f05
    6370:	00004f5b 	.word	0x00004f5b
    6374:	00004fed 	.word	0x00004fed
    6378:	0000abb9 	.word	0x0000abb9
    637c:	00004fc3 	.word	0x00004fc3

00006380 <grid_d51_init>:
	
}



void grid_d51_init(){
    6380:	b570      	push	{r4, r5, r6, lr}
	
	uint32_t hwid = grid_sys_get_hwcfg();
    6382:	4b09      	ldr	r3, [pc, #36]	; (63a8 <grid_d51_init+0x28>)
	
	#ifdef NDEBUG		
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "USER ROW CHECK!");
	grid_d51_verify_user_row();
	#else
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    6384:	4d09      	ldr	r5, [pc, #36]	; (63ac <grid_d51_init+0x2c>)
	printf("{\"type\":\"HWCFG\", \"data\": \"%d\"}\r\n", hwid);
    6386:	4c0a      	ldr	r4, [pc, #40]	; (63b0 <grid_d51_init+0x30>)
	uint32_t hwid = grid_sys_get_hwcfg();
    6388:	4798      	blx	r3
    638a:	4601      	mov	r1, r0
	printf("{\"type\":\"HWCFG\", \"data\": \"%d\"}\r\n", hwid);
    638c:	4809      	ldr	r0, [pc, #36]	; (63b4 <grid_d51_init+0x34>)
    638e:	47a0      	blx	r4
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    6390:	4909      	ldr	r1, [pc, #36]	; (63b8 <grid_d51_init+0x38>)
    6392:	4628      	mov	r0, r5
    6394:	47a0      	blx	r4
	{
	}
	
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    6396:	4909      	ldr	r1, [pc, #36]	; (63bc <grid_d51_init+0x3c>)
    6398:	4628      	mov	r0, r5
    639a:	47a0      	blx	r4
	while (1)
	{
	}
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    639c:	4628      	mov	r0, r5
    639e:	4623      	mov	r3, r4
    63a0:	4907      	ldr	r1, [pc, #28]	; (63c0 <grid_d51_init+0x40>)
	#endif
		
}
    63a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    63a6:	4718      	bx	r3
    63a8:	000090cd 	.word	0x000090cd
    63ac:	0001463b 	.word	0x0001463b
    63b0:	0001275d 	.word	0x0001275d
    63b4:	00014780 	.word	0x00014780
    63b8:	000147a1 	.word	0x000147a1
    63bc:	000147b4 	.word	0x000147b4
    63c0:	000147c1 	.word	0x000147c1

000063c4 <grid_led_lowlevel_hardware_transfer_complete_cb>:


void grid_led_lowlevel_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    63c4:	4b01      	ldr	r3, [pc, #4]	; (63cc <grid_led_lowlevel_hardware_transfer_complete_cb+0x8>)
    63c6:	2201      	movs	r2, #1
    63c8:	701a      	strb	r2, [r3, #0]
	
	
}
    63ca:	4770      	bx	lr
    63cc:	200010d8 	.word	0x200010d8

000063d0 <grid_led_lowlevel_set_color>:
uint8_t grid_led_lowlevel_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    63d0:	b510      	push	{r4, lr}
	if (led_index<mod->led_number){
    63d2:	7844      	ldrb	r4, [r0, #1]
    63d4:	428c      	cmp	r4, r1
    63d6:	d91c      	bls.n	6412 <grid_led_lowlevel_set_color+0x42>
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    63d8:	2bff      	cmp	r3, #255	; 0xff
    63da:	f04f 040c 	mov.w	r4, #12
    63de:	fb04 f101 	mul.w	r1, r4, r1
    63e2:	bf28      	it	cs
    63e4:	23ff      	movcs	r3, #255	; 0xff
    63e6:	4c0c      	ldr	r4, [pc, #48]	; (6418 <grid_led_lowlevel_set_color+0x48>)
    63e8:	68c0      	ldr	r0, [r0, #12]
    63ea:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    63ee:	5043      	str	r3, [r0, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    63f0:	2aff      	cmp	r2, #255	; 0xff
    63f2:	bf28      	it	cs
    63f4:	22ff      	movcs	r2, #255	; 0xff
    63f6:	4401      	add	r1, r0
    63f8:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    63fc:	604b      	str	r3, [r1, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    63fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6402:	2bff      	cmp	r3, #255	; 0xff
    6404:	bf28      	it	cs
    6406:	23ff      	movcs	r3, #255	; 0xff
		return 0;
    6408:	2000      	movs	r0, #0
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    640a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    640e:	608b      	str	r3, [r1, #8]
}
    6410:	bd10      	pop	{r4, pc}
		return -1;		
    6412:	20ff      	movs	r0, #255	; 0xff
    6414:	e7fc      	b.n	6410 <grid_led_lowlevel_set_color+0x40>
    6416:	bf00      	nop
    6418:	20007dec 	.word	0x20007dec

0000641c <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    641c:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    641e:	4c06      	ldr	r4, [pc, #24]	; (6438 <grid_led_hardware_init+0x1c>)
    6420:	4b06      	ldr	r3, [pc, #24]	; (643c <grid_led_hardware_init+0x20>)
    6422:	f100 0114 	add.w	r1, r0, #20
    6426:	4620      	mov	r0, r4
    6428:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_lowlevel_hardware_transfer_complete_cb);
    642a:	4620      	mov	r0, r4
    642c:	4a04      	ldr	r2, [pc, #16]	; (6440 <grid_led_hardware_init+0x24>)
    642e:	4b05      	ldr	r3, [pc, #20]	; (6444 <grid_led_hardware_init+0x28>)
	

		
}
    6430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_lowlevel_hardware_transfer_complete_cb);
    6434:	2100      	movs	r1, #0
    6436:	4718      	bx	r3
    6438:	20014be4 	.word	0x20014be4
    643c:	0000af7d 	.word	0x0000af7d
    6440:	000063c5 	.word	0x000063c5
    6444:	0000af49 	.word	0x0000af49

00006448 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    6448:	7840      	ldrb	r0, [r0, #1]
    644a:	4770      	bx	lr

0000644c <grid_led_tick>:

/** ================== ANIMATION ==================  */


void grid_led_tick(struct grid_led_model* mod){
    644c:	b5f0      	push	{r4, r5, r6, r7, lr}
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    644e:	7846      	ldrb	r6, [r0, #1]
    6450:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    6454:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6458:	2400      	movs	r4, #0
    645a:	270d      	movs	r7, #13
    645c:	b2e3      	uxtb	r3, r4
    645e:	429e      	cmp	r6, r3
    6460:	d800      	bhi.n	6464 <grid_led_tick+0x18>
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
		}	
	}
	/** END */
	
}
    6462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6464:	6903      	ldr	r3, [r0, #16]
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    6466:	2103      	movs	r1, #3
    6468:	fb07 3304 	mla	r3, r7, r4, r3
    646c:	7add      	ldrb	r5, [r3, #11]
    646e:	f893 c00c 	ldrb.w	ip, [r3, #12]
    6472:	3901      	subs	r1, #1
    6474:	4465      	add	r5, ip
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    6476:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    647a:	72dd      	strb	r5, [r3, #11]
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    647c:	4413      	add	r3, r2
    647e:	d1f5      	bne.n	646c <grid_led_tick+0x20>
	for (uint8_t j=0; j<mod->led_number; j++){
    6480:	3401      	adds	r4, #1
    6482:	e7eb      	b.n	645c <grid_led_tick+0x10>

00006484 <grid_led_set_min>:
	grid_led_set_max(mod, num, layer, r, g, b);

}


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6484:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    6486:	7844      	ldrb	r4, [r0, #1]
    6488:	6900      	ldr	r0, [r0, #16]
    648a:	fb04 1202 	mla	r2, r4, r2, r1
    648e:	240d      	movs	r4, #13
    6490:	4362      	muls	r2, r4
    6492:	1881      	adds	r1, r0, r2
    6494:	5483      	strb	r3, [r0, r2]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    6496:	f89d 3008 	ldrb.w	r3, [sp, #8]
    649a:	704b      	strb	r3, [r1, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    649c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    64a0:	708b      	strb	r3, [r1, #2]
}
    64a2:	bd10      	pop	{r4, pc}

000064a4 <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    64a4:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    64a6:	7844      	ldrb	r4, [r0, #1]
    64a8:	fb04 1102 	mla	r1, r4, r2, r1
    64ac:	6902      	ldr	r2, [r0, #16]
    64ae:	200d      	movs	r0, #13
    64b0:	fb00 2201 	mla	r2, r0, r1, r2
    64b4:	70d3      	strb	r3, [r2, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    64b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    64ba:	7113      	strb	r3, [r2, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    64bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    64c0:	7153      	strb	r3, [r2, #5]
}
    64c2:	bd10      	pop	{r4, pc}

000064c4 <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    64c4:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    64c6:	7844      	ldrb	r4, [r0, #1]
    64c8:	fb04 1102 	mla	r1, r4, r2, r1
    64cc:	6902      	ldr	r2, [r0, #16]
    64ce:	200d      	movs	r0, #13
    64d0:	fb00 2201 	mla	r2, r0, r1, r2
    64d4:	7193      	strb	r3, [r2, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    64d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    64da:	71d3      	strb	r3, [r2, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    64dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    64e0:	7213      	strb	r3, [r2, #8]
}
    64e2:	bd10      	pop	{r4, pc}

000064e4 <grid_led_set_color>:
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    64e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    64e8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    64ec:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    64f0:	f8df a058 	ldr.w	sl, [pc, #88]	; 654c <grid_led_set_color+0x68>
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    64f4:	461c      	mov	r4, r3
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    64f6:	2314      	movs	r3, #20
    64f8:	fbb9 fcf3 	udiv	ip, r9, r3
    64fc:	f8cd c004 	str.w	ip, [sp, #4]
    6500:	fbb8 fcf3 	udiv	ip, r8, r3
    6504:	fbb4 f3f3 	udiv	r3, r4, r3
    6508:	f8cd c000 	str.w	ip, [sp]
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    650c:	4605      	mov	r5, r0
    650e:	460e      	mov	r6, r1
    6510:	4617      	mov	r7, r2
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    6512:	47d0      	blx	sl
	grid_led_set_mid(mod, num, layer, r/2, g/2, b/2);
    6514:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6518:	9301      	str	r3, [sp, #4]
    651a:	ea4f 0358 	mov.w	r3, r8, lsr #1
    651e:	9300      	str	r3, [sp, #0]
    6520:	463a      	mov	r2, r7
    6522:	0863      	lsrs	r3, r4, #1
    6524:	4631      	mov	r1, r6
    6526:	4628      	mov	r0, r5
    6528:	f8df a024 	ldr.w	sl, [pc, #36]	; 6550 <grid_led_set_color+0x6c>
    652c:	47d0      	blx	sl
	grid_led_set_max(mod, num, layer, r, g, b);
    652e:	4623      	mov	r3, r4
    6530:	4c05      	ldr	r4, [pc, #20]	; (6548 <grid_led_set_color+0x64>)
    6532:	463a      	mov	r2, r7
    6534:	4631      	mov	r1, r6
    6536:	4628      	mov	r0, r5
    6538:	46a4      	mov	ip, r4
    653a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
}
    653e:	b002      	add	sp, #8
    6540:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_led_set_max(mod, num, layer, r, g, b);
    6544:	4760      	bx	ip
    6546:	bf00      	nop
    6548:	000064c5 	.word	0x000064c5
    654c:	00006485 	.word	0x00006485
    6550:	000064a5 	.word	0x000064a5

00006554 <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    6554:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    6556:	7844      	ldrb	r4, [r0, #1]
    6558:	fb04 1102 	mla	r1, r4, r2, r1
    655c:	6902      	ldr	r2, [r0, #16]
    655e:	200d      	movs	r0, #13
    6560:	fb00 2101 	mla	r1, r0, r1, r2
    6564:	72cb      	strb	r3, [r1, #11]
}
    6566:	bd10      	pop	{r4, pc}

00006568 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    6568:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    656a:	7844      	ldrb	r4, [r0, #1]
    656c:	fb04 1102 	mla	r1, r4, r2, r1
    6570:	6902      	ldr	r2, [r0, #16]
    6572:	200d      	movs	r0, #13
    6574:	fb00 2101 	mla	r1, r0, r1, r2
    6578:	730b      	strb	r3, [r1, #12]
}
    657a:	bd10      	pop	{r4, pc}

0000657c <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    657c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6580:	4604      	mov	r4, r0
	mod->led_number = length;
    6582:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    6584:	b2cd      	uxtb	r5, r1
    6586:	200c      	movs	r0, #12
    6588:	4368      	muls	r0, r5
    658a:	3090      	adds	r0, #144	; 0x90
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    658c:	4f4c      	ldr	r7, [pc, #304]	; (66c0 <grid_led_buffer_init+0x144>)
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    658e:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6590:	47b8      	blx	r7
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    6592:	f100 0390 	add.w	r3, r0, #144	; 0x90
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6596:	60a0      	str	r0, [r4, #8]
    6598:	4606      	mov	r6, r0
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    659a:	2027      	movs	r0, #39	; 0x27
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    659c:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    659e:	4368      	muls	r0, r5
    65a0:	47b8      	blx	r7
    65a2:	6120      	str	r0, [r4, #16]
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    65a4:	b106      	cbz	r6, 65a8 <grid_led_buffer_init+0x2c>
    65a6:	b900      	cbnz	r0, 65aa <grid_led_buffer_init+0x2e>
		while(1){
    65a8:	e7fe      	b.n	65a8 <grid_led_buffer_init+0x2c>
    65aa:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    65ac:	4619      	mov	r1, r3
    65ae:	68a2      	ldr	r2, [r4, #8]
    65b0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    65b2:	3301      	adds	r3, #1
    65b4:	2b90      	cmp	r3, #144	; 0x90
    65b6:	d1fa      	bne.n	65ae <grid_led_buffer_init+0x32>
	for (uint32_t i = 0; i<mod->led_number; i++){
    65b8:	2500      	movs	r5, #0
		grid_led_lowlevel_set_color(mod,i,0,0,0);
    65ba:	4f42      	ldr	r7, [pc, #264]	; (66c4 <grid_led_buffer_init+0x148>)
    65bc:	462e      	mov	r6, r5
	for (uint32_t i = 0; i<mod->led_number; i++){
    65be:	7863      	ldrb	r3, [r4, #1]
    65c0:	429d      	cmp	r5, r3
    65c2:	d30c      	bcc.n	65de <grid_led_buffer_init+0x62>
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    65c4:	4d40      	ldr	r5, [pc, #256]	; (66c8 <grid_led_buffer_init+0x14c>)
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    65c6:	4e41      	ldr	r6, [pc, #260]	; (66cc <grid_led_buffer_init+0x150>)
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    65c8:	4f41      	ldr	r7, [pc, #260]	; (66d0 <grid_led_buffer_init+0x154>)
    65ca:	f04f 0b00 	mov.w	fp, #0
	for(uint8_t i = 0; i<mod->led_number; i++){
    65ce:	7863      	ldrb	r3, [r4, #1]
    65d0:	fa5f fa8b 	uxtb.w	sl, fp
    65d4:	4553      	cmp	r3, sl
    65d6:	d80a      	bhi.n	65ee <grid_led_buffer_init+0x72>
}
    65d8:	b003      	add	sp, #12
    65da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_led_lowlevel_set_color(mod,i,0,0,0);
    65de:	2300      	movs	r3, #0
    65e0:	4629      	mov	r1, r5
    65e2:	9600      	str	r6, [sp, #0]
    65e4:	461a      	mov	r2, r3
    65e6:	4620      	mov	r0, r4
    65e8:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    65ea:	3501      	adds	r5, #1
    65ec:	e7e7      	b.n	65be <grid_led_buffer_init+0x42>
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    65ee:	2300      	movs	r3, #0
    65f0:	e9cd 3300 	strd	r3, r3, [sp]
    65f4:	2201      	movs	r2, #1
    65f6:	4651      	mov	r1, sl
    65f8:	4620      	mov	r0, r4
    65fa:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    65fc:	2300      	movs	r3, #0
    65fe:	227f      	movs	r2, #127	; 0x7f
    6600:	e9cd 2300 	strd	r2, r3, [sp]
    6604:	4651      	mov	r1, sl
    6606:	2201      	movs	r2, #1
    6608:	4620      	mov	r0, r4
    660a:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    660c:	2300      	movs	r3, #0
    660e:	22ff      	movs	r2, #255	; 0xff
    6610:	e9cd 2300 	strd	r2, r3, [sp]
    6614:	4651      	mov	r1, sl
    6616:	2201      	movs	r2, #1
    6618:	4620      	mov	r0, r4
    661a:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    661c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 66d4 <grid_led_buffer_init+0x158>
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    6620:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 66d8 <grid_led_buffer_init+0x15c>
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    6624:	2300      	movs	r3, #0
    6626:	2201      	movs	r2, #1
    6628:	4651      	mov	r1, sl
    662a:	4620      	mov	r0, r4
    662c:	47c8      	blx	r9
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    662e:	2300      	movs	r3, #0
    6630:	2201      	movs	r2, #1
    6632:	4651      	mov	r1, sl
    6634:	4620      	mov	r0, r4
    6636:	47c0      	blx	r8
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    6638:	2300      	movs	r3, #0
    663a:	e9cd 3300 	strd	r3, r3, [sp]
    663e:	2202      	movs	r2, #2
    6640:	4651      	mov	r1, sl
    6642:	4620      	mov	r0, r4
    6644:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    6646:	2300      	movs	r3, #0
    6648:	227f      	movs	r2, #127	; 0x7f
    664a:	e9cd 2300 	strd	r2, r3, [sp]
    664e:	4651      	mov	r1, sl
    6650:	2202      	movs	r2, #2
    6652:	4620      	mov	r0, r4
    6654:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    6656:	2300      	movs	r3, #0
    6658:	22ff      	movs	r2, #255	; 0xff
    665a:	e9cd 2300 	strd	r2, r3, [sp]
    665e:	4651      	mov	r1, sl
    6660:	2202      	movs	r2, #2
    6662:	4620      	mov	r0, r4
    6664:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    6666:	2300      	movs	r3, #0
    6668:	2202      	movs	r2, #2
    666a:	4651      	mov	r1, sl
    666c:	4620      	mov	r0, r4
    666e:	47c8      	blx	r9
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    6670:	2300      	movs	r3, #0
    6672:	2202      	movs	r2, #2
    6674:	4651      	mov	r1, sl
    6676:	4620      	mov	r0, r4
    6678:	47c0      	blx	r8
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    667a:	2300      	movs	r3, #0
    667c:	461a      	mov	r2, r3
    667e:	e9cd 3300 	strd	r3, r3, [sp]
    6682:	4651      	mov	r1, sl
    6684:	4620      	mov	r0, r4
    6686:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6688:	2300      	movs	r3, #0
    668a:	461a      	mov	r2, r3
    668c:	e9cd 3300 	strd	r3, r3, [sp]
    6690:	4651      	mov	r1, sl
    6692:	4620      	mov	r0, r4
    6694:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6696:	2300      	movs	r3, #0
    6698:	461a      	mov	r2, r3
    669a:	e9cd 3300 	strd	r3, r3, [sp]
    669e:	4651      	mov	r1, sl
    66a0:	4620      	mov	r0, r4
    66a2:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    66a4:	2300      	movs	r3, #0
    66a6:	461a      	mov	r2, r3
    66a8:	4651      	mov	r1, sl
    66aa:	4620      	mov	r0, r4
    66ac:	47c8      	blx	r9
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    66ae:	2300      	movs	r3, #0
    66b0:	461a      	mov	r2, r3
    66b2:	4651      	mov	r1, sl
    66b4:	4620      	mov	r0, r4
    66b6:	47c0      	blx	r8
	for(uint8_t i = 0; i<mod->led_number; i++){
    66b8:	f10b 0b01 	add.w	fp, fp, #1
    66bc:	e787      	b.n	65ce <grid_led_buffer_init+0x52>
    66be:	bf00      	nop
    66c0:	000123c5 	.word	0x000123c5
    66c4:	000063d1 	.word	0x000063d1
    66c8:	00006485 	.word	0x00006485
    66cc:	000064a5 	.word	0x000064a5
    66d0:	000064c5 	.word	0x000064c5
    66d4:	00006569 	.word	0x00006569
    66d8:	00006555 	.word	0x00006555

000066dc <grid_led_lowlevel_init>:
uint8_t grid_led_lowlevel_init(struct grid_led_model* mod, uint8_t num){
    66dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    66de:	4e29      	ldr	r6, [pc, #164]	; (6784 <grid_led_lowlevel_init+0xa8>)
	for(uint16_t i=0; i<256; i++){
    66e0:	2300      	movs	r3, #0
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    66e2:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    66e6:	f013 0f02 	tst.w	r3, #2
    66ea:	bf0c      	ite	eq
    66ec:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    66f0:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    66f4:	f013 0f04 	tst.w	r3, #4
    66f8:	bf0c      	ite	eq
    66fa:	f44f 2400 	moveq.w	r4, #524288	; 0x80000
    66fe:	f44f 2460 	movne.w	r4, #917504	; 0xe0000
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    6702:	f013 0f08 	tst.w	r3, #8
    6706:	ea45 0504 	orr.w	r5, r5, r4
    670a:	bf0c      	ite	eq
    670c:	f44f 0400 	moveq.w	r4, #8388608	; 0x800000
    6710:	f44f 0460 	movne.w	r4, #14680064	; 0xe00000
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    6714:	f013 0f10 	tst.w	r3, #16
    6718:	ea45 0504 	orr.w	r5, r5, r4
    671c:	bf0c      	ite	eq
    671e:	f44f 6400 	moveq.w	r4, #2048	; 0x800
    6722:	f44f 6460 	movne.w	r4, #3584	; 0xe00
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    6726:	f013 0f20 	tst.w	r3, #32
    672a:	bf0c      	ite	eq
    672c:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
    6730:	f44f 4260 	movne.w	r2, #57344	; 0xe000
    6734:	432c      	orrs	r4, r5
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    6736:	f013 0f40 	tst.w	r3, #64	; 0x40
    673a:	ea44 0402 	orr.w	r4, r4, r2
    673e:	bf0c      	ite	eq
    6740:	2208      	moveq	r2, #8
    6742:	220e      	movne	r2, #14
    6744:	4314      	orrs	r4, r2
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6746:	09da      	lsrs	r2, r3, #7
    6748:	bf14      	ite	ne
    674a:	22e0      	movne	r2, #224	; 0xe0
    674c:	2280      	moveq	r2, #128	; 0x80
	for(uint16_t i=0; i<256; i++){
    674e:	3301      	adds	r3, #1
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6750:	4322      	orrs	r2, r4
	for(uint16_t i=0; i<256; i++){
    6752:	b29b      	uxth	r3, r3
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6754:	433a      	orrs	r2, r7
	for(uint16_t i=0; i<256; i++){
    6756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		grid_led_color_code[i] = temp;
    675a:	f846 2b04 	str.w	r2, [r6], #4
	for(uint16_t i=0; i<256; i++){
    675e:	d108      	bne.n	6772 <grid_led_lowlevel_init+0x96>
	grid_led_buffer_init(mod, num);		
    6760:	4b09      	ldr	r3, [pc, #36]	; (6788 <grid_led_lowlevel_init+0xac>)
    6762:	9001      	str	r0, [sp, #4]
    6764:	4798      	blx	r3
	grid_led_hardware_init(mod);
    6766:	9801      	ldr	r0, [sp, #4]
    6768:	4b08      	ldr	r3, [pc, #32]	; (678c <grid_led_lowlevel_init+0xb0>)
    676a:	4798      	blx	r3
}
    676c:	2000      	movs	r0, #0
    676e:	b003      	add	sp, #12
    6770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    6772:	f013 0f01 	tst.w	r3, #1
    6776:	bf14      	ite	ne
    6778:	f04f 6760 	movne.w	r7, #234881024	; 0xe000000
    677c:	f04f 6700 	moveq.w	r7, #134217728	; 0x8000000
    6780:	e7b1      	b.n	66e6 <grid_led_lowlevel_init+0xa>
    6782:	bf00      	nop
    6784:	20007dec 	.word	0x20007dec
    6788:	0000657d 	.word	0x0000657d
    678c:	0000641d 	.word	0x0000641d

00006790 <grid_led_lowlevel_render>:


void grid_led_lowlevel_render(struct grid_led_model* mod, uint32_t num){
    6790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6794:	7847      	ldrb	r7, [r0, #1]
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6796:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6838 <grid_led_lowlevel_render+0xa8>
    679a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    679e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    67a2:	6903      	ldr	r3, [r0, #16]
	uint32_t mix_b = 0;
    67a4:	2500      	movs	r5, #0
    67a6:	240d      	movs	r4, #13
    67a8:	fb04 3401 	mla	r4, r4, r1, r3
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    67ac:	2603      	movs	r6, #3
	uint32_t mix_g = 0;
    67ae:	462b      	mov	r3, r5
	uint32_t mix_r = 0;
    67b0:	462a      	mov	r2, r5
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    67b2:	f894 900b 	ldrb.w	r9, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    67b6:	f894 b003 	ldrb.w	fp, [r4, #3]
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    67ba:	f818 e009 	ldrb.w	lr, [r8, r9]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    67be:	44c1      	add	r9, r8
    67c0:	3e01      	subs	r6, #1
    67c2:	f899 a100 	ldrb.w	sl, [r9, #256]	; 0x100
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    67c6:	f899 c200 	ldrb.w	ip, [r9, #512]	; 0x200
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    67ca:	f894 9000 	ldrb.w	r9, [r4]
    67ce:	fb1b fb0a 	smulbb	fp, fp, sl
    67d2:	fb09 bb0e 	mla	fp, r9, lr, fp
    67d6:	f894 9006 	ldrb.w	r9, [r4, #6]
    67da:	fb09 b90c 	mla	r9, r9, ip, fp
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    67de:	f894 b004 	ldrb.w	fp, [r4, #4]
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    67e2:	444a      	add	r2, r9
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    67e4:	f894 9001 	ldrb.w	r9, [r4, #1]
    67e8:	fb1b fb0a 	smulbb	fp, fp, sl
    67ec:	fb09 bb0e 	mla	fp, r9, lr, fp
    67f0:	f894 9007 	ldrb.w	r9, [r4, #7]
    67f4:	fb09 b90c 	mla	r9, r9, ip, fp
    67f8:	444b      	add	r3, r9
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    67fa:	f894 9005 	ldrb.w	r9, [r4, #5]
    67fe:	f894 b002 	ldrb.w	fp, [r4, #2]
    6802:	fb19 f90a 	smulbb	r9, r9, sl
    6806:	fb0b 9e0e 	mla	lr, fp, lr, r9
    680a:	f894 9008 	ldrb.w	r9, [r4, #8]
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    680e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    6812:	fb09 ec0c 	mla	ip, r9, ip, lr
    6816:	4465      	add	r5, ip
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    6818:	443c      	add	r4, r7
    681a:	d1ca      	bne.n	67b2 <grid_led_lowlevel_render+0x22>

	mix_r = (mix_r)/2/256;
	mix_g = (mix_g)/2/256;
	mix_b = (mix_b)/2/256;
				
	grid_led_lowlevel_set_color(mod, num, mix_r, mix_g, mix_b);
    681c:	f3c5 254f 	ubfx	r5, r5, #9, #16
    6820:	4c04      	ldr	r4, [pc, #16]	; (6834 <grid_led_lowlevel_render+0xa4>)
    6822:	9500      	str	r5, [sp, #0]
    6824:	f3c3 234f 	ubfx	r3, r3, #9, #16
    6828:	f3c2 224f 	ubfx	r2, r2, #9, #16
    682c:	47a0      	blx	r4
	
}
    682e:	b003      	add	sp, #12
    6830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6834:	000063d1 	.word	0x000063d1
    6838:	20000008 	.word	0x20000008

0000683c <grid_led_lowlevel_render_all>:


void grid_led_lowlevel_render_all(struct grid_led_model* mod){
    683c:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<mod->led_number; i++){
		
		grid_led_lowlevel_render(mod, i);
    683e:	4e06      	ldr	r6, [pc, #24]	; (6858 <grid_led_lowlevel_render_all+0x1c>)
void grid_led_lowlevel_render_all(struct grid_led_model* mod){
    6840:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    6842:	2400      	movs	r4, #0
    6844:	786b      	ldrb	r3, [r5, #1]
    6846:	42a3      	cmp	r3, r4
    6848:	d800      	bhi.n	684c <grid_led_lowlevel_render_all+0x10>
	}
	
}
    684a:	bd70      	pop	{r4, r5, r6, pc}
		grid_led_lowlevel_render(mod, i);
    684c:	4621      	mov	r1, r4
    684e:	4628      	mov	r0, r5
    6850:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    6852:	3401      	adds	r4, #1
    6854:	e7f6      	b.n	6844 <grid_led_lowlevel_render_all+0x8>
    6856:	bf00      	nop
    6858:	00006791 	.word	0x00006791

0000685c <grid_led_lowlevel_hardware_start_transfer>:
			
	}
	
}

void grid_led_lowlevel_hardware_start_transfer (struct grid_led_model* mod){
    685c:	b510      	push	{r4, lr}
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    685e:	4b07      	ldr	r3, [pc, #28]	; (687c <grid_led_lowlevel_hardware_start_transfer+0x20>)
void grid_led_lowlevel_hardware_start_transfer (struct grid_led_model* mod){
    6860:	4604      	mov	r4, r0
	grid_led_hardware_transfer_done = 0;
    6862:	2200      	movs	r2, #0
    6864:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    6866:	4806      	ldr	r0, [pc, #24]	; (6880 <grid_led_lowlevel_hardware_start_transfer+0x24>)
    6868:	4b06      	ldr	r3, [pc, #24]	; (6884 <grid_led_lowlevel_hardware_start_transfer+0x28>)
    686a:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_lowlevel_get_frame_buffer_pointer(mod), grid_led_lowlevel_get_frame_buffer_size(mod));
    686c:	88a2      	ldrh	r2, [r4, #4]
    686e:	68a1      	ldr	r1, [r4, #8]
    6870:	6960      	ldr	r0, [r4, #20]
    6872:	4b05      	ldr	r3, [pc, #20]	; (6888 <grid_led_lowlevel_hardware_start_transfer+0x2c>)

}
    6874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	io_write(mod->hardware_io_descriptor, grid_led_lowlevel_get_frame_buffer_pointer(mod), grid_led_lowlevel_get_frame_buffer_size(mod));
    6878:	4718      	bx	r3
    687a:	bf00      	nop
    687c:	200010d8 	.word	0x200010d8
    6880:	20014be4 	.word	0x20014be4
    6884:	0000af21 	.word	0x0000af21
    6888:	0000abb9 	.word	0x0000abb9

0000688c <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	grid_ui_model_init(&grid_core_state, 1);
    6890:	4d70      	ldr	r5, [pc, #448]	; (6a54 <grid_module_common_init+0x1c8>)
    6892:	4b71      	ldr	r3, [pc, #452]	; (6a58 <grid_module_common_init+0x1cc>)
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
	
		
	if (1){	// INIT CORE_STATE->hearbeat	
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    6894:	f8df 9240 	ldr.w	r9, [pc, #576]	; 6ad8 <grid_module_common_init+0x24c>
		uint8_t payload_length = 0;
	
		sprintf(payload_template, GRID_EVENTSTRING_HEARTBEAT );
		payload_length = strlen(payload_template);
    6898:	f8df 8240 	ldr.w	r8, [pc, #576]	; 6adc <grid_module_common_init+0x250>
	
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    689c:	4f6f      	ldr	r7, [pc, #444]	; (6a5c <grid_module_common_init+0x1d0>)
		uint8_t error = 0;
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    689e:	f8df a240 	ldr.w	sl, [pc, #576]	; 6ae0 <grid_module_common_init+0x254>
void grid_module_common_init(void){
    68a2:	b0a3      	sub	sp, #140	; 0x8c
	grid_ui_model_init(&grid_core_state, 1);
    68a4:	4628      	mov	r0, r5
    68a6:	2101      	movs	r1, #1
    68a8:	4798      	blx	r3
	grid_ui_bank_init(&grid_core_state, 0, 1);
    68aa:	4628      	mov	r0, r5
    68ac:	4b6c      	ldr	r3, [pc, #432]	; (6a60 <grid_module_common_init+0x1d4>)
    68ae:	2201      	movs	r2, #1
    68b0:	2100      	movs	r1, #0
    68b2:	4798      	blx	r3
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
    68b4:	2200      	movs	r2, #0
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    68b6:	2400      	movs	r4, #0
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
    68b8:	6868      	ldr	r0, [r5, #4]
    68ba:	4b6a      	ldr	r3, [pc, #424]	; (6a64 <grid_module_common_init+0x1d8>)
    68bc:	4611      	mov	r1, r2
    68be:	4798      	blx	r3
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    68c0:	2274      	movs	r2, #116	; 0x74
    68c2:	4621      	mov	r1, r4
    68c4:	a805      	add	r0, sp, #20
    68c6:	9404      	str	r4, [sp, #16]
    68c8:	47c8      	blx	r9
		sprintf(payload_template, GRID_EVENTSTRING_HEARTBEAT );
    68ca:	4967      	ldr	r1, [pc, #412]	; (6a68 <grid_module_common_init+0x1dc>)
    68cc:	4b67      	ldr	r3, [pc, #412]	; (6a6c <grid_module_common_init+0x1e0>)
    68ce:	a804      	add	r0, sp, #16
    68d0:	4798      	blx	r3
		payload_length = strlen(payload_template);
    68d2:	a804      	add	r0, sp, #16
    68d4:	47c0      	blx	r8
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    68d6:	aa04      	add	r2, sp, #16
    68d8:	1816      	adds	r6, r2, r0
    68da:	2303      	movs	r3, #3
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    68dc:	f10d 0b0f 	add.w	fp, sp, #15
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    68e0:	4963      	ldr	r1, [pc, #396]	; (6a70 <grid_module_common_init+0x1e4>)
    68e2:	9300      	str	r3, [sp, #0]
    68e4:	2202      	movs	r2, #2
    68e6:	2310      	movs	r3, #16
    68e8:	4630      	mov	r0, r6
    68ea:	47b8      	blx	r7
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    68ec:	230e      	movs	r3, #14
    68ee:	2201      	movs	r2, #1
    68f0:	2104      	movs	r1, #4
	
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_HWCFG_offset, GRID_CLASS_HEARTBEAT_HWCFG_length, grid_sys_get_hwcfg(), &error);
    68f2:	4f60      	ldr	r7, [pc, #384]	; (6a74 <grid_module_common_init+0x1e8>)
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    68f4:	f8cd b000 	str.w	fp, [sp]
    68f8:	4630      	mov	r0, r6
		uint8_t error = 0;
    68fa:	f88d 400f 	strb.w	r4, [sp, #15]
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    68fe:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_HWCFG_offset, GRID_CLASS_HEARTBEAT_HWCFG_length, grid_sys_get_hwcfg(), &error);
    6900:	47b8      	blx	r7
    6902:	2202      	movs	r2, #2
    6904:	4603      	mov	r3, r0
    6906:	2105      	movs	r1, #5
    6908:	4630      	mov	r0, r6
    690a:	f8cd b000 	str.w	fp, [sp]
    690e:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VMAJOR_offset, GRID_CLASS_HEARTBEAT_VMAJOR_length , GRID_PROTOCOL_VERSION_MAJOR, &error);
    6910:	2301      	movs	r3, #1
    6912:	2202      	movs	r2, #2
    6914:	2107      	movs	r1, #7
    6916:	4630      	mov	r0, r6
    6918:	f8cd b000 	str.w	fp, [sp]
    691c:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VMINOR_offset, GRID_CLASS_HEARTBEAT_VMINOR_length  , GRID_PROTOCOL_VERSION_MINOR, &error);
    691e:	2301      	movs	r3, #1
    6920:	2202      	movs	r2, #2
    6922:	2109      	movs	r1, #9
    6924:	4630      	mov	r0, r6
    6926:	f8cd b000 	str.w	fp, [sp]
    692a:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VPATCH_offset, GRID_CLASS_HEARTBEAT_VPATCH_length  , GRID_PROTOCOL_VERSION_PATCH, &error);
    692c:	2309      	movs	r3, #9
    692e:	2202      	movs	r2, #2
    6930:	210b      	movs	r1, #11
    6932:	4630      	mov	r0, r6
    6934:	f8cd b000 	str.w	fp, [sp]
    6938:	47d0      	blx	sl
	
		payload_length = strlen(payload_template);
    693a:	a804      	add	r0, sp, #16
    693c:	47c0      	blx	r8
	
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_HEARTBEAT, payload_template, payload_length);		
    693e:	686e      	ldr	r6, [r5, #4]
		payload_length = strlen(payload_template);
    6940:	4603      	mov	r3, r0
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_HEARTBEAT, payload_template, payload_length);		
    6942:	aa04      	add	r2, sp, #16
    6944:	68f0      	ldr	r0, [r6, #12]
    6946:	4e4c      	ldr	r6, [pc, #304]	; (6a78 <grid_module_common_init+0x1ec>)
    6948:	210c      	movs	r1, #12
    694a:	47b0      	blx	r6
		
	}

	if (1){	// INIT CORE_STATE->mapmode press
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    694c:	2274      	movs	r2, #116	; 0x74
    694e:	4621      	mov	r1, r4
    6950:	a805      	add	r0, sp, #20
    6952:	9404      	str	r4, [sp, #16]
    6954:	47c8      	blx	r9
		uint8_t payload_length = 0;
	
		sprintf(payload_template, GRID_EVENTSTRING_MAPMODE_PRESS GRID_ACTIONSTRING_MAPMODE_PRESS);
    6956:	4949      	ldr	r1, [pc, #292]	; (6a7c <grid_module_common_init+0x1f0>)
    6958:	4b44      	ldr	r3, [pc, #272]	; (6a6c <grid_module_common_init+0x1e0>)
    695a:	a804      	add	r0, sp, #16
    695c:	4798      	blx	r3
		payload_length = strlen(payload_template);
    695e:	a804      	add	r0, sp, #16
    6960:	47c0      	blx	r8
    6962:	4603      	mov	r3, r0
	
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_MAPMODE_PRESS, payload_template, payload_length);			
    6964:	6868      	ldr	r0, [r5, #4]
    6966:	aa04      	add	r2, sp, #16
    6968:	68c0      	ldr	r0, [r0, #12]
    696a:	2107      	movs	r1, #7
    696c:	47b0      	blx	r6
		
	}	

	if (1){ // INIT CORE_STATE->mapmode release
			
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    696e:	2274      	movs	r2, #116	; 0x74
    6970:	4621      	mov	r1, r4
    6972:	a805      	add	r0, sp, #20
    6974:	9404      	str	r4, [sp, #16]
    6976:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_MAPMODE_RELEASE GRID_ACTIONSTRING_MAPMODE_RELEASE);
    6978:	4941      	ldr	r1, [pc, #260]	; (6a80 <grid_module_common_init+0x1f4>)
    697a:	4b3c      	ldr	r3, [pc, #240]	; (6a6c <grid_module_common_init+0x1e0>)
    697c:	a804      	add	r0, sp, #16
    697e:	4798      	blx	r3
		payload_length = strlen(payload_template);
    6980:	a804      	add	r0, sp, #16
    6982:	47c0      	blx	r8
    6984:	4603      	mov	r3, r0
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_MAPMODE_RELEASE, payload_template, payload_length);
    6986:	6868      	ldr	r0, [r5, #4]
    6988:	aa04      	add	r2, sp, #16
    698a:	68c0      	ldr	r0, [r0, #12]
    698c:	2108      	movs	r1, #8
    698e:	47b0      	blx	r6
		
	}	
	
	if (1){ // INIT CORE_STATE->cfgresponse
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    6990:	2274      	movs	r2, #116	; 0x74
    6992:	4621      	mov	r1, r4
    6994:	a805      	add	r0, sp, #20
    6996:	9404      	str	r4, [sp, #16]
    6998:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_CFG_RESPONES GRID_ACTIONSTRING_CFG_RESPONSE);
    699a:	493a      	ldr	r1, [pc, #232]	; (6a84 <grid_module_common_init+0x1f8>)
    699c:	4b33      	ldr	r3, [pc, #204]	; (6a6c <grid_module_common_init+0x1e0>)
    699e:	a804      	add	r0, sp, #16
    69a0:	4798      	blx	r3
		payload_length = strlen(payload_template);
    69a2:	a804      	add	r0, sp, #16
    69a4:	47c0      	blx	r8
    69a6:	4603      	mov	r3, r0
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_RESPONSE, payload_template, payload_length);
    69a8:	6868      	ldr	r0, [r5, #4]
    69aa:	aa04      	add	r2, sp, #16
    69ac:	68c0      	ldr	r0, [r0, #12]
    69ae:	2109      	movs	r1, #9
    69b0:	47b0      	blx	r6
		
	}	
	
	if (1){ // INIT CORE_STATE->cfgrequest
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    69b2:	2274      	movs	r2, #116	; 0x74
    69b4:	4621      	mov	r1, r4
    69b6:	a805      	add	r0, sp, #20
    69b8:	9404      	str	r4, [sp, #16]
    69ba:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_CFG_REQUEST GRID_ACTIONSTRING_CFG_REQUEST);
    69bc:	4932      	ldr	r1, [pc, #200]	; (6a88 <grid_module_common_init+0x1fc>)
    69be:	4b2b      	ldr	r3, [pc, #172]	; (6a6c <grid_module_common_init+0x1e0>)
    69c0:	a804      	add	r0, sp, #16
    69c2:	4798      	blx	r3
		payload_length = strlen(payload_template);
    69c4:	a804      	add	r0, sp, #16
    69c6:	47c0      	blx	r8
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    69c8:	686c      	ldr	r4, [r5, #4]
		payload_length = strlen(payload_template);
    69ca:	4603      	mov	r3, r0
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    69cc:	aa04      	add	r2, sp, #16
    69ce:	68e0      	ldr	r0, [r4, #12]
	}	
	
	
	//enable pwr!
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "UI Power Enable");
    69d0:	4c2e      	ldr	r4, [pc, #184]	; (6a8c <grid_module_common_init+0x200>)
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    69d2:	210a      	movs	r1, #10
    69d4:	47b0      	blx	r6
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "UI Power Enable");
    69d6:	492e      	ldr	r1, [pc, #184]	; (6a90 <grid_module_common_init+0x204>)
    69d8:	482e      	ldr	r0, [pc, #184]	; (6a94 <grid_module_common_init+0x208>)
    69da:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    69dc:	4b2e      	ldr	r3, [pc, #184]	; (6a98 <grid_module_common_init+0x20c>)
    69de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    69e2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    69e6:	47b8      	blx	r7
    69e8:	4625      	mov	r5, r4
    69ea:	b970      	cbnz	r0, 6a0a <grid_module_common_init+0x17e>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PO16");
    69ec:	492b      	ldr	r1, [pc, #172]	; (6a9c <grid_module_common_init+0x210>)
    69ee:	4829      	ldr	r0, [pc, #164]	; (6a94 <grid_module_common_init+0x208>)
    69f0:	47a8      	blx	r5
		grid_module_po16_revb_init();
    69f2:	4b2b      	ldr	r3, [pc, #172]	; (6aa0 <grid_module_common_init+0x214>)
	}
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
		grid_module_bu16_revb_init();
    69f4:	4798      	blx	r3
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: Unknown Module");
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "HWCFG Mismatch");
	}


	grid_sys_init(&grid_sys_state);
    69f6:	4b2b      	ldr	r3, [pc, #172]	; (6aa4 <grid_module_common_init+0x218>)
    69f8:	482b      	ldr	r0, [pc, #172]	; (6aa8 <grid_module_common_init+0x21c>)
    69fa:	4798      	blx	r3


	grid_nvm_init(&grid_nvm_state, &FLASH_0);
    69fc:	492b      	ldr	r1, [pc, #172]	; (6aac <grid_module_common_init+0x220>)
    69fe:	482c      	ldr	r0, [pc, #176]	; (6ab0 <grid_module_common_init+0x224>)
    6a00:	4b2c      	ldr	r3, [pc, #176]	; (6ab4 <grid_module_common_init+0x228>)
    6a02:	4798      	blx	r3
	
		
}
    6a04:	b023      	add	sp, #140	; 0x8c
    6a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    6a0a:	47b8      	blx	r7
    6a0c:	2808      	cmp	r0, #8
    6a0e:	d0ed      	beq.n	69ec <grid_module_common_init+0x160>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
    6a10:	47b8      	blx	r7
    6a12:	2880      	cmp	r0, #128	; 0x80
    6a14:	d104      	bne.n	6a20 <grid_module_common_init+0x194>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
    6a16:	4928      	ldr	r1, [pc, #160]	; (6ab8 <grid_module_common_init+0x22c>)
    6a18:	481e      	ldr	r0, [pc, #120]	; (6a94 <grid_module_common_init+0x208>)
    6a1a:	47a8      	blx	r5
		grid_module_bu16_revb_init();
    6a1c:	4b27      	ldr	r3, [pc, #156]	; (6abc <grid_module_common_init+0x230>)
    6a1e:	e7e9      	b.n	69f4 <grid_module_common_init+0x168>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
    6a20:	47b8      	blx	r7
    6a22:	2888      	cmp	r0, #136	; 0x88
    6a24:	d0f7      	beq.n	6a16 <grid_module_common_init+0x18a>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    6a26:	47b8      	blx	r7
    6a28:	2840      	cmp	r0, #64	; 0x40
    6a2a:	d104      	bne.n	6a36 <grid_module_common_init+0x1aa>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PBF4");					
    6a2c:	4924      	ldr	r1, [pc, #144]	; (6ac0 <grid_module_common_init+0x234>)
    6a2e:	4819      	ldr	r0, [pc, #100]	; (6a94 <grid_module_common_init+0x208>)
    6a30:	47a0      	blx	r4
		grid_module_pbf4_reva_init();			
    6a32:	4b24      	ldr	r3, [pc, #144]	; (6ac4 <grid_module_common_init+0x238>)
    6a34:	e7de      	b.n	69f4 <grid_module_common_init+0x168>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){
    6a36:	47b8      	blx	r7
    6a38:	28c0      	cmp	r0, #192	; 0xc0
    6a3a:	d104      	bne.n	6a46 <grid_module_common_init+0x1ba>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: EN16");
    6a3c:	4922      	ldr	r1, [pc, #136]	; (6ac8 <grid_module_common_init+0x23c>)
    6a3e:	4815      	ldr	r0, [pc, #84]	; (6a94 <grid_module_common_init+0x208>)
    6a40:	47a0      	blx	r4
		grid_module_en16_reva_init();	
    6a42:	4b22      	ldr	r3, [pc, #136]	; (6acc <grid_module_common_init+0x240>)
    6a44:	e7d6      	b.n	69f4 <grid_module_common_init+0x168>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: Unknown Module");
    6a46:	4922      	ldr	r1, [pc, #136]	; (6ad0 <grid_module_common_init+0x244>)
    6a48:	4812      	ldr	r0, [pc, #72]	; (6a94 <grid_module_common_init+0x208>)
    6a4a:	47a0      	blx	r4
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "HWCFG Mismatch");
    6a4c:	4921      	ldr	r1, [pc, #132]	; (6ad4 <grid_module_common_init+0x248>)
    6a4e:	4811      	ldr	r0, [pc, #68]	; (6a94 <grid_module_common_init+0x208>)
    6a50:	47a0      	blx	r4
    6a52:	e7d0      	b.n	69f6 <grid_module_common_init+0x16a>
    6a54:	2001454c 	.word	0x2001454c
    6a58:	00009251 	.word	0x00009251
    6a5c:	00012b75 	.word	0x00012b75
    6a60:	00009285 	.word	0x00009285
    6a64:	0000a52d 	.word	0x0000a52d
    6a68:	00014849 	.word	0x00014849
    6a6c:	00012bb9 	.word	0x00012bb9
    6a70:	00014752 	.word	0x00014752
    6a74:	000090cd 	.word	0x000090cd
    6a78:	00009f31 	.word	0x00009f31
    6a7c:	00014858 	.word	0x00014858
    6a80:	0001486f 	.word	0x0001486f
    6a84:	0001487e 	.word	0x0001487e
    6a88:	00014895 	.word	0x00014895
    6a8c:	0001275d 	.word	0x0001275d
    6a90:	000148ac 	.word	0x000148ac
    6a94:	000147e3 	.word	0x000147e3
    6a98:	41008000 	.word	0x41008000
    6a9c:	000148bc 	.word	0x000148bc
    6aa0:	00007b69 	.word	0x00007b69
    6aa4:	00008e35 	.word	0x00008e35
    6aa8:	20006f94 	.word	0x20006f94
    6aac:	20014a88 	.word	0x20014a88
    6ab0:	200079a8 	.word	0x200079a8
    6ab4:	000084c1 	.word	0x000084c1
    6ab8:	000148ce 	.word	0x000148ce
    6abc:	00006e15 	.word	0x00006e15
    6ac0:	000148e0 	.word	0x000148e0
    6ac4:	0000780d 	.word	0x0000780d
    6ac8:	000148f2 	.word	0x000148f2
    6acc:	0000732d 	.word	0x0000732d
    6ad0:	00014904 	.word	0x00014904
    6ad4:	00014920 	.word	0x00014920
    6ad8:	00012519 	.word	0x00012519
    6adc:	00012c81 	.word	0x00012c81
    6ae0:	0000920d 	.word	0x0000920d

00006ae4 <grid_module_bu16_revb_hardware_start_transfer>:

static uint8_t grid_bu16_helper_template_b_tgl2[GRID_SYS_BANK_MAXNUMBER][16] = {0};
static uint8_t grid_bu16_helper_template_b_tgl3[GRID_SYS_BANK_MAXNUMBER][16] = {0};
	
	
void grid_module_bu16_revb_hardware_start_transfer(void){
    6ae4:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    6ae6:	4c04      	ldr	r4, [pc, #16]	; (6af8 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    6ae8:	4804      	ldr	r0, [pc, #16]	; (6afc <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    6aea:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    6aec:	4623      	mov	r3, r4
    6aee:	4804      	ldr	r0, [pc, #16]	; (6b00 <grid_module_bu16_revb_hardware_start_transfer+0x1c>)

}
    6af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    6af4:	4718      	bx	r3
    6af6:	bf00      	nop
    6af8:	0000d105 	.word	0x0000d105
    6afc:	20014b14 	.word	0x20014b14
    6b00:	20014ce8 	.word	0x20014ce8

00006b04 <grid_module_bu16_revb_hardware_transfer_complete_cb>:

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    6b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    6b08:	4aa4      	ldr	r2, [pc, #656]	; (6d9c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x298>)
    6b0a:	7813      	ldrb	r3, [r2, #0]
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    6b0c:	b08b      	sub	sp, #44	; 0x2c
    6b0e:	4614      	mov	r4, r2
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    6b10:	b933      	cbnz	r3, 6b20 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c>
		grid_module_bu16_revb_hardware_transfer_complete++;
    6b12:	7813      	ldrb	r3, [r2, #0]
    6b14:	3301      	adds	r3, #1
    6b16:	b2db      	uxtb	r3, r3
    6b18:	7013      	strb	r3, [r2, #0]
	}
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
	grid_module_bu16_revb_hardware_start_transfer();
}
    6b1a:	b00b      	add	sp, #44	; 0x2c
    6b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    6b20:	4b9f      	ldr	r3, [pc, #636]	; (6da0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x29c>)
    6b22:	48a0      	ldr	r0, [pc, #640]	; (6da4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a0>)
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    6b24:	4d9f      	ldr	r5, [pc, #636]	; (6da4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a0>)
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    6b26:	4798      	blx	r3
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    6b28:	7c6a      	ldrb	r2, [r5, #17]
		bank=0;
    6b2a:	28ff      	cmp	r0, #255	; 0xff
    6b2c:	bf14      	ite	ne
    6b2e:	4603      	movne	r3, r0
    6b30:	2300      	moveq	r3, #0
	if (bank_changed){
    6b32:	b9fa      	cbnz	r2, 6b74 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x70>
	uint16_t adcresult_0 = 0;
    6b34:	2300      	movs	r3, #0
    6b36:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t adcresult_1 = 0;
    6b3a:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    6b3e:	7863      	ldrb	r3, [r4, #1]
    6b40:	4a99      	ldr	r2, [pc, #612]	; (6da8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a4>)
    6b42:	3308      	adds	r3, #8
    6b44:	5cd7      	ldrb	r7, [r2, r3]
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    6b46:	7863      	ldrb	r3, [r4, #1]
    6b48:	b2db      	uxtb	r3, r3
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    6b4a:	b2ff      	uxtb	r7, r7
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    6b4c:	5cd6      	ldrb	r6, [r2, r3]
	grid_module_bu16_revb_mux++;
    6b4e:	7863      	ldrb	r3, [r4, #1]
    6b50:	3301      	adds	r3, #1
    6b52:	b2db      	uxtb	r3, r3
    6b54:	7063      	strb	r3, [r4, #1]
	grid_module_bu16_revb_mux%=8;
    6b56:	7863      	ldrb	r3, [r4, #1]
    6b58:	f003 0307 	and.w	r3, r3, #7
    6b5c:	7063      	strb	r3, [r4, #1]
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    6b5e:	7863      	ldrb	r3, [r4, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    6b60:	f013 0f01 	tst.w	r3, #1
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    6b64:	b2f6      	uxtb	r6, r6
    6b66:	4b91      	ldr	r3, [pc, #580]	; (6dac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    6b68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    6b6c:	d141      	bne.n	6bf2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xee>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6b6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    6b72:	e040      	b.n	6bf6 <grid_module_bu16_revb_hardware_transfer_complete_cb+0xf2>
		grid_sys_state.bank_active_changed = 0;
    6b74:	f04f 0900 	mov.w	r9, #0
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    6b78:	fa0f fa83 	sxth.w	sl, r3
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    6b7c:	f8df 823c 	ldr.w	r8, [pc, #572]	; 6dbc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>
		grid_sys_state.bank_active_changed = 0;
    6b80:	f885 9011 	strb.w	r9, [r5, #17]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    6b84:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    6b88:	eb04 1703 	add.w	r7, r4, r3, lsl #4
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    6b8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6b90:	7bea      	ldrb	r2, [r5, #15]
    6b92:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    6b96:	fa5f f689 	uxtb.w	r6, r9
    6b9a:	7a5b      	ldrb	r3, [r3, #9]
    6b9c:	42b3      	cmp	r3, r6
    6b9e:	d9c9      	bls.n	6b34 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x30>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    6ba0:	f8d8 2004 	ldr.w	r2, [r8, #4]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    6ba4:	f8df b220 	ldr.w	fp, [pc, #544]	; 6dc8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c4>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    6ba8:	4452      	add	r2, sl
    6baa:	2364      	movs	r3, #100	; 0x64
    6bac:	68d2      	ldr	r2, [r2, #12]
    6bae:	4373      	muls	r3, r6
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    6bb0:	19b9      	adds	r1, r7, r6
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    6bb2:	441a      	add	r2, r3
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    6bb4:	7888      	ldrb	r0, [r1, #2]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_bu16_helper_template_b_tgl3[bank][i];
    6bb6:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    6bba:	6190      	str	r0, [r2, #24]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_bu16_helper_template_b_tgl3[bank][i];
    6bbc:	61d1      	str	r1, [r2, #28]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    6bbe:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6bc2:	7be9      	ldrb	r1, [r5, #15]
    6bc4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    6bc8:	4640      	mov	r0, r8
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    6bca:	68d2      	ldr	r2, [r2, #12]
    6bcc:	4413      	add	r3, r2
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    6bce:	4632      	mov	r2, r6
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    6bd0:	60de      	str	r6, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    6bd2:	7be9      	ldrb	r1, [r5, #15]
    6bd4:	2300      	movs	r3, #0
    6bd6:	47d8      	blx	fp
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    6bd8:	7be9      	ldrb	r1, [r5, #15]
    6bda:	2304      	movs	r3, #4
    6bdc:	4632      	mov	r2, r6
    6bde:	4640      	mov	r0, r8
    6be0:	47d8      	blx	fp
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    6be2:	7be9      	ldrb	r1, [r5, #15]
    6be4:	2305      	movs	r3, #5
    6be6:	4632      	mov	r2, r6
    6be8:	4640      	mov	r0, r8
    6bea:	47d8      	blx	fp
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    6bec:	f109 0901 	add.w	r9, r9, #1
    6bf0:	e7cc      	b.n	6b8c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x88>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6bf2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    6bf6:	7863      	ldrb	r3, [r4, #1]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    6bf8:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 6dcc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c8>
    6bfc:	486c      	ldr	r0, [pc, #432]	; (6db0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2ac>)
    6bfe:	f013 0f02 	tst.w	r3, #2
    6c02:	4b6a      	ldr	r3, [pc, #424]	; (6dac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    6c04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    6c08:	bf14      	ite	ne
    6c0a:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c0e:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    6c12:	7863      	ldrb	r3, [r4, #1]
    6c14:	f013 0f04 	tst.w	r3, #4
    6c18:	4b64      	ldr	r3, [pc, #400]	; (6dac <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    6c1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6c1e:	bf14      	ite	ne
    6c20:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6c24:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    6c28:	2100      	movs	r1, #0
    6c2a:	2302      	movs	r3, #2
    6c2c:	aa05      	add	r2, sp, #20
    6c2e:	47c0      	blx	r8
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    6c30:	2302      	movs	r3, #2
    6c32:	f10d 0216 	add.w	r2, sp, #22
    6c36:	485f      	ldr	r0, [pc, #380]	; (6db4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b0>)
    6c38:	2100      	movs	r1, #0
    6c3a:	47c0      	blx	r8
	uint8_t result_value[2] = {0};
    6c3c:	2300      	movs	r3, #0
    6c3e:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t result_valid[2] = {0};
    6c42:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (adcresult_0>60000){
    6c46:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	result_index[0] = adc_index_0;
    6c4a:	f88d 7008 	strb.w	r7, [sp, #8]
	if (adcresult_0>60000){
    6c4e:	f64e 2260 	movw	r2, #60000	; 0xea60
    6c52:	4293      	cmp	r3, r2
	result_index[1] = adc_index_1;
    6c54:	f88d 6009 	strb.w	r6, [sp, #9]
	if (adcresult_0>60000){
    6c58:	d978      	bls.n	6d4c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>
		result_valid[0] = 1;
    6c5a:	2301      	movs	r3, #1
    6c5c:	f88d 3010 	strb.w	r3, [sp, #16]
	if (adcresult_1>60000){
    6c60:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c64:	f64e 2260 	movw	r2, #60000	; 0xea60
    6c68:	4293      	cmp	r3, r2
    6c6a:	d975      	bls.n	6d58 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>
		result_value[1] = 0;
    6c6c:	2300      	movs	r3, #0
		result_value[1] = 127;
    6c6e:	f88d 300d 	strb.w	r3, [sp, #13]
		result_valid[1] = 1;
    6c72:	2301      	movs	r3, #1
    6c74:	f88d 3011 	strb.w	r3, [sp, #17]
	uint8_t grid_module_bu16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};	
    6c78:	4b4f      	ldr	r3, [pc, #316]	; (6db8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b4>)
    6c7a:	ae06      	add	r6, sp, #24
    6c7c:	f103 0710 	add.w	r7, r3, #16
    6c80:	6818      	ldr	r0, [r3, #0]
    6c82:	6859      	ldr	r1, [r3, #4]
    6c84:	4632      	mov	r2, r6
    6c86:	c203      	stmia	r2!, {r0, r1}
    6c88:	3308      	adds	r3, #8
    6c8a:	42bb      	cmp	r3, r7
    6c8c:	4616      	mov	r6, r2
    6c8e:	d1f7      	bne.n	6c80 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x17c>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    6c90:	484a      	ldr	r0, [pc, #296]	; (6dbc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>)
	uint8_t grid_module_bu16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};	
    6c92:	2300      	movs	r3, #0
    6c94:	f10d 0908 	add.w	r9, sp, #8
    6c98:	f10d 0b0c 	add.w	fp, sp, #12
    6c9c:	9301      	str	r3, [sp, #4]
    6c9e:	4682      	mov	sl, r0
		uint8_t res_index = result_index[i];
    6ca0:	f819 6b01 	ldrb.w	r6, [r9], #1
		uint8_t res_value = result_value[i];
    6ca4:	f81b 8b01 	ldrb.w	r8, [fp], #1
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    6ca8:	6843      	ldr	r3, [r0, #4]
    6caa:	7bea      	ldrb	r2, [r5, #15]
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    6cac:	19a1      	adds	r1, r4, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    6cae:	b2d2      	uxtb	r2, r2
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    6cb0:	f891 c082 	ldrb.w	ip, [r1, #130]	; 0x82
    6cb4:	45e0      	cmp	r8, ip
    6cb6:	d042      	beq.n	6d3e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23a>
    6cb8:	9f01      	ldr	r7, [sp, #4]
		uint8_t res_valid = result_valid[i];
    6cba:	a904      	add	r1, sp, #16
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    6cbc:	5c79      	ldrb	r1, [r7, r1]
    6cbe:	2901      	cmp	r1, #1
    6cc0:	d13d      	bne.n	6d3e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23a>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    6cc2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    6cc6:	2164      	movs	r1, #100	; 0x64
    6cc8:	68db      	ldr	r3, [r3, #12]
    6cca:	fb16 f101 	smulbb	r1, r6, r1
    6cce:	440b      	add	r3, r1
			if (grid_bu16_helper_template_b_abs[res_index] == 0){ // Button Press Event
    6cd0:	f1bc 0f00 	cmp.w	ip, #0
    6cd4:	d14d      	bne.n	6d72 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x26e>
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    6cd6:	699a      	ldr	r2, [r3, #24]
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    6cd8:	f8d3 e01c 	ldr.w	lr, [r3, #28]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    6cdc:	2a00      	cmp	r2, #0
    6cde:	bf0c      	ite	eq
    6ce0:	227f      	moveq	r2, #127	; 0x7f
    6ce2:	2200      	movne	r2, #0
    6ce4:	619a      	str	r2, [r3, #24]
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    6ce6:	f1be 0f00 	cmp.w	lr, #0
    6cea:	d13c      	bne.n	6d66 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x262>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    6cec:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 0;
    6cf0:	f8c3 c01c 	str.w	ip, [r3, #28]
				grid_bu16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    6cf4:	f895 c00f 	ldrb.w	ip, [r5, #15]
    6cf8:	9f01      	ldr	r7, [sp, #4]
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    6cfa:	69db      	ldr	r3, [r3, #28]
				grid_bu16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    6cfc:	eb04 1c0c 	add.w	ip, r4, ip, lsl #4
    6d00:	44bc      	add	ip, r7
    6d02:	f88c 2002 	strb.w	r2, [ip, #2]
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    6d06:	7bea      	ldrb	r2, [r5, #15]
    6d08:	eb04 1202 	add.w	r2, r4, r2, lsl #4
    6d0c:	443a      	add	r2, r7
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    6d0e:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    6d12:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
    6d16:	2300      	movs	r3, #0
                    template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    6d18:	f8da 2004 	ldr.w	r2, [sl, #4]
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    6d1c:	441a      	add	r2, r3
    6d1e:	3310      	adds	r3, #16
    6d20:	68d2      	ldr	r2, [r2, #12]
    6d22:	440a      	add	r2, r1
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    6d24:	2b40      	cmp	r3, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    6d26:	f8c2 c014 	str.w	ip, [r2, #20]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    6d2a:	d1f5      	bne.n	6d18 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DP);
    6d2c:	7be9      	ldrb	r1, [r5, #15]
    6d2e:	2304      	movs	r3, #4
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    6d30:	4632      	mov	r2, r6
    6d32:	4f23      	ldr	r7, [pc, #140]	; (6dc0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2bc>)
				grid_bu16_helper_template_b_abs[result_index[i]] = res_value;
    6d34:	4426      	add	r6, r4
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    6d36:	47b8      	blx	r7
				grid_bu16_helper_template_b_abs[result_index[i]] = res_value;
    6d38:	4820      	ldr	r0, [pc, #128]	; (6dbc <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>)
    6d3a:	f886 8082 	strb.w	r8, [r6, #130]	; 0x82
	for (uint8_t i=0; i<2; i++)
    6d3e:	9b01      	ldr	r3, [sp, #4]
    6d40:	b173      	cbz	r3, 6d60 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    6d42:	2300      	movs	r3, #0
    6d44:	7023      	strb	r3, [r4, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    6d46:	4b1f      	ldr	r3, [pc, #124]	; (6dc4 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c0>)
    6d48:	4798      	blx	r3
    6d4a:	e6e6      	b.n	6b1a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x16>
	else if (adcresult_0<200){
    6d4c:	2bc7      	cmp	r3, #199	; 0xc7
    6d4e:	d887      	bhi.n	6c60 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x15c>
		result_value[0] = 127;
    6d50:	237f      	movs	r3, #127	; 0x7f
    6d52:	f88d 300c 	strb.w	r3, [sp, #12]
    6d56:	e780      	b.n	6c5a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
	else if (adcresult_1<200){
    6d58:	2bc7      	cmp	r3, #199	; 0xc7
    6d5a:	d88d      	bhi.n	6c78 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x174>
		result_value[1] = 127;
    6d5c:	237f      	movs	r3, #127	; 0x7f
    6d5e:	e786      	b.n	6c6e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x16a>
    6d60:	2301      	movs	r3, #1
    6d62:	9301      	str	r3, [sp, #4]
    6d64:	e79c      	b.n	6ca0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x19c>
				else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    6d66:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    6d6a:	bf08      	it	eq
    6d6c:	f04f 0c7f 	moveq.w	ip, #127	; 0x7f
    6d70:	e7be      	b.n	6cf0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1ec>
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    6d72:	aa0a      	add	r2, sp, #40	; 0x28
    6d74:	4432      	add	r2, r6
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    6d76:	60de      	str	r6, [r3, #12]
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    6d78:	f812 2c10 	ldrb.w	r2, [r2, #-16]
    6d7c:	611a      	str	r2, [r3, #16]
    6d7e:	2300      	movs	r3, #0
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    6d80:	469c      	mov	ip, r3
                    template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    6d82:	f8da 2004 	ldr.w	r2, [sl, #4]
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    6d86:	441a      	add	r2, r3
    6d88:	3310      	adds	r3, #16
    6d8a:	68d2      	ldr	r2, [r2, #12]
    6d8c:	440a      	add	r2, r1
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    6d8e:	2b40      	cmp	r3, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    6d90:	f8c2 c014 	str.w	ip, [r2, #20]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    6d94:	d1f5      	bne.n	6d82 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x27e>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    6d96:	7be9      	ldrb	r1, [r5, #15]
    6d98:	2305      	movs	r3, #5
    6d9a:	e7c9      	b.n	6d30 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>
    6d9c:	200005ec 	.word	0x200005ec
    6da0:	00008eeb 	.word	0x00008eeb
    6da4:	20006f94 	.word	0x20006f94
    6da8:	20000308 	.word	0x20000308
    6dac:	41008000 	.word	0x41008000
    6db0:	20014b14 	.word	0x20014b14
    6db4:	20014ce8 	.word	0x20014ce8
    6db8:	0001492f 	.word	0x0001492f
    6dbc:	20006f88 	.word	0x20006f88
    6dc0:	0000a1f5 	.word	0x0000a1f5
    6dc4:	00006ae5 	.word	0x00006ae5
    6dc8:	0000a641 	.word	0x0000a641
    6dcc:	0000d049 	.word	0x0000d049

00006dd0 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    6dd0:	b570      	push	{r4, r5, r6, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    6dd2:	4c0b      	ldr	r4, [pc, #44]	; (6e00 <grid_module_bu16_revb_hardware_init+0x30>)
    6dd4:	4e0b      	ldr	r6, [pc, #44]	; (6e04 <grid_module_bu16_revb_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    6dd6:	4d0c      	ldr	r5, [pc, #48]	; (6e08 <grid_module_bu16_revb_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    6dd8:	4b0c      	ldr	r3, [pc, #48]	; (6e0c <grid_module_bu16_revb_hardware_init+0x3c>)
    6dda:	2200      	movs	r2, #0
    6ddc:	4611      	mov	r1, r2
    6dde:	4620      	mov	r0, r4
    6de0:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    6de2:	2200      	movs	r2, #0
    6de4:	4b09      	ldr	r3, [pc, #36]	; (6e0c <grid_module_bu16_revb_hardware_init+0x3c>)
    6de6:	4611      	mov	r1, r2
    6de8:	4628      	mov	r0, r5
    6dea:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    6dec:	4620      	mov	r0, r4
    6dee:	4c08      	ldr	r4, [pc, #32]	; (6e10 <grid_module_bu16_revb_hardware_init+0x40>)
    6df0:	2100      	movs	r1, #0
    6df2:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    6df4:	4628      	mov	r0, r5
    6df6:	4623      	mov	r3, r4
    6df8:	2100      	movs	r1, #0

}
    6dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    6dfe:	4718      	bx	r3
    6e00:	20014b14 	.word	0x20014b14
    6e04:	0000cfd1 	.word	0x0000cfd1
    6e08:	20014ce8 	.word	0x20014ce8
    6e0c:	00006b05 	.word	0x00006b05
    6e10:	0000cf91 	.word	0x0000cf91

00006e14 <grid_module_bu16_revb_init>:



void grid_module_bu16_revb_init(){
    6e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	grid_led_lowlevel_init(&grid_led_state, 16);
    6e18:	4b12      	ldr	r3, [pc, #72]	; (6e64 <grid_module_bu16_revb_init+0x50>)
    6e1a:	4813      	ldr	r0, [pc, #76]	; (6e68 <grid_module_bu16_revb_init+0x54>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
	
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
		
		grid_ui_bank_init(&grid_ui_state, i, 16);
    6e1c:	4e13      	ldr	r6, [pc, #76]	; (6e6c <grid_module_bu16_revb_init+0x58>)
    6e1e:	4f14      	ldr	r7, [pc, #80]	; (6e70 <grid_module_bu16_revb_init+0x5c>)
		
		for (uint8_t j=0; j<16; j++){

			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    6e20:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6e80 <grid_module_bu16_revb_init+0x6c>
	grid_led_lowlevel_init(&grid_led_state, 16);
    6e24:	2110      	movs	r1, #16
    6e26:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    6e28:	4810      	ldr	r0, [pc, #64]	; (6e6c <grid_module_bu16_revb_init+0x58>)
    6e2a:	4b12      	ldr	r3, [pc, #72]	; (6e74 <grid_module_bu16_revb_init+0x60>)
    6e2c:	2104      	movs	r1, #4
    6e2e:	4798      	blx	r3
    6e30:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);
    6e32:	2210      	movs	r2, #16
    6e34:	b2e1      	uxtb	r1, r4
    6e36:	4630      	mov	r0, r6
    6e38:	47b8      	blx	r7
		for (uint8_t j=0; j<16; j++){
    6e3a:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);
    6e3e:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    6e40:	6870      	ldr	r0, [r6, #4]
    6e42:	b2e9      	uxtb	r1, r5
    6e44:	2202      	movs	r2, #2
    6e46:	4448      	add	r0, r9
    6e48:	3501      	adds	r5, #1
    6e4a:	47c0      	blx	r8
		for (uint8_t j=0; j<16; j++){
    6e4c:	2d10      	cmp	r5, #16
    6e4e:	d1f7      	bne.n	6e40 <grid_module_bu16_revb_init+0x2c>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    6e50:	3401      	adds	r4, #1
    6e52:	2c04      	cmp	r4, #4
    6e54:	d1ed      	bne.n	6e32 <grid_module_bu16_revb_init+0x1e>

		}		
		
	}
				
	grid_module_bu16_revb_hardware_init();
    6e56:	4b08      	ldr	r3, [pc, #32]	; (6e78 <grid_module_bu16_revb_init+0x64>)
    6e58:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();

};
    6e5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_bu16_revb_hardware_start_transfer();
    6e5e:	4b07      	ldr	r3, [pc, #28]	; (6e7c <grid_module_bu16_revb_init+0x68>)
    6e60:	4718      	bx	r3
    6e62:	bf00      	nop
    6e64:	000066dd 	.word	0x000066dd
    6e68:	200145c4 	.word	0x200145c4
    6e6c:	20006f88 	.word	0x20006f88
    6e70:	00009285 	.word	0x00009285
    6e74:	00009251 	.word	0x00009251
    6e78:	00006dd1 	.word	0x00006dd1
    6e7c:	00006ae5 	.word	0x00006ae5
    6e80:	0000a52d 	.word	0x0000a52d

00006e84 <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    6e84:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6e86:	4b08      	ldr	r3, [pc, #32]	; (6ea8 <grid_module_en16_reva_hardware_start_transfer+0x24>)
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    6e88:	4808      	ldr	r0, [pc, #32]	; (6eac <grid_module_en16_reva_hardware_start_transfer+0x28>)

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    6e8a:	4c09      	ldr	r4, [pc, #36]	; (6eb0 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    6e8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    6e90:	619a      	str	r2, [r3, #24]
	spi_m_async_enable(&UI_SPI);
    6e92:	4b08      	ldr	r3, [pc, #32]	; (6eb4 <grid_module_en16_reva_hardware_start_transfer+0x30>)
    6e94:	4798      	blx	r3
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    6e96:	4a08      	ldr	r2, [pc, #32]	; (6eb8 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    6e98:	4804      	ldr	r0, [pc, #16]	; (6eac <grid_module_en16_reva_hardware_start_transfer+0x28>)
    6e9a:	46a4      	mov	ip, r4
    6e9c:	2308      	movs	r3, #8

}
    6e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    6ea2:	f102 010e 	add.w	r1, r2, #14
    6ea6:	4760      	bx	ip
    6ea8:	41008000 	.word	0x41008000
    6eac:	20014a00 	.word	0x20014a00
    6eb0:	0000dccd 	.word	0x0000dccd
    6eb4:	0000dc2d 	.word	0x0000dc2d
    6eb8:	2000067e 	.word	0x2000067e

00006ebc <grid_module_en16_reva_hardware_transfer_complete_cb>:

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    6ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6ec0:	4ba8      	ldr	r3, [pc, #672]	; (7164 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a8>)
	
	// Set the shift registers to continuously load data until new transaction is issued
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);


	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    6ec2:	48a9      	ldr	r0, [pc, #676]	; (7168 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
	if (bank == 255){
		bank=0;
	}


	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    6ec4:	4fa8      	ldr	r7, [pc, #672]	; (7168 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    6ec6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    6eca:	615a      	str	r2, [r3, #20]
void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    6ecc:	b089      	sub	sp, #36	; 0x24
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    6ece:	4ba7      	ldr	r3, [pc, #668]	; (716c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b0>)
    6ed0:	4798      	blx	r3
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    6ed2:	7c7b      	ldrb	r3, [r7, #17]
		bank=0;
    6ed4:	28ff      	cmp	r0, #255	; 0xff
    6ed6:	bf14      	ite	ne
    6ed8:	4606      	movne	r6, r0
    6eda:	2600      	moveq	r6, #0
		
	if (bank_changed){
    6edc:	2b00      	cmp	r3, #0
    6ede:	f040 815f 	bne.w	71a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>
		

		uint8_t i = UI_ENCODER_LOOKUP[j];
		

		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    6ee2:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 719c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>
				uint8_t controlnumber = i;
 
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER] = res_index;
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 

				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    6ee6:	0133      	lsls	r3, r6, #4
    6ee8:	9302      	str	r3, [sp, #8]
    6eea:	eb08 1306 	add.w	r3, r8, r6, lsl #4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    6eee:	f04f 0b00 	mov.w	fp, #0
				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    6ef2:	9303      	str	r3, [sp, #12]
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    6ef4:	f3cb 0346 	ubfx	r3, fp, #1, #7
    6ef8:	f00b 0201 	and.w	r2, fp, #1
    6efc:	f818 3003 	ldrb.w	r3, [r8, r3]
    6f00:	0092      	lsls	r2, r2, #2
    6f02:	4113      	asrs	r3, r2
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    6f04:	eb08 020b 	add.w	r2, r8, fp
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    6f08:	b2de      	uxtb	r6, r3
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    6f0a:	f892 015c 	ldrb.w	r0, [r2, #348]	; 0x15c
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    6f0e:	f003 030f 	and.w	r3, r3, #15
		if (old_value != new_value){
    6f12:	4283      	cmp	r3, r0
    6f14:	fa5f f18b 	uxtb.w	r1, fp
    6f18:	f000 8115 	beq.w	7146 <grid_module_en16_reva_hardware_transfer_complete_cb+0x28a>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    6f1c:	4894      	ldr	r0, [pc, #592]	; (7170 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b4>)
            UI_SPI_RX_BUFFER_LAST[j] = new_value;
    6f1e:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
			UI_SPI_DEBUG = j;
    6f22:	4a94      	ldr	r2, [pc, #592]	; (7174 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
		uint8_t i = UI_ENCODER_LOOKUP[j];
    6f24:	f81b 4000 	ldrb.w	r4, [fp, r0]
			UI_SPI_DEBUG = j;
    6f28:	7011      	strb	r1, [r2, #0]
			if (button_value != grid_ui_encoder_array[i].button_value){
    6f2a:	4d93      	ldr	r5, [pc, #588]	; (7178 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2bc>)
			uint8_t button_value = (new_value&0b00000100)?1:0;
    6f2c:	f3c3 0280 	ubfx	r2, r3, #2, #1
    6f30:	9201      	str	r2, [sp, #4]
            uint8_t phase_a      = (new_value&0b00000010)?1:0;
    6f32:	f3c3 0240 	ubfx	r2, r3, #1, #1
    6f36:	9200      	str	r2, [sp, #0]
			if (button_value != grid_ui_encoder_array[i].button_value){
    6f38:	eb05 1204 	add.w	r2, r5, r4, lsl #4
    6f3c:	9801      	ldr	r0, [sp, #4]
    6f3e:	7851      	ldrb	r1, [r2, #1]
    6f40:	4281      	cmp	r1, r0
			uint8_t phase_b      = (new_value&0b00000001)?1:0;
    6f42:	f006 0601 	and.w	r6, r6, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    6f46:	ea4f 1704 	mov.w	r7, r4, lsl #4
    6f4a:	d04d      	beq.n	6fe8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x12c>
				grid_ui_encoder_array[i].button_changed = 1;
    6f4c:	2101      	movs	r1, #1
				grid_ui_encoder_array[i].button_value = new_value>>2;
    6f4e:	089b      	lsrs	r3, r3, #2
				grid_ui_encoder_array[i].button_changed = 1;
    6f50:	7091      	strb	r1, [r2, #2]
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    6f52:	f8df a214 	ldr.w	sl, [pc, #532]	; 7168 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>
				grid_ui_encoder_array[i].button_value = new_value>>2;
    6f56:	7053      	strb	r3, [r2, #1]
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    6f58:	4a88      	ldr	r2, [pc, #544]	; (717c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    6f5a:	f8df c230 	ldr.w	ip, [pc, #560]	; 718c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    6f5e:	6852      	ldr	r2, [r2, #4]
    6f60:	f89a 100f 	ldrb.w	r1, [sl, #15]
    6f64:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    6f68:	2164      	movs	r1, #100	; 0x64
    6f6a:	68d2      	ldr	r2, [r2, #12]
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    6f6c:	f10d 0910 	add.w	r9, sp, #16
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    6f70:	fb04 2201 	mla	r2, r4, r1, r2
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    6f74:	f8dc 1004 	ldr.w	r1, [ip, #4]
    6f78:	f8dc 0000 	ldr.w	r0, [ip]
    6f7c:	46ce      	mov	lr, r9
    6f7e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    6f82:	497f      	ldr	r1, [pc, #508]	; (7180 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    6f84:	f10c 0c08 	add.w	ip, ip, #8
    6f88:	458c      	cmp	ip, r1
    6f8a:	46f1      	mov	r9, lr
    6f8c:	d1f2      	bne.n	6f74 <grid_module_en16_reva_hardware_transfer_complete_cb+0xb8>
				if (grid_ui_encoder_array[i].button_value == 0){ // Button Press Event
    6f8e:	a908      	add	r1, sp, #32
    6f90:	4421      	add	r1, r4
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    6f92:	60d4      	str	r4, [r2, #12]
				if (grid_ui_encoder_array[i].button_value == 0){ // Button Press Event
    6f94:	2b00      	cmp	r3, #0
    6f96:	f040 8152 	bne.w	723e <grid_module_en16_reva_hardware_transfer_complete_cb+0x382>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    6f9a:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    6f9e:	6111      	str	r1, [r2, #16]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    6fa0:	6991      	ldr	r1, [r2, #24]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;
    6fa2:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    6fa6:	2900      	cmp	r1, #0
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    6fa8:	69d1      	ldr	r1, [r2, #28]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;
    6faa:	f8c2 c014 	str.w	ip, [r2, #20]
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    6fae:	bf0c      	ite	eq
    6fb0:	4660      	moveq	r0, ip
    6fb2:	2000      	movne	r0, #0
    6fb4:	6190      	str	r0, [r2, #24]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    6fb6:	2900      	cmp	r1, #0
    6fb8:	f040 813d 	bne.w	7236 <grid_module_en16_reva_hardware_transfer_complete_cb+0x37a>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    6fbc:	233f      	movs	r3, #63	; 0x3f
					grid_en16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    6fbe:	496a      	ldr	r1, [pc, #424]	; (7168 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    6fc0:	61d3      	str	r3, [r2, #28]
					grid_en16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    6fc2:	7bcb      	ldrb	r3, [r1, #15]
    6fc4:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    6fc8:	4423      	add	r3, r4
    6fca:	7718      	strb	r0, [r3, #28]
					grid_en16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    6fcc:	7bcb      	ldrb	r3, [r1, #15]
    6fce:	69d2      	ldr	r2, [r2, #28]
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    6fd0:	7bc9      	ldrb	r1, [r1, #15]
					grid_en16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    6fd2:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    6fd6:	4423      	add	r3, r4
    6fd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    6fdc:	2304      	movs	r3, #4
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    6fde:	4867      	ldr	r0, [pc, #412]	; (717c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    6fe0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 7190 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>
    6fe4:	4622      	mov	r2, r4
    6fe6:	47c8      	blx	r9
            if (a_now == 1 && b_now == 1){ //detent found
    6fe8:	9b00      	ldr	r3, [sp, #0]
    6fea:	2b00      	cmp	r3, #0
    6fec:	f000 8155 	beq.w	729a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3de>
    6ff0:	2e00      	cmp	r6, #0
    6ff2:	f000 8155 	beq.w	72a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
			uint8_t b_prev = grid_ui_encoder_array[i].phase_b_previous;
    6ff6:	19eb      	adds	r3, r5, r7
                if (b_prev == 0 && grid_ui_encoder_array[i].phase_change_lock == 0){
    6ff8:	7b9a      	ldrb	r2, [r3, #14]
    6ffa:	2a00      	cmp	r2, #0
    6ffc:	f040 8128 	bne.w	7250 <grid_module_en16_reva_hardware_transfer_complete_cb+0x394>
    7000:	7bd9      	ldrb	r1, [r3, #15]
    7002:	2900      	cmp	r1, #0
    7004:	f040 814c 	bne.w	72a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
                    grid_ui_encoder_array[i].phase_change_lock = 1;
    7008:	2201      	movs	r2, #1
    700a:	73da      	strb	r2, [r3, #15]
                    delta = -1;
    700c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    7010:	442f      	add	r7, r5
    7012:	9b00      	ldr	r3, [sp, #0]
    7014:	737b      	strb	r3, [r7, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    7016:	73be      	strb	r6, [r7, #14]
			if (delta != 0){
    7018:	f1b9 0f00 	cmp.w	r9, #0
    701c:	f000 8093 	beq.w	7146 <grid_module_en16_reva_hardware_transfer_complete_cb+0x28a>
				uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time);
    7020:	68b9      	ldr	r1, [r7, #8]
    7022:	4851      	ldr	r0, [pc, #324]	; (7168 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    7024:	4b57      	ldr	r3, [pc, #348]	; (7184 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    7026:	4798      	blx	r3
				if (elapsed_ms>25){
    7028:	f5b0 7fd0 	cmp.w	r0, #416	; 0x1a0
    702c:	f080 811b 	bcs.w	7266 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3aa>
                uint32_t elapsed_ms = elapsed_time/RTC1MS;
    7030:	0900      	lsrs	r0, r0, #4
    7032:	2801      	cmp	r0, #1
    7034:	bf38      	it	cc
    7036:	2001      	movcc	r0, #1
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    7038:	4e4b      	ldr	r6, [pc, #300]	; (7168 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    703a:	4b53      	ldr	r3, [pc, #332]	; (7188 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
				uint8_t velocityfactor = (25*25-elapsed_ms*elapsed_ms)/150 + 1;
    703c:	f240 2771 	movw	r7, #625	; 0x271
    7040:	fb00 7010 	mls	r0, r0, r0, r7
    7044:	2796      	movs	r7, #150	; 0x96
    7046:	fbb0 f7f7 	udiv	r7, r0, r7
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    704a:	4630      	mov	r0, r6
    704c:	4798      	blx	r3
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    704e:	4a4b      	ldr	r2, [pc, #300]	; (717c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    7050:	6852      	ldr	r2, [r2, #4]
    7052:	7bf1      	ldrb	r1, [r6, #15]
                uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7054:	4e4d      	ldr	r6, [pc, #308]	; (718c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7056:	eb02 1201 	add.w	r2, r2, r1, lsl #4
				uint8_t velocityfactor = (25*25-elapsed_ms*elapsed_ms)/150 + 1;
    705a:	3701      	adds	r7, #1
    705c:	b2ff      	uxtb	r7, r7
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    705e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
				delta_high = delta * (velocityfactor * 2 - 1);
    7062:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    7066:	eb0a 0a47 	add.w	sl, sl, r7, lsl #1
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    706a:	68d2      	ldr	r2, [r2, #12]
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    706c:	60a8      	str	r0, [r5, #8]
				delta_high = delta * (velocityfactor * 2 - 1);
    706e:	fb0a fa09 	mul.w	sl, sl, r9
				delta_low =  delta * velocityfactor;			
    7072:	fb07 f509 	mul.w	r5, r7, r9
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7076:	2164      	movs	r1, #100	; 0x64
				delta_low =  delta * velocityfactor;			
    7078:	b2ab      	uxth	r3, r5
				delta_high = delta * (velocityfactor * 2 - 1);
    707a:	fa1f f78a 	uxth.w	r7, sl
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    707e:	fb04 2201 	mla	r2, r4, r1, r2
                uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7082:	f10d 0e10 	add.w	lr, sp, #16
    7086:	6871      	ldr	r1, [r6, #4]
    7088:	6830      	ldr	r0, [r6, #0]
    708a:	46f4      	mov	ip, lr
    708c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    7090:	493b      	ldr	r1, [pc, #236]	; (7180 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    7092:	3608      	adds	r6, #8
    7094:	428e      	cmp	r6, r1
    7096:	46e6      	mov	lr, ip
    7098:	d1f5      	bne.n	7086 <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ca>
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 
    709a:	a908      	add	r1, sp, #32
    709c:	4421      	add	r1, r4
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    709e:	6214      	str	r4, [r2, #32]
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 
    70a0:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    70a4:	6251      	str	r1, [r2, #36]	; 0x24
				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    70a6:	9903      	ldr	r1, [sp, #12]
    70a8:	4421      	add	r1, r4
    70aa:	f891 c09c 	ldrb.w	ip, [r1, #156]	; 0x9c
				uint8_t new_abs_low_velocity_value = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    70ae:	f891 60dc 	ldrb.w	r6, [r1, #220]	; 0xdc
				uint8_t new_abs_high_velocity_value = grid_en16_helper_template_e_abs_high_velocity[bank][i];
    70b2:	f891 011c 	ldrb.w	r0, [r1, #284]	; 0x11c
                
				uint8_t new_rel_no_velocity_value =  template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL];
    70b6:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
				
				if (delta != 0){
                    
                    
                    // ABSOLUTE NO VELOCITY						
					if (new_abs_no_velocity_value + delta < 0){
    70ba:	44cc      	add	ip, r9
    70bc:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    70c0:	f000 80d3 	beq.w	726a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ae>
						new_abs_no_velocity_value = 0;
					}
					else if (new_abs_no_velocity_value + delta > 127){
    70c4:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    70c8:	f300 80d2 	bgt.w	7270 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b4>
						new_abs_no_velocity_value = 127;
					}
					else{
						new_abs_no_velocity_value += delta;
    70cc:	fa5f fc8c 	uxtb.w	ip, ip
					}	
                    
                    // ABSOLUTE LOW VELOCITY						
					if (new_abs_low_velocity_value + delta_low < 0){
    70d0:	1975      	adds	r5, r6, r5
    70d2:	b2db      	uxtb	r3, r3
    70d4:	f100 80cf 	bmi.w	7276 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ba>
						new_abs_low_velocity_value = 0;
					}
					else if (new_abs_low_velocity_value + delta_low > 127){
    70d8:	2d7f      	cmp	r5, #127	; 0x7f
    70da:	f300 80ce 	bgt.w	727a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3be>
						new_abs_low_velocity_value = 127;
					}
					else{
						new_abs_low_velocity_value += delta_low;
    70de:	441e      	add	r6, r3
    70e0:	b2f6      	uxtb	r6, r6
					}	
  					
                    // ABSOLUTE HIGH VELOCITY						
					if (new_abs_high_velocity_value + delta_high < 0){
    70e2:	eb10 0a0a 	adds.w	sl, r0, sl
    70e6:	b2ff      	uxtb	r7, r7
    70e8:	f100 80c9 	bmi.w	727e <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c2>
						new_abs_high_velocity_value = 0;
					}
					else if (new_abs_high_velocity_value + delta_high > 127){
    70ec:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    70f0:	f300 80c7 	bgt.w	7282 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c6>
						new_abs_high_velocity_value = 127;
					}
					else{
						new_abs_high_velocity_value += delta_high;
    70f4:	4438      	add	r0, r7
    70f6:	b2c0      	uxtb	r0, r0
					}	



                    // RELATIVE NO VELOCITY
					if (new_rel_no_velocity_value == 255){
    70f8:	29ff      	cmp	r1, #255	; 0xff
    70fa:	f040 80c4 	bne.w	7286 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ca>
						if (delta>0){
							new_rel_no_velocity_value = 65;
						}
						else{
							new_rel_no_velocity_value = 63;
    70fe:	f1b9 0f01 	cmp.w	r9, #1
					}
                    
                    // RELATIVE LOW VELOCITY
					if (new_rel_low_velocity_value == 255){
                        
                        new_rel_low_velocity_value = 64 + delta_low;
    7102:	f103 0340 	add.w	r3, r3, #64	; 0x40
							new_rel_no_velocity_value = 63;
    7106:	bf0c      	ite	eq
    7108:	2541      	moveq	r5, #65	; 0x41
    710a:	253f      	movne	r5, #63	; 0x3f
                        new_rel_low_velocity_value = 64 + delta_low;
    710c:	b2db      	uxtb	r3, r3
					}
                    
                    // RELATIVE HIGH VELOCITY
					if (new_rel_high_velocity_value == 255){
				
                        new_rel_high_velocity_value = 64 + delta_high;
    710e:	3740      	adds	r7, #64	; 0x40
	
                    
                    
					
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL] = new_rel_no_velocity_value;
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_LOW] = new_rel_low_velocity_value;
    7110:	e9c2 530d 	strd	r5, r3, [r2, #52]	; 0x34
                    
                    
                    
                    
                    
                    if (button_value == 1){
    7114:	9b01      	ldr	r3, [sp, #4]
    7116:	4914      	ldr	r1, [pc, #80]	; (7168 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    7118:	4d1d      	ldr	r5, [pc, #116]	; (7190 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
						new_rel_high_velocity_value += delta_high;
    711a:	b2ff      	uxtb	r7, r7
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_HIGH] = new_rel_high_velocity_value;
    711c:	63d7      	str	r7, [r2, #60]	; 0x3c
                    if (button_value == 1){
    711e:	2b00      	cmp	r3, #0
    7120:	f000 80b8 	beq.w	7294 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d8>
                        
                        // ABS is only updated if nonpush rotation event happened
                        grid_en16_helper_template_e_abs[bank][i] = new_abs_no_velocity_value;
    7124:	9b02      	ldr	r3, [sp, #8]
                        
                        // ABS high velocity
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = new_abs_high_velocity_value;
                        
                        
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);				
    7126:	7bc9      	ldrb	r1, [r1, #15]
                        grid_en16_helper_template_e_abs[bank][i] = new_abs_no_velocity_value;
    7128:	4443      	add	r3, r8
    712a:	4423      	add	r3, r4
    712c:	f883 c09c 	strb.w	ip, [r3, #156]	; 0x9c
                        grid_en16_helper_template_e_abs_low_velocity[bank][i] = new_abs_low_velocity_value;
    7130:	f883 60dc 	strb.w	r6, [r3, #220]	; 0xdc
                        grid_en16_helper_template_e_abs_high_velocity[bank][i] = new_abs_high_velocity_value;
    7134:	f883 011c 	strb.w	r0, [r3, #284]	; 0x11c
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = new_abs_low_velocity_value;
    7138:	e9c2 c60a 	strd	ip, r6, [r2, #40]	; 0x28
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = new_abs_high_velocity_value;
    713c:	6310      	str	r0, [r2, #48]	; 0x30
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);				
    713e:	2301      	movs	r3, #1
                    }
                    else{
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_ENCPUSHROT);
    7140:	480e      	ldr	r0, [pc, #56]	; (717c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    7142:	4622      	mov	r2, r4
    7144:	47a8      	blx	r5
	for (uint8_t j=0; j<16; j++){
    7146:	f10b 0b01 	add.w	fp, fp, #1
    714a:	f1bb 0f10 	cmp.w	fp, #16
    714e:	f47f aed1 	bne.w	6ef4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x38>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    7152:	4b10      	ldr	r3, [pc, #64]	; (7194 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    7154:	2200      	movs	r2, #0
    7156:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    7158:	4b0f      	ldr	r3, [pc, #60]	; (7198 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
}
    715a:	b009      	add	sp, #36	; 0x24
    715c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	grid_module_en16_reva_hardware_start_transfer();
    7160:	4718      	bx	r3
    7162:	bf00      	nop
    7164:	41008000 	.word	0x41008000
    7168:	20006f94 	.word	0x20006f94
    716c:	00008eeb 	.word	0x00008eeb
    7170:	20000318 	.word	0x20000318
    7174:	20004029 	.word	0x20004029
    7178:	200114fc 	.word	0x200114fc
    717c:	20006f88 	.word	0x20006f88
    7180:	0001494f 	.word	0x0001494f
    7184:	00008f8d 	.word	0x00008f8d
    7188:	00008f89 	.word	0x00008f89
    718c:	0001493f 	.word	0x0001493f
    7190:	0000a1f5 	.word	0x0000a1f5
    7194:	200145e0 	.word	0x200145e0
    7198:	00006e85 	.word	0x00006e85
    719c:	2000067e 	.word	0x2000067e
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    71a0:	b233      	sxth	r3, r6
		grid_sys_state.bank_active_changed = 0;
    71a2:	2400      	movs	r4, #0
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    71a4:	ea4f 1b03 	mov.w	fp, r3, lsl #4
    71a8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 72b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f8>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_en16_helper_template_b_tgl2[bank][i];
    71ac:	f8df a108 	ldr.w	sl, [pc, #264]	; 72b8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3fc>
		grid_sys_state.bank_active_changed = 0;
    71b0:	747c      	strb	r4, [r7, #17]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    71b2:	465d      	mov	r5, fp
    71b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    71b8:	f8df c100 	ldr.w	ip, [pc, #256]	; 72bc <grid_module_en16_reva_hardware_transfer_complete_cb+0x400>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    71bc:	445b      	add	r3, fp
    71be:	2164      	movs	r1, #100	; 0x64
    71c0:	68db      	ldr	r3, [r3, #12]
    71c2:	b2e2      	uxtb	r2, r4
    71c4:	fb01 3304 	mla	r3, r1, r4, r3
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    71c8:	f10d 0e10 	add.w	lr, sp, #16
    71cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
    71d0:	f8dc 0000 	ldr.w	r0, [ip]
    71d4:	46f1      	mov	r9, lr
    71d6:	e8a9 0003 	stmia.w	r9!, {r0, r1}
    71da:	4933      	ldr	r1, [pc, #204]	; (72a8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ec>)
    71dc:	f10c 0c08 	add.w	ip, ip, #8
    71e0:	458c      	cmp	ip, r1
    71e2:	46ce      	mov	lr, r9
    71e4:	d1f2      	bne.n	71cc <grid_module_en16_reva_hardware_transfer_complete_cb+0x310>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    71e6:	a904      	add	r1, sp, #16
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    71e8:	60dc      	str	r4, [r3, #12]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    71ea:	5d09      	ldrb	r1, [r1, r4]
    71ec:	6119      	str	r1, [r3, #16]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_en16_helper_template_b_tgl2[bank][i];
    71ee:	f815 000a 	ldrb.w	r0, [r5, sl]
    71f2:	6198      	str	r0, [r3, #24]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_en16_helper_template_b_tgl3[bank][i];
    71f4:	482d      	ldr	r0, [pc, #180]	; (72ac <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f0>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    71f6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 72c0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x404>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_en16_helper_template_b_tgl3[bank][i];
    71fa:	5c28      	ldrb	r0, [r5, r0]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    71fc:	6259      	str	r1, [r3, #36]	; 0x24
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER] = res_index;
    71fe:	e9c3 0407 	strd	r0, r4, [r3, #28]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS] = grid_en16_helper_template_e_abs[bank][i];
    7202:	492b      	ldr	r1, [pc, #172]	; (72b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f4>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7204:	9200      	str	r2, [sp, #0]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS] = grid_en16_helper_template_e_abs[bank][i];
    7206:	5c68      	ldrb	r0, [r5, r1]
    7208:	6298      	str	r0, [r3, #40]	; 0x28
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    720a:	f101 0040 	add.w	r0, r1, #64	; 0x40
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = grid_en16_helper_template_e_abs_high_velocity[bank][i];			
    720e:	3180      	adds	r1, #128	; 0x80
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    7210:	5c28      	ldrb	r0, [r5, r0]
    7212:	62d8      	str	r0, [r3, #44]	; 0x2c
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = grid_en16_helper_template_e_abs_high_velocity[bank][i];			
    7214:	5c69      	ldrb	r1, [r5, r1]
    7216:	6319      	str	r1, [r3, #48]	; 0x30
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7218:	4640      	mov	r0, r8
    721a:	7bf9      	ldrb	r1, [r7, #15]
    721c:	2300      	movs	r3, #0
    721e:	47c8      	blx	r9
            grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    7220:	3401      	adds	r4, #1
    7222:	7bf9      	ldrb	r1, [r7, #15]
    7224:	9a00      	ldr	r2, [sp, #0]
    7226:	2301      	movs	r3, #1
    7228:	4640      	mov	r0, r8
    722a:	47c8      	blx	r9
		for (uint8_t i = 0; i<16; i++)
    722c:	2c10      	cmp	r4, #16
    722e:	f105 0501 	add.w	r5, r5, #1
    7232:	d1bf      	bne.n	71b4 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>
    7234:	e655      	b.n	6ee2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x26>
					else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    7236:	293f      	cmp	r1, #63	; 0x3f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7238:	bf08      	it	eq
    723a:	4663      	moveq	r3, ip
    723c:	e6bf      	b.n	6fbe <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
 					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    723e:	f811 3c10 	ldrb.w	r3, [r1, #-16]
    7242:	6113      	str	r3, [r2, #16]
 					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;
    7244:	2300      	movs	r3, #0
    7246:	6153      	str	r3, [r2, #20]
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    7248:	f89a 100f 	ldrb.w	r1, [sl, #15]
    724c:	2305      	movs	r3, #5
    724e:	e6c6      	b.n	6fde <grid_module_en16_reva_hardware_transfer_complete_cb+0x122>
                if (a_prev == 0 && grid_ui_encoder_array[i].phase_change_lock == 0){
    7250:	7b5a      	ldrb	r2, [r3, #13]
    7252:	bb2a      	cbnz	r2, 72a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
    7254:	7bd9      	ldrb	r1, [r3, #15]
    7256:	b921      	cbnz	r1, 7262 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a6>
                    grid_ui_encoder_array[i].phase_change_lock = 1;
    7258:	f04f 0901 	mov.w	r9, #1
    725c:	f883 900f 	strb.w	r9, [r3, #15]
    7260:	e6d6      	b.n	7010 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
			int16_t delta = 0;
    7262:	4691      	mov	r9, r2
    7264:	e6d4      	b.n	7010 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
					elapsed_ms = 25;
    7266:	2019      	movs	r0, #25
    7268:	e6e6      	b.n	7038 <grid_module_en16_reva_hardware_transfer_complete_cb+0x17c>
						new_abs_no_velocity_value = 0;
    726a:	f04f 0c00 	mov.w	ip, #0
    726e:	e72f      	b.n	70d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
						new_abs_no_velocity_value = 127;
    7270:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
    7274:	e72c      	b.n	70d0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
						new_abs_low_velocity_value = 0;
    7276:	2600      	movs	r6, #0
    7278:	e733      	b.n	70e2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x226>
						new_abs_low_velocity_value = 127;
    727a:	267f      	movs	r6, #127	; 0x7f
    727c:	e731      	b.n	70e2 <grid_module_en16_reva_hardware_transfer_complete_cb+0x226>
						new_abs_high_velocity_value = 0;
    727e:	2000      	movs	r0, #0
    7280:	e73a      	b.n	70f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x23c>
						new_abs_high_velocity_value = 127;
    7282:	207f      	movs	r0, #127	; 0x7f
    7284:	e738      	b.n	70f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x23c>
						new_rel_no_velocity_value += delta;
    7286:	4489      	add	r9, r1
						new_rel_low_velocity_value += delta_low;
    7288:	440b      	add	r3, r1
						new_rel_no_velocity_value += delta;
    728a:	fa5f f589 	uxtb.w	r5, r9
						new_rel_low_velocity_value += delta_low;
    728e:	b2db      	uxtb	r3, r3
						new_rel_high_velocity_value += delta_high;
    7290:	440f      	add	r7, r1
    7292:	e73d      	b.n	7110 <grid_module_en16_reva_hardware_transfer_complete_cb+0x254>
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_ENCPUSHROT);
    7294:	7bc9      	ldrb	r1, [r1, #15]
    7296:	230d      	movs	r3, #13
    7298:	e752      	b.n	7140 <grid_module_en16_reva_hardware_transfer_complete_cb+0x284>
            if (a_now == 0 && b_now == 0){
    729a:	b90e      	cbnz	r6, 72a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
                grid_ui_encoder_array[i].phase_change_lock = 0;
    729c:	19eb      	adds	r3, r5, r7
    729e:	73de      	strb	r6, [r3, #15]
			int16_t delta = 0;
    72a0:	f04f 0900 	mov.w	r9, #0
    72a4:	e6b4      	b.n	7010 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
    72a6:	bf00      	nop
    72a8:	0001494f 	.word	0x0001494f
    72ac:	200006da 	.word	0x200006da
    72b0:	2000071a 	.word	0x2000071a
    72b4:	20006f88 	.word	0x20006f88
    72b8:	2000069a 	.word	0x2000069a
    72bc:	0001493f 	.word	0x0001493f
    72c0:	0000a641 	.word	0x0000a641

000072c4 <grid_module_en16_reva_hardware_init>:
    72c4:	4b0f      	ldr	r3, [pc, #60]	; (7304 <grid_module_en16_reva_hardware_init+0x40>)
    72c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

void grid_module_en16_reva_hardware_init(void){
    72ca:	b510      	push	{r4, lr}
    72cc:	615a      	str	r2, [r3, #20]
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    72ce:	4c0e      	ldr	r4, [pc, #56]	; (7308 <grid_module_en16_reva_hardware_init+0x44>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    72d0:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    72d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    72d6:	629a      	str	r2, [r3, #40]	; 0x28
    72d8:	4a0c      	ldr	r2, [pc, #48]	; (730c <grid_module_en16_reva_hardware_init+0x48>)
    72da:	629a      	str	r2, [r3, #40]	; 0x28
    72dc:	2103      	movs	r1, #3
    72de:	4b0c      	ldr	r3, [pc, #48]	; (7310 <grid_module_en16_reva_hardware_init+0x4c>)
    72e0:	4620      	mov	r0, r4
    72e2:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 1000000); // was 400000 check clock div setting
    72e4:	490b      	ldr	r1, [pc, #44]	; (7314 <grid_module_en16_reva_hardware_init+0x50>)
    72e6:	4b0c      	ldr	r3, [pc, #48]	; (7318 <grid_module_en16_reva_hardware_init+0x54>)
    72e8:	4620      	mov	r0, r4
    72ea:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    72ec:	490b      	ldr	r1, [pc, #44]	; (731c <grid_module_en16_reva_hardware_init+0x58>)
    72ee:	4b0c      	ldr	r3, [pc, #48]	; (7320 <grid_module_en16_reva_hardware_init+0x5c>)
    72f0:	4620      	mov	r0, r4
    72f2:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    72f4:	4620      	mov	r0, r4
    72f6:	4a0b      	ldr	r2, [pc, #44]	; (7324 <grid_module_en16_reva_hardware_init+0x60>)
    72f8:	4b0b      	ldr	r3, [pc, #44]	; (7328 <grid_module_en16_reva_hardware_init+0x64>)


}
    72fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    72fe:	2100      	movs	r1, #0
    7300:	4718      	bx	r3
    7302:	bf00      	nop
    7304:	41008000 	.word	0x41008000
    7308:	20014a00 	.word	0x20014a00
    730c:	c0000020 	.word	0xc0000020
    7310:	0000dc91 	.word	0x0000dc91
    7314:	000f4240 	.word	0x000f4240
    7318:	0000dc55 	.word	0x0000dc55
    731c:	2000402c 	.word	0x2000402c
    7320:	0000dd75 	.word	0x0000dd75
    7324:	00006ebd 	.word	0x00006ebd
    7328:	0000dd31 	.word	0x0000dd31

0000732c <grid_module_en16_reva_init>:

void grid_module_en16_reva_init(){
    732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	
	grid_led_lowlevel_init(&grid_led_state, 16);
    7330:	4b1d      	ldr	r3, [pc, #116]	; (73a8 <grid_module_en16_reva_init+0x7c>)
    7332:	481e      	ldr	r0, [pc, #120]	; (73ac <grid_module_en16_reva_init+0x80>)

	
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++)
	{
		
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    7334:	4e1e      	ldr	r6, [pc, #120]	; (73b0 <grid_module_en16_reva_init+0x84>)
    7336:	4f1f      	ldr	r7, [pc, #124]	; (73b4 <grid_module_en16_reva_init+0x88>)
		
		for(uint8_t j=0; j<16; j++){
		
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_ENCODER);	
    7338:	f8df 808c 	ldr.w	r8, [pc, #140]	; 73c8 <grid_module_en16_reva_init+0x9c>
	grid_led_lowlevel_init(&grid_led_state, 16);
    733c:	2110      	movs	r1, #16
    733e:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);	
    7340:	481b      	ldr	r0, [pc, #108]	; (73b0 <grid_module_en16_reva_init+0x84>)
    7342:	4b1d      	ldr	r3, [pc, #116]	; (73b8 <grid_module_en16_reva_init+0x8c>)
    7344:	2104      	movs	r1, #4
    7346:	4798      	blx	r3
    7348:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    734a:	2210      	movs	r2, #16
    734c:	b2e1      	uxtb	r1, r4
    734e:	4630      	mov	r0, r6
    7350:	47b8      	blx	r7
		for(uint8_t j=0; j<16; j++){
    7352:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    7356:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_ENCODER);	
    7358:	6870      	ldr	r0, [r6, #4]
    735a:	b2e9      	uxtb	r1, r5
    735c:	2203      	movs	r2, #3
    735e:	4448      	add	r0, r9
    7360:	3501      	adds	r5, #1
    7362:	47c0      	blx	r8
		for(uint8_t j=0; j<16; j++){
    7364:	2d10      	cmp	r5, #16
    7366:	d1f7      	bne.n	7358 <grid_module_en16_reva_init+0x2c>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++)
    7368:	3401      	adds	r4, #1
    736a:	2c04      	cmp	r4, #4
    736c:	d1ed      	bne.n	734a <grid_module_en16_reva_init+0x1e>
    736e:	2200      	movs	r2, #0
    7370:	4b12      	ldr	r3, [pc, #72]	; (73bc <grid_module_en16_reva_init+0x90>)
	// initialize local encoder helper struct
	for (uint8_t j = 0; j<16; j++)
	{
		grid_ui_encoder_array[j].controller_number = j;
		
		grid_ui_encoder_array[j].button_value = 1;
    7372:	2001      	movs	r0, #1
		grid_ui_encoder_array[j].button_changed = 0; 
    7374:	4611      	mov	r1, r2
		grid_ui_encoder_array[j].rotation_value = 0;
		grid_ui_encoder_array[j].rotation_changed = 1;
		grid_ui_encoder_array[j].rotation_direction = 0;
		grid_ui_encoder_array[j].last_real_time = -1;
    7376:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		grid_ui_encoder_array[j].controller_number = j;
    737a:	701a      	strb	r2, [r3, #0]
		grid_ui_encoder_array[j].button_value = 1;
    737c:	3201      	adds	r2, #1
	for (uint8_t j = 0; j<16; j++)
    737e:	2a10      	cmp	r2, #16
		grid_ui_encoder_array[j].button_value = 1;
    7380:	7058      	strb	r0, [r3, #1]
		grid_ui_encoder_array[j].button_changed = 0; 
    7382:	7099      	strb	r1, [r3, #2]
		grid_ui_encoder_array[j].rotation_value = 0;
    7384:	70d9      	strb	r1, [r3, #3]
		grid_ui_encoder_array[j].rotation_changed = 1;
    7386:	7118      	strb	r0, [r3, #4]
		grid_ui_encoder_array[j].rotation_direction = 0;
    7388:	7159      	strb	r1, [r3, #5]
		grid_ui_encoder_array[j].last_real_time = -1;
    738a:	609c      	str	r4, [r3, #8]
		grid_ui_encoder_array[j].velocity = 0;
    738c:	7319      	strb	r1, [r3, #12]
		grid_ui_encoder_array[j].phase_a_previous = 1;
    738e:	7358      	strb	r0, [r3, #13]
		grid_ui_encoder_array[j].phase_b_previous = 1;	
    7390:	7398      	strb	r0, [r3, #14]
        
        grid_ui_encoder_array[j].phase_change_lock = 0;
    7392:	73d9      	strb	r1, [r3, #15]
	for (uint8_t j = 0; j<16; j++)
    7394:	f103 0310 	add.w	r3, r3, #16
    7398:	d1ef      	bne.n	737a <grid_module_en16_reva_init+0x4e>
		
	}
	
	
	grid_module_en16_reva_hardware_init();
    739a:	4b09      	ldr	r3, [pc, #36]	; (73c0 <grid_module_en16_reva_init+0x94>)
    739c:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
	
}
    739e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_en16_reva_hardware_start_transfer();
    73a2:	4b08      	ldr	r3, [pc, #32]	; (73c4 <grid_module_en16_reva_init+0x98>)
    73a4:	4718      	bx	r3
    73a6:	bf00      	nop
    73a8:	000066dd 	.word	0x000066dd
    73ac:	200145c4 	.word	0x200145c4
    73b0:	20006f88 	.word	0x20006f88
    73b4:	00009285 	.word	0x00009285
    73b8:	00009251 	.word	0x00009251
    73bc:	200114fc 	.word	0x200114fc
    73c0:	000072c5 	.word	0x000072c5
    73c4:	00006e85 	.word	0x00006e85
    73c8:	0000a52d 	.word	0x0000a52d

000073cc <grid_module_pbf4_reva_hardware_start_transfer>:
static uint8_t grid_pbf4_helper_template_b_abs[16] = {0};
	
static uint8_t grid_pbf4_helper_template_b_tgl2[GRID_SYS_BANK_MAXNUMBER][16] = {0};
static uint8_t grid_pbf4_helper_template_b_tgl3[GRID_SYS_BANK_MAXNUMBER][16] = {0};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    73cc:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    73ce:	4c04      	ldr	r4, [pc, #16]	; (73e0 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    73d0:	4804      	ldr	r0, [pc, #16]	; (73e4 <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    73d2:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    73d4:	4623      	mov	r3, r4
    73d6:	4804      	ldr	r0, [pc, #16]	; (73e8 <grid_module_pbf4_reva_hardware_start_transfer+0x1c>)
	
}
    73d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    73dc:	4718      	bx	r3
    73de:	bf00      	nop
    73e0:	0000d105 	.word	0x0000d105
    73e4:	20014b14 	.word	0x20014b14
    73e8:	20014ce8 	.word	0x20014ce8
    73ec:	00000000 	.word	0x00000000

000073f0 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    73f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    73f4:	4aa8      	ldr	r2, [pc, #672]	; (7698 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    73f6:	7813      	ldrb	r3, [r2, #0]
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    73f8:	b08b      	sub	sp, #44	; 0x2c
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    73fa:	b933      	cbnz	r3, 740a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    73fc:	7813      	ldrb	r3, [r2, #0]
    73fe:	3301      	adds	r3, #1
    7400:	b2db      	uxtb	r3, r3
    7402:	7013      	strb	r3, [r2, #0]
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
	grid_module_pbf4_reva_hardware_start_transfer();
}
    7404:	b00b      	add	sp, #44	; 0x2c
    7406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_state.bank_active_changed){
    740a:	4ba4      	ldr	r3, [pc, #656]	; (769c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    740c:	7c5a      	ldrb	r2, [r3, #17]
    740e:	469a      	mov	sl, r3
    7410:	bb02      	cbnz	r2, 7454 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x64>
	uint16_t adcresult_0 = 0;
    7412:	2300      	movs	r3, #0
    7414:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t adcresult_1 = 0;
    7418:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    741c:	4ba0      	ldr	r3, [pc, #640]	; (76a0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    741e:	49a1      	ldr	r1, [pc, #644]	; (76a4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    7420:	781a      	ldrb	r2, [r3, #0]
    7422:	3208      	adds	r2, #8
    7424:	5c8d      	ldrb	r5, [r1, r2]
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7426:	781a      	ldrb	r2, [r3, #0]
    7428:	b2d2      	uxtb	r2, r2
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    742a:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    742c:	5c8c      	ldrb	r4, [r1, r2]
	grid_module_pbf4_reva_mux++;
    742e:	781a      	ldrb	r2, [r3, #0]
    7430:	3201      	adds	r2, #1
    7432:	b2d2      	uxtb	r2, r2
    7434:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    7436:	781a      	ldrb	r2, [r3, #0]
    7438:	f002 0207 	and.w	r2, r2, #7
    743c:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    743e:	781a      	ldrb	r2, [r3, #0]
    7440:	f012 0f01 	tst.w	r2, #1
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7444:	b2e4      	uxtb	r4, r4
    7446:	4a98      	ldr	r2, [pc, #608]	; (76a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    7448:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    744c:	d133      	bne.n	74b6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0xc6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    744e:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
}
    7452:	e032      	b.n	74ba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0xca>
		grid_sys_state.bank_active_changed = 0;
    7454:	2500      	movs	r5, #0
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7456:	4c95      	ldr	r4, [pc, #596]	; (76ac <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7458:	4e95      	ldr	r6, [pc, #596]	; (76b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
		grid_sys_state.bank_active_changed = 0;
    745a:	745d      	strb	r5, [r3, #17]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    745c:	2764      	movs	r7, #100	; 0x64
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    745e:	6863      	ldr	r3, [r4, #4]
    7460:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7464:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    7468:	b2ea      	uxtb	r2, r5
    746a:	7a5b      	ldrb	r3, [r3, #9]
    746c:	4293      	cmp	r3, r2
    746e:	d9d0      	bls.n	7412 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x22>
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7470:	6863      	ldr	r3, [r4, #4]
    7472:	f89a 100f 	ldrb.w	r1, [sl, #15]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7476:	9201      	str	r2, [sp, #4]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7478:	eb03 1301 	add.w	r3, r3, r1, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    747c:	4620      	mov	r0, r4
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    747e:	68db      	ldr	r3, [r3, #12]
    7480:	fb07 3302 	mla	r3, r7, r2, r3
    7484:	3501      	adds	r5, #1
    7486:	60da      	str	r2, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7488:	f89a 100f 	ldrb.w	r1, [sl, #15]
    748c:	2300      	movs	r3, #0
    748e:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    7490:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7494:	9a01      	ldr	r2, [sp, #4]
    7496:	2301      	movs	r3, #1
    7498:	4620      	mov	r0, r4
    749a:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    749c:	f89a 100f 	ldrb.w	r1, [sl, #15]
    74a0:	9a01      	ldr	r2, [sp, #4]
    74a2:	2304      	movs	r3, #4
    74a4:	4620      	mov	r0, r4
    74a6:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    74a8:	f89a 100f 	ldrb.w	r1, [sl, #15]
    74ac:	9a01      	ldr	r2, [sp, #4]
    74ae:	2305      	movs	r3, #5
    74b0:	4620      	mov	r0, r4
    74b2:	47b0      	blx	r6
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    74b4:	e7d3      	b.n	745e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x6e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    74b6:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    74ba:	781a      	ldrb	r2, [r3, #0]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    74bc:	4e7d      	ldr	r6, [pc, #500]	; (76b4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    74be:	487e      	ldr	r0, [pc, #504]	; (76b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
	uint32_t input_0 = adcresult_0*1.03;
    74c0:	f8df b210 	ldr.w	fp, [pc, #528]	; 76d4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>
    74c4:	f8df 9210 	ldr.w	r9, [pc, #528]	; 76d8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>
    74c8:	f012 0f02 	tst.w	r2, #2
    74cc:	4a76      	ldr	r2, [pc, #472]	; (76a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    74ce:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    74d2:	bf14      	ite	ne
    74d4:	f8c2 1118 	strne.w	r1, [r2, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    74d8:	f8c2 1114 	streq.w	r1, [r2, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	f013 0f04 	tst.w	r3, #4
    74e2:	4b71      	ldr	r3, [pc, #452]	; (76a8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    74e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    74e8:	bf14      	ite	ne
    74ea:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    74ee:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    74f2:	2100      	movs	r1, #0
    74f4:	2302      	movs	r3, #2
    74f6:	aa05      	add	r2, sp, #20
    74f8:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    74fa:	2302      	movs	r3, #2
    74fc:	f10d 0216 	add.w	r2, sp, #22
    7500:	2100      	movs	r1, #0
    7502:	486e      	ldr	r0, [pc, #440]	; (76bc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    7504:	47b0      	blx	r6
	uint32_t input_0 = adcresult_0*1.03;
    7506:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    750a:	4e6d      	ldr	r6, [pc, #436]	; (76c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    750c:	47d8      	blx	fp
    750e:	a360      	add	r3, pc, #384	; (adr r3, 7690 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    7510:	e9d3 2300 	ldrd	r2, r3, [r3]
    7514:	47b0      	blx	r6
    7516:	47c8      	blx	r9
    7518:	f64f 77ff 	movw	r7, #65535	; 0xffff
    751c:	42b8      	cmp	r0, r7
    751e:	4680      	mov	r8, r0
    7520:	bf28      	it	cs
    7522:	46b8      	movcs	r8, r7
    7524:	9001      	str	r0, [sp, #4]
	adcresult_0 = input_0;
    7526:	f8ad 8014 	strh.w	r8, [sp, #20]
	uint32_t input_1 = adcresult_1*1.03;
    752a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    752e:	47d8      	blx	fp
    7530:	a357      	add	r3, pc, #348	; (adr r3, 7690 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    7532:	e9d3 2300 	ldrd	r2, r3, [r3]
    7536:	47b0      	blx	r6
    7538:	47c8      	blx	r9
	adcresult_1 = input_1;
    753a:	42b8      	cmp	r0, r7
    753c:	4603      	mov	r3, r0
    753e:	bf28      	it	cs
    7540:	463b      	movcs	r3, r7
    7542:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (adc_index_1 == 8 || adc_index_1 == 9){
    7546:	f1a4 0308 	sub.w	r3, r4, #8
    754a:	2b01      	cmp	r3, #1
    754c:	d972      	bls.n	7634 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
	else if (adc_index_0 > 13){ // BUTTON
    754e:	2d0d      	cmp	r5, #13
    7550:	f8df 9188 	ldr.w	r9, [pc, #392]	; 76dc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>
    7554:	f240 80c4 	bls.w	76e0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>
		uint8_t result_value[2] = {0};
    7558:	2300      	movs	r3, #0
		if (adcresult_0>60000){
    755a:	9a01      	ldr	r2, [sp, #4]
		uint8_t result_value[2] = {0};
    755c:	f8ad 300c 	strh.w	r3, [sp, #12]
		uint8_t result_valid[2] = {0};
    7560:	f8ad 3010 	strh.w	r3, [sp, #16]
		if (adcresult_0>60000){
    7564:	f64e 2360 	movw	r3, #60000	; 0xea60
		result_index[0] = adc_index_0-4;
    7568:	3d04      	subs	r5, #4
		result_index[1] = adc_index_1-4;
    756a:	3c04      	subs	r4, #4
		if (adcresult_0>60000){
    756c:	429a      	cmp	r2, r3
		result_index[0] = adc_index_0-4;
    756e:	f88d 5008 	strb.w	r5, [sp, #8]
		result_index[1] = adc_index_1-4;
    7572:	f88d 4009 	strb.w	r4, [sp, #9]
		if (adcresult_0>60000){
    7576:	d963      	bls.n	7640 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x250>
			result_valid[0] = 1;
    7578:	2301      	movs	r3, #1
    757a:	f88d 3010 	strb.w	r3, [sp, #16]
		if (adcresult_1>60000){
    757e:	f64e 2360 	movw	r3, #60000	; 0xea60
    7582:	4298      	cmp	r0, r3
    7584:	d963      	bls.n	764e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x25e>
			result_value[1] = 0;
    7586:	2300      	movs	r3, #0
			result_value[1] = 127;
    7588:	f88d 300d 	strb.w	r3, [sp, #13]
			result_valid[1] = 1;
    758c:	2301      	movs	r3, #1
    758e:	f88d 3011 	strb.w	r3, [sp, #17]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7592:	4b4c      	ldr	r3, [pc, #304]	; (76c4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    7594:	ac06      	add	r4, sp, #24
    7596:	6818      	ldr	r0, [r3, #0]
    7598:	6859      	ldr	r1, [r3, #4]
    759a:	4622      	mov	r2, r4
    759c:	c203      	stmia	r2!, {r0, r1}
    759e:	3308      	adds	r3, #8
    75a0:	454b      	cmp	r3, r9
    75a2:	4614      	mov	r4, r2
    75a4:	d1f7      	bne.n	7596 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a6>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    75a6:	f8df b104 	ldr.w	fp, [pc, #260]	; 76ac <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>
    75aa:	ab03      	add	r3, sp, #12
    75ac:	f10d 0808 	add.w	r8, sp, #8
    75b0:	9301      	str	r3, [sp, #4]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    75b2:	2400      	movs	r4, #0
    75b4:	46d9      	mov	r9, fp
			uint8_t res_value = result_value[i];
    75b6:	9b01      	ldr	r3, [sp, #4]
			uint8_t res_index = result_index[i];
    75b8:	f818 7b01 	ldrb.w	r7, [r8], #1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    75bc:	4a42      	ldr	r2, [pc, #264]	; (76c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
			uint8_t res_value = result_value[i];
    75be:	f813 6b01 	ldrb.w	r6, [r3], #1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    75c2:	5dd2      	ldrb	r2, [r2, r7]
			uint8_t res_value = result_value[i];
    75c4:	9301      	str	r3, [sp, #4]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    75c6:	f8db 3004 	ldr.w	r3, [fp, #4]
    75ca:	f89a 100f 	ldrb.w	r1, [sl, #15]
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    75ce:	4296      	cmp	r6, r2
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    75d0:	b2c9      	uxtb	r1, r1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    75d2:	d02e      	beq.n	7632 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x242>
			uint8_t res_valid = result_valid[i];
    75d4:	a804      	add	r0, sp, #16
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    75d6:	5c20      	ldrb	r0, [r4, r0]
    75d8:	2801      	cmp	r0, #1
    75da:	d12a      	bne.n	7632 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x242>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    75dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    75e0:	2064      	movs	r0, #100	; 0x64
    75e2:	68db      	ldr	r3, [r3, #12]
    75e4:	fb17 f000 	smulbb	r0, r7, r0
    75e8:	4403      	add	r3, r0
				if (grid_pbf4_helper_template_b_abs[res_index] == 0){ // Button Press Event
    75ea:	2a00      	cmp	r2, #0
    75ec:	d13b      	bne.n	7666 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x276>
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    75ee:	6999      	ldr	r1, [r3, #24]
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    75f0:	2900      	cmp	r1, #0
    75f2:	bf0c      	ite	eq
    75f4:	217f      	moveq	r1, #127	; 0x7f
    75f6:	2100      	movne	r1, #0
    75f8:	6199      	str	r1, [r3, #24]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    75fa:	69d9      	ldr	r1, [r3, #28]
    75fc:	bb69      	cbnz	r1, 765a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x26a>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    75fe:	213f      	movs	r1, #63	; 0x3f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7600:	61d9      	str	r1, [r3, #28]
					grid_pbf4_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    7602:	f89a 300f 	ldrb.w	r3, [sl, #15]
					grid_pbf4_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    7606:	f89a 300f 	ldrb.w	r3, [sl, #15]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    760a:	227f      	movs	r2, #127	; 0x7f
					grid_pbf4_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    760c:	2300      	movs	r3, #0
                        template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    760e:	f8d9 1004 	ldr.w	r1, [r9, #4]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    7612:	4419      	add	r1, r3
    7614:	3310      	adds	r3, #16
    7616:	68c9      	ldr	r1, [r1, #12]
    7618:	4401      	add	r1, r0
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    761a:	2b40      	cmp	r3, #64	; 0x40
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    761c:	614a      	str	r2, [r1, #20]
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    761e:	d1f6      	bne.n	760e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x21e>
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DP);
    7620:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7624:	2304      	movs	r3, #4
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    7626:	4d29      	ldr	r5, [pc, #164]	; (76cc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    7628:	463a      	mov	r2, r7
    762a:	4658      	mov	r0, fp
    762c:	47a8      	blx	r5
					grid_pbf4_helper_template_b_abs[result_index[i]] = res_value;
    762e:	4b26      	ldr	r3, [pc, #152]	; (76c8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    7630:	55de      	strb	r6, [r3, r7]
		for (uint8_t i=0; i<2; i++)
    7632:	b184      	cbz	r4, 7656 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x266>
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    7634:	4a18      	ldr	r2, [pc, #96]	; (7698 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    7636:	2300      	movs	r3, #0
    7638:	7013      	strb	r3, [r2, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    763a:	4b25      	ldr	r3, [pc, #148]	; (76d0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    763c:	4798      	blx	r3
    763e:	e6e1      	b.n	7404 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x14>
		else if (adcresult_0<200){
    7640:	9b01      	ldr	r3, [sp, #4]
    7642:	2bc7      	cmp	r3, #199	; 0xc7
    7644:	d89b      	bhi.n	757e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x18e>
			result_value[0] = 127;
    7646:	237f      	movs	r3, #127	; 0x7f
    7648:	f88d 300c 	strb.w	r3, [sp, #12]
    764c:	e794      	b.n	7578 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x188>
		else if (adcresult_1<200){
    764e:	28c7      	cmp	r0, #199	; 0xc7
    7650:	d89f      	bhi.n	7592 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a2>
			result_value[1] = 127;
    7652:	237f      	movs	r3, #127	; 0x7f
    7654:	e798      	b.n	7588 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x198>
    7656:	2401      	movs	r4, #1
    7658:	e7ad      	b.n	75b6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1c6>
					else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    765a:	293f      	cmp	r1, #63	; 0x3f
    765c:	d101      	bne.n	7662 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x272>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    765e:	217f      	movs	r1, #127	; 0x7f
    7660:	e7ce      	b.n	7600 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x210>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 0;
    7662:	61da      	str	r2, [r3, #28]
    7664:	e7cd      	b.n	7602 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x212>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7666:	aa0a      	add	r2, sp, #40	; 0x28
    7668:	19d1      	adds	r1, r2, r7
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    766a:	60df      	str	r7, [r3, #12]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    766c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    7670:	6119      	str	r1, [r3, #16]
    7672:	2300      	movs	r3, #0
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7674:	461a      	mov	r2, r3
                        template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7676:	f8d9 1004 	ldr.w	r1, [r9, #4]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    767a:	4419      	add	r1, r3
    767c:	3310      	adds	r3, #16
    767e:	68c9      	ldr	r1, [r1, #12]
    7680:	4401      	add	r1, r0
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7682:	2b40      	cmp	r3, #64	; 0x40
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7684:	614a      	str	r2, [r1, #20]
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7686:	d1f6      	bne.n	7676 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x286>
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    7688:	f89a 100f 	ldrb.w	r1, [sl, #15]
    768c:	2305      	movs	r3, #5
    768e:	e7ca      	b.n	7626 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x236>
    7690:	47ae147b 	.word	0x47ae147b
    7694:	3ff07ae1 	.word	0x3ff07ae1
    7698:	20004038 	.word	0x20004038
    769c:	20006f94 	.word	0x20006f94
    76a0:	20014554 	.word	0x20014554
    76a4:	20000329 	.word	0x20000329
    76a8:	41008000 	.word	0x41008000
    76ac:	20006f88 	.word	0x20006f88
    76b0:	0000a641 	.word	0x0000a641
    76b4:	0000d049 	.word	0x0000d049
    76b8:	20014b14 	.word	0x20014b14
    76bc:	20014ce8 	.word	0x20014ce8
    76c0:	00011f19 	.word	0x00011f19
    76c4:	0001494f 	.word	0x0001494f
    76c8:	200007eb 	.word	0x200007eb
    76cc:	0000a1f5 	.word	0x0000a1f5
    76d0:	000073cd 	.word	0x000073cd
    76d4:	00011e45 	.word	0x00011e45
    76d8:	0001233d 	.word	0x0001233d
    76dc:	0001495f 	.word	0x0001495f
		if (adc_index_1 == 0 || adc_index_1 == 1){
    76e0:	2c01      	cmp	r4, #1
    76e2:	4e33      	ldr	r6, [pc, #204]	; (77b0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c0>)
    76e4:	d85e      	bhi.n	77a4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b4>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    76e6:	ea88 0107 	eor.w	r1, r8, r7
    76ea:	4628      	mov	r0, r5
    76ec:	47b0      	blx	r6
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    76ee:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    76f2:	1a79      	subs	r1, r7, r1
			grid_ain_add_sample(adc_index_1, adcresult_1);
    76f4:	4620      	mov	r0, r4
    76f6:	47b0      	blx	r6
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    76f8:	4a2e      	ldr	r2, [pc, #184]	; (77b4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c4>)
		result_index[0] = adc_index_0;
    76fa:	f88d 5010 	strb.w	r5, [sp, #16]
		result_index[1] = adc_index_1;
    76fe:	f88d 4011 	strb.w	r4, [sp, #17]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7702:	ab06      	add	r3, sp, #24
    7704:	6810      	ldr	r0, [r2, #0]
    7706:	6851      	ldr	r1, [r2, #4]
    7708:	461c      	mov	r4, r3
    770a:	c403      	stmia	r4!, {r0, r1}
    770c:	3208      	adds	r2, #8
    770e:	454a      	cmp	r2, r9
    7710:	4623      	mov	r3, r4
    7712:	d1f7      	bne.n	7704 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
		for (uint8_t i=0; i<2; i++)
    7714:	ab04      	add	r3, sp, #16
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7716:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 77c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>
    771a:	9301      	str	r3, [sp, #4]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    771c:	f04f 0902 	mov.w	r9, #2
			uint8_t res_index = result_index[i];
    7720:	9b01      	ldr	r3, [sp, #4]
    7722:	f813 4b01 	ldrb.w	r4, [r3], #1
    7726:	9301      	str	r3, [sp, #4]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7728:	f8d8 3004 	ldr.w	r3, [r8, #4]
    772c:	f89a 200f 	ldrb.w	r2, [sl, #15]
    7730:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			if (grid_ain_get_changed(res_index)){
    7734:	4620      	mov	r0, r4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7736:	68dd      	ldr	r5, [r3, #12]
			if (grid_ain_get_changed(res_index)){
    7738:	4b1f      	ldr	r3, [pc, #124]	; (77b8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c8>)
    773a:	4798      	blx	r3
    773c:	b358      	cbz	r0, 7796 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3a6>
				uint8_t res_value = grid_ain_get_average(res_index, 7);
    773e:	4e1f      	ldr	r6, [pc, #124]	; (77bc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    7740:	2107      	movs	r1, #7
    7742:	4620      	mov	r0, r4
    7744:	47b0      	blx	r6
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7746:	2764      	movs	r7, #100	; 0x64
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7748:	ab0a      	add	r3, sp, #40	; 0x28
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    774a:	fb14 f707 	smulbb	r7, r4, r7
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    774e:	4423      	add	r3, r4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7750:	443d      	add	r5, r7
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7752:	f813 3c10 	ldrb.w	r3, [r3, #-16]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7756:	60ec      	str	r4, [r5, #12]
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7758:	612b      	str	r3, [r5, #16]
    775a:	2500      	movs	r5, #0
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    775c:	4b18      	ldr	r3, [pc, #96]	; (77c0 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    775e:	685a      	ldr	r2, [r3, #4]
    7760:	442a      	add	r2, r5
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7762:	2107      	movs	r1, #7
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7764:	68d2      	ldr	r2, [r2, #12]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7766:	4620      	mov	r0, r4
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7768:	eb02 0b07 	add.w	fp, r2, r7
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    776c:	47b0      	blx	r6
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    776e:	2107      	movs	r1, #7
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7770:	f8cb 0014 	str.w	r0, [fp, #20]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7774:	4620      	mov	r0, r4
    7776:	47b0      	blx	r6
    7778:	3510      	adds	r5, #16
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    777a:	2300      	movs	r3, #0
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    777c:	2d40      	cmp	r5, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    777e:	f8cb 0018 	str.w	r0, [fp, #24]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    7782:	f8cb 301c 	str.w	r3, [fp, #28]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7786:	d1e9      	bne.n	775c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x36c>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_AVC7);
    7788:	4622      	mov	r2, r4
    778a:	f89a 100f 	ldrb.w	r1, [sl, #15]
    778e:	4c0d      	ldr	r4, [pc, #52]	; (77c4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>)
    7790:	2301      	movs	r3, #1
    7792:	4640      	mov	r0, r8
    7794:	47a0      	blx	r4
		for (uint8_t i=0; i<2; i++)
    7796:	f1b9 0f01 	cmp.w	r9, #1
    779a:	f43f af4b 	beq.w	7634 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
    779e:	f04f 0901 	mov.w	r9, #1
    77a2:	e7bd      	b.n	7720 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x330>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    77a4:	4641      	mov	r1, r8
    77a6:	4628      	mov	r0, r5
    77a8:	47b0      	blx	r6
			grid_ain_add_sample(adc_index_1, adcresult_1);
    77aa:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    77ae:	e7a1      	b.n	76f4 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
    77b0:	00004631 	.word	0x00004631
    77b4:	0001494f 	.word	0x0001494f
    77b8:	000046f9 	.word	0x000046f9
    77bc:	00004709 	.word	0x00004709
    77c0:	20006f88 	.word	0x20006f88
    77c4:	0000a1f5 	.word	0x0000a1f5

000077c8 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    77c8:	b570      	push	{r4, r5, r6, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    77ca:	4c0b      	ldr	r4, [pc, #44]	; (77f8 <grid_module_pbf4_reva_hardware_init+0x30>)
    77cc:	4e0b      	ldr	r6, [pc, #44]	; (77fc <grid_module_pbf4_reva_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    77ce:	4d0c      	ldr	r5, [pc, #48]	; (7800 <grid_module_pbf4_reva_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    77d0:	4b0c      	ldr	r3, [pc, #48]	; (7804 <grid_module_pbf4_reva_hardware_init+0x3c>)
    77d2:	2200      	movs	r2, #0
    77d4:	4611      	mov	r1, r2
    77d6:	4620      	mov	r0, r4
    77d8:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    77da:	2200      	movs	r2, #0
    77dc:	4b09      	ldr	r3, [pc, #36]	; (7804 <grid_module_pbf4_reva_hardware_init+0x3c>)
    77de:	4611      	mov	r1, r2
    77e0:	4628      	mov	r0, r5
    77e2:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    77e4:	4620      	mov	r0, r4
    77e6:	4c08      	ldr	r4, [pc, #32]	; (7808 <grid_module_pbf4_reva_hardware_init+0x40>)
    77e8:	2100      	movs	r1, #0
    77ea:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    77ec:	4628      	mov	r0, r5
    77ee:	4623      	mov	r3, r4
    77f0:	2100      	movs	r1, #0

}
    77f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    77f6:	4718      	bx	r3
    77f8:	20014b14 	.word	0x20014b14
    77fc:	0000cfd1 	.word	0x0000cfd1
    7800:	20014ce8 	.word	0x20014ce8
    7804:	000073f1 	.word	0x000073f1
    7808:	0000cf91 	.word	0x0000cf91

0000780c <grid_module_pbf4_reva_init>:




void grid_module_pbf4_reva_init(){
    780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    7810:	220e      	movs	r2, #14
    7812:	4c16      	ldr	r4, [pc, #88]	; (786c <grid_module_pbf4_reva_init+0x60>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);

	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
		
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7814:	4e16      	ldr	r6, [pc, #88]	; (7870 <grid_module_pbf4_reva_init+0x64>)
    7816:	f8df 9074 	ldr.w	r9, [pc, #116]	; 788c <grid_module_pbf4_reva_init+0x80>
    781a:	4f16      	ldr	r7, [pc, #88]	; (7874 <grid_module_pbf4_reva_init+0x68>)
	grid_ain_init(16, 5, 14, 7);
    781c:	2307      	movs	r3, #7
    781e:	2105      	movs	r1, #5
    7820:	2010      	movs	r0, #16
    7822:	47a0      	blx	r4
	grid_led_lowlevel_init(&grid_led_state, 12);	
    7824:	4b14      	ldr	r3, [pc, #80]	; (7878 <grid_module_pbf4_reva_init+0x6c>)
    7826:	4815      	ldr	r0, [pc, #84]	; (787c <grid_module_pbf4_reva_init+0x70>)
    7828:	210c      	movs	r1, #12
    782a:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    782c:	4810      	ldr	r0, [pc, #64]	; (7870 <grid_module_pbf4_reva_init+0x64>)
    782e:	4b14      	ldr	r3, [pc, #80]	; (7880 <grid_module_pbf4_reva_init+0x74>)
    7830:	2104      	movs	r1, #4
    7832:	4798      	blx	r3
    7834:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7836:	220c      	movs	r2, #12
    7838:	b2e1      	uxtb	r1, r4
    783a:	4630      	mov	r0, r6
    783c:	47c8      	blx	r9
		
		for(uint8_t j=0; j<12; j++){
    783e:	ea4f 1804 	mov.w	r8, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7842:	2500      	movs	r5, #0
			
				
			if (j<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
				
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    7844:	6870      	ldr	r0, [r6, #4]
			if (j<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
    7846:	2d07      	cmp	r5, #7
    7848:	b2e9      	uxtb	r1, r5
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    784a:	bf94      	ite	ls
    784c:	2201      	movls	r2, #1
			
			}
			else{ // BUTTONS -> MIDI Note On/Off
				
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    784e:	2202      	movhi	r2, #2
    7850:	4440      	add	r0, r8
    7852:	3501      	adds	r5, #1
    7854:	47b8      	blx	r7
		for(uint8_t j=0; j<12; j++){
    7856:	2d0c      	cmp	r5, #12
    7858:	d1f4      	bne.n	7844 <grid_module_pbf4_reva_init+0x38>
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    785a:	3401      	adds	r4, #1
    785c:	2c04      	cmp	r4, #4
    785e:	d1ea      	bne.n	7836 <grid_module_pbf4_reva_init+0x2a>
			}
			
		}	
	}
			
	grid_module_pbf4_reva_hardware_init();
    7860:	4b08      	ldr	r3, [pc, #32]	; (7884 <grid_module_pbf4_reva_init+0x78>)
    7862:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
	
    7864:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_pbf4_reva_hardware_start_transfer();
    7868:	4b07      	ldr	r3, [pc, #28]	; (7888 <grid_module_pbf4_reva_init+0x7c>)
    786a:	4718      	bx	r3
    786c:	000045ed 	.word	0x000045ed
    7870:	20006f88 	.word	0x20006f88
    7874:	0000a52d 	.word	0x0000a52d
    7878:	000066dd 	.word	0x000066dd
    787c:	200145c4 	.word	0x200145c4
    7880:	00009251 	.word	0x00009251
    7884:	000077c9 	.word	0x000077c9
    7888:	000073cd 	.word	0x000073cd
    788c:	00009285 	.word	0x00009285

00007890 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    7890:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    7892:	4c04      	ldr	r4, [pc, #16]	; (78a4 <grid_module_po16_revb_hardware_start_transfer+0x14>)
    7894:	4804      	ldr	r0, [pc, #16]	; (78a8 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    7896:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    7898:	4623      	mov	r3, r4
    789a:	4804      	ldr	r0, [pc, #16]	; (78ac <grid_module_po16_revb_hardware_start_transfer+0x1c>)
	
}
    789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    78a0:	4718      	bx	r3
    78a2:	bf00      	nop
    78a4:	0000d105 	.word	0x0000d105
    78a8:	20014b14 	.word	0x20014b14
    78ac:	20014ce8 	.word	0x20014ce8

000078b0 <grid_module_po16_revb_hardware_transfer_complete_cb>:

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    78b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    78b4:	4a88      	ldr	r2, [pc, #544]	; (7ad8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x228>)
    78b6:	7813      	ldrb	r3, [r2, #0]
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    78b8:	b089      	sub	sp, #36	; 0x24
    78ba:	4614      	mov	r4, r2
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    78bc:	b933      	cbnz	r3, 78cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c>
		grid_module_po16_revb_hardware_transfer_complete++;
    78be:	7813      	ldrb	r3, [r2, #0]
    78c0:	3301      	adds	r3, #1
    78c2:	b2db      	uxtb	r3, r3
    78c4:	7013      	strb	r3, [r2, #0]
	}
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
	grid_module_po16_revb_hardware_start_transfer();
}
    78c6:	b009      	add	sp, #36	; 0x24
    78c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_state.bank_active_changed){
    78cc:	4d83      	ldr	r5, [pc, #524]	; (7adc <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>)
    78ce:	7c6b      	ldrb	r3, [r5, #17]
    78d0:	b9fb      	cbnz	r3, 7912 <grid_module_po16_revb_hardware_transfer_complete_cb+0x62>
	uint16_t adcresult_0 = 0;
    78d2:	2300      	movs	r3, #0
    78d4:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint16_t adcresult_1 = 0;
    78d8:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    78dc:	7863      	ldrb	r3, [r4, #1]
    78de:	4a80      	ldr	r2, [pc, #512]	; (7ae0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x230>)
    78e0:	3308      	adds	r3, #8
    78e2:	5cd7      	ldrb	r7, [r2, r3]
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    78e4:	7863      	ldrb	r3, [r4, #1]
    78e6:	b2db      	uxtb	r3, r3
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    78e8:	b2ff      	uxtb	r7, r7
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    78ea:	5cd6      	ldrb	r6, [r2, r3]
	grid_module_po16_revb_mux++;
    78ec:	7863      	ldrb	r3, [r4, #1]
    78ee:	3301      	adds	r3, #1
    78f0:	b2db      	uxtb	r3, r3
    78f2:	7063      	strb	r3, [r4, #1]
	grid_module_po16_revb_mux%=8;
    78f4:	7863      	ldrb	r3, [r4, #1]
    78f6:	f003 0307 	and.w	r3, r3, #7
    78fa:	7063      	strb	r3, [r4, #1]
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    78fc:	7863      	ldrb	r3, [r4, #1]
    78fe:	f013 0f01 	tst.w	r3, #1
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    7902:	b2f6      	uxtb	r6, r6
    7904:	4b77      	ldr	r3, [pc, #476]	; (7ae4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    7906:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    790a:	d128      	bne.n	795e <grid_module_po16_revb_hardware_transfer_complete_cb+0xae>
    790c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    7910:	e027      	b.n	7962 <grid_module_po16_revb_hardware_transfer_complete_cb+0xb2>
		grid_sys_state.bank_active_changed = 0;
    7912:	2600      	movs	r6, #0
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7914:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 7afc <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7918:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 7b0c <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>
		grid_sys_state.bank_active_changed = 0;
    791c:	746e      	strb	r6, [r5, #17]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    791e:	f04f 0a64 	mov.w	sl, #100	; 0x64
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7922:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7926:	7bea      	ldrb	r2, [r5, #15]
    7928:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    792c:	b2f7      	uxtb	r7, r6
    792e:	7a5b      	ldrb	r3, [r3, #9]
    7930:	42bb      	cmp	r3, r7
    7932:	d9ce      	bls.n	78d2 <grid_module_po16_revb_hardware_transfer_complete_cb+0x22>
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    7934:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7938:	7bea      	ldrb	r2, [r5, #15]
    793a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    793e:	4640      	mov	r0, r8
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    7940:	68db      	ldr	r3, [r3, #12]
    7942:	fb0a 3307 	mla	r3, sl, r7, r3
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7946:	463a      	mov	r2, r7
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    7948:	60df      	str	r7, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    794a:	7be9      	ldrb	r1, [r5, #15]
    794c:	2300      	movs	r3, #0
    794e:	47c8      	blx	r9
            grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    7950:	7be9      	ldrb	r1, [r5, #15]
    7952:	2301      	movs	r3, #1
    7954:	463a      	mov	r2, r7
    7956:	4640      	mov	r0, r8
    7958:	47c8      	blx	r9
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    795a:	3601      	adds	r6, #1
    795c:	e7e1      	b.n	7922 <grid_module_po16_revb_hardware_transfer_complete_cb+0x72>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    795e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    7962:	7863      	ldrb	r3, [r4, #1]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    7964:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 7b10 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>
    7968:	485f      	ldr	r0, [pc, #380]	; (7ae8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
	uint32_t input_0 = adcresult_0*1.03;	
    796a:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 7b14 <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>
    796e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 7b18 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>
    7972:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 7b1c <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>
    7976:	f013 0f02 	tst.w	r3, #2
    797a:	4b5a      	ldr	r3, [pc, #360]	; (7ae4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    797c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7980:	bf14      	ite	ne
    7982:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7986:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    798a:	7863      	ldrb	r3, [r4, #1]
    798c:	f013 0f04 	tst.w	r3, #4
    7990:	4b54      	ldr	r3, [pc, #336]	; (7ae4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    7992:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7996:	bf14      	ite	ne
    7998:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    799c:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    79a0:	2100      	movs	r1, #0
    79a2:	2302      	movs	r3, #2
    79a4:	aa03      	add	r2, sp, #12
    79a6:	47c0      	blx	r8
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    79a8:	2302      	movs	r3, #2
    79aa:	f10d 020e 	add.w	r2, sp, #14
    79ae:	2100      	movs	r1, #0
    79b0:	484e      	ldr	r0, [pc, #312]	; (7aec <grid_module_po16_revb_hardware_transfer_complete_cb+0x23c>)
    79b2:	47c0      	blx	r8
	uint32_t input_0 = adcresult_0*1.03;	
    79b4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    79b8:	47d8      	blx	fp
    79ba:	a345      	add	r3, pc, #276	; (adr r3, 7ad0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>)
    79bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    79c0:	47d0      	blx	sl
    79c2:	47c8      	blx	r9
	adcresult_0 = input_0;
    79c4:	f64f 78ff 	movw	r8, #65535	; 0xffff
    79c8:	4540      	cmp	r0, r8
    79ca:	bf28      	it	cs
    79cc:	4640      	movcs	r0, r8
    79ce:	f8ad 000c 	strh.w	r0, [sp, #12]
	uint32_t input_1 = adcresult_1*1.03;	
    79d2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    79d6:	47d8      	blx	fp
    79d8:	a33d      	add	r3, pc, #244	; (adr r3, 7ad0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>)
    79da:	e9d3 2300 	ldrd	r2, r3, [r3]
    79de:	47d0      	blx	sl
    79e0:	47c8      	blx	r9
	adcresult_1 = input_1;
    79e2:	4540      	cmp	r0, r8
    79e4:	bf28      	it	cs
    79e6:	4640      	movcs	r0, r8
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    79e8:	4b41      	ldr	r3, [pc, #260]	; (7af0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
	adcresult_1 = input_1;
    79ea:	f8ad 000e 	strh.w	r0, [sp, #14]
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    79ee:	4798      	blx	r3
    79f0:	2808      	cmp	r0, #8
    79f2:	d109      	bne.n	7a08 <grid_module_po16_revb_hardware_transfer_complete_cb+0x158>
		adcresult_0	= 65535 - adcresult_0;
    79f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    79f8:	43db      	mvns	r3, r3
    79fa:	f8ad 300c 	strh.w	r3, [sp, #12]
		adcresult_1 = 65535 - adcresult_1;
    79fe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7a02:	43db      	mvns	r3, r3
    7a04:	f8ad 300e 	strh.w	r3, [sp, #14]
	grid_ain_add_sample(adc_index_0, adcresult_0);
    7a08:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7a0c:	f8df 8110 	ldr.w	r8, [pc, #272]	; 7b20 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>
    7a10:	4638      	mov	r0, r7
    7a12:	47c0      	blx	r8
	grid_ain_add_sample(adc_index_1, adcresult_1);
    7a14:	4630      	mov	r0, r6
    7a16:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7a1a:	47c0      	blx	r8
	uint8_t grid_module_po16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7a1c:	4b35      	ldr	r3, [pc, #212]	; (7af4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x244>)
	result_index[0] = adc_index_0;
    7a1e:	f88d 7008 	strb.w	r7, [sp, #8]
	result_index[1] = adc_index_1;
    7a22:	f88d 6009 	strb.w	r6, [sp, #9]
	uint8_t grid_module_po16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7a26:	f103 0710 	add.w	r7, r3, #16
    7a2a:	ae04      	add	r6, sp, #16
    7a2c:	6818      	ldr	r0, [r3, #0]
    7a2e:	6859      	ldr	r1, [r3, #4]
    7a30:	4632      	mov	r2, r6
    7a32:	c203      	stmia	r2!, {r0, r1}
    7a34:	3308      	adds	r3, #8
    7a36:	42bb      	cmp	r3, r7
    7a38:	4616      	mov	r6, r2
    7a3a:	d1f7      	bne.n	7a2c <grid_module_po16_revb_hardware_transfer_complete_cb+0x17c>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7a3c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 7afc <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>
    7a40:	f10d 0a08 	add.w	sl, sp, #8
	for (uint8_t i=0; i<2; i++)
    7a44:	f04f 0900 	mov.w	r9, #0
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7a48:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7a4c:	7bea      	ldrb	r2, [r5, #15]
		uint8_t res_index = result_index[i];
    7a4e:	f81a 6b01 	ldrb.w	r6, [sl], #1
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7a52:	eb03 1302 	add.w	r3, r3, r2, lsl #4
		if (grid_ain_get_changed(res_index)){
    7a56:	4630      	mov	r0, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7a58:	68df      	ldr	r7, [r3, #12]
		if (grid_ain_get_changed(res_index)){
    7a5a:	4b27      	ldr	r3, [pc, #156]	; (7af8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    7a5c:	4798      	blx	r3
    7a5e:	b350      	cbz	r0, 7ab6 <grid_module_po16_revb_hardware_transfer_complete_cb+0x206>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7a60:	2264      	movs	r2, #100	; 0x64
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    7a62:	a908      	add	r1, sp, #32
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7a64:	fb16 f202 	smulbb	r2, r6, r2
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    7a68:	4431      	add	r1, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7a6a:	18bb      	adds	r3, r7, r2
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    7a6c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7a70:	60de      	str	r6, [r3, #12]
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    7a72:	6119      	str	r1, [r3, #16]
    7a74:	2700      	movs	r7, #0
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7a76:	4b21      	ldr	r3, [pc, #132]	; (7afc <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>)
    7a78:	9201      	str	r2, [sp, #4]
    7a7a:	685b      	ldr	r3, [r3, #4]
    7a7c:	443b      	add	r3, r7
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7a7e:	2107      	movs	r1, #7
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7a80:	68db      	ldr	r3, [r3, #12]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7a82:	4630      	mov	r0, r6
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7a84:	eb03 0b02 	add.w	fp, r3, r2
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7a88:	4b1d      	ldr	r3, [pc, #116]	; (7b00 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    7a8a:	4798      	blx	r3
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7a8c:	4b1c      	ldr	r3, [pc, #112]	; (7b00 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7a8e:	f8cb 0014 	str.w	r0, [fp, #20]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7a92:	2107      	movs	r1, #7
    7a94:	4630      	mov	r0, r6
    7a96:	4798      	blx	r3
    7a98:	3710      	adds	r7, #16
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    7a9a:	2300      	movs	r3, #0
            for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7a9c:	2f40      	cmp	r7, #64	; 0x40
    7a9e:	9a01      	ldr	r2, [sp, #4]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7aa0:	f8cb 0018 	str.w	r0, [fp, #24]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    7aa4:	f8cb 301c 	str.w	r3, [fp, #28]
            for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7aa8:	d1e5      	bne.n	7a76 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c6>
			grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_AVC7);		
    7aaa:	4632      	mov	r2, r6
    7aac:	7be9      	ldrb	r1, [r5, #15]
    7aae:	4e15      	ldr	r6, [pc, #84]	; (7b04 <grid_module_po16_revb_hardware_transfer_complete_cb+0x254>)
    7ab0:	2301      	movs	r3, #1
    7ab2:	4640      	mov	r0, r8
    7ab4:	47b0      	blx	r6
	for (uint8_t i=0; i<2; i++)
    7ab6:	f1b9 0f00 	cmp.w	r9, #0
    7aba:	d004      	beq.n	7ac6 <grid_module_po16_revb_hardware_transfer_complete_cb+0x216>
	grid_module_po16_revb_hardware_transfer_complete = 0;
    7abc:	2300      	movs	r3, #0
    7abe:	7023      	strb	r3, [r4, #0]
	grid_module_po16_revb_hardware_start_transfer();
    7ac0:	4b11      	ldr	r3, [pc, #68]	; (7b08 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    7ac2:	4798      	blx	r3
    7ac4:	e6ff      	b.n	78c6 <grid_module_po16_revb_hardware_transfer_complete_cb+0x16>
    7ac6:	f04f 0901 	mov.w	r9, #1
    7aca:	e7bd      	b.n	7a48 <grid_module_po16_revb_hardware_transfer_complete_cb+0x198>
    7acc:	f3af 8000 	nop.w
    7ad0:	47ae147b 	.word	0x47ae147b
    7ad4:	3ff07ae1 	.word	0x3ff07ae1
    7ad8:	200007fd 	.word	0x200007fd
    7adc:	20006f94 	.word	0x20006f94
    7ae0:	20000339 	.word	0x20000339
    7ae4:	41008000 	.word	0x41008000
    7ae8:	20014b14 	.word	0x20014b14
    7aec:	20014ce8 	.word	0x20014ce8
    7af0:	000090cd 	.word	0x000090cd
    7af4:	0001495f 	.word	0x0001495f
    7af8:	000046f9 	.word	0x000046f9
    7afc:	20006f88 	.word	0x20006f88
    7b00:	00004709 	.word	0x00004709
    7b04:	0000a1f5 	.word	0x0000a1f5
    7b08:	00007891 	.word	0x00007891
    7b0c:	0000a641 	.word	0x0000a641
    7b10:	0000d049 	.word	0x0000d049
    7b14:	00011e45 	.word	0x00011e45
    7b18:	00011f19 	.word	0x00011f19
    7b1c:	0001233d 	.word	0x0001233d
    7b20:	00004631 	.word	0x00004631

00007b24 <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    7b24:	b570      	push	{r4, r5, r6, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    7b26:	4c0b      	ldr	r4, [pc, #44]	; (7b54 <grid_module_po16_revb_hardware_init+0x30>)
    7b28:	4e0b      	ldr	r6, [pc, #44]	; (7b58 <grid_module_po16_revb_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    7b2a:	4d0c      	ldr	r5, [pc, #48]	; (7b5c <grid_module_po16_revb_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    7b2c:	4b0c      	ldr	r3, [pc, #48]	; (7b60 <grid_module_po16_revb_hardware_init+0x3c>)
    7b2e:	2200      	movs	r2, #0
    7b30:	4611      	mov	r1, r2
    7b32:	4620      	mov	r0, r4
    7b34:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    7b36:	2200      	movs	r2, #0
    7b38:	4b09      	ldr	r3, [pc, #36]	; (7b60 <grid_module_po16_revb_hardware_init+0x3c>)
    7b3a:	4611      	mov	r1, r2
    7b3c:	4628      	mov	r0, r5
    7b3e:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    7b40:	4620      	mov	r0, r4
    7b42:	4c08      	ldr	r4, [pc, #32]	; (7b64 <grid_module_po16_revb_hardware_init+0x40>)
    7b44:	2100      	movs	r1, #0
    7b46:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    7b48:	4628      	mov	r0, r5
    7b4a:	4623      	mov	r3, r4
    7b4c:	2100      	movs	r1, #0

}
    7b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    7b52:	4718      	bx	r3
    7b54:	20014b14 	.word	0x20014b14
    7b58:	0000cfd1 	.word	0x0000cfd1
    7b5c:	20014ce8 	.word	0x20014ce8
    7b60:	000078b1 	.word	0x000078b1
    7b64:	0000cf91 	.word	0x0000cf91

00007b68 <grid_module_po16_revb_init>:




void grid_module_po16_revb_init(){
    7b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    7b6c:	220e      	movs	r2, #14
    7b6e:	4c15      	ldr	r4, [pc, #84]	; (7bc4 <grid_module_po16_revb_init+0x5c>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
	
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){	
		
		grid_ui_bank_init(&grid_ui_state, i, 16);
    7b70:	4e15      	ldr	r6, [pc, #84]	; (7bc8 <grid_module_po16_revb_init+0x60>)
    7b72:	4f16      	ldr	r7, [pc, #88]	; (7bcc <grid_module_po16_revb_init+0x64>)
		
		for(uint8_t j=0; j<16; j++){
			
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    7b74:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7be4 <grid_module_po16_revb_init+0x7c>
	grid_ain_init(16, 5, 14, 7);
    7b78:	2307      	movs	r3, #7
    7b7a:	2105      	movs	r1, #5
    7b7c:	2010      	movs	r0, #16
    7b7e:	47a0      	blx	r4
	grid_led_lowlevel_init(&grid_led_state, 16);
    7b80:	4b13      	ldr	r3, [pc, #76]	; (7bd0 <grid_module_po16_revb_init+0x68>)
    7b82:	4814      	ldr	r0, [pc, #80]	; (7bd4 <grid_module_po16_revb_init+0x6c>)
    7b84:	2110      	movs	r1, #16
    7b86:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    7b88:	480f      	ldr	r0, [pc, #60]	; (7bc8 <grid_module_po16_revb_init+0x60>)
    7b8a:	4b13      	ldr	r3, [pc, #76]	; (7bd8 <grid_module_po16_revb_init+0x70>)
    7b8c:	2104      	movs	r1, #4
    7b8e:	4798      	blx	r3
    7b90:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);
    7b92:	2210      	movs	r2, #16
    7b94:	b2e1      	uxtb	r1, r4
    7b96:	4630      	mov	r0, r6
    7b98:	47b8      	blx	r7
		for(uint8_t j=0; j<16; j++){
    7b9a:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);
    7b9e:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    7ba0:	6870      	ldr	r0, [r6, #4]
    7ba2:	b2e9      	uxtb	r1, r5
    7ba4:	2201      	movs	r2, #1
    7ba6:	4448      	add	r0, r9
    7ba8:	3501      	adds	r5, #1
    7baa:	47c0      	blx	r8
		for(uint8_t j=0; j<16; j++){
    7bac:	2d10      	cmp	r5, #16
    7bae:	d1f7      	bne.n	7ba0 <grid_module_po16_revb_init+0x38>
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){	
    7bb0:	3401      	adds	r4, #1
    7bb2:	2c04      	cmp	r4, #4
    7bb4:	d1ed      	bne.n	7b92 <grid_module_po16_revb_init+0x2a>

		}
	}
	
	grid_module_po16_revb_hardware_init();
    7bb6:	4b09      	ldr	r3, [pc, #36]	; (7bdc <grid_module_po16_revb_init+0x74>)
    7bb8:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
	
    7bba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_po16_revb_hardware_start_transfer();
    7bbe:	4b08      	ldr	r3, [pc, #32]	; (7be0 <grid_module_po16_revb_init+0x78>)
    7bc0:	4718      	bx	r3
    7bc2:	bf00      	nop
    7bc4:	000045ed 	.word	0x000045ed
    7bc8:	20006f88 	.word	0x20006f88
    7bcc:	00009285 	.word	0x00009285
    7bd0:	000066dd 	.word	0x000066dd
    7bd4:	200145c4 	.word	0x200145c4
    7bd8:	00009251 	.word	0x00009251
    7bdc:	00007b25 	.word	0x00007b25
    7be0:	00007891 	.word	0x00007891
    7be4:	0000a52d 	.word	0x0000a52d

00007be8 <grid_msg_header_set_len>:

#include "grid_msg.h"


// ======================= GRID MSG LEN ======================//
void	grid_msg_header_set_len(struct grid_msg* msg, uint8_t len){
    7be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    7bea:	2200      	movs	r2, #0
    7bec:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, len, &error);
    7bf0:	f10d 020f 	add.w	r2, sp, #15
    7bf4:	9200      	str	r2, [sp, #0]
    7bf6:	2202      	movs	r2, #2
void	grid_msg_header_set_len(struct grid_msg* msg, uint8_t len){
    7bf8:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, len, &error);
    7bfa:	4c02      	ldr	r4, [pc, #8]	; (7c04 <grid_msg_header_set_len+0x1c>)
    7bfc:	4611      	mov	r1, r2
    7bfe:	47a0      	blx	r4
	
}
    7c00:	b004      	add	sp, #16
    7c02:	bd10      	pop	{r4, pc}
    7c04:	0000920d 	.word	0x0000920d

00007c08 <grid_msg_header_set_id>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, &error);
}

// ======================= GRID MSG ID ======================//
void	grid_msg_header_set_id(struct grid_msg* msg, uint8_t id){
    7c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    7c0a:	2200      	movs	r2, #0
    7c0c:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, id, &error);
    7c10:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_id(struct grid_msg* msg, uint8_t id){
    7c14:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, id, &error);
    7c16:	9200      	str	r2, [sp, #0]
    7c18:	4c02      	ldr	r4, [pc, #8]	; (7c24 <grid_msg_header_set_id+0x1c>)
    7c1a:	2202      	movs	r2, #2
    7c1c:	2104      	movs	r1, #4
    7c1e:	47a0      	blx	r4
	
}
    7c20:	b004      	add	sp, #16
    7c22:	bd10      	pop	{r4, pc}
    7c24:	0000920d 	.word	0x0000920d

00007c28 <grid_msg_header_set_dx>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
}

// ======================= GRID MSG DX ======================//
void	grid_msg_header_set_dx(struct grid_msg* msg, uint8_t dx){
    7c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    7c2a:	2200      	movs	r2, #0
    7c2c:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, dx, &error);
    7c30:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_dx(struct grid_msg* msg, uint8_t dx){
    7c34:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, dx, &error);
    7c36:	9200      	str	r2, [sp, #0]
    7c38:	4c02      	ldr	r4, [pc, #8]	; (7c44 <grid_msg_header_set_dx+0x1c>)
    7c3a:	2202      	movs	r2, #2
    7c3c:	2106      	movs	r1, #6
    7c3e:	47a0      	blx	r4
	
}
    7c40:	b004      	add	sp, #16
    7c42:	bd10      	pop	{r4, pc}
    7c44:	0000920d 	.word	0x0000920d

00007c48 <grid_msg_header_get_dx>:


uint8_t grid_msg_header_get_dx(struct grid_msg* msg){
    7c48:	b513      	push	{r0, r1, r4, lr}
	
	uint8_t error = 0;
    7c4a:	2300      	movs	r3, #0
    7c4c:	f88d 3007 	strb.w	r3, [sp, #7]
	return grid_msg_get_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    7c50:	4c04      	ldr	r4, [pc, #16]	; (7c64 <grid_msg_header_get_dx+0x1c>)
    7c52:	f10d 0307 	add.w	r3, sp, #7
    7c56:	2202      	movs	r2, #2
    7c58:	2106      	movs	r1, #6
    7c5a:	47a0      	blx	r4
}
    7c5c:	b2c0      	uxtb	r0, r0
    7c5e:	b002      	add	sp, #8
    7c60:	bd10      	pop	{r4, pc}
    7c62:	bf00      	nop
    7c64:	000091f5 	.word	0x000091f5

00007c68 <grid_msg_header_set_dy>:

// ======================= GRID MSG DY ======================//
void	grid_msg_header_set_dy(struct grid_msg* msg, uint8_t dy){
    7c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    7c6a:	2200      	movs	r2, #0
    7c6c:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, dy, &error);
    7c70:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_dy(struct grid_msg* msg, uint8_t dy){
    7c74:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, dy, &error);
    7c76:	9200      	str	r2, [sp, #0]
    7c78:	4c02      	ldr	r4, [pc, #8]	; (7c84 <grid_msg_header_set_dy+0x1c>)
    7c7a:	2202      	movs	r2, #2
    7c7c:	2108      	movs	r1, #8
    7c7e:	47a0      	blx	r4
	
}
    7c80:	b004      	add	sp, #16
    7c82:	bd10      	pop	{r4, pc}
    7c84:	0000920d 	.word	0x0000920d

00007c88 <grid_msg_header_get_dy>:


uint8_t grid_msg_header_get_dy(struct grid_msg* msg){
    7c88:	b513      	push	{r0, r1, r4, lr}
	
	uint8_t error = 0;
    7c8a:	2300      	movs	r3, #0
    7c8c:	f88d 3007 	strb.w	r3, [sp, #7]
	return grid_msg_get_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    7c90:	4c04      	ldr	r4, [pc, #16]	; (7ca4 <grid_msg_header_get_dy+0x1c>)
    7c92:	f10d 0307 	add.w	r3, sp, #7
    7c96:	2202      	movs	r2, #2
    7c98:	2108      	movs	r1, #8
    7c9a:	47a0      	blx	r4
}
    7c9c:	b2c0      	uxtb	r0, r0
    7c9e:	b002      	add	sp, #8
    7ca0:	bd10      	pop	{r4, pc}
    7ca2:	bf00      	nop
    7ca4:	000091f5 	.word	0x000091f5

00007ca8 <grid_msg_header_set_rot>:

// ======================= GRID MSG ROT ======================//
void	grid_msg_header_set_rot(struct grid_msg* msg, uint8_t rot){
    7ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    7caa:	2200      	movs	r2, #0
    7cac:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, rot, &error);
    7cb0:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_rot(struct grid_msg* msg, uint8_t rot){
    7cb4:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, rot, &error);
    7cb6:	9200      	str	r2, [sp, #0]
    7cb8:	4c02      	ldr	r4, [pc, #8]	; (7cc4 <grid_msg_header_set_rot+0x1c>)
    7cba:	2202      	movs	r2, #2
    7cbc:	210c      	movs	r1, #12
    7cbe:	47a0      	blx	r4
	
}
    7cc0:	b004      	add	sp, #16
    7cc2:	bd10      	pop	{r4, pc}
    7cc4:	0000920d 	.word	0x0000920d

00007cc8 <grid_msg_header_set_age>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, &error);
}

// ======================= GRID MSG AGE ======================//
void	grid_msg_header_set_age(struct grid_msg* msg, uint8_t age){
    7cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    7cca:	2200      	movs	r2, #0
    7ccc:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, age, &error);
    7cd0:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_age(struct grid_msg* msg, uint8_t age){
    7cd4:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, age, &error);
    7cd6:	9200      	str	r2, [sp, #0]
    7cd8:	4c02      	ldr	r4, [pc, #8]	; (7ce4 <grid_msg_header_set_age+0x1c>)
    7cda:	2202      	movs	r2, #2
    7cdc:	210a      	movs	r1, #10
    7cde:	47a0      	blx	r4
	
}
    7ce0:	b004      	add	sp, #16
    7ce2:	bd10      	pop	{r4, pc}
    7ce4:	0000920d 	.word	0x0000920d

00007ce8 <grid_msg_packet_get_length>:
}

// ======================= MSG GET PACKET LENGTH ======================//
uint32_t grid_msg_packet_get_length(struct grid_msg* msg){
	
	return (msg->header_length + msg->body_length + msg->footer_length);
    7ce8:	e9d0 3264 	ldrd	r3, r2, [r0, #400]	; 0x190
    7cec:	f8d0 0198 	ldr.w	r0, [r0, #408]	; 0x198
    7cf0:	4413      	add	r3, r2
}
    7cf2:	4418      	add	r0, r3
    7cf4:	4770      	bx	lr

00007cf6 <grid_msg_body_get_length>:

// ======================= MSG GET BODY LENGTH ======================//
uint32_t grid_msg_body_get_length(struct grid_msg* msg){
	
	return (msg->body_length);
}
    7cf6:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    7cfa:	4770      	bx	lr

00007cfc <grid_msg_body_append_text>:
	
	return (msg->footer_length);
}


void	grid_msg_body_append_text(struct grid_msg* msg, uint8_t* str, uint32_t len){
    7cfc:	b570      	push	{r4, r5, r6, lr}
    7cfe:	f8d0 5194 	ldr.w	r5, [r0, #404]	; 0x194

	
	for(uint32_t i=0; i<len; i++){
    7d02:	2300      	movs	r3, #0
    7d04:	4293      	cmp	r3, r2
    7d06:	d103      	bne.n	7d10 <grid_msg_body_append_text+0x14>
		
		msg->body[msg->body_length + i] = str[i];
	}
	
	msg->body_length += len;
    7d08:	442b      	add	r3, r5
    7d0a:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194

}
    7d0e:	bd70      	pop	{r4, r5, r6, pc}
		msg->body[msg->body_length + i] = str[i];
    7d10:	18c4      	adds	r4, r0, r3
    7d12:	442c      	add	r4, r5
    7d14:	5cce      	ldrb	r6, [r1, r3]
    7d16:	7526      	strb	r6, [r4, #20]
	for(uint32_t i=0; i<len; i++){
    7d18:	3301      	adds	r3, #1
    7d1a:	e7f3      	b.n	7d04 <grid_msg_body_append_text+0x8>

00007d1c <grid_msg_body_append_text_escaped>:

void	grid_msg_body_append_text_escaped(struct grid_msg* msg, uint8_t* str, uint32_t len){
    7d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d1e:	f8d0 6194 	ldr.w	r6, [r0, #404]	; 0x194
	
	for(uint32_t i=0; i<len; i++){
    7d22:	2400      	movs	r4, #0
		
		if (str[i] == GRID_CONST_STX){
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
		}
		else if (str[i] == GRID_CONST_ETX){
			msg->body[msg->body_length + i] = GRID_CONST_ETX+128;
    7d24:	2783      	movs	r7, #131	; 0x83
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
    7d26:	f04f 0c82 	mov.w	ip, #130	; 0x82
	for(uint32_t i=0; i<len; i++){
    7d2a:	4294      	cmp	r4, r2
    7d2c:	eb04 0306 	add.w	r3, r4, r6
    7d30:	d102      	bne.n	7d38 <grid_msg_body_append_text_escaped+0x1c>
			msg->body[msg->body_length + i] = str[i];
		}
		
	}
	
	msg->body_length += len;
    7d32:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194

}
    7d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (str[i] == GRID_CONST_STX){
    7d38:	5d0d      	ldrb	r5, [r1, r4]
    7d3a:	2d02      	cmp	r5, #2
    7d3c:	4403      	add	r3, r0
    7d3e:	d103      	bne.n	7d48 <grid_msg_body_append_text_escaped+0x2c>
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
    7d40:	f883 c014 	strb.w	ip, [r3, #20]
	for(uint32_t i=0; i<len; i++){
    7d44:	3401      	adds	r4, #1
    7d46:	e7f0      	b.n	7d2a <grid_msg_body_append_text_escaped+0xe>
		else if (str[i] == GRID_CONST_ETX){
    7d48:	2d03      	cmp	r5, #3
			msg->body[msg->body_length + i] = GRID_CONST_ETX+128;
    7d4a:	bf0c      	ite	eq
    7d4c:	751f      	strbeq	r7, [r3, #20]
			msg->body[msg->body_length + i] = str[i];
    7d4e:	751d      	strbne	r5, [r3, #20]
    7d50:	e7f8      	b.n	7d44 <grid_msg_body_append_text_escaped+0x28>
	...

00007d54 <grid_msg_text_get_parameter>:


uint32_t grid_msg_text_get_parameter(struct grid_msg* msg, uint32_t text_start_offset, uint8_t parameter_offset, uint8_t parameter_length){
    7d54:	b420      	push	{r5}
	
	uint8_t error;
	
	return grid_sys_read_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, error);
    7d56:	f101 0514 	add.w	r5, r1, #20
    7d5a:	4415      	add	r5, r2
    7d5c:	4619      	mov	r1, r3
    7d5e:	4428      	add	r0, r5
    7d60:	4b02      	ldr	r3, [pc, #8]	; (7d6c <grid_msg_text_get_parameter+0x18>)
	
}
    7d62:	f85d 5b04 	ldr.w	r5, [sp], #4
	return grid_sys_read_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, error);
    7d66:	2200      	movs	r2, #0
    7d68:	4718      	bx	r3
    7d6a:	bf00      	nop
    7d6c:	00009041 	.word	0x00009041

00007d70 <grid_msg_text_set_parameter>:

void grid_msg_text_set_parameter(struct grid_msg* msg, uint32_t text_start_offset, uint8_t parameter_offset, uint8_t parameter_length, uint32_t value){
    7d70:	b420      	push	{r5}
	
	return grid_sys_write_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, value);
    7d72:	f101 0514 	add.w	r5, r1, #20
    7d76:	4415      	add	r5, r2
    7d78:	4619      	mov	r1, r3
    7d7a:	9a01      	ldr	r2, [sp, #4]
    7d7c:	4b02      	ldr	r3, [pc, #8]	; (7d88 <grid_msg_text_set_parameter+0x18>)
    7d7e:	4428      	add	r0, r5
	
}
    7d80:	f85d 5b04 	ldr.w	r5, [sp], #4
	return grid_sys_write_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, value);
    7d84:	4718      	bx	r3
    7d86:	bf00      	nop
    7d88:	00009069 	.word	0x00009069

00007d8c <grid_msg_init>:


// ======================= GRID MSG INIT ======================//
void	grid_msg_init(struct grid_msg* msg){
	
	msg->header_length = 0;
    7d8c:	2300      	movs	r3, #0
	msg->body_length = 0;
    7d8e:	e9c0 3364 	strd	r3, r3, [r0, #400]	; 0x190
	msg->footer_length = 0;
    7d92:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
	
	for (uint32_t i=0; i<GRID_MSG_HEADER_maxlength; i++)
    7d96:	1e42      	subs	r2, r0, #1
    7d98:	f100 0113 	add.w	r1, r0, #19
	{
		msg->header[i] = 0;
    7d9c:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (uint32_t i=0; i<GRID_MSG_HEADER_maxlength; i++)
    7da0:	4291      	cmp	r1, r2
    7da2:	d1fb      	bne.n	7d9c <grid_msg_init+0x10>
    7da4:	f100 0214 	add.w	r2, r0, #20
    7da8:	f200 118b 	addw	r1, r0, #395	; 0x18b
	}
	
	for (uint32_t i=0; i<GRID_MSG_BODY_maxlength; i++)
	{
		msg->body[i] = 0;
    7dac:	2300      	movs	r3, #0
    7dae:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i=0; i<GRID_MSG_BODY_maxlength; i++)
    7db2:	428a      	cmp	r2, r1
    7db4:	d1fb      	bne.n	7dae <grid_msg_init+0x22>
	}
	
	for (uint32_t i=0; i<GRID_MSG_FOOTER_maxlength; i++)
	{
		msg->footer[i] = 0;
    7db6:	f880 318b 	strb.w	r3, [r0, #395]	; 0x18b
    7dba:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
	}
	
		
}
    7dbe:	4770      	bx	lr

00007dc0 <grid_msg_init_header>:

// ======================= MSG INIT HEADER======================//

void	grid_msg_init_header(struct grid_msg* msg, uint8_t dx, uint8_t dy, uint8_t rot){
    7dc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7dc4:	461e      	mov	r6, r3
	
    
    uint8_t age = grid_sys_state.sessionid;
    7dc6:	4b13      	ldr	r3, [pc, #76]	; (7e14 <grid_msg_init_header+0x54>)
    
	sprintf(msg->header, GRID_BRC_frame);
    7dc8:	f8df 9064 	ldr.w	r9, [pc, #100]	; 7e30 <grid_msg_init_header+0x70>
    uint8_t age = grid_sys_state.sessionid;
    7dcc:	795d      	ldrb	r5, [r3, #5]
	sprintf(msg->header, GRID_BRC_frame);
    7dce:	2317      	movs	r3, #23
void	grid_msg_init_header(struct grid_msg* msg, uint8_t dx, uint8_t dy, uint8_t rot){
    7dd0:	4604      	mov	r4, r0
    7dd2:	4688      	mov	r8, r1
    7dd4:	4617      	mov	r7, r2
	sprintf(msg->header, GRID_BRC_frame);
    7dd6:	4910      	ldr	r1, [pc, #64]	; (7e18 <grid_msg_init_header+0x58>)
    7dd8:	9300      	str	r3, [sp, #0]
    7dda:	2201      	movs	r2, #1
    7ddc:	230f      	movs	r3, #15
    7dde:	47c8      	blx	r9
	msg->header_length = strlen(msg->header);
    7de0:	4b0e      	ldr	r3, [pc, #56]	; (7e1c <grid_msg_init_header+0x5c>)
    7de2:	4620      	mov	r0, r4
    7de4:	4798      	blx	r3
	
	grid_msg_header_set_dx(msg, dx);
    7de6:	4641      	mov	r1, r8
	msg->header_length = strlen(msg->header);
    7de8:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
	grid_msg_header_set_dx(msg, dx);
    7dec:	4b0c      	ldr	r3, [pc, #48]	; (7e20 <grid_msg_init_header+0x60>)
    7dee:	4620      	mov	r0, r4
    7df0:	4798      	blx	r3
	grid_msg_header_set_dy(msg, dy);
    7df2:	4639      	mov	r1, r7
    7df4:	4620      	mov	r0, r4
    7df6:	4b0b      	ldr	r3, [pc, #44]	; (7e24 <grid_msg_init_header+0x64>)
    7df8:	4798      	blx	r3
	grid_msg_header_set_rot(msg, rot);
    7dfa:	4631      	mov	r1, r6
    7dfc:	4620      	mov	r0, r4
    7dfe:	4b0a      	ldr	r3, [pc, #40]	; (7e28 <grid_msg_init_header+0x68>)
    7e00:	4798      	blx	r3
    uint8_t age = grid_sys_state.sessionid;
    7e02:	b2ed      	uxtb	r5, r5
	grid_msg_header_set_age(msg, age);
    7e04:	4b09      	ldr	r3, [pc, #36]	; (7e2c <grid_msg_init_header+0x6c>)
    7e06:	4629      	mov	r1, r5
    7e08:	4620      	mov	r0, r4
	
	
}
    7e0a:	b003      	add	sp, #12
    7e0c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	grid_msg_header_set_age(msg, age);
    7e10:	4718      	bx	r3
    7e12:	bf00      	nop
    7e14:	20006f94 	.word	0x20006f94
    7e18:	0001496f 	.word	0x0001496f
    7e1c:	00012c81 	.word	0x00012c81
    7e20:	00007c29 	.word	0x00007c29
    7e24:	00007c69 	.word	0x00007c69
    7e28:	00007ca9 	.word	0x00007ca9
    7e2c:	00007cc9 	.word	0x00007cc9
    7e30:	00012b75 	.word	0x00012b75

00007e34 <grid_msg_packet_receive_char>:

// ======================= MSG RECEIVE CHAR ======================//
void	grid_msg_packet_receive_char(struct grid_msg* msg, uint8_t nextchar){
	
	if (msg->body_length == 0){
    7e34:	f8d0 2194 	ldr.w	r2, [r0, #404]	; 0x194
    7e38:	b96a      	cbnz	r2, 7e56 <grid_msg_packet_receive_char+0x22>
		
		if (nextchar != GRID_CONST_EOB){
    7e3a:	2917      	cmp	r1, #23
			msg->header[msg->header_length] = nextchar;
    7e3c:	bf15      	itete	ne
    7e3e:	f8d0 3190 	ldrne.w	r3, [r0, #400]	; 0x190
			msg->header_length++;
		}
		else{
			msg->body[msg->body_length] = nextchar;
    7e42:	7501      	strbeq	r1, [r0, #20]
			msg->header[msg->header_length] = nextchar;
    7e44:	54c1      	strbne	r1, [r0, r3]
			msg->body_length++;
    7e46:	2301      	moveq	r3, #1
			msg->header_length++;
    7e48:	bf1a      	itte	ne
    7e4a:	3301      	addne	r3, #1
    7e4c:	f8c0 3190 	strne.w	r3, [r0, #400]	; 0x190
			msg->body_length++;
    7e50:	f8c0 3194 	streq.w	r3, [r0, #404]	; 0x194
    7e54:	4770      	bx	lr
			
		}
		
	}
	else if(msg->footer_length == 0){
    7e56:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    7e5a:	b96b      	cbnz	r3, 7e78 <grid_msg_packet_receive_char+0x44>
		
		if (nextchar != GRID_CONST_EOT){
    7e5c:	2904      	cmp	r1, #4
    7e5e:	d005      	beq.n	7e6c <grid_msg_packet_receive_char+0x38>
			msg->body[msg->body_length] = nextchar;
    7e60:	1883      	adds	r3, r0, r2
			msg->body_length++;
    7e62:	3201      	adds	r2, #1
			msg->body[msg->body_length] = nextchar;
    7e64:	7519      	strb	r1, [r3, #20]
			msg->body_length++;
    7e66:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
    7e6a:	4770      	bx	lr
		}
		else{
			msg->footer[msg->footer_length] = nextchar;
    7e6c:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
			msg->footer_length++;
    7e70:	2301      	movs	r3, #1
		
	}
	else{
		
		msg->footer[msg->footer_length] = nextchar;
		msg->footer_length++;
    7e72:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
		
	}
	
}
    7e76:	4770      	bx	lr
		msg->footer[msg->footer_length] = nextchar;
    7e78:	18c2      	adds	r2, r0, r3
		msg->footer_length++;
    7e7a:	3301      	adds	r3, #1
		msg->footer[msg->footer_length] = nextchar;
    7e7c:	f882 118b 	strb.w	r1, [r2, #395]	; 0x18b
		msg->footer_length++;
    7e80:	e7f7      	b.n	7e72 <grid_msg_packet_receive_char+0x3e>

00007e82 <grid_msg_packet_send_char>:

// ======================= GRID MSG SEND CHAR ======================//

uint8_t	grid_msg_packet_send_char(struct grid_msg* msg, uint32_t charindex){
	
	if (charindex < msg->header_length){
    7e82:	f8d0 2190 	ldr.w	r2, [r0, #400]	; 0x190
    7e86:	428a      	cmp	r2, r1
    7e88:	d901      	bls.n	7e8e <grid_msg_packet_send_char+0xc>
		
		return msg->header[charindex];
    7e8a:	5c40      	ldrb	r0, [r0, r1]
    7e8c:	4770      	bx	lr
	}
	else if (charindex < msg->body_length + msg->header_length){
    7e8e:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
    7e92:	4413      	add	r3, r2
    7e94:	428b      	cmp	r3, r1
    7e96:	d903      	bls.n	7ea0 <grid_msg_packet_send_char+0x1e>
	
		return msg->body[charindex - msg->header_length];
    7e98:	1a89      	subs	r1, r1, r2
    7e9a:	4408      	add	r0, r1
    7e9c:	7d00      	ldrb	r0, [r0, #20]
    7e9e:	4770      	bx	lr
	}
	else if (charindex < msg->footer_length + msg->body_length + msg->header_length){
    7ea0:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
    7ea4:	441a      	add	r2, r3
    7ea6:	428a      	cmp	r2, r1
	
		return msg->footer[charindex - msg->header_length - msg->body_length];
    7ea8:	bf83      	ittte	hi
    7eaa:	1ac9      	subhi	r1, r1, r3
    7eac:	1840      	addhi	r0, r0, r1
    7eae:	f890 018b 	ldrbhi.w	r0, [r0, #395]	; 0x18b
	}
	else{
		// OVERRUN
		return -1;
    7eb2:	20ff      	movls	r0, #255	; 0xff
	}
	
	
}
    7eb4:	4770      	bx	lr
	...

00007eb8 <grid_msg_packet_close>:



uint8_t	grid_msg_packet_close(struct grid_msg* msg){
    7eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eba:	4604      	mov	r4, r0
	
	
	sprintf(&msg->footer[msg->footer_length], "%c", GRID_CONST_EOT);
    7ebc:	f8d0 0198 	ldr.w	r0, [r0, #408]	; 0x198
    7ec0:	492b      	ldr	r1, [pc, #172]	; (7f70 <grid_msg_packet_close+0xb8>)
    7ec2:	4d2c      	ldr	r5, [pc, #176]	; (7f74 <grid_msg_packet_close+0xbc>)
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    7ec4:	4e2c      	ldr	r6, [pc, #176]	; (7f78 <grid_msg_packet_close+0xc0>)
	sprintf(&msg->footer[msg->footer_length], "%c", GRID_CONST_EOT);
    7ec6:	f200 108b 	addw	r0, r0, #395	; 0x18b
    7eca:	2204      	movs	r2, #4
    7ecc:	4420      	add	r0, r4
    7ece:	47a8      	blx	r5
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    7ed0:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
    7ed4:	f207 108b 	addw	r0, r7, #395	; 0x18b
    7ed8:	4420      	add	r0, r4
    7eda:	47b0      	blx	r6
	
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    7edc:	e9d4 3164 	ldrd	r3, r1, [r4, #400]	; 0x190
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    7ee0:	4438      	add	r0, r7
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    7ee2:	440b      	add	r3, r1
	grid_msg_header_set_id(msg, grid_sys_state.next_broadcast_message_id);	
    7ee4:	4f25      	ldr	r7, [pc, #148]	; (7f7c <grid_msg_packet_close+0xc4>)
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    7ee6:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    7eea:	1819      	adds	r1, r3, r0
    7eec:	b2c9      	uxtb	r1, r1
    7eee:	4b24      	ldr	r3, [pc, #144]	; (7f80 <grid_msg_packet_close+0xc8>)
    7ef0:	4620      	mov	r0, r4
    7ef2:	4798      	blx	r3
	grid_msg_header_set_id(msg, grid_sys_state.next_broadcast_message_id);	
    7ef4:	f897 10ad 	ldrb.w	r1, [r7, #173]	; 0xad
    7ef8:	4b22      	ldr	r3, [pc, #136]	; (7f84 <grid_msg_packet_close+0xcc>)
    7efa:	4620      	mov	r0, r4
    7efc:	4798      	blx	r3
	
	grid_sys_state.next_broadcast_message_id++;
    7efe:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
    7f02:	3301      	adds	r3, #1
    7f04:	b2db      	uxtb	r3, r3
    7f06:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
	
	
	uint8_t checksum = 0;
	
	for (uint32_t i=0; i<msg->header_length; i++){
    7f0a:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    7f0e:	4621      	mov	r1, r4
    7f10:	4423      	add	r3, r4
	uint8_t checksum = 0;
    7f12:	2200      	movs	r2, #0
	for (uint32_t i=0; i<msg->header_length; i++){
    7f14:	4299      	cmp	r1, r3
    7f16:	d11f      	bne.n	7f58 <grid_msg_packet_close+0xa0>
    7f18:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    7f1c:	4423      	add	r3, r4
    7f1e:	f104 0114 	add.w	r1, r4, #20
    7f22:	3314      	adds	r3, #20
		checksum ^= msg->header[i];
	}
		
	for (uint32_t i=0; i<msg->body_length; i++){
    7f24:	4299      	cmp	r1, r3
    7f26:	d11b      	bne.n	7f60 <grid_msg_packet_close+0xa8>
		checksum ^= msg->body[i];
	}
		
	for (uint32_t i=0; i<msg->footer_length; i++){
    7f28:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    7f2c:	1823      	adds	r3, r4, r0
    7f2e:	f204 118b 	addw	r1, r4, #395	; 0x18b
    7f32:	f203 138b 	addw	r3, r3, #395	; 0x18b
    7f36:	4299      	cmp	r1, r3
    7f38:	d116      	bne.n	7f68 <grid_msg_packet_close+0xb0>
		checksum ^= msg->footer[i];
	}
	
	sprintf(&msg->footer[msg->footer_length], "%02x\n", checksum);
    7f3a:	f200 108b 	addw	r0, r0, #395	; 0x18b
    7f3e:	4912      	ldr	r1, [pc, #72]	; (7f88 <grid_msg_packet_close+0xd0>)
    7f40:	4420      	add	r0, r4
    7f42:	47a8      	blx	r5
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    7f44:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    7f48:	f205 108b 	addw	r0, r5, #395	; 0x18b
    7f4c:	4420      	add	r0, r4
    7f4e:	47b0      	blx	r6
    7f50:	4428      	add	r0, r5
    7f52:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
	
	
}
    7f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		checksum ^= msg->header[i];
    7f58:	f811 0b01 	ldrb.w	r0, [r1], #1
    7f5c:	4042      	eors	r2, r0
	for (uint32_t i=0; i<msg->header_length; i++){
    7f5e:	e7d9      	b.n	7f14 <grid_msg_packet_close+0x5c>
		checksum ^= msg->body[i];
    7f60:	f811 0b01 	ldrb.w	r0, [r1], #1
    7f64:	4042      	eors	r2, r0
	for (uint32_t i=0; i<msg->body_length; i++){
    7f66:	e7dd      	b.n	7f24 <grid_msg_packet_close+0x6c>
		checksum ^= msg->footer[i];
    7f68:	f811 7b01 	ldrb.w	r7, [r1], #1
    7f6c:	407a      	eors	r2, r7
	for (uint32_t i=0; i<msg->footer_length; i++){
    7f6e:	e7e2      	b.n	7f36 <grid_msg_packet_close+0x7e>
    7f70:	0001474f 	.word	0x0001474f
    7f74:	00012b75 	.word	0x00012b75
    7f78:	00012c81 	.word	0x00012c81
    7f7c:	20006f94 	.word	0x20006f94
    7f80:	00007be9 	.word	0x00007be9
    7f84:	00007c09 	.word	0x00007c09
    7f88:	000150e9 	.word	0x000150e9

00007f8c <grid_msg_packet_send_everywhere>:

uint8_t	grid_msg_packet_send_everywhere(struct grid_msg* msg){
    7f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t message_length = grid_msg_packet_get_length(msg);
    7f90:	4b0f      	ldr	r3, [pc, #60]	; (7fd0 <grid_msg_packet_send_everywhere+0x44>)
uint8_t	grid_msg_packet_send_everywhere(struct grid_msg* msg){
    7f92:	4606      	mov	r6, r0
	uint32_t message_length = grid_msg_packet_get_length(msg);
    7f94:	4798      	blx	r3
	
	if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, message_length)){
    7f96:	4b0f      	ldr	r3, [pc, #60]	; (7fd4 <grid_msg_packet_send_everywhere+0x48>)
	uint32_t message_length = grid_msg_packet_get_length(msg);
    7f98:	4604      	mov	r4, r0
	if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, message_length)){
    7f9a:	b281      	uxth	r1, r0
    7f9c:	480e      	ldr	r0, [pc, #56]	; (7fd8 <grid_msg_packet_send_everywhere+0x4c>)
    7f9e:	4798      	blx	r3
    7fa0:	b978      	cbnz	r0, 7fc2 <grid_msg_packet_send_everywhere+0x36>
		
		return 0;
	}
	
	
}
    7fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(msg, i));
    7fa6:	4629      	mov	r1, r5
    7fa8:	4630      	mov	r0, r6
    7faa:	47b8      	blx	r7
    7fac:	4601      	mov	r1, r0
    7fae:	4640      	mov	r0, r8
    7fb0:	47c8      	blx	r9
		for(uint32_t i = 0; i<message_length; i++){
    7fb2:	3501      	adds	r5, #1
    7fb4:	42a5      	cmp	r5, r4
    7fb6:	d1f6      	bne.n	7fa6 <grid_msg_packet_send_everywhere+0x1a>
		grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    7fb8:	4807      	ldr	r0, [pc, #28]	; (7fd8 <grid_msg_packet_send_everywhere+0x4c>)
    7fba:	4b08      	ldr	r3, [pc, #32]	; (7fdc <grid_msg_packet_send_everywhere+0x50>)
    7fbc:	4798      	blx	r3
		return 1;
    7fbe:	2001      	movs	r0, #1
    7fc0:	e7ef      	b.n	7fa2 <grid_msg_packet_send_everywhere+0x16>
			grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(msg, i));
    7fc2:	4f07      	ldr	r7, [pc, #28]	; (7fe0 <grid_msg_packet_send_everywhere+0x54>)
    7fc4:	f8df 8010 	ldr.w	r8, [pc, #16]	; 7fd8 <grid_msg_packet_send_everywhere+0x4c>
    7fc8:	f8df 9018 	ldr.w	r9, [pc, #24]	; 7fe4 <grid_msg_packet_send_everywhere+0x58>
		for(uint32_t i = 0; i<message_length; i++){
    7fcc:	2500      	movs	r5, #0
    7fce:	e7f1      	b.n	7fb4 <grid_msg_packet_send_everywhere+0x28>
    7fd0:	00007ce9 	.word	0x00007ce9
    7fd4:	00004839 	.word	0x00004839
    7fd8:	20006b70 	.word	0x20006b70
    7fdc:	00004895 	.word	0x00004895
    7fe0:	00007e83 	.word	0x00007e83
    7fe4:	00004875 	.word	0x00004875

00007fe8 <grid_nvm_ui_bulk_read_init>:
}


void grid_nvm_ui_bulk_read_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->read_bulk_page_index = 0;
    7fe8:	2300      	movs	r3, #0
    7fea:	f8c0 3424 	str.w	r3, [r0, #1060]	; 0x424
	nvm->read_bulk_status = 1;
    7fee:	2301      	movs	r3, #1
    7ff0:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
			
}
    7ff4:	4770      	bx	lr

00007ff6 <grid_nvm_ui_bulk_read_is_in_progress>:

uint8_t grid_nvm_ui_bulk_read_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->read_bulk_status;
	
}
    7ff6:	f890 0428 	ldrb.w	r0, [r0, #1064]	; 0x428
    7ffa:	4770      	bx	lr

00007ffc <grid_nvm_ui_bulk_read_next>:

void grid_nvm_ui_bulk_read_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    7ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ffe:	4604      	mov	r4, r0
    8000:	b0ed      	sub	sp, #436	; 0x1b4
	
	if (nvm->read_bulk_status == 1){
    8002:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    8006:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_read_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    8008:	4608      	mov	r0, r1
	if (nvm->read_bulk_status == 1){
    800a:	d130      	bne.n	806e <grid_nvm_ui_bulk_read_next+0x72>
		uint8_t bank    = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
		uint8_t event   = nvm->read_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
		
		
		if (bank < ui->bank_list_length){
    800c:	7849      	ldrb	r1, [r1, #1]
		uint8_t bank    = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    800e:	f8d4 2424 	ldr.w	r2, [r4, #1060]	; 0x424
    8012:	23a0      	movs	r3, #160	; 0xa0
    8014:	fbb2 f3f3 	udiv	r3, r2, r3
    8018:	f003 0303 	and.w	r3, r3, #3
		if (bank < ui->bank_list_length){
    801c:	4299      	cmp	r1, r3
    801e:	d91d      	bls.n	805c <grid_nvm_ui_bulk_read_next+0x60>
			
			if (element < ui->bank_list[bank].element_list_length){
    8020:	6845      	ldr	r5, [r0, #4]
    8022:	eb05 1303 	add.w	r3, r5, r3, lsl #4
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    8026:	270a      	movs	r7, #10
			if (element < ui->bank_list[bank].element_list_length){
    8028:	7a5d      	ldrb	r5, [r3, #9]
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    802a:	fbb2 f1f7 	udiv	r1, r2, r7
    802e:	f001 060f 	and.w	r6, r1, #15
			if (element < ui->bank_list[bank].element_list_length){
    8032:	42b5      	cmp	r5, r6
    8034:	d912      	bls.n	805c <grid_nvm_ui_bulk_read_next+0x60>
		uint8_t event   = nvm->read_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    8036:	fb07 2111 	mls	r1, r7, r1, r2
				
				if (event < ui->bank_list[bank].element_list[element].event_list_length){
    803a:	68da      	ldr	r2, [r3, #12]
    803c:	2364      	movs	r3, #100	; 0x64
    803e:	fb06 2303 	mla	r3, r6, r3, r2
    8042:	b2ca      	uxtb	r2, r1
    8044:	f893 505c 	ldrb.w	r5, [r3, #92]	; 0x5c
    8048:	4295      	cmp	r5, r2
    804a:	d907      	bls.n	805c <grid_nvm_ui_bulk_read_next+0x60>
					// Valid memory location
					
					int status = grid_ui_nvm_load_event_configuration(ui, nvm, &ui->bank_list[bank].element_list[element].event_list[event]);
    804c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    804e:	f44f 7286 	mov.w	r2, #268	; 0x10c
    8052:	fb02 3201 	mla	r2, r2, r1, r3
    8056:	4b1f      	ldr	r3, [pc, #124]	; (80d4 <grid_nvm_ui_bulk_read_next+0xd8>)
    8058:	4621      	mov	r1, r4
    805a:	4798      	blx	r3
			}
	
		}
		
		
		if (nvm->read_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    805c:	f8d4 3424 	ldr.w	r3, [r4, #1060]	; 0x424
    8060:	f240 227e 	movw	r2, #638	; 0x27e
    8064:	4293      	cmp	r3, r2
    8066:	d804      	bhi.n	8072 <grid_nvm_ui_bulk_read_next+0x76>
			
			nvm->read_bulk_page_index++;
    8068:	3301      	adds	r3, #1
    806a:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
	}
	
	
	
	
}
    806e:	b06d      	add	sp, #436	; 0x1b4
    8070:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nvm->read_bulk_page_index = 0;
    8072:	2500      	movs	r5, #0
    8074:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
			nvm->read_bulk_status = 0;
    8078:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
			grid_msg_init(&response);
    807c:	a805      	add	r0, sp, #20
    807e:	4b16      	ldr	r3, [pc, #88]	; (80d8 <grid_nvm_ui_bulk_read_next+0xdc>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8080:	4c16      	ldr	r4, [pc, #88]	; (80dc <grid_nvm_ui_bulk_read_next+0xe0>)
			grid_msg_init(&response);
    8082:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8084:	227f      	movs	r2, #127	; 0x7f
    8086:	462b      	mov	r3, r5
    8088:	4611      	mov	r1, r2
    808a:	a805      	add	r0, sp, #20
    808c:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    808e:	2303      	movs	r3, #3
    8090:	4913      	ldr	r1, [pc, #76]	; (80e0 <grid_nvm_ui_bulk_read_next+0xe4>)
    8092:	9300      	str	r3, [sp, #0]
    8094:	2202      	movs	r2, #2
    8096:	4c13      	ldr	r4, [pc, #76]	; (80e4 <grid_nvm_ui_bulk_read_next+0xe8>)
			uint8_t response_payload[10] = {0};
    8098:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    809c:	2371      	movs	r3, #113	; 0x71
    809e:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    80a0:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    80a4:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    80a6:	4b10      	ldr	r3, [pc, #64]	; (80e8 <grid_nvm_ui_bulk_read_next+0xec>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    80a8:	4c10      	ldr	r4, [pc, #64]	; (80ec <grid_nvm_ui_bulk_read_next+0xf0>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    80aa:	a802      	add	r0, sp, #8
    80ac:	4798      	blx	r3
    80ae:	a902      	add	r1, sp, #8
    80b0:	4602      	mov	r2, r0
    80b2:	4b0f      	ldr	r3, [pc, #60]	; (80f0 <grid_nvm_ui_bulk_read_next+0xf4>)
    80b4:	a805      	add	r0, sp, #20
    80b6:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    80b8:	230a      	movs	r3, #10
    80ba:	9300      	str	r3, [sp, #0]
    80bc:	2204      	movs	r2, #4
    80be:	4629      	mov	r1, r5
    80c0:	a805      	add	r0, sp, #20
    80c2:	2301      	movs	r3, #1
    80c4:	47a0      	blx	r4
			grid_msg_packet_close(&response);
    80c6:	4b0b      	ldr	r3, [pc, #44]	; (80f4 <grid_nvm_ui_bulk_read_next+0xf8>)
    80c8:	a805      	add	r0, sp, #20
    80ca:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    80cc:	4b0a      	ldr	r3, [pc, #40]	; (80f8 <grid_nvm_ui_bulk_read_next+0xfc>)
    80ce:	a805      	add	r0, sp, #20
    80d0:	4798      	blx	r3
}
    80d2:	e7cc      	b.n	806e <grid_nvm_ui_bulk_read_next+0x72>
    80d4:	000096fd 	.word	0x000096fd
    80d8:	00007d8d 	.word	0x00007d8d
    80dc:	00007dc1 	.word	0x00007dc1
    80e0:	00014982 	.word	0x00014982
    80e4:	00012b75 	.word	0x00012b75
    80e8:	00012c81 	.word	0x00012c81
    80ec:	00007d71 	.word	0x00007d71
    80f0:	00007cfd 	.word	0x00007cfd
    80f4:	00007eb9 	.word	0x00007eb9
    80f8:	00007f8d 	.word	0x00007f8d

000080fc <grid_nvm_ui_bulk_store_init>:


void grid_nvm_ui_bulk_store_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->store_bulk_page_index = 0;
    80fc:	2300      	movs	r3, #0
    80fe:	f8c0 3434 	str.w	r3, [r0, #1076]	; 0x434
	nvm->store_bulk_status = 1;
    8102:	2301      	movs	r3, #1
    8104:	f880 3438 	strb.w	r3, [r0, #1080]	; 0x438
	
}
    8108:	4770      	bx	lr

0000810a <grid_nvm_ui_bulk_store_is_in_progress>:

uint8_t grid_nvm_ui_bulk_store_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->store_bulk_status;
	
}
    810a:	f890 0438 	ldrb.w	r0, [r0, #1080]	; 0x438
    810e:	4770      	bx	lr

00008110 <grid_nvm_ui_bulk_store_next>:

// DO THIS!!
void grid_nvm_ui_bulk_store_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    8110:	b5f0      	push	{r4, r5, r6, r7, lr}
     
    // START: NEW
    
    
	if (nvm->store_bulk_status == 1){
    8112:	f890 3438 	ldrb.w	r3, [r0, #1080]	; 0x438
    8116:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_store_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    8118:	b0ed      	sub	sp, #436	; 0x1b4
    811a:	4604      	mov	r4, r0
    811c:	460d      	mov	r5, r1
	if (nvm->store_bulk_status == 1){
    811e:	d169      	bne.n	81f4 <grid_nvm_ui_bulk_store_next+0xe4>
                        struct grid_ui_event* eve = &ui->bank_list[bank].element_list[element].event_list[event];

                        if (eve->cfg_changed_flag == 1){


                            if (grid_ui_nvm_store_event_configuration(ui, nvm, eve)){
    8120:	4f53      	ldr	r7, [pc, #332]	; (8270 <grid_nvm_ui_bulk_store_next+0x160>)
            uint8_t bank    = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    8122:	26a0      	movs	r6, #160	; 0xa0
            if (bank < ui->bank_list_length){
    8124:	786a      	ldrb	r2, [r5, #1]
            uint8_t bank    = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    8126:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    812a:	fbb3 f1f6 	udiv	r1, r3, r6
    812e:	f001 0003 	and.w	r0, r1, #3
            if (bank < ui->bank_list_length){
    8132:	4282      	cmp	r2, r0
    8134:	d960      	bls.n	81f8 <grid_nvm_ui_bulk_store_next+0xe8>
                if (element < ui->bank_list[bank].element_list_length){
    8136:	6869      	ldr	r1, [r5, #4]
    8138:	eb01 1100 	add.w	r1, r1, r0, lsl #4
            uint8_t element = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    813c:	f04f 0e0a 	mov.w	lr, #10
                if (element < ui->bank_list[bank].element_list_length){
    8140:	7a48      	ldrb	r0, [r1, #9]
            uint8_t element = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    8142:	fbb3 f2fe 	udiv	r2, r3, lr
    8146:	f002 0c0f 	and.w	ip, r2, #15
                if (element < ui->bank_list[bank].element_list_length){
    814a:	4560      	cmp	r0, ip
    814c:	d954      	bls.n	81f8 <grid_nvm_ui_bulk_store_next+0xe8>
                    if (event < ui->bank_list[bank].element_list[element].event_list_length){
    814e:	68c9      	ldr	r1, [r1, #12]
            uint8_t event   = nvm->store_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    8150:	fb0e 3212 	mls	r2, lr, r2, r3
                    if (event < ui->bank_list[bank].element_list[element].event_list_length){
    8154:	2364      	movs	r3, #100	; 0x64
    8156:	fb0c 1303 	mla	r3, ip, r3, r1
    815a:	b2d1      	uxtb	r1, r2
    815c:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
    8160:	4288      	cmp	r0, r1
    8162:	d949      	bls.n	81f8 <grid_nvm_ui_bulk_store_next+0xe8>
                        struct grid_ui_event* eve = &ui->bank_list[bank].element_list[element].event_list[event];
    8164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8166:	f44f 7186 	mov.w	r1, #268	; 0x10c
    816a:	fb01 3202 	mla	r2, r1, r2, r3
                        if (eve->cfg_changed_flag == 1){
    816e:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
    8172:	2b01      	cmp	r3, #1
    8174:	d140      	bne.n	81f8 <grid_nvm_ui_bulk_store_next+0xe8>
                            if (grid_ui_nvm_store_event_configuration(ui, nvm, eve)){
    8176:	4621      	mov	r1, r4
    8178:	4628      	mov	r0, r5
    817a:	47b8      	blx	r7
    817c:	3800      	subs	r0, #0
    817e:	bf18      	it	ne
    8180:	2001      	movne	r0, #1

            }
            
            

            if (nvm->store_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8182:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    8186:	f240 227e 	movw	r2, #638	; 0x27e
    818a:	4293      	cmp	r3, r2
    818c:	d804      	bhi.n	8198 <grid_nvm_ui_bulk_store_next+0x88>



                nvm->store_bulk_page_index++;       
    818e:	3301      	adds	r3, #1
    8190:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
        while (something_was_stored == 0){
    8194:	2800      	cmp	r0, #0
    8196:	d0c5      	beq.n	8124 <grid_nvm_ui_bulk_store_next+0x14>
		

		
		
		
		if (nvm->store_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8198:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    819c:	4e35      	ldr	r6, [pc, #212]	; (8274 <grid_nvm_ui_bulk_store_next+0x164>)
    819e:	f240 227e 	movw	r2, #638	; 0x27e
    81a2:	4293      	cmp	r3, r2
    81a4:	d82a      	bhi.n	81fc <grid_nvm_ui_bulk_store_next+0xec>
			
            
            uint8_t intensity = abs(nvm->store_bulk_page_index%100 - 50)/1.5 + 40;
    81a6:	2264      	movs	r2, #100	; 0x64
    81a8:	fbb3 f0f2 	udiv	r0, r3, r2
    81ac:	fb02 3010 	mls	r0, r2, r0, r3
    81b0:	3832      	subs	r0, #50	; 0x32
    81b2:	2800      	cmp	r0, #0
    81b4:	bfb8      	it	lt
    81b6:	4240      	neglt	r0, r0
    81b8:	4f2f      	ldr	r7, [pc, #188]	; (8278 <grid_nvm_ui_bulk_store_next+0x168>)
    81ba:	4c30      	ldr	r4, [pc, #192]	; (827c <grid_nvm_ui_bulk_store_next+0x16c>)
    81bc:	4d30      	ldr	r5, [pc, #192]	; (8280 <grid_nvm_ui_bulk_store_next+0x170>)
    81be:	47b8      	blx	r7
    81c0:	4b30      	ldr	r3, [pc, #192]	; (8284 <grid_nvm_ui_bulk_store_next+0x174>)
    81c2:	2200      	movs	r2, #0
    81c4:	47a0      	blx	r4
    81c6:	4b30      	ldr	r3, [pc, #192]	; (8288 <grid_nvm_ui_bulk_store_next+0x178>)
    81c8:	4c30      	ldr	r4, [pc, #192]	; (828c <grid_nvm_ui_bulk_store_next+0x17c>)
    81ca:	2200      	movs	r2, #0
    81cc:	47a0      	blx	r4
    81ce:	47a8      	blx	r5
    81d0:	b2c4      	uxtb	r4, r0
  
            grid_sys_alert_set_alert(&grid_sys_state, 0, intensity*0.75, intensity, 1, 1000);
    81d2:	4620      	mov	r0, r4
    81d4:	47b8      	blx	r7
    81d6:	4b2e      	ldr	r3, [pc, #184]	; (8290 <grid_nvm_ui_bulk_store_next+0x180>)
    81d8:	4f2e      	ldr	r7, [pc, #184]	; (8294 <grid_nvm_ui_bulk_store_next+0x184>)
    81da:	2200      	movs	r2, #0
    81dc:	47b8      	blx	r7
    81de:	47a8      	blx	r5
    81e0:	2301      	movs	r3, #1
    81e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    81e6:	e9cd 3200 	strd	r3, r2, [sp]
    81ea:	2100      	movs	r1, #0
    81ec:	b2c2      	uxtb	r2, r0
    81ee:	4623      	mov	r3, r4
    81f0:	4829      	ldr	r0, [pc, #164]	; (8298 <grid_nvm_ui_bulk_store_next+0x188>)
    81f2:	47b0      	blx	r6
	}
	
	
	
	
}
    81f4:	b06d      	add	sp, #436	; 0x1b4
    81f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81f8:	2000      	movs	r0, #0
    81fa:	e7c2      	b.n	8182 <grid_nvm_ui_bulk_store_next+0x72>
			nvm->store_bulk_page_index = 0;
    81fc:	2500      	movs	r5, #0
    81fe:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
			nvm->store_bulk_status = 0;
    8202:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
			grid_msg_init(&response);
    8206:	a805      	add	r0, sp, #20
    8208:	4b24      	ldr	r3, [pc, #144]	; (829c <grid_nvm_ui_bulk_store_next+0x18c>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    820a:	4c25      	ldr	r4, [pc, #148]	; (82a0 <grid_nvm_ui_bulk_store_next+0x190>)
			grid_msg_init(&response);
    820c:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    820e:	227f      	movs	r2, #127	; 0x7f
    8210:	462b      	mov	r3, r5
    8212:	4611      	mov	r1, r2
    8214:	a805      	add	r0, sp, #20
    8216:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    8218:	2303      	movs	r3, #3
    821a:	4922      	ldr	r1, [pc, #136]	; (82a4 <grid_nvm_ui_bulk_store_next+0x194>)
    821c:	9300      	str	r3, [sp, #0]
    821e:	2202      	movs	r2, #2
    8220:	4c21      	ldr	r4, [pc, #132]	; (82a8 <grid_nvm_ui_bulk_store_next+0x198>)
			uint8_t response_payload[10] = {0};
    8222:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    8226:	2370      	movs	r3, #112	; 0x70
    8228:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    822a:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    822e:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8230:	4b1e      	ldr	r3, [pc, #120]	; (82ac <grid_nvm_ui_bulk_store_next+0x19c>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8232:	4c1f      	ldr	r4, [pc, #124]	; (82b0 <grid_nvm_ui_bulk_store_next+0x1a0>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8234:	a802      	add	r0, sp, #8
    8236:	4798      	blx	r3
    8238:	a902      	add	r1, sp, #8
    823a:	4602      	mov	r2, r0
    823c:	4b1d      	ldr	r3, [pc, #116]	; (82b4 <grid_nvm_ui_bulk_store_next+0x1a4>)
    823e:	a805      	add	r0, sp, #20
    8240:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8242:	230a      	movs	r3, #10
    8244:	9300      	str	r3, [sp, #0]
    8246:	4629      	mov	r1, r5
    8248:	a805      	add	r0, sp, #20
    824a:	2301      	movs	r3, #1
    824c:	2204      	movs	r2, #4
    824e:	47a0      	blx	r4
                grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    8250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8254:	e9cd 5300 	strd	r5, r3, [sp]
    8258:	22ff      	movs	r2, #255	; 0xff
    825a:	462b      	mov	r3, r5
    825c:	4629      	mov	r1, r5
    825e:	480e      	ldr	r0, [pc, #56]	; (8298 <grid_nvm_ui_bulk_store_next+0x188>)
    8260:	47b0      	blx	r6
			grid_msg_packet_close(&response);
    8262:	4b15      	ldr	r3, [pc, #84]	; (82b8 <grid_nvm_ui_bulk_store_next+0x1a8>)
    8264:	a805      	add	r0, sp, #20
    8266:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    8268:	4b14      	ldr	r3, [pc, #80]	; (82bc <grid_nvm_ui_bulk_store_next+0x1ac>)
    826a:	a805      	add	r0, sp, #20
    826c:	4798      	blx	r3
}
    826e:	e7c1      	b.n	81f4 <grid_nvm_ui_bulk_store_next+0xe4>
    8270:	00009521 	.word	0x00009521
    8274:	00008ff3 	.word	0x00008ff3
    8278:	00011e45 	.word	0x00011e45
    827c:	0001216d 	.word	0x0001216d
    8280:	0001233d 	.word	0x0001233d
    8284:	3ff80000 	.word	0x3ff80000
    8288:	40440000 	.word	0x40440000
    828c:	00011bad 	.word	0x00011bad
    8290:	3fe80000 	.word	0x3fe80000
    8294:	00011f19 	.word	0x00011f19
    8298:	20006f94 	.word	0x20006f94
    829c:	00007d8d 	.word	0x00007d8d
    82a0:	00007dc1 	.word	0x00007dc1
    82a4:	00014982 	.word	0x00014982
    82a8:	00012b75 	.word	0x00012b75
    82ac:	00012c81 	.word	0x00012c81
    82b0:	00007d71 	.word	0x00007d71
    82b4:	00007cfd 	.word	0x00007cfd
    82b8:	00007eb9 	.word	0x00007eb9
    82bc:	00007f8d 	.word	0x00007f8d

000082c0 <grid_nvm_ui_bulk_clear_init>:



void grid_nvm_ui_bulk_clear_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->clear_bulk_page_index = 0;
    82c0:	2300      	movs	r3, #0
    82c2:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
	nvm->clear_bulk_status = 1;
    82c6:	2301      	movs	r3, #1
    82c8:	f880 3430 	strb.w	r3, [r0, #1072]	; 0x430
	
}
    82cc:	4770      	bx	lr

000082ce <grid_nvm_ui_bulk_clear_is_in_progress>:

uint8_t grid_nvm_ui_bulk_clear_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->clear_bulk_status;
	
}
    82ce:	f890 0430 	ldrb.w	r0, [r0, #1072]	; 0x430
    82d2:	4770      	bx	lr

000082d4 <grid_nvm_ui_bulk_clear_next>:


void grid_nvm_ui_bulk_clear_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    82d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82d8:	4604      	mov	r4, r0
    82da:	b0ec      	sub	sp, #432	; 0x1b0
	
	if (nvm->clear_bulk_status == 1){
    82dc:	f894 3430 	ldrb.w	r3, [r4, #1072]	; 0x430
    82e0:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_clear_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    82e2:	4608      	mov	r0, r1
	if (nvm->clear_bulk_status == 1){
    82e4:	d15c      	bne.n	83a0 <grid_nvm_ui_bulk_clear_next+0xcc>
		uint8_t bank    = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
		uint8_t event   = nvm->clear_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
		
		
		if (bank < ui->bank_list_length){
    82e6:	7849      	ldrb	r1, [r1, #1]
		uint8_t bank    = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    82e8:	f8d4 242c 	ldr.w	r2, [r4, #1068]	; 0x42c
    82ec:	23a0      	movs	r3, #160	; 0xa0
    82ee:	fbb2 f3f3 	udiv	r3, r2, r3
    82f2:	f003 0303 	and.w	r3, r3, #3
		if (bank < ui->bank_list_length){
    82f6:	4299      	cmp	r1, r3
    82f8:	d91d      	bls.n	8336 <grid_nvm_ui_bulk_clear_next+0x62>
			
			if (element < ui->bank_list[bank].element_list_length){
    82fa:	6845      	ldr	r5, [r0, #4]
    82fc:	eb05 1303 	add.w	r3, r5, r3, lsl #4
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    8300:	270a      	movs	r7, #10
			if (element < ui->bank_list[bank].element_list_length){
    8302:	7a5d      	ldrb	r5, [r3, #9]
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    8304:	fbb2 f1f7 	udiv	r1, r2, r7
    8308:	f001 060f 	and.w	r6, r1, #15
			if (element < ui->bank_list[bank].element_list_length){
    830c:	42b5      	cmp	r5, r6
    830e:	d912      	bls.n	8336 <grid_nvm_ui_bulk_clear_next+0x62>
		uint8_t event   = nvm->clear_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    8310:	fb07 2111 	mls	r1, r7, r1, r2
				
				if (event < ui->bank_list[bank].element_list[element].event_list_length){
    8314:	68da      	ldr	r2, [r3, #12]
    8316:	2364      	movs	r3, #100	; 0x64
    8318:	fb06 2303 	mla	r3, r6, r3, r2
    831c:	b2ca      	uxtb	r2, r1
    831e:	f893 505c 	ldrb.w	r5, [r3, #92]	; 0x5c
    8322:	4295      	cmp	r5, r2
    8324:	d907      	bls.n	8336 <grid_nvm_ui_bulk_clear_next+0x62>
					// Valid memory location
					
					grid_ui_nvm_clear_event_configuration(ui, nvm, &ui->bank_list[bank].element_list[element].event_list[event]);		
    8326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8328:	f44f 7286 	mov.w	r2, #268	; 0x10c
    832c:	fb02 3201 	mla	r2, r2, r1, r3
    8330:	4b3b      	ldr	r3, [pc, #236]	; (8420 <grid_nvm_ui_bulk_clear_next+0x14c>)
    8332:	4621      	mov	r1, r4
    8334:	4798      	blx	r3
	
		}
		
		
		
		if (nvm->clear_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8336:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    833a:	4e3a      	ldr	r6, [pc, #232]	; (8424 <grid_nvm_ui_bulk_clear_next+0x150>)
    833c:	f240 227e 	movw	r2, #638	; 0x27e
    8340:	4293      	cmp	r3, r2
    8342:	d830      	bhi.n	83a6 <grid_nvm_ui_bulk_clear_next+0xd2>
			
            
            uint8_t intensity = abs(nvm->clear_bulk_page_index%100 - 50)/1.5 + 40;
    8344:	2264      	movs	r2, #100	; 0x64
    8346:	fbb3 f0f2 	udiv	r0, r3, r2
    834a:	fb02 3010 	mls	r0, r2, r0, r3
    834e:	3832      	subs	r0, #50	; 0x32
    8350:	2800      	cmp	r0, #0
    8352:	bfb8      	it	lt
    8354:	4240      	neglt	r0, r0
    8356:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8470 <grid_nvm_ui_bulk_clear_next+0x19c>
    835a:	4d33      	ldr	r5, [pc, #204]	; (8428 <grid_nvm_ui_bulk_clear_next+0x154>)
    835c:	4f33      	ldr	r7, [pc, #204]	; (842c <grid_nvm_ui_bulk_clear_next+0x158>)
    835e:	47c0      	blx	r8
    8360:	4b33      	ldr	r3, [pc, #204]	; (8430 <grid_nvm_ui_bulk_clear_next+0x15c>)
    8362:	2200      	movs	r2, #0
    8364:	47a8      	blx	r5
    8366:	4b33      	ldr	r3, [pc, #204]	; (8434 <grid_nvm_ui_bulk_clear_next+0x160>)
    8368:	4d33      	ldr	r5, [pc, #204]	; (8438 <grid_nvm_ui_bulk_clear_next+0x164>)
    836a:	2200      	movs	r2, #0
    836c:	47a8      	blx	r5
    836e:	47b8      	blx	r7
    8370:	b2c5      	uxtb	r5, r0
  
            grid_sys_alert_set_alert(&grid_sys_state, intensity, intensity*0.75, 0, 1, 1000);
    8372:	4628      	mov	r0, r5
    8374:	47c0      	blx	r8
    8376:	4b31      	ldr	r3, [pc, #196]	; (843c <grid_nvm_ui_bulk_clear_next+0x168>)
    8378:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8474 <grid_nvm_ui_bulk_clear_next+0x1a0>
    837c:	2200      	movs	r2, #0
    837e:	47c0      	blx	r8
    8380:	47b8      	blx	r7
    8382:	2301      	movs	r3, #1
    8384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8388:	e9cd 3200 	strd	r3, r2, [sp]
    838c:	4629      	mov	r1, r5
    838e:	2300      	movs	r3, #0
    8390:	b2c2      	uxtb	r2, r0
    8392:	482b      	ldr	r0, [pc, #172]	; (8440 <grid_nvm_ui_bulk_clear_next+0x16c>)
    8394:	47b0      	blx	r6


            
            nvm->clear_bulk_page_index++;
    8396:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    839a:	3301      	adds	r3, #1
    839c:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	}
	
	
	
	
}
    83a0:	b06c      	add	sp, #432	; 0x1b0
    83a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nvm->clear_bulk_page_index = 0;
    83a6:	2500      	movs	r5, #0
    83a8:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
			nvm->clear_bulk_status = 0;
    83ac:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
			grid_msg_init(&response);
    83b0:	a805      	add	r0, sp, #20
    83b2:	4b24      	ldr	r3, [pc, #144]	; (8444 <grid_nvm_ui_bulk_clear_next+0x170>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    83b4:	4c24      	ldr	r4, [pc, #144]	; (8448 <grid_nvm_ui_bulk_clear_next+0x174>)
			grid_msg_init(&response);
    83b6:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    83b8:	227f      	movs	r2, #127	; 0x7f
    83ba:	462b      	mov	r3, r5
    83bc:	4611      	mov	r1, r2
    83be:	a805      	add	r0, sp, #20
    83c0:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    83c2:	2303      	movs	r3, #3
    83c4:	4921      	ldr	r1, [pc, #132]	; (844c <grid_nvm_ui_bulk_clear_next+0x178>)
    83c6:	9300      	str	r3, [sp, #0]
    83c8:	2202      	movs	r2, #2
    83ca:	4c21      	ldr	r4, [pc, #132]	; (8450 <grid_nvm_ui_bulk_clear_next+0x17c>)
			uint8_t response_payload[10] = {0};
    83cc:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    83d0:	2372      	movs	r3, #114	; 0x72
    83d2:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    83d4:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    83d8:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    83da:	4b1e      	ldr	r3, [pc, #120]	; (8454 <grid_nvm_ui_bulk_clear_next+0x180>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    83dc:	4c1e      	ldr	r4, [pc, #120]	; (8458 <grid_nvm_ui_bulk_clear_next+0x184>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    83de:	a802      	add	r0, sp, #8
    83e0:	4798      	blx	r3
    83e2:	a902      	add	r1, sp, #8
    83e4:	4602      	mov	r2, r0
    83e6:	4b1d      	ldr	r3, [pc, #116]	; (845c <grid_nvm_ui_bulk_clear_next+0x188>)
    83e8:	a805      	add	r0, sp, #20
    83ea:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    83ec:	230a      	movs	r3, #10
    83ee:	9300      	str	r3, [sp, #0]
    83f0:	4629      	mov	r1, r5
    83f2:	a805      	add	r0, sp, #20
    83f4:	2301      	movs	r3, #1
    83f6:	2204      	movs	r2, #4
    83f8:	47a0      	blx	r4
                grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    83fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    83fe:	22ff      	movs	r2, #255	; 0xff
    8400:	4629      	mov	r1, r5
    8402:	e9cd 5300 	strd	r5, r3, [sp]
    8406:	480e      	ldr	r0, [pc, #56]	; (8440 <grid_nvm_ui_bulk_clear_next+0x16c>)
    8408:	462b      	mov	r3, r5
    840a:	47b0      	blx	r6
			grid_msg_packet_close(&response);
    840c:	4b14      	ldr	r3, [pc, #80]	; (8460 <grid_nvm_ui_bulk_clear_next+0x18c>)
    840e:	a805      	add	r0, sp, #20
    8410:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    8412:	4b14      	ldr	r3, [pc, #80]	; (8464 <grid_nvm_ui_bulk_clear_next+0x190>)
    8414:	a805      	add	r0, sp, #20
    8416:	4798      	blx	r3
            grid_ui_reinit_local(&grid_ui_state);
    8418:	4813      	ldr	r0, [pc, #76]	; (8468 <grid_nvm_ui_bulk_clear_next+0x194>)
    841a:	4b14      	ldr	r3, [pc, #80]	; (846c <grid_nvm_ui_bulk_clear_next+0x198>)
    841c:	4798      	blx	r3
}
    841e:	e7bf      	b.n	83a0 <grid_nvm_ui_bulk_clear_next+0xcc>
    8420:	00009775 	.word	0x00009775
    8424:	00008ff3 	.word	0x00008ff3
    8428:	0001216d 	.word	0x0001216d
    842c:	0001233d 	.word	0x0001233d
    8430:	3ff80000 	.word	0x3ff80000
    8434:	40440000 	.word	0x40440000
    8438:	00011bad 	.word	0x00011bad
    843c:	3fe80000 	.word	0x3fe80000
    8440:	20006f94 	.word	0x20006f94
    8444:	00007d8d 	.word	0x00007d8d
    8448:	00007dc1 	.word	0x00007dc1
    844c:	00014982 	.word	0x00014982
    8450:	00012b75 	.word	0x00012b75
    8454:	00012c81 	.word	0x00012c81
    8458:	00007d71 	.word	0x00007d71
    845c:	00007cfd 	.word	0x00007cfd
    8460:	00007eb9 	.word	0x00007eb9
    8464:	00007f8d 	.word	0x00007f8d
    8468:	20006f88 	.word	0x20006f88
    846c:	0000a695 	.word	0x0000a695
    8470:	00011e45 	.word	0x00011e45
    8474:	00011f19 	.word	0x00011f19

00008478 <grid_nvm_clear_read_buffer>:



void grid_nvm_clear_read_buffer(struct grid_nvm_model* mod){
	
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8478:	f100 0309 	add.w	r3, r0, #9
    847c:	f200 2209 	addw	r2, r0, #521	; 0x209
		
		mod->read_buffer[i] = 255;
    8480:	21ff      	movs	r1, #255	; 0xff
    8482:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8486:	4293      	cmp	r3, r2
    8488:	d1fb      	bne.n	8482 <grid_nvm_clear_read_buffer+0xa>
		
	}

	mod->read_buffer_status = GRID_NVM_BUFFER_STATUS_EMPTY;
    848a:	2302      	movs	r3, #2
    848c:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	mod->read_buffer_length = 0;
    8490:	2300      	movs	r3, #0
    8492:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	
}
    8496:	4770      	bx	lr

00008498 <grid_nvm_clear_write_buffer>:

void grid_nvm_clear_write_buffer(struct grid_nvm_model* mod){
	
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8498:	f500 7306 	add.w	r3, r0, #536	; 0x218
    849c:	f500 6283 	add.w	r2, r0, #1048	; 0x418
		
		mod->write_buffer[i] = 255;
    84a0:	21ff      	movs	r1, #255	; 0xff
    84a2:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    84a6:	4293      	cmp	r3, r2
    84a8:	d1fb      	bne.n	84a2 <grid_nvm_clear_write_buffer+0xa>
		
	}
	
	mod->write_buffer_status = GRID_NVM_BUFFER_STATUS_EMPTY;
    84aa:	2302      	movs	r3, #2
    84ac:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	mod->write_buffer_length = 0;
    84b0:	2300      	movs	r3, #0
    84b2:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
	mod->write_target_address = -1;
    84b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    84ba:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
}
    84be:	4770      	bx	lr

000084c0 <grid_nvm_init>:
void grid_nvm_init(struct grid_nvm_model* nvm, struct flash_descriptor* flash_instance){
    84c0:	b510      	push	{r4, lr}
	nvm->bank_settings_page_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    84c2:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
	nvm->flash = flash_instance;
    84c6:	e9c0 1300 	strd	r1, r3, [r0]
	nvm->status = 1;
    84ca:	2301      	movs	r3, #1
    84cc:	7203      	strb	r3, [r0, #8]
	nvm->read_buffer_status = GRID_NVM_BUFFER_STATUS_UNINITIALIZED;
    84ce:	2300      	movs	r3, #0
    84d0:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	nvm->write_buffer_status = GRID_NVM_BUFFER_STATUS_UNINITIALIZED;
    84d4:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	nvm->read_bulk_page_index = 0;
    84d8:	f8c0 3424 	str.w	r3, [r0, #1060]	; 0x424
	nvm->read_bulk_status = 0;
    84dc:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
	nvm->clear_bulk_page_index = 0;
    84e0:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
	nvm->clear_bulk_status = 0;	
    84e4:	f880 3430 	strb.w	r3, [r0, #1072]	; 0x430
	nvm->write_bulk_page_index = 0;
    84e8:	f8c0 343c 	str.w	r3, [r0, #1084]	; 0x43c
	nvm->write_bulk_status = 0;
    84ec:	f880 3440 	strb.w	r3, [r0, #1088]	; 0x440
	grid_nvm_clear_read_buffer(nvm);
    84f0:	4b02      	ldr	r3, [pc, #8]	; (84fc <grid_nvm_init+0x3c>)
    84f2:	4798      	blx	r3
}
    84f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	grid_nvm_clear_write_buffer(nvm);
    84f8:	4b01      	ldr	r3, [pc, #4]	; (8500 <grid_nvm_init+0x40>)
    84fa:	4718      	bx	r3
    84fc:	00008479 	.word	0x00008479
    8500:	00008499 	.word	0x00008499

00008504 <grid_nvm_calculate_event_page_offset>:


uint32_t grid_nvm_calculate_event_page_offset(struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    8504:	b510      	push	{r4, lr}
	
	
	
	uint8_t bank_number		= eve->parent->parent->index;
    8506:	684a      	ldr	r2, [r1, #4]
    8508:	6853      	ldr	r3, [r2, #4]
	uint8_t element_number	= eve->parent->index;
	uint8_t event_number	= eve->index;

	return GRID_NVM_STRATEGY_BANK_size * bank_number + GRID_NVM_STRATEGY_ELEMENT_size * element_number + GRID_NVM_STRATEGY_EVENT_size * event_number;
    850a:	7a1c      	ldrb	r4, [r3, #8]
    850c:	7a13      	ldrb	r3, [r2, #8]
    850e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8512:	20a0      	movs	r0, #160	; 0xa0
    8514:	005b      	lsls	r3, r3, #1
    8516:	fb10 3304 	smlabb	r3, r0, r4, r3
    851a:	7a08      	ldrb	r0, [r1, #8]
	
    851c:	4418      	add	r0, r3
    851e:	bd10      	pop	{r4, pc}

00008520 <_gpio_set_pin_pull_mode.constprop.0>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8520:	01c0      	lsls	r0, r0, #7
    8522:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8526:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
		break;

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    852a:	2301      	movs	r3, #1
    852c:	408b      	lsls	r3, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    852e:	4401      	add	r1, r0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8530:	6043      	str	r3, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8532:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
    8536:	f042 0204 	orr.w	r2, r2, #4
    853a:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    853e:	6183      	str	r3, [r0, #24]

	default:
		ASSERT(false);
		break;
	}
}
    8540:	4770      	bx	lr

00008542 <grid_task_enter_task>:
 * Author : SUKU WC
*/

#include "grid_sys.h"

enum grid_task grid_task_enter_task(struct grid_task_model* mod, enum grid_task next_task){
    8542:	4603      	mov	r3, r0
	
	
	enum grid_task previous_task = mod->current_task;
    8544:	7840      	ldrb	r0, [r0, #1]
	mod->current_task = next_task;
    8546:	7059      	strb	r1, [r3, #1]
	return previous_task;
	
}
    8548:	4770      	bx	lr

0000854a <grid_task_timer_tick>:
	
}

void grid_task_timer_tick(struct grid_task_model* mod){
	
	mod->timer[mod->current_task]++;
    854a:	7843      	ldrb	r3, [r0, #1]
    854c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8550:	6843      	ldr	r3, [r0, #4]
    8552:	3301      	adds	r3, #1
    8554:	6043      	str	r3, [r0, #4]
	
}
    8556:	4770      	bx	lr

00008558 <grid_task_timer_reset>:

void grid_task_timer_reset(struct grid_task_model* mod){
	
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
		mod->timer[i] = 0;
    8558:	2300      	movs	r3, #0
    855a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    855e:	e9c0 3303 	strd	r3, r3, [r0, #12]
    8562:	e9c0 3305 	strd	r3, r3, [r0, #20]
    8566:	e9c0 3307 	strd	r3, r3, [r0, #28]
	}
	
}
    856a:	4770      	bx	lr

0000856c <grid_task_timer_read>:

uint32_t grid_task_timer_read(struct grid_task_model* mod, enum grid_task task){

	return 	mod->timer[task];
    856c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	
}
    8570:	6848      	ldr	r0, [r1, #4]
    8572:	4770      	bx	lr

00008574 <grid_sys_nvm_store_configuration>:




void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8578:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec

	struct grid_msg message;
	
	grid_msg_init(&message);
    857c:	4b6a      	ldr	r3, [pc, #424]	; (8728 <grid_sys_nvm_store_configuration+0x1b4>)
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    857e:	4c6b      	ldr	r4, [pc, #428]	; (872c <grid_sys_nvm_store_configuration+0x1b8>)
	for(uint8_t i=0; i<4; i++){
		
		// BANK ENABLED	
		offset = grid_msg_body_get_length(&message);
			
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8580:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8754 <grid_sys_nvm_store_configuration+0x1e0>
void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8584:	4606      	mov	r6, r0
	grid_msg_init(&message);
    8586:	a86c      	add	r0, sp, #432	; 0x1b0
void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8588:	460f      	mov	r7, r1
	grid_msg_init(&message);
    858a:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    858c:	22ff      	movs	r2, #255	; 0xff
    858e:	4611      	mov	r1, r2
    8590:	2300      	movs	r3, #0
    8592:	a86c      	add	r0, sp, #432	; 0x1b0
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8594:	2500      	movs	r5, #0
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8596:	47a0      	blx	r4
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8598:	4b65      	ldr	r3, [pc, #404]	; (8730 <grid_sys_nvm_store_configuration+0x1bc>)
    859a:	9508      	str	r5, [sp, #32]
    859c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    85a0:	4629      	mov	r1, r5
    85a2:	a809      	add	r0, sp, #36	; 0x24
    85a4:	4798      	blx	r3
	for(uint8_t i=0; i<4; i++){
    85a6:	3613      	adds	r6, #19
		offset = grid_msg_body_get_length(&message);
    85a8:	4b62      	ldr	r3, [pc, #392]	; (8734 <grid_sys_nvm_store_configuration+0x1c0>)
		payload_length = strlen(payload);
    85aa:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8760 <grid_sys_nvm_store_configuration+0x1ec>
			
		grid_msg_body_append_text(&message, payload, payload_length);
    85ae:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8764 <grid_sys_nvm_store_configuration+0x1f0>
			
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    85b2:	4c61      	ldr	r4, [pc, #388]	; (8738 <grid_sys_nvm_store_configuration+0x1c4>)
		offset = grid_msg_body_get_length(&message);
    85b4:	a86c      	add	r0, sp, #432	; 0x1b0
    85b6:	4798      	blx	r3
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    85b8:	2203      	movs	r2, #3
		offset = grid_msg_body_get_length(&message);
    85ba:	4680      	mov	r8, r0
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    85bc:	2331      	movs	r3, #49	; 0x31
    85be:	495f      	ldr	r1, [pc, #380]	; (873c <grid_sys_nvm_store_configuration+0x1c8>)
    85c0:	9200      	str	r2, [sp, #0]
    85c2:	a808      	add	r0, sp, #32
    85c4:	2202      	movs	r2, #2
    85c6:	47d0      	blx	sl
		payload_length = strlen(payload);
    85c8:	a808      	add	r0, sp, #32
    85ca:	47d8      	blx	fp
		grid_msg_body_append_text(&message, payload, payload_length);
    85cc:	a908      	add	r1, sp, #32
    85ce:	b2c2      	uxtb	r2, r0
    85d0:	a86c      	add	r0, sp, #432	; 0x1b0
    85d2:	47c8      	blx	r9
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    85d4:	220e      	movs	r2, #14
    85d6:	4641      	mov	r1, r8
    85d8:	9200      	str	r2, [sp, #0]
    85da:	2301      	movs	r3, #1
    85dc:	2204      	movs	r2, #4
    85de:	a86c      	add	r0, sp, #432	; 0x1b0
    85e0:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_BANKNUMBER_offset, GRID_CLASS_BANKENABLED_BANKNUMBER_length, i);
    85e2:	4641      	mov	r1, r8
    85e4:	9500      	str	r5, [sp, #0]
    85e6:	2302      	movs	r3, #2
    85e8:	2205      	movs	r2, #5
    85ea:	a86c      	add	r0, sp, #432	; 0x1b0
    85ec:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_ISENABLED_offset, GRID_CLASS_BANKENABLED_ISENABLED_length, sys->bank_enabled[i]);		
    85ee:	f816 3b01 	ldrb.w	r3, [r6], #1
    85f2:	9300      	str	r3, [sp, #0]
    85f4:	4641      	mov	r1, r8
    85f6:	2207      	movs	r2, #7
    85f8:	2302      	movs	r3, #2
    85fa:	a86c      	add	r0, sp, #432	; 0x1b0
    85fc:	47a0      	blx	r4
			
		// BANK COLOR	
		offset = grid_msg_body_get_length(&message);
    85fe:	4b4d      	ldr	r3, [pc, #308]	; (8734 <grid_sys_nvm_store_configuration+0x1c0>)
    8600:	a86c      	add	r0, sp, #432	; 0x1b0
    8602:	4798      	blx	r3
		
		sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8604:	2303      	movs	r3, #3
		offset = grid_msg_body_get_length(&message);
    8606:	4680      	mov	r8, r0
		sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8608:	494d      	ldr	r1, [pc, #308]	; (8740 <grid_sys_nvm_store_configuration+0x1cc>)
    860a:	9300      	str	r3, [sp, #0]
    860c:	2202      	movs	r2, #2
    860e:	2332      	movs	r3, #50	; 0x32
    8610:	a808      	add	r0, sp, #32
    8612:	47d0      	blx	sl
		payload_length = strlen(payload);
    8614:	a808      	add	r0, sp, #32
    8616:	47d8      	blx	fp
		
		grid_msg_body_append_text(&message, payload, payload_length);
    8618:	a908      	add	r1, sp, #32
    861a:	b2c2      	uxtb	r2, r0
    861c:	a86c      	add	r0, sp, #432	; 0x1b0
    861e:	47c8      	blx	r9

		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    8620:	230e      	movs	r3, #14
    8622:	4641      	mov	r1, r8
    8624:	9300      	str	r3, [sp, #0]
    8626:	2204      	movs	r2, #4
    8628:	2301      	movs	r3, #1
    862a:	a86c      	add	r0, sp, #432	; 0x1b0
    862c:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_NUM_offset, GRID_CLASS_BANKCOLOR_NUM_length, i);
    862e:	4641      	mov	r1, r8
    8630:	9500      	str	r5, [sp, #0]
    8632:	2302      	movs	r3, #2
    8634:	2205      	movs	r2, #5
    8636:	a86c      	add	r0, sp, #432	; 0x1b0
    8638:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_RED_offset, GRID_CLASS_BANKCOLOR_RED_length, sys->bank_color_r[i]);
    863a:	78f3      	ldrb	r3, [r6, #3]
    863c:	9300      	str	r3, [sp, #0]
    863e:	4641      	mov	r1, r8
    8640:	2302      	movs	r3, #2
    8642:	2207      	movs	r2, #7
    8644:	a86c      	add	r0, sp, #432	; 0x1b0
    8646:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_GRE_offset, GRID_CLASS_BANKCOLOR_GRE_length, sys->bank_color_g[i]);
    8648:	79f3      	ldrb	r3, [r6, #7]
    864a:	9300      	str	r3, [sp, #0]
    864c:	4641      	mov	r1, r8
    864e:	2302      	movs	r3, #2
    8650:	2209      	movs	r2, #9
    8652:	a86c      	add	r0, sp, #432	; 0x1b0
    8654:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_BLU_offset, GRID_CLASS_BANKCOLOR_BLU_length, sys->bank_color_b[i]);
    8656:	7af3      	ldrb	r3, [r6, #11]
    8658:	9300      	str	r3, [sp, #0]
    865a:	4641      	mov	r1, r8
    865c:	2302      	movs	r3, #2
    865e:	220b      	movs	r2, #11
    8660:	a86c      	add	r0, sp, #432	; 0x1b0
    8662:	3501      	adds	r5, #1
    8664:	47a0      	blx	r4
	for(uint8_t i=0; i<4; i++){
    8666:	2d04      	cmp	r5, #4
    8668:	46d8      	mov	r8, fp
    866a:	d19d      	bne.n	85a8 <grid_sys_nvm_store_configuration+0x34>
		
		
	}
	
	grid_msg_packet_close(&message);
    866c:	4e35      	ldr	r6, [pc, #212]	; (8744 <grid_sys_nvm_store_configuration+0x1d0>)

	grid_nvm_clear_write_buffer(nvm);
	
	uint8_t acknowledge = 0;
	
	if (grid_msg_packet_get_length(&message)){
    866e:	4d36      	ldr	r5, [pc, #216]	; (8748 <grid_sys_nvm_store_configuration+0x1d4>)
	grid_msg_packet_close(&message);
    8670:	a86c      	add	r0, sp, #432	; 0x1b0
    8672:	47b0      	blx	r6
	grid_nvm_clear_write_buffer(nvm);
    8674:	4b35      	ldr	r3, [pc, #212]	; (874c <grid_sys_nvm_store_configuration+0x1d8>)
    8676:	4638      	mov	r0, r7
    8678:	4798      	blx	r3
	if (grid_msg_packet_get_length(&message)){
    867a:	a86c      	add	r0, sp, #432	; 0x1b0
    867c:	47a8      	blx	r5
    867e:	9602      	str	r6, [sp, #8]
    8680:	2800      	cmp	r0, #0
    8682:	d04c      	beq.n	871e <grid_sys_nvm_store_configuration+0x1aa>

		nvm->write_buffer_length = grid_msg_packet_get_length(&message);
    8684:	a86c      	add	r0, sp, #432	; 0x1b0
    8686:	47a8      	blx	r5
    8688:	f507 7a06 	add.w	sl, r7, #536	; 0x218
		
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
			
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    868c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8768 <grid_sys_nvm_store_configuration+0x1f4>
		nvm->write_buffer_length = grid_msg_packet_get_length(&message);
    8690:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    8694:	2500      	movs	r5, #0
    8696:	4652      	mov	r2, sl
    8698:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
    869c:	42ab      	cmp	r3, r5
    869e:	d835      	bhi.n	870c <grid_sys_nvm_store_configuration+0x198>
		}
		
		nvm->write_target_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    86a0:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, nvm->write_buffer_length);
    86a4:	4d2a      	ldr	r5, [pc, #168]	; (8750 <grid_sys_nvm_store_configuration+0x1dc>)
    86a6:	6838      	ldr	r0, [r7, #0]
		nvm->write_target_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    86a8:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, nvm->write_buffer_length);
    86ac:	47a8      	blx	r5
		
		acknowledge = 1;
    86ae:	2501      	movs	r5, #1

	
	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
	
	grid_msg_init(&response);
    86b0:	4b1d      	ldr	r3, [pc, #116]	; (8728 <grid_sys_nvm_store_configuration+0x1b4>)
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    86b2:	4f1e      	ldr	r7, [pc, #120]	; (872c <grid_sys_nvm_store_configuration+0x1b8>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    86b4:	4e27      	ldr	r6, [pc, #156]	; (8754 <grid_sys_nvm_store_configuration+0x1e0>)
	grid_msg_init(&response);
    86b6:	a8d3      	add	r0, sp, #844	; 0x34c
    86b8:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    86ba:	227f      	movs	r2, #127	; 0x7f
    86bc:	4611      	mov	r1, r2
    86be:	2300      	movs	r3, #0
    86c0:	a8d3      	add	r0, sp, #844	; 0x34c
    86c2:	47b8      	blx	r7
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    86c4:	2303      	movs	r3, #3
    86c6:	4924      	ldr	r1, [pc, #144]	; (8758 <grid_sys_nvm_store_configuration+0x1e4>)
    86c8:	9300      	str	r3, [sp, #0]
    86ca:	2202      	movs	r2, #2
	uint8_t response_payload[10] = {0};
    86cc:	2700      	movs	r7, #0
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    86ce:	2360      	movs	r3, #96	; 0x60
    86d0:	a805      	add	r0, sp, #20
	uint8_t response_payload[10] = {0};
    86d2:	e9cd 7705 	strd	r7, r7, [sp, #20]
    86d6:	f8ad 701c 	strh.w	r7, [sp, #28]
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    86da:	47b0      	blx	r6

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    86dc:	a805      	add	r0, sp, #20
    86de:	47c0      	blx	r8
    86e0:	a905      	add	r1, sp, #20
    86e2:	4602      	mov	r2, r0
    86e4:	a8d3      	add	r0, sp, #844	; 0x34c
    86e6:	47c8      	blx	r9
	
	if (acknowledge == 1){
    86e8:	b1dd      	cbz	r5, 8722 <grid_sys_nvm_store_configuration+0x1ae>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);	
    86ea:	230a      	movs	r3, #10
	}
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);	
    86ec:	2204      	movs	r2, #4
    86ee:	4639      	mov	r1, r7
    86f0:	9300      	str	r3, [sp, #0]
    86f2:	a8d3      	add	r0, sp, #844	; 0x34c
    86f4:	2301      	movs	r3, #1
    86f6:	47a0      	blx	r4
	}

	
	grid_msg_packet_close(&response);
    86f8:	9b02      	ldr	r3, [sp, #8]
    86fa:	a8d3      	add	r0, sp, #844	; 0x34c
    86fc:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    86fe:	4b17      	ldr	r3, [pc, #92]	; (875c <grid_sys_nvm_store_configuration+0x1e8>)
    8700:	a8d3      	add	r0, sp, #844	; 0x34c
    8702:	4798      	blx	r3
		
	
}
    8704:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
    8708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    870c:	4629      	mov	r1, r5
    870e:	a86c      	add	r0, sp, #432	; 0x1b0
    8710:	9203      	str	r2, [sp, #12]
    8712:	47d8      	blx	fp
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    8714:	3501      	adds	r5, #1
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    8716:	f80a 0b01 	strb.w	r0, [sl], #1
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    871a:	9a03      	ldr	r2, [sp, #12]
    871c:	e7bc      	b.n	8698 <grid_sys_nvm_store_configuration+0x124>
	uint8_t acknowledge = 0;
    871e:	4605      	mov	r5, r0
    8720:	e7c6      	b.n	86b0 <grid_sys_nvm_store_configuration+0x13c>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);	
    8722:	230b      	movs	r3, #11
    8724:	e7e2      	b.n	86ec <grid_sys_nvm_store_configuration+0x178>
    8726:	bf00      	nop
    8728:	00007d8d 	.word	0x00007d8d
    872c:	00007dc1 	.word	0x00007dc1
    8730:	00012519 	.word	0x00012519
    8734:	00007cf7 	.word	0x00007cf7
    8738:	00007d71 	.word	0x00007d71
    873c:	0001498c 	.word	0x0001498c
    8740:	00014752 	.word	0x00014752
    8744:	00007eb9 	.word	0x00007eb9
    8748:	00007ce9 	.word	0x00007ce9
    874c:	00008499 	.word	0x00008499
    8750:	0000d8f1 	.word	0x0000d8f1
    8754:	00012b75 	.word	0x00012b75
    8758:	00014982 	.word	0x00014982
    875c:	00007f8d 	.word	0x00007f8d
    8760:	00012c81 	.word	0x00012c81
    8764:	00007cfd 	.word	0x00007cfd
    8768:	00007e83 	.word	0x00007e83

0000876c <grid_sys_recall_configuration>:


void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8770:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344

	struct grid_msg message;
	
	grid_msg_init(&message);
    8774:	4b48      	ldr	r3, [pc, #288]	; (8898 <grid_sys_recall_configuration+0x12c>)
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8776:	4c49      	ldr	r4, [pc, #292]	; (889c <grid_sys_recall_configuration+0x130>)
void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    8778:	4605      	mov	r5, r0
	grid_msg_init(&message);
    877a:	a869      	add	r0, sp, #420	; 0x1a4
void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    877c:	468a      	mov	sl, r1
	grid_msg_init(&message);
    877e:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8780:	227f      	movs	r2, #127	; 0x7f
    8782:	4611      	mov	r1, r2
    8784:	2300      	movs	r3, #0
    8786:	a869      	add	r0, sp, #420	; 0x1a4
    8788:	47a0      	blx	r4


	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    878a:	2400      	movs	r4, #0
    878c:	4b44      	ldr	r3, [pc, #272]	; (88a0 <grid_sys_recall_configuration+0x134>)
    878e:	9405      	str	r4, [sp, #20]
    8790:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    8794:	4621      	mov	r1, r4
    8796:	a806      	add	r0, sp, #24
    8798:	4798      	blx	r3
	uint8_t payload_length = 0;
	uint32_t offset = 0;
	
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    879a:	3513      	adds	r5, #19
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    879c:	9403      	str	r4, [sp, #12]
		
		if (bank > GRID_SYS_BANK_MAXNUMBER || bank == i){
    879e:	f1ba 0f04 	cmp.w	sl, #4
    87a2:	d803      	bhi.n	87ac <grid_sys_recall_configuration+0x40>
    87a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    87a8:	459a      	cmp	sl, r3
    87aa:	d164      	bne.n	8876 <grid_sys_recall_configuration+0x10a>
			
			// BANK ENABLED
			offset = grid_msg_body_get_length(&message);
    87ac:	4b3d      	ldr	r3, [pc, #244]	; (88a4 <grid_sys_recall_configuration+0x138>)
		
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    87ae:	4e3e      	ldr	r6, [pc, #248]	; (88a8 <grid_sys_recall_configuration+0x13c>)
			payload_length = strlen(payload);
		
			grid_msg_body_append_text(&message, payload, payload_length);
    87b0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 88c4 <grid_sys_recall_configuration+0x158>
			offset = grid_msg_body_get_length(&message);
    87b4:	a869      	add	r0, sp, #420	; 0x1a4
    87b6:	4798      	blx	r3
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    87b8:	f04f 0b03 	mov.w	fp, #3
			offset = grid_msg_body_get_length(&message);
    87bc:	4607      	mov	r7, r0
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    87be:	2331      	movs	r3, #49	; 0x31
    87c0:	493a      	ldr	r1, [pc, #232]	; (88ac <grid_sys_recall_configuration+0x140>)
    87c2:	f8cd b000 	str.w	fp, [sp]
    87c6:	2202      	movs	r2, #2
    87c8:	a805      	add	r0, sp, #20
    87ca:	47b0      	blx	r6
			payload_length = strlen(payload);
    87cc:	4a38      	ldr	r2, [pc, #224]	; (88b0 <grid_sys_recall_configuration+0x144>)
    87ce:	a805      	add	r0, sp, #20
    87d0:	4790      	blx	r2
		
			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    87d2:	f04f 080d 	mov.w	r8, #13
			grid_msg_body_append_text(&message, payload, payload_length);
    87d6:	b2c2      	uxtb	r2, r0
    87d8:	a905      	add	r1, sp, #20
    87da:	a869      	add	r0, sp, #420	; 0x1a4
    87dc:	47c8      	blx	r9
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    87de:	4634      	mov	r4, r6
			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    87e0:	4639      	mov	r1, r7
    87e2:	4e34      	ldr	r6, [pc, #208]	; (88b4 <grid_sys_recall_configuration+0x148>)
    87e4:	f8cd 8000 	str.w	r8, [sp]
    87e8:	2301      	movs	r3, #1
    87ea:	2204      	movs	r2, #4
    87ec:	a869      	add	r0, sp, #420	; 0x1a4
    87ee:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_BANKNUMBER_offset, GRID_CLASS_BANKENABLED_BANKNUMBER_length, i);
    87f0:	9b03      	ldr	r3, [sp, #12]
    87f2:	9300      	str	r3, [sp, #0]
    87f4:	4639      	mov	r1, r7
    87f6:	2302      	movs	r3, #2
    87f8:	2205      	movs	r2, #5
    87fa:	a869      	add	r0, sp, #420	; 0x1a4
    87fc:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_ISENABLED_offset, GRID_CLASS_BANKENABLED_ISENABLED_length, sys->bank_enabled[i]);
    87fe:	782b      	ldrb	r3, [r5, #0]
    8800:	9300      	str	r3, [sp, #0]
    8802:	4639      	mov	r1, r7
    8804:	2207      	movs	r2, #7
    8806:	2302      	movs	r3, #2
    8808:	a869      	add	r0, sp, #420	; 0x1a4
    880a:	47b0      	blx	r6
		
			// BANK COLOR
			offset = grid_msg_body_get_length(&message);
    880c:	4b25      	ldr	r3, [pc, #148]	; (88a4 <grid_sys_recall_configuration+0x138>)
    880e:	a869      	add	r0, sp, #420	; 0x1a4
    8810:	4798      	blx	r3
		
			sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8812:	2332      	movs	r3, #50	; 0x32
			offset = grid_msg_body_get_length(&message);
    8814:	4607      	mov	r7, r0
			sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8816:	4928      	ldr	r1, [pc, #160]	; (88b8 <grid_sys_recall_configuration+0x14c>)
    8818:	f8cd b000 	str.w	fp, [sp]
    881c:	2202      	movs	r2, #2
    881e:	a805      	add	r0, sp, #20
    8820:	47a0      	blx	r4
			payload_length = strlen(payload);
    8822:	4a23      	ldr	r2, [pc, #140]	; (88b0 <grid_sys_recall_configuration+0x144>)
    8824:	a805      	add	r0, sp, #20
    8826:	4790      	blx	r2
		
			grid_msg_body_append_text(&message, payload, payload_length);
    8828:	a905      	add	r1, sp, #20
    882a:	b2c2      	uxtb	r2, r0
    882c:	a869      	add	r0, sp, #420	; 0x1a4
    882e:	47c8      	blx	r9

			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    8830:	2301      	movs	r3, #1
    8832:	2204      	movs	r2, #4
    8834:	4639      	mov	r1, r7
    8836:	a869      	add	r0, sp, #420	; 0x1a4
    8838:	f8cd 8000 	str.w	r8, [sp]
    883c:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_NUM_offset, GRID_CLASS_BANKCOLOR_NUM_length, i);
    883e:	9b03      	ldr	r3, [sp, #12]
    8840:	9300      	str	r3, [sp, #0]
    8842:	2205      	movs	r2, #5
    8844:	2302      	movs	r3, #2
    8846:	4639      	mov	r1, r7
    8848:	a869      	add	r0, sp, #420	; 0x1a4
    884a:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_RED_offset, GRID_CLASS_BANKCOLOR_RED_length, sys->bank_color_r[i]);
    884c:	792b      	ldrb	r3, [r5, #4]
    884e:	9300      	str	r3, [sp, #0]
    8850:	2207      	movs	r2, #7
    8852:	2302      	movs	r3, #2
    8854:	4639      	mov	r1, r7
    8856:	a869      	add	r0, sp, #420	; 0x1a4
    8858:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_GRE_offset, GRID_CLASS_BANKCOLOR_GRE_length, sys->bank_color_g[i]);
    885a:	7a2b      	ldrb	r3, [r5, #8]
    885c:	9300      	str	r3, [sp, #0]
    885e:	2209      	movs	r2, #9
    8860:	2302      	movs	r3, #2
    8862:	4639      	mov	r1, r7
    8864:	a869      	add	r0, sp, #420	; 0x1a4
    8866:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_BLU_offset, GRID_CLASS_BANKCOLOR_BLU_length, sys->bank_color_b[i]);
    8868:	7b2b      	ldrb	r3, [r5, #12]
    886a:	9300      	str	r3, [sp, #0]
    886c:	220b      	movs	r2, #11
    886e:	2302      	movs	r3, #2
    8870:	4639      	mov	r1, r7
    8872:	a869      	add	r0, sp, #420	; 0x1a4
    8874:	47b0      	blx	r6
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8876:	9b03      	ldr	r3, [sp, #12]
    8878:	3301      	adds	r3, #1
    887a:	2b04      	cmp	r3, #4
    887c:	9303      	str	r3, [sp, #12]
    887e:	f105 0501 	add.w	r5, r5, #1
    8882:	d18c      	bne.n	879e <grid_sys_recall_configuration+0x32>
		}

		
	}
	
	grid_msg_packet_close(&message);
    8884:	4b0d      	ldr	r3, [pc, #52]	; (88bc <grid_sys_recall_configuration+0x150>)
    8886:	a869      	add	r0, sp, #420	; 0x1a4
    8888:	4798      	blx	r3

	grid_msg_packet_send_everywhere(&message);
    888a:	4b0d      	ldr	r3, [pc, #52]	; (88c0 <grid_sys_recall_configuration+0x154>)
    888c:	a869      	add	r0, sp, #420	; 0x1a4
    888e:	4798      	blx	r3
// 	
// 	grid_msg_packet_close(&response);
// 	grid_msg_packet_send_everywhere(&response);
	
	
}
    8890:	f50d 7d51 	add.w	sp, sp, #836	; 0x344
    8894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8898:	00007d8d 	.word	0x00007d8d
    889c:	00007dc1 	.word	0x00007dc1
    88a0:	00012519 	.word	0x00012519
    88a4:	00007cf7 	.word	0x00007cf7
    88a8:	00012b75 	.word	0x00012b75
    88ac:	0001498c 	.word	0x0001498c
    88b0:	00012c81 	.word	0x00012c81
    88b4:	00007d71 	.word	0x00007d71
    88b8:	00014752 	.word	0x00014752
    88bc:	00007eb9 	.word	0x00007eb9
    88c0:	00007f8d 	.word	0x00007f8d
    88c4:	00007cfd 	.word	0x00007cfd

000088c8 <grid_sys_nvm_load_configuration>:


void grid_sys_nvm_load_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    88c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    88ca:	f5ad 7d6d 	sub.w	sp, sp, #948	; 0x3b4
	
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
    88ce:	2400      	movs	r4, #0
void grid_sys_nvm_load_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    88d0:	460e      	mov	r6, r1
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
    88d2:	4b2f      	ldr	r3, [pc, #188]	; (8990 <grid_sys_nvm_load_configuration+0xc8>)
    88d4:	946c      	str	r4, [sp, #432]	; 0x1b0
    88d6:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
    88da:	4621      	mov	r1, r4
    88dc:	a86d      	add	r0, sp, #436	; 0x1b4
    88de:	4798      	blx	r3
    88e0:	ad6c      	add	r5, sp, #432	; 0x1b0
	uint16_t length = 0;
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    88e2:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
    88e6:	f8c6 1214 	str.w	r1, [r6, #532]	; 0x214
	
	flash_read(nvm->flash, nvm->read_source_address, temp, GRID_NVM_PAGE_SIZE);
    88ea:	6830      	ldr	r0, [r6, #0]
    88ec:	4e29      	ldr	r6, [pc, #164]	; (8994 <grid_sys_nvm_load_configuration+0xcc>)
    88ee:	f44f 7300 	mov.w	r3, #512	; 0x200
    88f2:	462a      	mov	r2, r5
    88f4:	47b0      	blx	r6
			}
			else if (temp[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
				copydone = 1;
			}
			else{ // NORMAL CHARACTER, can be copied
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    88f6:	4a28      	ldr	r2, [pc, #160]	; (8998 <grid_sys_nvm_load_configuration+0xd0>)
	flash_read(nvm->flash, nvm->read_source_address, temp, GRID_NVM_PAGE_SIZE);
    88f8:	4621      	mov	r1, r4
	uint8_t acknowledge = 0;	
    88fa:	4626      	mov	r6, r4
	uint8_t copydone = 0;
    88fc:	4623      	mov	r3, r4
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    88fe:	f241 37b4 	movw	r7, #5044	; 0x13b4
		if (copydone == 0){
    8902:	1c4c      	adds	r4, r1, #1
    8904:	b943      	cbnz	r3, 8918 <grid_sys_nvm_load_configuration+0x50>
			if (temp[i] == '\n'){ // END OF PACKET, copy newline character
    8906:	5c68      	ldrb	r0, [r5, r1]
    8908:	280a      	cmp	r0, #10
    890a:	d139      	bne.n	8980 <grid_sys_nvm_load_configuration+0xb8>
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    890c:	4411      	add	r1, r2
    890e:	55c8      	strb	r0, [r1, r7]
				GRID_PORT_U.rx_double_buffer_status = i+1;
    8910:	6214      	str	r4, [r2, #32]
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    8912:	6293      	str	r3, [r2, #40]	; 0x28
				acknowledge = 1;
    8914:	2301      	movs	r3, #1
				copydone = 1;
    8916:	461e      	mov	r6, r3
	for (uint16_t i=0; i<GRID_NVM_PAGE_SIZE; i++){		
    8918:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    891c:	4621      	mov	r1, r4
    891e:	d1f0      	bne.n	8902 <grid_sys_nvm_load_configuration+0x3a>
	
	
	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
	
	grid_msg_init(&response);
    8920:	4b1e      	ldr	r3, [pc, #120]	; (899c <grid_sys_nvm_load_configuration+0xd4>)
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8922:	4c1f      	ldr	r4, [pc, #124]	; (89a0 <grid_sys_nvm_load_configuration+0xd8>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    8924:	4d1f      	ldr	r5, [pc, #124]	; (89a4 <grid_sys_nvm_load_configuration+0xdc>)
	grid_msg_init(&response);
    8926:	a805      	add	r0, sp, #20
    8928:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    892a:	227f      	movs	r2, #127	; 0x7f
    892c:	4611      	mov	r1, r2
    892e:	2300      	movs	r3, #0
    8930:	a805      	add	r0, sp, #20
    8932:	47a0      	blx	r4
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    8934:	2303      	movs	r3, #3
    8936:	491c      	ldr	r1, [pc, #112]	; (89a8 <grid_sys_nvm_load_configuration+0xe0>)
    8938:	9300      	str	r3, [sp, #0]
    893a:	2202      	movs	r2, #2
	uint8_t response_payload[10] = {0};
    893c:	2400      	movs	r4, #0
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    893e:	2361      	movs	r3, #97	; 0x61
    8940:	a802      	add	r0, sp, #8
	uint8_t response_payload[10] = {0};
    8942:	e9cd 4402 	strd	r4, r4, [sp, #8]
    8946:	f8ad 4010 	strh.w	r4, [sp, #16]
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    894a:	47a8      	blx	r5

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    894c:	4b17      	ldr	r3, [pc, #92]	; (89ac <grid_sys_nvm_load_configuration+0xe4>)
    894e:	4d18      	ldr	r5, [pc, #96]	; (89b0 <grid_sys_nvm_load_configuration+0xe8>)
    8950:	a802      	add	r0, sp, #8
    8952:	4798      	blx	r3
    8954:	4b17      	ldr	r3, [pc, #92]	; (89b4 <grid_sys_nvm_load_configuration+0xec>)
    8956:	4602      	mov	r2, r0
    8958:	a902      	add	r1, sp, #8
    895a:	a805      	add	r0, sp, #20
    895c:	4798      	blx	r3
	
	if (acknowledge == 1){
    895e:	b1ae      	cbz	r6, 898c <grid_sys_nvm_load_configuration+0xc4>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8960:	230a      	movs	r3, #10
	}
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    8962:	2204      	movs	r2, #4
    8964:	4621      	mov	r1, r4
    8966:	9300      	str	r3, [sp, #0]
    8968:	a805      	add	r0, sp, #20
    896a:	2301      	movs	r3, #1
    896c:	47a8      	blx	r5
	}

	
	grid_msg_packet_close(&response);
    896e:	4b12      	ldr	r3, [pc, #72]	; (89b8 <grid_sys_nvm_load_configuration+0xf0>)
    8970:	a805      	add	r0, sp, #20
    8972:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    8974:	4b11      	ldr	r3, [pc, #68]	; (89bc <grid_sys_nvm_load_configuration+0xf4>)
    8976:	a805      	add	r0, sp, #20
    8978:	4798      	blx	r3
	
}
    897a:	f50d 7d6d 	add.w	sp, sp, #948	; 0x3b4
    897e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (temp[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
    8980:	28ff      	cmp	r0, #255	; 0xff
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    8982:	bf16      	itet	ne
    8984:	1889      	addne	r1, r1, r2
				copydone = 1;
    8986:	2301      	moveq	r3, #1
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    8988:	55c8      	strbne	r0, [r1, r7]
    898a:	e7c5      	b.n	8918 <grid_sys_nvm_load_configuration+0x50>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    898c:	230b      	movs	r3, #11
    898e:	e7e8      	b.n	8962 <grid_sys_nvm_load_configuration+0x9a>
    8990:	00012519 	.word	0x00012519
    8994:	0000d885 	.word	0x0000d885
    8998:	2000403c 	.word	0x2000403c
    899c:	00007d8d 	.word	0x00007d8d
    89a0:	00007dc1 	.word	0x00007dc1
    89a4:	00012b75 	.word	0x00012b75
    89a8:	00014982 	.word	0x00014982
    89ac:	00012c81 	.word	0x00012c81
    89b0:	00007d71 	.word	0x00007d71
    89b4:	00007cfd 	.word	0x00007cfd
    89b8:	00007eb9 	.word	0x00007eb9
    89bc:	00007f8d 	.word	0x00007f8d

000089c0 <grid_sys_nvm_clear_configuration>:

void grid_sys_nvm_clear_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    89c0:	b530      	push	{r4, r5, lr}
    89c2:	460b      	mov	r3, r1
	
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
	uint16_t length = 0;
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    89c4:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
void grid_sys_nvm_clear_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    89c8:	b0ed      	sub	sp, #436	; 0x1b4
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    89ca:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
	
	flash_erase(nvm->flash, GRID_NVM_GLOBAL_BASE_ADDRESS, 1);
    89ce:	2201      	movs	r2, #1
    89d0:	6818      	ldr	r0, [r3, #0]
    89d2:	4b18      	ldr	r3, [pc, #96]	; (8a34 <grid_sys_nvm_clear_configuration+0x74>)

	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
		
	grid_msg_init(&response);
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    89d4:	4c18      	ldr	r4, [pc, #96]	; (8a38 <grid_sys_nvm_clear_configuration+0x78>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    89d6:	4d19      	ldr	r5, [pc, #100]	; (8a3c <grid_sys_nvm_clear_configuration+0x7c>)
	flash_erase(nvm->flash, GRID_NVM_GLOBAL_BASE_ADDRESS, 1);
    89d8:	4798      	blx	r3
	grid_msg_init(&response);
    89da:	a805      	add	r0, sp, #20
    89dc:	4b18      	ldr	r3, [pc, #96]	; (8a40 <grid_sys_nvm_clear_configuration+0x80>)
    89de:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    89e0:	227f      	movs	r2, #127	; 0x7f
    89e2:	4611      	mov	r1, r2
    89e4:	a805      	add	r0, sp, #20
    89e6:	2300      	movs	r3, #0
    89e8:	47a0      	blx	r4
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    89ea:	2303      	movs	r3, #3
	uint8_t response_payload[10] = {0};
    89ec:	2400      	movs	r4, #0
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    89ee:	4915      	ldr	r1, [pc, #84]	; (8a44 <grid_sys_nvm_clear_configuration+0x84>)
    89f0:	9300      	str	r3, [sp, #0]
    89f2:	2202      	movs	r2, #2
    89f4:	2362      	movs	r3, #98	; 0x62
    89f6:	a802      	add	r0, sp, #8
	uint8_t response_payload[10] = {0};
    89f8:	e9cd 4402 	strd	r4, r4, [sp, #8]
    89fc:	f8ad 4010 	strh.w	r4, [sp, #16]
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    8a00:	47a8      	blx	r5

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8a02:	4b11      	ldr	r3, [pc, #68]	; (8a48 <grid_sys_nvm_clear_configuration+0x88>)
    8a04:	a802      	add	r0, sp, #8
    8a06:	4798      	blx	r3
    8a08:	a902      	add	r1, sp, #8
    8a0a:	4602      	mov	r2, r0
    8a0c:	4b0f      	ldr	r3, [pc, #60]	; (8a4c <grid_sys_nvm_clear_configuration+0x8c>)
    8a0e:	a805      	add	r0, sp, #20
    8a10:	4798      	blx	r3
		
	if (acknowledge == 1){
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8a12:	230a      	movs	r3, #10
    8a14:	4621      	mov	r1, r4
    8a16:	2204      	movs	r2, #4
    8a18:	9300      	str	r3, [sp, #0]
    8a1a:	a805      	add	r0, sp, #20
    8a1c:	4c0c      	ldr	r4, [pc, #48]	; (8a50 <grid_sys_nvm_clear_configuration+0x90>)
    8a1e:	2301      	movs	r3, #1
    8a20:	47a0      	blx	r4
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
	}

		
	grid_msg_packet_close(&response);
    8a22:	4b0c      	ldr	r3, [pc, #48]	; (8a54 <grid_sys_nvm_clear_configuration+0x94>)
    8a24:	a805      	add	r0, sp, #20
    8a26:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    8a28:	4b0b      	ldr	r3, [pc, #44]	; (8a58 <grid_sys_nvm_clear_configuration+0x98>)
    8a2a:	a805      	add	r0, sp, #20
    8a2c:	4798      	blx	r3
	
	
}
    8a2e:	b06d      	add	sp, #436	; 0x1b4
    8a30:	bd30      	pop	{r4, r5, pc}
    8a32:	bf00      	nop
    8a34:	0000d971 	.word	0x0000d971
    8a38:	00007dc1 	.word	0x00007dc1
    8a3c:	00012b75 	.word	0x00012b75
    8a40:	00007d8d 	.word	0x00007d8d
    8a44:	00014982 	.word	0x00014982
    8a48:	00012c81 	.word	0x00012c81
    8a4c:	00007cfd 	.word	0x00007cfd
    8a50:	00007d71 	.word	0x00007d71
    8a54:	00007eb9 	.word	0x00007eb9
    8a58:	00007f8d 	.word	0x00007f8d

00008a5c <grid_debug_print_text>:



void grid_debug_print_text(uint8_t* debug_string){
    8a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	uint32_t debug_string_length = strlen(debug_string);
    8a60:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8b44 <grid_debug_print_text+0xe8>
	
	struct grid_msg message;
	
	grid_msg_init(&message);
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8a64:	4c2b      	ldr	r4, [pc, #172]	; (8b14 <grid_debug_print_text+0xb8>)
	
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
	uint32_t offset = 0;
	
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_start);
    8a66:	4e2c      	ldr	r6, [pc, #176]	; (8b18 <grid_debug_print_text+0xbc>)
	offset += strlen(&payload[offset]);
		
	sprintf(&payload[offset], "# ");
    8a68:	4f2c      	ldr	r7, [pc, #176]	; (8b1c <grid_debug_print_text+0xc0>)
void grid_debug_print_text(uint8_t* debug_string){
    8a6a:	f5ad 7d4c 	sub.w	sp, sp, #816	; 0x330
    8a6e:	4681      	mov	r9, r0
	uint32_t debug_string_length = strlen(debug_string);
    8a70:	47d0      	blx	sl
	grid_msg_init(&message);
    8a72:	4b2b      	ldr	r3, [pc, #172]	; (8b20 <grid_debug_print_text+0xc4>)
	uint32_t debug_string_length = strlen(debug_string);
    8a74:	4680      	mov	r8, r0
	grid_msg_init(&message);
    8a76:	a865      	add	r0, sp, #404	; 0x194
    8a78:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8a7a:	227f      	movs	r2, #127	; 0x7f
    8a7c:	4611      	mov	r1, r2
    8a7e:	2300      	movs	r3, #0
    8a80:	a865      	add	r0, sp, #404	; 0x194
    8a82:	47a0      	blx	r4
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8a84:	2400      	movs	r4, #0
    8a86:	4621      	mov	r1, r4
    8a88:	4b26      	ldr	r3, [pc, #152]	; (8b24 <grid_debug_print_text+0xc8>)
    8a8a:	9401      	str	r4, [sp, #4]
    8a8c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    8a90:	a802      	add	r0, sp, #8
    8a92:	4798      	blx	r3
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_start);
    8a94:	2202      	movs	r2, #2
    8a96:	4924      	ldr	r1, [pc, #144]	; (8b28 <grid_debug_print_text+0xcc>)
    8a98:	2320      	movs	r3, #32
    8a9a:	a801      	add	r0, sp, #4
    8a9c:	47b0      	blx	r6
	offset += strlen(&payload[offset]);
    8a9e:	a801      	add	r0, sp, #4
    8aa0:	47d0      	blx	sl
	sprintf(&payload[offset], "# ");
    8aa2:	ab01      	add	r3, sp, #4
    8aa4:	4403      	add	r3, r0
    8aa6:	4921      	ldr	r1, [pc, #132]	; (8b2c <grid_debug_print_text+0xd0>)
	offset += strlen(&payload[offset]);
    8aa8:	4605      	mov	r5, r0
	sprintf(&payload[offset], "# ");
    8aaa:	4618      	mov	r0, r3
    8aac:	47b8      	blx	r7
	offset += strlen(&payload[offset]);
    8aae:	47d0      	blx	sl
    8ab0:	ab01      	add	r3, sp, #4
    8ab2:	4405      	add	r5, r0

	for(uint32_t i=0; i<debug_string_length; i++){
    8ab4:	1958      	adds	r0, r3, r5
    8ab6:	4621      	mov	r1, r4
    8ab8:	4603      	mov	r3, r0
    8aba:	4654      	mov	r4, sl
    8abc:	4541      	cmp	r1, r8
    8abe:	d006      	beq.n	8ace <grid_debug_print_text+0x72>
		
		payload[offset+i] = debug_string[i];
    8ac0:	f819 2001 	ldrb.w	r2, [r9, r1]
    8ac4:	f803 2b01 	strb.w	r2, [r3], #1
		
		if (offset + i > GRID_PARAMETER_PACKET_marign)
    8ac8:	194a      	adds	r2, r1, r5
    8aca:	2ac8      	cmp	r2, #200	; 0xc8
    8acc:	d91f      	bls.n	8b0e <grid_debug_print_text+0xb2>
		{
			break;
		}
	}
	offset += strlen(&payload[offset]);
    8ace:	47a0      	blx	r4
	
	
	sprintf(&payload[offset], " #");
    8ad0:	ab01      	add	r3, sp, #4
	offset += strlen(&payload[offset]);
    8ad2:	4405      	add	r5, r0
	sprintf(&payload[offset], " #");
    8ad4:	442b      	add	r3, r5
    8ad6:	4916      	ldr	r1, [pc, #88]	; (8b30 <grid_debug_print_text+0xd4>)
    8ad8:	4618      	mov	r0, r3
    8ada:	47b8      	blx	r7
	offset += strlen(&payload[offset]);
    8adc:	47a0      	blx	r4
	
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_end);
    8ade:	ab01      	add	r3, sp, #4
	offset += strlen(&payload[offset]);
    8ae0:	4405      	add	r5, r0
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_end);
    8ae2:	195f      	adds	r7, r3, r5
    8ae4:	4913      	ldr	r1, [pc, #76]	; (8b34 <grid_debug_print_text+0xd8>)
    8ae6:	2203      	movs	r2, #3
    8ae8:	4638      	mov	r0, r7
    8aea:	47b0      	blx	r6
	offset += strlen(&payload[offset]);	
    8aec:	4638      	mov	r0, r7
    8aee:	47a0      	blx	r4
	
	grid_msg_body_append_text(&message, payload, offset);
    8af0:	a901      	add	r1, sp, #4
    8af2:	1942      	adds	r2, r0, r5
    8af4:	4b10      	ldr	r3, [pc, #64]	; (8b38 <grid_debug_print_text+0xdc>)
    8af6:	a865      	add	r0, sp, #404	; 0x194
    8af8:	4798      	blx	r3
	grid_msg_packet_close(&message);
    8afa:	4b10      	ldr	r3, [pc, #64]	; (8b3c <grid_debug_print_text+0xe0>)
    8afc:	a865      	add	r0, sp, #404	; 0x194
    8afe:	4798      	blx	r3
	
	grid_msg_packet_send_everywhere(&message);
    8b00:	4b0f      	ldr	r3, [pc, #60]	; (8b40 <grid_debug_print_text+0xe4>)
    8b02:	a865      	add	r0, sp, #404	; 0x194
    8b04:	4798      	blx	r3
	

	
	
}
    8b06:	f50d 7d4c 	add.w	sp, sp, #816	; 0x330
    8b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for(uint32_t i=0; i<debug_string_length; i++){
    8b0e:	3101      	adds	r1, #1
    8b10:	e7d4      	b.n	8abc <grid_debug_print_text+0x60>
    8b12:	bf00      	nop
    8b14:	00007dc1 	.word	0x00007dc1
    8b18:	00012b75 	.word	0x00012b75
    8b1c:	00012bb9 	.word	0x00012bb9
    8b20:	00007d8d 	.word	0x00007d8d
    8b24:	00012519 	.word	0x00012519
    8b28:	0001499a 	.word	0x0001499a
    8b2c:	000149a2 	.word	0x000149a2
    8b30:	000149a5 	.word	0x000149a5
    8b34:	0001474f 	.word	0x0001474f
    8b38:	00007cfd 	.word	0x00007cfd
    8b3c:	00007eb9 	.word	0x00007eb9
    8b40:	00007f8d 	.word	0x00007f8d
    8b44:	00012c81 	.word	0x00012c81

00008b48 <tx_cb_USART_GRID>:
static void tx_cb_USART_GRID_W(const struct usart_async_descriptor *const descr)
{
	tx_cb_USART_GRID(&GRID_PORT_W);
}

void tx_cb_USART_GRID(struct grid_port* const por){
    8b48:	b530      	push	{r4, r5, lr}
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    8b4a:	f06f 052b 	mvn.w	r5, #43	; 0x2b
    8b4e:	8984      	ldrh	r4, [r0, #12]
    8b50:	f100 032c 	add.w	r3, r0, #44	; 0x2c
    8b54:	1a2d      	subs	r5, r5, r0
    8b56:	2200      	movs	r2, #0
    8b58:	18e9      	adds	r1, r5, r3
    8b5a:	428c      	cmp	r4, r1
    8b5c:	d801      	bhi.n	8b62 <tx_cb_USART_GRID+0x1a>
		por->tx_double_buffer[i] = 0;
	}
	por->tx_double_buffer_status = 0;	
    8b5e:	8182      	strh	r2, [r0, #12]
}
    8b60:	bd30      	pop	{r4, r5, pc}
		por->tx_double_buffer[i] = 0;
    8b62:	f803 2b01 	strb.w	r2, [r3], #1
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    8b66:	e7f7      	b.n	8b58 <tx_cb_USART_GRID+0x10>

00008b68 <tx_cb_USART_GRID_W>:
	tx_cb_USART_GRID(&GRID_PORT_W);
    8b68:	4801      	ldr	r0, [pc, #4]	; (8b70 <tx_cb_USART_GRID_W+0x8>)
    8b6a:	4b02      	ldr	r3, [pc, #8]	; (8b74 <tx_cb_USART_GRID_W+0xc>)
    8b6c:	4718      	bx	r3
    8b6e:	bf00      	nop
    8b70:	20008260 	.word	0x20008260
    8b74:	00008b49 	.word	0x00008b49

00008b78 <tx_cb_USART_GRID_S>:
	tx_cb_USART_GRID(&GRID_PORT_S);
    8b78:	4801      	ldr	r0, [pc, #4]	; (8b80 <tx_cb_USART_GRID_S+0x8>)
    8b7a:	4b02      	ldr	r3, [pc, #8]	; (8b84 <tx_cb_USART_GRID_S+0xc>)
    8b7c:	4718      	bx	r3
    8b7e:	bf00      	nop
    8b80:	2000b660 	.word	0x2000b660
    8b84:	00008b49 	.word	0x00008b49

00008b88 <tx_cb_USART_GRID_E>:
	tx_cb_USART_GRID(&GRID_PORT_E);
    8b88:	4801      	ldr	r0, [pc, #4]	; (8b90 <tx_cb_USART_GRID_E+0x8>)
    8b8a:	4b02      	ldr	r3, [pc, #8]	; (8b94 <tx_cb_USART_GRID_E+0xc>)
    8b8c:	4718      	bx	r3
    8b8e:	bf00      	nop
    8b90:	200115fc 	.word	0x200115fc
    8b94:	00008b49 	.word	0x00008b49

00008b98 <tx_cb_USART_GRID_N>:
	tx_cb_USART_GRID(&GRID_PORT_N);
    8b98:	4801      	ldr	r0, [pc, #4]	; (8ba0 <tx_cb_USART_GRID_N+0x8>)
    8b9a:	4b02      	ldr	r3, [pc, #8]	; (8ba4 <tx_cb_USART_GRID_N+0xc>)
    8b9c:	4718      	bx	r3
    8b9e:	bf00      	nop
    8ba0:	200010dc 	.word	0x200010dc
    8ba4:	00008b49 	.word	0x00008b49

00008ba8 <err_cb_USART_GRID>:
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
	por->usart_error_flag = 1;	
    8ba8:	2301      	movs	r3, #1
    8baa:	7603      	strb	r3, [r0, #24]
	
	usart_async_disable(por->usart);
    8bac:	6840      	ldr	r0, [r0, #4]
    8bae:	4b01      	ldr	r3, [pc, #4]	; (8bb4 <err_cb_USART_GRID+0xc>)
    8bb0:	4718      	bx	r3
    8bb2:	bf00      	nop
    8bb4:	0000fa65 	.word	0x0000fa65

00008bb8 <err_cb_USART_GRID_W>:
	err_cb_USART_GRID(&GRID_PORT_W);
    8bb8:	4801      	ldr	r0, [pc, #4]	; (8bc0 <err_cb_USART_GRID_W+0x8>)
    8bba:	4b02      	ldr	r3, [pc, #8]	; (8bc4 <err_cb_USART_GRID_W+0xc>)
    8bbc:	4718      	bx	r3
    8bbe:	bf00      	nop
    8bc0:	20008260 	.word	0x20008260
    8bc4:	00008ba9 	.word	0x00008ba9

00008bc8 <err_cb_USART_GRID_S>:
	err_cb_USART_GRID(&GRID_PORT_S);
    8bc8:	4801      	ldr	r0, [pc, #4]	; (8bd0 <err_cb_USART_GRID_S+0x8>)
    8bca:	4b02      	ldr	r3, [pc, #8]	; (8bd4 <err_cb_USART_GRID_S+0xc>)
    8bcc:	4718      	bx	r3
    8bce:	bf00      	nop
    8bd0:	2000b660 	.word	0x2000b660
    8bd4:	00008ba9 	.word	0x00008ba9

00008bd8 <err_cb_USART_GRID_E>:
	err_cb_USART_GRID(&GRID_PORT_E);
    8bd8:	4801      	ldr	r0, [pc, #4]	; (8be0 <err_cb_USART_GRID_E+0x8>)
    8bda:	4b02      	ldr	r3, [pc, #8]	; (8be4 <err_cb_USART_GRID_E+0xc>)
    8bdc:	4718      	bx	r3
    8bde:	bf00      	nop
    8be0:	200115fc 	.word	0x200115fc
    8be4:	00008ba9 	.word	0x00008ba9

00008be8 <err_cb_USART_GRID_N>:
	err_cb_USART_GRID(&GRID_PORT_N);
    8be8:	4801      	ldr	r0, [pc, #4]	; (8bf0 <err_cb_USART_GRID_N+0x8>)
    8bea:	4b02      	ldr	r3, [pc, #8]	; (8bf4 <err_cb_USART_GRID_N+0xc>)
    8bec:	4718      	bx	r3
    8bee:	bf00      	nop
    8bf0:	200010dc 	.word	0x200010dc
    8bf4:	00008ba9 	.word	0x00008ba9

00008bf8 <grid_sys_port_reset_dma>:
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
    8bf8:	7a80      	ldrb	r0, [r0, #10]
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    8bfa:	0103      	lsls	r3, r0, #4
    8bfc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    8c00:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	_dma_enable_transaction(por->dma_channel, false);
    8c04:	2100      	movs	r1, #0
    8c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8c08:	f022 0202 	bic.w	r2, r2, #2
    8c0c:	641a      	str	r2, [r3, #64]	; 0x40
    8c0e:	4b01      	ldr	r3, [pc, #4]	; (8c14 <grid_sys_port_reset_dma+0x1c>)
    8c10:	4718      	bx	r3
    8c12:	bf00      	nop
    8c14:	0000cd55 	.word	0x0000cd55

00008c18 <dma_transfer_complete_n_cb>:
	grid_sys_port_reset_dma(por);
    8c18:	4801      	ldr	r0, [pc, #4]	; (8c20 <dma_transfer_complete_n_cb+0x8>)
    8c1a:	4b02      	ldr	r3, [pc, #8]	; (8c24 <dma_transfer_complete_n_cb+0xc>)
    8c1c:	4718      	bx	r3
    8c1e:	bf00      	nop
    8c20:	200010dc 	.word	0x200010dc
    8c24:	00008bf9 	.word	0x00008bf9

00008c28 <dma_transfer_complete_e_cb>:
    8c28:	4801      	ldr	r0, [pc, #4]	; (8c30 <dma_transfer_complete_e_cb+0x8>)
    8c2a:	4b02      	ldr	r3, [pc, #8]	; (8c34 <dma_transfer_complete_e_cb+0xc>)
    8c2c:	4718      	bx	r3
    8c2e:	bf00      	nop
    8c30:	200115fc 	.word	0x200115fc
    8c34:	00008bf9 	.word	0x00008bf9

00008c38 <dma_transfer_complete_s_cb>:
    8c38:	4801      	ldr	r0, [pc, #4]	; (8c40 <dma_transfer_complete_s_cb+0x8>)
    8c3a:	4b02      	ldr	r3, [pc, #8]	; (8c44 <dma_transfer_complete_s_cb+0xc>)
    8c3c:	4718      	bx	r3
    8c3e:	bf00      	nop
    8c40:	2000b660 	.word	0x2000b660
    8c44:	00008bf9 	.word	0x00008bf9

00008c48 <dma_transfer_complete_w_cb>:
    8c48:	4801      	ldr	r0, [pc, #4]	; (8c50 <dma_transfer_complete_w_cb+0x8>)
    8c4a:	4b02      	ldr	r3, [pc, #8]	; (8c54 <dma_transfer_complete_w_cb+0xc>)
    8c4c:	4718      	bx	r3
    8c4e:	bf00      	nop
    8c50:	20008260 	.word	0x20008260
    8c54:	00008bf9 	.word	0x00008bf9

00008c58 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    8c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    8c5c:	211c      	movs	r1, #28
    8c5e:	4c2c      	ldr	r4, [pc, #176]	; (8d10 <grid_sys_uart_init+0xb8>)
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    8c60:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8d5c <grid_sys_uart_init+0x104>
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    8c64:	4f2b      	ldr	r7, [pc, #172]	; (8d14 <grid_sys_uart_init+0xbc>)
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    8c66:	4e2c      	ldr	r6, [pc, #176]	; (8d18 <grid_sys_uart_init+0xc0>)
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    8c68:	4d2c      	ldr	r5, [pc, #176]	; (8d1c <grid_sys_uart_init+0xc4>)
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    8c6a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8d60 <grid_sys_uart_init+0x108>
    8c6e:	2002      	movs	r0, #2
    8c70:	47a0      	blx	r4
    8c72:	2110      	movs	r1, #16
    8c74:	2002      	movs	r0, #2
    8c76:	47a0      	blx	r4
    8c78:	210c      	movs	r1, #12
    8c7a:	2002      	movs	r0, #2
    8c7c:	47a0      	blx	r4
    8c7e:	2109      	movs	r1, #9
    8c80:	2001      	movs	r0, #1
    8c82:	47a0      	blx	r4
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    8c84:	4c26      	ldr	r4, [pc, #152]	; (8d20 <grid_sys_uart_init+0xc8>)
    8c86:	4a27      	ldr	r2, [pc, #156]	; (8d24 <grid_sys_uart_init+0xcc>)
    8c88:	2101      	movs	r1, #1
    8c8a:	4640      	mov	r0, r8
    8c8c:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    8c8e:	4a26      	ldr	r2, [pc, #152]	; (8d28 <grid_sys_uart_init+0xd0>)
    8c90:	2101      	movs	r1, #1
    8c92:	4638      	mov	r0, r7
    8c94:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    8c96:	4a25      	ldr	r2, [pc, #148]	; (8d2c <grid_sys_uart_init+0xd4>)
    8c98:	2101      	movs	r1, #1
    8c9a:	4630      	mov	r0, r6
    8c9c:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    8c9e:	4a24      	ldr	r2, [pc, #144]	; (8d30 <grid_sys_uart_init+0xd8>)
    8ca0:	2101      	movs	r1, #1
    8ca2:	4628      	mov	r0, r5
    8ca4:	47a0      	blx	r4
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    8ca6:	2101      	movs	r1, #1
    8ca8:	4640      	mov	r0, r8
    8caa:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    8cac:	2101      	movs	r1, #1
    8cae:	4638      	mov	r0, r7
    8cb0:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    8cb2:	2101      	movs	r1, #1
    8cb4:	4630      	mov	r0, r6
    8cb6:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    8cb8:	2101      	movs	r1, #1
    8cba:	4628      	mov	r0, r5
    8cbc:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    8cbe:	4a1d      	ldr	r2, [pc, #116]	; (8d34 <grid_sys_uart_init+0xdc>)
    8cc0:	2102      	movs	r1, #2
    8cc2:	4640      	mov	r0, r8
    8cc4:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    8cc6:	4a1c      	ldr	r2, [pc, #112]	; (8d38 <grid_sys_uart_init+0xe0>)
    8cc8:	2102      	movs	r1, #2
    8cca:	4638      	mov	r0, r7
    8ccc:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    8cce:	4a1b      	ldr	r2, [pc, #108]	; (8d3c <grid_sys_uart_init+0xe4>)
    8cd0:	2102      	movs	r1, #2
    8cd2:	4630      	mov	r0, r6
    8cd4:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    8cd6:	4a1a      	ldr	r2, [pc, #104]	; (8d40 <grid_sys_uart_init+0xe8>)
    8cd8:	2102      	movs	r1, #2
    8cda:	4628      	mov	r0, r5
    8cdc:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    8cde:	4c19      	ldr	r4, [pc, #100]	; (8d44 <grid_sys_uart_init+0xec>)
    8ce0:	4919      	ldr	r1, [pc, #100]	; (8d48 <grid_sys_uart_init+0xf0>)
    8ce2:	4640      	mov	r0, r8
    8ce4:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    8ce6:	4919      	ldr	r1, [pc, #100]	; (8d4c <grid_sys_uart_init+0xf4>)
    8ce8:	4638      	mov	r0, r7
    8cea:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    8cec:	4918      	ldr	r1, [pc, #96]	; (8d50 <grid_sys_uart_init+0xf8>)
    8cee:	4630      	mov	r0, r6
    8cf0:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    8cf2:	4918      	ldr	r1, [pc, #96]	; (8d54 <grid_sys_uart_init+0xfc>)
    8cf4:	4628      	mov	r0, r5
    8cf6:	47a0      	blx	r4
	
	
	usart_async_enable(&USART_NORTH);
    8cf8:	4c17      	ldr	r4, [pc, #92]	; (8d58 <grid_sys_uart_init+0x100>)
    8cfa:	4640      	mov	r0, r8
    8cfc:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    8cfe:	4638      	mov	r0, r7
    8d00:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    8d02:	4630      	mov	r0, r6
    8d04:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    8d06:	4628      	mov	r0, r5
    8d08:	4623      	mov	r3, r4




}
    8d0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	usart_async_enable(&USART_WEST);
    8d0e:	4718      	bx	r3
    8d10:	00008521 	.word	0x00008521
    8d14:	20014b40 	.word	0x20014b40
    8d18:	20014c98 	.word	0x20014c98
    8d1c:	20014c48 	.word	0x20014c48
    8d20:	0000fab5 	.word	0x0000fab5
    8d24:	00008b99 	.word	0x00008b99
    8d28:	00008b89 	.word	0x00008b89
    8d2c:	00008b79 	.word	0x00008b79
    8d30:	00008b69 	.word	0x00008b69
    8d34:	00008be9 	.word	0x00008be9
    8d38:	00008bd9 	.word	0x00008bd9
    8d3c:	00008bc9 	.word	0x00008bc9
    8d40:	00008bb9 	.word	0x00008bb9
    8d44:	0000fa91 	.word	0x0000fa91
    8d48:	20006f90 	.word	0x20006f90
    8d4c:	2000b65c 	.word	0x2000b65c
    8d50:	2000e5ac 	.word	0x2000e5ac
    8d54:	200145dc 	.word	0x200145dc
    8d58:	0000fa39 	.word	0x0000fa39
    8d5c:	20014b94 	.word	0x20014b94
    8d60:	0000fb15 	.word	0x0000fb15

00008d64 <grid_sys_dma_rx_init_one>:



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    8d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
	
	uint8_t dma_rx_channel = por->dma_channel;
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    8d66:	6843      	ldr	r3, [r0, #4]
	uint8_t dma_rx_channel = por->dma_channel;
    8d68:	7a84      	ldrb	r4, [r0, #10]
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    8d6a:	460f      	mov	r7, r1
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    8d6c:	6a19      	ldr	r1, [r3, #32]
    8d6e:	4b10      	ldr	r3, [pc, #64]	; (8db0 <grid_sys_dma_rx_init_one+0x4c>)
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    8d70:	4605      	mov	r5, r0
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    8d72:	3128      	adds	r1, #40	; 0x28
    8d74:	4620      	mov	r0, r4
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    8d76:	4616      	mov	r6, r2
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    8d78:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    8d7a:	f505 519d 	add.w	r1, r5, #5024	; 0x13a0
    8d7e:	4b0d      	ldr	r3, [pc, #52]	; (8db4 <grid_sys_dma_rx_init_one+0x50>)
    8d80:	3114      	adds	r1, #20
    8d82:	4620      	mov	r0, r4
    8d84:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    8d86:	4639      	mov	r1, r7
    8d88:	4b0b      	ldr	r3, [pc, #44]	; (8db8 <grid_sys_dma_rx_init_one+0x54>)
    8d8a:	4620      	mov	r0, r4
    8d8c:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    8d8e:	4621      	mov	r1, r4
    8d90:	4b0a      	ldr	r3, [pc, #40]	; (8dbc <grid_sys_dma_rx_init_one+0x58>)
    8d92:	a801      	add	r0, sp, #4
    8d94:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    8d96:	9b01      	ldr	r3, [sp, #4]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    8d98:	2201      	movs	r2, #1
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    8d9a:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    8d9c:	4620      	mov	r0, r4
    8d9e:	4b08      	ldr	r3, [pc, #32]	; (8dc0 <grid_sys_dma_rx_init_one+0x5c>)
    8da0:	2100      	movs	r1, #0
    8da2:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    8da4:	4b07      	ldr	r3, [pc, #28]	; (8dc4 <grid_sys_dma_rx_init_one+0x60>)
    8da6:	2100      	movs	r1, #0
    8da8:	4620      	mov	r0, r4
    8daa:	4798      	blx	r3
	

}
    8dac:	b003      	add	sp, #12
    8dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8db0:	0000cce5 	.word	0x0000cce5
    8db4:	0000ccd5 	.word	0x0000ccd5
    8db8:	0000cd11 	.word	0x0000cd11
    8dbc:	0000cd91 	.word	0x0000cd91
    8dc0:	0000ccad 	.word	0x0000ccad
    8dc4:	0000cd55 	.word	0x0000cd55

00008dc8 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    8dc8:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    8dca:	4a10      	ldr	r2, [pc, #64]	; (8e0c <grid_sys_dma_rx_init+0x44>)
    8dcc:	4c10      	ldr	r4, [pc, #64]	; (8e10 <grid_sys_dma_rx_init+0x48>)
    8dce:	4811      	ldr	r0, [pc, #68]	; (8e14 <grid_sys_dma_rx_init+0x4c>)
    8dd0:	f241 3188 	movw	r1, #5000	; 0x1388
    8dd4:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    8dd6:	4a10      	ldr	r2, [pc, #64]	; (8e18 <grid_sys_dma_rx_init+0x50>)
    8dd8:	4810      	ldr	r0, [pc, #64]	; (8e1c <grid_sys_dma_rx_init+0x54>)
    8dda:	f241 3188 	movw	r1, #5000	; 0x1388
    8dde:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    8de0:	4a0f      	ldr	r2, [pc, #60]	; (8e20 <grid_sys_dma_rx_init+0x58>)
    8de2:	4810      	ldr	r0, [pc, #64]	; (8e24 <grid_sys_dma_rx_init+0x5c>)
    8de4:	f241 3188 	movw	r1, #5000	; 0x1388
    8de8:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    8dea:	4a0f      	ldr	r2, [pc, #60]	; (8e28 <grid_sys_dma_rx_init+0x60>)
    8dec:	480f      	ldr	r0, [pc, #60]	; (8e2c <grid_sys_dma_rx_init+0x64>)
    8dee:	f241 3188 	movw	r1, #5000	; 0x1388
    8df2:	47a0      	blx	r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8df4:	4b0e      	ldr	r3, [pc, #56]	; (8e30 <grid_sys_dma_rx_init+0x68>)
    8df6:	2200      	movs	r2, #0
    8df8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    8dfc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    8e00:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    8e04:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
	NVIC_SetPriority(DMAC_0_IRQn, 0);
	NVIC_SetPriority(DMAC_1_IRQn, 0);
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}
    8e08:	bd10      	pop	{r4, pc}
    8e0a:	bf00      	nop
    8e0c:	00008c19 	.word	0x00008c19
    8e10:	00008d65 	.word	0x00008d65
    8e14:	200010dc 	.word	0x200010dc
    8e18:	00008c29 	.word	0x00008c29
    8e1c:	200115fc 	.word	0x200115fc
    8e20:	00008c39 	.word	0x00008c39
    8e24:	2000b660 	.word	0x2000b660
    8e28:	00008c49 	.word	0x00008c49
    8e2c:	20008260 	.word	0x20008260
    8e30:	e000e100 	.word	0xe000e100

00008e34 <grid_sys_init>:
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    8e34:	4b16      	ldr	r3, [pc, #88]	; (8e90 <grid_sys_init+0x5c>)

void grid_sys_init(struct grid_sys_model* mod){
    8e36:	b570      	push	{r4, r5, r6, lr}
    8e38:	781b      	ldrb	r3, [r3, #0]
	
	mod->uptime = 0;
	mod->reset_cause = hri_rstc_read_RCAUSE_reg(RSTC);
    8e3a:	7103      	strb	r3, [r0, #4]
	mod->uptime = 0;
    8e3c:	2500      	movs	r5, #0
void grid_sys_init(struct grid_sys_model* mod){
    8e3e:	4604      	mov	r4, r0
	mod->uptime = 0;
    8e40:	6005      	str	r5, [r0, #0]
	
    
	mod->sessionid = rand_sync_read8(&RAND_0);
    8e42:	4b14      	ldr	r3, [pc, #80]	; (8e94 <grid_sys_init+0x60>)
    8e44:	4814      	ldr	r0, [pc, #80]	; (8e98 <grid_sys_init+0x64>)
    8e46:	4798      	blx	r3
	mod->bank_color_r[3] = 100;
	mod->bank_color_g[3] = 0;
	mod->bank_color_b[3] = 200;
	
	mod->bank_enabled[0] = 1;
	mod->bank_enabled[1] = 1;
    8e48:	4a14      	ldr	r2, [pc, #80]	; (8e9c <grid_sys_init+0x68>)
    8e4a:	4b15      	ldr	r3, [pc, #84]	; (8ea0 <grid_sys_init+0x6c>)
	mod->bank_color_g[1] = 100;
    8e4c:	4915      	ldr	r1, [pc, #84]	; (8ea4 <grid_sys_init+0x70>)
	mod->sessionid = rand_sync_read8(&RAND_0);
    8e4e:	7160      	strb	r0, [r4, #5]
	mod->bank_enabled[1] = 1;
    8e50:	e9c4 2304 	strd	r2, r3, [r4, #16]
	mod->bank_color_g[1] = 100;
    8e54:	4b14      	ldr	r3, [pc, #80]	; (8ea8 <grid_sys_init+0x74>)
	mod->bank_setting_changed_flag = 0;
	
	mod->bank_init_flag = 0;


	mod->bank_activebank_number = 0;
    8e56:	73e5      	strb	r5, [r4, #15]
	mod->bank_color_g[1] = 100;
    8e58:	e9c4 1306 	strd	r1, r3, [r4, #24]
	mod->bank_color_b[1] = 0;
    8e5c:	f44f 5348 	mov.w	r3, #12800	; 0x3200
    8e60:	8423      	strh	r3, [r4, #32]
	mod->bank_color_b[3] = 200;
    8e62:	23c8      	movs	r3, #200	; 0xc8
    8e64:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	if (banknumber == 255){
			
		//mod->bank_activebank_number = 0;
		mod->bank_activebank_valid = 0;
		
		mod->bank_active_changed = 1;
    8e68:	4b10      	ldr	r3, [pc, #64]	; (8eac <grid_sys_init+0x78>)
	mod->bank_activebank_color_r = 0;
    8e6a:	6265      	str	r5, [r4, #36]	; 0x24
		mod->bank_active_changed = 1;
    8e6c:	2201      	movs	r2, #1
    8e6e:	745a      	strb	r2, [r3, #17]
				
		mod->bank_activebank_color_r = 127;
    8e70:	f647 727f 	movw	r2, #32639	; 0x7f7f
		mod->bank_activebank_valid = 0;
    8e74:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
		mod->bank_activebank_color_r = 127;
    8e78:	849a      	strh	r2, [r3, #36]	; 0x24
		mod->bank_activebank_color_g = 127;
		mod->bank_activebank_color_b = 127;
    8e7a:	227f      	movs	r2, #127	; 0x7f
    8e7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	grid_port_init_all();
    8e80:	4b0b      	ldr	r3, [pc, #44]	; (8eb0 <grid_sys_init+0x7c>)
    8e82:	4798      	blx	r3
	grid_sys_uart_init();
    8e84:	4b0b      	ldr	r3, [pc, #44]	; (8eb4 <grid_sys_init+0x80>)
    8e86:	4798      	blx	r3
}
    8e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	grid_sys_dma_rx_init();
    8e8c:	4b0a      	ldr	r3, [pc, #40]	; (8eb8 <grid_sys_init+0x84>)
    8e8e:	4718      	bx	r3
    8e90:	40000c00 	.word	0x40000c00
    8e94:	0000d2c5 	.word	0x0000d2c5
    8e98:	20014b0c 	.word	0x20014b0c
    8e9c:	01000001 	.word	0x01000001
    8ea0:	00010101 	.word	0x00010101
    8ea4:	646432c8 	.word	0x646432c8
    8ea8:	c800c864 	.word	0xc800c864
    8eac:	20006f94 	.word	0x20006f94
    8eb0:	00005165 	.word	0x00005165
    8eb4:	00008c59 	.word	0x00008c59
    8eb8:	00008dc9 	.word	0x00008dc9

00008ebc <grid_sys_bank_enable>:
	if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    8ebc:	2903      	cmp	r1, #3
		mod->bank_enabled[banknumber] = 1;
    8ebe:	bf9e      	ittt	ls
    8ec0:	1809      	addls	r1, r1, r0
    8ec2:	2301      	movls	r3, #1
    8ec4:	74cb      	strbls	r3, [r1, #19]
}
    8ec6:	4770      	bx	lr

00008ec8 <grid_sys_bank_disable>:
	if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    8ec8:	2903      	cmp	r1, #3
		mod->bank_enabled[banknumber] = 0;
    8eca:	bf9e      	ittt	ls
    8ecc:	1809      	addls	r1, r1, r0
    8ece:	2300      	movls	r3, #0
    8ed0:	74cb      	strbls	r3, [r1, #19]
}
    8ed2:	4770      	bx	lr

00008ed4 <grid_sys_bank_set_color>:
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    8ed4:	2904      	cmp	r1, #4
    8ed6:	d901      	bls.n	8edc <grid_sys_bank_set_color+0x8>
		return false;
    8ed8:	2000      	movs	r0, #0
    8eda:	4770      	bx	lr
	mod->bank_color_r[banknumber] = ((rgb&0x00FF0000)>>16);
    8edc:	4401      	add	r1, r0
    8ede:	0c13      	lsrs	r3, r2, #16
    8ee0:	75cb      	strb	r3, [r1, #23]
	mod->bank_color_g[banknumber] = ((rgb&0x0000FF00)>>8);
    8ee2:	0a13      	lsrs	r3, r2, #8
    8ee4:	76cb      	strb	r3, [r1, #27]
	mod->bank_color_b[banknumber] = ((rgb&0x000000FF)>>0);
    8ee6:	77ca      	strb	r2, [r1, #31]
}
    8ee8:	4770      	bx	lr

00008eea <grid_sys_get_bank_num>:
}
    8eea:	7bc0      	ldrb	r0, [r0, #15]
    8eec:	4770      	bx	lr

00008eee <grid_sys_get_bank_valid>:
}
    8eee:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    8ef2:	4770      	bx	lr

00008ef4 <grid_sys_get_bank_red>:
}
    8ef4:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    8ef8:	4770      	bx	lr

00008efa <grid_sys_get_bank_gre>:
}
    8efa:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    8efe:	4770      	bx	lr

00008f00 <grid_sys_get_bank_blu>:
}
    8f00:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    8f04:	4770      	bx	lr

00008f06 <grid_sys_get_bank_next>:
uint8_t grid_sys_get_bank_next(struct grid_sys_model* mod){
    8f06:	b530      	push	{r4, r5, lr}
    8f08:	4602      	mov	r2, r0
	return mod->bank_activebank_number;
    8f0a:	7bc0      	ldrb	r0, [r0, #15]
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8f0c:	1c43      	adds	r3, r0, #1
    8f0e:	1d44      	adds	r4, r0, #5
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    8f10:	f003 0103 	and.w	r1, r3, #3
		if (mod->bank_enabled[bank_check] == 1){
    8f14:	1855      	adds	r5, r2, r1
    8f16:	7ced      	ldrb	r5, [r5, #19]
    8f18:	2d01      	cmp	r5, #1
    8f1a:	d003      	beq.n	8f24 <grid_sys_get_bank_next+0x1e>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8f1c:	3301      	adds	r3, #1
    8f1e:	42a3      	cmp	r3, r4
    8f20:	d1f6      	bne.n	8f10 <grid_sys_get_bank_next+0xa>
}
    8f22:	bd30      	pop	{r4, r5, pc}
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    8f24:	b2c8      	uxtb	r0, r1
    8f26:	e7fc      	b.n	8f22 <grid_sys_get_bank_next+0x1c>

00008f28 <grid_sys_get_bank_number_of_first_valid>:
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8f28:	f100 0213 	add.w	r2, r0, #19
uint8_t grid_sys_get_bank_number_of_first_valid(struct grid_sys_model* mod){
    8f2c:	2300      	movs	r3, #0
		if (mod->bank_enabled[i] == 1){
    8f2e:	f812 1b01 	ldrb.w	r1, [r2], #1
    8f32:	2901      	cmp	r1, #1
    8f34:	b2d8      	uxtb	r0, r3
    8f36:	d003      	beq.n	8f40 <grid_sys_get_bank_number_of_first_valid+0x18>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8f38:	3301      	adds	r3, #1
    8f3a:	2b04      	cmp	r3, #4
    8f3c:	d1f7      	bne.n	8f2e <grid_sys_get_bank_number_of_first_valid+0x6>
	return 255;
    8f3e:	20ff      	movs	r0, #255	; 0xff
}
    8f40:	4770      	bx	lr

00008f42 <grid_sys_set_bank>:
	if (banknumber == 255){
    8f42:	29ff      	cmp	r1, #255	; 0xff
    8f44:	d10b      	bne.n	8f5e <grid_sys_set_bank+0x1c>
		mod->bank_active_changed = 1;
    8f46:	2301      	movs	r3, #1
    8f48:	7443      	strb	r3, [r0, #17]
		mod->bank_activebank_valid = 0;
    8f4a:	2300      	movs	r3, #0
    8f4c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		mod->bank_activebank_color_r = 127;
    8f50:	f647 737f 	movw	r3, #32639	; 0x7f7f
    8f54:	8483      	strh	r3, [r0, #36]	; 0x24
		mod->bank_activebank_color_b = 127;
    8f56:	237f      	movs	r3, #127	; 0x7f
			
			mod->bank_active_changed = 1;
			
			mod->bank_activebank_color_r = mod->bank_color_r[mod->bank_activebank_number];
			mod->bank_activebank_color_g = mod->bank_color_g[mod->bank_activebank_number];
			mod->bank_activebank_color_b = mod->bank_color_b[mod->bank_activebank_number];	
    8f58:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
		//grid_debug_print_text("Invalid Bank Number");	
				
	}

	
}
    8f5c:	4770      	bx	lr
	else if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    8f5e:	2903      	cmp	r1, #3
    8f60:	d8fc      	bhi.n	8f5c <grid_sys_set_bank+0x1a>
		mod->bank_init_flag = 1;
    8f62:	2301      	movs	r3, #1
    8f64:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
		if (mod->bank_enabled[banknumber] == 1){
    8f68:	1843      	adds	r3, r0, r1
    8f6a:	7cda      	ldrb	r2, [r3, #19]
    8f6c:	2a01      	cmp	r2, #1
    8f6e:	d1f5      	bne.n	8f5c <grid_sys_set_bank+0x1a>
			mod->bank_activebank_number = banknumber;
    8f70:	73c1      	strb	r1, [r0, #15]
			mod->bank_activebank_valid = 1;
    8f72:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
			mod->bank_active_changed = 1;
    8f76:	7442      	strb	r2, [r0, #17]
			mod->bank_activebank_color_r = mod->bank_color_r[mod->bank_activebank_number];
    8f78:	7dda      	ldrb	r2, [r3, #23]
    8f7a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
			mod->bank_activebank_color_g = mod->bank_color_g[mod->bank_activebank_number];
    8f7e:	7eda      	ldrb	r2, [r3, #27]
    8f80:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
			mod->bank_activebank_color_b = mod->bank_color_b[mod->bank_activebank_number];	
    8f84:	7fdb      	ldrb	r3, [r3, #31]
    8f86:	e7e7      	b.n	8f58 <grid_sys_set_bank+0x16>

00008f88 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    8f88:	6a80      	ldr	r0, [r0, #40]	; 0x28
    8f8a:	4770      	bx	lr

00008f8c <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    8f8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	
	

}
    8f8e:	1a40      	subs	r0, r0, r1
    8f90:	4770      	bx	lr

00008f92 <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	
	mod->realtime++;
    8f92:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8f94:	3301      	adds	r3, #1
    8f96:	6283      	str	r3, [r0, #40]	; 0x28
	if (mod->uptime != -1){
    8f98:	6803      	ldr	r3, [r0, #0]
    8f9a:	1c5a      	adds	r2, r3, #1
		mod->uptime++;
    8f9c:	bf1c      	itt	ne
    8f9e:	3301      	addne	r3, #1
    8fa0:	6003      	strne	r3, [r0, #0]
	}
	
}
    8fa2:	4770      	bx	lr

00008fa4 <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    8fa4:	7b80      	ldrb	r0, [r0, #14]
    8fa6:	4770      	bx	lr

00008fa8 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    8fa8:	2300      	movs	r3, #0
    8faa:	7383      	strb	r3, [r0, #14]
	
}
    8fac:	4770      	bx	lr

00008fae <grid_sys_alert_get_color_intensity>:

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    8fae:	7b03      	ldrb	r3, [r0, #12]
    8fb0:	b963      	cbnz	r3, 8fcc <grid_sys_alert_get_color_intensity+0x1e>
		
		return (250-abs(mod->alert_state/2-250))/2;
    8fb2:	8940      	ldrh	r0, [r0, #10]
    8fb4:	0840      	lsrs	r0, r0, #1
    8fb6:	38fa      	subs	r0, #250	; 0xfa
    8fb8:	2800      	cmp	r0, #0
    8fba:	bfb8      	it	lt
    8fbc:	4240      	neglt	r0, r0
    8fbe:	f1c0 00fa 	rsb	r0, r0, #250	; 0xfa
    8fc2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    8fc6:	f3c0 0047 	ubfx	r0, r0, #1, #8
    8fca:	4770      	bx	lr
	}
	else if (mod->alert_style == 1){ // SQUARE
    8fcc:	2b01      	cmp	r3, #1
    8fce:	d107      	bne.n	8fe0 <grid_sys_alert_get_color_intensity+0x32>
		
		return 255*(mod->alert_state/250%2);
    8fd0:	8940      	ldrh	r0, [r0, #10]
    8fd2:	23fa      	movs	r3, #250	; 0xfa
    8fd4:	fbb0 f0f3 	udiv	r0, r0, r3
    8fd8:	f340 0000 	sbfx	r0, r0, #0, #1
    8fdc:	b2c0      	uxtb	r0, r0
    8fde:	4770      	bx	lr
	}
	else if (mod->alert_style == 2){ // CONST
    8fe0:	2b02      	cmp	r3, #2
    8fe2:	d105      	bne.n	8ff0 <grid_sys_alert_get_color_intensity+0x42>
		
		return 255*(mod->alert_state>100);
    8fe4:	8940      	ldrh	r0, [r0, #10]
    8fe6:	2864      	cmp	r0, #100	; 0x64
    8fe8:	bf8c      	ite	hi
    8fea:	20ff      	movhi	r0, #255	; 0xff
    8fec:	2000      	movls	r0, #0
    8fee:	4770      	bx	lr
	}
	
	
}
    8ff0:	4770      	bx	lr

00008ff2 <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    8ff2:	b510      	push	{r4, lr}
	mod->alert_color_blue = blue;
    8ff4:	7203      	strb	r3, [r0, #8]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    8ff6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8ffa:	8143      	strh	r3, [r0, #10]
	mod->alert_color_changed = 1;
    8ffc:	2401      	movs	r4, #1
	mod->alert_style = style;
    8ffe:	f89d 3008 	ldrb.w	r3, [sp, #8]
	mod->alert_color_changed = 1;
    9002:	7384      	strb	r4, [r0, #14]
	mod->alert_color_red = red;
    9004:	7181      	strb	r1, [r0, #6]
	mod->alert_color_green = green;
    9006:	71c2      	strb	r2, [r0, #7]
	mod->alert_style = style;
    9008:	7303      	strb	r3, [r0, #12]
	
}
    900a:	bd10      	pop	{r4, pc}

0000900c <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    900c:	7980      	ldrb	r0, [r0, #6]
    900e:	4770      	bx	lr

00009010 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    9010:	79c0      	ldrb	r0, [r0, #7]
    9012:	4770      	bx	lr

00009014 <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    9014:	7a00      	ldrb	r0, [r0, #8]
    9016:	4770      	bx	lr

00009018 <grid_sys_read_hex_char_value>:

uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    9018:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    901c:	b2db      	uxtb	r3, r3
    901e:	2b09      	cmp	r3, #9
    9020:	d905      	bls.n	902e <grid_sys_read_hex_char_value+0x16>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    9022:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    9026:	2b05      	cmp	r3, #5
    9028:	d803      	bhi.n	9032 <grid_sys_read_hex_char_value+0x1a>
		result = ascii - 97 + 10;
    902a:	3857      	subs	r0, #87	; 0x57
    902c:	b2c3      	uxtb	r3, r0
			*error_flag = ascii;
		}
	}
	
	return result;	
}
    902e:	4618      	mov	r0, r3
    9030:	4770      	bx	lr
		if (error_flag != NULL){
    9032:	b111      	cbz	r1, 903a <grid_sys_read_hex_char_value+0x22>
			*error_flag = ascii;
    9034:	7008      	strb	r0, [r1, #0]
	uint8_t result = 0;
    9036:	2300      	movs	r3, #0
    9038:	e7f9      	b.n	902e <grid_sys_read_hex_char_value+0x16>
    903a:	460b      	mov	r3, r1
    903c:	e7f7      	b.n	902e <grid_sys_read_hex_char_value+0x16>
	...

00009040 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    9040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    9042:	4f08      	ldr	r7, [pc, #32]	; (9064 <grid_sys_read_hex_string_value+0x24>)
    9044:	1e45      	subs	r5, r0, #1
    9046:	008c      	lsls	r4, r1, #2
	uint32_t result  = 0;
    9048:	2600      	movs	r6, #0
	for(uint8_t i=0; i<length; i++){
    904a:	3c04      	subs	r4, #4
    904c:	1d23      	adds	r3, r4, #4
    904e:	d101      	bne.n	9054 <grid_sys_read_hex_string_value+0x14>

		
	}

	return result;
}
    9050:	4630      	mov	r0, r6
    9052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    9054:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    9058:	4611      	mov	r1, r2
    905a:	47b8      	blx	r7
    905c:	40a0      	lsls	r0, r4
    905e:	4406      	add	r6, r0
	for(uint8_t i=0; i<length; i++){
    9060:	e7f3      	b.n	904a <grid_sys_read_hex_string_value+0xa>
    9062:	bf00      	nop
    9064:	00009019 	.word	0x00009019

00009068 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    9068:	b530      	push	{r4, r5, lr}
    906a:	b085      	sub	sp, #20
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    906c:	4b0a      	ldr	r3, [pc, #40]	; (9098 <grid_sys_write_hex_string_value+0x30>)
void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    906e:	460c      	mov	r4, r1
    9070:	4605      	mov	r5, r0
	sprintf(str, "%08x", value);
    9072:	490a      	ldr	r1, [pc, #40]	; (909c <grid_sys_write_hex_string_value+0x34>)
    9074:	a801      	add	r0, sp, #4
    9076:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    9078:	aa01      	add	r2, sp, #4
    907a:	f1c4 0308 	rsb	r3, r4, #8
    907e:	4413      	add	r3, r2
    9080:	2200      	movs	r2, #0
    9082:	b2d1      	uxtb	r1, r2
    9084:	428c      	cmp	r4, r1
    9086:	d801      	bhi.n	908c <grid_sys_write_hex_string_value+0x24>
		start_location[i] = str[8-size+i];	
	}

}
    9088:	b005      	add	sp, #20
    908a:	bd30      	pop	{r4, r5, pc}
		start_location[i] = str[8-size+i];	
    908c:	f813 1b01 	ldrb.w	r1, [r3], #1
    9090:	54a9      	strb	r1, [r5, r2]
	for(uint8_t i=0; i<size; i++){	
    9092:	3201      	adds	r2, #1
    9094:	e7f5      	b.n	9082 <grid_sys_write_hex_string_value+0x1a>
    9096:	bf00      	nop
    9098:	00012b75 	.word	0x00012b75
    909c:	000149a8 	.word	0x000149a8

000090a0 <grid_sys_get_id>:



uint32_t grid_sys_get_id(uint32_t* return_array){
			
	return_array[0] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_0);
    90a0:	4b06      	ldr	r3, [pc, #24]	; (90bc <grid_sys_get_id+0x1c>)
    90a2:	681b      	ldr	r3, [r3, #0]
    90a4:	6003      	str	r3, [r0, #0]
	return_array[1] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_1);
    90a6:	4b06      	ldr	r3, [pc, #24]	; (90c0 <grid_sys_get_id+0x20>)
    90a8:	681b      	ldr	r3, [r3, #0]
    90aa:	6043      	str	r3, [r0, #4]
	return_array[2] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_2);
    90ac:	4b05      	ldr	r3, [pc, #20]	; (90c4 <grid_sys_get_id+0x24>)
    90ae:	681b      	ldr	r3, [r3, #0]
    90b0:	6083      	str	r3, [r0, #8]
	return_array[3] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_3);
    90b2:	4b05      	ldr	r3, [pc, #20]	; (90c8 <grid_sys_get_id+0x28>)
    90b4:	681b      	ldr	r3, [r3, #0]
    90b6:	60c3      	str	r3, [r0, #12]
	
	return 1;
	
}
    90b8:	2001      	movs	r0, #1
    90ba:	4770      	bx	lr
    90bc:	008061fc 	.word	0x008061fc
    90c0:	00806010 	.word	0x00806010
    90c4:	00806014 	.word	0x00806014
    90c8:	00806018 	.word	0x00806018

000090cc <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
    90cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    90d0:	4e30      	ldr	r6, [pc, #192]	; (9194 <grid_sys_get_hwcfg+0xc8>)
    90d2:	6833      	ldr	r3, [r6, #0]
    90d4:	3301      	adds	r3, #1
    90d6:	d158      	bne.n	918a <grid_sys_get_hwcfg+0xbe>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    90d8:	4c2f      	ldr	r4, [pc, #188]	; (9198 <grid_sys_get_hwcfg+0xcc>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    90da:	4b30      	ldr	r3, [pc, #192]	; (919c <grid_sys_get_hwcfg+0xd0>)
		gpio_set_pin_direction(HWCFG_CLOCK, GPIO_DIRECTION_OUT);
		gpio_set_pin_direction(HWCFG_DATA, GPIO_DIRECTION_IN);
			
		// LOAD DATA
		gpio_set_pin_level(HWCFG_SHIFT, 0);
		delay_ms(1);
    90dc:	4f30      	ldr	r7, [pc, #192]	; (91a0 <grid_sys_get_hwcfg+0xd4>)
	CRITICAL_SECTION_ENTER();
    90de:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 91ac <grid_sys_get_hwcfg+0xe0>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    90e2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    90e6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    90ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    90ee:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    90f2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    90f6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    90fa:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    90fe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    9102:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    9106:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    910a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    910e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    9112:	4b24      	ldr	r3, [pc, #144]	; (91a4 <grid_sys_get_hwcfg+0xd8>)
    9114:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    9118:	f1a3 2380 	sub.w	r3, r3, #2147516416	; 0x80008000
    911c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    9120:	2001      	movs	r0, #1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9122:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    9126:	47b8      	blx	r7
    9128:	f04f 0a00 	mov.w	sl, #0
			
			
			
		uint8_t hwcfg_value = 0;
    912c:	46d3      	mov	fp, sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    912e:	46a8      	mov	r8, r5
			
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
				
			// SHIFT DATA
			gpio_set_pin_level(HWCFG_SHIFT, 1); //This outputs the first value to HWCFG_DATA
			delay_ms(1);
    9130:	2001      	movs	r0, #1
    9132:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
    9136:	47b8      	blx	r7
    9138:	a801      	add	r0, sp, #4
    913a:	47c8      	blx	r9
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    913c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    9140:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9144:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9148:	405d      	eors	r5, r3
    914a:	4015      	ands	r5, r2
    914c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    914e:	a801      	add	r0, sp, #4
    9150:	4b15      	ldr	r3, [pc, #84]	; (91a8 <grid_sys_get_hwcfg+0xdc>)
    9152:	4798      	blx	r3
				
				
			if(gpio_get_pin_level(HWCFG_DATA)){
    9154:	042b      	lsls	r3, r5, #16
					
				hwcfg_value |= (1<<i);
    9156:	bf41      	itttt	mi
    9158:	2301      	movmi	r3, #1
    915a:	fa03 f30a 	lslmi.w	r3, r3, sl
    915e:	ea43 0b0b 	orrmi.w	fp, r3, fp
    9162:	fa5f fb8b 	uxtbmi.w	fp, fp
				}else{
					
					
			}
				
			if(i!=7){
    9166:	f1ba 0f07 	cmp.w	sl, #7
    916a:	d007      	beq.n	917c <grid_sys_get_hwcfg+0xb0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    916c:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    9170:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
					
				// Clock rise
				gpio_set_pin_level(HWCFG_CLOCK, 1);
					
				delay_ms(1);
    9174:	2001      	movs	r0, #1
    9176:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9178:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    917c:	f10a 0a01 	add.w	sl, sl, #1
    9180:	f1ba 0f08 	cmp.w	sl, #8
    9184:	d1d4      	bne.n	9130 <grid_sys_get_hwcfg+0x64>
				gpio_set_pin_level(HWCFG_CLOCK, 0);
			}
							
		}
		
		grid_sys_hwfcg = hwcfg_value;
    9186:	f8c6 b000 	str.w	fp, [r6]
	}

	
	return grid_sys_hwfcg;

}
    918a:	6830      	ldr	r0, [r6, #0]
    918c:	b003      	add	sp, #12
    918e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9192:	bf00      	nop
    9194:	2000034c 	.word	0x2000034c
    9198:	41008000 	.word	0x41008000
    919c:	40002000 	.word	0x40002000
    91a0:	0000c89d 	.word	0x0000c89d
    91a4:	40028000 	.word	0x40028000
    91a8:	00010d9b 	.word	0x00010d9b
    91ac:	00010d8d 	.word	0x00010d8d

000091b0 <grid_msg_calculate_checksum_of_packet_string>:
	grid_sys_ping(&GRID_PORT_S);
	grid_sys_ping(&GRID_PORT_W);
	
}

uint8_t grid_msg_calculate_checksum_of_packet_string(uint8_t* str, uint32_t length){
    91b0:	b510      	push	{r4, lr}
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    91b2:	2300      	movs	r3, #0
uint8_t grid_msg_calculate_checksum_of_packet_string(uint8_t* str, uint32_t length){
    91b4:	4602      	mov	r2, r0
	for (uint32_t i=0; i<length-3; i++){
    91b6:	3903      	subs	r1, #3
	uint8_t checksum = 0;
    91b8:	4618      	mov	r0, r3
	for (uint32_t i=0; i<length-3; i++){
    91ba:	4299      	cmp	r1, r3
    91bc:	d800      	bhi.n	91c0 <grid_msg_calculate_checksum_of_packet_string+0x10>
		checksum ^= str[i];
	}
	
	return checksum;
	
}
    91be:	bd10      	pop	{r4, pc}
		checksum ^= str[i];
    91c0:	5cd4      	ldrb	r4, [r2, r3]
	for (uint32_t i=0; i<length-3; i++){
    91c2:	3301      	adds	r3, #1
		checksum ^= str[i];
    91c4:	4060      	eors	r0, r4
	for (uint32_t i=0; i<length-3; i++){
    91c6:	e7f8      	b.n	91ba <grid_msg_calculate_checksum_of_packet_string+0xa>

000091c8 <grid_msg_checksum_read>:
	return checksum;
	
}


uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    91c8:	b507      	push	{r0, r1, r2, lr}
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    91ca:	1ecb      	subs	r3, r1, #3
    91cc:	f10d 0207 	add.w	r2, sp, #7
    91d0:	2102      	movs	r1, #2
    91d2:	4418      	add	r0, r3
    91d4:	4b02      	ldr	r3, [pc, #8]	; (91e0 <grid_msg_checksum_read+0x18>)
    91d6:	4798      	blx	r3
}
    91d8:	b2c0      	uxtb	r0, r0
    91da:	b003      	add	sp, #12
    91dc:	f85d fb04 	ldr.w	pc, [sp], #4
    91e0:	00009041 	.word	0x00009041

000091e4 <grid_msg_checksum_write>:
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    91e4:	1ecb      	subs	r3, r1, #3
    91e6:	4418      	add	r0, r3
    91e8:	2102      	movs	r1, #2
    91ea:	4b01      	ldr	r3, [pc, #4]	; (91f0 <grid_msg_checksum_write+0xc>)
    91ec:	4718      	bx	r3
    91ee:	bf00      	nop
    91f0:	00009069 	.word	0x00009069

000091f4 <grid_msg_get_parameter>:
}


// MESSAGE PARAMETER FUNCTIONS

uint32_t grid_msg_get_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint8_t* error){
    91f4:	b410      	push	{r4}
    91f6:	460c      	mov	r4, r1
		
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
    91f8:	4420      	add	r0, r4
uint32_t grid_msg_get_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint8_t* error){
    91fa:	4611      	mov	r1, r2
}
    91fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
    9200:	461a      	mov	r2, r3
    9202:	4b01      	ldr	r3, [pc, #4]	; (9208 <grid_msg_get_parameter+0x14>)
    9204:	4718      	bx	r3
    9206:	bf00      	nop
    9208:	00009041 	.word	0x00009041

0000920c <grid_msg_set_parameter>:

uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
    920c:	b510      	push	{r4, lr}
    920e:	460c      	mov	r4, r1
	
	grid_sys_write_hex_string_value(&message[offset], length, value);
    9210:	4420      	add	r0, r4
uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
    9212:	4611      	mov	r1, r2
	grid_sys_write_hex_string_value(&message[offset], length, value);
    9214:	461a      	mov	r2, r3
    9216:	4b01      	ldr	r3, [pc, #4]	; (921c <grid_msg_set_parameter+0x10>)
    9218:	4798      	blx	r3
	
}
    921a:	bd10      	pop	{r4, pc}
    921c:	00009069 	.word	0x00009069

00009220 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
    //uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    9220:	f100 032c 	add.w	r3, r0, #44	; 0x2c
    9224:	30ac      	adds	r0, #172	; 0xac
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    9226:	f853 2b04 	ldr.w	r2, [r3], #4
    922a:	428a      	cmp	r2, r1
    922c:	d003      	beq.n	9236 <grid_msg_find_recent+0x16>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    922e:	4283      	cmp	r3, r0
    9230:	d1f9      	bne.n	9226 <grid_msg_find_recent+0x6>
			
		}
		
	}
	
	return 0;
    9232:	2000      	movs	r0, #0
    9234:	4770      	bx	lr
			return 1;
    9236:	2001      	movs	r0, #1
}
    9238:	4770      	bx	lr

0000923a <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    923a:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
    923e:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    9240:	f003 031f 	and.w	r3, r3, #31
    9244:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    9248:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    924c:	62c1      	str	r1, [r0, #44]	; 0x2c
	
}
    924e:	4770      	bx	lr

00009250 <grid_ui_model_init>:
	}
	
}


void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    9250:	b538      	push	{r3, r4, r5, lr}
	
	mod->status = GRID_UI_STATUS_INITIALIZED;
    9252:	2301      	movs	r3, #1
    9254:	7003      	strb	r3, [r0, #0]
void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    9256:	4605      	mov	r5, r0
	
	mod->bank_list_length = bank_list_length;	
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9258:	4b09      	ldr	r3, [pc, #36]	; (9280 <grid_ui_model_init+0x30>)
	mod->bank_list_length = bank_list_length;	
    925a:	7041      	strb	r1, [r0, #1]
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    925c:	0108      	lsls	r0, r1, #4
void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    925e:	460c      	mov	r4, r1
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9260:	4798      	blx	r3
	
	for(uint8_t i=0; i<bank_list_length; i++){
    9262:	2300      	movs	r3, #0
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9264:	6068      	str	r0, [r5, #4]
		
		mod->bank_list[i].status = GRID_UI_STATUS_UNDEFINED;		
    9266:	461a      	mov	r2, r3
	for(uint8_t i=0; i<bank_list_length; i++){
    9268:	b2d9      	uxtb	r1, r3
    926a:	428c      	cmp	r4, r1
    926c:	f100 0010 	add.w	r0, r0, #16
    9270:	d800      	bhi.n	9274 <grid_ui_model_init+0x24>
		mod->bank_list[i].element_list_length = 0;
		
	}
	
}
    9272:	bd38      	pop	{r3, r4, r5, pc}
		mod->bank_list[i].status = GRID_UI_STATUS_UNDEFINED;		
    9274:	f800 2c10 	strb.w	r2, [r0, #-16]
		mod->bank_list[i].element_list_length = 0;
    9278:	f800 2c07 	strb.w	r2, [r0, #-7]
	for(uint8_t i=0; i<bank_list_length; i++){
    927c:	3301      	adds	r3, #1
    927e:	e7f3      	b.n	9268 <grid_ui_model_init+0x18>
    9280:	000123c5 	.word	0x000123c5

00009284 <grid_ui_bank_init>:

void grid_ui_bank_init(struct grid_ui_model* parent, uint8_t index, uint8_t element_list_length){
    9284:	b538      	push	{r3, r4, r5, lr}
	
	struct grid_ui_bank* bank = &parent->bank_list[index];
    9286:	6843      	ldr	r3, [r0, #4]
    9288:	eb03 1501 	add.w	r5, r3, r1, lsl #4
void grid_ui_bank_init(struct grid_ui_model* parent, uint8_t index, uint8_t element_list_length){
    928c:	4614      	mov	r4, r2
	struct grid_ui_bank* bank = &parent->bank_list[index];
    928e:	010a      	lsls	r2, r1, #4
	bank->parent = parent;
    9290:	6068      	str	r0, [r5, #4]
	bank->index = index;
    9292:	7229      	strb	r1, [r5, #8]
	
	
	bank->status = GRID_UI_STATUS_INITIALIZED;
	
	bank->element_list_length = element_list_length;
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9294:	2064      	movs	r0, #100	; 0x64
	bank->status = GRID_UI_STATUS_INITIALIZED;
    9296:	2101      	movs	r1, #1
    9298:	5499      	strb	r1, [r3, r2]
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    929a:	4360      	muls	r0, r4
    929c:	4b08      	ldr	r3, [pc, #32]	; (92c0 <grid_ui_bank_init+0x3c>)
	bank->element_list_length = element_list_length;
    929e:	726c      	strb	r4, [r5, #9]
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    92a0:	4798      	blx	r3
	
	for(uint8_t i=0; i<element_list_length; i++){
    92a2:	2300      	movs	r3, #0
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    92a4:	60e8      	str	r0, [r5, #12]
		
		bank->element_list[i].status = GRID_UI_STATUS_UNDEFINED;
    92a6:	461a      	mov	r2, r3
	for(uint8_t i=0; i<element_list_length; i++){
    92a8:	b2d9      	uxtb	r1, r3
    92aa:	428c      	cmp	r4, r1
    92ac:	f100 0064 	add.w	r0, r0, #100	; 0x64
    92b0:	d800      	bhi.n	92b4 <grid_ui_bank_init+0x30>
		bank->element_list[i].event_list_length = 0;
		
	}
	
}
    92b2:	bd38      	pop	{r3, r4, r5, pc}
		bank->element_list[i].status = GRID_UI_STATUS_UNDEFINED;
    92b4:	f800 2c64 	strb.w	r2, [r0, #-100]
		bank->element_list[i].event_list_length = 0;
    92b8:	f800 2c08 	strb.w	r2, [r0, #-8]
	for(uint8_t i=0; i<element_list_length; i++){
    92bc:	3301      	adds	r3, #1
    92be:	e7f3      	b.n	92a8 <grid_ui_bank_init+0x24>
    92c0:	000123c5 	.word	0x000123c5

000092c4 <grid_ui_nvm_store_all_configuration>:
	
}



void grid_ui_nvm_store_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    92c4:	460b      	mov	r3, r1
	
    grid_nvm_ui_bulk_store_init(nvm, ui);
    92c6:	4601      	mov	r1, r0
    92c8:	4618      	mov	r0, r3
    92ca:	4b01      	ldr	r3, [pc, #4]	; (92d0 <grid_ui_nvm_store_all_configuration+0xc>)
    92cc:	4718      	bx	r3
    92ce:	bf00      	nop
    92d0:	000080fd 	.word	0x000080fd

000092d4 <grid_ui_nvm_load_all_configuration>:

}

void grid_ui_nvm_load_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    92d4:	460b      	mov	r3, r1
	
	grid_nvm_ui_bulk_read_init(nvm, ui);
    92d6:	4601      	mov	r1, r0
    92d8:	4618      	mov	r0, r3
    92da:	4b01      	ldr	r3, [pc, #4]	; (92e0 <grid_ui_nvm_load_all_configuration+0xc>)
    92dc:	4718      	bx	r3
    92de:	bf00      	nop
    92e0:	00007fe9 	.word	0x00007fe9

000092e4 <grid_ui_nvm_clear_all_configuration>:

		
	
}

void grid_ui_nvm_clear_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    92e4:	460b      	mov	r3, r1
	
	grid_nvm_ui_bulk_clear_init(nvm, ui);
    92e6:	4601      	mov	r1, r0
    92e8:	4618      	mov	r0, r3
    92ea:	4b01      	ldr	r3, [pc, #4]	; (92f0 <grid_ui_nvm_clear_all_configuration+0xc>)
    92ec:	4718      	bx	r3
    92ee:	bf00      	nop
    92f0:	000082c1 	.word	0x000082c1

000092f4 <grid_ui_recall_event_configuration>:

}


uint8_t grid_ui_recall_event_configuration(struct grid_ui_model* ui, uint8_t bank, uint8_t element, enum grid_ui_event_t event_type){
    92f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92f8:	4698      	mov	r8, r3
	
	struct grid_ui_element* ele = NULL;
	struct grid_ui_event* eve = NULL;
	uint8_t event_index = 255;
	
	if (bank < ui->bank_list_length){
    92fa:	7843      	ldrb	r3, [r0, #1]
    92fc:	428b      	cmp	r3, r1
uint8_t grid_ui_recall_event_configuration(struct grid_ui_model* ui, uint8_t bank, uint8_t element, enum grid_ui_event_t event_type){
    92fe:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
    9302:	460f      	mov	r7, r1
    9304:	4616      	mov	r6, r2
	if (bank < ui->bank_list_length){
    9306:	f240 80a5 	bls.w	9454 <grid_ui_recall_event_configuration+0x160>
		
		if (element < ui->bank_list[bank].element_list_length){
    930a:	6843      	ldr	r3, [r0, #4]
    930c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    9310:	7a5a      	ldrb	r2, [r3, #9]
    9312:	42b2      	cmp	r2, r6
    9314:	f240 809e 	bls.w	9454 <grid_ui_recall_event_configuration+0x160>
			
			ele = &ui->bank_list[bank].element_list[element];
    9318:	68da      	ldr	r2, [r3, #12]
    931a:	2364      	movs	r3, #100	; 0x64
    931c:	fb06 2303 	mla	r3, r6, r3, r2
			
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9320:	2200      	movs	r2, #0
    9322:	f893 c05c 	ldrb.w	ip, [r3, #92]	; 0x5c
	uint8_t event_index = 255;
    9326:	20ff      	movs	r0, #255	; 0xff
	struct grid_ui_event* eve = NULL;
    9328:	4615      	mov	r5, r2
				if (ele->event_list[i].type == event_type){
    932a:	f44f 7e86 	mov.w	lr, #268	; 0x10c
    932e:	b2d4      	uxtb	r4, r2
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9330:	45a4      	cmp	ip, r4
    9332:	d86b      	bhi.n	940c <grid_ui_recall_event_configuration+0x118>
		
		
	}
	
	
	if (event_index != 255){ // OK
    9334:	28ff      	cmp	r0, #255	; 0xff
    9336:	f000 808d 	beq.w	9454 <grid_ui_recall_event_configuration+0x160>
		
		struct grid_msg message;

		grid_msg_init(&message);
    933a:	4b6c      	ldr	r3, [pc, #432]	; (94ec <grid_ui_recall_event_configuration+0x1f8>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    933c:	4c6c      	ldr	r4, [pc, #432]	; (94f0 <grid_ui_recall_event_configuration+0x1fc>)
		uint32_t offset = 0;



		// BANK ENABLED
		offset = grid_msg_body_get_length(&message);
    933e:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 9510 <grid_ui_recall_event_configuration+0x21c>

		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9342:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 9514 <grid_ui_recall_event_configuration+0x220>
		payload_length = strlen(payload);
    9346:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 9518 <grid_ui_recall_event_configuration+0x224>

		grid_msg_body_append_text(&message, payload, payload_length);
    934a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 951c <grid_ui_recall_event_configuration+0x228>

		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    934e:	4f69      	ldr	r7, [pc, #420]	; (94f4 <grid_ui_recall_event_configuration+0x200>)
		grid_msg_init(&message);
    9350:	a867      	add	r0, sp, #412	; 0x19c
    9352:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9354:	227f      	movs	r2, #127	; 0x7f
    9356:	4611      	mov	r1, r2
    9358:	2300      	movs	r3, #0
    935a:	a867      	add	r0, sp, #412	; 0x19c
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    935c:	2600      	movs	r6, #0
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    935e:	47a0      	blx	r4
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9360:	4b65      	ldr	r3, [pc, #404]	; (94f8 <grid_ui_recall_event_configuration+0x204>)
    9362:	9603      	str	r6, [sp, #12]
    9364:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9368:	4631      	mov	r1, r6
    936a:	a804      	add	r0, sp, #16
    936c:	4798      	blx	r3
		offset = grid_msg_body_get_length(&message);
    936e:	a867      	add	r0, sp, #412	; 0x19c
    9370:	47d8      	blx	fp
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9372:	2380      	movs	r3, #128	; 0x80
		offset = grid_msg_body_get_length(&message);
    9374:	4604      	mov	r4, r0
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9376:	4961      	ldr	r1, [pc, #388]	; (94fc <grid_ui_recall_event_configuration+0x208>)
    9378:	2202      	movs	r2, #2
    937a:	a803      	add	r0, sp, #12
    937c:	47d0      	blx	sl
		payload_length = strlen(payload);
    937e:	a803      	add	r0, sp, #12
    9380:	47c8      	blx	r9
		grid_msg_body_append_text(&message, payload, payload_length);
    9382:	a903      	add	r1, sp, #12
    9384:	b2c2      	uxtb	r2, r0
    9386:	a867      	add	r0, sp, #412	; 0x19c
    9388:	47c0      	blx	r8
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    938a:	230d      	movs	r3, #13
    938c:	9300      	str	r3, [sp, #0]
    938e:	2204      	movs	r2, #4
    9390:	2301      	movs	r3, #1
    9392:	4621      	mov	r1, r4
    9394:	a867      	add	r0, sp, #412	; 0x19c
    9396:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, eve->parent->parent->index);
    9398:	686b      	ldr	r3, [r5, #4]
    939a:	685b      	ldr	r3, [r3, #4]
    939c:	7a1b      	ldrb	r3, [r3, #8]
    939e:	9300      	str	r3, [sp, #0]
    93a0:	2205      	movs	r2, #5
    93a2:	2302      	movs	r3, #2
    93a4:	4621      	mov	r1, r4
    93a6:	a867      	add	r0, sp, #412	; 0x19c
    93a8:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, eve->parent->index);
    93aa:	686b      	ldr	r3, [r5, #4]
    93ac:	7a1b      	ldrb	r3, [r3, #8]
    93ae:	9300      	str	r3, [sp, #0]
    93b0:	2207      	movs	r2, #7
    93b2:	2302      	movs	r3, #2
    93b4:	4621      	mov	r1, r4
    93b6:	a867      	add	r0, sp, #412	; 0x19c
    93b8:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eve->type);
    93ba:	7aab      	ldrb	r3, [r5, #10]
    93bc:	9300      	str	r3, [sp, #0]
    93be:	2209      	movs	r2, #9
    93c0:	2302      	movs	r3, #2
    93c2:	4621      	mov	r1, r4
    93c4:	a867      	add	r0, sp, #412	; 0x19c
    93c6:	47b8      	blx	r7

		offset = grid_msg_body_get_length(&message);
    93c8:	a867      	add	r0, sp, #412	; 0x19c
    93ca:	47d8      	blx	fp
		grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    93cc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    93ce:	4b4c      	ldr	r3, [pc, #304]	; (9500 <grid_ui_recall_event_configuration+0x20c>)
		offset = grid_msg_body_get_length(&message);
    93d0:	4683      	mov	fp, r0
		grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    93d2:	f105 0148 	add.w	r1, r5, #72	; 0x48
    93d6:	a867      	add	r0, sp, #412	; 0x19c
    93d8:	4798      	blx	r3

		for(uint8_t t=0; t<eve->action_parameter_count; t++){
    93da:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    93de:	b2f4      	uxtb	r4, r6
    93e0:	42a3      	cmp	r3, r4
    93e2:	d81e      	bhi.n	9422 <grid_ui_recall_event_configuration+0x12e>
		}




		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    93e4:	4947      	ldr	r1, [pc, #284]	; (9504 <grid_ui_recall_event_configuration+0x210>)
    93e6:	2203      	movs	r2, #3
    93e8:	a803      	add	r0, sp, #12
    93ea:	47d0      	blx	sl
		payload_length = strlen(payload);
    93ec:	a803      	add	r0, sp, #12
    93ee:	47c8      	blx	r9

		grid_msg_body_append_text(&message, payload, payload_length);
    93f0:	a903      	add	r1, sp, #12
    93f2:	b2c2      	uxtb	r2, r0
    93f4:	a867      	add	r0, sp, #412	; 0x19c
    93f6:	47c0      	blx	r8
		payload_length = strlen(payload);

		grid_msg_body_append_text(&message, payload, payload_length);


		grid_msg_packet_close(&message);
    93f8:	4b43      	ldr	r3, [pc, #268]	; (9508 <grid_ui_recall_event_configuration+0x214>)
    93fa:	a867      	add	r0, sp, #412	; 0x19c
    93fc:	4798      	blx	r3
		grid_msg_packet_send_everywhere(&message);		
    93fe:	4b43      	ldr	r3, [pc, #268]	; (950c <grid_ui_recall_event_configuration+0x218>)
    9400:	a867      	add	r0, sp, #412	; 0x19c
    9402:	4798      	blx	r3
		
		
	}

	
}
    9404:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
    9408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (ele->event_list[i].type == event_type){
    940c:	6e19      	ldr	r1, [r3, #96]	; 0x60
    940e:	fb0e 1102 	mla	r1, lr, r2, r1
    9412:	3201      	adds	r2, #1
    9414:	f891 900a 	ldrb.w	r9, [r1, #10]
    9418:	45c1      	cmp	r9, r8
    941a:	bf04      	itt	eq
    941c:	4620      	moveq	r0, r4
    941e:	460d      	moveq	r5, r1
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9420:	e785      	b.n	932e <grid_ui_recall_event_configuration+0x3a>
			uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9422:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9426:	442c      	add	r4, r5
			message.body[offset + parameter_offset] = parameter_group;
    9428:	a967      	add	r1, sp, #412	; 0x19c
			uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    942a:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
			uint8_t	 parameter_lenght  = eve->action_parameter_list[t].length;
    942e:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
			uint8_t	 parameter_address = eve->action_parameter_list[t].address;
    9432:	f894 00c3 	ldrb.w	r0, [r4, #195]	; 0xc3
			message.body[offset + parameter_offset] = parameter_group;
    9436:	f894 40c2 	ldrb.w	r4, [r4, #194]	; 0xc2
    943a:	4411      	add	r1, r2
    943c:	4459      	add	r1, fp
			grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    943e:	3b01      	subs	r3, #1
    9440:	3201      	adds	r2, #1
			message.body[offset + parameter_offset] = parameter_group;
    9442:	750c      	strb	r4, [r1, #20]
			grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9444:	b2db      	uxtb	r3, r3
    9446:	9000      	str	r0, [sp, #0]
    9448:	b2d2      	uxtb	r2, r2
    944a:	4659      	mov	r1, fp
    944c:	a867      	add	r0, sp, #412	; 0x19c
    944e:	47b8      	blx	r7
		for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9450:	3601      	adds	r6, #1
    9452:	e7c2      	b.n	93da <grid_ui_recall_event_configuration+0xe6>
		grid_msg_init(&message);
    9454:	a867      	add	r0, sp, #412	; 0x19c
    9456:	4b25      	ldr	r3, [pc, #148]	; (94ec <grid_ui_recall_event_configuration+0x1f8>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9458:	4c25      	ldr	r4, [pc, #148]	; (94f0 <grid_ui_recall_event_configuration+0x1fc>)
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    945a:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 9514 <grid_ui_recall_event_configuration+0x220>
		payload_length = strlen(payload);
    945e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 9518 <grid_ui_recall_event_configuration+0x224>
		grid_msg_body_append_text(&message, payload, payload_length);
    9462:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 951c <grid_ui_recall_event_configuration+0x228>
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    9466:	4d23      	ldr	r5, [pc, #140]	; (94f4 <grid_ui_recall_event_configuration+0x200>)
		grid_msg_init(&message);
    9468:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    946a:	227f      	movs	r2, #127	; 0x7f
    946c:	4611      	mov	r1, r2
    946e:	a867      	add	r0, sp, #412	; 0x19c
    9470:	2300      	movs	r3, #0
    9472:	47a0      	blx	r4
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9474:	2100      	movs	r1, #0
    9476:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    947a:	4b1f      	ldr	r3, [pc, #124]	; (94f8 <grid_ui_recall_event_configuration+0x204>)
    947c:	9103      	str	r1, [sp, #12]
    947e:	a804      	add	r0, sp, #16
    9480:	4798      	blx	r3
		offset = grid_msg_body_get_length(&message);
    9482:	4b23      	ldr	r3, [pc, #140]	; (9510 <grid_ui_recall_event_configuration+0x21c>)
    9484:	a867      	add	r0, sp, #412	; 0x19c
    9486:	4798      	blx	r3
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9488:	2380      	movs	r3, #128	; 0x80
		offset = grid_msg_body_get_length(&message);
    948a:	4604      	mov	r4, r0
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    948c:	491b      	ldr	r1, [pc, #108]	; (94fc <grid_ui_recall_event_configuration+0x208>)
    948e:	2202      	movs	r2, #2
    9490:	a803      	add	r0, sp, #12
    9492:	47d8      	blx	fp
		payload_length = strlen(payload);
    9494:	a803      	add	r0, sp, #12
    9496:	47d0      	blx	sl
		grid_msg_body_append_text(&message, payload, payload_length);
    9498:	a903      	add	r1, sp, #12
    949a:	b2c2      	uxtb	r2, r0
    949c:	a867      	add	r0, sp, #412	; 0x19c
    949e:	47c8      	blx	r9
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    94a0:	230b      	movs	r3, #11
    94a2:	9300      	str	r3, [sp, #0]
    94a4:	4621      	mov	r1, r4
    94a6:	a867      	add	r0, sp, #412	; 0x19c
    94a8:	2301      	movs	r3, #1
    94aa:	2204      	movs	r2, #4
    94ac:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, bank);
    94ae:	4621      	mov	r1, r4
    94b0:	a867      	add	r0, sp, #412	; 0x19c
    94b2:	9700      	str	r7, [sp, #0]
    94b4:	2302      	movs	r3, #2
    94b6:	2205      	movs	r2, #5
    94b8:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, element);
    94ba:	4621      	mov	r1, r4
    94bc:	a867      	add	r0, sp, #412	; 0x19c
    94be:	9600      	str	r6, [sp, #0]
    94c0:	2302      	movs	r3, #2
    94c2:	2207      	movs	r2, #7
    94c4:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, event_type);
    94c6:	2302      	movs	r3, #2
    94c8:	4621      	mov	r1, r4
    94ca:	a867      	add	r0, sp, #412	; 0x19c
    94cc:	f8cd 8000 	str.w	r8, [sp]
    94d0:	2209      	movs	r2, #9
    94d2:	47a8      	blx	r5
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    94d4:	490b      	ldr	r1, [pc, #44]	; (9504 <grid_ui_recall_event_configuration+0x210>)
    94d6:	2203      	movs	r2, #3
    94d8:	a803      	add	r0, sp, #12
    94da:	47d8      	blx	fp
		payload_length = strlen(payload);
    94dc:	a803      	add	r0, sp, #12
    94de:	47d0      	blx	sl
		grid_msg_body_append_text(&message, payload, payload_length);
    94e0:	a903      	add	r1, sp, #12
    94e2:	b2c2      	uxtb	r2, r0
    94e4:	a867      	add	r0, sp, #412	; 0x19c
    94e6:	47c8      	blx	r9
    94e8:	e786      	b.n	93f8 <grid_ui_recall_event_configuration+0x104>
    94ea:	bf00      	nop
    94ec:	00007d8d 	.word	0x00007d8d
    94f0:	00007dc1 	.word	0x00007dc1
    94f4:	00007d71 	.word	0x00007d71
    94f8:	00012519 	.word	0x00012519
    94fc:	00014a50 	.word	0x00014a50
    9500:	00007d1d 	.word	0x00007d1d
    9504:	0001474f 	.word	0x0001474f
    9508:	00007eb9 	.word	0x00007eb9
    950c:	00007f8d 	.word	0x00007f8d
    9510:	00007cf7 	.word	0x00007cf7
    9514:	00012b75 	.word	0x00012b75
    9518:	00012c81 	.word	0x00012c81
    951c:	00007cfd 	.word	0x00007cfd

00009520 <grid_ui_nvm_store_event_configuration>:



uint8_t grid_ui_nvm_store_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9524:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
	

	struct grid_msg message;

	grid_msg_init(&message);
    9528:	4b62      	ldr	r3, [pc, #392]	; (96b4 <grid_ui_nvm_store_event_configuration+0x194>)
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    952a:	4e63      	ldr	r6, [pc, #396]	; (96b8 <grid_ui_nvm_store_event_configuration+0x198>)
	uint32_t offset = 0;



	// BANK ENABLED
	offset = grid_msg_body_get_length(&message);
    952c:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 96e8 <grid_ui_nvm_store_event_configuration+0x1c8>

	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9530:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 96ec <grid_ui_nvm_store_event_configuration+0x1cc>
	payload_length = strlen(payload);
    9534:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 96f0 <grid_ui_nvm_store_event_configuration+0x1d0>

	grid_msg_body_append_text(&message, payload, payload_length);

	grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    9538:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 96f4 <grid_ui_nvm_store_event_configuration+0x1d4>
	grid_msg_init(&message);
    953c:	a867      	add	r0, sp, #412	; 0x19c
uint8_t grid_ui_nvm_store_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    953e:	4614      	mov	r4, r2
    9540:	460d      	mov	r5, r1
	grid_msg_init(&message);
    9542:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9544:	22ff      	movs	r2, #255	; 0xff
    9546:	4611      	mov	r1, r2
    9548:	2300      	movs	r3, #0
    954a:	a867      	add	r0, sp, #412	; 0x19c
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    954c:	2700      	movs	r7, #0
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    954e:	47b0      	blx	r6
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9550:	4b5a      	ldr	r3, [pc, #360]	; (96bc <grid_ui_nvm_store_event_configuration+0x19c>)
    9552:	9703      	str	r7, [sp, #12]
    9554:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9558:	4639      	mov	r1, r7
    955a:	a804      	add	r0, sp, #16
    955c:	4798      	blx	r3
	offset = grid_msg_body_get_length(&message);
    955e:	a867      	add	r0, sp, #412	; 0x19c
    9560:	47d8      	blx	fp
	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9562:	4957      	ldr	r1, [pc, #348]	; (96c0 <grid_ui_nvm_store_event_configuration+0x1a0>)
	offset = grid_msg_body_get_length(&message);
    9564:	4606      	mov	r6, r0
	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9566:	2380      	movs	r3, #128	; 0x80
    9568:	2202      	movs	r2, #2
    956a:	a803      	add	r0, sp, #12
    956c:	47d0      	blx	sl
	payload_length = strlen(payload);
    956e:	a803      	add	r0, sp, #12
    9570:	47c8      	blx	r9
	grid_msg_body_append_text(&message, payload, payload_length);
    9572:	4b54      	ldr	r3, [pc, #336]	; (96c4 <grid_ui_nvm_store_event_configuration+0x1a4>)
    9574:	b2c2      	uxtb	r2, r0
    9576:	a903      	add	r1, sp, #12
    9578:	a867      	add	r0, sp, #412	; 0x19c
    957a:	4798      	blx	r3
	grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    957c:	230e      	movs	r3, #14
    957e:	9300      	str	r3, [sp, #0]
    9580:	2204      	movs	r2, #4
    9582:	2301      	movs	r3, #1
    9584:	4631      	mov	r1, r6
    9586:	a867      	add	r0, sp, #412	; 0x19c
    9588:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, eve->parent->parent->index);
    958a:	6863      	ldr	r3, [r4, #4]
    958c:	685b      	ldr	r3, [r3, #4]
    958e:	7a1b      	ldrb	r3, [r3, #8]
    9590:	9300      	str	r3, [sp, #0]
    9592:	2205      	movs	r2, #5
    9594:	2302      	movs	r3, #2
    9596:	4631      	mov	r1, r6
    9598:	a867      	add	r0, sp, #412	; 0x19c
    959a:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, eve->parent->index);
    959c:	6863      	ldr	r3, [r4, #4]
    959e:	7a1b      	ldrb	r3, [r3, #8]
    95a0:	9300      	str	r3, [sp, #0]
    95a2:	2207      	movs	r2, #7
    95a4:	2302      	movs	r3, #2
    95a6:	4631      	mov	r1, r6
    95a8:	a867      	add	r0, sp, #412	; 0x19c
    95aa:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eve->type);
    95ac:	7aa3      	ldrb	r3, [r4, #10]
    95ae:	9300      	str	r3, [sp, #0]
    95b0:	2209      	movs	r2, #9
    95b2:	2302      	movs	r3, #2
    95b4:	4631      	mov	r1, r6
    95b6:	a867      	add	r0, sp, #412	; 0x19c
    95b8:	47c0      	blx	r8

	offset = grid_msg_body_get_length(&message);
    95ba:	a867      	add	r0, sp, #412	; 0x19c
    95bc:	47d8      	blx	fp
	grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    95be:	6c62      	ldr	r2, [r4, #68]	; 0x44
    95c0:	4b41      	ldr	r3, [pc, #260]	; (96c8 <grid_ui_nvm_store_event_configuration+0x1a8>)
	offset = grid_msg_body_get_length(&message);
    95c2:	4683      	mov	fp, r0
	grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    95c4:	f104 0148 	add.w	r1, r4, #72	; 0x48
    95c8:	a867      	add	r0, sp, #412	; 0x19c
    95ca:	4798      	blx	r3

	for(uint8_t t=0; t<eve->action_parameter_count; t++){
    95cc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    95d0:	b2fe      	uxtb	r6, r7
    95d2:	42b3      	cmp	r3, r6
    95d4:	d83c      	bhi.n	9650 <grid_ui_nvm_store_event_configuration+0x130>
	}




	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    95d6:	493d      	ldr	r1, [pc, #244]	; (96cc <grid_ui_nvm_store_event_configuration+0x1ac>)
    95d8:	2203      	movs	r2, #3
    95da:	a803      	add	r0, sp, #12
    95dc:	47d0      	blx	sl
	payload_length = strlen(payload);
    95de:	a803      	add	r0, sp, #12
    95e0:	47c8      	blx	r9

	grid_msg_body_append_text(&message, payload, payload_length);
    95e2:	a903      	add	r1, sp, #12
    95e4:	b2c2      	uxtb	r2, r0
    95e6:	4b37      	ldr	r3, [pc, #220]	; (96c4 <grid_ui_nvm_store_event_configuration+0x1a4>)
    95e8:	a867      	add	r0, sp, #412	; 0x19c
    95ea:	4798      	blx	r3


	grid_msg_packet_close(&message);
    95ec:	4b38      	ldr	r3, [pc, #224]	; (96d0 <grid_ui_nvm_store_event_configuration+0x1b0>)
    95ee:	a867      	add	r0, sp, #412	; 0x19c
    95f0:	4798      	blx	r3

	grid_nvm_clear_write_buffer(nvm);
    95f2:	4b38      	ldr	r3, [pc, #224]	; (96d4 <grid_ui_nvm_store_event_configuration+0x1b4>)
    95f4:	4628      	mov	r0, r5
    95f6:	4798      	blx	r3

	uint32_t message_length = grid_msg_packet_get_length(&message);
    95f8:	4b37      	ldr	r3, [pc, #220]	; (96d8 <grid_ui_nvm_store_event_configuration+0x1b8>)
    95fa:	a867      	add	r0, sp, #412	; 0x19c
    95fc:	4798      	blx	r3

	if (message_length){
    95fe:	4606      	mov	r6, r0
    9600:	2800      	cmp	r0, #0
    9602:	d13e      	bne.n	9682 <grid_ui_nvm_store_event_configuration+0x162>
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
		}

	}

	uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);
    9604:	4621      	mov	r1, r4
    9606:	4b35      	ldr	r3, [pc, #212]	; (96dc <grid_ui_nvm_store_event_configuration+0x1bc>)
    9608:	4628      	mov	r0, r5
    960a:	4798      	blx	r3
	nvm->write_target_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;
    960c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9610:	0241      	lsls	r1, r0, #9
    9612:	f8c5 1420 	str.w	r1, [r5, #1056]	; 0x420
	int status = 0;
	
	
	uint8_t debugtext[200] = {0};

	if (eve->cfg_default_flag == 1 && eve->cfg_flashempty_flag == 0){
    9616:	f8b4 6108 	ldrh.w	r6, [r4, #264]	; 0x108
    961a:	2e01      	cmp	r6, #1
    961c:	d041      	beq.n	96a2 <grid_ui_nvm_store_event_configuration+0x182>
	int status = 0;
    961e:	2000      	movs	r0, #0
		eve->cfg_flashempty_flag = 1;
		status = 1;
	}
	
	
	if (eve->cfg_default_flag == 0 && eve->cfg_changed_flag == 1){
    9620:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
    9624:	b96b      	cbnz	r3, 9642 <grid_ui_nvm_store_event_configuration+0x122>
    9626:	f894 6107 	ldrb.w	r6, [r4, #263]	; 0x107
    962a:	2e01      	cmp	r6, #1
    962c:	d109      	bne.n	9642 <grid_ui_nvm_store_event_configuration+0x122>
		
		//sprintf(debugtext, "Cfg: Store B:%d E:%d Ev:%d => Page: %d Status: %d", eve->parent->parent->index, eve->parent->index, eve->index, event_page_offset, status);		
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, GRID_NVM_PAGE_SIZE);
    962e:	f8d5 1420 	ldr.w	r1, [r5, #1056]	; 0x420
    9632:	6828      	ldr	r0, [r5, #0]
    9634:	f505 7206 	add.w	r2, r5, #536	; 0x218
    9638:	f44f 7300 	mov.w	r3, #512	; 0x200
    963c:	4d28      	ldr	r5, [pc, #160]	; (96e0 <grid_ui_nvm_store_event_configuration+0x1c0>)
    963e:	47a8      	blx	r5
		status = 1;
    9640:	4630      	mov	r0, r6
	}


	//grid_debug_print_text(debugtext);

	eve->cfg_changed_flag = 0;
    9642:	2300      	movs	r3, #0
    9644:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	
	return status;
	
}
    9648:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
    964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9650:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    9654:	4426      	add	r6, r4
		message.body[offset + parameter_offset] = parameter_group;
    9656:	a967      	add	r1, sp, #412	; 0x19c
		uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9658:	f896 20c5 	ldrb.w	r2, [r6, #197]	; 0xc5
		uint8_t	 parameter_lenght  = eve->action_parameter_list[t].length;
    965c:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
		uint8_t	 parameter_address = eve->action_parameter_list[t].address;
    9660:	f896 00c3 	ldrb.w	r0, [r6, #195]	; 0xc3
		message.body[offset + parameter_offset] = parameter_group;
    9664:	f896 60c2 	ldrb.w	r6, [r6, #194]	; 0xc2
    9668:	4411      	add	r1, r2
    966a:	4459      	add	r1, fp
		grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    966c:	3b01      	subs	r3, #1
    966e:	3201      	adds	r2, #1
		message.body[offset + parameter_offset] = parameter_group;
    9670:	750e      	strb	r6, [r1, #20]
		grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9672:	b2db      	uxtb	r3, r3
    9674:	9000      	str	r0, [sp, #0]
    9676:	b2d2      	uxtb	r2, r2
    9678:	4659      	mov	r1, fp
    967a:	a867      	add	r0, sp, #412	; 0x19c
    967c:	47c0      	blx	r8
	for(uint8_t t=0; t<eve->action_parameter_count; t++){
    967e:	3701      	adds	r7, #1
    9680:	e7a4      	b.n	95cc <grid_ui_nvm_store_event_configuration+0xac>
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    9682:	f8df 9074 	ldr.w	r9, [pc, #116]	; 96f8 <grid_ui_nvm_store_event_configuration+0x1d8>
		nvm->write_buffer_length = message_length;
    9686:	f8c5 0418 	str.w	r0, [r5, #1048]	; 0x418
		for(uint32_t i = 0; i<message_length; i++){
    968a:	f505 7806 	add.w	r8, r5, #536	; 0x218
    968e:	2700      	movs	r7, #0
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    9690:	4639      	mov	r1, r7
    9692:	a867      	add	r0, sp, #412	; 0x19c
    9694:	47c8      	blx	r9
		for(uint32_t i = 0; i<message_length; i++){
    9696:	3701      	adds	r7, #1
    9698:	42be      	cmp	r6, r7
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    969a:	f808 0b01 	strb.w	r0, [r8], #1
		for(uint32_t i = 0; i<message_length; i++){
    969e:	d1f7      	bne.n	9690 <grid_ui_nvm_store_event_configuration+0x170>
    96a0:	e7b0      	b.n	9604 <grid_ui_nvm_store_event_configuration+0xe4>
		flash_erase(nvm->flash, nvm->write_target_address, 1);
    96a2:	6828      	ldr	r0, [r5, #0]
    96a4:	4b0f      	ldr	r3, [pc, #60]	; (96e4 <grid_ui_nvm_store_event_configuration+0x1c4>)
    96a6:	4632      	mov	r2, r6
    96a8:	4798      	blx	r3
		eve->cfg_flashempty_flag = 1;
    96aa:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
		status = 1;
    96ae:	4630      	mov	r0, r6
    96b0:	e7b6      	b.n	9620 <grid_ui_nvm_store_event_configuration+0x100>
    96b2:	bf00      	nop
    96b4:	00007d8d 	.word	0x00007d8d
    96b8:	00007dc1 	.word	0x00007dc1
    96bc:	00012519 	.word	0x00012519
    96c0:	00014a50 	.word	0x00014a50
    96c4:	00007cfd 	.word	0x00007cfd
    96c8:	00007d1d 	.word	0x00007d1d
    96cc:	0001474f 	.word	0x0001474f
    96d0:	00007eb9 	.word	0x00007eb9
    96d4:	00008499 	.word	0x00008499
    96d8:	00007ce9 	.word	0x00007ce9
    96dc:	00008505 	.word	0x00008505
    96e0:	0000d8f1 	.word	0x0000d8f1
    96e4:	0000d971 	.word	0x0000d971
    96e8:	00007cf7 	.word	0x00007cf7
    96ec:	00012b75 	.word	0x00012b75
    96f0:	00012c81 	.word	0x00012c81
    96f4:	00007d71 	.word	0x00007d71
    96f8:	00007e83 	.word	0x00007e83

000096fc <grid_ui_nvm_load_event_configuration>:



uint8_t grid_ui_nvm_load_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    96fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
		
	grid_nvm_clear_read_buffer(nvm);
    96fe:	4b19      	ldr	r3, [pc, #100]	; (9764 <grid_ui_nvm_load_event_configuration+0x68>)
uint8_t grid_ui_nvm_load_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9700:	9201      	str	r2, [sp, #4]
    9702:	460c      	mov	r4, r1
	grid_nvm_clear_read_buffer(nvm);
    9704:	4608      	mov	r0, r1
    9706:	4798      	blx	r3
	
	uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);	
    9708:	9901      	ldr	r1, [sp, #4]
    970a:	4b17      	ldr	r3, [pc, #92]	; (9768 <grid_ui_nvm_load_event_configuration+0x6c>)
    970c:	4620      	mov	r0, r4
    970e:	4798      	blx	r3
	nvm->read_source_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;	
    9710:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9714:	0241      	lsls	r1, r0, #9
	

	int status = flash_read(nvm->flash, nvm->read_source_address, nvm->read_buffer, GRID_NVM_PAGE_SIZE);	
    9716:	f104 0609 	add.w	r6, r4, #9
	nvm->read_source_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;	
    971a:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
	int status = flash_read(nvm->flash, nvm->read_source_address, nvm->read_buffer, GRID_NVM_PAGE_SIZE);	
    971e:	6820      	ldr	r0, [r4, #0]
    9720:	4c12      	ldr	r4, [pc, #72]	; (976c <grid_ui_nvm_load_event_configuration+0x70>)
    9722:	f44f 7300 	mov.w	r3, #512	; 0x200
    9726:	4632      	mov	r2, r6
    9728:	47a0      	blx	r4
    972a:	2300      	movs	r3, #0
			}
			else if (nvm->read_buffer[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
				copydone = 1;
			}
			else{ // NORMAL CHARACTER, can be copied
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    972c:	4c10      	ldr	r4, [pc, #64]	; (9770 <grid_ui_nvm_load_event_configuration+0x74>)
	uint8_t cfgfound = 0;
    972e:	4618      	mov	r0, r3
	uint8_t copydone = 0;
    9730:	4619      	mov	r1, r3
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9732:	f241 37b4 	movw	r7, #5044	; 0x13b4
		if (copydone == 0){
    9736:	1c5a      	adds	r2, r3, #1
    9738:	b971      	cbnz	r1, 9758 <grid_ui_nvm_load_event_configuration+0x5c>
			if (nvm->read_buffer[i] == '\n'){ // END OF PACKET, copy newline character
    973a:	5cf5      	ldrb	r5, [r6, r3]
    973c:	2d0a      	cmp	r5, #10
    973e:	d106      	bne.n	974e <grid_ui_nvm_load_event_configuration+0x52>
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9740:	4423      	add	r3, r4
				cfgfound=2;
    9742:	2002      	movs	r0, #2
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9744:	55dd      	strb	r5, [r3, r7]
				GRID_PORT_U.rx_double_buffer_status = i+1;
    9746:	6222      	str	r2, [r4, #32]
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    9748:	62a1      	str	r1, [r4, #40]	; 0x28
				copydone = 1;
    974a:	2101      	movs	r1, #1
    974c:	e004      	b.n	9758 <grid_ui_nvm_load_event_configuration+0x5c>
			else if (nvm->read_buffer[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
    974e:	2dff      	cmp	r5, #255	; 0xff
    9750:	d0fb      	beq.n	974a <grid_ui_nvm_load_event_configuration+0x4e>
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9752:	4423      	add	r3, r4
				
				cfgfound=1;
    9754:	2001      	movs	r0, #1
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9756:	55dd      	strb	r5, [r3, r7]
	for (uint16_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    9758:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    975c:	4613      	mov	r3, r2
    975e:	d1ea      	bne.n	9736 <grid_ui_nvm_load_event_configuration+0x3a>
	}
	
	return cfgfound;
	
	
}
    9760:	b003      	add	sp, #12
    9762:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9764:	00008479 	.word	0x00008479
    9768:	00008505 	.word	0x00008505
    976c:	0000d885 	.word	0x0000d885
    9770:	2000403c 	.word	0x2000403c

00009774 <grid_ui_nvm_clear_event_configuration>:
uint8_t grid_ui_nvm_clear_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9774:	b510      	push	{r4, lr}
    9776:	460c      	mov	r4, r1
		
		uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);
    9778:	4b06      	ldr	r3, [pc, #24]	; (9794 <grid_ui_nvm_clear_event_configuration+0x20>)
    977a:	4611      	mov	r1, r2
    977c:	4620      	mov	r0, r4
    977e:	4798      	blx	r3
		
		

		flash_erase(nvm->flash, GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset, 1);
    9780:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9784:	0241      	lsls	r1, r0, #9
    9786:	4b04      	ldr	r3, [pc, #16]	; (9798 <grid_ui_nvm_clear_event_configuration+0x24>)
    9788:	6820      	ldr	r0, [r4, #0]
    978a:	2201      	movs	r2, #1
    978c:	4798      	blx	r3

		
		
		return 1;
		
}
    978e:	2001      	movs	r0, #1
    9790:	bd10      	pop	{r4, pc}
    9792:	bf00      	nop
    9794:	00008505 	.word	0x00008505
    9798:	0000d971 	.word	0x0000d971

0000979c <grid_ui_event_find>:
	
}



uint8_t grid_ui_event_find(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    979c:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t event_index = 255;
		
	for(uint8_t i=0; i<ele->event_list_length; i++){
    979e:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
    97a2:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    97a4:	22ff      	movs	r2, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    97a6:	f44f 7786 	mov.w	r7, #268	; 0x10c
    97aa:	b2dd      	uxtb	r5, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    97ac:	42ae      	cmp	r6, r5
    97ae:	d801      	bhi.n	97b4 <grid_ui_event_find+0x18>

		
		
	return event_index;
	
}
    97b0:	4610      	mov	r0, r2
    97b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ele->event_list[i].type == event_type){
    97b4:	6e04      	ldr	r4, [r0, #96]	; 0x60
    97b6:	fb07 4403 	mla	r4, r7, r3, r4
    97ba:	3301      	adds	r3, #1
    97bc:	7aa4      	ldrb	r4, [r4, #10]
    97be:	428c      	cmp	r4, r1
    97c0:	bf08      	it	eq
    97c2:	462a      	moveq	r2, r5
	for(uint8_t i=0; i<ele->event_list_length; i++){
    97c4:	e7f1      	b.n	97aa <grid_ui_event_find+0xe>

000097c6 <grid_ui_event_trigger>:

void grid_ui_event_trigger(struct grid_ui_element* ele, uint8_t event_index){

	if (event_index == 255){
    97c6:	29ff      	cmp	r1, #255	; 0xff
    97c8:	d006      	beq.n	97d8 <grid_ui_event_trigger+0x12>
	
	struct grid_ui_event* eve = &ele->event_list[event_index];


		
	eve->trigger = GRID_UI_STATUS_TRIGGERED;
    97ca:	6e03      	ldr	r3, [r0, #96]	; 0x60
    97cc:	f44f 7286 	mov.w	r2, #268	; 0x10c
    97d0:	fb02 3101 	mla	r1, r2, r1, r3
    97d4:	2305      	movs	r3, #5
    97d6:	724b      	strb	r3, [r1, #9]

}
    97d8:	4770      	bx	lr

000097da <grid_ui_event_trigger_local>:

void grid_ui_event_trigger_local(struct grid_ui_element* ele, uint8_t event_index){

	if (event_index == 255){
    97da:	29ff      	cmp	r1, #255	; 0xff
    97dc:	d006      	beq.n	97ec <grid_ui_event_trigger_local+0x12>
	
	struct grid_ui_event* eve = &ele->event_list[event_index];


		
	eve->trigger = GRID_UI_STATUS_TRIGGERED_LOCAL;
    97de:	6e03      	ldr	r3, [r0, #96]	; 0x60
    97e0:	f44f 7286 	mov.w	r2, #268	; 0x10c
    97e4:	fb02 3101 	mla	r1, r2, r1, r3
    97e8:	2306      	movs	r3, #6
    97ea:	724b      	strb	r3, [r1, #9]

}
    97ec:	4770      	bx	lr

000097ee <grid_ui_event_render_action>:
		return 0;
	}
			
}

uint32_t grid_ui_event_render_action(struct grid_ui_event* eve, uint8_t* target_string){
    97ee:	b510      	push	{r4, lr}
    97f0:	f100 0210 	add.w	r2, r0, #16

	
	uint32_t i=0;
    97f4:	2300      	movs	r3, #0
	
	for(true; i<eve->event_string_length; i++){
    97f6:	68c4      	ldr	r4, [r0, #12]
    97f8:	429c      	cmp	r4, r3
    97fa:	d80e      	bhi.n	981a <grid_ui_event_render_action+0x2c>
		target_string[i] = eve->event_string[i];
		
	}
		
	for(true; i<(eve->event_string_length + eve->action_string_length) ; i++){
    97fc:	68c2      	ldr	r2, [r0, #12]
    97fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
    9800:	4414      	add	r4, r2
    9802:	429c      	cmp	r4, r3
    9804:	d80e      	bhi.n	9824 <grid_ui_event_render_action+0x36>
		
	}
	
	
	// RESET ENCODER RELATIVE TEMPLATE PARAMETER VALUES
	if(eve->parent->type == GRID_UI_ELEMENT_ENCODER){	
    9806:	6843      	ldr	r3, [r0, #4]
    9808:	7a5a      	ldrb	r2, [r3, #9]
    980a:	2a03      	cmp	r2, #3
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL] = 255;	
    980c:	bf02      	ittt	eq
    980e:	22ff      	moveq	r2, #255	; 0xff
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_LOW] = 255;	
    9810:	e9c3 220d 	strdeq	r2, r2, [r3, #52]	; 0x34
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_HIGH] = 255;	
    9814:	63da      	streq	r2, [r3, #60]	; 0x3c
    }
	
	
	return eve->event_string_length + eve->action_string_length;
		
}
    9816:	4620      	mov	r0, r4
    9818:	bd10      	pop	{r4, pc}
		target_string[i] = eve->event_string[i];
    981a:	f812 4b01 	ldrb.w	r4, [r2], #1
    981e:	54cc      	strb	r4, [r1, r3]
	for(true; i<eve->event_string_length; i++){
    9820:	3301      	adds	r3, #1
    9822:	e7e8      	b.n	97f6 <grid_ui_event_render_action+0x8>
		target_string[i] = eve->action_string[i-eve->event_string_length];
    9824:	1a9a      	subs	r2, r3, r2
    9826:	4402      	add	r2, r0
    9828:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
    982c:	54ca      	strb	r2, [r1, r3]
	for(true; i<(eve->event_string_length + eve->action_string_length) ; i++){
    982e:	3301      	adds	r3, #1
    9830:	e7e4      	b.n	97fc <grid_ui_event_render_action+0xe>
	...

00009834 <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    9834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    9838:	4fb1      	ldr	r7, [pc, #708]	; (9b00 <grid_port_process_ui+0x2cc>)
void grid_port_process_ui(struct grid_port* por){
    983a:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    983e:	2100      	movs	r1, #0
void grid_port_process_ui(struct grid_port* por){
    9840:	9001      	str	r0, [sp, #4]
	uint8_t message_local_action_available = 0;
    9842:	4688      	mov	r8, r1
	uint8_t message_broadcast_action_available = 0;
    9844:	460d      	mov	r5, r1
    9846:	46ba      	mov	sl, r7
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    9848:	f04f 0c64 	mov.w	ip, #100	; 0x64
				if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    984c:	f44f 7e86 	mov.w	lr, #268	; 0x10c
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    9850:	787a      	ldrb	r2, [r7, #1]
    9852:	b2cb      	uxtb	r3, r1
    9854:	429a      	cmp	r2, r3
    9856:	d95e      	bls.n	9916 <grid_port_process_ui+0xe2>
		for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    9858:	011b      	lsls	r3, r3, #4
    985a:	2400      	movs	r4, #0
    985c:	e02e      	b.n	98bc <grid_port_process_ui+0x88>
				if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    985e:	f8da 9004 	ldr.w	r9, [sl, #4]
    9862:	4499      	add	r9, r3
    9864:	fb0e f000 	mul.w	r0, lr, r0
    9868:	f8d9 900c 	ldr.w	r9, [r9, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    986c:	4491      	add	r9, r2
    986e:	3601      	adds	r6, #1
    9870:	f8d9 9060 	ldr.w	r9, [r9, #96]	; 0x60
    9874:	4481      	add	r9, r0
    9876:	f899 9009 	ldrb.w	r9, [r9, #9]
    987a:	f1b9 0f05 	cmp.w	r9, #5
				if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    987e:	f8da 9004 	ldr.w	r9, [sl, #4]
    9882:	4499      	add	r9, r3
					message_broadcast_action_available++;
    9884:	bf08      	it	eq
    9886:	3501      	addeq	r5, #1
				if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    9888:	f8d9 900c 	ldr.w	r9, [r9, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    988c:	4491      	add	r9, r2
					message_broadcast_action_available++;
    988e:	bf08      	it	eq
    9890:	b2ed      	uxtbeq	r5, r5
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    9892:	f8d9 9060 	ldr.w	r9, [r9, #96]	; 0x60
    9896:	4448      	add	r0, r9
    9898:	7a40      	ldrb	r0, [r0, #9]
    989a:	2806      	cmp	r0, #6
                    message_local_action_available++;
    989c:	bf04      	itt	eq
    989e:	f108 0801 	addeq.w	r8, r8, #1
    98a2:	fa5f f888 	uxtbeq.w	r8, r8
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    98a6:	f8da 0004 	ldr.w	r0, [sl, #4]
    98aa:	4418      	add	r0, r3
    98ac:	68c0      	ldr	r0, [r0, #12]
    98ae:	4410      	add	r0, r2
    98b0:	f890 905c 	ldrb.w	r9, [r0, #92]	; 0x5c
    98b4:	b2f0      	uxtb	r0, r6
    98b6:	4581      	cmp	r9, r0
    98b8:	d8d1      	bhi.n	985e <grid_port_process_ui+0x2a>
		for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    98ba:	3401      	adds	r4, #1
    98bc:	f8da 2004 	ldr.w	r2, [sl, #4]
    98c0:	441a      	add	r2, r3
    98c2:	7a50      	ldrb	r0, [r2, #9]
    98c4:	b2e2      	uxtb	r2, r4
    98c6:	4290      	cmp	r0, r2
    98c8:	d903      	bls.n	98d2 <grid_port_process_ui+0x9e>
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    98ca:	fb0c f202 	mul.w	r2, ip, r2
    98ce:	2600      	movs	r6, #0
    98d0:	e7e9      	b.n	98a6 <grid_port_process_ui+0x72>
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    98d2:	3101      	adds	r1, #1
    98d4:	e7bc      	b.n	9850 <grid_port_process_ui+0x1c>
			if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    98d6:	6870      	ldr	r0, [r6, #4]
    98d8:	68c0      	ldr	r0, [r0, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    98da:	eb00 0e03 	add.w	lr, r0, r3
    98de:	3201      	adds	r2, #1
    98e0:	f8de 0060 	ldr.w	r0, [lr, #96]	; 0x60
    98e4:	fb0c 0009 	mla	r0, ip, r9, r0
    98e8:	7a40      	ldrb	r0, [r0, #9]
    98ea:	2805      	cmp	r0, #5
				message_broadcast_action_available++;
    98ec:	bf04      	itt	eq
    98ee:	3501      	addeq	r5, #1
    98f0:	b2ed      	uxtbeq	r5, r5
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    98f2:	6870      	ldr	r0, [r6, #4]
    98f4:	68c0      	ldr	r0, [r0, #12]
    98f6:	4418      	add	r0, r3
    98f8:	fa5f f982 	uxtb.w	r9, r2
    98fc:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    9900:	4548      	cmp	r0, r9
    9902:	d8e8      	bhi.n	98d6 <grid_port_process_ui+0xa2>
	for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    9904:	3101      	adds	r1, #1
    9906:	6863      	ldr	r3, [r4, #4]
    9908:	7a5a      	ldrb	r2, [r3, #9]
    990a:	b2cb      	uxtb	r3, r1
    990c:	429a      	cmp	r2, r3
    990e:	d909      	bls.n	9924 <grid_port_process_ui+0xf0>
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    9910:	437b      	muls	r3, r7
    9912:	2200      	movs	r2, #0
    9914:	e7ed      	b.n	98f2 <grid_port_process_ui+0xbe>
	for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    9916:	4c7b      	ldr	r4, [pc, #492]	; (9b04 <grid_port_process_ui+0x2d0>)
    9918:	2100      	movs	r1, #0
    991a:	4626      	mov	r6, r4
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    991c:	2764      	movs	r7, #100	; 0x64
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    991e:	f44f 7c86 	mov.w	ip, #268	; 0x10c
    9922:	e7f0      	b.n	9906 <grid_port_process_ui+0xd2>
	struct grid_port* port[4] = {&GRID_PORT_N, &GRID_PORT_E, &GRID_PORT_S, &GRID_PORT_W};
    9924:	4b78      	ldr	r3, [pc, #480]	; (9b08 <grid_port_process_ui+0x2d4>)
    9926:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9928:	ae07      	add	r6, sp, #28
    992a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    992e:	2404      	movs	r4, #4
		if (port[k]->ping_flag == 1){
    9930:	f856 7b04 	ldr.w	r7, [r6], #4
    9934:	f642 7348 	movw	r3, #12104	; 0x2f48
    9938:	5cfb      	ldrb	r3, [r7, r3]
    993a:	2b01      	cmp	r3, #1
    993c:	d11f      	bne.n	997e <grid_port_process_ui+0x14a>
			if (grid_buffer_write_init(&port[k]->tx_buffer, port[k]->ping_packet_length)){
    993e:	f642 7347 	movw	r3, #12103	; 0x2f47
    9942:	f507 591c 	add.w	r9, r7, #9984	; 0x2700
    9946:	f109 093c 	add.w	r9, r9, #60	; 0x3c
    994a:	18fa      	adds	r2, r7, r3
    994c:	5cf9      	ldrb	r1, [r7, r3]
    994e:	4b6f      	ldr	r3, [pc, #444]	; (9b0c <grid_port_process_ui+0x2d8>)
    9950:	9202      	str	r2, [sp, #8]
    9952:	4648      	mov	r0, r9
    9954:	4798      	blx	r3
    9956:	b170      	cbz	r0, 9976 <grid_port_process_ui+0x142>
				for(uint32_t i = 0; i<port[k]->ping_packet_length; i++){
    9958:	4b6d      	ldr	r3, [pc, #436]	; (9b10 <grid_port_process_ui+0x2dc>)
    995a:	f507 5b3c 	add.w	fp, r7, #12032	; 0x2f00
    995e:	f10b 0b33 	add.w	fp, fp, #51	; 0x33
    9962:	1bdb      	subs	r3, r3, r7
    9964:	9a02      	ldr	r2, [sp, #8]
    9966:	7811      	ldrb	r1, [r2, #0]
    9968:	eb03 020b 	add.w	r2, r3, fp
    996c:	4291      	cmp	r1, r2
    996e:	d826      	bhi.n	99be <grid_port_process_ui+0x18a>
				grid_buffer_write_acknowledge(&port[k]->tx_buffer);
    9970:	4b68      	ldr	r3, [pc, #416]	; (9b14 <grid_port_process_ui+0x2e0>)
    9972:	4648      	mov	r0, r9
    9974:	4798      	blx	r3
			port[k]->ping_flag = 0;
    9976:	f642 7248 	movw	r2, #12104	; 0x2f48
    997a:	2300      	movs	r3, #0
    997c:	54bb      	strb	r3, [r7, r2]
	for (uint8_t k = 0; k<4; k++){
    997e:	3c01      	subs	r4, #1
    9980:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    9984:	d1d4      	bne.n	9930 <grid_port_process_ui+0xfc>
	if (message_local_action_available){
    9986:	f1b8 0f00 	cmp.w	r8, #0
    998a:	d07f      	beq.n	9a8c <grid_port_process_ui+0x258>
		grid_msg_init(&message);
    998c:	4b62      	ldr	r3, [pc, #392]	; (9b18 <grid_port_process_ui+0x2e4>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    998e:	4e63      	ldr	r6, [pc, #396]	; (9b1c <grid_port_process_ui+0x2e8>)
		grid_msg_init(&message);
    9990:	a86f      	add	r0, sp, #444	; 0x1bc
    9992:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9994:	227f      	movs	r2, #127	; 0x7f
    9996:	4611      	mov	r1, r2
    9998:	4623      	mov	r3, r4
    999a:	a86f      	add	r0, sp, #444	; 0x1bc
    999c:	47b0      	blx	r6
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};				
    999e:	4b60      	ldr	r3, [pc, #384]	; (9b20 <grid_port_process_ui+0x2ec>)
    99a0:	940b      	str	r4, [sp, #44]	; 0x2c
    99a2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    99a6:	4621      	mov	r1, r4
    99a8:	a80c      	add	r0, sp, #48	; 0x30
    99aa:	4798      	blx	r3
		uint32_t offset=0;
    99ac:	46a0      	mov	r8, r4
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++)
    99ae:	f89a 3001 	ldrb.w	r3, [sl, #1]
    99b2:	b2e6      	uxtb	r6, r4
    99b4:	42b3      	cmp	r3, r6
    99b6:	d957      	bls.n	9a68 <grid_port_process_ui+0x234>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    99b8:	0136      	lsls	r6, r6, #4
    99ba:	2300      	movs	r3, #0
    99bc:	e044      	b.n	9a48 <grid_port_process_ui+0x214>
    99be:	9303      	str	r3, [sp, #12]
					grid_buffer_write_character(&port[k]->tx_buffer, port[k]->ping_packet[i]);
    99c0:	f81b 1b01 	ldrb.w	r1, [fp], #1
    99c4:	4b57      	ldr	r3, [pc, #348]	; (9b24 <grid_port_process_ui+0x2f0>)
    99c6:	4648      	mov	r0, r9
    99c8:	4798      	blx	r3
    99ca:	9b03      	ldr	r3, [sp, #12]
				for(uint32_t i = 0; i<port[k]->ping_packet_length; i++){
    99cc:	e7ca      	b.n	9964 <grid_port_process_ui+0x130>
					if (offset>GRID_PARAMETER_PACKET_marign){
    99ce:	f1b8 0fc8 	cmp.w	r8, #200	; 0xc8
    99d2:	d82a      	bhi.n	9a2a <grid_port_process_ui+0x1f6>
						CRITICAL_SECTION_ENTER()
    99d4:	4b54      	ldr	r3, [pc, #336]	; (9b28 <grid_port_process_ui+0x2f4>)
    99d6:	a805      	add	r0, sp, #20
    99d8:	4798      	blx	r3
						if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    99da:	f8da 3004 	ldr.w	r3, [sl, #4]
    99de:	4433      	add	r3, r6
    99e0:	f44f 7286 	mov.w	r2, #268	; 0x10c
    99e4:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    99e6:	443b      	add	r3, r7
						if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    99e8:	fb02 fb0b 	mul.w	fp, r2, fp
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    99ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    99ee:	445b      	add	r3, fp
    99f0:	7a5b      	ldrb	r3, [r3, #9]
    99f2:	2b06      	cmp	r3, #6
    99f4:	d116      	bne.n	9a24 <grid_port_process_ui+0x1f0>
                            offset += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &payload[offset]);
    99f6:	f8da 3004 	ldr.w	r3, [sl, #4]
    99fa:	4433      	add	r3, r6
    99fc:	68db      	ldr	r3, [r3, #12]
    99fe:	443b      	add	r3, r7
    9a00:	6e18      	ldr	r0, [r3, #96]	; 0x60
    9a02:	ab0b      	add	r3, sp, #44	; 0x2c
    9a04:	eb03 0108 	add.w	r1, r3, r8
    9a08:	4458      	add	r0, fp
    9a0a:	4b48      	ldr	r3, [pc, #288]	; (9b2c <grid_port_process_ui+0x2f8>)
    9a0c:	4798      	blx	r3
                            grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    9a0e:	f8da 3004 	ldr.w	r3, [sl, #4]
    9a12:	4433      	add	r3, r6
                            offset += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &payload[offset]);
    9a14:	4480      	add	r8, r0
                            grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    9a16:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    9a18:	443b      	add	r3, r7
    9a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9a1c:	449b      	add	fp, r3
    9a1e:	2304      	movs	r3, #4
    9a20:	f88b 3009 	strb.w	r3, [fp, #9]
						CRITICAL_SECTION_LEAVE()
    9a24:	4b42      	ldr	r3, [pc, #264]	; (9b30 <grid_port_process_ui+0x2fc>)
    9a26:	a805      	add	r0, sp, #20
    9a28:	4798      	blx	r3
                for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    9a2a:	f109 0901 	add.w	r9, r9, #1
    9a2e:	f8da 3004 	ldr.w	r3, [sl, #4]
    9a32:	4433      	add	r3, r6
    9a34:	fa5f fb89 	uxtb.w	fp, r9
    9a38:	68db      	ldr	r3, [r3, #12]
    9a3a:	443b      	add	r3, r7
    9a3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    9a40:	455b      	cmp	r3, fp
    9a42:	d8c4      	bhi.n	99ce <grid_port_process_ui+0x19a>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    9a44:	9b02      	ldr	r3, [sp, #8]
    9a46:	3301      	adds	r3, #1
    9a48:	9302      	str	r3, [sp, #8]
    9a4a:	f8da 3004 	ldr.w	r3, [sl, #4]
    9a4e:	4433      	add	r3, r6
    9a50:	7a5a      	ldrb	r2, [r3, #9]
    9a52:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9a56:	429a      	cmp	r2, r3
    9a58:	d904      	bls.n	9a64 <grid_port_process_ui+0x230>
                for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    9a5a:	2764      	movs	r7, #100	; 0x64
    9a5c:	435f      	muls	r7, r3
    9a5e:	f04f 0900 	mov.w	r9, #0
    9a62:	e7e4      	b.n	9a2e <grid_port_process_ui+0x1fa>
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++)
    9a64:	3401      	adds	r4, #1
    9a66:	e7a2      	b.n	99ae <grid_port_process_ui+0x17a>
		grid_msg_body_append_text(&message, payload, offset);
    9a68:	a90b      	add	r1, sp, #44	; 0x2c
    9a6a:	4642      	mov	r2, r8
    9a6c:	4b31      	ldr	r3, [pc, #196]	; (9b34 <grid_port_process_ui+0x300>)
    9a6e:	a86f      	add	r0, sp, #444	; 0x1bc
    9a70:	4798      	blx	r3
		grid_msg_packet_close(&message);
    9a72:	4b31      	ldr	r3, [pc, #196]	; (9b38 <grid_port_process_ui+0x304>)
    9a74:	a86f      	add	r0, sp, #444	; 0x1bc
    9a76:	4798      	blx	r3
		uint32_t message_length = grid_msg_packet_get_length(&message);
    9a78:	4b30      	ldr	r3, [pc, #192]	; (9b3c <grid_port_process_ui+0x308>)
    9a7a:	a86f      	add	r0, sp, #444	; 0x1bc
    9a7c:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, message_length)){
    9a7e:	4b23      	ldr	r3, [pc, #140]	; (9b0c <grid_port_process_ui+0x2d8>)
		uint32_t message_length = grid_msg_packet_get_length(&message);
    9a80:	4604      	mov	r4, r0
		if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, message_length)){
    9a82:	b281      	uxth	r1, r0
    9a84:	482e      	ldr	r0, [pc, #184]	; (9b40 <grid_port_process_ui+0x30c>)
    9a86:	4798      	blx	r3
    9a88:	2800      	cmp	r0, #0
    9a8a:	d132      	bne.n	9af2 <grid_port_process_ui+0x2be>
	if (por->cooldown > 0){
    9a8c:	9b01      	ldr	r3, [sp, #4]
    9a8e:	681b      	ldr	r3, [r3, #0]
    9a90:	b12b      	cbz	r3, 9a9e <grid_port_process_ui+0x26a>
		por->cooldown--;
    9a92:	3b01      	subs	r3, #1
    9a94:	9a01      	ldr	r2, [sp, #4]
	if (por->cooldown > 10){
    9a96:	2b0a      	cmp	r3, #10
		por->cooldown--;
    9a98:	6013      	str	r3, [r2, #0]
	if (por->cooldown > 10){
    9a9a:	f200 80fd 	bhi.w	9c98 <grid_port_process_ui+0x464>
	if (message_broadcast_action_available){
    9a9e:	2d00      	cmp	r5, #0
    9aa0:	f000 80fa 	beq.w	9c98 <grid_port_process_ui+0x464>
		grid_msg_init(&message);
    9aa4:	4b1c      	ldr	r3, [pc, #112]	; (9b18 <grid_port_process_ui+0x2e4>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9aa6:	4c1d      	ldr	r4, [pc, #116]	; (9b1c <grid_port_process_ui+0x2e8>)
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    9aa8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 9b04 <grid_port_process_ui+0x2d0>
		grid_msg_init(&message);
    9aac:	a86f      	add	r0, sp, #444	; 0x1bc
    9aae:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9ab0:	227f      	movs	r2, #127	; 0x7f
    9ab2:	2300      	movs	r3, #0
    9ab4:	4611      	mov	r1, r2
    9ab6:	a86f      	add	r0, sp, #444	; 0x1bc
    9ab8:	47a0      	blx	r4
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    9aba:	2700      	movs	r7, #0
    9abc:	4645      	mov	r5, r8
    9abe:	f8d8 3004 	ldr.w	r3, [r8, #4]
    9ac2:	7a5a      	ldrb	r2, [r3, #9]
    9ac4:	b2fb      	uxtb	r3, r7
    9ac6:	429a      	cmp	r2, r3
    9ac8:	f240 80d3 	bls.w	9c72 <grid_port_process_ui+0x43e>
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    9acc:	2464      	movs	r4, #100	; 0x64
					CRITICAL_SECTION_LEAVE()
    9ace:	f8df b060 	ldr.w	fp, [pc, #96]	; 9b30 <grid_port_process_ui+0x2fc>
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    9ad2:	435c      	muls	r4, r3
    9ad4:	2600      	movs	r6, #0
    9ad6:	e067      	b.n	9ba8 <grid_port_process_ui+0x374>
				grid_buffer_write_character(&GRID_PORT_U.tx_buffer, grid_msg_packet_send_char(&message, i));
    9ad8:	4631      	mov	r1, r6
    9ada:	a86f      	add	r0, sp, #444	; 0x1bc
    9adc:	47b8      	blx	r7
    9ade:	4601      	mov	r1, r0
    9ae0:	4640      	mov	r0, r8
    9ae2:	47c8      	blx	r9
			for(uint32_t i = 0; i<message_length; i++){
    9ae4:	3601      	adds	r6, #1
    9ae6:	42a6      	cmp	r6, r4
    9ae8:	d1f6      	bne.n	9ad8 <grid_port_process_ui+0x2a4>
			grid_buffer_write_acknowledge(&GRID_PORT_U.tx_buffer);
    9aea:	4b0a      	ldr	r3, [pc, #40]	; (9b14 <grid_port_process_ui+0x2e0>)
    9aec:	4814      	ldr	r0, [pc, #80]	; (9b40 <grid_port_process_ui+0x30c>)
    9aee:	4798      	blx	r3
		}
    9af0:	e7cc      	b.n	9a8c <grid_port_process_ui+0x258>
				grid_buffer_write_character(&GRID_PORT_U.tx_buffer, grid_msg_packet_send_char(&message, i));
    9af2:	4f14      	ldr	r7, [pc, #80]	; (9b44 <grid_port_process_ui+0x310>)
    9af4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 9b40 <grid_port_process_ui+0x30c>
    9af8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9b24 <grid_port_process_ui+0x2f0>
			for(uint32_t i = 0; i<message_length; i++){
    9afc:	2600      	movs	r6, #0
    9afe:	e7f2      	b.n	9ae6 <grid_port_process_ui+0x2b2>
    9b00:	20006f88 	.word	0x20006f88
    9b04:	2001454c 	.word	0x2001454c
    9b08:	00014bf0 	.word	0x00014bf0
    9b0c:	00004839 	.word	0x00004839
    9b10:	ffffd0cd 	.word	0xffffd0cd
    9b14:	00004895 	.word	0x00004895
    9b18:	00007d8d 	.word	0x00007d8d
    9b1c:	00007dc1 	.word	0x00007dc1
    9b20:	00012519 	.word	0x00012519
    9b24:	00004875 	.word	0x00004875
    9b28:	00010d8d 	.word	0x00010d8d
    9b2c:	000097ef 	.word	0x000097ef
    9b30:	00010d9b 	.word	0x00010d9b
    9b34:	00007cfd 	.word	0x00007cfd
    9b38:	00007eb9 	.word	0x00007eb9
    9b3c:	00007ce9 	.word	0x00007ce9
    9b40:	20006778 	.word	0x20006778
    9b44:	00007e83 	.word	0x00007e83
				if (grid_msg_packet_get_length(&message)>GRID_PARAMETER_PACKET_marign){
    9b48:	4b5f      	ldr	r3, [pc, #380]	; (9cc8 <grid_port_process_ui+0x494>)
    9b4a:	a86f      	add	r0, sp, #444	; 0x1bc
    9b4c:	4798      	blx	r3
    9b4e:	28c8      	cmp	r0, #200	; 0xc8
    9b50:	d829      	bhi.n	9ba6 <grid_port_process_ui+0x372>
					CRITICAL_SECTION_ENTER()
    9b52:	4b5e      	ldr	r3, [pc, #376]	; (9ccc <grid_port_process_ui+0x498>)
    9b54:	a806      	add	r0, sp, #24
    9b56:	4798      	blx	r3
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    9b58:	686b      	ldr	r3, [r5, #4]
    9b5a:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    9b5c:	4423      	add	r3, r4
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    9b5e:	f44f 7286 	mov.w	r2, #268	; 0x10c
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    9b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    9b64:	fb02 f909 	mul.w	r9, r2, r9
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    9b68:	444b      	add	r3, r9
    9b6a:	7a5b      	ldrb	r3, [r3, #9]
    9b6c:	2b05      	cmp	r3, #5
    9b6e:	d118      	bne.n	9ba2 <grid_port_process_ui+0x36e>
						uint32_t offset = grid_msg_body_get_length(&message); 
    9b70:	4b57      	ldr	r3, [pc, #348]	; (9cd0 <grid_port_process_ui+0x49c>)
    9b72:	a86f      	add	r0, sp, #444	; 0x1bc
    9b74:	4798      	blx	r3
						message.body_length += grid_ui_event_render_action(&grid_core_state.bank_list[0].element_list[i].event_list[j], &message.body[offset]);
    9b76:	686b      	ldr	r3, [r5, #4]
    9b78:	68db      	ldr	r3, [r3, #12]
    9b7a:	4423      	add	r3, r4
    9b7c:	3014      	adds	r0, #20
    9b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9b80:	aa6f      	add	r2, sp, #444	; 0x1bc
    9b82:	1811      	adds	r1, r2, r0
    9b84:	eb03 0009 	add.w	r0, r3, r9
    9b88:	4b52      	ldr	r3, [pc, #328]	; (9cd4 <grid_port_process_ui+0x4a0>)
    9b8a:	4798      	blx	r3
    9b8c:	9bd4      	ldr	r3, [sp, #848]	; 0x350
    9b8e:	4418      	add	r0, r3
						grid_ui_event_reset(&grid_core_state.bank_list[0].element_list[i].event_list[j]);
    9b90:	686b      	ldr	r3, [r5, #4]
						message.body_length += grid_ui_event_render_action(&grid_core_state.bank_list[0].element_list[i].event_list[j], &message.body[offset]);
    9b92:	90d4      	str	r0, [sp, #848]	; 0x350
						grid_ui_event_reset(&grid_core_state.bank_list[0].element_list[i].event_list[j]);
    9b94:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    9b96:	4423      	add	r3, r4
    9b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9b9a:	4499      	add	r9, r3
    9b9c:	2304      	movs	r3, #4
    9b9e:	f889 3009 	strb.w	r3, [r9, #9]
					CRITICAL_SECTION_LEAVE()
    9ba2:	a806      	add	r0, sp, #24
    9ba4:	47d8      	blx	fp
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    9ba6:	3601      	adds	r6, #1
    9ba8:	686b      	ldr	r3, [r5, #4]
    9baa:	68db      	ldr	r3, [r3, #12]
    9bac:	4423      	add	r3, r4
    9bae:	fa5f f986 	uxtb.w	r9, r6
    9bb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    9bb6:	454b      	cmp	r3, r9
    9bb8:	d8c6      	bhi.n	9b48 <grid_port_process_ui+0x314>
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    9bba:	3701      	adds	r7, #1
    9bbc:	e77f      	b.n	9abe <grid_port_process_ui+0x28a>
					if (grid_msg_packet_get_length(&message)>GRID_PARAMETER_PACKET_marign){
    9bbe:	4b42      	ldr	r3, [pc, #264]	; (9cc8 <grid_port_process_ui+0x494>)
    9bc0:	a86f      	add	r0, sp, #444	; 0x1bc
    9bc2:	4798      	blx	r3
    9bc4:	28c8      	cmp	r0, #200	; 0xc8
    9bc6:	d82f      	bhi.n	9c28 <grid_port_process_ui+0x3f4>
						CRITICAL_SECTION_ENTER()
    9bc8:	4b40      	ldr	r3, [pc, #256]	; (9ccc <grid_port_process_ui+0x498>)
    9bca:	a80b      	add	r0, sp, #44	; 0x2c
    9bcc:	4798      	blx	r3
						if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    9bce:	f8da 3004 	ldr.w	r3, [sl, #4]
    9bd2:	4423      	add	r3, r4
    9bd4:	f44f 7286 	mov.w	r2, #268	; 0x10c
    9bd8:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    9bda:	442b      	add	r3, r5
						if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    9bdc:	fb02 f909 	mul.w	r9, r2, r9
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    9be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9be2:	444b      	add	r3, r9
    9be4:	7a5b      	ldrb	r3, [r3, #9]
    9be6:	2b05      	cmp	r3, #5
    9be8:	d11c      	bne.n	9c24 <grid_port_process_ui+0x3f0>
							uint32_t offset = grid_msg_body_get_length(&message); 
    9bea:	4b39      	ldr	r3, [pc, #228]	; (9cd0 <grid_port_process_ui+0x49c>)
    9bec:	a86f      	add	r0, sp, #444	; 0x1bc
    9bee:	4798      	blx	r3
							message.body_length += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &message.body[offset]);
    9bf0:	f8da 3004 	ldr.w	r3, [sl, #4]
    9bf4:	4423      	add	r3, r4
    9bf6:	3014      	adds	r0, #20
    9bf8:	68db      	ldr	r3, [r3, #12]
    9bfa:	442b      	add	r3, r5
    9bfc:	aa6f      	add	r2, sp, #444	; 0x1bc
    9bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9c00:	1811      	adds	r1, r2, r0
    9c02:	eb03 0009 	add.w	r0, r3, r9
    9c06:	4b33      	ldr	r3, [pc, #204]	; (9cd4 <grid_port_process_ui+0x4a0>)
    9c08:	4798      	blx	r3
    9c0a:	9bd4      	ldr	r3, [sp, #848]	; 0x350
    9c0c:	4418      	add	r0, r3
							grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    9c0e:	f8da 3004 	ldr.w	r3, [sl, #4]
							message.body_length += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &message.body[offset]);
    9c12:	90d4      	str	r0, [sp, #848]	; 0x350
							grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    9c14:	4423      	add	r3, r4
    9c16:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    9c18:	442b      	add	r3, r5
    9c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9c1c:	4499      	add	r9, r3
    9c1e:	2304      	movs	r3, #4
    9c20:	f889 3009 	strb.w	r3, [r9, #9]
						CRITICAL_SECTION_LEAVE()
    9c24:	a80b      	add	r0, sp, #44	; 0x2c
    9c26:	47d8      	blx	fp
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    9c28:	f108 0801 	add.w	r8, r8, #1
    9c2c:	f8da 3004 	ldr.w	r3, [sl, #4]
    9c30:	4423      	add	r3, r4
    9c32:	fa5f f988 	uxtb.w	r9, r8
    9c36:	68db      	ldr	r3, [r3, #12]
    9c38:	442b      	add	r3, r5
    9c3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    9c3e:	454b      	cmp	r3, r9
    9c40:	d8bd      	bhi.n	9bbe <grid_port_process_ui+0x38a>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    9c42:	3601      	adds	r6, #1
    9c44:	f8da 3004 	ldr.w	r3, [sl, #4]
    9c48:	4423      	add	r3, r4
    9c4a:	7a5a      	ldrb	r2, [r3, #9]
    9c4c:	b2f3      	uxtb	r3, r6
    9c4e:	429a      	cmp	r2, r3
    9c50:	d906      	bls.n	9c60 <grid_port_process_ui+0x42c>
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    9c52:	2564      	movs	r5, #100	; 0x64
						CRITICAL_SECTION_LEAVE()
    9c54:	f8df b094 	ldr.w	fp, [pc, #148]	; 9cec <grid_port_process_ui+0x4b8>
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    9c58:	435d      	muls	r5, r3
    9c5a:	f04f 0800 	mov.w	r8, #0
    9c5e:	e7e5      	b.n	9c2c <grid_port_process_ui+0x3f8>
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    9c60:	3701      	adds	r7, #1
    9c62:	f89a 3001 	ldrb.w	r3, [sl, #1]
    9c66:	b2fc      	uxtb	r4, r7
    9c68:	42a3      	cmp	r3, r4
    9c6a:	d904      	bls.n	9c76 <grid_port_process_ui+0x442>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    9c6c:	0124      	lsls	r4, r4, #4
    9c6e:	2600      	movs	r6, #0
    9c70:	e7e8      	b.n	9c44 <grid_port_process_ui+0x410>
    9c72:	2700      	movs	r7, #0
    9c74:	e7f5      	b.n	9c62 <grid_port_process_ui+0x42e>
		por->cooldown += 10;
    9c76:	9b01      	ldr	r3, [sp, #4]
    9c78:	9a01      	ldr	r2, [sp, #4]
    9c7a:	681b      	ldr	r3, [r3, #0]
    9c7c:	330a      	adds	r3, #10
    9c7e:	6013      	str	r3, [r2, #0]
		grid_msg_packet_close(&message);
    9c80:	a86f      	add	r0, sp, #444	; 0x1bc
    9c82:	4b15      	ldr	r3, [pc, #84]	; (9cd8 <grid_port_process_ui+0x4a4>)
    9c84:	4798      	blx	r3
		uint32_t length = grid_msg_packet_get_length(&message);
    9c86:	4b10      	ldr	r3, [pc, #64]	; (9cc8 <grid_port_process_ui+0x494>)
    9c88:	a86f      	add	r0, sp, #444	; 0x1bc
    9c8a:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    9c8c:	4b13      	ldr	r3, [pc, #76]	; (9cdc <grid_port_process_ui+0x4a8>)
		uint32_t length = grid_msg_packet_get_length(&message);
    9c8e:	4604      	mov	r4, r0
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    9c90:	b281      	uxth	r1, r0
    9c92:	4813      	ldr	r0, [pc, #76]	; (9ce0 <grid_port_process_ui+0x4ac>)
    9c94:	4798      	blx	r3
    9c96:	b988      	cbnz	r0, 9cbc <grid_port_process_ui+0x488>
}
    9c98:	f50d 7d57 	add.w	sp, sp, #860	; 0x35c
    9c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(&message, i));
    9ca0:	a86f      	add	r0, sp, #444	; 0x1bc
    9ca2:	47b0      	blx	r6
    9ca4:	4601      	mov	r1, r0
    9ca6:	4638      	mov	r0, r7
    9ca8:	47c0      	blx	r8
			for(uint16_t i = 0; i<length; i++){
    9caa:	b2a9      	uxth	r1, r5
    9cac:	428c      	cmp	r4, r1
    9cae:	f105 0501 	add.w	r5, r5, #1
    9cb2:	d8f5      	bhi.n	9ca0 <grid_port_process_ui+0x46c>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    9cb4:	4b0b      	ldr	r3, [pc, #44]	; (9ce4 <grid_port_process_ui+0x4b0>)
    9cb6:	480a      	ldr	r0, [pc, #40]	; (9ce0 <grid_port_process_ui+0x4ac>)
    9cb8:	4798      	blx	r3
		}
    9cba:	e7ed      	b.n	9c98 <grid_port_process_ui+0x464>
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(&message, i));
    9cbc:	4e0a      	ldr	r6, [pc, #40]	; (9ce8 <grid_port_process_ui+0x4b4>)
    9cbe:	4f08      	ldr	r7, [pc, #32]	; (9ce0 <grid_port_process_ui+0x4ac>)
    9cc0:	f8df 802c 	ldr.w	r8, [pc, #44]	; 9cf0 <grid_port_process_ui+0x4bc>
    9cc4:	2500      	movs	r5, #0
    9cc6:	e7f0      	b.n	9caa <grid_port_process_ui+0x476>
    9cc8:	00007ce9 	.word	0x00007ce9
    9ccc:	00010d8d 	.word	0x00010d8d
    9cd0:	00007cf7 	.word	0x00007cf7
    9cd4:	000097ef 	.word	0x000097ef
    9cd8:	00007eb9 	.word	0x00007eb9
    9cdc:	00004839 	.word	0x00004839
    9ce0:	20006b70 	.word	0x20006b70
    9ce4:	00004895 	.word	0x00004895
    9ce8:	00007e83 	.word	0x00007e83
    9cec:	00010d9b 	.word	0x00010d9b
    9cf0:	00004875 	.word	0x00004875

00009cf4 <grid_ui_event_template_action>:

uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
    9cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	if (event_index == 255){
    9cf8:	29ff      	cmp	r1, #255	; 0xff
uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
    9cfa:	b085      	sub	sp, #20
    9cfc:	4604      	mov	r4, r0
	if (event_index == 255){
    9cfe:	d01e      	beq.n	9d3e <grid_ui_event_template_action+0x4a>
		
		return;
	}
	
	// TEMPLATE EVENT
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    9d00:	f44f 7586 	mov.w	r5, #268	; 0x10c
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
				
			uint8_t error = 0;
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    9d04:	f8df 8220 	ldr.w	r8, [pc, #544]	; 9f28 <grid_ui_event_template_action+0x234>
			}
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
				parameter_value = grid_sys_state.mapmodestate;
			}
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    9d08:	4e82      	ldr	r6, [pc, #520]	; (9f14 <grid_ui_event_template_action+0x220>)
    9d0a:	f8df 9220 	ldr.w	r9, [pc, #544]	; 9f2c <grid_ui_event_template_action+0x238>
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    9d0e:	434d      	muls	r5, r1
    9d10:	2700      	movs	r7, #0
    9d12:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9d14:	4428      	add	r0, r5
    9d16:	fa5f fb87 	uxtb.w	fp, r7
    9d1a:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    9d1e:	455b      	cmp	r3, fp
    9d20:	d811      	bhi.n	9d46 <grid_ui_event_template_action+0x52>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
			
			uint8_t error = 0;
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    9d22:	f8df 8204 	ldr.w	r8, [pc, #516]	; 9f28 <grid_ui_event_template_action+0x234>
			}
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
				parameter_value = grid_sys_state.mapmodestate;
			}
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    9d26:	4e7b      	ldr	r6, [pc, #492]	; (9f14 <grid_ui_event_template_action+0x220>)
    9d28:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9f2c <grid_ui_event_template_action+0x238>
    9d2c:	2700      	movs	r7, #0
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    9d2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9d30:	4428      	add	r0, r5
    9d32:	fa5f fb87 	uxtb.w	fp, r7
    9d36:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    9d3a:	455b      	cmp	r3, fp
    9d3c:	d876      	bhi.n	9e2c <grid_ui_event_template_action+0x138>
	
	
	
	
	
}
    9d3e:	2000      	movs	r0, #0
    9d40:	b005      	add	sp, #20
    9d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ele->event_list[event_index].event_parameter_list[i].group == 'P' || ele->event_list[event_index].event_parameter_list[i].group == 'B'){
    9d46:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
    9d4a:	4403      	add	r3, r0
    9d4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    9d50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    9d54:	2b50      	cmp	r3, #80	; 0x50
    9d56:	d001      	beq.n	9d5c <grid_ui_event_template_action+0x68>
    9d58:	2b42      	cmp	r3, #66	; 0x42
    9d5a:	d114      	bne.n	9d86 <grid_ui_event_template_action+0x92>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    9d5c:	eb0a 030b 	add.w	r3, sl, fp
    9d60:	4403      	add	r3, r0
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    9d62:	3010      	adds	r0, #16
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    9d64:	f893 c031 	ldrb.w	ip, [r3, #49]	; 0x31
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    9d68:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    9d6c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
			uint8_t error = 0;
    9d70:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    9d72:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    9d76:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    9d7a:	f10d 030f 	add.w	r3, sp, #15
    9d7e:	9300      	str	r3, [sp, #0]
    9d80:	f8dc 300c 	ldr.w	r3, [ip, #12]
    9d84:	47c0      	blx	r8
		if (ele->event_list[event_index].event_parameter_list[i].group == 'E'){
    9d86:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9d88:	eb0a 030b 	add.w	r3, sl, fp
    9d8c:	4428      	add	r0, r5
    9d8e:	4403      	add	r3, r0
    9d90:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    9d94:	2a45      	cmp	r2, #69	; 0x45
    9d96:	d113      	bne.n	9dc0 <grid_ui_event_template_action+0xcc>
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].event_parameter_list[i].address];
    9d98:	f893 c031 	ldrb.w	ip, [r3, #49]	; 0x31
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    9d9c:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    9da0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
			uint8_t error = 0;
    9da4:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].event_parameter_list[i].address];
    9da6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    9daa:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    9dae:	f10d 030f 	add.w	r3, sp, #15
    9db2:	9300      	str	r3, [sp, #0]
    9db4:	f8dc 3020 	ldr.w	r3, [ip, #32]
    9db8:	3010      	adds	r0, #16
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    9dba:	47c0      	blx	r8
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    9dbc:	3701      	adds	r7, #1
    9dbe:	e7a8      	b.n	9d12 <grid_ui_event_template_action+0x1e>
		else if (ele->event_list[event_index].event_parameter_list[i].group == 'Z'){
    9dc0:	2a5a      	cmp	r2, #90	; 0x5a
    9dc2:	d1fb      	bne.n	9dbc <grid_ui_event_template_action+0xc8>
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    9dc4:	f893 a033 	ldrb.w	sl, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    9dc8:	f893 b032 	ldrb.w	fp, [r3, #50]	; 0x32
			if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NUMBER_ACTIVE){
    9dcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    9dd0:	b98b      	cbnz	r3, 9df6 <grid_ui_event_template_action+0x102>
				parameter_value = grid_sys_get_bank_num(&grid_sys_state);
    9dd2:	4b51      	ldr	r3, [pc, #324]	; (9f18 <grid_ui_event_template_action+0x224>)
    9dd4:	4630      	mov	r0, r6
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    9dd6:	4798      	blx	r3
			uint8_t error = 0;
    9dd8:	2300      	movs	r3, #0
    9dda:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    9dde:	6e23      	ldr	r3, [r4, #96]	; 0x60
    9de0:	eb03 0c05 	add.w	ip, r3, r5
    9de4:	f10d 030f 	add.w	r3, sp, #15
    9de8:	9300      	str	r3, [sp, #0]
    9dea:	465a      	mov	r2, fp
    9dec:	4603      	mov	r3, r0
    9dee:	4651      	mov	r1, sl
    9df0:	f10c 0010 	add.w	r0, ip, #16
    9df4:	e7e1      	b.n	9dba <grid_ui_event_template_action+0xc6>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_RED){
    9df6:	2b01      	cmp	r3, #1
    9df8:	d102      	bne.n	9e00 <grid_ui_event_template_action+0x10c>
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    9dfa:	4b48      	ldr	r3, [pc, #288]	; (9f1c <grid_ui_event_template_action+0x228>)
    9dfc:	4630      	mov	r0, r6
    9dfe:	e7ea      	b.n	9dd6 <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_GRE){
    9e00:	2b02      	cmp	r3, #2
    9e02:	d102      	bne.n	9e0a <grid_ui_event_template_action+0x116>
				parameter_value = grid_sys_get_bank_gre(&grid_sys_state);
    9e04:	4b46      	ldr	r3, [pc, #280]	; (9f20 <grid_ui_event_template_action+0x22c>)
    9e06:	4630      	mov	r0, r6
    9e08:	e7e5      	b.n	9dd6 <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_BLU){
    9e0a:	2b03      	cmp	r3, #3
    9e0c:	d102      	bne.n	9e14 <grid_ui_event_template_action+0x120>
				parameter_value = grid_sys_get_bank_blu(&grid_sys_state);
    9e0e:	4b45      	ldr	r3, [pc, #276]	; (9f24 <grid_ui_event_template_action+0x230>)
    9e10:	4630      	mov	r0, r6
    9e12:	e7e0      	b.n	9dd6 <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
    9e14:	2b04      	cmp	r3, #4
    9e16:	d102      	bne.n	9e1e <grid_ui_event_template_action+0x12a>
				parameter_value = grid_sys_state.mapmodestate;
    9e18:	7c30      	ldrb	r0, [r6, #16]
    9e1a:	b2c0      	uxtb	r0, r0
    9e1c:	e7dc      	b.n	9dd8 <grid_ui_event_template_action+0xe4>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
    9e1e:	2b05      	cmp	r3, #5
    9e20:	d102      	bne.n	9e28 <grid_ui_event_template_action+0x134>
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    9e22:	4630      	mov	r0, r6
    9e24:	47c8      	blx	r9
    9e26:	e7d7      	b.n	9dd8 <grid_ui_event_template_action+0xe4>
			uint32_t parameter_value = 0;
    9e28:	2000      	movs	r0, #0
    9e2a:	e7d5      	b.n	9dd8 <grid_ui_event_template_action+0xe4>
		if (ele->event_list[event_index].action_parameter_list[i].group == 'P' || ele->event_list[event_index].action_parameter_list[i].group == 'B'){
    9e2c:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
    9e30:	4403      	add	r3, r0
    9e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    9e36:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    9e3a:	2b50      	cmp	r3, #80	; 0x50
    9e3c:	d001      	beq.n	9e42 <grid_ui_event_template_action+0x14e>
    9e3e:	2b42      	cmp	r3, #66	; 0x42
    9e40:	d114      	bne.n	9e6c <grid_ui_event_template_action+0x178>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    9e42:	eb0a 030b 	add.w	r3, sl, fp
    9e46:	4403      	add	r3, r0
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    9e48:	3048      	adds	r0, #72	; 0x48
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    9e4a:	f893 c0c3 	ldrb.w	ip, [r3, #195]	; 0xc3
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    9e4e:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    9e52:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
			uint8_t error = 0;
    9e56:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    9e58:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    9e5c:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    9e60:	f10d 030f 	add.w	r3, sp, #15
    9e64:	9300      	str	r3, [sp, #0]
    9e66:	f8dc 300c 	ldr.w	r3, [ip, #12]
    9e6a:	47c0      	blx	r8
		if (ele->event_list[event_index].action_parameter_list[i].group == 'E'){
    9e6c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9e6e:	eb0a 030b 	add.w	r3, sl, fp
    9e72:	4428      	add	r0, r5
    9e74:	4403      	add	r3, r0
    9e76:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    9e7a:	2a45      	cmp	r2, #69	; 0x45
    9e7c:	d113      	bne.n	9ea6 <grid_ui_event_template_action+0x1b2>
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].action_parameter_list[i].address];
    9e7e:	f893 c0c3 	ldrb.w	ip, [r3, #195]	; 0xc3
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    9e82:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    9e86:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
			uint8_t error = 0;
    9e8a:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].action_parameter_list[i].address];
    9e8c:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    9e90:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    9e94:	f10d 030f 	add.w	r3, sp, #15
    9e98:	9300      	str	r3, [sp, #0]
    9e9a:	f8dc 3020 	ldr.w	r3, [ip, #32]
    9e9e:	3048      	adds	r0, #72	; 0x48
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    9ea0:	47c0      	blx	r8
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    9ea2:	3701      	adds	r7, #1
    9ea4:	e743      	b.n	9d2e <grid_ui_event_template_action+0x3a>
		else if (ele->event_list[event_index].action_parameter_list[i].group == 'Z'){
    9ea6:	2a5a      	cmp	r2, #90	; 0x5a
    9ea8:	d1fb      	bne.n	9ea2 <grid_ui_event_template_action+0x1ae>
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    9eaa:	f893 a0c5 	ldrb.w	sl, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    9eae:	f893 b0c4 	ldrb.w	fp, [r3, #196]	; 0xc4
			if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NUMBER_ACTIVE){
    9eb2:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    9eb6:	b98b      	cbnz	r3, 9edc <grid_ui_event_template_action+0x1e8>
				parameter_value = grid_sys_get_bank_num(&grid_sys_state);
    9eb8:	4b17      	ldr	r3, [pc, #92]	; (9f18 <grid_ui_event_template_action+0x224>)
    9eba:	4630      	mov	r0, r6
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    9ebc:	4798      	blx	r3
			uint8_t error = 0;
    9ebe:	2300      	movs	r3, #0
    9ec0:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    9ec4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    9ec6:	eb03 0c05 	add.w	ip, r3, r5
    9eca:	f10d 030f 	add.w	r3, sp, #15
    9ece:	9300      	str	r3, [sp, #0]
    9ed0:	465a      	mov	r2, fp
    9ed2:	4603      	mov	r3, r0
    9ed4:	4651      	mov	r1, sl
    9ed6:	f10c 0048 	add.w	r0, ip, #72	; 0x48
    9eda:	e7e1      	b.n	9ea0 <grid_ui_event_template_action+0x1ac>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_RED){
    9edc:	2b01      	cmp	r3, #1
    9ede:	d102      	bne.n	9ee6 <grid_ui_event_template_action+0x1f2>
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    9ee0:	4b0e      	ldr	r3, [pc, #56]	; (9f1c <grid_ui_event_template_action+0x228>)
    9ee2:	4630      	mov	r0, r6
    9ee4:	e7ea      	b.n	9ebc <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_GRE){
    9ee6:	2b02      	cmp	r3, #2
    9ee8:	d102      	bne.n	9ef0 <grid_ui_event_template_action+0x1fc>
				parameter_value = grid_sys_get_bank_gre(&grid_sys_state);
    9eea:	4b0d      	ldr	r3, [pc, #52]	; (9f20 <grid_ui_event_template_action+0x22c>)
    9eec:	4630      	mov	r0, r6
    9eee:	e7e5      	b.n	9ebc <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_BLU){
    9ef0:	2b03      	cmp	r3, #3
    9ef2:	d102      	bne.n	9efa <grid_ui_event_template_action+0x206>
				parameter_value = grid_sys_get_bank_blu(&grid_sys_state);
    9ef4:	4b0b      	ldr	r3, [pc, #44]	; (9f24 <grid_ui_event_template_action+0x230>)
    9ef6:	4630      	mov	r0, r6
    9ef8:	e7e0      	b.n	9ebc <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
    9efa:	2b04      	cmp	r3, #4
    9efc:	d102      	bne.n	9f04 <grid_ui_event_template_action+0x210>
				parameter_value = grid_sys_state.mapmodestate;
    9efe:	7c30      	ldrb	r0, [r6, #16]
    9f00:	b2c0      	uxtb	r0, r0
    9f02:	e7dc      	b.n	9ebe <grid_ui_event_template_action+0x1ca>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
    9f04:	2b05      	cmp	r3, #5
    9f06:	d102      	bne.n	9f0e <grid_ui_event_template_action+0x21a>
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    9f08:	4630      	mov	r0, r6
    9f0a:	47c8      	blx	r9
    9f0c:	e7d7      	b.n	9ebe <grid_ui_event_template_action+0x1ca>
			uint32_t parameter_value = 0;
    9f0e:	2000      	movs	r0, #0
    9f10:	e7d5      	b.n	9ebe <grid_ui_event_template_action+0x1ca>
    9f12:	bf00      	nop
    9f14:	20006f94 	.word	0x20006f94
    9f18:	00008eeb 	.word	0x00008eeb
    9f1c:	00008ef5 	.word	0x00008ef5
    9f20:	00008efb 	.word	0x00008efb
    9f24:	00008f01 	.word	0x00008f01
    9f28:	0000920d 	.word	0x0000920d
    9f2c:	00008f07 	.word	0x00008f07

00009f30 <grid_ui_event_register_actionstring>:
void grid_ui_event_register_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* action_string, uint32_t action_string_length){
    9f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f34:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
void grid_ui_event_register_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* action_string, uint32_t action_string_length){
    9f38:	460d      	mov	r5, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f3a:	2400      	movs	r4, #0
	uint8_t event_index = 255;
    9f3c:	21ff      	movs	r1, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    9f3e:	f44f 7e86 	mov.w	lr, #268	; 0x10c
    9f42:	b2e7      	uxtb	r7, r4
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f44:	45bc      	cmp	ip, r7
    9f46:	d839      	bhi.n	9fbc <grid_ui_event_register_actionstring+0x8c>
	if (event_index == 255){
    9f48:	29ff      	cmp	r1, #255	; 0xff
    9f4a:	d07a      	beq.n	a042 <grid_ui_event_register_actionstring+0x112>
		ele->event_list[event_index].action_string[i] = 0;
    9f4c:	6e04      	ldr	r4, [r0, #96]	; 0x60
    9f4e:	f44f 7586 	mov.w	r5, #268	; 0x10c
    9f52:	fb05 4401 	mla	r4, r5, r1, r4
    9f56:	f104 0c48 	add.w	ip, r4, #72	; 0x48
    9f5a:	4625      	mov	r5, r4
    9f5c:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    9f60:	4666      	mov	r6, ip
    9f62:	2700      	movs	r7, #0
    9f64:	f806 7b01 	strb.w	r7, [r6], #1
	for(uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    9f68:	4576      	cmp	r6, lr
    9f6a:	d1fb      	bne.n	9f64 <grid_ui_event_register_actionstring+0x34>
	ele->event_list[event_index].action_string_length = 0;
    9f6c:	6467      	str	r7, [r4, #68]	; 0x44
		ele->event_list[event_index].action_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    9f6e:	2600      	movs	r6, #0
    9f70:	f104 0746 	add.w	r7, r4, #70	; 0x46
    9f74:	f885 60c1 	strb.w	r6, [r5, #193]	; 0xc1
		ele->event_list[event_index].action_parameter_list[i].address = 0;
    9f78:	f885 60c3 	strb.w	r6, [r5, #195]	; 0xc3
		ele->event_list[event_index].action_parameter_list[i].group = 0;
    9f7c:	f885 60c2 	strb.w	r6, [r5, #194]	; 0xc2
		ele->event_list[event_index].action_parameter_list[i].length = 0;
    9f80:	f885 60c4 	strb.w	r6, [r5, #196]	; 0xc4
		ele->event_list[event_index].action_parameter_list[i].offset = 0;
    9f84:	f885 60c5 	strb.w	r6, [r5, #197]	; 0xc5
	for(uint8_t i=0; i<GRID_UI_ACTION_PARAMETER_maxcount; i++){
    9f88:	3505      	adds	r5, #5
    9f8a:	42bd      	cmp	r5, r7
    9f8c:	d1f2      	bne.n	9f74 <grid_ui_event_register_actionstring+0x44>
	ele->event_list[event_index].action_parameter_count = 0;
    9f8e:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
	for (uint32_t i=0; i<action_string_length; i++){
    9f92:	2600      	movs	r6, #0
    9f94:	3a01      	subs	r2, #1
	uint8_t parameter_list_length = 0;
    9f96:	4635      	mov	r5, r6
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    9f98:	f244 0909 	movw	r9, #16393	; 0x4009
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    9f9c:	f04f 0e01 	mov.w	lr, #1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].length = 2;
    9fa0:	f04f 0802 	mov.w	r8, #2
	for (uint32_t i=0; i<action_string_length; i++){
    9fa4:	429e      	cmp	r6, r3
    9fa6:	d112      	bne.n	9fce <grid_ui_event_register_actionstring+0x9e>
	ele->event_list[event_index].cfg_changed_flag = 1;
    9fa8:	2301      	movs	r3, #1
    9faa:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	ele->event_list[event_index].action_parameter_count = parameter_list_length;
    9fae:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
	ele->event_list[event_index].action_string_length = action_string_length;
    9fb2:	6466      	str	r6, [r4, #68]	; 0x44
	grid_ui_event_template_action(ele, event_index);
    9fb4:	4b24      	ldr	r3, [pc, #144]	; (a048 <grid_ui_event_register_actionstring+0x118>)
}
    9fb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_ui_event_template_action(ele, event_index);
    9fba:	4718      	bx	r3
		if (ele->event_list[i].type == event_type){
    9fbc:	6e06      	ldr	r6, [r0, #96]	; 0x60
    9fbe:	fb0e 6604 	mla	r6, lr, r4, r6
    9fc2:	3401      	adds	r4, #1
    9fc4:	7ab6      	ldrb	r6, [r6, #10]
    9fc6:	42ae      	cmp	r6, r5
    9fc8:	bf08      	it	eq
    9fca:	4639      	moveq	r1, r7
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9fcc:	e7b9      	b.n	9f42 <grid_ui_event_register_actionstring+0x12>
		if (ele->event_list[event_index].action_string[i] > 127){
    9fce:	f992 a001 	ldrsb.w	sl, [r2, #1]
		ele->event_list[event_index].action_string[i] = action_string[i];
    9fd2:	7857      	ldrb	r7, [r2, #1]
		if (ele->event_list[event_index].action_string[i] > 127){
    9fd4:	f1ba 0f00 	cmp.w	sl, #0
			ele->event_list[event_index].action_string[i] -= 128;
    9fd8:	bfb8      	it	lt
    9fda:	3f80      	sublt	r7, #128	; 0x80
    9fdc:	f88c 7000 	strb.w	r7, [ip]
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    9fe0:	f892 a000 	ldrb.w	sl, [r2]
    9fe4:	f1aa 0742 	sub.w	r7, sl, #66	; 0x42
    9fe8:	b2ff      	uxtb	r7, r7
    9fea:	2f0e      	cmp	r7, #14
    9fec:	d907      	bls.n	9ffe <grid_ui_event_register_actionstring+0xce>
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    9fee:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
    9ff2:	d023      	beq.n	a03c <grid_ui_event_register_actionstring+0x10c>
	for (uint32_t i=0; i<action_string_length; i++){
    9ff4:	3601      	adds	r6, #1
    9ff6:	f10c 0c01 	add.w	ip, ip, #1
    9ffa:	3201      	adds	r2, #1
    9ffc:	e7d2      	b.n	9fa4 <grid_ui_event_register_actionstring+0x74>
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    9ffe:	fa29 f707 	lsr.w	r7, r9, r7
    a002:	07ff      	lsls	r7, r7, #31
    a004:	d5f6      	bpl.n	9ff4 <grid_ui_event_register_actionstring+0xc4>
    a006:	7857      	ldrb	r7, [r2, #1]
    a008:	2f39      	cmp	r7, #57	; 0x39
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a00a:	d8f3      	bhi.n	9ff4 <grid_ui_event_register_actionstring+0xc4>
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;		
    a00c:	eb05 0785 	add.w	r7, r5, r5, lsl #2
    a010:	4427      	add	r7, r4
			parameter_list_length++;
    a012:	3501      	adds	r5, #1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;		
    a014:	f887 e0c1 	strb.w	lr, [r7, #193]	; 0xc1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].group = action_string[i-1];
    a018:	f892 a000 	ldrb.w	sl, [r2]
    a01c:	f887 a0c2 	strb.w	sl, [r7, #194]	; 0xc2
			ele->event_list[event_index].action_parameter_list[parameter_list_length].address = (action_string[i]-'0');
    a020:	f892 a001 	ldrb.w	sl, [r2, #1]
			ele->event_list[event_index].action_parameter_list[parameter_list_length].length = 2;
    a024:	f887 80c4 	strb.w	r8, [r7, #196]	; 0xc4
			ele->event_list[event_index].action_parameter_list[parameter_list_length].address = (action_string[i]-'0');
    a028:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    a02c:	f887 a0c3 	strb.w	sl, [r7, #195]	; 0xc3
			ele->event_list[event_index].action_parameter_list[parameter_list_length].offset = i-1;
    a030:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
    a034:	f887 a0c5 	strb.w	sl, [r7, #197]	; 0xc5
			parameter_list_length++;
    a038:	b2ed      	uxtb	r5, r5
    a03a:	e7db      	b.n	9ff4 <grid_ui_event_register_actionstring+0xc4>
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a03c:	7857      	ldrb	r7, [r2, #1]
    a03e:	2f35      	cmp	r7, #53	; 0x35
    a040:	e7e3      	b.n	a00a <grid_ui_event_register_actionstring+0xda>
}
    a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a046:	bf00      	nop
    a048:	00009cf5 	.word	0x00009cf5

0000a04c <grid_ui_event_generate_actionstring>:
void grid_ui_event_generate_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a04e:	4606      	mov	r6, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a050:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
void grid_ui_event_generate_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    a054:	b09f      	sub	sp, #124	; 0x7c
    a056:	460c      	mov	r4, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a058:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    a05a:	25ff      	movs	r5, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    a05c:	f44f 7786 	mov.w	r7, #268	; 0x10c
    a060:	b2d9      	uxtb	r1, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a062:	4288      	cmp	r0, r1
    a064:	d82c      	bhi.n	a0c0 <grid_ui_event_generate_actionstring+0x74>
	if (event_index == 255){
    a066:	2dff      	cmp	r5, #255	; 0xff
    a068:	d028      	beq.n	a0bc <grid_ui_event_generate_actionstring+0x70>
	uint8_t action_string[GRID_UI_ACTION_STRING_maxlength] = {0};
    a06a:	4b36      	ldr	r3, [pc, #216]	; (a144 <grid_ui_event_generate_actionstring+0xf8>)
    a06c:	2100      	movs	r1, #0
    a06e:	2274      	movs	r2, #116	; 0x74
    a070:	a801      	add	r0, sp, #4
    a072:	9100      	str	r1, [sp, #0]
    a074:	4798      	blx	r3
	if (ele->type == GRID_UI_ELEMENT_BUTTON){
    a076:	7a73      	ldrb	r3, [r6, #9]
    a078:	2b02      	cmp	r3, #2
    a07a:	d12e      	bne.n	a0da <grid_ui_event_generate_actionstring+0x8e>
		switch(event_type){
    a07c:	2c04      	cmp	r4, #4
    a07e:	d028      	beq.n	a0d2 <grid_ui_event_generate_actionstring+0x86>
    a080:	2c05      	cmp	r4, #5
    a082:	d028      	beq.n	a0d6 <grid_ui_event_generate_actionstring+0x8a>
    a084:	b91c      	cbnz	r4, a08e <grid_ui_event_generate_actionstring+0x42>
			case GRID_UI_EVENT_INIT:	sprintf(action_string, GRID_ACTIONSTRING_INIT_BUT);		break;
    a086:	4930      	ldr	r1, [pc, #192]	; (a148 <grid_ui_event_generate_actionstring+0xfc>)
			case GRID_UI_EVENT_DR:          sprintf(action_string, GRID_ACTIONSTRING_DR_ENC);	break;
    a088:	4b30      	ldr	r3, [pc, #192]	; (a14c <grid_ui_event_generate_actionstring+0x100>)
    a08a:	4668      	mov	r0, sp
    a08c:	4798      	blx	r3
	if (strlen(action_string)){
    a08e:	f89d 3000 	ldrb.w	r3, [sp]
    a092:	b143      	cbz	r3, a0a6 <grid_ui_event_generate_actionstring+0x5a>
		grid_ui_event_register_actionstring(ele, event_type, action_string, strlen(action_string));
    a094:	4b2e      	ldr	r3, [pc, #184]	; (a150 <grid_ui_event_generate_actionstring+0x104>)
    a096:	4668      	mov	r0, sp
    a098:	4798      	blx	r3
    a09a:	4621      	mov	r1, r4
    a09c:	4603      	mov	r3, r0
    a09e:	4c2d      	ldr	r4, [pc, #180]	; (a154 <grid_ui_event_generate_actionstring+0x108>)
    a0a0:	466a      	mov	r2, sp
    a0a2:	4630      	mov	r0, r6
    a0a4:	47a0      	blx	r4
	ele->event_list[event_index].cfg_changed_flag = 0;
    a0a6:	6e33      	ldr	r3, [r6, #96]	; 0x60
    a0a8:	f44f 7286 	mov.w	r2, #268	; 0x10c
    a0ac:	fb02 3505 	mla	r5, r2, r5, r3
    a0b0:	2300      	movs	r3, #0
    a0b2:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
	ele->event_list[event_index].cfg_default_flag = 1;	
    a0b6:	2301      	movs	r3, #1
    a0b8:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
}
    a0bc:	b01f      	add	sp, #124	; 0x7c
    a0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ele->event_list[i].type == event_type){
    a0c0:	6e32      	ldr	r2, [r6, #96]	; 0x60
    a0c2:	fb07 2203 	mla	r2, r7, r3, r2
    a0c6:	3301      	adds	r3, #1
    a0c8:	7a92      	ldrb	r2, [r2, #10]
    a0ca:	42a2      	cmp	r2, r4
    a0cc:	bf08      	it	eq
    a0ce:	460d      	moveq	r5, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a0d0:	e7c6      	b.n	a060 <grid_ui_event_generate_actionstring+0x14>
			case GRID_UI_EVENT_DP:		sprintf(action_string, GRID_ACTIONSTRING_DP_BUT);		break;
    a0d2:	4921      	ldr	r1, [pc, #132]	; (a158 <grid_ui_event_generate_actionstring+0x10c>)
    a0d4:	e7d8      	b.n	a088 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DR:		sprintf(action_string, GRID_ACTIONSTRING_DR_BUT);		break;
    a0d6:	4921      	ldr	r1, [pc, #132]	; (a15c <grid_ui_event_generate_actionstring+0x110>)
    a0d8:	e7d6      	b.n	a088 <grid_ui_event_generate_actionstring+0x3c>
	else if (ele->type == GRID_UI_ELEMENT_POTENTIOMETER){
    a0da:	2b01      	cmp	r3, #1
    a0dc:	d105      	bne.n	a0ea <grid_ui_event_generate_actionstring+0x9e>
		switch(event_type){
    a0de:	2c00      	cmp	r4, #0
    a0e0:	d0d1      	beq.n	a086 <grid_ui_event_generate_actionstring+0x3a>
    a0e2:	2c01      	cmp	r4, #1
    a0e4:	d1d3      	bne.n	a08e <grid_ui_event_generate_actionstring+0x42>
			case GRID_UI_EVENT_AVC7:	sprintf(action_string, GRID_ACTIONSTRING_AVC7_POT);		break;
    a0e6:	491e      	ldr	r1, [pc, #120]	; (a160 <grid_ui_event_generate_actionstring+0x114>)
    a0e8:	e7ce      	b.n	a088 <grid_ui_event_generate_actionstring+0x3c>
	else if (ele->type == GRID_UI_ELEMENT_ENCODER){
    a0ea:	2b03      	cmp	r3, #3
    a0ec:	d1cf      	bne.n	a08e <grid_ui_event_generate_actionstring+0x42>
		switch(event_type){
    a0ee:	2c0d      	cmp	r4, #13
    a0f0:	d8cd      	bhi.n	a08e <grid_ui_event_generate_actionstring+0x42>
    a0f2:	a301      	add	r3, pc, #4	; (adr r3, a0f8 <grid_ui_event_generate_actionstring+0xac>)
    a0f4:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    a0f8:	0000a131 	.word	0x0000a131
    a0fc:	0000a135 	.word	0x0000a135
    a100:	0000a08f 	.word	0x0000a08f
    a104:	0000a08f 	.word	0x0000a08f
    a108:	0000a13d 	.word	0x0000a13d
    a10c:	0000a141 	.word	0x0000a141
    a110:	0000a08f 	.word	0x0000a08f
    a114:	0000a08f 	.word	0x0000a08f
    a118:	0000a08f 	.word	0x0000a08f
    a11c:	0000a08f 	.word	0x0000a08f
    a120:	0000a08f 	.word	0x0000a08f
    a124:	0000a08f 	.word	0x0000a08f
    a128:	0000a08f 	.word	0x0000a08f
    a12c:	0000a139 	.word	0x0000a139
			case GRID_UI_EVENT_INIT:        sprintf(action_string, GRID_ACTIONSTRING_INIT_ENC);	break;
    a130:	490c      	ldr	r1, [pc, #48]	; (a164 <grid_ui_event_generate_actionstring+0x118>)
    a132:	e7a9      	b.n	a088 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_AVC7:        sprintf(action_string, GRID_ACTIONSTRING_AVC7_ENC);	break;
    a134:	490c      	ldr	r1, [pc, #48]	; (a168 <grid_ui_event_generate_actionstring+0x11c>)
    a136:	e7a7      	b.n	a088 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_ENCPUSHROT:	sprintf(action_string, GRID_ACTIONSTRING_PUSHROT_ENC);	break;
    a138:	490c      	ldr	r1, [pc, #48]	; (a16c <grid_ui_event_generate_actionstring+0x120>)
    a13a:	e7a5      	b.n	a088 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DP:          sprintf(action_string, GRID_ACTIONSTRING_DP_ENC);	break;
    a13c:	490c      	ldr	r1, [pc, #48]	; (a170 <grid_ui_event_generate_actionstring+0x124>)
    a13e:	e7a3      	b.n	a088 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DR:          sprintf(action_string, GRID_ACTIONSTRING_DR_ENC);	break;
    a140:	490c      	ldr	r1, [pc, #48]	; (a174 <grid_ui_event_generate_actionstring+0x128>)
    a142:	e7a1      	b.n	a088 <grid_ui_event_generate_actionstring+0x3c>
    a144:	00012519 	.word	0x00012519
    a148:	00014a5e 	.word	0x00014a5e
    a14c:	00012bb9 	.word	0x00012bb9
    a150:	00012c81 	.word	0x00012c81
    a154:	00009f31 	.word	0x00009f31
    a158:	00014a6f 	.word	0x00014a6f
    a15c:	00014a8a 	.word	0x00014a8a
    a160:	00014aa5 	.word	0x00014aa5
    a164:	00014ac0 	.word	0x00014ac0
    a168:	00014ae1 	.word	0x00014ae1
    a16c:	00014afc 	.word	0x00014afc
    a170:	00014b0b 	.word	0x00014b0b
    a174:	00014b26 	.word	0x00014b26

0000a178 <grid_ui_reinit>:
void grid_ui_reinit(struct grid_ui_model* ui){
    a178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a17c:	4606      	mov	r6, r0
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    a17e:	2700      	movs	r7, #0
    a180:	7873      	ldrb	r3, [r6, #1]
    a182:	b2fc      	uxtb	r4, r7
    a184:	42a3      	cmp	r3, r4
    a186:	d805      	bhi.n	a194 <grid_ui_reinit+0x1c>
	grid_sys_state.bank_active_changed = 1;
    a188:	4b18      	ldr	r3, [pc, #96]	; (a1ec <grid_ui_reinit+0x74>)
    a18a:	2201      	movs	r2, #1
    a18c:	745a      	strb	r2, [r3, #17]
}
    a18e:	b003      	add	sp, #12
    a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct grid_ui_bank* bank = &ui->bank_list[i];
    a194:	6873      	ldr	r3, [r6, #4]
		for (uint8_t j=0; j<bank->element_list_length; j++){
    a196:	f04f 0800 	mov.w	r8, #0
		struct grid_ui_bank* bank = &ui->bank_list[i];
    a19a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
			struct grid_ui_element* ele = &bank->element_list[j];
    a19e:	f04f 0b64 	mov.w	fp, #100	; 0x64
		for (uint8_t j=0; j<bank->element_list_length; j++){
    a1a2:	7a63      	ldrb	r3, [r4, #9]
    a1a4:	fa5f f088 	uxtb.w	r0, r8
    a1a8:	4283      	cmp	r3, r0
    a1aa:	d801      	bhi.n	a1b0 <grid_ui_reinit+0x38>
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    a1ac:	3701      	adds	r7, #1
    a1ae:	e7e7      	b.n	a180 <grid_ui_reinit+0x8>
			struct grid_ui_element* ele = &bank->element_list[j];
    a1b0:	68e3      	ldr	r3, [r4, #12]
			for (uint8_t k=0; k<ele->event_list_length; k++){
    a1b2:	f04f 0900 	mov.w	r9, #0
			struct grid_ui_element* ele = &bank->element_list[j];
    a1b6:	fb0b 3000 	mla	r0, fp, r0, r3
				struct grid_ui_event* eve = &ele->event_list[k];
    a1ba:	f44f 7a86 	mov.w	sl, #268	; 0x10c
			for (uint8_t k=0; k<ele->event_list_length; k++){
    a1be:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    a1c2:	fa5f f589 	uxtb.w	r5, r9
    a1c6:	42a9      	cmp	r1, r5
    a1c8:	d802      	bhi.n	a1d0 <grid_ui_reinit+0x58>
		for (uint8_t j=0; j<bank->element_list_length; j++){
    a1ca:	f108 0801 	add.w	r8, r8, #1
    a1ce:	e7e8      	b.n	a1a2 <grid_ui_reinit+0x2a>
				struct grid_ui_event* eve = &ele->event_list[k];
    a1d0:	6e01      	ldr	r1, [r0, #96]	; 0x60
				grid_ui_event_generate_actionstring(ele, eve->type);
    a1d2:	4b07      	ldr	r3, [pc, #28]	; (a1f0 <grid_ui_reinit+0x78>)
    a1d4:	9001      	str	r0, [sp, #4]
				struct grid_ui_event* eve = &ele->event_list[k];
    a1d6:	fb0a 1505 	mla	r5, sl, r5, r1
				grid_ui_event_generate_actionstring(ele, eve->type);
    a1da:	f109 0901 	add.w	r9, r9, #1
    a1de:	7aa9      	ldrb	r1, [r5, #10]
    a1e0:	4798      	blx	r3
	eve->trigger = GRID_UI_STATUS_READY;
    a1e2:	2204      	movs	r2, #4
    a1e4:	9801      	ldr	r0, [sp, #4]
    a1e6:	726a      	strb	r2, [r5, #9]
			for (uint8_t k=0; k<ele->event_list_length; k++){
    a1e8:	e7e9      	b.n	a1be <grid_ui_reinit+0x46>
    a1ea:	bf00      	nop
    a1ec:	20006f94 	.word	0x20006f94
    a1f0:	0000a04d 	.word	0x0000a04d

0000a1f4 <grid_ui_smart_trigger>:
void grid_ui_smart_trigger(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    a1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a1f6:	4605      	mov	r5, r0
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a1f8:	010f      	lsls	r7, r1, #4
void grid_ui_smart_trigger(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    a1fa:	4608      	mov	r0, r1
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a1fc:	2164      	movs	r1, #100	; 0x64
    a1fe:	fb02 f401 	mul.w	r4, r2, r1
    a202:	686a      	ldr	r2, [r5, #4]
    a204:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    a208:	4619      	mov	r1, r3
    a20a:	68d6      	ldr	r6, [r2, #12]
    a20c:	4b0b      	ldr	r3, [pc, #44]	; (a23c <grid_ui_smart_trigger+0x48>)
    a20e:	4426      	add	r6, r4
    a210:	4630      	mov	r0, r6
    a212:	4798      	blx	r3
	if (event_index == 255){
    a214:	28ff      	cmp	r0, #255	; 0xff
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a216:	4601      	mov	r1, r0
	if (event_index == 255){
    a218:	d00d      	beq.n	a236 <grid_ui_smart_trigger+0x42>
	grid_ui_event_template_action(&mod->bank_list[bank].element_list[element], event_index);
    a21a:	9001      	str	r0, [sp, #4]
    a21c:	4b08      	ldr	r3, [pc, #32]	; (a240 <grid_ui_smart_trigger+0x4c>)
    a21e:	4630      	mov	r0, r6
    a220:	4798      	blx	r3
	grid_ui_event_trigger(&mod->bank_list[bank].element_list[element], event_index);
    a222:	686b      	ldr	r3, [r5, #4]
    a224:	9901      	ldr	r1, [sp, #4]
    a226:	443b      	add	r3, r7
    a228:	68d8      	ldr	r0, [r3, #12]
    a22a:	4b06      	ldr	r3, [pc, #24]	; (a244 <grid_ui_smart_trigger+0x50>)
    a22c:	4420      	add	r0, r4
}
    a22e:	b003      	add	sp, #12
    a230:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	grid_ui_event_trigger(&mod->bank_list[bank].element_list[element], event_index);
    a234:	4718      	bx	r3
}
    a236:	b003      	add	sp, #12
    a238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a23a:	bf00      	nop
    a23c:	0000979d 	.word	0x0000979d
    a240:	00009cf5 	.word	0x00009cf5
    a244:	000097c7 	.word	0x000097c7

0000a248 <grid_ui_event_register_eventstring>:
void grid_ui_event_register_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length){
    a248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a24c:	4606      	mov	r6, r0
	grid_debug_print_text("Register Action");
    a24e:	4d4f      	ldr	r5, [pc, #316]	; (a38c <grid_ui_event_register_eventstring+0x144>)
    a250:	484f      	ldr	r0, [pc, #316]	; (a390 <grid_ui_event_register_eventstring+0x148>)
void grid_ui_event_register_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length){
    a252:	9301      	str	r3, [sp, #4]
    a254:	4614      	mov	r4, r2
    a256:	4689      	mov	r9, r1
	grid_debug_print_text("Register Action");
    a258:	47a8      	blx	r5
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a25a:	f896 705c 	ldrb.w	r7, [r6, #92]	; 0x5c
    a25e:	46aa      	mov	sl, r5
    a260:	2200      	movs	r2, #0
	uint8_t event_index = 255;
    a262:	23ff      	movs	r3, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    a264:	f44f 7586 	mov.w	r5, #268	; 0x10c
    a268:	b2d0      	uxtb	r0, r2
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a26a:	4287      	cmp	r7, r0
    a26c:	d807      	bhi.n	a27e <grid_ui_event_register_eventstring+0x36>
	if (event_index == 255){
    a26e:	2bff      	cmp	r3, #255	; 0xff
    a270:	d10e      	bne.n	a290 <grid_ui_event_register_eventstring+0x48>
		grid_debug_print_text("Event Not Found");
    a272:	4848      	ldr	r0, [pc, #288]	; (a394 <grid_ui_event_register_eventstring+0x14c>)
    a274:	4653      	mov	r3, sl
}
    a276:	b003      	add	sp, #12
    a278:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		grid_debug_print_text("Event Not Found");
    a27c:	4718      	bx	r3
		if (ele->event_list[i].type == event_type){
    a27e:	6e31      	ldr	r1, [r6, #96]	; 0x60
    a280:	fb05 1102 	mla	r1, r5, r2, r1
    a284:	3201      	adds	r2, #1
    a286:	7a89      	ldrb	r1, [r1, #10]
    a288:	4549      	cmp	r1, r9
    a28a:	bf08      	it	eq
    a28c:	4603      	moveq	r3, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a28e:	e7eb      	b.n	a268 <grid_ui_event_register_eventstring+0x20>
		ele->event_list[event_index].event_string[i] = 0;
    a290:	f44f 7886 	mov.w	r8, #268	; 0x10c
    a294:	fb08 f803 	mul.w	r8, r8, r3
    a298:	6e33      	ldr	r3, [r6, #96]	; 0x60
    a29a:	4443      	add	r3, r8
    a29c:	f103 0210 	add.w	r2, r3, #16
    a2a0:	4619      	mov	r1, r3
    a2a2:	f103 052e 	add.w	r5, r3, #46	; 0x2e
    a2a6:	2000      	movs	r0, #0
    a2a8:	f802 0b01 	strb.w	r0, [r2], #1
	for(uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    a2ac:	42aa      	cmp	r2, r5
    a2ae:	d1fb      	bne.n	a2a8 <grid_ui_event_register_eventstring+0x60>
	ele->event_list[event_index].event_string_length = 0;
    a2b0:	60d8      	str	r0, [r3, #12]
	for(uint8_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    a2b2:	f103 0214 	add.w	r2, r3, #20
		ele->event_list[event_index].event_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    a2b6:	2000      	movs	r0, #0
    a2b8:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
		ele->event_list[event_index].event_parameter_list[i].address = 0;
    a2bc:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
		ele->event_list[event_index].event_parameter_list[i].group = 0;
    a2c0:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
		ele->event_list[event_index].event_parameter_list[i].length = 0;
    a2c4:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
		ele->event_list[event_index].event_parameter_list[i].offset = 0;
    a2c8:	f881 0033 	strb.w	r0, [r1, #51]	; 0x33
	for(uint8_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    a2cc:	3105      	adds	r1, #5
    a2ce:	428a      	cmp	r2, r1
    a2d0:	d1f2      	bne.n	a2b8 <grid_ui_event_register_eventstring+0x70>
	ele->event_list[event_index].event_parameter_count = 0;
    a2d2:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
	for (uint32_t i=0; i<event_string_length; i++){
    a2d6:	2700      	movs	r7, #0
			grid_debug_print_text(" Escaped Char Found ");
    a2d8:	482f      	ldr	r0, [pc, #188]	; (a398 <grid_ui_event_register_eventstring+0x150>)
    a2da:	3c01      	subs	r4, #1
	uint8_t parameter_list_length = 0;
    a2dc:	463d      	mov	r5, r7
		if ((event_string[i-1] == 'P' || event_string[i-1] == 'B' || event_string[i-1] == 'E') && (event_string[i]-'0') < 10){
    a2de:	f04f 0b01 	mov.w	fp, #1
    a2e2:	f244 0209 	movw	r2, #16393	; 0x4009
	for (uint32_t i=0; i<event_string_length; i++){
    a2e6:	9901      	ldr	r1, [sp, #4]
    a2e8:	6e33      	ldr	r3, [r6, #96]	; 0x60
    a2ea:	428f      	cmp	r7, r1
    a2ec:	4443      	add	r3, r8
    a2ee:	d10d      	bne.n	a30c <grid_ui_event_register_eventstring+0xc4>
	ele->event_list[event_index].event_parameter_count = parameter_list_length;
    a2f0:	f883 502e 	strb.w	r5, [r3, #46]	; 0x2e
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    a2f4:	6870      	ldr	r0, [r6, #4]
	ele->event_list[event_index].event_string_length = event_string_length;
    a2f6:	60df      	str	r7, [r3, #12]
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    a2f8:	4c28      	ldr	r4, [pc, #160]	; (a39c <grid_ui_event_register_eventstring+0x154>)
    a2fa:	7a01      	ldrb	r1, [r0, #8]
    a2fc:	7a32      	ldrb	r2, [r6, #8]
    a2fe:	6840      	ldr	r0, [r0, #4]
    a300:	464b      	mov	r3, r9
    a302:	46a4      	mov	ip, r4
}
    a304:	b003      	add	sp, #12
    a306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    a30a:	4760      	bx	ip
		ele->event_list[event_index].event_string[i] = event_string[i];
    a30c:	7861      	ldrb	r1, [r4, #1]
    a30e:	443b      	add	r3, r7
    a310:	7419      	strb	r1, [r3, #16]
		if (ele->event_list[event_index].event_string[i] > 127){
    a312:	060b      	lsls	r3, r1, #24
    a314:	d509      	bpl.n	a32a <grid_ui_event_register_eventstring+0xe2>
			grid_debug_print_text(" Escaped Char Found ");
    a316:	47d0      	blx	sl
			ele->event_list[event_index].event_string[i] -= 128;
    a318:	6e33      	ldr	r3, [r6, #96]	; 0x60
    a31a:	481f      	ldr	r0, [pc, #124]	; (a398 <grid_ui_event_register_eventstring+0x150>)
    a31c:	4443      	add	r3, r8
    a31e:	443b      	add	r3, r7
    a320:	f244 0209 	movw	r2, #16393	; 0x4009
    a324:	7c19      	ldrb	r1, [r3, #16]
    a326:	3980      	subs	r1, #128	; 0x80
    a328:	7419      	strb	r1, [r3, #16]
		if ((event_string[i-1] == 'P' || event_string[i-1] == 'B' || event_string[i-1] == 'E') && (event_string[i]-'0') < 10){
    a32a:	f894 c000 	ldrb.w	ip, [r4]
    a32e:	6e33      	ldr	r3, [r6, #96]	; 0x60
    a330:	f1ac 0142 	sub.w	r1, ip, #66	; 0x42
    a334:	b2c9      	uxtb	r1, r1
    a336:	290e      	cmp	r1, #14
    a338:	bf9d      	ittte	ls
    a33a:	fa22 f101 	lsrls.w	r1, r2, r1
    a33e:	43c9      	mvnls	r1, r1
    a340:	f001 0101 	andls.w	r1, r1, #1
    a344:	2101      	movhi	r1, #1
    a346:	4443      	add	r3, r8
    a348:	b9b9      	cbnz	r1, a37a <grid_ui_event_register_eventstring+0x132>
    a34a:	7861      	ldrb	r1, [r4, #1]
    a34c:	2939      	cmp	r1, #57	; 0x39
    a34e:	d814      	bhi.n	a37a <grid_ui_event_register_eventstring+0x132>
			ele->event_list[event_index].event_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    a350:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    a354:	440b      	add	r3, r1
			parameter_list_length++;
    a356:	3501      	adds	r5, #1
			ele->event_list[event_index].event_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    a358:	f883 b02f 	strb.w	fp, [r3, #47]	; 0x2f
			ele->event_list[event_index].event_parameter_list[parameter_list_length].group = event_string[i-1];
    a35c:	7821      	ldrb	r1, [r4, #0]
    a35e:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
			ele->event_list[event_index].event_parameter_list[parameter_list_length].address = (event_string[i]-'0');
    a362:	7861      	ldrb	r1, [r4, #1]
    a364:	3930      	subs	r1, #48	; 0x30
    a366:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
			ele->event_list[event_index].event_parameter_list[parameter_list_length].offset = i-1;
    a36a:	1e79      	subs	r1, r7, #1
    a36c:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
			ele->event_list[event_index].event_parameter_list[parameter_list_length].length = 2;
    a370:	2102      	movs	r1, #2
    a372:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
			parameter_list_length++;
    a376:	b2ed      	uxtb	r5, r5
    a378:	e005      	b.n	a386 <grid_ui_event_register_eventstring+0x13e>
		else if (event_string[i-1] == 'Z' && (event_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a37a:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
    a37e:	d102      	bne.n	a386 <grid_ui_event_register_eventstring+0x13e>
    a380:	7861      	ldrb	r1, [r4, #1]
    a382:	2935      	cmp	r1, #53	; 0x35
    a384:	d9e4      	bls.n	a350 <grid_ui_event_register_eventstring+0x108>
	for (uint32_t i=0; i<event_string_length; i++){
    a386:	3701      	adds	r7, #1
    a388:	3401      	adds	r4, #1
    a38a:	e7ac      	b.n	a2e6 <grid_ui_event_register_eventstring+0x9e>
    a38c:	00008a5d 	.word	0x00008a5d
    a390:	00014b41 	.word	0x00014b41
    a394:	00014b51 	.word	0x00014b51
    a398:	00014b61 	.word	0x00014b61
    a39c:	0000a1f5 	.word	0x0000a1f5

0000a3a0 <grid_ui_event_generate_eventstring>:
void grid_ui_event_generate_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a3a2:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
void grid_ui_event_generate_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    a3a6:	b089      	sub	sp, #36	; 0x24
    a3a8:	4605      	mov	r5, r0
    a3aa:	460c      	mov	r4, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a3ac:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    a3ae:	22ff      	movs	r2, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    a3b0:	f44f 7786 	mov.w	r7, #268	; 0x10c
    a3b4:	b2d8      	uxtb	r0, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a3b6:	4286      	cmp	r6, r0
    a3b8:	d816      	bhi.n	a3e8 <grid_ui_event_generate_eventstring+0x48>
	if (event_index == 255){
    a3ba:	2aff      	cmp	r2, #255	; 0xff
    a3bc:	d02c      	beq.n	a418 <grid_ui_event_generate_eventstring+0x78>
	uint8_t event_string[GRID_UI_EVENT_STRING_maxlength] = {0};	
    a3be:	4b24      	ldr	r3, [pc, #144]	; (a450 <grid_ui_event_generate_eventstring+0xb0>)
    a3c0:	2100      	movs	r1, #0
    a3c2:	221a      	movs	r2, #26
    a3c4:	a801      	add	r0, sp, #4
    a3c6:	9100      	str	r1, [sp, #0]
    a3c8:	4798      	blx	r3
	if (ele->type == GRID_UI_ELEMENT_BUTTON){
    a3ca:	7a6b      	ldrb	r3, [r5, #9]
    a3cc:	2b02      	cmp	r3, #2
    a3ce:	d129      	bne.n	a424 <grid_ui_event_generate_eventstring+0x84>
		if (event_type == GRID_UI_EVENT_INIT){
    a3d0:	b99c      	cbnz	r4, a3fa <grid_ui_event_generate_eventstring+0x5a>
			sprintf(event_string, GRID_EVENTSTRING_INIT_BUT); // !!
    a3d2:	4920      	ldr	r1, [pc, #128]	; (a454 <grid_ui_event_generate_eventstring+0xb4>)
			sprintf(event_string, GRID_EVENTSTRING_PUSHROT_ENC); // !!
    a3d4:	4b20      	ldr	r3, [pc, #128]	; (a458 <grid_ui_event_generate_eventstring+0xb8>)
    a3d6:	4668      	mov	r0, sp
    a3d8:	4798      	blx	r3
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    a3da:	4b20      	ldr	r3, [pc, #128]	; (a45c <grid_ui_event_generate_eventstring+0xbc>)
    a3dc:	4668      	mov	r0, sp
    a3de:	4798      	blx	r3
    a3e0:	466a      	mov	r2, sp
    a3e2:	4603      	mov	r3, r0
    a3e4:	4621      	mov	r1, r4
    a3e6:	e014      	b.n	a412 <grid_ui_event_generate_eventstring+0x72>
		if (ele->event_list[i].type == event_type){
    a3e8:	6e29      	ldr	r1, [r5, #96]	; 0x60
    a3ea:	fb07 1103 	mla	r1, r7, r3, r1
    a3ee:	3301      	adds	r3, #1
    a3f0:	7a89      	ldrb	r1, [r1, #10]
    a3f2:	42a1      	cmp	r1, r4
    a3f4:	bf08      	it	eq
    a3f6:	4602      	moveq	r2, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a3f8:	e7dc      	b.n	a3b4 <grid_ui_event_generate_eventstring+0x14>
		else if (event_type == GRID_UI_EVENT_DP){
    a3fa:	2c04      	cmp	r4, #4
    a3fc:	d10e      	bne.n	a41c <grid_ui_event_generate_eventstring+0x7c>
			sprintf(event_string, GRID_EVENTSTRING_DP_BUT); // !!
    a3fe:	4918      	ldr	r1, [pc, #96]	; (a460 <grid_ui_event_generate_eventstring+0xc0>)
    a400:	4b15      	ldr	r3, [pc, #84]	; (a458 <grid_ui_event_generate_eventstring+0xb8>)
    a402:	4668      	mov	r0, sp
    a404:	4798      	blx	r3
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    a406:	4b15      	ldr	r3, [pc, #84]	; (a45c <grid_ui_event_generate_eventstring+0xbc>)
    a408:	4668      	mov	r0, sp
    a40a:	4798      	blx	r3
    a40c:	466a      	mov	r2, sp
    a40e:	4603      	mov	r3, r0
    a410:	2104      	movs	r1, #4
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    a412:	4c14      	ldr	r4, [pc, #80]	; (a464 <grid_ui_event_generate_eventstring+0xc4>)
    a414:	4628      	mov	r0, r5
    a416:	47a0      	blx	r4
}
    a418:	b009      	add	sp, #36	; 0x24
    a41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (event_type == GRID_UI_EVENT_DR){
    a41c:	2c05      	cmp	r4, #5
    a41e:	d1fb      	bne.n	a418 <grid_ui_event_generate_eventstring+0x78>
			sprintf(event_string, GRID_EVENTSTRING_DR_BUT); // !!
    a420:	4911      	ldr	r1, [pc, #68]	; (a468 <grid_ui_event_generate_eventstring+0xc8>)
    a422:	e7d7      	b.n	a3d4 <grid_ui_event_generate_eventstring+0x34>
	else if (ele->type == GRID_UI_ELEMENT_POTENTIOMETER){
    a424:	2b01      	cmp	r3, #1
    a426:	d106      	bne.n	a436 <grid_ui_event_generate_eventstring+0x96>
		if (event_type == GRID_UI_EVENT_INIT){
    a428:	b90c      	cbnz	r4, a42e <grid_ui_event_generate_eventstring+0x8e>
			sprintf(event_string, GRID_EVENTSTRING_INIT_POT); // !!
    a42a:	4910      	ldr	r1, [pc, #64]	; (a46c <grid_ui_event_generate_eventstring+0xcc>)
    a42c:	e7d2      	b.n	a3d4 <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_AVC7){
    a42e:	2c01      	cmp	r4, #1
    a430:	d1f2      	bne.n	a418 <grid_ui_event_generate_eventstring+0x78>
			sprintf(event_string, GRID_EVENTSTRING_AVC7_POT); // !!
    a432:	490f      	ldr	r1, [pc, #60]	; (a470 <grid_ui_event_generate_eventstring+0xd0>)
    a434:	e7ce      	b.n	a3d4 <grid_ui_event_generate_eventstring+0x34>
	else if (ele->type == GRID_UI_ELEMENT_ENCODER){
    a436:	2b03      	cmp	r3, #3
    a438:	d1ee      	bne.n	a418 <grid_ui_event_generate_eventstring+0x78>
		if (event_type == GRID_UI_EVENT_INIT){
    a43a:	b90c      	cbnz	r4, a440 <grid_ui_event_generate_eventstring+0xa0>
			sprintf(event_string, GRID_EVENTSTRING_INIT_ENC); // !!
    a43c:	490d      	ldr	r1, [pc, #52]	; (a474 <grid_ui_event_generate_eventstring+0xd4>)
    a43e:	e7c9      	b.n	a3d4 <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_AVC7){
    a440:	2c01      	cmp	r4, #1
    a442:	d101      	bne.n	a448 <grid_ui_event_generate_eventstring+0xa8>
			sprintf(event_string, GRID_EVENTSTRING_AVC7_ENC); // !!
    a444:	490c      	ldr	r1, [pc, #48]	; (a478 <grid_ui_event_generate_eventstring+0xd8>)
    a446:	e7c5      	b.n	a3d4 <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_ENCPUSHROT){
    a448:	2c0d      	cmp	r4, #13
    a44a:	d1d6      	bne.n	a3fa <grid_ui_event_generate_eventstring+0x5a>
			sprintf(event_string, GRID_EVENTSTRING_PUSHROT_ENC); // !!
    a44c:	490b      	ldr	r1, [pc, #44]	; (a47c <grid_ui_event_generate_eventstring+0xdc>)
    a44e:	e7c1      	b.n	a3d4 <grid_ui_event_generate_eventstring+0x34>
    a450:	00012519 	.word	0x00012519
    a454:	00014b76 	.word	0x00014b76
    a458:	00012bb9 	.word	0x00012bb9
    a45c:	00012c81 	.word	0x00012c81
    a460:	00014b85 	.word	0x00014b85
    a464:	0000a249 	.word	0x0000a249
    a468:	00014b94 	.word	0x00014b94
    a46c:	00014ba3 	.word	0x00014ba3
    a470:	00014bb2 	.word	0x00014bb2
    a474:	00014bc1 	.word	0x00014bc1
    a478:	00014bd0 	.word	0x00014bd0
    a47c:	00014bdf 	.word	0x00014bdf

0000a480 <grid_ui_event_init>:
void grid_ui_event_init(struct grid_ui_element* parent, uint8_t index, enum grid_ui_event_t event_type){
    a480:	b570      	push	{r4, r5, r6, lr}
	struct grid_ui_event* eve = &parent->event_list[index];
    a482:	f44f 7386 	mov.w	r3, #268	; 0x10c
    a486:	6e05      	ldr	r5, [r0, #96]	; 0x60
    a488:	434b      	muls	r3, r1
    a48a:	18ec      	adds	r4, r5, r3
void grid_ui_event_init(struct grid_ui_element* parent, uint8_t index, enum grid_ui_event_t event_type){
    a48c:	4616      	mov	r6, r2
	eve->index = index;
    a48e:	7221      	strb	r1, [r4, #8]
	eve->cfg_changed_flag = 0;
    a490:	2200      	movs	r2, #0
	eve->status = GRID_UI_STATUS_READY;
    a492:	2104      	movs	r1, #4
	eve->parent = parent;
    a494:	6060      	str	r0, [r4, #4]
	eve->cfg_changed_flag = 0;
    a496:	f884 2107 	strb.w	r2, [r4, #263]	; 0x107
	eve->type   = event_type;	
    a49a:	72a6      	strb	r6, [r4, #10]
	eve->status = GRID_UI_STATUS_READY;
    a49c:	54e9      	strb	r1, [r5, r3]
	for (uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    a49e:	f104 0110 	add.w	r1, r4, #16
    a4a2:	4623      	mov	r3, r4
    a4a4:	f104 052e 	add.w	r5, r4, #46	; 0x2e
		eve->event_string[i] = 0;
    a4a8:	f801 2b01 	strb.w	r2, [r1], #1
	for (uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    a4ac:	42a9      	cmp	r1, r5
    a4ae:	d1fb      	bne.n	a4a8 <grid_ui_event_init+0x28>
	eve->event_string_length = 0;
    a4b0:	60e2      	str	r2, [r4, #12]
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    a4b2:	f104 0148 	add.w	r1, r4, #72	; 0x48
    a4b6:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
		eve->action_string[i] = 0;
    a4ba:	2200      	movs	r2, #0
    a4bc:	f801 2b01 	strb.w	r2, [r1], #1
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    a4c0:	42a9      	cmp	r1, r5
    a4c2:	d1fb      	bne.n	a4bc <grid_ui_event_init+0x3c>
	eve->action_string_length = 0;
    a4c4:	6462      	str	r2, [r4, #68]	; 0x44
	eve->event_parameter_count = 0;
    a4c6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	for (uint32_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    a4ca:	f104 0114 	add.w	r1, r4, #20
	eve->event_parameter_count = 0;
    a4ce:	4625      	mov	r5, r4
		eve->event_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    a4d0:	2200      	movs	r2, #0
    a4d2:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
		eve->event_parameter_list[i].address = 0;
    a4d6:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
		eve->event_parameter_list[i].offset = 0;
    a4da:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
		eve->event_parameter_list[i].length = 0;
    a4de:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
	for (uint32_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    a4e2:	3505      	adds	r5, #5
    a4e4:	428d      	cmp	r5, r1
    a4e6:	d1f4      	bne.n	a4d2 <grid_ui_event_init+0x52>
	eve->action_parameter_count = 0;
    a4e8:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		eve->action_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    a4ec:	2500      	movs	r5, #0
    a4ee:	f104 0246 	add.w	r2, r4, #70	; 0x46
    a4f2:	f883 50c1 	strb.w	r5, [r3, #193]	; 0xc1
		eve->action_parameter_list[i].address = 0;
    a4f6:	f883 50c3 	strb.w	r5, [r3, #195]	; 0xc3
		eve->action_parameter_list[i].offset = 0;
    a4fa:	f883 50c5 	strb.w	r5, [r3, #197]	; 0xc5
		eve->action_parameter_list[i].length = 0;
    a4fe:	f883 50c4 	strb.w	r5, [r3, #196]	; 0xc4
	for (uint32_t i=0; i<GRID_UI_ACTION_PARAMETER_maxcount; i++){
    a502:	3305      	adds	r3, #5
    a504:	429a      	cmp	r2, r3
    a506:	d1f4      	bne.n	a4f2 <grid_ui_event_init+0x72>
	grid_ui_event_generate_eventstring(eve->parent, event_type);
    a508:	4b06      	ldr	r3, [pc, #24]	; (a524 <grid_ui_event_init+0xa4>)
    a50a:	4631      	mov	r1, r6
    a50c:	4798      	blx	r3
	grid_ui_event_generate_actionstring(eve->parent, event_type);	
    a50e:	4b06      	ldr	r3, [pc, #24]	; (a528 <grid_ui_event_init+0xa8>)
    a510:	6860      	ldr	r0, [r4, #4]
    a512:	4631      	mov	r1, r6
    a514:	4798      	blx	r3
	eve->cfg_default_flag = 1;
    a516:	f240 1301 	movw	r3, #257	; 0x101
	eve->cfg_changed_flag = 0;
    a51a:	f884 5107 	strb.w	r5, [r4, #263]	; 0x107
	eve->cfg_default_flag = 1;
    a51e:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
}
    a522:	bd70      	pop	{r4, r5, r6, pc}
    a524:	0000a3a1 	.word	0x0000a3a1
    a528:	0000a04d 	.word	0x0000a04d

0000a52c <grid_ui_element_init>:
void grid_ui_element_init(struct grid_ui_bank* parent, uint8_t index, enum grid_ui_element_t element_type){
    a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct grid_ui_element* ele = &parent->element_list[index];
    a530:	2364      	movs	r3, #100	; 0x64
void grid_ui_element_init(struct grid_ui_bank* parent, uint8_t index, enum grid_ui_element_t element_type){
    a532:	4615      	mov	r5, r2
	struct grid_ui_element* ele = &parent->element_list[index];
    a534:	68c2      	ldr	r2, [r0, #12]
    a536:	fb11 f303 	smulbb	r3, r1, r3
    a53a:	18d4      	adds	r4, r2, r3
	ele->index = index;
    a53c:	7221      	strb	r1, [r4, #8]
	ele->status = GRID_UI_STATUS_INITIALIZED;
    a53e:	2101      	movs	r1, #1
	ele->parent = parent;
    a540:	6060      	str	r0, [r4, #4]
	ele->status = GRID_UI_STATUS_INITIALIZED;
    a542:	54d1      	strb	r1, [r2, r3]
	ele->type = element_type;
    a544:	7265      	strb	r5, [r4, #9]
	for(uint8_t i=0; i<GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH; i++){
    a546:	f104 030c 	add.w	r3, r4, #12
    a54a:	f104 025c 	add.w	r2, r4, #92	; 0x5c
		ele->template_parameter_list[i] = 0;
    a54e:	2100      	movs	r1, #0
    a550:	f843 1b04 	str.w	r1, [r3], #4
	for(uint8_t i=0; i<GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH; i++){
    a554:	429a      	cmp	r2, r3
    a556:	d1fb      	bne.n	a550 <grid_ui_element_init+0x24>
	if (element_type == GRID_UI_ELEMENT_SYSTEM){
    a558:	bb1d      	cbnz	r5, a5a2 <grid_ui_element_init+0x76>
		ele->event_list_length = 6;
    a55a:	2306      	movs	r3, #6
    a55c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a560:	f44f 60c9 	mov.w	r0, #1608	; 0x648
    a564:	4b34      	ldr	r3, [pc, #208]	; (a638 <grid_ui_element_init+0x10c>)
    a566:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a568:	462a      	mov	r2, r5
    a56a:	4629      	mov	r1, r5
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a56c:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a56e:	4d33      	ldr	r5, [pc, #204]	; (a63c <grid_ui_element_init+0x110>)
    a570:	4620      	mov	r0, r4
    a572:	47a8      	blx	r5
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_HEARTBEAT); // Heartbeat
    a574:	220c      	movs	r2, #12
    a576:	2101      	movs	r1, #1
    a578:	4620      	mov	r0, r4
    a57a:	47a8      	blx	r5
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_MAPMODE_PRESS); // Mapmode press
    a57c:	2207      	movs	r2, #7
    a57e:	2102      	movs	r1, #2
    a580:	4620      	mov	r0, r4
    a582:	47a8      	blx	r5
		grid_ui_event_init(ele, 3, GRID_UI_EVENT_MAPMODE_RELEASE); // Mapmode release
    a584:	2208      	movs	r2, #8
    a586:	2103      	movs	r1, #3
    a588:	4620      	mov	r0, r4
    a58a:	47a8      	blx	r5
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_CFG_RESPONSE); //
    a58c:	2209      	movs	r2, #9
    a58e:	2104      	movs	r1, #4
    a590:	4620      	mov	r0, r4
    a592:	47a8      	blx	r5
		grid_ui_event_init(ele, 5, GRID_UI_EVENT_CFG_REQUEST); //
    a594:	220a      	movs	r2, #10
    a596:	2105      	movs	r1, #5
    a598:	4620      	mov	r0, r4
    a59a:	462b      	mov	r3, r5
}
    a59c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    a5a0:	4718      	bx	r3
	else if (element_type == GRID_UI_ELEMENT_POTENTIOMETER){
    a5a2:	2d01      	cmp	r5, #1
    a5a4:	d111      	bne.n	a5ca <grid_ui_element_init+0x9e>
		ele->event_list_length = 2;
    a5a6:	2302      	movs	r3, #2
    a5a8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a5ac:	f44f 7006 	mov.w	r0, #536	; 0x218
    a5b0:	4b21      	ldr	r3, [pc, #132]	; (a638 <grid_ui_element_init+0x10c>)
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a5b2:	4e22      	ldr	r6, [pc, #136]	; (a63c <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a5b4:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a5b6:	2200      	movs	r2, #0
    a5b8:	4611      	mov	r1, r2
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a5ba:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a5bc:	4620      	mov	r0, r4
    a5be:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    a5c0:	462a      	mov	r2, r5
    a5c2:	4629      	mov	r1, r5
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    a5c4:	4620      	mov	r0, r4
    a5c6:	4633      	mov	r3, r6
    a5c8:	e7e8      	b.n	a59c <grid_ui_element_init+0x70>
	else if (element_type == GRID_UI_ELEMENT_BUTTON){
    a5ca:	2d02      	cmp	r5, #2
    a5cc:	d113      	bne.n	a5f6 <grid_ui_element_init+0xca>
		ele->event_list_length = 3;
    a5ce:	2303      	movs	r3, #3
    a5d0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a5d4:	f44f 7049 	mov.w	r0, #804	; 0x324
    a5d8:	4b17      	ldr	r3, [pc, #92]	; (a638 <grid_ui_element_init+0x10c>)
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a5da:	4e18      	ldr	r6, [pc, #96]	; (a63c <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a5dc:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a5de:	2200      	movs	r2, #0
    a5e0:	4611      	mov	r1, r2
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a5e2:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a5e4:	4620      	mov	r0, r4
    a5e6:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_DP);	// Press
    a5e8:	2204      	movs	r2, #4
    a5ea:	2101      	movs	r1, #1
    a5ec:	4620      	mov	r0, r4
    a5ee:	47b0      	blx	r6
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_DR);	// Release
    a5f0:	2205      	movs	r2, #5
    a5f2:	4629      	mov	r1, r5
    a5f4:	e7e6      	b.n	a5c4 <grid_ui_element_init+0x98>
	else if (element_type == GRID_UI_ELEMENT_ENCODER){
    a5f6:	2d03      	cmp	r5, #3
    a5f8:	d11b      	bne.n	a632 <grid_ui_element_init+0x106>
		ele->event_list_length = 5;
    a5fa:	2705      	movs	r7, #5
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a5fc:	4b0e      	ldr	r3, [pc, #56]	; (a638 <grid_ui_element_init+0x10c>)
		ele->event_list_length = 5;
    a5fe:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a602:	f240 503c 	movw	r0, #1340	; 0x53c
    a606:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a608:	2200      	movs	r2, #0
    a60a:	4e0c      	ldr	r6, [pc, #48]	; (a63c <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    a60c:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    a60e:	4611      	mov	r1, r2
    a610:	4620      	mov	r0, r4
    a612:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_DP);	// Press
    a614:	2204      	movs	r2, #4
    a616:	2101      	movs	r1, #1
    a618:	4620      	mov	r0, r4
    a61a:	47b0      	blx	r6
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_DR);	// Release
    a61c:	463a      	mov	r2, r7
    a61e:	2102      	movs	r1, #2
    a620:	4620      	mov	r0, r4
    a622:	47b0      	blx	r6
		grid_ui_event_init(ele, 3, GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    a624:	2201      	movs	r2, #1
    a626:	4629      	mov	r1, r5
    a628:	4620      	mov	r0, r4
    a62a:	47b0      	blx	r6
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    a62c:	220d      	movs	r2, #13
    a62e:	2104      	movs	r1, #4
    a630:	e7c8      	b.n	a5c4 <grid_ui_element_init+0x98>
}
    a632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a636:	bf00      	nop
    a638:	000123c5 	.word	0x000123c5
    a63c:	0000a481 	.word	0x0000a481

0000a640 <grid_ui_smart_trigger_local>:
void grid_ui_smart_trigger_local(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    a640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a642:	4605      	mov	r5, r0
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a644:	010f      	lsls	r7, r1, #4
void grid_ui_smart_trigger_local(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    a646:	4608      	mov	r0, r1
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a648:	2164      	movs	r1, #100	; 0x64
    a64a:	fb02 f401 	mul.w	r4, r2, r1
    a64e:	686a      	ldr	r2, [r5, #4]
    a650:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    a654:	4619      	mov	r1, r3
    a656:	68d6      	ldr	r6, [r2, #12]
    a658:	4b0b      	ldr	r3, [pc, #44]	; (a688 <grid_ui_smart_trigger_local+0x48>)
    a65a:	4426      	add	r6, r4
    a65c:	4630      	mov	r0, r6
    a65e:	4798      	blx	r3
	if (event_index == 255){
    a660:	28ff      	cmp	r0, #255	; 0xff
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    a662:	4601      	mov	r1, r0
	if (event_index == 255){
    a664:	d00d      	beq.n	a682 <grid_ui_smart_trigger_local+0x42>
	grid_ui_event_template_action(&mod->bank_list[bank].element_list[element], event_index);
    a666:	9001      	str	r0, [sp, #4]
    a668:	4b08      	ldr	r3, [pc, #32]	; (a68c <grid_ui_smart_trigger_local+0x4c>)
    a66a:	4630      	mov	r0, r6
    a66c:	4798      	blx	r3
    grid_ui_event_trigger_local(&mod->bank_list[bank].element_list[element], event_index);
    a66e:	686b      	ldr	r3, [r5, #4]
    a670:	9901      	ldr	r1, [sp, #4]
    a672:	443b      	add	r3, r7
    a674:	68d8      	ldr	r0, [r3, #12]
    a676:	4b06      	ldr	r3, [pc, #24]	; (a690 <grid_ui_smart_trigger_local+0x50>)
    a678:	4420      	add	r0, r4
}
    a67a:	b003      	add	sp, #12
    a67c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    grid_ui_event_trigger_local(&mod->bank_list[bank].element_list[element], event_index);
    a680:	4718      	bx	r3
}
    a682:	b003      	add	sp, #12
    a684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a686:	bf00      	nop
    a688:	0000979d 	.word	0x0000979d
    a68c:	00009cf5 	.word	0x00009cf5
    a690:	000097db 	.word	0x000097db

0000a694 <grid_ui_reinit_local>:
void grid_ui_reinit_local(struct grid_ui_model* ui){
    a694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a698:	4604      	mov	r4, r0
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    a69a:	f04f 0800 	mov.w	r8, #0
    a69e:	7863      	ldrb	r3, [r4, #1]
    a6a0:	fa5f f788 	uxtb.w	r7, r8
    a6a4:	42bb      	cmp	r3, r7
    a6a6:	d805      	bhi.n	a6b4 <grid_ui_reinit_local+0x20>
	grid_sys_state.bank_active_changed = 1;
    a6a8:	4b1d      	ldr	r3, [pc, #116]	; (a720 <grid_ui_reinit_local+0x8c>)
    a6aa:	2201      	movs	r2, #1
    a6ac:	745a      	strb	r2, [r3, #17]
}
    a6ae:	b003      	add	sp, #12
    a6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct grid_ui_bank* bank = &ui->bank_list[i];
    a6b4:	6866      	ldr	r6, [r4, #4]
    a6b6:	eb06 1307 	add.w	r3, r6, r7, lsl #4
    a6ba:	9300      	str	r3, [sp, #0]
		for (uint8_t j=0; j<bank->element_list_length; j++){
    a6bc:	f04f 0900 	mov.w	r9, #0
    a6c0:	9b00      	ldr	r3, [sp, #0]
    a6c2:	7a5b      	ldrb	r3, [r3, #9]
    a6c4:	fa5f fb89 	uxtb.w	fp, r9
    a6c8:	455b      	cmp	r3, fp
    a6ca:	d802      	bhi.n	a6d2 <grid_ui_reinit_local+0x3e>
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    a6cc:	f108 0801 	add.w	r8, r8, #1
    a6d0:	e7e5      	b.n	a69e <grid_ui_reinit_local+0xa>
			struct grid_ui_element* ele = &bank->element_list[j];
    a6d2:	9b00      	ldr	r3, [sp, #0]
    a6d4:	68db      	ldr	r3, [r3, #12]
    a6d6:	2564      	movs	r5, #100	; 0x64
    a6d8:	fb05 350b 	mla	r5, r5, fp, r3
			for (uint8_t k=0; k<ele->event_list_length; k++){
    a6dc:	f04f 0a00 	mov.w	sl, #0
    a6e0:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    a6e4:	fa5f f38a 	uxtb.w	r3, sl
    a6e8:	4299      	cmp	r1, r3
    a6ea:	d802      	bhi.n	a6f2 <grid_ui_reinit_local+0x5e>
		for (uint8_t j=0; j<bank->element_list_length; j++){
    a6ec:	f109 0901 	add.w	r9, r9, #1
    a6f0:	e7e6      	b.n	a6c0 <grid_ui_reinit_local+0x2c>
				struct grid_ui_event* eve = &ele->event_list[k];
    a6f2:	6e29      	ldr	r1, [r5, #96]	; 0x60
                grid_ui_smart_trigger_local(ui, i, j, eve->type);
    a6f4:	4e0b      	ldr	r6, [pc, #44]	; (a724 <grid_ui_reinit_local+0x90>)
				struct grid_ui_event* eve = &ele->event_list[k];
    a6f6:	f44f 7286 	mov.w	r2, #268	; 0x10c
    a6fa:	fb02 1303 	mla	r3, r2, r3, r1
				grid_ui_event_generate_actionstring(ele, eve->type);
    a6fe:	9301      	str	r3, [sp, #4]
    a700:	7a99      	ldrb	r1, [r3, #10]
    a702:	4b09      	ldr	r3, [pc, #36]	; (a728 <grid_ui_reinit_local+0x94>)
    a704:	4628      	mov	r0, r5
    a706:	4798      	blx	r3
	eve->trigger = GRID_UI_STATUS_READY;
    a708:	9b01      	ldr	r3, [sp, #4]
    a70a:	2104      	movs	r1, #4
    a70c:	7259      	strb	r1, [r3, #9]
                grid_ui_smart_trigger_local(ui, i, j, eve->type);
    a70e:	465a      	mov	r2, fp
    a710:	7a9b      	ldrb	r3, [r3, #10]
    a712:	4639      	mov	r1, r7
    a714:	4620      	mov	r0, r4
    a716:	47b0      	blx	r6
			for (uint8_t k=0; k<ele->event_list_length; k++){
    a718:	f10a 0a01 	add.w	sl, sl, #1
    a71c:	e7e0      	b.n	a6e0 <grid_ui_reinit_local+0x4c>
    a71e:	bf00      	nop
    a720:	20006f94 	.word	0x20006f94
    a724:	0000a641 	.word	0x0000a641
    a728:	0000a04d 	.word	0x0000a04d

0000a72c <grid_usb_serial_bulkout_cb>:
	//grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	
	//cdcdf_acm_write(cdcdf_demo_buf, count); /* Echo data */
	return false;                           /* No error. */
}
    a72c:	2000      	movs	r0, #0
    a72e:	4770      	bx	lr

0000a730 <grid_usb_serial_statechange_cb>:

//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS); /* Another read */
	return false;                                                                                 /* No error. */
}
static bool grid_usb_serial_statechange_cb(usb_cdc_control_signal_t state)
{
    a730:	b513      	push	{r0, r1, r4, lr}
	
	//grid_sys_alert_set_alert(&grid_sys_state, 0,255,255,2,300);
	
	if (state.rs232.DTR || 1) {
		/* After connection the R/W callbacks can be registered */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)grid_usb_serial_bulkout_cb);
    a732:	4c06      	ldr	r4, [pc, #24]	; (a74c <grid_usb_serial_statechange_cb+0x1c>)
{
    a734:	f8ad 0004 	strh.w	r0, [sp, #4]
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)grid_usb_serial_bulkout_cb);
    a738:	4905      	ldr	r1, [pc, #20]	; (a750 <grid_usb_serial_statechange_cb+0x20>)
    a73a:	2000      	movs	r0, #0
    a73c:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)grid_usb_serial_bulkin_cb);
    a73e:	4905      	ldr	r1, [pc, #20]	; (a754 <grid_usb_serial_statechange_cb+0x24>)
    a740:	2001      	movs	r0, #1
    a742:	47a0      	blx	r4
		/* Start Rx */
		//cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	}
	return false; /* No error. */
}
    a744:	2000      	movs	r0, #0
    a746:	b002      	add	sp, #8
    a748:	bd10      	pop	{r4, pc}
    a74a:	bf00      	nop
    a74c:	0000b301 	.word	0x0000b301
    a750:	0000a72d 	.word	0x0000a72d
    a754:	0000a7a9 	.word	0x0000a7a9

0000a758 <grid_usb_midi_bulkin_cb>:

	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
	return false;
}
static bool grid_usb_midi_bulkin_cb(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    a758:	b513      	push	{r0, r1, r4, lr}

	grid_sys_alert_set_alert(&grid_sys_state, 255,0,255,2,300);
    a75a:	2302      	movs	r3, #2
    a75c:	f44f 7296 	mov.w	r2, #300	; 0x12c
    a760:	e9cd 3200 	strd	r3, r2, [sp]
    a764:	23ff      	movs	r3, #255	; 0xff
    a766:	4804      	ldr	r0, [pc, #16]	; (a778 <grid_usb_midi_bulkin_cb+0x20>)
    a768:	4c04      	ldr	r4, [pc, #16]	; (a77c <grid_usb_midi_bulkin_cb+0x24>)
    a76a:	2200      	movs	r2, #0
    a76c:	4619      	mov	r1, r3
    a76e:	47a0      	blx	r4
	return false;
}
    a770:	2000      	movs	r0, #0
    a772:	b002      	add	sp, #8
    a774:	bd10      	pop	{r4, pc}
    a776:	bf00      	nop
    a778:	20006f94 	.word	0x20006f94
    a77c:	00008ff3 	.word	0x00008ff3

0000a780 <grid_usb_midi_bulkout_cb>:
{
    a780:	b513      	push	{r0, r1, r4, lr}
	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
    a782:	2302      	movs	r3, #2
    a784:	f44f 7296 	mov.w	r2, #300	; 0x12c
    a788:	e9cd 3200 	strd	r3, r2, [sp]
    a78c:	22ff      	movs	r2, #255	; 0xff
    a78e:	4804      	ldr	r0, [pc, #16]	; (a7a0 <grid_usb_midi_bulkout_cb+0x20>)
    a790:	4c04      	ldr	r4, [pc, #16]	; (a7a4 <grid_usb_midi_bulkout_cb+0x24>)
    a792:	2300      	movs	r3, #0
    a794:	4611      	mov	r1, r2
    a796:	47a0      	blx	r4
}
    a798:	2000      	movs	r0, #0
    a79a:	b002      	add	sp, #8
    a79c:	bd10      	pop	{r4, pc}
    a79e:	bf00      	nop
    a7a0:	20006f94 	.word	0x20006f94
    a7a4:	00008ff3 	.word	0x00008ff3

0000a7a8 <grid_usb_serial_bulkin_cb>:
    a7a8:	2000      	movs	r0, #0
    a7aa:	4770      	bx	lr

0000a7ac <grid_usb_serial_init>:
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)grid_usb_serial_statechange_cb);
    a7ac:	4901      	ldr	r1, [pc, #4]	; (a7b4 <grid_usb_serial_init+0x8>)
    a7ae:	4b02      	ldr	r3, [pc, #8]	; (a7b8 <grid_usb_serial_init+0xc>)
    a7b0:	2003      	movs	r0, #3
    a7b2:	4718      	bx	r3
    a7b4:	0000a731 	.word	0x0000a731
    a7b8:	0000b301 	.word	0x0000b301

0000a7bc <grid_keyboard_cleanup>:
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
	
	uint8_t changed_flag = 0;
	
	// Remove all inactive (released) keys
	for(uint8_t i=0; i<kb->key_active_count; i++){
    a7bc:	2300      	movs	r3, #0
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
    a7be:	b5f0      	push	{r4, r5, r6, r7, lr}
			
			changed_flag = 1;
			
			kb->key_list[i].ismodifier = 0;
			kb->key_list[i].ispressed = 0;
			kb->key_list[i].keycode = 255;	
    a7c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
    a7c4:	4604      	mov	r4, r0
			// Pop item, move each remaining after this forvard one index
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
				
				kb->key_list[j-1] = kb->key_list[j];
				
				kb->key_list[j].ismodifier = 0;
    a7c6:	469e      	mov	lr, r3
	uint8_t changed_flag = 0;
    a7c8:	4618      	mov	r0, r3
	for(uint8_t i=0; i<kb->key_active_count; i++){
    a7ca:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
    a7ce:	429d      	cmp	r5, r3
    a7d0:	d800      	bhi.n	a7d4 <grid_keyboard_cleanup+0x18>
		// USB SEND
	}
	
	return changed_flag;
	
}
    a7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (kb->key_list[i].ispressed == false){
    a7d4:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    a7d8:	7d8f      	ldrb	r7, [r1, #22]
    a7da:	b98f      	cbnz	r7, a800 <grid_keyboard_cleanup+0x44>
    a7dc:	1c5a      	adds	r2, r3, #1
    a7de:	b2d6      	uxtb	r6, r2
			kb->key_list[i].ismodifier = 0;
    a7e0:	754f      	strb	r7, [r1, #21]
			kb->key_list[i].ispressed = 0;
    a7e2:	758f      	strb	r7, [r1, #22]
			kb->key_list[i].keycode = 255;	
    a7e4:	f881 c014 	strb.w	ip, [r1, #20]
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    a7e8:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    a7ec:	42b5      	cmp	r5, r6
    a7ee:	f102 0208 	add.w	r2, r2, #8
    a7f2:	d108      	bne.n	a806 <grid_keyboard_cleanup+0x4a>
			kb->key_active_count--;
    a7f4:	3d01      	subs	r5, #1
			i--; // Retest this index, because it now points to a new item
    a7f6:	3b01      	subs	r3, #1
			kb->key_active_count--;
    a7f8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
			i--; // Retest this index, because it now points to a new item
    a7fc:	b2db      	uxtb	r3, r3
			changed_flag = 1;
    a7fe:	2001      	movs	r0, #1
	for(uint8_t i=0; i<kb->key_active_count; i++){
    a800:	3301      	adds	r3, #1
    a802:	b2db      	uxtb	r3, r3
    a804:	e7e1      	b.n	a7ca <grid_keyboard_cleanup+0xe>
				kb->key_list[j-1] = kb->key_list[j];
    a806:	e9d2 0103 	ldrd	r0, r1, [r2, #12]
    a80a:	1d17      	adds	r7, r2, #4
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    a80c:	3601      	adds	r6, #1
				kb->key_list[j-1] = kb->key_list[j];
    a80e:	e887 0003 	stmia.w	r7, {r0, r1}
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    a812:	b2f6      	uxtb	r6, r6
				kb->key_list[j].ismodifier = 0;
    a814:	f882 e00d 	strb.w	lr, [r2, #13]
				kb->key_list[j].ispressed = 0;
    a818:	f882 e00e 	strb.w	lr, [r2, #14]
				kb->key_list[j].keycode = 255;
    a81c:	f882 c00c 	strb.w	ip, [r2, #12]
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    a820:	e7e4      	b.n	a7ec <grid_keyboard_cleanup+0x30>
	...

0000a824 <grid_keyboard_keychange>:


uint8_t grid_keyboard_keychange(struct grid_keyboard_model* kb, struct grid_keyboard_event_desc* key){
    a824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a828:	4604      	mov	r4, r0
	uint8_t item_index = 255;
	uint8_t remove_flag = 0;
	uint8_t changed_flag = 0;
	

	grid_keyboard_cleanup(kb);
    a82a:	f8df 814c 	ldr.w	r8, [pc, #332]	; a978 <grid_keyboard_keychange+0x154>
uint8_t grid_keyboard_keychange(struct grid_keyboard_model* kb, struct grid_keyboard_event_desc* key){
    a82e:	b0ec      	sub	sp, #432	; 0x1b0
    a830:	460d      	mov	r5, r1
	grid_keyboard_cleanup(kb);
    a832:	47c0      	blx	r8
	

	for(uint8_t i=0; i<kb->key_active_count; i++){
    a834:	2200      	movs	r2, #0
    a836:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    a83a:	4626      	mov	r6, r4
    a83c:	4623      	mov	r3, r4
	uint8_t changed_flag = 0;
    a83e:	4691      	mov	r9, r2
	uint8_t item_index = 255;
    a840:	27ff      	movs	r7, #255	; 0xff
				if (key->ispressed == true){
					// OK nothing to do here
				}
				else{
					// Release the damn key
					kb->key_list[i].ispressed = false;
    a842:	4696      	mov	lr, r2
    a844:	b2d1      	uxtb	r1, r2
	for(uint8_t i=0; i<kb->key_active_count; i++){
    a846:	458c      	cmp	ip, r1
    a848:	d82e      	bhi.n	a8a8 <grid_keyboard_keychange+0x84>
		}
		
	}
	
	
	uint8_t print_happened = grid_keyboard_cleanup(kb);
    a84a:	4620      	mov	r0, r4
    a84c:	47c0      	blx	r8
	
	
	if (item_index == 255){
    a84e:	2fff      	cmp	r7, #255	; 0xff
    a850:	d143      	bne.n	a8da <grid_keyboard_keychange+0xb6>
		
		// item not in list
		
		if (kb->key_active_count< GRID_KEYBOARD_KEY_maxcount){
    a852:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    a856:	2b05      	cmp	r3, #5
    a858:	d83f      	bhi.n	a8da <grid_keyboard_keychange+0xb6>
			
			if (key->ispressed == true){
    a85a:	78aa      	ldrb	r2, [r5, #2]
    a85c:	2a01      	cmp	r2, #1
    a85e:	d13c      	bne.n	a8da <grid_keyboard_keychange+0xb6>
				
				kb->key_list[kb->key_active_count] = *key;
    a860:	e895 0003 	ldmia.w	r5, {r0, r1}
    a864:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    a868:	3214      	adds	r2, #20
				kb->key_active_count++;
    a86a:	3301      	adds	r3, #1
				kb->key_list[kb->key_active_count] = *key;
    a86c:	e882 0003 	stmia.w	r2, {r0, r1}
				kb->key_active_count++;
    a870:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		}
		
	}
	
	
	if (changed_flag == 1){
    a874:	f104 0112 	add.w	r1, r4, #18
	uint8_t item_index = 255;
    a878:	4623      	mov	r3, r4
//		}
			
		
		for(uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++){
		
			kb->hid_key_array[i].b_modifier = kb->key_list[i].ismodifier;
    a87a:	7d72      	ldrb	r2, [r6, #21]
    a87c:	3a00      	subs	r2, #0
    a87e:	bf18      	it	ne
    a880:	2201      	movne	r2, #1
    a882:	705a      	strb	r2, [r3, #1]
			kb->hid_key_array[i].key_id = kb->key_list[i].keycode;
    a884:	7d32      	ldrb	r2, [r6, #20]
    a886:	701a      	strb	r2, [r3, #0]
			kb->hid_key_array[i].state = kb->key_list[i].ispressed;
    a888:	7db2      	ldrb	r2, [r6, #22]
    a88a:	709a      	strb	r2, [r3, #2]
		for(uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++){
    a88c:	3303      	adds	r3, #3
    a88e:	428b      	cmp	r3, r1
    a890:	f106 0608 	add.w	r6, r6, #8
    a894:	d1f1      	bne.n	a87a <grid_keyboard_keychange+0x56>
		
		}
        
        
        if (kb->isenabled){
    a896:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    a89a:	b325      	cbz	r5, a8e6 <grid_keyboard_keychange+0xc2>
            
            
    		hiddf_keyboard_keys_state_change(kb->hid_key_array, kb->key_active_count);    
    a89c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    a8a0:	4b2b      	ldr	r3, [pc, #172]	; (a950 <grid_keyboard_keychange+0x12c>)
    a8a2:	4620      	mov	r0, r4
    a8a4:	4798      	blx	r3
    a8a6:	e01b      	b.n	a8e0 <grid_keyboard_keychange+0xbc>
		if (kb->key_list[i].keycode == key->keycode && kb->key_list[i].ismodifier == key->ismodifier){
    a8a8:	f893 a014 	ldrb.w	sl, [r3, #20]
    a8ac:	7828      	ldrb	r0, [r5, #0]
    a8ae:	4582      	cmp	sl, r0
    a8b0:	d111      	bne.n	a8d6 <grid_keyboard_keychange+0xb2>
    a8b2:	f893 a015 	ldrb.w	sl, [r3, #21]
    a8b6:	7868      	ldrb	r0, [r5, #1]
    a8b8:	4582      	cmp	sl, r0
    a8ba:	d10c      	bne.n	a8d6 <grid_keyboard_keychange+0xb2>
			if (kb->key_list[i].ispressed == true){
    a8bc:	7d98      	ldrb	r0, [r3, #22]
    a8be:	2801      	cmp	r0, #1
    a8c0:	d105      	bne.n	a8ce <grid_keyboard_keychange+0xaa>
				if (key->ispressed == true){
    a8c2:	78af      	ldrb	r7, [r5, #2]
    a8c4:	2f01      	cmp	r7, #1
    a8c6:	d002      	beq.n	a8ce <grid_keyboard_keychange+0xaa>
					kb->key_list[i].ispressed = false;
    a8c8:	f883 e016 	strb.w	lr, [r3, #22]
					changed_flag = 1;
    a8cc:	4681      	mov	r9, r0
	for(uint8_t i=0; i<kb->key_active_count; i++){
    a8ce:	3201      	adds	r2, #1
    a8d0:	3308      	adds	r3, #8
	uint8_t item_index = 255;
    a8d2:	460f      	mov	r7, r1
    a8d4:	e7b6      	b.n	a844 <grid_keyboard_keychange+0x20>
    a8d6:	4639      	mov	r1, r7
    a8d8:	e7f9      	b.n	a8ce <grid_keyboard_keychange+0xaa>
	if (changed_flag == 1){
    a8da:	f1b9 0f00 	cmp.w	r9, #0
    a8de:	d1c9      	bne.n	a874 <grid_keyboard_keychange+0x50>
		
		
		// USB SEND
	}
	
}
    a8e0:	b06c      	add	sp, #432	; 0x1b0
    a8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            grid_msg_init(&response);
    a8e6:	a805      	add	r0, sp, #20
    a8e8:	4b1a      	ldr	r3, [pc, #104]	; (a954 <grid_keyboard_keychange+0x130>)
            grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a8ea:	4e1b      	ldr	r6, [pc, #108]	; (a958 <grid_keyboard_keychange+0x134>)
            grid_msg_init(&response);
    a8ec:	4798      	blx	r3
            grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a8ee:	227f      	movs	r2, #127	; 0x7f
    a8f0:	462b      	mov	r3, r5
    a8f2:	4611      	mov	r1, r2
    a8f4:	a805      	add	r0, sp, #20
    a8f6:	47b0      	blx	r6
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    a8f8:	2303      	movs	r3, #3
    a8fa:	4918      	ldr	r1, [pc, #96]	; (a95c <grid_keyboard_keychange+0x138>)
    a8fc:	9300      	str	r3, [sp, #0]
    a8fe:	2202      	movs	r2, #2
    a900:	4e17      	ldr	r6, [pc, #92]	; (a960 <grid_keyboard_keychange+0x13c>)
            uint8_t response_payload[10] = {0};
    a902:	f8ad 5010 	strh.w	r5, [sp, #16]
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    a906:	2392      	movs	r3, #146	; 0x92
    a908:	a802      	add	r0, sp, #8
            uint8_t response_payload[10] = {0};
    a90a:	e9cd 5502 	strd	r5, r5, [sp, #8]
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    a90e:	47b0      	blx	r6
            grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    a910:	4b14      	ldr	r3, [pc, #80]	; (a964 <grid_keyboard_keychange+0x140>)
    a912:	a802      	add	r0, sp, #8
    a914:	4798      	blx	r3
    a916:	a902      	add	r1, sp, #8
    a918:	4602      	mov	r2, r0
    a91a:	4b13      	ldr	r3, [pc, #76]	; (a968 <grid_keyboard_keychange+0x144>)
    a91c:	a805      	add	r0, sp, #20
    a91e:	4798      	blx	r3
            grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, kb->isenabled);
    a920:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    a924:	9300      	str	r3, [sp, #0]
    a926:	4c11      	ldr	r4, [pc, #68]	; (a96c <grid_keyboard_keychange+0x148>)
    a928:	4629      	mov	r1, r5
    a92a:	a805      	add	r0, sp, #20
    a92c:	2302      	movs	r3, #2
    a92e:	2205      	movs	r2, #5
    a930:	47a0      	blx	r4
            grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    a932:	230d      	movs	r3, #13
    a934:	9300      	str	r3, [sp, #0]
    a936:	2204      	movs	r2, #4
    a938:	4629      	mov	r1, r5
    a93a:	a805      	add	r0, sp, #20
    a93c:	2301      	movs	r3, #1
    a93e:	47a0      	blx	r4
            grid_msg_packet_close(&response);
    a940:	4b0b      	ldr	r3, [pc, #44]	; (a970 <grid_keyboard_keychange+0x14c>)
    a942:	a805      	add	r0, sp, #20
    a944:	4798      	blx	r3
            grid_msg_packet_send_everywhere(&response);
    a946:	4b0b      	ldr	r3, [pc, #44]	; (a974 <grid_keyboard_keychange+0x150>)
    a948:	a805      	add	r0, sp, #20
    a94a:	4798      	blx	r3
    a94c:	e7c8      	b.n	a8e0 <grid_keyboard_keychange+0xbc>
    a94e:	bf00      	nop
    a950:	0000d591 	.word	0x0000d591
    a954:	00007d8d 	.word	0x00007d8d
    a958:	00007dc1 	.word	0x00007dc1
    a95c:	00014764 	.word	0x00014764
    a960:	00012b75 	.word	0x00012b75
    a964:	00012c81 	.word	0x00012c81
    a968:	00007cfd 	.word	0x00007cfd
    a96c:	00007d71 	.word	0x00007d71
    a970:	00007eb9 	.word	0x00007eb9
    a974:	00007f8d 	.word	0x00007f8d
    a978:	0000a7bd 	.word	0x0000a7bd

0000a97c <grid_midi_buffer_init>:



void grid_midi_buffer_init(struct grid_midi_event_desc* buf, uint16_t length){
    a97c:	b510      	push	{r4, lr}
	
	
	for (uint16_t i=0; i<length; i++)
    a97e:	2300      	movs	r3, #0
	{
		buf[i].byte0 = 0;
    a980:	461a      	mov	r2, r3
	for (uint16_t i=0; i<length; i++)
    a982:	b29c      	uxth	r4, r3
    a984:	42a1      	cmp	r1, r4
    a986:	f100 0004 	add.w	r0, r0, #4
    a98a:	d800      	bhi.n	a98e <grid_midi_buffer_init+0x12>
		buf[i].byte1 = 0;
		buf[i].byte2 = 0;
		buf[i].byte3 = 0;
	}
	
}
    a98c:	bd10      	pop	{r4, pc}
		buf[i].byte0 = 0;
    a98e:	f800 2c04 	strb.w	r2, [r0, #-4]
		buf[i].byte1 = 0;
    a992:	f800 2c03 	strb.w	r2, [r0, #-3]
		buf[i].byte2 = 0;
    a996:	f800 2c02 	strb.w	r2, [r0, #-2]
		buf[i].byte3 = 0;
    a99a:	f800 2c01 	strb.w	r2, [r0, #-1]
	for (uint16_t i=0; i<length; i++)
    a99e:	3301      	adds	r3, #1
    a9a0:	e7ef      	b.n	a982 <grid_midi_buffer_init+0x6>
	...

0000a9a4 <grid_usb_midi_init>:
	grid_midi_tx_write_index = 0;
    a9a4:	4b0a      	ldr	r3, [pc, #40]	; (a9d0 <grid_usb_midi_init+0x2c>)
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    a9a6:	480b      	ldr	r0, [pc, #44]	; (a9d4 <grid_usb_midi_init+0x30>)
{
    a9a8:	b510      	push	{r4, lr}
	grid_midi_tx_write_index = 0;
    a9aa:	2400      	movs	r4, #0
    a9ac:	801c      	strh	r4, [r3, #0]
	grid_midi_tx_read_index = 0;
    a9ae:	4b0a      	ldr	r3, [pc, #40]	; (a9d8 <grid_usb_midi_init+0x34>)
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    a9b0:	f44f 7196 	mov.w	r1, #300	; 0x12c
	grid_midi_tx_read_index = 0;
    a9b4:	801c      	strh	r4, [r3, #0]
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    a9b6:	4b09      	ldr	r3, [pc, #36]	; (a9dc <grid_usb_midi_init+0x38>)
    a9b8:	4798      	blx	r3
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_READ, (FUNC_PTR)grid_usb_midi_bulkout_cb);
    a9ba:	4620      	mov	r0, r4
    a9bc:	4c08      	ldr	r4, [pc, #32]	; (a9e0 <grid_usb_midi_init+0x3c>)
    a9be:	4909      	ldr	r1, [pc, #36]	; (a9e4 <grid_usb_midi_init+0x40>)
    a9c0:	47a0      	blx	r4
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_WRITE, (FUNC_PTR)grid_usb_midi_bulkin_cb);
    a9c2:	4623      	mov	r3, r4
    a9c4:	4908      	ldr	r1, [pc, #32]	; (a9e8 <grid_usb_midi_init+0x44>)
}
    a9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_WRITE, (FUNC_PTR)grid_usb_midi_bulkin_cb);
    a9ca:	2001      	movs	r0, #1
    a9cc:	4718      	bx	r3
    a9ce:	bf00      	nop
    a9d0:	20004030 	.word	0x20004030
    a9d4:	2000b1ac 	.word	0x2000b1ac
    a9d8:	200081ec 	.word	0x200081ec
    a9dc:	0000a97d 	.word	0x0000a97d
    a9e0:	00004585 	.word	0x00004585
    a9e4:	0000a781 	.word	0x0000a781
    a9e8:	0000a759 	.word	0x0000a759

0000a9ec <grid_midi_tx_push>:

uint8_t grid_midi_tx_push(struct grid_midi_event_desc midi_event){


	grid_midi_tx_buffer[grid_midi_tx_write_index] = midi_event;
    a9ec:	4907      	ldr	r1, [pc, #28]	; (aa0c <grid_midi_tx_push+0x20>)
    a9ee:	4a08      	ldr	r2, [pc, #32]	; (aa10 <grid_midi_tx_push+0x24>)
    a9f0:	880b      	ldrh	r3, [r1, #0]
    a9f2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

	grid_midi_tx_write_index = (grid_midi_tx_write_index+1)%GRID_MIDI_TX_BUFFER_length;
    a9f6:	f44f 7096 	mov.w	r0, #300	; 0x12c
    a9fa:	3301      	adds	r3, #1
uint8_t grid_midi_tx_push(struct grid_midi_event_desc midi_event){
    a9fc:	b082      	sub	sp, #8
	grid_midi_tx_write_index = (grid_midi_tx_write_index+1)%GRID_MIDI_TX_BUFFER_length;
    a9fe:	fbb3 f2f0 	udiv	r2, r3, r0
    aa02:	fb00 3312 	mls	r3, r0, r2, r3
    aa06:	800b      	strh	r3, [r1, #0]




}
    aa08:	b002      	add	sp, #8
    aa0a:	4770      	bx	lr
    aa0c:	20004030 	.word	0x20004030
    aa10:	2000b1ac 	.word	0x2000b1ac

0000aa14 <grid_midi_tx_pop>:

uint8_t grid_midi_tx_pop(){
    aa14:	b538      	push	{r3, r4, r5, lr}

	if (grid_midi_tx_read_index != grid_midi_tx_write_index){
    aa16:	4c0f      	ldr	r4, [pc, #60]	; (aa54 <grid_midi_tx_pop+0x40>)
    aa18:	4b0f      	ldr	r3, [pc, #60]	; (aa58 <grid_midi_tx_pop+0x44>)
    aa1a:	8822      	ldrh	r2, [r4, #0]
    aa1c:	881b      	ldrh	r3, [r3, #0]
    aa1e:	429a      	cmp	r2, r3
    aa20:	d017      	beq.n	aa52 <grid_midi_tx_pop+0x3e>
		
		if (audiodf_midi_write_status() != USB_BUSY){
    aa22:	4b0e      	ldr	r3, [pc, #56]	; (aa5c <grid_midi_tx_pop+0x48>)
    aa24:	4798      	blx	r3
    aa26:	2801      	cmp	r0, #1
    aa28:	d013      	beq.n	aa52 <grid_midi_tx_pop+0x3e>

			uint8_t byte0 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte0;
    aa2a:	8825      	ldrh	r5, [r4, #0]
			uint8_t byte1 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte1;
			uint8_t byte2 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte2;
			uint8_t byte3 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte3;
    aa2c:	480c      	ldr	r0, [pc, #48]	; (aa60 <grid_midi_tx_pop+0x4c>)
    aa2e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
			
			audiodf_midi_write(byte0, byte1, byte2, byte3);
    aa32:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
    aa36:	78cb      	ldrb	r3, [r1, #3]
    aa38:	788a      	ldrb	r2, [r1, #2]
    aa3a:	4d0a      	ldr	r5, [pc, #40]	; (aa64 <grid_midi_tx_pop+0x50>)
    aa3c:	7849      	ldrb	r1, [r1, #1]
    aa3e:	47a8      	blx	r5

			grid_midi_tx_read_index = (grid_midi_tx_read_index+1)%GRID_MIDI_TX_BUFFER_length;
    aa40:	8823      	ldrh	r3, [r4, #0]
    aa42:	f44f 7196 	mov.w	r1, #300	; 0x12c
    aa46:	3301      	adds	r3, #1
    aa48:	fbb3 f2f1 	udiv	r2, r3, r1
    aa4c:	fb01 3312 	mls	r3, r1, r2, r3
    aa50:	8023      	strh	r3, [r4, #0]

		}
		
	}

}
    aa52:	bd38      	pop	{r3, r4, r5, pc}
    aa54:	200081ec 	.word	0x200081ec
    aa58:	20004030 	.word	0x20004030
    aa5c:	00004549 	.word	0x00004549
    aa60:	2000b1ac 	.word	0x2000b1ac
    aa64:	00004521 	.word	0x00004521

0000aa68 <grid_keyboard_buffer_init>:


void grid_keyboard_buffer_init(struct grid_keyboard_event_desc* buf, uint16_t length){
    aa68:	b510      	push	{r4, lr}
	
	
	for (uint16_t i=0; i<length; i++)
    aa6a:	2300      	movs	r3, #0
	{
		buf[i].ismodifier = 0;
    aa6c:	461a      	mov	r2, r3
	for (uint16_t i=0; i<length; i++)
    aa6e:	b29c      	uxth	r4, r3
    aa70:	42a1      	cmp	r1, r4
    aa72:	f100 0008 	add.w	r0, r0, #8
    aa76:	d800      	bhi.n	aa7a <grid_keyboard_buffer_init+0x12>
		buf[i].keycode = 0;
		buf[i].ispressed = 0;
		buf[i].delay = 0;
	}
	
}
    aa78:	bd10      	pop	{r4, pc}
		buf[i].ismodifier = 0;
    aa7a:	f800 2c07 	strb.w	r2, [r0, #-7]
		buf[i].keycode = 0;
    aa7e:	f800 2c08 	strb.w	r2, [r0, #-8]
		buf[i].ispressed = 0;
    aa82:	f800 2c06 	strb.w	r2, [r0, #-6]
		buf[i].delay = 0;
    aa86:	f840 2c04 	str.w	r2, [r0, #-4]
	for (uint16_t i=0; i<length; i++)
    aa8a:	3301      	adds	r3, #1
    aa8c:	e7ef      	b.n	aa6e <grid_keyboard_buffer_init+0x6>
	...

0000aa90 <grid_keyboard_init>:
void grid_keyboard_init(struct grid_keyboard_model* kb){
    aa90:	b570      	push	{r4, r5, r6, lr}
    grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    aa92:	4b13      	ldr	r3, [pc, #76]	; (aae0 <grid_keyboard_init+0x50>)
void grid_keyboard_init(struct grid_keyboard_model* kb){
    aa94:	4605      	mov	r5, r0
    grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    aa96:	4813      	ldr	r0, [pc, #76]	; (aae4 <grid_keyboard_init+0x54>)
    aa98:	4798      	blx	r3
    aa9a:	4b13      	ldr	r3, [pc, #76]	; (aae8 <grid_keyboard_init+0x58>)
    aa9c:	6018      	str	r0, [r3, #0]
    grid_keyboard_tx_write_index = 0;
    aa9e:	4b13      	ldr	r3, [pc, #76]	; (aaec <grid_keyboard_init+0x5c>)
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    aaa0:	4813      	ldr	r0, [pc, #76]	; (aaf0 <grid_keyboard_init+0x60>)
    grid_keyboard_tx_write_index = 0;
    aaa2:	2400      	movs	r4, #0
    aaa4:	801c      	strh	r4, [r3, #0]
	grid_keyboard_tx_read_index = 0;
    aaa6:	4b13      	ldr	r3, [pc, #76]	; (aaf4 <grid_keyboard_init+0x64>)
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    aaa8:	f44f 7196 	mov.w	r1, #300	; 0x12c
	grid_keyboard_tx_read_index = 0;
    aaac:	801c      	strh	r4, [r3, #0]
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    aaae:	4b12      	ldr	r3, [pc, #72]	; (aaf8 <grid_keyboard_init+0x68>)
    aab0:	4798      	blx	r3
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    aab2:	f105 0612 	add.w	r6, r5, #18
    aab6:	462a      	mov	r2, r5
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    aab8:	4629      	mov	r1, r5
		kb->hid_key_array[i].b_modifier = false;
    aaba:	4623      	mov	r3, r4
		kb->hid_key_array[i].key_id = 255;
    aabc:	20ff      	movs	r0, #255	; 0xff
		kb->hid_key_array[i].b_modifier = false;
    aabe:	7053      	strb	r3, [r2, #1]
		kb->hid_key_array[i].key_id = 255;
    aac0:	7010      	strb	r0, [r2, #0]
		kb->hid_key_array[i].state = HID_KB_KEY_UP;
    aac2:	7093      	strb	r3, [r2, #2]
		kb->key_list[i].ismodifier = 0;
    aac4:	3203      	adds	r2, #3
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    aac6:	42b2      	cmp	r2, r6
		kb->key_list[i].ismodifier = 0;
    aac8:	754b      	strb	r3, [r1, #21]
		kb->key_list[i].ispressed = 0;
    aaca:	758b      	strb	r3, [r1, #22]
		kb->key_list[i].keycode = 255;
    aacc:	7508      	strb	r0, [r1, #20]
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    aace:	f101 0108 	add.w	r1, r1, #8
    aad2:	d1f4      	bne.n	aabe <grid_keyboard_init+0x2e>
	kb->key_active_count = 0;
    aad4:	f44f 7380 	mov.w	r3, #256	; 0x100
    aad8:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
}
    aadc:	bd70      	pop	{r4, r5, r6, pc}
    aade:	bf00      	nop
    aae0:	00008f89 	.word	0x00008f89
    aae4:	20006f94 	.word	0x20006f94
    aae8:	20014558 	.word	0x20014558
    aaec:	20007044 	.word	0x20007044
    aaf0:	20007048 	.word	0x20007048
    aaf4:	20008238 	.word	0x20008238
    aaf8:	0000aa69 	.word	0x0000aa69

0000aafc <grid_keyboard_tx_push>:

uint8_t grid_keyboard_tx_push(struct grid_keyboard_event_desc keyboard_event){
    aafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    aafe:	466c      	mov	r4, sp
    ab00:	e884 0003 	stmia.w	r4, {r0, r1}


	grid_keyboard_tx_buffer[grid_keyboard_tx_write_index] = keyboard_event;
    ab04:	4d09      	ldr	r5, [pc, #36]	; (ab2c <grid_keyboard_tx_push+0x30>)
    ab06:	4a0a      	ldr	r2, [pc, #40]	; (ab30 <grid_keyboard_tx_push+0x34>)
    ab08:	882b      	ldrh	r3, [r5, #0]
    ab0a:	e894 0003 	ldmia.w	r4, {r0, r1}
    ab0e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ab12:	e882 0003 	stmia.w	r2, {r0, r1}

	grid_keyboard_tx_write_index = (grid_keyboard_tx_write_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    ab16:	f44f 7196 	mov.w	r1, #300	; 0x12c
    ab1a:	3301      	adds	r3, #1
    ab1c:	fbb3 f2f1 	udiv	r2, r3, r1
    ab20:	fb01 3312 	mls	r3, r1, r2, r3
    ab24:	802b      	strh	r3, [r5, #0]



}
    ab26:	b003      	add	sp, #12
    ab28:	bd30      	pop	{r4, r5, pc}
    ab2a:	bf00      	nop
    ab2c:	20007044 	.word	0x20007044
    ab30:	20007048 	.word	0x20007048

0000ab34 <grid_keyboard_tx_pop>:

uint8_t grid_keyboard_tx_pop(){
    ab34:	b573      	push	{r0, r1, r4, r5, r6, lr}

	if (grid_keyboard_tx_read_index != grid_keyboard_tx_write_index){
    ab36:	4b17      	ldr	r3, [pc, #92]	; (ab94 <grid_keyboard_tx_pop+0x60>)
    ab38:	4c17      	ldr	r4, [pc, #92]	; (ab98 <grid_keyboard_tx_pop+0x64>)
    ab3a:	881b      	ldrh	r3, [r3, #0]
    ab3c:	8822      	ldrh	r2, [r4, #0]
    ab3e:	429a      	cmp	r2, r3
    ab40:	d026      	beq.n	ab90 <grid_keyboard_tx_pop+0x5c>
		
        
        
        uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_keyboard_tx_rtc_lasttimestamp);
    ab42:	4d16      	ldr	r5, [pc, #88]	; (ab9c <grid_keyboard_tx_pop+0x68>)
    ab44:	4b16      	ldr	r3, [pc, #88]	; (aba0 <grid_keyboard_tx_pop+0x6c>)
    ab46:	6829      	ldr	r1, [r5, #0]
    ab48:	4816      	ldr	r0, [pc, #88]	; (aba4 <grid_keyboard_tx_pop+0x70>)
    ab4a:	4798      	blx	r3
        
        
		if (elapsed > grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].delay*RTC1MS){
    ab4c:	8822      	ldrh	r2, [r4, #0]
    ab4e:	4b16      	ldr	r3, [pc, #88]	; (aba8 <grid_keyboard_tx_pop+0x74>)
    ab50:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    ab54:	684e      	ldr	r6, [r1, #4]
    ab56:	ebb0 1f06 	cmp.w	r0, r6, lsl #4
    ab5a:	d919      	bls.n	ab90 <grid_keyboard_tx_pop+0x5c>
            
            struct grid_keyboard_event_desc key;
            
            key.ismodifier = grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ismodifier;
            key.keycode =    grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].keycode;
    ab5c:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
            key.ispressed =  grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ispressed;
    ab60:	7889      	ldrb	r1, [r1, #2]
            key.keycode =    grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].keycode;
    ab62:	f8ad 3000 	strh.w	r3, [sp]
            key.delay = 0;
    ab66:	2300      	movs	r3, #0
            key.ispressed =  grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ispressed;
    ab68:	f88d 1002 	strb.w	r1, [sp, #2]
            key.delay = 0;
    ab6c:	9301      	str	r3, [sp, #4]
            
                  
            //grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 50);
            
            grid_keyboard_keychange(&grid_keyboard_state, &key);
    ab6e:	4669      	mov	r1, sp
    ab70:	4b0e      	ldr	r3, [pc, #56]	; (abac <grid_keyboard_tx_pop+0x78>)
    ab72:	480f      	ldr	r0, [pc, #60]	; (abb0 <grid_keyboard_tx_pop+0x7c>)
    ab74:	4798      	blx	r3

			grid_keyboard_tx_read_index = (grid_keyboard_tx_read_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    ab76:	8823      	ldrh	r3, [r4, #0]
            
            grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    ab78:	480a      	ldr	r0, [pc, #40]	; (aba4 <grid_keyboard_tx_pop+0x70>)
			grid_keyboard_tx_read_index = (grid_keyboard_tx_read_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    ab7a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    ab7e:	3301      	adds	r3, #1
    ab80:	fbb3 f2f1 	udiv	r2, r3, r1
    ab84:	fb01 3312 	mls	r3, r1, r2, r3
    ab88:	8023      	strh	r3, [r4, #0]
            grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    ab8a:	4b0a      	ldr	r3, [pc, #40]	; (abb4 <grid_keyboard_tx_pop+0x80>)
    ab8c:	4798      	blx	r3
    ab8e:	6028      	str	r0, [r5, #0]

		}
		
	}

}
    ab90:	b002      	add	sp, #8
    ab92:	bd70      	pop	{r4, r5, r6, pc}
    ab94:	20007044 	.word	0x20007044
    ab98:	20008238 	.word	0x20008238
    ab9c:	20014558 	.word	0x20014558
    aba0:	00008f8d 	.word	0x00008f8d
    aba4:	20006f94 	.word	0x20006f94
    aba8:	20007048 	.word	0x20007048
    abac:	0000a825 	.word	0x0000a825
    abb0:	200081f0 	.word	0x200081f0
    abb4:	00008f89 	.word	0x00008f89

0000abb8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    abb8:	b570      	push	{r4, r5, r6, lr}
    abba:	460d      	mov	r5, r1
    abbc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    abbe:	4604      	mov	r4, r0
    abc0:	b110      	cbz	r0, abc8 <io_write+0x10>
    abc2:	1e08      	subs	r0, r1, #0
    abc4:	bf18      	it	ne
    abc6:	2001      	movne	r0, #1
    abc8:	4905      	ldr	r1, [pc, #20]	; (abe0 <io_write+0x28>)
    abca:	4b06      	ldr	r3, [pc, #24]	; (abe4 <io_write+0x2c>)
    abcc:	2234      	movs	r2, #52	; 0x34
    abce:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    abd0:	6823      	ldr	r3, [r4, #0]
    abd2:	4632      	mov	r2, r6
    abd4:	4629      	mov	r1, r5
    abd6:	4620      	mov	r0, r4
}
    abd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->write(io_descr, buf, length);
    abdc:	4718      	bx	r3
    abde:	bf00      	nop
    abe0:	00014c00 	.word	0x00014c00
    abe4:	0000cb4d 	.word	0x0000cb4d

0000abe8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    abe8:	b570      	push	{r4, r5, r6, lr}
    abea:	460d      	mov	r5, r1
    abec:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    abee:	4604      	mov	r4, r0
    abf0:	b110      	cbz	r0, abf8 <io_read+0x10>
    abf2:	1e08      	subs	r0, r1, #0
    abf4:	bf18      	it	ne
    abf6:	2001      	movne	r0, #1
    abf8:	4905      	ldr	r1, [pc, #20]	; (ac10 <io_read+0x28>)
    abfa:	4b06      	ldr	r3, [pc, #24]	; (ac14 <io_read+0x2c>)
    abfc:	223d      	movs	r2, #61	; 0x3d
    abfe:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    ac00:	6863      	ldr	r3, [r4, #4]
    ac02:	4632      	mov	r2, r6
    ac04:	4629      	mov	r1, r5
    ac06:	4620      	mov	r0, r4
}
    ac08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->read(io_descr, buf, length);
    ac0c:	4718      	bx	r3
    ac0e:	bf00      	nop
    ac10:	00014c00 	.word	0x00014c00
    ac14:	0000cb4d 	.word	0x0000cb4d

0000ac18 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    ac18:	b570      	push	{r4, r5, r6, lr}
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    ac1a:	4e07      	ldr	r6, [pc, #28]	; (ac38 <stdio_io_init+0x20>)
    ac1c:	4d07      	ldr	r5, [pc, #28]	; (ac3c <stdio_io_init+0x24>)
    ac1e:	6833      	ldr	r3, [r6, #0]
{
    ac20:	4604      	mov	r4, r0
	setbuf(stdout, NULL);
    ac22:	2100      	movs	r1, #0
    ac24:	6898      	ldr	r0, [r3, #8]
    ac26:	47a8      	blx	r5
	setbuf(stdin, NULL);
    ac28:	6833      	ldr	r3, [r6, #0]
    ac2a:	2100      	movs	r1, #0
    ac2c:	6858      	ldr	r0, [r3, #4]
    ac2e:	47a8      	blx	r5
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    ac30:	4b03      	ldr	r3, [pc, #12]	; (ac40 <stdio_io_init+0x28>)
    ac32:	601c      	str	r4, [r3, #0]
}
    ac34:	bd70      	pop	{r4, r5, r6, pc}
    ac36:	bf00      	nop
    ac38:	20000548 	.word	0x20000548
    ac3c:	000128a1 	.word	0x000128a1
    ac40:	20000800 	.word	0x20000800

0000ac44 <stdio_io_read>:
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
	if (stdio_io == NULL) {
    ac44:	4a04      	ldr	r2, [pc, #16]	; (ac58 <stdio_io_read+0x14>)
{
    ac46:	4603      	mov	r3, r0
	if (stdio_io == NULL) {
    ac48:	6810      	ldr	r0, [r2, #0]
    ac4a:	b118      	cbz	r0, ac54 <stdio_io_read+0x10>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    ac4c:	b28a      	uxth	r2, r1
    ac4e:	4619      	mov	r1, r3
    ac50:	4b02      	ldr	r3, [pc, #8]	; (ac5c <stdio_io_read+0x18>)
    ac52:	4718      	bx	r3
}
    ac54:	4770      	bx	lr
    ac56:	bf00      	nop
    ac58:	20000800 	.word	0x20000800
    ac5c:	0000abe9 	.word	0x0000abe9

0000ac60 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
	if (stdio_io == NULL) {
    ac60:	4a04      	ldr	r2, [pc, #16]	; (ac74 <stdio_io_write+0x14>)
{
    ac62:	4603      	mov	r3, r0
	if (stdio_io == NULL) {
    ac64:	6810      	ldr	r0, [r2, #0]
    ac66:	b118      	cbz	r0, ac70 <stdio_io_write+0x10>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    ac68:	b28a      	uxth	r2, r1
    ac6a:	4619      	mov	r1, r3
    ac6c:	4b02      	ldr	r3, [pc, #8]	; (ac78 <stdio_io_write+0x18>)
    ac6e:	4718      	bx	r3
}
    ac70:	4770      	bx	lr
    ac72:	bf00      	nop
    ac74:	20000800 	.word	0x20000800
    ac78:	0000abb9 	.word	0x0000abb9

0000ac7c <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    ac7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    ac7e:	8a83      	ldrh	r3, [r0, #20]
    ac80:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
	msg.flags  = I2C_M_STOP;
    ac84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    ac88:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    ac8c:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    ac8e:	4b05      	ldr	r3, [pc, #20]	; (aca4 <i2c_m_async_write+0x28>)
	msg.len    = n;
    ac90:	9202      	str	r2, [sp, #8]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    ac92:	a901      	add	r1, sp, #4
    ac94:	3828      	subs	r0, #40	; 0x28
{
    ac96:	4614      	mov	r4, r2
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    ac98:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    ac9a:	2800      	cmp	r0, #0
    ac9c:	bf08      	it	eq
    ac9e:	4620      	moveq	r0, r4
    aca0:	b004      	add	sp, #16
    aca2:	bd10      	pop	{r4, pc}
    aca4:	000103ed 	.word	0x000103ed

0000aca8 <i2c_m_async_read>:
{
    aca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.addr   = i2c->slave_addr;
    acaa:	8a83      	ldrh	r3, [r0, #20]
    acac:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    acb0:	f248 0301 	movw	r3, #32769	; 0x8001
    acb4:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    acb8:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    acba:	4b05      	ldr	r3, [pc, #20]	; (acd0 <i2c_m_async_read+0x28>)
	msg.len    = n;
    acbc:	9202      	str	r2, [sp, #8]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    acbe:	a901      	add	r1, sp, #4
    acc0:	3828      	subs	r0, #40	; 0x28
{
    acc2:	4614      	mov	r4, r2
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    acc4:	4798      	blx	r3
}
    acc6:	2800      	cmp	r0, #0
    acc8:	bf08      	it	eq
    acca:	4620      	moveq	r0, r4
    accc:	b004      	add	sp, #16
    acce:	bd10      	pop	{r4, pc}
    acd0:	000103ed 	.word	0x000103ed

0000acd4 <i2c_tx_complete>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    acd4:	8842      	ldrh	r2, [r0, #2]
    acd6:	05d2      	lsls	r2, r2, #23
    acd8:	d402      	bmi.n	ace0 <i2c_tx_complete+0xc>
		if (i2c->i2c_cb.tx_complete) {
    acda:	6b43      	ldr	r3, [r0, #52]	; 0x34
    acdc:	b103      	cbz	r3, ace0 <i2c_tx_complete+0xc>
			i2c->i2c_cb.tx_complete(i2c);
    acde:	4718      	bx	r3
}
    ace0:	4770      	bx	lr

0000ace2 <i2c_rx_complete>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    ace2:	8842      	ldrh	r2, [r0, #2]
    ace4:	05d2      	lsls	r2, r2, #23
    ace6:	d402      	bmi.n	acee <i2c_rx_complete+0xc>
		if (i2c->i2c_cb.rx_complete) {
    ace8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    acea:	b103      	cbz	r3, acee <i2c_rx_complete+0xc>
			i2c->i2c_cb.rx_complete(i2c);
    acec:	4718      	bx	r3
}
    acee:	4770      	bx	lr

0000acf0 <i2c_error>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    acf0:	8842      	ldrh	r2, [r0, #2]
    acf2:	05d2      	lsls	r2, r2, #23
    acf4:	d402      	bmi.n	acfc <i2c_error+0xc>
		if (i2c->i2c_cb.error) {
    acf6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    acf8:	b103      	cbz	r3, acfc <i2c_error+0xc>
			i2c->i2c_cb.error(i2c, error);
    acfa:	4718      	bx	r3
}
    acfc:	4770      	bx	lr
	...

0000ad00 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    ad00:	b570      	push	{r4, r5, r6, lr}
	int32_t init_status;
	ASSERT(i2c);
    ad02:	4604      	mov	r4, r0
    ad04:	3800      	subs	r0, #0
{
    ad06:	460d      	mov	r5, r1
	ASSERT(i2c);
    ad08:	bf18      	it	ne
    ad0a:	2001      	movne	r0, #1
    ad0c:	490e      	ldr	r1, [pc, #56]	; (ad48 <i2c_m_async_init+0x48>)
    ad0e:	4b0f      	ldr	r3, [pc, #60]	; (ad4c <i2c_m_async_init+0x4c>)
    ad10:	2289      	movs	r2, #137	; 0x89
    ad12:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    ad14:	4629      	mov	r1, r5
    ad16:	4b0e      	ldr	r3, [pc, #56]	; (ad50 <i2c_m_async_init+0x50>)
    ad18:	4620      	mov	r0, r4
    ad1a:	4798      	blx	r3
	if (init_status) {
    ad1c:	4605      	mov	r5, r0
    ad1e:	b980      	cbnz	r0, ad42 <i2c_m_async_init+0x42>
		return init_status;
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    ad20:	4b0c      	ldr	r3, [pc, #48]	; (ad54 <i2c_m_async_init+0x54>)
    ad22:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    ad24:	4b0c      	ldr	r3, [pc, #48]	; (ad58 <i2c_m_async_init+0x58>)

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    ad26:	4a0d      	ldr	r2, [pc, #52]	; (ad5c <i2c_m_async_init+0x5c>)
    ad28:	4e0d      	ldr	r6, [pc, #52]	; (ad60 <i2c_m_async_init+0x60>)
	i2c->io.write = i2c_m_async_write;
    ad2a:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    ad2c:	2101      	movs	r1, #1
    ad2e:	4620      	mov	r0, r4
    ad30:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    ad32:	4a0c      	ldr	r2, [pc, #48]	; (ad64 <i2c_m_async_init+0x64>)
    ad34:	2102      	movs	r1, #2
    ad36:	4620      	mov	r0, r4
    ad38:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    ad3a:	4a0b      	ldr	r2, [pc, #44]	; (ad68 <i2c_m_async_init+0x68>)
    ad3c:	4629      	mov	r1, r5
    ad3e:	4620      	mov	r0, r4
    ad40:	47b0      	blx	r6

	return ERR_NONE;
}
    ad42:	4628      	mov	r0, r5
    ad44:	bd70      	pop	{r4, r5, r6, pc}
    ad46:	bf00      	nop
    ad48:	00014c14 	.word	0x00014c14
    ad4c:	0000cb4d 	.word	0x0000cb4d
    ad50:	00010371 	.word	0x00010371
    ad54:	0000aca9 	.word	0x0000aca9
    ad58:	0000ac7d 	.word	0x0000ac7d
    ad5c:	0000acd5 	.word	0x0000acd5
    ad60:	000104f5 	.word	0x000104f5
    ad64:	0000ace3 	.word	0x0000ace3
    ad68:	0000acf1 	.word	0x0000acf1

0000ad6c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    ad6c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    ad6e:	4604      	mov	r4, r0
    ad70:	b118      	cbz	r0, ad7a <_wdt_init+0xe>
    ad72:	6800      	ldr	r0, [r0, #0]
    ad74:	3800      	subs	r0, #0
    ad76:	bf18      	it	ne
    ad78:	2001      	movne	r0, #1
    ad7a:	4b12      	ldr	r3, [pc, #72]	; (adc4 <_wdt_init+0x58>)
    ad7c:	4912      	ldr	r1, [pc, #72]	; (adc8 <_wdt_init+0x5c>)
    ad7e:	2250      	movs	r2, #80	; 0x50
    ad80:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    ad82:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ad84:	689a      	ldr	r2, [r3, #8]
    ad86:	f012 0f0e 	tst.w	r2, #14
    ad8a:	d1fb      	bne.n	ad84 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ad8c:	781a      	ldrb	r2, [r3, #0]
    ad8e:	09d2      	lsrs	r2, r2, #7
    ad90:	d115      	bne.n	adbe <_wdt_init+0x52>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ad92:	689a      	ldr	r2, [r3, #8]
    ad94:	f012 0f0e 	tst.w	r2, #14
    ad98:	d1fb      	bne.n	ad92 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    ad9a:	781a      	ldrb	r2, [r3, #0]
    ad9c:	0792      	lsls	r2, r2, #30
    ad9e:	d40e      	bmi.n	adbe <_wdt_init+0x52>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    ada0:	781a      	ldrb	r2, [r3, #0]
    ada2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    ada6:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    ada8:	6898      	ldr	r0, [r3, #8]
    adaa:	f010 000e 	ands.w	r0, r0, #14
    adae:	d1fb      	bne.n	ada8 <_wdt_init+0x3c>

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    adb0:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    adb2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    adb6:	f042 020b 	orr.w	r2, r2, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    adba:	705a      	strb	r2, [r3, #1]

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
	}

	return ERR_NONE;
}
    adbc:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    adbe:	f06f 0010 	mvn.w	r0, #16
    adc2:	e7fb      	b.n	adbc <_wdt_init+0x50>
    adc4:	0000cb4d 	.word	0x0000cb4d
    adc8:	00014c31 	.word	0x00014c31

0000adcc <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    adcc:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    adce:	4288      	cmp	r0, r1
    add0:	d301      	bcc.n	add6 <usb_find_desc+0xa>
		_desc_len_check();
    add2:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    add4:	bd10      	pop	{r4, pc}
		_desc_len_check();
    add6:	7803      	ldrb	r3, [r0, #0]
    add8:	2b01      	cmp	r3, #1
    adda:	d9fa      	bls.n	add2 <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
    addc:	7844      	ldrb	r4, [r0, #1]
    adde:	4294      	cmp	r4, r2
    ade0:	d0f8      	beq.n	add4 <usb_find_desc+0x8>
    ade2:	4418      	add	r0, r3
    ade4:	e7f3      	b.n	adce <usb_find_desc+0x2>

0000ade6 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    ade6:	4288      	cmp	r0, r1
    ade8:	d301      	bcc.n	adee <usb_find_ep_desc+0x8>
		_desc_len_check();
    adea:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    adec:	4770      	bx	lr
		_desc_len_check();
    adee:	7803      	ldrb	r3, [r0, #0]
    adf0:	2b01      	cmp	r3, #1
    adf2:	d9fa      	bls.n	adea <usb_find_ep_desc+0x4>
	return desc[1];
    adf4:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    adf6:	2a04      	cmp	r2, #4
    adf8:	d0f7      	beq.n	adea <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    adfa:	2a05      	cmp	r2, #5
    adfc:	d0f6      	beq.n	adec <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
    adfe:	4418      	add	r0, r3
    ae00:	e7f1      	b.n	ade6 <usb_find_ep_desc>
	...

0000ae04 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    ae04:	b538      	push	{r3, r4, r5, lr}
    ae06:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ae08:	4b0c      	ldr	r3, [pc, #48]	; (ae3c <usb_find_cfg_desc+0x38>)
    ae0a:	2202      	movs	r2, #2
{
    ae0c:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    ae0e:	4798      	blx	r3
	if (!desc) {
    ae10:	b978      	cbnz	r0, ae32 <usb_find_cfg_desc+0x2e>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    ae12:	bd38      	pop	{r3, r4, r5, pc}
		_desc_len_check();
    ae14:	7803      	ldrb	r3, [r0, #0]
    ae16:	2b01      	cmp	r3, #1
    ae18:	d90d      	bls.n	ae36 <usb_find_cfg_desc+0x32>
		if (desc[1] != USB_DT_CONFIG) {
    ae1a:	7843      	ldrb	r3, [r0, #1]
    ae1c:	2b02      	cmp	r3, #2
    ae1e:	d10a      	bne.n	ae36 <usb_find_cfg_desc+0x32>
		if (desc[5] == cfg_value) {
    ae20:	7943      	ldrb	r3, [r0, #5]
    ae22:	42ab      	cmp	r3, r5
    ae24:	d0f5      	beq.n	ae12 <usb_find_cfg_desc+0xe>
	return (ptr[0] + (ptr[1] << 8));
    ae26:	78c2      	ldrb	r2, [r0, #3]
    ae28:	7883      	ldrb	r3, [r0, #2]
    ae2a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    ae2e:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    ae32:	42a0      	cmp	r0, r4
    ae34:	d3ee      	bcc.n	ae14 <usb_find_cfg_desc+0x10>
		return NULL;
    ae36:	2000      	movs	r0, #0
    ae38:	e7eb      	b.n	ae12 <usb_find_cfg_desc+0xe>
    ae3a:	bf00      	nop
    ae3c:	0000adcd 	.word	0x0000adcd

0000ae40 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    ae40:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ae42:	4e09      	ldr	r6, [pc, #36]	; (ae68 <usb_find_str_desc+0x28>)
{
    ae44:	4615      	mov	r5, r2
	for (i = 0; desc < eof;) {
    ae46:	2400      	movs	r4, #0
    ae48:	4288      	cmp	r0, r1
    ae4a:	d301      	bcc.n	ae50 <usb_find_str_desc+0x10>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    ae4c:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    ae4e:	bd70      	pop	{r4, r5, r6, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    ae50:	2203      	movs	r2, #3
    ae52:	47b0      	blx	r6
		if (desc) {
    ae54:	2800      	cmp	r0, #0
    ae56:	d0fa      	beq.n	ae4e <usb_find_str_desc+0xe>
			_desc_len_check();
    ae58:	7803      	ldrb	r3, [r0, #0]
    ae5a:	2b01      	cmp	r3, #1
    ae5c:	d9f6      	bls.n	ae4c <usb_find_str_desc+0xc>
			if (i == str_index) {
    ae5e:	42ac      	cmp	r4, r5
    ae60:	d0f5      	beq.n	ae4e <usb_find_str_desc+0xe>
	return (desc + usb_desc_len(desc));
    ae62:	4418      	add	r0, r3
    ae64:	3401      	adds	r4, #1
    ae66:	e7ef      	b.n	ae48 <usb_find_str_desc+0x8>
    ae68:	0000adcd 	.word	0x0000adcd

0000ae6c <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    ae6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ASSERT(io);
    ae6e:	4604      	mov	r4, r0
    ae70:	3800      	subs	r0, #0
{
    ae72:	460d      	mov	r5, r1
    ae74:	9201      	str	r2, [sp, #4]
	ASSERT(io);
    ae76:	bf18      	it	ne
    ae78:	2001      	movne	r0, #1
    ae7a:	4907      	ldr	r1, [pc, #28]	; (ae98 <_spi_m_dma_io_write+0x2c>)
    ae7c:	4e07      	ldr	r6, [pc, #28]	; (ae9c <_spi_m_dma_io_write+0x30>)
    ae7e:	2298      	movs	r2, #152	; 0x98
    ae80:	47b0      	blx	r6

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    ae82:	f1a4 001c 	sub.w	r0, r4, #28
    ae86:	4c06      	ldr	r4, [pc, #24]	; (aea0 <_spi_m_dma_io_write+0x34>)
    ae88:	9b01      	ldr	r3, [sp, #4]
    ae8a:	2200      	movs	r2, #0
    ae8c:	4629      	mov	r1, r5
    ae8e:	46a4      	mov	ip, r4
}
    ae90:	b002      	add	sp, #8
    ae92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    ae96:	4760      	bx	ip
    ae98:	00014c46 	.word	0x00014c46
    ae9c:	0000cb4d 	.word	0x0000cb4d
    aea0:	00010b79 	.word	0x00010b79

0000aea4 <_spi_m_dma_io_read>:
{
    aea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ASSERT(io);
    aea6:	4604      	mov	r4, r0
    aea8:	3800      	subs	r0, #0
{
    aeaa:	460d      	mov	r5, r1
    aeac:	9201      	str	r2, [sp, #4]
	ASSERT(io);
    aeae:	bf18      	it	ne
    aeb0:	2001      	movne	r0, #1
    aeb2:	4907      	ldr	r1, [pc, #28]	; (aed0 <_spi_m_dma_io_read+0x2c>)
    aeb4:	4e07      	ldr	r6, [pc, #28]	; (aed4 <_spi_m_dma_io_read+0x30>)
    aeb6:	2281      	movs	r2, #129	; 0x81
    aeb8:	47b0      	blx	r6
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    aeba:	f1a4 001c 	sub.w	r0, r4, #28
    aebe:	4c06      	ldr	r4, [pc, #24]	; (aed8 <_spi_m_dma_io_read+0x34>)
    aec0:	9b01      	ldr	r3, [sp, #4]
    aec2:	462a      	mov	r2, r5
    aec4:	2100      	movs	r1, #0
    aec6:	46a4      	mov	ip, r4
}
    aec8:	b002      	add	sp, #8
    aeca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    aece:	4760      	bx	ip
    aed0:	00014c46 	.word	0x00014c46
    aed4:	0000cb4d 	.word	0x0000cb4d
    aed8:	00010b79 	.word	0x00010b79

0000aedc <spi_m_dma_init>:
{
    aedc:	b538      	push	{r3, r4, r5, lr}
    aede:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    aee0:	4604      	mov	r4, r0
    aee2:	b110      	cbz	r0, aeea <spi_m_dma_init+0xe>
    aee4:	1e08      	subs	r0, r1, #0
    aee6:	bf18      	it	ne
    aee8:	2001      	movne	r0, #1
    aeea:	4908      	ldr	r1, [pc, #32]	; (af0c <spi_m_dma_init+0x30>)
    aeec:	4b08      	ldr	r3, [pc, #32]	; (af10 <spi_m_dma_init+0x34>)
    aeee:	223b      	movs	r2, #59	; 0x3b
    aef0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    aef2:	4620      	mov	r0, r4
	rc            = _spi_m_dma_init(&spi->dev, hw);
    aef4:	4b07      	ldr	r3, [pc, #28]	; (af14 <spi_m_dma_init+0x38>)
	spi->dev.prvt = (void *)hw;
    aef6:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    aefa:	4629      	mov	r1, r5
    aefc:	4798      	blx	r3
	if (rc) {
    aefe:	b918      	cbnz	r0, af08 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
    af00:	4b05      	ldr	r3, [pc, #20]	; (af18 <spi_m_dma_init+0x3c>)
    af02:	6263      	str	r3, [r4, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    af04:	4b05      	ldr	r3, [pc, #20]	; (af1c <spi_m_dma_init+0x40>)
    af06:	6223      	str	r3, [r4, #32]
}
    af08:	bd38      	pop	{r3, r4, r5, pc}
    af0a:	bf00      	nop
    af0c:	00014c46 	.word	0x00014c46
    af10:	0000cb4d 	.word	0x0000cb4d
    af14:	000109f1 	.word	0x000109f1
    af18:	0000aea5 	.word	0x0000aea5
    af1c:	0000ae6d 	.word	0x0000ae6d

0000af20 <spi_m_dma_enable>:
{
    af20:	b510      	push	{r4, lr}
	ASSERT(spi);
    af22:	4604      	mov	r4, r0
    af24:	3800      	subs	r0, #0
    af26:	4b05      	ldr	r3, [pc, #20]	; (af3c <spi_m_dma_enable+0x1c>)
    af28:	4905      	ldr	r1, [pc, #20]	; (af40 <spi_m_dma_enable+0x20>)
    af2a:	bf18      	it	ne
    af2c:	2001      	movne	r0, #1
    af2e:	2251      	movs	r2, #81	; 0x51
    af30:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    af32:	1d20      	adds	r0, r4, #4
    af34:	4b03      	ldr	r3, [pc, #12]	; (af44 <spi_m_dma_enable+0x24>)
}
    af36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_spi_m_dma_enable(&spi->dev);
    af3a:	4718      	bx	r3
    af3c:	0000cb4d 	.word	0x0000cb4d
    af40:	00014c46 	.word	0x00014c46
    af44:	00010ab5 	.word	0x00010ab5

0000af48 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    af48:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    af4a:	4604      	mov	r4, r0
    af4c:	3800      	subs	r0, #0
{
    af4e:	460d      	mov	r5, r1
    af50:	4616      	mov	r6, r2
	ASSERT(spi);
    af52:	4907      	ldr	r1, [pc, #28]	; (af70 <spi_m_dma_register_callback+0x28>)
    af54:	4b07      	ldr	r3, [pc, #28]	; (af74 <spi_m_dma_register_callback+0x2c>)
    af56:	f04f 02a8 	mov.w	r2, #168	; 0xa8
    af5a:	bf18      	it	ne
    af5c:	2001      	movne	r0, #1
    af5e:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    af60:	4632      	mov	r2, r6
    af62:	4629      	mov	r1, r5
    af64:	1d20      	adds	r0, r4, #4
    af66:	4b04      	ldr	r3, [pc, #16]	; (af78 <spi_m_dma_register_callback+0x30>)
}
    af68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    af6c:	4718      	bx	r3
    af6e:	bf00      	nop
    af70:	00014c46 	.word	0x00014c46
    af74:	0000cb4d 	.word	0x0000cb4d
    af78:	00010ae5 	.word	0x00010ae5

0000af7c <spi_m_dma_get_io_descriptor>:

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    af7c:	b538      	push	{r3, r4, r5, lr}
    af7e:	460d      	mov	r5, r1
	ASSERT(spi && io);
    af80:	4604      	mov	r4, r0
    af82:	b110      	cbz	r0, af8a <spi_m_dma_get_io_descriptor+0xe>
    af84:	1e08      	subs	r0, r1, #0
    af86:	bf18      	it	ne
    af88:	2001      	movne	r0, #1
    af8a:	4904      	ldr	r1, [pc, #16]	; (af9c <spi_m_dma_get_io_descriptor+0x20>)
    af8c:	4b04      	ldr	r3, [pc, #16]	; (afa0 <spi_m_dma_get_io_descriptor+0x24>)
    af8e:	22ae      	movs	r2, #174	; 0xae
	*io = &spi->io;
    af90:	3420      	adds	r4, #32
	ASSERT(spi && io);
    af92:	4798      	blx	r3
	*io = &spi->io;
    af94:	602c      	str	r4, [r5, #0]

	return 0;
}
    af96:	2000      	movs	r0, #0
    af98:	bd38      	pop	{r3, r4, r5, pc}
    af9a:	bf00      	nop
    af9c:	00014c46 	.word	0x00014c46
    afa0:	0000cb4d 	.word	0x0000cb4d

0000afa4 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    afa4:	3801      	subs	r0, #1
    afa6:	2802      	cmp	r0, #2
{
    afa8:	b508      	push	{r3, lr}
    afaa:	460b      	mov	r3, r1
    afac:	4611      	mov	r1, r2
	if ((file != 1) && (file != 2) && (file != 3)) {
    afae:	d805      	bhi.n	afbc <_write+0x18>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    afb0:	4618      	mov	r0, r3
    afb2:	4b04      	ldr	r3, [pc, #16]	; (afc4 <_write+0x20>)
    afb4:	4798      	blx	r3
	if (n < 0) {
    afb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		return -1;
	}

	return n;
}
    afba:	bd08      	pop	{r3, pc}
		return -1;
    afbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    afc0:	e7fb      	b.n	afba <_write+0x16>
    afc2:	bf00      	nop
    afc4:	0000ac61 	.word	0x0000ac61

0000afc8 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    afc8:	b510      	push	{r4, lr}
    afca:	4a13      	ldr	r2, [pc, #76]	; (b018 <_event_system_init+0x50>)
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    afcc:	4913      	ldr	r1, [pc, #76]	; (b01c <_event_system_init+0x54>)
    afce:	2300      	movs	r3, #0
    afd0:	f103 0048 	add.w	r0, r3, #72	; 0x48
    afd4:	3301      	adds	r3, #1
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    afd6:	f812 4b01 	ldrb.w	r4, [r2], #1
    afda:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    afde:	2b43      	cmp	r3, #67	; 0x43
    afe0:	d1f6      	bne.n	afd0 <_event_system_init+0x8>
    afe2:	480f      	ldr	r0, [pc, #60]	; (b020 <_event_system_init+0x58>)
    afe4:	2100      	movs	r1, #0
    afe6:	f100 0440 	add.w	r4, r0, #64	; 0x40
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    afea:	00ca      	lsls	r2, r1, #3
    afec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    aff0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    aff4:	f830 3b02 	ldrh.w	r3, [r0], #2

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    aff8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    affa:	f854 3b04 	ldr.w	r3, [r4], #4
    affe:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    b000:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    b004:	3101      	adds	r1, #1
    b006:	43db      	mvns	r3, r3
    b008:	b2db      	uxtb	r3, r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    b00a:	2920      	cmp	r1, #32
    b00c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    b010:	d1eb      	bne.n	afea <_event_system_init+0x22>
	}

	return ERR_NONE;
}
    b012:	2000      	movs	r0, #0
    b014:	bd10      	pop	{r4, pc}
    b016:	bf00      	nop
    b018:	00014c64 	.word	0x00014c64
    b01c:	4100e000 	.word	0x4100e000
    b020:	00014ca8 	.word	0x00014ca8

0000b024 <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b024:	0943      	lsrs	r3, r0, #5
    b026:	2201      	movs	r2, #1
    b028:	f000 001f 	and.w	r0, r0, #31
    b02c:	fa02 f000 	lsl.w	r0, r2, r0
    b030:	3340      	adds	r3, #64	; 0x40
    b032:	4a02      	ldr	r2, [pc, #8]	; (b03c <_irq_set+0x18>)
    b034:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    b038:	4770      	bx	lr
    b03a:	bf00      	nop
    b03c:	e000e100 	.word	0xe000e100

0000b040 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    b040:	2378      	movs	r3, #120	; 0x78
    b042:	4358      	muls	r0, r3
    b044:	4770      	bx	lr
	...

0000b048 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    b048:	4b01      	ldr	r3, [pc, #4]	; (b050 <_get_cycles_for_ms+0x8>)
    b04a:	4358      	muls	r0, r3
    b04c:	4770      	bx	lr
    b04e:	bf00      	nop
    b050:	0001d4c0 	.word	0x0001d4c0

0000b054 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b058:	4615      	mov	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b05a:	780a      	ldrb	r2, [r1, #0]
    b05c:	f3c2 1341 	ubfx	r3, r2, #5, #2
    b060:	2b01      	cmp	r3, #1
{
    b062:	4606      	mov	r6, r0
    b064:	460c      	mov	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b066:	d155      	bne.n	b114 <cdcdf_acm_req+0xc0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b068:	4b2d      	ldr	r3, [pc, #180]	; (b120 <cdcdf_acm_req+0xcc>)
    b06a:	8889      	ldrh	r1, [r1, #4]
    b06c:	7818      	ldrb	r0, [r3, #0]
    b06e:	4288      	cmp	r0, r1
    b070:	4698      	mov	r8, r3
    b072:	d002      	beq.n	b07a <cdcdf_acm_req+0x26>
    b074:	785b      	ldrb	r3, [r3, #1]
    b076:	428b      	cmp	r3, r1
    b078:	d14c      	bne.n	b114 <cdcdf_acm_req+0xc0>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b07a:	0613      	lsls	r3, r2, #24
    b07c:	88e7      	ldrh	r7, [r4, #6]
    b07e:	d50f      	bpl.n	b0a0 <cdcdf_acm_req+0x4c>
	if (USB_DATA_STAGE == stage) {
    b080:	2d01      	cmp	r5, #1
    b082:	d033      	beq.n	b0ec <cdcdf_acm_req+0x98>
	switch (req->bRequest) {
    b084:	7863      	ldrb	r3, [r4, #1]
    b086:	2b21      	cmp	r3, #33	; 0x21
    b088:	d112      	bne.n	b0b0 <cdcdf_acm_req+0x5c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b08a:	2f07      	cmp	r7, #7
    b08c:	d145      	bne.n	b11a <cdcdf_acm_req+0xc6>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b08e:	4925      	ldr	r1, [pc, #148]	; (b124 <cdcdf_acm_req+0xd0>)
    b090:	2300      	movs	r3, #0
    b092:	463a      	mov	r2, r7
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b094:	4c24      	ldr	r4, [pc, #144]	; (b128 <cdcdf_acm_req+0xd4>)
    b096:	4630      	mov	r0, r6
    b098:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    b09a:	b002      	add	sp, #8
    b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b0a0:	4b22      	ldr	r3, [pc, #136]	; (b12c <cdcdf_acm_req+0xd8>)
    b0a2:	4798      	blx	r3
	switch (req->bRequest) {
    b0a4:	7863      	ldrb	r3, [r4, #1]
    b0a6:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b0a8:	4601      	mov	r1, r0
	switch (req->bRequest) {
    b0aa:	d004      	beq.n	b0b6 <cdcdf_acm_req+0x62>
    b0ac:	2b22      	cmp	r3, #34	; 0x22
    b0ae:	d024      	beq.n	b0fa <cdcdf_acm_req+0xa6>
		return ERR_INVALID_ARG;
    b0b0:	f06f 000c 	mvn.w	r0, #12
    b0b4:	e7f1      	b.n	b09a <cdcdf_acm_req+0x46>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b0b6:	2f07      	cmp	r7, #7
    b0b8:	d12f      	bne.n	b11a <cdcdf_acm_req+0xc6>
		if (USB_SETUP_STAGE == stage) {
    b0ba:	b915      	cbnz	r5, b0c2 <cdcdf_acm_req+0x6e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b0bc:	462b      	mov	r3, r5
    b0be:	463a      	mov	r2, r7
    b0c0:	e7e8      	b.n	b094 <cdcdf_acm_req+0x40>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b0c2:	6800      	ldr	r0, [r0, #0]
    b0c4:	9000      	str	r0, [sp, #0]
    b0c6:	798b      	ldrb	r3, [r1, #6]
    b0c8:	888a      	ldrh	r2, [r1, #4]
    b0ca:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b0ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b0d2:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b0d6:	b95b      	cbnz	r3, b0f0 <cdcdf_acm_req+0x9c>
				usbd_cdc_line_coding = line_coding_tmp;
    b0d8:	4b12      	ldr	r3, [pc, #72]	; (b124 <cdcdf_acm_req+0xd0>)
    b0da:	9800      	ldr	r0, [sp, #0]
    b0dc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b0e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b0e4:	f8c8 0006 	str.w	r0, [r8, #6]
    b0e8:	8099      	strh	r1, [r3, #4]
    b0ea:	719a      	strb	r2, [r3, #6]
		return ERR_NONE;
    b0ec:	2000      	movs	r0, #0
    b0ee:	e7d4      	b.n	b09a <cdcdf_acm_req+0x46>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b0f0:	4668      	mov	r0, sp
    b0f2:	4798      	blx	r3
    b0f4:	2800      	cmp	r0, #0
    b0f6:	d1ef      	bne.n	b0d8 <cdcdf_acm_req+0x84>
    b0f8:	e7f8      	b.n	b0ec <cdcdf_acm_req+0x98>
		usbdc_xfer(0, NULL, 0, 0);
    b0fa:	2300      	movs	r3, #0
    b0fc:	461a      	mov	r2, r3
    b0fe:	4619      	mov	r1, r3
    b100:	4618      	mov	r0, r3
    b102:	4d09      	ldr	r5, [pc, #36]	; (b128 <cdcdf_acm_req+0xd4>)
    b104:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    b106:	f8d8 3014 	ldr.w	r3, [r8, #20]
    b10a:	2b00      	cmp	r3, #0
    b10c:	d0ee      	beq.n	b0ec <cdcdf_acm_req+0x98>
			cdcdf_acm_notify_state(req->wValue);
    b10e:	8860      	ldrh	r0, [r4, #2]
    b110:	4798      	blx	r3
    b112:	e7eb      	b.n	b0ec <cdcdf_acm_req+0x98>
		return ERR_NOT_FOUND;
    b114:	f06f 0009 	mvn.w	r0, #9
    b118:	e7bf      	b.n	b09a <cdcdf_acm_req+0x46>
			return ERR_INVALID_DATA;
    b11a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b11e:	e7bc      	b.n	b09a <cdcdf_acm_req+0x46>
    b120:	20000804 	.word	0x20000804
    b124:	2000080a 	.word	0x2000080a
    b128:	0001133d 	.word	0x0001133d
    b12c:	00011769 	.word	0x00011769

0000b130 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    b130:	2901      	cmp	r1, #1
{
    b132:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b136:	4615      	mov	r5, r2
	switch (ctrl) {
    b138:	d04f      	beq.n	b1da <cdcdf_acm_ctrl+0xaa>
    b13a:	2902      	cmp	r1, #2
    b13c:	d076      	beq.n	b22c <cdcdf_acm_ctrl+0xfc>
    b13e:	2900      	cmp	r1, #0
    b140:	d177      	bne.n	b232 <cdcdf_acm_ctrl+0x102>
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    b142:	6887      	ldr	r7, [r0, #8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b144:	f8df 8114 	ldr.w	r8, [pc, #276]	; b25c <cdcdf_acm_ctrl+0x12c>
	ifc = desc->sod;
    b148:	6810      	ldr	r0, [r2, #0]
	for (i = 0; i < 2; i++) {
    b14a:	1e7e      	subs	r6, r7, #1
		if (NULL == ifc) {
    b14c:	b928      	cbnz	r0, b15a <cdcdf_acm_ctrl+0x2a>
			return ERR_NOT_FOUND;
    b14e:	f06f 0009 	mvn.w	r0, #9
}
    b152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b156:	464e      	mov	r6, r9
    b158:	e7f8      	b.n	b14c <cdcdf_acm_ctrl+0x1c>
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b15a:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    b15c:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    b15e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b162:	2b02      	cmp	r3, #2
    b164:	d1f3      	bne.n	b14e <cdcdf_acm_ctrl+0x1e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    b166:	7873      	ldrb	r3, [r6, #1]
    b168:	429a      	cmp	r2, r3
    b16a:	d065      	beq.n	b238 <cdcdf_acm_ctrl+0x108>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    b16c:	2bff      	cmp	r3, #255	; 0xff
    b16e:	d166      	bne.n	b23e <cdcdf_acm_ctrl+0x10e>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    b170:	7072      	strb	r2, [r6, #1]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    b172:	6869      	ldr	r1, [r5, #4]
    b174:	f8df a0e8 	ldr.w	sl, [pc, #232]	; b260 <cdcdf_acm_ctrl+0x130>
    b178:	2205      	movs	r2, #5
    b17a:	47c0      	blx	r8
    b17c:	f106 0901 	add.w	r9, r6, #1
    b180:	4604      	mov	r4, r0
		while (NULL != ep) {
    b182:	b964      	cbnz	r4, b19e <cdcdf_acm_ctrl+0x6e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    b184:	682b      	ldr	r3, [r5, #0]
    b186:	6869      	ldr	r1, [r5, #4]
    b188:	7818      	ldrb	r0, [r3, #0]
    b18a:	2204      	movs	r2, #4
    b18c:	4418      	add	r0, r3
    b18e:	47c0      	blx	r8
	for (i = 0; i < 2; i++) {
    b190:	42be      	cmp	r6, r7
    b192:	d1e0      	bne.n	b156 <cdcdf_acm_ctrl+0x26>
	_cdcdf_acm_funcd.enabled = true;
    b194:	4b2d      	ldr	r3, [pc, #180]	; (b24c <cdcdf_acm_ctrl+0x11c>)
    b196:	2201      	movs	r2, #1
    b198:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    b19a:	4620      	mov	r0, r4
    b19c:	e7d9      	b.n	b152 <cdcdf_acm_ctrl+0x22>
	return (ptr[0] + (ptr[1] << 8));
    b19e:	7961      	ldrb	r1, [r4, #5]
    b1a0:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    b1a2:	f894 b002 	ldrb.w	fp, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    b1a6:	4b2a      	ldr	r3, [pc, #168]	; (b250 <cdcdf_acm_ctrl+0x120>)
    b1a8:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    b1ac:	b292      	uxth	r2, r2
    b1ae:	78e1      	ldrb	r1, [r4, #3]
    b1b0:	4658      	mov	r0, fp
    b1b2:	4798      	blx	r3
    b1b4:	2800      	cmp	r0, #0
    b1b6:	d145      	bne.n	b244 <cdcdf_acm_ctrl+0x114>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    b1b8:	f01b 0f80 	tst.w	fp, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    b1bc:	bf14      	ite	ne
    b1be:	f889 b002 	strbne.w	fp, [r9, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    b1c2:	f887 b004 	strbeq.w	fp, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    b1c6:	4658      	mov	r0, fp
    b1c8:	47d0      	blx	sl
			desc->sod = ep;
    b1ca:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    b1cc:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    b1ce:	6869      	ldr	r1, [r5, #4]
    b1d0:	4b20      	ldr	r3, [pc, #128]	; (b254 <cdcdf_acm_ctrl+0x124>)
    b1d2:	4420      	add	r0, r4
    b1d4:	4798      	blx	r3
    b1d6:	4604      	mov	r4, r0
    b1d8:	e7d3      	b.n	b182 <cdcdf_acm_ctrl+0x52>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    b1da:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    b1dc:	b12a      	cbz	r2, b1ea <cdcdf_acm_ctrl+0xba>
		ifc_desc.bInterfaceClass = desc->sod[5];
    b1de:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    b1e0:	795b      	ldrb	r3, [r3, #5]
    b1e2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    b1e6:	2b02      	cmp	r3, #2
    b1e8:	d1b1      	bne.n	b14e <cdcdf_acm_ctrl+0x1e>
		if (func_data->func_iface[i] == 0xFF) {
    b1ea:	7823      	ldrb	r3, [r4, #0]
    b1ec:	2bff      	cmp	r3, #255	; 0xff
    b1ee:	d007      	beq.n	b200 <cdcdf_acm_ctrl+0xd0>
			if (func_data->func_ep_in[i] != 0xFF) {
    b1f0:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    b1f2:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    b1f4:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    b1f6:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    b1f8:	d002      	beq.n	b200 <cdcdf_acm_ctrl+0xd0>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b1fa:	4b17      	ldr	r3, [pc, #92]	; (b258 <cdcdf_acm_ctrl+0x128>)
    b1fc:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b1fe:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    b200:	7863      	ldrb	r3, [r4, #1]
    b202:	2bff      	cmp	r3, #255	; 0xff
    b204:	d007      	beq.n	b216 <cdcdf_acm_ctrl+0xe6>
			if (func_data->func_ep_in[i] != 0xFF) {
    b206:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    b208:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    b20a:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    b20c:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    b20e:	d002      	beq.n	b216 <cdcdf_acm_ctrl+0xe6>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    b210:	4b11      	ldr	r3, [pc, #68]	; (b258 <cdcdf_acm_ctrl+0x128>)
    b212:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    b214:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    b216:	7920      	ldrb	r0, [r4, #4]
    b218:	28ff      	cmp	r0, #255	; 0xff
    b21a:	d003      	beq.n	b224 <cdcdf_acm_ctrl+0xf4>
		usb_d_ep_deinit(func_data->func_ep_out);
    b21c:	4b0e      	ldr	r3, [pc, #56]	; (b258 <cdcdf_acm_ctrl+0x128>)
    b21e:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    b220:	23ff      	movs	r3, #255	; 0xff
    b222:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    b224:	4b09      	ldr	r3, [pc, #36]	; (b24c <cdcdf_acm_ctrl+0x11c>)
    b226:	2000      	movs	r0, #0
    b228:	7158      	strb	r0, [r3, #5]
	return ERR_NONE;
    b22a:	e792      	b.n	b152 <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    b22c:	f06f 001a 	mvn.w	r0, #26
    b230:	e78f      	b.n	b152 <cdcdf_acm_ctrl+0x22>
	switch (ctrl) {
    b232:	f06f 000c 	mvn.w	r0, #12
    b236:	e78c      	b.n	b152 <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    b238:	f06f 0011 	mvn.w	r0, #17
    b23c:	e789      	b.n	b152 <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    b23e:	f06f 001b 	mvn.w	r0, #27
    b242:	e786      	b.n	b152 <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    b244:	f06f 0013 	mvn.w	r0, #19
    b248:	e783      	b.n	b152 <cdcdf_acm_ctrl+0x22>
    b24a:	bf00      	nop
    b24c:	20000804 	.word	0x20000804
    b250:	0000e051 	.word	0x0000e051
    b254:	0000ade7 	.word	0x0000ade7
    b258:	0000e0b5 	.word	0x0000e0b5
    b25c:	0000adcd 	.word	0x0000adcd
    b260:	0000e0e1 	.word	0x0000e0e1

0000b264 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    b264:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    b266:	4b0a      	ldr	r3, [pc, #40]	; (b290 <cdcdf_acm_init+0x2c>)
    b268:	4798      	blx	r3
    b26a:	2801      	cmp	r0, #1
    b26c:	d80c      	bhi.n	b288 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    b26e:	4809      	ldr	r0, [pc, #36]	; (b294 <cdcdf_acm_init+0x30>)
    b270:	4b09      	ldr	r3, [pc, #36]	; (b298 <cdcdf_acm_init+0x34>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    b272:	e9c0 3007 	strd	r3, r0, [r0, #28]

	usbdc_register_function(&_cdcdf_acm);
    b276:	4b09      	ldr	r3, [pc, #36]	; (b29c <cdcdf_acm_init+0x38>)
    b278:	3018      	adds	r0, #24
    b27a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    b27c:	2001      	movs	r0, #1
    b27e:	4908      	ldr	r1, [pc, #32]	; (b2a0 <cdcdf_acm_init+0x3c>)
    b280:	4b08      	ldr	r3, [pc, #32]	; (b2a4 <cdcdf_acm_init+0x40>)
    b282:	4798      	blx	r3
	return ERR_NONE;
    b284:	2000      	movs	r0, #0
}
    b286:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    b288:	f06f 0010 	mvn.w	r0, #16
    b28c:	e7fb      	b.n	b286 <cdcdf_acm_init+0x22>
    b28e:	bf00      	nop
    b290:	00011775 	.word	0x00011775
    b294:	20000804 	.word	0x20000804
    b298:	0000b131 	.word	0x0000b131
    b29c:	0001171d 	.word	0x0001171d
    b2a0:	20000350 	.word	0x20000350
    b2a4:	00011695 	.word	0x00011695

0000b2a8 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    b2a8:	b410      	push	{r4}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    b2aa:	4c08      	ldr	r4, [pc, #32]	; (b2cc <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    b2ac:	7963      	ldrb	r3, [r4, #5]
{
    b2ae:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    b2b0:	b13b      	cbz	r3, b2c2 <cdcdf_acm_read+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    b2b2:	4601      	mov	r1, r0
    b2b4:	7920      	ldrb	r0, [r4, #4]
    b2b6:	4c06      	ldr	r4, [pc, #24]	; (b2d0 <cdcdf_acm_read+0x28>)
    b2b8:	2300      	movs	r3, #0
    b2ba:	46a4      	mov	ip, r4
}
    b2bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    b2c0:	4760      	bx	ip
}
    b2c2:	f06f 0010 	mvn.w	r0, #16
    b2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    b2ca:	4770      	bx	lr
    b2cc:	20000804 	.word	0x20000804
    b2d0:	0001133d 	.word	0x0001133d

0000b2d4 <cdcdf_acm_write>:
{
    b2d4:	b410      	push	{r4}
	return _cdcdf_acm_funcd.enabled;
    b2d6:	4c08      	ldr	r4, [pc, #32]	; (b2f8 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    b2d8:	7963      	ldrb	r3, [r4, #5]
{
    b2da:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    b2dc:	b13b      	cbz	r3, b2ee <cdcdf_acm_write+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    b2de:	4601      	mov	r1, r0
    b2e0:	78e0      	ldrb	r0, [r4, #3]
    b2e2:	4c06      	ldr	r4, [pc, #24]	; (b2fc <cdcdf_acm_write+0x28>)
    b2e4:	2301      	movs	r3, #1
    b2e6:	46a4      	mov	ip, r4
}
    b2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    b2ec:	4760      	bx	ip
}
    b2ee:	f06f 0010 	mvn.w	r0, #16
    b2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    b2f6:	4770      	bx	lr
    b2f8:	20000804 	.word	0x20000804
    b2fc:	0001133d 	.word	0x0001133d

0000b300 <cdcdf_acm_register_callback>:
{
    b300:	b508      	push	{r3, lr}
    b302:	460a      	mov	r2, r1
    b304:	2803      	cmp	r0, #3
    b306:	d814      	bhi.n	b332 <cdcdf_acm_register_callback+0x32>
    b308:	e8df f000 	tbb	[pc, r0]
    b30c:	100d0902 	.word	0x100d0902
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    b310:	4b09      	ldr	r3, [pc, #36]	; (b338 <cdcdf_acm_register_callback+0x38>)
    b312:	7918      	ldrb	r0, [r3, #4]
    b314:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    b316:	4b09      	ldr	r3, [pc, #36]	; (b33c <cdcdf_acm_register_callback+0x3c>)
    b318:	4798      	blx	r3
	return ERR_NONE;
    b31a:	2000      	movs	r0, #0
}
    b31c:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    b31e:	4b06      	ldr	r3, [pc, #24]	; (b338 <cdcdf_acm_register_callback+0x38>)
    b320:	2102      	movs	r1, #2
    b322:	78d8      	ldrb	r0, [r3, #3]
    b324:	e7f7      	b.n	b316 <cdcdf_acm_register_callback+0x16>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    b326:	4b04      	ldr	r3, [pc, #16]	; (b338 <cdcdf_acm_register_callback+0x38>)
    b328:	6119      	str	r1, [r3, #16]
		break;
    b32a:	e7f6      	b.n	b31a <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    b32c:	4b02      	ldr	r3, [pc, #8]	; (b338 <cdcdf_acm_register_callback+0x38>)
    b32e:	6159      	str	r1, [r3, #20]
    b330:	e7f3      	b.n	b31a <cdcdf_acm_register_callback+0x1a>
	return ERR_NONE;
    b332:	f06f 000c 	mvn.w	r0, #12
    b336:	e7f1      	b.n	b31c <cdcdf_acm_register_callback+0x1c>
    b338:	20000804 	.word	0x20000804
    b33c:	0000e2c9 	.word	0x0000e2c9

0000b340 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    b340:	4b04      	ldr	r3, [pc, #16]	; (b354 <_sbrk+0x14>)
    b342:	6819      	ldr	r1, [r3, #0]
{
    b344:	4602      	mov	r2, r0
	if (heap == NULL) {
    b346:	b909      	cbnz	r1, b34c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    b348:	4903      	ldr	r1, [pc, #12]	; (b358 <_sbrk+0x18>)
    b34a:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    b34c:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    b34e:	4402      	add	r2, r0
    b350:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
    b352:	4770      	bx	lr
    b354:	20000828 	.word	0x20000828
    b358:	20024d68 	.word	0x20024d68

0000b35c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    b35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b360:	4770      	bx	lr

0000b362 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    b362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b366:	604b      	str	r3, [r1, #4]

	return 0;
}
    b368:	2000      	movs	r0, #0
    b36a:	4770      	bx	lr

0000b36c <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    b36c:	2001      	movs	r0, #1
    b36e:	4770      	bx	lr

0000b370 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    b370:	2000      	movs	r0, #0
    b372:	4770      	bx	lr

0000b374 <_qspi_dma_rx_complete>:
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    b374:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    b376:	4903      	ldr	r1, [pc, #12]	; (b384 <_qspi_dma_rx_complete+0x10>)

	_qspi_end_transfer(dev->prvt);
    b378:	681a      	ldr	r2, [r3, #0]

	if (dev->cb.xfer_done) {
    b37a:	685b      	ldr	r3, [r3, #4]
    b37c:	6011      	str	r1, [r2, #0]
    b37e:	b103      	cbz	r3, b382 <_qspi_dma_rx_complete+0xe>
		dev->cb.xfer_done(resource);
    b380:	4718      	bx	r3
	}
}
    b382:	4770      	bx	lr
    b384:	01000002 	.word	0x01000002

0000b388 <_qspi_dma_tx_complete>:
    b388:	4b00      	ldr	r3, [pc, #0]	; (b38c <_qspi_dma_tx_complete+0x4>)
    b38a:	4718      	bx	r3
    b38c:	0000b375 	.word	0x0000b375

0000b390 <_qspi_dma_error_occured>:
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    b390:	6883      	ldr	r3, [r0, #8]
    b392:	689b      	ldr	r3, [r3, #8]
    b394:	b103      	cbz	r3, b398 <_qspi_dma_error_occured+0x8>
		dev->cb.error(resource);
    b396:	4718      	bx	r3
	}
}
    b398:	4770      	bx	lr
	...

0000b39c <_qspi_dma_init>:

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b39e:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    b3a0:	4604      	mov	r4, r0
    b3a2:	b110      	cbz	r0, b3aa <_qspi_dma_init+0xe>
    b3a4:	1e08      	subs	r0, r1, #0
    b3a6:	bf18      	it	ne
    b3a8:	2001      	movne	r0, #1
	dev->prvt = hw;
    b3aa:	4626      	mov	r6, r4
	ASSERT(dev && hw);
    b3ac:	22cb      	movs	r2, #203	; 0xcb
    b3ae:	490f      	ldr	r1, [pc, #60]	; (b3ec <_qspi_dma_init+0x50>)
    b3b0:	4b0f      	ldr	r3, [pc, #60]	; (b3f0 <_qspi_dma_init+0x54>)
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    b3b2:	4f10      	ldr	r7, [pc, #64]	; (b3f4 <_qspi_dma_init+0x58>)
	ASSERT(dev && hw);
    b3b4:	4798      	blx	r3
    b3b6:	2301      	movs	r3, #1
	dev->prvt = hw;
    b3b8:	f846 5b0c 	str.w	r5, [r6], #12
    b3bc:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    b3be:	4b0e      	ldr	r3, [pc, #56]	; (b3f8 <_qspi_dma_init+0x5c>)
    b3c0:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    b3c2:	4b0e      	ldr	r3, [pc, #56]	; (b3fc <_qspi_dma_init+0x60>)
    b3c4:	60ab      	str	r3, [r5, #8]
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    b3c6:	211f      	movs	r1, #31
    b3c8:	4630      	mov	r0, r6
    b3ca:	47b8      	blx	r7
	dev->resource->back                 = dev;
    b3cc:	68e3      	ldr	r3, [r4, #12]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    b3ce:	4a0c      	ldr	r2, [pc, #48]	; (b400 <_qspi_dma_init+0x64>)
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    b3d0:	4d0c      	ldr	r5, [pc, #48]	; (b404 <_qspi_dma_init+0x68>)
	dev->resource->back                 = dev;
    b3d2:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    b3d4:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    b3d6:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    b3d8:	211e      	movs	r1, #30
    b3da:	4630      	mov	r0, r6
    b3dc:	47b8      	blx	r7
	dev->resource->back                 = dev;
    b3de:	68e3      	ldr	r3, [r4, #12]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    b3e0:	4a09      	ldr	r2, [pc, #36]	; (b408 <_qspi_dma_init+0x6c>)
	dev->resource->back                 = dev;
    b3e2:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    b3e4:	e9c3 2500 	strd	r2, r5, [r3]

	return ERR_NONE;
}
    b3e8:	2000      	movs	r0, #0
    b3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3ec:	00014d68 	.word	0x00014d68
    b3f0:	0000cb4d 	.word	0x0000cb4d
    b3f4:	0000cd91 	.word	0x0000cd91
    b3f8:	06000011 	.word	0x06000011
    b3fc:	00243b00 	.word	0x00243b00
    b400:	0000b375 	.word	0x0000b375
    b404:	0000b391 	.word	0x0000b391
    b408:	0000b389 	.word	0x0000b389

0000b40c <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    b40c:	b570      	push	{r4, r5, r6, lr}
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
    b40e:	088d      	lsrs	r5, r1, #2
	return ((Nvmctrl *)hw)->PARAM.reg;
}

static inline bool hri_nvmctrl_get_STATUS_READY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    b410:	8a44      	ldrh	r4, [r0, #18]
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    b412:	07e6      	lsls	r6, r4, #31
    b414:	d5fc      	bpl.n	b410 <_flash_program+0x4>
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    b416:	f24a 5415 	movw	r4, #42261	; 0xa515
    b41a:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    b41c:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    b41e:	07e4      	lsls	r4, r4, #31
    b420:	d5fc      	bpl.n	b41c <_flash_program+0x10>
    b422:	00ad      	lsls	r5, r5, #2
    b424:	2400      	movs	r4, #0
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    b426:	b2a6      	uxth	r6, r4
    b428:	429e      	cmp	r6, r3
    b42a:	d307      	bcc.n	b43c <_flash_program+0x30>
    b42c:	8a43      	ldrh	r3, [r0, #18]
		NVM_MEMORY[nvm_address++] = *ptr_read;
		ptr_read++;
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    b42e:	07db      	lsls	r3, r3, #31
    b430:	d5fc      	bpl.n	b42c <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    b432:	f24a 5303 	movw	r3, #42243	; 0xa503
	((Nvmctrl *)hw)->ADDR.reg = data;
    b436:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    b438:	8083      	strh	r3, [r0, #4]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr);
	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_WP | NVMCTRL_CTRLB_CMDEX_KEY);
}
    b43a:	bd70      	pop	{r4, r5, r6, pc}
		NVM_MEMORY[nvm_address++] = *ptr_read;
    b43c:	5916      	ldr	r6, [r2, r4]
    b43e:	5166      	str	r6, [r4, r5]
	for (i = 0; i < size; i += 4) {
    b440:	3404      	adds	r4, #4
    b442:	e7f0      	b.n	b426 <_flash_program+0x1a>

0000b444 <_flash_init>:
{
    b444:	b538      	push	{r3, r4, r5, lr}
    b446:	460d      	mov	r5, r1
	ASSERT(device && (hw == NVMCTRL));
    b448:	4604      	mov	r4, r0
    b44a:	b118      	cbz	r0, b454 <_flash_init+0x10>
    b44c:	4814      	ldr	r0, [pc, #80]	; (b4a0 <_flash_init+0x5c>)
    b44e:	1a0b      	subs	r3, r1, r0
    b450:	4258      	negs	r0, r3
    b452:	4158      	adcs	r0, r3
    b454:	4913      	ldr	r1, [pc, #76]	; (b4a4 <_flash_init+0x60>)
    b456:	4b14      	ldr	r3, [pc, #80]	; (b4a8 <_flash_init+0x64>)
    b458:	224b      	movs	r2, #75	; 0x4b
    b45a:	4798      	blx	r3
	return ((Nvmctrl *)hw)->CTRLA.reg;
    b45c:	882b      	ldrh	r3, [r5, #0]
	device->hw = hw;
    b45e:	6125      	str	r5, [r4, #16]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    b460:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    b464:	049b      	lsls	r3, r3, #18
    b466:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    b468:	802b      	strh	r3, [r5, #0]
	_nvm_dev = device;
    b46a:	4b10      	ldr	r3, [pc, #64]	; (b4ac <_flash_init+0x68>)
    b46c:	601c      	str	r4, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b46e:	4b10      	ldr	r3, [pc, #64]	; (b4b0 <_flash_init+0x6c>)
    b470:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    b474:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    b478:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b47c:	f3bf 8f6f 	isb	sy
    b480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    b488:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    b48c:	f3bf 8f6f 	isb	sy
}
    b490:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b492:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b496:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b49a:	6019      	str	r1, [r3, #0]
    b49c:	601a      	str	r2, [r3, #0]
    b49e:	bd38      	pop	{r3, r4, r5, pc}
    b4a0:	41004000 	.word	0x41004000
    b4a4:	00014d7f 	.word	0x00014d7f
    b4a8:	0000cb4d 	.word	0x0000cb4d
    b4ac:	2000082c 	.word	0x2000082c
    b4b0:	e000e100 	.word	0xe000e100

0000b4b4 <_flash_get_page_size>:
}
    b4b4:	f44f 7000 	mov.w	r0, #512	; 0x200
    b4b8:	4770      	bx	lr

0000b4ba <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    b4ba:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    b4bc:	6898      	ldr	r0, [r3, #8]
}
    b4be:	b280      	uxth	r0, r0
    b4c0:	4770      	bx	lr

0000b4c2 <_flash_read>:
{
    b4c2:	b510      	push	{r4, lr}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    b4c4:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    b4c6:	8a60      	ldrh	r0, [r4, #18]
    b4c8:	07c0      	lsls	r0, r0, #31
    b4ca:	d5fc      	bpl.n	b4c6 <_flash_read+0x4>
	for (i = 0; i < length; i++) {
    b4cc:	2000      	movs	r0, #0
    b4ce:	e002      	b.n	b4d6 <_flash_read+0x14>
		buffer[i] = nvm_addr[src_addr + i];
    b4d0:	5c44      	ldrb	r4, [r0, r1]
    b4d2:	5414      	strb	r4, [r2, r0]
	for (i = 0; i < length; i++) {
    b4d4:	3001      	adds	r0, #1
    b4d6:	4298      	cmp	r0, r3
    b4d8:	d1fa      	bne.n	b4d0 <_flash_read+0xe>
}
    b4da:	bd10      	pop	{r4, pc}

0000b4dc <_flash_write>:
{
    b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4e0:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    b4e4:	b083      	sub	sp, #12
    b4e6:	4606      	mov	r6, r0
    b4e8:	460c      	mov	r4, r1
    b4ea:	4617      	mov	r7, r2
    b4ec:	9301      	str	r3, [sp, #4]
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    b4ee:	f424 59ff 	bic.w	r9, r4, #8160	; 0x1fe0
    b4f2:	f029 091f 	bic.w	r9, r9, #31
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    b4f6:	f509 5aff 	add.w	sl, r9, #8160	; 0x1fe0
    b4fa:	f10a 0a1f 	add.w	sl, sl, #31
    b4fe:	f04f 0800 	mov.w	r8, #0
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    b502:	aa02      	add	r2, sp, #8
    b504:	4442      	add	r2, r8
    b506:	eb09 0108 	add.w	r1, r9, r8
    b50a:	4d24      	ldr	r5, [pc, #144]	; (b59c <_flash_write+0xc0>)
    b50c:	f44f 7300 	mov.w	r3, #512	; 0x200
    b510:	4630      	mov	r0, r6
    b512:	f508 7800 	add.w	r8, r8, #512	; 0x200
    b516:	47a8      	blx	r5
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    b518:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    b51c:	d1f1      	bne.n	b502 <_flash_write+0x26>
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    b51e:	eba4 0309 	sub.w	r3, r4, r9
    b522:	0a5a      	lsrs	r2, r3, #9
		k = wr_start_addr - block_start_addr - j * NVMCTRL_PAGE_SIZE;
    b524:	4639      	mov	r1, r7
    b526:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    b52a:	4554      	cmp	r4, sl
    b52c:	460f      	mov	r7, r1
    b52e:	d801      	bhi.n	b534 <_flash_write+0x58>
    b530:	9801      	ldr	r0, [sp, #4]
    b532:	bb18      	cbnz	r0, b57c <_flash_write+0xa0>
		_flash_erase_block(device->hw, block_start_addr);
    b534:	6933      	ldr	r3, [r6, #16]
    b536:	8a5a      	ldrh	r2, [r3, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    b538:	07d2      	lsls	r2, r2, #31
    b53a:	d5fc      	bpl.n	b536 <_flash_write+0x5a>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    b53c:	f24a 5201 	movw	r2, #42241	; 0xa501
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    b540:	f8df b05c 	ldr.w	fp, [pc, #92]	; b5a0 <_flash_write+0xc4>
	((Nvmctrl *)hw)->ADDR.reg = data;
    b544:	f8c3 9014 	str.w	r9, [r3, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    b548:	f04f 0800 	mov.w	r8, #0
    b54c:	809a      	strh	r2, [r3, #4]
    b54e:	aa02      	add	r2, sp, #8
    b550:	4442      	add	r2, r8
    b552:	eb09 0108 	add.w	r1, r9, r8
    b556:	6930      	ldr	r0, [r6, #16]
    b558:	f44f 7300 	mov.w	r3, #512	; 0x200
    b55c:	f508 7800 	add.w	r8, r8, #512	; 0x200
    b560:	47d8      	blx	fp
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    b562:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    b566:	d1f2      	bne.n	b54e <_flash_write+0x72>
	} while (block_end_addr < (wr_start_addr + length - 1));
    b568:	9b01      	ldr	r3, [sp, #4]
    b56a:	4423      	add	r3, r4
    b56c:	3b01      	subs	r3, #1
    b56e:	4553      	cmp	r3, sl
    b570:	d8bd      	bhi.n	b4ee <_flash_write+0x12>
}
    b572:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    b576:	b003      	add	sp, #12
    b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tmp_buffer[j][k] = *buffer;
    b57c:	a802      	add	r0, sp, #8
    b57e:	eb00 2042 	add.w	r0, r0, r2, lsl #9
    b582:	783f      	ldrb	r7, [r7, #0]
    b584:	54c7      	strb	r7, [r0, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    b586:	3301      	adds	r3, #1
    b588:	f3c3 0308 	ubfx	r3, r3, #0, #9
			if (0 == k) {
    b58c:	3101      	adds	r1, #1
    b58e:	b903      	cbnz	r3, b592 <_flash_write+0xb6>
				j++;
    b590:	3201      	adds	r2, #1
			length--;
    b592:	9801      	ldr	r0, [sp, #4]
    b594:	3801      	subs	r0, #1
			wr_start_addr++;
    b596:	3401      	adds	r4, #1
			length--;
    b598:	9001      	str	r0, [sp, #4]
    b59a:	e7c6      	b.n	b52a <_flash_write+0x4e>
    b59c:	0000b4c3 	.word	0x0000b4c3
    b5a0:	0000b40d 	.word	0x0000b40d

0000b5a4 <_flash_erase>:
{
    b5a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    b5a8:	f421 54ff 	bic.w	r4, r1, #8160	; 0x1fe0
{
    b5ac:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    b5b0:	460e      	mov	r6, r1
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    b5b2:	4b25      	ldr	r3, [pc, #148]	; (b648 <_flash_erase+0xa4>)
{
    b5b4:	4607      	mov	r7, r0
    b5b6:	4615      	mov	r5, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    b5b8:	f024 041f 	bic.w	r4, r4, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    b5bc:	f44f 7200 	mov.w	r2, #512	; 0x200
    b5c0:	21ff      	movs	r1, #255	; 0xff
    b5c2:	4668      	mov	r0, sp
    b5c4:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    b5c6:	42a6      	cmp	r6, r4
    b5c8:	d11e      	bne.n	b608 <_flash_erase+0x64>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    b5ca:	4622      	mov	r2, r4
    b5cc:	462b      	mov	r3, r5
    b5ce:	f24a 5001 	movw	r0, #42241	; 0xa501
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    b5d2:	2b0f      	cmp	r3, #15
    b5d4:	d82e      	bhi.n	b634 <_flash_erase+0x90>
    b5d6:	0929      	lsrs	r1, r5, #4
    b5d8:	f06f 020f 	mvn.w	r2, #15
    b5dc:	fb02 5501 	mla	r5, r2, r1, r5
    b5e0:	eb04 3441 	add.w	r4, r4, r1, lsl #13
	if (page_nums != 0) {
    b5e4:	b165      	cbz	r5, b600 <_flash_erase+0x5c>
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    b5e6:	4e19      	ldr	r6, [pc, #100]	; (b64c <_flash_erase+0xa8>)
    b5e8:	eb04 2545 	add.w	r5, r4, r5, lsl #9
    b5ec:	4621      	mov	r1, r4
    b5ee:	f44f 7300 	mov.w	r3, #512	; 0x200
    b5f2:	466a      	mov	r2, sp
    b5f4:	4638      	mov	r0, r7
			block_start_addr += NVMCTRL_PAGE_SIZE;
    b5f6:	f504 7400 	add.w	r4, r4, #512	; 0x200
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    b5fa:	47b0      	blx	r6
		for (i = 0; i < page_nums; i++) {
    b5fc:	42a5      	cmp	r5, r4
    b5fe:	d1f5      	bne.n	b5ec <_flash_erase+0x48>
}
    b600:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    b604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    b608:	f504 5800 	add.w	r8, r4, #8192	; 0x2000
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    b60c:	f506 59f0 	add.w	r9, r6, #7680	; 0x1e00
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    b610:	4634      	mov	r4, r6
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    b612:	4e0e      	ldr	r6, [pc, #56]	; (b64c <_flash_erase+0xa8>)
    b614:	f44f 7300 	mov.w	r3, #512	; 0x200
    b618:	466a      	mov	r2, sp
    b61a:	4621      	mov	r1, r4
    b61c:	4638      	mov	r0, r7
    b61e:	47b0      	blx	r6
			if (--page_nums == 0) {
    b620:	3d01      	subs	r5, #1
    b622:	d0ed      	beq.n	b600 <_flash_erase+0x5c>
			dst_addr += NVMCTRL_PAGE_SIZE;
    b624:	f504 7400 	add.w	r4, r4, #512	; 0x200
			if (dst_addr == block_start_addr) {
    b628:	45a0      	cmp	r8, r4
    b62a:	d0ce      	beq.n	b5ca <_flash_erase+0x26>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    b62c:	45a1      	cmp	r9, r4
    b62e:	d1f1      	bne.n	b614 <_flash_erase+0x70>
    b630:	4644      	mov	r4, r8
    b632:	e7ca      	b.n	b5ca <_flash_erase+0x26>
		_flash_erase_block(device->hw, block_start_addr);
    b634:	6939      	ldr	r1, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    b636:	8a4e      	ldrh	r6, [r1, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    b638:	07f6      	lsls	r6, r6, #31
    b63a:	d5fc      	bpl.n	b636 <_flash_erase+0x92>
	((Nvmctrl *)hw)->ADDR.reg = data;
    b63c:	614a      	str	r2, [r1, #20]
		page_nums -= NVMCTRL_BLOCK_PAGES;
    b63e:	3b10      	subs	r3, #16
	((Nvmctrl *)hw)->CTRLB.reg = data;
    b640:	8088      	strh	r0, [r1, #4]
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    b642:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		page_nums -= NVMCTRL_BLOCK_PAGES;
    b646:	e7c4      	b.n	b5d2 <_flash_erase+0x2e>
    b648:	00012519 	.word	0x00012519
    b64c:	0000b4dd 	.word	0x0000b4dd

0000b650 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    b650:	6903      	ldr	r3, [r0, #16]
    b652:	f3c1 31cf 	ubfx	r1, r1, #15, #16
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    b656:	699a      	ldr	r2, [r3, #24]
    b658:	2301      	movs	r3, #1
    b65a:	fa03 f101 	lsl.w	r1, r3, r1
    b65e:	4211      	tst	r1, r2
}
    b660:	bf0c      	ite	eq
    b662:	4618      	moveq	r0, r3
    b664:	2000      	movne	r0, #0
    b666:	4770      	bx	lr

0000b668 <NVMCTRL_0_Handler>:
/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
	_nvm_interrupt_handler(_nvm_dev);
    b668:	4b09      	ldr	r3, [pc, #36]	; (b690 <NVMCTRL_0_Handler+0x28>)
    b66a:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    b66c:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    b66e:	8a1a      	ldrh	r2, [r3, #16]
	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    b670:	07d2      	lsls	r2, r2, #31
    b672:	d504      	bpl.n	b67e <NVMCTRL_0_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    b674:	2201      	movs	r2, #1
    b676:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.ready_cb) {
    b678:	6803      	ldr	r3, [r0, #0]
		if (NULL != device->flash_cb.error_cb) {
    b67a:	b143      	cbz	r3, b68e <NVMCTRL_0_Handler+0x26>
			device->flash_cb.error_cb(device);
    b67c:	4718      	bx	r3
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    b67e:	8a1a      	ldrh	r2, [r3, #16]
    b680:	b292      	uxth	r2, r2
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    b682:	b122      	cbz	r2, b68e <NVMCTRL_0_Handler+0x26>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    b684:	f240 225e 	movw	r2, #606	; 0x25e
    b688:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.error_cb) {
    b68a:	6843      	ldr	r3, [r0, #4]
    b68c:	e7f5      	b.n	b67a <NVMCTRL_0_Handler+0x12>
}
    b68e:	4770      	bx	lr
    b690:	2000082c 	.word	0x2000082c

0000b694 <NVMCTRL_1_Handler>:
    b694:	4b00      	ldr	r3, [pc, #0]	; (b698 <NVMCTRL_1_Handler+0x4>)
    b696:	4718      	bx	r3
    b698:	0000b669 	.word	0x0000b669

0000b69c <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    b69c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CRITICAL_SECTION_ENTER();
    b69e:	4b0e      	ldr	r3, [pc, #56]	; (b6d8 <gpio_get_pin_level+0x3c>)
    b6a0:	4605      	mov	r5, r0
    b6a2:	a801      	add	r0, sp, #4
    b6a4:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    b6a6:	4a0d      	ldr	r2, [pc, #52]	; (b6dc <gpio_get_pin_level+0x40>)
    b6a8:	096b      	lsrs	r3, r5, #5
    b6aa:	01d9      	lsls	r1, r3, #7
    b6ac:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    b6b0:	5851      	ldr	r1, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    b6b2:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    b6b4:	691c      	ldr	r4, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    b6b6:	4b0a      	ldr	r3, [pc, #40]	; (b6e0 <gpio_get_pin_level+0x44>)
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b6b8:	4054      	eors	r4, r2
    b6ba:	400c      	ands	r4, r1
	CRITICAL_SECTION_LEAVE();
    b6bc:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    b6be:	4054      	eors	r4, r2
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    b6c0:	f005 051f 	and.w	r5, r5, #31
	CRITICAL_SECTION_LEAVE();
    b6c4:	4798      	blx	r3
    b6c6:	2001      	movs	r0, #1
    b6c8:	fa00 f505 	lsl.w	r5, r0, r5
    b6cc:	4225      	tst	r5, r4
}
    b6ce:	bf08      	it	eq
    b6d0:	2000      	moveq	r0, #0
    b6d2:	b003      	add	sp, #12
    b6d4:	bd30      	pop	{r4, r5, pc}
    b6d6:	bf00      	nop
    b6d8:	00010d8d 	.word	0x00010d8d
    b6dc:	41008000 	.word	0x41008000
    b6e0:	00010d9b 	.word	0x00010d9b

0000b6e4 <hiddf_demo_sof_event>:
#endif /* CONF_USB_COMPOSITE_CDC_ECHO_DEMO */

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
static uint32_t pin_btn1, pin_btn2, pin_btn3;
static void     hiddf_demo_sof_event(void)
{
    b6e4:	b570      	push	{r4, r5, r6, lr}
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    b6e6:	4a15      	ldr	r2, [pc, #84]	; (b73c <hiddf_demo_sof_event+0x58>)
    b6e8:	7913      	ldrb	r3, [r2, #4]
    b6ea:	2b0a      	cmp	r3, #10
    b6ec:	4614      	mov	r4, r2
    b6ee:	d802      	bhi.n	b6f6 <hiddf_demo_sof_event+0x12>
    b6f0:	3301      	adds	r3, #1
    b6f2:	7113      	strb	r3, [r2, #4]
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    b6f4:	bd70      	pop	{r4, r5, r6, pc}
		interval = 0;
    b6f6:	2300      	movs	r3, #0
		if (!gpio_get_pin_level(pin_btn1)) {
    b6f8:	7a10      	ldrb	r0, [r2, #8]
    b6fa:	4d11      	ldr	r5, [pc, #68]	; (b740 <hiddf_demo_sof_event+0x5c>)
		interval = 0;
    b6fc:	7113      	strb	r3, [r2, #4]
		if (!gpio_get_pin_level(pin_btn1)) {
    b6fe:	47a8      	blx	r5
    b700:	b920      	cbnz	r0, b70c <hiddf_demo_sof_event+0x28>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    b702:	4b10      	ldr	r3, [pc, #64]	; (b744 <hiddf_demo_sof_event+0x60>)
    b704:	2101      	movs	r1, #1
    b706:	f06f 0004 	mvn.w	r0, #4
    b70a:	4798      	blx	r3
		if (!gpio_get_pin_level(pin_btn3)) {
    b70c:	7b20      	ldrb	r0, [r4, #12]
    b70e:	47a8      	blx	r5
    b710:	b918      	cbnz	r0, b71a <hiddf_demo_sof_event+0x36>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    b712:	4b0c      	ldr	r3, [pc, #48]	; (b744 <hiddf_demo_sof_event+0x60>)
    b714:	2101      	movs	r1, #1
    b716:	2005      	movs	r0, #5
    b718:	4798      	blx	r3
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    b71a:	7c20      	ldrb	r0, [r4, #16]
    b71c:	47a8      	blx	r5
    b71e:	7d22      	ldrb	r2, [r4, #20]
    b720:	f080 0001 	eor.w	r0, r0, #1
    b724:	b2c3      	uxtb	r3, r0
    b726:	429a      	cmp	r2, r3
    b728:	d0e4      	beq.n	b6f4 <hiddf_demo_sof_event+0x10>
			b_btn_last_state = b_btn_state;
    b72a:	4807      	ldr	r0, [pc, #28]	; (b748 <hiddf_demo_sof_event+0x64>)
    b72c:	7523      	strb	r3, [r4, #20]
			if (1 == b_btn_last_state) {
    b72e:	7083      	strb	r3, [r0, #2]
}
    b730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			hiddf_keyboard_keys_state_change(key_array, 1);
    b734:	4b05      	ldr	r3, [pc, #20]	; (b74c <hiddf_demo_sof_event+0x68>)
    b736:	2101      	movs	r1, #1
    b738:	4718      	bx	r3
    b73a:	bf00      	nop
    b73c:	20000830 	.word	0x20000830
    b740:	0000b69d 	.word	0x0000b69d
    b744:	0000cb05 	.word	0x0000cb05
    b748:	20000358 	.word	0x20000358
    b74c:	0000d591 	.word	0x0000d591

0000b750 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    b750:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    b752:	4b05      	ldr	r3, [pc, #20]	; (b768 <composite_device_init+0x18>)
    b754:	4805      	ldr	r0, [pc, #20]	; (b76c <composite_device_init+0x1c>)
    b756:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    b758:	4b05      	ldr	r3, [pc, #20]	; (b770 <composite_device_init+0x20>)
    b75a:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    b75c:	4b05      	ldr	r3, [pc, #20]	; (b774 <composite_device_init+0x24>)
    b75e:	4798      	blx	r3
	hiddf_keyboard_init();
#endif
#if CONF_USB_COMPOSITE_MSC_EN
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}
    b760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hiddf_keyboard_init();
    b764:	4b04      	ldr	r3, [pc, #16]	; (b778 <composite_device_init+0x28>)
    b766:	4718      	bx	r3
    b768:	000116c1 	.word	0x000116c1
    b76c:	20000845 	.word	0x20000845
    b770:	0000b265 	.word	0x0000b265
    b774:	0000cac1 	.word	0x0000cac1
    b778:	0000d54d 	.word	0x0000d54d

0000b77c <composite_device_start>:

void composite_device_start(void)
{
    b77c:	b510      	push	{r4, lr}
	usbdc_start(multi_desc);
    b77e:	4b03      	ldr	r3, [pc, #12]	; (b78c <composite_device_start+0x10>)
    b780:	4803      	ldr	r0, [pc, #12]	; (b790 <composite_device_start+0x14>)
    b782:	4798      	blx	r3
	usbdc_attach();
}
    b784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbdc_attach();
    b788:	4b02      	ldr	r3, [pc, #8]	; (b794 <composite_device_start+0x18>)
    b78a:	4718      	bx	r3
    b78c:	0001172d 	.word	0x0001172d
    b790:	20000364 	.word	0x20000364
    b794:	00011761 	.word	0x00011761

0000b798 <usb_init>:
}

void usb_init(void)
{

	composite_device_init();
    b798:	4b00      	ldr	r3, [pc, #0]	; (b79c <usb_init+0x4>)
    b79a:	4718      	bx	r3
    b79c:	0000b751 	.word	0x0000b751

0000b7a0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    b7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    b7a2:	6805      	ldr	r5, [r0, #0]

	if (!head) {
    b7a4:	b91d      	cbnz	r5, b7ae <timer_add_timer_task+0xe>
		list_insert_as_head(list, new_task);
    b7a6:	4b0f      	ldr	r3, [pc, #60]	; (b7e4 <timer_add_timer_task+0x44>)
	if (it == head) {
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
	}
}
    b7a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		list_insert_after(prev, new_task);
    b7ac:	4718      	bx	r3
		if (time_left >= new_task->interval)
    b7ae:	f8d1 c008 	ldr.w	ip, [r1, #8]
    b7b2:	462c      	mov	r4, r5
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    b7b4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    b7b6:	f1c2 0e01 	rsb	lr, r2, #1
		if (it->time_label <= time) {
    b7ba:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    b7be:	4293      	cmp	r3, r2
			time_left = it->interval - (time - it->time_label);
    b7c0:	bf95      	itete	ls
    b7c2:	19db      	addls	r3, r3, r7
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    b7c4:	4473      	addhi	r3, lr
			time_left = it->interval - (time - it->time_label);
    b7c6:	1a9b      	subls	r3, r3, r2
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    b7c8:	19db      	addhi	r3, r3, r7
		if (time_left >= new_task->interval)
    b7ca:	459c      	cmp	ip, r3
    b7cc:	d907      	bls.n	b7de <timer_add_timer_task+0x3e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    b7ce:	6823      	ldr	r3, [r4, #0]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    b7d0:	4626      	mov	r6, r4
    b7d2:	b913      	cbnz	r3, b7da <timer_add_timer_task+0x3a>
		list_insert_after(prev, new_task);
    b7d4:	4b04      	ldr	r3, [pc, #16]	; (b7e8 <timer_add_timer_task+0x48>)
    b7d6:	4630      	mov	r0, r6
    b7d8:	e7e6      	b.n	b7a8 <timer_add_timer_task+0x8>
    b7da:	461c      	mov	r4, r3
    b7dc:	e7ed      	b.n	b7ba <timer_add_timer_task+0x1a>
	if (it == head) {
    b7de:	42a5      	cmp	r5, r4
    b7e0:	d0e1      	beq.n	b7a6 <timer_add_timer_task+0x6>
    b7e2:	e7f7      	b.n	b7d4 <timer_add_timer_task+0x34>
    b7e4:	0000ea79 	.word	0x0000ea79
    b7e8:	0000eaa5 	.word	0x0000eaa5

0000b7ec <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    b7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    b7f0:	e9d0 6504 	ldrd	r6, r5, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    b7f4:	7e03      	ldrb	r3, [r0, #24]
	uint32_t                 time  = ++timer->time;
    b7f6:	3601      	adds	r6, #1
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    b7f8:	07da      	lsls	r2, r3, #31
{
    b7fa:	4604      	mov	r4, r0
	uint32_t                 time  = ++timer->time;
    b7fc:	6106      	str	r6, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    b7fe:	d41f      	bmi.n	b840 <timer_process_counted+0x54>
    b800:	7e03      	ldrb	r3, [r0, #24]
    b802:	079b      	lsls	r3, r3, #30
    b804:	d41c      	bmi.n	b840 <timer_process_counted+0x54>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    b806:	f8df 8044 	ldr.w	r8, [pc, #68]	; b84c <timer_process_counted+0x60>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    b80a:	f8df 9044 	ldr.w	r9, [pc, #68]	; b850 <timer_process_counted+0x64>
		list_remove_head(&timer->tasks);
    b80e:	f100 0714 	add.w	r7, r0, #20
	while (it && ((time - it->time_label) >= it->interval)) {
    b812:	b1cd      	cbz	r5, b848 <timer_process_counted+0x5c>
    b814:	686b      	ldr	r3, [r5, #4]
    b816:	68aa      	ldr	r2, [r5, #8]
    b818:	1af3      	subs	r3, r6, r3
    b81a:	4293      	cmp	r3, r2
    b81c:	d314      	bcc.n	b848 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    b81e:	4638      	mov	r0, r7
    b820:	47c0      	blx	r8
		if (TIMER_TASK_REPEAT == tmp->mode) {
    b822:	7c2b      	ldrb	r3, [r5, #16]
    b824:	2b01      	cmp	r3, #1
    b826:	d104      	bne.n	b832 <timer_process_counted+0x46>
			tmp->time_label = time;
    b828:	606e      	str	r6, [r5, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    b82a:	4632      	mov	r2, r6
    b82c:	4629      	mov	r1, r5
    b82e:	4638      	mov	r0, r7
    b830:	47c8      	blx	r9
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    b832:	f8d4 a014 	ldr.w	sl, [r4, #20]

		tmp->cb(tmp);
    b836:	68eb      	ldr	r3, [r5, #12]
    b838:	4628      	mov	r0, r5
    b83a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    b83c:	4655      	mov	r5, sl
    b83e:	e7e8      	b.n	b812 <timer_process_counted+0x26>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    b840:	7e23      	ldrb	r3, [r4, #24]
    b842:	f043 0302 	orr.w	r3, r3, #2
    b846:	7623      	strb	r3, [r4, #24]
	}
}
    b848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b84c:	0000eaed 	.word	0x0000eaed
    b850:	0000b7a1 	.word	0x0000b7a1

0000b854 <timer_init>:
{
    b854:	b570      	push	{r4, r5, r6, lr}
    b856:	460d      	mov	r5, r1
    b858:	4616      	mov	r6, r2
	ASSERT(descr && hw && func);
    b85a:	4604      	mov	r4, r0
    b85c:	b118      	cbz	r0, b866 <timer_init+0x12>
    b85e:	b189      	cbz	r1, b884 <timer_init+0x30>
    b860:	1e10      	subs	r0, r2, #0
    b862:	bf18      	it	ne
    b864:	2001      	movne	r0, #1
    b866:	223b      	movs	r2, #59	; 0x3b
    b868:	4907      	ldr	r1, [pc, #28]	; (b888 <timer_init+0x34>)
    b86a:	4b08      	ldr	r3, [pc, #32]	; (b88c <timer_init+0x38>)
    b86c:	4798      	blx	r3
	descr->func = func;
    b86e:	4620      	mov	r0, r4
	descr->func->init(&descr->device, hw);
    b870:	6833      	ldr	r3, [r6, #0]
	descr->func = func;
    b872:	f840 6b04 	str.w	r6, [r0], #4
	descr->func->init(&descr->device, hw);
    b876:	4629      	mov	r1, r5
    b878:	4798      	blx	r3
	descr->device.timer_cb.period_expired = timer_process_counted;
    b87a:	4b05      	ldr	r3, [pc, #20]	; (b890 <timer_init+0x3c>)
    b87c:	6063      	str	r3, [r4, #4]
	descr->time                           = 0;
    b87e:	2000      	movs	r0, #0
    b880:	6160      	str	r0, [r4, #20]
}
    b882:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    b884:	4608      	mov	r0, r1
    b886:	e7ee      	b.n	b866 <timer_init+0x12>
    b888:	00014d9c 	.word	0x00014d9c
    b88c:	0000cb4d 	.word	0x0000cb4d
    b890:	0000b7ed 	.word	0x0000b7ed

0000b894 <timer_start>:
{
    b894:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr && descr->func);
    b896:	4605      	mov	r5, r0
    b898:	b118      	cbz	r0, b8a2 <timer_start+0xe>
    b89a:	6800      	ldr	r0, [r0, #0]
    b89c:	3800      	subs	r0, #0
    b89e:	bf18      	it	ne
    b8a0:	2001      	movne	r0, #1
	if (descr->func->is_timer_started(&descr->device)) {
    b8a2:	462e      	mov	r6, r5
	ASSERT(descr && descr->func);
    b8a4:	4909      	ldr	r1, [pc, #36]	; (b8cc <timer_start+0x38>)
    b8a6:	4b0a      	ldr	r3, [pc, #40]	; (b8d0 <timer_start+0x3c>)
    b8a8:	2254      	movs	r2, #84	; 0x54
    b8aa:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    b8ac:	f856 3b04 	ldr.w	r3, [r6], #4
    b8b0:	699b      	ldr	r3, [r3, #24]
    b8b2:	4630      	mov	r0, r6
    b8b4:	4798      	blx	r3
    b8b6:	4604      	mov	r4, r0
    b8b8:	b928      	cbnz	r0, b8c6 <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    b8ba:	682b      	ldr	r3, [r5, #0]
    b8bc:	4630      	mov	r0, r6
    b8be:	689b      	ldr	r3, [r3, #8]
    b8c0:	4798      	blx	r3
	return ERR_NONE;
    b8c2:	4620      	mov	r0, r4
}
    b8c4:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    b8c6:	f06f 0010 	mvn.w	r0, #16
    b8ca:	e7fb      	b.n	b8c4 <timer_start+0x30>
    b8cc:	00014d9c 	.word	0x00014d9c
    b8d0:	0000cb4d 	.word	0x0000cb4d

0000b8d4 <timer_add_task>:
{
    b8d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b8d8:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    b8da:	4604      	mov	r4, r0
    b8dc:	b120      	cbz	r0, b8e8 <timer_add_task+0x14>
    b8de:	b309      	cbz	r1, b924 <timer_add_task+0x50>
    b8e0:	6800      	ldr	r0, [r0, #0]
    b8e2:	3800      	subs	r0, #0
    b8e4:	bf18      	it	ne
    b8e6:	2001      	movne	r0, #1
    b8e8:	4920      	ldr	r1, [pc, #128]	; (b96c <timer_add_task+0x98>)
    b8ea:	f8df 8094 	ldr.w	r8, [pc, #148]	; b980 <timer_add_task+0xac>
    b8ee:	227b      	movs	r2, #123	; 0x7b
    b8f0:	47c0      	blx	r8
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    b8f2:	7f23      	ldrb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    b8f4:	f104 0718 	add.w	r7, r4, #24
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    b8f8:	f043 0301 	orr.w	r3, r3, #1
    b8fc:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    b8fe:	4629      	mov	r1, r5
    b900:	4b1b      	ldr	r3, [pc, #108]	; (b970 <timer_add_task+0x9c>)
    b902:	4638      	mov	r0, r7
    b904:	4798      	blx	r3
    b906:	4606      	mov	r6, r0
    b908:	b170      	cbz	r0, b928 <timer_add_task+0x54>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    b90a:	7f23      	ldrb	r3, [r4, #28]
		ASSERT(false);
    b90c:	4917      	ldr	r1, [pc, #92]	; (b96c <timer_add_task+0x98>)
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    b90e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		ASSERT(false);
    b912:	2000      	movs	r0, #0
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    b914:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    b916:	2280      	movs	r2, #128	; 0x80
    b918:	47c0      	blx	r8
		return ERR_ALREADY_INITIALIZED;
    b91a:	f06f 0011 	mvn.w	r0, #17
}
    b91e:	b002      	add	sp, #8
    b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(descr && task && descr->func);
    b924:	4608      	mov	r0, r1
    b926:	e7df      	b.n	b8e8 <timer_add_task+0x14>
	task->time_label = descr->time;
    b928:	6962      	ldr	r2, [r4, #20]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    b92a:	4b12      	ldr	r3, [pc, #72]	; (b974 <timer_add_task+0xa0>)
	task->time_label = descr->time;
    b92c:	606a      	str	r2, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    b92e:	4629      	mov	r1, r5
    b930:	4638      	mov	r0, r7
    b932:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    b934:	7f23      	ldrb	r3, [r4, #28]
    b936:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    b93a:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    b93c:	7f23      	ldrb	r3, [r4, #28]
    b93e:	f013 0302 	ands.w	r3, r3, #2
    b942:	d010      	beq.n	b966 <timer_add_task+0x92>
		CRITICAL_SECTION_ENTER()
    b944:	4b0c      	ldr	r3, [pc, #48]	; (b978 <timer_add_task+0xa4>)
    b946:	a801      	add	r0, sp, #4
    b948:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    b94a:	7f23      	ldrb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    b94c:	4620      	mov	r0, r4
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    b94e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    b952:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    b954:	f850 3b04 	ldr.w	r3, [r0], #4
    b958:	69db      	ldr	r3, [r3, #28]
    b95a:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    b95c:	a801      	add	r0, sp, #4
    b95e:	4b07      	ldr	r3, [pc, #28]	; (b97c <timer_add_task+0xa8>)
    b960:	4798      	blx	r3
	return ERR_NONE;
    b962:	4630      	mov	r0, r6
    b964:	e7db      	b.n	b91e <timer_add_task+0x4a>
    b966:	4618      	mov	r0, r3
    b968:	e7d9      	b.n	b91e <timer_add_task+0x4a>
    b96a:	bf00      	nop
    b96c:	00014d9c 	.word	0x00014d9c
    b970:	0000ea69 	.word	0x0000ea69
    b974:	0000b7a1 	.word	0x0000b7a1
    b978:	00010d8d 	.word	0x00010d8d
    b97c:	00010d9b 	.word	0x00010d9b
    b980:	0000cb4d 	.word	0x0000cb4d

0000b984 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    b984:	2000      	movs	r0, #0
    b986:	4770      	bx	lr

0000b988 <_usb_d_dev_wait_dfll_rdy>:
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    b988:	4b07      	ldr	r3, [pc, #28]	; (b9a8 <_usb_d_dev_wait_dfll_rdy+0x20>)
    b98a:	f893 2020 	ldrb.w	r2, [r3, #32]
/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    b98e:	07d1      	lsls	r1, r2, #31
    b990:	d506      	bpl.n	b9a0 <_usb_d_dev_wait_dfll_rdy+0x18>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    b992:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    b994:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    b998:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    b99c:	d1f9      	bne.n	b992 <_usb_d_dev_wait_dfll_rdy+0xa>
    b99e:	4770      	bx	lr
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    b9a0:	691a      	ldr	r2, [r3, #16]
		       != (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    b9a2:	05d2      	lsls	r2, r2, #23
    b9a4:	d5fc      	bpl.n	b9a0 <_usb_d_dev_wait_dfll_rdy+0x18>
			;
	}
}
    b9a6:	4770      	bx	lr
    b9a8:	40001000 	.word	0x40001000

0000b9ac <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    b9ac:	b110      	cbz	r0, b9b4 <_usb_d_dev_ept+0x8>
    b9ae:	b109      	cbz	r1, b9b4 <_usb_d_dev_ept+0x8>
    b9b0:	3005      	adds	r0, #5
    b9b2:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    b9b4:	2314      	movs	r3, #20
    b9b6:	fb00 3003 	mla	r0, r0, r3, r3
}
    b9ba:	4b01      	ldr	r3, [pc, #4]	; (b9c0 <_usb_d_dev_ept+0x14>)
    b9bc:	4418      	add	r0, r3
    b9be:	4770      	bx	lr
    b9c0:	20000888 	.word	0x20000888

0000b9c4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    b9c4:	b430      	push	{r4, r5}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    b9c6:	7cc1      	ldrb	r1, [r0, #19]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b9c8:	7c85      	ldrb	r5, [r0, #18]

	if (!is_ctrl) {
    b9ca:	f001 0307 	and.w	r3, r1, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    b9ce:	f005 020f 	and.w	r2, r5, #15
	if (!is_ctrl) {
    b9d2:	2b01      	cmp	r3, #1
    b9d4:	ea4f 1442 	mov.w	r4, r2, lsl #5
    b9d8:	f102 0308 	add.w	r3, r2, #8
    b9dc:	d00a      	beq.n	b9f4 <_usb_d_dev_handle_setup+0x30>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    b9de:	015a      	lsls	r2, r3, #5
    b9e0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    b9e4:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    b9e8:	2110      	movs	r1, #16
    b9ea:	71d1      	strb	r1, [r2, #7]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    b9ec:	bc30      	pop	{r4, r5}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    b9ee:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    b9f2:	4770      	bx	lr
	if (_usb_d_dev_ep_is_busy(ept)) {
    b9f4:	f011 0f40 	tst.w	r1, #64	; 0x40
    b9f8:	d00b      	beq.n	ba12 <_usb_d_dev_handle_setup+0x4e>
		ept->flags.bits.is_busy = 0;
    b9fa:	0152      	lsls	r2, r2, #5
    b9fc:	f36f 1186 	bfc	r1, #6, #1
    ba00:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    ba04:	74c1      	strb	r1, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ba06:	2180      	movs	r1, #128	; 0x80
    ba08:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    ba0c:	2140      	movs	r1, #64	; 0x40
    ba0e:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
    ba12:	7cc2      	ldrb	r2, [r0, #19]
    ba14:	f36f 02c3 	bfc	r2, #3, #1
    ba18:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    ba1a:	4a0a      	ldr	r2, [pc, #40]	; (ba44 <_usb_d_dev_handle_setup+0x80>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ba1c:	015b      	lsls	r3, r3, #5
    ba1e:	1911      	adds	r1, r2, r4
    ba20:	2000      	movs	r0, #0
    ba22:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ba26:	f881 023a 	strb.w	r0, [r1, #570]	; 0x23a
    ba2a:	f881 024a 	strb.w	r0, [r1, #586]	; 0x24a
    ba2e:	216f      	movs	r1, #111	; 0x6f
    ba30:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    ba32:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	dev_inst.ep_callbacks.setup(ept->ep);
    ba36:	4628      	mov	r0, r5
    ba38:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    ba3c:	bc30      	pop	{r4, r5}
	dev_inst.ep_callbacks.setup(ept->ep);
    ba3e:	6893      	ldr	r3, [r2, #8]
    ba40:	4718      	bx	r3
    ba42:	bf00      	nop
    ba44:	20000888 	.word	0x20000888

0000ba48 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    ba48:	b410      	push	{r4}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    ba4a:	7c84      	ldrb	r4, [r0, #18]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    ba4c:	6882      	ldr	r2, [r0, #8]
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    ba4e:	2320      	movs	r3, #32
    ba50:	fa03 f101 	lsl.w	r1, r3, r1
    ba54:	f004 030f 	and.w	r3, r4, #15
    ba58:	015b      	lsls	r3, r3, #5
    ba5a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    ba5e:	b2c9      	uxtb	r1, r1
    ba60:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    ba64:	4b03      	ldr	r3, [pc, #12]	; (ba74 <_usb_d_dev_handle_stall+0x2c>)
    ba66:	4620      	mov	r0, r4
    ba68:	691b      	ldr	r3, [r3, #16]
}
    ba6a:	f85d 4b04 	ldr.w	r4, [sp], #4
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    ba6e:	2101      	movs	r1, #1
    ba70:	4718      	bx	r3
    ba72:	bf00      	nop
    ba74:	20000888 	.word	0x20000888

0000ba78 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    ba78:	b410      	push	{r4}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    ba7a:	7c84      	ldrb	r4, [r0, #18]
    ba7c:	2cff      	cmp	r4, #255	; 0xff
    ba7e:	d00c      	beq.n	ba9a <_usb_d_dev_trans_done+0x22>
    ba80:	7cc3      	ldrb	r3, [r0, #19]
    ba82:	065a      	lsls	r2, r3, #25
    ba84:	d509      	bpl.n	ba9a <_usb_d_dev_trans_done+0x22>
		return;
	}
	ept->flags.bits.is_busy = 0;
    ba86:	f36f 1386 	bfc	r3, #6, #1
    ba8a:	74c3      	strb	r3, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ba8c:	4b04      	ldr	r3, [pc, #16]	; (baa0 <_usb_d_dev_trans_done+0x28>)
    ba8e:	6882      	ldr	r2, [r0, #8]
    ba90:	691b      	ldr	r3, [r3, #16]
    ba92:	4620      	mov	r0, r4
}
    ba94:	f85d 4b04 	ldr.w	r4, [sp], #4
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    ba98:	4718      	bx	r3
}
    ba9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba9e:	4770      	bx	lr
    baa0:	20000888 	.word	0x20000888

0000baa4 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    baa4:	b477      	push	{r0, r1, r2, r4, r5, r6}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    baa6:	7c83      	ldrb	r3, [r0, #18]
{
    baa8:	460d      	mov	r5, r1
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    baaa:	2bff      	cmp	r3, #255	; 0xff
{
    baac:	4611      	mov	r1, r2
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    baae:	f644 2225 	movw	r2, #18981	; 0x4a25
    bab2:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    bab6:	d020      	beq.n	bafa <_usb_d_dev_trans_stop+0x56>
    bab8:	7cc2      	ldrb	r2, [r0, #19]
    baba:	0652      	lsls	r2, r2, #25
    babc:	d51d      	bpl.n	bafa <_usb_d_dev_trans_stop+0x56>
		return;
	}
	/* Stop transfer */
	if (dir) {
    babe:	f003 030f 	and.w	r3, r3, #15
    bac2:	f103 0408 	add.w	r4, r3, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    bac6:	0162      	lsls	r2, r4, #5
    bac8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    bacc:	b195      	cbz	r5, baf4 <_usb_d_dev_trans_stop+0x50>
    bace:	2680      	movs	r6, #128	; 0x80
    bad0:	7116      	strb	r6, [r2, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    bad2:	aa02      	add	r2, sp, #8
    bad4:	4415      	add	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bad6:	0164      	lsls	r4, r4, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bad8:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bada:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bade:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    bae2:	f815 2c04 	ldrb.w	r2, [r5, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bae6:	71e2      	strb	r2, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bae8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    baec:	4b04      	ldr	r3, [pc, #16]	; (bb00 <_usb_d_dev_trans_stop+0x5c>)
}
    baee:	b003      	add	sp, #12
    baf0:	bc70      	pop	{r4, r5, r6}
	_usb_d_dev_trans_done(ept, code);
    baf2:	4718      	bx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    baf4:	2640      	movs	r6, #64	; 0x40
    baf6:	7156      	strb	r6, [r2, #5]
}
    baf8:	e7eb      	b.n	bad2 <_usb_d_dev_trans_stop+0x2e>
}
    bafa:	b003      	add	sp, #12
    bafc:	bc70      	pop	{r4, r5, r6}
    bafe:	4770      	bx	lr
    bb00:	0000ba79 	.word	0x0000ba79

0000bb04 <_usb_d_dev_handle_trfail>:
{
    bb04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    bb06:	7c83      	ldrb	r3, [r0, #18]
    bb08:	f003 0c0f 	and.w	ip, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    bb0c:	f640 0204 	movw	r2, #2052	; 0x804
    bb10:	4663      	mov	r3, ip
    bb12:	f8ad 2004 	strh.w	r2, [sp, #4]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    bb16:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    bb18:	f10c 0308 	add.w	r3, ip, #8
    bb1c:	460c      	mov	r4, r1

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    bb1e:	0159      	lsls	r1, r3, #5
    bb20:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    bb24:	780f      	ldrb	r7, [r1, #0]
    bb26:	b334      	cbz	r4, bb76 <_usb_d_dev_handle_trfail+0x72>
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    bb28:	f3c7 1702 	ubfx	r7, r7, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    bb2c:	4e2c      	ldr	r6, [pc, #176]	; (bbe0 <_usb_d_dev_handle_trfail+0xdc>)
    bb2e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    bb32:	4416      	add	r6, r2
    bb34:	aa02      	add	r2, sp, #8
    bb36:	4422      	add	r2, r4
    bb38:	7ab5      	ldrb	r5, [r6, #10]
    bb3a:	f812 ec04 	ldrb.w	lr, [r2, #-4]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    bb3e:	2f02      	cmp	r7, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
    bb40:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    bb42:	ea4f 124c 	mov.w	r2, ip, lsl #5
    bb46:	d119      	bne.n	bb7c <_usb_d_dev_handle_trfail+0x78>
    bb48:	07e9      	lsls	r1, r5, #31
    bb4a:	d517      	bpl.n	bb7c <_usb_d_dev_handle_trfail+0x78>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    bb4c:	7ab1      	ldrb	r1, [r6, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bb4e:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bb50:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bb54:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    bb58:	f36f 0100 	bfc	r1, #0, #1
    bb5c:	72b1      	strb	r1, [r6, #10]
    bb5e:	f883 e007 	strb.w	lr, [r3, #7]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    bb62:	f004 0101 	and.w	r1, r4, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bb66:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
    bb6a:	2204      	movs	r2, #4
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    bb6c:	4b1d      	ldr	r3, [pc, #116]	; (bbe4 <_usb_d_dev_handle_trfail+0xe0>)
}
    bb6e:	b003      	add	sp, #12
    bb70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    bb74:	4718      	bx	r3
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    bb76:	f007 0707 	and.w	r7, r7, #7
	return tmp;
    bb7a:	e7d7      	b.n	bb2c <_usb_d_dev_handle_trfail+0x28>
	} else if (st.bit.ERRORFLOW) {
    bb7c:	f015 0502 	ands.w	r5, r5, #2
    bb80:	d01b      	beq.n	bbba <_usb_d_dev_handle_trfail+0xb6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    bb82:	7ab1      	ldrb	r1, [r6, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bb84:	7cc5      	ldrb	r5, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bb86:	015b      	lsls	r3, r3, #5
    bb88:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    bb8c:	f36f 0141 	bfc	r1, #1, #1
    bb90:	72b1      	strb	r1, [r6, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bb92:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bb96:	f883 e007 	strb.w	lr, [r3, #7]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    bb9a:	f005 0307 	and.w	r3, r5, #7
    bb9e:	2b01      	cmp	r3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bba0:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
    bba4:	d119      	bne.n	bbda <_usb_d_dev_handle_trfail+0xd6>
    bba6:	066b      	lsls	r3, r5, #25
    bba8:	d517      	bpl.n	bbda <_usb_d_dev_handle_trfail+0xd6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    bbaa:	7cc3      	ldrb	r3, [r0, #19]
    bbac:	ebb4 1fd3 	cmp.w	r4, r3, lsr #7
    bbb0:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    bbb4:	d011      	beq.n	bbda <_usb_d_dev_handle_trfail+0xd6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    bbb6:	2200      	movs	r2, #0
    bbb8:	e7d8      	b.n	bb6c <_usb_d_dev_handle_trfail+0x68>
	bank->STATUS_BK.reg     = 0;
    bbba:	490b      	ldr	r1, [pc, #44]	; (bbe8 <_usb_d_dev_handle_trfail+0xe4>)
    bbbc:	eb04 044c 	add.w	r4, r4, ip, lsl #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bbc0:	015b      	lsls	r3, r3, #5
    bbc2:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    bbc6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bbca:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    bbce:	f884 523a 	strb.w	r5, [r4, #570]	; 0x23a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bbd2:	f883 e007 	strb.w	lr, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bbd6:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
}
    bbda:	b003      	add	sp, #12
    bbdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbde:	bf00      	nop
    bbe0:	20000ab8 	.word	0x20000ab8
    bbe4:	0000baa5 	.word	0x0000baa5
    bbe8:	20000888 	.word	0x20000888

0000bbec <_usb_d_dev_reset_epts>:
{
    bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbf0:	4c0a      	ldr	r4, [pc, #40]	; (bc1c <_usb_d_dev_reset_epts+0x30>)
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    bbf2:	4f0b      	ldr	r7, [pc, #44]	; (bc20 <_usb_d_dev_reset_epts+0x34>)
{
    bbf4:	2501      	movs	r5, #1
		dev_inst.ep[i].ep       = 0xFF;
    bbf6:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    bbf8:	2103      	movs	r1, #3
    bbfa:	4620      	mov	r0, r4
    bbfc:	3501      	adds	r5, #1
    bbfe:	47b8      	blx	r7
		dev_inst.ep[i].flags.u8 = 0;
    bc00:	2100      	movs	r1, #0
	for (i = 0; i < USB_D_N_EP; i++) {
    bc02:	2d1c      	cmp	r5, #28
		dev_inst.ep[i].ep       = 0xFF;
    bc04:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    bc06:	74e1      	strb	r1, [r4, #19]
	for (i = 0; i < USB_D_N_EP; i++) {
    bc08:	f104 0414 	add.w	r4, r4, #20
    bc0c:	d1f4      	bne.n	bbf8 <_usb_d_dev_reset_epts+0xc>
}
    bc0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    bc12:	4804      	ldr	r0, [pc, #16]	; (bc24 <_usb_d_dev_reset_epts+0x38>)
    bc14:	4b04      	ldr	r3, [pc, #16]	; (bc28 <_usb_d_dev_reset_epts+0x3c>)
    bc16:	22c0      	movs	r2, #192	; 0xc0
    bc18:	4718      	bx	r3
    bc1a:	bf00      	nop
    bc1c:	2000089c 	.word	0x2000089c
    bc20:	0000ba79 	.word	0x0000ba79
    bc24:	20000ab8 	.word	0x20000ab8
    bc28:	00012519 	.word	0x00012519

0000bc2c <_usb_d_dev_in_next>:
{
    bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc30:	4604      	mov	r4, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    bc32:	7c80      	ldrb	r0, [r0, #18]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    bc34:	4688      	mov	r8, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    bc36:	f000 070f 	and.w	r7, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    bc3a:	2900      	cmp	r1, #0
    bc3c:	d05b      	beq.n	bcf6 <_usb_d_dev_in_next+0xca>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    bc3e:	4b4d      	ldr	r3, [pc, #308]	; (bd74 <_usb_d_dev_in_next+0x148>)
    bc40:	eb03 1347 	add.w	r3, r3, r7, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    bc44:	695e      	ldr	r6, [r3, #20]
    bc46:	f3c6 060d 	ubfx	r6, r6, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    bc4a:	8a22      	ldrh	r2, [r4, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    bc4c:	f894 e013 	ldrb.w	lr, [r4, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    bc50:	f240 33ff 	movw	r3, #1023	; 0x3ff
    bc54:	429a      	cmp	r2, r3
    bc56:	bf1a      	itte	ne
    bc58:	f102 3cff 	addne.w	ip, r2, #4294967295	; 0xffffffff
    bc5c:	fa0f fc8c 	sxthne.w	ip, ip
    bc60:	4694      	moveq	ip, r2
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    bc62:	f00e 0907 	and.w	r9, lr, #7
	if (isr) {
    bc66:	f1b8 0f00 	cmp.w	r8, #0
    bc6a:	d005      	beq.n	bc78 <_usb_d_dev_in_next+0x4c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bc6c:	017b      	lsls	r3, r7, #5
    bc6e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    bc72:	2102      	movs	r1, #2
    bc74:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	ept->trans_count += trans_count;
    bc78:	68a1      	ldr	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    bc7a:	6863      	ldr	r3, [r4, #4]
	ept->trans_count += trans_count;
    bc7c:	4431      	add	r1, r6
	if (ept->trans_count < ept->trans_size) {
    bc7e:	4299      	cmp	r1, r3
	ept->trans_count += trans_count;
    bc80:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    bc82:	ea4f 1547 	mov.w	r5, r7, lsl #5
    bc86:	d242      	bcs.n	bd0e <_usb_d_dev_in_next+0xe2>
		trans_next = ept->trans_size - ept->trans_count;
    bc88:	1a5b      	subs	r3, r3, r1
    bc8a:	b29e      	uxth	r6, r3
		if (ept->flags.bits.use_cache) {
    bc8c:	6823      	ldr	r3, [r4, #0]
    bc8e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; bd80 <_usb_d_dev_in_next+0x154>
    bc92:	f01e 0f20 	tst.w	lr, #32
    bc96:	4419      	add	r1, r3
    bc98:	d02f      	beq.n	bcfa <_usb_d_dev_in_next+0xce>
			if (trans_next > ept->size) {
    bc9a:	4296      	cmp	r6, r2
    bc9c:	bf28      	it	cs
    bc9e:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    bca0:	4b35      	ldr	r3, [pc, #212]	; (bd78 <_usb_d_dev_in_next+0x14c>)
    bca2:	68e0      	ldr	r0, [r4, #12]
    bca4:	4632      	mov	r2, r6
    bca6:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    bca8:	eb0a 0305 	add.w	r3, sl, r5
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    bcac:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    bcae:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    bcb2:	eb0a 0205 	add.w	r2, sl, r5
    bcb6:	f8d2 3244 	ldr.w	r3, [r2, #580]	; 0x244
    bcba:	f366 030d 	bfi	r3, r6, #0, #14
    bcbe:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    bcc2:	f8d2 3244 	ldr.w	r3, [r2, #580]	; 0x244
    bcc6:	f36f 339b 	bfc	r3, #14, #14
    bcca:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
	if (!isr) {
    bcce:	f1b8 0f00 	cmp.w	r8, #0
    bcd2:	d108      	bne.n	bce6 <_usb_d_dev_in_next+0xba>
			inten = USB_D_BANK1_INT_FLAGS;
    bcd4:	f1b9 0f01 	cmp.w	r9, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    bcd8:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    bcdc:	bf0c      	ite	eq
    bcde:	234e      	moveq	r3, #78	; 0x4e
    bce0:	234a      	movne	r3, #74	; 0x4a
    bce2:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    bce6:	017b      	lsls	r3, r7, #5
    bce8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    bcec:	2280      	movs	r2, #128	; 0x80
    bcee:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
}
    bcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    bcf6:	460e      	mov	r6, r1
    bcf8:	e7a7      	b.n	bc4a <_usb_d_dev_in_next+0x1e>
	bank->ADDR.reg          = addr;
    bcfa:	eb0a 0305 	add.w	r3, sl, r5
    bcfe:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    bd02:	bf28      	it	cs
    bd04:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
    bd08:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
}
    bd0c:	e7d1      	b.n	bcb2 <_usb_d_dev_in_next+0x86>
	} else if (ept->flags.bits.need_zlp) {
    bd0e:	f01e 0f10 	tst.w	lr, #16
    bd12:	d00e      	beq.n	bd32 <_usb_d_dev_in_next+0x106>
		ept->flags.bits.need_zlp = 0;
    bd14:	7ce3      	ldrb	r3, [r4, #19]
    bd16:	f36f 1304 	bfc	r3, #4, #1
    bd1a:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    bd1c:	4b17      	ldr	r3, [pc, #92]	; (bd7c <_usb_d_dev_in_next+0x150>)
    bd1e:	442b      	add	r3, r5
    bd20:	685a      	ldr	r2, [r3, #4]
    bd22:	f36f 020d 	bfc	r2, #0, #14
    bd26:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    bd28:	685a      	ldr	r2, [r3, #4]
    bd2a:	f36f 329b 	bfc	r2, #14, #14
    bd2e:	605a      	str	r2, [r3, #4]
		goto _in_tx_exec;
    bd30:	e7cd      	b.n	bcce <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    bd32:	f1b9 0f01 	cmp.w	r9, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    bd36:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
	if (last_pkt == ept->size) {
    bd3a:	ea0c 0c06 	and.w	ip, ip, r6
    bd3e:	bf0c      	ite	eq
    bd40:	234b      	moveq	r3, #75	; 0x4b
    bd42:	234a      	movne	r3, #74	; 0x4a
    bd44:	4562      	cmp	r2, ip
    bd46:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
    bd4a:	d10c      	bne.n	bd66 <_usb_d_dev_in_next+0x13a>
		ept->flags.bits.is_busy = 0;
    bd4c:	7ce3      	ldrb	r3, [r4, #19]
    bd4e:	f36f 1386 	bfc	r3, #6, #1
    bd52:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    bd54:	4b0a      	ldr	r3, [pc, #40]	; (bd80 <_usb_d_dev_in_next+0x154>)
    bd56:	68db      	ldr	r3, [r3, #12]
    bd58:	4798      	blx	r3
    bd5a:	2800      	cmp	r0, #0
    bd5c:	d1c9      	bne.n	bcf2 <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    bd5e:	7ce3      	ldrb	r3, [r4, #19]
    bd60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd64:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    bd66:	4620      	mov	r0, r4
    bd68:	4b06      	ldr	r3, [pc, #24]	; (bd84 <_usb_d_dev_in_next+0x158>)
}
    bd6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    bd6e:	2100      	movs	r1, #0
    bd70:	4718      	bx	r3
    bd72:	bf00      	nop
    bd74:	20000ab8 	.word	0x20000ab8
    bd78:	000123e5 	.word	0x000123e5
    bd7c:	20000ac8 	.word	0x20000ac8
    bd80:	20000888 	.word	0x20000888
    bd84:	0000ba79 	.word	0x0000ba79

0000bd88 <_usb_d_dev_out_next>:
{
    bd88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    bd8c:	7c86      	ldrb	r6, [r0, #18]
    bd8e:	f006 060f 	and.w	r6, r6, #15
{
    bd92:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    bd94:	460f      	mov	r7, r1
    bd96:	0175      	lsls	r5, r6, #5
    bd98:	2900      	cmp	r1, #0
    bd9a:	d060      	beq.n	be5e <_usb_d_dev_out_next+0xd6>
    bd9c:	4b5d      	ldr	r3, [pc, #372]	; (bf14 <_usb_d_dev_out_next+0x18c>)
    bd9e:	442b      	add	r3, r5
    bda0:	685a      	ldr	r2, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    bda2:	685b      	ldr	r3, [r3, #4]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    bda4:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    bda8:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    bdac:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bdb0:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    bdb2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    bdb6:	4598      	cmp	r8, r3
    bdb8:	bf1c      	itt	ne
    bdba:	f108 38ff 	addne.w	r8, r8, #4294967295	; 0xffffffff
    bdbe:	fa1f f888 	uxthne.w	r8, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bdc2:	f002 0307 	and.w	r3, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    bdc6:	ea09 0b08 	and.w	fp, r9, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    bdca:	9301      	str	r3, [sp, #4]
	if (isr) {
    bdcc:	b12f      	cbz	r7, bdda <_usb_d_dev_out_next+0x52>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    bdce:	0173      	lsls	r3, r6, #5
    bdd0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    bdd4:	2101      	movs	r1, #1
    bdd6:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    bdda:	0690      	lsls	r0, r2, #26
    bddc:	d50c      	bpl.n	bdf8 <_usb_d_dev_out_next+0x70>
    bdde:	6862      	ldr	r2, [r4, #4]
    bde0:	b152      	cbz	r2, bdf8 <_usb_d_dev_out_next+0x70>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    bde2:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    bde4:	6823      	ldr	r3, [r4, #0]
    bde6:	68e1      	ldr	r1, [r4, #12]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    bde8:	1a12      	subs	r2, r2, r0
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    bdea:	b292      	uxth	r2, r2
    bdec:	455a      	cmp	r2, fp
    bdee:	4418      	add	r0, r3
    bdf0:	bf28      	it	cs
    bdf2:	465a      	movcs	r2, fp
    bdf4:	4b48      	ldr	r3, [pc, #288]	; (bf18 <_usb_d_dev_out_next+0x190>)
    bdf6:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    bdf8:	6863      	ldr	r3, [r4, #4]
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d132      	bne.n	be64 <_usb_d_dev_out_next+0xdc>
    bdfe:	7ce2      	ldrb	r2, [r4, #19]
    be00:	06d1      	lsls	r1, r2, #27
    be02:	d52f      	bpl.n	be64 <_usb_d_dev_out_next+0xdc>
	bank->ADDR.reg          = addr;
    be04:	4845      	ldr	r0, [pc, #276]	; (bf1c <_usb_d_dev_out_next+0x194>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    be06:	68e1      	ldr	r1, [r4, #12]
		ept->flags.bits.need_zlp  = 0;
    be08:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	bank->ADDR.reg          = addr;
    be0c:	4428      	add	r0, r5
		ept->flags.bits.need_zlp  = 0;
    be0e:	f042 0220 	orr.w	r2, r2, #32
    be12:	74e2      	strb	r2, [r4, #19]
	bank->ADDR.reg          = addr;
    be14:	f500 720c 	add.w	r2, r0, #560	; 0x230
    be18:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    be1c:	6851      	ldr	r1, [r2, #4]
    be1e:	8a20      	ldrh	r0, [r4, #16]
    be20:	f360 319b 	bfi	r1, r0, #14, #14
    be24:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    be26:	6851      	ldr	r1, [r2, #4]
    be28:	f363 010d 	bfi	r1, r3, #0, #14
    be2c:	6051      	str	r1, [r2, #4]
	if (!isr) {
    be2e:	b96f      	cbnz	r7, be4c <_usb_d_dev_out_next+0xc4>
		if (is_ctrl) {
    be30:	9b01      	ldr	r3, [sp, #4]
    be32:	2b01      	cmp	r3, #1
	bank->STATUS_BK.reg     = 0;
    be34:	bf04      	itt	eq
    be36:	4b39      	ldreq	r3, [pc, #228]	; (bf1c <_usb_d_dev_out_next+0x194>)
    be38:	195b      	addeq	r3, r3, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    be3a:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    be3e:	bf0a      	itet	eq
    be40:	f883 724a 	strbeq.w	r7, [r3, #586]	; 0x24a
			inten = USB_D_BANK0_INT_FLAGS;
    be44:	2325      	movne	r3, #37	; 0x25
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    be46:	232d      	moveq	r3, #45	; 0x2d
    be48:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    be4c:	0176      	lsls	r6, r6, #5
    be4e:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
    be52:	2340      	movs	r3, #64	; 0x40
    be54:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
}
    be58:	b003      	add	sp, #12
    be5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    be5e:	468a      	mov	sl, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    be60:	4689      	mov	r9, r1
    be62:	e7a3      	b.n	bdac <_usb_d_dev_out_next+0x24>
	} else if (isr && last_pkt < ept->size) {
    be64:	68a1      	ldr	r1, [r4, #8]
    be66:	b1ef      	cbz	r7, bea4 <_usb_d_dev_out_next+0x11c>
    be68:	8a22      	ldrh	r2, [r4, #16]
    be6a:	455a      	cmp	r2, fp
    be6c:	d91a      	bls.n	bea4 <_usb_d_dev_out_next+0x11c>
		ept->flags.bits.need_zlp = 0;
    be6e:	7ce3      	ldrb	r3, [r4, #19]
		ept->trans_count += last_trans;
    be70:	4449      	add	r1, r9
		ept->flags.bits.need_zlp = 0;
    be72:	f36f 1304 	bfc	r3, #4, #1
    be76:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    be78:	60a1      	str	r1, [r4, #8]
	if (is_ctrl) {
    be7a:	9b01      	ldr	r3, [sp, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    be7c:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    be80:	2b01      	cmp	r3, #1
    be82:	bf0c      	ite	eq
    be84:	232d      	moveq	r3, #45	; 0x2d
    be86:	2325      	movne	r3, #37	; 0x25
    be88:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
	if (0 == epn) {
    be8c:	b91e      	cbnz	r6, be96 <_usb_d_dev_out_next+0x10e>
	bank->ADDR.reg          = addr;
    be8e:	4b23      	ldr	r3, [pc, #140]	; (bf1c <_usb_d_dev_out_next+0x194>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    be90:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    be92:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    be96:	4b22      	ldr	r3, [pc, #136]	; (bf20 <_usb_d_dev_out_next+0x198>)
    be98:	2100      	movs	r1, #0
    be9a:	4620      	mov	r0, r4
}
    be9c:	b003      	add	sp, #12
    be9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    bea2:	4718      	bx	r3
		ept->trans_count += trans_size;
    bea4:	4451      	add	r1, sl
		if (ept->trans_count < ept->trans_size) {
    bea6:	428b      	cmp	r3, r1
		ept->trans_count += trans_size;
    bea8:	60a1      	str	r1, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    beaa:	d9e6      	bls.n	be7a <_usb_d_dev_out_next+0xf2>
			if (ept->flags.bits.use_cache) {
    beac:	7ce0      	ldrb	r0, [r4, #19]
    beae:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    beb2:	4a1a      	ldr	r2, [pc, #104]	; (bf1c <_usb_d_dev_out_next+0x194>)
			trans_next = ept->trans_size - ept->trans_count;
    beb4:	1a5b      	subs	r3, r3, r1
			if (ept->flags.bits.use_cache) {
    beb6:	f010 0f20 	tst.w	r0, #32
			trans_next = ept->trans_size - ept->trans_count;
    beba:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    bebc:	d014      	beq.n	bee8 <_usb_d_dev_out_next+0x160>
	bank->ADDR.reg          = addr;
    bebe:	1951      	adds	r1, r2, r5
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    bec0:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    bec2:	f8c1 0230 	str.w	r0, [r1, #560]	; 0x230
    bec6:	4563      	cmp	r3, ip
    bec8:	bf28      	it	cs
    beca:	4663      	movcs	r3, ip
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    becc:	442a      	add	r2, r5
    bece:	f8d2 1234 	ldr.w	r1, [r2, #564]	; 0x234
    bed2:	f363 319b 	bfi	r1, r3, #14, #14
    bed6:	f8c2 1234 	str.w	r1, [r2, #564]	; 0x234
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    beda:	f8d2 3234 	ldr.w	r3, [r2, #564]	; 0x234
    bede:	f36f 030d 	bfc	r3, #0, #14
    bee2:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
			goto _out_rx_exec;
    bee6:	e7a2      	b.n	be2e <_usb_d_dev_out_next+0xa6>
				if (trans_next > ept->size) {
    bee8:	4563      	cmp	r3, ip
    beea:	d90a      	bls.n	bf02 <_usb_d_dev_out_next+0x17a>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    beec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    bef0:	d80c      	bhi.n	bf0c <_usb_d_dev_out_next+0x184>
						trans_next -= trans_next & size_mask;
    bef2:	ea23 0308 	bic.w	r3, r3, r8
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    bef6:	6820      	ldr	r0, [r4, #0]
    bef8:	4401      	add	r1, r0
	bank->ADDR.reg          = addr;
    befa:	1950      	adds	r0, r2, r5
    befc:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
}
    bf00:	e7e4      	b.n	becc <_usb_d_dev_out_next+0x144>
				} else if (trans_next < ept->size) {
    bf02:	d2f8      	bcs.n	bef6 <_usb_d_dev_out_next+0x16e>
					ept->flags.bits.use_cache = 1;
    bf04:	f040 0020 	orr.w	r0, r0, #32
    bf08:	74e0      	strb	r0, [r4, #19]
    bf0a:	e7f4      	b.n	bef6 <_usb_d_dev_out_next+0x16e>
						trans_next = USB_D_DEV_TRANS_MAX;
    bf0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bf10:	e7f1      	b.n	bef6 <_usb_d_dev_out_next+0x16e>
    bf12:	bf00      	nop
    bf14:	20000ab8 	.word	0x20000ab8
    bf18:	000123e5 	.word	0x000123e5
    bf1c:	20000888 	.word	0x20000888
    bf20:	0000ba79 	.word	0x0000ba79

0000bf24 <_usb_d_dev_handler>:
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    bf24:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
{
    bf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    bf2c:	8c1f      	ldrh	r7, [r3, #32]
    bf2e:	4d69      	ldr	r5, [pc, #420]	; (c0d4 <_usb_d_dev_handler+0x1b0>)
    bf30:	b2bf      	uxth	r7, r7
	if (0 == epint) {
    bf32:	2f00      	cmp	r7, #0
    bf34:	d163      	bne.n	bffe <_usb_d_dev_handler+0xda>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    bf36:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    bf38:	8b1a      	ldrh	r2, [r3, #24]
    bf3a:	b292      	uxth	r2, r2
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    bf3c:	400a      	ands	r2, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    bf3e:	f012 0004 	ands.w	r0, r2, #4
    bf42:	d005      	beq.n	bf50 <_usb_d_dev_handler+0x2c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bf44:	2204      	movs	r2, #4
    bf46:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    bf48:	682b      	ldr	r3, [r5, #0]
}
    bf4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.sof();
    bf4e:	4718      	bx	r3
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    bf50:	f412 7100 	ands.w	r1, r2, #512	; 0x200
    bf54:	d01f      	beq.n	bf96 <_usb_d_dev_handler+0x72>
    bf56:	f240 2201 	movw	r2, #513	; 0x201
    bf5a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bf5c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bf5e:	2270      	movs	r2, #112	; 0x70
    bf60:	831a      	strh	r2, [r3, #24]
    bf62:	4603      	mov	r3, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    bf64:	eb05 1243 	add.w	r2, r5, r3, lsl #5
    bf68:	f502 700e 	add.w	r0, r2, #568	; 0x238
    bf6c:	f8b2 2238 	ldrh.w	r2, [r2, #568]	; 0x238
    bf70:	f002 020f 	and.w	r2, r2, #15
    bf74:	2a03      	cmp	r2, #3
    bf76:	d109      	bne.n	bf8c <_usb_d_dev_handler+0x68>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    bf78:	8801      	ldrh	r1, [r0, #0]
			bank->EXTREG.reg = 0;
    bf7a:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    bf7c:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    bf80:	8003      	strh	r3, [r0, #0]
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    bf82:	686b      	ldr	r3, [r5, #4]
    bf84:	2003      	movs	r0, #3
}
    bf86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    bf8a:	4718      	bx	r3
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    bf8c:	3301      	adds	r3, #1
    bf8e:	2b05      	cmp	r3, #5
    bf90:	d1e8      	bne.n	bf64 <_usb_d_dev_handler+0x40>
	uint32_t lpm_variable = 0;
    bf92:	2100      	movs	r1, #0
    bf94:	e7f5      	b.n	bf82 <_usb_d_dev_handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    bf96:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    bf9a:	d004      	beq.n	bfa6 <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bf9c:	2280      	movs	r2, #128	; 0x80
    bf9e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    bfa0:	2005      	movs	r0, #5
    bfa2:	686b      	ldr	r3, [r5, #4]
    bfa4:	e7ef      	b.n	bf86 <_usb_d_dev_handler+0x62>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    bfa6:	f012 0470 	ands.w	r4, r2, #112	; 0x70
    bfaa:	d00b      	beq.n	bfc4 <_usb_d_dev_handler+0xa0>
    bfac:	2270      	movs	r2, #112	; 0x70
    bfae:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bfb0:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bfb2:	f240 2201 	movw	r2, #513	; 0x201
    bfb6:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    bfb8:	4b47      	ldr	r3, [pc, #284]	; (c0d8 <_usb_d_dev_handler+0x1b4>)
    bfba:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    bfbc:	686b      	ldr	r3, [r5, #4]
    bfbe:	4601      	mov	r1, r0
    bfc0:	2002      	movs	r0, #2
    bfc2:	e7e0      	b.n	bf86 <_usb_d_dev_handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    bfc4:	f012 0108 	ands.w	r1, r2, #8
    bfc8:	d00e      	beq.n	bfe8 <_usb_d_dev_handler+0xc4>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bfca:	2208      	movs	r2, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    bfcc:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bfd0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bfd2:	2270      	movs	r2, #112	; 0x70
    bfd4:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bfd6:	f240 2201 	movw	r2, #513	; 0x201
    bfda:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    bfdc:	4b3f      	ldr	r3, [pc, #252]	; (c0dc <_usb_d_dev_handler+0x1b8>)
    bfde:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    bfe0:	686b      	ldr	r3, [r5, #4]
    bfe2:	4621      	mov	r1, r4
    bfe4:	2001      	movs	r0, #1
    bfe6:	e7ce      	b.n	bf86 <_usb_d_dev_handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    bfe8:	07d0      	lsls	r0, r2, #31
    bfea:	d508      	bpl.n	bffe <_usb_d_dev_handler+0xda>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    bfec:	f240 2201 	movw	r2, #513	; 0x201
    bff0:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    bff2:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    bff4:	2270      	movs	r2, #112	; 0x70
    bff6:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    bff8:	2004      	movs	r0, #4
    bffa:	686b      	ldr	r3, [r5, #4]
    bffc:	e7c3      	b.n	bf86 <_usb_d_dev_handler+0x62>
    bffe:	4c35      	ldr	r4, [pc, #212]	; (c0d4 <_usb_d_dev_handler+0x1b0>)
			_usb_d_dev_handle_setup(ept);
    c000:	f8df 90e4 	ldr.w	r9, [pc, #228]	; c0e8 <_usb_d_dev_handler+0x1c4>
			_usb_d_dev_handle_trfail(ept, 1);
    c004:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c0ec <_usb_d_dev_handler+0x1c8>
		_usb_d_dev_out_next(ept, true);
    c008:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c0f0 <_usb_d_dev_handler+0x1cc>
	uint32_t lpm_variable = 0;
    c00c:	2600      	movs	r6, #0
		if (ept->ep == 0xFF) {
    c00e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    c012:	2aff      	cmp	r2, #255	; 0xff
    c014:	f104 0414 	add.w	r4, r4, #20
    c018:	d029      	beq.n	c06e <_usb_d_dev_handler+0x14a>
	if (!(epint & (1u << epn))) {
    c01a:	f002 020f 	and.w	r2, r2, #15
    c01e:	2101      	movs	r1, #1
    c020:	fa01 f302 	lsl.w	r3, r1, r2
    c024:	423b      	tst	r3, r7
    c026:	d022      	beq.n	c06e <_usb_d_dev_handler+0x14a>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c028:	0153      	lsls	r3, r2, #5
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c02a:	0152      	lsls	r2, r2, #5
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c02c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c030:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c034:	f893 0107 	ldrb.w	r0, [r3, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c038:	f892 3109 	ldrb.w	r3, [r2, #265]	; 0x109
	if (flags) {
    c03c:	4003      	ands	r3, r0
    c03e:	d016      	beq.n	c06e <_usb_d_dev_handler+0x14a>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c040:	2214      	movs	r2, #20
    c042:	fb02 5206 	mla	r2, r2, r6, r5
    c046:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
    c04a:	f002 0047 	and.w	r0, r2, #71	; 0x47
    c04e:	4288      	cmp	r0, r1
    c050:	d112      	bne.n	c078 <_usb_d_dev_handler+0x154>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c052:	06da      	lsls	r2, r3, #27
    c054:	d502      	bpl.n	c05c <_usb_d_dev_handler+0x138>
			_usb_d_dev_handle_setup(ept);
    c056:	4620      	mov	r0, r4
    c058:	47c8      	blx	r9
    c05a:	e008      	b.n	c06e <_usb_d_dev_handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c05c:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    c060:	d003      	beq.n	c06a <_usb_d_dev_handler+0x146>
		_usb_d_dev_handle_stall(ept, 1);
    c062:	4601      	mov	r1, r0
		_usb_d_dev_handle_stall(ept, 0);
    c064:	4b1e      	ldr	r3, [pc, #120]	; (c0e0 <_usb_d_dev_handler+0x1bc>)
    c066:	4620      	mov	r0, r4
    c068:	e013      	b.n	c092 <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c06a:	069b      	lsls	r3, r3, #26
    c06c:	d4fa      	bmi.n	c064 <_usb_d_dev_handler+0x140>
	for (i = 0; i < USB_D_N_EP; i++) {
    c06e:	3601      	adds	r6, #1
    c070:	2e1b      	cmp	r6, #27
    c072:	d1cc      	bne.n	c00e <_usb_d_dev_handler+0xea>
}
    c074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (_usb_d_dev_ep_is_in(ept)) {
    c078:	0610      	lsls	r0, r2, #24
    c07a:	d514      	bpl.n	c0a6 <_usb_d_dev_handler+0x182>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c07c:	0658      	lsls	r0, r3, #25
    c07e:	d4f1      	bmi.n	c064 <_usb_d_dev_handler+0x140>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c080:	0718      	lsls	r0, r3, #28
    c082:	d502      	bpl.n	c08a <_usb_d_dev_handler+0x166>
			_usb_d_dev_handle_trfail(ept, 1);
    c084:	4620      	mov	r0, r4
    c086:	47c0      	blx	r8
    c088:	e7f1      	b.n	c06e <_usb_d_dev_handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    c08a:	0798      	lsls	r0, r3, #30
    c08c:	d503      	bpl.n	c096 <_usb_d_dev_handler+0x172>
		_usb_d_dev_in_next(ept, true);
    c08e:	4b15      	ldr	r3, [pc, #84]	; (c0e4 <_usb_d_dev_handler+0x1c0>)
    c090:	4620      	mov	r0, r4
		_usb_d_dev_handle_stall(ept, 0);
    c092:	4798      	blx	r3
    c094:	e7eb      	b.n	c06e <_usb_d_dev_handler+0x14a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c096:	f002 0207 	and.w	r2, r2, #7
    c09a:	2a01      	cmp	r2, #1
    c09c:	d1e7      	bne.n	c06e <_usb_d_dev_handler+0x14a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c09e:	075a      	lsls	r2, r3, #29
    c0a0:	d515      	bpl.n	c0ce <_usb_d_dev_handler+0x1aa>
			_usb_d_dev_handle_trfail(ept, 0);
    c0a2:	2100      	movs	r1, #0
    c0a4:	e7ee      	b.n	c084 <_usb_d_dev_handler+0x160>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c0a6:	f013 0020 	ands.w	r0, r3, #32
    c0aa:	d001      	beq.n	c0b0 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    c0ac:	2100      	movs	r1, #0
    c0ae:	e7d9      	b.n	c064 <_usb_d_dev_handler+0x140>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c0b0:	0758      	lsls	r0, r3, #29
    c0b2:	d4f6      	bmi.n	c0a2 <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    c0b4:	07d8      	lsls	r0, r3, #31
    c0b6:	d502      	bpl.n	c0be <_usb_d_dev_handler+0x19a>
		_usb_d_dev_out_next(ept, true);
    c0b8:	4620      	mov	r0, r4
    c0ba:	47d0      	blx	sl
    c0bc:	e7d7      	b.n	c06e <_usb_d_dev_handler+0x14a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c0be:	f002 0207 	and.w	r2, r2, #7
    c0c2:	2a01      	cmp	r2, #1
    c0c4:	d1d3      	bne.n	c06e <_usb_d_dev_handler+0x14a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c0c6:	071a      	lsls	r2, r3, #28
    c0c8:	d501      	bpl.n	c0ce <_usb_d_dev_handler+0x1aa>
			_usb_d_dev_handle_trfail(ept, 1);
    c0ca:	2101      	movs	r1, #1
    c0cc:	e7da      	b.n	c084 <_usb_d_dev_handler+0x160>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c0ce:	06db      	lsls	r3, r3, #27
    c0d0:	d5cd      	bpl.n	c06e <_usb_d_dev_handler+0x14a>
    c0d2:	e7c0      	b.n	c056 <_usb_d_dev_handler+0x132>
    c0d4:	20000888 	.word	0x20000888
    c0d8:	0000b989 	.word	0x0000b989
    c0dc:	0000bbed 	.word	0x0000bbed
    c0e0:	0000ba49 	.word	0x0000ba49
    c0e4:	0000bc2d 	.word	0x0000bc2d
    c0e8:	0000b9c5 	.word	0x0000b9c5
    c0ec:	0000bb05 	.word	0x0000bb05
    c0f0:	0000bd89 	.word	0x0000bd89

0000c0f4 <_usbd_ep_pcksize_size>:
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    c0f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c0f8:	d80f      	bhi.n	c11a <_usbd_ep_pcksize_size+0x26>
    c0fa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    c0fe:	d80e      	bhi.n	c11e <_usbd_ep_pcksize_size+0x2a>
    c100:	2880      	cmp	r0, #128	; 0x80
    c102:	d80e      	bhi.n	c122 <_usbd_ep_pcksize_size+0x2e>
    c104:	2840      	cmp	r0, #64	; 0x40
    c106:	d80e      	bhi.n	c126 <_usbd_ep_pcksize_size+0x32>
    c108:	2820      	cmp	r0, #32
    c10a:	d80e      	bhi.n	c12a <_usbd_ep_pcksize_size+0x36>
    c10c:	2810      	cmp	r0, #16
    c10e:	d80e      	bhi.n	c12e <_usbd_ep_pcksize_size+0x3a>
    c110:	2808      	cmp	r0, #8
    c112:	bf94      	ite	ls
    c114:	2000      	movls	r0, #0
    c116:	2001      	movhi	r0, #1
    c118:	4770      	bx	lr
    c11a:	2007      	movs	r0, #7
    c11c:	4770      	bx	lr
    c11e:	2006      	movs	r0, #6
    c120:	4770      	bx	lr
    c122:	2005      	movs	r0, #5
    c124:	4770      	bx	lr
    c126:	2004      	movs	r0, #4
    c128:	4770      	bx	lr
    c12a:	2003      	movs	r0, #3
    c12c:	4770      	bx	lr
    c12e:	2002      	movs	r0, #2
}
    c130:	4770      	bx	lr
	...

0000c134 <_usb_d_dev_init>:
{
    c134:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    c136:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c13a:	789a      	ldrb	r2, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    c13c:	07d0      	lsls	r0, r2, #31
    c13e:	d41a      	bmi.n	c176 <_usb_d_dev_init+0x42>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c140:	789a      	ldrb	r2, [r3, #2]
    c142:	0791      	lsls	r1, r2, #30
    c144:	d1fc      	bne.n	c140 <_usb_d_dev_init+0xc>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    c146:	781a      	ldrb	r2, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    c148:	0792      	lsls	r2, r2, #30
    c14a:	d50d      	bpl.n	c168 <_usb_d_dev_init+0x34>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    c14c:	781a      	ldrb	r2, [r3, #0]
    c14e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    c152:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c154:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c158:	7893      	ldrb	r3, [r2, #2]
    c15a:	0798      	lsls	r0, r3, #30
    c15c:	d1fc      	bne.n	c158 <_usb_d_dev_init+0x24>
    c15e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c162:	7893      	ldrb	r3, [r2, #2]
    c164:	0799      	lsls	r1, r3, #30
    c166:	d4fc      	bmi.n	c162 <_usb_d_dev_init+0x2e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c168:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c16c:	2201      	movs	r2, #1
    c16e:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c170:	789a      	ldrb	r2, [r3, #2]
    c172:	0792      	lsls	r2, r2, #30
    c174:	d1fc      	bne.n	c170 <_usb_d_dev_init+0x3c>
    c176:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c17a:	7893      	ldrb	r3, [r2, #2]
    c17c:	07db      	lsls	r3, r3, #31
    c17e:	d4fc      	bmi.n	c17a <_usb_d_dev_init+0x46>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    c180:	4a1e      	ldr	r2, [pc, #120]	; (c1fc <_usb_d_dev_init+0xc8>)
    c182:	4b1f      	ldr	r3, [pc, #124]	; (c200 <_usb_d_dev_init+0xcc>)
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    c184:	e9c3 2200 	strd	r2, r2, [r3]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    c188:	e9c3 2202 	strd	r2, r2, [r3, #8]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    c18c:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    c18e:	4b1d      	ldr	r3, [pc, #116]	; (c204 <_usb_d_dev_init+0xd0>)
    c190:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    c192:	4b1d      	ldr	r3, [pc, #116]	; (c208 <_usb_d_dev_init+0xd4>)
    c194:	681a      	ldr	r2, [r3, #0]
	uint32_t pad_transp
    c196:	f3c2 1344 	ubfx	r3, r2, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    c19a:	f3c2 2182 	ubfx	r1, r2, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    c19e:	f012 021f 	ands.w	r2, r2, #31
    c1a2:	d025      	beq.n	c1f0 <_usb_d_dev_init+0xbc>
		pad_transn = 9;
    c1a4:	2a1f      	cmp	r2, #31
    c1a6:	bf08      	it	eq
    c1a8:	2209      	moveq	r2, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    c1aa:	b31b      	cbz	r3, c1f4 <_usb_d_dev_init+0xc0>
		pad_transp = 25;
    c1ac:	2b1f      	cmp	r3, #31
    c1ae:	bf08      	it	eq
    c1b0:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    c1b2:	b309      	cbz	r1, c1f8 <_usb_d_dev_init+0xc4>
		pad_trim = 6;
    c1b4:	2907      	cmp	r1, #7
    c1b6:	bf08      	it	eq
    c1b8:	2106      	moveq	r1, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    c1ba:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    c1be:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    c1c2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c1c6:	b29b      	uxth	r3, r3
    c1c8:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    c1ca:	78d3      	ldrb	r3, [r2, #3]
    c1cc:	f043 0303 	orr.w	r3, r3, #3
    c1d0:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    c1d2:	78d3      	ldrb	r3, [r2, #3]
    c1d4:	f043 030c 	orr.w	r3, r3, #12
    c1d8:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c1da:	2304      	movs	r3, #4
    c1dc:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c1de:	7890      	ldrb	r0, [r2, #2]
    c1e0:	f010 0003 	ands.w	r0, r0, #3
    c1e4:	d1fb      	bne.n	c1de <_usb_d_dev_init+0xaa>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    c1e6:	4b09      	ldr	r3, [pc, #36]	; (c20c <_usb_d_dev_init+0xd8>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    c1e8:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    c1ea:	2301      	movs	r3, #1
    c1ec:	8113      	strh	r3, [r2, #8]
}
    c1ee:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    c1f0:	2209      	movs	r2, #9
    c1f2:	e7da      	b.n	c1aa <_usb_d_dev_init+0x76>
		pad_transp = 25;
    c1f4:	2319      	movs	r3, #25
    c1f6:	e7dc      	b.n	c1b2 <_usb_d_dev_init+0x7e>
		pad_trim = 6;
    c1f8:	2106      	movs	r1, #6
    c1fa:	e7de      	b.n	c1ba <_usb_d_dev_init+0x86>
    c1fc:	0000b985 	.word	0x0000b985
    c200:	20000888 	.word	0x20000888
    c204:	0000bbed 	.word	0x0000bbed
    c208:	00800084 	.word	0x00800084
    c20c:	20000ab8 	.word	0x20000ab8

0000c210 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    c210:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c214:	789a      	ldrb	r2, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    c216:	0792      	lsls	r2, r2, #30
    c218:	d122      	bne.n	c260 <_usb_d_dev_enable+0x50>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c21a:	789a      	ldrb	r2, [r3, #2]
    c21c:	0790      	lsls	r0, r2, #30
    c21e:	d1fc      	bne.n	c21a <_usb_d_dev_enable+0xa>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    c220:	7819      	ldrb	r1, [r3, #0]
    c222:	b2ca      	uxtb	r2, r1
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    c224:	0789      	lsls	r1, r1, #30
    c226:	d407      	bmi.n	c238 <_usb_d_dev_enable+0x28>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    c228:	f042 0202 	orr.w	r2, r2, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    c22c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    c22e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c232:	7893      	ldrb	r3, [r2, #2]
    c234:	079b      	lsls	r3, r3, #30
    c236:	d1fc      	bne.n	c232 <_usb_d_dev_enable+0x22>
    c238:	4b0b      	ldr	r3, [pc, #44]	; (c268 <_usb_d_dev_enable+0x58>)
    c23a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c23e:	609a      	str	r2, [r3, #8]
    c240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    c244:	609a      	str	r2, [r3, #8]
    c246:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    c24a:	609a      	str	r2, [r3, #8]
    c24c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    c250:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c252:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c256:	f240 228d 	movw	r2, #653	; 0x28d
    c25a:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    c25c:	2000      	movs	r0, #0
    c25e:	4770      	bx	lr
		return -USB_ERR_DENIED;
    c260:	f06f 0010 	mvn.w	r0, #16
}
    c264:	4770      	bx	lr
    c266:	bf00      	nop
    c268:	e000e100 	.word	0xe000e100

0000c26c <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    c26c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    c270:	8913      	ldrh	r3, [r2, #8]
    c272:	f023 0301 	bic.w	r3, r3, #1
    c276:	041b      	lsls	r3, r3, #16
    c278:	0c1b      	lsrs	r3, r3, #16
    c27a:	8113      	strh	r3, [r2, #8]
}
    c27c:	4770      	bx	lr

0000c27e <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
    c27e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    c282:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    c286:	7298      	strb	r0, [r3, #10]
}
    c288:	4770      	bx	lr

0000c28a <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    c28a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    c28e:	8a18      	ldrh	r0, [r3, #16]
}
    c290:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    c294:	4770      	bx	lr
	...

0000c298 <_usb_d_dev_ep_init>:
{
    c298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    c29c:	f000 040f 	and.w	r4, r0, #15
{
    c2a0:	460d      	mov	r5, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c2a2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; c354 <_usb_d_dev_ep_init+0xbc>
    c2a6:	09c1      	lsrs	r1, r0, #7
{
    c2a8:	4607      	mov	r7, r0
    c2aa:	fa4f f880 	sxtb.w	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c2ae:	4620      	mov	r0, r4
    c2b0:	47c8      	blx	r9
	if (epn > CONF_USB_D_MAX_EP_N) {
    c2b2:	2c05      	cmp	r4, #5
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c2b4:	4606      	mov	r6, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    c2b6:	f005 0503 	and.w	r5, r5, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
    c2ba:	d83f      	bhi.n	c33c <_usb_d_dev_ep_init+0xa4>
	if (ept->ep != 0xFF) {
    c2bc:	7c83      	ldrb	r3, [r0, #18]
    c2be:	2bff      	cmp	r3, #255	; 0xff
    c2c0:	d13f      	bne.n	c342 <_usb_d_dev_ep_init+0xaa>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    c2c2:	b985      	cbnz	r5, c2e6 <_usb_d_dev_ep_init+0x4e>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    c2c4:	ea6f 0108 	mvn.w	r1, r8
    c2c8:	0fc9      	lsrs	r1, r1, #31
    c2ca:	4620      	mov	r0, r4
    c2cc:	47c8      	blx	r9
		if (ept_in->ep != 0xFF) {
    c2ce:	7c83      	ldrb	r3, [r0, #18]
    c2d0:	2bff      	cmp	r3, #255	; 0xff
    c2d2:	d136      	bne.n	c342 <_usb_d_dev_ep_init+0xaa>
		if (pcfg->cache == NULL) {
    c2d4:	230c      	movs	r3, #12
    c2d6:	491e      	ldr	r1, [pc, #120]	; (c350 <_usb_d_dev_ep_init+0xb8>)
    c2d8:	4363      	muls	r3, r4
    c2da:	58cb      	ldr	r3, [r1, r3]
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d133      	bne.n	c348 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    c2e0:	f06f 0012 	mvn.w	r0, #18
    c2e4:	e018      	b.n	c318 <_usb_d_dev_ep_init+0x80>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    c2e6:	f1b8 0f00 	cmp.w	r8, #0
    c2ea:	da17      	bge.n	c31c <_usb_d_dev_ep_init+0x84>
    c2ec:	4918      	ldr	r1, [pc, #96]	; (c350 <_usb_d_dev_ep_init+0xb8>)
    c2ee:	230c      	movs	r3, #12
    c2f0:	fb03 1304 	mla	r3, r3, r4, r1
    c2f4:	6859      	ldr	r1, [r3, #4]
    c2f6:	b9e9      	cbnz	r1, c334 <_usb_d_dev_ep_init+0x9c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c2f8:	4915      	ldr	r1, [pc, #84]	; (c350 <_usb_d_dev_ep_init+0xb8>)
	ept->size     = max_pkt_siz;
    c2fa:	8232      	strh	r2, [r6, #16]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c2fc:	230c      	movs	r3, #12
    c2fe:	435c      	muls	r4, r3
    c300:	190b      	adds	r3, r1, r4
    c302:	5909      	ldr	r1, [r1, r4]
    c304:	685b      	ldr	r3, [r3, #4]
	ept->ep       = ep;
    c306:	74b7      	strb	r7, [r6, #18]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c308:	ea13 0328 	ands.w	r3, r3, r8, asr #32
    c30c:	bf38      	it	cc
    c30e:	460b      	movcc	r3, r1
	ept->flags.u8 = (ep_type + 1);
    c310:	3501      	adds	r5, #1
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    c312:	60f3      	str	r3, [r6, #12]
	ept->flags.u8 = (ep_type + 1);
    c314:	74f5      	strb	r5, [r6, #19]
	return USB_OK;
    c316:	2000      	movs	r0, #0
}
    c318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    c31c:	230c      	movs	r3, #12
    c31e:	490c      	ldr	r1, [pc, #48]	; (c350 <_usb_d_dev_ep_init+0xb8>)
    c320:	4363      	muls	r3, r4
    c322:	58cb      	ldr	r3, [r1, r3]
    c324:	2b00      	cmp	r3, #0
    c326:	d0e7      	beq.n	c2f8 <_usb_d_dev_ep_init+0x60>
    c328:	4909      	ldr	r1, [pc, #36]	; (c350 <_usb_d_dev_ep_init+0xb8>)
    c32a:	230c      	movs	r3, #12
    c32c:	fb03 1304 	mla	r3, r3, r4, r1
    c330:	891b      	ldrh	r3, [r3, #8]
    c332:	e000      	b.n	c336 <_usb_d_dev_ep_init+0x9e>
    c334:	895b      	ldrh	r3, [r3, #10]
    c336:	429a      	cmp	r2, r3
    c338:	ddde      	ble.n	c2f8 <_usb_d_dev_ep_init+0x60>
    c33a:	e7d1      	b.n	c2e0 <_usb_d_dev_ep_init+0x48>
		return -USB_ERR_PARAM;
    c33c:	f06f 0011 	mvn.w	r0, #17
    c340:	e7ea      	b.n	c318 <_usb_d_dev_ep_init+0x80>
		return -USB_ERR_REDO;
    c342:	f06f 0013 	mvn.w	r0, #19
    c346:	e7e7      	b.n	c318 <_usb_d_dev_ep_init+0x80>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    c348:	f1b8 0f00 	cmp.w	r8, #0
    c34c:	daec      	bge.n	c328 <_usb_d_dev_ep_init+0x90>
    c34e:	e7cd      	b.n	c2ec <_usb_d_dev_ep_init+0x54>
    c350:	00014db4 	.word	0x00014db4
    c354:	0000b9ad 	.word	0x0000b9ad

0000c358 <_usb_d_dev_ep_deinit>:
{
    c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    c35a:	f000 050f 	and.w	r5, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c35e:	2d05      	cmp	r5, #5
{
    c360:	4604      	mov	r4, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c362:	d818      	bhi.n	c396 <_usb_d_dev_ep_deinit+0x3e>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c364:	4b17      	ldr	r3, [pc, #92]	; (c3c4 <_usb_d_dev_ep_deinit+0x6c>)
	bool                  dir = USB_EP_GET_DIR(ep);
    c366:	09c1      	lsrs	r1, r0, #7
    c368:	b247      	sxtb	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c36a:	4628      	mov	r0, r5
    c36c:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c36e:	7c83      	ldrb	r3, [r0, #18]
    c370:	2bff      	cmp	r3, #255	; 0xff
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c372:	4606      	mov	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c374:	d00f      	beq.n	c396 <_usb_d_dev_ep_deinit+0x3e>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    c376:	4b14      	ldr	r3, [pc, #80]	; (c3c8 <_usb_d_dev_ep_deinit+0x70>)
    c378:	2203      	movs	r2, #3
    c37a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c37c:	7cf3      	ldrb	r3, [r6, #19]
    c37e:	f003 0307 	and.w	r3, r3, #7
    c382:	2b01      	cmp	r3, #1
    c384:	d108      	bne.n	c398 <_usb_d_dev_ep_deinit+0x40>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    c386:	0164      	lsls	r4, r4, #5
    c388:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    c38c:	2300      	movs	r3, #0
    c38e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	ept->ep       = 0xFF;
    c392:	23ff      	movs	r3, #255	; 0xff
    c394:	8273      	strh	r3, [r6, #18]
}
    c396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (USB_EP_GET_DIR(ep)) {
    c398:	2f00      	cmp	r7, #0
    c39a:	da09      	bge.n	c3b0 <_usb_d_dev_ep_deinit+0x58>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    c39c:	016b      	lsls	r3, r5, #5
    c39e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c3a2:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    c3a6:	f002 028f 	and.w	r2, r2, #143	; 0x8f
    c3aa:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    c3ae:	e7f0      	b.n	c392 <_usb_d_dev_ep_deinit+0x3a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    c3b0:	0164      	lsls	r4, r4, #5
    c3b2:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    c3b6:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    c3ba:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    c3be:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    c3c2:	e7e6      	b.n	c392 <_usb_d_dev_ep_deinit+0x3a>
    c3c4:	0000b9ad 	.word	0x0000b9ad
    c3c8:	0000baa5 	.word	0x0000baa5

0000c3cc <_usb_d_dev_ep_enable>:
{
    c3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    c3d0:	f000 050f 	and.w	r5, r0, #15
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    c3d4:	09c1      	lsrs	r1, r0, #7
    c3d6:	4b55      	ldr	r3, [pc, #340]	; (c52c <_usb_d_dev_ep_enable+0x160>)
    c3d8:	fa4f f980 	sxtb.w	r9, r0
    c3dc:	4628      	mov	r0, r5
    c3de:	4798      	blx	r3
    c3e0:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    c3e4:	f10c 4682 	add.w	r6, ip, #1090519040	; 0x41000000
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c3e8:	2d05      	cmp	r5, #5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c3ea:	f896 1100 	ldrb.w	r1, [r6, #256]	; 0x100
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    c3ee:	4607      	mov	r7, r0
    c3f0:	b2c8      	uxtb	r0, r1
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    c3f2:	f200 8094 	bhi.w	c51e <_usb_d_dev_ep_enable+0x152>
    c3f6:	7cba      	ldrb	r2, [r7, #18]
    c3f8:	2aff      	cmp	r2, #255	; 0xff
    c3fa:	f000 8090 	beq.w	c51e <_usb_d_dev_ep_enable+0x152>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c3fe:	7cf9      	ldrb	r1, [r7, #19]
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c400:	4c4b      	ldr	r4, [pc, #300]	; (c530 <_usb_d_dev_ep_enable+0x164>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c402:	f001 0307 	and.w	r3, r1, #7
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c406:	f504 780c 	add.w	r8, r4, #560	; 0x230
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c40a:	2b01      	cmp	r3, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    c40c:	44e0      	add	r8, ip
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    c40e:	d147      	bne.n	c4a0 <_usb_d_dev_ep_enable+0xd4>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    c410:	f010 0377 	ands.w	r3, r0, #119	; 0x77
    c414:	f040 8086 	bne.w	c524 <_usb_d_dev_ep_enable+0x158>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c418:	f8b7 9010 	ldrh.w	r9, [r7, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c41c:	2111      	movs	r1, #17
    c41e:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c422:	4648      	mov	r0, r9
    c424:	4943      	ldr	r1, [pc, #268]	; (c534 <_usb_d_dev_ep_enable+0x168>)
    c426:	4788      	blx	r1
    c428:	0700      	lsls	r0, r0, #28
    c42a:	f000 41e0 	and.w	r1, r0, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c42e:	4842      	ldr	r0, [pc, #264]	; (c538 <_usb_d_dev_ep_enable+0x16c>)
    c430:	ea00 3089 	and.w	r0, r0, r9, lsl #14
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c434:	f3c9 090d 	ubfx	r9, r9, #0, #14
	bank->STATUS_BK.reg     = 0;
    c438:	eb04 1545 	add.w	r5, r4, r5, lsl #5
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c43c:	4308      	orrs	r0, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c43e:	f002 020f 	and.w	r2, r2, #15
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c442:	ea49 0101 	orr.w	r1, r9, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c446:	f8c8 0004 	str.w	r0, [r8, #4]
	bank->ADDR.reg          = addr;
    c44a:	eb04 1442 	add.w	r4, r4, r2, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c44e:	f8c8 1014 	str.w	r1, [r8, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c452:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c456:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c458:	f886 c105 	strb.w	ip, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c45c:	f886 1104 	strb.w	r1, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    c460:	f885 323a 	strb.w	r3, [r5, #570]	; 0x23a
    c464:	f885 324a 	strb.w	r3, [r5, #586]	; 0x24a
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c468:	68fd      	ldr	r5, [r7, #12]
	bank->ADDR.reg          = addr;
    c46a:	f8c4 5230 	str.w	r5, [r4, #560]	; 0x230
    c46e:	f504 710c 	add.w	r1, r4, #560	; 0x230
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c472:	f8d4 4234 	ldr.w	r4, [r4, #564]	; 0x234
    c476:	f369 349b 	bfi	r4, r9, #14, #14
    c47a:	604c      	str	r4, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c47c:	684c      	ldr	r4, [r1, #4]
	bank->ADDR.reg          = addr;
    c47e:	0150      	lsls	r0, r2, #5
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c480:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    c484:	f363 040d 	bfi	r4, r3, #0, #14
    c488:	604c      	str	r4, [r1, #4]
    c48a:	21b0      	movs	r1, #176	; 0xb0
    c48c:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c490:	2110      	movs	r1, #16
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c492:	f882 c105 	strb.w	ip, [r2, #261]	; 0x105
	return USB_OK;
    c496:	4618      	mov	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c498:	f882 1109 	strb.w	r1, [r2, #265]	; 0x109
}
    c49c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (dir) {
    c4a0:	f1b9 0f00 	cmp.w	r9, #0
    c4a4:	da1e      	bge.n	c4e4 <_usb_d_dev_ep_enable+0x118>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    c4a6:	f010 0270 	ands.w	r2, r0, #112	; 0x70
    c4aa:	d13b      	bne.n	c524 <_usb_d_dev_ep_enable+0x158>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c4ac:	f3c1 0102 	ubfx	r1, r1, #0, #3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c4b0:	8a3b      	ldrh	r3, [r7, #16]
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    c4b2:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
    c4b6:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c4b8:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c4bc:	4618      	mov	r0, r3
    c4be:	491d      	ldr	r1, [pc, #116]	; (c534 <_usb_d_dev_ep_enable+0x168>)
    c4c0:	4788      	blx	r1
    c4c2:	0700      	lsls	r0, r0, #28
    c4c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
    c4c8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
    c4cc:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c4d0:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c4d2:	2380      	movs	r3, #128	; 0x80
    c4d4:	f8c8 0014 	str.w	r0, [r8, #20]
    c4d8:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    c4dc:	f884 224a 	strb.w	r2, [r4, #586]	; 0x24a
	return USB_OK;
    c4e0:	4610      	mov	r0, r2
}
    c4e2:	e7db      	b.n	c49c <_usb_d_dev_ep_enable+0xd0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    c4e4:	f010 0207 	ands.w	r2, r0, #7
    c4e8:	d11c      	bne.n	c524 <_usb_d_dev_ep_enable+0x158>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    c4ea:	f001 0107 	and.w	r1, r1, #7
    c4ee:	4301      	orrs	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c4f0:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c4f4:	8a39      	ldrh	r1, [r7, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c4f6:	4b0f      	ldr	r3, [pc, #60]	; (c534 <_usb_d_dev_ep_enable+0x168>)
    c4f8:	4608      	mov	r0, r1
    c4fa:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c4fc:	4b0e      	ldr	r3, [pc, #56]	; (c538 <_usb_d_dev_ep_enable+0x16c>)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c4fe:	0700      	lsls	r0, r0, #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c500:	ea03 3381 	and.w	r3, r3, r1, lsl #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    c504:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    c508:	4303      	orrs	r3, r0
	bank->STATUS_BK.reg     = 0;
    c50a:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    c50e:	f8c8 3004 	str.w	r3, [r8, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c512:	2340      	movs	r3, #64	; 0x40
    c514:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    c518:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
    c51c:	e7e0      	b.n	c4e0 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    c51e:	f06f 0011 	mvn.w	r0, #17
    c522:	e7bb      	b.n	c49c <_usb_d_dev_ep_enable+0xd0>
			return -USB_ERR_REDO;
    c524:	f06f 0013 	mvn.w	r0, #19
    c528:	e7b8      	b.n	c49c <_usb_d_dev_ep_enable+0xd0>
    c52a:	bf00      	nop
    c52c:	0000b9ad 	.word	0x0000b9ad
    c530:	20000888 	.word	0x20000888
    c534:	0000c0f5 	.word	0x0000c0f5
    c538:	0fffc000 	.word	0x0fffc000

0000c53c <_usb_d_dev_ep_stall>:
{
    c53c:	b538      	push	{r3, r4, r5, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    c53e:	f000 020f 	and.w	r2, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    c542:	09c4      	lsrs	r4, r0, #7
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c544:	4b2f      	ldr	r3, [pc, #188]	; (c604 <_usb_d_dev_ep_stall+0xc8>)
{
    c546:	460d      	mov	r5, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c548:	4610      	mov	r0, r2
    c54a:	4621      	mov	r1, r4
    c54c:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    c54e:	2a05      	cmp	r2, #5
    c550:	d855      	bhi.n	c5fe <_usb_d_dev_ep_stall+0xc2>
	if (USB_EP_STALL_SET == ctrl) {
    c552:	7c83      	ldrb	r3, [r0, #18]
    c554:	2210      	movs	r2, #16
    c556:	2d01      	cmp	r5, #1
    c558:	f003 030f 	and.w	r3, r3, #15
    c55c:	fa02 f204 	lsl.w	r2, r2, r4
    c560:	d113      	bne.n	c58a <_usb_d_dev_ep_stall+0x4e>
    c562:	0159      	lsls	r1, r3, #5
    c564:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c568:	b2d2      	uxtb	r2, r2
    c56a:	f881 2105 	strb.w	r2, [r1, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c56e:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c570:	2120      	movs	r1, #32
    c572:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c576:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    c578:	b2c9      	uxtb	r1, r1
    c57a:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    c57e:	7cc3      	ldrb	r3, [r0, #19]
    c580:	f043 0308 	orr.w	r3, r3, #8
    c584:	74c3      	strb	r3, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    c586:	2000      	movs	r0, #0
}
    c588:	bd38      	pop	{r3, r4, r5, pc}
	} else if (USB_EP_STALL_CLR == ctrl) {
    c58a:	bb6d      	cbnz	r5, c5e8 <_usb_d_dev_ep_stall+0xac>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    c58c:	015d      	lsls	r5, r3, #5
    c58e:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    c592:	f895 1106 	ldrb.w	r1, [r5, #262]	; 0x106
	if (!is_stalled) {
    c596:	4211      	tst	r1, r2
    c598:	d0f5      	beq.n	c586 <_usb_d_dev_ep_stall+0x4a>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c59a:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c59c:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c5a0:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    c5a2:	2220      	movs	r2, #32
    c5a4:	40a2      	lsls	r2, r4
    c5a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    c5aa:	b2d1      	uxtb	r1, r2
    c5ac:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    c5b0:	f895 3107 	ldrb.w	r3, [r5, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    c5b4:	4213      	tst	r3, r2
    c5b6:	d006      	beq.n	c5c6 <_usb_d_dev_ep_stall+0x8a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c5b8:	f885 1107 	strb.w	r1, [r5, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    c5bc:	2101      	movs	r1, #1
    c5be:	40a1      	lsls	r1, r4
    c5c0:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c5c2:	f885 1104 	strb.w	r1, [r5, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    c5c6:	7cc2      	ldrb	r2, [r0, #19]
    c5c8:	f002 0307 	and.w	r3, r2, #7
    c5cc:	2b01      	cmp	r3, #1
    c5ce:	d108      	bne.n	c5e2 <_usb_d_dev_ep_stall+0xa6>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    c5d0:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    c5d4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    c5d8:	d1d5      	bne.n	c586 <_usb_d_dev_ep_stall+0x4a>
			ept->flags.bits.is_stalled = 0;
    c5da:	f363 02c3 	bfi	r2, r3, #3, #1
		ept->flags.bits.is_stalled = 0;
    c5de:	74c2      	strb	r2, [r0, #19]
    c5e0:	e7d1      	b.n	c586 <_usb_d_dev_ep_stall+0x4a>
    c5e2:	f36f 02c3 	bfc	r2, #3, #1
    c5e6:	e7fa      	b.n	c5de <_usb_d_dev_ep_stall+0xa2>
    c5e8:	015b      	lsls	r3, r3, #5
    c5ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c5ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
    c5f2:	799b      	ldrb	r3, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    c5f4:	4213      	tst	r3, r2
    c5f6:	bf14      	ite	ne
    c5f8:	2001      	movne	r0, #1
    c5fa:	2000      	moveq	r0, #0
    c5fc:	e7c4      	b.n	c588 <_usb_d_dev_ep_stall+0x4c>
		return -USB_ERR_PARAM;
    c5fe:	f06f 0011 	mvn.w	r0, #17
    c602:	e7c1      	b.n	c588 <_usb_d_dev_ep_stall+0x4c>
    c604:	0000b9ad 	.word	0x0000b9ad

0000c608 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    c608:	b570      	push	{r4, r5, r6, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c60a:	4b13      	ldr	r3, [pc, #76]	; (c658 <_usb_d_dev_ep_read_req+0x50>)
	uint8_t            epn   = USB_EP_GET_N(ep);
    c60c:	f000 060f 	and.w	r6, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    c610:	0172      	lsls	r2, r6, #5
    c612:	eb03 1046 	add.w	r0, r3, r6, lsl #5
	uint32_t           addr  = bank[0].ADDR.reg;
    c616:	589d      	ldr	r5, [r3, r2]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c618:	6844      	ldr	r4, [r0, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c61a:	2e05      	cmp	r6, #5
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    c61c:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    c620:	d814      	bhi.n	c64c <_usb_d_dev_ep_read_req+0x44>
    c622:	b199      	cbz	r1, c64c <_usb_d_dev_ep_read_req+0x44>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c624:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c628:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    c62c:	2b11      	cmp	r3, #17
    c62e:	d110      	bne.n	c652 <_usb_d_dev_ep_read_req+0x4a>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    c630:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    c634:	f013 0010 	ands.w	r0, r3, #16
    c638:	d007      	beq.n	c64a <_usb_d_dev_ep_read_req+0x42>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
    c63a:	682b      	ldr	r3, [r5, #0]
    c63c:	600b      	str	r3, [r1, #0]
    c63e:	686b      	ldr	r3, [r5, #4]
    c640:	604b      	str	r3, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c642:	2310      	movs	r3, #16
    c644:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	_usbd_ep_ack_setup(epn);

	return bytes;
    c648:	4620      	mov	r0, r4
}
    c64a:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_PARAM;
    c64c:	f06f 0011 	mvn.w	r0, #17
    c650:	e7fb      	b.n	c64a <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_FUNC;
    c652:	f06f 0012 	mvn.w	r0, #18
    c656:	e7f8      	b.n	c64a <_usb_d_dev_ep_read_req+0x42>
    c658:	20000ab8 	.word	0x20000ab8

0000c65c <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    c65c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c660:	f890 9008 	ldrb.w	r9, [r0, #8]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c664:	4b39      	ldr	r3, [pc, #228]	; (c74c <_usb_d_dev_ep_trans+0xf0>)
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    c666:	f009 050f 	and.w	r5, r9, #15
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    c66a:	fa4f f789 	sxtb.w	r7, r9
    c66e:	ea4f 19d9 	mov.w	r9, r9, lsr #7
{
    c672:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c674:	4649      	mov	r1, r9
    c676:	4628      	mov	r0, r5
    c678:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c67a:	8a02      	ldrh	r2, [r0, #16]
	bool     size_n_aligned = (trans->size & size_mask);
    c67c:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c680:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c684:	429a      	cmp	r2, r3
    c686:	bf1a      	itte	ne
    c688:	f102 33ff 	addne.w	r3, r2, #4294967295	; 0xffffffff
    c68c:	b29b      	uxthne	r3, r3
    c68e:	4613      	moveq	r3, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c690:	2d05      	cmp	r5, #5
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c692:	4604      	mov	r4, r0
	bool     size_n_aligned = (trans->size & size_mask);
    c694:	ea03 0601 	and.w	r6, r3, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
    c698:	d828      	bhi.n	c6ec <_usb_d_dev_ep_trans+0x90>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    c69a:	f8d8 5000 	ldr.w	r5, [r8]
    c69e:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    c6a2:	d30a      	bcc.n	c6ba <_usb_d_dev_ep_trans+0x5e>
    c6a4:	4b2a      	ldr	r3, [pc, #168]	; (c750 <_usb_d_dev_ep_trans+0xf4>)
    c6a6:	1948      	adds	r0, r1, r5
    c6a8:	4298      	cmp	r0, r3
    c6aa:	d206      	bcs.n	c6ba <_usb_d_dev_ep_trans+0x5e>
    c6ac:	f015 0503 	ands.w	r5, r5, #3
    c6b0:	d103      	bne.n	c6ba <_usb_d_dev_ep_trans+0x5e>
	    || (!dir && (trans->size < ept->size))) {
    c6b2:	2f00      	cmp	r7, #0
    c6b4:	db05      	blt.n	c6c2 <_usb_d_dev_ep_trans+0x66>
    c6b6:	4291      	cmp	r1, r2
    c6b8:	d214      	bcs.n	c6e4 <_usb_d_dev_ep_trans+0x88>
		if (!ept->cache) {
    c6ba:	68e3      	ldr	r3, [r4, #12]
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d03f      	beq.n	c740 <_usb_d_dev_ep_trans+0xe4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    c6c0:	2501      	movs	r5, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    c6c2:	7ce3      	ldrb	r3, [r4, #19]
    c6c4:	071b      	lsls	r3, r3, #28
    c6c6:	d43e      	bmi.n	c746 <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    c6c8:	4b22      	ldr	r3, [pc, #136]	; (c754 <_usb_d_dev_ep_trans+0xf8>)
    c6ca:	a801      	add	r0, sp, #4
    c6cc:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    c6ce:	7ce3      	ldrb	r3, [r4, #19]
    c6d0:	4a21      	ldr	r2, [pc, #132]	; (c758 <_usb_d_dev_ep_trans+0xfc>)
    c6d2:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
    c6d6:	d00e      	beq.n	c6f6 <_usb_d_dev_ep_trans+0x9a>
		atomic_leave_critical(&flags);
    c6d8:	a801      	add	r0, sp, #4
    c6da:	4790      	blx	r2
		return USB_BUSY;
    c6dc:	2001      	movs	r0, #1
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    c6de:	b002      	add	sp, #8
    c6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dir && size_n_aligned) {
    c6e4:	b12e      	cbz	r6, c6f2 <_usb_d_dev_ep_trans+0x96>
		if (!ept->cache) {
    c6e6:	68e3      	ldr	r3, [r4, #12]
    c6e8:	2b00      	cmp	r3, #0
    c6ea:	d1ea      	bne.n	c6c2 <_usb_d_dev_ep_trans+0x66>
		return -USB_ERR_PARAM;
    c6ec:	f06f 0011 	mvn.w	r0, #17
    c6f0:	e7f5      	b.n	c6de <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
    c6f2:	4635      	mov	r5, r6
    c6f4:	e7e5      	b.n	c6c2 <_usb_d_dev_ep_trans+0x66>
	ept->flags.bits.is_busy = 1;
    c6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c6fa:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    c6fc:	a801      	add	r0, sp, #4
    c6fe:	4790      	blx	r2
	ept->trans_buf   = trans->buf;
    c700:	f8d8 3000 	ldr.w	r3, [r8]
    c704:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    c706:	f8d8 3004 	ldr.w	r3, [r8, #4]
	ept->trans_count = 0;
    c70a:	e9c4 3a01 	strd	r3, sl, [r4, #4]
	ept->flags.bits.dir       = dir;
    c70e:	7ce3      	ldrb	r3, [r4, #19]
    c710:	f369 13c7 	bfi	r3, r9, #7, #1
	ept->flags.bits.use_cache = use_cache;
    c714:	f365 1345 	bfi	r3, r5, #5, #1
    c718:	74e3      	strb	r3, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c71a:	f898 3009 	ldrb.w	r3, [r8, #9]
    c71e:	b113      	cbz	r3, c726 <_usb_d_dev_ep_trans+0xca>
    c720:	fab6 f386 	clz	r3, r6
    c724:	095b      	lsrs	r3, r3, #5
    c726:	7ce2      	ldrb	r2, [r4, #19]
	if (dir) {
    c728:	2f00      	cmp	r7, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c72a:	f363 1204 	bfi	r2, r3, #4, #1
		_usb_d_dev_in_next(ept, false);
    c72e:	4620      	mov	r0, r4
    c730:	bfb4      	ite	lt
    c732:	4b0a      	ldrlt	r3, [pc, #40]	; (c75c <_usb_d_dev_ep_trans+0x100>)
		_usb_d_dev_out_next(ept, false);
    c734:	4b0a      	ldrge	r3, [pc, #40]	; (c760 <_usb_d_dev_ep_trans+0x104>)
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    c736:	74e2      	strb	r2, [r4, #19]
		_usb_d_dev_in_next(ept, false);
    c738:	2100      	movs	r1, #0
		_usb_d_dev_out_next(ept, false);
    c73a:	4798      	blx	r3
	return ERR_NONE;
    c73c:	2000      	movs	r0, #0
    c73e:	e7ce      	b.n	c6de <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
    c740:	f06f 0012 	mvn.w	r0, #18
    c744:	e7cb      	b.n	c6de <_usb_d_dev_ep_trans+0x82>
		return USB_HALTED;
    c746:	2002      	movs	r0, #2
    c748:	e7c9      	b.n	c6de <_usb_d_dev_ep_trans+0x82>
    c74a:	bf00      	nop
    c74c:	0000b9ad 	.word	0x0000b9ad
    c750:	20042000 	.word	0x20042000
    c754:	00010d8d 	.word	0x00010d8d
    c758:	00010d9b 	.word	0x00010d9b
    c75c:	0000bc2d 	.word	0x0000bc2d
    c760:	0000bd89 	.word	0x0000bd89

0000c764 <_usb_d_dev_ep_get_status>:
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}

int32_t _usb_d_dev_ep_get_status(const uint8_t ep, struct usb_d_trans_status *stat)
{
    c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    c766:	f000 040f 	and.w	r4, r0, #15
{
    c76a:	460a      	mov	r2, r1
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c76c:	4b19      	ldr	r3, [pc, #100]	; (c7d4 <_usb_d_dev_ep_get_status+0x70>)
    c76e:	09c1      	lsrs	r1, r0, #7
{
    c770:	4607      	mov	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    c772:	4620      	mov	r0, r4
    c774:	4798      	blx	r3
	bool                  busy, stall;

	if (epn > CONF_USB_D_MAX_EP_N) {
    c776:	2c05      	cmp	r4, #5
    c778:	d82a      	bhi.n	c7d0 <_usb_d_dev_ep_get_status+0x6c>
		return USB_ERR_PARAM;
	}
	busy  = ept->flags.bits.is_busy;
    c77a:	7cc5      	ldrb	r5, [r0, #19]
    c77c:	f3c5 1180 	ubfx	r1, r5, #6, #1
	stall = ept->flags.bits.is_stalled;
    c780:	f3c5 06c0 	ubfx	r6, r5, #3, #1
	if (stat) {
    c784:	b1fa      	cbz	r2, c7c6 <_usb_d_dev_ep_get_status+0x62>
		stat->stall = stall;
    c786:	7a53      	ldrb	r3, [r2, #9]
		stat->busy  = busy;
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    c788:	0164      	lsls	r4, r4, #5
		stat->stall = stall;
    c78a:	f366 1304 	bfi	r3, r6, #4, #1
		stat->busy  = busy;
    c78e:	f361 0382 	bfi	r3, r1, #2, #1
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    c792:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
		stat->busy  = busy;
    c796:	7253      	strb	r3, [r2, #9]
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    c798:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
    c79c:	f3c3 1400 	ubfx	r4, r3, #4, #1
		stat->dir   = ept->flags.bits.dir;
		stat->size  = ept->trans_size;
    c7a0:	6843      	ldr	r3, [r0, #4]
    c7a2:	6013      	str	r3, [r2, #0]
		stat->count = ept->trans_count;
    c7a4:	6883      	ldr	r3, [r0, #8]
		stat->ep    = ep;
    c7a6:	7217      	strb	r7, [r2, #8]
		stat->count = ept->trans_count;
    c7a8:	6053      	str	r3, [r2, #4]
		stat->xtype = ept->flags.bits.eptype - 1;
    c7aa:	7cc3      	ldrb	r3, [r0, #19]
    c7ac:	7a50      	ldrb	r0, [r2, #9]
    c7ae:	3303      	adds	r3, #3
    c7b0:	f003 0303 	and.w	r3, r3, #3
		stat->dir   = ept->flags.bits.dir;
    c7b4:	09ed      	lsrs	r5, r5, #7
		stat->xtype = ept->flags.bits.eptype - 1;
    c7b6:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
    c7ba:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    c7be:	f020 002b 	bic.w	r0, r0, #43	; 0x2b
    c7c2:	4303      	orrs	r3, r0
    c7c4:	7253      	strb	r3, [r2, #9]
		return USB_ERR_PARAM;
    c7c6:	2e00      	cmp	r6, #0
    c7c8:	bf0c      	ite	eq
    c7ca:	4608      	moveq	r0, r1
    c7cc:	2002      	movne	r0, #2
	}
	if (busy) {
		return USB_BUSY;
	}
	return USB_OK;
}
    c7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return USB_ERR_PARAM;
    c7d0:	2012      	movs	r0, #18
    c7d2:	e7fc      	b.n	c7ce <_usb_d_dev_ep_get_status+0x6a>
    c7d4:	0000b9ad 	.word	0x0000b9ad

0000c7d8 <_usb_d_dev_register_callback>:

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c7d8:	4b06      	ldr	r3, [pc, #24]	; (c7f4 <_usb_d_dev_register_callback+0x1c>)
    c7da:	2900      	cmp	r1, #0
    c7dc:	bf08      	it	eq
    c7de:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    c7e0:	2801      	cmp	r0, #1
    c7e2:	d102      	bne.n	c7ea <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    c7e4:	4b04      	ldr	r3, [pc, #16]	; (c7f8 <_usb_d_dev_register_callback+0x20>)
    c7e6:	6059      	str	r1, [r3, #4]
    c7e8:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    c7ea:	b908      	cbnz	r0, c7f0 <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    c7ec:	4b02      	ldr	r3, [pc, #8]	; (c7f8 <_usb_d_dev_register_callback+0x20>)
    c7ee:	6019      	str	r1, [r3, #0]
	}
}
    c7f0:	4770      	bx	lr
    c7f2:	bf00      	nop
    c7f4:	0000b985 	.word	0x0000b985
    c7f8:	20000888 	.word	0x20000888

0000c7fc <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    c7fc:	4b08      	ldr	r3, [pc, #32]	; (c820 <_usb_d_dev_register_ep_callback+0x24>)
    c7fe:	2900      	cmp	r1, #0
    c800:	bf08      	it	eq
    c802:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    c804:	b910      	cbnz	r0, c80c <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    c806:	4b07      	ldr	r3, [pc, #28]	; (c824 <_usb_d_dev_register_ep_callback+0x28>)
    c808:	6099      	str	r1, [r3, #8]
    c80a:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    c80c:	2801      	cmp	r0, #1
    c80e:	d102      	bne.n	c816 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    c810:	4b04      	ldr	r3, [pc, #16]	; (c824 <_usb_d_dev_register_ep_callback+0x28>)
    c812:	60d9      	str	r1, [r3, #12]
    c814:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    c816:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    c818:	bf04      	itt	eq
    c81a:	4b02      	ldreq	r3, [pc, #8]	; (c824 <_usb_d_dev_register_ep_callback+0x28>)
    c81c:	6119      	streq	r1, [r3, #16]
	}
}
    c81e:	4770      	bx	lr
    c820:	0000b985 	.word	0x0000b985
    c824:	20000888 	.word	0x20000888

0000c828 <USB_0_Handler>:
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{

	_usb_d_dev_handler();
    c828:	4b00      	ldr	r3, [pc, #0]	; (c82c <USB_0_Handler+0x4>)
    c82a:	4718      	bx	r3
    c82c:	0000bf25 	.word	0x0000bf25

0000c830 <USB_1_Handler>:
    c830:	4b00      	ldr	r3, [pc, #0]	; (c834 <USB_1_Handler+0x4>)
    c832:	4718      	bx	r3
    c834:	0000bf25 	.word	0x0000bf25

0000c838 <USB_2_Handler>:
    c838:	4b00      	ldr	r3, [pc, #0]	; (c83c <USB_2_Handler+0x4>)
    c83a:	4718      	bx	r3
    c83c:	0000bf25 	.word	0x0000bf25

0000c840 <USB_3_Handler>:
    c840:	4b00      	ldr	r3, [pc, #0]	; (c844 <USB_3_Handler+0x4>)
    c842:	4718      	bx	r3
    c844:	0000bf25 	.word	0x0000bf25

0000c848 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    c848:	b508      	push	{r3, lr}
    c84a:	4603      	mov	r3, r0
    c84c:	4608      	mov	r0, r1
    c84e:	4611      	mov	r1, r2
	int n = 0;

	if (file != 0) {
    c850:	b923      	cbnz	r3, c85c <_read+0x14>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    c852:	4b04      	ldr	r3, [pc, #16]	; (c864 <_read+0x1c>)
    c854:	4798      	blx	r3
	if (n < 0) {
    c856:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		return -1;
	}

	return n;
}
    c85a:	bd08      	pop	{r3, pc}
		return -1;
    c85c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c860:	e7fb      	b.n	c85a <_read+0x12>
    c862:	bf00      	nop
    c864:	0000ac45 	.word	0x0000ac45

0000c868 <delay_init>:
/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
	_delay_init(hardware = hw);
    c868:	4b01      	ldr	r3, [pc, #4]	; (c870 <delay_init+0x8>)
    c86a:	6018      	str	r0, [r3, #0]
    c86c:	4b01      	ldr	r3, [pc, #4]	; (c874 <delay_init+0xc>)
    c86e:	4718      	bx	r3
    c870:	20000c48 	.word	0x20000c48
    c874:	00011b4d 	.word	0x00011b4d

0000c878 <delay_us>:
/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
	_delay_cycles(hardware, _get_cycles_for_us(us));
    c878:	4b05      	ldr	r3, [pc, #20]	; (c890 <delay_us+0x18>)
{
    c87a:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    c87c:	681c      	ldr	r4, [r3, #0]
    c87e:	4b05      	ldr	r3, [pc, #20]	; (c894 <delay_us+0x1c>)
    c880:	4798      	blx	r3
    c882:	4b05      	ldr	r3, [pc, #20]	; (c898 <delay_us+0x20>)
    c884:	4601      	mov	r1, r0
    c886:	4620      	mov	r0, r4
}
    c888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    c88c:	4718      	bx	r3
    c88e:	bf00      	nop
    c890:	20000c48 	.word	0x20000c48
    c894:	0000b041 	.word	0x0000b041
    c898:	00011b61 	.word	0x00011b61

0000c89c <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    c89c:	4b05      	ldr	r3, [pc, #20]	; (c8b4 <delay_ms+0x18>)
{
    c89e:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    c8a0:	681c      	ldr	r4, [r3, #0]
    c8a2:	4b05      	ldr	r3, [pc, #20]	; (c8b8 <delay_ms+0x1c>)
    c8a4:	4798      	blx	r3
    c8a6:	4b05      	ldr	r3, [pc, #20]	; (c8bc <delay_ms+0x20>)
    c8a8:	4601      	mov	r1, r0
    c8aa:	4620      	mov	r0, r4
}
    c8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    c8b0:	4718      	bx	r3
    c8b2:	bf00      	nop
    c8b4:	20000c48 	.word	0x20000c48
    c8b8:	0000b049 	.word	0x0000b049
    c8bc:	00011b61 	.word	0x00011b61

0000c8c0 <_init_chip>:
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    c8c0:	4a0e      	ldr	r2, [pc, #56]	; (c8fc <_init_chip+0x3c>)
    c8c2:	8813      	ldrh	r3, [r2, #0]
    c8c4:	b29b      	uxth	r3, r3
    c8c6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    c8ca:	b510      	push	{r4, lr}
    c8cc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    c8ce:	4b0c      	ldr	r3, [pc, #48]	; (c900 <_init_chip+0x40>)
	_oscctrl_init_sources();
	_mclk_init();
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    c8d0:	4c0c      	ldr	r4, [pc, #48]	; (c904 <_init_chip+0x44>)
	_osc32kctrl_init_sources();
    c8d2:	4798      	blx	r3
	_oscctrl_init_sources();
    c8d4:	4b0c      	ldr	r3, [pc, #48]	; (c908 <_init_chip+0x48>)
    c8d6:	4798      	blx	r3
	_mclk_init();
    c8d8:	4b0c      	ldr	r3, [pc, #48]	; (c90c <_init_chip+0x4c>)
    c8da:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    c8dc:	2004      	movs	r0, #4
    c8de:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    c8e0:	4b0b      	ldr	r3, [pc, #44]	; (c910 <_init_chip+0x50>)
    c8e2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    c8e4:	f640 70fb 	movw	r0, #4091	; 0xffb
    c8e8:	47a0      	blx	r4
}

static inline void hri_mclk_set_AHBMASK_DMAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    c8ea:	4a0a      	ldr	r2, [pc, #40]	; (c914 <_init_chip+0x54>)
    c8ec:	6913      	ldr	r3, [r2, #16]
    c8ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c8f2:	6113      	str	r3, [r2, #16]
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    c8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_dma_init();
    c8f8:	4b07      	ldr	r3, [pc, #28]	; (c918 <_init_chip+0x58>)
    c8fa:	4718      	bx	r3
    c8fc:	41004000 	.word	0x41004000
    c900:	0000eaf9 	.word	0x0000eaf9
    c904:	0000d785 	.word	0x0000d785
    c908:	0000d12d 	.word	0x0000d12d
    c90c:	0000d765 	.word	0x0000d765
    c910:	0000d131 	.word	0x0000d131
    c914:	40000800 	.word	0x40000800
    c918:	0000cba1 	.word	0x0000cba1

0000c91c <RAMECC_Handler>:
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    c91c:	4a0b      	ldr	r2, [pc, #44]	; (c94c <RAMECC_Handler+0x30>)
    c91e:	7893      	ldrb	r3, [r2, #2]

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    c920:	b082      	sub	sp, #8
    c922:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    c924:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    c926:	9b01      	ldr	r3, [sp, #4]
    c928:	0799      	lsls	r1, r3, #30
    c92a:	d505      	bpl.n	c938 <RAMECC_Handler+0x1c>
    c92c:	4b08      	ldr	r3, [pc, #32]	; (c950 <RAMECC_Handler+0x34>)
    c92e:	681b      	ldr	r3, [r3, #0]
    c930:	b113      	cbz	r3, c938 <RAMECC_Handler+0x1c>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    c932:	6850      	ldr	r0, [r2, #4]
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else {
		return;
	}
}
    c934:	b002      	add	sp, #8
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    c936:	4718      	bx	r3
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    c938:	9b01      	ldr	r3, [sp, #4]
    c93a:	07db      	lsls	r3, r3, #31
    c93c:	d504      	bpl.n	c948 <RAMECC_Handler+0x2c>
    c93e:	4b04      	ldr	r3, [pc, #16]	; (c950 <RAMECC_Handler+0x34>)
    c940:	685b      	ldr	r3, [r3, #4]
    c942:	b10b      	cbz	r3, c948 <RAMECC_Handler+0x2c>
    c944:	4a01      	ldr	r2, [pc, #4]	; (c94c <RAMECC_Handler+0x30>)
    c946:	e7f4      	b.n	c932 <RAMECC_Handler+0x16>
}
    c948:	b002      	add	sp, #8
    c94a:	4770      	bx	lr
    c94c:	41020000 	.word	0x41020000
    c950:	200145e4 	.word	0x200145e4

0000c954 <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    c954:	b430      	push	{r4, r5}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    c956:	780a      	ldrb	r2, [r1, #0]
    c958:	2a81      	cmp	r2, #129	; 0x81
    c95a:	d11c      	bne.n	c996 <hid_mouse_req+0x42>
    c95c:	784b      	ldrb	r3, [r1, #1]
    c95e:	2b06      	cmp	r3, #6
    c960:	d131      	bne.n	c9c6 <hid_mouse_req+0x72>
    c962:	4a1a      	ldr	r2, [pc, #104]	; (c9cc <hid_mouse_req+0x78>)
    c964:	888c      	ldrh	r4, [r1, #4]
    c966:	7a13      	ldrb	r3, [r2, #8]
    c968:	429c      	cmp	r4, r3
    c96a:	d12c      	bne.n	c9c6 <hid_mouse_req+0x72>
	switch (req->wValue >> 8) {
    c96c:	884b      	ldrh	r3, [r1, #2]
    c96e:	0a1b      	lsrs	r3, r3, #8
    c970:	2b21      	cmp	r3, #33	; 0x21
    c972:	d005      	beq.n	c980 <hid_mouse_req+0x2c>
    c974:	2b22      	cmp	r3, #34	; 0x22
    c976:	d00a      	beq.n	c98e <hid_mouse_req+0x3a>
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
			switch (req->bRequest) {
    c978:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    c97c:	bc30      	pop	{r4, r5}
    c97e:	4770      	bx	lr
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    c980:	6811      	ldr	r1, [r2, #0]
    c982:	780a      	ldrb	r2, [r1, #0]
    c984:	2300      	movs	r3, #0
				return usbdc_xfer(ep, NULL, 0, 0);
    c986:	4c12      	ldr	r4, [pc, #72]	; (c9d0 <hid_mouse_req+0x7c>)
    c988:	46a4      	mov	ip, r4
}
    c98a:	bc30      	pop	{r4, r5}
				return usbdc_xfer(ep, NULL, 0, 0);
    c98c:	4760      	bx	ip
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    c98e:	4911      	ldr	r1, [pc, #68]	; (c9d4 <hid_mouse_req+0x80>)
    c990:	2300      	movs	r3, #0
    c992:	2234      	movs	r2, #52	; 0x34
    c994:	e7f7      	b.n	c986 <hid_mouse_req+0x32>
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    c996:	f3c2 1241 	ubfx	r2, r2, #5, #2
    c99a:	2a01      	cmp	r2, #1
    c99c:	d113      	bne.n	c9c6 <hid_mouse_req+0x72>
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    c99e:	4c0b      	ldr	r4, [pc, #44]	; (c9cc <hid_mouse_req+0x78>)
    c9a0:	888d      	ldrh	r5, [r1, #4]
    c9a2:	7a23      	ldrb	r3, [r4, #8]
    c9a4:	429d      	cmp	r5, r3
    c9a6:	d10e      	bne.n	c9c6 <hid_mouse_req+0x72>
			switch (req->bRequest) {
    c9a8:	784b      	ldrb	r3, [r1, #1]
    c9aa:	2b03      	cmp	r3, #3
    c9ac:	d007      	beq.n	c9be <hid_mouse_req+0x6a>
    c9ae:	2b0b      	cmp	r3, #11
    c9b0:	d1e2      	bne.n	c978 <hid_mouse_req+0x24>
				_hiddf_mouse_funcd.protocol = req->wValue;
    c9b2:	884b      	ldrh	r3, [r1, #2]
    c9b4:	72a3      	strb	r3, [r4, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    c9b6:	2300      	movs	r3, #0
    c9b8:	461a      	mov	r2, r3
    c9ba:	4619      	mov	r1, r3
    c9bc:	e7e3      	b.n	c986 <hid_mouse_req+0x32>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    c9be:	2300      	movs	r3, #0
    c9c0:	f104 010a 	add.w	r1, r4, #10
    c9c4:	e7df      	b.n	c986 <hid_mouse_req+0x32>
			return ERR_NOT_FOUND;
    c9c6:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    c9ca:	e7d7      	b.n	c97c <hid_mouse_req+0x28>
    c9cc:	20000c4c 	.word	0x20000c4c
    c9d0:	0001133d 	.word	0x0001133d
    c9d4:	00014dfc 	.word	0x00014dfc

0000c9d8 <hid_mouse_ctrl>:
	switch (ctrl) {
    c9d8:	2901      	cmp	r1, #1
{
    c9da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9dc:	4614      	mov	r4, r2
	switch (ctrl) {
    c9de:	d03b      	beq.n	ca58 <hid_mouse_ctrl+0x80>
    c9e0:	2902      	cmp	r1, #2
    c9e2:	d04f      	beq.n	ca84 <hid_mouse_ctrl+0xac>
    c9e4:	2900      	cmp	r1, #0
    c9e6:	d150      	bne.n	ca8a <hid_mouse_ctrl+0xb2>
	ifc = desc->sod;
    c9e8:	6813      	ldr	r3, [r2, #0]
		return hid_mouse_enable(drv, (struct usbd_descriptors *)param);
    c9ea:	6886      	ldr	r6, [r0, #8]
	if (NULL == ifc) {
    c9ec:	b91b      	cbnz	r3, c9f6 <hid_mouse_ctrl+0x1e>
		return ERR_NOT_FOUND;
    c9ee:	f06f 0409 	mvn.w	r4, #9
}
    c9f2:	4620      	mov	r0, r4
    c9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    c9f6:	7959      	ldrb	r1, [r3, #5]
	ifc_desc.bInterfaceNumber = ifc[2];
    c9f8:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    c9fa:	2903      	cmp	r1, #3
    c9fc:	d1f7      	bne.n	c9ee <hid_mouse_ctrl+0x16>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    c9fe:	7a31      	ldrb	r1, [r6, #8]
    ca00:	428a      	cmp	r2, r1
    ca02:	d045      	beq.n	ca90 <hid_mouse_ctrl+0xb8>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    ca04:	29ff      	cmp	r1, #255	; 0xff
    ca06:	d146      	bne.n	ca96 <hid_mouse_ctrl+0xbe>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    ca08:	7232      	strb	r2, [r6, #8]
    ca0a:	7818      	ldrb	r0, [r3, #0]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    ca0c:	6861      	ldr	r1, [r4, #4]
    ca0e:	4f26      	ldr	r7, [pc, #152]	; (caa8 <hid_mouse_ctrl+0xd0>)
    ca10:	2221      	movs	r2, #33	; 0x21
    ca12:	4418      	add	r0, r3
    ca14:	4b25      	ldr	r3, [pc, #148]	; (caac <hid_mouse_ctrl+0xd4>)
    ca16:	4798      	blx	r3
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ca18:	6823      	ldr	r3, [r4, #0]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    ca1a:	6038      	str	r0, [r7, #0]
    ca1c:	7818      	ldrb	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ca1e:	6861      	ldr	r1, [r4, #4]
    ca20:	4418      	add	r0, r3
    ca22:	4b23      	ldr	r3, [pc, #140]	; (cab0 <hid_mouse_ctrl+0xd8>)
    ca24:	4798      	blx	r3
	desc->sod = ep;
    ca26:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    ca28:	2800      	cmp	r0, #0
    ca2a:	d0e0      	beq.n	c9ee <hid_mouse_ctrl+0x16>
	return (ptr[0] + (ptr[1] << 8));
    ca2c:	7943      	ldrb	r3, [r0, #5]
    ca2e:	7902      	ldrb	r2, [r0, #4]
		ep_desc.bEndpointAddress = ep[2];
    ca30:	7885      	ldrb	r5, [r0, #2]
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ca32:	78c1      	ldrb	r1, [r0, #3]
    ca34:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    ca38:	b292      	uxth	r2, r2
    ca3a:	4b1e      	ldr	r3, [pc, #120]	; (cab4 <hid_mouse_ctrl+0xdc>)
    ca3c:	4628      	mov	r0, r5
    ca3e:	4798      	blx	r3
    ca40:	4604      	mov	r4, r0
    ca42:	bb58      	cbnz	r0, ca9c <hid_mouse_ctrl+0xc4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ca44:	062b      	lsls	r3, r5, #24
    ca46:	d52c      	bpl.n	caa2 <hid_mouse_ctrl+0xca>
			usb_d_ep_enable(func_data->func_ep_in);
    ca48:	4b1b      	ldr	r3, [pc, #108]	; (cab8 <hid_mouse_ctrl+0xe0>)
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    ca4a:	7275      	strb	r5, [r6, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    ca4c:	4628      	mov	r0, r5
    ca4e:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    ca50:	f240 1301 	movw	r3, #257	; 0x101
    ca54:	817b      	strh	r3, [r7, #10]
	return ERR_NONE;
    ca56:	e7cc      	b.n	c9f2 <hid_mouse_ctrl+0x1a>
		return hid_mouse_disable(drv, (struct usbd_descriptors *)param);
    ca58:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    ca5a:	b11a      	cbz	r2, ca64 <hid_mouse_ctrl+0x8c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    ca5c:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    ca5e:	795b      	ldrb	r3, [r3, #5]
    ca60:	2b03      	cmp	r3, #3
    ca62:	d1c4      	bne.n	c9ee <hid_mouse_ctrl+0x16>
	if (func_data->func_iface != 0xFF) {
    ca64:	7a2b      	ldrb	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    ca66:	7a68      	ldrb	r0, [r5, #9]
	if (func_data->func_iface != 0xFF) {
    ca68:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    ca6a:	bf1c      	itt	ne
    ca6c:	23ff      	movne	r3, #255	; 0xff
    ca6e:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    ca70:	28ff      	cmp	r0, #255	; 0xff
    ca72:	d003      	beq.n	ca7c <hid_mouse_ctrl+0xa4>
		usb_d_ep_deinit(func_data->func_ep_in);
    ca74:	4b11      	ldr	r3, [pc, #68]	; (cabc <hid_mouse_ctrl+0xe4>)
    ca76:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ca78:	23ff      	movs	r3, #255	; 0xff
    ca7a:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    ca7c:	4b0a      	ldr	r3, [pc, #40]	; (caa8 <hid_mouse_ctrl+0xd0>)
    ca7e:	2400      	movs	r4, #0
    ca80:	72dc      	strb	r4, [r3, #11]
	return ERR_NONE;
    ca82:	e7b6      	b.n	c9f2 <hid_mouse_ctrl+0x1a>
		return ERR_UNSUPPORTED_OP;
    ca84:	f06f 041a 	mvn.w	r4, #26
    ca88:	e7b3      	b.n	c9f2 <hid_mouse_ctrl+0x1a>
	switch (ctrl) {
    ca8a:	f06f 040c 	mvn.w	r4, #12
    ca8e:	e7b0      	b.n	c9f2 <hid_mouse_ctrl+0x1a>
			return ERR_ALREADY_INITIALIZED;
    ca90:	f06f 0411 	mvn.w	r4, #17
    ca94:	e7ad      	b.n	c9f2 <hid_mouse_ctrl+0x1a>
			return ERR_NO_RESOURCE;
    ca96:	f06f 041b 	mvn.w	r4, #27
    ca9a:	e7aa      	b.n	c9f2 <hid_mouse_ctrl+0x1a>
			return ERR_NOT_INITIALIZED;
    ca9c:	f06f 0413 	mvn.w	r4, #19
    caa0:	e7a7      	b.n	c9f2 <hid_mouse_ctrl+0x1a>
			return ERR_INVALID_DATA;
    caa2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    caa6:	e7a4      	b.n	c9f2 <hid_mouse_ctrl+0x1a>
    caa8:	20000c4c 	.word	0x20000c4c
    caac:	0000adcd 	.word	0x0000adcd
    cab0:	0000ade7 	.word	0x0000ade7
    cab4:	0000e051 	.word	0x0000e051
    cab8:	0000e0e1 	.word	0x0000e0e1
    cabc:	0000e0b5 	.word	0x0000e0b5

0000cac0 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    cac0:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    cac2:	4b0a      	ldr	r3, [pc, #40]	; (caec <hiddf_mouse_init+0x2c>)
    cac4:	4798      	blx	r3
    cac6:	2801      	cmp	r0, #1
    cac8:	d80c      	bhi.n	cae4 <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    caca:	4809      	ldr	r0, [pc, #36]	; (caf0 <hiddf_mouse_init+0x30>)
    cacc:	4b09      	ldr	r3, [pc, #36]	; (caf4 <hiddf_mouse_init+0x34>)
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    cace:	e9c0 3004 	strd	r3, r0, [r0, #16]

	usbdc_register_function(&_hiddf_mouse);
    cad2:	4b09      	ldr	r3, [pc, #36]	; (caf8 <hiddf_mouse_init+0x38>)
    cad4:	300c      	adds	r0, #12
    cad6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    cad8:	2001      	movs	r0, #1
    cada:	4908      	ldr	r1, [pc, #32]	; (cafc <hiddf_mouse_init+0x3c>)
    cadc:	4b08      	ldr	r3, [pc, #32]	; (cb00 <hiddf_mouse_init+0x40>)
    cade:	4798      	blx	r3
	return ERR_NONE;
    cae0:	2000      	movs	r0, #0
}
    cae2:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    cae4:	f06f 0010 	mvn.w	r0, #16
    cae8:	e7fb      	b.n	cae2 <hiddf_mouse_init+0x22>
    caea:	bf00      	nop
    caec:	00011775 	.word	0x00011775
    caf0:	20000c4c 	.word	0x20000c4c
    caf4:	0000c9d9 	.word	0x0000c9d9
    caf8:	0001171d 	.word	0x0001171d
    cafc:	200004f8 	.word	0x200004f8
    cb00:	00011695 	.word	0x00011695

0000cb04 <hiddf_mouse_move>:
 * \param pos     Signed value to move
 * \param type    HID mouse class pointer move type
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{
    cb04:	b410      	push	{r4}

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    cb06:	4c0e      	ldr	r4, [pc, #56]	; (cb40 <hiddf_mouse_move+0x3c>)
    cb08:	2300      	movs	r3, #0

	if (type == HID_MOUSE_X_AXIS_MV) {
    cb0a:	2901      	cmp	r1, #1
	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    cb0c:	6063      	str	r3, [r4, #4]
	if (type == HID_MOUSE_X_AXIS_MV) {
    cb0e:	d109      	bne.n	cb24 <hiddf_mouse_move+0x20>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    cb10:	7160      	strb	r0, [r4, #5]
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    cb12:	7a60      	ldrb	r0, [r4, #9]
    cb14:	4c0b      	ldr	r4, [pc, #44]	; (cb44 <hiddf_mouse_move+0x40>)
    cb16:	490c      	ldr	r1, [pc, #48]	; (cb48 <hiddf_mouse_move+0x44>)
    cb18:	46a4      	mov	ip, r4
    cb1a:	2300      	movs	r3, #0
}
    cb1c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    cb20:	2204      	movs	r2, #4
    cb22:	4760      	bx	ip
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    cb24:	2902      	cmp	r1, #2
    cb26:	d101      	bne.n	cb2c <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    cb28:	71a0      	strb	r0, [r4, #6]
    cb2a:	e7f2      	b.n	cb12 <hiddf_mouse_move+0xe>
	} else if (type == HID_MOUSE_SCROLL_MV) {
    cb2c:	2903      	cmp	r1, #3
    cb2e:	d101      	bne.n	cb34 <hiddf_mouse_move+0x30>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    cb30:	71e0      	strb	r0, [r4, #7]
    cb32:	e7ee      	b.n	cb12 <hiddf_mouse_move+0xe>
}
    cb34:	f06f 000c 	mvn.w	r0, #12
    cb38:	f85d 4b04 	ldr.w	r4, [sp], #4
    cb3c:	4770      	bx	lr
    cb3e:	bf00      	nop
    cb40:	20000c4c 	.word	0x20000c4c
    cb44:	0001133d 	.word	0x0001133d
    cb48:	20000c50 	.word	0x20000c50

0000cb4c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    cb4c:	b900      	cbnz	r0, cb50 <assert+0x4>
		__asm("BKPT #0");
    cb4e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    cb50:	4770      	bx	lr
	...

0000cb54 <_dmac_handler>:
	tmp = ((Dmac *)hw)->INTPEND.reg;
    cb54:	4b10      	ldr	r3, [pc, #64]	; (cb98 <_dmac_handler+0x44>)
    cb56:	8c1a      	ldrh	r2, [r3, #32]
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    cb58:	b430      	push	{r4, r5}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    cb5a:	8c1d      	ldrh	r5, [r3, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
	struct _dma_resource *tmp_resource = &_resources[channel];
    cb5c:	4c0f      	ldr	r4, [pc, #60]	; (cb9c <_dmac_handler+0x48>)
	tmp &= mask;
    cb5e:	f002 021f 	and.w	r2, r2, #31
    cb62:	210c      	movs	r1, #12
    cb64:	4351      	muls	r1, r2

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    cb66:	05ed      	lsls	r5, r5, #23
	struct _dma_resource *tmp_resource = &_resources[channel];
    cb68:	eb04 0001 	add.w	r0, r4, r1
	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    cb6c:	d507      	bpl.n	cb7e <_dmac_handler+0x2a>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    cb6e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    cb72:	2201      	movs	r2, #1
    cb74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
    cb78:	6843      	ldr	r3, [r0, #4]
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	}
}
    cb7a:	bc30      	pop	{r4, r5}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    cb7c:	4718      	bx	r3
	tmp = ((Dmac *)hw)->INTPEND.reg;
    cb7e:	8c1d      	ldrh	r5, [r3, #32]
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    cb80:	05ad      	lsls	r5, r5, #22
    cb82:	d506      	bpl.n	cb92 <_dmac_handler+0x3e>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    cb84:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    cb88:	2202      	movs	r2, #2
    cb8a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    cb8e:	5863      	ldr	r3, [r4, r1]
    cb90:	e7f3      	b.n	cb7a <_dmac_handler+0x26>
}
    cb92:	bc30      	pop	{r4, r5}
    cb94:	4770      	bx	lr
    cb96:	bf00      	nop
    cb98:	4100a000 	.word	0x4100a000
    cb9c:	20000c64 	.word	0x20000c64

0000cba0 <_dma_init>:
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    cba0:	4b3d      	ldr	r3, [pc, #244]	; (cc98 <_dma_init+0xf8>)
    cba2:	881a      	ldrh	r2, [r3, #0]
    cba4:	f022 0202 	bic.w	r2, r2, #2
    cba8:	0412      	lsls	r2, r2, #16
    cbaa:	0c12      	lsrs	r2, r2, #16
{
    cbac:	b570      	push	{r4, r5, r6, lr}
    cbae:	801a      	strh	r2, [r3, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    cbb0:	885a      	ldrh	r2, [r3, #2]
    cbb2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
    cbb6:	0412      	lsls	r2, r2, #16
    cbb8:	0c12      	lsrs	r2, r2, #16
    cbba:	805a      	strh	r2, [r3, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    cbbc:	881a      	ldrh	r2, [r3, #0]
    cbbe:	b292      	uxth	r2, r2
    cbc0:	f042 0201 	orr.w	r2, r2, #1
    cbc4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    cbc6:	881a      	ldrh	r2, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    cbc8:	f012 0201 	ands.w	r2, r2, #1
    cbcc:	d1fb      	bne.n	cbc6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    cbce:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    cbd2:	8019      	strh	r1, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    cbd4:	7b59      	ldrb	r1, [r3, #13]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    cbd6:	4831      	ldr	r0, [pc, #196]	; (cc9c <_dma_init+0xfc>)
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    cbd8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    cbdc:	f041 0101 	orr.w	r1, r1, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    cbe0:	7359      	strb	r1, [r3, #13]
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    cbe2:	492f      	ldr	r1, [pc, #188]	; (cca0 <_dma_init+0x100>)
	((Dmac *)hw)->PRICTRL0.reg = data;
    cbe4:	615a      	str	r2, [r3, #20]
	((Dmac *)hw)->BASEADDR.reg = data;
    cbe6:	6358      	str	r0, [r3, #52]	; 0x34
	((Dmac *)hw)->WRBADDR.reg = data;
    cbe8:	6399      	str	r1, [r3, #56]	; 0x38
    cbea:	4613      	mov	r3, r2
    cbec:	492d      	ldr	r1, [pc, #180]	; (cca4 <_dma_init+0x104>)
    cbee:	4602      	mov	r2, r0
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    cbf0:	461d      	mov	r5, r3
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    cbf2:	011c      	lsls	r4, r3, #4
    cbf4:	f104 4082 	add.w	r0, r4, #1090519040	; 0x41000000
    cbf8:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    cbfc:	680e      	ldr	r6, [r1, #0]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    cbfe:	6406      	str	r6, [r0, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    cc00:	790e      	ldrb	r6, [r1, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    cc02:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    cc06:	794e      	ldrb	r6, [r1, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    cc08:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    cc0c:	3301      	adds	r3, #1
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    cc0e:	1910      	adds	r0, r2, r4
    cc10:	88ce      	ldrh	r6, [r1, #6]
    cc12:	5316      	strh	r6, [r2, r4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    cc14:	2b20      	cmp	r3, #32
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    cc16:	60c5      	str	r5, [r0, #12]
    cc18:	f101 0108 	add.w	r1, r1, #8
    cc1c:	d1e9      	bne.n	cbf2 <_dma_init+0x52>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc1e:	4b22      	ldr	r3, [pc, #136]	; (cca8 <_dma_init+0x108>)
    cc20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cc24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    cc28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc2c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc30:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc34:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc36:	2201      	movs	r2, #1
    cc38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    cc3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc40:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc44:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc48:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc4a:	2202      	movs	r2, #2
    cc4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    cc50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc54:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc58:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc5c:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc5e:	2204      	movs	r2, #4
    cc60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    cc64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc68:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc6c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc70:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc72:	2208      	movs	r2, #8
    cc74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    cc78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cc7c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc80:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cc84:	605a      	str	r2, [r3, #4]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    cc86:	4a04      	ldr	r2, [pc, #16]	; (cc98 <_dma_init+0xf8>)
    cc88:	8813      	ldrh	r3, [r2, #0]
    cc8a:	b29b      	uxth	r3, r3
    cc8c:	f043 0302 	orr.w	r3, r3, #2
    cc90:	8013      	strh	r3, [r2, #0]
}
    cc92:	2000      	movs	r0, #0
    cc94:	bd70      	pop	{r4, r5, r6, pc}
    cc96:	bf00      	nop
    cc98:	4100a000 	.word	0x4100a000
    cc9c:	20014600 	.word	0x20014600
    cca0:	20014800 	.word	0x20014800
    cca4:	00014e30 	.word	0x00014e30
    cca8:	e000e100 	.word	0xe000e100

0000ccac <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    ccac:	b939      	cbnz	r1, ccbe <_dma_set_irq_state+0x12>
	if (value == 0x0) {
    ccae:	4b08      	ldr	r3, [pc, #32]	; (ccd0 <_dma_set_irq_state+0x24>)
    ccb0:	0100      	lsls	r0, r0, #4
    ccb2:	2102      	movs	r1, #2
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    ccb4:	4418      	add	r0, r3
	if (value == 0x0) {
    ccb6:	b93a      	cbnz	r2, ccc8 <_dma_set_irq_state+0x1c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    ccb8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    ccbc:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    ccbe:	2901      	cmp	r1, #1
    ccc0:	d104      	bne.n	cccc <_dma_set_irq_state+0x20>
	if (value == 0x0) {
    ccc2:	4b03      	ldr	r3, [pc, #12]	; (ccd0 <_dma_set_irq_state+0x24>)
    ccc4:	0100      	lsls	r0, r0, #4
    ccc6:	e7f5      	b.n	ccb4 <_dma_set_irq_state+0x8>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    ccc8:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
}
    cccc:	4770      	bx	lr
    ccce:	bf00      	nop
    ccd0:	4100a000 	.word	0x4100a000

0000ccd4 <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    ccd4:	4b02      	ldr	r3, [pc, #8]	; (cce0 <_dma_set_destination_address+0xc>)
    ccd6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    ccda:	6081      	str	r1, [r0, #8]
}
    ccdc:	2000      	movs	r0, #0
    ccde:	4770      	bx	lr
    cce0:	20014600 	.word	0x20014600

0000cce4 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    cce4:	4b02      	ldr	r3, [pc, #8]	; (ccf0 <_dma_set_source_address+0xc>)
    cce6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    ccea:	6041      	str	r1, [r0, #4]
}
    ccec:	2000      	movs	r0, #0
    ccee:	4770      	bx	lr
    ccf0:	20014600 	.word	0x20014600

0000ccf4 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    ccf4:	4a05      	ldr	r2, [pc, #20]	; (cd0c <_dma_srcinc_enable+0x18>)
    ccf6:	0100      	lsls	r0, r0, #4
    ccf8:	5a13      	ldrh	r3, [r2, r0]
    ccfa:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    ccfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    cd00:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    cd04:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    cd06:	5211      	strh	r1, [r2, r0]
}
    cd08:	2000      	movs	r0, #0
    cd0a:	4770      	bx	lr
    cd0c:	20014600 	.word	0x20014600

0000cd10 <_dma_set_data_amount>:
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    cd10:	4b0f      	ldr	r3, [pc, #60]	; (cd50 <_dma_set_data_amount+0x40>)
{
    cd12:	b570      	push	{r4, r5, r6, lr}
    cd14:	0104      	lsls	r4, r0, #4
    cd16:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    cd1a:	6886      	ldr	r6, [r0, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    cd1c:	5b1a      	ldrh	r2, [r3, r4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    cd1e:	5b1d      	ldrh	r5, [r3, r4]
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    cd20:	f3c2 2201 	ubfx	r2, r2, #8, #2
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    cd24:	052d      	lsls	r5, r5, #20
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    cd26:	bf42      	ittt	mi
    cd28:	fa01 f502 	lslmi.w	r5, r1, r2
    cd2c:	19ad      	addmi	r5, r5, r6
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    cd2e:	6085      	strmi	r5, [r0, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    cd30:	1918      	adds	r0, r3, r4
    cd32:	6845      	ldr	r5, [r0, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    cd34:	5b1e      	ldrh	r6, [r3, r4]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    cd36:	0576      	lsls	r6, r6, #21
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    cd38:	bf48      	it	mi
    cd3a:	fa01 f202 	lslmi.w	r2, r1, r2
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    cd3e:	4423      	add	r3, r4
    cd40:	bf48      	it	mi
    cd42:	1952      	addmi	r2, r2, r5
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    cd44:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    cd46:	bf48      	it	mi
    cd48:	6042      	strmi	r2, [r0, #4]
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    cd4a:	8059      	strh	r1, [r3, #2]
}
    cd4c:	2000      	movs	r0, #0
    cd4e:	bd70      	pop	{r4, r5, r6, pc}
    cd50:	20014600 	.word	0x20014600

0000cd54 <_dma_enable_transaction>:
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    cd54:	0102      	lsls	r2, r0, #4
{
    cd56:	b510      	push	{r4, lr}
    cd58:	4c0b      	ldr	r4, [pc, #44]	; (cd88 <_dma_enable_transaction+0x34>)
    cd5a:	5aa3      	ldrh	r3, [r4, r2]
    cd5c:	b29b      	uxth	r3, r3
    cd5e:	f043 0301 	orr.w	r3, r3, #1
    cd62:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    cd64:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    cd68:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    cd6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    cd6e:	f042 0202 	orr.w	r2, r2, #2
    cd72:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    cd74:	b131      	cbz	r1, cd84 <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    cd76:	4a05      	ldr	r2, [pc, #20]	; (cd8c <_dma_enable_transaction+0x38>)
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    cd78:	2301      	movs	r3, #1
    cd7a:	6911      	ldr	r1, [r2, #16]
    cd7c:	fa03 f000 	lsl.w	r0, r3, r0
    cd80:	4308      	orrs	r0, r1
    cd82:	6110      	str	r0, [r2, #16]
}
    cd84:	2000      	movs	r0, #0
    cd86:	bd10      	pop	{r4, pc}
    cd88:	20014600 	.word	0x20014600
    cd8c:	4100a000 	.word	0x4100a000

0000cd90 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    cd90:	4b03      	ldr	r3, [pc, #12]	; (cda0 <_dma_get_channel_resource+0x10>)
    cd92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    cd96:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    cd9a:	6001      	str	r1, [r0, #0]
}
    cd9c:	2000      	movs	r0, #0
    cd9e:	4770      	bx	lr
    cda0:	20000c64 	.word	0x20000c64

0000cda4 <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
	_dmac_handler();
    cda4:	4b00      	ldr	r3, [pc, #0]	; (cda8 <DMAC_0_Handler+0x4>)
    cda6:	4718      	bx	r3
    cda8:	0000cb55 	.word	0x0000cb55

0000cdac <DMAC_1_Handler>:
    cdac:	4b00      	ldr	r3, [pc, #0]	; (cdb0 <DMAC_1_Handler+0x4>)
    cdae:	4718      	bx	r3
    cdb0:	0000cb55 	.word	0x0000cb55

0000cdb4 <DMAC_2_Handler>:
    cdb4:	4b00      	ldr	r3, [pc, #0]	; (cdb8 <DMAC_2_Handler+0x4>)
    cdb6:	4718      	bx	r3
    cdb8:	0000cb55 	.word	0x0000cb55

0000cdbc <DMAC_3_Handler>:
    cdbc:	4b00      	ldr	r3, [pc, #0]	; (cdc0 <DMAC_3_Handler+0x4>)
    cdbe:	4718      	bx	r3
    cdc0:	0000cb55 	.word	0x0000cb55

0000cdc4 <DMAC_4_Handler>:
    cdc4:	4b00      	ldr	r3, [pc, #0]	; (cdc8 <DMAC_4_Handler+0x4>)
    cdc6:	4718      	bx	r3
    cdc8:	0000cb55 	.word	0x0000cb55

0000cdcc <adc_async_window_threshold_reached>:

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    cdcc:	6983      	ldr	r3, [r0, #24]
    cdce:	b103      	cbz	r3, cdd2 <adc_async_window_threshold_reached+0x6>
		descr->adc_async_cb.monitor(descr, channel);
    cdd0:	4718      	bx	r3
	}
}
    cdd2:	4770      	bx	lr

0000cdd4 <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    cdd4:	69c3      	ldr	r3, [r0, #28]
    cdd6:	b103      	cbz	r3, cdda <adc_async_error_occured+0x6>
		descr->adc_async_cb.error(descr, channel);
    cdd8:	4718      	bx	r3
	}
}
    cdda:	4770      	bx	lr

0000cddc <adc_async_channel_conversion_done>:
{
    cddc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t                              index    = descr->channel_map[channel];
    cde0:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    cde2:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    cde6:	5c5c      	ldrb	r4, [r3, r1]
	ringbuffer_put(&descr_ch->convert, data);
    cde8:	f8df a054 	ldr.w	sl, [pc, #84]	; ce40 <adc_async_channel_conversion_done+0x64>
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    cdec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cdf0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
    cdf4:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
	ringbuffer_put(&descr_ch->convert, data);
    cdf8:	f104 0b04 	add.w	fp, r4, #4
{
    cdfc:	4605      	mov	r5, r0
    cdfe:	460e      	mov	r6, r1
	ringbuffer_put(&descr_ch->convert, data);
    ce00:	4658      	mov	r0, fp
    ce02:	b2d1      	uxtb	r1, r2
{
    ce04:	4617      	mov	r7, r2
	ringbuffer_put(&descr_ch->convert, data);
    ce06:	47d0      	blx	sl
	if (1 < _adc_async_get_data_size(&descr->device)) {
    ce08:	4b0c      	ldr	r3, [pc, #48]	; (ce3c <adc_async_channel_conversion_done+0x60>)
    ce0a:	4628      	mov	r0, r5
    ce0c:	4798      	blx	r3
    ce0e:	2801      	cmp	r0, #1
    ce10:	d905      	bls.n	ce1e <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    ce12:	0a39      	lsrs	r1, r7, #8
    ce14:	4658      	mov	r0, fp
    ce16:	47d0      	blx	sl
		++descr_ch->bytes_in_buffer;
    ce18:	8aa3      	ldrh	r3, [r4, #20]
    ce1a:	3301      	adds	r3, #1
    ce1c:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
    ce1e:	8aa3      	ldrh	r3, [r4, #20]
    ce20:	3301      	adds	r3, #1
    ce22:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    ce24:	f858 3009 	ldr.w	r3, [r8, r9]
    ce28:	b12b      	cbz	r3, ce36 <adc_async_channel_conversion_done+0x5a>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    ce2a:	4631      	mov	r1, r6
    ce2c:	4628      	mov	r0, r5
}
    ce2e:	b001      	add	sp, #4
    ce30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    ce34:	4718      	bx	r3
}
    ce36:	b001      	add	sp, #4
    ce38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce3c:	000110bd 	.word	0x000110bd
    ce40:	00010d25 	.word	0x00010d25

0000ce44 <adc_async_init>:
{
    ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce48:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    ce4c:	f89d 8020 	ldrb.w	r8, [sp, #32]
    ce50:	460e      	mov	r6, r1
    ce52:	4615      	mov	r5, r2
    ce54:	461f      	mov	r7, r3
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    ce56:	4604      	mov	r4, r0
    ce58:	b150      	cbz	r0, ce70 <adc_async_init+0x2c>
    ce5a:	2900      	cmp	r1, #0
    ce5c:	d032      	beq.n	cec4 <adc_async_init+0x80>
    ce5e:	2a00      	cmp	r2, #0
    ce60:	d032      	beq.n	cec8 <adc_async_init+0x84>
    ce62:	f1b8 0f00 	cmp.w	r8, #0
    ce66:	d031      	beq.n	cecc <adc_async_init+0x88>
    ce68:	f1b9 0000 	subs.w	r0, r9, #0
    ce6c:	bf18      	it	ne
    ce6e:	2001      	movne	r0, #1
    ce70:	4917      	ldr	r1, [pc, #92]	; (ced0 <adc_async_init+0x8c>)
    ce72:	f8df a070 	ldr.w	sl, [pc, #112]	; cee4 <adc_async_init+0xa0>
    ce76:	223f      	movs	r2, #63	; 0x3f
    ce78:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    ce7a:	1c78      	adds	r0, r7, #1
    ce7c:	4580      	cmp	r8, r0
    ce7e:	4914      	ldr	r1, [pc, #80]	; (ced0 <adc_async_init+0x8c>)
    ce80:	f04f 0240 	mov.w	r2, #64	; 0x40
    ce84:	bfcc      	ite	gt
    ce86:	2000      	movgt	r0, #0
    ce88:	2001      	movle	r0, #1
    ce8a:	47d0      	blx	sl
	device = &descr->device;
    ce8c:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    ce8e:	21ff      	movs	r1, #255	; 0xff
    ce90:	b2da      	uxtb	r2, r3
    ce92:	3301      	adds	r3, #1
    ce94:	54a9      	strb	r1, [r5, r2]
	for (uint8_t i = 0; i <= channel_max; i++) {
    ce96:	b2da      	uxtb	r2, r3
    ce98:	4297      	cmp	r7, r2
    ce9a:	d2f9      	bcs.n	ce90 <adc_async_init+0x4c>
	init_status           = _adc_async_init(device, hw);
    ce9c:	4b0d      	ldr	r3, [pc, #52]	; (ced4 <adc_async_init+0x90>)
	descr->channel_map    = channel_map;
    ce9e:	6225      	str	r5, [r4, #32]
	descr->channel_max    = channel_max;
    cea0:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
	descr->channel_amount = channel_amount;
    cea4:	f884 8025 	strb.w	r8, [r4, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    cea8:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    ceac:	4631      	mov	r1, r6
    ceae:	4620      	mov	r0, r4
    ceb0:	4798      	blx	r3
	if (init_status) {
    ceb2:	b928      	cbnz	r0, cec0 <adc_async_init+0x7c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    ceb4:	4b08      	ldr	r3, [pc, #32]	; (ced8 <adc_async_init+0x94>)
    ceb6:	60a3      	str	r3, [r4, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    ceb8:	4b08      	ldr	r3, [pc, #32]	; (cedc <adc_async_init+0x98>)
    ceba:	6023      	str	r3, [r4, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    cebc:	4b08      	ldr	r3, [pc, #32]	; (cee0 <adc_async_init+0x9c>)
    cebe:	6063      	str	r3, [r4, #4]
}
    cec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    cec4:	4608      	mov	r0, r1
    cec6:	e7d3      	b.n	ce70 <adc_async_init+0x2c>
    cec8:	4610      	mov	r0, r2
    ceca:	e7d1      	b.n	ce70 <adc_async_init+0x2c>
    cecc:	4640      	mov	r0, r8
    cece:	e7cf      	b.n	ce70 <adc_async_init+0x2c>
    ced0:	00014f30 	.word	0x00014f30
    ced4:	00010fe5 	.word	0x00010fe5
    ced8:	0000cddd 	.word	0x0000cddd
    cedc:	0000cdcd 	.word	0x0000cdcd
    cee0:	0000cdd5 	.word	0x0000cdd5
    cee4:	0000cb4d 	.word	0x0000cb4d

0000cee8 <adc_async_register_channel_buffer>:
{
    cee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ceec:	460e      	mov	r6, r1
    ceee:	4617      	mov	r7, r2
    cef0:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    cef2:	4604      	mov	r4, r0
    cef4:	b118      	cbz	r0, cefe <adc_async_register_channel_buffer+0x16>
    cef6:	b1c2      	cbz	r2, cf2a <adc_async_register_channel_buffer+0x42>
    cef8:	1e18      	subs	r0, r3, #0
    cefa:	bf18      	it	ne
    cefc:	2001      	movne	r0, #1
    cefe:	4921      	ldr	r1, [pc, #132]	; (cf84 <adc_async_register_channel_buffer+0x9c>)
    cf00:	4d21      	ldr	r5, [pc, #132]	; (cf88 <adc_async_register_channel_buffer+0xa0>)
    cf02:	2266      	movs	r2, #102	; 0x66
    cf04:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
    cf06:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    cf0a:	491e      	ldr	r1, [pc, #120]	; (cf84 <adc_async_register_channel_buffer+0x9c>)
    cf0c:	42b0      	cmp	r0, r6
    cf0e:	f04f 0267 	mov.w	r2, #103	; 0x67
    cf12:	bf34      	ite	cc
    cf14:	2000      	movcc	r0, #0
    cf16:	2001      	movcs	r0, #1
    cf18:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
    cf1a:	6a23      	ldr	r3, [r4, #32]
    cf1c:	5d9a      	ldrb	r2, [r3, r6]
    cf1e:	2aff      	cmp	r2, #255	; 0xff
    cf20:	d005      	beq.n	cf2e <adc_async_register_channel_buffer+0x46>
		return ERR_INVALID_ARG;
    cf22:	f06f 000c 	mvn.w	r0, #12
}
    cf26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    cf2a:	4610      	mov	r0, r2
    cf2c:	e7e7      	b.n	cefe <adc_async_register_channel_buffer+0x16>
	for (i = 0; i <= descr->channel_max; i++) {
    cf2e:	2200      	movs	r2, #0
    cf30:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
	uint8_t i, index = 0;
    cf34:	4615      	mov	r5, r2
		if (descr->channel_map[i] != 0xFF) {
    cf36:	b2d1      	uxtb	r1, r2
    cf38:	3201      	adds	r2, #1
    cf3a:	5c59      	ldrb	r1, [r3, r1]
    cf3c:	29ff      	cmp	r1, #255	; 0xff
			index++;
    cf3e:	bf18      	it	ne
    cf40:	3501      	addne	r5, #1
	for (i = 0; i <= descr->channel_max; i++) {
    cf42:	b2d1      	uxtb	r1, r2
			index++;
    cf44:	bf18      	it	ne
    cf46:	b2ed      	uxtbne	r5, r5
	for (i = 0; i <= descr->channel_max; i++) {
    cf48:	4288      	cmp	r0, r1
    cf4a:	d2f4      	bcs.n	cf36 <adc_async_register_channel_buffer+0x4e>
	if (index > descr->channel_amount) {
    cf4c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    cf50:	42ab      	cmp	r3, r5
    cf52:	d313      	bcc.n	cf7c <adc_async_register_channel_buffer+0x94>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    cf54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cf56:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    cf5a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    cf5e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    cf62:	4642      	mov	r2, r8
    cf64:	4b09      	ldr	r3, [pc, #36]	; (cf8c <adc_async_register_channel_buffer+0xa4>)
    cf66:	4639      	mov	r1, r7
    cf68:	3004      	adds	r0, #4
    cf6a:	4798      	blx	r3
    cf6c:	2800      	cmp	r0, #0
    cf6e:	d1d8      	bne.n	cf22 <adc_async_register_channel_buffer+0x3a>
	descr->channel_map[channel]            = index;
    cf70:	6a23      	ldr	r3, [r4, #32]
    cf72:	559d      	strb	r5, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    cf74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf76:	444b      	add	r3, r9
    cf78:	8298      	strh	r0, [r3, #20]
	return ERR_NONE;
    cf7a:	e7d4      	b.n	cf26 <adc_async_register_channel_buffer+0x3e>
		return ERR_NO_RESOURCE;
    cf7c:	f06f 001b 	mvn.w	r0, #27
    cf80:	e7d1      	b.n	cf26 <adc_async_register_channel_buffer+0x3e>
    cf82:	bf00      	nop
    cf84:	00014f30 	.word	0x00014f30
    cf88:	0000cb4d 	.word	0x0000cb4d
    cf8c:	00010ca9 	.word	0x00010ca9

0000cf90 <adc_async_enable_channel>:
{
    cf90:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    cf92:	4604      	mov	r4, r0
    cf94:	3800      	subs	r0, #0
{
    cf96:	460d      	mov	r5, r1
	ASSERT(descr);
    cf98:	bf18      	it	ne
    cf9a:	2001      	movne	r0, #1
    cf9c:	4e09      	ldr	r6, [pc, #36]	; (cfc4 <adc_async_enable_channel+0x34>)
    cf9e:	490a      	ldr	r1, [pc, #40]	; (cfc8 <adc_async_enable_channel+0x38>)
    cfa0:	2283      	movs	r2, #131	; 0x83
    cfa2:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    cfa4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    cfa8:	4907      	ldr	r1, [pc, #28]	; (cfc8 <adc_async_enable_channel+0x38>)
    cfaa:	42a8      	cmp	r0, r5
    cfac:	bf34      	ite	cc
    cfae:	2000      	movcc	r0, #0
    cfb0:	2001      	movcs	r0, #1
    cfb2:	2284      	movs	r2, #132	; 0x84
    cfb4:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    cfb6:	4620      	mov	r0, r4
    cfb8:	4b04      	ldr	r3, [pc, #16]	; (cfcc <adc_async_enable_channel+0x3c>)
    cfba:	4629      	mov	r1, r5
    cfbc:	4798      	blx	r3
}
    cfbe:	2000      	movs	r0, #0
    cfc0:	bd70      	pop	{r4, r5, r6, pc}
    cfc2:	bf00      	nop
    cfc4:	0000cb4d 	.word	0x0000cb4d
    cfc8:	00014f30 	.word	0x00014f30
    cfcc:	000110b1 	.word	0x000110b1

0000cfd0 <adc_async_register_callback>:
{
    cfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT(descr);
    cfd4:	4604      	mov	r4, r0
    cfd6:	3800      	subs	r0, #0
    cfd8:	bf18      	it	ne
    cfda:	2001      	movne	r0, #1
    cfdc:	f8df 8064 	ldr.w	r8, [pc, #100]	; d044 <adc_async_register_callback+0x74>
{
    cfe0:	460f      	mov	r7, r1
    cfe2:	4615      	mov	r5, r2
	ASSERT(descr);
    cfe4:	4915      	ldr	r1, [pc, #84]	; (d03c <adc_async_register_callback+0x6c>)
    cfe6:	229c      	movs	r2, #156	; 0x9c
{
    cfe8:	461e      	mov	r6, r3
	ASSERT(descr);
    cfea:	47c0      	blx	r8
	ASSERT(descr->channel_max >= channel);
    cfec:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    cff0:	4912      	ldr	r1, [pc, #72]	; (d03c <adc_async_register_callback+0x6c>)
    cff2:	42b8      	cmp	r0, r7
    cff4:	bf34      	ite	cc
    cff6:	2000      	movcc	r0, #0
    cff8:	2001      	movcs	r0, #1
    cffa:	229d      	movs	r2, #157	; 0x9d
    cffc:	47c0      	blx	r8
	switch (type) {
    cffe:	2d01      	cmp	r5, #1
    d000:	d014      	beq.n	d02c <adc_async_register_callback+0x5c>
    d002:	2d02      	cmp	r5, #2
    d004:	d014      	beq.n	d030 <adc_async_register_callback+0x60>
    d006:	b9ad      	cbnz	r5, d034 <adc_async_register_callback+0x64>
	uint8_t index = descr->channel_map[channel];
    d008:	6a23      	ldr	r3, [r4, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    d00a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d00c:	5ddb      	ldrb	r3, [r3, r7]
    d00e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d012:	f842 6033 	str.w	r6, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    d016:	1e33      	subs	r3, r6, #0
    d018:	4620      	mov	r0, r4
    d01a:	bf18      	it	ne
    d01c:	2301      	movne	r3, #1
    d01e:	4c08      	ldr	r4, [pc, #32]	; (d040 <adc_async_register_callback+0x70>)
    d020:	462a      	mov	r2, r5
    d022:	4639      	mov	r1, r7
    d024:	47a0      	blx	r4
	return ERR_NONE;
    d026:	2000      	movs	r0, #0
}
    d028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		descr->adc_async_cb.monitor = cb;
    d02c:	61a6      	str	r6, [r4, #24]
		break;
    d02e:	e7f2      	b.n	d016 <adc_async_register_callback+0x46>
		descr->adc_async_cb.error = cb;
    d030:	61e6      	str	r6, [r4, #28]
		break;
    d032:	e7f0      	b.n	d016 <adc_async_register_callback+0x46>
	switch (type) {
    d034:	f06f 000c 	mvn.w	r0, #12
    d038:	e7f6      	b.n	d028 <adc_async_register_callback+0x58>
    d03a:	bf00      	nop
    d03c:	00014f30 	.word	0x00014f30
    d040:	000110e9 	.word	0x000110e9
    d044:	0000cb4d 	.word	0x0000cb4d

0000d048 <adc_async_read_channel>:
{
    d048:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d04c:	460e      	mov	r6, r1
    d04e:	4617      	mov	r7, r2
    d050:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    d052:	4604      	mov	r4, r0
    d054:	b120      	cbz	r0, d060 <adc_async_read_channel+0x18>
    d056:	2a00      	cmp	r2, #0
    d058:	d03f      	beq.n	d0da <adc_async_read_channel+0x92>
    d05a:	1e18      	subs	r0, r3, #0
    d05c:	bf18      	it	ne
    d05e:	2001      	movne	r0, #1
    d060:	f8df 8098 	ldr.w	r8, [pc, #152]	; d0fc <adc_async_read_channel+0xb4>
    d064:	4920      	ldr	r1, [pc, #128]	; (d0e8 <adc_async_read_channel+0xa0>)
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    d066:	f8df a098 	ldr.w	sl, [pc, #152]	; d100 <adc_async_read_channel+0xb8>
	ASSERT(descr && buffer && length);
    d06a:	22bc      	movs	r2, #188	; 0xbc
    d06c:	47c0      	blx	r8
	ASSERT(descr->channel_max >= channel);
    d06e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d072:	491d      	ldr	r1, [pc, #116]	; (d0e8 <adc_async_read_channel+0xa0>)
    d074:	42b0      	cmp	r0, r6
    d076:	bf34      	ite	cc
    d078:	2000      	movcc	r0, #0
    d07a:	2001      	movcs	r0, #1
    d07c:	22bd      	movs	r2, #189	; 0xbd
    d07e:	47c0      	blx	r8
	data_size = _adc_async_get_data_size(&descr->device);
    d080:	4b1a      	ldr	r3, [pc, #104]	; (d0ec <adc_async_read_channel+0xa4>)
    d082:	4620      	mov	r0, r4
    d084:	4798      	blx	r3
	ASSERT(!(length % data_size));
    d086:	fbb5 f3f0 	udiv	r3, r5, r0
    d08a:	fb03 5010 	mls	r0, r3, r0, r5
    d08e:	fab0 f080 	clz	r0, r0
    d092:	4915      	ldr	r1, [pc, #84]	; (d0e8 <adc_async_read_channel+0xa0>)
    d094:	22bf      	movs	r2, #191	; 0xbf
    d096:	0940      	lsrs	r0, r0, #5
    d098:	47c0      	blx	r8
	index                                         = descr->channel_map[channel];
    d09a:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    d09c:	5d9e      	ldrb	r6, [r3, r6]
    d09e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0a0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    d0a4:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
	CRITICAL_SECTION_ENTER()
    d0a8:	a801      	add	r0, sp, #4
    d0aa:	4b11      	ldr	r3, [pc, #68]	; (d0f0 <adc_async_read_channel+0xa8>)
	num = ringbuffer_num(&descr_ch->convert);
    d0ac:	f106 0904 	add.w	r9, r6, #4
	CRITICAL_SECTION_ENTER()
    d0b0:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    d0b2:	4b10      	ldr	r3, [pc, #64]	; (d0f4 <adc_async_read_channel+0xac>)
    d0b4:	4648      	mov	r0, r9
    d0b6:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    d0b8:	4b0f      	ldr	r3, [pc, #60]	; (d0f8 <adc_async_read_channel+0xb0>)
	num = ringbuffer_num(&descr_ch->convert);
    d0ba:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    d0bc:	a801      	add	r0, sp, #4
    d0be:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    d0c0:	2400      	movs	r4, #0
    d0c2:	45a0      	cmp	r8, r4
    d0c4:	b2a2      	uxth	r2, r4
    d0c6:	d001      	beq.n	d0cc <adc_async_read_channel+0x84>
    d0c8:	42a5      	cmp	r5, r4
    d0ca:	d108      	bne.n	d0de <adc_async_read_channel+0x96>
	descr_ch->bytes_in_buffer -= was_read;
    d0cc:	8ab3      	ldrh	r3, [r6, #20]
}
    d0ce:	4620      	mov	r0, r4
	descr_ch->bytes_in_buffer -= was_read;
    d0d0:	1a9b      	subs	r3, r3, r2
    d0d2:	82b3      	strh	r3, [r6, #20]
}
    d0d4:	b002      	add	sp, #8
    d0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(descr && buffer && length);
    d0da:	4610      	mov	r0, r2
    d0dc:	e7c0      	b.n	d060 <adc_async_read_channel+0x18>
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    d0de:	1939      	adds	r1, r7, r4
    d0e0:	4648      	mov	r0, r9
    d0e2:	47d0      	blx	sl
    d0e4:	3401      	adds	r4, #1
    d0e6:	e7ec      	b.n	d0c2 <adc_async_read_channel+0x7a>
    d0e8:	00014f30 	.word	0x00014f30
    d0ec:	000110bd 	.word	0x000110bd
    d0f0:	00010d8d 	.word	0x00010d8d
    d0f4:	00010d69 	.word	0x00010d69
    d0f8:	00010d9b 	.word	0x00010d9b
    d0fc:	0000cb4d 	.word	0x0000cb4d
    d100:	00010ce5 	.word	0x00010ce5

0000d104 <adc_async_start_conversion>:
{
    d104:	b510      	push	{r4, lr}
	ASSERT(descr);
    d106:	4604      	mov	r4, r0
    d108:	3800      	subs	r0, #0
    d10a:	bf18      	it	ne
    d10c:	2001      	movne	r0, #1
    d10e:	4904      	ldr	r1, [pc, #16]	; (d120 <adc_async_start_conversion+0x1c>)
    d110:	4b04      	ldr	r3, [pc, #16]	; (d124 <adc_async_start_conversion+0x20>)
    d112:	22d6      	movs	r2, #214	; 0xd6
    d114:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    d116:	4620      	mov	r0, r4
    d118:	4b03      	ldr	r3, [pc, #12]	; (d128 <adc_async_start_conversion+0x24>)
    d11a:	4798      	blx	r3
}
    d11c:	2000      	movs	r0, #0
    d11e:	bd10      	pop	{r4, pc}
    d120:	00014f30 	.word	0x00014f30
    d124:	0000cb4d 	.word	0x0000cb4d
    d128:	000110d1 	.word	0x000110d1

0000d12c <_oscctrl_init_sources>:
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    d12c:	4770      	bx	lr
	...

0000d130 <_oscctrl_init_referenced_generators>:

static inline void hri_gclk_write_GENCTRL_SRC_bf(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	uint32_t tmp;
	GCLK_CRITICAL_SECTION_ENTER();
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    d130:	4b3b      	ldr	r3, [pc, #236]	; (d220 <_oscctrl_init_referenced_generators+0xf0>)
    d132:	6a1a      	ldr	r2, [r3, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    d134:	f022 020f 	bic.w	r2, r2, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    d138:	f042 0204 	orr.w	r2, r2, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    d13c:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    d13e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    d142:	6859      	ldr	r1, [r3, #4]
    d144:	4211      	tst	r1, r2
    d146:	d1fc      	bne.n	d142 <_oscctrl_init_referenced_generators+0x12>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    d148:	685a      	ldr	r2, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    d14a:	0750      	lsls	r0, r2, #29
    d14c:	f3c2 0180 	ubfx	r1, r2, #2, #1
    d150:	d4fa      	bmi.n	d148 <_oscctrl_init_referenced_generators+0x18>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    d152:	4b34      	ldr	r3, [pc, #208]	; (d224 <_oscctrl_init_referenced_generators+0xf4>)
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    d154:	4a34      	ldr	r2, [pc, #208]	; (d228 <_oscctrl_init_referenced_generators+0xf8>)
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    d156:	7719      	strb	r1, [r3, #28]
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    d158:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d15a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    d15e:	f3c2 1100 	ubfx	r1, r2, #4, #1
    d162:	06d2      	lsls	r2, r2, #27
    d164:	d4f9      	bmi.n	d15a <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    d166:	f883 1020 	strb.w	r1, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d16a:	4b2e      	ldr	r3, [pc, #184]	; (d224 <_oscctrl_init_referenced_generators+0xf4>)
    d16c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    d170:	0750      	lsls	r0, r2, #29
    d172:	d4fb      	bmi.n	d16c <_oscctrl_init_referenced_generators+0x3c>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    d174:	2202      	movs	r2, #2
    d176:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d178:	4b2a      	ldr	r3, [pc, #168]	; (d224 <_oscctrl_init_referenced_generators+0xf4>)
    d17a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    d17e:	0791      	lsls	r1, r2, #30
    d180:	d4fb      	bmi.n	d17a <_oscctrl_init_referenced_generators+0x4a>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    d182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    d184:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d186:	4b27      	ldr	r3, [pc, #156]	; (d224 <_oscctrl_init_referenced_generators+0xf4>)
    d188:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    d18c:	0712      	lsls	r2, r2, #28
    d18e:	d4fb      	bmi.n	d188 <_oscctrl_init_referenced_generators+0x58>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    d190:	2288      	movs	r2, #136	; 0x88
    d192:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    d196:	4a23      	ldr	r2, [pc, #140]	; (d224 <_oscctrl_init_referenced_generators+0xf4>)
    d198:	4613      	mov	r3, r2
    d19a:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    d19e:	0748      	lsls	r0, r1, #29
    d1a0:	d4fb      	bmi.n	d19a <_oscctrl_init_referenced_generators+0x6a>
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    d1a2:	491f      	ldr	r1, [pc, #124]	; (d220 <_oscctrl_init_referenced_generators+0xf0>)
    d1a4:	2042      	movs	r0, #66	; 0x42
    d1a6:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    d1aa:	2127      	movs	r1, #39	; 0x27
    d1ac:	6491      	str	r1, [r2, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    d1ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    d1b0:	f012 0f06 	tst.w	r2, #6
    d1b4:	d1fb      	bne.n	d1ae <_oscctrl_init_referenced_generators+0x7e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    d1b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d1ba:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    d1bc:	2202      	movs	r2, #2
    d1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    d1c2:	4b18      	ldr	r3, [pc, #96]	; (d224 <_oscctrl_init_referenced_generators+0xf4>)
    d1c4:	461a      	mov	r2, r3
    d1c6:	6d19      	ldr	r1, [r3, #80]	; 0x50
    d1c8:	0789      	lsls	r1, r1, #30
    d1ca:	d4fc      	bmi.n	d1c6 <_oscctrl_init_referenced_generators+0x96>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    d1cc:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    d1d0:	07db      	lsls	r3, r3, #31
    d1d2:	d521      	bpl.n	d218 <_oscctrl_init_referenced_generators+0xe8>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    d1d4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    d1d6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    d1da:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    d1de:	d1f9      	bne.n	d1d4 <_oscctrl_init_referenced_generators+0xa4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    d1e0:	4b10      	ldr	r3, [pc, #64]	; (d224 <_oscctrl_init_referenced_generators+0xf4>)
    d1e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    d1e4:	07d1      	lsls	r1, r2, #31
    d1e6:	d402      	bmi.n	d1ee <_oscctrl_init_referenced_generators+0xbe>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    d1e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    d1ea:	0792      	lsls	r2, r2, #30
    d1ec:	d5f9      	bpl.n	d1e2 <_oscctrl_init_referenced_generators+0xb2>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    d1ee:	4a0c      	ldr	r2, [pc, #48]	; (d220 <_oscctrl_init_referenced_generators+0xf0>)
    d1f0:	4611      	mov	r1, r2
    d1f2:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d1fc      	bne.n	d1f2 <_oscctrl_init_referenced_generators+0xc2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    d1f8:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    d1fa:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    d1fe:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    d202:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    d204:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    d208:	684a      	ldr	r2, [r1, #4]
    d20a:	421a      	tst	r2, r3
    d20c:	d1fc      	bne.n	d208 <_oscctrl_init_referenced_generators+0xd8>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    d20e:	4a04      	ldr	r2, [pc, #16]	; (d220 <_oscctrl_init_referenced_generators+0xf0>)
    d210:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    d212:	075b      	lsls	r3, r3, #29
    d214:	d4fc      	bmi.n	d210 <_oscctrl_init_referenced_generators+0xe0>
		;
#endif
	(void)hw;
}
    d216:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    d218:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    d21a:	05d8      	lsls	r0, r3, #23
    d21c:	d5fc      	bpl.n	d218 <_oscctrl_init_referenced_generators+0xe8>
    d21e:	e7df      	b.n	d1e0 <_oscctrl_init_referenced_generators+0xb0>
    d220:	40001c00 	.word	0x40001c00
    d224:	40001000 	.word	0x40001000
    d228:	04010000 	.word	0x04010000

0000d22c <_rand_sync_read_data>:

/**
 * \brief Read data bits
 */
static uint32_t _rand_sync_read_data(const struct _rand_sync_dev *dev, const uint8_t n_bits)
{
    d22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t r_bits = (dev->n_bits < 1) ? 32 : dev->n_bits;
    d230:	f890 8004 	ldrb.w	r8, [r0, #4]
    d234:	f8df 9034 	ldr.w	r9, [pc, #52]	; d26c <_rand_sync_read_data+0x40>
{
    d238:	4605      	mov	r5, r0
    d23a:	460f      	mov	r7, r1
	uint8_t r_bits = (dev->n_bits < 1) ? 32 : dev->n_bits;
    d23c:	f1b8 0f00 	cmp.w	r8, #0
    d240:	d00f      	beq.n	d262 <_rand_sync_read_data+0x36>
	if (r_bits < n_bits) {
    d242:	4588      	cmp	r8, r1
    d244:	d20d      	bcs.n	d262 <_rand_sync_read_data+0x36>
		uint8_t  i;
		uint32_t d = 0;
    d246:	2600      	movs	r6, #0
		/* Join read bits */
		for (i = 0; i < n_bits; i += r_bits) {
    d248:	4634      	mov	r4, r6
			d |= (uint32_t)(_rand_sync_read_one(dev) << i);
    d24a:	4628      	mov	r0, r5
    d24c:	47c8      	blx	r9
    d24e:	40a0      	lsls	r0, r4
		for (i = 0; i < n_bits; i += r_bits) {
    d250:	4444      	add	r4, r8
    d252:	b2e4      	uxtb	r4, r4
    d254:	42a7      	cmp	r7, r4
			d |= (uint32_t)(_rand_sync_read_one(dev) << i);
    d256:	ea46 0600 	orr.w	r6, r6, r0
		for (i = 0; i < n_bits; i += r_bits) {
    d25a:	d8f6      	bhi.n	d24a <_rand_sync_read_data+0x1e>
		}
		return d;
	} else {
		return _rand_sync_read_one(dev);
	}
}
    d25c:	4630      	mov	r0, r6
    d25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return _rand_sync_read_one(dev);
    d262:	4628      	mov	r0, r5
    d264:	464b      	mov	r3, r9
}
    d266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return _rand_sync_read_one(dev);
    d26a:	4718      	bx	r3
    d26c:	0000d371 	.word	0x0000d371

0000d270 <rand_sync_init>:
{
    d270:	b570      	push	{r4, r5, r6, lr}
	ASSERT(desc);
    d272:	4604      	mov	r4, r0
    d274:	3800      	subs	r0, #0
{
    d276:	460d      	mov	r5, r1
	ASSERT(desc);
    d278:	4b05      	ldr	r3, [pc, #20]	; (d290 <rand_sync_init+0x20>)
    d27a:	4906      	ldr	r1, [pc, #24]	; (d294 <rand_sync_init+0x24>)
    d27c:	bf18      	it	ne
    d27e:	2001      	movne	r0, #1
    d280:	2229      	movs	r2, #41	; 0x29
    d282:	4798      	blx	r3
	return _rand_sync_init(&desc->dev, hw);
    d284:	4629      	mov	r1, r5
    d286:	4620      	mov	r0, r4
    d288:	4b03      	ldr	r3, [pc, #12]	; (d298 <rand_sync_init+0x28>)
}
    d28a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _rand_sync_init(&desc->dev, hw);
    d28e:	4718      	bx	r3
    d290:	0000cb4d 	.word	0x0000cb4d
    d294:	00014f4b 	.word	0x00014f4b
    d298:	0000d2f1 	.word	0x0000d2f1

0000d29c <rand_sync_enable>:
{
    d29c:	b510      	push	{r4, lr}
	ASSERT(desc);
    d29e:	4604      	mov	r4, r0
    d2a0:	3800      	subs	r0, #0
    d2a2:	4b05      	ldr	r3, [pc, #20]	; (d2b8 <rand_sync_enable+0x1c>)
    d2a4:	4905      	ldr	r1, [pc, #20]	; (d2bc <rand_sync_enable+0x20>)
    d2a6:	bf18      	it	ne
    d2a8:	2001      	movne	r0, #1
    d2aa:	2236      	movs	r2, #54	; 0x36
    d2ac:	4798      	blx	r3
	return _rand_sync_enable(&desc->dev);
    d2ae:	4620      	mov	r0, r4
    d2b0:	4b03      	ldr	r3, [pc, #12]	; (d2c0 <rand_sync_enable+0x24>)
}
    d2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _rand_sync_enable(&desc->dev);
    d2b6:	4718      	bx	r3
    d2b8:	0000cb4d 	.word	0x0000cb4d
    d2bc:	00014f4b 	.word	0x00014f4b
    d2c0:	0000d339 	.word	0x0000d339

0000d2c4 <rand_sync_read8>:

uint8_t rand_sync_read8(const struct rand_sync_desc *const desc)
{
    d2c4:	b510      	push	{r4, lr}
	ASSERT(desc);
    d2c6:	4604      	mov	r4, r0
    d2c8:	3800      	subs	r0, #0
    d2ca:	bf18      	it	ne
    d2cc:	2001      	movne	r0, #1
    d2ce:	225b      	movs	r2, #91	; 0x5b
    d2d0:	4904      	ldr	r1, [pc, #16]	; (d2e4 <rand_sync_read8+0x20>)
    d2d2:	4b05      	ldr	r3, [pc, #20]	; (d2e8 <rand_sync_read8+0x24>)
    d2d4:	4798      	blx	r3
	return (uint8_t)_rand_sync_read_data(&desc->dev, 8);
    d2d6:	4b05      	ldr	r3, [pc, #20]	; (d2ec <rand_sync_read8+0x28>)
    d2d8:	2108      	movs	r1, #8
    d2da:	4620      	mov	r0, r4
    d2dc:	4798      	blx	r3
}
    d2de:	b2c0      	uxtb	r0, r0
    d2e0:	bd10      	pop	{r4, pc}
    d2e2:	bf00      	nop
    d2e4:	00014f4b 	.word	0x00014f4b
    d2e8:	0000cb4d 	.word	0x0000cb4d
    d2ec:	0000d22d 	.word	0x0000d22d

0000d2f0 <_rand_sync_init>:
	}
	return ERR_NONE;
}

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
    d2f0:	b538      	push	{r3, r4, r5, lr}
    d2f2:	460c      	mov	r4, r1
	int32_t rc;

	ASSERT(dev && hw);
    d2f4:	4605      	mov	r5, r0
    d2f6:	b110      	cbz	r0, d2fe <_rand_sync_init+0xe>
    d2f8:	1e08      	subs	r0, r1, #0
    d2fa:	bf18      	it	ne
    d2fc:	2001      	movne	r0, #1
    d2fe:	4b0c      	ldr	r3, [pc, #48]	; (d330 <_rand_sync_init+0x40>)
    d300:	490c      	ldr	r1, [pc, #48]	; (d334 <_rand_sync_init+0x44>)
    d302:	223d      	movs	r2, #61	; 0x3d
    d304:	4798      	blx	r3
}

static inline hri_trng_ctrla_reg_t hri_trng_get_CTRLA_reg(const void *const hw, hri_trng_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Trng *)hw)->CTRLA.reg;
    d306:	7823      	ldrb	r3, [r4, #0]
	if (hri_trng_get_CTRLA_reg(hw, TRNG_CTRLA_ENABLE)) {
    d308:	f013 0302 	ands.w	r3, r3, #2
    d30c:	d10c      	bne.n	d328 <_rand_sync_init+0x38>
	((Trng *)hw)->CTRLA.reg &= ~TRNG_CTRLA_RUNSTDBY;
    d30e:	7822      	ldrb	r2, [r4, #0]
    d310:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    d314:	7022      	strb	r2, [r4, #0]
}

static inline void hri_trng_clear_EVCTRL_DATARDYEO_bit(const void *const hw)
{
	TRNG_CRITICAL_SECTION_ENTER();
	((Trng *)hw)->EVCTRL.reg &= ~TRNG_EVCTRL_DATARDYEO;
    d316:	7922      	ldrb	r2, [r4, #4]
    d318:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    d31c:	7122      	strb	r2, [r4, #4]

	rc = _trng_init(hw);
	if (rc == ERR_NONE) {
		dev->prvt   = hw;
		dev->n_bits = 32;
    d31e:	2220      	movs	r2, #32
		dev->prvt   = hw;
    d320:	602c      	str	r4, [r5, #0]
		dev->n_bits = 32;
    d322:	712a      	strb	r2, [r5, #4]
	return ERR_NONE;
    d324:	4618      	mov	r0, r3
	}
	return rc;
}
    d326:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
    d328:	f06f 0010 	mvn.w	r0, #16
	return rc;
    d32c:	e7fb      	b.n	d326 <_rand_sync_init+0x36>
    d32e:	bf00      	nop
    d330:	0000cb4d 	.word	0x0000cb4d
    d334:	00014f66 	.word	0x00014f66

0000d338 <_rand_sync_enable>:
{
	_rand_sync_disable(dev);
}

int32_t _rand_sync_enable(struct _rand_sync_dev *const dev)
{
    d338:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev);
    d33a:	4604      	mov	r4, r0
    d33c:	3800      	subs	r0, #0
    d33e:	bf18      	it	ne
    d340:	2001      	movne	r0, #1
    d342:	4d09      	ldr	r5, [pc, #36]	; (d368 <_rand_sync_enable+0x30>)
    d344:	4909      	ldr	r1, [pc, #36]	; (d36c <_rand_sync_enable+0x34>)
    d346:	224e      	movs	r2, #78	; 0x4e
    d348:	47a8      	blx	r5
	ASSERT(dev->prvt);
    d34a:	6820      	ldr	r0, [r4, #0]
    d34c:	4907      	ldr	r1, [pc, #28]	; (d36c <_rand_sync_enable+0x34>)
    d34e:	3800      	subs	r0, #0
    d350:	bf18      	it	ne
    d352:	2001      	movne	r0, #1
    d354:	224f      	movs	r2, #79	; 0x4f
    d356:	47a8      	blx	r5

	hri_trng_set_CTRLA_ENABLE_bit(dev->prvt);
    d358:	6822      	ldr	r2, [r4, #0]
	((Trng *)hw)->CTRLA.reg |= TRNG_CTRLA_ENABLE;
    d35a:	7813      	ldrb	r3, [r2, #0]
    d35c:	f043 0302 	orr.w	r3, r3, #2
    d360:	7013      	strb	r3, [r2, #0]
	return ERR_NONE;
}
    d362:	2000      	movs	r0, #0
    d364:	bd38      	pop	{r3, r4, r5, pc}
    d366:	bf00      	nop
    d368:	0000cb4d 	.word	0x0000cb4d
    d36c:	00014f66 	.word	0x00014f66

0000d370 <_rand_sync_read_one>:
	(void)seed;
	return ERR_UNSUPPORTED_OP;
}

uint32_t _rand_sync_read_one(const struct _rand_sync_dev *const dev)
{
    d370:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev);
    d372:	4604      	mov	r4, r0
    d374:	3800      	subs	r0, #0
    d376:	4d0d      	ldr	r5, [pc, #52]	; (d3ac <_rand_sync_read_one+0x3c>)
    d378:	490d      	ldr	r1, [pc, #52]	; (d3b0 <_rand_sync_read_one+0x40>)
    d37a:	bf18      	it	ne
    d37c:	2001      	movne	r0, #1
    d37e:	2266      	movs	r2, #102	; 0x66
    d380:	47a8      	blx	r5
	ASSERT(dev->prvt);
    d382:	6820      	ldr	r0, [r4, #0]
    d384:	490a      	ldr	r1, [pc, #40]	; (d3b0 <_rand_sync_read_one+0x40>)
    d386:	3800      	subs	r0, #0
    d388:	bf18      	it	ne
    d38a:	2001      	movne	r0, #1
    d38c:	2267      	movs	r2, #103	; 0x67
    d38e:	47a8      	blx	r5
	ASSERT(hri_trng_get_CTRLA_reg(dev->prvt, TRNG_CTRLA_ENABLE));
    d390:	6823      	ldr	r3, [r4, #0]
    d392:	4907      	ldr	r1, [pc, #28]	; (d3b0 <_rand_sync_read_one+0x40>)
	tmp = ((Trng *)hw)->CTRLA.reg;
    d394:	7818      	ldrb	r0, [r3, #0]
    d396:	2268      	movs	r2, #104	; 0x68
    d398:	f3c0 0040 	ubfx	r0, r0, #1, #1
    d39c:	47a8      	blx	r5

	while (!hri_trng_get_INTFLAG_reg(dev->prvt, TRNG_INTFLAG_DATARDY)) {
    d39e:	6823      	ldr	r3, [r4, #0]
	tmp = ((Trng *)hw)->INTFLAG.reg;
    d3a0:	7a9a      	ldrb	r2, [r3, #10]
    d3a2:	07d2      	lsls	r2, r2, #31
    d3a4:	d5fc      	bpl.n	d3a0 <_rand_sync_read_one+0x30>
	return ((Trng *)hw)->DATA.reg;
    d3a6:	6a18      	ldr	r0, [r3, #32]
		/* Wait until data ready. */
	}
	return hri_trng_read_DATA_reg(dev->prvt);
}
    d3a8:	bd38      	pop	{r3, r4, r5, pc}
    d3aa:	bf00      	nop
    d3ac:	0000cb4d 	.word	0x0000cb4d
    d3b0:	00014f66 	.word	0x00014f66

0000d3b4 <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d3b4:	b430      	push	{r4, r5}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    d3b6:	780a      	ldrb	r2, [r1, #0]
    d3b8:	2a81      	cmp	r2, #129	; 0x81
    d3ba:	d11c      	bne.n	d3f6 <hid_keyboard_req+0x42>
    d3bc:	784b      	ldrb	r3, [r1, #1]
    d3be:	2b06      	cmp	r3, #6
    d3c0:	d131      	bne.n	d426 <hid_keyboard_req+0x72>
    d3c2:	4a1a      	ldr	r2, [pc, #104]	; (d42c <hid_keyboard_req+0x78>)
    d3c4:	888c      	ldrh	r4, [r1, #4]
    d3c6:	7b13      	ldrb	r3, [r2, #12]
    d3c8:	429c      	cmp	r4, r3
    d3ca:	d12c      	bne.n	d426 <hid_keyboard_req+0x72>
	switch (req->wValue >> 8) {
    d3cc:	884b      	ldrh	r3, [r1, #2]
    d3ce:	0a1b      	lsrs	r3, r3, #8
    d3d0:	2b21      	cmp	r3, #33	; 0x21
    d3d2:	d005      	beq.n	d3e0 <hid_keyboard_req+0x2c>
    d3d4:	2b22      	cmp	r3, #34	; 0x22
    d3d6:	d00a      	beq.n	d3ee <hid_keyboard_req+0x3a>
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
			switch (req->bRequest) {
    d3d8:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    d3dc:	bc30      	pop	{r4, r5}
    d3de:	4770      	bx	lr
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    d3e0:	6811      	ldr	r1, [r2, #0]
    d3e2:	780a      	ldrb	r2, [r1, #0]
    d3e4:	2300      	movs	r3, #0
				return usbdc_xfer(ep, NULL, 0, 0);
    d3e6:	4c12      	ldr	r4, [pc, #72]	; (d430 <hid_keyboard_req+0x7c>)
    d3e8:	46a4      	mov	ip, r4
}
    d3ea:	bc30      	pop	{r4, r5}
				return usbdc_xfer(ep, NULL, 0, 0);
    d3ec:	4760      	bx	ip
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    d3ee:	4911      	ldr	r1, [pc, #68]	; (d434 <hid_keyboard_req+0x80>)
    d3f0:	2300      	movs	r3, #0
    d3f2:	223b      	movs	r2, #59	; 0x3b
    d3f4:	e7f7      	b.n	d3e6 <hid_keyboard_req+0x32>
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    d3f6:	f3c2 1241 	ubfx	r2, r2, #5, #2
    d3fa:	2a01      	cmp	r2, #1
    d3fc:	d113      	bne.n	d426 <hid_keyboard_req+0x72>
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    d3fe:	4c0b      	ldr	r4, [pc, #44]	; (d42c <hid_keyboard_req+0x78>)
    d400:	888d      	ldrh	r5, [r1, #4]
    d402:	7b23      	ldrb	r3, [r4, #12]
    d404:	429d      	cmp	r5, r3
    d406:	d10e      	bne.n	d426 <hid_keyboard_req+0x72>
			switch (req->bRequest) {
    d408:	784b      	ldrb	r3, [r1, #1]
    d40a:	2b03      	cmp	r3, #3
    d40c:	d007      	beq.n	d41e <hid_keyboard_req+0x6a>
    d40e:	2b0b      	cmp	r3, #11
    d410:	d1e2      	bne.n	d3d8 <hid_keyboard_req+0x24>
				_hiddf_keyboard_funcd.protocol = req->wValue;
    d412:	884b      	ldrh	r3, [r1, #2]
    d414:	73e3      	strb	r3, [r4, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    d416:	2300      	movs	r3, #0
    d418:	461a      	mov	r2, r3
    d41a:	4619      	mov	r1, r3
    d41c:	e7e3      	b.n	d3e6 <hid_keyboard_req+0x32>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    d41e:	2300      	movs	r3, #0
    d420:	f104 010f 	add.w	r1, r4, #15
    d424:	e7df      	b.n	d3e6 <hid_keyboard_req+0x32>
			return ERR_NOT_FOUND;
    d426:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    d42a:	e7d7      	b.n	d3dc <hid_keyboard_req+0x28>
    d42c:	20000de4 	.word	0x20000de4
    d430:	0001133d 	.word	0x0001133d
    d434:	00014f7d 	.word	0x00014f7d

0000d438 <hid_keyboard_ctrl>:
	switch (ctrl) {
    d438:	2901      	cmp	r1, #1
{
    d43a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d43e:	4615      	mov	r5, r2
	switch (ctrl) {
    d440:	d04b      	beq.n	d4da <hid_keyboard_ctrl+0xa2>
    d442:	2902      	cmp	r1, #2
    d444:	d066      	beq.n	d514 <hid_keyboard_ctrl+0xdc>
    d446:	2900      	cmp	r1, #0
    d448:	d167      	bne.n	d51a <hid_keyboard_ctrl+0xe2>
	ifc = desc->sod;
    d44a:	6813      	ldr	r3, [r2, #0]
		return hid_keyboard_enable(drv, (struct usbd_descriptors *)param);
    d44c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (NULL == ifc) {
    d450:	b923      	cbnz	r3, d45c <hid_keyboard_ctrl+0x24>
		return ERR_NOT_FOUND;
    d452:	f06f 0409 	mvn.w	r4, #9
}
    d456:	4620      	mov	r0, r4
    d458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    d45c:	7959      	ldrb	r1, [r3, #5]
	ifc_desc.bInterfaceNumber = ifc[2];
    d45e:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    d460:	2903      	cmp	r1, #3
    d462:	d1f6      	bne.n	d452 <hid_keyboard_ctrl+0x1a>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    d464:	f898 100c 	ldrb.w	r1, [r8, #12]
    d468:	428a      	cmp	r2, r1
    d46a:	d059      	beq.n	d520 <hid_keyboard_ctrl+0xe8>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    d46c:	29ff      	cmp	r1, #255	; 0xff
    d46e:	d15a      	bne.n	d526 <hid_keyboard_ctrl+0xee>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    d470:	f888 200c 	strb.w	r2, [r8, #12]
	return (desc + usb_desc_len(desc));
    d474:	7818      	ldrb	r0, [r3, #0]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    d476:	6869      	ldr	r1, [r5, #4]
    d478:	4e2e      	ldr	r6, [pc, #184]	; (d534 <hid_keyboard_ctrl+0xfc>)
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d47a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d544 <hid_keyboard_ctrl+0x10c>
    d47e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d548 <hid_keyboard_ctrl+0x110>
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    d482:	4418      	add	r0, r3
    d484:	2221      	movs	r2, #33	; 0x21
    d486:	4b2c      	ldr	r3, [pc, #176]	; (d538 <hid_keyboard_ctrl+0x100>)
    d488:	4798      	blx	r3
    d48a:	2702      	movs	r7, #2
    d48c:	6030      	str	r0, [r6, #0]
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d48e:	682b      	ldr	r3, [r5, #0]
    d490:	6869      	ldr	r1, [r5, #4]
    d492:	7818      	ldrb	r0, [r3, #0]
    d494:	4418      	add	r0, r3
    d496:	4b29      	ldr	r3, [pc, #164]	; (d53c <hid_keyboard_ctrl+0x104>)
    d498:	4798      	blx	r3
		desc->sod = ep;
    d49a:	6028      	str	r0, [r5, #0]
		if (NULL != ep) {
    d49c:	2800      	cmp	r0, #0
    d49e:	d0d8      	beq.n	d452 <hid_keyboard_ctrl+0x1a>
	return (ptr[0] + (ptr[1] << 8));
    d4a0:	7941      	ldrb	r1, [r0, #5]
    d4a2:	7902      	ldrb	r2, [r0, #4]
			ep_desc.bEndpointAddress = ep[2];
    d4a4:	f890 a002 	ldrb.w	sl, [r0, #2]
    d4a8:	eb02 2201 	add.w	r2, r2, r1, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d4ac:	b292      	uxth	r2, r2
    d4ae:	78c1      	ldrb	r1, [r0, #3]
    d4b0:	4650      	mov	r0, sl
    d4b2:	47d8      	blx	fp
    d4b4:	4604      	mov	r4, r0
    d4b6:	2800      	cmp	r0, #0
    d4b8:	d138      	bne.n	d52c <hid_keyboard_ctrl+0xf4>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d4ba:	f01a 0f80 	tst.w	sl, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    d4be:	bf14      	ite	ne
    d4c0:	f888 a00d 	strbne.w	sl, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    d4c4:	f888 a00e 	strbeq.w	sl, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    d4c8:	4650      	mov	r0, sl
    d4ca:	47c8      	blx	r9
	for (i = 0; i < 2; i++) {
    d4cc:	2f01      	cmp	r7, #1
    d4ce:	d102      	bne.n	d4d6 <hid_keyboard_ctrl+0x9e>
	_hiddf_keyboard_funcd.protocol = 1;
    d4d0:	73f7      	strb	r7, [r6, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    d4d2:	7437      	strb	r7, [r6, #16]
	return ERR_NONE;
    d4d4:	e7bf      	b.n	d456 <hid_keyboard_ctrl+0x1e>
    d4d6:	2701      	movs	r7, #1
    d4d8:	e7d9      	b.n	d48e <hid_keyboard_ctrl+0x56>
		return hid_keyboard_disable(drv, (struct usbd_descriptors *)param);
    d4da:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    d4dc:	b11a      	cbz	r2, d4e6 <hid_keyboard_ctrl+0xae>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d4de:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    d4e0:	795b      	ldrb	r3, [r3, #5]
    d4e2:	2b03      	cmp	r3, #3
    d4e4:	d1b5      	bne.n	d452 <hid_keyboard_ctrl+0x1a>
	if (func_data->func_iface != 0xFF) {
    d4e6:	7b23      	ldrb	r3, [r4, #12]
	if (func_data->func_ep_in != 0xFF) {
    d4e8:	7b60      	ldrb	r0, [r4, #13]
	if (func_data->func_iface != 0xFF) {
    d4ea:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    d4ec:	bf1c      	itt	ne
    d4ee:	23ff      	movne	r3, #255	; 0xff
    d4f0:	7323      	strbne	r3, [r4, #12]
	if (func_data->func_ep_in != 0xFF) {
    d4f2:	28ff      	cmp	r0, #255	; 0xff
    d4f4:	d003      	beq.n	d4fe <hid_keyboard_ctrl+0xc6>
		usb_d_ep_deinit(func_data->func_ep_in);
    d4f6:	4b12      	ldr	r3, [pc, #72]	; (d540 <hid_keyboard_ctrl+0x108>)
    d4f8:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    d4fa:	23ff      	movs	r3, #255	; 0xff
    d4fc:	7363      	strb	r3, [r4, #13]
	if (func_data->func_ep_out != 0xFF) {
    d4fe:	7ba0      	ldrb	r0, [r4, #14]
    d500:	28ff      	cmp	r0, #255	; 0xff
    d502:	d003      	beq.n	d50c <hid_keyboard_ctrl+0xd4>
		usb_d_ep_deinit(func_data->func_ep_out);
    d504:	4b0e      	ldr	r3, [pc, #56]	; (d540 <hid_keyboard_ctrl+0x108>)
    d506:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    d508:	23ff      	movs	r3, #255	; 0xff
    d50a:	73a3      	strb	r3, [r4, #14]
	_hiddf_keyboard_funcd.enabled = false;
    d50c:	4b09      	ldr	r3, [pc, #36]	; (d534 <hid_keyboard_ctrl+0xfc>)
    d50e:	2400      	movs	r4, #0
    d510:	741c      	strb	r4, [r3, #16]
	return ERR_NONE;
    d512:	e7a0      	b.n	d456 <hid_keyboard_ctrl+0x1e>
		return ERR_UNSUPPORTED_OP;
    d514:	f06f 041a 	mvn.w	r4, #26
    d518:	e79d      	b.n	d456 <hid_keyboard_ctrl+0x1e>
	switch (ctrl) {
    d51a:	f06f 040c 	mvn.w	r4, #12
    d51e:	e79a      	b.n	d456 <hid_keyboard_ctrl+0x1e>
			return ERR_ALREADY_INITIALIZED;
    d520:	f06f 0411 	mvn.w	r4, #17
    d524:	e797      	b.n	d456 <hid_keyboard_ctrl+0x1e>
			return ERR_NO_RESOURCE;
    d526:	f06f 041b 	mvn.w	r4, #27
    d52a:	e794      	b.n	d456 <hid_keyboard_ctrl+0x1e>
				return ERR_NOT_INITIALIZED;
    d52c:	f06f 0413 	mvn.w	r4, #19
    d530:	e791      	b.n	d456 <hid_keyboard_ctrl+0x1e>
    d532:	bf00      	nop
    d534:	20000de4 	.word	0x20000de4
    d538:	0000adcd 	.word	0x0000adcd
    d53c:	0000ade7 	.word	0x0000ade7
    d540:	0000e0b5 	.word	0x0000e0b5
    d544:	0000e051 	.word	0x0000e051
    d548:	0000e0e1 	.word	0x0000e0e1

0000d54c <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    d54c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    d54e:	4b0a      	ldr	r3, [pc, #40]	; (d578 <hiddf_keyboard_init+0x2c>)
    d550:	4798      	blx	r3
    d552:	2801      	cmp	r0, #1
    d554:	d80c      	bhi.n	d570 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    d556:	4809      	ldr	r0, [pc, #36]	; (d57c <hiddf_keyboard_init+0x30>)
    d558:	4b09      	ldr	r3, [pc, #36]	; (d580 <hiddf_keyboard_init+0x34>)
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    d55a:	e9c0 3006 	strd	r3, r0, [r0, #24]

	usbdc_register_function(&_hiddf_keyboard);
    d55e:	4b09      	ldr	r3, [pc, #36]	; (d584 <hiddf_keyboard_init+0x38>)
    d560:	3014      	adds	r0, #20
    d562:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    d564:	2001      	movs	r0, #1
    d566:	4908      	ldr	r1, [pc, #32]	; (d588 <hiddf_keyboard_init+0x3c>)
    d568:	4b08      	ldr	r3, [pc, #32]	; (d58c <hiddf_keyboard_init+0x40>)
    d56a:	4798      	blx	r3
	return ERR_NONE;
    d56c:	2000      	movs	r0, #0
}
    d56e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    d570:	f06f 0010 	mvn.w	r0, #16
    d574:	e7fb      	b.n	d56e <hiddf_keyboard_init+0x22>
    d576:	bf00      	nop
    d578:	00011775 	.word	0x00011775
    d57c:	20000de4 	.word	0x20000de4
    d580:	0000d439 	.word	0x0000d439
    d584:	0001171d 	.word	0x0001171d
    d588:	20000500 	.word	0x20000500
    d58c:	00011695 	.word	0x00011695

0000d590 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    d590:	b470      	push	{r4, r5, r6}
	return _hiddf_keyboard_funcd.enabled;
    d592:	4c20      	ldr	r4, [pc, #128]	; (d614 <hiddf_keyboard_keys_state_change+0x84>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    d594:	7c23      	ldrb	r3, [r4, #16]
    d596:	2b00      	cmp	r3, #0
    d598:	d037      	beq.n	d60a <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    d59a:	2300      	movs	r3, #0
    d59c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	modifier_keys = 0;
    d5a0:	461a      	mov	r2, r3

	for (i = 0; i < keys_count; i++) {
		if (true == keys_desc[i].b_modifier) {
    d5a2:	1c46      	adds	r6, r0, #1
	for (i = 0; i < keys_count; i++) {
    d5a4:	b2dd      	uxtb	r5, r3
    d5a6:	42a9      	cmp	r1, r5
    d5a8:	d814      	bhi.n	d5d4 <hiddf_keyboard_keys_state_change+0x44>
			modifier_keys++;
		}
	}

	regular_keys = keys_count - modifier_keys;
    d5aa:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    d5ac:	b2d2      	uxtb	r2, r2
    d5ae:	2a06      	cmp	r2, #6
    d5b0:	d818      	bhi.n	d5e4 <hiddf_keyboard_keys_state_change+0x54>
    d5b2:	2500      	movs	r5, #0
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
	} else {
		i = 2;
    d5b4:	2302      	movs	r3, #2
		for (j = 0; j < keys_count; j++) {
    d5b6:	b2ea      	uxtb	r2, r5
    d5b8:	4291      	cmp	r1, r2
    d5ba:	d919      	bls.n	d5f0 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    d5bc:	7882      	ldrb	r2, [r0, #2]
    d5be:	2a01      	cmp	r2, #1
    d5c0:	d105      	bne.n	d5ce <hiddf_keyboard_keys_state_change+0x3e>
				if (true == keys_desc[j].b_modifier) {
    d5c2:	7846      	ldrb	r6, [r0, #1]
    d5c4:	7802      	ldrb	r2, [r0, #0]
    d5c6:	b1de      	cbz	r6, d600 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    d5c8:	7926      	ldrb	r6, [r4, #4]
    d5ca:	4332      	orrs	r2, r6
    d5cc:	7122      	strb	r2, [r4, #4]
		for (j = 0; j < keys_count; j++) {
    d5ce:	3501      	adds	r5, #1
    d5d0:	3003      	adds	r0, #3
    d5d2:	e7f0      	b.n	d5b6 <hiddf_keyboard_keys_state_change+0x26>
		if (true == keys_desc[i].b_modifier) {
    d5d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    d5d8:	5d75      	ldrb	r5, [r6, r5]
    d5da:	b10d      	cbz	r5, d5e0 <hiddf_keyboard_keys_state_change+0x50>
			modifier_keys++;
    d5dc:	3201      	adds	r2, #1
    d5de:	b2d2      	uxtb	r2, r2
	for (i = 0; i < keys_count; i++) {
    d5e0:	3301      	adds	r3, #1
    d5e2:	e7df      	b.n	d5a4 <hiddf_keyboard_keys_state_change+0x14>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    d5e4:	4a0c      	ldr	r2, [pc, #48]	; (d618 <hiddf_keyboard_keys_state_change+0x88>)
    d5e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d5ea:	f8c4 3006 	str.w	r3, [r4, #6]
    d5ee:	8093      	strh	r3, [r2, #4]
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    d5f0:	7b60      	ldrb	r0, [r4, #13]
    d5f2:	4c0a      	ldr	r4, [pc, #40]	; (d61c <hiddf_keyboard_keys_state_change+0x8c>)
    d5f4:	490a      	ldr	r1, [pc, #40]	; (d620 <hiddf_keyboard_keys_state_change+0x90>)
    d5f6:	46a4      	mov	ip, r4
    d5f8:	2300      	movs	r3, #0
}
    d5fa:	bc70      	pop	{r4, r5, r6}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    d5fc:	2208      	movs	r2, #8
    d5fe:	4760      	bx	ip
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    d600:	1c5e      	adds	r6, r3, #1
    d602:	4423      	add	r3, r4
    d604:	711a      	strb	r2, [r3, #4]
    d606:	b2f3      	uxtb	r3, r6
    d608:	e7e1      	b.n	d5ce <hiddf_keyboard_keys_state_change+0x3e>
}
    d60a:	f06f 0010 	mvn.w	r0, #16
    d60e:	bc70      	pop	{r4, r5, r6}
    d610:	4770      	bx	lr
    d612:	bf00      	nop
    d614:	20000de4 	.word	0x20000de4
    d618:	20000dea 	.word	0x20000dea
    d61c:	0001133d 	.word	0x0001133d
    d620:	20000de8 	.word	0x20000de8

0000d624 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    d624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d628:	460e      	mov	r6, r1
    d62a:	4615      	mov	r5, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    d62c:	4604      	mov	r4, r0
    d62e:	b118      	cbz	r0, d638 <usart_sync_write+0x14>
    d630:	b329      	cbz	r1, d67e <usart_sync_write+0x5a>
    d632:	1e10      	subs	r0, r2, #0
    d634:	bf18      	it	ne
    d636:	2001      	movne	r0, #1
    d638:	4912      	ldr	r1, [pc, #72]	; (d684 <usart_sync_write+0x60>)
    d63a:	4b13      	ldr	r3, [pc, #76]	; (d688 <usart_sync_write+0x64>)
	while (!_usart_sync_is_ready_to_send(&descr->device))
    d63c:	4f13      	ldr	r7, [pc, #76]	; (d68c <usart_sync_write+0x68>)
	ASSERT(io_descr && buf && length);
    d63e:	22f1      	movs	r2, #241	; 0xf1
    d640:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    d642:	3408      	adds	r4, #8
    d644:	46b9      	mov	r9, r7
    d646:	4620      	mov	r0, r4
    d648:	47b8      	blx	r7
    d64a:	2800      	cmp	r0, #0
    d64c:	d0fb      	beq.n	d646 <usart_sync_write+0x22>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    d64e:	f8df 8044 	ldr.w	r8, [pc, #68]	; d694 <usart_sync_write+0x70>
	uint32_t                      offset = 0;
    d652:	2700      	movs	r7, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
    d654:	5df1      	ldrb	r1, [r6, r7]
    d656:	4620      	mov	r0, r4
    d658:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
    d65a:	4620      	mov	r0, r4
    d65c:	47c8      	blx	r9
    d65e:	2800      	cmp	r0, #0
    d660:	d0fb      	beq.n	d65a <usart_sync_write+0x36>
			;
	} while (++offset < length);
    d662:	3701      	adds	r7, #1
    d664:	42bd      	cmp	r5, r7
    d666:	d8f5      	bhi.n	d654 <usart_sync_write+0x30>
    d668:	2d00      	cmp	r5, #0
	while (!_usart_sync_is_transmit_done(&descr->device))
    d66a:	4e09      	ldr	r6, [pc, #36]	; (d690 <usart_sync_write+0x6c>)
    d66c:	bf08      	it	eq
    d66e:	2501      	moveq	r5, #1
    d670:	4620      	mov	r0, r4
    d672:	47b0      	blx	r6
    d674:	2800      	cmp	r0, #0
    d676:	d0fb      	beq.n	d670 <usart_sync_write+0x4c>
		;
	return (int32_t)offset;
}
    d678:	4628      	mov	r0, r5
    d67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    d67e:	4608      	mov	r0, r1
    d680:	e7da      	b.n	d638 <usart_sync_write+0x14>
    d682:	bf00      	nop
    d684:	00014fb8 	.word	0x00014fb8
    d688:	0000cb4d 	.word	0x0000cb4d
    d68c:	000102ed 	.word	0x000102ed
    d690:	000102f7 	.word	0x000102f7
    d694:	000102d9 	.word	0x000102d9

0000d698 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    d698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d69c:	460e      	mov	r6, r1
    d69e:	4615      	mov	r5, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    d6a0:	4604      	mov	r4, r0
    d6a2:	b118      	cbz	r0, d6ac <usart_sync_read+0x14>
    d6a4:	b1e9      	cbz	r1, d6e2 <usart_sync_read+0x4a>
    d6a6:	1e10      	subs	r0, r2, #0
    d6a8:	bf18      	it	ne
    d6aa:	2001      	movne	r0, #1
    d6ac:	490e      	ldr	r1, [pc, #56]	; (d6e8 <usart_sync_read+0x50>)
    d6ae:	4b0f      	ldr	r3, [pc, #60]	; (d6ec <usart_sync_read+0x54>)
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    d6b0:	f8df 903c 	ldr.w	r9, [pc, #60]	; d6f0 <usart_sync_read+0x58>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    d6b4:	f8df 803c 	ldr.w	r8, [pc, #60]	; d6f4 <usart_sync_read+0x5c>
	ASSERT(io_descr && buf && length);
    d6b8:	f44f 7286 	mov.w	r2, #268	; 0x10c
    d6bc:	4798      	blx	r3
	uint32_t                      offset = 0;
    d6be:	2700      	movs	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
    d6c0:	3408      	adds	r4, #8
    d6c2:	4620      	mov	r0, r4
    d6c4:	47c8      	blx	r9
    d6c6:	2800      	cmp	r0, #0
    d6c8:	d0fb      	beq.n	d6c2 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    d6ca:	4620      	mov	r0, r4
    d6cc:	47c0      	blx	r8
    d6ce:	55f0      	strb	r0, [r6, r7]
	} while (++offset < length);
    d6d0:	3701      	adds	r7, #1
    d6d2:	42bd      	cmp	r5, r7
    d6d4:	d8f5      	bhi.n	d6c2 <usart_sync_read+0x2a>

	return (int32_t)offset;
    d6d6:	2d00      	cmp	r5, #0
}
    d6d8:	bf14      	ite	ne
    d6da:	4628      	movne	r0, r5
    d6dc:	2001      	moveq	r0, #1
    d6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    d6e2:	4608      	mov	r0, r1
    d6e4:	e7e2      	b.n	d6ac <usart_sync_read+0x14>
    d6e6:	bf00      	nop
    d6e8:	00014fb8 	.word	0x00014fb8
    d6ec:	0000cb4d 	.word	0x0000cb4d
    d6f0:	00010301 	.word	0x00010301
    d6f4:	000102e5 	.word	0x000102e5

0000d6f8 <usart_sync_init>:
{
    d6f8:	b538      	push	{r3, r4, r5, lr}
    d6fa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    d6fc:	4604      	mov	r4, r0
    d6fe:	b110      	cbz	r0, d706 <usart_sync_init+0xe>
    d700:	1e08      	subs	r0, r1, #0
    d702:	bf18      	it	ne
    d704:	2001      	movne	r0, #1
    d706:	4907      	ldr	r1, [pc, #28]	; (d724 <usart_sync_init+0x2c>)
    d708:	4b07      	ldr	r3, [pc, #28]	; (d728 <usart_sync_init+0x30>)
    d70a:	2234      	movs	r2, #52	; 0x34
    d70c:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    d70e:	4b07      	ldr	r3, [pc, #28]	; (d72c <usart_sync_init+0x34>)
    d710:	4629      	mov	r1, r5
    d712:	f104 0008 	add.w	r0, r4, #8
    d716:	4798      	blx	r3
	if (init_status) {
    d718:	b918      	cbnz	r0, d722 <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    d71a:	4b05      	ldr	r3, [pc, #20]	; (d730 <usart_sync_init+0x38>)
    d71c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    d71e:	4b05      	ldr	r3, [pc, #20]	; (d734 <usart_sync_init+0x3c>)
    d720:	6023      	str	r3, [r4, #0]
}
    d722:	bd38      	pop	{r3, r4, r5, pc}
    d724:	00014fb8 	.word	0x00014fb8
    d728:	0000cb4d 	.word	0x0000cb4d
    d72c:	000101f5 	.word	0x000101f5
    d730:	0000d699 	.word	0x0000d699
    d734:	0000d625 	.word	0x0000d625

0000d738 <usart_sync_enable>:
{
    d738:	b510      	push	{r4, lr}
	ASSERT(descr);
    d73a:	4604      	mov	r4, r0
    d73c:	3800      	subs	r0, #0
    d73e:	bf18      	it	ne
    d740:	2001      	movne	r0, #1
    d742:	4905      	ldr	r1, [pc, #20]	; (d758 <usart_sync_enable+0x20>)
    d744:	4b05      	ldr	r3, [pc, #20]	; (d75c <usart_sync_enable+0x24>)
    d746:	2253      	movs	r2, #83	; 0x53
    d748:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    d74a:	f104 0008 	add.w	r0, r4, #8
    d74e:	4b04      	ldr	r3, [pc, #16]	; (d760 <usart_sync_enable+0x28>)
    d750:	4798      	blx	r3
}
    d752:	2000      	movs	r0, #0
    d754:	bd10      	pop	{r4, pc}
    d756:	bf00      	nop
    d758:	00014fb8 	.word	0x00014fb8
    d75c:	0000cb4d 	.word	0x0000cb4d
    d760:	00010299 	.word	0x00010299

0000d764 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    d764:	4b01      	ldr	r3, [pc, #4]	; (d76c <_mclk_init+0x8>)
    d766:	2201      	movs	r2, #1
    d768:	715a      	strb	r2, [r3, #5]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
}
    d76a:	4770      	bx	lr
    d76c:	40000800 	.word	0x40000800

0000d770 <hri_gclk_wait_for_sync.constprop.0>:
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    d770:	4903      	ldr	r1, [pc, #12]	; (d780 <hri_gclk_wait_for_sync.constprop.0+0x10>)
    d772:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    d776:	684a      	ldr	r2, [r1, #4]
    d778:	421a      	tst	r2, r3
    d77a:	d1fc      	bne.n	d776 <hri_gclk_wait_for_sync.constprop.0+0x6>
}
    d77c:	4770      	bx	lr
    d77e:	bf00      	nop
    d780:	40001c00 	.word	0x40001c00

0000d784 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    d784:	b510      	push	{r4, lr}

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    d786:	07c4      	lsls	r4, r0, #31
    d788:	d504      	bpl.n	d794 <_gclk_init_generators_by_fref+0x10>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    d78a:	4b0e      	ldr	r3, [pc, #56]	; (d7c4 <_gclk_init_generators_by_fref+0x40>)
    d78c:	4a0e      	ldr	r2, [pc, #56]	; (d7c8 <_gclk_init_generators_by_fref+0x44>)
    d78e:	621a      	str	r2, [r3, #32]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    d790:	4b0e      	ldr	r3, [pc, #56]	; (d7cc <_gclk_init_generators_by_fref+0x48>)
    d792:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    d794:	0781      	lsls	r1, r0, #30
    d796:	d504      	bpl.n	d7a2 <_gclk_init_generators_by_fref+0x1e>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    d798:	4b0a      	ldr	r3, [pc, #40]	; (d7c4 <_gclk_init_generators_by_fref+0x40>)
    d79a:	4a0d      	ldr	r2, [pc, #52]	; (d7d0 <_gclk_init_generators_by_fref+0x4c>)
    d79c:	625a      	str	r2, [r3, #36]	; 0x24
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    d79e:	4b0b      	ldr	r3, [pc, #44]	; (d7cc <_gclk_init_generators_by_fref+0x48>)
    d7a0:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    d7a2:	0742      	lsls	r2, r0, #29
    d7a4:	d504      	bpl.n	d7b0 <_gclk_init_generators_by_fref+0x2c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    d7a6:	4b07      	ldr	r3, [pc, #28]	; (d7c4 <_gclk_init_generators_by_fref+0x40>)
    d7a8:	4a0a      	ldr	r2, [pc, #40]	; (d7d4 <_gclk_init_generators_by_fref+0x50>)
    d7aa:	629a      	str	r2, [r3, #40]	; 0x28
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    d7ac:	4b07      	ldr	r3, [pc, #28]	; (d7cc <_gclk_init_generators_by_fref+0x48>)
    d7ae:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    d7b0:	0703      	lsls	r3, r0, #28
    d7b2:	d506      	bpl.n	d7c2 <_gclk_init_generators_by_fref+0x3e>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    d7b4:	4b03      	ldr	r3, [pc, #12]	; (d7c4 <_gclk_init_generators_by_fref+0x40>)
    d7b6:	4a08      	ldr	r2, [pc, #32]	; (d7d8 <_gclk_init_generators_by_fref+0x54>)
    d7b8:	62da      	str	r2, [r3, #44]	; 0x2c
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    d7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    d7be:	4b03      	ldr	r3, [pc, #12]	; (d7cc <_gclk_init_generators_by_fref+0x48>)
    d7c0:	4718      	bx	r3
    d7c2:	bd10      	pop	{r4, pc}
    d7c4:	40001c00 	.word	0x40001c00
    d7c8:	00010108 	.word	0x00010108
    d7cc:	0000d771 	.word	0x0000d771
    d7d0:	00010106 	.word	0x00010106
    d7d4:	00100106 	.word	0x00100106
    d7d8:	00010104 	.word	0x00010104

0000d7dc <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    d7dc:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    d7de:	4c04      	ldr	r4, [pc, #16]	; (d7f0 <stdio_redirect_init+0x14>)
    d7e0:	4b04      	ldr	r3, [pc, #16]	; (d7f4 <stdio_redirect_init+0x18>)
    d7e2:	4620      	mov	r0, r4
    d7e4:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    d7e6:	4620      	mov	r0, r4
    d7e8:	4b03      	ldr	r3, [pc, #12]	; (d7f8 <stdio_redirect_init+0x1c>)
}
    d7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stdio_io_init(&GRID_AUX.io);
    d7ee:	4718      	bx	r3
    d7f0:	20014b00 	.word	0x20014b00
    d7f4:	0000d739 	.word	0x0000d739
    d7f8:	0000ac19 	.word	0x0000ac19

0000d7fc <flash_ready>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    d7fc:	6943      	ldr	r3, [r0, #20]
    d7fe:	b103      	cbz	r3, d802 <flash_ready+0x6>
		descr->callbacks.cb_ready(descr);
    d800:	4718      	bx	r3
	}
}
    d802:	4770      	bx	lr

0000d804 <flash_error>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    d804:	6983      	ldr	r3, [r0, #24]
    d806:	b103      	cbz	r3, d80a <flash_error+0x6>
		descr->callbacks.cb_error(descr);
    d808:	4718      	bx	r3
	}
}
    d80a:	4770      	bx	lr

0000d80c <flash_is_address_aligned>:
{
    d80c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(flash);
    d80e:	4604      	mov	r4, r0
    d810:	3800      	subs	r0, #0
    d812:	bf18      	it	ne
    d814:	2001      	movne	r0, #1
{
    d816:	460d      	mov	r5, r1
	ASSERT(flash);
    d818:	f240 1217 	movw	r2, #279	; 0x117
    d81c:	4906      	ldr	r1, [pc, #24]	; (d838 <flash_is_address_aligned+0x2c>)
    d81e:	4b07      	ldr	r3, [pc, #28]	; (d83c <flash_is_address_aligned+0x30>)
    d820:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    d822:	4b07      	ldr	r3, [pc, #28]	; (d840 <flash_is_address_aligned+0x34>)
    d824:	4620      	mov	r0, r4
    d826:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    d828:	3801      	subs	r0, #1
    d82a:	4228      	tst	r0, r5
}
    d82c:	bf14      	ite	ne
    d82e:	f06f 000d 	mvnne.w	r0, #13
    d832:	2000      	moveq	r0, #0
    d834:	bd38      	pop	{r3, r4, r5, pc}
    d836:	bf00      	nop
    d838:	00014fd4 	.word	0x00014fd4
    d83c:	0000cb4d 	.word	0x0000cb4d
    d840:	0000b4b5 	.word	0x0000b4b5

0000d844 <flash_init>:
{
    d844:	b538      	push	{r3, r4, r5, lr}
    d846:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    d848:	4604      	mov	r4, r0
    d84a:	b110      	cbz	r0, d852 <flash_init+0xe>
    d84c:	1e08      	subs	r0, r1, #0
    d84e:	bf18      	it	ne
    d850:	2001      	movne	r0, #1
    d852:	4907      	ldr	r1, [pc, #28]	; (d870 <flash_init+0x2c>)
    d854:	4b07      	ldr	r3, [pc, #28]	; (d874 <flash_init+0x30>)
    d856:	2238      	movs	r2, #56	; 0x38
    d858:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    d85a:	4b07      	ldr	r3, [pc, #28]	; (d878 <flash_init+0x34>)
    d85c:	4629      	mov	r1, r5
    d85e:	4620      	mov	r0, r4
    d860:	4798      	blx	r3
	if (rc) {
    d862:	b918      	cbnz	r0, d86c <flash_init+0x28>
	flash->dev.flash_cb.ready_cb = flash_ready;
    d864:	4b05      	ldr	r3, [pc, #20]	; (d87c <flash_init+0x38>)
    d866:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    d868:	4b05      	ldr	r3, [pc, #20]	; (d880 <flash_init+0x3c>)
    d86a:	6063      	str	r3, [r4, #4]
}
    d86c:	bd38      	pop	{r3, r4, r5, pc}
    d86e:	bf00      	nop
    d870:	00014fd4 	.word	0x00014fd4
    d874:	0000cb4d 	.word	0x0000cb4d
    d878:	0000b445 	.word	0x0000b445
    d87c:	0000d7fd 	.word	0x0000d7fd
    d880:	0000d805 	.word	0x0000d805

0000d884 <flash_read>:
{
    d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d888:	460d      	mov	r5, r1
    d88a:	4616      	mov	r6, r2
    d88c:	461f      	mov	r7, r3
	ASSERT(flash && buffer && length);
    d88e:	4604      	mov	r4, r0
    d890:	b118      	cbz	r0, d89a <flash_read+0x16>
    d892:	b1ea      	cbz	r2, d8d0 <flash_read+0x4c>
    d894:	1e18      	subs	r0, r3, #0
    d896:	bf18      	it	ne
    d898:	2001      	movne	r0, #1
    d89a:	4910      	ldr	r1, [pc, #64]	; (d8dc <flash_read+0x58>)
    d89c:	4b10      	ldr	r3, [pc, #64]	; (d8e0 <flash_read+0x5c>)
    d89e:	2256      	movs	r2, #86	; 0x56
    d8a0:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    d8a2:	4b10      	ldr	r3, [pc, #64]	; (d8e4 <flash_read+0x60>)
    d8a4:	4620      	mov	r0, r4
    d8a6:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    d8a8:	4b0f      	ldr	r3, [pc, #60]	; (d8e8 <flash_read+0x64>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    d8aa:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    d8ac:	4620      	mov	r0, r4
    d8ae:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    d8b0:	fb00 f008 	mul.w	r0, r0, r8
    d8b4:	42a8      	cmp	r0, r5
    d8b6:	d30d      	bcc.n	d8d4 <flash_read+0x50>
    d8b8:	197b      	adds	r3, r7, r5
    d8ba:	4298      	cmp	r0, r3
    d8bc:	d30a      	bcc.n	d8d4 <flash_read+0x50>
	_flash_read(&flash->dev, src_addr, buffer, length);
    d8be:	4620      	mov	r0, r4
    d8c0:	463b      	mov	r3, r7
    d8c2:	4c0a      	ldr	r4, [pc, #40]	; (d8ec <flash_read+0x68>)
    d8c4:	4632      	mov	r2, r6
    d8c6:	4629      	mov	r1, r5
    d8c8:	47a0      	blx	r4
	return ERR_NONE;
    d8ca:	2000      	movs	r0, #0
}
    d8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(flash && buffer && length);
    d8d0:	4610      	mov	r0, r2
    d8d2:	e7e2      	b.n	d89a <flash_read+0x16>
		return ERR_BAD_ADDRESS;
    d8d4:	f06f 000d 	mvn.w	r0, #13
    d8d8:	e7f8      	b.n	d8cc <flash_read+0x48>
    d8da:	bf00      	nop
    d8dc:	00014fd4 	.word	0x00014fd4
    d8e0:	0000cb4d 	.word	0x0000cb4d
    d8e4:	0000b4b5 	.word	0x0000b4b5
    d8e8:	0000b4bb 	.word	0x0000b4bb
    d8ec:	0000b4c3 	.word	0x0000b4c3

0000d8f0 <flash_write>:
{
    d8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8f4:	460e      	mov	r6, r1
    d8f6:	4617      	mov	r7, r2
    d8f8:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    d8fa:	4605      	mov	r5, r0
    d8fc:	b118      	cbz	r0, d906 <flash_write+0x16>
    d8fe:	b31a      	cbz	r2, d948 <flash_write+0x58>
    d900:	1e18      	subs	r0, r3, #0
    d902:	bf18      	it	ne
    d904:	2001      	movne	r0, #1
    d906:	4914      	ldr	r1, [pc, #80]	; (d958 <flash_write+0x68>)
    d908:	4b14      	ldr	r3, [pc, #80]	; (d95c <flash_write+0x6c>)
    d90a:	226a      	movs	r2, #106	; 0x6a
    d90c:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    d90e:	4b14      	ldr	r3, [pc, #80]	; (d960 <flash_write+0x70>)
    d910:	4628      	mov	r0, r5
    d912:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    d914:	4b13      	ldr	r3, [pc, #76]	; (d964 <flash_write+0x74>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    d916:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    d918:	4628      	mov	r0, r5
    d91a:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    d91c:	4360      	muls	r0, r4
    d91e:	42b0      	cmp	r0, r6
    d920:	d314      	bcc.n	d94c <flash_write+0x5c>
    d922:	eb08 0306 	add.w	r3, r8, r6
    d926:	4298      	cmp	r0, r3
    d928:	d310      	bcc.n	d94c <flash_write+0x5c>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    d92a:	4b0f      	ldr	r3, [pc, #60]	; (d968 <flash_write+0x78>)
    d92c:	4631      	mov	r1, r6
    d92e:	4628      	mov	r0, r5
    d930:	4798      	blx	r3
    d932:	4604      	mov	r4, r0
    d934:	b968      	cbnz	r0, d952 <flash_write+0x62>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    d936:	4628      	mov	r0, r5
    d938:	4643      	mov	r3, r8
    d93a:	4d0c      	ldr	r5, [pc, #48]	; (d96c <flash_write+0x7c>)
    d93c:	463a      	mov	r2, r7
    d93e:	4631      	mov	r1, r6
    d940:	47a8      	blx	r5
	return ERR_NONE;
    d942:	4620      	mov	r0, r4
}
    d944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(flash && buffer && length);
    d948:	4610      	mov	r0, r2
    d94a:	e7dc      	b.n	d906 <flash_write+0x16>
		return ERR_BAD_ADDRESS;
    d94c:	f06f 000d 	mvn.w	r0, #13
    d950:	e7f8      	b.n	d944 <flash_write+0x54>
		return ERR_DENIED;
    d952:	f06f 0010 	mvn.w	r0, #16
    d956:	e7f5      	b.n	d944 <flash_write+0x54>
    d958:	00014fd4 	.word	0x00014fd4
    d95c:	0000cb4d 	.word	0x0000cb4d
    d960:	0000b4b5 	.word	0x0000b4b5
    d964:	0000b4bb 	.word	0x0000b4bb
    d968:	0000b651 	.word	0x0000b651
    d96c:	0000b4dd 	.word	0x0000b4dd

0000d970 <flash_erase>:
{
    d970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d974:	4688      	mov	r8, r1
    d976:	4617      	mov	r7, r2
	ASSERT(flash && page_nums);
    d978:	4604      	mov	r4, r0
    d97a:	b110      	cbz	r0, d982 <flash_erase+0x12>
    d97c:	1e10      	subs	r0, r2, #0
    d97e:	bf18      	it	ne
    d980:	2001      	movne	r0, #1
    d982:	4912      	ldr	r1, [pc, #72]	; (d9cc <flash_erase+0x5c>)
    d984:	4b12      	ldr	r3, [pc, #72]	; (d9d0 <flash_erase+0x60>)
    d986:	229a      	movs	r2, #154	; 0x9a
    d988:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    d98a:	4b12      	ldr	r3, [pc, #72]	; (d9d4 <flash_erase+0x64>)
    d98c:	4620      	mov	r0, r4
    d98e:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    d990:	4b11      	ldr	r3, [pc, #68]	; (d9d8 <flash_erase+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    d992:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    d994:	4620      	mov	r0, r4
    d996:	4798      	blx	r3
	rc = flash_is_address_aligned(flash, dst_addr);
    d998:	4b10      	ldr	r3, [pc, #64]	; (d9dc <flash_erase+0x6c>)
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    d99a:	4681      	mov	r9, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    d99c:	4641      	mov	r1, r8
    d99e:	4620      	mov	r0, r4
    d9a0:	4798      	blx	r3
	if (rc) {
    d9a2:	4606      	mov	r6, r0
    d9a4:	b958      	cbnz	r0, d9be <flash_erase+0x4e>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    d9a6:	454f      	cmp	r7, r9
    d9a8:	d80c      	bhi.n	d9c4 <flash_erase+0x54>
    d9aa:	fbb8 f5f5 	udiv	r5, r8, r5
    d9ae:	443d      	add	r5, r7
    d9b0:	454d      	cmp	r5, r9
    d9b2:	d807      	bhi.n	d9c4 <flash_erase+0x54>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    d9b4:	4b0a      	ldr	r3, [pc, #40]	; (d9e0 <flash_erase+0x70>)
    d9b6:	463a      	mov	r2, r7
    d9b8:	4641      	mov	r1, r8
    d9ba:	4620      	mov	r0, r4
    d9bc:	4798      	blx	r3
}
    d9be:	4630      	mov	r0, r6
    d9c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
    d9c4:	f06f 060c 	mvn.w	r6, #12
    d9c8:	e7f9      	b.n	d9be <flash_erase+0x4e>
    d9ca:	bf00      	nop
    d9cc:	00014fd4 	.word	0x00014fd4
    d9d0:	0000cb4d 	.word	0x0000cb4d
    d9d4:	0000b4b5 	.word	0x0000b4b5
    d9d8:	0000b4bb 	.word	0x0000b4bb
    d9dc:	0000d80d 	.word	0x0000d80d
    d9e0:	0000b5a5 	.word	0x0000b5a5

0000d9e4 <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ASSERT(io);
    d9e6:	4604      	mov	r4, r0
    d9e8:	3800      	subs	r0, #0
    d9ea:	bf18      	it	ne
    d9ec:	2001      	movne	r0, #1
{
    d9ee:	460f      	mov	r7, r1
    d9f0:	4616      	mov	r6, r2
	ASSERT(io);
    d9f2:	4909      	ldr	r1, [pc, #36]	; (da18 <_spi_m_async_io_write+0x34>)
    d9f4:	4b09      	ldr	r3, [pc, #36]	; (da1c <_spi_m_async_io_write+0x38>)
    d9f6:	f240 1227 	movw	r2, #295	; 0x127
    d9fa:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    d9fc:	2500      	movs	r5, #0
	spi->xfer.txbuf = (uint8_t *)buf;
	spi->xfer.size  = length;
	spi->xfercnt    = 0;

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    d9fe:	2310      	movs	r3, #16
    da00:	7223      	strb	r3, [r4, #8]
	spi->xfer.txbuf = (uint8_t *)buf;
    da02:	e9c4 7505 	strd	r7, r5, [r4, #20]
	spi->xfercnt    = 0;
    da06:	e9c4 6507 	strd	r6, r5, [r4, #28]
	_spi_m_async_enable_tx(&spi->dev, true);
    da0a:	4b05      	ldr	r3, [pc, #20]	; (da20 <_spi_m_async_io_write+0x3c>)
    da0c:	2101      	movs	r1, #1
    da0e:	f1a4 0020 	sub.w	r0, r4, #32
    da12:	4798      	blx	r3

	return ERR_NONE;
}
    da14:	4628      	mov	r0, r5
    da16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da18:	00014feb 	.word	0x00014feb
    da1c:	0000cb4d 	.word	0x0000cb4d
    da20:	000108a1 	.word	0x000108a1

0000da24 <_spi_m_async_io_read>:
{
    da24:	b570      	push	{r4, r5, r6, lr}
	ASSERT(io);
    da26:	4604      	mov	r4, r0
    da28:	3800      	subs	r0, #0
    da2a:	bf18      	it	ne
    da2c:	2001      	movne	r0, #1
{
    da2e:	460d      	mov	r5, r1
    da30:	4616      	mov	r6, r2
	ASSERT(io);
    da32:	490c      	ldr	r1, [pc, #48]	; (da64 <_spi_m_async_io_read+0x40>)
    da34:	4b0c      	ldr	r3, [pc, #48]	; (da68 <_spi_m_async_io_read+0x44>)
    da36:	f240 1205 	movw	r2, #261	; 0x105
    da3a:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    da3c:	61a5      	str	r5, [r4, #24]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    da3e:	2310      	movs	r3, #16
	spi->xfer.txbuf = NULL;
    da40:	2500      	movs	r5, #0
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    da42:	7223      	strb	r3, [r4, #8]
	spi->xfer.txbuf = NULL;
    da44:	6165      	str	r5, [r4, #20]
	spi->xfercnt    = 0;
    da46:	e9c4 6507 	strd	r6, r5, [r4, #28]
	_spi_m_async_enable_rx(&spi->dev, true);
    da4a:	3c20      	subs	r4, #32
    da4c:	4b07      	ldr	r3, [pc, #28]	; (da6c <_spi_m_async_io_read+0x48>)
    da4e:	2101      	movs	r1, #1
    da50:	4620      	mov	r0, r4
    da52:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    da54:	4b06      	ldr	r3, [pc, #24]	; (da70 <_spi_m_async_io_read+0x4c>)
    da56:	f240 11ff 	movw	r1, #511	; 0x1ff
    da5a:	4620      	mov	r0, r4
    da5c:	4798      	blx	r3
}
    da5e:	4628      	mov	r0, r5
    da60:	bd70      	pop	{r4, r5, r6, pc}
    da62:	bf00      	nop
    da64:	00014feb 	.word	0x00014feb
    da68:	0000cb4d 	.word	0x0000cb4d
    da6c:	000108cd 	.word	0x000108cd
    da70:	00010939 	.word	0x00010939

0000da74 <_spi_dev_error>:
{
    da74:	b570      	push	{r4, r5, r6, lr}
	_spi_m_async_enable_tx(dev, false);
    da76:	4b0c      	ldr	r3, [pc, #48]	; (daa8 <_spi_dev_error+0x34>)
{
    da78:	4604      	mov	r4, r0
    da7a:	460d      	mov	r5, r1
	_spi_m_async_enable_tx(dev, false);
    da7c:	2100      	movs	r1, #0
    da7e:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    da80:	4b0a      	ldr	r3, [pc, #40]	; (daac <_spi_dev_error+0x38>)
    da82:	2100      	movs	r1, #0
    da84:	4620      	mov	r0, r4
    da86:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    da88:	4b09      	ldr	r3, [pc, #36]	; (dab0 <_spi_dev_error+0x3c>)
    da8a:	2100      	movs	r1, #0
    da8c:	4620      	mov	r0, r4
    da8e:	4798      	blx	r3
	spi->stat = 0;
    da90:	2300      	movs	r3, #0
    da92:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    da96:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da98:	b123      	cbz	r3, daa4 <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
    da9a:	4629      	mov	r1, r5
    da9c:	1f20      	subs	r0, r4, #4
}
    da9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		spi->callbacks.cb_error(spi, status);
    daa2:	4718      	bx	r3
}
    daa4:	bd70      	pop	{r4, r5, r6, pc}
    daa6:	bf00      	nop
    daa8:	000108a1 	.word	0x000108a1
    daac:	000108cd 	.word	0x000108cd
    dab0:	00010905 	.word	0x00010905

0000dab4 <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    dab4:	e9d0 320f 	ldrd	r3, r2, [r0, #60]	; 0x3c
    dab8:	429a      	cmp	r2, r3
{
    daba:	b510      	push	{r4, lr}
    dabc:	4604      	mov	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
    dabe:	d30b      	bcc.n	dad8 <_spi_dev_complete+0x24>
		_spi_m_async_enable_tx_complete(dev, false);
    dac0:	4b06      	ldr	r3, [pc, #24]	; (dadc <_spi_dev_complete+0x28>)
    dac2:	2100      	movs	r1, #0
    dac4:	4798      	blx	r3
		spi->stat = 0;
    dac6:	2300      	movs	r3, #0
    dac8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    dacc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    dace:	b11b      	cbz	r3, dad8 <_spi_dev_complete+0x24>
			spi->callbacks.cb_xfer(spi);
    dad0:	1f20      	subs	r0, r4, #4
}
    dad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			spi->callbacks.cb_xfer(spi);
    dad6:	4718      	bx	r3
}
    dad8:	bd10      	pop	{r4, pc}
    dada:	bf00      	nop
    dadc:	00010905 	.word	0x00010905

0000dae0 <_spi_dev_rx>:
{
    dae0:	b570      	push	{r4, r5, r6, lr}
	if (spi->xfer.rxbuf) {
    dae2:	6b85      	ldr	r5, [r0, #56]	; 0x38
    dae4:	4b1c      	ldr	r3, [pc, #112]	; (db58 <_spi_dev_rx+0x78>)
{
    dae6:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    dae8:	b305      	cbz	r5, db2c <_spi_dev_rx+0x4c>
		if (!(dev->char_size > 1)) {
    daea:	7902      	ldrb	r2, [r0, #4]
    daec:	2a01      	cmp	r2, #1
    daee:	d816      	bhi.n	db1e <_spi_dev_rx+0x3e>
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    daf0:	4798      	blx	r3
    daf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    daf4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    daf6:	1c59      	adds	r1, r3, #1
    daf8:	6421      	str	r1, [r4, #64]	; 0x40
    dafa:	54d0      	strb	r0, [r2, r3]
	if (spi->xfercnt < spi->xfer.size) {
    dafc:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
    db00:	4299      	cmp	r1, r3
    db02:	d21a      	bcs.n	db3a <_spi_dev_rx+0x5a>
		if (spi->xfer.txbuf) {
    db04:	6b62      	ldr	r2, [r4, #52]	; 0x34
    db06:	4b15      	ldr	r3, [pc, #84]	; (db5c <_spi_dev_rx+0x7c>)
    db08:	b1aa      	cbz	r2, db36 <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    db0a:	7920      	ldrb	r0, [r4, #4]
    db0c:	2801      	cmp	r0, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    db0e:	bf94      	ite	ls
    db10:	5c51      	ldrbls	r1, [r2, r1]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    db12:	f832 1011 	ldrhhi.w	r1, [r2, r1, lsl #1]
    db16:	4620      	mov	r0, r4
}
    db18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    db1c:	4718      	bx	r3
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    db1e:	6c06      	ldr	r6, [r0, #64]	; 0x40
    db20:	1c72      	adds	r2, r6, #1
    db22:	6402      	str	r2, [r0, #64]	; 0x40
    db24:	4798      	blx	r3
    db26:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    db2a:	e7e7      	b.n	dafc <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    db2c:	4798      	blx	r3
		spi->xfercnt++;
    db2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    db30:	3301      	adds	r3, #1
    db32:	6423      	str	r3, [r4, #64]	; 0x40
    db34:	e7e2      	b.n	dafc <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    db36:	88e1      	ldrh	r1, [r4, #6]
    db38:	e7ed      	b.n	db16 <_spi_dev_rx+0x36>
		_spi_m_async_enable_rx(dev, false);
    db3a:	4b09      	ldr	r3, [pc, #36]	; (db60 <_spi_dev_rx+0x80>)
    db3c:	2100      	movs	r1, #0
    db3e:	4620      	mov	r0, r4
    db40:	4798      	blx	r3
		spi->stat = 0;
    db42:	2300      	movs	r3, #0
    db44:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    db48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    db4a:	b11b      	cbz	r3, db54 <_spi_dev_rx+0x74>
			spi->callbacks.cb_xfer(spi);
    db4c:	1f20      	subs	r0, r4, #4
}
    db4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			spi->callbacks.cb_xfer(spi);
    db52:	4718      	bx	r3
}
    db54:	bd70      	pop	{r4, r5, r6, pc}
    db56:	bf00      	nop
    db58:	00010965 	.word	0x00010965
    db5c:	00010939 	.word	0x00010939
    db60:	000108cd 	.word	0x000108cd

0000db64 <_spi_dev_tx>:
{
    db64:	b570      	push	{r4, r5, r6, lr}
    db66:	6c03      	ldr	r3, [r0, #64]	; 0x40
	if (!(dev->char_size > 1)) {
    db68:	7902      	ldrb	r2, [r0, #4]
    db6a:	6b41      	ldr	r1, [r0, #52]	; 0x34
    db6c:	1c5d      	adds	r5, r3, #1
    db6e:	2a01      	cmp	r2, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    db70:	6405      	str	r5, [r0, #64]	; 0x40
    db72:	bf94      	ite	ls
    db74:	5cc9      	ldrbls	r1, [r1, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    db76:	f831 1013 	ldrhhi.w	r1, [r1, r3, lsl #1]
    db7a:	4a09      	ldr	r2, [pc, #36]	; (dba0 <_spi_dev_tx+0x3c>)
{
    db7c:	4604      	mov	r4, r0
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    db7e:	4790      	blx	r2
	if (spi->xfercnt == spi->xfer.size) {
    db80:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
    db84:	429a      	cmp	r2, r3
    db86:	d109      	bne.n	db9c <_spi_dev_tx+0x38>
		_spi_m_async_enable_tx(dev, false);
    db88:	4b06      	ldr	r3, [pc, #24]	; (dba4 <_spi_dev_tx+0x40>)
    db8a:	2100      	movs	r1, #0
    db8c:	4620      	mov	r0, r4
    db8e:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    db90:	4620      	mov	r0, r4
    db92:	4b05      	ldr	r3, [pc, #20]	; (dba8 <_spi_dev_tx+0x44>)
}
    db94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_spi_m_async_enable_tx_complete(dev, true);
    db98:	2101      	movs	r1, #1
    db9a:	4718      	bx	r3
}
    db9c:	bd70      	pop	{r4, r5, r6, pc}
    db9e:	bf00      	nop
    dba0:	00010939 	.word	0x00010939
    dba4:	000108a1 	.word	0x000108a1
    dba8:	00010905 	.word	0x00010905

0000dbac <spi_m_async_init>:
{
    dbac:	b570      	push	{r4, r5, r6, lr}
    dbae:	460e      	mov	r6, r1
	ASSERT(spi && hw);
    dbb0:	4604      	mov	r4, r0
    dbb2:	b110      	cbz	r0, dbba <spi_m_async_init+0xe>
    dbb4:	1e08      	subs	r0, r1, #0
    dbb6:	bf18      	it	ne
    dbb8:	2001      	movne	r0, #1
	spi->dev.prvt = (void *)hw;
    dbba:	4625      	mov	r5, r4
	ASSERT(spi && hw);
    dbbc:	4911      	ldr	r1, [pc, #68]	; (dc04 <spi_m_async_init+0x58>)
    dbbe:	4b12      	ldr	r3, [pc, #72]	; (dc08 <spi_m_async_init+0x5c>)
    dbc0:	22a5      	movs	r2, #165	; 0xa5
    dbc2:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    dbc4:	f845 6f04 	str.w	r6, [r5, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    dbc8:	4b10      	ldr	r3, [pc, #64]	; (dc0c <spi_m_async_init+0x60>)
    dbca:	4631      	mov	r1, r6
    dbcc:	4628      	mov	r0, r5
    dbce:	4798      	blx	r3
	if (rc >= 0) {
    dbd0:	2800      	cmp	r0, #0
    dbd2:	db15      	blt.n	dc00 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    dbd4:	4e0e      	ldr	r6, [pc, #56]	; (dc10 <spi_m_async_init+0x64>)
    dbd6:	4a0f      	ldr	r2, [pc, #60]	; (dc14 <spi_m_async_init+0x68>)
    dbd8:	2100      	movs	r1, #0
    dbda:	4628      	mov	r0, r5
    dbdc:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    dbde:	4a0e      	ldr	r2, [pc, #56]	; (dc18 <spi_m_async_init+0x6c>)
    dbe0:	2101      	movs	r1, #1
    dbe2:	4628      	mov	r0, r5
    dbe4:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    dbe6:	4a0d      	ldr	r2, [pc, #52]	; (dc1c <spi_m_async_init+0x70>)
    dbe8:	2102      	movs	r1, #2
    dbea:	4628      	mov	r0, r5
    dbec:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    dbee:	4a0c      	ldr	r2, [pc, #48]	; (dc20 <spi_m_async_init+0x74>)
    dbf0:	2103      	movs	r1, #3
    dbf2:	4628      	mov	r0, r5
    dbf4:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    dbf6:	4b0b      	ldr	r3, [pc, #44]	; (dc24 <spi_m_async_init+0x78>)
    dbf8:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    dbfa:	4b0b      	ldr	r3, [pc, #44]	; (dc28 <spi_m_async_init+0x7c>)
    dbfc:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    dbfe:	2000      	movs	r0, #0
}
    dc00:	bd70      	pop	{r4, r5, r6, pc}
    dc02:	bf00      	nop
    dc04:	00014feb 	.word	0x00014feb
    dc08:	0000cb4d 	.word	0x0000cb4d
    dc0c:	000107ad 	.word	0x000107ad
    dc10:	0001098d 	.word	0x0001098d
    dc14:	0000db65 	.word	0x0000db65
    dc18:	0000dae1 	.word	0x0000dae1
    dc1c:	0000dab5 	.word	0x0000dab5
    dc20:	0000da75 	.word	0x0000da75
    dc24:	0000da25 	.word	0x0000da25
    dc28:	0000d9e5 	.word	0x0000d9e5

0000dc2c <spi_m_async_enable>:
{
    dc2c:	b510      	push	{r4, lr}
	ASSERT(spi);
    dc2e:	4604      	mov	r4, r0
    dc30:	3800      	subs	r0, #0
    dc32:	4b05      	ldr	r3, [pc, #20]	; (dc48 <spi_m_async_enable+0x1c>)
    dc34:	4905      	ldr	r1, [pc, #20]	; (dc4c <spi_m_async_enable+0x20>)
    dc36:	bf18      	it	ne
    dc38:	2001      	movne	r0, #1
    dc3a:	22c1      	movs	r2, #193	; 0xc1
    dc3c:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    dc3e:	1d20      	adds	r0, r4, #4
    dc40:	4b03      	ldr	r3, [pc, #12]	; (dc50 <spi_m_async_enable+0x24>)
}
    dc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_spi_m_async_enable(&spi->dev);
    dc46:	4718      	bx	r3
    dc48:	0000cb4d 	.word	0x0000cb4d
    dc4c:	00014feb 	.word	0x00014feb
    dc50:	00010805 	.word	0x00010805

0000dc54 <spi_m_async_set_baudrate>:
{
    dc54:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    dc56:	4604      	mov	r4, r0
    dc58:	3800      	subs	r0, #0
    dc5a:	4b0a      	ldr	r3, [pc, #40]	; (dc84 <spi_m_async_set_baudrate+0x30>)
    dc5c:	bf18      	it	ne
    dc5e:	2001      	movne	r0, #1
{
    dc60:	460d      	mov	r5, r1
	ASSERT(spi);
    dc62:	22cf      	movs	r2, #207	; 0xcf
    dc64:	4908      	ldr	r1, [pc, #32]	; (dc88 <spi_m_async_set_baudrate+0x34>)
    dc66:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    dc68:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    dc6c:	06db      	lsls	r3, r3, #27
    dc6e:	d405      	bmi.n	dc7c <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    dc70:	4629      	mov	r1, r5
    dc72:	1d20      	adds	r0, r4, #4
    dc74:	4b05      	ldr	r3, [pc, #20]	; (dc8c <spi_m_async_set_baudrate+0x38>)
}
    dc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    dc7a:	4718      	bx	r3
}
    dc7c:	f06f 0003 	mvn.w	r0, #3
    dc80:	bd70      	pop	{r4, r5, r6, pc}
    dc82:	bf00      	nop
    dc84:	0000cb4d 	.word	0x0000cb4d
    dc88:	00014feb 	.word	0x00014feb
    dc8c:	00010869 	.word	0x00010869

0000dc90 <spi_m_async_set_mode>:
{
    dc90:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    dc92:	4604      	mov	r4, r0
    dc94:	3800      	subs	r0, #0
    dc96:	4b0a      	ldr	r3, [pc, #40]	; (dcc0 <spi_m_async_set_mode+0x30>)
    dc98:	bf18      	it	ne
    dc9a:	2001      	movne	r0, #1
{
    dc9c:	460d      	mov	r5, r1
	ASSERT(spi);
    dc9e:	22d9      	movs	r2, #217	; 0xd9
    dca0:	4908      	ldr	r1, [pc, #32]	; (dcc4 <spi_m_async_set_mode+0x34>)
    dca2:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    dca4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    dca8:	06db      	lsls	r3, r3, #27
    dcaa:	d405      	bmi.n	dcb8 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    dcac:	4629      	mov	r1, r5
    dcae:	1d20      	adds	r0, r4, #4
    dcb0:	4b05      	ldr	r3, [pc, #20]	; (dcc8 <spi_m_async_set_mode+0x38>)
}
    dcb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_async_set_mode(&spi->dev, mode);
    dcb6:	4718      	bx	r3
}
    dcb8:	f06f 0003 	mvn.w	r0, #3
    dcbc:	bd70      	pop	{r4, r5, r6, pc}
    dcbe:	bf00      	nop
    dcc0:	0000cb4d 	.word	0x0000cb4d
    dcc4:	00014feb 	.word	0x00014feb
    dcc8:	00010835 	.word	0x00010835

0000dccc <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    dccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ASSERT(spi);
    dcce:	4604      	mov	r4, r0
    dcd0:	3800      	subs	r0, #0
{
    dcd2:	461e      	mov	r6, r3
	ASSERT(spi);
    dcd4:	bf18      	it	ne
    dcd6:	2001      	movne	r0, #1
    dcd8:	4b11      	ldr	r3, [pc, #68]	; (dd20 <spi_m_async_transfer+0x54>)
{
    dcda:	460d      	mov	r5, r1
    dcdc:	4617      	mov	r7, r2
	ASSERT(spi);
    dcde:	4911      	ldr	r1, [pc, #68]	; (dd24 <spi_m_async_transfer+0x58>)
    dce0:	f44f 729c 	mov.w	r2, #312	; 0x138
    dce4:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
	spi->xfer.txbuf = (uint8_t *)txbuf;
	spi->xfer.size  = length;
	spi->xfercnt    = 0;
    dce6:	2300      	movs	r3, #0
	spi->xfer.size  = length;
    dce8:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    dcea:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
	_spi_m_async_enable_rx(&spi->dev, true);
    dcec:	1d26      	adds	r6, r4, #4
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    dcee:	2310      	movs	r3, #16
    dcf0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    dcf4:	e9c4 570e 	strd	r5, r7, [r4, #56]	; 0x38
	_spi_m_async_enable_rx(&spi->dev, true);
    dcf8:	4b0b      	ldr	r3, [pc, #44]	; (dd28 <spi_m_async_transfer+0x5c>)
    dcfa:	2101      	movs	r1, #1
    dcfc:	4630      	mov	r0, r6
    dcfe:	4798      	blx	r3
	if (txbuf) {
    dd00:	4b0a      	ldr	r3, [pc, #40]	; (dd2c <spi_m_async_transfer+0x60>)
    dd02:	b155      	cbz	r5, dd1a <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    dd04:	7a21      	ldrb	r1, [r4, #8]
    dd06:	6c62      	ldr	r2, [r4, #68]	; 0x44
    dd08:	2901      	cmp	r1, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    dd0a:	bf94      	ite	ls
    dd0c:	5ca9      	ldrbls	r1, [r5, r2]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    dd0e:	f835 1012 	ldrhhi.w	r1, [r5, r2, lsl #1]
		}
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    dd12:	4630      	mov	r0, r6
    dd14:	4798      	blx	r3
	}

	return ERR_NONE;
}
    dd16:	2000      	movs	r0, #0
    dd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    dd1a:	8961      	ldrh	r1, [r4, #10]
    dd1c:	e7f9      	b.n	dd12 <spi_m_async_transfer+0x46>
    dd1e:	bf00      	nop
    dd20:	0000cb4d 	.word	0x0000cb4d
    dd24:	00014feb 	.word	0x00014feb
    dd28:	000108cd 	.word	0x000108cd
    dd2c:	00010939 	.word	0x00010939

0000dd30 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    dd30:	b570      	push	{r4, r5, r6, lr}
    dd32:	460e      	mov	r6, r1
    dd34:	4615      	mov	r5, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    dd36:	4604      	mov	r4, r0
    dd38:	b118      	cbz	r0, dd42 <spi_m_async_register_callback+0x12>
    dd3a:	2901      	cmp	r1, #1
    dd3c:	bf8c      	ite	hi
    dd3e:	2000      	movhi	r0, #0
    dd40:	2001      	movls	r0, #1
    dd42:	4909      	ldr	r1, [pc, #36]	; (dd68 <spi_m_async_register_callback+0x38>)
    dd44:	4b09      	ldr	r3, [pc, #36]	; (dd6c <spi_m_async_register_callback+0x3c>)
    dd46:	f240 1263 	movw	r2, #355	; 0x163
    dd4a:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    dd4c:	b90e      	cbnz	r6, dd52 <spi_m_async_register_callback+0x22>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    dd4e:	6325      	str	r5, [r4, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    dd50:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    dd52:	1e2a      	subs	r2, r5, #0
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    dd54:	6365      	str	r5, [r4, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    dd56:	f104 0004 	add.w	r0, r4, #4
    dd5a:	4b05      	ldr	r3, [pc, #20]	; (dd70 <spi_m_async_register_callback+0x40>)
}
    dd5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    dd60:	bf18      	it	ne
    dd62:	2201      	movne	r2, #1
    dd64:	2103      	movs	r1, #3
    dd66:	4718      	bx	r3
    dd68:	00014feb 	.word	0x00014feb
    dd6c:	0000cb4d 	.word	0x0000cb4d
    dd70:	000109bd 	.word	0x000109bd

0000dd74 <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    dd74:	b538      	push	{r3, r4, r5, lr}
    dd76:	460d      	mov	r5, r1
	ASSERT(spi && io);
    dd78:	4604      	mov	r4, r0
    dd7a:	b110      	cbz	r0, dd82 <spi_m_async_get_io_descriptor+0xe>
    dd7c:	1e08      	subs	r0, r1, #0
    dd7e:	bf18      	it	ne
    dd80:	2001      	movne	r0, #1
    dd82:	4904      	ldr	r1, [pc, #16]	; (dd94 <spi_m_async_get_io_descriptor+0x20>)
    dd84:	4b04      	ldr	r3, [pc, #16]	; (dd98 <spi_m_async_get_io_descriptor+0x24>)
    dd86:	f240 126f 	movw	r2, #367	; 0x16f
	*io = &spi->io;
    dd8a:	3424      	adds	r4, #36	; 0x24
	ASSERT(spi && io);
    dd8c:	4798      	blx	r3
	*io = &spi->io;
    dd8e:	602c      	str	r4, [r5, #0]
	return 0;
}
    dd90:	2000      	movs	r0, #0
    dd92:	bd38      	pop	{r3, r4, r5, pc}
    dd94:	00014feb 	.word	0x00014feb
    dd98:	0000cb4d 	.word	0x0000cb4d

0000dd9c <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    dd9c:	b570      	push	{r4, r5, r6, lr}
    dd9e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    dda0:	4604      	mov	r4, r0
    dda2:	b110      	cbz	r0, ddaa <crc_sync_init+0xe>
    dda4:	1e08      	subs	r0, r1, #0
    dda6:	bf18      	it	ne
    dda8:	2001      	movne	r0, #1
    ddaa:	4905      	ldr	r1, [pc, #20]	; (ddc0 <crc_sync_init+0x24>)
    ddac:	4b05      	ldr	r3, [pc, #20]	; (ddc4 <crc_sync_init+0x28>)
    ddae:	222b      	movs	r2, #43	; 0x2b
    ddb0:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    ddb2:	4629      	mov	r1, r5
    ddb4:	4620      	mov	r0, r4
    ddb6:	4b04      	ldr	r3, [pc, #16]	; (ddc8 <crc_sync_init+0x2c>)
}
    ddb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _crc_sync_init(&descr->dev, hw);
    ddbc:	4718      	bx	r3
    ddbe:	bf00      	nop
    ddc0:	00015008 	.word	0x00015008
    ddc4:	0000cb4d 	.word	0x0000cb4d
    ddc8:	00011b99 	.word	0x00011b99

0000ddcc <_usb_d_find_ep>:
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    ddcc:	4a0a      	ldr	r2, [pc, #40]	; (ddf8 <_usb_d_find_ep+0x2c>)
{
    ddce:	b570      	push	{r4, r5, r6, lr}
    ddd0:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    ddd2:	f000 050f 	and.w	r5, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    ddd6:	7854      	ldrb	r4, [r2, #1]
    ddd8:	4284      	cmp	r4, r0
    ddda:	b259      	sxtb	r1, r3
    dddc:	d00a      	beq.n	ddf4 <_usb_d_find_ep+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    ddde:	7816      	ldrb	r6, [r2, #0]
    dde0:	b90e      	cbnz	r6, dde6 <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    dde2:	42ac      	cmp	r4, r5
    dde4:	d006      	beq.n	ddf4 <_usb_d_find_ep+0x28>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dde6:	3301      	adds	r3, #1
    dde8:	2b0d      	cmp	r3, #13
    ddea:	f102 0220 	add.w	r2, r2, #32
    ddee:	d1f2      	bne.n	ddd6 <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
    ddf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    ddf4:	4608      	mov	r0, r1
    ddf6:	bd70      	pop	{r4, r5, r6, pc}
    ddf8:	20000e04 	.word	0x20000e04

0000ddfc <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    ddfc:	b513      	push	{r0, r1, r4, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    ddfe:	4b0a      	ldr	r3, [pc, #40]	; (de28 <usb_d_cb_trans_more+0x2c>)
{
    de00:	9101      	str	r1, [sp, #4]
    de02:	4604      	mov	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    de04:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    de06:	4b09      	ldr	r3, [pc, #36]	; (de2c <usb_d_cb_trans_more+0x30>)
    de08:	9901      	ldr	r1, [sp, #4]
    de0a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    de0e:	789a      	ldrb	r2, [r3, #2]
    de10:	2a03      	cmp	r2, #3
    de12:	d105      	bne.n	de20 <usb_d_cb_trans_more+0x24>
		return ept->callbacks.more(ep, transfered);
    de14:	699b      	ldr	r3, [r3, #24]
    de16:	4620      	mov	r0, r4
	}
	return false;
}
    de18:	b002      	add	sp, #8
    de1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return ept->callbacks.more(ep, transfered);
    de1e:	4718      	bx	r3
}
    de20:	2000      	movs	r0, #0
    de22:	b002      	add	sp, #8
    de24:	bd10      	pop	{r4, pc}
    de26:	bf00      	nop
    de28:	0000ddcd 	.word	0x0000ddcd
    de2c:	20000e04 	.word	0x20000e04

0000de30 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    de30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    de34:	4b37      	ldr	r3, [pc, #220]	; (df14 <_usb_d_cb_trans_done+0xe4>)
    de36:	4c38      	ldr	r4, [pc, #224]	; (df18 <_usb_d_cb_trans_done+0xe8>)
{
    de38:	b085      	sub	sp, #20
    de3a:	4680      	mov	r8, r0
    de3c:	460f      	mov	r7, r1
    de3e:	4691      	mov	r9, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    de40:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    de42:	0146      	lsls	r6, r0, #5
    de44:	2f00      	cmp	r7, #0
    de46:	d143      	bne.n	ded0 <_usb_d_cb_trans_done+0xa0>
		ept->xfer.hdr.status = USB_XFER_DONE;
    de48:	19a5      	adds	r5, r4, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    de4a:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    de4c:	70ef      	strb	r7, [r5, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    de4e:	2900      	cmp	r1, #0
    de50:	d135      	bne.n	debe <_usb_d_cb_trans_done+0x8e>
	if (state == USB_EP_S_X_DATA) {
    de52:	2320      	movs	r3, #32
    de54:	220c      	movs	r2, #12
    de56:	fb13 2000 	smlabb	r0, r3, r0, r2
    de5a:	78ab      	ldrb	r3, [r5, #2]
    de5c:	2b03      	cmp	r3, #3
    de5e:	eb04 0200 	add.w	r2, r4, r0
    de62:	69eb      	ldr	r3, [r5, #28]
    de64:	7868      	ldrb	r0, [r5, #1]
    de66:	d126      	bne.n	deb6 <_usb_d_cb_trans_done+0x86>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    de68:	2101      	movs	r1, #1
    de6a:	f995 400c 	ldrsb.w	r4, [r5, #12]
    de6e:	4798      	blx	r3
		if (err) {
    de70:	786b      	ldrb	r3, [r5, #1]
    de72:	b168      	cbz	r0, de90 <_usb_d_cb_trans_done+0x60>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    de74:	2c00      	cmp	r4, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    de76:	f240 2205 	movw	r2, #517	; 0x205
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    de7a:	bfb4      	ite	lt
    de7c:	4618      	movlt	r0, r3
    de7e:	f043 0080 	orrge.w	r0, r3, #128	; 0x80
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    de82:	806a      	strh	r2, [r5, #2]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    de84:	4b25      	ldr	r3, [pc, #148]	; (df1c <_usb_d_cb_trans_done+0xec>)
    de86:	2101      	movs	r1, #1
    de88:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
    de8a:	b005      	add	sp, #20
    de8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct usb_d_transfer trans
    de90:	2c00      	cmp	r4, #0
    de92:	bfac      	ite	ge
    de94:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    de98:	f003 030f 	andlt.w	r3, r3, #15
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    de9c:	2204      	movs	r2, #4
	struct usb_d_transfer trans
    de9e:	f88d 300c 	strb.w	r3, [sp, #12]
    dea2:	2301      	movs	r3, #1
    dea4:	e9cd 0001 	strd	r0, r0, [sp, #4]
    dea8:	f88d 300d 	strb.w	r3, [sp, #13]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    deac:	70aa      	strb	r2, [r5, #2]
	return _usb_d_dev_ep_trans(&trans);
    deae:	4b1c      	ldr	r3, [pc, #112]	; (df20 <_usb_d_cb_trans_done+0xf0>)
    deb0:	a801      	add	r0, sp, #4
    deb2:	4798      	blx	r3
    deb4:	e7e9      	b.n	de8a <_usb_d_cb_trans_done+0x5a>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    deb6:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    deb8:	2302      	movs	r3, #2
    deba:	70ab      	strb	r3, [r5, #2]
    debc:	e7e5      	b.n	de8a <_usb_d_cb_trans_done+0x5a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    debe:	2301      	movs	r3, #1
    dec0:	70ab      	strb	r3, [r5, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    dec2:	4434      	add	r4, r6
    dec4:	464a      	mov	r2, r9
    dec6:	69e3      	ldr	r3, [r4, #28]
    dec8:	78e1      	ldrb	r1, [r4, #3]
    deca:	4640      	mov	r0, r8
    decc:	4798      	blx	r3
    dece:	e7dc      	b.n	de8a <_usb_d_cb_trans_done+0x5a>
	} else if (code == USB_TRANS_STALL) {
    ded0:	2f01      	cmp	r7, #1
		ept->xfer.hdr.status = USB_XFER_HALT;
    ded2:	eb04 0306 	add.w	r3, r4, r6
	} else if (code == USB_TRANS_STALL) {
    ded6:	d10b      	bne.n	def0 <_usb_d_cb_trans_done+0xc0>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    ded8:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    deda:	2202      	movs	r2, #2
    dedc:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    dede:	b921      	cbnz	r1, deea <_usb_d_cb_trans_done+0xba>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    dee0:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    dee2:	4640      	mov	r0, r8
    dee4:	4b0d      	ldr	r3, [pc, #52]	; (df1c <_usb_d_cb_trans_done+0xec>)
    dee6:	4798      	blx	r3
    dee8:	e7eb      	b.n	dec2 <_usb_d_cb_trans_done+0x92>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    deea:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    deec:	709a      	strb	r2, [r3, #2]
    deee:	e7e8      	b.n	dec2 <_usb_d_cb_trans_done+0x92>
	} else if (code == USB_TRANS_ABORT) {
    def0:	2f02      	cmp	r7, #2
    def2:	d107      	bne.n	df04 <_usb_d_cb_trans_done+0xd4>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    def4:	2204      	movs	r2, #4
    def6:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    def8:	5da2      	ldrb	r2, [r4, r6]
    defa:	b90a      	cbnz	r2, df00 <_usb_d_cb_trans_done+0xd0>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    defc:	709f      	strb	r7, [r3, #2]
			return;
    defe:	e7c4      	b.n	de8a <_usb_d_cb_trans_done+0x5a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    df00:	2201      	movs	r2, #1
    df02:	e7f3      	b.n	deec <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    df04:	2f03      	cmp	r7, #3
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    df06:	bf0c      	ite	eq
    df08:	f44f 62a0 	moveq.w	r2, #1280	; 0x500
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    df0c:	f240 6206 	movwne	r2, #1542	; 0x606
    df10:	805a      	strh	r2, [r3, #2]
    df12:	e7d6      	b.n	dec2 <_usb_d_cb_trans_done+0x92>
    df14:	0000ddcd 	.word	0x0000ddcd
    df18:	20000e04 	.word	0x20000e04
    df1c:	0000c53d 	.word	0x0000c53d
    df20:	0000c65d 	.word	0x0000c65d

0000df24 <usb_d_dummy_cb_false>:
	if (unused0 == 3 || unused0 == 0x85){
    df24:	2803      	cmp	r0, #3
{
    df26:	b510      	push	{r4, lr}
    df28:	4613      	mov	r3, r2
	if (unused0 == 3 || unused0 == 0x85){
    df2a:	d001      	beq.n	df30 <usb_d_dummy_cb_false+0xc>
    df2c:	2885      	cmp	r0, #133	; 0x85
    df2e:	d104      	bne.n	df3a <usb_d_dummy_cb_false+0x16>
		printf("Midi:  Ep: %d, Xfer: %d, Count: %d \r\n", unused0, unused1, unused2);		
    df30:	460a      	mov	r2, r1
    df32:	4c03      	ldr	r4, [pc, #12]	; (df40 <usb_d_dummy_cb_false+0x1c>)
    df34:	4601      	mov	r1, r0
    df36:	4803      	ldr	r0, [pc, #12]	; (df44 <usb_d_dummy_cb_false+0x20>)
    df38:	47a0      	blx	r4
}
    df3a:	2000      	movs	r0, #0
    df3c:	bd10      	pop	{r4, pc}
    df3e:	bf00      	nop
    df40:	0001275d 	.word	0x0001275d
    df44:	00015022 	.word	0x00015022

0000df48 <usb_d_cb_trans_setup>:
{
    df48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    df4c:	4b18      	ldr	r3, [pc, #96]	; (dfb0 <usb_d_cb_trans_setup+0x68>)
	uint8_t *        req      = ept->xfer.req;
    df4e:	4f19      	ldr	r7, [pc, #100]	; (dfb4 <usb_d_cb_trans_setup+0x6c>)
    df50:	4d19      	ldr	r5, [pc, #100]	; (dfb8 <usb_d_cb_trans_setup+0x70>)
{
    df52:	4604      	mov	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    df54:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
    df56:	f04f 0820 	mov.w	r8, #32
    df5a:	230c      	movs	r3, #12
    df5c:	fb18 3800 	smlabb	r8, r8, r0, r3
    df60:	44b8      	add	r8, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    df62:	4b16      	ldr	r3, [pc, #88]	; (dfbc <usb_d_cb_trans_setup+0x74>)
	int8_t           ep_index = _usb_d_find_ep(ep);
    df64:	4606      	mov	r6, r0
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    df66:	4641      	mov	r1, r8
    df68:	4620      	mov	r0, r4
    df6a:	4798      	blx	r3
	if (n != 8) {
    df6c:	b2c0      	uxtb	r0, r0
    df6e:	2808      	cmp	r0, #8
    df70:	f044 0980 	orr.w	r9, r4, #128	; 0x80
    df74:	d008      	beq.n	df88 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    df76:	2101      	movs	r1, #1
    df78:	4620      	mov	r0, r4
    df7a:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    df7c:	4648      	mov	r0, r9
    df7e:	462b      	mov	r3, r5
    df80:	2101      	movs	r1, #1
}
    df82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    df86:	4718      	bx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    df88:	eb07 1646 	add.w	r6, r7, r6, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    df8c:	2100      	movs	r1, #0
    df8e:	4620      	mov	r0, r4
    df90:	47a8      	blx	r5
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    df92:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    df94:	2100      	movs	r1, #0
    df96:	4648      	mov	r0, r9
    df98:	47a8      	blx	r5
	if (!ept->callbacks.req(ep, req)) {
    df9a:	6973      	ldr	r3, [r6, #20]
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    df9c:	70b7      	strb	r7, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
    df9e:	4641      	mov	r1, r8
    dfa0:	4620      	mov	r0, r4
    dfa2:	4798      	blx	r3
    dfa4:	b910      	cbnz	r0, dfac <usb_d_cb_trans_setup+0x64>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    dfa6:	2305      	movs	r3, #5
    dfa8:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    dfaa:	e7e4      	b.n	df76 <usb_d_cb_trans_setup+0x2e>
}
    dfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dfb0:	0000ddcd 	.word	0x0000ddcd
    dfb4:	20000e04 	.word	0x20000e04
    dfb8:	0000c53d 	.word	0x0000c53d
    dfbc:	0000c609 	.word	0x0000c609

0000dfc0 <usb_d_init>:

int32_t usb_d_init(void)
{
    dfc0:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    dfc2:	4b11      	ldr	r3, [pc, #68]	; (e008 <usb_d_init+0x48>)
    dfc4:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    dfc6:	2800      	cmp	r0, #0
    dfc8:	db1d      	blt.n	e006 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    dfca:	4b10      	ldr	r3, [pc, #64]	; (e00c <usb_d_init+0x4c>)
    dfcc:	4810      	ldr	r0, [pc, #64]	; (e010 <usb_d_init+0x50>)
    dfce:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    dfd2:	2100      	movs	r1, #0
    dfd4:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dfd6:	4b0e      	ldr	r3, [pc, #56]	; (e010 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    dfd8:	490e      	ldr	r1, [pc, #56]	; (e014 <usb_d_init+0x54>)
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    dfda:	2200      	movs	r2, #0
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    dfdc:	20ff      	movs	r0, #255	; 0xff
    dfde:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dfe0:	2a0d      	cmp	r2, #13
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    dfe2:	e9c3 1105 	strd	r1, r1, [r3, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    dfe6:	7058      	strb	r0, [r3, #1]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    dfe8:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    dfea:	f103 0320 	add.w	r3, r3, #32
    dfee:	d1f6      	bne.n	dfde <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    dff0:	4c09      	ldr	r4, [pc, #36]	; (e018 <usb_d_init+0x58>)
    dff2:	490a      	ldr	r1, [pc, #40]	; (e01c <usb_d_init+0x5c>)
    dff4:	2000      	movs	r0, #0
    dff6:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    dff8:	4909      	ldr	r1, [pc, #36]	; (e020 <usb_d_init+0x60>)
    dffa:	2001      	movs	r0, #1
    dffc:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    dffe:	2002      	movs	r0, #2
    e000:	4908      	ldr	r1, [pc, #32]	; (e024 <usb_d_init+0x64>)
    e002:	47a0      	blx	r4
	return ERR_NONE;
    e004:	2000      	movs	r0, #0
}
    e006:	bd10      	pop	{r4, pc}
    e008:	0000c135 	.word	0x0000c135
    e00c:	00012519 	.word	0x00012519
    e010:	20000e04 	.word	0x20000e04
    e014:	0000df25 	.word	0x0000df25
    e018:	0000c7fd 	.word	0x0000c7fd
    e01c:	0000df49 	.word	0x0000df49
    e020:	0000ddfd 	.word	0x0000ddfd
    e024:	0000de31 	.word	0x0000de31

0000e028 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    e028:	4b00      	ldr	r3, [pc, #0]	; (e02c <usb_d_register_callback+0x4>)
    e02a:	4718      	bx	r3
    e02c:	0000c7d9 	.word	0x0000c7d9

0000e030 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    e030:	4b00      	ldr	r3, [pc, #0]	; (e034 <usb_d_enable+0x4>)
    e032:	4718      	bx	r3
    e034:	0000c211 	.word	0x0000c211

0000e038 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    e038:	4b00      	ldr	r3, [pc, #0]	; (e03c <usb_d_attach+0x4>)
    e03a:	4718      	bx	r3
    e03c:	0000c26d 	.word	0x0000c26d

0000e040 <usb_d_get_frame_num>:
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
	return _usb_d_dev_get_frame_n();
    e040:	4b00      	ldr	r3, [pc, #0]	; (e044 <usb_d_get_frame_num+0x4>)
    e042:	4718      	bx	r3
    e044:	0000c28b 	.word	0x0000c28b

0000e048 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    e048:	4b00      	ldr	r3, [pc, #0]	; (e04c <usb_d_set_address+0x4>)
    e04a:	4718      	bx	r3
    e04c:	0000c27f 	.word	0x0000c27f

0000e050 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    e050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    e052:	4c11      	ldr	r4, [pc, #68]	; (e098 <usb_d_ep_init+0x48>)
{
    e054:	4606      	mov	r6, r0
    e056:	460d      	mov	r5, r1
    e058:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    e05a:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    e05c:	2800      	cmp	r0, #0
    e05e:	da14      	bge.n	e08a <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    e060:	20ff      	movs	r0, #255	; 0xff
    e062:	47a0      	blx	r4
		if (ep_index < 0) {
    e064:	1e04      	subs	r4, r0, #0
    e066:	db13      	blt.n	e090 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    e068:	4b0c      	ldr	r3, [pc, #48]	; (e09c <usb_d_ep_init+0x4c>)
    e06a:	463a      	mov	r2, r7
    e06c:	4629      	mov	r1, r5
    e06e:	4630      	mov	r0, r6
    e070:	4798      	blx	r3
	if (rc < 0) {
    e072:	2800      	cmp	r0, #0
    e074:	db08      	blt.n	e088 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    e076:	4b0a      	ldr	r3, [pc, #40]	; (e0a0 <usb_d_ep_init+0x50>)
    e078:	0162      	lsls	r2, r4, #5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    e07a:	f005 0503 	and.w	r5, r5, #3
	ept->xfer.hdr.ep   = ep;
    e07e:	eb03 1444 	add.w	r4, r3, r4, lsl #5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    e082:	549d      	strb	r5, [r3, r2]
	ept->xfer.hdr.ep   = ep;
    e084:	7066      	strb	r6, [r4, #1]
	return ERR_NONE;
    e086:	2000      	movs	r0, #0
}
    e088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    e08a:	f06f 0013 	mvn.w	r0, #19
    e08e:	e7fb      	b.n	e088 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    e090:	f06f 0014 	mvn.w	r0, #20
    e094:	e7f8      	b.n	e088 <usb_d_ep_init+0x38>
    e096:	bf00      	nop
    e098:	0000ddcd 	.word	0x0000ddcd
    e09c:	0000c299 	.word	0x0000c299
    e0a0:	20000e04 	.word	0x20000e04

0000e0a4 <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    e0a4:	2100      	movs	r1, #0
{
    e0a6:	4602      	mov	r2, r0
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    e0a8:	4b01      	ldr	r3, [pc, #4]	; (e0b0 <usb_d_ep0_init+0xc>)
    e0aa:	4608      	mov	r0, r1
    e0ac:	4718      	bx	r3
    e0ae:	bf00      	nop
    e0b0:	0000e051 	.word	0x0000e051

0000e0b4 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    e0b4:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e0b6:	4b07      	ldr	r3, [pc, #28]	; (e0d4 <usb_d_ep_deinit+0x20>)
{
    e0b8:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e0ba:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    e0bc:	1e04      	subs	r4, r0, #0
    e0be:	db07      	blt.n	e0d0 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    e0c0:	4b05      	ldr	r3, [pc, #20]	; (e0d8 <usb_d_ep_deinit+0x24>)
    e0c2:	4628      	mov	r0, r5
    e0c4:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    e0c6:	4805      	ldr	r0, [pc, #20]	; (e0dc <usb_d_ep_deinit+0x28>)
    e0c8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    e0cc:	23ff      	movs	r3, #255	; 0xff
    e0ce:	7043      	strb	r3, [r0, #1]
}
    e0d0:	bd38      	pop	{r3, r4, r5, pc}
    e0d2:	bf00      	nop
    e0d4:	0000ddcd 	.word	0x0000ddcd
    e0d8:	0000c359 	.word	0x0000c359
    e0dc:	20000e04 	.word	0x20000e04

0000e0e0 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    e0e0:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e0e2:	4b0c      	ldr	r3, [pc, #48]	; (e114 <usb_d_ep_enable+0x34>)
{
    e0e4:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e0e6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    e0e8:	1e03      	subs	r3, r0, #0
    e0ea:	db10      	blt.n	e10e <usb_d_ep_enable+0x2e>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    e0ec:	015b      	lsls	r3, r3, #5
    e0ee:	4c0a      	ldr	r4, [pc, #40]	; (e118 <usb_d_ep_enable+0x38>)
    e0f0:	5ce2      	ldrb	r2, [r4, r3]
    e0f2:	441c      	add	r4, r3
    e0f4:	2a00      	cmp	r2, #0
    e0f6:	bf0c      	ite	eq
    e0f8:	2202      	moveq	r2, #2
    e0fa:	2201      	movne	r2, #1
	rc                  = _usb_d_dev_ep_enable(ep);
    e0fc:	4b07      	ldr	r3, [pc, #28]	; (e11c <usb_d_ep_enable+0x3c>)
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    e0fe:	70a2      	strb	r2, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    e100:	4628      	mov	r0, r5
    e102:	4798      	blx	r3
	if (rc < 0) {
    e104:	2800      	cmp	r0, #0
    e106:	da01      	bge.n	e10c <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    e108:	2300      	movs	r3, #0
    e10a:	70a3      	strb	r3, [r4, #2]
	}
	return rc;
}
    e10c:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    e10e:	f06f 0011 	mvn.w	r0, #17
    e112:	e7fb      	b.n	e10c <usb_d_ep_enable+0x2c>
    e114:	0000ddcd 	.word	0x0000ddcd
    e118:	20000e04 	.word	0x20000e04
    e11c:	0000c3cd 	.word	0x0000c3cd

0000e120 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    e124:	f890 8008 	ldrb.w	r8, [r0, #8]
    e128:	4b31      	ldr	r3, [pc, #196]	; (e1f0 <usb_d_ep_transfer+0xd0>)
{
    e12a:	4605      	mov	r5, r0
    e12c:	b087      	sub	sp, #28
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    e12e:	4640      	mov	r0, r8
    e130:	4798      	blx	r3
	uint32_t              len = xfer->size;
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    e132:	1e04      	subs	r4, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    e134:	7a6f      	ldrb	r7, [r5, #9]
	uint32_t              len = xfer->size;
    e136:	686e      	ldr	r6, [r5, #4]
	if (ep_index < 0) {
    e138:	db55      	blt.n	e1e6 <usb_d_ep_transfer+0xc6>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
	state = ept->xfer.hdr.state;
    e13a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; e204 <usb_d_ep_transfer+0xe4>
	atomic_enter_critical(&flags);
    e13e:	4b2d      	ldr	r3, [pc, #180]	; (e1f4 <usb_d_ep_transfer+0xd4>)
	state = ept->xfer.hdr.state;
    e140:	ea4f 1b44 	mov.w	fp, r4, lsl #5
    e144:	eb0a 1444 	add.w	r4, sl, r4, lsl #5
	atomic_enter_critical(&flags);
    e148:	a802      	add	r0, sp, #8
    e14a:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    e14c:	78a3      	ldrb	r3, [r4, #2]
    e14e:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    e152:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e156:	2b01      	cmp	r3, #1
    e158:	fa5f f983 	uxtb.w	r9, r3
    e15c:	4b26      	ldr	r3, [pc, #152]	; (e1f8 <usb_d_ep_transfer+0xd8>)
    e15e:	d11a      	bne.n	e196 <usb_d_ep_transfer+0x76>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    e160:	2203      	movs	r2, #3
    e162:	70a2      	strb	r2, [r4, #2]
		atomic_leave_critical(&flags);
    e164:	a802      	add	r0, sp, #8
    e166:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e168:	f81a 300b 	ldrb.w	r3, [sl, fp]
    e16c:	b1fb      	cbz	r3, e1ae <usb_d_ep_transfer+0x8e>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    e16e:	1e3b      	subs	r3, r7, #0
    e170:	ea4f 12d8 	mov.w	r2, r8, lsr #7
    e174:	bf18      	it	ne
    e176:	2301      	movne	r3, #1
	struct usb_d_transfer trans
    e178:	6828      	ldr	r0, [r5, #0]
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    e17a:	7a29      	ldrb	r1, [r5, #8]
	struct usb_d_transfer trans
    e17c:	e9cd 0603 	strd	r0, r6, [sp, #12]
    e180:	b372      	cbz	r2, e1e0 <usb_d_ep_transfer+0xc0>
    e182:	f041 0280 	orr.w	r2, r1, #128	; 0x80
    e186:	f88d 3015 	strb.w	r3, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    e18a:	a803      	add	r0, sp, #12
    e18c:	4b1b      	ldr	r3, [pc, #108]	; (e1fc <usb_d_ep_transfer+0xdc>)
	struct usb_d_transfer trans
    e18e:	f88d 2014 	strb.w	r2, [sp, #20]
	return _usb_d_dev_ep_trans(&trans);
    e192:	4798      	blx	r3
	return rc;
    e194:	e008      	b.n	e1a8 <usb_d_ep_transfer+0x88>
		atomic_leave_critical(&flags);
    e196:	a802      	add	r0, sp, #8
    e198:	4798      	blx	r3
		switch (state) {
    e19a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e19e:	2b06      	cmp	r3, #6
    e1a0:	b2da      	uxtb	r2, r3
    e1a2:	d823      	bhi.n	e1ec <usb_d_ep_transfer+0xcc>
    e1a4:	4b16      	ldr	r3, [pc, #88]	; (e200 <usb_d_ep_transfer+0xe0>)
    e1a6:	5698      	ldrsb	r0, [r3, r2]
}
    e1a8:	b007      	add	sp, #28
    e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    e1ae:	7ce1      	ldrb	r1, [r4, #19]
    e1b0:	7ca2      	ldrb	r2, [r4, #18]
    e1b2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    e1b6:	b292      	uxth	r2, r2
		if (req_len == 0) {
    e1b8:	b92a      	cbnz	r2, e1c6 <usb_d_ep_transfer+0xa6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    e1ba:	2304      	movs	r3, #4
    e1bc:	70a3      	strb	r3, [r4, #2]
			len                 = 0;
    e1be:	4616      	mov	r6, r2
			zlp                 = true;
    e1c0:	464b      	mov	r3, r9
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    e1c2:	461a      	mov	r2, r3
    e1c4:	e7d8      	b.n	e178 <usb_d_ep_transfer+0x58>
			if (dir) {
    e1c6:	f994 100c 	ldrsb.w	r1, [r4, #12]
    e1ca:	4296      	cmp	r6, r2
    e1cc:	bf28      	it	cs
    e1ce:	4616      	movcs	r6, r2
    e1d0:	2900      	cmp	r1, #0
    e1d2:	daf6      	bge.n	e1c2 <usb_d_ep_transfer+0xa2>
				zlp = (req_len > len);
    e1d4:	42b2      	cmp	r2, r6
    e1d6:	bf94      	ite	ls
    e1d8:	2300      	movls	r3, #0
    e1da:	2301      	movhi	r3, #1
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    e1dc:	464a      	mov	r2, r9
    e1de:	e7cb      	b.n	e178 <usb_d_ep_transfer+0x58>
	struct usb_d_transfer trans
    e1e0:	f001 020f 	and.w	r2, r1, #15
    e1e4:	e7cf      	b.n	e186 <usb_d_ep_transfer+0x66>
		return -USB_ERR_PARAM;
    e1e6:	f06f 0011 	mvn.w	r0, #17
    e1ea:	e7dd      	b.n	e1a8 <usb_d_ep_transfer+0x88>
		switch (state) {
    e1ec:	2001      	movs	r0, #1
    e1ee:	e7db      	b.n	e1a8 <usb_d_ep_transfer+0x88>
    e1f0:	0000ddcd 	.word	0x0000ddcd
    e1f4:	00010d8d 	.word	0x00010d8d
    e1f8:	00010d9b 	.word	0x00010d9b
    e1fc:	0000c65d 	.word	0x0000c65d
    e200:	00015048 	.word	0x00015048
    e204:	20000e04 	.word	0x20000e04

0000e208 <usb_d_ep_get_status>:
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
	ept->xfer.hdr.status = USB_XFER_ABORT;
}

int32_t usb_d_ep_get_status(const uint8_t ep, struct usb_d_ep_status *stat)
{
    e208:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t                    ep_index = _usb_d_find_ep(ep);
    e20a:	4b12      	ldr	r3, [pc, #72]	; (e254 <usb_d_ep_get_status+0x4c>)
	struct usb_d_ep *         ept      = &usb_d_inst.ep[ep_index];
	struct usb_d_trans_status tmp;
	uint8_t                   state = ept->xfer.hdr.state;
    e20c:	4d12      	ldr	r5, [pc, #72]	; (e258 <usb_d_ep_get_status+0x50>)
{
    e20e:	b085      	sub	sp, #20
    e210:	4606      	mov	r6, r0
    e212:	460c      	mov	r4, r1
	int8_t                    ep_index = _usb_d_find_ep(ep);
    e214:	4798      	blx	r3
	uint8_t                   state = ept->xfer.hdr.state;
    e216:	eb05 1540 	add.w	r5, r5, r0, lsl #5
	if (ep_index < 0) {
    e21a:	2800      	cmp	r0, #0
	uint8_t                   state = ept->xfer.hdr.state;
    e21c:	78af      	ldrb	r7, [r5, #2]
	if (ep_index < 0) {
    e21e:	db14      	blt.n	e24a <usb_d_ep_get_status+0x42>
		return -USB_ERR_PARAM;
	}
	if (stat) {
    e220:	b15c      	cbz	r4, e23a <usb_d_ep_get_status+0x32>
		/* Check transaction status if transferring data. */
		_usb_d_dev_ep_get_status(ep, &tmp);
    e222:	4b0e      	ldr	r3, [pc, #56]	; (e25c <usb_d_ep_get_status+0x54>)
    e224:	a901      	add	r1, sp, #4
    e226:	4630      	mov	r0, r6
    e228:	4798      	blx	r3
		stat->ep    = ep;
    e22a:	7026      	strb	r6, [r4, #0]
		stat->state = state;
    e22c:	70e7      	strb	r7, [r4, #3]
		stat->code  = ept->xfer.hdr.status;
    e22e:	78eb      	ldrb	r3, [r5, #3]
    e230:	7063      	strb	r3, [r4, #1]
		stat->count = tmp.count;
    e232:	9b02      	ldr	r3, [sp, #8]
    e234:	6063      	str	r3, [r4, #4]
		stat->size  = tmp.size;
    e236:	9b01      	ldr	r3, [sp, #4]
    e238:	60a3      	str	r3, [r4, #8]
	}
	switch (state) {
    e23a:	2f06      	cmp	r7, #6
    e23c:	d808      	bhi.n	e250 <usb_d_ep_get_status+0x48>
    e23e:	4b08      	ldr	r3, [pc, #32]	; (e260 <usb_d_ep_get_status+0x58>)
    e240:	443b      	add	r3, r7
    e242:	f993 0007 	ldrsb.w	r0, [r3, #7]
		return -USB_ERR_FUNC;
	default:
		/* Busy */
		return USB_BUSY;
	}
}
    e246:	b005      	add	sp, #20
    e248:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_PARAM;
    e24a:	f06f 0011 	mvn.w	r0, #17
    e24e:	e7fa      	b.n	e246 <usb_d_ep_get_status+0x3e>
    e250:	2001      	movs	r0, #1
    e252:	e7f8      	b.n	e246 <usb_d_ep_get_status+0x3e>
    e254:	0000ddcd 	.word	0x0000ddcd
    e258:	20000e04 	.word	0x20000e04
    e25c:	0000c765 	.word	0x0000c765
    e260:	00015048 	.word	0x00015048

0000e264 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    e264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e268:	4605      	mov	r5, r0
	if (ctrl == USB_EP_HALT_CLR) {
    e26a:	460c      	mov	r4, r1
    e26c:	b9d9      	cbnz	r1, e2a6 <usb_d_ep_halt+0x42>
	int8_t           ep_index = _usb_d_find_ep(ep);
    e26e:	4b13      	ldr	r3, [pc, #76]	; (e2bc <usb_d_ep_halt+0x58>)
    e270:	4798      	blx	r3
	if (ep_index < 0) {
    e272:	1e06      	subs	r6, r0, #0
    e274:	db1e      	blt.n	e2b4 <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    e276:	4f12      	ldr	r7, [pc, #72]	; (e2c0 <usb_d_ep_halt+0x5c>)
    e278:	2102      	movs	r1, #2
    e27a:	4628      	mov	r0, r5
    e27c:	47b8      	blx	r7
    e27e:	b180      	cbz	r0, e2a2 <usb_d_ep_halt+0x3e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    e280:	4621      	mov	r1, r4
    e282:	4628      	mov	r0, r5
    e284:	47b8      	blx	r7
		if (rc < 0) {
    e286:	2800      	cmp	r0, #0
    e288:	db0b      	blt.n	e2a2 <usb_d_ep_halt+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    e28a:	480e      	ldr	r0, [pc, #56]	; (e2c4 <usb_d_ep_halt+0x60>)
    e28c:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    e290:	f240 3301 	movw	r3, #769	; 0x301
    e294:	8043      	strh	r3, [r0, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    e296:	4622      	mov	r2, r4
    e298:	69c3      	ldr	r3, [r0, #28]
    e29a:	2103      	movs	r1, #3
    e29c:	4628      	mov	r0, r5
    e29e:	4798      	blx	r3
	return ERR_NONE;
    e2a0:	4620      	mov	r0, r4
	} else if (ctrl == USB_EP_HALT_SET) {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
	}
}
    e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (ctrl == USB_EP_HALT_SET) {
    e2a6:	2901      	cmp	r1, #1
}
    e2a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e2ac:	4b04      	ldr	r3, [pc, #16]	; (e2c0 <usb_d_ep_halt+0x5c>)
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    e2ae:	bf18      	it	ne
    e2b0:	2102      	movne	r1, #2
    e2b2:	4718      	bx	r3
		return -USB_ERR_PARAM;
    e2b4:	f06f 0011 	mvn.w	r0, #17
    e2b8:	e7f3      	b.n	e2a2 <usb_d_ep_halt+0x3e>
    e2ba:	bf00      	nop
    e2bc:	0000ddcd 	.word	0x0000ddcd
    e2c0:	0000c53d 	.word	0x0000c53d
    e2c4:	20000e04 	.word	0x20000e04

0000e2c8 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    e2c8:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e2ca:	4b0d      	ldr	r3, [pc, #52]	; (e300 <usb_d_ep_register_callback+0x38>)
{
    e2cc:	460d      	mov	r5, r1
    e2ce:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    e2d0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;

	f = (FUNC_PTR)func; // SUKU EDIT

	if (ep_index < 0) {
    e2d2:	2800      	cmp	r0, #0
    e2d4:	db08      	blt.n	e2e8 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    e2d6:	2d01      	cmp	r5, #1
    e2d8:	d007      	beq.n	e2ea <usb_d_ep_register_callback+0x22>
    e2da:	2d02      	cmp	r5, #2
    e2dc:	d00a      	beq.n	e2f4 <usb_d_ep_register_callback+0x2c>
    e2de:	b91d      	cbnz	r5, e2e8 <usb_d_ep_register_callback+0x20>
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    e2e0:	4b08      	ldr	r3, [pc, #32]	; (e304 <usb_d_ep_register_callback+0x3c>)
    e2e2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    e2e6:	6144      	str	r4, [r0, #20]
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    e2e8:	bd38      	pop	{r3, r4, r5, pc}
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    e2ea:	4b06      	ldr	r3, [pc, #24]	; (e304 <usb_d_ep_register_callback+0x3c>)
    e2ec:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    e2f0:	6184      	str	r4, [r0, #24]
		break;
    e2f2:	e7f9      	b.n	e2e8 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    e2f4:	4b03      	ldr	r3, [pc, #12]	; (e304 <usb_d_ep_register_callback+0x3c>)
    e2f6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    e2fa:	61c4      	str	r4, [r0, #28]
		break;
    e2fc:	e7f4      	b.n	e2e8 <usb_d_ep_register_callback+0x20>
    e2fe:	bf00      	nop
    e300:	0000ddcd 	.word	0x0000ddcd
    e304:	20000e04 	.word	0x20000e04

0000e308 <RTC_Scheduler_ping_cb>:
static struct timer_task RTC_Scheduler_heartbeat;

void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{

	pingflag++;
    e308:	4a0d      	ldr	r2, [pc, #52]	; (e340 <RTC_Scheduler_ping_cb+0x38>)
    e30a:	7813      	ldrb	r3, [r2, #0]
    e30c:	3301      	adds	r3, #1
    e30e:	b2db      	uxtb	r3, r3
    e310:	7013      	strb	r3, [r2, #0]
	
	switch (pingflag%4)
    e312:	7813      	ldrb	r3, [r2, #0]
    e314:	f003 0303 	and.w	r3, r3, #3
    e318:	2b02      	cmp	r3, #2
    e31a:	f642 7248 	movw	r2, #12104	; 0x2f48
    e31e:	d00a      	beq.n	e336 <RTC_Scheduler_ping_cb+0x2e>
    e320:	2b03      	cmp	r3, #3
    e322:	d00a      	beq.n	e33a <RTC_Scheduler_ping_cb+0x32>
    e324:	2b01      	cmp	r3, #1
    e326:	d003      	beq.n	e330 <RTC_Scheduler_ping_cb+0x28>
	{
		case 0:
			GRID_PORT_N.ping_flag = 1;
    e328:	4b06      	ldr	r3, [pc, #24]	; (e344 <RTC_Scheduler_ping_cb+0x3c>)
			break;
		case 2:
			GRID_PORT_S.ping_flag = 1;
			break;
		case 3:
			GRID_PORT_W.ping_flag = 1;
    e32a:	2101      	movs	r1, #1
    e32c:	5499      	strb	r1, [r3, r2]
			break;
	}
	
}
    e32e:	4770      	bx	lr
			GRID_PORT_E.ping_flag = 1;
    e330:	4905      	ldr	r1, [pc, #20]	; (e348 <RTC_Scheduler_ping_cb+0x40>)
    e332:	548b      	strb	r3, [r1, r2]
			break;
    e334:	4770      	bx	lr
			GRID_PORT_S.ping_flag = 1;
    e336:	4b05      	ldr	r3, [pc, #20]	; (e34c <RTC_Scheduler_ping_cb+0x44>)
    e338:	e7f7      	b.n	e32a <RTC_Scheduler_ping_cb+0x22>
			GRID_PORT_W.ping_flag = 1;
    e33a:	4b05      	ldr	r3, [pc, #20]	; (e350 <RTC_Scheduler_ping_cb+0x48>)
    e33c:	e7f5      	b.n	e32a <RTC_Scheduler_ping_cb+0x22>
    e33e:	bf00      	nop
    e340:	20000fa4 	.word	0x20000fa4
    e344:	200010dc 	.word	0x200010dc
    e348:	200115fc 	.word	0x200115fc
    e34c:	2000b660 	.word	0x2000b660
    e350:	20008260 	.word	0x20008260

0000e354 <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    e354:	4b01      	ldr	r3, [pc, #4]	; (e35c <RTC_Scheduler_report_cb+0x8>)
    e356:	2201      	movs	r2, #1
    e358:	705a      	strb	r2, [r3, #1]
	
}
    e35a:	4770      	bx	lr
    e35c:	20000fa4 	.word	0x20000fa4

0000e360 <RTC_Scheduler_heartbeat_cb>:
{
    e360:	b410      	push	{r4}
	grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    e362:	4c04      	ldr	r4, [pc, #16]	; (e374 <RTC_Scheduler_heartbeat_cb+0x14>)
    e364:	4804      	ldr	r0, [pc, #16]	; (e378 <RTC_Scheduler_heartbeat_cb+0x18>)
    e366:	2200      	movs	r2, #0
    e368:	46a4      	mov	ip, r4
    e36a:	230c      	movs	r3, #12
}
    e36c:	f85d 4b04 	ldr.w	r4, [sp], #4
	grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    e370:	4611      	mov	r1, r2
    e372:	4760      	bx	ip
    e374:	0000a1f5 	.word	0x0000a1f5
    e378:	2001454c 	.word	0x2001454c

0000e37c <RTC_Scheduler_realtime_cb>:
{
    e37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	grid_sys_rtc_tick_time(&grid_sys_state);	
    e37e:	4d16      	ldr	r5, [pc, #88]	; (e3d8 <RTC_Scheduler_realtime_cb+0x5c>)
    e380:	4b16      	ldr	r3, [pc, #88]	; (e3dc <RTC_Scheduler_realtime_cb+0x60>)
    e382:	4628      	mov	r0, r5
    e384:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    e386:	4816      	ldr	r0, [pc, #88]	; (e3e0 <RTC_Scheduler_realtime_cb+0x64>)
    e388:	4b16      	ldr	r3, [pc, #88]	; (e3e4 <RTC_Scheduler_realtime_cb+0x68>)
    e38a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    e38c:	4b16      	ldr	r3, [pc, #88]	; (e3e8 <RTC_Scheduler_realtime_cb+0x6c>)
    e38e:	a801      	add	r0, sp, #4
    e390:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    e392:	4a16      	ldr	r2, [pc, #88]	; (e3ec <RTC_Scheduler_realtime_cb+0x70>)
    e394:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    e398:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    e39c:	f8d2 4110 	ldr.w	r4, [r2, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    e3a0:	405c      	eors	r4, r3
    e3a2:	400c      	ands	r4, r1
    e3a4:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    e3a6:	a801      	add	r0, sp, #4
    e3a8:	4b11      	ldr	r3, [pc, #68]	; (e3f0 <RTC_Scheduler_realtime_cb+0x74>)
    e3aa:	4798      	blx	r3
	if (mapmode_value != grid_sys_state.mapmodestate){
    e3ac:	7c2a      	ldrb	r2, [r5, #16]
	uint8_t mapmode_value = !gpio_get_pin_level(MAP_MODE);
    e3ae:	f484 6300 	eor.w	r3, r4, #2048	; 0x800
    e3b2:	f3c3 23c0 	ubfx	r3, r3, #11, #1
	if (mapmode_value != grid_sys_state.mapmodestate){
    e3b6:	429a      	cmp	r2, r3
    e3b8:	d009      	beq.n	e3ce <RTC_Scheduler_realtime_cb+0x52>
		grid_sys_state.mapmodestate = mapmode_value;
    e3ba:	742b      	strb	r3, [r5, #16]
		if (grid_sys_state.mapmodestate == 0){ // RELEASE
    e3bc:	7c2b      	ldrb	r3, [r5, #16]
    e3be:	4c0d      	ldr	r4, [pc, #52]	; (e3f4 <RTC_Scheduler_realtime_cb+0x78>)
    e3c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    e3c4:	b92b      	cbnz	r3, e3d2 <RTC_Scheduler_realtime_cb+0x56>
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_RELEASE);
    e3c6:	2308      	movs	r3, #8
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_PRESS);		
    e3c8:	480b      	ldr	r0, [pc, #44]	; (e3f8 <RTC_Scheduler_realtime_cb+0x7c>)
    e3ca:	4611      	mov	r1, r2
    e3cc:	47a0      	blx	r4
}
    e3ce:	b003      	add	sp, #12
    e3d0:	bd30      	pop	{r4, r5, pc}
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_PRESS);		
    e3d2:	2307      	movs	r3, #7
    e3d4:	2200      	movs	r2, #0
    e3d6:	e7f7      	b.n	e3c8 <RTC_Scheduler_realtime_cb+0x4c>
    e3d8:	20006f94 	.word	0x20006f94
    e3dc:	00008f93 	.word	0x00008f93
    e3e0:	2000823c 	.word	0x2000823c
    e3e4:	0000854b 	.word	0x0000854b
    e3e8:	00010d8d 	.word	0x00010d8d
    e3ec:	41008000 	.word	0x41008000
    e3f0:	00010d9b 	.word	0x00010d9b
    e3f4:	0000a1f5 	.word	0x0000a1f5
    e3f8:	2001454c 	.word	0x2001454c

0000e3fc <init_timer>:



void init_timer(void)
{
    e3fc:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    e3fe:	4c18      	ldr	r4, [pc, #96]	; (e460 <init_timer+0x64>)
	
	RTC_Scheduler_realtime.interval = 1;
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    e400:	4d18      	ldr	r5, [pc, #96]	; (e464 <init_timer+0x68>)
    e402:	4e19      	ldr	r6, [pc, #100]	; (e468 <init_timer+0x6c>)
	RTC_Scheduler_heartbeat.interval = RTC1MS*GRID_PARAMETER_HEARTBEAT_interval;
    e404:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    e408:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    e40a:	4a18      	ldr	r2, [pc, #96]	; (e46c <init_timer+0x70>)
    e40c:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    e40e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
	RTC_Scheduler_report.interval = RTC1SEC/10;
    e412:	f240 6266 	movw	r2, #1638	; 0x666
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    e416:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_report.interval = RTC1SEC/10;
    e418:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    e41a:	4b15      	ldr	r3, [pc, #84]	; (e470 <init_timer+0x74>)
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    e41c:	4a15      	ldr	r2, [pc, #84]	; (e474 <init_timer+0x78>)
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    e41e:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    e420:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    e422:	2301      	movs	r3, #1
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    e424:	4a14      	ldr	r2, [pc, #80]	; (e478 <init_timer+0x7c>)
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    e426:	7523      	strb	r3, [r4, #20]
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    e428:	1d21      	adds	r1, r4, #4
    e42a:	4628      	mov	r0, r5
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    e42c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    e430:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	RTC_Scheduler_realtime.interval = 1;
    e434:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    e436:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    e43a:	64e2      	str	r2, [r4, #76]	; 0x4c
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    e43c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    e43e:	f104 0118 	add.w	r1, r4, #24
    e442:	4628      	mov	r0, r5
    e444:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    e446:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    e44a:	4628      	mov	r0, r5
    e44c:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    e44e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    e452:	4628      	mov	r0, r5
    e454:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    e456:	4628      	mov	r0, r5
    e458:	4b08      	ldr	r3, [pc, #32]	; (e47c <init_timer+0x80>)
	
}
    e45a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	timer_start(&RTC_Scheduler);
    e45e:	4718      	bx	r3
    e460:	20000fa4 	.word	0x20000fa4
    e464:	20014a48 	.word	0x20014a48
    e468:	0000b8d5 	.word	0x0000b8d5
    e46c:	0000e361 	.word	0x0000e361
    e470:	0000e309 	.word	0x0000e309
    e474:	0000e355 	.word	0x0000e355
    e478:	0000e37d 	.word	0x0000e37d
    e47c:	0000b895 	.word	0x0000b895

0000e480 <main>:

//====================== USB TEST =====================//

int main(void)
{
    e480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e484:	ed2d 8b02 	vpush	{d8}

	


	atmel_start_init();	
    e488:	4b96      	ldr	r3, [pc, #600]	; (e6e4 <main+0x264>)
    
            
            
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    e48a:	4c97      	ldr	r4, [pc, #604]	; (e6e8 <main+0x268>)
    
	
	while (1) {
	
			
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    e48c:	4d97      	ldr	r5, [pc, #604]	; (e6ec <main+0x26c>)
				
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
				
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    e48e:	ed9f 8a98 	vldr	s16, [pc, #608]	; e6f0 <main+0x270>
{
    e492:	b091      	sub	sp, #68	; 0x44
	atmel_start_init();	
    e494:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    e496:	4997      	ldr	r1, [pc, #604]	; (e6f4 <main+0x274>)
    e498:	4897      	ldr	r0, [pc, #604]	; (e6f8 <main+0x278>)
    e49a:	47a0      	blx	r4
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "D51 Init");
    e49c:	4997      	ldr	r1, [pc, #604]	; (e6fc <main+0x27c>)
    e49e:	4896      	ldr	r0, [pc, #600]	; (e6f8 <main+0x278>)
    e4a0:	47a0      	blx	r4
	grid_d51_init(); // Check User Row
    e4a2:	4b97      	ldr	r3, [pc, #604]	; (e700 <main+0x280>)
    e4a4:	4798      	blx	r3
	audiodf_midi_init();
    e4a6:	4b97      	ldr	r3, [pc, #604]	; (e704 <main+0x284>)
    e4a8:	4798      	blx	r3
	composite_device_start();
    e4aa:	4b97      	ldr	r3, [pc, #604]	; (e708 <main+0x288>)
    e4ac:	4798      	blx	r3
	grid_usb_serial_init();
    e4ae:	4b97      	ldr	r3, [pc, #604]	; (e70c <main+0x28c>)
    e4b0:	4798      	blx	r3
	grid_usb_midi_init();
    e4b2:	4b97      	ldr	r3, [pc, #604]	; (e710 <main+0x290>)
    e4b4:	4798      	blx	r3
	grid_keyboard_init(&grid_keyboard_state);
    e4b6:	4b97      	ldr	r3, [pc, #604]	; (e714 <main+0x294>)
    e4b8:	4897      	ldr	r0, [pc, #604]	; (e718 <main+0x298>)
    e4ba:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    e4bc:	4997      	ldr	r1, [pc, #604]	; (e71c <main+0x29c>)
    e4be:	488e      	ldr	r0, [pc, #568]	; (e6f8 <main+0x278>)
    e4c0:	47a0      	blx	r4
	rand_sync_enable(&RAND_0);	
    e4c2:	4b97      	ldr	r3, [pc, #604]	; (e720 <main+0x2a0>)
    e4c4:	4897      	ldr	r0, [pc, #604]	; (e724 <main+0x2a4>)
    e4c6:	4798      	blx	r3
	grid_module_common_init();
    e4c8:	4b97      	ldr	r3, [pc, #604]	; (e728 <main+0x2a8>)
    e4ca:	4798      	blx	r3
    grid_ui_reinit(&grid_ui_state);
    e4cc:	4b97      	ldr	r3, [pc, #604]	; (e72c <main+0x2ac>)
    e4ce:	4898      	ldr	r0, [pc, #608]	; (e730 <main+0x2b0>)
    e4d0:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    e4d2:	4998      	ldr	r1, [pc, #608]	; (e734 <main+0x2b4>)
    e4d4:	4888      	ldr	r0, [pc, #544]	; (e6f8 <main+0x278>)
    e4d6:	47a0      	blx	r4
	init_timer();
    e4d8:	4b97      	ldr	r3, [pc, #604]	; (e738 <main+0x2b8>)
    e4da:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Entering Main Loop");
    e4dc:	4997      	ldr	r1, [pc, #604]	; (e73c <main+0x2bc>)
    e4de:	4886      	ldr	r0, [pc, #536]	; (e6f8 <main+0x278>)
    e4e0:	47a0      	blx	r4
	grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    e4e2:	4997      	ldr	r1, [pc, #604]	; (e740 <main+0x2c0>)
    e4e4:	4897      	ldr	r0, [pc, #604]	; (e744 <main+0x2c4>)
    e4e6:	4b98      	ldr	r3, [pc, #608]	; (e748 <main+0x2c8>)
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN	
    e4e8:	4c96      	ldr	r4, [pc, #600]	; (e744 <main+0x2c4>)
	grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    e4ea:	4798      	blx	r3
	uint8_t usb_init_flag = 0;	
    e4ec:	f04f 0b00 	mov.w	fp, #0
	grid_ui_nvm_load_all_configuration(&grid_ui_state, &grid_nvm_state);	
    e4f0:	4993      	ldr	r1, [pc, #588]	; (e740 <main+0x2c0>)
    e4f2:	488f      	ldr	r0, [pc, #572]	; (e730 <main+0x2b0>)
    e4f4:	4b95      	ldr	r3, [pc, #596]	; (e74c <main+0x2cc>)
    e4f6:	4798      	blx	r3
	uint32_t loopwarp = 0;
    e4f8:	46da      	mov	sl, fp
	uint32_t loopcounter = 0;
    e4fa:	f8cd b00c 	str.w	fp, [sp, #12]
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    e4fe:	4f94      	ldr	r7, [pc, #592]	; (e750 <main+0x2d0>)
    e500:	2101      	movs	r1, #1
    e502:	4628      	mov	r0, r5
    e504:	47b8      	blx	r7
		if (usb_init_flag == 0){
    e506:	46b8      	mov	r8, r7
    e508:	f1bb 0f00 	cmp.w	fp, #0
    e50c:	d11f      	bne.n	e54e <main+0xce>
			if (usb_d_get_frame_num() == 0){
    e50e:	4b91      	ldr	r3, [pc, #580]	; (e754 <main+0x2d4>)
    e510:	4798      	blx	r3
    e512:	b1e0      	cbz	r0, e54e <main+0xce>
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN	
    e514:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    e518:	22ff      	movs	r2, #255	; 0xff
    e51a:	e9cd b300 	strd	fp, r3, [sp]
    e51e:	4659      	mov	r1, fp
    e520:	465b      	mov	r3, fp
    e522:	4f8d      	ldr	r7, [pc, #564]	; (e758 <main+0x2d8>)
    e524:	4620      	mov	r0, r4
    e526:	47b8      	blx	r7
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    e528:	498c      	ldr	r1, [pc, #560]	; (e75c <main+0x2dc>)
    e52a:	4b6f      	ldr	r3, [pc, #444]	; (e6e8 <main+0x268>)
    e52c:	4872      	ldr	r0, [pc, #456]	; (e6f8 <main+0x278>)
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    e52e:	4f8c      	ldr	r7, [pc, #560]	; (e760 <main+0x2e0>)
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    e530:	4798      	blx	r3
				grid_sys_set_bank(&grid_sys_state, grid_sys_get_bank_number_of_first_valid(&grid_sys_state));
    e532:	4b8c      	ldr	r3, [pc, #560]	; (e764 <main+0x2e4>)
    e534:	4620      	mov	r0, r4
    e536:	4798      	blx	r3
    e538:	4b8b      	ldr	r3, [pc, #556]	; (e768 <main+0x2e8>)
    e53a:	4601      	mov	r1, r0
    e53c:	4620      	mov	r0, r4
    e53e:	4798      	blx	r3
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    e540:	465a      	mov	r2, fp
    e542:	4659      	mov	r1, fp
    e544:	4889      	ldr	r0, [pc, #548]	; (e76c <main+0x2ec>)
    e546:	2309      	movs	r3, #9
    e548:	47b8      	blx	r7
				usb_init_flag = 1;
    e54a:	f04f 0b01 	mov.w	fp, #1
 		if (grid_sys_get_bank_valid(&grid_sys_state) == 0 && loopcounter%80 == 0){
    e54e:	487d      	ldr	r0, [pc, #500]	; (e744 <main+0x2c4>)
    e550:	4b87      	ldr	r3, [pc, #540]	; (e770 <main+0x2f0>)
    e552:	4798      	blx	r3
    e554:	b988      	cbnz	r0, e57a <main+0xfa>
    e556:	9903      	ldr	r1, [sp, #12]
    e558:	9b03      	ldr	r3, [sp, #12]
    e55a:	2250      	movs	r2, #80	; 0x50
    e55c:	fbb3 f3f2 	udiv	r3, r3, r2
    e560:	fb02 1313 	mls	r3, r2, r3, r1
    e564:	b94b      	cbnz	r3, e57a <main+0xfa>
			if (grid_sys_state.bank_init_flag == 0)	{
    e566:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    e56a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    e56e:	b923      	cbnz	r3, e57a <main+0xfa>
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_REQUEST);
    e570:	487e      	ldr	r0, [pc, #504]	; (e76c <main+0x2ec>)
    e572:	4f7b      	ldr	r7, [pc, #492]	; (e760 <main+0x2e0>)
    e574:	230a      	movs	r3, #10
    e576:	4611      	mov	r1, r2
    e578:	47b8      	blx	r7
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    e57a:	4b7e      	ldr	r3, [pc, #504]	; (e774 <main+0x2f4>)
		if (scheduler_report_flag){
    e57c:	4f7e      	ldr	r7, [pc, #504]	; (e778 <main+0x2f8>)
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    e57e:	4620      	mov	r0, r4
    e580:	4798      	blx	r3
		if (scheduler_report_flag){
    e582:	787b      	ldrb	r3, [r7, #1]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    e584:	9004      	str	r0, [sp, #16]
		if (scheduler_report_flag){
    e586:	46b9      	mov	r9, r7
    e588:	2b00      	cmp	r3, #0
    e58a:	f040 817d 	bne.w	e888 <main+0x408>
		loopcounter++;
    e58e:	9b03      	ldr	r3, [sp, #12]
    e590:	3301      	adds	r3, #1
    e592:	9303      	str	r3, [sp, #12]
		grid_task_enter_task(&grid_task_state, GRID_TASK_RECEIVE);
    e594:	2102      	movs	r1, #2
    e596:	4628      	mov	r0, r5
    e598:	47c0      	blx	r8
		grid_keyboard_tx_pop();
    e59a:	4b78      	ldr	r3, [pc, #480]	; (e77c <main+0x2fc>)
    e59c:	4798      	blx	r3
		grid_midi_tx_pop();        
    e59e:	4b78      	ldr	r3, [pc, #480]	; (e780 <main+0x300>)
    e5a0:	4798      	blx	r3
		audiodf_midi_read(midi_rx_buffer,16);
    e5a2:	4b78      	ldr	r3, [pc, #480]	; (e784 <main+0x304>)
    e5a4:	4878      	ldr	r0, [pc, #480]	; (e788 <main+0x308>)
    e5a6:	2110      	movs	r1, #16
    e5a8:	4798      	blx	r3
    e5aa:	2200      	movs	r2, #0
		uint8_t found = 0;
    e5ac:	4613      	mov	r3, r2
			if (midi_rx_buffer[i]){
    e5ae:	eb09 0102 	add.w	r1, r9, r2
    e5b2:	f891 1054 	ldrb.w	r1, [r1, #84]	; 0x54
    e5b6:	b109      	cbz	r1, e5bc <main+0x13c>
				found++;
    e5b8:	3301      	adds	r3, #1
    e5ba:	b2db      	uxtb	r3, r3
		for (uint8_t i=0; i<16; i++){
    e5bc:	3201      	adds	r2, #1
    e5be:	2a10      	cmp	r2, #16
    e5c0:	d1f5      	bne.n	e5ae <main+0x12e>
		if (found){
    e5c2:	b36b      	cbz	r3, e620 <main+0x1a0>
			printf("MIDI: %02x %02x %02x %02x\n", midi_rx_buffer[0],midi_rx_buffer[1],midi_rx_buffer[2],midi_rx_buffer[3]);
    e5c4:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
    e5c8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
    e5cc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
    e5d0:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
    e5d4:	9000      	str	r0, [sp, #0]
    e5d6:	4e44      	ldr	r6, [pc, #272]	; (e6e8 <main+0x268>)
    e5d8:	486c      	ldr	r0, [pc, #432]	; (e78c <main+0x30c>)
    e5da:	47b0      	blx	r6
			uint8_t message[30] = {0};
    e5dc:	2300      	movs	r3, #0
    e5de:	4619      	mov	r1, r3
    e5e0:	9308      	str	r3, [sp, #32]
    e5e2:	221a      	movs	r2, #26
    e5e4:	4b6a      	ldr	r3, [pc, #424]	; (e790 <main+0x310>)
    e5e6:	a809      	add	r0, sp, #36	; 0x24
    e5e8:	4798      	blx	r3
			sprintf(message, "MIDI: %02x %02x %02x %02x\n", midi_rx_buffer[0],midi_rx_buffer[1],midi_rx_buffer[2],midi_rx_buffer[3]);
    e5ea:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
    e5ee:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
    e5f2:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
    e5f6:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
    e5fa:	4f66      	ldr	r7, [pc, #408]	; (e794 <main+0x314>)
    e5fc:	e9cd 1000 	strd	r1, r0, [sp]
    e600:	4962      	ldr	r1, [pc, #392]	; (e78c <main+0x30c>)
    e602:	a808      	add	r0, sp, #32
    e604:	47b8      	blx	r7
			grid_debug_print_text(message);
    e606:	4b64      	ldr	r3, [pc, #400]	; (e798 <main+0x318>)
    e608:	a808      	add	r0, sp, #32
    e60a:	4798      	blx	r3
    e60c:	2300      	movs	r3, #0
				midi_rx_buffer[i] = 0;
    e60e:	eb09 0203 	add.w	r2, r9, r3
    e612:	3301      	adds	r3, #1
    e614:	f04f 0100 	mov.w	r1, #0
			for (uint8_t i=0; i<16; i++){
    e618:	2b10      	cmp	r3, #16
				midi_rx_buffer[i] = 0;
    e61a:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
			for (uint8_t i=0; i<16; i++){
    e61e:	d1f6      	bne.n	e60e <main+0x18e>
		cdcdf_acm_read(GRID_PORT_H.rx_double_buffer, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);			
    e620:	4b5e      	ldr	r3, [pc, #376]	; (e79c <main+0x31c>)
    e622:	485f      	ldr	r0, [pc, #380]	; (e7a0 <main+0x320>)
    e624:	f44f 7100 	mov.w	r1, #512	; 0x200
    e628:	4798      	blx	r3
		uint16_t usblength = strlen(GRID_PORT_H.rx_double_buffer);
    e62a:	485d      	ldr	r0, [pc, #372]	; (e7a0 <main+0x320>)
    e62c:	4b5d      	ldr	r3, [pc, #372]	; (e7a4 <main+0x324>)
    e62e:	4798      	blx	r3
		if (usblength){	
    e630:	4681      	mov	r9, r0
    e632:	b198      	cbz	r0, e65c <main+0x1dc>
			GRID_PORT_H.rx_double_buffer_status = 1;			
    e634:	4f5c      	ldr	r7, [pc, #368]	; (e7a8 <main+0x328>)
    e636:	2301      	movs	r3, #1
    e638:	623b      	str	r3, [r7, #32]
			GRID_PORT_H.rx_double_buffer_read_start_index = 0;
    e63a:	2300      	movs	r3, #0
    e63c:	62bb      	str	r3, [r7, #40]	; 0x28
			GRID_PORT_H.rx_double_buffer_seek_start_index = usblength-3; //-3
    e63e:	1ec3      	subs	r3, r0, #3
    e640:	627b      	str	r3, [r7, #36]	; 0x24
			grid_port_receive_task(&GRID_PORT_H);
    e642:	4638      	mov	r0, r7
    e644:	4b59      	ldr	r3, [pc, #356]	; (e7ac <main+0x32c>)
    e646:	4798      	blx	r3
			for(uint32_t i=0; i<usblength; i++){
    e648:	2300      	movs	r3, #0
				GRID_PORT_H.rx_double_buffer[i] = 0;
    e64a:	f241 32b4 	movw	r2, #5044	; 0x13b4
    e64e:	18f9      	adds	r1, r7, r3
			for(uint32_t i=0; i<usblength; i++){
    e650:	3301      	adds	r3, #1
				GRID_PORT_H.rx_double_buffer[i] = 0;
    e652:	f04f 0000 	mov.w	r0, #0
			for(uint32_t i=0; i<usblength; i++){
    e656:	4599      	cmp	r9, r3
				GRID_PORT_H.rx_double_buffer[i] = 0;
    e658:	5488      	strb	r0, [r1, r2]
			for(uint32_t i=0; i<usblength; i++){
    e65a:	d1f8      	bne.n	e64e <main+0x1ce>
		if (GRID_PORT_U.rx_double_buffer_status == 0){
    e65c:	4b54      	ldr	r3, [pc, #336]	; (e7b0 <main+0x330>)
    e65e:	6a1b      	ldr	r3, [r3, #32]
    e660:	b943      	cbnz	r3, e674 <main+0x1f4>
			if (grid_nvm_ui_bulk_read_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    e662:	4933      	ldr	r1, [pc, #204]	; (e730 <main+0x2b0>)
    e664:	4836      	ldr	r0, [pc, #216]	; (e740 <main+0x2c0>)
    e666:	4b53      	ldr	r3, [pc, #332]	; (e7b4 <main+0x334>)
    e668:	4798      	blx	r3
    e66a:	b118      	cbz	r0, e674 <main+0x1f4>
				grid_nvm_ui_bulk_read_next(&grid_nvm_state, &grid_ui_state);
    e66c:	4930      	ldr	r1, [pc, #192]	; (e730 <main+0x2b0>)
    e66e:	4834      	ldr	r0, [pc, #208]	; (e740 <main+0x2c0>)
    e670:	4b51      	ldr	r3, [pc, #324]	; (e7b8 <main+0x338>)
    e672:	4798      	blx	r3
		if (grid_nvm_ui_bulk_clear_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    e674:	492e      	ldr	r1, [pc, #184]	; (e730 <main+0x2b0>)
    e676:	4832      	ldr	r0, [pc, #200]	; (e740 <main+0x2c0>)
    e678:	4b50      	ldr	r3, [pc, #320]	; (e7bc <main+0x33c>)
    e67a:	4798      	blx	r3
    e67c:	b118      	cbz	r0, e686 <main+0x206>
			grid_nvm_ui_bulk_clear_next(&grid_nvm_state, &grid_ui_state);
    e67e:	492c      	ldr	r1, [pc, #176]	; (e730 <main+0x2b0>)
    e680:	482f      	ldr	r0, [pc, #188]	; (e740 <main+0x2c0>)
    e682:	4b4f      	ldr	r3, [pc, #316]	; (e7c0 <main+0x340>)
    e684:	4798      	blx	r3
		if (grid_nvm_ui_bulk_store_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    e686:	492a      	ldr	r1, [pc, #168]	; (e730 <main+0x2b0>)
    e688:	482d      	ldr	r0, [pc, #180]	; (e740 <main+0x2c0>)
    e68a:	4b4e      	ldr	r3, [pc, #312]	; (e7c4 <main+0x344>)
    e68c:	4798      	blx	r3
    e68e:	b118      	cbz	r0, e698 <main+0x218>
			grid_nvm_ui_bulk_store_next(&grid_nvm_state, &grid_ui_state);
    e690:	4927      	ldr	r1, [pc, #156]	; (e730 <main+0x2b0>)
    e692:	482b      	ldr	r0, [pc, #172]	; (e740 <main+0x2c0>)
    e694:	4b4c      	ldr	r3, [pc, #304]	; (e7c8 <main+0x348>)
    e696:	4798      	blx	r3
		uint32_t nvmlength = GRID_PORT_U.rx_double_buffer_status;
    e698:	4b45      	ldr	r3, [pc, #276]	; (e7b0 <main+0x330>)
    e69a:	6a1b      	ldr	r3, [r3, #32]
		if (nvmlength){
    e69c:	b153      	cbz	r3, e6b4 <main+0x234>
			GRID_PORT_U.rx_double_buffer_status = 1;
    e69e:	4944      	ldr	r1, [pc, #272]	; (e7b0 <main+0x330>)
    e6a0:	2201      	movs	r2, #1
    e6a2:	620a      	str	r2, [r1, #32]
			GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    e6a4:	460a      	mov	r2, r1
			GRID_PORT_U.rx_double_buffer_seek_start_index = nvmlength-1; //-3
    e6a6:	3b01      	subs	r3, #1
			GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    e6a8:	2100      	movs	r1, #0
    e6aa:	6291      	str	r1, [r2, #40]	; 0x28
			grid_port_receive_task(&GRID_PORT_U);	
    e6ac:	4610      	mov	r0, r2
			GRID_PORT_U.rx_double_buffer_seek_start_index = nvmlength-1; //-3
    e6ae:	6253      	str	r3, [r2, #36]	; 0x24
			grid_port_receive_task(&GRID_PORT_U);	
    e6b0:	4b3e      	ldr	r3, [pc, #248]	; (e7ac <main+0x32c>)
    e6b2:	4798      	blx	r3
			for(uint32_t i=0; i<usblength; i++){
    e6b4:	2300      	movs	r3, #0
			GRID_PORT_U.rx_double_buffer[i] = 0;
    e6b6:	f241 32b4 	movw	r2, #5044	; 0x13b4
    e6ba:	493d      	ldr	r1, [pc, #244]	; (e7b0 <main+0x330>)
    e6bc:	4419      	add	r1, r3
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    e6be:	3301      	adds	r3, #1
			GRID_PORT_U.rx_double_buffer[i] = 0;
    e6c0:	f04f 0000 	mov.w	r0, #0
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    e6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			GRID_PORT_U.rx_double_buffer[i] = 0;
    e6c8:	5488      	strb	r0, [r1, r2]
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    e6ca:	d1f6      	bne.n	e6ba <main+0x23a>
		grid_port_receive_task(&GRID_PORT_N);
    e6cc:	4f37      	ldr	r7, [pc, #220]	; (e7ac <main+0x32c>)
    e6ce:	483f      	ldr	r0, [pc, #252]	; (e7cc <main+0x34c>)
    e6d0:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_E);
    e6d2:	483f      	ldr	r0, [pc, #252]	; (e7d0 <main+0x350>)
    e6d4:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_S);
    e6d6:	483f      	ldr	r0, [pc, #252]	; (e7d4 <main+0x354>)
    e6d8:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_W);							
    e6da:	483f      	ldr	r0, [pc, #252]	; (e7d8 <main+0x358>)
    e6dc:	47b8      	blx	r7
		grid_task_enter_task(&grid_task_state, GRID_TASK_REPORT);
    e6de:	2103      	movs	r1, #3
    e6e0:	4628      	mov	r0, r5
    e6e2:	e07b      	b.n	e7dc <main+0x35c>
    e6e4:	000111b5 	.word	0x000111b5
    e6e8:	0001275d 	.word	0x0001275d
    e6ec:	2000823c 	.word	0x2000823c
    e6f0:	200145c4 	.word	0x200145c4
    e6f4:	00015056 	.word	0x00015056
    e6f8:	000147e3 	.word	0x000147e3
    e6fc:	00015068 	.word	0x00015068
    e700:	00006381 	.word	0x00006381
    e704:	000044dd 	.word	0x000044dd
    e708:	0000b77d 	.word	0x0000b77d
    e70c:	0000a7ad 	.word	0x0000a7ad
    e710:	0000a9a5 	.word	0x0000a9a5
    e714:	0000aa91 	.word	0x0000aa91
    e718:	200081f0 	.word	0x200081f0
    e71c:	00015071 	.word	0x00015071
    e720:	0000d29d 	.word	0x0000d29d
    e724:	20014b0c 	.word	0x20014b0c
    e728:	0000688d 	.word	0x0000688d
    e72c:	0000a179 	.word	0x0000a179
    e730:	20006f88 	.word	0x20006f88
    e734:	0001508e 	.word	0x0001508e
    e738:	0000e3fd 	.word	0x0000e3fd
    e73c:	000150a6 	.word	0x000150a6
    e740:	200079a8 	.word	0x200079a8
    e744:	20006f94 	.word	0x20006f94
    e748:	000088c9 	.word	0x000088c9
    e74c:	000092d5 	.word	0x000092d5
    e750:	00008543 	.word	0x00008543
    e754:	0000e041 	.word	0x0000e041
    e758:	00008ff3 	.word	0x00008ff3
    e75c:	000150b9 	.word	0x000150b9
    e760:	0000a1f5 	.word	0x0000a1f5
    e764:	00008f29 	.word	0x00008f29
    e768:	00008f43 	.word	0x00008f43
    e76c:	2001454c 	.word	0x2001454c
    e770:	00008eef 	.word	0x00008eef
    e774:	00008f89 	.word	0x00008f89
    e778:	20000fa4 	.word	0x20000fa4
    e77c:	0000ab35 	.word	0x0000ab35
    e780:	0000aa15 	.word	0x0000aa15
    e784:	00004565 	.word	0x00004565
    e788:	20000ff8 	.word	0x20000ff8
    e78c:	000150d4 	.word	0x000150d4
    e790:	00012519 	.word	0x00012519
    e794:	00012b75 	.word	0x00012b75
    e798:	00008a5d 	.word	0x00008a5d
    e79c:	0000b2a9 	.word	0x0000b2a9
    e7a0:	2000f964 	.word	0x2000f964
    e7a4:	00012c81 	.word	0x00012c81
    e7a8:	2000e5b0 	.word	0x2000e5b0
    e7ac:	00004d89 	.word	0x00004d89
    e7b0:	2000403c 	.word	0x2000403c
    e7b4:	00007ff7 	.word	0x00007ff7
    e7b8:	00007ffd 	.word	0x00007ffd
    e7bc:	000082cf 	.word	0x000082cf
    e7c0:	000082d5 	.word	0x000082d5
    e7c4:	0000810b 	.word	0x0000810b
    e7c8:	00008111 	.word	0x00008111
    e7cc:	200010dc 	.word	0x200010dc
    e7d0:	200115fc 	.word	0x200115fc
    e7d4:	2000b660 	.word	0x2000b660
    e7d8:	20008260 	.word	0x20008260
    e7dc:	47c0      	blx	r8
		grid_port_process_ui(&GRID_PORT_U); // COOLDOWN DELAY IMPLEMENTED INSIDE
    e7de:	4b80      	ldr	r3, [pc, #512]	; (e9e0 <main+0x560>)
    e7e0:	4880      	ldr	r0, [pc, #512]	; (e9e4 <main+0x564>)
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    e7e2:	4f81      	ldr	r7, [pc, #516]	; (e9e8 <main+0x568>)
		grid_port_process_ui(&GRID_PORT_U); // COOLDOWN DELAY IMPLEMENTED INSIDE
    e7e4:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_INBOUND);	
    e7e6:	2104      	movs	r1, #4
    e7e8:	4628      	mov	r0, r5
    e7ea:	47c0      	blx	r8
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    e7ec:	2101      	movs	r1, #1
    e7ee:	487d      	ldr	r0, [pc, #500]	; (e9e4 <main+0x564>)
    e7f0:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    e7f2:	2100      	movs	r1, #0
    e7f4:	487d      	ldr	r0, [pc, #500]	; (e9ec <main+0x56c>)
    e7f6:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    e7f8:	2100      	movs	r1, #0
    e7fa:	487d      	ldr	r0, [pc, #500]	; (e9f0 <main+0x570>)
    e7fc:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_S, 0);
    e7fe:	2100      	movs	r1, #0
    e800:	487c      	ldr	r0, [pc, #496]	; (e9f4 <main+0x574>)
    e802:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_W, 0);
    e804:	2100      	movs	r1, #0
    e806:	487c      	ldr	r0, [pc, #496]	; (e9f8 <main+0x578>)
    e808:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_H, 0);	// USB	
    e80a:	2100      	movs	r1, #0
    e80c:	487b      	ldr	r0, [pc, #492]	; (e9fc <main+0x57c>)
    e80e:	47b8      	blx	r7
		grid_task_enter_task(&grid_task_state, GRID_TASK_OUTBOUND);
    e810:	2105      	movs	r1, #5
    e812:	4628      	mov	r0, r5
    e814:	47c0      	blx	r8
		grid_port_process_outbound_usart(&GRID_PORT_N);
    e816:	4f7a      	ldr	r7, [pc, #488]	; (ea00 <main+0x580>)
    e818:	4874      	ldr	r0, [pc, #464]	; (e9ec <main+0x56c>)
    e81a:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_E);
    e81c:	4874      	ldr	r0, [pc, #464]	; (e9f0 <main+0x570>)
    e81e:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_S);
    e820:	4874      	ldr	r0, [pc, #464]	; (e9f4 <main+0x574>)
    e822:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_W);
    e824:	4874      	ldr	r0, [pc, #464]	; (e9f8 <main+0x578>)
    e826:	47b8      	blx	r7
		grid_port_process_outbound_usb(&GRID_PORT_H);
    e828:	4b76      	ldr	r3, [pc, #472]	; (ea04 <main+0x584>)
    e82a:	4874      	ldr	r0, [pc, #464]	; (e9fc <main+0x57c>)
    e82c:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    e82e:	4b76      	ldr	r3, [pc, #472]	; (ea08 <main+0x588>)
    e830:	486c      	ldr	r0, [pc, #432]	; (e9e4 <main+0x564>)
    e832:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_ALERT);	
    e834:	2107      	movs	r1, #7
    e836:	4628      	mov	r0, r5
    e838:	47c0      	blx	r8
		if (grid_sys_state.alert_state){
    e83a:	8963      	ldrh	r3, [r4, #10]
    e83c:	b29b      	uxth	r3, r3
    e83e:	2b00      	cmp	r3, #0
    e840:	d13a      	bne.n	e8b8 <main+0x438>
			}
			
			
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
    e842:	2106      	movs	r1, #6
    e844:	4f71      	ldr	r7, [pc, #452]	; (ea0c <main+0x58c>)


		// IDLETASK
		
		
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    e846:	f8df 8208 	ldr.w	r8, [pc, #520]	; ea50 <main+0x5d0>
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
    e84a:	4628      	mov	r0, r5
    e84c:	47b8      	blx	r7
		grid_led_tick(&grid_led_state);
    e84e:	ee18 0a10 	vmov	r0, s16
    e852:	4b6f      	ldr	r3, [pc, #444]	; (ea10 <main+0x590>)
    e854:	4798      	blx	r3
			grid_led_lowlevel_render_all(&grid_led_state);	
    e856:	ee18 0a10 	vmov	r0, s16
    e85a:	4b6e      	ldr	r3, [pc, #440]	; (ea14 <main+0x594>)
    e85c:	4798      	blx	r3
			grid_led_lowlevel_hardware_start_transfer(&grid_led_state);
    e85e:	4b6e      	ldr	r3, [pc, #440]	; (ea18 <main+0x598>)
    e860:	ee18 0a10 	vmov	r0, s16
    e864:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_IDLE);
    e866:	2100      	movs	r1, #0
    e868:	4628      	mov	r0, r5
    e86a:	47b8      	blx	r7
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    e86c:	9904      	ldr	r1, [sp, #16]
    e86e:	4620      	mov	r0, r4
    e870:	47c0      	blx	r8
		
		if (elapsed < RTC1MS){
    e872:	280f      	cmp	r0, #15
    e874:	f240 8097 	bls.w	e9a6 <main+0x526>
				delay_us(1);			
			}	
					
		}
		else{
			loopwarp+= elapsed - RTC1MS;
    e878:	f1aa 0310 	sub.w	r3, sl, #16
    e87c:	eb03 0a00 	add.w	sl, r3, r0
			
			loopslow++;
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);		
    e880:	2101      	movs	r1, #1
    e882:	4628      	mov	r0, r5
    e884:	47b8      	blx	r7
	while (1) {
    e886:	e63a      	b.n	e4fe <main+0x7e>
			scheduler_report_flag=0;
    e888:	f04f 0300 	mov.w	r3, #0
    e88c:	707b      	strb	r3, [r7, #1]
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    e88e:	4b63      	ldr	r3, [pc, #396]	; (ea1c <main+0x59c>)
			scheduler_report_flag=0;
    e890:	f04f 0a00 	mov.w	sl, #0
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    e894:	fa5f f18a 	uxtb.w	r1, sl
    e898:	4628      	mov	r0, r5
    e89a:	f10a 0a01 	add.w	sl, sl, #1
    e89e:	4798      	blx	r3
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    e8a0:	f1ba 0f08 	cmp.w	sl, #8
    e8a4:	4b5d      	ldr	r3, [pc, #372]	; (ea1c <main+0x59c>)
    e8a6:	d1f5      	bne.n	e894 <main+0x414>
			grid_task_timer_reset(&grid_task_state);
    e8a8:	4b5d      	ldr	r3, [pc, #372]	; (ea20 <main+0x5a0>)
    e8aa:	4628      	mov	r0, r5
			loopwarp = 0;
    e8ac:	f04f 0a00 	mov.w	sl, #0
			grid_task_timer_reset(&grid_task_state);
    e8b0:	4798      	blx	r3
			loopcounter = 0;
    e8b2:	f8cd a00c 	str.w	sl, [sp, #12]
    e8b6:	e66d      	b.n	e594 <main+0x114>
			grid_sys_state.alert_state--;
    e8b8:	8963      	ldrh	r3, [r4, #10]
    e8ba:	3b01      	subs	r3, #1
    e8bc:	b29b      	uxth	r3, r3
    e8be:	8163      	strh	r3, [r4, #10]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    e8c0:	4620      	mov	r0, r4
    e8c2:	4b58      	ldr	r3, [pc, #352]	; (ea24 <main+0x5a4>)
    e8c4:	4798      	blx	r3
    e8c6:	b998      	cbnz	r0, e8f0 <main+0x470>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    e8c8:	4b57      	ldr	r3, [pc, #348]	; (ea28 <main+0x5a8>)
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    e8ca:	f8df 8188 	ldr.w	r8, [pc, #392]	; ea54 <main+0x5d4>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    e8ce:	4620      	mov	r0, r4
    e8d0:	4798      	blx	r3
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    e8d2:	2700      	movs	r7, #0
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    e8d4:	4681      	mov	r9, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    e8d6:	ee18 3a10 	vmov	r3, s16
    e8da:	785b      	ldrb	r3, [r3, #1]
    e8dc:	b2f9      	uxtb	r1, r7
    e8de:	428b      	cmp	r3, r1
    e8e0:	d9af      	bls.n	e842 <main+0x3c2>
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    e8e2:	ee18 0a10 	vmov	r0, s16
    e8e6:	464b      	mov	r3, r9
    e8e8:	2200      	movs	r2, #0
    e8ea:	47c0      	blx	r8
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    e8ec:	3701      	adds	r7, #1
    e8ee:	e7f2      	b.n	e8d6 <main+0x456>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    e8f0:	4b4e      	ldr	r3, [pc, #312]	; (ea2c <main+0x5ac>)
    e8f2:	4620      	mov	r0, r4
    e8f4:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    e8f6:	4b4e      	ldr	r3, [pc, #312]	; (ea30 <main+0x5b0>)
    e8f8:	4620      	mov	r0, r4
    e8fa:	4798      	blx	r3
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    e8fc:	4b4d      	ldr	r3, [pc, #308]	; (ea34 <main+0x5b4>)
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    e8fe:	4681      	mov	r9, r0
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    e900:	4620      	mov	r0, r4
    e902:	4798      	blx	r3
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    e904:	4b4c      	ldr	r3, [pc, #304]	; (ea38 <main+0x5b8>)
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    e906:	9006      	str	r0, [sp, #24]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    e908:	4620      	mov	r0, r4
    e90a:	4798      	blx	r3
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    e90c:	2300      	movs	r3, #0
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    e90e:	9007      	str	r0, [sp, #28]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    e910:	9305      	str	r3, [sp, #20]
    e912:	4b4a      	ldr	r3, [pc, #296]	; (ea3c <main+0x5bc>)
    e914:	f89d 6014 	ldrb.w	r6, [sp, #20]
    e918:	ee18 0a10 	vmov	r0, s16
    e91c:	4798      	blx	r3
    e91e:	9b05      	ldr	r3, [sp, #20]
    e920:	42b0      	cmp	r0, r6
    e922:	f103 0301 	add.w	r3, r3, #1
    e926:	9305      	str	r3, [sp, #20]
    e928:	d9ce      	bls.n	e8c8 <main+0x448>
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    e92a:	2300      	movs	r3, #0
    e92c:	461a      	mov	r2, r3
    e92e:	e9cd 3300 	strd	r3, r3, [sp]
    e932:	ee18 0a10 	vmov	r0, s16
    e936:	4631      	mov	r1, r6
    e938:	f8df 811c 	ldr.w	r8, [pc, #284]	; ea58 <main+0x5d8>
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    e93c:	4f40      	ldr	r7, [pc, #256]	; (ea40 <main+0x5c0>)
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    e93e:	47c0      	blx	r8
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    e940:	4b40      	ldr	r3, [pc, #256]	; (ea44 <main+0x5c4>)
    e942:	f8df 8118 	ldr.w	r8, [pc, #280]	; ea5c <main+0x5dc>
    e946:	4648      	mov	r0, r9
    e948:	4798      	blx	r3
    e94a:	4b3f      	ldr	r3, [pc, #252]	; (ea48 <main+0x5c8>)
    e94c:	2200      	movs	r2, #0
    e94e:	47b8      	blx	r7
    e950:	47c0      	blx	r8
    e952:	4b3c      	ldr	r3, [pc, #240]	; (ea44 <main+0x5c4>)
    e954:	b2c2      	uxtb	r2, r0
    e956:	9807      	ldr	r0, [sp, #28]
    e958:	ee08 2a90 	vmov	s17, r2
    e95c:	4798      	blx	r3
    e95e:	2200      	movs	r2, #0
    e960:	4b39      	ldr	r3, [pc, #228]	; (ea48 <main+0x5c8>)
    e962:	47b8      	blx	r7
    e964:	47c0      	blx	r8
    e966:	b2c0      	uxtb	r0, r0
    e968:	9001      	str	r0, [sp, #4]
    e96a:	4b36      	ldr	r3, [pc, #216]	; (ea44 <main+0x5c4>)
    e96c:	9806      	ldr	r0, [sp, #24]
    e96e:	4798      	blx	r3
    e970:	4b35      	ldr	r3, [pc, #212]	; (ea48 <main+0x5c8>)
    e972:	2200      	movs	r2, #0
    e974:	47b8      	blx	r7
    e976:	47c0      	blx	r8
    e978:	b2c0      	uxtb	r0, r0
    e97a:	ee18 3a90 	vmov	r3, s17
    e97e:	9000      	str	r0, [sp, #0]
    e980:	4631      	mov	r1, r6
    e982:	ee18 0a10 	vmov	r0, s16
    e986:	f8df 80d8 	ldr.w	r8, [pc, #216]	; ea60 <main+0x5e0>
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    e98a:	4f30      	ldr	r7, [pc, #192]	; (ea4c <main+0x5cc>)
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    e98c:	2200      	movs	r2, #0
    e98e:	47c0      	blx	r8
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    e990:	9b07      	ldr	r3, [sp, #28]
    e992:	9301      	str	r3, [sp, #4]
    e994:	9b06      	ldr	r3, [sp, #24]
    e996:	9300      	str	r3, [sp, #0]
    e998:	ee18 0a10 	vmov	r0, s16
    e99c:	464b      	mov	r3, r9
    e99e:	2200      	movs	r2, #0
    e9a0:	4631      	mov	r1, r6
    e9a2:	47b8      	blx	r7
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    e9a4:	e7b5      	b.n	e912 <main+0x492>
			if (loopwarp>5){
    e9a6:	f1ba 0f05 	cmp.w	sl, #5
    e9aa:	d90e      	bls.n	e9ca <main+0x54a>
					if ((RTC1MS - elapsed)<loopwarp){				
    e9ac:	f1c0 0310 	rsb	r3, r0, #16
    e9b0:	4553      	cmp	r3, sl
						loopwarp-=(RTC1MS - elapsed);
    e9b2:	bf3f      	itttt	cc
    e9b4:	f1aa 0310 	subcc.w	r3, sl, #16
    e9b8:	eb03 0a00 	addcc.w	sl, r3, r0
						loopstart-=(RTC1MS - elapsed);
    e9bc:	9b04      	ldrcc	r3, [sp, #16]
    e9be:	3b10      	subcc	r3, #16
    e9c0:	bf3a      	itte	cc
    e9c2:	181b      	addcc	r3, r3, r0
    e9c4:	9304      	strcc	r3, [sp, #16]
						loopwarp-=loopwarp;
    e9c6:	f04f 0a00 	movcs.w	sl, #0
				delay_us(1);			
    e9ca:	f8df 9098 	ldr.w	r9, [pc, #152]	; ea64 <main+0x5e4>
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    e9ce:	9904      	ldr	r1, [sp, #16]
    e9d0:	4620      	mov	r0, r4
    e9d2:	47c0      	blx	r8
    e9d4:	280f      	cmp	r0, #15
    e9d6:	f63f af53 	bhi.w	e880 <main+0x400>
				delay_us(1);			
    e9da:	2001      	movs	r0, #1
    e9dc:	47c8      	blx	r9
    e9de:	e7f6      	b.n	e9ce <main+0x54e>
    e9e0:	00009835 	.word	0x00009835
    e9e4:	2000403c 	.word	0x2000403c
    e9e8:	00005209 	.word	0x00005209
    e9ec:	200010dc 	.word	0x200010dc
    e9f0:	200115fc 	.word	0x200115fc
    e9f4:	2000b660 	.word	0x2000b660
    e9f8:	20008260 	.word	0x20008260
    e9fc:	2000e5b0 	.word	0x2000e5b0
    ea00:	00006315 	.word	0x00006315
    ea04:	000053cd 	.word	0x000053cd
    ea08:	000056c1 	.word	0x000056c1
    ea0c:	00008543 	.word	0x00008543
    ea10:	0000644d 	.word	0x0000644d
    ea14:	0000683d 	.word	0x0000683d
    ea18:	0000685d 	.word	0x0000685d
    ea1c:	0000856d 	.word	0x0000856d
    ea20:	00008559 	.word	0x00008559
    ea24:	00008fa5 	.word	0x00008fa5
    ea28:	00008faf 	.word	0x00008faf
    ea2c:	00008fa9 	.word	0x00008fa9
    ea30:	0000900d 	.word	0x0000900d
    ea34:	00009011 	.word	0x00009011
    ea38:	00009015 	.word	0x00009015
    ea3c:	00006449 	.word	0x00006449
    ea40:	00011f19 	.word	0x00011f19
    ea44:	00011e45 	.word	0x00011e45
    ea48:	3fe00000 	.word	0x3fe00000
    ea4c:	000064c5 	.word	0x000064c5
    ea50:	00008f8d 	.word	0x00008f8d
    ea54:	00006555 	.word	0x00006555
    ea58:	00006485 	.word	0x00006485
    ea5c:	0001233d 	.word	0x0001233d
    ea60:	000064a5 	.word	0x000064a5
    ea64:	0000c879 	.word	0x0000c879

0000ea68 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    ea68:	6800      	ldr	r0, [r0, #0]
    ea6a:	b900      	cbnz	r0, ea6e <is_list_element+0x6>
    ea6c:	4770      	bx	lr
		if (it == element) {
    ea6e:	4288      	cmp	r0, r1
    ea70:	d1fa      	bne.n	ea68 <is_list_element>
			return true;
    ea72:	2001      	movs	r0, #1
		}
	}

	return false;
}
    ea74:	4770      	bx	lr
	...

0000ea78 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    ea78:	b538      	push	{r3, r4, r5, lr}
	ASSERT(!is_list_element(list, element));
    ea7a:	4b07      	ldr	r3, [pc, #28]	; (ea98 <list_insert_as_head+0x20>)
{
    ea7c:	460d      	mov	r5, r1
    ea7e:	4604      	mov	r4, r0
	ASSERT(!is_list_element(list, element));
    ea80:	4798      	blx	r3
    ea82:	f080 0001 	eor.w	r0, r0, #1
    ea86:	4b05      	ldr	r3, [pc, #20]	; (ea9c <list_insert_as_head+0x24>)
    ea88:	4905      	ldr	r1, [pc, #20]	; (eaa0 <list_insert_as_head+0x28>)
    ea8a:	2239      	movs	r2, #57	; 0x39
    ea8c:	b2c0      	uxtb	r0, r0
    ea8e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    ea90:	6823      	ldr	r3, [r4, #0]
    ea92:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    ea94:	6025      	str	r5, [r4, #0]
}
    ea96:	bd38      	pop	{r3, r4, r5, pc}
    ea98:	0000ea69 	.word	0x0000ea69
    ea9c:	0000cb4d 	.word	0x0000cb4d
    eaa0:	000150ef 	.word	0x000150ef

0000eaa4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    eaa4:	6803      	ldr	r3, [r0, #0]
    eaa6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    eaa8:	6001      	str	r1, [r0, #0]
}
    eaaa:	4770      	bx	lr

0000eaac <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    eaac:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
    eaae:	4b0c      	ldr	r3, [pc, #48]	; (eae0 <list_insert_at_end+0x34>)
	struct list_element *it = list->head;
    eab0:	6805      	ldr	r5, [r0, #0]
{
    eab2:	4606      	mov	r6, r0
    eab4:	460c      	mov	r4, r1
	ASSERT(!is_list_element(list, element));
    eab6:	4798      	blx	r3
    eab8:	f080 0001 	eor.w	r0, r0, #1
    eabc:	4b09      	ldr	r3, [pc, #36]	; (eae4 <list_insert_at_end+0x38>)
    eabe:	490a      	ldr	r1, [pc, #40]	; (eae8 <list_insert_at_end+0x3c>)
    eac0:	224f      	movs	r2, #79	; 0x4f
    eac2:	b2c0      	uxtb	r0, r0
    eac4:	4798      	blx	r3

	if (!list->head) {
    eac6:	6833      	ldr	r3, [r6, #0]
    eac8:	b913      	cbnz	r3, ead0 <list_insert_at_end+0x24>
		list->head                             = (struct list_element *)element;
    eaca:	6034      	str	r4, [r6, #0]
		((struct list_element *)element)->next = NULL;
    eacc:	6023      	str	r3, [r4, #0]
	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
}
    eace:	bd70      	pop	{r4, r5, r6, pc}
	while (it->next) {
    ead0:	462b      	mov	r3, r5
    ead2:	682d      	ldr	r5, [r5, #0]
    ead4:	2d00      	cmp	r5, #0
    ead6:	d1fb      	bne.n	ead0 <list_insert_at_end+0x24>
	it->next                               = (struct list_element *)element;
    ead8:	601c      	str	r4, [r3, #0]
	((struct list_element *)element)->next = NULL;
    eada:	6025      	str	r5, [r4, #0]
    eadc:	e7f7      	b.n	eace <list_insert_at_end+0x22>
    eade:	bf00      	nop
    eae0:	0000ea69 	.word	0x0000ea69
    eae4:	0000cb4d 	.word	0x0000cb4d
    eae8:	000150ef 	.word	0x000150ef

0000eaec <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    eaec:	6803      	ldr	r3, [r0, #0]
    eaee:	b10b      	cbz	r3, eaf4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    eaf0:	681a      	ldr	r2, [r3, #0]
    eaf2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    eaf4:	4618      	mov	r0, r3
    eaf6:	4770      	bx	lr

0000eaf8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    eaf8:	4b03      	ldr	r3, [pc, #12]	; (eb08 <_osc32kctrl_init_sources+0x10>)
    eafa:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    eafc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    eb00:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    eb02:	2201      	movs	r2, #1
    eb04:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    eb06:	4770      	bx	lr
    eb08:	40001400 	.word	0x40001400

0000eb0c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    eb0c:	6903      	ldr	r3, [r0, #16]
    eb0e:	420b      	tst	r3, r1
    eb10:	d1fc      	bne.n	eb0c <hri_rtcmode0_wait_for_sync>
	};
}
    eb12:	4770      	bx	lr

0000eb14 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    eb14:	68c0      	ldr	r0, [r0, #12]

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    eb16:	4b02      	ldr	r3, [pc, #8]	; (eb20 <_rtc_timer_set_period+0xc>)
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    eb18:	6201      	str	r1, [r0, #32]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    eb1a:	2160      	movs	r1, #96	; 0x60
    eb1c:	4718      	bx	r3
    eb1e:	bf00      	nop
    eb20:	0000eb0d 	.word	0x0000eb0d

0000eb24 <_rtc_timer_get_period>:

/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
    eb24:	b508      	push	{r3, lr}
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    eb26:	68c0      	ldr	r0, [r0, #12]
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    eb28:	4b02      	ldr	r3, [pc, #8]	; (eb34 <_rtc_timer_get_period+0x10>)
    eb2a:	2160      	movs	r1, #96	; 0x60
    eb2c:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    eb2e:	6a00      	ldr	r0, [r0, #32]
}
    eb30:	bd08      	pop	{r3, pc}
    eb32:	bf00      	nop
    eb34:	0000eb0d 	.word	0x0000eb0d

0000eb38 <_rtc_timer_is_started>:

/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
    eb38:	b508      	push	{r3, lr}
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    eb3a:	68c0      	ldr	r0, [r0, #12]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    eb3c:	4b03      	ldr	r3, [pc, #12]	; (eb4c <_rtc_timer_is_started+0x14>)
    eb3e:	f248 0103 	movw	r1, #32771	; 0x8003
    eb42:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    eb44:	8800      	ldrh	r0, [r0, #0]
}
    eb46:	f3c0 0040 	ubfx	r0, r0, #1, #1
    eb4a:	bd08      	pop	{r3, pc}
    eb4c:	0000eb0d 	.word	0x0000eb0d

0000eb50 <_rtc_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    eb50:	4770      	bx	lr
	...

0000eb54 <_rtc_timer_stop>:
{
    eb54:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    eb56:	4604      	mov	r4, r0
    eb58:	b118      	cbz	r0, eb62 <_rtc_timer_stop+0xe>
    eb5a:	68c0      	ldr	r0, [r0, #12]
    eb5c:	3800      	subs	r0, #0
    eb5e:	bf18      	it	ne
    eb60:	2001      	movne	r0, #1
    eb62:	4908      	ldr	r1, [pc, #32]	; (eb84 <_rtc_timer_stop+0x30>)
    eb64:	4b08      	ldr	r3, [pc, #32]	; (eb88 <_rtc_timer_stop+0x34>)
    eb66:	226b      	movs	r2, #107	; 0x6b
    eb68:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    eb6a:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    eb6c:	8803      	ldrh	r3, [r0, #0]
    eb6e:	f023 0302 	bic.w	r3, r3, #2
    eb72:	041b      	lsls	r3, r3, #16
    eb74:	0c1b      	lsrs	r3, r3, #16
    eb76:	8003      	strh	r3, [r0, #0]
}
    eb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    eb7c:	4b03      	ldr	r3, [pc, #12]	; (eb8c <_rtc_timer_stop+0x38>)
    eb7e:	f248 0103 	movw	r1, #32771	; 0x8003
    eb82:	4718      	bx	r3
    eb84:	0001510d 	.word	0x0001510d
    eb88:	0000cb4d 	.word	0x0000cb4d
    eb8c:	0000eb0d 	.word	0x0000eb0d

0000eb90 <_rtc_timer_start>:
{
    eb90:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    eb92:	4604      	mov	r4, r0
    eb94:	b118      	cbz	r0, eb9e <_rtc_timer_start+0xe>
    eb96:	68c0      	ldr	r0, [r0, #12]
    eb98:	3800      	subs	r0, #0
    eb9a:	bf18      	it	ne
    eb9c:	2001      	movne	r0, #1
    eb9e:	490e      	ldr	r1, [pc, #56]	; (ebd8 <_rtc_timer_start+0x48>)
    eba0:	4b0e      	ldr	r3, [pc, #56]	; (ebdc <_rtc_timer_start+0x4c>)
    eba2:	225e      	movs	r2, #94	; 0x5e
    eba4:	4798      	blx	r3
    eba6:	4b0e      	ldr	r3, [pc, #56]	; (ebe0 <_rtc_timer_start+0x50>)
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    eba8:	68e0      	ldr	r0, [r4, #12]
    ebaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ebae:	601a      	str	r2, [r3, #0]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    ebb0:	2300      	movs	r3, #0
    ebb2:	6183      	str	r3, [r0, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    ebb4:	4a0b      	ldr	r2, [pc, #44]	; (ebe4 <_rtc_timer_start+0x54>)
    ebb6:	2108      	movs	r1, #8
    ebb8:	4790      	blx	r2
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    ebba:	68e0      	ldr	r0, [r4, #12]
    ebbc:	2108      	movs	r1, #8
    ebbe:	4790      	blx	r2
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    ebc0:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    ebc2:	8803      	ldrh	r3, [r0, #0]
    ebc4:	b29b      	uxth	r3, r3
    ebc6:	f043 0302 	orr.w	r3, r3, #2
}
    ebca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebce:	8003      	strh	r3, [r0, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    ebd0:	f248 0103 	movw	r1, #32771	; 0x8003
    ebd4:	4710      	bx	r2
    ebd6:	bf00      	nop
    ebd8:	0001510d 	.word	0x0001510d
    ebdc:	0000cb4d 	.word	0x0000cb4d
    ebe0:	e000e100 	.word	0xe000e100
    ebe4:	0000eb0d 	.word	0x0000eb0d

0000ebe8 <_rtc_timer_deinit>:
{
    ebe8:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    ebea:	4604      	mov	r4, r0
    ebec:	b118      	cbz	r0, ebf6 <_rtc_timer_deinit+0xe>
    ebee:	68c0      	ldr	r0, [r0, #12]
    ebf0:	3800      	subs	r0, #0
    ebf2:	bf18      	it	ne
    ebf4:	2001      	movne	r0, #1
    ebf6:	490b      	ldr	r1, [pc, #44]	; (ec24 <_rtc_timer_deinit+0x3c>)
    ebf8:	4b0b      	ldr	r3, [pc, #44]	; (ec28 <_rtc_timer_deinit+0x40>)
    ebfa:	2252      	movs	r2, #82	; 0x52
    ebfc:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ebfe:	4b0b      	ldr	r3, [pc, #44]	; (ec2c <_rtc_timer_deinit+0x44>)
    ec00:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ec04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    ec08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ec0c:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    ec10:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    ec12:	2301      	movs	r3, #1
    ec14:	8003      	strh	r3, [r0, #0]
}
    ec16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    ec1a:	4b05      	ldr	r3, [pc, #20]	; (ec30 <_rtc_timer_deinit+0x48>)
    ec1c:	f248 0103 	movw	r1, #32771	; 0x8003
    ec20:	4718      	bx	r3
    ec22:	bf00      	nop
    ec24:	0001510d 	.word	0x0001510d
    ec28:	0000cb4d 	.word	0x0000cb4d
    ec2c:	e000e100 	.word	0xe000e100
    ec30:	0000eb0d 	.word	0x0000eb0d

0000ec34 <_rtc_timer_init>:
{
    ec34:	b570      	push	{r4, r5, r6, lr}
	ASSERT(dev);
    ec36:	4604      	mov	r4, r0
{
    ec38:	460d      	mov	r5, r1
	ASSERT(dev);
    ec3a:	3800      	subs	r0, #0
    ec3c:	bf18      	it	ne
    ec3e:	2001      	movne	r0, #1
    ec40:	4b10      	ldr	r3, [pc, #64]	; (ec84 <_rtc_timer_init+0x50>)
    ec42:	4911      	ldr	r1, [pc, #68]	; (ec88 <_rtc_timer_init+0x54>)
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    ec44:	2601      	movs	r6, #1
    ec46:	2230      	movs	r2, #48	; 0x30
    ec48:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    ec4a:	4a10      	ldr	r2, [pc, #64]	; (ec8c <_rtc_timer_init+0x58>)
	dev->hw = hw;
    ec4c:	60e5      	str	r5, [r4, #12]
    ec4e:	4628      	mov	r0, r5
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    ec50:	802e      	strh	r6, [r5, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    ec52:	f248 0103 	movw	r1, #32771	; 0x8003
    ec56:	4790      	blx	r2
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    ec58:	68e0      	ldr	r0, [r4, #12]
    ec5a:	4631      	mov	r1, r6
    ec5c:	4790      	blx	r2
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    ec5e:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    ec60:	f248 0380 	movw	r3, #32896	; 0x8080
    ec64:	8003      	strh	r3, [r0, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    ec66:	f248 0103 	movw	r1, #32771	; 0x8003
    ec6a:	4790      	blx	r2
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    ec6c:	68e0      	ldr	r0, [r4, #12]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    ec6e:	2160      	movs	r1, #96	; 0x60
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    ec70:	6206      	str	r6, [r0, #32]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    ec72:	4790      	blx	r2
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    ec74:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    ec76:	f44f 7280 	mov.w	r2, #256	; 0x100
    ec7a:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    ec7c:	4b04      	ldr	r3, [pc, #16]	; (ec90 <_rtc_timer_init+0x5c>)
}
    ec7e:	2000      	movs	r0, #0
	_rtc_dev = dev;
    ec80:	601c      	str	r4, [r3, #0]
}
    ec82:	bd70      	pop	{r4, r5, r6, pc}
    ec84:	0000cb4d 	.word	0x0000cb4d
    ec88:	0001510d 	.word	0x0001510d
    ec8c:	0000eb0d 	.word	0x0000eb0d
    ec90:	2000100c 	.word	0x2000100c

0000ec94 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    ec94:	4800      	ldr	r0, [pc, #0]	; (ec98 <_rtc_get_timer+0x4>)
    ec96:	4770      	bx	lr
    ec98:	20000508 	.word	0x20000508

0000ec9c <RTC_Handler>:
/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
	_rtc_timer_interrupt_handler(_rtc_dev);
    ec9c:	4b07      	ldr	r3, [pc, #28]	; (ecbc <RTC_Handler+0x20>)
{
    ec9e:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    eca0:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    eca2:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    eca4:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    eca6:	05db      	lsls	r3, r3, #23
    eca8:	d507      	bpl.n	ecba <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    ecaa:	6823      	ldr	r3, [r4, #0]
    ecac:	b10b      	cbz	r3, ecb2 <RTC_Handler+0x16>
			dev->timer_cb.period_expired(dev);
    ecae:	4620      	mov	r0, r4
    ecb0:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    ecb2:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    ecb4:	f44f 7280 	mov.w	r2, #256	; 0x100
    ecb8:	819a      	strh	r2, [r3, #12]
}
    ecba:	bd10      	pop	{r4, pc}
    ecbc:	2000100c 	.word	0x2000100c

0000ecc0 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    ecc0:	b530      	push	{r4, r5, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
    ecc2:	1c4b      	adds	r3, r1, #1
	uint8_t pin  = GPIO_PIN(gpio);
    ecc4:	b2c5      	uxtb	r5, r0
    ecc6:	4b18      	ldr	r3, [pc, #96]	; (ed28 <_gpio_set_pin_function+0x68>)
    ecc8:	f000 041f 	and.w	r4, r0, #31
	uint8_t port = GPIO_PORT(gpio);
    eccc:	ea4f 1050 	mov.w	r0, r0, lsr #5
    ecd0:	ea4f 10c0 	mov.w	r0, r0, lsl #7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ecd4:	4403      	add	r3, r0
	if (function == GPIO_PIN_FUNCTION_OFF) {
    ecd6:	d107      	bne.n	ece8 <_gpio_set_pin_function+0x28>
    ecd8:	4423      	add	r3, r4
    ecda:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    ecde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ece2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    ece6:	bd30      	pop	{r4, r5, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ece8:	1918      	adds	r0, r3, r4
    ecea:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    ecee:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    ecf2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    ecf6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ecfa:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    ecfe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
		if (pin & 1) {
    ed02:	f015 0f01 	tst.w	r5, #1
    ed06:	b2c9      	uxtb	r1, r1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    ed08:	bf19      	ittee	ne
    ed0a:	f002 020f 	andne.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    ed0e:	ea42 1101 	orrne.w	r1, r2, r1, lsl #4
	tmp |= PORT_PMUX_PMUXE(data);
    ed12:	f001 010f 	andeq.w	r1, r1, #15
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    ed16:	f002 02f0 	andeq.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXO(data);
    ed1a:	bf14      	ite	ne
    ed1c:	b2c9      	uxtbne	r1, r1
	tmp |= PORT_PMUX_PMUXE(data);
    ed1e:	4311      	orreq	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    ed20:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    ed24:	e7df      	b.n	ece6 <_gpio_set_pin_function+0x26>
    ed26:	bf00      	nop
    ed28:	41008000 	.word	0x41008000

0000ed2c <gpio_set_pin_direction>:
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    ed2c:	f000 031f 	and.w	r3, r0, #31
{
    ed30:	b530      	push	{r4, r5, lr}
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    ed32:	2501      	movs	r5, #1
    ed34:	409d      	lsls	r5, r3
	switch (direction) {
    ed36:	0940      	lsrs	r0, r0, #5
    ed38:	4b0f      	ldr	r3, [pc, #60]	; (ed78 <gpio_set_pin_direction+0x4c>)
    ed3a:	01c0      	lsls	r0, r0, #7
    ed3c:	2901      	cmp	r1, #1
    ed3e:	b2ac      	uxth	r4, r5
    ed40:	ea4f 4215 	mov.w	r2, r5, lsr #16
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    ed44:	4403      	add	r3, r0
    ed46:	d008      	beq.n	ed5a <gpio_set_pin_direction+0x2e>
    ed48:	2902      	cmp	r1, #2
    ed4a:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    ed4e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    ed52:	d00e      	beq.n	ed72 <gpio_set_pin_direction+0x46>
    ed54:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ed56:	629c      	str	r4, [r3, #40]	; 0x28
    ed58:	e009      	b.n	ed6e <gpio_set_pin_direction+0x42>
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    ed5a:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    ed5e:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
		hri_port_write_WRCONFIG_reg(PORT,
    ed62:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    ed66:	605d      	str	r5, [r3, #4]
    ed68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    ed6c:	629c      	str	r4, [r3, #40]	; 0x28
    ed6e:	629a      	str	r2, [r3, #40]	; 0x28
}
    ed70:	bd30      	pop	{r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    ed72:	609d      	str	r5, [r3, #8]
    ed74:	e7ef      	b.n	ed56 <gpio_set_pin_direction+0x2a>
    ed76:	bf00      	nop
    ed78:	41008000 	.word	0x41008000

0000ed7c <gpio_set_pin_pull_mode>:
	switch (pull_mode) {
    ed7c:	0942      	lsrs	r2, r0, #5
    ed7e:	2901      	cmp	r1, #1
    ed80:	4b0d      	ldr	r3, [pc, #52]	; (edb8 <gpio_set_pin_pull_mode+0x3c>)
    ed82:	f000 001f 	and.w	r0, r0, #31
    ed86:	ea4f 12c2 	mov.w	r2, r2, lsl #7
    ed8a:	d008      	beq.n	ed9e <gpio_set_pin_pull_mode+0x22>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    ed8c:	4413      	add	r3, r2
    ed8e:	4418      	add	r0, r3
    ed90:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    ed94:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ed98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
    ed9c:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    ed9e:	4413      	add	r3, r2
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    eda0:	4081      	lsls	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    eda2:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    eda4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    eda6:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    edaa:	f042 0204 	orr.w	r2, r2, #4
    edae:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    edb2:	6199      	str	r1, [r3, #24]
}
    edb4:	4770      	bx	lr
    edb6:	bf00      	nop
    edb8:	41008000 	.word	0x41008000

0000edbc <ADC_0_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    edbc:	4a14      	ldr	r2, [pc, #80]	; (ee10 <ADC_0_init+0x54>)
 */
void ADC_0_init(void)
{
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    edbe:	4915      	ldr	r1, [pc, #84]	; (ee14 <ADC_0_init+0x58>)
    edc0:	6a13      	ldr	r3, [r2, #32]
{
    edc2:	b5f0      	push	{r4, r5, r6, r7, lr}
    edc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    edc8:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    edca:	4b13      	ldr	r3, [pc, #76]	; (ee18 <ADC_0_init+0x5c>)
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    edcc:	4e13      	ldr	r6, [pc, #76]	; (ee1c <ADC_0_init+0x60>)
    edce:	4d14      	ldr	r5, [pc, #80]	; (ee20 <ADC_0_init+0x64>)
    edd0:	4f14      	ldr	r7, [pc, #80]	; (ee24 <ADC_0_init+0x68>)
{
    edd2:	b085      	sub	sp, #20
    edd4:	2241      	movs	r2, #65	; 0x41
    edd6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    edda:	4b13      	ldr	r3, [pc, #76]	; (ee28 <ADC_0_init+0x6c>)
    eddc:	9301      	str	r3, [sp, #4]
    edde:	2400      	movs	r4, #0
    ede0:	2301      	movs	r3, #1
    ede2:	9300      	str	r3, [sp, #0]
    ede4:	4632      	mov	r2, r6
    ede6:	4623      	mov	r3, r4
    ede8:	9402      	str	r4, [sp, #8]
    edea:	4628      	mov	r0, r5
    edec:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
    edee:	1c72      	adds	r2, r6, #1
    edf0:	4621      	mov	r1, r4
    edf2:	2310      	movs	r3, #16
    edf4:	4628      	mov	r0, r5
    edf6:	4d0d      	ldr	r5, [pc, #52]	; (ee2c <ADC_0_init+0x70>)
    edf8:	47a8      	blx	r5

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);
    edfa:	4621      	mov	r1, r4
    edfc:	4b0c      	ldr	r3, [pc, #48]	; (ee30 <ADC_0_init+0x74>)
    edfe:	2007      	movs	r0, #7
    ee00:	4798      	blx	r3
	_gpio_set_pin_function(pin, function);
    ee02:	490c      	ldr	r1, [pc, #48]	; (ee34 <ADC_0_init+0x78>)
    ee04:	4b0c      	ldr	r3, [pc, #48]	; (ee38 <ADC_0_init+0x7c>)
    ee06:	2007      	movs	r0, #7

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
    ee08:	b005      	add	sp, #20
    ee0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ee0e:	4718      	bx	r3
    ee10:	40000800 	.word	0x40000800
    ee14:	43001c00 	.word	0x43001c00
    ee18:	40001c00 	.word	0x40001c00
    ee1c:	20001010 	.word	0x20001010
    ee20:	20014b14 	.word	0x20014b14
    ee24:	0000ce45 	.word	0x0000ce45
    ee28:	20014c10 	.word	0x20014c10
    ee2c:	0000cee9 	.word	0x0000cee9
    ee30:	0000ed2d 	.word	0x0000ed2d
    ee34:	00070001 	.word	0x00070001
    ee38:	0000ecc1 	.word	0x0000ecc1

0000ee3c <ADC_1_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    ee3c:	4a15      	ldr	r2, [pc, #84]	; (ee94 <ADC_1_init+0x58>)
 */
void ADC_1_init(void)
{
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    ee3e:	4916      	ldr	r1, [pc, #88]	; (ee98 <ADC_1_init+0x5c>)
    ee40:	6a13      	ldr	r3, [r2, #32]
{
    ee42:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    ee48:	6213      	str	r3, [r2, #32]
    ee4a:	4b14      	ldr	r3, [pc, #80]	; (ee9c <ADC_1_init+0x60>)
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    ee4c:	4e14      	ldr	r6, [pc, #80]	; (eea0 <ADC_1_init+0x64>)
    ee4e:	4d15      	ldr	r5, [pc, #84]	; (eea4 <ADC_1_init+0x68>)
    ee50:	4f15      	ldr	r7, [pc, #84]	; (eea8 <ADC_1_init+0x6c>)
{
    ee52:	b085      	sub	sp, #20
    ee54:	2241      	movs	r2, #65	; 0x41
    ee56:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    ee5a:	4b14      	ldr	r3, [pc, #80]	; (eeac <ADC_1_init+0x70>)
    ee5c:	9301      	str	r3, [sp, #4]
    ee5e:	2400      	movs	r4, #0
    ee60:	2301      	movs	r3, #1
    ee62:	9300      	str	r3, [sp, #0]
    ee64:	f106 0211 	add.w	r2, r6, #17
    ee68:	4623      	mov	r3, r4
    ee6a:	9402      	str	r4, [sp, #8]
    ee6c:	4628      	mov	r0, r5
    ee6e:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
    ee70:	f106 0212 	add.w	r2, r6, #18
    ee74:	4621      	mov	r1, r4
    ee76:	2310      	movs	r3, #16
    ee78:	4628      	mov	r0, r5
    ee7a:	4d0d      	ldr	r5, [pc, #52]	; (eeb0 <ADC_1_init+0x74>)
    ee7c:	47a8      	blx	r5

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);
    ee7e:	4621      	mov	r1, r4
    ee80:	4b0c      	ldr	r3, [pc, #48]	; (eeb4 <ADC_1_init+0x78>)
    ee82:	2042      	movs	r0, #66	; 0x42
    ee84:	4798      	blx	r3
    ee86:	490c      	ldr	r1, [pc, #48]	; (eeb8 <ADC_1_init+0x7c>)
    ee88:	4b0c      	ldr	r3, [pc, #48]	; (eebc <ADC_1_init+0x80>)
    ee8a:	2042      	movs	r0, #66	; 0x42

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
    ee8c:	b005      	add	sp, #20
    ee8e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ee92:	4718      	bx	r3
    ee94:	40000800 	.word	0x40000800
    ee98:	43002000 	.word	0x43002000
    ee9c:	40001c00 	.word	0x40001c00
    eea0:	20001010 	.word	0x20001010
    eea4:	20014ce8 	.word	0x20014ce8
    eea8:	0000ce45 	.word	0x0000ce45
    eeac:	20014aa8 	.word	0x20014aa8
    eeb0:	0000cee9 	.word	0x0000cee9
    eeb4:	0000ed2d 	.word	0x0000ed2d
    eeb8:	00420001 	.word	0x00420001
    eebc:	0000ecc1 	.word	0x0000ecc1

0000eec0 <CRC_0_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    eec0:	4a04      	ldr	r2, [pc, #16]	; (eed4 <CRC_0_init+0x14>)
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
    eec2:	4905      	ldr	r1, [pc, #20]	; (eed8 <CRC_0_init+0x18>)
    eec4:	6993      	ldr	r3, [r2, #24]
    eec6:	4805      	ldr	r0, [pc, #20]	; (eedc <CRC_0_init+0x1c>)
    eec8:	f043 0302 	orr.w	r3, r3, #2
    eecc:	6193      	str	r3, [r2, #24]
    eece:	4b04      	ldr	r3, [pc, #16]	; (eee0 <CRC_0_init+0x20>)
    eed0:	4718      	bx	r3
    eed2:	bf00      	nop
    eed4:	40000800 	.word	0x40000800
    eed8:	41002000 	.word	0x41002000
    eedc:	20014aa4 	.word	0x20014aa4
    eee0:	0000dd9d 	.word	0x0000dd9d

0000eee4 <EVENT_SYSTEM_0_init>:
    eee4:	4b08      	ldr	r3, [pc, #32]	; (ef08 <EVENT_SYSTEM_0_init+0x24>)
    eee6:	2240      	movs	r2, #64	; 0x40
    eee8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    eeec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    eef0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    eef4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    eef8:	4a04      	ldr	r2, [pc, #16]	; (ef0c <EVENT_SYSTEM_0_init+0x28>)
    eefa:	6993      	ldr	r3, [r2, #24]
    eefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ef00:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    ef02:	4b03      	ldr	r3, [pc, #12]	; (ef10 <EVENT_SYSTEM_0_init+0x2c>)
    ef04:	4718      	bx	r3
    ef06:	bf00      	nop
    ef08:	40001c00 	.word	0x40001c00
    ef0c:	40000800 	.word	0x40000800
    ef10:	00010dd9 	.word	0x00010dd9

0000ef14 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    ef14:	4a02      	ldr	r2, [pc, #8]	; (ef20 <FLASH_0_CLOCK_init+0xc>)
    ef16:	6913      	ldr	r3, [r2, #16]
    ef18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ef1c:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
    ef1e:	4770      	bx	lr
    ef20:	40000800 	.word	0x40000800

0000ef24 <FLASH_0_init>:

void FLASH_0_init(void)
{
    ef24:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
    ef26:	4b04      	ldr	r3, [pc, #16]	; (ef38 <FLASH_0_init+0x14>)
    ef28:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
}
    ef2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	flash_init(&FLASH_0, NVMCTRL);
    ef2e:	4903      	ldr	r1, [pc, #12]	; (ef3c <FLASH_0_init+0x18>)
    ef30:	4803      	ldr	r0, [pc, #12]	; (ef40 <FLASH_0_init+0x1c>)
    ef32:	4b04      	ldr	r3, [pc, #16]	; (ef44 <FLASH_0_init+0x20>)
    ef34:	4718      	bx	r3
    ef36:	bf00      	nop
    ef38:	0000ef15 	.word	0x0000ef15
    ef3c:	41004000 	.word	0x41004000
    ef40:	20014a88 	.word	0x20014a88
    ef44:	0000d845 	.word	0x0000d845

0000ef48 <QSPI_INSTANCE_PORT_init>:

void QSPI_INSTANCE_PORT_init(void)
{
    ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Set pin direction to input
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_IN);
    ef4c:	2101      	movs	r1, #1
    ef4e:	4e24      	ldr	r6, [pc, #144]	; (efe0 <QSPI_INSTANCE_PORT_init+0x98>)

	gpio_set_pin_pull_mode(PB11,
    ef50:	4d24      	ldr	r5, [pc, #144]	; (efe4 <QSPI_INSTANCE_PORT_init+0x9c>)
    ef52:	4c25      	ldr	r4, [pc, #148]	; (efe8 <QSPI_INSTANCE_PORT_init+0xa0>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ef54:	4f25      	ldr	r7, [pc, #148]	; (efec <QSPI_INSTANCE_PORT_init+0xa4>)
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_IN);
    ef56:	202b      	movs	r0, #43	; 0x2b
    ef58:	47b0      	blx	r6
	gpio_set_pin_pull_mode(PB11,
    ef5a:	2100      	movs	r1, #0
    ef5c:	202b      	movs	r0, #43	; 0x2b
    ef5e:	47a8      	blx	r5
    ef60:	4923      	ldr	r1, [pc, #140]	; (eff0 <QSPI_INSTANCE_PORT_init+0xa8>)
    ef62:	202b      	movs	r0, #43	; 0x2b
    ef64:	47a0      	blx	r4
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB11, PINMUX_PB11H_QSPI_CS);

	gpio_set_pin_direction(PA08,
    ef66:	2102      	movs	r1, #2
    ef68:	2008      	movs	r0, #8
    ef6a:	47b0      	blx	r6
    ef6c:	f44f 7380 	mov.w	r3, #256	; 0x100
    ef70:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA08,
    ef72:	2100      	movs	r1, #0
    ef74:	2008      	movs	r0, #8
    ef76:	47a8      	blx	r5
    ef78:	491e      	ldr	r1, [pc, #120]	; (eff4 <QSPI_INSTANCE_PORT_init+0xac>)
    ef7a:	2008      	movs	r0, #8
    ef7c:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(PA09,
    ef7e:	2102      	movs	r1, #2
    ef80:	2009      	movs	r0, #9
    ef82:	47b0      	blx	r6
    ef84:	f44f 7300 	mov.w	r3, #512	; 0x200
    ef88:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA09,
    ef8a:	2100      	movs	r1, #0
    ef8c:	2009      	movs	r0, #9
    ef8e:	47a8      	blx	r5
    ef90:	4919      	ldr	r1, [pc, #100]	; (eff8 <QSPI_INSTANCE_PORT_init+0xb0>)
    ef92:	2009      	movs	r0, #9
    ef94:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(PA10,
    ef96:	2102      	movs	r1, #2
    ef98:	200a      	movs	r0, #10
    ef9a:	47b0      	blx	r6
    ef9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    efa0:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA10,
    efa2:	2100      	movs	r1, #0
    efa4:	200a      	movs	r0, #10
    efa6:	47a8      	blx	r5
    efa8:	4914      	ldr	r1, [pc, #80]	; (effc <QSPI_INSTANCE_PORT_init+0xb4>)
    efaa:	200a      	movs	r0, #10
    efac:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(PA11,
    efae:	2102      	movs	r1, #2
    efb0:	200b      	movs	r0, #11
    efb2:	47b0      	blx	r6
    efb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
    efb8:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA11,
    efba:	2100      	movs	r1, #0
    efbc:	200b      	movs	r0, #11
    efbe:	47a8      	blx	r5
    efc0:	490f      	ldr	r1, [pc, #60]	; (f000 <QSPI_INSTANCE_PORT_init+0xb8>)
    efc2:	200b      	movs	r0, #11
    efc4:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(PB10, GPIO_DIRECTION_IN);
    efc6:	2101      	movs	r1, #1
    efc8:	202a      	movs	r0, #42	; 0x2a
    efca:	47b0      	blx	r6

	gpio_set_pin_pull_mode(PB10,
    efcc:	2100      	movs	r1, #0
    efce:	202a      	movs	r0, #42	; 0x2a
    efd0:	47a8      	blx	r5
    efd2:	4623      	mov	r3, r4
    efd4:	490b      	ldr	r1, [pc, #44]	; (f004 <QSPI_INSTANCE_PORT_init+0xbc>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
    efd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    efda:	202a      	movs	r0, #42	; 0x2a
    efdc:	4718      	bx	r3
    efde:	bf00      	nop
    efe0:	0000ed2d 	.word	0x0000ed2d
    efe4:	0000ed7d 	.word	0x0000ed7d
    efe8:	0000ecc1 	.word	0x0000ecc1
    efec:	41008000 	.word	0x41008000
    eff0:	002b0007 	.word	0x002b0007
    eff4:	00080007 	.word	0x00080007
    eff8:	00090007 	.word	0x00090007
    effc:	000a0007 	.word	0x000a0007
    f000:	000b0007 	.word	0x000b0007
    f004:	002a0007 	.word	0x002a0007

0000f008 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    f008:	4b06      	ldr	r3, [pc, #24]	; (f024 <QSPI_INSTANCE_CLOCK_init+0x1c>)
    f00a:	691a      	ldr	r2, [r3, #16]
    f00c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f010:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    f012:	691a      	ldr	r2, [r3, #16]
    f014:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    f018:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    f01a:	69da      	ldr	r2, [r3, #28]
    f01c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f020:	61da      	str	r2, [r3, #28]
void QSPI_INSTANCE_CLOCK_init(void)
{
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}
    f022:	4770      	bx	lr
    f024:	40000800 	.word	0x40000800

0000f028 <QSPI_INSTANCE_init>:

void QSPI_INSTANCE_init(void)
{
    f028:	b510      	push	{r4, lr}
	QSPI_INSTANCE_CLOCK_init();
    f02a:	4b05      	ldr	r3, [pc, #20]	; (f040 <QSPI_INSTANCE_init+0x18>)
    f02c:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
    f02e:	4b05      	ldr	r3, [pc, #20]	; (f044 <QSPI_INSTANCE_init+0x1c>)
    f030:	4905      	ldr	r1, [pc, #20]	; (f048 <QSPI_INSTANCE_init+0x20>)
    f032:	4806      	ldr	r0, [pc, #24]	; (f04c <QSPI_INSTANCE_init+0x24>)
    f034:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
}
    f036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	QSPI_INSTANCE_PORT_init();
    f03a:	4b05      	ldr	r3, [pc, #20]	; (f050 <QSPI_INSTANCE_init+0x28>)
    f03c:	4718      	bx	r3
    f03e:	bf00      	nop
    f040:	0000f009 	.word	0x0000f009
    f044:	00010da9 	.word	0x00010da9
    f048:	42003400 	.word	0x42003400
    f04c:	20014d54 	.word	0x20014d54
    f050:	0000ef49 	.word	0x0000ef49

0000f054 <USART_EAST_CLOCK_init>:
    f054:	4b06      	ldr	r3, [pc, #24]	; (f070 <USART_EAST_CLOCK_init+0x1c>)
    f056:	2241      	movs	r2, #65	; 0x41
    f058:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    f05c:	2242      	movs	r2, #66	; 0x42
    f05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    f062:	4a04      	ldr	r2, [pc, #16]	; (f074 <USART_EAST_CLOCK_init+0x20>)
    f064:	6953      	ldr	r3, [r2, #20]
    f066:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f06a:	6153      	str	r3, [r2, #20]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}
    f06c:	4770      	bx	lr
    f06e:	bf00      	nop
    f070:	40001c00 	.word	0x40001c00
    f074:	40000800 	.word	0x40000800

0000f078 <USART_EAST_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_EAST_PORT_init()
{
    f078:	b510      	push	{r4, lr}
    f07a:	4c05      	ldr	r4, [pc, #20]	; (f090 <USART_EAST_PORT_init+0x18>)
    f07c:	4905      	ldr	r1, [pc, #20]	; (f094 <USART_EAST_PORT_init+0x1c>)
    f07e:	2051      	movs	r0, #81	; 0x51
    f080:	47a0      	blx	r4
    f082:	4623      	mov	r3, r4
    f084:	4904      	ldr	r1, [pc, #16]	; (f098 <USART_EAST_PORT_init+0x20>)

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
}
    f086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f08a:	2050      	movs	r0, #80	; 0x50
    f08c:	4718      	bx	r3
    f08e:	bf00      	nop
    f090:	0000ecc1 	.word	0x0000ecc1
    f094:	00510003 	.word	0x00510003
    f098:	00500003 	.word	0x00500003

0000f09c <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
    f09c:	b513      	push	{r0, r1, r4, lr}
	USART_EAST_CLOCK_init();
    f09e:	4b07      	ldr	r3, [pc, #28]	; (f0bc <USART_EAST_init+0x20>)
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    f0a0:	4c07      	ldr	r4, [pc, #28]	; (f0c0 <USART_EAST_init+0x24>)
	USART_EAST_CLOCK_init();
    f0a2:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    f0a4:	2300      	movs	r3, #0
    f0a6:	9300      	str	r3, [sp, #0]
    f0a8:	4a06      	ldr	r2, [pc, #24]	; (f0c4 <USART_EAST_init+0x28>)
    f0aa:	4907      	ldr	r1, [pc, #28]	; (f0c8 <USART_EAST_init+0x2c>)
    f0ac:	4807      	ldr	r0, [pc, #28]	; (f0cc <USART_EAST_init+0x30>)
    f0ae:	2310      	movs	r3, #16
    f0b0:	47a0      	blx	r4
	USART_EAST_PORT_init();
    f0b2:	4b07      	ldr	r3, [pc, #28]	; (f0d0 <USART_EAST_init+0x34>)
}
    f0b4:	b002      	add	sp, #8
    f0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_EAST_PORT_init();
    f0ba:	4718      	bx	r3
    f0bc:	0000f055 	.word	0x0000f055
    f0c0:	0000f9b1 	.word	0x0000f9b1
    f0c4:	20001032 	.word	0x20001032
    f0c8:	40003000 	.word	0x40003000
    f0cc:	20014b40 	.word	0x20014b40
    f0d0:	0000f079 	.word	0x0000f079

0000f0d4 <USART_NORTH_CLOCK_init>:
    f0d4:	4b06      	ldr	r3, [pc, #24]	; (f0f0 <USART_NORTH_CLOCK_init+0x1c>)
    f0d6:	2241      	movs	r2, #65	; 0x41
    f0d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    f0dc:	2242      	movs	r2, #66	; 0x42
    f0de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    f0e2:	4a04      	ldr	r2, [pc, #16]	; (f0f4 <USART_NORTH_CLOCK_init+0x20>)
    f0e4:	6953      	ldr	r3, [r2, #20]
    f0e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f0ea:	6153      	str	r3, [r2, #20]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}
    f0ec:	4770      	bx	lr
    f0ee:	bf00      	nop
    f0f0:	40001c00 	.word	0x40001c00
    f0f4:	40000800 	.word	0x40000800

0000f0f8 <USART_NORTH_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_NORTH_PORT_init()
{
    f0f8:	b510      	push	{r4, lr}
    f0fa:	4c05      	ldr	r4, [pc, #20]	; (f110 <USART_NORTH_PORT_init+0x18>)
    f0fc:	4905      	ldr	r1, [pc, #20]	; (f114 <USART_NORTH_PORT_init+0x1c>)
    f0fe:	205b      	movs	r0, #91	; 0x5b
    f100:	47a0      	blx	r4
    f102:	4623      	mov	r3, r4
    f104:	4904      	ldr	r1, [pc, #16]	; (f118 <USART_NORTH_PORT_init+0x20>)

	gpio_set_pin_function(PC27, PINMUX_PC27C_SERCOM1_PAD0);

	gpio_set_pin_function(PC28, PINMUX_PC28C_SERCOM1_PAD1);
}
    f106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f10a:	205c      	movs	r0, #92	; 0x5c
    f10c:	4718      	bx	r3
    f10e:	bf00      	nop
    f110:	0000ecc1 	.word	0x0000ecc1
    f114:	005b0002 	.word	0x005b0002
    f118:	005c0002 	.word	0x005c0002

0000f11c <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
    f11c:	b513      	push	{r0, r1, r4, lr}
	USART_NORTH_CLOCK_init();
    f11e:	4b07      	ldr	r3, [pc, #28]	; (f13c <USART_NORTH_init+0x20>)
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    f120:	4c07      	ldr	r4, [pc, #28]	; (f140 <USART_NORTH_init+0x24>)
	USART_NORTH_CLOCK_init();
    f122:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    f124:	2300      	movs	r3, #0
    f126:	9300      	str	r3, [sp, #0]
    f128:	4a06      	ldr	r2, [pc, #24]	; (f144 <USART_NORTH_init+0x28>)
    f12a:	4907      	ldr	r1, [pc, #28]	; (f148 <USART_NORTH_init+0x2c>)
    f12c:	4807      	ldr	r0, [pc, #28]	; (f14c <USART_NORTH_init+0x30>)
    f12e:	2310      	movs	r3, #16
    f130:	47a0      	blx	r4
	USART_NORTH_PORT_init();
    f132:	4b07      	ldr	r3, [pc, #28]	; (f150 <USART_NORTH_init+0x34>)
}
    f134:	b002      	add	sp, #8
    f136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_NORTH_PORT_init();
    f13a:	4718      	bx	r3
    f13c:	0000f0d5 	.word	0x0000f0d5
    f140:	0000f9b1 	.word	0x0000f9b1
    f144:	20001042 	.word	0x20001042
    f148:	40003400 	.word	0x40003400
    f14c:	20014b94 	.word	0x20014b94
    f150:	0000f0f9 	.word	0x0000f0f9

0000f154 <GRID_AUX_PORT_init>:

void GRID_AUX_PORT_init(void)
{
    f154:	b510      	push	{r4, lr}
    f156:	4c05      	ldr	r4, [pc, #20]	; (f16c <GRID_AUX_PORT_init+0x18>)
    f158:	4905      	ldr	r1, [pc, #20]	; (f170 <GRID_AUX_PORT_init+0x1c>)
    f15a:	2039      	movs	r0, #57	; 0x39
    f15c:	47a0      	blx	r4
    f15e:	4623      	mov	r3, r4
    f160:	4904      	ldr	r1, [pc, #16]	; (f174 <GRID_AUX_PORT_init+0x20>)

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
}
    f162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f166:	2038      	movs	r0, #56	; 0x38
    f168:	4718      	bx	r3
    f16a:	bf00      	nop
    f16c:	0000ecc1 	.word	0x0000ecc1
    f170:	00390003 	.word	0x00390003
    f174:	00380003 	.word	0x00380003

0000f178 <GRID_AUX_CLOCK_init>:
    f178:	4b06      	ldr	r3, [pc, #24]	; (f194 <GRID_AUX_CLOCK_init+0x1c>)
    f17a:	2241      	movs	r2, #65	; 0x41
    f17c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    f180:	2242      	movs	r2, #66	; 0x42
    f182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    f186:	4a04      	ldr	r2, [pc, #16]	; (f198 <GRID_AUX_CLOCK_init+0x20>)
    f188:	6993      	ldr	r3, [r2, #24]
    f18a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f18e:	6193      	str	r3, [r2, #24]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}
    f190:	4770      	bx	lr
    f192:	bf00      	nop
    f194:	40001c00 	.word	0x40001c00
    f198:	40000800 	.word	0x40000800

0000f19c <GRID_AUX_init>:

void GRID_AUX_init(void)
{
    f19c:	b510      	push	{r4, lr}
	GRID_AUX_CLOCK_init();
    f19e:	4b05      	ldr	r3, [pc, #20]	; (f1b4 <GRID_AUX_init+0x18>)
    f1a0:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
    f1a2:	4b05      	ldr	r3, [pc, #20]	; (f1b8 <GRID_AUX_init+0x1c>)
    f1a4:	4905      	ldr	r1, [pc, #20]	; (f1bc <GRID_AUX_init+0x20>)
    f1a6:	4806      	ldr	r0, [pc, #24]	; (f1c0 <GRID_AUX_init+0x24>)
    f1a8:	2200      	movs	r2, #0
    f1aa:	4798      	blx	r3
	GRID_AUX_PORT_init();
}
    f1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GRID_AUX_PORT_init();
    f1b0:	4b04      	ldr	r3, [pc, #16]	; (f1c4 <GRID_AUX_init+0x28>)
    f1b2:	4718      	bx	r3
    f1b4:	0000f179 	.word	0x0000f179
    f1b8:	0000d6f9 	.word	0x0000d6f9
    f1bc:	41012000 	.word	0x41012000
    f1c0:	20014b00 	.word	0x20014b00
    f1c4:	0000f155 	.word	0x0000f155

0000f1c8 <UI_SPI_PORT_init>:

void UI_SPI_PORT_init(void)
{
    f1c8:	b570      	push	{r4, r5, r6, lr}
    f1ca:	4e12      	ldr	r6, [pc, #72]	; (f214 <UI_SPI_PORT_init+0x4c>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB20, GPIO_DIRECTION_OUT);
    f1cc:	4d12      	ldr	r5, [pc, #72]	; (f218 <UI_SPI_PORT_init+0x50>)
    f1ce:	4c13      	ldr	r4, [pc, #76]	; (f21c <UI_SPI_PORT_init+0x54>)
    f1d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    f1d4:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
    f1d8:	2102      	movs	r1, #2
    f1da:	2034      	movs	r0, #52	; 0x34
    f1dc:	47a8      	blx	r5
    f1de:	4910      	ldr	r1, [pc, #64]	; (f220 <UI_SPI_PORT_init+0x58>)
    f1e0:	2034      	movs	r0, #52	; 0x34
    f1e2:	47a0      	blx	r4
    f1e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    f1e8:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB21, GPIO_DIRECTION_OUT);
    f1ec:	2102      	movs	r1, #2
    f1ee:	2035      	movs	r0, #53	; 0x35
    f1f0:	47a8      	blx	r5
    f1f2:	490c      	ldr	r1, [pc, #48]	; (f224 <UI_SPI_PORT_init+0x5c>)
    f1f4:	2035      	movs	r0, #53	; 0x35
    f1f6:	47a0      	blx	r4

	gpio_set_pin_function(PB21, PINMUX_PB21C_SERCOM3_PAD1);

	// Set pin direction to input
	gpio_set_pin_direction(PA20, GPIO_DIRECTION_IN);
    f1f8:	2101      	movs	r1, #1
    f1fa:	2014      	movs	r0, #20
    f1fc:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PA20,
    f1fe:	4b0a      	ldr	r3, [pc, #40]	; (f228 <UI_SPI_PORT_init+0x60>)
    f200:	2100      	movs	r1, #0
    f202:	2014      	movs	r0, #20
    f204:	4798      	blx	r3
    f206:	4623      	mov	r3, r4
    f208:	4908      	ldr	r1, [pc, #32]	; (f22c <UI_SPI_PORT_init+0x64>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA20, PINMUX_PA20D_SERCOM3_PAD2);
}
    f20a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f20e:	2014      	movs	r0, #20
    f210:	4718      	bx	r3
    f212:	bf00      	nop
    f214:	41008000 	.word	0x41008000
    f218:	0000ed2d 	.word	0x0000ed2d
    f21c:	0000ecc1 	.word	0x0000ecc1
    f220:	00340002 	.word	0x00340002
    f224:	00350002 	.word	0x00350002
    f228:	0000ed7d 	.word	0x0000ed7d
    f22c:	00140003 	.word	0x00140003

0000f230 <UI_SPI_CLOCK_init>:
    f230:	4b06      	ldr	r3, [pc, #24]	; (f24c <UI_SPI_CLOCK_init+0x1c>)
    f232:	2241      	movs	r2, #65	; 0x41
    f234:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    f238:	2243      	movs	r2, #67	; 0x43
    f23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    f23e:	4a04      	ldr	r2, [pc, #16]	; (f250 <UI_SPI_CLOCK_init+0x20>)
    f240:	6993      	ldr	r3, [r2, #24]
    f242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f246:	6193      	str	r3, [r2, #24]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}
    f248:	4770      	bx	lr
    f24a:	bf00      	nop
    f24c:	40001c00 	.word	0x40001c00
    f250:	40000800 	.word	0x40000800

0000f254 <UI_SPI_init>:

void UI_SPI_init(void)
{
    f254:	b510      	push	{r4, lr}
	UI_SPI_CLOCK_init();
    f256:	4b05      	ldr	r3, [pc, #20]	; (f26c <UI_SPI_init+0x18>)
    f258:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
    f25a:	4b05      	ldr	r3, [pc, #20]	; (f270 <UI_SPI_init+0x1c>)
    f25c:	4905      	ldr	r1, [pc, #20]	; (f274 <UI_SPI_init+0x20>)
    f25e:	4806      	ldr	r0, [pc, #24]	; (f278 <UI_SPI_init+0x24>)
    f260:	4798      	blx	r3
	UI_SPI_PORT_init();
}
    f262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	UI_SPI_PORT_init();
    f266:	4b05      	ldr	r3, [pc, #20]	; (f27c <UI_SPI_init+0x28>)
    f268:	4718      	bx	r3
    f26a:	bf00      	nop
    f26c:	0000f231 	.word	0x0000f231
    f270:	0000dbad 	.word	0x0000dbad
    f274:	41014000 	.word	0x41014000
    f278:	20014a00 	.word	0x20014a00
    f27c:	0000f1c9 	.word	0x0000f1c9

0000f280 <USART_WEST_CLOCK_init>:
    f280:	4b06      	ldr	r3, [pc, #24]	; (f29c <USART_WEST_CLOCK_init+0x1c>)
    f282:	2241      	movs	r2, #65	; 0x41
    f284:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    f288:	2242      	movs	r2, #66	; 0x42
    f28a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    f28e:	4a04      	ldr	r2, [pc, #16]	; (f2a0 <USART_WEST_CLOCK_init+0x20>)
    f290:	6a13      	ldr	r3, [r2, #32]
    f292:	f043 0301 	orr.w	r3, r3, #1
    f296:	6213      	str	r3, [r2, #32]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}
    f298:	4770      	bx	lr
    f29a:	bf00      	nop
    f29c:	40001c00 	.word	0x40001c00
    f2a0:	40000800 	.word	0x40000800

0000f2a4 <USART_WEST_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_WEST_PORT_init()
{
    f2a4:	b510      	push	{r4, lr}
    f2a6:	4c05      	ldr	r4, [pc, #20]	; (f2bc <USART_WEST_PORT_init+0x18>)
    f2a8:	4905      	ldr	r1, [pc, #20]	; (f2c0 <USART_WEST_PORT_init+0x1c>)
    f2aa:	2028      	movs	r0, #40	; 0x28
    f2ac:	47a0      	blx	r4
    f2ae:	4623      	mov	r3, r4
    f2b0:	4904      	ldr	r1, [pc, #16]	; (f2c4 <USART_WEST_PORT_init+0x20>)

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
    f2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2b6:	2029      	movs	r0, #41	; 0x29
    f2b8:	4718      	bx	r3
    f2ba:	bf00      	nop
    f2bc:	0000ecc1 	.word	0x0000ecc1
    f2c0:	00280003 	.word	0x00280003
    f2c4:	00290003 	.word	0x00290003

0000f2c8 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
    f2c8:	b513      	push	{r0, r1, r4, lr}
	USART_WEST_CLOCK_init();
    f2ca:	4b08      	ldr	r3, [pc, #32]	; (f2ec <USART_WEST_init+0x24>)
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    f2cc:	4c08      	ldr	r4, [pc, #32]	; (f2f0 <USART_WEST_init+0x28>)
	USART_WEST_CLOCK_init();
    f2ce:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    f2d0:	2300      	movs	r3, #0
    f2d2:	9300      	str	r3, [sp, #0]
    f2d4:	4a07      	ldr	r2, [pc, #28]	; (f2f4 <USART_WEST_init+0x2c>)
    f2d6:	4808      	ldr	r0, [pc, #32]	; (f2f8 <USART_WEST_init+0x30>)
    f2d8:	2310      	movs	r3, #16
    f2da:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    f2de:	47a0      	blx	r4
	USART_WEST_PORT_init();
    f2e0:	4b06      	ldr	r3, [pc, #24]	; (f2fc <USART_WEST_init+0x34>)
}
    f2e2:	b002      	add	sp, #8
    f2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_WEST_PORT_init();
    f2e8:	4718      	bx	r3
    f2ea:	bf00      	nop
    f2ec:	0000f281 	.word	0x0000f281
    f2f0:	0000f9b1 	.word	0x0000f9b1
    f2f4:	20001052 	.word	0x20001052
    f2f8:	20014c48 	.word	0x20014c48
    f2fc:	0000f2a5 	.word	0x0000f2a5

0000f300 <SYS_I2C_PORT_init>:

void SYS_I2C_PORT_init(void)
{
    f300:	b570      	push	{r4, r5, r6, lr}

	gpio_set_pin_pull_mode(PA23,
    f302:	2100      	movs	r1, #0
    f304:	4d07      	ldr	r5, [pc, #28]	; (f324 <SYS_I2C_PORT_init+0x24>)
    f306:	4c08      	ldr	r4, [pc, #32]	; (f328 <SYS_I2C_PORT_init+0x28>)
    f308:	2017      	movs	r0, #23
    f30a:	47a8      	blx	r5
    f30c:	4907      	ldr	r1, [pc, #28]	; (f32c <SYS_I2C_PORT_init+0x2c>)
    f30e:	2017      	movs	r0, #23
    f310:	47a0      	blx	r4
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);

	gpio_set_pin_pull_mode(PA22,
    f312:	2100      	movs	r1, #0
    f314:	2016      	movs	r0, #22
    f316:	47a8      	blx	r5
    f318:	4623      	mov	r3, r4
    f31a:	4905      	ldr	r1, [pc, #20]	; (f330 <SYS_I2C_PORT_init+0x30>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
}
    f31c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f320:	2016      	movs	r0, #22
    f322:	4718      	bx	r3
    f324:	0000ed7d 	.word	0x0000ed7d
    f328:	0000ecc1 	.word	0x0000ecc1
    f32c:	00170003 	.word	0x00170003
    f330:	00160003 	.word	0x00160003

0000f334 <SYS_I2C_CLOCK_init>:
    f334:	4b06      	ldr	r3, [pc, #24]	; (f350 <SYS_I2C_CLOCK_init+0x1c>)
    f336:	2241      	movs	r2, #65	; 0x41
    f338:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    f33c:	2242      	movs	r2, #66	; 0x42
    f33e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    f342:	4a04      	ldr	r2, [pc, #16]	; (f354 <SYS_I2C_CLOCK_init+0x20>)
    f344:	6a13      	ldr	r3, [r2, #32]
    f346:	f043 0302 	orr.w	r3, r3, #2
    f34a:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}
    f34c:	4770      	bx	lr
    f34e:	bf00      	nop
    f350:	40001c00 	.word	0x40001c00
    f354:	40000800 	.word	0x40000800

0000f358 <SYS_I2C_init>:

void SYS_I2C_init(void)
{
    f358:	b510      	push	{r4, lr}
	SYS_I2C_CLOCK_init();
    f35a:	4b05      	ldr	r3, [pc, #20]	; (f370 <SYS_I2C_init+0x18>)
    f35c:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
    f35e:	4b05      	ldr	r3, [pc, #20]	; (f374 <SYS_I2C_init+0x1c>)
    f360:	4905      	ldr	r1, [pc, #20]	; (f378 <SYS_I2C_init+0x20>)
    f362:	4806      	ldr	r0, [pc, #24]	; (f37c <SYS_I2C_init+0x24>)
    f364:	4798      	blx	r3
	SYS_I2C_PORT_init();
}
    f366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SYS_I2C_PORT_init();
    f36a:	4b05      	ldr	r3, [pc, #20]	; (f380 <SYS_I2C_init+0x28>)
    f36c:	4718      	bx	r3
    f36e:	bf00      	nop
    f370:	0000f335 	.word	0x0000f335
    f374:	0000ad01 	.word	0x0000ad01
    f378:	43000400 	.word	0x43000400
    f37c:	20014ac0 	.word	0x20014ac0
    f380:	0000f301 	.word	0x0000f301

0000f384 <USART_SOUTH_CLOCK_init>:
    f384:	4b06      	ldr	r3, [pc, #24]	; (f3a0 <USART_SOUTH_CLOCK_init+0x1c>)
    f386:	2241      	movs	r2, #65	; 0x41
    f388:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    f38c:	2242      	movs	r2, #66	; 0x42
    f38e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    f392:	4a04      	ldr	r2, [pc, #16]	; (f3a4 <USART_SOUTH_CLOCK_init+0x20>)
    f394:	6a13      	ldr	r3, [r2, #32]
    f396:	f043 0304 	orr.w	r3, r3, #4
    f39a:	6213      	str	r3, [r2, #32]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}
    f39c:	4770      	bx	lr
    f39e:	bf00      	nop
    f3a0:	40001c00 	.word	0x40001c00
    f3a4:	40000800 	.word	0x40000800

0000f3a8 <USART_SOUTH_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_SOUTH_PORT_init()
{
    f3a8:	b510      	push	{r4, lr}
    f3aa:	4c05      	ldr	r4, [pc, #20]	; (f3c0 <USART_SOUTH_PORT_init+0x18>)
    f3ac:	4905      	ldr	r1, [pc, #20]	; (f3c4 <USART_SOUTH_PORT_init+0x1c>)
    f3ae:	204d      	movs	r0, #77	; 0x4d
    f3b0:	47a0      	blx	r4
    f3b2:	4623      	mov	r3, r4
    f3b4:	4904      	ldr	r1, [pc, #16]	; (f3c8 <USART_SOUTH_PORT_init+0x20>)

	gpio_set_pin_function(PC13, PINMUX_PC13D_SERCOM6_PAD0);

	gpio_set_pin_function(PC12, PINMUX_PC12D_SERCOM6_PAD1);
}
    f3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3ba:	204c      	movs	r0, #76	; 0x4c
    f3bc:	4718      	bx	r3
    f3be:	bf00      	nop
    f3c0:	0000ecc1 	.word	0x0000ecc1
    f3c4:	004d0003 	.word	0x004d0003
    f3c8:	004c0003 	.word	0x004c0003

0000f3cc <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
    f3cc:	b513      	push	{r0, r1, r4, lr}
	USART_SOUTH_CLOCK_init();
    f3ce:	4b07      	ldr	r3, [pc, #28]	; (f3ec <USART_SOUTH_init+0x20>)
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    f3d0:	4c07      	ldr	r4, [pc, #28]	; (f3f0 <USART_SOUTH_init+0x24>)
	USART_SOUTH_CLOCK_init();
    f3d2:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    f3d4:	2300      	movs	r3, #0
    f3d6:	9300      	str	r3, [sp, #0]
    f3d8:	4a06      	ldr	r2, [pc, #24]	; (f3f4 <USART_SOUTH_init+0x28>)
    f3da:	4907      	ldr	r1, [pc, #28]	; (f3f8 <USART_SOUTH_init+0x2c>)
    f3dc:	4807      	ldr	r0, [pc, #28]	; (f3fc <USART_SOUTH_init+0x30>)
    f3de:	2310      	movs	r3, #16
    f3e0:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
    f3e2:	4b07      	ldr	r3, [pc, #28]	; (f400 <USART_SOUTH_init+0x34>)
}
    f3e4:	b002      	add	sp, #8
    f3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_SOUTH_PORT_init();
    f3ea:	4718      	bx	r3
    f3ec:	0000f385 	.word	0x0000f385
    f3f0:	0000f9b1 	.word	0x0000f9b1
    f3f4:	20001062 	.word	0x20001062
    f3f8:	43000800 	.word	0x43000800
    f3fc:	20014c98 	.word	0x20014c98
    f400:	0000f3a9 	.word	0x0000f3a9

0000f404 <GRID_LED_PORT_init>:

void GRID_LED_PORT_init(void)
{
    f404:	b570      	push	{r4, r5, r6, lr}
    f406:	4e12      	ldr	r6, [pc, #72]	; (f450 <GRID_LED_PORT_init+0x4c>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB30, GPIO_DIRECTION_OUT);
    f408:	4d12      	ldr	r5, [pc, #72]	; (f454 <GRID_LED_PORT_init+0x50>)
    f40a:	4c13      	ldr	r4, [pc, #76]	; (f458 <GRID_LED_PORT_init+0x54>)
    f40c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f410:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
    f414:	2102      	movs	r1, #2
    f416:	203e      	movs	r0, #62	; 0x3e
    f418:	47a8      	blx	r5
    f41a:	4910      	ldr	r1, [pc, #64]	; (f45c <GRID_LED_PORT_init+0x58>)
    f41c:	203e      	movs	r0, #62	; 0x3e
    f41e:	47a0      	blx	r4
    f420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    f424:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB31, GPIO_DIRECTION_OUT);
    f428:	2102      	movs	r1, #2
    f42a:	203f      	movs	r0, #63	; 0x3f
    f42c:	47a8      	blx	r5
    f42e:	490c      	ldr	r1, [pc, #48]	; (f460 <GRID_LED_PORT_init+0x5c>)
    f430:	203f      	movs	r0, #63	; 0x3f
    f432:	47a0      	blx	r4

	gpio_set_pin_function(PB31, PINMUX_PB31C_SERCOM7_PAD1);

	// Set pin direction to input
	gpio_set_pin_direction(PA30, GPIO_DIRECTION_IN);
    f434:	2101      	movs	r1, #1
    f436:	201e      	movs	r0, #30
    f438:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PA30,
    f43a:	4b0a      	ldr	r3, [pc, #40]	; (f464 <GRID_LED_PORT_init+0x60>)
    f43c:	2100      	movs	r1, #0
    f43e:	201e      	movs	r0, #30
    f440:	4798      	blx	r3
    f442:	4623      	mov	r3, r4
    f444:	4908      	ldr	r1, [pc, #32]	; (f468 <GRID_LED_PORT_init+0x64>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA30, PINMUX_PA30C_SERCOM7_PAD2);
}
    f446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f44a:	201e      	movs	r0, #30
    f44c:	4718      	bx	r3
    f44e:	bf00      	nop
    f450:	41008000 	.word	0x41008000
    f454:	0000ed2d 	.word	0x0000ed2d
    f458:	0000ecc1 	.word	0x0000ecc1
    f45c:	003e0002 	.word	0x003e0002
    f460:	003f0002 	.word	0x003f0002
    f464:	0000ed7d 	.word	0x0000ed7d
    f468:	001e0002 	.word	0x001e0002

0000f46c <GRID_LED_CLOCK_init>:
    f46c:	4b06      	ldr	r3, [pc, #24]	; (f488 <GRID_LED_CLOCK_init+0x1c>)
    f46e:	2241      	movs	r2, #65	; 0x41
    f470:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    f474:	2242      	movs	r2, #66	; 0x42
    f476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    f47a:	4a04      	ldr	r2, [pc, #16]	; (f48c <GRID_LED_CLOCK_init+0x20>)
    f47c:	6a13      	ldr	r3, [r2, #32]
    f47e:	f043 0308 	orr.w	r3, r3, #8
    f482:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}
    f484:	4770      	bx	lr
    f486:	bf00      	nop
    f488:	40001c00 	.word	0x40001c00
    f48c:	40000800 	.word	0x40000800

0000f490 <GRID_LED_init>:

void GRID_LED_init(void)
{
    f490:	b510      	push	{r4, lr}
	GRID_LED_CLOCK_init();
    f492:	4b05      	ldr	r3, [pc, #20]	; (f4a8 <GRID_LED_init+0x18>)
    f494:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
    f496:	4b05      	ldr	r3, [pc, #20]	; (f4ac <GRID_LED_init+0x1c>)
    f498:	4905      	ldr	r1, [pc, #20]	; (f4b0 <GRID_LED_init+0x20>)
    f49a:	4806      	ldr	r0, [pc, #24]	; (f4b4 <GRID_LED_init+0x24>)
    f49c:	4798      	blx	r3
	GRID_LED_PORT_init();
}
    f49e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GRID_LED_PORT_init();
    f4a2:	4b05      	ldr	r3, [pc, #20]	; (f4b8 <GRID_LED_init+0x28>)
    f4a4:	4718      	bx	r3
    f4a6:	bf00      	nop
    f4a8:	0000f46d 	.word	0x0000f46d
    f4ac:	0000aedd 	.word	0x0000aedd
    f4b0:	43000c00 	.word	0x43000c00
    f4b4:	20014be4 	.word	0x20014be4
    f4b8:	0000f405 	.word	0x0000f405

0000f4bc <delay_driver_init>:

void delay_driver_init(void)
{
	delay_init(SysTick);
    f4bc:	4801      	ldr	r0, [pc, #4]	; (f4c4 <delay_driver_init+0x8>)
    f4be:	4b02      	ldr	r3, [pc, #8]	; (f4c8 <delay_driver_init+0xc>)
    f4c0:	4718      	bx	r3
    f4c2:	bf00      	nop
    f4c4:	e000e010 	.word	0xe000e010
    f4c8:	0000c869 	.word	0x0000c869

0000f4cc <RAND_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TRNG;
    f4cc:	4a02      	ldr	r2, [pc, #8]	; (f4d8 <RAND_0_CLOCK_init+0xc>)
    f4ce:	69d3      	ldr	r3, [r2, #28]
    f4d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f4d4:	61d3      	str	r3, [r2, #28]
}

void RAND_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TRNG_bit(MCLK);
}
    f4d6:	4770      	bx	lr
    f4d8:	40000800 	.word	0x40000800

0000f4dc <RAND_0_init>:

void RAND_0_init(void)
{
    f4dc:	b510      	push	{r4, lr}
	RAND_0_CLOCK_init();
    f4de:	4b04      	ldr	r3, [pc, #16]	; (f4f0 <RAND_0_init+0x14>)
    f4e0:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
}
    f4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rand_sync_init(&RAND_0, TRNG);
    f4e6:	4903      	ldr	r1, [pc, #12]	; (f4f4 <RAND_0_init+0x18>)
    f4e8:	4803      	ldr	r0, [pc, #12]	; (f4f8 <RAND_0_init+0x1c>)
    f4ea:	4b04      	ldr	r3, [pc, #16]	; (f4fc <RAND_0_init+0x20>)
    f4ec:	4718      	bx	r3
    f4ee:	bf00      	nop
    f4f0:	0000f4cd 	.word	0x0000f4cd
    f4f4:	42002800 	.word	0x42002800
    f4f8:	20014b0c 	.word	0x20014b0c
    f4fc:	0000d271 	.word	0x0000d271

0000f500 <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    f500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	gpio_set_pin_direction(PA24,
    f504:	2102      	movs	r1, #2
    f506:	4f0f      	ldr	r7, [pc, #60]	; (f544 <USB_DEVICE_INSTANCE_PORT_init+0x44>)
    f508:	4e0f      	ldr	r6, [pc, #60]	; (f548 <USB_DEVICE_INSTANCE_PORT_init+0x48>)
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    f50a:	4d10      	ldr	r5, [pc, #64]	; (f54c <USB_DEVICE_INSTANCE_PORT_init+0x4c>)
    f50c:	4c10      	ldr	r4, [pc, #64]	; (f550 <USB_DEVICE_INSTANCE_PORT_init+0x50>)
	gpio_set_pin_direction(PA24,
    f50e:	2018      	movs	r0, #24
    f510:	47b8      	blx	r7
    f512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    f516:	6173      	str	r3, [r6, #20]
	gpio_set_pin_pull_mode(PA24,
    f518:	2100      	movs	r1, #0
    f51a:	2018      	movs	r0, #24
    f51c:	47a8      	blx	r5
    f51e:	490d      	ldr	r1, [pc, #52]	; (f554 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    f520:	2018      	movs	r0, #24
    f522:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    f524:	2102      	movs	r1, #2
    f526:	2019      	movs	r0, #25
    f528:	47b8      	blx	r7
    f52a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    f52e:	6173      	str	r3, [r6, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    f530:	2100      	movs	r1, #0
    f532:	2019      	movs	r0, #25
    f534:	47a8      	blx	r5
    f536:	4623      	mov	r3, r4
    f538:	4907      	ldr	r1, [pc, #28]	; (f558 <USB_DEVICE_INSTANCE_PORT_init+0x58>)
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    f53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f53e:	2019      	movs	r0, #25
    f540:	4718      	bx	r3
    f542:	bf00      	nop
    f544:	0000ed2d 	.word	0x0000ed2d
    f548:	41008000 	.word	0x41008000
    f54c:	0000ed7d 	.word	0x0000ed7d
    f550:	0000ecc1 	.word	0x0000ecc1
    f554:	00180007 	.word	0x00180007
    f558:	00190007 	.word	0x00190007

0000f55c <USB_DEVICE_INSTANCE_CLOCK_init>:
    f55c:	4b07      	ldr	r3, [pc, #28]	; (f57c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    f55e:	2241      	movs	r2, #65	; 0x41
    f560:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    f564:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    f568:	691a      	ldr	r2, [r3, #16]
    f56a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    f56e:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    f570:	699a      	ldr	r2, [r3, #24]
    f572:	f042 0201 	orr.w	r2, r2, #1
    f576:	619a      	str	r2, [r3, #24]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}
    f578:	4770      	bx	lr
    f57a:	bf00      	nop
    f57c:	40001c00 	.word	0x40001c00

0000f580 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    f580:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    f582:	4b04      	ldr	r3, [pc, #16]	; (f594 <USB_DEVICE_INSTANCE_init+0x14>)
    f584:	4798      	blx	r3
	usb_d_init();
    f586:	4b04      	ldr	r3, [pc, #16]	; (f598 <USB_DEVICE_INSTANCE_init+0x18>)
    f588:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
}
    f58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USB_DEVICE_INSTANCE_PORT_init();
    f58e:	4b03      	ldr	r3, [pc, #12]	; (f59c <USB_DEVICE_INSTANCE_init+0x1c>)
    f590:	4718      	bx	r3
    f592:	bf00      	nop
    f594:	0000f55d 	.word	0x0000f55d
    f598:	0000dfc1 	.word	0x0000dfc1
    f59c:	0000f501 	.word	0x0000f501

0000f5a0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    f5a0:	4a02      	ldr	r2, [pc, #8]	; (f5ac <WDT_0_CLOCK_init+0xc>)
    f5a2:	6953      	ldr	r3, [r2, #20]
    f5a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f5a8:	6153      	str	r3, [r2, #20]

void WDT_0_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}
    f5aa:	4770      	bx	lr
    f5ac:	40000800 	.word	0x40000800

0000f5b0 <WDT_0_init>:

void WDT_0_init(void)
{
    f5b0:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
    f5b2:	4b07      	ldr	r3, [pc, #28]	; (f5d0 <WDT_0_init+0x20>)
    f5b4:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
    f5b6:	4b07      	ldr	r3, [pc, #28]	; (f5d4 <WDT_0_init+0x24>)
    f5b8:	4907      	ldr	r1, [pc, #28]	; (f5d8 <WDT_0_init+0x28>)
    f5ba:	2001      	movs	r0, #1
    f5bc:	2248      	movs	r2, #72	; 0x48
    f5be:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    f5c0:	4806      	ldr	r0, [pc, #24]	; (f5dc <WDT_0_init+0x2c>)
    f5c2:	4b07      	ldr	r3, [pc, #28]	; (f5e0 <WDT_0_init+0x30>)
    f5c4:	6003      	str	r3, [r0, #0]
	wdt_init(&WDT_0, WDT);
}
    f5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	return _wdt_init(&wdt->dev);
    f5ca:	4b06      	ldr	r3, [pc, #24]	; (f5e4 <WDT_0_init+0x34>)
    f5cc:	4718      	bx	r3
    f5ce:	bf00      	nop
    f5d0:	0000f5a1 	.word	0x0000f5a1
    f5d4:	0000cb4d 	.word	0x0000cb4d
    f5d8:	00015122 	.word	0x00015122
    f5dc:	20014b90 	.word	0x20014b90
    f5e0:	40002000 	.word	0x40002000
    f5e4:	0000ad6d 	.word	0x0000ad6d

0000f5e8 <system_init>:

void system_init(void)
{
    f5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    f5ec:	4b7c      	ldr	r3, [pc, #496]	; (f7e0 <system_init+0x1f8>)
    f5ee:	4c7d      	ldr	r4, [pc, #500]	; (f7e4 <system_init+0x1fc>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    f5f0:	4d7d      	ldr	r5, [pc, #500]	; (f7e8 <system_init+0x200>)
	// GPIO on PA21

	// Set pin direction to input
	gpio_set_pin_direction(PIN_UI_SPI_CS0, GPIO_DIRECTION_IN);

	gpio_set_pin_pull_mode(PIN_UI_SPI_CS0,
    f5f2:	4e7e      	ldr	r6, [pc, #504]	; (f7ec <system_init+0x204>)
    f5f4:	4798      	blx	r3
    f5f6:	2320      	movs	r3, #32
    f5f8:	6163      	str	r3, [r4, #20]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    f5fa:	2102      	movs	r1, #2
    f5fc:	2005      	movs	r0, #5
    f5fe:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f600:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    f604:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	gpio_set_pin_direction(PIN_UI_SPI_CS0, GPIO_DIRECTION_IN);
    f60c:	2101      	movs	r1, #1
    f60e:	2015      	movs	r0, #21
    f610:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PIN_UI_SPI_CS0,
    f612:	2100      	movs	r1, #0
    f614:	2015      	movs	r0, #21
    f616:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f618:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
    f61c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f620:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
	gpio_set_pin_function(PIN_UI_SPI_CS0, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(PIN_GRID_SYNC_2, GPIO_DIRECTION_IN);
    f624:	2101      	movs	r1, #1
    f626:	2027      	movs	r0, #39	; 0x27
    f628:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PIN_GRID_SYNC_2,
    f62a:	2100      	movs	r1, #0
    f62c:	2027      	movs	r0, #39	; 0x27
    f62e:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f630:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    f634:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f638:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    f640:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(HWCFG_SHIFT, GPIO_DIRECTION_OUT);
    f644:	2102      	movs	r1, #2
    f646:	202d      	movs	r0, #45	; 0x2d
    f648:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f64a:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f64e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
	tmp &= ~PORT_PINCFG_PMUXEN;
    f652:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f656:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(HWCFG_CLOCK, GPIO_DIRECTION_OUT);
    f65a:	2102      	movs	r1, #2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f65c:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
    f660:	202e      	movs	r0, #46	; 0x2e
    f662:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f664:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
    f668:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f66c:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	gpio_set_pin_function(HWCFG_CLOCK, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PB15

	// Set pin direction to input
	gpio_set_pin_direction(HWCFG_DATA, GPIO_DIRECTION_IN);
    f670:	2101      	movs	r1, #1
    f672:	202f      	movs	r0, #47	; 0x2f
    f674:	47a8      	blx	r5

	gpio_set_pin_pull_mode(HWCFG_DATA,
    f676:	2100      	movs	r1, #0
    f678:	202f      	movs	r0, #47	; 0x2f
    f67a:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f67c:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
    f680:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f684:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
	gpio_set_pin_function(HWCFG_DATA, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PC11

	// Set pin direction to input
	gpio_set_pin_direction(MAP_MODE, GPIO_DIRECTION_IN);
    f688:	2101      	movs	r1, #1
    f68a:	204b      	movs	r0, #75	; 0x4b
    f68c:	47a8      	blx	r5

	gpio_set_pin_pull_mode(MAP_MODE,
    f68e:	2101      	movs	r1, #1
    f690:	204b      	movs	r0, #75	; 0x4b
    f692:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f694:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    f698:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f69c:	f884 314b 	strb.w	r3, [r4, #331]	; 0x14b
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(UI_PWR_EN, GPIO_DIRECTION_OUT);
    f6a0:	2102      	movs	r1, #2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f6a2:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    f6a6:	204e      	movs	r0, #78	; 0x4e
    f6a8:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f6aa:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    f6ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f6b2:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
	gpio_set_pin_function(UI_PWR_EN, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PC18

	// Set pin direction to input
	gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_IN);
    f6b6:	2101      	movs	r1, #1
    f6b8:	2052      	movs	r0, #82	; 0x52
    f6ba:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PIN_GRID_SYNC_1,
    f6bc:	2100      	movs	r1, #0
    f6be:	2052      	movs	r0, #82	; 0x52
    f6c0:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f6c2:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    f6c6:	4e4a      	ldr	r6, [pc, #296]	; (f7f0 <system_init+0x208>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    f6c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f6cc:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f6d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    f6d4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_A, GPIO_DIRECTION_OUT);
    f6d8:	2102      	movs	r1, #2
    f6da:	2053      	movs	r0, #83	; 0x53
    f6dc:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f6de:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    f6e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f6e6:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f6ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    f6ee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_B, GPIO_DIRECTION_OUT);
    f6f2:	2102      	movs	r1, #2
    f6f4:	2054      	movs	r0, #84	; 0x54
    f6f6:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f6f8:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    f6fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f700:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f704:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);
    f708:	2102      	movs	r1, #2
    f70a:	2055      	movs	r0, #85	; 0x55
    f70c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f710:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f712:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    f716:	4d37      	ldr	r5, [pc, #220]	; (f7f4 <system_init+0x20c>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    f718:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f71c:	f884 3155 	strb.w	r3, [r4, #341]	; 0x155

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
    f720:	4b35      	ldr	r3, [pc, #212]	; (f7f8 <system_init+0x210>)
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
    f722:	4c36      	ldr	r4, [pc, #216]	; (f7fc <system_init+0x214>)
    f724:	4798      	blx	r3
	ADC_1_init();
    f726:	4b36      	ldr	r3, [pc, #216]	; (f800 <system_init+0x218>)
    f728:	4798      	blx	r3

	CRC_0_init();
    f72a:	4b36      	ldr	r3, [pc, #216]	; (f804 <system_init+0x21c>)
    f72c:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    f72e:	4b36      	ldr	r3, [pc, #216]	; (f808 <system_init+0x220>)
    f730:	4798      	blx	r3

	FLASH_0_init();
    f732:	4b36      	ldr	r3, [pc, #216]	; (f80c <system_init+0x224>)
    f734:	4798      	blx	r3

	QSPI_INSTANCE_init();
    f736:	4b36      	ldr	r3, [pc, #216]	; (f810 <system_init+0x228>)
    f738:	4798      	blx	r3
    f73a:	6963      	ldr	r3, [r4, #20]
    f73c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f740:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
    f742:	4b34      	ldr	r3, [pc, #208]	; (f814 <system_init+0x22c>)
    f744:	4798      	blx	r3
    f746:	4934      	ldr	r1, [pc, #208]	; (f818 <system_init+0x230>)
    f748:	4602      	mov	r2, r0
    f74a:	4834      	ldr	r0, [pc, #208]	; (f81c <system_init+0x234>)
    f74c:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
    f74e:	4b34      	ldr	r3, [pc, #208]	; (f820 <system_init+0x238>)
    f750:	4798      	blx	r3
	USART_NORTH_init();
    f752:	4b34      	ldr	r3, [pc, #208]	; (f824 <system_init+0x23c>)
    f754:	4798      	blx	r3

	GRID_AUX_init();
    f756:	4b34      	ldr	r3, [pc, #208]	; (f828 <system_init+0x240>)
    f758:	4798      	blx	r3

	UI_SPI_init();
    f75a:	4b34      	ldr	r3, [pc, #208]	; (f82c <system_init+0x244>)
    f75c:	4798      	blx	r3
	USART_WEST_init();
    f75e:	4b34      	ldr	r3, [pc, #208]	; (f830 <system_init+0x248>)
    f760:	4798      	blx	r3

	SYS_I2C_init();
    f762:	4b34      	ldr	r3, [pc, #208]	; (f834 <system_init+0x24c>)
    f764:	4798      	blx	r3
	USART_SOUTH_init();
    f766:	4b34      	ldr	r3, [pc, #208]	; (f838 <system_init+0x250>)
    f768:	4798      	blx	r3

	GRID_LED_init();
    f76a:	4b34      	ldr	r3, [pc, #208]	; (f83c <system_init+0x254>)
    f76c:	4798      	blx	r3

	delay_driver_init();
    f76e:	4b34      	ldr	r3, [pc, #208]	; (f840 <system_init+0x258>)
    f770:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    f772:	6963      	ldr	r3, [r4, #20]
    f774:	433b      	orrs	r3, r7
    f776:	4f33      	ldr	r7, [pc, #204]	; (f844 <system_init+0x25c>)
    f778:	6163      	str	r3, [r4, #20]
    f77a:	f04f 0840 	mov.w	r8, #64	; 0x40
    f77e:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    f782:	47b0      	blx	r6
    f784:	4930      	ldr	r1, [pc, #192]	; (f848 <system_init+0x260>)
    f786:	4602      	mov	r2, r0
    f788:	4830      	ldr	r0, [pc, #192]	; (f84c <system_init+0x264>)
    f78a:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    f78c:	6963      	ldr	r3, [r4, #20]
    f78e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    f792:	6163      	str	r3, [r4, #20]
    f794:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
    f798:	47b0      	blx	r6
    f79a:	492d      	ldr	r1, [pc, #180]	; (f850 <system_init+0x268>)
    f79c:	4602      	mov	r2, r0
    f79e:	482d      	ldr	r0, [pc, #180]	; (f854 <system_init+0x26c>)
    f7a0:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    f7a2:	69a3      	ldr	r3, [r4, #24]
    f7a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f7a8:	61a3      	str	r3, [r4, #24]
    f7aa:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
    f7ae:	47b0      	blx	r6
    f7b0:	4929      	ldr	r1, [pc, #164]	; (f858 <system_init+0x270>)
    f7b2:	4602      	mov	r2, r0
    f7b4:	4829      	ldr	r0, [pc, #164]	; (f85c <system_init+0x274>)
    f7b6:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    f7b8:	69a3      	ldr	r3, [r4, #24]
    f7ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f7be:	61a3      	str	r3, [r4, #24]
    f7c0:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
    f7c4:	47b0      	blx	r6
    f7c6:	4926      	ldr	r1, [pc, #152]	; (f860 <system_init+0x278>)
    f7c8:	4602      	mov	r2, r0
    f7ca:	4826      	ldr	r0, [pc, #152]	; (f864 <system_init+0x27c>)
    f7cc:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	RAND_0_init();
    f7ce:	4b26      	ldr	r3, [pc, #152]	; (f868 <system_init+0x280>)
    f7d0:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
    f7d2:	4b26      	ldr	r3, [pc, #152]	; (f86c <system_init+0x284>)
    f7d4:	4798      	blx	r3

	WDT_0_init();
}
    f7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	WDT_0_init();
    f7da:	4b25      	ldr	r3, [pc, #148]	; (f870 <system_init+0x288>)
    f7dc:	4718      	bx	r3
    f7de:	bf00      	nop
    f7e0:	0000c8c1 	.word	0x0000c8c1
    f7e4:	41008000 	.word	0x41008000
    f7e8:	0000ed2d 	.word	0x0000ed2d
    f7ec:	0000ed7d 	.word	0x0000ed7d
    f7f0:	00011b05 	.word	0x00011b05
    f7f4:	0000b855 	.word	0x0000b855
    f7f8:	0000edbd 	.word	0x0000edbd
    f7fc:	40000800 	.word	0x40000800
    f800:	0000ee3d 	.word	0x0000ee3d
    f804:	0000eec1 	.word	0x0000eec1
    f808:	0000eee5 	.word	0x0000eee5
    f80c:	0000ef25 	.word	0x0000ef25
    f810:	0000f029 	.word	0x0000f029
    f814:	0000ec95 	.word	0x0000ec95
    f818:	40002400 	.word	0x40002400
    f81c:	20014a48 	.word	0x20014a48
    f820:	0000f09d 	.word	0x0000f09d
    f824:	0000f11d 	.word	0x0000f11d
    f828:	0000f19d 	.word	0x0000f19d
    f82c:	0000f255 	.word	0x0000f255
    f830:	0000f2c9 	.word	0x0000f2c9
    f834:	0000f359 	.word	0x0000f359
    f838:	0000f3cd 	.word	0x0000f3cd
    f83c:	0000f491 	.word	0x0000f491
    f840:	0000f4bd 	.word	0x0000f4bd
    f844:	40001c00 	.word	0x40001c00
    f848:	40003800 	.word	0x40003800
    f84c:	20014d34 	.word	0x20014d34
    f850:	40003c00 	.word	0x40003c00
    f854:	20014c28 	.word	0x20014c28
    f858:	4101a000 	.word	0x4101a000
    f85c:	20014a68 	.word	0x20014a68
    f860:	4101c000 	.word	0x4101c000
    f864:	20014d14 	.word	0x20014d14
    f868:	0000f4dd 	.word	0x0000f4dd
    f86c:	0000f581 	.word	0x0000f581
    f870:	0000f5b1 	.word	0x0000f5b1

0000f874 <usart_transmission_complete>:
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    f874:	2300      	movs	r3, #0
    f876:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
    f878:	69c3      	ldr	r3, [r0, #28]
    f87a:	b10b      	cbz	r3, f880 <usart_transmission_complete+0xc>
		descr->usart_cb.tx_done(descr);
    f87c:	3808      	subs	r0, #8
    f87e:	4718      	bx	r3
	}
}
    f880:	4770      	bx	lr

0000f882 <usart_error>:
 */
static void usart_error(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    f882:	2300      	movs	r3, #0
    f884:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
    f886:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f888:	b10b      	cbz	r3, f88e <usart_error+0xc>
		descr->usart_cb.error(descr);
    f88a:	3808      	subs	r0, #8
    f88c:	4718      	bx	r3
	}
}
    f88e:	4770      	bx	lr

0000f890 <usart_fill_rx_buffer>:
{
    f890:	b570      	push	{r4, r5, r6, lr}
    f892:	4604      	mov	r4, r0
	ringbuffer_put(&descr->rx, data);
    f894:	4b05      	ldr	r3, [pc, #20]	; (f8ac <usart_fill_rx_buffer+0x1c>)
    f896:	f1a0 0508 	sub.w	r5, r0, #8
    f89a:	302c      	adds	r0, #44	; 0x2c
    f89c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    f89e:	6a23      	ldr	r3, [r4, #32]
    f8a0:	b11b      	cbz	r3, f8aa <usart_fill_rx_buffer+0x1a>
		descr->usart_cb.rx_done(descr);
    f8a2:	4628      	mov	r0, r5
}
    f8a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		descr->usart_cb.rx_done(descr);
    f8a8:	4718      	bx	r3
}
    f8aa:	bd70      	pop	{r4, r5, r6, pc}
    f8ac:	00010d25 	.word	0x00010d25

0000f8b0 <usart_async_write>:
{
    f8b0:	b570      	push	{r4, r5, r6, lr}
    f8b2:	460e      	mov	r6, r1
    f8b4:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
    f8b6:	4604      	mov	r4, r0
    f8b8:	b118      	cbz	r0, f8c2 <usart_async_write+0x12>
    f8ba:	b1d9      	cbz	r1, f8f4 <usart_async_write+0x44>
    f8bc:	1e10      	subs	r0, r2, #0
    f8be:	bf18      	it	ne
    f8c0:	2001      	movne	r0, #1
    f8c2:	4b0f      	ldr	r3, [pc, #60]	; (f900 <usart_async_write+0x50>)
    f8c4:	490f      	ldr	r1, [pc, #60]	; (f904 <usart_async_write+0x54>)
    f8c6:	f240 123b 	movw	r2, #315	; 0x13b
    f8ca:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    f8cc:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
    f8d0:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
    f8d4:	429a      	cmp	r2, r3
    f8d6:	d10f      	bne.n	f8f8 <usart_async_write+0x48>
	descr->tx_por           = 0;
    f8d8:	2300      	movs	r3, #0
    f8da:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    f8de:	2301      	movs	r3, #1
    f8e0:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    f8e2:	f104 0008 	add.w	r0, r4, #8
    f8e6:	4b08      	ldr	r3, [pc, #32]	; (f908 <usart_async_write+0x58>)
	descr->tx_buffer        = (uint8_t *)buf;
    f8e8:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
    f8ea:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	_usart_async_enable_byte_sent_irq(&descr->device);
    f8ee:	4798      	blx	r3
	return (int32_t)length;
    f8f0:	4628      	mov	r0, r5
}
    f8f2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
    f8f4:	4608      	mov	r0, r1
    f8f6:	e7e4      	b.n	f8c2 <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
    f8f8:	f06f 001b 	mvn.w	r0, #27
    f8fc:	e7f9      	b.n	f8f2 <usart_async_write+0x42>
    f8fe:	bf00      	nop
    f900:	0000cb4d 	.word	0x0000cb4d
    f904:	0001513b 	.word	0x0001513b
    f908:	0001030b 	.word	0x0001030b

0000f90c <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
    f90c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    f90e:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
    f912:	429a      	cmp	r2, r3
{
    f914:	b510      	push	{r4, lr}
    f916:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    f918:	d00a      	beq.n	f930 <usart_process_byte_sent+0x24>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    f91a:	6c02      	ldr	r2, [r0, #64]	; 0x40
    f91c:	1c59      	adds	r1, r3, #1
    f91e:	8781      	strh	r1, [r0, #60]	; 0x3c
    f920:	5cd1      	ldrb	r1, [r2, r3]
    f922:	4b04      	ldr	r3, [pc, #16]	; (f934 <usart_process_byte_sent+0x28>)
    f924:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    f926:	4b04      	ldr	r3, [pc, #16]	; (f938 <usart_process_byte_sent+0x2c>)
    f928:	4620      	mov	r0, r4
}
    f92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_usart_async_enable_tx_done_irq(&descr->device);
    f92e:	4718      	bx	r3
    f930:	4b02      	ldr	r3, [pc, #8]	; (f93c <usart_process_byte_sent+0x30>)
    f932:	e7fa      	b.n	f92a <usart_process_byte_sent+0x1e>
    f934:	000102df 	.word	0x000102df
    f938:	0001030b 	.word	0x0001030b
    f93c:	00010313 	.word	0x00010313

0000f940 <usart_async_read>:
{
    f940:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    f944:	460e      	mov	r6, r1
    f946:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
    f948:	4604      	mov	r4, r0
    f94a:	b118      	cbz	r0, f954 <usart_async_read+0x14>
    f94c:	b1e9      	cbz	r1, f98a <usart_async_read+0x4a>
    f94e:	1e10      	subs	r0, r2, #0
    f950:	bf18      	it	ne
    f952:	2001      	movne	r0, #1
    f954:	4910      	ldr	r1, [pc, #64]	; (f998 <usart_async_read+0x58>)
    f956:	4b11      	ldr	r3, [pc, #68]	; (f99c <usart_async_read+0x5c>)
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    f958:	f8df 9050 	ldr.w	r9, [pc, #80]	; f9ac <usart_async_read+0x6c>
	ASSERT(descr && buf && length);
    f95c:	f44f 72ac 	mov.w	r2, #344	; 0x158
    f960:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    f962:	3434      	adds	r4, #52	; 0x34
	CRITICAL_SECTION_ENTER()
    f964:	4b0e      	ldr	r3, [pc, #56]	; (f9a0 <usart_async_read+0x60>)
    f966:	a801      	add	r0, sp, #4
    f968:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    f96a:	4b0e      	ldr	r3, [pc, #56]	; (f9a4 <usart_async_read+0x64>)
    f96c:	4620      	mov	r0, r4
    f96e:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    f970:	4b0d      	ldr	r3, [pc, #52]	; (f9a8 <usart_async_read+0x68>)
	num = ringbuffer_num(&descr->rx);
    f972:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    f974:	a801      	add	r0, sp, #4
    f976:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    f978:	2500      	movs	r5, #0
    f97a:	45a8      	cmp	r8, r5
    f97c:	d001      	beq.n	f982 <usart_async_read+0x42>
    f97e:	42bd      	cmp	r5, r7
    f980:	d105      	bne.n	f98e <usart_async_read+0x4e>
}
    f982:	4628      	mov	r0, r5
    f984:	b003      	add	sp, #12
    f986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && buf && length);
    f98a:	4608      	mov	r0, r1
    f98c:	e7e2      	b.n	f954 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    f98e:	1971      	adds	r1, r6, r5
    f990:	4620      	mov	r0, r4
    f992:	47c8      	blx	r9
    f994:	3501      	adds	r5, #1
    f996:	e7f0      	b.n	f97a <usart_async_read+0x3a>
    f998:	0001513b 	.word	0x0001513b
    f99c:	0000cb4d 	.word	0x0000cb4d
    f9a0:	00010d8d 	.word	0x00010d8d
    f9a4:	00010d69 	.word	0x00010d69
    f9a8:	00010d9b 	.word	0x00010d9b
    f9ac:	00010ce5 	.word	0x00010ce5

0000f9b0 <usart_async_init>:
{
    f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9b2:	460d      	mov	r5, r1
    f9b4:	4616      	mov	r6, r2
    f9b6:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    f9b8:	4604      	mov	r4, r0
    f9ba:	b120      	cbz	r0, f9c6 <usart_async_init+0x16>
    f9bc:	b309      	cbz	r1, fa02 <usart_async_init+0x52>
    f9be:	b312      	cbz	r2, fa06 <usart_async_init+0x56>
    f9c0:	1e18      	subs	r0, r3, #0
    f9c2:	bf18      	it	ne
    f9c4:	2001      	movne	r0, #1
    f9c6:	4912      	ldr	r1, [pc, #72]	; (fa10 <usart_async_init+0x60>)
    f9c8:	4b12      	ldr	r3, [pc, #72]	; (fa14 <usart_async_init+0x64>)
    f9ca:	223a      	movs	r2, #58	; 0x3a
    f9cc:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    f9ce:	4b12      	ldr	r3, [pc, #72]	; (fa18 <usart_async_init+0x68>)
    f9d0:	463a      	mov	r2, r7
    f9d2:	4631      	mov	r1, r6
    f9d4:	f104 0034 	add.w	r0, r4, #52	; 0x34
    f9d8:	4798      	blx	r3
    f9da:	b9b0      	cbnz	r0, fa0a <usart_async_init+0x5a>
	init_status = _usart_async_init(&descr->device, hw);
    f9dc:	4b0f      	ldr	r3, [pc, #60]	; (fa1c <usart_async_init+0x6c>)
    f9de:	4629      	mov	r1, r5
    f9e0:	f104 0008 	add.w	r0, r4, #8
    f9e4:	4798      	blx	r3
	if (init_status) {
    f9e6:	b958      	cbnz	r0, fa00 <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
    f9e8:	4b0d      	ldr	r3, [pc, #52]	; (fa20 <usart_async_init+0x70>)
    f9ea:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    f9ec:	4b0d      	ldr	r3, [pc, #52]	; (fa24 <usart_async_init+0x74>)
    f9ee:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    f9f0:	4b0d      	ldr	r3, [pc, #52]	; (fa28 <usart_async_init+0x78>)
    f9f2:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    f9f4:	4b0d      	ldr	r3, [pc, #52]	; (fa2c <usart_async_init+0x7c>)
    f9f6:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    f9f8:	4b0d      	ldr	r3, [pc, #52]	; (fa30 <usart_async_init+0x80>)
    f9fa:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    f9fc:	4b0d      	ldr	r3, [pc, #52]	; (fa34 <usart_async_init+0x84>)
    f9fe:	6163      	str	r3, [r4, #20]
}
    fa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    fa02:	4608      	mov	r0, r1
    fa04:	e7df      	b.n	f9c6 <usart_async_init+0x16>
    fa06:	4610      	mov	r0, r2
    fa08:	e7dd      	b.n	f9c6 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
    fa0a:	f06f 000c 	mvn.w	r0, #12
    fa0e:	e7f7      	b.n	fa00 <usart_async_init+0x50>
    fa10:	0001513b 	.word	0x0001513b
    fa14:	0000cb4d 	.word	0x0000cb4d
    fa18:	00010ca9 	.word	0x00010ca9
    fa1c:	00010221 	.word	0x00010221
    fa20:	0000f941 	.word	0x0000f941
    fa24:	0000f8b1 	.word	0x0000f8b1
    fa28:	0000f90d 	.word	0x0000f90d
    fa2c:	0000f891 	.word	0x0000f891
    fa30:	0000f875 	.word	0x0000f875
    fa34:	0000f883 	.word	0x0000f883

0000fa38 <usart_async_enable>:
{
    fa38:	b510      	push	{r4, lr}
	ASSERT(descr);
    fa3a:	4604      	mov	r4, r0
    fa3c:	3800      	subs	r0, #0
    fa3e:	bf18      	it	ne
    fa40:	2001      	movne	r0, #1
    fa42:	4905      	ldr	r1, [pc, #20]	; (fa58 <usart_async_enable+0x20>)
    fa44:	4b05      	ldr	r3, [pc, #20]	; (fa5c <usart_async_enable+0x24>)
    fa46:	2261      	movs	r2, #97	; 0x61
    fa48:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    fa4a:	f104 0008 	add.w	r0, r4, #8
    fa4e:	4b04      	ldr	r3, [pc, #16]	; (fa60 <usart_async_enable+0x28>)
    fa50:	4798      	blx	r3
}
    fa52:	2000      	movs	r0, #0
    fa54:	bd10      	pop	{r4, pc}
    fa56:	bf00      	nop
    fa58:	0001513b 	.word	0x0001513b
    fa5c:	0000cb4d 	.word	0x0000cb4d
    fa60:	000102ad 	.word	0x000102ad

0000fa64 <usart_async_disable>:
{
    fa64:	b510      	push	{r4, lr}
	ASSERT(descr);
    fa66:	4604      	mov	r4, r0
    fa68:	3800      	subs	r0, #0
    fa6a:	bf18      	it	ne
    fa6c:	2001      	movne	r0, #1
    fa6e:	4905      	ldr	r1, [pc, #20]	; (fa84 <usart_async_disable+0x20>)
    fa70:	4b05      	ldr	r3, [pc, #20]	; (fa88 <usart_async_disable+0x24>)
    fa72:	226c      	movs	r2, #108	; 0x6c
    fa74:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    fa76:	f104 0008 	add.w	r0, r4, #8
    fa7a:	4b04      	ldr	r3, [pc, #16]	; (fa8c <usart_async_disable+0x28>)
    fa7c:	4798      	blx	r3
}
    fa7e:	2000      	movs	r0, #0
    fa80:	bd10      	pop	{r4, pc}
    fa82:	bf00      	nop
    fa84:	0001513b 	.word	0x0001513b
    fa88:	0000cb4d 	.word	0x0000cb4d
    fa8c:	000102c1 	.word	0x000102c1

0000fa90 <usart_async_get_io_descriptor>:
{
    fa90:	b538      	push	{r3, r4, r5, lr}
    fa92:	460d      	mov	r5, r1
	ASSERT(descr && io);
    fa94:	4604      	mov	r4, r0
    fa96:	b110      	cbz	r0, fa9e <usart_async_get_io_descriptor+0xe>
    fa98:	1e08      	subs	r0, r1, #0
    fa9a:	bf18      	it	ne
    fa9c:	2001      	movne	r0, #1
    fa9e:	4903      	ldr	r1, [pc, #12]	; (faac <usart_async_get_io_descriptor+0x1c>)
    faa0:	4b03      	ldr	r3, [pc, #12]	; (fab0 <usart_async_get_io_descriptor+0x20>)
    faa2:	2277      	movs	r2, #119	; 0x77
    faa4:	4798      	blx	r3
	*io = &descr->io;
    faa6:	602c      	str	r4, [r5, #0]
}
    faa8:	2000      	movs	r0, #0
    faaa:	bd38      	pop	{r3, r4, r5, pc}
    faac:	0001513b 	.word	0x0001513b
    fab0:	0000cb4d 	.word	0x0000cb4d

0000fab4 <usart_async_register_callback>:
{
    fab4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    fab6:	4605      	mov	r5, r0
    fab8:	3800      	subs	r0, #0
{
    faba:	460c      	mov	r4, r1
	ASSERT(descr);
    fabc:	bf18      	it	ne
    fabe:	2001      	movne	r0, #1
    fac0:	4911      	ldr	r1, [pc, #68]	; (fb08 <usart_async_register_callback+0x54>)
    fac2:	4b12      	ldr	r3, [pc, #72]	; (fb0c <usart_async_register_callback+0x58>)
{
    fac4:	4616      	mov	r6, r2
	ASSERT(descr);
    fac6:	2283      	movs	r2, #131	; 0x83
    fac8:	4798      	blx	r3
	switch (type) {
    faca:	2c01      	cmp	r4, #1
    facc:	d00d      	beq.n	faea <usart_async_register_callback+0x36>
    face:	2c02      	cmp	r4, #2
    fad0:	d011      	beq.n	faf6 <usart_async_register_callback+0x42>
    fad2:	b9b4      	cbnz	r4, fb02 <usart_async_register_callback+0x4e>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    fad4:	1e32      	subs	r2, r6, #0
		descr->usart_cb.rx_done = cb;
    fad6:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    fad8:	bf18      	it	ne
    fada:	2201      	movne	r2, #1
    fadc:	2101      	movs	r1, #1
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    fade:	f105 0008 	add.w	r0, r5, #8
    fae2:	4b0b      	ldr	r3, [pc, #44]	; (fb10 <usart_async_register_callback+0x5c>)
    fae4:	4798      	blx	r3
	return ERR_NONE;
    fae6:	2000      	movs	r0, #0
}
    fae8:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    faea:	1e32      	subs	r2, r6, #0
		descr->usart_cb.tx_done = cb;
    faec:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    faee:	bf18      	it	ne
    faf0:	2201      	movne	r2, #1
    faf2:	2102      	movs	r1, #2
    faf4:	e7f3      	b.n	fade <usart_async_register_callback+0x2a>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    faf6:	1e32      	subs	r2, r6, #0
		descr->usart_cb.error = cb;
    faf8:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    fafa:	bf18      	it	ne
    fafc:	2201      	movne	r2, #1
    fafe:	2103      	movs	r1, #3
    fb00:	e7ed      	b.n	fade <usart_async_register_callback+0x2a>
	switch (type) {
    fb02:	f06f 000c 	mvn.w	r0, #12
    fb06:	e7ef      	b.n	fae8 <usart_async_register_callback+0x34>
    fb08:	0001513b 	.word	0x0001513b
    fb0c:	0000cb4d 	.word	0x0000cb4d
    fb10:	0001031d 	.word	0x0001031d

0000fb14 <usart_async_set_parity>:
{
    fb14:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
    fb16:	4604      	mov	r4, r0
    fb18:	3800      	subs	r0, #0
    fb1a:	bf18      	it	ne
    fb1c:	2001      	movne	r0, #1
{
    fb1e:	460d      	mov	r5, r1
	ASSERT(descr);
    fb20:	22cb      	movs	r2, #203	; 0xcb
    fb22:	4905      	ldr	r1, [pc, #20]	; (fb38 <usart_async_set_parity+0x24>)
    fb24:	4b05      	ldr	r3, [pc, #20]	; (fb3c <usart_async_set_parity+0x28>)
    fb26:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    fb28:	f104 0008 	add.w	r0, r4, #8
    fb2c:	4b04      	ldr	r3, [pc, #16]	; (fb40 <usart_async_set_parity+0x2c>)
    fb2e:	4629      	mov	r1, r5
    fb30:	4798      	blx	r3
}
    fb32:	2000      	movs	r0, #0
    fb34:	bd38      	pop	{r3, r4, r5, pc}
    fb36:	bf00      	nop
    fb38:	0001513b 	.word	0x0001513b
    fb3c:	0000cb4d 	.word	0x0000cb4d
    fb40:	000102cd 	.word	0x000102cd

0000fb44 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    fb44:	69c3      	ldr	r3, [r0, #28]
    fb46:	420b      	tst	r3, r1
    fb48:	d1fc      	bne.n	fb44 <hri_sercomi2cm_wait_for_sync>
	};
}
    fb4a:	4770      	bx	lr

0000fb4c <hri_sercomspi_wait_for_sync>:
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    fb4c:	69c3      	ldr	r3, [r0, #28]
    fb4e:	420b      	tst	r3, r1
    fb50:	d1fc      	bne.n	fb4c <hri_sercomspi_wait_for_sync>
	};
}
    fb52:	4770      	bx	lr

0000fb54 <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    fb54:	69c3      	ldr	r3, [r0, #28]
    fb56:	420b      	tst	r3, r1
    fb58:	d1fc      	bne.n	fb54 <hri_sercomusart_wait_for_sync>
	};
}
    fb5a:	4770      	bx	lr

0000fb5c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    fb5c:	6802      	ldr	r2, [r0, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    fb5e:	4b03      	ldr	r3, [pc, #12]	; (fb6c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    fb60:	f022 0202 	bic.w	r2, r2, #2
    fb64:	6002      	str	r2, [r0, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    fb66:	2103      	movs	r1, #3
    fb68:	4718      	bx	r3
    fb6a:	bf00      	nop
    fb6c:	0000fb45 	.word	0x0000fb45

0000fb70 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    fb70:	6802      	ldr	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    fb72:	4b03      	ldr	r3, [pc, #12]	; (fb80 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    fb74:	f022 0202 	bic.w	r2, r2, #2
    fb78:	6002      	str	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    fb7a:	2103      	movs	r1, #3
    fb7c:	4718      	bx	r3
    fb7e:	bf00      	nop
    fb80:	0000fb4d 	.word	0x0000fb4d

0000fb84 <hri_sercomusart_get_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
    fb84:	b508      	push	{r3, lr}
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    fb86:	2103      	movs	r1, #3
    fb88:	4b02      	ldr	r3, [pc, #8]	; (fb94 <hri_sercomusart_get_CTRLA_ENABLE_bit+0x10>)
    fb8a:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    fb8c:	6800      	ldr	r0, [r0, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}
    fb8e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    fb92:	bd08      	pop	{r3, pc}
    fb94:	0000fb55 	.word	0x0000fb55

0000fb98 <hri_sercomusart_write_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    fb98:	6803      	ldr	r3, [r0, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    fb9a:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    fb9e:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    fba2:	6001      	str	r1, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    fba4:	4b01      	ldr	r3, [pc, #4]	; (fbac <hri_sercomusart_write_CTRLA_ENABLE_bit+0x14>)
    fba6:	2103      	movs	r1, #3
    fba8:	4718      	bx	r3
    fbaa:	bf00      	nop
    fbac:	0000fb55 	.word	0x0000fb55

0000fbb0 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    fbb0:	6802      	ldr	r2, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    fbb2:	4b03      	ldr	r3, [pc, #12]	; (fbc0 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    fbb4:	f022 0202 	bic.w	r2, r2, #2
    fbb8:	6002      	str	r2, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    fbba:	2103      	movs	r1, #3
    fbbc:	4718      	bx	r3
    fbbe:	bf00      	nop
    fbc0:	0000fb55 	.word	0x0000fb55

0000fbc4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    fbc4:	b570      	push	{r4, r5, r6, lr}
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    fbc6:	4d0c      	ldr	r5, [pc, #48]	; (fbf8 <_sercom_get_hardware_index+0x34>)
{
    fbc8:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    fbca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    fbcc:	b088      	sub	sp, #32
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    fbce:	466c      	mov	r4, sp
    fbd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fbd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    fbd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    fbda:	466a      	mov	r2, sp
    fbdc:	2300      	movs	r3, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    fbde:	f852 1b04 	ldr.w	r1, [r2], #4
    fbe2:	42b1      	cmp	r1, r6
    fbe4:	d102      	bne.n	fbec <_sercom_get_hardware_index+0x28>
			return i;
    fbe6:	b2d8      	uxtb	r0, r3
		}
	}
	return 0;
}
    fbe8:	b008      	add	sp, #32
    fbea:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    fbec:	3301      	adds	r3, #1
    fbee:	2b08      	cmp	r3, #8
    fbf0:	d1f5      	bne.n	fbde <_sercom_get_hardware_index+0x1a>
	return 0;
    fbf2:	2000      	movs	r0, #0
    fbf4:	e7f8      	b.n	fbe8 <_sercom_get_hardware_index+0x24>
    fbf6:	bf00      	nop
    fbf8:	00015174 	.word	0x00015174

0000fbfc <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    fbfc:	b510      	push	{r4, lr}
	void *hw = device->hw;
    fbfe:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    fc00:	7e22      	ldrb	r2, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    fc02:	07d1      	lsls	r1, r2, #31
{
    fc04:	4603      	mov	r3, r0
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    fc06:	d508      	bpl.n	fc1a <_sercom_usart_interrupt_handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    fc08:	7da2      	ldrb	r2, [r4, #22]
    fc0a:	07d2      	lsls	r2, r2, #31
    fc0c:	d505      	bpl.n	fc1a <_sercom_usart_interrupt_handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    fc0e:	2201      	movs	r2, #1
    fc10:	7522      	strb	r2, [r4, #20]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
    fc12:	6803      	ldr	r3, [r0, #0]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
    fc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_byte_sent(device);
    fc18:	4718      	bx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    fc1a:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    fc1c:	0790      	lsls	r0, r2, #30
    fc1e:	d509      	bpl.n	fc34 <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    fc20:	7da2      	ldrb	r2, [r4, #22]
    fc22:	0791      	lsls	r1, r2, #30
    fc24:	d506      	bpl.n	fc34 <_sercom_usart_interrupt_handler+0x38>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    fc26:	2202      	movs	r2, #2
    fc28:	7522      	strb	r2, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    fc2a:	4618      	mov	r0, r3
}
    fc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_done_cb(device);
    fc30:	689a      	ldr	r2, [r3, #8]
    fc32:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    fc34:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    fc36:	0752      	lsls	r2, r2, #29
    fc38:	d50d      	bpl.n	fc56 <_sercom_usart_interrupt_handler+0x5a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    fc3a:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    fc3c:	f002 0237 	and.w	r2, r2, #55	; 0x37
    fc40:	b112      	cbz	r2, fc48 <_sercom_usart_interrupt_handler+0x4c>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    fc42:	23ff      	movs	r3, #255	; 0xff
    fc44:	8363      	strh	r3, [r4, #26]
}
    fc46:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
    fc48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    fc4a:	685a      	ldr	r2, [r3, #4]
}
    fc4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    fc50:	b2c9      	uxtb	r1, r1
    fc52:	4618      	mov	r0, r3
    fc54:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    fc56:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    fc58:	09d2      	lsrs	r2, r2, #7
    fc5a:	d0f4      	beq.n	fc46 <_sercom_usart_interrupt_handler+0x4a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    fc5c:	2280      	movs	r2, #128	; 0x80
    fc5e:	7622      	strb	r2, [r4, #24]
		device->usart_cb.error_cb(device);
    fc60:	4618      	mov	r0, r3
    fc62:	68da      	ldr	r2, [r3, #12]
    fc64:	4790      	blx	r2
	return ((Sercom *)hw)->USART.STATUS.reg;
    fc66:	8b63      	ldrh	r3, [r4, #26]
    fc68:	b29b      	uxth	r3, r3
    fc6a:	e7eb      	b.n	fc44 <_sercom_usart_interrupt_handler+0x48>

0000fc6c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
    fc6c:	4b11      	ldr	r3, [pc, #68]	; (fcb4 <_sercom_init_irq_param+0x48>)
    fc6e:	4298      	cmp	r0, r3
    fc70:	d105      	bne.n	fc7e <_sercom_init_irq_param+0x12>
		_sercom0_dev = (struct _usart_async_device *)dev;
    fc72:	4b11      	ldr	r3, [pc, #68]	; (fcb8 <_sercom_init_irq_param+0x4c>)
    fc74:	6019      	str	r1, [r3, #0]

	if (hw == SERCOM5) {
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
    fc76:	4b11      	ldr	r3, [pc, #68]	; (fcbc <_sercom_init_irq_param+0x50>)
    fc78:	4298      	cmp	r0, r3
    fc7a:	d018      	beq.n	fcae <_sercom_init_irq_param+0x42>
    fc7c:	4770      	bx	lr
	if (hw == SERCOM1) {
    fc7e:	4b10      	ldr	r3, [pc, #64]	; (fcc0 <_sercom_init_irq_param+0x54>)
    fc80:	4298      	cmp	r0, r3
    fc82:	d00b      	beq.n	fc9c <_sercom_init_irq_param+0x30>
	if (hw == SERCOM3) {
    fc84:	4b0f      	ldr	r3, [pc, #60]	; (fcc4 <_sercom_init_irq_param+0x58>)
    fc86:	4298      	cmp	r0, r3
    fc88:	d00b      	beq.n	fca2 <_sercom_init_irq_param+0x36>
	if (hw == SERCOM4) {
    fc8a:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
    fc8e:	d00b      	beq.n	fca8 <_sercom_init_irq_param+0x3c>
	if (hw == SERCOM5) {
    fc90:	4b0d      	ldr	r3, [pc, #52]	; (fcc8 <_sercom_init_irq_param+0x5c>)
    fc92:	4298      	cmp	r0, r3
    fc94:	d1ef      	bne.n	fc76 <_sercom_init_irq_param+0xa>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
    fc96:	4b08      	ldr	r3, [pc, #32]	; (fcb8 <_sercom_init_irq_param+0x4c>)
    fc98:	6119      	str	r1, [r3, #16]
	if (hw == SERCOM6) {
    fc9a:	4770      	bx	lr
		_sercom1_dev = (struct _usart_async_device *)dev;
    fc9c:	4b06      	ldr	r3, [pc, #24]	; (fcb8 <_sercom_init_irq_param+0x4c>)
    fc9e:	6059      	str	r1, [r3, #4]
	if (hw == SERCOM5) {
    fca0:	e7e9      	b.n	fc76 <_sercom_init_irq_param+0xa>
		_sercom3_dev = (struct _spi_async_dev *)dev;
    fca2:	4b05      	ldr	r3, [pc, #20]	; (fcb8 <_sercom_init_irq_param+0x4c>)
    fca4:	6099      	str	r1, [r3, #8]
	if (hw == SERCOM6) {
    fca6:	4770      	bx	lr
		_sercom4_dev = (struct _usart_async_device *)dev;
    fca8:	4b03      	ldr	r3, [pc, #12]	; (fcb8 <_sercom_init_irq_param+0x4c>)
    fcaa:	60d9      	str	r1, [r3, #12]
	if (hw == SERCOM6) {
    fcac:	4770      	bx	lr
		_sercom6_dev = (struct _usart_async_device *)dev;
    fcae:	4b02      	ldr	r3, [pc, #8]	; (fcb8 <_sercom_init_irq_param+0x4c>)
    fcb0:	6159      	str	r1, [r3, #20]
	}
}
    fcb2:	4770      	bx	lr
    fcb4:	40003000 	.word	0x40003000
    fcb8:	20001074 	.word	0x20001074
    fcbc:	43000800 	.word	0x43000800
    fcc0:	40003400 	.word	0x40003400
    fcc4:	41014000 	.word	0x41014000
    fcc8:	43000400 	.word	0x43000400

0000fccc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    fccc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    fcce:	4b03      	ldr	r3, [pc, #12]	; (fcdc <_sercom_get_irq_num+0x10>)
    fcd0:	4798      	blx	r3
    fcd2:	0080      	lsls	r0, r0, #2
    fcd4:	302e      	adds	r0, #46	; 0x2e
}
    fcd6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    fcda:	bd08      	pop	{r3, pc}
    fcdc:	0000fbc5 	.word	0x0000fbc5

0000fce0 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    fce0:	69c2      	ldr	r2, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    fce2:	f012 0201 	ands.w	r2, r2, #1
{
    fce6:	b508      	push	{r3, lr}
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    fce8:	d108      	bne.n	fcfc <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    fcea:	6803      	ldr	r3, [r0, #0]
    fcec:	f043 0302 	orr.w	r3, r3, #2
    fcf0:	6003      	str	r3, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    fcf2:	2103      	movs	r1, #3
    fcf4:	4b03      	ldr	r3, [pc, #12]	; (fd04 <_spi_sync_enable+0x24>)
    fcf6:	4798      	blx	r3
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    fcf8:	4610      	mov	r0, r2
}
    fcfa:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    fcfc:	f06f 0003 	mvn.w	r0, #3
    fd00:	e7fb      	b.n	fcfa <_spi_sync_enable+0x1a>
    fd02:	bf00      	nop
    fd04:	0000fb4d 	.word	0x0000fb4d

0000fd08 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
    fd08:	b508      	push	{r3, lr}
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    fd0a:	4b08      	ldr	r3, [pc, #32]	; (fd2c <_spi_get_regs+0x24>)
    fd0c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
		if (sercomspi_regs[i].n == n) {
    fd0e:	2803      	cmp	r0, #3
    fd10:	d007      	beq.n	fd22 <_spi_get_regs+0x1a>
    fd12:	2807      	cmp	r0, #7
    fd14:	d107      	bne.n	fd26 <_spi_get_regs+0x1e>
    fd16:	2301      	movs	r3, #1
			return &sercomspi_regs[i];
    fd18:	4805      	ldr	r0, [pc, #20]	; (fd30 <_spi_get_regs+0x28>)
    fd1a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    fd1e:	4418      	add	r0, r3
		}
	}

	return NULL;
}
    fd20:	bd08      	pop	{r3, pc}
		if (sercomspi_regs[i].n == n) {
    fd22:	2300      	movs	r3, #0
    fd24:	e7f8      	b.n	fd18 <_spi_get_regs+0x10>
	return NULL;
    fd26:	2000      	movs	r0, #0
    fd28:	e7fa      	b.n	fd20 <_spi_get_regs+0x18>
    fd2a:	bf00      	nop
    fd2c:	0000fbc5 	.word	0x0000fbc5
    fd30:	00015194 	.word	0x00015194

0000fd34 <_spi_dma_tx_complete>:
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
    fd34:	6883      	ldr	r3, [r0, #8]
    fd36:	685b      	ldr	r3, [r3, #4]
    fd38:	b103      	cbz	r3, fd3c <_spi_dma_tx_complete+0x8>
		dev->callbacks.tx(resource);
    fd3a:	4718      	bx	r3
	}
}
    fd3c:	4770      	bx	lr

0000fd3e <_spi_dma_error_occured>:
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
    fd3e:	6883      	ldr	r3, [r0, #8]
    fd40:	68db      	ldr	r3, [r3, #12]
    fd42:	b103      	cbz	r3, fd46 <_spi_dma_error_occured+0x8>
		dev->callbacks.error(resource);
    fd44:	4718      	bx	r3
	}
}
    fd46:	4770      	bx	lr

0000fd48 <__NVIC_EnableIRQ>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fd48:	0942      	lsrs	r2, r0, #5
    fd4a:	2301      	movs	r3, #1
    fd4c:	f000 001f 	and.w	r0, r0, #31
    fd50:	fa03 f000 	lsl.w	r0, r3, r0
    fd54:	4b01      	ldr	r3, [pc, #4]	; (fd5c <__NVIC_EnableIRQ+0x14>)
    fd56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
}
    fd5a:	4770      	bx	lr
    fd5c:	e000e100 	.word	0xe000e100

0000fd60 <_spi_async_enable>:
{
    fd60:	b538      	push	{r3, r4, r5, lr}
    fd62:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
    fd64:	4b07      	ldr	r3, [pc, #28]	; (fd84 <_spi_async_enable+0x24>)
		NVIC_EnableIRQ((IRQn_Type)irq++);
    fd66:	4d08      	ldr	r5, [pc, #32]	; (fd88 <_spi_async_enable+0x28>)
	_spi_sync_enable(hw);
    fd68:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    fd6a:	4620      	mov	r0, r4
    fd6c:	4b07      	ldr	r3, [pc, #28]	; (fd8c <_spi_async_enable+0x2c>)
    fd6e:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    fd70:	2100      	movs	r1, #0
	uint8_t irq = _sercom_get_irq_num(hw);
    fd72:	4604      	mov	r4, r0
		NVIC_EnableIRQ((IRQn_Type)irq++);
    fd74:	1860      	adds	r0, r4, r1
    fd76:	b2c0      	uxtb	r0, r0
    fd78:	47a8      	blx	r5
	for (uint32_t i = 0; i < 4; i++) {
    fd7a:	3101      	adds	r1, #1
    fd7c:	2904      	cmp	r1, #4
    fd7e:	d1f9      	bne.n	fd74 <_spi_async_enable+0x14>
}
    fd80:	2000      	movs	r0, #0
    fd82:	bd38      	pop	{r3, r4, r5, pc}
    fd84:	0000fce1 	.word	0x0000fce1
    fd88:	0000fd49 	.word	0x0000fd49
    fd8c:	0000fccd 	.word	0x0000fccd

0000fd90 <__NVIC_DisableIRQ>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fd90:	0943      	lsrs	r3, r0, #5
    fd92:	2201      	movs	r2, #1
    fd94:	f000 001f 	and.w	r0, r0, #31
    fd98:	fa02 f000 	lsl.w	r0, r2, r0
    fd9c:	3320      	adds	r3, #32
    fd9e:	4a04      	ldr	r2, [pc, #16]	; (fdb0 <__NVIC_DisableIRQ+0x20>)
    fda0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    fda4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    fda8:	f3bf 8f6f 	isb	sy
}
    fdac:	4770      	bx	lr
    fdae:	bf00      	nop
    fdb0:	e000e100 	.word	0xe000e100

0000fdb4 <__NVIC_ClearPendingIRQ>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fdb4:	0943      	lsrs	r3, r0, #5
    fdb6:	2201      	movs	r2, #1
    fdb8:	f000 001f 	and.w	r0, r0, #31
    fdbc:	fa02 f000 	lsl.w	r0, r2, r0
    fdc0:	3360      	adds	r3, #96	; 0x60
    fdc2:	4a02      	ldr	r2, [pc, #8]	; (fdcc <__NVIC_ClearPendingIRQ+0x18>)
    fdc4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    fdc8:	4770      	bx	lr
    fdca:	bf00      	nop
    fdcc:	e000e100 	.word	0xe000e100

0000fdd0 <_get_i2cm_index>:
{
    fdd0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    fdd2:	4b07      	ldr	r3, [pc, #28]	; (fdf0 <_get_i2cm_index+0x20>)
    fdd4:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
    fdd6:	2805      	cmp	r0, #5
    fdd8:	d008      	beq.n	fdec <_get_i2cm_index+0x1c>
	ASSERT(false);
    fdda:	2000      	movs	r0, #0
    fddc:	4905      	ldr	r1, [pc, #20]	; (fdf4 <_get_i2cm_index+0x24>)
    fdde:	4b06      	ldr	r3, [pc, #24]	; (fdf8 <_get_i2cm_index+0x28>)
    fde0:	f240 32ed 	movw	r2, #1005	; 0x3ed
    fde4:	4798      	blx	r3
    fde6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    fdea:	bd08      	pop	{r3, pc}
			return i;
    fdec:	2000      	movs	r0, #0
    fdee:	e7fc      	b.n	fdea <_get_i2cm_index+0x1a>
    fdf0:	0000fbc5 	.word	0x0000fbc5
    fdf4:	00015158 	.word	0x00015158
    fdf8:	0000cb4d 	.word	0x0000cb4d

0000fdfc <_sercom_i2c_send_stop>:
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    fdfc:	6842      	ldr	r2, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    fdfe:	4b03      	ldr	r3, [pc, #12]	; (fe0c <_sercom_i2c_send_stop+0x10>)
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    fe00:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
    fe04:	6042      	str	r2, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    fe06:	2104      	movs	r1, #4
    fe08:	4718      	bx	r3
    fe0a:	bf00      	nop
    fe0c:	0000fb45 	.word	0x0000fb45

0000fe10 <_sercom_i2c_sync_analyse_flags>:
{
    fe10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fe14:	460e      	mov	r6, r1
    fe16:	4614      	mov	r4, r2
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    fe18:	2104      	movs	r1, #4
    fe1a:	4a56      	ldr	r2, [pc, #344]	; (ff74 <_sercom_i2c_sync_analyse_flags+0x164>)
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    fe1c:	f8d0 8000 	ldr.w	r8, [r0]
    fe20:	4605      	mov	r5, r0
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    fe22:	4790      	blx	r2
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    fe24:	8b43      	ldrh	r3, [r0, #26]
	if (flags & MB_FLAG) {
    fe26:	f016 0f01 	tst.w	r6, #1
    fe2a:	b29b      	uxth	r3, r3
    fe2c:	4617      	mov	r7, r2
    fe2e:	d064      	beq.n	fefa <_sercom_i2c_sync_analyse_flags+0xea>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    fe30:	079f      	lsls	r7, r3, #30
    fe32:	d516      	bpl.n	fe62 <_sercom_i2c_sync_analyse_flags+0x52>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    fe34:	2201      	movs	r2, #1
    fe36:	7602      	strb	r2, [r0, #24]
			msg->flags |= I2C_M_FAIL;
    fe38:	8862      	ldrh	r2, [r4, #2]
    fe3a:	b292      	uxth	r2, r2
    fe3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    fe40:	8062      	strh	r2, [r4, #2]
			msg->flags &= ~I2C_M_BUSY;
    fe42:	8862      	ldrh	r2, [r4, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    fe44:	f003 0601 	and.w	r6, r3, #1
			msg->flags &= ~I2C_M_BUSY;
    fe48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    fe4c:	0412      	lsls	r2, r2, #16
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    fe4e:	f1c6 26ff 	rsb	r6, r6, #4278255360	; 0xff00ff00
			msg->flags &= ~I2C_M_BUSY;
    fe52:	0c12      	lsrs	r2, r2, #16
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    fe54:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
			msg->flags &= ~I2C_M_BUSY;
    fe58:	8062      	strh	r2, [r4, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    fe5a:	36fc      	adds	r6, #252	; 0xfc
}
    fe5c:	4630      	mov	r0, r6
    fe5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    fe62:	f013 0604 	ands.w	r6, r3, #4
    fe66:	d015      	beq.n	fe94 <_sercom_i2c_sync_analyse_flags+0x84>
				if (msg->len > 0) {
    fe68:	6863      	ldr	r3, [r4, #4]
    fe6a:	2b00      	cmp	r3, #0
					msg->flags |= I2C_M_FAIL;
    fe6c:	bfc1      	itttt	gt
    fe6e:	8863      	ldrhgt	r3, [r4, #2]
    fe70:	b29b      	uxthgt	r3, r3
    fe72:	f443 5380 	orrgt.w	r3, r3, #4096	; 0x1000
    fe76:	8063      	strhgt	r3, [r4, #2]
				if (msg->flags & I2C_M_STOP) {
    fe78:	8863      	ldrh	r3, [r4, #2]
    fe7a:	041e      	lsls	r6, r3, #16
    fe7c:	d501      	bpl.n	fe82 <_sercom_i2c_sync_analyse_flags+0x72>
					_sercom_i2c_send_stop(hw);
    fe7e:	4b3e      	ldr	r3, [pc, #248]	; (ff78 <_sercom_i2c_sync_analyse_flags+0x168>)
    fe80:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
    fe82:	8863      	ldrh	r3, [r4, #2]
    fe84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    fe88:	041b      	lsls	r3, r3, #16
    fe8a:	0c1b      	lsrs	r3, r3, #16
    fe8c:	8063      	strh	r3, [r4, #2]
			return I2C_NACK;
    fe8e:	f06f 0601 	mvn.w	r6, #1
    fe92:	e7e3      	b.n	fe5c <_sercom_i2c_sync_analyse_flags+0x4c>
			if (msg->flags & I2C_M_TEN) {
    fe94:	8863      	ldrh	r3, [r4, #2]
    fe96:	f413 6780 	ands.w	r7, r3, #1024	; 0x400
    fe9a:	d015      	beq.n	fec8 <_sercom_i2c_sync_analyse_flags+0xb8>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    fe9c:	8823      	ldrh	r3, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    fe9e:	2104      	movs	r1, #4
    fea0:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    fea2:	f003 0706 	and.w	r7, r3, #6
    fea6:	4790      	blx	r2
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    fea8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    feaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    feae:	433b      	orrs	r3, r7
				hri_sercomi2cm_write_ADDR_reg(hw,
    feb0:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    feb4:	6243      	str	r3, [r0, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    feb6:	2104      	movs	r1, #4
    feb8:	4790      	blx	r2
				msg->flags &= ~I2C_M_TEN;
    feba:	8863      	ldrh	r3, [r4, #2]
    febc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
				msg->flags &= ~I2C_M_BUSY;
    fec0:	041b      	lsls	r3, r3, #16
    fec2:	0c1b      	lsrs	r3, r3, #16
    fec4:	8063      	strh	r3, [r4, #2]
    fec6:	e7c9      	b.n	fe5c <_sercom_i2c_sync_analyse_flags+0x4c>
			if (msg->len == 0) {
    fec8:	6866      	ldr	r6, [r4, #4]
    feca:	b94e      	cbnz	r6, fee0 <_sercom_i2c_sync_analyse_flags+0xd0>
				if (msg->flags & I2C_M_STOP) {
    fecc:	8863      	ldrh	r3, [r4, #2]
    fece:	0418      	lsls	r0, r3, #16
    fed0:	d502      	bpl.n	fed8 <_sercom_i2c_sync_analyse_flags+0xc8>
					_sercom_i2c_send_stop(hw);
    fed2:	4b29      	ldr	r3, [pc, #164]	; (ff78 <_sercom_i2c_sync_analyse_flags+0x168>)
    fed4:	4628      	mov	r0, r5
    fed6:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
    fed8:	8863      	ldrh	r3, [r4, #2]
    feda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    fede:	e7ef      	b.n	fec0 <_sercom_i2c_sync_analyse_flags+0xb0>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    fee0:	68a3      	ldr	r3, [r4, #8]
    fee2:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    fee4:	6283      	str	r3, [r0, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    fee6:	2104      	movs	r1, #4
    fee8:	4790      	blx	r2
				msg->buffer++;
    feea:	68a3      	ldr	r3, [r4, #8]
    feec:	3301      	adds	r3, #1
    feee:	60a3      	str	r3, [r4, #8]
				msg->len--;
    fef0:	6863      	ldr	r3, [r4, #4]
    fef2:	3b01      	subs	r3, #1
    fef4:	6063      	str	r3, [r4, #4]
	return I2C_OK;
    fef6:	2600      	movs	r6, #0
}
    fef8:	e7b0      	b.n	fe5c <_sercom_i2c_sync_analyse_flags+0x4c>
	} else if (flags & SB_FLAG) {
    fefa:	f016 0602 	ands.w	r6, r6, #2
    fefe:	d0ad      	beq.n	fe5c <_sercom_i2c_sync_analyse_flags+0x4c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    ff00:	6862      	ldr	r2, [r4, #4]
    ff02:	2a00      	cmp	r2, #0
    ff04:	d032      	beq.n	ff6c <_sercom_i2c_sync_analyse_flags+0x15c>
    ff06:	0759      	lsls	r1, r3, #29
    ff08:	d430      	bmi.n	ff6c <_sercom_i2c_sync_analyse_flags+0x15c>
			msg->len--;
    ff0a:	3a01      	subs	r2, #1
    ff0c:	f3c8 61c0 	ubfx	r1, r8, #27, #1
    ff10:	6062      	str	r2, [r4, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    ff12:	b99a      	cbnz	r2, ff3c <_sercom_i2c_sync_analyse_flags+0x12c>
    ff14:	b1a9      	cbz	r1, ff42 <_sercom_i2c_sync_analyse_flags+0x132>
				if (msg->flags & I2C_M_STOP) {
    ff16:	8863      	ldrh	r3, [r4, #2]
    ff18:	041b      	lsls	r3, r3, #16
    ff1a:	d508      	bpl.n	ff2e <_sercom_i2c_sync_analyse_flags+0x11e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    ff1c:	686b      	ldr	r3, [r5, #4]
    ff1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ff22:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ff24:	2104      	movs	r1, #4
    ff26:	4628      	mov	r0, r5
    ff28:	47b8      	blx	r7
					_sercom_i2c_send_stop(hw);
    ff2a:	4b13      	ldr	r3, [pc, #76]	; (ff78 <_sercom_i2c_sync_analyse_flags+0x168>)
    ff2c:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
    ff2e:	8863      	ldrh	r3, [r4, #2]
    ff30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    ff34:	041b      	lsls	r3, r3, #16
    ff36:	0c1b      	lsrs	r3, r3, #16
    ff38:	8063      	strh	r3, [r4, #2]
    ff3a:	e00c      	b.n	ff56 <_sercom_i2c_sync_analyse_flags+0x146>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    ff3c:	2a01      	cmp	r2, #1
    ff3e:	d10a      	bne.n	ff56 <_sercom_i2c_sync_analyse_flags+0x146>
    ff40:	b149      	cbz	r1, ff56 <_sercom_i2c_sync_analyse_flags+0x146>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    ff42:	686b      	ldr	r3, [r5, #4]
    ff44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    ff48:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ff4a:	2104      	movs	r1, #4
    ff4c:	4628      	mov	r0, r5
    ff4e:	47b8      	blx	r7
			if (msg->len == 0) {
    ff50:	6863      	ldr	r3, [r4, #4]
    ff52:	2b00      	cmp	r3, #0
    ff54:	d0df      	beq.n	ff16 <_sercom_i2c_sync_analyse_flags+0x106>
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    ff56:	2104      	movs	r1, #4
    ff58:	4628      	mov	r0, r5
    ff5a:	47b8      	blx	r7
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    ff5c:	68a3      	ldr	r3, [r4, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    ff5e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    ff60:	1c59      	adds	r1, r3, #1
    ff62:	60a1      	str	r1, [r4, #8]
    ff64:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    ff66:	2302      	movs	r3, #2
    ff68:	762b      	strb	r3, [r5, #24]
    ff6a:	e7c4      	b.n	fef6 <_sercom_i2c_sync_analyse_flags+0xe6>
    ff6c:	2302      	movs	r3, #2
    ff6e:	762b      	strb	r3, [r5, #24]
    ff70:	e78d      	b.n	fe8e <_sercom_i2c_sync_analyse_flags+0x7e>
    ff72:	bf00      	nop
    ff74:	0000fb45 	.word	0x0000fb45
    ff78:	0000fdfd 	.word	0x0000fdfd

0000ff7c <_usart_set_parity>:
{
    ff7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    ff7e:	4b16      	ldr	r3, [pc, #88]	; (ffd8 <_usart_set_parity+0x5c>)
{
    ff80:	4604      	mov	r4, r0
    ff82:	460d      	mov	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    ff84:	4798      	blx	r3
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    ff86:	4b15      	ldr	r3, [pc, #84]	; (ffdc <_usart_set_parity+0x60>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    ff88:	4606      	mov	r6, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    ff8a:	4620      	mov	r0, r4
    ff8c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    ff8e:	4b14      	ldr	r3, [pc, #80]	; (ffe0 <_usart_set_parity+0x64>)
    ff90:	a801      	add	r0, sp, #4
    ff92:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    ff94:	4a13      	ldr	r2, [pc, #76]	; (ffe4 <_usart_set_parity+0x68>)
    ff96:	4620      	mov	r0, r4
    ff98:	2102      	movs	r1, #2
    ff9a:	4790      	blx	r2
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    ff9c:	6823      	ldr	r3, [r4, #0]
	if (USART_PARITY_NONE != parity) {
    ff9e:	2d02      	cmp	r5, #2
    ffa0:	bf14      	ite	ne
    ffa2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    ffa6:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
    ffaa:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    ffac:	211f      	movs	r1, #31
    ffae:	4790      	blx	r2
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    ffb0:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    ffb2:	3d00      	subs	r5, #0
    ffb4:	bf18      	it	ne
    ffb6:	2501      	movne	r5, #1
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    ffb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    ffbc:	ea43 3545 	orr.w	r5, r3, r5, lsl #13
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    ffc0:	211f      	movs	r1, #31
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    ffc2:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    ffc4:	4790      	blx	r2
	CRITICAL_SECTION_LEAVE()
    ffc6:	a801      	add	r0, sp, #4
    ffc8:	4b07      	ldr	r3, [pc, #28]	; (ffe8 <_usart_set_parity+0x6c>)
    ffca:	4798      	blx	r3
	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    ffcc:	4b07      	ldr	r3, [pc, #28]	; (ffec <_usart_set_parity+0x70>)
    ffce:	4631      	mov	r1, r6
    ffd0:	4620      	mov	r0, r4
    ffd2:	4798      	blx	r3
}
    ffd4:	b002      	add	sp, #8
    ffd6:	bd70      	pop	{r4, r5, r6, pc}
    ffd8:	0000fb85 	.word	0x0000fb85
    ffdc:	0000fbb1 	.word	0x0000fbb1
    ffe0:	00010d8d 	.word	0x00010d8d
    ffe4:	0000fb55 	.word	0x0000fb55
    ffe8:	00010d9b 	.word	0x00010d9b
    ffec:	0000fb99 	.word	0x0000fb99

0000fff0 <_spi_set_mode>:
{
    fff0:	b570      	push	{r4, r5, r6, lr}
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    fff2:	69c4      	ldr	r4, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    fff4:	f014 0403 	ands.w	r4, r4, #3
{
    fff8:	460a      	mov	r2, r1
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
    fffa:	d10e      	bne.n	1001a <STACK_SIZE+0x1a>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
    fffc:	4e08      	ldr	r6, [pc, #32]	; (10020 <STACK_SIZE+0x20>)
    fffe:	2103      	movs	r1, #3
   10000:	47b0      	blx	r6
	return ((Sercom *)hw)->SPI.CTRLA.reg;
   10002:	6803      	ldr	r3, [r0, #0]
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
   10004:	0712      	lsls	r2, r2, #28
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
   10006:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
   1000a:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
   1000e:	431a      	orrs	r2, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10010:	6002      	str	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10012:	2103      	movs	r1, #3
   10014:	47b0      	blx	r6
	return ERR_NONE;
   10016:	4620      	mov	r0, r4
}
   10018:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
   1001a:	f06f 0003 	mvn.w	r0, #3
   1001e:	e7fb      	b.n	10018 <STACK_SIZE+0x18>
   10020:	0000fb4d 	.word	0x0000fb4d

00010024 <_spi_load_regs_master>:
{
   10024:	b538      	push	{r3, r4, r5, lr}
   10026:	460d      	mov	r5, r1
	ASSERT(hw && regs);
   10028:	4604      	mov	r4, r0
   1002a:	b110      	cbz	r0, 10032 <_spi_load_regs_master+0xe>
   1002c:	1e08      	subs	r0, r1, #0
   1002e:	bf18      	it	ne
   10030:	2001      	movne	r0, #1
   10032:	490f      	ldr	r1, [pc, #60]	; (10070 <_spi_load_regs_master+0x4c>)
   10034:	4b0f      	ldr	r3, [pc, #60]	; (10074 <_spi_load_regs_master+0x50>)
   10036:	f640 127a 	movw	r2, #2426	; 0x97a
   1003a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
   1003c:	682b      	ldr	r3, [r5, #0]
   1003e:	4a0e      	ldr	r2, [pc, #56]	; (10078 <_spi_load_regs_master+0x54>)
	hri_sercomspi_write_CTRLA_reg(
   10040:	f423 7381 	bic.w	r3, r3, #258	; 0x102
   10044:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10048:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   1004a:	2103      	movs	r1, #3
   1004c:	4620      	mov	r0, r4
   1004e:	4790      	blx	r2
	    (regs->ctrlb
   10050:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
   10052:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
   10056:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
   1005a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
   1005e:	6063      	str	r3, [r4, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   10060:	2117      	movs	r1, #23
   10062:	4790      	blx	r2
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
   10064:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
   10066:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
   10068:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
   1006a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   1006e:	bd38      	pop	{r3, r4, r5, pc}
   10070:	00015158 	.word	0x00015158
   10074:	0000cb4d 	.word	0x0000cb4d
   10078:	0000fb4d 	.word	0x0000fb4d

0001007c <_i2c_m_sync_init_impl>:
{
   1007c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10080:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
   10082:	4b23      	ldr	r3, [pc, #140]	; (10110 <_i2c_m_sync_init_impl+0x94>)
   10084:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1011c <_i2c_m_sync_init_impl+0xa0>
   10088:	4d22      	ldr	r5, [pc, #136]	; (10114 <_i2c_m_sync_init_impl+0x98>)
{
   1008a:	4607      	mov	r7, r0
	uint8_t i = _get_i2cm_index(hw);
   1008c:	4608      	mov	r0, r1
   1008e:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
   10090:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
   10092:	f013 0f01 	tst.w	r3, #1
   10096:	fa5f f880 	uxtb.w	r8, r0
   1009a:	d115      	bne.n	100c8 <_i2c_m_sync_init_impl+0x4c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
   1009c:	2318      	movs	r3, #24
   1009e:	fb03 9308 	mla	r3, r3, r8, r9
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   100a2:	2103      	movs	r1, #3
   100a4:	4620      	mov	r0, r4
   100a6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   100a8:	47a8      	blx	r5
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
   100aa:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
   100ac:	079b      	lsls	r3, r3, #30
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
   100ae:	f006 061c 	and.w	r6, r6, #28
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
   100b2:	d503      	bpl.n	100bc <_i2c_m_sync_init_impl+0x40>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
   100b4:	4b18      	ldr	r3, [pc, #96]	; (10118 <_i2c_m_sync_init_impl+0x9c>)
   100b6:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
   100b8:	2102      	movs	r1, #2
   100ba:	47a8      	blx	r5
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
   100bc:	f046 0601 	orr.w	r6, r6, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
   100c0:	6026      	str	r6, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   100c2:	2103      	movs	r1, #3
   100c4:	4620      	mov	r0, r4
   100c6:	47a8      	blx	r5
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
   100c8:	4620      	mov	r0, r4
   100ca:	2101      	movs	r1, #1
   100cc:	47a8      	blx	r5
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
   100ce:	2218      	movs	r2, #24
   100d0:	fb02 9208 	mla	r2, r2, r8, r9
   100d4:	2103      	movs	r1, #3
   100d6:	6c96      	ldr	r6, [r2, #72]	; 0x48
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
   100d8:	6026      	str	r6, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   100da:	47a8      	blx	r5
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
   100dc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
   100de:	6063      	str	r3, [r4, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   100e0:	2104      	movs	r1, #4
   100e2:	47a8      	blx	r5
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
   100e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
	((Sercom *)hw)->I2CM.BAUD.reg = data;
   100e6:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
   100e8:	f3c6 6301 	ubfx	r3, r6, #24, #2
   100ec:	81bb      	strh	r3, [r7, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
   100ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
   100f0:	f3c6 6640 	ubfx	r6, r6, #25, #1
	tmp &= ~SERCOM_I2CM_ADDR_HS;
   100f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
   100f8:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
   100fc:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   100fe:	2104      	movs	r1, #4
   10100:	47a8      	blx	r5
	service->trise = _i2cms[i].trise;
   10102:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
   10106:	81fb      	strh	r3, [r7, #14]
}
   10108:	2000      	movs	r0, #0
   1010a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1010e:	bf00      	nop
   10110:	0000fdd1 	.word	0x0000fdd1
   10114:	0000fb45 	.word	0x0000fb45
   10118:	0000fb5d 	.word	0x0000fb5d
   1011c:	00015174 	.word	0x00015174

00010120 <_usart_init>:
{
   10120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
   10124:	4b2d      	ldr	r3, [pc, #180]	; (101dc <_usart_init+0xbc>)
{
   10126:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
   10128:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
   1012a:	4605      	mov	r5, r0
   1012c:	b170      	cbz	r0, 1014c <_usart_init+0x2c>
   1012e:	2801      	cmp	r0, #1
   10130:	d00c      	beq.n	1014c <_usart_init+0x2c>
   10132:	2802      	cmp	r0, #2
   10134:	d00a      	beq.n	1014c <_usart_init+0x2c>
   10136:	2804      	cmp	r0, #4
   10138:	d04b      	beq.n	101d2 <_usart_init+0xb2>
   1013a:	2806      	cmp	r0, #6
   1013c:	d04b      	beq.n	101d6 <_usart_init+0xb6>
	ASSERT(false);
   1013e:	4928      	ldr	r1, [pc, #160]	; (101e0 <_usart_init+0xc0>)
   10140:	4b28      	ldr	r3, [pc, #160]	; (101e4 <_usart_init+0xc4>)
   10142:	f240 2276 	movw	r2, #630	; 0x276
   10146:	2000      	movs	r0, #0
   10148:	4798      	blx	r3
	return 0;
   1014a:	2500      	movs	r5, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
   1014c:	69e3      	ldr	r3, [r4, #28]
   1014e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 101f0 <_usart_init+0xd0>
   10152:	4e25      	ldr	r6, [pc, #148]	; (101e8 <_usart_init+0xc8>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
   10154:	f013 0f01 	tst.w	r3, #1
   10158:	d115      	bne.n	10186 <_usart_init+0x66>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
   1015a:	2318      	movs	r3, #24
   1015c:	fb03 8305 	mla	r3, r3, r5, r8
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10160:	2103      	movs	r1, #3
   10162:	4620      	mov	r0, r4
   10164:	6e1f      	ldr	r7, [r3, #96]	; 0x60
   10166:	47b0      	blx	r6
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
   10168:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
   1016a:	079b      	lsls	r3, r3, #30
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
   1016c:	f007 071c 	and.w	r7, r7, #28
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
   10170:	d503      	bpl.n	1017a <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
   10172:	4b1e      	ldr	r3, [pc, #120]	; (101ec <_usart_init+0xcc>)
   10174:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
   10176:	2102      	movs	r1, #2
   10178:	47b0      	blx	r6
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
   1017a:	f047 0701 	orr.w	r7, r7, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
   1017e:	6027      	str	r7, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10180:	2103      	movs	r1, #3
   10182:	4620      	mov	r0, r4
   10184:	47b0      	blx	r6
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
   10186:	2101      	movs	r1, #1
   10188:	4620      	mov	r0, r4
   1018a:	47b0      	blx	r6
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
   1018c:	2018      	movs	r0, #24
   1018e:	fb00 8505 	mla	r5, r0, r5, r8
   10192:	2103      	movs	r1, #3
   10194:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	((Sercom *)hw)->USART.CTRLA.reg = data;
   10196:	6022      	str	r2, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10198:	4620      	mov	r0, r4
   1019a:	47b0      	blx	r6
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
   1019c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
	((Sercom *)hw)->USART.CTRLB.reg = data;
   1019e:	6063      	str	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   101a0:	211f      	movs	r1, #31
   101a2:	47b0      	blx	r6
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
   101a4:	6eab      	ldr	r3, [r5, #104]	; 0x68
	((Sercom *)hw)->USART.CTRLC.reg = data;
   101a6:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
   101a8:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
   101ac:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   101b0:	d008      	beq.n	101c4 <_usart_init+0xa4>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
   101b2:	89a2      	ldrh	r2, [r4, #12]
   101b4:	f363 020c 	bfi	r2, r3, #0, #13
   101b8:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
   101ba:	89a3      	ldrh	r3, [r4, #12]
   101bc:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
   101c0:	f362 334f 	bfi	r3, r2, #13, #3
	((Sercom *)hw)->USART.RXPL.reg = data;
   101c4:	2000      	movs	r0, #0
	((Sercom *)hw)->USART.BAUD.reg = data;
   101c6:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
   101c8:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
   101ca:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
   101ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
   101d2:	2503      	movs	r5, #3
   101d4:	e7ba      	b.n	1014c <_usart_init+0x2c>
   101d6:	2504      	movs	r5, #4
   101d8:	e7b8      	b.n	1014c <_usart_init+0x2c>
   101da:	bf00      	nop
   101dc:	0000fbc5 	.word	0x0000fbc5
   101e0:	00015158 	.word	0x00015158
   101e4:	0000cb4d 	.word	0x0000cb4d
   101e8:	0000fb55 	.word	0x0000fb55
   101ec:	0000fbb1 	.word	0x0000fbb1
   101f0:	00015174 	.word	0x00015174

000101f4 <_usart_sync_init>:
{
   101f4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   101f6:	4605      	mov	r5, r0
   101f8:	3800      	subs	r0, #0
{
   101fa:	460c      	mov	r4, r1
	ASSERT(device);
   101fc:	4b05      	ldr	r3, [pc, #20]	; (10214 <_usart_sync_init+0x20>)
   101fe:	4906      	ldr	r1, [pc, #24]	; (10218 <_usart_sync_init+0x24>)
   10200:	bf18      	it	ne
   10202:	2001      	movne	r0, #1
   10204:	22c8      	movs	r2, #200	; 0xc8
   10206:	4798      	blx	r3
	device->hw = hw;
   10208:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
   1020a:	4620      	mov	r0, r4
   1020c:	4b03      	ldr	r3, [pc, #12]	; (1021c <_usart_sync_init+0x28>)
}
   1020e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _usart_init(hw);
   10212:	4718      	bx	r3
   10214:	0000cb4d 	.word	0x0000cb4d
   10218:	00015158 	.word	0x00015158
   1021c:	00010121 	.word	0x00010121

00010220 <_usart_async_init>:
{
   10220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ASSERT(device);
   10224:	4606      	mov	r6, r0
   10226:	3800      	subs	r0, #0
   10228:	bf18      	it	ne
   1022a:	2001      	movne	r0, #1
   1022c:	4b12      	ldr	r3, [pc, #72]	; (10278 <_usart_async_init+0x58>)
{
   1022e:	460c      	mov	r4, r1
	ASSERT(device);
   10230:	22d6      	movs	r2, #214	; 0xd6
   10232:	4912      	ldr	r1, [pc, #72]	; (1027c <_usart_async_init+0x5c>)
   10234:	4798      	blx	r3
	init_status = _usart_init(hw);
   10236:	4b12      	ldr	r3, [pc, #72]	; (10280 <_usart_async_init+0x60>)
   10238:	4620      	mov	r0, r4
   1023a:	4798      	blx	r3
	if (init_status) {
   1023c:	4605      	mov	r5, r0
   1023e:	b9b8      	cbnz	r0, 10270 <_usart_async_init+0x50>
	_sercom_init_irq_param(hw, (void *)device);
   10240:	4631      	mov	r1, r6
	device->hw = hw;
   10242:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
   10244:	4620      	mov	r0, r4
   10246:	4b0f      	ldr	r3, [pc, #60]	; (10284 <_usart_async_init+0x64>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   10248:	f8df 8048 	ldr.w	r8, [pc, #72]	; 10294 <_usart_async_init+0x74>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   1024c:	4f0e      	ldr	r7, [pc, #56]	; (10288 <_usart_async_init+0x68>)
		NVIC_EnableIRQ((IRQn_Type)irq);
   1024e:	4e0f      	ldr	r6, [pc, #60]	; (1028c <_usart_async_init+0x6c>)
	_sercom_init_irq_param(hw, (void *)device);
   10250:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
   10252:	4b0f      	ldr	r3, [pc, #60]	; (10290 <_usart_async_init+0x70>)
   10254:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   10256:	4629      	mov	r1, r5
	uint8_t irq = _sercom_get_irq_num(hw);
   10258:	4604      	mov	r4, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   1025a:	1863      	adds	r3, r4, r1
   1025c:	b2d8      	uxtb	r0, r3
   1025e:	9001      	str	r0, [sp, #4]
   10260:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10262:	9801      	ldr	r0, [sp, #4]
   10264:	47b8      	blx	r7
		NVIC_EnableIRQ((IRQn_Type)irq);
   10266:	9801      	ldr	r0, [sp, #4]
   10268:	47b0      	blx	r6
	for (uint32_t i = 0; i < 4; i++) {
   1026a:	3101      	adds	r1, #1
   1026c:	2904      	cmp	r1, #4
   1026e:	d1f4      	bne.n	1025a <_usart_async_init+0x3a>
}
   10270:	4628      	mov	r0, r5
   10272:	b002      	add	sp, #8
   10274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10278:	0000cb4d 	.word	0x0000cb4d
   1027c:	00015158 	.word	0x00015158
   10280:	00010121 	.word	0x00010121
   10284:	0000fc6d 	.word	0x0000fc6d
   10288:	0000fdb5 	.word	0x0000fdb5
   1028c:	0000fd49 	.word	0x0000fd49
   10290:	0000fccd 	.word	0x0000fccd
   10294:	0000fd91 	.word	0x0000fd91

00010298 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
   10298:	6800      	ldr	r0, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1029a:	6803      	ldr	r3, [r0, #0]
   1029c:	f043 0302 	orr.w	r3, r3, #2
   102a0:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   102a2:	2103      	movs	r1, #3
   102a4:	4b00      	ldr	r3, [pc, #0]	; (102a8 <_usart_sync_enable+0x10>)
   102a6:	4718      	bx	r3
   102a8:	0000fb55 	.word	0x0000fb55

000102ac <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
   102ac:	6980      	ldr	r0, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   102ae:	6803      	ldr	r3, [r0, #0]
   102b0:	f043 0302 	orr.w	r3, r3, #2
   102b4:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   102b6:	2103      	movs	r1, #3
   102b8:	4b00      	ldr	r3, [pc, #0]	; (102bc <_usart_async_enable+0x10>)
   102ba:	4718      	bx	r3
   102bc:	0000fb55 	.word	0x0000fb55

000102c0 <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
   102c0:	6980      	ldr	r0, [r0, #24]
   102c2:	4b01      	ldr	r3, [pc, #4]	; (102c8 <_usart_async_disable+0x8>)
   102c4:	4718      	bx	r3
   102c6:	bf00      	nop
   102c8:	0000fbb1 	.word	0x0000fbb1

000102cc <_usart_async_set_parity>:
	_usart_set_parity(device->hw, parity);
   102cc:	6980      	ldr	r0, [r0, #24]
   102ce:	4b01      	ldr	r3, [pc, #4]	; (102d4 <_usart_async_set_parity+0x8>)
   102d0:	4718      	bx	r3
   102d2:	bf00      	nop
   102d4:	0000ff7d 	.word	0x0000ff7d

000102d8 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
   102d8:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
   102da:	6299      	str	r1, [r3, #40]	; 0x28
}
   102dc:	4770      	bx	lr

000102de <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
   102de:	6983      	ldr	r3, [r0, #24]
   102e0:	6299      	str	r1, [r3, #40]	; 0x28
}
   102e2:	4770      	bx	lr

000102e4 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
   102e4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
   102e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
   102e8:	b2c0      	uxtb	r0, r0
   102ea:	4770      	bx	lr

000102ec <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
   102ec:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
   102ee:	7e18      	ldrb	r0, [r3, #24]
}
   102f0:	f000 0001 	and.w	r0, r0, #1
   102f4:	4770      	bx	lr

000102f6 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
   102f6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
   102f8:	7e18      	ldrb	r0, [r3, #24]
}
   102fa:	f3c0 0040 	ubfx	r0, r0, #1, #1
   102fe:	4770      	bx	lr

00010300 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
   10300:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
   10302:	7e18      	ldrb	r0, [r3, #24]
}
   10304:	f3c0 0080 	ubfx	r0, r0, #2, #1
   10308:	4770      	bx	lr

0001030a <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
   1030a:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   1030c:	2201      	movs	r2, #1
   1030e:	759a      	strb	r2, [r3, #22]
}
   10310:	4770      	bx	lr

00010312 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
   10312:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
   10314:	2202      	movs	r2, #2
   10316:	759a      	strb	r2, [r3, #22]
}
   10318:	4770      	bx	lr
	...

0001031c <_usart_async_set_irq_state>:
{
   1031c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   1031e:	4604      	mov	r4, r0
   10320:	3800      	subs	r0, #0
{
   10322:	460e      	mov	r6, r1
	ASSERT(device);
   10324:	bf18      	it	ne
   10326:	2001      	movne	r0, #1
   10328:	490f      	ldr	r1, [pc, #60]	; (10368 <_usart_async_set_irq_state+0x4c>)
   1032a:	4b10      	ldr	r3, [pc, #64]	; (1036c <_usart_async_set_irq_state+0x50>)
{
   1032c:	4615      	mov	r5, r2
	ASSERT(device);
   1032e:	f240 2236 	movw	r2, #566	; 0x236
   10332:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
   10334:	f016 0ffd 	tst.w	r6, #253	; 0xfd
   10338:	d109      	bne.n	1034e <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
   1033a:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
   1033c:	2101      	movs	r1, #1
   1033e:	2202      	movs	r2, #2
   10340:	b915      	cbnz	r5, 10348 <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
   10342:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
   10344:	751a      	strb	r2, [r3, #20]
}
   10346:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10348:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
   1034a:	759a      	strb	r2, [r3, #22]
   1034c:	e7fb      	b.n	10346 <_usart_async_set_irq_state+0x2a>
	} else if (USART_ASYNC_RX_DONE == type) {
   1034e:	2e01      	cmp	r6, #1
   10350:	d104      	bne.n	1035c <_usart_async_set_irq_state+0x40>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
   10352:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
   10354:	2204      	movs	r2, #4
	if (value == 0x0) {
   10356:	2d00      	cmp	r5, #0
   10358:	d1f7      	bne.n	1034a <_usart_async_set_irq_state+0x2e>
   1035a:	e7f3      	b.n	10344 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
   1035c:	2e03      	cmp	r6, #3
   1035e:	d1f2      	bne.n	10346 <_usart_async_set_irq_state+0x2a>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
   10360:	69a3      	ldr	r3, [r4, #24]
   10362:	2280      	movs	r2, #128	; 0x80
   10364:	e7f7      	b.n	10356 <_usart_async_set_irq_state+0x3a>
   10366:	bf00      	nop
   10368:	00015158 	.word	0x00015158
   1036c:	0000cb4d 	.word	0x0000cb4d

00010370 <_i2c_m_async_init>:
{
   10370:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ASSERT(i2c_dev);
   10374:	4605      	mov	r5, r0
   10376:	3800      	subs	r0, #0
{
   10378:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
   1037a:	bf18      	it	ne
   1037c:	2001      	movne	r0, #1
   1037e:	4913      	ldr	r1, [pc, #76]	; (103cc <_i2c_m_async_init+0x5c>)
   10380:	4b13      	ldr	r3, [pc, #76]	; (103d0 <_i2c_m_async_init+0x60>)
   10382:	f240 42d3 	movw	r2, #1235	; 0x4d3
   10386:	4798      	blx	r3
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
   10388:	4b12      	ldr	r3, [pc, #72]	; (103d4 <_i2c_m_async_init+0x64>)
	i2c_dev->hw = hw;
   1038a:	612c      	str	r4, [r5, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
   1038c:	4621      	mov	r1, r4
   1038e:	4628      	mov	r0, r5
   10390:	4798      	blx	r3
	if (init_status) {
   10392:	4606      	mov	r6, r0
   10394:	b9b0      	cbnz	r0, 103c4 <_i2c_m_async_init+0x54>
	_sercom_init_irq_param(hw, (void *)i2c_dev);
   10396:	4629      	mov	r1, r5
   10398:	4620      	mov	r0, r4
   1039a:	4b0f      	ldr	r3, [pc, #60]	; (103d8 <_i2c_m_async_init+0x68>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   1039c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 103e8 <_i2c_m_async_init+0x78>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   103a0:	4f0e      	ldr	r7, [pc, #56]	; (103dc <_i2c_m_async_init+0x6c>)
		NVIC_EnableIRQ((IRQn_Type)irq);
   103a2:	4d0f      	ldr	r5, [pc, #60]	; (103e0 <_i2c_m_async_init+0x70>)
	_sercom_init_irq_param(hw, (void *)i2c_dev);
   103a4:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
   103a6:	4b0f      	ldr	r3, [pc, #60]	; (103e4 <_i2c_m_async_init+0x74>)
   103a8:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   103aa:	4631      	mov	r1, r6
	uint8_t irq = _sercom_get_irq_num(hw);
   103ac:	4604      	mov	r4, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   103ae:	1863      	adds	r3, r4, r1
   103b0:	b2d8      	uxtb	r0, r3
   103b2:	9001      	str	r0, [sp, #4]
   103b4:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   103b6:	9801      	ldr	r0, [sp, #4]
   103b8:	47b8      	blx	r7
		NVIC_EnableIRQ((IRQn_Type)irq);
   103ba:	9801      	ldr	r0, [sp, #4]
   103bc:	47a8      	blx	r5
	for (uint32_t i = 0; i < 4; i++) {
   103be:	3101      	adds	r1, #1
   103c0:	2904      	cmp	r1, #4
   103c2:	d1f4      	bne.n	103ae <_i2c_m_async_init+0x3e>
}
   103c4:	4630      	mov	r0, r6
   103c6:	b002      	add	sp, #8
   103c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103cc:	00015158 	.word	0x00015158
   103d0:	0000cb4d 	.word	0x0000cb4d
   103d4:	0001007d 	.word	0x0001007d
   103d8:	0000fc6d 	.word	0x0000fc6d
   103dc:	0000fdb5 	.word	0x0000fdb5
   103e0:	0000fd49 	.word	0x0000fd49
   103e4:	0000fccd 	.word	0x0000fccd
   103e8:	0000fd91 	.word	0x0000fd91

000103ec <_i2c_m_async_transfer>:
{
   103ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT(i2c_dev);
   103f0:	4604      	mov	r4, r0
   103f2:	3800      	subs	r0, #0
   103f4:	4e3c      	ldr	r6, [pc, #240]	; (104e8 <_i2c_m_async_transfer+0xfc>)
{
   103f6:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
   103f8:	bf18      	it	ne
   103fa:	2001      	movne	r0, #1
   103fc:	493b      	ldr	r1, [pc, #236]	; (104ec <_i2c_m_async_transfer+0x100>)
   103fe:	f240 5229 	movw	r2, #1321	; 0x529
   10402:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
   10404:	6920      	ldr	r0, [r4, #16]
   10406:	4939      	ldr	r1, [pc, #228]	; (104ec <_i2c_m_async_transfer+0x100>)
   10408:	3800      	subs	r0, #0
   1040a:	f240 522a 	movw	r2, #1322	; 0x52a
   1040e:	bf18      	it	ne
   10410:	2001      	movne	r0, #1
   10412:	47b0      	blx	r6
	ASSERT(msg);
   10414:	1e28      	subs	r0, r5, #0
   10416:	bf18      	it	ne
   10418:	2001      	movne	r0, #1
   1041a:	4934      	ldr	r1, [pc, #208]	; (104ec <_i2c_m_async_transfer+0x100>)
   1041c:	f240 522b 	movw	r2, #1323	; 0x52b
   10420:	47b0      	blx	r6
	if (msg->len == 0) {
   10422:	6868      	ldr	r0, [r5, #4]
   10424:	2800      	cmp	r0, #0
   10426:	d048      	beq.n	104ba <_i2c_m_async_transfer+0xce>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
   10428:	8863      	ldrh	r3, [r4, #2]
   1042a:	05da      	lsls	r2, r3, #23
   1042c:	d458      	bmi.n	104e0 <_i2c_m_async_transfer+0xf4>
	msg->flags |= I2C_M_BUSY;
   1042e:	886b      	ldrh	r3, [r5, #2]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10430:	4f2f      	ldr	r7, [pc, #188]	; (104f0 <_i2c_m_async_transfer+0x104>)
   10432:	b29b      	uxth	r3, r3
   10434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10438:	806b      	strh	r3, [r5, #2]
	i2c_dev->service.msg = *msg;
   1043a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1043e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
   10442:	6920      	ldr	r0, [r4, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
   10444:	6843      	ldr	r3, [r0, #4]
   10446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1044a:	6043      	str	r3, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   1044c:	2104      	movs	r1, #4
   1044e:	47b8      	blx	r7
	void *             hw    = i2c_dev->hw;
   10450:	6925      	ldr	r5, [r4, #16]
	ASSERT(i2c_dev);
   10452:	4926      	ldr	r1, [pc, #152]	; (104ec <_i2c_m_async_transfer+0x100>)
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
   10454:	f8d5 8000 	ldr.w	r8, [r5]
   10458:	f240 5201 	movw	r2, #1281	; 0x501
   1045c:	2001      	movs	r0, #1
   1045e:	47b0      	blx	r6
	if (msg->len == 1 && sclsm) {
   10460:	6863      	ldr	r3, [r4, #4]
   10462:	2b01      	cmp	r3, #1
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   10464:	686b      	ldr	r3, [r5, #4]
   10466:	d12a      	bne.n	104be <_i2c_m_async_transfer+0xd2>
   10468:	f018 6f00 	tst.w	r8, #134217728	; 0x8000000
   1046c:	d027      	beq.n	104be <_i2c_m_async_transfer+0xd2>
   1046e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10472:	4628      	mov	r0, r5
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   10474:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10476:	2104      	movs	r1, #4
   10478:	47b8      	blx	r7
	if (msg->addr & I2C_M_TEN) {
   1047a:	8820      	ldrh	r0, [r4, #0]
   1047c:	f410 6680 	ands.w	r6, r0, #1024	; 0x400
   10480:	ea4f 0240 	mov.w	r2, r0, lsl #1
   10484:	d01e      	beq.n	104c4 <_i2c_m_async_transfer+0xd8>
		if (msg->flags & I2C_M_RD) {
   10486:	8863      	ldrh	r3, [r4, #2]
   10488:	07db      	lsls	r3, r3, #31
			msg->flags |= I2C_M_TEN;
   1048a:	bf41      	itttt	mi
   1048c:	8863      	ldrhmi	r3, [r4, #2]
   1048e:	b29b      	uxthmi	r3, r3
   10490:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
   10494:	8063      	strhmi	r3, [r4, #2]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10496:	2104      	movs	r1, #4
   10498:	4628      	mov	r0, r5
   1049a:	47b8      	blx	r7
	return ((Sercom *)hw)->I2CM.ADDR.reg;
   1049c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
   1049e:	f022 0201 	bic.w	r2, r2, #1
   104a2:	0552      	lsls	r2, r2, #21
   104a4:	0d52      	lsrs	r2, r2, #21
   104a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   104aa:	431a      	orrs	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
   104ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   104b0:	4628      	mov	r0, r5
	((Sercom *)hw)->I2CM.ADDR.reg = data;
   104b2:	626a      	str	r2, [r5, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   104b4:	2104      	movs	r1, #4
   104b6:	47b8      	blx	r7
	return ERR_NONE;
   104b8:	2000      	movs	r0, #0
}
   104ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   104be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   104c2:	e7d6      	b.n	10472 <_i2c_m_async_transfer+0x86>
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   104c4:	2104      	movs	r1, #4
   104c6:	4628      	mov	r0, r5
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
   104c8:	8864      	ldrh	r4, [r4, #2]
   104ca:	47b8      	blx	r7
   104cc:	b2a4      	uxth	r4, r4
	return ((Sercom *)hw)->I2CM.ADDR.reg;
   104ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   104d0:	b2d2      	uxtb	r2, r2
   104d2:	f004 0401 	and.w	r4, r4, #1
   104d6:	4322      	orrs	r2, r4
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
   104d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
   104dc:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
   104de:	e7e7      	b.n	104b0 <_i2c_m_async_transfer+0xc4>
		return ERR_BUSY;
   104e0:	f06f 0003 	mvn.w	r0, #3
   104e4:	e7e9      	b.n	104ba <_i2c_m_async_transfer+0xce>
   104e6:	bf00      	nop
   104e8:	0000cb4d 	.word	0x0000cb4d
   104ec:	00015158 	.word	0x00015158
   104f0:	0000fb45 	.word	0x0000fb45

000104f4 <_i2c_m_async_register_callback>:
	switch (type) {
   104f4:	2901      	cmp	r1, #1
   104f6:	d005      	beq.n	10504 <_i2c_m_async_register_callback+0x10>
   104f8:	2902      	cmp	r1, #2
   104fa:	d005      	beq.n	10508 <_i2c_m_async_register_callback+0x14>
   104fc:	b901      	cbnz	r1, 10500 <_i2c_m_async_register_callback+0xc>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
   104fe:	6142      	str	r2, [r0, #20]
}
   10500:	2000      	movs	r0, #0
   10502:	4770      	bx	lr
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
   10504:	6182      	str	r2, [r0, #24]
		break;
   10506:	e7fb      	b.n	10500 <_i2c_m_async_register_callback+0xc>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
   10508:	61c2      	str	r2, [r0, #28]
		break;
   1050a:	e7f9      	b.n	10500 <_i2c_m_async_register_callback+0xc>

0001050c <SERCOM0_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom0_dev);
   1050c:	4b01      	ldr	r3, [pc, #4]	; (10514 <SERCOM0_0_Handler+0x8>)
   1050e:	6818      	ldr	r0, [r3, #0]
   10510:	4b01      	ldr	r3, [pc, #4]	; (10518 <SERCOM0_0_Handler+0xc>)
   10512:	4718      	bx	r3
   10514:	20001074 	.word	0x20001074
   10518:	0000fbfd 	.word	0x0000fbfd

0001051c <SERCOM0_1_Handler>:
   1051c:	4b00      	ldr	r3, [pc, #0]	; (10520 <SERCOM0_1_Handler+0x4>)
   1051e:	4718      	bx	r3
   10520:	0001050d 	.word	0x0001050d

00010524 <SERCOM0_2_Handler>:
   10524:	4b00      	ldr	r3, [pc, #0]	; (10528 <SERCOM0_2_Handler+0x4>)
   10526:	4718      	bx	r3
   10528:	0001050d 	.word	0x0001050d

0001052c <SERCOM0_3_Handler>:
   1052c:	4b00      	ldr	r3, [pc, #0]	; (10530 <SERCOM0_3_Handler+0x4>)
   1052e:	4718      	bx	r3
   10530:	0001050d 	.word	0x0001050d

00010534 <SERCOM1_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom1_dev);
   10534:	4b01      	ldr	r3, [pc, #4]	; (1053c <SERCOM1_0_Handler+0x8>)
   10536:	6858      	ldr	r0, [r3, #4]
   10538:	4b01      	ldr	r3, [pc, #4]	; (10540 <SERCOM1_0_Handler+0xc>)
   1053a:	4718      	bx	r3
   1053c:	20001074 	.word	0x20001074
   10540:	0000fbfd 	.word	0x0000fbfd

00010544 <SERCOM1_1_Handler>:
   10544:	4b00      	ldr	r3, [pc, #0]	; (10548 <SERCOM1_1_Handler+0x4>)
   10546:	4718      	bx	r3
   10548:	00010535 	.word	0x00010535

0001054c <SERCOM1_2_Handler>:
   1054c:	4b00      	ldr	r3, [pc, #0]	; (10550 <SERCOM1_2_Handler+0x4>)
   1054e:	4718      	bx	r3
   10550:	00010535 	.word	0x00010535

00010554 <SERCOM1_3_Handler>:
   10554:	4b00      	ldr	r3, [pc, #0]	; (10558 <SERCOM1_3_Handler+0x4>)
   10556:	4718      	bx	r3
   10558:	00010535 	.word	0x00010535

0001055c <SERCOM3_0_Handler>:
	_spi_handler(_sercom3_dev);
   1055c:	4b0f      	ldr	r3, [pc, #60]	; (1059c <SERCOM3_0_Handler+0x40>)
   1055e:	6898      	ldr	r0, [r3, #8]
	void *                      hw = dev->prvt;
   10560:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
   10562:	7e13      	ldrb	r3, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
   10564:	7d91      	ldrb	r1, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
   10566:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
   10568:	07d9      	lsls	r1, r3, #31
   1056a:	d501      	bpl.n	10570 <SERCOM3_0_Handler+0x14>
		dev->callbacks.tx(dev);
   1056c:	6883      	ldr	r3, [r0, #8]
		dev->callbacks.rx(dev);
   1056e:	4718      	bx	r3
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
   10570:	0759      	lsls	r1, r3, #29
   10572:	d501      	bpl.n	10578 <SERCOM3_0_Handler+0x1c>
		dev->callbacks.rx(dev);
   10574:	68c3      	ldr	r3, [r0, #12]
   10576:	e7fa      	b.n	1056e <SERCOM3_0_Handler+0x12>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
   10578:	0799      	lsls	r1, r3, #30
   1057a:	d503      	bpl.n	10584 <SERCOM3_0_Handler+0x28>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
   1057c:	2302      	movs	r3, #2
   1057e:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
   10580:	6903      	ldr	r3, [r0, #16]
   10582:	e7f4      	b.n	1056e <SERCOM3_0_Handler+0x12>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
   10584:	061b      	lsls	r3, r3, #24
   10586:	d507      	bpl.n	10598 <SERCOM3_0_Handler+0x3c>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
   10588:	2304      	movs	r3, #4
   1058a:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
   1058c:	2380      	movs	r3, #128	; 0x80
   1058e:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
   10590:	f06f 0112 	mvn.w	r1, #18
   10594:	6943      	ldr	r3, [r0, #20]
   10596:	4718      	bx	r3
}
   10598:	4770      	bx	lr
   1059a:	bf00      	nop
   1059c:	20001074 	.word	0x20001074

000105a0 <SERCOM3_1_Handler>:
   105a0:	4b00      	ldr	r3, [pc, #0]	; (105a4 <SERCOM3_1_Handler+0x4>)
   105a2:	4718      	bx	r3
   105a4:	0001055d 	.word	0x0001055d

000105a8 <SERCOM3_2_Handler>:
   105a8:	4b00      	ldr	r3, [pc, #0]	; (105ac <SERCOM3_2_Handler+0x4>)
   105aa:	4718      	bx	r3
   105ac:	0001055d 	.word	0x0001055d

000105b0 <SERCOM3_3_Handler>:
   105b0:	4b00      	ldr	r3, [pc, #0]	; (105b4 <SERCOM3_3_Handler+0x4>)
   105b2:	4718      	bx	r3
   105b4:	0001055d 	.word	0x0001055d

000105b8 <SERCOM4_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom4_dev);
   105b8:	4b01      	ldr	r3, [pc, #4]	; (105c0 <SERCOM4_0_Handler+0x8>)
   105ba:	68d8      	ldr	r0, [r3, #12]
   105bc:	4b01      	ldr	r3, [pc, #4]	; (105c4 <SERCOM4_0_Handler+0xc>)
   105be:	4718      	bx	r3
   105c0:	20001074 	.word	0x20001074
   105c4:	0000fbfd 	.word	0x0000fbfd

000105c8 <SERCOM4_1_Handler>:
   105c8:	4b00      	ldr	r3, [pc, #0]	; (105cc <SERCOM4_1_Handler+0x4>)
   105ca:	4718      	bx	r3
   105cc:	000105b9 	.word	0x000105b9

000105d0 <SERCOM4_2_Handler>:
   105d0:	4b00      	ldr	r3, [pc, #0]	; (105d4 <SERCOM4_2_Handler+0x4>)
   105d2:	4718      	bx	r3
   105d4:	000105b9 	.word	0x000105b9

000105d8 <SERCOM4_3_Handler>:
   105d8:	4b00      	ldr	r3, [pc, #0]	; (105dc <SERCOM4_3_Handler+0x4>)
   105da:	4718      	bx	r3
   105dc:	000105b9 	.word	0x000105b9

000105e0 <SERCOM5_0_Handler>:
	_sercom_i2c_m_irq_handler(_sercom5_dev);
   105e0:	4b1f      	ldr	r3, [pc, #124]	; (10660 <SERCOM5_0_Handler+0x80>)
	ASSERT(i2c_dev);
   105e2:	4920      	ldr	r1, [pc, #128]	; (10664 <SERCOM5_0_Handler+0x84>)
{
   105e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
   105e8:	691c      	ldr	r4, [r3, #16]
	ASSERT(i2c_dev);
   105ea:	4f1f      	ldr	r7, [pc, #124]	; (10668 <SERCOM5_0_Handler+0x88>)
	void *   hw    = i2c_dev->hw;
   105ec:	6926      	ldr	r6, [r4, #16]
	ASSERT(i2c_dev);
   105ee:	f240 425f 	movw	r2, #1119	; 0x45f
   105f2:	2001      	movs	r0, #1
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
   105f4:	7e35      	ldrb	r5, [r6, #24]
   105f6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
   105f8:	6920      	ldr	r0, [r4, #16]
   105fa:	491a      	ldr	r1, [pc, #104]	; (10664 <SERCOM5_0_Handler+0x84>)
   105fc:	3800      	subs	r0, #0
   105fe:	bf18      	it	ne
   10600:	2001      	movne	r0, #1
   10602:	b2ed      	uxtb	r5, r5
   10604:	f44f 628c 	mov.w	r2, #1120	; 0x460
   10608:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
   1060a:	0629      	lsls	r1, r5, #24
   1060c:	d415      	bmi.n	1063a <SERCOM5_0_Handler+0x5a>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
   1060e:	4629      	mov	r1, r5
   10610:	4b16      	ldr	r3, [pc, #88]	; (1066c <SERCOM5_0_Handler+0x8c>)
   10612:	4622      	mov	r2, r4
   10614:	4630      	mov	r0, r6
   10616:	4798      	blx	r3
		if (ret != 0) {
   10618:	4601      	mov	r1, r0
   1061a:	b978      	cbnz	r0, 1063c <SERCOM5_0_Handler+0x5c>
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
   1061c:	07ea      	lsls	r2, r5, #31
   1061e:	d505      	bpl.n	1062c <SERCOM5_0_Handler+0x4c>
   10620:	69a3      	ldr	r3, [r4, #24]
   10622:	b11b      	cbz	r3, 1062c <SERCOM5_0_Handler+0x4c>
			i2c_dev->cb.rx_complete(i2c_dev);
   10624:	4620      	mov	r0, r4
}
   10626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			i2c_dev->cb.rx_complete(i2c_dev);
   1062a:	4718      	bx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
   1062c:	07ab      	lsls	r3, r5, #30
   1062e:	d502      	bpl.n	10636 <SERCOM5_0_Handler+0x56>
   10630:	69e3      	ldr	r3, [r4, #28]
   10632:	2b00      	cmp	r3, #0
   10634:	d1f6      	bne.n	10624 <SERCOM5_0_Handler+0x44>
}
   10636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int32_t  ret   = I2C_OK;
   1063a:	2100      	movs	r1, #0
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
   1063c:	8863      	ldrh	r3, [r4, #2]
   1063e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10642:	041b      	lsls	r3, r3, #16
   10644:	0c1b      	lsrs	r3, r3, #16
   10646:	8063      	strh	r3, [r4, #2]
	if (i2c_dev->cb.error) {
   10648:	6963      	ldr	r3, [r4, #20]
   1064a:	2b00      	cmp	r3, #0
   1064c:	d0f3      	beq.n	10636 <SERCOM5_0_Handler+0x56>
		if (ret != I2C_OK) {
   1064e:	b121      	cbz	r1, 1065a <SERCOM5_0_Handler+0x7a>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
   10650:	4620      	mov	r0, r4
   10652:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
   10654:	2380      	movs	r3, #128	; 0x80
   10656:	7633      	strb	r3, [r6, #24]
}
   10658:	e7ed      	b.n	10636 <SERCOM5_0_Handler+0x56>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
   1065a:	f06f 0104 	mvn.w	r1, #4
   1065e:	e7f7      	b.n	10650 <SERCOM5_0_Handler+0x70>
   10660:	20001074 	.word	0x20001074
   10664:	00015158 	.word	0x00015158
   10668:	0000cb4d 	.word	0x0000cb4d
   1066c:	0000fe11 	.word	0x0000fe11

00010670 <SERCOM5_1_Handler>:
   10670:	4b00      	ldr	r3, [pc, #0]	; (10674 <SERCOM5_1_Handler+0x4>)
   10672:	4718      	bx	r3
   10674:	000105e1 	.word	0x000105e1

00010678 <SERCOM5_2_Handler>:
   10678:	4b00      	ldr	r3, [pc, #0]	; (1067c <SERCOM5_2_Handler+0x4>)
   1067a:	4718      	bx	r3
   1067c:	000105e1 	.word	0x000105e1

00010680 <SERCOM5_3_Handler>:
   10680:	4b00      	ldr	r3, [pc, #0]	; (10684 <SERCOM5_3_Handler+0x4>)
   10682:	4718      	bx	r3
   10684:	000105e1 	.word	0x000105e1

00010688 <SERCOM6_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom6_dev);
   10688:	4b01      	ldr	r3, [pc, #4]	; (10690 <SERCOM6_0_Handler+0x8>)
   1068a:	6958      	ldr	r0, [r3, #20]
   1068c:	4b01      	ldr	r3, [pc, #4]	; (10694 <SERCOM6_0_Handler+0xc>)
   1068e:	4718      	bx	r3
   10690:	20001074 	.word	0x20001074
   10694:	0000fbfd 	.word	0x0000fbfd

00010698 <SERCOM6_1_Handler>:
   10698:	4b00      	ldr	r3, [pc, #0]	; (1069c <SERCOM6_1_Handler+0x4>)
   1069a:	4718      	bx	r3
   1069c:	00010689 	.word	0x00010689

000106a0 <SERCOM6_2_Handler>:
   106a0:	4b00      	ldr	r3, [pc, #0]	; (106a4 <SERCOM6_2_Handler+0x4>)
   106a2:	4718      	bx	r3
   106a4:	00010689 	.word	0x00010689

000106a8 <SERCOM6_3_Handler>:
   106a8:	4b00      	ldr	r3, [pc, #0]	; (106ac <SERCOM6_3_Handler+0x4>)
   106aa:	4718      	bx	r3
   106ac:	00010689 	.word	0x00010689

000106b0 <_spi_m_sync_init>:
{
   106b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   106b4:	4b37      	ldr	r3, [pc, #220]	; (10794 <_spi_m_sync_init+0xe4>)
{
   106b6:	4606      	mov	r6, r0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   106b8:	4608      	mov	r0, r1
{
   106ba:	460c      	mov	r4, r1
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   106bc:	4798      	blx	r3
   106be:	4605      	mov	r5, r0
	ASSERT(dev && hw);
   106c0:	2e00      	cmp	r6, #0
   106c2:	d05d      	beq.n	10780 <_spi_m_sync_init+0xd0>
   106c4:	1e20      	subs	r0, r4, #0
   106c6:	bf18      	it	ne
   106c8:	2001      	movne	r0, #1
   106ca:	4f33      	ldr	r7, [pc, #204]	; (10798 <_spi_m_sync_init+0xe8>)
   106cc:	4933      	ldr	r1, [pc, #204]	; (1079c <_spi_m_sync_init+0xec>)
   106ce:	f640 2278 	movw	r2, #2680	; 0xa78
   106d2:	47b8      	blx	r7
	if (regs == NULL) {
   106d4:	46b9      	mov	r9, r7
   106d6:	2d00      	cmp	r5, #0
   106d8:	d058      	beq.n	1078c <_spi_m_sync_init+0xdc>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   106da:	69e3      	ldr	r3, [r4, #28]
   106dc:	4f30      	ldr	r7, [pc, #192]	; (107a0 <_spi_m_sync_init+0xf0>)
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   106de:	f013 0f01 	tst.w	r3, #1
   106e2:	d113      	bne.n	1070c <_spi_m_sync_init+0x5c>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   106e4:	2103      	movs	r1, #3
   106e6:	4620      	mov	r0, r4
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   106e8:	f8d5 8000 	ldr.w	r8, [r5]
   106ec:	47b8      	blx	r7
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
   106ee:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   106f0:	079b      	lsls	r3, r3, #30
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   106f2:	f008 081c 	and.w	r8, r8, #28
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   106f6:	d503      	bpl.n	10700 <_spi_m_sync_init+0x50>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
   106f8:	4b2a      	ldr	r3, [pc, #168]	; (107a4 <_spi_m_sync_init+0xf4>)
   106fa:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
   106fc:	2102      	movs	r1, #2
   106fe:	47b8      	blx	r7
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
   10700:	f048 0301 	orr.w	r3, r8, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10704:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10706:	2103      	movs	r1, #3
   10708:	4620      	mov	r0, r4
   1070a:	47b8      	blx	r7
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
   1070c:	2101      	movs	r1, #1
   1070e:	4620      	mov	r0, r4
   10710:	47b8      	blx	r7
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
   10712:	682b      	ldr	r3, [r5, #0]
	dev->prvt = hw;
   10714:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
   10716:	f003 031c 	and.w	r3, r3, #28
   1071a:	2b08      	cmp	r3, #8
   1071c:	d132      	bne.n	10784 <_spi_m_sync_init+0xd4>
	ASSERT(hw && regs);
   1071e:	f640 128e 	movw	r2, #2446	; 0x98e
   10722:	491e      	ldr	r1, [pc, #120]	; (1079c <_spi_m_sync_init+0xec>)
   10724:	2001      	movs	r0, #1
   10726:	47c8      	blx	r9
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
   10728:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
   1072a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
   1072e:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10732:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10734:	2103      	movs	r1, #3
   10736:	4620      	mov	r0, r4
   10738:	47b8      	blx	r7
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
   1073a:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
   1073c:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
   10740:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
   10744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10748:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
   1074c:	6063      	str	r3, [r4, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   1074e:	2117      	movs	r1, #23
   10750:	47b8      	blx	r7
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
   10752:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
   10754:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
   10756:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
   10758:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   1075c:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
   1075e:	2b00      	cmp	r3, #0
   10760:	d1fc      	bne.n	1075c <_spi_m_sync_init+0xac>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
   10762:	686b      	ldr	r3, [r5, #4]
   10764:	f013 0f07 	tst.w	r3, #7
   10768:	bf0c      	ite	eq
   1076a:	2301      	moveq	r3, #1
   1076c:	2302      	movne	r3, #2
   1076e:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
   10770:	7bab      	ldrb	r3, [r5, #14]
   10772:	7bea      	ldrb	r2, [r5, #15]
   10774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10778:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
   1077a:	2000      	movs	r0, #0
}
   1077c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(dev && hw);
   10780:	4630      	mov	r0, r6
   10782:	e7a2      	b.n	106ca <_spi_m_sync_init+0x1a>
		_spi_load_regs_master(hw, regs);
   10784:	4b08      	ldr	r3, [pc, #32]	; (107a8 <_spi_m_sync_init+0xf8>)
   10786:	4629      	mov	r1, r5
   10788:	4798      	blx	r3
   1078a:	e7ea      	b.n	10762 <_spi_m_sync_init+0xb2>
		return ERR_INVALID_ARG;
   1078c:	f06f 000c 	mvn.w	r0, #12
   10790:	e7f4      	b.n	1077c <_spi_m_sync_init+0xcc>
   10792:	bf00      	nop
   10794:	0000fd09 	.word	0x0000fd09
   10798:	0000cb4d 	.word	0x0000cb4d
   1079c:	00015158 	.word	0x00015158
   107a0:	0000fb4d 	.word	0x0000fb4d
   107a4:	0000fb71 	.word	0x0000fb71
   107a8:	00010025 	.word	0x00010025

000107ac <_spi_m_async_init>:
{
   107ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
   107ae:	4b10      	ldr	r3, [pc, #64]	; (107f0 <_spi_m_async_init+0x44>)
{
   107b0:	4605      	mov	r5, r0
   107b2:	460e      	mov	r6, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
   107b4:	4798      	blx	r3
	if (rc < 0) {
   107b6:	2800      	cmp	r0, #0
   107b8:	db17      	blt.n	107ea <_spi_m_async_init+0x3e>
	_sercom_init_irq_param(hw, (void *)dev);
   107ba:	4629      	mov	r1, r5
	spid->callbacks.complete = NULL;
   107bc:	2400      	movs	r4, #0
	_sercom_init_irq_param(hw, (void *)dev);
   107be:	4630      	mov	r0, r6
   107c0:	4b0c      	ldr	r3, [pc, #48]	; (107f4 <_spi_m_async_init+0x48>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   107c2:	4e0d      	ldr	r6, [pc, #52]	; (107f8 <_spi_m_async_init+0x4c>)
	_sercom_init_irq_param(hw, (void *)dev);
   107c4:	4798      	blx	r3
	spid->callbacks.rx       = NULL;
   107c6:	e9c5 4403 	strd	r4, r4, [r5, #12]
	spid->callbacks.tx       = NULL;
   107ca:	60ac      	str	r4, [r5, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
   107cc:	4b0b      	ldr	r3, [pc, #44]	; (107fc <_spi_m_async_init+0x50>)
   107ce:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   107d0:	4621      	mov	r1, r4
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   107d2:	4c0b      	ldr	r4, [pc, #44]	; (10800 <_spi_m_async_init+0x54>)
	uint8_t irq              = _sercom_get_irq_num(hw);
   107d4:	4605      	mov	r5, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   107d6:	186b      	adds	r3, r5, r1
   107d8:	b2d8      	uxtb	r0, r3
   107da:	9001      	str	r0, [sp, #4]
   107dc:	47b0      	blx	r6
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   107de:	9801      	ldr	r0, [sp, #4]
   107e0:	47a0      	blx	r4
	for (uint32_t i = 0; i < 4; i++) {
   107e2:	3101      	adds	r1, #1
   107e4:	2904      	cmp	r1, #4
   107e6:	d1f6      	bne.n	107d6 <_spi_m_async_init+0x2a>
   107e8:	2000      	movs	r0, #0
}
   107ea:	b002      	add	sp, #8
   107ec:	bd70      	pop	{r4, r5, r6, pc}
   107ee:	bf00      	nop
   107f0:	000106b1 	.word	0x000106b1
   107f4:	0000fc6d 	.word	0x0000fc6d
   107f8:	0000fd91 	.word	0x0000fd91
   107fc:	0000fccd 	.word	0x0000fccd
   10800:	0000fdb5 	.word	0x0000fdb5

00010804 <_spi_m_async_enable>:
{
   10804:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   10806:	4604      	mov	r4, r0
   10808:	b118      	cbz	r0, 10812 <_spi_m_async_enable+0xe>
   1080a:	6800      	ldr	r0, [r0, #0]
   1080c:	3800      	subs	r0, #0
   1080e:	bf18      	it	ne
   10810:	2001      	movne	r0, #1
   10812:	4b05      	ldr	r3, [pc, #20]	; (10828 <_spi_m_async_enable+0x24>)
   10814:	4905      	ldr	r1, [pc, #20]	; (1082c <_spi_m_async_enable+0x28>)
   10816:	f640 22e5 	movw	r2, #2789	; 0xae5
   1081a:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
   1081c:	6820      	ldr	r0, [r4, #0]
   1081e:	4b04      	ldr	r3, [pc, #16]	; (10830 <_spi_m_async_enable+0x2c>)
}
   10820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _spi_async_enable(dev->prvt);
   10824:	4718      	bx	r3
   10826:	bf00      	nop
   10828:	0000cb4d 	.word	0x0000cb4d
   1082c:	00015158 	.word	0x00015158
   10830:	0000fd61 	.word	0x0000fd61

00010834 <_spi_m_async_set_mode>:
{
   10834:	b570      	push	{r4, r5, r6, lr}
   10836:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   10838:	4604      	mov	r4, r0
   1083a:	b118      	cbz	r0, 10844 <_spi_m_async_set_mode+0x10>
   1083c:	6800      	ldr	r0, [r0, #0]
   1083e:	3800      	subs	r0, #0
   10840:	bf18      	it	ne
   10842:	2001      	movne	r0, #1
   10844:	4905      	ldr	r1, [pc, #20]	; (1085c <_spi_m_async_set_mode+0x28>)
   10846:	4b06      	ldr	r3, [pc, #24]	; (10860 <_spi_m_async_set_mode+0x2c>)
   10848:	f640 3216 	movw	r2, #2838	; 0xb16
   1084c:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
   1084e:	6820      	ldr	r0, [r4, #0]
   10850:	4b04      	ldr	r3, [pc, #16]	; (10864 <_spi_m_async_set_mode+0x30>)
   10852:	4629      	mov	r1, r5
}
   10854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_set_mode(dev->prvt, mode);
   10858:	4718      	bx	r3
   1085a:	bf00      	nop
   1085c:	00015158 	.word	0x00015158
   10860:	0000cb4d 	.word	0x0000cb4d
   10864:	0000fff1 	.word	0x0000fff1

00010868 <_spi_m_async_set_baudrate>:
{
   10868:	b538      	push	{r3, r4, r5, lr}
   1086a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   1086c:	4604      	mov	r4, r0
   1086e:	b118      	cbz	r0, 10878 <_spi_m_async_set_baudrate+0x10>
   10870:	6800      	ldr	r0, [r0, #0]
   10872:	3800      	subs	r0, #0
   10874:	bf18      	it	ne
   10876:	2001      	movne	r0, #1
   10878:	4907      	ldr	r1, [pc, #28]	; (10898 <_spi_m_async_set_baudrate+0x30>)
   1087a:	4b08      	ldr	r3, [pc, #32]	; (1089c <_spi_m_async_set_baudrate+0x34>)
   1087c:	f640 3245 	movw	r2, #2885	; 0xb45
   10880:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
   10882:	6823      	ldr	r3, [r4, #0]
   10884:	69d8      	ldr	r0, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   10886:	f010 0001 	ands.w	r0, r0, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
   1088a:	bf06      	itte	eq
   1088c:	b2ed      	uxtbeq	r5, r5
	((Sercom *)hw)->SPI.BAUD.reg = data;
   1088e:	731d      	strbeq	r5, [r3, #12]
		return ERR_BUSY;
   10890:	f06f 0003 	mvnne.w	r0, #3
}
   10894:	bd38      	pop	{r3, r4, r5, pc}
   10896:	bf00      	nop
   10898:	00015158 	.word	0x00015158
   1089c:	0000cb4d 	.word	0x0000cb4d

000108a0 <_spi_m_async_enable_tx>:
{
   108a0:	b538      	push	{r3, r4, r5, lr}
	void *hw = dev->prvt;
   108a2:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
   108a4:	4b07      	ldr	r3, [pc, #28]	; (108c4 <_spi_m_async_enable_tx+0x24>)
   108a6:	1e20      	subs	r0, r4, #0
{
   108a8:	460d      	mov	r5, r1
	ASSERT(dev && hw);
   108aa:	f640 4208 	movw	r2, #3080	; 0xc08
   108ae:	4906      	ldr	r1, [pc, #24]	; (108c8 <_spi_m_async_enable_tx+0x28>)
   108b0:	bf18      	it	ne
   108b2:	2001      	movne	r0, #1
   108b4:	4798      	blx	r3
	if (state) {
   108b6:	2301      	movs	r3, #1
   108b8:	b115      	cbz	r5, 108c0 <_spi_m_async_enable_tx+0x20>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
   108ba:	75a3      	strb	r3, [r4, #22]
}
   108bc:	2000      	movs	r0, #0
   108be:	bd38      	pop	{r3, r4, r5, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
   108c0:	7523      	strb	r3, [r4, #20]
}
   108c2:	e7fb      	b.n	108bc <_spi_m_async_enable_tx+0x1c>
   108c4:	0000cb4d 	.word	0x0000cb4d
   108c8:	00015158 	.word	0x00015158

000108cc <_spi_m_async_enable_rx>:
{
   108cc:	b570      	push	{r4, r5, r6, lr}
	void *hw = dev->prvt;
   108ce:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
   108d0:	4e0a      	ldr	r6, [pc, #40]	; (108fc <_spi_m_async_enable_rx+0x30>)
   108d2:	f640 421c 	movw	r2, #3100	; 0xc1c
   108d6:	2001      	movs	r0, #1
{
   108d8:	460d      	mov	r5, r1
	ASSERT(dev);
   108da:	4909      	ldr	r1, [pc, #36]	; (10900 <_spi_m_async_enable_rx+0x34>)
   108dc:	47b0      	blx	r6
	ASSERT(hw);
   108de:	1e20      	subs	r0, r4, #0
   108e0:	4907      	ldr	r1, [pc, #28]	; (10900 <_spi_m_async_enable_rx+0x34>)
   108e2:	f640 421d 	movw	r2, #3101	; 0xc1d
   108e6:	bf18      	it	ne
   108e8:	2001      	movne	r0, #1
   108ea:	47b0      	blx	r6
	if (state) {
   108ec:	2304      	movs	r3, #4
   108ee:	b115      	cbz	r5, 108f6 <_spi_m_async_enable_rx+0x2a>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
   108f0:	75a3      	strb	r3, [r4, #22]
}
   108f2:	2000      	movs	r0, #0
   108f4:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
   108f6:	7523      	strb	r3, [r4, #20]
}
   108f8:	e7fb      	b.n	108f2 <_spi_m_async_enable_rx+0x26>
   108fa:	bf00      	nop
   108fc:	0000cb4d 	.word	0x0000cb4d
   10900:	00015158 	.word	0x00015158

00010904 <_spi_m_async_enable_tx_complete>:
{
   10904:	b538      	push	{r3, r4, r5, lr}
   10906:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   10908:	4604      	mov	r4, r0
   1090a:	b118      	cbz	r0, 10914 <_spi_m_async_enable_tx_complete+0x10>
   1090c:	6800      	ldr	r0, [r0, #0]
   1090e:	3800      	subs	r0, #0
   10910:	bf18      	it	ne
   10912:	2001      	movne	r0, #1
   10914:	4b06      	ldr	r3, [pc, #24]	; (10930 <_spi_m_async_enable_tx_complete+0x2c>)
   10916:	4907      	ldr	r1, [pc, #28]	; (10934 <_spi_m_async_enable_tx_complete+0x30>)
   10918:	f640 422f 	movw	r2, #3119	; 0xc2f
   1091c:	4798      	blx	r3
	if (state) {
   1091e:	6823      	ldr	r3, [r4, #0]
   10920:	2202      	movs	r2, #2
   10922:	b115      	cbz	r5, 1092a <_spi_m_async_enable_tx_complete+0x26>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
   10924:	759a      	strb	r2, [r3, #22]
}
   10926:	2000      	movs	r0, #0
   10928:	bd38      	pop	{r3, r4, r5, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
   1092a:	751a      	strb	r2, [r3, #20]
}
   1092c:	e7fb      	b.n	10926 <_spi_m_async_enable_tx_complete+0x22>
   1092e:	bf00      	nop
   10930:	0000cb4d 	.word	0x0000cb4d
   10934:	00015158 	.word	0x00015158

00010938 <_spi_m_async_write_one>:
{
   10938:	b538      	push	{r3, r4, r5, lr}
   1093a:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   1093c:	4604      	mov	r4, r0
   1093e:	b118      	cbz	r0, 10948 <_spi_m_async_write_one+0x10>
   10940:	6800      	ldr	r0, [r0, #0]
   10942:	3800      	subs	r0, #0
   10944:	bf18      	it	ne
   10946:	2001      	movne	r0, #1
   10948:	4904      	ldr	r1, [pc, #16]	; (1095c <_spi_m_async_write_one+0x24>)
   1094a:	4b05      	ldr	r3, [pc, #20]	; (10960 <_spi_m_async_write_one+0x28>)
   1094c:	f640 4241 	movw	r2, #3137	; 0xc41
   10950:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
   10952:	6823      	ldr	r3, [r4, #0]
}
   10954:	2000      	movs	r0, #0
	((Sercom *)hw)->SPI.DATA.reg = data;
   10956:	629d      	str	r5, [r3, #40]	; 0x28
   10958:	bd38      	pop	{r3, r4, r5, pc}
   1095a:	bf00      	nop
   1095c:	00015158 	.word	0x00015158
   10960:	0000cb4d 	.word	0x0000cb4d

00010964 <_spi_m_async_read_one>:
{
   10964:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   10966:	4604      	mov	r4, r0
   10968:	b118      	cbz	r0, 10972 <_spi_m_async_read_one+0xe>
   1096a:	6800      	ldr	r0, [r0, #0]
   1096c:	3800      	subs	r0, #0
   1096e:	bf18      	it	ne
   10970:	2001      	movne	r0, #1
   10972:	4904      	ldr	r1, [pc, #16]	; (10984 <_spi_m_async_read_one+0x20>)
   10974:	4b04      	ldr	r3, [pc, #16]	; (10988 <_spi_m_async_read_one+0x24>)
   10976:	f640 425c 	movw	r2, #3164	; 0xc5c
   1097a:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
   1097c:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
   1097e:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
   10980:	b280      	uxth	r0, r0
   10982:	bd10      	pop	{r4, pc}
   10984:	00015158 	.word	0x00015158
   10988:	0000cb4d 	.word	0x0000cb4d

0001098c <_spi_m_async_register_callback>:
{
   1098c:	b570      	push	{r4, r5, r6, lr}
   1098e:	460d      	mov	r5, r1
   10990:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
   10992:	4604      	mov	r4, r0
   10994:	b118      	cbz	r0, 1099e <_spi_m_async_register_callback+0x12>
   10996:	2903      	cmp	r1, #3
   10998:	bf8c      	ite	hi
   1099a:	2000      	movhi	r0, #0
   1099c:	2001      	movls	r0, #1
   1099e:	4905      	ldr	r1, [pc, #20]	; (109b4 <_spi_m_async_register_callback+0x28>)
   109a0:	4b05      	ldr	r3, [pc, #20]	; (109b8 <_spi_m_async_register_callback+0x2c>)
   109a2:	f640 4275 	movw	r2, #3189	; 0xc75
   109a6:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
   109a8:	eb04 0185 	add.w	r1, r4, r5, lsl #2
}
   109ac:	2000      	movs	r0, #0
	p_ls[cb_type] = (func_t)func;
   109ae:	608e      	str	r6, [r1, #8]
}
   109b0:	bd70      	pop	{r4, r5, r6, pc}
   109b2:	bf00      	nop
   109b4:	00015158 	.word	0x00015158
   109b8:	0000cb4d 	.word	0x0000cb4d

000109bc <_spi_m_async_set_irq_state>:
{
   109bc:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   109be:	4604      	mov	r4, r0
   109c0:	3800      	subs	r0, #0
{
   109c2:	460e      	mov	r6, r1
	ASSERT(device);
   109c4:	bf18      	it	ne
   109c6:	2001      	movne	r0, #1
   109c8:	4907      	ldr	r1, [pc, #28]	; (109e8 <_spi_m_async_set_irq_state+0x2c>)
   109ca:	4b08      	ldr	r3, [pc, #32]	; (109ec <_spi_m_async_set_irq_state+0x30>)
{
   109cc:	4615      	mov	r5, r2
	ASSERT(device);
   109ce:	f640 42b6 	movw	r2, #3254	; 0xcb6
   109d2:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
   109d4:	2e03      	cmp	r6, #3
   109d6:	d103      	bne.n	109e0 <_spi_m_async_set_irq_state+0x24>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
   109d8:	6823      	ldr	r3, [r4, #0]
	if (value == 0x0) {
   109da:	2280      	movs	r2, #128	; 0x80
   109dc:	b90d      	cbnz	r5, 109e2 <_spi_m_async_set_irq_state+0x26>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
   109de:	751a      	strb	r2, [r3, #20]
}
   109e0:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
   109e2:	759a      	strb	r2, [r3, #22]
   109e4:	e7fc      	b.n	109e0 <_spi_m_async_set_irq_state+0x24>
   109e6:	bf00      	nop
   109e8:	00015158 	.word	0x00015158
   109ec:	0000cb4d 	.word	0x0000cb4d

000109f0 <_spi_m_dma_init>:

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
   109f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   109f4:	4b25      	ldr	r3, [pc, #148]	; (10a8c <_spi_m_dma_init+0x9c>)
{
   109f6:	4605      	mov	r5, r0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   109f8:	4608      	mov	r0, r1
{
   109fa:	460c      	mov	r4, r1
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   109fc:	4798      	blx	r3
   109fe:	4606      	mov	r6, r0

	ASSERT(dev && hw);
   10a00:	2d00      	cmp	r5, #0
   10a02:	d03e      	beq.n	10a82 <_spi_m_dma_init+0x92>
   10a04:	1e20      	subs	r0, r4, #0
   10a06:	bf18      	it	ne
   10a08:	2001      	movne	r0, #1
   10a0a:	4921      	ldr	r1, [pc, #132]	; (10a90 <_spi_m_dma_init+0xa0>)
   10a0c:	4b21      	ldr	r3, [pc, #132]	; (10a94 <_spi_m_dma_init+0xa4>)
   10a0e:	f640 52e3 	movw	r2, #3555	; 0xde3
   10a12:	4798      	blx	r3

	if (regs == NULL) {
   10a14:	2e00      	cmp	r6, #0
   10a16:	d036      	beq.n	10a86 <_spi_m_dma_init+0x96>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   10a18:	69e3      	ldr	r3, [r4, #28]
   10a1a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 10ab0 <_spi_m_dma_init+0xc0>
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   10a1e:	f013 0f01 	tst.w	r3, #1
   10a22:	d112      	bne.n	10a4a <_spi_m_dma_init+0x5a>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10a24:	2103      	movs	r1, #3
   10a26:	4620      	mov	r0, r4
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   10a28:	6837      	ldr	r7, [r6, #0]
   10a2a:	47c0      	blx	r8
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
   10a2c:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   10a2e:	079b      	lsls	r3, r3, #30
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   10a30:	f007 071c 	and.w	r7, r7, #28
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   10a34:	d503      	bpl.n	10a3e <_spi_m_dma_init+0x4e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
   10a36:	4b18      	ldr	r3, [pc, #96]	; (10a98 <_spi_m_dma_init+0xa8>)
   10a38:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
   10a3a:	2102      	movs	r1, #2
   10a3c:	47c0      	blx	r8
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
   10a3e:	f047 0701 	orr.w	r7, r7, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10a42:	6027      	str	r7, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10a44:	2103      	movs	r1, #3
   10a46:	4620      	mov	r0, r4
   10a48:	47c0      	blx	r8
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
   10a4a:	462f      	mov	r7, r5
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
   10a4c:	4620      	mov	r0, r4
   10a4e:	2101      	movs	r1, #1
   10a50:	47c0      	blx	r8

	_spi_load_regs_master(hw, regs);
   10a52:	4631      	mov	r1, r6
	dev->prvt = hw;
   10a54:	f847 4b18 	str.w	r4, [r7], #24
	_spi_load_regs_master(hw, regs);
   10a58:	4b10      	ldr	r3, [pc, #64]	; (10a9c <_spi_m_dma_init+0xac>)
   10a5a:	4798      	blx	r3
	uint8_t index = _sercom_get_hardware_index(hw);
   10a5c:	4b10      	ldr	r3, [pc, #64]	; (10aa0 <_spi_m_dma_init+0xb0>)
   10a5e:	4620      	mov	r0, r4
   10a60:	4798      	blx	r3
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   10a62:	2807      	cmp	r0, #7
		dev->resource->back                 = dev;
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
   10a64:	4b0f      	ldr	r3, [pc, #60]	; (10aa4 <_spi_m_dma_init+0xb4>)
   10a66:	bf0c      	ite	eq
   10a68:	2108      	moveq	r1, #8
   10a6a:	2100      	movne	r1, #0
   10a6c:	4638      	mov	r0, r7
   10a6e:	4798      	blx	r3
	dev->resource->back                 = dev;
   10a70:	69ab      	ldr	r3, [r5, #24]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
   10a72:	4a0d      	ldr	r2, [pc, #52]	; (10aa8 <_spi_m_dma_init+0xb8>)
   10a74:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
   10a76:	4a0d      	ldr	r2, [pc, #52]	; (10aac <_spi_m_dma_init+0xbc>)
	dev->resource->back                 = dev;
   10a78:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
   10a7a:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
   10a7c:	2000      	movs	r0, #0
}
   10a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
   10a82:	4628      	mov	r0, r5
   10a84:	e7c1      	b.n	10a0a <_spi_m_dma_init+0x1a>
		return ERR_INVALID_ARG;
   10a86:	f06f 000c 	mvn.w	r0, #12
   10a8a:	e7f8      	b.n	10a7e <_spi_m_dma_init+0x8e>
   10a8c:	0000fd09 	.word	0x0000fd09
   10a90:	00015158 	.word	0x00015158
   10a94:	0000cb4d 	.word	0x0000cb4d
   10a98:	0000fb71 	.word	0x0000fb71
   10a9c:	00010025 	.word	0x00010025
   10aa0:	0000fbc5 	.word	0x0000fbc5
   10aa4:	0000cd91 	.word	0x0000cd91
   10aa8:	0000fd35 	.word	0x0000fd35
   10aac:	0000fd3f 	.word	0x0000fd3f
   10ab0:	0000fb4d 	.word	0x0000fb4d

00010ab4 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
   10ab4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   10ab6:	4604      	mov	r4, r0
   10ab8:	b118      	cbz	r0, 10ac2 <_spi_m_dma_enable+0xe>
   10aba:	6800      	ldr	r0, [r0, #0]
   10abc:	3800      	subs	r0, #0
   10abe:	bf18      	it	ne
   10ac0:	2001      	movne	r0, #1
   10ac2:	4b05      	ldr	r3, [pc, #20]	; (10ad8 <_spi_m_dma_enable+0x24>)
   10ac4:	4905      	ldr	r1, [pc, #20]	; (10adc <_spi_m_dma_enable+0x28>)
   10ac6:	f640 620e 	movw	r2, #3598	; 0xe0e
   10aca:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
   10acc:	6820      	ldr	r0, [r4, #0]
   10ace:	4b04      	ldr	r3, [pc, #16]	; (10ae0 <_spi_m_dma_enable+0x2c>)
}
   10ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _spi_sync_enable(dev->prvt);
   10ad4:	4718      	bx	r3
   10ad6:	bf00      	nop
   10ad8:	0000cb4d 	.word	0x0000cb4d
   10adc:	00015158 	.word	0x00015158
   10ae0:	0000fce1 	.word	0x0000fce1

00010ae4 <_spi_m_dma_register_callback>:
	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
	switch (type) {
   10ae4:	2901      	cmp	r1, #1
{
   10ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10ae8:	4605      	mov	r5, r0
   10aea:	460e      	mov	r6, r1
   10aec:	4614      	mov	r4, r2
	switch (type) {
   10aee:	d014      	beq.n	10b1a <_spi_m_dma_register_callback+0x36>
   10af0:	2902      	cmp	r1, #2
   10af2:	d020      	beq.n	10b36 <_spi_m_dma_register_callback+0x52>
   10af4:	2900      	cmp	r1, #0
   10af6:	d138      	bne.n	10b6a <_spi_m_dma_register_callback+0x86>
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
   10af8:	6042      	str	r2, [r0, #4]
	uint8_t index = _sercom_get_hardware_index(hw);
   10afa:	4b1d      	ldr	r3, [pc, #116]	; (10b70 <_spi_m_dma_register_callback+0x8c>)
   10afc:	6800      	ldr	r0, [r0, #0]
   10afe:	4798      	blx	r3
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   10b00:	2807      	cmp	r0, #7
   10b02:	bf08      	it	eq
   10b04:	2608      	moveq	r6, #8
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   10b06:	1e22      	subs	r2, r4, #0
   10b08:	bf18      	it	ne
   10b0a:	2201      	movne	r2, #1
   10b0c:	2100      	movs	r1, #0
   10b0e:	4630      	mov	r0, r6
		break;
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   10b10:	4b18      	ldr	r3, [pc, #96]	; (10b74 <_spi_m_dma_register_callback+0x90>)
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
		break;
	case SPI_DEV_CB_DMA_N:
		break;
	}
}
   10b12:	b002      	add	sp, #8
   10b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   10b18:	4718      	bx	r3
		dev->callbacks.rx = func;
   10b1a:	6082      	str	r2, [r0, #8]
	uint8_t index = _sercom_get_hardware_index(hw);
   10b1c:	4b14      	ldr	r3, [pc, #80]	; (10b70 <_spi_m_dma_register_callback+0x8c>)
   10b1e:	6800      	ldr	r0, [r0, #0]
   10b20:	4798      	blx	r3
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   10b22:	1e22      	subs	r2, r4, #0
   10b24:	bf18      	it	ne
   10b26:	2201      	movne	r2, #1
   10b28:	2807      	cmp	r0, #7
   10b2a:	f04f 0100 	mov.w	r1, #0
   10b2e:	bf8c      	ite	hi
   10b30:	2000      	movhi	r0, #0
   10b32:	2001      	movls	r0, #1
   10b34:	e7ec      	b.n	10b10 <_spi_m_dma_register_callback+0x2c>
		dev->callbacks.error = func;
   10b36:	60c2      	str	r2, [r0, #12]
	uint8_t index = _sercom_get_hardware_index(hw);
   10b38:	4e0d      	ldr	r6, [pc, #52]	; (10b70 <_spi_m_dma_register_callback+0x8c>)
   10b3a:	6800      	ldr	r0, [r0, #0]
   10b3c:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   10b3e:	1e22      	subs	r2, r4, #0
   10b40:	bf18      	it	ne
   10b42:	2201      	movne	r2, #1
   10b44:	2807      	cmp	r0, #7
   10b46:	bf8c      	ite	hi
   10b48:	2000      	movhi	r0, #0
   10b4a:	2001      	movls	r0, #1
   10b4c:	2101      	movs	r1, #1
   10b4e:	4c09      	ldr	r4, [pc, #36]	; (10b74 <_spi_m_dma_register_callback+0x90>)
   10b50:	9201      	str	r2, [sp, #4]
   10b52:	47a0      	blx	r4
	uint8_t index = _sercom_get_hardware_index(hw);
   10b54:	6828      	ldr	r0, [r5, #0]
   10b56:	47b0      	blx	r6
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   10b58:	2807      	cmp	r0, #7
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   10b5a:	9a01      	ldr	r2, [sp, #4]
   10b5c:	f04f 0101 	mov.w	r1, #1
   10b60:	bf0c      	ite	eq
   10b62:	2008      	moveq	r0, #8
   10b64:	2000      	movne	r0, #0
   10b66:	4623      	mov	r3, r4
   10b68:	e7d3      	b.n	10b12 <_spi_m_dma_register_callback+0x2e>
}
   10b6a:	b002      	add	sp, #8
   10b6c:	bd70      	pop	{r4, r5, r6, pc}
   10b6e:	bf00      	nop
   10b70:	0000fbc5 	.word	0x0000fbc5
   10b74:	0000ccad 	.word	0x0000ccad

00010b78 <_spi_m_dma_transfer>:

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
   10b78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
   10b7c:	f8d0 8000 	ldr.w	r8, [r0]
	uint8_t index = _sercom_get_hardware_index(hw);
   10b80:	f8df 911c 	ldr.w	r9, [pc, #284]	; 10ca0 <_spi_m_dma_transfer+0x128>
{
   10b84:	4605      	mov	r5, r0
   10b86:	461f      	mov	r7, r3
	uint8_t index = _sercom_get_hardware_index(hw);
   10b88:	4640      	mov	r0, r8
   10b8a:	4b3d      	ldr	r3, [pc, #244]	; (10c80 <_spi_m_dma_transfer+0x108>)
{
   10b8c:	460e      	mov	r6, r1
   10b8e:	4692      	mov	sl, r2
	uint8_t index = _sercom_get_hardware_index(hw);
   10b90:	4798      	blx	r3
	switch (index) {
   10b92:	2807      	cmp	r0, #7
   10b94:	4b3b      	ldr	r3, [pc, #236]	; (10c84 <_spi_m_dma_transfer+0x10c>)
   10b96:	d86a      	bhi.n	10c6e <_spi_m_dma_transfer+0xf6>
	switch (index) {
   10b98:	d06c      	beq.n	10c74 <_spi_m_dma_transfer+0xfc>
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
   10b9a:	f04f 0b01 	mov.w	fp, #1
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
   10b9e:	f1ba 0f00 	cmp.w	sl, #0
   10ba2:	d114      	bne.n	10bce <_spi_m_dma_transfer+0x56>
   10ba4:	4654      	mov	r4, sl
	ASSERT(dev && dev->prvt);
   10ba6:	f1b8 0000 	subs.w	r0, r8, #0
   10baa:	bf18      	it	ne
   10bac:	2001      	movne	r0, #1
   10bae:	4936      	ldr	r1, [pc, #216]	; (10c88 <_spi_m_dma_transfer+0x110>)
   10bb0:	f640 523d 	movw	r2, #3389	; 0xd3d
   10bb4:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
   10bb6:	6828      	ldr	r0, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   10bb8:	69c3      	ldr	r3, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
   10bba:	075b      	lsls	r3, r3, #29
   10bbc:	d42b      	bmi.n	10c16 <_spi_m_dma_transfer+0x9e>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
   10bbe:	6843      	ldr	r3, [r0, #4]
   10bc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   10bc4:	6043      	str	r3, [r0, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   10bc6:	2117      	movs	r1, #23
   10bc8:	4b30      	ldr	r3, [pc, #192]	; (10c8c <_spi_m_dma_transfer+0x114>)
   10bca:	4798      	blx	r3
}
   10bcc:	e023      	b.n	10c16 <_spi_m_dma_transfer+0x9e>
	if (rxbuf) {
   10bce:	2400      	movs	r4, #0
	ASSERT(dev && dev->prvt);
   10bd0:	f1b8 0000 	subs.w	r0, r8, #0
   10bd4:	bf18      	it	ne
   10bd6:	2001      	movne	r0, #1
   10bd8:	f640 5236 	movw	r2, #3382	; 0xd36
   10bdc:	492a      	ldr	r1, [pc, #168]	; (10c88 <_spi_m_dma_transfer+0x110>)
   10bde:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
   10be0:	6828      	ldr	r0, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   10be2:	69c3      	ldr	r3, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
   10be4:	075a      	lsls	r2, r3, #29
   10be6:	d406      	bmi.n	10bf6 <_spi_m_dma_transfer+0x7e>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
   10be8:	6843      	ldr	r3, [r0, #4]
   10bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   10bee:	6043      	str	r3, [r0, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   10bf0:	2117      	movs	r1, #23
   10bf2:	4b26      	ldr	r3, [pc, #152]	; (10c8c <_spi_m_dma_transfer+0x114>)
   10bf4:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   10bf6:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
   10bf8:	4b25      	ldr	r3, [pc, #148]	; (10c90 <_spi_m_dma_transfer+0x118>)
   10bfa:	3128      	adds	r1, #40	; 0x28
   10bfc:	4658      	mov	r0, fp
   10bfe:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
   10c00:	4651      	mov	r1, sl
   10c02:	4658      	mov	r0, fp
   10c04:	47c8      	blx	r9
		_dma_set_data_amount(rx_ch, length);
   10c06:	4b23      	ldr	r3, [pc, #140]	; (10c94 <_spi_m_dma_transfer+0x11c>)
   10c08:	4639      	mov	r1, r7
   10c0a:	4658      	mov	r0, fp
   10c0c:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
   10c0e:	4b22      	ldr	r3, [pc, #136]	; (10c98 <_spi_m_dma_transfer+0x120>)
   10c10:	2100      	movs	r1, #0
   10c12:	4658      	mov	r0, fp
   10c14:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
   10c16:	f8df a07c 	ldr.w	sl, [pc, #124]	; 10c94 <_spi_m_dma_transfer+0x11c>
   10c1a:	f8df b088 	ldr.w	fp, [pc, #136]	; 10ca4 <_spi_m_dma_transfer+0x12c>
   10c1e:	b1c6      	cbz	r6, 10c52 <_spi_m_dma_transfer+0xda>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
   10c20:	4b1b      	ldr	r3, [pc, #108]	; (10c90 <_spi_m_dma_transfer+0x118>)
   10c22:	4631      	mov	r1, r6
   10c24:	4620      	mov	r0, r4
   10c26:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   10c28:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
   10c2a:	4620      	mov	r0, r4
   10c2c:	3128      	adds	r1, #40	; 0x28
   10c2e:	47c8      	blx	r9
		_dma_srcinc_enable(tx_ch, true);
   10c30:	2101      	movs	r1, #1
		_dma_set_data_amount(tx_ch, length);
	} else {
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
   10c32:	4620      	mov	r0, r4
   10c34:	47d8      	blx	fp
		_dma_set_data_amount(tx_ch, length);
   10c36:	4639      	mov	r1, r7
   10c38:	4620      	mov	r0, r4
   10c3a:	47d0      	blx	sl
	}
	_dma_enable_transaction(tx_ch, false);
   10c3c:	4b16      	ldr	r3, [pc, #88]	; (10c98 <_spi_m_dma_transfer+0x120>)
   10c3e:	2100      	movs	r1, #0
   10c40:	4620      	mov	r0, r4
   10c42:	4798      	blx	r3

	return ERR_NONE;
}
   10c44:	2000      	movs	r0, #0
   10c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
   10c4a:	f04f 0b01 	mov.w	fp, #1
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   10c4e:	2408      	movs	r4, #8
   10c50:	e7be      	b.n	10bd0 <_spi_m_dma_transfer+0x58>
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
   10c52:	4b12      	ldr	r3, [pc, #72]	; (10c9c <_spi_m_dma_transfer+0x124>)
   10c54:	4640      	mov	r0, r8
   10c56:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
   10c58:	4b0d      	ldr	r3, [pc, #52]	; (10c90 <_spi_m_dma_transfer+0x118>)
   10c5a:	f100 010e 	add.w	r1, r0, #14
   10c5e:	4620      	mov	r0, r4
   10c60:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   10c62:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
   10c64:	4620      	mov	r0, r4
   10c66:	3128      	adds	r1, #40	; 0x28
   10c68:	47c8      	blx	r9
		_dma_srcinc_enable(tx_ch, false);
   10c6a:	4631      	mov	r1, r6
   10c6c:	e7e1      	b.n	10c32 <_spi_m_dma_transfer+0xba>
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
   10c6e:	f04f 0b00 	mov.w	fp, #0
   10c72:	e794      	b.n	10b9e <_spi_m_dma_transfer+0x26>
	if (rxbuf) {
   10c74:	f1ba 0f00 	cmp.w	sl, #0
   10c78:	d1e7      	bne.n	10c4a <_spi_m_dma_transfer+0xd2>
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   10c7a:	2408      	movs	r4, #8
   10c7c:	e793      	b.n	10ba6 <_spi_m_dma_transfer+0x2e>
   10c7e:	bf00      	nop
   10c80:	0000fbc5 	.word	0x0000fbc5
   10c84:	0000cb4d 	.word	0x0000cb4d
   10c88:	00015158 	.word	0x00015158
   10c8c:	0000fb4d 	.word	0x0000fb4d
   10c90:	0000cce5 	.word	0x0000cce5
   10c94:	0000cd11 	.word	0x0000cd11
   10c98:	0000cd55 	.word	0x0000cd55
   10c9c:	0000fd09 	.word	0x0000fd09
   10ca0:	0000ccd5 	.word	0x0000ccd5
   10ca4:	0000ccf5 	.word	0x0000ccf5

00010ca8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
   10ca8:	b570      	push	{r4, r5, r6, lr}
   10caa:	460e      	mov	r6, r1
   10cac:	4614      	mov	r4, r2
	ASSERT(rb && buf && size);
   10cae:	4605      	mov	r5, r0
   10cb0:	b118      	cbz	r0, 10cba <ringbuffer_init+0x12>
   10cb2:	b189      	cbz	r1, 10cd8 <ringbuffer_init+0x30>
   10cb4:	1e10      	subs	r0, r2, #0
   10cb6:	bf18      	it	ne
   10cb8:	2001      	movne	r0, #1
   10cba:	4908      	ldr	r1, [pc, #32]	; (10cdc <ringbuffer_init+0x34>)
   10cbc:	4b08      	ldr	r3, [pc, #32]	; (10ce0 <ringbuffer_init+0x38>)
   10cbe:	2228      	movs	r2, #40	; 0x28
   10cc0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
   10cc2:	1e63      	subs	r3, r4, #1
   10cc4:	ea13 0004 	ands.w	r0, r3, r4
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
	rb->read_index  = 0;
   10cc8:	bf03      	ittte	eq
   10cca:	e9c5 3001 	strdeq	r3, r0, [r5, #4]
	rb->write_index = rb->read_index;
   10cce:	60e8      	streq	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
   10cd0:	602e      	streq	r6, [r5, #0]
		return ERR_INVALID_ARG;
   10cd2:	f06f 000c 	mvnne.w	r0, #12

	return ERR_NONE;
}
   10cd6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
   10cd8:	4608      	mov	r0, r1
   10cda:	e7ee      	b.n	10cba <ringbuffer_init+0x12>
   10cdc:	00015248 	.word	0x00015248
   10ce0:	0000cb4d 	.word	0x0000cb4d

00010ce4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
   10ce4:	b538      	push	{r3, r4, r5, lr}
   10ce6:	460d      	mov	r5, r1
	ASSERT(rb && data);
   10ce8:	4604      	mov	r4, r0
   10cea:	b110      	cbz	r0, 10cf2 <ringbuffer_get+0xe>
   10cec:	1e08      	subs	r0, r1, #0
   10cee:	bf18      	it	ne
   10cf0:	2001      	movne	r0, #1
   10cf2:	4b0a      	ldr	r3, [pc, #40]	; (10d1c <ringbuffer_get+0x38>)
   10cf4:	490a      	ldr	r1, [pc, #40]	; (10d20 <ringbuffer_get+0x3c>)
   10cf6:	2240      	movs	r2, #64	; 0x40
   10cf8:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
   10cfa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10cfe:	429a      	cmp	r2, r3
   10d00:	d009      	beq.n	10d16 <ringbuffer_get+0x32>
		*data = rb->buf[rb->read_index & rb->size];
   10d02:	6862      	ldr	r2, [r4, #4]
   10d04:	4013      	ands	r3, r2
   10d06:	6822      	ldr	r2, [r4, #0]
   10d08:	5cd3      	ldrb	r3, [r2, r3]
   10d0a:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
   10d0c:	68a3      	ldr	r3, [r4, #8]
   10d0e:	3301      	adds	r3, #1
   10d10:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
   10d12:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
   10d14:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NOT_FOUND;
   10d16:	f06f 0009 	mvn.w	r0, #9
   10d1a:	e7fb      	b.n	10d14 <ringbuffer_get+0x30>
   10d1c:	0000cb4d 	.word	0x0000cb4d
   10d20:	00015248 	.word	0x00015248

00010d24 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
   10d24:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb);
   10d26:	4604      	mov	r4, r0
   10d28:	3800      	subs	r0, #0
   10d2a:	bf18      	it	ne
   10d2c:	2001      	movne	r0, #1
{
   10d2e:	460d      	mov	r5, r1
	ASSERT(rb);
   10d30:	4b0b      	ldr	r3, [pc, #44]	; (10d60 <ringbuffer_put+0x3c>)
   10d32:	490c      	ldr	r1, [pc, #48]	; (10d64 <ringbuffer_put+0x40>)
   10d34:	2251      	movs	r2, #81	; 0x51
   10d36:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
   10d38:	68e3      	ldr	r3, [r4, #12]
   10d3a:	6862      	ldr	r2, [r4, #4]
   10d3c:	4013      	ands	r3, r2
   10d3e:	6822      	ldr	r2, [r4, #0]
   10d40:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
   10d42:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   10d46:	68e3      	ldr	r3, [r4, #12]
   10d48:	1a59      	subs	r1, r3, r1
   10d4a:	4291      	cmp	r1, r2
		rb->read_index = rb->write_index - rb->size;
   10d4c:	bf88      	it	hi
   10d4e:	1a9a      	subhi	r2, r3, r2
	}

	rb->write_index++;
   10d50:	f103 0301 	add.w	r3, r3, #1
		rb->read_index = rb->write_index - rb->size;
   10d54:	bf88      	it	hi
   10d56:	60a2      	strhi	r2, [r4, #8]
	rb->write_index++;
   10d58:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
   10d5a:	2000      	movs	r0, #0
   10d5c:	bd38      	pop	{r3, r4, r5, pc}
   10d5e:	bf00      	nop
   10d60:	0000cb4d 	.word	0x0000cb4d
   10d64:	00015248 	.word	0x00015248

00010d68 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
   10d68:	b510      	push	{r4, lr}
	ASSERT(rb);
   10d6a:	4604      	mov	r4, r0
   10d6c:	3800      	subs	r0, #0
   10d6e:	bf18      	it	ne
   10d70:	2001      	movne	r0, #1
   10d72:	4904      	ldr	r1, [pc, #16]	; (10d84 <ringbuffer_num+0x1c>)
   10d74:	4b04      	ldr	r3, [pc, #16]	; (10d88 <ringbuffer_num+0x20>)
   10d76:	2267      	movs	r2, #103	; 0x67
   10d78:	4798      	blx	r3

	return rb->write_index - rb->read_index;
   10d7a:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
}
   10d7e:	1ac0      	subs	r0, r0, r3
   10d80:	bd10      	pop	{r4, pc}
   10d82:	bf00      	nop
   10d84:	00015248 	.word	0x00015248
   10d88:	0000cb4d 	.word	0x0000cb4d

00010d8c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10d8c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   10d90:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   10d92:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   10d94:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   10d98:	4770      	bx	lr

00010d9a <atomic_leave_critical>:
   10d9a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   10d9e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   10da0:	f383 8810 	msr	PRIMASK, r3
}
   10da4:	4770      	bx	lr
	...

00010da8 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
   10da8:	b570      	push	{r4, r5, r6, lr}
   10daa:	460d      	mov	r5, r1
	ASSERT(qspi && hw);
   10dac:	4604      	mov	r4, r0
   10dae:	b110      	cbz	r0, 10db6 <qspi_dma_init+0xe>
   10db0:	1e08      	subs	r0, r1, #0
   10db2:	bf18      	it	ne
   10db4:	2001      	movne	r0, #1
   10db6:	4905      	ldr	r1, [pc, #20]	; (10dcc <qspi_dma_init+0x24>)
   10db8:	4b05      	ldr	r3, [pc, #20]	; (10dd0 <qspi_dma_init+0x28>)
   10dba:	2231      	movs	r2, #49	; 0x31
   10dbc:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
   10dbe:	4629      	mov	r1, r5
   10dc0:	4620      	mov	r0, r4
   10dc2:	4b04      	ldr	r3, [pc, #16]	; (10dd4 <qspi_dma_init+0x2c>)
}
   10dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _qspi_dma_init(&qspi->dev, hw);
   10dc8:	4718      	bx	r3
   10dca:	bf00      	nop
   10dcc:	0001526c 	.word	0x0001526c
   10dd0:	0000cb4d 	.word	0x0000cb4d
   10dd4:	0000b39d 	.word	0x0000b39d

00010dd8 <event_system_init>:
/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
	return _event_system_init();
   10dd8:	4b00      	ldr	r3, [pc, #0]	; (10ddc <event_system_init+0x4>)
   10dda:	4718      	bx	r3
   10ddc:	0000afc9 	.word	0x0000afc9

00010de0 <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
   10de0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   10de2:	420b      	tst	r3, r1
   10de4:	d1fc      	bne.n	10de0 <hri_adc_wait_for_sync>
	};
}
   10de6:	4770      	bx	lr

00010de8 <hri_adc_set_CTRLA_ENABLE_bit>:
}

static inline void hri_adc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
   10de8:	8803      	ldrh	r3, [r0, #0]
   10dea:	b29b      	uxth	r3, r3
   10dec:	f043 0302 	orr.w	r3, r3, #2
   10df0:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   10df2:	2103      	movs	r1, #3
   10df4:	4b00      	ldr	r3, [pc, #0]	; (10df8 <hri_adc_set_CTRLA_ENABLE_bit+0x10>)
   10df6:	4718      	bx	r3
   10df8:	00010de1 	.word	0x00010de1

00010dfc <hri_adc_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_adc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
   10dfc:	8803      	ldrh	r3, [r0, #0]
   10dfe:	f023 0302 	bic.w	r3, r3, #2
   10e02:	041b      	lsls	r3, r3, #16
   10e04:	0c1b      	lsrs	r3, r3, #16
   10e06:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   10e08:	2103      	movs	r1, #3
   10e0a:	4b01      	ldr	r3, [pc, #4]	; (10e10 <hri_adc_clear_CTRLA_ENABLE_bit+0x14>)
   10e0c:	4718      	bx	r3
   10e0e:	bf00      	nop
   10e10:	00010de1 	.word	0x00010de1

00010e14 <_adc_interrupt_handler>:
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
	void *const hw      = device->hw;
   10e14:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
   10e16:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
   10e1a:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
   10e1e:	400b      	ands	r3, r1
{
   10e20:	b430      	push	{r4, r5}
	if (intflag & ADC_INTFLAG_RESRDY) {
   10e22:	f013 0501 	ands.w	r5, r3, #1
   10e26:	d009      	beq.n	10e3c <_adc_interrupt_handler+0x28>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   10e28:	2301      	movs	r3, #1
   10e2a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
   10e2e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
   10e32:	6883      	ldr	r3, [r0, #8]
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
   10e34:	bc30      	pop	{r4, r5}
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
   10e36:	b292      	uxth	r2, r2
   10e38:	2100      	movs	r1, #0
   10e3a:	4718      	bx	r3
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
   10e3c:	f013 0102 	ands.w	r1, r3, #2
   10e40:	d006      	beq.n	10e50 <_adc_interrupt_handler+0x3c>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   10e42:	2302      	movs	r3, #2
   10e44:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
   10e48:	6843      	ldr	r3, [r0, #4]
   10e4a:	4629      	mov	r1, r5
}
   10e4c:	bc30      	pop	{r4, r5}
		device->adc_async_cb.window_cb(device, 0);
   10e4e:	4718      	bx	r3
	} else if (intflag & ADC_INTFLAG_WINMON) {
   10e50:	075b      	lsls	r3, r3, #29
   10e52:	d504      	bpl.n	10e5e <_adc_interrupt_handler+0x4a>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
   10e54:	2304      	movs	r3, #4
   10e56:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.window_cb(device, 0);
   10e5a:	6803      	ldr	r3, [r0, #0]
   10e5c:	e7f6      	b.n	10e4c <_adc_interrupt_handler+0x38>
}
   10e5e:	bc30      	pop	{r4, r5}
   10e60:	4770      	bx	lr
	...

00010e64 <_adc_get_regs>:
{
   10e64:	b508      	push	{r3, lr}
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   10e66:	f100 433d 	add.w	r3, r0, #3170893824	; 0xbd000000
   10e6a:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
		if (_adcs[i].number == n) {
   10e6e:	f413 3f7f 	tst.w	r3, #261120	; 0x3fc00
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   10e72:	f3c3 2087 	ubfx	r0, r3, #10, #8
		if (_adcs[i].number == n) {
   10e76:	d007      	beq.n	10e88 <_adc_get_regs+0x24>
   10e78:	2801      	cmp	r0, #1
   10e7a:	d005      	beq.n	10e88 <_adc_get_regs+0x24>
	ASSERT(false);
   10e7c:	2000      	movs	r0, #0
   10e7e:	4903      	ldr	r1, [pc, #12]	; (10e8c <_adc_get_regs+0x28>)
   10e80:	4b03      	ldr	r3, [pc, #12]	; (10e90 <_adc_get_regs+0x2c>)
   10e82:	228c      	movs	r2, #140	; 0x8c
   10e84:	4798      	blx	r3
	return 0;
   10e86:	2000      	movs	r0, #0
}
   10e88:	bd08      	pop	{r3, pc}
   10e8a:	bf00      	nop
   10e8c:	00015286 	.word	0x00015286
   10e90:	0000cb4d 	.word	0x0000cb4d

00010e94 <__NVIC_ClearPendingIRQ>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10e94:	0943      	lsrs	r3, r0, #5
   10e96:	2201      	movs	r2, #1
   10e98:	f000 001f 	and.w	r0, r0, #31
   10e9c:	fa02 f000 	lsl.w	r0, r2, r0
   10ea0:	3360      	adds	r3, #96	; 0x60
   10ea2:	4a02      	ldr	r2, [pc, #8]	; (10eac <__NVIC_ClearPendingIRQ+0x18>)
   10ea4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   10ea8:	4770      	bx	lr
   10eaa:	bf00      	nop
   10eac:	e000e100 	.word	0xe000e100

00010eb0 <_adc_get_irq_num.isra.0>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   10eb0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
   10eb4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
   10eb8:	0a80      	lsrs	r0, r0, #10
	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
   10eba:	0040      	lsls	r0, r0, #1
   10ebc:	3076      	adds	r0, #118	; 0x76
}
   10ebe:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   10ec2:	4770      	bx	lr

00010ec4 <__NVIC_DisableIRQ>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10ec4:	0943      	lsrs	r3, r0, #5
   10ec6:	2201      	movs	r2, #1
   10ec8:	f000 001f 	and.w	r0, r0, #31
   10ecc:	fa02 f000 	lsl.w	r0, r2, r0
   10ed0:	3320      	adds	r3, #32
   10ed2:	4a04      	ldr	r2, [pc, #16]	; (10ee4 <__NVIC_DisableIRQ+0x20>)
   10ed4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   10ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10edc:	f3bf 8f6f 	isb	sy
}
   10ee0:	4770      	bx	lr
   10ee2:	bf00      	nop
   10ee4:	e000e100 	.word	0xe000e100

00010ee8 <_adc_init>:
{
   10ee8:	b538      	push	{r3, r4, r5, lr}
	if (hw == ADC0) {
   10eea:	4b39      	ldr	r3, [pc, #228]	; (10fd0 <_adc_init+0xe8>)
   10eec:	4298      	cmp	r0, r3
{
   10eee:	460c      	mov	r4, r1
	if (hw == ADC0) {
   10ef0:	d15c      	bne.n	10fac <_adc_init+0xc4>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
   10ef2:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
   10ef6:	681b      	ldr	r3, [r3, #0]
   10ef8:	00da      	lsls	r2, r3, #3
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
   10efa:	0919      	lsrs	r1, r3, #4
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
   10efc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
   10f00:	f001 0170 	and.w	r1, r1, #112	; 0x70
   10f04:	430a      	orrs	r2, r1
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
   10f06:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   10f0a:	431a      	orrs	r2, r3
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
   10f0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   10f0e:	4d31      	ldr	r5, [pc, #196]	; (10fd4 <_adc_init+0xec>)
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
   10f10:	f013 0f01 	tst.w	r3, #1
   10f14:	d10c      	bne.n	10f30 <_adc_init+0x48>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   10f16:	2103      	movs	r1, #3
   10f18:	47a8      	blx	r5
	tmp = ((Adc *)hw)->CTRLA.reg;
   10f1a:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
   10f1c:	079b      	lsls	r3, r3, #30
   10f1e:	d503      	bpl.n	10f28 <_adc_init+0x40>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
   10f20:	4b2d      	ldr	r3, [pc, #180]	; (10fd8 <_adc_init+0xf0>)
   10f22:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
   10f24:	2102      	movs	r1, #2
   10f26:	47a8      	blx	r5
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
   10f28:	2301      	movs	r3, #1
   10f2a:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   10f2c:	2103      	movs	r1, #3
   10f2e:	47a8      	blx	r5
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
   10f30:	2101      	movs	r1, #1
   10f32:	47a8      	blx	r5
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
   10f34:	4929      	ldr	r1, [pc, #164]	; (10fdc <_adc_init+0xf4>)
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
   10f36:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   10f3a:	2316      	movs	r3, #22
   10f3c:	fb03 1404 	mla	r4, r3, r4, r1
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   10f40:	f640 71ff 	movw	r1, #4095	; 0xfff
   10f44:	88a3      	ldrh	r3, [r4, #4]
	((Adc *)hw)->CTRLB.reg = data;
   10f46:	80c3      	strh	r3, [r0, #6]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   10f48:	47a8      	blx	r5
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
   10f4a:	79a3      	ldrb	r3, [r4, #6]
	((Adc *)hw)->REFCTRL.reg = data;
   10f4c:	7203      	strb	r3, [r0, #8]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   10f4e:	f640 71ff 	movw	r1, #4095	; 0xfff
   10f52:	47a8      	blx	r5
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
   10f54:	79e3      	ldrb	r3, [r4, #7]
	((Adc *)hw)->EVCTRL.reg = data;
   10f56:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
   10f58:	8923      	ldrh	r3, [r4, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
   10f5a:	8083      	strh	r3, [r0, #4]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   10f5c:	f640 71ff 	movw	r1, #4095	; 0xfff
   10f60:	47a8      	blx	r5
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
   10f62:	7aa3      	ldrb	r3, [r4, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
   10f64:	7283      	strb	r3, [r0, #10]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   10f66:	f640 71ff 	movw	r1, #4095	; 0xfff
   10f6a:	47a8      	blx	r5
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
   10f6c:	7ae3      	ldrb	r3, [r4, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
   10f6e:	72c3      	strb	r3, [r0, #11]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   10f70:	f640 71ff 	movw	r1, #4095	; 0xfff
   10f74:	47a8      	blx	r5
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
   10f76:	89a3      	ldrh	r3, [r4, #12]
	((Adc *)hw)->WINLT.reg = data;
   10f78:	8183      	strh	r3, [r0, #12]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINLT);
   10f7a:	2180      	movs	r1, #128	; 0x80
   10f7c:	47a8      	blx	r5
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
   10f7e:	89e3      	ldrh	r3, [r4, #14]
	((Adc *)hw)->WINUT.reg = data;
   10f80:	81c3      	strh	r3, [r0, #14]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINUT);
   10f82:	f44f 7180 	mov.w	r1, #256	; 0x100
   10f86:	47a8      	blx	r5
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
   10f88:	8a23      	ldrh	r3, [r4, #16]
	((Adc *)hw)->GAINCORR.reg = data;
   10f8a:	8203      	strh	r3, [r0, #16]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_GAINCORR);
   10f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
   10f90:	47a8      	blx	r5
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
   10f92:	8a63      	ldrh	r3, [r4, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
   10f94:	8243      	strh	r3, [r0, #18]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_OFFSETCORR);
   10f96:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10f9a:	47a8      	blx	r5
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
   10f9c:	7d23      	ldrb	r3, [r4, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
   10f9e:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
   10fa0:	8863      	ldrh	r3, [r4, #2]
	((Adc *)hw)->CTRLA.reg = data;
   10fa2:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   10fa4:	2103      	movs	r1, #3
   10fa6:	47a8      	blx	r5
}
   10fa8:	2000      	movs	r0, #0
   10faa:	bd38      	pop	{r3, r4, r5, pc}
	} else if (hw == ADC1) {
   10fac:	4b0c      	ldr	r3, [pc, #48]	; (10fe0 <_adc_init+0xf8>)
   10fae:	4298      	cmp	r0, r3
   10fb0:	d10c      	bne.n	10fcc <_adc_init+0xe4>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   10fb2:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
   10fb6:	681b      	ldr	r3, [r3, #0]
   10fb8:	0ada      	lsrs	r2, r3, #11
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
   10fba:	0c99      	lsrs	r1, r3, #18
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   10fbc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
   10fc0:	f001 0170 	and.w	r1, r1, #112	; 0x70
   10fc4:	430a      	orrs	r2, r1
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
   10fc6:	f3c3 4302 	ubfx	r3, r3, #16, #3
   10fca:	e79e      	b.n	10f0a <_adc_init+0x22>
	uint16_t calib_reg = 0;
   10fcc:	2200      	movs	r2, #0
   10fce:	e79d      	b.n	10f0c <_adc_init+0x24>
   10fd0:	43001c00 	.word	0x43001c00
   10fd4:	00010de1 	.word	0x00010de1
   10fd8:	00010dfd 	.word	0x00010dfd
   10fdc:	0001529c 	.word	0x0001529c
   10fe0:	43002000 	.word	0x43002000

00010fe4 <_adc_async_init>:
{
   10fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ASSERT(device);
   10fe8:	4604      	mov	r4, r0
   10fea:	3800      	subs	r0, #0
   10fec:	bf18      	it	ne
   10fee:	2001      	movne	r0, #1
{
   10ff0:	460d      	mov	r5, r1
	ASSERT(device);
   10ff2:	22f1      	movs	r2, #241	; 0xf1
   10ff4:	4923      	ldr	r1, [pc, #140]	; (11084 <_adc_async_init+0xa0>)
   10ff6:	4b24      	ldr	r3, [pc, #144]	; (11088 <_adc_async_init+0xa4>)
   10ff8:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
   10ffa:	4b24      	ldr	r3, [pc, #144]	; (1108c <_adc_async_init+0xa8>)
   10ffc:	4628      	mov	r0, r5
   10ffe:	4798      	blx	r3
   11000:	4b23      	ldr	r3, [pc, #140]	; (11090 <_adc_async_init+0xac>)
   11002:	4601      	mov	r1, r0
   11004:	4628      	mov	r0, r5
   11006:	4798      	blx	r3
	if (init_status) {
   11008:	4606      	mov	r6, r0
   1100a:	2800      	cmp	r0, #0
   1100c:	d130      	bne.n	11070 <_adc_async_init+0x8c>
	if (hw == ADC0) {
   1100e:	4b21      	ldr	r3, [pc, #132]	; (11094 <_adc_async_init+0xb0>)
	device->hw = hw;
   11010:	6165      	str	r5, [r4, #20]
	if (hw == ADC0) {
   11012:	429d      	cmp	r5, r3
   11014:	d12f      	bne.n	11076 <_adc_async_init+0x92>
		_adc0_dev = dev;
   11016:	4b20      	ldr	r3, [pc, #128]	; (11098 <_adc_async_init+0xb4>)
   11018:	601c      	str	r4, [r3, #0]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
   1101a:	4920      	ldr	r1, [pc, #128]	; (1109c <_adc_async_init+0xb8>)
   1101c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 110a8 <_adc_async_init+0xc4>
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
   11020:	f8df 8088 	ldr.w	r8, [pc, #136]	; 110ac <_adc_async_init+0xc8>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11024:	4f1e      	ldr	r7, [pc, #120]	; (110a0 <_adc_async_init+0xbc>)
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
   11026:	4628      	mov	r0, r5
   11028:	4788      	blx	r1
   1102a:	b200      	sxth	r0, r0
   1102c:	47c8      	blx	r9
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
   1102e:	6960      	ldr	r0, [r4, #20]
   11030:	4788      	blx	r1
   11032:	b200      	sxth	r0, r0
   11034:	47c0      	blx	r8
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
   11036:	6960      	ldr	r0, [r4, #20]
   11038:	4788      	blx	r1
   1103a:	2501      	movs	r5, #1
   1103c:	0942      	lsrs	r2, r0, #5
   1103e:	f000 031f 	and.w	r3, r0, #31
   11042:	fa05 f303 	lsl.w	r3, r5, r3
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
   11046:	4428      	add	r0, r5
   11048:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   1104c:	b200      	sxth	r0, r0
   1104e:	47c8      	blx	r9
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
   11050:	6960      	ldr	r0, [r4, #20]
   11052:	4788      	blx	r1
   11054:	4428      	add	r0, r5
   11056:	b200      	sxth	r0, r0
   11058:	47c0      	blx	r8
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
   1105a:	6960      	ldr	r0, [r4, #20]
   1105c:	4788      	blx	r1
   1105e:	1943      	adds	r3, r0, r5
   11060:	f3c3 124a 	ubfx	r2, r3, #5, #11
   11064:	f003 031f 	and.w	r3, r3, #31
   11068:	fa05 f303 	lsl.w	r3, r5, r3
   1106c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
}
   11070:	4630      	mov	r0, r6
   11072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (hw == ADC1) {
   11076:	4b0b      	ldr	r3, [pc, #44]	; (110a4 <_adc_async_init+0xc0>)
   11078:	429d      	cmp	r5, r3
		_adc1_dev = dev;
   1107a:	bf04      	itt	eq
   1107c:	4b06      	ldreq	r3, [pc, #24]	; (11098 <_adc_async_init+0xb4>)
   1107e:	605c      	streq	r4, [r3, #4]
   11080:	e7cb      	b.n	1101a <_adc_async_init+0x36>
   11082:	bf00      	nop
   11084:	00015286 	.word	0x00015286
   11088:	0000cb4d 	.word	0x0000cb4d
   1108c:	00010e65 	.word	0x00010e65
   11090:	00010ee9 	.word	0x00010ee9
   11094:	43001c00 	.word	0x43001c00
   11098:	2000108c 	.word	0x2000108c
   1109c:	00010eb1 	.word	0x00010eb1
   110a0:	e000e100 	.word	0xe000e100
   110a4:	43002000 	.word	0x43002000
   110a8:	00010ec5 	.word	0x00010ec5
   110ac:	00010e95 	.word	0x00010e95

000110b0 <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
   110b0:	6940      	ldr	r0, [r0, #20]
   110b2:	4b01      	ldr	r3, [pc, #4]	; (110b8 <_adc_async_enable_channel+0x8>)
   110b4:	4718      	bx	r3
   110b6:	bf00      	nop
   110b8:	00010de9 	.word	0x00010de9

000110bc <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
   110bc:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
   110be:	88db      	ldrh	r3, [r3, #6]
   110c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   110c4:	2b03      	cmp	r3, #3
}
   110c6:	bf0c      	ite	eq
   110c8:	2001      	moveq	r0, #1
   110ca:	2002      	movne	r0, #2
   110cc:	4770      	bx	lr
	...

000110d0 <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
   110d0:	6940      	ldr	r0, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
   110d2:	7d03      	ldrb	r3, [r0, #20]
   110d4:	f043 0302 	orr.w	r3, r3, #2
   110d8:	7503      	strb	r3, [r0, #20]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   110da:	f640 71ff 	movw	r1, #4095	; 0xfff
   110de:	4b01      	ldr	r3, [pc, #4]	; (110e4 <_adc_async_convert+0x14>)
   110e0:	4718      	bx	r3
   110e2:	bf00      	nop
   110e4:	00010de1 	.word	0x00010de1

000110e8 <_adc_async_set_irq_state>:
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
   110e8:	2a01      	cmp	r2, #1
	void *const hw = device->hw;
   110ea:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
   110ec:	d104      	bne.n	110f8 <_adc_async_set_irq_state+0x10>
	if (value == 0x0) {
   110ee:	2204      	movs	r2, #4
	if (value == 0x0) {
   110f0:	b93b      	cbnz	r3, 11102 <_adc_async_set_irq_state+0x1a>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
   110f2:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
   110f6:	4770      	bx	lr
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
   110f8:	2a02      	cmp	r2, #2
   110fa:	d0f9      	beq.n	110f0 <_adc_async_set_irq_state+0x8>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
   110fc:	b91a      	cbnz	r2, 11106 <_adc_async_set_irq_state+0x1e>
	if (value == 0x0) {
   110fe:	2201      	movs	r2, #1
   11100:	e7f6      	b.n	110f0 <_adc_async_set_irq_state+0x8>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
   11102:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
}
   11106:	4770      	bx	lr

00011108 <ADC0_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
	_adc_interrupt_handler(_adc0_dev);
   11108:	4b01      	ldr	r3, [pc, #4]	; (11110 <ADC0_0_Handler+0x8>)
   1110a:	6818      	ldr	r0, [r3, #0]
   1110c:	4b01      	ldr	r3, [pc, #4]	; (11114 <ADC0_0_Handler+0xc>)
   1110e:	4718      	bx	r3
   11110:	2000108c 	.word	0x2000108c
   11114:	00010e15 	.word	0x00010e15

00011118 <ADC0_1_Handler>:
   11118:	4b00      	ldr	r3, [pc, #0]	; (1111c <ADC0_1_Handler+0x4>)
   1111a:	4718      	bx	r3
   1111c:	00011109 	.word	0x00011109

00011120 <ADC1_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
	_adc_interrupt_handler(_adc1_dev);
   11120:	4b01      	ldr	r3, [pc, #4]	; (11128 <ADC1_0_Handler+0x8>)
   11122:	6858      	ldr	r0, [r3, #4]
   11124:	4b01      	ldr	r3, [pc, #4]	; (1112c <ADC1_0_Handler+0xc>)
   11126:	4718      	bx	r3
   11128:	2000108c 	.word	0x2000108c
   1112c:	00010e15 	.word	0x00010e15

00011130 <ADC1_1_Handler>:
   11130:	4b00      	ldr	r3, [pc, #0]	; (11134 <ADC1_1_Handler+0x4>)
   11132:	4718      	bx	r3
   11134:	00011121 	.word	0x00011121

00011138 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   11138:	e7fe      	b.n	11138 <Dummy_Handler>
	...

0001113c <Reset_Handler>:
{
   1113c:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   1113e:	4a14      	ldr	r2, [pc, #80]	; (11190 <Reset_Handler+0x54>)
   11140:	4b14      	ldr	r3, [pc, #80]	; (11194 <Reset_Handler+0x58>)
   11142:	429a      	cmp	r2, r3
   11144:	d002      	beq.n	1114c <Reset_Handler+0x10>
		for (; pDest < &_erelocate;) {
   11146:	4914      	ldr	r1, [pc, #80]	; (11198 <Reset_Handler+0x5c>)
   11148:	428b      	cmp	r3, r1
   1114a:	d318      	bcc.n	1117e <Reset_Handler+0x42>
	pSrc  = &_etext;
   1114c:	4b13      	ldr	r3, [pc, #76]	; (1119c <Reset_Handler+0x60>)
	for (pDest = &_szero; pDest < &_ezero;) {
   1114e:	4a14      	ldr	r2, [pc, #80]	; (111a0 <Reset_Handler+0x64>)
		*pDest++ = 0;
   11150:	2100      	movs	r1, #0
	for (pDest = &_szero; pDest < &_ezero;) {
   11152:	4293      	cmp	r3, r2
   11154:	d318      	bcc.n	11188 <Reset_Handler+0x4c>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
   11156:	4a13      	ldr	r2, [pc, #76]	; (111a4 <Reset_Handler+0x68>)
   11158:	4b13      	ldr	r3, [pc, #76]	; (111a8 <Reset_Handler+0x6c>)
   1115a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1115e:	609a      	str	r2, [r3, #8]
	SCB->CPACR |= (0xFu << 20);
   11160:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11164:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   11168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1116c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11170:	f3bf 8f6f 	isb	sy
	__libc_init_array();
   11174:	4b0d      	ldr	r3, [pc, #52]	; (111ac <Reset_Handler+0x70>)
   11176:	4798      	blx	r3
	main();
   11178:	4b0d      	ldr	r3, [pc, #52]	; (111b0 <Reset_Handler+0x74>)
   1117a:	4798      	blx	r3
	while (1)
   1117c:	e7fe      	b.n	1117c <Reset_Handler+0x40>
			*pDest++ = *pSrc++;
   1117e:	f852 0b04 	ldr.w	r0, [r2], #4
   11182:	f843 0b04 	str.w	r0, [r3], #4
   11186:	e7df      	b.n	11148 <Reset_Handler+0xc>
		*pDest++ = 0;
   11188:	f843 1b04 	str.w	r1, [r3], #4
   1118c:	e7e1      	b.n	11152 <Reset_Handler+0x16>
   1118e:	bf00      	nop
   11190:	00015424 	.word	0x00015424
   11194:	20000000 	.word	0x20000000
   11198:	200005ac 	.word	0x200005ac
   1119c:	200005b0 	.word	0x200005b0
   111a0:	20014d68 	.word	0x20014d68
   111a4:	00004000 	.word	0x00004000
   111a8:	e000ed00 	.word	0xe000ed00
   111ac:	0001237d 	.word	0x0001237d
   111b0:	0000e481 	.word	0x0000e481

000111b4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
   111b4:	b510      	push	{r4, lr}
	system_init();
   111b6:	4b04      	ldr	r3, [pc, #16]	; (111c8 <atmel_start_init+0x14>)
   111b8:	4798      	blx	r3
	usb_init();
   111ba:	4b04      	ldr	r3, [pc, #16]	; (111cc <atmel_start_init+0x18>)
   111bc:	4798      	blx	r3
	stdio_redirect_init();
}
   111be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stdio_redirect_init();
   111c2:	4b03      	ldr	r3, [pc, #12]	; (111d0 <atmel_start_init+0x1c>)
   111c4:	4718      	bx	r3
   111c6:	bf00      	nop
   111c8:	0000f5e9 	.word	0x0000f5e9
   111cc:	0000b799 	.word	0x0000b799
   111d0:	0000d7dd 	.word	0x0000d7dd

000111d4 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   111d4:	4b05      	ldr	r3, [pc, #20]	; (111ec <usbdc_unconfig+0x18>)
{
   111d6:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   111d8:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
   111da:	b904      	cbnz	r4, 111de <usbdc_unconfig+0xa>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
   111dc:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
   111de:	6863      	ldr	r3, [r4, #4]
   111e0:	4620      	mov	r0, r4
   111e2:	2200      	movs	r2, #0
   111e4:	2101      	movs	r1, #1
   111e6:	4798      	blx	r3
		func = func->next;
   111e8:	6824      	ldr	r4, [r4, #0]
   111ea:	e7f6      	b.n	111da <usbdc_unconfig+0x6>
   111ec:	20001094 	.word	0x20001094

000111f0 <usbdc_change_notify>:
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   111f0:	4b06      	ldr	r3, [pc, #24]	; (1120c <usbdc_change_notify+0x1c>)
{
   111f2:	b570      	push	{r4, r5, r6, lr}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   111f4:	68dc      	ldr	r4, [r3, #12]
{
   111f6:	4605      	mov	r5, r0
   111f8:	460e      	mov	r6, r1

	while (cg != NULL) {
   111fa:	b904      	cbnz	r4, 111fe <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
   111fc:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
   111fe:	6863      	ldr	r3, [r4, #4]
   11200:	b113      	cbz	r3, 11208 <usbdc_change_notify+0x18>
			cg->cb(change, value);
   11202:	4631      	mov	r1, r6
   11204:	4628      	mov	r0, r5
   11206:	4798      	blx	r3
		cg = cg->next;
   11208:	6824      	ldr	r4, [r4, #0]
   1120a:	e7f6      	b.n	111fa <usbdc_change_notify+0xa>
   1120c:	20001094 	.word	0x20001094

00011210 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   11212:	4b0c      	ldr	r3, [pc, #48]	; (11244 <usbdc_request_handler+0x34>)
   11214:	689c      	ldr	r4, [r3, #8]
{
   11216:	4605      	mov	r5, r0
   11218:	460e      	mov	r6, r1
   1121a:	4617      	mov	r7, r2
	int32_t                   rc;

	while (h != NULL) {
   1121c:	b90c      	cbnz	r4, 11222 <usbdc_request_handler+0x12>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
   1121e:	4620      	mov	r0, r4
}
   11220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
   11222:	6863      	ldr	r3, [r4, #4]
   11224:	b90b      	cbnz	r3, 1122a <usbdc_request_handler+0x1a>
		h = h->next;
   11226:	6824      	ldr	r4, [r4, #0]
   11228:	e7f8      	b.n	1121c <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
   1122a:	463a      	mov	r2, r7
   1122c:	4631      	mov	r1, r6
   1122e:	4628      	mov	r0, r5
   11230:	4798      	blx	r3
			if (0 == rc) {
   11232:	b120      	cbz	r0, 1123e <usbdc_request_handler+0x2e>
			} else if (ERR_NOT_FOUND != rc) {
   11234:	300a      	adds	r0, #10
   11236:	d0f6      	beq.n	11226 <usbdc_request_handler+0x16>
				return -1;
   11238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1123c:	e7f0      	b.n	11220 <usbdc_request_handler+0x10>
				return true;
   1123e:	2001      	movs	r0, #1
   11240:	e7ee      	b.n	11220 <usbdc_request_handler+0x10>
   11242:	bf00      	nop
   11244:	20001094 	.word	0x20001094

00011248 <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   11248:	4b04      	ldr	r3, [pc, #16]	; (1125c <usbd_sof_cb+0x14>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   1124a:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   1124c:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
   1124e:	b904      	cbnz	r4, 11252 <usbd_sof_cb+0xa>
	usbdc_sof_notify();
}
   11250:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
   11252:	6863      	ldr	r3, [r4, #4]
   11254:	b103      	cbz	r3, 11258 <usbd_sof_cb+0x10>
			sof->cb();
   11256:	4798      	blx	r3
		sof = sof->next;
   11258:	6824      	ldr	r4, [r4, #0]
   1125a:	e7f8      	b.n	1124e <usbd_sof_cb+0x6>
   1125c:	20001094 	.word	0x20001094

00011260 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   11260:	b510      	push	{r4, lr}
   11262:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
   11264:	460a      	mov	r2, r1
   11266:	b119      	cbz	r1, 11270 <usbdc_cb_ctl_done+0x10>
   11268:	2901      	cmp	r1, #1
   1126a:	d021      	beq.n	112b0 <usbdc_cb_ctl_done+0x50>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
   1126c:	2000      	movs	r0, #0
   1126e:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   11270:	7823      	ldrb	r3, [r4, #0]
   11272:	2b00      	cmp	r3, #0
   11274:	d1fa      	bne.n	1126c <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
   11276:	7863      	ldrb	r3, [r4, #1]
   11278:	2b05      	cmp	r3, #5
   1127a:	d00d      	beq.n	11298 <usbdc_cb_ctl_done+0x38>
   1127c:	2b09      	cmp	r3, #9
   1127e:	d1f5      	bne.n	1126c <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
   11280:	8862      	ldrh	r2, [r4, #2]
   11282:	4b0e      	ldr	r3, [pc, #56]	; (112bc <usbdc_cb_ctl_done+0x5c>)
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   11284:	2a00      	cmp	r2, #0
		usbdc.cfg_value = req->wValue;
   11286:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   11288:	bf14      	ite	ne
   1128a:	2104      	movne	r1, #4
   1128c:	2103      	moveq	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   1128e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   11290:	2001      	movs	r0, #1
   11292:	4b0b      	ldr	r3, [pc, #44]	; (112c0 <usbdc_cb_ctl_done+0x60>)
   11294:	4798      	blx	r3
		break;
   11296:	e7e9      	b.n	1126c <usbdc_cb_ctl_done+0xc>
		usbdc_set_address(req->wValue);
   11298:	8860      	ldrh	r0, [r4, #2]
	usb_d_set_address(addr);
   1129a:	4b0a      	ldr	r3, [pc, #40]	; (112c4 <usbdc_cb_ctl_done+0x64>)
   1129c:	b2c0      	uxtb	r0, r0
   1129e:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   112a0:	8863      	ldrh	r3, [r4, #2]
   112a2:	2b00      	cmp	r3, #0
   112a4:	bf18      	it	ne
   112a6:	2103      	movne	r1, #3
   112a8:	4b04      	ldr	r3, [pc, #16]	; (112bc <usbdc_cb_ctl_done+0x5c>)
   112aa:	bf08      	it	eq
   112ac:	2102      	moveq	r1, #2
   112ae:	e7ee      	b.n	1128e <usbdc_cb_ctl_done+0x2e>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   112b0:	4b05      	ldr	r3, [pc, #20]	; (112c8 <usbdc_cb_ctl_done+0x68>)
   112b2:	4621      	mov	r1, r4
   112b4:	2000      	movs	r0, #0
   112b6:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
   112b8:	e7d8      	b.n	1126c <usbdc_cb_ctl_done+0xc>
   112ba:	bf00      	nop
   112bc:	20001094 	.word	0x20001094
   112c0:	000111f1 	.word	0x000111f1
   112c4:	0000e049 	.word	0x0000e049
   112c8:	00011211 	.word	0x00011211

000112cc <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   112cc:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();

	usbdc.state       = USBD_S_DEFAULT;
   112ce:	4d0d      	ldr	r5, [pc, #52]	; (11304 <usbdc_reset+0x38>)
	usbdc_unconfig();
   112d0:	4b0d      	ldr	r3, [pc, #52]	; (11308 <usbdc_reset+0x3c>)
	usbdc.cfg_value   = 0;
	usbdc.ifc_alt_map = 0;
   112d2:	2400      	movs	r4, #0
	usbdc.state       = USBD_S_DEFAULT;
   112d4:	2602      	movs	r6, #2
	usbdc_unconfig();
   112d6:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
   112d8:	836e      	strh	r6, [r5, #26]

	// Setup EP0
	usb_d_ep_deinit(0);
   112da:	4620      	mov	r0, r4
   112dc:	4b0b      	ldr	r3, [pc, #44]	; (1130c <usbdc_reset+0x40>)
	usbdc.ifc_alt_map = 0;
   112de:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
   112e0:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   112e2:	4b0b      	ldr	r3, [pc, #44]	; (11310 <usbdc_reset+0x44>)
   112e4:	7f28      	ldrb	r0, [r5, #28]
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   112e6:	4d0b      	ldr	r5, [pc, #44]	; (11314 <usbdc_reset+0x48>)
	usb_d_ep0_init(usbdc.ctrl_size);
   112e8:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   112ea:	4621      	mov	r1, r4
   112ec:	4620      	mov	r0, r4
   112ee:	4a0a      	ldr	r2, [pc, #40]	; (11318 <usbdc_reset+0x4c>)
   112f0:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   112f2:	4620      	mov	r0, r4
   112f4:	4631      	mov	r1, r6
   112f6:	4a09      	ldr	r2, [pc, #36]	; (1131c <usbdc_reset+0x50>)
   112f8:	47a8      	blx	r5
	usb_d_ep_enable(0);
   112fa:	4620      	mov	r0, r4
   112fc:	4b08      	ldr	r3, [pc, #32]	; (11320 <usbdc_reset+0x54>)
}
   112fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
   11302:	4718      	bx	r3
   11304:	20001094 	.word	0x20001094
   11308:	000111d5 	.word	0x000111d5
   1130c:	0000e0b5 	.word	0x0000e0b5
   11310:	0000e0a5 	.word	0x0000e0a5
   11314:	0000e2c9 	.word	0x0000e2c9
   11318:	0001135d 	.word	0x0001135d
   1131c:	00011261 	.word	0x00011261
   11320:	0000e0e1 	.word	0x0000e0e1

00011324 <usbd_event_cb>:
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
	(void)param;

	switch (ev) {
   11324:	b110      	cbz	r0, 1132c <usbd_event_cb+0x8>
   11326:	2801      	cmp	r0, #1
   11328:	d002      	beq.n	11330 <usbd_event_cb+0xc>
   1132a:	4770      	bx	lr
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
   1132c:	4b01      	ldr	r3, [pc, #4]	; (11334 <usbd_event_cb+0x10>)
   1132e:	4718      	bx	r3
		break;

	case USB_EV_RESET:
		usbdc_reset();
   11330:	4b01      	ldr	r3, [pc, #4]	; (11338 <usbd_event_cb+0x14>)
   11332:	4718      	bx	r3
   11334:	000111f1 	.word	0x000111f1
   11338:	000112cd 	.word	0x000112cd

0001133c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   1133c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   1133e:	f88d 000c 	strb.w	r0, [sp, #12]
   11342:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
   11346:	a801      	add	r0, sp, #4
   11348:	4b03      	ldr	r3, [pc, #12]	; (11358 <usbdc_xfer+0x1c>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   1134a:	e9cd 1201 	strd	r1, r2, [sp, #4]
	return usb_d_ep_transfer(&xfer);
   1134e:	4798      	blx	r3
}
   11350:	b005      	add	sp, #20
   11352:	f85d fb04 	ldr.w	pc, [sp], #4
   11356:	bf00      	nop
   11358:	0000e121 	.word	0x0000e121

0001135c <usbdc_cb_ctl_req>:
{
   1135c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11360:	4ba6      	ldr	r3, [pc, #664]	; (115fc <usbdc_cb_ctl_req+0x2a0>)
   11362:	2200      	movs	r2, #0
{
   11364:	4605      	mov	r5, r0
   11366:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11368:	4798      	blx	r3
   1136a:	1c43      	adds	r3, r0, #1
   1136c:	d008      	beq.n	11380 <usbdc_cb_ctl_req+0x24>
   1136e:	2801      	cmp	r0, #1
   11370:	d034      	beq.n	113dc <usbdc_cb_ctl_req+0x80>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11372:	7823      	ldrb	r3, [r4, #0]
   11374:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
   11378:	d004      	beq.n	11384 <usbdc_cb_ctl_req+0x28>
   1137a:	2a80      	cmp	r2, #128	; 0x80
   1137c:	f000 80ca 	beq.w	11514 <usbdc_cb_ctl_req+0x1b8>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11380:	2000      	movs	r0, #0
   11382:	e02b      	b.n	113dc <usbdc_cb_ctl_req+0x80>
	switch (req->bRequest) {
   11384:	7862      	ldrb	r2, [r4, #1]
   11386:	3a01      	subs	r2, #1
   11388:	2a0a      	cmp	r2, #10
   1138a:	d8f9      	bhi.n	11380 <usbdc_cb_ctl_req+0x24>
   1138c:	a101      	add	r1, pc, #4	; (adr r1, 11394 <usbdc_cb_ctl_req+0x38>)
   1138e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   11392:	bf00      	nop
   11394:	00011447 	.word	0x00011447
   11398:	00011381 	.word	0x00011381
   1139c:	0001146d 	.word	0x0001146d
   113a0:	00011381 	.word	0x00011381
   113a4:	000113cb 	.word	0x000113cb
   113a8:	00011381 	.word	0x00011381
   113ac:	00011381 	.word	0x00011381
   113b0:	00011381 	.word	0x00011381
   113b4:	000113c1 	.word	0x000113c1
   113b8:	00011381 	.word	0x00011381
   113bc:	00011487 	.word	0x00011487
		if (!usbdc_set_config(req->wValue)) {
   113c0:	8862      	ldrh	r2, [r4, #2]
   113c2:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
   113c4:	b96a      	cbnz	r2, 113e2 <usbdc_cb_ctl_req+0x86>
		usbdc_unconfig();
   113c6:	4b8e      	ldr	r3, [pc, #568]	; (11600 <usbdc_cb_ctl_req+0x2a4>)
   113c8:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   113ca:	2200      	movs	r2, #0
   113cc:	2301      	movs	r3, #1
   113ce:	4611      	mov	r1, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   113d0:	4c8c      	ldr	r4, [pc, #560]	; (11604 <usbdc_cb_ctl_req+0x2a8>)
   113d2:	4628      	mov	r0, r5
   113d4:	47a0      	blx	r4
   113d6:	fab0 f080 	clz	r0, r0
   113da:	0940      	lsrs	r0, r0, #5
}
   113dc:	b004      	add	sp, #16
   113de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   113e2:	4c89      	ldr	r4, [pc, #548]	; (11608 <usbdc_cb_ctl_req+0x2ac>)
   113e4:	6823      	ldr	r3, [r4, #0]
   113e6:	e9d3 0100 	ldrd	r0, r1, [r3]
   113ea:	4b88      	ldr	r3, [pc, #544]	; (1160c <usbdc_cb_ctl_req+0x2b0>)
   113ec:	4798      	blx	r3
	if (NULL == cfg_desc) {
   113ee:	2800      	cmp	r0, #0
   113f0:	d0c6      	beq.n	11380 <usbdc_cb_ctl_req+0x24>
   113f2:	78c2      	ldrb	r2, [r0, #3]
   113f4:	7883      	ldrb	r3, [r0, #2]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   113f6:	4f86      	ldr	r7, [pc, #536]	; (11610 <usbdc_cb_ctl_req+0x2b4>)
   113f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
   113fc:	fa10 f183 	uxtah	r1, r0, r3
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11400:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
   11402:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11404:	47b8      	blx	r7
	uint8_t                 last_iface = 0xFF;
   11406:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11408:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
   1140a:	9a02      	ldr	r2, [sp, #8]
   1140c:	2a00      	cmp	r2, #0
   1140e:	d0dc      	beq.n	113ca <usbdc_cb_ctl_req+0x6e>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   11410:	f892 8002 	ldrb.w	r8, [r2, #2]
   11414:	4598      	cmp	r8, r3
   11416:	d014      	beq.n	11442 <usbdc_cb_ctl_req+0xe6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   11418:	6926      	ldr	r6, [r4, #16]
			while (NULL != func) {
   1141a:	b94e      	cbnz	r6, 11430 <usbdc_cb_ctl_req+0xd4>
		desc.sod = usb_desc_next(desc.sod);
   1141c:	9802      	ldr	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   1141e:	9903      	ldr	r1, [sp, #12]
	return (desc + usb_desc_len(desc));
   11420:	7803      	ldrb	r3, [r0, #0]
   11422:	2204      	movs	r2, #4
   11424:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
   11426:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11428:	47b8      	blx	r7
   1142a:	4643      	mov	r3, r8
   1142c:	9002      	str	r0, [sp, #8]
   1142e:	e7ec      	b.n	1140a <usbdc_cb_ctl_req+0xae>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   11430:	6873      	ldr	r3, [r6, #4]
   11432:	aa02      	add	r2, sp, #8
   11434:	2100      	movs	r1, #0
   11436:	4630      	mov	r0, r6
   11438:	4798      	blx	r3
   1143a:	2800      	cmp	r0, #0
   1143c:	d0ee      	beq.n	1141c <usbdc_cb_ctl_req+0xc0>
					func = func->next;
   1143e:	6836      	ldr	r6, [r6, #0]
   11440:	e7eb      	b.n	1141a <usbdc_cb_ctl_req+0xbe>
   11442:	4698      	mov	r8, r3
   11444:	e7ea      	b.n	1141c <usbdc_cb_ctl_req+0xc0>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11446:	2b02      	cmp	r3, #2
   11448:	d19a      	bne.n	11380 <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
   1144a:	88e2      	ldrh	r2, [r4, #6]
   1144c:	2a00      	cmp	r2, #0
   1144e:	d197      	bne.n	11380 <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   11450:	88a0      	ldrh	r0, [r4, #4]
   11452:	4b70      	ldr	r3, [pc, #448]	; (11614 <usbdc_cb_ctl_req+0x2b8>)
   11454:	9201      	str	r2, [sp, #4]
   11456:	4611      	mov	r1, r2
   11458:	b2c0      	uxtb	r0, r0
   1145a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   1145c:	9a01      	ldr	r2, [sp, #4]
   1145e:	2301      	movs	r3, #1
		usbdc_xfer(ep, NULL, 0, true);
   11460:	4611      	mov	r1, r2
   11462:	4628      	mov	r0, r5
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11464:	4c67      	ldr	r4, [pc, #412]	; (11604 <usbdc_cb_ctl_req+0x2a8>)
   11466:	47a0      	blx	r4
			return true;
   11468:	2001      	movs	r0, #1
   1146a:	e7b7      	b.n	113dc <usbdc_cb_ctl_req+0x80>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1146c:	2b02      	cmp	r3, #2
   1146e:	d187      	bne.n	11380 <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
   11470:	88e6      	ldrh	r6, [r4, #6]
   11472:	2e00      	cmp	r6, #0
   11474:	d184      	bne.n	11380 <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   11476:	88a0      	ldrh	r0, [r4, #4]
   11478:	4b66      	ldr	r3, [pc, #408]	; (11614 <usbdc_cb_ctl_req+0x2b8>)
   1147a:	2101      	movs	r1, #1
   1147c:	b2c0      	uxtb	r0, r0
   1147e:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11480:	2301      	movs	r3, #1
   11482:	4632      	mov	r2, r6
   11484:	e7ec      	b.n	11460 <usbdc_cb_ctl_req+0x104>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11486:	4d60      	ldr	r5, [pc, #384]	; (11608 <usbdc_cb_ctl_req+0x2ac>)
		return usbdc_set_interface(req->wValue, req->wIndex);
   11488:	8866      	ldrh	r6, [r4, #2]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   1148a:	682b      	ldr	r3, [r5, #0]
   1148c:	7eea      	ldrb	r2, [r5, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
   1148e:	88a7      	ldrh	r7, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11490:	e9d3 0100 	ldrd	r0, r1, [r3]
   11494:	4b5d      	ldr	r3, [pc, #372]	; (1160c <usbdc_cb_ctl_req+0x2b0>)
   11496:	4798      	blx	r3
	if (NULL == ifc) {
   11498:	2800      	cmp	r0, #0
   1149a:	f43f af71 	beq.w	11380 <usbdc_cb_ctl_req+0x24>
	desc.sod = ifc;
   1149e:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
   114a0:	78c2      	ldrb	r2, [r0, #3]
   114a2:	7883      	ldrb	r3, [r0, #2]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   114a4:	4c5a      	ldr	r4, [pc, #360]	; (11610 <usbdc_cb_ctl_req+0x2b4>)
   114a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   114aa:	fa10 f183 	uxtah	r1, r0, r3
   114ae:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   114b0:	2204      	movs	r2, #4
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   114b2:	47a0      	blx	r4
		if (NULL == ifc) {
   114b4:	2800      	cmp	r0, #0
   114b6:	f43f af63 	beq.w	11380 <usbdc_cb_ctl_req+0x24>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   114ba:	7883      	ldrb	r3, [r0, #2]
   114bc:	42bb      	cmp	r3, r7
   114be:	d110      	bne.n	114e2 <usbdc_cb_ctl_req+0x186>
   114c0:	78c3      	ldrb	r3, [r0, #3]
   114c2:	42b3      	cmp	r3, r6
   114c4:	d10d      	bne.n	114e2 <usbdc_cb_ctl_req+0x186>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   114c6:	692c      	ldr	r4, [r5, #16]
	desc.sod = ifc;
   114c8:	9002      	str	r0, [sp, #8]
	while (NULL != func) {
   114ca:	2c00      	cmp	r4, #0
   114cc:	f43f af58 	beq.w	11380 <usbdc_cb_ctl_req+0x24>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   114d0:	2101      	movs	r1, #1
   114d2:	6863      	ldr	r3, [r4, #4]
   114d4:	aa02      	add	r2, sp, #8
   114d6:	4620      	mov	r0, r4
   114d8:	4798      	blx	r3
   114da:	4601      	mov	r1, r0
   114dc:	b140      	cbz	r0, 114f0 <usbdc_cb_ctl_req+0x194>
			func = func->next;
   114de:	6824      	ldr	r4, [r4, #0]
   114e0:	e7f3      	b.n	114ca <usbdc_cb_ctl_req+0x16e>
		desc.sod = usb_desc_next(desc.sod);
   114e2:	9802      	ldr	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   114e4:	9903      	ldr	r1, [sp, #12]
	return (desc + usb_desc_len(desc));
   114e6:	7803      	ldrb	r3, [r0, #0]
   114e8:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
   114ea:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   114ec:	2204      	movs	r2, #4
   114ee:	e7e0      	b.n	114b2 <usbdc_cb_ctl_req+0x156>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   114f0:	6863      	ldr	r3, [r4, #4]
   114f2:	aa02      	add	r2, sp, #8
   114f4:	4620      	mov	r0, r4
   114f6:	4798      	blx	r3
   114f8:	2800      	cmp	r0, #0
   114fa:	f47f af41 	bne.w	11380 <usbdc_cb_ctl_req+0x24>
			if (alt_set) {
   114fe:	b126      	cbz	r6, 1150a <usbdc_cb_ctl_req+0x1ae>
				usbdc.ifc_alt_map |= 1 << ifc_id;
   11500:	2301      	movs	r3, #1
   11502:	40bb      	lsls	r3, r7
   11504:	7f6f      	ldrb	r7, [r5, #29]
   11506:	431f      	orrs	r7, r3
   11508:	776f      	strb	r7, [r5, #29]
			usbdc_xfer(0, NULL, 0, 0);
   1150a:	2300      	movs	r3, #0
   1150c:	461a      	mov	r2, r3
   1150e:	4619      	mov	r1, r3
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11510:	4618      	mov	r0, r3
   11512:	e7a7      	b.n	11464 <usbdc_cb_ctl_req+0x108>
	switch (req->bRequest) {
   11514:	7862      	ldrb	r2, [r4, #1]
   11516:	2a0a      	cmp	r2, #10
   11518:	f63f af32 	bhi.w	11380 <usbdc_cb_ctl_req+0x24>
   1151c:	a101      	add	r1, pc, #4	; (adr r1, 11524 <usbdc_cb_ctl_req+0x1c8>)
   1151e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   11522:	bf00      	nop
   11524:	0001161d 	.word	0x0001161d
   11528:	00011381 	.word	0x00011381
   1152c:	00011381 	.word	0x00011381
   11530:	00011381 	.word	0x00011381
   11534:	00011381 	.word	0x00011381
   11538:	00011381 	.word	0x00011381
   1153c:	00011551 	.word	0x00011551
   11540:	00011381 	.word	0x00011381
   11544:	000115ed 	.word	0x000115ed
   11548:	00011381 	.word	0x00011381
   1154c:	0001164b 	.word	0x0001164b
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11550:	8863      	ldrh	r3, [r4, #2]
   11552:	0a19      	lsrs	r1, r3, #8
	switch (type) {
   11554:	2902      	cmp	r1, #2
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11556:	460a      	mov	r2, r1
	switch (type) {
   11558:	d016      	beq.n	11588 <usbdc_cb_ctl_req+0x22c>
   1155a:	2903      	cmp	r1, #3
   1155c:	d031      	beq.n	115c2 <usbdc_cb_ctl_req+0x266>
   1155e:	2901      	cmp	r1, #1
   11560:	f47f af0e 	bne.w	11380 <usbdc_cb_ctl_req+0x24>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11564:	4b28      	ldr	r3, [pc, #160]	; (11608 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   11566:	88e4      	ldrh	r4, [r4, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11568:	681b      	ldr	r3, [r3, #0]
   1156a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1156e:	4b28      	ldr	r3, [pc, #160]	; (11610 <usbdc_cb_ctl_req+0x2b4>)
   11570:	4798      	blx	r3
	if (!dev_desc) {
   11572:	4601      	mov	r1, r0
   11574:	2800      	cmp	r0, #0
   11576:	f43f af03 	beq.w	11380 <usbdc_cb_ctl_req+0x24>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   1157a:	2c12      	cmp	r4, #18
   1157c:	4622      	mov	r2, r4
   1157e:	f04f 0300 	mov.w	r3, #0
   11582:	bf28      	it	cs
   11584:	2212      	movcs	r2, #18
   11586:	e723      	b.n	113d0 <usbdc_cb_ctl_req+0x74>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11588:	4a1f      	ldr	r2, [pc, #124]	; (11608 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   1158a:	88e4      	ldrh	r4, [r4, #6]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   1158c:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   1158e:	7f16      	ldrb	r6, [r2, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11590:	1c5a      	adds	r2, r3, #1
   11592:	e9d0 0100 	ldrd	r0, r1, [r0]
   11596:	4b1d      	ldr	r3, [pc, #116]	; (1160c <usbdc_cb_ctl_req+0x2b0>)
   11598:	b2d2      	uxtb	r2, r2
   1159a:	4798      	blx	r3
	if (NULL == cfg_desc) {
   1159c:	4601      	mov	r1, r0
   1159e:	2800      	cmp	r0, #0
   115a0:	f43f aeee 	beq.w	11380 <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
   115a4:	78c3      	ldrb	r3, [r0, #3]
   115a6:	7882      	ldrb	r2, [r0, #2]
   115a8:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   115ac:	b292      	uxth	r2, r2
	if (length <= total_len) {
   115ae:	4294      	cmp	r4, r2
   115b0:	d91a      	bls.n	115e8 <usbdc_cb_ctl_req+0x28c>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   115b2:	3e01      	subs	r6, #1
   115b4:	4226      	tst	r6, r4
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   115b6:	bf0c      	ite	eq
   115b8:	2301      	moveq	r3, #1
   115ba:	2300      	movne	r3, #0
   115bc:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   115be:	4622      	mov	r2, r4
   115c0:	e706      	b.n	113d0 <usbdc_cb_ctl_req+0x74>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   115c2:	4a11      	ldr	r2, [pc, #68]	; (11608 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   115c4:	88e4      	ldrh	r4, [r4, #6]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   115c6:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   115c8:	7f16      	ldrb	r6, [r2, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   115ca:	e9d0 0100 	ldrd	r0, r1, [r0]
   115ce:	b2da      	uxtb	r2, r3
   115d0:	4b11      	ldr	r3, [pc, #68]	; (11618 <usbdc_cb_ctl_req+0x2bc>)
   115d2:	4798      	blx	r3
	if (NULL == str_desc) {
   115d4:	4601      	mov	r1, r0
   115d6:	2800      	cmp	r0, #0
   115d8:	f43f aed2 	beq.w	11380 <usbdc_cb_ctl_req+0x24>
	if (length <= str_desc[0]) {
   115dc:	7802      	ldrb	r2, [r0, #0]
   115de:	4294      	cmp	r4, r2
   115e0:	d902      	bls.n	115e8 <usbdc_cb_ctl_req+0x28c>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   115e2:	1e73      	subs	r3, r6, #1
   115e4:	4223      	tst	r3, r4
   115e6:	e7e6      	b.n	115b6 <usbdc_cb_ctl_req+0x25a>
		need_zlp = false;
   115e8:	2300      	movs	r3, #0
   115ea:	e7e8      	b.n	115be <usbdc_cb_ctl_req+0x262>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   115ec:	4906      	ldr	r1, [pc, #24]	; (11608 <usbdc_cb_ctl_req+0x2ac>)
   115ee:	694b      	ldr	r3, [r1, #20]
   115f0:	7eca      	ldrb	r2, [r1, #27]
   115f2:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   115f4:	2300      	movs	r3, #0
   115f6:	2201      	movs	r2, #1
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   115f8:	6949      	ldr	r1, [r1, #20]
   115fa:	e732      	b.n	11462 <usbdc_cb_ctl_req+0x106>
   115fc:	00011211 	.word	0x00011211
   11600:	000111d5 	.word	0x000111d5
   11604:	0001133d 	.word	0x0001133d
   11608:	20001094 	.word	0x20001094
   1160c:	0000ae05 	.word	0x0000ae05
   11610:	0000adcd 	.word	0x0000adcd
   11614:	0000e265 	.word	0x0000e265
   11618:	0000ae41 	.word	0x0000ae41
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   1161c:	f003 011f 	and.w	r1, r3, #31
   11620:	f013 031e 	ands.w	r3, r3, #30
   11624:	d00b      	beq.n	1163e <usbdc_cb_ctl_req+0x2e2>
   11626:	2902      	cmp	r1, #2
   11628:	f47f aeaa 	bne.w	11380 <usbdc_cb_ctl_req+0x24>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   1162c:	88a0      	ldrh	r0, [r4, #4]
   1162e:	4b17      	ldr	r3, [pc, #92]	; (1168c <usbdc_cb_ctl_req+0x330>)
   11630:	b2c0      	uxtb	r0, r0
   11632:	4798      	blx	r3
		if (st < 0) {
   11634:	1e03      	subs	r3, r0, #0
   11636:	f6ff aea3 	blt.w	11380 <usbdc_cb_ctl_req+0x24>
		st = st & 0x1;
   1163a:	f003 0301 	and.w	r3, r3, #1
	memcpy(usbdc.ctrl_buf, &st, 2);
   1163e:	4914      	ldr	r1, [pc, #80]	; (11690 <usbdc_cb_ctl_req+0x334>)
   11640:	694a      	ldr	r2, [r1, #20]
   11642:	8013      	strh	r3, [r2, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11644:	2300      	movs	r3, #0
   11646:	2202      	movs	r2, #2
   11648:	e7d6      	b.n	115f8 <usbdc_cb_ctl_req+0x29c>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   1164a:	4911      	ldr	r1, [pc, #68]	; (11690 <usbdc_cb_ctl_req+0x334>)
   1164c:	88a2      	ldrh	r2, [r4, #4]
   1164e:	7f4b      	ldrb	r3, [r1, #29]
   11650:	4113      	asrs	r3, r2
   11652:	f013 0301 	ands.w	r3, r3, #1
   11656:	460e      	mov	r6, r1
   11658:	d00c      	beq.n	11674 <usbdc_cb_ctl_req+0x318>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   1165a:	690d      	ldr	r5, [r1, #16]
	while (NULL != func) {
   1165c:	2d00      	cmp	r5, #0
   1165e:	f43f ae8f 	beq.w	11380 <usbdc_cb_ctl_req+0x24>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11662:	686b      	ldr	r3, [r5, #4]
   11664:	4622      	mov	r2, r4
   11666:	2102      	movs	r1, #2
   11668:	4628      	mov	r0, r5
   1166a:	4798      	blx	r3
   1166c:	2800      	cmp	r0, #0
   1166e:	da06      	bge.n	1167e <usbdc_cb_ctl_req+0x322>
			func = func->next;
   11670:	682d      	ldr	r5, [r5, #0]
   11672:	e7f3      	b.n	1165c <usbdc_cb_ctl_req+0x300>
		usbdc.ctrl_buf[0] = 0;
   11674:	694a      	ldr	r2, [r1, #20]
   11676:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11678:	6949      	ldr	r1, [r1, #20]
   1167a:	2201      	movs	r2, #1
   1167c:	e748      	b.n	11510 <usbdc_cb_ctl_req+0x1b4>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   1167e:	6973      	ldr	r3, [r6, #20]
   11680:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11682:	6971      	ldr	r1, [r6, #20]
   11684:	2300      	movs	r3, #0
   11686:	2201      	movs	r2, #1
   11688:	e742      	b.n	11510 <usbdc_cb_ctl_req+0x1b4>
   1168a:	bf00      	nop
   1168c:	0000e265 	.word	0x0000e265
   11690:	20001094 	.word	0x20001094

00011694 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
   11694:	2801      	cmp	r0, #1
   11696:	d005      	beq.n	116a4 <usbdc_register_handler+0x10>
   11698:	2802      	cmp	r0, #2
   1169a:	d005      	beq.n	116a8 <usbdc_register_handler+0x14>
   1169c:	b930      	cbnz	r0, 116ac <usbdc_register_handler+0x18>
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   1169e:	4804      	ldr	r0, [pc, #16]	; (116b0 <usbdc_register_handler+0x1c>)
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   116a0:	4b04      	ldr	r3, [pc, #16]	; (116b4 <usbdc_register_handler+0x20>)
   116a2:	4718      	bx	r3
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   116a4:	4804      	ldr	r0, [pc, #16]	; (116b8 <usbdc_register_handler+0x24>)
   116a6:	e7fb      	b.n	116a0 <usbdc_register_handler+0xc>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   116a8:	4804      	ldr	r0, [pc, #16]	; (116bc <usbdc_register_handler+0x28>)
   116aa:	e7f9      	b.n	116a0 <usbdc_register_handler+0xc>
		break;
	default:
		break;
	}
}
   116ac:	4770      	bx	lr
   116ae:	bf00      	nop
   116b0:	20001098 	.word	0x20001098
   116b4:	0000eaad 	.word	0x0000eaad
   116b8:	2000109c 	.word	0x2000109c
   116bc:	200010a0 	.word	0x200010a0

000116c0 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   116c0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
   116c2:	4604      	mov	r4, r0
   116c4:	3800      	subs	r0, #0
   116c6:	bf18      	it	ne
   116c8:	2001      	movne	r0, #1
   116ca:	490c      	ldr	r1, [pc, #48]	; (116fc <usbdc_init+0x3c>)
   116cc:	4b0c      	ldr	r3, [pc, #48]	; (11700 <usbdc_init+0x40>)
   116ce:	f240 3255 	movw	r2, #853	; 0x355
   116d2:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   116d4:	4b0b      	ldr	r3, [pc, #44]	; (11704 <usbdc_init+0x44>)
   116d6:	4798      	blx	r3
	if (rc < 0) {
   116d8:	2800      	cmp	r0, #0
   116da:	db0e      	blt.n	116fa <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
   116dc:	4b0a      	ldr	r3, [pc, #40]	; (11708 <usbdc_init+0x48>)
   116de:	4d0b      	ldr	r5, [pc, #44]	; (1170c <usbdc_init+0x4c>)
   116e0:	2220      	movs	r2, #32
   116e2:	4618      	mov	r0, r3
   116e4:	2100      	movs	r1, #0
   116e6:	47a8      	blx	r5
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   116e8:	4909      	ldr	r1, [pc, #36]	; (11710 <usbdc_init+0x50>)
	usbdc.ctrl_buf = ctrl_buf;
   116ea:	6144      	str	r4, [r0, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   116ec:	4c09      	ldr	r4, [pc, #36]	; (11714 <usbdc_init+0x54>)
   116ee:	2000      	movs	r0, #0
   116f0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   116f2:	2001      	movs	r0, #1
   116f4:	4908      	ldr	r1, [pc, #32]	; (11718 <usbdc_init+0x58>)
   116f6:	47a0      	blx	r4

	return 0;
   116f8:	2000      	movs	r0, #0
}
   116fa:	bd38      	pop	{r3, r4, r5, pc}
   116fc:	000152c8 	.word	0x000152c8
   11700:	0000cb4d 	.word	0x0000cb4d
   11704:	0000dfc1 	.word	0x0000dfc1
   11708:	20001094 	.word	0x20001094
   1170c:	00012519 	.word	0x00012519
   11710:	00011249 	.word	0x00011249
   11714:	0000e029 	.word	0x0000e029
   11718:	00011325 	.word	0x00011325

0001171c <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   1171c:	4601      	mov	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
   1171e:	4b01      	ldr	r3, [pc, #4]	; (11724 <usbdc_register_function+0x8>)
   11720:	4801      	ldr	r0, [pc, #4]	; (11728 <usbdc_register_function+0xc>)
   11722:	4718      	bx	r3
   11724:	0000eaad 	.word	0x0000eaad
   11728:	200010a4 	.word	0x200010a4

0001172c <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   1172c:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
   1172e:	4b0a      	ldr	r3, [pc, #40]	; (11758 <usbdc_start+0x2c>)
   11730:	7e9c      	ldrb	r4, [r3, #26]
   11732:	b954      	cbnz	r4, 1174a <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
   11734:	b160      	cbz	r0, 11750 <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   11736:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
   11738:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
   1173a:	79d2      	ldrb	r2, [r2, #7]
   1173c:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   1173e:	2201      	movs	r2, #1
   11740:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   11742:	4b06      	ldr	r3, [pc, #24]	; (1175c <usbdc_start+0x30>)
   11744:	4798      	blx	r3
	return ERR_NONE;
   11746:	4620      	mov	r0, r4
}
   11748:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
   1174a:	f06f 0003 	mvn.w	r0, #3
   1174e:	e7fb      	b.n	11748 <usbdc_start+0x1c>
		return ERR_BAD_DATA;
   11750:	f06f 0008 	mvn.w	r0, #8
   11754:	e7f8      	b.n	11748 <usbdc_start+0x1c>
   11756:	bf00      	nop
   11758:	20001094 	.word	0x20001094
   1175c:	0000e031 	.word	0x0000e031

00011760 <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
   11760:	4b00      	ldr	r3, [pc, #0]	; (11764 <usbdc_attach+0x4>)
   11762:	4718      	bx	r3
   11764:	0000e039 	.word	0x0000e039

00011768 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
   11768:	4b01      	ldr	r3, [pc, #4]	; (11770 <usbdc_get_ctrl_buffer+0x8>)
   1176a:	6958      	ldr	r0, [r3, #20]
   1176c:	4770      	bx	lr
   1176e:	bf00      	nop
   11770:	20001094 	.word	0x20001094

00011774 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
   11774:	4b03      	ldr	r3, [pc, #12]	; (11784 <usbdc_get_state+0x10>)
   11776:	7e98      	ldrb	r0, [r3, #26]
   11778:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
   1177c:	bf18      	it	ne
   1177e:	2010      	movne	r0, #16
   11780:	4770      	bx	lr
   11782:	bf00      	nop
   11784:	20001094 	.word	0x20001094

00011788 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
   11788:	6903      	ldr	r3, [r0, #16]
   1178a:	420b      	tst	r3, r1
   1178c:	d1fc      	bne.n	11788 <hri_tc_wait_for_sync>
	};
}
   1178e:	4770      	bx	lr

00011790 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
   11790:	68c0      	ldr	r0, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
   11792:	6803      	ldr	r3, [r0, #0]
   11794:	f043 0302 	orr.w	r3, r3, #2
   11798:	6003      	str	r3, [r0, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   1179a:	2103      	movs	r1, #3
   1179c:	4b00      	ldr	r3, [pc, #0]	; (117a0 <_tc_timer_start+0x10>)
   1179e:	4718      	bx	r3
   117a0:	00011789 	.word	0x00011789

000117a4 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
   117a4:	68c0      	ldr	r0, [r0, #12]
{
   117a6:	b508      	push	{r3, lr}
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   117a8:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   117aa:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   117ae:	2b02      	cmp	r3, #2
   117b0:	d104      	bne.n	117bc <_tc_timer_get_period+0x18>
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   117b2:	4b0e      	ldr	r3, [pc, #56]	; (117ec <_tc_timer_get_period+0x48>)
   117b4:	21c0      	movs	r1, #192	; 0xc0
   117b6:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
   117b8:	69c0      	ldr	r0, [r0, #28]
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
}
   117ba:	bd08      	pop	{r3, pc}
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   117bc:	6803      	ldr	r3, [r0, #0]
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   117be:	f013 0f0c 	tst.w	r3, #12
   117c2:	d105      	bne.n	117d0 <_tc_timer_get_period+0x2c>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   117c4:	4b09      	ldr	r3, [pc, #36]	; (117ec <_tc_timer_get_period+0x48>)
   117c6:	21c0      	movs	r1, #192	; 0xc0
   117c8:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
   117ca:	8b80      	ldrh	r0, [r0, #28]
   117cc:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
   117ce:	e7f4      	b.n	117ba <_tc_timer_get_period+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   117d0:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   117d2:	f3c3 0381 	ubfx	r3, r3, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   117d6:	2b01      	cmp	r3, #1
   117d8:	d105      	bne.n	117e6 <_tc_timer_get_period+0x42>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   117da:	4b04      	ldr	r3, [pc, #16]	; (117ec <_tc_timer_get_period+0x48>)
   117dc:	2120      	movs	r1, #32
   117de:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
   117e0:	7ec0      	ldrb	r0, [r0, #27]
   117e2:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
   117e4:	e7e9      	b.n	117ba <_tc_timer_get_period+0x16>
	return 0;
   117e6:	2000      	movs	r0, #0
   117e8:	e7e7      	b.n	117ba <_tc_timer_get_period+0x16>
   117ea:	bf00      	nop
   117ec:	00011789 	.word	0x00011789

000117f0 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
   117f0:	b508      	push	{r3, lr}
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
   117f2:	68c0      	ldr	r0, [r0, #12]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   117f4:	4b03      	ldr	r3, [pc, #12]	; (11804 <_tc_timer_is_started+0x14>)
   117f6:	2103      	movs	r1, #3
   117f8:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   117fa:	6800      	ldr	r0, [r0, #0]
}
   117fc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11800:	bd08      	pop	{r3, pc}
   11802:	bf00      	nop
   11804:	00011789 	.word	0x00011789

00011808 <tc_interrupt_handler>:
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
	void *const hw = device->hw;
   11808:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
   1180a:	7a91      	ldrb	r1, [r2, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
   1180c:	07c9      	lsls	r1, r1, #31
   1180e:	d503      	bpl.n	11818 <tc_interrupt_handler+0x10>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
   11810:	2101      	movs	r1, #1
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
   11812:	6803      	ldr	r3, [r0, #0]
   11814:	7291      	strb	r1, [r2, #10]
   11816:	4718      	bx	r3
	}
}
   11818:	4770      	bx	lr
	...

0001181c <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
   1181c:	b570      	push	{r4, r5, r6, lr}
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   1181e:	4d15      	ldr	r5, [pc, #84]	; (11874 <get_tc_index+0x58>)
{
   11820:	4606      	mov	r6, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   11822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   11824:	b088      	sub	sp, #32
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   11826:	466c      	mov	r4, sp
   11828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1182a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1182e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   11832:	466a      	mov	r2, sp
   11834:	2300      	movs	r3, #0
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
   11836:	f852 1b04 	ldr.w	r1, [r2], #4
   1183a:	42b1      	cmp	r1, r6
   1183c:	d104      	bne.n	11848 <get_tc_index+0x2c>
			return i;
   1183e:	b2d8      	uxtb	r0, r3
		if (_tcs[i].number == index) {
   11840:	b93b      	cbnz	r3, 11852 <get_tc_index+0x36>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
   11842:	4618      	mov	r0, r3
			return i;
   11844:	b240      	sxtb	r0, r0
   11846:	e012      	b.n	1186e <get_tc_index+0x52>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   11848:	3301      	adds	r3, #1
   1184a:	2b08      	cmp	r3, #8
   1184c:	d1f3      	bne.n	11836 <get_tc_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
   1184e:	2000      	movs	r0, #0
   11850:	e7f8      	b.n	11844 <get_tc_index+0x28>
		if (_tcs[i].number == index) {
   11852:	2801      	cmp	r0, #1
   11854:	d0f6      	beq.n	11844 <get_tc_index+0x28>
   11856:	2802      	cmp	r0, #2
   11858:	d0f4      	beq.n	11844 <get_tc_index+0x28>
   1185a:	2803      	cmp	r0, #3
   1185c:	d0f2      	beq.n	11844 <get_tc_index+0x28>
	ASSERT(false);
   1185e:	2000      	movs	r0, #0
   11860:	4905      	ldr	r1, [pc, #20]	; (11878 <get_tc_index+0x5c>)
   11862:	4b06      	ldr	r3, [pc, #24]	; (1187c <get_tc_index+0x60>)
   11864:	f240 1267 	movw	r2, #359	; 0x167
   11868:	4798      	blx	r3
	return -1;
   1186a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1186e:	b008      	add	sp, #32
   11870:	bd70      	pop	{r4, r5, r6, pc}
   11872:	bf00      	nop
   11874:	000152f4 	.word	0x000152f4
   11878:	000152de 	.word	0x000152de
   1187c:	0000cb4d 	.word	0x0000cb4d

00011880 <_tc_timer_set_irq>:
{
   11880:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
   11882:	4b0a      	ldr	r3, [pc, #40]	; (118ac <_tc_timer_set_irq+0x2c>)
   11884:	68c0      	ldr	r0, [r0, #12]
   11886:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   11888:	4b09      	ldr	r3, [pc, #36]	; (118b0 <_tc_timer_set_irq+0x30>)
   1188a:	490a      	ldr	r1, [pc, #40]	; (118b4 <_tc_timer_set_irq+0x34>)
	int8_t      i  = get_tc_index(hw);
   1188c:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
   1188e:	f44f 7291 	mov.w	r2, #290	; 0x122
   11892:	2001      	movs	r0, #1
   11894:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
   11896:	4808      	ldr	r0, [pc, #32]	; (118b8 <_tc_timer_set_irq+0x38>)
   11898:	2314      	movs	r3, #20
   1189a:	fb03 0404 	mla	r4, r3, r4, r0
   1189e:	4b07      	ldr	r3, [pc, #28]	; (118bc <_tc_timer_set_irq+0x3c>)
   118a0:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
   118a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_irq_set(_tcs[i].irq);
   118a8:	4718      	bx	r3
   118aa:	bf00      	nop
   118ac:	0001181d 	.word	0x0001181d
   118b0:	0000cb4d 	.word	0x0000cb4d
   118b4:	000152de 	.word	0x000152de
   118b8:	000152f4 	.word	0x000152f4
   118bc:	0000b025 	.word	0x0000b025

000118c0 <_tc_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
   118c0:	68c0      	ldr	r0, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   118c2:	6803      	ldr	r3, [r0, #0]
   118c4:	f023 0302 	bic.w	r3, r3, #2
   118c8:	6003      	str	r3, [r0, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   118ca:	2103      	movs	r1, #3
   118cc:	4b00      	ldr	r3, [pc, #0]	; (118d0 <_tc_timer_stop+0x10>)
   118ce:	4718      	bx	r3
   118d0:	00011789 	.word	0x00011789

000118d4 <_tc_timer_deinit>:
{
   118d4:	b570      	push	{r4, r5, r6, lr}
	void *const hw = device->hw;
   118d6:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
   118d8:	4b17      	ldr	r3, [pc, #92]	; (11938 <_tc_timer_deinit+0x64>)
   118da:	4620      	mov	r0, r4
   118dc:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   118de:	4b17      	ldr	r3, [pc, #92]	; (1193c <_tc_timer_deinit+0x68>)
   118e0:	4917      	ldr	r1, [pc, #92]	; (11940 <_tc_timer_deinit+0x6c>)
	int8_t      i  = get_tc_index(hw);
   118e2:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
   118e4:	22cd      	movs	r2, #205	; 0xcd
   118e6:	2001      	movs	r0, #1
   118e8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
   118ea:	4816      	ldr	r0, [pc, #88]	; (11944 <_tc_timer_deinit+0x70>)
   118ec:	2314      	movs	r3, #20
   118ee:	fb03 0505 	mla	r5, r3, r5, r0
   118f2:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   118f6:	2b00      	cmp	r3, #0
   118f8:	db0d      	blt.n	11916 <_tc_timer_deinit+0x42>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   118fa:	095a      	lsrs	r2, r3, #5
   118fc:	2101      	movs	r1, #1
   118fe:	f003 031f 	and.w	r3, r3, #31
   11902:	fa01 f303 	lsl.w	r3, r1, r3
   11906:	3220      	adds	r2, #32
   11908:	490f      	ldr	r1, [pc, #60]	; (11948 <_tc_timer_deinit+0x74>)
   1190a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   1190e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11912:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   11916:	6823      	ldr	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   11918:	4a0c      	ldr	r2, [pc, #48]	; (1194c <_tc_timer_deinit+0x78>)
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   1191a:	f023 0302 	bic.w	r3, r3, #2
   1191e:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   11920:	2103      	movs	r1, #3
   11922:	4620      	mov	r0, r4
   11924:	4790      	blx	r2
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
   11926:	6823      	ldr	r3, [r4, #0]
   11928:	f043 0301 	orr.w	r3, r3, #1
   1192c:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
   1192e:	2101      	movs	r1, #1
}
   11930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11934:	4710      	bx	r2
   11936:	bf00      	nop
   11938:	0001181d 	.word	0x0001181d
   1193c:	0000cb4d 	.word	0x0000cb4d
   11940:	000152de 	.word	0x000152de
   11944:	000152f4 	.word	0x000152f4
   11948:	e000e100 	.word	0xe000e100
   1194c:	00011789 	.word	0x00011789

00011950 <_tc_timer_init>:
{
   11950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int8_t i = get_tc_index(hw);
   11954:	4b51      	ldr	r3, [pc, #324]	; (11a9c <_tc_timer_init+0x14c>)
{
   11956:	4607      	mov	r7, r0
	int8_t i = get_tc_index(hw);
   11958:	4608      	mov	r0, r1
{
   1195a:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
   1195c:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   1195e:	4b50      	ldr	r3, [pc, #320]	; (11aa0 <_tc_timer_init+0x150>)
   11960:	4950      	ldr	r1, [pc, #320]	; (11aa4 <_tc_timer_init+0x154>)
	device->hw = hw;
   11962:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
   11964:	22a0      	movs	r2, #160	; 0xa0
	int8_t i = get_tc_index(hw);
   11966:	4606      	mov	r6, r0
	ASSERT(ARRAY_SIZE(_tcs));
   11968:	2001      	movs	r0, #1
   1196a:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
   1196c:	6923      	ldr	r3, [r4, #16]
   1196e:	4a4e      	ldr	r2, [pc, #312]	; (11aa8 <_tc_timer_init+0x158>)
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
   11970:	f013 0f01 	tst.w	r3, #1
   11974:	d112      	bne.n	1199c <_tc_timer_init+0x4c>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   11976:	2103      	movs	r1, #3
   11978:	4620      	mov	r0, r4
   1197a:	4790      	blx	r2
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   1197c:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
   1197e:	079b      	lsls	r3, r3, #30
   11980:	d507      	bpl.n	11992 <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   11982:	6823      	ldr	r3, [r4, #0]
   11984:	f023 0302 	bic.w	r3, r3, #2
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   11988:	2103      	movs	r1, #3
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   1198a:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   1198c:	4790      	blx	r2
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
   1198e:	2102      	movs	r1, #2
   11990:	4790      	blx	r2
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
   11992:	2301      	movs	r3, #1
   11994:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   11996:	2103      	movs	r1, #3
   11998:	4620      	mov	r0, r4
   1199a:	4790      	blx	r2
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
   1199c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 11ac4 <_tc_timer_init+0x174>
   119a0:	2514      	movs	r5, #20
   119a2:	fb05 9506 	mla	r5, r5, r6, r9
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
   119a6:	2101      	movs	r1, #1
   119a8:	4620      	mov	r0, r4
   119aa:	4790      	blx	r2
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
   119ac:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
   119b0:	f8c4 8000 	str.w	r8, [r4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   119b4:	2103      	movs	r1, #3
   119b6:	4790      	blx	r2
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
   119b8:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
   119bc:	73e3      	strb	r3, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
   119be:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
   119c0:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
   119c2:	2301      	movs	r3, #1
   119c4:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
   119c6:	f008 030c 	and.w	r3, r8, #12
   119ca:	2b08      	cmp	r3, #8
   119cc:	d13b      	bne.n	11a46 <_tc_timer_init+0xf6>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
   119ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   119d0:	61e3      	str	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   119d2:	21c0      	movs	r1, #192	; 0xc0
   119d4:	4790      	blx	r2
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
   119d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   119d8:	6223      	str	r3, [r4, #32]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   119da:	21c0      	movs	r1, #192	; 0xc0
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   119dc:	4620      	mov	r0, r4
   119de:	4790      	blx	r2
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
   119e0:	2301      	movs	r3, #1
   119e2:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
   119e4:	4b31      	ldr	r3, [pc, #196]	; (11aac <_tc_timer_init+0x15c>)
   119e6:	429c      	cmp	r4, r3
   119e8:	d146      	bne.n	11a78 <_tc_timer_init+0x128>
		_tc0_dev = (struct _timer_device *)dev;
   119ea:	4b31      	ldr	r3, [pc, #196]	; (11ab0 <_tc_timer_init+0x160>)
   119ec:	601f      	str	r7, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
   119ee:	2314      	movs	r3, #20
   119f0:	fb03 9306 	mla	r3, r3, r6, r9
   119f4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   119f8:	2b00      	cmp	r3, #0
   119fa:	db0d      	blt.n	11a18 <_tc_timer_init+0xc8>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   119fc:	095a      	lsrs	r2, r3, #5
   119fe:	2101      	movs	r1, #1
   11a00:	f003 031f 	and.w	r3, r3, #31
   11a04:	fa01 f303 	lsl.w	r3, r1, r3
   11a08:	3220      	adds	r2, #32
   11a0a:	492a      	ldr	r1, [pc, #168]	; (11ab4 <_tc_timer_init+0x164>)
   11a0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   11a10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a14:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
   11a18:	2014      	movs	r0, #20
   11a1a:	fb00 9606 	mla	r6, r0, r6, r9
   11a1e:	f9b6 3022 	ldrsh.w	r3, [r6, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   11a22:	2b00      	cmp	r3, #0
   11a24:	db0c      	blt.n	11a40 <_tc_timer_init+0xf0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11a26:	f003 011f 	and.w	r1, r3, #31
   11a2a:	095b      	lsrs	r3, r3, #5
   11a2c:	009b      	lsls	r3, r3, #2
   11a2e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   11a32:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   11a36:	2201      	movs	r2, #1
   11a38:	408a      	lsls	r2, r1
   11a3a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11a3e:	601a      	str	r2, [r3, #0]
}
   11a40:	2000      	movs	r0, #0
   11a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
   11a46:	b933      	cbnz	r3, 11a56 <_tc_timer_init+0x106>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
   11a48:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   11a4a:	83a3      	strh	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   11a4c:	21c0      	movs	r1, #192	; 0xc0
   11a4e:	4790      	blx	r2
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
   11a50:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   11a52:	83e3      	strh	r3, [r4, #30]
   11a54:	e7c1      	b.n	119da <_tc_timer_init+0x8a>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
   11a56:	2b04      	cmp	r3, #4
   11a58:	d1c2      	bne.n	119e0 <_tc_timer_init+0x90>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
   11a5a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
   11a5e:	7723      	strb	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   11a60:	21c0      	movs	r1, #192	; 0xc0
   11a62:	4790      	blx	r2
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
   11a64:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
   11a68:	7763      	strb	r3, [r4, #29]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   11a6a:	21c0      	movs	r1, #192	; 0xc0
   11a6c:	4790      	blx	r2
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
   11a6e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
   11a72:	76e3      	strb	r3, [r4, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   11a74:	2120      	movs	r1, #32
   11a76:	e7b1      	b.n	119dc <_tc_timer_init+0x8c>
	if (hw == TC1) {
   11a78:	4b0f      	ldr	r3, [pc, #60]	; (11ab8 <_tc_timer_init+0x168>)
   11a7a:	429c      	cmp	r4, r3
   11a7c:	d008      	beq.n	11a90 <_tc_timer_init+0x140>
	if (hw == TC2) {
   11a7e:	4b0f      	ldr	r3, [pc, #60]	; (11abc <_tc_timer_init+0x16c>)
   11a80:	429c      	cmp	r4, r3
   11a82:	d008      	beq.n	11a96 <_tc_timer_init+0x146>
	if (hw == TC3) {
   11a84:	4b0e      	ldr	r3, [pc, #56]	; (11ac0 <_tc_timer_init+0x170>)
   11a86:	429c      	cmp	r4, r3
   11a88:	d1b1      	bne.n	119ee <_tc_timer_init+0x9e>
		_tc3_dev = (struct _timer_device *)dev;
   11a8a:	4b09      	ldr	r3, [pc, #36]	; (11ab0 <_tc_timer_init+0x160>)
   11a8c:	60df      	str	r7, [r3, #12]
   11a8e:	e7ae      	b.n	119ee <_tc_timer_init+0x9e>
		_tc1_dev = (struct _timer_device *)dev;
   11a90:	4b07      	ldr	r3, [pc, #28]	; (11ab0 <_tc_timer_init+0x160>)
   11a92:	605f      	str	r7, [r3, #4]
	if (hw == TC3) {
   11a94:	e7ab      	b.n	119ee <_tc_timer_init+0x9e>
		_tc2_dev = (struct _timer_device *)dev;
   11a96:	4b06      	ldr	r3, [pc, #24]	; (11ab0 <_tc_timer_init+0x160>)
   11a98:	609f      	str	r7, [r3, #8]
	if (hw == TC3) {
   11a9a:	e7a8      	b.n	119ee <_tc_timer_init+0x9e>
   11a9c:	0001181d 	.word	0x0001181d
   11aa0:	0000cb4d 	.word	0x0000cb4d
   11aa4:	000152de 	.word	0x000152de
   11aa8:	00011789 	.word	0x00011789
   11aac:	40003800 	.word	0x40003800
   11ab0:	200010b4 	.word	0x200010b4
   11ab4:	e000e100 	.word	0xe000e100
   11ab8:	40003c00 	.word	0x40003c00
   11abc:	4101a000 	.word	0x4101a000
   11ac0:	4101c000 	.word	0x4101c000
   11ac4:	000152f4 	.word	0x000152f4

00011ac8 <_tc_timer_set_period>:
	void *const hw = device->hw;
   11ac8:	68c0      	ldr	r0, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   11aca:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   11acc:	f3c3 0381 	ubfx	r3, r3, #2, #2
	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   11ad0:	2b02      	cmp	r3, #2
   11ad2:	d103      	bne.n	11adc <_tc_timer_set_period+0x14>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   11ad4:	61c1      	str	r1, [r0, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   11ad6:	21c0      	movs	r1, #192	; 0xc0
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   11ad8:	4b09      	ldr	r3, [pc, #36]	; (11b00 <_tc_timer_set_period+0x38>)
   11ada:	4718      	bx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   11adc:	6803      	ldr	r3, [r0, #0]
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   11ade:	f013 0f0c 	tst.w	r3, #12
   11ae2:	d102      	bne.n	11aea <_tc_timer_set_period+0x22>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
   11ae4:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   11ae6:	8381      	strh	r1, [r0, #28]
   11ae8:	e7f5      	b.n	11ad6 <_tc_timer_set_period+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   11aea:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   11aec:	f3c3 0381 	ubfx	r3, r3, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   11af0:	2b01      	cmp	r3, #1
   11af2:	d103      	bne.n	11afc <_tc_timer_set_period+0x34>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
   11af4:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
   11af6:	76c1      	strb	r1, [r0, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   11af8:	2120      	movs	r1, #32
   11afa:	e7ed      	b.n	11ad8 <_tc_timer_set_period+0x10>
}
   11afc:	4770      	bx	lr
   11afe:	bf00      	nop
   11b00:	00011789 	.word	0x00011789

00011b04 <_tc_get_timer>:
}
   11b04:	4800      	ldr	r0, [pc, #0]	; (11b08 <_tc_get_timer+0x4>)
   11b06:	4770      	bx	lr
   11b08:	20000528 	.word	0x20000528

00011b0c <TC0_Handler>:
	tc_interrupt_handler(_tc0_dev);
   11b0c:	4b01      	ldr	r3, [pc, #4]	; (11b14 <TC0_Handler+0x8>)
   11b0e:	6818      	ldr	r0, [r3, #0]
   11b10:	4b01      	ldr	r3, [pc, #4]	; (11b18 <TC0_Handler+0xc>)
   11b12:	4718      	bx	r3
   11b14:	200010b4 	.word	0x200010b4
   11b18:	00011809 	.word	0x00011809

00011b1c <TC1_Handler>:
	tc_interrupt_handler(_tc1_dev);
   11b1c:	4b01      	ldr	r3, [pc, #4]	; (11b24 <TC1_Handler+0x8>)
   11b1e:	6858      	ldr	r0, [r3, #4]
   11b20:	4b01      	ldr	r3, [pc, #4]	; (11b28 <TC1_Handler+0xc>)
   11b22:	4718      	bx	r3
   11b24:	200010b4 	.word	0x200010b4
   11b28:	00011809 	.word	0x00011809

00011b2c <TC2_Handler>:
	tc_interrupt_handler(_tc2_dev);
   11b2c:	4b01      	ldr	r3, [pc, #4]	; (11b34 <TC2_Handler+0x8>)
   11b2e:	6898      	ldr	r0, [r3, #8]
   11b30:	4b01      	ldr	r3, [pc, #4]	; (11b38 <TC2_Handler+0xc>)
   11b32:	4718      	bx	r3
   11b34:	200010b4 	.word	0x200010b4
   11b38:	00011809 	.word	0x00011809

00011b3c <TC3_Handler>:
	tc_interrupt_handler(_tc3_dev);
   11b3c:	4b01      	ldr	r3, [pc, #4]	; (11b44 <TC3_Handler+0x8>)
   11b3e:	68d8      	ldr	r0, [r3, #12]
   11b40:	4b01      	ldr	r3, [pc, #4]	; (11b48 <TC3_Handler+0xc>)
   11b42:	4718      	bx	r3
   11b44:	200010b4 	.word	0x200010b4
   11b48:	00011809 	.word	0x00011809

00011b4c <_delay_init>:
   11b4c:	4b03      	ldr	r3, [pc, #12]	; (11b5c <_delay_init+0x10>)
   11b4e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   11b52:	605a      	str	r2, [r3, #4]
   11b54:	2205      	movs	r2, #5
   11b56:	601a      	str	r2, [r3, #0]
   11b58:	4770      	bx	lr
   11b5a:	bf00      	nop
   11b5c:	e000e010 	.word	0xe000e010

00011b60 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
   11b60:	0e0b      	lsrs	r3, r1, #24
   11b62:	4a0c      	ldr	r2, [pc, #48]	; (11b94 <_delay_cycles+0x34>)
{
   11b64:	b530      	push	{r4, r5, lr}
	uint8_t  n   = cycles >> 24;
   11b66:	4618      	mov	r0, r3
	uint32_t buf = cycles;

	while (n--) {
		SysTick->LOAD = 0xFFFFFF;
   11b68:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
	while (n--) {
   11b6c:	3801      	subs	r0, #1
   11b6e:	b2c0      	uxtb	r0, r0
   11b70:	28ff      	cmp	r0, #255	; 0xff
   11b72:	d108      	bne.n	11b86 <_delay_cycles+0x26>
   11b74:	eba3 6303 	sub.w	r3, r3, r3, lsl #24
   11b78:	4419      	add	r1, r3
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
   11b7a:	6051      	str	r1, [r2, #4]
	SysTick->VAL  = buf;
   11b7c:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
   11b7e:	6813      	ldr	r3, [r2, #0]
   11b80:	03db      	lsls	r3, r3, #15
   11b82:	d5fc      	bpl.n	11b7e <_delay_cycles+0x1e>
		;
}
   11b84:	bd30      	pop	{r4, r5, pc}
		SysTick->LOAD = 0xFFFFFF;
   11b86:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
   11b88:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
   11b8a:	6815      	ldr	r5, [r2, #0]
   11b8c:	03ed      	lsls	r5, r5, #15
   11b8e:	d5fc      	bpl.n	11b8a <_delay_cycles+0x2a>
   11b90:	e7ec      	b.n	11b6c <_delay_cycles+0xc>
   11b92:	bf00      	nop
   11b94:	e000e010 	.word	0xe000e010

00011b98 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
   11b98:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
   11b9a:	2000      	movs	r0, #0
   11b9c:	4770      	bx	lr
	...

00011ba0 <__aeabi_drsub>:
   11ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   11ba4:	e002      	b.n	11bac <__adddf3>
   11ba6:	bf00      	nop

00011ba8 <__aeabi_dsub>:
   11ba8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00011bac <__adddf3>:
   11bac:	b530      	push	{r4, r5, lr}
   11bae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   11bb2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   11bb6:	ea94 0f05 	teq	r4, r5
   11bba:	bf08      	it	eq
   11bbc:	ea90 0f02 	teqeq	r0, r2
   11bc0:	bf1f      	itttt	ne
   11bc2:	ea54 0c00 	orrsne.w	ip, r4, r0
   11bc6:	ea55 0c02 	orrsne.w	ip, r5, r2
   11bca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   11bce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   11bd2:	f000 80e2 	beq.w	11d9a <__adddf3+0x1ee>
   11bd6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   11bda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   11bde:	bfb8      	it	lt
   11be0:	426d      	neglt	r5, r5
   11be2:	dd0c      	ble.n	11bfe <__adddf3+0x52>
   11be4:	442c      	add	r4, r5
   11be6:	ea80 0202 	eor.w	r2, r0, r2
   11bea:	ea81 0303 	eor.w	r3, r1, r3
   11bee:	ea82 0000 	eor.w	r0, r2, r0
   11bf2:	ea83 0101 	eor.w	r1, r3, r1
   11bf6:	ea80 0202 	eor.w	r2, r0, r2
   11bfa:	ea81 0303 	eor.w	r3, r1, r3
   11bfe:	2d36      	cmp	r5, #54	; 0x36
   11c00:	bf88      	it	hi
   11c02:	bd30      	pophi	{r4, r5, pc}
   11c04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   11c08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   11c0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   11c10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   11c14:	d002      	beq.n	11c1c <__adddf3+0x70>
   11c16:	4240      	negs	r0, r0
   11c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11c1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   11c20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   11c24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   11c28:	d002      	beq.n	11c30 <__adddf3+0x84>
   11c2a:	4252      	negs	r2, r2
   11c2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11c30:	ea94 0f05 	teq	r4, r5
   11c34:	f000 80a7 	beq.w	11d86 <__adddf3+0x1da>
   11c38:	f1a4 0401 	sub.w	r4, r4, #1
   11c3c:	f1d5 0e20 	rsbs	lr, r5, #32
   11c40:	db0d      	blt.n	11c5e <__adddf3+0xb2>
   11c42:	fa02 fc0e 	lsl.w	ip, r2, lr
   11c46:	fa22 f205 	lsr.w	r2, r2, r5
   11c4a:	1880      	adds	r0, r0, r2
   11c4c:	f141 0100 	adc.w	r1, r1, #0
   11c50:	fa03 f20e 	lsl.w	r2, r3, lr
   11c54:	1880      	adds	r0, r0, r2
   11c56:	fa43 f305 	asr.w	r3, r3, r5
   11c5a:	4159      	adcs	r1, r3
   11c5c:	e00e      	b.n	11c7c <__adddf3+0xd0>
   11c5e:	f1a5 0520 	sub.w	r5, r5, #32
   11c62:	f10e 0e20 	add.w	lr, lr, #32
   11c66:	2a01      	cmp	r2, #1
   11c68:	fa03 fc0e 	lsl.w	ip, r3, lr
   11c6c:	bf28      	it	cs
   11c6e:	f04c 0c02 	orrcs.w	ip, ip, #2
   11c72:	fa43 f305 	asr.w	r3, r3, r5
   11c76:	18c0      	adds	r0, r0, r3
   11c78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   11c7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11c80:	d507      	bpl.n	11c92 <__adddf3+0xe6>
   11c82:	f04f 0e00 	mov.w	lr, #0
   11c86:	f1dc 0c00 	rsbs	ip, ip, #0
   11c8a:	eb7e 0000 	sbcs.w	r0, lr, r0
   11c8e:	eb6e 0101 	sbc.w	r1, lr, r1
   11c92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   11c96:	d31b      	bcc.n	11cd0 <__adddf3+0x124>
   11c98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   11c9c:	d30c      	bcc.n	11cb8 <__adddf3+0x10c>
   11c9e:	0849      	lsrs	r1, r1, #1
   11ca0:	ea5f 0030 	movs.w	r0, r0, rrx
   11ca4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   11ca8:	f104 0401 	add.w	r4, r4, #1
   11cac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   11cb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   11cb4:	f080 809a 	bcs.w	11dec <__adddf3+0x240>
   11cb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   11cbc:	bf08      	it	eq
   11cbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   11cc2:	f150 0000 	adcs.w	r0, r0, #0
   11cc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   11cca:	ea41 0105 	orr.w	r1, r1, r5
   11cce:	bd30      	pop	{r4, r5, pc}
   11cd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   11cd4:	4140      	adcs	r0, r0
   11cd6:	eb41 0101 	adc.w	r1, r1, r1
   11cda:	3c01      	subs	r4, #1
   11cdc:	bf28      	it	cs
   11cde:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   11ce2:	d2e9      	bcs.n	11cb8 <__adddf3+0x10c>
   11ce4:	f091 0f00 	teq	r1, #0
   11ce8:	bf04      	itt	eq
   11cea:	4601      	moveq	r1, r0
   11cec:	2000      	moveq	r0, #0
   11cee:	fab1 f381 	clz	r3, r1
   11cf2:	bf08      	it	eq
   11cf4:	3320      	addeq	r3, #32
   11cf6:	f1a3 030b 	sub.w	r3, r3, #11
   11cfa:	f1b3 0220 	subs.w	r2, r3, #32
   11cfe:	da0c      	bge.n	11d1a <__adddf3+0x16e>
   11d00:	320c      	adds	r2, #12
   11d02:	dd08      	ble.n	11d16 <__adddf3+0x16a>
   11d04:	f102 0c14 	add.w	ip, r2, #20
   11d08:	f1c2 020c 	rsb	r2, r2, #12
   11d0c:	fa01 f00c 	lsl.w	r0, r1, ip
   11d10:	fa21 f102 	lsr.w	r1, r1, r2
   11d14:	e00c      	b.n	11d30 <__adddf3+0x184>
   11d16:	f102 0214 	add.w	r2, r2, #20
   11d1a:	bfd8      	it	le
   11d1c:	f1c2 0c20 	rsble	ip, r2, #32
   11d20:	fa01 f102 	lsl.w	r1, r1, r2
   11d24:	fa20 fc0c 	lsr.w	ip, r0, ip
   11d28:	bfdc      	itt	le
   11d2a:	ea41 010c 	orrle.w	r1, r1, ip
   11d2e:	4090      	lslle	r0, r2
   11d30:	1ae4      	subs	r4, r4, r3
   11d32:	bfa2      	ittt	ge
   11d34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   11d38:	4329      	orrge	r1, r5
   11d3a:	bd30      	popge	{r4, r5, pc}
   11d3c:	ea6f 0404 	mvn.w	r4, r4
   11d40:	3c1f      	subs	r4, #31
   11d42:	da1c      	bge.n	11d7e <__adddf3+0x1d2>
   11d44:	340c      	adds	r4, #12
   11d46:	dc0e      	bgt.n	11d66 <__adddf3+0x1ba>
   11d48:	f104 0414 	add.w	r4, r4, #20
   11d4c:	f1c4 0220 	rsb	r2, r4, #32
   11d50:	fa20 f004 	lsr.w	r0, r0, r4
   11d54:	fa01 f302 	lsl.w	r3, r1, r2
   11d58:	ea40 0003 	orr.w	r0, r0, r3
   11d5c:	fa21 f304 	lsr.w	r3, r1, r4
   11d60:	ea45 0103 	orr.w	r1, r5, r3
   11d64:	bd30      	pop	{r4, r5, pc}
   11d66:	f1c4 040c 	rsb	r4, r4, #12
   11d6a:	f1c4 0220 	rsb	r2, r4, #32
   11d6e:	fa20 f002 	lsr.w	r0, r0, r2
   11d72:	fa01 f304 	lsl.w	r3, r1, r4
   11d76:	ea40 0003 	orr.w	r0, r0, r3
   11d7a:	4629      	mov	r1, r5
   11d7c:	bd30      	pop	{r4, r5, pc}
   11d7e:	fa21 f004 	lsr.w	r0, r1, r4
   11d82:	4629      	mov	r1, r5
   11d84:	bd30      	pop	{r4, r5, pc}
   11d86:	f094 0f00 	teq	r4, #0
   11d8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   11d8e:	bf06      	itte	eq
   11d90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   11d94:	3401      	addeq	r4, #1
   11d96:	3d01      	subne	r5, #1
   11d98:	e74e      	b.n	11c38 <__adddf3+0x8c>
   11d9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   11d9e:	bf18      	it	ne
   11da0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   11da4:	d029      	beq.n	11dfa <__adddf3+0x24e>
   11da6:	ea94 0f05 	teq	r4, r5
   11daa:	bf08      	it	eq
   11dac:	ea90 0f02 	teqeq	r0, r2
   11db0:	d005      	beq.n	11dbe <__adddf3+0x212>
   11db2:	ea54 0c00 	orrs.w	ip, r4, r0
   11db6:	bf04      	itt	eq
   11db8:	4619      	moveq	r1, r3
   11dba:	4610      	moveq	r0, r2
   11dbc:	bd30      	pop	{r4, r5, pc}
   11dbe:	ea91 0f03 	teq	r1, r3
   11dc2:	bf1e      	ittt	ne
   11dc4:	2100      	movne	r1, #0
   11dc6:	2000      	movne	r0, #0
   11dc8:	bd30      	popne	{r4, r5, pc}
   11dca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   11dce:	d105      	bne.n	11ddc <__adddf3+0x230>
   11dd0:	0040      	lsls	r0, r0, #1
   11dd2:	4149      	adcs	r1, r1
   11dd4:	bf28      	it	cs
   11dd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   11dda:	bd30      	pop	{r4, r5, pc}
   11ddc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   11de0:	bf3c      	itt	cc
   11de2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   11de6:	bd30      	popcc	{r4, r5, pc}
   11de8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11dec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   11df0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   11df4:	f04f 0000 	mov.w	r0, #0
   11df8:	bd30      	pop	{r4, r5, pc}
   11dfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   11dfe:	bf1a      	itte	ne
   11e00:	4619      	movne	r1, r3
   11e02:	4610      	movne	r0, r2
   11e04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   11e08:	bf1c      	itt	ne
   11e0a:	460b      	movne	r3, r1
   11e0c:	4602      	movne	r2, r0
   11e0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   11e12:	bf06      	itte	eq
   11e14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   11e18:	ea91 0f03 	teqeq	r1, r3
   11e1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   11e20:	bd30      	pop	{r4, r5, pc}
   11e22:	bf00      	nop

00011e24 <__aeabi_ui2d>:
   11e24:	f090 0f00 	teq	r0, #0
   11e28:	bf04      	itt	eq
   11e2a:	2100      	moveq	r1, #0
   11e2c:	4770      	bxeq	lr
   11e2e:	b530      	push	{r4, r5, lr}
   11e30:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11e34:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11e38:	f04f 0500 	mov.w	r5, #0
   11e3c:	f04f 0100 	mov.w	r1, #0
   11e40:	e750      	b.n	11ce4 <__adddf3+0x138>
   11e42:	bf00      	nop

00011e44 <__aeabi_i2d>:
   11e44:	f090 0f00 	teq	r0, #0
   11e48:	bf04      	itt	eq
   11e4a:	2100      	moveq	r1, #0
   11e4c:	4770      	bxeq	lr
   11e4e:	b530      	push	{r4, r5, lr}
   11e50:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11e54:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11e58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   11e5c:	bf48      	it	mi
   11e5e:	4240      	negmi	r0, r0
   11e60:	f04f 0100 	mov.w	r1, #0
   11e64:	e73e      	b.n	11ce4 <__adddf3+0x138>
   11e66:	bf00      	nop

00011e68 <__aeabi_f2d>:
   11e68:	0042      	lsls	r2, r0, #1
   11e6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   11e6e:	ea4f 0131 	mov.w	r1, r1, rrx
   11e72:	ea4f 7002 	mov.w	r0, r2, lsl #28
   11e76:	bf1f      	itttt	ne
   11e78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   11e7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   11e80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   11e84:	4770      	bxne	lr
   11e86:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   11e8a:	bf08      	it	eq
   11e8c:	4770      	bxeq	lr
   11e8e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   11e92:	bf04      	itt	eq
   11e94:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   11e98:	4770      	bxeq	lr
   11e9a:	b530      	push	{r4, r5, lr}
   11e9c:	f44f 7460 	mov.w	r4, #896	; 0x380
   11ea0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11ea8:	e71c      	b.n	11ce4 <__adddf3+0x138>
   11eaa:	bf00      	nop

00011eac <__aeabi_ul2d>:
   11eac:	ea50 0201 	orrs.w	r2, r0, r1
   11eb0:	bf08      	it	eq
   11eb2:	4770      	bxeq	lr
   11eb4:	b530      	push	{r4, r5, lr}
   11eb6:	f04f 0500 	mov.w	r5, #0
   11eba:	e00a      	b.n	11ed2 <__aeabi_l2d+0x16>

00011ebc <__aeabi_l2d>:
   11ebc:	ea50 0201 	orrs.w	r2, r0, r1
   11ec0:	bf08      	it	eq
   11ec2:	4770      	bxeq	lr
   11ec4:	b530      	push	{r4, r5, lr}
   11ec6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   11eca:	d502      	bpl.n	11ed2 <__aeabi_l2d+0x16>
   11ecc:	4240      	negs	r0, r0
   11ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11ed2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11ed6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   11eda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   11ede:	f43f aed8 	beq.w	11c92 <__adddf3+0xe6>
   11ee2:	f04f 0203 	mov.w	r2, #3
   11ee6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   11eea:	bf18      	it	ne
   11eec:	3203      	addne	r2, #3
   11eee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   11ef2:	bf18      	it	ne
   11ef4:	3203      	addne	r2, #3
   11ef6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   11efa:	f1c2 0320 	rsb	r3, r2, #32
   11efe:	fa00 fc03 	lsl.w	ip, r0, r3
   11f02:	fa20 f002 	lsr.w	r0, r0, r2
   11f06:	fa01 fe03 	lsl.w	lr, r1, r3
   11f0a:	ea40 000e 	orr.w	r0, r0, lr
   11f0e:	fa21 f102 	lsr.w	r1, r1, r2
   11f12:	4414      	add	r4, r2
   11f14:	e6bd      	b.n	11c92 <__adddf3+0xe6>
   11f16:	bf00      	nop

00011f18 <__aeabi_dmul>:
   11f18:	b570      	push	{r4, r5, r6, lr}
   11f1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   11f1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   11f22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   11f26:	bf1d      	ittte	ne
   11f28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   11f2c:	ea94 0f0c 	teqne	r4, ip
   11f30:	ea95 0f0c 	teqne	r5, ip
   11f34:	f000 f8de 	bleq	120f4 <__aeabi_dmul+0x1dc>
   11f38:	442c      	add	r4, r5
   11f3a:	ea81 0603 	eor.w	r6, r1, r3
   11f3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   11f42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   11f46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   11f4a:	bf18      	it	ne
   11f4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   11f50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11f58:	d038      	beq.n	11fcc <__aeabi_dmul+0xb4>
   11f5a:	fba0 ce02 	umull	ip, lr, r0, r2
   11f5e:	f04f 0500 	mov.w	r5, #0
   11f62:	fbe1 e502 	umlal	lr, r5, r1, r2
   11f66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   11f6a:	fbe0 e503 	umlal	lr, r5, r0, r3
   11f6e:	f04f 0600 	mov.w	r6, #0
   11f72:	fbe1 5603 	umlal	r5, r6, r1, r3
   11f76:	f09c 0f00 	teq	ip, #0
   11f7a:	bf18      	it	ne
   11f7c:	f04e 0e01 	orrne.w	lr, lr, #1
   11f80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   11f84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   11f88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   11f8c:	d204      	bcs.n	11f98 <__aeabi_dmul+0x80>
   11f8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   11f92:	416d      	adcs	r5, r5
   11f94:	eb46 0606 	adc.w	r6, r6, r6
   11f98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   11f9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   11fa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   11fa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   11fa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   11fac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   11fb0:	bf88      	it	hi
   11fb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   11fb6:	d81e      	bhi.n	11ff6 <__aeabi_dmul+0xde>
   11fb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   11fbc:	bf08      	it	eq
   11fbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   11fc2:	f150 0000 	adcs.w	r0, r0, #0
   11fc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   11fca:	bd70      	pop	{r4, r5, r6, pc}
   11fcc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   11fd0:	ea46 0101 	orr.w	r1, r6, r1
   11fd4:	ea40 0002 	orr.w	r0, r0, r2
   11fd8:	ea81 0103 	eor.w	r1, r1, r3
   11fdc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   11fe0:	bfc2      	ittt	gt
   11fe2:	ebd4 050c 	rsbsgt	r5, r4, ip
   11fe6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   11fea:	bd70      	popgt	{r4, r5, r6, pc}
   11fec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11ff0:	f04f 0e00 	mov.w	lr, #0
   11ff4:	3c01      	subs	r4, #1
   11ff6:	f300 80ab 	bgt.w	12150 <__aeabi_dmul+0x238>
   11ffa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   11ffe:	bfde      	ittt	le
   12000:	2000      	movle	r0, #0
   12002:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12006:	bd70      	pople	{r4, r5, r6, pc}
   12008:	f1c4 0400 	rsb	r4, r4, #0
   1200c:	3c20      	subs	r4, #32
   1200e:	da35      	bge.n	1207c <__aeabi_dmul+0x164>
   12010:	340c      	adds	r4, #12
   12012:	dc1b      	bgt.n	1204c <__aeabi_dmul+0x134>
   12014:	f104 0414 	add.w	r4, r4, #20
   12018:	f1c4 0520 	rsb	r5, r4, #32
   1201c:	fa00 f305 	lsl.w	r3, r0, r5
   12020:	fa20 f004 	lsr.w	r0, r0, r4
   12024:	fa01 f205 	lsl.w	r2, r1, r5
   12028:	ea40 0002 	orr.w	r0, r0, r2
   1202c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12034:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12038:	fa21 f604 	lsr.w	r6, r1, r4
   1203c:	eb42 0106 	adc.w	r1, r2, r6
   12040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12044:	bf08      	it	eq
   12046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1204a:	bd70      	pop	{r4, r5, r6, pc}
   1204c:	f1c4 040c 	rsb	r4, r4, #12
   12050:	f1c4 0520 	rsb	r5, r4, #32
   12054:	fa00 f304 	lsl.w	r3, r0, r4
   12058:	fa20 f005 	lsr.w	r0, r0, r5
   1205c:	fa01 f204 	lsl.w	r2, r1, r4
   12060:	ea40 0002 	orr.w	r0, r0, r2
   12064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12068:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1206c:	f141 0100 	adc.w	r1, r1, #0
   12070:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12074:	bf08      	it	eq
   12076:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1207a:	bd70      	pop	{r4, r5, r6, pc}
   1207c:	f1c4 0520 	rsb	r5, r4, #32
   12080:	fa00 f205 	lsl.w	r2, r0, r5
   12084:	ea4e 0e02 	orr.w	lr, lr, r2
   12088:	fa20 f304 	lsr.w	r3, r0, r4
   1208c:	fa01 f205 	lsl.w	r2, r1, r5
   12090:	ea43 0302 	orr.w	r3, r3, r2
   12094:	fa21 f004 	lsr.w	r0, r1, r4
   12098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1209c:	fa21 f204 	lsr.w	r2, r1, r4
   120a0:	ea20 0002 	bic.w	r0, r0, r2
   120a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   120a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   120ac:	bf08      	it	eq
   120ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   120b2:	bd70      	pop	{r4, r5, r6, pc}
   120b4:	f094 0f00 	teq	r4, #0
   120b8:	d10f      	bne.n	120da <__aeabi_dmul+0x1c2>
   120ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   120be:	0040      	lsls	r0, r0, #1
   120c0:	eb41 0101 	adc.w	r1, r1, r1
   120c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   120c8:	bf08      	it	eq
   120ca:	3c01      	subeq	r4, #1
   120cc:	d0f7      	beq.n	120be <__aeabi_dmul+0x1a6>
   120ce:	ea41 0106 	orr.w	r1, r1, r6
   120d2:	f095 0f00 	teq	r5, #0
   120d6:	bf18      	it	ne
   120d8:	4770      	bxne	lr
   120da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   120de:	0052      	lsls	r2, r2, #1
   120e0:	eb43 0303 	adc.w	r3, r3, r3
   120e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   120e8:	bf08      	it	eq
   120ea:	3d01      	subeq	r5, #1
   120ec:	d0f7      	beq.n	120de <__aeabi_dmul+0x1c6>
   120ee:	ea43 0306 	orr.w	r3, r3, r6
   120f2:	4770      	bx	lr
   120f4:	ea94 0f0c 	teq	r4, ip
   120f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   120fc:	bf18      	it	ne
   120fe:	ea95 0f0c 	teqne	r5, ip
   12102:	d00c      	beq.n	1211e <__aeabi_dmul+0x206>
   12104:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12108:	bf18      	it	ne
   1210a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1210e:	d1d1      	bne.n	120b4 <__aeabi_dmul+0x19c>
   12110:	ea81 0103 	eor.w	r1, r1, r3
   12114:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12118:	f04f 0000 	mov.w	r0, #0
   1211c:	bd70      	pop	{r4, r5, r6, pc}
   1211e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12122:	bf06      	itte	eq
   12124:	4610      	moveq	r0, r2
   12126:	4619      	moveq	r1, r3
   12128:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1212c:	d019      	beq.n	12162 <__aeabi_dmul+0x24a>
   1212e:	ea94 0f0c 	teq	r4, ip
   12132:	d102      	bne.n	1213a <__aeabi_dmul+0x222>
   12134:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12138:	d113      	bne.n	12162 <__aeabi_dmul+0x24a>
   1213a:	ea95 0f0c 	teq	r5, ip
   1213e:	d105      	bne.n	1214c <__aeabi_dmul+0x234>
   12140:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12144:	bf1c      	itt	ne
   12146:	4610      	movne	r0, r2
   12148:	4619      	movne	r1, r3
   1214a:	d10a      	bne.n	12162 <__aeabi_dmul+0x24a>
   1214c:	ea81 0103 	eor.w	r1, r1, r3
   12150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12154:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12158:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1215c:	f04f 0000 	mov.w	r0, #0
   12160:	bd70      	pop	{r4, r5, r6, pc}
   12162:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12166:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1216a:	bd70      	pop	{r4, r5, r6, pc}

0001216c <__aeabi_ddiv>:
   1216c:	b570      	push	{r4, r5, r6, lr}
   1216e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12172:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12176:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1217a:	bf1d      	ittte	ne
   1217c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12180:	ea94 0f0c 	teqne	r4, ip
   12184:	ea95 0f0c 	teqne	r5, ip
   12188:	f000 f8a7 	bleq	122da <__aeabi_ddiv+0x16e>
   1218c:	eba4 0405 	sub.w	r4, r4, r5
   12190:	ea81 0e03 	eor.w	lr, r1, r3
   12194:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12198:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1219c:	f000 8088 	beq.w	122b0 <__aeabi_ddiv+0x144>
   121a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   121a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   121a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   121ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   121b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   121b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   121b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   121bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   121c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   121c4:	429d      	cmp	r5, r3
   121c6:	bf08      	it	eq
   121c8:	4296      	cmpeq	r6, r2
   121ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   121ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   121d2:	d202      	bcs.n	121da <__aeabi_ddiv+0x6e>
   121d4:	085b      	lsrs	r3, r3, #1
   121d6:	ea4f 0232 	mov.w	r2, r2, rrx
   121da:	1ab6      	subs	r6, r6, r2
   121dc:	eb65 0503 	sbc.w	r5, r5, r3
   121e0:	085b      	lsrs	r3, r3, #1
   121e2:	ea4f 0232 	mov.w	r2, r2, rrx
   121e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   121ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   121ee:	ebb6 0e02 	subs.w	lr, r6, r2
   121f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   121f6:	bf22      	ittt	cs
   121f8:	1ab6      	subcs	r6, r6, r2
   121fa:	4675      	movcs	r5, lr
   121fc:	ea40 000c 	orrcs.w	r0, r0, ip
   12200:	085b      	lsrs	r3, r3, #1
   12202:	ea4f 0232 	mov.w	r2, r2, rrx
   12206:	ebb6 0e02 	subs.w	lr, r6, r2
   1220a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1220e:	bf22      	ittt	cs
   12210:	1ab6      	subcs	r6, r6, r2
   12212:	4675      	movcs	r5, lr
   12214:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12218:	085b      	lsrs	r3, r3, #1
   1221a:	ea4f 0232 	mov.w	r2, r2, rrx
   1221e:	ebb6 0e02 	subs.w	lr, r6, r2
   12222:	eb75 0e03 	sbcs.w	lr, r5, r3
   12226:	bf22      	ittt	cs
   12228:	1ab6      	subcs	r6, r6, r2
   1222a:	4675      	movcs	r5, lr
   1222c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12230:	085b      	lsrs	r3, r3, #1
   12232:	ea4f 0232 	mov.w	r2, r2, rrx
   12236:	ebb6 0e02 	subs.w	lr, r6, r2
   1223a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1223e:	bf22      	ittt	cs
   12240:	1ab6      	subcs	r6, r6, r2
   12242:	4675      	movcs	r5, lr
   12244:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12248:	ea55 0e06 	orrs.w	lr, r5, r6
   1224c:	d018      	beq.n	12280 <__aeabi_ddiv+0x114>
   1224e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12252:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12256:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1225a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1225e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12262:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12266:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1226a:	d1c0      	bne.n	121ee <__aeabi_ddiv+0x82>
   1226c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12270:	d10b      	bne.n	1228a <__aeabi_ddiv+0x11e>
   12272:	ea41 0100 	orr.w	r1, r1, r0
   12276:	f04f 0000 	mov.w	r0, #0
   1227a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1227e:	e7b6      	b.n	121ee <__aeabi_ddiv+0x82>
   12280:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12284:	bf04      	itt	eq
   12286:	4301      	orreq	r1, r0
   12288:	2000      	moveq	r0, #0
   1228a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1228e:	bf88      	it	hi
   12290:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12294:	f63f aeaf 	bhi.w	11ff6 <__aeabi_dmul+0xde>
   12298:	ebb5 0c03 	subs.w	ip, r5, r3
   1229c:	bf04      	itt	eq
   1229e:	ebb6 0c02 	subseq.w	ip, r6, r2
   122a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   122a6:	f150 0000 	adcs.w	r0, r0, #0
   122aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   122ae:	bd70      	pop	{r4, r5, r6, pc}
   122b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   122b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   122b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   122bc:	bfc2      	ittt	gt
   122be:	ebd4 050c 	rsbsgt	r5, r4, ip
   122c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   122c6:	bd70      	popgt	{r4, r5, r6, pc}
   122c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   122cc:	f04f 0e00 	mov.w	lr, #0
   122d0:	3c01      	subs	r4, #1
   122d2:	e690      	b.n	11ff6 <__aeabi_dmul+0xde>
   122d4:	ea45 0e06 	orr.w	lr, r5, r6
   122d8:	e68d      	b.n	11ff6 <__aeabi_dmul+0xde>
   122da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   122de:	ea94 0f0c 	teq	r4, ip
   122e2:	bf08      	it	eq
   122e4:	ea95 0f0c 	teqeq	r5, ip
   122e8:	f43f af3b 	beq.w	12162 <__aeabi_dmul+0x24a>
   122ec:	ea94 0f0c 	teq	r4, ip
   122f0:	d10a      	bne.n	12308 <__aeabi_ddiv+0x19c>
   122f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   122f6:	f47f af34 	bne.w	12162 <__aeabi_dmul+0x24a>
   122fa:	ea95 0f0c 	teq	r5, ip
   122fe:	f47f af25 	bne.w	1214c <__aeabi_dmul+0x234>
   12302:	4610      	mov	r0, r2
   12304:	4619      	mov	r1, r3
   12306:	e72c      	b.n	12162 <__aeabi_dmul+0x24a>
   12308:	ea95 0f0c 	teq	r5, ip
   1230c:	d106      	bne.n	1231c <__aeabi_ddiv+0x1b0>
   1230e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12312:	f43f aefd 	beq.w	12110 <__aeabi_dmul+0x1f8>
   12316:	4610      	mov	r0, r2
   12318:	4619      	mov	r1, r3
   1231a:	e722      	b.n	12162 <__aeabi_dmul+0x24a>
   1231c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12320:	bf18      	it	ne
   12322:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12326:	f47f aec5 	bne.w	120b4 <__aeabi_dmul+0x19c>
   1232a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1232e:	f47f af0d 	bne.w	1214c <__aeabi_dmul+0x234>
   12332:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12336:	f47f aeeb 	bne.w	12110 <__aeabi_dmul+0x1f8>
   1233a:	e712      	b.n	12162 <__aeabi_dmul+0x24a>

0001233c <__aeabi_d2uiz>:
   1233c:	004a      	lsls	r2, r1, #1
   1233e:	d211      	bcs.n	12364 <__aeabi_d2uiz+0x28>
   12340:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12344:	d211      	bcs.n	1236a <__aeabi_d2uiz+0x2e>
   12346:	d50d      	bpl.n	12364 <__aeabi_d2uiz+0x28>
   12348:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1234c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12350:	d40e      	bmi.n	12370 <__aeabi_d2uiz+0x34>
   12352:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1235a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1235e:	fa23 f002 	lsr.w	r0, r3, r2
   12362:	4770      	bx	lr
   12364:	f04f 0000 	mov.w	r0, #0
   12368:	4770      	bx	lr
   1236a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1236e:	d102      	bne.n	12376 <__aeabi_d2uiz+0x3a>
   12370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12374:	4770      	bx	lr
   12376:	f04f 0000 	mov.w	r0, #0
   1237a:	4770      	bx	lr

0001237c <__libc_init_array>:
   1237c:	b570      	push	{r4, r5, r6, lr}
   1237e:	4e0d      	ldr	r6, [pc, #52]	; (123b4 <__libc_init_array+0x38>)
   12380:	4d0d      	ldr	r5, [pc, #52]	; (123b8 <__libc_init_array+0x3c>)
   12382:	1b76      	subs	r6, r6, r5
   12384:	10b6      	asrs	r6, r6, #2
   12386:	d006      	beq.n	12396 <__libc_init_array+0x1a>
   12388:	2400      	movs	r4, #0
   1238a:	3401      	adds	r4, #1
   1238c:	f855 3b04 	ldr.w	r3, [r5], #4
   12390:	4798      	blx	r3
   12392:	42a6      	cmp	r6, r4
   12394:	d1f9      	bne.n	1238a <__libc_init_array+0xe>
   12396:	4e09      	ldr	r6, [pc, #36]	; (123bc <__libc_init_array+0x40>)
   12398:	4d09      	ldr	r5, [pc, #36]	; (123c0 <__libc_init_array+0x44>)
   1239a:	1b76      	subs	r6, r6, r5
   1239c:	f003 f832 	bl	15404 <_init>
   123a0:	10b6      	asrs	r6, r6, #2
   123a2:	d006      	beq.n	123b2 <__libc_init_array+0x36>
   123a4:	2400      	movs	r4, #0
   123a6:	3401      	adds	r4, #1
   123a8:	f855 3b04 	ldr.w	r3, [r5], #4
   123ac:	4798      	blx	r3
   123ae:	42a6      	cmp	r6, r4
   123b0:	d1f9      	bne.n	123a6 <__libc_init_array+0x2a>
   123b2:	bd70      	pop	{r4, r5, r6, pc}
   123b4:	00015410 	.word	0x00015410
   123b8:	00015410 	.word	0x00015410
   123bc:	00015414 	.word	0x00015414
   123c0:	00015410 	.word	0x00015410

000123c4 <malloc>:
   123c4:	4b02      	ldr	r3, [pc, #8]	; (123d0 <malloc+0xc>)
   123c6:	4601      	mov	r1, r0
   123c8:	6818      	ldr	r0, [r3, #0]
   123ca:	f000 b94b 	b.w	12664 <_malloc_r>
   123ce:	bf00      	nop
   123d0:	20000548 	.word	0x20000548

000123d4 <free>:
   123d4:	4b02      	ldr	r3, [pc, #8]	; (123e0 <free+0xc>)
   123d6:	4601      	mov	r1, r0
   123d8:	6818      	ldr	r0, [r3, #0]
   123da:	f000 b8ed 	b.w	125b8 <_free_r>
   123de:	bf00      	nop
   123e0:	20000548 	.word	0x20000548

000123e4 <memcpy>:
   123e4:	4684      	mov	ip, r0
   123e6:	ea41 0300 	orr.w	r3, r1, r0
   123ea:	f013 0303 	ands.w	r3, r3, #3
   123ee:	d16d      	bne.n	124cc <memcpy+0xe8>
   123f0:	3a40      	subs	r2, #64	; 0x40
   123f2:	d341      	bcc.n	12478 <memcpy+0x94>
   123f4:	f851 3b04 	ldr.w	r3, [r1], #4
   123f8:	f840 3b04 	str.w	r3, [r0], #4
   123fc:	f851 3b04 	ldr.w	r3, [r1], #4
   12400:	f840 3b04 	str.w	r3, [r0], #4
   12404:	f851 3b04 	ldr.w	r3, [r1], #4
   12408:	f840 3b04 	str.w	r3, [r0], #4
   1240c:	f851 3b04 	ldr.w	r3, [r1], #4
   12410:	f840 3b04 	str.w	r3, [r0], #4
   12414:	f851 3b04 	ldr.w	r3, [r1], #4
   12418:	f840 3b04 	str.w	r3, [r0], #4
   1241c:	f851 3b04 	ldr.w	r3, [r1], #4
   12420:	f840 3b04 	str.w	r3, [r0], #4
   12424:	f851 3b04 	ldr.w	r3, [r1], #4
   12428:	f840 3b04 	str.w	r3, [r0], #4
   1242c:	f851 3b04 	ldr.w	r3, [r1], #4
   12430:	f840 3b04 	str.w	r3, [r0], #4
   12434:	f851 3b04 	ldr.w	r3, [r1], #4
   12438:	f840 3b04 	str.w	r3, [r0], #4
   1243c:	f851 3b04 	ldr.w	r3, [r1], #4
   12440:	f840 3b04 	str.w	r3, [r0], #4
   12444:	f851 3b04 	ldr.w	r3, [r1], #4
   12448:	f840 3b04 	str.w	r3, [r0], #4
   1244c:	f851 3b04 	ldr.w	r3, [r1], #4
   12450:	f840 3b04 	str.w	r3, [r0], #4
   12454:	f851 3b04 	ldr.w	r3, [r1], #4
   12458:	f840 3b04 	str.w	r3, [r0], #4
   1245c:	f851 3b04 	ldr.w	r3, [r1], #4
   12460:	f840 3b04 	str.w	r3, [r0], #4
   12464:	f851 3b04 	ldr.w	r3, [r1], #4
   12468:	f840 3b04 	str.w	r3, [r0], #4
   1246c:	f851 3b04 	ldr.w	r3, [r1], #4
   12470:	f840 3b04 	str.w	r3, [r0], #4
   12474:	3a40      	subs	r2, #64	; 0x40
   12476:	d2bd      	bcs.n	123f4 <memcpy+0x10>
   12478:	3230      	adds	r2, #48	; 0x30
   1247a:	d311      	bcc.n	124a0 <memcpy+0xbc>
   1247c:	f851 3b04 	ldr.w	r3, [r1], #4
   12480:	f840 3b04 	str.w	r3, [r0], #4
   12484:	f851 3b04 	ldr.w	r3, [r1], #4
   12488:	f840 3b04 	str.w	r3, [r0], #4
   1248c:	f851 3b04 	ldr.w	r3, [r1], #4
   12490:	f840 3b04 	str.w	r3, [r0], #4
   12494:	f851 3b04 	ldr.w	r3, [r1], #4
   12498:	f840 3b04 	str.w	r3, [r0], #4
   1249c:	3a10      	subs	r2, #16
   1249e:	d2ed      	bcs.n	1247c <memcpy+0x98>
   124a0:	320c      	adds	r2, #12
   124a2:	d305      	bcc.n	124b0 <memcpy+0xcc>
   124a4:	f851 3b04 	ldr.w	r3, [r1], #4
   124a8:	f840 3b04 	str.w	r3, [r0], #4
   124ac:	3a04      	subs	r2, #4
   124ae:	d2f9      	bcs.n	124a4 <memcpy+0xc0>
   124b0:	3204      	adds	r2, #4
   124b2:	d008      	beq.n	124c6 <memcpy+0xe2>
   124b4:	07d2      	lsls	r2, r2, #31
   124b6:	bf1c      	itt	ne
   124b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   124bc:	f800 3b01 	strbne.w	r3, [r0], #1
   124c0:	d301      	bcc.n	124c6 <memcpy+0xe2>
   124c2:	880b      	ldrh	r3, [r1, #0]
   124c4:	8003      	strh	r3, [r0, #0]
   124c6:	4660      	mov	r0, ip
   124c8:	4770      	bx	lr
   124ca:	bf00      	nop
   124cc:	2a08      	cmp	r2, #8
   124ce:	d313      	bcc.n	124f8 <memcpy+0x114>
   124d0:	078b      	lsls	r3, r1, #30
   124d2:	d08d      	beq.n	123f0 <memcpy+0xc>
   124d4:	f010 0303 	ands.w	r3, r0, #3
   124d8:	d08a      	beq.n	123f0 <memcpy+0xc>
   124da:	f1c3 0304 	rsb	r3, r3, #4
   124de:	1ad2      	subs	r2, r2, r3
   124e0:	07db      	lsls	r3, r3, #31
   124e2:	bf1c      	itt	ne
   124e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   124e8:	f800 3b01 	strbne.w	r3, [r0], #1
   124ec:	d380      	bcc.n	123f0 <memcpy+0xc>
   124ee:	f831 3b02 	ldrh.w	r3, [r1], #2
   124f2:	f820 3b02 	strh.w	r3, [r0], #2
   124f6:	e77b      	b.n	123f0 <memcpy+0xc>
   124f8:	3a04      	subs	r2, #4
   124fa:	d3d9      	bcc.n	124b0 <memcpy+0xcc>
   124fc:	3a01      	subs	r2, #1
   124fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   12502:	f800 3b01 	strb.w	r3, [r0], #1
   12506:	d2f9      	bcs.n	124fc <memcpy+0x118>
   12508:	780b      	ldrb	r3, [r1, #0]
   1250a:	7003      	strb	r3, [r0, #0]
   1250c:	784b      	ldrb	r3, [r1, #1]
   1250e:	7043      	strb	r3, [r0, #1]
   12510:	788b      	ldrb	r3, [r1, #2]
   12512:	7083      	strb	r3, [r0, #2]
   12514:	4660      	mov	r0, ip
   12516:	4770      	bx	lr

00012518 <memset>:
   12518:	b4f0      	push	{r4, r5, r6, r7}
   1251a:	0786      	lsls	r6, r0, #30
   1251c:	d046      	beq.n	125ac <memset+0x94>
   1251e:	1e54      	subs	r4, r2, #1
   12520:	2a00      	cmp	r2, #0
   12522:	d03c      	beq.n	1259e <memset+0x86>
   12524:	b2ca      	uxtb	r2, r1
   12526:	4603      	mov	r3, r0
   12528:	e002      	b.n	12530 <memset+0x18>
   1252a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   1252e:	d336      	bcc.n	1259e <memset+0x86>
   12530:	f803 2b01 	strb.w	r2, [r3], #1
   12534:	079d      	lsls	r5, r3, #30
   12536:	d1f8      	bne.n	1252a <memset+0x12>
   12538:	2c03      	cmp	r4, #3
   1253a:	d929      	bls.n	12590 <memset+0x78>
   1253c:	b2cd      	uxtb	r5, r1
   1253e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12542:	2c0f      	cmp	r4, #15
   12544:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12548:	d933      	bls.n	125b2 <memset+0x9a>
   1254a:	f1a4 0610 	sub.w	r6, r4, #16
   1254e:	0936      	lsrs	r6, r6, #4
   12550:	f103 0720 	add.w	r7, r3, #32
   12554:	eb07 1706 	add.w	r7, r7, r6, lsl #4
   12558:	f103 0210 	add.w	r2, r3, #16
   1255c:	e942 5504 	strd	r5, r5, [r2, #-16]
   12560:	e942 5502 	strd	r5, r5, [r2, #-8]
   12564:	3210      	adds	r2, #16
   12566:	42ba      	cmp	r2, r7
   12568:	d1f8      	bne.n	1255c <memset+0x44>
   1256a:	1c72      	adds	r2, r6, #1
   1256c:	f014 0f0c 	tst.w	r4, #12
   12570:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   12574:	f004 060f 	and.w	r6, r4, #15
   12578:	d013      	beq.n	125a2 <memset+0x8a>
   1257a:	1f33      	subs	r3, r6, #4
   1257c:	f023 0303 	bic.w	r3, r3, #3
   12580:	3304      	adds	r3, #4
   12582:	4413      	add	r3, r2
   12584:	f842 5b04 	str.w	r5, [r2], #4
   12588:	4293      	cmp	r3, r2
   1258a:	d1fb      	bne.n	12584 <memset+0x6c>
   1258c:	f006 0403 	and.w	r4, r6, #3
   12590:	b12c      	cbz	r4, 1259e <memset+0x86>
   12592:	b2c9      	uxtb	r1, r1
   12594:	441c      	add	r4, r3
   12596:	f803 1b01 	strb.w	r1, [r3], #1
   1259a:	429c      	cmp	r4, r3
   1259c:	d1fb      	bne.n	12596 <memset+0x7e>
   1259e:	bcf0      	pop	{r4, r5, r6, r7}
   125a0:	4770      	bx	lr
   125a2:	4634      	mov	r4, r6
   125a4:	4613      	mov	r3, r2
   125a6:	2c00      	cmp	r4, #0
   125a8:	d1f3      	bne.n	12592 <memset+0x7a>
   125aa:	e7f8      	b.n	1259e <memset+0x86>
   125ac:	4614      	mov	r4, r2
   125ae:	4603      	mov	r3, r0
   125b0:	e7c2      	b.n	12538 <memset+0x20>
   125b2:	461a      	mov	r2, r3
   125b4:	4626      	mov	r6, r4
   125b6:	e7e0      	b.n	1257a <memset+0x62>

000125b8 <_free_r>:
   125b8:	2900      	cmp	r1, #0
   125ba:	d03c      	beq.n	12636 <_free_r+0x7e>
   125bc:	b538      	push	{r3, r4, r5, lr}
   125be:	f851 3c04 	ldr.w	r3, [r1, #-4]
   125c2:	1f0c      	subs	r4, r1, #4
   125c4:	2b00      	cmp	r3, #0
   125c6:	bfb8      	it	lt
   125c8:	18e4      	addlt	r4, r4, r3
   125ca:	4605      	mov	r5, r0
   125cc:	f000 ff4e 	bl	1346c <__malloc_lock>
   125d0:	4b23      	ldr	r3, [pc, #140]	; (12660 <_free_r+0xa8>)
   125d2:	681a      	ldr	r2, [r3, #0]
   125d4:	b12a      	cbz	r2, 125e2 <_free_r+0x2a>
   125d6:	42a2      	cmp	r2, r4
   125d8:	d90d      	bls.n	125f6 <_free_r+0x3e>
   125da:	6821      	ldr	r1, [r4, #0]
   125dc:	1860      	adds	r0, r4, r1
   125de:	4282      	cmp	r2, r0
   125e0:	d023      	beq.n	1262a <_free_r+0x72>
   125e2:	6062      	str	r2, [r4, #4]
   125e4:	4628      	mov	r0, r5
   125e6:	601c      	str	r4, [r3, #0]
   125e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   125ec:	f000 bf40 	b.w	13470 <__malloc_unlock>
   125f0:	42a3      	cmp	r3, r4
   125f2:	d803      	bhi.n	125fc <_free_r+0x44>
   125f4:	461a      	mov	r2, r3
   125f6:	6853      	ldr	r3, [r2, #4]
   125f8:	2b00      	cmp	r3, #0
   125fa:	d1f9      	bne.n	125f0 <_free_r+0x38>
   125fc:	6811      	ldr	r1, [r2, #0]
   125fe:	1850      	adds	r0, r2, r1
   12600:	42a0      	cmp	r0, r4
   12602:	d019      	beq.n	12638 <_free_r+0x80>
   12604:	d824      	bhi.n	12650 <_free_r+0x98>
   12606:	6821      	ldr	r1, [r4, #0]
   12608:	1860      	adds	r0, r4, r1
   1260a:	4283      	cmp	r3, r0
   1260c:	d006      	beq.n	1261c <_free_r+0x64>
   1260e:	6063      	str	r3, [r4, #4]
   12610:	6054      	str	r4, [r2, #4]
   12612:	4628      	mov	r0, r5
   12614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12618:	f000 bf2a 	b.w	13470 <__malloc_unlock>
   1261c:	e9d3 0300 	ldrd	r0, r3, [r3]
   12620:	4401      	add	r1, r0
   12622:	6063      	str	r3, [r4, #4]
   12624:	6021      	str	r1, [r4, #0]
   12626:	6054      	str	r4, [r2, #4]
   12628:	e7f3      	b.n	12612 <_free_r+0x5a>
   1262a:	e9d2 0200 	ldrd	r0, r2, [r2]
   1262e:	4401      	add	r1, r0
   12630:	6062      	str	r2, [r4, #4]
   12632:	6021      	str	r1, [r4, #0]
   12634:	e7d6      	b.n	125e4 <_free_r+0x2c>
   12636:	4770      	bx	lr
   12638:	6820      	ldr	r0, [r4, #0]
   1263a:	4401      	add	r1, r0
   1263c:	1850      	adds	r0, r2, r1
   1263e:	4283      	cmp	r3, r0
   12640:	6011      	str	r1, [r2, #0]
   12642:	d1e6      	bne.n	12612 <_free_r+0x5a>
   12644:	e9d3 0300 	ldrd	r0, r3, [r3]
   12648:	4401      	add	r1, r0
   1264a:	6053      	str	r3, [r2, #4]
   1264c:	6011      	str	r1, [r2, #0]
   1264e:	e7e0      	b.n	12612 <_free_r+0x5a>
   12650:	230c      	movs	r3, #12
   12652:	602b      	str	r3, [r5, #0]
   12654:	4628      	mov	r0, r5
   12656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1265a:	f000 bf09 	b.w	13470 <__malloc_unlock>
   1265e:	bf00      	nop
   12660:	200010c4 	.word	0x200010c4

00012664 <_malloc_r>:
   12664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12666:	1ccd      	adds	r5, r1, #3
   12668:	f025 0503 	bic.w	r5, r5, #3
   1266c:	3508      	adds	r5, #8
   1266e:	2d0c      	cmp	r5, #12
   12670:	bf38      	it	cc
   12672:	250c      	movcc	r5, #12
   12674:	2d00      	cmp	r5, #0
   12676:	4606      	mov	r6, r0
   12678:	db33      	blt.n	126e2 <_malloc_r+0x7e>
   1267a:	42a9      	cmp	r1, r5
   1267c:	d831      	bhi.n	126e2 <_malloc_r+0x7e>
   1267e:	4f2a      	ldr	r7, [pc, #168]	; (12728 <_malloc_r+0xc4>)
   12680:	f000 fef4 	bl	1346c <__malloc_lock>
   12684:	683a      	ldr	r2, [r7, #0]
   12686:	b152      	cbz	r2, 1269e <_malloc_r+0x3a>
   12688:	6813      	ldr	r3, [r2, #0]
   1268a:	1b5b      	subs	r3, r3, r5
   1268c:	d404      	bmi.n	12698 <_malloc_r+0x34>
   1268e:	e03f      	b.n	12710 <_malloc_r+0xac>
   12690:	6823      	ldr	r3, [r4, #0]
   12692:	1b5b      	subs	r3, r3, r5
   12694:	d529      	bpl.n	126ea <_malloc_r+0x86>
   12696:	4622      	mov	r2, r4
   12698:	6854      	ldr	r4, [r2, #4]
   1269a:	2c00      	cmp	r4, #0
   1269c:	d1f8      	bne.n	12690 <_malloc_r+0x2c>
   1269e:	6879      	ldr	r1, [r7, #4]
   126a0:	2900      	cmp	r1, #0
   126a2:	d03b      	beq.n	1271c <_malloc_r+0xb8>
   126a4:	4629      	mov	r1, r5
   126a6:	4630      	mov	r0, r6
   126a8:	f000 f8e8 	bl	1287c <_sbrk_r>
   126ac:	1c43      	adds	r3, r0, #1
   126ae:	d028      	beq.n	12702 <_malloc_r+0x9e>
   126b0:	1cc4      	adds	r4, r0, #3
   126b2:	f024 0403 	bic.w	r4, r4, #3
   126b6:	42a0      	cmp	r0, r4
   126b8:	d005      	beq.n	126c6 <_malloc_r+0x62>
   126ba:	1a21      	subs	r1, r4, r0
   126bc:	4630      	mov	r0, r6
   126be:	f000 f8dd 	bl	1287c <_sbrk_r>
   126c2:	3001      	adds	r0, #1
   126c4:	d01d      	beq.n	12702 <_malloc_r+0x9e>
   126c6:	6025      	str	r5, [r4, #0]
   126c8:	4630      	mov	r0, r6
   126ca:	f000 fed1 	bl	13470 <__malloc_unlock>
   126ce:	f104 000b 	add.w	r0, r4, #11
   126d2:	f020 0007 	bic.w	r0, r0, #7
   126d6:	1d23      	adds	r3, r4, #4
   126d8:	1ac2      	subs	r2, r0, r3
   126da:	d001      	beq.n	126e0 <_malloc_r+0x7c>
   126dc:	1a1b      	subs	r3, r3, r0
   126de:	50a3      	str	r3, [r4, r2]
   126e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126e2:	220c      	movs	r2, #12
   126e4:	6032      	str	r2, [r6, #0]
   126e6:	2000      	movs	r0, #0
   126e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126ea:	2b0b      	cmp	r3, #11
   126ec:	d805      	bhi.n	126fa <_malloc_r+0x96>
   126ee:	42a2      	cmp	r2, r4
   126f0:	6863      	ldr	r3, [r4, #4]
   126f2:	d011      	beq.n	12718 <_malloc_r+0xb4>
   126f4:	6053      	str	r3, [r2, #4]
   126f6:	e7e7      	b.n	126c8 <_malloc_r+0x64>
   126f8:	4614      	mov	r4, r2
   126fa:	6023      	str	r3, [r4, #0]
   126fc:	441c      	add	r4, r3
   126fe:	6025      	str	r5, [r4, #0]
   12700:	e7e2      	b.n	126c8 <_malloc_r+0x64>
   12702:	230c      	movs	r3, #12
   12704:	4630      	mov	r0, r6
   12706:	6033      	str	r3, [r6, #0]
   12708:	f000 feb2 	bl	13470 <__malloc_unlock>
   1270c:	2000      	movs	r0, #0
   1270e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12710:	2b0b      	cmp	r3, #11
   12712:	d8f1      	bhi.n	126f8 <_malloc_r+0x94>
   12714:	6853      	ldr	r3, [r2, #4]
   12716:	4614      	mov	r4, r2
   12718:	603b      	str	r3, [r7, #0]
   1271a:	e7d5      	b.n	126c8 <_malloc_r+0x64>
   1271c:	4630      	mov	r0, r6
   1271e:	f000 f8ad 	bl	1287c <_sbrk_r>
   12722:	6078      	str	r0, [r7, #4]
   12724:	e7be      	b.n	126a4 <_malloc_r+0x40>
   12726:	bf00      	nop
   12728:	200010c4 	.word	0x200010c4

0001272c <_iprintf_r>:
   1272c:	b40e      	push	{r1, r2, r3}
   1272e:	b510      	push	{r4, lr}
   12730:	4604      	mov	r4, r0
   12732:	b083      	sub	sp, #12
   12734:	b108      	cbz	r0, 1273a <_iprintf_r+0xe>
   12736:	6983      	ldr	r3, [r0, #24]
   12738:	b163      	cbz	r3, 12754 <_iprintf_r+0x28>
   1273a:	a806      	add	r0, sp, #24
   1273c:	4603      	mov	r3, r0
   1273e:	9001      	str	r0, [sp, #4]
   12740:	9a05      	ldr	r2, [sp, #20]
   12742:	68a1      	ldr	r1, [r4, #8]
   12744:	4620      	mov	r0, r4
   12746:	f001 f8ed 	bl	13924 <_vfiprintf_r>
   1274a:	b003      	add	sp, #12
   1274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12750:	b003      	add	sp, #12
   12752:	4770      	bx	lr
   12754:	f000 fda2 	bl	1329c <__sinit>
   12758:	e7ef      	b.n	1273a <_iprintf_r+0xe>
   1275a:	bf00      	nop

0001275c <iprintf>:
   1275c:	b40f      	push	{r0, r1, r2, r3}
   1275e:	b510      	push	{r4, lr}
   12760:	4b0b      	ldr	r3, [pc, #44]	; (12790 <iprintf+0x34>)
   12762:	681c      	ldr	r4, [r3, #0]
   12764:	b082      	sub	sp, #8
   12766:	b10c      	cbz	r4, 1276c <iprintf+0x10>
   12768:	69a3      	ldr	r3, [r4, #24]
   1276a:	b163      	cbz	r3, 12786 <iprintf+0x2a>
   1276c:	a805      	add	r0, sp, #20
   1276e:	4603      	mov	r3, r0
   12770:	9001      	str	r0, [sp, #4]
   12772:	9a04      	ldr	r2, [sp, #16]
   12774:	68a1      	ldr	r1, [r4, #8]
   12776:	4620      	mov	r0, r4
   12778:	f001 f8d4 	bl	13924 <_vfiprintf_r>
   1277c:	b002      	add	sp, #8
   1277e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12782:	b004      	add	sp, #16
   12784:	4770      	bx	lr
   12786:	4620      	mov	r0, r4
   12788:	f000 fd88 	bl	1329c <__sinit>
   1278c:	e7ee      	b.n	1276c <iprintf+0x10>
   1278e:	bf00      	nop
   12790:	20000548 	.word	0x20000548

00012794 <_puts_r>:
   12794:	6983      	ldr	r3, [r0, #24]
   12796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1279a:	4680      	mov	r8, r0
   1279c:	460e      	mov	r6, r1
   1279e:	b333      	cbz	r3, 127ee <_puts_r+0x5a>
   127a0:	6884      	ldr	r4, [r0, #8]
   127a2:	4b2f      	ldr	r3, [pc, #188]	; (12860 <_puts_r+0xcc>)
   127a4:	429c      	cmp	r4, r3
   127a6:	d030      	beq.n	1280a <_puts_r+0x76>
   127a8:	4b2e      	ldr	r3, [pc, #184]	; (12864 <_puts_r+0xd0>)
   127aa:	429c      	cmp	r4, r3
   127ac:	d039      	beq.n	12822 <_puts_r+0x8e>
   127ae:	4b2e      	ldr	r3, [pc, #184]	; (12868 <_puts_r+0xd4>)
   127b0:	429c      	cmp	r4, r3
   127b2:	bf08      	it	eq
   127b4:	f8d8 400c 	ldreq.w	r4, [r8, #12]
   127b8:	89a3      	ldrh	r3, [r4, #12]
   127ba:	071b      	lsls	r3, r3, #28
   127bc:	d52a      	bpl.n	12814 <_puts_r+0x80>
   127be:	6923      	ldr	r3, [r4, #16]
   127c0:	b343      	cbz	r3, 12814 <_puts_r+0x80>
   127c2:	3e01      	subs	r6, #1
   127c4:	68a3      	ldr	r3, [r4, #8]
   127c6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   127ca:	3b01      	subs	r3, #1
   127cc:	60a3      	str	r3, [r4, #8]
   127ce:	b39d      	cbz	r5, 12838 <_puts_r+0xa4>
   127d0:	2b00      	cmp	r3, #0
   127d2:	da07      	bge.n	127e4 <_puts_r+0x50>
   127d4:	69a7      	ldr	r7, [r4, #24]
   127d6:	429f      	cmp	r7, r3
   127d8:	4622      	mov	r2, r4
   127da:	4629      	mov	r1, r5
   127dc:	4640      	mov	r0, r8
   127de:	dc23      	bgt.n	12828 <_puts_r+0x94>
   127e0:	2d0a      	cmp	r5, #10
   127e2:	d021      	beq.n	12828 <_puts_r+0x94>
   127e4:	6823      	ldr	r3, [r4, #0]
   127e6:	1c5a      	adds	r2, r3, #1
   127e8:	6022      	str	r2, [r4, #0]
   127ea:	701d      	strb	r5, [r3, #0]
   127ec:	e7ea      	b.n	127c4 <_puts_r+0x30>
   127ee:	f000 fd55 	bl	1329c <__sinit>
   127f2:	f8d8 3018 	ldr.w	r3, [r8, #24]
   127f6:	f8d8 4008 	ldr.w	r4, [r8, #8]
   127fa:	2b00      	cmp	r3, #0
   127fc:	d1d1      	bne.n	127a2 <_puts_r+0xe>
   127fe:	4640      	mov	r0, r8
   12800:	f000 fd4c 	bl	1329c <__sinit>
   12804:	4b16      	ldr	r3, [pc, #88]	; (12860 <_puts_r+0xcc>)
   12806:	429c      	cmp	r4, r3
   12808:	d1ce      	bne.n	127a8 <_puts_r+0x14>
   1280a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   1280e:	89a3      	ldrh	r3, [r4, #12]
   12810:	071b      	lsls	r3, r3, #28
   12812:	d4d4      	bmi.n	127be <_puts_r+0x2a>
   12814:	4621      	mov	r1, r4
   12816:	4640      	mov	r0, r8
   12818:	f000 fb00 	bl	12e1c <__swsetup_r>
   1281c:	2800      	cmp	r0, #0
   1281e:	d0d0      	beq.n	127c2 <_puts_r+0x2e>
   12820:	e006      	b.n	12830 <_puts_r+0x9c>
   12822:	f8d8 4008 	ldr.w	r4, [r8, #8]
   12826:	e7c7      	b.n	127b8 <_puts_r+0x24>
   12828:	f000 fa98 	bl	12d5c <__swbuf_r>
   1282c:	3001      	adds	r0, #1
   1282e:	d1c9      	bne.n	127c4 <_puts_r+0x30>
   12830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12838:	2b00      	cmp	r3, #0
   1283a:	da09      	bge.n	12850 <_puts_r+0xbc>
   1283c:	4622      	mov	r2, r4
   1283e:	4640      	mov	r0, r8
   12840:	210a      	movs	r1, #10
   12842:	f000 fa8b 	bl	12d5c <__swbuf_r>
   12846:	3001      	adds	r0, #1
   12848:	d0f2      	beq.n	12830 <_puts_r+0x9c>
   1284a:	200a      	movs	r0, #10
   1284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12850:	6823      	ldr	r3, [r4, #0]
   12852:	220a      	movs	r2, #10
   12854:	1c59      	adds	r1, r3, #1
   12856:	6021      	str	r1, [r4, #0]
   12858:	701a      	strb	r2, [r3, #0]
   1285a:	4610      	mov	r0, r2
   1285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12860:	000153a8 	.word	0x000153a8
   12864:	00015388 	.word	0x00015388
   12868:	00015368 	.word	0x00015368

0001286c <puts>:
   1286c:	4b02      	ldr	r3, [pc, #8]	; (12878 <puts+0xc>)
   1286e:	4601      	mov	r1, r0
   12870:	6818      	ldr	r0, [r3, #0]
   12872:	f7ff bf8f 	b.w	12794 <_puts_r>
   12876:	bf00      	nop
   12878:	20000548 	.word	0x20000548

0001287c <_sbrk_r>:
   1287c:	b538      	push	{r3, r4, r5, lr}
   1287e:	4c07      	ldr	r4, [pc, #28]	; (1289c <_sbrk_r+0x20>)
   12880:	2300      	movs	r3, #0
   12882:	4605      	mov	r5, r0
   12884:	4608      	mov	r0, r1
   12886:	6023      	str	r3, [r4, #0]
   12888:	f7f8 fd5a 	bl	b340 <_sbrk>
   1288c:	1c43      	adds	r3, r0, #1
   1288e:	d000      	beq.n	12892 <_sbrk_r+0x16>
   12890:	bd38      	pop	{r3, r4, r5, pc}
   12892:	6823      	ldr	r3, [r4, #0]
   12894:	2b00      	cmp	r3, #0
   12896:	d0fb      	beq.n	12890 <_sbrk_r+0x14>
   12898:	602b      	str	r3, [r5, #0]
   1289a:	bd38      	pop	{r3, r4, r5, pc}
   1289c:	20014d64 	.word	0x20014d64

000128a0 <setbuf>:
   128a0:	2900      	cmp	r1, #0
   128a2:	bf0c      	ite	eq
   128a4:	2202      	moveq	r2, #2
   128a6:	2200      	movne	r2, #0
   128a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   128ac:	f000 b800 	b.w	128b0 <setvbuf>

000128b0 <setvbuf>:
   128b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   128b4:	4c58      	ldr	r4, [pc, #352]	; (12a18 <setvbuf+0x168>)
   128b6:	6825      	ldr	r5, [r4, #0]
   128b8:	b083      	sub	sp, #12
   128ba:	4604      	mov	r4, r0
   128bc:	460f      	mov	r7, r1
   128be:	4690      	mov	r8, r2
   128c0:	461e      	mov	r6, r3
   128c2:	b115      	cbz	r5, 128ca <setvbuf+0x1a>
   128c4:	69ab      	ldr	r3, [r5, #24]
   128c6:	2b00      	cmp	r3, #0
   128c8:	d062      	beq.n	12990 <setvbuf+0xe0>
   128ca:	4b54      	ldr	r3, [pc, #336]	; (12a1c <setvbuf+0x16c>)
   128cc:	429c      	cmp	r4, r3
   128ce:	d065      	beq.n	1299c <setvbuf+0xec>
   128d0:	4b53      	ldr	r3, [pc, #332]	; (12a20 <setvbuf+0x170>)
   128d2:	429c      	cmp	r4, r3
   128d4:	d064      	beq.n	129a0 <setvbuf+0xf0>
   128d6:	4b53      	ldr	r3, [pc, #332]	; (12a24 <setvbuf+0x174>)
   128d8:	429c      	cmp	r4, r3
   128da:	bf08      	it	eq
   128dc:	68ec      	ldreq	r4, [r5, #12]
   128de:	f1b8 0f02 	cmp.w	r8, #2
   128e2:	d006      	beq.n	128f2 <setvbuf+0x42>
   128e4:	f1b8 0f01 	cmp.w	r8, #1
   128e8:	f200 8093 	bhi.w	12a12 <setvbuf+0x162>
   128ec:	2e00      	cmp	r6, #0
   128ee:	f2c0 8090 	blt.w	12a12 <setvbuf+0x162>
   128f2:	4621      	mov	r1, r4
   128f4:	4628      	mov	r0, r5
   128f6:	f000 fba7 	bl	13048 <_fflush_r>
   128fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   128fc:	b141      	cbz	r1, 12910 <setvbuf+0x60>
   128fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   12902:	4299      	cmp	r1, r3
   12904:	d002      	beq.n	1290c <setvbuf+0x5c>
   12906:	4628      	mov	r0, r5
   12908:	f7ff fe56 	bl	125b8 <_free_r>
   1290c:	2300      	movs	r3, #0
   1290e:	6363      	str	r3, [r4, #52]	; 0x34
   12910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12914:	2200      	movs	r2, #0
   12916:	61a2      	str	r2, [r4, #24]
   12918:	6062      	str	r2, [r4, #4]
   1291a:	061a      	lsls	r2, r3, #24
   1291c:	d44f      	bmi.n	129be <setvbuf+0x10e>
   1291e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   12922:	f023 0303 	bic.w	r3, r3, #3
   12926:	f1b8 0f02 	cmp.w	r8, #2
   1292a:	81a3      	strh	r3, [r4, #12]
   1292c:	d04e      	beq.n	129cc <setvbuf+0x11c>
   1292e:	ab01      	add	r3, sp, #4
   12930:	466a      	mov	r2, sp
   12932:	4621      	mov	r1, r4
   12934:	4628      	mov	r0, r5
   12936:	f000 fd21 	bl	1337c <__swhatbuf_r>
   1293a:	89a3      	ldrh	r3, [r4, #12]
   1293c:	4318      	orrs	r0, r3
   1293e:	81a0      	strh	r0, [r4, #12]
   12940:	2e00      	cmp	r6, #0
   12942:	d12f      	bne.n	129a4 <setvbuf+0xf4>
   12944:	9e00      	ldr	r6, [sp, #0]
   12946:	4630      	mov	r0, r6
   12948:	f7ff fd3c 	bl	123c4 <malloc>
   1294c:	4607      	mov	r7, r0
   1294e:	2800      	cmp	r0, #0
   12950:	d04f      	beq.n	129f2 <setvbuf+0x142>
   12952:	89a3      	ldrh	r3, [r4, #12]
   12954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12958:	81a3      	strh	r3, [r4, #12]
   1295a:	69ab      	ldr	r3, [r5, #24]
   1295c:	b33b      	cbz	r3, 129ae <setvbuf+0xfe>
   1295e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12962:	6027      	str	r7, [r4, #0]
   12964:	f1b8 0f01 	cmp.w	r8, #1
   12968:	bf04      	itt	eq
   1296a:	f043 0301 	orreq.w	r3, r3, #1
   1296e:	81a3      	strheq	r3, [r4, #12]
   12970:	b29b      	uxth	r3, r3
   12972:	f013 0008 	ands.w	r0, r3, #8
   12976:	e9c4 7604 	strd	r7, r6, [r4, #16]
   1297a:	d01c      	beq.n	129b6 <setvbuf+0x106>
   1297c:	f013 0001 	ands.w	r0, r3, #1
   12980:	d033      	beq.n	129ea <setvbuf+0x13a>
   12982:	2000      	movs	r0, #0
   12984:	4276      	negs	r6, r6
   12986:	61a6      	str	r6, [r4, #24]
   12988:	60a0      	str	r0, [r4, #8]
   1298a:	b003      	add	sp, #12
   1298c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12990:	4628      	mov	r0, r5
   12992:	f000 fc83 	bl	1329c <__sinit>
   12996:	4b21      	ldr	r3, [pc, #132]	; (12a1c <setvbuf+0x16c>)
   12998:	429c      	cmp	r4, r3
   1299a:	d199      	bne.n	128d0 <setvbuf+0x20>
   1299c:	686c      	ldr	r4, [r5, #4]
   1299e:	e79e      	b.n	128de <setvbuf+0x2e>
   129a0:	68ac      	ldr	r4, [r5, #8]
   129a2:	e79c      	b.n	128de <setvbuf+0x2e>
   129a4:	2f00      	cmp	r7, #0
   129a6:	d0ce      	beq.n	12946 <setvbuf+0x96>
   129a8:	69ab      	ldr	r3, [r5, #24]
   129aa:	2b00      	cmp	r3, #0
   129ac:	d1d7      	bne.n	1295e <setvbuf+0xae>
   129ae:	4628      	mov	r0, r5
   129b0:	f000 fc74 	bl	1329c <__sinit>
   129b4:	e7d3      	b.n	1295e <setvbuf+0xae>
   129b6:	60a0      	str	r0, [r4, #8]
   129b8:	b003      	add	sp, #12
   129ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   129be:	6921      	ldr	r1, [r4, #16]
   129c0:	4628      	mov	r0, r5
   129c2:	f7ff fdf9 	bl	125b8 <_free_r>
   129c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   129ca:	e7a8      	b.n	1291e <setvbuf+0x6e>
   129cc:	2000      	movs	r0, #0
   129ce:	f104 0247 	add.w	r2, r4, #71	; 0x47
   129d2:	f043 0302 	orr.w	r3, r3, #2
   129d6:	2500      	movs	r5, #0
   129d8:	2101      	movs	r1, #1
   129da:	81a3      	strh	r3, [r4, #12]
   129dc:	60a5      	str	r5, [r4, #8]
   129de:	6022      	str	r2, [r4, #0]
   129e0:	e9c4 2104 	strd	r2, r1, [r4, #16]
   129e4:	b003      	add	sp, #12
   129e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   129ea:	60a6      	str	r6, [r4, #8]
   129ec:	b003      	add	sp, #12
   129ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   129f2:	f8dd 9000 	ldr.w	r9, [sp]
   129f6:	45b1      	cmp	r9, r6
   129f8:	d006      	beq.n	12a08 <setvbuf+0x158>
   129fa:	4648      	mov	r0, r9
   129fc:	f7ff fce2 	bl	123c4 <malloc>
   12a00:	4607      	mov	r7, r0
   12a02:	b108      	cbz	r0, 12a08 <setvbuf+0x158>
   12a04:	464e      	mov	r6, r9
   12a06:	e7a4      	b.n	12952 <setvbuf+0xa2>
   12a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a10:	e7dd      	b.n	129ce <setvbuf+0x11e>
   12a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a16:	e7cf      	b.n	129b8 <setvbuf+0x108>
   12a18:	20000548 	.word	0x20000548
   12a1c:	000153a8 	.word	0x000153a8
   12a20:	00015388 	.word	0x00015388
   12a24:	00015368 	.word	0x00015368

00012a28 <_sniprintf_r>:
   12a28:	b408      	push	{r3}
   12a2a:	b530      	push	{r4, r5, lr}
   12a2c:	2a00      	cmp	r2, #0
   12a2e:	b09c      	sub	sp, #112	; 0x70
   12a30:	4604      	mov	r4, r0
   12a32:	db35      	blt.n	12aa0 <_sniprintf_r+0x78>
   12a34:	f44f 7302 	mov.w	r3, #520	; 0x208
   12a38:	9102      	str	r1, [sp, #8]
   12a3a:	9106      	str	r1, [sp, #24]
   12a3c:	f8ad 3014 	strh.w	r3, [sp, #20]
   12a40:	a920      	add	r1, sp, #128	; 0x80
   12a42:	d018      	beq.n	12a76 <_sniprintf_r+0x4e>
   12a44:	3a01      	subs	r2, #1
   12a46:	460b      	mov	r3, r1
   12a48:	9204      	str	r2, [sp, #16]
   12a4a:	9207      	str	r2, [sp, #28]
   12a4c:	9101      	str	r1, [sp, #4]
   12a4e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   12a50:	f64f 75ff 	movw	r5, #65535	; 0xffff
   12a54:	a902      	add	r1, sp, #8
   12a56:	f8ad 5016 	strh.w	r5, [sp, #22]
   12a5a:	f000 fde7 	bl	1362c <_svfiprintf_r>
   12a5e:	1c42      	adds	r2, r0, #1
   12a60:	da01      	bge.n	12a66 <_sniprintf_r+0x3e>
   12a62:	238b      	movs	r3, #139	; 0x8b
   12a64:	6023      	str	r3, [r4, #0]
   12a66:	9b02      	ldr	r3, [sp, #8]
   12a68:	2200      	movs	r2, #0
   12a6a:	701a      	strb	r2, [r3, #0]
   12a6c:	b01c      	add	sp, #112	; 0x70
   12a6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12a72:	b001      	add	sp, #4
   12a74:	4770      	bx	lr
   12a76:	460b      	mov	r3, r1
   12a78:	9204      	str	r2, [sp, #16]
   12a7a:	9207      	str	r2, [sp, #28]
   12a7c:	9101      	str	r1, [sp, #4]
   12a7e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   12a82:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   12a84:	f8ad 5016 	strh.w	r5, [sp, #22]
   12a88:	a902      	add	r1, sp, #8
   12a8a:	f000 fdcf 	bl	1362c <_svfiprintf_r>
   12a8e:	1c43      	adds	r3, r0, #1
   12a90:	da01      	bge.n	12a96 <_sniprintf_r+0x6e>
   12a92:	238b      	movs	r3, #139	; 0x8b
   12a94:	6023      	str	r3, [r4, #0]
   12a96:	b01c      	add	sp, #112	; 0x70
   12a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12a9c:	b001      	add	sp, #4
   12a9e:	4770      	bx	lr
   12aa0:	228b      	movs	r2, #139	; 0x8b
   12aa2:	6002      	str	r2, [r0, #0]
   12aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12aa8:	e7f5      	b.n	12a96 <_sniprintf_r+0x6e>
   12aaa:	bf00      	nop

00012aac <sniprintf>:
   12aac:	b40c      	push	{r2, r3}
   12aae:	b530      	push	{r4, r5, lr}
   12ab0:	4b20      	ldr	r3, [pc, #128]	; (12b34 <sniprintf+0x88>)
   12ab2:	2900      	cmp	r1, #0
   12ab4:	b09d      	sub	sp, #116	; 0x74
   12ab6:	681c      	ldr	r4, [r3, #0]
   12ab8:	db37      	blt.n	12b2a <sniprintf+0x7e>
   12aba:	f44f 7302 	mov.w	r3, #520	; 0x208
   12abe:	9002      	str	r0, [sp, #8]
   12ac0:	9006      	str	r0, [sp, #24]
   12ac2:	f8ad 3014 	strh.w	r3, [sp, #20]
   12ac6:	a821      	add	r0, sp, #132	; 0x84
   12ac8:	d019      	beq.n	12afe <sniprintf+0x52>
   12aca:	3901      	subs	r1, #1
   12acc:	4603      	mov	r3, r0
   12ace:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12ad0:	9104      	str	r1, [sp, #16]
   12ad2:	9107      	str	r1, [sp, #28]
   12ad4:	9001      	str	r0, [sp, #4]
   12ad6:	f64f 75ff 	movw	r5, #65535	; 0xffff
   12ada:	a902      	add	r1, sp, #8
   12adc:	4620      	mov	r0, r4
   12ade:	f8ad 5016 	strh.w	r5, [sp, #22]
   12ae2:	f000 fda3 	bl	1362c <_svfiprintf_r>
   12ae6:	1c42      	adds	r2, r0, #1
   12ae8:	da01      	bge.n	12aee <sniprintf+0x42>
   12aea:	238b      	movs	r3, #139	; 0x8b
   12aec:	6023      	str	r3, [r4, #0]
   12aee:	9b02      	ldr	r3, [sp, #8]
   12af0:	2200      	movs	r2, #0
   12af2:	701a      	strb	r2, [r3, #0]
   12af4:	b01d      	add	sp, #116	; 0x74
   12af6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12afa:	b002      	add	sp, #8
   12afc:	4770      	bx	lr
   12afe:	4603      	mov	r3, r0
   12b00:	9104      	str	r1, [sp, #16]
   12b02:	9107      	str	r1, [sp, #28]
   12b04:	9001      	str	r0, [sp, #4]
   12b06:	f64f 75ff 	movw	r5, #65535	; 0xffff
   12b0a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12b0c:	f8ad 5016 	strh.w	r5, [sp, #22]
   12b10:	a902      	add	r1, sp, #8
   12b12:	4620      	mov	r0, r4
   12b14:	f000 fd8a 	bl	1362c <_svfiprintf_r>
   12b18:	1c43      	adds	r3, r0, #1
   12b1a:	da01      	bge.n	12b20 <sniprintf+0x74>
   12b1c:	238b      	movs	r3, #139	; 0x8b
   12b1e:	6023      	str	r3, [r4, #0]
   12b20:	b01d      	add	sp, #116	; 0x74
   12b22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12b26:	b002      	add	sp, #8
   12b28:	4770      	bx	lr
   12b2a:	238b      	movs	r3, #139	; 0x8b
   12b2c:	6023      	str	r3, [r4, #0]
   12b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b32:	e7f5      	b.n	12b20 <sniprintf+0x74>
   12b34:	20000548 	.word	0x20000548

00012b38 <_siprintf_r>:
   12b38:	b40c      	push	{r2, r3}
   12b3a:	b570      	push	{r4, r5, r6, lr}
   12b3c:	b09c      	sub	sp, #112	; 0x70
   12b3e:	ac20      	add	r4, sp, #128	; 0x80
   12b40:	4e0b      	ldr	r6, [pc, #44]	; (12b70 <_siprintf_r+0x38>)
   12b42:	f854 2b04 	ldr.w	r2, [r4], #4
   12b46:	9102      	str	r1, [sp, #8]
   12b48:	4623      	mov	r3, r4
   12b4a:	9106      	str	r1, [sp, #24]
   12b4c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   12b50:	a902      	add	r1, sp, #8
   12b52:	9401      	str	r4, [sp, #4]
   12b54:	9507      	str	r5, [sp, #28]
   12b56:	e9cd 5604 	strd	r5, r6, [sp, #16]
   12b5a:	f000 fd67 	bl	1362c <_svfiprintf_r>
   12b5e:	9b02      	ldr	r3, [sp, #8]
   12b60:	2200      	movs	r2, #0
   12b62:	701a      	strb	r2, [r3, #0]
   12b64:	b01c      	add	sp, #112	; 0x70
   12b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12b6a:	b002      	add	sp, #8
   12b6c:	4770      	bx	lr
   12b6e:	bf00      	nop
   12b70:	ffff0208 	.word	0xffff0208

00012b74 <siprintf>:
   12b74:	b40e      	push	{r1, r2, r3}
   12b76:	b530      	push	{r4, r5, lr}
   12b78:	b09c      	sub	sp, #112	; 0x70
   12b7a:	ab1f      	add	r3, sp, #124	; 0x7c
   12b7c:	4c0c      	ldr	r4, [pc, #48]	; (12bb0 <siprintf+0x3c>)
   12b7e:	4d0d      	ldr	r5, [pc, #52]	; (12bb4 <siprintf+0x40>)
   12b80:	f853 2b04 	ldr.w	r2, [r3], #4
   12b84:	9301      	str	r3, [sp, #4]
   12b86:	4601      	mov	r1, r0
   12b88:	9102      	str	r1, [sp, #8]
   12b8a:	9106      	str	r1, [sp, #24]
   12b8c:	6820      	ldr	r0, [r4, #0]
   12b8e:	a902      	add	r1, sp, #8
   12b90:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   12b94:	9407      	str	r4, [sp, #28]
   12b96:	e9cd 4504 	strd	r4, r5, [sp, #16]
   12b9a:	f000 fd47 	bl	1362c <_svfiprintf_r>
   12b9e:	9b02      	ldr	r3, [sp, #8]
   12ba0:	2200      	movs	r2, #0
   12ba2:	701a      	strb	r2, [r3, #0]
   12ba4:	b01c      	add	sp, #112	; 0x70
   12ba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   12baa:	b003      	add	sp, #12
   12bac:	4770      	bx	lr
   12bae:	bf00      	nop
   12bb0:	20000548 	.word	0x20000548
   12bb4:	ffff0208 	.word	0xffff0208

00012bb8 <strcpy>:
   12bb8:	ea80 0201 	eor.w	r2, r0, r1
   12bbc:	4684      	mov	ip, r0
   12bbe:	f012 0f03 	tst.w	r2, #3
   12bc2:	d14f      	bne.n	12c64 <strcpy+0xac>
   12bc4:	f011 0f03 	tst.w	r1, #3
   12bc8:	d132      	bne.n	12c30 <strcpy+0x78>
   12bca:	f84d 4d04 	str.w	r4, [sp, #-4]!
   12bce:	f011 0f04 	tst.w	r1, #4
   12bd2:	f851 3b04 	ldr.w	r3, [r1], #4
   12bd6:	d00b      	beq.n	12bf0 <strcpy+0x38>
   12bd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12bdc:	439a      	bics	r2, r3
   12bde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12be2:	bf04      	itt	eq
   12be4:	f84c 3b04 	streq.w	r3, [ip], #4
   12be8:	f851 3b04 	ldreq.w	r3, [r1], #4
   12bec:	d116      	bne.n	12c1c <strcpy+0x64>
   12bee:	bf00      	nop
   12bf0:	f851 4b04 	ldr.w	r4, [r1], #4
   12bf4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12bf8:	439a      	bics	r2, r3
   12bfa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12bfe:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   12c02:	d10b      	bne.n	12c1c <strcpy+0x64>
   12c04:	f84c 3b04 	str.w	r3, [ip], #4
   12c08:	43a2      	bics	r2, r4
   12c0a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12c0e:	bf04      	itt	eq
   12c10:	f851 3b04 	ldreq.w	r3, [r1], #4
   12c14:	f84c 4b04 	streq.w	r4, [ip], #4
   12c18:	d0ea      	beq.n	12bf0 <strcpy+0x38>
   12c1a:	4623      	mov	r3, r4
   12c1c:	f80c 3b01 	strb.w	r3, [ip], #1
   12c20:	f013 0fff 	tst.w	r3, #255	; 0xff
   12c24:	ea4f 2333 	mov.w	r3, r3, ror #8
   12c28:	d1f8      	bne.n	12c1c <strcpy+0x64>
   12c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
   12c2e:	4770      	bx	lr
   12c30:	f011 0f01 	tst.w	r1, #1
   12c34:	d006      	beq.n	12c44 <strcpy+0x8c>
   12c36:	f811 2b01 	ldrb.w	r2, [r1], #1
   12c3a:	f80c 2b01 	strb.w	r2, [ip], #1
   12c3e:	2a00      	cmp	r2, #0
   12c40:	bf08      	it	eq
   12c42:	4770      	bxeq	lr
   12c44:	f011 0f02 	tst.w	r1, #2
   12c48:	d0bf      	beq.n	12bca <strcpy+0x12>
   12c4a:	f831 2b02 	ldrh.w	r2, [r1], #2
   12c4e:	f012 0fff 	tst.w	r2, #255	; 0xff
   12c52:	bf16      	itet	ne
   12c54:	f82c 2b02 	strhne.w	r2, [ip], #2
   12c58:	f88c 2000 	strbeq.w	r2, [ip]
   12c5c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   12c60:	d1b3      	bne.n	12bca <strcpy+0x12>
   12c62:	4770      	bx	lr
   12c64:	f811 2b01 	ldrb.w	r2, [r1], #1
   12c68:	f80c 2b01 	strb.w	r2, [ip], #1
   12c6c:	2a00      	cmp	r2, #0
   12c6e:	d1f9      	bne.n	12c64 <strcpy+0xac>
   12c70:	4770      	bx	lr
   12c72:	bf00      	nop
	...

00012c80 <strlen>:
   12c80:	f890 f000 	pld	[r0]
   12c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12c88:	f020 0107 	bic.w	r1, r0, #7
   12c8c:	f06f 0c00 	mvn.w	ip, #0
   12c90:	f010 0407 	ands.w	r4, r0, #7
   12c94:	f891 f020 	pld	[r1, #32]
   12c98:	f040 8049 	bne.w	12d2e <strlen+0xae>
   12c9c:	f04f 0400 	mov.w	r4, #0
   12ca0:	f06f 0007 	mvn.w	r0, #7
   12ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
   12ca8:	f891 f040 	pld	[r1, #64]	; 0x40
   12cac:	f100 0008 	add.w	r0, r0, #8
   12cb0:	fa82 f24c 	uadd8	r2, r2, ip
   12cb4:	faa4 f28c 	sel	r2, r4, ip
   12cb8:	fa83 f34c 	uadd8	r3, r3, ip
   12cbc:	faa2 f38c 	sel	r3, r2, ip
   12cc0:	bb4b      	cbnz	r3, 12d16 <strlen+0x96>
   12cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12cc6:	fa82 f24c 	uadd8	r2, r2, ip
   12cca:	f100 0008 	add.w	r0, r0, #8
   12cce:	faa4 f28c 	sel	r2, r4, ip
   12cd2:	fa83 f34c 	uadd8	r3, r3, ip
   12cd6:	faa2 f38c 	sel	r3, r2, ip
   12cda:	b9e3      	cbnz	r3, 12d16 <strlen+0x96>
   12cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   12ce0:	fa82 f24c 	uadd8	r2, r2, ip
   12ce4:	f100 0008 	add.w	r0, r0, #8
   12ce8:	faa4 f28c 	sel	r2, r4, ip
   12cec:	fa83 f34c 	uadd8	r3, r3, ip
   12cf0:	faa2 f38c 	sel	r3, r2, ip
   12cf4:	b97b      	cbnz	r3, 12d16 <strlen+0x96>
   12cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   12cfa:	f101 0120 	add.w	r1, r1, #32
   12cfe:	fa82 f24c 	uadd8	r2, r2, ip
   12d02:	f100 0008 	add.w	r0, r0, #8
   12d06:	faa4 f28c 	sel	r2, r4, ip
   12d0a:	fa83 f34c 	uadd8	r3, r3, ip
   12d0e:	faa2 f38c 	sel	r3, r2, ip
   12d12:	2b00      	cmp	r3, #0
   12d14:	d0c6      	beq.n	12ca4 <strlen+0x24>
   12d16:	2a00      	cmp	r2, #0
   12d18:	bf04      	itt	eq
   12d1a:	3004      	addeq	r0, #4
   12d1c:	461a      	moveq	r2, r3
   12d1e:	ba12      	rev	r2, r2
   12d20:	fab2 f282 	clz	r2, r2
   12d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   12d2c:	4770      	bx	lr
   12d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   12d32:	f004 0503 	and.w	r5, r4, #3
   12d36:	f1c4 0000 	rsb	r0, r4, #0
   12d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12d3e:	f014 0f04 	tst.w	r4, #4
   12d42:	f891 f040 	pld	[r1, #64]	; 0x40
   12d46:	fa0c f505 	lsl.w	r5, ip, r5
   12d4a:	ea62 0205 	orn	r2, r2, r5
   12d4e:	bf1c      	itt	ne
   12d50:	ea63 0305 	ornne	r3, r3, r5
   12d54:	4662      	movne	r2, ip
   12d56:	f04f 0400 	mov.w	r4, #0
   12d5a:	e7a9      	b.n	12cb0 <strlen+0x30>

00012d5c <__swbuf_r>:
   12d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d5e:	460d      	mov	r5, r1
   12d60:	4614      	mov	r4, r2
   12d62:	4606      	mov	r6, r0
   12d64:	b108      	cbz	r0, 12d6a <__swbuf_r+0xe>
   12d66:	6983      	ldr	r3, [r0, #24]
   12d68:	b343      	cbz	r3, 12dbc <__swbuf_r+0x60>
   12d6a:	4b25      	ldr	r3, [pc, #148]	; (12e00 <__swbuf_r+0xa4>)
   12d6c:	429c      	cmp	r4, r3
   12d6e:	d02a      	beq.n	12dc6 <__swbuf_r+0x6a>
   12d70:	4b24      	ldr	r3, [pc, #144]	; (12e04 <__swbuf_r+0xa8>)
   12d72:	429c      	cmp	r4, r3
   12d74:	d029      	beq.n	12dca <__swbuf_r+0x6e>
   12d76:	4b24      	ldr	r3, [pc, #144]	; (12e08 <__swbuf_r+0xac>)
   12d78:	429c      	cmp	r4, r3
   12d7a:	bf08      	it	eq
   12d7c:	68f4      	ldreq	r4, [r6, #12]
   12d7e:	89a3      	ldrh	r3, [r4, #12]
   12d80:	69a2      	ldr	r2, [r4, #24]
   12d82:	60a2      	str	r2, [r4, #8]
   12d84:	071a      	lsls	r2, r3, #28
   12d86:	d522      	bpl.n	12dce <__swbuf_r+0x72>
   12d88:	6923      	ldr	r3, [r4, #16]
   12d8a:	b303      	cbz	r3, 12dce <__swbuf_r+0x72>
   12d8c:	6822      	ldr	r2, [r4, #0]
   12d8e:	6961      	ldr	r1, [r4, #20]
   12d90:	1ad3      	subs	r3, r2, r3
   12d92:	b2ed      	uxtb	r5, r5
   12d94:	4299      	cmp	r1, r3
   12d96:	462f      	mov	r7, r5
   12d98:	dd29      	ble.n	12dee <__swbuf_r+0x92>
   12d9a:	3301      	adds	r3, #1
   12d9c:	68a1      	ldr	r1, [r4, #8]
   12d9e:	1c50      	adds	r0, r2, #1
   12da0:	3901      	subs	r1, #1
   12da2:	60a1      	str	r1, [r4, #8]
   12da4:	6020      	str	r0, [r4, #0]
   12da6:	7015      	strb	r5, [r2, #0]
   12da8:	6962      	ldr	r2, [r4, #20]
   12daa:	429a      	cmp	r2, r3
   12dac:	d016      	beq.n	12ddc <__swbuf_r+0x80>
   12dae:	89a3      	ldrh	r3, [r4, #12]
   12db0:	07db      	lsls	r3, r3, #31
   12db2:	d501      	bpl.n	12db8 <__swbuf_r+0x5c>
   12db4:	2d0a      	cmp	r5, #10
   12db6:	d011      	beq.n	12ddc <__swbuf_r+0x80>
   12db8:	4638      	mov	r0, r7
   12dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12dbc:	f000 fa6e 	bl	1329c <__sinit>
   12dc0:	4b0f      	ldr	r3, [pc, #60]	; (12e00 <__swbuf_r+0xa4>)
   12dc2:	429c      	cmp	r4, r3
   12dc4:	d1d4      	bne.n	12d70 <__swbuf_r+0x14>
   12dc6:	6874      	ldr	r4, [r6, #4]
   12dc8:	e7d9      	b.n	12d7e <__swbuf_r+0x22>
   12dca:	68b4      	ldr	r4, [r6, #8]
   12dcc:	e7d7      	b.n	12d7e <__swbuf_r+0x22>
   12dce:	4621      	mov	r1, r4
   12dd0:	4630      	mov	r0, r6
   12dd2:	f000 f823 	bl	12e1c <__swsetup_r>
   12dd6:	b938      	cbnz	r0, 12de8 <__swbuf_r+0x8c>
   12dd8:	6923      	ldr	r3, [r4, #16]
   12dda:	e7d7      	b.n	12d8c <__swbuf_r+0x30>
   12ddc:	4621      	mov	r1, r4
   12dde:	4630      	mov	r0, r6
   12de0:	f000 f932 	bl	13048 <_fflush_r>
   12de4:	2800      	cmp	r0, #0
   12de6:	d0e7      	beq.n	12db8 <__swbuf_r+0x5c>
   12de8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12dec:	e7e4      	b.n	12db8 <__swbuf_r+0x5c>
   12dee:	4621      	mov	r1, r4
   12df0:	4630      	mov	r0, r6
   12df2:	f000 f929 	bl	13048 <_fflush_r>
   12df6:	2800      	cmp	r0, #0
   12df8:	d1f6      	bne.n	12de8 <__swbuf_r+0x8c>
   12dfa:	6822      	ldr	r2, [r4, #0]
   12dfc:	2301      	movs	r3, #1
   12dfe:	e7cd      	b.n	12d9c <__swbuf_r+0x40>
   12e00:	000153a8 	.word	0x000153a8
   12e04:	00015388 	.word	0x00015388
   12e08:	00015368 	.word	0x00015368

00012e0c <__swbuf>:
   12e0c:	4b02      	ldr	r3, [pc, #8]	; (12e18 <__swbuf+0xc>)
   12e0e:	460a      	mov	r2, r1
   12e10:	4601      	mov	r1, r0
   12e12:	6818      	ldr	r0, [r3, #0]
   12e14:	f7ff bfa2 	b.w	12d5c <__swbuf_r>
   12e18:	20000548 	.word	0x20000548

00012e1c <__swsetup_r>:
   12e1c:	4b3b      	ldr	r3, [pc, #236]	; (12f0c <__swsetup_r+0xf0>)
   12e1e:	b570      	push	{r4, r5, r6, lr}
   12e20:	681d      	ldr	r5, [r3, #0]
   12e22:	4606      	mov	r6, r0
   12e24:	460c      	mov	r4, r1
   12e26:	b10d      	cbz	r5, 12e2c <__swsetup_r+0x10>
   12e28:	69ab      	ldr	r3, [r5, #24]
   12e2a:	b1db      	cbz	r3, 12e64 <__swsetup_r+0x48>
   12e2c:	4b38      	ldr	r3, [pc, #224]	; (12f10 <__swsetup_r+0xf4>)
   12e2e:	429c      	cmp	r4, r3
   12e30:	d01e      	beq.n	12e70 <__swsetup_r+0x54>
   12e32:	4b38      	ldr	r3, [pc, #224]	; (12f14 <__swsetup_r+0xf8>)
   12e34:	429c      	cmp	r4, r3
   12e36:	d04a      	beq.n	12ece <__swsetup_r+0xb2>
   12e38:	4b37      	ldr	r3, [pc, #220]	; (12f18 <__swsetup_r+0xfc>)
   12e3a:	429c      	cmp	r4, r3
   12e3c:	bf08      	it	eq
   12e3e:	68ec      	ldreq	r4, [r5, #12]
   12e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   12e44:	b293      	uxth	r3, r2
   12e46:	0719      	lsls	r1, r3, #28
   12e48:	d518      	bpl.n	12e7c <__swsetup_r+0x60>
   12e4a:	6920      	ldr	r0, [r4, #16]
   12e4c:	b308      	cbz	r0, 12e92 <__swsetup_r+0x76>
   12e4e:	f013 0201 	ands.w	r2, r3, #1
   12e52:	d02c      	beq.n	12eae <__swsetup_r+0x92>
   12e54:	6963      	ldr	r3, [r4, #20]
   12e56:	2200      	movs	r2, #0
   12e58:	425b      	negs	r3, r3
   12e5a:	61a3      	str	r3, [r4, #24]
   12e5c:	60a2      	str	r2, [r4, #8]
   12e5e:	b360      	cbz	r0, 12eba <__swsetup_r+0x9e>
   12e60:	2000      	movs	r0, #0
   12e62:	bd70      	pop	{r4, r5, r6, pc}
   12e64:	4628      	mov	r0, r5
   12e66:	f000 fa19 	bl	1329c <__sinit>
   12e6a:	4b29      	ldr	r3, [pc, #164]	; (12f10 <__swsetup_r+0xf4>)
   12e6c:	429c      	cmp	r4, r3
   12e6e:	d1e0      	bne.n	12e32 <__swsetup_r+0x16>
   12e70:	686c      	ldr	r4, [r5, #4]
   12e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   12e76:	b293      	uxth	r3, r2
   12e78:	0719      	lsls	r1, r3, #28
   12e7a:	d4e6      	bmi.n	12e4a <__swsetup_r+0x2e>
   12e7c:	06dd      	lsls	r5, r3, #27
   12e7e:	d53c      	bpl.n	12efa <__swsetup_r+0xde>
   12e80:	0758      	lsls	r0, r3, #29
   12e82:	d426      	bmi.n	12ed2 <__swsetup_r+0xb6>
   12e84:	6920      	ldr	r0, [r4, #16]
   12e86:	f042 0308 	orr.w	r3, r2, #8
   12e8a:	81a3      	strh	r3, [r4, #12]
   12e8c:	b29b      	uxth	r3, r3
   12e8e:	2800      	cmp	r0, #0
   12e90:	d1dd      	bne.n	12e4e <__swsetup_r+0x32>
   12e92:	f403 7220 	and.w	r2, r3, #640	; 0x280
   12e96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   12e9a:	d0d8      	beq.n	12e4e <__swsetup_r+0x32>
   12e9c:	4630      	mov	r0, r6
   12e9e:	4621      	mov	r1, r4
   12ea0:	f000 fa9a 	bl	133d8 <__smakebuf_r>
   12ea4:	89a3      	ldrh	r3, [r4, #12]
   12ea6:	6920      	ldr	r0, [r4, #16]
   12ea8:	f013 0201 	ands.w	r2, r3, #1
   12eac:	d1d2      	bne.n	12e54 <__swsetup_r+0x38>
   12eae:	0799      	lsls	r1, r3, #30
   12eb0:	bf58      	it	pl
   12eb2:	6962      	ldrpl	r2, [r4, #20]
   12eb4:	60a2      	str	r2, [r4, #8]
   12eb6:	2800      	cmp	r0, #0
   12eb8:	d1d2      	bne.n	12e60 <__swsetup_r+0x44>
   12eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12ebe:	061a      	lsls	r2, r3, #24
   12ec0:	d5cf      	bpl.n	12e62 <__swsetup_r+0x46>
   12ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12ec6:	81a3      	strh	r3, [r4, #12]
   12ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ecc:	bd70      	pop	{r4, r5, r6, pc}
   12ece:	68ac      	ldr	r4, [r5, #8]
   12ed0:	e7b6      	b.n	12e40 <__swsetup_r+0x24>
   12ed2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12ed4:	b151      	cbz	r1, 12eec <__swsetup_r+0xd0>
   12ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   12eda:	4299      	cmp	r1, r3
   12edc:	d004      	beq.n	12ee8 <__swsetup_r+0xcc>
   12ede:	4630      	mov	r0, r6
   12ee0:	f7ff fb6a 	bl	125b8 <_free_r>
   12ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   12ee8:	2300      	movs	r3, #0
   12eea:	6363      	str	r3, [r4, #52]	; 0x34
   12eec:	2300      	movs	r3, #0
   12eee:	6920      	ldr	r0, [r4, #16]
   12ef0:	6063      	str	r3, [r4, #4]
   12ef2:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   12ef6:	6020      	str	r0, [r4, #0]
   12ef8:	e7c5      	b.n	12e86 <__swsetup_r+0x6a>
   12efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12efe:	2309      	movs	r3, #9
   12f00:	6033      	str	r3, [r6, #0]
   12f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12f06:	81a2      	strh	r2, [r4, #12]
   12f08:	bd70      	pop	{r4, r5, r6, pc}
   12f0a:	bf00      	nop
   12f0c:	20000548 	.word	0x20000548
   12f10:	000153a8 	.word	0x000153a8
   12f14:	00015388 	.word	0x00015388
   12f18:	00015368 	.word	0x00015368

00012f1c <__sflush_r>:
   12f1c:	898b      	ldrh	r3, [r1, #12]
   12f1e:	071a      	lsls	r2, r3, #28
   12f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f24:	460c      	mov	r4, r1
   12f26:	4680      	mov	r8, r0
   12f28:	d441      	bmi.n	12fae <__sflush_r+0x92>
   12f2a:	684a      	ldr	r2, [r1, #4]
   12f2c:	2a00      	cmp	r2, #0
   12f2e:	dd59      	ble.n	12fe4 <__sflush_r+0xc8>
   12f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   12f32:	2e00      	cmp	r6, #0
   12f34:	d053      	beq.n	12fde <__sflush_r+0xc2>
   12f36:	2200      	movs	r2, #0
   12f38:	f8d8 5000 	ldr.w	r5, [r8]
   12f3c:	6a21      	ldr	r1, [r4, #32]
   12f3e:	f8c8 2000 	str.w	r2, [r8]
   12f42:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   12f46:	d151      	bne.n	12fec <__sflush_r+0xd0>
   12f48:	2301      	movs	r3, #1
   12f4a:	4640      	mov	r0, r8
   12f4c:	47b0      	blx	r6
   12f4e:	1c43      	adds	r3, r0, #1
   12f50:	d05f      	beq.n	13012 <__sflush_r+0xf6>
   12f52:	89a3      	ldrh	r3, [r4, #12]
   12f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   12f56:	6a21      	ldr	r1, [r4, #32]
   12f58:	075f      	lsls	r7, r3, #29
   12f5a:	d505      	bpl.n	12f68 <__sflush_r+0x4c>
   12f5c:	6862      	ldr	r2, [r4, #4]
   12f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12f60:	1a80      	subs	r0, r0, r2
   12f62:	b10b      	cbz	r3, 12f68 <__sflush_r+0x4c>
   12f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12f66:	1ac0      	subs	r0, r0, r3
   12f68:	4602      	mov	r2, r0
   12f6a:	2300      	movs	r3, #0
   12f6c:	4640      	mov	r0, r8
   12f6e:	47b0      	blx	r6
   12f70:	1c46      	adds	r6, r0, #1
   12f72:	d145      	bne.n	13000 <__sflush_r+0xe4>
   12f74:	f8d8 3000 	ldr.w	r3, [r8]
   12f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   12f7c:	2b00      	cmp	r3, #0
   12f7e:	d055      	beq.n	1302c <__sflush_r+0x110>
   12f80:	2b1d      	cmp	r3, #29
   12f82:	d001      	beq.n	12f88 <__sflush_r+0x6c>
   12f84:	2b16      	cmp	r3, #22
   12f86:	d15a      	bne.n	1303e <__sflush_r+0x122>
   12f88:	6923      	ldr	r3, [r4, #16]
   12f8a:	2200      	movs	r2, #0
   12f8c:	e9c4 3200 	strd	r3, r2, [r4]
   12f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12f92:	f8c8 5000 	str.w	r5, [r8]
   12f96:	b311      	cbz	r1, 12fde <__sflush_r+0xc2>
   12f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
   12f9c:	4299      	cmp	r1, r3
   12f9e:	d002      	beq.n	12fa6 <__sflush_r+0x8a>
   12fa0:	4640      	mov	r0, r8
   12fa2:	f7ff fb09 	bl	125b8 <_free_r>
   12fa6:	2000      	movs	r0, #0
   12fa8:	6360      	str	r0, [r4, #52]	; 0x34
   12faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fae:	690e      	ldr	r6, [r1, #16]
   12fb0:	b1ae      	cbz	r6, 12fde <__sflush_r+0xc2>
   12fb2:	680d      	ldr	r5, [r1, #0]
   12fb4:	600e      	str	r6, [r1, #0]
   12fb6:	0799      	lsls	r1, r3, #30
   12fb8:	bf0c      	ite	eq
   12fba:	6963      	ldreq	r3, [r4, #20]
   12fbc:	2300      	movne	r3, #0
   12fbe:	1bad      	subs	r5, r5, r6
   12fc0:	60a3      	str	r3, [r4, #8]
   12fc2:	e00a      	b.n	12fda <__sflush_r+0xbe>
   12fc4:	462b      	mov	r3, r5
   12fc6:	4632      	mov	r2, r6
   12fc8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   12fca:	6a21      	ldr	r1, [r4, #32]
   12fcc:	4640      	mov	r0, r8
   12fce:	47b8      	blx	r7
   12fd0:	2800      	cmp	r0, #0
   12fd2:	eba5 0500 	sub.w	r5, r5, r0
   12fd6:	4406      	add	r6, r0
   12fd8:	dd0a      	ble.n	12ff0 <__sflush_r+0xd4>
   12fda:	2d00      	cmp	r5, #0
   12fdc:	dcf2      	bgt.n	12fc4 <__sflush_r+0xa8>
   12fde:	2000      	movs	r0, #0
   12fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12fe4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
   12fe6:	2a00      	cmp	r2, #0
   12fe8:	dca2      	bgt.n	12f30 <__sflush_r+0x14>
   12fea:	e7f8      	b.n	12fde <__sflush_r+0xc2>
   12fec:	6d60      	ldr	r0, [r4, #84]	; 0x54
   12fee:	e7b3      	b.n	12f58 <__sflush_r+0x3c>
   12ff0:	89a3      	ldrh	r3, [r4, #12]
   12ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12ff6:	81a3      	strh	r3, [r4, #12]
   12ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13000:	6922      	ldr	r2, [r4, #16]
   13002:	89a3      	ldrh	r3, [r4, #12]
   13004:	6022      	str	r2, [r4, #0]
   13006:	2200      	movs	r2, #0
   13008:	6062      	str	r2, [r4, #4]
   1300a:	04da      	lsls	r2, r3, #19
   1300c:	d5c0      	bpl.n	12f90 <__sflush_r+0x74>
   1300e:	6560      	str	r0, [r4, #84]	; 0x54
   13010:	e7be      	b.n	12f90 <__sflush_r+0x74>
   13012:	f8d8 3000 	ldr.w	r3, [r8]
   13016:	2b00      	cmp	r3, #0
   13018:	d09b      	beq.n	12f52 <__sflush_r+0x36>
   1301a:	2b1d      	cmp	r3, #29
   1301c:	d00c      	beq.n	13038 <__sflush_r+0x11c>
   1301e:	2b16      	cmp	r3, #22
   13020:	d00a      	beq.n	13038 <__sflush_r+0x11c>
   13022:	89a3      	ldrh	r3, [r4, #12]
   13024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13028:	81a3      	strh	r3, [r4, #12]
   1302a:	e7d9      	b.n	12fe0 <__sflush_r+0xc4>
   1302c:	6921      	ldr	r1, [r4, #16]
   1302e:	e9c4 1300 	strd	r1, r3, [r4]
   13032:	04d3      	lsls	r3, r2, #19
   13034:	d5ac      	bpl.n	12f90 <__sflush_r+0x74>
   13036:	e7ea      	b.n	1300e <__sflush_r+0xf2>
   13038:	f8c8 5000 	str.w	r5, [r8]
   1303c:	e7cf      	b.n	12fde <__sflush_r+0xc2>
   1303e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13042:	81a2      	strh	r2, [r4, #12]
   13044:	e7cc      	b.n	12fe0 <__sflush_r+0xc4>
   13046:	bf00      	nop

00013048 <_fflush_r>:
   13048:	690b      	ldr	r3, [r1, #16]
   1304a:	b323      	cbz	r3, 13096 <_fflush_r+0x4e>
   1304c:	b510      	push	{r4, lr}
   1304e:	4604      	mov	r4, r0
   13050:	b082      	sub	sp, #8
   13052:	b108      	cbz	r0, 13058 <_fflush_r+0x10>
   13054:	6983      	ldr	r3, [r0, #24]
   13056:	b1bb      	cbz	r3, 13088 <_fflush_r+0x40>
   13058:	4b10      	ldr	r3, [pc, #64]	; (1309c <_fflush_r+0x54>)
   1305a:	4299      	cmp	r1, r3
   1305c:	d012      	beq.n	13084 <_fflush_r+0x3c>
   1305e:	4b10      	ldr	r3, [pc, #64]	; (130a0 <_fflush_r+0x58>)
   13060:	4299      	cmp	r1, r3
   13062:	d016      	beq.n	13092 <_fflush_r+0x4a>
   13064:	4b0f      	ldr	r3, [pc, #60]	; (130a4 <_fflush_r+0x5c>)
   13066:	4299      	cmp	r1, r3
   13068:	bf08      	it	eq
   1306a:	68e1      	ldreq	r1, [r4, #12]
   1306c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   13070:	b12b      	cbz	r3, 1307e <_fflush_r+0x36>
   13072:	4620      	mov	r0, r4
   13074:	b002      	add	sp, #8
   13076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1307a:	f7ff bf4f 	b.w	12f1c <__sflush_r>
   1307e:	2000      	movs	r0, #0
   13080:	b002      	add	sp, #8
   13082:	bd10      	pop	{r4, pc}
   13084:	6861      	ldr	r1, [r4, #4]
   13086:	e7f1      	b.n	1306c <_fflush_r+0x24>
   13088:	9101      	str	r1, [sp, #4]
   1308a:	f000 f907 	bl	1329c <__sinit>
   1308e:	9901      	ldr	r1, [sp, #4]
   13090:	e7e2      	b.n	13058 <_fflush_r+0x10>
   13092:	68a1      	ldr	r1, [r4, #8]
   13094:	e7ea      	b.n	1306c <_fflush_r+0x24>
   13096:	2000      	movs	r0, #0
   13098:	4770      	bx	lr
   1309a:	bf00      	nop
   1309c:	000153a8 	.word	0x000153a8
   130a0:	00015388 	.word	0x00015388
   130a4:	00015368 	.word	0x00015368

000130a8 <fflush>:
   130a8:	b120      	cbz	r0, 130b4 <fflush+0xc>
   130aa:	4b05      	ldr	r3, [pc, #20]	; (130c0 <fflush+0x18>)
   130ac:	4601      	mov	r1, r0
   130ae:	6818      	ldr	r0, [r3, #0]
   130b0:	f7ff bfca 	b.w	13048 <_fflush_r>
   130b4:	4b03      	ldr	r3, [pc, #12]	; (130c4 <fflush+0x1c>)
   130b6:	4904      	ldr	r1, [pc, #16]	; (130c8 <fflush+0x20>)
   130b8:	6818      	ldr	r0, [r3, #0]
   130ba:	f000 b935 	b.w	13328 <_fwalk_reent>
   130be:	bf00      	nop
   130c0:	20000548 	.word	0x20000548
   130c4:	00015364 	.word	0x00015364
   130c8:	00013049 	.word	0x00013049

000130cc <__fp_lock>:
   130cc:	2000      	movs	r0, #0
   130ce:	4770      	bx	lr

000130d0 <_cleanup_r>:
   130d0:	4901      	ldr	r1, [pc, #4]	; (130d8 <_cleanup_r+0x8>)
   130d2:	f000 b929 	b.w	13328 <_fwalk_reent>
   130d6:	bf00      	nop
   130d8:	00013049 	.word	0x00013049

000130dc <__fp_unlock>:
   130dc:	2000      	movs	r0, #0
   130de:	4770      	bx	lr

000130e0 <__sfmoreglue>:
   130e0:	b570      	push	{r4, r5, r6, lr}
   130e2:	1e4a      	subs	r2, r1, #1
   130e4:	2568      	movs	r5, #104	; 0x68
   130e6:	fb05 f502 	mul.w	r5, r5, r2
   130ea:	460e      	mov	r6, r1
   130ec:	f105 0174 	add.w	r1, r5, #116	; 0x74
   130f0:	f7ff fab8 	bl	12664 <_malloc_r>
   130f4:	4604      	mov	r4, r0
   130f6:	b140      	cbz	r0, 1310a <__sfmoreglue+0x2a>
   130f8:	2100      	movs	r1, #0
   130fa:	300c      	adds	r0, #12
   130fc:	6066      	str	r6, [r4, #4]
   130fe:	f105 0268 	add.w	r2, r5, #104	; 0x68
   13102:	6021      	str	r1, [r4, #0]
   13104:	60a0      	str	r0, [r4, #8]
   13106:	f7ff fa07 	bl	12518 <memset>
   1310a:	4620      	mov	r0, r4
   1310c:	bd70      	pop	{r4, r5, r6, pc}
   1310e:	bf00      	nop

00013110 <__sfp>:
   13110:	4b1e      	ldr	r3, [pc, #120]	; (1318c <__sfp+0x7c>)
   13112:	b570      	push	{r4, r5, r6, lr}
   13114:	681d      	ldr	r5, [r3, #0]
   13116:	69ab      	ldr	r3, [r5, #24]
   13118:	4606      	mov	r6, r0
   1311a:	b343      	cbz	r3, 1316e <__sfp+0x5e>
   1311c:	3548      	adds	r5, #72	; 0x48
   1311e:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
   13122:	3b01      	subs	r3, #1
   13124:	d505      	bpl.n	13132 <__sfp+0x22>
   13126:	e01e      	b.n	13166 <__sfp+0x56>
   13128:	3b01      	subs	r3, #1
   1312a:	1c5a      	adds	r2, r3, #1
   1312c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   13130:	d019      	beq.n	13166 <__sfp+0x56>
   13132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13136:	2a00      	cmp	r2, #0
   13138:	d1f6      	bne.n	13128 <__sfp+0x18>
   1313a:	2500      	movs	r5, #0
   1313c:	4b14      	ldr	r3, [pc, #80]	; (13190 <__sfp+0x80>)
   1313e:	6665      	str	r5, [r4, #100]	; 0x64
   13140:	e9c4 5500 	strd	r5, r5, [r4]
   13144:	60a5      	str	r5, [r4, #8]
   13146:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1314a:	61a5      	str	r5, [r4, #24]
   1314c:	4629      	mov	r1, r5
   1314e:	60e3      	str	r3, [r4, #12]
   13150:	2208      	movs	r2, #8
   13152:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   13156:	f7ff f9df 	bl	12518 <memset>
   1315a:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   1315e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   13162:	4620      	mov	r0, r4
   13164:	bd70      	pop	{r4, r5, r6, pc}
   13166:	682c      	ldr	r4, [r5, #0]
   13168:	b12c      	cbz	r4, 13176 <__sfp+0x66>
   1316a:	4625      	mov	r5, r4
   1316c:	e7d7      	b.n	1311e <__sfp+0xe>
   1316e:	4628      	mov	r0, r5
   13170:	f000 f810 	bl	13194 <__sinit.part.0>
   13174:	e7d2      	b.n	1311c <__sfp+0xc>
   13176:	2104      	movs	r1, #4
   13178:	4630      	mov	r0, r6
   1317a:	f7ff ffb1 	bl	130e0 <__sfmoreglue>
   1317e:	4604      	mov	r4, r0
   13180:	6028      	str	r0, [r5, #0]
   13182:	2800      	cmp	r0, #0
   13184:	d1f1      	bne.n	1316a <__sfp+0x5a>
   13186:	230c      	movs	r3, #12
   13188:	6033      	str	r3, [r6, #0]
   1318a:	e7ea      	b.n	13162 <__sfp+0x52>
   1318c:	00015364 	.word	0x00015364
   13190:	ffff0001 	.word	0xffff0001

00013194 <__sinit.part.0>:
   13194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13198:	4b33      	ldr	r3, [pc, #204]	; (13268 <__sinit.part.0+0xd4>)
   1319a:	4934      	ldr	r1, [pc, #208]	; (1326c <__sinit.part.0+0xd8>)
   1319c:	681a      	ldr	r2, [r3, #0]
   1319e:	6281      	str	r1, [r0, #40]	; 0x28
   131a0:	4290      	cmp	r0, r2
   131a2:	f04f 0300 	mov.w	r3, #0
   131a6:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   131aa:	6503      	str	r3, [r0, #80]	; 0x50
   131ac:	bf04      	itt	eq
   131ae:	2301      	moveq	r3, #1
   131b0:	6183      	streq	r3, [r0, #24]
   131b2:	4605      	mov	r5, r0
   131b4:	f7ff ffac 	bl	13110 <__sfp>
   131b8:	6068      	str	r0, [r5, #4]
   131ba:	4628      	mov	r0, r5
   131bc:	f7ff ffa8 	bl	13110 <__sfp>
   131c0:	60a8      	str	r0, [r5, #8]
   131c2:	4628      	mov	r0, r5
   131c4:	f7ff ffa4 	bl	13110 <__sfp>
   131c8:	686e      	ldr	r6, [r5, #4]
   131ca:	60e8      	str	r0, [r5, #12]
   131cc:	2400      	movs	r4, #0
   131ce:	2304      	movs	r3, #4
   131d0:	60f3      	str	r3, [r6, #12]
   131d2:	6674      	str	r4, [r6, #100]	; 0x64
   131d4:	e9c6 4400 	strd	r4, r4, [r6]
   131d8:	60b4      	str	r4, [r6, #8]
   131da:	e9c6 4404 	strd	r4, r4, [r6, #16]
   131de:	61b4      	str	r4, [r6, #24]
   131e0:	4621      	mov	r1, r4
   131e2:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   131e6:	2208      	movs	r2, #8
   131e8:	f7ff f996 	bl	12518 <memset>
   131ec:	f8df b088 	ldr.w	fp, [pc, #136]	; 13278 <__sinit.part.0+0xe4>
   131f0:	68af      	ldr	r7, [r5, #8]
   131f2:	f8df a088 	ldr.w	sl, [pc, #136]	; 1327c <__sinit.part.0+0xe8>
   131f6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 13280 <__sinit.part.0+0xec>
   131fa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 13284 <__sinit.part.0+0xf0>
   131fe:	4b1c      	ldr	r3, [pc, #112]	; (13270 <__sinit.part.0+0xdc>)
   13200:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
   13204:	e9c6 6b08 	strd	r6, fp, [r6, #32]
   13208:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
   1320c:	4621      	mov	r1, r4
   1320e:	60fb      	str	r3, [r7, #12]
   13210:	2208      	movs	r2, #8
   13212:	667c      	str	r4, [r7, #100]	; 0x64
   13214:	e9c7 4400 	strd	r4, r4, [r7]
   13218:	60bc      	str	r4, [r7, #8]
   1321a:	e9c7 4404 	strd	r4, r4, [r7, #16]
   1321e:	61bc      	str	r4, [r7, #24]
   13220:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   13224:	f7ff f978 	bl	12518 <memset>
   13228:	68ee      	ldr	r6, [r5, #12]
   1322a:	4b12      	ldr	r3, [pc, #72]	; (13274 <__sinit.part.0+0xe0>)
   1322c:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
   13230:	e9c7 7b08 	strd	r7, fp, [r7, #32]
   13234:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
   13238:	4621      	mov	r1, r4
   1323a:	60f3      	str	r3, [r6, #12]
   1323c:	6674      	str	r4, [r6, #100]	; 0x64
   1323e:	e9c6 4400 	strd	r4, r4, [r6]
   13242:	60b4      	str	r4, [r6, #8]
   13244:	e9c6 4404 	strd	r4, r4, [r6, #16]
   13248:	61b4      	str	r4, [r6, #24]
   1324a:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   1324e:	2208      	movs	r2, #8
   13250:	f7ff f962 	bl	12518 <memset>
   13254:	2301      	movs	r3, #1
   13256:	e9c6 6b08 	strd	r6, fp, [r6, #32]
   1325a:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
   1325e:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
   13262:	61ab      	str	r3, [r5, #24]
   13264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13268:	00015364 	.word	0x00015364
   1326c:	000130d1 	.word	0x000130d1
   13270:	00010009 	.word	0x00010009
   13274:	00020012 	.word	0x00020012
   13278:	00013fc5 	.word	0x00013fc5
   1327c:	00013fed 	.word	0x00013fed
   13280:	0001402d 	.word	0x0001402d
   13284:	0001404d 	.word	0x0001404d

00013288 <_cleanup>:
   13288:	4b02      	ldr	r3, [pc, #8]	; (13294 <_cleanup+0xc>)
   1328a:	4903      	ldr	r1, [pc, #12]	; (13298 <_cleanup+0x10>)
   1328c:	6818      	ldr	r0, [r3, #0]
   1328e:	f000 b84b 	b.w	13328 <_fwalk_reent>
   13292:	bf00      	nop
   13294:	00015364 	.word	0x00015364
   13298:	00013049 	.word	0x00013049

0001329c <__sinit>:
   1329c:	6983      	ldr	r3, [r0, #24]
   1329e:	b903      	cbnz	r3, 132a2 <__sinit+0x6>
   132a0:	e778      	b.n	13194 <__sinit.part.0>
   132a2:	4770      	bx	lr

000132a4 <__sfp_lock_acquire>:
   132a4:	4770      	bx	lr
   132a6:	bf00      	nop

000132a8 <__sfp_lock_release>:
   132a8:	4770      	bx	lr
   132aa:	bf00      	nop

000132ac <__sinit_lock_acquire>:
   132ac:	4770      	bx	lr
   132ae:	bf00      	nop

000132b0 <__sinit_lock_release>:
   132b0:	4770      	bx	lr
   132b2:	bf00      	nop

000132b4 <__fp_lock_all>:
   132b4:	4b02      	ldr	r3, [pc, #8]	; (132c0 <__fp_lock_all+0xc>)
   132b6:	4903      	ldr	r1, [pc, #12]	; (132c4 <__fp_lock_all+0x10>)
   132b8:	6818      	ldr	r0, [r3, #0]
   132ba:	f000 b80f 	b.w	132dc <_fwalk>
   132be:	bf00      	nop
   132c0:	20000548 	.word	0x20000548
   132c4:	000130cd 	.word	0x000130cd

000132c8 <__fp_unlock_all>:
   132c8:	4b02      	ldr	r3, [pc, #8]	; (132d4 <__fp_unlock_all+0xc>)
   132ca:	4903      	ldr	r1, [pc, #12]	; (132d8 <__fp_unlock_all+0x10>)
   132cc:	6818      	ldr	r0, [r3, #0]
   132ce:	f000 b805 	b.w	132dc <_fwalk>
   132d2:	bf00      	nop
   132d4:	20000548 	.word	0x20000548
   132d8:	000130dd 	.word	0x000130dd

000132dc <_fwalk>:
   132dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132e0:	f110 0748 	adds.w	r7, r0, #72	; 0x48
   132e4:	d01b      	beq.n	1331e <_fwalk+0x42>
   132e6:	4688      	mov	r8, r1
   132e8:	2600      	movs	r6, #0
   132ea:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   132ee:	3d01      	subs	r5, #1
   132f0:	d40f      	bmi.n	13312 <_fwalk+0x36>
   132f2:	89a3      	ldrh	r3, [r4, #12]
   132f4:	2b01      	cmp	r3, #1
   132f6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   132fa:	d906      	bls.n	1330a <_fwalk+0x2e>
   132fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   13300:	3301      	adds	r3, #1
   13302:	4620      	mov	r0, r4
   13304:	d001      	beq.n	1330a <_fwalk+0x2e>
   13306:	47c0      	blx	r8
   13308:	4306      	orrs	r6, r0
   1330a:	1c6b      	adds	r3, r5, #1
   1330c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   13310:	d1ef      	bne.n	132f2 <_fwalk+0x16>
   13312:	683f      	ldr	r7, [r7, #0]
   13314:	2f00      	cmp	r7, #0
   13316:	d1e8      	bne.n	132ea <_fwalk+0xe>
   13318:	4630      	mov	r0, r6
   1331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1331e:	463e      	mov	r6, r7
   13320:	4630      	mov	r0, r6
   13322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13326:	bf00      	nop

00013328 <_fwalk_reent>:
   13328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1332c:	f110 0748 	adds.w	r7, r0, #72	; 0x48
   13330:	d01f      	beq.n	13372 <_fwalk_reent+0x4a>
   13332:	4688      	mov	r8, r1
   13334:	4606      	mov	r6, r0
   13336:	f04f 0900 	mov.w	r9, #0
   1333a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   1333e:	3d01      	subs	r5, #1
   13340:	d411      	bmi.n	13366 <_fwalk_reent+0x3e>
   13342:	89a3      	ldrh	r3, [r4, #12]
   13344:	2b01      	cmp	r3, #1
   13346:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1334a:	d908      	bls.n	1335e <_fwalk_reent+0x36>
   1334c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   13350:	3301      	adds	r3, #1
   13352:	4621      	mov	r1, r4
   13354:	4630      	mov	r0, r6
   13356:	d002      	beq.n	1335e <_fwalk_reent+0x36>
   13358:	47c0      	blx	r8
   1335a:	ea49 0900 	orr.w	r9, r9, r0
   1335e:	1c6b      	adds	r3, r5, #1
   13360:	f104 0468 	add.w	r4, r4, #104	; 0x68
   13364:	d1ed      	bne.n	13342 <_fwalk_reent+0x1a>
   13366:	683f      	ldr	r7, [r7, #0]
   13368:	2f00      	cmp	r7, #0
   1336a:	d1e6      	bne.n	1333a <_fwalk_reent+0x12>
   1336c:	4648      	mov	r0, r9
   1336e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13372:	46b9      	mov	r9, r7
   13374:	4648      	mov	r0, r9
   13376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1337a:	bf00      	nop

0001337c <__swhatbuf_r>:
   1337c:	b570      	push	{r4, r5, r6, lr}
   1337e:	460c      	mov	r4, r1
   13380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   13384:	2900      	cmp	r1, #0
   13386:	b096      	sub	sp, #88	; 0x58
   13388:	4616      	mov	r6, r2
   1338a:	461d      	mov	r5, r3
   1338c:	db13      	blt.n	133b6 <__swhatbuf_r+0x3a>
   1338e:	466a      	mov	r2, sp
   13390:	f000 fe88 	bl	140a4 <_fstat_r>
   13394:	2800      	cmp	r0, #0
   13396:	db0e      	blt.n	133b6 <__swhatbuf_r+0x3a>
   13398:	9a01      	ldr	r2, [sp, #4]
   1339a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1339e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   133a2:	fab2 f282 	clz	r2, r2
   133a6:	0952      	lsrs	r2, r2, #5
   133a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   133ac:	2000      	movs	r0, #0
   133ae:	602a      	str	r2, [r5, #0]
   133b0:	6033      	str	r3, [r6, #0]
   133b2:	b016      	add	sp, #88	; 0x58
   133b4:	bd70      	pop	{r4, r5, r6, pc}
   133b6:	89a3      	ldrh	r3, [r4, #12]
   133b8:	2200      	movs	r2, #0
   133ba:	061b      	lsls	r3, r3, #24
   133bc:	602a      	str	r2, [r5, #0]
   133be:	d504      	bpl.n	133ca <__swhatbuf_r+0x4e>
   133c0:	2340      	movs	r3, #64	; 0x40
   133c2:	2000      	movs	r0, #0
   133c4:	6033      	str	r3, [r6, #0]
   133c6:	b016      	add	sp, #88	; 0x58
   133c8:	bd70      	pop	{r4, r5, r6, pc}
   133ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   133ce:	2000      	movs	r0, #0
   133d0:	6033      	str	r3, [r6, #0]
   133d2:	b016      	add	sp, #88	; 0x58
   133d4:	bd70      	pop	{r4, r5, r6, pc}
   133d6:	bf00      	nop

000133d8 <__smakebuf_r>:
   133d8:	898a      	ldrh	r2, [r1, #12]
   133da:	0792      	lsls	r2, r2, #30
   133dc:	460b      	mov	r3, r1
   133de:	d506      	bpl.n	133ee <__smakebuf_r+0x16>
   133e0:	f101 0247 	add.w	r2, r1, #71	; 0x47
   133e4:	2101      	movs	r1, #1
   133e6:	601a      	str	r2, [r3, #0]
   133e8:	e9c3 2104 	strd	r2, r1, [r3, #16]
   133ec:	4770      	bx	lr
   133ee:	b570      	push	{r4, r5, r6, lr}
   133f0:	b082      	sub	sp, #8
   133f2:	ab01      	add	r3, sp, #4
   133f4:	466a      	mov	r2, sp
   133f6:	460c      	mov	r4, r1
   133f8:	4606      	mov	r6, r0
   133fa:	f7ff ffbf 	bl	1337c <__swhatbuf_r>
   133fe:	9900      	ldr	r1, [sp, #0]
   13400:	4605      	mov	r5, r0
   13402:	4630      	mov	r0, r6
   13404:	f7ff f92e 	bl	12664 <_malloc_r>
   13408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1340c:	b170      	cbz	r0, 1342c <__smakebuf_r+0x54>
   1340e:	4916      	ldr	r1, [pc, #88]	; (13468 <__smakebuf_r+0x90>)
   13410:	62b1      	str	r1, [r6, #40]	; 0x28
   13412:	9a01      	ldr	r2, [sp, #4]
   13414:	9900      	ldr	r1, [sp, #0]
   13416:	6020      	str	r0, [r4, #0]
   13418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1341c:	81a3      	strh	r3, [r4, #12]
   1341e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   13422:	b98a      	cbnz	r2, 13448 <__smakebuf_r+0x70>
   13424:	432b      	orrs	r3, r5
   13426:	81a3      	strh	r3, [r4, #12]
   13428:	b002      	add	sp, #8
   1342a:	bd70      	pop	{r4, r5, r6, pc}
   1342c:	059a      	lsls	r2, r3, #22
   1342e:	d4fb      	bmi.n	13428 <__smakebuf_r+0x50>
   13430:	f023 0303 	bic.w	r3, r3, #3
   13434:	f104 0247 	add.w	r2, r4, #71	; 0x47
   13438:	f043 0302 	orr.w	r3, r3, #2
   1343c:	2101      	movs	r1, #1
   1343e:	81a3      	strh	r3, [r4, #12]
   13440:	6022      	str	r2, [r4, #0]
   13442:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13446:	e7ef      	b.n	13428 <__smakebuf_r+0x50>
   13448:	4630      	mov	r0, r6
   1344a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1344e:	f000 ffc1 	bl	143d4 <_isatty_r>
   13452:	b910      	cbnz	r0, 1345a <__smakebuf_r+0x82>
   13454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13458:	e7e4      	b.n	13424 <__smakebuf_r+0x4c>
   1345a:	89a3      	ldrh	r3, [r4, #12]
   1345c:	f023 0303 	bic.w	r3, r3, #3
   13460:	f043 0301 	orr.w	r3, r3, #1
   13464:	b21b      	sxth	r3, r3
   13466:	e7dd      	b.n	13424 <__smakebuf_r+0x4c>
   13468:	000130d1 	.word	0x000130d1

0001346c <__malloc_lock>:
   1346c:	4770      	bx	lr
   1346e:	bf00      	nop

00013470 <__malloc_unlock>:
   13470:	4770      	bx	lr
   13472:	bf00      	nop

00013474 <__ssputs_r>:
   13474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13478:	688e      	ldr	r6, [r1, #8]
   1347a:	461d      	mov	r5, r3
   1347c:	42ae      	cmp	r6, r5
   1347e:	460c      	mov	r4, r1
   13480:	680b      	ldr	r3, [r1, #0]
   13482:	4617      	mov	r7, r2
   13484:	d836      	bhi.n	134f4 <__ssputs_r+0x80>
   13486:	4680      	mov	r8, r0
   13488:	8988      	ldrh	r0, [r1, #12]
   1348a:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1348e:	d10e      	bne.n	134ae <__ssputs_r+0x3a>
   13490:	4635      	mov	r5, r6
   13492:	4618      	mov	r0, r3
   13494:	462a      	mov	r2, r5
   13496:	4639      	mov	r1, r7
   13498:	f001 f81a 	bl	144d0 <memmove>
   1349c:	68a2      	ldr	r2, [r4, #8]
   1349e:	6823      	ldr	r3, [r4, #0]
   134a0:	1b96      	subs	r6, r2, r6
   134a2:	442b      	add	r3, r5
   134a4:	60a6      	str	r6, [r4, #8]
   134a6:	6023      	str	r3, [r4, #0]
   134a8:	2000      	movs	r0, #0
   134aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   134ae:	e9d1 1604 	ldrd	r1, r6, [r1, #16]
   134b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   134b6:	eba3 0901 	sub.w	r9, r3, r1
   134ba:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   134be:	1c6b      	adds	r3, r5, #1
   134c0:	1076      	asrs	r6, r6, #1
   134c2:	444b      	add	r3, r9
   134c4:	42b3      	cmp	r3, r6
   134c6:	4632      	mov	r2, r6
   134c8:	bf84      	itt	hi
   134ca:	461e      	movhi	r6, r3
   134cc:	4632      	movhi	r2, r6
   134ce:	0543      	lsls	r3, r0, #21
   134d0:	d512      	bpl.n	134f8 <__ssputs_r+0x84>
   134d2:	4611      	mov	r1, r2
   134d4:	4640      	mov	r0, r8
   134d6:	f7ff f8c5 	bl	12664 <_malloc_r>
   134da:	4682      	mov	sl, r0
   134dc:	b300      	cbz	r0, 13520 <__ssputs_r+0xac>
   134de:	464a      	mov	r2, r9
   134e0:	6921      	ldr	r1, [r4, #16]
   134e2:	f7fe ff7f 	bl	123e4 <memcpy>
   134e6:	89a3      	ldrh	r3, [r4, #12]
   134e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   134ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   134f0:	81a3      	strh	r3, [r4, #12]
   134f2:	e006      	b.n	13502 <__ssputs_r+0x8e>
   134f4:	462e      	mov	r6, r5
   134f6:	e7cc      	b.n	13492 <__ssputs_r+0x1e>
   134f8:	4640      	mov	r0, r8
   134fa:	f001 f851 	bl	145a0 <_realloc_r>
   134fe:	4682      	mov	sl, r0
   13500:	b150      	cbz	r0, 13518 <__ssputs_r+0xa4>
   13502:	eba6 0209 	sub.w	r2, r6, r9
   13506:	eb0a 0309 	add.w	r3, sl, r9
   1350a:	6166      	str	r6, [r4, #20]
   1350c:	f8c4 a010 	str.w	sl, [r4, #16]
   13510:	6023      	str	r3, [r4, #0]
   13512:	60a2      	str	r2, [r4, #8]
   13514:	462e      	mov	r6, r5
   13516:	e7bc      	b.n	13492 <__ssputs_r+0x1e>
   13518:	6921      	ldr	r1, [r4, #16]
   1351a:	4640      	mov	r0, r8
   1351c:	f7ff f84c 	bl	125b8 <_free_r>
   13520:	230c      	movs	r3, #12
   13522:	f8c8 3000 	str.w	r3, [r8]
   13526:	89a3      	ldrh	r3, [r4, #12]
   13528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1352c:	81a3      	strh	r3, [r4, #12]
   1352e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13532:	e7ba      	b.n	134aa <__ssputs_r+0x36>

00013534 <__ssprint_r>:
   13534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13538:	6893      	ldr	r3, [r2, #8]
   1353a:	b083      	sub	sp, #12
   1353c:	4690      	mov	r8, r2
   1353e:	2b00      	cmp	r3, #0
   13540:	d06d      	beq.n	1361e <__ssprint_r+0xea>
   13542:	6817      	ldr	r7, [r2, #0]
   13544:	688d      	ldr	r5, [r1, #8]
   13546:	4682      	mov	sl, r0
   13548:	460c      	mov	r4, r1
   1354a:	6808      	ldr	r0, [r1, #0]
   1354c:	3708      	adds	r7, #8
   1354e:	e043      	b.n	135d8 <__ssprint_r+0xa4>
   13550:	89a3      	ldrh	r3, [r4, #12]
   13552:	f413 6f90 	tst.w	r3, #1152	; 0x480
   13556:	d02e      	beq.n	135b6 <__ssprint_r+0x82>
   13558:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   1355c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   13560:	eba0 0b01 	sub.w	fp, r0, r1
   13564:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   13568:	eb0b 0006 	add.w	r0, fp, r6
   1356c:	106d      	asrs	r5, r5, #1
   1356e:	3001      	adds	r0, #1
   13570:	42a8      	cmp	r0, r5
   13572:	462a      	mov	r2, r5
   13574:	bf84      	itt	hi
   13576:	4605      	movhi	r5, r0
   13578:	462a      	movhi	r2, r5
   1357a:	055b      	lsls	r3, r3, #21
   1357c:	d536      	bpl.n	135ec <__ssprint_r+0xb8>
   1357e:	4611      	mov	r1, r2
   13580:	4650      	mov	r0, sl
   13582:	f7ff f86f 	bl	12664 <_malloc_r>
   13586:	2800      	cmp	r0, #0
   13588:	d03a      	beq.n	13600 <__ssprint_r+0xcc>
   1358a:	465a      	mov	r2, fp
   1358c:	6921      	ldr	r1, [r4, #16]
   1358e:	9001      	str	r0, [sp, #4]
   13590:	f7fe ff28 	bl	123e4 <memcpy>
   13594:	89a2      	ldrh	r2, [r4, #12]
   13596:	9b01      	ldr	r3, [sp, #4]
   13598:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1359c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   135a0:	81a2      	strh	r2, [r4, #12]
   135a2:	eba5 020b 	sub.w	r2, r5, fp
   135a6:	eb03 000b 	add.w	r0, r3, fp
   135aa:	6165      	str	r5, [r4, #20]
   135ac:	6123      	str	r3, [r4, #16]
   135ae:	6020      	str	r0, [r4, #0]
   135b0:	60a2      	str	r2, [r4, #8]
   135b2:	4635      	mov	r5, r6
   135b4:	46b3      	mov	fp, r6
   135b6:	465a      	mov	r2, fp
   135b8:	4649      	mov	r1, r9
   135ba:	f000 ff89 	bl	144d0 <memmove>
   135be:	f8d8 3008 	ldr.w	r3, [r8, #8]
   135c2:	68a2      	ldr	r2, [r4, #8]
   135c4:	6820      	ldr	r0, [r4, #0]
   135c6:	1b55      	subs	r5, r2, r5
   135c8:	4458      	add	r0, fp
   135ca:	1b9e      	subs	r6, r3, r6
   135cc:	60a5      	str	r5, [r4, #8]
   135ce:	6020      	str	r0, [r4, #0]
   135d0:	f8c8 6008 	str.w	r6, [r8, #8]
   135d4:	b31e      	cbz	r6, 1361e <__ssprint_r+0xea>
   135d6:	3708      	adds	r7, #8
   135d8:	e957 9602 	ldrd	r9, r6, [r7, #-8]
   135dc:	46ab      	mov	fp, r5
   135de:	2e00      	cmp	r6, #0
   135e0:	d0f9      	beq.n	135d6 <__ssprint_r+0xa2>
   135e2:	42ae      	cmp	r6, r5
   135e4:	d2b4      	bcs.n	13550 <__ssprint_r+0x1c>
   135e6:	4635      	mov	r5, r6
   135e8:	46b3      	mov	fp, r6
   135ea:	e7e4      	b.n	135b6 <__ssprint_r+0x82>
   135ec:	4650      	mov	r0, sl
   135ee:	f000 ffd7 	bl	145a0 <_realloc_r>
   135f2:	4603      	mov	r3, r0
   135f4:	2800      	cmp	r0, #0
   135f6:	d1d4      	bne.n	135a2 <__ssprint_r+0x6e>
   135f8:	6921      	ldr	r1, [r4, #16]
   135fa:	4650      	mov	r0, sl
   135fc:	f7fe ffdc 	bl	125b8 <_free_r>
   13600:	230c      	movs	r3, #12
   13602:	f8ca 3000 	str.w	r3, [sl]
   13606:	89a3      	ldrh	r3, [r4, #12]
   13608:	2200      	movs	r2, #0
   1360a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1360e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13612:	81a3      	strh	r3, [r4, #12]
   13614:	e9c8 2201 	strd	r2, r2, [r8, #4]
   13618:	b003      	add	sp, #12
   1361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1361e:	2000      	movs	r0, #0
   13620:	f8c8 0004 	str.w	r0, [r8, #4]
   13624:	b003      	add	sp, #12
   13626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1362a:	bf00      	nop

0001362c <_svfiprintf_r>:
   1362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13630:	4690      	mov	r8, r2
   13632:	898a      	ldrh	r2, [r1, #12]
   13634:	b09f      	sub	sp, #124	; 0x7c
   13636:	0614      	lsls	r4, r2, #24
   13638:	468b      	mov	fp, r1
   1363a:	9002      	str	r0, [sp, #8]
   1363c:	d503      	bpl.n	13646 <_svfiprintf_r+0x1a>
   1363e:	690a      	ldr	r2, [r1, #16]
   13640:	2a00      	cmp	r2, #0
   13642:	f000 810b 	beq.w	1385c <_svfiprintf_r+0x230>
   13646:	9305      	str	r3, [sp, #20]
   13648:	2330      	movs	r3, #48	; 0x30
   1364a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1364e:	f898 3000 	ldrb.w	r3, [r8]
   13652:	4e8e      	ldr	r6, [pc, #568]	; (1388c <_svfiprintf_r+0x260>)
   13654:	2100      	movs	r1, #0
   13656:	2220      	movs	r2, #32
   13658:	910b      	str	r1, [sp, #44]	; 0x2c
   1365a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   1365e:	2701      	movs	r7, #1
   13660:	2b00      	cmp	r3, #0
   13662:	f000 8084 	beq.w	1376e <_svfiprintf_r+0x142>
   13666:	2b25      	cmp	r3, #37	; 0x25
   13668:	f000 80f6 	beq.w	13858 <_svfiprintf_r+0x22c>
   1366c:	4645      	mov	r5, r8
   1366e:	e003      	b.n	13678 <_svfiprintf_r+0x4c>
   13670:	2b25      	cmp	r3, #37	; 0x25
   13672:	f000 8086 	beq.w	13782 <_svfiprintf_r+0x156>
   13676:	4625      	mov	r5, r4
   13678:	786b      	ldrb	r3, [r5, #1]
   1367a:	1c6c      	adds	r4, r5, #1
   1367c:	2b00      	cmp	r3, #0
   1367e:	d1f7      	bne.n	13670 <_svfiprintf_r+0x44>
   13680:	ebb4 0a08 	subs.w	sl, r4, r8
   13684:	d073      	beq.n	1376e <_svfiprintf_r+0x142>
   13686:	4642      	mov	r2, r8
   13688:	4653      	mov	r3, sl
   1368a:	4659      	mov	r1, fp
   1368c:	9802      	ldr	r0, [sp, #8]
   1368e:	f7ff fef1 	bl	13474 <__ssputs_r>
   13692:	3001      	adds	r0, #1
   13694:	d06b      	beq.n	1376e <_svfiprintf_r+0x142>
   13696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13698:	786a      	ldrb	r2, [r5, #1]
   1369a:	4453      	add	r3, sl
   1369c:	930b      	str	r3, [sp, #44]	; 0x2c
   1369e:	2a00      	cmp	r2, #0
   136a0:	d065      	beq.n	1376e <_svfiprintf_r+0x142>
   136a2:	2300      	movs	r3, #0
   136a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   136a8:	3401      	adds	r4, #1
   136aa:	9306      	str	r3, [sp, #24]
   136ac:	e9cd 3308 	strd	r3, r3, [sp, #32]
   136b0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
   136b4:	931c      	str	r3, [sp, #112]	; 0x70
   136b6:	9207      	str	r2, [sp, #28]
   136b8:	e005      	b.n	136c6 <_svfiprintf_r+0x9a>
   136ba:	9a06      	ldr	r2, [sp, #24]
   136bc:	fa07 f303 	lsl.w	r3, r7, r3
   136c0:	4313      	orrs	r3, r2
   136c2:	462c      	mov	r4, r5
   136c4:	9306      	str	r3, [sp, #24]
   136c6:	4625      	mov	r5, r4
   136c8:	2205      	movs	r2, #5
   136ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   136ce:	4630      	mov	r0, r6
   136d0:	f000 feae 	bl	14430 <memchr>
   136d4:	46aa      	mov	sl, r5
   136d6:	1b83      	subs	r3, r0, r6
   136d8:	2800      	cmp	r0, #0
   136da:	d1ee      	bne.n	136ba <_svfiprintf_r+0x8e>
   136dc:	9b06      	ldr	r3, [sp, #24]
   136de:	06d9      	lsls	r1, r3, #27
   136e0:	bf44      	itt	mi
   136e2:	2220      	movmi	r2, #32
   136e4:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   136e8:	7821      	ldrb	r1, [r4, #0]
   136ea:	071a      	lsls	r2, r3, #28
   136ec:	bf44      	itt	mi
   136ee:	222b      	movmi	r2, #43	; 0x2b
   136f0:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   136f4:	292a      	cmp	r1, #42	; 0x2a
   136f6:	d148      	bne.n	1378a <_svfiprintf_r+0x15e>
   136f8:	9a05      	ldr	r2, [sp, #20]
   136fa:	6811      	ldr	r1, [r2, #0]
   136fc:	3204      	adds	r2, #4
   136fe:	2900      	cmp	r1, #0
   13700:	9205      	str	r2, [sp, #20]
   13702:	db7e      	blt.n	13802 <_svfiprintf_r+0x1d6>
   13704:	9109      	str	r1, [sp, #36]	; 0x24
   13706:	7861      	ldrb	r1, [r4, #1]
   13708:	1ca5      	adds	r5, r4, #2
   1370a:	292e      	cmp	r1, #46	; 0x2e
   1370c:	d056      	beq.n	137bc <_svfiprintf_r+0x190>
   1370e:	4c60      	ldr	r4, [pc, #384]	; (13890 <_svfiprintf_r+0x264>)
   13710:	2203      	movs	r2, #3
   13712:	4620      	mov	r0, r4
   13714:	f000 fe8c 	bl	14430 <memchr>
   13718:	2800      	cmp	r0, #0
   1371a:	d068      	beq.n	137ee <_svfiprintf_r+0x1c2>
   1371c:	1b00      	subs	r0, r0, r4
   1371e:	9b06      	ldr	r3, [sp, #24]
   13720:	2440      	movs	r4, #64	; 0x40
   13722:	fa04 f000 	lsl.w	r0, r4, r0
   13726:	4303      	orrs	r3, r0
   13728:	9306      	str	r3, [sp, #24]
   1372a:	f105 0801 	add.w	r8, r5, #1
   1372e:	7829      	ldrb	r1, [r5, #0]
   13730:	4858      	ldr	r0, [pc, #352]	; (13894 <_svfiprintf_r+0x268>)
   13732:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   13736:	2206      	movs	r2, #6
   13738:	f000 fe7a 	bl	14430 <memchr>
   1373c:	2800      	cmp	r0, #0
   1373e:	d066      	beq.n	1380e <_svfiprintf_r+0x1e2>
   13740:	4b55      	ldr	r3, [pc, #340]	; (13898 <_svfiprintf_r+0x26c>)
   13742:	2b00      	cmp	r3, #0
   13744:	d056      	beq.n	137f4 <_svfiprintf_r+0x1c8>
   13746:	ab05      	add	r3, sp, #20
   13748:	9300      	str	r3, [sp, #0]
   1374a:	465a      	mov	r2, fp
   1374c:	4b53      	ldr	r3, [pc, #332]	; (1389c <_svfiprintf_r+0x270>)
   1374e:	9802      	ldr	r0, [sp, #8]
   13750:	a906      	add	r1, sp, #24
   13752:	f3af 8000 	nop.w
   13756:	4681      	mov	r9, r0
   13758:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1375c:	d007      	beq.n	1376e <_svfiprintf_r+0x142>
   1375e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13760:	444b      	add	r3, r9
   13762:	930b      	str	r3, [sp, #44]	; 0x2c
   13764:	f898 3000 	ldrb.w	r3, [r8]
   13768:	2b00      	cmp	r3, #0
   1376a:	f47f af7c 	bne.w	13666 <_svfiprintf_r+0x3a>
   1376e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   13772:	065b      	lsls	r3, r3, #25
   13774:	bf54      	ite	pl
   13776:	980b      	ldrpl	r0, [sp, #44]	; 0x2c
   13778:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
   1377c:	b01f      	add	sp, #124	; 0x7c
   1377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13782:	ebb4 0a08 	subs.w	sl, r4, r8
   13786:	d08c      	beq.n	136a2 <_svfiprintf_r+0x76>
   13788:	e77d      	b.n	13686 <_svfiprintf_r+0x5a>
   1378a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1378e:	2a09      	cmp	r2, #9
   13790:	bf88      	it	hi
   13792:	46a2      	movhi	sl, r4
   13794:	d8b9      	bhi.n	1370a <_svfiprintf_r+0xde>
   13796:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13798:	e001      	b.n	1379e <_svfiprintf_r+0x172>
   1379a:	462c      	mov	r4, r5
   1379c:	3501      	adds	r5, #1
   1379e:	7829      	ldrb	r1, [r5, #0]
   137a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   137a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   137a8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   137ac:	2a09      	cmp	r2, #9
   137ae:	46aa      	mov	sl, r5
   137b0:	d9f3      	bls.n	1379a <_svfiprintf_r+0x16e>
   137b2:	292e      	cmp	r1, #46	; 0x2e
   137b4:	f104 0502 	add.w	r5, r4, #2
   137b8:	9309      	str	r3, [sp, #36]	; 0x24
   137ba:	d1a8      	bne.n	1370e <_svfiprintf_r+0xe2>
   137bc:	f89a 1001 	ldrb.w	r1, [sl, #1]
   137c0:	292a      	cmp	r1, #42	; 0x2a
   137c2:	d12e      	bne.n	13822 <_svfiprintf_r+0x1f6>
   137c4:	9b05      	ldr	r3, [sp, #20]
   137c6:	f89a 1002 	ldrb.w	r1, [sl, #2]
   137ca:	681a      	ldr	r2, [r3, #0]
   137cc:	9207      	str	r2, [sp, #28]
   137ce:	3304      	adds	r3, #4
   137d0:	2a00      	cmp	r2, #0
   137d2:	9305      	str	r3, [sp, #20]
   137d4:	f10a 0503 	add.w	r5, sl, #3
   137d8:	f10a 0302 	add.w	r3, sl, #2
   137dc:	db37      	blt.n	1384e <_svfiprintf_r+0x222>
   137de:	4c2c      	ldr	r4, [pc, #176]	; (13890 <_svfiprintf_r+0x264>)
   137e0:	2203      	movs	r2, #3
   137e2:	4620      	mov	r0, r4
   137e4:	469a      	mov	sl, r3
   137e6:	f000 fe23 	bl	14430 <memchr>
   137ea:	2800      	cmp	r0, #0
   137ec:	d196      	bne.n	1371c <_svfiprintf_r+0xf0>
   137ee:	46a8      	mov	r8, r5
   137f0:	4655      	mov	r5, sl
   137f2:	e79c      	b.n	1372e <_svfiprintf_r+0x102>
   137f4:	9b05      	ldr	r3, [sp, #20]
   137f6:	3307      	adds	r3, #7
   137f8:	f023 0307 	bic.w	r3, r3, #7
   137fc:	3308      	adds	r3, #8
   137fe:	9305      	str	r3, [sp, #20]
   13800:	e7ad      	b.n	1375e <_svfiprintf_r+0x132>
   13802:	4249      	negs	r1, r1
   13804:	f043 0302 	orr.w	r3, r3, #2
   13808:	9109      	str	r1, [sp, #36]	; 0x24
   1380a:	9306      	str	r3, [sp, #24]
   1380c:	e77b      	b.n	13706 <_svfiprintf_r+0xda>
   1380e:	ab05      	add	r3, sp, #20
   13810:	9300      	str	r3, [sp, #0]
   13812:	465a      	mov	r2, fp
   13814:	4b21      	ldr	r3, [pc, #132]	; (1389c <_svfiprintf_r+0x270>)
   13816:	9802      	ldr	r0, [sp, #8]
   13818:	a906      	add	r1, sp, #24
   1381a:	f000 fa87 	bl	13d2c <_printf_i>
   1381e:	4681      	mov	r9, r0
   13820:	e79a      	b.n	13758 <_svfiprintf_r+0x12c>
   13822:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   13826:	2300      	movs	r3, #0
   13828:	2a09      	cmp	r2, #9
   1382a:	9307      	str	r3, [sp, #28]
   1382c:	d901      	bls.n	13832 <_svfiprintf_r+0x206>
   1382e:	e023      	b.n	13878 <_svfiprintf_r+0x24c>
   13830:	4655      	mov	r5, sl
   13832:	7869      	ldrb	r1, [r5, #1]
   13834:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13838:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1383c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   13840:	2a09      	cmp	r2, #9
   13842:	f105 0a01 	add.w	sl, r5, #1
   13846:	d9f3      	bls.n	13830 <_svfiprintf_r+0x204>
   13848:	3502      	adds	r5, #2
   1384a:	9307      	str	r3, [sp, #28]
   1384c:	e75f      	b.n	1370e <_svfiprintf_r+0xe2>
   1384e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13852:	469a      	mov	sl, r3
   13854:	9207      	str	r2, [sp, #28]
   13856:	e75a      	b.n	1370e <_svfiprintf_r+0xe2>
   13858:	4644      	mov	r4, r8
   1385a:	e722      	b.n	136a2 <_svfiprintf_r+0x76>
   1385c:	2140      	movs	r1, #64	; 0x40
   1385e:	9303      	str	r3, [sp, #12]
   13860:	f7fe ff00 	bl	12664 <_malloc_r>
   13864:	9b03      	ldr	r3, [sp, #12]
   13866:	f8cb 0000 	str.w	r0, [fp]
   1386a:	f8cb 0010 	str.w	r0, [fp, #16]
   1386e:	b130      	cbz	r0, 1387e <_svfiprintf_r+0x252>
   13870:	2240      	movs	r2, #64	; 0x40
   13872:	f8cb 2014 	str.w	r2, [fp, #20]
   13876:	e6e6      	b.n	13646 <_svfiprintf_r+0x1a>
   13878:	46aa      	mov	sl, r5
   1387a:	3501      	adds	r5, #1
   1387c:	e747      	b.n	1370e <_svfiprintf_r+0xe2>
   1387e:	9a02      	ldr	r2, [sp, #8]
   13880:	230c      	movs	r3, #12
   13882:	6013      	str	r3, [r2, #0]
   13884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13888:	e778      	b.n	1377c <_svfiprintf_r+0x150>
   1388a:	bf00      	nop
   1388c:	000153c8 	.word	0x000153c8
   13890:	000153d0 	.word	0x000153d0
   13894:	000153d4 	.word	0x000153d4
   13898:	00000000 	.word	0x00000000
   1389c:	00013475 	.word	0x00013475

000138a0 <__sfputc_r>:
   138a0:	6893      	ldr	r3, [r2, #8]
   138a2:	3b01      	subs	r3, #1
   138a4:	2b00      	cmp	r3, #0
   138a6:	6093      	str	r3, [r2, #8]
   138a8:	da0f      	bge.n	138ca <__sfputc_r+0x2a>
   138aa:	b410      	push	{r4}
   138ac:	6994      	ldr	r4, [r2, #24]
   138ae:	42a3      	cmp	r3, r4
   138b0:	db08      	blt.n	138c4 <__sfputc_r+0x24>
   138b2:	290a      	cmp	r1, #10
   138b4:	d006      	beq.n	138c4 <__sfputc_r+0x24>
   138b6:	6813      	ldr	r3, [r2, #0]
   138b8:	1c58      	adds	r0, r3, #1
   138ba:	6010      	str	r0, [r2, #0]
   138bc:	7019      	strb	r1, [r3, #0]
   138be:	4608      	mov	r0, r1
   138c0:	bc10      	pop	{r4}
   138c2:	4770      	bx	lr
   138c4:	bc10      	pop	{r4}
   138c6:	f7ff ba49 	b.w	12d5c <__swbuf_r>
   138ca:	6813      	ldr	r3, [r2, #0]
   138cc:	1c58      	adds	r0, r3, #1
   138ce:	6010      	str	r0, [r2, #0]
   138d0:	7019      	strb	r1, [r3, #0]
   138d2:	4608      	mov	r0, r1
   138d4:	4770      	bx	lr
   138d6:	bf00      	nop

000138d8 <__sfputs_r>:
   138d8:	b19b      	cbz	r3, 13902 <__sfputs_r+0x2a>
   138da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138dc:	4413      	add	r3, r2
   138de:	460f      	mov	r7, r1
   138e0:	4606      	mov	r6, r0
   138e2:	1e5d      	subs	r5, r3, #1
   138e4:	1e54      	subs	r4, r2, #1
   138e6:	e001      	b.n	138ec <__sfputs_r+0x14>
   138e8:	42ac      	cmp	r4, r5
   138ea:	d008      	beq.n	138fe <__sfputs_r+0x26>
   138ec:	463a      	mov	r2, r7
   138ee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   138f2:	4630      	mov	r0, r6
   138f4:	f7ff ffd4 	bl	138a0 <__sfputc_r>
   138f8:	1c43      	adds	r3, r0, #1
   138fa:	d1f5      	bne.n	138e8 <__sfputs_r+0x10>
   138fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138fe:	2000      	movs	r0, #0
   13900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13902:	2000      	movs	r0, #0
   13904:	4770      	bx	lr
   13906:	bf00      	nop

00013908 <__sprint_r>:
   13908:	6893      	ldr	r3, [r2, #8]
   1390a:	b510      	push	{r4, lr}
   1390c:	4614      	mov	r4, r2
   1390e:	b913      	cbnz	r3, 13916 <__sprint_r+0xe>
   13910:	6053      	str	r3, [r2, #4]
   13912:	4618      	mov	r0, r3
   13914:	bd10      	pop	{r4, pc}
   13916:	f000 fbd9 	bl	140cc <__sfvwrite_r>
   1391a:	2300      	movs	r3, #0
   1391c:	e9c4 3301 	strd	r3, r3, [r4, #4]
   13920:	bd10      	pop	{r4, pc}
   13922:	bf00      	nop

00013924 <_vfiprintf_r>:
   13924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13928:	b09f      	sub	sp, #124	; 0x7c
   1392a:	468b      	mov	fp, r1
   1392c:	4690      	mov	r8, r2
   1392e:	461c      	mov	r4, r3
   13930:	9003      	str	r0, [sp, #12]
   13932:	b118      	cbz	r0, 1393c <_vfiprintf_r+0x18>
   13934:	6983      	ldr	r3, [r0, #24]
   13936:	2b00      	cmp	r3, #0
   13938:	f000 80b7 	beq.w	13aaa <_vfiprintf_r+0x186>
   1393c:	4ba2      	ldr	r3, [pc, #648]	; (13bc8 <_vfiprintf_r+0x2a4>)
   1393e:	459b      	cmp	fp, r3
   13940:	f000 80b9 	beq.w	13ab6 <_vfiprintf_r+0x192>
   13944:	4ba1      	ldr	r3, [pc, #644]	; (13bcc <_vfiprintf_r+0x2a8>)
   13946:	459b      	cmp	fp, r3
   13948:	f000 80c7 	beq.w	13ada <_vfiprintf_r+0x1b6>
   1394c:	4ba0      	ldr	r3, [pc, #640]	; (13bd0 <_vfiprintf_r+0x2ac>)
   1394e:	459b      	cmp	fp, r3
   13950:	bf04      	itt	eq
   13952:	9b03      	ldreq	r3, [sp, #12]
   13954:	f8d3 b00c 	ldreq.w	fp, [r3, #12]
   13958:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1395c:	0718      	lsls	r0, r3, #28
   1395e:	f140 80b2 	bpl.w	13ac6 <_vfiprintf_r+0x1a2>
   13962:	f8db 3010 	ldr.w	r3, [fp, #16]
   13966:	2b00      	cmp	r3, #0
   13968:	f000 80ad 	beq.w	13ac6 <_vfiprintf_r+0x1a2>
   1396c:	2330      	movs	r3, #48	; 0x30
   1396e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   13972:	f898 3000 	ldrb.w	r3, [r8]
   13976:	9405      	str	r4, [sp, #20]
   13978:	2100      	movs	r1, #0
   1397a:	2220      	movs	r2, #32
   1397c:	910b      	str	r1, [sp, #44]	; 0x2c
   1397e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   13982:	4e94      	ldr	r6, [pc, #592]	; (13bd4 <_vfiprintf_r+0x2b0>)
   13984:	2701      	movs	r7, #1
   13986:	2b00      	cmp	r3, #0
   13988:	f000 8087 	beq.w	13a9a <_vfiprintf_r+0x176>
   1398c:	2b25      	cmp	r3, #37	; 0x25
   1398e:	f000 8115 	beq.w	13bbc <_vfiprintf_r+0x298>
   13992:	4645      	mov	r5, r8
   13994:	e003      	b.n	1399e <_vfiprintf_r+0x7a>
   13996:	2b25      	cmp	r3, #37	; 0x25
   13998:	f000 80a3 	beq.w	13ae2 <_vfiprintf_r+0x1be>
   1399c:	4625      	mov	r5, r4
   1399e:	786b      	ldrb	r3, [r5, #1]
   139a0:	1c6c      	adds	r4, r5, #1
   139a2:	2b00      	cmp	r3, #0
   139a4:	d1f7      	bne.n	13996 <_vfiprintf_r+0x72>
   139a6:	ebb4 0a08 	subs.w	sl, r4, r8
   139aa:	d076      	beq.n	13a9a <_vfiprintf_r+0x176>
   139ac:	4642      	mov	r2, r8
   139ae:	4653      	mov	r3, sl
   139b0:	4659      	mov	r1, fp
   139b2:	9803      	ldr	r0, [sp, #12]
   139b4:	f7ff ff90 	bl	138d8 <__sfputs_r>
   139b8:	3001      	adds	r0, #1
   139ba:	d06e      	beq.n	13a9a <_vfiprintf_r+0x176>
   139bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   139be:	786a      	ldrb	r2, [r5, #1]
   139c0:	4453      	add	r3, sl
   139c2:	930b      	str	r3, [sp, #44]	; 0x2c
   139c4:	2a00      	cmp	r2, #0
   139c6:	d068      	beq.n	13a9a <_vfiprintf_r+0x176>
   139c8:	2300      	movs	r3, #0
   139ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   139ce:	3401      	adds	r4, #1
   139d0:	9306      	str	r3, [sp, #24]
   139d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
   139d6:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
   139da:	931c      	str	r3, [sp, #112]	; 0x70
   139dc:	9207      	str	r2, [sp, #28]
   139de:	e005      	b.n	139ec <_vfiprintf_r+0xc8>
   139e0:	9a06      	ldr	r2, [sp, #24]
   139e2:	fa07 f303 	lsl.w	r3, r7, r3
   139e6:	4313      	orrs	r3, r2
   139e8:	462c      	mov	r4, r5
   139ea:	9306      	str	r3, [sp, #24]
   139ec:	4625      	mov	r5, r4
   139ee:	2205      	movs	r2, #5
   139f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   139f4:	4630      	mov	r0, r6
   139f6:	f000 fd1b 	bl	14430 <memchr>
   139fa:	46aa      	mov	sl, r5
   139fc:	1b83      	subs	r3, r0, r6
   139fe:	2800      	cmp	r0, #0
   13a00:	d1ee      	bne.n	139e0 <_vfiprintf_r+0xbc>
   13a02:	9b06      	ldr	r3, [sp, #24]
   13a04:	06d9      	lsls	r1, r3, #27
   13a06:	bf44      	itt	mi
   13a08:	2220      	movmi	r2, #32
   13a0a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   13a0e:	7821      	ldrb	r1, [r4, #0]
   13a10:	071a      	lsls	r2, r3, #28
   13a12:	bf44      	itt	mi
   13a14:	222b      	movmi	r2, #43	; 0x2b
   13a16:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   13a1a:	292a      	cmp	r1, #42	; 0x2a
   13a1c:	d166      	bne.n	13aec <_vfiprintf_r+0x1c8>
   13a1e:	9a05      	ldr	r2, [sp, #20]
   13a20:	6811      	ldr	r1, [r2, #0]
   13a22:	3204      	adds	r2, #4
   13a24:	2900      	cmp	r1, #0
   13a26:	9205      	str	r2, [sp, #20]
   13a28:	f2c0 809d 	blt.w	13b66 <_vfiprintf_r+0x242>
   13a2c:	9109      	str	r1, [sp, #36]	; 0x24
   13a2e:	7861      	ldrb	r1, [r4, #1]
   13a30:	1ca5      	adds	r5, r4, #2
   13a32:	292e      	cmp	r1, #46	; 0x2e
   13a34:	d073      	beq.n	13b1e <_vfiprintf_r+0x1fa>
   13a36:	4c68      	ldr	r4, [pc, #416]	; (13bd8 <_vfiprintf_r+0x2b4>)
   13a38:	2203      	movs	r2, #3
   13a3a:	4620      	mov	r0, r4
   13a3c:	f000 fcf8 	bl	14430 <memchr>
   13a40:	2800      	cmp	r0, #0
   13a42:	f000 8086 	beq.w	13b52 <_vfiprintf_r+0x22e>
   13a46:	1b00      	subs	r0, r0, r4
   13a48:	9b06      	ldr	r3, [sp, #24]
   13a4a:	2440      	movs	r4, #64	; 0x40
   13a4c:	fa04 f000 	lsl.w	r0, r4, r0
   13a50:	4303      	orrs	r3, r0
   13a52:	9306      	str	r3, [sp, #24]
   13a54:	f105 0801 	add.w	r8, r5, #1
   13a58:	7829      	ldrb	r1, [r5, #0]
   13a5a:	4860      	ldr	r0, [pc, #384]	; (13bdc <_vfiprintf_r+0x2b8>)
   13a5c:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   13a60:	2206      	movs	r2, #6
   13a62:	f000 fce5 	bl	14430 <memchr>
   13a66:	2800      	cmp	r0, #0
   13a68:	f000 8083 	beq.w	13b72 <_vfiprintf_r+0x24e>
   13a6c:	4b5c      	ldr	r3, [pc, #368]	; (13be0 <_vfiprintf_r+0x2bc>)
   13a6e:	2b00      	cmp	r3, #0
   13a70:	d072      	beq.n	13b58 <_vfiprintf_r+0x234>
   13a72:	ab05      	add	r3, sp, #20
   13a74:	9300      	str	r3, [sp, #0]
   13a76:	465a      	mov	r2, fp
   13a78:	4b5a      	ldr	r3, [pc, #360]	; (13be4 <_vfiprintf_r+0x2c0>)
   13a7a:	9803      	ldr	r0, [sp, #12]
   13a7c:	a906      	add	r1, sp, #24
   13a7e:	f3af 8000 	nop.w
   13a82:	4681      	mov	r9, r0
   13a84:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   13a88:	d007      	beq.n	13a9a <_vfiprintf_r+0x176>
   13a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a8c:	444b      	add	r3, r9
   13a8e:	930b      	str	r3, [sp, #44]	; 0x2c
   13a90:	f898 3000 	ldrb.w	r3, [r8]
   13a94:	2b00      	cmp	r3, #0
   13a96:	f47f af79 	bne.w	1398c <_vfiprintf_r+0x68>
   13a9a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   13a9e:	065b      	lsls	r3, r3, #25
   13aa0:	d418      	bmi.n	13ad4 <_vfiprintf_r+0x1b0>
   13aa2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13aa4:	b01f      	add	sp, #124	; 0x7c
   13aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aaa:	f7ff fbf7 	bl	1329c <__sinit>
   13aae:	4b46      	ldr	r3, [pc, #280]	; (13bc8 <_vfiprintf_r+0x2a4>)
   13ab0:	459b      	cmp	fp, r3
   13ab2:	f47f af47 	bne.w	13944 <_vfiprintf_r+0x20>
   13ab6:	9b03      	ldr	r3, [sp, #12]
   13ab8:	f8d3 b004 	ldr.w	fp, [r3, #4]
   13abc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   13ac0:	0718      	lsls	r0, r3, #28
   13ac2:	f53f af4e 	bmi.w	13962 <_vfiprintf_r+0x3e>
   13ac6:	4659      	mov	r1, fp
   13ac8:	9803      	ldr	r0, [sp, #12]
   13aca:	f7ff f9a7 	bl	12e1c <__swsetup_r>
   13ace:	2800      	cmp	r0, #0
   13ad0:	f43f af4c 	beq.w	1396c <_vfiprintf_r+0x48>
   13ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ad8:	e7e4      	b.n	13aa4 <_vfiprintf_r+0x180>
   13ada:	9b03      	ldr	r3, [sp, #12]
   13adc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   13ae0:	e73a      	b.n	13958 <_vfiprintf_r+0x34>
   13ae2:	ebb4 0a08 	subs.w	sl, r4, r8
   13ae6:	f43f af6f 	beq.w	139c8 <_vfiprintf_r+0xa4>
   13aea:	e75f      	b.n	139ac <_vfiprintf_r+0x88>
   13aec:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   13af0:	2a09      	cmp	r2, #9
   13af2:	bf88      	it	hi
   13af4:	46a2      	movhi	sl, r4
   13af6:	d89c      	bhi.n	13a32 <_vfiprintf_r+0x10e>
   13af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13afa:	e001      	b.n	13b00 <_vfiprintf_r+0x1dc>
   13afc:	462c      	mov	r4, r5
   13afe:	3501      	adds	r5, #1
   13b00:	7829      	ldrb	r1, [r5, #0]
   13b02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13b06:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   13b0a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   13b0e:	2a09      	cmp	r2, #9
   13b10:	46aa      	mov	sl, r5
   13b12:	d9f3      	bls.n	13afc <_vfiprintf_r+0x1d8>
   13b14:	292e      	cmp	r1, #46	; 0x2e
   13b16:	f104 0502 	add.w	r5, r4, #2
   13b1a:	9309      	str	r3, [sp, #36]	; 0x24
   13b1c:	d18b      	bne.n	13a36 <_vfiprintf_r+0x112>
   13b1e:	f89a 1001 	ldrb.w	r1, [sl, #1]
   13b22:	292a      	cmp	r1, #42	; 0x2a
   13b24:	d12f      	bne.n	13b86 <_vfiprintf_r+0x262>
   13b26:	9b05      	ldr	r3, [sp, #20]
   13b28:	f89a 1002 	ldrb.w	r1, [sl, #2]
   13b2c:	681a      	ldr	r2, [r3, #0]
   13b2e:	9207      	str	r2, [sp, #28]
   13b30:	3304      	adds	r3, #4
   13b32:	2a00      	cmp	r2, #0
   13b34:	9305      	str	r3, [sp, #20]
   13b36:	f10a 0503 	add.w	r5, sl, #3
   13b3a:	f10a 0302 	add.w	r3, sl, #2
   13b3e:	db38      	blt.n	13bb2 <_vfiprintf_r+0x28e>
   13b40:	4c25      	ldr	r4, [pc, #148]	; (13bd8 <_vfiprintf_r+0x2b4>)
   13b42:	2203      	movs	r2, #3
   13b44:	4620      	mov	r0, r4
   13b46:	469a      	mov	sl, r3
   13b48:	f000 fc72 	bl	14430 <memchr>
   13b4c:	2800      	cmp	r0, #0
   13b4e:	f47f af7a 	bne.w	13a46 <_vfiprintf_r+0x122>
   13b52:	46a8      	mov	r8, r5
   13b54:	4655      	mov	r5, sl
   13b56:	e77f      	b.n	13a58 <_vfiprintf_r+0x134>
   13b58:	9b05      	ldr	r3, [sp, #20]
   13b5a:	3307      	adds	r3, #7
   13b5c:	f023 0307 	bic.w	r3, r3, #7
   13b60:	3308      	adds	r3, #8
   13b62:	9305      	str	r3, [sp, #20]
   13b64:	e791      	b.n	13a8a <_vfiprintf_r+0x166>
   13b66:	4249      	negs	r1, r1
   13b68:	f043 0302 	orr.w	r3, r3, #2
   13b6c:	9109      	str	r1, [sp, #36]	; 0x24
   13b6e:	9306      	str	r3, [sp, #24]
   13b70:	e75d      	b.n	13a2e <_vfiprintf_r+0x10a>
   13b72:	ab05      	add	r3, sp, #20
   13b74:	9300      	str	r3, [sp, #0]
   13b76:	465a      	mov	r2, fp
   13b78:	4b1a      	ldr	r3, [pc, #104]	; (13be4 <_vfiprintf_r+0x2c0>)
   13b7a:	9803      	ldr	r0, [sp, #12]
   13b7c:	a906      	add	r1, sp, #24
   13b7e:	f000 f8d5 	bl	13d2c <_printf_i>
   13b82:	4681      	mov	r9, r0
   13b84:	e77e      	b.n	13a84 <_vfiprintf_r+0x160>
   13b86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   13b8a:	2300      	movs	r3, #0
   13b8c:	2a09      	cmp	r2, #9
   13b8e:	9307      	str	r3, [sp, #28]
   13b90:	d901      	bls.n	13b96 <_vfiprintf_r+0x272>
   13b92:	e015      	b.n	13bc0 <_vfiprintf_r+0x29c>
   13b94:	4655      	mov	r5, sl
   13b96:	7869      	ldrb	r1, [r5, #1]
   13b98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   13b9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   13ba0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   13ba4:	2a09      	cmp	r2, #9
   13ba6:	f105 0a01 	add.w	sl, r5, #1
   13baa:	d9f3      	bls.n	13b94 <_vfiprintf_r+0x270>
   13bac:	3502      	adds	r5, #2
   13bae:	9307      	str	r3, [sp, #28]
   13bb0:	e741      	b.n	13a36 <_vfiprintf_r+0x112>
   13bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13bb6:	469a      	mov	sl, r3
   13bb8:	9207      	str	r2, [sp, #28]
   13bba:	e73c      	b.n	13a36 <_vfiprintf_r+0x112>
   13bbc:	4644      	mov	r4, r8
   13bbe:	e703      	b.n	139c8 <_vfiprintf_r+0xa4>
   13bc0:	46aa      	mov	sl, r5
   13bc2:	3501      	adds	r5, #1
   13bc4:	e737      	b.n	13a36 <_vfiprintf_r+0x112>
   13bc6:	bf00      	nop
   13bc8:	000153a8 	.word	0x000153a8
   13bcc:	00015388 	.word	0x00015388
   13bd0:	00015368 	.word	0x00015368
   13bd4:	000153c8 	.word	0x000153c8
   13bd8:	000153d0 	.word	0x000153d0
   13bdc:	000153d4 	.word	0x000153d4
   13be0:	00000000 	.word	0x00000000
   13be4:	000138d9 	.word	0x000138d9

00013be8 <vfiprintf>:
   13be8:	b410      	push	{r4}
   13bea:	4c04      	ldr	r4, [pc, #16]	; (13bfc <vfiprintf+0x14>)
   13bec:	4613      	mov	r3, r2
   13bee:	460a      	mov	r2, r1
   13bf0:	4601      	mov	r1, r0
   13bf2:	6820      	ldr	r0, [r4, #0]
   13bf4:	bc10      	pop	{r4}
   13bf6:	f7ff be95 	b.w	13924 <_vfiprintf_r>
   13bfa:	bf00      	nop
   13bfc:	20000548 	.word	0x20000548

00013c00 <_printf_common>:
   13c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13c04:	460c      	mov	r4, r1
   13c06:	4691      	mov	r9, r2
   13c08:	690a      	ldr	r2, [r1, #16]
   13c0a:	6889      	ldr	r1, [r1, #8]
   13c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   13c10:	428a      	cmp	r2, r1
   13c12:	bfb8      	it	lt
   13c14:	460a      	movlt	r2, r1
   13c16:	f8c9 2000 	str.w	r2, [r9]
   13c1a:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   13c1e:	4606      	mov	r6, r0
   13c20:	461f      	mov	r7, r3
   13c22:	b111      	cbz	r1, 13c2a <_printf_common+0x2a>
   13c24:	3201      	adds	r2, #1
   13c26:	f8c9 2000 	str.w	r2, [r9]
   13c2a:	6823      	ldr	r3, [r4, #0]
   13c2c:	0699      	lsls	r1, r3, #26
   13c2e:	d55c      	bpl.n	13cea <_printf_common+0xea>
   13c30:	f8d9 2000 	ldr.w	r2, [r9]
   13c34:	3202      	adds	r2, #2
   13c36:	f8c9 2000 	str.w	r2, [r9]
   13c3a:	6823      	ldr	r3, [r4, #0]
   13c3c:	f013 0f06 	tst.w	r3, #6
   13c40:	4619      	mov	r1, r3
   13c42:	d11d      	bne.n	13c80 <_printf_common+0x80>
   13c44:	68e1      	ldr	r1, [r4, #12]
   13c46:	1a8a      	subs	r2, r1, r2
   13c48:	2a00      	cmp	r2, #0
   13c4a:	bfd8      	it	le
   13c4c:	4619      	movle	r1, r3
   13c4e:	dd17      	ble.n	13c80 <_printf_common+0x80>
   13c50:	f104 0a19 	add.w	sl, r4, #25
   13c54:	2500      	movs	r5, #0
   13c56:	e005      	b.n	13c64 <_printf_common+0x64>
   13c58:	68e3      	ldr	r3, [r4, #12]
   13c5a:	f8d9 2000 	ldr.w	r2, [r9]
   13c5e:	1a9b      	subs	r3, r3, r2
   13c60:	42ab      	cmp	r3, r5
   13c62:	dd0c      	ble.n	13c7e <_printf_common+0x7e>
   13c64:	2301      	movs	r3, #1
   13c66:	4652      	mov	r2, sl
   13c68:	4639      	mov	r1, r7
   13c6a:	4630      	mov	r0, r6
   13c6c:	47c0      	blx	r8
   13c6e:	3001      	adds	r0, #1
   13c70:	f105 0501 	add.w	r5, r5, #1
   13c74:	d1f0      	bne.n	13c58 <_printf_common+0x58>
   13c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c7e:	6821      	ldr	r1, [r4, #0]
   13c80:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   13c84:	3300      	adds	r3, #0
   13c86:	bf18      	it	ne
   13c88:	2301      	movne	r3, #1
   13c8a:	068a      	lsls	r2, r1, #26
   13c8c:	d50a      	bpl.n	13ca4 <_printf_common+0xa4>
   13c8e:	18e1      	adds	r1, r4, r3
   13c90:	1c5a      	adds	r2, r3, #1
   13c92:	2030      	movs	r0, #48	; 0x30
   13c94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   13c98:	4422      	add	r2, r4
   13c9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   13c9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   13ca2:	3302      	adds	r3, #2
   13ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13ca8:	4639      	mov	r1, r7
   13caa:	4630      	mov	r0, r6
   13cac:	47c0      	blx	r8
   13cae:	3001      	adds	r0, #1
   13cb0:	d0e1      	beq.n	13c76 <_printf_common+0x76>
   13cb2:	6823      	ldr	r3, [r4, #0]
   13cb4:	68a2      	ldr	r2, [r4, #8]
   13cb6:	6921      	ldr	r1, [r4, #16]
   13cb8:	f003 0306 	and.w	r3, r3, #6
   13cbc:	2b04      	cmp	r3, #4
   13cbe:	d01d      	beq.n	13cfc <_printf_common+0xfc>
   13cc0:	428a      	cmp	r2, r1
   13cc2:	dd26      	ble.n	13d12 <_printf_common+0x112>
   13cc4:	f04f 0900 	mov.w	r9, #0
   13cc8:	1a52      	subs	r2, r2, r1
   13cca:	4491      	add	r9, r2
   13ccc:	341a      	adds	r4, #26
   13cce:	2500      	movs	r5, #0
   13cd0:	e001      	b.n	13cd6 <_printf_common+0xd6>
   13cd2:	454d      	cmp	r5, r9
   13cd4:	da1d      	bge.n	13d12 <_printf_common+0x112>
   13cd6:	2301      	movs	r3, #1
   13cd8:	4622      	mov	r2, r4
   13cda:	4639      	mov	r1, r7
   13cdc:	4630      	mov	r0, r6
   13cde:	47c0      	blx	r8
   13ce0:	3001      	adds	r0, #1
   13ce2:	f105 0501 	add.w	r5, r5, #1
   13ce6:	d1f4      	bne.n	13cd2 <_printf_common+0xd2>
   13ce8:	e7c5      	b.n	13c76 <_printf_common+0x76>
   13cea:	f013 0f06 	tst.w	r3, #6
   13cee:	d013      	beq.n	13d18 <_printf_common+0x118>
   13cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   13cf4:	3300      	adds	r3, #0
   13cf6:	bf18      	it	ne
   13cf8:	2301      	movne	r3, #1
   13cfa:	e7d3      	b.n	13ca4 <_printf_common+0xa4>
   13cfc:	f8d9 0000 	ldr.w	r0, [r9]
   13d00:	68e3      	ldr	r3, [r4, #12]
   13d02:	428a      	cmp	r2, r1
   13d04:	eba3 0300 	sub.w	r3, r3, r0
   13d08:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
   13d0c:	dcdc      	bgt.n	13cc8 <_printf_common+0xc8>
   13d0e:	2b00      	cmp	r3, #0
   13d10:	dcdc      	bgt.n	13ccc <_printf_common+0xcc>
   13d12:	2000      	movs	r0, #0
   13d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d18:	68e1      	ldr	r1, [r4, #12]
   13d1a:	f8d9 2000 	ldr.w	r2, [r9]
   13d1e:	1a8a      	subs	r2, r1, r2
   13d20:	2a00      	cmp	r2, #0
   13d22:	bfd8      	it	le
   13d24:	4619      	movle	r1, r3
   13d26:	dc93      	bgt.n	13c50 <_printf_common+0x50>
   13d28:	e7aa      	b.n	13c80 <_printf_common+0x80>
   13d2a:	bf00      	nop

00013d2c <_printf_i>:
   13d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d30:	460c      	mov	r4, r1
   13d32:	7e09      	ldrb	r1, [r1, #24]
   13d34:	b085      	sub	sp, #20
   13d36:	296e      	cmp	r1, #110	; 0x6e
   13d38:	4606      	mov	r6, r0
   13d3a:	4617      	mov	r7, r2
   13d3c:	980c      	ldr	r0, [sp, #48]	; 0x30
   13d3e:	4698      	mov	r8, r3
   13d40:	f104 0e43 	add.w	lr, r4, #67	; 0x43
   13d44:	d06d      	beq.n	13e22 <_printf_i+0xf6>
   13d46:	d939      	bls.n	13dbc <_printf_i+0x90>
   13d48:	2973      	cmp	r1, #115	; 0x73
   13d4a:	f000 80f6 	beq.w	13f3a <_printf_i+0x20e>
   13d4e:	d944      	bls.n	13dda <_printf_i+0xae>
   13d50:	2975      	cmp	r1, #117	; 0x75
   13d52:	f000 8104 	beq.w	13f5e <_printf_i+0x232>
   13d56:	2978      	cmp	r1, #120	; 0x78
   13d58:	f040 8111 	bne.w	13f7e <_printf_i+0x252>
   13d5c:	2378      	movs	r3, #120	; 0x78
   13d5e:	6822      	ldr	r2, [r4, #0]
   13d60:	f8df c258 	ldr.w	ip, [pc, #600]	; 13fbc <_printf_i+0x290>
   13d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   13d68:	6801      	ldr	r1, [r0, #0]
   13d6a:	0615      	lsls	r5, r2, #24
   13d6c:	f851 3b04 	ldr.w	r3, [r1], #4
   13d70:	6001      	str	r1, [r0, #0]
   13d72:	f140 80a1 	bpl.w	13eb8 <_printf_i+0x18c>
   13d76:	07d1      	lsls	r1, r2, #31
   13d78:	bf44      	itt	mi
   13d7a:	f042 0220 	orrmi.w	r2, r2, #32
   13d7e:	6022      	strmi	r2, [r4, #0]
   13d80:	2b00      	cmp	r3, #0
   13d82:	f000 8093 	beq.w	13eac <_printf_i+0x180>
   13d86:	2210      	movs	r2, #16
   13d88:	2100      	movs	r1, #0
   13d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   13d8e:	6860      	ldr	r0, [r4, #4]
   13d90:	60a0      	str	r0, [r4, #8]
   13d92:	2800      	cmp	r0, #0
   13d94:	f2c0 80c8 	blt.w	13f28 <_printf_i+0x1fc>
   13d98:	6821      	ldr	r1, [r4, #0]
   13d9a:	f021 0104 	bic.w	r1, r1, #4
   13d9e:	6021      	str	r1, [r4, #0]
   13da0:	2b00      	cmp	r3, #0
   13da2:	f040 80a3 	bne.w	13eec <_printf_i+0x1c0>
   13da6:	2800      	cmp	r0, #0
   13da8:	f040 80c0 	bne.w	13f2c <_printf_i+0x200>
   13dac:	4675      	mov	r5, lr
   13dae:	2a08      	cmp	r2, #8
   13db0:	f000 80ac 	beq.w	13f0c <_printf_i+0x1e0>
   13db4:	ebae 0305 	sub.w	r3, lr, r5
   13db8:	6123      	str	r3, [r4, #16]
   13dba:	e041      	b.n	13e40 <_printf_i+0x114>
   13dbc:	2963      	cmp	r1, #99	; 0x63
   13dbe:	f000 80e5 	beq.w	13f8c <_printf_i+0x260>
   13dc2:	d81a      	bhi.n	13dfa <_printf_i+0xce>
   13dc4:	2900      	cmp	r1, #0
   13dc6:	d038      	beq.n	13e3a <_printf_i+0x10e>
   13dc8:	2958      	cmp	r1, #88	; 0x58
   13dca:	f040 80d8 	bne.w	13f7e <_printf_i+0x252>
   13dce:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   13dd2:	6822      	ldr	r2, [r4, #0]
   13dd4:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 13fc0 <_printf_i+0x294>
   13dd8:	e7c6      	b.n	13d68 <_printf_i+0x3c>
   13dda:	296f      	cmp	r1, #111	; 0x6f
   13ddc:	f000 80bf 	beq.w	13f5e <_printf_i+0x232>
   13de0:	2970      	cmp	r1, #112	; 0x70
   13de2:	f040 80cc 	bne.w	13f7e <_printf_i+0x252>
   13de6:	6822      	ldr	r2, [r4, #0]
   13de8:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 13fbc <_printf_i+0x290>
   13dec:	f042 0220 	orr.w	r2, r2, #32
   13df0:	2378      	movs	r3, #120	; 0x78
   13df2:	6022      	str	r2, [r4, #0]
   13df4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   13df8:	e7b6      	b.n	13d68 <_printf_i+0x3c>
   13dfa:	2964      	cmp	r1, #100	; 0x64
   13dfc:	d002      	beq.n	13e04 <_printf_i+0xd8>
   13dfe:	2969      	cmp	r1, #105	; 0x69
   13e00:	f040 80bd 	bne.w	13f7e <_printf_i+0x252>
   13e04:	6822      	ldr	r2, [r4, #0]
   13e06:	6803      	ldr	r3, [r0, #0]
   13e08:	0611      	lsls	r1, r2, #24
   13e0a:	f103 0504 	add.w	r5, r3, #4
   13e0e:	d557      	bpl.n	13ec0 <_printf_i+0x194>
   13e10:	6819      	ldr	r1, [r3, #0]
   13e12:	6005      	str	r5, [r0, #0]
   13e14:	460b      	mov	r3, r1
   13e16:	2900      	cmp	r1, #0
   13e18:	db59      	blt.n	13ece <_printf_i+0x1a2>
   13e1a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 13fc0 <_printf_i+0x294>
   13e1e:	220a      	movs	r2, #10
   13e20:	e7b5      	b.n	13d8e <_printf_i+0x62>
   13e22:	6803      	ldr	r3, [r0, #0]
   13e24:	6822      	ldr	r2, [r4, #0]
   13e26:	6961      	ldr	r1, [r4, #20]
   13e28:	1d1d      	adds	r5, r3, #4
   13e2a:	6005      	str	r5, [r0, #0]
   13e2c:	0615      	lsls	r5, r2, #24
   13e2e:	681b      	ldr	r3, [r3, #0]
   13e30:	d402      	bmi.n	13e38 <_printf_i+0x10c>
   13e32:	0650      	lsls	r0, r2, #25
   13e34:	f100 80bd 	bmi.w	13fb2 <_printf_i+0x286>
   13e38:	6019      	str	r1, [r3, #0]
   13e3a:	2300      	movs	r3, #0
   13e3c:	4675      	mov	r5, lr
   13e3e:	6123      	str	r3, [r4, #16]
   13e40:	f8cd 8000 	str.w	r8, [sp]
   13e44:	463b      	mov	r3, r7
   13e46:	aa03      	add	r2, sp, #12
   13e48:	4621      	mov	r1, r4
   13e4a:	4630      	mov	r0, r6
   13e4c:	f7ff fed8 	bl	13c00 <_printf_common>
   13e50:	3001      	adds	r0, #1
   13e52:	d020      	beq.n	13e96 <_printf_i+0x16a>
   13e54:	462a      	mov	r2, r5
   13e56:	6923      	ldr	r3, [r4, #16]
   13e58:	4639      	mov	r1, r7
   13e5a:	4630      	mov	r0, r6
   13e5c:	47c0      	blx	r8
   13e5e:	3001      	adds	r0, #1
   13e60:	d019      	beq.n	13e96 <_printf_i+0x16a>
   13e62:	6822      	ldr	r2, [r4, #0]
   13e64:	9803      	ldr	r0, [sp, #12]
   13e66:	68e3      	ldr	r3, [r4, #12]
   13e68:	0792      	lsls	r2, r2, #30
   13e6a:	d519      	bpl.n	13ea0 <_printf_i+0x174>
   13e6c:	1a1a      	subs	r2, r3, r0
   13e6e:	2a00      	cmp	r2, #0
   13e70:	dd16      	ble.n	13ea0 <_printf_i+0x174>
   13e72:	f104 0919 	add.w	r9, r4, #25
   13e76:	2500      	movs	r5, #0
   13e78:	e004      	b.n	13e84 <_printf_i+0x158>
   13e7a:	68e3      	ldr	r3, [r4, #12]
   13e7c:	9803      	ldr	r0, [sp, #12]
   13e7e:	1a1a      	subs	r2, r3, r0
   13e80:	42aa      	cmp	r2, r5
   13e82:	dd0d      	ble.n	13ea0 <_printf_i+0x174>
   13e84:	2301      	movs	r3, #1
   13e86:	464a      	mov	r2, r9
   13e88:	4639      	mov	r1, r7
   13e8a:	4630      	mov	r0, r6
   13e8c:	47c0      	blx	r8
   13e8e:	3001      	adds	r0, #1
   13e90:	f105 0501 	add.w	r5, r5, #1
   13e94:	d1f1      	bne.n	13e7a <_printf_i+0x14e>
   13e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e9a:	b005      	add	sp, #20
   13e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13ea0:	4298      	cmp	r0, r3
   13ea2:	bfb8      	it	lt
   13ea4:	4618      	movlt	r0, r3
   13ea6:	b005      	add	sp, #20
   13ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13eac:	6822      	ldr	r2, [r4, #0]
   13eae:	f022 0220 	bic.w	r2, r2, #32
   13eb2:	6022      	str	r2, [r4, #0]
   13eb4:	2210      	movs	r2, #16
   13eb6:	e767      	b.n	13d88 <_printf_i+0x5c>
   13eb8:	0650      	lsls	r0, r2, #25
   13eba:	bf48      	it	mi
   13ebc:	b29b      	uxthmi	r3, r3
   13ebe:	e75a      	b.n	13d76 <_printf_i+0x4a>
   13ec0:	0651      	lsls	r1, r2, #25
   13ec2:	d5a5      	bpl.n	13e10 <_printf_i+0xe4>
   13ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
   13ec8:	6005      	str	r5, [r0, #0]
   13eca:	4619      	mov	r1, r3
   13ecc:	e7a3      	b.n	13e16 <_printf_i+0xea>
   13ece:	6861      	ldr	r1, [r4, #4]
   13ed0:	60a1      	str	r1, [r4, #8]
   13ed2:	202d      	movs	r0, #45	; 0x2d
   13ed4:	2900      	cmp	r1, #0
   13ed6:	f1c3 0300 	rsb	r3, r3, #0
   13eda:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   13ede:	db02      	blt.n	13ee6 <_printf_i+0x1ba>
   13ee0:	f022 0204 	bic.w	r2, r2, #4
   13ee4:	6022      	str	r2, [r4, #0]
   13ee6:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 13fc0 <_printf_i+0x294>
   13eea:	220a      	movs	r2, #10
   13eec:	4675      	mov	r5, lr
   13eee:	e000      	b.n	13ef2 <_printf_i+0x1c6>
   13ef0:	460b      	mov	r3, r1
   13ef2:	fbb3 f1f2 	udiv	r1, r3, r2
   13ef6:	fb02 3011 	mls	r0, r2, r1, r3
   13efa:	4293      	cmp	r3, r2
   13efc:	f81c 0000 	ldrb.w	r0, [ip, r0]
   13f00:	f805 0d01 	strb.w	r0, [r5, #-1]!
   13f04:	d2f4      	bcs.n	13ef0 <_printf_i+0x1c4>
   13f06:	2a08      	cmp	r2, #8
   13f08:	f47f af54 	bne.w	13db4 <_printf_i+0x88>
   13f0c:	6823      	ldr	r3, [r4, #0]
   13f0e:	07db      	lsls	r3, r3, #31
   13f10:	f57f af50 	bpl.w	13db4 <_printf_i+0x88>
   13f14:	6862      	ldr	r2, [r4, #4]
   13f16:	6923      	ldr	r3, [r4, #16]
   13f18:	429a      	cmp	r2, r3
   13f1a:	f73f af4b 	bgt.w	13db4 <_printf_i+0x88>
   13f1e:	2330      	movs	r3, #48	; 0x30
   13f20:	f805 3c01 	strb.w	r3, [r5, #-1]
   13f24:	3d01      	subs	r5, #1
   13f26:	e745      	b.n	13db4 <_printf_i+0x88>
   13f28:	2b00      	cmp	r3, #0
   13f2a:	d1df      	bne.n	13eec <_printf_i+0x1c0>
   13f2c:	f89c 3000 	ldrb.w	r3, [ip]
   13f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   13f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
   13f38:	e739      	b.n	13dae <_printf_i+0x82>
   13f3a:	6803      	ldr	r3, [r0, #0]
   13f3c:	6862      	ldr	r2, [r4, #4]
   13f3e:	1d19      	adds	r1, r3, #4
   13f40:	6001      	str	r1, [r0, #0]
   13f42:	681d      	ldr	r5, [r3, #0]
   13f44:	2100      	movs	r1, #0
   13f46:	4628      	mov	r0, r5
   13f48:	f000 fa72 	bl	14430 <memchr>
   13f4c:	2800      	cmp	r0, #0
   13f4e:	d032      	beq.n	13fb6 <_printf_i+0x28a>
   13f50:	1b40      	subs	r0, r0, r5
   13f52:	6060      	str	r0, [r4, #4]
   13f54:	6120      	str	r0, [r4, #16]
   13f56:	2300      	movs	r3, #0
   13f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   13f5c:	e770      	b.n	13e40 <_printf_i+0x114>
   13f5e:	6822      	ldr	r2, [r4, #0]
   13f60:	6803      	ldr	r3, [r0, #0]
   13f62:	f012 0f80 	tst.w	r2, #128	; 0x80
   13f66:	f103 0504 	add.w	r5, r3, #4
   13f6a:	d01a      	beq.n	13fa2 <_printf_i+0x276>
   13f6c:	681b      	ldr	r3, [r3, #0]
   13f6e:	6005      	str	r5, [r0, #0]
   13f70:	296f      	cmp	r1, #111	; 0x6f
   13f72:	bf0c      	ite	eq
   13f74:	2208      	moveq	r2, #8
   13f76:	220a      	movne	r2, #10
   13f78:	f8df c044 	ldr.w	ip, [pc, #68]	; 13fc0 <_printf_i+0x294>
   13f7c:	e704      	b.n	13d88 <_printf_i+0x5c>
   13f7e:	2301      	movs	r3, #1
   13f80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   13f84:	6123      	str	r3, [r4, #16]
   13f86:	f104 0542 	add.w	r5, r4, #66	; 0x42
   13f8a:	e7e4      	b.n	13f56 <_printf_i+0x22a>
   13f8c:	6803      	ldr	r3, [r0, #0]
   13f8e:	681a      	ldr	r2, [r3, #0]
   13f90:	1d19      	adds	r1, r3, #4
   13f92:	2301      	movs	r3, #1
   13f94:	6001      	str	r1, [r0, #0]
   13f96:	f104 0542 	add.w	r5, r4, #66	; 0x42
   13f9a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   13f9e:	6123      	str	r3, [r4, #16]
   13fa0:	e7d9      	b.n	13f56 <_printf_i+0x22a>
   13fa2:	f012 0f40 	tst.w	r2, #64	; 0x40
   13fa6:	bf0d      	iteet	eq
   13fa8:	681b      	ldreq	r3, [r3, #0]
   13faa:	6005      	strne	r5, [r0, #0]
   13fac:	881b      	ldrhne	r3, [r3, #0]
   13fae:	6005      	streq	r5, [r0, #0]
   13fb0:	e7de      	b.n	13f70 <_printf_i+0x244>
   13fb2:	8019      	strh	r1, [r3, #0]
   13fb4:	e741      	b.n	13e3a <_printf_i+0x10e>
   13fb6:	6860      	ldr	r0, [r4, #4]
   13fb8:	e7cc      	b.n	13f54 <_printf_i+0x228>
   13fba:	bf00      	nop
   13fbc:	000153f0 	.word	0x000153f0
   13fc0:	000153dc 	.word	0x000153dc

00013fc4 <__sread>:
   13fc4:	b510      	push	{r4, lr}
   13fc6:	460c      	mov	r4, r1
   13fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   13fcc:	f000 fb0e 	bl	145ec <_read_r>
   13fd0:	2800      	cmp	r0, #0
   13fd2:	db03      	blt.n	13fdc <__sread+0x18>
   13fd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   13fd6:	4403      	add	r3, r0
   13fd8:	6563      	str	r3, [r4, #84]	; 0x54
   13fda:	bd10      	pop	{r4, pc}
   13fdc:	89a3      	ldrh	r3, [r4, #12]
   13fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   13fe2:	81a3      	strh	r3, [r4, #12]
   13fe4:	bd10      	pop	{r4, pc}
   13fe6:	bf00      	nop

00013fe8 <__seofread>:
   13fe8:	2000      	movs	r0, #0
   13fea:	4770      	bx	lr

00013fec <__swrite>:
   13fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ff0:	4616      	mov	r6, r2
   13ff2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   13ff6:	461f      	mov	r7, r3
   13ff8:	05d3      	lsls	r3, r2, #23
   13ffa:	460c      	mov	r4, r1
   13ffc:	4605      	mov	r5, r0
   13ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14002:	d409      	bmi.n	14018 <__swrite+0x2c>
   14004:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   14008:	81a2      	strh	r2, [r4, #12]
   1400a:	463b      	mov	r3, r7
   1400c:	4632      	mov	r2, r6
   1400e:	4628      	mov	r0, r5
   14010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14014:	f000 b81e 	b.w	14054 <_write_r>
   14018:	2200      	movs	r2, #0
   1401a:	2302      	movs	r3, #2
   1401c:	f000 f9ec 	bl	143f8 <_lseek_r>
   14020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14028:	e7ec      	b.n	14004 <__swrite+0x18>
   1402a:	bf00      	nop

0001402c <__sseek>:
   1402c:	b510      	push	{r4, lr}
   1402e:	460c      	mov	r4, r1
   14030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14034:	f000 f9e0 	bl	143f8 <_lseek_r>
   14038:	89a3      	ldrh	r3, [r4, #12]
   1403a:	1c42      	adds	r2, r0, #1
   1403c:	bf0e      	itee	eq
   1403e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   14042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   14046:	6560      	strne	r0, [r4, #84]	; 0x54
   14048:	81a3      	strh	r3, [r4, #12]
   1404a:	bd10      	pop	{r4, pc}

0001404c <__sclose>:
   1404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14050:	f000 b816 	b.w	14080 <_close_r>

00014054 <_write_r>:
   14054:	b570      	push	{r4, r5, r6, lr}
   14056:	460d      	mov	r5, r1
   14058:	4c08      	ldr	r4, [pc, #32]	; (1407c <_write_r+0x28>)
   1405a:	4611      	mov	r1, r2
   1405c:	4606      	mov	r6, r0
   1405e:	461a      	mov	r2, r3
   14060:	4628      	mov	r0, r5
   14062:	2300      	movs	r3, #0
   14064:	6023      	str	r3, [r4, #0]
   14066:	f7f6 ff9d 	bl	afa4 <_write>
   1406a:	1c43      	adds	r3, r0, #1
   1406c:	d000      	beq.n	14070 <_write_r+0x1c>
   1406e:	bd70      	pop	{r4, r5, r6, pc}
   14070:	6823      	ldr	r3, [r4, #0]
   14072:	2b00      	cmp	r3, #0
   14074:	d0fb      	beq.n	1406e <_write_r+0x1a>
   14076:	6033      	str	r3, [r6, #0]
   14078:	bd70      	pop	{r4, r5, r6, pc}
   1407a:	bf00      	nop
   1407c:	20014d64 	.word	0x20014d64

00014080 <_close_r>:
   14080:	b538      	push	{r3, r4, r5, lr}
   14082:	4c07      	ldr	r4, [pc, #28]	; (140a0 <_close_r+0x20>)
   14084:	2300      	movs	r3, #0
   14086:	4605      	mov	r5, r0
   14088:	4608      	mov	r0, r1
   1408a:	6023      	str	r3, [r4, #0]
   1408c:	f7f7 f966 	bl	b35c <_close>
   14090:	1c43      	adds	r3, r0, #1
   14092:	d000      	beq.n	14096 <_close_r+0x16>
   14094:	bd38      	pop	{r3, r4, r5, pc}
   14096:	6823      	ldr	r3, [r4, #0]
   14098:	2b00      	cmp	r3, #0
   1409a:	d0fb      	beq.n	14094 <_close_r+0x14>
   1409c:	602b      	str	r3, [r5, #0]
   1409e:	bd38      	pop	{r3, r4, r5, pc}
   140a0:	20014d64 	.word	0x20014d64

000140a4 <_fstat_r>:
   140a4:	b538      	push	{r3, r4, r5, lr}
   140a6:	460b      	mov	r3, r1
   140a8:	4c07      	ldr	r4, [pc, #28]	; (140c8 <_fstat_r+0x24>)
   140aa:	4605      	mov	r5, r0
   140ac:	4611      	mov	r1, r2
   140ae:	4618      	mov	r0, r3
   140b0:	2300      	movs	r3, #0
   140b2:	6023      	str	r3, [r4, #0]
   140b4:	f7f7 f955 	bl	b362 <_fstat>
   140b8:	1c43      	adds	r3, r0, #1
   140ba:	d000      	beq.n	140be <_fstat_r+0x1a>
   140bc:	bd38      	pop	{r3, r4, r5, pc}
   140be:	6823      	ldr	r3, [r4, #0]
   140c0:	2b00      	cmp	r3, #0
   140c2:	d0fb      	beq.n	140bc <_fstat_r+0x18>
   140c4:	602b      	str	r3, [r5, #0]
   140c6:	bd38      	pop	{r3, r4, r5, pc}
   140c8:	20014d64 	.word	0x20014d64

000140cc <__sfvwrite_r>:
   140cc:	6893      	ldr	r3, [r2, #8]
   140ce:	2b00      	cmp	r3, #0
   140d0:	f000 8102 	beq.w	142d8 <__sfvwrite_r+0x20c>
   140d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   140dc:	b29b      	uxth	r3, r3
   140de:	460c      	mov	r4, r1
   140e0:	0719      	lsls	r1, r3, #28
   140e2:	b083      	sub	sp, #12
   140e4:	4682      	mov	sl, r0
   140e6:	4690      	mov	r8, r2
   140e8:	d535      	bpl.n	14156 <__sfvwrite_r+0x8a>
   140ea:	6922      	ldr	r2, [r4, #16]
   140ec:	b39a      	cbz	r2, 14156 <__sfvwrite_r+0x8a>
   140ee:	f013 0202 	ands.w	r2, r3, #2
   140f2:	f8d8 6000 	ldr.w	r6, [r8]
   140f6:	d03d      	beq.n	14174 <__sfvwrite_r+0xa8>
   140f8:	2700      	movs	r7, #0
   140fa:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
   140fe:	f8d4 c020 	ldr.w	ip, [r4, #32]
   14102:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 143d0 <__sfvwrite_r+0x304>
   14106:	463d      	mov	r5, r7
   14108:	454d      	cmp	r5, r9
   1410a:	462b      	mov	r3, r5
   1410c:	463a      	mov	r2, r7
   1410e:	bf28      	it	cs
   14110:	464b      	movcs	r3, r9
   14112:	4661      	mov	r1, ip
   14114:	4650      	mov	r0, sl
   14116:	b1d5      	cbz	r5, 1414e <__sfvwrite_r+0x82>
   14118:	47d8      	blx	fp
   1411a:	2800      	cmp	r0, #0
   1411c:	f340 80d2 	ble.w	142c4 <__sfvwrite_r+0x1f8>
   14120:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14124:	1a1b      	subs	r3, r3, r0
   14126:	4407      	add	r7, r0
   14128:	1a2d      	subs	r5, r5, r0
   1412a:	f8c8 3008 	str.w	r3, [r8, #8]
   1412e:	2b00      	cmp	r3, #0
   14130:	f000 80b7 	beq.w	142a2 <__sfvwrite_r+0x1d6>
   14134:	f8d4 c020 	ldr.w	ip, [r4, #32]
   14138:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
   1413c:	454d      	cmp	r5, r9
   1413e:	462b      	mov	r3, r5
   14140:	463a      	mov	r2, r7
   14142:	bf28      	it	cs
   14144:	464b      	movcs	r3, r9
   14146:	4661      	mov	r1, ip
   14148:	4650      	mov	r0, sl
   1414a:	2d00      	cmp	r5, #0
   1414c:	d1e4      	bne.n	14118 <__sfvwrite_r+0x4c>
   1414e:	e9d6 7500 	ldrd	r7, r5, [r6]
   14152:	3608      	adds	r6, #8
   14154:	e7d8      	b.n	14108 <__sfvwrite_r+0x3c>
   14156:	4621      	mov	r1, r4
   14158:	4650      	mov	r0, sl
   1415a:	f7fe fe5f 	bl	12e1c <__swsetup_r>
   1415e:	2800      	cmp	r0, #0
   14160:	f040 8130 	bne.w	143c4 <__sfvwrite_r+0x2f8>
   14164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14168:	f8d8 6000 	ldr.w	r6, [r8]
   1416c:	b29b      	uxth	r3, r3
   1416e:	f013 0202 	ands.w	r2, r3, #2
   14172:	d1c1      	bne.n	140f8 <__sfvwrite_r+0x2c>
   14174:	f013 0901 	ands.w	r9, r3, #1
   14178:	f040 80b0 	bne.w	142dc <__sfvwrite_r+0x210>
   1417c:	68a7      	ldr	r7, [r4, #8]
   1417e:	6820      	ldr	r0, [r4, #0]
   14180:	464d      	mov	r5, r9
   14182:	2d00      	cmp	r5, #0
   14184:	d054      	beq.n	14230 <__sfvwrite_r+0x164>
   14186:	059a      	lsls	r2, r3, #22
   14188:	f140 80bc 	bpl.w	14304 <__sfvwrite_r+0x238>
   1418c:	42af      	cmp	r7, r5
   1418e:	46bb      	mov	fp, r7
   14190:	f200 80e7 	bhi.w	14362 <__sfvwrite_r+0x296>
   14194:	f413 6f90 	tst.w	r3, #1152	; 0x480
   14198:	d02f      	beq.n	141fa <__sfvwrite_r+0x12e>
   1419a:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   1419e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   141a2:	eba0 0b01 	sub.w	fp, r0, r1
   141a6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   141aa:	1c68      	adds	r0, r5, #1
   141ac:	107f      	asrs	r7, r7, #1
   141ae:	4458      	add	r0, fp
   141b0:	42b8      	cmp	r0, r7
   141b2:	463a      	mov	r2, r7
   141b4:	bf84      	itt	hi
   141b6:	4607      	movhi	r7, r0
   141b8:	463a      	movhi	r2, r7
   141ba:	055b      	lsls	r3, r3, #21
   141bc:	f140 80e9 	bpl.w	14392 <__sfvwrite_r+0x2c6>
   141c0:	4611      	mov	r1, r2
   141c2:	4650      	mov	r0, sl
   141c4:	f7fe fa4e 	bl	12664 <_malloc_r>
   141c8:	2800      	cmp	r0, #0
   141ca:	f000 80f5 	beq.w	143b8 <__sfvwrite_r+0x2ec>
   141ce:	465a      	mov	r2, fp
   141d0:	6921      	ldr	r1, [r4, #16]
   141d2:	9001      	str	r0, [sp, #4]
   141d4:	f7fe f906 	bl	123e4 <memcpy>
   141d8:	89a2      	ldrh	r2, [r4, #12]
   141da:	9b01      	ldr	r3, [sp, #4]
   141dc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   141e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   141e4:	81a2      	strh	r2, [r4, #12]
   141e6:	eba7 020b 	sub.w	r2, r7, fp
   141ea:	eb03 000b 	add.w	r0, r3, fp
   141ee:	6167      	str	r7, [r4, #20]
   141f0:	6123      	str	r3, [r4, #16]
   141f2:	6020      	str	r0, [r4, #0]
   141f4:	60a2      	str	r2, [r4, #8]
   141f6:	462f      	mov	r7, r5
   141f8:	46ab      	mov	fp, r5
   141fa:	465a      	mov	r2, fp
   141fc:	4649      	mov	r1, r9
   141fe:	f000 f967 	bl	144d0 <memmove>
   14202:	68a2      	ldr	r2, [r4, #8]
   14204:	6823      	ldr	r3, [r4, #0]
   14206:	1bd2      	subs	r2, r2, r7
   14208:	445b      	add	r3, fp
   1420a:	462f      	mov	r7, r5
   1420c:	60a2      	str	r2, [r4, #8]
   1420e:	6023      	str	r3, [r4, #0]
   14210:	2500      	movs	r5, #0
   14212:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14216:	1bdb      	subs	r3, r3, r7
   14218:	44b9      	add	r9, r7
   1421a:	f8c8 3008 	str.w	r3, [r8, #8]
   1421e:	2b00      	cmp	r3, #0
   14220:	d03f      	beq.n	142a2 <__sfvwrite_r+0x1d6>
   14222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14226:	68a7      	ldr	r7, [r4, #8]
   14228:	6820      	ldr	r0, [r4, #0]
   1422a:	b29b      	uxth	r3, r3
   1422c:	2d00      	cmp	r5, #0
   1422e:	d1aa      	bne.n	14186 <__sfvwrite_r+0xba>
   14230:	e9d6 9500 	ldrd	r9, r5, [r6]
   14234:	3608      	adds	r6, #8
   14236:	e7a4      	b.n	14182 <__sfvwrite_r+0xb6>
   14238:	f10b 0308 	add.w	r3, fp, #8
   1423c:	e953 6702 	ldrd	r6, r7, [r3, #-8]
   14240:	469b      	mov	fp, r3
   14242:	3308      	adds	r3, #8
   14244:	2f00      	cmp	r7, #0
   14246:	d0f9      	beq.n	1423c <__sfvwrite_r+0x170>
   14248:	463a      	mov	r2, r7
   1424a:	210a      	movs	r1, #10
   1424c:	4630      	mov	r0, r6
   1424e:	f000 f8ef 	bl	14430 <memchr>
   14252:	2800      	cmp	r0, #0
   14254:	d053      	beq.n	142fe <__sfvwrite_r+0x232>
   14256:	3001      	adds	r0, #1
   14258:	eba0 0906 	sub.w	r9, r0, r6
   1425c:	464b      	mov	r3, r9
   1425e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   14262:	6820      	ldr	r0, [r4, #0]
   14264:	42bb      	cmp	r3, r7
   14266:	bf28      	it	cs
   14268:	463b      	movcs	r3, r7
   1426a:	4288      	cmp	r0, r1
   1426c:	d903      	bls.n	14276 <__sfvwrite_r+0x1aa>
   1426e:	68a5      	ldr	r5, [r4, #8]
   14270:	4415      	add	r5, r2
   14272:	42ab      	cmp	r3, r5
   14274:	dc19      	bgt.n	142aa <__sfvwrite_r+0x1de>
   14276:	429a      	cmp	r2, r3
   14278:	dc7d      	bgt.n	14376 <__sfvwrite_r+0x2aa>
   1427a:	4613      	mov	r3, r2
   1427c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1427e:	6a21      	ldr	r1, [r4, #32]
   14280:	4632      	mov	r2, r6
   14282:	4650      	mov	r0, sl
   14284:	47a8      	blx	r5
   14286:	1e05      	subs	r5, r0, #0
   14288:	dd1c      	ble.n	142c4 <__sfvwrite_r+0x1f8>
   1428a:	ebb9 0905 	subs.w	r9, r9, r5
   1428e:	d06b      	beq.n	14368 <__sfvwrite_r+0x29c>
   14290:	2001      	movs	r0, #1
   14292:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14296:	1b5b      	subs	r3, r3, r5
   14298:	442e      	add	r6, r5
   1429a:	1b7f      	subs	r7, r7, r5
   1429c:	f8c8 3008 	str.w	r3, [r8, #8]
   142a0:	bb13      	cbnz	r3, 142e8 <__sfvwrite_r+0x21c>
   142a2:	2000      	movs	r0, #0
   142a4:	b003      	add	sp, #12
   142a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142aa:	4631      	mov	r1, r6
   142ac:	462a      	mov	r2, r5
   142ae:	f000 f90f 	bl	144d0 <memmove>
   142b2:	6823      	ldr	r3, [r4, #0]
   142b4:	442b      	add	r3, r5
   142b6:	6023      	str	r3, [r4, #0]
   142b8:	4621      	mov	r1, r4
   142ba:	4650      	mov	r0, sl
   142bc:	f7fe fec4 	bl	13048 <_fflush_r>
   142c0:	2800      	cmp	r0, #0
   142c2:	d0e2      	beq.n	1428a <__sfvwrite_r+0x1be>
   142c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   142c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   142cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142d0:	81a3      	strh	r3, [r4, #12]
   142d2:	b003      	add	sp, #12
   142d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d8:	2000      	movs	r0, #0
   142da:	4770      	bx	lr
   142dc:	4633      	mov	r3, r6
   142de:	4691      	mov	r9, r2
   142e0:	4610      	mov	r0, r2
   142e2:	4617      	mov	r7, r2
   142e4:	464e      	mov	r6, r9
   142e6:	469b      	mov	fp, r3
   142e8:	2f00      	cmp	r7, #0
   142ea:	d0a5      	beq.n	14238 <__sfvwrite_r+0x16c>
   142ec:	2800      	cmp	r0, #0
   142ee:	d1b5      	bne.n	1425c <__sfvwrite_r+0x190>
   142f0:	463a      	mov	r2, r7
   142f2:	210a      	movs	r1, #10
   142f4:	4630      	mov	r0, r6
   142f6:	f000 f89b 	bl	14430 <memchr>
   142fa:	2800      	cmp	r0, #0
   142fc:	d1ab      	bne.n	14256 <__sfvwrite_r+0x18a>
   142fe:	1c7b      	adds	r3, r7, #1
   14300:	4699      	mov	r9, r3
   14302:	e7ac      	b.n	1425e <__sfvwrite_r+0x192>
   14304:	6923      	ldr	r3, [r4, #16]
   14306:	4283      	cmp	r3, r0
   14308:	d315      	bcc.n	14336 <__sfvwrite_r+0x26a>
   1430a:	6961      	ldr	r1, [r4, #20]
   1430c:	42a9      	cmp	r1, r5
   1430e:	d812      	bhi.n	14336 <__sfvwrite_r+0x26a>
   14310:	4b2e      	ldr	r3, [pc, #184]	; (143cc <__sfvwrite_r+0x300>)
   14312:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   14314:	429d      	cmp	r5, r3
   14316:	bf94      	ite	ls
   14318:	462b      	movls	r3, r5
   1431a:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
   1431e:	464a      	mov	r2, r9
   14320:	fb93 f3f1 	sdiv	r3, r3, r1
   14324:	4650      	mov	r0, sl
   14326:	fb01 f303 	mul.w	r3, r1, r3
   1432a:	6a21      	ldr	r1, [r4, #32]
   1432c:	47b8      	blx	r7
   1432e:	1e07      	subs	r7, r0, #0
   14330:	ddc8      	ble.n	142c4 <__sfvwrite_r+0x1f8>
   14332:	1bed      	subs	r5, r5, r7
   14334:	e76d      	b.n	14212 <__sfvwrite_r+0x146>
   14336:	42af      	cmp	r7, r5
   14338:	bf28      	it	cs
   1433a:	462f      	movcs	r7, r5
   1433c:	463a      	mov	r2, r7
   1433e:	4649      	mov	r1, r9
   14340:	f000 f8c6 	bl	144d0 <memmove>
   14344:	68a3      	ldr	r3, [r4, #8]
   14346:	6822      	ldr	r2, [r4, #0]
   14348:	1bdb      	subs	r3, r3, r7
   1434a:	443a      	add	r2, r7
   1434c:	60a3      	str	r3, [r4, #8]
   1434e:	6022      	str	r2, [r4, #0]
   14350:	2b00      	cmp	r3, #0
   14352:	d1ee      	bne.n	14332 <__sfvwrite_r+0x266>
   14354:	4621      	mov	r1, r4
   14356:	4650      	mov	r0, sl
   14358:	f7fe fe76 	bl	13048 <_fflush_r>
   1435c:	2800      	cmp	r0, #0
   1435e:	d0e8      	beq.n	14332 <__sfvwrite_r+0x266>
   14360:	e7b0      	b.n	142c4 <__sfvwrite_r+0x1f8>
   14362:	462f      	mov	r7, r5
   14364:	46ab      	mov	fp, r5
   14366:	e748      	b.n	141fa <__sfvwrite_r+0x12e>
   14368:	4621      	mov	r1, r4
   1436a:	4650      	mov	r0, sl
   1436c:	f7fe fe6c 	bl	13048 <_fflush_r>
   14370:	2800      	cmp	r0, #0
   14372:	d08e      	beq.n	14292 <__sfvwrite_r+0x1c6>
   14374:	e7a6      	b.n	142c4 <__sfvwrite_r+0x1f8>
   14376:	461a      	mov	r2, r3
   14378:	4631      	mov	r1, r6
   1437a:	9301      	str	r3, [sp, #4]
   1437c:	f000 f8a8 	bl	144d0 <memmove>
   14380:	9b01      	ldr	r3, [sp, #4]
   14382:	68a1      	ldr	r1, [r4, #8]
   14384:	6822      	ldr	r2, [r4, #0]
   14386:	1ac9      	subs	r1, r1, r3
   14388:	441a      	add	r2, r3
   1438a:	60a1      	str	r1, [r4, #8]
   1438c:	6022      	str	r2, [r4, #0]
   1438e:	461d      	mov	r5, r3
   14390:	e77b      	b.n	1428a <__sfvwrite_r+0x1be>
   14392:	4650      	mov	r0, sl
   14394:	f000 f904 	bl	145a0 <_realloc_r>
   14398:	4603      	mov	r3, r0
   1439a:	2800      	cmp	r0, #0
   1439c:	f47f af23 	bne.w	141e6 <__sfvwrite_r+0x11a>
   143a0:	6921      	ldr	r1, [r4, #16]
   143a2:	4650      	mov	r0, sl
   143a4:	f7fe f908 	bl	125b8 <_free_r>
   143a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   143ac:	220c      	movs	r2, #12
   143ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   143b2:	f8ca 2000 	str.w	r2, [sl]
   143b6:	e787      	b.n	142c8 <__sfvwrite_r+0x1fc>
   143b8:	230c      	movs	r3, #12
   143ba:	f8ca 3000 	str.w	r3, [sl]
   143be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   143c2:	e781      	b.n	142c8 <__sfvwrite_r+0x1fc>
   143c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   143c8:	e76c      	b.n	142a4 <__sfvwrite_r+0x1d8>
   143ca:	bf00      	nop
   143cc:	7ffffffe 	.word	0x7ffffffe
   143d0:	7ffffc00 	.word	0x7ffffc00

000143d4 <_isatty_r>:
   143d4:	b538      	push	{r3, r4, r5, lr}
   143d6:	4c07      	ldr	r4, [pc, #28]	; (143f4 <_isatty_r+0x20>)
   143d8:	2300      	movs	r3, #0
   143da:	4605      	mov	r5, r0
   143dc:	4608      	mov	r0, r1
   143de:	6023      	str	r3, [r4, #0]
   143e0:	f7f6 ffc4 	bl	b36c <_isatty>
   143e4:	1c43      	adds	r3, r0, #1
   143e6:	d000      	beq.n	143ea <_isatty_r+0x16>
   143e8:	bd38      	pop	{r3, r4, r5, pc}
   143ea:	6823      	ldr	r3, [r4, #0]
   143ec:	2b00      	cmp	r3, #0
   143ee:	d0fb      	beq.n	143e8 <_isatty_r+0x14>
   143f0:	602b      	str	r3, [r5, #0]
   143f2:	bd38      	pop	{r3, r4, r5, pc}
   143f4:	20014d64 	.word	0x20014d64

000143f8 <_lseek_r>:
   143f8:	b570      	push	{r4, r5, r6, lr}
   143fa:	460d      	mov	r5, r1
   143fc:	4c08      	ldr	r4, [pc, #32]	; (14420 <_lseek_r+0x28>)
   143fe:	4611      	mov	r1, r2
   14400:	4606      	mov	r6, r0
   14402:	461a      	mov	r2, r3
   14404:	4628      	mov	r0, r5
   14406:	2300      	movs	r3, #0
   14408:	6023      	str	r3, [r4, #0]
   1440a:	f7f6 ffb1 	bl	b370 <_lseek>
   1440e:	1c43      	adds	r3, r0, #1
   14410:	d000      	beq.n	14414 <_lseek_r+0x1c>
   14412:	bd70      	pop	{r4, r5, r6, pc}
   14414:	6823      	ldr	r3, [r4, #0]
   14416:	2b00      	cmp	r3, #0
   14418:	d0fb      	beq.n	14412 <_lseek_r+0x1a>
   1441a:	6033      	str	r3, [r6, #0]
   1441c:	bd70      	pop	{r4, r5, r6, pc}
   1441e:	bf00      	nop
   14420:	20014d64 	.word	0x20014d64
	...

00014430 <memchr>:
   14430:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   14434:	2a10      	cmp	r2, #16
   14436:	db2b      	blt.n	14490 <memchr+0x60>
   14438:	f010 0f07 	tst.w	r0, #7
   1443c:	d008      	beq.n	14450 <memchr+0x20>
   1443e:	f810 3b01 	ldrb.w	r3, [r0], #1
   14442:	3a01      	subs	r2, #1
   14444:	428b      	cmp	r3, r1
   14446:	d02d      	beq.n	144a4 <memchr+0x74>
   14448:	f010 0f07 	tst.w	r0, #7
   1444c:	b342      	cbz	r2, 144a0 <memchr+0x70>
   1444e:	d1f6      	bne.n	1443e <memchr+0xe>
   14450:	b4f0      	push	{r4, r5, r6, r7}
   14452:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   14456:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1445a:	f022 0407 	bic.w	r4, r2, #7
   1445e:	f07f 0700 	mvns.w	r7, #0
   14462:	2300      	movs	r3, #0
   14464:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   14468:	3c08      	subs	r4, #8
   1446a:	ea85 0501 	eor.w	r5, r5, r1
   1446e:	ea86 0601 	eor.w	r6, r6, r1
   14472:	fa85 f547 	uadd8	r5, r5, r7
   14476:	faa3 f587 	sel	r5, r3, r7
   1447a:	fa86 f647 	uadd8	r6, r6, r7
   1447e:	faa5 f687 	sel	r6, r5, r7
   14482:	b98e      	cbnz	r6, 144a8 <memchr+0x78>
   14484:	d1ee      	bne.n	14464 <memchr+0x34>
   14486:	bcf0      	pop	{r4, r5, r6, r7}
   14488:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1448c:	f002 0207 	and.w	r2, r2, #7
   14490:	b132      	cbz	r2, 144a0 <memchr+0x70>
   14492:	f810 3b01 	ldrb.w	r3, [r0], #1
   14496:	3a01      	subs	r2, #1
   14498:	ea83 0301 	eor.w	r3, r3, r1
   1449c:	b113      	cbz	r3, 144a4 <memchr+0x74>
   1449e:	d1f8      	bne.n	14492 <memchr+0x62>
   144a0:	2000      	movs	r0, #0
   144a2:	4770      	bx	lr
   144a4:	3801      	subs	r0, #1
   144a6:	4770      	bx	lr
   144a8:	2d00      	cmp	r5, #0
   144aa:	bf06      	itte	eq
   144ac:	4635      	moveq	r5, r6
   144ae:	3803      	subeq	r0, #3
   144b0:	3807      	subne	r0, #7
   144b2:	f015 0f01 	tst.w	r5, #1
   144b6:	d107      	bne.n	144c8 <memchr+0x98>
   144b8:	3001      	adds	r0, #1
   144ba:	f415 7f80 	tst.w	r5, #256	; 0x100
   144be:	bf02      	ittt	eq
   144c0:	3001      	addeq	r0, #1
   144c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   144c6:	3001      	addeq	r0, #1
   144c8:	bcf0      	pop	{r4, r5, r6, r7}
   144ca:	3801      	subs	r0, #1
   144cc:	4770      	bx	lr
   144ce:	bf00      	nop

000144d0 <memmove>:
   144d0:	4288      	cmp	r0, r1
   144d2:	b4f0      	push	{r4, r5, r6, r7}
   144d4:	d90d      	bls.n	144f2 <memmove+0x22>
   144d6:	188b      	adds	r3, r1, r2
   144d8:	4283      	cmp	r3, r0
   144da:	d90a      	bls.n	144f2 <memmove+0x22>
   144dc:	1884      	adds	r4, r0, r2
   144de:	b132      	cbz	r2, 144ee <memmove+0x1e>
   144e0:	4622      	mov	r2, r4
   144e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   144e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   144ea:	4299      	cmp	r1, r3
   144ec:	d1f9      	bne.n	144e2 <memmove+0x12>
   144ee:	bcf0      	pop	{r4, r5, r6, r7}
   144f0:	4770      	bx	lr
   144f2:	2a0f      	cmp	r2, #15
   144f4:	d80e      	bhi.n	14514 <memmove+0x44>
   144f6:	4603      	mov	r3, r0
   144f8:	1e54      	subs	r4, r2, #1
   144fa:	2a00      	cmp	r2, #0
   144fc:	d0f7      	beq.n	144ee <memmove+0x1e>
   144fe:	3401      	adds	r4, #1
   14500:	440c      	add	r4, r1
   14502:	3b01      	subs	r3, #1
   14504:	f811 2b01 	ldrb.w	r2, [r1], #1
   14508:	f803 2f01 	strb.w	r2, [r3, #1]!
   1450c:	42a1      	cmp	r1, r4
   1450e:	d1f9      	bne.n	14504 <memmove+0x34>
   14510:	bcf0      	pop	{r4, r5, r6, r7}
   14512:	4770      	bx	lr
   14514:	ea40 0301 	orr.w	r3, r0, r1
   14518:	079b      	lsls	r3, r3, #30
   1451a:	d13b      	bne.n	14594 <memmove+0xc4>
   1451c:	f1a2 0710 	sub.w	r7, r2, #16
   14520:	093f      	lsrs	r7, r7, #4
   14522:	f101 0620 	add.w	r6, r1, #32
   14526:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   1452a:	f101 0310 	add.w	r3, r1, #16
   1452e:	f100 0410 	add.w	r4, r0, #16
   14532:	f853 5c10 	ldr.w	r5, [r3, #-16]
   14536:	f844 5c10 	str.w	r5, [r4, #-16]
   1453a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
   1453e:	f844 5c0c 	str.w	r5, [r4, #-12]
   14542:	f853 5c08 	ldr.w	r5, [r3, #-8]
   14546:	f844 5c08 	str.w	r5, [r4, #-8]
   1454a:	f853 5c04 	ldr.w	r5, [r3, #-4]
   1454e:	f844 5c04 	str.w	r5, [r4, #-4]
   14552:	3310      	adds	r3, #16
   14554:	42b3      	cmp	r3, r6
   14556:	f104 0410 	add.w	r4, r4, #16
   1455a:	d1ea      	bne.n	14532 <memmove+0x62>
   1455c:	1c7b      	adds	r3, r7, #1
   1455e:	011b      	lsls	r3, r3, #4
   14560:	f012 0f0c 	tst.w	r2, #12
   14564:	4419      	add	r1, r3
   14566:	f002 050f 	and.w	r5, r2, #15
   1456a:	4403      	add	r3, r0
   1456c:	d015      	beq.n	1459a <memmove+0xca>
   1456e:	3d04      	subs	r5, #4
   14570:	08ad      	lsrs	r5, r5, #2
   14572:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
   14576:	1f1c      	subs	r4, r3, #4
   14578:	460e      	mov	r6, r1
   1457a:	f856 7b04 	ldr.w	r7, [r6], #4
   1457e:	f844 7f04 	str.w	r7, [r4, #4]!
   14582:	4564      	cmp	r4, ip
   14584:	d1f9      	bne.n	1457a <memmove+0xaa>
   14586:	3501      	adds	r5, #1
   14588:	00ad      	lsls	r5, r5, #2
   1458a:	442b      	add	r3, r5
   1458c:	4429      	add	r1, r5
   1458e:	f002 0203 	and.w	r2, r2, #3
   14592:	e7b1      	b.n	144f8 <memmove+0x28>
   14594:	1e54      	subs	r4, r2, #1
   14596:	4603      	mov	r3, r0
   14598:	e7b1      	b.n	144fe <memmove+0x2e>
   1459a:	462a      	mov	r2, r5
   1459c:	e7ac      	b.n	144f8 <memmove+0x28>
   1459e:	bf00      	nop

000145a0 <_realloc_r>:
   145a0:	b309      	cbz	r1, 145e6 <_realloc_r+0x46>
   145a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145a4:	4614      	mov	r4, r2
   145a6:	b1ca      	cbz	r2, 145dc <_realloc_r+0x3c>
   145a8:	4606      	mov	r6, r0
   145aa:	460d      	mov	r5, r1
   145ac:	f000 f834 	bl	14618 <_malloc_usable_size_r>
   145b0:	42a0      	cmp	r0, r4
   145b2:	d302      	bcc.n	145ba <_realloc_r+0x1a>
   145b4:	462f      	mov	r7, r5
   145b6:	4638      	mov	r0, r7
   145b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145ba:	4621      	mov	r1, r4
   145bc:	4630      	mov	r0, r6
   145be:	f7fe f851 	bl	12664 <_malloc_r>
   145c2:	4607      	mov	r7, r0
   145c4:	2800      	cmp	r0, #0
   145c6:	d0f6      	beq.n	145b6 <_realloc_r+0x16>
   145c8:	4622      	mov	r2, r4
   145ca:	4629      	mov	r1, r5
   145cc:	f7fd ff0a 	bl	123e4 <memcpy>
   145d0:	4630      	mov	r0, r6
   145d2:	4629      	mov	r1, r5
   145d4:	f7fd fff0 	bl	125b8 <_free_r>
   145d8:	4638      	mov	r0, r7
   145da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145dc:	4627      	mov	r7, r4
   145de:	f7fd ffeb 	bl	125b8 <_free_r>
   145e2:	4638      	mov	r0, r7
   145e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145e6:	4611      	mov	r1, r2
   145e8:	f7fe b83c 	b.w	12664 <_malloc_r>

000145ec <_read_r>:
   145ec:	b570      	push	{r4, r5, r6, lr}
   145ee:	460d      	mov	r5, r1
   145f0:	4c08      	ldr	r4, [pc, #32]	; (14614 <_read_r+0x28>)
   145f2:	4611      	mov	r1, r2
   145f4:	4606      	mov	r6, r0
   145f6:	461a      	mov	r2, r3
   145f8:	4628      	mov	r0, r5
   145fa:	2300      	movs	r3, #0
   145fc:	6023      	str	r3, [r4, #0]
   145fe:	f7f8 f923 	bl	c848 <_read>
   14602:	1c43      	adds	r3, r0, #1
   14604:	d000      	beq.n	14608 <_read_r+0x1c>
   14606:	bd70      	pop	{r4, r5, r6, pc}
   14608:	6823      	ldr	r3, [r4, #0]
   1460a:	2b00      	cmp	r3, #0
   1460c:	d0fb      	beq.n	14606 <_read_r+0x1a>
   1460e:	6033      	str	r3, [r6, #0]
   14610:	bd70      	pop	{r4, r5, r6, pc}
   14612:	bf00      	nop
   14614:	20014d64 	.word	0x20014d64

00014618 <_malloc_usable_size_r>:
   14618:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1461c:	1f18      	subs	r0, r3, #4
   1461e:	2b00      	cmp	r3, #0
   14620:	bfbc      	itt	lt
   14622:	580b      	ldrlt	r3, [r1, r0]
   14624:	18c0      	addlt	r0, r0, r3
   14626:	4770      	bx	lr
   14628:	6d617246 	.word	0x6d617246
   1462c:	74532065 	.word	0x74532065
   14630:	20747261 	.word	0x20747261
   14634:	7366664f 	.word	0x7366664f
   14638:	7b007465 	.word	0x7b007465
   1463c:	70797422 	.word	0x70797422
   14640:	223a2265 	.word	0x223a2265
   14644:	4e524157 	.word	0x4e524157
   14648:	22474e49 	.word	0x22474e49
   1464c:	6422202c 	.word	0x6422202c
   14650:	22617461 	.word	0x22617461
   14654:	225b203a 	.word	0x225b203a
   14658:	5d227325 	.word	0x5d227325
   1465c:	000a0d7d 	.word	0x000a0d7d
   14660:	6e6e6f43 	.word	0x6e6e6f43
   14664:	00746365 	.word	0x00746365
   14668:	7974227b 	.word	0x7974227b
   1466c:	3a226570 	.word	0x3a226570
   14670:	41572220 	.word	0x41572220
   14674:	4e494e52 	.word	0x4e494e52
   14678:	202c2247 	.word	0x202c2247
   1467c:	74616422 	.word	0x74616422
   14680:	203a2261 	.word	0x203a2261
   14684:	6e55225b 	.word	0x6e55225b
   14688:	776f6e6b 	.word	0x776f6e6b
   1468c:	73654d20 	.word	0x73654d20
   14690:	65676173 	.word	0x65676173
   14694:	70795420 	.word	0x70795420
   14698:	7d5d2265 	.word	0x7d5d2265
   1469c:	227b000d 	.word	0x227b000d
   146a0:	65707974 	.word	0x65707974
   146a4:	22203a22 	.word	0x22203a22
   146a8:	4e524157 	.word	0x4e524157
   146ac:	22474e49 	.word	0x22474e49
   146b0:	6422202c 	.word	0x6422202c
   146b4:	22617461 	.word	0x22617461
   146b8:	225b203a 	.word	0x225b203a
   146bc:	61766e49 	.word	0x61766e49
   146c0:	2064696c 	.word	0x2064696c
   146c4:	63656843 	.word	0x63656843
   146c8:	6d75736b 	.word	0x6d75736b
   146cc:	0d7d5d22 	.word	0x0d7d5d22
   146d0:	6d695400 	.word	0x6d695400
   146d4:	74756f65 	.word	0x74756f65
   146d8:	73694420 	.word	0x73694420
   146dc:	6e6e6f63 	.word	0x6e6e6f63
   146e0:	20746365 	.word	0x20746365
   146e4:	65522026 	.word	0x65522026
   146e8:	20746573 	.word	0x20746573
   146ec:	65636552 	.word	0x65636552
   146f0:	72657669 	.word	0x72657669
   146f4:	6d695400 	.word	0x6d695400
   146f8:	74756f65 	.word	0x74756f65
   146fc:	52202620 	.word	0x52202620
   14700:	74657365 	.word	0x74657365
   14704:	63655220 	.word	0x63655220
   14708:	65766965 	.word	0x65766965
   1470c:	63250072 	.word	0x63250072
   14710:	63256325 	.word	0x63256325
   14714:	30256325 	.word	0x30256325
   14718:	30257832 	.word	0x30257832
   1471c:	30257832 	.word	0x30257832
   14720:	63257832 	.word	0x63257832
   14724:	000a3030 	.word	0x000a3030
   14728:	30256325 	.word	0x30256325
   1472c:	2e5f7833 	.word	0x2e5f7833
   14730:	2e2e2e2e 	.word	0x2e2e2e2e
   14734:	2e2e2e2e 	.word	0x2e2e2e2e
   14738:	2e2e2e2e 	.word	0x2e2e2e2e
   1473c:	2e2e2e2e 	.word	0x2e2e2e2e
   14740:	2e2e2e2e 	.word	0x2e2e2e2e
   14744:	2e2e2e2e 	.word	0x2e2e2e2e
   14748:	2e2e2e2e 	.word	0x2e2e2e2e
   1474c:	252e2e2e 	.word	0x252e2e2e
   14750:	63250063 	.word	0x63250063
   14754:	78333025 	.word	0x78333025
   14758:	2e2e2e5f 	.word	0x2e2e2e5f
   1475c:	2e2e2e2e 	.word	0x2e2e2e2e
   14760:	0063252e 	.word	0x0063252e
   14764:	30256325 	.word	0x30256325
   14768:	2e5f7833 	.word	0x2e5f7833
   1476c:	0063252e 	.word	0x0063252e
   14770:	30256325 	.word	0x30256325
   14774:	2e5f7833 	.word	0x2e5f7833
   14778:	2e2e2e2e 	.word	0x2e2e2e2e
   1477c:	0063252e 	.word	0x0063252e
   14780:	7974227b 	.word	0x7974227b
   14784:	3a226570 	.word	0x3a226570
   14788:	43574822 	.word	0x43574822
   1478c:	2c224746 	.word	0x2c224746
   14790:	61642220 	.word	0x61642220
   14794:	3a226174 	.word	0x3a226174
   14798:	64252220 	.word	0x64252220
   1479c:	0a0d7d22 	.word	0x0a0d7d22
   147a0:	204f4e00 	.word	0x204f4e00
   147a4:	52455355 	.word	0x52455355
   147a8:	574f5220 	.word	0x574f5220
   147ac:	45484320 	.word	0x45484320
   147b0:	00214b43 	.word	0x00214b43
   147b4:	55206f4e 	.word	0x55206f4e
   147b8:	2074696e 	.word	0x2074696e
   147bc:	74736554 	.word	0x74736554
   147c0:	206f4e00 	.word	0x206f4e00
   147c4:	64726148 	.word	0x64726148
   147c8:	65726177 	.word	0x65726177
   147cc:	73655420 	.word	0x73655420
   147d0:	65520074 	.word	0x65520074
   147d4:	6e696461 	.word	0x6e696461
   147d8:	73552067 	.word	0x73552067
   147dc:	52207265 	.word	0x52207265
   147e0:	7b00776f 	.word	0x7b00776f
   147e4:	70797422 	.word	0x70797422
   147e8:	223a2265 	.word	0x223a2265
   147ec:	22474f4c 	.word	0x22474f4c
   147f0:	6422202c 	.word	0x6422202c
   147f4:	22617461 	.word	0x22617461
   147f8:	225b203a 	.word	0x225b203a
   147fc:	5d227325 	.word	0x5d227325
   14800:	000a0d7d 	.word	0x000a0d7d
   14804:	69726556 	.word	0x69726556
   14808:	6e697966 	.word	0x6e697966
   1480c:	73552067 	.word	0x73552067
   14810:	52207265 	.word	0x52207265
   14814:	5500776f 	.word	0x5500776f
   14818:	74616470 	.word	0x74616470
   1481c:	20676e69 	.word	0x20676e69
   14820:	72657355 	.word	0x72657355
   14824:	776f5220 	.word	0x776f5220
   14828:	73795300 	.word	0x73795300
   1482c:	206d6574 	.word	0x206d6574
   14830:	65736552 	.word	0x65736552
   14834:	6e550074 	.word	0x6e550074
   14838:	6e616863 	.word	0x6e616863
   1483c:	20646567 	.word	0x20646567
   14840:	72657355 	.word	0x72657355
   14844:	776f5220 	.word	0x776f5220
   14848:	00          	.byte	0x00
   14849:	02          	.byte	0x02
   1484a:	3530      	.short	0x3530
   1484c:	305a6530 	.word	0x305a6530
   14850:	63303030 	.word	0x63303030
   14854:	00033030 	.word	0x00033030
   14858:	30353002 	.word	0x30353002
   1485c:	30305a65 	.word	0x30305a65
   14860:	5a383030 	.word	0x5a383030
   14864:	30020334 	.word	0x30020334
   14868:	5a653033 	.word	0x5a653033
   1486c:	02000335 	.word	0x02000335
   14870:	65303530 	.word	0x65303530
   14874:	3030305a 	.word	0x3030305a
   14878:	345a3930 	.word	0x345a3930
   1487c:	30020003 	.word	0x30020003
   14880:	5a653035 	.word	0x5a653035
   14884:	30303030 	.word	0x30303030
   14888:	03345a61 	.word	0x03345a61
   1488c:	30333002 	.word	0x30333002
   14890:	03305a65 	.word	0x03305a65
   14894:	35300200 	.word	0x35300200
   14898:	305a6530 	.word	0x305a6530
   1489c:	62303030 	.word	0x62303030
   148a0:	0203345a 	.word	0x0203345a
   148a4:	66303330 	.word	0x66303330
   148a8:	0003305a 	.word	0x0003305a
   148ac:	50204955 	.word	0x50204955
   148b0:	7265776f 	.word	0x7265776f
   148b4:	616e4520 	.word	0x616e4520
   148b8:	00656c62 	.word	0x00656c62
   148bc:	74696e49 	.word	0x74696e49
   148c0:	646f4d20 	.word	0x646f4d20
   148c4:	3a656c75 	.word	0x3a656c75
   148c8:	314f5020 	.word	0x314f5020
   148cc:	6e490036 	.word	0x6e490036
   148d0:	4d207469 	.word	0x4d207469
   148d4:	6c75646f 	.word	0x6c75646f
   148d8:	42203a65 	.word	0x42203a65
   148dc:	00363155 	.word	0x00363155
   148e0:	74696e49 	.word	0x74696e49
   148e4:	646f4d20 	.word	0x646f4d20
   148e8:	3a656c75 	.word	0x3a656c75
   148ec:	46425020 	.word	0x46425020
   148f0:	6e490034 	.word	0x6e490034
   148f4:	4d207469 	.word	0x4d207469
   148f8:	6c75646f 	.word	0x6c75646f
   148fc:	45203a65 	.word	0x45203a65
   14900:	0036314e 	.word	0x0036314e
   14904:	74696e49 	.word	0x74696e49
   14908:	646f4d20 	.word	0x646f4d20
   1490c:	3a656c75 	.word	0x3a656c75
   14910:	6b6e5520 	.word	0x6b6e5520
   14914:	6e776f6e 	.word	0x6e776f6e
   14918:	646f4d20 	.word	0x646f4d20
   1491c:	00656c75 	.word	0x00656c75
   14920:	46435748 	.word	0x46435748
   14924:	694d2047 	.word	0x694d2047
   14928:	74616d73 	.word	0x74616d73
   1492c:	6863      	.short	0x6863
   1492e:	00          	.byte	0x00
   1492f:	0c          	.byte	0x0c
   14930:	080f0e0d 	.word	0x080f0e0d
   14934:	040b0a09 	.word	0x040b0a09
   14938:	00070605 	.word	0x00070605
   1493c:	0201      	.short	0x0201
   1493e:	03          	.byte	0x03
   1493f:	0c          	.byte	0x0c
   14940:	080f0e0d 	.word	0x080f0e0d
   14944:	040b0a09 	.word	0x040b0a09
   14948:	00070605 	.word	0x00070605
   1494c:	0201      	.short	0x0201
   1494e:	03          	.byte	0x03
   1494f:	0c          	.byte	0x0c
   14950:	080f0e0d 	.word	0x080f0e0d
   14954:	040b0a09 	.word	0x040b0a09
   14958:	00070605 	.word	0x00070605
   1495c:	0201      	.short	0x0201
   1495e:	03          	.byte	0x03
   1495f:	0c          	.byte	0x0c
   14960:	080f0e0d 	.word	0x080f0e0d
   14964:	040b0a09 	.word	0x040b0a09
   14968:	00070605 	.word	0x00070605
   1496c:	0201      	.short	0x0201
   1496e:	03          	.byte	0x03
   1496f:	25          	.byte	0x25
   14970:	2e632563 	.word	0x2e632563
   14974:	2e2e2e2e 	.word	0x2e2e2e2e
   14978:	2e2e2e2e 	.word	0x2e2e2e2e
   1497c:	252e2e2e 	.word	0x252e2e2e
   14980:	0063      	.short	0x0063
   14982:	6325      	.short	0x6325
   14984:	78333025 	.word	0x78333025
   14988:	00632565 	.word	0x00632565
   1498c:	30256325 	.word	0x30256325
   14990:	2e5f7833 	.word	0x2e5f7833
   14994:	252e2e2e 	.word	0x252e2e2e
   14998:	63250063 	.word	0x63250063
   1499c:	78333025 	.word	0x78333025
   149a0:	20230065 	.word	0x20230065
   149a4:	00232000 	.word	0x00232000
   149a8:	78383025 	.word	0x78383025
   149ac:	69726700 	.word	0x69726700
   149b0:	79735f64 	.word	0x79735f64
   149b4:	633a3a73 	.word	0x633a3a73
   149b8:	6b636568 	.word	0x6b636568
   149bc:	006d7573 	.word	0x006d7573
   149c0:	63656843 	.word	0x63656843
   149c4:	6d75736b 	.word	0x6d75736b
   149c8:	61655220 	.word	0x61655220
   149cc:	61432f64 	.word	0x61432f64
   149d0:	6c75636c 	.word	0x6c75636c
   149d4:	00657461 	.word	0x00657461
   149d8:	6b636170 	.word	0x6b636170
   149dc:	257b7465 	.word	0x257b7465
   149e0:	25202c64 	.word	0x25202c64
   149e4:	25202c64 	.word	0x25202c64
   149e8:	25202c64 	.word	0x25202c64
   149ec:	25202c64 	.word	0x25202c64
   149f0:	25202c64 	.word	0x25202c64
   149f4:	25202c64 	.word	0x25202c64
   149f8:	25202c64 	.word	0x25202c64
   149fc:	52207d64 	.word	0x52207d64
   14a00:	3a646165 	.word	0x3a646165
   14a04:	2c642520 	.word	0x2c642520
   14a08:	6c614320 	.word	0x6c614320
   14a0c:	616c7563 	.word	0x616c7563
   14a10:	203a6574 	.word	0x203a6574
   14a14:	43006425 	.word	0x43006425
   14a18:	6b636568 	.word	0x6b636568
   14a1c:	206d7573 	.word	0x206d7573
   14a20:	74697257 	.word	0x74697257
   14a24:	61432f65 	.word	0x61432f65
   14a28:	6c75636c 	.word	0x6c75636c
   14a2c:	00657461 	.word	0x00657461
   14a30:	63656843 	.word	0x63656843
   14a34:	6d75736b 	.word	0x6d75736b
   14a38:	65764f20 	.word	0x65764f20
   14a3c:	69727772 	.word	0x69727772
   14a40:	50006574 	.word	0x50006574
   14a44:	70617261 	.word	0x70617261
   14a48:	69727061 	.word	0x69727061
   14a4c:	0073616b 	.word	0x0073616b
   14a50:	30256325 	.word	0x30256325
   14a54:	2e5f7833 	.word	0x2e5f7833
   14a58:	2e2e2e2e 	.word	0x2e2e2e2e
   14a5c:	3002002e 	.word	0x3002002e
   14a60:	42653134 	.word	0x42653134
   14a64:	5a313030 	.word	0x5a313030
   14a68:	5a325a31 	.word	0x5a325a31
   14a6c:	02000333 	.word	0x02000333
   14a70:	65303030 	.word	0x65303030
   14a74:	30393030 	.word	0x30393030
   14a78:	32423042 	.word	0x32423042
   14a7c:	34300203 	.word	0x34300203
   14a80:	30426530 	.word	0x30426530
   14a84:	32423130 	.word	0x32423130
   14a88:	30020003 	.word	0x30020003
   14a8c:	30653030 	.word	0x30653030
   14a90:	42303830 	.word	0x42303830
   14a94:	03324230 	.word	0x03324230
   14a98:	30343002 	.word	0x30343002
   14a9c:	30304265 	.word	0x30304265
   14aa0:	03324231 	.word	0x03324231
   14aa4:	30300200 	.word	0x30300200
   14aa8:	30306530 	.word	0x30306530
   14aac:	30503062 	.word	0x30503062
   14ab0:	02033250 	.word	0x02033250
   14ab4:	65303430 	.word	0x65303430
   14ab8:	31303050 	.word	0x31303050
   14abc:	00033250 	.word	0x00033250
   14ac0:	31343002 	.word	0x31343002
   14ac4:	30304565 	.word	0x30304565
   14ac8:	5a315a31 	.word	0x5a315a31
   14acc:	03335a32 	.word	0x03335a32
   14ad0:	31343002 	.word	0x31343002
   14ad4:	30304265 	.word	0x30304265
   14ad8:	5a315a32 	.word	0x5a315a32
   14adc:	03335a32 	.word	0x03335a32
   14ae0:	30300200 	.word	0x30300200
   14ae4:	30306530 	.word	0x30306530
   14ae8:	30453062 	.word	0x30453062
   14aec:	02033245 	.word	0x02033245
   14af0:	65303430 	.word	0x65303430
   14af4:	31303045 	.word	0x31303045
   14af8:	00033245 	.word	0x00033245
   14afc:	30303002 	.word	0x30303002
   14b00:	62303065 	.word	0x62303065
   14b04:	45304530 	.word	0x45304530
   14b08:	02000335 	.word	0x02000335
   14b0c:	65303030 	.word	0x65303030
   14b10:	30393030 	.word	0x30393030
   14b14:	32423042 	.word	0x32423042
   14b18:	34300203 	.word	0x34300203
   14b1c:	30426530 	.word	0x30426530
   14b20:	32423230 	.word	0x32423230
   14b24:	30020003 	.word	0x30020003
   14b28:	30653030 	.word	0x30653030
   14b2c:	42303830 	.word	0x42303830
   14b30:	03324230 	.word	0x03324230
   14b34:	30343002 	.word	0x30343002
   14b38:	30304265 	.word	0x30304265
   14b3c:	03324232 	.word	0x03324232
   14b40:	67655200 	.word	0x67655200
   14b44:	65747369 	.word	0x65747369
   14b48:	63412072 	.word	0x63412072
   14b4c:	6e6f6974 	.word	0x6e6f6974
   14b50:	65764500 	.word	0x65764500
   14b54:	4e20746e 	.word	0x4e20746e
   14b58:	4620746f 	.word	0x4620746f
   14b5c:	646e756f 	.word	0x646e756f
   14b60:	73452000 	.word	0x73452000
   14b64:	65706163 	.word	0x65706163
   14b68:	68432064 	.word	0x68432064
   14b6c:	46207261 	.word	0x46207261
   14b70:	646e756f 	.word	0x646e756f
   14b74:	30020020 	.word	0x30020020
   14b78:	5a653035 	.word	0x5a653035
   14b7c:	30304230 	.word	0x30304230
   14b80:	03303030 	.word	0x03303030
   14b84:	35300200 	.word	0x35300200
   14b88:	305a6530 	.word	0x305a6530
   14b8c:	34303042 	.word	0x34303042
   14b90:	00033242 	.word	0x00033242
   14b94:	30353002 	.word	0x30353002
   14b98:	42305a65 	.word	0x42305a65
   14b9c:	42353030 	.word	0x42353030
   14ba0:	02000332 	.word	0x02000332
   14ba4:	65303530 	.word	0x65303530
   14ba8:	3050305a 	.word	0x3050305a
   14bac:	30303030 	.word	0x30303030
   14bb0:	30020003 	.word	0x30020003
   14bb4:	5a653035 	.word	0x5a653035
   14bb8:	30305030 	.word	0x30305030
   14bbc:	03325031 	.word	0x03325031
   14bc0:	35300200 	.word	0x35300200
   14bc4:	305a6530 	.word	0x305a6530
   14bc8:	30303045 	.word	0x30303045
   14bcc:	00033030 	.word	0x00033030
   14bd0:	30353002 	.word	0x30353002
   14bd4:	45305a65 	.word	0x45305a65
   14bd8:	45313030 	.word	0x45313030
   14bdc:	02000335 	.word	0x02000335
   14be0:	65303530 	.word	0x65303530
   14be4:	3045305a 	.word	0x3045305a
   14be8:	35456430 	.word	0x35456430
   14bec:	00000003 	.word	0x00000003
   14bf0:	200010dc 	.word	0x200010dc
   14bf4:	200115fc 	.word	0x200115fc
   14bf8:	2000b660 	.word	0x2000b660
   14bfc:	20008260 	.word	0x20008260
   14c00:	682f2e2e 	.word	0x682f2e2e
   14c04:	732f6c61 	.word	0x732f6c61
   14c08:	682f6372 	.word	0x682f6372
   14c0c:	695f6c61 	.word	0x695f6c61
   14c10:	00632e6f 	.word	0x00632e6f
   14c14:	682f2e2e 	.word	0x682f2e2e
   14c18:	732f6c61 	.word	0x732f6c61
   14c1c:	682f6372 	.word	0x682f6372
   14c20:	695f6c61 	.word	0x695f6c61
   14c24:	6d5f6332 	.word	0x6d5f6332
   14c28:	7973615f 	.word	0x7973615f
   14c2c:	632e636e 	.word	0x632e636e
   14c30:	00          	.byte	0x00
   14c31:	2e          	.byte	0x2e
   14c32:	2f2e      	.short	0x2f2e
   14c34:	2f6c7068 	.word	0x2f6c7068
   14c38:	2f746477 	.word	0x2f746477
   14c3c:	5f6c7068 	.word	0x5f6c7068
   14c40:	2e746477 	.word	0x2e746477
   14c44:	0063      	.short	0x0063
   14c46:	2e2e      	.short	0x2e2e
   14c48:	6c61682f 	.word	0x6c61682f
   14c4c:	6372732f 	.word	0x6372732f
   14c50:	6c61682f 	.word	0x6c61682f
   14c54:	6970735f 	.word	0x6970735f
   14c58:	645f6d5f 	.word	0x645f6d5f
   14c5c:	632e616d 	.word	0x632e616d
   14c60:	00000000 	.word	0x00000000

00014c64 <user_mux_confs>:
	...
   14c90:	04030201 04030201 00000000 00000000     ................
	...

00014ca8 <channel_confs>:
   14ca8:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

00014ce8 <interrupt_cfg>:
   14ce8:	00000002 00000002 00000002 00000002     ................
	...
   14d68:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   14d78:	69707371 2e00632e 70682f2e 766e2f6c     qspi.c.../hpl/nv
   14d88:	7274636d 70682f6c 766e5f6c 7274636d     mctrl/hpl_nvmctr
   14d98:	00632e6c 682f2e2e 732f6c61 682f6372     l.c.../hal/src/h
   14da8:	745f6c61 72656d69 0000632e              al_timer.c..

00014db4 <_usb_ep_cfgs>:
   14db4:	20000c08 00000000 00000040 00000000     ... ....@.......
	...
   14dcc:	20000c00 00000000 00000008 20000bc0     ... ........... 
   14ddc:	20000bb8 00080040 00000000 00000000     ... @...........
	...
   14df4:	20000b78 00400000                       x.. ..@.

00014dfc <mouse_report_desc>:
   14dfc:	02090105 010901a1 090500a1 03290119     ..............).
   14e0c:	01250015 03950175 05750281 01810195     ..%.u.....u.....
   14e1c:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
   14e2c:	c0c00681                                ....

00014e30 <_cfgs>:
   14e30:	00200600 08068000 00200400 08068000     .. ....... .....
   14e40:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
   14e60:	00200b00 14000003 00200a00 08000002     .. ....... .....
   14e70:	00201300 14000003 00000000 00000000     .. .............
	...
   14f20:	00005400 1c000000 00005300 0c000000     .T.......S......
   14f30:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
   14f40:	615f6364 636e7973 2e00632e 61682f2e     dc_async.c.../ha
   14f50:	72732f6c 61682f63 61725f6c 735f646e     l/src/hal_rand_s
   14f60:	2e636e79 2e2e0063 6c70682f 6e72742f     ync.c.../hpl/trn
   14f70:	70682f67 72745f6c 632e676e               g/hpl_trng.c.

00014f7d <keyboard_report_desc>:
   14f7d:	06090105 070501a1 e729e019 01250015     ..........)...%.
   14f8d:	08950175 01810281 65290019 65250015     u.........)e..%e
   14f9d:	06950875 08050081 05290119 01250015     u.........)...%.
   14fad:	05950175 03950291 2ec00191 61682f2e     u............/ha
   14fbd:	72732f6c 61682f63 73755f6c 5f747261     l/src/hal_usart_
   14fcd:	636e7973 2e00632e 61682f2e 72732f6c     sync.c.../hal/sr
   14fdd:	61682f63 6c665f6c 2e687361 2e2e0063     c/hal_flash.c...
   14fed:	6c61682f 6372732f 6c61682f 6970735f     /hal/src/hal_spi
   14ffd:	615f6d5f 636e7973 2e00632e 61682f2e     _m_async.c.../ha
   1500d:	72732f6c 61682f63 72635f6c 79735f63     l/src/hal_crc_sy
   1501d:	632e636e 64694d00 20203a69 203a7045     nc.c.Midi:  Ep: 
   1502d:	202c6425 72656658 6425203a 6f43202c     %d, Xfer: %d, Co
   1503d:	3a746e75 20642520                        unt: %d ...

00015048 <CSWTCH.37>:
   15048:	010101ed                                 .......

0001504f <CSWTCH.40>:
   1504f:	010100ed 53f00201 74726174 696e4920     .......Start Ini
   1505f:	6c616974 64657a69 31354400 696e4920     tialized.D51 Ini
   1506f:	6f430074 736f706d 20657469 69766544     t.Composite Devi
   1507f:	49206563 6974696e 7a696c61 47006465     ce Initialized.G
   1508f:	20646972 75646f4d 4920656c 6974696e     rid Module Initi
   1509f:	7a696c61 45006465 7265746e 20676e69     alized.Entering 
   150af:	6e69614d 6f6f4c20 6f430070 736f706d     Main Loop.Compos
   150bf:	20657469 69766544 43206563 656e6e6f     ite Device Conne
   150cf:	64657463 44494d00 25203a49 20783230     cted.MIDI: %02x 
   150df:	78323025 32302520 30252078 000a7832     %02x %02x %02x..
   150ef:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
   150ff:	6974752f 6c5f736c 2e747369 2e2e0063     /utils_list.c...
   1510f:	6c70682f 6374722f 6c70682f 6374725f     /hpl/rtc/hpl_rtc
   1511f:	2e00632e 61682f2e 6e692f6c 64756c63     .c.../hal/includ
   1512f:	61682f65 64775f6c 00682e74 682f2e2e     e/hal_wdt.h.../h
   1513f:	732f6c61 682f6372 755f6c61 74726173     al/src/hal_usart
   1514f:	7973615f 632e636e 2f2e2e00 2f6c7068     _async.c.../hpl/
   1515f:	63726573 682f6d6f 735f6c70 6f637265     sercom/hpl_serco
   1516f:	00632e6d 00300000 00340040 01200040     m.c...0.@.4.@. .
   1517f:	01400041 00000041 00040043 00080043     A.@.A...C...C...
   1518f:	000c0043                                 C...C

00015194 <sercomspi_regs>:
   15194:	3020000c 00020000 00000000 01ff0005     .. 0............
   151a4:	20000c03 00000000 00000000 ff000600     ... ............
   151b4:	00000701                                ....

000151b8 <_i2cms>:
   151b8:	00000005 00200014 00000100 0000e6e5     ...... .........
   151c8:	00d70000 02dc6c00                       .....l..

000151d0 <_usarts>:
   151d0:	00000000 40100004 00030000 00700002     .......@......p.
   151e0:	0000aaaa 00000000 00000001 40100004     ...............@
   151f0:	00030000 00700002 0000aaaa 00000000     ......p.........
   15200:	00000002 40100004 00030000 00700002     .......@......p.
   15210:	00005555 00000000 00000004 40100004     UU.............@
   15220:	00030000 00700002 0000aaaa 00000000     ......p.........
   15230:	00000006 40100004 00030000 00700002     .......@......p.
   15240:	0000aaaa 00000000 682f2e2e 752f6c61     ........../hal/u
   15250:	736c6974 6372732f 6974752f 725f736c     tils/src/utils_r
   15260:	62676e69 65666675 00632e72 682f2e2e     ingbuffer.c.../h
   15270:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
   15280:	2e616d64 2e2e0063 6c70682f 6364612f     dma.c.../hpl/adc
   15290:	6c70682f 6364615f 0000632e              /hpl_adc.c..

0001529c <_adcs>:
   1529c:	01000000 0003000c 00041807 00000000     ................
   152ac:	0014080b 00010000 000c0100 18040003     ................
   152bc:	00000004 080b0000 00000014 752f2e2e     ............../u
   152cc:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
   152dc:	2e2e0063 6c70682f 2f63742f 5f6c7068     c.../hpl/tc/hpl_
   152ec:	632e6374 00000000 40003800 40003c00     tc.c.....8.@.<.@
   152fc:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   1530c:	43001400 43001800                       ...C...C

00015314 <_tcs>:
   15314:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
   15324:	00000000 006c0001 00000308 00000021     ......l.....!...
   15334:	00003a98 00000000 006d0002 00000308     .:........m.....
   15344:	00000021 00003a98 00000000 006e0003     !....:........n.
   15354:	00000308 00000021 00003a98 00000000     ....!....:......

00015364 <_global_impure_ptr>:
   15364:	2000054c                                L.. 

00015368 <__sf_fake_stderr>:
	...

00015388 <__sf_fake_stdout>:
	...

000153a8 <__sf_fake_stdin>:
	...
   153c8:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
   153d8:	00004746 33323130 37363534 42413938     FG..0123456789AB
   153e8:	46454443 00000000 33323130 37363534     CDEF....01234567
   153f8:	62613938 66656463 00000000              89abcdef....

00015404 <_init>:
   15404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15406:	bf00      	nop
   15408:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1540a:	bc08      	pop	{r3}
   1540c:	469e      	mov	lr, r3
   1540e:	4770      	bx	lr

00015410 <__frame_dummy_init_array_entry>:
   15410:	42cd 0000                                   .B..

00015414 <_fini>:
   15414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15416:	bf00      	nop
   15418:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1541a:	bc08      	pop	{r3}
   1541c:	469e      	mov	lr, r3
   1541e:	4770      	bx	lr

00015420 <__do_global_dtors_aux_fini_array_entry>:
   15420:	42a5 0000                                   .B..
