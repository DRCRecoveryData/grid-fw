
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001235c  00004000  00004000  00004000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005ac  20000000  0001635c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000205ac  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000205ac  2**0
                  CONTENTS
  4 .bss          00014888  200005b0  00016910  000205b0  2**4
                  ALLOC
  5 .stack        00010000  20014e38  0002b198  000205b0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY
  7 .comment      000000a7  00000000  00000000  000205da  2**0
                  CONTENTS, READONLY
  8 .debug_info   000c2b03  00000000  00000000  00020681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00015160  00000000  00000000  000e3184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00032726  00000000  00000000  000f82e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002cc0  00000000  00000000  0012aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00008278  00000000  00000000  0012d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004c00d  00000000  00000000  00135948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00058a96  00000000  00000000  00181955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00121fcc  00000000  00000000  001da3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007c08  00000000  00000000  002fc3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00004000 <exception_table>:
    4000:	38 4e 02 20 29 1a 01 00 25 1a 01 00 25 1a 01 00     8N. )...%...%...
    4010:	25 1a 01 00 25 1a 01 00 25 1a 01 00 00 00 00 00     %...%...%.......
	...
    402c:	25 1a 01 00 25 1a 01 00 00 00 00 00 25 1a 01 00     %...%.......%...
    403c:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    404c:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    405c:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    406c:	89 f5 00 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     ....%...%...%...
    407c:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    408c:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    409c:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    40ac:	25 1a 01 00 25 1a 01 00 31 bf 00 00 5d bf 00 00     %...%...1...]...
    40bc:	6d d6 00 00 75 d6 00 00 7d d6 00 00 85 d6 00 00     m...u...}.......
    40cc:	8d d6 00 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     ....%...%...%...
    40dc:	25 1a 01 00 25 1a 01 00 25 1a 01 00 00 00 00 00     %...%...%.......
	...
    40f4:	e5 d1 00 00 f9 0d 01 00 09 0e 01 00 11 0e 01 00     ................
    4104:	19 0e 01 00 21 0e 01 00 31 0e 01 00 39 0e 01 00     ....!...1...9...
    4114:	41 0e 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     A...%...%...%...
    4124:	25 1a 01 00 49 0e 01 00 8d 0e 01 00 95 0e 01 00     %...I...........
    4134:	9d 0e 01 00 a5 0e 01 00 b5 0e 01 00 bd 0e 01 00     ................
    4144:	c5 0e 01 00 cd 0e 01 00 5d 0f 01 00 65 0f 01 00     ........]...e...
    4154:	6d 0f 01 00 75 0f 01 00 85 0f 01 00 8d 0f 01 00     m...u...........
    4164:	95 0f 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     ....%...%...%...
    4174:	25 1a 01 00 00 00 00 00 00 00 00 00 f1 d0 00 00     %...............
    4184:	f9 d0 00 00 01 d1 00 00 09 d1 00 00 00 00 00 00     ................
    4194:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    41a4:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    41b4:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    41c4:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    41d4:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    41e4:	25 1a 01 00 25 1a 01 00 f9 23 01 00 09 24 01 00     %...%....#...$..
    41f4:	19 24 01 00 29 24 01 00 25 1a 01 00 25 1a 01 00     .$..)$..%...%...
    4204:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    4214:	25 1a 01 00 f5 19 01 00 05 1a 01 00 0d 1a 01 00     %...............
    4224:	1d 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     ....%...%...%...
    4234:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    4244:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...
    4254:	25 1a 01 00 25 1a 01 00 25 1a 01 00 25 1a 01 00     %...%...%...%...

00004264 <deregister_tm_clones>:
    4264:	4803      	ldr	r0, [pc, #12]	; (4274 <deregister_tm_clones+0x10>)
    4266:	4b04      	ldr	r3, [pc, #16]	; (4278 <deregister_tm_clones+0x14>)
    4268:	4283      	cmp	r3, r0
    426a:	d002      	beq.n	4272 <deregister_tm_clones+0xe>
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <deregister_tm_clones+0x18>)
    426e:	b103      	cbz	r3, 4272 <deregister_tm_clones+0xe>
    4270:	4718      	bx	r3
    4272:	4770      	bx	lr
    4274:	0001635c 	.word	0x0001635c
    4278:	0001635c 	.word	0x0001635c
    427c:	00000000 	.word	0x00000000

00004280 <register_tm_clones>:
    4280:	4805      	ldr	r0, [pc, #20]	; (4298 <register_tm_clones+0x18>)
    4282:	4906      	ldr	r1, [pc, #24]	; (429c <register_tm_clones+0x1c>)
    4284:	1a0b      	subs	r3, r1, r0
    4286:	0fd9      	lsrs	r1, r3, #31
    4288:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    428c:	1049      	asrs	r1, r1, #1
    428e:	d002      	beq.n	4296 <register_tm_clones+0x16>
    4290:	4b03      	ldr	r3, [pc, #12]	; (42a0 <register_tm_clones+0x20>)
    4292:	b103      	cbz	r3, 4296 <register_tm_clones+0x16>
    4294:	4718      	bx	r3
    4296:	4770      	bx	lr
    4298:	0001635c 	.word	0x0001635c
    429c:	0001635c 	.word	0x0001635c
    42a0:	00000000 	.word	0x00000000

000042a4 <__do_global_dtors_aux>:
    42a4:	b510      	push	{r4, lr}
    42a6:	4c06      	ldr	r4, [pc, #24]	; (42c0 <__do_global_dtors_aux+0x1c>)
    42a8:	7823      	ldrb	r3, [r4, #0]
    42aa:	b943      	cbnz	r3, 42be <__do_global_dtors_aux+0x1a>
    42ac:	f7ff ffda 	bl	4264 <deregister_tm_clones>
    42b0:	4b04      	ldr	r3, [pc, #16]	; (42c4 <__do_global_dtors_aux+0x20>)
    42b2:	b113      	cbz	r3, 42ba <__do_global_dtors_aux+0x16>
    42b4:	4804      	ldr	r0, [pc, #16]	; (42c8 <__do_global_dtors_aux+0x24>)
    42b6:	f3af 8000 	nop.w
    42ba:	2301      	movs	r3, #1
    42bc:	7023      	strb	r3, [r4, #0]
    42be:	bd10      	pop	{r4, pc}
    42c0:	200005b0 	.word	0x200005b0
    42c4:	00000000 	.word	0x00000000
    42c8:	0001635c 	.word	0x0001635c

000042cc <frame_dummy>:
    42cc:	b508      	push	{r3, lr}
    42ce:	4b04      	ldr	r3, [pc, #16]	; (42e0 <frame_dummy+0x14>)
    42d0:	b11b      	cbz	r3, 42da <frame_dummy+0xe>
    42d2:	4904      	ldr	r1, [pc, #16]	; (42e4 <frame_dummy+0x18>)
    42d4:	4804      	ldr	r0, [pc, #16]	; (42e8 <frame_dummy+0x1c>)
    42d6:	f3af 8000 	nop.w
    42da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    42de:	e7cf      	b.n	4280 <register_tm_clones>
    42e0:	00000000 	.word	0x00000000
    42e4:	200005b4 	.word	0x200005b4
    42e8:	0001635c 	.word	0x0001635c

000042ec <audio_midi_req>:
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */

static int32_t audio_midi_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    42ec:	b410      	push	{r4}
		
	//return ERR_NOT_FOUND;	
		
	if ((0x81 == req->bmRequestType) && (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1])) {
    42ee:	780b      	ldrb	r3, [r1, #0]
    42f0:	2b81      	cmp	r3, #129	; 0x81
    42f2:	d110      	bne.n	4316 <audio_midi_req+0x2a>
    42f4:	4b1a      	ldr	r3, [pc, #104]	; (4360 <audio_midi_req+0x74>)
    42f6:	888a      	ldrh	r2, [r1, #4]
    42f8:	7919      	ldrb	r1, [r3, #4]
    42fa:	4291      	cmp	r1, r2
    42fc:	4619      	mov	r1, r3
    42fe:	d002      	beq.n	4306 <audio_midi_req+0x1a>
    4300:	795b      	ldrb	r3, [r3, #5]
    4302:	4293      	cmp	r3, r2
    4304:	d128      	bne.n	4358 <audio_midi_req+0x6c>
	return usbdc_xfer(ep, _audiodf_midi_funcd.audio_desc, _audiodf_midi_funcd.audio_desc[0], false);
    4306:	6809      	ldr	r1, [r1, #0]
    4308:	780a      	ldrb	r2, [r1, #0]
    430a:	2300      	movs	r3, #0
			switch (req->bRequest) {
				case 0x03: /* Get Protocol */
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
				case 0x0B: /* Set Protocol */
				_audiodf_midi_funcd.protocol = req->wValue;
				return usbdc_xfer(ep, NULL, 0, 0);
    430c:	4c15      	ldr	r4, [pc, #84]	; (4364 <audio_midi_req+0x78>)
    430e:	46a4      	mov	ip, r4
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    4310:	f85d 4b04 	ldr.w	r4, [sp], #4
				return usbdc_xfer(ep, NULL, 0, 0);
    4314:	4760      	bx	ip
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    4316:	f3c3 1341 	ubfx	r3, r3, #5, #2
    431a:	2b01      	cmp	r3, #1
    431c:	d11c      	bne.n	4358 <audio_midi_req+0x6c>
		if (req->wIndex == _audiodf_midi_funcd.func_iface[0] || req->wIndex == _audiodf_midi_funcd.func_iface[1]) {
    431e:	4b10      	ldr	r3, [pc, #64]	; (4360 <audio_midi_req+0x74>)
    4320:	888a      	ldrh	r2, [r1, #4]
    4322:	791c      	ldrb	r4, [r3, #4]
    4324:	4294      	cmp	r4, r2
    4326:	461c      	mov	r4, r3
    4328:	d002      	beq.n	4330 <audio_midi_req+0x44>
    432a:	795b      	ldrb	r3, [r3, #5]
    432c:	4293      	cmp	r3, r2
    432e:	d113      	bne.n	4358 <audio_midi_req+0x6c>
			switch (req->bRequest) {
    4330:	784b      	ldrb	r3, [r1, #1]
    4332:	2b03      	cmp	r3, #3
    4334:	d006      	beq.n	4344 <audio_midi_req+0x58>
    4336:	2b0b      	cmp	r3, #11
    4338:	d008      	beq.n	434c <audio_midi_req+0x60>
    433a:	f06f 000c 	mvn.w	r0, #12
}
    433e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4342:	4770      	bx	lr
				return usbdc_xfer(ep, &_audiodf_midi_funcd.protocol, 1, 0);
    4344:	4908      	ldr	r1, [pc, #32]	; (4368 <audio_midi_req+0x7c>)
    4346:	2300      	movs	r3, #0
    4348:	2201      	movs	r2, #1
    434a:	e7df      	b.n	430c <audio_midi_req+0x20>
				_audiodf_midi_funcd.protocol = req->wValue;
    434c:	884b      	ldrh	r3, [r1, #2]
    434e:	7223      	strb	r3, [r4, #8]
				return usbdc_xfer(ep, NULL, 0, 0);
    4350:	2300      	movs	r3, #0
    4352:	461a      	mov	r2, r3
    4354:	4619      	mov	r1, r3
    4356:	e7d9      	b.n	430c <audio_midi_req+0x20>
			return ERR_NOT_FOUND; // Never hit breakpoint here
    4358:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    435c:	e7ef      	b.n	433e <audio_midi_req+0x52>
    435e:	bf00      	nop
    4360:	200005cc 	.word	0x200005cc
    4364:	00011c29 	.word	0x00011c29
    4368:	200005d4 	.word	0x200005d4

0000436c <audio_midi_ctrl>:
	switch (ctrl) {
    436c:	2901      	cmp	r1, #1
{
    436e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4372:	460d      	mov	r5, r1
    4374:	4614      	mov	r4, r2
	switch (ctrl) {
    4376:	d070      	beq.n	445a <audio_midi_ctrl+0xee>
    4378:	2902      	cmp	r1, #2
    437a:	f000 8092 	beq.w	44a2 <audio_midi_ctrl+0x136>
    437e:	2900      	cmp	r1, #0
    4380:	f040 8092 	bne.w	44a8 <audio_midi_ctrl+0x13c>
		return audio_midi_enable(drv, (struct usbd_descriptors *)param);
    4384:	6886      	ldr	r6, [r0, #8]
	ifc = desc->sod;
    4386:	f8df 8148 	ldr.w	r8, [pc, #328]	; 44d0 <audio_midi_ctrl+0x164>
    438a:	6810      	ldr	r0, [r2, #0]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    438c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 44d4 <audio_midi_ctrl+0x168>
    4390:	1d37      	adds	r7, r6, #4
		if (NULL == ifc) {
    4392:	b920      	cbnz	r0, 439e <audio_midi_ctrl+0x32>
			return ERR_NOT_FOUND;
    4394:	f06f 0009 	mvn.w	r0, #9
}
    4398:	b003      	add	sp, #12
    439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    439e:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    43a0:	7882      	ldrb	r2, [r0, #2]
		if (AUDIO_AC_SUBCLASS == ifc_desc.bInterfaceClass || AUDIO_MS_SUBCLASS == ifc_desc.bInterfaceClass) {			
    43a2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    43a6:	2b01      	cmp	r3, #1
    43a8:	d1f4      	bne.n	4394 <audio_midi_ctrl+0x28>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    43aa:	783b      	ldrb	r3, [r7, #0]
    43ac:	429a      	cmp	r2, r3
    43ae:	d07e      	beq.n	44ae <audio_midi_ctrl+0x142>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    43b0:	2bff      	cmp	r3, #255	; 0xff
    43b2:	d17f      	bne.n	44b4 <audio_midi_ctrl+0x148>
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    43b4:	2d01      	cmp	r5, #1
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    43b6:	f807 2b01 	strb.w	r2, [r7], #1
		if (i == 1){ // i==1 because only the second interface has endpoint descriptors
    43ba:	d009      	beq.n	43d0 <audio_midi_ctrl+0x64>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);		
    43bc:	6823      	ldr	r3, [r4, #0]
    43be:	6861      	ldr	r1, [r4, #4]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    43c0:	7818      	ldrb	r0, [r3, #0]
    43c2:	2204      	movs	r2, #4
    43c4:	4418      	add	r0, r3
    43c6:	47c0      	blx	r8
	for (i=0; i<2; i++){
    43c8:	2d01      	cmp	r5, #1
    43ca:	d042      	beq.n	4452 <audio_midi_ctrl+0xe6>
    43cc:	2501      	movs	r5, #1
    43ce:	e7e0      	b.n	4392 <audio_midi_ctrl+0x26>
			ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    43d0:	6861      	ldr	r1, [r4, #4]
    43d2:	f8df a104 	ldr.w	sl, [pc, #260]	; 44d8 <audio_midi_ctrl+0x16c>
    43d6:	2205      	movs	r2, #5
    43d8:	47c0      	blx	r8
    43da:	4683      	mov	fp, r0
			while (NULL != ep) {
    43dc:	f1bb 0f00 	cmp.w	fp, #0
    43e0:	d0ec      	beq.n	43bc <audio_midi_ctrl+0x50>
				ep_desc.bEndpointAddress = ep[2];
    43e2:	f89b 2002 	ldrb.w	r2, [fp, #2]
    43e6:	f88d 2002 	strb.w	r2, [sp, #2]
				ep_desc.bmAttributes     = ep[3];
    43ea:	f89b 2003 	ldrb.w	r2, [fp, #3]
    43ee:	f88d 2003 	strb.w	r2, [sp, #3]
	return (ptr[0] + (ptr[1] << 8));
    43f2:	f89b 1005 	ldrb.w	r1, [fp, #5]
    43f6:	f89b 2004 	ldrb.w	r2, [fp, #4]
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    43fa:	4b31      	ldr	r3, [pc, #196]	; (44c0 <audio_midi_ctrl+0x154>)
    43fc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    4400:	b292      	uxth	r2, r2
				ep_desc.wMaxPacketSize   = usb_get_u16(ep + 4);
    4402:	f8ad 2004 	strh.w	r2, [sp, #4]
				usb_debug2[4] = ep_desc.wMaxPacketSize;
    4406:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    440a:	b2d2      	uxtb	r2, r2
    440c:	f889 2004 	strb.w	r2, [r9, #4]
				usb_debug2[0] = i;
    4410:	2201      	movs	r2, #1
    4412:	f889 2000 	strb.w	r2, [r9]
				if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    4416:	f89d 0002 	ldrb.w	r0, [sp, #2]
    441a:	f89d 1003 	ldrb.w	r1, [sp, #3]
    441e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4422:	b292      	uxth	r2, r2
    4424:	4798      	blx	r3
    4426:	2800      	cmp	r0, #0
    4428:	d147      	bne.n	44ba <audio_midi_ctrl+0x14e>
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    442a:	f89d 2002 	ldrb.w	r2, [sp, #2]
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    442e:	f89d 0002 	ldrb.w	r0, [sp, #2]
				if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    4432:	0613      	lsls	r3, r2, #24
					func_data->func_ep_in = ep_desc.bEndpointAddress;
    4434:	b2c0      	uxtb	r0, r0
    4436:	bf4c      	ite	mi
    4438:	71b0      	strbmi	r0, [r6, #6]
					func_data->func_ep_out = ep_desc.bEndpointAddress;
    443a:	71f0      	strbpl	r0, [r6, #7]
					usb_d_ep_enable(func_data->func_ep_out);
    443c:	47d0      	blx	sl
				desc->sod = ep;
    443e:	f8c4 b000 	str.w	fp, [r4]
	return (desc + usb_desc_len(desc));
    4442:	f89b 0000 	ldrb.w	r0, [fp]
				ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    4446:	6861      	ldr	r1, [r4, #4]
    4448:	4b1e      	ldr	r3, [pc, #120]	; (44c4 <audio_midi_ctrl+0x158>)
    444a:	4458      	add	r0, fp
    444c:	4798      	blx	r3
    444e:	4683      	mov	fp, r0
    4450:	e7c4      	b.n	43dc <audio_midi_ctrl+0x70>
	_audiodf_midi_funcd.enabled = true;
    4452:	4b1d      	ldr	r3, [pc, #116]	; (44c8 <audio_midi_ctrl+0x15c>)
	return ERR_NONE;
    4454:	2000      	movs	r0, #0
	_audiodf_midi_funcd.enabled = true;
    4456:	745d      	strb	r5, [r3, #17]
	return ERR_NONE;
    4458:	e79e      	b.n	4398 <audio_midi_ctrl+0x2c>
		return audio_midi_disable(drv, (struct usbd_descriptors *)param);
    445a:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    445c:	b12a      	cbz	r2, 446a <audio_midi_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    445e:	6813      	ldr	r3, [r2, #0]
		if ((AUDIO_AC_SUBCLASS != ifc_desc.bInterfaceClass) && (AUDIO_MS_SUBCLASS != ifc_desc.bInterfaceClass)) {
    4460:	795b      	ldrb	r3, [r3, #5]
    4462:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4466:	2b01      	cmp	r3, #1
    4468:	d194      	bne.n	4394 <audio_midi_ctrl+0x28>
	if (func_data->func_iface[0] != 0xFF) {
    446a:	792b      	ldrb	r3, [r5, #4]
	if (func_data->func_ep_in != 0xFF) {
    446c:	79a8      	ldrb	r0, [r5, #6]
	if (func_data->func_iface[0] != 0xFF) {
    446e:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[0] = 0xFF;
    4470:	bf1c      	itt	ne
    4472:	23ff      	movne	r3, #255	; 0xff
    4474:	712b      	strbne	r3, [r5, #4]
	if (func_data->func_iface[1] != 0xFF) {
    4476:	796b      	ldrb	r3, [r5, #5]
    4478:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface[1] = 0xFF;
    447a:	bf1c      	itt	ne
    447c:	23ff      	movne	r3, #255	; 0xff
    447e:	716b      	strbne	r3, [r5, #5]
	if (func_data->func_ep_in != 0xFF) {
    4480:	28ff      	cmp	r0, #255	; 0xff
    4482:	d003      	beq.n	448c <audio_midi_ctrl+0x120>
		usb_d_ep_deinit(func_data->func_ep_in);
    4484:	4b11      	ldr	r3, [pc, #68]	; (44cc <audio_midi_ctrl+0x160>)
    4486:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    4488:	23ff      	movs	r3, #255	; 0xff
    448a:	71ab      	strb	r3, [r5, #6]
	if (func_data->func_ep_out != 0xFF) {
    448c:	79e8      	ldrb	r0, [r5, #7]
    448e:	28ff      	cmp	r0, #255	; 0xff
    4490:	d003      	beq.n	449a <audio_midi_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    4492:	4b0e      	ldr	r3, [pc, #56]	; (44cc <audio_midi_ctrl+0x160>)
    4494:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    4496:	23ff      	movs	r3, #255	; 0xff
    4498:	71eb      	strb	r3, [r5, #7]
	_audiodf_midi_funcd.enabled = false;
    449a:	4b0b      	ldr	r3, [pc, #44]	; (44c8 <audio_midi_ctrl+0x15c>)
    449c:	2000      	movs	r0, #0
    449e:	7458      	strb	r0, [r3, #17]
	return ERR_NONE;
    44a0:	e77a      	b.n	4398 <audio_midi_ctrl+0x2c>
		return ERR_UNSUPPORTED_OP;
    44a2:	f06f 001a 	mvn.w	r0, #26
    44a6:	e777      	b.n	4398 <audio_midi_ctrl+0x2c>
	switch (ctrl) {
    44a8:	f06f 000c 	mvn.w	r0, #12
    44ac:	e774      	b.n	4398 <audio_midi_ctrl+0x2c>
				return ERR_ALREADY_INITIALIZED;
    44ae:	f06f 0011 	mvn.w	r0, #17
    44b2:	e771      	b.n	4398 <audio_midi_ctrl+0x2c>
				return ERR_NO_RESOURCE;
    44b4:	f06f 001b 	mvn.w	r0, #27
    44b8:	e76e      	b.n	4398 <audio_midi_ctrl+0x2c>
					return ERR_NOT_INITIALIZED;
    44ba:	f06f 0013 	mvn.w	r0, #19
    44be:	e76b      	b.n	4398 <audio_midi_ctrl+0x2c>
    44c0:	0000e8f9 	.word	0x0000e8f9
    44c4:	0000b6af 	.word	0x0000b6af
    44c8:	200005cc 	.word	0x200005cc
    44cc:	0000e95d 	.word	0x0000e95d
    44d0:	0000b695 	.word	0x0000b695
    44d4:	200010dc 	.word	0x200010dc
    44d8:	0000e989 	.word	0x0000e989

000044dc <audiodf_midi_init>:

/**
 * \brief Initialize the USB Audio Midi Function Driver
 */
int32_t audiodf_midi_init(void)
{
    44dc:	b508      	push	{r3, lr}
	
	
	if (usbdc_get_state() > USBD_S_POWER) {
    44de:	4b0a      	ldr	r3, [pc, #40]	; (4508 <audiodf_midi_init+0x2c>)
    44e0:	4798      	blx	r3
    44e2:	2801      	cmp	r0, #1
    44e4:	d80c      	bhi.n	4500 <audiodf_midi_init+0x24>
		return ERR_DENIED;
	}
	
	_audiodf_midi.ctrl      = audio_midi_ctrl;
    44e6:	4809      	ldr	r0, [pc, #36]	; (450c <audiodf_midi_init+0x30>)
    44e8:	4b09      	ldr	r3, [pc, #36]	; (4510 <audiodf_midi_init+0x34>)
	_audiodf_midi.func_data = &_audiodf_midi_funcd;
    44ea:	e9c0 3006 	strd	r3, r0, [r0, #24]
	
	usbdc_register_function(&_audiodf_midi);
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <audiodf_midi_init+0x38>)
    44f0:	3014      	adds	r0, #20
    44f2:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &audio_midi_req_h);
    44f4:	2001      	movs	r0, #1
    44f6:	4908      	ldr	r1, [pc, #32]	; (4518 <audiodf_midi_init+0x3c>)
    44f8:	4b08      	ldr	r3, [pc, #32]	; (451c <audiodf_midi_init+0x40>)
    44fa:	4798      	blx	r3
	return ERR_NONE;
    44fc:	2000      	movs	r0, #0
}
    44fe:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    4500:	f06f 0010 	mvn.w	r0, #16
    4504:	e7fb      	b.n	44fe <audiodf_midi_init+0x22>
    4506:	bf00      	nop
    4508:	00012061 	.word	0x00012061
    450c:	200005cc 	.word	0x200005cc
    4510:	0000436d 	.word	0x0000436d
    4514:	00012009 	.word	0x00012009
    4518:	20000000 	.word	0x20000000
    451c:	00011f81 	.word	0x00011f81

00004520 <audiodf_midi_write>:
}



int32_t audiodf_midi_write(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3)
{
    4520:	b410      	push	{r4}
		return ERR_DENIED;
	}
	
	// if previous xfer is completed
	
	_audiodf_midi_funcd.midi_report[0] = byte0;
    4522:	4c07      	ldr	r4, [pc, #28]	; (4540 <audiodf_midi_write+0x20>)
    4524:	7260      	strb	r0, [r4, #9]
	_audiodf_midi_funcd.midi_report[1] = byte1;
    4526:	72a1      	strb	r1, [r4, #10]
	_audiodf_midi_funcd.midi_report[2] = byte2;
    4528:	72e2      	strb	r2, [r4, #11]
	_audiodf_midi_funcd.midi_report[3] = byte3;
    452a:	7323      	strb	r3, [r4, #12]

	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    452c:	79a0      	ldrb	r0, [r4, #6]
    452e:	f104 0109 	add.w	r1, r4, #9
    4532:	4c04      	ldr	r4, [pc, #16]	; (4544 <audiodf_midi_write+0x24>)
    4534:	2300      	movs	r3, #0
    4536:	46a4      	mov	ip, r4
    4538:	2204      	movs	r2, #4
	
}
    453a:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_in, _audiodf_midi_funcd.midi_report, 4, false);
    453e:	4760      	bx	ip
    4540:	200005cc 	.word	0x200005cc
    4544:	00011c29 	.word	0x00011c29

00004548 <audiodf_midi_write_status>:

int32_t audiodf_midi_write_status(){
    4548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	
	struct usb_d_ep_status epstat;
	return usb_d_ep_get_status(_audiodf_midi_funcd.func_ep_in, &epstat);
    454a:	4b04      	ldr	r3, [pc, #16]	; (455c <audiodf_midi_write_status+0x14>)
    454c:	a901      	add	r1, sp, #4
    454e:	7998      	ldrb	r0, [r3, #6]
    4550:	4b03      	ldr	r3, [pc, #12]	; (4560 <audiodf_midi_write_status+0x18>)
    4552:	4798      	blx	r3
	
}
    4554:	b005      	add	sp, #20
    4556:	f85d fb04 	ldr.w	pc, [sp], #4
    455a:	bf00      	nop
    455c:	200005cc 	.word	0x200005cc
    4560:	0000eab1 	.word	0x0000eab1

00004564 <audiodf_midi_read>:



int32_t audiodf_midi_read(uint8_t *buf, uint32_t size)
{
    4564:	b410      	push	{r4}
    4566:	460a      	mov	r2, r1
	if (!audiodf_midi_is_enabled()) {
		return ERR_DENIED;
	}
		
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_out, buf, size, false);
    4568:	4c04      	ldr	r4, [pc, #16]	; (457c <audiodf_midi_read+0x18>)
    456a:	4601      	mov	r1, r0
    456c:	4804      	ldr	r0, [pc, #16]	; (4580 <audiodf_midi_read+0x1c>)
    456e:	46a4      	mov	ip, r4
    4570:	79c0      	ldrb	r0, [r0, #7]
}
    4572:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_audiodf_midi_funcd.func_ep_out, buf, size, false);
    4576:	2300      	movs	r3, #0
    4578:	4760      	bx	ip
    457a:	bf00      	nop
    457c:	00011c29 	.word	0x00011c29
    4580:	200005cc 	.word	0x200005cc

00004584 <audiodf_midi_register_callback>:


int32_t audiodf_midi_register_callback(enum audiodf_midi_cb_type cb_type, FUNC_PTR func)
{
    4584:	b510      	push	{r4, lr}
    4586:	460a      	mov	r2, r1
	switch (cb_type) {
    4588:	b120      	cbz	r0, 4594 <audiodf_midi_register_callback+0x10>
    458a:	2801      	cmp	r0, #1
    458c:	d009      	beq.n	45a2 <audiodf_midi_register_callback+0x1e>
    458e:	f06f 000c 	mvn.w	r0, #12
		break;
		default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
}
    4592:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    4594:	4b05      	ldr	r3, [pc, #20]	; (45ac <audiodf_midi_register_callback+0x28>)
    4596:	79d8      	ldrb	r0, [r3, #7]
    4598:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    459a:	4b05      	ldr	r3, [pc, #20]	; (45b0 <audiodf_midi_register_callback+0x2c>)
    459c:	4798      	blx	r3
	return ERR_NONE;
    459e:	2000      	movs	r0, #0
		break;
    45a0:	e7f7      	b.n	4592 <audiodf_midi_register_callback+0xe>
		usb_d_ep_register_callback(_audiodf_midi_funcd.func_ep_in, USB_D_EP_CB_XFER, func);
    45a2:	4b02      	ldr	r3, [pc, #8]	; (45ac <audiodf_midi_register_callback+0x28>)
    45a4:	2102      	movs	r1, #2
    45a6:	7998      	ldrb	r0, [r3, #6]
    45a8:	e7f7      	b.n	459a <audiodf_midi_register_callback+0x16>
    45aa:	bf00      	nop
    45ac:	200005cc 	.word	0x200005cc
    45b0:	0000eb71 	.word	0x0000eb71

000045b4 <grid_ain_channel_init>:

struct AIN_Channel* ain_channel_buffer;



uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45b4:	b570      	push	{r4, r5, r6, lr}
	instance->buffer_depth = buffer_depth;
	
	instance->result_format = result_format;
	instance->result_resolution = result_resolution;
	
	instance->result_average = 0;
    45b6:	2500      	movs	r5, #0
	instance->result_format = result_format;
    45b8:	7142      	strb	r2, [r0, #5]
	instance->result_resolution = result_resolution;
    45ba:	7183      	strb	r3, [r0, #6]
uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45bc:	4604      	mov	r4, r0
	
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45be:	4b0a      	ldr	r3, [pc, #40]	; (45e8 <grid_ain_channel_init+0x34>)
	instance->buffer_depth = buffer_depth;
    45c0:	7101      	strb	r1, [r0, #4]
	instance->result_average = 0;
    45c2:	8145      	strh	r5, [r0, #10]
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45c4:	0048      	lsls	r0, r1, #1
uint8_t grid_ain_channel_init(struct AIN_Channel* instance , uint8_t buffer_depth, uint8_t result_format, uint8_t result_resolution){
    45c6:	460e      	mov	r6, r1
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45c8:	4798      	blx	r3
	
	// Init the whole buffer with zeros
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45ca:	462b      	mov	r3, r5
	instance->buffer = malloc(instance->buffer_depth * sizeof(uint16_t));
    45cc:	6020      	str	r0, [r4, #0]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45ce:	462a      	mov	r2, r5
    45d0:	b2d9      	uxtb	r1, r3
    45d2:	428e      	cmp	r6, r1
    45d4:	d803      	bhi.n	45de <grid_ain_channel_init+0x2a>
		instance->buffer[i] = 0;
	}
	
	instance->result_changed = 0;
    45d6:	81a2      	strh	r2, [r4, #12]
	instance->result_value = 0;
    45d8:	8122      	strh	r2, [r4, #8]
		
	return 0;
}
    45da:	2000      	movs	r0, #0
    45dc:	bd70      	pop	{r4, r5, r6, pc}
		instance->buffer[i] = 0;
    45de:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	for(uint8_t i=0; i<instance->buffer_depth; i++){
    45e2:	3301      	adds	r3, #1
    45e4:	e7f4      	b.n	45d0 <grid_ain_channel_init+0x1c>
    45e6:	bf00      	nop
    45e8:	00012cb1 	.word	0x00012cb1

000045ec <grid_ain_init>:
	}
}


/** Initialize ain buffer for a given number of analog channels */
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    45ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45f0:	4605      	mov	r5, r0
    45f2:	4699      	mov	r9, r3
	
	// ain_channel_result_resolution = resolution
	
	
	// 2D buffer, example: 16 potentiometers, last 32 samples stored for each
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    45f4:	0100      	lsls	r0, r0, #4
    45f6:	4b0b      	ldr	r3, [pc, #44]	; (4624 <grid_ain_init+0x38>)
    45f8:	4e0b      	ldr	r6, [pc, #44]	; (4628 <grid_ain_init+0x3c>)

	for (uint8_t i=0; i<length; i++){
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    45fa:	f8df a030 	ldr.w	sl, [pc, #48]	; 462c <grid_ain_init+0x40>
uint8_t grid_ain_init(uint8_t length, uint8_t depth, uint8_t  format, uint8_t resolution){
    45fe:	460f      	mov	r7, r1
    4600:	4690      	mov	r8, r2
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    4602:	4798      	blx	r3
	for (uint8_t i=0; i<length; i++){
    4604:	2400      	movs	r4, #0
	ain_channel_buffer = (struct AIN_Channel*) malloc(length * sizeof(struct AIN_Channel));
    4606:	6030      	str	r0, [r6, #0]
	for (uint8_t i=0; i<length; i++){
    4608:	42a5      	cmp	r5, r4
    460a:	d102      	bne.n	4612 <grid_ain_init+0x26>
	}

	return 0;
}
    460c:	2000      	movs	r0, #0
    460e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		grid_ain_channel_init(&ain_channel_buffer[i], depth, format, resolution);
    4612:	6830      	ldr	r0, [r6, #0]
    4614:	464b      	mov	r3, r9
    4616:	eb00 1004 	add.w	r0, r0, r4, lsl #4
    461a:	4642      	mov	r2, r8
    461c:	4639      	mov	r1, r7
    461e:	47d0      	blx	sl
	for (uint8_t i=0; i<length; i++){
    4620:	3401      	adds	r4, #1
    4622:	e7f1      	b.n	4608 <grid_ain_init+0x1c>
    4624:	00012cb1 	.word	0x00012cb1
    4628:	20004044 	.word	0x20004044
    462c:	000045b5 	.word	0x000045b5

00004630 <grid_ain_add_sample>:

uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    4630:	4b30      	ldr	r3, [pc, #192]	; (46f4 <grid_ain_add_sample+0xc4>)
uint8_t grid_ain_add_sample(uint8_t channel, uint16_t value){
    4632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
    4636:	681a      	ldr	r2, [r3, #0]
    4638:	0104      	lsls	r4, r0, #4
    463a:	eb02 1300 	add.w	r3, r2, r0, lsl #4
	uint16_t maximum = 0;

	uint8_t minimum_index = 0;
	uint8_t maximum_index = 0;
	
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    463e:	5914      	ldr	r4, [r2, r4]
    4640:	f893 e004 	ldrb.w	lr, [r3, #4]
    4644:	2200      	movs	r2, #0
	uint8_t maximum_index = 0;
    4646:	4615      	mov	r5, r2
	uint8_t minimum_index = 0;
    4648:	4616      	mov	r6, r2
	uint16_t maximum = 0;
    464a:	4691      	mov	r9, r2
	uint16_t minimum = -1; // -1 trick to get the largest possible number
    464c:	f64f 78ff 	movw	r8, #65535	; 0xffff
	uint32_t sum = 0;
    4650:	4610      	mov	r0, r2
    4652:	fa5f fc82 	uxtb.w	ip, r2
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    4656:	45e6      	cmp	lr, ip
    4658:	d83c      	bhi.n	46d4 <grid_ain_add_sample+0xa4>
	
	}
	
	uint16_t average = sum/instance->buffer_depth;
	
	if (value>average){		
    465a:	180a      	adds	r2, r1, r0
	uint16_t average = sum/instance->buffer_depth;
    465c:	fbb0 f0fe 	udiv	r0, r0, lr
	if (value>average){		
    4660:	b280      	uxth	r0, r0
    4662:	4288      	cmp	r0, r1
		// Replace minimum in the buffer and recalculate sum
		sum = sum - instance->buffer[minimum_index] + value;
    4664:	bf34      	ite	cc
    4666:	b230      	sxthcc	r0, r6
		instance->buffer[minimum_index] = value;		
	}else{
		// Replace maximum in the buffer and recalculate sum
		sum = sum - instance->buffer[maximum_index] + value;
    4668:	b228      	sxthcs	r0, r5
    466a:	f834 5010 	ldrh.w	r5, [r4, r0, lsl #1]
		instance->buffer[maximum_index] = value;
    466e:	f824 1010 	strh.w	r1, [r4, r0, lsl #1]
		sum = sum - instance->buffer[maximum_index] + value;
    4672:	1b52      	subs	r2, r2, r5
	}
	
	// Recalculate average
	average = sum/instance->buffer_depth;
    4674:	7919      	ldrb	r1, [r3, #4]
    4676:	fbb2 f2f1 	udiv	r2, r2, r1
	
	
	uint8_t downscale_factor = (16-instance->result_resolution);
    467a:	7999      	ldrb	r1, [r3, #6]
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    467c:	795c      	ldrb	r4, [r3, #5]
	
	uint16_t downsampled = average>>downscale_factor;
	uint16_t upscaled    = downsampled<<upscale_factor;
	
	uint8_t criteria_a = instance->result_value != upscaled;
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    467e:	895e      	ldrh	r6, [r3, #10]
	
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
	uint8_t criteria_d = upscaled==0;
	
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    4680:	f8b3 e008 	ldrh.w	lr, [r3, #8]
	uint8_t downscale_factor = (16-instance->result_resolution);
    4684:	f1c1 0710 	rsb	r7, r1, #16
	uint16_t downsampled = average>>downscale_factor;
    4688:	b295      	uxth	r5, r2
    468a:	b2ff      	uxtb	r7, r7
	uint8_t upscale_factor   = (instance->result_format - instance->result_resolution);
    468c:	1a61      	subs	r1, r4, r1
	uint16_t upscaled    = downsampled<<upscale_factor;
    468e:	b2c8      	uxtb	r0, r1
	uint16_t downsampled = average>>downscale_factor;
    4690:	fa45 f107 	asr.w	r1, r5, r7
	uint16_t upscaled    = downsampled<<upscale_factor;
    4694:	b289      	uxth	r1, r1
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    4696:	1b76      	subs	r6, r6, r5
	uint16_t upscaled    = downsampled<<upscale_factor;
    4698:	4081      	lsls	r1, r0
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    469a:	2e00      	cmp	r6, #0
	uint16_t upscaled    = downsampled<<upscale_factor;
    469c:	fa1f fc81 	uxth.w	ip, r1
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    46a0:	bfb8      	it	lt
    46a2:	4276      	neglt	r6, r6
    46a4:	2501      	movs	r5, #1
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46a6:	45e6      	cmp	lr, ip
	uint8_t criteria_b = abs(instance->result_average - average)>(1<<downscale_factor);
    46a8:	fa05 f707 	lsl.w	r7, r5, r7
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46ac:	d01f      	beq.n	46ee <grid_ain_add_sample+0xbe>
    46ae:	42be      	cmp	r6, r7
    46b0:	dc09      	bgt.n	46c6 <grid_ain_add_sample+0x96>
	uint8_t criteria_c = upscaled==(1<<instance->result_format)-(1<<upscale_factor);
    46b2:	fa05 f404 	lsl.w	r4, r5, r4
    46b6:	fa05 f000 	lsl.w	r0, r5, r0
    46ba:	1a20      	subs	r0, r4, r0
	if (criteria_a && (criteria_b || criteria_c || criteria_d)){
    46bc:	4560      	cmp	r0, ip
    46be:	d002      	beq.n	46c6 <grid_ain_add_sample+0x96>
    46c0:	f1bc 0f00 	cmp.w	ip, #0
    46c4:	d113      	bne.n	46ee <grid_ain_add_sample+0xbe>
		
		instance->result_average = average;
		instance->result_value = upscaled;
		instance->result_changed = 1;
    46c6:	2001      	movs	r0, #1
	average = sum/instance->buffer_depth;
    46c8:	815a      	strh	r2, [r3, #10]
		instance->result_value = upscaled;
    46ca:	f8a3 c008 	strh.w	ip, [r3, #8]
		instance->result_changed = 1;
    46ce:	8198      	strh	r0, [r3, #12]
		return 1;
	}else{		
		return 0;
	}
	
}
    46d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint16_t current = instance->buffer[i];
    46d4:	f834 7012 	ldrh.w	r7, [r4, r2, lsl #1]
		if (current > maximum){
    46d8:	45b9      	cmp	r9, r7
    46da:	bf3c      	itt	cc
    46dc:	4665      	movcc	r5, ip
    46de:	46b9      	movcc	r9, r7
		if (current < minimum){
    46e0:	45b8      	cmp	r8, r7
		sum += current;
    46e2:	4438      	add	r0, r7
		if (current < minimum){
    46e4:	bf84      	itt	hi
    46e6:	4666      	movhi	r6, ip
    46e8:	46b8      	movhi	r8, r7
	for (uint8_t i = 0; i<instance->buffer_depth; i++){
    46ea:	3201      	adds	r2, #1
    46ec:	e7b1      	b.n	4652 <grid_ain_add_sample+0x22>
		return 0;
    46ee:	2000      	movs	r0, #0
    46f0:	e7ee      	b.n	46d0 <grid_ain_add_sample+0xa0>
    46f2:	bf00      	nop
    46f4:	20004044 	.word	0x20004044

000046f8 <grid_ain_get_changed>:

uint8_t grid_ain_get_changed(uint8_t channel){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];
	return instance->result_changed;
    46f8:	4b02      	ldr	r3, [pc, #8]	; (4704 <grid_ain_get_changed+0xc>)
    46fa:	681b      	ldr	r3, [r3, #0]
    46fc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
    4700:	7b00      	ldrb	r0, [r0, #12]
    4702:	4770      	bx	lr
    4704:	20004044 	.word	0x20004044

00004708 <grid_ain_get_average>:
	
uint16_t grid_ain_get_average(uint8_t channel, uint8_t resolution){
	
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    4708:	4b08      	ldr	r3, [pc, #32]	; (472c <grid_ain_get_average+0x24>)
    470a:	681a      	ldr	r2, [r3, #0]
	instance->result_changed = 0;
	
	if (resolution>6 && resolution<15){
    470c:	1fcb      	subs	r3, r1, #7
	struct AIN_Channel* instance = &ain_channel_buffer[channel];	
    470e:	eb02 1200 	add.w	r2, r2, r0, lsl #4
	if (resolution>6 && resolution<15){
    4712:	2b07      	cmp	r3, #7
	instance->result_changed = 0;
    4714:	f04f 0000 	mov.w	r0, #0
    4718:	8190      	strh	r0, [r2, #12]
	if (resolution>6 && resolution<15){
    471a:	d805      	bhi.n	4728 <grid_ain_get_average+0x20>
		

		
		return (instance->result_value)/(1<<(instance->result_format-resolution));
    471c:	7950      	ldrb	r0, [r2, #5]
    471e:	8913      	ldrh	r3, [r2, #8]
    4720:	1a40      	subs	r0, r0, r1
    4722:	fa43 f000 	asr.w	r0, r3, r0
    4726:	b280      	uxth	r0, r0
		
	}
	else{
		return 0;
	}
}
    4728:	4770      	bx	lr
    472a:	bf00      	nop
    472c:	20004044 	.word	0x20004044

00004730 <grid_port_reset_receiver>:
#include "grid_buf.h"

// PORTS


void grid_port_reset_receiver(struct grid_port* por){
    4730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
	usart_async_disable(por->usart);
    4732:	4b24      	ldr	r3, [pc, #144]	; (47c4 <grid_port_reset_receiver+0x94>)
	
	
	por->ping_partner_token = 255;
	por->ping_local_token = 255;
	
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4734:	4e24      	ldr	r6, [pc, #144]	; (47c8 <grid_port_reset_receiver+0x98>)
void grid_port_reset_receiver(struct grid_port* por){
    4736:	4604      	mov	r4, r0
	usart_async_disable(por->usart);
    4738:	6840      	ldr	r0, [r0, #4]
    473a:	4798      	blx	r3
	por->partner_status = 0;
    473c:	f642 734b 	movw	r3, #12107	; 0x2f4b
	por->rx_double_buffer_seek_start_index = 0;
    4740:	2500      	movs	r5, #0
	por->rx_double_buffer_read_start_index = 0;
    4742:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	por->ping_local_token = 255;
    4746:	f642 7731 	movw	r7, #12081	; 0x2f31
	por->partner_status = 0;
    474a:	54e5      	strb	r5, [r4, r3]
	por->ping_partner_token = 255;
    474c:	f642 7332 	movw	r3, #12082	; 0x2f32
    4750:	22ff      	movs	r2, #255	; 0xff
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4752:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
	por->ping_partner_token = 255;
    4756:	54e2      	strb	r2, [r4, r3]
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4758:	2102      	movs	r1, #2
	por->ping_local_token = 255;
    475a:	55e2      	strb	r2, [r4, r7]
	grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    475c:	303b      	adds	r0, #59	; 0x3b
    475e:	47b0      	blx	r6
	grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4760:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
    4764:	5de2      	ldrb	r2, [r4, r7]
    4766:	2102      	movs	r1, #2
    4768:	3039      	adds	r0, #57	; 0x39
    476a:	47b0      	blx	r6
	grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    476c:	f642 7347 	movw	r3, #12103	; 0x2f47
    4770:	f504 563c 	add.w	r6, r4, #12032	; 0x2f00
    4774:	3633      	adds	r6, #51	; 0x33
    4776:	5ce1      	ldrb	r1, [r4, r3]
    4778:	4b14      	ldr	r3, [pc, #80]	; (47cc <grid_port_reset_receiver+0x9c>)
    477a:	9101      	str	r1, [sp, #4]
    477c:	4630      	mov	r0, r6
    477e:	4798      	blx	r3
    4780:	9901      	ldr	r1, [sp, #4]
    4782:	4b13      	ldr	r3, [pc, #76]	; (47d0 <grid_port_reset_receiver+0xa0>)
    4784:	4602      	mov	r2, r0
    4786:	4630      	mov	r0, r6
    4788:	4798      	blx	r3


	
	por->rx_double_buffer_timeout = 0;
	grid_sys_port_reset_dma(por);
    478a:	4b12      	ldr	r3, [pc, #72]	; (47d4 <grid_port_reset_receiver+0xa4>)
	por->rx_double_buffer_timeout = 0;
    478c:	61e5      	str	r5, [r4, #28]
	grid_sys_port_reset_dma(por);
    478e:	4620      	mov	r0, r4
    4790:	4798      	blx	r3
	
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    4792:	f504 539d 	add.w	r3, r4, #5024	; 0x13a0
    4796:	3314      	adds	r3, #20
    4798:	f504 521c 	add.w	r2, r4, #9984	; 0x2700
    479c:	323c      	adds	r2, #60	; 0x3c
    479e:	4619      	mov	r1, r3
		por->rx_double_buffer[i] = 0;
    47a0:	f803 5b01 	strb.w	r5, [r3], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    47a4:	4293      	cmp	r3, r2
    47a6:	d1fb      	bne.n	47a0 <grid_port_reset_receiver+0x70>
    47a8:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	}
	
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
		por->tx_double_buffer[i] = 0;
    47ac:	2200      	movs	r2, #0
    47ae:	f803 2b01 	strb.w	r2, [r3], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    47b2:	428b      	cmp	r3, r1
    47b4:	d1fb      	bne.n	47ae <grid_port_reset_receiver+0x7e>
	}
	
	usart_async_enable(por->usart);
    47b6:	6860      	ldr	r0, [r4, #4]
    47b8:	4b07      	ldr	r3, [pc, #28]	; (47d8 <grid_port_reset_receiver+0xa8>)
	
}
    47ba:	b003      	add	sp, #12
    47bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	usart_async_enable(por->usart);
    47c0:	4718      	bx	r3
    47c2:	bf00      	nop
    47c4:	00010351 	.word	0x00010351
    47c8:	00009821 	.word	0x00009821
    47cc:	00009969 	.word	0x00009969
    47d0:	0000999d 	.word	0x0000999d
    47d4:	000093b1 	.word	0x000093b1
    47d8:	00010325 	.word	0x00010325

000047dc <grid_buffer_init>:



uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
	
	grid_buffer_error_count = 0;
    47dc:	4a0f      	ldr	r2, [pc, #60]	; (481c <grid_buffer_init+0x40>)
    47de:	2300      	movs	r3, #0
uint8_t grid_buffer_init(struct grid_buffer* buf, uint16_t length){
    47e0:	b510      	push	{r4, lr}
    47e2:	3002      	adds	r0, #2
	grid_buffer_error_count = 0;
    47e4:	7013      	strb	r3, [r2, #0]
	
	buf->buffer_length = length;
	
	buf->read_length   = 0;
    47e6:	f8a0 33ee 	strh.w	r3, [r0, #1006]	; 0x3ee
	buf->buffer_length = length;
    47ea:	f820 1c02 	strh.w	r1, [r0, #-2]
	
	buf->read_start    = 0;
    47ee:	f8a0 33e8 	strh.w	r3, [r0, #1000]	; 0x3e8
	buf->read_stop     = 0;
    47f2:	f8a0 33ea 	strh.w	r3, [r0, #1002]	; 0x3ea
	buf->read_active   = 0;
    47f6:	f8a0 33ec 	strh.w	r3, [r0, #1004]	; 0x3ec
	
	buf->write_start    = 0;
    47fa:	f8a0 33f0 	strh.w	r3, [r0, #1008]	; 0x3f0
	buf->write_stop     = 0;
    47fe:	f8a0 33f2 	strh.w	r3, [r0, #1010]	; 0x3f2
	buf->write_active   = 0;
    4802:	f8a0 33f4 	strh.w	r3, [r0, #1012]	; 0x3f4
	

	for (uint16_t i=0; i<buf->buffer_length; i++){
		buf->buffer_storage[i] = 0;
    4806:	461c      	mov	r4, r3
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4808:	b29a      	uxth	r2, r3
    480a:	4291      	cmp	r1, r2
    480c:	d801      	bhi.n	4812 <grid_buffer_init+0x36>
	}
	
	return 1;
	
}
    480e:	2001      	movs	r0, #1
    4810:	bd10      	pop	{r4, pc}
		buf->buffer_storage[i] = 0;
    4812:	f800 4b01 	strb.w	r4, [r0], #1
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4816:	3301      	adds	r3, #1
    4818:	e7f6      	b.n	4808 <grid_buffer_init+0x2c>
    481a:	bf00      	nop
    481c:	20004038 	.word	0x20004038

00004820 <grid_buffer_get_space>:

uint16_t grid_buffer_get_space(struct grid_buffer* buf){
	
	uint16_t space = 0;
		
	if (buf->read_start > buf->write_start){
    4820:	f8b0 33ea 	ldrh.w	r3, [r0, #1002]	; 0x3ea
    4824:	f8b0 23f2 	ldrh.w	r2, [r0, #1010]	; 0x3f2
    4828:	4293      	cmp	r3, r2
		space = buf->read_start - buf->write_start;
	}
	else{
		space = buf->buffer_length - buf->write_start + buf->read_start;
    482a:	bf9b      	ittet	ls
    482c:	8800      	ldrhls	r0, [r0, #0]
    482e:	18c0      	addls	r0, r0, r3
		space = buf->read_start - buf->write_start;
    4830:	1a98      	subhi	r0, r3, r2
		space = buf->buffer_length - buf->write_start + buf->read_start;
    4832:	1a80      	subls	r0, r0, r2
    4834:	b280      	uxth	r0, r0
	}
	
	return space;
}
    4836:	4770      	bx	lr

00004838 <grid_buffer_write_init>:





uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    4838:	b510      	push	{r4, lr}
	
	
	
	uint16_t space = grid_buffer_get_space(buf);
    483a:	4b0c      	ldr	r3, [pc, #48]	; (486c <grid_buffer_write_init+0x34>)
uint16_t grid_buffer_write_init(struct grid_buffer* buf, uint16_t length){
    483c:	4604      	mov	r4, r0
	uint16_t space = grid_buffer_get_space(buf);
    483e:	4798      	blx	r3

	
	if (space>length){
    4840:	4288      	cmp	r0, r1
    4842:	d90b      	bls.n	485c <grid_buffer_write_init+0x24>
		
		buf->write_stop = (buf->write_start+length)%buf->buffer_length;
    4844:	f8b4 33f2 	ldrh.w	r3, [r4, #1010]	; 0x3f2
    4848:	8820      	ldrh	r0, [r4, #0]
    484a:	440b      	add	r3, r1
    484c:	fbb3 f2f0 	udiv	r2, r3, r0
    4850:	fb00 3312 	mls	r3, r0, r2, r3
    4854:	f8a4 33f4 	strh.w	r3, [r4, #1012]	; 0x3f4
	}
	
	
	
	
}
    4858:	4608      	mov	r0, r1
    485a:	bd10      	pop	{r4, pc}
		grid_buffer_error_count++;
    485c:	4a04      	ldr	r2, [pc, #16]	; (4870 <grid_buffer_write_init+0x38>)
    485e:	7813      	ldrb	r3, [r2, #0]
    4860:	3301      	adds	r3, #1
    4862:	b2db      	uxtb	r3, r3
    4864:	7013      	strb	r3, [r2, #0]
		return 0; // failed
    4866:	2100      	movs	r1, #0
    4868:	e7f6      	b.n	4858 <grid_buffer_write_init+0x20>
    486a:	bf00      	nop
    486c:	00004821 	.word	0x00004821
    4870:	20004038 	.word	0x20004038

00004874 <grid_buffer_write_character>:

uint8_t grid_buffer_write_character(struct grid_buffer* buf, uint8_t character){
	

		
	buf->buffer_storage[buf->write_active] = character;
    4874:	f8b0 33f6 	ldrh.w	r3, [r0, #1014]	; 0x3f6
    4878:	18c2      	adds	r2, r0, r3
		
	buf->write_active++;
    487a:	3301      	adds	r3, #1
	buf->buffer_storage[buf->write_active] = character;
    487c:	7091      	strb	r1, [r2, #2]
	buf->write_active %= buf->buffer_length;
    487e:	8801      	ldrh	r1, [r0, #0]
    4880:	b29b      	uxth	r3, r3
    4882:	fbb3 f2f1 	udiv	r2, r3, r1
    4886:	fb01 3312 	mls	r3, r1, r2, r3
    488a:	f8a0 33f6 	strh.w	r3, [r0, #1014]	; 0x3f6
		
	return 1;
		

}
    488e:	2001      	movs	r0, #1
    4890:	4770      	bx	lr
	...

00004894 <grid_buffer_write_acknowledge>:

uint8_t grid_buffer_write_acknowledge(struct grid_buffer* buf){
	
	if (buf->write_active == buf->write_stop){
    4894:	f8b0 33f4 	ldrh.w	r3, [r0, #1012]	; 0x3f4
    4898:	f8b0 23f6 	ldrh.w	r2, [r0, #1014]	; 0x3f6
    489c:	4293      	cmp	r3, r2
		buf->write_start = buf->write_active;
		return 1;
	}
	else{
		
		grid_buffer_error_count++;
    489e:	bf17      	itett	ne
    48a0:	4a05      	ldrne	r2, [pc, #20]	; (48b8 <grid_buffer_write_acknowledge+0x24>)
		buf->write_start = buf->write_active;
    48a2:	f8a0 33f2 	strheq.w	r3, [r0, #1010]	; 0x3f2
		grid_buffer_error_count++;
    48a6:	7813      	ldrbne	r3, [r2, #0]
    48a8:	3301      	addne	r3, #1
    48aa:	bf17      	itett	ne
    48ac:	b2db      	uxtbne	r3, r3
		return 1;
    48ae:	2001      	moveq	r0, #1
		grid_buffer_error_count++;
    48b0:	7013      	strbne	r3, [r2, #0]
    48b2:	2000      	movne	r0, #0
		return 0;
	}
	
	
}
    48b4:	4770      	bx	lr
    48b6:	bf00      	nop
    48b8:	20004038 	.word	0x20004038

000048bc <grid_port_receive_decode>:
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48c0:	ed2d 8b02 	vpush	{d8}
	uint8_t buffer[length];
    48c4:	1dd3      	adds	r3, r2, #7
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48c6:	b08b      	sub	sp, #44	; 0x2c
    48c8:	4690      	mov	r8, r2
	uint8_t buffer[length];
    48ca:	08db      	lsrs	r3, r3, #3
    48cc:	466a      	mov	r2, sp
    48ce:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
	for (uint16_t i = 0; i<length; i++){
    48d2:	2200      	movs	r2, #0
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48d4:	af02      	add	r7, sp, #8
	uint8_t buffer[length];
    48d6:	469d      	mov	sp, r3
void grid_port_receive_decode(struct grid_port* por, uint16_t startcommand, uint16_t len){
    48d8:	4604      	mov	r4, r0
    48da:	6a83      	ldr	r3, [r0, #40]	; 0x28
	uint8_t buffer[length];
    48dc:	f10d 0908 	add.w	r9, sp, #8
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    48e0:	f241 3088 	movw	r0, #5000	; 0x1388
    48e4:	f241 35b4 	movw	r5, #5044	; 0x13b4
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    48e8:	4694      	mov	ip, r2
	for (uint16_t i = 0; i<length; i++){
    48ea:	b291      	uxth	r1, r2
    48ec:	4588      	cmp	r8, r1
    48ee:	f200 80e3 	bhi.w	4ab8 <grid_port_receive_decode+0x1fc>
	for (uint16_t i = 0; i<length; i++){
    48f2:	2200      	movs	r2, #0
	message = &buffer[0];
    48f4:	464d      	mov	r5, r9
	for (uint16_t i = 0; i<length; i++){
    48f6:	f241 3088 	movw	r0, #5000	; 0x1388
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    48fa:	f241 3cb4 	movw	ip, #5044	; 0x13b4
    48fe:	4696      	mov	lr, r2
	for (uint16_t i = 0; i<length; i++){
    4900:	b291      	uxth	r1, r2
    4902:	4588      	cmp	r8, r1
    4904:	f200 80e5 	bhi.w	4ad2 <grid_port_receive_decode+0x216>
	por->rx_double_buffer_read_start_index = (por->rx_double_buffer_read_start_index + length)%GRID_DOUBLE_BUFFER_RX_SIZE;
    4908:	4443      	add	r3, r8
    490a:	fbb3 f2f0 	udiv	r2, r3, r0
    490e:	fb00 3312 	mls	r3, r0, r2, r3
	por->rx_double_buffer_seek_start_index =  por->rx_double_buffer_read_start_index;
    4912:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
	por->rx_double_buffer_status = 0;
    4916:	2300      	movs	r3, #0
    4918:	6223      	str	r3, [r4, #32]
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    491a:	f8df a250 	ldr.w	sl, [pc, #592]	; 4b6c <grid_port_receive_decode+0x2b0>
    491e:	f8df b250 	ldr.w	fp, [pc, #592]	; 4b70 <grid_port_receive_decode+0x2b4>
    4922:	4b88      	ldr	r3, [pc, #544]	; (4b44 <grid_port_receive_decode+0x288>)
	for (uint16_t i = 1; i<length; i++){
    4924:	2601      	movs	r6, #1
    4926:	45b0      	cmp	r8, r6
    4928:	f200 80dd 	bhi.w	4ae6 <grid_port_receive_decode+0x22a>
	if (message[0] == GRID_CONST_SOH && message[length-1] == GRID_CONST_LF){
    492c:	782b      	ldrb	r3, [r5, #0]
    492e:	2b01      	cmp	r3, #1
    4930:	f040 80bc 	bne.w	4aac <grid_port_receive_decode+0x1f0>
    4934:	eb05 0308 	add.w	r3, r5, r8
    4938:	f813 9c01 	ldrb.w	r9, [r3, #-1]
    493c:	f1b9 0f0a 	cmp.w	r9, #10
    4940:	f040 80b4 	bne.w	4aac <grid_port_receive_decode+0x1f0>
		checksum_received = grid_msg_checksum_read(message, length);
    4944:	4b80      	ldr	r3, [pc, #512]	; (4b48 <grid_port_receive_decode+0x28c>)
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    4946:	4e81      	ldr	r6, [pc, #516]	; (4b4c <grid_port_receive_decode+0x290>)
		checksum_received = grid_msg_checksum_read(message, length);
    4948:	4641      	mov	r1, r8
    494a:	4628      	mov	r0, r5
    494c:	4798      	blx	r3
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    494e:	4641      	mov	r1, r8
		checksum_received = grid_msg_checksum_read(message, length);
    4950:	4682      	mov	sl, r0
		checksum_calculated = grid_msg_calculate_checksum_of_packet_string(message, length);
    4952:	4628      	mov	r0, r5
    4954:	47b0      	blx	r6
		if (checksum_calculated == checksum_received && error_flag == 0){
    4956:	4582      	cmp	sl, r0
    4958:	f040 81fc 	bne.w	4d54 <grid_port_receive_decode+0x498>
			if (message[1] == GRID_CONST_BRC){ // Broadcast message
    495c:	786b      	ldrb	r3, [r5, #1]
    495e:	2b0f      	cmp	r3, #15
    4960:	f040 810c 	bne.w	4b7c <grid_port_receive_decode+0x2c0>
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    4964:	f107 061f 	add.w	r6, r7, #31
				uint8_t error=0;
    4968:	f04f 0300 	mov.w	r3, #0
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    496c:	f8df b204 	ldr.w	fp, [pc, #516]	; 4b74 <grid_port_receive_decode+0x2b8>
				uint8_t error=0;
    4970:	77fb      	strb	r3, [r7, #31]
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    4972:	2202      	movs	r2, #2
    4974:	4633      	mov	r3, r6
    4976:	2104      	movs	r1, #4
    4978:	4628      	mov	r0, r5
    497a:	47d8      	blx	fp
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    497c:	4649      	mov	r1, r9
				uint8_t received_id  = grid_msg_get_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
    497e:	6078      	str	r0, [r7, #4]
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    4980:	4633      	mov	r3, r6
    4982:	2202      	movs	r2, #2
    4984:	4628      	mov	r0, r5
    4986:	47d8      	blx	fp
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    4988:	4633      	mov	r3, r6
				uint8_t received_age = grid_msg_get_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, &error);
    498a:	6038      	str	r0, [r7, #0]
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    498c:	2202      	movs	r2, #2
    498e:	2106      	movs	r1, #6
    4990:	4628      	mov	r0, r5
    4992:	47d8      	blx	fp
    4994:	b2c3      	uxtb	r3, r0
    4996:	617b      	str	r3, [r7, #20]
    4998:	f1a3 0a7f 	sub.w	sl, r3, #127	; 0x7f
				int8_t received_dy  = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    499c:	2202      	movs	r2, #2
    499e:	4633      	mov	r3, r6
    49a0:	2108      	movs	r1, #8
    49a2:	4628      	mov	r0, r5
    49a4:	47d8      	blx	fp
    49a6:	b2c3      	uxtb	r3, r0
    49a8:	613b      	str	r3, [r7, #16]
    49aa:	f1a3 097f 	sub.w	r9, r3, #127	; 0x7f
				uint8_t received_rot = grid_msg_get_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, &error);
    49ae:	2202      	movs	r2, #2
    49b0:	4633      	mov	r3, r6
    49b2:	210c      	movs	r1, #12
    49b4:	4628      	mov	r0, r5
    49b6:	47d8      	blx	fp
				uint8_t updated_rot = (received_rot + por->partner_fi)%4;
    49b8:	f642 7330 	movw	r3, #12080	; 0x2f30
				int8_t received_dx  = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error) - GRID_SYS_DEFAULT_POSITION;
    49bc:	fa4f fa8a 	sxtb.w	sl, sl
				uint8_t updated_rot = (received_rot + por->partner_fi)%4;
    49c0:	5ce3      	ldrb	r3, [r4, r3]
    49c2:	4418      	add	r0, r3
    49c4:	f000 0203 	and.w	r2, r0, #3
    49c8:	ee08 2a10 	vmov	s16, r2
				int8_t received_dy  = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error) - GRID_SYS_DEFAULT_POSITION;
    49cc:	fa4f f989 	sxtb.w	r9, r9
				if (por->partner_fi == 0){ // 0 deg
    49d0:	b143      	cbz	r3, 49e4 <grid_port_receive_decode+0x128>
				else if(por->partner_fi == 1){ // 90 deg
    49d2:	2b01      	cmp	r3, #1
    49d4:	f040 8098 	bne.w	4b08 <grid_port_receive_decode+0x24c>
					rotated_dx  -= received_dy;
    49d8:	693b      	ldr	r3, [r7, #16]
    49da:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					rotated_dy  += received_dx;
    49de:	46d1      	mov	r9, sl
					rotated_dx  -= received_dy;
    49e0:	fa4f fa83 	sxtb.w	sl, r3
				uint8_t updated_dx = rotated_dx + GRID_SYS_DEFAULT_POSITION + por->dx;
    49e4:	f642 7349 	movw	r3, #12105	; 0x2f49
    49e8:	f897 b000 	ldrb.w	fp, [r7]
    49ec:	5ce3      	ldrb	r3, [r4, r3]
    49ee:	337f      	adds	r3, #127	; 0x7f
    49f0:	449a      	add	sl, r3
    49f2:	fa5f f38a 	uxtb.w	r3, sl
    49f6:	60fb      	str	r3, [r7, #12]
				uint8_t updated_dy = rotated_dy + GRID_SYS_DEFAULT_POSITION + por->dy;
    49f8:	f642 734a 	movw	r3, #12106	; 0x2f4a
    49fc:	f814 a003 	ldrb.w	sl, [r4, r3]
    4a00:	f10a 0a7f 	add.w	sl, sl, #127	; 0x7f
    4a04:	44d1      	add	r9, sl
    4a06:	fa5f f389 	uxtb.w	r3, r9
    4a0a:	60bb      	str	r3, [r7, #8]
				if (received_dx + GRID_SYS_DEFAULT_POSITION == 0 && received_dy + GRID_SYS_DEFAULT_POSITION == 0)
    4a0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    4a10:	4313      	orrs	r3, r2
    4a12:	f897 a004 	ldrb.w	sl, [r7, #4]
    4a16:	d020      	beq.n	4a5a <grid_port_receive_decode+0x19e>
					grid_msg_set_parameter(message, GRID_BRC_ID_offset, GRID_BRC_ID_length, updated_id, &error);
    4a18:	f8df 915c 	ldr.w	r9, [pc, #348]	; 4b78 <grid_port_receive_decode+0x2bc>
    4a1c:	9600      	str	r6, [sp, #0]
    4a1e:	4653      	mov	r3, sl
    4a20:	2202      	movs	r2, #2
    4a22:	2104      	movs	r1, #4
    4a24:	4628      	mov	r0, r5
    4a26:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, updated_dx, &error);
    4a28:	9600      	str	r6, [sp, #0]
    4a2a:	68fb      	ldr	r3, [r7, #12]
    4a2c:	2202      	movs	r2, #2
    4a2e:	2106      	movs	r1, #6
    4a30:	4628      	mov	r0, r5
    4a32:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, updated_dy, &error);
    4a34:	9600      	str	r6, [sp, #0]
    4a36:	68bb      	ldr	r3, [r7, #8]
    4a38:	2202      	movs	r2, #2
    4a3a:	2108      	movs	r1, #8
    4a3c:	4628      	mov	r0, r5
    4a3e:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, updated_age, &error);
    4a40:	465b      	mov	r3, fp
    4a42:	2202      	movs	r2, #2
    4a44:	210a      	movs	r1, #10
    4a46:	9600      	str	r6, [sp, #0]
    4a48:	4628      	mov	r0, r5
    4a4a:	47c8      	blx	r9
					grid_msg_set_parameter(message, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, updated_rot, &error);
    4a4c:	ee18 3a10 	vmov	r3, s16
    4a50:	9600      	str	r6, [sp, #0]
    4a52:	2202      	movs	r2, #2
    4a54:	210c      	movs	r1, #12
    4a56:	4628      	mov	r0, r5
    4a58:	47c8      	blx	r9
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    4a5a:	68fb      	ldr	r3, [r7, #12]
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    4a5c:	483c      	ldr	r0, [pc, #240]	; (4b50 <grid_port_receive_decode+0x294>)
				uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    4a5e:	eb03 2a0a 	add.w	sl, r3, sl, lsl #8
    4a62:	68bb      	ldr	r3, [r7, #8]
    4a64:	eb03 2a0a 	add.w	sl, r3, sl, lsl #8
    4a68:	eb0b 2a0a 	add.w	sl, fp, sl, lsl #8
				if (0 == grid_msg_find_recent(&grid_sys_state, fingerprint)){
    4a6c:	4b39      	ldr	r3, [pc, #228]	; (4b54 <grid_port_receive_decode+0x298>)
    4a6e:	4651      	mov	r1, sl
    4a70:	4798      	blx	r3
    4a72:	b9d8      	cbnz	r0, 4aac <grid_port_receive_decode+0x1f0>
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a74:	4b35      	ldr	r3, [pc, #212]	; (4b4c <grid_port_receive_decode+0x290>)
    4a76:	4641      	mov	r1, r8
    4a78:	4628      	mov	r0, r5
    4a7a:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a7c:	f504 542c 	add.w	r4, r4, #11008	; 0x2b00
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a80:	4b35      	ldr	r3, [pc, #212]	; (4b58 <grid_port_receive_decode+0x29c>)
    4a82:	4602      	mov	r2, r0
    4a84:	4641      	mov	r1, r8
    4a86:	4628      	mov	r0, r5
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a88:	3434      	adds	r4, #52	; 0x34
					grid_msg_checksum_write(message, length, grid_msg_calculate_checksum_of_packet_string(message, length));
    4a8a:	4798      	blx	r3
					if (grid_buffer_write_init(&por->rx_buffer, length)){
    4a8c:	4b33      	ldr	r3, [pc, #204]	; (4b5c <grid_port_receive_decode+0x2a0>)
    4a8e:	4641      	mov	r1, r8
    4a90:	4620      	mov	r0, r4
    4a92:	4798      	blx	r3
    4a94:	b150      	cbz	r0, 4aac <grid_port_receive_decode+0x1f0>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    4a96:	4e32      	ldr	r6, [pc, #200]	; (4b60 <grid_port_receive_decode+0x2a4>)
    4a98:	44a8      	add	r8, r5
						for (uint16_t i=0; i<length; i++){
    4a9a:	45a8      	cmp	r8, r5
    4a9c:	d14d      	bne.n	4b3a <grid_port_receive_decode+0x27e>
						grid_buffer_write_acknowledge(&por->rx_buffer);
    4a9e:	4b31      	ldr	r3, [pc, #196]	; (4b64 <grid_port_receive_decode+0x2a8>)
    4aa0:	4620      	mov	r0, r4
    4aa2:	4798      	blx	r3
						grid_msg_push_recent(&grid_sys_state, fingerprint);
    4aa4:	482a      	ldr	r0, [pc, #168]	; (4b50 <grid_port_receive_decode+0x294>)
    4aa6:	4b30      	ldr	r3, [pc, #192]	; (4b68 <grid_port_receive_decode+0x2ac>)
    4aa8:	4651      	mov	r1, sl
    4aaa:	4798      	blx	r3
}
    4aac:	3724      	adds	r7, #36	; 0x24
    4aae:	46bd      	mov	sp, r7
    4ab0:	ecbd 8b02 	vpop	{d8}
    4ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer[i] = por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE];
    4ab8:	18d6      	adds	r6, r2, r3
    4aba:	fbb6 f1f0 	udiv	r1, r6, r0
    4abe:	fb00 6111 	mls	r1, r0, r1, r6
    4ac2:	4421      	add	r1, r4
    4ac4:	5d4e      	ldrb	r6, [r1, r5]
    4ac6:	f809 6002 	strb.w	r6, [r9, r2]
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE]=0;
    4aca:	f801 c005 	strb.w	ip, [r1, r5]
	for (uint16_t i = 0; i<length; i++){
    4ace:	3201      	adds	r2, #1
    4ad0:	e70b      	b.n	48ea <grid_port_receive_decode+0x2e>
		por->rx_double_buffer[(por->rx_double_buffer_read_start_index + i)%GRID_DOUBLE_BUFFER_RX_SIZE] = 0;
    4ad2:	18d6      	adds	r6, r2, r3
    4ad4:	fbb6 f1f0 	udiv	r1, r6, r0
    4ad8:	fb00 6111 	mls	r1, r0, r1, r6
    4adc:	4421      	add	r1, r4
    4ade:	3201      	adds	r2, #1
    4ae0:	f801 e00c 	strb.w	lr, [r1, ip]
	for (uint16_t i = 0; i<length; i++){
    4ae4:	e70c      	b.n	4900 <grid_port_receive_decode+0x44>
		if (buffer[i] == GRID_CONST_SOH){
    4ae6:	f819 2006 	ldrb.w	r2, [r9, r6]
    4aea:	2a01      	cmp	r2, #1
    4aec:	d109      	bne.n	4b02 <grid_port_receive_decode+0x246>
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    4aee:	4651      	mov	r1, sl
    4af0:	4658      	mov	r0, fp
    4af2:	4798      	blx	r3
			length -= i;
    4af4:	eba8 0806 	sub.w	r8, r8, r6
			GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Frame Start Offset");
    4af8:	4b12      	ldr	r3, [pc, #72]	; (4b44 <grid_port_receive_decode+0x288>)
			length -= i;
    4afa:	fa1f f888 	uxth.w	r8, r8
			message = &buffer[i];
    4afe:	eb09 0506 	add.w	r5, r9, r6
	for (uint16_t i = 1; i<length; i++){
    4b02:	3601      	adds	r6, #1
    4b04:	b2b6      	uxth	r6, r6
    4b06:	e70e      	b.n	4926 <grid_port_receive_decode+0x6a>
				else if(por->partner_fi == 2){ // 180 deg
    4b08:	2b02      	cmp	r3, #2
    4b0a:	d10a      	bne.n	4b22 <grid_port_receive_decode+0x266>
					rotated_dx  -= received_dx;
    4b0c:	697b      	ldr	r3, [r7, #20]
    4b0e:	f1c3 0a7f 	rsb	sl, r3, #127	; 0x7f
					rotated_dy  -= received_dy;
    4b12:	693b      	ldr	r3, [r7, #16]
					rotated_dx  -= received_dx;
    4b14:	fa4f fa8a 	sxtb.w	sl, sl
					rotated_dy  -= received_dy;
    4b18:	f1c3 097f 	rsb	r9, r3, #127	; 0x7f
					rotated_dy  -= received_dx;
    4b1c:	fa4f f989 	sxtb.w	r9, r9
    4b20:	e760      	b.n	49e4 <grid_port_receive_decode+0x128>
				else if(por->partner_fi == 3){ // 270 deg
    4b22:	2b03      	cmp	r3, #3
    4b24:	d105      	bne.n	4b32 <grid_port_receive_decode+0x276>
					rotated_dy  -= received_dx;
    4b26:	697b      	ldr	r3, [r7, #20]
    4b28:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					rotated_dx  += received_dy;
    4b2c:	46ca      	mov	sl, r9
					rotated_dy  -= received_dx;
    4b2e:	4699      	mov	r9, r3
    4b30:	e7f4      	b.n	4b1c <grid_port_receive_decode+0x260>
				int8_t rotated_dy = 0;
    4b32:	f04f 0900 	mov.w	r9, #0
				int8_t rotated_dx = 0;
    4b36:	46ca      	mov	sl, r9
    4b38:	e754      	b.n	49e4 <grid_port_receive_decode+0x128>
							grid_buffer_write_character(&por->rx_buffer, message[i]);
    4b3a:	f815 1b01 	ldrb.w	r1, [r5], #1
    4b3e:	4620      	mov	r0, r4
    4b40:	47b0      	blx	r6
						for (uint16_t i=0; i<length; i++){
    4b42:	e7aa      	b.n	4a9a <grid_port_receive_decode+0x1de>
    4b44:	00013049 	.word	0x00013049
    4b48:	00009981 	.word	0x00009981
    4b4c:	00009969 	.word	0x00009969
    4b50:	20006fa4 	.word	0x20006fa4
    4b54:	000099d9 	.word	0x000099d9
    4b58:	0000999d 	.word	0x0000999d
    4b5c:	00004839 	.word	0x00004839
    4b60:	00004875 	.word	0x00004875
    4b64:	00004895 	.word	0x00004895
    4b68:	000099f3 	.word	0x000099f3
    4b6c:	00015428 	.word	0x00015428
    4b70:	0001543b 	.word	0x0001543b
    4b74:	000099ad 	.word	0x000099ad
    4b78:	000099c5 	.word	0x000099c5
			else if (message[1] == GRID_CONST_DCT){ // Direct Message
    4b7c:	2b0e      	cmp	r3, #14
    4b7e:	f040 80e5 	bne.w	4d4c <grid_port_receive_decode+0x490>
				if (message[2] == GRID_CONST_ACK){
    4b82:	78ab      	ldrb	r3, [r5, #2]
    4b84:	2b07      	cmp	r3, #7
    4b86:	d191      	bne.n	4aac <grid_port_receive_decode+0x1f0>
					uint8_t local_token_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    4b88:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 4d68 <grid_port_receive_decode+0x4ac>
    4b8c:	2200      	movs	r2, #0
    4b8e:	2102      	movs	r1, #2
    4b90:	f105 0008 	add.w	r0, r5, #8
    4b94:	47c8      	blx	r9
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4b96:	2200      	movs	r2, #0
					uint8_t local_token_received = grid_sys_read_hex_string_value(&message[8], 2, error_flag);
    4b98:	fa5f fa80 	uxtb.w	sl, r0
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4b9c:	2102      	movs	r1, #2
    4b9e:	1da8      	adds	r0, r5, #6
    4ba0:	47c8      	blx	r9
					if (por->partner_status == 0){
    4ba2:	f642 724b 	movw	r2, #12107	; 0x2f4b
					uint8_t partner_token_received = grid_sys_read_hex_string_value(&message[6], 2, error_flag);
    4ba6:	fa5f fb80 	uxtb.w	fp, r0
					if (por->partner_status == 0){
    4baa:	5ca2      	ldrb	r2, [r4, r2]
    4bac:	2a00      	cmp	r2, #0
    4bae:	d172      	bne.n	4c96 <grid_port_receive_decode+0x3da>
						if (por->ping_local_token == 255){ // I have no clue
    4bb0:	f642 7931 	movw	r9, #12081	; 0x2f31
    4bb4:	f814 2009 	ldrb.w	r2, [r4, r9]
    4bb8:	2aff      	cmp	r2, #255	; 0xff
    4bba:	d11b      	bne.n	4bf4 <grid_port_receive_decode+0x338>
							por->ping_local_token  = grid_sys_rtc_get_time(&grid_sys_state)%128;
    4bbc:	4a66      	ldr	r2, [pc, #408]	; (4d58 <grid_port_receive_decode+0x49c>)
    4bbe:	4867      	ldr	r0, [pc, #412]	; (4d5c <grid_port_receive_decode+0x4a0>)
    4bc0:	4790      	blx	r2
    4bc2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4bc6:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_local_token  = grid_sys_rtc_get_time(&grid_sys_state)%128;
    4bca:	f804 2009 	strb.w	r2, [r4, r9]
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4bce:	4b64      	ldr	r3, [pc, #400]	; (4d60 <grid_port_receive_decode+0x4a4>)
    4bd0:	2102      	movs	r1, #2
    4bd2:	3039      	adds	r0, #57	; 0x39
    4bd4:	4798      	blx	r3
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4bd6:	f504 593c 	add.w	r9, r4, #12032	; 0x2f00
    4bda:	f642 7247 	movw	r2, #12103	; 0x2f47
    4bde:	f109 0933 	add.w	r9, r9, #51	; 0x33
    4be2:	5ca1      	ldrb	r1, [r4, r2]
    4be4:	6179      	str	r1, [r7, #20]
    4be6:	4648      	mov	r0, r9
    4be8:	47b0      	blx	r6
    4bea:	6979      	ldr	r1, [r7, #20]
    4bec:	4b5d      	ldr	r3, [pc, #372]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4bee:	4602      	mov	r2, r0
    4bf0:	4648      	mov	r0, r9
    4bf2:	4798      	blx	r3
						if (partner_token_received != por->ping_partner_token){
    4bf4:	f642 7232 	movw	r2, #12082	; 0x2f32
    4bf8:	5ca1      	ldrb	r1, [r4, r2]
    4bfa:	4559      	cmp	r1, fp
    4bfc:	d017      	beq.n	4c2e <grid_port_receive_decode+0x372>
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, partner_token_received);
    4bfe:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_partner_token = partner_token_received;							
    4c02:	f804 b002 	strb.w	fp, [r4, r2]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, partner_token_received);
    4c06:	4b56      	ldr	r3, [pc, #344]	; (4d60 <grid_port_receive_decode+0x4a4>)
    4c08:	465a      	mov	r2, fp
    4c0a:	2102      	movs	r1, #2
    4c0c:	303b      	adds	r0, #59	; 0x3b
    4c0e:	4798      	blx	r3
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4c10:	f504 593c 	add.w	r9, r4, #12032	; 0x2f00
    4c14:	f642 7347 	movw	r3, #12103	; 0x2f47
    4c18:	f109 0933 	add.w	r9, r9, #51	; 0x33
    4c1c:	5ce1      	ldrb	r1, [r4, r3]
    4c1e:	6179      	str	r1, [r7, #20]
    4c20:	4648      	mov	r0, r9
    4c22:	47b0      	blx	r6
    4c24:	6979      	ldr	r1, [r7, #20]
    4c26:	4b4f      	ldr	r3, [pc, #316]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4c28:	4602      	mov	r2, r0
    4c2a:	4648      	mov	r0, r9
    4c2c:	4798      	blx	r3
						if (por->ping_local_token != local_token_received){
    4c2e:	f642 7331 	movw	r3, #12081	; 0x2f31
    4c32:	5ce3      	ldrb	r3, [r4, r3]
    4c34:	4553      	cmp	r3, sl
    4c36:	d129      	bne.n	4c8c <grid_port_receive_decode+0x3d0>
							por->partner_fi = (message[3] - por->direction + 6)%4;
    4c38:	7a62      	ldrb	r2, [r4, #9]
    4c3a:	78eb      	ldrb	r3, [r5, #3]
    4c3c:	1a9b      	subs	r3, r3, r2
    4c3e:	3306      	adds	r3, #6
    4c40:	425a      	negs	r2, r3
    4c42:	f002 0203 	and.w	r2, r2, #3
    4c46:	f003 0303 	and.w	r3, r3, #3
    4c4a:	bf58      	it	pl
    4c4c:	4253      	negpl	r3, r2
    4c4e:	f642 7230 	movw	r2, #12080	; 0x2f30
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c52:	f1a8 000a 	sub.w	r0, r8, #10
							por->partner_fi = (message[3] - por->direction + 6)%4;
    4c56:	54a3      	strb	r3, [r4, r2]
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c58:	2102      	movs	r1, #2
    4c5a:	4b43      	ldr	r3, [pc, #268]	; (4d68 <grid_port_receive_decode+0x4ac>)
    4c5c:	2200      	movs	r2, #0
    4c5e:	4428      	add	r0, r5
    4c60:	4798      	blx	r3
    4c62:	f642 732c 	movw	r3, #12076	; 0x2f2c
							por->partner_status = 1;
    4c66:	2201      	movs	r2, #1
							por->partner_hwcfg = grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4c68:	50e0      	str	r0, [r4, r3]
							por->partner_status = 1;
    4c6a:	f642 734b 	movw	r3, #12107	; 0x2f4b
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c6e:	493f      	ldr	r1, [pc, #252]	; (4d6c <grid_port_receive_decode+0x4b0>)
							por->partner_status = 1;
    4c70:	54e2      	strb	r2, [r4, r3]
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c72:	483f      	ldr	r0, [pc, #252]	; (4d70 <grid_port_receive_decode+0x4b4>)
    4c74:	4b3f      	ldr	r3, [pc, #252]	; (4d74 <grid_port_receive_decode+0x4b8>)
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN
    4c76:	4d40      	ldr	r5, [pc, #256]	; (4d78 <grid_port_receive_decode+0x4bc>)
							GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Connect");
    4c78:	4798      	blx	r3
							grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN
    4c7a:	2300      	movs	r3, #0
    4c7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    4c80:	e9cd 3200 	strd	r3, r2, [sp]
    4c84:	4835      	ldr	r0, [pc, #212]	; (4d5c <grid_port_receive_decode+0x4a0>)
    4c86:	22ff      	movs	r2, #255	; 0xff
    4c88:	4619      	mov	r1, r3
    4c8a:	47a8      	blx	r5
						por->ping_flag = 1;
    4c8c:	f642 7348 	movw	r3, #12104	; 0x2f48
    4c90:	2201      	movs	r2, #1
    4c92:	54e2      	strb	r2, [r4, r3]
    4c94:	e70a      	b.n	4aac <grid_port_receive_decode+0x1f0>
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4c96:	7a61      	ldrb	r1, [r4, #9]
    4c98:	78ea      	ldrb	r2, [r5, #3]
    4c9a:	1a52      	subs	r2, r2, r1
    4c9c:	3206      	adds	r2, #6
    4c9e:	4251      	negs	r1, r2
						validator &= local_token_received == por->ping_local_token;
    4ca0:	f642 7031 	movw	r0, #12081	; 0x2f31
						validator &= partner_token_received == por->ping_partner_token;
    4ca4:	f642 7c32 	movw	ip, #12082	; 0x2f32
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4ca8:	f001 0103 	and.w	r1, r1, #3
						validator &= local_token_received == por->ping_local_token;
    4cac:	5c20      	ldrb	r0, [r4, r0]
						validator &= partner_token_received == por->ping_partner_token;
    4cae:	f814 c00c 	ldrb.w	ip, [r4, ip]
						validator &= por->partner_fi == (message[3] - por->direction + 6)%4;
    4cb2:	f002 0203 	and.w	r2, r2, #3
    4cb6:	bf58      	it	pl
    4cb8:	424a      	negpl	r2, r1
    4cba:	f642 7130 	movw	r1, #12080	; 0x2f30
    4cbe:	4550      	cmp	r0, sl
    4cc0:	bf08      	it	eq
    4cc2:	45dc      	cmpeq	ip, fp
    4cc4:	5c61      	ldrb	r1, [r4, r1]
    4cc6:	bf0c      	ite	eq
    4cc8:	f04f 0a01 	moveq.w	sl, #1
    4ccc:	f04f 0a00 	movne.w	sl, #0
						validator &= por->partner_hwcfg == grid_sys_read_hex_string_value(&message[length-10], 2, error_flag);
    4cd0:	f642 732c 	movw	r3, #12076	; 0x2f2c
    4cd4:	f1a8 000a 	sub.w	r0, r8, #10
    4cd8:	428a      	cmp	r2, r1
    4cda:	bf14      	ite	ne
    4cdc:	f04f 0a00 	movne.w	sl, #0
    4ce0:	f00a 0a01 	andeq.w	sl, sl, #1
    4ce4:	4428      	add	r0, r5
    4ce6:	2200      	movs	r2, #0
    4ce8:	2102      	movs	r1, #2
    4cea:	f854 b003 	ldr.w	fp, [r4, r3]
    4cee:	47c8      	blx	r9
						if (validator == 1){
    4cf0:	4558      	cmp	r0, fp
    4cf2:	d103      	bne.n	4cfc <grid_port_receive_decode+0x440>
    4cf4:	f1ba 0f00 	cmp.w	sl, #0
    4cf8:	f47f aed8 	bne.w	4aac <grid_port_receive_decode+0x1f0>
							por->partner_status = 0;
    4cfc:	f642 734b 	movw	r3, #12107	; 0x2f4b
    4d00:	2200      	movs	r2, #0
    4d02:	54e2      	strb	r2, [r4, r3]
							por->ping_local_token = 255;
    4d04:	f642 7831 	movw	r8, #12081	; 0x2f31
							por->ping_partner_token = 255;
    4d08:	f642 7332 	movw	r3, #12082	; 0x2f32
    4d0c:	22ff      	movs	r2, #255	; 0xff
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d0e:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
							por->ping_partner_token = 255;
    4d12:	54e2      	strb	r2, [r4, r3]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d14:	4d12      	ldr	r5, [pc, #72]	; (4d60 <grid_port_receive_decode+0x4a4>)
							por->ping_local_token = 255;
    4d16:	f804 2008 	strb.w	r2, [r4, r8]
							grid_sys_write_hex_string_value(&por->ping_packet[8], 2, por->ping_partner_token);
    4d1a:	2102      	movs	r1, #2
    4d1c:	303b      	adds	r0, #59	; 0x3b
    4d1e:	47a8      	blx	r5
							grid_sys_write_hex_string_value(&por->ping_packet[6], 2, por->ping_local_token);
    4d20:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
    4d24:	f814 2008 	ldrb.w	r2, [r4, r8]
    4d28:	2102      	movs	r1, #2
    4d2a:	3039      	adds	r0, #57	; 0x39
    4d2c:	47a8      	blx	r5
							grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    4d2e:	f642 7347 	movw	r3, #12103	; 0x2f47
    4d32:	f504 553c 	add.w	r5, r4, #12032	; 0x2f00
    4d36:	3533      	adds	r5, #51	; 0x33
    4d38:	5ce1      	ldrb	r1, [r4, r3]
    4d3a:	6179      	str	r1, [r7, #20]
    4d3c:	4628      	mov	r0, r5
    4d3e:	47b0      	blx	r6
    4d40:	6979      	ldr	r1, [r7, #20]
    4d42:	4b08      	ldr	r3, [pc, #32]	; (4d64 <grid_port_receive_decode+0x4a8>)
    4d44:	4602      	mov	r2, r0
    4d46:	4628      	mov	r0, r5
    4d48:	4798      	blx	r3
    4d4a:	e6af      	b.n	4aac <grid_port_receive_decode+0x1f0>
				printf("{\"type\": \"WARNING\", \"data\": [\"Unknow Message Type\"]}\r\n");
    4d4c:	480b      	ldr	r0, [pc, #44]	; (4d7c <grid_port_receive_decode+0x4c0>)
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    4d4e:	4b0c      	ldr	r3, [pc, #48]	; (4d80 <grid_port_receive_decode+0x4c4>)
    4d50:	4798      	blx	r3
	return;
    4d52:	e6ab      	b.n	4aac <grid_port_receive_decode+0x1f0>
			printf("{\"type\": \"WARNING\", \"data\": [\"Invalid Checksum\"]}\r\n");
    4d54:	480b      	ldr	r0, [pc, #44]	; (4d84 <grid_port_receive_decode+0x4c8>)
    4d56:	e7fa      	b.n	4d4e <grid_port_receive_decode+0x492>
    4d58:	00009741 	.word	0x00009741
    4d5c:	20006fa4 	.word	0x20006fa4
    4d60:	00009821 	.word	0x00009821
    4d64:	0000999d 	.word	0x0000999d
    4d68:	000097f9 	.word	0x000097f9
    4d6c:	00015460 	.word	0x00015460
    4d70:	0001543b 	.word	0x0001543b
    4d74:	00013049 	.word	0x00013049
    4d78:	000097ab 	.word	0x000097ab
    4d7c:	00015468 	.word	0x00015468
    4d80:	000131b1 	.word	0x000131b1
    4d84:	0001549e 	.word	0x0001549e

00004d88 <grid_port_receive_task>:
void grid_port_receive_task(struct grid_port* por){
    4d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (por->usart_error_flag == 1){
    4d8a:	7e03      	ldrb	r3, [r0, #24]
    4d8c:	2b01      	cmp	r3, #1
void grid_port_receive_task(struct grid_port* por){
    4d8e:	4604      	mov	r4, r0
	if (por->usart_error_flag == 1){
    4d90:	d10d      	bne.n	4dae <grid_port_receive_task+0x26>
		por->usart_error_flag = 0;
    4d92:	2500      	movs	r5, #0
    4d94:	7605      	strb	r5, [r0, #24]
		grid_port_reset_receiver(por);
    4d96:	4b53      	ldr	r3, [pc, #332]	; (4ee4 <grid_port_receive_task+0x15c>)
    4d98:	4798      	blx	r3
		grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500); // White triangle
    4d9a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    4d9e:	e9cd 5300 	strd	r5, r3, [sp]
    4da2:	23ff      	movs	r3, #255	; 0xff
    4da4:	4850      	ldr	r0, [pc, #320]	; (4ee8 <grid_port_receive_task+0x160>)
    4da6:	4d51      	ldr	r5, [pc, #324]	; (4eec <grid_port_receive_task+0x164>)
    4da8:	461a      	mov	r2, r3
    4daa:	4619      	mov	r1, r3
    4dac:	47a8      	blx	r5
	if	(por->rx_double_buffer_status == 0){
    4dae:	6a25      	ldr	r5, [r4, #32]
    4db0:	bb7d      	cbnz	r5, 4e12 <grid_port_receive_task+0x8a>
		if (por->usart!=NULL){ // His is GRID usart port
    4db2:	6863      	ldr	r3, [r4, #4]
    4db4:	b1cb      	cbz	r3, 4dea <grid_port_receive_task+0x62>
			if (por->rx_double_buffer_timeout > 1000){
    4db6:	69e3      	ldr	r3, [r4, #28]
    4db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    4dbc:	d93e      	bls.n	4e3c <grid_port_receive_task+0xb4>
				if (por->partner_status == 1){
    4dbe:	f642 734b 	movw	r3, #12107	; 0x2f4b
    4dc2:	5ce3      	ldrb	r3, [r4, r3]
    4dc4:	2b01      	cmp	r3, #1
    4dc6:	d12c      	bne.n	4e22 <grid_port_receive_task+0x9a>
					GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout Disconnect & Reset Receiver");
    4dc8:	4949      	ldr	r1, [pc, #292]	; (4ef0 <grid_port_receive_task+0x168>)
    4dca:	4b4a      	ldr	r3, [pc, #296]	; (4ef4 <grid_port_receive_task+0x16c>)
    4dcc:	484a      	ldr	r0, [pc, #296]	; (4ef8 <grid_port_receive_task+0x170>)
    4dce:	4798      	blx	r3
					grid_port_reset_receiver(por);
    4dd0:	4b44      	ldr	r3, [pc, #272]	; (4ee4 <grid_port_receive_task+0x15c>)
    4dd2:	4620      	mov	r0, r4
    4dd4:	4798      	blx	r3
					grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 500);
    4dd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    4dda:	e9cd 5300 	strd	r5, r3, [sp]
    4dde:	23ff      	movs	r3, #255	; 0xff
    4de0:	4841      	ldr	r0, [pc, #260]	; (4ee8 <grid_port_receive_task+0x160>)
    4de2:	4d42      	ldr	r5, [pc, #264]	; (4eec <grid_port_receive_task+0x164>)
    4de4:	461a      	mov	r2, r3
    4de6:	4619      	mov	r1, r3
    4de8:	47a8      	blx	r5
			if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0)
    4dea:	f241 3687 	movw	r6, #4999	; 0x1387
void grid_port_receive_task(struct grid_port* por){
    4dee:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
			if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    4df2:	f241 30b4 	movw	r0, #5044	; 0x13b4
    4df6:	46b4      	mov	ip, r6
			if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0)
    4df8:	f241 3788 	movw	r7, #5000	; 0x1388
			if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    4dfc:	f241 3e86 	movw	lr, #4998	; 0x1386
			if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 10){ // \n
    4e00:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4e02:	18a3      	adds	r3, r4, r2
    4e04:	5c1b      	ldrb	r3, [r3, r0]
    4e06:	2b0a      	cmp	r3, #10
    4e08:	d11b      	bne.n	4e42 <grid_port_receive_task+0xba>
				por->rx_double_buffer_timeout = 0;
    4e0a:	2300      	movs	r3, #0
    4e0c:	2501      	movs	r5, #1
    4e0e:	e9c4 3507 	strd	r3, r5, [r4, #28]
	if (por->rx_double_buffer_read_start_index < por->rx_double_buffer_seek_start_index){
    4e12:	e9d4 2109 	ldrd	r2, r1, [r4, #36]	; 0x24
    4e16:	4291      	cmp	r1, r2
    4e18:	d359      	bcc.n	4ece <grid_port_receive_task+0x146>
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4e1a:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
    4e1e:	3209      	adds	r2, #9
    4e20:	e056      	b.n	4ed0 <grid_port_receive_task+0x148>
					if (por->rx_double_buffer_read_start_index == 0 && por->rx_double_buffer_seek_start_index == 0){
    4e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4e24:	b913      	cbnz	r3, 4e2c <grid_port_receive_task+0xa4>
    4e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d0de      	beq.n	4dea <grid_port_receive_task+0x62>
						GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_PORT, "Timeout & Reset Receiver");
    4e2c:	4933      	ldr	r1, [pc, #204]	; (4efc <grid_port_receive_task+0x174>)
    4e2e:	4b31      	ldr	r3, [pc, #196]	; (4ef4 <grid_port_receive_task+0x16c>)
    4e30:	4831      	ldr	r0, [pc, #196]	; (4ef8 <grid_port_receive_task+0x170>)
    4e32:	4798      	blx	r3
						grid_port_reset_receiver(por);
    4e34:	4b2b      	ldr	r3, [pc, #172]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e36:	4620      	mov	r0, r4
    4e38:	4798      	blx	r3
    4e3a:	e7d6      	b.n	4dea <grid_port_receive_task+0x62>
				por->rx_double_buffer_timeout++;
    4e3c:	3301      	adds	r3, #1
    4e3e:	61e3      	str	r3, [r4, #28]
    4e40:	e7d3      	b.n	4dea <grid_port_receive_task+0x62>
			else if (por->rx_double_buffer[por->rx_double_buffer_seek_start_index] == 0){
    4e42:	b923      	cbnz	r3, 4e4e <grid_port_receive_task+0xc6>
	if (por->rx_double_buffer_status == 0){
    4e44:	6a23      	ldr	r3, [r4, #32]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d1e3      	bne.n	4e12 <grid_port_receive_task+0x8a>
}
    4e4a:	b003      	add	sp, #12
    4e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (por->rx_double_buffer_seek_start_index == por->rx_double_buffer_read_start_index-1)
    4e4e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    4e50:	1e6b      	subs	r3, r5, #1
    4e52:	429a      	cmp	r2, r3
    4e54:	d10d      	bne.n	4e72 <grid_port_receive_task+0xea>
				grid_port_reset_receiver(por);	
    4e56:	4b23      	ldr	r3, [pc, #140]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e58:	4620      	mov	r0, r4
    4e5a:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 255, 0, 0, 2, 200); // RED
    4e5c:	2302      	movs	r3, #2
    4e5e:	20c8      	movs	r0, #200	; 0xc8
    4e60:	e9cd 3000 	strd	r3, r0, [sp]
    4e64:	2300      	movs	r3, #0
    4e66:	461a      	mov	r2, r3
    4e68:	21ff      	movs	r1, #255	; 0xff
				grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 255, 2, 200); // RED
    4e6a:	481f      	ldr	r0, [pc, #124]	; (4ee8 <grid_port_receive_task+0x160>)
    4e6c:	4c1f      	ldr	r4, [pc, #124]	; (4eec <grid_port_receive_task+0x164>)
    4e6e:	47a0      	blx	r4
				return;
    4e70:	e7eb      	b.n	4e4a <grid_port_receive_task+0xc2>
			if (por->rx_double_buffer_seek_start_index == GRID_DOUBLE_BUFFER_RX_SIZE-1 && por->rx_double_buffer_read_start_index == 0)
    4e72:	42b2      	cmp	r2, r6
    4e74:	d10b      	bne.n	4e8e <grid_port_receive_task+0x106>
    4e76:	b955      	cbnz	r5, 4e8e <grid_port_receive_task+0x106>
				grid_port_reset_receiver(por);
    4e78:	4b1a      	ldr	r3, [pc, #104]	; (4ee4 <grid_port_receive_task+0x15c>)
    4e7a:	4620      	mov	r0, r4
    4e7c:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 2, 200); // RED
    4e7e:	2302      	movs	r3, #2
    4e80:	21c8      	movs	r1, #200	; 0xc8
    4e82:	e9cd 3100 	strd	r3, r1, [sp]
    4e86:	22ff      	movs	r2, #255	; 0xff
    4e88:	462b      	mov	r3, r5
    4e8a:	4629      	mov	r1, r5
    4e8c:	e7ed      	b.n	4e6a <grid_port_receive_task+0xe2>
			if (por->rx_double_buffer[(por->rx_double_buffer_read_start_index + GRID_DOUBLE_BUFFER_RX_SIZE -1)%GRID_DOUBLE_BUFFER_RX_SIZE] !=0)
    4e8e:	4465      	add	r5, ip
    4e90:	fbb5 f3f7 	udiv	r3, r5, r7
    4e94:	fb07 5513 	mls	r5, r7, r3, r5
    4e98:	4425      	add	r5, r4
    4e9a:	5c2b      	ldrb	r3, [r5, r0]
    4e9c:	b153      	cbz	r3, 4eb4 <grid_port_receive_task+0x12c>
				grid_port_reset_receiver(por);
    4e9e:	4b11      	ldr	r3, [pc, #68]	; (4ee4 <grid_port_receive_task+0x15c>)
    4ea0:	4620      	mov	r0, r4
    4ea2:	4798      	blx	r3
				grid_sys_alert_set_alert(&grid_sys_state, 0, 0, 255, 2, 200); // RED
    4ea4:	2302      	movs	r3, #2
    4ea6:	22c8      	movs	r2, #200	; 0xc8
    4ea8:	e9cd 3200 	strd	r3, r2, [sp]
    4eac:	2200      	movs	r2, #0
    4eae:	23ff      	movs	r3, #255	; 0xff
    4eb0:	4611      	mov	r1, r2
    4eb2:	e7da      	b.n	4e6a <grid_port_receive_task+0xe2>
			if (por->rx_double_buffer_seek_start_index < GRID_DOUBLE_BUFFER_RX_SIZE-1){
    4eb4:	4572      	cmp	r2, lr
				por->rx_double_buffer_seek_start_index++;
    4eb6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
    4eba:	bf98      	it	ls
    4ebc:	3201      	addls	r2, #1
    4ebe:	b289      	uxth	r1, r1
				por->rx_double_buffer_timeout = 0;
    4ec0:	61e3      	str	r3, [r4, #28]
				por->rx_double_buffer_seek_start_index++;
    4ec2:	bf94      	ite	ls
    4ec4:	6262      	strls	r2, [r4, #36]	; 0x24
				por->rx_double_buffer_seek_start_index=0;
    4ec6:	6263      	strhi	r3, [r4, #36]	; 0x24
		for(uint16_t i = 0; i<490; i++){
    4ec8:	2900      	cmp	r1, #0
    4eca:	d199      	bne.n	4e00 <grid_port_receive_task+0x78>
    4ecc:	e7ba      	b.n	4e44 <grid_port_receive_task+0xbc>
		length = por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4ece:	3201      	adds	r2, #1
		length = GRID_DOUBLE_BUFFER_RX_SIZE + por->rx_double_buffer_seek_start_index - por->rx_double_buffer_read_start_index + 1;
    4ed0:	1a52      	subs	r2, r2, r1
	grid_port_receive_decode(por, por->rx_double_buffer_read_start_index, length);
    4ed2:	4b0b      	ldr	r3, [pc, #44]	; (4f00 <grid_port_receive_task+0x178>)
    4ed4:	b292      	uxth	r2, r2
    4ed6:	b289      	uxth	r1, r1
    4ed8:	4620      	mov	r0, r4
    4eda:	4798      	blx	r3
	por->rx_double_buffer_status = 0;
    4edc:	2300      	movs	r3, #0
    4ede:	6223      	str	r3, [r4, #32]
    4ee0:	e7b3      	b.n	4e4a <grid_port_receive_task+0xc2>
    4ee2:	bf00      	nop
    4ee4:	00004731 	.word	0x00004731
    4ee8:	20006fa4 	.word	0x20006fa4
    4eec:	000097ab 	.word	0x000097ab
    4ef0:	000154d1 	.word	0x000154d1
    4ef4:	00013049 	.word	0x00013049
    4ef8:	0001543b 	.word	0x0001543b
    4efc:	000154f5 	.word	0x000154f5
    4f00:	000048bd 	.word	0x000048bd

00004f04 <grid_buffer_read_size>:
	return 1;
}

uint16_t grid_buffer_read_size(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    4f04:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
    4f08:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4f0c:	428b      	cmp	r3, r1
uint16_t grid_buffer_read_size(struct grid_buffer* buf){
    4f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f10:	4602      	mov	r2, r0
	if (buf->read_active != buf->read_stop) {
    4f12:	d000      	beq.n	4f16 <grid_buffer_read_size+0x12>
		while(1){
    4f14:	e7fe      	b.n	4f14 <grid_buffer_read_size+0x10>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    4f16:	f8b0 63ea 	ldrh.w	r6, [r0, #1002]	; 0x3ea
    4f1a:	42b3      	cmp	r3, r6
    4f1c:	d000      	beq.n	4f20 <grid_buffer_read_size+0x1c>
		while(1){
    4f1e:	e7fe      	b.n	4f1e <grid_buffer_read_size+0x1a>
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	
	if (buf->read_start == buf->write_start) {
    4f20:	f8b0 73f2 	ldrh.w	r7, [r0, #1010]	; 0x3f2
    4f24:	42be      	cmp	r6, r7
    4f26:	d016      	beq.n	4f56 <grid_buffer_read_size+0x52>
	}
	
	
	
	// Seek message end character
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f28:	8805      	ldrh	r5, [r0, #0]
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f2a:	2400      	movs	r4, #0
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f2c:	b2a3      	uxth	r3, r4
    4f2e:	429d      	cmp	r5, r3
    4f30:	d800      	bhi.n	4f34 <grid_buffer_read_size+0x30>
		}
		
		
	}
	
	while(1){
    4f32:	e7fe      	b.n	4f32 <grid_buffer_read_size+0x2e>
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f34:	1930      	adds	r0, r6, r4
    4f36:	fbb0 f1f5 	udiv	r1, r0, r5
    4f3a:	fb05 0111 	mls	r1, r5, r1, r0
		if (index == buf->write_start) return 0;
    4f3e:	b288      	uxth	r0, r1
    4f40:	4287      	cmp	r7, r0
    4f42:	d008      	beq.n	4f56 <grid_buffer_read_size+0x52>
		if (buf->buffer_storage[index] == '\n'){
    4f44:	4411      	add	r1, r2
    4f46:	3301      	adds	r3, #1
    4f48:	b298      	uxth	r0, r3
    4f4a:	788b      	ldrb	r3, [r1, #2]
    4f4c:	2b0a      	cmp	r3, #10
    4f4e:	f104 0401 	add.w	r4, r4, #1
    4f52:	d1eb      	bne.n	4f2c <grid_buffer_read_size+0x28>
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    4f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    4f56:	2000      	movs	r0, #0
    4f58:	e7fc      	b.n	4f54 <grid_buffer_read_size+0x50>

00004f5a <grid_buffer_read_init>:

uint16_t grid_buffer_read_init(struct grid_buffer* buf){
	
	if (buf->read_active != buf->read_stop) {
    4f5a:	f8b0 23ec 	ldrh.w	r2, [r0, #1004]	; 0x3ec
    4f5e:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4f62:	4293      	cmp	r3, r2
uint16_t grid_buffer_read_init(struct grid_buffer* buf){
    4f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->read_active != buf->read_stop) {
    4f66:	d000      	beq.n	4f6a <grid_buffer_read_init+0x10>
		while(1){
    4f68:	e7fe      	b.n	4f68 <grid_buffer_read_init+0xe>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	
	if (buf->read_start	 != buf->read_stop) {
    4f6a:	f8b0 53ea 	ldrh.w	r5, [r0, #1002]	; 0x3ea
    4f6e:	42ab      	cmp	r3, r5
    4f70:	d000      	beq.n	4f74 <grid_buffer_read_init+0x1a>
		while(1){
    4f72:	e7fe      	b.n	4f72 <grid_buffer_read_init+0x18>
		// TRAP: TRANSMISSION WAS NOT OVER YET
		}	
	}
	
	if (buf->read_start == buf->write_start) {
    4f74:	f8b0 63f2 	ldrh.w	r6, [r0, #1010]	; 0x3f2
    4f78:	42b5      	cmp	r5, r6
    4f7a:	d020      	beq.n	4fbe <grid_buffer_read_init+0x64>
	}
	
	
	
	// Seek message end character	
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f7c:	8801      	ldrh	r1, [r0, #0]
		
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f7e:	2400      	movs	r4, #0
	for (uint16_t i=0; i<buf->buffer_length; i++){
    4f80:	b2a3      	uxth	r3, r4
    4f82:	4299      	cmp	r1, r3
    4f84:	d800      	bhi.n	4f88 <grid_buffer_read_init+0x2e>
		}
		
		
	}
		
	while(1){
    4f86:	e7fe      	b.n	4f86 <grid_buffer_read_init+0x2c>
		uint16_t index = (buf->read_start + i)%buf->buffer_length;
    4f88:	192f      	adds	r7, r5, r4
    4f8a:	fbb7 f2f1 	udiv	r2, r7, r1
    4f8e:	fb01 7212 	mls	r2, r1, r2, r7
		if (index == buf->write_start) return 0;	
    4f92:	b297      	uxth	r7, r2
    4f94:	42be      	cmp	r6, r7
    4f96:	d012      	beq.n	4fbe <grid_buffer_read_init+0x64>
		if (buf->buffer_storage[index] == '\n'){
    4f98:	1887      	adds	r7, r0, r2
    4f9a:	3301      	adds	r3, #1
    4f9c:	78bf      	ldrb	r7, [r7, #2]
    4f9e:	2f0a      	cmp	r7, #10
    4fa0:	b29b      	uxth	r3, r3
    4fa2:	f104 0401 	add.w	r4, r4, #1
    4fa6:	d1eb      	bne.n	4f80 <grid_buffer_read_init+0x26>
			buf->read_stop = (index+1)%buf->buffer_length;
    4fa8:	3201      	adds	r2, #1
    4faa:	fbb2 f4f1 	udiv	r4, r2, r1
    4fae:	fb01 2214 	mls	r2, r1, r4, r2
    4fb2:	f8a0 23ec 	strh.w	r2, [r0, #1004]	; 0x3ec
			buf->read_length = i+1;
    4fb6:	f8a0 33f0 	strh.w	r3, [r0, #1008]	; 0x3f0
		// TRAP: TRANSMISSION WAS NOT OVER YET
	}
	
	
}
    4fba:	4618      	mov	r0, r3
    4fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    4fbe:	2300      	movs	r3, #0
    4fc0:	e7fb      	b.n	4fba <grid_buffer_read_init+0x60>

00004fc2 <grid_buffer_read_character>:

uint8_t grid_buffer_read_character(struct grid_buffer* buf){
	
	// Check if packet is not over
	if (buf->read_active != buf->read_stop){
    4fc2:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4fc6:	f8b0 13ec 	ldrh.w	r1, [r0, #1004]	; 0x3ec
    4fca:	4299      	cmp	r1, r3
uint8_t grid_buffer_read_character(struct grid_buffer* buf){
    4fcc:	b510      	push	{r4, lr}
    4fce:	4602      	mov	r2, r0
	if (buf->read_active != buf->read_stop){
    4fd0:	d00b      	beq.n	4fea <grid_buffer_read_character+0x28>
		
		uint8_t character = buf->buffer_storage[buf->read_active];
		
		buf->read_active++;
		buf->read_active %= buf->buffer_length;
    4fd2:	8814      	ldrh	r4, [r2, #0]
		uint8_t character = buf->buffer_storage[buf->read_active];
    4fd4:	18c1      	adds	r1, r0, r3
		buf->read_active++;
    4fd6:	3301      	adds	r3, #1
		buf->read_active %= buf->buffer_length;
    4fd8:	b29b      	uxth	r3, r3
		uint8_t character = buf->buffer_storage[buf->read_active];
    4fda:	7888      	ldrb	r0, [r1, #2]
		buf->read_active %= buf->buffer_length;
    4fdc:	fbb3 f1f4 	udiv	r1, r3, r4
    4fe0:	fb04 3311 	mls	r3, r4, r1, r3
    4fe4:	f8a2 33ee 	strh.w	r3, [r2, #1006]	; 0x3ee
			// TRAP: TRANSMISSION WAS OVER ALREADY
		}
	}
	

}
    4fe8:	bd10      	pop	{r4, pc}
		while(1){
    4fea:	e7fe      	b.n	4fea <grid_buffer_read_character+0x28>

00004fec <grid_buffer_read_acknowledge>:

// TRANSMISSION WAS ACKNOWLEDGED, PACKET CAN BE DELETED
uint8_t grid_buffer_read_acknowledge(struct grid_buffer* buf){
	
	// Check if packet is really over
	if (buf->read_active == buf->read_stop){
    4fec:	f8b0 23ec 	ldrh.w	r2, [r0, #1004]	; 0x3ec
    4ff0:	f8b0 33ee 	ldrh.w	r3, [r0, #1006]	; 0x3ee
    4ff4:	4293      	cmp	r3, r2
    4ff6:	d000      	beq.n	4ffa <grid_buffer_read_acknowledge+0xe>
		buf->read_start = buf->read_stop;
		return 1;
	}else{
		
		while(1){
    4ff8:	e7fe      	b.n	4ff8 <grid_buffer_read_acknowledge+0xc>
		buf->read_start = buf->read_stop;
    4ffa:	f8a0 33ea 	strh.w	r3, [r0, #1002]	; 0x3ea
			// TRAP: TRANSMISSION WAS NOT OVER YET
		}
	}
	

}
    4ffe:	2001      	movs	r0, #1
    5000:	4770      	bx	lr
	...

00005004 <grid_port_init>:
	buf->read_start  = buf->read_stop;
	
	return 1;
}

void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    5004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5008:	4604      	mov	r4, r0
	
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    500a:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    500e:	b087      	sub	sp, #28
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5010:	f8df 8148 	ldr.w	r8, [pc, #328]	; 515c <grid_port_init+0x158>
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    5014:	460d      	mov	r5, r1
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5016:	303c      	adds	r0, #60	; 0x3c
    5018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
void grid_port_init(volatile struct grid_port* por, struct usart_async_descriptor*  usart, uint8_t type, uint8_t dir, uint8_t dma){
    501c:	4616      	mov	r6, r2
    501e:	461f      	mov	r7, r3
	grid_buffer_init(&por->tx_buffer, GRID_BUFFER_SIZE);
    5020:	47c0      	blx	r8
	grid_buffer_init(&por->rx_buffer, GRID_BUFFER_SIZE);
    5022:	f504 502c 	add.w	r0, r4, #11008	; 0x2b00
    5026:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    502a:	3034      	adds	r0, #52	; 0x34
    502c:	47c0      	blx	r8
	
	
	por->cooldown = 0;
    502e:	2000      	movs	r0, #0
	
	por->dma_channel = dma;
    5030:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	por->cooldown = 0;
    5034:	6020      	str	r0, [r4, #0]
	
	por->tx_double_buffer_status	= 0;
	por->rx_double_buffer_status	= 0;
	
	
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    5036:	f241 3288 	movw	r2, #5000	; 0x1388
	por->dma_channel = dma;
    503a:	72a3      	strb	r3, [r4, #10]
	por->direction = dir;
    503c:	7267      	strb	r7, [r4, #9]
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    503e:	4603      	mov	r3, r0
	por->usart	= usart;
    5040:	6065      	str	r5, [r4, #4]
	por->type		= type;
    5042:	7226      	strb	r6, [r4, #8]
	por->tx_double_buffer_status	= 0;
    5044:	81a0      	strh	r0, [r4, #12]
	por->rx_double_buffer_status	= 0;
    5046:	6220      	str	r0, [r4, #32]
		por->tx_double_buffer[i] = 0;		
    5048:	18e1      	adds	r1, r4, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    504a:	3301      	adds	r3, #1
    504c:	4293      	cmp	r3, r2
		por->tx_double_buffer[i] = 0;		
    504e:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    5052:	d1f9      	bne.n	5048 <grid_port_init+0x44>
	}
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5054:	2300      	movs	r3, #0
		por->rx_double_buffer[i] = 0;
    5056:	f241 31b4 	movw	r1, #5044	; 0x13b4
    505a:	461d      	mov	r5, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    505c:	f241 3288 	movw	r2, #5000	; 0x1388
		por->rx_double_buffer[i] = 0;
    5060:	18e0      	adds	r0, r4, r3
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5062:	3301      	adds	r3, #1
    5064:	4293      	cmp	r3, r2
		por->rx_double_buffer[i] = 0;
    5066:	5445      	strb	r5, [r0, r1]
	for (uint32_t i=0; i<GRID_DOUBLE_BUFFER_RX_SIZE; i++){
    5068:	d1fa      	bne.n	5060 <grid_port_init+0x5c>
	}
	
	por->partner_fi = 0;
	
	por->partner_hwcfg = 0;
    506a:	f642 732c 	movw	r3, #12076	; 0x2f2c
	por->partner_fi = 0;
    506e:	f642 7130 	movw	r1, #12080	; 0x2f30
	por->partner_status = 1;
	
	por->ping_local_token = 255;
    5072:	f642 7031 	movw	r0, #12081	; 0x2f31
	por->partner_fi = 0;
    5076:	5465      	strb	r5, [r4, r1]
	por->partner_hwcfg = 0;
    5078:	50e5      	str	r5, [r4, r3]
	por->partner_status = 1;
    507a:	f642 734b 	movw	r3, #12107	; 0x2f4b
    507e:	2201      	movs	r2, #1
	por->ping_local_token = 255;
    5080:	27ff      	movs	r7, #255	; 0xff
	por->partner_status = 1;
    5082:	54e2      	strb	r2, [r4, r3]
	por->ping_local_token = 255;
    5084:	5427      	strb	r7, [r4, r0]
	por->ping_partner_token = 255;
    5086:	f642 7032 	movw	r0, #12082	; 0x2f32
	
	por->ping_flag = 0;
	
	if (type == GRID_PORT_TYPE_USART){	
    508a:	4296      	cmp	r6, r2
	por->ping_partner_token = 255;
    508c:	5427      	strb	r7, [r4, r0]
	por->ping_flag = 0;
    508e:	f642 7048 	movw	r0, #12104	; 0x2f48
    5092:	5425      	strb	r5, [r4, r0]
	if (type == GRID_PORT_TYPE_USART){	
    5094:	d156      	bne.n	5144 <grid_port_init+0x140>
		
		por->partner_status = 0;
    5096:	54e5      	strb	r5, [r4, r3]
		por->partner_fi = 0;
    5098:	5465      	strb	r5, [r4, r1]
		
		
		sprintf(por->ping_packet, "%c%c%c%c%02x%02x%02x%c00\n", GRID_CONST_SOH, GRID_CONST_DCT, GRID_CONST_BELL, por->direction, grid_sys_get_hwcfg(), 255, 255, GRID_CONST_EOT);
    509a:	4b2b      	ldr	r3, [pc, #172]	; (5148 <grid_port_init+0x144>)
    509c:	f894 9009 	ldrb.w	r9, [r4, #9]
    50a0:	4798      	blx	r3
    50a2:	f504 583c 	add.w	r8, r4, #12032	; 0x2f00
    50a6:	2304      	movs	r3, #4
    50a8:	f108 0833 	add.w	r8, r8, #51	; 0x33
    50ac:	e9cd 7304 	strd	r7, r3, [sp, #16]
    50b0:	fa5f f989 	uxtb.w	r9, r9
    50b4:	2307      	movs	r3, #7
    50b6:	4632      	mov	r2, r6
    50b8:	4924      	ldr	r1, [pc, #144]	; (514c <grid_port_init+0x148>)
    50ba:	f8cd 9004 	str.w	r9, [sp, #4]
    50be:	e9cd 0702 	strd	r0, r7, [sp, #8]
    50c2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 5160 <grid_port_init+0x15c>
    50c6:	9300      	str	r3, [sp, #0]
    50c8:	4640      	mov	r0, r8
    50ca:	230e      	movs	r3, #14
    50cc:	47c8      	blx	r9
		
		por->ping_packet_length = strlen(por->ping_packet);	
    50ce:	4b20      	ldr	r3, [pc, #128]	; (5150 <grid_port_init+0x14c>)
    50d0:	4640      	mov	r0, r8
    50d2:	4798      	blx	r3
    50d4:	f642 7347 	movw	r3, #12103	; 0x2f47
    50d8:	b2c0      	uxtb	r0, r0
    50da:	54e0      	strb	r0, [r4, r3]
			
		grid_msg_checksum_write(por->ping_packet, por->ping_packet_length, grid_msg_calculate_checksum_of_packet_string(por->ping_packet, por->ping_packet_length));
    50dc:	4640      	mov	r0, r8
    50de:	f814 9003 	ldrb.w	r9, [r4, r3]
    50e2:	5ce1      	ldrb	r1, [r4, r3]
    50e4:	4b1b      	ldr	r3, [pc, #108]	; (5154 <grid_port_init+0x150>)
    50e6:	4798      	blx	r3
    50e8:	fa5f f989 	uxtb.w	r9, r9
    50ec:	4b1a      	ldr	r3, [pc, #104]	; (5158 <grid_port_init+0x154>)
    50ee:	4602      	mov	r2, r0
    50f0:	4649      	mov	r1, r9
    50f2:	4640      	mov	r0, r8
    50f4:	4798      	blx	r3
		

		
		if (por->direction == GRID_CONST_NORTH){
    50f6:	7a63      	ldrb	r3, [r4, #9]
    50f8:	2b11      	cmp	r3, #17
    50fa:	d108      	bne.n	510e <grid_port_init+0x10a>
			por->dx = 0;
    50fc:	f642 7349 	movw	r3, #12105	; 0x2f49
    5100:	54e5      	strb	r5, [r4, r3]
			por->dy = 1;
    5102:	f642 734a 	movw	r3, #12106	; 0x2f4a
    5106:	54e6      	strb	r6, [r4, r3]
	}
	else{
		por->partner_status = 1; //UI AND USB are considered to be connected by default
	}
	
}
    5108:	b007      	add	sp, #28
    510a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else if (por->direction == GRID_CONST_EAST){
    510e:	7a63      	ldrb	r3, [r4, #9]
    5110:	2b12      	cmp	r3, #18
    5112:	d106      	bne.n	5122 <grid_port_init+0x11e>
			por->dx = 1;
    5114:	f642 7349 	movw	r3, #12105	; 0x2f49
    5118:	54e6      	strb	r6, [r4, r3]
			por->dy = 0;
    511a:	f642 734a 	movw	r3, #12106	; 0x2f4a
    511e:	54e5      	strb	r5, [r4, r3]
    5120:	e7f2      	b.n	5108 <grid_port_init+0x104>
		else if (por->direction == GRID_CONST_SOUTH){
    5122:	7a63      	ldrb	r3, [r4, #9]
    5124:	2b13      	cmp	r3, #19
    5126:	d106      	bne.n	5136 <grid_port_init+0x132>
			por->dx = 0;
    5128:	f642 7349 	movw	r3, #12105	; 0x2f49
    512c:	54e5      	strb	r5, [r4, r3]
			por->dy = -1;
    512e:	f642 734a 	movw	r3, #12106	; 0x2f4a
    5132:	54e7      	strb	r7, [r4, r3]
    5134:	e7e8      	b.n	5108 <grid_port_init+0x104>
		else if (por->direction == GRID_CONST_WEST){
    5136:	7a63      	ldrb	r3, [r4, #9]
    5138:	2b14      	cmp	r3, #20
    513a:	d1e5      	bne.n	5108 <grid_port_init+0x104>
			por->dx = -1;
    513c:	f642 7349 	movw	r3, #12105	; 0x2f49
    5140:	54e7      	strb	r7, [r4, r3]
    5142:	e7ea      	b.n	511a <grid_port_init+0x116>
		por->partner_status = 1; //UI AND USB are considered to be connected by default
    5144:	54e2      	strb	r2, [r4, r3]
}
    5146:	e7df      	b.n	5108 <grid_port_init+0x104>
    5148:	00009885 	.word	0x00009885
    514c:	0001550e 	.word	0x0001550e
    5150:	00013981 	.word	0x00013981
    5154:	00009969 	.word	0x00009969
    5158:	0000999d 	.word	0x0000999d
    515c:	000047dd 	.word	0x000047dd
    5160:	000134b9 	.word	0x000134b9

00005164 <grid_port_init_all>:

void grid_port_init_all(void){
    5164:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	
	grid_port_init(&GRID_PORT_N, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_CONST_NORTH ,0);
    5168:	2600      	movs	r6, #0
    516a:	4d1c      	ldr	r5, [pc, #112]	; (51dc <grid_port_init_all+0x78>)
    516c:	491c      	ldr	r1, [pc, #112]	; (51e0 <grid_port_init_all+0x7c>)
    516e:	481d      	ldr	r0, [pc, #116]	; (51e4 <grid_port_init_all+0x80>)
    5170:	9600      	str	r6, [sp, #0]
	grid_port_init(&GRID_PORT_E, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_CONST_EAST  ,1);
    5172:	2401      	movs	r4, #1
	grid_port_init(&GRID_PORT_N, &USART_NORTH, GRID_PORT_TYPE_USART, GRID_CONST_NORTH ,0);
    5174:	2311      	movs	r3, #17
    5176:	2201      	movs	r2, #1
    5178:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_S, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_CONST_SOUTH ,2);
    517a:	f04f 0902 	mov.w	r9, #2
	grid_port_init(&GRID_PORT_E, &USART_EAST,  GRID_PORT_TYPE_USART, GRID_CONST_EAST  ,1);
    517e:	4622      	mov	r2, r4
    5180:	4919      	ldr	r1, [pc, #100]	; (51e8 <grid_port_init_all+0x84>)
    5182:	481a      	ldr	r0, [pc, #104]	; (51ec <grid_port_init_all+0x88>)
    5184:	9400      	str	r4, [sp, #0]
    5186:	2312      	movs	r3, #18
    5188:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_W, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_CONST_WEST  ,3);
    518a:	2703      	movs	r7, #3
	grid_port_init(&GRID_PORT_S, &USART_SOUTH, GRID_PORT_TYPE_USART, GRID_CONST_SOUTH ,2);
    518c:	4622      	mov	r2, r4
    518e:	4918      	ldr	r1, [pc, #96]	; (51f0 <grid_port_init_all+0x8c>)
    5190:	4818      	ldr	r0, [pc, #96]	; (51f4 <grid_port_init_all+0x90>)
    5192:	f8cd 9000 	str.w	r9, [sp]
    5196:	2313      	movs	r3, #19
    5198:	47a8      	blx	r5
	
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    519a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 5204 <grid_port_init_all+0xa0>
	grid_port_init(&GRID_PORT_W, &USART_WEST,  GRID_PORT_TYPE_USART, GRID_CONST_WEST  ,3);
    519e:	9700      	str	r7, [sp, #0]
    51a0:	4622      	mov	r2, r4
    51a2:	4915      	ldr	r1, [pc, #84]	; (51f8 <grid_port_init_all+0x94>)
    51a4:	4815      	ldr	r0, [pc, #84]	; (51fc <grid_port_init_all+0x98>)
    51a6:	2314      	movs	r3, #20
    51a8:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    51aa:	f04f 0aff 	mov.w	sl, #255	; 0xff
    51ae:	463a      	mov	r2, r7
	grid_port_init(&GRID_PORT_H, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    51b0:	4f13      	ldr	r7, [pc, #76]	; (5200 <grid_port_init_all+0x9c>)
	grid_port_init(&GRID_PORT_U, NULL, GRID_PORT_TYPE_UI, 0, -1);
    51b2:	f8cd a000 	str.w	sl, [sp]
    51b6:	4633      	mov	r3, r6
    51b8:	4631      	mov	r1, r6
    51ba:	4640      	mov	r0, r8
    51bc:	47a8      	blx	r5
	grid_port_init(&GRID_PORT_H, NULL, GRID_PORT_TYPE_USB, 0, -1);	
    51be:	4633      	mov	r3, r6
    51c0:	f8cd a000 	str.w	sl, [sp]
    51c4:	464a      	mov	r2, r9
    51c6:	4631      	mov	r1, r6
    51c8:	4638      	mov	r0, r7
    51ca:	47a8      	blx	r5
	
	GRID_PORT_U.partner_status = 1; // UI IS ALWAYS CONNECTED
    51cc:	f642 734b 	movw	r3, #12107	; 0x2f4b
    51d0:	f808 4003 	strb.w	r4, [r8, r3]
	GRID_PORT_H.partner_status = 1; // HOST IS ALWAYS CONNECTED (Not really!)
    51d4:	54fc      	strb	r4, [r7, r3]
	
	
}
    51d6:	b002      	add	sp, #8
    51d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51dc:	00005005 	.word	0x00005005
    51e0:	20014c64 	.word	0x20014c64
    51e4:	200010ec 	.word	0x200010ec
    51e8:	20014c10 	.word	0x20014c10
    51ec:	200116d8 	.word	0x200116d8
    51f0:	20014d68 	.word	0x20014d68
    51f4:	2000b73c 	.word	0x2000b73c
    51f8:	20014d18 	.word	0x20014d18
    51fc:	20008270 	.word	0x20008270
    5200:	2000e68c 	.word	0x2000e68c
    5204:	2000404c 	.word	0x2000404c

00005208 <grid_port_process_inbound>:


//=============================== PROCESS INBOUND ==============================//


uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    520c:	f500 582c 	add.w	r8, r0, #11008	; 0x2b00
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5210:	b091      	sub	sp, #68	; 0x44
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    5212:	f108 0834 	add.w	r8, r8, #52	; 0x34
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    5216:	af02      	add	r7, sp, #8
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    5218:	4b5c      	ldr	r3, [pc, #368]	; (538c <grid_port_process_inbound+0x184>)
uint8_t grid_port_process_inbound(struct grid_port* por, uint8_t loopback){
    521a:	6079      	str	r1, [r7, #4]
    521c:	4606      	mov	r6, r0
	uint16_t packet_size = grid_buffer_read_size(&por->rx_buffer);
    521e:	4640      	mov	r0, r8
    5220:	4798      	blx	r3
	
	if (!packet_size){
    5222:	4605      	mov	r5, r0
    5224:	2800      	cmp	r0, #0
    5226:	f000 80af 	beq.w	5388 <grid_port_process_inbound+0x180>
		uint8_t port_count = 6;
		struct grid_port* port_array_default[port_count];
		struct grid_port* port_array[port_count];
		
		
		port_array_default[0] = &GRID_PORT_N;
    522a:	4b59      	ldr	r3, [pc, #356]	; (5390 <grid_port_process_inbound+0x188>)
    522c:	60bb      	str	r3, [r7, #8]
		port_array_default[1] = &GRID_PORT_E;
    522e:	4b59      	ldr	r3, [pc, #356]	; (5394 <grid_port_process_inbound+0x18c>)
    5230:	60fb      	str	r3, [r7, #12]
		port_array_default[2] = &GRID_PORT_S;
    5232:	4b59      	ldr	r3, [pc, #356]	; (5398 <grid_port_process_inbound+0x190>)
    5234:	613b      	str	r3, [r7, #16]
		port_array_default[3] = &GRID_PORT_W;
    5236:	4b59      	ldr	r3, [pc, #356]	; (539c <grid_port_process_inbound+0x194>)
    5238:	617b      	str	r3, [r7, #20]
		
		port_array_default[4] = &GRID_PORT_U;
    523a:	4b59      	ldr	r3, [pc, #356]	; (53a0 <grid_port_process_inbound+0x198>)
    523c:	61bb      	str	r3, [r7, #24]
		port_array_default[5] = &GRID_PORT_H;
    523e:	4b59      	ldr	r3, [pc, #356]	; (53a4 <grid_port_process_inbound+0x19c>)
    5240:	61fb      	str	r3, [r7, #28]
	}else{
    5242:	46eb      	mov	fp, sp
		
		uint8_t j=0;
		
		for(uint8_t i=0; i<port_count; i++){
    5244:	f107 0308 	add.w	r3, r7, #8
		port_array_default[5] = &GRID_PORT_H;
    5248:	f04f 0906 	mov.w	r9, #6
		uint8_t j=0;
    524c:	2400      	movs	r4, #0
			if (port_array_default[i]->partner_status != 0){
    524e:	f642 714b 	movw	r1, #12107	; 0x2f4b
    5252:	f853 2b04 	ldr.w	r2, [r3], #4
    5256:	5c50      	ldrb	r0, [r2, r1]
    5258:	b138      	cbz	r0, 526a <grid_port_process_inbound+0x62>
				port_array[j] = port_array_default[i];
    525a:	f107 0038 	add.w	r0, r7, #56	; 0x38
    525e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
				j++;
    5262:	3401      	adds	r4, #1
				port_array[j] = port_array_default[i];
    5264:	f840 2c18 	str.w	r2, [r0, #-24]
				j++;
    5268:	b2e4      	uxtb	r4, r4
		for(uint8_t i=0; i<port_count; i++){
    526a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    526e:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    5272:	d1ee      	bne.n	5252 <grid_port_process_inbound+0x4a>
		
		for (uint8_t i=0; i<port_count; i++)
		{
			if (port_array[i] != por || loopback){
			
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    5274:	4a4c      	ldr	r2, [pc, #304]	; (53a8 <grid_port_process_inbound+0x1a0>)
    5276:	4649      	mov	r1, r9
			if (port_array[i] != por || loopback){
    5278:	f107 0a20 	add.w	sl, r7, #32
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    527c:	f242 7c3c 	movw	ip, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    5280:	b2c8      	uxtb	r0, r1
    5282:	4284      	cmp	r4, r0
    5284:	d805      	bhi.n	5292 <grid_port_process_inbound+0x8a>
					return 0;
				}	
			}	
		}
		
		if (packet_size != grid_buffer_read_init(&por->rx_buffer)){
    5286:	4b49      	ldr	r3, [pc, #292]	; (53ac <grid_port_process_inbound+0x1a4>)
    5288:	4640      	mov	r0, r8
    528a:	4798      	blx	r3
    528c:	42a8      	cmp	r0, r5
    528e:	d047      	beq.n	5320 <grid_port_process_inbound+0x118>
			while(1){			
    5290:	e7fe      	b.n	5290 <grid_port_process_inbound+0x88>
			if (port_array[i] != por || loopback){
    5292:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
    5296:	42b0      	cmp	r0, r6
    5298:	d101      	bne.n	529e <grid_port_process_inbound+0x96>
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	b1b3      	cbz	r3, 52cc <grid_port_process_inbound+0xc4>
				if (packet_size > grid_buffer_write_size(&port_array[i]->tx_buffer)){
    529e:	4460      	add	r0, ip
    52a0:	4790      	blx	r2
    52a2:	42a8      	cmp	r0, r5
    52a4:	4a40      	ldr	r2, [pc, #256]	; (53a8 <grid_port_process_inbound+0x1a0>)
    52a6:	f242 7c3c 	movw	ip, #10044	; 0x273c
    52aa:	d20f      	bcs.n	52cc <grid_port_process_inbound+0xc4>
					grid_sys_alert_set_alert(&grid_sys_state, 100,100,0,2,200);
    52ac:	2302      	movs	r3, #2
    52ae:	22c8      	movs	r2, #200	; 0xc8
    52b0:	e9cd 3200 	strd	r3, r2, [sp]
    52b4:	2264      	movs	r2, #100	; 0x64
    52b6:	483e      	ldr	r0, [pc, #248]	; (53b0 <grid_port_process_inbound+0x1a8>)
    52b8:	4c3e      	ldr	r4, [pc, #248]	; (53b4 <grid_port_process_inbound+0x1ac>)
    52ba:	2300      	movs	r3, #0
    52bc:	4611      	mov	r1, r2
    52be:	47a0      	blx	r4
					return 0;
    52c0:	46dd      	mov	sp, fp
		}	

		return 1;
	}
		
}
    52c2:	4648      	mov	r0, r9
    52c4:	373c      	adds	r7, #60	; 0x3c
    52c6:	46bd      	mov	sp, r7
    52c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (uint8_t i=0; i<port_count; i++)
    52cc:	3101      	adds	r1, #1
    52ce:	e7d7      	b.n	5280 <grid_port_process_inbound+0x78>
			if (port_array[i] != por || loopback){
    52d0:	f85a 0029 	ldr.w	r0, [sl, r9, lsl #2]
    52d4:	42b0      	cmp	r0, r6
    52d6:	d101      	bne.n	52dc <grid_port_process_inbound+0xd4>
    52d8:	6879      	ldr	r1, [r7, #4]
    52da:	b129      	cbz	r1, 52e8 <grid_port_process_inbound+0xe0>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    52dc:	4418      	add	r0, r3
    52de:	4629      	mov	r1, r5
    52e0:	4790      	blx	r2
    52e2:	4a35      	ldr	r2, [pc, #212]	; (53b8 <grid_port_process_inbound+0x1b0>)
    52e4:	f242 733c 	movw	r3, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    52e8:	f109 0901 	add.w	r9, r9, #1
    52ec:	fa5f f189 	uxtb.w	r1, r9
    52f0:	428c      	cmp	r4, r1
    52f2:	d8ed      	bhi.n	52d0 <grid_port_process_inbound+0xc8>
    52f4:	f04f 0a00 	mov.w	sl, #0
		for (uint16_t j=0; j<packet_size; j++)
    52f8:	fa1f f38a 	uxth.w	r3, sl
    52fc:	429d      	cmp	r5, r3
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    52fe:	4640      	mov	r0, r8
		for (uint16_t j=0; j<packet_size; j++)
    5300:	d816      	bhi.n	5330 <grid_port_process_inbound+0x128>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    5302:	4b2e      	ldr	r3, [pc, #184]	; (53bc <grid_port_process_inbound+0x1b4>)
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5304:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 53c8 <grid_port_process_inbound+0x1c0>
		grid_buffer_read_acknowledge(&por->rx_buffer);
    5308:	4798      	blx	r3
			if (port_array[i] != por || loopback){
    530a:	f107 0520 	add.w	r5, r7, #32
		for (uint8_t i=0; i<port_count; i++)
    530e:	2100      	movs	r1, #0
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5310:	f242 783c 	movw	r8, #10044	; 0x273c
		for (uint8_t i=0; i<port_count; i++)
    5314:	b2cb      	uxtb	r3, r1
    5316:	429c      	cmp	r4, r3
    5318:	d82c      	bhi.n	5374 <grid_port_process_inbound+0x16c>
		return 1;
    531a:	f04f 0901 	mov.w	r9, #1
    531e:	e7cf      	b.n	52c0 <grid_port_process_inbound+0xb8>
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    5320:	4a25      	ldr	r2, [pc, #148]	; (53b8 <grid_port_process_inbound+0x1b0>)
    5322:	f04f 0900 	mov.w	r9, #0
			if (port_array[i] != por || loopback){
    5326:	f107 0a20 	add.w	sl, r7, #32
				grid_buffer_write_init(&port_array[i]->tx_buffer, packet_size);
    532a:	f242 733c 	movw	r3, #10044	; 0x273c
    532e:	e7dd      	b.n	52ec <grid_port_process_inbound+0xe4>
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    5330:	4b23      	ldr	r3, [pc, #140]	; (53c0 <grid_port_process_inbound+0x1b8>)
    5332:	4798      	blx	r3
			for (uint8_t i=0; i<port_count; i++){
    5334:	f04f 0900 	mov.w	r9, #0
			uint8_t character = grid_buffer_read_character(&por->rx_buffer);
    5338:	4601      	mov	r1, r0
				if (port_array[i] != por || loopback){
    533a:	f107 0320 	add.w	r3, r7, #32
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    533e:	f242 7c3c 	movw	ip, #10044	; 0x273c
			for (uint8_t i=0; i<port_count; i++){
    5342:	fa5f f089 	uxtb.w	r0, r9
    5346:	4284      	cmp	r4, r0
    5348:	d802      	bhi.n	5350 <grid_port_process_inbound+0x148>
		for (uint16_t j=0; j<packet_size; j++)
    534a:	f10a 0a01 	add.w	sl, sl, #1
    534e:	e7d3      	b.n	52f8 <grid_port_process_inbound+0xf0>
				if (port_array[i] != por || loopback){
    5350:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
    5354:	42b0      	cmp	r0, r6
    5356:	d101      	bne.n	535c <grid_port_process_inbound+0x154>
    5358:	687a      	ldr	r2, [r7, #4]
    535a:	b142      	cbz	r2, 536e <grid_port_process_inbound+0x166>
					grid_buffer_write_character(&port_array[i]->tx_buffer, character);
    535c:	4b19      	ldr	r3, [pc, #100]	; (53c4 <grid_port_process_inbound+0x1bc>)
    535e:	6039      	str	r1, [r7, #0]
    5360:	4460      	add	r0, ip
    5362:	4798      	blx	r3
    5364:	6839      	ldr	r1, [r7, #0]
    5366:	f107 0320 	add.w	r3, r7, #32
    536a:	f242 7c3c 	movw	ip, #10044	; 0x273c
			for (uint8_t i=0; i<port_count; i++){
    536e:	f109 0901 	add.w	r9, r9, #1
    5372:	e7e6      	b.n	5342 <grid_port_process_inbound+0x13a>
			if (port_array[i] != por || loopback){
    5374:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]
    5378:	42b0      	cmp	r0, r6
    537a:	d101      	bne.n	5380 <grid_port_process_inbound+0x178>
    537c:	687b      	ldr	r3, [r7, #4]
    537e:	b10b      	cbz	r3, 5384 <grid_port_process_inbound+0x17c>
				grid_buffer_write_acknowledge(&port_array[i]->tx_buffer);
    5380:	4440      	add	r0, r8
    5382:	47c8      	blx	r9
		for (uint8_t i=0; i<port_count; i++)
    5384:	3101      	adds	r1, #1
    5386:	e7c5      	b.n	5314 <grid_port_process_inbound+0x10c>
		return 0;
    5388:	4681      	mov	r9, r0
    538a:	e79a      	b.n	52c2 <grid_port_process_inbound+0xba>
    538c:	00004f05 	.word	0x00004f05
    5390:	200010ec 	.word	0x200010ec
    5394:	200116d8 	.word	0x200116d8
    5398:	2000b73c 	.word	0x2000b73c
    539c:	20008270 	.word	0x20008270
    53a0:	2000404c 	.word	0x2000404c
    53a4:	2000e68c 	.word	0x2000e68c
    53a8:	00004821 	.word	0x00004821
    53ac:	00004f5b 	.word	0x00004f5b
    53b0:	20006fa4 	.word	0x20006fa4
    53b4:	000097ab 	.word	0x000097ab
    53b8:	00004839 	.word	0x00004839
    53bc:	00004fed 	.word	0x00004fed
    53c0:	00004fc3 	.word	0x00004fc3
    53c4:	00004875 	.word	0x00004875
    53c8:	00004895 	.word	0x00004895

000053cc <grid_port_process_outbound_usb>:



//=============================== PROCESS OUTBOUND ==============================//

uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    53cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			

	// OLD DEBUG IMPLEMENTATION
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    53d0:	f500 551c 	add.w	r5, r0, #9984	; 0x2700
    53d4:	353c      	adds	r5, #60	; 0x3c
    53d6:	4ba7      	ldr	r3, [pc, #668]	; (5674 <grid_port_process_outbound_usb+0x2a8>)
uint8_t grid_port_process_outbound_usb(struct grid_port* por){
    53d8:	b0ed      	sub	sp, #436	; 0x1b4
    53da:	4680      	mov	r8, r0
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    53dc:	4628      	mov	r0, r5
    53de:	4798      	blx	r3
	
	if (!length){		
    53e0:	4604      	mov	r4, r0
    53e2:	b910      	cbnz	r0, 53ea <grid_port_process_outbound_usb+0x1e>
			
	// Let's send the packet through USB
	cdcdf_acm_write(por->tx_double_buffer, packet_length);

	
}
    53e4:	b06d      	add	sp, #436	; 0x1b4
    53e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53ea:	f108 0b2c 	add.w	fp, r8, #44	; 0x2c
    53ee:	f508 539d 	add.w	r3, r8, #5024	; 0x13a0
    53f2:	3314      	adds	r3, #20
	if (!length){		
    53f4:	465a      	mov	r2, fp
		por->tx_double_buffer[i] = 0;
    53f6:	2100      	movs	r1, #0
    53f8:	f802 1b01 	strb.w	r1, [r2], #1
	for(uint16_t i=0; i<GRID_DOUBLE_BUFFER_TX_SIZE; i++){
    53fc:	429a      	cmp	r2, r3
    53fe:	d1fb      	bne.n	53f8 <grid_port_process_outbound_usb+0x2c>
	grid_msg_init(&message);
    5400:	4b9d      	ldr	r3, [pc, #628]	; (5678 <grid_port_process_outbound_usb+0x2ac>)
		grid_msg_packet_receive_char(&message, nextchar);
    5402:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 56bc <grid_port_process_outbound_usb+0x2f0>
	grid_msg_init(&message);
    5406:	a805      	add	r0, sp, #20
    5408:	4798      	blx	r3
	grid_buffer_read_init(&por->tx_buffer);
    540a:	4b9c      	ldr	r3, [pc, #624]	; (567c <grid_port_process_outbound_usb+0x2b0>)
    540c:	4628      	mov	r0, r5
    540e:	4798      	blx	r3
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    5410:	4b9b      	ldr	r3, [pc, #620]	; (5680 <grid_port_process_outbound_usb+0x2b4>)
	for (uint16_t i = 0; i<length; i++){
    5412:	46da      	mov	sl, fp
    5414:	2700      	movs	r7, #0
    5416:	b2ba      	uxth	r2, r7
    5418:	4294      	cmp	r4, r2
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    541a:	4628      	mov	r0, r5
	for (uint16_t i = 0; i<length; i++){
    541c:	d825      	bhi.n	546a <grid_port_process_outbound_usb+0x9e>
	grid_buffer_read_acknowledge(&por->tx_buffer);
    541e:	4b99      	ldr	r3, [pc, #612]	; (5684 <grid_port_process_outbound_usb+0x2b8>)
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    5420:	4c99      	ldr	r4, [pc, #612]	; (5688 <grid_port_process_outbound_usb+0x2bc>)
	grid_buffer_read_acknowledge(&por->tx_buffer);
    5422:	4798      	blx	r3
	int8_t dx = grid_msg_header_get_dx(&message) - GRID_SYS_DEFAULT_POSITION;
    5424:	4b99      	ldr	r3, [pc, #612]	; (568c <grid_port_process_outbound_usb+0x2c0>)
    5426:	a805      	add	r0, sp, #20
    5428:	4798      	blx	r3
    542a:	387f      	subs	r0, #127	; 0x7f
    542c:	b243      	sxtb	r3, r0
    542e:	9300      	str	r3, [sp, #0]
	int8_t dy = grid_msg_header_get_dy(&message) - GRID_SYS_DEFAULT_POSITION;	
    5430:	a805      	add	r0, sp, #20
    5432:	4b97      	ldr	r3, [pc, #604]	; (5690 <grid_port_process_outbound_usb+0x2c4>)
    5434:	4798      	blx	r3
    5436:	387f      	subs	r0, #127	; 0x7f
    5438:	b243      	sxtb	r3, r0
	for (uint16_t i=0; i<message.body_length; i++){
    543a:	f04f 0a00 	mov.w	sl, #0
	int8_t dy = grid_msg_header_get_dy(&message) - GRID_SYS_DEFAULT_POSITION;	
    543e:	9301      	str	r3, [sp, #4]
	uint8_t current_start		= 0;
    5440:	4656      	mov	r6, sl
	for (uint16_t i=0; i<message.body_length; i++){
    5442:	9a6a      	ldr	r2, [sp, #424]	; 0x1a8
    5444:	fa1f f38a 	uxth.w	r3, sl
    5448:	429a      	cmp	r2, r3
    544a:	d818      	bhi.n	547e <grid_port_process_outbound_usb+0xb2>
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    544c:	4b91      	ldr	r3, [pc, #580]	; (5694 <grid_port_process_outbound_usb+0x2c8>)
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    544e:	4e92      	ldr	r6, [pc, #584]	; (5698 <grid_port_process_outbound_usb+0x2cc>)
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    5450:	a805      	add	r0, sp, #20
    5452:	4798      	blx	r3
	for (uint32_t i=0; i<packet_length; i++){
    5454:	2400      	movs	r4, #0
	uint32_t packet_length = grid_msg_packet_get_length(&message);
    5456:	4605      	mov	r5, r0
	for (uint32_t i=0; i<packet_length; i++){
    5458:	42ac      	cmp	r4, r5
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    545a:	4621      	mov	r1, r4
	for (uint32_t i=0; i<packet_length; i++){
    545c:	f040 8104 	bne.w	5668 <grid_port_process_outbound_usb+0x29c>
	cdcdf_acm_write(por->tx_double_buffer, packet_length);
    5460:	4b8e      	ldr	r3, [pc, #568]	; (569c <grid_port_process_outbound_usb+0x2d0>)
    5462:	f108 002c 	add.w	r0, r8, #44	; 0x2c
    5466:	4798      	blx	r3
}
    5468:	e7bc      	b.n	53e4 <grid_port_process_outbound_usb+0x18>
		uint8_t nextchar = grid_buffer_read_character(&por->tx_buffer);
    546a:	4798      	blx	r3
    546c:	4606      	mov	r6, r0
		grid_msg_packet_receive_char(&message, nextchar);
    546e:	4601      	mov	r1, r0
    5470:	a805      	add	r0, sp, #20
    5472:	47c8      	blx	r9
		por->tx_double_buffer[i] = nextchar;	
    5474:	3701      	adds	r7, #1
    5476:	f80a 6b01 	strb.w	r6, [sl], #1
	for (uint16_t i = 0; i<length; i++){
    547a:	4b81      	ldr	r3, [pc, #516]	; (5680 <grid_port_process_outbound_usb+0x2b4>)
    547c:	e7cb      	b.n	5416 <grid_port_process_outbound_usb+0x4a>
		if (message.body[i] == GRID_CONST_STX){
    547e:	aa05      	add	r2, sp, #20
    5480:	4413      	add	r3, r2
    5482:	7d1b      	ldrb	r3, [r3, #20]
    5484:	2b02      	cmp	r3, #2
    5486:	d104      	bne.n	5492 <grid_port_process_outbound_usb+0xc6>
			current_start = i;
    5488:	fa5f f68a 	uxtb.w	r6, sl
	for (uint16_t i=0; i<message.body_length; i++){
    548c:	f10a 0a01 	add.w	sl, sl, #1
    5490:	e7d7      	b.n	5442 <grid_port_process_outbound_usb+0x76>
		else if (message.body[i] == GRID_CONST_ETX && current_start!=0){
    5492:	2b03      	cmp	r3, #3
    5494:	d1fa      	bne.n	548c <grid_port_process_outbound_usb+0xc0>
    5496:	b90e      	cbnz	r6, 549c <grid_port_process_outbound_usb+0xd0>
			current_start = 0;
    5498:	2600      	movs	r6, #0
			else if (msg_class == GRID_CLASS_HIDKEYBOARD_code && msg_instr == GRID_INSTR_EXECUTE_code){
    549a:	e7f7      	b.n	548c <grid_port_process_outbound_usb+0xc0>
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    549c:	4631      	mov	r1, r6
    549e:	2201      	movs	r2, #1
    54a0:	a805      	add	r0, sp, #20
    54a2:	47a0      	blx	r4
    54a4:	4635      	mov	r5, r6
			uint8_t msg_instr = grid_msg_text_get_parameter(&message, current_start, GRID_INSTR_offset, GRID_INSTR_length);
    54a6:	2301      	movs	r3, #1
			uint8_t msg_class = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_offset, GRID_CLASS_length);
    54a8:	b2c6      	uxtb	r6, r0
			uint8_t msg_instr = grid_msg_text_get_parameter(&message, current_start, GRID_INSTR_offset, GRID_INSTR_length);
    54aa:	2204      	movs	r2, #4
    54ac:	4629      	mov	r1, r5
    54ae:	a805      	add	r0, sp, #20
    54b0:	47a0      	blx	r4
    54b2:	b2c0      	uxtb	r0, r0
			if (msg_class == GRID_CLASS_MIDIRELATIVE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    54b4:	2e00      	cmp	r6, #0
    54b6:	d13f      	bne.n	5538 <grid_port_process_outbound_usb+0x16c>
    54b8:	280e      	cmp	r0, #14
    54ba:	d1ed      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t midi_cablecommand = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_offset,		GRID_CLASS_MIDIRELATIVE_CABLECOMMAND_length);
    54bc:	4629      	mov	r1, r5
    54be:	2302      	movs	r3, #2
    54c0:	2205      	movs	r2, #5
    54c2:	a805      	add	r0, sp, #20
    54c4:	47a0      	blx	r4
				uint8_t midi_commandchannel = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset ,		GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length);
    54c6:	4629      	mov	r1, r5
    54c8:	2302      	movs	r3, #2
    54ca:	2207      	movs	r2, #7
    54cc:	a805      	add	r0, sp, #20
    54ce:	47a0      	blx	r4
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54d0:	4629      	mov	r1, r5
				uint8_t midi_commandchannel = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_offset ,		GRID_CLASS_MIDIRELATIVE_COMMANDCHANNEL_length);
    54d2:	4681      	mov	r9, r0
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54d4:	2302      	movs	r3, #2
    54d6:	2209      	movs	r2, #9
    54d8:	a805      	add	r0, sp, #20
    54da:	47a0      	blx	r4
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54dc:	4629      	mov	r1, r5
				uint8_t midi_param1  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM1_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM1_length);
    54de:	4607      	mov	r7, r0
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54e0:	2302      	movs	r3, #2
    54e2:	220b      	movs	r2, #11
    54e4:	a805      	add	r0, sp, #20
    54e6:	47a0      	blx	r4
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54e8:	9901      	ldr	r1, [sp, #4]
    54ea:	4a6d      	ldr	r2, [pc, #436]	; (56a0 <grid_port_process_outbound_usb+0x2d4>)
				uint8_t midi_param2  = grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIRELATIVE_PARAM2_offset  ,			GRID_CLASS_MIDIRELATIVE_PARAM2_length);
    54ec:	f88d 000f 	strb.w	r0, [sp, #15]
				uint8_t midi_command = 	(midi_commandchannel&0xF0)>>4;
    54f0:	f3c9 1303 	ubfx	r3, r9, #4, #4
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54f4:	7bd2      	ldrb	r2, [r2, #15]
				midievent.byte0 = 0<<4|midi_command;
    54f6:	f88d 300c 	strb.w	r3, [sp, #12]
				uint8_t midi_channel = ((256-dy*1)%4+grid_sys_state.bank_activebank_number*4)%16;
    54fa:	f1c1 0900 	rsb	r9, r1, #0
    54fe:	f009 0903 	and.w	r9, r9, #3
    5502:	eb09 0982 	add.w	r9, r9, r2, lsl #2
    5506:	f009 090f 	and.w	r9, r9, #15
				midievent.byte1 = midi_command<<4|midi_channel;
    550a:	ea49 1903 	orr.w	r9, r9, r3, lsl #4
				midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    550e:	b2ff      	uxtb	r7, r7
    5510:	9b00      	ldr	r3, [sp, #0]
				midievent.byte1 = midi_command<<4|midi_channel;
    5512:	f88d 900d 	strb.w	r9, [sp, #13]
				midi_param1  = (256-32+midi_param1 + 16*dx)%96; // 96-128 reserved
    5516:	37e0      	adds	r7, #224	; 0xe0
    5518:	2260      	movs	r2, #96	; 0x60
    551a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    551e:	fb97 f3f2 	sdiv	r3, r7, r2
    5522:	fb02 7713 	mls	r7, r2, r3, r7
    5526:	f88d 700e 	strb.w	r7, [sp, #14]
				grid_midi_tx_push(midievent);
    552a:	9803      	ldr	r0, [sp, #12]
    552c:	4b5d      	ldr	r3, [pc, #372]	; (56a4 <grid_port_process_outbound_usb+0x2d8>)
    552e:	4798      	blx	r3
				grid_midi_tx_pop(midievent);				
    5530:	9803      	ldr	r0, [sp, #12]
    5532:	4b5d      	ldr	r3, [pc, #372]	; (56a8 <grid_port_process_outbound_usb+0x2dc>)
    5534:	4798      	blx	r3
			if (msg_class == GRID_CLASS_MIDIRELATIVE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    5536:	e7a9      	b.n	548c <grid_port_process_outbound_usb+0xc0>
			else if (msg_class == GRID_CLASS_MIDIABSOLUTE_code && msg_instr == GRID_INSTR_EXECUTE_code){
    5538:	2e01      	cmp	r6, #1
    553a:	d127      	bne.n	558c <grid_port_process_outbound_usb+0x1c0>
    553c:	280e      	cmp	r0, #14
    553e:	d1ab      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    5540:	4629      	mov	r1, r5
    5542:	2302      	movs	r3, #2
    5544:	2205      	movs	r2, #5
    5546:	a805      	add	r0, sp, #20
    5548:	47a0      	blx	r4
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    554a:	4629      	mov	r1, r5
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    554c:	4681      	mov	r9, r0
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    554e:	2302      	movs	r3, #2
    5550:	2207      	movs	r2, #7
    5552:	a805      	add	r0, sp, #20
    5554:	47a0      	blx	r4
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5556:	4629      	mov	r1, r5
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    5558:	4607      	mov	r7, r0
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    555a:	2302      	movs	r3, #2
    555c:	2209      	movs	r2, #9
    555e:	a805      	add	r0, sp, #20
    5560:	47a0      	blx	r4
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    5562:	220b      	movs	r2, #11
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5564:	4606      	mov	r6, r0
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    5566:	4629      	mov	r1, r5
    5568:	2302      	movs	r3, #2
    556a:	a805      	add	r0, sp, #20
    556c:	47a0      	blx	r4
				uint8_t midi_cablecommand =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_offset,		GRID_CLASS_MIDIABSOLUTE_CABLECOMMAND_length);
    556e:	f88d 900c 	strb.w	r9, [sp, #12]
				uint8_t midi_commandchannel =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_offset,		GRID_CLASS_MIDIABSOLUTE_COMMANDCHANNEL_length);
    5572:	f88d 700d 	strb.w	r7, [sp, #13]
				uint8_t midi_param1  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM1_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM1_length);
    5576:	f88d 600e 	strb.w	r6, [sp, #14]
				uint8_t midi_param2  =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_MIDIABSOLUTE_PARAM2_offset  ,			GRID_CLASS_MIDIABSOLUTE_PARAM2_length);
    557a:	f88d 000f 	strb.w	r0, [sp, #15]
				grid_midi_tx_push(midievent);
    557e:	9803      	ldr	r0, [sp, #12]
    5580:	4b48      	ldr	r3, [pc, #288]	; (56a4 <grid_port_process_outbound_usb+0x2d8>)
    5582:	4798      	blx	r3
				grid_midi_tx_pop(midievent);	
    5584:	9803      	ldr	r0, [sp, #12]
    5586:	4b48      	ldr	r3, [pc, #288]	; (56a8 <grid_port_process_outbound_usb+0x2dc>)
    5588:	4798      	blx	r3
    558a:	e785      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
			else if (msg_class == GRID_CLASS_HIDKEYBOARD_code && msg_instr == GRID_INSTR_EXECUTE_code){
    558c:	2e90      	cmp	r6, #144	; 0x90
    558e:	d11d      	bne.n	55cc <grid_port_process_outbound_usb+0x200>
    5590:	280e      	cmp	r0, #14
    5592:	d181      	bne.n	5498 <grid_port_process_outbound_usb+0xcc>
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    5594:	4629      	mov	r1, r5
    5596:	2302      	movs	r3, #2
    5598:	2205      	movs	r2, #5
    559a:	a805      	add	r0, sp, #20
    559c:	47a0      	blx	r4
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    559e:	4629      	mov	r1, r5
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    55a0:	4607      	mov	r7, r0
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55a2:	2302      	movs	r3, #2
    55a4:	2207      	movs	r2, #7
    55a6:	a805      	add	r0, sp, #20
    55a8:	47a0      	blx	r4
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55aa:	4629      	mov	r1, r5
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55ac:	4606      	mov	r6, r0
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55ae:	2302      	movs	r3, #2
    55b0:	2209      	movs	r2, #9
    55b2:	a805      	add	r0, sp, #20
    55b4:	47a0      	blx	r4
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55b6:	4b3d      	ldr	r3, [pc, #244]	; (56ac <grid_port_process_outbound_usb+0x2e0>)
				uint8_t key_state  =		grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYSTATE_offset  ,			GRID_CLASS_HIDKEYBOARD_KEYSTATE_length);
    55b8:	f88d 000e 	strb.w	r0, [sp, #14]
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55bc:	a903      	add	r1, sp, #12
    55be:	483c      	ldr	r0, [pc, #240]	; (56b0 <grid_port_process_outbound_usb+0x2e4>)
				uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_offset,		GRID_CLASS_HIDKEYBOARD_KEYISMODIFIER_length);
    55c0:	f88d 700d 	strb.w	r7, [sp, #13]
				uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYBOARD_KEYCODE_offset,				GRID_CLASS_HIDKEYBOARD_KEYCODE_length);
    55c4:	f88d 600c 	strb.w	r6, [sp, #12]
				grid_keyboard_keychange(&grid_keyboard_state, &key);
    55c8:	4798      	blx	r3
    55ca:	e765      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
			else if (msg_class == GRID_CLASS_HIDKEYMACRO_code && msg_instr == GRID_INSTR_EXECUTE_code){
    55cc:	2e91      	cmp	r6, #145	; 0x91
    55ce:	f47f af63 	bne.w	5498 <grid_port_process_outbound_usb+0xcc>
    55d2:	280e      	cmp	r0, #14
    55d4:	f47f af60 	bne.w	5498 <grid_port_process_outbound_usb+0xcc>
    55d8:	2605      	movs	r6, #5
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    55da:	2302      	movs	r3, #2
    55dc:	4632      	mov	r2, r6
    55de:	4629      	mov	r1, r5
    55e0:	a805      	add	r0, sp, #20
    55e2:	47a0      	blx	r4
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    55e4:	1cb2      	adds	r2, r6, #2
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    55e6:	4607      	mov	r7, r0
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    55e8:	2302      	movs	r3, #2
    55ea:	b2d2      	uxtb	r2, r2
    55ec:	4629      	mov	r1, r5
    55ee:	a805      	add	r0, sp, #20
    55f0:	47a0      	blx	r4
    55f2:	b2c0      	uxtb	r0, r0
                    if (key_code != 255){
    55f4:	28ff      	cmp	r0, #255	; 0xff
    55f6:	d00d      	beq.n	5614 <grid_port_process_outbound_usb+0x248>
                        key.ispressed = 1;
    55f8:	2201      	movs	r2, #1
    55fa:	f88d 200e 	strb.w	r2, [sp, #14]
                        key.delay = 100;
    55fe:	2264      	movs	r2, #100	; 0x64
                        key.ismodifier = key_ismodifier;
    5600:	ab03      	add	r3, sp, #12
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5602:	f88d 700d 	strb.w	r7, [sp, #13]
                        key.keycode = key_code;
    5606:	f88d 000c 	strb.w	r0, [sp, #12]
                        key.delay = 100;
    560a:	9204      	str	r2, [sp, #16]
                        grid_keyboard_tx_push(key);
    560c:	e893 0003 	ldmia.w	r3, {r0, r1}
    5610:	4b28      	ldr	r3, [pc, #160]	; (56b4 <grid_port_process_outbound_usb+0x2e8>)
    5612:	4798      	blx	r3
				for (uint8_t k=0; k<6; k++){
    5614:	3604      	adds	r6, #4
    5616:	b2f6      	uxtb	r6, r6
    5618:	2e1d      	cmp	r6, #29
    561a:	d1de      	bne.n	55da <grid_port_process_outbound_usb+0x20e>
                delay_ms(5);
    561c:	4b26      	ldr	r3, [pc, #152]	; (56b8 <grid_port_process_outbound_usb+0x2ec>)
    561e:	2005      	movs	r0, #5
    5620:	4798      	blx	r3
    5622:	2605      	movs	r6, #5
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5624:	2302      	movs	r3, #2
    5626:	4632      	mov	r2, r6
    5628:	4629      	mov	r1, r5
    562a:	a805      	add	r0, sp, #20
    562c:	47a0      	blx	r4
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    562e:	1cb2      	adds	r2, r6, #2
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    5630:	4607      	mov	r7, r0
                    uint8_t key_code =			grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYCODE0_offset + k*4,          GRID_CLASS_HIDKEYMACRO_KEYCODE0_length);
    5632:	2302      	movs	r3, #2
    5634:	b2d2      	uxtb	r2, r2
    5636:	4629      	mov	r1, r5
    5638:	a805      	add	r0, sp, #20
    563a:	47a0      	blx	r4
    563c:	b2c0      	uxtb	r0, r0
                    if (key_code != 255){
    563e:	28ff      	cmp	r0, #255	; 0xff
    5640:	d00d      	beq.n	565e <grid_port_process_outbound_usb+0x292>
                        key.ispressed = 0;
    5642:	2200      	movs	r2, #0
    5644:	f88d 200e 	strb.w	r2, [sp, #14]
                        key.delay = 100;
    5648:	2264      	movs	r2, #100	; 0x64
                        key.ismodifier = key_ismodifier;
    564a:	ab03      	add	r3, sp, #12
                    uint8_t key_ismodifier =	grid_msg_text_get_parameter(&message, current_start, GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_offset + k*4,	GRID_CLASS_HIDKEYMACRO_KEYISMODIFIER0_length);
    564c:	f88d 700d 	strb.w	r7, [sp, #13]
                        key.keycode = key_code;
    5650:	f88d 000c 	strb.w	r0, [sp, #12]
                        key.delay = 100;
    5654:	9204      	str	r2, [sp, #16]
                        grid_keyboard_tx_push(key);
    5656:	e893 0003 	ldmia.w	r3, {r0, r1}
    565a:	4b16      	ldr	r3, [pc, #88]	; (56b4 <grid_port_process_outbound_usb+0x2e8>)
    565c:	4798      	blx	r3
				for (uint8_t k=0; k<6; k++){
    565e:	3604      	adds	r6, #4
    5660:	b2f6      	uxtb	r6, r6
    5662:	2e1d      	cmp	r6, #29
    5664:	d1de      	bne.n	5624 <grid_port_process_outbound_usb+0x258>
    5666:	e717      	b.n	5498 <grid_port_process_outbound_usb+0xcc>
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    5668:	a805      	add	r0, sp, #20
    566a:	47b0      	blx	r6
	for (uint32_t i=0; i<packet_length; i++){
    566c:	3401      	adds	r4, #1
		por->tx_double_buffer[i] = grid_msg_packet_send_char(&message, i);
    566e:	f80b 0b01 	strb.w	r0, [fp], #1
	for (uint32_t i=0; i<packet_length; i++){
    5672:	e6f1      	b.n	5458 <grid_port_process_outbound_usb+0x8c>
    5674:	00004f05 	.word	0x00004f05
    5678:	00008545 	.word	0x00008545
    567c:	00004f5b 	.word	0x00004f5b
    5680:	00004fc3 	.word	0x00004fc3
    5684:	00004fed 	.word	0x00004fed
    5688:	0000850d 	.word	0x0000850d
    568c:	00008401 	.word	0x00008401
    5690:	00008441 	.word	0x00008441
    5694:	000084a1 	.word	0x000084a1
    5698:	0000863b 	.word	0x0000863b
    569c:	0000bb9d 	.word	0x0000bb9d
    56a0:	20006fa4 	.word	0x20006fa4
    56a4:	0000b2b5 	.word	0x0000b2b5
    56a8:	0000b2dd 	.word	0x0000b2dd
    56ac:	0000b0ed 	.word	0x0000b0ed
    56b0:	20008200 	.word	0x20008200
    56b4:	0000b3c5 	.word	0x0000b3c5
    56b8:	0000d165 	.word	0x0000d165
    56bc:	000085ed 	.word	0x000085ed

000056c0 <grid_port_process_outbound_ui>:

uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    56c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56c4:	ed2d 8b02 	vpush	{d8}
	
	
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    56c8:	f500 541c 	add.w	r4, r0, #9984	; 0x2700
    56cc:	343c      	adds	r4, #60	; 0x3c
uint8_t grid_port_process_outbound_ui(struct grid_port* por){
    56ce:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
	uint16_t length = grid_buffer_read_size(&por->tx_buffer);
    56d2:	4bb5      	ldr	r3, [pc, #724]	; (59a8 <grid_port_process_outbound_ui+0x2e8>)
    56d4:	4620      	mov	r0, r4
    56d6:	4798      	blx	r3
	
	if (!length){
    56d8:	2500      	movs	r5, #0
    56da:	9006      	str	r0, [sp, #24]
    56dc:	b928      	cbnz	r0, 56ea <grid_port_process_outbound_ui+0x2a>

		
	}
	
	
}
    56de:	f50d 7d77 	add.w	sp, sp, #988	; 0x3dc
    56e2:	ecbd 8b02 	vpop	{d8}
    56e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    56ea:	4bb0      	ldr	r3, [pc, #704]	; (59ac <grid_port_process_outbound_ui+0x2ec>)
    56ec:	952b      	str	r5, [sp, #172]	; 0xac
    56ee:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    56f2:	4629      	mov	r1, r5
    56f4:	a82c      	add	r0, sp, #176	; 0xb0
    56f6:	4798      	blx	r3
		grid_buffer_read_init(&por->tx_buffer);
    56f8:	4bad      	ldr	r3, [pc, #692]	; (59b0 <grid_port_process_outbound_ui+0x2f0>)
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    56fa:	4fae      	ldr	r7, [pc, #696]	; (59b4 <grid_port_process_outbound_ui+0x2f4>)
		grid_buffer_read_init(&por->tx_buffer);
    56fc:	4620      	mov	r0, r4
    56fe:	4798      	blx	r3
		uint8_t message[GRID_PARAMETER_PACKET_maxlength] = {0};
    5700:	ae2b      	add	r6, sp, #172	; 0xac
		for (uint16_t i = 0; i<length; i++){
    5702:	9a06      	ldr	r2, [sp, #24]
    5704:	b2ab      	uxth	r3, r5
    5706:	429a      	cmp	r2, r3
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    5708:	4620      	mov	r0, r4
		for (uint16_t i = 0; i<length; i++){
    570a:	d839      	bhi.n	5780 <grid_port_process_outbound_ui+0xc0>
		grid_buffer_read_acknowledge(&por->tx_buffer);
    570c:	4baa      	ldr	r3, [pc, #680]	; (59b8 <grid_port_process_outbound_ui+0x2f8>)
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    570e:	4fab      	ldr	r7, [pc, #684]	; (59bc <grid_port_process_outbound_ui+0x2fc>)
		grid_buffer_read_acknowledge(&por->tx_buffer);
    5710:	4798      	blx	r3
		uint8_t error=0;
    5712:	2500      	movs	r5, #0
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5714:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    5718:	2202      	movs	r2, #2
    571a:	2106      	movs	r1, #6
    571c:	4630      	mov	r0, r6
		uint8_t error=0;
    571e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5722:	47b8      	blx	r7
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    5724:	f10d 0322 	add.w	r3, sp, #34	; 0x22
		uint8_t dx = grid_msg_get_parameter(message, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    5728:	fa5f fb80 	uxtb.w	fp, r0
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    572c:	2202      	movs	r2, #2
    572e:	2108      	movs	r1, #8
    5730:	4630      	mov	r0, r6
    5732:	47b8      	blx	r7
		if (dx == GRID_SYS_DEFAULT_POSITION && dy == GRID_SYS_DEFAULT_POSITION){
    5734:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
		uint8_t dy = grid_msg_get_parameter(message, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    5738:	b2c0      	uxtb	r0, r0
		if (dx == GRID_SYS_DEFAULT_POSITION && dy == GRID_SYS_DEFAULT_POSITION){
    573a:	d125      	bne.n	5788 <grid_port_process_outbound_ui+0xc8>
			position_is_me = 1;
    573c:	f1a0 027f 	sub.w	r2, r0, #127	; 0x7f
    5740:	f1d2 0b00 	rsbs	fp, r2, #0
    5744:	eb4b 0b02 	adc.w	fp, fp, r2
		uint8_t position_is_local = 0;
    5748:	462c      	mov	r4, r5
		uint8_t position_is_global = 0;
    574a:	9502      	str	r5, [sp, #8]
		uint8_t error_flag = 0;	
    574c:	2300      	movs	r3, #0
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    574e:	4d9c      	ldr	r5, [pc, #624]	; (59c0 <grid_port_process_outbound_ui+0x300>)
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    5750:	f8df a298 	ldr.w	sl, [pc, #664]	; 59ec <grid_port_process_outbound_ui+0x32c>
		uint8_t error_flag = 0;	
    5754:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    5758:	9303      	str	r3, [sp, #12]
		uint8_t current_start		= 0;
    575a:	4698      	mov	r8, r3
			if (message[i] == GRID_CONST_STX){
    575c:	9b03      	ldr	r3, [sp, #12]
    575e:	f10d 09ac 	add.w	r9, sp, #172	; 0xac
    5762:	f813 1009 	ldrb.w	r1, [r3, r9]
    5766:	2902      	cmp	r1, #2
    5768:	d120      	bne.n	57ac <grid_port_process_outbound_ui+0xec>
				current_start = i;
    576a:	f89d 800c 	ldrb.w	r8, [sp, #12]
		for (uint16_t i=0; i<length; i++){
    576e:	9b03      	ldr	r3, [sp, #12]
    5770:	9a06      	ldr	r2, [sp, #24]
    5772:	3301      	adds	r3, #1
    5774:	9303      	str	r3, [sp, #12]
    5776:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    577a:	429a      	cmp	r2, r3
    577c:	d8ee      	bhi.n	575c <grid_port_process_outbound_ui+0x9c>
    577e:	e7ae      	b.n	56de <grid_port_process_outbound_ui+0x1e>
			message[i] = grid_buffer_read_character(&por->tx_buffer);
    5780:	47b8      	blx	r7
    5782:	5570      	strb	r0, [r6, r5]
		for (uint16_t i = 0; i<length; i++){
    5784:	3501      	adds	r5, #1
    5786:	e7bc      	b.n	5702 <grid_port_process_outbound_ui+0x42>
		else if (dx == GRID_SYS_GLOBAL_POSITION && dy==GRID_SYS_GLOBAL_POSITION){
    5788:	f1bb 0f00 	cmp.w	fp, #0
    578c:	d105      	bne.n	579a <grid_port_process_outbound_ui+0xda>
		uint8_t position_is_global = 0;
    578e:	fab0 f380 	clz	r3, r0
    5792:	095b      	lsrs	r3, r3, #5
    5794:	9302      	str	r3, [sp, #8]
		uint8_t position_is_local = 0;
    5796:	465c      	mov	r4, fp
    5798:	e7d8      	b.n	574c <grid_port_process_outbound_ui+0x8c>
		else if (dx == GRID_SYS_LOCAL_POSITION && dy==GRID_SYS_LOCAL_POSITION){
    579a:	ea0b 0000 	and.w	r0, fp, r0
    579e:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
    57a2:	425c      	negs	r4, r3
    57a4:	415c      	adcs	r4, r3
		uint8_t position_is_global = 0;
    57a6:	46ab      	mov	fp, r5
		uint8_t position_is_me = 0;
    57a8:	9502      	str	r5, [sp, #8]
    57aa:	e7cf      	b.n	574c <grid_port_process_outbound_ui+0x8c>
			else if (message[i] == GRID_CONST_ETX && current_start!=0){
    57ac:	2903      	cmp	r1, #3
    57ae:	d1de      	bne.n	576e <grid_port_process_outbound_ui+0xae>
    57b0:	f1b8 0f00 	cmp.w	r8, #0
    57b4:	d102      	bne.n	57bc <grid_port_process_outbound_ui+0xfc>
				current_start = 0;
    57b6:	f04f 0800 	mov.w	r8, #0
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    57ba:	e7d8      	b.n	576e <grid_port_process_outbound_ui+0xae>
				uint8_t msg_class = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_offset], GRID_CLASS_length, &error_flag);
    57bc:	f108 0001 	add.w	r0, r8, #1
    57c0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57c4:	4448      	add	r0, r9
    57c6:	47a8      	blx	r5
    57c8:	b2c6      	uxtb	r6, r0
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    57ca:	f108 0004 	add.w	r0, r8, #4
    57ce:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57d2:	2101      	movs	r1, #1
    57d4:	4448      	add	r0, r9
    57d6:	47a8      	blx	r5
				if (msg_class == GRID_CLASS_BANKACTIVE_code){
    57d8:	2e30      	cmp	r6, #48	; 0x30
				uint8_t msg_instr = grid_sys_read_hex_string_value(&message[current_start+GRID_INSTR_offset], GRID_INSTR_length, &error_flag);
    57da:	b2c7      	uxtb	r7, r0
				if (msg_class == GRID_CLASS_BANKACTIVE_code){
    57dc:	d126      	bne.n	582c <grid_port_process_outbound_ui+0x16c>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    57de:	f108 0005 	add.w	r0, r8, #5
    57e2:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    57e6:	2102      	movs	r1, #2
    57e8:	4448      	add	r0, r9
    57ea:	47a8      	blx	r5
					if (msg_instr == GRID_INSTR_EXECUTE_code){ //SET BANK
    57ec:	2f0e      	cmp	r7, #14
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKACTIVE_BANKNUMBER_offset], GRID_CLASS_BANKACTIVE_BANKNUMBER_length, &error_flag);
    57ee:	4606      	mov	r6, r0
					if (msg_instr == GRID_INSTR_EXECUTE_code){ //SET BANK
    57f0:	d10e      	bne.n	5810 <grid_port_process_outbound_ui+0x150>
						if (grid_sys_get_bank_valid(&grid_sys_state) == 0){
    57f2:	4874      	ldr	r0, [pc, #464]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    57f4:	4b74      	ldr	r3, [pc, #464]	; (59c8 <grid_port_process_outbound_ui+0x308>)
    57f6:	4798      	blx	r3
    57f8:	4602      	mov	r2, r0
    57fa:	b920      	cbnz	r0, 5806 <grid_port_process_outbound_ui+0x146>
							grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    57fc:	4601      	mov	r1, r0
    57fe:	4f73      	ldr	r7, [pc, #460]	; (59cc <grid_port_process_outbound_ui+0x30c>)
    5800:	4873      	ldr	r0, [pc, #460]	; (59d0 <grid_port_process_outbound_ui+0x310>)
    5802:	230c      	movs	r3, #12
    5804:	47b8      	blx	r7
						grid_sys_set_bank(&grid_sys_state, banknumber);
    5806:	486f      	ldr	r0, [pc, #444]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5808:	b2f1      	uxtb	r1, r6
								grid_sys_set_bank(&grid_sys_state, banknumber);
    580a:	4b72      	ldr	r3, [pc, #456]	; (59d4 <grid_port_process_outbound_ui+0x314>)
					grid_sys_recall_configuration(&grid_sys_state, banknumber);
    580c:	4798      	blx	r3
    580e:	e7d2      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
					else if (msg_instr == GRID_INSTR_FETCH_code){ //GET BANK
    5810:	2f0f      	cmp	r7, #15
    5812:	d1d0      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_get_bank_valid(&grid_sys_state) != 0){
    5814:	486b      	ldr	r0, [pc, #428]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5816:	4b6c      	ldr	r3, [pc, #432]	; (59c8 <grid_port_process_outbound_ui+0x308>)
    5818:	4798      	blx	r3
    581a:	2800      	cmp	r0, #0
    581c:	d0cb      	beq.n	57b6 <grid_port_process_outbound_ui+0xf6>
							grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    581e:	2200      	movs	r2, #0
    5820:	486b      	ldr	r0, [pc, #428]	; (59d0 <grid_port_process_outbound_ui+0x310>)
    5822:	4e6a      	ldr	r6, [pc, #424]	; (59cc <grid_port_process_outbound_ui+0x30c>)
    5824:	2309      	movs	r3, #9
    5826:	4611      	mov	r1, r2
    5828:	47b0      	blx	r6
    582a:	e7c4      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_BANKENABLED_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_global || position_is_me || position_is_local)){
    582c:	2e31      	cmp	r6, #49	; 0x31
    582e:	d140      	bne.n	58b2 <grid_port_process_outbound_ui+0x1f2>
    5830:	2f0e      	cmp	r7, #14
    5832:	d1c0      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
    5834:	9b02      	ldr	r3, [sp, #8]
    5836:	ea4b 0303 	orr.w	r3, fp, r3
    583a:	4323      	orrs	r3, r4
    583c:	d0bb      	beq.n	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_BANKNUMBER_offset], GRID_CLASS_BANKENABLED_BANKNUMBER_length, &error_flag);
    583e:	f108 0005 	add.w	r0, r8, #5
    5842:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5846:	2102      	movs	r1, #2
    5848:	4448      	add	r0, r9
    584a:	47a8      	blx	r5
    584c:	b2c6      	uxtb	r6, r0
					uint8_t isenabled  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKENABLED_ISENABLED_offset], GRID_CLASS_BANKENABLED_ISENABLED_length, &error_flag);
    584e:	f108 0007 	add.w	r0, r8, #7
    5852:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5856:	2102      	movs	r1, #2
    5858:	4448      	add	r0, r9
    585a:	47a8      	blx	r5
    585c:	fa5f f880 	uxtb.w	r8, r0
					if (isenabled == 1){
    5860:	f1b8 0f01 	cmp.w	r8, #1
    5864:	d110      	bne.n	5888 <grid_port_process_outbound_ui+0x1c8>
						grid_sys_bank_enable(&grid_sys_state, banknumber);
    5866:	4f57      	ldr	r7, [pc, #348]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5868:	4b5b      	ldr	r3, [pc, #364]	; (59d8 <grid_port_process_outbound_ui+0x318>)
    586a:	4631      	mov	r1, r6
    586c:	4638      	mov	r0, r7
    586e:	4798      	blx	r3
						if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    5870:	4b5a      	ldr	r3, [pc, #360]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5872:	4638      	mov	r0, r7
    5874:	4798      	blx	r3
    5876:	42b0      	cmp	r0, r6
    5878:	d19d      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
							if (grid_sys_state.bank_activebank_valid == 1){
    587a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    587e:	2b01      	cmp	r3, #1
    5880:	d199      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
								grid_sys_set_bank(&grid_sys_state, banknumber);
    5882:	4631      	mov	r1, r6
    5884:	4638      	mov	r0, r7
    5886:	e7c0      	b.n	580a <grid_port_process_outbound_ui+0x14a>
					}else if (isenabled == 0){	
    5888:	f1b8 0f00 	cmp.w	r8, #0
    588c:	d193      	bne.n	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    588e:	484d      	ldr	r0, [pc, #308]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5890:	4b52      	ldr	r3, [pc, #328]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5892:	4798      	blx	r3
    5894:	42b0      	cmp	r0, r6
    5896:	d107      	bne.n	58a8 <grid_port_process_outbound_ui+0x1e8>
							if (grid_sys_state.bank_activebank_valid == 1){
    5898:	484a      	ldr	r0, [pc, #296]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    589a:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    589e:	2b01      	cmp	r3, #1
    58a0:	d102      	bne.n	58a8 <grid_port_process_outbound_ui+0x1e8>
								grid_sys_set_bank(&grid_sys_state, 255);
    58a2:	4b4c      	ldr	r3, [pc, #304]	; (59d4 <grid_port_process_outbound_ui+0x314>)
    58a4:	21ff      	movs	r1, #255	; 0xff
    58a6:	4798      	blx	r3
						grid_sys_bank_disable(&grid_sys_state, banknumber);
    58a8:	4b4d      	ldr	r3, [pc, #308]	; (59e0 <grid_port_process_outbound_ui+0x320>)
    58aa:	4846      	ldr	r0, [pc, #280]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    58ac:	4631      	mov	r1, r6
    58ae:	4798      	blx	r3
    58b0:	e75d      	b.n	576e <grid_port_process_outbound_ui+0xae>
				else if (msg_class == GRID_CLASS_BANKCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_global || position_is_me || position_is_local)){
    58b2:	2e32      	cmp	r6, #50	; 0x32
    58b4:	d147      	bne.n	5946 <grid_port_process_outbound_ui+0x286>
    58b6:	2f0e      	cmp	r7, #14
    58b8:	f47f af7d 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    58bc:	9b02      	ldr	r3, [sp, #8]
    58be:	ea4b 0303 	orr.w	r3, fp, r3
    58c2:	4323      	orrs	r3, r4
    58c4:	f43f af77 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_NUM_offset], GRID_CLASS_BANKCOLOR_NUM_length, &error_flag);
    58c8:	f108 0005 	add.w	r0, r8, #5
    58cc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58d0:	2102      	movs	r1, #2
    58d2:	4448      	add	r0, r9
    58d4:	47a8      	blx	r5
    58d6:	b2c3      	uxtb	r3, r0
					uint8_t red		   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_RED_offset], GRID_CLASS_BANKCOLOR_RED_length, &error_flag);
    58d8:	f108 0007 	add.w	r0, r8, #7
    58dc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58e0:	2102      	movs	r1, #2
    58e2:	4448      	add	r0, r9
					uint8_t banknumber = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_NUM_offset], GRID_CLASS_BANKCOLOR_NUM_length, &error_flag);
    58e4:	ee08 3a10 	vmov	s16, r3
					uint8_t red		   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_RED_offset], GRID_CLASS_BANKCOLOR_RED_length, &error_flag);
    58e8:	47a8      	blx	r5
    58ea:	4606      	mov	r6, r0
					uint8_t green	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_GRE_offset], GRID_CLASS_BANKCOLOR_GRE_length, &error_flag);
    58ec:	f108 0009 	add.w	r0, r8, #9
    58f0:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    58f4:	2102      	movs	r1, #2
    58f6:	4448      	add	r0, r9
    58f8:	47a8      	blx	r5
    58fa:	4607      	mov	r7, r0
					uint8_t blue	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BLU_offset], GRID_CLASS_BANKCOLOR_BLU_length, &error_flag);
    58fc:	f108 000b 	add.w	r0, r8, #11
    5900:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5904:	2102      	movs	r1, #2
    5906:	4448      	add	r0, r9
					grid_sys_bank_set_color(&grid_sys_state, banknumber, (red<<16) + (green<<8) + (blue<<0) );
    5908:	0436      	lsls	r6, r6, #16
    590a:	023f      	lsls	r7, r7, #8
					uint8_t blue	   = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_BANKCOLOR_BLU_offset], GRID_CLASS_BANKCOLOR_BLU_length, &error_flag);
    590c:	47a8      	blx	r5
					grid_sys_bank_set_color(&grid_sys_state, banknumber, (red<<16) + (green<<8) + (blue<<0) );
    590e:	b2bf      	uxth	r7, r7
    5910:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
    5914:	433e      	orrs	r6, r7
    5916:	4f2b      	ldr	r7, [pc, #172]	; (59c4 <grid_port_process_outbound_ui+0x304>)
    5918:	4b32      	ldr	r3, [pc, #200]	; (59e4 <grid_port_process_outbound_ui+0x324>)
    591a:	fa56 f280 	uxtab	r2, r6, r0
    591e:	ee18 1a10 	vmov	r1, s16
    5922:	4638      	mov	r0, r7
    5924:	4798      	blx	r3
					if (grid_sys_get_bank_num(&grid_sys_state) == banknumber){
    5926:	4b2d      	ldr	r3, [pc, #180]	; (59dc <grid_port_process_outbound_ui+0x31c>)
    5928:	4638      	mov	r0, r7
    592a:	4798      	blx	r3
    592c:	ee18 3a10 	vmov	r3, s16
    5930:	4298      	cmp	r0, r3
    5932:	f47f af40 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
						if (grid_sys_state.bank_activebank_valid == 1){
    5936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    593a:	2b01      	cmp	r3, #1
    593c:	f47f af3b 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
							grid_sys_set_bank(&grid_sys_state, banknumber);
    5940:	ee18 1a10 	vmov	r1, s16
    5944:	e79e      	b.n	5884 <grid_port_process_outbound_ui+0x1c4>
				else if (msg_class == GRID_CLASS_LEDPHASE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    5946:	2e40      	cmp	r6, #64	; 0x40
    5948:	d154      	bne.n	59f4 <grid_port_process_outbound_ui+0x334>
    594a:	2f0e      	cmp	r7, #14
    594c:	f47f af33 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5950:	ea5b 0304 	orrs.w	r3, fp, r4
    5954:	f43f af2f 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t led_num  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_NUM_offset], GRID_CLASS_LEDPHASE_NUM_length, &error_flag);
    5958:	f108 0005 	add.w	r0, r8, #5
    595c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5960:	2102      	movs	r1, #2
    5962:	4448      	add	r0, r9
    5964:	47a8      	blx	r5
    5966:	b2c6      	uxtb	r6, r0
					uint8_t led_lay = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_LAY_offset], GRID_CLASS_LEDPHASE_LAY_length, &error_flag);
    5968:	f108 0007 	add.w	r0, r8, #7
    596c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5970:	2102      	movs	r1, #2
    5972:	4448      	add	r0, r9
    5974:	47a8      	blx	r5
    5976:	b2c7      	uxtb	r7, r0
					uint16_t led_pha  = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDPHASE_PHA_offset], GRID_CLASS_LEDPHASE_PHA_length, &error_flag);
    5978:	f108 0009 	add.w	r0, r8, #9
    597c:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5980:	2102      	movs	r1, #2
    5982:	4448      	add	r0, r9
    5984:	47a8      	blx	r5
					if (led_pha*2 > 255){
    5986:	b283      	uxth	r3, r0
    5988:	005b      	lsls	r3, r3, #1
    598a:	2bff      	cmp	r3, #255	; 0xff
						grid_led_set_phase(&grid_led_state, led_num, led_lay, led_pha*2);
    598c:	bfdc      	itt	le
    598e:	0040      	lslle	r0, r0, #1
    5990:	f000 03fe 	andle.w	r3, r0, #254	; 0xfe
    5994:	f8df 8058 	ldr.w	r8, [pc, #88]	; 59f0 <grid_port_process_outbound_ui+0x330>
    5998:	4813      	ldr	r0, [pc, #76]	; (59e8 <grid_port_process_outbound_ui+0x328>)
						grid_led_set_phase(&grid_led_state, led_num, led_lay, 255);
    599a:	bfc8      	it	gt
    599c:	23ff      	movgt	r3, #255	; 0xff
						grid_led_set_phase(&grid_led_state, led_num, led_lay, led_pha*2);
    599e:	463a      	mov	r2, r7
    59a0:	4631      	mov	r1, r6
    59a2:	47c0      	blx	r8
    59a4:	e707      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
    59a6:	bf00      	nop
    59a8:	00004f05 	.word	0x00004f05
    59ac:	00012e05 	.word	0x00012e05
    59b0:	00004f5b 	.word	0x00004f5b
    59b4:	00004fc3 	.word	0x00004fc3
    59b8:	00004fed 	.word	0x00004fed
    59bc:	000099ad 	.word	0x000099ad
    59c0:	000097f9 	.word	0x000097f9
    59c4:	20006fa4 	.word	0x20006fa4
    59c8:	000096a7 	.word	0x000096a7
    59cc:	0000aabd 	.word	0x0000aabd
    59d0:	20014628 	.word	0x20014628
    59d4:	000096fb 	.word	0x000096fb
    59d8:	00009675 	.word	0x00009675
    59dc:	000096a3 	.word	0x000096a3
    59e0:	00009681 	.word	0x00009681
    59e4:	0000968d 	.word	0x0000968d
    59e8:	200146a0 	.word	0x200146a0
    59ec:	20006f98 	.word	0x20006f98
    59f0:	00006d0d 	.word	0x00006d0d
				else if (msg_class == GRID_CLASS_LEDCOLOR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_local || position_is_me)){
    59f4:	2e41      	cmp	r6, #65	; 0x41
    59f6:	d13a      	bne.n	5a6e <grid_port_process_outbound_ui+0x3ae>
    59f8:	2f0e      	cmp	r7, #14
    59fa:	f47f aedc 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    59fe:	ea5b 0304 	orrs.w	r3, fp, r4
    5a02:	f43f aed8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t led_num = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_NUM_offset], GRID_CLASS_LEDCOLOR_NUM_length, &error_flag);
    5a06:	f108 0005 	add.w	r0, r8, #5
    5a0a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a0e:	2102      	movs	r1, #2
    5a10:	4448      	add	r0, r9
    5a12:	47a8      	blx	r5
    5a14:	4607      	mov	r7, r0
					uint8_t led_lay = grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_LAY_offset], GRID_CLASS_LEDCOLOR_LAY_length, &error_flag);
    5a16:	f108 0007 	add.w	r0, r8, #7
    5a1a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a1e:	2102      	movs	r1, #2
    5a20:	4448      	add	r0, r9
    5a22:	47a8      	blx	r5
    5a24:	9004      	str	r0, [sp, #16]
					uint8_t led_red	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_RED_offset], GRID_CLASS_LEDCOLOR_RED_length, &error_flag);
    5a26:	f108 0009 	add.w	r0, r8, #9
    5a2a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a2e:	2102      	movs	r1, #2
    5a30:	4448      	add	r0, r9
    5a32:	47a8      	blx	r5
    5a34:	9005      	str	r0, [sp, #20]
					uint8_t led_gre	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_GRE_offset], GRID_CLASS_LEDCOLOR_GRE_length, &error_flag);
    5a36:	f108 000b 	add.w	r0, r8, #11
    5a3a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a3e:	2102      	movs	r1, #2
    5a40:	4448      	add	r0, r9
    5a42:	47a8      	blx	r5
    5a44:	4606      	mov	r6, r0
					uint8_t led_blu	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_LEDCOLOR_BLU_offset], GRID_CLASS_LEDCOLOR_BLU_length, &error_flag);
    5a46:	f108 000d 	add.w	r0, r8, #13
    5a4a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5a4e:	2102      	movs	r1, #2
    5a50:	4448      	add	r0, r9
    5a52:	47a8      	blx	r5
					grid_led_set_color(&grid_led_state, led_num, led_lay, led_red, led_gre, led_blu);
    5a54:	9b05      	ldr	r3, [sp, #20]
    5a56:	f89d 2010 	ldrb.w	r2, [sp, #16]
    5a5a:	b2c0      	uxtb	r0, r0
    5a5c:	b2f6      	uxtb	r6, r6
    5a5e:	9001      	str	r0, [sp, #4]
    5a60:	9600      	str	r6, [sp, #0]
    5a62:	48a9      	ldr	r0, [pc, #676]	; (5d08 <grid_port_process_outbound_ui+0x648>)
    5a64:	4ea9      	ldr	r6, [pc, #676]	; (5d0c <grid_port_process_outbound_ui+0x64c>)
    5a66:	b2db      	uxtb	r3, r3
    5a68:	b2f9      	uxtb	r1, r7
    5a6a:	47b0      	blx	r6
    5a6c:	e6a3      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if(msg_class == GRID_CLASS_SERIALNUMBER_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5a6e:	2e11      	cmp	r6, #17
    5a70:	d15d      	bne.n	5b2e <grid_port_process_outbound_ui+0x46e>
    5a72:	2f0f      	cmp	r7, #15
    5a74:	f47f ae9f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5a78:	9b02      	ldr	r3, [sp, #8]
    5a7a:	ea5b 0303 	orrs.w	r3, fp, r3
    5a7e:	f43f ae9a 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint32_t uniqueid[4] = {0};
    5a82:	2210      	movs	r2, #16
    5a84:	2100      	movs	r1, #0
    5a86:	4fa2      	ldr	r7, [pc, #648]	; (5d10 <grid_port_process_outbound_ui+0x650>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5a88:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 5d38 <grid_port_process_outbound_ui+0x678>
					uint32_t uniqueid[4] = {0};
    5a8c:	a809      	add	r0, sp, #36	; 0x24
    5a8e:	47b8      	blx	r7
					grid_sys_get_id(uniqueid);					
    5a90:	4ba0      	ldr	r3, [pc, #640]	; (5d14 <grid_port_process_outbound_ui+0x654>)
    5a92:	a809      	add	r0, sp, #36	; 0x24
    5a94:	4798      	blx	r3
					grid_msg_init(&response);
    5a96:	4ba0      	ldr	r3, [pc, #640]	; (5d18 <grid_port_process_outbound_ui+0x658>)
    5a98:	a88f      	add	r0, sp, #572	; 0x23c
    5a9a:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5a9c:	227f      	movs	r2, #127	; 0x7f
    5a9e:	2300      	movs	r3, #0
    5aa0:	4611      	mov	r1, r2
    5aa2:	a88f      	add	r0, sp, #572	; 0x23c
    5aa4:	47c0      	blx	r8
					uint8_t response_payload[50] = {0};
    5aa6:	f04f 0800 	mov.w	r8, #0
    5aaa:	222e      	movs	r2, #46	; 0x2e
    5aac:	4641      	mov	r1, r8
    5aae:	a80e      	add	r0, sp, #56	; 0x38
    5ab0:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    5ab4:	47b8      	blx	r7
					snprintf(response_payload, 49, GRID_CLASS_SERIALNUMBER_frame);
    5ab6:	2303      	movs	r3, #3
    5ab8:	e9cd 6300 	strd	r6, r3, [sp]
    5abc:	4a97      	ldr	r2, [pc, #604]	; (5d1c <grid_port_process_outbound_ui+0x65c>)
    5abe:	4e98      	ldr	r6, [pc, #608]	; (5d20 <grid_port_process_outbound_ui+0x660>)
    5ac0:	2131      	movs	r1, #49	; 0x31
    5ac2:	2302      	movs	r3, #2
    5ac4:	a80d      	add	r0, sp, #52	; 0x34
    5ac6:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ac8:	4b96      	ldr	r3, [pc, #600]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5aca:	4e97      	ldr	r6, [pc, #604]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5acc:	a80d      	add	r0, sp, #52	; 0x34
    5ace:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5ad0:	270d      	movs	r7, #13
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ad2:	4602      	mov	r2, r0
    5ad4:	4b95      	ldr	r3, [pc, #596]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5ad6:	a90d      	add	r1, sp, #52	; 0x34
    5ad8:	a88f      	add	r0, sp, #572	; 0x23c
    5ada:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);					
    5adc:	2301      	movs	r3, #1
    5ade:	2204      	movs	r2, #4
    5ae0:	4641      	mov	r1, r8
    5ae2:	a88f      	add	r0, sp, #572	; 0x23c
    5ae4:	9700      	str	r7, [sp, #0]
    5ae6:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD0_offset, GRID_CLASS_SERIALNUMBER_WORD0_length, uniqueid[0]);
    5ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5aea:	9300      	str	r3, [sp, #0]
    5aec:	2205      	movs	r2, #5
    5aee:	2308      	movs	r3, #8
    5af0:	4641      	mov	r1, r8
    5af2:	a88f      	add	r0, sp, #572	; 0x23c
    5af4:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD1_offset, GRID_CLASS_SERIALNUMBER_WORD1_length, uniqueid[1]);
    5af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5af8:	9300      	str	r3, [sp, #0]
    5afa:	463a      	mov	r2, r7
    5afc:	2308      	movs	r3, #8
    5afe:	4641      	mov	r1, r8
    5b00:	a88f      	add	r0, sp, #572	; 0x23c
    5b02:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD2_offset, GRID_CLASS_SERIALNUMBER_WORD2_length, uniqueid[2]);
    5b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5b06:	9300      	str	r3, [sp, #0]
    5b08:	2215      	movs	r2, #21
    5b0a:	2308      	movs	r3, #8
    5b0c:	4641      	mov	r1, r8
    5b0e:	a88f      	add	r0, sp, #572	; 0x23c
    5b10:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_SERIALNUMBER_WORD3_offset, GRID_CLASS_SERIALNUMBER_WORD3_length, uniqueid[3]);
    5b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b14:	9300      	str	r3, [sp, #0]
    5b16:	221d      	movs	r2, #29
    5b18:	2308      	movs	r3, #8
    5b1a:	4641      	mov	r1, r8
    5b1c:	a88f      	add	r0, sp, #572	; 0x23c
    5b1e:	47b0      	blx	r6
					grid_msg_packet_close(&response);
    5b20:	4b83      	ldr	r3, [pc, #524]	; (5d30 <grid_port_process_outbound_ui+0x670>)
    5b22:	a88f      	add	r0, sp, #572	; 0x23c
    5b24:	4798      	blx	r3
					grid_msg_packet_send_everywhere(&response);
    5b26:	4b83      	ldr	r3, [pc, #524]	; (5d34 <grid_port_process_outbound_ui+0x674>)
    5b28:	a88f      	add	r0, sp, #572	; 0x23c
    5b2a:	4798      	blx	r3
				else if(msg_class == GRID_CLASS_UPTIME_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5b2c:	e61f      	b.n	576e <grid_port_process_outbound_ui+0xae>
    5b2e:	2e14      	cmp	r6, #20
    5b30:	d13f      	bne.n	5bb2 <grid_port_process_outbound_ui+0x4f2>
    5b32:	2f0f      	cmp	r7, #15
    5b34:	f47f ae3f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5b38:	9b02      	ldr	r3, [sp, #8]
    5b3a:	ea5b 0303 	orrs.w	r3, fp, r3
    5b3e:	f43f ae3a 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_msg_init(&response);
    5b42:	4b75      	ldr	r3, [pc, #468]	; (5d18 <grid_port_process_outbound_ui+0x658>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b44:	4f7c      	ldr	r7, [pc, #496]	; (5d38 <grid_port_process_outbound_ui+0x678>)
					grid_msg_init(&response);
    5b46:	a88f      	add	r0, sp, #572	; 0x23c
    5b48:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b4a:	227f      	movs	r2, #127	; 0x7f
					uint8_t response_payload[50] = {0};
    5b4c:	f04f 0800 	mov.w	r8, #0
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5b50:	4611      	mov	r1, r2
    5b52:	2300      	movs	r3, #0
    5b54:	a88f      	add	r0, sp, #572	; 0x23c
    5b56:	47b8      	blx	r7
					uint8_t response_payload[50] = {0};
    5b58:	4b6d      	ldr	r3, [pc, #436]	; (5d10 <grid_port_process_outbound_ui+0x650>)
    5b5a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    5b5e:	222e      	movs	r2, #46	; 0x2e
    5b60:	4641      	mov	r1, r8
    5b62:	a80e      	add	r0, sp, #56	; 0x38
    5b64:	4798      	blx	r3
					snprintf(response_payload, 49, GRID_CLASS_UPTIME_frame);
    5b66:	2303      	movs	r3, #3
    5b68:	e9cd 6300 	strd	r6, r3, [sp]
    5b6c:	4a73      	ldr	r2, [pc, #460]	; (5d3c <grid_port_process_outbound_ui+0x67c>)
    5b6e:	4e6c      	ldr	r6, [pc, #432]	; (5d20 <grid_port_process_outbound_ui+0x660>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5b70:	4f6d      	ldr	r7, [pc, #436]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					snprintf(response_payload, 49, GRID_CLASS_UPTIME_frame);
    5b72:	2131      	movs	r1, #49	; 0x31
    5b74:	2302      	movs	r3, #2
    5b76:	a80d      	add	r0, sp, #52	; 0x34
    5b78:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5b7a:	4b6a      	ldr	r3, [pc, #424]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_UPTIME_UPTIME_offset, GRID_CLASS_UPTIME_UPTIME_length, grid_sys_state.uptime);
    5b7c:	4e70      	ldr	r6, [pc, #448]	; (5d40 <grid_port_process_outbound_ui+0x680>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5b7e:	a80d      	add	r0, sp, #52	; 0x34
    5b80:	4798      	blx	r3
    5b82:	4b6a      	ldr	r3, [pc, #424]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5b84:	4602      	mov	r2, r0
    5b86:	a90d      	add	r1, sp, #52	; 0x34
    5b88:	a88f      	add	r0, sp, #572	; 0x23c
    5b8a:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5b8c:	230d      	movs	r3, #13
    5b8e:	9300      	str	r3, [sp, #0]
    5b90:	2204      	movs	r2, #4
    5b92:	2301      	movs	r3, #1
    5b94:	4641      	mov	r1, r8
    5b96:	a88f      	add	r0, sp, #572	; 0x23c
    5b98:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_UPTIME_UPTIME_offset, GRID_CLASS_UPTIME_UPTIME_length, grid_sys_state.uptime);
    5b9a:	6833      	ldr	r3, [r6, #0]
    5b9c:	9300      	str	r3, [sp, #0]
    5b9e:	2205      	movs	r2, #5
    5ba0:	2308      	movs	r3, #8
    5ba2:	4641      	mov	r1, r8
    5ba4:	a88f      	add	r0, sp, #572	; 0x23c
    5ba6:	47b8      	blx	r7
					uint32_t milliseconds = grid_sys_state.uptime/RTC1MS%1000;
    5ba8:	6833      	ldr	r3, [r6, #0]
					uint32_t seconds =		grid_sys_state.uptime/RTC1MS/1000%60;
    5baa:	6833      	ldr	r3, [r6, #0]
					uint32_t minutes =		grid_sys_state.uptime/RTC1MS/1000/60%60;
    5bac:	6833      	ldr	r3, [r6, #0]
					uint32_t hours =		grid_sys_state.uptime/RTC1MS/1000/60/60%60;
    5bae:	6833      	ldr	r3, [r6, #0]
    5bb0:	e7b6      	b.n	5b20 <grid_port_process_outbound_ui+0x460>
				else if(msg_class == GRID_CLASS_RESETCAUSE_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5bb2:	2e12      	cmp	r6, #18
    5bb4:	d137      	bne.n	5c26 <grid_port_process_outbound_ui+0x566>
    5bb6:	2f0f      	cmp	r7, #15
    5bb8:	f47f adfd 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5bbc:	9b02      	ldr	r3, [sp, #8]
    5bbe:	ea5b 0303 	orrs.w	r3, fp, r3
    5bc2:	f43f adf8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_msg_init(&response);
    5bc6:	4b54      	ldr	r3, [pc, #336]	; (5d18 <grid_port_process_outbound_ui+0x658>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5bc8:	4f5b      	ldr	r7, [pc, #364]	; (5d38 <grid_port_process_outbound_ui+0x678>)
					grid_msg_init(&response);
    5bca:	a88f      	add	r0, sp, #572	; 0x23c
    5bcc:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5bce:	227f      	movs	r2, #127	; 0x7f
    5bd0:	4611      	mov	r1, r2
    5bd2:	2300      	movs	r3, #0
    5bd4:	a88f      	add	r0, sp, #572	; 0x23c
    5bd6:	47b8      	blx	r7
					uint8_t response_payload[50] = {0};
    5bd8:	2700      	movs	r7, #0
    5bda:	4b4d      	ldr	r3, [pc, #308]	; (5d10 <grid_port_process_outbound_ui+0x650>)
    5bdc:	970d      	str	r7, [sp, #52]	; 0x34
    5bde:	222e      	movs	r2, #46	; 0x2e
    5be0:	4639      	mov	r1, r7
    5be2:	a80e      	add	r0, sp, #56	; 0x38
    5be4:	4798      	blx	r3
					snprintf(response_payload, 49, GRID_CLASS_RESETCAUSE_frame);
    5be6:	2303      	movs	r3, #3
    5be8:	e9cd 6300 	strd	r6, r3, [sp]
    5bec:	4a55      	ldr	r2, [pc, #340]	; (5d44 <grid_port_process_outbound_ui+0x684>)
    5bee:	4e4c      	ldr	r6, [pc, #304]	; (5d20 <grid_port_process_outbound_ui+0x660>)
    5bf0:	2131      	movs	r1, #49	; 0x31
    5bf2:	2302      	movs	r3, #2
    5bf4:	a80d      	add	r0, sp, #52	; 0x34
    5bf6:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5bf8:	4b4a      	ldr	r3, [pc, #296]	; (5d24 <grid_port_process_outbound_ui+0x664>)
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5bfa:	4e4b      	ldr	r6, [pc, #300]	; (5d28 <grid_port_process_outbound_ui+0x668>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5bfc:	a80d      	add	r0, sp, #52	; 0x34
    5bfe:	4798      	blx	r3
    5c00:	4b4a      	ldr	r3, [pc, #296]	; (5d2c <grid_port_process_outbound_ui+0x66c>)
    5c02:	4602      	mov	r2, r0
    5c04:	a90d      	add	r1, sp, #52	; 0x34
    5c06:	a88f      	add	r0, sp, #572	; 0x23c
    5c08:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    5c0a:	230d      	movs	r3, #13
    5c0c:	9300      	str	r3, [sp, #0]
    5c0e:	2204      	movs	r2, #4
    5c10:	2301      	movs	r3, #1
    5c12:	4639      	mov	r1, r7
    5c14:	a88f      	add	r0, sp, #572	; 0x23c
    5c16:	47b0      	blx	r6
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_RESETCAUSE_CAUSE_offset, GRID_CLASS_RESETCAUSE_CAUSE_length,grid_sys_state.reset_cause);
    5c18:	4b49      	ldr	r3, [pc, #292]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c1a:	791b      	ldrb	r3, [r3, #4]
    5c1c:	9300      	str	r3, [sp, #0]
    5c1e:	2205      	movs	r2, #5
    5c20:	2302      	movs	r3, #2
                    grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    5c22:	4639      	mov	r1, r7
    5c24:	e26e      	b.n	6104 <grid_port_process_outbound_ui+0xa44>
				else if(msg_class == GRID_CLASS_RESET_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me)){
    5c26:	2e13      	cmp	r6, #19
    5c28:	d113      	bne.n	5c52 <grid_port_process_outbound_ui+0x592>
    5c2a:	2f0e      	cmp	r7, #14
    5c2c:	f47f adc3 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c30:	f1bb 0f00 	cmp.w	fp, #0
    5c34:	f43f adbf 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5c38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5c3c:	4942      	ldr	r1, [pc, #264]	; (5d48 <grid_port_process_outbound_ui+0x688>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5c3e:	4b43      	ldr	r3, [pc, #268]	; (5d4c <grid_port_process_outbound_ui+0x68c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5c40:	68ca      	ldr	r2, [r1, #12]
    5c42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5c46:	4313      	orrs	r3, r2
    5c48:	60cb      	str	r3, [r1, #12]
    5c4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5c4e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5c50:	e7fd      	b.n	5c4e <grid_port_process_outbound_ui+0x58e>
				else if (msg_class == GRID_CLASS_GLOBALLOAD_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5c52:	2e61      	cmp	r6, #97	; 0x61
    5c54:	d10c      	bne.n	5c70 <grid_port_process_outbound_ui+0x5b0>
    5c56:	2f0e      	cmp	r7, #14
    5c58:	f47f adad 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c5c:	9b02      	ldr	r3, [sp, #8]
    5c5e:	ea5b 0303 	orrs.w	r3, fp, r3
    5c62:	f43f ada8 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    5c66:	493a      	ldr	r1, [pc, #232]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5c68:	4835      	ldr	r0, [pc, #212]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c6a:	4b3a      	ldr	r3, [pc, #232]	; (5d54 <grid_port_process_outbound_ui+0x694>)
					grid_ui_nvm_clear_all_configuration(&grid_ui_state, &grid_nvm_state);
    5c6c:	4798      	blx	r3
    5c6e:	e5a2      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_GLOBALSTORE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5c70:	2e60      	cmp	r6, #96	; 0x60
    5c72:	d117      	bne.n	5ca4 <grid_port_process_outbound_ui+0x5e4>
    5c74:	2f0e      	cmp	r7, #14
    5c76:	f47f ad9e 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5c7a:	9b02      	ldr	r3, [sp, #8]
    5c7c:	ea5b 0303 	orrs.w	r3, fp, r3
    5c80:	f43f ad99 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_store_configuration(&grid_sys_state, &grid_nvm_state);
    5c84:	4932      	ldr	r1, [pc, #200]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5c86:	482e      	ldr	r0, [pc, #184]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c88:	4b33      	ldr	r3, [pc, #204]	; (5d58 <grid_port_process_outbound_ui+0x698>)
                    grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    5c8a:	4e34      	ldr	r6, [pc, #208]	; (5d5c <grid_port_process_outbound_ui+0x69c>)
					grid_sys_nvm_clear_configuration(&grid_ui_state, &grid_nvm_state);
    5c8c:	4798      	blx	r3
                    grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    5c8e:	2700      	movs	r7, #0
    5c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5c94:	e9cd 7300 	strd	r7, r3, [sp]
    5c98:	4829      	ldr	r0, [pc, #164]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5c9a:	463b      	mov	r3, r7
    5c9c:	22ff      	movs	r2, #255	; 0xff
    5c9e:	4639      	mov	r1, r7
    5ca0:	47b0      	blx	r6
    5ca2:	e588      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_GLOBALCLEAR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5ca4:	2e62      	cmp	r6, #98	; 0x62
    5ca6:	d10b      	bne.n	5cc0 <grid_port_process_outbound_ui+0x600>
    5ca8:	2f0e      	cmp	r7, #14
    5caa:	f47f ad84 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cae:	9b02      	ldr	r3, [sp, #8]
    5cb0:	ea5b 0303 	orrs.w	r3, fp, r3
    5cb4:	f43f ad7f 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_sys_nvm_clear_configuration(&grid_ui_state, &grid_nvm_state);
    5cb8:	4925      	ldr	r1, [pc, #148]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5cba:	4b29      	ldr	r3, [pc, #164]	; (5d60 <grid_port_process_outbound_ui+0x6a0>)
    5cbc:	4650      	mov	r0, sl
    5cbe:	e7e4      	b.n	5c8a <grid_port_process_outbound_ui+0x5ca>
				else if (msg_class == GRID_CLASS_GLOBALRECALL_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5cc0:	2e63      	cmp	r6, #99	; 0x63
    5cc2:	d112      	bne.n	5cea <grid_port_process_outbound_ui+0x62a>
    5cc4:	2f0e      	cmp	r7, #14
    5cc6:	f47f ad76 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cca:	9b02      	ldr	r3, [sp, #8]
    5ccc:	ea5b 0303 	orrs.w	r3, fp, r3
    5cd0:	f43f ad71 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_GLOBALRECALL_BANKNUMBER_offset], GRID_CLASS_GLOBALRECALL_BANKNUMBER_length	, &error_flag);
    5cd4:	f108 0005 	add.w	r0, r8, #5
    5cd8:	2102      	movs	r1, #2
    5cda:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5cde:	4448      	add	r0, r9
    5ce0:	47a8      	blx	r5
					grid_sys_recall_configuration(&grid_sys_state, banknumber);
    5ce2:	4b20      	ldr	r3, [pc, #128]	; (5d64 <grid_port_process_outbound_ui+0x6a4>)
    5ce4:	b2c1      	uxtb	r1, r0
    5ce6:	4816      	ldr	r0, [pc, #88]	; (5d40 <grid_port_process_outbound_ui+0x680>)
    5ce8:	e590      	b.n	580c <grid_port_process_outbound_ui+0x14c>
				else if (msg_class == GRID_CLASS_LOCALLOAD_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5cea:	2e71      	cmp	r6, #113	; 0x71
    5cec:	d13e      	bne.n	5d6c <grid_port_process_outbound_ui+0x6ac>
    5cee:	2f0e      	cmp	r7, #14
    5cf0:	f47f ad61 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5cf4:	9b02      	ldr	r3, [sp, #8]
    5cf6:	ea5b 0303 	orrs.w	r3, fp, r3
    5cfa:	f43f ad5c 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_load_all_configuration(&grid_ui_state, &grid_nvm_state);						
    5cfe:	4914      	ldr	r1, [pc, #80]	; (5d50 <grid_port_process_outbound_ui+0x690>)
    5d00:	4b19      	ldr	r3, [pc, #100]	; (5d68 <grid_port_process_outbound_ui+0x6a8>)
    5d02:	4650      	mov	r0, sl
    5d04:	e7b2      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
    5d06:	bf00      	nop
    5d08:	200146a0 	.word	0x200146a0
    5d0c:	00006c9d 	.word	0x00006c9d
    5d10:	00012e05 	.word	0x00012e05
    5d14:	00009859 	.word	0x00009859
    5d18:	00008545 	.word	0x00008545
    5d1c:	00015528 	.word	0x00015528
    5d20:	000133f1 	.word	0x000133f1
    5d24:	00013981 	.word	0x00013981
    5d28:	00008529 	.word	0x00008529
    5d2c:	000084b5 	.word	0x000084b5
    5d30:	00008671 	.word	0x00008671
    5d34:	00008745 	.word	0x00008745
    5d38:	00008579 	.word	0x00008579
    5d3c:	00015552 	.word	0x00015552
    5d40:	20006fa4 	.word	0x20006fa4
    5d44:	00015564 	.word	0x00015564
    5d48:	e000ed00 	.word	0xe000ed00
    5d4c:	05fa0004 	.word	0x05fa0004
    5d50:	200079b8 	.word	0x200079b8
    5d54:	00009081 	.word	0x00009081
    5d58:	00008d2d 	.word	0x00008d2d
    5d5c:	000097ab 	.word	0x000097ab
    5d60:	00009179 	.word	0x00009179
    5d64:	00008f25 	.word	0x00008f25
    5d68:	00009a8d 	.word	0x00009a8d
				else if (msg_class == GRID_CLASS_LOCALSTORE_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5d6c:	2e70      	cmp	r6, #112	; 0x70
    5d6e:	d10b      	bne.n	5d88 <grid_port_process_outbound_ui+0x6c8>
    5d70:	2f0e      	cmp	r7, #14
    5d72:	f47f ad20 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5d76:	9b02      	ldr	r3, [sp, #8]
    5d78:	ea5b 0303 	orrs.w	r3, fp, r3
    5d7c:	f43f ad1b 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_store_all_configuration(&grid_ui_state, &grid_nvm_state);
    5d80:	49b4      	ldr	r1, [pc, #720]	; (6054 <grid_port_process_outbound_ui+0x994>)
    5d82:	4bb5      	ldr	r3, [pc, #724]	; (6058 <grid_port_process_outbound_ui+0x998>)
    5d84:	4650      	mov	r0, sl
    5d86:	e771      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
				else if (msg_class == GRID_CLASS_LOCALCLEAR_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    5d88:	2e72      	cmp	r6, #114	; 0x72
    5d8a:	d10b      	bne.n	5da4 <grid_port_process_outbound_ui+0x6e4>
    5d8c:	2f0e      	cmp	r7, #14
    5d8e:	f47f ad12 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5d92:	9b02      	ldr	r3, [sp, #8]
    5d94:	ea5b 0303 	orrs.w	r3, fp, r3
    5d98:	f43f ad0d 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					grid_ui_nvm_clear_all_configuration(&grid_ui_state, &grid_nvm_state);
    5d9c:	49ad      	ldr	r1, [pc, #692]	; (6054 <grid_port_process_outbound_ui+0x994>)
    5d9e:	4baf      	ldr	r3, [pc, #700]	; (605c <grid_port_process_outbound_ui+0x99c>)
    5da0:	4650      	mov	r0, sl
    5da2:	e763      	b.n	5c6c <grid_port_process_outbound_ui+0x5ac>
				else if (msg_class == GRID_CLASS_CONFIGURATION_code && msg_instr == GRID_INSTR_FETCH_code && (position_is_me || position_is_global)){
    5da4:	2e80      	cmp	r6, #128	; 0x80
    5da6:	f040 81b0 	bne.w	610a <grid_port_process_outbound_ui+0xa4a>
    5daa:	2f0f      	cmp	r7, #15
    5dac:	d122      	bne.n	5df4 <grid_port_process_outbound_ui+0x734>
    5dae:	9b02      	ldr	r3, [sp, #8]
    5db0:	ea5b 0303 	orrs.w	r3, fp, r3
    5db4:	f43f acff 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    5db8:	f108 0005 	add.w	r0, r8, #5
    5dbc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5dc0:	2102      	movs	r1, #2
    5dc2:	4448      	add	r0, r9
    5dc4:	47a8      	blx	r5
    5dc6:	4606      	mov	r6, r0
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5dc8:	f108 0007 	add.w	r0, r8, #7
    5dcc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5dd0:	2102      	movs	r1, #2
    5dd2:	4448      	add	r0, r9
    5dd4:	47a8      	blx	r5
    5dd6:	4607      	mov	r7, r0
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5dd8:	f108 0009 	add.w	r0, r8, #9
    5ddc:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5de0:	2102      	movs	r1, #2
    5de2:	4448      	add	r0, r9
    5de4:	47a8      	blx	r5
					grid_ui_recall_event_configuration(&grid_ui_state, banknumber, elementnumber, eventtype);
    5de6:	b2f1      	uxtb	r1, r6
    5de8:	b2c3      	uxtb	r3, r0
    5dea:	4e9d      	ldr	r6, [pc, #628]	; (6060 <grid_port_process_outbound_ui+0x9a0>)
    5dec:	b2fa      	uxtb	r2, r7
    5dee:	4650      	mov	r0, sl
    5df0:	47b0      	blx	r6
    5df2:	e4e0      	b.n	57b6 <grid_port_process_outbound_ui+0xf6>
				else if (msg_class == GRID_CLASS_CONFIGURATION_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_local)){
    5df4:	2f0e      	cmp	r7, #14
    5df6:	f47f acde 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    5dfa:	f1bb 0f00 	cmp.w	fp, #0
    5dfe:	f040 80e0 	bne.w	5fc2 <grid_port_process_outbound_ui+0x902>
    5e02:	2c00      	cmp	r4, #0
    5e04:	f000 8150 	beq.w	60a8 <grid_port_process_outbound_ui+0x9e8>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    5e08:	ab2b      	add	r3, sp, #172	; 0xac
    5e0a:	f108 0005 	add.w	r0, r8, #5
    5e0e:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e12:	2102      	movs	r1, #2
    5e14:	4418      	add	r0, r3
    5e16:	47a8      	blx	r5
    5e18:	b2c3      	uxtb	r3, r0
    5e1a:	9305      	str	r3, [sp, #20]
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5e1c:	f108 0007 	add.w	r0, r8, #7
    5e20:	ab2b      	add	r3, sp, #172	; 0xac
    5e22:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e26:	2102      	movs	r1, #2
    5e28:	4418      	add	r0, r3
    5e2a:	47a8      	blx	r5
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e2c:	ab2b      	add	r3, sp, #172	; 0xac
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    5e2e:	9007      	str	r0, [sp, #28]
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e30:	f108 0009 	add.w	r0, r8, #9
    5e34:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    5e38:	2102      	movs	r1, #2
    5e3a:	4418      	add	r0, r3
    5e3c:	47a8      	blx	r5
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e3e:	2700      	movs	r7, #0
    5e40:	4b88      	ldr	r3, [pc, #544]	; (6064 <grid_port_process_outbound_ui+0x9a4>)
    5e42:	970d      	str	r7, [sp, #52]	; 0x34
    5e44:	2274      	movs	r2, #116	; 0x74
    5e46:	4639      	mov	r1, r7
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGURATION_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    5e48:	fa5f f980 	uxtb.w	r9, r0
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e4c:	a80e      	add	r0, sp, #56	; 0x38
    5e4e:	4798      	blx	r3
					uint32_t actionstring_length = current_stop-current_start-GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset;
    5e50:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5e54:	f108 000b 	add.w	r0, r8, #11
    5e58:	eba3 0308 	sub.w	r3, r3, r8
    5e5c:	aa2b      	add	r2, sp, #172	; 0xac
					uint8_t actionstring[GRID_UI_ACTION_STRING_maxlength]	= {0};
    5e5e:	ae0d      	add	r6, sp, #52	; 0x34
					uint32_t actionstring_length = current_stop-current_start-GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset;
    5e60:	3b0b      	subs	r3, #11
					for(uint32_t j = 0; j<actionstring_length; j++){
    5e62:	eb02 0800 	add.w	r8, r2, r0
    5e66:	4639      	mov	r1, r7
    5e68:	4299      	cmp	r1, r3
    5e6a:	f0c0 80ed 	bcc.w	6048 <grid_port_process_outbound_ui+0x988>
					grid_ui_event_register_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype, actionstring, actionstring_length);
    5e6e:	9905      	ldr	r1, [sp, #20]
    5e70:	f8da 2004 	ldr.w	r2, [sl, #4]
    5e74:	f89d 801c 	ldrb.w	r8, [sp, #28]
    5e78:	4f7b      	ldr	r7, [pc, #492]	; (6068 <grid_port_process_outbound_ui+0x9a8>)
    5e7a:	0109      	lsls	r1, r1, #4
    5e7c:	9104      	str	r1, [sp, #16]
    5e7e:	9905      	ldr	r1, [sp, #20]
    5e80:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    5e84:	2664      	movs	r6, #100	; 0x64
    5e86:	68d0      	ldr	r0, [r2, #12]
    5e88:	fb06 f608 	mul.w	r6, r6, r8
    5e8c:	aa0d      	add	r2, sp, #52	; 0x34
    5e8e:	4649      	mov	r1, r9
    5e90:	4430      	add	r0, r6
    5e92:	47b8      	blx	r7
					if (banknumber == grid_sys_state.bank_activebank_number){
    5e94:	4b75      	ldr	r3, [pc, #468]	; (606c <grid_port_process_outbound_ui+0x9ac>)
    5e96:	9a05      	ldr	r2, [sp, #20]
    5e98:	7bdb      	ldrb	r3, [r3, #15]
    5e9a:	4293      	cmp	r3, r2
    5e9c:	d105      	bne.n	5eaa <grid_port_process_outbound_ui+0x7ea>
						grid_ui_smart_trigger(&grid_ui_state, banknumber, elementnumber, eventtype);
    5e9e:	9905      	ldr	r1, [sp, #20]
    5ea0:	4f73      	ldr	r7, [pc, #460]	; (6070 <grid_port_process_outbound_ui+0x9b0>)
    5ea2:	464b      	mov	r3, r9
    5ea4:	4642      	mov	r2, r8
    5ea6:	4650      	mov	r0, sl
    5ea8:	47b8      	blx	r7
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    5eaa:	f8da 3004 	ldr.w	r3, [sl, #4]
    5eae:	9a04      	ldr	r2, [sp, #16]
    5eb0:	4413      	add	r3, r2
    5eb2:	4649      	mov	r1, r9
    5eb4:	68d8      	ldr	r0, [r3, #12]
    5eb6:	4b6f      	ldr	r3, [pc, #444]	; (6074 <grid_port_process_outbound_ui+0x9b4>)
    5eb8:	4430      	add	r0, r6
    5eba:	4798      	blx	r3
					if (event_index != 255){
    5ebc:	28ff      	cmp	r0, #255	; 0xff
    5ebe:	d03d      	beq.n	5f3c <grid_port_process_outbound_ui+0x87c>
						if (position_is_local){
    5ec0:	b304      	cbz	r4, 5f04 <grid_port_process_outbound_ui+0x844>
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_flashempty_flag=0;
    5ec2:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ec6:	9904      	ldr	r1, [sp, #16]
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 0;
    5ec8:	9f04      	ldr	r7, [sp, #16]
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_flashempty_flag=0;
    5eca:	440a      	add	r2, r1
    5ecc:	f44f 7386 	mov.w	r3, #268	; 0x10c
    5ed0:	68d2      	ldr	r2, [r2, #12]
    5ed2:	4432      	add	r2, r6
    5ed4:	4343      	muls	r3, r0
    5ed6:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5ed8:	441a      	add	r2, r3
    5eda:	2100      	movs	r1, #0
    5edc:	f882 1109 	strb.w	r1, [r2, #265]	; 0x109
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 0;
    5ee0:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ee4:	443a      	add	r2, r7
    5ee6:	68d2      	ldr	r2, [r2, #12]
    5ee8:	4432      	add	r2, r6
    5eea:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5eec:	441a      	add	r2, r3
    5eee:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 0;
    5ef2:	f8da 2004 	ldr.w	r2, [sl, #4]
    5ef6:	443a      	add	r2, r7
    5ef8:	68d2      	ldr	r2, [r2, #12]
    5efa:	4432      	add	r2, r6
    5efc:	6e12      	ldr	r2, [r2, #96]	; 0x60
    5efe:	4413      	add	r3, r2
    5f00:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
						if (position_is_me){
    5f04:	f1bb 0f00 	cmp.w	fp, #0
    5f08:	d018      	beq.n	5f3c <grid_port_process_outbound_ui+0x87c>
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    5f0a:	f44f 7286 	mov.w	r2, #268	; 0x10c
    5f0e:	4350      	muls	r0, r2
    5f10:	f8da 3004 	ldr.w	r3, [sl, #4]
    5f14:	9a04      	ldr	r2, [sp, #16]
    5f16:	4413      	add	r3, r2
    5f18:	2201      	movs	r2, #1
    5f1a:	68db      	ldr	r3, [r3, #12]
    5f1c:	4433      	add	r3, r6
    5f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    5f20:	4403      	add	r3, r0
    5f22:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
							grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 0;
    5f26:	f8da 3004 	ldr.w	r3, [sl, #4]
    5f2a:	9a04      	ldr	r2, [sp, #16]
    5f2c:	441a      	add	r2, r3
    5f2e:	68d3      	ldr	r3, [r2, #12]
    5f30:	441e      	add	r6, r3
    5f32:	6e33      	ldr	r3, [r6, #96]	; 0x60
    5f34:	4418      	add	r0, r3
    5f36:	2300      	movs	r3, #0
    5f38:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
					grid_msg_init(&response);
    5f3c:	4b4e      	ldr	r3, [pc, #312]	; (6078 <grid_port_process_outbound_ui+0x9b8>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5f3e:	4e4f      	ldr	r6, [pc, #316]	; (607c <grid_port_process_outbound_ui+0x9bc>)
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f40:	4f4f      	ldr	r7, [pc, #316]	; (6080 <grid_port_process_outbound_ui+0x9c0>)
					grid_msg_init(&response);
    5f42:	a88f      	add	r0, sp, #572	; 0x23c
    5f44:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5f46:	227f      	movs	r2, #127	; 0x7f
    5f48:	4611      	mov	r1, r2
    5f4a:	2300      	movs	r3, #0
    5f4c:	a88f      	add	r0, sp, #572	; 0x23c
    5f4e:	47b0      	blx	r6
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f50:	2303      	movs	r3, #3
					uint8_t response_payload[10] = {0};
    5f52:	2600      	movs	r6, #0
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f54:	494b      	ldr	r1, [pc, #300]	; (6084 <grid_port_process_outbound_ui+0x9c4>)
    5f56:	9300      	str	r3, [sp, #0]
    5f58:	2202      	movs	r2, #2
    5f5a:	2380      	movs	r3, #128	; 0x80
    5f5c:	a809      	add	r0, sp, #36	; 0x24
					uint8_t response_payload[10] = {0};
    5f5e:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
    5f62:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    5f66:	47b8      	blx	r7
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5f68:	4b47      	ldr	r3, [pc, #284]	; (6088 <grid_port_process_outbound_ui+0x9c8>)
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    5f6a:	4f48      	ldr	r7, [pc, #288]	; (608c <grid_port_process_outbound_ui+0x9cc>)
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5f6c:	a809      	add	r0, sp, #36	; 0x24
    5f6e:	4798      	blx	r3
    5f70:	4b47      	ldr	r3, [pc, #284]	; (6090 <grid_port_process_outbound_ui+0x9d0>)
    5f72:	4602      	mov	r2, r0
    5f74:	a909      	add	r1, sp, #36	; 0x24
    5f76:	a88f      	add	r0, sp, #572	; 0x23c
    5f78:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    5f7a:	9b05      	ldr	r3, [sp, #20]
    5f7c:	9300      	str	r3, [sp, #0]
    5f7e:	2205      	movs	r2, #5
    5f80:	2302      	movs	r3, #2
    5f82:	4631      	mov	r1, r6
    5f84:	a88f      	add	r0, sp, #572	; 0x23c
    5f86:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, elementnumber);
    5f88:	2302      	movs	r3, #2
    5f8a:	2207      	movs	r2, #7
    5f8c:	4631      	mov	r1, r6
    5f8e:	a88f      	add	r0, sp, #572	; 0x23c
    5f90:	f8cd 8000 	str.w	r8, [sp]
    5f94:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eventtype);
    5f96:	2302      	movs	r3, #2
    5f98:	2209      	movs	r2, #9
    5f9a:	4631      	mov	r1, r6
    5f9c:	a88f      	add	r0, sp, #572	; 0x23c
    5f9e:	f8cd 9000 	str.w	r9, [sp]
    5fa2:	47b8      	blx	r7
						grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    5fa4:	230a      	movs	r3, #10
    5fa6:	9300      	str	r3, [sp, #0]
    5fa8:	2204      	movs	r2, #4
    5faa:	2301      	movs	r3, #1
    5fac:	4631      	mov	r1, r6
    5fae:	a88f      	add	r0, sp, #572	; 0x23c
    5fb0:	47b8      	blx	r7
                        grid_msg_packet_close(&response);
    5fb2:	4b38      	ldr	r3, [pc, #224]	; (6094 <grid_port_process_outbound_ui+0x9d4>)
    5fb4:	a88f      	add	r0, sp, #572	; 0x23c
    5fb6:	4798      	blx	r3
                        grid_msg_packet_send_everywhere(&response);
    5fb8:	4b37      	ldr	r3, [pc, #220]	; (6098 <grid_port_process_outbound_ui+0x9d8>)
    5fba:	a88f      	add	r0, sp, #572	; 0x23c
    5fbc:	4798      	blx	r3
    5fbe:	f7ff bbfa 	b.w	57b6 <grid_port_process_outbound_ui+0xf6>
                    if (!position_is_local){
    5fc2:	2c00      	cmp	r4, #0
    5fc4:	f47f af20 	bne.w	5e08 <grid_port_process_outbound_ui+0x748>
                        grid_keyboard_state.isenabled = 0;             
    5fc8:	4e34      	ldr	r6, [pc, #208]	; (609c <grid_port_process_outbound_ui+0x9dc>)
                        grid_msg_init(&response);
    5fca:	4b2b      	ldr	r3, [pc, #172]	; (6078 <grid_port_process_outbound_ui+0x9b8>)
                        grid_keyboard_state.isenabled = 0;             
    5fcc:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
                        grid_msg_init(&response);
    5fd0:	a88f      	add	r0, sp, #572	; 0x23c
    5fd2:	4798      	blx	r3
                        grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    5fd4:	227f      	movs	r2, #127	; 0x7f
    5fd6:	4623      	mov	r3, r4
    5fd8:	4611      	mov	r1, r2
    5fda:	a88f      	add	r0, sp, #572	; 0x23c
    5fdc:	4f27      	ldr	r7, [pc, #156]	; (607c <grid_port_process_outbound_ui+0x9bc>)
    5fde:	47b8      	blx	r7
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5fe0:	2303      	movs	r3, #3
    5fe2:	492f      	ldr	r1, [pc, #188]	; (60a0 <grid_port_process_outbound_ui+0x9e0>)
    5fe4:	9300      	str	r3, [sp, #0]
    5fe6:	2202      	movs	r2, #2
    5fe8:	4f25      	ldr	r7, [pc, #148]	; (6080 <grid_port_process_outbound_ui+0x9c0>)
                        uint8_t response_payload[10] = {0};
    5fea:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5fee:	2392      	movs	r3, #146	; 0x92
    5ff0:	a80d      	add	r0, sp, #52	; 0x34
                        uint8_t response_payload[10] = {0};
    5ff2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    5ff6:	47b8      	blx	r7
                        grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    5ff8:	4b23      	ldr	r3, [pc, #140]	; (6088 <grid_port_process_outbound_ui+0x9c8>)
    5ffa:	a80d      	add	r0, sp, #52	; 0x34
    5ffc:	4798      	blx	r3
    5ffe:	a90d      	add	r1, sp, #52	; 0x34
    6000:	4602      	mov	r2, r0
    6002:	4b23      	ldr	r3, [pc, #140]	; (6090 <grid_port_process_outbound_ui+0x9d0>)
    6004:	a88f      	add	r0, sp, #572	; 0x23c
    6006:	4798      	blx	r3
                        grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6008:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
    600c:	9300      	str	r3, [sp, #0]
    600e:	4e1f      	ldr	r6, [pc, #124]	; (608c <grid_port_process_outbound_ui+0x9cc>)
    6010:	4621      	mov	r1, r4
    6012:	a88f      	add	r0, sp, #572	; 0x23c
    6014:	2302      	movs	r3, #2
    6016:	2205      	movs	r2, #5
    6018:	47b0      	blx	r6
                        grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    601a:	230d      	movs	r3, #13
    601c:	4621      	mov	r1, r4
    601e:	2204      	movs	r2, #4
    6020:	9300      	str	r3, [sp, #0]
    6022:	a88f      	add	r0, sp, #572	; 0x23c
    6024:	2301      	movs	r3, #1
    6026:	47b0      	blx	r6
                        grid_msg_packet_close(&response);
    6028:	4b1a      	ldr	r3, [pc, #104]	; (6094 <grid_port_process_outbound_ui+0x9d4>)
                        grid_sys_alert_set_alert(&grid_sys_state, 100, 100, 100, 0, 250);
    602a:	4e1e      	ldr	r6, [pc, #120]	; (60a4 <grid_port_process_outbound_ui+0x9e4>)
                        grid_msg_packet_close(&response);
    602c:	a88f      	add	r0, sp, #572	; 0x23c
    602e:	4798      	blx	r3
                        grid_msg_packet_send_everywhere(&response);
    6030:	4b19      	ldr	r3, [pc, #100]	; (6098 <grid_port_process_outbound_ui+0x9d8>)
    6032:	a88f      	add	r0, sp, #572	; 0x23c
    6034:	4798      	blx	r3
                        grid_sys_alert_set_alert(&grid_sys_state, 100, 100, 100, 0, 250);
    6036:	23fa      	movs	r3, #250	; 0xfa
    6038:	e9cd 4300 	strd	r4, r3, [sp]
    603c:	2364      	movs	r3, #100	; 0x64
    603e:	480b      	ldr	r0, [pc, #44]	; (606c <grid_port_process_outbound_ui+0x9ac>)
    6040:	461a      	mov	r2, r3
    6042:	4619      	mov	r1, r3
    6044:	47b0      	blx	r6
    6046:	e6df      	b.n	5e08 <grid_port_process_outbound_ui+0x748>
						actionstring[j] = message[current_start+GRID_CLASS_CONFIGURATION_ACTIONSTRING_offset + j];
    6048:	f818 2b01 	ldrb.w	r2, [r8], #1
    604c:	558a      	strb	r2, [r1, r6]
					for(uint32_t j = 0; j<actionstring_length; j++){
    604e:	3101      	adds	r1, #1
    6050:	e70a      	b.n	5e68 <grid_port_process_outbound_ui+0x7a8>
    6052:	bf00      	nop
    6054:	200079b8 	.word	0x200079b8
    6058:	00009a7d 	.word	0x00009a7d
    605c:	00009a9d 	.word	0x00009a9d
    6060:	00009aad 	.word	0x00009aad
    6064:	00012e05 	.word	0x00012e05
    6068:	0000a7f9 	.word	0x0000a7f9
    606c:	20006fa4 	.word	0x20006fa4
    6070:	0000aabd 	.word	0x0000aabd
    6074:	00009f55 	.word	0x00009f55
    6078:	00008545 	.word	0x00008545
    607c:	00008579 	.word	0x00008579
    6080:	000134b9 	.word	0x000134b9
    6084:	00015570 	.word	0x00015570
    6088:	00013981 	.word	0x00013981
    608c:	00008529 	.word	0x00008529
    6090:	000084b5 	.word	0x000084b5
    6094:	00008671 	.word	0x00008671
    6098:	00008745 	.word	0x00008745
    609c:	20008200 	.word	0x20008200
    60a0:	00015564 	.word	0x00015564
    60a4:	000097ab 	.word	0x000097ab
                        grid_keyboard_state.isenabled = 0;             
    60a8:	4e8b      	ldr	r6, [pc, #556]	; (62d8 <grid_port_process_outbound_ui+0xc18>)
                        grid_msg_init(&response);
    60aa:	4b8c      	ldr	r3, [pc, #560]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
                        grid_keyboard_state.isenabled = 0;             
    60ac:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
                        grid_msg_init(&response);
    60b0:	a88f      	add	r0, sp, #572	; 0x23c
    60b2:	4798      	blx	r3
                        grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    60b4:	227f      	movs	r2, #127	; 0x7f
    60b6:	4611      	mov	r1, r2
    60b8:	4f89      	ldr	r7, [pc, #548]	; (62e0 <grid_port_process_outbound_ui+0xc20>)
    60ba:	4623      	mov	r3, r4
    60bc:	a88f      	add	r0, sp, #572	; 0x23c
    60be:	47b8      	blx	r7
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60c0:	2303      	movs	r3, #3
    60c2:	4988      	ldr	r1, [pc, #544]	; (62e4 <grid_port_process_outbound_ui+0xc24>)
    60c4:	9300      	str	r3, [sp, #0]
    60c6:	2202      	movs	r2, #2
    60c8:	2392      	movs	r3, #146	; 0x92
    60ca:	4f87      	ldr	r7, [pc, #540]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
                        uint8_t response_payload[10] = {0};
    60cc:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60d0:	a80d      	add	r0, sp, #52	; 0x34
                        uint8_t response_payload[10] = {0};
    60d2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
                        sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    60d6:	47b8      	blx	r7
                        grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    60d8:	4b84      	ldr	r3, [pc, #528]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
    60da:	a80d      	add	r0, sp, #52	; 0x34
    60dc:	4798      	blx	r3
    60de:	4b84      	ldr	r3, [pc, #528]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    60e0:	4602      	mov	r2, r0
    60e2:	a90d      	add	r1, sp, #52	; 0x34
    60e4:	a88f      	add	r0, sp, #572	; 0x23c
    60e6:	4798      	blx	r3
                        grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    60e8:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
    60ec:	9300      	str	r3, [sp, #0]
    60ee:	2205      	movs	r2, #5
    60f0:	2302      	movs	r3, #2
    60f2:	4621      	mov	r1, r4
    60f4:	4e7f      	ldr	r6, [pc, #508]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
    60f6:	a88f      	add	r0, sp, #572	; 0x23c
    60f8:	47b0      	blx	r6
                        grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    60fa:	230d      	movs	r3, #13
    60fc:	9300      	str	r3, [sp, #0]
    60fe:	2204      	movs	r2, #4
    6100:	2301      	movs	r3, #1
    6102:	4621      	mov	r1, r4
    6104:	a88f      	add	r0, sp, #572	; 0x23c
    6106:	47b0      	blx	r6
    6108:	e753      	b.n	5fb2 <grid_port_process_outbound_ui+0x8f2>
                else if (msg_class == GRID_CLASS_HIDKEYSTATUS_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_global)){
    610a:	2e92      	cmp	r6, #146	; 0x92
    610c:	d13e      	bne.n	618c <grid_port_process_outbound_ui+0xacc>
    610e:	2f0e      	cmp	r7, #14
    6110:	f47f ab51 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6114:	9b02      	ldr	r3, [sp, #8]
    6116:	ea5b 0303 	orrs.w	r3, fp, r3
    611a:	f43f ab4c 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
                    uint8_t isenabled =	grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset]		, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length	, &error_flag);
    611e:	f108 0005 	add.w	r0, r8, #5
    6122:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    6126:	2102      	movs	r1, #2
    6128:	4448      	add	r0, r9
    612a:	47a8      	blx	r5
                    grid_keyboard_state.isenabled = isenabled;
    612c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 62d8 <grid_port_process_outbound_ui+0xc18>
                    grid_msg_init(&response);
    6130:	4b6a      	ldr	r3, [pc, #424]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
                    uint8_t isenabled =	grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset]		, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length	, &error_flag);
    6132:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
                    grid_msg_init(&response);
    6136:	a88f      	add	r0, sp, #572	; 0x23c
    6138:	4798      	blx	r3
                    grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    613a:	227f      	movs	r2, #127	; 0x7f
    613c:	4611      	mov	r1, r2
    613e:	4f68      	ldr	r7, [pc, #416]	; (62e0 <grid_port_process_outbound_ui+0xc20>)
    6140:	2300      	movs	r3, #0
    6142:	a88f      	add	r0, sp, #572	; 0x23c
    6144:	47b8      	blx	r7
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    6146:	2303      	movs	r3, #3
    6148:	4966      	ldr	r1, [pc, #408]	; (62e4 <grid_port_process_outbound_ui+0xc24>)
    614a:	9300      	str	r3, [sp, #0]
                    uint8_t response_payload[10] = {0};
    614c:	2700      	movs	r7, #0
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    614e:	4633      	mov	r3, r6
    6150:	2202      	movs	r2, #2
    6152:	4e65      	ldr	r6, [pc, #404]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
                    uint8_t response_payload[10] = {0};
    6154:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    6158:	a80d      	add	r0, sp, #52	; 0x34
                    uint8_t response_payload[10] = {0};
    615a:	e9cd 770d 	strd	r7, r7, [sp, #52]	; 0x34
                    sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    615e:	47b0      	blx	r6
                    grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    6160:	4b62      	ldr	r3, [pc, #392]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
                    grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6162:	4e64      	ldr	r6, [pc, #400]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
                    grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    6164:	a80d      	add	r0, sp, #52	; 0x34
    6166:	4798      	blx	r3
    6168:	4b61      	ldr	r3, [pc, #388]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    616a:	4602      	mov	r2, r0
    616c:	a90d      	add	r1, sp, #52	; 0x34
    616e:	a88f      	add	r0, sp, #572	; 0x23c
    6170:	4798      	blx	r3
                    grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, grid_keyboard_state.isenabled);
    6172:	f898 3045 	ldrb.w	r3, [r8, #69]	; 0x45
    6176:	9300      	str	r3, [sp, #0]
    6178:	2205      	movs	r2, #5
    617a:	2302      	movs	r3, #2
    617c:	4639      	mov	r1, r7
    617e:	a88f      	add	r0, sp, #572	; 0x23c
    6180:	47b0      	blx	r6
                    grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    6182:	230a      	movs	r3, #10
    6184:	9300      	str	r3, [sp, #0]
    6186:	2204      	movs	r2, #4
    6188:	2301      	movs	r3, #1
    618a:	e54a      	b.n	5c22 <grid_port_process_outbound_ui+0x562>
				else if (msg_class == GRID_CLASS_CONFIGDEFAULT_code && msg_instr == GRID_INSTR_EXECUTE_code && (position_is_me || position_is_local)){
    618c:	2e81      	cmp	r6, #129	; 0x81
    618e:	f47f ab12 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6192:	2f0e      	cmp	r7, #14
    6194:	f47f ab0f 	bne.w	57b6 <grid_port_process_outbound_ui+0xf6>
    6198:	ea5b 0304 	orrs.w	r3, fp, r4
    619c:	f43f ab0b 	beq.w	57b6 <grid_port_process_outbound_ui+0xf6>
					uint8_t banknumber		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_BANKNUMBER_offset]		, GRID_CLASS_CONFIGURATION_BANKNUMBER_length	, &error_flag);
    61a0:	f108 0005 	add.w	r0, r8, #5
    61a4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61a8:	2102      	movs	r1, #2
    61aa:	4448      	add	r0, r9
    61ac:	47a8      	blx	r5
    61ae:	b2c7      	uxtb	r7, r0
					uint8_t elementnumber	= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_ELEMENTNUMBER_offset]	, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length	, &error_flag);
    61b0:	f108 0007 	add.w	r0, r8, #7
    61b4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61b8:	2102      	movs	r1, #2
    61ba:	4448      	add	r0, r9
    61bc:	47a8      	blx	r5
    61be:	4606      	mov	r6, r0
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    61c0:	f108 0009 	add.w	r0, r8, #9
    61c4:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    61c8:	2102      	movs	r1, #2
    61ca:	4448      	add	r0, r9
    61cc:	47a8      	blx	r5
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    61ce:	f8da 3004 	ldr.w	r3, [sl, #4]
    61d2:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    61d6:	b2f2      	uxtb	r2, r6
					uint8_t eventtype		= grid_sys_read_hex_string_value(&message[current_start+GRID_CLASS_CONFIGDEFAULT_EVENTTYPE_offset]		, GRID_CLASS_CONFIGURATION_EVENTTYPE_length		, &error_flag);
    61d8:	fa5f f880 	uxtb.w	r8, r0
					grid_ui_event_generate_actionstring(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    61dc:	f04f 0964 	mov.w	r9, #100	; 0x64
    61e0:	68d8      	ldr	r0, [r3, #12]
    61e2:	4b45      	ldr	r3, [pc, #276]	; (62f8 <grid_port_process_outbound_ui+0xc38>)
    61e4:	9204      	str	r2, [sp, #16]
    61e6:	fb09 f902 	mul.w	r9, r9, r2
    61ea:	4641      	mov	r1, r8
    61ec:	4448      	add	r0, r9
    61ee:	4798      	blx	r3
					if (banknumber == grid_sys_state.bank_activebank_number){
    61f0:	4b42      	ldr	r3, [pc, #264]	; (62fc <grid_port_process_outbound_ui+0xc3c>)
    61f2:	7bdb      	ldrb	r3, [r3, #15]
    61f4:	42bb      	cmp	r3, r7
    61f6:	d105      	bne.n	6204 <grid_port_process_outbound_ui+0xb44>
						grid_ui_smart_trigger(&grid_ui_state, banknumber, elementnumber, eventtype);
    61f8:	9a04      	ldr	r2, [sp, #16]
    61fa:	4e41      	ldr	r6, [pc, #260]	; (6300 <grid_port_process_outbound_ui+0xc40>)
    61fc:	4643      	mov	r3, r8
    61fe:	4639      	mov	r1, r7
    6200:	4650      	mov	r0, sl
    6202:	47b0      	blx	r6
					uint8_t event_index = grid_ui_event_find(&grid_ui_state.bank_list[banknumber].element_list[elementnumber], eventtype);
    6204:	f8da 3004 	ldr.w	r3, [sl, #4]
    6208:	013a      	lsls	r2, r7, #4
    620a:	4413      	add	r3, r2
    620c:	4641      	mov	r1, r8
    620e:	68d8      	ldr	r0, [r3, #12]
    6210:	4b3c      	ldr	r3, [pc, #240]	; (6304 <grid_port_process_outbound_ui+0xc44>)
    6212:	4448      	add	r0, r9
    6214:	4798      	blx	r3
					if (event_index != 255){
    6216:	28ff      	cmp	r0, #255	; 0xff
    6218:	d018      	beq.n	624c <grid_port_process_outbound_ui+0xb8c>
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    621a:	f8da 3004 	ldr.w	r3, [sl, #4]
    621e:	f44f 7286 	mov.w	r2, #268	; 0x10c
    6222:	4350      	muls	r0, r2
    6224:	013a      	lsls	r2, r7, #4
    6226:	4413      	add	r3, r2
    6228:	2201      	movs	r2, #1
    622a:	68db      	ldr	r3, [r3, #12]
    622c:	444b      	add	r3, r9
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 1;
    622e:	0139      	lsls	r1, r7, #4
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_changed_flag = 1;
    6230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6232:	4403      	add	r3, r0
    6234:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
						grid_ui_state.bank_list[banknumber].element_list[elementnumber].event_list[event_index].cfg_default_flag = 1;
    6238:	f8da 3004 	ldr.w	r3, [sl, #4]
    623c:	440b      	add	r3, r1
    623e:	68db      	ldr	r3, [r3, #12]
    6240:	4499      	add	r9, r3
    6242:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
    6246:	4418      	add	r0, r3
    6248:	f880 2108 	strb.w	r2, [r0, #264]	; 0x108
					grid_msg_init(&response);
    624c:	4b23      	ldr	r3, [pc, #140]	; (62dc <grid_port_process_outbound_ui+0xc1c>)
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    624e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 62e0 <grid_port_process_outbound_ui+0xc20>
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6252:	4e25      	ldr	r6, [pc, #148]	; (62e8 <grid_port_process_outbound_ui+0xc28>)
					grid_msg_init(&response);
    6254:	a88f      	add	r0, sp, #572	; 0x23c
    6256:	4798      	blx	r3
					grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    6258:	227f      	movs	r2, #127	; 0x7f
    625a:	4611      	mov	r1, r2
    625c:	2300      	movs	r3, #0
    625e:	a88f      	add	r0, sp, #572	; 0x23c
    6260:	47c8      	blx	r9
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6262:	2303      	movs	r3, #3
					uint8_t response_payload[10] = {0};
    6264:	f04f 0900 	mov.w	r9, #0
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    6268:	4927      	ldr	r1, [pc, #156]	; (6308 <grid_port_process_outbound_ui+0xc48>)
    626a:	9300      	str	r3, [sp, #0]
    626c:	2202      	movs	r2, #2
    626e:	2380      	movs	r3, #128	; 0x80
    6270:	a80d      	add	r0, sp, #52	; 0x34
					uint8_t response_payload[10] = {0};
    6272:	e9cd 990d 	strd	r9, r9, [sp, #52]	; 0x34
    6276:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
					sprintf(response_payload, GRID_CLASS_CONFIGURATION_frame);
    627a:	47b0      	blx	r6
					grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    627c:	4b1b      	ldr	r3, [pc, #108]	; (62ec <grid_port_process_outbound_ui+0xc2c>)
    627e:	a80d      	add	r0, sp, #52	; 0x34
    6280:	4798      	blx	r3
    6282:	4b1b      	ldr	r3, [pc, #108]	; (62f0 <grid_port_process_outbound_ui+0xc30>)
    6284:	4602      	mov	r2, r0
    6286:	a90d      	add	r1, sp, #52	; 0x34
    6288:	a88f      	add	r0, sp, #572	; 0x23c
    628a:	4798      	blx	r3
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, banknumber);
    628c:	9700      	str	r7, [sp, #0]
    628e:	2302      	movs	r3, #2
    6290:	4f18      	ldr	r7, [pc, #96]	; (62f4 <grid_port_process_outbound_ui+0xc34>)
    6292:	2205      	movs	r2, #5
    6294:	4649      	mov	r1, r9
    6296:	a88f      	add	r0, sp, #572	; 0x23c
    6298:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, elementnumber);
    629a:	9b04      	ldr	r3, [sp, #16]
    629c:	9300      	str	r3, [sp, #0]
    629e:	2207      	movs	r2, #7
    62a0:	2302      	movs	r3, #2
    62a2:	4649      	mov	r1, r9
    62a4:	a88f      	add	r0, sp, #572	; 0x23c
    62a6:	47b8      	blx	r7
					grid_msg_text_set_parameter(&response, 0, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eventtype);
    62a8:	f8cd 8000 	str.w	r8, [sp]
    62ac:	2302      	movs	r3, #2
    62ae:	2209      	movs	r2, #9
    62b0:	4649      	mov	r1, r9
    62b2:	a88f      	add	r0, sp, #572	; 0x23c
    62b4:	47b8      	blx	r7
						grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    62b6:	230a      	movs	r3, #10
    62b8:	2204      	movs	r2, #4
    62ba:	4649      	mov	r1, r9
    62bc:	9300      	str	r3, [sp, #0]
    62be:	a88f      	add	r0, sp, #572	; 0x23c
    62c0:	2301      	movs	r3, #1
    62c2:	47b8      	blx	r7
					grid_msg_packet_close(&response);
    62c4:	4b11      	ldr	r3, [pc, #68]	; (630c <grid_port_process_outbound_ui+0xc4c>)
    62c6:	a88f      	add	r0, sp, #572	; 0x23c
    62c8:	4798      	blx	r3
					grid_msg_packet_send_everywhere(&response);
    62ca:	4b11      	ldr	r3, [pc, #68]	; (6310 <grid_port_process_outbound_ui+0xc50>)
    62cc:	a88f      	add	r0, sp, #572	; 0x23c
    62ce:	4798      	blx	r3
				current_start = 0;
    62d0:	46c8      	mov	r8, r9
    62d2:	f7ff ba4c 	b.w	576e <grid_port_process_outbound_ui+0xae>
    62d6:	bf00      	nop
    62d8:	20008200 	.word	0x20008200
    62dc:	00008545 	.word	0x00008545
    62e0:	00008579 	.word	0x00008579
    62e4:	00015564 	.word	0x00015564
    62e8:	000134b9 	.word	0x000134b9
    62ec:	00013981 	.word	0x00013981
    62f0:	000084b5 	.word	0x000084b5
    62f4:	00008529 	.word	0x00008529
    62f8:	0000a915 	.word	0x0000a915
    62fc:	20006fa4 	.word	0x20006fa4
    6300:	0000aabd 	.word	0x0000aabd
    6304:	00009f55 	.word	0x00009f55
    6308:	00015570 	.word	0x00015570
    630c:	00008671 	.word	0x00008671
    6310:	00008745 	.word	0x00008745

00006314 <grid_port_process_outbound_usart>:

uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    6314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    6318:	8987      	ldrh	r7, [r0, #12]
uint8_t grid_port_process_outbound_usart(struct grid_port* por){
    631a:	4605      	mov	r5, r0
	if (por->tx_double_buffer_status == 0){ // READY TO SEND MESSAGE, NO TRANSMISSION IS IN PROGRESS
    631c:	bb1f      	cbnz	r7, 6366 <grid_port_process_outbound_usart+0x52>
		
		uint16_t packet_size = grid_buffer_read_size(&por->tx_buffer);
    631e:	f500 561c 	add.w	r6, r0, #9984	; 0x2700
    6322:	363c      	adds	r6, #60	; 0x3c
    6324:	4b11      	ldr	r3, [pc, #68]	; (636c <grid_port_process_outbound_usart+0x58>)
    6326:	4630      	mov	r0, r6
    6328:	4798      	blx	r3
		
		if (!packet_size){
    632a:	4604      	mov	r4, r0
    632c:	b1a0      	cbz	r0, 6358 <grid_port_process_outbound_usart+0x44>
			// NO PACKET IN RX BUFFER
			return 0;
		}else{
			
			// Let's transfer the packet to local memory
			grid_buffer_read_init(&por->tx_buffer);
    632e:	4b10      	ldr	r3, [pc, #64]	; (6370 <grid_port_process_outbound_usart+0x5c>)
			
			por->tx_double_buffer_status = packet_size;
			
			for (uint16_t i = 0; i<packet_size; i++){
				
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6330:	f8df a048 	ldr.w	sl, [pc, #72]	; 637c <grid_port_process_outbound_usart+0x68>
			grid_buffer_read_init(&por->tx_buffer);
    6334:	4630      	mov	r0, r6
    6336:	f105 082c 	add.w	r8, r5, #44	; 0x2c
    633a:	4798      	blx	r3
			por->tx_double_buffer_status = packet_size;
    633c:	46c1      	mov	r9, r8
    633e:	81ac      	strh	r4, [r5, #12]
			for (uint16_t i = 0; i<packet_size; i++){
    6340:	b2bb      	uxth	r3, r7
    6342:	429c      	cmp	r4, r3
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    6344:	4630      	mov	r0, r6
			for (uint16_t i = 0; i<packet_size; i++){
    6346:	d809      	bhi.n	635c <grid_port_process_outbound_usart+0x48>
				por->tx_double_buffer[i] = character;
				
			}
		
			// Let's acknowledge the transaction
			grid_buffer_read_acknowledge(&por->tx_buffer);
    6348:	4b0a      	ldr	r3, [pc, #40]	; (6374 <grid_port_process_outbound_usart+0x60>)
    634a:	4798      	blx	r3
			
			// Let's send the packet through USART
			io_write(&por->usart->io, por->tx_double_buffer, por->tx_double_buffer_status);		
    634c:	89aa      	ldrh	r2, [r5, #12]
    634e:	6868      	ldr	r0, [r5, #4]
    6350:	4b09      	ldr	r3, [pc, #36]	; (6378 <grid_port_process_outbound_usart+0x64>)
    6352:	4649      	mov	r1, r9
    6354:	4798      	blx	r3
			
			return 1;
    6356:	2001      	movs	r0, #1
		}
		
	}
	
	return 0;
}
    6358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				uint8_t character = grid_buffer_read_character(&por->tx_buffer);
    635c:	47d0      	blx	sl
				por->tx_double_buffer[i] = character;
    635e:	3701      	adds	r7, #1
    6360:	f808 0b01 	strb.w	r0, [r8], #1
			for (uint16_t i = 0; i<packet_size; i++){
    6364:	e7ec      	b.n	6340 <grid_port_process_outbound_usart+0x2c>
	return 0;
    6366:	2000      	movs	r0, #0
    6368:	e7f6      	b.n	6358 <grid_port_process_outbound_usart+0x44>
    636a:	bf00      	nop
    636c:	00004f05 	.word	0x00004f05
    6370:	00004f5b 	.word	0x00004f5b
    6374:	00004fed 	.word	0x00004fed
    6378:	0000b481 	.word	0x0000b481
    637c:	00004fc3 	.word	0x00004fc3

00006380 <grid_d51_init>:
	
}



void grid_d51_init(){
    6380:	b570      	push	{r4, r5, r6, lr}
	
	uint32_t hwid = grid_sys_get_hwcfg();
    6382:	4b09      	ldr	r3, [pc, #36]	; (63a8 <grid_d51_init+0x28>)
	
	#ifdef NDEBUG		
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "USER ROW CHECK!");
	grid_d51_verify_user_row();
	#else
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    6384:	4d09      	ldr	r5, [pc, #36]	; (63ac <grid_d51_init+0x2c>)
	printf("{\"type\":\"HWCFG\", \"data\": \"%d\"}\r\n", hwid);
    6386:	4c0a      	ldr	r4, [pc, #40]	; (63b0 <grid_d51_init+0x30>)
	uint32_t hwid = grid_sys_get_hwcfg();
    6388:	4798      	blx	r3
    638a:	4601      	mov	r1, r0
	printf("{\"type\":\"HWCFG\", \"data\": \"%d\"}\r\n", hwid);
    638c:	4809      	ldr	r0, [pc, #36]	; (63b4 <grid_d51_init+0x34>)
    638e:	47a0      	blx	r4
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "NO USER ROW CHECK!");
    6390:	4909      	ldr	r1, [pc, #36]	; (63b8 <grid_d51_init+0x38>)
    6392:	4628      	mov	r0, r5
    6394:	47a0      	blx	r4
	{
	}
	
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Unit Test");
    6396:	4909      	ldr	r1, [pc, #36]	; (63bc <grid_d51_init+0x3c>)
    6398:	4628      	mov	r0, r5
    639a:	47a0      	blx	r4
	while (1)
	{
	}
	#else
	
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    639c:	4628      	mov	r0, r5
    639e:	4623      	mov	r3, r4
    63a0:	4907      	ldr	r1, [pc, #28]	; (63c0 <grid_d51_init+0x40>)
	#endif
		
}
    63a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	GRID_DEBUG_WARNING(GRID_DEBUG_CONTEXT_BOOT, "No Hardware Test");
    63a6:	4718      	bx	r3
    63a8:	00009885 	.word	0x00009885
    63ac:	0001543b 	.word	0x0001543b
    63b0:	00013049 	.word	0x00013049
    63b4:	00015580 	.word	0x00015580
    63b8:	000155a1 	.word	0x000155a1
    63bc:	000155b4 	.word	0x000155b4
    63c0:	000155c1 	.word	0x000155c1

000063c4 <grid_expr_clear_input>:
}


grid_expr_clear_input(struct grid_expr_model* expr){

    expr->input_string_length = 0;
    63c4:	2300      	movs	r3, #0
    63c6:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

    for (uint32_t i=0; i<GRID_EXPR_INPUT_STRING_MAXLENGTH; i++){
    63ca:	1e42      	subs	r2, r0, #1
    63cc:	3063      	adds	r0, #99	; 0x63

        expr->input_string[i] = 0;
    63ce:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (uint32_t i=0; i<GRID_EXPR_INPUT_STRING_MAXLENGTH; i++){
    63d2:	4282      	cmp	r2, r0
    63d4:	d1fb      	bne.n	63ce <grid_expr_clear_input+0xa>

    }

}
    63d6:	4770      	bx	lr

000063d8 <grid_expr_clear_output>:

grid_expr_clear_output(struct grid_expr_model* expr){


    expr->output_string_length = 0;
    63d8:	2300      	movs	r3, #0
    63da:	f880 30ca 	strb.w	r3, [r0, #202]	; 0xca

    for (uint32_t i=0; i<GRID_EXPR_OUTPUT_STRING_MAXLENGTH; i++){
    63de:	f100 0265 	add.w	r2, r0, #101	; 0x65
    63e2:	30c9      	adds	r0, #201	; 0xc9

        expr->output_string[i] = 0;
    63e4:	f802 3b01 	strb.w	r3, [r2], #1
    for (uint32_t i=0; i<GRID_EXPR_OUTPUT_STRING_MAXLENGTH; i++){
    63e8:	4282      	cmp	r2, r0
    63ea:	d1fb      	bne.n	63e4 <grid_expr_clear_output+0xc>

    }

}
    63ec:	4770      	bx	lr
	...

000063f0 <grid_expr_init>:
void grid_expr_init(struct grid_expr_model* expr){
    63f0:	b510      	push	{r4, lr}
    grid_expr_clear_input(expr);
    63f2:	4b04      	ldr	r3, [pc, #16]	; (6404 <grid_expr_init+0x14>)
void grid_expr_init(struct grid_expr_model* expr){
    63f4:	4601      	mov	r1, r0
    grid_expr_clear_input(expr);
    63f6:	4798      	blx	r3
}
    63f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    grid_expr_clear_output(expr);
    63fc:	4b02      	ldr	r3, [pc, #8]	; (6408 <grid_expr_init+0x18>)
    63fe:	4608      	mov	r0, r1
    6400:	4718      	bx	r3
    6402:	bf00      	nop
    6404:	000063c5 	.word	0x000063c5
    6408:	000063d9 	.word	0x000063d9

0000640c <get>:
}


char get(char** e)
{
    char ret = **e;
    640c:	6802      	ldr	r2, [r0, #0]
{
    640e:	4603      	mov	r3, r0
    char ret = **e;
    6410:	f812 0b01 	ldrb.w	r0, [r2], #1
    ++*e;
    6414:	601a      	str	r2, [r3, #0]
    return ret;
}
    6416:	4770      	bx	lr

00006418 <number>:

int number(char** e)
{
    6418:	b530      	push	{r4, r5, lr}
    char ret = **e;
    641a:	6801      	ldr	r1, [r0, #0]
    641c:	f811 3b01 	ldrb.w	r3, [r1], #1
    ++*e;
    6420:	6001      	str	r1, [r0, #0]
{
    6422:	4602      	mov	r2, r0
    int result = get(e) - '0';
    while (peek(e) >= '0' && peek(e) <= '9') // HEX para
    {
        result = 10*result + get(e) - '0'; // HEX para
    6424:	250a      	movs	r5, #10
    int result = get(e) - '0';
    6426:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    return **e;
    642a:	6811      	ldr	r1, [r2, #0]
    642c:	780b      	ldrb	r3, [r1, #0]
    while (peek(e) >= '0' && peek(e) <= '9') // HEX para
    642e:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
    6432:	2c09      	cmp	r4, #9
    6434:	d900      	bls.n	6438 <number+0x20>
    }
    return result;
}
    6436:	bd30      	pop	{r4, r5, pc}
    ++*e;
    6438:	3101      	adds	r1, #1
        result = 10*result + get(e) - '0'; // HEX para
    643a:	fb05 3300 	mla	r3, r5, r0, r3
    ++*e;
    643e:	6011      	str	r1, [r2, #0]
        result = 10*result + get(e) - '0'; // HEX para
    6440:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6444:	e7f1      	b.n	642a <number+0x12>
	...

00006448 <expr_level_0>:
            result -= expr_level_2(e);
    return result;
}

int expr_level_0(char ** e) // equality
{
    6448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = expr_level_1(e);
    644a:	4e2a      	ldr	r6, [pc, #168]	; (64f4 <expr_level_0+0xac>)
        else if (peeked == '=' && peeked2 == '='){
            get(e); // burn the second character
            result = (result == expr_level_1(e));
        }
        else if (peeked == '!' && peeked2 == '='){
            get(e); // burn the second character
    644c:	4f2a      	ldr	r7, [pc, #168]	; (64f8 <expr_level_0+0xb0>)
{
    644e:	4605      	mov	r5, r0
    int result = expr_level_1(e);
    6450:	47b0      	blx	r6
    6452:	4604      	mov	r4, r0
    return **e;
    6454:	682a      	ldr	r2, [r5, #0]
    6456:	7813      	ldrb	r3, [r2, #0]
    while (     (peek(e) == '>' && peek2(e) != '=') || 
    6458:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
    645c:	293c      	cmp	r1, #60	; 0x3c
    645e:	d004      	beq.n	646a <expr_level_0+0x22>
                (peek(e) == '<' && peek2(e) != '=') || 
    6460:	2b3d      	cmp	r3, #61	; 0x3d
    6462:	d143      	bne.n	64ec <expr_level_0+0xa4>
                (peek(e) == '!' && peek2(e) == '=') ||
    6464:	7851      	ldrb	r1, [r2, #1]
    6466:	293d      	cmp	r1, #61	; 0x3d
    6468:	d142      	bne.n	64f0 <expr_level_0+0xa8>
    ++*e;
    646a:	1c51      	adds	r1, r2, #1
    646c:	6029      	str	r1, [r5, #0]
        if ((peeked == '>' && peeked2 != '=')){
    646e:	2b3e      	cmp	r3, #62	; 0x3e
    return **e;
    6470:	7852      	ldrb	r2, [r2, #1]
        if ((peeked == '>' && peeked2 != '=')){
    6472:	d108      	bne.n	6486 <expr_level_0+0x3e>
    6474:	2a3d      	cmp	r2, #61	; 0x3d
            result = (result>expr_level_1(e));
    6476:	4628      	mov	r0, r5
        if ((peeked == '>' && peeked2 != '=')){
    6478:	d028      	beq.n	64cc <expr_level_0+0x84>
            result = (result>expr_level_1(e));
    647a:	47b0      	blx	r6
    647c:	42a0      	cmp	r0, r4
    647e:	bfac      	ite	ge
    6480:	2400      	movge	r4, #0
    6482:	2401      	movlt	r4, #1
    6484:	e7e6      	b.n	6454 <expr_level_0+0xc>
        else if (peeked == '<' && peeked2 != '='){
    6486:	2b3c      	cmp	r3, #60	; 0x3c
    6488:	d108      	bne.n	649c <expr_level_0+0x54>
    648a:	2a3d      	cmp	r2, #61	; 0x3d
            result = (result<expr_level_1(e));
    648c:	4628      	mov	r0, r5
        else if (peeked == '<' && peeked2 != '='){
    648e:	d025      	beq.n	64dc <expr_level_0+0x94>
            result = (result<expr_level_1(e));
    6490:	47b0      	blx	r6
    6492:	42a0      	cmp	r0, r4
    6494:	bfd4      	ite	le
    6496:	2400      	movle	r4, #0
    6498:	2401      	movgt	r4, #1
    649a:	e7db      	b.n	6454 <expr_level_0+0xc>
        else if (peeked == '=' && peeked2 == '='){
    649c:	2b3d      	cmp	r3, #61	; 0x3d
    649e:	d109      	bne.n	64b4 <expr_level_0+0x6c>
    64a0:	2a3d      	cmp	r2, #61	; 0x3d
    64a2:	d1d7      	bne.n	6454 <expr_level_0+0xc>
            get(e); // burn the second character
    64a4:	4628      	mov	r0, r5
    64a6:	47b8      	blx	r7
            result = (result == expr_level_1(e));
    64a8:	4628      	mov	r0, r5
    64aa:	47b0      	blx	r6
    64ac:	1b03      	subs	r3, r0, r4
    64ae:	425c      	negs	r4, r3
    64b0:	415c      	adcs	r4, r3
    64b2:	e7cf      	b.n	6454 <expr_level_0+0xc>
        else if (peeked == '!' && peeked2 == '='){
    64b4:	2b21      	cmp	r3, #33	; 0x21
    64b6:	d1cd      	bne.n	6454 <expr_level_0+0xc>
    64b8:	2a3d      	cmp	r2, #61	; 0x3d
    64ba:	d1cb      	bne.n	6454 <expr_level_0+0xc>
            get(e); // burn the second character
    64bc:	4628      	mov	r0, r5
    64be:	47b8      	blx	r7
            result = (result != expr_level_1(e));
    64c0:	4628      	mov	r0, r5
    64c2:	47b0      	blx	r6
    64c4:	1b04      	subs	r4, r0, r4
    64c6:	bf18      	it	ne
    64c8:	2401      	movne	r4, #1
    64ca:	e7c3      	b.n	6454 <expr_level_0+0xc>
        }
        else if (peeked == '>' && peeked2 == '='){
            get(e); // burn the second character
    64cc:	47b8      	blx	r7
            result = (result >= expr_level_1(e));
    64ce:	4628      	mov	r0, r5
    64d0:	47b0      	blx	r6
    64d2:	42a0      	cmp	r0, r4
    64d4:	bfcc      	ite	gt
    64d6:	2400      	movgt	r4, #0
    64d8:	2401      	movle	r4, #1
    64da:	e7bb      	b.n	6454 <expr_level_0+0xc>
        }
        else if (peeked == '<' && peeked2 == '='){
            get(e); // burn the second character
    64dc:	47b8      	blx	r7
            result = (result <= expr_level_1(e));
    64de:	4628      	mov	r0, r5
    64e0:	47b0      	blx	r6
    64e2:	42a0      	cmp	r0, r4
    64e4:	bfb4      	ite	lt
    64e6:	2400      	movlt	r4, #0
    64e8:	2401      	movge	r4, #1
    64ea:	e7b3      	b.n	6454 <expr_level_0+0xc>
                (peek(e) == '=' && peek2(e) == '=') ||
    64ec:	2b21      	cmp	r3, #33	; 0x21
    64ee:	d0b9      	beq.n	6464 <expr_level_0+0x1c>
        }
    }
    return result;
}
    64f0:	4620      	mov	r0, r4
    64f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64f4:	000065b5 	.word	0x000065b5
    64f8:	0000640d 	.word	0x0000640d

000064fc <expr_level_3>:
        get(e);
    64fc:	4913      	ldr	r1, [pc, #76]	; (654c <expr_level_3+0x50>)
{
    64fe:	b570      	push	{r4, r5, r6, lr}
    6500:	4604      	mov	r4, r0
    6502:	2501      	movs	r5, #1
    return **e;
    6504:	6823      	ldr	r3, [r4, #0]
    6506:	781b      	ldrb	r3, [r3, #0]
    if (peek(e) >= '0' && peek(e) <= '9') // HEX para
    6508:	2b2f      	cmp	r3, #47	; 0x2f
    650a:	d908      	bls.n	651e <expr_level_3+0x22>
    650c:	2b39      	cmp	r3, #57	; 0x39
    650e:	d818      	bhi.n	6542 <expr_level_3+0x46>
        return number(e);
    6510:	4b0f      	ldr	r3, [pc, #60]	; (6550 <expr_level_3+0x54>)
    6512:	4620      	mov	r0, r4
    6514:	4798      	blx	r3
    6516:	4601      	mov	r1, r0
}
    6518:	fb05 f001 	mul.w	r0, r5, r1
    651c:	bd70      	pop	{r4, r5, r6, pc}
    else if (peek(e) == '(')
    651e:	2b28      	cmp	r3, #40	; 0x28
    6520:	d109      	bne.n	6536 <expr_level_3+0x3a>
        get(e); // '('
    6522:	4e0a      	ldr	r6, [pc, #40]	; (654c <expr_level_3+0x50>)
    6524:	4620      	mov	r0, r4
    6526:	47b0      	blx	r6
        int result = expr_level_0(e);
    6528:	4b0a      	ldr	r3, [pc, #40]	; (6554 <expr_level_3+0x58>)
    652a:	4620      	mov	r0, r4
    652c:	4798      	blx	r3
    652e:	4601      	mov	r1, r0
        get(e); // ')'
    6530:	4620      	mov	r0, r4
    6532:	47b0      	blx	r6
        return result;
    6534:	e7f0      	b.n	6518 <expr_level_3+0x1c>
    else if (peek(e) == '-')
    6536:	2b2d      	cmp	r3, #45	; 0x2d
    6538:	d103      	bne.n	6542 <expr_level_3+0x46>
        get(e);
    653a:	4620      	mov	r0, r4
    653c:	4788      	blx	r1
        return -expr_level_3(e);
    653e:	426d      	negs	r5, r5
    6540:	e7e0      	b.n	6504 <expr_level_3+0x8>
    printf("ERROR in expr_level_3()\n");
    6542:	4805      	ldr	r0, [pc, #20]	; (6558 <expr_level_3+0x5c>)
    6544:	4b05      	ldr	r3, [pc, #20]	; (655c <expr_level_3+0x60>)
    6546:	4798      	blx	r3
    return 0; // error
    6548:	2100      	movs	r1, #0
    654a:	e7e5      	b.n	6518 <expr_level_3+0x1c>
    654c:	0000640d 	.word	0x0000640d
    6550:	00006419 	.word	0x00006419
    6554:	00006449 	.word	0x00006449
    6558:	00015649 	.word	0x00015649
    655c:	000131b1 	.word	0x000131b1

00006560 <expr_level_2>:
{
    6560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = expr_level_3(e);
    6562:	4e13      	ldr	r6, [pc, #76]	; (65b0 <expr_level_2+0x50>)
{
    6564:	4605      	mov	r5, r0
    int result = expr_level_3(e);
    6566:	47b0      	blx	r6
    while (peek(e) == '*' || peek(e) == '/' || peek(e) == '%'){
    6568:	f240 4721 	movw	r7, #1057	; 0x421
    int result = expr_level_3(e);
    656c:	4604      	mov	r4, r0
    return **e;
    656e:	682a      	ldr	r2, [r5, #0]
    6570:	7811      	ldrb	r1, [r2, #0]
    while (peek(e) == '*' || peek(e) == '/' || peek(e) == '%'){
    6572:	f1a1 0325 	sub.w	r3, r1, #37	; 0x25
    6576:	b2db      	uxtb	r3, r3
    6578:	2b0a      	cmp	r3, #10
    657a:	d803      	bhi.n	6584 <expr_level_2+0x24>
    657c:	fa27 f303 	lsr.w	r3, r7, r3
    6580:	07db      	lsls	r3, r3, #31
    6582:	d401      	bmi.n	6588 <expr_level_2+0x28>
}
    6584:	4620      	mov	r0, r4
    6586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ++*e;
    6588:	3201      	adds	r2, #1
        if (peeked == '*'){
    658a:	292a      	cmp	r1, #42	; 0x2a
    ++*e;
    658c:	602a      	str	r2, [r5, #0]
            result *= expr_level_3(e);
    658e:	4628      	mov	r0, r5
        if (peeked == '*'){
    6590:	d102      	bne.n	6598 <expr_level_2+0x38>
            result *= expr_level_3(e);
    6592:	47b0      	blx	r6
    6594:	4344      	muls	r4, r0
    6596:	e7ea      	b.n	656e <expr_level_2+0xe>
        else if (peeked == '%'){
    6598:	2925      	cmp	r1, #37	; 0x25
    659a:	d105      	bne.n	65a8 <expr_level_2+0x48>
            result %= expr_level_3(e);
    659c:	47b0      	blx	r6
    659e:	fb94 f3f0 	sdiv	r3, r4, r0
    65a2:	fb03 4410 	mls	r4, r3, r0, r4
    65a6:	e7e2      	b.n	656e <expr_level_2+0xe>
            result /= expr_level_3(e);
    65a8:	47b0      	blx	r6
    65aa:	fb94 f4f0 	sdiv	r4, r4, r0
    65ae:	e7de      	b.n	656e <expr_level_2+0xe>
    65b0:	000064fd 	.word	0x000064fd

000065b4 <expr_level_1>:
{
    65b4:	b570      	push	{r4, r5, r6, lr}
    int result = expr_level_2(e);
    65b6:	4e0b      	ldr	r6, [pc, #44]	; (65e4 <expr_level_1+0x30>)
{
    65b8:	4605      	mov	r5, r0
    int result = expr_level_2(e);
    65ba:	47b0      	blx	r6
    65bc:	4604      	mov	r4, r0
    return **e;
    65be:	682b      	ldr	r3, [r5, #0]
    65c0:	781a      	ldrb	r2, [r3, #0]
    while (peek(e) == '+' || peek(e) == '-')
    65c2:	2a2b      	cmp	r2, #43	; 0x2b
    65c4:	d003      	beq.n	65ce <expr_level_1+0x1a>
    65c6:	2a2d      	cmp	r2, #45	; 0x2d
    65c8:	d001      	beq.n	65ce <expr_level_1+0x1a>
}
    65ca:	4620      	mov	r0, r4
    65cc:	bd70      	pop	{r4, r5, r6, pc}
    ++*e;
    65ce:	3301      	adds	r3, #1
        if (get(e) == '+')
    65d0:	2a2b      	cmp	r2, #43	; 0x2b
    ++*e;
    65d2:	602b      	str	r3, [r5, #0]
            result += expr_level_2(e);
    65d4:	4628      	mov	r0, r5
        if (get(e) == '+')
    65d6:	d102      	bne.n	65de <expr_level_1+0x2a>
            result += expr_level_2(e);
    65d8:	47b0      	blx	r6
    65da:	4404      	add	r4, r0
    65dc:	e7ef      	b.n	65be <expr_level_1+0xa>
            result -= expr_level_2(e);
    65de:	47b0      	blx	r6
    65e0:	1a24      	subs	r4, r4, r0
    65e2:	e7ec      	b.n	65be <expr_level_1+0xa>
    65e4:	00006561 	.word	0x00006561

000065e8 <insertTo>:


    return expression_inner(&str);
}

void insertTo(char* start,int length,char* that){
    65e8:	b570      	push	{r4, r5, r6, lr}
    65ea:	b09a      	sub	sp, #104	; 0x68
    65ec:	4604      	mov	r4, r0
    
    char ending[100] = {0};
    65ee:	4b0b      	ldr	r3, [pc, #44]	; (661c <insertTo+0x34>)
void insertTo(char* start,int length,char* that){
    65f0:	4615      	mov	r5, r2
    65f2:	460e      	mov	r6, r1
    char ending[100] = {0};
    65f4:	2260      	movs	r2, #96	; 0x60
    65f6:	2100      	movs	r1, #0
    65f8:	a802      	add	r0, sp, #8
    65fa:	9101      	str	r1, [sp, #4]
    65fc:	4798      	blx	r3
    
    //printf("insertTo: Hova: %s Milyen hosszú helyre: %d Mit: %s\n", start, length, that);
    
    sprintf(ending,"%s",start+length);
    65fe:	19a1      	adds	r1, r4, r6
    6600:	a801      	add	r0, sp, #4
    6602:	4e07      	ldr	r6, [pc, #28]	; (6620 <insertTo+0x38>)
    6604:	47b0      	blx	r6
    sprintf(start,"%s",that);
    6606:	4629      	mov	r1, r5
    6608:	4620      	mov	r0, r4
    660a:	47b0      	blx	r6
    sprintf(start+strlen(that),"%s",ending);
    660c:	4b05      	ldr	r3, [pc, #20]	; (6624 <insertTo+0x3c>)
    660e:	4628      	mov	r0, r5
    6610:	4798      	blx	r3
    6612:	a901      	add	r1, sp, #4
    6614:	4420      	add	r0, r4
    6616:	47b0      	blx	r6
}
    6618:	b01a      	add	sp, #104	; 0x68
    661a:	bd70      	pop	{r4, r5, r6, pc}
    661c:	00012e05 	.word	0x00012e05
    6620:	000138bd 	.word	0x000138bd
    6624:	00013981 	.word	0x00013981

00006628 <brack_len>:
        // START: SUKU
    
    int nyitCount = 0;
    int zarCount = 0;
    
    for(int i=0; i<maxLen; i++){
    6628:	2300      	movs	r3, #0
int brack_len(char* funcDesc,int maxLen){ //pl.: almafa(6*(2+2))*45
    662a:	b530      	push	{r4, r5, lr}
    int nyitCount = 0;
    662c:	461a      	mov	r2, r3
    int zarCount = 0;
    662e:	461c      	mov	r4, r3
    for(int i=0; i<maxLen; i++){
    6630:	428b      	cmp	r3, r1
    6632:	da0c      	bge.n	664e <brack_len+0x26>
        
        if (funcDesc[i] == '('){
    6634:	5cc5      	ldrb	r5, [r0, r3]
    6636:	2d28      	cmp	r5, #40	; 0x28
    6638:	f103 0301 	add.w	r3, r3, #1
    663c:	d101      	bne.n	6642 <brack_len+0x1a>
            
            nyitCount++;
    663e:	3201      	adds	r2, #1
    6640:	e7f6      	b.n	6630 <brack_len+0x8>
        }
        else if (funcDesc[i] == ')'){
    6642:	2d29      	cmp	r5, #41	; 0x29
    6644:	d1f4      	bne.n	6630 <brack_len+0x8>
            zarCount++;
    6646:	3401      	adds	r4, #1
            
            if (zarCount == nyitCount){
    6648:	42a2      	cmp	r2, r4
    664a:	d1f1      	bne.n	6630 <brack_len+0x8>
                return i+1;
    664c:	4618      	mov	r0, r3
            }
        }
        
    }
}
    664e:	bd30      	pop	{r4, r5, pc}

00006650 <calcSubFnc>:



void calcSubFnc(char* startposition){
    6650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char* fName = startposition;
    char* fNameEnd = strstr(fName,"(");
    6654:	4b85      	ldr	r3, [pc, #532]	; (686c <calcSubFnc+0x21c>)
    
    int max_offset = brack_len(fNameEnd,strlen(fNameEnd)) -2;
    6656:	f8df b270 	ldr.w	fp, [pc, #624]	; 68c8 <calcSubFnc+0x278>
    
    printf("Maxoffset: %d  ## \r\n", max_offset);
    
    int param_expr_results[10] = {0};
    665a:	f8df a228 	ldr.w	sl, [pc, #552]	; 6884 <calcSubFnc+0x234>
    printf("Maxoffset: %d  ## \r\n", max_offset);
    665e:	4d84      	ldr	r5, [pc, #528]	; (6870 <calcSubFnc+0x220>)
void calcSubFnc(char* startposition){
    6660:	b0ad      	sub	sp, #180	; 0xb4
    char* fNameEnd = strstr(fName,"(");
    6662:	2128      	movs	r1, #40	; 0x28
void calcSubFnc(char* startposition){
    6664:	4681      	mov	r9, r0
    char* fNameEnd = strstr(fName,"(");
    6666:	4798      	blx	r3
    6668:	4606      	mov	r6, r0
    int max_offset = brack_len(fNameEnd,strlen(fNameEnd)) -2;
    666a:	47d8      	blx	fp
    666c:	4b81      	ldr	r3, [pc, #516]	; (6874 <calcSubFnc+0x224>)
    666e:	4601      	mov	r1, r0
    6670:	4630      	mov	r0, r6
    6672:	4798      	blx	r3
    6674:	1e87      	subs	r7, r0, #2
    printf("Maxoffset: %d  ## \r\n", max_offset);
    6676:	4639      	mov	r1, r7
    6678:	487f      	ldr	r0, [pc, #508]	; (6878 <calcSubFnc+0x228>)
    667a:	47a8      	blx	r5
    int param_expr_results[10] = {0};
    667c:	2228      	movs	r2, #40	; 0x28
    667e:	2100      	movs	r1, #0
    6680:	a809      	add	r0, sp, #36	; 0x24
    6682:	47d0      	blx	sl
    char* comma = strstr(start, ",");
    int commaoffset = -1;
    
    
    
    for (int i=0; i<max_offset; i=i){
    6684:	e9cd ab01 	strd	sl, fp, [sp, #4]
    6688:	2400      	movs	r4, #0
    int param_expr_results_count = 0;
    668a:	46a0      	mov	r8, r4
    for (int i=0; i<max_offset; i=i){
    668c:	42bc      	cmp	r4, r7
    668e:	da32      	bge.n	66f6 <calcSubFnc+0xa6>
    6690:	eb06 0a04 	add.w	sl, r6, r4
    6694:	4652      	mov	r2, sl
    6696:	46a3      	mov	fp, r4
        
        int commaoffset = -1;
        
        for(int j=i; j<max_offset; j++){
            
            if (start[j] == ','){
    6698:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    669c:	292c      	cmp	r1, #44	; 0x2c
    669e:	465b      	mov	r3, fp
    66a0:	f10b 0b01 	add.w	fp, fp, #1
    66a4:	f000 80d1 	beq.w	684a <calcSubFnc+0x1fa>
        for(int j=i; j<max_offset; j++){
    66a8:	455f      	cmp	r7, fp
    66aa:	dcf5      	bgt.n	6698 <calcSubFnc+0x48>
 
        if (commaoffset==-1){
            
            printf("No more commas! \r\n");
            
            char param_expr[20] = {0};
    66ac:	f04f 0b00 	mov.w	fp, #0
            printf("No more commas! \r\n");
    66b0:	4b72      	ldr	r3, [pc, #456]	; (687c <calcSubFnc+0x22c>)
    66b2:	4873      	ldr	r0, [pc, #460]	; (6880 <calcSubFnc+0x230>)
    66b4:	4798      	blx	r3
            char param_expr[20] = {0};
    66b6:	4b73      	ldr	r3, [pc, #460]	; (6884 <calcSubFnc+0x234>)
    66b8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
    66bc:	2210      	movs	r2, #16
    66be:	4659      	mov	r1, fp
    66c0:	a814      	add	r0, sp, #80	; 0x50
    66c2:	4798      	blx	r3
            
            for (int j=0; j<(max_offset-i); j++){
    66c4:	1b3a      	subs	r2, r7, r4
    66c6:	465b      	mov	r3, fp
    66c8:	ac13      	add	r4, sp, #76	; 0x4c
    66ca:	e003      	b.n	66d4 <calcSubFnc+0x84>
                param_expr[j] = start[i+j];
    66cc:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
    66d0:	54e1      	strb	r1, [r4, r3]
            for (int j=0; j<(max_offset-i); j++){
    66d2:	3301      	adds	r3, #1
    66d4:	429a      	cmp	r2, r3
    66d6:	dcf9      	bgt.n	66cc <calcSubFnc+0x7c>
                
                
            }
            
            printf("Parameter: \"%s\", ", param_expr);
    66d8:	4621      	mov	r1, r4
    66da:	486b      	ldr	r0, [pc, #428]	; (6888 <calcSubFnc+0x238>)
    66dc:	47a8      	blx	r5
    int result = expr_level_0(e);
    66de:	4b6b      	ldr	r3, [pc, #428]	; (688c <calcSubFnc+0x23c>)
    66e0:	9406      	str	r4, [sp, #24]
    66e2:	a806      	add	r0, sp, #24
    66e4:	4798      	blx	r3
        
            
            param_expr_results[param_expr_results_count] = expression(param_expr);
    66e6:	ab2c      	add	r3, sp, #176	; 0xb0
    66e8:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    int result = expr_level_0(e);
    66ec:	4601      	mov	r1, r0
            param_expr_results[param_expr_results_count] = expression(param_expr);
    66ee:	f848 0c8c 	str.w	r0, [r8, #-140]
            
            
            printf("Result: \"%d\" \r\n", param_expr_results[param_expr_results_count]);
    66f2:	4867      	ldr	r0, [pc, #412]	; (6890 <calcSubFnc+0x240>)
    66f4:	47a8      	blx	r5
    
    
    // START: CALC BUILTIN


    char justName[10] = {0};
    66f6:	2300      	movs	r3, #0
    66f8:	aa06      	add	r2, sp, #24
    66fa:	e9cd 3306 	strd	r3, r3, [sp, #24]
    66fe:	f8ad 3020 	strh.w	r3, [sp, #32]
    
    for (int i=0; i<9; i++){
    6702:	f109 0008 	add.w	r0, r9, #8
    6706:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    670a:	4693      	mov	fp, r2
        
        if (fName[i] == '('){
    670c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    6710:	2928      	cmp	r1, #40	; 0x28
    6712:	d12e      	bne.n	6772 <calcSubFnc+0x122>
        }
        
    }

    
    if(strcmp(justName,"abs")==0){
    6714:	495f      	ldr	r1, [pc, #380]	; (6894 <calcSubFnc+0x244>)
    6716:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 68cc <calcSubFnc+0x27c>
    671a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 68d0 <calcSubFnc+0x280>
    671e:	4658      	mov	r0, fp
    6720:	47c0      	blx	r8
    6722:	ac13      	add	r4, sp, #76	; 0x4c
    6724:	b350      	cbz	r0, 677c <calcSubFnc+0x12c>
        resultOfFnc = abs(param_expr_results[0]);
    }
    else if(strcmp(justName,"six")==0){
    6726:	495c      	ldr	r1, [pc, #368]	; (6898 <calcSubFnc+0x248>)
    6728:	4658      	mov	r0, fp
    672a:	47c0      	blx	r8
    672c:	2800      	cmp	r0, #0
    672e:	f000 808a 	beq.w	6846 <calcSubFnc+0x1f6>
        resultOfFnc = 666666;
    }
    else if(strcmp(justName,"add")==0){
    6732:	495a      	ldr	r1, [pc, #360]	; (689c <calcSubFnc+0x24c>)
    6734:	4658      	mov	r0, fp
    6736:	47c0      	blx	r8
    6738:	2800      	cmp	r0, #0
    673a:	d138      	bne.n	67ae <calcSubFnc+0x15e>
        resultOfFnc = param_expr_results[0] + param_expr_results[1];
    673c:	e9dd 5309 	ldrd	r5, r3, [sp, #36]	; 0x24
    6740:	441d      	add	r5, r3
    6742:	e01f      	b.n	6784 <calcSubFnc+0x134>
                param_expr[j] = start[i+j];
    6744:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
    6748:	54a1      	strb	r1, [r4, r2]
            for (int j=0; j<commaoffset-i; j++){
    674a:	3201      	adds	r2, #1
    674c:	4293      	cmp	r3, r2
    674e:	dcf9      	bgt.n	6744 <calcSubFnc+0xf4>
            printf("Parameter: \"%s\" , ", param_expr);
    6750:	4621      	mov	r1, r4
    6752:	4853      	ldr	r0, [pc, #332]	; (68a0 <calcSubFnc+0x250>)
    6754:	47a8      	blx	r5
    int result = expr_level_0(e);
    6756:	4b4d      	ldr	r3, [pc, #308]	; (688c <calcSubFnc+0x23c>)
    6758:	9406      	str	r4, [sp, #24]
    675a:	a806      	add	r0, sp, #24
    675c:	4798      	blx	r3
            param_expr_results[param_expr_results_count] = expression(param_expr);
    675e:	ab09      	add	r3, sp, #36	; 0x24
    int result = expr_level_0(e);
    6760:	4601      	mov	r1, r0
            param_expr_results[param_expr_results_count] = expression(param_expr);
    6762:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
            printf("Result: \"%d\" \r\n", param_expr_results[param_expr_results_count]);
    6766:	484a      	ldr	r0, [pc, #296]	; (6890 <calcSubFnc+0x240>)
    6768:	47a8      	blx	r5
            param_expr_results_count++;
    676a:	f108 0801 	add.w	r8, r8, #1
    for (int i=0; i<max_offset; i=i){
    676e:	465c      	mov	r4, fp
    6770:	e78c      	b.n	668c <calcSubFnc+0x3c>
    for (int i=0; i<9; i++){
    6772:	4283      	cmp	r3, r0
            justName[i] = fName[i];
    6774:	f802 1b01 	strb.w	r1, [r2], #1
    for (int i=0; i<9; i++){
    6778:	d1c8      	bne.n	670c <calcSubFnc+0xbc>
    677a:	e7cb      	b.n	6714 <calcSubFnc+0xc4>
        resultOfFnc = abs(param_expr_results[0]);
    677c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    677e:	2d00      	cmp	r5, #0
    6780:	bfb8      	it	lt
    6782:	426d      	neglt	r5, r5
    
    //printf("resultOfFnc: %d\n", resultOfFnc);
    

    
    char buff[100] = {0};
    6784:	9b01      	ldr	r3, [sp, #4]
    6786:	2100      	movs	r1, #0
    6788:	2260      	movs	r2, #96	; 0x60
    678a:	a814      	add	r0, sp, #80	; 0x50
    678c:	9113      	str	r1, [sp, #76]	; 0x4c
    678e:	4798      	blx	r3
    
    sprintf(buff,"(%d)",resultOfFnc); //HEX para
    6790:	462a      	mov	r2, r5
    6792:	4944      	ldr	r1, [pc, #272]	; (68a4 <calcSubFnc+0x254>)
    6794:	4620      	mov	r0, r4
    6796:	47d0      	blx	sl
    
    // hova, milyen hosszan, mit
    insertTo(startposition,(fNameEnd-fName)+max_offset+2,buff);
    6798:	eba6 0109 	sub.w	r1, r6, r9
    679c:	4439      	add	r1, r7
    679e:	4b42      	ldr	r3, [pc, #264]	; (68a8 <calcSubFnc+0x258>)
    67a0:	4622      	mov	r2, r4
    67a2:	3102      	adds	r1, #2
    67a4:	4648      	mov	r0, r9
    67a6:	4798      	blx	r3
    
        
    //printf(" @@ debug: %s @@\n", startposition);
}
    67a8:	b02d      	add	sp, #180	; 0xb4
    67aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(strcmp(justName,"print")==0){
    67ae:	493f      	ldr	r1, [pc, #252]	; (68ac <calcSubFnc+0x25c>)
    67b0:	4658      	mov	r0, fp
    67b2:	47c0      	blx	r8
    67b4:	2800      	cmp	r0, #0
    67b6:	d137      	bne.n	6828 <calcSubFnc+0x1d8>
        char fmt_str[] = "%02x";
    67b8:	4b3d      	ldr	r3, [pc, #244]	; (68b0 <calcSubFnc+0x260>)
    67ba:	6818      	ldr	r0, [r3, #0]
    67bc:	791b      	ldrb	r3, [r3, #4]
    67be:	f88d 3014 	strb.w	r3, [sp, #20]
        if (param_expr_results[1]<=8){
    67c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        char fmt_str[] = "%02x";
    67c4:	9004      	str	r0, [sp, #16]
        if (param_expr_results[1]<=8){
    67c6:	2b08      	cmp	r3, #8
            fmt_str[2] = param_expr_results[1]+'0';
    67c8:	bfda      	itte	le
    67ca:	3330      	addle	r3, #48	; 0x30
    67cc:	b2db      	uxtble	r3, r3
            fmt_str[2] = 8+'0';
    67ce:	2338      	movgt	r3, #56	; 0x38
        uint8_t temp_array[20] = {0};
    67d0:	f04f 0800 	mov.w	r8, #0
    67d4:	f88d 3012 	strb.w	r3, [sp, #18]
    67d8:	2210      	movs	r2, #16
    67da:	9b01      	ldr	r3, [sp, #4]
    67dc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    67e0:	4641      	mov	r1, r8
    67e2:	a814      	add	r0, sp, #80	; 0x50
    67e4:	4798      	blx	r3
        sprintf(temp_array, fmt_str, param_expr_results[0]);
    67e6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    67e8:	a904      	add	r1, sp, #16
    67ea:	462a      	mov	r2, r5
    67ec:	4620      	mov	r0, r4
    67ee:	47d0      	blx	sl
        temp_array_length = strlen(temp_array);
    67f0:	9b02      	ldr	r3, [sp, #8]
    67f2:	4620      	mov	r0, r4
    67f4:	4798      	blx	r3
            expr->output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-expr->output_string_length-temp_array_length+i] = temp_array[i];
    67f6:	4a2f      	ldr	r2, [pc, #188]	; (68b4 <calcSubFnc+0x264>)
    67f8:	f892 30ca 	ldrb.w	r3, [r2, #202]	; 0xca
    67fc:	b2d9      	uxtb	r1, r3
    67fe:	f1c3 03c9 	rsb	r3, r3, #201	; 0xc9
        temp_array_length = strlen(temp_array);
    6802:	fa5f fc80 	uxtb.w	ip, r0
        for (uint8_t i=0; i<temp_array_length; i++){
    6806:	1a18      	subs	r0, r3, r0
    6808:	4410      	add	r0, r2
    680a:	fa5f f388 	uxtb.w	r3, r8
    680e:	4563      	cmp	r3, ip
    6810:	d303      	bcc.n	681a <calcSubFnc+0x1ca>
        expr->output_string_length += temp_array_length;
    6812:	4461      	add	r1, ip
    6814:	f882 10ca 	strb.w	r1, [r2, #202]	; 0xca
        resultOfFnc = param_expr_results[0];
    6818:	e7b4      	b.n	6784 <calcSubFnc+0x134>
            expr->output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-expr->output_string_length-temp_array_length+i] = temp_array[i];
    681a:	f814 3008 	ldrb.w	r3, [r4, r8]
    681e:	f800 3b01 	strb.w	r3, [r0], #1
        for (uint8_t i=0; i<temp_array_length; i++){
    6822:	f108 0801 	add.w	r8, r8, #1
    6826:	e7f0      	b.n	680a <calcSubFnc+0x1ba>
    else if(strcmp(justName,"if")==0){
    6828:	4923      	ldr	r1, [pc, #140]	; (68b8 <calcSubFnc+0x268>)
    682a:	4658      	mov	r0, fp
    682c:	47c0      	blx	r8
    682e:	b928      	cbnz	r0, 683c <calcSubFnc+0x1ec>
        if (param_expr_results[0]){
    6830:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6832:	b10b      	cbz	r3, 6838 <calcSubFnc+0x1e8>
            resultOfFnc = param_expr_results[1];
    6834:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6836:	e7a5      	b.n	6784 <calcSubFnc+0x134>
            resultOfFnc = param_expr_results[2];
    6838:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    683a:	e7a3      	b.n	6784 <calcSubFnc+0x134>
        printf("Function \"%s\" not found!\n", justName);
    683c:	481f      	ldr	r0, [pc, #124]	; (68bc <calcSubFnc+0x26c>)
    683e:	4659      	mov	r1, fp
    6840:	47a8      	blx	r5
        resultOfFnc = 0;
    6842:	2500      	movs	r5, #0
    6844:	e79e      	b.n	6784 <calcSubFnc+0x134>
        resultOfFnc = 666666;
    6846:	4d1e      	ldr	r5, [pc, #120]	; (68c0 <calcSubFnc+0x270>)
    6848:	e79c      	b.n	6784 <calcSubFnc+0x134>
            printf("Commaoffset : %d: %d!  ", i, commaoffset);
    684a:	461a      	mov	r2, r3
    684c:	4621      	mov	r1, r4
    684e:	481d      	ldr	r0, [pc, #116]	; (68c4 <calcSubFnc+0x274>)
    6850:	9303      	str	r3, [sp, #12]
    6852:	47a8      	blx	r5
            char param_expr[20] = {0};
    6854:	2100      	movs	r1, #0
    6856:	4b0b      	ldr	r3, [pc, #44]	; (6884 <calcSubFnc+0x234>)
    6858:	9113      	str	r1, [sp, #76]	; 0x4c
    685a:	2210      	movs	r2, #16
    685c:	a814      	add	r0, sp, #80	; 0x50
    685e:	4798      	blx	r3
            for (int j=0; j<commaoffset-i; j++){
    6860:	9b03      	ldr	r3, [sp, #12]
    6862:	2100      	movs	r1, #0
    6864:	1b1b      	subs	r3, r3, r4
    6866:	460a      	mov	r2, r1
    6868:	ac13      	add	r4, sp, #76	; 0x4c
    686a:	e76f      	b.n	674c <calcSubFnc+0xfc>
    686c:	000134fd 	.word	0x000134fd
    6870:	00013049 	.word	0x00013049
    6874:	00006629 	.word	0x00006629
    6878:	00015661 	.word	0x00015661
    687c:	000131b1 	.word	0x000131b1
    6880:	000156df 	.word	0x000156df
    6884:	00012e05 	.word	0x00012e05
    6888:	00015676 	.word	0x00015676
    688c:	00006449 	.word	0x00006449
    6890:	00015688 	.word	0x00015688
    6894:	000156ab 	.word	0x000156ab
    6898:	000156af 	.word	0x000156af
    689c:	000156b3 	.word	0x000156b3
    68a0:	00015698 	.word	0x00015698
    68a4:	000156da 	.word	0x000156da
    68a8:	000065e9 	.word	0x000065e9
    68ac:	000156b7 	.word	0x000156b7
    68b0:	00015709 	.word	0x00015709
    68b4:	2000b1bc 	.word	0x2000b1bc
    68b8:	000156bd 	.word	0x000156bd
    68bc:	000156c0 	.word	0x000156c0
    68c0:	000a2c2a 	.word	0x000a2c2a
    68c4:	000156f1 	.word	0x000156f1
    68c8:	00013981 	.word	0x00013981
    68cc:	000135e9 	.word	0x000135e9
    68d0:	000134b9 	.word	0x000134b9

000068d4 <subst_all_variables_starting_from_the_back>:

void subst_all_variables_starting_from_the_back(char* expr_string, int len){
    68d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    
    int izgi = 0;
    int var_end_pos = -1;
    char var_name[10] = {0};
    68d8:	2300      	movs	r3, #0
void subst_all_variables_starting_from_the_back(char* expr_string, int len){
    68da:	b0a1      	sub	sp, #132	; 0x84
    char var_name[10] = {0};
    68dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
                        
                        var_name[var_end_pos-i] = expr_string[i];
                       i--;
                    }

                int var_name_len = strlen(var_name);
    68e0:	4e62      	ldr	r6, [pc, #392]	; (6a6c <subst_all_variables_starting_from_the_back+0x198>)
                }
                
                
                char* found = &expr_string[i+1]; // i+1 helyen lesz mindenképpen!
                
                char buff[100] = {0};
    68e2:	4f63      	ldr	r7, [pc, #396]	; (6a70 <subst_all_variables_starting_from_the_back+0x19c>)
                
                sprintf(buff,"%d",variable_value); // HEX para
    68e4:	f8df 8194 	ldr.w	r8, [pc, #404]	; 6a7c <subst_all_variables_starting_from_the_back+0x1a8>
    char var_name[10] = {0};
    68e8:	f8ad 300c 	strh.w	r3, [sp, #12]
void subst_all_variables_starting_from_the_back(char* expr_string, int len){
    68ec:	4605      	mov	r5, r0
    68ee:	460c      	mov	r4, r1
    int var_end_pos = -1;
    68f0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    for(int i= len; i>=0; i--){
    68f4:	2c00      	cmp	r4, #0
    68f6:	da02      	bge.n	68fe <subst_all_variables_starting_from_the_back+0x2a>
        
        
        
    }
    
}
    68f8:	b021      	add	sp, #132	; 0x84
    68fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (izgi == -1){
    68fe:	1c5a      	adds	r2, r3, #1
    6900:	d10d      	bne.n	691e <subst_all_variables_starting_from_the_back+0x4a>
            if ((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    6902:	5d2a      	ldrb	r2, [r5, r4]
    6904:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    6908:	2909      	cmp	r1, #9
    690a:	d906      	bls.n	691a <subst_all_variables_starting_from_the_back+0x46>
                (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    690c:	f022 0120 	bic.w	r1, r2, #32
    6910:	3941      	subs	r1, #65	; 0x41
    6912:	2919      	cmp	r1, #25
    6914:	d901      	bls.n	691a <subst_all_variables_starting_from_the_back+0x46>
                (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    6916:	2a5f      	cmp	r2, #95	; 0x5f
    6918:	d102      	bne.n	6920 <subst_all_variables_starting_from_the_back+0x4c>
    for(int i= len; i>=0; i--){
    691a:	3c01      	subs	r4, #1
    691c:	e7ea      	b.n	68f4 <subst_all_variables_starting_from_the_back+0x20>
        if (izgi == 0){
    691e:	b9cb      	cbnz	r3, 6954 <subst_all_variables_starting_from_the_back+0x80>
            if  ((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    6920:	5d2b      	ldrb	r3, [r5, r4]
    6922:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    6926:	b2d2      	uxtb	r2, r2
    6928:	2a09      	cmp	r2, #9
    692a:	d906      	bls.n	693a <subst_all_variables_starting_from_the_back+0x66>
                (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    692c:	f023 0120 	bic.w	r1, r3, #32
    6930:	3941      	subs	r1, #65	; 0x41
    6932:	2919      	cmp	r1, #25
    6934:	d901      	bls.n	693a <subst_all_variables_starting_from_the_back+0x66>
                (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    6936:	2b5f      	cmp	r3, #95	; 0x5f
    6938:	d171      	bne.n	6a1e <subst_all_variables_starting_from_the_back+0x14a>
                if (expr_string[i+1] == '('){
    693a:	1929      	adds	r1, r5, r4
    693c:	7849      	ldrb	r1, [r1, #1]
    693e:	2928      	cmp	r1, #40	; 0x28
    6940:	f000 8085 	beq.w	6a4e <subst_all_variables_starting_from_the_back+0x17a>
                    if ((expr_string[i] >= '0' && expr_string[i] <= '9')){
    6944:	2a09      	cmp	r2, #9
                        var_name[var_end_pos-i] = expr_string[i];                     
    6946:	f88d 3004 	strb.w	r3, [sp, #4]
    694a:	46a1      	mov	r9, r4
                        izgi = 1;
    694c:	bf94      	ite	ls
    694e:	2301      	movls	r3, #1
                        izgi = 2;
    6950:	2302      	movhi	r3, #2
    6952:	e7e2      	b.n	691a <subst_all_variables_starting_from_the_back+0x46>
            if (((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    6954:	5d2a      	ldrb	r2, [r5, r4]
    6956:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    695a:	b2c9      	uxtb	r1, r1
    695c:	2909      	cmp	r1, #9
    695e:	d906      	bls.n	696e <subst_all_variables_starting_from_the_back+0x9a>
            (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    6960:	f022 0020 	bic.w	r0, r2, #32
    6964:	3841      	subs	r0, #65	; 0x41
    6966:	2819      	cmp	r0, #25
    6968:	d901      	bls.n	696e <subst_all_variables_starting_from_the_back+0x9a>
            (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    696a:	2a5f      	cmp	r2, #95	; 0x5f
    696c:	d172      	bne.n	6a54 <subst_all_variables_starting_from_the_back+0x180>
            (expr_string[i] == '_') )&& i!=0){
    696e:	b154      	cbz	r4, 6986 <subst_all_variables_starting_from_the_back+0xb2>
                var_name[var_end_pos-i] = expr_string[i];
    6970:	eba9 0004 	sub.w	r0, r9, r4
    6974:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
    6978:	4460      	add	r0, ip
                    izgi = 2;
    697a:	290a      	cmp	r1, #10
                var_name[var_end_pos-i] = expr_string[i];
    697c:	f800 2c7c 	strb.w	r2, [r0, #-124]
                    izgi = 2;
    6980:	bf28      	it	cs
    6982:	2302      	movcs	r3, #2
    6984:	e7c9      	b.n	691a <subst_all_variables_starting_from_the_back+0x46>
            else if (izgi==2){
    6986:	2b02      	cmp	r3, #2
    6988:	d166      	bne.n	6a58 <subst_all_variables_starting_from_the_back+0x184>
                if (((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    698a:	2909      	cmp	r1, #9
    698c:	d90a      	bls.n	69a4 <subst_all_variables_starting_from_the_back+0xd0>
    698e:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
    6992:	2b19      	cmp	r3, #25
    6994:	d906      	bls.n	69a4 <subst_all_variables_starting_from_the_back+0xd0>
                    (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    6996:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    699a:	2b19      	cmp	r3, #25
    699c:	d901      	bls.n	69a2 <subst_all_variables_starting_from_the_back+0xce>
                    (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    699e:	2a5f      	cmp	r2, #95	; 0x5f
    69a0:	d106      	bne.n	69b0 <subst_all_variables_starting_from_the_back+0xdc>
                    (expr_string[i] == '_') )&& i==0){
    69a2:	b92c      	cbnz	r4, 69b0 <subst_all_variables_starting_from_the_back+0xdc>
                        var_name[var_end_pos-i] = expr_string[i];
    69a4:	ab20      	add	r3, sp, #128	; 0x80
    69a6:	444b      	add	r3, r9
                       i--;
    69a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
                        var_name[var_end_pos-i] = expr_string[i];
    69ac:	f803 2c7c 	strb.w	r2, [r3, #-124]
                int var_name_len = strlen(var_name);
    69b0:	a801      	add	r0, sp, #4
    69b2:	47b0      	blx	r6
                char var_name_good[10] = {0};
    69b4:	2300      	movs	r3, #0
    69b6:	e9cd 3304 	strd	r3, r3, [sp, #16]
    69ba:	aa01      	add	r2, sp, #4
                int var_name_len = strlen(var_name);
    69bc:	4682      	mov	sl, r0
                char var_name_good[10] = {0};
    69be:	4402      	add	r2, r0
    69c0:	f8ad 3018 	strh.w	r3, [sp, #24]
                for (int j = 0; j<var_name_len; j++){
    69c4:	a904      	add	r1, sp, #16
                    var_name_good[j+1] = 0;
    69c6:	4618      	mov	r0, r3
                for (int j = 0; j<var_name_len; j++){
    69c8:	4553      	cmp	r3, sl
    69ca:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    69ce:	db28      	blt.n	6a22 <subst_all_variables_starting_from_the_back+0x14e>
                if (var_name_len == 2){
    69d0:	f1ba 0f02 	cmp.w	sl, #2
    69d4:	d138      	bne.n	6a48 <subst_all_variables_starting_from_the_back+0x174>
                    if (var_name_good[0] == 'E'){
    69d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    69da:	2b45      	cmp	r3, #69	; 0x45
    69dc:	d129      	bne.n	6a32 <subst_all_variables_starting_from_the_back+0x15e>
                        if (var_name_good[1] >= '0' && var_name_good[1] <= '9' ){
    69de:	f89d 3011 	ldrb.w	r3, [sp, #17]
    69e2:	3b30      	subs	r3, #48	; 0x30
    69e4:	b2da      	uxtb	r2, r3
    69e6:	2a09      	cmp	r2, #9
    69e8:	d82e      	bhi.n	6a48 <subst_all_variables_starting_from_the_back+0x174>
                            variable_value = e_param_list[index];
    69ea:	4a22      	ldr	r2, [pc, #136]	; (6a74 <subst_all_variables_starting_from_the_back+0x1a0>)
    69ec:	6812      	ldr	r2, [r2, #0]
                            variable_value = p_param_list[index];
    69ee:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
                char buff[100] = {0};
    69f2:	2300      	movs	r3, #0
    69f4:	4619      	mov	r1, r3
    69f6:	2260      	movs	r2, #96	; 0x60
    69f8:	a808      	add	r0, sp, #32
    69fa:	9307      	str	r3, [sp, #28]
    69fc:	47b8      	blx	r7
                sprintf(buff,"%d",variable_value); // HEX para
    69fe:	465a      	mov	r2, fp
    6a00:	4641      	mov	r1, r8
    6a02:	f8df b07c 	ldr.w	fp, [pc, #124]	; 6a80 <subst_all_variables_starting_from_the_back+0x1ac>
    6a06:	a807      	add	r0, sp, #28
    6a08:	47d8      	blx	fp
                char* found = &expr_string[i+1]; // i+1 helyen lesz mindenképpen!
    6a0a:	1c60      	adds	r0, r4, #1
                insertTo(found,var_name_len,buff);
    6a0c:	aa07      	add	r2, sp, #28
    6a0e:	4651      	mov	r1, sl
    6a10:	4428      	add	r0, r5
    6a12:	f8df a070 	ldr.w	sl, [pc, #112]	; 6a84 <subst_all_variables_starting_from_the_back+0x1b0>
    6a16:	47d0      	blx	sl
                printf("%s\n", expr_string);
    6a18:	4a17      	ldr	r2, [pc, #92]	; (6a78 <subst_all_variables_starting_from_the_back+0x1a4>)
    6a1a:	4628      	mov	r0, r5
    6a1c:	4790      	blx	r2
    6a1e:	2300      	movs	r3, #0
    6a20:	e77b      	b.n	691a <subst_all_variables_starting_from_the_back+0x46>
                    var_name_good[j] = var_name[var_name_len-1-j];
    6a22:	f892 c000 	ldrb.w	ip, [r2]
    6a26:	f881 c000 	strb.w	ip, [r1]
                    var_name_good[j+1] = 0;
    6a2a:	3301      	adds	r3, #1
    6a2c:	f801 0f01 	strb.w	r0, [r1, #1]!
                for (int j = 0; j<var_name_len; j++){
    6a30:	e7ca      	b.n	69c8 <subst_all_variables_starting_from_the_back+0xf4>
                    else if (var_name_good[0] == 'P'){
    6a32:	2b50      	cmp	r3, #80	; 0x50
    6a34:	d108      	bne.n	6a48 <subst_all_variables_starting_from_the_back+0x174>
                        if (var_name_good[1] >= '0' && var_name_good[1] <= '9' ){
    6a36:	f89d 3011 	ldrb.w	r3, [sp, #17]
    6a3a:	3b30      	subs	r3, #48	; 0x30
    6a3c:	b2da      	uxtb	r2, r3
    6a3e:	2a09      	cmp	r2, #9
    6a40:	d802      	bhi.n	6a48 <subst_all_variables_starting_from_the_back+0x174>
                            variable_value = p_param_list[index];
    6a42:	4a0c      	ldr	r2, [pc, #48]	; (6a74 <subst_all_variables_starting_from_the_back+0x1a0>)
    6a44:	6852      	ldr	r2, [r2, #4]
    6a46:	e7d2      	b.n	69ee <subst_all_variables_starting_from_the_back+0x11a>
                int variable_value = 1;
    6a48:	f04f 0b01 	mov.w	fp, #1
    6a4c:	e7d1      	b.n	69f2 <subst_all_variables_starting_from_the_back+0x11e>
                    izgi = -1;
    6a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6a52:	e762      	b.n	691a <subst_all_variables_starting_from_the_back+0x46>
            else if (izgi==2){
    6a54:	2b02      	cmp	r3, #2
    6a56:	d09e      	beq.n	6996 <subst_all_variables_starting_from_the_back+0xc2>
                int variable_value = 1;
    6a58:	2300      	movs	r3, #0
    6a5a:	aa01      	add	r2, sp, #4
                    var_name[j] = 0;
    6a5c:	4619      	mov	r1, r3
                for (int j = 0; j<10; j++){
    6a5e:	3301      	adds	r3, #1
    6a60:	2b0a      	cmp	r3, #10
                    var_name[j] = 0;
    6a62:	f802 1b01 	strb.w	r1, [r2], #1
                for (int j = 0; j<10; j++){
    6a66:	d1fa      	bne.n	6a5e <subst_all_variables_starting_from_the_back+0x18a>
    6a68:	e7d9      	b.n	6a1e <subst_all_variables_starting_from_the_back+0x14a>
    6a6a:	bf00      	nop
    6a6c:	00013981 	.word	0x00013981
    6a70:	00012e05 	.word	0x00012e05
    6a74:	200005ec 	.word	0x200005ec
    6a78:	000131b1 	.word	0x000131b1
    6a7c:	00015907 	.word	0x00015907
    6a80:	000134b9 	.word	0x000134b9
    6a84:	000065e9 	.word	0x000065e9

00006a88 <subst_all_functions_starting_from_the_back>:


void subst_all_functions_starting_from_the_back(char* expr_string, int len){
    6a88:	b570      	push	{r4, r5, r6, lr}
    
    int izgi = 0;
    
    printf("Subst Fncs\n");
    6a8a:	4b1b      	ldr	r3, [pc, #108]	; (6af8 <subst_all_functions_starting_from_the_back+0x70>)
                    
                }
                
                
                if (i==0 && izgi==3){ // start of expr string special case
                    calcSubFnc(&expr_string[i]);
    6a8c:	4e1b      	ldr	r6, [pc, #108]	; (6afc <subst_all_functions_starting_from_the_back+0x74>)
void subst_all_functions_starting_from_the_back(char* expr_string, int len){
    6a8e:	4605      	mov	r5, r0
    printf("Subst Fncs\n");
    6a90:	481b      	ldr	r0, [pc, #108]	; (6b00 <subst_all_functions_starting_from_the_back+0x78>)
void subst_all_functions_starting_from_the_back(char* expr_string, int len){
    6a92:	460c      	mov	r4, r1
    printf("Subst Fncs\n");
    6a94:	4798      	blx	r3
    int izgi = 0;
    6a96:	2300      	movs	r3, #0
    for(int i= len; i>=0; i--){
    6a98:	2c00      	cmp	r4, #0
    6a9a:	da00      	bge.n	6a9e <subst_all_functions_starting_from_the_back+0x16>
            }
            
        }
    }
    
}
    6a9c:	bd70      	pop	{r4, r5, r6, pc}
        if (izgi == 0){
    6a9e:	b933      	cbnz	r3, 6aae <subst_all_functions_starting_from_the_back+0x26>
            if (expr_string[i] == '(' ){
    6aa0:	5d2b      	ldrb	r3, [r5, r4]
    6aa2:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    6aa6:	4253      	negs	r3, r2
    6aa8:	4153      	adcs	r3, r2
    for(int i= len; i>=0; i--){
    6aaa:	3c01      	subs	r4, #1
    6aac:	e7f4      	b.n	6a98 <subst_all_functions_starting_from_the_back+0x10>
        else if (izgi == 1 || izgi == 2 || izgi == 3){
    6aae:	1e5a      	subs	r2, r3, #1
    6ab0:	2a02      	cmp	r2, #2
    6ab2:	d8fa      	bhi.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
            if ((expr_string[i] >= '0' && expr_string[i] <= '9') || 
    6ab4:	5d2a      	ldrb	r2, [r5, r4]
    6ab6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    6aba:	2909      	cmp	r1, #9
    6abc:	eb04 0005 	add.w	r0, r4, r5
    6ac0:	d916      	bls.n	6af0 <subst_all_functions_starting_from_the_back+0x68>
            (expr_string[i] >= 'a' && expr_string[i] <= 'z') || 
    6ac2:	f022 0120 	bic.w	r1, r2, #32
    6ac6:	3941      	subs	r1, #65	; 0x41
    6ac8:	2919      	cmp	r1, #25
    6aca:	d901      	bls.n	6ad0 <subst_all_functions_starting_from_the_back+0x48>
            (expr_string[i] >= 'A' && expr_string[i] <= 'Z') || 
    6acc:	2a5f      	cmp	r2, #95	; 0x5f
    6ace:	d108      	bne.n	6ae2 <subst_all_functions_starting_from_the_back+0x5a>
                if (i==0 && izgi==3){ // start of expr string special case
    6ad0:	b92c      	cbnz	r4, 6ade <subst_all_functions_starting_from_the_back+0x56>
    6ad2:	e003      	b.n	6adc <subst_all_functions_starting_from_the_back+0x54>
    6ad4:	2c00      	cmp	r4, #0
    6ad6:	d1e8      	bne.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
    6ad8:	2b03      	cmp	r3, #3
    6ada:	d10b      	bne.n	6af4 <subst_all_functions_starting_from_the_back+0x6c>
                    calcSubFnc(&expr_string[i]);
    6adc:	47b0      	blx	r6
                    izgi = 3;
    6ade:	2303      	movs	r3, #3
    6ae0:	e7e3      	b.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
            else if (izgi==3){
    6ae2:	2b03      	cmp	r3, #3
    6ae4:	d102      	bne.n	6aec <subst_all_functions_starting_from_the_back+0x64>
                calcSubFnc(&expr_string[i+1]);
    6ae6:	1c68      	adds	r0, r5, #1
    6ae8:	4420      	add	r0, r4
    6aea:	47b0      	blx	r6
                izgi = 0;
    6aec:	2300      	movs	r3, #0
    6aee:	e7dc      	b.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
                if (izgi==1){
    6af0:	2b01      	cmp	r3, #1
    6af2:	d1ef      	bne.n	6ad4 <subst_all_functions_starting_from_the_back+0x4c>
                if (i==0 && izgi==3){ // start of expr string special case
    6af4:	2302      	movs	r3, #2
    6af6:	e7d8      	b.n	6aaa <subst_all_functions_starting_from_the_back+0x22>
    6af8:	000131b1 	.word	0x000131b1
    6afc:	00006651 	.word	0x00006651
    6b00:	0001570e 	.word	0x0001570e

00006b04 <grid_expr_evaluate>:
grid_expr_evaluate(struct grid_expr_model* expr, char* input_str, uint8_t input_length){
    6b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    grid_expr_clear_input(expr);
    6b06:	4b15      	ldr	r3, [pc, #84]	; (6b5c <grid_expr_evaluate+0x58>)
grid_expr_evaluate(struct grid_expr_model* expr, char* input_str, uint8_t input_length){
    6b08:	4604      	mov	r4, r0
    6b0a:	460d      	mov	r5, r1
    6b0c:	4611      	mov	r1, r2
    grid_expr_clear_input(expr);
    6b0e:	4798      	blx	r3
    grid_expr_clear_output(expr);
    6b10:	4b13      	ldr	r3, [pc, #76]	; (6b60 <grid_expr_evaluate+0x5c>)
    6b12:	4620      	mov	r0, r4
    6b14:	4798      	blx	r3
    for (uint32_t i=0; i<input_length; i++){
    6b16:	2300      	movs	r3, #0
    6b18:	4299      	cmp	r1, r3
    6b1a:	d81a      	bhi.n	6b52 <grid_expr_evaluate+0x4e>
    expr->input_string_length = input_length;
    6b1c:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
    subst_all_variables_starting_from_the_back(expr->input_string, expr->input_string_length);    
    6b20:	4b10      	ldr	r3, [pc, #64]	; (6b64 <grid_expr_evaluate+0x60>)
    printf("Result: %d\r\n", result);
    6b22:	4d11      	ldr	r5, [pc, #68]	; (6b68 <grid_expr_evaluate+0x64>)
    subst_all_variables_starting_from_the_back(expr->input_string, expr->input_string_length);    
    6b24:	4620      	mov	r0, r4
    6b26:	4798      	blx	r3
    subst_all_functions_starting_from_the_back(expr->input_string, expr->input_string_length);
    6b28:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
    6b2c:	4b0f      	ldr	r3, [pc, #60]	; (6b6c <grid_expr_evaluate+0x68>)
    6b2e:	4620      	mov	r0, r4
    6b30:	4798      	blx	r3
    int result = expr_level_0(e);
    6b32:	4b0f      	ldr	r3, [pc, #60]	; (6b70 <grid_expr_evaluate+0x6c>)
    6b34:	9401      	str	r4, [sp, #4]
    6b36:	a801      	add	r0, sp, #4
    6b38:	4798      	blx	r3
    6b3a:	4601      	mov	r1, r0
    printf("Result: %d\r\n", result);
    6b3c:	480d      	ldr	r0, [pc, #52]	; (6b74 <grid_expr_evaluate+0x70>)
    6b3e:	47a8      	blx	r5
    printf("Result String: \"%s\"\r\n", &expr->output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-expr->output_string_length]);
    6b40:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    6b44:	480c      	ldr	r0, [pc, #48]	; (6b78 <grid_expr_evaluate+0x74>)
    6b46:	f1c1 01c9 	rsb	r1, r1, #201	; 0xc9
    6b4a:	4421      	add	r1, r4
    6b4c:	47a8      	blx	r5
}
    6b4e:	b003      	add	sp, #12
    6b50:	bd30      	pop	{r4, r5, pc}
        expr->input_string[i] = input_str[i];
    6b52:	5cea      	ldrb	r2, [r5, r3]
    6b54:	54e2      	strb	r2, [r4, r3]
    for (uint32_t i=0; i<input_length; i++){
    6b56:	3301      	adds	r3, #1
    6b58:	e7de      	b.n	6b18 <grid_expr_evaluate+0x14>
    6b5a:	bf00      	nop
    6b5c:	000063c5 	.word	0x000063c5
    6b60:	000063d9 	.word	0x000063d9
    6b64:	000068d5 	.word	0x000068d5
    6b68:	00013049 	.word	0x00013049
    6b6c:	00006a89 	.word	0x00006a89
    6b70:	00006449 	.word	0x00006449
    6b74:	00015719 	.word	0x00015719
    6b78:	00015726 	.word	0x00015726

00006b7c <grid_led_lowlevel_hardware_transfer_complete_cb>:


void grid_led_lowlevel_hardware_transfer_complete_cb(struct _dma_resource *resource){
	

	grid_led_hardware_transfer_done = 1;
    6b7c:	4b01      	ldr	r3, [pc, #4]	; (6b84 <grid_led_lowlevel_hardware_transfer_complete_cb+0x8>)
    6b7e:	2201      	movs	r2, #1
    6b80:	701a      	strb	r2, [r3, #0]
	
	
}
    6b82:	4770      	bx	lr
    6b84:	200010e8 	.word	0x200010e8

00006b88 <grid_led_lowlevel_set_color>:
uint8_t grid_led_lowlevel_set_color(struct grid_led_model* mod, uint32_t led_index, uint16_t led_r, uint16_t led_g, uint16_t led_b){
    6b88:	b510      	push	{r4, lr}
	if (led_index<mod->led_number){
    6b8a:	7844      	ldrb	r4, [r0, #1]
    6b8c:	428c      	cmp	r4, r1
    6b8e:	d91c      	bls.n	6bca <grid_led_lowlevel_set_color+0x42>
		mod->led_frame_buffer_usable[led_index*3 + 0] = grid_led_color_code[led_g];
    6b90:	2bff      	cmp	r3, #255	; 0xff
    6b92:	f04f 040c 	mov.w	r4, #12
    6b96:	fb04 f101 	mul.w	r1, r4, r1
    6b9a:	bf28      	it	cs
    6b9c:	23ff      	movcs	r3, #255	; 0xff
    6b9e:	4c0c      	ldr	r4, [pc, #48]	; (6bd0 <grid_led_lowlevel_set_color+0x48>)
    6ba0:	68c0      	ldr	r0, [r0, #12]
    6ba2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    6ba6:	5043      	str	r3, [r0, r1]
		mod->led_frame_buffer_usable[led_index*3 + 1] = grid_led_color_code[led_r];
    6ba8:	2aff      	cmp	r2, #255	; 0xff
    6baa:	bf28      	it	cs
    6bac:	22ff      	movcs	r2, #255	; 0xff
    6bae:	4401      	add	r1, r0
    6bb0:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
    6bb4:	604b      	str	r3, [r1, #4]
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    6bb6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6bba:	2bff      	cmp	r3, #255	; 0xff
    6bbc:	bf28      	it	cs
    6bbe:	23ff      	movcs	r3, #255	; 0xff
		return 0;
    6bc0:	2000      	movs	r0, #0
		mod->led_frame_buffer_usable[led_index*3 + 2] = grid_led_color_code[led_b];
    6bc2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    6bc6:	608b      	str	r3, [r1, #8]
}
    6bc8:	bd10      	pop	{r4, pc}
		return -1;		
    6bca:	20ff      	movs	r0, #255	; 0xff
    6bcc:	e7fc      	b.n	6bc8 <grid_led_lowlevel_set_color+0x40>
    6bce:	bf00      	nop
    6bd0:	20007dfc 	.word	0x20007dfc

00006bd4 <grid_led_hardware_init>:


}


void grid_led_hardware_init(struct grid_led_model* mod){
    6bd4:	b510      	push	{r4, lr}
	
	spi_m_dma_get_io_descriptor(&GRID_LED, &mod->hardware_io_descriptor);
    6bd6:	4c06      	ldr	r4, [pc, #24]	; (6bf0 <grid_led_hardware_init+0x1c>)
    6bd8:	4b06      	ldr	r3, [pc, #24]	; (6bf4 <grid_led_hardware_init+0x20>)
    6bda:	f100 0114 	add.w	r1, r0, #20
    6bde:	4620      	mov	r0, r4
    6be0:	4798      	blx	r3
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_lowlevel_hardware_transfer_complete_cb);
    6be2:	4620      	mov	r0, r4
    6be4:	4a04      	ldr	r2, [pc, #16]	; (6bf8 <grid_led_hardware_init+0x24>)
    6be6:	4b05      	ldr	r3, [pc, #20]	; (6bfc <grid_led_hardware_init+0x28>)
	

		
}
    6be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_dma_register_callback(&GRID_LED, SPI_M_DMA_CB_TX_DONE, grid_led_lowlevel_hardware_transfer_complete_cb);
    6bec:	2100      	movs	r1, #0
    6bee:	4718      	bx	r3
    6bf0:	20014cb4 	.word	0x20014cb4
    6bf4:	0000b845 	.word	0x0000b845
    6bf8:	00006b7d 	.word	0x00006b7d
    6bfc:	0000b811 	.word	0x0000b811

00006c00 <grid_led_get_led_number>:

uint32_t grid_led_get_led_number(struct grid_led_model* mod){

	return mod->led_number;

}
    6c00:	7840      	ldrb	r0, [r0, #1]
    6c02:	4770      	bx	lr

00006c04 <grid_led_tick>:

/** ================== ANIMATION ==================  */


void grid_led_tick(struct grid_led_model* mod){
    6c04:	b5f0      	push	{r4, r5, r6, r7, lr}
	

	/** ATOMI - all phase registers must be updated  */
	for (uint8_t j=0; j<mod->led_number; j++){
    6c06:	7846      	ldrb	r6, [r0, #1]
    6c08:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    6c0c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6c10:	2400      	movs	r4, #0
    6c12:	270d      	movs	r7, #13
    6c14:	b2e3      	uxtb	r3, r4
    6c16:	429e      	cmp	r6, r3
    6c18:	d800      	bhi.n	6c1c <grid_led_tick+0x18>
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
		}	
	}
	/** END */
	
}
    6c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c1c:	6903      	ldr	r3, [r0, #16]
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    6c1e:	2103      	movs	r1, #3
    6c20:	fb07 3304 	mla	r3, r7, r4, r3
    6c24:	7add      	ldrb	r5, [r3, #11]
    6c26:	f893 c00c 	ldrb.w	ip, [r3, #12]
    6c2a:	3901      	subs	r1, #1
    6c2c:	4465      	add	r5, ip
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    6c2e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
			mod->led_smart_buffer[j+(mod->led_number*layer)].pha += mod->led_smart_buffer[j+(mod->led_number*layer)].fre; //PHASE + = FREQUENCY		
    6c32:	72dd      	strb	r5, [r3, #11]
		for(uint8_t i=0; i<GRID_LED_LAYER_NUMBER; i++){
    6c34:	4413      	add	r3, r2
    6c36:	d1f5      	bne.n	6c24 <grid_led_tick+0x20>
	for (uint8_t j=0; j<mod->led_number; j++){
    6c38:	3401      	adds	r4, #1
    6c3a:	e7eb      	b.n	6c14 <grid_led_tick+0x10>

00006c3c <grid_led_set_min>:
	grid_led_set_max(mod, num, layer, r, g, b);

}


void grid_led_set_min(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6c3c:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r = r;
    6c3e:	7844      	ldrb	r4, [r0, #1]
    6c40:	6900      	ldr	r0, [r0, #16]
    6c42:	fb04 1202 	mla	r2, r4, r2, r1
    6c46:	240d      	movs	r4, #13
    6c48:	4362      	muls	r2, r4
    6c4a:	1881      	adds	r1, r0, r2
    6c4c:	5483      	strb	r3, [r0, r2]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g = g;
    6c4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6c52:	704b      	strb	r3, [r1, #1]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b = b;	
    6c54:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c58:	708b      	strb	r3, [r1, #2]
}
    6c5a:	bd10      	pop	{r4, pc}

00006c5c <grid_led_set_mid>:

void grid_led_set_mid(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6c5c:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.r = r;
    6c5e:	7844      	ldrb	r4, [r0, #1]
    6c60:	fb04 1102 	mla	r1, r4, r2, r1
    6c64:	6902      	ldr	r2, [r0, #16]
    6c66:	200d      	movs	r0, #13
    6c68:	fb00 2201 	mla	r2, r0, r1, r2
    6c6c:	70d3      	strb	r3, [r2, #3]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.g = g;
    6c6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6c72:	7113      	strb	r3, [r2, #4]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_mid.b = b;	
    6c74:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c78:	7153      	strb	r3, [r2, #5]
}
    6c7a:	bd10      	pop	{r4, pc}

00006c7c <grid_led_set_max>:

void grid_led_set_max(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6c7c:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r = r;
    6c7e:	7844      	ldrb	r4, [r0, #1]
    6c80:	fb04 1102 	mla	r1, r4, r2, r1
    6c84:	6902      	ldr	r2, [r0, #16]
    6c86:	200d      	movs	r0, #13
    6c88:	fb00 2201 	mla	r2, r0, r1, r2
    6c8c:	7193      	strb	r3, [r2, #6]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g = g;
    6c8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6c92:	71d3      	strb	r3, [r2, #7]
	mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b = b;	
    6c94:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6c98:	7213      	strb	r3, [r2, #8]
}
    6c9a:	bd10      	pop	{r4, pc}

00006c9c <grid_led_set_color>:
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6c9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6ca0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    6ca4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    6ca8:	f8df a058 	ldr.w	sl, [pc, #88]	; 6d04 <grid_led_set_color+0x68>
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6cac:	461c      	mov	r4, r3
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    6cae:	2314      	movs	r3, #20
    6cb0:	fbb9 fcf3 	udiv	ip, r9, r3
    6cb4:	f8cd c004 	str.w	ip, [sp, #4]
    6cb8:	fbb8 fcf3 	udiv	ip, r8, r3
    6cbc:	fbb4 f3f3 	udiv	r3, r4, r3
    6cc0:	f8cd c000 	str.w	ip, [sp]
void grid_led_set_color(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t r, uint8_t g, uint8_t b){
    6cc4:	4605      	mov	r5, r0
    6cc6:	460e      	mov	r6, r1
    6cc8:	4617      	mov	r7, r2
	grid_led_set_min(mod, num, layer, r/20, g/20, b/20);				
    6cca:	47d0      	blx	sl
	grid_led_set_mid(mod, num, layer, r/2, g/2, b/2);
    6ccc:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6cd0:	9301      	str	r3, [sp, #4]
    6cd2:	ea4f 0358 	mov.w	r3, r8, lsr #1
    6cd6:	9300      	str	r3, [sp, #0]
    6cd8:	463a      	mov	r2, r7
    6cda:	0863      	lsrs	r3, r4, #1
    6cdc:	4631      	mov	r1, r6
    6cde:	4628      	mov	r0, r5
    6ce0:	f8df a024 	ldr.w	sl, [pc, #36]	; 6d08 <grid_led_set_color+0x6c>
    6ce4:	47d0      	blx	sl
	grid_led_set_max(mod, num, layer, r, g, b);
    6ce6:	4623      	mov	r3, r4
    6ce8:	4c05      	ldr	r4, [pc, #20]	; (6d00 <grid_led_set_color+0x64>)
    6cea:	463a      	mov	r2, r7
    6cec:	4631      	mov	r1, r6
    6cee:	4628      	mov	r0, r5
    6cf0:	46a4      	mov	ip, r4
    6cf2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
}
    6cf6:	b002      	add	sp, #8
    6cf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_led_set_max(mod, num, layer, r, g, b);
    6cfc:	4760      	bx	ip
    6cfe:	bf00      	nop
    6d00:	00006c7d 	.word	0x00006c7d
    6d04:	00006c3d 	.word	0x00006c3d
    6d08:	00006c5d 	.word	0x00006c5d

00006d0c <grid_led_set_phase>:

void grid_led_set_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    6d0c:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].pha = val;
    6d0e:	7844      	ldrb	r4, [r0, #1]
    6d10:	fb04 1102 	mla	r1, r4, r2, r1
    6d14:	6902      	ldr	r2, [r0, #16]
    6d16:	200d      	movs	r0, #13
    6d18:	fb00 2101 	mla	r1, r0, r1, r2
    6d1c:	72cb      	strb	r3, [r1, #11]
}
    6d1e:	bd10      	pop	{r4, pc}

00006d20 <grid_led_set_frequency>:
uint8_t grid_led_get_phase(struct grid_led_model* mod, uint8_t num, uint8_t layer){
	
	return mod->led_smart_buffer[num+(mod->led_number*layer)].pha;
}

void grid_led_set_frequency(struct grid_led_model* mod, uint8_t num, uint8_t layer, uint8_t val){
    6d20:	b510      	push	{r4, lr}
	
	mod->led_smart_buffer[num+(mod->led_number*layer)].fre = val;
    6d22:	7844      	ldrb	r4, [r0, #1]
    6d24:	fb04 1102 	mla	r1, r4, r2, r1
    6d28:	6902      	ldr	r2, [r0, #16]
    6d2a:	200d      	movs	r0, #13
    6d2c:	fb00 2101 	mla	r1, r0, r1, r2
    6d30:	730b      	strb	r3, [r1, #12]
}
    6d32:	bd10      	pop	{r4, pc}

00006d34 <grid_led_buffer_init>:
void grid_led_buffer_init(struct grid_led_model* mod, uint32_t length){
    6d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d38:	4604      	mov	r4, r0
	mod->led_number = length;
    6d3a:	7041      	strb	r1, [r0, #1]
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    6d3c:	b2cd      	uxtb	r5, r1
    6d3e:	200c      	movs	r0, #12
    6d40:	4368      	muls	r0, r5
    6d42:	3090      	adds	r0, #144	; 0x90
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6d44:	4f4c      	ldr	r7, [pc, #304]	; (6e78 <grid_led_buffer_init+0x144>)
	mod->led_frame_buffer_size = (GRID_LED_RESET_LENGTH + mod->led_number*3*4);
    6d46:	6060      	str	r0, [r4, #4]
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6d48:	47b8      	blx	r7
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    6d4a:	f100 0390 	add.w	r3, r0, #144	; 0x90
	mod->led_frame_buffer = (uint8_t*) malloc(mod->led_frame_buffer_size * sizeof(uint8_t));
    6d4e:	60a0      	str	r0, [r4, #8]
    6d50:	4606      	mov	r6, r0
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    6d52:	2027      	movs	r0, #39	; 0x27
	mod->led_frame_buffer_usable = (uint32_t*) &mod->led_frame_buffer[GRID_LED_RESET_LENGTH];
    6d54:	60e3      	str	r3, [r4, #12]
	mod->led_smart_buffer = (struct LED_layer*) malloc(mod->led_number * GRID_LED_LAYER_NUMBER * sizeof(struct LED_layer));
    6d56:	4368      	muls	r0, r5
    6d58:	47b8      	blx	r7
    6d5a:	6120      	str	r0, [r4, #16]
	if(mod->led_frame_buffer==NULL || mod->led_smart_buffer==NULL){
    6d5c:	b106      	cbz	r6, 6d60 <grid_led_buffer_init+0x2c>
    6d5e:	b900      	cbnz	r0, 6d62 <grid_led_buffer_init+0x2e>
		while(1){
    6d60:	e7fe      	b.n	6d60 <grid_led_buffer_init+0x2c>
    6d62:	2300      	movs	r3, #0
		mod->led_frame_buffer[i] = LED_CODE_R;
    6d64:	4619      	mov	r1, r3
    6d66:	68a2      	ldr	r2, [r4, #8]
    6d68:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<GRID_LED_RESET_LENGTH; i++){
    6d6a:	3301      	adds	r3, #1
    6d6c:	2b90      	cmp	r3, #144	; 0x90
    6d6e:	d1fa      	bne.n	6d66 <grid_led_buffer_init+0x32>
	for (uint32_t i = 0; i<mod->led_number; i++){
    6d70:	2500      	movs	r5, #0
		grid_led_lowlevel_set_color(mod,i,0,0,0);
    6d72:	4f42      	ldr	r7, [pc, #264]	; (6e7c <grid_led_buffer_init+0x148>)
    6d74:	462e      	mov	r6, r5
	for (uint32_t i = 0; i<mod->led_number; i++){
    6d76:	7863      	ldrb	r3, [r4, #1]
    6d78:	429d      	cmp	r5, r3
    6d7a:	d30c      	bcc.n	6d96 <grid_led_buffer_init+0x62>
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    6d7c:	4d40      	ldr	r5, [pc, #256]	; (6e80 <grid_led_buffer_init+0x14c>)
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    6d7e:	4e41      	ldr	r6, [pc, #260]	; (6e84 <grid_led_buffer_init+0x150>)
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    6d80:	4f41      	ldr	r7, [pc, #260]	; (6e88 <grid_led_buffer_init+0x154>)
    6d82:	f04f 0b00 	mov.w	fp, #0
	for(uint8_t i = 0; i<mod->led_number; i++){
    6d86:	7863      	ldrb	r3, [r4, #1]
    6d88:	fa5f fa8b 	uxtb.w	sl, fp
    6d8c:	4553      	cmp	r3, sl
    6d8e:	d80a      	bhi.n	6da6 <grid_led_buffer_init+0x72>
}
    6d90:	b003      	add	sp, #12
    6d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		grid_led_lowlevel_set_color(mod,i,0,0,0);
    6d96:	2300      	movs	r3, #0
    6d98:	4629      	mov	r1, r5
    6d9a:	9600      	str	r6, [sp, #0]
    6d9c:	461a      	mov	r2, r3
    6d9e:	4620      	mov	r0, r4
    6da0:	47b8      	blx	r7
	for (uint32_t i = 0; i<mod->led_number; i++){
    6da2:	3501      	adds	r5, #1
    6da4:	e7e7      	b.n	6d76 <grid_led_buffer_init+0x42>
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x00, 0x00);
    6da6:	2300      	movs	r3, #0
    6da8:	e9cd 3300 	strd	r3, r3, [sp]
    6dac:	2201      	movs	r2, #1
    6dae:	4651      	mov	r1, sl
    6db0:	4620      	mov	r0, r4
    6db2:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0x7F, 0x00);
    6db4:	2300      	movs	r3, #0
    6db6:	227f      	movs	r2, #127	; 0x7f
    6db8:	e9cd 2300 	strd	r2, r3, [sp]
    6dbc:	4651      	mov	r1, sl
    6dbe:	2201      	movs	r2, #1
    6dc0:	4620      	mov	r0, r4
    6dc2:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_A, 0x00, 0xFF, 0x00);
    6dc4:	2300      	movs	r3, #0
    6dc6:	22ff      	movs	r2, #255	; 0xff
    6dc8:	e9cd 2300 	strd	r2, r3, [sp]
    6dcc:	4651      	mov	r1, sl
    6dce:	2201      	movs	r2, #1
    6dd0:	4620      	mov	r0, r4
    6dd2:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    6dd4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 6e8c <grid_led_buffer_init+0x158>
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    6dd8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 6e90 <grid_led_buffer_init+0x15c>
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_A, 0);
    6ddc:	2300      	movs	r3, #0
    6dde:	2201      	movs	r2, #1
    6de0:	4651      	mov	r1, sl
    6de2:	4620      	mov	r0, r4
    6de4:	47c8      	blx	r9
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_A, 0);
    6de6:	2300      	movs	r3, #0
    6de8:	2201      	movs	r2, #1
    6dea:	4651      	mov	r1, sl
    6dec:	4620      	mov	r0, r4
    6dee:	47c0      	blx	r8
		grid_led_set_min(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x00, 0x00);
    6df0:	2300      	movs	r3, #0
    6df2:	e9cd 3300 	strd	r3, r3, [sp]
    6df6:	2202      	movs	r2, #2
    6df8:	4651      	mov	r1, sl
    6dfa:	4620      	mov	r0, r4
    6dfc:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0x7F, 0x00);
    6dfe:	2300      	movs	r3, #0
    6e00:	227f      	movs	r2, #127	; 0x7f
    6e02:	e9cd 2300 	strd	r2, r3, [sp]
    6e06:	4651      	mov	r1, sl
    6e08:	2202      	movs	r2, #2
    6e0a:	4620      	mov	r0, r4
    6e0c:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_UI_B, 0x00, 0xFF, 0x00);
    6e0e:	2300      	movs	r3, #0
    6e10:	22ff      	movs	r2, #255	; 0xff
    6e12:	e9cd 2300 	strd	r2, r3, [sp]
    6e16:	4651      	mov	r1, sl
    6e18:	2202      	movs	r2, #2
    6e1a:	4620      	mov	r0, r4
    6e1c:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_UI_B, 0);
    6e1e:	2300      	movs	r3, #0
    6e20:	2202      	movs	r2, #2
    6e22:	4651      	mov	r1, sl
    6e24:	4620      	mov	r0, r4
    6e26:	47c8      	blx	r9
		grid_led_set_phase(mod,i, GRID_LED_LAYER_UI_B, 0);
    6e28:	2300      	movs	r3, #0
    6e2a:	2202      	movs	r2, #2
    6e2c:	4651      	mov	r1, sl
    6e2e:	4620      	mov	r0, r4
    6e30:	47c0      	blx	r8
		grid_led_set_min(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6e32:	2300      	movs	r3, #0
    6e34:	461a      	mov	r2, r3
    6e36:	e9cd 3300 	strd	r3, r3, [sp]
    6e3a:	4651      	mov	r1, sl
    6e3c:	4620      	mov	r0, r4
    6e3e:	47a8      	blx	r5
		grid_led_set_mid(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6e40:	2300      	movs	r3, #0
    6e42:	461a      	mov	r2, r3
    6e44:	e9cd 3300 	strd	r3, r3, [sp]
    6e48:	4651      	mov	r1, sl
    6e4a:	4620      	mov	r0, r4
    6e4c:	47b0      	blx	r6
		grid_led_set_max(mod,i, GRID_LED_LAYER_ALERT, 0x00, 0x00, 0x00);
    6e4e:	2300      	movs	r3, #0
    6e50:	461a      	mov	r2, r3
    6e52:	e9cd 3300 	strd	r3, r3, [sp]
    6e56:	4651      	mov	r1, sl
    6e58:	4620      	mov	r0, r4
    6e5a:	47b8      	blx	r7
		grid_led_set_frequency(mod,i, GRID_LED_LAYER_ALERT, 0);
    6e5c:	2300      	movs	r3, #0
    6e5e:	461a      	mov	r2, r3
    6e60:	4651      	mov	r1, sl
    6e62:	4620      	mov	r0, r4
    6e64:	47c8      	blx	r9
		grid_led_set_phase(mod, i, GRID_LED_LAYER_ALERT, 0);
    6e66:	2300      	movs	r3, #0
    6e68:	461a      	mov	r2, r3
    6e6a:	4651      	mov	r1, sl
    6e6c:	4620      	mov	r0, r4
    6e6e:	47c0      	blx	r8
	for(uint8_t i = 0; i<mod->led_number; i++){
    6e70:	f10b 0b01 	add.w	fp, fp, #1
    6e74:	e787      	b.n	6d86 <grid_led_buffer_init+0x52>
    6e76:	bf00      	nop
    6e78:	00012cb1 	.word	0x00012cb1
    6e7c:	00006b89 	.word	0x00006b89
    6e80:	00006c3d 	.word	0x00006c3d
    6e84:	00006c5d 	.word	0x00006c5d
    6e88:	00006c7d 	.word	0x00006c7d
    6e8c:	00006d21 	.word	0x00006d21
    6e90:	00006d0d 	.word	0x00006d0d

00006e94 <grid_led_lowlevel_init>:
uint8_t grid_led_lowlevel_init(struct grid_led_model* mod, uint8_t num){
    6e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e96:	4e29      	ldr	r6, [pc, #164]	; (6f3c <grid_led_lowlevel_init+0xa8>)
	for(uint16_t i=0; i<256; i++){
    6e98:	2300      	movs	r3, #0
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    6e9a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
		temp |= (i/2%2)   ? (LED_CODE_O<<28) : (LED_CODE_Z<<28);
    6e9e:	f013 0f02 	tst.w	r3, #2
    6ea2:	bf0c      	ite	eq
    6ea4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    6ea8:	f04f 4560 	movne.w	r5, #3758096384	; 0xe0000000
		temp |= (i/4%2)   ? (LED_CODE_O<<16) : (LED_CODE_Z<<16);
    6eac:	f013 0f04 	tst.w	r3, #4
    6eb0:	bf0c      	ite	eq
    6eb2:	f44f 2400 	moveq.w	r4, #524288	; 0x80000
    6eb6:	f44f 2460 	movne.w	r4, #917504	; 0xe0000
		temp |= (i/8%2)   ? (LED_CODE_O<<20) : (LED_CODE_Z<<20);
    6eba:	f013 0f08 	tst.w	r3, #8
    6ebe:	ea45 0504 	orr.w	r5, r5, r4
    6ec2:	bf0c      	ite	eq
    6ec4:	f44f 0400 	moveq.w	r4, #8388608	; 0x800000
    6ec8:	f44f 0460 	movne.w	r4, #14680064	; 0xe00000
		temp |= (i/16%2)  ? (LED_CODE_O<<8)  : (LED_CODE_Z<<8);
    6ecc:	f013 0f10 	tst.w	r3, #16
    6ed0:	ea45 0504 	orr.w	r5, r5, r4
    6ed4:	bf0c      	ite	eq
    6ed6:	f44f 6400 	moveq.w	r4, #2048	; 0x800
    6eda:	f44f 6460 	movne.w	r4, #3584	; 0xe00
		temp |= (i/32%2)  ? (LED_CODE_O<<12) : (LED_CODE_Z<<12);
    6ede:	f013 0f20 	tst.w	r3, #32
    6ee2:	bf0c      	ite	eq
    6ee4:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
    6ee8:	f44f 4260 	movne.w	r2, #57344	; 0xe000
    6eec:	432c      	orrs	r4, r5
		temp |= (i/64%2)  ? (LED_CODE_O<<0)  : (LED_CODE_Z<<0);
    6eee:	f013 0f40 	tst.w	r3, #64	; 0x40
    6ef2:	ea44 0402 	orr.w	r4, r4, r2
    6ef6:	bf0c      	ite	eq
    6ef8:	2208      	moveq	r2, #8
    6efa:	220e      	movne	r2, #14
    6efc:	4314      	orrs	r4, r2
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6efe:	09da      	lsrs	r2, r3, #7
    6f00:	bf14      	ite	ne
    6f02:	22e0      	movne	r2, #224	; 0xe0
    6f04:	2280      	moveq	r2, #128	; 0x80
	for(uint16_t i=0; i<256; i++){
    6f06:	3301      	adds	r3, #1
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6f08:	4322      	orrs	r2, r4
	for(uint16_t i=0; i<256; i++){
    6f0a:	b29b      	uxth	r3, r3
		temp |= (i/128%2) ? (LED_CODE_O<<4)  : (LED_CODE_Z<<4);
    6f0c:	433a      	orrs	r2, r7
	for(uint16_t i=0; i<256; i++){
    6f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		grid_led_color_code[i] = temp;
    6f12:	f846 2b04 	str.w	r2, [r6], #4
	for(uint16_t i=0; i<256; i++){
    6f16:	d108      	bne.n	6f2a <grid_led_lowlevel_init+0x96>
	grid_led_buffer_init(mod, num);		
    6f18:	4b09      	ldr	r3, [pc, #36]	; (6f40 <grid_led_lowlevel_init+0xac>)
    6f1a:	9001      	str	r0, [sp, #4]
    6f1c:	4798      	blx	r3
	grid_led_hardware_init(mod);
    6f1e:	9801      	ldr	r0, [sp, #4]
    6f20:	4b08      	ldr	r3, [pc, #32]	; (6f44 <grid_led_lowlevel_init+0xb0>)
    6f22:	4798      	blx	r3
}
    6f24:	2000      	movs	r0, #0
    6f26:	b003      	add	sp, #12
    6f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp |= (i/1%2)   ? (LED_CODE_O<<24) : (LED_CODE_Z<<24);
    6f2a:	f013 0f01 	tst.w	r3, #1
    6f2e:	bf14      	ite	ne
    6f30:	f04f 6760 	movne.w	r7, #234881024	; 0xe000000
    6f34:	f04f 6700 	moveq.w	r7, #134217728	; 0x8000000
    6f38:	e7b1      	b.n	6e9e <grid_led_lowlevel_init+0xa>
    6f3a:	bf00      	nop
    6f3c:	20007dfc 	.word	0x20007dfc
    6f40:	00006d35 	.word	0x00006d35
    6f44:	00006bd5 	.word	0x00006bd5

00006f48 <grid_led_lowlevel_render>:


void grid_led_lowlevel_render(struct grid_led_model* mod, uint32_t num){
    6f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f4c:	7847      	ldrb	r7, [r0, #1]
		uint8_t layer = i;
				
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
		uint8_t min_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.g;
		uint8_t min_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.b;
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f4e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6ff0 <grid_led_lowlevel_render+0xa8>
    6f52:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    6f56:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    6f5a:	6903      	ldr	r3, [r0, #16]
	uint32_t mix_b = 0;
    6f5c:	2500      	movs	r5, #0
    6f5e:	240d      	movs	r4, #13
    6f60:	fb04 3401 	mla	r4, r4, r1, r3
		uint8_t min_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_min.r;
    6f64:	2603      	movs	r6, #3
	uint32_t mix_g = 0;
    6f66:	462b      	mov	r3, r5
	uint32_t mix_r = 0;
    6f68:	462a      	mov	r2, r5
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f6a:	f894 900b 	ldrb.w	r9, [r4, #11]
		uint8_t max_r = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.r;
		uint8_t max_g = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.g;
		uint8_t max_b = mod->led_smart_buffer[num+(mod->led_number*layer)].color_max.b;
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
				
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    6f6e:	f894 b003 	ldrb.w	fp, [r4, #3]
		uint8_t min_a = min_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f72:	f818 e009 	ldrb.w	lr, [r8, r9]
		uint8_t mid_a = mid_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f76:	44c1      	add	r9, r8
    6f78:	3e01      	subs	r6, #1
    6f7a:	f899 a100 	ldrb.w	sl, [r9, #256]	; 0x100
		uint8_t max_a = max_lookup[mod->led_smart_buffer[num+(mod->led_number*layer)].pha];
    6f7e:	f899 c200 	ldrb.w	ip, [r9, #512]	; 0x200
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    6f82:	f894 9000 	ldrb.w	r9, [r4]
    6f86:	fb1b fb0a 	smulbb	fp, fp, sl
    6f8a:	fb09 bb0e 	mla	fp, r9, lr, fp
    6f8e:	f894 9006 	ldrb.w	r9, [r4, #6]
    6f92:	fb09 b90c 	mla	r9, r9, ip, fp
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    6f96:	f894 b004 	ldrb.w	fp, [r4, #4]
		mix_r += min_r*min_a + mid_r*mid_a + max_r*max_a;
    6f9a:	444a      	add	r2, r9
		mix_g += min_g*min_a + mid_g*mid_a + max_g*max_a;
    6f9c:	f894 9001 	ldrb.w	r9, [r4, #1]
    6fa0:	fb1b fb0a 	smulbb	fp, fp, sl
    6fa4:	fb09 bb0e 	mla	fp, r9, lr, fp
    6fa8:	f894 9007 	ldrb.w	r9, [r4, #7]
    6fac:	fb09 b90c 	mla	r9, r9, ip, fp
    6fb0:	444b      	add	r3, r9
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    6fb2:	f894 9005 	ldrb.w	r9, [r4, #5]
    6fb6:	f894 b002 	ldrb.w	fp, [r4, #2]
    6fba:	fb19 f90a 	smulbb	r9, r9, sl
    6fbe:	fb0b 9e0e 	mla	lr, fp, lr, r9
    6fc2:	f894 9008 	ldrb.w	r9, [r4, #8]
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    6fc6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		mix_b += min_b*min_a + mid_b*mid_a + max_b*max_a;
    6fca:	fb09 ec0c 	mla	ip, r9, ip, lr
    6fce:	4465      	add	r5, ip
	for (uint8_t i = 0; i<GRID_LED_LAYER_NUMBER; i++){
    6fd0:	443c      	add	r4, r7
    6fd2:	d1ca      	bne.n	6f6a <grid_led_lowlevel_render+0x22>

	mix_r = (mix_r)/2/256;
	mix_g = (mix_g)/2/256;
	mix_b = (mix_b)/2/256;
				
	grid_led_lowlevel_set_color(mod, num, mix_r, mix_g, mix_b);
    6fd4:	f3c5 254f 	ubfx	r5, r5, #9, #16
    6fd8:	4c04      	ldr	r4, [pc, #16]	; (6fec <grid_led_lowlevel_render+0xa4>)
    6fda:	9500      	str	r5, [sp, #0]
    6fdc:	f3c3 234f 	ubfx	r3, r3, #9, #16
    6fe0:	f3c2 224f 	ubfx	r2, r2, #9, #16
    6fe4:	47a0      	blx	r4
	
}
    6fe6:	b003      	add	sp, #12
    6fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fec:	00006b89 	.word	0x00006b89
    6ff0:	20000008 	.word	0x20000008

00006ff4 <grid_led_lowlevel_render_all>:


void grid_led_lowlevel_render_all(struct grid_led_model* mod){
    6ff4:	b570      	push	{r4, r5, r6, lr}
	
	for (uint32_t i=0; i<mod->led_number; i++){
		
		grid_led_lowlevel_render(mod, i);
    6ff6:	4e06      	ldr	r6, [pc, #24]	; (7010 <grid_led_lowlevel_render_all+0x1c>)
void grid_led_lowlevel_render_all(struct grid_led_model* mod){
    6ff8:	4605      	mov	r5, r0
	for (uint32_t i=0; i<mod->led_number; i++){
    6ffa:	2400      	movs	r4, #0
    6ffc:	786b      	ldrb	r3, [r5, #1]
    6ffe:	42a3      	cmp	r3, r4
    7000:	d800      	bhi.n	7004 <grid_led_lowlevel_render_all+0x10>
	}
	
}
    7002:	bd70      	pop	{r4, r5, r6, pc}
		grid_led_lowlevel_render(mod, i);
    7004:	4621      	mov	r1, r4
    7006:	4628      	mov	r0, r5
    7008:	47b0      	blx	r6
	for (uint32_t i=0; i<mod->led_number; i++){
    700a:	3401      	adds	r4, #1
    700c:	e7f6      	b.n	6ffc <grid_led_lowlevel_render_all+0x8>
    700e:	bf00      	nop
    7010:	00006f49 	.word	0x00006f49

00007014 <grid_led_lowlevel_hardware_start_transfer>:
			
	}
	
}

void grid_led_lowlevel_hardware_start_transfer (struct grid_led_model* mod){
    7014:	b510      	push	{r4, lr}
	
	// SEND DATA TO LEDs
	grid_led_hardware_transfer_done = 0;
    7016:	4b07      	ldr	r3, [pc, #28]	; (7034 <grid_led_lowlevel_hardware_start_transfer+0x20>)
void grid_led_lowlevel_hardware_start_transfer (struct grid_led_model* mod){
    7018:	4604      	mov	r4, r0
	grid_led_hardware_transfer_done = 0;
    701a:	2200      	movs	r2, #0
    701c:	701a      	strb	r2, [r3, #0]
	spi_m_dma_enable(&GRID_LED);
    701e:	4806      	ldr	r0, [pc, #24]	; (7038 <grid_led_lowlevel_hardware_start_transfer+0x24>)
    7020:	4b06      	ldr	r3, [pc, #24]	; (703c <grid_led_lowlevel_hardware_start_transfer+0x28>)
    7022:	4798      	blx	r3
			
	io_write(mod->hardware_io_descriptor, grid_led_lowlevel_get_frame_buffer_pointer(mod), grid_led_lowlevel_get_frame_buffer_size(mod));
    7024:	88a2      	ldrh	r2, [r4, #4]
    7026:	68a1      	ldr	r1, [r4, #8]
    7028:	6960      	ldr	r0, [r4, #20]
    702a:	4b05      	ldr	r3, [pc, #20]	; (7040 <grid_led_lowlevel_hardware_start_transfer+0x2c>)

}
    702c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	io_write(mod->hardware_io_descriptor, grid_led_lowlevel_get_frame_buffer_pointer(mod), grid_led_lowlevel_get_frame_buffer_size(mod));
    7030:	4718      	bx	r3
    7032:	bf00      	nop
    7034:	200010e8 	.word	0x200010e8
    7038:	20014cb4 	.word	0x20014cb4
    703c:	0000b7e9 	.word	0x0000b7e9
    7040:	0000b481 	.word	0x0000b481

00007044 <grid_module_common_init>:

	
/* ============================== GRID_MODULE_INIT() ================================ */


void grid_module_common_init(void){
    7044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	grid_ui_model_init(&grid_core_state, 1);
    7048:	4d70      	ldr	r5, [pc, #448]	; (720c <grid_module_common_init+0x1c8>)
    704a:	4b71      	ldr	r3, [pc, #452]	; (7210 <grid_module_common_init+0x1cc>)
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
	
		
	if (1){	// INIT CORE_STATE->hearbeat	
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    704c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 7290 <grid_module_common_init+0x24c>
		uint8_t payload_length = 0;
	
		sprintf(payload_template, GRID_EVENTSTRING_HEARTBEAT );
		payload_length = strlen(payload_template);
    7050:	f8df 8240 	ldr.w	r8, [pc, #576]	; 7294 <grid_module_common_init+0x250>
	
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    7054:	4f6f      	ldr	r7, [pc, #444]	; (7214 <grid_module_common_init+0x1d0>)
		uint8_t error = 0;
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    7056:	f8df a240 	ldr.w	sl, [pc, #576]	; 7298 <grid_module_common_init+0x254>
void grid_module_common_init(void){
    705a:	b0a3      	sub	sp, #140	; 0x8c
	grid_ui_model_init(&grid_core_state, 1);
    705c:	4628      	mov	r0, r5
    705e:	2101      	movs	r1, #1
    7060:	4798      	blx	r3
	grid_ui_bank_init(&grid_core_state, 0, 1);
    7062:	4628      	mov	r0, r5
    7064:	4b6c      	ldr	r3, [pc, #432]	; (7218 <grid_module_common_init+0x1d4>)
    7066:	2201      	movs	r2, #1
    7068:	2100      	movs	r1, #0
    706a:	4798      	blx	r3
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
    706c:	2200      	movs	r2, #0
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    706e:	2400      	movs	r4, #0
	grid_ui_element_init(&grid_core_state.bank_list[0], 0, GRID_UI_ELEMENT_SYSTEM);
    7070:	6868      	ldr	r0, [r5, #4]
    7072:	4b6a      	ldr	r3, [pc, #424]	; (721c <grid_module_common_init+0x1d8>)
    7074:	4611      	mov	r1, r2
    7076:	4798      	blx	r3
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    7078:	2274      	movs	r2, #116	; 0x74
    707a:	4621      	mov	r1, r4
    707c:	a805      	add	r0, sp, #20
    707e:	9404      	str	r4, [sp, #16]
    7080:	47c8      	blx	r9
		sprintf(payload_template, GRID_EVENTSTRING_HEARTBEAT );
    7082:	4967      	ldr	r1, [pc, #412]	; (7220 <grid_module_common_init+0x1dc>)
    7084:	4b67      	ldr	r3, [pc, #412]	; (7224 <grid_module_common_init+0x1e0>)
    7086:	a804      	add	r0, sp, #16
    7088:	4798      	blx	r3
		payload_length = strlen(payload_template);
    708a:	a804      	add	r0, sp, #16
    708c:	47c0      	blx	r8
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    708e:	aa04      	add	r2, sp, #16
    7090:	1816      	adds	r6, r2, r0
    7092:	2303      	movs	r3, #3
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    7094:	f10d 0b0f 	add.w	fp, sp, #15
		sprintf(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_frame);
    7098:	4963      	ldr	r1, [pc, #396]	; (7228 <grid_module_common_init+0x1e4>)
    709a:	9300      	str	r3, [sp, #0]
    709c:	2202      	movs	r2, #2
    709e:	2310      	movs	r3, #16
    70a0:	4630      	mov	r0, r6
    70a2:	47b8      	blx	r7
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    70a4:	230e      	movs	r3, #14
    70a6:	2201      	movs	r2, #1
    70a8:	2104      	movs	r1, #4
	
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_HWCFG_offset, GRID_CLASS_HEARTBEAT_HWCFG_length, grid_sys_get_hwcfg(), &error);
    70aa:	4f60      	ldr	r7, [pc, #384]	; (722c <grid_module_common_init+0x1e8>)
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    70ac:	f8cd b000 	str.w	fp, [sp]
    70b0:	4630      	mov	r0, r6
		uint8_t error = 0;
    70b2:	f88d 400f 	strb.w	r4, [sp, #15]
		grid_msg_set_parameter(&payload_template[payload_length], GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code, &error);
    70b6:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_HWCFG_offset, GRID_CLASS_HEARTBEAT_HWCFG_length, grid_sys_get_hwcfg(), &error);
    70b8:	47b8      	blx	r7
    70ba:	2202      	movs	r2, #2
    70bc:	4603      	mov	r3, r0
    70be:	2105      	movs	r1, #5
    70c0:	4630      	mov	r0, r6
    70c2:	f8cd b000 	str.w	fp, [sp]
    70c6:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VMAJOR_offset, GRID_CLASS_HEARTBEAT_VMAJOR_length , GRID_PROTOCOL_VERSION_MAJOR, &error);
    70c8:	2301      	movs	r3, #1
    70ca:	2202      	movs	r2, #2
    70cc:	2107      	movs	r1, #7
    70ce:	4630      	mov	r0, r6
    70d0:	f8cd b000 	str.w	fp, [sp]
    70d4:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VMINOR_offset, GRID_CLASS_HEARTBEAT_VMINOR_length  , GRID_PROTOCOL_VERSION_MINOR, &error);
    70d6:	2301      	movs	r3, #1
    70d8:	2202      	movs	r2, #2
    70da:	2109      	movs	r1, #9
    70dc:	4630      	mov	r0, r6
    70de:	f8cd b000 	str.w	fp, [sp]
    70e2:	47d0      	blx	sl
		grid_msg_set_parameter(&payload_template[payload_length], GRID_CLASS_HEARTBEAT_VPATCH_offset, GRID_CLASS_HEARTBEAT_VPATCH_length  , GRID_PROTOCOL_VERSION_PATCH, &error);
    70e4:	2309      	movs	r3, #9
    70e6:	2202      	movs	r2, #2
    70e8:	210b      	movs	r1, #11
    70ea:	4630      	mov	r0, r6
    70ec:	f8cd b000 	str.w	fp, [sp]
    70f0:	47d0      	blx	sl
	
		payload_length = strlen(payload_template);
    70f2:	a804      	add	r0, sp, #16
    70f4:	47c0      	blx	r8
	
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_HEARTBEAT, payload_template, payload_length);		
    70f6:	686e      	ldr	r6, [r5, #4]
		payload_length = strlen(payload_template);
    70f8:	4603      	mov	r3, r0
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_HEARTBEAT, payload_template, payload_length);		
    70fa:	aa04      	add	r2, sp, #16
    70fc:	68f0      	ldr	r0, [r6, #12]
    70fe:	4e4c      	ldr	r6, [pc, #304]	; (7230 <grid_module_common_init+0x1ec>)
    7100:	210c      	movs	r1, #12
    7102:	47b0      	blx	r6
		
	}

	if (1){	// INIT CORE_STATE->mapmode press
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    7104:	2274      	movs	r2, #116	; 0x74
    7106:	4621      	mov	r1, r4
    7108:	a805      	add	r0, sp, #20
    710a:	9404      	str	r4, [sp, #16]
    710c:	47c8      	blx	r9
		uint8_t payload_length = 0;
	
		sprintf(payload_template, GRID_EVENTSTRING_MAPMODE_PRESS GRID_ACTIONSTRING_MAPMODE_PRESS);
    710e:	4949      	ldr	r1, [pc, #292]	; (7234 <grid_module_common_init+0x1f0>)
    7110:	4b44      	ldr	r3, [pc, #272]	; (7224 <grid_module_common_init+0x1e0>)
    7112:	a804      	add	r0, sp, #16
    7114:	4798      	blx	r3
		payload_length = strlen(payload_template);
    7116:	a804      	add	r0, sp, #16
    7118:	47c0      	blx	r8
    711a:	4603      	mov	r3, r0
	
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_MAPMODE_PRESS, payload_template, payload_length);			
    711c:	6868      	ldr	r0, [r5, #4]
    711e:	aa04      	add	r2, sp, #16
    7120:	68c0      	ldr	r0, [r0, #12]
    7122:	2107      	movs	r1, #7
    7124:	47b0      	blx	r6
		
	}	

	if (1){ // INIT CORE_STATE->mapmode release
			
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    7126:	2274      	movs	r2, #116	; 0x74
    7128:	4621      	mov	r1, r4
    712a:	a805      	add	r0, sp, #20
    712c:	9404      	str	r4, [sp, #16]
    712e:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_MAPMODE_RELEASE GRID_ACTIONSTRING_MAPMODE_RELEASE);
    7130:	4941      	ldr	r1, [pc, #260]	; (7238 <grid_module_common_init+0x1f4>)
    7132:	4b3c      	ldr	r3, [pc, #240]	; (7224 <grid_module_common_init+0x1e0>)
    7134:	a804      	add	r0, sp, #16
    7136:	4798      	blx	r3
		payload_length = strlen(payload_template);
    7138:	a804      	add	r0, sp, #16
    713a:	47c0      	blx	r8
    713c:	4603      	mov	r3, r0
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_MAPMODE_RELEASE, payload_template, payload_length);
    713e:	6868      	ldr	r0, [r5, #4]
    7140:	aa04      	add	r2, sp, #16
    7142:	68c0      	ldr	r0, [r0, #12]
    7144:	2108      	movs	r1, #8
    7146:	47b0      	blx	r6
		
	}	
	
	if (1){ // INIT CORE_STATE->cfgresponse
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    7148:	2274      	movs	r2, #116	; 0x74
    714a:	4621      	mov	r1, r4
    714c:	a805      	add	r0, sp, #20
    714e:	9404      	str	r4, [sp, #16]
    7150:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_CFG_RESPONES GRID_ACTIONSTRING_CFG_RESPONSE);
    7152:	493a      	ldr	r1, [pc, #232]	; (723c <grid_module_common_init+0x1f8>)
    7154:	4b33      	ldr	r3, [pc, #204]	; (7224 <grid_module_common_init+0x1e0>)
    7156:	a804      	add	r0, sp, #16
    7158:	4798      	blx	r3
		payload_length = strlen(payload_template);
    715a:	a804      	add	r0, sp, #16
    715c:	47c0      	blx	r8
    715e:	4603      	mov	r3, r0
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_RESPONSE, payload_template, payload_length);
    7160:	6868      	ldr	r0, [r5, #4]
    7162:	aa04      	add	r2, sp, #16
    7164:	68c0      	ldr	r0, [r0, #12]
    7166:	2109      	movs	r1, #9
    7168:	47b0      	blx	r6
		
	}	
	
	if (1){ // INIT CORE_STATE->cfgrequest
		
		uint8_t payload_template[GRID_UI_ACTION_STRING_maxlength] = {0};
    716a:	2274      	movs	r2, #116	; 0x74
    716c:	4621      	mov	r1, r4
    716e:	a805      	add	r0, sp, #20
    7170:	9404      	str	r4, [sp, #16]
    7172:	47c8      	blx	r9
		uint8_t payload_length = 0;
		
		sprintf(payload_template, GRID_EVENTSTRING_CFG_REQUEST GRID_ACTIONSTRING_CFG_REQUEST);
    7174:	4932      	ldr	r1, [pc, #200]	; (7240 <grid_module_common_init+0x1fc>)
    7176:	4b2b      	ldr	r3, [pc, #172]	; (7224 <grid_module_common_init+0x1e0>)
    7178:	a804      	add	r0, sp, #16
    717a:	4798      	blx	r3
		payload_length = strlen(payload_template);
    717c:	a804      	add	r0, sp, #16
    717e:	47c0      	blx	r8
		
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    7180:	686c      	ldr	r4, [r5, #4]
		payload_length = strlen(payload_template);
    7182:	4603      	mov	r3, r0
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    7184:	aa04      	add	r2, sp, #16
    7186:	68e0      	ldr	r0, [r4, #12]
	}	
	
	
	//enable pwr!
	
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "UI Power Enable");
    7188:	4c2e      	ldr	r4, [pc, #184]	; (7244 <grid_module_common_init+0x200>)
		grid_ui_event_register_actionstring(&grid_core_state.bank_list[0].element_list[0], GRID_UI_EVENT_CFG_REQUEST, payload_template, payload_length);
    718a:	210a      	movs	r1, #10
    718c:	47b0      	blx	r6
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "UI Power Enable");
    718e:	492e      	ldr	r1, [pc, #184]	; (7248 <grid_module_common_init+0x204>)
    7190:	482e      	ldr	r0, [pc, #184]	; (724c <grid_module_common_init+0x208>)
    7192:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7194:	4b2e      	ldr	r3, [pc, #184]	; (7250 <grid_module_common_init+0x20c>)
    7196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    719a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(UI_PWR_EN, true);

	// ADC SETUP	
	
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    719e:	47b8      	blx	r7
    71a0:	4625      	mov	r5, r4
    71a2:	b970      	cbnz	r0, 71c2 <grid_module_common_init+0x17e>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PO16");
    71a4:	492b      	ldr	r1, [pc, #172]	; (7254 <grid_module_common_init+0x210>)
    71a6:	4829      	ldr	r0, [pc, #164]	; (724c <grid_module_common_init+0x208>)
    71a8:	47a8      	blx	r5
		grid_module_po16_revb_init();
    71aa:	4b2b      	ldr	r3, [pc, #172]	; (7258 <grid_module_common_init+0x214>)
	}
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
		grid_module_bu16_revb_init();
    71ac:	4798      	blx	r3
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: Unknown Module");
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "HWCFG Mismatch");
	}


	grid_sys_init(&grid_sys_state);
    71ae:	4b2b      	ldr	r3, [pc, #172]	; (725c <grid_module_common_init+0x218>)
    71b0:	482b      	ldr	r0, [pc, #172]	; (7260 <grid_module_common_init+0x21c>)
    71b2:	4798      	blx	r3


	grid_nvm_init(&grid_nvm_state, &FLASH_0);
    71b4:	492b      	ldr	r1, [pc, #172]	; (7264 <grid_module_common_init+0x220>)
    71b6:	482c      	ldr	r0, [pc, #176]	; (7268 <grid_module_common_init+0x224>)
    71b8:	4b2c      	ldr	r3, [pc, #176]	; (726c <grid_module_common_init+0x228>)
    71ba:	4798      	blx	r3
	
		
}
    71bc:	b023      	add	sp, #140	; 0x8c
    71be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    71c2:	47b8      	blx	r7
    71c4:	2808      	cmp	r0, #8
    71c6:	d0ed      	beq.n	71a4 <grid_module_common_init+0x160>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
    71c8:	47b8      	blx	r7
    71ca:	2880      	cmp	r0, #128	; 0x80
    71cc:	d104      	bne.n	71d8 <grid_module_common_init+0x194>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: BU16");
    71ce:	4928      	ldr	r1, [pc, #160]	; (7270 <grid_module_common_init+0x22c>)
    71d0:	481e      	ldr	r0, [pc, #120]	; (724c <grid_module_common_init+0x208>)
    71d2:	47a8      	blx	r5
		grid_module_bu16_revb_init();
    71d4:	4b27      	ldr	r3, [pc, #156]	; (7274 <grid_module_common_init+0x230>)
    71d6:	e7e9      	b.n	71ac <grid_module_common_init+0x168>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevB || grid_sys_get_hwcfg() == GRID_MODULE_BU16_RevC ){
    71d8:	47b8      	blx	r7
    71da:	2888      	cmp	r0, #136	; 0x88
    71dc:	d0f7      	beq.n	71ce <grid_module_common_init+0x18a>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_PBF4_RevA){
    71de:	47b8      	blx	r7
    71e0:	2840      	cmp	r0, #64	; 0x40
    71e2:	d104      	bne.n	71ee <grid_module_common_init+0x1aa>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: PBF4");					
    71e4:	4924      	ldr	r1, [pc, #144]	; (7278 <grid_module_common_init+0x234>)
    71e6:	4819      	ldr	r0, [pc, #100]	; (724c <grid_module_common_init+0x208>)
    71e8:	47a0      	blx	r4
		grid_module_pbf4_reva_init();			
    71ea:	4b24      	ldr	r3, [pc, #144]	; (727c <grid_module_common_init+0x238>)
    71ec:	e7de      	b.n	71ac <grid_module_common_init+0x168>
	else if (grid_sys_get_hwcfg() == GRID_MODULE_EN16_RevA){
    71ee:	47b8      	blx	r7
    71f0:	28c0      	cmp	r0, #192	; 0xc0
    71f2:	d104      	bne.n	71fe <grid_module_common_init+0x1ba>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: EN16");
    71f4:	4922      	ldr	r1, [pc, #136]	; (7280 <grid_module_common_init+0x23c>)
    71f6:	4815      	ldr	r0, [pc, #84]	; (724c <grid_module_common_init+0x208>)
    71f8:	47a0      	blx	r4
		grid_module_en16_reva_init();	
    71fa:	4b22      	ldr	r3, [pc, #136]	; (7284 <grid_module_common_init+0x240>)
    71fc:	e7d6      	b.n	71ac <grid_module_common_init+0x168>
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Init Module: Unknown Module");
    71fe:	4922      	ldr	r1, [pc, #136]	; (7288 <grid_module_common_init+0x244>)
    7200:	4812      	ldr	r0, [pc, #72]	; (724c <grid_module_common_init+0x208>)
    7202:	47a0      	blx	r4
		GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "HWCFG Mismatch");
    7204:	4921      	ldr	r1, [pc, #132]	; (728c <grid_module_common_init+0x248>)
    7206:	4811      	ldr	r0, [pc, #68]	; (724c <grid_module_common_init+0x208>)
    7208:	47a0      	blx	r4
    720a:	e7d0      	b.n	71ae <grid_module_common_init+0x16a>
    720c:	20014628 	.word	0x20014628
    7210:	00009a09 	.word	0x00009a09
    7214:	000134b9 	.word	0x000134b9
    7218:	00009a3d 	.word	0x00009a3d
    721c:	0000adf5 	.word	0x0000adf5
    7220:	0001573c 	.word	0x0001573c
    7224:	000138bd 	.word	0x000138bd
    7228:	00015552 	.word	0x00015552
    722c:	00009885 	.word	0x00009885
    7230:	0000a7f9 	.word	0x0000a7f9
    7234:	0001574b 	.word	0x0001574b
    7238:	00015762 	.word	0x00015762
    723c:	00015771 	.word	0x00015771
    7240:	00015788 	.word	0x00015788
    7244:	00013049 	.word	0x00013049
    7248:	0001579f 	.word	0x0001579f
    724c:	000155e3 	.word	0x000155e3
    7250:	41008000 	.word	0x41008000
    7254:	000157af 	.word	0x000157af
    7258:	00008321 	.word	0x00008321
    725c:	000095ed 	.word	0x000095ed
    7260:	20006fa4 	.word	0x20006fa4
    7264:	20014b58 	.word	0x20014b58
    7268:	200079b8 	.word	0x200079b8
    726c:	00008c79 	.word	0x00008c79
    7270:	000157c1 	.word	0x000157c1
    7274:	000075cd 	.word	0x000075cd
    7278:	000157d3 	.word	0x000157d3
    727c:	00007fc5 	.word	0x00007fc5
    7280:	000157e5 	.word	0x000157e5
    7284:	00007ae5 	.word	0x00007ae5
    7288:	000157f7 	.word	0x000157f7
    728c:	00015813 	.word	0x00015813
    7290:	00012e05 	.word	0x00012e05
    7294:	00013981 	.word	0x00013981
    7298:	000099c5 	.word	0x000099c5

0000729c <grid_module_bu16_revb_hardware_start_transfer>:

static uint8_t grid_bu16_helper_template_b_tgl2[GRID_SYS_BANK_MAXNUMBER][16] = {0};
static uint8_t grid_bu16_helper_template_b_tgl3[GRID_SYS_BANK_MAXNUMBER][16] = {0};
	
	
void grid_module_bu16_revb_hardware_start_transfer(void){
    729c:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    729e:	4c04      	ldr	r4, [pc, #16]	; (72b0 <grid_module_bu16_revb_hardware_start_transfer+0x14>)
    72a0:	4804      	ldr	r0, [pc, #16]	; (72b4 <grid_module_bu16_revb_hardware_start_transfer+0x18>)
    72a2:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    72a4:	4623      	mov	r3, r4
    72a6:	4804      	ldr	r0, [pc, #16]	; (72b8 <grid_module_bu16_revb_hardware_start_transfer+0x1c>)

}
    72a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    72ac:	4718      	bx	r3
    72ae:	bf00      	nop
    72b0:	0000d9cd 	.word	0x0000d9cd
    72b4:	20014be4 	.word	0x20014be4
    72b8:	20014db8 	.word	0x20014db8

000072bc <grid_module_bu16_revb_hardware_transfer_complete_cb>:

static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    72bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    72c0:	4aa4      	ldr	r2, [pc, #656]	; (7554 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x298>)
    72c2:	7813      	ldrb	r3, [r2, #0]
static void grid_module_bu16_revb_hardware_transfer_complete_cb(void){
    72c4:	b08b      	sub	sp, #44	; 0x2c
    72c6:	4614      	mov	r4, r2
	if (grid_module_bu16_revb_hardware_transfer_complete == 0){
    72c8:	b933      	cbnz	r3, 72d8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1c>
		grid_module_bu16_revb_hardware_transfer_complete++;
    72ca:	7813      	ldrb	r3, [r2, #0]
    72cc:	3301      	adds	r3, #1
    72ce:	b2db      	uxtb	r3, r3
    72d0:	7013      	strb	r3, [r2, #0]
	}
	
	
	grid_module_bu16_revb_hardware_transfer_complete = 0;
	grid_module_bu16_revb_hardware_start_transfer();
}
    72d2:	b00b      	add	sp, #44	; 0x2c
    72d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    72d8:	4b9f      	ldr	r3, [pc, #636]	; (7558 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x29c>)
    72da:	48a0      	ldr	r0, [pc, #640]	; (755c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a0>)
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    72dc:	4d9f      	ldr	r5, [pc, #636]	; (755c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a0>)
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    72de:	4798      	blx	r3
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    72e0:	7c6a      	ldrb	r2, [r5, #17]
		bank=0;
    72e2:	28ff      	cmp	r0, #255	; 0xff
    72e4:	bf14      	ite	ne
    72e6:	4603      	movne	r3, r0
    72e8:	2300      	moveq	r3, #0
	if (bank_changed){
    72ea:	b9fa      	cbnz	r2, 732c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x70>
	uint16_t adcresult_0 = 0;
    72ec:	2300      	movs	r3, #0
    72ee:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t adcresult_1 = 0;
    72f2:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    72f6:	7863      	ldrb	r3, [r4, #1]
    72f8:	4a99      	ldr	r2, [pc, #612]	; (7560 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a4>)
    72fa:	3308      	adds	r3, #8
    72fc:	5cd7      	ldrb	r7, [r2, r3]
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    72fe:	7863      	ldrb	r3, [r4, #1]
    7300:	b2db      	uxtb	r3, r3
	uint8_t adc_index_0 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+8];
    7302:	b2ff      	uxtb	r7, r7
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    7304:	5cd6      	ldrb	r6, [r2, r3]
	grid_module_bu16_revb_mux++;
    7306:	7863      	ldrb	r3, [r4, #1]
    7308:	3301      	adds	r3, #1
    730a:	b2db      	uxtb	r3, r3
    730c:	7063      	strb	r3, [r4, #1]
	grid_module_bu16_revb_mux%=8;
    730e:	7863      	ldrb	r3, [r4, #1]
    7310:	f003 0307 	and.w	r3, r3, #7
    7314:	7063      	strb	r3, [r4, #1]
	gpio_set_pin_level(MUX_A, grid_module_bu16_revb_mux/1%2);
    7316:	7863      	ldrb	r3, [r4, #1]
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    7318:	f013 0f01 	tst.w	r3, #1
	uint8_t adc_index_1 = grid_module_bu16_revb_mux_lookup[grid_module_bu16_revb_mux+0];
    731c:	b2f6      	uxtb	r6, r6
    731e:	4b91      	ldr	r3, [pc, #580]	; (7564 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    7320:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    7324:	d141      	bne.n	73aa <grid_module_bu16_revb_hardware_transfer_complete_cb+0xee>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7326:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    732a:	e040      	b.n	73ae <grid_module_bu16_revb_hardware_transfer_complete_cb+0xf2>
		grid_sys_state.bank_active_changed = 0;
    732c:	f04f 0900 	mov.w	r9, #0
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7330:	fa0f fa83 	sxth.w	sl, r3
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7334:	f8df 823c 	ldr.w	r8, [pc, #572]	; 7574 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>
		grid_sys_state.bank_active_changed = 0;
    7338:	f885 9011 	strb.w	r9, [r5, #17]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    733c:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    7340:	eb04 1703 	add.w	r7, r4, r3, lsl #4
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7344:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7348:	7bea      	ldrb	r2, [r5, #15]
    734a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    734e:	fa5f f689 	uxtb.w	r6, r9
    7352:	7a5b      	ldrb	r3, [r3, #9]
    7354:	42b3      	cmp	r3, r6
    7356:	d9c9      	bls.n	72ec <grid_module_bu16_revb_hardware_transfer_complete_cb+0x30>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7358:	f8d8 2004 	ldr.w	r2, [r8, #4]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    735c:	f8df b220 	ldr.w	fp, [pc, #544]	; 7580 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c4>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7360:	4452      	add	r2, sl
    7362:	2364      	movs	r3, #100	; 0x64
    7364:	68d2      	ldr	r2, [r2, #12]
    7366:	4373      	muls	r3, r6
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    7368:	19b9      	adds	r1, r7, r6
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    736a:	441a      	add	r2, r3
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    736c:	7888      	ldrb	r0, [r1, #2]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_bu16_helper_template_b_tgl3[bank][i];
    736e:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_bu16_helper_template_b_tgl2[bank][i];
    7372:	6190      	str	r0, [r2, #24]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_bu16_helper_template_b_tgl3[bank][i];
    7374:	61d1      	str	r1, [r2, #28]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7376:	f8d8 2004 	ldr.w	r2, [r8, #4]
    737a:	7be9      	ldrb	r1, [r5, #15]
    737c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7380:	4640      	mov	r0, r8
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7382:	68d2      	ldr	r2, [r2, #12]
    7384:	4413      	add	r3, r2
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7386:	4632      	mov	r2, r6
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7388:	60de      	str	r6, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    738a:	7be9      	ldrb	r1, [r5, #15]
    738c:	2300      	movs	r3, #0
    738e:	47d8      	blx	fp
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    7390:	7be9      	ldrb	r1, [r5, #15]
    7392:	2304      	movs	r3, #4
    7394:	4632      	mov	r2, r6
    7396:	4640      	mov	r0, r8
    7398:	47d8      	blx	fp
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    739a:	7be9      	ldrb	r1, [r5, #15]
    739c:	2305      	movs	r3, #5
    739e:	4632      	mov	r2, r6
    73a0:	4640      	mov	r0, r8
    73a2:	47d8      	blx	fp
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    73a4:	f109 0901 	add.w	r9, r9, #1
    73a8:	e7cc      	b.n	7344 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x88>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    73aa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_bu16_revb_mux/2%2);
    73ae:	7863      	ldrb	r3, [r4, #1]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    73b0:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 7584 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c8>
    73b4:	486c      	ldr	r0, [pc, #432]	; (7568 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2ac>)
    73b6:	f013 0f02 	tst.w	r3, #2
    73ba:	4b6a      	ldr	r3, [pc, #424]	; (7564 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    73bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    73c0:	bf14      	ite	ne
    73c2:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73c6:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_bu16_revb_mux/4%2);
    73ca:	7863      	ldrb	r3, [r4, #1]
    73cc:	f013 0f04 	tst.w	r3, #4
    73d0:	4b64      	ldr	r3, [pc, #400]	; (7564 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2a8>)
    73d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    73d6:	bf14      	ite	ne
    73d8:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    73dc:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    73e0:	2100      	movs	r1, #0
    73e2:	2302      	movs	r3, #2
    73e4:	aa05      	add	r2, sp, #20
    73e6:	47c0      	blx	r8
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    73e8:	2302      	movs	r3, #2
    73ea:	f10d 0216 	add.w	r2, sp, #22
    73ee:	485f      	ldr	r0, [pc, #380]	; (756c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b0>)
    73f0:	2100      	movs	r1, #0
    73f2:	47c0      	blx	r8
	uint8_t result_value[2] = {0};
    73f4:	2300      	movs	r3, #0
    73f6:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t result_valid[2] = {0};
    73fa:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (adcresult_0>60000){
    73fe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	result_index[0] = adc_index_0;
    7402:	f88d 7008 	strb.w	r7, [sp, #8]
	if (adcresult_0>60000){
    7406:	f64e 2260 	movw	r2, #60000	; 0xea60
    740a:	4293      	cmp	r3, r2
	result_index[1] = adc_index_1;
    740c:	f88d 6009 	strb.w	r6, [sp, #9]
	if (adcresult_0>60000){
    7410:	d978      	bls.n	7504 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x248>
		result_valid[0] = 1;
    7412:	2301      	movs	r3, #1
    7414:	f88d 3010 	strb.w	r3, [sp, #16]
	if (adcresult_1>60000){
    7418:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    741c:	f64e 2260 	movw	r2, #60000	; 0xea60
    7420:	4293      	cmp	r3, r2
    7422:	d975      	bls.n	7510 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x254>
		result_value[1] = 0;
    7424:	2300      	movs	r3, #0
		result_value[1] = 127;
    7426:	f88d 300d 	strb.w	r3, [sp, #13]
		result_valid[1] = 1;
    742a:	2301      	movs	r3, #1
    742c:	f88d 3011 	strb.w	r3, [sp, #17]
	uint8_t grid_module_bu16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};	
    7430:	4b4f      	ldr	r3, [pc, #316]	; (7570 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b4>)
    7432:	ae06      	add	r6, sp, #24
    7434:	f103 0710 	add.w	r7, r3, #16
    7438:	6818      	ldr	r0, [r3, #0]
    743a:	6859      	ldr	r1, [r3, #4]
    743c:	4632      	mov	r2, r6
    743e:	c203      	stmia	r2!, {r0, r1}
    7440:	3308      	adds	r3, #8
    7442:	42bb      	cmp	r3, r7
    7444:	4616      	mov	r6, r2
    7446:	d1f7      	bne.n	7438 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x17c>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    7448:	484a      	ldr	r0, [pc, #296]	; (7574 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>)
	uint8_t grid_module_bu16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};	
    744a:	2300      	movs	r3, #0
    744c:	f10d 0908 	add.w	r9, sp, #8
    7450:	f10d 0b0c 	add.w	fp, sp, #12
    7454:	9301      	str	r3, [sp, #4]
    7456:	4682      	mov	sl, r0
		uint8_t res_index = result_index[i];
    7458:	f819 6b01 	ldrb.w	r6, [r9], #1
		uint8_t res_value = result_value[i];
    745c:	f81b 8b01 	ldrb.w	r8, [fp], #1
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    7460:	6843      	ldr	r3, [r0, #4]
    7462:	7bea      	ldrb	r2, [r5, #15]
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    7464:	19a1      	adds	r1, r4, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    7466:	b2d2      	uxtb	r2, r2
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    7468:	f891 c082 	ldrb.w	ip, [r1, #130]	; 0x82
    746c:	45e0      	cmp	r8, ip
    746e:	d042      	beq.n	74f6 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23a>
    7470:	9f01      	ldr	r7, [sp, #4]
		uint8_t res_valid = result_valid[i];
    7472:	a904      	add	r1, sp, #16
		if (res_value != grid_bu16_helper_template_b_abs[res_index] && res_valid == 1){
    7474:	5c79      	ldrb	r1, [r7, r1]
    7476:	2901      	cmp	r1, #1
    7478:	d13d      	bne.n	74f6 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x23a>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;		
    747a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    747e:	2164      	movs	r1, #100	; 0x64
    7480:	68db      	ldr	r3, [r3, #12]
    7482:	fb16 f101 	smulbb	r1, r6, r1
    7486:	440b      	add	r3, r1
			if (grid_bu16_helper_template_b_abs[res_index] == 0){ // Button Press Event
    7488:	f1bc 0f00 	cmp.w	ip, #0
    748c:	d14d      	bne.n	752a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x26e>
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    748e:	699a      	ldr	r2, [r3, #24]
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    7490:	f8d3 e01c 	ldr.w	lr, [r3, #28]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    7494:	2a00      	cmp	r2, #0
    7496:	bf0c      	ite	eq
    7498:	227f      	moveq	r2, #127	; 0x7f
    749a:	2200      	movne	r2, #0
    749c:	619a      	str	r2, [r3, #24]
				if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    749e:	f1be 0f00 	cmp.w	lr, #0
    74a2:	d13c      	bne.n	751e <grid_module_bu16_revb_hardware_transfer_complete_cb+0x262>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    74a4:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 0;
    74a8:	f8c3 c01c 	str.w	ip, [r3, #28]
				grid_bu16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    74ac:	f895 c00f 	ldrb.w	ip, [r5, #15]
    74b0:	9f01      	ldr	r7, [sp, #4]
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    74b2:	69db      	ldr	r3, [r3, #28]
				grid_bu16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    74b4:	eb04 1c0c 	add.w	ip, r4, ip, lsl #4
    74b8:	44bc      	add	ip, r7
    74ba:	f88c 2002 	strb.w	r2, [ip, #2]
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    74be:	7bea      	ldrb	r2, [r5, #15]
    74c0:	eb04 1202 	add.w	r2, r4, r2, lsl #4
    74c4:	443a      	add	r2, r7
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    74c6:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
				grid_bu16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    74ca:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
    74ce:	2300      	movs	r3, #0
                    template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    74d0:	f8da 2004 	ldr.w	r2, [sl, #4]
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    74d4:	441a      	add	r2, r3
    74d6:	3310      	adds	r3, #16
    74d8:	68d2      	ldr	r2, [r2, #12]
    74da:	440a      	add	r2, r1
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    74dc:	2b40      	cmp	r3, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    74de:	f8c2 c014 	str.w	ip, [r2, #20]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    74e2:	d1f5      	bne.n	74d0 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x214>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DP);
    74e4:	7be9      	ldrb	r1, [r5, #15]
    74e6:	2304      	movs	r3, #4
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    74e8:	4632      	mov	r2, r6
    74ea:	4f23      	ldr	r7, [pc, #140]	; (7578 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2bc>)
				grid_bu16_helper_template_b_abs[result_index[i]] = res_value;
    74ec:	4426      	add	r6, r4
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    74ee:	47b8      	blx	r7
				grid_bu16_helper_template_b_abs[result_index[i]] = res_value;
    74f0:	4820      	ldr	r0, [pc, #128]	; (7574 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2b8>)
    74f2:	f886 8082 	strb.w	r8, [r6, #130]	; 0x82
	for (uint8_t i=0; i<2; i++)
    74f6:	9b01      	ldr	r3, [sp, #4]
    74f8:	b173      	cbz	r3, 7518 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x25c>
	grid_module_bu16_revb_hardware_transfer_complete = 0;
    74fa:	2300      	movs	r3, #0
    74fc:	7023      	strb	r3, [r4, #0]
	grid_module_bu16_revb_hardware_start_transfer();
    74fe:	4b1f      	ldr	r3, [pc, #124]	; (757c <grid_module_bu16_revb_hardware_transfer_complete_cb+0x2c0>)
    7500:	4798      	blx	r3
    7502:	e6e6      	b.n	72d2 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x16>
	else if (adcresult_0<200){
    7504:	2bc7      	cmp	r3, #199	; 0xc7
    7506:	d887      	bhi.n	7418 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x15c>
		result_value[0] = 127;
    7508:	237f      	movs	r3, #127	; 0x7f
    750a:	f88d 300c 	strb.w	r3, [sp, #12]
    750e:	e780      	b.n	7412 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x156>
	else if (adcresult_1<200){
    7510:	2bc7      	cmp	r3, #199	; 0xc7
    7512:	d88d      	bhi.n	7430 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x174>
		result_value[1] = 127;
    7514:	237f      	movs	r3, #127	; 0x7f
    7516:	e786      	b.n	7426 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x16a>
    7518:	2301      	movs	r3, #1
    751a:	9301      	str	r3, [sp, #4]
    751c:	e79c      	b.n	7458 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x19c>
				else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    751e:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7522:	bf08      	it	eq
    7524:	f04f 0c7f 	moveq.w	ip, #127	; 0x7f
    7528:	e7be      	b.n	74a8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x1ec>
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    752a:	aa0a      	add	r2, sp, #40	; 0x28
    752c:	4432      	add	r2, r6
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    752e:	60de      	str	r6, [r3, #12]
				template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_bu16_mux_reversed_lookup[res_index];
    7530:	f812 2c10 	ldrb.w	r2, [r2, #-16]
    7534:	611a      	str	r2, [r3, #16]
    7536:	2300      	movs	r3, #0
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7538:	469c      	mov	ip, r3
                    template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    753a:	f8da 2004 	ldr.w	r2, [sl, #4]
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    753e:	441a      	add	r2, r3
    7540:	3310      	adds	r3, #16
    7542:	68d2      	ldr	r2, [r2, #12]
    7544:	440a      	add	r2, r1
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7546:	2b40      	cmp	r3, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7548:	f8c2 c014 	str.w	ip, [r2, #20]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    754c:	d1f5      	bne.n	753a <grid_module_bu16_revb_hardware_transfer_complete_cb+0x27e>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    754e:	7be9      	ldrb	r1, [r5, #15]
    7550:	2305      	movs	r3, #5
    7552:	e7c9      	b.n	74e8 <grid_module_bu16_revb_hardware_transfer_complete_cb+0x22c>
    7554:	200005fc 	.word	0x200005fc
    7558:	000096a3 	.word	0x000096a3
    755c:	20006fa4 	.word	0x20006fa4
    7560:	20000308 	.word	0x20000308
    7564:	41008000 	.word	0x41008000
    7568:	20014be4 	.word	0x20014be4
    756c:	20014db8 	.word	0x20014db8
    7570:	00015822 	.word	0x00015822
    7574:	20006f98 	.word	0x20006f98
    7578:	0000aabd 	.word	0x0000aabd
    757c:	0000729d 	.word	0x0000729d
    7580:	0000af09 	.word	0x0000af09
    7584:	0000d911 	.word	0x0000d911

00007588 <grid_module_bu16_revb_hardware_init>:

void grid_module_bu16_revb_hardware_init(void){
    7588:	b570      	push	{r4, r5, r6, lr}
	

	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    758a:	4c0b      	ldr	r4, [pc, #44]	; (75b8 <grid_module_bu16_revb_hardware_init+0x30>)
    758c:	4e0b      	ldr	r6, [pc, #44]	; (75bc <grid_module_bu16_revb_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    758e:	4d0c      	ldr	r5, [pc, #48]	; (75c0 <grid_module_bu16_revb_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    7590:	4b0c      	ldr	r3, [pc, #48]	; (75c4 <grid_module_bu16_revb_hardware_init+0x3c>)
    7592:	2200      	movs	r2, #0
    7594:	4611      	mov	r1, r2
    7596:	4620      	mov	r0, r4
    7598:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_bu16_revb_hardware_transfer_complete_cb);
    759a:	2200      	movs	r2, #0
    759c:	4b09      	ldr	r3, [pc, #36]	; (75c4 <grid_module_bu16_revb_hardware_init+0x3c>)
    759e:	4611      	mov	r1, r2
    75a0:	4628      	mov	r0, r5
    75a2:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    75a4:	4620      	mov	r0, r4
    75a6:	4c08      	ldr	r4, [pc, #32]	; (75c8 <grid_module_bu16_revb_hardware_init+0x40>)
    75a8:	2100      	movs	r1, #0
    75aa:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    75ac:	4628      	mov	r0, r5
    75ae:	4623      	mov	r3, r4
    75b0:	2100      	movs	r1, #0

}
    75b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    75b6:	4718      	bx	r3
    75b8:	20014be4 	.word	0x20014be4
    75bc:	0000d899 	.word	0x0000d899
    75c0:	20014db8 	.word	0x20014db8
    75c4:	000072bd 	.word	0x000072bd
    75c8:	0000d859 	.word	0x0000d859

000075cc <grid_module_bu16_revb_init>:



void grid_module_bu16_revb_init(){
    75cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	grid_led_lowlevel_init(&grid_led_state, 16);
    75d0:	4b12      	ldr	r3, [pc, #72]	; (761c <grid_module_bu16_revb_init+0x50>)
    75d2:	4813      	ldr	r0, [pc, #76]	; (7620 <grid_module_bu16_revb_init+0x54>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
	
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
		
		grid_ui_bank_init(&grid_ui_state, i, 16);
    75d4:	4e13      	ldr	r6, [pc, #76]	; (7624 <grid_module_bu16_revb_init+0x58>)
    75d6:	4f14      	ldr	r7, [pc, #80]	; (7628 <grid_module_bu16_revb_init+0x5c>)
		
		for (uint8_t j=0; j<16; j++){

			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    75d8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 7638 <grid_module_bu16_revb_init+0x6c>
	grid_led_lowlevel_init(&grid_led_state, 16);
    75dc:	2110      	movs	r1, #16
    75de:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    75e0:	4810      	ldr	r0, [pc, #64]	; (7624 <grid_module_bu16_revb_init+0x58>)
    75e2:	4b12      	ldr	r3, [pc, #72]	; (762c <grid_module_bu16_revb_init+0x60>)
    75e4:	2104      	movs	r1, #4
    75e6:	4798      	blx	r3
    75e8:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);
    75ea:	2210      	movs	r2, #16
    75ec:	b2e1      	uxtb	r1, r4
    75ee:	4630      	mov	r0, r6
    75f0:	47b8      	blx	r7
		for (uint8_t j=0; j<16; j++){
    75f2:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);
    75f6:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    75f8:	6870      	ldr	r0, [r6, #4]
    75fa:	b2e9      	uxtb	r1, r5
    75fc:	2202      	movs	r2, #2
    75fe:	4448      	add	r0, r9
    7600:	3501      	adds	r5, #1
    7602:	47c0      	blx	r8
		for (uint8_t j=0; j<16; j++){
    7604:	2d10      	cmp	r5, #16
    7606:	d1f7      	bne.n	75f8 <grid_module_bu16_revb_init+0x2c>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    7608:	3401      	adds	r4, #1
    760a:	2c04      	cmp	r4, #4
    760c:	d1ed      	bne.n	75ea <grid_module_bu16_revb_init+0x1e>

		}		
		
	}
				
	grid_module_bu16_revb_hardware_init();
    760e:	4b08      	ldr	r3, [pc, #32]	; (7630 <grid_module_bu16_revb_init+0x64>)
    7610:	4798      	blx	r3
	grid_module_bu16_revb_hardware_start_transfer();

};
    7612:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_bu16_revb_hardware_start_transfer();
    7616:	4b07      	ldr	r3, [pc, #28]	; (7634 <grid_module_bu16_revb_init+0x68>)
    7618:	4718      	bx	r3
    761a:	bf00      	nop
    761c:	00006e95 	.word	0x00006e95
    7620:	200146a0 	.word	0x200146a0
    7624:	20006f98 	.word	0x20006f98
    7628:	00009a3d 	.word	0x00009a3d
    762c:	00009a09 	.word	0x00009a09
    7630:	00007589 	.word	0x00007589
    7634:	0000729d 	.word	0x0000729d
    7638:	0000adf5 	.word	0x0000adf5

0000763c <grid_module_en16_reva_hardware_start_transfer>:





void grid_module_en16_reva_hardware_start_transfer(void){
    763c:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    763e:	4b08      	ldr	r3, [pc, #32]	; (7660 <grid_module_en16_reva_hardware_start_transfer+0x24>)
	

	gpio_set_pin_level(PIN_UI_SPI_CS0, true);

	spi_m_async_enable(&UI_SPI);
    7640:	4808      	ldr	r0, [pc, #32]	; (7664 <grid_module_en16_reva_hardware_start_transfer+0x28>)

	//io_write(io, UI_SPI_TX_BUFFER, 8);
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    7642:	4c09      	ldr	r4, [pc, #36]	; (7668 <grid_module_en16_reva_hardware_start_transfer+0x2c>)
    7644:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7648:	619a      	str	r2, [r3, #24]
	spi_m_async_enable(&UI_SPI);
    764a:	4b08      	ldr	r3, [pc, #32]	; (766c <grid_module_en16_reva_hardware_start_transfer+0x30>)
    764c:	4798      	blx	r3
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    764e:	4a08      	ldr	r2, [pc, #32]	; (7670 <grid_module_en16_reva_hardware_start_transfer+0x34>)
    7650:	4804      	ldr	r0, [pc, #16]	; (7664 <grid_module_en16_reva_hardware_start_transfer+0x28>)
    7652:	46a4      	mov	ip, r4
    7654:	2308      	movs	r3, #8

}
    7656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_async_transfer(&UI_SPI, UI_SPI_TX_BUFFER, UI_SPI_RX_BUFFER, 8);
    765a:	f102 010e 	add.w	r1, r2, #14
    765e:	4760      	bx	ip
    7660:	41008000 	.word	0x41008000
    7664:	20014ad0 	.word	0x20014ad0
    7668:	0000e595 	.word	0x0000e595
    766c:	0000e4f5 	.word	0x0000e4f5
    7670:	2000068e 	.word	0x2000068e

00007674 <grid_module_en16_reva_hardware_transfer_complete_cb>:

void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    7674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7678:	4ba8      	ldr	r3, [pc, #672]	; (791c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2a8>)
	
	// Set the shift registers to continuously load data until new transaction is issued
	gpio_set_pin_level(PIN_UI_SPI_CS0, false);


	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    767a:	48a9      	ldr	r0, [pc, #676]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
	if (bank == 255){
		bank=0;
	}


	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    767c:	4fa8      	ldr	r7, [pc, #672]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    767e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7682:	615a      	str	r2, [r3, #20]
void grid_module_en16_reva_hardware_transfer_complete_cb(void){
    7684:	b089      	sub	sp, #36	; 0x24
	uint8_t bank = grid_sys_get_bank_num(&grid_sys_state);
    7686:	4ba7      	ldr	r3, [pc, #668]	; (7924 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b0>)
    7688:	4798      	blx	r3
	uint8_t bank_changed = grid_sys_state.bank_active_changed;
    768a:	7c7b      	ldrb	r3, [r7, #17]
		bank=0;
    768c:	28ff      	cmp	r0, #255	; 0xff
    768e:	bf14      	ite	ne
    7690:	4606      	movne	r6, r0
    7692:	2600      	moveq	r6, #0
		
	if (bank_changed){
    7694:	2b00      	cmp	r3, #0
    7696:	f040 815f 	bne.w	7958 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e4>
		

		uint8_t i = UI_ENCODER_LOOKUP[j];
		

		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    769a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 7954 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2e0>
				uint8_t controlnumber = i;
 
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER] = res_index;
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 

				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    769e:	0133      	lsls	r3, r6, #4
    76a0:	9302      	str	r3, [sp, #8]
    76a2:	eb08 1306 	add.w	r3, r8, r6, lsl #4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    76a6:	f04f 0b00 	mov.w	fp, #0
				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    76aa:	9303      	str	r3, [sp, #12]
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    76ac:	f3cb 0346 	ubfx	r3, fp, #1, #7
    76b0:	f00b 0201 	and.w	r2, fp, #1
    76b4:	f818 3003 	ldrb.w	r3, [r8, r3]
    76b8:	0092      	lsls	r2, r2, #2
    76ba:	4113      	asrs	r3, r2
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    76bc:	eb08 020b 	add.w	r2, r8, fp
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    76c0:	b2de      	uxtb	r6, r3
		uint8_t old_value = UI_SPI_RX_BUFFER_LAST[j];
    76c2:	f892 015c 	ldrb.w	r0, [r2, #348]	; 0x15c
		uint8_t new_value = (UI_SPI_RX_BUFFER[j/2]>>(4*(j%2)))&0x0F;
    76c6:	f003 030f 	and.w	r3, r3, #15
		if (old_value != new_value){
    76ca:	4283      	cmp	r3, r0
    76cc:	fa5f f18b 	uxtb.w	r1, fp
    76d0:	f000 8115 	beq.w	78fe <grid_module_en16_reva_hardware_transfer_complete_cb+0x28a>
		uint8_t i = UI_ENCODER_LOOKUP[j];
    76d4:	4894      	ldr	r0, [pc, #592]	; (7928 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b4>)
            UI_SPI_RX_BUFFER_LAST[j] = new_value;
    76d6:	f882 315c 	strb.w	r3, [r2, #348]	; 0x15c
			UI_SPI_DEBUG = j;
    76da:	4a94      	ldr	r2, [pc, #592]	; (792c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2b8>)
		uint8_t i = UI_ENCODER_LOOKUP[j];
    76dc:	f81b 4000 	ldrb.w	r4, [fp, r0]
			UI_SPI_DEBUG = j;
    76e0:	7011      	strb	r1, [r2, #0]
			if (button_value != grid_ui_encoder_array[i].button_value){
    76e2:	4d93      	ldr	r5, [pc, #588]	; (7930 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2bc>)
			uint8_t button_value = (new_value&0b00000100)?1:0;
    76e4:	f3c3 0280 	ubfx	r2, r3, #2, #1
    76e8:	9201      	str	r2, [sp, #4]
            uint8_t phase_a      = (new_value&0b00000010)?1:0;
    76ea:	f3c3 0240 	ubfx	r2, r3, #1, #1
    76ee:	9200      	str	r2, [sp, #0]
			if (button_value != grid_ui_encoder_array[i].button_value){
    76f0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
    76f4:	9801      	ldr	r0, [sp, #4]
    76f6:	7851      	ldrb	r1, [r2, #1]
    76f8:	4281      	cmp	r1, r0
			uint8_t phase_b      = (new_value&0b00000001)?1:0;
    76fa:	f006 0601 	and.w	r6, r6, #1
			if (button_value != grid_ui_encoder_array[i].button_value){
    76fe:	ea4f 1704 	mov.w	r7, r4, lsl #4
    7702:	d04d      	beq.n	77a0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x12c>
				grid_ui_encoder_array[i].button_changed = 1;
    7704:	2101      	movs	r1, #1
				grid_ui_encoder_array[i].button_value = new_value>>2;
    7706:	089b      	lsrs	r3, r3, #2
				grid_ui_encoder_array[i].button_changed = 1;
    7708:	7091      	strb	r1, [r2, #2]
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    770a:	f8df a214 	ldr.w	sl, [pc, #532]	; 7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>
				grid_ui_encoder_array[i].button_value = new_value>>2;
    770e:	7053      	strb	r3, [r2, #1]
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    7710:	4a88      	ldr	r2, [pc, #544]	; (7934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7712:	f8df c230 	ldr.w	ip, [pc, #560]	; 7944 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    7716:	6852      	ldr	r2, [r2, #4]
    7718:	f89a 100f 	ldrb.w	r1, [sl, #15]
    771c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    7720:	2164      	movs	r1, #100	; 0x64
    7722:	68d2      	ldr	r2, [r2, #12]
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7724:	f10d 0910 	add.w	r9, sp, #16
				uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;						
    7728:	fb04 2201 	mla	r2, r4, r1, r2
				uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    772c:	f8dc 1004 	ldr.w	r1, [ip, #4]
    7730:	f8dc 0000 	ldr.w	r0, [ip]
    7734:	46ce      	mov	lr, r9
    7736:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    773a:	497f      	ldr	r1, [pc, #508]	; (7938 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    773c:	f10c 0c08 	add.w	ip, ip, #8
    7740:	458c      	cmp	ip, r1
    7742:	46f1      	mov	r9, lr
    7744:	d1f2      	bne.n	772c <grid_module_en16_reva_hardware_transfer_complete_cb+0xb8>
				if (grid_ui_encoder_array[i].button_value == 0){ // Button Press Event
    7746:	a908      	add	r1, sp, #32
    7748:	4421      	add	r1, r4
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    774a:	60d4      	str	r4, [r2, #12]
				if (grid_ui_encoder_array[i].button_value == 0){ // Button Press Event
    774c:	2b00      	cmp	r3, #0
    774e:	f040 8152 	bne.w	79f6 <grid_module_en16_reva_hardware_transfer_complete_cb+0x382>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    7752:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    7756:	6111      	str	r1, [r2, #16]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    7758:	6991      	ldr	r1, [r2, #24]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;
    775a:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    775e:	2900      	cmp	r1, #0
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    7760:	69d1      	ldr	r1, [r2, #28]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;
    7762:	f8c2 c014 	str.w	ip, [r2, #20]
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    7766:	bf0c      	ite	eq
    7768:	4660      	moveq	r0, ip
    776a:	2000      	movne	r0, #0
    776c:	6190      	str	r0, [r2, #24]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    776e:	2900      	cmp	r1, #0
    7770:	f040 813d 	bne.w	79ee <grid_module_en16_reva_hardware_transfer_complete_cb+0x37a>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    7774:	233f      	movs	r3, #63	; 0x3f
					grid_en16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    7776:	496a      	ldr	r1, [pc, #424]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7778:	61d3      	str	r3, [r2, #28]
					grid_en16_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    777a:	7bcb      	ldrb	r3, [r1, #15]
    777c:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    7780:	4423      	add	r3, r4
    7782:	7718      	strb	r0, [r3, #28]
					grid_en16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    7784:	7bcb      	ldrb	r3, [r1, #15]
    7786:	69d2      	ldr	r2, [r2, #28]
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    7788:	7bc9      	ldrb	r1, [r1, #15]
					grid_en16_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    778a:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    778e:	4423      	add	r3, r4
    7790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    7794:	2304      	movs	r3, #4
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    7796:	4867      	ldr	r0, [pc, #412]	; (7934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    7798:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 7948 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>
    779c:	4622      	mov	r2, r4
    779e:	47c8      	blx	r9
            if (a_now == 1 && b_now == 1){ //detent found
    77a0:	9b00      	ldr	r3, [sp, #0]
    77a2:	2b00      	cmp	r3, #0
    77a4:	f000 8155 	beq.w	7a52 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3de>
    77a8:	2e00      	cmp	r6, #0
    77aa:	f000 8155 	beq.w	7a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
			uint8_t b_prev = grid_ui_encoder_array[i].phase_b_previous;
    77ae:	19eb      	adds	r3, r5, r7
                if (b_prev == 0 && grid_ui_encoder_array[i].phase_change_lock == 0){
    77b0:	7b9a      	ldrb	r2, [r3, #14]
    77b2:	2a00      	cmp	r2, #0
    77b4:	f040 8128 	bne.w	7a08 <grid_module_en16_reva_hardware_transfer_complete_cb+0x394>
    77b8:	7bd9      	ldrb	r1, [r3, #15]
    77ba:	2900      	cmp	r1, #0
    77bc:	f040 814c 	bne.w	7a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
                    grid_ui_encoder_array[i].phase_change_lock = 1;
    77c0:	2201      	movs	r2, #1
    77c2:	73da      	strb	r2, [r3, #15]
                    delta = -1;
    77c4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			grid_ui_encoder_array[i].phase_a_previous = a_now;
    77c8:	442f      	add	r7, r5
    77ca:	9b00      	ldr	r3, [sp, #0]
    77cc:	737b      	strb	r3, [r7, #13]
			grid_ui_encoder_array[i].phase_b_previous = b_now;
    77ce:	73be      	strb	r6, [r7, #14]
			if (delta != 0){
    77d0:	f1b9 0f00 	cmp.w	r9, #0
    77d4:	f000 8093 	beq.w	78fe <grid_module_en16_reva_hardware_transfer_complete_cb+0x28a>
				uint32_t elapsed_time = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_ui_encoder_array[i].last_real_time);
    77d8:	68b9      	ldr	r1, [r7, #8]
    77da:	4851      	ldr	r0, [pc, #324]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    77dc:	4b57      	ldr	r3, [pc, #348]	; (793c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c8>)
    77de:	4798      	blx	r3
				if (elapsed_ms>25){
    77e0:	f5b0 7fd0 	cmp.w	r0, #416	; 0x1a0
    77e4:	f080 811b 	bcs.w	7a1e <grid_module_en16_reva_hardware_transfer_complete_cb+0x3aa>
                uint32_t elapsed_ms = elapsed_time/RTC1MS;
    77e8:	0900      	lsrs	r0, r0, #4
    77ea:	2801      	cmp	r0, #1
    77ec:	bf38      	it	cc
    77ee:	2001      	movcc	r0, #1
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    77f0:	4e4b      	ldr	r6, [pc, #300]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    77f2:	4b53      	ldr	r3, [pc, #332]	; (7940 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2cc>)
				uint8_t velocityfactor = (25*25-elapsed_ms*elapsed_ms)/150 + 1;
    77f4:	f240 2771 	movw	r7, #625	; 0x271
    77f8:	fb00 7010 	mls	r0, r0, r0, r7
    77fc:	2796      	movs	r7, #150	; 0x96
    77fe:	fbb0 f7f7 	udiv	r7, r0, r7
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    7802:	4630      	mov	r0, r6
    7804:	4798      	blx	r3
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7806:	4a4b      	ldr	r2, [pc, #300]	; (7934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    7808:	6852      	ldr	r2, [r2, #4]
    780a:	7bf1      	ldrb	r1, [r6, #15]
                uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    780c:	4e4d      	ldr	r6, [pc, #308]	; (7944 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d0>)
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    780e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
				uint8_t velocityfactor = (25*25-elapsed_ms*elapsed_ms)/150 + 1;
    7812:	3701      	adds	r7, #1
    7814:	b2ff      	uxtb	r7, r7
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    7816:	eb05 1504 	add.w	r5, r5, r4, lsl #4
				delta_high = delta * (velocityfactor * 2 - 1);
    781a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    781e:	eb0a 0a47 	add.w	sl, sl, r7, lsl #1
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7822:	68d2      	ldr	r2, [r2, #12]
				grid_ui_encoder_array[i].last_real_time = grid_sys_rtc_get_time(&grid_sys_state);
    7824:	60a8      	str	r0, [r5, #8]
				delta_high = delta * (velocityfactor * 2 - 1);
    7826:	fb0a fa09 	mul.w	sl, sl, r9
				delta_low =  delta * velocityfactor;			
    782a:	fb07 f509 	mul.w	r5, r7, r9
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    782e:	2164      	movs	r1, #100	; 0x64
				delta_low =  delta * velocityfactor;			
    7830:	b2ab      	uxth	r3, r5
				delta_high = delta * (velocityfactor * 2 - 1);
    7832:	fa1f f78a 	uxth.w	r7, sl
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7836:	fb04 2201 	mla	r2, r4, r1, r2
                uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    783a:	f10d 0e10 	add.w	lr, sp, #16
    783e:	6871      	ldr	r1, [r6, #4]
    7840:	6830      	ldr	r0, [r6, #0]
    7842:	46f4      	mov	ip, lr
    7844:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    7848:	493b      	ldr	r1, [pc, #236]	; (7938 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c4>)
    784a:	3608      	adds	r6, #8
    784c:	428e      	cmp	r6, r1
    784e:	46e6      	mov	lr, ip
    7850:	d1f5      	bne.n	783e <grid_module_en16_reva_hardware_transfer_complete_cb+0x1ca>
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 
    7852:	a908      	add	r1, sp, #32
    7854:	4421      	add	r1, r4
                uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7856:	6214      	str	r4, [r2, #32]
                template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index]; 
    7858:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    785c:	6251      	str	r1, [r2, #36]	; 0x24
				uint8_t new_abs_no_velocity_value = grid_en16_helper_template_e_abs[bank][i];
    785e:	9903      	ldr	r1, [sp, #12]
    7860:	4421      	add	r1, r4
    7862:	f891 c09c 	ldrb.w	ip, [r1, #156]	; 0x9c
				uint8_t new_abs_low_velocity_value = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    7866:	f891 60dc 	ldrb.w	r6, [r1, #220]	; 0xdc
				uint8_t new_abs_high_velocity_value = grid_en16_helper_template_e_abs_high_velocity[bank][i];
    786a:	f891 011c 	ldrb.w	r0, [r1, #284]	; 0x11c
                
				uint8_t new_rel_no_velocity_value =  template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL];
    786e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
				
				if (delta != 0){
                    
                    
                    // ABSOLUTE NO VELOCITY						
					if (new_abs_no_velocity_value + delta < 0){
    7872:	44cc      	add	ip, r9
    7874:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
    7878:	f000 80d3 	beq.w	7a22 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ae>
						new_abs_no_velocity_value = 0;
					}
					else if (new_abs_no_velocity_value + delta > 127){
    787c:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    7880:	f300 80d2 	bgt.w	7a28 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3b4>
						new_abs_no_velocity_value = 127;
					}
					else{
						new_abs_no_velocity_value += delta;
    7884:	fa5f fc8c 	uxtb.w	ip, ip
					}	
                    
                    // ABSOLUTE LOW VELOCITY						
					if (new_abs_low_velocity_value + delta_low < 0){
    7888:	1975      	adds	r5, r6, r5
    788a:	b2db      	uxtb	r3, r3
    788c:	f100 80cf 	bmi.w	7a2e <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ba>
						new_abs_low_velocity_value = 0;
					}
					else if (new_abs_low_velocity_value + delta_low > 127){
    7890:	2d7f      	cmp	r5, #127	; 0x7f
    7892:	f300 80ce 	bgt.w	7a32 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3be>
						new_abs_low_velocity_value = 127;
					}
					else{
						new_abs_low_velocity_value += delta_low;
    7896:	441e      	add	r6, r3
    7898:	b2f6      	uxtb	r6, r6
					}	
  					
                    // ABSOLUTE HIGH VELOCITY						
					if (new_abs_high_velocity_value + delta_high < 0){
    789a:	eb10 0a0a 	adds.w	sl, r0, sl
    789e:	b2ff      	uxtb	r7, r7
    78a0:	f100 80c9 	bmi.w	7a36 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c2>
						new_abs_high_velocity_value = 0;
					}
					else if (new_abs_high_velocity_value + delta_high > 127){
    78a4:	f1ba 0f7f 	cmp.w	sl, #127	; 0x7f
    78a8:	f300 80c7 	bgt.w	7a3a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3c6>
						new_abs_high_velocity_value = 127;
					}
					else{
						new_abs_high_velocity_value += delta_high;
    78ac:	4438      	add	r0, r7
    78ae:	b2c0      	uxtb	r0, r0
					}	



                    // RELATIVE NO VELOCITY
					if (new_rel_no_velocity_value == 255){
    78b0:	29ff      	cmp	r1, #255	; 0xff
    78b2:	f040 80c4 	bne.w	7a3e <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ca>
						if (delta>0){
							new_rel_no_velocity_value = 65;
						}
						else{
							new_rel_no_velocity_value = 63;
    78b6:	f1b9 0f01 	cmp.w	r9, #1
					}
                    
                    // RELATIVE LOW VELOCITY
					if (new_rel_low_velocity_value == 255){
                        
                        new_rel_low_velocity_value = 64 + delta_low;
    78ba:	f103 0340 	add.w	r3, r3, #64	; 0x40
							new_rel_no_velocity_value = 63;
    78be:	bf0c      	ite	eq
    78c0:	2541      	moveq	r5, #65	; 0x41
    78c2:	253f      	movne	r5, #63	; 0x3f
                        new_rel_low_velocity_value = 64 + delta_low;
    78c4:	b2db      	uxtb	r3, r3
					}
                    
                    // RELATIVE HIGH VELOCITY
					if (new_rel_high_velocity_value == 255){
				
                        new_rel_high_velocity_value = 64 + delta_high;
    78c6:	3740      	adds	r7, #64	; 0x40
	
                    
                    
					
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL] = new_rel_no_velocity_value;
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_LOW] = new_rel_low_velocity_value;
    78c8:	e9c2 530d 	strd	r5, r3, [r2, #52]	; 0x34
                    
                    
                    
                    
                    
                    if (button_value == 1){
    78cc:	9b01      	ldr	r3, [sp, #4]
    78ce:	4914      	ldr	r1, [pc, #80]	; (7920 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2ac>)
    78d0:	4d1d      	ldr	r5, [pc, #116]	; (7948 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d4>)
						new_rel_high_velocity_value += delta_high;
    78d2:	b2ff      	uxtb	r7, r7
                    template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_HIGH] = new_rel_high_velocity_value;
    78d4:	63d7      	str	r7, [r2, #60]	; 0x3c
                    if (button_value == 1){
    78d6:	2b00      	cmp	r3, #0
    78d8:	f000 80b8 	beq.w	7a4c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3d8>
                        
                        // ABS is only updated if nonpush rotation event happened
                        grid_en16_helper_template_e_abs[bank][i] = new_abs_no_velocity_value;
    78dc:	9b02      	ldr	r3, [sp, #8]
                        
                        // ABS high velocity
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = new_abs_high_velocity_value;
                        
                        
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);				
    78de:	7bc9      	ldrb	r1, [r1, #15]
                        grid_en16_helper_template_e_abs[bank][i] = new_abs_no_velocity_value;
    78e0:	4443      	add	r3, r8
    78e2:	4423      	add	r3, r4
    78e4:	f883 c09c 	strb.w	ip, [r3, #156]	; 0x9c
                        grid_en16_helper_template_e_abs_low_velocity[bank][i] = new_abs_low_velocity_value;
    78e8:	f883 60dc 	strb.w	r6, [r3, #220]	; 0xdc
                        grid_en16_helper_template_e_abs_high_velocity[bank][i] = new_abs_high_velocity_value;
    78ec:	f883 011c 	strb.w	r0, [r3, #284]	; 0x11c
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = new_abs_low_velocity_value;
    78f0:	e9c2 c60a 	strd	ip, r6, [r2, #40]	; 0x28
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = new_abs_high_velocity_value;
    78f4:	6310      	str	r0, [r2, #48]	; 0x30
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);				
    78f6:	2301      	movs	r3, #1
                    }
                    else{
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_ENCPUSHROT);
    78f8:	480e      	ldr	r0, [pc, #56]	; (7934 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2c0>)
    78fa:	4622      	mov	r2, r4
    78fc:	47a8      	blx	r5
	for (uint8_t j=0; j<16; j++){
    78fe:	f10b 0b01 	add.w	fp, fp, #1
    7902:	f1bb 0f10 	cmp.w	fp, #16
    7906:	f47f aed1 	bne.w	76ac <grid_module_en16_reva_hardware_transfer_complete_cb+0x38>

			
	}
		

	grid_module_en16_reva_hardware_transfer_complete = 0;
    790a:	4b10      	ldr	r3, [pc, #64]	; (794c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2d8>)
    790c:	2200      	movs	r2, #0
    790e:	701a      	strb	r2, [r3, #0]
	grid_module_en16_reva_hardware_start_transfer();
    7910:	4b0f      	ldr	r3, [pc, #60]	; (7950 <grid_module_en16_reva_hardware_transfer_complete_cb+0x2dc>)
}
    7912:	b009      	add	sp, #36	; 0x24
    7914:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	grid_module_en16_reva_hardware_start_transfer();
    7918:	4718      	bx	r3
    791a:	bf00      	nop
    791c:	41008000 	.word	0x41008000
    7920:	20006fa4 	.word	0x20006fa4
    7924:	000096a3 	.word	0x000096a3
    7928:	20000318 	.word	0x20000318
    792c:	20004039 	.word	0x20004039
    7930:	200115d8 	.word	0x200115d8
    7934:	20006f98 	.word	0x20006f98
    7938:	00015842 	.word	0x00015842
    793c:	00009745 	.word	0x00009745
    7940:	00009741 	.word	0x00009741
    7944:	00015832 	.word	0x00015832
    7948:	0000aabd 	.word	0x0000aabd
    794c:	200146bc 	.word	0x200146bc
    7950:	0000763d 	.word	0x0000763d
    7954:	2000068e 	.word	0x2000068e
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7958:	b233      	sxth	r3, r6
		grid_sys_state.bank_active_changed = 0;
    795a:	2400      	movs	r4, #0
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    795c:	ea4f 1b03 	mov.w	fp, r3, lsl #4
    7960:	f8df 8108 	ldr.w	r8, [pc, #264]	; 7a6c <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f8>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_en16_helper_template_b_tgl2[bank][i];
    7964:	f8df a108 	ldr.w	sl, [pc, #264]	; 7a70 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3fc>
		grid_sys_state.bank_active_changed = 0;
    7968:	747c      	strb	r4, [r7, #17]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    796a:	465d      	mov	r5, fp
    796c:	f8d8 3004 	ldr.w	r3, [r8, #4]
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7970:	f8df c100 	ldr.w	ip, [pc, #256]	; 7a74 <grid_module_en16_reva_hardware_transfer_complete_cb+0x400>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[bank].element_list[res_index].template_parameter_list;
    7974:	445b      	add	r3, fp
    7976:	2164      	movs	r1, #100	; 0x64
    7978:	68db      	ldr	r3, [r3, #12]
    797a:	b2e2      	uxtb	r2, r4
    797c:	fb01 3304 	mla	r3, r1, r4, r3
			uint8_t grid_module_en16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7980:	f10d 0e10 	add.w	lr, sp, #16
    7984:	f8dc 1004 	ldr.w	r1, [ip, #4]
    7988:	f8dc 0000 	ldr.w	r0, [ip]
    798c:	46f1      	mov	r9, lr
    798e:	e8a9 0003 	stmia.w	r9!, {r0, r1}
    7992:	4933      	ldr	r1, [pc, #204]	; (7a60 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3ec>)
    7994:	f10c 0c08 	add.w	ip, ip, #8
    7998:	458c      	cmp	ip, r1
    799a:	46ce      	mov	lr, r9
    799c:	d1f2      	bne.n	7984 <grid_module_en16_reva_hardware_transfer_complete_cb+0x310>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    799e:	a904      	add	r1, sp, #16
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    79a0:	60dc      	str	r4, [r3, #12]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    79a2:	5d09      	ldrb	r1, [r1, r4]
    79a4:	6119      	str	r1, [r3, #16]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = grid_en16_helper_template_b_tgl2[bank][i];
    79a6:	f815 000a 	ldrb.w	r0, [r5, sl]
    79aa:	6198      	str	r0, [r3, #24]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_en16_helper_template_b_tgl3[bank][i];
    79ac:	482d      	ldr	r0, [pc, #180]	; (7a64 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f0>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    79ae:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7a78 <grid_module_en16_reva_hardware_transfer_complete_cb+0x404>
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = grid_en16_helper_template_b_tgl3[bank][i];
    79b2:	5c28      	ldrb	r0, [r5, r0]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    79b4:	6259      	str	r1, [r3, #36]	; 0x24
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_NUMBER] = res_index;
    79b6:	e9c3 0407 	strd	r0, r4, [r3, #28]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS] = grid_en16_helper_template_e_abs[bank][i];
    79ba:	492b      	ldr	r1, [pc, #172]	; (7a68 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3f4>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    79bc:	9200      	str	r2, [sp, #0]
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS] = grid_en16_helper_template_e_abs[bank][i];
    79be:	5c68      	ldrb	r0, [r5, r1]
    79c0:	6298      	str	r0, [r3, #40]	; 0x28
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    79c2:	f101 0040 	add.w	r0, r1, #64	; 0x40
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = grid_en16_helper_template_e_abs_high_velocity[bank][i];			
    79c6:	3180      	adds	r1, #128	; 0x80
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_LOW] = grid_en16_helper_template_e_abs_low_velocity[bank][i];
    79c8:	5c28      	ldrb	r0, [r5, r0]
    79ca:	62d8      	str	r0, [r3, #44]	; 0x2c
			template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_ABS_VELOCITY_HIGH] = grid_en16_helper_template_e_abs_high_velocity[bank][i];			
    79cc:	5c69      	ldrb	r1, [r5, r1]
    79ce:	6319      	str	r1, [r3, #48]	; 0x30
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    79d0:	4640      	mov	r0, r8
    79d2:	7bf9      	ldrb	r1, [r7, #15]
    79d4:	2300      	movs	r3, #0
    79d6:	47c8      	blx	r9
            grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    79d8:	3401      	adds	r4, #1
    79da:	7bf9      	ldrb	r1, [r7, #15]
    79dc:	9a00      	ldr	r2, [sp, #0]
    79de:	2301      	movs	r3, #1
    79e0:	4640      	mov	r0, r8
    79e2:	47c8      	blx	r9
		for (uint8_t i = 0; i<16; i++)
    79e4:	2c10      	cmp	r4, #16
    79e6:	f105 0501 	add.w	r5, r5, #1
    79ea:	d1bf      	bne.n	796c <grid_module_en16_reva_hardware_transfer_complete_cb+0x2f8>
    79ec:	e655      	b.n	769a <grid_module_en16_reva_hardware_transfer_complete_cb+0x26>
					else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    79ee:	293f      	cmp	r1, #63	; 0x3f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    79f0:	bf08      	it	eq
    79f2:	4663      	moveq	r3, ip
    79f4:	e6bf      	b.n	7776 <grid_module_en16_reva_hardware_transfer_complete_cb+0x102>
 					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_en16_mux_reversed_lookup[res_index];
    79f6:	f811 3c10 	ldrb.w	r3, [r1, #-16]
    79fa:	6113      	str	r3, [r2, #16]
 					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;
    79fc:	2300      	movs	r3, #0
    79fe:	6153      	str	r3, [r2, #20]
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    7a00:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7a04:	2305      	movs	r3, #5
    7a06:	e6c6      	b.n	7796 <grid_module_en16_reva_hardware_transfer_complete_cb+0x122>
                if (a_prev == 0 && grid_ui_encoder_array[i].phase_change_lock == 0){
    7a08:	7b5a      	ldrb	r2, [r3, #13]
    7a0a:	bb2a      	cbnz	r2, 7a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
    7a0c:	7bd9      	ldrb	r1, [r3, #15]
    7a0e:	b921      	cbnz	r1, 7a1a <grid_module_en16_reva_hardware_transfer_complete_cb+0x3a6>
                    grid_ui_encoder_array[i].phase_change_lock = 1;
    7a10:	f04f 0901 	mov.w	r9, #1
    7a14:	f883 900f 	strb.w	r9, [r3, #15]
    7a18:	e6d6      	b.n	77c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
			int16_t delta = 0;
    7a1a:	4691      	mov	r9, r2
    7a1c:	e6d4      	b.n	77c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
					elapsed_ms = 25;
    7a1e:	2019      	movs	r0, #25
    7a20:	e6e6      	b.n	77f0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x17c>
						new_abs_no_velocity_value = 0;
    7a22:	f04f 0c00 	mov.w	ip, #0
    7a26:	e72f      	b.n	7888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
						new_abs_no_velocity_value = 127;
    7a28:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
    7a2c:	e72c      	b.n	7888 <grid_module_en16_reva_hardware_transfer_complete_cb+0x214>
						new_abs_low_velocity_value = 0;
    7a2e:	2600      	movs	r6, #0
    7a30:	e733      	b.n	789a <grid_module_en16_reva_hardware_transfer_complete_cb+0x226>
						new_abs_low_velocity_value = 127;
    7a32:	267f      	movs	r6, #127	; 0x7f
    7a34:	e731      	b.n	789a <grid_module_en16_reva_hardware_transfer_complete_cb+0x226>
						new_abs_high_velocity_value = 0;
    7a36:	2000      	movs	r0, #0
    7a38:	e73a      	b.n	78b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x23c>
						new_abs_high_velocity_value = 127;
    7a3a:	207f      	movs	r0, #127	; 0x7f
    7a3c:	e738      	b.n	78b0 <grid_module_en16_reva_hardware_transfer_complete_cb+0x23c>
						new_rel_no_velocity_value += delta;
    7a3e:	4489      	add	r9, r1
						new_rel_low_velocity_value += delta_low;
    7a40:	440b      	add	r3, r1
						new_rel_no_velocity_value += delta;
    7a42:	fa5f f589 	uxtb.w	r5, r9
						new_rel_low_velocity_value += delta_low;
    7a46:	b2db      	uxtb	r3, r3
						new_rel_high_velocity_value += delta_high;
    7a48:	440f      	add	r7, r1
    7a4a:	e73d      	b.n	78c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x254>
                        grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_ENCPUSHROT);
    7a4c:	7bc9      	ldrb	r1, [r1, #15]
    7a4e:	230d      	movs	r3, #13
    7a50:	e752      	b.n	78f8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x284>
            if (a_now == 0 && b_now == 0){
    7a52:	b90e      	cbnz	r6, 7a58 <grid_module_en16_reva_hardware_transfer_complete_cb+0x3e4>
                grid_ui_encoder_array[i].phase_change_lock = 0;
    7a54:	19eb      	adds	r3, r5, r7
    7a56:	73de      	strb	r6, [r3, #15]
			int16_t delta = 0;
    7a58:	f04f 0900 	mov.w	r9, #0
    7a5c:	e6b4      	b.n	77c8 <grid_module_en16_reva_hardware_transfer_complete_cb+0x154>
    7a5e:	bf00      	nop
    7a60:	00015842 	.word	0x00015842
    7a64:	200006ea 	.word	0x200006ea
    7a68:	2000072a 	.word	0x2000072a
    7a6c:	20006f98 	.word	0x20006f98
    7a70:	200006aa 	.word	0x200006aa
    7a74:	00015832 	.word	0x00015832
    7a78:	0000af09 	.word	0x0000af09

00007a7c <grid_module_en16_reva_hardware_init>:
    7a7c:	4b0f      	ldr	r3, [pc, #60]	; (7abc <grid_module_en16_reva_hardware_init+0x40>)
    7a7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

void grid_module_en16_reva_hardware_init(void){
    7a82:	b510      	push	{r4, lr}
    7a84:	615a      	str	r2, [r3, #20]
	
	
	
	
	
	spi_m_async_set_mode(&UI_SPI, SPI_MODE_3);
    7a86:	4c0e      	ldr	r4, [pc, #56]	; (7ac0 <grid_module_en16_reva_hardware_init+0x44>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    7a88:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    7a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7a8e:	629a      	str	r2, [r3, #40]	; 0x28
    7a90:	4a0c      	ldr	r2, [pc, #48]	; (7ac4 <grid_module_en16_reva_hardware_init+0x48>)
    7a92:	629a      	str	r2, [r3, #40]	; 0x28
    7a94:	2103      	movs	r1, #3
    7a96:	4b0c      	ldr	r3, [pc, #48]	; (7ac8 <grid_module_en16_reva_hardware_init+0x4c>)
    7a98:	4620      	mov	r0, r4
    7a9a:	4798      	blx	r3
	spi_m_async_set_baudrate(&UI_SPI, 1000000); // was 400000 check clock div setting
    7a9c:	490b      	ldr	r1, [pc, #44]	; (7acc <grid_module_en16_reva_hardware_init+0x50>)
    7a9e:	4b0c      	ldr	r3, [pc, #48]	; (7ad0 <grid_module_en16_reva_hardware_init+0x54>)
    7aa0:	4620      	mov	r0, r4
    7aa2:	4798      	blx	r3
	
	spi_m_async_get_io_descriptor(&UI_SPI, &grid_module_en16_reva_hardware_io);
    7aa4:	490b      	ldr	r1, [pc, #44]	; (7ad4 <grid_module_en16_reva_hardware_init+0x58>)
    7aa6:	4b0c      	ldr	r3, [pc, #48]	; (7ad8 <grid_module_en16_reva_hardware_init+0x5c>)
    7aa8:	4620      	mov	r0, r4
    7aaa:	4798      	blx	r3


	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    7aac:	4620      	mov	r0, r4
    7aae:	4a0b      	ldr	r2, [pc, #44]	; (7adc <grid_module_en16_reva_hardware_init+0x60>)
    7ab0:	4b0b      	ldr	r3, [pc, #44]	; (7ae0 <grid_module_en16_reva_hardware_init+0x64>)


}
    7ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi_m_async_register_callback(&UI_SPI, SPI_M_ASYNC_CB_XFER, grid_module_en16_reva_hardware_transfer_complete_cb);
    7ab6:	2100      	movs	r1, #0
    7ab8:	4718      	bx	r3
    7aba:	bf00      	nop
    7abc:	41008000 	.word	0x41008000
    7ac0:	20014ad0 	.word	0x20014ad0
    7ac4:	c0000020 	.word	0xc0000020
    7ac8:	0000e559 	.word	0x0000e559
    7acc:	000f4240 	.word	0x000f4240
    7ad0:	0000e51d 	.word	0x0000e51d
    7ad4:	2000403c 	.word	0x2000403c
    7ad8:	0000e63d 	.word	0x0000e63d
    7adc:	00007675 	.word	0x00007675
    7ae0:	0000e5f9 	.word	0x0000e5f9

00007ae4 <grid_module_en16_reva_init>:

void grid_module_en16_reva_init(){
    7ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	
	grid_led_lowlevel_init(&grid_led_state, 16);
    7ae8:	4b1d      	ldr	r3, [pc, #116]	; (7b60 <grid_module_en16_reva_init+0x7c>)
    7aea:	481e      	ldr	r0, [pc, #120]	; (7b64 <grid_module_en16_reva_init+0x80>)

	
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++)
	{
		
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    7aec:	4e1e      	ldr	r6, [pc, #120]	; (7b68 <grid_module_en16_reva_init+0x84>)
    7aee:	4f1f      	ldr	r7, [pc, #124]	; (7b6c <grid_module_en16_reva_init+0x88>)
		
		for(uint8_t j=0; j<16; j++){
		
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_ENCODER);	
    7af0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 7b80 <grid_module_en16_reva_init+0x9c>
	grid_led_lowlevel_init(&grid_led_state, 16);
    7af4:	2110      	movs	r1, #16
    7af6:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);	
    7af8:	481b      	ldr	r0, [pc, #108]	; (7b68 <grid_module_en16_reva_init+0x84>)
    7afa:	4b1d      	ldr	r3, [pc, #116]	; (7b70 <grid_module_en16_reva_init+0x8c>)
    7afc:	2104      	movs	r1, #4
    7afe:	4798      	blx	r3
    7b00:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    7b02:	2210      	movs	r2, #16
    7b04:	b2e1      	uxtb	r1, r4
    7b06:	4630      	mov	r0, r6
    7b08:	47b8      	blx	r7
		for(uint8_t j=0; j<16; j++){
    7b0a:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);	
    7b0e:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_ENCODER);	
    7b10:	6870      	ldr	r0, [r6, #4]
    7b12:	b2e9      	uxtb	r1, r5
    7b14:	2203      	movs	r2, #3
    7b16:	4448      	add	r0, r9
    7b18:	3501      	adds	r5, #1
    7b1a:	47c0      	blx	r8
		for(uint8_t j=0; j<16; j++){
    7b1c:	2d10      	cmp	r5, #16
    7b1e:	d1f7      	bne.n	7b10 <grid_module_en16_reva_init+0x2c>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++)
    7b20:	3401      	adds	r4, #1
    7b22:	2c04      	cmp	r4, #4
    7b24:	d1ed      	bne.n	7b02 <grid_module_en16_reva_init+0x1e>
    7b26:	2200      	movs	r2, #0
    7b28:	4b12      	ldr	r3, [pc, #72]	; (7b74 <grid_module_en16_reva_init+0x90>)
	// initialize local encoder helper struct
	for (uint8_t j = 0; j<16; j++)
	{
		grid_ui_encoder_array[j].controller_number = j;
		
		grid_ui_encoder_array[j].button_value = 1;
    7b2a:	2001      	movs	r0, #1
		grid_ui_encoder_array[j].button_changed = 0; 
    7b2c:	4611      	mov	r1, r2
		grid_ui_encoder_array[j].rotation_value = 0;
		grid_ui_encoder_array[j].rotation_changed = 1;
		grid_ui_encoder_array[j].rotation_direction = 0;
		grid_ui_encoder_array[j].last_real_time = -1;
    7b2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		grid_ui_encoder_array[j].controller_number = j;
    7b32:	701a      	strb	r2, [r3, #0]
		grid_ui_encoder_array[j].button_value = 1;
    7b34:	3201      	adds	r2, #1
	for (uint8_t j = 0; j<16; j++)
    7b36:	2a10      	cmp	r2, #16
		grid_ui_encoder_array[j].button_value = 1;
    7b38:	7058      	strb	r0, [r3, #1]
		grid_ui_encoder_array[j].button_changed = 0; 
    7b3a:	7099      	strb	r1, [r3, #2]
		grid_ui_encoder_array[j].rotation_value = 0;
    7b3c:	70d9      	strb	r1, [r3, #3]
		grid_ui_encoder_array[j].rotation_changed = 1;
    7b3e:	7118      	strb	r0, [r3, #4]
		grid_ui_encoder_array[j].rotation_direction = 0;
    7b40:	7159      	strb	r1, [r3, #5]
		grid_ui_encoder_array[j].last_real_time = -1;
    7b42:	609c      	str	r4, [r3, #8]
		grid_ui_encoder_array[j].velocity = 0;
    7b44:	7319      	strb	r1, [r3, #12]
		grid_ui_encoder_array[j].phase_a_previous = 1;
    7b46:	7358      	strb	r0, [r3, #13]
		grid_ui_encoder_array[j].phase_b_previous = 1;	
    7b48:	7398      	strb	r0, [r3, #14]
        
        grid_ui_encoder_array[j].phase_change_lock = 0;
    7b4a:	73d9      	strb	r1, [r3, #15]
	for (uint8_t j = 0; j<16; j++)
    7b4c:	f103 0310 	add.w	r3, r3, #16
    7b50:	d1ef      	bne.n	7b32 <grid_module_en16_reva_init+0x4e>
		
	}
	
	
	grid_module_en16_reva_hardware_init();
    7b52:	4b09      	ldr	r3, [pc, #36]	; (7b78 <grid_module_en16_reva_init+0x94>)
    7b54:	4798      	blx	r3
	
	
	grid_module_en16_reva_hardware_start_transfer();
	
}
    7b56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_en16_reva_hardware_start_transfer();
    7b5a:	4b08      	ldr	r3, [pc, #32]	; (7b7c <grid_module_en16_reva_init+0x98>)
    7b5c:	4718      	bx	r3
    7b5e:	bf00      	nop
    7b60:	00006e95 	.word	0x00006e95
    7b64:	200146a0 	.word	0x200146a0
    7b68:	20006f98 	.word	0x20006f98
    7b6c:	00009a3d 	.word	0x00009a3d
    7b70:	00009a09 	.word	0x00009a09
    7b74:	200115d8 	.word	0x200115d8
    7b78:	00007a7d 	.word	0x00007a7d
    7b7c:	0000763d 	.word	0x0000763d
    7b80:	0000adf5 	.word	0x0000adf5

00007b84 <grid_module_pbf4_reva_hardware_start_transfer>:
static uint8_t grid_pbf4_helper_template_b_abs[16] = {0};
	
static uint8_t grid_pbf4_helper_template_b_tgl2[GRID_SYS_BANK_MAXNUMBER][16] = {0};
static uint8_t grid_pbf4_helper_template_b_tgl3[GRID_SYS_BANK_MAXNUMBER][16] = {0};

void grid_module_pbf4_reva_hardware_start_transfer(void){
    7b84:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    7b86:	4c04      	ldr	r4, [pc, #16]	; (7b98 <grid_module_pbf4_reva_hardware_start_transfer+0x14>)
    7b88:	4804      	ldr	r0, [pc, #16]	; (7b9c <grid_module_pbf4_reva_hardware_start_transfer+0x18>)
    7b8a:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    7b8c:	4623      	mov	r3, r4
    7b8e:	4804      	ldr	r0, [pc, #16]	; (7ba0 <grid_module_pbf4_reva_hardware_start_transfer+0x1c>)
	
}
    7b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    7b94:	4718      	bx	r3
    7b96:	bf00      	nop
    7b98:	0000d9cd 	.word	0x0000d9cd
    7b9c:	20014be4 	.word	0x20014be4
    7ba0:	20014db8 	.word	0x20014db8
    7ba4:	00000000 	.word	0x00000000

00007ba8 <grid_module_pbf4_reva_hardware_transfer_complete_cb>:

void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    7ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    7bac:	4aa8      	ldr	r2, [pc, #672]	; (7e50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    7bae:	7813      	ldrb	r3, [r2, #0]
void grid_module_pbf4_reva_hardware_transfer_complete_cb(void){
    7bb0:	b08b      	sub	sp, #44	; 0x2c
	if (grid_module_pbf4_reva_hardware_transfer_complete == 0){
    7bb2:	b933      	cbnz	r3, 7bc2 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a>
		grid_module_pbf4_reva_hardware_transfer_complete++;
    7bb4:	7813      	ldrb	r3, [r2, #0]
    7bb6:	3301      	adds	r3, #1
    7bb8:	b2db      	uxtb	r3, r3
    7bba:	7013      	strb	r3, [r2, #0]
	
	
	
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
	grid_module_pbf4_reva_hardware_start_transfer();
}
    7bbc:	b00b      	add	sp, #44	; 0x2c
    7bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_state.bank_active_changed){
    7bc2:	4ba4      	ldr	r3, [pc, #656]	; (7e54 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ac>)
    7bc4:	7c5a      	ldrb	r2, [r3, #17]
    7bc6:	469a      	mov	sl, r3
    7bc8:	bb02      	cbnz	r2, 7c0c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x64>
	uint16_t adcresult_0 = 0;
    7bca:	2300      	movs	r3, #0
    7bcc:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t adcresult_1 = 0;
    7bd0:	f8ad 3016 	strh.w	r3, [sp, #22]
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    7bd4:	4ba0      	ldr	r3, [pc, #640]	; (7e58 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b0>)
    7bd6:	49a1      	ldr	r1, [pc, #644]	; (7e5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b4>)
    7bd8:	781a      	ldrb	r2, [r3, #0]
    7bda:	3208      	adds	r2, #8
    7bdc:	5c8d      	ldrb	r5, [r1, r2]
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7bde:	781a      	ldrb	r2, [r3, #0]
    7be0:	b2d2      	uxtb	r2, r2
	uint8_t adc_index_0 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+8];
    7be2:	b2ed      	uxtb	r5, r5
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7be4:	5c8c      	ldrb	r4, [r1, r2]
	grid_module_pbf4_reva_mux++;
    7be6:	781a      	ldrb	r2, [r3, #0]
    7be8:	3201      	adds	r2, #1
    7bea:	b2d2      	uxtb	r2, r2
    7bec:	701a      	strb	r2, [r3, #0]
	grid_module_pbf4_reva_mux%=8;
    7bee:	781a      	ldrb	r2, [r3, #0]
    7bf0:	f002 0207 	and.w	r2, r2, #7
    7bf4:	701a      	strb	r2, [r3, #0]
	gpio_set_pin_level(MUX_A, grid_module_pbf4_reva_mux/1%2);
    7bf6:	781a      	ldrb	r2, [r3, #0]
    7bf8:	f012 0f01 	tst.w	r2, #1
	uint8_t adc_index_1 = grid_module_pbf4_reva_mux_lookup[grid_module_pbf4_reva_mux+0];
    7bfc:	b2e4      	uxtb	r4, r4
    7bfe:	4a98      	ldr	r2, [pc, #608]	; (7e60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    7c00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    7c04:	d133      	bne.n	7c6e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0xc6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c06:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
}
    7c0a:	e032      	b.n	7c72 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0xca>
		grid_sys_state.bank_active_changed = 0;
    7c0c:	2500      	movs	r5, #0
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7c0e:	4c95      	ldr	r4, [pc, #596]	; (7e64 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>)
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7c10:	4e95      	ldr	r6, [pc, #596]	; (7e68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c0>)
		grid_sys_state.bank_active_changed = 0;
    7c12:	745d      	strb	r5, [r3, #17]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7c14:	2764      	movs	r7, #100	; 0x64
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7c16:	6863      	ldr	r3, [r4, #4]
    7c18:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c1c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    7c20:	b2ea      	uxtb	r2, r5
    7c22:	7a5b      	ldrb	r3, [r3, #9]
    7c24:	4293      	cmp	r3, r2
    7c26:	d9d0      	bls.n	7bca <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x22>
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7c28:	6863      	ldr	r3, [r4, #4]
    7c2a:	f89a 100f 	ldrb.w	r1, [sl, #15]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7c2e:	9201      	str	r2, [sp, #4]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7c30:	eb03 1301 	add.w	r3, r3, r1, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7c34:	4620      	mov	r0, r4
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = i;
    7c36:	68db      	ldr	r3, [r3, #12]
    7c38:	fb07 3302 	mla	r3, r7, r2, r3
    7c3c:	3501      	adds	r5, #1
    7c3e:	60da      	str	r2, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    7c40:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c44:	2300      	movs	r3, #0
    7c46:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    7c48:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c4c:	9a01      	ldr	r2, [sp, #4]
    7c4e:	2301      	movs	r3, #1
    7c50:	4620      	mov	r0, r4
    7c52:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DP);
    7c54:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c58:	9a01      	ldr	r2, [sp, #4]
    7c5a:	2304      	movs	r3, #4
    7c5c:	4620      	mov	r0, r4
    7c5e:	47b0      	blx	r6
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_DR);
    7c60:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7c64:	9a01      	ldr	r2, [sp, #4]
    7c66:	2305      	movs	r3, #5
    7c68:	4620      	mov	r0, r4
    7c6a:	47b0      	blx	r6
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    7c6c:	e7d3      	b.n	7c16 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x6e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7c6e:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_pbf4_reva_mux/2%2);
    7c72:	781a      	ldrb	r2, [r3, #0]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    7c74:	4e7d      	ldr	r6, [pc, #500]	; (7e6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c4>)
    7c76:	487e      	ldr	r0, [pc, #504]	; (7e70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2c8>)
	uint32_t input_0 = adcresult_0*1.03;
    7c78:	f8df b210 	ldr.w	fp, [pc, #528]	; 7e8c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e4>
    7c7c:	f8df 9210 	ldr.w	r9, [pc, #528]	; 7e90 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e8>
    7c80:	f012 0f02 	tst.w	r2, #2
    7c84:	4a76      	ldr	r2, [pc, #472]	; (7e60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    7c86:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    7c8a:	bf14      	ite	ne
    7c8c:	f8c2 1118 	strne.w	r1, [r2, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7c90:	f8c2 1114 	streq.w	r1, [r2, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_pbf4_reva_mux/4%2);
    7c94:	781b      	ldrb	r3, [r3, #0]
    7c96:	f013 0f04 	tst.w	r3, #4
    7c9a:	4b71      	ldr	r3, [pc, #452]	; (7e60 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2b8>)
    7c9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    7ca0:	bf14      	ite	ne
    7ca2:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    7ca6:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    7caa:	2100      	movs	r1, #0
    7cac:	2302      	movs	r3, #2
    7cae:	aa05      	add	r2, sp, #20
    7cb0:	47b0      	blx	r6
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    7cb2:	2302      	movs	r3, #2
    7cb4:	f10d 0216 	add.w	r2, sp, #22
    7cb8:	2100      	movs	r1, #0
    7cba:	486e      	ldr	r0, [pc, #440]	; (7e74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2cc>)
    7cbc:	47b0      	blx	r6
	uint32_t input_0 = adcresult_0*1.03;
    7cbe:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7cc2:	4e6d      	ldr	r6, [pc, #436]	; (7e78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d0>)
    7cc4:	47d8      	blx	fp
    7cc6:	a360      	add	r3, pc, #384	; (adr r3, 7e48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    7cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ccc:	47b0      	blx	r6
    7cce:	47c8      	blx	r9
    7cd0:	f64f 77ff 	movw	r7, #65535	; 0xffff
    7cd4:	42b8      	cmp	r0, r7
    7cd6:	4680      	mov	r8, r0
    7cd8:	bf28      	it	cs
    7cda:	46b8      	movcs	r8, r7
    7cdc:	9001      	str	r0, [sp, #4]
	adcresult_0 = input_0;
    7cde:	f8ad 8014 	strh.w	r8, [sp, #20]
	uint32_t input_1 = adcresult_1*1.03;
    7ce2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    7ce6:	47d8      	blx	fp
    7ce8:	a357      	add	r3, pc, #348	; (adr r3, 7e48 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a0>)
    7cea:	e9d3 2300 	ldrd	r2, r3, [r3]
    7cee:	47b0      	blx	r6
    7cf0:	47c8      	blx	r9
	adcresult_1 = input_1;
    7cf2:	42b8      	cmp	r0, r7
    7cf4:	4603      	mov	r3, r0
    7cf6:	bf28      	it	cs
    7cf8:	463b      	movcs	r3, r7
    7cfa:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (adc_index_1 == 8 || adc_index_1 == 9){
    7cfe:	f1a4 0308 	sub.w	r3, r4, #8
    7d02:	2b01      	cmp	r3, #1
    7d04:	d972      	bls.n	7dec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
	else if (adc_index_0 > 13){ // BUTTON
    7d06:	2d0d      	cmp	r5, #13
    7d08:	f8df 9188 	ldr.w	r9, [pc, #392]	; 7e94 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2ec>
    7d0c:	f240 80c4 	bls.w	7e98 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2f0>
		uint8_t result_value[2] = {0};
    7d10:	2300      	movs	r3, #0
		if (adcresult_0>60000){
    7d12:	9a01      	ldr	r2, [sp, #4]
		uint8_t result_value[2] = {0};
    7d14:	f8ad 300c 	strh.w	r3, [sp, #12]
		uint8_t result_valid[2] = {0};
    7d18:	f8ad 3010 	strh.w	r3, [sp, #16]
		if (adcresult_0>60000){
    7d1c:	f64e 2360 	movw	r3, #60000	; 0xea60
		result_index[0] = adc_index_0-4;
    7d20:	3d04      	subs	r5, #4
		result_index[1] = adc_index_1-4;
    7d22:	3c04      	subs	r4, #4
		if (adcresult_0>60000){
    7d24:	429a      	cmp	r2, r3
		result_index[0] = adc_index_0-4;
    7d26:	f88d 5008 	strb.w	r5, [sp, #8]
		result_index[1] = adc_index_1-4;
    7d2a:	f88d 4009 	strb.w	r4, [sp, #9]
		if (adcresult_0>60000){
    7d2e:	d963      	bls.n	7df8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x250>
			result_valid[0] = 1;
    7d30:	2301      	movs	r3, #1
    7d32:	f88d 3010 	strb.w	r3, [sp, #16]
		if (adcresult_1>60000){
    7d36:	f64e 2360 	movw	r3, #60000	; 0xea60
    7d3a:	4298      	cmp	r0, r3
    7d3c:	d963      	bls.n	7e06 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x25e>
			result_value[1] = 0;
    7d3e:	2300      	movs	r3, #0
			result_value[1] = 127;
    7d40:	f88d 300d 	strb.w	r3, [sp, #13]
			result_valid[1] = 1;
    7d44:	2301      	movs	r3, #1
    7d46:	f88d 3011 	strb.w	r3, [sp, #17]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7d4a:	4b4c      	ldr	r3, [pc, #304]	; (7e7c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d4>)
    7d4c:	ac06      	add	r4, sp, #24
    7d4e:	6818      	ldr	r0, [r3, #0]
    7d50:	6859      	ldr	r1, [r3, #4]
    7d52:	4622      	mov	r2, r4
    7d54:	c203      	stmia	r2!, {r0, r1}
    7d56:	3308      	adds	r3, #8
    7d58:	454b      	cmp	r3, r9
    7d5a:	4614      	mov	r4, r2
    7d5c:	d1f7      	bne.n	7d4e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a6>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7d5e:	f8df b104 	ldr.w	fp, [pc, #260]	; 7e64 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2bc>
    7d62:	ab03      	add	r3, sp, #12
    7d64:	f10d 0808 	add.w	r8, sp, #8
    7d68:	9301      	str	r3, [sp, #4]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7d6a:	2400      	movs	r4, #0
    7d6c:	46d9      	mov	r9, fp
			uint8_t res_value = result_value[i];
    7d6e:	9b01      	ldr	r3, [sp, #4]
			uint8_t res_index = result_index[i];
    7d70:	f818 7b01 	ldrb.w	r7, [r8], #1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d74:	4a42      	ldr	r2, [pc, #264]	; (7e80 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
			uint8_t res_value = result_value[i];
    7d76:	f813 6b01 	ldrb.w	r6, [r3], #1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d7a:	5dd2      	ldrb	r2, [r2, r7]
			uint8_t res_value = result_value[i];
    7d7c:	9301      	str	r3, [sp, #4]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7d7e:	f8db 3004 	ldr.w	r3, [fp, #4]
    7d82:	f89a 100f 	ldrb.w	r1, [sl, #15]
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d86:	4296      	cmp	r6, r2
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7d88:	b2c9      	uxtb	r1, r1
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d8a:	d02e      	beq.n	7dea <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x242>
			uint8_t res_valid = result_valid[i];
    7d8c:	a804      	add	r0, sp, #16
			if (res_value != grid_pbf4_helper_template_b_abs[res_index] && res_valid == 1){
    7d8e:	5c20      	ldrb	r0, [r4, r0]
    7d90:	2801      	cmp	r0, #1
    7d92:	d12a      	bne.n	7dea <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x242>
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7d94:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    7d98:	2064      	movs	r0, #100	; 0x64
    7d9a:	68db      	ldr	r3, [r3, #12]
    7d9c:	fb17 f000 	smulbb	r0, r7, r0
    7da0:	4403      	add	r3, r0
				if (grid_pbf4_helper_template_b_abs[res_index] == 0){ // Button Press Event
    7da2:	2a00      	cmp	r2, #0
    7da4:	d13b      	bne.n	7e1e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x276>
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] == 0){
    7da6:	6999      	ldr	r1, [r3, #24]
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2] = 0;
    7da8:	2900      	cmp	r1, #0
    7daa:	bf0c      	ite	eq
    7dac:	217f      	moveq	r1, #127	; 0x7f
    7dae:	2100      	movne	r1, #0
    7db0:	6199      	str	r1, [r3, #24]
					if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 0){
    7db2:	69d9      	ldr	r1, [r3, #28]
    7db4:	bb69      	cbnz	r1, 7e12 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x26a>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 63;
    7db6:	213f      	movs	r1, #63	; 0x3f
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7db8:	61d9      	str	r1, [r3, #28]
					grid_pbf4_helper_template_b_tgl2[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL2];
    7dba:	f89a 300f 	ldrb.w	r3, [sl, #15]
					grid_pbf4_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    7dbe:	f89a 300f 	ldrb.w	r3, [sl, #15]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    7dc2:	227f      	movs	r2, #127	; 0x7f
					grid_pbf4_helper_template_b_tgl3[grid_sys_state.bank_activebank_number][i] = template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3];
    7dc4:	2300      	movs	r3, #0
                        template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7dc6:	f8d9 1004 	ldr.w	r1, [r9, #4]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    7dca:	4419      	add	r1, r3
    7dcc:	3310      	adds	r3, #16
    7dce:	68c9      	ldr	r1, [r1, #12]
    7dd0:	4401      	add	r1, r0
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7dd2:	2b40      	cmp	r3, #64	; 0x40
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 127;      
    7dd4:	614a      	str	r2, [r1, #20]
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7dd6:	d1f6      	bne.n	7dc6 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x21e>
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DP);
    7dd8:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7ddc:	2304      	movs	r3, #4
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    7dde:	4d29      	ldr	r5, [pc, #164]	; (7e84 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2dc>)
    7de0:	463a      	mov	r2, r7
    7de2:	4658      	mov	r0, fp
    7de4:	47a8      	blx	r5
					grid_pbf4_helper_template_b_abs[result_index[i]] = res_value;
    7de6:	4b26      	ldr	r3, [pc, #152]	; (7e80 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2d8>)
    7de8:	55de      	strb	r6, [r3, r7]
		for (uint8_t i=0; i<2; i++)
    7dea:	b184      	cbz	r4, 7e0e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x266>
	grid_module_pbf4_reva_hardware_transfer_complete = 0;
    7dec:	4a18      	ldr	r2, [pc, #96]	; (7e50 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2a8>)
    7dee:	2300      	movs	r3, #0
    7df0:	7013      	strb	r3, [r2, #0]
	grid_module_pbf4_reva_hardware_start_transfer();
    7df2:	4b25      	ldr	r3, [pc, #148]	; (7e88 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x2e0>)
    7df4:	4798      	blx	r3
    7df6:	e6e1      	b.n	7bbc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x14>
		else if (adcresult_0<200){
    7df8:	9b01      	ldr	r3, [sp, #4]
    7dfa:	2bc7      	cmp	r3, #199	; 0xc7
    7dfc:	d89b      	bhi.n	7d36 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x18e>
			result_value[0] = 127;
    7dfe:	237f      	movs	r3, #127	; 0x7f
    7e00:	f88d 300c 	strb.w	r3, [sp, #12]
    7e04:	e794      	b.n	7d30 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x188>
		else if (adcresult_1<200){
    7e06:	28c7      	cmp	r0, #199	; 0xc7
    7e08:	d89f      	bhi.n	7d4a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1a2>
			result_value[1] = 127;
    7e0a:	237f      	movs	r3, #127	; 0x7f
    7e0c:	e798      	b.n	7d40 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x198>
    7e0e:	2401      	movs	r4, #1
    7e10:	e7ad      	b.n	7d6e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x1c6>
					else if (template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] == 63){
    7e12:	293f      	cmp	r1, #63	; 0x3f
    7e14:	d101      	bne.n	7e1a <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x272>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 127;
    7e16:	217f      	movs	r1, #127	; 0x7f
    7e18:	e7ce      	b.n	7db8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x210>
						template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_TGL3] = 0;
    7e1a:	61da      	str	r2, [r3, #28]
    7e1c:	e7cd      	b.n	7dba <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x212>
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7e1e:	aa0a      	add	r2, sp, #40	; 0x28
    7e20:	19d1      	adds	r1, r2, r7
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER] = res_index;
    7e22:	60df      	str	r7, [r3, #12]
					template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7e24:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    7e28:	6119      	str	r1, [r3, #16]
    7e2a:	2300      	movs	r3, #0
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7e2c:	461a      	mov	r2, r3
                        template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7e2e:	f8d9 1004 	ldr.w	r1, [r9, #4]
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7e32:	4419      	add	r1, r3
    7e34:	3310      	adds	r3, #16
    7e36:	68c9      	ldr	r1, [r1, #12]
    7e38:	4401      	add	r1, r0
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7e3a:	2b40      	cmp	r3, #64	; 0x40
                        template_parameter_list[GRID_TEMPLATE_B_PARAMETER_CONTROLLER_ABS] = 0;      
    7e3c:	614a      	str	r2, [r1, #20]
                    for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7e3e:	d1f6      	bne.n	7e2e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x286>
					grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_DR);
    7e40:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7e44:	2305      	movs	r3, #5
    7e46:	e7ca      	b.n	7dde <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x236>
    7e48:	47ae147b 	.word	0x47ae147b
    7e4c:	3ff07ae1 	.word	0x3ff07ae1
    7e50:	20004048 	.word	0x20004048
    7e54:	20006fa4 	.word	0x20006fa4
    7e58:	20014630 	.word	0x20014630
    7e5c:	20000329 	.word	0x20000329
    7e60:	41008000 	.word	0x41008000
    7e64:	20006f98 	.word	0x20006f98
    7e68:	0000af09 	.word	0x0000af09
    7e6c:	0000d911 	.word	0x0000d911
    7e70:	20014be4 	.word	0x20014be4
    7e74:	20014db8 	.word	0x20014db8
    7e78:	00012805 	.word	0x00012805
    7e7c:	00015842 	.word	0x00015842
    7e80:	200007fb 	.word	0x200007fb
    7e84:	0000aabd 	.word	0x0000aabd
    7e88:	00007b85 	.word	0x00007b85
    7e8c:	00012731 	.word	0x00012731
    7e90:	00012c29 	.word	0x00012c29
    7e94:	00015852 	.word	0x00015852
		if (adc_index_1 == 0 || adc_index_1 == 1){
    7e98:	2c01      	cmp	r4, #1
    7e9a:	4e33      	ldr	r6, [pc, #204]	; (7f68 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c0>)
    7e9c:	d85e      	bhi.n	7f5c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3b4>
			grid_ain_add_sample(adc_index_0, (1<<16)-1-adcresult_0);
    7e9e:	ea88 0107 	eor.w	r1, r8, r7
    7ea2:	4628      	mov	r0, r5
    7ea4:	47b0      	blx	r6
			grid_ain_add_sample(adc_index_1, (1<<16)-1-adcresult_1);
    7ea6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    7eaa:	1a79      	subs	r1, r7, r1
			grid_ain_add_sample(adc_index_1, adcresult_1);
    7eac:	4620      	mov	r0, r4
    7eae:	47b0      	blx	r6
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7eb0:	4a2e      	ldr	r2, [pc, #184]	; (7f6c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c4>)
		result_index[0] = adc_index_0;
    7eb2:	f88d 5010 	strb.w	r5, [sp, #16]
		result_index[1] = adc_index_1;
    7eb6:	f88d 4011 	strb.w	r4, [sp, #17]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7eba:	ab06      	add	r3, sp, #24
    7ebc:	6810      	ldr	r0, [r2, #0]
    7ebe:	6851      	ldr	r1, [r2, #4]
    7ec0:	461c      	mov	r4, r3
    7ec2:	c403      	stmia	r4!, {r0, r1}
    7ec4:	3208      	adds	r2, #8
    7ec6:	454a      	cmp	r2, r9
    7ec8:	4623      	mov	r3, r4
    7eca:	d1f7      	bne.n	7ebc <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x314>
		for (uint8_t i=0; i<2; i++)
    7ecc:	ab04      	add	r3, sp, #16
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7ece:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 7f78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>
    7ed2:	9301      	str	r3, [sp, #4]
		uint8_t grid_module_pbf4_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    7ed4:	f04f 0902 	mov.w	r9, #2
			uint8_t res_index = result_index[i];
    7ed8:	9b01      	ldr	r3, [sp, #4]
    7eda:	f813 4b01 	ldrb.w	r4, [r3], #1
    7ede:	9301      	str	r3, [sp, #4]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7ee0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7ee4:	f89a 200f 	ldrb.w	r2, [sl, #15]
    7ee8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			if (grid_ain_get_changed(res_index)){
    7eec:	4620      	mov	r0, r4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7eee:	68dd      	ldr	r5, [r3, #12]
			if (grid_ain_get_changed(res_index)){
    7ef0:	4b1f      	ldr	r3, [pc, #124]	; (7f70 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3c8>)
    7ef2:	4798      	blx	r3
    7ef4:	b358      	cbz	r0, 7f4e <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3a6>
				uint8_t res_value = grid_ain_get_average(res_index, 7);
    7ef6:	4e1f      	ldr	r6, [pc, #124]	; (7f74 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3cc>)
    7ef8:	2107      	movs	r1, #7
    7efa:	4620      	mov	r0, r4
    7efc:	47b0      	blx	r6
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7efe:	2764      	movs	r7, #100	; 0x64
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7f00:	ab0a      	add	r3, sp, #40	; 0x28
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7f02:	fb14 f707 	smulbb	r7, r4, r7
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7f06:	4423      	add	r3, r4
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7f08:	443d      	add	r5, r7
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7f0a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
			uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    7f0e:	60ec      	str	r4, [r5, #12]
				template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_pbf4_mux_reversed_lookup[res_index];
    7f10:	612b      	str	r3, [r5, #16]
    7f12:	2500      	movs	r5, #0
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7f14:	4b18      	ldr	r3, [pc, #96]	; (7f78 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d0>)
    7f16:	685a      	ldr	r2, [r3, #4]
    7f18:	442a      	add	r2, r5
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7f1a:	2107      	movs	r1, #7
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7f1c:	68d2      	ldr	r2, [r2, #12]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7f1e:	4620      	mov	r0, r4
                	template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    7f20:	eb02 0b07 	add.w	fp, r2, r7
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7f24:	47b0      	blx	r6
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7f26:	2107      	movs	r1, #7
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    7f28:	f8cb 0014 	str.w	r0, [fp, #20]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7f2c:	4620      	mov	r0, r4
    7f2e:	47b0      	blx	r6
    7f30:	3510      	adds	r5, #16
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    7f32:	2300      	movs	r3, #0
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7f34:	2d40      	cmp	r5, #64	; 0x40
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    7f36:	f8cb 0018 	str.w	r0, [fp, #24]
                    template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    7f3a:	f8cb 301c 	str.w	r3, [fp, #28]
                for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    7f3e:	d1e9      	bne.n	7f14 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x36c>
				grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_AVC7);
    7f40:	4622      	mov	r2, r4
    7f42:	f89a 100f 	ldrb.w	r1, [sl, #15]
    7f46:	4c0d      	ldr	r4, [pc, #52]	; (7f7c <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x3d4>)
    7f48:	2301      	movs	r3, #1
    7f4a:	4640      	mov	r0, r8
    7f4c:	47a0      	blx	r4
		for (uint8_t i=0; i<2; i++)
    7f4e:	f1b9 0f01 	cmp.w	r9, #1
    7f52:	f43f af4b 	beq.w	7dec <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x244>
    7f56:	f04f 0901 	mov.w	r9, #1
    7f5a:	e7bd      	b.n	7ed8 <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x330>
			grid_ain_add_sample(adc_index_0, adcresult_0);
    7f5c:	4641      	mov	r1, r8
    7f5e:	4628      	mov	r0, r5
    7f60:	47b0      	blx	r6
			grid_ain_add_sample(adc_index_1, adcresult_1);
    7f62:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    7f66:	e7a1      	b.n	7eac <grid_module_pbf4_reva_hardware_transfer_complete_cb+0x304>
    7f68:	00004631 	.word	0x00004631
    7f6c:	00015842 	.word	0x00015842
    7f70:	000046f9 	.word	0x000046f9
    7f74:	00004709 	.word	0x00004709
    7f78:	20006f98 	.word	0x20006f98
    7f7c:	0000aabd 	.word	0x0000aabd

00007f80 <grid_module_pbf4_reva_hardware_init>:

void grid_module_pbf4_reva_hardware_init(void){
    7f80:	b570      	push	{r4, r5, r6, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    7f82:	4c0b      	ldr	r4, [pc, #44]	; (7fb0 <grid_module_pbf4_reva_hardware_init+0x30>)
    7f84:	4e0b      	ldr	r6, [pc, #44]	; (7fb4 <grid_module_pbf4_reva_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    7f86:	4d0c      	ldr	r5, [pc, #48]	; (7fb8 <grid_module_pbf4_reva_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    7f88:	4b0c      	ldr	r3, [pc, #48]	; (7fbc <grid_module_pbf4_reva_hardware_init+0x3c>)
    7f8a:	2200      	movs	r2, #0
    7f8c:	4611      	mov	r1, r2
    7f8e:	4620      	mov	r0, r4
    7f90:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_pbf4_reva_hardware_transfer_complete_cb);
    7f92:	2200      	movs	r2, #0
    7f94:	4b09      	ldr	r3, [pc, #36]	; (7fbc <grid_module_pbf4_reva_hardware_init+0x3c>)
    7f96:	4611      	mov	r1, r2
    7f98:	4628      	mov	r0, r5
    7f9a:	47b0      	blx	r6
	
	adc_async_enable_channel(&ADC_0, 0);
    7f9c:	4620      	mov	r0, r4
    7f9e:	4c08      	ldr	r4, [pc, #32]	; (7fc0 <grid_module_pbf4_reva_hardware_init+0x40>)
    7fa0:	2100      	movs	r1, #0
    7fa2:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    7fa4:	4628      	mov	r0, r5
    7fa6:	4623      	mov	r3, r4
    7fa8:	2100      	movs	r1, #0

}
    7faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    7fae:	4718      	bx	r3
    7fb0:	20014be4 	.word	0x20014be4
    7fb4:	0000d899 	.word	0x0000d899
    7fb8:	20014db8 	.word	0x20014db8
    7fbc:	00007ba9 	.word	0x00007ba9
    7fc0:	0000d859 	.word	0x0000d859

00007fc4 <grid_module_pbf4_reva_init>:




void grid_module_pbf4_reva_init(){
    7fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    7fc8:	220e      	movs	r2, #14
    7fca:	4c16      	ldr	r4, [pc, #88]	; (8024 <grid_module_pbf4_reva_init+0x60>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);

	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
		
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7fcc:	4e16      	ldr	r6, [pc, #88]	; (8028 <grid_module_pbf4_reva_init+0x64>)
    7fce:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8044 <grid_module_pbf4_reva_init+0x80>
    7fd2:	4f16      	ldr	r7, [pc, #88]	; (802c <grid_module_pbf4_reva_init+0x68>)
	grid_ain_init(16, 5, 14, 7);
    7fd4:	2307      	movs	r3, #7
    7fd6:	2105      	movs	r1, #5
    7fd8:	2010      	movs	r0, #16
    7fda:	47a0      	blx	r4
	grid_led_lowlevel_init(&grid_led_state, 12);	
    7fdc:	4b14      	ldr	r3, [pc, #80]	; (8030 <grid_module_pbf4_reva_init+0x6c>)
    7fde:	4815      	ldr	r0, [pc, #84]	; (8034 <grid_module_pbf4_reva_init+0x70>)
    7fe0:	210c      	movs	r1, #12
    7fe2:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    7fe4:	4810      	ldr	r0, [pc, #64]	; (8028 <grid_module_pbf4_reva_init+0x64>)
    7fe6:	4b14      	ldr	r3, [pc, #80]	; (8038 <grid_module_pbf4_reva_init+0x74>)
    7fe8:	2104      	movs	r1, #4
    7fea:	4798      	blx	r3
    7fec:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7fee:	220c      	movs	r2, #12
    7ff0:	b2e1      	uxtb	r1, r4
    7ff2:	4630      	mov	r0, r6
    7ff4:	47c8      	blx	r9
		
		for(uint8_t j=0; j<12; j++){
    7ff6:	ea4f 1804 	mov.w	r8, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 12);
    7ffa:	2500      	movs	r5, #0
			
				
			if (j<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
				
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    7ffc:	6870      	ldr	r0, [r6, #4]
			if (j<8){ // PORENTIOMETERS & FADERS -> MIDI Control Change
    7ffe:	2d07      	cmp	r5, #7
    8000:	b2e9      	uxtb	r1, r5
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    8002:	bf94      	ite	ls
    8004:	2201      	movls	r2, #1
			
			}
			else{ // BUTTONS -> MIDI Note On/Off
				
				grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_BUTTON);
    8006:	2202      	movhi	r2, #2
    8008:	4440      	add	r0, r8
    800a:	3501      	adds	r5, #1
    800c:	47b8      	blx	r7
		for(uint8_t j=0; j<12; j++){
    800e:	2d0c      	cmp	r5, #12
    8010:	d1f4      	bne.n	7ffc <grid_module_pbf4_reva_init+0x38>
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8012:	3401      	adds	r4, #1
    8014:	2c04      	cmp	r4, #4
    8016:	d1ea      	bne.n	7fee <grid_module_pbf4_reva_init+0x2a>
			}
			
		}	
	}
			
	grid_module_pbf4_reva_hardware_init();
    8018:	4b08      	ldr	r3, [pc, #32]	; (803c <grid_module_pbf4_reva_init+0x78>)
    801a:	4798      	blx	r3
	grid_module_pbf4_reva_hardware_start_transfer();
	
    801c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_pbf4_reva_hardware_start_transfer();
    8020:	4b07      	ldr	r3, [pc, #28]	; (8040 <grid_module_pbf4_reva_init+0x7c>)
    8022:	4718      	bx	r3
    8024:	000045ed 	.word	0x000045ed
    8028:	20006f98 	.word	0x20006f98
    802c:	0000adf5 	.word	0x0000adf5
    8030:	00006e95 	.word	0x00006e95
    8034:	200146a0 	.word	0x200146a0
    8038:	00009a09 	.word	0x00009a09
    803c:	00007f81 	.word	0x00007f81
    8040:	00007b85 	.word	0x00007b85
    8044:	00009a3d 	.word	0x00009a3d

00008048 <grid_module_po16_revb_hardware_start_transfer>:

volatile uint8_t grid_module_po16_revb_hardware_transfer_complete = 0;
volatile uint8_t grid_module_po16_revb_mux =0;
volatile uint8_t grid_module_po16_revb_mux_lookup[16] = {0, 1, 4, 5, 8, 9, 12, 13, 2, 3, 6, 7, 10, 11, 14, 15};

void grid_module_po16_revb_hardware_start_transfer(void){
    8048:	b510      	push	{r4, lr}
	
	adc_async_start_conversion(&ADC_0);
    804a:	4c04      	ldr	r4, [pc, #16]	; (805c <grid_module_po16_revb_hardware_start_transfer+0x14>)
    804c:	4804      	ldr	r0, [pc, #16]	; (8060 <grid_module_po16_revb_hardware_start_transfer+0x18>)
    804e:	47a0      	blx	r4
	adc_async_start_conversion(&ADC_1);
    8050:	4623      	mov	r3, r4
    8052:	4804      	ldr	r0, [pc, #16]	; (8064 <grid_module_po16_revb_hardware_start_transfer+0x1c>)
	
}
    8054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	adc_async_start_conversion(&ADC_1);
    8058:	4718      	bx	r3
    805a:	bf00      	nop
    805c:	0000d9cd 	.word	0x0000d9cd
    8060:	20014be4 	.word	0x20014be4
    8064:	20014db8 	.word	0x20014db8

00008068 <grid_module_po16_revb_hardware_transfer_complete_cb>:

static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    8068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    806c:	4a88      	ldr	r2, [pc, #544]	; (8290 <grid_module_po16_revb_hardware_transfer_complete_cb+0x228>)
    806e:	7813      	ldrb	r3, [r2, #0]
static void grid_module_po16_revb_hardware_transfer_complete_cb(void){
    8070:	b089      	sub	sp, #36	; 0x24
    8072:	4614      	mov	r4, r2
	if (grid_module_po16_revb_hardware_transfer_complete == 0){
    8074:	b933      	cbnz	r3, 8084 <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c>
		grid_module_po16_revb_hardware_transfer_complete++;
    8076:	7813      	ldrb	r3, [r2, #0]
    8078:	3301      	adds	r3, #1
    807a:	b2db      	uxtb	r3, r3
    807c:	7013      	strb	r3, [r2, #0]
	}
	
	
	grid_module_po16_revb_hardware_transfer_complete = 0;
	grid_module_po16_revb_hardware_start_transfer();
}
    807e:	b009      	add	sp, #36	; 0x24
    8080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (grid_sys_state.bank_active_changed){
    8084:	4d83      	ldr	r5, [pc, #524]	; (8294 <grid_module_po16_revb_hardware_transfer_complete_cb+0x22c>)
    8086:	7c6b      	ldrb	r3, [r5, #17]
    8088:	b9fb      	cbnz	r3, 80ca <grid_module_po16_revb_hardware_transfer_complete_cb+0x62>
	uint16_t adcresult_0 = 0;
    808a:	2300      	movs	r3, #0
    808c:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint16_t adcresult_1 = 0;
    8090:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    8094:	7863      	ldrb	r3, [r4, #1]
    8096:	4a80      	ldr	r2, [pc, #512]	; (8298 <grid_module_po16_revb_hardware_transfer_complete_cb+0x230>)
    8098:	3308      	adds	r3, #8
    809a:	5cd7      	ldrb	r7, [r2, r3]
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    809c:	7863      	ldrb	r3, [r4, #1]
    809e:	b2db      	uxtb	r3, r3
	uint8_t adc_index_0 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+8];
    80a0:	b2ff      	uxtb	r7, r7
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    80a2:	5cd6      	ldrb	r6, [r2, r3]
	grid_module_po16_revb_mux++;
    80a4:	7863      	ldrb	r3, [r4, #1]
    80a6:	3301      	adds	r3, #1
    80a8:	b2db      	uxtb	r3, r3
    80aa:	7063      	strb	r3, [r4, #1]
	grid_module_po16_revb_mux%=8;
    80ac:	7863      	ldrb	r3, [r4, #1]
    80ae:	f003 0307 	and.w	r3, r3, #7
    80b2:	7063      	strb	r3, [r4, #1]
	gpio_set_pin_level(MUX_A, grid_module_po16_revb_mux/1%2);
    80b4:	7863      	ldrb	r3, [r4, #1]
    80b6:	f013 0f01 	tst.w	r3, #1
	uint8_t adc_index_1 = grid_module_po16_revb_mux_lookup[grid_module_po16_revb_mux+0];
    80ba:	b2f6      	uxtb	r6, r6
    80bc:	4b77      	ldr	r3, [pc, #476]	; (829c <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    80be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    80c2:	d128      	bne.n	8116 <grid_module_po16_revb_hardware_transfer_complete_cb+0xae>
    80c4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
    80c8:	e027      	b.n	811a <grid_module_po16_revb_hardware_transfer_complete_cb+0xb2>
		grid_sys_state.bank_active_changed = 0;
    80ca:	2600      	movs	r6, #0
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    80cc:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 82b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    80d0:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 82c4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x25c>
		grid_sys_state.bank_active_changed = 0;
    80d4:	746e      	strb	r6, [r5, #17]
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    80d6:	f04f 0a64 	mov.w	sl, #100	; 0x64
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    80da:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80de:	7bea      	ldrb	r2, [r5, #15]
    80e0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    80e4:	b2f7      	uxtb	r7, r6
    80e6:	7a5b      	ldrb	r3, [r3, #9]
    80e8:	42bb      	cmp	r3, r7
    80ea:	d9ce      	bls.n	808a <grid_module_po16_revb_hardware_transfer_complete_cb+0x22>
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    80ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    80f0:	7bea      	ldrb	r2, [r5, #15]
    80f2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    80f6:	4640      	mov	r0, r8
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    80f8:	68db      	ldr	r3, [r3, #12]
    80fa:	fb0a 3307 	mla	r3, sl, r7, r3
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    80fe:	463a      	mov	r2, r7
			grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[i].template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER] = i;
    8100:	60df      	str	r7, [r3, #12]
			grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_INIT);
    8102:	7be9      	ldrb	r1, [r5, #15]
    8104:	2300      	movs	r3, #0
    8106:	47c8      	blx	r9
            grid_ui_smart_trigger_local(&grid_ui_state, grid_sys_state.bank_activebank_number, i, GRID_UI_EVENT_AVC7);
    8108:	7be9      	ldrb	r1, [r5, #15]
    810a:	2301      	movs	r3, #1
    810c:	463a      	mov	r2, r7
    810e:	4640      	mov	r0, r8
    8110:	47c8      	blx	r9
		for (uint8_t i=0; i<grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list_length; i++){
    8112:	3601      	adds	r6, #1
    8114:	e7e1      	b.n	80da <grid_module_po16_revb_hardware_transfer_complete_cb+0x72>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8116:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	gpio_set_pin_level(MUX_B, grid_module_po16_revb_mux/2%2);
    811a:	7863      	ldrb	r3, [r4, #1]
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    811c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 82c8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x260>
    8120:	485f      	ldr	r0, [pc, #380]	; (82a0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x238>)
	uint32_t input_0 = adcresult_0*1.03;	
    8122:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 82cc <grid_module_po16_revb_hardware_transfer_complete_cb+0x264>
    8126:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 82d0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x268>
    812a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 82d4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x26c>
    812e:	f013 0f02 	tst.w	r3, #2
    8132:	4b5a      	ldr	r3, [pc, #360]	; (829c <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    8134:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    8138:	bf14      	ite	ne
    813a:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    813e:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	gpio_set_pin_level(MUX_C, grid_module_po16_revb_mux/4%2);
    8142:	7863      	ldrb	r3, [r4, #1]
    8144:	f013 0f04 	tst.w	r3, #4
    8148:	4b54      	ldr	r3, [pc, #336]	; (829c <grid_module_po16_revb_hardware_transfer_complete_cb+0x234>)
    814a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    814e:	bf14      	ite	ne
    8150:	f8c3 2118 	strne.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8154:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
	adc_async_read_channel(&ADC_0, 0, &adcresult_0, 2);
    8158:	2100      	movs	r1, #0
    815a:	2302      	movs	r3, #2
    815c:	aa03      	add	r2, sp, #12
    815e:	47c0      	blx	r8
	adc_async_read_channel(&ADC_1, 0, &adcresult_1, 2);
    8160:	2302      	movs	r3, #2
    8162:	f10d 020e 	add.w	r2, sp, #14
    8166:	2100      	movs	r1, #0
    8168:	484e      	ldr	r0, [pc, #312]	; (82a4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x23c>)
    816a:	47c0      	blx	r8
	uint32_t input_0 = adcresult_0*1.03;	
    816c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    8170:	47d8      	blx	fp
    8172:	a345      	add	r3, pc, #276	; (adr r3, 8288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>)
    8174:	e9d3 2300 	ldrd	r2, r3, [r3]
    8178:	47d0      	blx	sl
    817a:	47c8      	blx	r9
	adcresult_0 = input_0;
    817c:	f64f 78ff 	movw	r8, #65535	; 0xffff
    8180:	4540      	cmp	r0, r8
    8182:	bf28      	it	cs
    8184:	4640      	movcs	r0, r8
    8186:	f8ad 000c 	strh.w	r0, [sp, #12]
	uint32_t input_1 = adcresult_1*1.03;	
    818a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    818e:	47d8      	blx	fp
    8190:	a33d      	add	r3, pc, #244	; (adr r3, 8288 <grid_module_po16_revb_hardware_transfer_complete_cb+0x220>)
    8192:	e9d3 2300 	ldrd	r2, r3, [r3]
    8196:	47d0      	blx	sl
    8198:	47c8      	blx	r9
	adcresult_1 = input_1;
    819a:	4540      	cmp	r0, r8
    819c:	bf28      	it	cs
    819e:	4640      	movcs	r0, r8
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    81a0:	4b41      	ldr	r3, [pc, #260]	; (82a8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x240>)
	adcresult_1 = input_1;
    81a2:	f8ad 000e 	strh.w	r0, [sp, #14]
	if (grid_sys_get_hwcfg() == GRID_MODULE_PO16_RevC){
    81a6:	4798      	blx	r3
    81a8:	2808      	cmp	r0, #8
    81aa:	d109      	bne.n	81c0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x158>
		adcresult_0	= 65535 - adcresult_0;
    81ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    81b0:	43db      	mvns	r3, r3
    81b2:	f8ad 300c 	strh.w	r3, [sp, #12]
		adcresult_1 = 65535 - adcresult_1;
    81b6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    81ba:	43db      	mvns	r3, r3
    81bc:	f8ad 300e 	strh.w	r3, [sp, #14]
	grid_ain_add_sample(adc_index_0, adcresult_0);
    81c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    81c4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 82d8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x270>
    81c8:	4638      	mov	r0, r7
    81ca:	47c0      	blx	r8
	grid_ain_add_sample(adc_index_1, adcresult_1);
    81cc:	4630      	mov	r0, r6
    81ce:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    81d2:	47c0      	blx	r8
	uint8_t grid_module_po16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    81d4:	4b35      	ldr	r3, [pc, #212]	; (82ac <grid_module_po16_revb_hardware_transfer_complete_cb+0x244>)
	result_index[0] = adc_index_0;
    81d6:	f88d 7008 	strb.w	r7, [sp, #8]
	result_index[1] = adc_index_1;
    81da:	f88d 6009 	strb.w	r6, [sp, #9]
	uint8_t grid_module_po16_mux_reversed_lookup[16] =   {12, 13, 14, 15, 8, 9, 10, 11, 4, 5, 6, 7, 0, 1, 2, 3};
    81de:	f103 0710 	add.w	r7, r3, #16
    81e2:	ae04      	add	r6, sp, #16
    81e4:	6818      	ldr	r0, [r3, #0]
    81e6:	6859      	ldr	r1, [r3, #4]
    81e8:	4632      	mov	r2, r6
    81ea:	c203      	stmia	r2!, {r0, r1}
    81ec:	3308      	adds	r3, #8
    81ee:	42bb      	cmp	r3, r7
    81f0:	4616      	mov	r6, r2
    81f2:	d1f7      	bne.n	81e4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x17c>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    81f4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 82b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>
    81f8:	f10d 0a08 	add.w	sl, sp, #8
	for (uint8_t i=0; i<2; i++)
    81fc:	f04f 0900 	mov.w	r9, #0
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8200:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8204:	7bea      	ldrb	r2, [r5, #15]
		uint8_t res_index = result_index[i];
    8206:	f81a 6b01 	ldrb.w	r6, [sl], #1
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    820a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
		if (grid_ain_get_changed(res_index)){
    820e:	4630      	mov	r0, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8210:	68df      	ldr	r7, [r3, #12]
		if (grid_ain_get_changed(res_index)){
    8212:	4b27      	ldr	r3, [pc, #156]	; (82b0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x248>)
    8214:	4798      	blx	r3
    8216:	b350      	cbz	r0, 826e <grid_module_po16_revb_hardware_transfer_complete_cb+0x206>
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8218:	2264      	movs	r2, #100	; 0x64
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    821a:	a908      	add	r1, sp, #32
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    821c:	fb16 f202 	smulbb	r2, r6, r2
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    8220:	4431      	add	r1, r6
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8222:	18bb      	adds	r3, r7, r2
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    8224:	f811 1c10 	ldrb.w	r1, [r1, #-16]
		uint32_t* template_parameter_list = grid_ui_state.bank_list[grid_sys_state.bank_activebank_number].element_list[res_index].template_parameter_list;
    8228:	60de      	str	r6, [r3, #12]
			template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_NUMBER_REVERSED] = grid_module_po16_mux_reversed_lookup[res_index];
    822a:	6119      	str	r1, [r3, #16]
    822c:	2700      	movs	r7, #0
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    822e:	4b21      	ldr	r3, [pc, #132]	; (82b4 <grid_module_po16_revb_hardware_transfer_complete_cb+0x24c>)
    8230:	9201      	str	r2, [sp, #4]
    8232:	685b      	ldr	r3, [r3, #4]
    8234:	443b      	add	r3, r7
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    8236:	2107      	movs	r1, #7
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    8238:	68db      	ldr	r3, [r3, #12]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    823a:	4630      	mov	r0, r6
                template_parameter_list = grid_ui_state.bank_list[j].element_list[res_index].template_parameter_list;
    823c:	eb03 0b02 	add.w	fp, r3, r2
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    8240:	4b1d      	ldr	r3, [pc, #116]	; (82b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
    8242:	4798      	blx	r3
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    8244:	4b1c      	ldr	r3, [pc, #112]	; (82b8 <grid_module_po16_revb_hardware_transfer_complete_cb+0x250>)
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS] = grid_ain_get_average(res_index, 7);
    8246:	f8cb 0014 	str.w	r0, [fp, #20]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    824a:	2107      	movs	r1, #7
    824c:	4630      	mov	r0, r6
    824e:	4798      	blx	r3
    8250:	3710      	adds	r7, #16
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    8252:	2300      	movs	r3, #0
            for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    8254:	2f40      	cmp	r7, #64	; 0x40
    8256:	9a01      	ldr	r2, [sp, #4]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14U] = grid_ain_get_average(res_index, 7);
    8258:	f8cb 0018 	str.w	r0, [fp, #24]
                template_parameter_list[GRID_TEMPLATE_P_PARAMETER_CONTROLLER_ABS14L] = 0;          
    825c:	f8cb 301c 	str.w	r3, [fp, #28]
            for (uint8_t j=0; j<GRID_SYS_BANK_MAXNUMBER; j++){
    8260:	d1e5      	bne.n	822e <grid_module_po16_revb_hardware_transfer_complete_cb+0x1c6>
			grid_ui_smart_trigger(&grid_ui_state, grid_sys_state.bank_activebank_number, res_index, GRID_UI_EVENT_AVC7);		
    8262:	4632      	mov	r2, r6
    8264:	7be9      	ldrb	r1, [r5, #15]
    8266:	4e15      	ldr	r6, [pc, #84]	; (82bc <grid_module_po16_revb_hardware_transfer_complete_cb+0x254>)
    8268:	2301      	movs	r3, #1
    826a:	4640      	mov	r0, r8
    826c:	47b0      	blx	r6
	for (uint8_t i=0; i<2; i++)
    826e:	f1b9 0f00 	cmp.w	r9, #0
    8272:	d004      	beq.n	827e <grid_module_po16_revb_hardware_transfer_complete_cb+0x216>
	grid_module_po16_revb_hardware_transfer_complete = 0;
    8274:	2300      	movs	r3, #0
    8276:	7023      	strb	r3, [r4, #0]
	grid_module_po16_revb_hardware_start_transfer();
    8278:	4b11      	ldr	r3, [pc, #68]	; (82c0 <grid_module_po16_revb_hardware_transfer_complete_cb+0x258>)
    827a:	4798      	blx	r3
    827c:	e6ff      	b.n	807e <grid_module_po16_revb_hardware_transfer_complete_cb+0x16>
    827e:	f04f 0901 	mov.w	r9, #1
    8282:	e7bd      	b.n	8200 <grid_module_po16_revb_hardware_transfer_complete_cb+0x198>
    8284:	f3af 8000 	nop.w
    8288:	47ae147b 	.word	0x47ae147b
    828c:	3ff07ae1 	.word	0x3ff07ae1
    8290:	2000080d 	.word	0x2000080d
    8294:	20006fa4 	.word	0x20006fa4
    8298:	20000339 	.word	0x20000339
    829c:	41008000 	.word	0x41008000
    82a0:	20014be4 	.word	0x20014be4
    82a4:	20014db8 	.word	0x20014db8
    82a8:	00009885 	.word	0x00009885
    82ac:	00015852 	.word	0x00015852
    82b0:	000046f9 	.word	0x000046f9
    82b4:	20006f98 	.word	0x20006f98
    82b8:	00004709 	.word	0x00004709
    82bc:	0000aabd 	.word	0x0000aabd
    82c0:	00008049 	.word	0x00008049
    82c4:	0000af09 	.word	0x0000af09
    82c8:	0000d911 	.word	0x0000d911
    82cc:	00012731 	.word	0x00012731
    82d0:	00012805 	.word	0x00012805
    82d4:	00012c29 	.word	0x00012c29
    82d8:	00004631 	.word	0x00004631

000082dc <grid_module_po16_revb_hardware_init>:

void grid_module_po16_revb_hardware_init(void){
    82dc:	b570      	push	{r4, r5, r6, lr}
	
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    82de:	4c0b      	ldr	r4, [pc, #44]	; (830c <grid_module_po16_revb_hardware_init+0x30>)
    82e0:	4e0b      	ldr	r6, [pc, #44]	; (8310 <grid_module_po16_revb_hardware_init+0x34>)
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    82e2:	4d0c      	ldr	r5, [pc, #48]	; (8314 <grid_module_po16_revb_hardware_init+0x38>)
	adc_async_register_callback(&ADC_0, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    82e4:	4b0c      	ldr	r3, [pc, #48]	; (8318 <grid_module_po16_revb_hardware_init+0x3c>)
    82e6:	2200      	movs	r2, #0
    82e8:	4611      	mov	r1, r2
    82ea:	4620      	mov	r0, r4
    82ec:	47b0      	blx	r6
	adc_async_register_callback(&ADC_1, 0, ADC_ASYNC_CONVERT_CB, grid_module_po16_revb_hardware_transfer_complete_cb);
    82ee:	2200      	movs	r2, #0
    82f0:	4b09      	ldr	r3, [pc, #36]	; (8318 <grid_module_po16_revb_hardware_init+0x3c>)
    82f2:	4611      	mov	r1, r2
    82f4:	4628      	mov	r0, r5
    82f6:	47b0      	blx	r6
		
	adc_async_enable_channel(&ADC_0, 0);
    82f8:	4620      	mov	r0, r4
    82fa:	4c08      	ldr	r4, [pc, #32]	; (831c <grid_module_po16_revb_hardware_init+0x40>)
    82fc:	2100      	movs	r1, #0
    82fe:	47a0      	blx	r4
	adc_async_enable_channel(&ADC_1, 0);
    8300:	4628      	mov	r0, r5
    8302:	4623      	mov	r3, r4
    8304:	2100      	movs	r1, #0

}
    8306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	adc_async_enable_channel(&ADC_1, 0);
    830a:	4718      	bx	r3
    830c:	20014be4 	.word	0x20014be4
    8310:	0000d899 	.word	0x0000d899
    8314:	20014db8 	.word	0x20014db8
    8318:	00008069 	.word	0x00008069
    831c:	0000d859 	.word	0x0000d859

00008320 <grid_module_po16_revb_init>:




void grid_module_po16_revb_init(){
    8320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	// 16 pot, depth of 5, 14bit internal, 7bit result;
	grid_ain_init(16, 5, 14, 7);
    8324:	220e      	movs	r2, #14
    8326:	4c15      	ldr	r4, [pc, #84]	; (837c <grid_module_po16_revb_init+0x5c>)
	
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
	
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){	
		
		grid_ui_bank_init(&grid_ui_state, i, 16);
    8328:	4e15      	ldr	r6, [pc, #84]	; (8380 <grid_module_po16_revb_init+0x60>)
    832a:	4f16      	ldr	r7, [pc, #88]	; (8384 <grid_module_po16_revb_init+0x64>)
		
		for(uint8_t j=0; j<16; j++){
			
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    832c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 839c <grid_module_po16_revb_init+0x7c>
	grid_ain_init(16, 5, 14, 7);
    8330:	2307      	movs	r3, #7
    8332:	2105      	movs	r1, #5
    8334:	2010      	movs	r0, #16
    8336:	47a0      	blx	r4
	grid_led_lowlevel_init(&grid_led_state, 16);
    8338:	4b13      	ldr	r3, [pc, #76]	; (8388 <grid_module_po16_revb_init+0x68>)
    833a:	4814      	ldr	r0, [pc, #80]	; (838c <grid_module_po16_revb_init+0x6c>)
    833c:	2110      	movs	r1, #16
    833e:	4798      	blx	r3
	grid_ui_model_init(&grid_ui_state, GRID_SYS_BANK_MAXNUMBER);
    8340:	480f      	ldr	r0, [pc, #60]	; (8380 <grid_module_po16_revb_init+0x60>)
    8342:	4b13      	ldr	r3, [pc, #76]	; (8390 <grid_module_po16_revb_init+0x70>)
    8344:	2104      	movs	r1, #4
    8346:	4798      	blx	r3
    8348:	2400      	movs	r4, #0
		grid_ui_bank_init(&grid_ui_state, i, 16);
    834a:	2210      	movs	r2, #16
    834c:	b2e1      	uxtb	r1, r4
    834e:	4630      	mov	r0, r6
    8350:	47b8      	blx	r7
		for(uint8_t j=0; j<16; j++){
    8352:	ea4f 1904 	mov.w	r9, r4, lsl #4
		grid_ui_bank_init(&grid_ui_state, i, 16);
    8356:	2500      	movs	r5, #0
			grid_ui_element_init(&grid_ui_state.bank_list[i], j, GRID_UI_ELEMENT_POTENTIOMETER);
    8358:	6870      	ldr	r0, [r6, #4]
    835a:	b2e9      	uxtb	r1, r5
    835c:	2201      	movs	r2, #1
    835e:	4448      	add	r0, r9
    8360:	3501      	adds	r5, #1
    8362:	47c0      	blx	r8
		for(uint8_t j=0; j<16; j++){
    8364:	2d10      	cmp	r5, #16
    8366:	d1f7      	bne.n	8358 <grid_module_po16_revb_init+0x38>
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){	
    8368:	3401      	adds	r4, #1
    836a:	2c04      	cmp	r4, #4
    836c:	d1ed      	bne.n	834a <grid_module_po16_revb_init+0x2a>

		}
	}
	
	grid_module_po16_revb_hardware_init();
    836e:	4b09      	ldr	r3, [pc, #36]	; (8394 <grid_module_po16_revb_init+0x74>)
    8370:	4798      	blx	r3
	grid_module_po16_revb_hardware_start_transfer();
	
    8372:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_module_po16_revb_hardware_start_transfer();
    8376:	4b08      	ldr	r3, [pc, #32]	; (8398 <grid_module_po16_revb_init+0x78>)
    8378:	4718      	bx	r3
    837a:	bf00      	nop
    837c:	000045ed 	.word	0x000045ed
    8380:	20006f98 	.word	0x20006f98
    8384:	00009a3d 	.word	0x00009a3d
    8388:	00006e95 	.word	0x00006e95
    838c:	200146a0 	.word	0x200146a0
    8390:	00009a09 	.word	0x00009a09
    8394:	000082dd 	.word	0x000082dd
    8398:	00008049 	.word	0x00008049
    839c:	0000adf5 	.word	0x0000adf5

000083a0 <grid_msg_header_set_len>:

#include "grid_msg.h"


// ======================= GRID MSG LEN ======================//
void	grid_msg_header_set_len(struct grid_msg* msg, uint8_t len){
    83a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    83a2:	2200      	movs	r2, #0
    83a4:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, len, &error);
    83a8:	f10d 020f 	add.w	r2, sp, #15
    83ac:	9200      	str	r2, [sp, #0]
    83ae:	2202      	movs	r2, #2
void	grid_msg_header_set_len(struct grid_msg* msg, uint8_t len){
    83b0:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, len, &error);
    83b2:	4c02      	ldr	r4, [pc, #8]	; (83bc <grid_msg_header_set_len+0x1c>)
    83b4:	4611      	mov	r1, r2
    83b6:	47a0      	blx	r4
	
}
    83b8:	b004      	add	sp, #16
    83ba:	bd10      	pop	{r4, pc}
    83bc:	000099c5 	.word	0x000099c5

000083c0 <grid_msg_header_set_id>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_LEN_offset, GRID_BRC_LEN_length, &error);
}

// ======================= GRID MSG ID ======================//
void	grid_msg_header_set_id(struct grid_msg* msg, uint8_t id){
    83c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    83c2:	2200      	movs	r2, #0
    83c4:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, id, &error);
    83c8:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_id(struct grid_msg* msg, uint8_t id){
    83cc:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, id, &error);
    83ce:	9200      	str	r2, [sp, #0]
    83d0:	4c02      	ldr	r4, [pc, #8]	; (83dc <grid_msg_header_set_id+0x1c>)
    83d2:	2202      	movs	r2, #2
    83d4:	2104      	movs	r1, #4
    83d6:	47a0      	blx	r4
	
}
    83d8:	b004      	add	sp, #16
    83da:	bd10      	pop	{r4, pc}
    83dc:	000099c5 	.word	0x000099c5

000083e0 <grid_msg_header_set_dx>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_ID_offset, GRID_BRC_ID_length, &error);
}

// ======================= GRID MSG DX ======================//
void	grid_msg_header_set_dx(struct grid_msg* msg, uint8_t dx){
    83e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    83e2:	2200      	movs	r2, #0
    83e4:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, dx, &error);
    83e8:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_dx(struct grid_msg* msg, uint8_t dx){
    83ec:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, dx, &error);
    83ee:	9200      	str	r2, [sp, #0]
    83f0:	4c02      	ldr	r4, [pc, #8]	; (83fc <grid_msg_header_set_dx+0x1c>)
    83f2:	2202      	movs	r2, #2
    83f4:	2106      	movs	r1, #6
    83f6:	47a0      	blx	r4
	
}
    83f8:	b004      	add	sp, #16
    83fa:	bd10      	pop	{r4, pc}
    83fc:	000099c5 	.word	0x000099c5

00008400 <grid_msg_header_get_dx>:


uint8_t grid_msg_header_get_dx(struct grid_msg* msg){
    8400:	b513      	push	{r0, r1, r4, lr}
	
	uint8_t error = 0;
    8402:	2300      	movs	r3, #0
    8404:	f88d 3007 	strb.w	r3, [sp, #7]
	return grid_msg_get_parameter(msg->header, GRID_BRC_DX_offset, GRID_BRC_DX_length, &error);
    8408:	4c04      	ldr	r4, [pc, #16]	; (841c <grid_msg_header_get_dx+0x1c>)
    840a:	f10d 0307 	add.w	r3, sp, #7
    840e:	2202      	movs	r2, #2
    8410:	2106      	movs	r1, #6
    8412:	47a0      	blx	r4
}
    8414:	b2c0      	uxtb	r0, r0
    8416:	b002      	add	sp, #8
    8418:	bd10      	pop	{r4, pc}
    841a:	bf00      	nop
    841c:	000099ad 	.word	0x000099ad

00008420 <grid_msg_header_set_dy>:

// ======================= GRID MSG DY ======================//
void	grid_msg_header_set_dy(struct grid_msg* msg, uint8_t dy){
    8420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    8422:	2200      	movs	r2, #0
    8424:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, dy, &error);
    8428:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_dy(struct grid_msg* msg, uint8_t dy){
    842c:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, dy, &error);
    842e:	9200      	str	r2, [sp, #0]
    8430:	4c02      	ldr	r4, [pc, #8]	; (843c <grid_msg_header_set_dy+0x1c>)
    8432:	2202      	movs	r2, #2
    8434:	2108      	movs	r1, #8
    8436:	47a0      	blx	r4
	
}
    8438:	b004      	add	sp, #16
    843a:	bd10      	pop	{r4, pc}
    843c:	000099c5 	.word	0x000099c5

00008440 <grid_msg_header_get_dy>:


uint8_t grid_msg_header_get_dy(struct grid_msg* msg){
    8440:	b513      	push	{r0, r1, r4, lr}
	
	uint8_t error = 0;
    8442:	2300      	movs	r3, #0
    8444:	f88d 3007 	strb.w	r3, [sp, #7]
	return grid_msg_get_parameter(msg->header, GRID_BRC_DY_offset, GRID_BRC_DY_length, &error);
    8448:	4c04      	ldr	r4, [pc, #16]	; (845c <grid_msg_header_get_dy+0x1c>)
    844a:	f10d 0307 	add.w	r3, sp, #7
    844e:	2202      	movs	r2, #2
    8450:	2108      	movs	r1, #8
    8452:	47a0      	blx	r4
}
    8454:	b2c0      	uxtb	r0, r0
    8456:	b002      	add	sp, #8
    8458:	bd10      	pop	{r4, pc}
    845a:	bf00      	nop
    845c:	000099ad 	.word	0x000099ad

00008460 <grid_msg_header_set_rot>:

// ======================= GRID MSG ROT ======================//
void	grid_msg_header_set_rot(struct grid_msg* msg, uint8_t rot){
    8460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    8462:	2200      	movs	r2, #0
    8464:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, rot, &error);
    8468:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_rot(struct grid_msg* msg, uint8_t rot){
    846c:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, rot, &error);
    846e:	9200      	str	r2, [sp, #0]
    8470:	4c02      	ldr	r4, [pc, #8]	; (847c <grid_msg_header_set_rot+0x1c>)
    8472:	2202      	movs	r2, #2
    8474:	210c      	movs	r1, #12
    8476:	47a0      	blx	r4
	
}
    8478:	b004      	add	sp, #16
    847a:	bd10      	pop	{r4, pc}
    847c:	000099c5 	.word	0x000099c5

00008480 <grid_msg_header_set_age>:
	uint8_t error = 0;
	return grid_msg_get_parameter(msg->header, GRID_BRC_ROT_offset, GRID_BRC_ROT_length, &error);
}

// ======================= GRID MSG AGE ======================//
void	grid_msg_header_set_age(struct grid_msg* msg, uint8_t age){
    8480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	
	uint8_t error = 0;
    8482:	2200      	movs	r2, #0
    8484:	f88d 200f 	strb.w	r2, [sp, #15]
	grid_msg_set_parameter(msg->header, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, age, &error);
    8488:	f10d 020f 	add.w	r2, sp, #15
void	grid_msg_header_set_age(struct grid_msg* msg, uint8_t age){
    848c:	460b      	mov	r3, r1
	grid_msg_set_parameter(msg->header, GRID_BRC_AGE_offset, GRID_BRC_AGE_length, age, &error);
    848e:	9200      	str	r2, [sp, #0]
    8490:	4c02      	ldr	r4, [pc, #8]	; (849c <grid_msg_header_set_age+0x1c>)
    8492:	2202      	movs	r2, #2
    8494:	210a      	movs	r1, #10
    8496:	47a0      	blx	r4
	
}
    8498:	b004      	add	sp, #16
    849a:	bd10      	pop	{r4, pc}
    849c:	000099c5 	.word	0x000099c5

000084a0 <grid_msg_packet_get_length>:
}

// ======================= MSG GET PACKET LENGTH ======================//
uint32_t grid_msg_packet_get_length(struct grid_msg* msg){
	
	return (msg->header_length + msg->body_length + msg->footer_length);
    84a0:	e9d0 3264 	ldrd	r3, r2, [r0, #400]	; 0x190
    84a4:	f8d0 0198 	ldr.w	r0, [r0, #408]	; 0x198
    84a8:	4413      	add	r3, r2
}
    84aa:	4418      	add	r0, r3
    84ac:	4770      	bx	lr

000084ae <grid_msg_body_get_length>:

// ======================= MSG GET BODY LENGTH ======================//
uint32_t grid_msg_body_get_length(struct grid_msg* msg){
	
	return (msg->body_length);
}
    84ae:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    84b2:	4770      	bx	lr

000084b4 <grid_msg_body_append_text>:
	
	return (msg->footer_length);
}


void	grid_msg_body_append_text(struct grid_msg* msg, uint8_t* str, uint32_t len){
    84b4:	b570      	push	{r4, r5, r6, lr}
    84b6:	f8d0 5194 	ldr.w	r5, [r0, #404]	; 0x194

	
	for(uint32_t i=0; i<len; i++){
    84ba:	2300      	movs	r3, #0
    84bc:	4293      	cmp	r3, r2
    84be:	d103      	bne.n	84c8 <grid_msg_body_append_text+0x14>
		
		msg->body[msg->body_length + i] = str[i];
	}
	
	msg->body_length += len;
    84c0:	442b      	add	r3, r5
    84c2:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194

}
    84c6:	bd70      	pop	{r4, r5, r6, pc}
		msg->body[msg->body_length + i] = str[i];
    84c8:	18c4      	adds	r4, r0, r3
    84ca:	442c      	add	r4, r5
    84cc:	5cce      	ldrb	r6, [r1, r3]
    84ce:	7526      	strb	r6, [r4, #20]
	for(uint32_t i=0; i<len; i++){
    84d0:	3301      	adds	r3, #1
    84d2:	e7f3      	b.n	84bc <grid_msg_body_append_text+0x8>

000084d4 <grid_msg_body_append_text_escaped>:

void	grid_msg_body_append_text_escaped(struct grid_msg* msg, uint8_t* str, uint32_t len){
    84d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    84d6:	f8d0 6194 	ldr.w	r6, [r0, #404]	; 0x194
	
	for(uint32_t i=0; i<len; i++){
    84da:	2400      	movs	r4, #0
		
		if (str[i] == GRID_CONST_STX){
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
		}
		else if (str[i] == GRID_CONST_ETX){
			msg->body[msg->body_length + i] = GRID_CONST_ETX+128;
    84dc:	2783      	movs	r7, #131	; 0x83
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
    84de:	f04f 0c82 	mov.w	ip, #130	; 0x82
	for(uint32_t i=0; i<len; i++){
    84e2:	4294      	cmp	r4, r2
    84e4:	eb04 0306 	add.w	r3, r4, r6
    84e8:	d102      	bne.n	84f0 <grid_msg_body_append_text_escaped+0x1c>
			msg->body[msg->body_length + i] = str[i];
		}
		
	}
	
	msg->body_length += len;
    84ea:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194

}
    84ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (str[i] == GRID_CONST_STX){
    84f0:	5d0d      	ldrb	r5, [r1, r4]
    84f2:	2d02      	cmp	r5, #2
    84f4:	4403      	add	r3, r0
    84f6:	d103      	bne.n	8500 <grid_msg_body_append_text_escaped+0x2c>
			msg->body[msg->body_length + i] = GRID_CONST_STX+128;
    84f8:	f883 c014 	strb.w	ip, [r3, #20]
	for(uint32_t i=0; i<len; i++){
    84fc:	3401      	adds	r4, #1
    84fe:	e7f0      	b.n	84e2 <grid_msg_body_append_text_escaped+0xe>
		else if (str[i] == GRID_CONST_ETX){
    8500:	2d03      	cmp	r5, #3
			msg->body[msg->body_length + i] = GRID_CONST_ETX+128;
    8502:	bf0c      	ite	eq
    8504:	751f      	strbeq	r7, [r3, #20]
			msg->body[msg->body_length + i] = str[i];
    8506:	751d      	strbne	r5, [r3, #20]
    8508:	e7f8      	b.n	84fc <grid_msg_body_append_text_escaped+0x28>
	...

0000850c <grid_msg_text_get_parameter>:


uint32_t grid_msg_text_get_parameter(struct grid_msg* msg, uint32_t text_start_offset, uint8_t parameter_offset, uint8_t parameter_length){
    850c:	b420      	push	{r5}
	
	uint8_t error;
	
	return grid_sys_read_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, error);
    850e:	f101 0514 	add.w	r5, r1, #20
    8512:	4415      	add	r5, r2
    8514:	4619      	mov	r1, r3
    8516:	4428      	add	r0, r5
    8518:	4b02      	ldr	r3, [pc, #8]	; (8524 <grid_msg_text_get_parameter+0x18>)
	
}
    851a:	f85d 5b04 	ldr.w	r5, [sp], #4
	return grid_sys_read_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, error);
    851e:	2200      	movs	r2, #0
    8520:	4718      	bx	r3
    8522:	bf00      	nop
    8524:	000097f9 	.word	0x000097f9

00008528 <grid_msg_text_set_parameter>:

void grid_msg_text_set_parameter(struct grid_msg* msg, uint32_t text_start_offset, uint8_t parameter_offset, uint8_t parameter_length, uint32_t value){
    8528:	b420      	push	{r5}
	
	return grid_sys_write_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, value);
    852a:	f101 0514 	add.w	r5, r1, #20
    852e:	4415      	add	r5, r2
    8530:	4619      	mov	r1, r3
    8532:	9a01      	ldr	r2, [sp, #4]
    8534:	4b02      	ldr	r3, [pc, #8]	; (8540 <grid_msg_text_set_parameter+0x18>)
    8536:	4428      	add	r0, r5
	
}
    8538:	f85d 5b04 	ldr.w	r5, [sp], #4
	return grid_sys_write_hex_string_value(&msg->body[text_start_offset + parameter_offset], parameter_length, value);
    853c:	4718      	bx	r3
    853e:	bf00      	nop
    8540:	00009821 	.word	0x00009821

00008544 <grid_msg_init>:


// ======================= GRID MSG INIT ======================//
void	grid_msg_init(struct grid_msg* msg){
	
	msg->header_length = 0;
    8544:	2300      	movs	r3, #0
	msg->body_length = 0;
    8546:	e9c0 3364 	strd	r3, r3, [r0, #400]	; 0x190
	msg->footer_length = 0;
    854a:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
	
	for (uint32_t i=0; i<GRID_MSG_HEADER_maxlength; i++)
    854e:	1e42      	subs	r2, r0, #1
    8550:	f100 0113 	add.w	r1, r0, #19
	{
		msg->header[i] = 0;
    8554:	f802 3f01 	strb.w	r3, [r2, #1]!
	for (uint32_t i=0; i<GRID_MSG_HEADER_maxlength; i++)
    8558:	4291      	cmp	r1, r2
    855a:	d1fb      	bne.n	8554 <grid_msg_init+0x10>
    855c:	f100 0214 	add.w	r2, r0, #20
    8560:	f200 118b 	addw	r1, r0, #395	; 0x18b
	}
	
	for (uint32_t i=0; i<GRID_MSG_BODY_maxlength; i++)
	{
		msg->body[i] = 0;
    8564:	2300      	movs	r3, #0
    8566:	f802 3b01 	strb.w	r3, [r2], #1
	for (uint32_t i=0; i<GRID_MSG_BODY_maxlength; i++)
    856a:	428a      	cmp	r2, r1
    856c:	d1fb      	bne.n	8566 <grid_msg_init+0x22>
	}
	
	for (uint32_t i=0; i<GRID_MSG_FOOTER_maxlength; i++)
	{
		msg->footer[i] = 0;
    856e:	f880 318b 	strb.w	r3, [r0, #395]	; 0x18b
    8572:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
	}
	
		
}
    8576:	4770      	bx	lr

00008578 <grid_msg_init_header>:

// ======================= MSG INIT HEADER======================//

void	grid_msg_init_header(struct grid_msg* msg, uint8_t dx, uint8_t dy, uint8_t rot){
    8578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    857c:	461e      	mov	r6, r3
	
    
    uint8_t age = grid_sys_state.sessionid;
    857e:	4b13      	ldr	r3, [pc, #76]	; (85cc <grid_msg_init_header+0x54>)
    
	sprintf(msg->header, GRID_BRC_frame);
    8580:	f8df 9064 	ldr.w	r9, [pc, #100]	; 85e8 <grid_msg_init_header+0x70>
    uint8_t age = grid_sys_state.sessionid;
    8584:	795d      	ldrb	r5, [r3, #5]
	sprintf(msg->header, GRID_BRC_frame);
    8586:	2317      	movs	r3, #23
void	grid_msg_init_header(struct grid_msg* msg, uint8_t dx, uint8_t dy, uint8_t rot){
    8588:	4604      	mov	r4, r0
    858a:	4688      	mov	r8, r1
    858c:	4617      	mov	r7, r2
	sprintf(msg->header, GRID_BRC_frame);
    858e:	4910      	ldr	r1, [pc, #64]	; (85d0 <grid_msg_init_header+0x58>)
    8590:	9300      	str	r3, [sp, #0]
    8592:	2201      	movs	r2, #1
    8594:	230f      	movs	r3, #15
    8596:	47c8      	blx	r9
	msg->header_length = strlen(msg->header);
    8598:	4b0e      	ldr	r3, [pc, #56]	; (85d4 <grid_msg_init_header+0x5c>)
    859a:	4620      	mov	r0, r4
    859c:	4798      	blx	r3
	
	grid_msg_header_set_dx(msg, dx);
    859e:	4641      	mov	r1, r8
	msg->header_length = strlen(msg->header);
    85a0:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
	grid_msg_header_set_dx(msg, dx);
    85a4:	4b0c      	ldr	r3, [pc, #48]	; (85d8 <grid_msg_init_header+0x60>)
    85a6:	4620      	mov	r0, r4
    85a8:	4798      	blx	r3
	grid_msg_header_set_dy(msg, dy);
    85aa:	4639      	mov	r1, r7
    85ac:	4620      	mov	r0, r4
    85ae:	4b0b      	ldr	r3, [pc, #44]	; (85dc <grid_msg_init_header+0x64>)
    85b0:	4798      	blx	r3
	grid_msg_header_set_rot(msg, rot);
    85b2:	4631      	mov	r1, r6
    85b4:	4620      	mov	r0, r4
    85b6:	4b0a      	ldr	r3, [pc, #40]	; (85e0 <grid_msg_init_header+0x68>)
    85b8:	4798      	blx	r3
    uint8_t age = grid_sys_state.sessionid;
    85ba:	b2ed      	uxtb	r5, r5
	grid_msg_header_set_age(msg, age);
    85bc:	4b09      	ldr	r3, [pc, #36]	; (85e4 <grid_msg_init_header+0x6c>)
    85be:	4629      	mov	r1, r5
    85c0:	4620      	mov	r0, r4
	
	
}
    85c2:	b003      	add	sp, #12
    85c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	grid_msg_header_set_age(msg, age);
    85c8:	4718      	bx	r3
    85ca:	bf00      	nop
    85cc:	20006fa4 	.word	0x20006fa4
    85d0:	00015862 	.word	0x00015862
    85d4:	00013981 	.word	0x00013981
    85d8:	000083e1 	.word	0x000083e1
    85dc:	00008421 	.word	0x00008421
    85e0:	00008461 	.word	0x00008461
    85e4:	00008481 	.word	0x00008481
    85e8:	000134b9 	.word	0x000134b9

000085ec <grid_msg_packet_receive_char>:

// ======================= MSG RECEIVE CHAR ======================//
void	grid_msg_packet_receive_char(struct grid_msg* msg, uint8_t nextchar){
	
	if (msg->body_length == 0){
    85ec:	f8d0 2194 	ldr.w	r2, [r0, #404]	; 0x194
    85f0:	b96a      	cbnz	r2, 860e <grid_msg_packet_receive_char+0x22>
		
		if (nextchar != GRID_CONST_EOB){
    85f2:	2917      	cmp	r1, #23
			msg->header[msg->header_length] = nextchar;
    85f4:	bf15      	itete	ne
    85f6:	f8d0 3190 	ldrne.w	r3, [r0, #400]	; 0x190
			msg->header_length++;
		}
		else{
			msg->body[msg->body_length] = nextchar;
    85fa:	7501      	strbeq	r1, [r0, #20]
			msg->header[msg->header_length] = nextchar;
    85fc:	54c1      	strbne	r1, [r0, r3]
			msg->body_length++;
    85fe:	2301      	moveq	r3, #1
			msg->header_length++;
    8600:	bf1a      	itte	ne
    8602:	3301      	addne	r3, #1
    8604:	f8c0 3190 	strne.w	r3, [r0, #400]	; 0x190
			msg->body_length++;
    8608:	f8c0 3194 	streq.w	r3, [r0, #404]	; 0x194
    860c:	4770      	bx	lr
			
		}
		
	}
	else if(msg->footer_length == 0){
    860e:	f8d0 3198 	ldr.w	r3, [r0, #408]	; 0x198
    8612:	b96b      	cbnz	r3, 8630 <grid_msg_packet_receive_char+0x44>
		
		if (nextchar != GRID_CONST_EOT){
    8614:	2904      	cmp	r1, #4
    8616:	d005      	beq.n	8624 <grid_msg_packet_receive_char+0x38>
			msg->body[msg->body_length] = nextchar;
    8618:	1883      	adds	r3, r0, r2
			msg->body_length++;
    861a:	3201      	adds	r2, #1
			msg->body[msg->body_length] = nextchar;
    861c:	7519      	strb	r1, [r3, #20]
			msg->body_length++;
    861e:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
    8622:	4770      	bx	lr
		}
		else{
			msg->footer[msg->footer_length] = nextchar;
    8624:	f880 118b 	strb.w	r1, [r0, #395]	; 0x18b
			msg->footer_length++;
    8628:	2301      	movs	r3, #1
		
	}
	else{
		
		msg->footer[msg->footer_length] = nextchar;
		msg->footer_length++;
    862a:	f8c0 3198 	str.w	r3, [r0, #408]	; 0x198
		
	}
	
}
    862e:	4770      	bx	lr
		msg->footer[msg->footer_length] = nextchar;
    8630:	18c2      	adds	r2, r0, r3
		msg->footer_length++;
    8632:	3301      	adds	r3, #1
		msg->footer[msg->footer_length] = nextchar;
    8634:	f882 118b 	strb.w	r1, [r2, #395]	; 0x18b
		msg->footer_length++;
    8638:	e7f7      	b.n	862a <grid_msg_packet_receive_char+0x3e>

0000863a <grid_msg_packet_send_char>:

// ======================= GRID MSG SEND CHAR ======================//

uint8_t	grid_msg_packet_send_char(struct grid_msg* msg, uint32_t charindex){
	
	if (charindex < msg->header_length){
    863a:	f8d0 2190 	ldr.w	r2, [r0, #400]	; 0x190
    863e:	428a      	cmp	r2, r1
    8640:	d901      	bls.n	8646 <grid_msg_packet_send_char+0xc>
		
		return msg->header[charindex];
    8642:	5c40      	ldrb	r0, [r0, r1]
    8644:	4770      	bx	lr
	}
	else if (charindex < msg->body_length + msg->header_length){
    8646:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
    864a:	4413      	add	r3, r2
    864c:	428b      	cmp	r3, r1
    864e:	d903      	bls.n	8658 <grid_msg_packet_send_char+0x1e>
	
		return msg->body[charindex - msg->header_length];
    8650:	1a89      	subs	r1, r1, r2
    8652:	4408      	add	r0, r1
    8654:	7d00      	ldrb	r0, [r0, #20]
    8656:	4770      	bx	lr
	}
	else if (charindex < msg->footer_length + msg->body_length + msg->header_length){
    8658:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
    865c:	441a      	add	r2, r3
    865e:	428a      	cmp	r2, r1
	
		return msg->footer[charindex - msg->header_length - msg->body_length];
    8660:	bf83      	ittte	hi
    8662:	1ac9      	subhi	r1, r1, r3
    8664:	1840      	addhi	r0, r0, r1
    8666:	f890 018b 	ldrbhi.w	r0, [r0, #395]	; 0x18b
	}
	else{
		// OVERRUN
		return -1;
    866a:	20ff      	movls	r0, #255	; 0xff
	}
	
	
}
    866c:	4770      	bx	lr
	...

00008670 <grid_msg_packet_close>:



uint8_t	grid_msg_packet_close(struct grid_msg* msg){
    8670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8672:	4604      	mov	r4, r0
	
	
	sprintf(&msg->footer[msg->footer_length], "%c", GRID_CONST_EOT);
    8674:	f8d0 0198 	ldr.w	r0, [r0, #408]	; 0x198
    8678:	492b      	ldr	r1, [pc, #172]	; (8728 <grid_msg_packet_close+0xb8>)
    867a:	4d2c      	ldr	r5, [pc, #176]	; (872c <grid_msg_packet_close+0xbc>)
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    867c:	4e2c      	ldr	r6, [pc, #176]	; (8730 <grid_msg_packet_close+0xc0>)
	sprintf(&msg->footer[msg->footer_length], "%c", GRID_CONST_EOT);
    867e:	f200 108b 	addw	r0, r0, #395	; 0x18b
    8682:	2204      	movs	r2, #4
    8684:	4420      	add	r0, r4
    8686:	47a8      	blx	r5
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    8688:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
    868c:	f207 108b 	addw	r0, r7, #395	; 0x18b
    8690:	4420      	add	r0, r4
    8692:	47b0      	blx	r6
	
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    8694:	e9d4 3164 	ldrd	r3, r1, [r4, #400]	; 0x190
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    8698:	4438      	add	r0, r7
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    869a:	440b      	add	r3, r1
	grid_msg_header_set_id(msg, grid_sys_state.next_broadcast_message_id);	
    869c:	4f25      	ldr	r7, [pc, #148]	; (8734 <grid_msg_packet_close+0xc4>)
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    869e:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
	grid_msg_header_set_len(msg, msg->header_length + msg->body_length + msg->footer_length);
    86a2:	1819      	adds	r1, r3, r0
    86a4:	b2c9      	uxtb	r1, r1
    86a6:	4b24      	ldr	r3, [pc, #144]	; (8738 <grid_msg_packet_close+0xc8>)
    86a8:	4620      	mov	r0, r4
    86aa:	4798      	blx	r3
	grid_msg_header_set_id(msg, grid_sys_state.next_broadcast_message_id);	
    86ac:	f897 10ad 	ldrb.w	r1, [r7, #173]	; 0xad
    86b0:	4b22      	ldr	r3, [pc, #136]	; (873c <grid_msg_packet_close+0xcc>)
    86b2:	4620      	mov	r0, r4
    86b4:	4798      	blx	r3
	
	grid_sys_state.next_broadcast_message_id++;
    86b6:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
    86ba:	3301      	adds	r3, #1
    86bc:	b2db      	uxtb	r3, r3
    86be:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
	
	
	uint8_t checksum = 0;
	
	for (uint32_t i=0; i<msg->header_length; i++){
    86c2:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    86c6:	4621      	mov	r1, r4
    86c8:	4423      	add	r3, r4
	uint8_t checksum = 0;
    86ca:	2200      	movs	r2, #0
	for (uint32_t i=0; i<msg->header_length; i++){
    86cc:	4299      	cmp	r1, r3
    86ce:	d11f      	bne.n	8710 <grid_msg_packet_close+0xa0>
    86d0:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
    86d4:	4423      	add	r3, r4
    86d6:	f104 0114 	add.w	r1, r4, #20
    86da:	3314      	adds	r3, #20
		checksum ^= msg->header[i];
	}
		
	for (uint32_t i=0; i<msg->body_length; i++){
    86dc:	4299      	cmp	r1, r3
    86de:	d11b      	bne.n	8718 <grid_msg_packet_close+0xa8>
		checksum ^= msg->body[i];
	}
		
	for (uint32_t i=0; i<msg->footer_length; i++){
    86e0:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    86e4:	1823      	adds	r3, r4, r0
    86e6:	f204 118b 	addw	r1, r4, #395	; 0x18b
    86ea:	f203 138b 	addw	r3, r3, #395	; 0x18b
    86ee:	4299      	cmp	r1, r3
    86f0:	d116      	bne.n	8720 <grid_msg_packet_close+0xb0>
		checksum ^= msg->footer[i];
	}
	
	sprintf(&msg->footer[msg->footer_length], "%02x\n", checksum);
    86f2:	f200 108b 	addw	r0, r0, #395	; 0x18b
    86f6:	4912      	ldr	r1, [pc, #72]	; (8740 <grid_msg_packet_close+0xd0>)
    86f8:	4420      	add	r0, r4
    86fa:	47a8      	blx	r5
	msg->footer_length += strlen(&msg->footer[msg->footer_length]);
    86fc:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    8700:	f205 108b 	addw	r0, r5, #395	; 0x18b
    8704:	4420      	add	r0, r4
    8706:	47b0      	blx	r6
    8708:	4428      	add	r0, r5
    870a:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
	
	
}
    870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		checksum ^= msg->header[i];
    8710:	f811 0b01 	ldrb.w	r0, [r1], #1
    8714:	4042      	eors	r2, r0
	for (uint32_t i=0; i<msg->header_length; i++){
    8716:	e7d9      	b.n	86cc <grid_msg_packet_close+0x5c>
		checksum ^= msg->body[i];
    8718:	f811 0b01 	ldrb.w	r0, [r1], #1
    871c:	4042      	eors	r2, r0
	for (uint32_t i=0; i<msg->body_length; i++){
    871e:	e7dd      	b.n	86dc <grid_msg_packet_close+0x6c>
		checksum ^= msg->footer[i];
    8720:	f811 7b01 	ldrb.w	r7, [r1], #1
    8724:	407a      	eors	r2, r7
	for (uint32_t i=0; i<msg->footer_length; i++){
    8726:	e7e2      	b.n	86ee <grid_msg_packet_close+0x7e>
    8728:	0001554f 	.word	0x0001554f
    872c:	000134b9 	.word	0x000134b9
    8730:	00013981 	.word	0x00013981
    8734:	20006fa4 	.word	0x20006fa4
    8738:	000083a1 	.word	0x000083a1
    873c:	000083c1 	.word	0x000083c1
    8740:	00016007 	.word	0x00016007

00008744 <grid_msg_packet_send_everywhere>:

uint8_t	grid_msg_packet_send_everywhere(struct grid_msg* msg){
    8744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	uint32_t message_length = grid_msg_packet_get_length(msg);
    8748:	4b0f      	ldr	r3, [pc, #60]	; (8788 <grid_msg_packet_send_everywhere+0x44>)
uint8_t	grid_msg_packet_send_everywhere(struct grid_msg* msg){
    874a:	4606      	mov	r6, r0
	uint32_t message_length = grid_msg_packet_get_length(msg);
    874c:	4798      	blx	r3
	
	if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, message_length)){
    874e:	4b0f      	ldr	r3, [pc, #60]	; (878c <grid_msg_packet_send_everywhere+0x48>)
	uint32_t message_length = grid_msg_packet_get_length(msg);
    8750:	4604      	mov	r4, r0
	if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, message_length)){
    8752:	b281      	uxth	r1, r0
    8754:	480e      	ldr	r0, [pc, #56]	; (8790 <grid_msg_packet_send_everywhere+0x4c>)
    8756:	4798      	blx	r3
    8758:	b978      	cbnz	r0, 877a <grid_msg_packet_send_everywhere+0x36>
		
		return 0;
	}
	
	
}
    875a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(msg, i));
    875e:	4629      	mov	r1, r5
    8760:	4630      	mov	r0, r6
    8762:	47b8      	blx	r7
    8764:	4601      	mov	r1, r0
    8766:	4640      	mov	r0, r8
    8768:	47c8      	blx	r9
		for(uint32_t i = 0; i<message_length; i++){
    876a:	3501      	adds	r5, #1
    876c:	42a5      	cmp	r5, r4
    876e:	d1f6      	bne.n	875e <grid_msg_packet_send_everywhere+0x1a>
		grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    8770:	4807      	ldr	r0, [pc, #28]	; (8790 <grid_msg_packet_send_everywhere+0x4c>)
    8772:	4b08      	ldr	r3, [pc, #32]	; (8794 <grid_msg_packet_send_everywhere+0x50>)
    8774:	4798      	blx	r3
		return 1;
    8776:	2001      	movs	r0, #1
    8778:	e7ef      	b.n	875a <grid_msg_packet_send_everywhere+0x16>
			grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(msg, i));
    877a:	4f07      	ldr	r7, [pc, #28]	; (8798 <grid_msg_packet_send_everywhere+0x54>)
    877c:	f8df 8010 	ldr.w	r8, [pc, #16]	; 8790 <grid_msg_packet_send_everywhere+0x4c>
    8780:	f8df 9018 	ldr.w	r9, [pc, #24]	; 879c <grid_msg_packet_send_everywhere+0x58>
		for(uint32_t i = 0; i<message_length; i++){
    8784:	2500      	movs	r5, #0
    8786:	e7f1      	b.n	876c <grid_msg_packet_send_everywhere+0x28>
    8788:	000084a1 	.word	0x000084a1
    878c:	00004839 	.word	0x00004839
    8790:	20006b80 	.word	0x20006b80
    8794:	00004895 	.word	0x00004895
    8798:	0000863b 	.word	0x0000863b
    879c:	00004875 	.word	0x00004875

000087a0 <grid_nvm_ui_bulk_read_init>:
}


void grid_nvm_ui_bulk_read_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->read_bulk_page_index = 0;
    87a0:	2300      	movs	r3, #0
    87a2:	f8c0 3424 	str.w	r3, [r0, #1060]	; 0x424
	nvm->read_bulk_status = 1;
    87a6:	2301      	movs	r3, #1
    87a8:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
			
}
    87ac:	4770      	bx	lr

000087ae <grid_nvm_ui_bulk_read_is_in_progress>:

uint8_t grid_nvm_ui_bulk_read_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->read_bulk_status;
	
}
    87ae:	f890 0428 	ldrb.w	r0, [r0, #1064]	; 0x428
    87b2:	4770      	bx	lr

000087b4 <grid_nvm_ui_bulk_read_next>:

void grid_nvm_ui_bulk_read_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    87b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    87b6:	4604      	mov	r4, r0
    87b8:	b0ed      	sub	sp, #436	; 0x1b4
	
	if (nvm->read_bulk_status == 1){
    87ba:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
    87be:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_read_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    87c0:	4608      	mov	r0, r1
	if (nvm->read_bulk_status == 1){
    87c2:	d130      	bne.n	8826 <grid_nvm_ui_bulk_read_next+0x72>
		uint8_t bank    = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
		uint8_t event   = nvm->read_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
		
		
		if (bank < ui->bank_list_length){
    87c4:	7849      	ldrb	r1, [r1, #1]
		uint8_t bank    = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    87c6:	f8d4 2424 	ldr.w	r2, [r4, #1060]	; 0x424
    87ca:	23a0      	movs	r3, #160	; 0xa0
    87cc:	fbb2 f3f3 	udiv	r3, r2, r3
    87d0:	f003 0303 	and.w	r3, r3, #3
		if (bank < ui->bank_list_length){
    87d4:	4299      	cmp	r1, r3
    87d6:	d91d      	bls.n	8814 <grid_nvm_ui_bulk_read_next+0x60>
			
			if (element < ui->bank_list[bank].element_list_length){
    87d8:	6845      	ldr	r5, [r0, #4]
    87da:	eb05 1303 	add.w	r3, r5, r3, lsl #4
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    87de:	270a      	movs	r7, #10
			if (element < ui->bank_list[bank].element_list_length){
    87e0:	7a5d      	ldrb	r5, [r3, #9]
		uint8_t element = (nvm->read_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    87e2:	fbb2 f1f7 	udiv	r1, r2, r7
    87e6:	f001 060f 	and.w	r6, r1, #15
			if (element < ui->bank_list[bank].element_list_length){
    87ea:	42b5      	cmp	r5, r6
    87ec:	d912      	bls.n	8814 <grid_nvm_ui_bulk_read_next+0x60>
		uint8_t event   = nvm->read_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    87ee:	fb07 2111 	mls	r1, r7, r1, r2
				
				if (event < ui->bank_list[bank].element_list[element].event_list_length){
    87f2:	68da      	ldr	r2, [r3, #12]
    87f4:	2364      	movs	r3, #100	; 0x64
    87f6:	fb06 2303 	mla	r3, r6, r3, r2
    87fa:	b2ca      	uxtb	r2, r1
    87fc:	f893 505c 	ldrb.w	r5, [r3, #92]	; 0x5c
    8800:	4295      	cmp	r5, r2
    8802:	d907      	bls.n	8814 <grid_nvm_ui_bulk_read_next+0x60>
					// Valid memory location
					
					int status = grid_ui_nvm_load_event_configuration(ui, nvm, &ui->bank_list[bank].element_list[element].event_list[event]);
    8804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8806:	f44f 7286 	mov.w	r2, #268	; 0x10c
    880a:	fb02 3201 	mla	r2, r2, r1, r3
    880e:	4b1f      	ldr	r3, [pc, #124]	; (888c <grid_nvm_ui_bulk_read_next+0xd8>)
    8810:	4621      	mov	r1, r4
    8812:	4798      	blx	r3
			}
	
		}
		
		
		if (nvm->read_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8814:	f8d4 3424 	ldr.w	r3, [r4, #1060]	; 0x424
    8818:	f240 227e 	movw	r2, #638	; 0x27e
    881c:	4293      	cmp	r3, r2
    881e:	d804      	bhi.n	882a <grid_nvm_ui_bulk_read_next+0x76>
			
			nvm->read_bulk_page_index++;
    8820:	3301      	adds	r3, #1
    8822:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
	}
	
	
	
	
}
    8826:	b06d      	add	sp, #436	; 0x1b4
    8828:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nvm->read_bulk_page_index = 0;
    882a:	2500      	movs	r5, #0
    882c:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
			nvm->read_bulk_status = 0;
    8830:	f884 5428 	strb.w	r5, [r4, #1064]	; 0x428
			grid_msg_init(&response);
    8834:	a805      	add	r0, sp, #20
    8836:	4b16      	ldr	r3, [pc, #88]	; (8890 <grid_nvm_ui_bulk_read_next+0xdc>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8838:	4c16      	ldr	r4, [pc, #88]	; (8894 <grid_nvm_ui_bulk_read_next+0xe0>)
			grid_msg_init(&response);
    883a:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    883c:	227f      	movs	r2, #127	; 0x7f
    883e:	462b      	mov	r3, r5
    8840:	4611      	mov	r1, r2
    8842:	a805      	add	r0, sp, #20
    8844:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    8846:	2303      	movs	r3, #3
    8848:	4913      	ldr	r1, [pc, #76]	; (8898 <grid_nvm_ui_bulk_read_next+0xe4>)
    884a:	9300      	str	r3, [sp, #0]
    884c:	2202      	movs	r2, #2
    884e:	4c13      	ldr	r4, [pc, #76]	; (889c <grid_nvm_ui_bulk_read_next+0xe8>)
			uint8_t response_payload[10] = {0};
    8850:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    8854:	2371      	movs	r3, #113	; 0x71
    8856:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    8858:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALLOAD_frame);
    885c:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    885e:	4b10      	ldr	r3, [pc, #64]	; (88a0 <grid_nvm_ui_bulk_read_next+0xec>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8860:	4c10      	ldr	r4, [pc, #64]	; (88a4 <grid_nvm_ui_bulk_read_next+0xf0>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8862:	a802      	add	r0, sp, #8
    8864:	4798      	blx	r3
    8866:	a902      	add	r1, sp, #8
    8868:	4602      	mov	r2, r0
    886a:	4b0f      	ldr	r3, [pc, #60]	; (88a8 <grid_nvm_ui_bulk_read_next+0xf4>)
    886c:	a805      	add	r0, sp, #20
    886e:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8870:	230a      	movs	r3, #10
    8872:	9300      	str	r3, [sp, #0]
    8874:	2204      	movs	r2, #4
    8876:	4629      	mov	r1, r5
    8878:	a805      	add	r0, sp, #20
    887a:	2301      	movs	r3, #1
    887c:	47a0      	blx	r4
			grid_msg_packet_close(&response);
    887e:	4b0b      	ldr	r3, [pc, #44]	; (88ac <grid_nvm_ui_bulk_read_next+0xf8>)
    8880:	a805      	add	r0, sp, #20
    8882:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    8884:	4b0a      	ldr	r3, [pc, #40]	; (88b0 <grid_nvm_ui_bulk_read_next+0xfc>)
    8886:	a805      	add	r0, sp, #20
    8888:	4798      	blx	r3
}
    888a:	e7cc      	b.n	8826 <grid_nvm_ui_bulk_read_next+0x72>
    888c:	00009eb5 	.word	0x00009eb5
    8890:	00008545 	.word	0x00008545
    8894:	00008579 	.word	0x00008579
    8898:	00015875 	.word	0x00015875
    889c:	000134b9 	.word	0x000134b9
    88a0:	00013981 	.word	0x00013981
    88a4:	00008529 	.word	0x00008529
    88a8:	000084b5 	.word	0x000084b5
    88ac:	00008671 	.word	0x00008671
    88b0:	00008745 	.word	0x00008745

000088b4 <grid_nvm_ui_bulk_store_init>:


void grid_nvm_ui_bulk_store_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->store_bulk_page_index = 0;
    88b4:	2300      	movs	r3, #0
    88b6:	f8c0 3434 	str.w	r3, [r0, #1076]	; 0x434
	nvm->store_bulk_status = 1;
    88ba:	2301      	movs	r3, #1
    88bc:	f880 3438 	strb.w	r3, [r0, #1080]	; 0x438
	
}
    88c0:	4770      	bx	lr

000088c2 <grid_nvm_ui_bulk_store_is_in_progress>:

uint8_t grid_nvm_ui_bulk_store_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->store_bulk_status;
	
}
    88c2:	f890 0438 	ldrb.w	r0, [r0, #1080]	; 0x438
    88c6:	4770      	bx	lr

000088c8 <grid_nvm_ui_bulk_store_next>:

// DO THIS!!
void grid_nvm_ui_bulk_store_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    88c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     
    // START: NEW
    
    
	if (nvm->store_bulk_status == 1){
    88ca:	f890 3438 	ldrb.w	r3, [r0, #1080]	; 0x438
    88ce:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_store_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    88d0:	b0ed      	sub	sp, #436	; 0x1b4
    88d2:	4604      	mov	r4, r0
    88d4:	460d      	mov	r5, r1
	if (nvm->store_bulk_status == 1){
    88d6:	d169      	bne.n	89ac <grid_nvm_ui_bulk_store_next+0xe4>
                        struct grid_ui_event* eve = &ui->bank_list[bank].element_list[element].event_list[event];

                        if (eve->cfg_changed_flag == 1){


                            if (grid_ui_nvm_store_event_configuration(ui, nvm, eve)){
    88d8:	4f53      	ldr	r7, [pc, #332]	; (8a28 <grid_nvm_ui_bulk_store_next+0x160>)
            uint8_t bank    = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    88da:	26a0      	movs	r6, #160	; 0xa0
            if (bank < ui->bank_list_length){
    88dc:	786a      	ldrb	r2, [r5, #1]
            uint8_t bank    = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    88de:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    88e2:	fbb3 f1f6 	udiv	r1, r3, r6
    88e6:	f001 0003 	and.w	r0, r1, #3
            if (bank < ui->bank_list_length){
    88ea:	4282      	cmp	r2, r0
    88ec:	d960      	bls.n	89b0 <grid_nvm_ui_bulk_store_next+0xe8>
                if (element < ui->bank_list[bank].element_list_length){
    88ee:	6869      	ldr	r1, [r5, #4]
    88f0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
            uint8_t element = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    88f4:	f04f 0e0a 	mov.w	lr, #10
                if (element < ui->bank_list[bank].element_list_length){
    88f8:	7a48      	ldrb	r0, [r1, #9]
            uint8_t element = (nvm->store_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    88fa:	fbb3 f2fe 	udiv	r2, r3, lr
    88fe:	f002 0c0f 	and.w	ip, r2, #15
                if (element < ui->bank_list[bank].element_list_length){
    8902:	4560      	cmp	r0, ip
    8904:	d954      	bls.n	89b0 <grid_nvm_ui_bulk_store_next+0xe8>
                    if (event < ui->bank_list[bank].element_list[element].event_list_length){
    8906:	68c9      	ldr	r1, [r1, #12]
            uint8_t event   = nvm->store_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    8908:	fb0e 3212 	mls	r2, lr, r2, r3
                    if (event < ui->bank_list[bank].element_list[element].event_list_length){
    890c:	2364      	movs	r3, #100	; 0x64
    890e:	fb0c 1303 	mla	r3, ip, r3, r1
    8912:	b2d1      	uxtb	r1, r2
    8914:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
    8918:	4288      	cmp	r0, r1
    891a:	d949      	bls.n	89b0 <grid_nvm_ui_bulk_store_next+0xe8>
                        struct grid_ui_event* eve = &ui->bank_list[bank].element_list[element].event_list[event];
    891c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    891e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8922:	fb01 3202 	mla	r2, r1, r2, r3
                        if (eve->cfg_changed_flag == 1){
    8926:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
    892a:	2b01      	cmp	r3, #1
    892c:	d140      	bne.n	89b0 <grid_nvm_ui_bulk_store_next+0xe8>
                            if (grid_ui_nvm_store_event_configuration(ui, nvm, eve)){
    892e:	4621      	mov	r1, r4
    8930:	4628      	mov	r0, r5
    8932:	47b8      	blx	r7
    8934:	3800      	subs	r0, #0
    8936:	bf18      	it	ne
    8938:	2001      	movne	r0, #1

            }
            
            

            if (nvm->store_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    893a:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    893e:	f240 227e 	movw	r2, #638	; 0x27e
    8942:	4293      	cmp	r3, r2
    8944:	d804      	bhi.n	8950 <grid_nvm_ui_bulk_store_next+0x88>



                nvm->store_bulk_page_index++;       
    8946:	3301      	adds	r3, #1
    8948:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
        while (something_was_stored == 0){
    894c:	2800      	cmp	r0, #0
    894e:	d0c5      	beq.n	88dc <grid_nvm_ui_bulk_store_next+0x14>
		

		
		
		
		if (nvm->store_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8950:	f8d4 3434 	ldr.w	r3, [r4, #1076]	; 0x434
    8954:	4e35      	ldr	r6, [pc, #212]	; (8a2c <grid_nvm_ui_bulk_store_next+0x164>)
    8956:	f240 227e 	movw	r2, #638	; 0x27e
    895a:	4293      	cmp	r3, r2
    895c:	d82a      	bhi.n	89b4 <grid_nvm_ui_bulk_store_next+0xec>
			
            
            uint8_t intensity = abs(nvm->store_bulk_page_index%100 - 50)/1.5 + 40;
    895e:	2264      	movs	r2, #100	; 0x64
    8960:	fbb3 f0f2 	udiv	r0, r3, r2
    8964:	fb02 3010 	mls	r0, r2, r0, r3
    8968:	3832      	subs	r0, #50	; 0x32
    896a:	2800      	cmp	r0, #0
    896c:	bfb8      	it	lt
    896e:	4240      	neglt	r0, r0
    8970:	4f2f      	ldr	r7, [pc, #188]	; (8a30 <grid_nvm_ui_bulk_store_next+0x168>)
    8972:	4c30      	ldr	r4, [pc, #192]	; (8a34 <grid_nvm_ui_bulk_store_next+0x16c>)
    8974:	4d30      	ldr	r5, [pc, #192]	; (8a38 <grid_nvm_ui_bulk_store_next+0x170>)
    8976:	47b8      	blx	r7
    8978:	4b30      	ldr	r3, [pc, #192]	; (8a3c <grid_nvm_ui_bulk_store_next+0x174>)
    897a:	2200      	movs	r2, #0
    897c:	47a0      	blx	r4
    897e:	4b30      	ldr	r3, [pc, #192]	; (8a40 <grid_nvm_ui_bulk_store_next+0x178>)
    8980:	4c30      	ldr	r4, [pc, #192]	; (8a44 <grid_nvm_ui_bulk_store_next+0x17c>)
    8982:	2200      	movs	r2, #0
    8984:	47a0      	blx	r4
    8986:	47a8      	blx	r5
    8988:	b2c4      	uxtb	r4, r0
  
            grid_sys_alert_set_alert(&grid_sys_state, 0, intensity*0.75, intensity, 1, 1000);
    898a:	4620      	mov	r0, r4
    898c:	47b8      	blx	r7
    898e:	4b2e      	ldr	r3, [pc, #184]	; (8a48 <grid_nvm_ui_bulk_store_next+0x180>)
    8990:	4f2e      	ldr	r7, [pc, #184]	; (8a4c <grid_nvm_ui_bulk_store_next+0x184>)
    8992:	2200      	movs	r2, #0
    8994:	47b8      	blx	r7
    8996:	47a8      	blx	r5
    8998:	2301      	movs	r3, #1
    899a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    899e:	e9cd 3200 	strd	r3, r2, [sp]
    89a2:	2100      	movs	r1, #0
    89a4:	b2c2      	uxtb	r2, r0
    89a6:	4623      	mov	r3, r4
    89a8:	4829      	ldr	r0, [pc, #164]	; (8a50 <grid_nvm_ui_bulk_store_next+0x188>)
    89aa:	47b0      	blx	r6
	}
	
	
	
	
}
    89ac:	b06d      	add	sp, #436	; 0x1b4
    89ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89b0:	2000      	movs	r0, #0
    89b2:	e7c2      	b.n	893a <grid_nvm_ui_bulk_store_next+0x72>
			nvm->store_bulk_page_index = 0;
    89b4:	2500      	movs	r5, #0
    89b6:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
			nvm->store_bulk_status = 0;
    89ba:	f884 5438 	strb.w	r5, [r4, #1080]	; 0x438
			grid_msg_init(&response);
    89be:	a805      	add	r0, sp, #20
    89c0:	4b24      	ldr	r3, [pc, #144]	; (8a54 <grid_nvm_ui_bulk_store_next+0x18c>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    89c2:	4c25      	ldr	r4, [pc, #148]	; (8a58 <grid_nvm_ui_bulk_store_next+0x190>)
			grid_msg_init(&response);
    89c4:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    89c6:	227f      	movs	r2, #127	; 0x7f
    89c8:	462b      	mov	r3, r5
    89ca:	4611      	mov	r1, r2
    89cc:	a805      	add	r0, sp, #20
    89ce:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    89d0:	2303      	movs	r3, #3
    89d2:	4922      	ldr	r1, [pc, #136]	; (8a5c <grid_nvm_ui_bulk_store_next+0x194>)
    89d4:	9300      	str	r3, [sp, #0]
    89d6:	2202      	movs	r2, #2
    89d8:	4c21      	ldr	r4, [pc, #132]	; (8a60 <grid_nvm_ui_bulk_store_next+0x198>)
			uint8_t response_payload[10] = {0};
    89da:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    89de:	2370      	movs	r3, #112	; 0x70
    89e0:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    89e2:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALSTORE_frame);
    89e6:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    89e8:	4b1e      	ldr	r3, [pc, #120]	; (8a64 <grid_nvm_ui_bulk_store_next+0x19c>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    89ea:	4c1f      	ldr	r4, [pc, #124]	; (8a68 <grid_nvm_ui_bulk_store_next+0x1a0>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    89ec:	a802      	add	r0, sp, #8
    89ee:	4798      	blx	r3
    89f0:	a902      	add	r1, sp, #8
    89f2:	4602      	mov	r2, r0
    89f4:	4b1d      	ldr	r3, [pc, #116]	; (8a6c <grid_nvm_ui_bulk_store_next+0x1a4>)
    89f6:	a805      	add	r0, sp, #20
    89f8:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    89fa:	230a      	movs	r3, #10
    89fc:	9300      	str	r3, [sp, #0]
    89fe:	4629      	mov	r1, r5
    8a00:	a805      	add	r0, sp, #20
    8a02:	2301      	movs	r3, #1
    8a04:	2204      	movs	r2, #4
    8a06:	47a0      	blx	r4
                grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    8a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8a0c:	e9cd 5300 	strd	r5, r3, [sp]
    8a10:	22ff      	movs	r2, #255	; 0xff
    8a12:	462b      	mov	r3, r5
    8a14:	4629      	mov	r1, r5
    8a16:	480e      	ldr	r0, [pc, #56]	; (8a50 <grid_nvm_ui_bulk_store_next+0x188>)
    8a18:	47b0      	blx	r6
			grid_msg_packet_close(&response);
    8a1a:	4b15      	ldr	r3, [pc, #84]	; (8a70 <grid_nvm_ui_bulk_store_next+0x1a8>)
    8a1c:	a805      	add	r0, sp, #20
    8a1e:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    8a20:	4b14      	ldr	r3, [pc, #80]	; (8a74 <grid_nvm_ui_bulk_store_next+0x1ac>)
    8a22:	a805      	add	r0, sp, #20
    8a24:	4798      	blx	r3
}
    8a26:	e7c1      	b.n	89ac <grid_nvm_ui_bulk_store_next+0xe4>
    8a28:	00009cd9 	.word	0x00009cd9
    8a2c:	000097ab 	.word	0x000097ab
    8a30:	00012731 	.word	0x00012731
    8a34:	00012a59 	.word	0x00012a59
    8a38:	00012c29 	.word	0x00012c29
    8a3c:	3ff80000 	.word	0x3ff80000
    8a40:	40440000 	.word	0x40440000
    8a44:	00012499 	.word	0x00012499
    8a48:	3fe80000 	.word	0x3fe80000
    8a4c:	00012805 	.word	0x00012805
    8a50:	20006fa4 	.word	0x20006fa4
    8a54:	00008545 	.word	0x00008545
    8a58:	00008579 	.word	0x00008579
    8a5c:	00015875 	.word	0x00015875
    8a60:	000134b9 	.word	0x000134b9
    8a64:	00013981 	.word	0x00013981
    8a68:	00008529 	.word	0x00008529
    8a6c:	000084b5 	.word	0x000084b5
    8a70:	00008671 	.word	0x00008671
    8a74:	00008745 	.word	0x00008745

00008a78 <grid_nvm_ui_bulk_clear_init>:



void grid_nvm_ui_bulk_clear_init(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	nvm->clear_bulk_page_index = 0;
    8a78:	2300      	movs	r3, #0
    8a7a:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
	nvm->clear_bulk_status = 1;
    8a7e:	2301      	movs	r3, #1
    8a80:	f880 3430 	strb.w	r3, [r0, #1072]	; 0x430
	
}
    8a84:	4770      	bx	lr

00008a86 <grid_nvm_ui_bulk_clear_is_in_progress>:

uint8_t grid_nvm_ui_bulk_clear_is_in_progress(struct grid_nvm_model* nvm, struct grid_ui_model* ui){

	return nvm->clear_bulk_status;
	
}
    8a86:	f890 0430 	ldrb.w	r0, [r0, #1072]	; 0x430
    8a8a:	4770      	bx	lr

00008a8c <grid_nvm_ui_bulk_clear_next>:


void grid_nvm_ui_bulk_clear_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    8a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a90:	4604      	mov	r4, r0
    8a92:	b0ec      	sub	sp, #432	; 0x1b0
	
	if (nvm->clear_bulk_status == 1){
    8a94:	f894 3430 	ldrb.w	r3, [r4, #1072]	; 0x430
    8a98:	2b01      	cmp	r3, #1
void grid_nvm_ui_bulk_clear_next(struct grid_nvm_model* nvm, struct grid_ui_model* ui){
    8a9a:	4608      	mov	r0, r1
	if (nvm->clear_bulk_status == 1){
    8a9c:	d15c      	bne.n	8b58 <grid_nvm_ui_bulk_clear_next+0xcc>
		uint8_t bank    = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
		uint8_t event   = nvm->clear_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
		
		
		if (bank < ui->bank_list_length){
    8a9e:	7849      	ldrb	r1, [r1, #1]
		uint8_t bank    = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount/GRID_NVM_STRATEGY_ELEMENT_maxcount)%GRID_NVM_STRATEGY_BANK_maxcount;
    8aa0:	f8d4 242c 	ldr.w	r2, [r4, #1068]	; 0x42c
    8aa4:	23a0      	movs	r3, #160	; 0xa0
    8aa6:	fbb2 f3f3 	udiv	r3, r2, r3
    8aaa:	f003 0303 	and.w	r3, r3, #3
		if (bank < ui->bank_list_length){
    8aae:	4299      	cmp	r1, r3
    8ab0:	d91d      	bls.n	8aee <grid_nvm_ui_bulk_clear_next+0x62>
			
			if (element < ui->bank_list[bank].element_list_length){
    8ab2:	6845      	ldr	r5, [r0, #4]
    8ab4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    8ab8:	270a      	movs	r7, #10
			if (element < ui->bank_list[bank].element_list_length){
    8aba:	7a5d      	ldrb	r5, [r3, #9]
		uint8_t element = (nvm->clear_bulk_page_index/GRID_NVM_STRATEGY_EVENT_maxcount)%GRID_NVM_STRATEGY_ELEMENT_maxcount;
    8abc:	fbb2 f1f7 	udiv	r1, r2, r7
    8ac0:	f001 060f 	and.w	r6, r1, #15
			if (element < ui->bank_list[bank].element_list_length){
    8ac4:	42b5      	cmp	r5, r6
    8ac6:	d912      	bls.n	8aee <grid_nvm_ui_bulk_clear_next+0x62>
		uint8_t event   = nvm->clear_bulk_page_index%GRID_NVM_STRATEGY_EVENT_maxcount;
    8ac8:	fb07 2111 	mls	r1, r7, r1, r2
				
				if (event < ui->bank_list[bank].element_list[element].event_list_length){
    8acc:	68da      	ldr	r2, [r3, #12]
    8ace:	2364      	movs	r3, #100	; 0x64
    8ad0:	fb06 2303 	mla	r3, r6, r3, r2
    8ad4:	b2ca      	uxtb	r2, r1
    8ad6:	f893 505c 	ldrb.w	r5, [r3, #92]	; 0x5c
    8ada:	4295      	cmp	r5, r2
    8adc:	d907      	bls.n	8aee <grid_nvm_ui_bulk_clear_next+0x62>
					// Valid memory location
					
					grid_ui_nvm_clear_event_configuration(ui, nvm, &ui->bank_list[bank].element_list[element].event_list[event]);		
    8ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8ae0:	f44f 7286 	mov.w	r2, #268	; 0x10c
    8ae4:	fb02 3201 	mla	r2, r2, r1, r3
    8ae8:	4b3b      	ldr	r3, [pc, #236]	; (8bd8 <grid_nvm_ui_bulk_clear_next+0x14c>)
    8aea:	4621      	mov	r1, r4
    8aec:	4798      	blx	r3
	
		}
		
		
		
		if (nvm->clear_bulk_page_index < GRID_NVM_STRATEGY_EVENT_maxcount*GRID_NVM_STRATEGY_ELEMENT_maxcount*GRID_NVM_STRATEGY_BANK_maxcount-1){ // multiply with bankcount
    8aee:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    8af2:	4e3a      	ldr	r6, [pc, #232]	; (8bdc <grid_nvm_ui_bulk_clear_next+0x150>)
    8af4:	f240 227e 	movw	r2, #638	; 0x27e
    8af8:	4293      	cmp	r3, r2
    8afa:	d830      	bhi.n	8b5e <grid_nvm_ui_bulk_clear_next+0xd2>
			
            
            uint8_t intensity = abs(nvm->clear_bulk_page_index%100 - 50)/1.5 + 40;
    8afc:	2264      	movs	r2, #100	; 0x64
    8afe:	fbb3 f0f2 	udiv	r0, r3, r2
    8b02:	fb02 3010 	mls	r0, r2, r0, r3
    8b06:	3832      	subs	r0, #50	; 0x32
    8b08:	2800      	cmp	r0, #0
    8b0a:	bfb8      	it	lt
    8b0c:	4240      	neglt	r0, r0
    8b0e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8c28 <grid_nvm_ui_bulk_clear_next+0x19c>
    8b12:	4d33      	ldr	r5, [pc, #204]	; (8be0 <grid_nvm_ui_bulk_clear_next+0x154>)
    8b14:	4f33      	ldr	r7, [pc, #204]	; (8be4 <grid_nvm_ui_bulk_clear_next+0x158>)
    8b16:	47c0      	blx	r8
    8b18:	4b33      	ldr	r3, [pc, #204]	; (8be8 <grid_nvm_ui_bulk_clear_next+0x15c>)
    8b1a:	2200      	movs	r2, #0
    8b1c:	47a8      	blx	r5
    8b1e:	4b33      	ldr	r3, [pc, #204]	; (8bec <grid_nvm_ui_bulk_clear_next+0x160>)
    8b20:	4d33      	ldr	r5, [pc, #204]	; (8bf0 <grid_nvm_ui_bulk_clear_next+0x164>)
    8b22:	2200      	movs	r2, #0
    8b24:	47a8      	blx	r5
    8b26:	47b8      	blx	r7
    8b28:	b2c5      	uxtb	r5, r0
  
            grid_sys_alert_set_alert(&grid_sys_state, intensity, intensity*0.75, 0, 1, 1000);
    8b2a:	4628      	mov	r0, r5
    8b2c:	47c0      	blx	r8
    8b2e:	4b31      	ldr	r3, [pc, #196]	; (8bf4 <grid_nvm_ui_bulk_clear_next+0x168>)
    8b30:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8c2c <grid_nvm_ui_bulk_clear_next+0x1a0>
    8b34:	2200      	movs	r2, #0
    8b36:	47c0      	blx	r8
    8b38:	47b8      	blx	r7
    8b3a:	2301      	movs	r3, #1
    8b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8b40:	e9cd 3200 	strd	r3, r2, [sp]
    8b44:	4629      	mov	r1, r5
    8b46:	2300      	movs	r3, #0
    8b48:	b2c2      	uxtb	r2, r0
    8b4a:	482b      	ldr	r0, [pc, #172]	; (8bf8 <grid_nvm_ui_bulk_clear_next+0x16c>)
    8b4c:	47b0      	blx	r6


            
            nvm->clear_bulk_page_index++;
    8b4e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	; 0x42c
    8b52:	3301      	adds	r3, #1
    8b54:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	}
	
	
	
	
}
    8b58:	b06c      	add	sp, #432	; 0x1b0
    8b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			nvm->clear_bulk_page_index = 0;
    8b5e:	2500      	movs	r5, #0
    8b60:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
			nvm->clear_bulk_status = 0;
    8b64:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
			grid_msg_init(&response);
    8b68:	a805      	add	r0, sp, #20
    8b6a:	4b24      	ldr	r3, [pc, #144]	; (8bfc <grid_nvm_ui_bulk_clear_next+0x170>)
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8b6c:	4c24      	ldr	r4, [pc, #144]	; (8c00 <grid_nvm_ui_bulk_clear_next+0x174>)
			grid_msg_init(&response);
    8b6e:	4798      	blx	r3
			grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8b70:	227f      	movs	r2, #127	; 0x7f
    8b72:	462b      	mov	r3, r5
    8b74:	4611      	mov	r1, r2
    8b76:	a805      	add	r0, sp, #20
    8b78:	47a0      	blx	r4
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    8b7a:	2303      	movs	r3, #3
    8b7c:	4921      	ldr	r1, [pc, #132]	; (8c04 <grid_nvm_ui_bulk_clear_next+0x178>)
    8b7e:	9300      	str	r3, [sp, #0]
    8b80:	2202      	movs	r2, #2
    8b82:	4c21      	ldr	r4, [pc, #132]	; (8c08 <grid_nvm_ui_bulk_clear_next+0x17c>)
			uint8_t response_payload[10] = {0};
    8b84:	f8ad 5010 	strh.w	r5, [sp, #16]
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    8b88:	2372      	movs	r3, #114	; 0x72
    8b8a:	a802      	add	r0, sp, #8
			uint8_t response_payload[10] = {0};
    8b8c:	e9cd 5502 	strd	r5, r5, [sp, #8]
			sprintf(response_payload, GRID_CLASS_LOCALCLEAR_frame);
    8b90:	47a0      	blx	r4
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8b92:	4b1e      	ldr	r3, [pc, #120]	; (8c0c <grid_nvm_ui_bulk_clear_next+0x180>)
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8b94:	4c1e      	ldr	r4, [pc, #120]	; (8c10 <grid_nvm_ui_bulk_clear_next+0x184>)
			grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8b96:	a802      	add	r0, sp, #8
    8b98:	4798      	blx	r3
    8b9a:	a902      	add	r1, sp, #8
    8b9c:	4602      	mov	r2, r0
    8b9e:	4b1d      	ldr	r3, [pc, #116]	; (8c14 <grid_nvm_ui_bulk_clear_next+0x188>)
    8ba0:	a805      	add	r0, sp, #20
    8ba2:	4798      	blx	r3
				grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    8ba4:	230a      	movs	r3, #10
    8ba6:	9300      	str	r3, [sp, #0]
    8ba8:	4629      	mov	r1, r5
    8baa:	a805      	add	r0, sp, #20
    8bac:	2301      	movs	r3, #1
    8bae:	2204      	movs	r2, #4
    8bb0:	47a0      	blx	r4
                grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 1000);
    8bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8bb6:	22ff      	movs	r2, #255	; 0xff
    8bb8:	4629      	mov	r1, r5
    8bba:	e9cd 5300 	strd	r5, r3, [sp]
    8bbe:	480e      	ldr	r0, [pc, #56]	; (8bf8 <grid_nvm_ui_bulk_clear_next+0x16c>)
    8bc0:	462b      	mov	r3, r5
    8bc2:	47b0      	blx	r6
			grid_msg_packet_close(&response);
    8bc4:	4b14      	ldr	r3, [pc, #80]	; (8c18 <grid_nvm_ui_bulk_clear_next+0x18c>)
    8bc6:	a805      	add	r0, sp, #20
    8bc8:	4798      	blx	r3
			grid_msg_packet_send_everywhere(&response);
    8bca:	4b14      	ldr	r3, [pc, #80]	; (8c1c <grid_nvm_ui_bulk_clear_next+0x190>)
    8bcc:	a805      	add	r0, sp, #20
    8bce:	4798      	blx	r3
            grid_ui_reinit_local(&grid_ui_state);
    8bd0:	4813      	ldr	r0, [pc, #76]	; (8c20 <grid_nvm_ui_bulk_clear_next+0x194>)
    8bd2:	4b14      	ldr	r3, [pc, #80]	; (8c24 <grid_nvm_ui_bulk_clear_next+0x198>)
    8bd4:	4798      	blx	r3
}
    8bd6:	e7bf      	b.n	8b58 <grid_nvm_ui_bulk_clear_next+0xcc>
    8bd8:	00009f2d 	.word	0x00009f2d
    8bdc:	000097ab 	.word	0x000097ab
    8be0:	00012a59 	.word	0x00012a59
    8be4:	00012c29 	.word	0x00012c29
    8be8:	3ff80000 	.word	0x3ff80000
    8bec:	40440000 	.word	0x40440000
    8bf0:	00012499 	.word	0x00012499
    8bf4:	3fe80000 	.word	0x3fe80000
    8bf8:	20006fa4 	.word	0x20006fa4
    8bfc:	00008545 	.word	0x00008545
    8c00:	00008579 	.word	0x00008579
    8c04:	00015875 	.word	0x00015875
    8c08:	000134b9 	.word	0x000134b9
    8c0c:	00013981 	.word	0x00013981
    8c10:	00008529 	.word	0x00008529
    8c14:	000084b5 	.word	0x000084b5
    8c18:	00008671 	.word	0x00008671
    8c1c:	00008745 	.word	0x00008745
    8c20:	20006f98 	.word	0x20006f98
    8c24:	0000af5d 	.word	0x0000af5d
    8c28:	00012731 	.word	0x00012731
    8c2c:	00012805 	.word	0x00012805

00008c30 <grid_nvm_clear_read_buffer>:



void grid_nvm_clear_read_buffer(struct grid_nvm_model* mod){
	
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8c30:	f100 0309 	add.w	r3, r0, #9
    8c34:	f200 2209 	addw	r2, r0, #521	; 0x209
		
		mod->read_buffer[i] = 255;
    8c38:	21ff      	movs	r1, #255	; 0xff
    8c3a:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8c3e:	4293      	cmp	r3, r2
    8c40:	d1fb      	bne.n	8c3a <grid_nvm_clear_read_buffer+0xa>
		
	}

	mod->read_buffer_status = GRID_NVM_BUFFER_STATUS_EMPTY;
    8c42:	2302      	movs	r3, #2
    8c44:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	mod->read_buffer_length = 0;
    8c48:	2300      	movs	r3, #0
    8c4a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
	
}
    8c4e:	4770      	bx	lr

00008c50 <grid_nvm_clear_write_buffer>:

void grid_nvm_clear_write_buffer(struct grid_nvm_model* mod){
	
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8c50:	f500 7306 	add.w	r3, r0, #536	; 0x218
    8c54:	f500 6283 	add.w	r2, r0, #1048	; 0x418
		
		mod->write_buffer[i] = 255;
    8c58:	21ff      	movs	r1, #255	; 0xff
    8c5a:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    8c5e:	4293      	cmp	r3, r2
    8c60:	d1fb      	bne.n	8c5a <grid_nvm_clear_write_buffer+0xa>
		
	}
	
	mod->write_buffer_status = GRID_NVM_BUFFER_STATUS_EMPTY;
    8c62:	2302      	movs	r3, #2
    8c64:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	mod->write_buffer_length = 0;
    8c68:	2300      	movs	r3, #0
    8c6a:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418
	mod->write_target_address = -1;
    8c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8c72:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
}
    8c76:	4770      	bx	lr

00008c78 <grid_nvm_init>:
void grid_nvm_init(struct grid_nvm_model* nvm, struct flash_descriptor* flash_instance){
    8c78:	b510      	push	{r4, lr}
	nvm->bank_settings_page_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    8c7a:	f44f 23fe 	mov.w	r3, #520192	; 0x7f000
	nvm->flash = flash_instance;
    8c7e:	e9c0 1300 	strd	r1, r3, [r0]
	nvm->status = 1;
    8c82:	2301      	movs	r3, #1
    8c84:	7203      	strb	r3, [r0, #8]
	nvm->read_buffer_status = GRID_NVM_BUFFER_STATUS_UNINITIALIZED;
    8c86:	2300      	movs	r3, #0
    8c88:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
	nvm->write_buffer_status = GRID_NVM_BUFFER_STATUS_UNINITIALIZED;
    8c8c:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	nvm->read_bulk_page_index = 0;
    8c90:	f8c0 3424 	str.w	r3, [r0, #1060]	; 0x424
	nvm->read_bulk_status = 0;
    8c94:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
	nvm->clear_bulk_page_index = 0;
    8c98:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
	nvm->clear_bulk_status = 0;	
    8c9c:	f880 3430 	strb.w	r3, [r0, #1072]	; 0x430
	nvm->write_bulk_page_index = 0;
    8ca0:	f8c0 343c 	str.w	r3, [r0, #1084]	; 0x43c
	nvm->write_bulk_status = 0;
    8ca4:	f880 3440 	strb.w	r3, [r0, #1088]	; 0x440
	grid_nvm_clear_read_buffer(nvm);
    8ca8:	4b02      	ldr	r3, [pc, #8]	; (8cb4 <grid_nvm_init+0x3c>)
    8caa:	4798      	blx	r3
}
    8cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	grid_nvm_clear_write_buffer(nvm);
    8cb0:	4b01      	ldr	r3, [pc, #4]	; (8cb8 <grid_nvm_init+0x40>)
    8cb2:	4718      	bx	r3
    8cb4:	00008c31 	.word	0x00008c31
    8cb8:	00008c51 	.word	0x00008c51

00008cbc <grid_nvm_calculate_event_page_offset>:


uint32_t grid_nvm_calculate_event_page_offset(struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    8cbc:	b510      	push	{r4, lr}
	
	
	
	uint8_t bank_number		= eve->parent->parent->index;
    8cbe:	684a      	ldr	r2, [r1, #4]
    8cc0:	6853      	ldr	r3, [r2, #4]
	uint8_t element_number	= eve->parent->index;
	uint8_t event_number	= eve->index;

	return GRID_NVM_STRATEGY_BANK_size * bank_number + GRID_NVM_STRATEGY_ELEMENT_size * element_number + GRID_NVM_STRATEGY_EVENT_size * event_number;
    8cc2:	7a1c      	ldrb	r4, [r3, #8]
    8cc4:	7a13      	ldrb	r3, [r2, #8]
    8cc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8cca:	20a0      	movs	r0, #160	; 0xa0
    8ccc:	005b      	lsls	r3, r3, #1
    8cce:	fb10 3304 	smlabb	r3, r0, r4, r3
    8cd2:	7a08      	ldrb	r0, [r1, #8]
	
    8cd4:	4418      	add	r0, r3
    8cd6:	bd10      	pop	{r4, pc}

00008cd8 <_gpio_set_pin_pull_mode.constprop.0>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8cd8:	01c0      	lsls	r0, r0, #7
    8cda:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    8cde:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
		break;

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    8ce2:	2301      	movs	r3, #1
    8ce4:	408b      	lsls	r3, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8ce6:	4401      	add	r1, r0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    8ce8:	6043      	str	r3, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    8cea:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
    8cee:	f042 0204 	orr.w	r2, r2, #4
    8cf2:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8cf6:	6183      	str	r3, [r0, #24]

	default:
		ASSERT(false);
		break;
	}
}
    8cf8:	4770      	bx	lr

00008cfa <grid_task_enter_task>:
 * Author : SUKU WC
*/

#include "grid_sys.h"

enum grid_task grid_task_enter_task(struct grid_task_model* mod, enum grid_task next_task){
    8cfa:	4603      	mov	r3, r0
	
	
	enum grid_task previous_task = mod->current_task;
    8cfc:	7840      	ldrb	r0, [r0, #1]
	mod->current_task = next_task;
    8cfe:	7059      	strb	r1, [r3, #1]
	return previous_task;
	
}
    8d00:	4770      	bx	lr

00008d02 <grid_task_timer_tick>:
	
}

void grid_task_timer_tick(struct grid_task_model* mod){
	
	mod->timer[mod->current_task]++;
    8d02:	7843      	ldrb	r3, [r0, #1]
    8d04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8d08:	6843      	ldr	r3, [r0, #4]
    8d0a:	3301      	adds	r3, #1
    8d0c:	6043      	str	r3, [r0, #4]
	
}
    8d0e:	4770      	bx	lr

00008d10 <grid_task_timer_reset>:

void grid_task_timer_reset(struct grid_task_model* mod){
	
	for (uint8_t i=0; i<GRID_TASK_NUMBER; i++){
		mod->timer[i] = 0;
    8d10:	2300      	movs	r3, #0
    8d12:	e9c0 3301 	strd	r3, r3, [r0, #4]
    8d16:	e9c0 3303 	strd	r3, r3, [r0, #12]
    8d1a:	e9c0 3305 	strd	r3, r3, [r0, #20]
    8d1e:	e9c0 3307 	strd	r3, r3, [r0, #28]
	}
	
}
    8d22:	4770      	bx	lr

00008d24 <grid_task_timer_read>:

uint32_t grid_task_timer_read(struct grid_task_model* mod, enum grid_task task){

	return 	mod->timer[task];
    8d24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	
}
    8d28:	6848      	ldr	r0, [r1, #4]
    8d2a:	4770      	bx	lr

00008d2c <grid_sys_nvm_store_configuration>:




void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d30:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec

	struct grid_msg message;
	
	grid_msg_init(&message);
    8d34:	4b6a      	ldr	r3, [pc, #424]	; (8ee0 <grid_sys_nvm_store_configuration+0x1b4>)
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8d36:	4c6b      	ldr	r4, [pc, #428]	; (8ee4 <grid_sys_nvm_store_configuration+0x1b8>)
	for(uint8_t i=0; i<4; i++){
		
		// BANK ENABLED	
		offset = grid_msg_body_get_length(&message);
			
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8d38:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8f0c <grid_sys_nvm_store_configuration+0x1e0>
void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8d3c:	4606      	mov	r6, r0
	grid_msg_init(&message);
    8d3e:	a86c      	add	r0, sp, #432	; 0x1b0
void grid_sys_nvm_store_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    8d40:	460f      	mov	r7, r1
	grid_msg_init(&message);
    8d42:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8d44:	22ff      	movs	r2, #255	; 0xff
    8d46:	4611      	mov	r1, r2
    8d48:	2300      	movs	r3, #0
    8d4a:	a86c      	add	r0, sp, #432	; 0x1b0
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8d4c:	2500      	movs	r5, #0
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8d4e:	47a0      	blx	r4
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8d50:	4b65      	ldr	r3, [pc, #404]	; (8ee8 <grid_sys_nvm_store_configuration+0x1bc>)
    8d52:	9508      	str	r5, [sp, #32]
    8d54:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    8d58:	4629      	mov	r1, r5
    8d5a:	a809      	add	r0, sp, #36	; 0x24
    8d5c:	4798      	blx	r3
	for(uint8_t i=0; i<4; i++){
    8d5e:	3613      	adds	r6, #19
		offset = grid_msg_body_get_length(&message);
    8d60:	4b62      	ldr	r3, [pc, #392]	; (8eec <grid_sys_nvm_store_configuration+0x1c0>)
		payload_length = strlen(payload);
    8d62:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8f18 <grid_sys_nvm_store_configuration+0x1ec>
			
		grid_msg_body_append_text(&message, payload, payload_length);
    8d66:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8f1c <grid_sys_nvm_store_configuration+0x1f0>
			
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    8d6a:	4c61      	ldr	r4, [pc, #388]	; (8ef0 <grid_sys_nvm_store_configuration+0x1c4>)
		offset = grid_msg_body_get_length(&message);
    8d6c:	a86c      	add	r0, sp, #432	; 0x1b0
    8d6e:	4798      	blx	r3
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8d70:	2203      	movs	r2, #3
		offset = grid_msg_body_get_length(&message);
    8d72:	4680      	mov	r8, r0
		sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8d74:	2331      	movs	r3, #49	; 0x31
    8d76:	495f      	ldr	r1, [pc, #380]	; (8ef4 <grid_sys_nvm_store_configuration+0x1c8>)
    8d78:	9200      	str	r2, [sp, #0]
    8d7a:	a808      	add	r0, sp, #32
    8d7c:	2202      	movs	r2, #2
    8d7e:	47d0      	blx	sl
		payload_length = strlen(payload);
    8d80:	a808      	add	r0, sp, #32
    8d82:	47d8      	blx	fp
		grid_msg_body_append_text(&message, payload, payload_length);
    8d84:	a908      	add	r1, sp, #32
    8d86:	b2c2      	uxtb	r2, r0
    8d88:	a86c      	add	r0, sp, #432	; 0x1b0
    8d8a:	47c8      	blx	r9
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    8d8c:	220e      	movs	r2, #14
    8d8e:	4641      	mov	r1, r8
    8d90:	9200      	str	r2, [sp, #0]
    8d92:	2301      	movs	r3, #1
    8d94:	2204      	movs	r2, #4
    8d96:	a86c      	add	r0, sp, #432	; 0x1b0
    8d98:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_BANKNUMBER_offset, GRID_CLASS_BANKENABLED_BANKNUMBER_length, i);
    8d9a:	4641      	mov	r1, r8
    8d9c:	9500      	str	r5, [sp, #0]
    8d9e:	2302      	movs	r3, #2
    8da0:	2205      	movs	r2, #5
    8da2:	a86c      	add	r0, sp, #432	; 0x1b0
    8da4:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_ISENABLED_offset, GRID_CLASS_BANKENABLED_ISENABLED_length, sys->bank_enabled[i]);		
    8da6:	f816 3b01 	ldrb.w	r3, [r6], #1
    8daa:	9300      	str	r3, [sp, #0]
    8dac:	4641      	mov	r1, r8
    8dae:	2207      	movs	r2, #7
    8db0:	2302      	movs	r3, #2
    8db2:	a86c      	add	r0, sp, #432	; 0x1b0
    8db4:	47a0      	blx	r4
			
		// BANK COLOR	
		offset = grid_msg_body_get_length(&message);
    8db6:	4b4d      	ldr	r3, [pc, #308]	; (8eec <grid_sys_nvm_store_configuration+0x1c0>)
    8db8:	a86c      	add	r0, sp, #432	; 0x1b0
    8dba:	4798      	blx	r3
		
		sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8dbc:	2303      	movs	r3, #3
		offset = grid_msg_body_get_length(&message);
    8dbe:	4680      	mov	r8, r0
		sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8dc0:	494d      	ldr	r1, [pc, #308]	; (8ef8 <grid_sys_nvm_store_configuration+0x1cc>)
    8dc2:	9300      	str	r3, [sp, #0]
    8dc4:	2202      	movs	r2, #2
    8dc6:	2332      	movs	r3, #50	; 0x32
    8dc8:	a808      	add	r0, sp, #32
    8dca:	47d0      	blx	sl
		payload_length = strlen(payload);
    8dcc:	a808      	add	r0, sp, #32
    8dce:	47d8      	blx	fp
		
		grid_msg_body_append_text(&message, payload, payload_length);
    8dd0:	a908      	add	r1, sp, #32
    8dd2:	b2c2      	uxtb	r2, r0
    8dd4:	a86c      	add	r0, sp, #432	; 0x1b0
    8dd6:	47c8      	blx	r9

		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    8dd8:	230e      	movs	r3, #14
    8dda:	4641      	mov	r1, r8
    8ddc:	9300      	str	r3, [sp, #0]
    8dde:	2204      	movs	r2, #4
    8de0:	2301      	movs	r3, #1
    8de2:	a86c      	add	r0, sp, #432	; 0x1b0
    8de4:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_NUM_offset, GRID_CLASS_BANKCOLOR_NUM_length, i);
    8de6:	4641      	mov	r1, r8
    8de8:	9500      	str	r5, [sp, #0]
    8dea:	2302      	movs	r3, #2
    8dec:	2205      	movs	r2, #5
    8dee:	a86c      	add	r0, sp, #432	; 0x1b0
    8df0:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_RED_offset, GRID_CLASS_BANKCOLOR_RED_length, sys->bank_color_r[i]);
    8df2:	78f3      	ldrb	r3, [r6, #3]
    8df4:	9300      	str	r3, [sp, #0]
    8df6:	4641      	mov	r1, r8
    8df8:	2302      	movs	r3, #2
    8dfa:	2207      	movs	r2, #7
    8dfc:	a86c      	add	r0, sp, #432	; 0x1b0
    8dfe:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_GRE_offset, GRID_CLASS_BANKCOLOR_GRE_length, sys->bank_color_g[i]);
    8e00:	79f3      	ldrb	r3, [r6, #7]
    8e02:	9300      	str	r3, [sp, #0]
    8e04:	4641      	mov	r1, r8
    8e06:	2302      	movs	r3, #2
    8e08:	2209      	movs	r2, #9
    8e0a:	a86c      	add	r0, sp, #432	; 0x1b0
    8e0c:	47a0      	blx	r4
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_BLU_offset, GRID_CLASS_BANKCOLOR_BLU_length, sys->bank_color_b[i]);
    8e0e:	7af3      	ldrb	r3, [r6, #11]
    8e10:	9300      	str	r3, [sp, #0]
    8e12:	4641      	mov	r1, r8
    8e14:	2302      	movs	r3, #2
    8e16:	220b      	movs	r2, #11
    8e18:	a86c      	add	r0, sp, #432	; 0x1b0
    8e1a:	3501      	adds	r5, #1
    8e1c:	47a0      	blx	r4
	for(uint8_t i=0; i<4; i++){
    8e1e:	2d04      	cmp	r5, #4
    8e20:	46d8      	mov	r8, fp
    8e22:	d19d      	bne.n	8d60 <grid_sys_nvm_store_configuration+0x34>
		
		
	}
	
	grid_msg_packet_close(&message);
    8e24:	4e35      	ldr	r6, [pc, #212]	; (8efc <grid_sys_nvm_store_configuration+0x1d0>)

	grid_nvm_clear_write_buffer(nvm);
	
	uint8_t acknowledge = 0;
	
	if (grid_msg_packet_get_length(&message)){
    8e26:	4d36      	ldr	r5, [pc, #216]	; (8f00 <grid_sys_nvm_store_configuration+0x1d4>)
	grid_msg_packet_close(&message);
    8e28:	a86c      	add	r0, sp, #432	; 0x1b0
    8e2a:	47b0      	blx	r6
	grid_nvm_clear_write_buffer(nvm);
    8e2c:	4b35      	ldr	r3, [pc, #212]	; (8f04 <grid_sys_nvm_store_configuration+0x1d8>)
    8e2e:	4638      	mov	r0, r7
    8e30:	4798      	blx	r3
	if (grid_msg_packet_get_length(&message)){
    8e32:	a86c      	add	r0, sp, #432	; 0x1b0
    8e34:	47a8      	blx	r5
    8e36:	9602      	str	r6, [sp, #8]
    8e38:	2800      	cmp	r0, #0
    8e3a:	d04c      	beq.n	8ed6 <grid_sys_nvm_store_configuration+0x1aa>

		nvm->write_buffer_length = grid_msg_packet_get_length(&message);
    8e3c:	a86c      	add	r0, sp, #432	; 0x1b0
    8e3e:	47a8      	blx	r5
    8e40:	f507 7a06 	add.w	sl, r7, #536	; 0x218
		
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
			
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    8e44:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8f20 <grid_sys_nvm_store_configuration+0x1f4>
		nvm->write_buffer_length = grid_msg_packet_get_length(&message);
    8e48:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    8e4c:	2500      	movs	r5, #0
    8e4e:	4652      	mov	r2, sl
    8e50:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
    8e54:	42ab      	cmp	r3, r5
    8e56:	d835      	bhi.n	8ec4 <grid_sys_nvm_store_configuration+0x198>
		}
		
		nvm->write_target_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    8e58:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, nvm->write_buffer_length);
    8e5c:	4d2a      	ldr	r5, [pc, #168]	; (8f08 <grid_sys_nvm_store_configuration+0x1dc>)
    8e5e:	6838      	ldr	r0, [r7, #0]
		nvm->write_target_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    8e60:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, nvm->write_buffer_length);
    8e64:	47a8      	blx	r5
		
		acknowledge = 1;
    8e66:	2501      	movs	r5, #1

	
	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
	
	grid_msg_init(&response);
    8e68:	4b1d      	ldr	r3, [pc, #116]	; (8ee0 <grid_sys_nvm_store_configuration+0x1b4>)
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8e6a:	4f1e      	ldr	r7, [pc, #120]	; (8ee4 <grid_sys_nvm_store_configuration+0x1b8>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    8e6c:	4e27      	ldr	r6, [pc, #156]	; (8f0c <grid_sys_nvm_store_configuration+0x1e0>)
	grid_msg_init(&response);
    8e6e:	a8d3      	add	r0, sp, #844	; 0x34c
    8e70:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8e72:	227f      	movs	r2, #127	; 0x7f
    8e74:	4611      	mov	r1, r2
    8e76:	2300      	movs	r3, #0
    8e78:	a8d3      	add	r0, sp, #844	; 0x34c
    8e7a:	47b8      	blx	r7
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    8e7c:	2303      	movs	r3, #3
    8e7e:	4924      	ldr	r1, [pc, #144]	; (8f10 <grid_sys_nvm_store_configuration+0x1e4>)
    8e80:	9300      	str	r3, [sp, #0]
    8e82:	2202      	movs	r2, #2
	uint8_t response_payload[10] = {0};
    8e84:	2700      	movs	r7, #0
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    8e86:	2360      	movs	r3, #96	; 0x60
    8e88:	a805      	add	r0, sp, #20
	uint8_t response_payload[10] = {0};
    8e8a:	e9cd 7705 	strd	r7, r7, [sp, #20]
    8e8e:	f8ad 701c 	strh.w	r7, [sp, #28]
	sprintf(response_payload, GRID_CLASS_GLOBALSTORE_frame);	
    8e92:	47b0      	blx	r6

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    8e94:	a805      	add	r0, sp, #20
    8e96:	47c0      	blx	r8
    8e98:	a905      	add	r1, sp, #20
    8e9a:	4602      	mov	r2, r0
    8e9c:	a8d3      	add	r0, sp, #844	; 0x34c
    8e9e:	47c8      	blx	r9
	
	if (acknowledge == 1){
    8ea0:	b1dd      	cbz	r5, 8eda <grid_sys_nvm_store_configuration+0x1ae>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);	
    8ea2:	230a      	movs	r3, #10
	}
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);	
    8ea4:	2204      	movs	r2, #4
    8ea6:	4639      	mov	r1, r7
    8ea8:	9300      	str	r3, [sp, #0]
    8eaa:	a8d3      	add	r0, sp, #844	; 0x34c
    8eac:	2301      	movs	r3, #1
    8eae:	47a0      	blx	r4
	}

	
	grid_msg_packet_close(&response);
    8eb0:	9b02      	ldr	r3, [sp, #8]
    8eb2:	a8d3      	add	r0, sp, #844	; 0x34c
    8eb4:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    8eb6:	4b17      	ldr	r3, [pc, #92]	; (8f14 <grid_sys_nvm_store_configuration+0x1e8>)
    8eb8:	a8d3      	add	r0, sp, #844	; 0x34c
    8eba:	4798      	blx	r3
		
	
}
    8ebc:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
    8ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    8ec4:	4629      	mov	r1, r5
    8ec6:	a86c      	add	r0, sp, #432	; 0x1b0
    8ec8:	9203      	str	r2, [sp, #12]
    8eca:	47d8      	blx	fp
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    8ecc:	3501      	adds	r5, #1
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    8ece:	f80a 0b01 	strb.w	r0, [sl], #1
		for(uint32_t i = 0; i<nvm->write_buffer_length; i++){
    8ed2:	9a03      	ldr	r2, [sp, #12]
    8ed4:	e7bc      	b.n	8e50 <grid_sys_nvm_store_configuration+0x124>
	uint8_t acknowledge = 0;
    8ed6:	4605      	mov	r5, r0
    8ed8:	e7c6      	b.n	8e68 <grid_sys_nvm_store_configuration+0x13c>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);	
    8eda:	230b      	movs	r3, #11
    8edc:	e7e2      	b.n	8ea4 <grid_sys_nvm_store_configuration+0x178>
    8ede:	bf00      	nop
    8ee0:	00008545 	.word	0x00008545
    8ee4:	00008579 	.word	0x00008579
    8ee8:	00012e05 	.word	0x00012e05
    8eec:	000084af 	.word	0x000084af
    8ef0:	00008529 	.word	0x00008529
    8ef4:	0001587f 	.word	0x0001587f
    8ef8:	00015552 	.word	0x00015552
    8efc:	00008671 	.word	0x00008671
    8f00:	000084a1 	.word	0x000084a1
    8f04:	00008c51 	.word	0x00008c51
    8f08:	0000e1b9 	.word	0x0000e1b9
    8f0c:	000134b9 	.word	0x000134b9
    8f10:	00015875 	.word	0x00015875
    8f14:	00008745 	.word	0x00008745
    8f18:	00013981 	.word	0x00013981
    8f1c:	000084b5 	.word	0x000084b5
    8f20:	0000863b 	.word	0x0000863b

00008f24 <grid_sys_recall_configuration>:


void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    8f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f28:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344

	struct grid_msg message;
	
	grid_msg_init(&message);
    8f2c:	4b48      	ldr	r3, [pc, #288]	; (9050 <grid_sys_recall_configuration+0x12c>)
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8f2e:	4c49      	ldr	r4, [pc, #292]	; (9054 <grid_sys_recall_configuration+0x130>)
void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    8f30:	4605      	mov	r5, r0
	grid_msg_init(&message);
    8f32:	a869      	add	r0, sp, #420	; 0x1a4
void grid_sys_recall_configuration(struct grid_sys_model* sys, uint8_t bank){
    8f34:	468a      	mov	sl, r1
	grid_msg_init(&message);
    8f36:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    8f38:	227f      	movs	r2, #127	; 0x7f
    8f3a:	4611      	mov	r1, r2
    8f3c:	2300      	movs	r3, #0
    8f3e:	a869      	add	r0, sp, #420	; 0x1a4
    8f40:	47a0      	blx	r4


	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8f42:	2400      	movs	r4, #0
    8f44:	4b44      	ldr	r3, [pc, #272]	; (9058 <grid_sys_recall_configuration+0x134>)
    8f46:	9405      	str	r4, [sp, #20]
    8f48:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    8f4c:	4621      	mov	r1, r4
    8f4e:	a806      	add	r0, sp, #24
    8f50:	4798      	blx	r3
	uint8_t payload_length = 0;
	uint32_t offset = 0;
	
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    8f52:	3513      	adds	r5, #19
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    8f54:	9403      	str	r4, [sp, #12]
		
		if (bank > GRID_SYS_BANK_MAXNUMBER || bank == i){
    8f56:	f1ba 0f04 	cmp.w	sl, #4
    8f5a:	d803      	bhi.n	8f64 <grid_sys_recall_configuration+0x40>
    8f5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8f60:	459a      	cmp	sl, r3
    8f62:	d164      	bne.n	902e <grid_sys_recall_configuration+0x10a>
			
			// BANK ENABLED
			offset = grid_msg_body_get_length(&message);
    8f64:	4b3d      	ldr	r3, [pc, #244]	; (905c <grid_sys_recall_configuration+0x138>)
		
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8f66:	4e3e      	ldr	r6, [pc, #248]	; (9060 <grid_sys_recall_configuration+0x13c>)
			payload_length = strlen(payload);
		
			grid_msg_body_append_text(&message, payload, payload_length);
    8f68:	f8df 9110 	ldr.w	r9, [pc, #272]	; 907c <grid_sys_recall_configuration+0x158>
			offset = grid_msg_body_get_length(&message);
    8f6c:	a869      	add	r0, sp, #420	; 0x1a4
    8f6e:	4798      	blx	r3
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8f70:	f04f 0b03 	mov.w	fp, #3
			offset = grid_msg_body_get_length(&message);
    8f74:	4607      	mov	r7, r0
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8f76:	2331      	movs	r3, #49	; 0x31
    8f78:	493a      	ldr	r1, [pc, #232]	; (9064 <grid_sys_recall_configuration+0x140>)
    8f7a:	f8cd b000 	str.w	fp, [sp]
    8f7e:	2202      	movs	r2, #2
    8f80:	a805      	add	r0, sp, #20
    8f82:	47b0      	blx	r6
			payload_length = strlen(payload);
    8f84:	4a38      	ldr	r2, [pc, #224]	; (9068 <grid_sys_recall_configuration+0x144>)
    8f86:	a805      	add	r0, sp, #20
    8f88:	4790      	blx	r2
		
			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    8f8a:	f04f 080d 	mov.w	r8, #13
			grid_msg_body_append_text(&message, payload, payload_length);
    8f8e:	b2c2      	uxtb	r2, r0
    8f90:	a905      	add	r1, sp, #20
    8f92:	a869      	add	r0, sp, #420	; 0x1a4
    8f94:	47c8      	blx	r9
			sprintf(payload, GRID_CLASS_BANKENABLED_frame);
    8f96:	4634      	mov	r4, r6
			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    8f98:	4639      	mov	r1, r7
    8f9a:	4e34      	ldr	r6, [pc, #208]	; (906c <grid_sys_recall_configuration+0x148>)
    8f9c:	f8cd 8000 	str.w	r8, [sp]
    8fa0:	2301      	movs	r3, #1
    8fa2:	2204      	movs	r2, #4
    8fa4:	a869      	add	r0, sp, #420	; 0x1a4
    8fa6:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_BANKNUMBER_offset, GRID_CLASS_BANKENABLED_BANKNUMBER_length, i);
    8fa8:	9b03      	ldr	r3, [sp, #12]
    8faa:	9300      	str	r3, [sp, #0]
    8fac:	4639      	mov	r1, r7
    8fae:	2302      	movs	r3, #2
    8fb0:	2205      	movs	r2, #5
    8fb2:	a869      	add	r0, sp, #420	; 0x1a4
    8fb4:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKENABLED_ISENABLED_offset, GRID_CLASS_BANKENABLED_ISENABLED_length, sys->bank_enabled[i]);
    8fb6:	782b      	ldrb	r3, [r5, #0]
    8fb8:	9300      	str	r3, [sp, #0]
    8fba:	4639      	mov	r1, r7
    8fbc:	2207      	movs	r2, #7
    8fbe:	2302      	movs	r3, #2
    8fc0:	a869      	add	r0, sp, #420	; 0x1a4
    8fc2:	47b0      	blx	r6
		
			// BANK COLOR
			offset = grid_msg_body_get_length(&message);
    8fc4:	4b25      	ldr	r3, [pc, #148]	; (905c <grid_sys_recall_configuration+0x138>)
    8fc6:	a869      	add	r0, sp, #420	; 0x1a4
    8fc8:	4798      	blx	r3
		
			sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8fca:	2332      	movs	r3, #50	; 0x32
			offset = grid_msg_body_get_length(&message);
    8fcc:	4607      	mov	r7, r0
			sprintf(payload, GRID_CLASS_BANKCOLOR_frame);
    8fce:	4928      	ldr	r1, [pc, #160]	; (9070 <grid_sys_recall_configuration+0x14c>)
    8fd0:	f8cd b000 	str.w	fp, [sp]
    8fd4:	2202      	movs	r2, #2
    8fd6:	a805      	add	r0, sp, #20
    8fd8:	47a0      	blx	r4
			payload_length = strlen(payload);
    8fda:	4a23      	ldr	r2, [pc, #140]	; (9068 <grid_sys_recall_configuration+0x144>)
    8fdc:	a805      	add	r0, sp, #20
    8fde:	4790      	blx	r2
		
			grid_msg_body_append_text(&message, payload, payload_length);
    8fe0:	a905      	add	r1, sp, #20
    8fe2:	b2c2      	uxtb	r2, r0
    8fe4:	a869      	add	r0, sp, #420	; 0x1a4
    8fe6:	47c8      	blx	r9

			grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    8fe8:	2301      	movs	r3, #1
    8fea:	2204      	movs	r2, #4
    8fec:	4639      	mov	r1, r7
    8fee:	a869      	add	r0, sp, #420	; 0x1a4
    8ff0:	f8cd 8000 	str.w	r8, [sp]
    8ff4:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_NUM_offset, GRID_CLASS_BANKCOLOR_NUM_length, i);
    8ff6:	9b03      	ldr	r3, [sp, #12]
    8ff8:	9300      	str	r3, [sp, #0]
    8ffa:	2205      	movs	r2, #5
    8ffc:	2302      	movs	r3, #2
    8ffe:	4639      	mov	r1, r7
    9000:	a869      	add	r0, sp, #420	; 0x1a4
    9002:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_RED_offset, GRID_CLASS_BANKCOLOR_RED_length, sys->bank_color_r[i]);
    9004:	792b      	ldrb	r3, [r5, #4]
    9006:	9300      	str	r3, [sp, #0]
    9008:	2207      	movs	r2, #7
    900a:	2302      	movs	r3, #2
    900c:	4639      	mov	r1, r7
    900e:	a869      	add	r0, sp, #420	; 0x1a4
    9010:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_GRE_offset, GRID_CLASS_BANKCOLOR_GRE_length, sys->bank_color_g[i]);
    9012:	7a2b      	ldrb	r3, [r5, #8]
    9014:	9300      	str	r3, [sp, #0]
    9016:	2209      	movs	r2, #9
    9018:	2302      	movs	r3, #2
    901a:	4639      	mov	r1, r7
    901c:	a869      	add	r0, sp, #420	; 0x1a4
    901e:	47b0      	blx	r6
			grid_msg_text_set_parameter(&message, offset, GRID_CLASS_BANKCOLOR_BLU_offset, GRID_CLASS_BANKCOLOR_BLU_length, sys->bank_color_b[i]);
    9020:	7b2b      	ldrb	r3, [r5, #12]
    9022:	9300      	str	r3, [sp, #0]
    9024:	220b      	movs	r2, #11
    9026:	2302      	movs	r3, #2
    9028:	4639      	mov	r1, r7
    902a:	a869      	add	r0, sp, #420	; 0x1a4
    902c:	47b0      	blx	r6
	for(uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    902e:	9b03      	ldr	r3, [sp, #12]
    9030:	3301      	adds	r3, #1
    9032:	2b04      	cmp	r3, #4
    9034:	9303      	str	r3, [sp, #12]
    9036:	f105 0501 	add.w	r5, r5, #1
    903a:	d18c      	bne.n	8f56 <grid_sys_recall_configuration+0x32>
		}

		
	}
	
	grid_msg_packet_close(&message);
    903c:	4b0d      	ldr	r3, [pc, #52]	; (9074 <grid_sys_recall_configuration+0x150>)
    903e:	a869      	add	r0, sp, #420	; 0x1a4
    9040:	4798      	blx	r3

	grid_msg_packet_send_everywhere(&message);
    9042:	4b0d      	ldr	r3, [pc, #52]	; (9078 <grid_sys_recall_configuration+0x154>)
    9044:	a869      	add	r0, sp, #420	; 0x1a4
    9046:	4798      	blx	r3
// 	
// 	grid_msg_packet_close(&response);
// 	grid_msg_packet_send_everywhere(&response);
	
	
}
    9048:	f50d 7d51 	add.w	sp, sp, #836	; 0x344
    904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9050:	00008545 	.word	0x00008545
    9054:	00008579 	.word	0x00008579
    9058:	00012e05 	.word	0x00012e05
    905c:	000084af 	.word	0x000084af
    9060:	000134b9 	.word	0x000134b9
    9064:	0001587f 	.word	0x0001587f
    9068:	00013981 	.word	0x00013981
    906c:	00008529 	.word	0x00008529
    9070:	00015552 	.word	0x00015552
    9074:	00008671 	.word	0x00008671
    9078:	00008745 	.word	0x00008745
    907c:	000084b5 	.word	0x000084b5

00009080 <grid_sys_nvm_load_configuration>:


void grid_sys_nvm_load_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    9080:	b5f0      	push	{r4, r5, r6, r7, lr}
    9082:	f5ad 7d6d 	sub.w	sp, sp, #948	; 0x3b4
	
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
    9086:	2400      	movs	r4, #0
void grid_sys_nvm_load_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    9088:	460e      	mov	r6, r1
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
    908a:	4b2f      	ldr	r3, [pc, #188]	; (9148 <grid_sys_nvm_load_configuration+0xc8>)
    908c:	946c      	str	r4, [sp, #432]	; 0x1b0
    908e:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
    9092:	4621      	mov	r1, r4
    9094:	a86d      	add	r0, sp, #436	; 0x1b4
    9096:	4798      	blx	r3
    9098:	ad6c      	add	r5, sp, #432	; 0x1b0
	uint16_t length = 0;
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    909a:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
    909e:	f8c6 1214 	str.w	r1, [r6, #532]	; 0x214
	
	flash_read(nvm->flash, nvm->read_source_address, temp, GRID_NVM_PAGE_SIZE);
    90a2:	6830      	ldr	r0, [r6, #0]
    90a4:	4e29      	ldr	r6, [pc, #164]	; (914c <grid_sys_nvm_load_configuration+0xcc>)
    90a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    90aa:	462a      	mov	r2, r5
    90ac:	47b0      	blx	r6
			}
			else if (temp[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
				copydone = 1;
			}
			else{ // NORMAL CHARACTER, can be copied
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    90ae:	4a28      	ldr	r2, [pc, #160]	; (9150 <grid_sys_nvm_load_configuration+0xd0>)
	flash_read(nvm->flash, nvm->read_source_address, temp, GRID_NVM_PAGE_SIZE);
    90b0:	4621      	mov	r1, r4
	uint8_t acknowledge = 0;	
    90b2:	4626      	mov	r6, r4
	uint8_t copydone = 0;
    90b4:	4623      	mov	r3, r4
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    90b6:	f241 37b4 	movw	r7, #5044	; 0x13b4
		if (copydone == 0){
    90ba:	1c4c      	adds	r4, r1, #1
    90bc:	b943      	cbnz	r3, 90d0 <grid_sys_nvm_load_configuration+0x50>
			if (temp[i] == '\n'){ // END OF PACKET, copy newline character
    90be:	5c68      	ldrb	r0, [r5, r1]
    90c0:	280a      	cmp	r0, #10
    90c2:	d139      	bne.n	9138 <grid_sys_nvm_load_configuration+0xb8>
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    90c4:	4411      	add	r1, r2
    90c6:	55c8      	strb	r0, [r1, r7]
				GRID_PORT_U.rx_double_buffer_status = i+1;
    90c8:	6214      	str	r4, [r2, #32]
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    90ca:	6293      	str	r3, [r2, #40]	; 0x28
				acknowledge = 1;
    90cc:	2301      	movs	r3, #1
				copydone = 1;
    90ce:	461e      	mov	r6, r3
	for (uint16_t i=0; i<GRID_NVM_PAGE_SIZE; i++){		
    90d0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    90d4:	4621      	mov	r1, r4
    90d6:	d1f0      	bne.n	90ba <grid_sys_nvm_load_configuration+0x3a>
	
	
	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
	
	grid_msg_init(&response);
    90d8:	4b1e      	ldr	r3, [pc, #120]	; (9154 <grid_sys_nvm_load_configuration+0xd4>)
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    90da:	4c1f      	ldr	r4, [pc, #124]	; (9158 <grid_sys_nvm_load_configuration+0xd8>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    90dc:	4d1f      	ldr	r5, [pc, #124]	; (915c <grid_sys_nvm_load_configuration+0xdc>)
	grid_msg_init(&response);
    90de:	a805      	add	r0, sp, #20
    90e0:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    90e2:	227f      	movs	r2, #127	; 0x7f
    90e4:	4611      	mov	r1, r2
    90e6:	2300      	movs	r3, #0
    90e8:	a805      	add	r0, sp, #20
    90ea:	47a0      	blx	r4
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    90ec:	2303      	movs	r3, #3
    90ee:	491c      	ldr	r1, [pc, #112]	; (9160 <grid_sys_nvm_load_configuration+0xe0>)
    90f0:	9300      	str	r3, [sp, #0]
    90f2:	2202      	movs	r2, #2
	uint8_t response_payload[10] = {0};
    90f4:	2400      	movs	r4, #0
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    90f6:	2361      	movs	r3, #97	; 0x61
    90f8:	a802      	add	r0, sp, #8
	uint8_t response_payload[10] = {0};
    90fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
    90fe:	f8ad 4010 	strh.w	r4, [sp, #16]
	sprintf(response_payload, GRID_CLASS_GLOBALLOAD_frame);
    9102:	47a8      	blx	r5

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    9104:	4b17      	ldr	r3, [pc, #92]	; (9164 <grid_sys_nvm_load_configuration+0xe4>)
    9106:	4d18      	ldr	r5, [pc, #96]	; (9168 <grid_sys_nvm_load_configuration+0xe8>)
    9108:	a802      	add	r0, sp, #8
    910a:	4798      	blx	r3
    910c:	4b17      	ldr	r3, [pc, #92]	; (916c <grid_sys_nvm_load_configuration+0xec>)
    910e:	4602      	mov	r2, r0
    9110:	a902      	add	r1, sp, #8
    9112:	a805      	add	r0, sp, #20
    9114:	4798      	blx	r3
	
	if (acknowledge == 1){
    9116:	b1ae      	cbz	r6, 9144 <grid_sys_nvm_load_configuration+0xc4>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    9118:	230a      	movs	r3, #10
	}
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    911a:	2204      	movs	r2, #4
    911c:	4621      	mov	r1, r4
    911e:	9300      	str	r3, [sp, #0]
    9120:	a805      	add	r0, sp, #20
    9122:	2301      	movs	r3, #1
    9124:	47a8      	blx	r5
	}

	
	grid_msg_packet_close(&response);
    9126:	4b12      	ldr	r3, [pc, #72]	; (9170 <grid_sys_nvm_load_configuration+0xf0>)
    9128:	a805      	add	r0, sp, #20
    912a:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    912c:	4b11      	ldr	r3, [pc, #68]	; (9174 <grid_sys_nvm_load_configuration+0xf4>)
    912e:	a805      	add	r0, sp, #20
    9130:	4798      	blx	r3
	
}
    9132:	f50d 7d6d 	add.w	sp, sp, #948	; 0x3b4
    9136:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (temp[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
    9138:	28ff      	cmp	r0, #255	; 0xff
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    913a:	bf16      	itet	ne
    913c:	1889      	addne	r1, r1, r2
				copydone = 1;
    913e:	2301      	moveq	r3, #1
				GRID_PORT_U.rx_double_buffer[i] = temp[i];
    9140:	55c8      	strbne	r0, [r1, r7]
    9142:	e7c5      	b.n	90d0 <grid_sys_nvm_load_configuration+0x50>
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    9144:	230b      	movs	r3, #11
    9146:	e7e8      	b.n	911a <grid_sys_nvm_load_configuration+0x9a>
    9148:	00012e05 	.word	0x00012e05
    914c:	0000e14d 	.word	0x0000e14d
    9150:	2000404c 	.word	0x2000404c
    9154:	00008545 	.word	0x00008545
    9158:	00008579 	.word	0x00008579
    915c:	000134b9 	.word	0x000134b9
    9160:	00015875 	.word	0x00015875
    9164:	00013981 	.word	0x00013981
    9168:	00008529 	.word	0x00008529
    916c:	000084b5 	.word	0x000084b5
    9170:	00008671 	.word	0x00008671
    9174:	00008745 	.word	0x00008745

00009178 <grid_sys_nvm_clear_configuration>:

void grid_sys_nvm_clear_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    9178:	b530      	push	{r4, r5, lr}
    917a:	460b      	mov	r3, r1
	
	uint8_t temp[GRID_NVM_PAGE_SIZE] = {0};
	uint16_t length = 0;
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    917c:	f44f 21fe 	mov.w	r1, #520192	; 0x7f000
void grid_sys_nvm_clear_configuration(struct grid_sys_model* sys, struct grid_nvm_model* nvm){
    9180:	b0ed      	sub	sp, #436	; 0x1b4
	nvm->read_source_address = GRID_NVM_GLOBAL_BASE_ADDRESS;
    9182:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
	
	flash_erase(nvm->flash, GRID_NVM_GLOBAL_BASE_ADDRESS, 1);
    9186:	2201      	movs	r2, #1
    9188:	6818      	ldr	r0, [r3, #0]
    918a:	4b18      	ldr	r3, [pc, #96]	; (91ec <grid_sys_nvm_clear_configuration+0x74>)

	// Generate ACKNOWLEDGE RESPONSE
	struct grid_msg response;
		
	grid_msg_init(&response);
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    918c:	4c18      	ldr	r4, [pc, #96]	; (91f0 <grid_sys_nvm_clear_configuration+0x78>)

	uint8_t response_payload[10] = {0};
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    918e:	4d19      	ldr	r5, [pc, #100]	; (91f4 <grid_sys_nvm_clear_configuration+0x7c>)
	flash_erase(nvm->flash, GRID_NVM_GLOBAL_BASE_ADDRESS, 1);
    9190:	4798      	blx	r3
	grid_msg_init(&response);
    9192:	a805      	add	r0, sp, #20
    9194:	4b18      	ldr	r3, [pc, #96]	; (91f8 <grid_sys_nvm_clear_configuration+0x80>)
    9196:	4798      	blx	r3
	grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9198:	227f      	movs	r2, #127	; 0x7f
    919a:	4611      	mov	r1, r2
    919c:	a805      	add	r0, sp, #20
    919e:	2300      	movs	r3, #0
    91a0:	47a0      	blx	r4
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    91a2:	2303      	movs	r3, #3
	uint8_t response_payload[10] = {0};
    91a4:	2400      	movs	r4, #0
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    91a6:	4915      	ldr	r1, [pc, #84]	; (91fc <grid_sys_nvm_clear_configuration+0x84>)
    91a8:	9300      	str	r3, [sp, #0]
    91aa:	2202      	movs	r2, #2
    91ac:	2362      	movs	r3, #98	; 0x62
    91ae:	a802      	add	r0, sp, #8
	uint8_t response_payload[10] = {0};
    91b0:	e9cd 4402 	strd	r4, r4, [sp, #8]
    91b4:	f8ad 4010 	strh.w	r4, [sp, #16]
	sprintf(response_payload, GRID_CLASS_GLOBALCLEAR_frame);
    91b8:	47a8      	blx	r5

	grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    91ba:	4b11      	ldr	r3, [pc, #68]	; (9200 <grid_sys_nvm_clear_configuration+0x88>)
    91bc:	a802      	add	r0, sp, #8
    91be:	4798      	blx	r3
    91c0:	a902      	add	r1, sp, #8
    91c2:	4602      	mov	r2, r0
    91c4:	4b0f      	ldr	r3, [pc, #60]	; (9204 <grid_sys_nvm_clear_configuration+0x8c>)
    91c6:	a805      	add	r0, sp, #20
    91c8:	4798      	blx	r3
		
	if (acknowledge == 1){
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_ACKNOWLEDGE_code);
    91ca:	230a      	movs	r3, #10
    91cc:	4621      	mov	r1, r4
    91ce:	2204      	movs	r2, #4
    91d0:	9300      	str	r3, [sp, #0]
    91d2:	a805      	add	r0, sp, #20
    91d4:	4c0c      	ldr	r4, [pc, #48]	; (9208 <grid_sys_nvm_clear_configuration+0x90>)
    91d6:	2301      	movs	r3, #1
    91d8:	47a0      	blx	r4
	else{
		grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
	}

		
	grid_msg_packet_close(&response);
    91da:	4b0c      	ldr	r3, [pc, #48]	; (920c <grid_sys_nvm_clear_configuration+0x94>)
    91dc:	a805      	add	r0, sp, #20
    91de:	4798      	blx	r3
	grid_msg_packet_send_everywhere(&response);
    91e0:	4b0b      	ldr	r3, [pc, #44]	; (9210 <grid_sys_nvm_clear_configuration+0x98>)
    91e2:	a805      	add	r0, sp, #20
    91e4:	4798      	blx	r3
	
	
}
    91e6:	b06d      	add	sp, #436	; 0x1b4
    91e8:	bd30      	pop	{r4, r5, pc}
    91ea:	bf00      	nop
    91ec:	0000e239 	.word	0x0000e239
    91f0:	00008579 	.word	0x00008579
    91f4:	000134b9 	.word	0x000134b9
    91f8:	00008545 	.word	0x00008545
    91fc:	00015875 	.word	0x00015875
    9200:	00013981 	.word	0x00013981
    9204:	000084b5 	.word	0x000084b5
    9208:	00008529 	.word	0x00008529
    920c:	00008671 	.word	0x00008671
    9210:	00008745 	.word	0x00008745

00009214 <grid_debug_print_text>:



void grid_debug_print_text(uint8_t* debug_string){
    9214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	uint32_t debug_string_length = strlen(debug_string);
    9218:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 92fc <grid_debug_print_text+0xe8>
	
	struct grid_msg message;
	
	grid_msg_init(&message);
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    921c:	4c2b      	ldr	r4, [pc, #172]	; (92cc <grid_debug_print_text+0xb8>)
	
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
	uint32_t offset = 0;
	
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_start);
    921e:	4e2c      	ldr	r6, [pc, #176]	; (92d0 <grid_debug_print_text+0xbc>)
	offset += strlen(&payload[offset]);
		
	sprintf(&payload[offset], "# ");
    9220:	4f2c      	ldr	r7, [pc, #176]	; (92d4 <grid_debug_print_text+0xc0>)
void grid_debug_print_text(uint8_t* debug_string){
    9222:	f5ad 7d4c 	sub.w	sp, sp, #816	; 0x330
    9226:	4681      	mov	r9, r0
	uint32_t debug_string_length = strlen(debug_string);
    9228:	47d0      	blx	sl
	grid_msg_init(&message);
    922a:	4b2b      	ldr	r3, [pc, #172]	; (92d8 <grid_debug_print_text+0xc4>)
	uint32_t debug_string_length = strlen(debug_string);
    922c:	4680      	mov	r8, r0
	grid_msg_init(&message);
    922e:	a865      	add	r0, sp, #404	; 0x194
    9230:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9232:	227f      	movs	r2, #127	; 0x7f
    9234:	4611      	mov	r1, r2
    9236:	2300      	movs	r3, #0
    9238:	a865      	add	r0, sp, #404	; 0x194
    923a:	47a0      	blx	r4
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    923c:	2400      	movs	r4, #0
    923e:	4621      	mov	r1, r4
    9240:	4b26      	ldr	r3, [pc, #152]	; (92dc <grid_debug_print_text+0xc8>)
    9242:	9401      	str	r4, [sp, #4]
    9244:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9248:	a802      	add	r0, sp, #8
    924a:	4798      	blx	r3
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_start);
    924c:	2202      	movs	r2, #2
    924e:	4924      	ldr	r1, [pc, #144]	; (92e0 <grid_debug_print_text+0xcc>)
    9250:	2320      	movs	r3, #32
    9252:	a801      	add	r0, sp, #4
    9254:	47b0      	blx	r6
	offset += strlen(&payload[offset]);
    9256:	a801      	add	r0, sp, #4
    9258:	47d0      	blx	sl
	sprintf(&payload[offset], "# ");
    925a:	ab01      	add	r3, sp, #4
    925c:	4403      	add	r3, r0
    925e:	4921      	ldr	r1, [pc, #132]	; (92e4 <grid_debug_print_text+0xd0>)
	offset += strlen(&payload[offset]);
    9260:	4605      	mov	r5, r0
	sprintf(&payload[offset], "# ");
    9262:	4618      	mov	r0, r3
    9264:	47b8      	blx	r7
	offset += strlen(&payload[offset]);
    9266:	47d0      	blx	sl
    9268:	ab01      	add	r3, sp, #4
    926a:	4405      	add	r5, r0

	for(uint32_t i=0; i<debug_string_length; i++){
    926c:	1958      	adds	r0, r3, r5
    926e:	4621      	mov	r1, r4
    9270:	4603      	mov	r3, r0
    9272:	4654      	mov	r4, sl
    9274:	4541      	cmp	r1, r8
    9276:	d006      	beq.n	9286 <grid_debug_print_text+0x72>
		
		payload[offset+i] = debug_string[i];
    9278:	f819 2001 	ldrb.w	r2, [r9, r1]
    927c:	f803 2b01 	strb.w	r2, [r3], #1
		
		if (offset + i > GRID_PARAMETER_PACKET_marign)
    9280:	194a      	adds	r2, r1, r5
    9282:	2ac8      	cmp	r2, #200	; 0xc8
    9284:	d91f      	bls.n	92c6 <grid_debug_print_text+0xb2>
		{
			break;
		}
	}
	offset += strlen(&payload[offset]);
    9286:	47a0      	blx	r4
	
	
	sprintf(&payload[offset], " #");
    9288:	ab01      	add	r3, sp, #4
	offset += strlen(&payload[offset]);
    928a:	4405      	add	r5, r0
	sprintf(&payload[offset], " #");
    928c:	442b      	add	r3, r5
    928e:	4916      	ldr	r1, [pc, #88]	; (92e8 <grid_debug_print_text+0xd4>)
    9290:	4618      	mov	r0, r3
    9292:	47b8      	blx	r7
	offset += strlen(&payload[offset]);
    9294:	47a0      	blx	r4
	
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_end);
    9296:	ab01      	add	r3, sp, #4
	offset += strlen(&payload[offset]);
    9298:	4405      	add	r5, r0
	sprintf(&payload[offset], GRID_CLASS_DEBUGTEXT_frame_end);
    929a:	195f      	adds	r7, r3, r5
    929c:	4913      	ldr	r1, [pc, #76]	; (92ec <grid_debug_print_text+0xd8>)
    929e:	2203      	movs	r2, #3
    92a0:	4638      	mov	r0, r7
    92a2:	47b0      	blx	r6
	offset += strlen(&payload[offset]);	
    92a4:	4638      	mov	r0, r7
    92a6:	47a0      	blx	r4
	
	grid_msg_body_append_text(&message, payload, offset);
    92a8:	a901      	add	r1, sp, #4
    92aa:	1942      	adds	r2, r0, r5
    92ac:	4b10      	ldr	r3, [pc, #64]	; (92f0 <grid_debug_print_text+0xdc>)
    92ae:	a865      	add	r0, sp, #404	; 0x194
    92b0:	4798      	blx	r3
	grid_msg_packet_close(&message);
    92b2:	4b10      	ldr	r3, [pc, #64]	; (92f4 <grid_debug_print_text+0xe0>)
    92b4:	a865      	add	r0, sp, #404	; 0x194
    92b6:	4798      	blx	r3
	
	grid_msg_packet_send_everywhere(&message);
    92b8:	4b0f      	ldr	r3, [pc, #60]	; (92f8 <grid_debug_print_text+0xe4>)
    92ba:	a865      	add	r0, sp, #404	; 0x194
    92bc:	4798      	blx	r3
	

	
	
}
    92be:	f50d 7d4c 	add.w	sp, sp, #816	; 0x330
    92c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for(uint32_t i=0; i<debug_string_length; i++){
    92c6:	3101      	adds	r1, #1
    92c8:	e7d4      	b.n	9274 <grid_debug_print_text+0x60>
    92ca:	bf00      	nop
    92cc:	00008579 	.word	0x00008579
    92d0:	000134b9 	.word	0x000134b9
    92d4:	000138bd 	.word	0x000138bd
    92d8:	00008545 	.word	0x00008545
    92dc:	00012e05 	.word	0x00012e05
    92e0:	0001588d 	.word	0x0001588d
    92e4:	00015895 	.word	0x00015895
    92e8:	00015898 	.word	0x00015898
    92ec:	0001554f 	.word	0x0001554f
    92f0:	000084b5 	.word	0x000084b5
    92f4:	00008671 	.word	0x00008671
    92f8:	00008745 	.word	0x00008745
    92fc:	00013981 	.word	0x00013981

00009300 <tx_cb_USART_GRID>:
static void tx_cb_USART_GRID_W(const struct usart_async_descriptor *const descr)
{
	tx_cb_USART_GRID(&GRID_PORT_W);
}

void tx_cb_USART_GRID(struct grid_port* const por){
    9300:	b530      	push	{r4, r5, lr}
	
	
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    9302:	f06f 052b 	mvn.w	r5, #43	; 0x2b
    9306:	8984      	ldrh	r4, [r0, #12]
    9308:	f100 032c 	add.w	r3, r0, #44	; 0x2c
    930c:	1a2d      	subs	r5, r5, r0
    930e:	2200      	movs	r2, #0
    9310:	18e9      	adds	r1, r5, r3
    9312:	428c      	cmp	r4, r1
    9314:	d801      	bhi.n	931a <tx_cb_USART_GRID+0x1a>
		por->tx_double_buffer[i] = 0;
	}
	por->tx_double_buffer_status = 0;	
    9316:	8182      	strh	r2, [r0, #12]
}
    9318:	bd30      	pop	{r4, r5, pc}
		por->tx_double_buffer[i] = 0;
    931a:	f803 2b01 	strb.w	r2, [r3], #1
	for(uint32_t i=0; i<por->tx_double_buffer_status; i++){
    931e:	e7f7      	b.n	9310 <tx_cb_USART_GRID+0x10>

00009320 <tx_cb_USART_GRID_W>:
	tx_cb_USART_GRID(&GRID_PORT_W);
    9320:	4801      	ldr	r0, [pc, #4]	; (9328 <tx_cb_USART_GRID_W+0x8>)
    9322:	4b02      	ldr	r3, [pc, #8]	; (932c <tx_cb_USART_GRID_W+0xc>)
    9324:	4718      	bx	r3
    9326:	bf00      	nop
    9328:	20008270 	.word	0x20008270
    932c:	00009301 	.word	0x00009301

00009330 <tx_cb_USART_GRID_S>:
	tx_cb_USART_GRID(&GRID_PORT_S);
    9330:	4801      	ldr	r0, [pc, #4]	; (9338 <tx_cb_USART_GRID_S+0x8>)
    9332:	4b02      	ldr	r3, [pc, #8]	; (933c <tx_cb_USART_GRID_S+0xc>)
    9334:	4718      	bx	r3
    9336:	bf00      	nop
    9338:	2000b73c 	.word	0x2000b73c
    933c:	00009301 	.word	0x00009301

00009340 <tx_cb_USART_GRID_E>:
	tx_cb_USART_GRID(&GRID_PORT_E);
    9340:	4801      	ldr	r0, [pc, #4]	; (9348 <tx_cb_USART_GRID_E+0x8>)
    9342:	4b02      	ldr	r3, [pc, #8]	; (934c <tx_cb_USART_GRID_E+0xc>)
    9344:	4718      	bx	r3
    9346:	bf00      	nop
    9348:	200116d8 	.word	0x200116d8
    934c:	00009301 	.word	0x00009301

00009350 <tx_cb_USART_GRID_N>:
	tx_cb_USART_GRID(&GRID_PORT_N);
    9350:	4801      	ldr	r0, [pc, #4]	; (9358 <tx_cb_USART_GRID_N+0x8>)
    9352:	4b02      	ldr	r3, [pc, #8]	; (935c <tx_cb_USART_GRID_N+0xc>)
    9354:	4718      	bx	r3
    9356:	bf00      	nop
    9358:	200010ec 	.word	0x200010ec
    935c:	00009301 	.word	0x00009301

00009360 <err_cb_USART_GRID>:
	err_cb_USART_GRID(&GRID_PORT_W);
}


void err_cb_USART_GRID(struct grid_port* const por){
	por->usart_error_flag = 1;	
    9360:	2301      	movs	r3, #1
    9362:	7603      	strb	r3, [r0, #24]
	
	usart_async_disable(por->usart);
    9364:	6840      	ldr	r0, [r0, #4]
    9366:	4b01      	ldr	r3, [pc, #4]	; (936c <err_cb_USART_GRID+0xc>)
    9368:	4718      	bx	r3
    936a:	bf00      	nop
    936c:	00010351 	.word	0x00010351

00009370 <err_cb_USART_GRID_W>:
	err_cb_USART_GRID(&GRID_PORT_W);
    9370:	4801      	ldr	r0, [pc, #4]	; (9378 <err_cb_USART_GRID_W+0x8>)
    9372:	4b02      	ldr	r3, [pc, #8]	; (937c <err_cb_USART_GRID_W+0xc>)
    9374:	4718      	bx	r3
    9376:	bf00      	nop
    9378:	20008270 	.word	0x20008270
    937c:	00009361 	.word	0x00009361

00009380 <err_cb_USART_GRID_S>:
	err_cb_USART_GRID(&GRID_PORT_S);
    9380:	4801      	ldr	r0, [pc, #4]	; (9388 <err_cb_USART_GRID_S+0x8>)
    9382:	4b02      	ldr	r3, [pc, #8]	; (938c <err_cb_USART_GRID_S+0xc>)
    9384:	4718      	bx	r3
    9386:	bf00      	nop
    9388:	2000b73c 	.word	0x2000b73c
    938c:	00009361 	.word	0x00009361

00009390 <err_cb_USART_GRID_E>:
	err_cb_USART_GRID(&GRID_PORT_E);
    9390:	4801      	ldr	r0, [pc, #4]	; (9398 <err_cb_USART_GRID_E+0x8>)
    9392:	4b02      	ldr	r3, [pc, #8]	; (939c <err_cb_USART_GRID_E+0xc>)
    9394:	4718      	bx	r3
    9396:	bf00      	nop
    9398:	200116d8 	.word	0x200116d8
    939c:	00009361 	.word	0x00009361

000093a0 <err_cb_USART_GRID_N>:
	err_cb_USART_GRID(&GRID_PORT_N);
    93a0:	4801      	ldr	r0, [pc, #4]	; (93a8 <err_cb_USART_GRID_N+0x8>)
    93a2:	4b02      	ldr	r3, [pc, #8]	; (93ac <err_cb_USART_GRID_N+0xc>)
    93a4:	4718      	bx	r3
    93a6:	bf00      	nop
    93a8:	200010ec 	.word	0x200010ec
    93ac:	00009361 	.word	0x00009361

000093b0 <grid_sys_port_reset_dma>:
#define DMA_SOUTH_RX_CHANNEL	2
#define DMA_WEST_RX_CHANNEL		3

void grid_sys_port_reset_dma(struct grid_port* por){
	
	hri_dmac_clear_CHCTRLA_ENABLE_bit(DMAC, por->dma_channel);
    93b0:	7a80      	ldrb	r0, [r0, #10]
}

static inline void hri_dmac_clear_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    93b2:	0103      	lsls	r3, r0, #4
    93b4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    93b8:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
	_dma_enable_transaction(por->dma_channel, false);
    93bc:	2100      	movs	r1, #0
    93be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    93c0:	f022 0202 	bic.w	r2, r2, #2
    93c4:	641a      	str	r2, [r3, #64]	; 0x40
    93c6:	4b01      	ldr	r3, [pc, #4]	; (93cc <grid_sys_port_reset_dma+0x1c>)
    93c8:	4718      	bx	r3
    93ca:	bf00      	nop
    93cc:	0000d61d 	.word	0x0000d61d

000093d0 <dma_transfer_complete_n_cb>:
	grid_sys_port_reset_dma(por);
    93d0:	4801      	ldr	r0, [pc, #4]	; (93d8 <dma_transfer_complete_n_cb+0x8>)
    93d2:	4b02      	ldr	r3, [pc, #8]	; (93dc <dma_transfer_complete_n_cb+0xc>)
    93d4:	4718      	bx	r3
    93d6:	bf00      	nop
    93d8:	200010ec 	.word	0x200010ec
    93dc:	000093b1 	.word	0x000093b1

000093e0 <dma_transfer_complete_e_cb>:
    93e0:	4801      	ldr	r0, [pc, #4]	; (93e8 <dma_transfer_complete_e_cb+0x8>)
    93e2:	4b02      	ldr	r3, [pc, #8]	; (93ec <dma_transfer_complete_e_cb+0xc>)
    93e4:	4718      	bx	r3
    93e6:	bf00      	nop
    93e8:	200116d8 	.word	0x200116d8
    93ec:	000093b1 	.word	0x000093b1

000093f0 <dma_transfer_complete_s_cb>:
    93f0:	4801      	ldr	r0, [pc, #4]	; (93f8 <dma_transfer_complete_s_cb+0x8>)
    93f2:	4b02      	ldr	r3, [pc, #8]	; (93fc <dma_transfer_complete_s_cb+0xc>)
    93f4:	4718      	bx	r3
    93f6:	bf00      	nop
    93f8:	2000b73c 	.word	0x2000b73c
    93fc:	000093b1 	.word	0x000093b1

00009400 <dma_transfer_complete_w_cb>:
    9400:	4801      	ldr	r0, [pc, #4]	; (9408 <dma_transfer_complete_w_cb+0x8>)
    9402:	4b02      	ldr	r3, [pc, #8]	; (940c <dma_transfer_complete_w_cb+0xc>)
    9404:	4718      	bx	r3
    9406:	bf00      	nop
    9408:	20008270 	.word	0x20008270
    940c:	000093b1 	.word	0x000093b1

00009410 <grid_sys_uart_init>:

}


void grid_sys_uart_init(){
    9410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
    9414:	211c      	movs	r1, #28
    9416:	4c2c      	ldr	r4, [pc, #176]	; (94c8 <grid_sys_uart_init+0xb8>)
	gpio_set_pin_pull_mode(PC28, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC16, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PC12, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PB09, GPIO_PULL_UP);
	
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    9418:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 9514 <grid_sys_uart_init+0x104>
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    941c:	4f2b      	ldr	r7, [pc, #172]	; (94cc <grid_sys_uart_init+0xbc>)
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    941e:	4e2c      	ldr	r6, [pc, #176]	; (94d0 <grid_sys_uart_init+0xc0>)
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    9420:	4d2c      	ldr	r5, [pc, #176]	; (94d4 <grid_sys_uart_init+0xc4>)
			
	// Set parity for grid uart communication
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    9422:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 9518 <grid_sys_uart_init+0x108>
    9426:	2002      	movs	r0, #2
    9428:	47a0      	blx	r4
    942a:	2110      	movs	r1, #16
    942c:	2002      	movs	r0, #2
    942e:	47a0      	blx	r4
    9430:	210c      	movs	r1, #12
    9432:	2002      	movs	r0, #2
    9434:	47a0      	blx	r4
    9436:	2109      	movs	r1, #9
    9438:	2001      	movs	r0, #1
    943a:	47a0      	blx	r4
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_N);
    943c:	4c26      	ldr	r4, [pc, #152]	; (94d8 <grid_sys_uart_init+0xc8>)
    943e:	4a27      	ldr	r2, [pc, #156]	; (94dc <grid_sys_uart_init+0xcc>)
    9440:	2101      	movs	r1, #1
    9442:	4640      	mov	r0, r8
    9444:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_E);
    9446:	4a26      	ldr	r2, [pc, #152]	; (94e0 <grid_sys_uart_init+0xd0>)
    9448:	2101      	movs	r1, #1
    944a:	4638      	mov	r0, r7
    944c:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_TXC_CB, tx_cb_USART_GRID_S);
    944e:	4a25      	ldr	r2, [pc, #148]	; (94e4 <grid_sys_uart_init+0xd4>)
    9450:	2101      	movs	r1, #1
    9452:	4630      	mov	r0, r6
    9454:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST,  USART_ASYNC_TXC_CB, tx_cb_USART_GRID_W);
    9456:	4a24      	ldr	r2, [pc, #144]	; (94e8 <grid_sys_uart_init+0xd8>)
    9458:	2101      	movs	r1, #1
    945a:	4628      	mov	r0, r5
    945c:	47a0      	blx	r4
	usart_async_set_parity(&USART_NORTH, USART_PARITY_ODD);
    945e:	2101      	movs	r1, #1
    9460:	4640      	mov	r0, r8
    9462:	47c8      	blx	r9
	usart_async_set_parity(&USART_EAST, USART_PARITY_ODD);	
    9464:	2101      	movs	r1, #1
    9466:	4638      	mov	r0, r7
    9468:	47c8      	blx	r9
	usart_async_set_parity(&USART_SOUTH, USART_PARITY_ODD);
    946a:	2101      	movs	r1, #1
    946c:	4630      	mov	r0, r6
    946e:	47c8      	blx	r9
	usart_async_set_parity(&USART_WEST, USART_PARITY_ODD);
    9470:	2101      	movs	r1, #1
    9472:	4628      	mov	r0, r5
    9474:	47c8      	blx	r9
	
	// Set callback function for parity error
	usart_async_register_callback(&USART_NORTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_N);
    9476:	4a1d      	ldr	r2, [pc, #116]	; (94ec <grid_sys_uart_init+0xdc>)
    9478:	2102      	movs	r1, #2
    947a:	4640      	mov	r0, r8
    947c:	47a0      	blx	r4
	usart_async_register_callback(&USART_EAST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_E);
    947e:	4a1c      	ldr	r2, [pc, #112]	; (94f0 <grid_sys_uart_init+0xe0>)
    9480:	2102      	movs	r1, #2
    9482:	4638      	mov	r0, r7
    9484:	47a0      	blx	r4
	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_S);
    9486:	4a1b      	ldr	r2, [pc, #108]	; (94f4 <grid_sys_uart_init+0xe4>)
    9488:	2102      	movs	r1, #2
    948a:	4630      	mov	r0, r6
    948c:	47a0      	blx	r4
	usart_async_register_callback(&USART_WEST, USART_ASYNC_ERROR_CB, err_cb_USART_GRID_W);
    948e:	4a1a      	ldr	r2, [pc, #104]	; (94f8 <grid_sys_uart_init+0xe8>)
    9490:	2102      	movs	r1, #2
    9492:	4628      	mov	r0, r5
    9494:	47a0      	blx	r4
// 	usart_async_register_callback(&USART_EAST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_E);
// 	usart_async_register_callback(&USART_SOUTH, USART_ASYNC_RXC_CB, rx_cb_USART_GRID_S);
// 	usart_async_register_callback(&USART_WEST,  USART_ASYNC_RXC_CB, rx_cb_USART_GRID_W);

	
	usart_async_get_io_descriptor(&USART_NORTH, &grid_sys_north_io);
    9496:	4c19      	ldr	r4, [pc, #100]	; (94fc <grid_sys_uart_init+0xec>)
    9498:	4919      	ldr	r1, [pc, #100]	; (9500 <grid_sys_uart_init+0xf0>)
    949a:	4640      	mov	r0, r8
    949c:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_EAST,  &grid_sys_east_io);
    949e:	4919      	ldr	r1, [pc, #100]	; (9504 <grid_sys_uart_init+0xf4>)
    94a0:	4638      	mov	r0, r7
    94a2:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_SOUTH, &grid_sys_south_io);
    94a4:	4918      	ldr	r1, [pc, #96]	; (9508 <grid_sys_uart_init+0xf8>)
    94a6:	4630      	mov	r0, r6
    94a8:	47a0      	blx	r4
	usart_async_get_io_descriptor(&USART_WEST,  &grid_sys_west_io);
    94aa:	4918      	ldr	r1, [pc, #96]	; (950c <grid_sys_uart_init+0xfc>)
    94ac:	4628      	mov	r0, r5
    94ae:	47a0      	blx	r4
	
	
	usart_async_enable(&USART_NORTH);
    94b0:	4c17      	ldr	r4, [pc, #92]	; (9510 <grid_sys_uart_init+0x100>)
    94b2:	4640      	mov	r0, r8
    94b4:	47a0      	blx	r4
	usart_async_enable(&USART_EAST);
    94b6:	4638      	mov	r0, r7
    94b8:	47a0      	blx	r4
	usart_async_enable(&USART_SOUTH);
    94ba:	4630      	mov	r0, r6
    94bc:	47a0      	blx	r4
	usart_async_enable(&USART_WEST);
    94be:	4628      	mov	r0, r5
    94c0:	4623      	mov	r3, r4




}
    94c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	usart_async_enable(&USART_WEST);
    94c6:	4718      	bx	r3
    94c8:	00008cd9 	.word	0x00008cd9
    94cc:	20014c10 	.word	0x20014c10
    94d0:	20014d68 	.word	0x20014d68
    94d4:	20014d18 	.word	0x20014d18
    94d8:	000103a1 	.word	0x000103a1
    94dc:	00009351 	.word	0x00009351
    94e0:	00009341 	.word	0x00009341
    94e4:	00009331 	.word	0x00009331
    94e8:	00009321 	.word	0x00009321
    94ec:	000093a1 	.word	0x000093a1
    94f0:	00009391 	.word	0x00009391
    94f4:	00009381 	.word	0x00009381
    94f8:	00009371 	.word	0x00009371
    94fc:	0001037d 	.word	0x0001037d
    9500:	20006fa0 	.word	0x20006fa0
    9504:	2000b738 	.word	0x2000b738
    9508:	2000e688 	.word	0x2000e688
    950c:	200146b8 	.word	0x200146b8
    9510:	00010325 	.word	0x00010325
    9514:	20014c64 	.word	0x20014c64
    9518:	00010401 	.word	0x00010401

0000951c <grid_sys_dma_rx_init_one>:



void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    951c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
	
	uint8_t dma_rx_channel = por->dma_channel;
	
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    951e:	6843      	ldr	r3, [r0, #4]
	uint8_t dma_rx_channel = por->dma_channel;
    9520:	7a84      	ldrb	r4, [r0, #10]
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    9522:	460f      	mov	r7, r1
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    9524:	6a19      	ldr	r1, [r3, #32]
    9526:	4b10      	ldr	r3, [pc, #64]	; (9568 <grid_sys_dma_rx_init_one+0x4c>)
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    9528:	4605      	mov	r5, r0
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    952a:	3128      	adds	r1, #40	; 0x28
    952c:	4620      	mov	r0, r4
void grid_sys_dma_rx_init_one(struct grid_port* por, uint32_t buffer_length, void* transfer_done_cb() ){
    952e:	4616      	mov	r6, r2
	_dma_set_source_address(dma_rx_channel, (uint32_t) & (((Sercom *)((*por->usart).device.hw))->USART.DATA.reg));
    9530:	4798      	blx	r3
	_dma_set_destination_address(dma_rx_channel, (uint32_t *)por->rx_double_buffer);
    9532:	f505 519d 	add.w	r1, r5, #5024	; 0x13a0
    9536:	4b0d      	ldr	r3, [pc, #52]	; (956c <grid_sys_dma_rx_init_one+0x50>)
    9538:	3114      	adds	r1, #20
    953a:	4620      	mov	r0, r4
    953c:	4798      	blx	r3
	_dma_set_data_amount(dma_rx_channel, (uint32_t)buffer_length);
    953e:	4639      	mov	r1, r7
    9540:	4b0b      	ldr	r3, [pc, #44]	; (9570 <grid_sys_dma_rx_init_one+0x54>)
    9542:	4620      	mov	r0, r4
    9544:	4798      	blx	r3
	
	struct _dma_resource *resource_rx;
	_dma_get_channel_resource(&resource_rx, dma_rx_channel);
    9546:	4621      	mov	r1, r4
    9548:	4b0a      	ldr	r3, [pc, #40]	; (9574 <grid_sys_dma_rx_init_one+0x58>)
    954a:	a801      	add	r0, sp, #4
    954c:	4798      	blx	r3
	
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    954e:	9b01      	ldr	r3, [sp, #4]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    9550:	2201      	movs	r2, #1
	resource_rx->dma_cb.transfer_done = transfer_done_cb;
    9552:	601e      	str	r6, [r3, #0]
	_dma_set_irq_state(dma_rx_channel, DMA_TRANSFER_COMPLETE_CB, true);
    9554:	4620      	mov	r0, r4
    9556:	4b08      	ldr	r3, [pc, #32]	; (9578 <grid_sys_dma_rx_init_one+0x5c>)
    9558:	2100      	movs	r1, #0
    955a:	4798      	blx	r3
	
	//resource_rx->dma_cb.error         = function_cb;
	_dma_enable_transaction(dma_rx_channel, false);
    955c:	4b07      	ldr	r3, [pc, #28]	; (957c <grid_sys_dma_rx_init_one+0x60>)
    955e:	2100      	movs	r1, #0
    9560:	4620      	mov	r0, r4
    9562:	4798      	blx	r3
	

}
    9564:	b003      	add	sp, #12
    9566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9568:	0000d5ad 	.word	0x0000d5ad
    956c:	0000d59d 	.word	0x0000d59d
    9570:	0000d5d9 	.word	0x0000d5d9
    9574:	0000d659 	.word	0x0000d659
    9578:	0000d575 	.word	0x0000d575
    957c:	0000d61d 	.word	0x0000d61d

00009580 <grid_sys_dma_rx_init>:

void grid_sys_dma_rx_init(){
    9580:	b510      	push	{r4, lr}
	
	grid_sys_dma_rx_init_one(&GRID_PORT_N, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_n_cb);
    9582:	4a10      	ldr	r2, [pc, #64]	; (95c4 <grid_sys_dma_rx_init+0x44>)
    9584:	4c10      	ldr	r4, [pc, #64]	; (95c8 <grid_sys_dma_rx_init+0x48>)
    9586:	4811      	ldr	r0, [pc, #68]	; (95cc <grid_sys_dma_rx_init+0x4c>)
    9588:	f241 3188 	movw	r1, #5000	; 0x1388
    958c:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_E, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_e_cb);
    958e:	4a10      	ldr	r2, [pc, #64]	; (95d0 <grid_sys_dma_rx_init+0x50>)
    9590:	4810      	ldr	r0, [pc, #64]	; (95d4 <grid_sys_dma_rx_init+0x54>)
    9592:	f241 3188 	movw	r1, #5000	; 0x1388
    9596:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_S, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_s_cb);
    9598:	4a0f      	ldr	r2, [pc, #60]	; (95d8 <grid_sys_dma_rx_init+0x58>)
    959a:	4810      	ldr	r0, [pc, #64]	; (95dc <grid_sys_dma_rx_init+0x5c>)
    959c:	f241 3188 	movw	r1, #5000	; 0x1388
    95a0:	47a0      	blx	r4
	grid_sys_dma_rx_init_one(&GRID_PORT_W, GRID_DOUBLE_BUFFER_RX_SIZE, dma_transfer_complete_w_cb);
    95a2:	4a0f      	ldr	r2, [pc, #60]	; (95e0 <grid_sys_dma_rx_init+0x60>)
    95a4:	480f      	ldr	r0, [pc, #60]	; (95e4 <grid_sys_dma_rx_init+0x64>)
    95a6:	f241 3188 	movw	r1, #5000	; 0x1388
    95aa:	47a0      	blx	r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    95ac:	4b0e      	ldr	r3, [pc, #56]	; (95e8 <grid_sys_dma_rx_init+0x68>)
    95ae:	2200      	movs	r2, #0
    95b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
    95b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
    95b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
    95bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
	NVIC_SetPriority(DMAC_0_IRQn, 0);
	NVIC_SetPriority(DMAC_1_IRQn, 0);
	NVIC_SetPriority(DMAC_2_IRQn, 0);
	NVIC_SetPriority(DMAC_3_IRQn, 0);
	
}
    95c0:	bd10      	pop	{r4, pc}
    95c2:	bf00      	nop
    95c4:	000093d1 	.word	0x000093d1
    95c8:	0000951d 	.word	0x0000951d
    95cc:	200010ec 	.word	0x200010ec
    95d0:	000093e1 	.word	0x000093e1
    95d4:	200116d8 	.word	0x200116d8
    95d8:	000093f1 	.word	0x000093f1
    95dc:	2000b73c 	.word	0x2000b73c
    95e0:	00009401 	.word	0x00009401
    95e4:	20008270 	.word	0x20008270
    95e8:	e000e100 	.word	0xe000e100

000095ec <grid_sys_init>:
	return tmp;
}

static inline hri_rstc_rcause_reg_t hri_rstc_read_RCAUSE_reg(const void *const hw)
{
	return ((Rstc *)hw)->RCAUSE.reg;
    95ec:	4b16      	ldr	r3, [pc, #88]	; (9648 <grid_sys_init+0x5c>)

void grid_sys_init(struct grid_sys_model* mod){
    95ee:	b570      	push	{r4, r5, r6, lr}
    95f0:	781b      	ldrb	r3, [r3, #0]
	
	mod->uptime = 0;
	mod->reset_cause = hri_rstc_read_RCAUSE_reg(RSTC);
    95f2:	7103      	strb	r3, [r0, #4]
	mod->uptime = 0;
    95f4:	2500      	movs	r5, #0
void grid_sys_init(struct grid_sys_model* mod){
    95f6:	4604      	mov	r4, r0
	mod->uptime = 0;
    95f8:	6005      	str	r5, [r0, #0]
	
    
	mod->sessionid = rand_sync_read8(&RAND_0);
    95fa:	4b14      	ldr	r3, [pc, #80]	; (964c <grid_sys_init+0x60>)
    95fc:	4814      	ldr	r0, [pc, #80]	; (9650 <grid_sys_init+0x64>)
    95fe:	4798      	blx	r3
	mod->bank_color_r[3] = 100;
	mod->bank_color_g[3] = 0;
	mod->bank_color_b[3] = 200;
	
	mod->bank_enabled[0] = 1;
	mod->bank_enabled[1] = 1;
    9600:	4a14      	ldr	r2, [pc, #80]	; (9654 <grid_sys_init+0x68>)
    9602:	4b15      	ldr	r3, [pc, #84]	; (9658 <grid_sys_init+0x6c>)
	mod->bank_color_g[1] = 100;
    9604:	4915      	ldr	r1, [pc, #84]	; (965c <grid_sys_init+0x70>)
	mod->sessionid = rand_sync_read8(&RAND_0);
    9606:	7160      	strb	r0, [r4, #5]
	mod->bank_enabled[1] = 1;
    9608:	e9c4 2304 	strd	r2, r3, [r4, #16]
	mod->bank_color_g[1] = 100;
    960c:	4b14      	ldr	r3, [pc, #80]	; (9660 <grid_sys_init+0x74>)
	mod->bank_setting_changed_flag = 0;
	
	mod->bank_init_flag = 0;


	mod->bank_activebank_number = 0;
    960e:	73e5      	strb	r5, [r4, #15]
	mod->bank_color_g[1] = 100;
    9610:	e9c4 1306 	strd	r1, r3, [r4, #24]
	mod->bank_color_b[1] = 0;
    9614:	f44f 5348 	mov.w	r3, #12800	; 0x3200
    9618:	8423      	strh	r3, [r4, #32]
	mod->bank_color_b[3] = 200;
    961a:	23c8      	movs	r3, #200	; 0xc8
    961c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	if (banknumber == 255){
			
		//mod->bank_activebank_number = 0;
		mod->bank_activebank_valid = 0;
		
		mod->bank_active_changed = 1;
    9620:	4b10      	ldr	r3, [pc, #64]	; (9664 <grid_sys_init+0x78>)
	mod->bank_activebank_color_r = 0;
    9622:	6265      	str	r5, [r4, #36]	; 0x24
		mod->bank_active_changed = 1;
    9624:	2201      	movs	r2, #1
    9626:	745a      	strb	r2, [r3, #17]
				
		mod->bank_activebank_color_r = 127;
    9628:	f647 727f 	movw	r2, #32639	; 0x7f7f
		mod->bank_activebank_valid = 0;
    962c:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
		mod->bank_activebank_color_r = 127;
    9630:	849a      	strh	r2, [r3, #36]	; 0x24
		mod->bank_activebank_color_g = 127;
		mod->bank_activebank_color_b = 127;
    9632:	227f      	movs	r2, #127	; 0x7f
    9634:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	grid_port_init_all();
    9638:	4b0b      	ldr	r3, [pc, #44]	; (9668 <grid_sys_init+0x7c>)
    963a:	4798      	blx	r3
	grid_sys_uart_init();
    963c:	4b0b      	ldr	r3, [pc, #44]	; (966c <grid_sys_init+0x80>)
    963e:	4798      	blx	r3
}
    9640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	grid_sys_dma_rx_init();
    9644:	4b0a      	ldr	r3, [pc, #40]	; (9670 <grid_sys_init+0x84>)
    9646:	4718      	bx	r3
    9648:	40000c00 	.word	0x40000c00
    964c:	0000db8d 	.word	0x0000db8d
    9650:	20014bdc 	.word	0x20014bdc
    9654:	01000001 	.word	0x01000001
    9658:	00010101 	.word	0x00010101
    965c:	646432c8 	.word	0x646432c8
    9660:	c800c864 	.word	0xc800c864
    9664:	20006fa4 	.word	0x20006fa4
    9668:	00005165 	.word	0x00005165
    966c:	00009411 	.word	0x00009411
    9670:	00009581 	.word	0x00009581

00009674 <grid_sys_bank_enable>:
	if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    9674:	2903      	cmp	r1, #3
		mod->bank_enabled[banknumber] = 1;
    9676:	bf9e      	ittt	ls
    9678:	1809      	addls	r1, r1, r0
    967a:	2301      	movls	r3, #1
    967c:	74cb      	strbls	r3, [r1, #19]
}
    967e:	4770      	bx	lr

00009680 <grid_sys_bank_disable>:
	if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    9680:	2903      	cmp	r1, #3
		mod->bank_enabled[banknumber] = 0;
    9682:	bf9e      	ittt	ls
    9684:	1809      	addls	r1, r1, r0
    9686:	2300      	movls	r3, #0
    9688:	74cb      	strbls	r3, [r1, #19]
}
    968a:	4770      	bx	lr

0000968c <grid_sys_bank_set_color>:
	if (banknumber>GRID_SYS_BANK_MAXNUMBER){
    968c:	2904      	cmp	r1, #4
    968e:	d901      	bls.n	9694 <grid_sys_bank_set_color+0x8>
		return false;
    9690:	2000      	movs	r0, #0
    9692:	4770      	bx	lr
	mod->bank_color_r[banknumber] = ((rgb&0x00FF0000)>>16);
    9694:	4401      	add	r1, r0
    9696:	0c13      	lsrs	r3, r2, #16
    9698:	75cb      	strb	r3, [r1, #23]
	mod->bank_color_g[banknumber] = ((rgb&0x0000FF00)>>8);
    969a:	0a13      	lsrs	r3, r2, #8
    969c:	76cb      	strb	r3, [r1, #27]
	mod->bank_color_b[banknumber] = ((rgb&0x000000FF)>>0);
    969e:	77ca      	strb	r2, [r1, #31]
}
    96a0:	4770      	bx	lr

000096a2 <grid_sys_get_bank_num>:
}
    96a2:	7bc0      	ldrb	r0, [r0, #15]
    96a4:	4770      	bx	lr

000096a6 <grid_sys_get_bank_valid>:
}
    96a6:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    96aa:	4770      	bx	lr

000096ac <grid_sys_get_bank_red>:
}
    96ac:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
    96b0:	4770      	bx	lr

000096b2 <grid_sys_get_bank_gre>:
}
    96b2:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
    96b6:	4770      	bx	lr

000096b8 <grid_sys_get_bank_blu>:
}
    96b8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    96bc:	4770      	bx	lr

000096be <grid_sys_get_bank_next>:
uint8_t grid_sys_get_bank_next(struct grid_sys_model* mod){
    96be:	b530      	push	{r4, r5, lr}
    96c0:	4602      	mov	r2, r0
	return mod->bank_activebank_number;
    96c2:	7bc0      	ldrb	r0, [r0, #15]
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    96c4:	1c43      	adds	r3, r0, #1
    96c6:	1d44      	adds	r4, r0, #5
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    96c8:	f003 0103 	and.w	r1, r3, #3
		if (mod->bank_enabled[bank_check] == 1){
    96cc:	1855      	adds	r5, r2, r1
    96ce:	7ced      	ldrb	r5, [r5, #19]
    96d0:	2d01      	cmp	r5, #1
    96d2:	d003      	beq.n	96dc <grid_sys_get_bank_next+0x1e>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    96d4:	3301      	adds	r3, #1
    96d6:	42a3      	cmp	r3, r4
    96d8:	d1f6      	bne.n	96c8 <grid_sys_get_bank_next+0xa>
}
    96da:	bd30      	pop	{r4, r5, pc}
		uint8_t bank_check = (current_active+i+1)%GRID_SYS_BANK_MAXNUMBER;
    96dc:	b2c8      	uxtb	r0, r1
    96de:	e7fc      	b.n	96da <grid_sys_get_bank_next+0x1c>

000096e0 <grid_sys_get_bank_number_of_first_valid>:
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    96e0:	f100 0213 	add.w	r2, r0, #19
uint8_t grid_sys_get_bank_number_of_first_valid(struct grid_sys_model* mod){
    96e4:	2300      	movs	r3, #0
		if (mod->bank_enabled[i] == 1){
    96e6:	f812 1b01 	ldrb.w	r1, [r2], #1
    96ea:	2901      	cmp	r1, #1
    96ec:	b2d8      	uxtb	r0, r3
    96ee:	d003      	beq.n	96f8 <grid_sys_get_bank_number_of_first_valid+0x18>
	for (uint8_t i=0; i<GRID_SYS_BANK_MAXNUMBER; i++){
    96f0:	3301      	adds	r3, #1
    96f2:	2b04      	cmp	r3, #4
    96f4:	d1f7      	bne.n	96e6 <grid_sys_get_bank_number_of_first_valid+0x6>
	return 255;
    96f6:	20ff      	movs	r0, #255	; 0xff
}
    96f8:	4770      	bx	lr

000096fa <grid_sys_set_bank>:
	if (banknumber == 255){
    96fa:	29ff      	cmp	r1, #255	; 0xff
    96fc:	d10b      	bne.n	9716 <grid_sys_set_bank+0x1c>
		mod->bank_active_changed = 1;
    96fe:	2301      	movs	r3, #1
    9700:	7443      	strb	r3, [r0, #17]
		mod->bank_activebank_valid = 0;
    9702:	2300      	movs	r3, #0
    9704:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
		mod->bank_activebank_color_r = 127;
    9708:	f647 737f 	movw	r3, #32639	; 0x7f7f
    970c:	8483      	strh	r3, [r0, #36]	; 0x24
		mod->bank_activebank_color_b = 127;
    970e:	237f      	movs	r3, #127	; 0x7f
			
			mod->bank_active_changed = 1;
			
			mod->bank_activebank_color_r = mod->bank_color_r[mod->bank_activebank_number];
			mod->bank_activebank_color_g = mod->bank_color_g[mod->bank_activebank_number];
			mod->bank_activebank_color_b = mod->bank_color_b[mod->bank_activebank_number];	
    9710:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
		//grid_debug_print_text("Invalid Bank Number");	
				
	}

	
}
    9714:	4770      	bx	lr
	else if (banknumber<GRID_SYS_BANK_MAXNUMBER){
    9716:	2903      	cmp	r1, #3
    9718:	d8fc      	bhi.n	9714 <grid_sys_set_bank+0x1a>
		mod->bank_init_flag = 1;
    971a:	2301      	movs	r3, #1
    971c:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
		if (mod->bank_enabled[banknumber] == 1){
    9720:	1843      	adds	r3, r0, r1
    9722:	7cda      	ldrb	r2, [r3, #19]
    9724:	2a01      	cmp	r2, #1
    9726:	d1f5      	bne.n	9714 <grid_sys_set_bank+0x1a>
			mod->bank_activebank_number = banknumber;
    9728:	73c1      	strb	r1, [r0, #15]
			mod->bank_activebank_valid = 1;
    972a:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
			mod->bank_active_changed = 1;
    972e:	7442      	strb	r2, [r0, #17]
			mod->bank_activebank_color_r = mod->bank_color_r[mod->bank_activebank_number];
    9730:	7dda      	ldrb	r2, [r3, #23]
    9732:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
			mod->bank_activebank_color_g = mod->bank_color_g[mod->bank_activebank_number];
    9736:	7eda      	ldrb	r2, [r3, #27]
    9738:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
			mod->bank_activebank_color_b = mod->bank_color_b[mod->bank_activebank_number];	
    973c:	7fdb      	ldrb	r3, [r3, #31]
    973e:	e7e7      	b.n	9710 <grid_sys_set_bank+0x16>

00009740 <grid_sys_rtc_get_time>:

// REALTIME

uint32_t grid_sys_rtc_get_time(struct grid_sys_model* mod){
	return mod->realtime;
}
    9740:	6a80      	ldr	r0, [r0, #40]	; 0x28
    9742:	4770      	bx	lr

00009744 <grid_sys_rtc_get_elapsed_time>:
	mod->realtime = tvalue;
}

uint32_t grid_sys_rtc_get_elapsed_time(struct grid_sys_model* mod, uint32_t t_old){
	
	return mod->realtime-t_old;
    9744:	6a80      	ldr	r0, [r0, #40]	; 0x28
	
	

}
    9746:	1a40      	subs	r0, r0, r1
    9748:	4770      	bx	lr

0000974a <grid_sys_rtc_tick_time>:

void grid_sys_rtc_tick_time(struct grid_sys_model* mod){
	
	mod->realtime++;
    974a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    974c:	3301      	adds	r3, #1
    974e:	6283      	str	r3, [r0, #40]	; 0x28
	if (mod->uptime != -1){
    9750:	6803      	ldr	r3, [r0, #0]
    9752:	1c5a      	adds	r2, r3, #1
		mod->uptime++;
    9754:	bf1c      	itt	ne
    9756:	3301      	addne	r3, #1
    9758:	6003      	strne	r3, [r0, #0]
	}
	
}
    975a:	4770      	bx	lr

0000975c <grid_sys_alert_read_color_changed_flag>:

uint8_t grid_sys_alert_read_color_changed_flag(struct grid_sys_model* mod){
		
	return mod->alert_color_changed;
	
}
    975c:	7b80      	ldrb	r0, [r0, #14]
    975e:	4770      	bx	lr

00009760 <grid_sys_alert_clear_color_changed_flag>:
	
}

void grid_sys_alert_clear_color_changed_flag(struct grid_sys_model* mod){
	
	mod->alert_color_changed = 0;
    9760:	2300      	movs	r3, #0
    9762:	7383      	strb	r3, [r0, #14]
	
}
    9764:	4770      	bx	lr

00009766 <grid_sys_alert_get_color_intensity>:

uint8_t grid_sys_alert_get_color_intensity(struct grid_sys_model* mod){
	
	if (mod->alert_style == 0){ // TRIANGLE
    9766:	7b03      	ldrb	r3, [r0, #12]
    9768:	b963      	cbnz	r3, 9784 <grid_sys_alert_get_color_intensity+0x1e>
		
		return (250-abs(mod->alert_state/2-250))/2;
    976a:	8940      	ldrh	r0, [r0, #10]
    976c:	0840      	lsrs	r0, r0, #1
    976e:	38fa      	subs	r0, #250	; 0xfa
    9770:	2800      	cmp	r0, #0
    9772:	bfb8      	it	lt
    9774:	4240      	neglt	r0, r0
    9776:	f1c0 00fa 	rsb	r0, r0, #250	; 0xfa
    977a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
    977e:	f3c0 0047 	ubfx	r0, r0, #1, #8
    9782:	4770      	bx	lr
	}
	else if (mod->alert_style == 1){ // SQUARE
    9784:	2b01      	cmp	r3, #1
    9786:	d107      	bne.n	9798 <grid_sys_alert_get_color_intensity+0x32>
		
		return 255*(mod->alert_state/250%2);
    9788:	8940      	ldrh	r0, [r0, #10]
    978a:	23fa      	movs	r3, #250	; 0xfa
    978c:	fbb0 f0f3 	udiv	r0, r0, r3
    9790:	f340 0000 	sbfx	r0, r0, #0, #1
    9794:	b2c0      	uxtb	r0, r0
    9796:	4770      	bx	lr
	}
	else if (mod->alert_style == 2){ // CONST
    9798:	2b02      	cmp	r3, #2
    979a:	d105      	bne.n	97a8 <grid_sys_alert_get_color_intensity+0x42>
		
		return 255*(mod->alert_state>100);
    979c:	8940      	ldrh	r0, [r0, #10]
    979e:	2864      	cmp	r0, #100	; 0x64
    97a0:	bf8c      	ite	hi
    97a2:	20ff      	movhi	r0, #255	; 0xff
    97a4:	2000      	movls	r0, #0
    97a6:	4770      	bx	lr
	}
	
	
}
    97a8:	4770      	bx	lr

000097aa <grid_sys_alert_set_alert>:
	mod->alert_color_green = green;
	mod->alert_color_blue = blue;
		
}

void grid_sys_alert_set_alert(struct grid_sys_model* mod, uint8_t red, uint8_t green, uint8_t blue, uint8_t style, uint16_t duration){
    97aa:	b510      	push	{r4, lr}
	mod->alert_color_blue = blue;
    97ac:	7203      	strb	r3, [r0, #8]
	
	grid_sys_alert_set_color(mod, red, green, blue);

	
	mod->alert_state = duration;
    97ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    97b2:	8143      	strh	r3, [r0, #10]
	mod->alert_color_changed = 1;
    97b4:	2401      	movs	r4, #1
	mod->alert_style = style;
    97b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
	mod->alert_color_changed = 1;
    97ba:	7384      	strb	r4, [r0, #14]
	mod->alert_color_red = red;
    97bc:	7181      	strb	r1, [r0, #6]
	mod->alert_color_green = green;
    97be:	71c2      	strb	r2, [r0, #7]
	mod->alert_style = style;
    97c0:	7303      	strb	r3, [r0, #12]
	
}
    97c2:	bd10      	pop	{r4, pc}

000097c4 <grid_sys_alert_get_color_r>:

uint8_t grid_sys_alert_get_color_r(struct grid_sys_model* mod){
	
	return mod->alert_color_red;
}
    97c4:	7980      	ldrb	r0, [r0, #6]
    97c6:	4770      	bx	lr

000097c8 <grid_sys_alert_get_color_g>:

uint8_t grid_sys_alert_get_color_g(struct grid_sys_model* mod){
	
	return mod->alert_color_green;
}
    97c8:	79c0      	ldrb	r0, [r0, #7]
    97ca:	4770      	bx	lr

000097cc <grid_sys_alert_get_color_b>:

uint8_t grid_sys_alert_get_color_b(struct grid_sys_model* mod){
	
	return mod->alert_color_blue;
}
    97cc:	7a00      	ldrb	r0, [r0, #8]
    97ce:	4770      	bx	lr

000097d0 <grid_sys_read_hex_char_value>:

uint8_t grid_sys_read_hex_char_value(uint8_t ascii, uint8_t* error_flag){
		
	uint8_t result = 0;
	
	if (ascii>47 && ascii<58){
    97d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    97d4:	b2db      	uxtb	r3, r3
    97d6:	2b09      	cmp	r3, #9
    97d8:	d905      	bls.n	97e6 <grid_sys_read_hex_char_value+0x16>
		result = ascii-48;
	}
	else if(ascii>96 && ascii<103){
    97da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    97de:	2b05      	cmp	r3, #5
    97e0:	d803      	bhi.n	97ea <grid_sys_read_hex_char_value+0x1a>
		result = ascii - 97 + 10;
    97e2:	3857      	subs	r0, #87	; 0x57
    97e4:	b2c3      	uxtb	r3, r0
			*error_flag = ascii;
		}
	}
	
	return result;	
}
    97e6:	4618      	mov	r0, r3
    97e8:	4770      	bx	lr
		if (error_flag != NULL){
    97ea:	b111      	cbz	r1, 97f2 <grid_sys_read_hex_char_value+0x22>
			*error_flag = ascii;
    97ec:	7008      	strb	r0, [r1, #0]
	uint8_t result = 0;
    97ee:	2300      	movs	r3, #0
    97f0:	e7f9      	b.n	97e6 <grid_sys_read_hex_char_value+0x16>
    97f2:	460b      	mov	r3, r1
    97f4:	e7f7      	b.n	97e6 <grid_sys_read_hex_char_value+0x16>
	...

000097f8 <grid_sys_read_hex_string_value>:

uint32_t grid_sys_read_hex_string_value(uint8_t* start_location, uint8_t length, uint8_t* error_flag){
    97f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	uint32_t result  = 0;
	
	for(uint8_t i=0; i<length; i++){
		
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    97fa:	4f08      	ldr	r7, [pc, #32]	; (981c <grid_sys_read_hex_string_value+0x24>)
    97fc:	1e45      	subs	r5, r0, #1
    97fe:	008c      	lsls	r4, r1, #2
	uint32_t result  = 0;
    9800:	2600      	movs	r6, #0
	for(uint8_t i=0; i<length; i++){
    9802:	3c04      	subs	r4, #4
    9804:	1d23      	adds	r3, r4, #4
    9806:	d101      	bne.n	980c <grid_sys_read_hex_string_value+0x14>

		
	}

	return result;
}
    9808:	4630      	mov	r0, r6
    980a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		result += grid_sys_read_hex_char_value(start_location[i], error_flag) << (length-i-1)*4;
    980c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    9810:	4611      	mov	r1, r2
    9812:	47b8      	blx	r7
    9814:	40a0      	lsls	r0, r4
    9816:	4406      	add	r6, r0
	for(uint8_t i=0; i<length; i++){
    9818:	e7f3      	b.n	9802 <grid_sys_read_hex_string_value+0xa>
    981a:	bf00      	nop
    981c:	000097d1 	.word	0x000097d1

00009820 <grid_sys_write_hex_string_value>:

void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    9820:	b530      	push	{r4, r5, lr}
    9822:	b085      	sub	sp, #20
	
	uint8_t str[10];
	
	sprintf(str, "%08x", value);
    9824:	4b0a      	ldr	r3, [pc, #40]	; (9850 <grid_sys_write_hex_string_value+0x30>)
void grid_sys_write_hex_string_value(uint8_t* start_location, uint8_t size, uint32_t value){
    9826:	460c      	mov	r4, r1
    9828:	4605      	mov	r5, r0
	sprintf(str, "%08x", value);
    982a:	490a      	ldr	r1, [pc, #40]	; (9854 <grid_sys_write_hex_string_value+0x34>)
    982c:	a801      	add	r0, sp, #4
    982e:	4798      	blx	r3
		
	for(uint8_t i=0; i<size; i++){	
    9830:	aa01      	add	r2, sp, #4
    9832:	f1c4 0308 	rsb	r3, r4, #8
    9836:	4413      	add	r3, r2
    9838:	2200      	movs	r2, #0
    983a:	b2d1      	uxtb	r1, r2
    983c:	428c      	cmp	r4, r1
    983e:	d801      	bhi.n	9844 <grid_sys_write_hex_string_value+0x24>
		start_location[i] = str[8-size+i];	
	}

}
    9840:	b005      	add	sp, #20
    9842:	bd30      	pop	{r4, r5, pc}
		start_location[i] = str[8-size+i];	
    9844:	f813 1b01 	ldrb.w	r1, [r3], #1
    9848:	54a9      	strb	r1, [r5, r2]
	for(uint8_t i=0; i<size; i++){	
    984a:	3201      	adds	r2, #1
    984c:	e7f5      	b.n	983a <grid_sys_write_hex_string_value+0x1a>
    984e:	bf00      	nop
    9850:	000134b9 	.word	0x000134b9
    9854:	0001589b 	.word	0x0001589b

00009858 <grid_sys_get_id>:



uint32_t grid_sys_get_id(uint32_t* return_array){
			
	return_array[0] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_0);
    9858:	4b06      	ldr	r3, [pc, #24]	; (9874 <grid_sys_get_id+0x1c>)
    985a:	681b      	ldr	r3, [r3, #0]
    985c:	6003      	str	r3, [r0, #0]
	return_array[1] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_1);
    985e:	4b06      	ldr	r3, [pc, #24]	; (9878 <grid_sys_get_id+0x20>)
    9860:	681b      	ldr	r3, [r3, #0]
    9862:	6043      	str	r3, [r0, #4]
	return_array[2] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_2);
    9864:	4b05      	ldr	r3, [pc, #20]	; (987c <grid_sys_get_id+0x24>)
    9866:	681b      	ldr	r3, [r3, #0]
    9868:	6083      	str	r3, [r0, #8]
	return_array[3] = *(uint32_t*)(GRID_SYS_UNIQUE_ID_ADDRESS_3);
    986a:	4b05      	ldr	r3, [pc, #20]	; (9880 <grid_sys_get_id+0x28>)
    986c:	681b      	ldr	r3, [r3, #0]
    986e:	60c3      	str	r3, [r0, #12]
	
	return 1;
	
}
    9870:	2001      	movs	r0, #1
    9872:	4770      	bx	lr
    9874:	008061fc 	.word	0x008061fc
    9878:	00806010 	.word	0x00806010
    987c:	00806014 	.word	0x00806014
    9880:	00806018 	.word	0x00806018

00009884 <grid_sys_get_hwcfg>:

uint32_t grid_sys_get_hwcfg(){
    9884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	
	// Read the register for the first time, then later just return the saved value

	if (grid_sys_hwfcg == -1){
    9888:	4e30      	ldr	r6, [pc, #192]	; (994c <grid_sys_get_hwcfg+0xc8>)
    988a:	6833      	ldr	r3, [r6, #0]
    988c:	3301      	adds	r3, #1
    988e:	d158      	bne.n	9942 <grid_sys_get_hwcfg+0xbe>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    9890:	4c2f      	ldr	r4, [pc, #188]	; (9950 <grid_sys_get_hwcfg+0xcc>)
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    9892:	4b30      	ldr	r3, [pc, #192]	; (9954 <grid_sys_get_hwcfg+0xd0>)
		gpio_set_pin_direction(HWCFG_CLOCK, GPIO_DIRECTION_OUT);
		gpio_set_pin_direction(HWCFG_DATA, GPIO_DIRECTION_IN);
			
		// LOAD DATA
		gpio_set_pin_level(HWCFG_SHIFT, 0);
		delay_ms(1);
    9894:	4f30      	ldr	r7, [pc, #192]	; (9958 <grid_sys_get_hwcfg+0xd4>)
	CRITICAL_SECTION_ENTER();
    9896:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 9964 <grid_sys_get_hwcfg+0xe0>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    989a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    989e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    98a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    98a6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    98aa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    98ae:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    98b2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    98b6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    98ba:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
    98be:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    98c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    98c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    98ca:	4b24      	ldr	r3, [pc, #144]	; (995c <grid_sys_get_hwcfg+0xd8>)
    98cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    98d0:	f1a3 2380 	sub.w	r3, r3, #2147516416	; 0x80008000
    98d4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    98d8:	2001      	movs	r0, #1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    98da:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    98de:	47b8      	blx	r7
    98e0:	f04f 0a00 	mov.w	sl, #0
			
			
			
		uint8_t hwcfg_value = 0;
    98e4:	46d3      	mov	fp, sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    98e6:	46a8      	mov	r8, r5
			
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
				
			// SHIFT DATA
			gpio_set_pin_level(HWCFG_SHIFT, 1); //This outputs the first value to HWCFG_DATA
			delay_ms(1);
    98e8:	2001      	movs	r0, #1
    98ea:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
    98ee:	47b8      	blx	r7
    98f0:	a801      	add	r0, sp, #4
    98f2:	47c8      	blx	r9
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    98f4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    98f8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    98fc:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    9900:	405d      	eors	r5, r3
    9902:	4015      	ands	r5, r2
    9904:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    9906:	a801      	add	r0, sp, #4
    9908:	4b15      	ldr	r3, [pc, #84]	; (9960 <grid_sys_get_hwcfg+0xdc>)
    990a:	4798      	blx	r3
				
				
			if(gpio_get_pin_level(HWCFG_DATA)){
    990c:	042b      	lsls	r3, r5, #16
					
				hwcfg_value |= (1<<i);
    990e:	bf41      	itttt	mi
    9910:	2301      	movmi	r3, #1
    9912:	fa03 f30a 	lslmi.w	r3, r3, sl
    9916:	ea43 0b0b 	orrmi.w	fp, r3, fp
    991a:	fa5f fb8b 	uxtbmi.w	fp, fp
				}else{
					
					
			}
				
			if(i!=7){
    991e:	f1ba 0f07 	cmp.w	sl, #7
    9922:	d007      	beq.n	9934 <grid_sys_get_hwcfg+0xb0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9924:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    9928:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
					
				// Clock rise
				gpio_set_pin_level(HWCFG_CLOCK, 1);
					
				delay_ms(1);
    992c:	2001      	movs	r0, #1
    992e:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9930:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
		for(uint8_t i = 0; i<8; i++){ // now we need to shift in the remaining 7 values
    9934:	f10a 0a01 	add.w	sl, sl, #1
    9938:	f1ba 0f08 	cmp.w	sl, #8
    993c:	d1d4      	bne.n	98e8 <grid_sys_get_hwcfg+0x64>
				gpio_set_pin_level(HWCFG_CLOCK, 0);
			}
							
		}
		
		grid_sys_hwfcg = hwcfg_value;
    993e:	f8c6 b000 	str.w	fp, [r6]
	}

	
	return grid_sys_hwfcg;

}
    9942:	6830      	ldr	r0, [r6, #0]
    9944:	b003      	add	sp, #12
    9946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    994a:	bf00      	nop
    994c:	2000034c 	.word	0x2000034c
    9950:	41008000 	.word	0x41008000
    9954:	40002000 	.word	0x40002000
    9958:	0000d165 	.word	0x0000d165
    995c:	40028000 	.word	0x40028000
    9960:	00011687 	.word	0x00011687
    9964:	00011679 	.word	0x00011679

00009968 <grid_msg_calculate_checksum_of_packet_string>:
	grid_sys_ping(&GRID_PORT_S);
	grid_sys_ping(&GRID_PORT_W);
	
}

uint8_t grid_msg_calculate_checksum_of_packet_string(uint8_t* str, uint32_t length){
    9968:	b510      	push	{r4, lr}
	
	uint8_t checksum = 0;
	for (uint32_t i=0; i<length-3; i++){
    996a:	2300      	movs	r3, #0
uint8_t grid_msg_calculate_checksum_of_packet_string(uint8_t* str, uint32_t length){
    996c:	4602      	mov	r2, r0
	for (uint32_t i=0; i<length-3; i++){
    996e:	3903      	subs	r1, #3
	uint8_t checksum = 0;
    9970:	4618      	mov	r0, r3
	for (uint32_t i=0; i<length-3; i++){
    9972:	4299      	cmp	r1, r3
    9974:	d800      	bhi.n	9978 <grid_msg_calculate_checksum_of_packet_string+0x10>
		checksum ^= str[i];
	}
	
	return checksum;
	
}
    9976:	bd10      	pop	{r4, pc}
		checksum ^= str[i];
    9978:	5cd4      	ldrb	r4, [r2, r3]
	for (uint32_t i=0; i<length-3; i++){
    997a:	3301      	adds	r3, #1
		checksum ^= str[i];
    997c:	4060      	eors	r0, r4
	for (uint32_t i=0; i<length-3; i++){
    997e:	e7f8      	b.n	9972 <grid_msg_calculate_checksum_of_packet_string+0xa>

00009980 <grid_msg_checksum_read>:
	return checksum;
	
}


uint8_t grid_msg_checksum_read(uint8_t* str, uint32_t length){
    9980:	b507      	push	{r0, r1, r2, lr}
	uint8_t error_flag;
	return grid_sys_read_hex_string_value(&str[length-3], 2, &error_flag);
    9982:	1ecb      	subs	r3, r1, #3
    9984:	f10d 0207 	add.w	r2, sp, #7
    9988:	2102      	movs	r1, #2
    998a:	4418      	add	r0, r3
    998c:	4b02      	ldr	r3, [pc, #8]	; (9998 <grid_msg_checksum_read+0x18>)
    998e:	4798      	blx	r3
}
    9990:	b2c0      	uxtb	r0, r0
    9992:	b003      	add	sp, #12
    9994:	f85d fb04 	ldr.w	pc, [sp], #4
    9998:	000097f9 	.word	0x000097f9

0000999c <grid_msg_checksum_write>:
// 	sprintf(checksum_string, "%02x", checksum);
// 
// 	message[length-3] = checksum_string[0];
// 	message[length-2] = checksum_string[1];
	
	grid_sys_write_hex_string_value(&message[length-3], 2, checksum);
    999c:	1ecb      	subs	r3, r1, #3
    999e:	4418      	add	r0, r3
    99a0:	2102      	movs	r1, #2
    99a2:	4b01      	ldr	r3, [pc, #4]	; (99a8 <grid_msg_checksum_write+0xc>)
    99a4:	4718      	bx	r3
    99a6:	bf00      	nop
    99a8:	00009821 	.word	0x00009821

000099ac <grid_msg_get_parameter>:
}


// MESSAGE PARAMETER FUNCTIONS

uint32_t grid_msg_get_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint8_t* error){
    99ac:	b410      	push	{r4}
    99ae:	460c      	mov	r4, r1
		
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
    99b0:	4420      	add	r0, r4
uint32_t grid_msg_get_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint8_t* error){
    99b2:	4611      	mov	r1, r2
}
    99b4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return grid_sys_read_hex_string_value(&message[offset], length, error);	
    99b8:	461a      	mov	r2, r3
    99ba:	4b01      	ldr	r3, [pc, #4]	; (99c0 <grid_msg_get_parameter+0x14>)
    99bc:	4718      	bx	r3
    99be:	bf00      	nop
    99c0:	000097f9 	.word	0x000097f9

000099c4 <grid_msg_set_parameter>:

uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
    99c4:	b510      	push	{r4, lr}
    99c6:	460c      	mov	r4, r1
	
	grid_sys_write_hex_string_value(&message[offset], length, value);
    99c8:	4420      	add	r0, r4
uint32_t grid_msg_set_parameter(uint8_t* message, uint8_t offset, uint8_t length, uint32_t value, uint8_t* error){
    99ca:	4611      	mov	r1, r2
	grid_sys_write_hex_string_value(&message[offset], length, value);
    99cc:	461a      	mov	r2, r3
    99ce:	4b01      	ldr	r3, [pc, #4]	; (99d4 <grid_msg_set_parameter+0x10>)
    99d0:	4798      	blx	r3
	
}
    99d2:	bd10      	pop	{r4, pc}
    99d4:	00009821 	.word	0x00009821

000099d8 <grid_msg_find_recent>:

uint8_t grid_msg_find_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
    //uint32_t fingerprint = updated_id*256*256*256 + updated_dx*256*256 + updated_dy*256 + updated_age;
    
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    99d8:	f100 032c 	add.w	r3, r0, #44	; 0x2c
    99dc:	30ac      	adds	r0, #172	; 0xac
		
		if (model->recent_messages[i%GRID_SYS_RECENT_MESSAGES_LENGTH] == fingerprint){
    99de:	f853 2b04 	ldr.w	r2, [r3], #4
    99e2:	428a      	cmp	r2, r1
    99e4:	d003      	beq.n	99ee <grid_msg_find_recent+0x16>
	for(GRID_SYS_RECENT_MESSAGES_INDEX_T i = 0; i<GRID_SYS_RECENT_MESSAGES_LENGTH; i++){
    99e6:	4283      	cmp	r3, r0
    99e8:	d1f9      	bne.n	99de <grid_msg_find_recent+0x6>
			
		}
		
	}
	
	return 0;
    99ea:	2000      	movs	r0, #0
    99ec:	4770      	bx	lr
			return 1;
    99ee:	2001      	movs	r0, #1
}
    99f0:	4770      	bx	lr

000099f2 <grid_msg_push_recent>:

void grid_msg_push_recent(struct grid_sys_model* model, uint32_t fingerprint){
	
	model->recent_messages_index+=1;
    99f2:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
    99f6:	3301      	adds	r3, #1
	model->recent_messages_index%=GRID_SYS_RECENT_MESSAGES_LENGTH;
    99f8:	f003 031f 	and.w	r3, r3, #31
    99fc:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	
	model->recent_messages[model->recent_messages_index] = fingerprint;
    9a00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9a04:	62c1      	str	r1, [r0, #44]	; 0x2c
	
}
    9a06:	4770      	bx	lr

00009a08 <grid_ui_model_init>:
	}
	
}


void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    9a08:	b538      	push	{r3, r4, r5, lr}
	
	mod->status = GRID_UI_STATUS_INITIALIZED;
    9a0a:	2301      	movs	r3, #1
    9a0c:	7003      	strb	r3, [r0, #0]
void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    9a0e:	4605      	mov	r5, r0
	
	mod->bank_list_length = bank_list_length;	
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9a10:	4b09      	ldr	r3, [pc, #36]	; (9a38 <grid_ui_model_init+0x30>)
	mod->bank_list_length = bank_list_length;	
    9a12:	7041      	strb	r1, [r0, #1]
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9a14:	0108      	lsls	r0, r1, #4
void grid_ui_model_init(struct grid_ui_model* mod, uint8_t bank_list_length){
    9a16:	460c      	mov	r4, r1
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9a18:	4798      	blx	r3
	
	for(uint8_t i=0; i<bank_list_length; i++){
    9a1a:	2300      	movs	r3, #0
	mod->bank_list = malloc(mod->bank_list_length*sizeof(struct grid_ui_bank));
    9a1c:	6068      	str	r0, [r5, #4]
		
		mod->bank_list[i].status = GRID_UI_STATUS_UNDEFINED;		
    9a1e:	461a      	mov	r2, r3
	for(uint8_t i=0; i<bank_list_length; i++){
    9a20:	b2d9      	uxtb	r1, r3
    9a22:	428c      	cmp	r4, r1
    9a24:	f100 0010 	add.w	r0, r0, #16
    9a28:	d800      	bhi.n	9a2c <grid_ui_model_init+0x24>
		mod->bank_list[i].element_list_length = 0;
		
	}
	
}
    9a2a:	bd38      	pop	{r3, r4, r5, pc}
		mod->bank_list[i].status = GRID_UI_STATUS_UNDEFINED;		
    9a2c:	f800 2c10 	strb.w	r2, [r0, #-16]
		mod->bank_list[i].element_list_length = 0;
    9a30:	f800 2c07 	strb.w	r2, [r0, #-7]
	for(uint8_t i=0; i<bank_list_length; i++){
    9a34:	3301      	adds	r3, #1
    9a36:	e7f3      	b.n	9a20 <grid_ui_model_init+0x18>
    9a38:	00012cb1 	.word	0x00012cb1

00009a3c <grid_ui_bank_init>:

void grid_ui_bank_init(struct grid_ui_model* parent, uint8_t index, uint8_t element_list_length){
    9a3c:	b538      	push	{r3, r4, r5, lr}
	
	struct grid_ui_bank* bank = &parent->bank_list[index];
    9a3e:	6843      	ldr	r3, [r0, #4]
    9a40:	eb03 1501 	add.w	r5, r3, r1, lsl #4
void grid_ui_bank_init(struct grid_ui_model* parent, uint8_t index, uint8_t element_list_length){
    9a44:	4614      	mov	r4, r2
	struct grid_ui_bank* bank = &parent->bank_list[index];
    9a46:	010a      	lsls	r2, r1, #4
	bank->parent = parent;
    9a48:	6068      	str	r0, [r5, #4]
	bank->index = index;
    9a4a:	7229      	strb	r1, [r5, #8]
	
	
	bank->status = GRID_UI_STATUS_INITIALIZED;
	
	bank->element_list_length = element_list_length;
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9a4c:	2064      	movs	r0, #100	; 0x64
	bank->status = GRID_UI_STATUS_INITIALIZED;
    9a4e:	2101      	movs	r1, #1
    9a50:	5499      	strb	r1, [r3, r2]
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9a52:	4360      	muls	r0, r4
    9a54:	4b08      	ldr	r3, [pc, #32]	; (9a78 <grid_ui_bank_init+0x3c>)
	bank->element_list_length = element_list_length;
    9a56:	726c      	strb	r4, [r5, #9]
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9a58:	4798      	blx	r3
	
	for(uint8_t i=0; i<element_list_length; i++){
    9a5a:	2300      	movs	r3, #0
	bank->element_list = malloc(bank->element_list_length*sizeof(struct grid_ui_element));
    9a5c:	60e8      	str	r0, [r5, #12]
		
		bank->element_list[i].status = GRID_UI_STATUS_UNDEFINED;
    9a5e:	461a      	mov	r2, r3
	for(uint8_t i=0; i<element_list_length; i++){
    9a60:	b2d9      	uxtb	r1, r3
    9a62:	428c      	cmp	r4, r1
    9a64:	f100 0064 	add.w	r0, r0, #100	; 0x64
    9a68:	d800      	bhi.n	9a6c <grid_ui_bank_init+0x30>
		bank->element_list[i].event_list_length = 0;
		
	}
	
}
    9a6a:	bd38      	pop	{r3, r4, r5, pc}
		bank->element_list[i].status = GRID_UI_STATUS_UNDEFINED;
    9a6c:	f800 2c64 	strb.w	r2, [r0, #-100]
		bank->element_list[i].event_list_length = 0;
    9a70:	f800 2c08 	strb.w	r2, [r0, #-8]
	for(uint8_t i=0; i<element_list_length; i++){
    9a74:	3301      	adds	r3, #1
    9a76:	e7f3      	b.n	9a60 <grid_ui_bank_init+0x24>
    9a78:	00012cb1 	.word	0x00012cb1

00009a7c <grid_ui_nvm_store_all_configuration>:
	
}



void grid_ui_nvm_store_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    9a7c:	460b      	mov	r3, r1
	
    grid_nvm_ui_bulk_store_init(nvm, ui);
    9a7e:	4601      	mov	r1, r0
    9a80:	4618      	mov	r0, r3
    9a82:	4b01      	ldr	r3, [pc, #4]	; (9a88 <grid_ui_nvm_store_all_configuration+0xc>)
    9a84:	4718      	bx	r3
    9a86:	bf00      	nop
    9a88:	000088b5 	.word	0x000088b5

00009a8c <grid_ui_nvm_load_all_configuration>:

}

void grid_ui_nvm_load_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    9a8c:	460b      	mov	r3, r1
	
	grid_nvm_ui_bulk_read_init(nvm, ui);
    9a8e:	4601      	mov	r1, r0
    9a90:	4618      	mov	r0, r3
    9a92:	4b01      	ldr	r3, [pc, #4]	; (9a98 <grid_ui_nvm_load_all_configuration+0xc>)
    9a94:	4718      	bx	r3
    9a96:	bf00      	nop
    9a98:	000087a1 	.word	0x000087a1

00009a9c <grid_ui_nvm_clear_all_configuration>:

		
	
}

void grid_ui_nvm_clear_all_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm){
    9a9c:	460b      	mov	r3, r1
	
	grid_nvm_ui_bulk_clear_init(nvm, ui);
    9a9e:	4601      	mov	r1, r0
    9aa0:	4618      	mov	r0, r3
    9aa2:	4b01      	ldr	r3, [pc, #4]	; (9aa8 <grid_ui_nvm_clear_all_configuration+0xc>)
    9aa4:	4718      	bx	r3
    9aa6:	bf00      	nop
    9aa8:	00008a79 	.word	0x00008a79

00009aac <grid_ui_recall_event_configuration>:

}


uint8_t grid_ui_recall_event_configuration(struct grid_ui_model* ui, uint8_t bank, uint8_t element, enum grid_ui_event_t event_type){
    9aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ab0:	4698      	mov	r8, r3
	
	struct grid_ui_element* ele = NULL;
	struct grid_ui_event* eve = NULL;
	uint8_t event_index = 255;
	
	if (bank < ui->bank_list_length){
    9ab2:	7843      	ldrb	r3, [r0, #1]
    9ab4:	428b      	cmp	r3, r1
uint8_t grid_ui_recall_event_configuration(struct grid_ui_model* ui, uint8_t bank, uint8_t element, enum grid_ui_event_t event_type){
    9ab6:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
    9aba:	460f      	mov	r7, r1
    9abc:	4616      	mov	r6, r2
	if (bank < ui->bank_list_length){
    9abe:	f240 80a5 	bls.w	9c0c <grid_ui_recall_event_configuration+0x160>
		
		if (element < ui->bank_list[bank].element_list_length){
    9ac2:	6843      	ldr	r3, [r0, #4]
    9ac4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    9ac8:	7a5a      	ldrb	r2, [r3, #9]
    9aca:	42b2      	cmp	r2, r6
    9acc:	f240 809e 	bls.w	9c0c <grid_ui_recall_event_configuration+0x160>
			
			ele = &ui->bank_list[bank].element_list[element];
    9ad0:	68da      	ldr	r2, [r3, #12]
    9ad2:	2364      	movs	r3, #100	; 0x64
    9ad4:	fb06 2303 	mla	r3, r6, r3, r2
			
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9ad8:	2200      	movs	r2, #0
    9ada:	f893 c05c 	ldrb.w	ip, [r3, #92]	; 0x5c
	uint8_t event_index = 255;
    9ade:	20ff      	movs	r0, #255	; 0xff
	struct grid_ui_event* eve = NULL;
    9ae0:	4615      	mov	r5, r2
				if (ele->event_list[i].type == event_type){
    9ae2:	f44f 7e86 	mov.w	lr, #268	; 0x10c
    9ae6:	b2d4      	uxtb	r4, r2
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9ae8:	45a4      	cmp	ip, r4
    9aea:	d86b      	bhi.n	9bc4 <grid_ui_recall_event_configuration+0x118>
		
		
	}
	
	
	if (event_index != 255){ // OK
    9aec:	28ff      	cmp	r0, #255	; 0xff
    9aee:	f000 808d 	beq.w	9c0c <grid_ui_recall_event_configuration+0x160>
		
		struct grid_msg message;

		grid_msg_init(&message);
    9af2:	4b6c      	ldr	r3, [pc, #432]	; (9ca4 <grid_ui_recall_event_configuration+0x1f8>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9af4:	4c6c      	ldr	r4, [pc, #432]	; (9ca8 <grid_ui_recall_event_configuration+0x1fc>)
		uint32_t offset = 0;



		// BANK ENABLED
		offset = grid_msg_body_get_length(&message);
    9af6:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 9cc8 <grid_ui_recall_event_configuration+0x21c>

		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9afa:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 9ccc <grid_ui_recall_event_configuration+0x220>
		payload_length = strlen(payload);
    9afe:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 9cd0 <grid_ui_recall_event_configuration+0x224>

		grid_msg_body_append_text(&message, payload, payload_length);
    9b02:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 9cd4 <grid_ui_recall_event_configuration+0x228>

		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    9b06:	4f69      	ldr	r7, [pc, #420]	; (9cac <grid_ui_recall_event_configuration+0x200>)
		grid_msg_init(&message);
    9b08:	a867      	add	r0, sp, #412	; 0x19c
    9b0a:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9b0c:	227f      	movs	r2, #127	; 0x7f
    9b0e:	4611      	mov	r1, r2
    9b10:	2300      	movs	r3, #0
    9b12:	a867      	add	r0, sp, #412	; 0x19c
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9b14:	2600      	movs	r6, #0
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9b16:	47a0      	blx	r4
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9b18:	4b65      	ldr	r3, [pc, #404]	; (9cb0 <grid_ui_recall_event_configuration+0x204>)
    9b1a:	9603      	str	r6, [sp, #12]
    9b1c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9b20:	4631      	mov	r1, r6
    9b22:	a804      	add	r0, sp, #16
    9b24:	4798      	blx	r3
		offset = grid_msg_body_get_length(&message);
    9b26:	a867      	add	r0, sp, #412	; 0x19c
    9b28:	47d8      	blx	fp
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9b2a:	2380      	movs	r3, #128	; 0x80
		offset = grid_msg_body_get_length(&message);
    9b2c:	4604      	mov	r4, r0
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9b2e:	4961      	ldr	r1, [pc, #388]	; (9cb4 <grid_ui_recall_event_configuration+0x208>)
    9b30:	2202      	movs	r2, #2
    9b32:	a803      	add	r0, sp, #12
    9b34:	47d0      	blx	sl
		payload_length = strlen(payload);
    9b36:	a803      	add	r0, sp, #12
    9b38:	47c8      	blx	r9
		grid_msg_body_append_text(&message, payload, payload_length);
    9b3a:	a903      	add	r1, sp, #12
    9b3c:	b2c2      	uxtb	r2, r0
    9b3e:	a867      	add	r0, sp, #412	; 0x19c
    9b40:	47c0      	blx	r8
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    9b42:	230d      	movs	r3, #13
    9b44:	9300      	str	r3, [sp, #0]
    9b46:	2204      	movs	r2, #4
    9b48:	2301      	movs	r3, #1
    9b4a:	4621      	mov	r1, r4
    9b4c:	a867      	add	r0, sp, #412	; 0x19c
    9b4e:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, eve->parent->parent->index);
    9b50:	686b      	ldr	r3, [r5, #4]
    9b52:	685b      	ldr	r3, [r3, #4]
    9b54:	7a1b      	ldrb	r3, [r3, #8]
    9b56:	9300      	str	r3, [sp, #0]
    9b58:	2205      	movs	r2, #5
    9b5a:	2302      	movs	r3, #2
    9b5c:	4621      	mov	r1, r4
    9b5e:	a867      	add	r0, sp, #412	; 0x19c
    9b60:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, eve->parent->index);
    9b62:	686b      	ldr	r3, [r5, #4]
    9b64:	7a1b      	ldrb	r3, [r3, #8]
    9b66:	9300      	str	r3, [sp, #0]
    9b68:	2207      	movs	r2, #7
    9b6a:	2302      	movs	r3, #2
    9b6c:	4621      	mov	r1, r4
    9b6e:	a867      	add	r0, sp, #412	; 0x19c
    9b70:	47b8      	blx	r7
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eve->type);
    9b72:	7aab      	ldrb	r3, [r5, #10]
    9b74:	9300      	str	r3, [sp, #0]
    9b76:	2209      	movs	r2, #9
    9b78:	2302      	movs	r3, #2
    9b7a:	4621      	mov	r1, r4
    9b7c:	a867      	add	r0, sp, #412	; 0x19c
    9b7e:	47b8      	blx	r7

		offset = grid_msg_body_get_length(&message);
    9b80:	a867      	add	r0, sp, #412	; 0x19c
    9b82:	47d8      	blx	fp
		grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    9b84:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    9b86:	4b4c      	ldr	r3, [pc, #304]	; (9cb8 <grid_ui_recall_event_configuration+0x20c>)
		offset = grid_msg_body_get_length(&message);
    9b88:	4683      	mov	fp, r0
		grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    9b8a:	f105 0148 	add.w	r1, r5, #72	; 0x48
    9b8e:	a867      	add	r0, sp, #412	; 0x19c
    9b90:	4798      	blx	r3

		for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9b92:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    9b96:	b2f4      	uxtb	r4, r6
    9b98:	42a3      	cmp	r3, r4
    9b9a:	d81e      	bhi.n	9bda <grid_ui_recall_event_configuration+0x12e>
		}




		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    9b9c:	4947      	ldr	r1, [pc, #284]	; (9cbc <grid_ui_recall_event_configuration+0x210>)
    9b9e:	2203      	movs	r2, #3
    9ba0:	a803      	add	r0, sp, #12
    9ba2:	47d0      	blx	sl
		payload_length = strlen(payload);
    9ba4:	a803      	add	r0, sp, #12
    9ba6:	47c8      	blx	r9

		grid_msg_body_append_text(&message, payload, payload_length);
    9ba8:	a903      	add	r1, sp, #12
    9baa:	b2c2      	uxtb	r2, r0
    9bac:	a867      	add	r0, sp, #412	; 0x19c
    9bae:	47c0      	blx	r8
		payload_length = strlen(payload);

		grid_msg_body_append_text(&message, payload, payload_length);


		grid_msg_packet_close(&message);
    9bb0:	4b43      	ldr	r3, [pc, #268]	; (9cc0 <grid_ui_recall_event_configuration+0x214>)
    9bb2:	a867      	add	r0, sp, #412	; 0x19c
    9bb4:	4798      	blx	r3
		grid_msg_packet_send_everywhere(&message);		
    9bb6:	4b43      	ldr	r3, [pc, #268]	; (9cc4 <grid_ui_recall_event_configuration+0x218>)
    9bb8:	a867      	add	r0, sp, #412	; 0x19c
    9bba:	4798      	blx	r3
		
		
	}

	
}
    9bbc:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
    9bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (ele->event_list[i].type == event_type){
    9bc4:	6e19      	ldr	r1, [r3, #96]	; 0x60
    9bc6:	fb0e 1102 	mla	r1, lr, r2, r1
    9bca:	3201      	adds	r2, #1
    9bcc:	f891 900a 	ldrb.w	r9, [r1, #10]
    9bd0:	45c1      	cmp	r9, r8
    9bd2:	bf04      	itt	eq
    9bd4:	4620      	moveq	r0, r4
    9bd6:	460d      	moveq	r5, r1
			for(uint8_t i=0; i<ele->event_list_length; i++){
    9bd8:	e785      	b.n	9ae6 <grid_ui_recall_event_configuration+0x3a>
			uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9bda:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    9bde:	442c      	add	r4, r5
			message.body[offset + parameter_offset] = parameter_group;
    9be0:	a967      	add	r1, sp, #412	; 0x19c
			uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9be2:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
			uint8_t	 parameter_lenght  = eve->action_parameter_list[t].length;
    9be6:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
			uint8_t	 parameter_address = eve->action_parameter_list[t].address;
    9bea:	f894 00c3 	ldrb.w	r0, [r4, #195]	; 0xc3
			message.body[offset + parameter_offset] = parameter_group;
    9bee:	f894 40c2 	ldrb.w	r4, [r4, #194]	; 0xc2
    9bf2:	4411      	add	r1, r2
    9bf4:	4459      	add	r1, fp
			grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9bf6:	3b01      	subs	r3, #1
    9bf8:	3201      	adds	r2, #1
			message.body[offset + parameter_offset] = parameter_group;
    9bfa:	750c      	strb	r4, [r1, #20]
			grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9bfc:	b2db      	uxtb	r3, r3
    9bfe:	9000      	str	r0, [sp, #0]
    9c00:	b2d2      	uxtb	r2, r2
    9c02:	4659      	mov	r1, fp
    9c04:	a867      	add	r0, sp, #412	; 0x19c
    9c06:	47b8      	blx	r7
		for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9c08:	3601      	adds	r6, #1
    9c0a:	e7c2      	b.n	9b92 <grid_ui_recall_event_configuration+0xe6>
		grid_msg_init(&message);
    9c0c:	a867      	add	r0, sp, #412	; 0x19c
    9c0e:	4b25      	ldr	r3, [pc, #148]	; (9ca4 <grid_ui_recall_event_configuration+0x1f8>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9c10:	4c25      	ldr	r4, [pc, #148]	; (9ca8 <grid_ui_recall_event_configuration+0x1fc>)
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9c12:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 9ccc <grid_ui_recall_event_configuration+0x220>
		payload_length = strlen(payload);
    9c16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 9cd0 <grid_ui_recall_event_configuration+0x224>
		grid_msg_body_append_text(&message, payload, payload_length);
    9c1a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 9cd4 <grid_ui_recall_event_configuration+0x228>
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    9c1e:	4d23      	ldr	r5, [pc, #140]	; (9cac <grid_ui_recall_event_configuration+0x200>)
		grid_msg_init(&message);
    9c20:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9c22:	227f      	movs	r2, #127	; 0x7f
    9c24:	4611      	mov	r1, r2
    9c26:	a867      	add	r0, sp, #412	; 0x19c
    9c28:	2300      	movs	r3, #0
    9c2a:	47a0      	blx	r4
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9c2c:	2100      	movs	r1, #0
    9c2e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9c32:	4b1f      	ldr	r3, [pc, #124]	; (9cb0 <grid_ui_recall_event_configuration+0x204>)
    9c34:	9103      	str	r1, [sp, #12]
    9c36:	a804      	add	r0, sp, #16
    9c38:	4798      	blx	r3
		offset = grid_msg_body_get_length(&message);
    9c3a:	4b23      	ldr	r3, [pc, #140]	; (9cc8 <grid_ui_recall_event_configuration+0x21c>)
    9c3c:	a867      	add	r0, sp, #412	; 0x19c
    9c3e:	4798      	blx	r3
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9c40:	2380      	movs	r3, #128	; 0x80
		offset = grid_msg_body_get_length(&message);
    9c42:	4604      	mov	r4, r0
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9c44:	491b      	ldr	r1, [pc, #108]	; (9cb4 <grid_ui_recall_event_configuration+0x208>)
    9c46:	2202      	movs	r2, #2
    9c48:	a803      	add	r0, sp, #12
    9c4a:	47d8      	blx	fp
		payload_length = strlen(payload);
    9c4c:	a803      	add	r0, sp, #12
    9c4e:	47d0      	blx	sl
		grid_msg_body_append_text(&message, payload, payload_length);
    9c50:	a903      	add	r1, sp, #12
    9c52:	b2c2      	uxtb	r2, r0
    9c54:	a867      	add	r0, sp, #412	; 0x19c
    9c56:	47c8      	blx	r9
		grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_NACKNOWLEDGE_code);
    9c58:	230b      	movs	r3, #11
    9c5a:	9300      	str	r3, [sp, #0]
    9c5c:	4621      	mov	r1, r4
    9c5e:	a867      	add	r0, sp, #412	; 0x19c
    9c60:	2301      	movs	r3, #1
    9c62:	2204      	movs	r2, #4
    9c64:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, bank);
    9c66:	4621      	mov	r1, r4
    9c68:	a867      	add	r0, sp, #412	; 0x19c
    9c6a:	9700      	str	r7, [sp, #0]
    9c6c:	2302      	movs	r3, #2
    9c6e:	2205      	movs	r2, #5
    9c70:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, element);
    9c72:	4621      	mov	r1, r4
    9c74:	a867      	add	r0, sp, #412	; 0x19c
    9c76:	9600      	str	r6, [sp, #0]
    9c78:	2302      	movs	r3, #2
    9c7a:	2207      	movs	r2, #7
    9c7c:	47a8      	blx	r5
		grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, event_type);
    9c7e:	2302      	movs	r3, #2
    9c80:	4621      	mov	r1, r4
    9c82:	a867      	add	r0, sp, #412	; 0x19c
    9c84:	f8cd 8000 	str.w	r8, [sp]
    9c88:	2209      	movs	r2, #9
    9c8a:	47a8      	blx	r5
		sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    9c8c:	490b      	ldr	r1, [pc, #44]	; (9cbc <grid_ui_recall_event_configuration+0x210>)
    9c8e:	2203      	movs	r2, #3
    9c90:	a803      	add	r0, sp, #12
    9c92:	47d8      	blx	fp
		payload_length = strlen(payload);
    9c94:	a803      	add	r0, sp, #12
    9c96:	47d0      	blx	sl
		grid_msg_body_append_text(&message, payload, payload_length);
    9c98:	a903      	add	r1, sp, #12
    9c9a:	b2c2      	uxtb	r2, r0
    9c9c:	a867      	add	r0, sp, #412	; 0x19c
    9c9e:	47c8      	blx	r9
    9ca0:	e786      	b.n	9bb0 <grid_ui_recall_event_configuration+0x104>
    9ca2:	bf00      	nop
    9ca4:	00008545 	.word	0x00008545
    9ca8:	00008579 	.word	0x00008579
    9cac:	00008529 	.word	0x00008529
    9cb0:	00012e05 	.word	0x00012e05
    9cb4:	00015943 	.word	0x00015943
    9cb8:	000084d5 	.word	0x000084d5
    9cbc:	0001554f 	.word	0x0001554f
    9cc0:	00008671 	.word	0x00008671
    9cc4:	00008745 	.word	0x00008745
    9cc8:	000084af 	.word	0x000084af
    9ccc:	000134b9 	.word	0x000134b9
    9cd0:	00013981 	.word	0x00013981
    9cd4:	000084b5 	.word	0x000084b5

00009cd8 <grid_ui_nvm_store_event_configuration>:



uint8_t grid_ui_nvm_store_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cdc:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
	

	struct grid_msg message;

	grid_msg_init(&message);
    9ce0:	4b62      	ldr	r3, [pc, #392]	; (9e6c <grid_ui_nvm_store_event_configuration+0x194>)
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9ce2:	4e63      	ldr	r6, [pc, #396]	; (9e70 <grid_ui_nvm_store_event_configuration+0x198>)
	uint32_t offset = 0;



	// BANK ENABLED
	offset = grid_msg_body_get_length(&message);
    9ce4:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 9ea0 <grid_ui_nvm_store_event_configuration+0x1c8>

	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9ce8:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 9ea4 <grid_ui_nvm_store_event_configuration+0x1cc>
	payload_length = strlen(payload);
    9cec:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 9ea8 <grid_ui_nvm_store_event_configuration+0x1d0>

	grid_msg_body_append_text(&message, payload, payload_length);

	grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    9cf0:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 9eac <grid_ui_nvm_store_event_configuration+0x1d4>
	grid_msg_init(&message);
    9cf4:	a867      	add	r0, sp, #412	; 0x19c
uint8_t grid_ui_nvm_store_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9cf6:	4614      	mov	r4, r2
    9cf8:	460d      	mov	r5, r1
	grid_msg_init(&message);
    9cfa:	4798      	blx	r3
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9cfc:	22ff      	movs	r2, #255	; 0xff
    9cfe:	4611      	mov	r1, r2
    9d00:	2300      	movs	r3, #0
    9d02:	a867      	add	r0, sp, #412	; 0x19c
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9d04:	2700      	movs	r7, #0
	grid_msg_init_header(&message, GRID_SYS_LOCAL_POSITION, GRID_SYS_LOCAL_POSITION, GRID_SYS_DEFAULT_ROTATION);
    9d06:	47b0      	blx	r6
	uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};
    9d08:	4b5a      	ldr	r3, [pc, #360]	; (9e74 <grid_ui_nvm_store_event_configuration+0x19c>)
    9d0a:	9703      	str	r7, [sp, #12]
    9d0c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    9d10:	4639      	mov	r1, r7
    9d12:	a804      	add	r0, sp, #16
    9d14:	4798      	blx	r3
	offset = grid_msg_body_get_length(&message);
    9d16:	a867      	add	r0, sp, #412	; 0x19c
    9d18:	47d8      	blx	fp
	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9d1a:	4957      	ldr	r1, [pc, #348]	; (9e78 <grid_ui_nvm_store_event_configuration+0x1a0>)
	offset = grid_msg_body_get_length(&message);
    9d1c:	4606      	mov	r6, r0
	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_start);
    9d1e:	2380      	movs	r3, #128	; 0x80
    9d20:	2202      	movs	r2, #2
    9d22:	a803      	add	r0, sp, #12
    9d24:	47d0      	blx	sl
	payload_length = strlen(payload);
    9d26:	a803      	add	r0, sp, #12
    9d28:	47c8      	blx	r9
	grid_msg_body_append_text(&message, payload, payload_length);
    9d2a:	4b54      	ldr	r3, [pc, #336]	; (9e7c <grid_ui_nvm_store_event_configuration+0x1a4>)
    9d2c:	b2c2      	uxtb	r2, r0
    9d2e:	a903      	add	r1, sp, #12
    9d30:	a867      	add	r0, sp, #412	; 0x19c
    9d32:	4798      	blx	r3
	grid_msg_text_set_parameter(&message, offset, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_EXECUTE_code);
    9d34:	230e      	movs	r3, #14
    9d36:	9300      	str	r3, [sp, #0]
    9d38:	2204      	movs	r2, #4
    9d3a:	2301      	movs	r3, #1
    9d3c:	4631      	mov	r1, r6
    9d3e:	a867      	add	r0, sp, #412	; 0x19c
    9d40:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_offset, GRID_CLASS_CONFIGURATION_BANKNUMBER_length, eve->parent->parent->index);
    9d42:	6863      	ldr	r3, [r4, #4]
    9d44:	685b      	ldr	r3, [r3, #4]
    9d46:	7a1b      	ldrb	r3, [r3, #8]
    9d48:	9300      	str	r3, [sp, #0]
    9d4a:	2205      	movs	r2, #5
    9d4c:	2302      	movs	r3, #2
    9d4e:	4631      	mov	r1, r6
    9d50:	a867      	add	r0, sp, #412	; 0x19c
    9d52:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_offset, GRID_CLASS_CONFIGURATION_ELEMENTNUMBER_length, eve->parent->index);
    9d54:	6863      	ldr	r3, [r4, #4]
    9d56:	7a1b      	ldrb	r3, [r3, #8]
    9d58:	9300      	str	r3, [sp, #0]
    9d5a:	2207      	movs	r2, #7
    9d5c:	2302      	movs	r3, #2
    9d5e:	4631      	mov	r1, r6
    9d60:	a867      	add	r0, sp, #412	; 0x19c
    9d62:	47c0      	blx	r8
	grid_msg_text_set_parameter(&message, offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_offset, GRID_CLASS_CONFIGURATION_EVENTTYPE_length, eve->type);
    9d64:	7aa3      	ldrb	r3, [r4, #10]
    9d66:	9300      	str	r3, [sp, #0]
    9d68:	2209      	movs	r2, #9
    9d6a:	2302      	movs	r3, #2
    9d6c:	4631      	mov	r1, r6
    9d6e:	a867      	add	r0, sp, #412	; 0x19c
    9d70:	47c0      	blx	r8

	offset = grid_msg_body_get_length(&message);
    9d72:	a867      	add	r0, sp, #412	; 0x19c
    9d74:	47d8      	blx	fp
	grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    9d76:	6c62      	ldr	r2, [r4, #68]	; 0x44
    9d78:	4b41      	ldr	r3, [pc, #260]	; (9e80 <grid_ui_nvm_store_event_configuration+0x1a8>)
	offset = grid_msg_body_get_length(&message);
    9d7a:	4683      	mov	fp, r0
	grid_msg_body_append_text_escaped(&message, eve->action_string, eve->action_string_length);
    9d7c:	f104 0148 	add.w	r1, r4, #72	; 0x48
    9d80:	a867      	add	r0, sp, #412	; 0x19c
    9d82:	4798      	blx	r3

	for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9d84:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    9d88:	b2fe      	uxtb	r6, r7
    9d8a:	42b3      	cmp	r3, r6
    9d8c:	d83c      	bhi.n	9e08 <grid_ui_nvm_store_event_configuration+0x130>
	}




	sprintf(payload, GRID_CLASS_CONFIGURATION_frame_end);
    9d8e:	493d      	ldr	r1, [pc, #244]	; (9e84 <grid_ui_nvm_store_event_configuration+0x1ac>)
    9d90:	2203      	movs	r2, #3
    9d92:	a803      	add	r0, sp, #12
    9d94:	47d0      	blx	sl
	payload_length = strlen(payload);
    9d96:	a803      	add	r0, sp, #12
    9d98:	47c8      	blx	r9

	grid_msg_body_append_text(&message, payload, payload_length);
    9d9a:	a903      	add	r1, sp, #12
    9d9c:	b2c2      	uxtb	r2, r0
    9d9e:	4b37      	ldr	r3, [pc, #220]	; (9e7c <grid_ui_nvm_store_event_configuration+0x1a4>)
    9da0:	a867      	add	r0, sp, #412	; 0x19c
    9da2:	4798      	blx	r3


	grid_msg_packet_close(&message);
    9da4:	4b38      	ldr	r3, [pc, #224]	; (9e88 <grid_ui_nvm_store_event_configuration+0x1b0>)
    9da6:	a867      	add	r0, sp, #412	; 0x19c
    9da8:	4798      	blx	r3

	grid_nvm_clear_write_buffer(nvm);
    9daa:	4b38      	ldr	r3, [pc, #224]	; (9e8c <grid_ui_nvm_store_event_configuration+0x1b4>)
    9dac:	4628      	mov	r0, r5
    9dae:	4798      	blx	r3

	uint32_t message_length = grid_msg_packet_get_length(&message);
    9db0:	4b37      	ldr	r3, [pc, #220]	; (9e90 <grid_ui_nvm_store_event_configuration+0x1b8>)
    9db2:	a867      	add	r0, sp, #412	; 0x19c
    9db4:	4798      	blx	r3

	if (message_length){
    9db6:	4606      	mov	r6, r0
    9db8:	2800      	cmp	r0, #0
    9dba:	d13e      	bne.n	9e3a <grid_ui_nvm_store_event_configuration+0x162>
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
		}

	}

	uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);
    9dbc:	4621      	mov	r1, r4
    9dbe:	4b35      	ldr	r3, [pc, #212]	; (9e94 <grid_ui_nvm_store_event_configuration+0x1bc>)
    9dc0:	4628      	mov	r0, r5
    9dc2:	4798      	blx	r3
	nvm->write_target_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;
    9dc4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9dc8:	0241      	lsls	r1, r0, #9
    9dca:	f8c5 1420 	str.w	r1, [r5, #1056]	; 0x420
	int status = 0;
	
	
	uint8_t debugtext[200] = {0};

	if (eve->cfg_default_flag == 1 && eve->cfg_flashempty_flag == 0){
    9dce:	f8b4 6108 	ldrh.w	r6, [r4, #264]	; 0x108
    9dd2:	2e01      	cmp	r6, #1
    9dd4:	d041      	beq.n	9e5a <grid_ui_nvm_store_event_configuration+0x182>
	int status = 0;
    9dd6:	2000      	movs	r0, #0
		eve->cfg_flashempty_flag = 1;
		status = 1;
	}
	
	
	if (eve->cfg_default_flag == 0 && eve->cfg_changed_flag == 1){
    9dd8:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
    9ddc:	b96b      	cbnz	r3, 9dfa <grid_ui_nvm_store_event_configuration+0x122>
    9dde:	f894 6107 	ldrb.w	r6, [r4, #263]	; 0x107
    9de2:	2e01      	cmp	r6, #1
    9de4:	d109      	bne.n	9dfa <grid_ui_nvm_store_event_configuration+0x122>
		
		//sprintf(debugtext, "Cfg: Store B:%d E:%d Ev:%d => Page: %d Status: %d", eve->parent->parent->index, eve->parent->index, eve->index, event_page_offset, status);		
		flash_write(nvm->flash, nvm->write_target_address, nvm->write_buffer, GRID_NVM_PAGE_SIZE);
    9de6:	f8d5 1420 	ldr.w	r1, [r5, #1056]	; 0x420
    9dea:	6828      	ldr	r0, [r5, #0]
    9dec:	f505 7206 	add.w	r2, r5, #536	; 0x218
    9df0:	f44f 7300 	mov.w	r3, #512	; 0x200
    9df4:	4d28      	ldr	r5, [pc, #160]	; (9e98 <grid_ui_nvm_store_event_configuration+0x1c0>)
    9df6:	47a8      	blx	r5
		status = 1;
    9df8:	4630      	mov	r0, r6
	}


	//grid_debug_print_text(debugtext);

	eve->cfg_changed_flag = 0;
    9dfa:	2300      	movs	r3, #0
    9dfc:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	
	return status;
	
}
    9e00:	f50d 7d4f 	add.w	sp, sp, #828	; 0x33c
    9e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9e08:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    9e0c:	4426      	add	r6, r4
		message.body[offset + parameter_offset] = parameter_group;
    9e0e:	a967      	add	r1, sp, #412	; 0x19c
		uint32_t parameter_offset  = eve->action_parameter_list[t].offset;
    9e10:	f896 20c5 	ldrb.w	r2, [r6, #197]	; 0xc5
		uint8_t	 parameter_lenght  = eve->action_parameter_list[t].length;
    9e14:	f896 30c4 	ldrb.w	r3, [r6, #196]	; 0xc4
		uint8_t	 parameter_address = eve->action_parameter_list[t].address;
    9e18:	f896 00c3 	ldrb.w	r0, [r6, #195]	; 0xc3
		message.body[offset + parameter_offset] = parameter_group;
    9e1c:	f896 60c2 	ldrb.w	r6, [r6, #194]	; 0xc2
    9e20:	4411      	add	r1, r2
    9e22:	4459      	add	r1, fp
		grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9e24:	3b01      	subs	r3, #1
    9e26:	3201      	adds	r2, #1
		message.body[offset + parameter_offset] = parameter_group;
    9e28:	750e      	strb	r6, [r1, #20]
		grid_msg_text_set_parameter(&message, offset, parameter_offset+1, parameter_lenght-1, parameter_address);
    9e2a:	b2db      	uxtb	r3, r3
    9e2c:	9000      	str	r0, [sp, #0]
    9e2e:	b2d2      	uxtb	r2, r2
    9e30:	4659      	mov	r1, fp
    9e32:	a867      	add	r0, sp, #412	; 0x19c
    9e34:	47c0      	blx	r8
	for(uint8_t t=0; t<eve->action_parameter_count; t++){
    9e36:	3701      	adds	r7, #1
    9e38:	e7a4      	b.n	9d84 <grid_ui_nvm_store_event_configuration+0xac>
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    9e3a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 9eb0 <grid_ui_nvm_store_event_configuration+0x1d8>
		nvm->write_buffer_length = message_length;
    9e3e:	f8c5 0418 	str.w	r0, [r5, #1048]	; 0x418
		for(uint32_t i = 0; i<message_length; i++){
    9e42:	f505 7806 	add.w	r8, r5, #536	; 0x218
    9e46:	2700      	movs	r7, #0
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    9e48:	4639      	mov	r1, r7
    9e4a:	a867      	add	r0, sp, #412	; 0x19c
    9e4c:	47c8      	blx	r9
		for(uint32_t i = 0; i<message_length; i++){
    9e4e:	3701      	adds	r7, #1
    9e50:	42be      	cmp	r6, r7
			nvm->write_buffer[i] = grid_msg_packet_send_char(&message, i);
    9e52:	f808 0b01 	strb.w	r0, [r8], #1
		for(uint32_t i = 0; i<message_length; i++){
    9e56:	d1f7      	bne.n	9e48 <grid_ui_nvm_store_event_configuration+0x170>
    9e58:	e7b0      	b.n	9dbc <grid_ui_nvm_store_event_configuration+0xe4>
		flash_erase(nvm->flash, nvm->write_target_address, 1);
    9e5a:	6828      	ldr	r0, [r5, #0]
    9e5c:	4b0f      	ldr	r3, [pc, #60]	; (9e9c <grid_ui_nvm_store_event_configuration+0x1c4>)
    9e5e:	4632      	mov	r2, r6
    9e60:	4798      	blx	r3
		eve->cfg_flashempty_flag = 1;
    9e62:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
		status = 1;
    9e66:	4630      	mov	r0, r6
    9e68:	e7b6      	b.n	9dd8 <grid_ui_nvm_store_event_configuration+0x100>
    9e6a:	bf00      	nop
    9e6c:	00008545 	.word	0x00008545
    9e70:	00008579 	.word	0x00008579
    9e74:	00012e05 	.word	0x00012e05
    9e78:	00015943 	.word	0x00015943
    9e7c:	000084b5 	.word	0x000084b5
    9e80:	000084d5 	.word	0x000084d5
    9e84:	0001554f 	.word	0x0001554f
    9e88:	00008671 	.word	0x00008671
    9e8c:	00008c51 	.word	0x00008c51
    9e90:	000084a1 	.word	0x000084a1
    9e94:	00008cbd 	.word	0x00008cbd
    9e98:	0000e1b9 	.word	0x0000e1b9
    9e9c:	0000e239 	.word	0x0000e239
    9ea0:	000084af 	.word	0x000084af
    9ea4:	000134b9 	.word	0x000134b9
    9ea8:	00013981 	.word	0x00013981
    9eac:	00008529 	.word	0x00008529
    9eb0:	0000863b 	.word	0x0000863b

00009eb4 <grid_ui_nvm_load_event_configuration>:



uint8_t grid_ui_nvm_load_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	
		
	grid_nvm_clear_read_buffer(nvm);
    9eb6:	4b19      	ldr	r3, [pc, #100]	; (9f1c <grid_ui_nvm_load_event_configuration+0x68>)
uint8_t grid_ui_nvm_load_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9eb8:	9201      	str	r2, [sp, #4]
    9eba:	460c      	mov	r4, r1
	grid_nvm_clear_read_buffer(nvm);
    9ebc:	4608      	mov	r0, r1
    9ebe:	4798      	blx	r3
	
	uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);	
    9ec0:	9901      	ldr	r1, [sp, #4]
    9ec2:	4b17      	ldr	r3, [pc, #92]	; (9f20 <grid_ui_nvm_load_event_configuration+0x6c>)
    9ec4:	4620      	mov	r0, r4
    9ec6:	4798      	blx	r3
	nvm->read_source_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;	
    9ec8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9ecc:	0241      	lsls	r1, r0, #9
	

	int status = flash_read(nvm->flash, nvm->read_source_address, nvm->read_buffer, GRID_NVM_PAGE_SIZE);	
    9ece:	f104 0609 	add.w	r6, r4, #9
	nvm->read_source_address = GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset;	
    9ed2:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
	int status = flash_read(nvm->flash, nvm->read_source_address, nvm->read_buffer, GRID_NVM_PAGE_SIZE);	
    9ed6:	6820      	ldr	r0, [r4, #0]
    9ed8:	4c12      	ldr	r4, [pc, #72]	; (9f24 <grid_ui_nvm_load_event_configuration+0x70>)
    9eda:	f44f 7300 	mov.w	r3, #512	; 0x200
    9ede:	4632      	mov	r2, r6
    9ee0:	47a0      	blx	r4
    9ee2:	2300      	movs	r3, #0
			}
			else if (nvm->read_buffer[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
				copydone = 1;
			}
			else{ // NORMAL CHARACTER, can be copied
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9ee4:	4c10      	ldr	r4, [pc, #64]	; (9f28 <grid_ui_nvm_load_event_configuration+0x74>)
	uint8_t cfgfound = 0;
    9ee6:	4618      	mov	r0, r3
	uint8_t copydone = 0;
    9ee8:	4619      	mov	r1, r3
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9eea:	f241 37b4 	movw	r7, #5044	; 0x13b4
		if (copydone == 0){
    9eee:	1c5a      	adds	r2, r3, #1
    9ef0:	b971      	cbnz	r1, 9f10 <grid_ui_nvm_load_event_configuration+0x5c>
			if (nvm->read_buffer[i] == '\n'){ // END OF PACKET, copy newline character
    9ef2:	5cf5      	ldrb	r5, [r6, r3]
    9ef4:	2d0a      	cmp	r5, #10
    9ef6:	d106      	bne.n	9f06 <grid_ui_nvm_load_event_configuration+0x52>
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9ef8:	4423      	add	r3, r4
				cfgfound=2;
    9efa:	2002      	movs	r0, #2
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9efc:	55dd      	strb	r5, [r3, r7]
				GRID_PORT_U.rx_double_buffer_status = i+1;
    9efe:	6222      	str	r2, [r4, #32]
				GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    9f00:	62a1      	str	r1, [r4, #40]	; 0x28
				copydone = 1;
    9f02:	2101      	movs	r1, #1
    9f04:	e004      	b.n	9f10 <grid_ui_nvm_load_event_configuration+0x5c>
			else if (nvm->read_buffer[i] == 255){ // UNPROGRAMMED MEMORY, lets get out of here
    9f06:	2dff      	cmp	r5, #255	; 0xff
    9f08:	d0fb      	beq.n	9f02 <grid_ui_nvm_load_event_configuration+0x4e>
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9f0a:	4423      	add	r3, r4
				
				cfgfound=1;
    9f0c:	2001      	movs	r0, #1
				GRID_PORT_U.rx_double_buffer[i] = nvm->read_buffer[i];
    9f0e:	55dd      	strb	r5, [r3, r7]
	for (uint16_t i=0; i<GRID_NVM_PAGE_SIZE; i++){
    9f10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9f14:	4613      	mov	r3, r2
    9f16:	d1ea      	bne.n	9eee <grid_ui_nvm_load_event_configuration+0x3a>
	}
	
	return cfgfound;
	
	
}
    9f18:	b003      	add	sp, #12
    9f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f1c:	00008c31 	.word	0x00008c31
    9f20:	00008cbd 	.word	0x00008cbd
    9f24:	0000e14d 	.word	0x0000e14d
    9f28:	2000404c 	.word	0x2000404c

00009f2c <grid_ui_nvm_clear_event_configuration>:
uint8_t grid_ui_nvm_clear_event_configuration(struct grid_ui_model* ui, struct grid_nvm_model* nvm, struct grid_ui_event* eve){
    9f2c:	b510      	push	{r4, lr}
    9f2e:	460c      	mov	r4, r1
		
		uint32_t event_page_offset = grid_nvm_calculate_event_page_offset(nvm, eve);
    9f30:	4b06      	ldr	r3, [pc, #24]	; (9f4c <grid_ui_nvm_clear_event_configuration+0x20>)
    9f32:	4611      	mov	r1, r2
    9f34:	4620      	mov	r0, r4
    9f36:	4798      	blx	r3
		
		

		flash_erase(nvm->flash, GRID_NVM_LOCAL_BASE_ADDRESS + GRID_NVM_PAGE_OFFSET*event_page_offset, 1);
    9f38:	f500 6080 	add.w	r0, r0, #1024	; 0x400
    9f3c:	0241      	lsls	r1, r0, #9
    9f3e:	4b04      	ldr	r3, [pc, #16]	; (9f50 <grid_ui_nvm_clear_event_configuration+0x24>)
    9f40:	6820      	ldr	r0, [r4, #0]
    9f42:	2201      	movs	r2, #1
    9f44:	4798      	blx	r3

		
		
		return 1;
		
}
    9f46:	2001      	movs	r0, #1
    9f48:	bd10      	pop	{r4, pc}
    9f4a:	bf00      	nop
    9f4c:	00008cbd 	.word	0x00008cbd
    9f50:	0000e239 	.word	0x0000e239

00009f54 <grid_ui_event_find>:
	
}



uint8_t grid_ui_event_find(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    9f54:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t event_index = 255;
		
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f56:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
    9f5a:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    9f5c:	22ff      	movs	r2, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    9f5e:	f44f 7786 	mov.w	r7, #268	; 0x10c
    9f62:	b2dd      	uxtb	r5, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f64:	42ae      	cmp	r6, r5
    9f66:	d801      	bhi.n	9f6c <grid_ui_event_find+0x18>

		
		
	return event_index;
	
}
    9f68:	4610      	mov	r0, r2
    9f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ele->event_list[i].type == event_type){
    9f6c:	6e04      	ldr	r4, [r0, #96]	; 0x60
    9f6e:	fb07 4403 	mla	r4, r7, r3, r4
    9f72:	3301      	adds	r3, #1
    9f74:	7aa4      	ldrb	r4, [r4, #10]
    9f76:	428c      	cmp	r4, r1
    9f78:	bf08      	it	eq
    9f7a:	462a      	moveq	r2, r5
	for(uint8_t i=0; i<ele->event_list_length; i++){
    9f7c:	e7f1      	b.n	9f62 <grid_ui_event_find+0xe>

00009f7e <grid_ui_event_trigger>:

void grid_ui_event_trigger(struct grid_ui_element* ele, uint8_t event_index){

	if (event_index == 255){
    9f7e:	29ff      	cmp	r1, #255	; 0xff
    9f80:	d006      	beq.n	9f90 <grid_ui_event_trigger+0x12>
	
	struct grid_ui_event* eve = &ele->event_list[event_index];


		
	eve->trigger = GRID_UI_STATUS_TRIGGERED;
    9f82:	6e03      	ldr	r3, [r0, #96]	; 0x60
    9f84:	f44f 7286 	mov.w	r2, #268	; 0x10c
    9f88:	fb02 3101 	mla	r1, r2, r1, r3
    9f8c:	2305      	movs	r3, #5
    9f8e:	724b      	strb	r3, [r1, #9]

}
    9f90:	4770      	bx	lr

00009f92 <grid_ui_event_trigger_local>:

void grid_ui_event_trigger_local(struct grid_ui_element* ele, uint8_t event_index){

	if (event_index == 255){
    9f92:	29ff      	cmp	r1, #255	; 0xff
    9f94:	d006      	beq.n	9fa4 <grid_ui_event_trigger_local+0x12>
	
	struct grid_ui_event* eve = &ele->event_list[event_index];


		
	eve->trigger = GRID_UI_STATUS_TRIGGERED_LOCAL;
    9f96:	6e03      	ldr	r3, [r0, #96]	; 0x60
    9f98:	f44f 7286 	mov.w	r2, #268	; 0x10c
    9f9c:	fb02 3101 	mla	r1, r2, r1, r3
    9fa0:	2306      	movs	r3, #6
    9fa2:	724b      	strb	r3, [r1, #9]

}
    9fa4:	4770      	bx	lr
	...

00009fa8 <grid_ui_event_render_action>:
		return 0;
	}
			
}

uint32_t grid_ui_event_render_action(struct grid_ui_event* eve, uint8_t* target_string){
    9fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fac:	b085      	sub	sp, #20
    9fae:	4605      	mov	r5, r0
    9fb0:	9101      	str	r1, [sp, #4]
    9fb2:	f100 0310 	add.w	r3, r0, #16

	
	uint32_t i=0;
    9fb6:	2600      	movs	r6, #0
	
	for(true; i<eve->event_string_length; i++){
    9fb8:	68ea      	ldr	r2, [r5, #12]
    9fba:	42b2      	cmp	r2, r6
    9fbc:	d816      	bhi.n	9fec <grid_ui_event_render_action+0x44>
		
	uint32_t block_start = 0;
	uint32_t block_length = 0;


	uint32_t total_substituted_length = 0;
    9fbe:	f04f 0800 	mov.w	r8, #0
			block_length = i-eve->event_string_length - block_start - 1; // -2 to remove {}

			if (block_length){


				printf("len %d expr ", block_length);
    9fc2:	4f45      	ldr	r7, [pc, #276]	; (a0d8 <grid_ui_event_render_action+0x130>)
	uint32_t block_start = 0;
    9fc4:	46c1      	mov	r9, r8
	for(true; i<(eve->event_string_length + eve->action_string_length) ; i++){
    9fc6:	68eb      	ldr	r3, [r5, #12]
    9fc8:	6c68      	ldr	r0, [r5, #68]	; 0x44
    9fca:	4418      	add	r0, r3
    9fcc:	42b0      	cmp	r0, r6
    9fce:	d813      	bhi.n	9ff8 <grid_ui_event_render_action+0x50>

	}
	
	
	// RESET ENCODER RELATIVE TEMPLATE PARAMETER VALUES
	if(eve->parent->type == GRID_UI_ELEMENT_ENCODER){	
    9fd0:	686b      	ldr	r3, [r5, #4]
    9fd2:	7a5a      	ldrb	r2, [r3, #9]
    9fd4:	2a03      	cmp	r2, #3
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL] = 255;	
    9fd6:	bf08      	it	eq
    9fd8:	22ff      	moveq	r2, #255	; 0xff
    }
	
	
	return eve->event_string_length + eve->action_string_length - total_substituted_length;
		
}
    9fda:	eba0 0008 	sub.w	r0, r0, r8
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_LOW] = 255;	
    9fde:	bf04      	itt	eq
    9fe0:	e9c3 220d 	strdeq	r2, r2, [r3, #52]	; 0x34
		eve->parent->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + GRID_TEMPLATE_E_PARAMETER_CONTROLLER_REL_VELOCITY_HIGH] = 255;	
    9fe4:	63da      	streq	r2, [r3, #60]	; 0x3c
}
    9fe6:	b005      	add	sp, #20
    9fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		target_string[i] = eve->event_string[i];
    9fec:	9901      	ldr	r1, [sp, #4]
    9fee:	f813 2b01 	ldrb.w	r2, [r3], #1
    9ff2:	558a      	strb	r2, [r1, r6]
	for(true; i<eve->event_string_length; i++){
    9ff4:	3601      	adds	r6, #1
    9ff6:	e7df      	b.n	9fb8 <grid_ui_event_render_action+0x10>
		target_string[i-total_substituted_length] = eve->action_string[i-eve->event_string_length];
    9ff8:	1af3      	subs	r3, r6, r3
    9ffa:	442b      	add	r3, r5
    9ffc:	9a01      	ldr	r2, [sp, #4]
    9ffe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a002:	eba6 0b08 	sub.w	fp, r6, r8
    a006:	f802 300b 	strb.w	r3, [r2, fp]
		if (eve->action_string[i-eve->event_string_length] == '{'){
    a00a:	68ec      	ldr	r4, [r5, #12]
    a00c:	1b34      	subs	r4, r6, r4
    a00e:	192b      	adds	r3, r5, r4
    a010:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    a014:	2b7b      	cmp	r3, #123	; 0x7b
    a016:	d05c      	beq.n	a0d2 <grid_ui_event_render_action+0x12a>
		else if (eve->action_string[i-eve->event_string_length] == '}'){
    a018:	2b7d      	cmp	r3, #125	; 0x7d
    a01a:	d134      	bne.n	a086 <grid_ui_event_render_action+0xde>
			block_length = i-eve->event_string_length - block_start - 1; // -2 to remove {}
    a01c:	eba4 0409 	sub.w	r4, r4, r9
			if (block_length){
    a020:	3c01      	subs	r4, #1
    a022:	d030      	beq.n	a086 <grid_ui_event_render_action+0xde>
				printf("len %d expr ", block_length);
    a024:	482d      	ldr	r0, [pc, #180]	; (a0dc <grid_ui_event_render_action+0x134>)
    a026:	4621      	mov	r1, r4
    a028:	47b8      	blx	r7
				for (uint8_t j = 0; j<block_length; j++){
    a02a:	f04f 0a00 	mov.w	sl, #0
    a02e:	f109 0301 	add.w	r3, r9, #1
    a032:	fa5f f18a 	uxtb.w	r1, sl
    a036:	42a1      	cmp	r1, r4
					printf("%c", eve->action_string[block_start+1 + j]);
    a038:	4a29      	ldr	r2, [pc, #164]	; (a0e0 <grid_ui_event_render_action+0x138>)
				for (uint8_t j = 0; j<block_length; j++){
    a03a:	f10a 0a01 	add.w	sl, sl, #1
    a03e:	d324      	bcc.n	a08a <grid_ui_event_render_action+0xe2>
				grid_expr_evaluate(&grid_expr_state, &eve->action_string[block_start+1], block_length); // +1 to not include {
    a040:	f8df a0b4 	ldr.w	sl, [pc, #180]	; a0f8 <grid_ui_event_render_action+0x150>
				printf("\r\n", block_length);
    a044:	4827      	ldr	r0, [pc, #156]	; (a0e4 <grid_ui_event_render_action+0x13c>)
    a046:	4621      	mov	r1, r4
    a048:	47b8      	blx	r7
				grid_expr_evaluate(&grid_expr_state, &eve->action_string[block_start+1], block_length); // +1 to not include {
    a04a:	f109 0149 	add.w	r1, r9, #73	; 0x49
    a04e:	4b26      	ldr	r3, [pc, #152]	; (a0e8 <grid_ui_event_render_action+0x140>)
    a050:	b2e2      	uxtb	r2, r4
    a052:	4429      	add	r1, r5
    a054:	4650      	mov	r0, sl
    a056:	4798      	blx	r3
				printf("oslen %d\r\n", grid_expr_state.output_string_length);
    a058:	f89a 10ca 	ldrb.w	r1, [sl, #202]	; 0xca
    a05c:	4823      	ldr	r0, [pc, #140]	; (a0ec <grid_ui_event_render_action+0x144>)
    a05e:	47b8      	blx	r7
					target_string[i-total_substituted_length-block_length-1+j] = grid_expr_state.output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-grid_expr_state.output_string_length+j];
    a060:	ebab 0104 	sub.w	r1, fp, r4
				for (uint8_t j = 0; j<grid_expr_state.output_string_length; j++){
    a064:	2200      	movs	r2, #0
    a066:	4653      	mov	r3, sl
					target_string[i-total_substituted_length-block_length-1+j] = grid_expr_state.output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-grid_expr_state.output_string_length+j];
    a068:	9102      	str	r1, [sp, #8]
				for (uint8_t j = 0; j<grid_expr_state.output_string_length; j++){
    a06a:	f893 10ca 	ldrb.w	r1, [r3, #202]	; 0xca
    a06e:	fa5f fb82 	uxtb.w	fp, r2
    a072:	4559      	cmp	r1, fp
    a074:	d811      	bhi.n	a09a <grid_ui_event_render_action+0xf2>
				printf(" evaluated %s\r\n", &grid_expr_state.output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-grid_expr_state.output_string_length]);
    a076:	f89a 10ca 	ldrb.w	r1, [sl, #202]	; 0xca
    a07a:	481d      	ldr	r0, [pc, #116]	; (a0f0 <grid_ui_event_render_action+0x148>)
    a07c:	f1c1 01c9 	rsb	r1, r1, #201	; 0xc9
    a080:	4419      	add	r1, r3
				total_substituted_length += block_length;
    a082:	44a0      	add	r8, r4
				printf(" evaluated %s\r\n", &grid_expr_state.output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-grid_expr_state.output_string_length]);
    a084:	47b8      	blx	r7
	for(true; i<(eve->event_string_length + eve->action_string_length) ; i++){
    a086:	3601      	adds	r6, #1
    a088:	e79d      	b.n	9fc6 <grid_ui_event_render_action+0x1e>
					printf("%c", eve->action_string[block_start+1 + j]);
    a08a:	4429      	add	r1, r5
    a08c:	4419      	add	r1, r3
    a08e:	9302      	str	r3, [sp, #8]
    a090:	f891 0048 	ldrb.w	r0, [r1, #72]	; 0x48
    a094:	4790      	blx	r2
    a096:	9b02      	ldr	r3, [sp, #8]
    a098:	e7cb      	b.n	a032 <grid_ui_event_render_action+0x8a>
					target_string[i-total_substituted_length-block_length-1+j] = grid_expr_state.output_string[GRID_EXPR_OUTPUT_STRING_MAXLENGTH-grid_expr_state.output_string_length+j];
    a09a:	f893 10ca 	ldrb.w	r1, [r3, #202]	; 0xca
    a09e:	9203      	str	r2, [sp, #12]
    a0a0:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
    a0a4:	4459      	add	r1, fp
    a0a6:	9a02      	ldr	r2, [sp, #8]
    a0a8:	4419      	add	r1, r3
    a0aa:	9b01      	ldr	r3, [sp, #4]
    a0ac:	f891 1065 	ldrb.w	r1, [r1, #101]	; 0x65
    a0b0:	4493      	add	fp, r2
    a0b2:	eb03 000b 	add.w	r0, r3, fp
    a0b6:	b2c9      	uxtb	r1, r1
    a0b8:	f800 1c01 	strb.w	r1, [r0, #-1]
					printf("putc: %c\r\n", target_string[i-total_substituted_length-block_length-1+j]);
    a0bc:	480d      	ldr	r0, [pc, #52]	; (a0f4 <grid_ui_event_render_action+0x14c>)
    a0be:	47b8      	blx	r7
					target_string[i-total_substituted_length-block_length-1+j + 1] =0;
    a0c0:	9b01      	ldr	r3, [sp, #4]
    a0c2:	f04f 0200 	mov.w	r2, #0
    a0c6:	f803 200b 	strb.w	r2, [r3, fp]
				for (uint8_t j = 0; j<grid_expr_state.output_string_length; j++){
    a0ca:	9a03      	ldr	r2, [sp, #12]
    a0cc:	4b0a      	ldr	r3, [pc, #40]	; (a0f8 <grid_ui_event_render_action+0x150>)
    a0ce:	3201      	adds	r2, #1
    a0d0:	e7cb      	b.n	a06a <grid_ui_event_render_action+0xc2>
			block_start = i-eve->event_string_length;
    a0d2:	46a1      	mov	r9, r4
    a0d4:	e7d7      	b.n	a086 <grid_ui_event_render_action+0xde>
    a0d6:	bf00      	nop
    a0d8:	00013049 	.word	0x00013049
    a0dc:	00015951 	.word	0x00015951
    a0e0:	000130a5 	.word	0x000130a5
    a0e4:	00015695 	.word	0x00015695
    a0e8:	00006b05 	.word	0x00006b05
    a0ec:	0001595e 	.word	0x0001595e
    a0f0:	00015974 	.word	0x00015974
    a0f4:	00015969 	.word	0x00015969
    a0f8:	2000b1bc 	.word	0x2000b1bc

0000a0fc <grid_port_process_ui>:
void grid_port_process_ui(struct grid_port* por){
    a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    a100:	4fb1      	ldr	r7, [pc, #708]	; (a3c8 <grid_port_process_ui+0x2cc>)
void grid_port_process_ui(struct grid_port* por){
    a102:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    a106:	2100      	movs	r1, #0
void grid_port_process_ui(struct grid_port* por){
    a108:	9001      	str	r0, [sp, #4]
	uint8_t message_local_action_available = 0;
    a10a:	4688      	mov	r8, r1
	uint8_t message_broadcast_action_available = 0;
    a10c:	460d      	mov	r5, r1
    a10e:	46ba      	mov	sl, r7
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a110:	f04f 0c64 	mov.w	ip, #100	; 0x64
				if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a114:	f44f 7e86 	mov.w	lr, #268	; 0x10c
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    a118:	787a      	ldrb	r2, [r7, #1]
    a11a:	b2cb      	uxtb	r3, r1
    a11c:	429a      	cmp	r2, r3
    a11e:	d95e      	bls.n	a1de <grid_port_process_ui+0xe2>
		for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a120:	011b      	lsls	r3, r3, #4
    a122:	2400      	movs	r4, #0
    a124:	e02e      	b.n	a184 <grid_port_process_ui+0x88>
				if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a126:	f8da 9004 	ldr.w	r9, [sl, #4]
    a12a:	4499      	add	r9, r3
    a12c:	fb0e f000 	mul.w	r0, lr, r0
    a130:	f8d9 900c 	ldr.w	r9, [r9, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a134:	4491      	add	r9, r2
    a136:	3601      	adds	r6, #1
    a138:	f8d9 9060 	ldr.w	r9, [r9, #96]	; 0x60
    a13c:	4481      	add	r9, r0
    a13e:	f899 9009 	ldrb.w	r9, [r9, #9]
    a142:	f1b9 0f05 	cmp.w	r9, #5
				if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a146:	f8da 9004 	ldr.w	r9, [sl, #4]
    a14a:	4499      	add	r9, r3
					message_broadcast_action_available++;
    a14c:	bf08      	it	eq
    a14e:	3501      	addeq	r5, #1
				if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a150:	f8d9 900c 	ldr.w	r9, [r9, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    a154:	4491      	add	r9, r2
					message_broadcast_action_available++;
    a156:	bf08      	it	eq
    a158:	b2ed      	uxtbeq	r5, r5
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    a15a:	f8d9 9060 	ldr.w	r9, [r9, #96]	; 0x60
    a15e:	4448      	add	r0, r9
    a160:	7a40      	ldrb	r0, [r0, #9]
    a162:	2806      	cmp	r0, #6
                    message_local_action_available++;
    a164:	bf04      	itt	eq
    a166:	f108 0801 	addeq.w	r8, r8, #1
    a16a:	fa5f f888 	uxtbeq.w	r8, r8
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a16e:	f8da 0004 	ldr.w	r0, [sl, #4]
    a172:	4418      	add	r0, r3
    a174:	68c0      	ldr	r0, [r0, #12]
    a176:	4410      	add	r0, r2
    a178:	f890 905c 	ldrb.w	r9, [r0, #92]	; 0x5c
    a17c:	b2f0      	uxtb	r0, r6
    a17e:	4581      	cmp	r9, r0
    a180:	d8d1      	bhi.n	a126 <grid_port_process_ui+0x2a>
		for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a182:	3401      	adds	r4, #1
    a184:	f8da 2004 	ldr.w	r2, [sl, #4]
    a188:	441a      	add	r2, r3
    a18a:	7a50      	ldrb	r0, [r2, #9]
    a18c:	b2e2      	uxtb	r2, r4
    a18e:	4290      	cmp	r0, r2
    a190:	d903      	bls.n	a19a <grid_port_process_ui+0x9e>
			for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a192:	fb0c f202 	mul.w	r2, ip, r2
    a196:	2600      	movs	r6, #0
    a198:	e7e9      	b.n	a16e <grid_port_process_ui+0x72>
	for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    a19a:	3101      	adds	r1, #1
    a19c:	e7bc      	b.n	a118 <grid_port_process_ui+0x1c>
			if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    a19e:	6870      	ldr	r0, [r6, #4]
    a1a0:	68c0      	ldr	r0, [r0, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a1a2:	eb00 0e03 	add.w	lr, r0, r3
    a1a6:	3201      	adds	r2, #1
    a1a8:	f8de 0060 	ldr.w	r0, [lr, #96]	; 0x60
    a1ac:	fb0c 0009 	mla	r0, ip, r9, r0
    a1b0:	7a40      	ldrb	r0, [r0, #9]
    a1b2:	2805      	cmp	r0, #5
				message_broadcast_action_available++;
    a1b4:	bf04      	itt	eq
    a1b6:	3501      	addeq	r5, #1
    a1b8:	b2ed      	uxtbeq	r5, r5
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a1ba:	6870      	ldr	r0, [r6, #4]
    a1bc:	68c0      	ldr	r0, [r0, #12]
    a1be:	4418      	add	r0, r3
    a1c0:	fa5f f982 	uxtb.w	r9, r2
    a1c4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    a1c8:	4548      	cmp	r0, r9
    a1ca:	d8e8      	bhi.n	a19e <grid_port_process_ui+0xa2>
	for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a1cc:	3101      	adds	r1, #1
    a1ce:	6863      	ldr	r3, [r4, #4]
    a1d0:	7a5a      	ldrb	r2, [r3, #9]
    a1d2:	b2cb      	uxtb	r3, r1
    a1d4:	429a      	cmp	r2, r3
    a1d6:	d909      	bls.n	a1ec <grid_port_process_ui+0xf0>
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a1d8:	437b      	muls	r3, r7
    a1da:	2200      	movs	r2, #0
    a1dc:	e7ed      	b.n	a1ba <grid_port_process_ui+0xbe>
	for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a1de:	4c7b      	ldr	r4, [pc, #492]	; (a3cc <grid_port_process_ui+0x2d0>)
    a1e0:	2100      	movs	r1, #0
    a1e2:	4626      	mov	r6, r4
		for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a1e4:	2764      	movs	r7, #100	; 0x64
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a1e6:	f44f 7c86 	mov.w	ip, #268	; 0x10c
    a1ea:	e7f0      	b.n	a1ce <grid_port_process_ui+0xd2>
	struct grid_port* port[4] = {&GRID_PORT_N, &GRID_PORT_E, &GRID_PORT_S, &GRID_PORT_W};
    a1ec:	4b78      	ldr	r3, [pc, #480]	; (a3d0 <grid_port_process_ui+0x2d4>)
    a1ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    a1f0:	ae07      	add	r6, sp, #28
    a1f2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    a1f6:	2404      	movs	r4, #4
		if (port[k]->ping_flag == 1){
    a1f8:	f856 7b04 	ldr.w	r7, [r6], #4
    a1fc:	f642 7348 	movw	r3, #12104	; 0x2f48
    a200:	5cfb      	ldrb	r3, [r7, r3]
    a202:	2b01      	cmp	r3, #1
    a204:	d11f      	bne.n	a246 <grid_port_process_ui+0x14a>
			if (grid_buffer_write_init(&port[k]->tx_buffer, port[k]->ping_packet_length)){
    a206:	f642 7347 	movw	r3, #12103	; 0x2f47
    a20a:	f507 591c 	add.w	r9, r7, #9984	; 0x2700
    a20e:	f109 093c 	add.w	r9, r9, #60	; 0x3c
    a212:	18fa      	adds	r2, r7, r3
    a214:	5cf9      	ldrb	r1, [r7, r3]
    a216:	4b6f      	ldr	r3, [pc, #444]	; (a3d4 <grid_port_process_ui+0x2d8>)
    a218:	9202      	str	r2, [sp, #8]
    a21a:	4648      	mov	r0, r9
    a21c:	4798      	blx	r3
    a21e:	b170      	cbz	r0, a23e <grid_port_process_ui+0x142>
				for(uint32_t i = 0; i<port[k]->ping_packet_length; i++){
    a220:	4b6d      	ldr	r3, [pc, #436]	; (a3d8 <grid_port_process_ui+0x2dc>)
    a222:	f507 5b3c 	add.w	fp, r7, #12032	; 0x2f00
    a226:	f10b 0b33 	add.w	fp, fp, #51	; 0x33
    a22a:	1bdb      	subs	r3, r3, r7
    a22c:	9a02      	ldr	r2, [sp, #8]
    a22e:	7811      	ldrb	r1, [r2, #0]
    a230:	eb03 020b 	add.w	r2, r3, fp
    a234:	4291      	cmp	r1, r2
    a236:	d826      	bhi.n	a286 <grid_port_process_ui+0x18a>
				grid_buffer_write_acknowledge(&port[k]->tx_buffer);
    a238:	4b68      	ldr	r3, [pc, #416]	; (a3dc <grid_port_process_ui+0x2e0>)
    a23a:	4648      	mov	r0, r9
    a23c:	4798      	blx	r3
			port[k]->ping_flag = 0;
    a23e:	f642 7248 	movw	r2, #12104	; 0x2f48
    a242:	2300      	movs	r3, #0
    a244:	54bb      	strb	r3, [r7, r2]
	for (uint8_t k = 0; k<4; k++){
    a246:	3c01      	subs	r4, #1
    a248:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    a24c:	d1d4      	bne.n	a1f8 <grid_port_process_ui+0xfc>
	if (message_local_action_available){
    a24e:	f1b8 0f00 	cmp.w	r8, #0
    a252:	d07f      	beq.n	a354 <grid_port_process_ui+0x258>
		grid_msg_init(&message);
    a254:	4b62      	ldr	r3, [pc, #392]	; (a3e0 <grid_port_process_ui+0x2e4>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a256:	4e63      	ldr	r6, [pc, #396]	; (a3e4 <grid_port_process_ui+0x2e8>)
		grid_msg_init(&message);
    a258:	a86f      	add	r0, sp, #444	; 0x1bc
    a25a:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a25c:	227f      	movs	r2, #127	; 0x7f
    a25e:	4611      	mov	r1, r2
    a260:	4623      	mov	r3, r4
    a262:	a86f      	add	r0, sp, #444	; 0x1bc
    a264:	47b0      	blx	r6
		uint8_t payload[GRID_PARAMETER_PACKET_maxlength] = {0};				
    a266:	4b60      	ldr	r3, [pc, #384]	; (a3e8 <grid_port_process_ui+0x2ec>)
    a268:	940b      	str	r4, [sp, #44]	; 0x2c
    a26a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
    a26e:	4621      	mov	r1, r4
    a270:	a80c      	add	r0, sp, #48	; 0x30
    a272:	4798      	blx	r3
		uint32_t offset=0;
    a274:	46a0      	mov	r8, r4
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++)
    a276:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a27a:	b2e6      	uxtb	r6, r4
    a27c:	42b3      	cmp	r3, r6
    a27e:	d957      	bls.n	a330 <grid_port_process_ui+0x234>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a280:	0136      	lsls	r6, r6, #4
    a282:	2300      	movs	r3, #0
    a284:	e044      	b.n	a310 <grid_port_process_ui+0x214>
    a286:	9303      	str	r3, [sp, #12]
					grid_buffer_write_character(&port[k]->tx_buffer, port[k]->ping_packet[i]);
    a288:	f81b 1b01 	ldrb.w	r1, [fp], #1
    a28c:	4b57      	ldr	r3, [pc, #348]	; (a3ec <grid_port_process_ui+0x2f0>)
    a28e:	4648      	mov	r0, r9
    a290:	4798      	blx	r3
    a292:	9b03      	ldr	r3, [sp, #12]
				for(uint32_t i = 0; i<port[k]->ping_packet_length; i++){
    a294:	e7ca      	b.n	a22c <grid_port_process_ui+0x130>
					if (offset>GRID_PARAMETER_PACKET_marign){
    a296:	f1b8 0fc8 	cmp.w	r8, #200	; 0xc8
    a29a:	d82a      	bhi.n	a2f2 <grid_port_process_ui+0x1f6>
						CRITICAL_SECTION_ENTER()
    a29c:	4b54      	ldr	r3, [pc, #336]	; (a3f0 <grid_port_process_ui+0x2f4>)
    a29e:	a805      	add	r0, sp, #20
    a2a0:	4798      	blx	r3
						if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a2a2:	f8da 3004 	ldr.w	r3, [sl, #4]
    a2a6:	4433      	add	r3, r6
    a2a8:	f44f 7286 	mov.w	r2, #268	; 0x10c
    a2ac:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    a2ae:	443b      	add	r3, r7
						if (grid_ui_event_istriggered_local(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a2b0:	fb02 fb0b 	mul.w	fp, r2, fp
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED_LOCAL){
    a2b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a2b6:	445b      	add	r3, fp
    a2b8:	7a5b      	ldrb	r3, [r3, #9]
    a2ba:	2b06      	cmp	r3, #6
    a2bc:	d116      	bne.n	a2ec <grid_port_process_ui+0x1f0>
                            offset += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &payload[offset]);
    a2be:	f8da 3004 	ldr.w	r3, [sl, #4]
    a2c2:	4433      	add	r3, r6
    a2c4:	68db      	ldr	r3, [r3, #12]
    a2c6:	443b      	add	r3, r7
    a2c8:	6e18      	ldr	r0, [r3, #96]	; 0x60
    a2ca:	ab0b      	add	r3, sp, #44	; 0x2c
    a2cc:	eb03 0108 	add.w	r1, r3, r8
    a2d0:	4458      	add	r0, fp
    a2d2:	4b48      	ldr	r3, [pc, #288]	; (a3f4 <grid_port_process_ui+0x2f8>)
    a2d4:	4798      	blx	r3
                            grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    a2d6:	f8da 3004 	ldr.w	r3, [sl, #4]
    a2da:	4433      	add	r3, r6
                            offset += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &payload[offset]);
    a2dc:	4480      	add	r8, r0
                            grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    a2de:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    a2e0:	443b      	add	r3, r7
    a2e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a2e4:	449b      	add	fp, r3
    a2e6:	2304      	movs	r3, #4
    a2e8:	f88b 3009 	strb.w	r3, [fp, #9]
						CRITICAL_SECTION_LEAVE()
    a2ec:	4b42      	ldr	r3, [pc, #264]	; (a3f8 <grid_port_process_ui+0x2fc>)
    a2ee:	a805      	add	r0, sp, #20
    a2f0:	4798      	blx	r3
                for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a2f2:	f109 0901 	add.w	r9, r9, #1
    a2f6:	f8da 3004 	ldr.w	r3, [sl, #4]
    a2fa:	4433      	add	r3, r6
    a2fc:	fa5f fb89 	uxtb.w	fp, r9
    a300:	68db      	ldr	r3, [r3, #12]
    a302:	443b      	add	r3, r7
    a304:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    a308:	455b      	cmp	r3, fp
    a30a:	d8c4      	bhi.n	a296 <grid_port_process_ui+0x19a>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a30c:	9b02      	ldr	r3, [sp, #8]
    a30e:	3301      	adds	r3, #1
    a310:	9302      	str	r3, [sp, #8]
    a312:	f8da 3004 	ldr.w	r3, [sl, #4]
    a316:	4433      	add	r3, r6
    a318:	7a5a      	ldrb	r2, [r3, #9]
    a31a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a31e:	429a      	cmp	r2, r3
    a320:	d904      	bls.n	a32c <grid_port_process_ui+0x230>
                for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){
    a322:	2764      	movs	r7, #100	; 0x64
    a324:	435f      	muls	r7, r3
    a326:	f04f 0900 	mov.w	r9, #0
    a32a:	e7e4      	b.n	a2f6 <grid_port_process_ui+0x1fa>
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++)
    a32c:	3401      	adds	r4, #1
    a32e:	e7a2      	b.n	a276 <grid_port_process_ui+0x17a>
		grid_msg_body_append_text(&message, payload, offset);
    a330:	a90b      	add	r1, sp, #44	; 0x2c
    a332:	4642      	mov	r2, r8
    a334:	4b31      	ldr	r3, [pc, #196]	; (a3fc <grid_port_process_ui+0x300>)
    a336:	a86f      	add	r0, sp, #444	; 0x1bc
    a338:	4798      	blx	r3
		grid_msg_packet_close(&message);
    a33a:	4b31      	ldr	r3, [pc, #196]	; (a400 <grid_port_process_ui+0x304>)
    a33c:	a86f      	add	r0, sp, #444	; 0x1bc
    a33e:	4798      	blx	r3
		uint32_t message_length = grid_msg_packet_get_length(&message);
    a340:	4b30      	ldr	r3, [pc, #192]	; (a404 <grid_port_process_ui+0x308>)
    a342:	a86f      	add	r0, sp, #444	; 0x1bc
    a344:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, message_length)){
    a346:	4b23      	ldr	r3, [pc, #140]	; (a3d4 <grid_port_process_ui+0x2d8>)
		uint32_t message_length = grid_msg_packet_get_length(&message);
    a348:	4604      	mov	r4, r0
		if (grid_buffer_write_init(&GRID_PORT_U.tx_buffer, message_length)){
    a34a:	b281      	uxth	r1, r0
    a34c:	482e      	ldr	r0, [pc, #184]	; (a408 <grid_port_process_ui+0x30c>)
    a34e:	4798      	blx	r3
    a350:	2800      	cmp	r0, #0
    a352:	d132      	bne.n	a3ba <grid_port_process_ui+0x2be>
	if (por->cooldown > 0){
    a354:	9b01      	ldr	r3, [sp, #4]
    a356:	681b      	ldr	r3, [r3, #0]
    a358:	b12b      	cbz	r3, a366 <grid_port_process_ui+0x26a>
		por->cooldown--;
    a35a:	3b01      	subs	r3, #1
    a35c:	9a01      	ldr	r2, [sp, #4]
	if (por->cooldown > 10){
    a35e:	2b0a      	cmp	r3, #10
		por->cooldown--;
    a360:	6013      	str	r3, [r2, #0]
	if (por->cooldown > 10){
    a362:	f200 80fd 	bhi.w	a560 <grid_port_process_ui+0x464>
	if (message_broadcast_action_available){
    a366:	2d00      	cmp	r5, #0
    a368:	f000 80fa 	beq.w	a560 <grid_port_process_ui+0x464>
		grid_msg_init(&message);
    a36c:	4b1c      	ldr	r3, [pc, #112]	; (a3e0 <grid_port_process_ui+0x2e4>)
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a36e:	4c1d      	ldr	r4, [pc, #116]	; (a3e4 <grid_port_process_ui+0x2e8>)
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a370:	f8df 8058 	ldr.w	r8, [pc, #88]	; a3cc <grid_port_process_ui+0x2d0>
		grid_msg_init(&message);
    a374:	a86f      	add	r0, sp, #444	; 0x1bc
    a376:	4798      	blx	r3
		grid_msg_init_header(&message, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    a378:	227f      	movs	r2, #127	; 0x7f
    a37a:	2300      	movs	r3, #0
    a37c:	4611      	mov	r1, r2
    a37e:	a86f      	add	r0, sp, #444	; 0x1bc
    a380:	47a0      	blx	r4
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a382:	2700      	movs	r7, #0
    a384:	4645      	mov	r5, r8
    a386:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a38a:	7a5a      	ldrb	r2, [r3, #9]
    a38c:	b2fb      	uxtb	r3, r7
    a38e:	429a      	cmp	r2, r3
    a390:	f240 80d3 	bls.w	a53a <grid_port_process_ui+0x43e>
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a394:	2464      	movs	r4, #100	; 0x64
					CRITICAL_SECTION_LEAVE()
    a396:	f8df b060 	ldr.w	fp, [pc, #96]	; a3f8 <grid_port_process_ui+0x2fc>
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a39a:	435c      	muls	r4, r3
    a39c:	2600      	movs	r6, #0
    a39e:	e067      	b.n	a470 <grid_port_process_ui+0x374>
				grid_buffer_write_character(&GRID_PORT_U.tx_buffer, grid_msg_packet_send_char(&message, i));
    a3a0:	4631      	mov	r1, r6
    a3a2:	a86f      	add	r0, sp, #444	; 0x1bc
    a3a4:	47b8      	blx	r7
    a3a6:	4601      	mov	r1, r0
    a3a8:	4640      	mov	r0, r8
    a3aa:	47c8      	blx	r9
			for(uint32_t i = 0; i<message_length; i++){
    a3ac:	3601      	adds	r6, #1
    a3ae:	42a6      	cmp	r6, r4
    a3b0:	d1f6      	bne.n	a3a0 <grid_port_process_ui+0x2a4>
			grid_buffer_write_acknowledge(&GRID_PORT_U.tx_buffer);
    a3b2:	4b0a      	ldr	r3, [pc, #40]	; (a3dc <grid_port_process_ui+0x2e0>)
    a3b4:	4814      	ldr	r0, [pc, #80]	; (a408 <grid_port_process_ui+0x30c>)
    a3b6:	4798      	blx	r3
		}
    a3b8:	e7cc      	b.n	a354 <grid_port_process_ui+0x258>
				grid_buffer_write_character(&GRID_PORT_U.tx_buffer, grid_msg_packet_send_char(&message, i));
    a3ba:	4f14      	ldr	r7, [pc, #80]	; (a40c <grid_port_process_ui+0x310>)
    a3bc:	f8df 8048 	ldr.w	r8, [pc, #72]	; a408 <grid_port_process_ui+0x30c>
    a3c0:	f8df 9028 	ldr.w	r9, [pc, #40]	; a3ec <grid_port_process_ui+0x2f0>
			for(uint32_t i = 0; i<message_length; i++){
    a3c4:	2600      	movs	r6, #0
    a3c6:	e7f2      	b.n	a3ae <grid_port_process_ui+0x2b2>
    a3c8:	20006f98 	.word	0x20006f98
    a3cc:	20014628 	.word	0x20014628
    a3d0:	00015b34 	.word	0x00015b34
    a3d4:	00004839 	.word	0x00004839
    a3d8:	ffffd0cd 	.word	0xffffd0cd
    a3dc:	00004895 	.word	0x00004895
    a3e0:	00008545 	.word	0x00008545
    a3e4:	00008579 	.word	0x00008579
    a3e8:	00012e05 	.word	0x00012e05
    a3ec:	00004875 	.word	0x00004875
    a3f0:	00011679 	.word	0x00011679
    a3f4:	00009fa9 	.word	0x00009fa9
    a3f8:	00011687 	.word	0x00011687
    a3fc:	000084b5 	.word	0x000084b5
    a400:	00008671 	.word	0x00008671
    a404:	000084a1 	.word	0x000084a1
    a408:	20006788 	.word	0x20006788
    a40c:	0000863b 	.word	0x0000863b
				if (grid_msg_packet_get_length(&message)>GRID_PARAMETER_PACKET_marign){
    a410:	4b5f      	ldr	r3, [pc, #380]	; (a590 <grid_port_process_ui+0x494>)
    a412:	a86f      	add	r0, sp, #444	; 0x1bc
    a414:	4798      	blx	r3
    a416:	28c8      	cmp	r0, #200	; 0xc8
    a418:	d829      	bhi.n	a46e <grid_port_process_ui+0x372>
					CRITICAL_SECTION_ENTER()
    a41a:	4b5e      	ldr	r3, [pc, #376]	; (a594 <grid_port_process_ui+0x498>)
    a41c:	a806      	add	r0, sp, #24
    a41e:	4798      	blx	r3
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    a420:	686b      	ldr	r3, [r5, #4]
    a422:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a424:	4423      	add	r3, r4
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    a426:	f44f 7286 	mov.w	r2, #268	; 0x10c
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a42a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
					if (grid_ui_event_istriggered(&grid_core_state.bank_list[0].element_list[i].event_list[j])){
    a42c:	fb02 f909 	mul.w	r9, r2, r9
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a430:	444b      	add	r3, r9
    a432:	7a5b      	ldrb	r3, [r3, #9]
    a434:	2b05      	cmp	r3, #5
    a436:	d118      	bne.n	a46a <grid_port_process_ui+0x36e>
						uint32_t offset = grid_msg_body_get_length(&message); 
    a438:	4b57      	ldr	r3, [pc, #348]	; (a598 <grid_port_process_ui+0x49c>)
    a43a:	a86f      	add	r0, sp, #444	; 0x1bc
    a43c:	4798      	blx	r3
						message.body_length += grid_ui_event_render_action(&grid_core_state.bank_list[0].element_list[i].event_list[j], &message.body[offset]);
    a43e:	686b      	ldr	r3, [r5, #4]
    a440:	68db      	ldr	r3, [r3, #12]
    a442:	4423      	add	r3, r4
    a444:	3014      	adds	r0, #20
    a446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a448:	aa6f      	add	r2, sp, #444	; 0x1bc
    a44a:	1811      	adds	r1, r2, r0
    a44c:	eb03 0009 	add.w	r0, r3, r9
    a450:	4b52      	ldr	r3, [pc, #328]	; (a59c <grid_port_process_ui+0x4a0>)
    a452:	4798      	blx	r3
    a454:	9bd4      	ldr	r3, [sp, #848]	; 0x350
    a456:	4418      	add	r0, r3
						grid_ui_event_reset(&grid_core_state.bank_list[0].element_list[i].event_list[j]);
    a458:	686b      	ldr	r3, [r5, #4]
						message.body_length += grid_ui_event_render_action(&grid_core_state.bank_list[0].element_list[i].event_list[j], &message.body[offset]);
    a45a:	90d4      	str	r0, [sp, #848]	; 0x350
						grid_ui_event_reset(&grid_core_state.bank_list[0].element_list[i].event_list[j]);
    a45c:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    a45e:	4423      	add	r3, r4
    a460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a462:	4499      	add	r9, r3
    a464:	2304      	movs	r3, #4
    a466:	f889 3009 	strb.w	r3, [r9, #9]
					CRITICAL_SECTION_LEAVE()
    a46a:	a806      	add	r0, sp, #24
    a46c:	47d8      	blx	fp
			for (uint8_t j=0; j<grid_core_state.bank_list[0].element_list[i].event_list_length; j++){
    a46e:	3601      	adds	r6, #1
    a470:	686b      	ldr	r3, [r5, #4]
    a472:	68db      	ldr	r3, [r3, #12]
    a474:	4423      	add	r3, r4
    a476:	fa5f f986 	uxtb.w	r9, r6
    a47a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    a47e:	454b      	cmp	r3, r9
    a480:	d8c6      	bhi.n	a410 <grid_port_process_ui+0x314>
		for (uint8_t i=0; i<grid_core_state.bank_list[0].element_list_length; i++){
    a482:	3701      	adds	r7, #1
    a484:	e77f      	b.n	a386 <grid_port_process_ui+0x28a>
					if (grid_msg_packet_get_length(&message)>GRID_PARAMETER_PACKET_marign){
    a486:	4b42      	ldr	r3, [pc, #264]	; (a590 <grid_port_process_ui+0x494>)
    a488:	a86f      	add	r0, sp, #444	; 0x1bc
    a48a:	4798      	blx	r3
    a48c:	28c8      	cmp	r0, #200	; 0xc8
    a48e:	d82f      	bhi.n	a4f0 <grid_port_process_ui+0x3f4>
						CRITICAL_SECTION_ENTER()
    a490:	4b40      	ldr	r3, [pc, #256]	; (a594 <grid_port_process_ui+0x498>)
    a492:	a80b      	add	r0, sp, #44	; 0x2c
    a494:	4798      	blx	r3
						if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a496:	f8da 3004 	ldr.w	r3, [sl, #4]
    a49a:	4423      	add	r3, r4
    a49c:	f44f 7286 	mov.w	r2, #268	; 0x10c
    a4a0:	68db      	ldr	r3, [r3, #12]
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a4a2:	442b      	add	r3, r5
						if (grid_ui_event_istriggered(&grid_ui_state.bank_list[i].element_list[j].event_list[k])){
    a4a4:	fb02 f909 	mul.w	r9, r2, r9
	if (eve->trigger == GRID_UI_STATUS_TRIGGERED){
    a4a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a4aa:	444b      	add	r3, r9
    a4ac:	7a5b      	ldrb	r3, [r3, #9]
    a4ae:	2b05      	cmp	r3, #5
    a4b0:	d11c      	bne.n	a4ec <grid_port_process_ui+0x3f0>
							uint32_t offset = grid_msg_body_get_length(&message); 
    a4b2:	4b39      	ldr	r3, [pc, #228]	; (a598 <grid_port_process_ui+0x49c>)
    a4b4:	a86f      	add	r0, sp, #444	; 0x1bc
    a4b6:	4798      	blx	r3
							message.body_length += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &message.body[offset]);
    a4b8:	f8da 3004 	ldr.w	r3, [sl, #4]
    a4bc:	4423      	add	r3, r4
    a4be:	3014      	adds	r0, #20
    a4c0:	68db      	ldr	r3, [r3, #12]
    a4c2:	442b      	add	r3, r5
    a4c4:	aa6f      	add	r2, sp, #444	; 0x1bc
    a4c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a4c8:	1811      	adds	r1, r2, r0
    a4ca:	eb03 0009 	add.w	r0, r3, r9
    a4ce:	4b33      	ldr	r3, [pc, #204]	; (a59c <grid_port_process_ui+0x4a0>)
    a4d0:	4798      	blx	r3
    a4d2:	9bd4      	ldr	r3, [sp, #848]	; 0x350
    a4d4:	4418      	add	r0, r3
							grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    a4d6:	f8da 3004 	ldr.w	r3, [sl, #4]
							message.body_length += grid_ui_event_render_action(&grid_ui_state.bank_list[i].element_list[j].event_list[k], &message.body[offset]);
    a4da:	90d4      	str	r0, [sp, #848]	; 0x350
							grid_ui_event_reset(&grid_ui_state.bank_list[i].element_list[j].event_list[k]);
    a4dc:	4423      	add	r3, r4
    a4de:	68db      	ldr	r3, [r3, #12]
	eve->trigger = GRID_UI_STATUS_READY;
    a4e0:	442b      	add	r3, r5
    a4e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a4e4:	4499      	add	r9, r3
    a4e6:	2304      	movs	r3, #4
    a4e8:	f889 3009 	strb.w	r3, [r9, #9]
						CRITICAL_SECTION_LEAVE()
    a4ec:	a80b      	add	r0, sp, #44	; 0x2c
    a4ee:	47d8      	blx	fp
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    a4f0:	f108 0801 	add.w	r8, r8, #1
    a4f4:	f8da 3004 	ldr.w	r3, [sl, #4]
    a4f8:	4423      	add	r3, r4
    a4fa:	fa5f f988 	uxtb.w	r9, r8
    a4fe:	68db      	ldr	r3, [r3, #12]
    a500:	442b      	add	r3, r5
    a502:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
    a506:	454b      	cmp	r3, r9
    a508:	d8bd      	bhi.n	a486 <grid_port_process_ui+0x38a>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a50a:	3601      	adds	r6, #1
    a50c:	f8da 3004 	ldr.w	r3, [sl, #4]
    a510:	4423      	add	r3, r4
    a512:	7a5a      	ldrb	r2, [r3, #9]
    a514:	b2f3      	uxtb	r3, r6
    a516:	429a      	cmp	r2, r3
    a518:	d906      	bls.n	a528 <grid_port_process_ui+0x42c>
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    a51a:	2564      	movs	r5, #100	; 0x64
						CRITICAL_SECTION_LEAVE()
    a51c:	f8df b094 	ldr.w	fp, [pc, #148]	; a5b4 <grid_port_process_ui+0x4b8>
				for (uint8_t k=0; k<grid_ui_state.bank_list[i].element_list[j].event_list_length; k++){ //j=1 because init is local
    a520:	435d      	muls	r5, r3
    a522:	f04f 0800 	mov.w	r8, #0
    a526:	e7e5      	b.n	a4f4 <grid_port_process_ui+0x3f8>
		for (uint8_t i=0; i<grid_ui_state.bank_list_length; i++){
    a528:	3701      	adds	r7, #1
    a52a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a52e:	b2fc      	uxtb	r4, r7
    a530:	42a3      	cmp	r3, r4
    a532:	d904      	bls.n	a53e <grid_port_process_ui+0x442>
			for (uint8_t j=0; j<grid_ui_state.bank_list[i].element_list_length; j++){
    a534:	0124      	lsls	r4, r4, #4
    a536:	2600      	movs	r6, #0
    a538:	e7e8      	b.n	a50c <grid_port_process_ui+0x410>
    a53a:	2700      	movs	r7, #0
    a53c:	e7f5      	b.n	a52a <grid_port_process_ui+0x42e>
		por->cooldown += 10;
    a53e:	9b01      	ldr	r3, [sp, #4]
    a540:	9a01      	ldr	r2, [sp, #4]
    a542:	681b      	ldr	r3, [r3, #0]
    a544:	330a      	adds	r3, #10
    a546:	6013      	str	r3, [r2, #0]
		grid_msg_packet_close(&message);
    a548:	a86f      	add	r0, sp, #444	; 0x1bc
    a54a:	4b15      	ldr	r3, [pc, #84]	; (a5a0 <grid_port_process_ui+0x4a4>)
    a54c:	4798      	blx	r3
		uint32_t length = grid_msg_packet_get_length(&message);
    a54e:	4b10      	ldr	r3, [pc, #64]	; (a590 <grid_port_process_ui+0x494>)
    a550:	a86f      	add	r0, sp, #444	; 0x1bc
    a552:	4798      	blx	r3
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    a554:	4b13      	ldr	r3, [pc, #76]	; (a5a4 <grid_port_process_ui+0x4a8>)
		uint32_t length = grid_msg_packet_get_length(&message);
    a556:	4604      	mov	r4, r0
		if (grid_buffer_write_init(&GRID_PORT_U.rx_buffer, length)){
    a558:	b281      	uxth	r1, r0
    a55a:	4813      	ldr	r0, [pc, #76]	; (a5a8 <grid_port_process_ui+0x4ac>)
    a55c:	4798      	blx	r3
    a55e:	b988      	cbnz	r0, a584 <grid_port_process_ui+0x488>
}
    a560:	f50d 7d57 	add.w	sp, sp, #860	; 0x35c
    a564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(&message, i));
    a568:	a86f      	add	r0, sp, #444	; 0x1bc
    a56a:	47b0      	blx	r6
    a56c:	4601      	mov	r1, r0
    a56e:	4638      	mov	r0, r7
    a570:	47c0      	blx	r8
			for(uint16_t i = 0; i<length; i++){
    a572:	b2a9      	uxth	r1, r5
    a574:	428c      	cmp	r4, r1
    a576:	f105 0501 	add.w	r5, r5, #1
    a57a:	d8f5      	bhi.n	a568 <grid_port_process_ui+0x46c>
			grid_buffer_write_acknowledge(&GRID_PORT_U.rx_buffer);
    a57c:	4b0b      	ldr	r3, [pc, #44]	; (a5ac <grid_port_process_ui+0x4b0>)
    a57e:	480a      	ldr	r0, [pc, #40]	; (a5a8 <grid_port_process_ui+0x4ac>)
    a580:	4798      	blx	r3
		}
    a582:	e7ed      	b.n	a560 <grid_port_process_ui+0x464>
				grid_buffer_write_character(&GRID_PORT_U.rx_buffer, grid_msg_packet_send_char(&message, i));
    a584:	4e0a      	ldr	r6, [pc, #40]	; (a5b0 <grid_port_process_ui+0x4b4>)
    a586:	4f08      	ldr	r7, [pc, #32]	; (a5a8 <grid_port_process_ui+0x4ac>)
    a588:	f8df 802c 	ldr.w	r8, [pc, #44]	; a5b8 <grid_port_process_ui+0x4bc>
    a58c:	2500      	movs	r5, #0
    a58e:	e7f0      	b.n	a572 <grid_port_process_ui+0x476>
    a590:	000084a1 	.word	0x000084a1
    a594:	00011679 	.word	0x00011679
    a598:	000084af 	.word	0x000084af
    a59c:	00009fa9 	.word	0x00009fa9
    a5a0:	00008671 	.word	0x00008671
    a5a4:	00004839 	.word	0x00004839
    a5a8:	20006b80 	.word	0x20006b80
    a5ac:	00004895 	.word	0x00004895
    a5b0:	0000863b 	.word	0x0000863b
    a5b4:	00011687 	.word	0x00011687
    a5b8:	00004875 	.word	0x00004875

0000a5bc <grid_ui_event_template_action>:

uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
    a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if (event_index == 255){
    a5c0:	29ff      	cmp	r1, #255	; 0xff
uint8_t grid_ui_event_template_action(struct grid_ui_element* ele, uint8_t event_index){
    a5c2:	b085      	sub	sp, #20
    a5c4:	4604      	mov	r4, r0
	if (event_index == 255){
    a5c6:	d01e      	beq.n	a606 <grid_ui_event_template_action+0x4a>
		
		return;
	}
	
	// TEMPLATE EVENT
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    a5c8:	f44f 7586 	mov.w	r5, #268	; 0x10c
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
				
			uint8_t error = 0;
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a5cc:	f8df 8220 	ldr.w	r8, [pc, #544]	; a7f0 <grid_ui_event_template_action+0x234>
			}
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
				parameter_value = grid_sys_state.mapmodestate;
			}
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    a5d0:	4e82      	ldr	r6, [pc, #520]	; (a7dc <grid_ui_event_template_action+0x220>)
    a5d2:	f8df 9220 	ldr.w	r9, [pc, #544]	; a7f4 <grid_ui_event_template_action+0x238>
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    a5d6:	434d      	muls	r5, r1
    a5d8:	2700      	movs	r7, #0
    a5da:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a5dc:	4428      	add	r0, r5
    a5de:	fa5f fb87 	uxtb.w	fp, r7
    a5e2:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
    a5e6:	455b      	cmp	r3, fp
    a5e8:	d811      	bhi.n	a60e <grid_ui_event_template_action+0x52>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
			
			uint8_t error = 0;
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a5ea:	f8df 8204 	ldr.w	r8, [pc, #516]	; a7f0 <grid_ui_event_template_action+0x234>
			}
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
				parameter_value = grid_sys_state.mapmodestate;
			}
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    a5ee:	4e7b      	ldr	r6, [pc, #492]	; (a7dc <grid_ui_event_template_action+0x220>)
    a5f0:	f8df 9200 	ldr.w	r9, [pc, #512]	; a7f4 <grid_ui_event_template_action+0x238>
    a5f4:	2700      	movs	r7, #0
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    a5f6:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a5f8:	4428      	add	r0, r5
    a5fa:	fa5f fb87 	uxtb.w	fp, r7
    a5fe:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    a602:	455b      	cmp	r3, fp
    a604:	d876      	bhi.n	a6f4 <grid_ui_event_template_action+0x138>
	
	
	
	
	
}
    a606:	2000      	movs	r0, #0
    a608:	b005      	add	sp, #20
    a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ele->event_list[event_index].event_parameter_list[i].group == 'P' || ele->event_list[event_index].event_parameter_list[i].group == 'B'){
    a60e:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
    a612:	4403      	add	r3, r0
    a614:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    a618:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    a61c:	2b50      	cmp	r3, #80	; 0x50
    a61e:	d001      	beq.n	a624 <grid_ui_event_template_action+0x68>
    a620:	2b42      	cmp	r3, #66	; 0x42
    a622:	d114      	bne.n	a64e <grid_ui_event_template_action+0x92>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    a624:	eb0a 030b 	add.w	r3, sl, fp
    a628:	4403      	add	r3, r0
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a62a:	3010      	adds	r0, #16
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    a62c:	f893 c031 	ldrb.w	ip, [r3, #49]	; 0x31
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    a630:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    a634:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
			uint8_t error = 0;
    a638:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].event_parameter_list[i].address];
    a63a:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    a63e:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a642:	f10d 030f 	add.w	r3, sp, #15
    a646:	9300      	str	r3, [sp, #0]
    a648:	f8dc 300c 	ldr.w	r3, [ip, #12]
    a64c:	47c0      	blx	r8
		if (ele->event_list[event_index].event_parameter_list[i].group == 'E'){
    a64e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a650:	eb0a 030b 	add.w	r3, sl, fp
    a654:	4428      	add	r0, r5
    a656:	4403      	add	r3, r0
    a658:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    a65c:	2a45      	cmp	r2, #69	; 0x45
    a65e:	d113      	bne.n	a688 <grid_ui_event_template_action+0xcc>
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].event_parameter_list[i].address];
    a660:	f893 c031 	ldrb.w	ip, [r3, #49]	; 0x31
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    a664:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    a668:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
			uint8_t error = 0;
    a66c:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].event_parameter_list[i].address];
    a66e:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    a672:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a676:	f10d 030f 	add.w	r3, sp, #15
    a67a:	9300      	str	r3, [sp, #0]
    a67c:	f8dc 3020 	ldr.w	r3, [ip, #32]
    a680:	3010      	adds	r0, #16
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a682:	47c0      	blx	r8
	for (uint8_t i=0; i<ele->event_list[event_index].event_parameter_count; i++){
    a684:	3701      	adds	r7, #1
    a686:	e7a8      	b.n	a5da <grid_ui_event_template_action+0x1e>
		else if (ele->event_list[event_index].event_parameter_list[i].group == 'Z'){
    a688:	2a5a      	cmp	r2, #90	; 0x5a
    a68a:	d1fb      	bne.n	a684 <grid_ui_event_template_action+0xc8>
			uint32_t parameter_offset = ele->event_list[event_index].event_parameter_list[i].offset;
    a68c:	f893 a033 	ldrb.w	sl, [r3, #51]	; 0x33
			uint8_t parameter_length = ele->event_list[event_index].event_parameter_list[i].length;
    a690:	f893 b032 	ldrb.w	fp, [r3, #50]	; 0x32
			if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NUMBER_ACTIVE){
    a694:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    a698:	b98b      	cbnz	r3, a6be <grid_ui_event_template_action+0x102>
				parameter_value = grid_sys_get_bank_num(&grid_sys_state);
    a69a:	4b51      	ldr	r3, [pc, #324]	; (a7e0 <grid_ui_event_template_action+0x224>)
    a69c:	4630      	mov	r0, r6
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    a69e:	4798      	blx	r3
			uint8_t error = 0;
    a6a0:	2300      	movs	r3, #0
    a6a2:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].event_string, parameter_offset, parameter_length, parameter_value, &error);
    a6a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a6a8:	eb03 0c05 	add.w	ip, r3, r5
    a6ac:	f10d 030f 	add.w	r3, sp, #15
    a6b0:	9300      	str	r3, [sp, #0]
    a6b2:	465a      	mov	r2, fp
    a6b4:	4603      	mov	r3, r0
    a6b6:	4651      	mov	r1, sl
    a6b8:	f10c 0010 	add.w	r0, ip, #16
    a6bc:	e7e1      	b.n	a682 <grid_ui_event_template_action+0xc6>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_RED){
    a6be:	2b01      	cmp	r3, #1
    a6c0:	d102      	bne.n	a6c8 <grid_ui_event_template_action+0x10c>
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    a6c2:	4b48      	ldr	r3, [pc, #288]	; (a7e4 <grid_ui_event_template_action+0x228>)
    a6c4:	4630      	mov	r0, r6
    a6c6:	e7ea      	b.n	a69e <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_GRE){
    a6c8:	2b02      	cmp	r3, #2
    a6ca:	d102      	bne.n	a6d2 <grid_ui_event_template_action+0x116>
				parameter_value = grid_sys_get_bank_gre(&grid_sys_state);
    a6cc:	4b46      	ldr	r3, [pc, #280]	; (a7e8 <grid_ui_event_template_action+0x22c>)
    a6ce:	4630      	mov	r0, r6
    a6d0:	e7e5      	b.n	a69e <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_BLU){
    a6d2:	2b03      	cmp	r3, #3
    a6d4:	d102      	bne.n	a6dc <grid_ui_event_template_action+0x120>
				parameter_value = grid_sys_get_bank_blu(&grid_sys_state);
    a6d6:	4b45      	ldr	r3, [pc, #276]	; (a7ec <grid_ui_event_template_action+0x230>)
    a6d8:	4630      	mov	r0, r6
    a6da:	e7e0      	b.n	a69e <grid_ui_event_template_action+0xe2>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
    a6dc:	2b04      	cmp	r3, #4
    a6de:	d102      	bne.n	a6e6 <grid_ui_event_template_action+0x12a>
				parameter_value = grid_sys_state.mapmodestate;
    a6e0:	7c30      	ldrb	r0, [r6, #16]
    a6e2:	b2c0      	uxtb	r0, r0
    a6e4:	e7dc      	b.n	a6a0 <grid_ui_event_template_action+0xe4>
			else if (ele->event_list[event_index].event_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
    a6e6:	2b05      	cmp	r3, #5
    a6e8:	d102      	bne.n	a6f0 <grid_ui_event_template_action+0x134>
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    a6ea:	4630      	mov	r0, r6
    a6ec:	47c8      	blx	r9
    a6ee:	e7d7      	b.n	a6a0 <grid_ui_event_template_action+0xe4>
			uint32_t parameter_value = 0;
    a6f0:	2000      	movs	r0, #0
    a6f2:	e7d5      	b.n	a6a0 <grid_ui_event_template_action+0xe4>
		if (ele->event_list[event_index].action_parameter_list[i].group == 'P' || ele->event_list[event_index].action_parameter_list[i].group == 'B'){
    a6f4:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
    a6f8:	4403      	add	r3, r0
    a6fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    a6fe:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
    a702:	2b50      	cmp	r3, #80	; 0x50
    a704:	d001      	beq.n	a70a <grid_ui_event_template_action+0x14e>
    a706:	2b42      	cmp	r3, #66	; 0x42
    a708:	d114      	bne.n	a734 <grid_ui_event_template_action+0x178>
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    a70a:	eb0a 030b 	add.w	r3, sl, fp
    a70e:	4403      	add	r3, r0
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a710:	3048      	adds	r0, #72	; 0x48
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    a712:	f893 c0c3 	ldrb.w	ip, [r3, #195]	; 0xc3
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    a716:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    a71a:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
			uint8_t error = 0;
    a71e:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[ele->event_list[event_index].action_parameter_list[i].address];
    a720:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    a724:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a728:	f10d 030f 	add.w	r3, sp, #15
    a72c:	9300      	str	r3, [sp, #0]
    a72e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    a732:	47c0      	blx	r8
		if (ele->event_list[event_index].action_parameter_list[i].group == 'E'){
    a734:	6e20      	ldr	r0, [r4, #96]	; 0x60
    a736:	eb0a 030b 	add.w	r3, sl, fp
    a73a:	4428      	add	r0, r5
    a73c:	4403      	add	r3, r0
    a73e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
    a742:	2a45      	cmp	r2, #69	; 0x45
    a744:	d113      	bne.n	a76e <grid_ui_event_template_action+0x1b2>
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].action_parameter_list[i].address];
    a746:	f893 c0c3 	ldrb.w	ip, [r3, #195]	; 0xc3
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    a74a:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    a74e:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
			uint8_t error = 0;
    a752:	2300      	movs	r3, #0
			uint32_t parameter_value =  ele->template_parameter_list[GRID_TEMPLATE_B_PARAMETER_LIST_LENGTH + ele->event_list[event_index].action_parameter_list[i].address];
    a754:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
			uint8_t error = 0;
    a758:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a75c:	f10d 030f 	add.w	r3, sp, #15
    a760:	9300      	str	r3, [sp, #0]
    a762:	f8dc 3020 	ldr.w	r3, [ip, #32]
    a766:	3048      	adds	r0, #72	; 0x48
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a768:	47c0      	blx	r8
	for (uint8_t i=0; i<ele->event_list[event_index].action_parameter_count; i++){
    a76a:	3701      	adds	r7, #1
    a76c:	e743      	b.n	a5f6 <grid_ui_event_template_action+0x3a>
		else if (ele->event_list[event_index].action_parameter_list[i].group == 'Z'){
    a76e:	2a5a      	cmp	r2, #90	; 0x5a
    a770:	d1fb      	bne.n	a76a <grid_ui_event_template_action+0x1ae>
			uint32_t parameter_offset = ele->event_list[event_index].action_parameter_list[i].offset;
    a772:	f893 a0c5 	ldrb.w	sl, [r3, #197]	; 0xc5
			uint8_t parameter_length = ele->event_list[event_index].action_parameter_list[i].length;
    a776:	f893 b0c4 	ldrb.w	fp, [r3, #196]	; 0xc4
			if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NUMBER_ACTIVE){
    a77a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
    a77e:	b98b      	cbnz	r3, a7a4 <grid_ui_event_template_action+0x1e8>
				parameter_value = grid_sys_get_bank_num(&grid_sys_state);
    a780:	4b17      	ldr	r3, [pc, #92]	; (a7e0 <grid_ui_event_template_action+0x224>)
    a782:	4630      	mov	r0, r6
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    a784:	4798      	blx	r3
			uint8_t error = 0;
    a786:	2300      	movs	r3, #0
    a788:	f88d 300f 	strb.w	r3, [sp, #15]
			grid_msg_set_parameter(ele->event_list[event_index].action_string, parameter_offset, parameter_length, parameter_value, &error);
    a78c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a78e:	eb03 0c05 	add.w	ip, r3, r5
    a792:	f10d 030f 	add.w	r3, sp, #15
    a796:	9300      	str	r3, [sp, #0]
    a798:	465a      	mov	r2, fp
    a79a:	4603      	mov	r3, r0
    a79c:	4651      	mov	r1, sl
    a79e:	f10c 0048 	add.w	r0, ip, #72	; 0x48
    a7a2:	e7e1      	b.n	a768 <grid_ui_event_template_action+0x1ac>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_RED){
    a7a4:	2b01      	cmp	r3, #1
    a7a6:	d102      	bne.n	a7ae <grid_ui_event_template_action+0x1f2>
				parameter_value = grid_sys_get_bank_red(&grid_sys_state);
    a7a8:	4b0e      	ldr	r3, [pc, #56]	; (a7e4 <grid_ui_event_template_action+0x228>)
    a7aa:	4630      	mov	r0, r6
    a7ac:	e7ea      	b.n	a784 <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_GRE){
    a7ae:	2b02      	cmp	r3, #2
    a7b0:	d102      	bne.n	a7b8 <grid_ui_event_template_action+0x1fc>
				parameter_value = grid_sys_get_bank_gre(&grid_sys_state);
    a7b2:	4b0d      	ldr	r3, [pc, #52]	; (a7e8 <grid_ui_event_template_action+0x22c>)
    a7b4:	4630      	mov	r0, r6
    a7b6:	e7e5      	b.n	a784 <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_COLOR_BLU){
    a7b8:	2b03      	cmp	r3, #3
    a7ba:	d102      	bne.n	a7c2 <grid_ui_event_template_action+0x206>
				parameter_value = grid_sys_get_bank_blu(&grid_sys_state);
    a7bc:	4b0b      	ldr	r3, [pc, #44]	; (a7ec <grid_ui_event_template_action+0x230>)
    a7be:	4630      	mov	r0, r6
    a7c0:	e7e0      	b.n	a784 <grid_ui_event_template_action+0x1c8>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_MAPMODE_STATE){
    a7c2:	2b04      	cmp	r3, #4
    a7c4:	d102      	bne.n	a7cc <grid_ui_event_template_action+0x210>
				parameter_value = grid_sys_state.mapmodestate;
    a7c6:	7c30      	ldrb	r0, [r6, #16]
    a7c8:	b2c0      	uxtb	r0, r0
    a7ca:	e7dc      	b.n	a786 <grid_ui_event_template_action+0x1ca>
			else if (ele->event_list[event_index].action_parameter_list[i].address == GRID_TEMPLATE_Z_PARAMETER_BANK_NEXT){
    a7cc:	2b05      	cmp	r3, #5
    a7ce:	d102      	bne.n	a7d6 <grid_ui_event_template_action+0x21a>
				parameter_value = grid_sys_get_bank_next(&grid_sys_state);
    a7d0:	4630      	mov	r0, r6
    a7d2:	47c8      	blx	r9
    a7d4:	e7d7      	b.n	a786 <grid_ui_event_template_action+0x1ca>
			uint32_t parameter_value = 0;
    a7d6:	2000      	movs	r0, #0
    a7d8:	e7d5      	b.n	a786 <grid_ui_event_template_action+0x1ca>
    a7da:	bf00      	nop
    a7dc:	20006fa4 	.word	0x20006fa4
    a7e0:	000096a3 	.word	0x000096a3
    a7e4:	000096ad 	.word	0x000096ad
    a7e8:	000096b3 	.word	0x000096b3
    a7ec:	000096b9 	.word	0x000096b9
    a7f0:	000099c5 	.word	0x000099c5
    a7f4:	000096bf 	.word	0x000096bf

0000a7f8 <grid_ui_event_register_actionstring>:
void grid_ui_event_register_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* action_string, uint32_t action_string_length){
    a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a7fc:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
void grid_ui_event_register_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* action_string, uint32_t action_string_length){
    a800:	460d      	mov	r5, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a802:	2400      	movs	r4, #0
	uint8_t event_index = 255;
    a804:	21ff      	movs	r1, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    a806:	f44f 7e86 	mov.w	lr, #268	; 0x10c
    a80a:	b2e7      	uxtb	r7, r4
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a80c:	45bc      	cmp	ip, r7
    a80e:	d839      	bhi.n	a884 <grid_ui_event_register_actionstring+0x8c>
	if (event_index == 255){
    a810:	29ff      	cmp	r1, #255	; 0xff
    a812:	d07a      	beq.n	a90a <grid_ui_event_register_actionstring+0x112>
		ele->event_list[event_index].action_string[i] = 0;
    a814:	6e04      	ldr	r4, [r0, #96]	; 0x60
    a816:	f44f 7586 	mov.w	r5, #268	; 0x10c
    a81a:	fb05 4401 	mla	r4, r5, r1, r4
    a81e:	f104 0c48 	add.w	ip, r4, #72	; 0x48
    a822:	4625      	mov	r5, r4
    a824:	f104 0ec0 	add.w	lr, r4, #192	; 0xc0
    a828:	4666      	mov	r6, ip
    a82a:	2700      	movs	r7, #0
    a82c:	f806 7b01 	strb.w	r7, [r6], #1
	for(uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    a830:	4576      	cmp	r6, lr
    a832:	d1fb      	bne.n	a82c <grid_ui_event_register_actionstring+0x34>
	ele->event_list[event_index].action_string_length = 0;
    a834:	6467      	str	r7, [r4, #68]	; 0x44
		ele->event_list[event_index].action_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    a836:	2600      	movs	r6, #0
    a838:	f104 0746 	add.w	r7, r4, #70	; 0x46
    a83c:	f885 60c1 	strb.w	r6, [r5, #193]	; 0xc1
		ele->event_list[event_index].action_parameter_list[i].address = 0;
    a840:	f885 60c3 	strb.w	r6, [r5, #195]	; 0xc3
		ele->event_list[event_index].action_parameter_list[i].group = 0;
    a844:	f885 60c2 	strb.w	r6, [r5, #194]	; 0xc2
		ele->event_list[event_index].action_parameter_list[i].length = 0;
    a848:	f885 60c4 	strb.w	r6, [r5, #196]	; 0xc4
		ele->event_list[event_index].action_parameter_list[i].offset = 0;
    a84c:	f885 60c5 	strb.w	r6, [r5, #197]	; 0xc5
	for(uint8_t i=0; i<GRID_UI_ACTION_PARAMETER_maxcount; i++){
    a850:	3505      	adds	r5, #5
    a852:	42bd      	cmp	r5, r7
    a854:	d1f2      	bne.n	a83c <grid_ui_event_register_actionstring+0x44>
	ele->event_list[event_index].action_parameter_count = 0;
    a856:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
	for (uint32_t i=0; i<action_string_length; i++){
    a85a:	2600      	movs	r6, #0
    a85c:	3a01      	subs	r2, #1
	uint8_t parameter_list_length = 0;
    a85e:	4635      	mov	r5, r6
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    a860:	f244 0909 	movw	r9, #16393	; 0x4009
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    a864:	f04f 0e01 	mov.w	lr, #1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].length = 2;
    a868:	f04f 0802 	mov.w	r8, #2
	for (uint32_t i=0; i<action_string_length; i++){
    a86c:	429e      	cmp	r6, r3
    a86e:	d112      	bne.n	a896 <grid_ui_event_register_actionstring+0x9e>
	ele->event_list[event_index].cfg_changed_flag = 1;
    a870:	2301      	movs	r3, #1
    a872:	f884 3107 	strb.w	r3, [r4, #263]	; 0x107
	ele->event_list[event_index].action_parameter_count = parameter_list_length;
    a876:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
	ele->event_list[event_index].action_string_length = action_string_length;
    a87a:	6466      	str	r6, [r4, #68]	; 0x44
	grid_ui_event_template_action(ele, event_index);
    a87c:	4b24      	ldr	r3, [pc, #144]	; (a910 <grid_ui_event_register_actionstring+0x118>)
}
    a87e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	grid_ui_event_template_action(ele, event_index);
    a882:	4718      	bx	r3
		if (ele->event_list[i].type == event_type){
    a884:	6e06      	ldr	r6, [r0, #96]	; 0x60
    a886:	fb0e 6604 	mla	r6, lr, r4, r6
    a88a:	3401      	adds	r4, #1
    a88c:	7ab6      	ldrb	r6, [r6, #10]
    a88e:	42ae      	cmp	r6, r5
    a890:	bf08      	it	eq
    a892:	4639      	moveq	r1, r7
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a894:	e7b9      	b.n	a80a <grid_ui_event_register_actionstring+0x12>
		if (ele->event_list[event_index].action_string[i] > 127){
    a896:	f992 a001 	ldrsb.w	sl, [r2, #1]
		ele->event_list[event_index].action_string[i] = action_string[i];
    a89a:	7857      	ldrb	r7, [r2, #1]
		if (ele->event_list[event_index].action_string[i] > 127){
    a89c:	f1ba 0f00 	cmp.w	sl, #0
			ele->event_list[event_index].action_string[i] -= 128;
    a8a0:	bfb8      	it	lt
    a8a2:	3f80      	sublt	r7, #128	; 0x80
    a8a4:	f88c 7000 	strb.w	r7, [ip]
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    a8a8:	f892 a000 	ldrb.w	sl, [r2]
    a8ac:	f1aa 0742 	sub.w	r7, sl, #66	; 0x42
    a8b0:	b2ff      	uxtb	r7, r7
    a8b2:	2f0e      	cmp	r7, #14
    a8b4:	d907      	bls.n	a8c6 <grid_ui_event_register_actionstring+0xce>
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a8b6:	f1ba 0f5a 	cmp.w	sl, #90	; 0x5a
    a8ba:	d023      	beq.n	a904 <grid_ui_event_register_actionstring+0x10c>
	for (uint32_t i=0; i<action_string_length; i++){
    a8bc:	3601      	adds	r6, #1
    a8be:	f10c 0c01 	add.w	ip, ip, #1
    a8c2:	3201      	adds	r2, #1
    a8c4:	e7d2      	b.n	a86c <grid_ui_event_register_actionstring+0x74>
		if ((action_string[i-1] == 'P' || action_string[i-1] == 'B' || action_string[i-1] == 'E') && (action_string[i]-'0') < 10){
    a8c6:	fa29 f707 	lsr.w	r7, r9, r7
    a8ca:	07ff      	lsls	r7, r7, #31
    a8cc:	d5f6      	bpl.n	a8bc <grid_ui_event_register_actionstring+0xc4>
    a8ce:	7857      	ldrb	r7, [r2, #1]
    a8d0:	2f39      	cmp	r7, #57	; 0x39
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a8d2:	d8f3      	bhi.n	a8bc <grid_ui_event_register_actionstring+0xc4>
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;		
    a8d4:	eb05 0785 	add.w	r7, r5, r5, lsl #2
    a8d8:	4427      	add	r7, r4
			parameter_list_length++;
    a8da:	3501      	adds	r5, #1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;		
    a8dc:	f887 e0c1 	strb.w	lr, [r7, #193]	; 0xc1
			ele->event_list[event_index].action_parameter_list[parameter_list_length].group = action_string[i-1];
    a8e0:	f892 a000 	ldrb.w	sl, [r2]
    a8e4:	f887 a0c2 	strb.w	sl, [r7, #194]	; 0xc2
			ele->event_list[event_index].action_parameter_list[parameter_list_length].address = (action_string[i]-'0');
    a8e8:	f892 a001 	ldrb.w	sl, [r2, #1]
			ele->event_list[event_index].action_parameter_list[parameter_list_length].length = 2;
    a8ec:	f887 80c4 	strb.w	r8, [r7, #196]	; 0xc4
			ele->event_list[event_index].action_parameter_list[parameter_list_length].address = (action_string[i]-'0');
    a8f0:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    a8f4:	f887 a0c3 	strb.w	sl, [r7, #195]	; 0xc3
			ele->event_list[event_index].action_parameter_list[parameter_list_length].offset = i-1;
    a8f8:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
    a8fc:	f887 a0c5 	strb.w	sl, [r7, #197]	; 0xc5
			parameter_list_length++;
    a900:	b2ed      	uxtb	r5, r5
    a902:	e7db      	b.n	a8bc <grid_ui_event_register_actionstring+0xc4>
		else if (action_string[i-1] == 'Z' && (action_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    a904:	7857      	ldrb	r7, [r2, #1]
    a906:	2f35      	cmp	r7, #53	; 0x35
    a908:	e7e3      	b.n	a8d2 <grid_ui_event_register_actionstring+0xda>
}
    a90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a90e:	bf00      	nop
    a910:	0000a5bd 	.word	0x0000a5bd

0000a914 <grid_ui_event_generate_actionstring>:
void grid_ui_event_generate_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    a914:	b5f0      	push	{r4, r5, r6, r7, lr}
    a916:	4606      	mov	r6, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a918:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
void grid_ui_event_generate_actionstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    a91c:	b09f      	sub	sp, #124	; 0x7c
    a91e:	460c      	mov	r4, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a920:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    a922:	25ff      	movs	r5, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    a924:	f44f 7786 	mov.w	r7, #268	; 0x10c
    a928:	b2d9      	uxtb	r1, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a92a:	4288      	cmp	r0, r1
    a92c:	d82c      	bhi.n	a988 <grid_ui_event_generate_actionstring+0x74>
	if (event_index == 255){
    a92e:	2dff      	cmp	r5, #255	; 0xff
    a930:	d028      	beq.n	a984 <grid_ui_event_generate_actionstring+0x70>
	uint8_t action_string[GRID_UI_ACTION_STRING_maxlength] = {0};
    a932:	4b36      	ldr	r3, [pc, #216]	; (aa0c <grid_ui_event_generate_actionstring+0xf8>)
    a934:	2100      	movs	r1, #0
    a936:	2274      	movs	r2, #116	; 0x74
    a938:	a801      	add	r0, sp, #4
    a93a:	9100      	str	r1, [sp, #0]
    a93c:	4798      	blx	r3
	if (ele->type == GRID_UI_ELEMENT_BUTTON){
    a93e:	7a73      	ldrb	r3, [r6, #9]
    a940:	2b02      	cmp	r3, #2
    a942:	d12e      	bne.n	a9a2 <grid_ui_event_generate_actionstring+0x8e>
		switch(event_type){
    a944:	2c04      	cmp	r4, #4
    a946:	d028      	beq.n	a99a <grid_ui_event_generate_actionstring+0x86>
    a948:	2c05      	cmp	r4, #5
    a94a:	d028      	beq.n	a99e <grid_ui_event_generate_actionstring+0x8a>
    a94c:	b91c      	cbnz	r4, a956 <grid_ui_event_generate_actionstring+0x42>
			case GRID_UI_EVENT_INIT:	sprintf(action_string, GRID_ACTIONSTRING_INIT_BUT);		break;
    a94e:	4930      	ldr	r1, [pc, #192]	; (aa10 <grid_ui_event_generate_actionstring+0xfc>)
			case GRID_UI_EVENT_DR:          sprintf(action_string, GRID_ACTIONSTRING_DR_ENC);	break;
    a950:	4b30      	ldr	r3, [pc, #192]	; (aa14 <grid_ui_event_generate_actionstring+0x100>)
    a952:	4668      	mov	r0, sp
    a954:	4798      	blx	r3
	if (strlen(action_string)){
    a956:	f89d 3000 	ldrb.w	r3, [sp]
    a95a:	b143      	cbz	r3, a96e <grid_ui_event_generate_actionstring+0x5a>
		grid_ui_event_register_actionstring(ele, event_type, action_string, strlen(action_string));
    a95c:	4b2e      	ldr	r3, [pc, #184]	; (aa18 <grid_ui_event_generate_actionstring+0x104>)
    a95e:	4668      	mov	r0, sp
    a960:	4798      	blx	r3
    a962:	4621      	mov	r1, r4
    a964:	4603      	mov	r3, r0
    a966:	4c2d      	ldr	r4, [pc, #180]	; (aa1c <grid_ui_event_generate_actionstring+0x108>)
    a968:	466a      	mov	r2, sp
    a96a:	4630      	mov	r0, r6
    a96c:	47a0      	blx	r4
	ele->event_list[event_index].cfg_changed_flag = 0;
    a96e:	6e33      	ldr	r3, [r6, #96]	; 0x60
    a970:	f44f 7286 	mov.w	r2, #268	; 0x10c
    a974:	fb02 3505 	mla	r5, r2, r5, r3
    a978:	2300      	movs	r3, #0
    a97a:	f885 3107 	strb.w	r3, [r5, #263]	; 0x107
	ele->event_list[event_index].cfg_default_flag = 1;	
    a97e:	2301      	movs	r3, #1
    a980:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
}
    a984:	b01f      	add	sp, #124	; 0x7c
    a986:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ele->event_list[i].type == event_type){
    a988:	6e32      	ldr	r2, [r6, #96]	; 0x60
    a98a:	fb07 2203 	mla	r2, r7, r3, r2
    a98e:	3301      	adds	r3, #1
    a990:	7a92      	ldrb	r2, [r2, #10]
    a992:	42a2      	cmp	r2, r4
    a994:	bf08      	it	eq
    a996:	460d      	moveq	r5, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    a998:	e7c6      	b.n	a928 <grid_ui_event_generate_actionstring+0x14>
			case GRID_UI_EVENT_DP:		sprintf(action_string, GRID_ACTIONSTRING_DP_BUT);		break;
    a99a:	4921      	ldr	r1, [pc, #132]	; (aa20 <grid_ui_event_generate_actionstring+0x10c>)
    a99c:	e7d8      	b.n	a950 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DR:		sprintf(action_string, GRID_ACTIONSTRING_DR_BUT);		break;
    a99e:	4921      	ldr	r1, [pc, #132]	; (aa24 <grid_ui_event_generate_actionstring+0x110>)
    a9a0:	e7d6      	b.n	a950 <grid_ui_event_generate_actionstring+0x3c>
	else if (ele->type == GRID_UI_ELEMENT_POTENTIOMETER){
    a9a2:	2b01      	cmp	r3, #1
    a9a4:	d105      	bne.n	a9b2 <grid_ui_event_generate_actionstring+0x9e>
		switch(event_type){
    a9a6:	2c00      	cmp	r4, #0
    a9a8:	d0d1      	beq.n	a94e <grid_ui_event_generate_actionstring+0x3a>
    a9aa:	2c01      	cmp	r4, #1
    a9ac:	d1d3      	bne.n	a956 <grid_ui_event_generate_actionstring+0x42>
			case GRID_UI_EVENT_AVC7:	sprintf(action_string, GRID_ACTIONSTRING_AVC7_POT);		break;
    a9ae:	491e      	ldr	r1, [pc, #120]	; (aa28 <grid_ui_event_generate_actionstring+0x114>)
    a9b0:	e7ce      	b.n	a950 <grid_ui_event_generate_actionstring+0x3c>
	else if (ele->type == GRID_UI_ELEMENT_ENCODER){
    a9b2:	2b03      	cmp	r3, #3
    a9b4:	d1cf      	bne.n	a956 <grid_ui_event_generate_actionstring+0x42>
		switch(event_type){
    a9b6:	2c0d      	cmp	r4, #13
    a9b8:	d8cd      	bhi.n	a956 <grid_ui_event_generate_actionstring+0x42>
    a9ba:	a301      	add	r3, pc, #4	; (adr r3, a9c0 <grid_ui_event_generate_actionstring+0xac>)
    a9bc:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
    a9c0:	0000a9f9 	.word	0x0000a9f9
    a9c4:	0000a9fd 	.word	0x0000a9fd
    a9c8:	0000a957 	.word	0x0000a957
    a9cc:	0000a957 	.word	0x0000a957
    a9d0:	0000aa05 	.word	0x0000aa05
    a9d4:	0000aa09 	.word	0x0000aa09
    a9d8:	0000a957 	.word	0x0000a957
    a9dc:	0000a957 	.word	0x0000a957
    a9e0:	0000a957 	.word	0x0000a957
    a9e4:	0000a957 	.word	0x0000a957
    a9e8:	0000a957 	.word	0x0000a957
    a9ec:	0000a957 	.word	0x0000a957
    a9f0:	0000a957 	.word	0x0000a957
    a9f4:	0000aa01 	.word	0x0000aa01
			case GRID_UI_EVENT_INIT:        sprintf(action_string, GRID_ACTIONSTRING_INIT_ENC);	break;
    a9f8:	490c      	ldr	r1, [pc, #48]	; (aa2c <grid_ui_event_generate_actionstring+0x118>)
    a9fa:	e7a9      	b.n	a950 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_AVC7:        sprintf(action_string, GRID_ACTIONSTRING_AVC7_ENC);	break;
    a9fc:	490c      	ldr	r1, [pc, #48]	; (aa30 <grid_ui_event_generate_actionstring+0x11c>)
    a9fe:	e7a7      	b.n	a950 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_ENCPUSHROT:	sprintf(action_string, GRID_ACTIONSTRING_PUSHROT_ENC);	break;
    aa00:	490c      	ldr	r1, [pc, #48]	; (aa34 <grid_ui_event_generate_actionstring+0x120>)
    aa02:	e7a5      	b.n	a950 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DP:          sprintf(action_string, GRID_ACTIONSTRING_DP_ENC);	break;
    aa04:	490c      	ldr	r1, [pc, #48]	; (aa38 <grid_ui_event_generate_actionstring+0x124>)
    aa06:	e7a3      	b.n	a950 <grid_ui_event_generate_actionstring+0x3c>
			case GRID_UI_EVENT_DR:          sprintf(action_string, GRID_ACTIONSTRING_DR_ENC);	break;
    aa08:	490c      	ldr	r1, [pc, #48]	; (aa3c <grid_ui_event_generate_actionstring+0x128>)
    aa0a:	e7a1      	b.n	a950 <grid_ui_event_generate_actionstring+0x3c>
    aa0c:	00012e05 	.word	0x00012e05
    aa10:	00015984 	.word	0x00015984
    aa14:	000138bd 	.word	0x000138bd
    aa18:	00013981 	.word	0x00013981
    aa1c:	0000a7f9 	.word	0x0000a7f9
    aa20:	00015995 	.word	0x00015995
    aa24:	000159b0 	.word	0x000159b0
    aa28:	000159cb 	.word	0x000159cb
    aa2c:	000159e6 	.word	0x000159e6
    aa30:	00015a07 	.word	0x00015a07
    aa34:	00015a22 	.word	0x00015a22
    aa38:	00015a4f 	.word	0x00015a4f
    aa3c:	00015a6a 	.word	0x00015a6a

0000aa40 <grid_ui_reinit>:
void grid_ui_reinit(struct grid_ui_model* ui){
    aa40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa44:	4606      	mov	r6, r0
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    aa46:	2700      	movs	r7, #0
    aa48:	7873      	ldrb	r3, [r6, #1]
    aa4a:	b2fc      	uxtb	r4, r7
    aa4c:	42a3      	cmp	r3, r4
    aa4e:	d805      	bhi.n	aa5c <grid_ui_reinit+0x1c>
	grid_sys_state.bank_active_changed = 1;
    aa50:	4b18      	ldr	r3, [pc, #96]	; (aab4 <grid_ui_reinit+0x74>)
    aa52:	2201      	movs	r2, #1
    aa54:	745a      	strb	r2, [r3, #17]
}
    aa56:	b003      	add	sp, #12
    aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct grid_ui_bank* bank = &ui->bank_list[i];
    aa5c:	6873      	ldr	r3, [r6, #4]
		for (uint8_t j=0; j<bank->element_list_length; j++){
    aa5e:	f04f 0800 	mov.w	r8, #0
		struct grid_ui_bank* bank = &ui->bank_list[i];
    aa62:	eb03 1404 	add.w	r4, r3, r4, lsl #4
			struct grid_ui_element* ele = &bank->element_list[j];
    aa66:	f04f 0b64 	mov.w	fp, #100	; 0x64
		for (uint8_t j=0; j<bank->element_list_length; j++){
    aa6a:	7a63      	ldrb	r3, [r4, #9]
    aa6c:	fa5f f088 	uxtb.w	r0, r8
    aa70:	4283      	cmp	r3, r0
    aa72:	d801      	bhi.n	aa78 <grid_ui_reinit+0x38>
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    aa74:	3701      	adds	r7, #1
    aa76:	e7e7      	b.n	aa48 <grid_ui_reinit+0x8>
			struct grid_ui_element* ele = &bank->element_list[j];
    aa78:	68e3      	ldr	r3, [r4, #12]
			for (uint8_t k=0; k<ele->event_list_length; k++){
    aa7a:	f04f 0900 	mov.w	r9, #0
			struct grid_ui_element* ele = &bank->element_list[j];
    aa7e:	fb0b 3000 	mla	r0, fp, r0, r3
				struct grid_ui_event* eve = &ele->event_list[k];
    aa82:	f44f 7a86 	mov.w	sl, #268	; 0x10c
			for (uint8_t k=0; k<ele->event_list_length; k++){
    aa86:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    aa8a:	fa5f f589 	uxtb.w	r5, r9
    aa8e:	42a9      	cmp	r1, r5
    aa90:	d802      	bhi.n	aa98 <grid_ui_reinit+0x58>
		for (uint8_t j=0; j<bank->element_list_length; j++){
    aa92:	f108 0801 	add.w	r8, r8, #1
    aa96:	e7e8      	b.n	aa6a <grid_ui_reinit+0x2a>
				struct grid_ui_event* eve = &ele->event_list[k];
    aa98:	6e01      	ldr	r1, [r0, #96]	; 0x60
				grid_ui_event_generate_actionstring(ele, eve->type);
    aa9a:	4b07      	ldr	r3, [pc, #28]	; (aab8 <grid_ui_reinit+0x78>)
    aa9c:	9001      	str	r0, [sp, #4]
				struct grid_ui_event* eve = &ele->event_list[k];
    aa9e:	fb0a 1505 	mla	r5, sl, r5, r1
				grid_ui_event_generate_actionstring(ele, eve->type);
    aaa2:	f109 0901 	add.w	r9, r9, #1
    aaa6:	7aa9      	ldrb	r1, [r5, #10]
    aaa8:	4798      	blx	r3
	eve->trigger = GRID_UI_STATUS_READY;
    aaaa:	2204      	movs	r2, #4
    aaac:	9801      	ldr	r0, [sp, #4]
    aaae:	726a      	strb	r2, [r5, #9]
			for (uint8_t k=0; k<ele->event_list_length; k++){
    aab0:	e7e9      	b.n	aa86 <grid_ui_reinit+0x46>
    aab2:	bf00      	nop
    aab4:	20006fa4 	.word	0x20006fa4
    aab8:	0000a915 	.word	0x0000a915

0000aabc <grid_ui_smart_trigger>:
void grid_ui_smart_trigger(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    aabc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aabe:	4605      	mov	r5, r0
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    aac0:	010f      	lsls	r7, r1, #4
void grid_ui_smart_trigger(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    aac2:	4608      	mov	r0, r1
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    aac4:	2164      	movs	r1, #100	; 0x64
    aac6:	fb02 f401 	mul.w	r4, r2, r1
    aaca:	686a      	ldr	r2, [r5, #4]
    aacc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    aad0:	4619      	mov	r1, r3
    aad2:	68d6      	ldr	r6, [r2, #12]
    aad4:	4b0b      	ldr	r3, [pc, #44]	; (ab04 <grid_ui_smart_trigger+0x48>)
    aad6:	4426      	add	r6, r4
    aad8:	4630      	mov	r0, r6
    aada:	4798      	blx	r3
	if (event_index == 255){
    aadc:	28ff      	cmp	r0, #255	; 0xff
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    aade:	4601      	mov	r1, r0
	if (event_index == 255){
    aae0:	d00d      	beq.n	aafe <grid_ui_smart_trigger+0x42>
	grid_ui_event_template_action(&mod->bank_list[bank].element_list[element], event_index);
    aae2:	9001      	str	r0, [sp, #4]
    aae4:	4b08      	ldr	r3, [pc, #32]	; (ab08 <grid_ui_smart_trigger+0x4c>)
    aae6:	4630      	mov	r0, r6
    aae8:	4798      	blx	r3
	grid_ui_event_trigger(&mod->bank_list[bank].element_list[element], event_index);
    aaea:	686b      	ldr	r3, [r5, #4]
    aaec:	9901      	ldr	r1, [sp, #4]
    aaee:	443b      	add	r3, r7
    aaf0:	68d8      	ldr	r0, [r3, #12]
    aaf2:	4b06      	ldr	r3, [pc, #24]	; (ab0c <grid_ui_smart_trigger+0x50>)
    aaf4:	4420      	add	r0, r4
}
    aaf6:	b003      	add	sp, #12
    aaf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	grid_ui_event_trigger(&mod->bank_list[bank].element_list[element], event_index);
    aafc:	4718      	bx	r3
}
    aafe:	b003      	add	sp, #12
    ab00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab02:	bf00      	nop
    ab04:	00009f55 	.word	0x00009f55
    ab08:	0000a5bd 	.word	0x0000a5bd
    ab0c:	00009f7f 	.word	0x00009f7f

0000ab10 <grid_ui_event_register_eventstring>:
void grid_ui_event_register_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length){
    ab10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab14:	4606      	mov	r6, r0
	grid_debug_print_text("Register Action");
    ab16:	4d4f      	ldr	r5, [pc, #316]	; (ac54 <grid_ui_event_register_eventstring+0x144>)
    ab18:	484f      	ldr	r0, [pc, #316]	; (ac58 <grid_ui_event_register_eventstring+0x148>)
void grid_ui_event_register_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type, uint8_t* event_string, uint32_t event_string_length){
    ab1a:	9301      	str	r3, [sp, #4]
    ab1c:	4614      	mov	r4, r2
    ab1e:	4689      	mov	r9, r1
	grid_debug_print_text("Register Action");
    ab20:	47a8      	blx	r5
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ab22:	f896 705c 	ldrb.w	r7, [r6, #92]	; 0x5c
    ab26:	46aa      	mov	sl, r5
    ab28:	2200      	movs	r2, #0
	uint8_t event_index = 255;
    ab2a:	23ff      	movs	r3, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    ab2c:	f44f 7586 	mov.w	r5, #268	; 0x10c
    ab30:	b2d0      	uxtb	r0, r2
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ab32:	4287      	cmp	r7, r0
    ab34:	d807      	bhi.n	ab46 <grid_ui_event_register_eventstring+0x36>
	if (event_index == 255){
    ab36:	2bff      	cmp	r3, #255	; 0xff
    ab38:	d10e      	bne.n	ab58 <grid_ui_event_register_eventstring+0x48>
		grid_debug_print_text("Event Not Found");
    ab3a:	4848      	ldr	r0, [pc, #288]	; (ac5c <grid_ui_event_register_eventstring+0x14c>)
    ab3c:	4653      	mov	r3, sl
}
    ab3e:	b003      	add	sp, #12
    ab40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		grid_debug_print_text("Event Not Found");
    ab44:	4718      	bx	r3
		if (ele->event_list[i].type == event_type){
    ab46:	6e31      	ldr	r1, [r6, #96]	; 0x60
    ab48:	fb05 1102 	mla	r1, r5, r2, r1
    ab4c:	3201      	adds	r2, #1
    ab4e:	7a89      	ldrb	r1, [r1, #10]
    ab50:	4549      	cmp	r1, r9
    ab52:	bf08      	it	eq
    ab54:	4603      	moveq	r3, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ab56:	e7eb      	b.n	ab30 <grid_ui_event_register_eventstring+0x20>
		ele->event_list[event_index].event_string[i] = 0;
    ab58:	f44f 7886 	mov.w	r8, #268	; 0x10c
    ab5c:	fb08 f803 	mul.w	r8, r8, r3
    ab60:	6e33      	ldr	r3, [r6, #96]	; 0x60
    ab62:	4443      	add	r3, r8
    ab64:	f103 0210 	add.w	r2, r3, #16
    ab68:	4619      	mov	r1, r3
    ab6a:	f103 052e 	add.w	r5, r3, #46	; 0x2e
    ab6e:	2000      	movs	r0, #0
    ab70:	f802 0b01 	strb.w	r0, [r2], #1
	for(uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    ab74:	42aa      	cmp	r2, r5
    ab76:	d1fb      	bne.n	ab70 <grid_ui_event_register_eventstring+0x60>
	ele->event_list[event_index].event_string_length = 0;
    ab78:	60d8      	str	r0, [r3, #12]
	for(uint8_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    ab7a:	f103 0214 	add.w	r2, r3, #20
		ele->event_list[event_index].event_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    ab7e:	2000      	movs	r0, #0
    ab80:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
		ele->event_list[event_index].event_parameter_list[i].address = 0;
    ab84:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
		ele->event_list[event_index].event_parameter_list[i].group = 0;
    ab88:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
		ele->event_list[event_index].event_parameter_list[i].length = 0;
    ab8c:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
		ele->event_list[event_index].event_parameter_list[i].offset = 0;
    ab90:	f881 0033 	strb.w	r0, [r1, #51]	; 0x33
	for(uint8_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    ab94:	3105      	adds	r1, #5
    ab96:	428a      	cmp	r2, r1
    ab98:	d1f2      	bne.n	ab80 <grid_ui_event_register_eventstring+0x70>
	ele->event_list[event_index].event_parameter_count = 0;
    ab9a:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
	for (uint32_t i=0; i<event_string_length; i++){
    ab9e:	2700      	movs	r7, #0
			grid_debug_print_text(" Escaped Char Found ");
    aba0:	482f      	ldr	r0, [pc, #188]	; (ac60 <grid_ui_event_register_eventstring+0x150>)
    aba2:	3c01      	subs	r4, #1
	uint8_t parameter_list_length = 0;
    aba4:	463d      	mov	r5, r7
		if ((event_string[i-1] == 'P' || event_string[i-1] == 'B' || event_string[i-1] == 'E') && (event_string[i]-'0') < 10){
    aba6:	f04f 0b01 	mov.w	fp, #1
    abaa:	f244 0209 	movw	r2, #16393	; 0x4009
	for (uint32_t i=0; i<event_string_length; i++){
    abae:	9901      	ldr	r1, [sp, #4]
    abb0:	6e33      	ldr	r3, [r6, #96]	; 0x60
    abb2:	428f      	cmp	r7, r1
    abb4:	4443      	add	r3, r8
    abb6:	d10d      	bne.n	abd4 <grid_ui_event_register_eventstring+0xc4>
	ele->event_list[event_index].event_parameter_count = parameter_list_length;
    abb8:	f883 502e 	strb.w	r5, [r3, #46]	; 0x2e
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    abbc:	6870      	ldr	r0, [r6, #4]
	ele->event_list[event_index].event_string_length = event_string_length;
    abbe:	60df      	str	r7, [r3, #12]
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    abc0:	4c28      	ldr	r4, [pc, #160]	; (ac64 <grid_ui_event_register_eventstring+0x154>)
    abc2:	7a01      	ldrb	r1, [r0, #8]
    abc4:	7a32      	ldrb	r2, [r6, #8]
    abc6:	6840      	ldr	r0, [r0, #4]
    abc8:	464b      	mov	r3, r9
    abca:	46a4      	mov	ip, r4
}
    abcc:	b003      	add	sp, #12
    abce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	grid_ui_smart_trigger(ele->parent->parent, ele->parent->index, ele->index, event_type);
    abd2:	4760      	bx	ip
		ele->event_list[event_index].event_string[i] = event_string[i];
    abd4:	7861      	ldrb	r1, [r4, #1]
    abd6:	443b      	add	r3, r7
    abd8:	7419      	strb	r1, [r3, #16]
		if (ele->event_list[event_index].event_string[i] > 127){
    abda:	060b      	lsls	r3, r1, #24
    abdc:	d509      	bpl.n	abf2 <grid_ui_event_register_eventstring+0xe2>
			grid_debug_print_text(" Escaped Char Found ");
    abde:	47d0      	blx	sl
			ele->event_list[event_index].event_string[i] -= 128;
    abe0:	6e33      	ldr	r3, [r6, #96]	; 0x60
    abe2:	481f      	ldr	r0, [pc, #124]	; (ac60 <grid_ui_event_register_eventstring+0x150>)
    abe4:	4443      	add	r3, r8
    abe6:	443b      	add	r3, r7
    abe8:	f244 0209 	movw	r2, #16393	; 0x4009
    abec:	7c19      	ldrb	r1, [r3, #16]
    abee:	3980      	subs	r1, #128	; 0x80
    abf0:	7419      	strb	r1, [r3, #16]
		if ((event_string[i-1] == 'P' || event_string[i-1] == 'B' || event_string[i-1] == 'E') && (event_string[i]-'0') < 10){
    abf2:	f894 c000 	ldrb.w	ip, [r4]
    abf6:	6e33      	ldr	r3, [r6, #96]	; 0x60
    abf8:	f1ac 0142 	sub.w	r1, ip, #66	; 0x42
    abfc:	b2c9      	uxtb	r1, r1
    abfe:	290e      	cmp	r1, #14
    ac00:	bf9d      	ittte	ls
    ac02:	fa22 f101 	lsrls.w	r1, r2, r1
    ac06:	43c9      	mvnls	r1, r1
    ac08:	f001 0101 	andls.w	r1, r1, #1
    ac0c:	2101      	movhi	r1, #1
    ac0e:	4443      	add	r3, r8
    ac10:	b9b9      	cbnz	r1, ac42 <grid_ui_event_register_eventstring+0x132>
    ac12:	7861      	ldrb	r1, [r4, #1]
    ac14:	2939      	cmp	r1, #57	; 0x39
    ac16:	d814      	bhi.n	ac42 <grid_ui_event_register_eventstring+0x132>
			ele->event_list[event_index].event_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    ac18:	eb05 0185 	add.w	r1, r5, r5, lsl #2
    ac1c:	440b      	add	r3, r1
			parameter_list_length++;
    ac1e:	3501      	adds	r5, #1
			ele->event_list[event_index].event_parameter_list[parameter_list_length].status = GRID_UI_STATUS_INITIALIZED;
    ac20:	f883 b02f 	strb.w	fp, [r3, #47]	; 0x2f
			ele->event_list[event_index].event_parameter_list[parameter_list_length].group = event_string[i-1];
    ac24:	7821      	ldrb	r1, [r4, #0]
    ac26:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
			ele->event_list[event_index].event_parameter_list[parameter_list_length].address = (event_string[i]-'0');
    ac2a:	7861      	ldrb	r1, [r4, #1]
    ac2c:	3930      	subs	r1, #48	; 0x30
    ac2e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
			ele->event_list[event_index].event_parameter_list[parameter_list_length].offset = i-1;
    ac32:	1e79      	subs	r1, r7, #1
    ac34:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
			ele->event_list[event_index].event_parameter_list[parameter_list_length].length = 2;
    ac38:	2102      	movs	r1, #2
    ac3a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
			parameter_list_length++;
    ac3e:	b2ed      	uxtb	r5, r5
    ac40:	e005      	b.n	ac4e <grid_ui_event_register_eventstring+0x13e>
		else if (event_string[i-1] == 'Z' && (event_string[i]-'0') < GRID_TEMPLATE_Z_PARAMETER_LIST_LENGTH){
    ac42:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
    ac46:	d102      	bne.n	ac4e <grid_ui_event_register_eventstring+0x13e>
    ac48:	7861      	ldrb	r1, [r4, #1]
    ac4a:	2935      	cmp	r1, #53	; 0x35
    ac4c:	d9e4      	bls.n	ac18 <grid_ui_event_register_eventstring+0x108>
	for (uint32_t i=0; i<event_string_length; i++){
    ac4e:	3701      	adds	r7, #1
    ac50:	3401      	adds	r4, #1
    ac52:	e7ac      	b.n	abae <grid_ui_event_register_eventstring+0x9e>
    ac54:	00009215 	.word	0x00009215
    ac58:	00015a85 	.word	0x00015a85
    ac5c:	00015a95 	.word	0x00015a95
    ac60:	00015aa5 	.word	0x00015aa5
    ac64:	0000aabd 	.word	0x0000aabd

0000ac68 <grid_ui_event_generate_eventstring>:
void grid_ui_event_generate_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    ac68:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ac6a:	f890 605c 	ldrb.w	r6, [r0, #92]	; 0x5c
void grid_ui_event_generate_eventstring(struct grid_ui_element* ele, enum grid_ui_event_t event_type){
    ac6e:	b089      	sub	sp, #36	; 0x24
    ac70:	4605      	mov	r5, r0
    ac72:	460c      	mov	r4, r1
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ac74:	2300      	movs	r3, #0
	uint8_t event_index = 255;
    ac76:	22ff      	movs	r2, #255	; 0xff
		if (ele->event_list[i].type == event_type){
    ac78:	f44f 7786 	mov.w	r7, #268	; 0x10c
    ac7c:	b2d8      	uxtb	r0, r3
	for(uint8_t i=0; i<ele->event_list_length; i++){
    ac7e:	4286      	cmp	r6, r0
    ac80:	d816      	bhi.n	acb0 <grid_ui_event_generate_eventstring+0x48>
	if (event_index == 255){
    ac82:	2aff      	cmp	r2, #255	; 0xff
    ac84:	d02c      	beq.n	ace0 <grid_ui_event_generate_eventstring+0x78>
	uint8_t event_string[GRID_UI_EVENT_STRING_maxlength] = {0};	
    ac86:	4b24      	ldr	r3, [pc, #144]	; (ad18 <grid_ui_event_generate_eventstring+0xb0>)
    ac88:	2100      	movs	r1, #0
    ac8a:	221a      	movs	r2, #26
    ac8c:	a801      	add	r0, sp, #4
    ac8e:	9100      	str	r1, [sp, #0]
    ac90:	4798      	blx	r3
	if (ele->type == GRID_UI_ELEMENT_BUTTON){
    ac92:	7a6b      	ldrb	r3, [r5, #9]
    ac94:	2b02      	cmp	r3, #2
    ac96:	d129      	bne.n	acec <grid_ui_event_generate_eventstring+0x84>
		if (event_type == GRID_UI_EVENT_INIT){
    ac98:	b99c      	cbnz	r4, acc2 <grid_ui_event_generate_eventstring+0x5a>
			sprintf(event_string, GRID_EVENTSTRING_INIT_BUT); // !!
    ac9a:	4920      	ldr	r1, [pc, #128]	; (ad1c <grid_ui_event_generate_eventstring+0xb4>)
			sprintf(event_string, GRID_EVENTSTRING_PUSHROT_ENC); // !!
    ac9c:	4b20      	ldr	r3, [pc, #128]	; (ad20 <grid_ui_event_generate_eventstring+0xb8>)
    ac9e:	4668      	mov	r0, sp
    aca0:	4798      	blx	r3
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    aca2:	4b20      	ldr	r3, [pc, #128]	; (ad24 <grid_ui_event_generate_eventstring+0xbc>)
    aca4:	4668      	mov	r0, sp
    aca6:	4798      	blx	r3
    aca8:	466a      	mov	r2, sp
    acaa:	4603      	mov	r3, r0
    acac:	4621      	mov	r1, r4
    acae:	e014      	b.n	acda <grid_ui_event_generate_eventstring+0x72>
		if (ele->event_list[i].type == event_type){
    acb0:	6e29      	ldr	r1, [r5, #96]	; 0x60
    acb2:	fb07 1103 	mla	r1, r7, r3, r1
    acb6:	3301      	adds	r3, #1
    acb8:	7a89      	ldrb	r1, [r1, #10]
    acba:	42a1      	cmp	r1, r4
    acbc:	bf08      	it	eq
    acbe:	4602      	moveq	r2, r0
	for(uint8_t i=0; i<ele->event_list_length; i++){
    acc0:	e7dc      	b.n	ac7c <grid_ui_event_generate_eventstring+0x14>
		else if (event_type == GRID_UI_EVENT_DP){
    acc2:	2c04      	cmp	r4, #4
    acc4:	d10e      	bne.n	ace4 <grid_ui_event_generate_eventstring+0x7c>
			sprintf(event_string, GRID_EVENTSTRING_DP_BUT); // !!
    acc6:	4918      	ldr	r1, [pc, #96]	; (ad28 <grid_ui_event_generate_eventstring+0xc0>)
    acc8:	4b15      	ldr	r3, [pc, #84]	; (ad20 <grid_ui_event_generate_eventstring+0xb8>)
    acca:	4668      	mov	r0, sp
    accc:	4798      	blx	r3
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    acce:	4b15      	ldr	r3, [pc, #84]	; (ad24 <grid_ui_event_generate_eventstring+0xbc>)
    acd0:	4668      	mov	r0, sp
    acd2:	4798      	blx	r3
    acd4:	466a      	mov	r2, sp
    acd6:	4603      	mov	r3, r0
    acd8:	2104      	movs	r1, #4
			grid_ui_event_register_eventstring(ele, event_type, event_string, strlen(event_string));
    acda:	4c14      	ldr	r4, [pc, #80]	; (ad2c <grid_ui_event_generate_eventstring+0xc4>)
    acdc:	4628      	mov	r0, r5
    acde:	47a0      	blx	r4
}
    ace0:	b009      	add	sp, #36	; 0x24
    ace2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (event_type == GRID_UI_EVENT_DR){
    ace4:	2c05      	cmp	r4, #5
    ace6:	d1fb      	bne.n	ace0 <grid_ui_event_generate_eventstring+0x78>
			sprintf(event_string, GRID_EVENTSTRING_DR_BUT); // !!
    ace8:	4911      	ldr	r1, [pc, #68]	; (ad30 <grid_ui_event_generate_eventstring+0xc8>)
    acea:	e7d7      	b.n	ac9c <grid_ui_event_generate_eventstring+0x34>
	else if (ele->type == GRID_UI_ELEMENT_POTENTIOMETER){
    acec:	2b01      	cmp	r3, #1
    acee:	d106      	bne.n	acfe <grid_ui_event_generate_eventstring+0x96>
		if (event_type == GRID_UI_EVENT_INIT){
    acf0:	b90c      	cbnz	r4, acf6 <grid_ui_event_generate_eventstring+0x8e>
			sprintf(event_string, GRID_EVENTSTRING_INIT_POT); // !!
    acf2:	4910      	ldr	r1, [pc, #64]	; (ad34 <grid_ui_event_generate_eventstring+0xcc>)
    acf4:	e7d2      	b.n	ac9c <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_AVC7){
    acf6:	2c01      	cmp	r4, #1
    acf8:	d1f2      	bne.n	ace0 <grid_ui_event_generate_eventstring+0x78>
			sprintf(event_string, GRID_EVENTSTRING_AVC7_POT); // !!
    acfa:	490f      	ldr	r1, [pc, #60]	; (ad38 <grid_ui_event_generate_eventstring+0xd0>)
    acfc:	e7ce      	b.n	ac9c <grid_ui_event_generate_eventstring+0x34>
	else if (ele->type == GRID_UI_ELEMENT_ENCODER){
    acfe:	2b03      	cmp	r3, #3
    ad00:	d1ee      	bne.n	ace0 <grid_ui_event_generate_eventstring+0x78>
		if (event_type == GRID_UI_EVENT_INIT){
    ad02:	b90c      	cbnz	r4, ad08 <grid_ui_event_generate_eventstring+0xa0>
			sprintf(event_string, GRID_EVENTSTRING_INIT_ENC); // !!
    ad04:	490d      	ldr	r1, [pc, #52]	; (ad3c <grid_ui_event_generate_eventstring+0xd4>)
    ad06:	e7c9      	b.n	ac9c <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_AVC7){
    ad08:	2c01      	cmp	r4, #1
    ad0a:	d101      	bne.n	ad10 <grid_ui_event_generate_eventstring+0xa8>
			sprintf(event_string, GRID_EVENTSTRING_AVC7_ENC); // !!
    ad0c:	490c      	ldr	r1, [pc, #48]	; (ad40 <grid_ui_event_generate_eventstring+0xd8>)
    ad0e:	e7c5      	b.n	ac9c <grid_ui_event_generate_eventstring+0x34>
		else if (event_type == GRID_UI_EVENT_ENCPUSHROT){
    ad10:	2c0d      	cmp	r4, #13
    ad12:	d1d6      	bne.n	acc2 <grid_ui_event_generate_eventstring+0x5a>
			sprintf(event_string, GRID_EVENTSTRING_PUSHROT_ENC); // !!
    ad14:	490b      	ldr	r1, [pc, #44]	; (ad44 <grid_ui_event_generate_eventstring+0xdc>)
    ad16:	e7c1      	b.n	ac9c <grid_ui_event_generate_eventstring+0x34>
    ad18:	00012e05 	.word	0x00012e05
    ad1c:	00015aba 	.word	0x00015aba
    ad20:	000138bd 	.word	0x000138bd
    ad24:	00013981 	.word	0x00013981
    ad28:	00015ac9 	.word	0x00015ac9
    ad2c:	0000ab11 	.word	0x0000ab11
    ad30:	00015ad8 	.word	0x00015ad8
    ad34:	00015ae7 	.word	0x00015ae7
    ad38:	00015af6 	.word	0x00015af6
    ad3c:	00015b05 	.word	0x00015b05
    ad40:	00015b14 	.word	0x00015b14
    ad44:	00015b23 	.word	0x00015b23

0000ad48 <grid_ui_event_init>:
void grid_ui_event_init(struct grid_ui_element* parent, uint8_t index, enum grid_ui_event_t event_type){
    ad48:	b570      	push	{r4, r5, r6, lr}
	struct grid_ui_event* eve = &parent->event_list[index];
    ad4a:	f44f 7386 	mov.w	r3, #268	; 0x10c
    ad4e:	6e05      	ldr	r5, [r0, #96]	; 0x60
    ad50:	434b      	muls	r3, r1
    ad52:	18ec      	adds	r4, r5, r3
void grid_ui_event_init(struct grid_ui_element* parent, uint8_t index, enum grid_ui_event_t event_type){
    ad54:	4616      	mov	r6, r2
	eve->index = index;
    ad56:	7221      	strb	r1, [r4, #8]
	eve->cfg_changed_flag = 0;
    ad58:	2200      	movs	r2, #0
	eve->status = GRID_UI_STATUS_READY;
    ad5a:	2104      	movs	r1, #4
	eve->parent = parent;
    ad5c:	6060      	str	r0, [r4, #4]
	eve->cfg_changed_flag = 0;
    ad5e:	f884 2107 	strb.w	r2, [r4, #263]	; 0x107
	eve->type   = event_type;	
    ad62:	72a6      	strb	r6, [r4, #10]
	eve->status = GRID_UI_STATUS_READY;
    ad64:	54e9      	strb	r1, [r5, r3]
	for (uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    ad66:	f104 0110 	add.w	r1, r4, #16
    ad6a:	4623      	mov	r3, r4
    ad6c:	f104 052e 	add.w	r5, r4, #46	; 0x2e
		eve->event_string[i] = 0;
    ad70:	f801 2b01 	strb.w	r2, [r1], #1
	for (uint32_t i=0; i<GRID_UI_EVENT_STRING_maxlength; i++){
    ad74:	42a9      	cmp	r1, r5
    ad76:	d1fb      	bne.n	ad70 <grid_ui_event_init+0x28>
	eve->event_string_length = 0;
    ad78:	60e2      	str	r2, [r4, #12]
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    ad7a:	f104 0148 	add.w	r1, r4, #72	; 0x48
    ad7e:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
		eve->action_string[i] = 0;
    ad82:	2200      	movs	r2, #0
    ad84:	f801 2b01 	strb.w	r2, [r1], #1
	for (uint32_t i=0; i<GRID_UI_ACTION_STRING_maxlength; i++){
    ad88:	42a9      	cmp	r1, r5
    ad8a:	d1fb      	bne.n	ad84 <grid_ui_event_init+0x3c>
	eve->action_string_length = 0;
    ad8c:	6462      	str	r2, [r4, #68]	; 0x44
	eve->event_parameter_count = 0;
    ad8e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	for (uint32_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    ad92:	f104 0114 	add.w	r1, r4, #20
	eve->event_parameter_count = 0;
    ad96:	4625      	mov	r5, r4
		eve->event_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    ad98:	2200      	movs	r2, #0
    ad9a:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
		eve->event_parameter_list[i].address = 0;
    ad9e:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
		eve->event_parameter_list[i].offset = 0;
    ada2:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
		eve->event_parameter_list[i].length = 0;
    ada6:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
	for (uint32_t i=0; i<GRID_UI_EVENT_PARAMETER_maxcount; i++){
    adaa:	3505      	adds	r5, #5
    adac:	428d      	cmp	r5, r1
    adae:	d1f4      	bne.n	ad9a <grid_ui_event_init+0x52>
	eve->action_parameter_count = 0;
    adb0:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
		eve->action_parameter_list[i].status = GRID_UI_STATUS_UNDEFINED;
    adb4:	2500      	movs	r5, #0
    adb6:	f104 0246 	add.w	r2, r4, #70	; 0x46
    adba:	f883 50c1 	strb.w	r5, [r3, #193]	; 0xc1
		eve->action_parameter_list[i].address = 0;
    adbe:	f883 50c3 	strb.w	r5, [r3, #195]	; 0xc3
		eve->action_parameter_list[i].offset = 0;
    adc2:	f883 50c5 	strb.w	r5, [r3, #197]	; 0xc5
		eve->action_parameter_list[i].length = 0;
    adc6:	f883 50c4 	strb.w	r5, [r3, #196]	; 0xc4
	for (uint32_t i=0; i<GRID_UI_ACTION_PARAMETER_maxcount; i++){
    adca:	3305      	adds	r3, #5
    adcc:	429a      	cmp	r2, r3
    adce:	d1f4      	bne.n	adba <grid_ui_event_init+0x72>
	grid_ui_event_generate_eventstring(eve->parent, event_type);
    add0:	4b06      	ldr	r3, [pc, #24]	; (adec <grid_ui_event_init+0xa4>)
    add2:	4631      	mov	r1, r6
    add4:	4798      	blx	r3
	grid_ui_event_generate_actionstring(eve->parent, event_type);	
    add6:	4b06      	ldr	r3, [pc, #24]	; (adf0 <grid_ui_event_init+0xa8>)
    add8:	6860      	ldr	r0, [r4, #4]
    adda:	4631      	mov	r1, r6
    addc:	4798      	blx	r3
	eve->cfg_default_flag = 1;
    adde:	f240 1301 	movw	r3, #257	; 0x101
	eve->cfg_changed_flag = 0;
    ade2:	f884 5107 	strb.w	r5, [r4, #263]	; 0x107
	eve->cfg_default_flag = 1;
    ade6:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
}
    adea:	bd70      	pop	{r4, r5, r6, pc}
    adec:	0000ac69 	.word	0x0000ac69
    adf0:	0000a915 	.word	0x0000a915

0000adf4 <grid_ui_element_init>:
void grid_ui_element_init(struct grid_ui_bank* parent, uint8_t index, enum grid_ui_element_t element_type){
    adf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct grid_ui_element* ele = &parent->element_list[index];
    adf8:	2364      	movs	r3, #100	; 0x64
void grid_ui_element_init(struct grid_ui_bank* parent, uint8_t index, enum grid_ui_element_t element_type){
    adfa:	4615      	mov	r5, r2
	struct grid_ui_element* ele = &parent->element_list[index];
    adfc:	68c2      	ldr	r2, [r0, #12]
    adfe:	fb11 f303 	smulbb	r3, r1, r3
    ae02:	18d4      	adds	r4, r2, r3
	ele->index = index;
    ae04:	7221      	strb	r1, [r4, #8]
	ele->status = GRID_UI_STATUS_INITIALIZED;
    ae06:	2101      	movs	r1, #1
	ele->parent = parent;
    ae08:	6060      	str	r0, [r4, #4]
	ele->status = GRID_UI_STATUS_INITIALIZED;
    ae0a:	54d1      	strb	r1, [r2, r3]
	ele->type = element_type;
    ae0c:	7265      	strb	r5, [r4, #9]
	for(uint8_t i=0; i<GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH; i++){
    ae0e:	f104 030c 	add.w	r3, r4, #12
    ae12:	f104 025c 	add.w	r2, r4, #92	; 0x5c
		ele->template_parameter_list[i] = 0;
    ae16:	2100      	movs	r1, #0
    ae18:	f843 1b04 	str.w	r1, [r3], #4
	for(uint8_t i=0; i<GRID_TEMPLATE_UI_PARAMETER_LIST_LENGTH; i++){
    ae1c:	429a      	cmp	r2, r3
    ae1e:	d1fb      	bne.n	ae18 <grid_ui_element_init+0x24>
	if (element_type == GRID_UI_ELEMENT_SYSTEM){
    ae20:	bb1d      	cbnz	r5, ae6a <grid_ui_element_init+0x76>
		ele->event_list_length = 6;
    ae22:	2306      	movs	r3, #6
    ae24:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ae28:	f44f 60c9 	mov.w	r0, #1608	; 0x648
    ae2c:	4b34      	ldr	r3, [pc, #208]	; (af00 <grid_ui_element_init+0x10c>)
    ae2e:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ae30:	462a      	mov	r2, r5
    ae32:	4629      	mov	r1, r5
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ae34:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ae36:	4d33      	ldr	r5, [pc, #204]	; (af04 <grid_ui_element_init+0x110>)
    ae38:	4620      	mov	r0, r4
    ae3a:	47a8      	blx	r5
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_HEARTBEAT); // Heartbeat
    ae3c:	220c      	movs	r2, #12
    ae3e:	2101      	movs	r1, #1
    ae40:	4620      	mov	r0, r4
    ae42:	47a8      	blx	r5
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_MAPMODE_PRESS); // Mapmode press
    ae44:	2207      	movs	r2, #7
    ae46:	2102      	movs	r1, #2
    ae48:	4620      	mov	r0, r4
    ae4a:	47a8      	blx	r5
		grid_ui_event_init(ele, 3, GRID_UI_EVENT_MAPMODE_RELEASE); // Mapmode release
    ae4c:	2208      	movs	r2, #8
    ae4e:	2103      	movs	r1, #3
    ae50:	4620      	mov	r0, r4
    ae52:	47a8      	blx	r5
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_CFG_RESPONSE); //
    ae54:	2209      	movs	r2, #9
    ae56:	2104      	movs	r1, #4
    ae58:	4620      	mov	r0, r4
    ae5a:	47a8      	blx	r5
		grid_ui_event_init(ele, 5, GRID_UI_EVENT_CFG_REQUEST); //
    ae5c:	220a      	movs	r2, #10
    ae5e:	2105      	movs	r1, #5
    ae60:	4620      	mov	r0, r4
    ae62:	462b      	mov	r3, r5
}
    ae64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    ae68:	4718      	bx	r3
	else if (element_type == GRID_UI_ELEMENT_POTENTIOMETER){
    ae6a:	2d01      	cmp	r5, #1
    ae6c:	d111      	bne.n	ae92 <grid_ui_element_init+0x9e>
		ele->event_list_length = 2;
    ae6e:	2302      	movs	r3, #2
    ae70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ae74:	f44f 7006 	mov.w	r0, #536	; 0x218
    ae78:	4b21      	ldr	r3, [pc, #132]	; (af00 <grid_ui_element_init+0x10c>)
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ae7a:	4e22      	ldr	r6, [pc, #136]	; (af04 <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ae7c:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ae7e:	2200      	movs	r2, #0
    ae80:	4611      	mov	r1, r2
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ae82:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    ae84:	4620      	mov	r0, r4
    ae86:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    ae88:	462a      	mov	r2, r5
    ae8a:	4629      	mov	r1, r5
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    ae8c:	4620      	mov	r0, r4
    ae8e:	4633      	mov	r3, r6
    ae90:	e7e8      	b.n	ae64 <grid_ui_element_init+0x70>
	else if (element_type == GRID_UI_ELEMENT_BUTTON){
    ae92:	2d02      	cmp	r5, #2
    ae94:	d113      	bne.n	aebe <grid_ui_element_init+0xca>
		ele->event_list_length = 3;
    ae96:	2303      	movs	r3, #3
    ae98:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    ae9c:	f44f 7049 	mov.w	r0, #804	; 0x324
    aea0:	4b17      	ldr	r3, [pc, #92]	; (af00 <grid_ui_element_init+0x10c>)
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    aea2:	4e18      	ldr	r6, [pc, #96]	; (af04 <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    aea4:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    aea6:	2200      	movs	r2, #0
    aea8:	4611      	mov	r1, r2
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    aeaa:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    aeac:	4620      	mov	r0, r4
    aeae:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_DP);	// Press
    aeb0:	2204      	movs	r2, #4
    aeb2:	2101      	movs	r1, #1
    aeb4:	4620      	mov	r0, r4
    aeb6:	47b0      	blx	r6
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_DR);	// Release
    aeb8:	2205      	movs	r2, #5
    aeba:	4629      	mov	r1, r5
    aebc:	e7e6      	b.n	ae8c <grid_ui_element_init+0x98>
	else if (element_type == GRID_UI_ELEMENT_ENCODER){
    aebe:	2d03      	cmp	r5, #3
    aec0:	d11b      	bne.n	aefa <grid_ui_element_init+0x106>
		ele->event_list_length = 5;
    aec2:	2705      	movs	r7, #5
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    aec4:	4b0e      	ldr	r3, [pc, #56]	; (af00 <grid_ui_element_init+0x10c>)
		ele->event_list_length = 5;
    aec6:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    aeca:	f240 503c 	movw	r0, #1340	; 0x53c
    aece:	4798      	blx	r3
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    aed0:	2200      	movs	r2, #0
    aed2:	4e0c      	ldr	r6, [pc, #48]	; (af04 <grid_ui_element_init+0x110>)
		ele->event_list = malloc(ele->event_list_length*sizeof(struct grid_ui_event));
    aed4:	6620      	str	r0, [r4, #96]	; 0x60
		grid_ui_event_init(ele, 0, GRID_UI_EVENT_INIT); // Element Initialization Event
    aed6:	4611      	mov	r1, r2
    aed8:	4620      	mov	r0, r4
    aeda:	47b0      	blx	r6
		grid_ui_event_init(ele, 1, GRID_UI_EVENT_DP);	// Press
    aedc:	2204      	movs	r2, #4
    aede:	2101      	movs	r1, #1
    aee0:	4620      	mov	r0, r4
    aee2:	47b0      	blx	r6
		grid_ui_event_init(ele, 2, GRID_UI_EVENT_DR);	// Release
    aee4:	463a      	mov	r2, r7
    aee6:	2102      	movs	r1, #2
    aee8:	4620      	mov	r0, r4
    aeea:	47b0      	blx	r6
		grid_ui_event_init(ele, 3, GRID_UI_EVENT_AVC7); // Absolute Value Change (7bit)
    aeec:	2201      	movs	r2, #1
    aeee:	4629      	mov	r1, r5
    aef0:	4620      	mov	r0, r4
    aef2:	47b0      	blx	r6
		grid_ui_event_init(ele, 4, GRID_UI_EVENT_ENCPUSHROT); // Absolute Value Change (7bit)
    aef4:	220d      	movs	r2, #13
    aef6:	2104      	movs	r1, #4
    aef8:	e7c8      	b.n	ae8c <grid_ui_element_init+0x98>
}
    aefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aefe:	bf00      	nop
    af00:	00012cb1 	.word	0x00012cb1
    af04:	0000ad49 	.word	0x0000ad49

0000af08 <grid_ui_smart_trigger_local>:
void grid_ui_smart_trigger_local(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    af08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    af0a:	4605      	mov	r5, r0
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    af0c:	010f      	lsls	r7, r1, #4
void grid_ui_smart_trigger_local(struct grid_ui_model* mod, uint8_t bank, uint8_t element, enum grid_ui_event_t event){
    af0e:	4608      	mov	r0, r1
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    af10:	2164      	movs	r1, #100	; 0x64
    af12:	fb02 f401 	mul.w	r4, r2, r1
    af16:	686a      	ldr	r2, [r5, #4]
    af18:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    af1c:	4619      	mov	r1, r3
    af1e:	68d6      	ldr	r6, [r2, #12]
    af20:	4b0b      	ldr	r3, [pc, #44]	; (af50 <grid_ui_smart_trigger_local+0x48>)
    af22:	4426      	add	r6, r4
    af24:	4630      	mov	r0, r6
    af26:	4798      	blx	r3
	if (event_index == 255){
    af28:	28ff      	cmp	r0, #255	; 0xff
	uint8_t event_index = grid_ui_event_find(&mod->bank_list[bank].element_list[element], event);
    af2a:	4601      	mov	r1, r0
	if (event_index == 255){
    af2c:	d00d      	beq.n	af4a <grid_ui_smart_trigger_local+0x42>
	grid_ui_event_template_action(&mod->bank_list[bank].element_list[element], event_index);
    af2e:	9001      	str	r0, [sp, #4]
    af30:	4b08      	ldr	r3, [pc, #32]	; (af54 <grid_ui_smart_trigger_local+0x4c>)
    af32:	4630      	mov	r0, r6
    af34:	4798      	blx	r3
    grid_ui_event_trigger_local(&mod->bank_list[bank].element_list[element], event_index);
    af36:	686b      	ldr	r3, [r5, #4]
    af38:	9901      	ldr	r1, [sp, #4]
    af3a:	443b      	add	r3, r7
    af3c:	68d8      	ldr	r0, [r3, #12]
    af3e:	4b06      	ldr	r3, [pc, #24]	; (af58 <grid_ui_smart_trigger_local+0x50>)
    af40:	4420      	add	r0, r4
}
    af42:	b003      	add	sp, #12
    af44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    grid_ui_event_trigger_local(&mod->bank_list[bank].element_list[element], event_index);
    af48:	4718      	bx	r3
}
    af4a:	b003      	add	sp, #12
    af4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af4e:	bf00      	nop
    af50:	00009f55 	.word	0x00009f55
    af54:	0000a5bd 	.word	0x0000a5bd
    af58:	00009f93 	.word	0x00009f93

0000af5c <grid_ui_reinit_local>:
void grid_ui_reinit_local(struct grid_ui_model* ui){
    af5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af60:	4604      	mov	r4, r0
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    af62:	f04f 0800 	mov.w	r8, #0
    af66:	7863      	ldrb	r3, [r4, #1]
    af68:	fa5f f788 	uxtb.w	r7, r8
    af6c:	42bb      	cmp	r3, r7
    af6e:	d805      	bhi.n	af7c <grid_ui_reinit_local+0x20>
	grid_sys_state.bank_active_changed = 1;
    af70:	4b1d      	ldr	r3, [pc, #116]	; (afe8 <grid_ui_reinit_local+0x8c>)
    af72:	2201      	movs	r2, #1
    af74:	745a      	strb	r2, [r3, #17]
}
    af76:	b003      	add	sp, #12
    af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct grid_ui_bank* bank = &ui->bank_list[i];
    af7c:	6866      	ldr	r6, [r4, #4]
    af7e:	eb06 1307 	add.w	r3, r6, r7, lsl #4
    af82:	9300      	str	r3, [sp, #0]
		for (uint8_t j=0; j<bank->element_list_length; j++){
    af84:	f04f 0900 	mov.w	r9, #0
    af88:	9b00      	ldr	r3, [sp, #0]
    af8a:	7a5b      	ldrb	r3, [r3, #9]
    af8c:	fa5f fb89 	uxtb.w	fp, r9
    af90:	455b      	cmp	r3, fp
    af92:	d802      	bhi.n	af9a <grid_ui_reinit_local+0x3e>
	for(uint8_t i = 0; i<ui->bank_list_length; i++){
    af94:	f108 0801 	add.w	r8, r8, #1
    af98:	e7e5      	b.n	af66 <grid_ui_reinit_local+0xa>
			struct grid_ui_element* ele = &bank->element_list[j];
    af9a:	9b00      	ldr	r3, [sp, #0]
    af9c:	68db      	ldr	r3, [r3, #12]
    af9e:	2564      	movs	r5, #100	; 0x64
    afa0:	fb05 350b 	mla	r5, r5, fp, r3
			for (uint8_t k=0; k<ele->event_list_length; k++){
    afa4:	f04f 0a00 	mov.w	sl, #0
    afa8:	f895 105c 	ldrb.w	r1, [r5, #92]	; 0x5c
    afac:	fa5f f38a 	uxtb.w	r3, sl
    afb0:	4299      	cmp	r1, r3
    afb2:	d802      	bhi.n	afba <grid_ui_reinit_local+0x5e>
		for (uint8_t j=0; j<bank->element_list_length; j++){
    afb4:	f109 0901 	add.w	r9, r9, #1
    afb8:	e7e6      	b.n	af88 <grid_ui_reinit_local+0x2c>
				struct grid_ui_event* eve = &ele->event_list[k];
    afba:	6e29      	ldr	r1, [r5, #96]	; 0x60
                grid_ui_smart_trigger_local(ui, i, j, eve->type);
    afbc:	4e0b      	ldr	r6, [pc, #44]	; (afec <grid_ui_reinit_local+0x90>)
				struct grid_ui_event* eve = &ele->event_list[k];
    afbe:	f44f 7286 	mov.w	r2, #268	; 0x10c
    afc2:	fb02 1303 	mla	r3, r2, r3, r1
				grid_ui_event_generate_actionstring(ele, eve->type);
    afc6:	9301      	str	r3, [sp, #4]
    afc8:	7a99      	ldrb	r1, [r3, #10]
    afca:	4b09      	ldr	r3, [pc, #36]	; (aff0 <grid_ui_reinit_local+0x94>)
    afcc:	4628      	mov	r0, r5
    afce:	4798      	blx	r3
	eve->trigger = GRID_UI_STATUS_READY;
    afd0:	9b01      	ldr	r3, [sp, #4]
    afd2:	2104      	movs	r1, #4
    afd4:	7259      	strb	r1, [r3, #9]
                grid_ui_smart_trigger_local(ui, i, j, eve->type);
    afd6:	465a      	mov	r2, fp
    afd8:	7a9b      	ldrb	r3, [r3, #10]
    afda:	4639      	mov	r1, r7
    afdc:	4620      	mov	r0, r4
    afde:	47b0      	blx	r6
			for (uint8_t k=0; k<ele->event_list_length; k++){
    afe0:	f10a 0a01 	add.w	sl, sl, #1
    afe4:	e7e0      	b.n	afa8 <grid_ui_reinit_local+0x4c>
    afe6:	bf00      	nop
    afe8:	20006fa4 	.word	0x20006fa4
    afec:	0000af09 	.word	0x0000af09
    aff0:	0000a915 	.word	0x0000a915

0000aff4 <grid_usb_serial_bulkout_cb>:
	//grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	
	//cdcdf_acm_write(cdcdf_demo_buf, count); /* Echo data */
	return false;                           /* No error. */
}
    aff4:	2000      	movs	r0, #0
    aff6:	4770      	bx	lr

0000aff8 <grid_usb_serial_statechange_cb>:

//	cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS); /* Another read */
	return false;                                                                                 /* No error. */
}
static bool grid_usb_serial_statechange_cb(usb_cdc_control_signal_t state)
{
    aff8:	b513      	push	{r0, r1, r4, lr}
	
	//grid_sys_alert_set_alert(&grid_sys_state, 0,255,255,2,300);
	
	if (state.rs232.DTR || 1) {
		/* After connection the R/W callbacks can be registered */
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)grid_usb_serial_bulkout_cb);
    affa:	4c06      	ldr	r4, [pc, #24]	; (b014 <grid_usb_serial_statechange_cb+0x1c>)
{
    affc:	f8ad 0004 	strh.w	r0, [sp, #4]
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)grid_usb_serial_bulkout_cb);
    b000:	4905      	ldr	r1, [pc, #20]	; (b018 <grid_usb_serial_statechange_cb+0x20>)
    b002:	2000      	movs	r0, #0
    b004:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)grid_usb_serial_bulkin_cb);
    b006:	4905      	ldr	r1, [pc, #20]	; (b01c <grid_usb_serial_statechange_cb+0x24>)
    b008:	2001      	movs	r0, #1
    b00a:	47a0      	blx	r4
		/* Start Rx */
		//cdcdf_acm_read((uint8_t *)cdcdf_demo_buf, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);
	}
	return false; /* No error. */
}
    b00c:	2000      	movs	r0, #0
    b00e:	b002      	add	sp, #8
    b010:	bd10      	pop	{r4, pc}
    b012:	bf00      	nop
    b014:	0000bbc9 	.word	0x0000bbc9
    b018:	0000aff5 	.word	0x0000aff5
    b01c:	0000b071 	.word	0x0000b071

0000b020 <grid_usb_midi_bulkin_cb>:

	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
	return false;
}
static bool grid_usb_midi_bulkin_cb(const uint8_t ep, const enum usb_xfer_code rc, const uint32_t count)
{
    b020:	b513      	push	{r0, r1, r4, lr}

	grid_sys_alert_set_alert(&grid_sys_state, 255,0,255,2,300);
    b022:	2302      	movs	r3, #2
    b024:	f44f 7296 	mov.w	r2, #300	; 0x12c
    b028:	e9cd 3200 	strd	r3, r2, [sp]
    b02c:	23ff      	movs	r3, #255	; 0xff
    b02e:	4804      	ldr	r0, [pc, #16]	; (b040 <grid_usb_midi_bulkin_cb+0x20>)
    b030:	4c04      	ldr	r4, [pc, #16]	; (b044 <grid_usb_midi_bulkin_cb+0x24>)
    b032:	2200      	movs	r2, #0
    b034:	4619      	mov	r1, r3
    b036:	47a0      	blx	r4
	return false;
}
    b038:	2000      	movs	r0, #0
    b03a:	b002      	add	sp, #8
    b03c:	bd10      	pop	{r4, pc}
    b03e:	bf00      	nop
    b040:	20006fa4 	.word	0x20006fa4
    b044:	000097ab 	.word	0x000097ab

0000b048 <grid_usb_midi_bulkout_cb>:
{
    b048:	b513      	push	{r0, r1, r4, lr}
	grid_sys_alert_set_alert(&grid_sys_state, 255,255,0,2,300);
    b04a:	2302      	movs	r3, #2
    b04c:	f44f 7296 	mov.w	r2, #300	; 0x12c
    b050:	e9cd 3200 	strd	r3, r2, [sp]
    b054:	22ff      	movs	r2, #255	; 0xff
    b056:	4804      	ldr	r0, [pc, #16]	; (b068 <grid_usb_midi_bulkout_cb+0x20>)
    b058:	4c04      	ldr	r4, [pc, #16]	; (b06c <grid_usb_midi_bulkout_cb+0x24>)
    b05a:	2300      	movs	r3, #0
    b05c:	4611      	mov	r1, r2
    b05e:	47a0      	blx	r4
}
    b060:	2000      	movs	r0, #0
    b062:	b002      	add	sp, #8
    b064:	bd10      	pop	{r4, pc}
    b066:	bf00      	nop
    b068:	20006fa4 	.word	0x20006fa4
    b06c:	000097ab 	.word	0x000097ab

0000b070 <grid_usb_serial_bulkin_cb>:
    b070:	2000      	movs	r0, #0
    b072:	4770      	bx	lr

0000b074 <grid_usb_serial_init>:
	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)grid_usb_serial_statechange_cb);
    b074:	4901      	ldr	r1, [pc, #4]	; (b07c <grid_usb_serial_init+0x8>)
    b076:	4b02      	ldr	r3, [pc, #8]	; (b080 <grid_usb_serial_init+0xc>)
    b078:	2003      	movs	r0, #3
    b07a:	4718      	bx	r3
    b07c:	0000aff9 	.word	0x0000aff9
    b080:	0000bbc9 	.word	0x0000bbc9

0000b084 <grid_keyboard_cleanup>:
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
	
	uint8_t changed_flag = 0;
	
	// Remove all inactive (released) keys
	for(uint8_t i=0; i<kb->key_active_count; i++){
    b084:	2300      	movs	r3, #0
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
    b086:	b5f0      	push	{r4, r5, r6, r7, lr}
			
			changed_flag = 1;
			
			kb->key_list[i].ismodifier = 0;
			kb->key_list[i].ispressed = 0;
			kb->key_list[i].keycode = 255;	
    b088:	f04f 0cff 	mov.w	ip, #255	; 0xff
uint8_t grid_keyboard_cleanup(struct grid_keyboard_model* kb){
    b08c:	4604      	mov	r4, r0
			// Pop item, move each remaining after this forvard one index
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
				
				kb->key_list[j-1] = kb->key_list[j];
				
				kb->key_list[j].ismodifier = 0;
    b08e:	469e      	mov	lr, r3
	uint8_t changed_flag = 0;
    b090:	4618      	mov	r0, r3
	for(uint8_t i=0; i<kb->key_active_count; i++){
    b092:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
    b096:	429d      	cmp	r5, r3
    b098:	d800      	bhi.n	b09c <grid_keyboard_cleanup+0x18>
		// USB SEND
	}
	
	return changed_flag;
	
}
    b09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (kb->key_list[i].ispressed == false){
    b09c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    b0a0:	7d8f      	ldrb	r7, [r1, #22]
    b0a2:	b98f      	cbnz	r7, b0c8 <grid_keyboard_cleanup+0x44>
    b0a4:	1c5a      	adds	r2, r3, #1
    b0a6:	b2d6      	uxtb	r6, r2
			kb->key_list[i].ismodifier = 0;
    b0a8:	754f      	strb	r7, [r1, #21]
			kb->key_list[i].ispressed = 0;
    b0aa:	758f      	strb	r7, [r1, #22]
			kb->key_list[i].keycode = 255;	
    b0ac:	f881 c014 	strb.w	ip, [r1, #20]
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    b0b0:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
    b0b4:	42b5      	cmp	r5, r6
    b0b6:	f102 0208 	add.w	r2, r2, #8
    b0ba:	d108      	bne.n	b0ce <grid_keyboard_cleanup+0x4a>
			kb->key_active_count--;
    b0bc:	3d01      	subs	r5, #1
			i--; // Retest this index, because it now points to a new item
    b0be:	3b01      	subs	r3, #1
			kb->key_active_count--;
    b0c0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
			i--; // Retest this index, because it now points to a new item
    b0c4:	b2db      	uxtb	r3, r3
			changed_flag = 1;
    b0c6:	2001      	movs	r0, #1
	for(uint8_t i=0; i<kb->key_active_count; i++){
    b0c8:	3301      	adds	r3, #1
    b0ca:	b2db      	uxtb	r3, r3
    b0cc:	e7e1      	b.n	b092 <grid_keyboard_cleanup+0xe>
				kb->key_list[j-1] = kb->key_list[j];
    b0ce:	e9d2 0103 	ldrd	r0, r1, [r2, #12]
    b0d2:	1d17      	adds	r7, r2, #4
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    b0d4:	3601      	adds	r6, #1
				kb->key_list[j-1] = kb->key_list[j];
    b0d6:	e887 0003 	stmia.w	r7, {r0, r1}
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    b0da:	b2f6      	uxtb	r6, r6
				kb->key_list[j].ismodifier = 0;
    b0dc:	f882 e00d 	strb.w	lr, [r2, #13]
				kb->key_list[j].ispressed = 0;
    b0e0:	f882 e00e 	strb.w	lr, [r2, #14]
				kb->key_list[j].keycode = 255;
    b0e4:	f882 c00c 	strb.w	ip, [r2, #12]
			for (uint8_t j=i+1; j<kb->key_active_count; j++){
    b0e8:	e7e4      	b.n	b0b4 <grid_keyboard_cleanup+0x30>
	...

0000b0ec <grid_keyboard_keychange>:


uint8_t grid_keyboard_keychange(struct grid_keyboard_model* kb, struct grid_keyboard_event_desc* key){
    b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0f0:	4604      	mov	r4, r0
	uint8_t item_index = 255;
	uint8_t remove_flag = 0;
	uint8_t changed_flag = 0;
	

	grid_keyboard_cleanup(kb);
    b0f2:	f8df 814c 	ldr.w	r8, [pc, #332]	; b240 <grid_keyboard_keychange+0x154>
uint8_t grid_keyboard_keychange(struct grid_keyboard_model* kb, struct grid_keyboard_event_desc* key){
    b0f6:	b0ec      	sub	sp, #432	; 0x1b0
    b0f8:	460d      	mov	r5, r1
	grid_keyboard_cleanup(kb);
    b0fa:	47c0      	blx	r8
	

	for(uint8_t i=0; i<kb->key_active_count; i++){
    b0fc:	2200      	movs	r2, #0
    b0fe:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    b102:	4626      	mov	r6, r4
    b104:	4623      	mov	r3, r4
	uint8_t changed_flag = 0;
    b106:	4691      	mov	r9, r2
	uint8_t item_index = 255;
    b108:	27ff      	movs	r7, #255	; 0xff
				if (key->ispressed == true){
					// OK nothing to do here
				}
				else{
					// Release the damn key
					kb->key_list[i].ispressed = false;
    b10a:	4696      	mov	lr, r2
    b10c:	b2d1      	uxtb	r1, r2
	for(uint8_t i=0; i<kb->key_active_count; i++){
    b10e:	458c      	cmp	ip, r1
    b110:	d82e      	bhi.n	b170 <grid_keyboard_keychange+0x84>
		}
		
	}
	
	
	uint8_t print_happened = grid_keyboard_cleanup(kb);
    b112:	4620      	mov	r0, r4
    b114:	47c0      	blx	r8
	
	
	if (item_index == 255){
    b116:	2fff      	cmp	r7, #255	; 0xff
    b118:	d143      	bne.n	b1a2 <grid_keyboard_keychange+0xb6>
		
		// item not in list
		
		if (kb->key_active_count< GRID_KEYBOARD_KEY_maxcount){
    b11a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    b11e:	2b05      	cmp	r3, #5
    b120:	d83f      	bhi.n	b1a2 <grid_keyboard_keychange+0xb6>
			
			if (key->ispressed == true){
    b122:	78aa      	ldrb	r2, [r5, #2]
    b124:	2a01      	cmp	r2, #1
    b126:	d13c      	bne.n	b1a2 <grid_keyboard_keychange+0xb6>
				
				kb->key_list[kb->key_active_count] = *key;
    b128:	e895 0003 	ldmia.w	r5, {r0, r1}
    b12c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b130:	3214      	adds	r2, #20
				kb->key_active_count++;
    b132:	3301      	adds	r3, #1
				kb->key_list[kb->key_active_count] = *key;
    b134:	e882 0003 	stmia.w	r2, {r0, r1}
				kb->key_active_count++;
    b138:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		}
		
	}
	
	
	if (changed_flag == 1){
    b13c:	f104 0112 	add.w	r1, r4, #18
	uint8_t item_index = 255;
    b140:	4623      	mov	r3, r4
//		}
			
		
		for(uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++){
		
			kb->hid_key_array[i].b_modifier = kb->key_list[i].ismodifier;
    b142:	7d72      	ldrb	r2, [r6, #21]
    b144:	3a00      	subs	r2, #0
    b146:	bf18      	it	ne
    b148:	2201      	movne	r2, #1
    b14a:	705a      	strb	r2, [r3, #1]
			kb->hid_key_array[i].key_id = kb->key_list[i].keycode;
    b14c:	7d32      	ldrb	r2, [r6, #20]
    b14e:	701a      	strb	r2, [r3, #0]
			kb->hid_key_array[i].state = kb->key_list[i].ispressed;
    b150:	7db2      	ldrb	r2, [r6, #22]
    b152:	709a      	strb	r2, [r3, #2]
		for(uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++){
    b154:	3303      	adds	r3, #3
    b156:	428b      	cmp	r3, r1
    b158:	f106 0608 	add.w	r6, r6, #8
    b15c:	d1f1      	bne.n	b142 <grid_keyboard_keychange+0x56>
		
		}
        
        
        if (kb->isenabled){
    b15e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    b162:	b325      	cbz	r5, b1ae <grid_keyboard_keychange+0xc2>
            
            
    		hiddf_keyboard_keys_state_change(kb->hid_key_array, kb->key_active_count);    
    b164:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    b168:	4b2b      	ldr	r3, [pc, #172]	; (b218 <grid_keyboard_keychange+0x12c>)
    b16a:	4620      	mov	r0, r4
    b16c:	4798      	blx	r3
    b16e:	e01b      	b.n	b1a8 <grid_keyboard_keychange+0xbc>
		if (kb->key_list[i].keycode == key->keycode && kb->key_list[i].ismodifier == key->ismodifier){
    b170:	f893 a014 	ldrb.w	sl, [r3, #20]
    b174:	7828      	ldrb	r0, [r5, #0]
    b176:	4582      	cmp	sl, r0
    b178:	d111      	bne.n	b19e <grid_keyboard_keychange+0xb2>
    b17a:	f893 a015 	ldrb.w	sl, [r3, #21]
    b17e:	7868      	ldrb	r0, [r5, #1]
    b180:	4582      	cmp	sl, r0
    b182:	d10c      	bne.n	b19e <grid_keyboard_keychange+0xb2>
			if (kb->key_list[i].ispressed == true){
    b184:	7d98      	ldrb	r0, [r3, #22]
    b186:	2801      	cmp	r0, #1
    b188:	d105      	bne.n	b196 <grid_keyboard_keychange+0xaa>
				if (key->ispressed == true){
    b18a:	78af      	ldrb	r7, [r5, #2]
    b18c:	2f01      	cmp	r7, #1
    b18e:	d002      	beq.n	b196 <grid_keyboard_keychange+0xaa>
					kb->key_list[i].ispressed = false;
    b190:	f883 e016 	strb.w	lr, [r3, #22]
					changed_flag = 1;
    b194:	4681      	mov	r9, r0
	for(uint8_t i=0; i<kb->key_active_count; i++){
    b196:	3201      	adds	r2, #1
    b198:	3308      	adds	r3, #8
	uint8_t item_index = 255;
    b19a:	460f      	mov	r7, r1
    b19c:	e7b6      	b.n	b10c <grid_keyboard_keychange+0x20>
    b19e:	4639      	mov	r1, r7
    b1a0:	e7f9      	b.n	b196 <grid_keyboard_keychange+0xaa>
	if (changed_flag == 1){
    b1a2:	f1b9 0f00 	cmp.w	r9, #0
    b1a6:	d1c9      	bne.n	b13c <grid_keyboard_keychange+0x50>
		
		
		// USB SEND
	}
	
}
    b1a8:	b06c      	add	sp, #432	; 0x1b0
    b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            grid_msg_init(&response);
    b1ae:	a805      	add	r0, sp, #20
    b1b0:	4b1a      	ldr	r3, [pc, #104]	; (b21c <grid_keyboard_keychange+0x130>)
            grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    b1b2:	4e1b      	ldr	r6, [pc, #108]	; (b220 <grid_keyboard_keychange+0x134>)
            grid_msg_init(&response);
    b1b4:	4798      	blx	r3
            grid_msg_init_header(&response, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_POSITION, GRID_SYS_DEFAULT_ROTATION);
    b1b6:	227f      	movs	r2, #127	; 0x7f
    b1b8:	462b      	mov	r3, r5
    b1ba:	4611      	mov	r1, r2
    b1bc:	a805      	add	r0, sp, #20
    b1be:	47b0      	blx	r6
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    b1c0:	2303      	movs	r3, #3
    b1c2:	4918      	ldr	r1, [pc, #96]	; (b224 <grid_keyboard_keychange+0x138>)
    b1c4:	9300      	str	r3, [sp, #0]
    b1c6:	2202      	movs	r2, #2
    b1c8:	4e17      	ldr	r6, [pc, #92]	; (b228 <grid_keyboard_keychange+0x13c>)
            uint8_t response_payload[10] = {0};
    b1ca:	f8ad 5010 	strh.w	r5, [sp, #16]
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    b1ce:	2392      	movs	r3, #146	; 0x92
    b1d0:	a802      	add	r0, sp, #8
            uint8_t response_payload[10] = {0};
    b1d2:	e9cd 5502 	strd	r5, r5, [sp, #8]
            sprintf(response_payload, GRID_CLASS_HIDKEYSTATUS_frame);
    b1d6:	47b0      	blx	r6
            grid_msg_body_append_text(&response, response_payload, strlen(response_payload));
    b1d8:	4b14      	ldr	r3, [pc, #80]	; (b22c <grid_keyboard_keychange+0x140>)
    b1da:	a802      	add	r0, sp, #8
    b1dc:	4798      	blx	r3
    b1de:	a902      	add	r1, sp, #8
    b1e0:	4602      	mov	r2, r0
    b1e2:	4b13      	ldr	r3, [pc, #76]	; (b230 <grid_keyboard_keychange+0x144>)
    b1e4:	a805      	add	r0, sp, #20
    b1e6:	4798      	blx	r3
            grid_msg_text_set_parameter(&response, 0, GRID_CLASS_HIDKEYSTATUS_ISENABLED_offset, GRID_CLASS_HIDKEYSTATUS_ISENABLED_length, kb->isenabled);
    b1e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    b1ec:	9300      	str	r3, [sp, #0]
    b1ee:	4c11      	ldr	r4, [pc, #68]	; (b234 <grid_keyboard_keychange+0x148>)
    b1f0:	4629      	mov	r1, r5
    b1f2:	a805      	add	r0, sp, #20
    b1f4:	2302      	movs	r3, #2
    b1f6:	2205      	movs	r2, #5
    b1f8:	47a0      	blx	r4
            grid_msg_text_set_parameter(&response, 0, GRID_INSTR_offset, GRID_INSTR_length, GRID_INSTR_REPORT_code);
    b1fa:	230d      	movs	r3, #13
    b1fc:	9300      	str	r3, [sp, #0]
    b1fe:	2204      	movs	r2, #4
    b200:	4629      	mov	r1, r5
    b202:	a805      	add	r0, sp, #20
    b204:	2301      	movs	r3, #1
    b206:	47a0      	blx	r4
            grid_msg_packet_close(&response);
    b208:	4b0b      	ldr	r3, [pc, #44]	; (b238 <grid_keyboard_keychange+0x14c>)
    b20a:	a805      	add	r0, sp, #20
    b20c:	4798      	blx	r3
            grid_msg_packet_send_everywhere(&response);
    b20e:	4b0b      	ldr	r3, [pc, #44]	; (b23c <grid_keyboard_keychange+0x150>)
    b210:	a805      	add	r0, sp, #20
    b212:	4798      	blx	r3
    b214:	e7c8      	b.n	b1a8 <grid_keyboard_keychange+0xbc>
    b216:	bf00      	nop
    b218:	0000de59 	.word	0x0000de59
    b21c:	00008545 	.word	0x00008545
    b220:	00008579 	.word	0x00008579
    b224:	00015564 	.word	0x00015564
    b228:	000134b9 	.word	0x000134b9
    b22c:	00013981 	.word	0x00013981
    b230:	000084b5 	.word	0x000084b5
    b234:	00008529 	.word	0x00008529
    b238:	00008671 	.word	0x00008671
    b23c:	00008745 	.word	0x00008745
    b240:	0000b085 	.word	0x0000b085

0000b244 <grid_midi_buffer_init>:



void grid_midi_buffer_init(struct grid_midi_event_desc* buf, uint16_t length){
    b244:	b510      	push	{r4, lr}
	
	
	for (uint16_t i=0; i<length; i++)
    b246:	2300      	movs	r3, #0
	{
		buf[i].byte0 = 0;
    b248:	461a      	mov	r2, r3
	for (uint16_t i=0; i<length; i++)
    b24a:	b29c      	uxth	r4, r3
    b24c:	42a1      	cmp	r1, r4
    b24e:	f100 0004 	add.w	r0, r0, #4
    b252:	d800      	bhi.n	b256 <grid_midi_buffer_init+0x12>
		buf[i].byte1 = 0;
		buf[i].byte2 = 0;
		buf[i].byte3 = 0;
	}
	
}
    b254:	bd10      	pop	{r4, pc}
		buf[i].byte0 = 0;
    b256:	f800 2c04 	strb.w	r2, [r0, #-4]
		buf[i].byte1 = 0;
    b25a:	f800 2c03 	strb.w	r2, [r0, #-3]
		buf[i].byte2 = 0;
    b25e:	f800 2c02 	strb.w	r2, [r0, #-2]
		buf[i].byte3 = 0;
    b262:	f800 2c01 	strb.w	r2, [r0, #-1]
	for (uint16_t i=0; i<length; i++)
    b266:	3301      	adds	r3, #1
    b268:	e7ef      	b.n	b24a <grid_midi_buffer_init+0x6>
	...

0000b26c <grid_usb_midi_init>:
	grid_midi_tx_write_index = 0;
    b26c:	4b0a      	ldr	r3, [pc, #40]	; (b298 <grid_usb_midi_init+0x2c>)
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    b26e:	480b      	ldr	r0, [pc, #44]	; (b29c <grid_usb_midi_init+0x30>)
{
    b270:	b510      	push	{r4, lr}
	grid_midi_tx_write_index = 0;
    b272:	2400      	movs	r4, #0
    b274:	801c      	strh	r4, [r3, #0]
	grid_midi_tx_read_index = 0;
    b276:	4b0a      	ldr	r3, [pc, #40]	; (b2a0 <grid_usb_midi_init+0x34>)
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    b278:	f44f 7196 	mov.w	r1, #300	; 0x12c
	grid_midi_tx_read_index = 0;
    b27c:	801c      	strh	r4, [r3, #0]
	grid_midi_buffer_init(grid_midi_tx_buffer, GRID_MIDI_TX_BUFFER_length);
    b27e:	4b09      	ldr	r3, [pc, #36]	; (b2a4 <grid_usb_midi_init+0x38>)
    b280:	4798      	blx	r3
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_READ, (FUNC_PTR)grid_usb_midi_bulkout_cb);
    b282:	4620      	mov	r0, r4
    b284:	4c08      	ldr	r4, [pc, #32]	; (b2a8 <grid_usb_midi_init+0x3c>)
    b286:	4909      	ldr	r1, [pc, #36]	; (b2ac <grid_usb_midi_init+0x40>)
    b288:	47a0      	blx	r4
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_WRITE, (FUNC_PTR)grid_usb_midi_bulkin_cb);
    b28a:	4623      	mov	r3, r4
    b28c:	4908      	ldr	r1, [pc, #32]	; (b2b0 <grid_usb_midi_init+0x44>)
}
    b28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	audiodf_midi_register_callback(AUDIODF_MIDI_CB_WRITE, (FUNC_PTR)grid_usb_midi_bulkin_cb);
    b292:	2001      	movs	r0, #1
    b294:	4718      	bx	r3
    b296:	bf00      	nop
    b298:	20004040 	.word	0x20004040
    b29c:	2000b287 	.word	0x2000b287
    b2a0:	200081fc 	.word	0x200081fc
    b2a4:	0000b245 	.word	0x0000b245
    b2a8:	00004585 	.word	0x00004585
    b2ac:	0000b049 	.word	0x0000b049
    b2b0:	0000b021 	.word	0x0000b021

0000b2b4 <grid_midi_tx_push>:

uint8_t grid_midi_tx_push(struct grid_midi_event_desc midi_event){


	grid_midi_tx_buffer[grid_midi_tx_write_index] = midi_event;
    b2b4:	4907      	ldr	r1, [pc, #28]	; (b2d4 <grid_midi_tx_push+0x20>)
    b2b6:	4a08      	ldr	r2, [pc, #32]	; (b2d8 <grid_midi_tx_push+0x24>)
    b2b8:	880b      	ldrh	r3, [r1, #0]
    b2ba:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

	grid_midi_tx_write_index = (grid_midi_tx_write_index+1)%GRID_MIDI_TX_BUFFER_length;
    b2be:	f44f 7096 	mov.w	r0, #300	; 0x12c
    b2c2:	3301      	adds	r3, #1
uint8_t grid_midi_tx_push(struct grid_midi_event_desc midi_event){
    b2c4:	b082      	sub	sp, #8
	grid_midi_tx_write_index = (grid_midi_tx_write_index+1)%GRID_MIDI_TX_BUFFER_length;
    b2c6:	fbb3 f2f0 	udiv	r2, r3, r0
    b2ca:	fb00 3312 	mls	r3, r0, r2, r3
    b2ce:	800b      	strh	r3, [r1, #0]




}
    b2d0:	b002      	add	sp, #8
    b2d2:	4770      	bx	lr
    b2d4:	20004040 	.word	0x20004040
    b2d8:	2000b287 	.word	0x2000b287

0000b2dc <grid_midi_tx_pop>:

uint8_t grid_midi_tx_pop(){
    b2dc:	b538      	push	{r3, r4, r5, lr}

	if (grid_midi_tx_read_index != grid_midi_tx_write_index){
    b2de:	4c0f      	ldr	r4, [pc, #60]	; (b31c <grid_midi_tx_pop+0x40>)
    b2e0:	4b0f      	ldr	r3, [pc, #60]	; (b320 <grid_midi_tx_pop+0x44>)
    b2e2:	8822      	ldrh	r2, [r4, #0]
    b2e4:	881b      	ldrh	r3, [r3, #0]
    b2e6:	429a      	cmp	r2, r3
    b2e8:	d017      	beq.n	b31a <grid_midi_tx_pop+0x3e>
		
		if (audiodf_midi_write_status() != USB_BUSY){
    b2ea:	4b0e      	ldr	r3, [pc, #56]	; (b324 <grid_midi_tx_pop+0x48>)
    b2ec:	4798      	blx	r3
    b2ee:	2801      	cmp	r0, #1
    b2f0:	d013      	beq.n	b31a <grid_midi_tx_pop+0x3e>

			uint8_t byte0 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte0;
    b2f2:	8825      	ldrh	r5, [r4, #0]
			uint8_t byte1 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte1;
			uint8_t byte2 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte2;
			uint8_t byte3 = grid_midi_tx_buffer[grid_midi_tx_read_index].byte3;
    b2f4:	480c      	ldr	r0, [pc, #48]	; (b328 <grid_midi_tx_pop+0x4c>)
    b2f6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
			
			audiodf_midi_write(byte0, byte1, byte2, byte3);
    b2fa:	f810 0025 	ldrb.w	r0, [r0, r5, lsl #2]
    b2fe:	78cb      	ldrb	r3, [r1, #3]
    b300:	788a      	ldrb	r2, [r1, #2]
    b302:	4d0a      	ldr	r5, [pc, #40]	; (b32c <grid_midi_tx_pop+0x50>)
    b304:	7849      	ldrb	r1, [r1, #1]
    b306:	47a8      	blx	r5

			grid_midi_tx_read_index = (grid_midi_tx_read_index+1)%GRID_MIDI_TX_BUFFER_length;
    b308:	8823      	ldrh	r3, [r4, #0]
    b30a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    b30e:	3301      	adds	r3, #1
    b310:	fbb3 f2f1 	udiv	r2, r3, r1
    b314:	fb01 3312 	mls	r3, r1, r2, r3
    b318:	8023      	strh	r3, [r4, #0]

		}
		
	}

}
    b31a:	bd38      	pop	{r3, r4, r5, pc}
    b31c:	200081fc 	.word	0x200081fc
    b320:	20004040 	.word	0x20004040
    b324:	00004549 	.word	0x00004549
    b328:	2000b287 	.word	0x2000b287
    b32c:	00004521 	.word	0x00004521

0000b330 <grid_keyboard_buffer_init>:


void grid_keyboard_buffer_init(struct grid_keyboard_event_desc* buf, uint16_t length){
    b330:	b510      	push	{r4, lr}
	
	
	for (uint16_t i=0; i<length; i++)
    b332:	2300      	movs	r3, #0
	{
		buf[i].ismodifier = 0;
    b334:	461a      	mov	r2, r3
	for (uint16_t i=0; i<length; i++)
    b336:	b29c      	uxth	r4, r3
    b338:	42a1      	cmp	r1, r4
    b33a:	f100 0008 	add.w	r0, r0, #8
    b33e:	d800      	bhi.n	b342 <grid_keyboard_buffer_init+0x12>
		buf[i].keycode = 0;
		buf[i].ispressed = 0;
		buf[i].delay = 0;
	}
	
}
    b340:	bd10      	pop	{r4, pc}
		buf[i].ismodifier = 0;
    b342:	f800 2c07 	strb.w	r2, [r0, #-7]
		buf[i].keycode = 0;
    b346:	f800 2c08 	strb.w	r2, [r0, #-8]
		buf[i].ispressed = 0;
    b34a:	f800 2c06 	strb.w	r2, [r0, #-6]
		buf[i].delay = 0;
    b34e:	f840 2c04 	str.w	r2, [r0, #-4]
	for (uint16_t i=0; i<length; i++)
    b352:	3301      	adds	r3, #1
    b354:	e7ef      	b.n	b336 <grid_keyboard_buffer_init+0x6>
	...

0000b358 <grid_keyboard_init>:
void grid_keyboard_init(struct grid_keyboard_model* kb){
    b358:	b570      	push	{r4, r5, r6, lr}
    grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    b35a:	4b13      	ldr	r3, [pc, #76]	; (b3a8 <grid_keyboard_init+0x50>)
void grid_keyboard_init(struct grid_keyboard_model* kb){
    b35c:	4605      	mov	r5, r0
    grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    b35e:	4813      	ldr	r0, [pc, #76]	; (b3ac <grid_keyboard_init+0x54>)
    b360:	4798      	blx	r3
    b362:	4b13      	ldr	r3, [pc, #76]	; (b3b0 <grid_keyboard_init+0x58>)
    b364:	6018      	str	r0, [r3, #0]
    grid_keyboard_tx_write_index = 0;
    b366:	4b13      	ldr	r3, [pc, #76]	; (b3b4 <grid_keyboard_init+0x5c>)
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    b368:	4813      	ldr	r0, [pc, #76]	; (b3b8 <grid_keyboard_init+0x60>)
    grid_keyboard_tx_write_index = 0;
    b36a:	2400      	movs	r4, #0
    b36c:	801c      	strh	r4, [r3, #0]
	grid_keyboard_tx_read_index = 0;
    b36e:	4b13      	ldr	r3, [pc, #76]	; (b3bc <grid_keyboard_init+0x64>)
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    b370:	f44f 7196 	mov.w	r1, #300	; 0x12c
	grid_keyboard_tx_read_index = 0;
    b374:	801c      	strh	r4, [r3, #0]
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    b376:	4b12      	ldr	r3, [pc, #72]	; (b3c0 <grid_keyboard_init+0x68>)
    b378:	4798      	blx	r3
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    b37a:	f105 0612 	add.w	r6, r5, #18
    b37e:	462a      	mov	r2, r5
	grid_keyboard_buffer_init(grid_keyboard_tx_buffer, GRID_KEYBOARD_TX_BUFFER_length);
    b380:	4629      	mov	r1, r5
		kb->hid_key_array[i].b_modifier = false;
    b382:	4623      	mov	r3, r4
		kb->hid_key_array[i].key_id = 255;
    b384:	20ff      	movs	r0, #255	; 0xff
		kb->hid_key_array[i].b_modifier = false;
    b386:	7053      	strb	r3, [r2, #1]
		kb->hid_key_array[i].key_id = 255;
    b388:	7010      	strb	r0, [r2, #0]
		kb->hid_key_array[i].state = HID_KB_KEY_UP;
    b38a:	7093      	strb	r3, [r2, #2]
		kb->key_list[i].ismodifier = 0;
    b38c:	3203      	adds	r2, #3
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    b38e:	42b2      	cmp	r2, r6
		kb->key_list[i].ismodifier = 0;
    b390:	754b      	strb	r3, [r1, #21]
		kb->key_list[i].ispressed = 0;
    b392:	758b      	strb	r3, [r1, #22]
		kb->key_list[i].keycode = 255;
    b394:	7508      	strb	r0, [r1, #20]
	for (uint8_t i=0; i<GRID_KEYBOARD_KEY_maxcount; i++)
    b396:	f101 0108 	add.w	r1, r1, #8
    b39a:	d1f4      	bne.n	b386 <grid_keyboard_init+0x2e>
	kb->key_active_count = 0;
    b39c:	f44f 7380 	mov.w	r3, #256	; 0x100
    b3a0:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
}
    b3a4:	bd70      	pop	{r4, r5, r6, pc}
    b3a6:	bf00      	nop
    b3a8:	00009741 	.word	0x00009741
    b3ac:	20006fa4 	.word	0x20006fa4
    b3b0:	20014634 	.word	0x20014634
    b3b4:	20007054 	.word	0x20007054
    b3b8:	20007058 	.word	0x20007058
    b3bc:	20008248 	.word	0x20008248
    b3c0:	0000b331 	.word	0x0000b331

0000b3c4 <grid_keyboard_tx_push>:

uint8_t grid_keyboard_tx_push(struct grid_keyboard_event_desc keyboard_event){
    b3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b3c6:	466c      	mov	r4, sp
    b3c8:	e884 0003 	stmia.w	r4, {r0, r1}


	grid_keyboard_tx_buffer[grid_keyboard_tx_write_index] = keyboard_event;
    b3cc:	4d09      	ldr	r5, [pc, #36]	; (b3f4 <grid_keyboard_tx_push+0x30>)
    b3ce:	4a0a      	ldr	r2, [pc, #40]	; (b3f8 <grid_keyboard_tx_push+0x34>)
    b3d0:	882b      	ldrh	r3, [r5, #0]
    b3d2:	e894 0003 	ldmia.w	r4, {r0, r1}
    b3d6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b3da:	e882 0003 	stmia.w	r2, {r0, r1}

	grid_keyboard_tx_write_index = (grid_keyboard_tx_write_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    b3de:	f44f 7196 	mov.w	r1, #300	; 0x12c
    b3e2:	3301      	adds	r3, #1
    b3e4:	fbb3 f2f1 	udiv	r2, r3, r1
    b3e8:	fb01 3312 	mls	r3, r1, r2, r3
    b3ec:	802b      	strh	r3, [r5, #0]



}
    b3ee:	b003      	add	sp, #12
    b3f0:	bd30      	pop	{r4, r5, pc}
    b3f2:	bf00      	nop
    b3f4:	20007054 	.word	0x20007054
    b3f8:	20007058 	.word	0x20007058

0000b3fc <grid_keyboard_tx_pop>:

uint8_t grid_keyboard_tx_pop(){
    b3fc:	b573      	push	{r0, r1, r4, r5, r6, lr}

	if (grid_keyboard_tx_read_index != grid_keyboard_tx_write_index){
    b3fe:	4b17      	ldr	r3, [pc, #92]	; (b45c <grid_keyboard_tx_pop+0x60>)
    b400:	4c17      	ldr	r4, [pc, #92]	; (b460 <grid_keyboard_tx_pop+0x64>)
    b402:	881b      	ldrh	r3, [r3, #0]
    b404:	8822      	ldrh	r2, [r4, #0]
    b406:	429a      	cmp	r2, r3
    b408:	d026      	beq.n	b458 <grid_keyboard_tx_pop+0x5c>
		
        
        
        uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, grid_keyboard_tx_rtc_lasttimestamp);
    b40a:	4d16      	ldr	r5, [pc, #88]	; (b464 <grid_keyboard_tx_pop+0x68>)
    b40c:	4b16      	ldr	r3, [pc, #88]	; (b468 <grid_keyboard_tx_pop+0x6c>)
    b40e:	6829      	ldr	r1, [r5, #0]
    b410:	4816      	ldr	r0, [pc, #88]	; (b46c <grid_keyboard_tx_pop+0x70>)
    b412:	4798      	blx	r3
        
        
		if (elapsed > grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].delay*RTC1MS){
    b414:	8822      	ldrh	r2, [r4, #0]
    b416:	4b16      	ldr	r3, [pc, #88]	; (b470 <grid_keyboard_tx_pop+0x74>)
    b418:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    b41c:	684e      	ldr	r6, [r1, #4]
    b41e:	ebb0 1f06 	cmp.w	r0, r6, lsl #4
    b422:	d919      	bls.n	b458 <grid_keyboard_tx_pop+0x5c>
            
            struct grid_keyboard_event_desc key;
            
            key.ismodifier = grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ismodifier;
            key.keycode =    grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].keycode;
    b424:	f833 3032 	ldrh.w	r3, [r3, r2, lsl #3]
            key.ispressed =  grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ispressed;
    b428:	7889      	ldrb	r1, [r1, #2]
            key.keycode =    grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].keycode;
    b42a:	f8ad 3000 	strh.w	r3, [sp]
            key.delay = 0;
    b42e:	2300      	movs	r3, #0
            key.ispressed =  grid_keyboard_tx_buffer[grid_keyboard_tx_read_index].ispressed;
    b430:	f88d 1002 	strb.w	r1, [sp, #2]
            key.delay = 0;
    b434:	9301      	str	r3, [sp, #4]
            
                  
            //grid_sys_alert_set_alert(&grid_sys_state, 255, 255, 255, 0, 50);
            
            grid_keyboard_keychange(&grid_keyboard_state, &key);
    b436:	4669      	mov	r1, sp
    b438:	4b0e      	ldr	r3, [pc, #56]	; (b474 <grid_keyboard_tx_pop+0x78>)
    b43a:	480f      	ldr	r0, [pc, #60]	; (b478 <grid_keyboard_tx_pop+0x7c>)
    b43c:	4798      	blx	r3

			grid_keyboard_tx_read_index = (grid_keyboard_tx_read_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    b43e:	8823      	ldrh	r3, [r4, #0]
            
            grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    b440:	480a      	ldr	r0, [pc, #40]	; (b46c <grid_keyboard_tx_pop+0x70>)
			grid_keyboard_tx_read_index = (grid_keyboard_tx_read_index+1)%GRID_KEYBOARD_TX_BUFFER_length;
    b442:	f44f 7196 	mov.w	r1, #300	; 0x12c
    b446:	3301      	adds	r3, #1
    b448:	fbb3 f2f1 	udiv	r2, r3, r1
    b44c:	fb01 3312 	mls	r3, r1, r2, r3
    b450:	8023      	strh	r3, [r4, #0]
            grid_keyboard_tx_rtc_lasttimestamp = grid_sys_rtc_get_time(&grid_sys_state);
    b452:	4b0a      	ldr	r3, [pc, #40]	; (b47c <grid_keyboard_tx_pop+0x80>)
    b454:	4798      	blx	r3
    b456:	6028      	str	r0, [r5, #0]

		}
		
	}

}
    b458:	b002      	add	sp, #8
    b45a:	bd70      	pop	{r4, r5, r6, pc}
    b45c:	20007054 	.word	0x20007054
    b460:	20008248 	.word	0x20008248
    b464:	20014634 	.word	0x20014634
    b468:	00009745 	.word	0x00009745
    b46c:	20006fa4 	.word	0x20006fa4
    b470:	20007058 	.word	0x20007058
    b474:	0000b0ed 	.word	0x0000b0ed
    b478:	20008200 	.word	0x20008200
    b47c:	00009741 	.word	0x00009741

0000b480 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    b480:	b570      	push	{r4, r5, r6, lr}
    b482:	460d      	mov	r5, r1
    b484:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    b486:	4604      	mov	r4, r0
    b488:	b110      	cbz	r0, b490 <io_write+0x10>
    b48a:	1e08      	subs	r0, r1, #0
    b48c:	bf18      	it	ne
    b48e:	2001      	movne	r0, #1
    b490:	4905      	ldr	r1, [pc, #20]	; (b4a8 <io_write+0x28>)
    b492:	4b06      	ldr	r3, [pc, #24]	; (b4ac <io_write+0x2c>)
    b494:	2234      	movs	r2, #52	; 0x34
    b496:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    b498:	6823      	ldr	r3, [r4, #0]
    b49a:	4632      	mov	r2, r6
    b49c:	4629      	mov	r1, r5
    b49e:	4620      	mov	r0, r4
}
    b4a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->write(io_descr, buf, length);
    b4a4:	4718      	bx	r3
    b4a6:	bf00      	nop
    b4a8:	00015b44 	.word	0x00015b44
    b4ac:	0000d415 	.word	0x0000d415

0000b4b0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    b4b0:	b570      	push	{r4, r5, r6, lr}
    b4b2:	460d      	mov	r5, r1
    b4b4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    b4b6:	4604      	mov	r4, r0
    b4b8:	b110      	cbz	r0, b4c0 <io_read+0x10>
    b4ba:	1e08      	subs	r0, r1, #0
    b4bc:	bf18      	it	ne
    b4be:	2001      	movne	r0, #1
    b4c0:	4905      	ldr	r1, [pc, #20]	; (b4d8 <io_read+0x28>)
    b4c2:	4b06      	ldr	r3, [pc, #24]	; (b4dc <io_read+0x2c>)
    b4c4:	223d      	movs	r2, #61	; 0x3d
    b4c6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    b4c8:	6863      	ldr	r3, [r4, #4]
    b4ca:	4632      	mov	r2, r6
    b4cc:	4629      	mov	r1, r5
    b4ce:	4620      	mov	r0, r4
}
    b4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return io_descr->read(io_descr, buf, length);
    b4d4:	4718      	bx	r3
    b4d6:	bf00      	nop
    b4d8:	00015b44 	.word	0x00015b44
    b4dc:	0000d415 	.word	0x0000d415

0000b4e0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    b4e0:	b570      	push	{r4, r5, r6, lr}
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    b4e2:	4e07      	ldr	r6, [pc, #28]	; (b500 <stdio_io_init+0x20>)
    b4e4:	4d07      	ldr	r5, [pc, #28]	; (b504 <stdio_io_init+0x24>)
    b4e6:	6833      	ldr	r3, [r6, #0]
{
    b4e8:	4604      	mov	r4, r0
	setbuf(stdout, NULL);
    b4ea:	2100      	movs	r1, #0
    b4ec:	6898      	ldr	r0, [r3, #8]
    b4ee:	47a8      	blx	r5
	setbuf(stdin, NULL);
    b4f0:	6833      	ldr	r3, [r6, #0]
    b4f2:	2100      	movs	r1, #0
    b4f4:	6858      	ldr	r0, [r3, #4]
    b4f6:	47a8      	blx	r5
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    b4f8:	4b03      	ldr	r3, [pc, #12]	; (b508 <stdio_io_init+0x28>)
    b4fa:	601c      	str	r4, [r3, #0]
}
    b4fc:	bd70      	pop	{r4, r5, r6, pc}
    b4fe:	bf00      	nop
    b500:	20000548 	.word	0x20000548
    b504:	000131e5 	.word	0x000131e5
    b508:	20000810 	.word	0x20000810

0000b50c <stdio_io_read>:
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
	if (stdio_io == NULL) {
    b50c:	4a04      	ldr	r2, [pc, #16]	; (b520 <stdio_io_read+0x14>)
{
    b50e:	4603      	mov	r3, r0
	if (stdio_io == NULL) {
    b510:	6810      	ldr	r0, [r2, #0]
    b512:	b118      	cbz	r0, b51c <stdio_io_read+0x10>
		return 0;
	}
	return io_read(stdio_io, buf, len);
    b514:	b28a      	uxth	r2, r1
    b516:	4619      	mov	r1, r3
    b518:	4b02      	ldr	r3, [pc, #8]	; (b524 <stdio_io_read+0x18>)
    b51a:	4718      	bx	r3
}
    b51c:	4770      	bx	lr
    b51e:	bf00      	nop
    b520:	20000810 	.word	0x20000810
    b524:	0000b4b1 	.word	0x0000b4b1

0000b528 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
	if (stdio_io == NULL) {
    b528:	4a04      	ldr	r2, [pc, #16]	; (b53c <stdio_io_write+0x14>)
{
    b52a:	4603      	mov	r3, r0
	if (stdio_io == NULL) {
    b52c:	6810      	ldr	r0, [r2, #0]
    b52e:	b118      	cbz	r0, b538 <stdio_io_write+0x10>
		return 0;
	}
	return io_write(stdio_io, buf, len);
    b530:	b28a      	uxth	r2, r1
    b532:	4619      	mov	r1, r3
    b534:	4b02      	ldr	r3, [pc, #8]	; (b540 <stdio_io_write+0x18>)
    b536:	4718      	bx	r3
}
    b538:	4770      	bx	lr
    b53a:	bf00      	nop
    b53c:	20000810 	.word	0x20000810
    b540:	0000b481 	.word	0x0000b481

0000b544 <i2c_m_async_write>:

/**
 * \brief Async version of I2C I/O write
 */
static int32_t i2c_m_async_write(struct io_descriptor *const io, const uint8_t *buf, const uint16_t n)
{
    b544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct i2c_m_async_desc *i2c = CONTAINER_OF(io, struct i2c_m_async_desc, io);
	struct _i2c_m_msg        msg;
	int32_t                  ret;

	msg.addr   = i2c->slave_addr;
    b546:	8a83      	ldrh	r3, [r0, #20]
    b548:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
	msg.flags  = I2C_M_STOP;
    b54c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    b550:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
    b554:	9103      	str	r1, [sp, #12]

	/* start transfer then return */
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b556:	4b05      	ldr	r3, [pc, #20]	; (b56c <i2c_m_async_write+0x28>)
	msg.len    = n;
    b558:	9202      	str	r2, [sp, #8]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b55a:	a901      	add	r1, sp, #4
    b55c:	3828      	subs	r0, #40	; 0x28
{
    b55e:	4614      	mov	r4, r2
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b560:	4798      	blx	r3
		/* error occurred */
		return ret;
	}

	return (int32_t)n;
}
    b562:	2800      	cmp	r0, #0
    b564:	bf08      	it	eq
    b566:	4620      	moveq	r0, r4
    b568:	b004      	add	sp, #16
    b56a:	bd10      	pop	{r4, pc}
    b56c:	00010cd9 	.word	0x00010cd9

0000b570 <i2c_m_async_read>:
{
    b570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.addr   = i2c->slave_addr;
    b572:	8a83      	ldrh	r3, [r0, #20]
    b574:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    b578:	f248 0301 	movw	r3, #32769	; 0x8001
    b57c:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
    b580:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b582:	4b05      	ldr	r3, [pc, #20]	; (b598 <i2c_m_async_read+0x28>)
	msg.len    = n;
    b584:	9202      	str	r2, [sp, #8]
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b586:	a901      	add	r1, sp, #4
    b588:	3828      	subs	r0, #40	; 0x28
{
    b58a:	4614      	mov	r4, r2
	ret = _i2c_m_async_transfer(&i2c->device, &msg);
    b58c:	4798      	blx	r3
}
    b58e:	2800      	cmp	r0, #0
    b590:	bf08      	it	eq
    b592:	4620      	moveq	r0, r4
    b594:	b004      	add	sp, #16
    b596:	bd10      	pop	{r4, pc}
    b598:	00010cd9 	.word	0x00010cd9

0000b59c <i2c_tx_complete>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    b59c:	8842      	ldrh	r2, [r0, #2]
    b59e:	05d2      	lsls	r2, r2, #23
    b5a0:	d402      	bmi.n	b5a8 <i2c_tx_complete+0xc>
		if (i2c->i2c_cb.tx_complete) {
    b5a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b5a4:	b103      	cbz	r3, b5a8 <i2c_tx_complete+0xc>
			i2c->i2c_cb.tx_complete(i2c);
    b5a6:	4718      	bx	r3
}
    b5a8:	4770      	bx	lr

0000b5aa <i2c_rx_complete>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    b5aa:	8842      	ldrh	r2, [r0, #2]
    b5ac:	05d2      	lsls	r2, r2, #23
    b5ae:	d402      	bmi.n	b5b6 <i2c_rx_complete+0xc>
		if (i2c->i2c_cb.rx_complete) {
    b5b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b5b2:	b103      	cbz	r3, b5b6 <i2c_rx_complete+0xc>
			i2c->i2c_cb.rx_complete(i2c);
    b5b4:	4718      	bx	r3
}
    b5b6:	4770      	bx	lr

0000b5b8 <i2c_error>:
	if (!(i2c_dev->service.msg.flags & I2C_M_BUSY)) {
    b5b8:	8842      	ldrh	r2, [r0, #2]
    b5ba:	05d2      	lsls	r2, r2, #23
    b5bc:	d402      	bmi.n	b5c4 <i2c_error+0xc>
		if (i2c->i2c_cb.error) {
    b5be:	6b03      	ldr	r3, [r0, #48]	; 0x30
    b5c0:	b103      	cbz	r3, b5c4 <i2c_error+0xc>
			i2c->i2c_cb.error(i2c, error);
    b5c2:	4718      	bx	r3
}
    b5c4:	4770      	bx	lr
	...

0000b5c8 <i2c_m_async_init>:

/**
 * \brief Async version of i2c initialize
 */
int32_t i2c_m_async_init(struct i2c_m_async_desc *const i2c, void *const hw)
{
    b5c8:	b570      	push	{r4, r5, r6, lr}
	int32_t init_status;
	ASSERT(i2c);
    b5ca:	4604      	mov	r4, r0
    b5cc:	3800      	subs	r0, #0
{
    b5ce:	460d      	mov	r5, r1
	ASSERT(i2c);
    b5d0:	bf18      	it	ne
    b5d2:	2001      	movne	r0, #1
    b5d4:	490e      	ldr	r1, [pc, #56]	; (b610 <i2c_m_async_init+0x48>)
    b5d6:	4b0f      	ldr	r3, [pc, #60]	; (b614 <i2c_m_async_init+0x4c>)
    b5d8:	2289      	movs	r2, #137	; 0x89
    b5da:	4798      	blx	r3

	init_status = _i2c_m_async_init(&i2c->device, hw);
    b5dc:	4629      	mov	r1, r5
    b5de:	4b0e      	ldr	r3, [pc, #56]	; (b618 <i2c_m_async_init+0x50>)
    b5e0:	4620      	mov	r0, r4
    b5e2:	4798      	blx	r3
	if (init_status) {
    b5e4:	4605      	mov	r5, r0
    b5e6:	b980      	cbnz	r0, b60a <i2c_m_async_init+0x42>
		return init_status;
	}
	/* Init I/O */
	i2c->io.read  = i2c_m_async_read;
    b5e8:	4b0c      	ldr	r3, [pc, #48]	; (b61c <i2c_m_async_init+0x54>)
    b5ea:	62e3      	str	r3, [r4, #44]	; 0x2c
	i2c->io.write = i2c_m_async_write;
    b5ec:	4b0c      	ldr	r3, [pc, #48]	; (b620 <i2c_m_async_init+0x58>)

	/* Init callbacks */
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    b5ee:	4a0d      	ldr	r2, [pc, #52]	; (b624 <i2c_m_async_init+0x5c>)
    b5f0:	4e0d      	ldr	r6, [pc, #52]	; (b628 <i2c_m_async_init+0x60>)
	i2c->io.write = i2c_m_async_write;
    b5f2:	62a3      	str	r3, [r4, #40]	; 0x28
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_TX_COMPLETE, (FUNC_PTR)i2c_tx_complete);
    b5f4:	2101      	movs	r1, #1
    b5f6:	4620      	mov	r0, r4
    b5f8:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_RX_COMPLETE, (FUNC_PTR)i2c_rx_complete);
    b5fa:	4a0c      	ldr	r2, [pc, #48]	; (b62c <i2c_m_async_init+0x64>)
    b5fc:	2102      	movs	r1, #2
    b5fe:	4620      	mov	r0, r4
    b600:	47b0      	blx	r6
	_i2c_m_async_register_callback(&i2c->device, I2C_M_ASYNC_DEVICE_ERROR, (FUNC_PTR)i2c_error);
    b602:	4a0b      	ldr	r2, [pc, #44]	; (b630 <i2c_m_async_init+0x68>)
    b604:	4629      	mov	r1, r5
    b606:	4620      	mov	r0, r4
    b608:	47b0      	blx	r6

	return ERR_NONE;
}
    b60a:	4628      	mov	r0, r5
    b60c:	bd70      	pop	{r4, r5, r6, pc}
    b60e:	bf00      	nop
    b610:	00015b58 	.word	0x00015b58
    b614:	0000d415 	.word	0x0000d415
    b618:	00010c5d 	.word	0x00010c5d
    b61c:	0000b571 	.word	0x0000b571
    b620:	0000b545 	.word	0x0000b545
    b624:	0000b59d 	.word	0x0000b59d
    b628:	00010de1 	.word	0x00010de1
    b62c:	0000b5ab 	.word	0x0000b5ab
    b630:	0000b5b9 	.word	0x0000b5b9

0000b634 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    b634:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    b636:	4604      	mov	r4, r0
    b638:	b118      	cbz	r0, b642 <_wdt_init+0xe>
    b63a:	6800      	ldr	r0, [r0, #0]
    b63c:	3800      	subs	r0, #0
    b63e:	bf18      	it	ne
    b640:	2001      	movne	r0, #1
    b642:	4b12      	ldr	r3, [pc, #72]	; (b68c <_wdt_init+0x58>)
    b644:	4912      	ldr	r1, [pc, #72]	; (b690 <_wdt_init+0x5c>)
    b646:	2250      	movs	r2, #80	; 0x50
    b648:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    b64a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b64c:	689a      	ldr	r2, [r3, #8]
    b64e:	f012 0f0e 	tst.w	r2, #14
    b652:	d1fb      	bne.n	b64c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b654:	781a      	ldrb	r2, [r3, #0]
    b656:	09d2      	lsrs	r2, r2, #7
    b658:	d115      	bne.n	b686 <_wdt_init+0x52>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b65a:	689a      	ldr	r2, [r3, #8]
    b65c:	f012 0f0e 	tst.w	r2, #14
    b660:	d1fb      	bne.n	b65a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    b662:	781a      	ldrb	r2, [r3, #0]
    b664:	0792      	lsls	r2, r2, #30
    b666:	d40e      	bmi.n	b686 <_wdt_init+0x52>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    b668:	781a      	ldrb	r2, [r3, #0]
    b66a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    b66e:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    b670:	6898      	ldr	r0, [r3, #8]
    b672:	f010 000e 	ands.w	r0, r0, #14
    b676:	d1fb      	bne.n	b670 <_wdt_init+0x3c>

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    b678:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    b67a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    b67e:	f042 020b 	orr.w	r2, r2, #11
	((Wdt *)hw)->CONFIG.reg = tmp;
    b682:	705a      	strb	r2, [r3, #1]

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
	}

	return ERR_NONE;
}
    b684:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    b686:	f06f 0010 	mvn.w	r0, #16
    b68a:	e7fb      	b.n	b684 <_wdt_init+0x50>
    b68c:	0000d415 	.word	0x0000d415
    b690:	00015b75 	.word	0x00015b75

0000b694 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    b694:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b696:	4288      	cmp	r0, r1
    b698:	d301      	bcc.n	b69e <usb_find_desc+0xa>
		_desc_len_check();
    b69a:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    b69c:	bd10      	pop	{r4, pc}
		_desc_len_check();
    b69e:	7803      	ldrb	r3, [r0, #0]
    b6a0:	2b01      	cmp	r3, #1
    b6a2:	d9fa      	bls.n	b69a <usb_find_desc+0x6>
		if (type == usb_desc_type(desc)) {
    b6a4:	7844      	ldrb	r4, [r0, #1]
    b6a6:	4294      	cmp	r4, r2
    b6a8:	d0f8      	beq.n	b69c <usb_find_desc+0x8>
    b6aa:	4418      	add	r0, r3
    b6ac:	e7f3      	b.n	b696 <usb_find_desc+0x2>

0000b6ae <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    b6ae:	4288      	cmp	r0, r1
    b6b0:	d301      	bcc.n	b6b6 <usb_find_ep_desc+0x8>
		_desc_len_check();
    b6b2:	2000      	movs	r0, #0
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
}
    b6b4:	4770      	bx	lr
		_desc_len_check();
    b6b6:	7803      	ldrb	r3, [r0, #0]
    b6b8:	2b01      	cmp	r3, #1
    b6ba:	d9fa      	bls.n	b6b2 <usb_find_ep_desc+0x4>
	return desc[1];
    b6bc:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    b6be:	2a04      	cmp	r2, #4
    b6c0:	d0f7      	beq.n	b6b2 <usb_find_ep_desc+0x4>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    b6c2:	2a05      	cmp	r2, #5
    b6c4:	d0f6      	beq.n	b6b4 <usb_find_ep_desc+0x6>
	return (desc + usb_desc_len(desc));
    b6c6:	4418      	add	r0, r3
    b6c8:	e7f1      	b.n	b6ae <usb_find_ep_desc>
	...

0000b6cc <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    b6cc:	b538      	push	{r3, r4, r5, lr}
    b6ce:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b6d0:	4b0c      	ldr	r3, [pc, #48]	; (b704 <usb_find_cfg_desc+0x38>)
    b6d2:	2202      	movs	r2, #2
{
    b6d4:	460c      	mov	r4, r1
	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    b6d6:	4798      	blx	r3
	if (!desc) {
    b6d8:	b978      	cbnz	r0, b6fa <usb_find_cfg_desc+0x2e>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
}
    b6da:	bd38      	pop	{r3, r4, r5, pc}
		_desc_len_check();
    b6dc:	7803      	ldrb	r3, [r0, #0]
    b6de:	2b01      	cmp	r3, #1
    b6e0:	d90d      	bls.n	b6fe <usb_find_cfg_desc+0x32>
		if (desc[1] != USB_DT_CONFIG) {
    b6e2:	7843      	ldrb	r3, [r0, #1]
    b6e4:	2b02      	cmp	r3, #2
    b6e6:	d10a      	bne.n	b6fe <usb_find_cfg_desc+0x32>
		if (desc[5] == cfg_value) {
    b6e8:	7943      	ldrb	r3, [r0, #5]
    b6ea:	42ab      	cmp	r3, r5
    b6ec:	d0f5      	beq.n	b6da <usb_find_cfg_desc+0xe>
	return (ptr[0] + (ptr[1] << 8));
    b6ee:	78c2      	ldrb	r2, [r0, #3]
    b6f0:	7883      	ldrb	r3, [r0, #2]
    b6f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    b6f6:	fa10 f083 	uxtah	r0, r0, r3
	while (desc < eof) {
    b6fa:	42a0      	cmp	r0, r4
    b6fc:	d3ee      	bcc.n	b6dc <usb_find_cfg_desc+0x10>
		return NULL;
    b6fe:	2000      	movs	r0, #0
    b700:	e7eb      	b.n	b6da <usb_find_cfg_desc+0xe>
    b702:	bf00      	nop
    b704:	0000b695 	.word	0x0000b695

0000b708 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    b708:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b70a:	4e09      	ldr	r6, [pc, #36]	; (b730 <usb_find_str_desc+0x28>)
{
    b70c:	4615      	mov	r5, r2
	for (i = 0; desc < eof;) {
    b70e:	2400      	movs	r4, #0
    b710:	4288      	cmp	r0, r1
    b712:	d301      	bcc.n	b718 <usb_find_str_desc+0x10>
				return desc;
			}
			i++;
			desc = usb_desc_next(desc);
		} else {
			return NULL;
    b714:	2000      	movs	r0, #0
		}
	}
	return NULL;
}
    b716:	bd70      	pop	{r4, r5, r6, pc}
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    b718:	2203      	movs	r2, #3
    b71a:	47b0      	blx	r6
		if (desc) {
    b71c:	2800      	cmp	r0, #0
    b71e:	d0fa      	beq.n	b716 <usb_find_str_desc+0xe>
			_desc_len_check();
    b720:	7803      	ldrb	r3, [r0, #0]
    b722:	2b01      	cmp	r3, #1
    b724:	d9f6      	bls.n	b714 <usb_find_str_desc+0xc>
			if (i == str_index) {
    b726:	42ac      	cmp	r4, r5
    b728:	d0f5      	beq.n	b716 <usb_find_str_desc+0xe>
	return (desc + usb_desc_len(desc));
    b72a:	4418      	add	r0, r3
    b72c:	3401      	adds	r4, #1
    b72e:	e7ef      	b.n	b710 <usb_find_str_desc+0x8>
    b730:	0000b695 	.word	0x0000b695

0000b734 <_spi_m_dma_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_dma_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    b734:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ASSERT(io);
    b736:	4604      	mov	r4, r0
    b738:	3800      	subs	r0, #0
{
    b73a:	460d      	mov	r5, r1
    b73c:	9201      	str	r2, [sp, #4]
	ASSERT(io);
    b73e:	bf18      	it	ne
    b740:	2001      	movne	r0, #1
    b742:	4907      	ldr	r1, [pc, #28]	; (b760 <_spi_m_dma_io_write+0x2c>)
    b744:	4e07      	ldr	r6, [pc, #28]	; (b764 <_spi_m_dma_io_write+0x30>)
    b746:	2298      	movs	r2, #152	; 0x98
    b748:	47b0      	blx	r6

	struct spi_m_dma_descriptor *spi = CONTAINER_OF(io, struct spi_m_dma_descriptor, io);
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    b74a:	f1a4 001c 	sub.w	r0, r4, #28
    b74e:	4c06      	ldr	r4, [pc, #24]	; (b768 <_spi_m_dma_io_write+0x34>)
    b750:	9b01      	ldr	r3, [sp, #4]
    b752:	2200      	movs	r2, #0
    b754:	4629      	mov	r1, r5
    b756:	46a4      	mov	ip, r4
}
    b758:	b002      	add	sp, #8
    b75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_dma_transfer(&spi->dev, buf, NULL, length);
    b75e:	4760      	bx	ip
    b760:	00015b8a 	.word	0x00015b8a
    b764:	0000d415 	.word	0x0000d415
    b768:	00011465 	.word	0x00011465

0000b76c <_spi_m_dma_io_read>:
{
    b76c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ASSERT(io);
    b76e:	4604      	mov	r4, r0
    b770:	3800      	subs	r0, #0
{
    b772:	460d      	mov	r5, r1
    b774:	9201      	str	r2, [sp, #4]
	ASSERT(io);
    b776:	bf18      	it	ne
    b778:	2001      	movne	r0, #1
    b77a:	4907      	ldr	r1, [pc, #28]	; (b798 <_spi_m_dma_io_read+0x2c>)
    b77c:	4e07      	ldr	r6, [pc, #28]	; (b79c <_spi_m_dma_io_read+0x30>)
    b77e:	2281      	movs	r2, #129	; 0x81
    b780:	47b0      	blx	r6
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    b782:	f1a4 001c 	sub.w	r0, r4, #28
    b786:	4c06      	ldr	r4, [pc, #24]	; (b7a0 <_spi_m_dma_io_read+0x34>)
    b788:	9b01      	ldr	r3, [sp, #4]
    b78a:	462a      	mov	r2, r5
    b78c:	2100      	movs	r1, #0
    b78e:	46a4      	mov	ip, r4
}
    b790:	b002      	add	sp, #8
    b792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_dma_transfer(&spi->dev, NULL, buf, length);
    b796:	4760      	bx	ip
    b798:	00015b8a 	.word	0x00015b8a
    b79c:	0000d415 	.word	0x0000d415
    b7a0:	00011465 	.word	0x00011465

0000b7a4 <spi_m_dma_init>:
{
    b7a4:	b538      	push	{r3, r4, r5, lr}
    b7a6:	460d      	mov	r5, r1
	ASSERT(spi && hw);
    b7a8:	4604      	mov	r4, r0
    b7aa:	b110      	cbz	r0, b7b2 <spi_m_dma_init+0xe>
    b7ac:	1e08      	subs	r0, r1, #0
    b7ae:	bf18      	it	ne
    b7b0:	2001      	movne	r0, #1
    b7b2:	4908      	ldr	r1, [pc, #32]	; (b7d4 <spi_m_dma_init+0x30>)
    b7b4:	4b08      	ldr	r3, [pc, #32]	; (b7d8 <spi_m_dma_init+0x34>)
    b7b6:	223b      	movs	r2, #59	; 0x3b
    b7b8:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    b7ba:	4620      	mov	r0, r4
	rc            = _spi_m_dma_init(&spi->dev, hw);
    b7bc:	4b07      	ldr	r3, [pc, #28]	; (b7dc <spi_m_dma_init+0x38>)
	spi->dev.prvt = (void *)hw;
    b7be:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_dma_init(&spi->dev, hw);
    b7c2:	4629      	mov	r1, r5
    b7c4:	4798      	blx	r3
	if (rc) {
    b7c6:	b918      	cbnz	r0, b7d0 <spi_m_dma_init+0x2c>
	spi->io.read  = _spi_m_dma_io_read;
    b7c8:	4b05      	ldr	r3, [pc, #20]	; (b7e0 <spi_m_dma_init+0x3c>)
    b7ca:	6263      	str	r3, [r4, #36]	; 0x24
	spi->io.write = _spi_m_dma_io_write;
    b7cc:	4b05      	ldr	r3, [pc, #20]	; (b7e4 <spi_m_dma_init+0x40>)
    b7ce:	6223      	str	r3, [r4, #32]
}
    b7d0:	bd38      	pop	{r3, r4, r5, pc}
    b7d2:	bf00      	nop
    b7d4:	00015b8a 	.word	0x00015b8a
    b7d8:	0000d415 	.word	0x0000d415
    b7dc:	000112dd 	.word	0x000112dd
    b7e0:	0000b76d 	.word	0x0000b76d
    b7e4:	0000b735 	.word	0x0000b735

0000b7e8 <spi_m_dma_enable>:
{
    b7e8:	b510      	push	{r4, lr}
	ASSERT(spi);
    b7ea:	4604      	mov	r4, r0
    b7ec:	3800      	subs	r0, #0
    b7ee:	4b05      	ldr	r3, [pc, #20]	; (b804 <spi_m_dma_enable+0x1c>)
    b7f0:	4905      	ldr	r1, [pc, #20]	; (b808 <spi_m_dma_enable+0x20>)
    b7f2:	bf18      	it	ne
    b7f4:	2001      	movne	r0, #1
    b7f6:	2251      	movs	r2, #81	; 0x51
    b7f8:	4798      	blx	r3
	_spi_m_dma_enable(&spi->dev);
    b7fa:	1d20      	adds	r0, r4, #4
    b7fc:	4b03      	ldr	r3, [pc, #12]	; (b80c <spi_m_dma_enable+0x24>)
}
    b7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_spi_m_dma_enable(&spi->dev);
    b802:	4718      	bx	r3
    b804:	0000d415 	.word	0x0000d415
    b808:	00015b8a 	.word	0x00015b8a
    b80c:	000113a1 	.word	0x000113a1

0000b810 <spi_m_dma_register_callback>:
	return _spi_m_dma_transfer(&spi->dev, txbuf, rxbuf, length);
}

void spi_m_dma_register_callback(struct spi_m_dma_descriptor *spi, const enum spi_m_dma_cb_type type,
                                 spi_m_dma_cb_t func)
{
    b810:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    b812:	4604      	mov	r4, r0
    b814:	3800      	subs	r0, #0
{
    b816:	460d      	mov	r5, r1
    b818:	4616      	mov	r6, r2
	ASSERT(spi);
    b81a:	4907      	ldr	r1, [pc, #28]	; (b838 <spi_m_dma_register_callback+0x28>)
    b81c:	4b07      	ldr	r3, [pc, #28]	; (b83c <spi_m_dma_register_callback+0x2c>)
    b81e:	f04f 02a8 	mov.w	r2, #168	; 0xa8
    b822:	bf18      	it	ne
    b824:	2001      	movne	r0, #1
    b826:	4798      	blx	r3
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    b828:	4632      	mov	r2, r6
    b82a:	4629      	mov	r1, r5
    b82c:	1d20      	adds	r0, r4, #4
    b82e:	4b04      	ldr	r3, [pc, #16]	; (b840 <spi_m_dma_register_callback+0x30>)
}
    b830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	_spi_m_dma_register_callback(&spi->dev, (enum _spi_dma_dev_cb_type)type, func);
    b834:	4718      	bx	r3
    b836:	bf00      	nop
    b838:	00015b8a 	.word	0x00015b8a
    b83c:	0000d415 	.word	0x0000d415
    b840:	000113d1 	.word	0x000113d1

0000b844 <spi_m_dma_get_io_descriptor>:

int32_t spi_m_dma_get_io_descriptor(struct spi_m_dma_descriptor *const spi, struct io_descriptor **io)
{
    b844:	b538      	push	{r3, r4, r5, lr}
    b846:	460d      	mov	r5, r1
	ASSERT(spi && io);
    b848:	4604      	mov	r4, r0
    b84a:	b110      	cbz	r0, b852 <spi_m_dma_get_io_descriptor+0xe>
    b84c:	1e08      	subs	r0, r1, #0
    b84e:	bf18      	it	ne
    b850:	2001      	movne	r0, #1
    b852:	4904      	ldr	r1, [pc, #16]	; (b864 <spi_m_dma_get_io_descriptor+0x20>)
    b854:	4b04      	ldr	r3, [pc, #16]	; (b868 <spi_m_dma_get_io_descriptor+0x24>)
    b856:	22ae      	movs	r2, #174	; 0xae
	*io = &spi->io;
    b858:	3420      	adds	r4, #32
	ASSERT(spi && io);
    b85a:	4798      	blx	r3
	*io = &spi->io;
    b85c:	602c      	str	r4, [r5, #0]

	return 0;
}
    b85e:	2000      	movs	r0, #0
    b860:	bd38      	pop	{r3, r4, r5, pc}
    b862:	bf00      	nop
    b864:	00015b8a 	.word	0x00015b8a
    b868:	0000d415 	.word	0x0000d415

0000b86c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    b86c:	3801      	subs	r0, #1
    b86e:	2802      	cmp	r0, #2
{
    b870:	b508      	push	{r3, lr}
    b872:	460b      	mov	r3, r1
    b874:	4611      	mov	r1, r2
	if ((file != 1) && (file != 2) && (file != 3)) {
    b876:	d805      	bhi.n	b884 <_write+0x18>
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    b878:	4618      	mov	r0, r3
    b87a:	4b04      	ldr	r3, [pc, #16]	; (b88c <_write+0x20>)
    b87c:	4798      	blx	r3
	if (n < 0) {
    b87e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		return -1;
	}

	return n;
}
    b882:	bd08      	pop	{r3, pc}
		return -1;
    b884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b888:	e7fb      	b.n	b882 <_write+0x16>
    b88a:	bf00      	nop
    b88c:	0000b529 	.word	0x0000b529

0000b890 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    b890:	b510      	push	{r4, lr}
    b892:	4a13      	ldr	r2, [pc, #76]	; (b8e0 <_event_system_init+0x50>)
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    b894:	4913      	ldr	r1, [pc, #76]	; (b8e4 <_event_system_init+0x54>)
    b896:	2300      	movs	r3, #0
    b898:	f103 0048 	add.w	r0, r3, #72	; 0x48
    b89c:	3301      	adds	r3, #1
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    b89e:	f812 4b01 	ldrb.w	r4, [r2], #1
    b8a2:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    b8a6:	2b43      	cmp	r3, #67	; 0x43
    b8a8:	d1f6      	bne.n	b898 <_event_system_init+0x8>
    b8aa:	480f      	ldr	r0, [pc, #60]	; (b8e8 <_event_system_init+0x58>)
    b8ac:	2100      	movs	r1, #0
    b8ae:	f100 0440 	add.w	r4, r0, #64	; 0x40
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    b8b2:	00ca      	lsls	r2, r1, #3
    b8b4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    b8b8:	f502 4260 	add.w	r2, r2, #57344	; 0xe000
    b8bc:	f830 3b02 	ldrh.w	r3, [r0], #2

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    b8c0:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    b8c2:	f854 3b04 	ldr.w	r3, [r4], #4
    b8c6:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    b8c8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    b8cc:	3101      	adds	r1, #1
    b8ce:	43db      	mvns	r3, r3
    b8d0:	b2db      	uxtb	r3, r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    b8d2:	2920      	cmp	r1, #32
    b8d4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    b8d8:	d1eb      	bne.n	b8b2 <_event_system_init+0x22>
	}

	return ERR_NONE;
}
    b8da:	2000      	movs	r0, #0
    b8dc:	bd10      	pop	{r4, pc}
    b8de:	bf00      	nop
    b8e0:	00015ba8 	.word	0x00015ba8
    b8e4:	4100e000 	.word	0x4100e000
    b8e8:	00015bec 	.word	0x00015bec

0000b8ec <_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b8ec:	0943      	lsrs	r3, r0, #5
    b8ee:	2201      	movs	r2, #1
    b8f0:	f000 001f 	and.w	r0, r0, #31
    b8f4:	fa02 f000 	lsl.w	r0, r2, r0
    b8f8:	3340      	adds	r3, #64	; 0x40
    b8fa:	4a02      	ldr	r2, [pc, #8]	; (b904 <_irq_set+0x18>)
    b8fc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
}
    b900:	4770      	bx	lr
    b902:	bf00      	nop
    b904:	e000e100 	.word	0xe000e100

0000b908 <_get_cycles_for_us>:
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    b908:	2378      	movs	r3, #120	; 0x78
    b90a:	4358      	muls	r0, r3
    b90c:	4770      	bx	lr
	...

0000b910 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    b910:	4b01      	ldr	r3, [pc, #4]	; (b918 <_get_cycles_for_ms+0x8>)
    b912:	4358      	muls	r0, r3
    b914:	4770      	bx	lr
    b916:	bf00      	nop
    b918:	0001d4c0 	.word	0x0001d4c0

0000b91c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    b91c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b920:	4615      	mov	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b922:	780a      	ldrb	r2, [r1, #0]
    b924:	f3c2 1341 	ubfx	r3, r2, #5, #2
    b928:	2b01      	cmp	r3, #1
{
    b92a:	4606      	mov	r6, r0
    b92c:	460c      	mov	r4, r1
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    b92e:	d155      	bne.n	b9dc <cdcdf_acm_req+0xc0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    b930:	4b2d      	ldr	r3, [pc, #180]	; (b9e8 <cdcdf_acm_req+0xcc>)
    b932:	8889      	ldrh	r1, [r1, #4]
    b934:	7818      	ldrb	r0, [r3, #0]
    b936:	4288      	cmp	r0, r1
    b938:	4698      	mov	r8, r3
    b93a:	d002      	beq.n	b942 <cdcdf_acm_req+0x26>
    b93c:	785b      	ldrb	r3, [r3, #1]
    b93e:	428b      	cmp	r3, r1
    b940:	d14c      	bne.n	b9dc <cdcdf_acm_req+0xc0>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    b942:	0613      	lsls	r3, r2, #24
    b944:	88e7      	ldrh	r7, [r4, #6]
    b946:	d50f      	bpl.n	b968 <cdcdf_acm_req+0x4c>
	if (USB_DATA_STAGE == stage) {
    b948:	2d01      	cmp	r5, #1
    b94a:	d033      	beq.n	b9b4 <cdcdf_acm_req+0x98>
	switch (req->bRequest) {
    b94c:	7863      	ldrb	r3, [r4, #1]
    b94e:	2b21      	cmp	r3, #33	; 0x21
    b950:	d112      	bne.n	b978 <cdcdf_acm_req+0x5c>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b952:	2f07      	cmp	r7, #7
    b954:	d145      	bne.n	b9e2 <cdcdf_acm_req+0xc6>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    b956:	4925      	ldr	r1, [pc, #148]	; (b9ec <cdcdf_acm_req+0xd0>)
    b958:	2300      	movs	r3, #0
    b95a:	463a      	mov	r2, r7
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b95c:	4c24      	ldr	r4, [pc, #144]	; (b9f0 <cdcdf_acm_req+0xd4>)
    b95e:	4630      	mov	r0, r6
    b960:	47a0      	blx	r4
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    b962:	b002      	add	sp, #8
    b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b968:	4b22      	ldr	r3, [pc, #136]	; (b9f4 <cdcdf_acm_req+0xd8>)
    b96a:	4798      	blx	r3
	switch (req->bRequest) {
    b96c:	7863      	ldrb	r3, [r4, #1]
    b96e:	2b20      	cmp	r3, #32
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    b970:	4601      	mov	r1, r0
	switch (req->bRequest) {
    b972:	d004      	beq.n	b97e <cdcdf_acm_req+0x62>
    b974:	2b22      	cmp	r3, #34	; 0x22
    b976:	d024      	beq.n	b9c2 <cdcdf_acm_req+0xa6>
		return ERR_INVALID_ARG;
    b978:	f06f 000c 	mvn.w	r0, #12
    b97c:	e7f1      	b.n	b962 <cdcdf_acm_req+0x46>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    b97e:	2f07      	cmp	r7, #7
    b980:	d12f      	bne.n	b9e2 <cdcdf_acm_req+0xc6>
		if (USB_SETUP_STAGE == stage) {
    b982:	b915      	cbnz	r5, b98a <cdcdf_acm_req+0x6e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    b984:	462b      	mov	r3, r5
    b986:	463a      	mov	r2, r7
    b988:	e7e8      	b.n	b95c <cdcdf_acm_req+0x40>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b98a:	6800      	ldr	r0, [r0, #0]
    b98c:	9000      	str	r0, [sp, #0]
    b98e:	798b      	ldrb	r3, [r1, #6]
    b990:	888a      	ldrh	r2, [r1, #4]
    b992:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b996:	f8d8 3010 	ldr.w	r3, [r8, #16]
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    b99a:	f8ad 2004 	strh.w	r2, [sp, #4]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b99e:	b95b      	cbnz	r3, b9b8 <cdcdf_acm_req+0x9c>
				usbd_cdc_line_coding = line_coding_tmp;
    b9a0:	4b12      	ldr	r3, [pc, #72]	; (b9ec <cdcdf_acm_req+0xd0>)
    b9a2:	9800      	ldr	r0, [sp, #0]
    b9a4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b9a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b9ac:	f8c8 0006 	str.w	r0, [r8, #6]
    b9b0:	8099      	strh	r1, [r3, #4]
    b9b2:	719a      	strb	r2, [r3, #6]
		return ERR_NONE;
    b9b4:	2000      	movs	r0, #0
    b9b6:	e7d4      	b.n	b962 <cdcdf_acm_req+0x46>
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    b9b8:	4668      	mov	r0, sp
    b9ba:	4798      	blx	r3
    b9bc:	2800      	cmp	r0, #0
    b9be:	d1ef      	bne.n	b9a0 <cdcdf_acm_req+0x84>
    b9c0:	e7f8      	b.n	b9b4 <cdcdf_acm_req+0x98>
		usbdc_xfer(0, NULL, 0, 0);
    b9c2:	2300      	movs	r3, #0
    b9c4:	461a      	mov	r2, r3
    b9c6:	4619      	mov	r1, r3
    b9c8:	4618      	mov	r0, r3
    b9ca:	4d09      	ldr	r5, [pc, #36]	; (b9f0 <cdcdf_acm_req+0xd4>)
    b9cc:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    b9ce:	f8d8 3014 	ldr.w	r3, [r8, #20]
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	d0ee      	beq.n	b9b4 <cdcdf_acm_req+0x98>
			cdcdf_acm_notify_state(req->wValue);
    b9d6:	8860      	ldrh	r0, [r4, #2]
    b9d8:	4798      	blx	r3
    b9da:	e7eb      	b.n	b9b4 <cdcdf_acm_req+0x98>
		return ERR_NOT_FOUND;
    b9dc:	f06f 0009 	mvn.w	r0, #9
    b9e0:	e7bf      	b.n	b962 <cdcdf_acm_req+0x46>
			return ERR_INVALID_DATA;
    b9e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b9e6:	e7bc      	b.n	b962 <cdcdf_acm_req+0x46>
    b9e8:	20000814 	.word	0x20000814
    b9ec:	2000081a 	.word	0x2000081a
    b9f0:	00011c29 	.word	0x00011c29
    b9f4:	00012055 	.word	0x00012055

0000b9f8 <cdcdf_acm_ctrl>:
	switch (ctrl) {
    b9f8:	2901      	cmp	r1, #1
{
    b9fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9fe:	4615      	mov	r5, r2
	switch (ctrl) {
    ba00:	d04f      	beq.n	baa2 <cdcdf_acm_ctrl+0xaa>
    ba02:	2902      	cmp	r1, #2
    ba04:	d076      	beq.n	baf4 <cdcdf_acm_ctrl+0xfc>
    ba06:	2900      	cmp	r1, #0
    ba08:	d177      	bne.n	bafa <cdcdf_acm_ctrl+0x102>
		return cdcdf_acm_enable(drv, (struct usbd_descriptors *)param);
    ba0a:	6887      	ldr	r7, [r0, #8]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    ba0c:	f8df 8114 	ldr.w	r8, [pc, #276]	; bb24 <cdcdf_acm_ctrl+0x12c>
	ifc = desc->sod;
    ba10:	6810      	ldr	r0, [r2, #0]
	for (i = 0; i < 2; i++) {
    ba12:	1e7e      	subs	r6, r7, #1
		if (NULL == ifc) {
    ba14:	b928      	cbnz	r0, ba22 <cdcdf_acm_ctrl+0x2a>
			return ERR_NOT_FOUND;
    ba16:	f06f 0009 	mvn.w	r0, #9
}
    ba1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba1e:	464e      	mov	r6, r9
    ba20:	e7f8      	b.n	ba14 <cdcdf_acm_ctrl+0x1c>
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    ba22:	7943      	ldrb	r3, [r0, #5]
		ifc_desc.bInterfaceNumber = ifc[2];
    ba24:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    ba26:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    ba2a:	2b02      	cmp	r3, #2
    ba2c:	d1f3      	bne.n	ba16 <cdcdf_acm_ctrl+0x1e>
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    ba2e:	7873      	ldrb	r3, [r6, #1]
    ba30:	429a      	cmp	r2, r3
    ba32:	d065      	beq.n	bb00 <cdcdf_acm_ctrl+0x108>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    ba34:	2bff      	cmp	r3, #255	; 0xff
    ba36:	d166      	bne.n	bb06 <cdcdf_acm_ctrl+0x10e>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    ba38:	7072      	strb	r2, [r6, #1]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    ba3a:	6869      	ldr	r1, [r5, #4]
    ba3c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; bb28 <cdcdf_acm_ctrl+0x130>
    ba40:	2205      	movs	r2, #5
    ba42:	47c0      	blx	r8
    ba44:	f106 0901 	add.w	r9, r6, #1
    ba48:	4604      	mov	r4, r0
		while (NULL != ep) {
    ba4a:	b964      	cbnz	r4, ba66 <cdcdf_acm_ctrl+0x6e>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    ba4c:	682b      	ldr	r3, [r5, #0]
    ba4e:	6869      	ldr	r1, [r5, #4]
    ba50:	7818      	ldrb	r0, [r3, #0]
    ba52:	2204      	movs	r2, #4
    ba54:	4418      	add	r0, r3
    ba56:	47c0      	blx	r8
	for (i = 0; i < 2; i++) {
    ba58:	42be      	cmp	r6, r7
    ba5a:	d1e0      	bne.n	ba1e <cdcdf_acm_ctrl+0x26>
	_cdcdf_acm_funcd.enabled = true;
    ba5c:	4b2d      	ldr	r3, [pc, #180]	; (bb14 <cdcdf_acm_ctrl+0x11c>)
    ba5e:	2201      	movs	r2, #1
    ba60:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    ba62:	4620      	mov	r0, r4
    ba64:	e7d9      	b.n	ba1a <cdcdf_acm_ctrl+0x22>
	return (ptr[0] + (ptr[1] << 8));
    ba66:	7961      	ldrb	r1, [r4, #5]
    ba68:	7922      	ldrb	r2, [r4, #4]
			ep_desc.bEndpointAddress = ep[2];
    ba6a:	f894 b002 	ldrb.w	fp, [r4, #2]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    ba6e:	4b2a      	ldr	r3, [pc, #168]	; (bb18 <cdcdf_acm_ctrl+0x120>)
    ba70:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    ba74:	b292      	uxth	r2, r2
    ba76:	78e1      	ldrb	r1, [r4, #3]
    ba78:	4658      	mov	r0, fp
    ba7a:	4798      	blx	r3
    ba7c:	2800      	cmp	r0, #0
    ba7e:	d145      	bne.n	bb0c <cdcdf_acm_ctrl+0x114>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    ba80:	f01b 0f80 	tst.w	fp, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    ba84:	bf14      	ite	ne
    ba86:	f889 b002 	strbne.w	fp, [r9, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    ba8a:	f887 b004 	strbeq.w	fp, [r7, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    ba8e:	4658      	mov	r0, fp
    ba90:	47d0      	blx	sl
			desc->sod = ep;
    ba92:	602c      	str	r4, [r5, #0]
	return (desc + usb_desc_len(desc));
    ba94:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    ba96:	6869      	ldr	r1, [r5, #4]
    ba98:	4b20      	ldr	r3, [pc, #128]	; (bb1c <cdcdf_acm_ctrl+0x124>)
    ba9a:	4420      	add	r0, r4
    ba9c:	4798      	blx	r3
    ba9e:	4604      	mov	r4, r0
    baa0:	e7d3      	b.n	ba4a <cdcdf_acm_ctrl+0x52>
		return cdcdf_acm_disable(drv, (struct usbd_descriptors *)param);
    baa2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    baa4:	b12a      	cbz	r2, bab2 <cdcdf_acm_ctrl+0xba>
		ifc_desc.bInterfaceClass = desc->sod[5];
    baa6:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    baa8:	795b      	ldrb	r3, [r3, #5]
    baaa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    baae:	2b02      	cmp	r3, #2
    bab0:	d1b1      	bne.n	ba16 <cdcdf_acm_ctrl+0x1e>
		if (func_data->func_iface[i] == 0xFF) {
    bab2:	7823      	ldrb	r3, [r4, #0]
    bab4:	2bff      	cmp	r3, #255	; 0xff
    bab6:	d007      	beq.n	bac8 <cdcdf_acm_ctrl+0xd0>
			if (func_data->func_ep_in[i] != 0xFF) {
    bab8:	78a0      	ldrb	r0, [r4, #2]
			func_data->func_iface[i] = 0xFF;
    baba:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    babc:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    babe:	7025      	strb	r5, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    bac0:	d002      	beq.n	bac8 <cdcdf_acm_ctrl+0xd0>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bac2:	4b17      	ldr	r3, [pc, #92]	; (bb20 <cdcdf_acm_ctrl+0x128>)
    bac4:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    bac6:	70a5      	strb	r5, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    bac8:	7863      	ldrb	r3, [r4, #1]
    baca:	2bff      	cmp	r3, #255	; 0xff
    bacc:	d007      	beq.n	bade <cdcdf_acm_ctrl+0xe6>
			if (func_data->func_ep_in[i] != 0xFF) {
    bace:	78e0      	ldrb	r0, [r4, #3]
			func_data->func_iface[i] = 0xFF;
    bad0:	25ff      	movs	r5, #255	; 0xff
			if (func_data->func_ep_in[i] != 0xFF) {
    bad2:	42a8      	cmp	r0, r5
			func_data->func_iface[i] = 0xFF;
    bad4:	7065      	strb	r5, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    bad6:	d002      	beq.n	bade <cdcdf_acm_ctrl+0xe6>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    bad8:	4b11      	ldr	r3, [pc, #68]	; (bb20 <cdcdf_acm_ctrl+0x128>)
    bada:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    badc:	70e5      	strb	r5, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    bade:	7920      	ldrb	r0, [r4, #4]
    bae0:	28ff      	cmp	r0, #255	; 0xff
    bae2:	d003      	beq.n	baec <cdcdf_acm_ctrl+0xf4>
		usb_d_ep_deinit(func_data->func_ep_out);
    bae4:	4b0e      	ldr	r3, [pc, #56]	; (bb20 <cdcdf_acm_ctrl+0x128>)
    bae6:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    bae8:	23ff      	movs	r3, #255	; 0xff
    baea:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    baec:	4b09      	ldr	r3, [pc, #36]	; (bb14 <cdcdf_acm_ctrl+0x11c>)
    baee:	2000      	movs	r0, #0
    baf0:	7158      	strb	r0, [r3, #5]
	return ERR_NONE;
    baf2:	e792      	b.n	ba1a <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    baf4:	f06f 001a 	mvn.w	r0, #26
    baf8:	e78f      	b.n	ba1a <cdcdf_acm_ctrl+0x22>
	switch (ctrl) {
    bafa:	f06f 000c 	mvn.w	r0, #12
    bafe:	e78c      	b.n	ba1a <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    bb00:	f06f 0011 	mvn.w	r0, #17
    bb04:	e789      	b.n	ba1a <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    bb06:	f06f 001b 	mvn.w	r0, #27
    bb0a:	e786      	b.n	ba1a <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    bb0c:	f06f 0013 	mvn.w	r0, #19
    bb10:	e783      	b.n	ba1a <cdcdf_acm_ctrl+0x22>
    bb12:	bf00      	nop
    bb14:	20000814 	.word	0x20000814
    bb18:	0000e8f9 	.word	0x0000e8f9
    bb1c:	0000b6af 	.word	0x0000b6af
    bb20:	0000e95d 	.word	0x0000e95d
    bb24:	0000b695 	.word	0x0000b695
    bb28:	0000e989 	.word	0x0000e989

0000bb2c <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    bb2c:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    bb2e:	4b0a      	ldr	r3, [pc, #40]	; (bb58 <cdcdf_acm_init+0x2c>)
    bb30:	4798      	blx	r3
    bb32:	2801      	cmp	r0, #1
    bb34:	d80c      	bhi.n	bb50 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    bb36:	4809      	ldr	r0, [pc, #36]	; (bb5c <cdcdf_acm_init+0x30>)
    bb38:	4b09      	ldr	r3, [pc, #36]	; (bb60 <cdcdf_acm_init+0x34>)
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    bb3a:	e9c0 3007 	strd	r3, r0, [r0, #28]

	usbdc_register_function(&_cdcdf_acm);
    bb3e:	4b09      	ldr	r3, [pc, #36]	; (bb64 <cdcdf_acm_init+0x38>)
    bb40:	3018      	adds	r0, #24
    bb42:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    bb44:	2001      	movs	r0, #1
    bb46:	4908      	ldr	r1, [pc, #32]	; (bb68 <cdcdf_acm_init+0x3c>)
    bb48:	4b08      	ldr	r3, [pc, #32]	; (bb6c <cdcdf_acm_init+0x40>)
    bb4a:	4798      	blx	r3
	return ERR_NONE;
    bb4c:	2000      	movs	r0, #0
}
    bb4e:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    bb50:	f06f 0010 	mvn.w	r0, #16
    bb54:	e7fb      	b.n	bb4e <cdcdf_acm_init+0x22>
    bb56:	bf00      	nop
    bb58:	00012061 	.word	0x00012061
    bb5c:	20000814 	.word	0x20000814
    bb60:	0000b9f9 	.word	0x0000b9f9
    bb64:	00012009 	.word	0x00012009
    bb68:	20000350 	.word	0x20000350
    bb6c:	00011f81 	.word	0x00011f81

0000bb70 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    bb70:	b410      	push	{r4}
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    bb72:	4c08      	ldr	r4, [pc, #32]	; (bb94 <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    bb74:	7963      	ldrb	r3, [r4, #5]
{
    bb76:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    bb78:	b13b      	cbz	r3, bb8a <cdcdf_acm_read+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bb7a:	4601      	mov	r1, r0
    bb7c:	7920      	ldrb	r0, [r4, #4]
    bb7e:	4c06      	ldr	r4, [pc, #24]	; (bb98 <cdcdf_acm_read+0x28>)
    bb80:	2300      	movs	r3, #0
    bb82:	46a4      	mov	ip, r4
}
    bb84:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    bb88:	4760      	bx	ip
}
    bb8a:	f06f 0010 	mvn.w	r0, #16
    bb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    bb92:	4770      	bx	lr
    bb94:	20000814 	.word	0x20000814
    bb98:	00011c29 	.word	0x00011c29

0000bb9c <cdcdf_acm_write>:
{
    bb9c:	b410      	push	{r4}
	return _cdcdf_acm_funcd.enabled;
    bb9e:	4c08      	ldr	r4, [pc, #32]	; (bbc0 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    bba0:	7963      	ldrb	r3, [r4, #5]
{
    bba2:	460a      	mov	r2, r1
	if (!cdcdf_acm_is_enabled()) {
    bba4:	b13b      	cbz	r3, bbb6 <cdcdf_acm_write+0x1a>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bba6:	4601      	mov	r1, r0
    bba8:	78e0      	ldrb	r0, [r4, #3]
    bbaa:	4c06      	ldr	r4, [pc, #24]	; (bbc4 <cdcdf_acm_write+0x28>)
    bbac:	2301      	movs	r3, #1
    bbae:	46a4      	mov	ip, r4
}
    bbb0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    bbb4:	4760      	bx	ip
}
    bbb6:	f06f 0010 	mvn.w	r0, #16
    bbba:	f85d 4b04 	ldr.w	r4, [sp], #4
    bbbe:	4770      	bx	lr
    bbc0:	20000814 	.word	0x20000814
    bbc4:	00011c29 	.word	0x00011c29

0000bbc8 <cdcdf_acm_register_callback>:
{
    bbc8:	b508      	push	{r3, lr}
    bbca:	460a      	mov	r2, r1
    bbcc:	2803      	cmp	r0, #3
    bbce:	d814      	bhi.n	bbfa <cdcdf_acm_register_callback+0x32>
    bbd0:	e8df f000 	tbb	[pc, r0]
    bbd4:	100d0902 	.word	0x100d0902
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    bbd8:	4b09      	ldr	r3, [pc, #36]	; (bc00 <cdcdf_acm_register_callback+0x38>)
    bbda:	7918      	ldrb	r0, [r3, #4]
    bbdc:	2102      	movs	r1, #2
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bbde:	4b09      	ldr	r3, [pc, #36]	; (bc04 <cdcdf_acm_register_callback+0x3c>)
    bbe0:	4798      	blx	r3
	return ERR_NONE;
    bbe2:	2000      	movs	r0, #0
}
    bbe4:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    bbe6:	4b06      	ldr	r3, [pc, #24]	; (bc00 <cdcdf_acm_register_callback+0x38>)
    bbe8:	2102      	movs	r1, #2
    bbea:	78d8      	ldrb	r0, [r3, #3]
    bbec:	e7f7      	b.n	bbde <cdcdf_acm_register_callback+0x16>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    bbee:	4b04      	ldr	r3, [pc, #16]	; (bc00 <cdcdf_acm_register_callback+0x38>)
    bbf0:	6119      	str	r1, [r3, #16]
		break;
    bbf2:	e7f6      	b.n	bbe2 <cdcdf_acm_register_callback+0x1a>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    bbf4:	4b02      	ldr	r3, [pc, #8]	; (bc00 <cdcdf_acm_register_callback+0x38>)
    bbf6:	6159      	str	r1, [r3, #20]
    bbf8:	e7f3      	b.n	bbe2 <cdcdf_acm_register_callback+0x1a>
	return ERR_NONE;
    bbfa:	f06f 000c 	mvn.w	r0, #12
    bbfe:	e7f1      	b.n	bbe4 <cdcdf_acm_register_callback+0x1c>
    bc00:	20000814 	.word	0x20000814
    bc04:	0000eb71 	.word	0x0000eb71

0000bc08 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    bc08:	4b04      	ldr	r3, [pc, #16]	; (bc1c <_sbrk+0x14>)
    bc0a:	6819      	ldr	r1, [r3, #0]
{
    bc0c:	4602      	mov	r2, r0
	if (heap == NULL) {
    bc0e:	b909      	cbnz	r1, bc14 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
    bc10:	4903      	ldr	r1, [pc, #12]	; (bc20 <_sbrk+0x18>)
    bc12:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    bc14:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    bc16:	4402      	add	r2, r0
    bc18:	601a      	str	r2, [r3, #0]

	return (caddr_t)prev_heap;
}
    bc1a:	4770      	bx	lr
    bc1c:	20000838 	.word	0x20000838
    bc20:	20024e38 	.word	0x20024e38

0000bc24 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
    bc24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bc28:	4770      	bx	lr

0000bc2a <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
    bc2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bc2e:	604b      	str	r3, [r1, #4]

	return 0;
}
    bc30:	2000      	movs	r0, #0
    bc32:	4770      	bx	lr

0000bc34 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
    bc34:	2001      	movs	r0, #1
    bc36:	4770      	bx	lr

0000bc38 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
    bc38:	2000      	movs	r0, #0
    bc3a:	4770      	bx	lr

0000bc3c <_qspi_dma_rx_complete>:
 *  \brief Callback for RX
 *  \param[in, out] dev Pointer to the DMA resource.
 */
static void _qspi_dma_rx_complete(struct _dma_resource *resource)
{
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;
    bc3c:	6883      	ldr	r3, [r0, #8]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    bc3e:	4903      	ldr	r1, [pc, #12]	; (bc4c <_qspi_dma_rx_complete+0x10>)

	_qspi_end_transfer(dev->prvt);
    bc40:	681a      	ldr	r2, [r3, #0]

	if (dev->cb.xfer_done) {
    bc42:	685b      	ldr	r3, [r3, #4]
    bc44:	6011      	str	r1, [r2, #0]
    bc46:	b103      	cbz	r3, bc4a <_qspi_dma_rx_complete+0xe>
		dev->cb.xfer_done(resource);
    bc48:	4718      	bx	r3
	}
}
    bc4a:	4770      	bx	lr
    bc4c:	01000002 	.word	0x01000002

0000bc50 <_qspi_dma_tx_complete>:
    bc50:	4b00      	ldr	r3, [pc, #0]	; (bc54 <_qspi_dma_tx_complete+0x4>)
    bc52:	4718      	bx	r3
    bc54:	0000bc3d 	.word	0x0000bc3d

0000bc58 <_qspi_dma_error_occured>:
 */
static void _qspi_dma_error_occured(struct _dma_resource *resource)
{
	struct _qspi_dma_dev *dev = (struct _qspi_dma_dev *)resource->back;

	if (dev->cb.error) {
    bc58:	6883      	ldr	r3, [r0, #8]
    bc5a:	689b      	ldr	r3, [r3, #8]
    bc5c:	b103      	cbz	r3, bc60 <_qspi_dma_error_occured+0x8>
		dev->cb.error(resource);
    bc5e:	4718      	bx	r3
	}
}
    bc60:	4770      	bx	lr
	...

0000bc64 <_qspi_dma_init>:

int32_t _qspi_dma_init(struct _qspi_dma_dev *dev, void *const hw)
{
    bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc66:	460d      	mov	r5, r1
	ASSERT(dev && hw);
    bc68:	4604      	mov	r4, r0
    bc6a:	b110      	cbz	r0, bc72 <_qspi_dma_init+0xe>
    bc6c:	1e08      	subs	r0, r1, #0
    bc6e:	bf18      	it	ne
    bc70:	2001      	movne	r0, #1
	dev->prvt = hw;
    bc72:	4626      	mov	r6, r4
	ASSERT(dev && hw);
    bc74:	22cb      	movs	r2, #203	; 0xcb
    bc76:	490f      	ldr	r1, [pc, #60]	; (bcb4 <_qspi_dma_init+0x50>)
    bc78:	4b0f      	ldr	r3, [pc, #60]	; (bcb8 <_qspi_dma_init+0x54>)
	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));

	/* Initialize DMA rx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    bc7a:	4f10      	ldr	r7, [pc, #64]	; (bcbc <_qspi_dma_init+0x58>)
	ASSERT(dev && hw);
    bc7c:	4798      	blx	r3
    bc7e:	2301      	movs	r3, #1
	dev->prvt = hw;
    bc80:	f846 5b0c 	str.w	r5, [r6], #12
    bc84:	602b      	str	r3, [r5, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    bc86:	4b0e      	ldr	r3, [pc, #56]	; (bcc0 <_qspi_dma_init+0x5c>)
    bc88:	606b      	str	r3, [r5, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    bc8a:	4b0e      	ldr	r3, [pc, #56]	; (bcc4 <_qspi_dma_init+0x60>)
    bc8c:	60ab      	str	r3, [r5, #8]
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_RX_CHANNEL);
    bc8e:	211f      	movs	r1, #31
    bc90:	4630      	mov	r0, r6
    bc92:	47b8      	blx	r7
	dev->resource->back                 = dev;
    bc94:	68e3      	ldr	r3, [r4, #12]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    bc96:	4a0c      	ldr	r2, [pc, #48]	; (bcc8 <_qspi_dma_init+0x64>)
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    bc98:	4d0c      	ldr	r5, [pc, #48]	; (bccc <_qspi_dma_init+0x68>)
	dev->resource->back                 = dev;
    bc9a:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.transfer_done = _qspi_dma_rx_complete;
    bc9c:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    bc9e:	605d      	str	r5, [r3, #4]
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, CONF_QSPI_DMA_TX_CHANNEL);
    bca0:	211e      	movs	r1, #30
    bca2:	4630      	mov	r0, r6
    bca4:	47b8      	blx	r7
	dev->resource->back                 = dev;
    bca6:	68e3      	ldr	r3, [r4, #12]
	dev->resource->dma_cb.transfer_done = _qspi_dma_tx_complete;
    bca8:	4a09      	ldr	r2, [pc, #36]	; (bcd0 <_qspi_dma_init+0x6c>)
	dev->resource->back                 = dev;
    bcaa:	609c      	str	r4, [r3, #8]
	dev->resource->dma_cb.error         = _qspi_dma_error_occured;
    bcac:	e9c3 2500 	strd	r2, r5, [r3]

	return ERR_NONE;
}
    bcb0:	2000      	movs	r0, #0
    bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcb4:	00015cac 	.word	0x00015cac
    bcb8:	0000d415 	.word	0x0000d415
    bcbc:	0000d659 	.word	0x0000d659
    bcc0:	06000011 	.word	0x06000011
    bcc4:	00243b00 	.word	0x00243b00
    bcc8:	0000bc3d 	.word	0x0000bc3d
    bccc:	0000bc59 	.word	0x0000bc59
    bcd0:	0000bc51 	.word	0x0000bc51

0000bcd4 <_flash_program>:
 * \param[in]  buffer        Pointer to buffer where the data to
 *                           write is stored
 * \param[in] size           The size of data to write to a page
 */
static void _flash_program(void *const hw, const uint32_t dst_addr, const uint8_t *buffer, const uint16_t size)
{
    bcd4:	b570      	push	{r4, r5, r6, lr}
	uint32_t *ptr_read    = (uint32_t *)buffer;
	uint32_t  nvm_address = dst_addr / 4;
    bcd6:	088d      	lsrs	r5, r1, #2
	return ((Nvmctrl *)hw)->PARAM.reg;
}

static inline bool hri_nvmctrl_get_STATUS_READY_bit(const void *const hw)
{
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    bcd8:	8a44      	ldrh	r4, [r0, #18]
	uint16_t  i;

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bcda:	07e6      	lsls	r6, r4, #31
    bcdc:	d5fc      	bpl.n	bcd8 <_flash_program+0x4>
}

static inline void hri_nvmctrl_write_CTRLB_reg(const void *const hw, hri_nvmctrl_ctrlb_reg_t data)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bcde:	f24a 5415 	movw	r4, #42261	; 0xa515
    bce2:	8084      	strh	r4, [r0, #4]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    bce4:	8a44      	ldrh	r4, [r0, #18]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_PBC | NVMCTRL_CTRLB_CMDEX_KEY);

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bce6:	07e4      	lsls	r4, r4, #31
    bce8:	d5fc      	bpl.n	bce4 <_flash_program+0x10>
    bcea:	00ad      	lsls	r5, r5, #2
    bcec:	2400      	movs	r4, #0
		/* Wait until this module isn't busy */
	}

	/* Writes to the page buffer must be 32 bits, perform manual copy
	 * to ensure alignment */
	for (i = 0; i < size; i += 4) {
    bcee:	b2a6      	uxth	r6, r4
    bcf0:	429e      	cmp	r6, r3
    bcf2:	d307      	bcc.n	bd04 <_flash_program+0x30>
    bcf4:	8a43      	ldrh	r3, [r0, #18]
		NVM_MEMORY[nvm_address++] = *ptr_read;
		ptr_read++;
	}

	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bcf6:	07db      	lsls	r3, r3, #31
    bcf8:	d5fc      	bpl.n	bcf4 <_flash_program+0x20>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bcfa:	f24a 5303 	movw	r3, #42243	; 0xa503
	((Nvmctrl *)hw)->ADDR.reg = data;
    bcfe:	6141      	str	r1, [r0, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bd00:	8083      	strh	r3, [r0, #4]
		/* Wait until this module isn't busy */
	}

	hri_nvmctrl_write_ADDR_reg(hw, dst_addr);
	hri_nvmctrl_write_CTRLB_reg(hw, NVMCTRL_CTRLB_CMD_WP | NVMCTRL_CTRLB_CMDEX_KEY);
}
    bd02:	bd70      	pop	{r4, r5, r6, pc}
		NVM_MEMORY[nvm_address++] = *ptr_read;
    bd04:	5916      	ldr	r6, [r2, r4]
    bd06:	5166      	str	r6, [r4, r5]
	for (i = 0; i < size; i += 4) {
    bd08:	3404      	adds	r4, #4
    bd0a:	e7f0      	b.n	bcee <_flash_program+0x1a>

0000bd0c <_flash_init>:
{
    bd0c:	b538      	push	{r3, r4, r5, lr}
    bd0e:	460d      	mov	r5, r1
	ASSERT(device && (hw == NVMCTRL));
    bd10:	4604      	mov	r4, r0
    bd12:	b118      	cbz	r0, bd1c <_flash_init+0x10>
    bd14:	4814      	ldr	r0, [pc, #80]	; (bd68 <_flash_init+0x5c>)
    bd16:	1a0b      	subs	r3, r1, r0
    bd18:	4258      	negs	r0, r3
    bd1a:	4158      	adcs	r0, r3
    bd1c:	4913      	ldr	r1, [pc, #76]	; (bd6c <_flash_init+0x60>)
    bd1e:	4b14      	ldr	r3, [pc, #80]	; (bd70 <_flash_init+0x64>)
    bd20:	224b      	movs	r2, #75	; 0x4b
    bd22:	4798      	blx	r3
	return ((Nvmctrl *)hw)->CTRLA.reg;
    bd24:	882b      	ldrh	r3, [r5, #0]
	device->hw = hw;
    bd26:	6125      	str	r5, [r4, #16]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    bd28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    bd2c:	049b      	lsls	r3, r3, #18
    bd2e:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    bd30:	802b      	strh	r3, [r5, #0]
	_nvm_dev = device;
    bd32:	4b10      	ldr	r3, [pc, #64]	; (bd74 <_flash_init+0x68>)
    bd34:	601c      	str	r4, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bd36:	4b10      	ldr	r3, [pc, #64]	; (bd78 <_flash_init+0x6c>)
    bd38:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    bd3c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    bd40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bd44:	f3bf 8f6f 	isb	sy
    bd48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bd4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    bd50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    bd54:	f3bf 8f6f 	isb	sy
}
    bd58:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bd5a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    bd5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bd62:	6019      	str	r1, [r3, #0]
    bd64:	601a      	str	r2, [r3, #0]
    bd66:	bd38      	pop	{r3, r4, r5, pc}
    bd68:	41004000 	.word	0x41004000
    bd6c:	00015cc3 	.word	0x00015cc3
    bd70:	0000d415 	.word	0x0000d415
    bd74:	2000083c 	.word	0x2000083c
    bd78:	e000e100 	.word	0xe000e100

0000bd7c <_flash_get_page_size>:
}
    bd7c:	f44f 7000 	mov.w	r0, #512	; 0x200
    bd80:	4770      	bx	lr

0000bd82 <_flash_get_total_pages>:
	return (uint32_t)hri_nvmctrl_read_PARAM_NVMP_bf(device->hw);
    bd82:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->PARAM.reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;
    bd84:	6898      	ldr	r0, [r3, #8]
}
    bd86:	b280      	uxth	r0, r0
    bd88:	4770      	bx	lr

0000bd8a <_flash_read>:
{
    bd8a:	b510      	push	{r4, lr}
	while (!hri_nvmctrl_get_STATUS_READY_bit(device->hw)) {
    bd8c:	6904      	ldr	r4, [r0, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    bd8e:	8a60      	ldrh	r0, [r4, #18]
    bd90:	07c0      	lsls	r0, r0, #31
    bd92:	d5fc      	bpl.n	bd8e <_flash_read+0x4>
	for (i = 0; i < length; i++) {
    bd94:	2000      	movs	r0, #0
    bd96:	e002      	b.n	bd9e <_flash_read+0x14>
		buffer[i] = nvm_addr[src_addr + i];
    bd98:	5c44      	ldrb	r4, [r0, r1]
    bd9a:	5414      	strb	r4, [r2, r0]
	for (i = 0; i < length; i++) {
    bd9c:	3001      	adds	r0, #1
    bd9e:	4298      	cmp	r0, r3
    bda0:	d1fa      	bne.n	bd98 <_flash_read+0xe>
}
    bda2:	bd10      	pop	{r4, pc}

0000bda4 <_flash_write>:
{
    bda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bda8:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
    bdac:	b083      	sub	sp, #12
    bdae:	4606      	mov	r6, r0
    bdb0:	460c      	mov	r4, r1
    bdb2:	4617      	mov	r7, r2
    bdb4:	9301      	str	r3, [sp, #4]
		block_start_addr = wr_start_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    bdb6:	f424 59ff 	bic.w	r9, r4, #8160	; 0x1fe0
    bdba:	f029 091f 	bic.w	r9, r9, #31
		block_end_addr   = block_start_addr + NVMCTRL_BLOCK_SIZE - 1;
    bdbe:	f509 5aff 	add.w	sl, r9, #8160	; 0x1fe0
    bdc2:	f10a 0a1f 	add.w	sl, sl, #31
    bdc6:	f04f 0800 	mov.w	r8, #0
			_flash_read(device, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    bdca:	aa02      	add	r2, sp, #8
    bdcc:	4442      	add	r2, r8
    bdce:	eb09 0108 	add.w	r1, r9, r8
    bdd2:	4d24      	ldr	r5, [pc, #144]	; (be64 <_flash_write+0xc0>)
    bdd4:	f44f 7300 	mov.w	r3, #512	; 0x200
    bdd8:	4630      	mov	r0, r6
    bdda:	f508 7800 	add.w	r8, r8, #512	; 0x200
    bdde:	47a8      	blx	r5
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    bde0:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    bde4:	d1f1      	bne.n	bdca <_flash_write+0x26>
		j = (wr_start_addr - block_start_addr) / NVMCTRL_PAGE_SIZE;
    bde6:	eba4 0309 	sub.w	r3, r4, r9
    bdea:	0a5a      	lsrs	r2, r3, #9
		k = wr_start_addr - block_start_addr - j * NVMCTRL_PAGE_SIZE;
    bdec:	4639      	mov	r1, r7
    bdee:	f3c3 0308 	ubfx	r3, r3, #0, #9
		while ((wr_start_addr <= block_end_addr) && (length > 0)) {
    bdf2:	4554      	cmp	r4, sl
    bdf4:	460f      	mov	r7, r1
    bdf6:	d801      	bhi.n	bdfc <_flash_write+0x58>
    bdf8:	9801      	ldr	r0, [sp, #4]
    bdfa:	bb18      	cbnz	r0, be44 <_flash_write+0xa0>
		_flash_erase_block(device->hw, block_start_addr);
    bdfc:	6933      	ldr	r3, [r6, #16]
    bdfe:	8a5a      	ldrh	r2, [r3, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    be00:	07d2      	lsls	r2, r2, #31
    be02:	d5fc      	bpl.n	bdfe <_flash_write+0x5a>
	((Nvmctrl *)hw)->CTRLB.reg = data;
    be04:	f24a 5201 	movw	r2, #42241	; 0xa501
			_flash_program(device->hw, block_start_addr + i * NVMCTRL_PAGE_SIZE, tmp_buffer[i], NVMCTRL_PAGE_SIZE);
    be08:	f8df b05c 	ldr.w	fp, [pc, #92]	; be68 <_flash_write+0xc4>
	((Nvmctrl *)hw)->ADDR.reg = data;
    be0c:	f8c3 9014 	str.w	r9, [r3, #20]
	((Nvmctrl *)hw)->CTRLB.reg = data;
    be10:	f04f 0800 	mov.w	r8, #0
    be14:	809a      	strh	r2, [r3, #4]
    be16:	aa02      	add	r2, sp, #8
    be18:	4442      	add	r2, r8
    be1a:	eb09 0108 	add.w	r1, r9, r8
    be1e:	6930      	ldr	r0, [r6, #16]
    be20:	f44f 7300 	mov.w	r3, #512	; 0x200
    be24:	f508 7800 	add.w	r8, r8, #512	; 0x200
    be28:	47d8      	blx	fp
		for (i = 0; i < NVMCTRL_BLOCK_PAGES; i++) {
    be2a:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
    be2e:	d1f2      	bne.n	be16 <_flash_write+0x72>
	} while (block_end_addr < (wr_start_addr + length - 1));
    be30:	9b01      	ldr	r3, [sp, #4]
    be32:	4423      	add	r3, r4
    be34:	3b01      	subs	r3, #1
    be36:	4553      	cmp	r3, sl
    be38:	d8bd      	bhi.n	bdb6 <_flash_write+0x12>
}
    be3a:	f50d 5d00 	add.w	sp, sp, #8192	; 0x2000
    be3e:	b003      	add	sp, #12
    be40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tmp_buffer[j][k] = *buffer;
    be44:	a802      	add	r0, sp, #8
    be46:	eb00 2042 	add.w	r0, r0, r2, lsl #9
    be4a:	783f      	ldrb	r7, [r7, #0]
    be4c:	54c7      	strb	r7, [r0, r3]
			k                = (k + 1) % NVMCTRL_PAGE_SIZE;
    be4e:	3301      	adds	r3, #1
    be50:	f3c3 0308 	ubfx	r3, r3, #0, #9
			if (0 == k) {
    be54:	3101      	adds	r1, #1
    be56:	b903      	cbnz	r3, be5a <_flash_write+0xb6>
				j++;
    be58:	3201      	adds	r2, #1
			length--;
    be5a:	9801      	ldr	r0, [sp, #4]
    be5c:	3801      	subs	r0, #1
			wr_start_addr++;
    be5e:	3401      	adds	r4, #1
			length--;
    be60:	9001      	str	r0, [sp, #4]
    be62:	e7c6      	b.n	bdf2 <_flash_write+0x4e>
    be64:	0000bd8b 	.word	0x0000bd8b
    be68:	0000bcd5 	.word	0x0000bcd5

0000be6c <_flash_erase>:
{
    be6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    be70:	f421 54ff 	bic.w	r4, r1, #8160	; 0x1fe0
{
    be74:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    be78:	460e      	mov	r6, r1
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    be7a:	4b25      	ldr	r3, [pc, #148]	; (bf10 <_flash_erase+0xa4>)
{
    be7c:	4607      	mov	r7, r0
    be7e:	4615      	mov	r5, r2
	block_start_addr = dst_addr & ~(NVMCTRL_BLOCK_SIZE - 1);
    be80:	f024 041f 	bic.w	r4, r4, #31
	memset(tmp_buffer, 0xFF, NVMCTRL_PAGE_SIZE);
    be84:	f44f 7200 	mov.w	r2, #512	; 0x200
    be88:	21ff      	movs	r1, #255	; 0xff
    be8a:	4668      	mov	r0, sp
    be8c:	4798      	blx	r3
	if (dst_addr != block_start_addr) {
    be8e:	42a6      	cmp	r6, r4
    be90:	d11e      	bne.n	bed0 <_flash_erase+0x64>
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    be92:	4622      	mov	r2, r4
    be94:	462b      	mov	r3, r5
    be96:	f24a 5001 	movw	r0, #42241	; 0xa501
	while (page_nums >= NVMCTRL_BLOCK_PAGES) {
    be9a:	2b0f      	cmp	r3, #15
    be9c:	d82e      	bhi.n	befc <_flash_erase+0x90>
    be9e:	0929      	lsrs	r1, r5, #4
    bea0:	f06f 020f 	mvn.w	r2, #15
    bea4:	fb02 5501 	mla	r5, r2, r1, r5
    bea8:	eb04 3441 	add.w	r4, r4, r1, lsl #13
	if (page_nums != 0) {
    beac:	b165      	cbz	r5, bec8 <_flash_erase+0x5c>
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    beae:	4e19      	ldr	r6, [pc, #100]	; (bf14 <_flash_erase+0xa8>)
    beb0:	eb04 2545 	add.w	r5, r4, r5, lsl #9
    beb4:	4621      	mov	r1, r4
    beb6:	f44f 7300 	mov.w	r3, #512	; 0x200
    beba:	466a      	mov	r2, sp
    bebc:	4638      	mov	r0, r7
			block_start_addr += NVMCTRL_PAGE_SIZE;
    bebe:	f504 7400 	add.w	r4, r4, #512	; 0x200
			_flash_write(device, block_start_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    bec2:	47b0      	blx	r6
		for (i = 0; i < page_nums; i++) {
    bec4:	42a5      	cmp	r5, r4
    bec6:	d1f5      	bne.n	beb4 <_flash_erase+0x48>
}
    bec8:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    becc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    bed0:	f504 5800 	add.w	r8, r4, #8192	; 0x2000
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    bed4:	f506 59f0 	add.w	r9, r6, #7680	; 0x1e00
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    bed8:	4634      	mov	r4, r6
			_flash_write(device, dst_addr, tmp_buffer, NVMCTRL_PAGE_SIZE);
    beda:	4e0e      	ldr	r6, [pc, #56]	; (bf14 <_flash_erase+0xa8>)
    bedc:	f44f 7300 	mov.w	r3, #512	; 0x200
    bee0:	466a      	mov	r2, sp
    bee2:	4621      	mov	r1, r4
    bee4:	4638      	mov	r0, r7
    bee6:	47b0      	blx	r6
			if (--page_nums == 0) {
    bee8:	3d01      	subs	r5, #1
    beea:	d0ed      	beq.n	bec8 <_flash_erase+0x5c>
			dst_addr += NVMCTRL_PAGE_SIZE;
    beec:	f504 7400 	add.w	r4, r4, #512	; 0x200
			if (dst_addr == block_start_addr) {
    bef0:	45a0      	cmp	r8, r4
    bef2:	d0ce      	beq.n	be92 <_flash_erase+0x26>
		for (i = 0; i < NVMCTRL_BLOCK_PAGES - 1; i++) {
    bef4:	45a1      	cmp	r9, r4
    bef6:	d1f1      	bne.n	bedc <_flash_erase+0x70>
    bef8:	4644      	mov	r4, r8
    befa:	e7ca      	b.n	be92 <_flash_erase+0x26>
		_flash_erase_block(device->hw, block_start_addr);
    befc:	6939      	ldr	r1, [r7, #16]
	return (((Nvmctrl *)hw)->STATUS.reg & NVMCTRL_STATUS_READY) >> NVMCTRL_STATUS_READY_Pos;
    befe:	8a4e      	ldrh	r6, [r1, #18]
	while (!hri_nvmctrl_get_STATUS_READY_bit(hw)) {
    bf00:	07f6      	lsls	r6, r6, #31
    bf02:	d5fc      	bpl.n	befe <_flash_erase+0x92>
	((Nvmctrl *)hw)->ADDR.reg = data;
    bf04:	614a      	str	r2, [r1, #20]
		page_nums -= NVMCTRL_BLOCK_PAGES;
    bf06:	3b10      	subs	r3, #16
	((Nvmctrl *)hw)->CTRLB.reg = data;
    bf08:	8088      	strh	r0, [r1, #4]
		block_start_addr += NVMCTRL_BLOCK_SIZE;
    bf0a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		page_nums -= NVMCTRL_BLOCK_PAGES;
    bf0e:	e7c4      	b.n	be9a <_flash_erase+0x2e>
    bf10:	00012e05 	.word	0x00012e05
    bf14:	0000bda5 	.word	0x0000bda5

0000bf18 <_flash_is_locked>:
	return !(hri_nvmctrl_get_RUNLOCK_reg(device->hw, 1 << region_id));
    bf18:	6903      	ldr	r3, [r0, #16]
    bf1a:	f3c1 31cf 	ubfx	r1, r1, #15, #16
	tmp = ((Nvmctrl *)hw)->RUNLOCK.reg;
    bf1e:	699a      	ldr	r2, [r3, #24]
    bf20:	2301      	movs	r3, #1
    bf22:	fa03 f101 	lsl.w	r1, r3, r1
    bf26:	4211      	tst	r1, r2
}
    bf28:	bf0c      	ite	eq
    bf2a:	4618      	moveq	r0, r3
    bf2c:	2000      	movne	r0, #0
    bf2e:	4770      	bx	lr

0000bf30 <NVMCTRL_0_Handler>:
/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
	_nvm_interrupt_handler(_nvm_dev);
    bf30:	4b09      	ldr	r3, [pc, #36]	; (bf58 <NVMCTRL_0_Handler+0x28>)
    bf32:	6818      	ldr	r0, [r3, #0]
	void *const hw = device->hw;
    bf34:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    bf36:	8a1a      	ldrh	r2, [r3, #16]
	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    bf38:	07d2      	lsls	r2, r2, #31
    bf3a:	d504      	bpl.n	bf46 <NVMCTRL_0_Handler+0x16>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    bf3c:	2201      	movs	r2, #1
    bf3e:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.ready_cb) {
    bf40:	6803      	ldr	r3, [r0, #0]
		if (NULL != device->flash_cb.error_cb) {
    bf42:	b143      	cbz	r3, bf56 <NVMCTRL_0_Handler+0x26>
			device->flash_cb.error_cb(device);
    bf44:	4718      	bx	r3
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    bf46:	8a1a      	ldrh	r2, [r3, #16]
    bf48:	b292      	uxth	r2, r2
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    bf4a:	b122      	cbz	r2, bf56 <NVMCTRL_0_Handler+0x26>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    bf4c:	f240 225e 	movw	r2, #606	; 0x25e
    bf50:	821a      	strh	r2, [r3, #16]
		if (NULL != device->flash_cb.error_cb) {
    bf52:	6843      	ldr	r3, [r0, #4]
    bf54:	e7f5      	b.n	bf42 <NVMCTRL_0_Handler+0x12>
}
    bf56:	4770      	bx	lr
    bf58:	2000083c 	.word	0x2000083c

0000bf5c <NVMCTRL_1_Handler>:
    bf5c:	4b00      	ldr	r3, [pc, #0]	; (bf60 <NVMCTRL_1_Handler+0x4>)
    bf5e:	4718      	bx	r3
    bf60:	0000bf31 	.word	0x0000bf31

0000bf64 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    bf64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	CRITICAL_SECTION_ENTER();
    bf66:	4b0e      	ldr	r3, [pc, #56]	; (bfa0 <gpio_get_pin_level+0x3c>)
    bf68:	4605      	mov	r5, r0
    bf6a:	a801      	add	r0, sp, #4
    bf6c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    bf6e:	4a0d      	ldr	r2, [pc, #52]	; (bfa4 <gpio_get_pin_level+0x40>)
    bf70:	096b      	lsrs	r3, r5, #5
    bf72:	01d9      	lsls	r1, r3, #7
    bf74:	eb02 13c3 	add.w	r3, r2, r3, lsl #7
    bf78:	5851      	ldr	r1, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    bf7a:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    bf7c:	691c      	ldr	r4, [r3, #16]
	CRITICAL_SECTION_LEAVE();
    bf7e:	4b0a      	ldr	r3, [pc, #40]	; (bfa8 <gpio_get_pin_level+0x44>)
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bf80:	4054      	eors	r4, r2
    bf82:	400c      	ands	r4, r1
	CRITICAL_SECTION_LEAVE();
    bf84:	a801      	add	r0, sp, #4
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    bf86:	4054      	eors	r4, r2
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    bf88:	f005 051f 	and.w	r5, r5, #31
	CRITICAL_SECTION_LEAVE();
    bf8c:	4798      	blx	r3
    bf8e:	2001      	movs	r0, #1
    bf90:	fa00 f505 	lsl.w	r5, r0, r5
    bf94:	4225      	tst	r5, r4
}
    bf96:	bf08      	it	eq
    bf98:	2000      	moveq	r0, #0
    bf9a:	b003      	add	sp, #12
    bf9c:	bd30      	pop	{r4, r5, pc}
    bf9e:	bf00      	nop
    bfa0:	00011679 	.word	0x00011679
    bfa4:	41008000 	.word	0x41008000
    bfa8:	00011687 	.word	0x00011687

0000bfac <hiddf_demo_sof_event>:
#endif /* CONF_USB_COMPOSITE_CDC_ECHO_DEMO */

#if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO
static uint32_t pin_btn1, pin_btn2, pin_btn3;
static void     hiddf_demo_sof_event(void)
{
    bfac:	b570      	push	{r4, r5, r6, lr}
        {HID_CAPS_LOCK, false, HID_KB_KEY_UP},
    };
	uint8_t b_btn_state;
#endif

	if (interval++ > 10) {
    bfae:	4a15      	ldr	r2, [pc, #84]	; (c004 <hiddf_demo_sof_event+0x58>)
    bfb0:	7913      	ldrb	r3, [r2, #4]
    bfb2:	2b0a      	cmp	r3, #10
    bfb4:	4614      	mov	r4, r2
    bfb6:	d802      	bhi.n	bfbe <hiddf_demo_sof_event+0x12>
    bfb8:	3301      	adds	r3, #1
    bfba:	7113      	strb	r3, [r2, #4]
#endif
	}
	(void)pin_btn1;
	(void)pin_btn2;
	(void)pin_btn3;
}
    bfbc:	bd70      	pop	{r4, r5, r6, pc}
		interval = 0;
    bfbe:	2300      	movs	r3, #0
		if (!gpio_get_pin_level(pin_btn1)) {
    bfc0:	7a10      	ldrb	r0, [r2, #8]
    bfc2:	4d11      	ldr	r5, [pc, #68]	; (c008 <hiddf_demo_sof_event+0x5c>)
		interval = 0;
    bfc4:	7113      	strb	r3, [r2, #4]
		if (!gpio_get_pin_level(pin_btn1)) {
    bfc6:	47a8      	blx	r5
    bfc8:	b920      	cbnz	r0, bfd4 <hiddf_demo_sof_event+0x28>
			hiddf_mouse_move(-5, HID_MOUSE_X_AXIS_MV);
    bfca:	4b10      	ldr	r3, [pc, #64]	; (c00c <hiddf_demo_sof_event+0x60>)
    bfcc:	2101      	movs	r1, #1
    bfce:	f06f 0004 	mvn.w	r0, #4
    bfd2:	4798      	blx	r3
		if (!gpio_get_pin_level(pin_btn3)) {
    bfd4:	7b20      	ldrb	r0, [r4, #12]
    bfd6:	47a8      	blx	r5
    bfd8:	b918      	cbnz	r0, bfe2 <hiddf_demo_sof_event+0x36>
			hiddf_mouse_move(5, HID_MOUSE_X_AXIS_MV);
    bfda:	4b0c      	ldr	r3, [pc, #48]	; (c00c <hiddf_demo_sof_event+0x60>)
    bfdc:	2101      	movs	r1, #1
    bfde:	2005      	movs	r0, #5
    bfe0:	4798      	blx	r3
		if (b_btn_last_state != (b_btn_state = !gpio_get_pin_level(pin_btn2))) {
    bfe2:	7c20      	ldrb	r0, [r4, #16]
    bfe4:	47a8      	blx	r5
    bfe6:	7d22      	ldrb	r2, [r4, #20]
    bfe8:	f080 0001 	eor.w	r0, r0, #1
    bfec:	b2c3      	uxtb	r3, r0
    bfee:	429a      	cmp	r2, r3
    bff0:	d0e4      	beq.n	bfbc <hiddf_demo_sof_event+0x10>
			b_btn_last_state = b_btn_state;
    bff2:	4807      	ldr	r0, [pc, #28]	; (c010 <hiddf_demo_sof_event+0x64>)
    bff4:	7523      	strb	r3, [r4, #20]
			if (1 == b_btn_last_state) {
    bff6:	7083      	strb	r3, [r0, #2]
}
    bff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			hiddf_keyboard_keys_state_change(key_array, 1);
    bffc:	4b05      	ldr	r3, [pc, #20]	; (c014 <hiddf_demo_sof_event+0x68>)
    bffe:	2101      	movs	r1, #1
    c000:	4718      	bx	r3
    c002:	bf00      	nop
    c004:	20000840 	.word	0x20000840
    c008:	0000bf65 	.word	0x0000bf65
    c00c:	0000d3cd 	.word	0x0000d3cd
    c010:	20000358 	.word	0x20000358
    c014:	0000de59 	.word	0x0000de59

0000c018 <composite_device_init>:
	usbdc_register_handler(USBDC_HDL_SOF, &hiddf_demo_sof_event_h);
}
#endif /* #if CONF_USB_COMPOSITE_HID_MOUSE_DEMO || CONF_USB_COMPOSITE_HID_KEYBOARD_DEMO */

void composite_device_init(void)
{
    c018:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    c01a:	4b05      	ldr	r3, [pc, #20]	; (c030 <composite_device_init+0x18>)
    c01c:	4805      	ldr	r0, [pc, #20]	; (c034 <composite_device_init+0x1c>)
    c01e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
#if CONF_USB_COMPOSITE_CDC_ACM_EN
	cdcdf_acm_init();
    c020:	4b05      	ldr	r3, [pc, #20]	; (c038 <composite_device_init+0x20>)
    c022:	4798      	blx	r3
#endif
#if CONF_USB_COMPOSITE_HID_MOUSE_EN
	hiddf_mouse_init();
    c024:	4b05      	ldr	r3, [pc, #20]	; (c03c <composite_device_init+0x24>)
    c026:	4798      	blx	r3
	hiddf_keyboard_init();
#endif
#if CONF_USB_COMPOSITE_MSC_EN
	mscdf_init(CONF_USB_MSC_MAX_LUN);
#endif
}
    c028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hiddf_keyboard_init();
    c02c:	4b04      	ldr	r3, [pc, #16]	; (c040 <composite_device_init+0x28>)
    c02e:	4718      	bx	r3
    c030:	00011fad 	.word	0x00011fad
    c034:	20000855 	.word	0x20000855
    c038:	0000bb2d 	.word	0x0000bb2d
    c03c:	0000d389 	.word	0x0000d389
    c040:	0000de15 	.word	0x0000de15

0000c044 <composite_device_start>:

void composite_device_start(void)
{
    c044:	b510      	push	{r4, lr}
	usbdc_start(multi_desc);
    c046:	4b03      	ldr	r3, [pc, #12]	; (c054 <composite_device_start+0x10>)
    c048:	4803      	ldr	r0, [pc, #12]	; (c058 <composite_device_start+0x14>)
    c04a:	4798      	blx	r3
	usbdc_attach();
}
    c04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	usbdc_attach();
    c050:	4b02      	ldr	r3, [pc, #8]	; (c05c <composite_device_start+0x18>)
    c052:	4718      	bx	r3
    c054:	00012019 	.word	0x00012019
    c058:	20000364 	.word	0x20000364
    c05c:	0001204d 	.word	0x0001204d

0000c060 <usb_init>:
}

void usb_init(void)
{

	composite_device_init();
    c060:	4b00      	ldr	r3, [pc, #0]	; (c064 <usb_init+0x4>)
    c062:	4718      	bx	r3
    c064:	0000c019 	.word	0x0000c019

0000c068 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    c068:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    c06a:	6805      	ldr	r5, [r0, #0]

	if (!head) {
    c06c:	b91d      	cbnz	r5, c076 <timer_add_timer_task+0xe>
		list_insert_as_head(list, new_task);
    c06e:	4b0f      	ldr	r3, [pc, #60]	; (c0ac <timer_add_timer_task+0x44>)
	if (it == head) {
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
	}
}
    c070:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		list_insert_after(prev, new_task);
    c074:	4718      	bx	r3
		if (time_left >= new_task->interval)
    c076:	f8d1 c008 	ldr.w	ip, [r1, #8]
    c07a:	462c      	mov	r4, r5
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    c07c:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    c07e:	f1c2 0e01 	rsb	lr, r2, #1
		if (it->time_label <= time) {
    c082:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    c086:	4293      	cmp	r3, r2
			time_left = it->interval - (time - it->time_label);
    c088:	bf95      	itete	ls
    c08a:	19db      	addls	r3, r3, r7
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    c08c:	4473      	addhi	r3, lr
			time_left = it->interval - (time - it->time_label);
    c08e:	1a9b      	subls	r3, r3, r2
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    c090:	19db      	addhi	r3, r3, r7
		if (time_left >= new_task->interval)
    c092:	459c      	cmp	ip, r3
    c094:	d907      	bls.n	c0a6 <timer_add_timer_task+0x3e>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    c096:	6823      	ldr	r3, [r4, #0]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    c098:	4626      	mov	r6, r4
    c09a:	b913      	cbnz	r3, c0a2 <timer_add_timer_task+0x3a>
		list_insert_after(prev, new_task);
    c09c:	4b04      	ldr	r3, [pc, #16]	; (c0b0 <timer_add_timer_task+0x48>)
    c09e:	4630      	mov	r0, r6
    c0a0:	e7e6      	b.n	c070 <timer_add_timer_task+0x8>
    c0a2:	461c      	mov	r4, r3
    c0a4:	e7ed      	b.n	c082 <timer_add_timer_task+0x1a>
	if (it == head) {
    c0a6:	42a5      	cmp	r5, r4
    c0a8:	d0e1      	beq.n	c06e <timer_add_timer_task+0x6>
    c0aa:	e7f7      	b.n	c09c <timer_add_timer_task+0x34>
    c0ac:	0000f365 	.word	0x0000f365
    c0b0:	0000f391 	.word	0x0000f391

0000c0b4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    c0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    c0b8:	e9d0 6504 	ldrd	r6, r5, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    c0bc:	7e03      	ldrb	r3, [r0, #24]
	uint32_t                 time  = ++timer->time;
    c0be:	3601      	adds	r6, #1
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    c0c0:	07da      	lsls	r2, r3, #31
{
    c0c2:	4604      	mov	r4, r0
	uint32_t                 time  = ++timer->time;
    c0c4:	6106      	str	r6, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    c0c6:	d41f      	bmi.n	c108 <timer_process_counted+0x54>
    c0c8:	7e03      	ldrb	r3, [r0, #24]
    c0ca:	079b      	lsls	r3, r3, #30
    c0cc:	d41c      	bmi.n	c108 <timer_process_counted+0x54>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    c0ce:	f8df 8044 	ldr.w	r8, [pc, #68]	; c114 <timer_process_counted+0x60>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    c0d2:	f8df 9044 	ldr.w	r9, [pc, #68]	; c118 <timer_process_counted+0x64>
		list_remove_head(&timer->tasks);
    c0d6:	f100 0714 	add.w	r7, r0, #20
	while (it && ((time - it->time_label) >= it->interval)) {
    c0da:	b1cd      	cbz	r5, c110 <timer_process_counted+0x5c>
    c0dc:	686b      	ldr	r3, [r5, #4]
    c0de:	68aa      	ldr	r2, [r5, #8]
    c0e0:	1af3      	subs	r3, r6, r3
    c0e2:	4293      	cmp	r3, r2
    c0e4:	d314      	bcc.n	c110 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
    c0e6:	4638      	mov	r0, r7
    c0e8:	47c0      	blx	r8
		if (TIMER_TASK_REPEAT == tmp->mode) {
    c0ea:	7c2b      	ldrb	r3, [r5, #16]
    c0ec:	2b01      	cmp	r3, #1
    c0ee:	d104      	bne.n	c0fa <timer_process_counted+0x46>
			tmp->time_label = time;
    c0f0:	606e      	str	r6, [r5, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    c0f2:	4632      	mov	r2, r6
    c0f4:	4629      	mov	r1, r5
    c0f6:	4638      	mov	r0, r7
    c0f8:	47c8      	blx	r9
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    c0fa:	f8d4 a014 	ldr.w	sl, [r4, #20]

		tmp->cb(tmp);
    c0fe:	68eb      	ldr	r3, [r5, #12]
    c100:	4628      	mov	r0, r5
    c102:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
    c104:	4655      	mov	r5, sl
    c106:	e7e8      	b.n	c0da <timer_process_counted+0x26>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    c108:	7e23      	ldrb	r3, [r4, #24]
    c10a:	f043 0302 	orr.w	r3, r3, #2
    c10e:	7623      	strb	r3, [r4, #24]
	}
}
    c110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c114:	0000f3d9 	.word	0x0000f3d9
    c118:	0000c069 	.word	0x0000c069

0000c11c <timer_init>:
{
    c11c:	b570      	push	{r4, r5, r6, lr}
    c11e:	460d      	mov	r5, r1
    c120:	4616      	mov	r6, r2
	ASSERT(descr && hw && func);
    c122:	4604      	mov	r4, r0
    c124:	b118      	cbz	r0, c12e <timer_init+0x12>
    c126:	b189      	cbz	r1, c14c <timer_init+0x30>
    c128:	1e10      	subs	r0, r2, #0
    c12a:	bf18      	it	ne
    c12c:	2001      	movne	r0, #1
    c12e:	223b      	movs	r2, #59	; 0x3b
    c130:	4907      	ldr	r1, [pc, #28]	; (c150 <timer_init+0x34>)
    c132:	4b08      	ldr	r3, [pc, #32]	; (c154 <timer_init+0x38>)
    c134:	4798      	blx	r3
	descr->func = func;
    c136:	4620      	mov	r0, r4
	descr->func->init(&descr->device, hw);
    c138:	6833      	ldr	r3, [r6, #0]
	descr->func = func;
    c13a:	f840 6b04 	str.w	r6, [r0], #4
	descr->func->init(&descr->device, hw);
    c13e:	4629      	mov	r1, r5
    c140:	4798      	blx	r3
	descr->device.timer_cb.period_expired = timer_process_counted;
    c142:	4b05      	ldr	r3, [pc, #20]	; (c158 <timer_init+0x3c>)
    c144:	6063      	str	r3, [r4, #4]
	descr->time                           = 0;
    c146:	2000      	movs	r0, #0
    c148:	6160      	str	r0, [r4, #20]
}
    c14a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    c14c:	4608      	mov	r0, r1
    c14e:	e7ee      	b.n	c12e <timer_init+0x12>
    c150:	00015ce0 	.word	0x00015ce0
    c154:	0000d415 	.word	0x0000d415
    c158:	0000c0b5 	.word	0x0000c0b5

0000c15c <timer_start>:
{
    c15c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr && descr->func);
    c15e:	4605      	mov	r5, r0
    c160:	b118      	cbz	r0, c16a <timer_start+0xe>
    c162:	6800      	ldr	r0, [r0, #0]
    c164:	3800      	subs	r0, #0
    c166:	bf18      	it	ne
    c168:	2001      	movne	r0, #1
	if (descr->func->is_timer_started(&descr->device)) {
    c16a:	462e      	mov	r6, r5
	ASSERT(descr && descr->func);
    c16c:	4909      	ldr	r1, [pc, #36]	; (c194 <timer_start+0x38>)
    c16e:	4b0a      	ldr	r3, [pc, #40]	; (c198 <timer_start+0x3c>)
    c170:	2254      	movs	r2, #84	; 0x54
    c172:	4798      	blx	r3
	if (descr->func->is_timer_started(&descr->device)) {
    c174:	f856 3b04 	ldr.w	r3, [r6], #4
    c178:	699b      	ldr	r3, [r3, #24]
    c17a:	4630      	mov	r0, r6
    c17c:	4798      	blx	r3
    c17e:	4604      	mov	r4, r0
    c180:	b928      	cbnz	r0, c18e <timer_start+0x32>
	descr->func->start_timer(&descr->device);
    c182:	682b      	ldr	r3, [r5, #0]
    c184:	4630      	mov	r0, r6
    c186:	689b      	ldr	r3, [r3, #8]
    c188:	4798      	blx	r3
	return ERR_NONE;
    c18a:	4620      	mov	r0, r4
}
    c18c:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
    c18e:	f06f 0010 	mvn.w	r0, #16
    c192:	e7fb      	b.n	c18c <timer_start+0x30>
    c194:	00015ce0 	.word	0x00015ce0
    c198:	0000d415 	.word	0x0000d415

0000c19c <timer_add_task>:
{
    c19c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c1a0:	460d      	mov	r5, r1
	ASSERT(descr && task && descr->func);
    c1a2:	4604      	mov	r4, r0
    c1a4:	b120      	cbz	r0, c1b0 <timer_add_task+0x14>
    c1a6:	b309      	cbz	r1, c1ec <timer_add_task+0x50>
    c1a8:	6800      	ldr	r0, [r0, #0]
    c1aa:	3800      	subs	r0, #0
    c1ac:	bf18      	it	ne
    c1ae:	2001      	movne	r0, #1
    c1b0:	4920      	ldr	r1, [pc, #128]	; (c234 <timer_add_task+0x98>)
    c1b2:	f8df 8094 	ldr.w	r8, [pc, #148]	; c248 <timer_add_task+0xac>
    c1b6:	227b      	movs	r2, #123	; 0x7b
    c1b8:	47c0      	blx	r8
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    c1ba:	7f23      	ldrb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    c1bc:	f104 0718 	add.w	r7, r4, #24
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
    c1c0:	f043 0301 	orr.w	r3, r3, #1
    c1c4:	7723      	strb	r3, [r4, #28]
	if (is_list_element(&descr->tasks, task)) {
    c1c6:	4629      	mov	r1, r5
    c1c8:	4b1b      	ldr	r3, [pc, #108]	; (c238 <timer_add_task+0x9c>)
    c1ca:	4638      	mov	r0, r7
    c1cc:	4798      	blx	r3
    c1ce:	4606      	mov	r6, r0
    c1d0:	b170      	cbz	r0, c1f0 <timer_add_task+0x54>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    c1d2:	7f23      	ldrb	r3, [r4, #28]
		ASSERT(false);
    c1d4:	4917      	ldr	r1, [pc, #92]	; (c234 <timer_add_task+0x98>)
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    c1d6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		ASSERT(false);
    c1da:	2000      	movs	r0, #0
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    c1dc:	7723      	strb	r3, [r4, #28]
		ASSERT(false);
    c1de:	2280      	movs	r2, #128	; 0x80
    c1e0:	47c0      	blx	r8
		return ERR_ALREADY_INITIALIZED;
    c1e2:	f06f 0011 	mvn.w	r0, #17
}
    c1e6:	b002      	add	sp, #8
    c1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(descr && task && descr->func);
    c1ec:	4608      	mov	r0, r1
    c1ee:	e7df      	b.n	c1b0 <timer_add_task+0x14>
	task->time_label = descr->time;
    c1f0:	6962      	ldr	r2, [r4, #20]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    c1f2:	4b12      	ldr	r3, [pc, #72]	; (c23c <timer_add_task+0xa0>)
	task->time_label = descr->time;
    c1f4:	606a      	str	r2, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
    c1f6:	4629      	mov	r1, r5
    c1f8:	4638      	mov	r0, r7
    c1fa:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
    c1fc:	7f23      	ldrb	r3, [r4, #28]
    c1fe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    c202:	7723      	strb	r3, [r4, #28]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
    c204:	7f23      	ldrb	r3, [r4, #28]
    c206:	f013 0302 	ands.w	r3, r3, #2
    c20a:	d010      	beq.n	c22e <timer_add_task+0x92>
		CRITICAL_SECTION_ENTER()
    c20c:	4b0c      	ldr	r3, [pc, #48]	; (c240 <timer_add_task+0xa4>)
    c20e:	a801      	add	r0, sp, #4
    c210:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    c212:	7f23      	ldrb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    c214:	4620      	mov	r0, r4
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
    c216:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c21a:	7723      	strb	r3, [r4, #28]
		descr->func->set_timer_irq(&descr->device);
    c21c:	f850 3b04 	ldr.w	r3, [r0], #4
    c220:	69db      	ldr	r3, [r3, #28]
    c222:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
    c224:	a801      	add	r0, sp, #4
    c226:	4b07      	ldr	r3, [pc, #28]	; (c244 <timer_add_task+0xa8>)
    c228:	4798      	blx	r3
	return ERR_NONE;
    c22a:	4630      	mov	r0, r6
    c22c:	e7db      	b.n	c1e6 <timer_add_task+0x4a>
    c22e:	4618      	mov	r0, r3
    c230:	e7d9      	b.n	c1e6 <timer_add_task+0x4a>
    c232:	bf00      	nop
    c234:	00015ce0 	.word	0x00015ce0
    c238:	0000f355 	.word	0x0000f355
    c23c:	0000c069 	.word	0x0000c069
    c240:	00011679 	.word	0x00011679
    c244:	00011687 	.word	0x00011687
    c248:	0000d415 	.word	0x0000d415

0000c24c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    c24c:	2000      	movs	r0, #0
    c24e:	4770      	bx	lr

0000c250 <_usb_d_dev_wait_dfll_rdy>:
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    c250:	4b07      	ldr	r3, [pc, #28]	; (c270 <_usb_d_dev_wait_dfll_rdy+0x20>)
    c252:	f893 2020 	ldrb.w	r2, [r3, #32]
/**
 * \brief Wait DFLL clock to be ready
 */
static inline void _usb_d_dev_wait_dfll_rdy(void)
{
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    c256:	07d1      	lsls	r1, r2, #31
    c258:	d506      	bpl.n	c268 <_usb_d_dev_wait_dfll_rdy+0x18>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c25a:	691a      	ldr	r2, [r3, #16]
	tmp &= mask;
    c25c:	f402 6210 	and.w	r2, r2, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    c260:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
    c264:	d1f9      	bne.n	c25a <_usb_d_dev_wait_dfll_rdy+0xa>
    c266:	4770      	bx	lr
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    c268:	691a      	ldr	r2, [r3, #16]
		       != (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
			;
	} else {
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    c26a:	05d2      	lsls	r2, r2, #23
    c26c:	d5fc      	bpl.n	c268 <_usb_d_dev_wait_dfll_rdy+0x18>
			;
	}
}
    c26e:	4770      	bx	lr
    c270:	40001000 	.word	0x40001000

0000c274 <_usb_d_dev_ept>:
 * \param[in] epn Endpoint number.
 * \param[in] dir Endpoint direction.
 */
static inline struct _usb_d_dev_ep *_usb_d_dev_ept(uint8_t epn, bool dir)
{
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    c274:	b110      	cbz	r0, c27c <_usb_d_dev_ept+0x8>
    c276:	b109      	cbz	r1, c27c <_usb_d_dev_ept+0x8>
    c278:	3005      	adds	r0, #5
    c27a:	b2c0      	uxtb	r0, r0
	return &dev_inst.ep[ep_index];
    c27c:	2314      	movs	r3, #20
    c27e:	fb00 3003 	mla	r0, r0, r3, r3
}
    c282:	4b01      	ldr	r3, [pc, #4]	; (c288 <_usb_d_dev_ept+0x14>)
    c284:	4418      	add	r0, r3
    c286:	4770      	bx	lr
    c288:	20000898 	.word	0x20000898

0000c28c <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    c28c:	b430      	push	{r4, r5}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c28e:	7cc1      	ldrb	r1, [r0, #19]
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    c290:	7c85      	ldrb	r5, [r0, #18]

	if (!is_ctrl) {
    c292:	f001 0307 	and.w	r3, r1, #7
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    c296:	f005 020f 	and.w	r2, r5, #15
	if (!is_ctrl) {
    c29a:	2b01      	cmp	r3, #1
    c29c:	ea4f 1442 	mov.w	r4, r2, lsl #5
    c2a0:	f102 0308 	add.w	r3, r2, #8
    c2a4:	d00a      	beq.n	c2bc <_usb_d_dev_handle_setup+0x30>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c2a6:	015a      	lsls	r2, r3, #5
    c2a8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    c2ac:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c2b0:	2110      	movs	r1, #16
    c2b2:	71d1      	strb	r1, [r2, #7]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
    c2b4:	bc30      	pop	{r4, r5}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    c2b6:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    c2ba:	4770      	bx	lr
	if (_usb_d_dev_ep_is_busy(ept)) {
    c2bc:	f011 0f40 	tst.w	r1, #64	; 0x40
    c2c0:	d00b      	beq.n	c2da <_usb_d_dev_handle_setup+0x4e>
		ept->flags.bits.is_busy = 0;
    c2c2:	0152      	lsls	r2, r2, #5
    c2c4:	f36f 1186 	bfc	r1, #6, #1
    c2c8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c2cc:	74c1      	strb	r1, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c2ce:	2180      	movs	r1, #128	; 0x80
    c2d0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c2d4:	2140      	movs	r1, #64	; 0x40
    c2d6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105
	ept->flags.bits.is_stalled = 0;
    c2da:	7cc2      	ldrb	r2, [r0, #19]
    c2dc:	f36f 02c3 	bfc	r2, #3, #1
    c2e0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    c2e2:	4a0a      	ldr	r2, [pc, #40]	; (c30c <_usb_d_dev_handle_setup+0x80>)
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c2e4:	015b      	lsls	r3, r3, #5
    c2e6:	1911      	adds	r1, r2, r4
    c2e8:	2000      	movs	r0, #0
    c2ea:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c2ee:	f881 023a 	strb.w	r0, [r1, #570]	; 0x23a
    c2f2:	f881 024a 	strb.w	r0, [r1, #586]	; 0x24a
    c2f6:	216f      	movs	r1, #111	; 0x6f
    c2f8:	71d9      	strb	r1, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c2fa:	f104 4382 	add.w	r3, r4, #1090519040	; 0x41000000
	dev_inst.ep_callbacks.setup(ept->ep);
    c2fe:	4628      	mov	r0, r5
    c300:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    c304:	bc30      	pop	{r4, r5}
	dev_inst.ep_callbacks.setup(ept->ep);
    c306:	6893      	ldr	r3, [r2, #8]
    c308:	4718      	bx	r3
    c30a:	bf00      	nop
    c30c:	20000898 	.word	0x20000898

0000c310 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    c310:	b410      	push	{r4}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c312:	7c84      	ldrb	r4, [r0, #18]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c314:	6882      	ldr	r2, [r0, #8]
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    c316:	2320      	movs	r3, #32
    c318:	fa03 f101 	lsl.w	r1, r3, r1
    c31c:	f004 030f 	and.w	r3, r4, #15
    c320:	015b      	lsls	r3, r3, #5
    c322:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    c326:	b2c9      	uxtb	r1, r1
    c328:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c32c:	4b03      	ldr	r3, [pc, #12]	; (c33c <_usb_d_dev_handle_stall+0x2c>)
    c32e:	4620      	mov	r0, r4
    c330:	691b      	ldr	r3, [r3, #16]
}
    c332:	f85d 4b04 	ldr.w	r4, [sp], #4
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    c336:	2101      	movs	r1, #1
    c338:	4718      	bx	r3
    c33a:	bf00      	nop
    c33c:	20000898 	.word	0x20000898

0000c340 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    c340:	b410      	push	{r4}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c342:	7c84      	ldrb	r4, [r0, #18]
    c344:	2cff      	cmp	r4, #255	; 0xff
    c346:	d00c      	beq.n	c362 <_usb_d_dev_trans_done+0x22>
    c348:	7cc3      	ldrb	r3, [r0, #19]
    c34a:	065a      	lsls	r2, r3, #25
    c34c:	d509      	bpl.n	c362 <_usb_d_dev_trans_done+0x22>
		return;
	}
	ept->flags.bits.is_busy = 0;
    c34e:	f36f 1386 	bfc	r3, #6, #1
    c352:	74c3      	strb	r3, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c354:	4b04      	ldr	r3, [pc, #16]	; (c368 <_usb_d_dev_trans_done+0x28>)
    c356:	6882      	ldr	r2, [r0, #8]
    c358:	691b      	ldr	r3, [r3, #16]
    c35a:	4620      	mov	r0, r4
}
    c35c:	f85d 4b04 	ldr.w	r4, [sp], #4
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    c360:	4718      	bx	r3
}
    c362:	f85d 4b04 	ldr.w	r4, [sp], #4
    c366:	4770      	bx	lr
    c368:	20000898 	.word	0x20000898

0000c36c <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    c36c:	b477      	push	{r0, r1, r2, r4, r5, r6}
	uint8_t epn = USB_EP_GET_N(ept->ep);
    c36e:	7c83      	ldrb	r3, [r0, #18]
{
    c370:	460d      	mov	r5, r1
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c372:	2bff      	cmp	r3, #255	; 0xff
{
    c374:	4611      	mov	r1, r2
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    c376:	f644 2225 	movw	r2, #18981	; 0x4a25
    c37a:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    c37e:	d020      	beq.n	c3c2 <_usb_d_dev_trans_stop+0x56>
    c380:	7cc2      	ldrb	r2, [r0, #19]
    c382:	0652      	lsls	r2, r2, #25
    c384:	d51d      	bpl.n	c3c2 <_usb_d_dev_trans_stop+0x56>
		return;
	}
	/* Stop transfer */
	if (dir) {
    c386:	f003 030f 	and.w	r3, r3, #15
    c38a:	f103 0408 	add.w	r4, r3, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c38e:	0162      	lsls	r2, r4, #5
    c390:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c394:	b195      	cbz	r5, c3bc <_usb_d_dev_trans_stop+0x50>
    c396:	2680      	movs	r6, #128	; 0x80
    c398:	7116      	strb	r6, [r2, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    c39a:	aa02      	add	r2, sp, #8
    c39c:	4415      	add	r5, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c39e:	0164      	lsls	r4, r4, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c3a0:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c3a2:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c3a6:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c3aa:	f815 2c04 	ldrb.w	r2, [r5, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c3ae:	71e2      	strb	r2, [r4, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c3b0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    c3b4:	4b04      	ldr	r3, [pc, #16]	; (c3c8 <_usb_d_dev_trans_stop+0x5c>)
}
    c3b6:	b003      	add	sp, #12
    c3b8:	bc70      	pop	{r4, r5, r6}
	_usb_d_dev_trans_done(ept, code);
    c3ba:	4718      	bx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c3bc:	2640      	movs	r6, #64	; 0x40
    c3be:	7156      	strb	r6, [r2, #5]
}
    c3c0:	e7eb      	b.n	c39a <_usb_d_dev_trans_stop+0x2e>
}
    c3c2:	b003      	add	sp, #12
    c3c4:	bc70      	pop	{r4, r5, r6}
    c3c6:	4770      	bx	lr
    c3c8:	0000c341 	.word	0x0000c341

0000c3cc <_usb_d_dev_handle_trfail>:
{
    c3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    c3ce:	7c83      	ldrb	r3, [r0, #18]
    c3d0:	f003 0c0f 	and.w	ip, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    c3d4:	f640 0204 	movw	r2, #2052	; 0x804
    c3d8:	4663      	mov	r3, ip
    c3da:	f8ad 2004 	strh.w	r2, [sp, #4]
	UsbDeviceDescBank *bank    = prvt_inst.desc_table[epn].DeviceDescBank;
    c3de:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    c3e0:	f10c 0308 	add.w	r3, ip, #8
    c3e4:	460c      	mov	r4, r1

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    c3e6:	0159      	lsls	r1, r3, #5
    c3e8:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    c3ec:	780f      	ldrb	r7, [r1, #0]
    c3ee:	b334      	cbz	r4, c43e <_usb_d_dev_handle_trfail+0x72>
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    c3f0:	f3c7 1702 	ubfx	r7, r7, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    c3f4:	4e2c      	ldr	r6, [pc, #176]	; (c4a8 <_usb_d_dev_handle_trfail+0xdc>)
    c3f6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    c3fa:	4416      	add	r6, r2
    c3fc:	aa02      	add	r2, sp, #8
    c3fe:	4422      	add	r2, r4
    c400:	7ab5      	ldrb	r5, [r6, #10]
    c402:	f812 ec04 	ldrb.w	lr, [r2, #-4]
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    c406:	2f02      	cmp	r7, #2
	st.reg = bank[bank_n].STATUS_BK.reg;
    c408:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    c40a:	ea4f 124c 	mov.w	r2, ip, lsl #5
    c40e:	d119      	bne.n	c444 <_usb_d_dev_handle_trfail+0x78>
    c410:	07e9      	lsls	r1, r5, #31
    c412:	d517      	bpl.n	c444 <_usb_d_dev_handle_trfail+0x78>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    c414:	7ab1      	ldrb	r1, [r6, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c416:	015b      	lsls	r3, r3, #5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c418:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c41c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c420:	f36f 0100 	bfc	r1, #0, #1
    c424:	72b1      	strb	r1, [r6, #10]
    c426:	f883 e007 	strb.w	lr, [r3, #7]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    c42a:	f004 0101 	and.w	r1, r4, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c42e:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
    c432:	2204      	movs	r2, #4
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c434:	4b1d      	ldr	r3, [pc, #116]	; (c4ac <_usb_d_dev_handle_trfail+0xe0>)
}
    c436:	b003      	add	sp, #12
    c438:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c43c:	4718      	bx	r3
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    c43e:	f007 0707 	and.w	r7, r7, #7
	return tmp;
    c442:	e7d7      	b.n	c3f4 <_usb_d_dev_handle_trfail+0x28>
	} else if (st.bit.ERRORFLOW) {
    c444:	f015 0502 	ands.w	r5, r5, #2
    c448:	d01b      	beq.n	c482 <_usb_d_dev_handle_trfail+0xb6>
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    c44a:	7ab1      	ldrb	r1, [r6, #10]
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c44c:	7cc5      	ldrb	r5, [r0, #19]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c44e:	015b      	lsls	r3, r3, #5
    c450:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    c454:	f36f 0141 	bfc	r1, #1, #1
    c458:	72b1      	strb	r1, [r6, #10]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c45a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c45e:	f883 e007 	strb.w	lr, [r3, #7]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    c462:	f005 0307 	and.w	r3, r5, #7
    c466:	2b01      	cmp	r3, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c468:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
    c46c:	d119      	bne.n	c4a2 <_usb_d_dev_handle_trfail+0xd6>
    c46e:	066b      	lsls	r3, r5, #25
    c470:	d517      	bpl.n	c4a2 <_usb_d_dev_handle_trfail+0xd6>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    c472:	7cc3      	ldrb	r3, [r0, #19]
    c474:	ebb4 1fd3 	cmp.w	r4, r3, lsr #7
    c478:	ea4f 11d3 	mov.w	r1, r3, lsr #7
    c47c:	d011      	beq.n	c4a2 <_usb_d_dev_handle_trfail+0xd6>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    c47e:	2200      	movs	r2, #0
    c480:	e7d8      	b.n	c434 <_usb_d_dev_handle_trfail+0x68>
	bank->STATUS_BK.reg     = 0;
    c482:	490b      	ldr	r1, [pc, #44]	; (c4b0 <_usb_d_dev_handle_trfail+0xe4>)
    c484:	eb04 044c 	add.w	r4, r4, ip, lsl #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c488:	015b      	lsls	r3, r3, #5
    c48a:	eb01 1404 	add.w	r4, r1, r4, lsl #4
    c48e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c492:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    c496:	f884 523a 	strb.w	r5, [r4, #570]	; 0x23a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c49a:	f883 e007 	strb.w	lr, [r3, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c49e:	f882 e108 	strb.w	lr, [r2, #264]	; 0x108
}
    c4a2:	b003      	add	sp, #12
    c4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4a6:	bf00      	nop
    c4a8:	20000ac8 	.word	0x20000ac8
    c4ac:	0000c36d 	.word	0x0000c36d
    c4b0:	20000898 	.word	0x20000898

0000c4b4 <_usb_d_dev_reset_epts>:
{
    c4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4b8:	4c0a      	ldr	r4, [pc, #40]	; (c4e4 <_usb_d_dev_reset_epts+0x30>)
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c4ba:	4f0b      	ldr	r7, [pc, #44]	; (c4e8 <_usb_d_dev_reset_epts+0x34>)
{
    c4bc:	2501      	movs	r5, #1
		dev_inst.ep[i].ep       = 0xFF;
    c4be:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    c4c0:	2103      	movs	r1, #3
    c4c2:	4620      	mov	r0, r4
    c4c4:	3501      	adds	r5, #1
    c4c6:	47b8      	blx	r7
		dev_inst.ep[i].flags.u8 = 0;
    c4c8:	2100      	movs	r1, #0
	for (i = 0; i < USB_D_N_EP; i++) {
    c4ca:	2d1c      	cmp	r5, #28
		dev_inst.ep[i].ep       = 0xFF;
    c4cc:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    c4ce:	74e1      	strb	r1, [r4, #19]
	for (i = 0; i < USB_D_N_EP; i++) {
    c4d0:	f104 0414 	add.w	r4, r4, #20
    c4d4:	d1f4      	bne.n	c4c0 <_usb_d_dev_reset_epts+0xc>
}
    c4d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    c4da:	4804      	ldr	r0, [pc, #16]	; (c4ec <_usb_d_dev_reset_epts+0x38>)
    c4dc:	4b04      	ldr	r3, [pc, #16]	; (c4f0 <_usb_d_dev_reset_epts+0x3c>)
    c4de:	22c0      	movs	r2, #192	; 0xc0
    c4e0:	4718      	bx	r3
    c4e2:	bf00      	nop
    c4e4:	200008ac 	.word	0x200008ac
    c4e8:	0000c341 	.word	0x0000c341
    c4ec:	20000ac8 	.word	0x20000ac8
    c4f0:	00012e05 	.word	0x00012e05

0000c4f4 <_usb_d_dev_in_next>:
{
    c4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4f8:	4604      	mov	r4, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c4fa:	7c80      	ldrb	r0, [r0, #18]
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c4fc:	4688      	mov	r8, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    c4fe:	f000 070f 	and.w	r7, r0, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c502:	2900      	cmp	r1, #0
    c504:	d05b      	beq.n	c5be <_usb_d_dev_in_next+0xca>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    c506:	4b4d      	ldr	r3, [pc, #308]	; (c63c <_usb_d_dev_in_next+0x148>)
    c508:	eb03 1347 	add.w	r3, r3, r7, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c50c:	695e      	ldr	r6, [r3, #20]
    c50e:	f3c6 060d 	ubfx	r6, r6, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c512:	8a22      	ldrh	r2, [r4, #16]
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c514:	f894 e013 	ldrb.w	lr, [r4, #19]
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    c518:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c51c:	429a      	cmp	r2, r3
    c51e:	bf1a      	itte	ne
    c520:	f102 3cff 	addne.w	ip, r2, #4294967295	; 0xffffffff
    c524:	fa0f fc8c 	sxthne.w	ip, ip
    c528:	4694      	moveq	ip, r2
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    c52a:	f00e 0907 	and.w	r9, lr, #7
	if (isr) {
    c52e:	f1b8 0f00 	cmp.w	r8, #0
    c532:	d005      	beq.n	c540 <_usb_d_dev_in_next+0x4c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c534:	017b      	lsls	r3, r7, #5
    c536:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c53a:	2102      	movs	r1, #2
    c53c:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	ept->trans_count += trans_count;
    c540:	68a1      	ldr	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    c542:	6863      	ldr	r3, [r4, #4]
	ept->trans_count += trans_count;
    c544:	4431      	add	r1, r6
	if (ept->trans_count < ept->trans_size) {
    c546:	4299      	cmp	r1, r3
	ept->trans_count += trans_count;
    c548:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
    c54a:	ea4f 1547 	mov.w	r5, r7, lsl #5
    c54e:	d242      	bcs.n	c5d6 <_usb_d_dev_in_next+0xe2>
		trans_next = ept->trans_size - ept->trans_count;
    c550:	1a5b      	subs	r3, r3, r1
    c552:	b29e      	uxth	r6, r3
		if (ept->flags.bits.use_cache) {
    c554:	6823      	ldr	r3, [r4, #0]
    c556:	f8df a0f0 	ldr.w	sl, [pc, #240]	; c648 <_usb_d_dev_in_next+0x154>
    c55a:	f01e 0f20 	tst.w	lr, #32
    c55e:	4419      	add	r1, r3
    c560:	d02f      	beq.n	c5c2 <_usb_d_dev_in_next+0xce>
			if (trans_next > ept->size) {
    c562:	4296      	cmp	r6, r2
    c564:	bf28      	it	cs
    c566:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    c568:	4b35      	ldr	r3, [pc, #212]	; (c640 <_usb_d_dev_in_next+0x14c>)
    c56a:	68e0      	ldr	r0, [r4, #12]
    c56c:	4632      	mov	r2, r6
    c56e:	4798      	blx	r3
	bank->ADDR.reg          = addr;
    c570:	eb0a 0305 	add.w	r3, sl, r5
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    c574:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    c576:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c57a:	eb0a 0205 	add.w	r2, sl, r5
    c57e:	f8d2 3244 	ldr.w	r3, [r2, #580]	; 0x244
    c582:	f366 030d 	bfi	r3, r6, #0, #14
    c586:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c58a:	f8d2 3244 	ldr.w	r3, [r2, #580]	; 0x244
    c58e:	f36f 339b 	bfc	r3, #14, #14
    c592:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
	if (!isr) {
    c596:	f1b8 0f00 	cmp.w	r8, #0
    c59a:	d108      	bne.n	c5ae <_usb_d_dev_in_next+0xba>
			inten = USB_D_BANK1_INT_FLAGS;
    c59c:	f1b9 0f01 	cmp.w	r9, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c5a0:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    c5a4:	bf0c      	ite	eq
    c5a6:	234e      	moveq	r3, #78	; 0x4e
    c5a8:	234a      	movne	r3, #74	; 0x4a
    c5aa:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    c5ae:	017b      	lsls	r3, r7, #5
    c5b0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c5b4:	2280      	movs	r2, #128	; 0x80
    c5b6:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
}
    c5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    c5be:	460e      	mov	r6, r1
    c5c0:	e7a7      	b.n	c512 <_usb_d_dev_in_next+0x1e>
	bank->ADDR.reg          = addr;
    c5c2:	eb0a 0305 	add.w	r3, sl, r5
    c5c6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    c5ca:	bf28      	it	cs
    c5cc:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
    c5d0:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
}
    c5d4:	e7d1      	b.n	c57a <_usb_d_dev_in_next+0x86>
	} else if (ept->flags.bits.need_zlp) {
    c5d6:	f01e 0f10 	tst.w	lr, #16
    c5da:	d00e      	beq.n	c5fa <_usb_d_dev_in_next+0x106>
		ept->flags.bits.need_zlp = 0;
    c5dc:	7ce3      	ldrb	r3, [r4, #19]
    c5de:	f36f 1304 	bfc	r3, #4, #1
    c5e2:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    c5e4:	4b17      	ldr	r3, [pc, #92]	; (c644 <_usb_d_dev_in_next+0x150>)
    c5e6:	442b      	add	r3, r5
    c5e8:	685a      	ldr	r2, [r3, #4]
    c5ea:	f36f 020d 	bfc	r2, #0, #14
    c5ee:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    c5f0:	685a      	ldr	r2, [r3, #4]
    c5f2:	f36f 329b 	bfc	r2, #14, #14
    c5f6:	605a      	str	r2, [r3, #4]
		goto _in_tx_exec;
    c5f8:	e7cd      	b.n	c596 <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
    c5fa:	f1b9 0f01 	cmp.w	r9, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c5fe:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
	if (last_pkt == ept->size) {
    c602:	ea0c 0c06 	and.w	ip, ip, r6
    c606:	bf0c      	ite	eq
    c608:	234b      	moveq	r3, #75	; 0x4b
    c60a:	234a      	movne	r3, #74	; 0x4a
    c60c:	4562      	cmp	r2, ip
    c60e:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
    c612:	d10c      	bne.n	c62e <_usb_d_dev_in_next+0x13a>
		ept->flags.bits.is_busy = 0;
    c614:	7ce3      	ldrb	r3, [r4, #19]
    c616:	f36f 1386 	bfc	r3, #6, #1
    c61a:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    c61c:	4b0a      	ldr	r3, [pc, #40]	; (c648 <_usb_d_dev_in_next+0x154>)
    c61e:	68db      	ldr	r3, [r3, #12]
    c620:	4798      	blx	r3
    c622:	2800      	cmp	r0, #0
    c624:	d1c9      	bne.n	c5ba <_usb_d_dev_in_next+0xc6>
		ept->flags.bits.is_busy = 1;
    c626:	7ce3      	ldrb	r3, [r4, #19]
    c628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c62c:	74e3      	strb	r3, [r4, #19]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c62e:	4620      	mov	r0, r4
    c630:	4b06      	ldr	r3, [pc, #24]	; (c64c <_usb_d_dev_in_next+0x158>)
}
    c632:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c636:	2100      	movs	r1, #0
    c638:	4718      	bx	r3
    c63a:	bf00      	nop
    c63c:	20000ac8 	.word	0x20000ac8
    c640:	00012cd1 	.word	0x00012cd1
    c644:	20000ad8 	.word	0x20000ad8
    c648:	20000898 	.word	0x20000898
    c64c:	0000c341 	.word	0x0000c341

0000c650 <_usb_d_dev_out_next>:
{
    c650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    c654:	7c86      	ldrb	r6, [r0, #18]
    c656:	f006 060f 	and.w	r6, r6, #15
{
    c65a:	4604      	mov	r4, r0
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c65c:	460f      	mov	r7, r1
    c65e:	0175      	lsls	r5, r6, #5
    c660:	2900      	cmp	r1, #0
    c662:	d060      	beq.n	c726 <_usb_d_dev_out_next+0xd6>
    c664:	4b5d      	ldr	r3, [pc, #372]	; (c7dc <_usb_d_dev_out_next+0x18c>)
    c666:	442b      	add	r3, r5
    c668:	685a      	ldr	r2, [r3, #4]
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c66a:	685b      	ldr	r3, [r3, #4]
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c66c:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c670:	f3c3 090d 	ubfx	r9, r3, #0, #14
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c674:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c678:	7ce2      	ldrb	r2, [r4, #19]
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    c67a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c67e:	4598      	cmp	r8, r3
    c680:	bf1c      	itt	ne
    c682:	f108 38ff 	addne.w	r8, r8, #4294967295	; 0xffffffff
    c686:	fa1f f888 	uxthne.w	r8, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c68a:	f002 0307 	and.w	r3, r2, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    c68e:	ea09 0b08 	and.w	fp, r9, r8
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    c692:	9301      	str	r3, [sp, #4]
	if (isr) {
    c694:	b12f      	cbz	r7, c6a2 <_usb_d_dev_out_next+0x52>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    c696:	0173      	lsls	r3, r6, #5
    c698:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    c69c:	2101      	movs	r1, #1
    c69e:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    c6a2:	0690      	lsls	r0, r2, #26
    c6a4:	d50c      	bpl.n	c6c0 <_usb_d_dev_out_next+0x70>
    c6a6:	6862      	ldr	r2, [r4, #4]
    c6a8:	b152      	cbz	r2, c6c0 <_usb_d_dev_out_next+0x70>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c6aa:	68a0      	ldr	r0, [r4, #8]
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c6ac:	6823      	ldr	r3, [r4, #0]
    c6ae:	68e1      	ldr	r1, [r4, #12]
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    c6b0:	1a12      	subs	r2, r2, r0
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    c6b2:	b292      	uxth	r2, r2
    c6b4:	455a      	cmp	r2, fp
    c6b6:	4418      	add	r0, r3
    c6b8:	bf28      	it	cs
    c6ba:	465a      	movcs	r2, fp
    c6bc:	4b48      	ldr	r3, [pc, #288]	; (c7e0 <_usb_d_dev_out_next+0x190>)
    c6be:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    c6c0:	6863      	ldr	r3, [r4, #4]
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d132      	bne.n	c72c <_usb_d_dev_out_next+0xdc>
    c6c6:	7ce2      	ldrb	r2, [r4, #19]
    c6c8:	06d1      	lsls	r1, r2, #27
    c6ca:	d52f      	bpl.n	c72c <_usb_d_dev_out_next+0xdc>
	bank->ADDR.reg          = addr;
    c6cc:	4845      	ldr	r0, [pc, #276]	; (c7e4 <_usb_d_dev_out_next+0x194>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c6ce:	68e1      	ldr	r1, [r4, #12]
		ept->flags.bits.need_zlp  = 0;
    c6d0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	bank->ADDR.reg          = addr;
    c6d4:	4428      	add	r0, r5
		ept->flags.bits.need_zlp  = 0;
    c6d6:	f042 0220 	orr.w	r2, r2, #32
    c6da:	74e2      	strb	r2, [r4, #19]
	bank->ADDR.reg          = addr;
    c6dc:	f500 720c 	add.w	r2, r0, #560	; 0x230
    c6e0:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c6e4:	6851      	ldr	r1, [r2, #4]
    c6e6:	8a20      	ldrh	r0, [r4, #16]
    c6e8:	f360 319b 	bfi	r1, r0, #14, #14
    c6ec:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c6ee:	6851      	ldr	r1, [r2, #4]
    c6f0:	f363 010d 	bfi	r1, r3, #0, #14
    c6f4:	6051      	str	r1, [r2, #4]
	if (!isr) {
    c6f6:	b96f      	cbnz	r7, c714 <_usb_d_dev_out_next+0xc4>
		if (is_ctrl) {
    c6f8:	9b01      	ldr	r3, [sp, #4]
    c6fa:	2b01      	cmp	r3, #1
	bank->STATUS_BK.reg     = 0;
    c6fc:	bf04      	itt	eq
    c6fe:	4b39      	ldreq	r3, [pc, #228]	; (c7e4 <_usb_d_dev_out_next+0x194>)
    c700:	195b      	addeq	r3, r3, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    c702:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    c706:	bf0a      	itet	eq
    c708:	f883 724a 	strbeq.w	r7, [r3, #586]	; 0x24a
			inten = USB_D_BANK0_INT_FLAGS;
    c70c:	2325      	movne	r3, #37	; 0x25
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    c70e:	232d      	moveq	r3, #45	; 0x2d
    c710:	f885 3109 	strb.w	r3, [r5, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    c714:	0176      	lsls	r6, r6, #5
    c716:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
    c71a:	2340      	movs	r3, #64	; 0x40
    c71c:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
}
    c720:	b003      	add	sp, #12
    c722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    c726:	468a      	mov	sl, r1
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    c728:	4689      	mov	r9, r1
    c72a:	e7a3      	b.n	c674 <_usb_d_dev_out_next+0x24>
	} else if (isr && last_pkt < ept->size) {
    c72c:	68a1      	ldr	r1, [r4, #8]
    c72e:	b1ef      	cbz	r7, c76c <_usb_d_dev_out_next+0x11c>
    c730:	8a22      	ldrh	r2, [r4, #16]
    c732:	455a      	cmp	r2, fp
    c734:	d91a      	bls.n	c76c <_usb_d_dev_out_next+0x11c>
		ept->flags.bits.need_zlp = 0;
    c736:	7ce3      	ldrb	r3, [r4, #19]
		ept->trans_count += last_trans;
    c738:	4449      	add	r1, r9
		ept->flags.bits.need_zlp = 0;
    c73a:	f36f 1304 	bfc	r3, #4, #1
    c73e:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    c740:	60a1      	str	r1, [r4, #8]
	if (is_ctrl) {
    c742:	9b01      	ldr	r3, [sp, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    c744:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    c748:	2b01      	cmp	r3, #1
    c74a:	bf0c      	ite	eq
    c74c:	232d      	moveq	r3, #45	; 0x2d
    c74e:	2325      	movne	r3, #37	; 0x25
    c750:	f885 3108 	strb.w	r3, [r5, #264]	; 0x108
	if (0 == epn) {
    c754:	b91e      	cbnz	r6, c75e <_usb_d_dev_out_next+0x10e>
	bank->ADDR.reg          = addr;
    c756:	4b23      	ldr	r3, [pc, #140]	; (c7e4 <_usb_d_dev_out_next+0x194>)
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c758:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    c75a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c75e:	4b22      	ldr	r3, [pc, #136]	; (c7e8 <_usb_d_dev_out_next+0x198>)
    c760:	2100      	movs	r1, #0
    c762:	4620      	mov	r0, r4
}
    c764:	b003      	add	sp, #12
    c766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    c76a:	4718      	bx	r3
		ept->trans_count += trans_size;
    c76c:	4451      	add	r1, sl
		if (ept->trans_count < ept->trans_size) {
    c76e:	428b      	cmp	r3, r1
		ept->trans_count += trans_size;
    c770:	60a1      	str	r1, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    c772:	d9e6      	bls.n	c742 <_usb_d_dev_out_next+0xf2>
			if (ept->flags.bits.use_cache) {
    c774:	7ce0      	ldrb	r0, [r4, #19]
    c776:	f8b4 c010 	ldrh.w	ip, [r4, #16]
    c77a:	4a1a      	ldr	r2, [pc, #104]	; (c7e4 <_usb_d_dev_out_next+0x194>)
			trans_next = ept->trans_size - ept->trans_count;
    c77c:	1a5b      	subs	r3, r3, r1
			if (ept->flags.bits.use_cache) {
    c77e:	f010 0f20 	tst.w	r0, #32
			trans_next = ept->trans_size - ept->trans_count;
    c782:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    c784:	d014      	beq.n	c7b0 <_usb_d_dev_out_next+0x160>
	bank->ADDR.reg          = addr;
    c786:	1951      	adds	r1, r2, r5
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    c788:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    c78a:	f8c1 0230 	str.w	r0, [r1, #560]	; 0x230
    c78e:	4563      	cmp	r3, ip
    c790:	bf28      	it	cs
    c792:	4663      	movcs	r3, ip
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    c794:	442a      	add	r2, r5
    c796:	f8d2 1234 	ldr.w	r1, [r2, #564]	; 0x234
    c79a:	f363 319b 	bfi	r1, r3, #14, #14
    c79e:	f8c2 1234 	str.w	r1, [r2, #564]	; 0x234
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    c7a2:	f8d2 3234 	ldr.w	r3, [r2, #564]	; 0x234
    c7a6:	f36f 030d 	bfc	r3, #0, #14
    c7aa:	f8c2 3234 	str.w	r3, [r2, #564]	; 0x234
			goto _out_rx_exec;
    c7ae:	e7a2      	b.n	c6f6 <_usb_d_dev_out_next+0xa6>
				if (trans_next > ept->size) {
    c7b0:	4563      	cmp	r3, ip
    c7b2:	d90a      	bls.n	c7ca <_usb_d_dev_out_next+0x17a>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    c7b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c7b8:	d80c      	bhi.n	c7d4 <_usb_d_dev_out_next+0x184>
						trans_next -= trans_next & size_mask;
    c7ba:	ea23 0308 	bic.w	r3, r3, r8
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    c7be:	6820      	ldr	r0, [r4, #0]
    c7c0:	4401      	add	r1, r0
	bank->ADDR.reg          = addr;
    c7c2:	1950      	adds	r0, r2, r5
    c7c4:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
}
    c7c8:	e7e4      	b.n	c794 <_usb_d_dev_out_next+0x144>
				} else if (trans_next < ept->size) {
    c7ca:	d2f8      	bcs.n	c7be <_usb_d_dev_out_next+0x16e>
					ept->flags.bits.use_cache = 1;
    c7cc:	f040 0020 	orr.w	r0, r0, #32
    c7d0:	74e0      	strb	r0, [r4, #19]
    c7d2:	e7f4      	b.n	c7be <_usb_d_dev_out_next+0x16e>
						trans_next = USB_D_DEV_TRANS_MAX;
    c7d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c7d8:	e7f1      	b.n	c7be <_usb_d_dev_out_next+0x16e>
    c7da:	bf00      	nop
    c7dc:	20000ac8 	.word	0x20000ac8
    c7e0:	00012cd1 	.word	0x00012cd1
    c7e4:	20000898 	.word	0x20000898
    c7e8:	0000c341 	.word	0x0000c341

0000c7ec <_usb_d_dev_handler>:
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c7ec:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
{
    c7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    c7f4:	8c1f      	ldrh	r7, [r3, #32]
    c7f6:	4d69      	ldr	r5, [pc, #420]	; (c99c <_usb_d_dev_handler+0x1b0>)
    c7f8:	b2bf      	uxth	r7, r7
	if (0 == epint) {
    c7fa:	2f00      	cmp	r7, #0
    c7fc:	d163      	bne.n	c8c6 <_usb_d_dev_handler+0xda>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    c7fe:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    c800:	8b1a      	ldrh	r2, [r3, #24]
    c802:	b292      	uxth	r2, r2
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    c804:	400a      	ands	r2, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    c806:	f012 0004 	ands.w	r0, r2, #4
    c80a:	d005      	beq.n	c818 <_usb_d_dev_handler+0x2c>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c80c:	2204      	movs	r2, #4
    c80e:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    c810:	682b      	ldr	r3, [r5, #0]
}
    c812:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.sof();
    c816:	4718      	bx	r3
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    c818:	f412 7100 	ands.w	r1, r2, #512	; 0x200
    c81c:	d01f      	beq.n	c85e <_usb_d_dev_handler+0x72>
    c81e:	f240 2201 	movw	r2, #513	; 0x201
    c822:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c824:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c826:	2270      	movs	r2, #112	; 0x70
    c828:	831a      	strh	r2, [r3, #24]
    c82a:	4603      	mov	r3, r0
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    c82c:	eb05 1243 	add.w	r2, r5, r3, lsl #5
    c830:	f502 700e 	add.w	r0, r2, #568	; 0x238
    c834:	f8b2 2238 	ldrh.w	r2, [r2, #568]	; 0x238
    c838:	f002 020f 	and.w	r2, r2, #15
    c83c:	2a03      	cmp	r2, #3
    c83e:	d109      	bne.n	c854 <_usb_d_dev_handler+0x68>
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c840:	8801      	ldrh	r1, [r0, #0]
			bank->EXTREG.reg = 0;
    c842:	2300      	movs	r3, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    c844:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    c848:	8003      	strh	r3, [r0, #0]
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    c84a:	686b      	ldr	r3, [r5, #4]
    c84c:	2003      	movs	r0, #3
}
    c84e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c852:	4718      	bx	r3
	for (i = 0; i < CONF_USB_D_MAX_EP_N; i++) {
    c854:	3301      	adds	r3, #1
    c856:	2b05      	cmp	r3, #5
    c858:	d1e8      	bne.n	c82c <_usb_d_dev_handler+0x40>
	uint32_t lpm_variable = 0;
    c85a:	2100      	movs	r1, #0
    c85c:	e7f5      	b.n	c84a <_usb_d_dev_handler+0x5e>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    c85e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
    c862:	d004      	beq.n	c86e <_usb_d_dev_handler+0x82>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c864:	2280      	movs	r2, #128	; 0x80
    c866:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    c868:	2005      	movs	r0, #5
    c86a:	686b      	ldr	r3, [r5, #4]
    c86c:	e7ef      	b.n	c84e <_usb_d_dev_handler+0x62>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    c86e:	f012 0470 	ands.w	r4, r2, #112	; 0x70
    c872:	d00b      	beq.n	c88c <_usb_d_dev_handler+0xa0>
    c874:	2270      	movs	r2, #112	; 0x70
    c876:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c878:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c87a:	f240 2201 	movw	r2, #513	; 0x201
    c87e:	831a      	strh	r2, [r3, #24]
		_usb_d_dev_wait_dfll_rdy();
    c880:	4b47      	ldr	r3, [pc, #284]	; (c9a0 <_usb_d_dev_handler+0x1b4>)
    c882:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    c884:	686b      	ldr	r3, [r5, #4]
    c886:	4601      	mov	r1, r0
    c888:	2002      	movs	r0, #2
    c88a:	e7e0      	b.n	c84e <_usb_d_dev_handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    c88c:	f012 0108 	ands.w	r1, r2, #8
    c890:	d00e      	beq.n	c8b0 <_usb_d_dev_handler+0xc4>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c892:	2208      	movs	r2, #8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    c894:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c898:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c89a:	2270      	movs	r2, #112	; 0x70
    c89c:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c89e:	f240 2201 	movw	r2, #513	; 0x201
    c8a2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    c8a4:	4b3f      	ldr	r3, [pc, #252]	; (c9a4 <_usb_d_dev_handler+0x1b8>)
    c8a6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    c8a8:	686b      	ldr	r3, [r5, #4]
    c8aa:	4621      	mov	r1, r4
    c8ac:	2001      	movs	r0, #1
    c8ae:	e7ce      	b.n	c84e <_usb_d_dev_handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    c8b0:	07d0      	lsls	r0, r2, #31
    c8b2:	d508      	bpl.n	c8c6 <_usb_d_dev_handler+0xda>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    c8b4:	f240 2201 	movw	r2, #513	; 0x201
    c8b8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    c8ba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    c8bc:	2270      	movs	r2, #112	; 0x70
    c8be:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    c8c0:	2004      	movs	r0, #4
    c8c2:	686b      	ldr	r3, [r5, #4]
    c8c4:	e7c3      	b.n	c84e <_usb_d_dev_handler+0x62>
    c8c6:	4c35      	ldr	r4, [pc, #212]	; (c99c <_usb_d_dev_handler+0x1b0>)
			_usb_d_dev_handle_setup(ept);
    c8c8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; c9b0 <_usb_d_dev_handler+0x1c4>
			_usb_d_dev_handle_trfail(ept, 1);
    c8cc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c9b4 <_usb_d_dev_handler+0x1c8>
		_usb_d_dev_out_next(ept, true);
    c8d0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c9b8 <_usb_d_dev_handler+0x1cc>
	uint32_t lpm_variable = 0;
    c8d4:	2600      	movs	r6, #0
		if (ept->ep == 0xFF) {
    c8d6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    c8da:	2aff      	cmp	r2, #255	; 0xff
    c8dc:	f104 0414 	add.w	r4, r4, #20
    c8e0:	d029      	beq.n	c936 <_usb_d_dev_handler+0x14a>
	if (!(epint & (1u << epn))) {
    c8e2:	f002 020f 	and.w	r2, r2, #15
    c8e6:	2101      	movs	r1, #1
    c8e8:	fa01 f302 	lsl.w	r3, r1, r2
    c8ec:	423b      	tst	r3, r7
    c8ee:	d022      	beq.n	c936 <_usb_d_dev_handler+0x14a>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c8f0:	0153      	lsls	r3, r2, #5
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c8f2:	0152      	lsls	r2, r2, #5
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c8f4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c8f8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    c8fc:	f893 0107 	ldrb.w	r0, [r3, #263]	; 0x107
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    c900:	f892 3109 	ldrb.w	r3, [r2, #265]	; 0x109
	if (flags) {
    c904:	4003      	ands	r3, r0
    c906:	d016      	beq.n	c936 <_usb_d_dev_handler+0x14a>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    c908:	2214      	movs	r2, #20
    c90a:	fb02 5206 	mla	r2, r2, r6, r5
    c90e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
    c912:	f002 0047 	and.w	r0, r2, #71	; 0x47
    c916:	4288      	cmp	r0, r1
    c918:	d112      	bne.n	c940 <_usb_d_dev_handler+0x154>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c91a:	06da      	lsls	r2, r3, #27
    c91c:	d502      	bpl.n	c924 <_usb_d_dev_handler+0x138>
			_usb_d_dev_handle_setup(ept);
    c91e:	4620      	mov	r0, r4
    c920:	47c8      	blx	r9
    c922:	e008      	b.n	c936 <_usb_d_dev_handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c924:	f013 0140 	ands.w	r1, r3, #64	; 0x40
    c928:	d003      	beq.n	c932 <_usb_d_dev_handler+0x146>
		_usb_d_dev_handle_stall(ept, 1);
    c92a:	4601      	mov	r1, r0
		_usb_d_dev_handle_stall(ept, 0);
    c92c:	4b1e      	ldr	r3, [pc, #120]	; (c9a8 <_usb_d_dev_handler+0x1bc>)
    c92e:	4620      	mov	r0, r4
    c930:	e013      	b.n	c95a <_usb_d_dev_handler+0x16e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c932:	069b      	lsls	r3, r3, #26
    c934:	d4fa      	bmi.n	c92c <_usb_d_dev_handler+0x140>
	for (i = 0; i < USB_D_N_EP; i++) {
    c936:	3601      	adds	r6, #1
    c938:	2e1b      	cmp	r6, #27
    c93a:	d1cc      	bne.n	c8d6 <_usb_d_dev_handler+0xea>
}
    c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (_usb_d_dev_ep_is_in(ept)) {
    c940:	0610      	lsls	r0, r2, #24
    c942:	d514      	bpl.n	c96e <_usb_d_dev_handler+0x182>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    c944:	0658      	lsls	r0, r3, #25
    c946:	d4f1      	bmi.n	c92c <_usb_d_dev_handler+0x140>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c948:	0718      	lsls	r0, r3, #28
    c94a:	d502      	bpl.n	c952 <_usb_d_dev_handler+0x166>
			_usb_d_dev_handle_trfail(ept, 1);
    c94c:	4620      	mov	r0, r4
    c94e:	47c0      	blx	r8
    c950:	e7f1      	b.n	c936 <_usb_d_dev_handler+0x14a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    c952:	0798      	lsls	r0, r3, #30
    c954:	d503      	bpl.n	c95e <_usb_d_dev_handler+0x172>
		_usb_d_dev_in_next(ept, true);
    c956:	4b15      	ldr	r3, [pc, #84]	; (c9ac <_usb_d_dev_handler+0x1c0>)
    c958:	4620      	mov	r0, r4
		_usb_d_dev_handle_stall(ept, 0);
    c95a:	4798      	blx	r3
    c95c:	e7eb      	b.n	c936 <_usb_d_dev_handler+0x14a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c95e:	f002 0207 	and.w	r2, r2, #7
    c962:	2a01      	cmp	r2, #1
    c964:	d1e7      	bne.n	c936 <_usb_d_dev_handler+0x14a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c966:	075a      	lsls	r2, r3, #29
    c968:	d515      	bpl.n	c996 <_usb_d_dev_handler+0x1aa>
			_usb_d_dev_handle_trfail(ept, 0);
    c96a:	2100      	movs	r1, #0
    c96c:	e7ee      	b.n	c94c <_usb_d_dev_handler+0x160>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    c96e:	f013 0020 	ands.w	r0, r3, #32
    c972:	d001      	beq.n	c978 <_usb_d_dev_handler+0x18c>
		_usb_d_dev_handle_stall(ept, 0);
    c974:	2100      	movs	r1, #0
    c976:	e7d9      	b.n	c92c <_usb_d_dev_handler+0x140>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    c978:	0758      	lsls	r0, r3, #29
    c97a:	d4f6      	bmi.n	c96a <_usb_d_dev_handler+0x17e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    c97c:	07d8      	lsls	r0, r3, #31
    c97e:	d502      	bpl.n	c986 <_usb_d_dev_handler+0x19a>
		_usb_d_dev_out_next(ept, true);
    c980:	4620      	mov	r0, r4
    c982:	47d0      	blx	sl
    c984:	e7d7      	b.n	c936 <_usb_d_dev_handler+0x14a>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    c986:	f002 0207 	and.w	r2, r2, #7
    c98a:	2a01      	cmp	r2, #1
    c98c:	d1d3      	bne.n	c936 <_usb_d_dev_handler+0x14a>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    c98e:	071a      	lsls	r2, r3, #28
    c990:	d501      	bpl.n	c996 <_usb_d_dev_handler+0x1aa>
			_usb_d_dev_handle_trfail(ept, 1);
    c992:	2101      	movs	r1, #1
    c994:	e7da      	b.n	c94c <_usb_d_dev_handler+0x160>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    c996:	06db      	lsls	r3, r3, #27
    c998:	d5cd      	bpl.n	c936 <_usb_d_dev_handler+0x14a>
    c99a:	e7c0      	b.n	c91e <_usb_d_dev_handler+0x132>
    c99c:	20000898 	.word	0x20000898
    c9a0:	0000c251 	.word	0x0000c251
    c9a4:	0000c4b5 	.word	0x0000c4b5
    c9a8:	0000c311 	.word	0x0000c311
    c9ac:	0000c4f5 	.word	0x0000c4f5
    c9b0:	0000c28d 	.word	0x0000c28d
    c9b4:	0000c3cd 	.word	0x0000c3cd
    c9b8:	0000c651 	.word	0x0000c651

0000c9bc <_usbd_ep_pcksize_size>:
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    c9bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c9c0:	d80f      	bhi.n	c9e2 <_usbd_ep_pcksize_size+0x26>
    c9c2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    c9c6:	d80e      	bhi.n	c9e6 <_usbd_ep_pcksize_size+0x2a>
    c9c8:	2880      	cmp	r0, #128	; 0x80
    c9ca:	d80e      	bhi.n	c9ea <_usbd_ep_pcksize_size+0x2e>
    c9cc:	2840      	cmp	r0, #64	; 0x40
    c9ce:	d80e      	bhi.n	c9ee <_usbd_ep_pcksize_size+0x32>
    c9d0:	2820      	cmp	r0, #32
    c9d2:	d80e      	bhi.n	c9f2 <_usbd_ep_pcksize_size+0x36>
    c9d4:	2810      	cmp	r0, #16
    c9d6:	d80e      	bhi.n	c9f6 <_usbd_ep_pcksize_size+0x3a>
    c9d8:	2808      	cmp	r0, #8
    c9da:	bf94      	ite	ls
    c9dc:	2000      	movls	r0, #0
    c9de:	2001      	movhi	r0, #1
    c9e0:	4770      	bx	lr
    c9e2:	2007      	movs	r0, #7
    c9e4:	4770      	bx	lr
    c9e6:	2006      	movs	r0, #6
    c9e8:	4770      	bx	lr
    c9ea:	2005      	movs	r0, #5
    c9ec:	4770      	bx	lr
    c9ee:	2004      	movs	r0, #4
    c9f0:	4770      	bx	lr
    c9f2:	2003      	movs	r0, #3
    c9f4:	4770      	bx	lr
    c9f6:	2002      	movs	r0, #2
}
    c9f8:	4770      	bx	lr
	...

0000c9fc <_usb_d_dev_init>:
{
    c9fc:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    c9fe:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ca02:	789a      	ldrb	r2, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    ca04:	07d0      	lsls	r0, r2, #31
    ca06:	d41a      	bmi.n	ca3e <_usb_d_dev_init+0x42>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    ca08:	789a      	ldrb	r2, [r3, #2]
    ca0a:	0791      	lsls	r1, r2, #30
    ca0c:	d1fc      	bne.n	ca08 <_usb_d_dev_init+0xc>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    ca0e:	781a      	ldrb	r2, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    ca10:	0792      	lsls	r2, r2, #30
    ca12:	d50d      	bpl.n	ca30 <_usb_d_dev_init+0x34>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    ca14:	781a      	ldrb	r2, [r3, #0]
    ca16:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    ca1a:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    ca1c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    ca20:	7893      	ldrb	r3, [r2, #2]
    ca22:	0798      	lsls	r0, r3, #30
    ca24:	d1fc      	bne.n	ca20 <_usb_d_dev_init+0x24>
    ca26:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    ca2a:	7893      	ldrb	r3, [r2, #2]
    ca2c:	0799      	lsls	r1, r3, #30
    ca2e:	d4fc      	bmi.n	ca2a <_usb_d_dev_init+0x2e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    ca30:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    ca34:	2201      	movs	r2, #1
    ca36:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    ca38:	789a      	ldrb	r2, [r3, #2]
    ca3a:	0792      	lsls	r2, r2, #30
    ca3c:	d1fc      	bne.n	ca38 <_usb_d_dev_init+0x3c>
    ca3e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    ca42:	7893      	ldrb	r3, [r2, #2]
    ca44:	07db      	lsls	r3, r3, #31
    ca46:	d4fc      	bmi.n	ca42 <_usb_d_dev_init+0x46>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    ca48:	4a1e      	ldr	r2, [pc, #120]	; (cac4 <_usb_d_dev_init+0xc8>)
    ca4a:	4b1f      	ldr	r3, [pc, #124]	; (cac8 <_usb_d_dev_init+0xcc>)
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    ca4c:	e9c3 2200 	strd	r2, r2, [r3]
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    ca50:	e9c3 2202 	strd	r2, r2, [r3, #8]
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    ca54:	611a      	str	r2, [r3, #16]
	_usb_d_dev_reset_epts();
    ca56:	4b1d      	ldr	r3, [pc, #116]	; (cacc <_usb_d_dev_init+0xd0>)
    ca58:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    ca5a:	4b1d      	ldr	r3, [pc, #116]	; (cad0 <_usb_d_dev_init+0xd4>)
    ca5c:	681a      	ldr	r2, [r3, #0]
	uint32_t pad_transp
    ca5e:	f3c2 1344 	ubfx	r3, r2, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    ca62:	f3c2 2182 	ubfx	r1, r2, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    ca66:	f012 021f 	ands.w	r2, r2, #31
    ca6a:	d025      	beq.n	cab8 <_usb_d_dev_init+0xbc>
		pad_transn = 9;
    ca6c:	2a1f      	cmp	r2, #31
    ca6e:	bf08      	it	eq
    ca70:	2209      	moveq	r2, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    ca72:	b31b      	cbz	r3, cabc <_usb_d_dev_init+0xc0>
		pad_transp = 25;
    ca74:	2b1f      	cmp	r3, #31
    ca76:	bf08      	it	eq
    ca78:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    ca7a:	b309      	cbz	r1, cac0 <_usb_d_dev_init+0xc4>
		pad_trim = 6;
    ca7c:	2907      	cmp	r1, #7
    ca7e:	bf08      	it	eq
    ca80:	2106      	moveq	r1, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    ca82:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    ca86:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    ca8a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    ca8e:	b29b      	uxth	r3, r3
    ca90:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    ca92:	78d3      	ldrb	r3, [r2, #3]
    ca94:	f043 0303 	orr.w	r3, r3, #3
    ca98:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    ca9a:	78d3      	ldrb	r3, [r2, #3]
    ca9c:	f043 030c 	orr.w	r3, r3, #12
    caa0:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    caa2:	2304      	movs	r3, #4
    caa4:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    caa6:	7890      	ldrb	r0, [r2, #2]
    caa8:	f010 0003 	ands.w	r0, r0, #3
    caac:	d1fb      	bne.n	caa6 <_usb_d_dev_init+0xaa>
	hri_usbdevice_write_DESCADD_reg(hw, (uint32_t)prvt_inst.desc_table);
    caae:	4b09      	ldr	r3, [pc, #36]	; (cad4 <_usb_d_dev_init+0xd8>)
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    cab0:	6253      	str	r3, [r2, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    cab2:	2301      	movs	r3, #1
    cab4:	8113      	strh	r3, [r2, #8]
}
    cab6:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    cab8:	2209      	movs	r2, #9
    caba:	e7da      	b.n	ca72 <_usb_d_dev_init+0x76>
		pad_transp = 25;
    cabc:	2319      	movs	r3, #25
    cabe:	e7dc      	b.n	ca7a <_usb_d_dev_init+0x7e>
		pad_trim = 6;
    cac0:	2106      	movs	r1, #6
    cac2:	e7de      	b.n	ca82 <_usb_d_dev_init+0x86>
    cac4:	0000c24d 	.word	0x0000c24d
    cac8:	20000898 	.word	0x20000898
    cacc:	0000c4b5 	.word	0x0000c4b5
    cad0:	00800084 	.word	0x00800084
    cad4:	20000ac8 	.word	0x20000ac8

0000cad8 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    cad8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cadc:	789a      	ldrb	r2, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    cade:	0792      	lsls	r2, r2, #30
    cae0:	d122      	bne.n	cb28 <_usb_d_dev_enable+0x50>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    cae2:	789a      	ldrb	r2, [r3, #2]
    cae4:	0790      	lsls	r0, r2, #30
    cae6:	d1fc      	bne.n	cae2 <_usb_d_dev_enable+0xa>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    cae8:	7819      	ldrb	r1, [r3, #0]
    caea:	b2ca      	uxtb	r2, r1
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    caec:	0789      	lsls	r1, r1, #30
    caee:	d407      	bmi.n	cb00 <_usb_d_dev_enable+0x28>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    caf0:	f042 0202 	orr.w	r2, r2, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    caf4:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    caf6:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    cafa:	7893      	ldrb	r3, [r2, #2]
    cafc:	079b      	lsls	r3, r3, #30
    cafe:	d1fc      	bne.n	cafa <_usb_d_dev_enable+0x22>
    cb00:	4b0b      	ldr	r3, [pc, #44]	; (cb30 <_usb_d_dev_enable+0x58>)
    cb02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    cb06:	609a      	str	r2, [r3, #8]
    cb08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    cb0c:	609a      	str	r2, [r3, #8]
    cb0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    cb12:	609a      	str	r2, [r3, #8]
    cb14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    cb18:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    cb1a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cb1e:	f240 228d 	movw	r2, #653	; 0x28d
    cb22:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    cb24:	2000      	movs	r0, #0
    cb26:	4770      	bx	lr
		return -USB_ERR_DENIED;
    cb28:	f06f 0010 	mvn.w	r0, #16
}
    cb2c:	4770      	bx	lr
    cb2e:	bf00      	nop
    cb30:	e000e100 	.word	0xe000e100

0000cb34 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    cb34:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    cb38:	8913      	ldrh	r3, [r2, #8]
    cb3a:	f023 0301 	bic.w	r3, r3, #1
    cb3e:	041b      	lsls	r3, r3, #16
    cb40:	0c1b      	lsrs	r3, r3, #16
    cb42:	8113      	strh	r3, [r2, #8]
}
    cb44:	4770      	bx	lr

0000cb46 <_usb_d_dev_set_address>:
	((Usb *)hw)->DEVICE.DADD.reg = data;
    cb46:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    cb4a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    cb4e:	7298      	strb	r0, [r3, #10]
}
    cb50:	4770      	bx	lr

0000cb52 <_usb_d_dev_get_frame_n>:
	return (((Usb *)hw)->DEVICE.FNUM.reg & USB_DEVICE_FNUM_FNUM_Msk) >> USB_DEVICE_FNUM_FNUM_Pos;
    cb52:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    cb56:	8a18      	ldrh	r0, [r3, #16]
}
    cb58:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    cb5c:	4770      	bx	lr
	...

0000cb60 <_usb_d_dev_ep_init>:
{
    cb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    cb64:	f000 040f 	and.w	r4, r0, #15
{
    cb68:	460d      	mov	r5, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cb6a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; cc1c <_usb_d_dev_ep_init+0xbc>
    cb6e:	09c1      	lsrs	r1, r0, #7
{
    cb70:	4607      	mov	r7, r0
    cb72:	fa4f f880 	sxtb.w	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cb76:	4620      	mov	r0, r4
    cb78:	47c8      	blx	r9
	if (epn > CONF_USB_D_MAX_EP_N) {
    cb7a:	2c05      	cmp	r4, #5
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cb7c:	4606      	mov	r6, r0
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    cb7e:	f005 0503 	and.w	r5, r5, #3
	if (epn > CONF_USB_D_MAX_EP_N) {
    cb82:	d83f      	bhi.n	cc04 <_usb_d_dev_ep_init+0xa4>
	if (ept->ep != 0xFF) {
    cb84:	7c83      	ldrb	r3, [r0, #18]
    cb86:	2bff      	cmp	r3, #255	; 0xff
    cb88:	d13f      	bne.n	cc0a <_usb_d_dev_ep_init+0xaa>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    cb8a:	b985      	cbnz	r5, cbae <_usb_d_dev_ep_init+0x4e>
		struct _usb_d_dev_ep *ept_in = _usb_d_dev_ept(epn, !dir);
    cb8c:	ea6f 0108 	mvn.w	r1, r8
    cb90:	0fc9      	lsrs	r1, r1, #31
    cb92:	4620      	mov	r0, r4
    cb94:	47c8      	blx	r9
		if (ept_in->ep != 0xFF) {
    cb96:	7c83      	ldrb	r3, [r0, #18]
    cb98:	2bff      	cmp	r3, #255	; 0xff
    cb9a:	d136      	bne.n	cc0a <_usb_d_dev_ep_init+0xaa>
		if (pcfg->cache == NULL) {
    cb9c:	230c      	movs	r3, #12
    cb9e:	491e      	ldr	r1, [pc, #120]	; (cc18 <_usb_d_dev_ep_init+0xb8>)
    cba0:	4363      	muls	r3, r4
    cba2:	58cb      	ldr	r3, [r1, r3]
    cba4:	2b00      	cmp	r3, #0
    cba6:	d133      	bne.n	cc10 <_usb_d_dev_ep_init+0xb0>
			return -USB_ERR_FUNC;
    cba8:	f06f 0012 	mvn.w	r0, #18
    cbac:	e018      	b.n	cbe0 <_usb_d_dev_ep_init+0x80>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cbae:	f1b8 0f00 	cmp.w	r8, #0
    cbb2:	da17      	bge.n	cbe4 <_usb_d_dev_ep_init+0x84>
    cbb4:	4918      	ldr	r1, [pc, #96]	; (cc18 <_usb_d_dev_ep_init+0xb8>)
    cbb6:	230c      	movs	r3, #12
    cbb8:	fb03 1304 	mla	r3, r3, r4, r1
    cbbc:	6859      	ldr	r1, [r3, #4]
    cbbe:	b9e9      	cbnz	r1, cbfc <_usb_d_dev_ep_init+0x9c>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cbc0:	4915      	ldr	r1, [pc, #84]	; (cc18 <_usb_d_dev_ep_init+0xb8>)
	ept->size     = max_pkt_siz;
    cbc2:	8232      	strh	r2, [r6, #16]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cbc4:	230c      	movs	r3, #12
    cbc6:	435c      	muls	r4, r3
    cbc8:	190b      	adds	r3, r1, r4
    cbca:	5909      	ldr	r1, [r1, r4]
    cbcc:	685b      	ldr	r3, [r3, #4]
	ept->ep       = ep;
    cbce:	74b7      	strb	r7, [r6, #18]
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cbd0:	ea13 0328 	ands.w	r3, r3, r8, asr #32
    cbd4:	bf38      	it	cc
    cbd6:	460b      	movcc	r3, r1
	ept->flags.u8 = (ep_type + 1);
    cbd8:	3501      	adds	r5, #1
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    cbda:	60f3      	str	r3, [r6, #12]
	ept->flags.u8 = (ep_type + 1);
    cbdc:	74f5      	strb	r5, [r6, #19]
	return USB_OK;
    cbde:	2000      	movs	r0, #0
}
    cbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cbe4:	230c      	movs	r3, #12
    cbe6:	490c      	ldr	r1, [pc, #48]	; (cc18 <_usb_d_dev_ep_init+0xb8>)
    cbe8:	4363      	muls	r3, r4
    cbea:	58cb      	ldr	r3, [r1, r3]
    cbec:	2b00      	cmp	r3, #0
    cbee:	d0e7      	beq.n	cbc0 <_usb_d_dev_ep_init+0x60>
    cbf0:	4909      	ldr	r1, [pc, #36]	; (cc18 <_usb_d_dev_ep_init+0xb8>)
    cbf2:	230c      	movs	r3, #12
    cbf4:	fb03 1304 	mla	r3, r3, r4, r1
    cbf8:	891b      	ldrh	r3, [r3, #8]
    cbfa:	e000      	b.n	cbfe <_usb_d_dev_ep_init+0x9e>
    cbfc:	895b      	ldrh	r3, [r3, #10]
    cbfe:	429a      	cmp	r2, r3
    cc00:	ddde      	ble.n	cbc0 <_usb_d_dev_ep_init+0x60>
    cc02:	e7d1      	b.n	cba8 <_usb_d_dev_ep_init+0x48>
		return -USB_ERR_PARAM;
    cc04:	f06f 0011 	mvn.w	r0, #17
    cc08:	e7ea      	b.n	cbe0 <_usb_d_dev_ep_init+0x80>
		return -USB_ERR_REDO;
    cc0a:	f06f 0013 	mvn.w	r0, #19
    cc0e:	e7e7      	b.n	cbe0 <_usb_d_dev_ep_init+0x80>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    cc10:	f1b8 0f00 	cmp.w	r8, #0
    cc14:	daec      	bge.n	cbf0 <_usb_d_dev_ep_init+0x90>
    cc16:	e7cd      	b.n	cbb4 <_usb_d_dev_ep_init+0x54>
    cc18:	00015cf8 	.word	0x00015cf8
    cc1c:	0000c275 	.word	0x0000c275

0000cc20 <_usb_d_dev_ep_deinit>:
{
    cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    cc22:	f000 050f 	and.w	r5, r0, #15
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cc26:	2d05      	cmp	r5, #5
{
    cc28:	4604      	mov	r4, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cc2a:	d818      	bhi.n	cc5e <_usb_d_dev_ep_deinit+0x3e>
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cc2c:	4b17      	ldr	r3, [pc, #92]	; (cc8c <_usb_d_dev_ep_deinit+0x6c>)
	bool                  dir = USB_EP_GET_DIR(ep);
    cc2e:	09c1      	lsrs	r1, r0, #7
    cc30:	b247      	sxtb	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cc32:	4628      	mov	r0, r5
    cc34:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cc36:	7c83      	ldrb	r3, [r0, #18]
    cc38:	2bff      	cmp	r3, #255	; 0xff
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cc3a:	4606      	mov	r6, r0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    cc3c:	d00f      	beq.n	cc5e <_usb_d_dev_ep_deinit+0x3e>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    cc3e:	4b14      	ldr	r3, [pc, #80]	; (cc90 <_usb_d_dev_ep_deinit+0x70>)
    cc40:	2203      	movs	r2, #3
    cc42:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    cc44:	7cf3      	ldrb	r3, [r6, #19]
    cc46:	f003 0307 	and.w	r3, r3, #7
    cc4a:	2b01      	cmp	r3, #1
    cc4c:	d108      	bne.n	cc60 <_usb_d_dev_ep_deinit+0x40>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    cc4e:	0164      	lsls	r4, r4, #5
    cc50:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    cc54:	2300      	movs	r3, #0
    cc56:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
	ept->ep       = 0xFF;
    cc5a:	23ff      	movs	r3, #255	; 0xff
    cc5c:	8273      	strh	r3, [r6, #18]
}
    cc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (USB_EP_GET_DIR(ep)) {
    cc60:	2f00      	cmp	r7, #0
    cc62:	da09      	bge.n	cc78 <_usb_d_dev_ep_deinit+0x58>
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    cc64:	016b      	lsls	r3, r5, #5
    cc66:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    cc6a:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    cc6e:	f002 028f 	and.w	r2, r2, #143	; 0x8f
    cc72:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    cc76:	e7f0      	b.n	cc5a <_usb_d_dev_ep_deinit+0x3a>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    cc78:	0164      	lsls	r4, r4, #5
    cc7a:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    cc7e:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
    cc82:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    cc86:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
    cc8a:	e7e6      	b.n	cc5a <_usb_d_dev_ep_deinit+0x3a>
    cc8c:	0000c275 	.word	0x0000c275
    cc90:	0000c36d 	.word	0x0000c36d

0000cc94 <_usb_d_dev_ep_enable>:
{
    cc94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    cc98:	f000 050f 	and.w	r5, r0, #15
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    cc9c:	09c1      	lsrs	r1, r0, #7
    cc9e:	4b55      	ldr	r3, [pc, #340]	; (cdf4 <_usb_d_dev_ep_enable+0x160>)
    cca0:	fa4f f980 	sxtb.w	r9, r0
    cca4:	4628      	mov	r0, r5
    cca6:	4798      	blx	r3
    cca8:	ea4f 1c45 	mov.w	ip, r5, lsl #5
    ccac:	f10c 4682 	add.w	r6, ip, #1090519040	; 0x41000000
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ccb0:	2d05      	cmp	r5, #5
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ccb2:	f896 1100 	ldrb.w	r1, [r6, #256]	; 0x100
	struct _usb_d_dev_ep *ept   = _usb_d_dev_ept(epn, dir);
    ccb6:	4607      	mov	r7, r0
    ccb8:	b2c8      	uxtb	r0, r1
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    ccba:	f200 8094 	bhi.w	cde6 <_usb_d_dev_ep_enable+0x152>
    ccbe:	7cba      	ldrb	r2, [r7, #18]
    ccc0:	2aff      	cmp	r2, #255	; 0xff
    ccc2:	f000 8090 	beq.w	cde6 <_usb_d_dev_ep_enable+0x152>
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ccc6:	7cf9      	ldrb	r1, [r7, #19]
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ccc8:	4c4b      	ldr	r4, [pc, #300]	; (cdf8 <_usb_d_dev_ep_enable+0x164>)
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ccca:	f001 0307 	and.w	r3, r1, #7
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ccce:	f504 780c 	add.w	r8, r4, #560	; 0x230
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ccd2:	2b01      	cmp	r3, #1
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    ccd4:	44e0      	add	r8, ip
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    ccd6:	d147      	bne.n	cd68 <_usb_d_dev_ep_enable+0xd4>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    ccd8:	f010 0377 	ands.w	r3, r0, #119	; 0x77
    ccdc:	f040 8086 	bne.w	cdec <_usb_d_dev_ep_enable+0x158>
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cce0:	f8b7 9010 	ldrh.w	r9, [r7, #16]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    cce4:	2111      	movs	r1, #17
    cce6:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ccea:	4648      	mov	r0, r9
    ccec:	4943      	ldr	r1, [pc, #268]	; (cdfc <_usb_d_dev_ep_enable+0x168>)
    ccee:	4788      	blx	r1
    ccf0:	0700      	lsls	r0, r0, #28
    ccf2:	f000 41e0 	and.w	r1, r0, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    ccf6:	4842      	ldr	r0, [pc, #264]	; (ce00 <_usb_d_dev_ep_enable+0x16c>)
    ccf8:	ea00 3089 	and.w	r0, r0, r9, lsl #14
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    ccfc:	f3c9 090d 	ubfx	r9, r9, #0, #14
	bank->STATUS_BK.reg     = 0;
    cd00:	eb04 1545 	add.w	r5, r4, r5, lsl #5
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cd04:	4308      	orrs	r0, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    cd06:	f002 020f 	and.w	r2, r2, #15
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cd0a:	ea49 0101 	orr.w	r1, r9, r1
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cd0e:	f8c8 0004 	str.w	r0, [r8, #4]
	bank->ADDR.reg          = addr;
    cd12:	eb04 1442 	add.w	r4, r4, r2, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cd16:	f8c8 1014 	str.w	r1, [r8, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cd1a:	f04f 0c40 	mov.w	ip, #64	; 0x40
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cd1e:	2180      	movs	r1, #128	; 0x80
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cd20:	f886 c105 	strb.w	ip, [r6, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cd24:	f886 1104 	strb.w	r1, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    cd28:	f885 323a 	strb.w	r3, [r5, #570]	; 0x23a
    cd2c:	f885 324a 	strb.w	r3, [r5, #586]	; 0x24a
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    cd30:	68fd      	ldr	r5, [r7, #12]
	bank->ADDR.reg          = addr;
    cd32:	f8c4 5230 	str.w	r5, [r4, #560]	; 0x230
    cd36:	f504 710c 	add.w	r1, r4, #560	; 0x230
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    cd3a:	f8d4 4234 	ldr.w	r4, [r4, #564]	; 0x234
    cd3e:	f369 349b 	bfi	r4, r9, #14, #14
    cd42:	604c      	str	r4, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    cd44:	684c      	ldr	r4, [r1, #4]
	bank->ADDR.reg          = addr;
    cd46:	0150      	lsls	r0, r2, #5
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    cd48:	f100 4282 	add.w	r2, r0, #1090519040	; 0x41000000
    cd4c:	f363 040d 	bfi	r4, r3, #0, #14
    cd50:	604c      	str	r4, [r1, #4]
    cd52:	21b0      	movs	r1, #176	; 0xb0
    cd54:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    cd58:	2110      	movs	r1, #16
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cd5a:	f882 c105 	strb.w	ip, [r2, #261]	; 0x105
	return USB_OK;
    cd5e:	4618      	mov	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    cd60:	f882 1109 	strb.w	r1, [r2, #265]	; 0x109
}
    cd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (dir) {
    cd68:	f1b9 0f00 	cmp.w	r9, #0
    cd6c:	da1e      	bge.n	cdac <_usb_d_dev_ep_enable+0x118>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    cd6e:	f010 0270 	ands.w	r2, r0, #112	; 0x70
    cd72:	d13b      	bne.n	cdec <_usb_d_dev_ep_enable+0x158>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    cd74:	f3c1 0102 	ubfx	r1, r1, #0, #3
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cd78:	8a3b      	ldrh	r3, [r7, #16]
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    cd7a:	ea40 1101 	orr.w	r1, r0, r1, lsl #4
    cd7e:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    cd80:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cd84:	4618      	mov	r0, r3
    cd86:	491d      	ldr	r1, [pc, #116]	; (cdfc <_usb_d_dev_ep_enable+0x168>)
    cd88:	4788      	blx	r1
    cd8a:	0700      	lsls	r0, r0, #28
    cd8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
    cd90:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
	bank->STATUS_BK.reg     = 0;
    cd94:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cd98:	4318      	orrs	r0, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    cd9a:	2380      	movs	r3, #128	; 0x80
    cd9c:	f8c8 0014 	str.w	r0, [r8, #20]
    cda0:	f886 3104 	strb.w	r3, [r6, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    cda4:	f884 224a 	strb.w	r2, [r4, #586]	; 0x24a
	return USB_OK;
    cda8:	4610      	mov	r0, r2
}
    cdaa:	e7db      	b.n	cd64 <_usb_d_dev_ep_enable+0xd0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    cdac:	f010 0207 	ands.w	r2, r0, #7
    cdb0:	d11c      	bne.n	cdec <_usb_d_dev_ep_enable+0x158>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    cdb2:	f001 0107 	and.w	r1, r1, #7
    cdb6:	4301      	orrs	r1, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    cdb8:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cdbc:	8a39      	ldrh	r1, [r7, #16]
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cdbe:	4b0f      	ldr	r3, [pc, #60]	; (cdfc <_usb_d_dev_ep_enable+0x168>)
    cdc0:	4608      	mov	r0, r1
    cdc2:	4798      	blx	r3
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cdc4:	4b0e      	ldr	r3, [pc, #56]	; (ce00 <_usb_d_dev_ep_enable+0x16c>)
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cdc6:	0700      	lsls	r0, r0, #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cdc8:	ea03 3381 	and.w	r3, r3, r1, lsl #14
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    cdcc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
    cdd0:	4303      	orrs	r3, r0
	bank->STATUS_BK.reg     = 0;
    cdd2:	eb04 1445 	add.w	r4, r4, r5, lsl #5
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    cdd6:	f8c8 3004 	str.w	r3, [r8, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    cdda:	2340      	movs	r3, #64	; 0x40
    cddc:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    cde0:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
    cde4:	e7e0      	b.n	cda8 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    cde6:	f06f 0011 	mvn.w	r0, #17
    cdea:	e7bb      	b.n	cd64 <_usb_d_dev_ep_enable+0xd0>
			return -USB_ERR_REDO;
    cdec:	f06f 0013 	mvn.w	r0, #19
    cdf0:	e7b8      	b.n	cd64 <_usb_d_dev_ep_enable+0xd0>
    cdf2:	bf00      	nop
    cdf4:	0000c275 	.word	0x0000c275
    cdf8:	20000898 	.word	0x20000898
    cdfc:	0000c9bd 	.word	0x0000c9bd
    ce00:	0fffc000 	.word	0x0fffc000

0000ce04 <_usb_d_dev_ep_stall>:
{
    ce04:	b538      	push	{r3, r4, r5, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    ce06:	f000 020f 	and.w	r2, r0, #15
	bool                  dir = USB_EP_GET_DIR(ep);
    ce0a:	09c4      	lsrs	r4, r0, #7
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ce0c:	4b2f      	ldr	r3, [pc, #188]	; (cecc <_usb_d_dev_ep_stall+0xc8>)
{
    ce0e:	460d      	mov	r5, r1
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    ce10:	4610      	mov	r0, r2
    ce12:	4621      	mov	r1, r4
    ce14:	4798      	blx	r3
	if (epn > CONF_USB_D_MAX_EP_N) {
    ce16:	2a05      	cmp	r2, #5
    ce18:	d855      	bhi.n	cec6 <_usb_d_dev_ep_stall+0xc2>
	if (USB_EP_STALL_SET == ctrl) {
    ce1a:	7c83      	ldrb	r3, [r0, #18]
    ce1c:	2210      	movs	r2, #16
    ce1e:	2d01      	cmp	r5, #1
    ce20:	f003 030f 	and.w	r3, r3, #15
    ce24:	fa02 f204 	lsl.w	r2, r2, r4
    ce28:	d113      	bne.n	ce52 <_usb_d_dev_ep_stall+0x4e>
    ce2a:	0159      	lsls	r1, r3, #5
    ce2c:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    ce30:	b2d2      	uxtb	r2, r2
    ce32:	f881 2105 	strb.w	r2, [r1, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    ce36:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ce38:	2120      	movs	r1, #32
    ce3a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ce3e:	40a1      	lsls	r1, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    ce40:	b2c9      	uxtb	r1, r1
    ce42:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    ce46:	7cc3      	ldrb	r3, [r0, #19]
    ce48:	f043 0308 	orr.w	r3, r3, #8
    ce4c:	74c3      	strb	r3, [r0, #19]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    ce4e:	2000      	movs	r0, #0
}
    ce50:	bd38      	pop	{r3, r4, r5, pc}
	} else if (USB_EP_STALL_CLR == ctrl) {
    ce52:	bb6d      	cbnz	r5, ceb0 <_usb_d_dev_ep_stall+0xac>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    ce54:	015d      	lsls	r5, r3, #5
    ce56:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    ce5a:	f895 1106 	ldrb.w	r1, [r5, #262]	; 0x106
	if (!is_stalled) {
    ce5e:	4211      	tst	r1, r2
    ce60:	d0f5      	beq.n	ce4e <_usb_d_dev_ep_stall+0x4a>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    ce62:	b2d2      	uxtb	r2, r2
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ce64:	f885 2104 	strb.w	r2, [r5, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    ce68:	015b      	lsls	r3, r3, #5
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    ce6a:	2220      	movs	r2, #32
    ce6c:	40a2      	lsls	r2, r4
    ce6e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    ce72:	b2d1      	uxtb	r1, r2
    ce74:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    ce78:	f895 3107 	ldrb.w	r3, [r5, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    ce7c:	4213      	tst	r3, r2
    ce7e:	d006      	beq.n	ce8e <_usb_d_dev_ep_stall+0x8a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    ce80:	f885 1107 	strb.w	r1, [r5, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    ce84:	2101      	movs	r1, #1
    ce86:	40a1      	lsls	r1, r4
    ce88:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    ce8a:	f885 1104 	strb.w	r1, [r5, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    ce8e:	7cc2      	ldrb	r2, [r0, #19]
    ce90:	f002 0307 	and.w	r3, r2, #7
    ce94:	2b01      	cmp	r3, #1
    ce96:	d108      	bne.n	ceaa <_usb_d_dev_ep_stall+0xa6>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    ce98:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    ce9c:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    cea0:	d1d5      	bne.n	ce4e <_usb_d_dev_ep_stall+0x4a>
			ept->flags.bits.is_stalled = 0;
    cea2:	f363 02c3 	bfi	r2, r3, #3, #1
		ept->flags.bits.is_stalled = 0;
    cea6:	74c2      	strb	r2, [r0, #19]
    cea8:	e7d1      	b.n	ce4e <_usb_d_dev_ep_stall+0x4a>
    ceaa:	f36f 02c3 	bfc	r2, #3, #1
    ceae:	e7fa      	b.n	cea6 <_usb_d_dev_ep_stall+0xa2>
    ceb0:	015b      	lsls	r3, r3, #5
    ceb2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    ceb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    ceba:	799b      	ldrb	r3, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    cebc:	4213      	tst	r3, r2
    cebe:	bf14      	ite	ne
    cec0:	2001      	movne	r0, #1
    cec2:	2000      	moveq	r0, #0
    cec4:	e7c4      	b.n	ce50 <_usb_d_dev_ep_stall+0x4c>
		return -USB_ERR_PARAM;
    cec6:	f06f 0011 	mvn.w	r0, #17
    ceca:	e7c1      	b.n	ce50 <_usb_d_dev_ep_stall+0x4c>
    cecc:	0000c275 	.word	0x0000c275

0000ced0 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    ced0:	b570      	push	{r4, r5, r6, lr}
	uint8_t            epn   = USB_EP_GET_N(ep);
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    ced2:	4b13      	ldr	r3, [pc, #76]	; (cf20 <_usb_d_dev_ep_read_req+0x50>)
	uint8_t            epn   = USB_EP_GET_N(ep);
    ced4:	f000 060f 	and.w	r6, r0, #15
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    ced8:	0172      	lsls	r2, r6, #5
    ceda:	eb03 1046 	add.w	r0, r3, r6, lsl #5
	uint32_t           addr  = bank[0].ADDR.reg;
    cede:	589d      	ldr	r5, [r3, r2]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    cee0:	6844      	ldr	r4, [r0, #4]

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    cee2:	2e05      	cmp	r6, #5
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    cee4:	f3c4 040d 	ubfx	r4, r4, #0, #14
	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    cee8:	d814      	bhi.n	cf14 <_usb_d_dev_ep_read_req+0x44>
    ceea:	b199      	cbz	r1, cf14 <_usb_d_dev_ep_read_req+0x44>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    ceec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    cef0:	f892 3100 	ldrb.w	r3, [r2, #256]	; 0x100
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    cef4:	2b11      	cmp	r3, #17
    cef6:	d110      	bne.n	cf1a <_usb_d_dev_ep_read_req+0x4a>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    cef8:	f892 3107 	ldrb.w	r3, [r2, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    cefc:	f013 0010 	ands.w	r0, r3, #16
    cf00:	d007      	beq.n	cf12 <_usb_d_dev_ep_read_req+0x42>
		return ERR_NONE;
	}
	memcpy(req_buf, (void *)addr, 8);
    cf02:	682b      	ldr	r3, [r5, #0]
    cf04:	600b      	str	r3, [r1, #0]
    cf06:	686b      	ldr	r3, [r5, #4]
    cf08:	604b      	str	r3, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    cf0a:	2310      	movs	r3, #16
    cf0c:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	_usbd_ep_ack_setup(epn);

	return bytes;
    cf10:	4620      	mov	r0, r4
}
    cf12:	bd70      	pop	{r4, r5, r6, pc}
		return -USB_ERR_PARAM;
    cf14:	f06f 0011 	mvn.w	r0, #17
    cf18:	e7fb      	b.n	cf12 <_usb_d_dev_ep_read_req+0x42>
		return -USB_ERR_FUNC;
    cf1a:	f06f 0012 	mvn.w	r0, #18
    cf1e:	e7f8      	b.n	cf12 <_usb_d_dev_ep_read_req+0x42>
    cf20:	20000ac8 	.word	0x20000ac8

0000cf24 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    cf24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    cf28:	f890 9008 	ldrb.w	r9, [r0, #8]
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cf2c:	4b39      	ldr	r3, [pc, #228]	; (d014 <_usb_d_dev_ep_trans+0xf0>)
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    cf2e:	f009 050f 	and.w	r5, r9, #15
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    cf32:	fa4f f789 	sxtb.w	r7, r9
    cf36:	ea4f 19d9 	mov.w	r9, r9, lsr #7
{
    cf3a:	4680      	mov	r8, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cf3c:	4649      	mov	r1, r9
    cf3e:	4628      	mov	r0, r5
    cf40:	4798      	blx	r3

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    cf42:	8a02      	ldrh	r2, [r0, #16]
	bool     size_n_aligned = (trans->size & size_mask);
    cf44:	f8d8 1004 	ldr.w	r1, [r8, #4]
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    cf48:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cf4c:	429a      	cmp	r2, r3
    cf4e:	bf1a      	itte	ne
    cf50:	f102 33ff 	addne.w	r3, r2, #4294967295	; 0xffffffff
    cf54:	b29b      	uxthne	r3, r3
    cf56:	4613      	moveq	r3, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    cf58:	2d05      	cmp	r5, #5
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    cf5a:	4604      	mov	r4, r0
	bool     size_n_aligned = (trans->size & size_mask);
    cf5c:	ea03 0601 	and.w	r6, r3, r1
	if (epn > CONF_USB_D_MAX_EP_N) {
    cf60:	d828      	bhi.n	cfb4 <_usb_d_dev_ep_trans+0x90>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    cf62:	f8d8 5000 	ldr.w	r5, [r8]
    cf66:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    cf6a:	d30a      	bcc.n	cf82 <_usb_d_dev_ep_trans+0x5e>
    cf6c:	4b2a      	ldr	r3, [pc, #168]	; (d018 <_usb_d_dev_ep_trans+0xf4>)
    cf6e:	1948      	adds	r0, r1, r5
    cf70:	4298      	cmp	r0, r3
    cf72:	d206      	bcs.n	cf82 <_usb_d_dev_ep_trans+0x5e>
    cf74:	f015 0503 	ands.w	r5, r5, #3
    cf78:	d103      	bne.n	cf82 <_usb_d_dev_ep_trans+0x5e>
	    || (!dir && (trans->size < ept->size))) {
    cf7a:	2f00      	cmp	r7, #0
    cf7c:	db05      	blt.n	cf8a <_usb_d_dev_ep_trans+0x66>
    cf7e:	4291      	cmp	r1, r2
    cf80:	d214      	bcs.n	cfac <_usb_d_dev_ep_trans+0x88>
		if (!ept->cache) {
    cf82:	68e3      	ldr	r3, [r4, #12]
    cf84:	2b00      	cmp	r3, #0
    cf86:	d03f      	beq.n	d008 <_usb_d_dev_ep_trans+0xe4>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
    cf88:	2501      	movs	r5, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    cf8a:	7ce3      	ldrb	r3, [r4, #19]
    cf8c:	071b      	lsls	r3, r3, #28
    cf8e:	d43e      	bmi.n	d00e <_usb_d_dev_ep_trans+0xea>
		return USB_HALTED;
	}

	/* Try to start transactions. */

	atomic_enter_critical(&flags);
    cf90:	4b22      	ldr	r3, [pc, #136]	; (d01c <_usb_d_dev_ep_trans+0xf8>)
    cf92:	a801      	add	r0, sp, #4
    cf94:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    cf96:	7ce3      	ldrb	r3, [r4, #19]
    cf98:	4a21      	ldr	r2, [pc, #132]	; (d020 <_usb_d_dev_ep_trans+0xfc>)
    cf9a:	f013 0a40 	ands.w	sl, r3, #64	; 0x40
    cf9e:	d00e      	beq.n	cfbe <_usb_d_dev_ep_trans+0x9a>
		atomic_leave_critical(&flags);
    cfa0:	a801      	add	r0, sp, #4
    cfa2:	4790      	blx	r2
		return USB_BUSY;
    cfa4:	2001      	movs	r0, #1
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    cfa6:	b002      	add	sp, #8
    cfa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!dir && size_n_aligned) {
    cfac:	b12e      	cbz	r6, cfba <_usb_d_dev_ep_trans+0x96>
		if (!ept->cache) {
    cfae:	68e3      	ldr	r3, [r4, #12]
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d1ea      	bne.n	cf8a <_usb_d_dev_ep_trans+0x66>
		return -USB_ERR_PARAM;
    cfb4:	f06f 0011 	mvn.w	r0, #17
    cfb8:	e7f5      	b.n	cfa6 <_usb_d_dev_ep_trans+0x82>
	bool use_cache = false;
    cfba:	4635      	mov	r5, r6
    cfbc:	e7e5      	b.n	cf8a <_usb_d_dev_ep_trans+0x66>
	ept->flags.bits.is_busy = 1;
    cfbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cfc2:	74e3      	strb	r3, [r4, #19]
	atomic_leave_critical(&flags);
    cfc4:	a801      	add	r0, sp, #4
    cfc6:	4790      	blx	r2
	ept->trans_buf   = trans->buf;
    cfc8:	f8d8 3000 	ldr.w	r3, [r8]
    cfcc:	6023      	str	r3, [r4, #0]
	ept->trans_size  = trans->size;
    cfce:	f8d8 3004 	ldr.w	r3, [r8, #4]
	ept->trans_count = 0;
    cfd2:	e9c4 3a01 	strd	r3, sl, [r4, #4]
	ept->flags.bits.dir       = dir;
    cfd6:	7ce3      	ldrb	r3, [r4, #19]
    cfd8:	f369 13c7 	bfi	r3, r9, #7, #1
	ept->flags.bits.use_cache = use_cache;
    cfdc:	f365 1345 	bfi	r3, r5, #5, #1
    cfe0:	74e3      	strb	r3, [r4, #19]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    cfe2:	f898 3009 	ldrb.w	r3, [r8, #9]
    cfe6:	b113      	cbz	r3, cfee <_usb_d_dev_ep_trans+0xca>
    cfe8:	fab6 f386 	clz	r3, r6
    cfec:	095b      	lsrs	r3, r3, #5
    cfee:	7ce2      	ldrb	r2, [r4, #19]
	if (dir) {
    cff0:	2f00      	cmp	r7, #0
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    cff2:	f363 1204 	bfi	r2, r3, #4, #1
		_usb_d_dev_in_next(ept, false);
    cff6:	4620      	mov	r0, r4
    cff8:	bfb4      	ite	lt
    cffa:	4b0a      	ldrlt	r3, [pc, #40]	; (d024 <_usb_d_dev_ep_trans+0x100>)
		_usb_d_dev_out_next(ept, false);
    cffc:	4b0a      	ldrge	r3, [pc, #40]	; (d028 <_usb_d_dev_ep_trans+0x104>)
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    cffe:	74e2      	strb	r2, [r4, #19]
		_usb_d_dev_in_next(ept, false);
    d000:	2100      	movs	r1, #0
		_usb_d_dev_out_next(ept, false);
    d002:	4798      	blx	r3
	return ERR_NONE;
    d004:	2000      	movs	r0, #0
    d006:	e7ce      	b.n	cfa6 <_usb_d_dev_ep_trans+0x82>
			return -USB_ERR_FUNC;
    d008:	f06f 0012 	mvn.w	r0, #18
    d00c:	e7cb      	b.n	cfa6 <_usb_d_dev_ep_trans+0x82>
		return USB_HALTED;
    d00e:	2002      	movs	r0, #2
    d010:	e7c9      	b.n	cfa6 <_usb_d_dev_ep_trans+0x82>
    d012:	bf00      	nop
    d014:	0000c275 	.word	0x0000c275
    d018:	20042000 	.word	0x20042000
    d01c:	00011679 	.word	0x00011679
    d020:	00011687 	.word	0x00011687
    d024:	0000c4f5 	.word	0x0000c4f5
    d028:	0000c651 	.word	0x0000c651

0000d02c <_usb_d_dev_ep_get_status>:
	}
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_ABORT);
}

int32_t _usb_d_dev_ep_get_status(const uint8_t ep, struct usb_d_trans_status *stat)
{
    d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    d02e:	f000 040f 	and.w	r4, r0, #15
{
    d032:	460a      	mov	r2, r1
	bool                  dir = USB_EP_GET_DIR(ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d034:	4b19      	ldr	r3, [pc, #100]	; (d09c <_usb_d_dev_ep_get_status+0x70>)
    d036:	09c1      	lsrs	r1, r0, #7
{
    d038:	4607      	mov	r7, r0
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);
    d03a:	4620      	mov	r0, r4
    d03c:	4798      	blx	r3
	bool                  busy, stall;

	if (epn > CONF_USB_D_MAX_EP_N) {
    d03e:	2c05      	cmp	r4, #5
    d040:	d82a      	bhi.n	d098 <_usb_d_dev_ep_get_status+0x6c>
		return USB_ERR_PARAM;
	}
	busy  = ept->flags.bits.is_busy;
    d042:	7cc5      	ldrb	r5, [r0, #19]
    d044:	f3c5 1180 	ubfx	r1, r5, #6, #1
	stall = ept->flags.bits.is_stalled;
    d048:	f3c5 06c0 	ubfx	r6, r5, #3, #1
	if (stat) {
    d04c:	b1fa      	cbz	r2, d08e <_usb_d_dev_ep_get_status+0x62>
		stat->stall = stall;
    d04e:	7a53      	ldrb	r3, [r2, #9]
		stat->busy  = busy;
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    d050:	0164      	lsls	r4, r4, #5
		stat->stall = stall;
    d052:	f366 1304 	bfi	r3, r6, #4, #1
		stat->busy  = busy;
    d056:	f361 0382 	bfi	r3, r1, #2, #1
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    d05a:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
		stat->busy  = busy;
    d05e:	7253      	strb	r3, [r2, #9]
		stat->setup = USB->DEVICE.DeviceEndpoint[epn].EPINTFLAG.bit.RXSTP;
    d060:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
    d064:	f3c3 1400 	ubfx	r4, r3, #4, #1
		stat->dir   = ept->flags.bits.dir;
		stat->size  = ept->trans_size;
    d068:	6843      	ldr	r3, [r0, #4]
    d06a:	6013      	str	r3, [r2, #0]
		stat->count = ept->trans_count;
    d06c:	6883      	ldr	r3, [r0, #8]
		stat->ep    = ep;
    d06e:	7217      	strb	r7, [r2, #8]
		stat->count = ept->trans_count;
    d070:	6053      	str	r3, [r2, #4]
		stat->xtype = ept->flags.bits.eptype - 1;
    d072:	7cc3      	ldrb	r3, [r0, #19]
    d074:	7a50      	ldrb	r0, [r2, #9]
    d076:	3303      	adds	r3, #3
    d078:	f003 0303 	and.w	r3, r3, #3
		stat->dir   = ept->flags.bits.dir;
    d07c:	09ed      	lsrs	r5, r5, #7
		stat->xtype = ept->flags.bits.eptype - 1;
    d07e:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
    d082:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    d086:	f020 002b 	bic.w	r0, r0, #43	; 0x2b
    d08a:	4303      	orrs	r3, r0
    d08c:	7253      	strb	r3, [r2, #9]
		return USB_ERR_PARAM;
    d08e:	2e00      	cmp	r6, #0
    d090:	bf0c      	ite	eq
    d092:	4608      	moveq	r0, r1
    d094:	2002      	movne	r0, #2
	}
	if (busy) {
		return USB_BUSY;
	}
	return USB_OK;
}
    d096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return USB_ERR_PARAM;
    d098:	2012      	movs	r0, #18
    d09a:	e7fc      	b.n	d096 <_usb_d_dev_ep_get_status+0x6a>
    d09c:	0000c275 	.word	0x0000c275

0000d0a0 <_usb_d_dev_register_callback>:

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    d0a0:	4b06      	ldr	r3, [pc, #24]	; (d0bc <_usb_d_dev_register_callback+0x1c>)
    d0a2:	2900      	cmp	r1, #0
    d0a4:	bf08      	it	eq
    d0a6:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    d0a8:	2801      	cmp	r0, #1
    d0aa:	d102      	bne.n	d0b2 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    d0ac:	4b04      	ldr	r3, [pc, #16]	; (d0c0 <_usb_d_dev_register_callback+0x20>)
    d0ae:	6059      	str	r1, [r3, #4]
    d0b0:	4770      	bx	lr
	} else if (type == USB_D_CB_SOF) {
    d0b2:	b908      	cbnz	r0, d0b8 <_usb_d_dev_register_callback+0x18>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    d0b4:	4b02      	ldr	r3, [pc, #8]	; (d0c0 <_usb_d_dev_register_callback+0x20>)
    d0b6:	6019      	str	r1, [r3, #0]
	}
}
    d0b8:	4770      	bx	lr
    d0ba:	bf00      	nop
    d0bc:	0000c24d 	.word	0x0000c24d
    d0c0:	20000898 	.word	0x20000898

0000d0c4 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    d0c4:	4b08      	ldr	r3, [pc, #32]	; (d0e8 <_usb_d_dev_register_ep_callback+0x24>)
    d0c6:	2900      	cmp	r1, #0
    d0c8:	bf08      	it	eq
    d0ca:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    d0cc:	b910      	cbnz	r0, d0d4 <_usb_d_dev_register_ep_callback+0x10>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    d0ce:	4b07      	ldr	r3, [pc, #28]	; (d0ec <_usb_d_dev_register_ep_callback+0x28>)
    d0d0:	6099      	str	r1, [r3, #8]
    d0d2:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    d0d4:	2801      	cmp	r0, #1
    d0d6:	d102      	bne.n	d0de <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    d0d8:	4b04      	ldr	r3, [pc, #16]	; (d0ec <_usb_d_dev_register_ep_callback+0x28>)
    d0da:	60d9      	str	r1, [r3, #12]
    d0dc:	4770      	bx	lr
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    d0de:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    d0e0:	bf04      	itt	eq
    d0e2:	4b02      	ldreq	r3, [pc, #8]	; (d0ec <_usb_d_dev_register_ep_callback+0x28>)
    d0e4:	6119      	streq	r1, [r3, #16]
	}
}
    d0e6:	4770      	bx	lr
    d0e8:	0000c24d 	.word	0x0000c24d
    d0ec:	20000898 	.word	0x20000898

0000d0f0 <USB_0_Handler>:
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{

	_usb_d_dev_handler();
    d0f0:	4b00      	ldr	r3, [pc, #0]	; (d0f4 <USB_0_Handler+0x4>)
    d0f2:	4718      	bx	r3
    d0f4:	0000c7ed 	.word	0x0000c7ed

0000d0f8 <USB_1_Handler>:
    d0f8:	4b00      	ldr	r3, [pc, #0]	; (d0fc <USB_1_Handler+0x4>)
    d0fa:	4718      	bx	r3
    d0fc:	0000c7ed 	.word	0x0000c7ed

0000d100 <USB_2_Handler>:
    d100:	4b00      	ldr	r3, [pc, #0]	; (d104 <USB_2_Handler+0x4>)
    d102:	4718      	bx	r3
    d104:	0000c7ed 	.word	0x0000c7ed

0000d108 <USB_3_Handler>:
    d108:	4b00      	ldr	r3, [pc, #0]	; (d10c <USB_3_Handler+0x4>)
    d10a:	4718      	bx	r3
    d10c:	0000c7ed 	.word	0x0000c7ed

0000d110 <_read>:
#include <stdio.h>

int __attribute__((weak)) _read(int file, char *ptr, int len); /* Remove GCC compiler warning */

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
    d110:	b508      	push	{r3, lr}
    d112:	4603      	mov	r3, r0
    d114:	4608      	mov	r0, r1
    d116:	4611      	mov	r1, r2
	int n = 0;

	if (file != 0) {
    d118:	b923      	cbnz	r3, d124 <_read+0x14>
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    d11a:	4b04      	ldr	r3, [pc, #16]	; (d12c <_read+0x1c>)
    d11c:	4798      	blx	r3
	if (n < 0) {
    d11e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
		return -1;
	}

	return n;
}
    d122:	bd08      	pop	{r3, pc}
		return -1;
    d124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d128:	e7fb      	b.n	d122 <_read+0x12>
    d12a:	bf00      	nop
    d12c:	0000b50d 	.word	0x0000b50d

0000d130 <delay_init>:
/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
	_delay_init(hardware = hw);
    d130:	4b01      	ldr	r3, [pc, #4]	; (d138 <delay_init+0x8>)
    d132:	6018      	str	r0, [r3, #0]
    d134:	4b01      	ldr	r3, [pc, #4]	; (d13c <delay_init+0xc>)
    d136:	4718      	bx	r3
    d138:	20000c58 	.word	0x20000c58
    d13c:	00012439 	.word	0x00012439

0000d140 <delay_us>:
/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
	_delay_cycles(hardware, _get_cycles_for_us(us));
    d140:	4b05      	ldr	r3, [pc, #20]	; (d158 <delay_us+0x18>)
{
    d142:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    d144:	681c      	ldr	r4, [r3, #0]
    d146:	4b05      	ldr	r3, [pc, #20]	; (d15c <delay_us+0x1c>)
    d148:	4798      	blx	r3
    d14a:	4b05      	ldr	r3, [pc, #20]	; (d160 <delay_us+0x20>)
    d14c:	4601      	mov	r1, r0
    d14e:	4620      	mov	r0, r4
}
    d150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
    d154:	4718      	bx	r3
    d156:	bf00      	nop
    d158:	20000c58 	.word	0x20000c58
    d15c:	0000b909 	.word	0x0000b909
    d160:	0001244d 	.word	0x0001244d

0000d164 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    d164:	4b05      	ldr	r3, [pc, #20]	; (d17c <delay_ms+0x18>)
{
    d166:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    d168:	681c      	ldr	r4, [r3, #0]
    d16a:	4b05      	ldr	r3, [pc, #20]	; (d180 <delay_ms+0x1c>)
    d16c:	4798      	blx	r3
    d16e:	4b05      	ldr	r3, [pc, #20]	; (d184 <delay_ms+0x20>)
    d170:	4601      	mov	r1, r0
    d172:	4620      	mov	r0, r4
}
    d174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    d178:	4718      	bx	r3
    d17a:	bf00      	nop
    d17c:	20000c58 	.word	0x20000c58
    d180:	0000b911 	.word	0x0000b911
    d184:	0001244d 	.word	0x0001244d

0000d188 <_init_chip>:
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    d188:	4a0e      	ldr	r2, [pc, #56]	; (d1c4 <_init_chip+0x3c>)
    d18a:	8813      	ldrh	r3, [r2, #0]
    d18c:	b29b      	uxth	r3, r3
    d18e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    d192:	b510      	push	{r4, lr}
    d194:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    d196:	4b0c      	ldr	r3, [pc, #48]	; (d1c8 <_init_chip+0x40>)
	_oscctrl_init_sources();
	_mclk_init();
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    d198:	4c0c      	ldr	r4, [pc, #48]	; (d1cc <_init_chip+0x44>)
	_osc32kctrl_init_sources();
    d19a:	4798      	blx	r3
	_oscctrl_init_sources();
    d19c:	4b0c      	ldr	r3, [pc, #48]	; (d1d0 <_init_chip+0x48>)
    d19e:	4798      	blx	r3
	_mclk_init();
    d1a0:	4b0c      	ldr	r3, [pc, #48]	; (d1d4 <_init_chip+0x4c>)
    d1a2:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    d1a4:	2004      	movs	r0, #4
    d1a6:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    d1a8:	4b0b      	ldr	r3, [pc, #44]	; (d1d8 <_init_chip+0x50>)
    d1aa:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    d1ac:	f640 70fb 	movw	r0, #4091	; 0xffb
    d1b0:	47a0      	blx	r4
}

static inline void hri_mclk_set_AHBMASK_DMAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    d1b2:	4a0a      	ldr	r2, [pc, #40]	; (d1dc <_init_chip+0x54>)
    d1b4:	6913      	ldr	r3, [r2, #16]
    d1b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d1ba:	6113      	str	r3, [r2, #16]
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    d1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_dma_init();
    d1c0:	4b07      	ldr	r3, [pc, #28]	; (d1e0 <_init_chip+0x58>)
    d1c2:	4718      	bx	r3
    d1c4:	41004000 	.word	0x41004000
    d1c8:	0000f3e5 	.word	0x0000f3e5
    d1cc:	0000e04d 	.word	0x0000e04d
    d1d0:	0000d9f5 	.word	0x0000d9f5
    d1d4:	0000e02d 	.word	0x0000e02d
    d1d8:	0000d9f9 	.word	0x0000d9f9
    d1dc:	40000800 	.word	0x40000800
    d1e0:	0000d469 	.word	0x0000d469

0000d1e4 <RAMECC_Handler>:
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    d1e4:	4a0b      	ldr	r2, [pc, #44]	; (d214 <RAMECC_Handler+0x30>)
    d1e6:	7893      	ldrb	r3, [r2, #2]

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    d1e8:	b082      	sub	sp, #8
    d1ea:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    d1ec:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    d1ee:	9b01      	ldr	r3, [sp, #4]
    d1f0:	0799      	lsls	r1, r3, #30
    d1f2:	d505      	bpl.n	d200 <RAMECC_Handler+0x1c>
    d1f4:	4b08      	ldr	r3, [pc, #32]	; (d218 <RAMECC_Handler+0x34>)
    d1f6:	681b      	ldr	r3, [r3, #0]
    d1f8:	b113      	cbz	r3, d200 <RAMECC_Handler+0x1c>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    d1fa:	6850      	ldr	r0, [r2, #4]
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
	} else {
		return;
	}
}
    d1fc:	b002      	add	sp, #8
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    d1fe:	4718      	bx	r3
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    d200:	9b01      	ldr	r3, [sp, #4]
    d202:	07db      	lsls	r3, r3, #31
    d204:	d504      	bpl.n	d210 <RAMECC_Handler+0x2c>
    d206:	4b04      	ldr	r3, [pc, #16]	; (d218 <RAMECC_Handler+0x34>)
    d208:	685b      	ldr	r3, [r3, #4]
    d20a:	b10b      	cbz	r3, d210 <RAMECC_Handler+0x2c>
    d20c:	4a01      	ldr	r2, [pc, #4]	; (d214 <RAMECC_Handler+0x30>)
    d20e:	e7f4      	b.n	d1fa <RAMECC_Handler+0x16>
}
    d210:	b002      	add	sp, #8
    d212:	4770      	bx	lr
    d214:	41020000 	.word	0x41020000
    d218:	200146c0 	.word	0x200146c0

0000d21c <hid_mouse_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_mouse_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    d21c:	b430      	push	{r4, r5}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_mouse_funcd.func_iface)) {
    d21e:	780a      	ldrb	r2, [r1, #0]
    d220:	2a81      	cmp	r2, #129	; 0x81
    d222:	d11c      	bne.n	d25e <hid_mouse_req+0x42>
    d224:	784b      	ldrb	r3, [r1, #1]
    d226:	2b06      	cmp	r3, #6
    d228:	d131      	bne.n	d28e <hid_mouse_req+0x72>
    d22a:	4a1a      	ldr	r2, [pc, #104]	; (d294 <hid_mouse_req+0x78>)
    d22c:	888c      	ldrh	r4, [r1, #4]
    d22e:	7a13      	ldrb	r3, [r2, #8]
    d230:	429c      	cmp	r4, r3
    d232:	d12c      	bne.n	d28e <hid_mouse_req+0x72>
	switch (req->wValue >> 8) {
    d234:	884b      	ldrh	r3, [r1, #2]
    d236:	0a1b      	lsrs	r3, r3, #8
    d238:	2b21      	cmp	r3, #33	; 0x21
    d23a:	d005      	beq.n	d248 <hid_mouse_req+0x2c>
    d23c:	2b22      	cmp	r3, #34	; 0x22
    d23e:	d00a      	beq.n	d256 <hid_mouse_req+0x3a>
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
			switch (req->bRequest) {
    d240:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    d244:	bc30      	pop	{r4, r5}
    d246:	4770      	bx	lr
		return usbdc_xfer(ep, _hiddf_mouse_funcd.hid_desc, _hiddf_mouse_funcd.hid_desc[0], false);
    d248:	6811      	ldr	r1, [r2, #0]
    d24a:	780a      	ldrb	r2, [r1, #0]
    d24c:	2300      	movs	r3, #0
				return usbdc_xfer(ep, NULL, 0, 0);
    d24e:	4c12      	ldr	r4, [pc, #72]	; (d298 <hid_mouse_req+0x7c>)
    d250:	46a4      	mov	ip, r4
}
    d252:	bc30      	pop	{r4, r5}
				return usbdc_xfer(ep, NULL, 0, 0);
    d254:	4760      	bx	ip
		return usbdc_xfer(ep, (uint8_t *)mouse_report_desc, MOUSE_REPORT_DESC_LEN, false);
    d256:	4911      	ldr	r1, [pc, #68]	; (d29c <hid_mouse_req+0x80>)
    d258:	2300      	movs	r3, #0
    d25a:	2234      	movs	r2, #52	; 0x34
    d25c:	e7f7      	b.n	d24e <hid_mouse_req+0x32>
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    d25e:	f3c2 1241 	ubfx	r2, r2, #5, #2
    d262:	2a01      	cmp	r2, #1
    d264:	d113      	bne.n	d28e <hid_mouse_req+0x72>
		if (req->wIndex == _hiddf_mouse_funcd.func_iface) {
    d266:	4c0b      	ldr	r4, [pc, #44]	; (d294 <hid_mouse_req+0x78>)
    d268:	888d      	ldrh	r5, [r1, #4]
    d26a:	7a23      	ldrb	r3, [r4, #8]
    d26c:	429d      	cmp	r5, r3
    d26e:	d10e      	bne.n	d28e <hid_mouse_req+0x72>
			switch (req->bRequest) {
    d270:	784b      	ldrb	r3, [r1, #1]
    d272:	2b03      	cmp	r3, #3
    d274:	d007      	beq.n	d286 <hid_mouse_req+0x6a>
    d276:	2b0b      	cmp	r3, #11
    d278:	d1e2      	bne.n	d240 <hid_mouse_req+0x24>
				_hiddf_mouse_funcd.protocol = req->wValue;
    d27a:	884b      	ldrh	r3, [r1, #2]
    d27c:	72a3      	strb	r3, [r4, #10]
				return usbdc_xfer(ep, NULL, 0, 0);
    d27e:	2300      	movs	r3, #0
    d280:	461a      	mov	r2, r3
    d282:	4619      	mov	r1, r3
    d284:	e7e3      	b.n	d24e <hid_mouse_req+0x32>
				return usbdc_xfer(ep, &_hiddf_mouse_funcd.protocol, 1, 0);
    d286:	2300      	movs	r3, #0
    d288:	f104 010a 	add.w	r1, r4, #10
    d28c:	e7df      	b.n	d24e <hid_mouse_req+0x32>
			return ERR_NOT_FOUND;
    d28e:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    d292:	e7d7      	b.n	d244 <hid_mouse_req+0x28>
    d294:	20000c5c 	.word	0x20000c5c
    d298:	00011c29 	.word	0x00011c29
    d29c:	00015d40 	.word	0x00015d40

0000d2a0 <hid_mouse_ctrl>:
	switch (ctrl) {
    d2a0:	2901      	cmp	r1, #1
{
    d2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d2a4:	4614      	mov	r4, r2
	switch (ctrl) {
    d2a6:	d03b      	beq.n	d320 <hid_mouse_ctrl+0x80>
    d2a8:	2902      	cmp	r1, #2
    d2aa:	d04f      	beq.n	d34c <hid_mouse_ctrl+0xac>
    d2ac:	2900      	cmp	r1, #0
    d2ae:	d150      	bne.n	d352 <hid_mouse_ctrl+0xb2>
	ifc = desc->sod;
    d2b0:	6813      	ldr	r3, [r2, #0]
		return hid_mouse_enable(drv, (struct usbd_descriptors *)param);
    d2b2:	6886      	ldr	r6, [r0, #8]
	if (NULL == ifc) {
    d2b4:	b91b      	cbnz	r3, d2be <hid_mouse_ctrl+0x1e>
		return ERR_NOT_FOUND;
    d2b6:	f06f 0409 	mvn.w	r4, #9
}
    d2ba:	4620      	mov	r0, r4
    d2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    d2be:	7959      	ldrb	r1, [r3, #5]
	ifc_desc.bInterfaceNumber = ifc[2];
    d2c0:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    d2c2:	2903      	cmp	r1, #3
    d2c4:	d1f7      	bne.n	d2b6 <hid_mouse_ctrl+0x16>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    d2c6:	7a31      	ldrb	r1, [r6, #8]
    d2c8:	428a      	cmp	r2, r1
    d2ca:	d045      	beq.n	d358 <hid_mouse_ctrl+0xb8>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    d2cc:	29ff      	cmp	r1, #255	; 0xff
    d2ce:	d146      	bne.n	d35e <hid_mouse_ctrl+0xbe>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    d2d0:	7232      	strb	r2, [r6, #8]
    d2d2:	7818      	ldrb	r0, [r3, #0]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    d2d4:	6861      	ldr	r1, [r4, #4]
    d2d6:	4f26      	ldr	r7, [pc, #152]	; (d370 <hid_mouse_ctrl+0xd0>)
    d2d8:	2221      	movs	r2, #33	; 0x21
    d2da:	4418      	add	r0, r3
    d2dc:	4b25      	ldr	r3, [pc, #148]	; (d374 <hid_mouse_ctrl+0xd4>)
    d2de:	4798      	blx	r3
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d2e0:	6823      	ldr	r3, [r4, #0]
	_hiddf_mouse_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    d2e2:	6038      	str	r0, [r7, #0]
    d2e4:	7818      	ldrb	r0, [r3, #0]
	ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    d2e6:	6861      	ldr	r1, [r4, #4]
    d2e8:	4418      	add	r0, r3
    d2ea:	4b23      	ldr	r3, [pc, #140]	; (d378 <hid_mouse_ctrl+0xd8>)
    d2ec:	4798      	blx	r3
	desc->sod = ep;
    d2ee:	6020      	str	r0, [r4, #0]
	if (NULL != ep) {
    d2f0:	2800      	cmp	r0, #0
    d2f2:	d0e0      	beq.n	d2b6 <hid_mouse_ctrl+0x16>
	return (ptr[0] + (ptr[1] << 8));
    d2f4:	7943      	ldrb	r3, [r0, #5]
    d2f6:	7902      	ldrb	r2, [r0, #4]
		ep_desc.bEndpointAddress = ep[2];
    d2f8:	7885      	ldrb	r5, [r0, #2]
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    d2fa:	78c1      	ldrb	r1, [r0, #3]
    d2fc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    d300:	b292      	uxth	r2, r2
    d302:	4b1e      	ldr	r3, [pc, #120]	; (d37c <hid_mouse_ctrl+0xdc>)
    d304:	4628      	mov	r0, r5
    d306:	4798      	blx	r3
    d308:	4604      	mov	r4, r0
    d30a:	bb58      	cbnz	r0, d364 <hid_mouse_ctrl+0xc4>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    d30c:	062b      	lsls	r3, r5, #24
    d30e:	d52c      	bpl.n	d36a <hid_mouse_ctrl+0xca>
			usb_d_ep_enable(func_data->func_ep_in);
    d310:	4b1b      	ldr	r3, [pc, #108]	; (d380 <hid_mouse_ctrl+0xe0>)
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    d312:	7275      	strb	r5, [r6, #9]
			usb_d_ep_enable(func_data->func_ep_in);
    d314:	4628      	mov	r0, r5
    d316:	4798      	blx	r3
	_hiddf_mouse_funcd.protocol = 1;
    d318:	f240 1301 	movw	r3, #257	; 0x101
    d31c:	817b      	strh	r3, [r7, #10]
	return ERR_NONE;
    d31e:	e7cc      	b.n	d2ba <hid_mouse_ctrl+0x1a>
		return hid_mouse_disable(drv, (struct usbd_descriptors *)param);
    d320:	6885      	ldr	r5, [r0, #8]
	if (desc) {
    d322:	b11a      	cbz	r2, d32c <hid_mouse_ctrl+0x8c>
		ifc_desc.bInterfaceClass = desc->sod[5];
    d324:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    d326:	795b      	ldrb	r3, [r3, #5]
    d328:	2b03      	cmp	r3, #3
    d32a:	d1c4      	bne.n	d2b6 <hid_mouse_ctrl+0x16>
	if (func_data->func_iface != 0xFF) {
    d32c:	7a2b      	ldrb	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    d32e:	7a68      	ldrb	r0, [r5, #9]
	if (func_data->func_iface != 0xFF) {
    d330:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    d332:	bf1c      	itt	ne
    d334:	23ff      	movne	r3, #255	; 0xff
    d336:	722b      	strbne	r3, [r5, #8]
	if (func_data->func_ep_in != 0xFF) {
    d338:	28ff      	cmp	r0, #255	; 0xff
    d33a:	d003      	beq.n	d344 <hid_mouse_ctrl+0xa4>
		usb_d_ep_deinit(func_data->func_ep_in);
    d33c:	4b11      	ldr	r3, [pc, #68]	; (d384 <hid_mouse_ctrl+0xe4>)
    d33e:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    d340:	23ff      	movs	r3, #255	; 0xff
    d342:	726b      	strb	r3, [r5, #9]
	_hiddf_mouse_funcd.enabled = false;
    d344:	4b0a      	ldr	r3, [pc, #40]	; (d370 <hid_mouse_ctrl+0xd0>)
    d346:	2400      	movs	r4, #0
    d348:	72dc      	strb	r4, [r3, #11]
	return ERR_NONE;
    d34a:	e7b6      	b.n	d2ba <hid_mouse_ctrl+0x1a>
		return ERR_UNSUPPORTED_OP;
    d34c:	f06f 041a 	mvn.w	r4, #26
    d350:	e7b3      	b.n	d2ba <hid_mouse_ctrl+0x1a>
	switch (ctrl) {
    d352:	f06f 040c 	mvn.w	r4, #12
    d356:	e7b0      	b.n	d2ba <hid_mouse_ctrl+0x1a>
			return ERR_ALREADY_INITIALIZED;
    d358:	f06f 0411 	mvn.w	r4, #17
    d35c:	e7ad      	b.n	d2ba <hid_mouse_ctrl+0x1a>
			return ERR_NO_RESOURCE;
    d35e:	f06f 041b 	mvn.w	r4, #27
    d362:	e7aa      	b.n	d2ba <hid_mouse_ctrl+0x1a>
			return ERR_NOT_INITIALIZED;
    d364:	f06f 0413 	mvn.w	r4, #19
    d368:	e7a7      	b.n	d2ba <hid_mouse_ctrl+0x1a>
			return ERR_INVALID_DATA;
    d36a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d36e:	e7a4      	b.n	d2ba <hid_mouse_ctrl+0x1a>
    d370:	20000c5c 	.word	0x20000c5c
    d374:	0000b695 	.word	0x0000b695
    d378:	0000b6af 	.word	0x0000b6af
    d37c:	0000e8f9 	.word	0x0000e8f9
    d380:	0000e989 	.word	0x0000e989
    d384:	0000e95d 	.word	0x0000e95d

0000d388 <hiddf_mouse_init>:

/**
 * \brief Initialize the USB HID Mouse Function Driver
 */
int32_t hiddf_mouse_init(void)
{
    d388:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    d38a:	4b0a      	ldr	r3, [pc, #40]	; (d3b4 <hiddf_mouse_init+0x2c>)
    d38c:	4798      	blx	r3
    d38e:	2801      	cmp	r0, #1
    d390:	d80c      	bhi.n	d3ac <hiddf_mouse_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_mouse.ctrl      = hid_mouse_ctrl;
    d392:	4809      	ldr	r0, [pc, #36]	; (d3b8 <hiddf_mouse_init+0x30>)
    d394:	4b09      	ldr	r3, [pc, #36]	; (d3bc <hiddf_mouse_init+0x34>)
	_hiddf_mouse.func_data = &_hiddf_mouse_funcd;
    d396:	e9c0 3004 	strd	r3, r0, [r0, #16]

	usbdc_register_function(&_hiddf_mouse);
    d39a:	4b09      	ldr	r3, [pc, #36]	; (d3c0 <hiddf_mouse_init+0x38>)
    d39c:	300c      	adds	r0, #12
    d39e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_mouse_req_h);
    d3a0:	2001      	movs	r0, #1
    d3a2:	4908      	ldr	r1, [pc, #32]	; (d3c4 <hiddf_mouse_init+0x3c>)
    d3a4:	4b08      	ldr	r3, [pc, #32]	; (d3c8 <hiddf_mouse_init+0x40>)
    d3a6:	4798      	blx	r3
	return ERR_NONE;
    d3a8:	2000      	movs	r0, #0
}
    d3aa:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    d3ac:	f06f 0010 	mvn.w	r0, #16
    d3b0:	e7fb      	b.n	d3aa <hiddf_mouse_init+0x22>
    d3b2:	bf00      	nop
    d3b4:	00012061 	.word	0x00012061
    d3b8:	20000c5c 	.word	0x20000c5c
    d3bc:	0000d2a1 	.word	0x0000d2a1
    d3c0:	00012009 	.word	0x00012009
    d3c4:	200004f8 	.word	0x200004f8
    d3c8:	00011f81 	.word	0x00011f81

0000d3cc <hiddf_mouse_move>:
 * \param pos     Signed value to move
 * \param type    HID mouse class pointer move type
 * \return Operation status.
 */
int32_t hiddf_mouse_move(int8_t pos, enum hiddf_mouse_move_type type)
{
    d3cc:	b410      	push	{r4}

	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    d3ce:	4c0e      	ldr	r4, [pc, #56]	; (d408 <hiddf_mouse_move+0x3c>)
    d3d0:	2300      	movs	r3, #0

	if (type == HID_MOUSE_X_AXIS_MV) {
    d3d2:	2901      	cmp	r1, #1
	_hiddf_mouse_funcd.mouse_report.u32 = 0;
    d3d4:	6063      	str	r3, [r4, #4]
	if (type == HID_MOUSE_X_AXIS_MV) {
    d3d6:	d109      	bne.n	d3ec <hiddf_mouse_move+0x20>
		_hiddf_mouse_funcd.mouse_report.bytes.x_axis_var = pos;
    d3d8:	7160      	strb	r0, [r4, #5]
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
	} else {
		return ERR_INVALID_ARG;
	}

	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    d3da:	7a60      	ldrb	r0, [r4, #9]
    d3dc:	4c0b      	ldr	r4, [pc, #44]	; (d40c <hiddf_mouse_move+0x40>)
    d3de:	490c      	ldr	r1, [pc, #48]	; (d410 <hiddf_mouse_move+0x44>)
    d3e0:	46a4      	mov	ip, r4
    d3e2:	2300      	movs	r3, #0
}
    d3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return usbdc_xfer(_hiddf_mouse_funcd.func_ep_in, &_hiddf_mouse_funcd.mouse_report.bytes.button_state, 4, false);
    d3e8:	2204      	movs	r2, #4
    d3ea:	4760      	bx	ip
	} else if (type == HID_MOUSE_Y_AXIS_MV) {
    d3ec:	2902      	cmp	r1, #2
    d3ee:	d101      	bne.n	d3f4 <hiddf_mouse_move+0x28>
		_hiddf_mouse_funcd.mouse_report.bytes.y_axis_var = pos;
    d3f0:	71a0      	strb	r0, [r4, #6]
    d3f2:	e7f2      	b.n	d3da <hiddf_mouse_move+0xe>
	} else if (type == HID_MOUSE_SCROLL_MV) {
    d3f4:	2903      	cmp	r1, #3
    d3f6:	d101      	bne.n	d3fc <hiddf_mouse_move+0x30>
		_hiddf_mouse_funcd.mouse_report.bytes.scroll_var = pos;
    d3f8:	71e0      	strb	r0, [r4, #7]
    d3fa:	e7ee      	b.n	d3da <hiddf_mouse_move+0xe>
}
    d3fc:	f06f 000c 	mvn.w	r0, #12
    d400:	f85d 4b04 	ldr.w	r4, [sp], #4
    d404:	4770      	bx	lr
    d406:	bf00      	nop
    d408:	20000c5c 	.word	0x20000c5c
    d40c:	00011c29 	.word	0x00011c29
    d410:	20000c60 	.word	0x20000c60

0000d414 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    d414:	b900      	cbnz	r0, d418 <assert+0x4>
		__asm("BKPT #0");
    d416:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    d418:	4770      	bx	lr
	...

0000d41c <_dmac_handler>:
	tmp = ((Dmac *)hw)->INTPEND.reg;
    d41c:	4b10      	ldr	r3, [pc, #64]	; (d460 <_dmac_handler+0x44>)
    d41e:	8c1a      	ldrh	r2, [r3, #32]
}
/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    d420:	b430      	push	{r4, r5}
	tmp = ((Dmac *)hw)->INTPEND.reg;
    d422:	8c1d      	ldrh	r5, [r3, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
	struct _dma_resource *tmp_resource = &_resources[channel];
    d424:	4c0f      	ldr	r4, [pc, #60]	; (d464 <_dmac_handler+0x48>)
	tmp &= mask;
    d426:	f002 021f 	and.w	r2, r2, #31
    d42a:	210c      	movs	r1, #12
    d42c:	4351      	muls	r1, r2

	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    d42e:	05ed      	lsls	r5, r5, #23
	struct _dma_resource *tmp_resource = &_resources[channel];
    d430:	eb04 0001 	add.w	r0, r4, r1
	if (hri_dmac_get_INTPEND_TERR_bit(DMAC)) {
    d434:	d507      	bpl.n	d446 <_dmac_handler+0x2a>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    d436:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    d43a:	2201      	movs	r2, #1
    d43c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
    d440:	6843      	ldr	r3, [r0, #4]
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	}
}
    d442:	bc30      	pop	{r4, r5}
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    d444:	4718      	bx	r3
	tmp = ((Dmac *)hw)->INTPEND.reg;
    d446:	8c1d      	ldrh	r5, [r3, #32]
	} else if (hri_dmac_get_INTPEND_TCMPL_bit(DMAC)) {
    d448:	05ad      	lsls	r5, r5, #22
    d44a:	d506      	bpl.n	d45a <_dmac_handler+0x3e>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    d44c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    d450:	2202      	movs	r2, #2
    d452:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    d456:	5863      	ldr	r3, [r4, r1]
    d458:	e7f3      	b.n	d442 <_dmac_handler+0x26>
}
    d45a:	bc30      	pop	{r4, r5}
    d45c:	4770      	bx	lr
    d45e:	bf00      	nop
    d460:	4100a000 	.word	0x4100a000
    d464:	20000c74 	.word	0x20000c74

0000d468 <_dma_init>:
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    d468:	4b3d      	ldr	r3, [pc, #244]	; (d560 <_dma_init+0xf8>)
    d46a:	881a      	ldrh	r2, [r3, #0]
    d46c:	f022 0202 	bic.w	r2, r2, #2
    d470:	0412      	lsls	r2, r2, #16
    d472:	0c12      	lsrs	r2, r2, #16
{
    d474:	b570      	push	{r4, r5, r6, lr}
    d476:	801a      	strh	r2, [r3, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    d478:	885a      	ldrh	r2, [r3, #2]
    d47a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
    d47e:	0412      	lsls	r2, r2, #16
    d480:	0c12      	lsrs	r2, r2, #16
    d482:	805a      	strh	r2, [r3, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    d484:	881a      	ldrh	r2, [r3, #0]
    d486:	b292      	uxth	r2, r2
    d488:	f042 0201 	orr.w	r2, r2, #1
    d48c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    d48e:	881a      	ldrh	r2, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    d490:	f012 0201 	ands.w	r2, r2, #1
    d494:	d1fb      	bne.n	d48e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    d496:	f44f 6170 	mov.w	r1, #3840	; 0xf00
    d49a:	8019      	strh	r1, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    d49c:	7b59      	ldrb	r1, [r3, #13]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    d49e:	4831      	ldr	r0, [pc, #196]	; (d564 <_dma_init+0xfc>)
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    d4a0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    d4a4:	f041 0101 	orr.w	r1, r1, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    d4a8:	7359      	strb	r1, [r3, #13]
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    d4aa:	492f      	ldr	r1, [pc, #188]	; (d568 <_dma_init+0x100>)
	((Dmac *)hw)->PRICTRL0.reg = data;
    d4ac:	615a      	str	r2, [r3, #20]
	((Dmac *)hw)->BASEADDR.reg = data;
    d4ae:	6358      	str	r0, [r3, #52]	; 0x34
	((Dmac *)hw)->WRBADDR.reg = data;
    d4b0:	6399      	str	r1, [r3, #56]	; 0x38
    d4b2:	4613      	mov	r3, r2
    d4b4:	492d      	ldr	r1, [pc, #180]	; (d56c <_dma_init+0x104>)
    d4b6:	4602      	mov	r2, r0
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    d4b8:	461d      	mov	r5, r3
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    d4ba:	011c      	lsls	r4, r3, #4
    d4bc:	f104 4082 	add.w	r0, r4, #1090519040	; 0x41000000
    d4c0:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    d4c4:	680e      	ldr	r6, [r1, #0]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    d4c6:	6406      	str	r6, [r0, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    d4c8:	790e      	ldrb	r6, [r1, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    d4ca:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    d4ce:	794e      	ldrb	r6, [r1, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    d4d0:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    d4d4:	3301      	adds	r3, #1
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    d4d6:	1910      	adds	r0, r2, r4
    d4d8:	88ce      	ldrh	r6, [r1, #6]
    d4da:	5316      	strh	r6, [r2, r4]
	for (i = 0; i < DMAC_CH_NUM; i++) {
    d4dc:	2b20      	cmp	r3, #32
	((DmacDescriptor *)hw)->DESCADDR.reg = data;
    d4de:	60c5      	str	r5, [r0, #12]
    d4e0:	f101 0108 	add.w	r1, r1, #8
    d4e4:	d1e9      	bne.n	d4ba <_dma_init+0x52>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d4e6:	4b22      	ldr	r3, [pc, #136]	; (d570 <_dma_init+0x108>)
    d4e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d4ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    d4f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d4f4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d4f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d4fc:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d4fe:	2201      	movs	r2, #1
    d500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    d504:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d508:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d50c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d510:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d512:	2202      	movs	r2, #2
    d514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    d518:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d51c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d520:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d524:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d526:	2204      	movs	r2, #4
    d528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    d52c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d530:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d534:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d538:	605a      	str	r2, [r3, #4]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d53a:	2208      	movs	r2, #8
    d53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
    d540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d544:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d548:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d54c:	605a      	str	r2, [r3, #4]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    d54e:	4a04      	ldr	r2, [pc, #16]	; (d560 <_dma_init+0xf8>)
    d550:	8813      	ldrh	r3, [r2, #0]
    d552:	b29b      	uxth	r3, r3
    d554:	f043 0302 	orr.w	r3, r3, #2
    d558:	8013      	strh	r3, [r2, #0]
}
    d55a:	2000      	movs	r0, #0
    d55c:	bd70      	pop	{r4, r5, r6, pc}
    d55e:	bf00      	nop
    d560:	4100a000 	.word	0x4100a000
    d564:	200146d0 	.word	0x200146d0
    d568:	200148d0 	.word	0x200148d0
    d56c:	00015d74 	.word	0x00015d74
    d570:	e000e100 	.word	0xe000e100

0000d574 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    d574:	b939      	cbnz	r1, d586 <_dma_set_irq_state+0x12>
	if (value == 0x0) {
    d576:	4b08      	ldr	r3, [pc, #32]	; (d598 <_dma_set_irq_state+0x24>)
    d578:	0100      	lsls	r0, r0, #4
    d57a:	2102      	movs	r1, #2
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    d57c:	4418      	add	r0, r3
	if (value == 0x0) {
    d57e:	b93a      	cbnz	r2, d590 <_dma_set_irq_state+0x1c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    d580:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    d584:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    d586:	2901      	cmp	r1, #1
    d588:	d104      	bne.n	d594 <_dma_set_irq_state+0x20>
	if (value == 0x0) {
    d58a:	4b03      	ldr	r3, [pc, #12]	; (d598 <_dma_set_irq_state+0x24>)
    d58c:	0100      	lsls	r0, r0, #4
    d58e:	e7f5      	b.n	d57c <_dma_set_irq_state+0x8>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    d590:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
}
    d594:	4770      	bx	lr
    d596:	bf00      	nop
    d598:	4100a000 	.word	0x4100a000

0000d59c <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    d59c:	4b02      	ldr	r3, [pc, #8]	; (d5a8 <_dma_set_destination_address+0xc>)
    d59e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d5a2:	6081      	str	r1, [r0, #8]
}
    d5a4:	2000      	movs	r0, #0
    d5a6:	4770      	bx	lr
    d5a8:	200146d0 	.word	0x200146d0

0000d5ac <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    d5ac:	4b02      	ldr	r3, [pc, #8]	; (d5b8 <_dma_set_source_address+0xc>)
    d5ae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d5b2:	6041      	str	r1, [r0, #4]
}
    d5b4:	2000      	movs	r0, #0
    d5b6:	4770      	bx	lr
    d5b8:	200146d0 	.word	0x200146d0

0000d5bc <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    d5bc:	4a05      	ldr	r2, [pc, #20]	; (d5d4 <_dma_srcinc_enable+0x18>)
    d5be:	0100      	lsls	r0, r0, #4
    d5c0:	5a13      	ldrh	r3, [r2, r0]
    d5c2:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    d5c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    d5c8:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    d5cc:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    d5ce:	5211      	strh	r1, [r2, r0]
}
    d5d0:	2000      	movs	r0, #0
    d5d2:	4770      	bx	lr
    d5d4:	200146d0 	.word	0x200146d0

0000d5d8 <_dma_set_data_amount>:
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    d5d8:	4b0f      	ldr	r3, [pc, #60]	; (d618 <_dma_set_data_amount+0x40>)
{
    d5da:	b570      	push	{r4, r5, r6, lr}
    d5dc:	0104      	lsls	r4, r0, #4
    d5de:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    d5e2:	6886      	ldr	r6, [r0, #8]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    d5e4:	5b1a      	ldrh	r2, [r3, r4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    d5e6:	5b1d      	ldrh	r5, [r3, r4]
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    d5e8:	f3c2 2201 	ubfx	r2, r2, #8, #2
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    d5ec:	052d      	lsls	r5, r5, #20
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    d5ee:	bf42      	ittt	mi
    d5f0:	fa01 f502 	lslmi.w	r5, r1, r2
    d5f4:	19ad      	addmi	r5, r5, r6
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    d5f6:	6085      	strmi	r5, [r0, #8]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    d5f8:	1918      	adds	r0, r3, r4
    d5fa:	6845      	ldr	r5, [r0, #4]
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    d5fc:	5b1e      	ldrh	r6, [r3, r4]
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    d5fe:	0576      	lsls	r6, r6, #21
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    d600:	bf48      	it	mi
    d602:	fa01 f202 	lslmi.w	r2, r1, r2
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    d606:	4423      	add	r3, r4
    d608:	bf48      	it	mi
    d60a:	1952      	addmi	r2, r2, r5
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    d60c:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    d60e:	bf48      	it	mi
    d610:	6042      	strmi	r2, [r0, #4]
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    d612:	8059      	strh	r1, [r3, #2]
}
    d614:	2000      	movs	r0, #0
    d616:	bd70      	pop	{r4, r5, r6, pc}
    d618:	200146d0 	.word	0x200146d0

0000d61c <_dma_enable_transaction>:
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    d61c:	0102      	lsls	r2, r0, #4
{
    d61e:	b510      	push	{r4, lr}
    d620:	4c0b      	ldr	r4, [pc, #44]	; (d650 <_dma_enable_transaction+0x34>)
    d622:	5aa3      	ldrh	r3, [r4, r2]
    d624:	b29b      	uxth	r3, r3
    d626:	f043 0301 	orr.w	r3, r3, #1
    d62a:	52a3      	strh	r3, [r4, r2]
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    d62c:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    d630:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
    d634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    d636:	f042 0202 	orr.w	r2, r2, #2
    d63a:	641a      	str	r2, [r3, #64]	; 0x40
	if (software_trigger) {
    d63c:	b131      	cbz	r1, d64c <_dma_enable_transaction+0x30>
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    d63e:	4a05      	ldr	r2, [pc, #20]	; (d654 <_dma_enable_transaction+0x38>)
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    d640:	2301      	movs	r3, #1
    d642:	6911      	ldr	r1, [r2, #16]
    d644:	fa03 f000 	lsl.w	r0, r3, r0
    d648:	4308      	orrs	r0, r1
    d64a:	6110      	str	r0, [r2, #16]
}
    d64c:	2000      	movs	r0, #0
    d64e:	bd10      	pop	{r4, pc}
    d650:	200146d0 	.word	0x200146d0
    d654:	4100a000 	.word	0x4100a000

0000d658 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    d658:	4b03      	ldr	r3, [pc, #12]	; (d668 <_dma_get_channel_resource+0x10>)
    d65a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d65e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d662:	6001      	str	r1, [r0, #0]
}
    d664:	2000      	movs	r0, #0
    d666:	4770      	bx	lr
    d668:	20000c74 	.word	0x20000c74

0000d66c <DMAC_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void DMAC_0_Handler(void)
{
	_dmac_handler();
    d66c:	4b00      	ldr	r3, [pc, #0]	; (d670 <DMAC_0_Handler+0x4>)
    d66e:	4718      	bx	r3
    d670:	0000d41d 	.word	0x0000d41d

0000d674 <DMAC_1_Handler>:
    d674:	4b00      	ldr	r3, [pc, #0]	; (d678 <DMAC_1_Handler+0x4>)
    d676:	4718      	bx	r3
    d678:	0000d41d 	.word	0x0000d41d

0000d67c <DMAC_2_Handler>:
    d67c:	4b00      	ldr	r3, [pc, #0]	; (d680 <DMAC_2_Handler+0x4>)
    d67e:	4718      	bx	r3
    d680:	0000d41d 	.word	0x0000d41d

0000d684 <DMAC_3_Handler>:
    d684:	4b00      	ldr	r3, [pc, #0]	; (d688 <DMAC_3_Handler+0x4>)
    d686:	4718      	bx	r3
    d688:	0000d41d 	.word	0x0000d41d

0000d68c <DMAC_4_Handler>:
    d68c:	4b00      	ldr	r3, [pc, #0]	; (d690 <DMAC_4_Handler+0x4>)
    d68e:	4718      	bx	r3
    d690:	0000d41d 	.word	0x0000d41d

0000d694 <adc_async_window_threshold_reached>:

static void adc_async_window_threshold_reached(struct _adc_async_device *device, const uint8_t channel)
{
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.monitor) {
    d694:	6983      	ldr	r3, [r0, #24]
    d696:	b103      	cbz	r3, d69a <adc_async_window_threshold_reached+0x6>
		descr->adc_async_cb.monitor(descr, channel);
    d698:	4718      	bx	r3
	}
}
    d69a:	4770      	bx	lr

0000d69c <adc_async_error_occured>:

static void adc_async_error_occured(struct _adc_async_device *device, const uint8_t channel)
{
	struct adc_async_descriptor *const descr = CONTAINER_OF(device, struct adc_async_descriptor, device);

	if (descr->adc_async_cb.error) {
    d69c:	69c3      	ldr	r3, [r0, #28]
    d69e:	b103      	cbz	r3, d6a2 <adc_async_error_occured+0x6>
		descr->adc_async_cb.error(descr, channel);
    d6a0:	4718      	bx	r3
	}
}
    d6a2:	4770      	bx	lr

0000d6a4 <adc_async_channel_conversion_done>:
{
    d6a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t                              index    = descr->channel_map[channel];
    d6a8:	6a03      	ldr	r3, [r0, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    d6aa:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    d6ae:	5c5c      	ldrb	r4, [r3, r1]
	ringbuffer_put(&descr_ch->convert, data);
    d6b0:	f8df a054 	ldr.w	sl, [pc, #84]	; d708 <adc_async_channel_conversion_done+0x64>
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    d6b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d6b8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
    d6bc:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
	ringbuffer_put(&descr_ch->convert, data);
    d6c0:	f104 0b04 	add.w	fp, r4, #4
{
    d6c4:	4605      	mov	r5, r0
    d6c6:	460e      	mov	r6, r1
	ringbuffer_put(&descr_ch->convert, data);
    d6c8:	4658      	mov	r0, fp
    d6ca:	b2d1      	uxtb	r1, r2
{
    d6cc:	4617      	mov	r7, r2
	ringbuffer_put(&descr_ch->convert, data);
    d6ce:	47d0      	blx	sl
	if (1 < _adc_async_get_data_size(&descr->device)) {
    d6d0:	4b0c      	ldr	r3, [pc, #48]	; (d704 <adc_async_channel_conversion_done+0x60>)
    d6d2:	4628      	mov	r0, r5
    d6d4:	4798      	blx	r3
    d6d6:	2801      	cmp	r0, #1
    d6d8:	d905      	bls.n	d6e6 <adc_async_channel_conversion_done+0x42>
		ringbuffer_put(&descr_ch->convert, data >> 8);
    d6da:	0a39      	lsrs	r1, r7, #8
    d6dc:	4658      	mov	r0, fp
    d6de:	47d0      	blx	sl
		++descr_ch->bytes_in_buffer;
    d6e0:	8aa3      	ldrh	r3, [r4, #20]
    d6e2:	3301      	adds	r3, #1
    d6e4:	82a3      	strh	r3, [r4, #20]
	++descr_ch->bytes_in_buffer;
    d6e6:	8aa3      	ldrh	r3, [r4, #20]
    d6e8:	3301      	adds	r3, #1
    d6ea:	82a3      	strh	r3, [r4, #20]
	if (descr_ch->adc_async_ch_cb.convert_done) {
    d6ec:	f858 3009 	ldr.w	r3, [r8, r9]
    d6f0:	b12b      	cbz	r3, d6fe <adc_async_channel_conversion_done+0x5a>
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    d6f2:	4631      	mov	r1, r6
    d6f4:	4628      	mov	r0, r5
}
    d6f6:	b001      	add	sp, #4
    d6f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		descr_ch->adc_async_ch_cb.convert_done(descr, channel);
    d6fc:	4718      	bx	r3
}
    d6fe:	b001      	add	sp, #4
    d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d704:	000119a9 	.word	0x000119a9
    d708:	00011611 	.word	0x00011611

0000d70c <adc_async_init>:
{
    d70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d710:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    d714:	f89d 8020 	ldrb.w	r8, [sp, #32]
    d718:	460e      	mov	r6, r1
    d71a:	4615      	mov	r5, r2
    d71c:	461f      	mov	r7, r3
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    d71e:	4604      	mov	r4, r0
    d720:	b150      	cbz	r0, d738 <adc_async_init+0x2c>
    d722:	2900      	cmp	r1, #0
    d724:	d032      	beq.n	d78c <adc_async_init+0x80>
    d726:	2a00      	cmp	r2, #0
    d728:	d032      	beq.n	d790 <adc_async_init+0x84>
    d72a:	f1b8 0f00 	cmp.w	r8, #0
    d72e:	d031      	beq.n	d794 <adc_async_init+0x88>
    d730:	f1b9 0000 	subs.w	r0, r9, #0
    d734:	bf18      	it	ne
    d736:	2001      	movne	r0, #1
    d738:	4917      	ldr	r1, [pc, #92]	; (d798 <adc_async_init+0x8c>)
    d73a:	f8df a070 	ldr.w	sl, [pc, #112]	; d7ac <adc_async_init+0xa0>
    d73e:	223f      	movs	r2, #63	; 0x3f
    d740:	47d0      	blx	sl
	ASSERT(channel_amount <= (channel_max + 1));
    d742:	1c78      	adds	r0, r7, #1
    d744:	4580      	cmp	r8, r0
    d746:	4914      	ldr	r1, [pc, #80]	; (d798 <adc_async_init+0x8c>)
    d748:	f04f 0240 	mov.w	r2, #64	; 0x40
    d74c:	bfcc      	ite	gt
    d74e:	2000      	movgt	r0, #0
    d750:	2001      	movle	r0, #1
    d752:	47d0      	blx	sl
	device = &descr->device;
    d754:	2300      	movs	r3, #0
		channel_map[i] = 0xFF;
    d756:	21ff      	movs	r1, #255	; 0xff
    d758:	b2da      	uxtb	r2, r3
    d75a:	3301      	adds	r3, #1
    d75c:	54a9      	strb	r1, [r5, r2]
	for (uint8_t i = 0; i <= channel_max; i++) {
    d75e:	b2da      	uxtb	r2, r3
    d760:	4297      	cmp	r7, r2
    d762:	d2f9      	bcs.n	d758 <adc_async_init+0x4c>
	init_status           = _adc_async_init(device, hw);
    d764:	4b0d      	ldr	r3, [pc, #52]	; (d79c <adc_async_init+0x90>)
	descr->channel_map    = channel_map;
    d766:	6225      	str	r5, [r4, #32]
	descr->channel_max    = channel_max;
    d768:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
	descr->channel_amount = channel_amount;
    d76c:	f884 8025 	strb.w	r8, [r4, #37]	; 0x25
	descr->descr_ch       = descr_ch;
    d770:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	init_status           = _adc_async_init(device, hw);
    d774:	4631      	mov	r1, r6
    d776:	4620      	mov	r0, r4
    d778:	4798      	blx	r3
	if (init_status) {
    d77a:	b928      	cbnz	r0, d788 <adc_async_init+0x7c>
	device->adc_async_ch_cb.convert_done = adc_async_channel_conversion_done;
    d77c:	4b08      	ldr	r3, [pc, #32]	; (d7a0 <adc_async_init+0x94>)
    d77e:	60a3      	str	r3, [r4, #8]
	device->adc_async_cb.window_cb       = adc_async_window_threshold_reached;
    d780:	4b08      	ldr	r3, [pc, #32]	; (d7a4 <adc_async_init+0x98>)
    d782:	6023      	str	r3, [r4, #0]
	device->adc_async_cb.error_cb        = adc_async_error_occured;
    d784:	4b08      	ldr	r3, [pc, #32]	; (d7a8 <adc_async_init+0x9c>)
    d786:	6063      	str	r3, [r4, #4]
}
    d788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(descr && hw && channel_map && channel_amount && descr_ch);
    d78c:	4608      	mov	r0, r1
    d78e:	e7d3      	b.n	d738 <adc_async_init+0x2c>
    d790:	4610      	mov	r0, r2
    d792:	e7d1      	b.n	d738 <adc_async_init+0x2c>
    d794:	4640      	mov	r0, r8
    d796:	e7cf      	b.n	d738 <adc_async_init+0x2c>
    d798:	00015e74 	.word	0x00015e74
    d79c:	000118d1 	.word	0x000118d1
    d7a0:	0000d6a5 	.word	0x0000d6a5
    d7a4:	0000d695 	.word	0x0000d695
    d7a8:	0000d69d 	.word	0x0000d69d
    d7ac:	0000d415 	.word	0x0000d415

0000d7b0 <adc_async_register_channel_buffer>:
{
    d7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7b4:	460e      	mov	r6, r1
    d7b6:	4617      	mov	r7, r2
    d7b8:	4698      	mov	r8, r3
	ASSERT(descr && convert_buffer && convert_buffer_length);
    d7ba:	4604      	mov	r4, r0
    d7bc:	b118      	cbz	r0, d7c6 <adc_async_register_channel_buffer+0x16>
    d7be:	b1c2      	cbz	r2, d7f2 <adc_async_register_channel_buffer+0x42>
    d7c0:	1e18      	subs	r0, r3, #0
    d7c2:	bf18      	it	ne
    d7c4:	2001      	movne	r0, #1
    d7c6:	4921      	ldr	r1, [pc, #132]	; (d84c <adc_async_register_channel_buffer+0x9c>)
    d7c8:	4d21      	ldr	r5, [pc, #132]	; (d850 <adc_async_register_channel_buffer+0xa0>)
    d7ca:	2266      	movs	r2, #102	; 0x66
    d7cc:	47a8      	blx	r5
	ASSERT(descr->channel_max >= channel);
    d7ce:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d7d2:	491e      	ldr	r1, [pc, #120]	; (d84c <adc_async_register_channel_buffer+0x9c>)
    d7d4:	42b0      	cmp	r0, r6
    d7d6:	f04f 0267 	mov.w	r2, #103	; 0x67
    d7da:	bf34      	ite	cc
    d7dc:	2000      	movcc	r0, #0
    d7de:	2001      	movcs	r0, #1
    d7e0:	47a8      	blx	r5
	if (descr->channel_map[channel] != 0xFF) {
    d7e2:	6a23      	ldr	r3, [r4, #32]
    d7e4:	5d9a      	ldrb	r2, [r3, r6]
    d7e6:	2aff      	cmp	r2, #255	; 0xff
    d7e8:	d005      	beq.n	d7f6 <adc_async_register_channel_buffer+0x46>
		return ERR_INVALID_ARG;
    d7ea:	f06f 000c 	mvn.w	r0, #12
}
    d7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && convert_buffer && convert_buffer_length);
    d7f2:	4610      	mov	r0, r2
    d7f4:	e7e7      	b.n	d7c6 <adc_async_register_channel_buffer+0x16>
	for (i = 0; i <= descr->channel_max; i++) {
    d7f6:	2200      	movs	r2, #0
    d7f8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
	uint8_t i, index = 0;
    d7fc:	4615      	mov	r5, r2
		if (descr->channel_map[i] != 0xFF) {
    d7fe:	b2d1      	uxtb	r1, r2
    d800:	3201      	adds	r2, #1
    d802:	5c59      	ldrb	r1, [r3, r1]
    d804:	29ff      	cmp	r1, #255	; 0xff
			index++;
    d806:	bf18      	it	ne
    d808:	3501      	addne	r5, #1
	for (i = 0; i <= descr->channel_max; i++) {
    d80a:	b2d1      	uxtb	r1, r2
			index++;
    d80c:	bf18      	it	ne
    d80e:	b2ed      	uxtbne	r5, r5
	for (i = 0; i <= descr->channel_max; i++) {
    d810:	4288      	cmp	r0, r1
    d812:	d2f4      	bcs.n	d7fe <adc_async_register_channel_buffer+0x4e>
	if (index > descr->channel_amount) {
    d814:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    d818:	42ab      	cmp	r3, r5
    d81a:	d313      	bcc.n	d844 <adc_async_register_channel_buffer+0x94>
	if (ERR_NONE != ringbuffer_init(&descr->descr_ch[index].convert, convert_buffer, convert_buffer_length)) {
    d81c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    d81e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    d822:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    d826:	ea4f 09c3 	mov.w	r9, r3, lsl #3
    d82a:	4642      	mov	r2, r8
    d82c:	4b09      	ldr	r3, [pc, #36]	; (d854 <adc_async_register_channel_buffer+0xa4>)
    d82e:	4639      	mov	r1, r7
    d830:	3004      	adds	r0, #4
    d832:	4798      	blx	r3
    d834:	2800      	cmp	r0, #0
    d836:	d1d8      	bne.n	d7ea <adc_async_register_channel_buffer+0x3a>
	descr->channel_map[channel]            = index;
    d838:	6a23      	ldr	r3, [r4, #32]
    d83a:	559d      	strb	r5, [r3, r6]
	descr->descr_ch[index].bytes_in_buffer = 0;
    d83c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d83e:	444b      	add	r3, r9
    d840:	8298      	strh	r0, [r3, #20]
	return ERR_NONE;
    d842:	e7d4      	b.n	d7ee <adc_async_register_channel_buffer+0x3e>
		return ERR_NO_RESOURCE;
    d844:	f06f 001b 	mvn.w	r0, #27
    d848:	e7d1      	b.n	d7ee <adc_async_register_channel_buffer+0x3e>
    d84a:	bf00      	nop
    d84c:	00015e74 	.word	0x00015e74
    d850:	0000d415 	.word	0x0000d415
    d854:	00011595 	.word	0x00011595

0000d858 <adc_async_enable_channel>:
{
    d858:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
    d85a:	4604      	mov	r4, r0
    d85c:	3800      	subs	r0, #0
{
    d85e:	460d      	mov	r5, r1
	ASSERT(descr);
    d860:	bf18      	it	ne
    d862:	2001      	movne	r0, #1
    d864:	4e09      	ldr	r6, [pc, #36]	; (d88c <adc_async_enable_channel+0x34>)
    d866:	490a      	ldr	r1, [pc, #40]	; (d890 <adc_async_enable_channel+0x38>)
    d868:	2283      	movs	r2, #131	; 0x83
    d86a:	47b0      	blx	r6
	ASSERT(descr->channel_max >= channel);
    d86c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d870:	4907      	ldr	r1, [pc, #28]	; (d890 <adc_async_enable_channel+0x38>)
    d872:	42a8      	cmp	r0, r5
    d874:	bf34      	ite	cc
    d876:	2000      	movcc	r0, #0
    d878:	2001      	movcs	r0, #1
    d87a:	2284      	movs	r2, #132	; 0x84
    d87c:	47b0      	blx	r6
	_adc_async_enable_channel(&descr->device, channel);
    d87e:	4620      	mov	r0, r4
    d880:	4b04      	ldr	r3, [pc, #16]	; (d894 <adc_async_enable_channel+0x3c>)
    d882:	4629      	mov	r1, r5
    d884:	4798      	blx	r3
}
    d886:	2000      	movs	r0, #0
    d888:	bd70      	pop	{r4, r5, r6, pc}
    d88a:	bf00      	nop
    d88c:	0000d415 	.word	0x0000d415
    d890:	00015e74 	.word	0x00015e74
    d894:	0001199d 	.word	0x0001199d

0000d898 <adc_async_register_callback>:
{
    d898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT(descr);
    d89c:	4604      	mov	r4, r0
    d89e:	3800      	subs	r0, #0
    d8a0:	bf18      	it	ne
    d8a2:	2001      	movne	r0, #1
    d8a4:	f8df 8064 	ldr.w	r8, [pc, #100]	; d90c <adc_async_register_callback+0x74>
{
    d8a8:	460f      	mov	r7, r1
    d8aa:	4615      	mov	r5, r2
	ASSERT(descr);
    d8ac:	4915      	ldr	r1, [pc, #84]	; (d904 <adc_async_register_callback+0x6c>)
    d8ae:	229c      	movs	r2, #156	; 0x9c
{
    d8b0:	461e      	mov	r6, r3
	ASSERT(descr);
    d8b2:	47c0      	blx	r8
	ASSERT(descr->channel_max >= channel);
    d8b4:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d8b8:	4912      	ldr	r1, [pc, #72]	; (d904 <adc_async_register_callback+0x6c>)
    d8ba:	42b8      	cmp	r0, r7
    d8bc:	bf34      	ite	cc
    d8be:	2000      	movcc	r0, #0
    d8c0:	2001      	movcs	r0, #1
    d8c2:	229d      	movs	r2, #157	; 0x9d
    d8c4:	47c0      	blx	r8
	switch (type) {
    d8c6:	2d01      	cmp	r5, #1
    d8c8:	d014      	beq.n	d8f4 <adc_async_register_callback+0x5c>
    d8ca:	2d02      	cmp	r5, #2
    d8cc:	d014      	beq.n	d8f8 <adc_async_register_callback+0x60>
    d8ce:	b9ad      	cbnz	r5, d8fc <adc_async_register_callback+0x64>
	uint8_t index = descr->channel_map[channel];
    d8d0:	6a23      	ldr	r3, [r4, #32]
		descr->descr_ch[index].adc_async_ch_cb.convert_done = cb;
    d8d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d8d4:	5ddb      	ldrb	r3, [r3, r7]
    d8d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d8da:	f842 6033 	str.w	r6, [r2, r3, lsl #3]
	_adc_async_set_irq_state(&descr->device, channel, (enum _adc_async_callback_type)type, cb != NULL);
    d8de:	1e33      	subs	r3, r6, #0
    d8e0:	4620      	mov	r0, r4
    d8e2:	bf18      	it	ne
    d8e4:	2301      	movne	r3, #1
    d8e6:	4c08      	ldr	r4, [pc, #32]	; (d908 <adc_async_register_callback+0x70>)
    d8e8:	462a      	mov	r2, r5
    d8ea:	4639      	mov	r1, r7
    d8ec:	47a0      	blx	r4
	return ERR_NONE;
    d8ee:	2000      	movs	r0, #0
}
    d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		descr->adc_async_cb.monitor = cb;
    d8f4:	61a6      	str	r6, [r4, #24]
		break;
    d8f6:	e7f2      	b.n	d8de <adc_async_register_callback+0x46>
		descr->adc_async_cb.error = cb;
    d8f8:	61e6      	str	r6, [r4, #28]
		break;
    d8fa:	e7f0      	b.n	d8de <adc_async_register_callback+0x46>
	switch (type) {
    d8fc:	f06f 000c 	mvn.w	r0, #12
    d900:	e7f6      	b.n	d8f0 <adc_async_register_callback+0x58>
    d902:	bf00      	nop
    d904:	00015e74 	.word	0x00015e74
    d908:	000119d5 	.word	0x000119d5
    d90c:	0000d415 	.word	0x0000d415

0000d910 <adc_async_read_channel>:
{
    d910:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    d914:	460e      	mov	r6, r1
    d916:	4617      	mov	r7, r2
    d918:	461d      	mov	r5, r3
	ASSERT(descr && buffer && length);
    d91a:	4604      	mov	r4, r0
    d91c:	b120      	cbz	r0, d928 <adc_async_read_channel+0x18>
    d91e:	2a00      	cmp	r2, #0
    d920:	d03f      	beq.n	d9a2 <adc_async_read_channel+0x92>
    d922:	1e18      	subs	r0, r3, #0
    d924:	bf18      	it	ne
    d926:	2001      	movne	r0, #1
    d928:	f8df 8098 	ldr.w	r8, [pc, #152]	; d9c4 <adc_async_read_channel+0xb4>
    d92c:	4920      	ldr	r1, [pc, #128]	; (d9b0 <adc_async_read_channel+0xa0>)
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    d92e:	f8df a098 	ldr.w	sl, [pc, #152]	; d9c8 <adc_async_read_channel+0xb8>
	ASSERT(descr && buffer && length);
    d932:	22bc      	movs	r2, #188	; 0xbc
    d934:	47c0      	blx	r8
	ASSERT(descr->channel_max >= channel);
    d936:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    d93a:	491d      	ldr	r1, [pc, #116]	; (d9b0 <adc_async_read_channel+0xa0>)
    d93c:	42b0      	cmp	r0, r6
    d93e:	bf34      	ite	cc
    d940:	2000      	movcc	r0, #0
    d942:	2001      	movcs	r0, #1
    d944:	22bd      	movs	r2, #189	; 0xbd
    d946:	47c0      	blx	r8
	data_size = _adc_async_get_data_size(&descr->device);
    d948:	4b1a      	ldr	r3, [pc, #104]	; (d9b4 <adc_async_read_channel+0xa4>)
    d94a:	4620      	mov	r0, r4
    d94c:	4798      	blx	r3
	ASSERT(!(length % data_size));
    d94e:	fbb5 f3f0 	udiv	r3, r5, r0
    d952:	fb03 5010 	mls	r0, r3, r0, r5
    d956:	fab0 f080 	clz	r0, r0
    d95a:	4915      	ldr	r1, [pc, #84]	; (d9b0 <adc_async_read_channel+0xa0>)
    d95c:	22bf      	movs	r2, #191	; 0xbf
    d95e:	0940      	lsrs	r0, r0, #5
    d960:	47c0      	blx	r8
	index                                         = descr->channel_map[channel];
    d962:	6a23      	ldr	r3, [r4, #32]
	struct adc_async_channel_descriptor *descr_ch = &descr->descr_ch[index];
    d964:	5d9e      	ldrb	r6, [r3, r6]
    d966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d968:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    d96c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
	CRITICAL_SECTION_ENTER()
    d970:	a801      	add	r0, sp, #4
    d972:	4b11      	ldr	r3, [pc, #68]	; (d9b8 <adc_async_read_channel+0xa8>)
	num = ringbuffer_num(&descr_ch->convert);
    d974:	f106 0904 	add.w	r9, r6, #4
	CRITICAL_SECTION_ENTER()
    d978:	4798      	blx	r3
	num = ringbuffer_num(&descr_ch->convert);
    d97a:	4b10      	ldr	r3, [pc, #64]	; (d9bc <adc_async_read_channel+0xac>)
    d97c:	4648      	mov	r0, r9
    d97e:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    d980:	4b0f      	ldr	r3, [pc, #60]	; (d9c0 <adc_async_read_channel+0xb0>)
	num = ringbuffer_num(&descr_ch->convert);
    d982:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
    d984:	a801      	add	r0, sp, #4
    d986:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    d988:	2400      	movs	r4, #0
    d98a:	45a0      	cmp	r8, r4
    d98c:	b2a2      	uxth	r2, r4
    d98e:	d001      	beq.n	d994 <adc_async_read_channel+0x84>
    d990:	42a5      	cmp	r5, r4
    d992:	d108      	bne.n	d9a6 <adc_async_read_channel+0x96>
	descr_ch->bytes_in_buffer -= was_read;
    d994:	8ab3      	ldrh	r3, [r6, #20]
}
    d996:	4620      	mov	r0, r4
	descr_ch->bytes_in_buffer -= was_read;
    d998:	1a9b      	subs	r3, r3, r2
    d99a:	82b3      	strh	r3, [r6, #20]
}
    d99c:	b002      	add	sp, #8
    d99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ASSERT(descr && buffer && length);
    d9a2:	4610      	mov	r0, r2
    d9a4:	e7c0      	b.n	d928 <adc_async_read_channel+0x18>
		ringbuffer_get(&descr_ch->convert, &buffer[was_read++]);
    d9a6:	1939      	adds	r1, r7, r4
    d9a8:	4648      	mov	r0, r9
    d9aa:	47d0      	blx	sl
    d9ac:	3401      	adds	r4, #1
    d9ae:	e7ec      	b.n	d98a <adc_async_read_channel+0x7a>
    d9b0:	00015e74 	.word	0x00015e74
    d9b4:	000119a9 	.word	0x000119a9
    d9b8:	00011679 	.word	0x00011679
    d9bc:	00011655 	.word	0x00011655
    d9c0:	00011687 	.word	0x00011687
    d9c4:	0000d415 	.word	0x0000d415
    d9c8:	000115d1 	.word	0x000115d1

0000d9cc <adc_async_start_conversion>:
{
    d9cc:	b510      	push	{r4, lr}
	ASSERT(descr);
    d9ce:	4604      	mov	r4, r0
    d9d0:	3800      	subs	r0, #0
    d9d2:	bf18      	it	ne
    d9d4:	2001      	movne	r0, #1
    d9d6:	4904      	ldr	r1, [pc, #16]	; (d9e8 <adc_async_start_conversion+0x1c>)
    d9d8:	4b04      	ldr	r3, [pc, #16]	; (d9ec <adc_async_start_conversion+0x20>)
    d9da:	22d6      	movs	r2, #214	; 0xd6
    d9dc:	4798      	blx	r3
	_adc_async_convert(&descr->device);
    d9de:	4620      	mov	r0, r4
    d9e0:	4b03      	ldr	r3, [pc, #12]	; (d9f0 <adc_async_start_conversion+0x24>)
    d9e2:	4798      	blx	r3
}
    d9e4:	2000      	movs	r0, #0
    d9e6:	bd10      	pop	{r4, pc}
    d9e8:	00015e74 	.word	0x00015e74
    d9ec:	0000d415 	.word	0x0000d415
    d9f0:	000119bd 	.word	0x000119bd

0000d9f4 <_oscctrl_init_sources>:
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    d9f4:	4770      	bx	lr
	...

0000d9f8 <_oscctrl_init_referenced_generators>:

static inline void hri_gclk_write_GENCTRL_SRC_bf(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	uint32_t tmp;
	GCLK_CRITICAL_SECTION_ENTER();
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    d9f8:	4b3b      	ldr	r3, [pc, #236]	; (dae8 <_oscctrl_init_referenced_generators+0xf0>)
    d9fa:	6a1a      	ldr	r2, [r3, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    d9fc:	f022 020f 	bic.w	r2, r2, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    da00:	f042 0204 	orr.w	r2, r2, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    da04:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    da06:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    da0a:	6859      	ldr	r1, [r3, #4]
    da0c:	4211      	tst	r1, r2
    da0e:	d1fc      	bne.n	da0a <_oscctrl_init_referenced_generators+0x12>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    da10:	685a      	ldr	r2, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    da12:	0750      	lsls	r0, r2, #29
    da14:	f3c2 0180 	ubfx	r1, r2, #2, #1
    da18:	d4fa      	bmi.n	da10 <_oscctrl_init_referenced_generators+0x18>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    da1a:	4b34      	ldr	r3, [pc, #208]	; (daec <_oscctrl_init_referenced_generators+0xf4>)
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    da1c:	4a34      	ldr	r2, [pc, #208]	; (daf0 <_oscctrl_init_referenced_generators+0xf8>)
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    da1e:	7719      	strb	r1, [r3, #28]
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    da20:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    da22:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    da26:	f3c2 1100 	ubfx	r1, r2, #4, #1
    da2a:	06d2      	lsls	r2, r2, #27
    da2c:	d4f9      	bmi.n	da22 <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    da2e:	f883 1020 	strb.w	r1, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    da32:	4b2e      	ldr	r3, [pc, #184]	; (daec <_oscctrl_init_referenced_generators+0xf4>)
    da34:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    da38:	0750      	lsls	r0, r2, #29
    da3a:	d4fb      	bmi.n	da34 <_oscctrl_init_referenced_generators+0x3c>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    da3c:	2202      	movs	r2, #2
    da3e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    da40:	4b2a      	ldr	r3, [pc, #168]	; (daec <_oscctrl_init_referenced_generators+0xf4>)
    da42:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    da46:	0791      	lsls	r1, r2, #30
    da48:	d4fb      	bmi.n	da42 <_oscctrl_init_referenced_generators+0x4a>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    da4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    da4c:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    da4e:	4b27      	ldr	r3, [pc, #156]	; (daec <_oscctrl_init_referenced_generators+0xf4>)
    da50:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    da54:	0712      	lsls	r2, r2, #28
    da56:	d4fb      	bmi.n	da50 <_oscctrl_init_referenced_generators+0x58>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    da58:	2288      	movs	r2, #136	; 0x88
    da5a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    da5e:	4a23      	ldr	r2, [pc, #140]	; (daec <_oscctrl_init_referenced_generators+0xf4>)
    da60:	4613      	mov	r3, r2
    da62:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    da66:	0748      	lsls	r0, r1, #29
    da68:	d4fb      	bmi.n	da62 <_oscctrl_init_referenced_generators+0x6a>
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    da6a:	491f      	ldr	r1, [pc, #124]	; (dae8 <_oscctrl_init_referenced_generators+0xf0>)
    da6c:	2042      	movs	r0, #66	; 0x42
    da6e:	f8c1 0088 	str.w	r0, [r1, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    da72:	2127      	movs	r1, #39	; 0x27
    da74:	6491      	str	r1, [r2, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    da76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    da78:	f012 0f06 	tst.w	r2, #6
    da7c:	d1fb      	bne.n	da76 <_oscctrl_init_referenced_generators+0x7e>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    da7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    da82:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    da84:	2202      	movs	r2, #2
    da86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    da8a:	4b18      	ldr	r3, [pc, #96]	; (daec <_oscctrl_init_referenced_generators+0xf4>)
    da8c:	461a      	mov	r2, r3
    da8e:	6d19      	ldr	r1, [r3, #80]	; 0x50
    da90:	0789      	lsls	r1, r1, #30
    da92:	d4fc      	bmi.n	da8e <_oscctrl_init_referenced_generators+0x96>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    da94:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    da98:	07db      	lsls	r3, r3, #31
    da9a:	d521      	bpl.n	dae0 <_oscctrl_init_referenced_generators+0xe8>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    da9c:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    da9e:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    daa2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    daa6:	d1f9      	bne.n	da9c <_oscctrl_init_referenced_generators+0xa4>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    daa8:	4b10      	ldr	r3, [pc, #64]	; (daec <_oscctrl_init_referenced_generators+0xf4>)
    daaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    daac:	07d1      	lsls	r1, r2, #31
    daae:	d402      	bmi.n	dab6 <_oscctrl_init_referenced_generators+0xbe>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    dab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    dab2:	0792      	lsls	r2, r2, #30
    dab4:	d5f9      	bpl.n	daaa <_oscctrl_init_referenced_generators+0xb2>
	return ((Gclk *)hw)->SYNCBUSY.reg;
    dab6:	4a0c      	ldr	r2, [pc, #48]	; (dae8 <_oscctrl_init_referenced_generators+0xf0>)
    dab8:	4611      	mov	r1, r2
    daba:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    dabc:	2b00      	cmp	r3, #0
    dabe:	d1fc      	bne.n	daba <_oscctrl_init_referenced_generators+0xc2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    dac0:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    dac2:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    dac6:	f043 0308 	orr.w	r3, r3, #8
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    daca:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    dacc:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    dad0:	684a      	ldr	r2, [r1, #4]
    dad2:	421a      	tst	r2, r3
    dad4:	d1fc      	bne.n	dad0 <_oscctrl_init_referenced_generators+0xd8>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
    dad6:	4a04      	ldr	r2, [pc, #16]	; (dae8 <_oscctrl_init_referenced_generators+0xf0>)
    dad8:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
    dada:	075b      	lsls	r3, r3, #29
    dadc:	d4fc      	bmi.n	dad8 <_oscctrl_init_referenced_generators+0xe0>
		;
#endif
	(void)hw;
}
    dade:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    dae0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    dae2:	05d8      	lsls	r0, r3, #23
    dae4:	d5fc      	bpl.n	dae0 <_oscctrl_init_referenced_generators+0xe8>
    dae6:	e7df      	b.n	daa8 <_oscctrl_init_referenced_generators+0xb0>
    dae8:	40001c00 	.word	0x40001c00
    daec:	40001000 	.word	0x40001000
    daf0:	04010000 	.word	0x04010000

0000daf4 <_rand_sync_read_data>:

/**
 * \brief Read data bits
 */
static uint32_t _rand_sync_read_data(const struct _rand_sync_dev *dev, const uint8_t n_bits)
{
    daf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t r_bits = (dev->n_bits < 1) ? 32 : dev->n_bits;
    daf8:	f890 8004 	ldrb.w	r8, [r0, #4]
    dafc:	f8df 9034 	ldr.w	r9, [pc, #52]	; db34 <_rand_sync_read_data+0x40>
{
    db00:	4605      	mov	r5, r0
    db02:	460f      	mov	r7, r1
	uint8_t r_bits = (dev->n_bits < 1) ? 32 : dev->n_bits;
    db04:	f1b8 0f00 	cmp.w	r8, #0
    db08:	d00f      	beq.n	db2a <_rand_sync_read_data+0x36>
	if (r_bits < n_bits) {
    db0a:	4588      	cmp	r8, r1
    db0c:	d20d      	bcs.n	db2a <_rand_sync_read_data+0x36>
		uint8_t  i;
		uint32_t d = 0;
    db0e:	2600      	movs	r6, #0
		/* Join read bits */
		for (i = 0; i < n_bits; i += r_bits) {
    db10:	4634      	mov	r4, r6
			d |= (uint32_t)(_rand_sync_read_one(dev) << i);
    db12:	4628      	mov	r0, r5
    db14:	47c8      	blx	r9
    db16:	40a0      	lsls	r0, r4
		for (i = 0; i < n_bits; i += r_bits) {
    db18:	4444      	add	r4, r8
    db1a:	b2e4      	uxtb	r4, r4
    db1c:	42a7      	cmp	r7, r4
			d |= (uint32_t)(_rand_sync_read_one(dev) << i);
    db1e:	ea46 0600 	orr.w	r6, r6, r0
		for (i = 0; i < n_bits; i += r_bits) {
    db22:	d8f6      	bhi.n	db12 <_rand_sync_read_data+0x1e>
		}
		return d;
	} else {
		return _rand_sync_read_one(dev);
	}
}
    db24:	4630      	mov	r0, r6
    db26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return _rand_sync_read_one(dev);
    db2a:	4628      	mov	r0, r5
    db2c:	464b      	mov	r3, r9
}
    db2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return _rand_sync_read_one(dev);
    db32:	4718      	bx	r3
    db34:	0000dc39 	.word	0x0000dc39

0000db38 <rand_sync_init>:
{
    db38:	b570      	push	{r4, r5, r6, lr}
	ASSERT(desc);
    db3a:	4604      	mov	r4, r0
    db3c:	3800      	subs	r0, #0
{
    db3e:	460d      	mov	r5, r1
	ASSERT(desc);
    db40:	4b05      	ldr	r3, [pc, #20]	; (db58 <rand_sync_init+0x20>)
    db42:	4906      	ldr	r1, [pc, #24]	; (db5c <rand_sync_init+0x24>)
    db44:	bf18      	it	ne
    db46:	2001      	movne	r0, #1
    db48:	2229      	movs	r2, #41	; 0x29
    db4a:	4798      	blx	r3
	return _rand_sync_init(&desc->dev, hw);
    db4c:	4629      	mov	r1, r5
    db4e:	4620      	mov	r0, r4
    db50:	4b03      	ldr	r3, [pc, #12]	; (db60 <rand_sync_init+0x28>)
}
    db52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _rand_sync_init(&desc->dev, hw);
    db56:	4718      	bx	r3
    db58:	0000d415 	.word	0x0000d415
    db5c:	00015e8f 	.word	0x00015e8f
    db60:	0000dbb9 	.word	0x0000dbb9

0000db64 <rand_sync_enable>:
{
    db64:	b510      	push	{r4, lr}
	ASSERT(desc);
    db66:	4604      	mov	r4, r0
    db68:	3800      	subs	r0, #0
    db6a:	4b05      	ldr	r3, [pc, #20]	; (db80 <rand_sync_enable+0x1c>)
    db6c:	4905      	ldr	r1, [pc, #20]	; (db84 <rand_sync_enable+0x20>)
    db6e:	bf18      	it	ne
    db70:	2001      	movne	r0, #1
    db72:	2236      	movs	r2, #54	; 0x36
    db74:	4798      	blx	r3
	return _rand_sync_enable(&desc->dev);
    db76:	4620      	mov	r0, r4
    db78:	4b03      	ldr	r3, [pc, #12]	; (db88 <rand_sync_enable+0x24>)
}
    db7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _rand_sync_enable(&desc->dev);
    db7e:	4718      	bx	r3
    db80:	0000d415 	.word	0x0000d415
    db84:	00015e8f 	.word	0x00015e8f
    db88:	0000dc01 	.word	0x0000dc01

0000db8c <rand_sync_read8>:

uint8_t rand_sync_read8(const struct rand_sync_desc *const desc)
{
    db8c:	b510      	push	{r4, lr}
	ASSERT(desc);
    db8e:	4604      	mov	r4, r0
    db90:	3800      	subs	r0, #0
    db92:	bf18      	it	ne
    db94:	2001      	movne	r0, #1
    db96:	225b      	movs	r2, #91	; 0x5b
    db98:	4904      	ldr	r1, [pc, #16]	; (dbac <rand_sync_read8+0x20>)
    db9a:	4b05      	ldr	r3, [pc, #20]	; (dbb0 <rand_sync_read8+0x24>)
    db9c:	4798      	blx	r3
	return (uint8_t)_rand_sync_read_data(&desc->dev, 8);
    db9e:	4b05      	ldr	r3, [pc, #20]	; (dbb4 <rand_sync_read8+0x28>)
    dba0:	2108      	movs	r1, #8
    dba2:	4620      	mov	r0, r4
    dba4:	4798      	blx	r3
}
    dba6:	b2c0      	uxtb	r0, r0
    dba8:	bd10      	pop	{r4, pc}
    dbaa:	bf00      	nop
    dbac:	00015e8f 	.word	0x00015e8f
    dbb0:	0000d415 	.word	0x0000d415
    dbb4:	0000daf5 	.word	0x0000daf5

0000dbb8 <_rand_sync_init>:
	}
	return ERR_NONE;
}

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
    dbb8:	b538      	push	{r3, r4, r5, lr}
    dbba:	460c      	mov	r4, r1
	int32_t rc;

	ASSERT(dev && hw);
    dbbc:	4605      	mov	r5, r0
    dbbe:	b110      	cbz	r0, dbc6 <_rand_sync_init+0xe>
    dbc0:	1e08      	subs	r0, r1, #0
    dbc2:	bf18      	it	ne
    dbc4:	2001      	movne	r0, #1
    dbc6:	4b0c      	ldr	r3, [pc, #48]	; (dbf8 <_rand_sync_init+0x40>)
    dbc8:	490c      	ldr	r1, [pc, #48]	; (dbfc <_rand_sync_init+0x44>)
    dbca:	223d      	movs	r2, #61	; 0x3d
    dbcc:	4798      	blx	r3
}

static inline hri_trng_ctrla_reg_t hri_trng_get_CTRLA_reg(const void *const hw, hri_trng_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Trng *)hw)->CTRLA.reg;
    dbce:	7823      	ldrb	r3, [r4, #0]
	if (hri_trng_get_CTRLA_reg(hw, TRNG_CTRLA_ENABLE)) {
    dbd0:	f013 0302 	ands.w	r3, r3, #2
    dbd4:	d10c      	bne.n	dbf0 <_rand_sync_init+0x38>
	((Trng *)hw)->CTRLA.reg &= ~TRNG_CTRLA_RUNSTDBY;
    dbd6:	7822      	ldrb	r2, [r4, #0]
    dbd8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    dbdc:	7022      	strb	r2, [r4, #0]
}

static inline void hri_trng_clear_EVCTRL_DATARDYEO_bit(const void *const hw)
{
	TRNG_CRITICAL_SECTION_ENTER();
	((Trng *)hw)->EVCTRL.reg &= ~TRNG_EVCTRL_DATARDYEO;
    dbde:	7922      	ldrb	r2, [r4, #4]
    dbe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    dbe4:	7122      	strb	r2, [r4, #4]

	rc = _trng_init(hw);
	if (rc == ERR_NONE) {
		dev->prvt   = hw;
		dev->n_bits = 32;
    dbe6:	2220      	movs	r2, #32
		dev->prvt   = hw;
    dbe8:	602c      	str	r4, [r5, #0]
		dev->n_bits = 32;
    dbea:	712a      	strb	r2, [r5, #4]
	return ERR_NONE;
    dbec:	4618      	mov	r0, r3
	}
	return rc;
}
    dbee:	bd38      	pop	{r3, r4, r5, pc}
		return ERR_DENIED;
    dbf0:	f06f 0010 	mvn.w	r0, #16
	return rc;
    dbf4:	e7fb      	b.n	dbee <_rand_sync_init+0x36>
    dbf6:	bf00      	nop
    dbf8:	0000d415 	.word	0x0000d415
    dbfc:	00015eaa 	.word	0x00015eaa

0000dc00 <_rand_sync_enable>:
{
	_rand_sync_disable(dev);
}

int32_t _rand_sync_enable(struct _rand_sync_dev *const dev)
{
    dc00:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev);
    dc02:	4604      	mov	r4, r0
    dc04:	3800      	subs	r0, #0
    dc06:	bf18      	it	ne
    dc08:	2001      	movne	r0, #1
    dc0a:	4d09      	ldr	r5, [pc, #36]	; (dc30 <_rand_sync_enable+0x30>)
    dc0c:	4909      	ldr	r1, [pc, #36]	; (dc34 <_rand_sync_enable+0x34>)
    dc0e:	224e      	movs	r2, #78	; 0x4e
    dc10:	47a8      	blx	r5
	ASSERT(dev->prvt);
    dc12:	6820      	ldr	r0, [r4, #0]
    dc14:	4907      	ldr	r1, [pc, #28]	; (dc34 <_rand_sync_enable+0x34>)
    dc16:	3800      	subs	r0, #0
    dc18:	bf18      	it	ne
    dc1a:	2001      	movne	r0, #1
    dc1c:	224f      	movs	r2, #79	; 0x4f
    dc1e:	47a8      	blx	r5

	hri_trng_set_CTRLA_ENABLE_bit(dev->prvt);
    dc20:	6822      	ldr	r2, [r4, #0]
	((Trng *)hw)->CTRLA.reg |= TRNG_CTRLA_ENABLE;
    dc22:	7813      	ldrb	r3, [r2, #0]
    dc24:	f043 0302 	orr.w	r3, r3, #2
    dc28:	7013      	strb	r3, [r2, #0]
	return ERR_NONE;
}
    dc2a:	2000      	movs	r0, #0
    dc2c:	bd38      	pop	{r3, r4, r5, pc}
    dc2e:	bf00      	nop
    dc30:	0000d415 	.word	0x0000d415
    dc34:	00015eaa 	.word	0x00015eaa

0000dc38 <_rand_sync_read_one>:
	(void)seed;
	return ERR_UNSUPPORTED_OP;
}

uint32_t _rand_sync_read_one(const struct _rand_sync_dev *const dev)
{
    dc38:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev);
    dc3a:	4604      	mov	r4, r0
    dc3c:	3800      	subs	r0, #0
    dc3e:	4d0d      	ldr	r5, [pc, #52]	; (dc74 <_rand_sync_read_one+0x3c>)
    dc40:	490d      	ldr	r1, [pc, #52]	; (dc78 <_rand_sync_read_one+0x40>)
    dc42:	bf18      	it	ne
    dc44:	2001      	movne	r0, #1
    dc46:	2266      	movs	r2, #102	; 0x66
    dc48:	47a8      	blx	r5
	ASSERT(dev->prvt);
    dc4a:	6820      	ldr	r0, [r4, #0]
    dc4c:	490a      	ldr	r1, [pc, #40]	; (dc78 <_rand_sync_read_one+0x40>)
    dc4e:	3800      	subs	r0, #0
    dc50:	bf18      	it	ne
    dc52:	2001      	movne	r0, #1
    dc54:	2267      	movs	r2, #103	; 0x67
    dc56:	47a8      	blx	r5
	ASSERT(hri_trng_get_CTRLA_reg(dev->prvt, TRNG_CTRLA_ENABLE));
    dc58:	6823      	ldr	r3, [r4, #0]
    dc5a:	4907      	ldr	r1, [pc, #28]	; (dc78 <_rand_sync_read_one+0x40>)
	tmp = ((Trng *)hw)->CTRLA.reg;
    dc5c:	7818      	ldrb	r0, [r3, #0]
    dc5e:	2268      	movs	r2, #104	; 0x68
    dc60:	f3c0 0040 	ubfx	r0, r0, #1, #1
    dc64:	47a8      	blx	r5

	while (!hri_trng_get_INTFLAG_reg(dev->prvt, TRNG_INTFLAG_DATARDY)) {
    dc66:	6823      	ldr	r3, [r4, #0]
	tmp = ((Trng *)hw)->INTFLAG.reg;
    dc68:	7a9a      	ldrb	r2, [r3, #10]
    dc6a:	07d2      	lsls	r2, r2, #31
    dc6c:	d5fc      	bpl.n	dc68 <_rand_sync_read_one+0x30>
	return ((Trng *)hw)->DATA.reg;
    dc6e:	6a18      	ldr	r0, [r3, #32]
		/* Wait until data ready. */
	}
	return hri_trng_read_DATA_reg(dev->prvt);
}
    dc70:	bd38      	pop	{r3, r4, r5, pc}
    dc72:	bf00      	nop
    dc74:	0000d415 	.word	0x0000d415
    dc78:	00015eaa 	.word	0x00015eaa

0000dc7c <hid_keyboard_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t hid_keyboard_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    dc7c:	b430      	push	{r4, r5}
	if ((0x81 == req->bmRequestType) && (0x06 == req->bRequest) && (req->wIndex == _hiddf_keyboard_funcd.func_iface)) {
    dc7e:	780a      	ldrb	r2, [r1, #0]
    dc80:	2a81      	cmp	r2, #129	; 0x81
    dc82:	d11c      	bne.n	dcbe <hid_keyboard_req+0x42>
    dc84:	784b      	ldrb	r3, [r1, #1]
    dc86:	2b06      	cmp	r3, #6
    dc88:	d131      	bne.n	dcee <hid_keyboard_req+0x72>
    dc8a:	4a1a      	ldr	r2, [pc, #104]	; (dcf4 <hid_keyboard_req+0x78>)
    dc8c:	888c      	ldrh	r4, [r1, #4]
    dc8e:	7b13      	ldrb	r3, [r2, #12]
    dc90:	429c      	cmp	r4, r3
    dc92:	d12c      	bne.n	dcee <hid_keyboard_req+0x72>
	switch (req->wValue >> 8) {
    dc94:	884b      	ldrh	r3, [r1, #2]
    dc96:	0a1b      	lsrs	r3, r3, #8
    dc98:	2b21      	cmp	r3, #33	; 0x21
    dc9a:	d005      	beq.n	dca8 <hid_keyboard_req+0x2c>
    dc9c:	2b22      	cmp	r3, #34	; 0x22
    dc9e:	d00a      	beq.n	dcb6 <hid_keyboard_req+0x3a>
	} else {
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
			return ERR_NOT_FOUND;
		}
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
			switch (req->bRequest) {
    dca0:	f06f 000c 	mvn.w	r0, #12
		} else {
			return ERR_NOT_FOUND;
		}
	}
	(void)stage;
}
    dca4:	bc30      	pop	{r4, r5}
    dca6:	4770      	bx	lr
		return usbdc_xfer(ep, _hiddf_keyboard_funcd.hid_desc, _hiddf_keyboard_funcd.hid_desc[0], false);
    dca8:	6811      	ldr	r1, [r2, #0]
    dcaa:	780a      	ldrb	r2, [r1, #0]
    dcac:	2300      	movs	r3, #0
				return usbdc_xfer(ep, NULL, 0, 0);
    dcae:	4c12      	ldr	r4, [pc, #72]	; (dcf8 <hid_keyboard_req+0x7c>)
    dcb0:	46a4      	mov	ip, r4
}
    dcb2:	bc30      	pop	{r4, r5}
				return usbdc_xfer(ep, NULL, 0, 0);
    dcb4:	4760      	bx	ip
		return usbdc_xfer(ep, (uint8_t *)keyboard_report_desc, KEYBOARD_REPORT_DESC_LEN, false);
    dcb6:	4911      	ldr	r1, [pc, #68]	; (dcfc <hid_keyboard_req+0x80>)
    dcb8:	2300      	movs	r3, #0
    dcba:	223b      	movs	r2, #59	; 0x3b
    dcbc:	e7f7      	b.n	dcae <hid_keyboard_req+0x32>
		if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    dcbe:	f3c2 1241 	ubfx	r2, r2, #5, #2
    dcc2:	2a01      	cmp	r2, #1
    dcc4:	d113      	bne.n	dcee <hid_keyboard_req+0x72>
		if (req->wIndex == _hiddf_keyboard_funcd.func_iface) {
    dcc6:	4c0b      	ldr	r4, [pc, #44]	; (dcf4 <hid_keyboard_req+0x78>)
    dcc8:	888d      	ldrh	r5, [r1, #4]
    dcca:	7b23      	ldrb	r3, [r4, #12]
    dccc:	429d      	cmp	r5, r3
    dcce:	d10e      	bne.n	dcee <hid_keyboard_req+0x72>
			switch (req->bRequest) {
    dcd0:	784b      	ldrb	r3, [r1, #1]
    dcd2:	2b03      	cmp	r3, #3
    dcd4:	d007      	beq.n	dce6 <hid_keyboard_req+0x6a>
    dcd6:	2b0b      	cmp	r3, #11
    dcd8:	d1e2      	bne.n	dca0 <hid_keyboard_req+0x24>
				_hiddf_keyboard_funcd.protocol = req->wValue;
    dcda:	884b      	ldrh	r3, [r1, #2]
    dcdc:	73e3      	strb	r3, [r4, #15]
				return usbdc_xfer(ep, NULL, 0, 0);
    dcde:	2300      	movs	r3, #0
    dce0:	461a      	mov	r2, r3
    dce2:	4619      	mov	r1, r3
    dce4:	e7e3      	b.n	dcae <hid_keyboard_req+0x32>
				return usbdc_xfer(ep, &_hiddf_keyboard_funcd.protocol, 1, 0);
    dce6:	2300      	movs	r3, #0
    dce8:	f104 010f 	add.w	r1, r4, #15
    dcec:	e7df      	b.n	dcae <hid_keyboard_req+0x32>
			return ERR_NOT_FOUND;
    dcee:	f06f 0009 	mvn.w	r0, #9
	(void)stage;
    dcf2:	e7d7      	b.n	dca4 <hid_keyboard_req+0x28>
    dcf4:	20000df4 	.word	0x20000df4
    dcf8:	00011c29 	.word	0x00011c29
    dcfc:	00015ec1 	.word	0x00015ec1

0000dd00 <hid_keyboard_ctrl>:
	switch (ctrl) {
    dd00:	2901      	cmp	r1, #1
{
    dd02:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd06:	4615      	mov	r5, r2
	switch (ctrl) {
    dd08:	d04b      	beq.n	dda2 <hid_keyboard_ctrl+0xa2>
    dd0a:	2902      	cmp	r1, #2
    dd0c:	d066      	beq.n	dddc <hid_keyboard_ctrl+0xdc>
    dd0e:	2900      	cmp	r1, #0
    dd10:	d167      	bne.n	dde2 <hid_keyboard_ctrl+0xe2>
	ifc = desc->sod;
    dd12:	6813      	ldr	r3, [r2, #0]
		return hid_keyboard_enable(drv, (struct usbd_descriptors *)param);
    dd14:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if (NULL == ifc) {
    dd18:	b923      	cbnz	r3, dd24 <hid_keyboard_ctrl+0x24>
		return ERR_NOT_FOUND;
    dd1a:	f06f 0409 	mvn.w	r4, #9
}
    dd1e:	4620      	mov	r0, r4
    dd20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    dd24:	7959      	ldrb	r1, [r3, #5]
	ifc_desc.bInterfaceNumber = ifc[2];
    dd26:	789a      	ldrb	r2, [r3, #2]
	if (HID_CLASS == ifc_desc.bInterfaceClass) {
    dd28:	2903      	cmp	r1, #3
    dd2a:	d1f6      	bne.n	dd1a <hid_keyboard_ctrl+0x1a>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { // Initialized
    dd2c:	f898 100c 	ldrb.w	r1, [r8, #12]
    dd30:	428a      	cmp	r2, r1
    dd32:	d059      	beq.n	dde8 <hid_keyboard_ctrl+0xe8>
		} else if (func_data->func_iface != 0xFF) { // Occupied
    dd34:	29ff      	cmp	r1, #255	; 0xff
    dd36:	d15a      	bne.n	ddee <hid_keyboard_ctrl+0xee>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    dd38:	f888 200c 	strb.w	r2, [r8, #12]
	return (desc + usb_desc_len(desc));
    dd3c:	7818      	ldrb	r0, [r3, #0]
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    dd3e:	6869      	ldr	r1, [r5, #4]
    dd40:	4e2e      	ldr	r6, [pc, #184]	; (ddfc <hid_keyboard_ctrl+0xfc>)
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    dd42:	f8df b0c8 	ldr.w	fp, [pc, #200]	; de0c <hid_keyboard_ctrl+0x10c>
    dd46:	f8df 90c8 	ldr.w	r9, [pc, #200]	; de10 <hid_keyboard_ctrl+0x110>
	_hiddf_keyboard_funcd.hid_desc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_HID);
    dd4a:	4418      	add	r0, r3
    dd4c:	2221      	movs	r2, #33	; 0x21
    dd4e:	4b2c      	ldr	r3, [pc, #176]	; (de00 <hid_keyboard_ctrl+0x100>)
    dd50:	4798      	blx	r3
    dd52:	2702      	movs	r7, #2
    dd54:	6030      	str	r0, [r6, #0]
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    dd56:	682b      	ldr	r3, [r5, #0]
    dd58:	6869      	ldr	r1, [r5, #4]
    dd5a:	7818      	ldrb	r0, [r3, #0]
    dd5c:	4418      	add	r0, r3
    dd5e:	4b29      	ldr	r3, [pc, #164]	; (de04 <hid_keyboard_ctrl+0x104>)
    dd60:	4798      	blx	r3
		desc->sod = ep;
    dd62:	6028      	str	r0, [r5, #0]
		if (NULL != ep) {
    dd64:	2800      	cmp	r0, #0
    dd66:	d0d8      	beq.n	dd1a <hid_keyboard_ctrl+0x1a>
	return (ptr[0] + (ptr[1] << 8));
    dd68:	7941      	ldrb	r1, [r0, #5]
    dd6a:	7902      	ldrb	r2, [r0, #4]
			ep_desc.bEndpointAddress = ep[2];
    dd6c:	f890 a002 	ldrb.w	sl, [r0, #2]
    dd70:	eb02 2201 	add.w	r2, r2, r1, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    dd74:	b292      	uxth	r2, r2
    dd76:	78c1      	ldrb	r1, [r0, #3]
    dd78:	4650      	mov	r0, sl
    dd7a:	47d8      	blx	fp
    dd7c:	4604      	mov	r4, r0
    dd7e:	2800      	cmp	r0, #0
    dd80:	d138      	bne.n	ddf4 <hid_keyboard_ctrl+0xf4>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    dd82:	f01a 0f80 	tst.w	sl, #128	; 0x80
				func_data->func_ep_in = ep_desc.bEndpointAddress;
    dd86:	bf14      	ite	ne
    dd88:	f888 a00d 	strbne.w	sl, [r8, #13]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    dd8c:	f888 a00e 	strbeq.w	sl, [r8, #14]
				usb_d_ep_enable(func_data->func_ep_out);
    dd90:	4650      	mov	r0, sl
    dd92:	47c8      	blx	r9
	for (i = 0; i < 2; i++) {
    dd94:	2f01      	cmp	r7, #1
    dd96:	d102      	bne.n	dd9e <hid_keyboard_ctrl+0x9e>
	_hiddf_keyboard_funcd.protocol = 1;
    dd98:	73f7      	strb	r7, [r6, #15]
	_hiddf_keyboard_funcd.enabled  = true;
    dd9a:	7437      	strb	r7, [r6, #16]
	return ERR_NONE;
    dd9c:	e7bf      	b.n	dd1e <hid_keyboard_ctrl+0x1e>
    dd9e:	2701      	movs	r7, #1
    dda0:	e7d9      	b.n	dd56 <hid_keyboard_ctrl+0x56>
		return hid_keyboard_disable(drv, (struct usbd_descriptors *)param);
    dda2:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    dda4:	b11a      	cbz	r2, ddae <hid_keyboard_ctrl+0xae>
		ifc_desc.bInterfaceClass = desc->sod[5];
    dda6:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != HID_CLASS) {
    dda8:	795b      	ldrb	r3, [r3, #5]
    ddaa:	2b03      	cmp	r3, #3
    ddac:	d1b5      	bne.n	dd1a <hid_keyboard_ctrl+0x1a>
	if (func_data->func_iface != 0xFF) {
    ddae:	7b23      	ldrb	r3, [r4, #12]
	if (func_data->func_ep_in != 0xFF) {
    ddb0:	7b60      	ldrb	r0, [r4, #13]
	if (func_data->func_iface != 0xFF) {
    ddb2:	2bff      	cmp	r3, #255	; 0xff
		func_data->func_iface = 0xFF;
    ddb4:	bf1c      	itt	ne
    ddb6:	23ff      	movne	r3, #255	; 0xff
    ddb8:	7323      	strbne	r3, [r4, #12]
	if (func_data->func_ep_in != 0xFF) {
    ddba:	28ff      	cmp	r0, #255	; 0xff
    ddbc:	d003      	beq.n	ddc6 <hid_keyboard_ctrl+0xc6>
		usb_d_ep_deinit(func_data->func_ep_in);
    ddbe:	4b12      	ldr	r3, [pc, #72]	; (de08 <hid_keyboard_ctrl+0x108>)
    ddc0:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    ddc2:	23ff      	movs	r3, #255	; 0xff
    ddc4:	7363      	strb	r3, [r4, #13]
	if (func_data->func_ep_out != 0xFF) {
    ddc6:	7ba0      	ldrb	r0, [r4, #14]
    ddc8:	28ff      	cmp	r0, #255	; 0xff
    ddca:	d003      	beq.n	ddd4 <hid_keyboard_ctrl+0xd4>
		usb_d_ep_deinit(func_data->func_ep_out);
    ddcc:	4b0e      	ldr	r3, [pc, #56]	; (de08 <hid_keyboard_ctrl+0x108>)
    ddce:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    ddd0:	23ff      	movs	r3, #255	; 0xff
    ddd2:	73a3      	strb	r3, [r4, #14]
	_hiddf_keyboard_funcd.enabled = false;
    ddd4:	4b09      	ldr	r3, [pc, #36]	; (ddfc <hid_keyboard_ctrl+0xfc>)
    ddd6:	2400      	movs	r4, #0
    ddd8:	741c      	strb	r4, [r3, #16]
	return ERR_NONE;
    ddda:	e7a0      	b.n	dd1e <hid_keyboard_ctrl+0x1e>
		return ERR_UNSUPPORTED_OP;
    dddc:	f06f 041a 	mvn.w	r4, #26
    dde0:	e79d      	b.n	dd1e <hid_keyboard_ctrl+0x1e>
	switch (ctrl) {
    dde2:	f06f 040c 	mvn.w	r4, #12
    dde6:	e79a      	b.n	dd1e <hid_keyboard_ctrl+0x1e>
			return ERR_ALREADY_INITIALIZED;
    dde8:	f06f 0411 	mvn.w	r4, #17
    ddec:	e797      	b.n	dd1e <hid_keyboard_ctrl+0x1e>
			return ERR_NO_RESOURCE;
    ddee:	f06f 041b 	mvn.w	r4, #27
    ddf2:	e794      	b.n	dd1e <hid_keyboard_ctrl+0x1e>
				return ERR_NOT_INITIALIZED;
    ddf4:	f06f 0413 	mvn.w	r4, #19
    ddf8:	e791      	b.n	dd1e <hid_keyboard_ctrl+0x1e>
    ddfa:	bf00      	nop
    ddfc:	20000df4 	.word	0x20000df4
    de00:	0000b695 	.word	0x0000b695
    de04:	0000b6af 	.word	0x0000b6af
    de08:	0000e95d 	.word	0x0000e95d
    de0c:	0000e8f9 	.word	0x0000e8f9
    de10:	0000e989 	.word	0x0000e989

0000de14 <hiddf_keyboard_init>:

/**
 * \brief Initialize the USB HID Keyboard Function Driver
 */
int32_t hiddf_keyboard_init(void)
{
    de14:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    de16:	4b0a      	ldr	r3, [pc, #40]	; (de40 <hiddf_keyboard_init+0x2c>)
    de18:	4798      	blx	r3
    de1a:	2801      	cmp	r0, #1
    de1c:	d80c      	bhi.n	de38 <hiddf_keyboard_init+0x24>
		return ERR_DENIED;
	}

	_hiddf_keyboard.ctrl      = hid_keyboard_ctrl;
    de1e:	4809      	ldr	r0, [pc, #36]	; (de44 <hiddf_keyboard_init+0x30>)
    de20:	4b09      	ldr	r3, [pc, #36]	; (de48 <hiddf_keyboard_init+0x34>)
	_hiddf_keyboard.func_data = &_hiddf_keyboard_funcd;
    de22:	e9c0 3006 	strd	r3, r0, [r0, #24]

	usbdc_register_function(&_hiddf_keyboard);
    de26:	4b09      	ldr	r3, [pc, #36]	; (de4c <hiddf_keyboard_init+0x38>)
    de28:	3014      	adds	r0, #20
    de2a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &hid_keyboard_req_h);
    de2c:	2001      	movs	r0, #1
    de2e:	4908      	ldr	r1, [pc, #32]	; (de50 <hiddf_keyboard_init+0x3c>)
    de30:	4b08      	ldr	r3, [pc, #32]	; (de54 <hiddf_keyboard_init+0x40>)
    de32:	4798      	blx	r3
	return ERR_NONE;
    de34:	2000      	movs	r0, #0
}
    de36:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    de38:	f06f 0010 	mvn.w	r0, #16
    de3c:	e7fb      	b.n	de36 <hiddf_keyboard_init+0x22>
    de3e:	bf00      	nop
    de40:	00012061 	.word	0x00012061
    de44:	20000df4 	.word	0x20000df4
    de48:	0000dd01 	.word	0x0000dd01
    de4c:	00012009 	.word	0x00012009
    de50:	20000500 	.word	0x20000500
    de54:	00011f81 	.word	0x00011f81

0000de58 <hiddf_keyboard_keys_state_change>:
 * \param keys_desc[]  keys_descriptor array for state changing
 * \param keys_count   total keys amount for state changing
 * \return Operation status.
 */
int32_t hiddf_keyboard_keys_state_change(struct hiddf_kb_key_descriptors keys_desc[], uint8_t keys_count)
{
    de58:	b470      	push	{r4, r5, r6}
	return _hiddf_keyboard_funcd.enabled;
    de5a:	4c20      	ldr	r4, [pc, #128]	; (dedc <hiddf_keyboard_keys_state_change+0x84>)
	uint8_t i, j;
	uint8_t modifier_keys, regular_keys;

	if (!hiddf_keyboard_is_enabled()) {
    de5c:	7c23      	ldrb	r3, [r4, #16]
    de5e:	2b00      	cmp	r3, #0
    de60:	d037      	beq.n	ded2 <hiddf_keyboard_keys_state_change+0x7a>
		return ERR_DENIED;
	}

	memset(_hiddf_keyboard_funcd.kb_report, 0x00, 8);
    de62:	2300      	movs	r3, #0
    de64:	e9c4 3301 	strd	r3, r3, [r4, #4]
	modifier_keys = 0;
    de68:	461a      	mov	r2, r3

	for (i = 0; i < keys_count; i++) {
		if (true == keys_desc[i].b_modifier) {
    de6a:	1c46      	adds	r6, r0, #1
	for (i = 0; i < keys_count; i++) {
    de6c:	b2dd      	uxtb	r5, r3
    de6e:	42a9      	cmp	r1, r5
    de70:	d814      	bhi.n	de9c <hiddf_keyboard_keys_state_change+0x44>
			modifier_keys++;
		}
	}

	regular_keys = keys_count - modifier_keys;
    de72:	1a8a      	subs	r2, r1, r2

	if (regular_keys > 6) {
    de74:	b2d2      	uxtb	r2, r2
    de76:	2a06      	cmp	r2, #6
    de78:	d818      	bhi.n	deac <hiddf_keyboard_keys_state_change+0x54>
    de7a:	2500      	movs	r5, #0
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
	} else {
		i = 2;
    de7c:	2302      	movs	r3, #2
		for (j = 0; j < keys_count; j++) {
    de7e:	b2ea      	uxtb	r2, r5
    de80:	4291      	cmp	r1, r2
    de82:	d919      	bls.n	deb8 <hiddf_keyboard_keys_state_change+0x60>
			if (HID_KB_KEY_DOWN == keys_desc[j].state) {
    de84:	7882      	ldrb	r2, [r0, #2]
    de86:	2a01      	cmp	r2, #1
    de88:	d105      	bne.n	de96 <hiddf_keyboard_keys_state_change+0x3e>
				if (true == keys_desc[j].b_modifier) {
    de8a:	7846      	ldrb	r6, [r0, #1]
    de8c:	7802      	ldrb	r2, [r0, #0]
    de8e:	b1de      	cbz	r6, dec8 <hiddf_keyboard_keys_state_change+0x70>
					_hiddf_keyboard_funcd.kb_report[0] |= keys_desc[j].key_id;
    de90:	7926      	ldrb	r6, [r4, #4]
    de92:	4332      	orrs	r2, r6
    de94:	7122      	strb	r2, [r4, #4]
		for (j = 0; j < keys_count; j++) {
    de96:	3501      	adds	r5, #1
    de98:	3003      	adds	r0, #3
    de9a:	e7f0      	b.n	de7e <hiddf_keyboard_keys_state_change+0x26>
		if (true == keys_desc[i].b_modifier) {
    de9c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    dea0:	5d75      	ldrb	r5, [r6, r5]
    dea2:	b10d      	cbz	r5, dea8 <hiddf_keyboard_keys_state_change+0x50>
			modifier_keys++;
    dea4:	3201      	adds	r2, #1
    dea6:	b2d2      	uxtb	r2, r2
	for (i = 0; i < keys_count; i++) {
    dea8:	3301      	adds	r3, #1
    deaa:	e7df      	b.n	de6c <hiddf_keyboard_keys_state_change+0x14>
		memset(&_hiddf_keyboard_funcd.kb_report[2], 0xFF, 6);
    deac:	4a0c      	ldr	r2, [pc, #48]	; (dee0 <hiddf_keyboard_keys_state_change+0x88>)
    deae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    deb2:	f8c4 3006 	str.w	r3, [r4, #6]
    deb6:	8093      	strh	r3, [r2, #4]
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
				}
			}
		}
	}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    deb8:	7b60      	ldrb	r0, [r4, #13]
    deba:	4c0a      	ldr	r4, [pc, #40]	; (dee4 <hiddf_keyboard_keys_state_change+0x8c>)
    debc:	490a      	ldr	r1, [pc, #40]	; (dee8 <hiddf_keyboard_keys_state_change+0x90>)
    debe:	46a4      	mov	ip, r4
    dec0:	2300      	movs	r3, #0
}
    dec2:	bc70      	pop	{r4, r5, r6}
	return usbdc_xfer(_hiddf_keyboard_funcd.func_ep_in, &_hiddf_keyboard_funcd.kb_report[0], 8, false);
    dec4:	2208      	movs	r2, #8
    dec6:	4760      	bx	ip
					_hiddf_keyboard_funcd.kb_report[i++] = keys_desc[j].key_id;
    dec8:	1c5e      	adds	r6, r3, #1
    deca:	4423      	add	r3, r4
    decc:	711a      	strb	r2, [r3, #4]
    dece:	b2f3      	uxtb	r3, r6
    ded0:	e7e1      	b.n	de96 <hiddf_keyboard_keys_state_change+0x3e>
}
    ded2:	f06f 0010 	mvn.w	r0, #16
    ded6:	bc70      	pop	{r4, r5, r6}
    ded8:	4770      	bx	lr
    deda:	bf00      	nop
    dedc:	20000df4 	.word	0x20000df4
    dee0:	20000dfa 	.word	0x20000dfa
    dee4:	00011c29 	.word	0x00011c29
    dee8:	20000df8 	.word	0x20000df8

0000deec <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    deec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    def0:	460e      	mov	r6, r1
    def2:	4615      	mov	r5, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    def4:	4604      	mov	r4, r0
    def6:	b118      	cbz	r0, df00 <usart_sync_write+0x14>
    def8:	b329      	cbz	r1, df46 <usart_sync_write+0x5a>
    defa:	1e10      	subs	r0, r2, #0
    defc:	bf18      	it	ne
    defe:	2001      	movne	r0, #1
    df00:	4912      	ldr	r1, [pc, #72]	; (df4c <usart_sync_write+0x60>)
    df02:	4b13      	ldr	r3, [pc, #76]	; (df50 <usart_sync_write+0x64>)
	while (!_usart_sync_is_ready_to_send(&descr->device))
    df04:	4f13      	ldr	r7, [pc, #76]	; (df54 <usart_sync_write+0x68>)
	ASSERT(io_descr && buf && length);
    df06:	22f1      	movs	r2, #241	; 0xf1
    df08:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    df0a:	3408      	adds	r4, #8
    df0c:	46b9      	mov	r9, r7
    df0e:	4620      	mov	r0, r4
    df10:	47b8      	blx	r7
    df12:	2800      	cmp	r0, #0
    df14:	d0fb      	beq.n	df0e <usart_sync_write+0x22>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    df16:	f8df 8044 	ldr.w	r8, [pc, #68]	; df5c <usart_sync_write+0x70>
	uint32_t                      offset = 0;
    df1a:	2700      	movs	r7, #0
		_usart_sync_write_byte(&descr->device, buf[offset]);
    df1c:	5df1      	ldrb	r1, [r6, r7]
    df1e:	4620      	mov	r0, r4
    df20:	47c0      	blx	r8
		while (!_usart_sync_is_ready_to_send(&descr->device))
    df22:	4620      	mov	r0, r4
    df24:	47c8      	blx	r9
    df26:	2800      	cmp	r0, #0
    df28:	d0fb      	beq.n	df22 <usart_sync_write+0x36>
			;
	} while (++offset < length);
    df2a:	3701      	adds	r7, #1
    df2c:	42bd      	cmp	r5, r7
    df2e:	d8f5      	bhi.n	df1c <usart_sync_write+0x30>
    df30:	2d00      	cmp	r5, #0
	while (!_usart_sync_is_transmit_done(&descr->device))
    df32:	4e09      	ldr	r6, [pc, #36]	; (df58 <usart_sync_write+0x6c>)
    df34:	bf08      	it	eq
    df36:	2501      	moveq	r5, #1
    df38:	4620      	mov	r0, r4
    df3a:	47b0      	blx	r6
    df3c:	2800      	cmp	r0, #0
    df3e:	d0fb      	beq.n	df38 <usart_sync_write+0x4c>
		;
	return (int32_t)offset;
}
    df40:	4628      	mov	r0, r5
    df42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    df46:	4608      	mov	r0, r1
    df48:	e7da      	b.n	df00 <usart_sync_write+0x14>
    df4a:	bf00      	nop
    df4c:	00015efc 	.word	0x00015efc
    df50:	0000d415 	.word	0x0000d415
    df54:	00010bd9 	.word	0x00010bd9
    df58:	00010be3 	.word	0x00010be3
    df5c:	00010bc5 	.word	0x00010bc5

0000df60 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    df60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df64:	460e      	mov	r6, r1
    df66:	4615      	mov	r5, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
    df68:	4604      	mov	r4, r0
    df6a:	b118      	cbz	r0, df74 <usart_sync_read+0x14>
    df6c:	b1e9      	cbz	r1, dfaa <usart_sync_read+0x4a>
    df6e:	1e10      	subs	r0, r2, #0
    df70:	bf18      	it	ne
    df72:	2001      	movne	r0, #1
    df74:	490e      	ldr	r1, [pc, #56]	; (dfb0 <usart_sync_read+0x50>)
    df76:	4b0f      	ldr	r3, [pc, #60]	; (dfb4 <usart_sync_read+0x54>)
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    df78:	f8df 903c 	ldr.w	r9, [pc, #60]	; dfb8 <usart_sync_read+0x58>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    df7c:	f8df 803c 	ldr.w	r8, [pc, #60]	; dfbc <usart_sync_read+0x5c>
	ASSERT(io_descr && buf && length);
    df80:	f44f 7286 	mov.w	r2, #268	; 0x10c
    df84:	4798      	blx	r3
	uint32_t                      offset = 0;
    df86:	2700      	movs	r7, #0
		while (!_usart_sync_is_byte_received(&descr->device))
    df88:	3408      	adds	r4, #8
    df8a:	4620      	mov	r0, r4
    df8c:	47c8      	blx	r9
    df8e:	2800      	cmp	r0, #0
    df90:	d0fb      	beq.n	df8a <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
    df92:	4620      	mov	r0, r4
    df94:	47c0      	blx	r8
    df96:	55f0      	strb	r0, [r6, r7]
	} while (++offset < length);
    df98:	3701      	adds	r7, #1
    df9a:	42bd      	cmp	r5, r7
    df9c:	d8f5      	bhi.n	df8a <usart_sync_read+0x2a>

	return (int32_t)offset;
    df9e:	2d00      	cmp	r5, #0
}
    dfa0:	bf14      	ite	ne
    dfa2:	4628      	movne	r0, r5
    dfa4:	2001      	moveq	r0, #1
    dfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
    dfaa:	4608      	mov	r0, r1
    dfac:	e7e2      	b.n	df74 <usart_sync_read+0x14>
    dfae:	bf00      	nop
    dfb0:	00015efc 	.word	0x00015efc
    dfb4:	0000d415 	.word	0x0000d415
    dfb8:	00010bed 	.word	0x00010bed
    dfbc:	00010bd1 	.word	0x00010bd1

0000dfc0 <usart_sync_init>:
{
    dfc0:	b538      	push	{r3, r4, r5, lr}
    dfc2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    dfc4:	4604      	mov	r4, r0
    dfc6:	b110      	cbz	r0, dfce <usart_sync_init+0xe>
    dfc8:	1e08      	subs	r0, r1, #0
    dfca:	bf18      	it	ne
    dfcc:	2001      	movne	r0, #1
    dfce:	4907      	ldr	r1, [pc, #28]	; (dfec <usart_sync_init+0x2c>)
    dfd0:	4b07      	ldr	r3, [pc, #28]	; (dff0 <usart_sync_init+0x30>)
    dfd2:	2234      	movs	r2, #52	; 0x34
    dfd4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    dfd6:	4b07      	ldr	r3, [pc, #28]	; (dff4 <usart_sync_init+0x34>)
    dfd8:	4629      	mov	r1, r5
    dfda:	f104 0008 	add.w	r0, r4, #8
    dfde:	4798      	blx	r3
	if (init_status) {
    dfe0:	b918      	cbnz	r0, dfea <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
    dfe2:	4b05      	ldr	r3, [pc, #20]	; (dff8 <usart_sync_init+0x38>)
    dfe4:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
    dfe6:	4b05      	ldr	r3, [pc, #20]	; (dffc <usart_sync_init+0x3c>)
    dfe8:	6023      	str	r3, [r4, #0]
}
    dfea:	bd38      	pop	{r3, r4, r5, pc}
    dfec:	00015efc 	.word	0x00015efc
    dff0:	0000d415 	.word	0x0000d415
    dff4:	00010ae1 	.word	0x00010ae1
    dff8:	0000df61 	.word	0x0000df61
    dffc:	0000deed 	.word	0x0000deed

0000e000 <usart_sync_enable>:
{
    e000:	b510      	push	{r4, lr}
	ASSERT(descr);
    e002:	4604      	mov	r4, r0
    e004:	3800      	subs	r0, #0
    e006:	bf18      	it	ne
    e008:	2001      	movne	r0, #1
    e00a:	4905      	ldr	r1, [pc, #20]	; (e020 <usart_sync_enable+0x20>)
    e00c:	4b05      	ldr	r3, [pc, #20]	; (e024 <usart_sync_enable+0x24>)
    e00e:	2253      	movs	r2, #83	; 0x53
    e010:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    e012:	f104 0008 	add.w	r0, r4, #8
    e016:	4b04      	ldr	r3, [pc, #16]	; (e028 <usart_sync_enable+0x28>)
    e018:	4798      	blx	r3
}
    e01a:	2000      	movs	r0, #0
    e01c:	bd10      	pop	{r4, pc}
    e01e:	bf00      	nop
    e020:	00015efc 	.word	0x00015efc
    e024:	0000d415 	.word	0x0000d415
    e028:	00010b85 	.word	0x00010b85

0000e02c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    e02c:	4b01      	ldr	r3, [pc, #4]	; (e034 <_mclk_init+0x8>)
    e02e:	2201      	movs	r2, #1
    e030:	715a      	strb	r2, [r3, #5]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
}
    e032:	4770      	bx	lr
    e034:	40000800 	.word	0x40000800

0000e038 <hri_gclk_wait_for_sync.constprop.0>:
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    e038:	4903      	ldr	r1, [pc, #12]	; (e048 <hri_gclk_wait_for_sync.constprop.0+0x10>)
    e03a:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    e03e:	684a      	ldr	r2, [r1, #4]
    e040:	421a      	tst	r2, r3
    e042:	d1fc      	bne.n	e03e <hri_gclk_wait_for_sync.constprop.0+0x6>
}
    e044:	4770      	bx	lr
    e046:	bf00      	nop
    e048:	40001c00 	.word	0x40001c00

0000e04c <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    e04c:	b510      	push	{r4, lr}

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    e04e:	07c4      	lsls	r4, r0, #31
    e050:	d504      	bpl.n	e05c <_gclk_init_generators_by_fref+0x10>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    e052:	4b0e      	ldr	r3, [pc, #56]	; (e08c <_gclk_init_generators_by_fref+0x40>)
    e054:	4a0e      	ldr	r2, [pc, #56]	; (e090 <_gclk_init_generators_by_fref+0x44>)
    e056:	621a      	str	r2, [r3, #32]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    e058:	4b0e      	ldr	r3, [pc, #56]	; (e094 <_gclk_init_generators_by_fref+0x48>)
    e05a:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    e05c:	0781      	lsls	r1, r0, #30
    e05e:	d504      	bpl.n	e06a <_gclk_init_generators_by_fref+0x1e>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    e060:	4b0a      	ldr	r3, [pc, #40]	; (e08c <_gclk_init_generators_by_fref+0x40>)
    e062:	4a0d      	ldr	r2, [pc, #52]	; (e098 <_gclk_init_generators_by_fref+0x4c>)
    e064:	625a      	str	r2, [r3, #36]	; 0x24
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    e066:	4b0b      	ldr	r3, [pc, #44]	; (e094 <_gclk_init_generators_by_fref+0x48>)
    e068:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    e06a:	0742      	lsls	r2, r0, #29
    e06c:	d504      	bpl.n	e078 <_gclk_init_generators_by_fref+0x2c>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    e06e:	4b07      	ldr	r3, [pc, #28]	; (e08c <_gclk_init_generators_by_fref+0x40>)
    e070:	4a0a      	ldr	r2, [pc, #40]	; (e09c <_gclk_init_generators_by_fref+0x50>)
    e072:	629a      	str	r2, [r3, #40]	; 0x28
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    e074:	4b07      	ldr	r3, [pc, #28]	; (e094 <_gclk_init_generators_by_fref+0x48>)
    e076:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    e078:	0703      	lsls	r3, r0, #28
    e07a:	d506      	bpl.n	e08a <_gclk_init_generators_by_fref+0x3e>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    e07c:	4b03      	ldr	r3, [pc, #12]	; (e08c <_gclk_init_generators_by_fref+0x40>)
    e07e:	4a08      	ldr	r2, [pc, #32]	; (e0a0 <_gclk_init_generators_by_fref+0x54>)
    e080:	62da      	str	r2, [r3, #44]	; 0x2c
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    e082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    e086:	4b03      	ldr	r3, [pc, #12]	; (e094 <_gclk_init_generators_by_fref+0x48>)
    e088:	4718      	bx	r3
    e08a:	bd10      	pop	{r4, pc}
    e08c:	40001c00 	.word	0x40001c00
    e090:	00010108 	.word	0x00010108
    e094:	0000e039 	.word	0x0000e039
    e098:	00010106 	.word	0x00010106
    e09c:	00100106 	.word	0x00100106
    e0a0:	00010104 	.word	0x00010104

0000e0a4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    e0a4:	b510      	push	{r4, lr}

	usart_sync_enable(&GRID_AUX);
    e0a6:	4c04      	ldr	r4, [pc, #16]	; (e0b8 <stdio_redirect_init+0x14>)
    e0a8:	4b04      	ldr	r3, [pc, #16]	; (e0bc <stdio_redirect_init+0x18>)
    e0aa:	4620      	mov	r0, r4
    e0ac:	4798      	blx	r3
	stdio_io_init(&GRID_AUX.io);
    e0ae:	4620      	mov	r0, r4
    e0b0:	4b03      	ldr	r3, [pc, #12]	; (e0c0 <stdio_redirect_init+0x1c>)
}
    e0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stdio_io_init(&GRID_AUX.io);
    e0b6:	4718      	bx	r3
    e0b8:	20014bd0 	.word	0x20014bd0
    e0bc:	0000e001 	.word	0x0000e001
    e0c0:	0000b4e1 	.word	0x0000b4e1

0000e0c4 <flash_ready>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    e0c4:	6943      	ldr	r3, [r0, #20]
    e0c6:	b103      	cbz	r3, e0ca <flash_ready+0x6>
		descr->callbacks.cb_ready(descr);
    e0c8:	4718      	bx	r3
	}
}
    e0ca:	4770      	bx	lr

0000e0cc <flash_error>:
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    e0cc:	6983      	ldr	r3, [r0, #24]
    e0ce:	b103      	cbz	r3, e0d2 <flash_error+0x6>
		descr->callbacks.cb_error(descr);
    e0d0:	4718      	bx	r3
	}
}
    e0d2:	4770      	bx	lr

0000e0d4 <flash_is_address_aligned>:
{
    e0d4:	b538      	push	{r3, r4, r5, lr}
	ASSERT(flash);
    e0d6:	4604      	mov	r4, r0
    e0d8:	3800      	subs	r0, #0
    e0da:	bf18      	it	ne
    e0dc:	2001      	movne	r0, #1
{
    e0de:	460d      	mov	r5, r1
	ASSERT(flash);
    e0e0:	f240 1217 	movw	r2, #279	; 0x117
    e0e4:	4906      	ldr	r1, [pc, #24]	; (e100 <flash_is_address_aligned+0x2c>)
    e0e6:	4b07      	ldr	r3, [pc, #28]	; (e104 <flash_is_address_aligned+0x30>)
    e0e8:	4798      	blx	r3
	uint32_t page_size = _flash_get_page_size(&flash->dev);
    e0ea:	4b07      	ldr	r3, [pc, #28]	; (e108 <flash_is_address_aligned+0x34>)
    e0ec:	4620      	mov	r0, r4
    e0ee:	4798      	blx	r3
	if (flash_addr & (page_size - 1)) {
    e0f0:	3801      	subs	r0, #1
    e0f2:	4228      	tst	r0, r5
}
    e0f4:	bf14      	ite	ne
    e0f6:	f06f 000d 	mvnne.w	r0, #13
    e0fa:	2000      	moveq	r0, #0
    e0fc:	bd38      	pop	{r3, r4, r5, pc}
    e0fe:	bf00      	nop
    e100:	00015f18 	.word	0x00015f18
    e104:	0000d415 	.word	0x0000d415
    e108:	0000bd7d 	.word	0x0000bd7d

0000e10c <flash_init>:
{
    e10c:	b538      	push	{r3, r4, r5, lr}
    e10e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    e110:	4604      	mov	r4, r0
    e112:	b110      	cbz	r0, e11a <flash_init+0xe>
    e114:	1e08      	subs	r0, r1, #0
    e116:	bf18      	it	ne
    e118:	2001      	movne	r0, #1
    e11a:	4907      	ldr	r1, [pc, #28]	; (e138 <flash_init+0x2c>)
    e11c:	4b07      	ldr	r3, [pc, #28]	; (e13c <flash_init+0x30>)
    e11e:	2238      	movs	r2, #56	; 0x38
    e120:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    e122:	4b07      	ldr	r3, [pc, #28]	; (e140 <flash_init+0x34>)
    e124:	4629      	mov	r1, r5
    e126:	4620      	mov	r0, r4
    e128:	4798      	blx	r3
	if (rc) {
    e12a:	b918      	cbnz	r0, e134 <flash_init+0x28>
	flash->dev.flash_cb.ready_cb = flash_ready;
    e12c:	4b05      	ldr	r3, [pc, #20]	; (e144 <flash_init+0x38>)
    e12e:	6023      	str	r3, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    e130:	4b05      	ldr	r3, [pc, #20]	; (e148 <flash_init+0x3c>)
    e132:	6063      	str	r3, [r4, #4]
}
    e134:	bd38      	pop	{r3, r4, r5, pc}
    e136:	bf00      	nop
    e138:	00015f18 	.word	0x00015f18
    e13c:	0000d415 	.word	0x0000d415
    e140:	0000bd0d 	.word	0x0000bd0d
    e144:	0000e0c5 	.word	0x0000e0c5
    e148:	0000e0cd 	.word	0x0000e0cd

0000e14c <flash_read>:
{
    e14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e150:	460d      	mov	r5, r1
    e152:	4616      	mov	r6, r2
    e154:	461f      	mov	r7, r3
	ASSERT(flash && buffer && length);
    e156:	4604      	mov	r4, r0
    e158:	b118      	cbz	r0, e162 <flash_read+0x16>
    e15a:	b1ea      	cbz	r2, e198 <flash_read+0x4c>
    e15c:	1e18      	subs	r0, r3, #0
    e15e:	bf18      	it	ne
    e160:	2001      	movne	r0, #1
    e162:	4910      	ldr	r1, [pc, #64]	; (e1a4 <flash_read+0x58>)
    e164:	4b10      	ldr	r3, [pc, #64]	; (e1a8 <flash_read+0x5c>)
    e166:	2256      	movs	r2, #86	; 0x56
    e168:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e16a:	4b10      	ldr	r3, [pc, #64]	; (e1ac <flash_read+0x60>)
    e16c:	4620      	mov	r0, r4
    e16e:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e170:	4b0f      	ldr	r3, [pc, #60]	; (e1b0 <flash_read+0x64>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e172:	4680      	mov	r8, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e174:	4620      	mov	r0, r4
    e176:	4798      	blx	r3
	if ((src_addr > page_size * total_pages) || (src_addr + length > page_size * total_pages)) {
    e178:	fb00 f008 	mul.w	r0, r0, r8
    e17c:	42a8      	cmp	r0, r5
    e17e:	d30d      	bcc.n	e19c <flash_read+0x50>
    e180:	197b      	adds	r3, r7, r5
    e182:	4298      	cmp	r0, r3
    e184:	d30a      	bcc.n	e19c <flash_read+0x50>
	_flash_read(&flash->dev, src_addr, buffer, length);
    e186:	4620      	mov	r0, r4
    e188:	463b      	mov	r3, r7
    e18a:	4c0a      	ldr	r4, [pc, #40]	; (e1b4 <flash_read+0x68>)
    e18c:	4632      	mov	r2, r6
    e18e:	4629      	mov	r1, r5
    e190:	47a0      	blx	r4
	return ERR_NONE;
    e192:	2000      	movs	r0, #0
}
    e194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(flash && buffer && length);
    e198:	4610      	mov	r0, r2
    e19a:	e7e2      	b.n	e162 <flash_read+0x16>
		return ERR_BAD_ADDRESS;
    e19c:	f06f 000d 	mvn.w	r0, #13
    e1a0:	e7f8      	b.n	e194 <flash_read+0x48>
    e1a2:	bf00      	nop
    e1a4:	00015f18 	.word	0x00015f18
    e1a8:	0000d415 	.word	0x0000d415
    e1ac:	0000bd7d 	.word	0x0000bd7d
    e1b0:	0000bd83 	.word	0x0000bd83
    e1b4:	0000bd8b 	.word	0x0000bd8b

0000e1b8 <flash_write>:
{
    e1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1bc:	460e      	mov	r6, r1
    e1be:	4617      	mov	r7, r2
    e1c0:	4698      	mov	r8, r3
	ASSERT(flash && buffer && length);
    e1c2:	4605      	mov	r5, r0
    e1c4:	b118      	cbz	r0, e1ce <flash_write+0x16>
    e1c6:	b31a      	cbz	r2, e210 <flash_write+0x58>
    e1c8:	1e18      	subs	r0, r3, #0
    e1ca:	bf18      	it	ne
    e1cc:	2001      	movne	r0, #1
    e1ce:	4914      	ldr	r1, [pc, #80]	; (e220 <flash_write+0x68>)
    e1d0:	4b14      	ldr	r3, [pc, #80]	; (e224 <flash_write+0x6c>)
    e1d2:	226a      	movs	r2, #106	; 0x6a
    e1d4:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e1d6:	4b14      	ldr	r3, [pc, #80]	; (e228 <flash_write+0x70>)
    e1d8:	4628      	mov	r0, r5
    e1da:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e1dc:	4b13      	ldr	r3, [pc, #76]	; (e22c <flash_write+0x74>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e1de:	4604      	mov	r4, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e1e0:	4628      	mov	r0, r5
    e1e2:	4798      	blx	r3
	if ((dst_addr > page_size * total_pages) || (dst_addr + length > page_size * total_pages)) {
    e1e4:	4360      	muls	r0, r4
    e1e6:	42b0      	cmp	r0, r6
    e1e8:	d314      	bcc.n	e214 <flash_write+0x5c>
    e1ea:	eb08 0306 	add.w	r3, r8, r6
    e1ee:	4298      	cmp	r0, r3
    e1f0:	d310      	bcc.n	e214 <flash_write+0x5c>
	if (_flash_is_locked(&flash->dev, dst_addr)) {
    e1f2:	4b0f      	ldr	r3, [pc, #60]	; (e230 <flash_write+0x78>)
    e1f4:	4631      	mov	r1, r6
    e1f6:	4628      	mov	r0, r5
    e1f8:	4798      	blx	r3
    e1fa:	4604      	mov	r4, r0
    e1fc:	b968      	cbnz	r0, e21a <flash_write+0x62>
	_flash_write(&flash->dev, dst_addr, buffer, length);
    e1fe:	4628      	mov	r0, r5
    e200:	4643      	mov	r3, r8
    e202:	4d0c      	ldr	r5, [pc, #48]	; (e234 <flash_write+0x7c>)
    e204:	463a      	mov	r2, r7
    e206:	4631      	mov	r1, r6
    e208:	47a8      	blx	r5
	return ERR_NONE;
    e20a:	4620      	mov	r0, r4
}
    e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(flash && buffer && length);
    e210:	4610      	mov	r0, r2
    e212:	e7dc      	b.n	e1ce <flash_write+0x16>
		return ERR_BAD_ADDRESS;
    e214:	f06f 000d 	mvn.w	r0, #13
    e218:	e7f8      	b.n	e20c <flash_write+0x54>
		return ERR_DENIED;
    e21a:	f06f 0010 	mvn.w	r0, #16
    e21e:	e7f5      	b.n	e20c <flash_write+0x54>
    e220:	00015f18 	.word	0x00015f18
    e224:	0000d415 	.word	0x0000d415
    e228:	0000bd7d 	.word	0x0000bd7d
    e22c:	0000bd83 	.word	0x0000bd83
    e230:	0000bf19 	.word	0x0000bf19
    e234:	0000bda5 	.word	0x0000bda5

0000e238 <flash_erase>:
{
    e238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e23c:	4688      	mov	r8, r1
    e23e:	4617      	mov	r7, r2
	ASSERT(flash && page_nums);
    e240:	4604      	mov	r4, r0
    e242:	b110      	cbz	r0, e24a <flash_erase+0x12>
    e244:	1e10      	subs	r0, r2, #0
    e246:	bf18      	it	ne
    e248:	2001      	movne	r0, #1
    e24a:	4912      	ldr	r1, [pc, #72]	; (e294 <flash_erase+0x5c>)
    e24c:	4b12      	ldr	r3, [pc, #72]	; (e298 <flash_erase+0x60>)
    e24e:	229a      	movs	r2, #154	; 0x9a
    e250:	4798      	blx	r3
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e252:	4b12      	ldr	r3, [pc, #72]	; (e29c <flash_erase+0x64>)
    e254:	4620      	mov	r0, r4
    e256:	4798      	blx	r3
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e258:	4b11      	ldr	r3, [pc, #68]	; (e2a0 <flash_erase+0x68>)
	uint32_t page_size   = _flash_get_page_size(&flash->dev);
    e25a:	4605      	mov	r5, r0
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e25c:	4620      	mov	r0, r4
    e25e:	4798      	blx	r3
	rc = flash_is_address_aligned(flash, dst_addr);
    e260:	4b10      	ldr	r3, [pc, #64]	; (e2a4 <flash_erase+0x6c>)
	uint32_t total_pages = _flash_get_total_pages(&flash->dev);
    e262:	4681      	mov	r9, r0
	rc = flash_is_address_aligned(flash, dst_addr);
    e264:	4641      	mov	r1, r8
    e266:	4620      	mov	r0, r4
    e268:	4798      	blx	r3
	if (rc) {
    e26a:	4606      	mov	r6, r0
    e26c:	b958      	cbnz	r0, e286 <flash_erase+0x4e>
	if ((page_nums > total_pages) || (dst_addr / page_size + page_nums > total_pages)) {
    e26e:	454f      	cmp	r7, r9
    e270:	d80c      	bhi.n	e28c <flash_erase+0x54>
    e272:	fbb8 f5f5 	udiv	r5, r8, r5
    e276:	443d      	add	r5, r7
    e278:	454d      	cmp	r5, r9
    e27a:	d807      	bhi.n	e28c <flash_erase+0x54>
	_flash_erase(&flash->dev, dst_addr, page_nums);
    e27c:	4b0a      	ldr	r3, [pc, #40]	; (e2a8 <flash_erase+0x70>)
    e27e:	463a      	mov	r2, r7
    e280:	4641      	mov	r1, r8
    e282:	4620      	mov	r0, r4
    e284:	4798      	blx	r3
}
    e286:	4630      	mov	r0, r6
    e288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_INVALID_ARG;
    e28c:	f06f 060c 	mvn.w	r6, #12
    e290:	e7f9      	b.n	e286 <flash_erase+0x4e>
    e292:	bf00      	nop
    e294:	00015f18 	.word	0x00015f18
    e298:	0000d415 	.word	0x0000d415
    e29c:	0000bd7d 	.word	0x0000bd7d
    e2a0:	0000bd83 	.word	0x0000bd83
    e2a4:	0000e0d5 	.word	0x0000e0d5
    e2a8:	0000be6d 	.word	0x0000be6d

0000e2ac <_spi_m_async_io_write>:
 *  \return ERR_NONE on success, or an error code on failure.
 *  \retval ERR_NONE Success, transfer started.
 *  \retval ERR_BUSY Busy.
 */
static int32_t _spi_m_async_io_write(struct io_descriptor *io, const uint8_t *const buf, const uint16_t length)
{
    e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ASSERT(io);
    e2ae:	4604      	mov	r4, r0
    e2b0:	3800      	subs	r0, #0
    e2b2:	bf18      	it	ne
    e2b4:	2001      	movne	r0, #1
{
    e2b6:	460f      	mov	r7, r1
    e2b8:	4616      	mov	r6, r2
	ASSERT(io);
    e2ba:	4909      	ldr	r1, [pc, #36]	; (e2e0 <_spi_m_async_io_write+0x34>)
    e2bc:	4b09      	ldr	r3, [pc, #36]	; (e2e4 <_spi_m_async_io_write+0x38>)
    e2be:	f240 1227 	movw	r2, #295	; 0x127
    e2c2:	4798      	blx	r3
	struct spi_m_async_descriptor *spi = CONTAINER_OF(io, struct spi_m_async_descriptor, io);

	spi->xfer.rxbuf = NULL;
    e2c4:	2500      	movs	r5, #0
	spi->xfer.txbuf = (uint8_t *)buf;
	spi->xfer.size  = length;
	spi->xfercnt    = 0;

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    e2c6:	2310      	movs	r3, #16
    e2c8:	7223      	strb	r3, [r4, #8]
	spi->xfer.txbuf = (uint8_t *)buf;
    e2ca:	e9c4 7505 	strd	r7, r5, [r4, #20]
	spi->xfercnt    = 0;
    e2ce:	e9c4 6507 	strd	r6, r5, [r4, #28]
	_spi_m_async_enable_tx(&spi->dev, true);
    e2d2:	4b05      	ldr	r3, [pc, #20]	; (e2e8 <_spi_m_async_io_write+0x3c>)
    e2d4:	2101      	movs	r1, #1
    e2d6:	f1a4 0020 	sub.w	r0, r4, #32
    e2da:	4798      	blx	r3

	return ERR_NONE;
}
    e2dc:	4628      	mov	r0, r5
    e2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2e0:	00015f2f 	.word	0x00015f2f
    e2e4:	0000d415 	.word	0x0000d415
    e2e8:	0001118d 	.word	0x0001118d

0000e2ec <_spi_m_async_io_read>:
{
    e2ec:	b570      	push	{r4, r5, r6, lr}
	ASSERT(io);
    e2ee:	4604      	mov	r4, r0
    e2f0:	3800      	subs	r0, #0
    e2f2:	bf18      	it	ne
    e2f4:	2001      	movne	r0, #1
{
    e2f6:	460d      	mov	r5, r1
    e2f8:	4616      	mov	r6, r2
	ASSERT(io);
    e2fa:	490c      	ldr	r1, [pc, #48]	; (e32c <_spi_m_async_io_read+0x40>)
    e2fc:	4b0c      	ldr	r3, [pc, #48]	; (e330 <_spi_m_async_io_read+0x44>)
    e2fe:	f240 1205 	movw	r2, #261	; 0x105
    e302:	4798      	blx	r3
	spi->xfer.rxbuf = buf;
    e304:	61a5      	str	r5, [r4, #24]
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    e306:	2310      	movs	r3, #16
	spi->xfer.txbuf = NULL;
    e308:	2500      	movs	r5, #0
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    e30a:	7223      	strb	r3, [r4, #8]
	spi->xfer.txbuf = NULL;
    e30c:	6165      	str	r5, [r4, #20]
	spi->xfercnt    = 0;
    e30e:	e9c4 6507 	strd	r6, r5, [r4, #28]
	_spi_m_async_enable_rx(&spi->dev, true);
    e312:	3c20      	subs	r4, #32
    e314:	4b07      	ldr	r3, [pc, #28]	; (e334 <_spi_m_async_io_read+0x48>)
    e316:	2101      	movs	r1, #1
    e318:	4620      	mov	r0, r4
    e31a:	4798      	blx	r3
	_spi_m_async_write_one(&spi->dev, SPI_DUMMY_CHAR);
    e31c:	4b06      	ldr	r3, [pc, #24]	; (e338 <_spi_m_async_io_read+0x4c>)
    e31e:	f240 11ff 	movw	r1, #511	; 0x1ff
    e322:	4620      	mov	r0, r4
    e324:	4798      	blx	r3
}
    e326:	4628      	mov	r0, r5
    e328:	bd70      	pop	{r4, r5, r6, pc}
    e32a:	bf00      	nop
    e32c:	00015f2f 	.word	0x00015f2f
    e330:	0000d415 	.word	0x0000d415
    e334:	000111b9 	.word	0x000111b9
    e338:	00011225 	.word	0x00011225

0000e33c <_spi_dev_error>:
{
    e33c:	b570      	push	{r4, r5, r6, lr}
	_spi_m_async_enable_tx(dev, false);
    e33e:	4b0c      	ldr	r3, [pc, #48]	; (e370 <_spi_dev_error+0x34>)
{
    e340:	4604      	mov	r4, r0
    e342:	460d      	mov	r5, r1
	_spi_m_async_enable_tx(dev, false);
    e344:	2100      	movs	r1, #0
    e346:	4798      	blx	r3
	_spi_m_async_enable_rx(dev, false);
    e348:	4b0a      	ldr	r3, [pc, #40]	; (e374 <_spi_dev_error+0x38>)
    e34a:	2100      	movs	r1, #0
    e34c:	4620      	mov	r0, r4
    e34e:	4798      	blx	r3
	_spi_m_async_enable_tx_complete(dev, false);
    e350:	4b09      	ldr	r3, [pc, #36]	; (e378 <_spi_dev_error+0x3c>)
    e352:	2100      	movs	r1, #0
    e354:	4620      	mov	r0, r4
    e356:	4798      	blx	r3
	spi->stat = 0;
    e358:	2300      	movs	r3, #0
    e35a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (spi->callbacks.cb_error) {
    e35e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e360:	b123      	cbz	r3, e36c <_spi_dev_error+0x30>
		spi->callbacks.cb_error(spi, status);
    e362:	4629      	mov	r1, r5
    e364:	1f20      	subs	r0, r4, #4
}
    e366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		spi->callbacks.cb_error(spi, status);
    e36a:	4718      	bx	r3
}
    e36c:	bd70      	pop	{r4, r5, r6, pc}
    e36e:	bf00      	nop
    e370:	0001118d 	.word	0x0001118d
    e374:	000111b9 	.word	0x000111b9
    e378:	000111f1 	.word	0x000111f1

0000e37c <_spi_dev_complete>:
	if (spi->xfercnt >= spi->xfer.size) {
    e37c:	e9d0 320f 	ldrd	r3, r2, [r0, #60]	; 0x3c
    e380:	429a      	cmp	r2, r3
{
    e382:	b510      	push	{r4, lr}
    e384:	4604      	mov	r4, r0
	if (spi->xfercnt >= spi->xfer.size) {
    e386:	d30b      	bcc.n	e3a0 <_spi_dev_complete+0x24>
		_spi_m_async_enable_tx_complete(dev, false);
    e388:	4b06      	ldr	r3, [pc, #24]	; (e3a4 <_spi_dev_complete+0x28>)
    e38a:	2100      	movs	r1, #0
    e38c:	4798      	blx	r3
		spi->stat = 0;
    e38e:	2300      	movs	r3, #0
    e390:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    e394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e396:	b11b      	cbz	r3, e3a0 <_spi_dev_complete+0x24>
			spi->callbacks.cb_xfer(spi);
    e398:	1f20      	subs	r0, r4, #4
}
    e39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			spi->callbacks.cb_xfer(spi);
    e39e:	4718      	bx	r3
}
    e3a0:	bd10      	pop	{r4, pc}
    e3a2:	bf00      	nop
    e3a4:	000111f1 	.word	0x000111f1

0000e3a8 <_spi_dev_rx>:
{
    e3a8:	b570      	push	{r4, r5, r6, lr}
	if (spi->xfer.rxbuf) {
    e3aa:	6b85      	ldr	r5, [r0, #56]	; 0x38
    e3ac:	4b1c      	ldr	r3, [pc, #112]	; (e420 <_spi_dev_rx+0x78>)
{
    e3ae:	4604      	mov	r4, r0
	if (spi->xfer.rxbuf) {
    e3b0:	b305      	cbz	r5, e3f4 <_spi_dev_rx+0x4c>
		if (!(dev->char_size > 1)) {
    e3b2:	7902      	ldrb	r2, [r0, #4]
    e3b4:	2a01      	cmp	r2, #1
    e3b6:	d816      	bhi.n	e3e6 <_spi_dev_rx+0x3e>
			spi->xfer.rxbuf[spi->xfercnt++] = (uint8_t)_spi_m_async_read_one(dev);
    e3b8:	4798      	blx	r3
    e3ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e3bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e3be:	1c59      	adds	r1, r3, #1
    e3c0:	6421      	str	r1, [r4, #64]	; 0x40
    e3c2:	54d0      	strb	r0, [r2, r3]
	if (spi->xfercnt < spi->xfer.size) {
    e3c4:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
    e3c8:	4299      	cmp	r1, r3
    e3ca:	d21a      	bcs.n	e402 <_spi_dev_rx+0x5a>
		if (spi->xfer.txbuf) {
    e3cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e3ce:	4b15      	ldr	r3, [pc, #84]	; (e424 <_spi_dev_rx+0x7c>)
    e3d0:	b1aa      	cbz	r2, e3fe <_spi_dev_rx+0x56>
			if (!(dev->char_size > 1)) {
    e3d2:	7920      	ldrb	r0, [r4, #4]
    e3d4:	2801      	cmp	r0, #1
				_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt]);
    e3d6:	bf94      	ite	ls
    e3d8:	5c51      	ldrbls	r1, [r2, r1]
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    e3da:	f832 1011 	ldrhhi.w	r1, [r2, r1, lsl #1]
    e3de:	4620      	mov	r0, r4
}
    e3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt]);
    e3e4:	4718      	bx	r3
			((uint16_t *)spi->xfer.rxbuf)[spi->xfercnt++] = (uint16_t)_spi_m_async_read_one(dev);
    e3e6:	6c06      	ldr	r6, [r0, #64]	; 0x40
    e3e8:	1c72      	adds	r2, r6, #1
    e3ea:	6402      	str	r2, [r0, #64]	; 0x40
    e3ec:	4798      	blx	r3
    e3ee:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    e3f2:	e7e7      	b.n	e3c4 <_spi_dev_rx+0x1c>
		_spi_m_async_read_one(dev);
    e3f4:	4798      	blx	r3
		spi->xfercnt++;
    e3f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e3f8:	3301      	adds	r3, #1
    e3fa:	6423      	str	r3, [r4, #64]	; 0x40
    e3fc:	e7e2      	b.n	e3c4 <_spi_dev_rx+0x1c>
			_spi_m_async_write_one(dev, dev->dummy_byte);
    e3fe:	88e1      	ldrh	r1, [r4, #6]
    e400:	e7ed      	b.n	e3de <_spi_dev_rx+0x36>
		_spi_m_async_enable_rx(dev, false);
    e402:	4b09      	ldr	r3, [pc, #36]	; (e428 <_spi_dev_rx+0x80>)
    e404:	2100      	movs	r1, #0
    e406:	4620      	mov	r0, r4
    e408:	4798      	blx	r3
		spi->stat = 0;
    e40a:	2300      	movs	r3, #0
    e40c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		if (spi->callbacks.cb_xfer) {
    e410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e412:	b11b      	cbz	r3, e41c <_spi_dev_rx+0x74>
			spi->callbacks.cb_xfer(spi);
    e414:	1f20      	subs	r0, r4, #4
}
    e416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			spi->callbacks.cb_xfer(spi);
    e41a:	4718      	bx	r3
}
    e41c:	bd70      	pop	{r4, r5, r6, pc}
    e41e:	bf00      	nop
    e420:	00011251 	.word	0x00011251
    e424:	00011225 	.word	0x00011225
    e428:	000111b9 	.word	0x000111b9

0000e42c <_spi_dev_tx>:
{
    e42c:	b570      	push	{r4, r5, r6, lr}
    e42e:	6c03      	ldr	r3, [r0, #64]	; 0x40
	if (!(dev->char_size > 1)) {
    e430:	7902      	ldrb	r2, [r0, #4]
    e432:	6b41      	ldr	r1, [r0, #52]	; 0x34
    e434:	1c5d      	adds	r5, r3, #1
    e436:	2a01      	cmp	r2, #1
		_spi_m_async_write_one(dev, spi->xfer.txbuf[spi->xfercnt++]);
    e438:	6405      	str	r5, [r0, #64]	; 0x40
    e43a:	bf94      	ite	ls
    e43c:	5cc9      	ldrbls	r1, [r1, r3]
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    e43e:	f831 1013 	ldrhhi.w	r1, [r1, r3, lsl #1]
    e442:	4a09      	ldr	r2, [pc, #36]	; (e468 <_spi_dev_tx+0x3c>)
{
    e444:	4604      	mov	r4, r0
		_spi_m_async_write_one(dev, ((uint16_t *)spi->xfer.txbuf)[spi->xfercnt++]);
    e446:	4790      	blx	r2
	if (spi->xfercnt == spi->xfer.size) {
    e448:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
    e44c:	429a      	cmp	r2, r3
    e44e:	d109      	bne.n	e464 <_spi_dev_tx+0x38>
		_spi_m_async_enable_tx(dev, false);
    e450:	4b06      	ldr	r3, [pc, #24]	; (e46c <_spi_dev_tx+0x40>)
    e452:	2100      	movs	r1, #0
    e454:	4620      	mov	r0, r4
    e456:	4798      	blx	r3
		_spi_m_async_enable_tx_complete(dev, true);
    e458:	4620      	mov	r0, r4
    e45a:	4b05      	ldr	r3, [pc, #20]	; (e470 <_spi_dev_tx+0x44>)
}
    e45c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_spi_m_async_enable_tx_complete(dev, true);
    e460:	2101      	movs	r1, #1
    e462:	4718      	bx	r3
}
    e464:	bd70      	pop	{r4, r5, r6, pc}
    e466:	bf00      	nop
    e468:	00011225 	.word	0x00011225
    e46c:	0001118d 	.word	0x0001118d
    e470:	000111f1 	.word	0x000111f1

0000e474 <spi_m_async_init>:
{
    e474:	b570      	push	{r4, r5, r6, lr}
    e476:	460e      	mov	r6, r1
	ASSERT(spi && hw);
    e478:	4604      	mov	r4, r0
    e47a:	b110      	cbz	r0, e482 <spi_m_async_init+0xe>
    e47c:	1e08      	subs	r0, r1, #0
    e47e:	bf18      	it	ne
    e480:	2001      	movne	r0, #1
	spi->dev.prvt = (void *)hw;
    e482:	4625      	mov	r5, r4
	ASSERT(spi && hw);
    e484:	4911      	ldr	r1, [pc, #68]	; (e4cc <spi_m_async_init+0x58>)
    e486:	4b12      	ldr	r3, [pc, #72]	; (e4d0 <spi_m_async_init+0x5c>)
    e488:	22a5      	movs	r2, #165	; 0xa5
    e48a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    e48c:	f845 6f04 	str.w	r6, [r5, #4]!
	rc            = _spi_m_async_init(&spi->dev, hw);
    e490:	4b10      	ldr	r3, [pc, #64]	; (e4d4 <spi_m_async_init+0x60>)
    e492:	4631      	mov	r1, r6
    e494:	4628      	mov	r0, r5
    e496:	4798      	blx	r3
	if (rc >= 0) {
    e498:	2800      	cmp	r0, #0
    e49a:	db15      	blt.n	e4c8 <spi_m_async_init+0x54>
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_TX, (FUNC_PTR)_spi_dev_tx);
    e49c:	4e0e      	ldr	r6, [pc, #56]	; (e4d8 <spi_m_async_init+0x64>)
    e49e:	4a0f      	ldr	r2, [pc, #60]	; (e4dc <spi_m_async_init+0x68>)
    e4a0:	2100      	movs	r1, #0
    e4a2:	4628      	mov	r0, r5
    e4a4:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_RX, (FUNC_PTR)_spi_dev_rx);
    e4a6:	4a0e      	ldr	r2, [pc, #56]	; (e4e0 <spi_m_async_init+0x6c>)
    e4a8:	2101      	movs	r1, #1
    e4aa:	4628      	mov	r0, r5
    e4ac:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_COMPLETE, (FUNC_PTR)_spi_dev_complete);
    e4ae:	4a0d      	ldr	r2, [pc, #52]	; (e4e4 <spi_m_async_init+0x70>)
    e4b0:	2102      	movs	r1, #2
    e4b2:	4628      	mov	r0, r5
    e4b4:	47b0      	blx	r6
		_spi_m_async_register_callback(&spi->dev, SPI_DEV_CB_ERROR, (FUNC_PTR)_spi_dev_error);
    e4b6:	4a0c      	ldr	r2, [pc, #48]	; (e4e8 <spi_m_async_init+0x74>)
    e4b8:	2103      	movs	r1, #3
    e4ba:	4628      	mov	r0, r5
    e4bc:	47b0      	blx	r6
	spi->io.read  = _spi_m_async_io_read;
    e4be:	4b0b      	ldr	r3, [pc, #44]	; (e4ec <spi_m_async_init+0x78>)
    e4c0:	62a3      	str	r3, [r4, #40]	; 0x28
	spi->io.write = _spi_m_async_io_write;
    e4c2:	4b0b      	ldr	r3, [pc, #44]	; (e4f0 <spi_m_async_init+0x7c>)
    e4c4:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    e4c6:	2000      	movs	r0, #0
}
    e4c8:	bd70      	pop	{r4, r5, r6, pc}
    e4ca:	bf00      	nop
    e4cc:	00015f2f 	.word	0x00015f2f
    e4d0:	0000d415 	.word	0x0000d415
    e4d4:	00011099 	.word	0x00011099
    e4d8:	00011279 	.word	0x00011279
    e4dc:	0000e42d 	.word	0x0000e42d
    e4e0:	0000e3a9 	.word	0x0000e3a9
    e4e4:	0000e37d 	.word	0x0000e37d
    e4e8:	0000e33d 	.word	0x0000e33d
    e4ec:	0000e2ed 	.word	0x0000e2ed
    e4f0:	0000e2ad 	.word	0x0000e2ad

0000e4f4 <spi_m_async_enable>:
{
    e4f4:	b510      	push	{r4, lr}
	ASSERT(spi);
    e4f6:	4604      	mov	r4, r0
    e4f8:	3800      	subs	r0, #0
    e4fa:	4b05      	ldr	r3, [pc, #20]	; (e510 <spi_m_async_enable+0x1c>)
    e4fc:	4905      	ldr	r1, [pc, #20]	; (e514 <spi_m_async_enable+0x20>)
    e4fe:	bf18      	it	ne
    e500:	2001      	movne	r0, #1
    e502:	22c1      	movs	r2, #193	; 0xc1
    e504:	4798      	blx	r3
	_spi_m_async_enable(&spi->dev);
    e506:	1d20      	adds	r0, r4, #4
    e508:	4b03      	ldr	r3, [pc, #12]	; (e518 <spi_m_async_enable+0x24>)
}
    e50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_spi_m_async_enable(&spi->dev);
    e50e:	4718      	bx	r3
    e510:	0000d415 	.word	0x0000d415
    e514:	00015f2f 	.word	0x00015f2f
    e518:	000110f1 	.word	0x000110f1

0000e51c <spi_m_async_set_baudrate>:
{
    e51c:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    e51e:	4604      	mov	r4, r0
    e520:	3800      	subs	r0, #0
    e522:	4b0a      	ldr	r3, [pc, #40]	; (e54c <spi_m_async_set_baudrate+0x30>)
    e524:	bf18      	it	ne
    e526:	2001      	movne	r0, #1
{
    e528:	460d      	mov	r5, r1
	ASSERT(spi);
    e52a:	22cf      	movs	r2, #207	; 0xcf
    e52c:	4908      	ldr	r1, [pc, #32]	; (e550 <spi_m_async_set_baudrate+0x34>)
    e52e:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    e530:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e534:	06db      	lsls	r3, r3, #27
    e536:	d405      	bmi.n	e544 <spi_m_async_set_baudrate+0x28>
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    e538:	4629      	mov	r1, r5
    e53a:	1d20      	adds	r0, r4, #4
    e53c:	4b05      	ldr	r3, [pc, #20]	; (e554 <spi_m_async_set_baudrate+0x38>)
}
    e53e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_async_set_baudrate(&spi->dev, baud_val);
    e542:	4718      	bx	r3
}
    e544:	f06f 0003 	mvn.w	r0, #3
    e548:	bd70      	pop	{r4, r5, r6, pc}
    e54a:	bf00      	nop
    e54c:	0000d415 	.word	0x0000d415
    e550:	00015f2f 	.word	0x00015f2f
    e554:	00011155 	.word	0x00011155

0000e558 <spi_m_async_set_mode>:
{
    e558:	b570      	push	{r4, r5, r6, lr}
	ASSERT(spi);
    e55a:	4604      	mov	r4, r0
    e55c:	3800      	subs	r0, #0
    e55e:	4b0a      	ldr	r3, [pc, #40]	; (e588 <spi_m_async_set_mode+0x30>)
    e560:	bf18      	it	ne
    e562:	2001      	movne	r0, #1
{
    e564:	460d      	mov	r5, r1
	ASSERT(spi);
    e566:	22d9      	movs	r2, #217	; 0xd9
    e568:	4908      	ldr	r1, [pc, #32]	; (e58c <spi_m_async_set_mode+0x34>)
    e56a:	4798      	blx	r3
	if (spi->stat & SPI_M_ASYNC_STATUS_BUSY) {
    e56c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e570:	06db      	lsls	r3, r3, #27
    e572:	d405      	bmi.n	e580 <spi_m_async_set_mode+0x28>
	return _spi_m_async_set_mode(&spi->dev, mode);
    e574:	4629      	mov	r1, r5
    e576:	1d20      	adds	r0, r4, #4
    e578:	4b05      	ldr	r3, [pc, #20]	; (e590 <spi_m_async_set_mode+0x38>)
}
    e57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_m_async_set_mode(&spi->dev, mode);
    e57e:	4718      	bx	r3
}
    e580:	f06f 0003 	mvn.w	r0, #3
    e584:	bd70      	pop	{r4, r5, r6, pc}
    e586:	bf00      	nop
    e588:	0000d415 	.word	0x0000d415
    e58c:	00015f2f 	.word	0x00015f2f
    e590:	00011121 	.word	0x00011121

0000e594 <spi_m_async_transfer>:

int32_t spi_m_async_transfer(struct spi_m_async_descriptor *spi, uint8_t const *txbuf, uint8_t *const rxbuf,
                             const uint16_t length)
{
    e594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ASSERT(spi);
    e596:	4604      	mov	r4, r0
    e598:	3800      	subs	r0, #0
{
    e59a:	461e      	mov	r6, r3
	ASSERT(spi);
    e59c:	bf18      	it	ne
    e59e:	2001      	movne	r0, #1
    e5a0:	4b11      	ldr	r3, [pc, #68]	; (e5e8 <spi_m_async_transfer+0x54>)
{
    e5a2:	460d      	mov	r5, r1
    e5a4:	4617      	mov	r7, r2
	ASSERT(spi);
    e5a6:	4911      	ldr	r1, [pc, #68]	; (e5ec <spi_m_async_transfer+0x58>)
    e5a8:	f44f 729c 	mov.w	r2, #312	; 0x138
    e5ac:	4798      	blx	r3

	/* Fill transfer descriptor */
	spi->xfer.rxbuf = (uint8_t *)rxbuf;
	spi->xfer.txbuf = (uint8_t *)txbuf;
	spi->xfer.size  = length;
	spi->xfercnt    = 0;
    e5ae:	2300      	movs	r3, #0
	spi->xfer.size  = length;
    e5b0:	6426      	str	r6, [r4, #64]	; 0x40
	spi->xfercnt    = 0;
    e5b2:	6463      	str	r3, [r4, #68]	; 0x44

	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
	_spi_m_async_enable_rx(&spi->dev, true);
    e5b4:	1d26      	adds	r6, r4, #4
	spi->stat = SPI_M_ASYNC_STATUS_BUSY;
    e5b6:	2310      	movs	r3, #16
    e5b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	spi->xfer.txbuf = (uint8_t *)txbuf;
    e5bc:	e9c4 570e 	strd	r5, r7, [r4, #56]	; 0x38
	_spi_m_async_enable_rx(&spi->dev, true);
    e5c0:	4b0b      	ldr	r3, [pc, #44]	; (e5f0 <spi_m_async_transfer+0x5c>)
    e5c2:	2101      	movs	r1, #1
    e5c4:	4630      	mov	r0, r6
    e5c6:	4798      	blx	r3
	if (txbuf) {
    e5c8:	4b0a      	ldr	r3, [pc, #40]	; (e5f4 <spi_m_async_transfer+0x60>)
    e5ca:	b155      	cbz	r5, e5e2 <spi_m_async_transfer+0x4e>
		if (!(spi->dev.char_size > 1)) {
    e5cc:	7a21      	ldrb	r1, [r4, #8]
    e5ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
    e5d0:	2901      	cmp	r1, #1
			_spi_m_async_write_one(&spi->dev, txbuf[spi->xfercnt]);
    e5d2:	bf94      	ite	ls
    e5d4:	5ca9      	ldrbls	r1, [r5, r2]
		} else {
			_spi_m_async_write_one(&spi->dev, ((uint16_t *)txbuf)[spi->xfercnt]);
    e5d6:	f835 1012 	ldrhhi.w	r1, [r5, r2, lsl #1]
		}
	} else {
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    e5da:	4630      	mov	r0, r6
    e5dc:	4798      	blx	r3
	}

	return ERR_NONE;
}
    e5de:	2000      	movs	r0, #0
    e5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_spi_m_async_write_one(&spi->dev, spi->dev.dummy_byte);
    e5e2:	8961      	ldrh	r1, [r4, #10]
    e5e4:	e7f9      	b.n	e5da <spi_m_async_transfer+0x46>
    e5e6:	bf00      	nop
    e5e8:	0000d415 	.word	0x0000d415
    e5ec:	00015f2f 	.word	0x00015f2f
    e5f0:	000111b9 	.word	0x000111b9
    e5f4:	00011225 	.word	0x00011225

0000e5f8 <spi_m_async_register_callback>:
	return ERR_NONE;
}

void spi_m_async_register_callback(struct spi_m_async_descriptor *spi, const enum spi_m_async_cb_type type,
                                   FUNC_PTR func)
{
    e5f8:	b570      	push	{r4, r5, r6, lr}
    e5fa:	460e      	mov	r6, r1
    e5fc:	4615      	mov	r5, r2
	ASSERT(spi && (type < SPI_M_ASYNC_CB_N));
    e5fe:	4604      	mov	r4, r0
    e600:	b118      	cbz	r0, e60a <spi_m_async_register_callback+0x12>
    e602:	2901      	cmp	r1, #1
    e604:	bf8c      	ite	hi
    e606:	2000      	movhi	r0, #0
    e608:	2001      	movls	r0, #1
    e60a:	4909      	ldr	r1, [pc, #36]	; (e630 <spi_m_async_register_callback+0x38>)
    e60c:	4b09      	ldr	r3, [pc, #36]	; (e634 <spi_m_async_register_callback+0x3c>)
    e60e:	f240 1263 	movw	r2, #355	; 0x163
    e612:	4798      	blx	r3

	if (SPI_M_ASYNC_CB_XFER == type) {
    e614:	b90e      	cbnz	r6, e61a <spi_m_async_register_callback+0x22>
		spi->callbacks.cb_xfer = (spi_m_async_cb_xfer_t)func;
    e616:	6325      	str	r5, [r4, #48]	; 0x30
	} else {
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
	}
}
    e618:	bd70      	pop	{r4, r5, r6, pc}
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    e61a:	1e2a      	subs	r2, r5, #0
		spi->callbacks.cb_error = (spi_m_async_cb_error_t)func;
    e61c:	6365      	str	r5, [r4, #52]	; 0x34
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    e61e:	f104 0004 	add.w	r0, r4, #4
    e622:	4b05      	ldr	r3, [pc, #20]	; (e638 <spi_m_async_register_callback+0x40>)
}
    e624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_spi_m_async_set_irq_state(&spi->dev, SPI_DEV_CB_ERROR, NULL != func);
    e628:	bf18      	it	ne
    e62a:	2201      	movne	r2, #1
    e62c:	2103      	movs	r1, #3
    e62e:	4718      	bx	r3
    e630:	00015f2f 	.word	0x00015f2f
    e634:	0000d415 	.word	0x0000d415
    e638:	000112a9 	.word	0x000112a9

0000e63c <spi_m_async_get_io_descriptor>:

int32_t spi_m_async_get_io_descriptor(struct spi_m_async_descriptor *const spi, struct io_descriptor **io)
{
    e63c:	b538      	push	{r3, r4, r5, lr}
    e63e:	460d      	mov	r5, r1
	ASSERT(spi && io);
    e640:	4604      	mov	r4, r0
    e642:	b110      	cbz	r0, e64a <spi_m_async_get_io_descriptor+0xe>
    e644:	1e08      	subs	r0, r1, #0
    e646:	bf18      	it	ne
    e648:	2001      	movne	r0, #1
    e64a:	4904      	ldr	r1, [pc, #16]	; (e65c <spi_m_async_get_io_descriptor+0x20>)
    e64c:	4b04      	ldr	r3, [pc, #16]	; (e660 <spi_m_async_get_io_descriptor+0x24>)
    e64e:	f240 126f 	movw	r2, #367	; 0x16f
	*io = &spi->io;
    e652:	3424      	adds	r4, #36	; 0x24
	ASSERT(spi && io);
    e654:	4798      	blx	r3
	*io = &spi->io;
    e656:	602c      	str	r4, [r5, #0]
	return 0;
}
    e658:	2000      	movs	r0, #0
    e65a:	bd38      	pop	{r3, r4, r5, pc}
    e65c:	00015f2f 	.word	0x00015f2f
    e660:	0000d415 	.word	0x0000d415

0000e664 <crc_sync_init>:

/**
 * \brief Initialize CRC.
 */
int32_t crc_sync_init(struct crc_sync_descriptor *const descr, void *const hw)
{
    e664:	b570      	push	{r4, r5, r6, lr}
    e666:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    e668:	4604      	mov	r4, r0
    e66a:	b110      	cbz	r0, e672 <crc_sync_init+0xe>
    e66c:	1e08      	subs	r0, r1, #0
    e66e:	bf18      	it	ne
    e670:	2001      	movne	r0, #1
    e672:	4905      	ldr	r1, [pc, #20]	; (e688 <crc_sync_init+0x24>)
    e674:	4b05      	ldr	r3, [pc, #20]	; (e68c <crc_sync_init+0x28>)
    e676:	222b      	movs	r2, #43	; 0x2b
    e678:	4798      	blx	r3

	return _crc_sync_init(&descr->dev, hw);
    e67a:	4629      	mov	r1, r5
    e67c:	4620      	mov	r0, r4
    e67e:	4b04      	ldr	r3, [pc, #16]	; (e690 <crc_sync_init+0x2c>)
}
    e680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _crc_sync_init(&descr->dev, hw);
    e684:	4718      	bx	r3
    e686:	bf00      	nop
    e688:	00015f4c 	.word	0x00015f4c
    e68c:	0000d415 	.word	0x0000d415
    e690:	00012485 	.word	0x00012485

0000e694 <_usb_d_find_ep>:
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e694:	4a0a      	ldr	r2, [pc, #40]	; (e6c0 <_usb_d_find_ep+0x2c>)
{
    e696:	b570      	push	{r4, r5, r6, lr}
    e698:	2300      	movs	r3, #0
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e69a:	f000 050f 	and.w	r5, r0, #15
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
    e69e:	7854      	ldrb	r4, [r2, #1]
    e6a0:	4284      	cmp	r4, r0
    e6a2:	b259      	sxtb	r1, r3
    e6a4:	d00a      	beq.n	e6bc <_usb_d_find_ep+0x28>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
    e6a6:	7816      	ldrb	r6, [r2, #0]
    e6a8:	b90e      	cbnz	r6, e6ae <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
    e6aa:	42ac      	cmp	r4, r5
    e6ac:	d006      	beq.n	e6bc <_usb_d_find_ep+0x28>
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e6ae:	3301      	adds	r3, #1
    e6b0:	2b0d      	cmp	r3, #13
    e6b2:	f102 0220 	add.w	r2, r2, #32
    e6b6:	d1f2      	bne.n	e69e <_usb_d_find_ep+0xa>
			return i;
		}
	}
	return -1;
    e6b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    e6bc:	4608      	mov	r0, r1
    e6be:	bd70      	pop	{r4, r5, r6, pc}
    e6c0:	20000e14 	.word	0x20000e14

0000e6c4 <usb_d_dummy_cb_false>:

	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
    e6c4:	2000      	movs	r0, #0
    e6c6:	4770      	bx	lr

0000e6c8 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
    e6c8:	b513      	push	{r0, r1, r4, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e6ca:	4b0a      	ldr	r3, [pc, #40]	; (e6f4 <usb_d_cb_trans_more+0x2c>)
{
    e6cc:	9101      	str	r1, [sp, #4]
    e6ce:	4604      	mov	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e6d0:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
    e6d2:	4b09      	ldr	r3, [pc, #36]	; (e6f8 <usb_d_cb_trans_more+0x30>)
    e6d4:	9901      	ldr	r1, [sp, #4]
    e6d6:	eb03 1340 	add.w	r3, r3, r0, lsl #5
    e6da:	789a      	ldrb	r2, [r3, #2]
    e6dc:	2a03      	cmp	r2, #3
    e6de:	d105      	bne.n	e6ec <usb_d_cb_trans_more+0x24>
		return ept->callbacks.more(ep, transfered);
    e6e0:	699b      	ldr	r3, [r3, #24]
    e6e2:	4620      	mov	r0, r4
	}
	return false;
}
    e6e4:	b002      	add	sp, #8
    e6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return ept->callbacks.more(ep, transfered);
    e6ea:	4718      	bx	r3
}
    e6ec:	2000      	movs	r0, #0
    e6ee:	b002      	add	sp, #8
    e6f0:	bd10      	pop	{r4, pc}
    e6f2:	bf00      	nop
    e6f4:	0000e695 	.word	0x0000e695
    e6f8:	20000e14 	.word	0x20000e14

0000e6fc <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
    e6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e700:	4b37      	ldr	r3, [pc, #220]	; (e7e0 <_usb_d_cb_trans_done+0xe4>)
    e702:	4c38      	ldr	r4, [pc, #224]	; (e7e4 <_usb_d_cb_trans_done+0xe8>)
{
    e704:	b085      	sub	sp, #20
    e706:	4680      	mov	r8, r0
    e708:	460f      	mov	r7, r1
    e70a:	4691      	mov	r9, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    e70c:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
    e70e:	0146      	lsls	r6, r0, #5
    e710:	2f00      	cmp	r7, #0
    e712:	d143      	bne.n	e79c <_usb_d_cb_trans_done+0xa0>
		ept->xfer.hdr.status = USB_XFER_DONE;
    e714:	19a5      	adds	r5, r4, r6
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e716:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_DONE;
    e718:	70ef      	strb	r7, [r5, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e71a:	2900      	cmp	r1, #0
    e71c:	d135      	bne.n	e78a <_usb_d_cb_trans_done+0x8e>
	if (state == USB_EP_S_X_DATA) {
    e71e:	2320      	movs	r3, #32
    e720:	220c      	movs	r2, #12
    e722:	fb13 2000 	smlabb	r0, r3, r0, r2
    e726:	78ab      	ldrb	r3, [r5, #2]
    e728:	2b03      	cmp	r3, #3
    e72a:	eb04 0200 	add.w	r2, r4, r0
    e72e:	69eb      	ldr	r3, [r5, #28]
    e730:	7868      	ldrb	r0, [r5, #1]
    e732:	d126      	bne.n	e782 <_usb_d_cb_trans_done+0x86>
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
    e734:	2101      	movs	r1, #1
    e736:	f995 400c 	ldrsb.w	r4, [r5, #12]
    e73a:	4798      	blx	r3
		if (err) {
    e73c:	786b      	ldrb	r3, [r5, #1]
    e73e:	b168      	cbz	r0, e75c <_usb_d_cb_trans_done+0x60>
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    e740:	2c00      	cmp	r4, #0
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    e742:	f240 2205 	movw	r2, #517	; 0x205
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    e746:	bfb4      	ite	lt
    e748:	4618      	movlt	r0, r3
    e74a:	f043 0080 	orrge.w	r0, r3, #128	; 0x80
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
    e74e:	806a      	strh	r2, [r5, #2]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
    e750:	4b25      	ldr	r3, [pc, #148]	; (e7e8 <_usb_d_cb_trans_done+0xec>)
    e752:	2101      	movs	r1, #1
    e754:	4798      	blx	r3
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
}
    e756:	b005      	add	sp, #20
    e758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	struct usb_d_transfer trans
    e75c:	2c00      	cmp	r4, #0
    e75e:	bfac      	ite	ge
    e760:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
    e764:	f003 030f 	andlt.w	r3, r3, #15
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    e768:	2204      	movs	r2, #4
	struct usb_d_transfer trans
    e76a:	f88d 300c 	strb.w	r3, [sp, #12]
    e76e:	2301      	movs	r3, #1
    e770:	e9cd 0001 	strd	r0, r0, [sp, #4]
    e774:	f88d 300d 	strb.w	r3, [sp, #13]
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    e778:	70aa      	strb	r2, [r5, #2]
	return _usb_d_dev_ep_trans(&trans);
    e77a:	4b1c      	ldr	r3, [pc, #112]	; (e7ec <_usb_d_cb_trans_done+0xf0>)
    e77c:	a801      	add	r0, sp, #4
    e77e:	4798      	blx	r3
    e780:	e7e9      	b.n	e756 <_usb_d_cb_trans_done+0x5a>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
    e782:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    e784:	2302      	movs	r3, #2
    e786:	70ab      	strb	r3, [r5, #2]
    e788:	e7e5      	b.n	e756 <_usb_d_cb_trans_done+0x5a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    e78a:	2301      	movs	r3, #1
    e78c:	70ab      	strb	r3, [r5, #2]
	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
    e78e:	4434      	add	r4, r6
    e790:	464a      	mov	r2, r9
    e792:	69e3      	ldr	r3, [r4, #28]
    e794:	78e1      	ldrb	r1, [r4, #3]
    e796:	4640      	mov	r0, r8
    e798:	4798      	blx	r3
    e79a:	e7dc      	b.n	e756 <_usb_d_cb_trans_done+0x5a>
	} else if (code == USB_TRANS_STALL) {
    e79c:	2f01      	cmp	r7, #1
		ept->xfer.hdr.status = USB_XFER_HALT;
    e79e:	eb04 0306 	add.w	r3, r4, r6
	} else if (code == USB_TRANS_STALL) {
    e7a2:	d10b      	bne.n	e7bc <_usb_d_cb_trans_done+0xc0>
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e7a4:	5da1      	ldrb	r1, [r4, r6]
		ept->xfer.hdr.status = USB_XFER_HALT;
    e7a6:	2202      	movs	r2, #2
    e7a8:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e7aa:	b921      	cbnz	r1, e7b6 <_usb_d_cb_trans_done+0xba>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    e7ac:	709a      	strb	r2, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    e7ae:	4640      	mov	r0, r8
    e7b0:	4b0d      	ldr	r3, [pc, #52]	; (e7e8 <_usb_d_cb_trans_done+0xec>)
    e7b2:	4798      	blx	r3
    e7b4:	e7eb      	b.n	e78e <_usb_d_cb_trans_done+0x92>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
    e7b6:	2205      	movs	r2, #5
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    e7b8:	709a      	strb	r2, [r3, #2]
    e7ba:	e7e8      	b.n	e78e <_usb_d_cb_trans_done+0x92>
	} else if (code == USB_TRANS_ABORT) {
    e7bc:	2f02      	cmp	r7, #2
    e7be:	d107      	bne.n	e7d0 <_usb_d_cb_trans_done+0xd4>
		ept->xfer.hdr.status = USB_XFER_ABORT;
    e7c0:	2204      	movs	r2, #4
    e7c2:	70da      	strb	r2, [r3, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    e7c4:	5da2      	ldrb	r2, [r4, r6]
    e7c6:	b90a      	cbnz	r2, e7cc <_usb_d_cb_trans_done+0xd0>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
    e7c8:	709f      	strb	r7, [r3, #2]
			return;
    e7ca:	e7c4      	b.n	e756 <_usb_d_cb_trans_done+0x5a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
    e7cc:	2201      	movs	r2, #1
    e7ce:	e7f3      	b.n	e7b8 <_usb_d_cb_trans_done+0xbc>
	} else if (code == USB_TRANS_RESET) {
    e7d0:	2f03      	cmp	r7, #3
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
    e7d2:	bf0c      	ite	eq
    e7d4:	f44f 62a0 	moveq.w	r2, #1280	; 0x500
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
    e7d8:	f240 6206 	movwne	r2, #1542	; 0x606
    e7dc:	805a      	strh	r2, [r3, #2]
    e7de:	e7d6      	b.n	e78e <_usb_d_cb_trans_done+0x92>
    e7e0:	0000e695 	.word	0x0000e695
    e7e4:	20000e14 	.word	0x20000e14
    e7e8:	0000ce05 	.word	0x0000ce05
    e7ec:	0000cf25 	.word	0x0000cf25

0000e7f0 <usb_d_cb_trans_setup>:
{
    e7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e7f4:	4b18      	ldr	r3, [pc, #96]	; (e858 <usb_d_cb_trans_setup+0x68>)
	uint8_t *        req      = ept->xfer.req;
    e7f6:	4f19      	ldr	r7, [pc, #100]	; (e85c <usb_d_cb_trans_setup+0x6c>)
    e7f8:	4d19      	ldr	r5, [pc, #100]	; (e860 <usb_d_cb_trans_setup+0x70>)
{
    e7fa:	4604      	mov	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e7fc:	4798      	blx	r3
	uint8_t *        req      = ept->xfer.req;
    e7fe:	f04f 0820 	mov.w	r8, #32
    e802:	230c      	movs	r3, #12
    e804:	fb18 3800 	smlabb	r8, r8, r0, r3
    e808:	44b8      	add	r8, r7
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    e80a:	4b16      	ldr	r3, [pc, #88]	; (e864 <usb_d_cb_trans_setup+0x74>)
	int8_t           ep_index = _usb_d_find_ep(ep);
    e80c:	4606      	mov	r6, r0
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
    e80e:	4641      	mov	r1, r8
    e810:	4620      	mov	r0, r4
    e812:	4798      	blx	r3
	if (n != 8) {
    e814:	b2c0      	uxtb	r0, r0
    e816:	2808      	cmp	r0, #8
    e818:	f044 0980 	orr.w	r9, r4, #128	; 0x80
    e81c:	d008      	beq.n	e830 <usb_d_cb_trans_setup+0x40>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    e81e:	2101      	movs	r1, #1
    e820:	4620      	mov	r0, r4
    e822:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    e824:	4648      	mov	r0, r9
    e826:	462b      	mov	r3, r5
    e828:	2101      	movs	r1, #1
}
    e82a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
    e82e:	4718      	bx	r3
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    e830:	eb07 1646 	add.w	r6, r7, r6, lsl #5
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    e834:	2100      	movs	r1, #0
    e836:	4620      	mov	r0, r4
    e838:	47a8      	blx	r5
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    e83a:	2701      	movs	r7, #1
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
    e83c:	2100      	movs	r1, #0
    e83e:	4648      	mov	r0, r9
    e840:	47a8      	blx	r5
	if (!ept->callbacks.req(ep, req)) {
    e842:	6973      	ldr	r3, [r6, #20]
	ept->xfer.hdr.state = USB_EP_S_IDLE;
    e844:	70b7      	strb	r7, [r6, #2]
	if (!ept->callbacks.req(ep, req)) {
    e846:	4641      	mov	r1, r8
    e848:	4620      	mov	r0, r4
    e84a:	4798      	blx	r3
    e84c:	b910      	cbnz	r0, e854 <usb_d_cb_trans_setup+0x64>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
    e84e:	2305      	movs	r3, #5
    e850:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
    e852:	e7e4      	b.n	e81e <usb_d_cb_trans_setup+0x2e>
}
    e854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e858:	0000e695 	.word	0x0000e695
    e85c:	20000e14 	.word	0x20000e14
    e860:	0000ce05 	.word	0x0000ce05
    e864:	0000ced1 	.word	0x0000ced1

0000e868 <usb_d_init>:

int32_t usb_d_init(void)
{
    e868:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
    e86a:	4b11      	ldr	r3, [pc, #68]	; (e8b0 <usb_d_init+0x48>)
    e86c:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
    e86e:	2800      	cmp	r0, #0
    e870:	db1d      	blt.n	e8ae <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    e872:	4b10      	ldr	r3, [pc, #64]	; (e8b4 <usb_d_init+0x4c>)
    e874:	4810      	ldr	r0, [pc, #64]	; (e8b8 <usb_d_init+0x50>)
    e876:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    e87a:	2100      	movs	r1, #0
    e87c:	4798      	blx	r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e87e:	4b0e      	ldr	r3, [pc, #56]	; (e8b8 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
    e880:	490e      	ldr	r1, [pc, #56]	; (e8bc <usb_d_init+0x54>)
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
    e882:	2200      	movs	r2, #0
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    e884:	20ff      	movs	r0, #255	; 0xff
    e886:	3201      	adds	r2, #1
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e888:	2a0d      	cmp	r2, #13
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
    e88a:	e9c3 1105 	strd	r1, r1, [r3, #20]
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
    e88e:	7058      	strb	r0, [r3, #1]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
    e890:	61d9      	str	r1, [r3, #28]
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
    e892:	f103 0320 	add.w	r3, r3, #32
    e896:	d1f6      	bne.n	e886 <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
    e898:	4c09      	ldr	r4, [pc, #36]	; (e8c0 <usb_d_init+0x58>)
    e89a:	490a      	ldr	r1, [pc, #40]	; (e8c4 <usb_d_init+0x5c>)
    e89c:	2000      	movs	r0, #0
    e89e:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
    e8a0:	4909      	ldr	r1, [pc, #36]	; (e8c8 <usb_d_init+0x60>)
    e8a2:	2001      	movs	r0, #1
    e8a4:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
    e8a6:	2002      	movs	r0, #2
    e8a8:	4908      	ldr	r1, [pc, #32]	; (e8cc <usb_d_init+0x64>)
    e8aa:	47a0      	blx	r4
	return ERR_NONE;
    e8ac:	2000      	movs	r0, #0
}
    e8ae:	bd10      	pop	{r4, pc}
    e8b0:	0000c9fd 	.word	0x0000c9fd
    e8b4:	00012e05 	.word	0x00012e05
    e8b8:	20000e14 	.word	0x20000e14
    e8bc:	0000e6c5 	.word	0x0000e6c5
    e8c0:	0000d0c5 	.word	0x0000d0c5
    e8c4:	0000e7f1 	.word	0x0000e7f1
    e8c8:	0000e6c9 	.word	0x0000e6c9
    e8cc:	0000e6fd 	.word	0x0000e6fd

0000e8d0 <usb_d_register_callback>:
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
    e8d0:	4b00      	ldr	r3, [pc, #0]	; (e8d4 <usb_d_register_callback+0x4>)
    e8d2:	4718      	bx	r3
    e8d4:	0000d0a1 	.word	0x0000d0a1

0000e8d8 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
	return _usb_d_dev_enable();
    e8d8:	4b00      	ldr	r3, [pc, #0]	; (e8dc <usb_d_enable+0x4>)
    e8da:	4718      	bx	r3
    e8dc:	0000cad9 	.word	0x0000cad9

0000e8e0 <usb_d_attach>:
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
	_usb_d_dev_attach();
    e8e0:	4b00      	ldr	r3, [pc, #0]	; (e8e4 <usb_d_attach+0x4>)
    e8e2:	4718      	bx	r3
    e8e4:	0000cb35 	.word	0x0000cb35

0000e8e8 <usb_d_get_frame_num>:
	return _usb_d_dev_get_speed();
}

uint16_t usb_d_get_frame_num(void)
{
	return _usb_d_dev_get_frame_n();
    e8e8:	4b00      	ldr	r3, [pc, #0]	; (e8ec <usb_d_get_frame_num+0x4>)
    e8ea:	4718      	bx	r3
    e8ec:	0000cb53 	.word	0x0000cb53

0000e8f0 <usb_d_set_address>:
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
	_usb_d_dev_set_address(addr);
    e8f0:	4b00      	ldr	r3, [pc, #0]	; (e8f4 <usb_d_set_address+0x4>)
    e8f2:	4718      	bx	r3
    e8f4:	0000cb47 	.word	0x0000cb47

0000e8f8 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
    e8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
    e8fa:	4c11      	ldr	r4, [pc, #68]	; (e940 <usb_d_ep_init+0x48>)
{
    e8fc:	4606      	mov	r6, r0
    e8fe:	460d      	mov	r5, r1
    e900:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    e902:	47a0      	blx	r4
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
    e904:	2800      	cmp	r0, #0
    e906:	da14      	bge.n	e932 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
    e908:	20ff      	movs	r0, #255	; 0xff
    e90a:	47a0      	blx	r4
		if (ep_index < 0) {
    e90c:	1e04      	subs	r4, r0, #0
    e90e:	db13      	blt.n	e938 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
    e910:	4b0c      	ldr	r3, [pc, #48]	; (e944 <usb_d_ep_init+0x4c>)
    e912:	463a      	mov	r2, r7
    e914:	4629      	mov	r1, r5
    e916:	4630      	mov	r0, r6
    e918:	4798      	blx	r3
	if (rc < 0) {
    e91a:	2800      	cmp	r0, #0
    e91c:	db08      	blt.n	e930 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
    e91e:	4b0a      	ldr	r3, [pc, #40]	; (e948 <usb_d_ep_init+0x50>)
    e920:	0162      	lsls	r2, r4, #5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    e922:	f005 0503 	and.w	r5, r5, #3
	ept->xfer.hdr.ep   = ep;
    e926:	eb03 1444 	add.w	r4, r3, r4, lsl #5
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
    e92a:	549d      	strb	r5, [r3, r2]
	ept->xfer.hdr.ep   = ep;
    e92c:	7066      	strb	r6, [r4, #1]
	return ERR_NONE;
    e92e:	2000      	movs	r0, #0
}
    e930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    e932:	f06f 0013 	mvn.w	r0, #19
    e936:	e7fb      	b.n	e930 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
    e938:	f06f 0014 	mvn.w	r0, #20
    e93c:	e7f8      	b.n	e930 <usb_d_ep_init+0x38>
    e93e:	bf00      	nop
    e940:	0000e695 	.word	0x0000e695
    e944:	0000cb61 	.word	0x0000cb61
    e948:	20000e14 	.word	0x20000e14

0000e94c <usb_d_ep0_init>:
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    e94c:	2100      	movs	r1, #0
{
    e94e:	4602      	mov	r2, r0
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
    e950:	4b01      	ldr	r3, [pc, #4]	; (e958 <usb_d_ep0_init+0xc>)
    e952:	4608      	mov	r0, r1
    e954:	4718      	bx	r3
    e956:	bf00      	nop
    e958:	0000e8f9 	.word	0x0000e8f9

0000e95c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
    e95c:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e95e:	4b07      	ldr	r3, [pc, #28]	; (e97c <usb_d_ep_deinit+0x20>)
{
    e960:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e962:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
    e964:	1e04      	subs	r4, r0, #0
    e966:	db07      	blt.n	e978 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
    e968:	4b05      	ldr	r3, [pc, #20]	; (e980 <usb_d_ep_deinit+0x24>)
    e96a:	4628      	mov	r0, r5
    e96c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
    e96e:	4805      	ldr	r0, [pc, #20]	; (e984 <usb_d_ep_deinit+0x28>)
    e970:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    e974:	23ff      	movs	r3, #255	; 0xff
    e976:	7043      	strb	r3, [r0, #1]
}
    e978:	bd38      	pop	{r3, r4, r5, pc}
    e97a:	bf00      	nop
    e97c:	0000e695 	.word	0x0000e695
    e980:	0000cc21 	.word	0x0000cc21
    e984:	20000e14 	.word	0x20000e14

0000e988 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
    e988:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    e98a:	4b0c      	ldr	r3, [pc, #48]	; (e9bc <usb_d_ep_enable+0x34>)
{
    e98c:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
    e98e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
    e990:	1e03      	subs	r3, r0, #0
    e992:	db10      	blt.n	e9b6 <usb_d_ep_enable+0x2e>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    e994:	015b      	lsls	r3, r3, #5
    e996:	4c0a      	ldr	r4, [pc, #40]	; (e9c0 <usb_d_ep_enable+0x38>)
    e998:	5ce2      	ldrb	r2, [r4, r3]
    e99a:	441c      	add	r4, r3
    e99c:	2a00      	cmp	r2, #0
    e99e:	bf0c      	ite	eq
    e9a0:	2202      	moveq	r2, #2
    e9a2:	2201      	movne	r2, #1
	rc                  = _usb_d_dev_ep_enable(ep);
    e9a4:	4b07      	ldr	r3, [pc, #28]	; (e9c4 <usb_d_ep_enable+0x3c>)
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
    e9a6:	70a2      	strb	r2, [r4, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
    e9a8:	4628      	mov	r0, r5
    e9aa:	4798      	blx	r3
	if (rc < 0) {
    e9ac:	2800      	cmp	r0, #0
    e9ae:	da01      	bge.n	e9b4 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
    e9b0:	2300      	movs	r3, #0
    e9b2:	70a3      	strb	r3, [r4, #2]
	}
	return rc;
}
    e9b4:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
    e9b6:	f06f 0011 	mvn.w	r0, #17
    e9ba:	e7fb      	b.n	e9b4 <usb_d_ep_enable+0x2c>
    e9bc:	0000e695 	.word	0x0000e695
    e9c0:	20000e14 	.word	0x20000e14
    e9c4:	0000cc95 	.word	0x0000cc95

0000e9c8 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
    e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    e9cc:	f890 8008 	ldrb.w	r8, [r0, #8]
    e9d0:	4b31      	ldr	r3, [pc, #196]	; (ea98 <usb_d_ep_transfer+0xd0>)
{
    e9d2:	4605      	mov	r5, r0
    e9d4:	b087      	sub	sp, #28
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
    e9d6:	4640      	mov	r0, r8
    e9d8:	4798      	blx	r3
	uint32_t              len = xfer->size;
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
    e9da:	1e04      	subs	r4, r0, #0
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    e9dc:	7a6f      	ldrb	r7, [r5, #9]
	uint32_t              len = xfer->size;
    e9de:	686e      	ldr	r6, [r5, #4]
	if (ep_index < 0) {
    e9e0:	db55      	blt.n	ea8e <usb_d_ep_transfer+0xc6>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
	state = ept->xfer.hdr.state;
    e9e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; eaac <usb_d_ep_transfer+0xe4>
	atomic_enter_critical(&flags);
    e9e6:	4b2d      	ldr	r3, [pc, #180]	; (ea9c <usb_d_ep_transfer+0xd4>)
	state = ept->xfer.hdr.state;
    e9e8:	ea4f 1b44 	mov.w	fp, r4, lsl #5
    e9ec:	eb0a 1444 	add.w	r4, sl, r4, lsl #5
	atomic_enter_critical(&flags);
    e9f0:	a802      	add	r0, sp, #8
    e9f2:	4798      	blx	r3
	state = ept->xfer.hdr.state;
    e9f4:	78a3      	ldrb	r3, [r4, #2]
    e9f6:	f88d 3007 	strb.w	r3, [sp, #7]
	if (state == USB_EP_S_IDLE) {
    e9fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e9fe:	2b01      	cmp	r3, #1
    ea00:	fa5f f983 	uxtb.w	r9, r3
    ea04:	4b26      	ldr	r3, [pc, #152]	; (eaa0 <usb_d_ep_transfer+0xd8>)
    ea06:	d11a      	bne.n	ea3e <usb_d_ep_transfer+0x76>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
    ea08:	2203      	movs	r2, #3
    ea0a:	70a2      	strb	r2, [r4, #2]
		atomic_leave_critical(&flags);
    ea0c:	a802      	add	r0, sp, #8
    ea0e:	4798      	blx	r3
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
    ea10:	f81a 300b 	ldrb.w	r3, [sl, fp]
    ea14:	b1fb      	cbz	r3, ea56 <usb_d_ep_transfer+0x8e>
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
    ea16:	1e3b      	subs	r3, r7, #0
    ea18:	ea4f 12d8 	mov.w	r2, r8, lsr #7
    ea1c:	bf18      	it	ne
    ea1e:	2301      	movne	r3, #1
	struct usb_d_transfer trans
    ea20:	6828      	ldr	r0, [r5, #0]
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
    ea22:	7a29      	ldrb	r1, [r5, #8]
	struct usb_d_transfer trans
    ea24:	e9cd 0603 	strd	r0, r6, [sp, #12]
    ea28:	b372      	cbz	r2, ea88 <usb_d_ep_transfer+0xc0>
    ea2a:	f041 0280 	orr.w	r2, r1, #128	; 0x80
    ea2e:	f88d 3015 	strb.w	r3, [sp, #21]
	return _usb_d_dev_ep_trans(&trans);
    ea32:	a803      	add	r0, sp, #12
    ea34:	4b1b      	ldr	r3, [pc, #108]	; (eaa4 <usb_d_ep_transfer+0xdc>)
	struct usb_d_transfer trans
    ea36:	f88d 2014 	strb.w	r2, [sp, #20]
	return _usb_d_dev_ep_trans(&trans);
    ea3a:	4798      	blx	r3
	return rc;
    ea3c:	e008      	b.n	ea50 <usb_d_ep_transfer+0x88>
		atomic_leave_critical(&flags);
    ea3e:	a802      	add	r0, sp, #8
    ea40:	4798      	blx	r3
		switch (state) {
    ea42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ea46:	2b06      	cmp	r3, #6
    ea48:	b2da      	uxtb	r2, r3
    ea4a:	d823      	bhi.n	ea94 <usb_d_ep_transfer+0xcc>
    ea4c:	4b16      	ldr	r3, [pc, #88]	; (eaa8 <usb_d_ep_transfer+0xe0>)
    ea4e:	5698      	ldrsb	r0, [r3, r2]
}
    ea50:	b007      	add	sp, #28
    ea52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
    ea56:	7ce1      	ldrb	r1, [r4, #19]
    ea58:	7ca2      	ldrb	r2, [r4, #18]
    ea5a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    ea5e:	b292      	uxth	r2, r2
		if (req_len == 0) {
    ea60:	b92a      	cbnz	r2, ea6e <usb_d_ep_transfer+0xa6>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
    ea62:	2304      	movs	r3, #4
    ea64:	70a3      	strb	r3, [r4, #2]
			len                 = 0;
    ea66:	4616      	mov	r6, r2
			zlp                 = true;
    ea68:	464b      	mov	r3, r9
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    ea6a:	461a      	mov	r2, r3
    ea6c:	e7d8      	b.n	ea20 <usb_d_ep_transfer+0x58>
			if (dir) {
    ea6e:	f994 100c 	ldrsb.w	r1, [r4, #12]
    ea72:	4296      	cmp	r6, r2
    ea74:	bf28      	it	cs
    ea76:	4616      	movcs	r6, r2
    ea78:	2900      	cmp	r1, #0
    ea7a:	daf6      	bge.n	ea6a <usb_d_ep_transfer+0xa2>
				zlp = (req_len > len);
    ea7c:	42b2      	cmp	r2, r6
    ea7e:	bf94      	ite	ls
    ea80:	2300      	movls	r3, #0
    ea82:	2301      	movhi	r3, #1
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
    ea84:	464a      	mov	r2, r9
    ea86:	e7cb      	b.n	ea20 <usb_d_ep_transfer+0x58>
	struct usb_d_transfer trans
    ea88:	f001 020f 	and.w	r2, r1, #15
    ea8c:	e7cf      	b.n	ea2e <usb_d_ep_transfer+0x66>
		return -USB_ERR_PARAM;
    ea8e:	f06f 0011 	mvn.w	r0, #17
    ea92:	e7dd      	b.n	ea50 <usb_d_ep_transfer+0x88>
		switch (state) {
    ea94:	2001      	movs	r0, #1
    ea96:	e7db      	b.n	ea50 <usb_d_ep_transfer+0x88>
    ea98:	0000e695 	.word	0x0000e695
    ea9c:	00011679 	.word	0x00011679
    eaa0:	00011687 	.word	0x00011687
    eaa4:	0000cf25 	.word	0x0000cf25
    eaa8:	00015f66 	.word	0x00015f66
    eaac:	20000e14 	.word	0x20000e14

0000eab0 <usb_d_ep_get_status>:
	ept->xfer.hdr.state  = USB_EP_S_IDLE;
	ept->xfer.hdr.status = USB_XFER_ABORT;
}

int32_t usb_d_ep_get_status(const uint8_t ep, struct usb_d_ep_status *stat)
{
    eab0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int8_t                    ep_index = _usb_d_find_ep(ep);
    eab2:	4b12      	ldr	r3, [pc, #72]	; (eafc <usb_d_ep_get_status+0x4c>)
	struct usb_d_ep *         ept      = &usb_d_inst.ep[ep_index];
	struct usb_d_trans_status tmp;
	uint8_t                   state = ept->xfer.hdr.state;
    eab4:	4d12      	ldr	r5, [pc, #72]	; (eb00 <usb_d_ep_get_status+0x50>)
{
    eab6:	b085      	sub	sp, #20
    eab8:	4606      	mov	r6, r0
    eaba:	460c      	mov	r4, r1
	int8_t                    ep_index = _usb_d_find_ep(ep);
    eabc:	4798      	blx	r3
	uint8_t                   state = ept->xfer.hdr.state;
    eabe:	eb05 1540 	add.w	r5, r5, r0, lsl #5
	if (ep_index < 0) {
    eac2:	2800      	cmp	r0, #0
	uint8_t                   state = ept->xfer.hdr.state;
    eac4:	78af      	ldrb	r7, [r5, #2]
	if (ep_index < 0) {
    eac6:	db14      	blt.n	eaf2 <usb_d_ep_get_status+0x42>
		return -USB_ERR_PARAM;
	}
	if (stat) {
    eac8:	b15c      	cbz	r4, eae2 <usb_d_ep_get_status+0x32>
		/* Check transaction status if transferring data. */
		_usb_d_dev_ep_get_status(ep, &tmp);
    eaca:	4b0e      	ldr	r3, [pc, #56]	; (eb04 <usb_d_ep_get_status+0x54>)
    eacc:	a901      	add	r1, sp, #4
    eace:	4630      	mov	r0, r6
    ead0:	4798      	blx	r3
		stat->ep    = ep;
    ead2:	7026      	strb	r6, [r4, #0]
		stat->state = state;
    ead4:	70e7      	strb	r7, [r4, #3]
		stat->code  = ept->xfer.hdr.status;
    ead6:	78eb      	ldrb	r3, [r5, #3]
    ead8:	7063      	strb	r3, [r4, #1]
		stat->count = tmp.count;
    eada:	9b02      	ldr	r3, [sp, #8]
    eadc:	6063      	str	r3, [r4, #4]
		stat->size  = tmp.size;
    eade:	9b01      	ldr	r3, [sp, #4]
    eae0:	60a3      	str	r3, [r4, #8]
	}
	switch (state) {
    eae2:	2f06      	cmp	r7, #6
    eae4:	d808      	bhi.n	eaf8 <usb_d_ep_get_status+0x48>
    eae6:	4b08      	ldr	r3, [pc, #32]	; (eb08 <usb_d_ep_get_status+0x58>)
    eae8:	443b      	add	r3, r7
    eaea:	f993 0007 	ldrsb.w	r0, [r3, #7]
		return -USB_ERR_FUNC;
	default:
		/* Busy */
		return USB_BUSY;
	}
}
    eaee:	b005      	add	sp, #20
    eaf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_PARAM;
    eaf2:	f06f 0011 	mvn.w	r0, #17
    eaf6:	e7fa      	b.n	eaee <usb_d_ep_get_status+0x3e>
    eaf8:	2001      	movs	r0, #1
    eafa:	e7f8      	b.n	eaee <usb_d_ep_get_status+0x3e>
    eafc:	0000e695 	.word	0x0000e695
    eb00:	20000e14 	.word	0x20000e14
    eb04:	0000d02d 	.word	0x0000d02d
    eb08:	00015f66 	.word	0x00015f66

0000eb0c <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
    eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb10:	4605      	mov	r5, r0
	if (ctrl == USB_EP_HALT_CLR) {
    eb12:	460c      	mov	r4, r1
    eb14:	b9d9      	cbnz	r1, eb4e <usb_d_ep_halt+0x42>
	int8_t           ep_index = _usb_d_find_ep(ep);
    eb16:	4b13      	ldr	r3, [pc, #76]	; (eb64 <usb_d_ep_halt+0x58>)
    eb18:	4798      	blx	r3
	if (ep_index < 0) {
    eb1a:	1e06      	subs	r6, r0, #0
    eb1c:	db1e      	blt.n	eb5c <usb_d_ep_halt+0x50>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
    eb1e:	4f12      	ldr	r7, [pc, #72]	; (eb68 <usb_d_ep_halt+0x5c>)
    eb20:	2102      	movs	r1, #2
    eb22:	4628      	mov	r0, r5
    eb24:	47b8      	blx	r7
    eb26:	b180      	cbz	r0, eb4a <usb_d_ep_halt+0x3e>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
    eb28:	4621      	mov	r1, r4
    eb2a:	4628      	mov	r0, r5
    eb2c:	47b8      	blx	r7
		if (rc < 0) {
    eb2e:	2800      	cmp	r0, #0
    eb30:	db0b      	blt.n	eb4a <usb_d_ep_halt+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
    eb32:	480e      	ldr	r0, [pc, #56]	; (eb6c <usb_d_ep_halt+0x60>)
    eb34:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    eb38:	f240 3301 	movw	r3, #769	; 0x301
    eb3c:	8043      	strh	r3, [r0, #2]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
    eb3e:	4622      	mov	r2, r4
    eb40:	69c3      	ldr	r3, [r0, #28]
    eb42:	2103      	movs	r1, #3
    eb44:	4628      	mov	r0, r5
    eb46:	4798      	blx	r3
	return ERR_NONE;
    eb48:	4620      	mov	r0, r4
	} else if (ctrl == USB_EP_HALT_SET) {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
	}
}
    eb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (ctrl == USB_EP_HALT_SET) {
    eb4e:	2901      	cmp	r1, #1
}
    eb50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb54:	4b04      	ldr	r3, [pc, #16]	; (eb68 <usb_d_ep_halt+0x5c>)
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
    eb56:	bf18      	it	ne
    eb58:	2102      	movne	r1, #2
    eb5a:	4718      	bx	r3
		return -USB_ERR_PARAM;
    eb5c:	f06f 0011 	mvn.w	r0, #17
    eb60:	e7f3      	b.n	eb4a <usb_d_ep_halt+0x3e>
    eb62:	bf00      	nop
    eb64:	0000e695 	.word	0x0000e695
    eb68:	0000ce05 	.word	0x0000ce05
    eb6c:	20000e14 	.word	0x20000e14

0000eb70 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
    eb70:	b538      	push	{r3, r4, r5, lr}
	int8_t           ep_index = _usb_d_find_ep(ep);
    eb72:	4b0d      	ldr	r3, [pc, #52]	; (eba8 <usb_d_ep_register_callback+0x38>)
{
    eb74:	460d      	mov	r5, r1
    eb76:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
    eb78:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;

	f = (FUNC_PTR)func; // SUKU EDIT

	if (ep_index < 0) {
    eb7a:	2800      	cmp	r0, #0
    eb7c:	db08      	blt.n	eb90 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
    eb7e:	2d01      	cmp	r5, #1
    eb80:	d007      	beq.n	eb92 <usb_d_ep_register_callback+0x22>
    eb82:	2d02      	cmp	r5, #2
    eb84:	d00a      	beq.n	eb9c <usb_d_ep_register_callback+0x2c>
    eb86:	b91d      	cbnz	r5, eb90 <usb_d_ep_register_callback+0x20>
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
    eb88:	4b08      	ldr	r3, [pc, #32]	; (ebac <usb_d_ep_register_callback+0x3c>)
    eb8a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    eb8e:	6144      	str	r4, [r0, #20]
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
    eb90:	bd38      	pop	{r3, r4, r5, pc}
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
    eb92:	4b06      	ldr	r3, [pc, #24]	; (ebac <usb_d_ep_register_callback+0x3c>)
    eb94:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    eb98:	6184      	str	r4, [r0, #24]
		break;
    eb9a:	e7f9      	b.n	eb90 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
    eb9c:	4b03      	ldr	r3, [pc, #12]	; (ebac <usb_d_ep_register_callback+0x3c>)
    eb9e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    eba2:	61c4      	str	r4, [r0, #28]
		break;
    eba4:	e7f4      	b.n	eb90 <usb_d_ep_register_callback+0x20>
    eba6:	bf00      	nop
    eba8:	0000e695 	.word	0x0000e695
    ebac:	20000e14 	.word	0x20000e14

0000ebb0 <RTC_Scheduler_ping_cb>:
static struct timer_task RTC_Scheduler_heartbeat;

void RTC_Scheduler_ping_cb(const struct timer_task *const timer_task)
{

	pingflag++;
    ebb0:	4a0d      	ldr	r2, [pc, #52]	; (ebe8 <RTC_Scheduler_ping_cb+0x38>)
    ebb2:	7813      	ldrb	r3, [r2, #0]
    ebb4:	3301      	adds	r3, #1
    ebb6:	b2db      	uxtb	r3, r3
    ebb8:	7013      	strb	r3, [r2, #0]
	
	switch (pingflag%4)
    ebba:	7813      	ldrb	r3, [r2, #0]
    ebbc:	f003 0303 	and.w	r3, r3, #3
    ebc0:	2b02      	cmp	r3, #2
    ebc2:	f642 7248 	movw	r2, #12104	; 0x2f48
    ebc6:	d00a      	beq.n	ebde <RTC_Scheduler_ping_cb+0x2e>
    ebc8:	2b03      	cmp	r3, #3
    ebca:	d00a      	beq.n	ebe2 <RTC_Scheduler_ping_cb+0x32>
    ebcc:	2b01      	cmp	r3, #1
    ebce:	d003      	beq.n	ebd8 <RTC_Scheduler_ping_cb+0x28>
	{
		case 0:
			GRID_PORT_N.ping_flag = 1;
    ebd0:	4b06      	ldr	r3, [pc, #24]	; (ebec <RTC_Scheduler_ping_cb+0x3c>)
			break;
		case 2:
			GRID_PORT_S.ping_flag = 1;
			break;
		case 3:
			GRID_PORT_W.ping_flag = 1;
    ebd2:	2101      	movs	r1, #1
    ebd4:	5499      	strb	r1, [r3, r2]
			break;
	}
	
}
    ebd6:	4770      	bx	lr
			GRID_PORT_E.ping_flag = 1;
    ebd8:	4905      	ldr	r1, [pc, #20]	; (ebf0 <RTC_Scheduler_ping_cb+0x40>)
    ebda:	548b      	strb	r3, [r1, r2]
			break;
    ebdc:	4770      	bx	lr
			GRID_PORT_S.ping_flag = 1;
    ebde:	4b05      	ldr	r3, [pc, #20]	; (ebf4 <RTC_Scheduler_ping_cb+0x44>)
    ebe0:	e7f7      	b.n	ebd2 <RTC_Scheduler_ping_cb+0x22>
			GRID_PORT_W.ping_flag = 1;
    ebe2:	4b05      	ldr	r3, [pc, #20]	; (ebf8 <RTC_Scheduler_ping_cb+0x48>)
    ebe4:	e7f5      	b.n	ebd2 <RTC_Scheduler_ping_cb+0x22>
    ebe6:	bf00      	nop
    ebe8:	20000fb4 	.word	0x20000fb4
    ebec:	200010ec 	.word	0x200010ec
    ebf0:	200116d8 	.word	0x200116d8
    ebf4:	2000b73c 	.word	0x2000b73c
    ebf8:	20008270 	.word	0x20008270

0000ebfc <RTC_Scheduler_report_cb>:
}

volatile uint8_t scheduler_report_flag = 0;
static void RTC_Scheduler_report_cb(const struct timer_task *const timer_task)
{
	scheduler_report_flag = 1;
    ebfc:	4b01      	ldr	r3, [pc, #4]	; (ec04 <RTC_Scheduler_report_cb+0x8>)
    ebfe:	2201      	movs	r2, #1
    ec00:	705a      	strb	r2, [r3, #1]
	
}
    ec02:	4770      	bx	lr
    ec04:	20000fb4 	.word	0x20000fb4

0000ec08 <RTC_Scheduler_heartbeat_cb>:
{
    ec08:	b410      	push	{r4}
	grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    ec0a:	4c04      	ldr	r4, [pc, #16]	; (ec1c <RTC_Scheduler_heartbeat_cb+0x14>)
    ec0c:	4804      	ldr	r0, [pc, #16]	; (ec20 <RTC_Scheduler_heartbeat_cb+0x18>)
    ec0e:	2200      	movs	r2, #0
    ec10:	46a4      	mov	ip, r4
    ec12:	230c      	movs	r3, #12
}
    ec14:	f85d 4b04 	ldr.w	r4, [sp], #4
	grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_HEARTBEAT);
    ec18:	4611      	mov	r1, r2
    ec1a:	4760      	bx	ip
    ec1c:	0000aabd 	.word	0x0000aabd
    ec20:	20014628 	.word	0x20014628

0000ec24 <RTC_Scheduler_realtime_cb>:
{
    ec24:	b537      	push	{r0, r1, r2, r4, r5, lr}
	grid_sys_rtc_tick_time(&grid_sys_state);	
    ec26:	4d16      	ldr	r5, [pc, #88]	; (ec80 <RTC_Scheduler_realtime_cb+0x5c>)
    ec28:	4b16      	ldr	r3, [pc, #88]	; (ec84 <RTC_Scheduler_realtime_cb+0x60>)
    ec2a:	4628      	mov	r0, r5
    ec2c:	4798      	blx	r3
	grid_task_timer_tick(&grid_task_state);
    ec2e:	4816      	ldr	r0, [pc, #88]	; (ec88 <RTC_Scheduler_realtime_cb+0x64>)
    ec30:	4b16      	ldr	r3, [pc, #88]	; (ec8c <RTC_Scheduler_realtime_cb+0x68>)
    ec32:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    ec34:	4b16      	ldr	r3, [pc, #88]	; (ec90 <RTC_Scheduler_realtime_cb+0x6c>)
    ec36:	a801      	add	r0, sp, #4
    ec38:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    ec3a:	4a16      	ldr	r2, [pc, #88]	; (ec94 <RTC_Scheduler_realtime_cb+0x70>)
    ec3c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    ec40:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    ec44:	f8d2 4110 	ldr.w	r4, [r2, #272]	; 0x110
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    ec48:	405c      	eors	r4, r3
    ec4a:	400c      	ands	r4, r1
    ec4c:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    ec4e:	a801      	add	r0, sp, #4
    ec50:	4b11      	ldr	r3, [pc, #68]	; (ec98 <RTC_Scheduler_realtime_cb+0x74>)
    ec52:	4798      	blx	r3
	if (mapmode_value != grid_sys_state.mapmodestate){
    ec54:	7c2a      	ldrb	r2, [r5, #16]
	uint8_t mapmode_value = !gpio_get_pin_level(MAP_MODE);
    ec56:	f484 6300 	eor.w	r3, r4, #2048	; 0x800
    ec5a:	f3c3 23c0 	ubfx	r3, r3, #11, #1
	if (mapmode_value != grid_sys_state.mapmodestate){
    ec5e:	429a      	cmp	r2, r3
    ec60:	d009      	beq.n	ec76 <RTC_Scheduler_realtime_cb+0x52>
		grid_sys_state.mapmodestate = mapmode_value;
    ec62:	742b      	strb	r3, [r5, #16]
		if (grid_sys_state.mapmodestate == 0){ // RELEASE
    ec64:	7c2b      	ldrb	r3, [r5, #16]
    ec66:	4c0d      	ldr	r4, [pc, #52]	; (ec9c <RTC_Scheduler_realtime_cb+0x78>)
    ec68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    ec6c:	b92b      	cbnz	r3, ec7a <RTC_Scheduler_realtime_cb+0x56>
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_RELEASE);
    ec6e:	2308      	movs	r3, #8
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_PRESS);		
    ec70:	480b      	ldr	r0, [pc, #44]	; (eca0 <RTC_Scheduler_realtime_cb+0x7c>)
    ec72:	4611      	mov	r1, r2
    ec74:	47a0      	blx	r4
}
    ec76:	b003      	add	sp, #12
    ec78:	bd30      	pop	{r4, r5, pc}
			grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_MAPMODE_PRESS);		
    ec7a:	2307      	movs	r3, #7
    ec7c:	2200      	movs	r2, #0
    ec7e:	e7f7      	b.n	ec70 <RTC_Scheduler_realtime_cb+0x4c>
    ec80:	20006fa4 	.word	0x20006fa4
    ec84:	0000974b 	.word	0x0000974b
    ec88:	2000824c 	.word	0x2000824c
    ec8c:	00008d03 	.word	0x00008d03
    ec90:	00011679 	.word	0x00011679
    ec94:	41008000 	.word	0x41008000
    ec98:	00011687 	.word	0x00011687
    ec9c:	0000aabd 	.word	0x0000aabd
    eca0:	20014628 	.word	0x20014628

0000eca4 <init_timer>:



void init_timer(void)
{
    eca4:	b570      	push	{r4, r5, r6, lr}
	
		
	//RTC_Scheduler_ping.interval = RTC1SEC/20; //50ms
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    eca6:	4c18      	ldr	r4, [pc, #96]	; (ed08 <init_timer+0x64>)
	
	RTC_Scheduler_realtime.interval = 1;
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    eca8:	4d18      	ldr	r5, [pc, #96]	; (ed0c <init_timer+0x68>)
    ecaa:	4e19      	ldr	r6, [pc, #100]	; (ed10 <init_timer+0x6c>)
	RTC_Scheduler_heartbeat.interval = RTC1MS*GRID_PARAMETER_HEARTBEAT_interval;
    ecac:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    ecb0:	6222      	str	r2, [r4, #32]
	RTC_Scheduler_heartbeat.cb       = RTC_Scheduler_heartbeat_cb;
    ecb2:	4a18      	ldr	r2, [pc, #96]	; (ed14 <init_timer+0x70>)
    ecb4:	6262      	str	r2, [r4, #36]	; 0x24
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    ecb6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
	RTC_Scheduler_report.interval = RTC1SEC/10;
    ecba:	f240 6266 	movw	r2, #1638	; 0x666
	RTC_Scheduler_ping.interval = RTC1MS*GRID_PARAMETER_PING_interval;
    ecbe:	60e3      	str	r3, [r4, #12]
	RTC_Scheduler_report.interval = RTC1SEC/10;
    ecc0:	6362      	str	r2, [r4, #52]	; 0x34
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    ecc2:	4b15      	ldr	r3, [pc, #84]	; (ed18 <init_timer+0x74>)
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    ecc4:	4a15      	ldr	r2, [pc, #84]	; (ed1c <init_timer+0x78>)
	RTC_Scheduler_ping.cb       = RTC_Scheduler_ping_cb;
    ecc6:	6123      	str	r3, [r4, #16]
	RTC_Scheduler_report.cb       = RTC_Scheduler_report_cb;
    ecc8:	63a2      	str	r2, [r4, #56]	; 0x38
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    ecca:	2301      	movs	r3, #1
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    eccc:	4a14      	ldr	r2, [pc, #80]	; (ed20 <init_timer+0x7c>)
	RTC_Scheduler_ping.mode     = TIMER_TASK_REPEAT;
    ecce:	7523      	strb	r3, [r4, #20]
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    ecd0:	1d21      	adds	r1, r4, #4
    ecd2:	4628      	mov	r0, r5
	RTC_Scheduler_heartbeat.mode     = TIMER_TASK_REPEAT;
    ecd4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	RTC_Scheduler_report.mode     = TIMER_TASK_REPEAT;
    ecd8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	RTC_Scheduler_realtime.interval = 1;
    ecdc:	64a3      	str	r3, [r4, #72]	; 0x48
	RTC_Scheduler_realtime.mode     = TIMER_TASK_REPEAT;
    ecde:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	RTC_Scheduler_realtime.cb       = RTC_Scheduler_realtime_cb;
    ece2:	64e2      	str	r2, [r4, #76]	; 0x4c
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_ping);
    ece4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_heartbeat);
    ece6:	f104 0118 	add.w	r1, r4, #24
    ecea:	4628      	mov	r0, r5
    ecec:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_report);
    ecee:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    ecf2:	4628      	mov	r0, r5
    ecf4:	47b0      	blx	r6
	timer_add_task(&RTC_Scheduler, &RTC_Scheduler_realtime);
    ecf6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    ecfa:	4628      	mov	r0, r5
    ecfc:	47b0      	blx	r6
	
	timer_start(&RTC_Scheduler);
    ecfe:	4628      	mov	r0, r5
    ed00:	4b08      	ldr	r3, [pc, #32]	; (ed24 <init_timer+0x80>)
	
}
    ed02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	timer_start(&RTC_Scheduler);
    ed06:	4718      	bx	r3
    ed08:	20000fb4 	.word	0x20000fb4
    ed0c:	20014b18 	.word	0x20014b18
    ed10:	0000c19d 	.word	0x0000c19d
    ed14:	0000ec09 	.word	0x0000ec09
    ed18:	0000ebb1 	.word	0x0000ebb1
    ed1c:	0000ebfd 	.word	0x0000ebfd
    ed20:	0000ec25 	.word	0x0000ec25
    ed24:	0000c15d 	.word	0x0000c15d

0000ed28 <main>:

//====================== USB TEST =====================//

int main(void)
{
    ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed2c:	ed2d 8b02 	vpush	{d8}

	


	atmel_start_init();	
    ed30:	4b98      	ldr	r3, [pc, #608]	; (ef94 <main+0x26c>)
    
            
            
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    ed32:	4d99      	ldr	r5, [pc, #612]	; (ef98 <main+0x270>)
{
    ed34:	b099      	sub	sp, #100	; 0x64
	atmel_start_init();	
    ed36:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "Start Initialized");
    ed38:	4998      	ldr	r1, [pc, #608]	; (ef9c <main+0x274>)
    ed3a:	4899      	ldr	r0, [pc, #612]	; (efa0 <main+0x278>)
    ed3c:	47a8      	blx	r5

	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_PORT, "D51 Init");
    ed3e:	4999      	ldr	r1, [pc, #612]	; (efa4 <main+0x27c>)
    ed40:	4897      	ldr	r0, [pc, #604]	; (efa0 <main+0x278>)
    ed42:	47a8      	blx	r5
	grid_d51_init(); // Check User Row
    ed44:	4b98      	ldr	r3, [pc, #608]	; (efa8 <main+0x280>)
    ed46:	4798      	blx	r3


	#include "usb/class/midi/device/audiodf_midi.h"
	audiodf_midi_init();
    ed48:	4b98      	ldr	r3, [pc, #608]	; (efac <main+0x284>)
    ed4a:	4798      	blx	r3

	composite_device_start();
    ed4c:	4b98      	ldr	r3, [pc, #608]	; (efb0 <main+0x288>)
    ed4e:	4798      	blx	r3


	grid_usb_serial_init();
    ed50:	4b98      	ldr	r3, [pc, #608]	; (efb4 <main+0x28c>)
    ed52:	4798      	blx	r3
	//grid_usb_midi_init();
	grid_usb_midi_init();
    ed54:	4b98      	ldr	r3, [pc, #608]	; (efb8 <main+0x290>)
    ed56:	4798      	blx	r3

	grid_keyboard_init(&grid_keyboard_state);
    ed58:	4b98      	ldr	r3, [pc, #608]	; (efbc <main+0x294>)
    ed5a:	4899      	ldr	r0, [pc, #612]	; (efc0 <main+0x298>)
    ed5c:	4798      	blx	r3
		
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Initialized");
    ed5e:	4999      	ldr	r1, [pc, #612]	; (efc4 <main+0x29c>)
    ed60:	488f      	ldr	r0, [pc, #572]	; (efa0 <main+0x278>)
    ed62:	47a8      	blx	r5
		
		
	rand_sync_enable(&RAND_0);	
    ed64:	4b98      	ldr	r3, [pc, #608]	; (efc8 <main+0x2a0>)
    ed66:	4899      	ldr	r0, [pc, #612]	; (efcc <main+0x2a4>)
    ed68:	4798      	blx	r3
		
	grid_expr_init(&grid_expr_state);
    ed6a:	4b99      	ldr	r3, [pc, #612]	; (efd0 <main+0x2a8>)
    ed6c:	4899      	ldr	r0, [pc, #612]	; (efd4 <main+0x2ac>)
    ed6e:	4798      	blx	r3

	uint8_t test_string[] = "print(2*add(3+4+5+6,10),4)";
    ed70:	4b99      	ldr	r3, [pc, #612]	; (efd8 <main+0x2b0>)
    ed72:	aa09      	add	r2, sp, #36	; 0x24
    ed74:	f103 0718 	add.w	r7, r3, #24
    ed78:	4616      	mov	r6, r2
    ed7a:	6818      	ldr	r0, [r3, #0]
    ed7c:	6859      	ldr	r1, [r3, #4]
    ed7e:	4614      	mov	r4, r2
    ed80:	c403      	stmia	r4!, {r0, r1}
    ed82:	3308      	adds	r3, #8
    ed84:	42bb      	cmp	r3, r7
    ed86:	4622      	mov	r2, r4
    ed88:	d1f7      	bne.n	ed7a <main+0x52>
    ed8a:	8819      	ldrh	r1, [r3, #0]
    ed8c:	789b      	ldrb	r3, [r3, #2]
    ed8e:	8021      	strh	r1, [r4, #0]
    ed90:	70a3      	strb	r3, [r4, #2]

	grid_expr_evaluate(&grid_expr_state, test_string, strlen(test_string));
    ed92:	4630      	mov	r0, r6
    ed94:	4b91      	ldr	r3, [pc, #580]	; (efdc <main+0x2b4>)
			if (usb_d_get_frame_num() == 0){
				
			}
			else{			
			
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN	
    ed96:	4c92      	ldr	r4, [pc, #584]	; (efe0 <main+0x2b8>)
				
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
				
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    ed98:	ed9f 8a92 	vldr	s16, [pc, #584]	; efe4 <main+0x2bc>
	grid_expr_evaluate(&grid_expr_state, test_string, strlen(test_string));
    ed9c:	4798      	blx	r3
    ed9e:	4631      	mov	r1, r6
    eda0:	b2c2      	uxtb	r2, r0
    eda2:	4b91      	ldr	r3, [pc, #580]	; (efe8 <main+0x2c0>)
    eda4:	488b      	ldr	r0, [pc, #556]	; (efd4 <main+0x2ac>)
    eda6:	4798      	blx	r3
	grid_module_common_init();
    eda8:	4b90      	ldr	r3, [pc, #576]	; (efec <main+0x2c4>)
    edaa:	4798      	blx	r3
    grid_ui_reinit(&grid_ui_state);
    edac:	4b90      	ldr	r3, [pc, #576]	; (eff0 <main+0x2c8>)
    edae:	4891      	ldr	r0, [pc, #580]	; (eff4 <main+0x2cc>)
    edb0:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Grid Module Initialized");
    edb2:	4991      	ldr	r1, [pc, #580]	; (eff8 <main+0x2d0>)
    edb4:	487a      	ldr	r0, [pc, #488]	; (efa0 <main+0x278>)
    edb6:	47a8      	blx	r5
	init_timer();
    edb8:	4b90      	ldr	r3, [pc, #576]	; (effc <main+0x2d4>)
    edba:	4798      	blx	r3
	GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Entering Main Loop");
    edbc:	4990      	ldr	r1, [pc, #576]	; (f000 <main+0x2d8>)
    edbe:	4878      	ldr	r0, [pc, #480]	; (efa0 <main+0x278>)
    edc0:	47a8      	blx	r5
	grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    edc2:	4990      	ldr	r1, [pc, #576]	; (f004 <main+0x2dc>)
    edc4:	4886      	ldr	r0, [pc, #536]	; (efe0 <main+0x2b8>)
    edc6:	4b90      	ldr	r3, [pc, #576]	; (f008 <main+0x2e0>)
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    edc8:	4d90      	ldr	r5, [pc, #576]	; (f00c <main+0x2e4>)
	grid_sys_nvm_load_configuration(&grid_sys_state, &grid_nvm_state);
    edca:	4798      	blx	r3
	uint8_t usb_init_flag = 0;	
    edcc:	f04f 0b00 	mov.w	fp, #0
	grid_ui_nvm_load_all_configuration(&grid_ui_state, &grid_nvm_state);	
    edd0:	498c      	ldr	r1, [pc, #560]	; (f004 <main+0x2dc>)
    edd2:	4888      	ldr	r0, [pc, #544]	; (eff4 <main+0x2cc>)
    edd4:	4b8e      	ldr	r3, [pc, #568]	; (f010 <main+0x2e8>)
    edd6:	4798      	blx	r3
	uint32_t loopwarp = 0;
    edd8:	46da      	mov	sl, fp
	uint32_t loopcounter = 0;
    edda:	f8cd b00c 	str.w	fp, [sp, #12]
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);
    edde:	4f8d      	ldr	r7, [pc, #564]	; (f014 <main+0x2ec>)
    ede0:	2101      	movs	r1, #1
    ede2:	4628      	mov	r0, r5
    ede4:	47b8      	blx	r7
		if (usb_init_flag == 0){
    ede6:	46b8      	mov	r8, r7
    ede8:	f1bb 0f00 	cmp.w	fp, #0
    edec:	d11f      	bne.n	ee2e <main+0x106>
			if (usb_d_get_frame_num() == 0){
    edee:	4b8a      	ldr	r3, [pc, #552]	; (f018 <main+0x2f0>)
    edf0:	4798      	blx	r3
    edf2:	b1e0      	cbz	r0, ee2e <main+0x106>
				grid_sys_alert_set_alert(&grid_sys_state, 0, 255, 0, 0, 500); // GREEN	
    edf4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    edf8:	22ff      	movs	r2, #255	; 0xff
    edfa:	e9cd b300 	strd	fp, r3, [sp]
    edfe:	4659      	mov	r1, fp
    ee00:	465b      	mov	r3, fp
    ee02:	4f86      	ldr	r7, [pc, #536]	; (f01c <main+0x2f4>)
    ee04:	4620      	mov	r0, r4
    ee06:	47b8      	blx	r7
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    ee08:	4985      	ldr	r1, [pc, #532]	; (f020 <main+0x2f8>)
    ee0a:	4b63      	ldr	r3, [pc, #396]	; (ef98 <main+0x270>)
    ee0c:	4864      	ldr	r0, [pc, #400]	; (efa0 <main+0x278>)
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    ee0e:	4f85      	ldr	r7, [pc, #532]	; (f024 <main+0x2fc>)
				GRID_DEBUG_LOG(GRID_DEBUG_CONTEXT_BOOT, "Composite Device Connected");
    ee10:	4798      	blx	r3
				grid_sys_set_bank(&grid_sys_state, grid_sys_get_bank_number_of_first_valid(&grid_sys_state));
    ee12:	4b85      	ldr	r3, [pc, #532]	; (f028 <main+0x300>)
    ee14:	4620      	mov	r0, r4
    ee16:	4798      	blx	r3
    ee18:	4b84      	ldr	r3, [pc, #528]	; (f02c <main+0x304>)
    ee1a:	4601      	mov	r1, r0
    ee1c:	4620      	mov	r0, r4
    ee1e:	4798      	blx	r3
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_RESPONSE);
    ee20:	465a      	mov	r2, fp
    ee22:	4659      	mov	r1, fp
    ee24:	4882      	ldr	r0, [pc, #520]	; (f030 <main+0x308>)
    ee26:	2309      	movs	r3, #9
    ee28:	47b8      	blx	r7
				usb_init_flag = 1;
    ee2a:	f04f 0b01 	mov.w	fp, #1
 		if (grid_sys_get_bank_valid(&grid_sys_state) == 0 && loopcounter%80 == 0){
    ee2e:	486c      	ldr	r0, [pc, #432]	; (efe0 <main+0x2b8>)
    ee30:	4b80      	ldr	r3, [pc, #512]	; (f034 <main+0x30c>)
    ee32:	4798      	blx	r3
    ee34:	b988      	cbnz	r0, ee5a <main+0x132>
    ee36:	9903      	ldr	r1, [sp, #12]
    ee38:	9b03      	ldr	r3, [sp, #12]
    ee3a:	2250      	movs	r2, #80	; 0x50
    ee3c:	fbb3 f3f2 	udiv	r3, r3, r2
    ee40:	fb02 1313 	mls	r3, r2, r3, r1
    ee44:	b94b      	cbnz	r3, ee5a <main+0x132>
			if (grid_sys_state.bank_init_flag == 0)	{
    ee46:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    ee4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    ee4e:	b923      	cbnz	r3, ee5a <main+0x132>
				grid_ui_smart_trigger(&grid_core_state, 0, 0, GRID_UI_EVENT_CFG_REQUEST);
    ee50:	4877      	ldr	r0, [pc, #476]	; (f030 <main+0x308>)
    ee52:	4f74      	ldr	r7, [pc, #464]	; (f024 <main+0x2fc>)
    ee54:	230a      	movs	r3, #10
    ee56:	4611      	mov	r1, r2
    ee58:	47b8      	blx	r7
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    ee5a:	4b77      	ldr	r3, [pc, #476]	; (f038 <main+0x310>)
		if (scheduler_report_flag){
    ee5c:	4f77      	ldr	r7, [pc, #476]	; (f03c <main+0x314>)
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    ee5e:	4620      	mov	r0, r4
    ee60:	4798      	blx	r3
		if (scheduler_report_flag){
    ee62:	787b      	ldrb	r3, [r7, #1]
		loopstart = grid_sys_rtc_get_time(&grid_sys_state);
    ee64:	9004      	str	r0, [sp, #16]
		if (scheduler_report_flag){
    ee66:	46b9      	mov	r9, r7
    ee68:	2b00      	cmp	r3, #0
    ee6a:	f040 8180 	bne.w	f16e <main+0x446>
		loopcounter++;
    ee6e:	9b03      	ldr	r3, [sp, #12]
    ee70:	3301      	adds	r3, #1
    ee72:	9303      	str	r3, [sp, #12]
		grid_task_enter_task(&grid_task_state, GRID_TASK_RECEIVE);
    ee74:	2102      	movs	r1, #2
    ee76:	4628      	mov	r0, r5
    ee78:	47c0      	blx	r8
		grid_keyboard_tx_pop();
    ee7a:	4b71      	ldr	r3, [pc, #452]	; (f040 <main+0x318>)
    ee7c:	4798      	blx	r3
		grid_midi_tx_pop();        
    ee7e:	4b71      	ldr	r3, [pc, #452]	; (f044 <main+0x31c>)
    ee80:	4798      	blx	r3
		audiodf_midi_read(midi_rx_buffer,16);
    ee82:	4b71      	ldr	r3, [pc, #452]	; (f048 <main+0x320>)
    ee84:	4871      	ldr	r0, [pc, #452]	; (f04c <main+0x324>)
    ee86:	2110      	movs	r1, #16
    ee88:	4798      	blx	r3
    ee8a:	2200      	movs	r2, #0
		uint8_t found = 0;
    ee8c:	4613      	mov	r3, r2
			if (midi_rx_buffer[i]){
    ee8e:	eb09 0102 	add.w	r1, r9, r2
    ee92:	f891 1054 	ldrb.w	r1, [r1, #84]	; 0x54
    ee96:	b109      	cbz	r1, ee9c <main+0x174>
				found++;
    ee98:	3301      	adds	r3, #1
    ee9a:	b2db      	uxtb	r3, r3
		for (uint8_t i=0; i<16; i++){
    ee9c:	3201      	adds	r2, #1
    ee9e:	2a10      	cmp	r2, #16
    eea0:	d1f5      	bne.n	ee8e <main+0x166>
		if (found){
    eea2:	b36b      	cbz	r3, ef00 <main+0x1d8>
			printf("MIDI: %02x %02x %02x %02x\n", midi_rx_buffer[0],midi_rx_buffer[1],midi_rx_buffer[2],midi_rx_buffer[3]);
    eea4:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
    eea8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
    eeac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
    eeb0:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
    eeb4:	9000      	str	r0, [sp, #0]
    eeb6:	4e38      	ldr	r6, [pc, #224]	; (ef98 <main+0x270>)
    eeb8:	4865      	ldr	r0, [pc, #404]	; (f050 <main+0x328>)
    eeba:	47b0      	blx	r6
			uint8_t message[30] = {0};
    eebc:	2300      	movs	r3, #0
    eebe:	4619      	mov	r1, r3
    eec0:	9310      	str	r3, [sp, #64]	; 0x40
    eec2:	221a      	movs	r2, #26
    eec4:	4b63      	ldr	r3, [pc, #396]	; (f054 <main+0x32c>)
    eec6:	a811      	add	r0, sp, #68	; 0x44
    eec8:	4798      	blx	r3
			sprintf(message, "MIDI: %02x %02x %02x %02x\n", midi_rx_buffer[0],midi_rx_buffer[1],midi_rx_buffer[2],midi_rx_buffer[3]);
    eeca:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
    eece:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
    eed2:	f897 1056 	ldrb.w	r1, [r7, #86]	; 0x56
    eed6:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
    eeda:	4f5f      	ldr	r7, [pc, #380]	; (f058 <main+0x330>)
    eedc:	e9cd 1000 	strd	r1, r0, [sp]
    eee0:	495b      	ldr	r1, [pc, #364]	; (f050 <main+0x328>)
    eee2:	a810      	add	r0, sp, #64	; 0x40
    eee4:	47b8      	blx	r7
			grid_debug_print_text(message);
    eee6:	4b5d      	ldr	r3, [pc, #372]	; (f05c <main+0x334>)
    eee8:	a810      	add	r0, sp, #64	; 0x40
    eeea:	4798      	blx	r3
    eeec:	2300      	movs	r3, #0
				midi_rx_buffer[i] = 0;
    eeee:	eb09 0203 	add.w	r2, r9, r3
    eef2:	3301      	adds	r3, #1
    eef4:	f04f 0100 	mov.w	r1, #0
			for (uint8_t i=0; i<16; i++){
    eef8:	2b10      	cmp	r3, #16
				midi_rx_buffer[i] = 0;
    eefa:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
			for (uint8_t i=0; i<16; i++){
    eefe:	d1f6      	bne.n	eeee <main+0x1c6>
		cdcdf_acm_read(GRID_PORT_H.rx_double_buffer, CONF_USB_COMPOSITE_CDC_ACM_DATA_BULKIN_MAXPKSZ_HS);			
    ef00:	4b57      	ldr	r3, [pc, #348]	; (f060 <main+0x338>)
    ef02:	4858      	ldr	r0, [pc, #352]	; (f064 <main+0x33c>)
    ef04:	f44f 7100 	mov.w	r1, #512	; 0x200
    ef08:	4798      	blx	r3
		uint16_t usblength = strlen(GRID_PORT_H.rx_double_buffer);
    ef0a:	4856      	ldr	r0, [pc, #344]	; (f064 <main+0x33c>)
    ef0c:	4b33      	ldr	r3, [pc, #204]	; (efdc <main+0x2b4>)
    ef0e:	4798      	blx	r3
		if (usblength){	
    ef10:	4681      	mov	r9, r0
    ef12:	b198      	cbz	r0, ef3c <main+0x214>
			GRID_PORT_H.rx_double_buffer_status = 1;			
    ef14:	4f54      	ldr	r7, [pc, #336]	; (f068 <main+0x340>)
    ef16:	2301      	movs	r3, #1
    ef18:	623b      	str	r3, [r7, #32]
			GRID_PORT_H.rx_double_buffer_read_start_index = 0;
    ef1a:	2300      	movs	r3, #0
    ef1c:	62bb      	str	r3, [r7, #40]	; 0x28
			GRID_PORT_H.rx_double_buffer_seek_start_index = usblength-3; //-3
    ef1e:	1ec3      	subs	r3, r0, #3
    ef20:	627b      	str	r3, [r7, #36]	; 0x24
			grid_port_receive_task(&GRID_PORT_H);
    ef22:	4638      	mov	r0, r7
    ef24:	4b51      	ldr	r3, [pc, #324]	; (f06c <main+0x344>)
    ef26:	4798      	blx	r3
			for(uint32_t i=0; i<usblength; i++){
    ef28:	2300      	movs	r3, #0
				GRID_PORT_H.rx_double_buffer[i] = 0;
    ef2a:	f241 32b4 	movw	r2, #5044	; 0x13b4
    ef2e:	18f9      	adds	r1, r7, r3
			for(uint32_t i=0; i<usblength; i++){
    ef30:	3301      	adds	r3, #1
				GRID_PORT_H.rx_double_buffer[i] = 0;
    ef32:	f04f 0000 	mov.w	r0, #0
			for(uint32_t i=0; i<usblength; i++){
    ef36:	4599      	cmp	r9, r3
				GRID_PORT_H.rx_double_buffer[i] = 0;
    ef38:	5488      	strb	r0, [r1, r2]
			for(uint32_t i=0; i<usblength; i++){
    ef3a:	d1f8      	bne.n	ef2e <main+0x206>
		if (GRID_PORT_U.rx_double_buffer_status == 0){
    ef3c:	4b4c      	ldr	r3, [pc, #304]	; (f070 <main+0x348>)
    ef3e:	6a1b      	ldr	r3, [r3, #32]
    ef40:	b943      	cbnz	r3, ef54 <main+0x22c>
			if (grid_nvm_ui_bulk_read_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    ef42:	492c      	ldr	r1, [pc, #176]	; (eff4 <main+0x2cc>)
    ef44:	482f      	ldr	r0, [pc, #188]	; (f004 <main+0x2dc>)
    ef46:	4b4b      	ldr	r3, [pc, #300]	; (f074 <main+0x34c>)
    ef48:	4798      	blx	r3
    ef4a:	b118      	cbz	r0, ef54 <main+0x22c>
				grid_nvm_ui_bulk_read_next(&grid_nvm_state, &grid_ui_state);
    ef4c:	4929      	ldr	r1, [pc, #164]	; (eff4 <main+0x2cc>)
    ef4e:	482d      	ldr	r0, [pc, #180]	; (f004 <main+0x2dc>)
    ef50:	4b49      	ldr	r3, [pc, #292]	; (f078 <main+0x350>)
    ef52:	4798      	blx	r3
		if (grid_nvm_ui_bulk_clear_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    ef54:	4927      	ldr	r1, [pc, #156]	; (eff4 <main+0x2cc>)
    ef56:	482b      	ldr	r0, [pc, #172]	; (f004 <main+0x2dc>)
    ef58:	4b48      	ldr	r3, [pc, #288]	; (f07c <main+0x354>)
    ef5a:	4798      	blx	r3
    ef5c:	b118      	cbz	r0, ef66 <main+0x23e>
			grid_nvm_ui_bulk_clear_next(&grid_nvm_state, &grid_ui_state);
    ef5e:	4925      	ldr	r1, [pc, #148]	; (eff4 <main+0x2cc>)
    ef60:	4828      	ldr	r0, [pc, #160]	; (f004 <main+0x2dc>)
    ef62:	4b47      	ldr	r3, [pc, #284]	; (f080 <main+0x358>)
    ef64:	4798      	blx	r3
		if (grid_nvm_ui_bulk_store_is_in_progress(&grid_nvm_state, &grid_ui_state)){
    ef66:	4923      	ldr	r1, [pc, #140]	; (eff4 <main+0x2cc>)
    ef68:	4826      	ldr	r0, [pc, #152]	; (f004 <main+0x2dc>)
    ef6a:	4b46      	ldr	r3, [pc, #280]	; (f084 <main+0x35c>)
    ef6c:	4798      	blx	r3
    ef6e:	b118      	cbz	r0, ef78 <main+0x250>
			grid_nvm_ui_bulk_store_next(&grid_nvm_state, &grid_ui_state);
    ef70:	4920      	ldr	r1, [pc, #128]	; (eff4 <main+0x2cc>)
    ef72:	4824      	ldr	r0, [pc, #144]	; (f004 <main+0x2dc>)
    ef74:	4b44      	ldr	r3, [pc, #272]	; (f088 <main+0x360>)
    ef76:	4798      	blx	r3
		uint32_t nvmlength = GRID_PORT_U.rx_double_buffer_status;
    ef78:	4b3d      	ldr	r3, [pc, #244]	; (f070 <main+0x348>)
    ef7a:	6a1b      	ldr	r3, [r3, #32]
		if (nvmlength){
    ef7c:	2b00      	cmp	r3, #0
    ef7e:	f000 8089 	beq.w	f094 <main+0x36c>
			GRID_PORT_U.rx_double_buffer_status = 1;
    ef82:	493b      	ldr	r1, [pc, #236]	; (f070 <main+0x348>)
    ef84:	2201      	movs	r2, #1
    ef86:	620a      	str	r2, [r1, #32]
			GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    ef88:	460a      	mov	r2, r1
			GRID_PORT_U.rx_double_buffer_seek_start_index = nvmlength-1; //-3
    ef8a:	3b01      	subs	r3, #1
			GRID_PORT_U.rx_double_buffer_read_start_index = 0;
    ef8c:	2100      	movs	r1, #0
    ef8e:	6291      	str	r1, [r2, #40]	; 0x28
    ef90:	e07c      	b.n	f08c <main+0x364>
    ef92:	bf00      	nop
    ef94:	00011aa1 	.word	0x00011aa1
    ef98:	00013049 	.word	0x00013049
    ef9c:	00015f74 	.word	0x00015f74
    efa0:	000155e3 	.word	0x000155e3
    efa4:	00015f86 	.word	0x00015f86
    efa8:	00006381 	.word	0x00006381
    efac:	000044dd 	.word	0x000044dd
    efb0:	0000c045 	.word	0x0000c045
    efb4:	0000b075 	.word	0x0000b075
    efb8:	0000b26d 	.word	0x0000b26d
    efbc:	0000b359 	.word	0x0000b359
    efc0:	20008200 	.word	0x20008200
    efc4:	00015f8f 	.word	0x00015f8f
    efc8:	0000db65 	.word	0x0000db65
    efcc:	20014bdc 	.word	0x20014bdc
    efd0:	000063f1 	.word	0x000063f1
    efd4:	2000b1bc 	.word	0x2000b1bc
    efd8:	0001600d 	.word	0x0001600d
    efdc:	00013981 	.word	0x00013981
    efe0:	20006fa4 	.word	0x20006fa4
    efe4:	200146a0 	.word	0x200146a0
    efe8:	00006b05 	.word	0x00006b05
    efec:	00007045 	.word	0x00007045
    eff0:	0000aa41 	.word	0x0000aa41
    eff4:	20006f98 	.word	0x20006f98
    eff8:	00015fac 	.word	0x00015fac
    effc:	0000eca5 	.word	0x0000eca5
    f000:	00015fc4 	.word	0x00015fc4
    f004:	200079b8 	.word	0x200079b8
    f008:	00009081 	.word	0x00009081
    f00c:	2000824c 	.word	0x2000824c
    f010:	00009a8d 	.word	0x00009a8d
    f014:	00008cfb 	.word	0x00008cfb
    f018:	0000e8e9 	.word	0x0000e8e9
    f01c:	000097ab 	.word	0x000097ab
    f020:	00015fd7 	.word	0x00015fd7
    f024:	0000aabd 	.word	0x0000aabd
    f028:	000096e1 	.word	0x000096e1
    f02c:	000096fb 	.word	0x000096fb
    f030:	20014628 	.word	0x20014628
    f034:	000096a7 	.word	0x000096a7
    f038:	00009741 	.word	0x00009741
    f03c:	20000fb4 	.word	0x20000fb4
    f040:	0000b3fd 	.word	0x0000b3fd
    f044:	0000b2dd 	.word	0x0000b2dd
    f048:	00004565 	.word	0x00004565
    f04c:	20001008 	.word	0x20001008
    f050:	00015ff2 	.word	0x00015ff2
    f054:	00012e05 	.word	0x00012e05
    f058:	000134b9 	.word	0x000134b9
    f05c:	00009215 	.word	0x00009215
    f060:	0000bb71 	.word	0x0000bb71
    f064:	2000fa40 	.word	0x2000fa40
    f068:	2000e68c 	.word	0x2000e68c
    f06c:	00004d89 	.word	0x00004d89
    f070:	2000404c 	.word	0x2000404c
    f074:	000087af 	.word	0x000087af
    f078:	000087b5 	.word	0x000087b5
    f07c:	00008a87 	.word	0x00008a87
    f080:	00008a8d 	.word	0x00008a8d
    f084:	000088c3 	.word	0x000088c3
    f088:	000088c9 	.word	0x000088c9
			grid_port_receive_task(&GRID_PORT_U);	
    f08c:	4610      	mov	r0, r2
			GRID_PORT_U.rx_double_buffer_seek_start_index = nvmlength-1; //-3
    f08e:	6253      	str	r3, [r2, #36]	; 0x24
			grid_port_receive_task(&GRID_PORT_U);	
    f090:	4b8d      	ldr	r3, [pc, #564]	; (f2c8 <main+0x5a0>)
    f092:	4798      	blx	r3
			for(uint32_t i=0; i<usblength; i++){
    f094:	2300      	movs	r3, #0
			GRID_PORT_U.rx_double_buffer[i] = 0;
    f096:	f241 32b4 	movw	r2, #5044	; 0x13b4
    f09a:	498c      	ldr	r1, [pc, #560]	; (f2cc <main+0x5a4>)
    f09c:	4419      	add	r1, r3
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    f09e:	3301      	adds	r3, #1
			GRID_PORT_U.rx_double_buffer[i] = 0;
    f0a0:	f04f 0000 	mov.w	r0, #0
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    f0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			GRID_PORT_U.rx_double_buffer[i] = 0;
    f0a8:	5488      	strb	r0, [r1, r2]
		for (uint32_t i=0; i<GRID_NVM_PAGE_SIZE; i++)
    f0aa:	d1f6      	bne.n	f09a <main+0x372>
		grid_port_receive_task(&GRID_PORT_N);
    f0ac:	4f86      	ldr	r7, [pc, #536]	; (f2c8 <main+0x5a0>)
    f0ae:	4888      	ldr	r0, [pc, #544]	; (f2d0 <main+0x5a8>)
    f0b0:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_E);
    f0b2:	4888      	ldr	r0, [pc, #544]	; (f2d4 <main+0x5ac>)
    f0b4:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_S);
    f0b6:	4888      	ldr	r0, [pc, #544]	; (f2d8 <main+0x5b0>)
    f0b8:	47b8      	blx	r7
		grid_port_receive_task(&GRID_PORT_W);							
    f0ba:	4888      	ldr	r0, [pc, #544]	; (f2dc <main+0x5b4>)
    f0bc:	47b8      	blx	r7
		grid_task_enter_task(&grid_task_state, GRID_TASK_REPORT);
    f0be:	2103      	movs	r1, #3
    f0c0:	4628      	mov	r0, r5
    f0c2:	47c0      	blx	r8
		grid_port_process_ui(&GRID_PORT_U); // COOLDOWN DELAY IMPLEMENTED INSIDE
    f0c4:	4b86      	ldr	r3, [pc, #536]	; (f2e0 <main+0x5b8>)
    f0c6:	4881      	ldr	r0, [pc, #516]	; (f2cc <main+0x5a4>)
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    f0c8:	4f86      	ldr	r7, [pc, #536]	; (f2e4 <main+0x5bc>)
		grid_port_process_ui(&GRID_PORT_U); // COOLDOWN DELAY IMPLEMENTED INSIDE
    f0ca:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_INBOUND);	
    f0cc:	2104      	movs	r1, #4
    f0ce:	4628      	mov	r0, r5
    f0d0:	47c0      	blx	r8
		grid_port_process_inbound(&GRID_PORT_U, 1); // Loopback
    f0d2:	2101      	movs	r1, #1
    f0d4:	487d      	ldr	r0, [pc, #500]	; (f2cc <main+0x5a4>)
    f0d6:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_N, 0);		
    f0d8:	2100      	movs	r1, #0
    f0da:	487d      	ldr	r0, [pc, #500]	; (f2d0 <main+0x5a8>)
    f0dc:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_E, 0);		
    f0de:	2100      	movs	r1, #0
    f0e0:	487c      	ldr	r0, [pc, #496]	; (f2d4 <main+0x5ac>)
    f0e2:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_S, 0);
    f0e4:	2100      	movs	r1, #0
    f0e6:	487c      	ldr	r0, [pc, #496]	; (f2d8 <main+0x5b0>)
    f0e8:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_W, 0);
    f0ea:	2100      	movs	r1, #0
    f0ec:	487b      	ldr	r0, [pc, #492]	; (f2dc <main+0x5b4>)
    f0ee:	47b8      	blx	r7
		grid_port_process_inbound(&GRID_PORT_H, 0);	// USB	
    f0f0:	2100      	movs	r1, #0
    f0f2:	487d      	ldr	r0, [pc, #500]	; (f2e8 <main+0x5c0>)
    f0f4:	47b8      	blx	r7
		grid_task_enter_task(&grid_task_state, GRID_TASK_OUTBOUND);
    f0f6:	2105      	movs	r1, #5
    f0f8:	4628      	mov	r0, r5
    f0fa:	47c0      	blx	r8
		grid_port_process_outbound_usart(&GRID_PORT_N);
    f0fc:	4f7b      	ldr	r7, [pc, #492]	; (f2ec <main+0x5c4>)
    f0fe:	4874      	ldr	r0, [pc, #464]	; (f2d0 <main+0x5a8>)
    f100:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_E);
    f102:	4874      	ldr	r0, [pc, #464]	; (f2d4 <main+0x5ac>)
    f104:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_S);
    f106:	4874      	ldr	r0, [pc, #464]	; (f2d8 <main+0x5b0>)
    f108:	47b8      	blx	r7
		grid_port_process_outbound_usart(&GRID_PORT_W);
    f10a:	4874      	ldr	r0, [pc, #464]	; (f2dc <main+0x5b4>)
    f10c:	47b8      	blx	r7
		grid_port_process_outbound_usb(&GRID_PORT_H);
    f10e:	4b78      	ldr	r3, [pc, #480]	; (f2f0 <main+0x5c8>)
    f110:	4875      	ldr	r0, [pc, #468]	; (f2e8 <main+0x5c0>)
    f112:	4798      	blx	r3
		grid_port_process_outbound_ui(&GRID_PORT_U);
    f114:	4b77      	ldr	r3, [pc, #476]	; (f2f4 <main+0x5cc>)
    f116:	486d      	ldr	r0, [pc, #436]	; (f2cc <main+0x5a4>)
    f118:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_ALERT);	
    f11a:	2107      	movs	r1, #7
    f11c:	4628      	mov	r0, r5
    f11e:	47c0      	blx	r8
		if (grid_sys_state.alert_state){
    f120:	8963      	ldrh	r3, [r4, #10]
    f122:	b29b      	uxth	r3, r3
    f124:	2b00      	cmp	r3, #0
    f126:	d13a      	bne.n	f19e <main+0x476>
			}
			
			
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
    f128:	2106      	movs	r1, #6
    f12a:	4f73      	ldr	r7, [pc, #460]	; (f2f8 <main+0x5d0>)


		// IDLETASK
		
		
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    f12c:	f8df 820c 	ldr.w	r8, [pc, #524]	; f33c <main+0x614>
		grid_task_enter_task(&grid_task_state, GRID_TASK_LED);
    f130:	4628      	mov	r0, r5
    f132:	47b8      	blx	r7
		grid_led_tick(&grid_led_state);
    f134:	ee18 0a10 	vmov	r0, s16
    f138:	4b70      	ldr	r3, [pc, #448]	; (f2fc <main+0x5d4>)
    f13a:	4798      	blx	r3
			grid_led_lowlevel_render_all(&grid_led_state);	
    f13c:	ee18 0a10 	vmov	r0, s16
    f140:	4b6f      	ldr	r3, [pc, #444]	; (f300 <main+0x5d8>)
    f142:	4798      	blx	r3
			grid_led_lowlevel_hardware_start_transfer(&grid_led_state);
    f144:	4b6f      	ldr	r3, [pc, #444]	; (f304 <main+0x5dc>)
    f146:	ee18 0a10 	vmov	r0, s16
    f14a:	4798      	blx	r3
		grid_task_enter_task(&grid_task_state, GRID_TASK_IDLE);
    f14c:	2100      	movs	r1, #0
    f14e:	4628      	mov	r0, r5
    f150:	47b8      	blx	r7
		uint32_t elapsed = grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart);
    f152:	9904      	ldr	r1, [sp, #16]
    f154:	4620      	mov	r0, r4
    f156:	47c0      	blx	r8
		
		if (elapsed < RTC1MS){
    f158:	280f      	cmp	r0, #15
    f15a:	f240 8097 	bls.w	f28c <main+0x564>
				delay_us(1);			
			}	
					
		}
		else{
			loopwarp+= elapsed - RTC1MS;
    f15e:	f1aa 0310 	sub.w	r3, sl, #16
    f162:	eb03 0a00 	add.w	sl, r3, r0
			
			loopslow++;
		}
		
		grid_task_enter_task(&grid_task_state, GRID_TASK_UNDEFINED);		
    f166:	2101      	movs	r1, #1
    f168:	4628      	mov	r0, r5
    f16a:	47b8      	blx	r7
	while (1) {
    f16c:	e637      	b.n	edde <main+0xb6>
			scheduler_report_flag=0;
    f16e:	f04f 0300 	mov.w	r3, #0
    f172:	707b      	strb	r3, [r7, #1]
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    f174:	4b64      	ldr	r3, [pc, #400]	; (f308 <main+0x5e0>)
			scheduler_report_flag=0;
    f176:	f04f 0a00 	mov.w	sl, #0
				task_val[i] = grid_task_timer_read(&grid_task_state, i);
    f17a:	fa5f f18a 	uxtb.w	r1, sl
    f17e:	4628      	mov	r0, r5
    f180:	f10a 0a01 	add.w	sl, sl, #1
    f184:	4798      	blx	r3
			for(uint8_t i = 0; i<GRID_TASK_NUMBER; i++){
    f186:	f1ba 0f08 	cmp.w	sl, #8
    f18a:	4b5f      	ldr	r3, [pc, #380]	; (f308 <main+0x5e0>)
    f18c:	d1f5      	bne.n	f17a <main+0x452>
			grid_task_timer_reset(&grid_task_state);
    f18e:	4b5f      	ldr	r3, [pc, #380]	; (f30c <main+0x5e4>)
    f190:	4628      	mov	r0, r5
			loopwarp = 0;
    f192:	f04f 0a00 	mov.w	sl, #0
			grid_task_timer_reset(&grid_task_state);
    f196:	4798      	blx	r3
			loopcounter = 0;
    f198:	f8cd a00c 	str.w	sl, [sp, #12]
    f19c:	e66a      	b.n	ee74 <main+0x14c>
			grid_sys_state.alert_state--;
    f19e:	8963      	ldrh	r3, [r4, #10]
    f1a0:	3b01      	subs	r3, #1
    f1a2:	b29b      	uxth	r3, r3
    f1a4:	8163      	strh	r3, [r4, #10]
			if (grid_sys_alert_read_color_changed_flag(&grid_sys_state)){
    f1a6:	4620      	mov	r0, r4
    f1a8:	4b59      	ldr	r3, [pc, #356]	; (f310 <main+0x5e8>)
    f1aa:	4798      	blx	r3
    f1ac:	b998      	cbnz	r0, f1d6 <main+0x4ae>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    f1ae:	4b59      	ldr	r3, [pc, #356]	; (f314 <main+0x5ec>)
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    f1b0:	f8df 818c 	ldr.w	r8, [pc, #396]	; f340 <main+0x618>
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    f1b4:	4620      	mov	r0, r4
    f1b6:	4798      	blx	r3
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    f1b8:	2700      	movs	r7, #0
			uint8_t intensity = grid_sys_alert_get_color_intensity(&grid_sys_state);
    f1ba:	4681      	mov	r9, r0
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    f1bc:	ee18 3a10 	vmov	r3, s16
    f1c0:	785b      	ldrb	r3, [r3, #1]
    f1c2:	b2f9      	uxtb	r1, r7
    f1c4:	428b      	cmp	r3, r1
    f1c6:	d9af      	bls.n	f128 <main+0x400>
				grid_led_set_phase(&grid_led_state, i, GRID_LED_LAYER_ALERT, intensity);
    f1c8:	ee18 0a10 	vmov	r0, s16
    f1cc:	464b      	mov	r3, r9
    f1ce:	2200      	movs	r2, #0
    f1d0:	47c0      	blx	r8
			for (uint8_t i=0; i<grid_led_state.led_number; i++){	
    f1d2:	3701      	adds	r7, #1
    f1d4:	e7f2      	b.n	f1bc <main+0x494>
				grid_sys_alert_clear_color_changed_flag(&grid_sys_state);			
    f1d6:	4b50      	ldr	r3, [pc, #320]	; (f318 <main+0x5f0>)
    f1d8:	4620      	mov	r0, r4
    f1da:	4798      	blx	r3
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    f1dc:	4b4f      	ldr	r3, [pc, #316]	; (f31c <main+0x5f4>)
    f1de:	4620      	mov	r0, r4
    f1e0:	4798      	blx	r3
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    f1e2:	4b4f      	ldr	r3, [pc, #316]	; (f320 <main+0x5f8>)
				uint8_t color_r   = grid_sys_alert_get_color_r(&grid_sys_state);
    f1e4:	4681      	mov	r9, r0
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    f1e6:	4620      	mov	r0, r4
    f1e8:	4798      	blx	r3
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    f1ea:	4b4e      	ldr	r3, [pc, #312]	; (f324 <main+0x5fc>)
				uint8_t color_g   = grid_sys_alert_get_color_g(&grid_sys_state);
    f1ec:	9006      	str	r0, [sp, #24]
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    f1ee:	4620      	mov	r0, r4
    f1f0:	4798      	blx	r3
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    f1f2:	2300      	movs	r3, #0
				uint8_t color_b   = grid_sys_alert_get_color_b(&grid_sys_state);
    f1f4:	9007      	str	r0, [sp, #28]
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    f1f6:	9305      	str	r3, [sp, #20]
    f1f8:	4b4b      	ldr	r3, [pc, #300]	; (f328 <main+0x600>)
    f1fa:	f89d 6014 	ldrb.w	r6, [sp, #20]
    f1fe:	ee18 0a10 	vmov	r0, s16
    f202:	4798      	blx	r3
    f204:	9b05      	ldr	r3, [sp, #20]
    f206:	42b0      	cmp	r0, r6
    f208:	f103 0301 	add.w	r3, r3, #1
    f20c:	9305      	str	r3, [sp, #20]
    f20e:	d9ce      	bls.n	f1ae <main+0x486>
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    f210:	2300      	movs	r3, #0
    f212:	461a      	mov	r2, r3
    f214:	e9cd 3300 	strd	r3, r3, [sp]
    f218:	ee18 0a10 	vmov	r0, s16
    f21c:	4631      	mov	r1, r6
    f21e:	f8df 8124 	ldr.w	r8, [pc, #292]	; f344 <main+0x61c>
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    f222:	4f42      	ldr	r7, [pc, #264]	; (f32c <main+0x604>)
					grid_led_set_min(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0   , color_g*0   , color_b*0);
    f224:	47c0      	blx	r8
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    f226:	4b42      	ldr	r3, [pc, #264]	; (f330 <main+0x608>)
    f228:	f8df 811c 	ldr.w	r8, [pc, #284]	; f348 <main+0x620>
    f22c:	4648      	mov	r0, r9
    f22e:	4798      	blx	r3
    f230:	4b40      	ldr	r3, [pc, #256]	; (f334 <main+0x60c>)
    f232:	2200      	movs	r2, #0
    f234:	47b8      	blx	r7
    f236:	47c0      	blx	r8
    f238:	4b3d      	ldr	r3, [pc, #244]	; (f330 <main+0x608>)
    f23a:	b2c2      	uxtb	r2, r0
    f23c:	9807      	ldr	r0, [sp, #28]
    f23e:	ee08 2a90 	vmov	s17, r2
    f242:	4798      	blx	r3
    f244:	2200      	movs	r2, #0
    f246:	4b3b      	ldr	r3, [pc, #236]	; (f334 <main+0x60c>)
    f248:	47b8      	blx	r7
    f24a:	47c0      	blx	r8
    f24c:	b2c0      	uxtb	r0, r0
    f24e:	9001      	str	r0, [sp, #4]
    f250:	4b37      	ldr	r3, [pc, #220]	; (f330 <main+0x608>)
    f252:	9806      	ldr	r0, [sp, #24]
    f254:	4798      	blx	r3
    f256:	4b37      	ldr	r3, [pc, #220]	; (f334 <main+0x60c>)
    f258:	2200      	movs	r2, #0
    f25a:	47b8      	blx	r7
    f25c:	47c0      	blx	r8
    f25e:	b2c0      	uxtb	r0, r0
    f260:	ee18 3a90 	vmov	r3, s17
    f264:	9000      	str	r0, [sp, #0]
    f266:	4631      	mov	r1, r6
    f268:	ee18 0a10 	vmov	r0, s16
    f26c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; f34c <main+0x624>
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    f270:	4f31      	ldr	r7, [pc, #196]	; (f338 <main+0x610>)
					grid_led_set_mid(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*0.5 , color_g*0.5 , color_b*0.5);
    f272:	2200      	movs	r2, #0
    f274:	47c0      	blx	r8
					grid_led_set_max(&grid_led_state, i, GRID_LED_LAYER_ALERT, color_r*1   , color_g*1   , color_b*1);
    f276:	9b07      	ldr	r3, [sp, #28]
    f278:	9301      	str	r3, [sp, #4]
    f27a:	9b06      	ldr	r3, [sp, #24]
    f27c:	9300      	str	r3, [sp, #0]
    f27e:	ee18 0a10 	vmov	r0, s16
    f282:	464b      	mov	r3, r9
    f284:	2200      	movs	r2, #0
    f286:	4631      	mov	r1, r6
    f288:	47b8      	blx	r7
				for (uint8_t i=0; i<grid_led_get_led_number(&grid_led_state); i++){
    f28a:	e7b5      	b.n	f1f8 <main+0x4d0>
			if (loopwarp>5){
    f28c:	f1ba 0f05 	cmp.w	sl, #5
    f290:	d90e      	bls.n	f2b0 <main+0x588>
					if ((RTC1MS - elapsed)<loopwarp){				
    f292:	f1c0 0310 	rsb	r3, r0, #16
    f296:	4553      	cmp	r3, sl
						loopwarp-=(RTC1MS - elapsed);
    f298:	bf3f      	itttt	cc
    f29a:	f1aa 0310 	subcc.w	r3, sl, #16
    f29e:	eb03 0a00 	addcc.w	sl, r3, r0
						loopstart-=(RTC1MS - elapsed);
    f2a2:	9b04      	ldrcc	r3, [sp, #16]
    f2a4:	3b10      	subcc	r3, #16
    f2a6:	bf3a      	itte	cc
    f2a8:	181b      	addcc	r3, r3, r0
    f2aa:	9304      	strcc	r3, [sp, #16]
						loopwarp-=loopwarp;
    f2ac:	f04f 0a00 	movcs.w	sl, #0
				delay_us(1);			
    f2b0:	f8df 909c 	ldr.w	r9, [pc, #156]	; f350 <main+0x628>
			while(grid_sys_rtc_get_elapsed_time(&grid_sys_state, loopstart) < RTC1SEC/1000){	
    f2b4:	9904      	ldr	r1, [sp, #16]
    f2b6:	4620      	mov	r0, r4
    f2b8:	47c0      	blx	r8
    f2ba:	280f      	cmp	r0, #15
    f2bc:	f63f af53 	bhi.w	f166 <main+0x43e>
				delay_us(1);			
    f2c0:	2001      	movs	r0, #1
    f2c2:	47c8      	blx	r9
    f2c4:	e7f6      	b.n	f2b4 <main+0x58c>
    f2c6:	bf00      	nop
    f2c8:	00004d89 	.word	0x00004d89
    f2cc:	2000404c 	.word	0x2000404c
    f2d0:	200010ec 	.word	0x200010ec
    f2d4:	200116d8 	.word	0x200116d8
    f2d8:	2000b73c 	.word	0x2000b73c
    f2dc:	20008270 	.word	0x20008270
    f2e0:	0000a0fd 	.word	0x0000a0fd
    f2e4:	00005209 	.word	0x00005209
    f2e8:	2000e68c 	.word	0x2000e68c
    f2ec:	00006315 	.word	0x00006315
    f2f0:	000053cd 	.word	0x000053cd
    f2f4:	000056c1 	.word	0x000056c1
    f2f8:	00008cfb 	.word	0x00008cfb
    f2fc:	00006c05 	.word	0x00006c05
    f300:	00006ff5 	.word	0x00006ff5
    f304:	00007015 	.word	0x00007015
    f308:	00008d25 	.word	0x00008d25
    f30c:	00008d11 	.word	0x00008d11
    f310:	0000975d 	.word	0x0000975d
    f314:	00009767 	.word	0x00009767
    f318:	00009761 	.word	0x00009761
    f31c:	000097c5 	.word	0x000097c5
    f320:	000097c9 	.word	0x000097c9
    f324:	000097cd 	.word	0x000097cd
    f328:	00006c01 	.word	0x00006c01
    f32c:	00012805 	.word	0x00012805
    f330:	00012731 	.word	0x00012731
    f334:	3fe00000 	.word	0x3fe00000
    f338:	00006c7d 	.word	0x00006c7d
    f33c:	00009745 	.word	0x00009745
    f340:	00006d0d 	.word	0x00006d0d
    f344:	00006c3d 	.word	0x00006c3d
    f348:	00012c29 	.word	0x00012c29
    f34c:	00006c5d 	.word	0x00006c5d
    f350:	0000d141 	.word	0x0000d141

0000f354 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    f354:	6800      	ldr	r0, [r0, #0]
    f356:	b900      	cbnz	r0, f35a <is_list_element+0x6>
    f358:	4770      	bx	lr
		if (it == element) {
    f35a:	4288      	cmp	r0, r1
    f35c:	d1fa      	bne.n	f354 <is_list_element>
			return true;
    f35e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    f360:	4770      	bx	lr
	...

0000f364 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    f364:	b538      	push	{r3, r4, r5, lr}
	ASSERT(!is_list_element(list, element));
    f366:	4b07      	ldr	r3, [pc, #28]	; (f384 <list_insert_as_head+0x20>)
{
    f368:	460d      	mov	r5, r1
    f36a:	4604      	mov	r4, r0
	ASSERT(!is_list_element(list, element));
    f36c:	4798      	blx	r3
    f36e:	f080 0001 	eor.w	r0, r0, #1
    f372:	4b05      	ldr	r3, [pc, #20]	; (f388 <list_insert_as_head+0x24>)
    f374:	4905      	ldr	r1, [pc, #20]	; (f38c <list_insert_as_head+0x28>)
    f376:	2239      	movs	r2, #57	; 0x39
    f378:	b2c0      	uxtb	r0, r0
    f37a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    f37c:	6823      	ldr	r3, [r4, #0]
    f37e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    f380:	6025      	str	r5, [r4, #0]
}
    f382:	bd38      	pop	{r3, r4, r5, pc}
    f384:	0000f355 	.word	0x0000f355
    f388:	0000d415 	.word	0x0000d415
    f38c:	00016028 	.word	0x00016028

0000f390 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    f390:	6803      	ldr	r3, [r0, #0]
    f392:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    f394:	6001      	str	r1, [r0, #0]
}
    f396:	4770      	bx	lr

0000f398 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
    f398:	b570      	push	{r4, r5, r6, lr}
	struct list_element *it = list->head;

	ASSERT(!is_list_element(list, element));
    f39a:	4b0c      	ldr	r3, [pc, #48]	; (f3cc <list_insert_at_end+0x34>)
	struct list_element *it = list->head;
    f39c:	6805      	ldr	r5, [r0, #0]
{
    f39e:	4606      	mov	r6, r0
    f3a0:	460c      	mov	r4, r1
	ASSERT(!is_list_element(list, element));
    f3a2:	4798      	blx	r3
    f3a4:	f080 0001 	eor.w	r0, r0, #1
    f3a8:	4b09      	ldr	r3, [pc, #36]	; (f3d0 <list_insert_at_end+0x38>)
    f3aa:	490a      	ldr	r1, [pc, #40]	; (f3d4 <list_insert_at_end+0x3c>)
    f3ac:	224f      	movs	r2, #79	; 0x4f
    f3ae:	b2c0      	uxtb	r0, r0
    f3b0:	4798      	blx	r3

	if (!list->head) {
    f3b2:	6833      	ldr	r3, [r6, #0]
    f3b4:	b913      	cbnz	r3, f3bc <list_insert_at_end+0x24>
		list->head                             = (struct list_element *)element;
    f3b6:	6034      	str	r4, [r6, #0]
		((struct list_element *)element)->next = NULL;
    f3b8:	6023      	str	r3, [r4, #0]
	while (it->next) {
		it = it->next;
	}
	it->next                               = (struct list_element *)element;
	((struct list_element *)element)->next = NULL;
}
    f3ba:	bd70      	pop	{r4, r5, r6, pc}
	while (it->next) {
    f3bc:	462b      	mov	r3, r5
    f3be:	682d      	ldr	r5, [r5, #0]
    f3c0:	2d00      	cmp	r5, #0
    f3c2:	d1fb      	bne.n	f3bc <list_insert_at_end+0x24>
	it->next                               = (struct list_element *)element;
    f3c4:	601c      	str	r4, [r3, #0]
	((struct list_element *)element)->next = NULL;
    f3c6:	6025      	str	r5, [r4, #0]
    f3c8:	e7f7      	b.n	f3ba <list_insert_at_end+0x22>
    f3ca:	bf00      	nop
    f3cc:	0000f355 	.word	0x0000f355
    f3d0:	0000d415 	.word	0x0000d415
    f3d4:	00016028 	.word	0x00016028

0000f3d8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    f3d8:	6803      	ldr	r3, [r0, #0]
    f3da:	b10b      	cbz	r3, f3e0 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    f3dc:	681a      	ldr	r2, [r3, #0]
    f3de:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    f3e0:	4618      	mov	r0, r3
    f3e2:	4770      	bx	lr

0000f3e4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    f3e4:	4b03      	ldr	r3, [pc, #12]	; (f3f4 <_osc32kctrl_init_sources+0x10>)
    f3e6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    f3e8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    f3ec:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    f3ee:	2201      	movs	r2, #1
    f3f0:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    f3f2:	4770      	bx	lr
    f3f4:	40001400 	.word	0x40001400

0000f3f8 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    f3f8:	6903      	ldr	r3, [r0, #16]
    f3fa:	420b      	tst	r3, r1
    f3fc:	d1fc      	bne.n	f3f8 <hri_rtcmode0_wait_for_sync>
	};
}
    f3fe:	4770      	bx	lr

0000f400 <_rtc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _rtc_timer_set_period(struct _timer_device *const dev, const uint32_t clock_cycles)
{
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, clock_cycles);
    f400:	68c0      	ldr	r0, [r0, #12]

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f402:	4b02      	ldr	r3, [pc, #8]	; (f40c <_rtc_timer_set_period+0xc>)
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    f404:	6201      	str	r1, [r0, #32]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f406:	2160      	movs	r1, #96	; 0x60
    f408:	4718      	bx	r3
    f40a:	bf00      	nop
    f40c:	0000f3f9 	.word	0x0000f3f9

0000f410 <_rtc_timer_get_period>:

/**
 * \brief Retrieve timer period
 */
uint32_t _rtc_timer_get_period(const struct _timer_device *const dev)
{
    f410:	b508      	push	{r3, lr}
	return hri_rtcmode0_read_COMP_reg(dev->hw, 0);
    f412:	68c0      	ldr	r0, [r0, #12]
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_comp_reg_t hri_rtcmode0_read_COMP_reg(const void *const hw, uint8_t index)
{
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f414:	4b02      	ldr	r3, [pc, #8]	; (f420 <_rtc_timer_get_period+0x10>)
    f416:	2160      	movs	r1, #96	; 0x60
    f418:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COMP[index].reg;
    f41a:	6a00      	ldr	r0, [r0, #32]
}
    f41c:	bd08      	pop	{r3, pc}
    f41e:	bf00      	nop
    f420:	0000f3f9 	.word	0x0000f3f9

0000f424 <_rtc_timer_is_started>:

/**
 * \brief Check if timer is running
 */
bool _rtc_timer_is_started(const struct _timer_device *const dev)
{
    f424:	b508      	push	{r3, lr}
	return hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw);
    f426:	68c0      	ldr	r0, [r0, #12]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f428:	4b03      	ldr	r3, [pc, #12]	; (f438 <_rtc_timer_is_started+0x14>)
    f42a:	f248 0103 	movw	r1, #32771	; 0x8003
    f42e:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    f430:	8800      	ldrh	r0, [r0, #0]
}
    f432:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f436:	bd08      	pop	{r3, pc}
    f438:	0000f3f9 	.word	0x0000f3f9

0000f43c <_rtc_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _rtc_timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
    f43c:	4770      	bx	lr
	...

0000f440 <_rtc_timer_stop>:
{
    f440:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    f442:	4604      	mov	r4, r0
    f444:	b118      	cbz	r0, f44e <_rtc_timer_stop+0xe>
    f446:	68c0      	ldr	r0, [r0, #12]
    f448:	3800      	subs	r0, #0
    f44a:	bf18      	it	ne
    f44c:	2001      	movne	r0, #1
    f44e:	4908      	ldr	r1, [pc, #32]	; (f470 <_rtc_timer_stop+0x30>)
    f450:	4b08      	ldr	r3, [pc, #32]	; (f474 <_rtc_timer_stop+0x34>)
    f452:	226b      	movs	r2, #107	; 0x6b
    f454:	4798      	blx	r3
	hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
    f456:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    f458:	8803      	ldrh	r3, [r0, #0]
    f45a:	f023 0302 	bic.w	r3, r3, #2
    f45e:	041b      	lsls	r3, r3, #16
    f460:	0c1b      	lsrs	r3, r3, #16
    f462:	8003      	strh	r3, [r0, #0]
}
    f464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f468:	4b03      	ldr	r3, [pc, #12]	; (f478 <_rtc_timer_stop+0x38>)
    f46a:	f248 0103 	movw	r1, #32771	; 0x8003
    f46e:	4718      	bx	r3
    f470:	00016046 	.word	0x00016046
    f474:	0000d415 	.word	0x0000d415
    f478:	0000f3f9 	.word	0x0000f3f9

0000f47c <_rtc_timer_start>:
{
    f47c:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    f47e:	4604      	mov	r4, r0
    f480:	b118      	cbz	r0, f48a <_rtc_timer_start+0xe>
    f482:	68c0      	ldr	r0, [r0, #12]
    f484:	3800      	subs	r0, #0
    f486:	bf18      	it	ne
    f488:	2001      	movne	r0, #1
    f48a:	490e      	ldr	r1, [pc, #56]	; (f4c4 <_rtc_timer_start+0x48>)
    f48c:	4b0e      	ldr	r3, [pc, #56]	; (f4c8 <_rtc_timer_start+0x4c>)
    f48e:	225e      	movs	r2, #94	; 0x5e
    f490:	4798      	blx	r3
    f492:	4b0e      	ldr	r3, [pc, #56]	; (f4cc <_rtc_timer_start+0x50>)
	hri_rtcmode0_write_COUNT_reg(dev->hw, 0);
    f494:	68e0      	ldr	r0, [r4, #12]
    f496:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f49a:	601a      	str	r2, [r3, #0]
	((Rtc *)hw)->MODE0.COUNT.reg = data;
    f49c:	2300      	movs	r3, #0
    f49e:	6183      	str	r3, [r0, #24]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    f4a0:	4a0b      	ldr	r2, [pc, #44]	; (f4d0 <_rtc_timer_start+0x54>)
    f4a2:	2108      	movs	r1, #8
    f4a4:	4790      	blx	r2
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_COUNT);
    f4a6:	68e0      	ldr	r0, [r4, #12]
    f4a8:	2108      	movs	r1, #8
    f4aa:	4790      	blx	r2
	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    f4ac:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    f4ae:	8803      	ldrh	r3, [r0, #0]
    f4b0:	b29b      	uxth	r3, r3
    f4b2:	f043 0302 	orr.w	r3, r3, #2
}
    f4b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4ba:	8003      	strh	r3, [r0, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f4bc:	f248 0103 	movw	r1, #32771	; 0x8003
    f4c0:	4710      	bx	r2
    f4c2:	bf00      	nop
    f4c4:	00016046 	.word	0x00016046
    f4c8:	0000d415 	.word	0x0000d415
    f4cc:	e000e100 	.word	0xe000e100
    f4d0:	0000f3f9 	.word	0x0000f3f9

0000f4d4 <_rtc_timer_deinit>:
{
    f4d4:	b510      	push	{r4, lr}
	ASSERT(dev && dev->hw);
    f4d6:	4604      	mov	r4, r0
    f4d8:	b118      	cbz	r0, f4e2 <_rtc_timer_deinit+0xe>
    f4da:	68c0      	ldr	r0, [r0, #12]
    f4dc:	3800      	subs	r0, #0
    f4de:	bf18      	it	ne
    f4e0:	2001      	movne	r0, #1
    f4e2:	490b      	ldr	r1, [pc, #44]	; (f510 <_rtc_timer_deinit+0x3c>)
    f4e4:	4b0b      	ldr	r3, [pc, #44]	; (f514 <_rtc_timer_deinit+0x40>)
    f4e6:	2252      	movs	r2, #82	; 0x52
    f4e8:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    f4ea:	4b0b      	ldr	r3, [pc, #44]	; (f518 <_rtc_timer_deinit+0x44>)
    f4ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f4f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    f4f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f4f8:	f3bf 8f6f 	isb	sy
	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
    f4fc:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    f4fe:	2301      	movs	r3, #1
    f500:	8003      	strh	r3, [r0, #0]
}
    f502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f506:	4b05      	ldr	r3, [pc, #20]	; (f51c <_rtc_timer_deinit+0x48>)
    f508:	f248 0103 	movw	r1, #32771	; 0x8003
    f50c:	4718      	bx	r3
    f50e:	bf00      	nop
    f510:	00016046 	.word	0x00016046
    f514:	0000d415 	.word	0x0000d415
    f518:	e000e100 	.word	0xe000e100
    f51c:	0000f3f9 	.word	0x0000f3f9

0000f520 <_rtc_timer_init>:
{
    f520:	b570      	push	{r4, r5, r6, lr}
	ASSERT(dev);
    f522:	4604      	mov	r4, r0
{
    f524:	460d      	mov	r5, r1
	ASSERT(dev);
    f526:	3800      	subs	r0, #0
    f528:	bf18      	it	ne
    f52a:	2001      	movne	r0, #1
    f52c:	4b10      	ldr	r3, [pc, #64]	; (f570 <_rtc_timer_init+0x50>)
    f52e:	4911      	ldr	r1, [pc, #68]	; (f574 <_rtc_timer_init+0x54>)
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    f530:	2601      	movs	r6, #1
    f532:	2230      	movs	r2, #48	; 0x30
    f534:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f536:	4a10      	ldr	r2, [pc, #64]	; (f578 <_rtc_timer_init+0x58>)
	dev->hw = hw;
    f538:	60e5      	str	r5, [r4, #12]
    f53a:	4628      	mov	r0, r5
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    f53c:	802e      	strh	r6, [r5, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f53e:	f248 0103 	movw	r1, #32771	; 0x8003
    f542:	4790      	blx	r2
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    f544:	68e0      	ldr	r0, [r4, #12]
    f546:	4631      	mov	r1, r6
    f548:	4790      	blx	r2
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
    f54a:	68e0      	ldr	r0, [r4, #12]
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    f54c:	f248 0380 	movw	r3, #32896	; 0x8080
    f550:	8003      	strh	r3, [r0, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    f552:	f248 0103 	movw	r1, #32771	; 0x8003
    f556:	4790      	blx	r2
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    f558:	68e0      	ldr	r0, [r4, #12]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f55a:	2160      	movs	r1, #96	; 0x60
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    f55c:	6206      	str	r6, [r0, #32]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COMP0 | RTC_MODE0_SYNCBUSY_COMP1);
    f55e:	4790      	blx	r2
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    f560:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    f562:	f44f 7280 	mov.w	r2, #256	; 0x100
    f566:	815a      	strh	r2, [r3, #10]
	_rtc_dev = dev;
    f568:	4b04      	ldr	r3, [pc, #16]	; (f57c <_rtc_timer_init+0x5c>)
}
    f56a:	2000      	movs	r0, #0
	_rtc_dev = dev;
    f56c:	601c      	str	r4, [r3, #0]
}
    f56e:	bd70      	pop	{r4, r5, r6, pc}
    f570:	0000d415 	.word	0x0000d415
    f574:	00016046 	.word	0x00016046
    f578:	0000f3f9 	.word	0x0000f3f9
    f57c:	2000101c 	.word	0x2000101c

0000f580 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return &_rtc_timer_functions;
}
    f580:	4800      	ldr	r0, [pc, #0]	; (f584 <_rtc_get_timer+0x4>)
    f582:	4770      	bx	lr
    f584:	20000508 	.word	0x20000508

0000f588 <RTC_Handler>:
/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
	_rtc_timer_interrupt_handler(_rtc_dev);
    f588:	4b07      	ldr	r3, [pc, #28]	; (f5a8 <RTC_Handler+0x20>)
{
    f58a:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    f58c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    f58e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    f590:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    f592:	05db      	lsls	r3, r3, #23
    f594:	d507      	bpl.n	f5a6 <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
    f596:	6823      	ldr	r3, [r4, #0]
    f598:	b10b      	cbz	r3, f59e <RTC_Handler+0x16>
			dev->timer_cb.period_expired(dev);
    f59a:	4620      	mov	r0, r4
    f59c:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    f59e:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    f5a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    f5a4:	819a      	strh	r2, [r3, #12]
}
    f5a6:	bd10      	pop	{r4, pc}
    f5a8:	2000101c 	.word	0x2000101c

0000f5ac <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
    f5ac:	b530      	push	{r4, r5, lr}
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);

	if (function == GPIO_PIN_FUNCTION_OFF) {
    f5ae:	1c4b      	adds	r3, r1, #1
	uint8_t pin  = GPIO_PIN(gpio);
    f5b0:	b2c5      	uxtb	r5, r0
    f5b2:	4b18      	ldr	r3, [pc, #96]	; (f614 <_gpio_set_pin_function+0x68>)
    f5b4:	f000 041f 	and.w	r4, r0, #31
	uint8_t port = GPIO_PORT(gpio);
    f5b8:	ea4f 1050 	mov.w	r0, r0, lsr #5
    f5bc:	ea4f 10c0 	mov.w	r0, r0, lsl #7
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f5c0:	4403      	add	r3, r0
	if (function == GPIO_PIN_FUNCTION_OFF) {
    f5c2:	d107      	bne.n	f5d4 <_gpio_set_pin_function+0x28>
    f5c4:	4423      	add	r3, r4
    f5c6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    f5ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
    f5d2:	bd30      	pop	{r4, r5, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    f5d4:	1918      	adds	r0, r3, r4
    f5d6:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    f5da:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
    f5de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    f5e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    f5e6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    f5ea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
		if (pin & 1) {
    f5ee:	f015 0f01 	tst.w	r5, #1
    f5f2:	b2c9      	uxtb	r1, r1
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    f5f4:	bf19      	ittee	ne
    f5f6:	f002 020f 	andne.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    f5fa:	ea42 1101 	orrne.w	r1, r2, r1, lsl #4
	tmp |= PORT_PMUX_PMUXE(data);
    f5fe:	f001 010f 	andeq.w	r1, r1, #15
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    f602:	f002 02f0 	andeq.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXO(data);
    f606:	bf14      	ite	ne
    f608:	b2c9      	uxtbne	r1, r1
	tmp |= PORT_PMUX_PMUXE(data);
    f60a:	4311      	orreq	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    f60c:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    f610:	e7df      	b.n	f5d2 <_gpio_set_pin_function+0x26>
    f612:	bf00      	nop
    f614:	41008000 	.word	0x41008000

0000f618 <gpio_set_pin_direction>:
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    f618:	f000 031f 	and.w	r3, r0, #31
{
    f61c:	b530      	push	{r4, r5, lr}
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
    f61e:	2501      	movs	r5, #1
    f620:	409d      	lsls	r5, r3
	switch (direction) {
    f622:	0940      	lsrs	r0, r0, #5
    f624:	4b0f      	ldr	r3, [pc, #60]	; (f664 <gpio_set_pin_direction+0x4c>)
    f626:	01c0      	lsls	r0, r0, #7
    f628:	2901      	cmp	r1, #1
    f62a:	b2ac      	uxth	r4, r5
    f62c:	ea4f 4215 	mov.w	r2, r5, lsr #16
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f630:	4403      	add	r3, r0
    f632:	d008      	beq.n	f646 <gpio_set_pin_direction+0x2e>
    f634:	2902      	cmp	r1, #2
    f636:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    f63a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    f63e:	d00e      	beq.n	f65e <gpio_set_pin_direction+0x46>
    f640:	605d      	str	r5, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    f642:	629c      	str	r4, [r3, #40]	; 0x28
    f644:	e009      	b.n	f65a <gpio_set_pin_direction+0x42>
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
    f646:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    f64a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
		hri_port_write_WRCONFIG_reg(PORT,
    f64e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f652:	605d      	str	r5, [r3, #4]
    f654:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    f658:	629c      	str	r4, [r3, #40]	; 0x28
    f65a:	629a      	str	r2, [r3, #40]	; 0x28
}
    f65c:	bd30      	pop	{r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    f65e:	609d      	str	r5, [r3, #8]
    f660:	e7ef      	b.n	f642 <gpio_set_pin_direction+0x2a>
    f662:	bf00      	nop
    f664:	41008000 	.word	0x41008000

0000f668 <gpio_set_pin_pull_mode>:
	switch (pull_mode) {
    f668:	0942      	lsrs	r2, r0, #5
    f66a:	2901      	cmp	r1, #1
    f66c:	4b0d      	ldr	r3, [pc, #52]	; (f6a4 <gpio_set_pin_pull_mode+0x3c>)
    f66e:	f000 001f 	and.w	r0, r0, #31
    f672:	ea4f 12c2 	mov.w	r2, r2, lsl #7
    f676:	d008      	beq.n	f68a <gpio_set_pin_pull_mode+0x22>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    f678:	4413      	add	r3, r2
    f67a:	4418      	add	r0, r3
    f67c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    f680:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    f684:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
    f688:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f68a:	4413      	add	r3, r2
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
    f68c:	4081      	lsls	r1, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    f68e:	4418      	add	r0, r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    f690:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    f692:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
    f696:	f042 0204 	orr.w	r2, r2, #4
    f69a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    f69e:	6199      	str	r1, [r3, #24]
}
    f6a0:	4770      	bx	lr
    f6a2:	bf00      	nop
    f6a4:	41008000 	.word	0x41008000

0000f6a8 <ADC_0_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    f6a8:	4a14      	ldr	r2, [pc, #80]	; (f6fc <ADC_0_init+0x54>)
 */
void ADC_0_init(void)
{
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    f6aa:	4915      	ldr	r1, [pc, #84]	; (f700 <ADC_0_init+0x58>)
    f6ac:	6a13      	ldr	r3, [r2, #32]
{
    f6ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f6b4:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    f6b6:	4b13      	ldr	r3, [pc, #76]	; (f704 <ADC_0_init+0x5c>)
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    f6b8:	4e13      	ldr	r6, [pc, #76]	; (f708 <ADC_0_init+0x60>)
    f6ba:	4d14      	ldr	r5, [pc, #80]	; (f70c <ADC_0_init+0x64>)
    f6bc:	4f14      	ldr	r7, [pc, #80]	; (f710 <ADC_0_init+0x68>)
{
    f6be:	b085      	sub	sp, #20
    f6c0:	2241      	movs	r2, #65	; 0x41
    f6c2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	adc_async_init(&ADC_0, ADC0, ADC_0_map, ADC_0_CH_MAX, ADC_0_CH_AMOUNT, &ADC_0_ch[0], (void *)NULL);
    f6c6:	4b13      	ldr	r3, [pc, #76]	; (f714 <ADC_0_init+0x6c>)
    f6c8:	9301      	str	r3, [sp, #4]
    f6ca:	2400      	movs	r4, #0
    f6cc:	2301      	movs	r3, #1
    f6ce:	9300      	str	r3, [sp, #0]
    f6d0:	4632      	mov	r2, r6
    f6d2:	4623      	mov	r3, r4
    f6d4:	9402      	str	r4, [sp, #8]
    f6d6:	4628      	mov	r0, r5
    f6d8:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_0, 0, ADC_0_buffer, ADC_0_BUFFER_SIZE);
    f6da:	1c72      	adds	r2, r6, #1
    f6dc:	4621      	mov	r1, r4
    f6de:	2310      	movs	r3, #16
    f6e0:	4628      	mov	r0, r5
    f6e2:	4d0d      	ldr	r5, [pc, #52]	; (f718 <ADC_0_init+0x70>)
    f6e4:	47a8      	blx	r5

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_OFF);
    f6e6:	4621      	mov	r1, r4
    f6e8:	4b0c      	ldr	r3, [pc, #48]	; (f71c <ADC_0_init+0x74>)
    f6ea:	2007      	movs	r0, #7
    f6ec:	4798      	blx	r3
	_gpio_set_pin_function(pin, function);
    f6ee:	490c      	ldr	r1, [pc, #48]	; (f720 <ADC_0_init+0x78>)
    f6f0:	4b0c      	ldr	r3, [pc, #48]	; (f724 <ADC_0_init+0x7c>)
    f6f2:	2007      	movs	r0, #7

	gpio_set_pin_function(PA07, PINMUX_PA07B_ADC0_AIN7);
}
    f6f4:	b005      	add	sp, #20
    f6f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f6fa:	4718      	bx	r3
    f6fc:	40000800 	.word	0x40000800
    f700:	43001c00 	.word	0x43001c00
    f704:	40001c00 	.word	0x40001c00
    f708:	20001020 	.word	0x20001020
    f70c:	20014be4 	.word	0x20014be4
    f710:	0000d70d 	.word	0x0000d70d
    f714:	20014ce0 	.word	0x20014ce0
    f718:	0000d7b1 	.word	0x0000d7b1
    f71c:	0000f619 	.word	0x0000f619
    f720:	00070001 	.word	0x00070001
    f724:	0000f5ad 	.word	0x0000f5ad

0000f728 <ADC_1_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    f728:	4a15      	ldr	r2, [pc, #84]	; (f780 <ADC_1_init+0x58>)
 */
void ADC_1_init(void)
{
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    f72a:	4916      	ldr	r1, [pc, #88]	; (f784 <ADC_1_init+0x5c>)
    f72c:	6a13      	ldr	r3, [r2, #32]
{
    f72e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    f734:	6213      	str	r3, [r2, #32]
    f736:	4b14      	ldr	r3, [pc, #80]	; (f788 <ADC_1_init+0x60>)
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    f738:	4e14      	ldr	r6, [pc, #80]	; (f78c <ADC_1_init+0x64>)
    f73a:	4d15      	ldr	r5, [pc, #84]	; (f790 <ADC_1_init+0x68>)
    f73c:	4f15      	ldr	r7, [pc, #84]	; (f794 <ADC_1_init+0x6c>)
{
    f73e:	b085      	sub	sp, #20
    f740:	2241      	movs	r2, #65	; 0x41
    f742:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	adc_async_init(&ADC_1, ADC1, ADC_1_map, ADC_1_CH_MAX, ADC_1_CH_AMOUNT, &ADC_1_ch[0], (void *)NULL);
    f746:	4b14      	ldr	r3, [pc, #80]	; (f798 <ADC_1_init+0x70>)
    f748:	9301      	str	r3, [sp, #4]
    f74a:	2400      	movs	r4, #0
    f74c:	2301      	movs	r3, #1
    f74e:	9300      	str	r3, [sp, #0]
    f750:	f106 0211 	add.w	r2, r6, #17
    f754:	4623      	mov	r3, r4
    f756:	9402      	str	r4, [sp, #8]
    f758:	4628      	mov	r0, r5
    f75a:	47b8      	blx	r7
	adc_async_register_channel_buffer(&ADC_1, 0, ADC_1_buffer, ADC_1_BUFFER_SIZE);
    f75c:	f106 0212 	add.w	r2, r6, #18
    f760:	4621      	mov	r1, r4
    f762:	2310      	movs	r3, #16
    f764:	4628      	mov	r0, r5
    f766:	4d0d      	ldr	r5, [pc, #52]	; (f79c <ADC_1_init+0x74>)
    f768:	47a8      	blx	r5

	// Disable digital pin circuitry
	gpio_set_pin_direction(PC02, GPIO_DIRECTION_OFF);
    f76a:	4621      	mov	r1, r4
    f76c:	4b0c      	ldr	r3, [pc, #48]	; (f7a0 <ADC_1_init+0x78>)
    f76e:	2042      	movs	r0, #66	; 0x42
    f770:	4798      	blx	r3
    f772:	490c      	ldr	r1, [pc, #48]	; (f7a4 <ADC_1_init+0x7c>)
    f774:	4b0c      	ldr	r3, [pc, #48]	; (f7a8 <ADC_1_init+0x80>)
    f776:	2042      	movs	r0, #66	; 0x42

	gpio_set_pin_function(PC02, PINMUX_PC02B_ADC1_AIN4);
}
    f778:	b005      	add	sp, #20
    f77a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f77e:	4718      	bx	r3
    f780:	40000800 	.word	0x40000800
    f784:	43002000 	.word	0x43002000
    f788:	40001c00 	.word	0x40001c00
    f78c:	20001020 	.word	0x20001020
    f790:	20014db8 	.word	0x20014db8
    f794:	0000d70d 	.word	0x0000d70d
    f798:	20014b78 	.word	0x20014b78
    f79c:	0000d7b1 	.word	0x0000d7b1
    f7a0:	0000f619 	.word	0x0000f619
    f7a4:	00420001 	.word	0x00420001
    f7a8:	0000f5ad 	.word	0x0000f5ad

0000f7ac <CRC_0_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_DSU;
    f7ac:	4a04      	ldr	r2, [pc, #16]	; (f7c0 <CRC_0_init+0x14>)
 * Enables CRC peripheral, clocks and initializes CRC driver
 */
void CRC_0_init(void)
{
	hri_mclk_set_APBBMASK_DSU_bit(MCLK);
	crc_sync_init(&CRC_0, DSU);
    f7ae:	4905      	ldr	r1, [pc, #20]	; (f7c4 <CRC_0_init+0x18>)
    f7b0:	6993      	ldr	r3, [r2, #24]
    f7b2:	4805      	ldr	r0, [pc, #20]	; (f7c8 <CRC_0_init+0x1c>)
    f7b4:	f043 0302 	orr.w	r3, r3, #2
    f7b8:	6193      	str	r3, [r2, #24]
    f7ba:	4b04      	ldr	r3, [pc, #16]	; (f7cc <CRC_0_init+0x20>)
    f7bc:	4718      	bx	r3
    f7be:	bf00      	nop
    f7c0:	40000800 	.word	0x40000800
    f7c4:	41002000 	.word	0x41002000
    f7c8:	20014b74 	.word	0x20014b74
    f7cc:	0000e665 	.word	0x0000e665

0000f7d0 <EVENT_SYSTEM_0_init>:
    f7d0:	4b08      	ldr	r3, [pc, #32]	; (f7f4 <EVENT_SYSTEM_0_init+0x24>)
    f7d2:	2240      	movs	r2, #64	; 0x40
    f7d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    f7d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    f7dc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    f7e0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    f7e4:	4a04      	ldr	r2, [pc, #16]	; (f7f8 <EVENT_SYSTEM_0_init+0x28>)
    f7e6:	6993      	ldr	r3, [r2, #24]
    f7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f7ec:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_2, CONF_GCLK_EVSYS_CHANNEL_2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_3, CONF_GCLK_EVSYS_CHANNEL_3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
    f7ee:	4b03      	ldr	r3, [pc, #12]	; (f7fc <EVENT_SYSTEM_0_init+0x2c>)
    f7f0:	4718      	bx	r3
    f7f2:	bf00      	nop
    f7f4:	40001c00 	.word	0x40001c00
    f7f8:	40000800 	.word	0x40000800
    f7fc:	000116c5 	.word	0x000116c5

0000f800 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    f800:	4a02      	ldr	r2, [pc, #8]	; (f80c <FLASH_0_CLOCK_init+0xc>)
    f802:	6913      	ldr	r3, [r2, #16]
    f804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f808:	6113      	str	r3, [r2, #16]

void FLASH_0_CLOCK_init(void)
{

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}
    f80a:	4770      	bx	lr
    f80c:	40000800 	.word	0x40000800

0000f810 <FLASH_0_init>:

void FLASH_0_init(void)
{
    f810:	b510      	push	{r4, lr}
	FLASH_0_CLOCK_init();
    f812:	4b04      	ldr	r3, [pc, #16]	; (f824 <FLASH_0_init+0x14>)
    f814:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
}
    f816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	flash_init(&FLASH_0, NVMCTRL);
    f81a:	4903      	ldr	r1, [pc, #12]	; (f828 <FLASH_0_init+0x18>)
    f81c:	4803      	ldr	r0, [pc, #12]	; (f82c <FLASH_0_init+0x1c>)
    f81e:	4b04      	ldr	r3, [pc, #16]	; (f830 <FLASH_0_init+0x20>)
    f820:	4718      	bx	r3
    f822:	bf00      	nop
    f824:	0000f801 	.word	0x0000f801
    f828:	41004000 	.word	0x41004000
    f82c:	20014b58 	.word	0x20014b58
    f830:	0000e10d 	.word	0x0000e10d

0000f834 <QSPI_INSTANCE_PORT_init>:

void QSPI_INSTANCE_PORT_init(void)
{
    f834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	// Set pin direction to input
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_IN);
    f838:	2101      	movs	r1, #1
    f83a:	4e24      	ldr	r6, [pc, #144]	; (f8cc <QSPI_INSTANCE_PORT_init+0x98>)

	gpio_set_pin_pull_mode(PB11,
    f83c:	4d24      	ldr	r5, [pc, #144]	; (f8d0 <QSPI_INSTANCE_PORT_init+0x9c>)
    f83e:	4c25      	ldr	r4, [pc, #148]	; (f8d4 <QSPI_INSTANCE_PORT_init+0xa0>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    f840:	4f25      	ldr	r7, [pc, #148]	; (f8d8 <QSPI_INSTANCE_PORT_init+0xa4>)
	gpio_set_pin_direction(PB11, GPIO_DIRECTION_IN);
    f842:	202b      	movs	r0, #43	; 0x2b
    f844:	47b0      	blx	r6
	gpio_set_pin_pull_mode(PB11,
    f846:	2100      	movs	r1, #0
    f848:	202b      	movs	r0, #43	; 0x2b
    f84a:	47a8      	blx	r5
    f84c:	4923      	ldr	r1, [pc, #140]	; (f8dc <QSPI_INSTANCE_PORT_init+0xa8>)
    f84e:	202b      	movs	r0, #43	; 0x2b
    f850:	47a0      	blx	r4
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB11, PINMUX_PB11H_QSPI_CS);

	gpio_set_pin_direction(PA08,
    f852:	2102      	movs	r1, #2
    f854:	2008      	movs	r0, #8
    f856:	47b0      	blx	r6
    f858:	f44f 7380 	mov.w	r3, #256	; 0x100
    f85c:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA08,
    f85e:	2100      	movs	r1, #0
    f860:	2008      	movs	r0, #8
    f862:	47a8      	blx	r5
    f864:	491e      	ldr	r1, [pc, #120]	; (f8e0 <QSPI_INSTANCE_PORT_init+0xac>)
    f866:	2008      	movs	r0, #8
    f868:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA08H_QSPI_DATA0);

	gpio_set_pin_direction(PA09,
    f86a:	2102      	movs	r1, #2
    f86c:	2009      	movs	r0, #9
    f86e:	47b0      	blx	r6
    f870:	f44f 7300 	mov.w	r3, #512	; 0x200
    f874:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA09,
    f876:	2100      	movs	r1, #0
    f878:	2009      	movs	r0, #9
    f87a:	47a8      	blx	r5
    f87c:	4919      	ldr	r1, [pc, #100]	; (f8e4 <QSPI_INSTANCE_PORT_init+0xb0>)
    f87e:	2009      	movs	r0, #9
    f880:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA09H_QSPI_DATA1);

	gpio_set_pin_direction(PA10,
    f882:	2102      	movs	r1, #2
    f884:	200a      	movs	r0, #10
    f886:	47b0      	blx	r6
    f888:	f44f 6380 	mov.w	r3, #1024	; 0x400
    f88c:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA10,
    f88e:	2100      	movs	r1, #0
    f890:	200a      	movs	r0, #10
    f892:	47a8      	blx	r5
    f894:	4914      	ldr	r1, [pc, #80]	; (f8e8 <QSPI_INSTANCE_PORT_init+0xb4>)
    f896:	200a      	movs	r0, #10
    f898:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA10H_QSPI_DATA2);

	gpio_set_pin_direction(PA11,
    f89a:	2102      	movs	r1, #2
    f89c:	200b      	movs	r0, #11
    f89e:	47b0      	blx	r6
    f8a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    f8a4:	617b      	str	r3, [r7, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA11,
    f8a6:	2100      	movs	r1, #0
    f8a8:	200b      	movs	r0, #11
    f8aa:	47a8      	blx	r5
    f8ac:	490f      	ldr	r1, [pc, #60]	; (f8ec <QSPI_INSTANCE_PORT_init+0xb8>)
    f8ae:	200b      	movs	r0, #11
    f8b0:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA11H_QSPI_DATA3);

	// Set pin direction to input
	gpio_set_pin_direction(PB10, GPIO_DIRECTION_IN);
    f8b2:	2101      	movs	r1, #1
    f8b4:	202a      	movs	r0, #42	; 0x2a
    f8b6:	47b0      	blx	r6

	gpio_set_pin_pull_mode(PB10,
    f8b8:	2100      	movs	r1, #0
    f8ba:	202a      	movs	r0, #42	; 0x2a
    f8bc:	47a8      	blx	r5
    f8be:	4623      	mov	r3, r4
    f8c0:	490b      	ldr	r1, [pc, #44]	; (f8f0 <QSPI_INSTANCE_PORT_init+0xbc>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
    f8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f8c6:	202a      	movs	r0, #42	; 0x2a
    f8c8:	4718      	bx	r3
    f8ca:	bf00      	nop
    f8cc:	0000f619 	.word	0x0000f619
    f8d0:	0000f669 	.word	0x0000f669
    f8d4:	0000f5ad 	.word	0x0000f5ad
    f8d8:	41008000 	.word	0x41008000
    f8dc:	002b0007 	.word	0x002b0007
    f8e0:	00080007 	.word	0x00080007
    f8e4:	00090007 	.word	0x00090007
    f8e8:	000a0007 	.word	0x000a0007
    f8ec:	000b0007 	.word	0x000b0007
    f8f0:	002a0007 	.word	0x002a0007

0000f8f4 <QSPI_INSTANCE_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
    f8f4:	4b06      	ldr	r3, [pc, #24]	; (f910 <QSPI_INSTANCE_CLOCK_init+0x1c>)
    f8f6:	691a      	ldr	r2, [r3, #16]
    f8f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f8fc:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
    f8fe:	691a      	ldr	r2, [r3, #16]
    f900:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    f904:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
    f906:	69da      	ldr	r2, [r3, #28]
    f908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f90c:	61da      	str	r2, [r3, #28]
void QSPI_INSTANCE_CLOCK_init(void)
{
	hri_mclk_set_AHBMASK_QSPI_bit(MCLK);
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}
    f90e:	4770      	bx	lr
    f910:	40000800 	.word	0x40000800

0000f914 <QSPI_INSTANCE_init>:

void QSPI_INSTANCE_init(void)
{
    f914:	b510      	push	{r4, lr}
	QSPI_INSTANCE_CLOCK_init();
    f916:	4b05      	ldr	r3, [pc, #20]	; (f92c <QSPI_INSTANCE_init+0x18>)
    f918:	4798      	blx	r3
	qspi_dma_init(&QSPI_INSTANCE, QSPI);
    f91a:	4b05      	ldr	r3, [pc, #20]	; (f930 <QSPI_INSTANCE_init+0x1c>)
    f91c:	4905      	ldr	r1, [pc, #20]	; (f934 <QSPI_INSTANCE_init+0x20>)
    f91e:	4806      	ldr	r0, [pc, #24]	; (f938 <QSPI_INSTANCE_init+0x24>)
    f920:	4798      	blx	r3
	QSPI_INSTANCE_PORT_init();
}
    f922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	QSPI_INSTANCE_PORT_init();
    f926:	4b05      	ldr	r3, [pc, #20]	; (f93c <QSPI_INSTANCE_init+0x28>)
    f928:	4718      	bx	r3
    f92a:	bf00      	nop
    f92c:	0000f8f5 	.word	0x0000f8f5
    f930:	00011695 	.word	0x00011695
    f934:	42003400 	.word	0x42003400
    f938:	20014e24 	.word	0x20014e24
    f93c:	0000f835 	.word	0x0000f835

0000f940 <USART_EAST_CLOCK_init>:
    f940:	4b06      	ldr	r3, [pc, #24]	; (f95c <USART_EAST_CLOCK_init+0x1c>)
    f942:	2241      	movs	r2, #65	; 0x41
    f944:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    f948:	2242      	movs	r2, #66	; 0x42
    f94a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
    f94e:	4a04      	ldr	r2, [pc, #16]	; (f960 <USART_EAST_CLOCK_init+0x20>)
    f950:	6953      	ldr	r3, [r2, #20]
    f952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f956:	6153      	str	r3, [r2, #20]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}
    f958:	4770      	bx	lr
    f95a:	bf00      	nop
    f95c:	40001c00 	.word	0x40001c00
    f960:	40000800 	.word	0x40000800

0000f964 <USART_EAST_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_EAST_PORT_init()
{
    f964:	b510      	push	{r4, lr}
    f966:	4c05      	ldr	r4, [pc, #20]	; (f97c <USART_EAST_PORT_init+0x18>)
    f968:	4905      	ldr	r1, [pc, #20]	; (f980 <USART_EAST_PORT_init+0x1c>)
    f96a:	2051      	movs	r0, #81	; 0x51
    f96c:	47a0      	blx	r4
    f96e:	4623      	mov	r3, r4
    f970:	4904      	ldr	r1, [pc, #16]	; (f984 <USART_EAST_PORT_init+0x20>)

	gpio_set_pin_function(PC17, PINMUX_PC17D_SERCOM0_PAD0);

	gpio_set_pin_function(PC16, PINMUX_PC16D_SERCOM0_PAD1);
}
    f972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f976:	2050      	movs	r0, #80	; 0x50
    f978:	4718      	bx	r3
    f97a:	bf00      	nop
    f97c:	0000f5ad 	.word	0x0000f5ad
    f980:	00510003 	.word	0x00510003
    f984:	00500003 	.word	0x00500003

0000f988 <USART_EAST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_EAST_init(void)
{
    f988:	b513      	push	{r0, r1, r4, lr}
	USART_EAST_CLOCK_init();
    f98a:	4b07      	ldr	r3, [pc, #28]	; (f9a8 <USART_EAST_init+0x20>)
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    f98c:	4c07      	ldr	r4, [pc, #28]	; (f9ac <USART_EAST_init+0x24>)
	USART_EAST_CLOCK_init();
    f98e:	4798      	blx	r3
	usart_async_init(&USART_EAST, SERCOM0, USART_EAST_buffer, USART_EAST_BUFFER_SIZE, (void *)NULL);
    f990:	2300      	movs	r3, #0
    f992:	9300      	str	r3, [sp, #0]
    f994:	4a06      	ldr	r2, [pc, #24]	; (f9b0 <USART_EAST_init+0x28>)
    f996:	4907      	ldr	r1, [pc, #28]	; (f9b4 <USART_EAST_init+0x2c>)
    f998:	4807      	ldr	r0, [pc, #28]	; (f9b8 <USART_EAST_init+0x30>)
    f99a:	2310      	movs	r3, #16
    f99c:	47a0      	blx	r4
	USART_EAST_PORT_init();
    f99e:	4b07      	ldr	r3, [pc, #28]	; (f9bc <USART_EAST_init+0x34>)
}
    f9a0:	b002      	add	sp, #8
    f9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_EAST_PORT_init();
    f9a6:	4718      	bx	r3
    f9a8:	0000f941 	.word	0x0000f941
    f9ac:	0001029d 	.word	0x0001029d
    f9b0:	20001042 	.word	0x20001042
    f9b4:	40003000 	.word	0x40003000
    f9b8:	20014c10 	.word	0x20014c10
    f9bc:	0000f965 	.word	0x0000f965

0000f9c0 <USART_NORTH_CLOCK_init>:
    f9c0:	4b06      	ldr	r3, [pc, #24]	; (f9dc <USART_NORTH_CLOCK_init+0x1c>)
    f9c2:	2241      	movs	r2, #65	; 0x41
    f9c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    f9c8:	2242      	movs	r2, #66	; 0x42
    f9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
    f9ce:	4a04      	ldr	r2, [pc, #16]	; (f9e0 <USART_NORTH_CLOCK_init+0x20>)
    f9d0:	6953      	ldr	r3, [r2, #20]
    f9d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f9d6:	6153      	str	r3, [r2, #20]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}
    f9d8:	4770      	bx	lr
    f9da:	bf00      	nop
    f9dc:	40001c00 	.word	0x40001c00
    f9e0:	40000800 	.word	0x40000800

0000f9e4 <USART_NORTH_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_NORTH_PORT_init()
{
    f9e4:	b510      	push	{r4, lr}
    f9e6:	4c05      	ldr	r4, [pc, #20]	; (f9fc <USART_NORTH_PORT_init+0x18>)
    f9e8:	4905      	ldr	r1, [pc, #20]	; (fa00 <USART_NORTH_PORT_init+0x1c>)
    f9ea:	205b      	movs	r0, #91	; 0x5b
    f9ec:	47a0      	blx	r4
    f9ee:	4623      	mov	r3, r4
    f9f0:	4904      	ldr	r1, [pc, #16]	; (fa04 <USART_NORTH_PORT_init+0x20>)

	gpio_set_pin_function(PC27, PINMUX_PC27C_SERCOM1_PAD0);

	gpio_set_pin_function(PC28, PINMUX_PC28C_SERCOM1_PAD1);
}
    f9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9f6:	205c      	movs	r0, #92	; 0x5c
    f9f8:	4718      	bx	r3
    f9fa:	bf00      	nop
    f9fc:	0000f5ad 	.word	0x0000f5ad
    fa00:	005b0002 	.word	0x005b0002
    fa04:	005c0002 	.word	0x005c0002

0000fa08 <USART_NORTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_NORTH_init(void)
{
    fa08:	b513      	push	{r0, r1, r4, lr}
	USART_NORTH_CLOCK_init();
    fa0a:	4b07      	ldr	r3, [pc, #28]	; (fa28 <USART_NORTH_init+0x20>)
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    fa0c:	4c07      	ldr	r4, [pc, #28]	; (fa2c <USART_NORTH_init+0x24>)
	USART_NORTH_CLOCK_init();
    fa0e:	4798      	blx	r3
	usart_async_init(&USART_NORTH, SERCOM1, USART_NORTH_buffer, USART_NORTH_BUFFER_SIZE, (void *)NULL);
    fa10:	2300      	movs	r3, #0
    fa12:	9300      	str	r3, [sp, #0]
    fa14:	4a06      	ldr	r2, [pc, #24]	; (fa30 <USART_NORTH_init+0x28>)
    fa16:	4907      	ldr	r1, [pc, #28]	; (fa34 <USART_NORTH_init+0x2c>)
    fa18:	4807      	ldr	r0, [pc, #28]	; (fa38 <USART_NORTH_init+0x30>)
    fa1a:	2310      	movs	r3, #16
    fa1c:	47a0      	blx	r4
	USART_NORTH_PORT_init();
    fa1e:	4b07      	ldr	r3, [pc, #28]	; (fa3c <USART_NORTH_init+0x34>)
}
    fa20:	b002      	add	sp, #8
    fa22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_NORTH_PORT_init();
    fa26:	4718      	bx	r3
    fa28:	0000f9c1 	.word	0x0000f9c1
    fa2c:	0001029d 	.word	0x0001029d
    fa30:	20001052 	.word	0x20001052
    fa34:	40003400 	.word	0x40003400
    fa38:	20014c64 	.word	0x20014c64
    fa3c:	0000f9e5 	.word	0x0000f9e5

0000fa40 <GRID_AUX_PORT_init>:

void GRID_AUX_PORT_init(void)
{
    fa40:	b510      	push	{r4, lr}
    fa42:	4c05      	ldr	r4, [pc, #20]	; (fa58 <GRID_AUX_PORT_init+0x18>)
    fa44:	4905      	ldr	r1, [pc, #20]	; (fa5c <GRID_AUX_PORT_init+0x1c>)
    fa46:	2039      	movs	r0, #57	; 0x39
    fa48:	47a0      	blx	r4
    fa4a:	4623      	mov	r3, r4
    fa4c:	4904      	ldr	r1, [pc, #16]	; (fa60 <GRID_AUX_PORT_init+0x20>)

	gpio_set_pin_function(PB25, PINMUX_PB25D_SERCOM2_PAD0);

	gpio_set_pin_function(PB24, PINMUX_PB24D_SERCOM2_PAD1);
}
    fa4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa52:	2038      	movs	r0, #56	; 0x38
    fa54:	4718      	bx	r3
    fa56:	bf00      	nop
    fa58:	0000f5ad 	.word	0x0000f5ad
    fa5c:	00390003 	.word	0x00390003
    fa60:	00380003 	.word	0x00380003

0000fa64 <GRID_AUX_CLOCK_init>:
    fa64:	4b06      	ldr	r3, [pc, #24]	; (fa80 <GRID_AUX_CLOCK_init+0x1c>)
    fa66:	2241      	movs	r2, #65	; 0x41
    fa68:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    fa6c:	2242      	movs	r2, #66	; 0x42
    fa6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
    fa72:	4a04      	ldr	r2, [pc, #16]	; (fa84 <GRID_AUX_CLOCK_init+0x20>)
    fa74:	6993      	ldr	r3, [r2, #24]
    fa76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fa7a:	6193      	str	r3, [r2, #24]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}
    fa7c:	4770      	bx	lr
    fa7e:	bf00      	nop
    fa80:	40001c00 	.word	0x40001c00
    fa84:	40000800 	.word	0x40000800

0000fa88 <GRID_AUX_init>:

void GRID_AUX_init(void)
{
    fa88:	b510      	push	{r4, lr}
	GRID_AUX_CLOCK_init();
    fa8a:	4b05      	ldr	r3, [pc, #20]	; (faa0 <GRID_AUX_init+0x18>)
    fa8c:	4798      	blx	r3
	usart_sync_init(&GRID_AUX, SERCOM2, (void *)NULL);
    fa8e:	4b05      	ldr	r3, [pc, #20]	; (faa4 <GRID_AUX_init+0x1c>)
    fa90:	4905      	ldr	r1, [pc, #20]	; (faa8 <GRID_AUX_init+0x20>)
    fa92:	4806      	ldr	r0, [pc, #24]	; (faac <GRID_AUX_init+0x24>)
    fa94:	2200      	movs	r2, #0
    fa96:	4798      	blx	r3
	GRID_AUX_PORT_init();
}
    fa98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GRID_AUX_PORT_init();
    fa9c:	4b04      	ldr	r3, [pc, #16]	; (fab0 <GRID_AUX_init+0x28>)
    fa9e:	4718      	bx	r3
    faa0:	0000fa65 	.word	0x0000fa65
    faa4:	0000dfc1 	.word	0x0000dfc1
    faa8:	41012000 	.word	0x41012000
    faac:	20014bd0 	.word	0x20014bd0
    fab0:	0000fa41 	.word	0x0000fa41

0000fab4 <UI_SPI_PORT_init>:

void UI_SPI_PORT_init(void)
{
    fab4:	b570      	push	{r4, r5, r6, lr}
    fab6:	4e12      	ldr	r6, [pc, #72]	; (fb00 <UI_SPI_PORT_init+0x4c>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB20, GPIO_DIRECTION_OUT);
    fab8:	4d12      	ldr	r5, [pc, #72]	; (fb04 <UI_SPI_PORT_init+0x50>)
    faba:	4c13      	ldr	r4, [pc, #76]	; (fb08 <UI_SPI_PORT_init+0x54>)
    fabc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    fac0:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
    fac4:	2102      	movs	r1, #2
    fac6:	2034      	movs	r0, #52	; 0x34
    fac8:	47a8      	blx	r5
    faca:	4910      	ldr	r1, [pc, #64]	; (fb0c <UI_SPI_PORT_init+0x58>)
    facc:	2034      	movs	r0, #52	; 0x34
    face:	47a0      	blx	r4
    fad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    fad4:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB21, GPIO_DIRECTION_OUT);
    fad8:	2102      	movs	r1, #2
    fada:	2035      	movs	r0, #53	; 0x35
    fadc:	47a8      	blx	r5
    fade:	490c      	ldr	r1, [pc, #48]	; (fb10 <UI_SPI_PORT_init+0x5c>)
    fae0:	2035      	movs	r0, #53	; 0x35
    fae2:	47a0      	blx	r4

	gpio_set_pin_function(PB21, PINMUX_PB21C_SERCOM3_PAD1);

	// Set pin direction to input
	gpio_set_pin_direction(PA20, GPIO_DIRECTION_IN);
    fae4:	2101      	movs	r1, #1
    fae6:	2014      	movs	r0, #20
    fae8:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PA20,
    faea:	4b0a      	ldr	r3, [pc, #40]	; (fb14 <UI_SPI_PORT_init+0x60>)
    faec:	2100      	movs	r1, #0
    faee:	2014      	movs	r0, #20
    faf0:	4798      	blx	r3
    faf2:	4623      	mov	r3, r4
    faf4:	4908      	ldr	r1, [pc, #32]	; (fb18 <UI_SPI_PORT_init+0x64>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA20, PINMUX_PA20D_SERCOM3_PAD2);
}
    faf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fafa:	2014      	movs	r0, #20
    fafc:	4718      	bx	r3
    fafe:	bf00      	nop
    fb00:	41008000 	.word	0x41008000
    fb04:	0000f619 	.word	0x0000f619
    fb08:	0000f5ad 	.word	0x0000f5ad
    fb0c:	00340002 	.word	0x00340002
    fb10:	00350002 	.word	0x00350002
    fb14:	0000f669 	.word	0x0000f669
    fb18:	00140003 	.word	0x00140003

0000fb1c <UI_SPI_CLOCK_init>:
    fb1c:	4b06      	ldr	r3, [pc, #24]	; (fb38 <UI_SPI_CLOCK_init+0x1c>)
    fb1e:	2241      	movs	r2, #65	; 0x41
    fb20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    fb24:	2243      	movs	r2, #67	; 0x43
    fb26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    fb2a:	4a04      	ldr	r2, [pc, #16]	; (fb3c <UI_SPI_CLOCK_init+0x20>)
    fb2c:	6993      	ldr	r3, [r2, #24]
    fb2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    fb32:	6193      	str	r3, [r2, #24]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}
    fb34:	4770      	bx	lr
    fb36:	bf00      	nop
    fb38:	40001c00 	.word	0x40001c00
    fb3c:	40000800 	.word	0x40000800

0000fb40 <UI_SPI_init>:

void UI_SPI_init(void)
{
    fb40:	b510      	push	{r4, lr}
	UI_SPI_CLOCK_init();
    fb42:	4b05      	ldr	r3, [pc, #20]	; (fb58 <UI_SPI_init+0x18>)
    fb44:	4798      	blx	r3
	spi_m_async_init(&UI_SPI, SERCOM3);
    fb46:	4b05      	ldr	r3, [pc, #20]	; (fb5c <UI_SPI_init+0x1c>)
    fb48:	4905      	ldr	r1, [pc, #20]	; (fb60 <UI_SPI_init+0x20>)
    fb4a:	4806      	ldr	r0, [pc, #24]	; (fb64 <UI_SPI_init+0x24>)
    fb4c:	4798      	blx	r3
	UI_SPI_PORT_init();
}
    fb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	UI_SPI_PORT_init();
    fb52:	4b05      	ldr	r3, [pc, #20]	; (fb68 <UI_SPI_init+0x28>)
    fb54:	4718      	bx	r3
    fb56:	bf00      	nop
    fb58:	0000fb1d 	.word	0x0000fb1d
    fb5c:	0000e475 	.word	0x0000e475
    fb60:	41014000 	.word	0x41014000
    fb64:	20014ad0 	.word	0x20014ad0
    fb68:	0000fab5 	.word	0x0000fab5

0000fb6c <USART_WEST_CLOCK_init>:
    fb6c:	4b06      	ldr	r3, [pc, #24]	; (fb88 <USART_WEST_CLOCK_init+0x1c>)
    fb6e:	2241      	movs	r2, #65	; 0x41
    fb70:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    fb74:	2242      	movs	r2, #66	; 0x42
    fb76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM4;
    fb7a:	4a04      	ldr	r2, [pc, #16]	; (fb8c <USART_WEST_CLOCK_init+0x20>)
    fb7c:	6a13      	ldr	r3, [r2, #32]
    fb7e:	f043 0301 	orr.w	r3, r3, #1
    fb82:	6213      	str	r3, [r2, #32]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM4_bit(MCLK);
}
    fb84:	4770      	bx	lr
    fb86:	bf00      	nop
    fb88:	40001c00 	.word	0x40001c00
    fb8c:	40000800 	.word	0x40000800

0000fb90 <USART_WEST_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_WEST_PORT_init()
{
    fb90:	b510      	push	{r4, lr}
    fb92:	4c05      	ldr	r4, [pc, #20]	; (fba8 <USART_WEST_PORT_init+0x18>)
    fb94:	4905      	ldr	r1, [pc, #20]	; (fbac <USART_WEST_PORT_init+0x1c>)
    fb96:	2028      	movs	r0, #40	; 0x28
    fb98:	47a0      	blx	r4
    fb9a:	4623      	mov	r3, r4
    fb9c:	4904      	ldr	r1, [pc, #16]	; (fbb0 <USART_WEST_PORT_init+0x20>)

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
    fb9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fba2:	2029      	movs	r0, #41	; 0x29
    fba4:	4718      	bx	r3
    fba6:	bf00      	nop
    fba8:	0000f5ad 	.word	0x0000f5ad
    fbac:	00280003 	.word	0x00280003
    fbb0:	00290003 	.word	0x00290003

0000fbb4 <USART_WEST_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_WEST_init(void)
{
    fbb4:	b513      	push	{r0, r1, r4, lr}
	USART_WEST_CLOCK_init();
    fbb6:	4b08      	ldr	r3, [pc, #32]	; (fbd8 <USART_WEST_init+0x24>)
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    fbb8:	4c08      	ldr	r4, [pc, #32]	; (fbdc <USART_WEST_init+0x28>)
	USART_WEST_CLOCK_init();
    fbba:	4798      	blx	r3
	usart_async_init(&USART_WEST, SERCOM4, USART_WEST_buffer, USART_WEST_BUFFER_SIZE, (void *)NULL);
    fbbc:	2300      	movs	r3, #0
    fbbe:	9300      	str	r3, [sp, #0]
    fbc0:	4a07      	ldr	r2, [pc, #28]	; (fbe0 <USART_WEST_init+0x2c>)
    fbc2:	4808      	ldr	r0, [pc, #32]	; (fbe4 <USART_WEST_init+0x30>)
    fbc4:	2310      	movs	r3, #16
    fbc6:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
    fbca:	47a0      	blx	r4
	USART_WEST_PORT_init();
    fbcc:	4b06      	ldr	r3, [pc, #24]	; (fbe8 <USART_WEST_init+0x34>)
}
    fbce:	b002      	add	sp, #8
    fbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_WEST_PORT_init();
    fbd4:	4718      	bx	r3
    fbd6:	bf00      	nop
    fbd8:	0000fb6d 	.word	0x0000fb6d
    fbdc:	0001029d 	.word	0x0001029d
    fbe0:	20001062 	.word	0x20001062
    fbe4:	20014d18 	.word	0x20014d18
    fbe8:	0000fb91 	.word	0x0000fb91

0000fbec <SYS_I2C_PORT_init>:

void SYS_I2C_PORT_init(void)
{
    fbec:	b570      	push	{r4, r5, r6, lr}

	gpio_set_pin_pull_mode(PA23,
    fbee:	2100      	movs	r1, #0
    fbf0:	4d07      	ldr	r5, [pc, #28]	; (fc10 <SYS_I2C_PORT_init+0x24>)
    fbf2:	4c08      	ldr	r4, [pc, #32]	; (fc14 <SYS_I2C_PORT_init+0x28>)
    fbf4:	2017      	movs	r0, #23
    fbf6:	47a8      	blx	r5
    fbf8:	4907      	ldr	r1, [pc, #28]	; (fc18 <SYS_I2C_PORT_init+0x2c>)
    fbfa:	2017      	movs	r0, #23
    fbfc:	47a0      	blx	r4
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);

	gpio_set_pin_pull_mode(PA22,
    fbfe:	2100      	movs	r1, #0
    fc00:	2016      	movs	r0, #22
    fc02:	47a8      	blx	r5
    fc04:	4623      	mov	r3, r4
    fc06:	4905      	ldr	r1, [pc, #20]	; (fc1c <SYS_I2C_PORT_init+0x30>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA22, PINMUX_PA22D_SERCOM5_PAD1);
}
    fc08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fc0c:	2016      	movs	r0, #22
    fc0e:	4718      	bx	r3
    fc10:	0000f669 	.word	0x0000f669
    fc14:	0000f5ad 	.word	0x0000f5ad
    fc18:	00170003 	.word	0x00170003
    fc1c:	00160003 	.word	0x00160003

0000fc20 <SYS_I2C_CLOCK_init>:
    fc20:	4b06      	ldr	r3, [pc, #24]	; (fc3c <SYS_I2C_CLOCK_init+0x1c>)
    fc22:	2241      	movs	r2, #65	; 0x41
    fc24:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    fc28:	2242      	movs	r2, #66	; 0x42
    fc2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    fc2e:	4a04      	ldr	r2, [pc, #16]	; (fc40 <SYS_I2C_CLOCK_init+0x20>)
    fc30:	6a13      	ldr	r3, [r2, #32]
    fc32:	f043 0302 	orr.w	r3, r3, #2
    fc36:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}
    fc38:	4770      	bx	lr
    fc3a:	bf00      	nop
    fc3c:	40001c00 	.word	0x40001c00
    fc40:	40000800 	.word	0x40000800

0000fc44 <SYS_I2C_init>:

void SYS_I2C_init(void)
{
    fc44:	b510      	push	{r4, lr}
	SYS_I2C_CLOCK_init();
    fc46:	4b05      	ldr	r3, [pc, #20]	; (fc5c <SYS_I2C_init+0x18>)
    fc48:	4798      	blx	r3
	i2c_m_async_init(&SYS_I2C, SERCOM5);
    fc4a:	4b05      	ldr	r3, [pc, #20]	; (fc60 <SYS_I2C_init+0x1c>)
    fc4c:	4905      	ldr	r1, [pc, #20]	; (fc64 <SYS_I2C_init+0x20>)
    fc4e:	4806      	ldr	r0, [pc, #24]	; (fc68 <SYS_I2C_init+0x24>)
    fc50:	4798      	blx	r3
	SYS_I2C_PORT_init();
}
    fc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SYS_I2C_PORT_init();
    fc56:	4b05      	ldr	r3, [pc, #20]	; (fc6c <SYS_I2C_init+0x28>)
    fc58:	4718      	bx	r3
    fc5a:	bf00      	nop
    fc5c:	0000fc21 	.word	0x0000fc21
    fc60:	0000b5c9 	.word	0x0000b5c9
    fc64:	43000400 	.word	0x43000400
    fc68:	20014b90 	.word	0x20014b90
    fc6c:	0000fbed 	.word	0x0000fbed

0000fc70 <USART_SOUTH_CLOCK_init>:
    fc70:	4b06      	ldr	r3, [pc, #24]	; (fc8c <USART_SOUTH_CLOCK_init+0x1c>)
    fc72:	2241      	movs	r2, #65	; 0x41
    fc74:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    fc78:	2242      	movs	r2, #66	; 0x42
    fc7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;
    fc7e:	4a04      	ldr	r2, [pc, #16]	; (fc90 <USART_SOUTH_CLOCK_init+0x20>)
    fc80:	6a13      	ldr	r3, [r2, #32]
    fc82:	f043 0304 	orr.w	r3, r3, #4
    fc86:	6213      	str	r3, [r2, #32]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_CORE, CONF_GCLK_SERCOM6_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM6_GCLK_ID_SLOW, CONF_GCLK_SERCOM6_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM6_bit(MCLK);
}
    fc88:	4770      	bx	lr
    fc8a:	bf00      	nop
    fc8c:	40001c00 	.word	0x40001c00
    fc90:	40000800 	.word	0x40000800

0000fc94 <USART_SOUTH_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_SOUTH_PORT_init()
{
    fc94:	b510      	push	{r4, lr}
    fc96:	4c05      	ldr	r4, [pc, #20]	; (fcac <USART_SOUTH_PORT_init+0x18>)
    fc98:	4905      	ldr	r1, [pc, #20]	; (fcb0 <USART_SOUTH_PORT_init+0x1c>)
    fc9a:	204d      	movs	r0, #77	; 0x4d
    fc9c:	47a0      	blx	r4
    fc9e:	4623      	mov	r3, r4
    fca0:	4904      	ldr	r1, [pc, #16]	; (fcb4 <USART_SOUTH_PORT_init+0x20>)

	gpio_set_pin_function(PC13, PINMUX_PC13D_SERCOM6_PAD0);

	gpio_set_pin_function(PC12, PINMUX_PC12D_SERCOM6_PAD1);
}
    fca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fca6:	204c      	movs	r0, #76	; 0x4c
    fca8:	4718      	bx	r3
    fcaa:	bf00      	nop
    fcac:	0000f5ad 	.word	0x0000f5ad
    fcb0:	004d0003 	.word	0x004d0003
    fcb4:	004c0003 	.word	0x004c0003

0000fcb8 <USART_SOUTH_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_SOUTH_init(void)
{
    fcb8:	b513      	push	{r0, r1, r4, lr}
	USART_SOUTH_CLOCK_init();
    fcba:	4b07      	ldr	r3, [pc, #28]	; (fcd8 <USART_SOUTH_init+0x20>)
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    fcbc:	4c07      	ldr	r4, [pc, #28]	; (fcdc <USART_SOUTH_init+0x24>)
	USART_SOUTH_CLOCK_init();
    fcbe:	4798      	blx	r3
	usart_async_init(&USART_SOUTH, SERCOM6, USART_SOUTH_buffer, USART_SOUTH_BUFFER_SIZE, (void *)NULL);
    fcc0:	2300      	movs	r3, #0
    fcc2:	9300      	str	r3, [sp, #0]
    fcc4:	4a06      	ldr	r2, [pc, #24]	; (fce0 <USART_SOUTH_init+0x28>)
    fcc6:	4907      	ldr	r1, [pc, #28]	; (fce4 <USART_SOUTH_init+0x2c>)
    fcc8:	4807      	ldr	r0, [pc, #28]	; (fce8 <USART_SOUTH_init+0x30>)
    fcca:	2310      	movs	r3, #16
    fccc:	47a0      	blx	r4
	USART_SOUTH_PORT_init();
    fcce:	4b07      	ldr	r3, [pc, #28]	; (fcec <USART_SOUTH_init+0x34>)
}
    fcd0:	b002      	add	sp, #8
    fcd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USART_SOUTH_PORT_init();
    fcd6:	4718      	bx	r3
    fcd8:	0000fc71 	.word	0x0000fc71
    fcdc:	0001029d 	.word	0x0001029d
    fce0:	20001072 	.word	0x20001072
    fce4:	43000800 	.word	0x43000800
    fce8:	20014d68 	.word	0x20014d68
    fcec:	0000fc95 	.word	0x0000fc95

0000fcf0 <GRID_LED_PORT_init>:

void GRID_LED_PORT_init(void)
{
    fcf0:	b570      	push	{r4, r5, r6, lr}
    fcf2:	4e12      	ldr	r6, [pc, #72]	; (fd3c <GRID_LED_PORT_init+0x4c>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB30, GPIO_DIRECTION_OUT);
    fcf4:	4d12      	ldr	r5, [pc, #72]	; (fd40 <GRID_LED_PORT_init+0x50>)
    fcf6:	4c13      	ldr	r4, [pc, #76]	; (fd44 <GRID_LED_PORT_init+0x54>)
    fcf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    fcfc:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
    fd00:	2102      	movs	r1, #2
    fd02:	203e      	movs	r0, #62	; 0x3e
    fd04:	47a8      	blx	r5
    fd06:	4910      	ldr	r1, [pc, #64]	; (fd48 <GRID_LED_PORT_init+0x58>)
    fd08:	203e      	movs	r0, #62	; 0x3e
    fd0a:	47a0      	blx	r4
    fd0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    fd10:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB31, GPIO_DIRECTION_OUT);
    fd14:	2102      	movs	r1, #2
    fd16:	203f      	movs	r0, #63	; 0x3f
    fd18:	47a8      	blx	r5
    fd1a:	490c      	ldr	r1, [pc, #48]	; (fd4c <GRID_LED_PORT_init+0x5c>)
    fd1c:	203f      	movs	r0, #63	; 0x3f
    fd1e:	47a0      	blx	r4

	gpio_set_pin_function(PB31, PINMUX_PB31C_SERCOM7_PAD1);

	// Set pin direction to input
	gpio_set_pin_direction(PA30, GPIO_DIRECTION_IN);
    fd20:	2101      	movs	r1, #1
    fd22:	201e      	movs	r0, #30
    fd24:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PA30,
    fd26:	4b0a      	ldr	r3, [pc, #40]	; (fd50 <GRID_LED_PORT_init+0x60>)
    fd28:	2100      	movs	r1, #0
    fd2a:	201e      	movs	r0, #30
    fd2c:	4798      	blx	r3
    fd2e:	4623      	mov	r3, r4
    fd30:	4908      	ldr	r1, [pc, #32]	; (fd54 <GRID_LED_PORT_init+0x64>)
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA30, PINMUX_PA30C_SERCOM7_PAD2);
}
    fd32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd36:	201e      	movs	r0, #30
    fd38:	4718      	bx	r3
    fd3a:	bf00      	nop
    fd3c:	41008000 	.word	0x41008000
    fd40:	0000f619 	.word	0x0000f619
    fd44:	0000f5ad 	.word	0x0000f5ad
    fd48:	003e0002 	.word	0x003e0002
    fd4c:	003f0002 	.word	0x003f0002
    fd50:	0000f669 	.word	0x0000f669
    fd54:	001e0002 	.word	0x001e0002

0000fd58 <GRID_LED_CLOCK_init>:
    fd58:	4b06      	ldr	r3, [pc, #24]	; (fd74 <GRID_LED_CLOCK_init+0x1c>)
    fd5a:	2241      	movs	r2, #65	; 0x41
    fd5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    fd60:	2242      	movs	r2, #66	; 0x42
    fd62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
    fd66:	4a04      	ldr	r2, [pc, #16]	; (fd78 <GRID_LED_CLOCK_init+0x20>)
    fd68:	6a13      	ldr	r3, [r2, #32]
    fd6a:	f043 0308 	orr.w	r3, r3, #8
    fd6e:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}
    fd70:	4770      	bx	lr
    fd72:	bf00      	nop
    fd74:	40001c00 	.word	0x40001c00
    fd78:	40000800 	.word	0x40000800

0000fd7c <GRID_LED_init>:

void GRID_LED_init(void)
{
    fd7c:	b510      	push	{r4, lr}
	GRID_LED_CLOCK_init();
    fd7e:	4b05      	ldr	r3, [pc, #20]	; (fd94 <GRID_LED_init+0x18>)
    fd80:	4798      	blx	r3
	spi_m_dma_init(&GRID_LED, SERCOM7);
    fd82:	4b05      	ldr	r3, [pc, #20]	; (fd98 <GRID_LED_init+0x1c>)
    fd84:	4905      	ldr	r1, [pc, #20]	; (fd9c <GRID_LED_init+0x20>)
    fd86:	4806      	ldr	r0, [pc, #24]	; (fda0 <GRID_LED_init+0x24>)
    fd88:	4798      	blx	r3
	GRID_LED_PORT_init();
}
    fd8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	GRID_LED_PORT_init();
    fd8e:	4b05      	ldr	r3, [pc, #20]	; (fda4 <GRID_LED_init+0x28>)
    fd90:	4718      	bx	r3
    fd92:	bf00      	nop
    fd94:	0000fd59 	.word	0x0000fd59
    fd98:	0000b7a5 	.word	0x0000b7a5
    fd9c:	43000c00 	.word	0x43000c00
    fda0:	20014cb4 	.word	0x20014cb4
    fda4:	0000fcf1 	.word	0x0000fcf1

0000fda8 <delay_driver_init>:

void delay_driver_init(void)
{
	delay_init(SysTick);
    fda8:	4801      	ldr	r0, [pc, #4]	; (fdb0 <delay_driver_init+0x8>)
    fdaa:	4b02      	ldr	r3, [pc, #8]	; (fdb4 <delay_driver_init+0xc>)
    fdac:	4718      	bx	r3
    fdae:	bf00      	nop
    fdb0:	e000e010 	.word	0xe000e010
    fdb4:	0000d131 	.word	0x0000d131

0000fdb8 <RAND_0_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TRNG;
    fdb8:	4a02      	ldr	r2, [pc, #8]	; (fdc4 <RAND_0_CLOCK_init+0xc>)
    fdba:	69d3      	ldr	r3, [r2, #28]
    fdbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    fdc0:	61d3      	str	r3, [r2, #28]
}

void RAND_0_CLOCK_init(void)
{
	hri_mclk_set_APBCMASK_TRNG_bit(MCLK);
}
    fdc2:	4770      	bx	lr
    fdc4:	40000800 	.word	0x40000800

0000fdc8 <RAND_0_init>:

void RAND_0_init(void)
{
    fdc8:	b510      	push	{r4, lr}
	RAND_0_CLOCK_init();
    fdca:	4b04      	ldr	r3, [pc, #16]	; (fddc <RAND_0_init+0x14>)
    fdcc:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
}
    fdce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rand_sync_init(&RAND_0, TRNG);
    fdd2:	4903      	ldr	r1, [pc, #12]	; (fde0 <RAND_0_init+0x18>)
    fdd4:	4803      	ldr	r0, [pc, #12]	; (fde4 <RAND_0_init+0x1c>)
    fdd6:	4b04      	ldr	r3, [pc, #16]	; (fde8 <RAND_0_init+0x20>)
    fdd8:	4718      	bx	r3
    fdda:	bf00      	nop
    fddc:	0000fdb9 	.word	0x0000fdb9
    fde0:	42002800 	.word	0x42002800
    fde4:	20014bdc 	.word	0x20014bdc
    fde8:	0000db39 	.word	0x0000db39

0000fdec <USB_DEVICE_INSTANCE_PORT_init>:

void USB_DEVICE_INSTANCE_PORT_init(void)
{
    fdec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	gpio_set_pin_direction(PA24,
    fdf0:	2102      	movs	r1, #2
    fdf2:	4f0f      	ldr	r7, [pc, #60]	; (fe30 <USB_DEVICE_INSTANCE_PORT_init+0x44>)
    fdf4:	4e0f      	ldr	r6, [pc, #60]	; (fe34 <USB_DEVICE_INSTANCE_PORT_init+0x48>)
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA24,
    fdf6:	4d10      	ldr	r5, [pc, #64]	; (fe38 <USB_DEVICE_INSTANCE_PORT_init+0x4c>)
    fdf8:	4c10      	ldr	r4, [pc, #64]	; (fe3c <USB_DEVICE_INSTANCE_PORT_init+0x50>)
	gpio_set_pin_direction(PA24,
    fdfa:	2018      	movs	r0, #24
    fdfc:	47b8      	blx	r7
    fdfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    fe02:	6173      	str	r3, [r6, #20]
	gpio_set_pin_pull_mode(PA24,
    fe04:	2100      	movs	r1, #0
    fe06:	2018      	movs	r0, #24
    fe08:	47a8      	blx	r5
    fe0a:	490d      	ldr	r1, [pc, #52]	; (fe40 <USB_DEVICE_INSTANCE_PORT_init+0x54>)
    fe0c:	2018      	movs	r0, #24
    fe0e:	47a0      	blx	r4
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA24H_USB_DM);

	gpio_set_pin_direction(PA25,
    fe10:	2102      	movs	r1, #2
    fe12:	2019      	movs	r0, #25
    fe14:	47b8      	blx	r7
    fe16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    fe1a:	6173      	str	r3, [r6, #20]
	                   // <id> pad_initial_level
	                   // <false"> Low
	                   // <true"> High
	                   false);

	gpio_set_pin_pull_mode(PA25,
    fe1c:	2100      	movs	r1, #0
    fe1e:	2019      	movs	r0, #25
    fe20:	47a8      	blx	r5
    fe22:	4623      	mov	r3, r4
    fe24:	4907      	ldr	r1, [pc, #28]	; (fe44 <USB_DEVICE_INSTANCE_PORT_init+0x58>)
	                      // <GPIO_PIN_FUNCTION_K"> K
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      PINMUX_PA25H_USB_DP);
}
    fe26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fe2a:	2019      	movs	r0, #25
    fe2c:	4718      	bx	r3
    fe2e:	bf00      	nop
    fe30:	0000f619 	.word	0x0000f619
    fe34:	41008000 	.word	0x41008000
    fe38:	0000f669 	.word	0x0000f669
    fe3c:	0000f5ad 	.word	0x0000f5ad
    fe40:	00180007 	.word	0x00180007
    fe44:	00190007 	.word	0x00190007

0000fe48 <USB_DEVICE_INSTANCE_CLOCK_init>:
    fe48:	4b07      	ldr	r3, [pc, #28]	; (fe68 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
    fe4a:	2241      	movs	r2, #65	; 0x41
    fe4c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
    fe50:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
    fe54:	691a      	ldr	r2, [r3, #16]
    fe56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    fe5a:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
    fe5c:	699a      	ldr	r2, [r3, #24]
    fe5e:	f042 0201 	orr.w	r2, r2, #1
    fe62:	619a      	str	r2, [r3, #24]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}
    fe64:	4770      	bx	lr
    fe66:	bf00      	nop
    fe68:	40001c00 	.word	0x40001c00

0000fe6c <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
    fe6c:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
    fe6e:	4b04      	ldr	r3, [pc, #16]	; (fe80 <USB_DEVICE_INSTANCE_init+0x14>)
    fe70:	4798      	blx	r3
	usb_d_init();
    fe72:	4b04      	ldr	r3, [pc, #16]	; (fe84 <USB_DEVICE_INSTANCE_init+0x18>)
    fe74:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
}
    fe76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USB_DEVICE_INSTANCE_PORT_init();
    fe7a:	4b03      	ldr	r3, [pc, #12]	; (fe88 <USB_DEVICE_INSTANCE_init+0x1c>)
    fe7c:	4718      	bx	r3
    fe7e:	bf00      	nop
    fe80:	0000fe49 	.word	0x0000fe49
    fe84:	0000e869 	.word	0x0000e869
    fe88:	0000fded 	.word	0x0000fded

0000fe8c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    fe8c:	4a02      	ldr	r2, [pc, #8]	; (fe98 <WDT_0_CLOCK_init+0xc>)
    fe8e:	6953      	ldr	r3, [r2, #20]
    fe90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    fe94:	6153      	str	r3, [r2, #20]

void WDT_0_CLOCK_init(void)
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}
    fe96:	4770      	bx	lr
    fe98:	40000800 	.word	0x40000800

0000fe9c <WDT_0_init>:

void WDT_0_init(void)
{
    fe9c:	b510      	push	{r4, lr}
	WDT_0_CLOCK_init();
    fe9e:	4b07      	ldr	r3, [pc, #28]	; (febc <WDT_0_init+0x20>)
    fea0:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
    fea2:	4b07      	ldr	r3, [pc, #28]	; (fec0 <WDT_0_init+0x24>)
    fea4:	4907      	ldr	r1, [pc, #28]	; (fec4 <WDT_0_init+0x28>)
    fea6:	2001      	movs	r0, #1
    fea8:	2248      	movs	r2, #72	; 0x48
    feaa:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
    feac:	4806      	ldr	r0, [pc, #24]	; (fec8 <WDT_0_init+0x2c>)
    feae:	4b07      	ldr	r3, [pc, #28]	; (fecc <WDT_0_init+0x30>)
    feb0:	6003      	str	r3, [r0, #0]
	wdt_init(&WDT_0, WDT);
}
    feb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	return _wdt_init(&wdt->dev);
    feb6:	4b06      	ldr	r3, [pc, #24]	; (fed0 <WDT_0_init+0x34>)
    feb8:	4718      	bx	r3
    feba:	bf00      	nop
    febc:	0000fe8d 	.word	0x0000fe8d
    fec0:	0000d415 	.word	0x0000d415
    fec4:	0001605b 	.word	0x0001605b
    fec8:	20014c60 	.word	0x20014c60
    fecc:	40002000 	.word	0x40002000
    fed0:	0000b635 	.word	0x0000b635

0000fed4 <system_init>:

void system_init(void)
{
    fed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    fed8:	4b7c      	ldr	r3, [pc, #496]	; (100cc <STACK_SIZE+0xcc>)
    feda:	4c7d      	ldr	r4, [pc, #500]	; (100d0 <STACK_SIZE+0xd0>)
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    fedc:	4d7d      	ldr	r5, [pc, #500]	; (100d4 <STACK_SIZE+0xd4>)
	// GPIO on PA21

	// Set pin direction to input
	gpio_set_pin_direction(PIN_UI_SPI_CS0, GPIO_DIRECTION_IN);

	gpio_set_pin_pull_mode(PIN_UI_SPI_CS0,
    fede:	4e7e      	ldr	r6, [pc, #504]	; (100d8 <STACK_SIZE+0xd8>)
    fee0:	4798      	blx	r3
    fee2:	2320      	movs	r3, #32
    fee4:	6163      	str	r3, [r4, #20]
	gpio_set_pin_direction(LED0, GPIO_DIRECTION_OUT);
    fee6:	2102      	movs	r1, #2
    fee8:	2005      	movs	r0, #5
    feea:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    feec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    fef0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    fef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	gpio_set_pin_direction(PIN_UI_SPI_CS0, GPIO_DIRECTION_IN);
    fef8:	2101      	movs	r1, #1
    fefa:	2015      	movs	r0, #21
    fefc:	47a8      	blx	r5
	gpio_set_pin_pull_mode(PIN_UI_SPI_CS0,
    fefe:	2100      	movs	r1, #0
    ff00:	2015      	movs	r0, #21
    ff02:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ff04:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
    ff08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ff0c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
	gpio_set_pin_function(PIN_UI_SPI_CS0, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PB07

	// Set pin direction to input
	gpio_set_pin_direction(PIN_GRID_SYNC_2, GPIO_DIRECTION_IN);
    ff10:	2101      	movs	r1, #1
    ff12:	2027      	movs	r0, #39	; 0x27
    ff14:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PIN_GRID_SYNC_2,
    ff16:	2100      	movs	r1, #0
    ff18:	2027      	movs	r0, #39	; 0x27
    ff1a:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ff1c:	f894 30c7 	ldrb.w	r3, [r4, #199]	; 0xc7
	tmp &= ~PORT_PINCFG_PMUXEN;
    ff20:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ff24:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ff28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    ff2c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(HWCFG_SHIFT, GPIO_DIRECTION_OUT);
    ff30:	2102      	movs	r1, #2
    ff32:	202d      	movs	r0, #45	; 0x2d
    ff34:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ff36:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ff3a:	f44f 4780 	mov.w	r7, #16384	; 0x4000
	tmp &= ~PORT_PINCFG_PMUXEN;
    ff3e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ff42:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(HWCFG_CLOCK, GPIO_DIRECTION_OUT);
    ff46:	2102      	movs	r1, #2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ff48:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
    ff4c:	202e      	movs	r0, #46	; 0x2e
    ff4e:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ff50:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
	tmp &= ~PORT_PINCFG_PMUXEN;
    ff54:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ff58:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	gpio_set_pin_function(HWCFG_CLOCK, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PB15

	// Set pin direction to input
	gpio_set_pin_direction(HWCFG_DATA, GPIO_DIRECTION_IN);
    ff5c:	2101      	movs	r1, #1
    ff5e:	202f      	movs	r0, #47	; 0x2f
    ff60:	47a8      	blx	r5

	gpio_set_pin_pull_mode(HWCFG_DATA,
    ff62:	2100      	movs	r1, #0
    ff64:	202f      	movs	r0, #47	; 0x2f
    ff66:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ff68:	f894 30cf 	ldrb.w	r3, [r4, #207]	; 0xcf
	tmp &= ~PORT_PINCFG_PMUXEN;
    ff6c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ff70:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
	gpio_set_pin_function(HWCFG_DATA, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PC11

	// Set pin direction to input
	gpio_set_pin_direction(MAP_MODE, GPIO_DIRECTION_IN);
    ff74:	2101      	movs	r1, #1
    ff76:	204b      	movs	r0, #75	; 0x4b
    ff78:	47a8      	blx	r5

	gpio_set_pin_pull_mode(MAP_MODE,
    ff7a:	2101      	movs	r1, #1
    ff7c:	204b      	movs	r0, #75	; 0x4b
    ff7e:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ff80:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
    ff84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ff88:	f884 314b 	strb.w	r3, [r4, #331]	; 0x14b
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(UI_PWR_EN, GPIO_DIRECTION_OUT);
    ff8c:	2102      	movs	r1, #2
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ff8e:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
    ff92:	204e      	movs	r0, #78	; 0x4e
    ff94:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ff96:	f894 314e 	ldrb.w	r3, [r4, #334]	; 0x14e
	tmp &= ~PORT_PINCFG_PMUXEN;
    ff9a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ff9e:	f884 314e 	strb.w	r3, [r4, #334]	; 0x14e
	gpio_set_pin_function(UI_PWR_EN, GPIO_PIN_FUNCTION_OFF);

	// GPIO on PC18

	// Set pin direction to input
	gpio_set_pin_direction(PIN_GRID_SYNC_1, GPIO_DIRECTION_IN);
    ffa2:	2101      	movs	r1, #1
    ffa4:	2052      	movs	r0, #82	; 0x52
    ffa6:	47a8      	blx	r5

	gpio_set_pin_pull_mode(PIN_GRID_SYNC_1,
    ffa8:	2100      	movs	r1, #0
    ffaa:	2052      	movs	r0, #82	; 0x52
    ffac:	47b0      	blx	r6
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ffae:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	timer_init(&TIMER_0, TC0, _tc_get_timer());
    ffb2:	4e4a      	ldr	r6, [pc, #296]	; (100dc <STACK_SIZE+0xdc>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    ffb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ffb8:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ffbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    ffc0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_A, GPIO_DIRECTION_OUT);
    ffc4:	2102      	movs	r1, #2
    ffc6:	2053      	movs	r0, #83	; 0x53
    ffc8:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ffca:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
	tmp &= ~PORT_PINCFG_PMUXEN;
    ffce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ffd2:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    ffd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    ffda:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_B, GPIO_DIRECTION_OUT);
    ffde:	2102      	movs	r1, #2
    ffe0:	2054      	movs	r0, #84	; 0x54
    ffe2:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    ffe4:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	tmp &= ~PORT_PINCFG_PMUXEN;
    ffe8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    ffec:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    fff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(MUX_C, GPIO_DIRECTION_OUT);
    fff4:	2102      	movs	r1, #2
    fff6:	2055      	movs	r0, #85	; 0x55
    fff8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fffc:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    fffe:	f894 3155 	ldrb.w	r3, [r4, #341]	; 0x155
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
   10002:	4d37      	ldr	r5, [pc, #220]	; (100e0 <STACK_SIZE+0xe0>)
	tmp &= ~PORT_PINCFG_PMUXEN;
   10004:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
   10008:	f884 3155 	strb.w	r3, [r4, #341]	; 0x155

	gpio_set_pin_function(MUX_C, GPIO_PIN_FUNCTION_OFF);

	ADC_0_init();
   1000c:	4b35      	ldr	r3, [pc, #212]	; (100e4 <STACK_SIZE+0xe4>)
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
   1000e:	4c36      	ldr	r4, [pc, #216]	; (100e8 <STACK_SIZE+0xe8>)
   10010:	4798      	blx	r3
	ADC_1_init();
   10012:	4b36      	ldr	r3, [pc, #216]	; (100ec <STACK_SIZE+0xec>)
   10014:	4798      	blx	r3

	CRC_0_init();
   10016:	4b36      	ldr	r3, [pc, #216]	; (100f0 <STACK_SIZE+0xf0>)
   10018:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
   1001a:	4b36      	ldr	r3, [pc, #216]	; (100f4 <STACK_SIZE+0xf4>)
   1001c:	4798      	blx	r3

	FLASH_0_init();
   1001e:	4b36      	ldr	r3, [pc, #216]	; (100f8 <STACK_SIZE+0xf8>)
   10020:	4798      	blx	r3

	QSPI_INSTANCE_init();
   10022:	4b36      	ldr	r3, [pc, #216]	; (100fc <STACK_SIZE+0xfc>)
   10024:	4798      	blx	r3
   10026:	6963      	ldr	r3, [r4, #20]
   10028:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1002c:	6163      	str	r3, [r4, #20]
	timer_init(&RTC_Scheduler, RTC, _rtc_get_timer());
   1002e:	4b34      	ldr	r3, [pc, #208]	; (10100 <STACK_SIZE+0x100>)
   10030:	4798      	blx	r3
   10032:	4934      	ldr	r1, [pc, #208]	; (10104 <STACK_SIZE+0x104>)
   10034:	4602      	mov	r2, r0
   10036:	4834      	ldr	r0, [pc, #208]	; (10108 <STACK_SIZE+0x108>)
   10038:	47a8      	blx	r5

	RTC_Scheduler_init();
	USART_EAST_init();
   1003a:	4b34      	ldr	r3, [pc, #208]	; (1010c <STACK_SIZE+0x10c>)
   1003c:	4798      	blx	r3
	USART_NORTH_init();
   1003e:	4b34      	ldr	r3, [pc, #208]	; (10110 <STACK_SIZE+0x110>)
   10040:	4798      	blx	r3

	GRID_AUX_init();
   10042:	4b34      	ldr	r3, [pc, #208]	; (10114 <STACK_SIZE+0x114>)
   10044:	4798      	blx	r3

	UI_SPI_init();
   10046:	4b34      	ldr	r3, [pc, #208]	; (10118 <STACK_SIZE+0x118>)
   10048:	4798      	blx	r3
	USART_WEST_init();
   1004a:	4b34      	ldr	r3, [pc, #208]	; (1011c <STACK_SIZE+0x11c>)
   1004c:	4798      	blx	r3

	SYS_I2C_init();
   1004e:	4b34      	ldr	r3, [pc, #208]	; (10120 <STACK_SIZE+0x120>)
   10050:	4798      	blx	r3
	USART_SOUTH_init();
   10052:	4b34      	ldr	r3, [pc, #208]	; (10124 <STACK_SIZE+0x124>)
   10054:	4798      	blx	r3

	GRID_LED_init();
   10056:	4b34      	ldr	r3, [pc, #208]	; (10128 <STACK_SIZE+0x128>)
   10058:	4798      	blx	r3

	delay_driver_init();
   1005a:	4b34      	ldr	r3, [pc, #208]	; (1012c <STACK_SIZE+0x12c>)
   1005c:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
   1005e:	6963      	ldr	r3, [r4, #20]
   10060:	433b      	orrs	r3, r7
   10062:	4f33      	ldr	r7, [pc, #204]	; (10130 <STACK_SIZE+0x130>)
   10064:	6163      	str	r3, [r4, #20]
   10066:	f04f 0840 	mov.w	r8, #64	; 0x40
   1006a:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_0, TC0, _tc_get_timer());
   1006e:	47b0      	blx	r6
   10070:	4930      	ldr	r1, [pc, #192]	; (10134 <STACK_SIZE+0x134>)
   10072:	4602      	mov	r2, r0
   10074:	4830      	ldr	r0, [pc, #192]	; (10138 <STACK_SIZE+0x138>)
   10076:	47a8      	blx	r5
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
   10078:	6963      	ldr	r3, [r4, #20]
   1007a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   1007e:	6163      	str	r3, [r4, #20]
   10080:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
	timer_init(&TIMER_1, TC1, _tc_get_timer());
   10084:	47b0      	blx	r6
   10086:	492d      	ldr	r1, [pc, #180]	; (1013c <STACK_SIZE+0x13c>)
   10088:	4602      	mov	r2, r0
   1008a:	482d      	ldr	r0, [pc, #180]	; (10140 <STACK_SIZE+0x140>)
   1008c:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
   1008e:	69a3      	ldr	r3, [r4, #24]
   10090:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   10094:	61a3      	str	r3, [r4, #24]
   10096:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_2, TC2, _tc_get_timer());
   1009a:	47b0      	blx	r6
   1009c:	4929      	ldr	r1, [pc, #164]	; (10144 <STACK_SIZE+0x144>)
   1009e:	4602      	mov	r2, r0
   100a0:	4829      	ldr	r0, [pc, #164]	; (10148 <STACK_SIZE+0x148>)
   100a2:	47a8      	blx	r5
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
   100a4:	69a3      	ldr	r3, [r4, #24]
   100a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   100aa:	61a3      	str	r3, [r4, #24]
   100ac:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_3, TC3, _tc_get_timer());
   100b0:	47b0      	blx	r6
   100b2:	4926      	ldr	r1, [pc, #152]	; (1014c <STACK_SIZE+0x14c>)
   100b4:	4602      	mov	r2, r0
   100b6:	4826      	ldr	r0, [pc, #152]	; (10150 <STACK_SIZE+0x150>)
   100b8:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
	RAND_0_init();
   100ba:	4b26      	ldr	r3, [pc, #152]	; (10154 <STACK_SIZE+0x154>)
   100bc:	4798      	blx	r3

	USB_DEVICE_INSTANCE_init();
   100be:	4b26      	ldr	r3, [pc, #152]	; (10158 <STACK_SIZE+0x158>)
   100c0:	4798      	blx	r3

	WDT_0_init();
}
   100c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	WDT_0_init();
   100c6:	4b25      	ldr	r3, [pc, #148]	; (1015c <STACK_SIZE+0x15c>)
   100c8:	4718      	bx	r3
   100ca:	bf00      	nop
   100cc:	0000d189 	.word	0x0000d189
   100d0:	41008000 	.word	0x41008000
   100d4:	0000f619 	.word	0x0000f619
   100d8:	0000f669 	.word	0x0000f669
   100dc:	000123f1 	.word	0x000123f1
   100e0:	0000c11d 	.word	0x0000c11d
   100e4:	0000f6a9 	.word	0x0000f6a9
   100e8:	40000800 	.word	0x40000800
   100ec:	0000f729 	.word	0x0000f729
   100f0:	0000f7ad 	.word	0x0000f7ad
   100f4:	0000f7d1 	.word	0x0000f7d1
   100f8:	0000f811 	.word	0x0000f811
   100fc:	0000f915 	.word	0x0000f915
   10100:	0000f581 	.word	0x0000f581
   10104:	40002400 	.word	0x40002400
   10108:	20014b18 	.word	0x20014b18
   1010c:	0000f989 	.word	0x0000f989
   10110:	0000fa09 	.word	0x0000fa09
   10114:	0000fa89 	.word	0x0000fa89
   10118:	0000fb41 	.word	0x0000fb41
   1011c:	0000fbb5 	.word	0x0000fbb5
   10120:	0000fc45 	.word	0x0000fc45
   10124:	0000fcb9 	.word	0x0000fcb9
   10128:	0000fd7d 	.word	0x0000fd7d
   1012c:	0000fda9 	.word	0x0000fda9
   10130:	40001c00 	.word	0x40001c00
   10134:	40003800 	.word	0x40003800
   10138:	20014e04 	.word	0x20014e04
   1013c:	40003c00 	.word	0x40003c00
   10140:	20014cf8 	.word	0x20014cf8
   10144:	4101a000 	.word	0x4101a000
   10148:	20014b38 	.word	0x20014b38
   1014c:	4101c000 	.word	0x4101c000
   10150:	20014de4 	.word	0x20014de4
   10154:	0000fdc9 	.word	0x0000fdc9
   10158:	0000fe6d 	.word	0x0000fe6d
   1015c:	0000fe9d 	.word	0x0000fe9d

00010160 <usart_transmission_complete>:
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
   10160:	2300      	movs	r3, #0
   10162:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
   10164:	69c3      	ldr	r3, [r0, #28]
   10166:	b10b      	cbz	r3, 1016c <usart_transmission_complete+0xc>
		descr->usart_cb.tx_done(descr);
   10168:	3808      	subs	r0, #8
   1016a:	4718      	bx	r3
	}
}
   1016c:	4770      	bx	lr

0001016e <usart_error>:
 */
static void usart_error(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
   1016e:	2300      	movs	r3, #0
   10170:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
   10172:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10174:	b10b      	cbz	r3, 1017a <usart_error+0xc>
		descr->usart_cb.error(descr);
   10176:	3808      	subs	r0, #8
   10178:	4718      	bx	r3
	}
}
   1017a:	4770      	bx	lr

0001017c <usart_fill_rx_buffer>:
{
   1017c:	b570      	push	{r4, r5, r6, lr}
   1017e:	4604      	mov	r4, r0
	ringbuffer_put(&descr->rx, data);
   10180:	4b05      	ldr	r3, [pc, #20]	; (10198 <usart_fill_rx_buffer+0x1c>)
   10182:	f1a0 0508 	sub.w	r5, r0, #8
   10186:	302c      	adds	r0, #44	; 0x2c
   10188:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
   1018a:	6a23      	ldr	r3, [r4, #32]
   1018c:	b11b      	cbz	r3, 10196 <usart_fill_rx_buffer+0x1a>
		descr->usart_cb.rx_done(descr);
   1018e:	4628      	mov	r0, r5
}
   10190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		descr->usart_cb.rx_done(descr);
   10194:	4718      	bx	r3
}
   10196:	bd70      	pop	{r4, r5, r6, pc}
   10198:	00011611 	.word	0x00011611

0001019c <usart_async_write>:
{
   1019c:	b570      	push	{r4, r5, r6, lr}
   1019e:	460e      	mov	r6, r1
   101a0:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
   101a2:	4604      	mov	r4, r0
   101a4:	b118      	cbz	r0, 101ae <usart_async_write+0x12>
   101a6:	b1d9      	cbz	r1, 101e0 <usart_async_write+0x44>
   101a8:	1e10      	subs	r0, r2, #0
   101aa:	bf18      	it	ne
   101ac:	2001      	movne	r0, #1
   101ae:	4b0f      	ldr	r3, [pc, #60]	; (101ec <usart_async_write+0x50>)
   101b0:	490f      	ldr	r1, [pc, #60]	; (101f0 <usart_async_write+0x54>)
   101b2:	f240 123b 	movw	r2, #315	; 0x13b
   101b6:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
   101b8:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
   101bc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   101c0:	429a      	cmp	r2, r3
   101c2:	d10f      	bne.n	101e4 <usart_async_write+0x48>
	descr->tx_por           = 0;
   101c4:	2300      	movs	r3, #0
   101c6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
   101ca:	2301      	movs	r3, #1
   101cc:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
   101ce:	f104 0008 	add.w	r0, r4, #8
   101d2:	4b08      	ldr	r3, [pc, #32]	; (101f4 <usart_async_write+0x58>)
	descr->tx_buffer        = (uint8_t *)buf;
   101d4:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
   101d6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	_usart_async_enable_byte_sent_irq(&descr->device);
   101da:	4798      	blx	r3
	return (int32_t)length;
   101dc:	4628      	mov	r0, r5
}
   101de:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
   101e0:	4608      	mov	r0, r1
   101e2:	e7e4      	b.n	101ae <usart_async_write+0x12>
		return ERR_NO_RESOURCE;
   101e4:	f06f 001b 	mvn.w	r0, #27
   101e8:	e7f9      	b.n	101de <usart_async_write+0x42>
   101ea:	bf00      	nop
   101ec:	0000d415 	.word	0x0000d415
   101f0:	00016074 	.word	0x00016074
   101f4:	00010bf7 	.word	0x00010bf7

000101f8 <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
   101f8:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   101fa:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   101fe:	429a      	cmp	r2, r3
{
   10200:	b510      	push	{r4, lr}
   10202:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
   10204:	d00a      	beq.n	1021c <usart_process_byte_sent+0x24>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
   10206:	6c02      	ldr	r2, [r0, #64]	; 0x40
   10208:	1c59      	adds	r1, r3, #1
   1020a:	8781      	strh	r1, [r0, #60]	; 0x3c
   1020c:	5cd1      	ldrb	r1, [r2, r3]
   1020e:	4b04      	ldr	r3, [pc, #16]	; (10220 <usart_process_byte_sent+0x28>)
   10210:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
   10212:	4b04      	ldr	r3, [pc, #16]	; (10224 <usart_process_byte_sent+0x2c>)
   10214:	4620      	mov	r0, r4
}
   10216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_usart_async_enable_tx_done_irq(&descr->device);
   1021a:	4718      	bx	r3
   1021c:	4b02      	ldr	r3, [pc, #8]	; (10228 <usart_process_byte_sent+0x30>)
   1021e:	e7fa      	b.n	10216 <usart_process_byte_sent+0x1e>
   10220:	00010bcb 	.word	0x00010bcb
   10224:	00010bf7 	.word	0x00010bf7
   10228:	00010bff 	.word	0x00010bff

0001022c <usart_async_read>:
{
   1022c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10230:	460e      	mov	r6, r1
   10232:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
   10234:	4604      	mov	r4, r0
   10236:	b118      	cbz	r0, 10240 <usart_async_read+0x14>
   10238:	b1e9      	cbz	r1, 10276 <usart_async_read+0x4a>
   1023a:	1e10      	subs	r0, r2, #0
   1023c:	bf18      	it	ne
   1023e:	2001      	movne	r0, #1
   10240:	4910      	ldr	r1, [pc, #64]	; (10284 <usart_async_read+0x58>)
   10242:	4b11      	ldr	r3, [pc, #68]	; (10288 <usart_async_read+0x5c>)
		ringbuffer_get(&descr->rx, &buf[was_read++]);
   10244:	f8df 9050 	ldr.w	r9, [pc, #80]	; 10298 <usart_async_read+0x6c>
	ASSERT(descr && buf && length);
   10248:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1024c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
   1024e:	3434      	adds	r4, #52	; 0x34
	CRITICAL_SECTION_ENTER()
   10250:	4b0e      	ldr	r3, [pc, #56]	; (1028c <usart_async_read+0x60>)
   10252:	a801      	add	r0, sp, #4
   10254:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
   10256:	4b0e      	ldr	r3, [pc, #56]	; (10290 <usart_async_read+0x64>)
   10258:	4620      	mov	r0, r4
   1025a:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
   1025c:	4b0d      	ldr	r3, [pc, #52]	; (10294 <usart_async_read+0x68>)
	num = ringbuffer_num(&descr->rx);
   1025e:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
   10260:	a801      	add	r0, sp, #4
   10262:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
   10264:	2500      	movs	r5, #0
   10266:	45a8      	cmp	r8, r5
   10268:	d001      	beq.n	1026e <usart_async_read+0x42>
   1026a:	42bd      	cmp	r5, r7
   1026c:	d105      	bne.n	1027a <usart_async_read+0x4e>
}
   1026e:	4628      	mov	r0, r5
   10270:	b003      	add	sp, #12
   10272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && buf && length);
   10276:	4608      	mov	r0, r1
   10278:	e7e2      	b.n	10240 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
   1027a:	1971      	adds	r1, r6, r5
   1027c:	4620      	mov	r0, r4
   1027e:	47c8      	blx	r9
   10280:	3501      	adds	r5, #1
   10282:	e7f0      	b.n	10266 <usart_async_read+0x3a>
   10284:	00016074 	.word	0x00016074
   10288:	0000d415 	.word	0x0000d415
   1028c:	00011679 	.word	0x00011679
   10290:	00011655 	.word	0x00011655
   10294:	00011687 	.word	0x00011687
   10298:	000115d1 	.word	0x000115d1

0001029c <usart_async_init>:
{
   1029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1029e:	460d      	mov	r5, r1
   102a0:	4616      	mov	r6, r2
   102a2:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
   102a4:	4604      	mov	r4, r0
   102a6:	b120      	cbz	r0, 102b2 <usart_async_init+0x16>
   102a8:	b309      	cbz	r1, 102ee <usart_async_init+0x52>
   102aa:	b312      	cbz	r2, 102f2 <usart_async_init+0x56>
   102ac:	1e18      	subs	r0, r3, #0
   102ae:	bf18      	it	ne
   102b0:	2001      	movne	r0, #1
   102b2:	4912      	ldr	r1, [pc, #72]	; (102fc <usart_async_init+0x60>)
   102b4:	4b12      	ldr	r3, [pc, #72]	; (10300 <usart_async_init+0x64>)
   102b6:	223a      	movs	r2, #58	; 0x3a
   102b8:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
   102ba:	4b12      	ldr	r3, [pc, #72]	; (10304 <usart_async_init+0x68>)
   102bc:	463a      	mov	r2, r7
   102be:	4631      	mov	r1, r6
   102c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   102c4:	4798      	blx	r3
   102c6:	b9b0      	cbnz	r0, 102f6 <usart_async_init+0x5a>
	init_status = _usart_async_init(&descr->device, hw);
   102c8:	4b0f      	ldr	r3, [pc, #60]	; (10308 <usart_async_init+0x6c>)
   102ca:	4629      	mov	r1, r5
   102cc:	f104 0008 	add.w	r0, r4, #8
   102d0:	4798      	blx	r3
	if (init_status) {
   102d2:	b958      	cbnz	r0, 102ec <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
   102d4:	4b0d      	ldr	r3, [pc, #52]	; (1030c <usart_async_init+0x70>)
   102d6:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
   102d8:	4b0d      	ldr	r3, [pc, #52]	; (10310 <usart_async_init+0x74>)
   102da:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
   102dc:	4b0d      	ldr	r3, [pc, #52]	; (10314 <usart_async_init+0x78>)
   102de:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
   102e0:	4b0d      	ldr	r3, [pc, #52]	; (10318 <usart_async_init+0x7c>)
   102e2:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
   102e4:	4b0d      	ldr	r3, [pc, #52]	; (1031c <usart_async_init+0x80>)
   102e6:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
   102e8:	4b0d      	ldr	r3, [pc, #52]	; (10320 <usart_async_init+0x84>)
   102ea:	6163      	str	r3, [r4, #20]
}
   102ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
   102ee:	4608      	mov	r0, r1
   102f0:	e7df      	b.n	102b2 <usart_async_init+0x16>
   102f2:	4610      	mov	r0, r2
   102f4:	e7dd      	b.n	102b2 <usart_async_init+0x16>
		return ERR_INVALID_ARG;
   102f6:	f06f 000c 	mvn.w	r0, #12
   102fa:	e7f7      	b.n	102ec <usart_async_init+0x50>
   102fc:	00016074 	.word	0x00016074
   10300:	0000d415 	.word	0x0000d415
   10304:	00011595 	.word	0x00011595
   10308:	00010b0d 	.word	0x00010b0d
   1030c:	0001022d 	.word	0x0001022d
   10310:	0001019d 	.word	0x0001019d
   10314:	000101f9 	.word	0x000101f9
   10318:	0001017d 	.word	0x0001017d
   1031c:	00010161 	.word	0x00010161
   10320:	0001016f 	.word	0x0001016f

00010324 <usart_async_enable>:
{
   10324:	b510      	push	{r4, lr}
	ASSERT(descr);
   10326:	4604      	mov	r4, r0
   10328:	3800      	subs	r0, #0
   1032a:	bf18      	it	ne
   1032c:	2001      	movne	r0, #1
   1032e:	4905      	ldr	r1, [pc, #20]	; (10344 <usart_async_enable+0x20>)
   10330:	4b05      	ldr	r3, [pc, #20]	; (10348 <usart_async_enable+0x24>)
   10332:	2261      	movs	r2, #97	; 0x61
   10334:	4798      	blx	r3
	_usart_async_enable(&descr->device);
   10336:	f104 0008 	add.w	r0, r4, #8
   1033a:	4b04      	ldr	r3, [pc, #16]	; (1034c <usart_async_enable+0x28>)
   1033c:	4798      	blx	r3
}
   1033e:	2000      	movs	r0, #0
   10340:	bd10      	pop	{r4, pc}
   10342:	bf00      	nop
   10344:	00016074 	.word	0x00016074
   10348:	0000d415 	.word	0x0000d415
   1034c:	00010b99 	.word	0x00010b99

00010350 <usart_async_disable>:
{
   10350:	b510      	push	{r4, lr}
	ASSERT(descr);
   10352:	4604      	mov	r4, r0
   10354:	3800      	subs	r0, #0
   10356:	bf18      	it	ne
   10358:	2001      	movne	r0, #1
   1035a:	4905      	ldr	r1, [pc, #20]	; (10370 <usart_async_disable+0x20>)
   1035c:	4b05      	ldr	r3, [pc, #20]	; (10374 <usart_async_disable+0x24>)
   1035e:	226c      	movs	r2, #108	; 0x6c
   10360:	4798      	blx	r3
	_usart_async_disable(&descr->device);
   10362:	f104 0008 	add.w	r0, r4, #8
   10366:	4b04      	ldr	r3, [pc, #16]	; (10378 <usart_async_disable+0x28>)
   10368:	4798      	blx	r3
}
   1036a:	2000      	movs	r0, #0
   1036c:	bd10      	pop	{r4, pc}
   1036e:	bf00      	nop
   10370:	00016074 	.word	0x00016074
   10374:	0000d415 	.word	0x0000d415
   10378:	00010bad 	.word	0x00010bad

0001037c <usart_async_get_io_descriptor>:
{
   1037c:	b538      	push	{r3, r4, r5, lr}
   1037e:	460d      	mov	r5, r1
	ASSERT(descr && io);
   10380:	4604      	mov	r4, r0
   10382:	b110      	cbz	r0, 1038a <usart_async_get_io_descriptor+0xe>
   10384:	1e08      	subs	r0, r1, #0
   10386:	bf18      	it	ne
   10388:	2001      	movne	r0, #1
   1038a:	4903      	ldr	r1, [pc, #12]	; (10398 <usart_async_get_io_descriptor+0x1c>)
   1038c:	4b03      	ldr	r3, [pc, #12]	; (1039c <usart_async_get_io_descriptor+0x20>)
   1038e:	2277      	movs	r2, #119	; 0x77
   10390:	4798      	blx	r3
	*io = &descr->io;
   10392:	602c      	str	r4, [r5, #0]
}
   10394:	2000      	movs	r0, #0
   10396:	bd38      	pop	{r3, r4, r5, pc}
   10398:	00016074 	.word	0x00016074
   1039c:	0000d415 	.word	0x0000d415

000103a0 <usart_async_register_callback>:
{
   103a0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(descr);
   103a2:	4605      	mov	r5, r0
   103a4:	3800      	subs	r0, #0
{
   103a6:	460c      	mov	r4, r1
	ASSERT(descr);
   103a8:	bf18      	it	ne
   103aa:	2001      	movne	r0, #1
   103ac:	4911      	ldr	r1, [pc, #68]	; (103f4 <usart_async_register_callback+0x54>)
   103ae:	4b12      	ldr	r3, [pc, #72]	; (103f8 <usart_async_register_callback+0x58>)
{
   103b0:	4616      	mov	r6, r2
	ASSERT(descr);
   103b2:	2283      	movs	r2, #131	; 0x83
   103b4:	4798      	blx	r3
	switch (type) {
   103b6:	2c01      	cmp	r4, #1
   103b8:	d00d      	beq.n	103d6 <usart_async_register_callback+0x36>
   103ba:	2c02      	cmp	r4, #2
   103bc:	d011      	beq.n	103e2 <usart_async_register_callback+0x42>
   103be:	b9b4      	cbnz	r4, 103ee <usart_async_register_callback+0x4e>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
   103c0:	1e32      	subs	r2, r6, #0
		descr->usart_cb.rx_done = cb;
   103c2:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
   103c4:	bf18      	it	ne
   103c6:	2201      	movne	r2, #1
   103c8:	2101      	movs	r1, #1
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
   103ca:	f105 0008 	add.w	r0, r5, #8
   103ce:	4b0b      	ldr	r3, [pc, #44]	; (103fc <usart_async_register_callback+0x5c>)
   103d0:	4798      	blx	r3
	return ERR_NONE;
   103d2:	2000      	movs	r0, #0
}
   103d4:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
   103d6:	1e32      	subs	r2, r6, #0
		descr->usart_cb.tx_done = cb;
   103d8:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
   103da:	bf18      	it	ne
   103dc:	2201      	movne	r2, #1
   103de:	2102      	movs	r1, #2
   103e0:	e7f3      	b.n	103ca <usart_async_register_callback+0x2a>
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
   103e2:	1e32      	subs	r2, r6, #0
		descr->usart_cb.error = cb;
   103e4:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
   103e6:	bf18      	it	ne
   103e8:	2201      	movne	r2, #1
   103ea:	2103      	movs	r1, #3
   103ec:	e7ed      	b.n	103ca <usart_async_register_callback+0x2a>
	switch (type) {
   103ee:	f06f 000c 	mvn.w	r0, #12
   103f2:	e7ef      	b.n	103d4 <usart_async_register_callback+0x34>
   103f4:	00016074 	.word	0x00016074
   103f8:	0000d415 	.word	0x0000d415
   103fc:	00010c09 	.word	0x00010c09

00010400 <usart_async_set_parity>:
{
   10400:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr);
   10402:	4604      	mov	r4, r0
   10404:	3800      	subs	r0, #0
   10406:	bf18      	it	ne
   10408:	2001      	movne	r0, #1
{
   1040a:	460d      	mov	r5, r1
	ASSERT(descr);
   1040c:	22cb      	movs	r2, #203	; 0xcb
   1040e:	4905      	ldr	r1, [pc, #20]	; (10424 <usart_async_set_parity+0x24>)
   10410:	4b05      	ldr	r3, [pc, #20]	; (10428 <usart_async_set_parity+0x28>)
   10412:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
   10414:	f104 0008 	add.w	r0, r4, #8
   10418:	4b04      	ldr	r3, [pc, #16]	; (1042c <usart_async_set_parity+0x2c>)
   1041a:	4629      	mov	r1, r5
   1041c:	4798      	blx	r3
}
   1041e:	2000      	movs	r0, #0
   10420:	bd38      	pop	{r3, r4, r5, pc}
   10422:	bf00      	nop
   10424:	00016074 	.word	0x00016074
   10428:	0000d415 	.word	0x0000d415
   1042c:	00010bb9 	.word	0x00010bb9

00010430 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
   10430:	69c3      	ldr	r3, [r0, #28]
   10432:	420b      	tst	r3, r1
   10434:	d1fc      	bne.n	10430 <hri_sercomi2cm_wait_for_sync>
	};
}
   10436:	4770      	bx	lr

00010438 <hri_sercomspi_wait_for_sync>:
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
   10438:	69c3      	ldr	r3, [r0, #28]
   1043a:	420b      	tst	r3, r1
   1043c:	d1fc      	bne.n	10438 <hri_sercomspi_wait_for_sync>
	};
}
   1043e:	4770      	bx	lr

00010440 <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
   10440:	69c3      	ldr	r3, [r0, #28]
   10442:	420b      	tst	r3, r1
   10444:	d1fc      	bne.n	10440 <hri_sercomusart_wait_for_sync>
	};
}
   10446:	4770      	bx	lr

00010448 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   10448:	6802      	ldr	r2, [r0, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   1044a:	4b03      	ldr	r3, [pc, #12]	; (10458 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1044c:	f022 0202 	bic.w	r2, r2, #2
   10450:	6002      	str	r2, [r0, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   10452:	2103      	movs	r1, #3
   10454:	4718      	bx	r3
   10456:	bf00      	nop
   10458:	00010431 	.word	0x00010431

0001045c <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1045c:	6802      	ldr	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   1045e:	4b03      	ldr	r3, [pc, #12]	; (1046c <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   10460:	f022 0202 	bic.w	r2, r2, #2
   10464:	6002      	str	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10466:	2103      	movs	r1, #3
   10468:	4718      	bx	r3
   1046a:	bf00      	nop
   1046c:	00010439 	.word	0x00010439

00010470 <hri_sercomusart_get_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
   10470:	b508      	push	{r3, lr}
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10472:	2103      	movs	r1, #3
   10474:	4b02      	ldr	r3, [pc, #8]	; (10480 <hri_sercomusart_get_CTRLA_ENABLE_bit+0x10>)
   10476:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
   10478:	6800      	ldr	r0, [r0, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
	return (bool)tmp;
}
   1047a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1047e:	bd08      	pop	{r3, pc}
   10480:	00010441 	.word	0x00010441

00010484 <hri_sercomusart_write_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
   10484:	6803      	ldr	r3, [r0, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
   10486:	f023 0302 	bic.w	r3, r3, #2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
   1048a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
   1048e:	6001      	str	r1, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10490:	4b01      	ldr	r3, [pc, #4]	; (10498 <hri_sercomusart_write_CTRLA_ENABLE_bit+0x14>)
   10492:	2103      	movs	r1, #3
   10494:	4718      	bx	r3
   10496:	bf00      	nop
   10498:	00010441 	.word	0x00010441

0001049c <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   1049c:	6802      	ldr	r2, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   1049e:	4b03      	ldr	r3, [pc, #12]	; (104ac <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x10>)
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
   104a0:	f022 0202 	bic.w	r2, r2, #2
   104a4:	6002      	str	r2, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   104a6:	2103      	movs	r1, #3
   104a8:	4718      	bx	r3
   104aa:	bf00      	nop
   104ac:	00010441 	.word	0x00010441

000104b0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
   104b0:	b570      	push	{r4, r5, r6, lr}
	Sercom *const sercom_modules[] = SERCOM_INSTS;
   104b2:	4d0c      	ldr	r5, [pc, #48]	; (104e4 <_sercom_get_hardware_index+0x34>)
{
   104b4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
   104b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   104b8:	b088      	sub	sp, #32
	Sercom *const sercom_modules[] = SERCOM_INSTS;
   104ba:	466c      	mov	r4, sp
   104bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   104be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   104c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   104c6:	466a      	mov	r2, sp
   104c8:	2300      	movs	r3, #0
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
   104ca:	f852 1b04 	ldr.w	r1, [r2], #4
   104ce:	42b1      	cmp	r1, r6
   104d0:	d102      	bne.n	104d8 <_sercom_get_hardware_index+0x28>
			return i;
   104d2:	b2d8      	uxtb	r0, r3
		}
	}
	return 0;
}
   104d4:	b008      	add	sp, #32
   104d6:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   104d8:	3301      	adds	r3, #1
   104da:	2b08      	cmp	r3, #8
   104dc:	d1f5      	bne.n	104ca <_sercom_get_hardware_index+0x1a>
	return 0;
   104de:	2000      	movs	r0, #0
   104e0:	e7f8      	b.n	104d4 <_sercom_get_hardware_index+0x24>
   104e2:	bf00      	nop
   104e4:	000160ac 	.word	0x000160ac

000104e8 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
   104e8:	b510      	push	{r4, lr}
	void *hw = device->hw;
   104ea:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
   104ec:	7e22      	ldrb	r2, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
   104ee:	07d1      	lsls	r1, r2, #31
{
   104f0:	4603      	mov	r3, r0
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
   104f2:	d508      	bpl.n	10506 <_sercom_usart_interrupt_handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
   104f4:	7da2      	ldrb	r2, [r4, #22]
   104f6:	07d2      	lsls	r2, r2, #31
   104f8:	d505      	bpl.n	10506 <_sercom_usart_interrupt_handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
   104fa:	2201      	movs	r2, #1
   104fc:	7522      	strb	r2, [r4, #20]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
   104fe:	6803      	ldr	r3, [r0, #0]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
   10500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_byte_sent(device);
   10504:	4718      	bx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
   10506:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
   10508:	0790      	lsls	r0, r2, #30
   1050a:	d509      	bpl.n	10520 <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
   1050c:	7da2      	ldrb	r2, [r4, #22]
   1050e:	0791      	lsls	r1, r2, #30
   10510:	d506      	bpl.n	10520 <_sercom_usart_interrupt_handler+0x38>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
   10512:	2202      	movs	r2, #2
   10514:	7522      	strb	r2, [r4, #20]
		device->usart_cb.tx_done_cb(device);
   10516:	4618      	mov	r0, r3
}
   10518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.tx_done_cb(device);
   1051c:	689a      	ldr	r2, [r3, #8]
   1051e:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
   10520:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
   10522:	0752      	lsls	r2, r2, #29
   10524:	d50d      	bpl.n	10542 <_sercom_usart_interrupt_handler+0x5a>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
   10526:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
   10528:	f002 0237 	and.w	r2, r2, #55	; 0x37
   1052c:	b112      	cbz	r2, 10534 <_sercom_usart_interrupt_handler+0x4c>
	((Sercom *)hw)->USART.STATUS.reg = mask;
   1052e:	23ff      	movs	r3, #255	; 0xff
   10530:	8363      	strh	r3, [r4, #26]
}
   10532:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->USART.DATA.reg;
   10534:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
   10536:	685a      	ldr	r2, [r3, #4]
}
   10538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
   1053c:	b2c9      	uxtb	r1, r1
   1053e:	4618      	mov	r0, r3
   10540:	4710      	bx	r2
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
   10542:	7e22      	ldrb	r2, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
   10544:	09d2      	lsrs	r2, r2, #7
   10546:	d0f4      	beq.n	10532 <_sercom_usart_interrupt_handler+0x4a>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
   10548:	2280      	movs	r2, #128	; 0x80
   1054a:	7622      	strb	r2, [r4, #24]
		device->usart_cb.error_cb(device);
   1054c:	4618      	mov	r0, r3
   1054e:	68da      	ldr	r2, [r3, #12]
   10550:	4790      	blx	r2
	return ((Sercom *)hw)->USART.STATUS.reg;
   10552:	8b63      	ldrh	r3, [r4, #26]
   10554:	b29b      	uxth	r3, r3
   10556:	e7eb      	b.n	10530 <_sercom_usart_interrupt_handler+0x48>

00010558 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM0) {
   10558:	4b11      	ldr	r3, [pc, #68]	; (105a0 <_sercom_init_irq_param+0x48>)
   1055a:	4298      	cmp	r0, r3
   1055c:	d105      	bne.n	1056a <_sercom_init_irq_param+0x12>
		_sercom0_dev = (struct _usart_async_device *)dev;
   1055e:	4b11      	ldr	r3, [pc, #68]	; (105a4 <_sercom_init_irq_param+0x4c>)
   10560:	6019      	str	r1, [r3, #0]

	if (hw == SERCOM5) {
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
	}

	if (hw == SERCOM6) {
   10562:	4b11      	ldr	r3, [pc, #68]	; (105a8 <_sercom_init_irq_param+0x50>)
   10564:	4298      	cmp	r0, r3
   10566:	d018      	beq.n	1059a <_sercom_init_irq_param+0x42>
   10568:	4770      	bx	lr
	if (hw == SERCOM1) {
   1056a:	4b10      	ldr	r3, [pc, #64]	; (105ac <_sercom_init_irq_param+0x54>)
   1056c:	4298      	cmp	r0, r3
   1056e:	d00b      	beq.n	10588 <_sercom_init_irq_param+0x30>
	if (hw == SERCOM3) {
   10570:	4b0f      	ldr	r3, [pc, #60]	; (105b0 <_sercom_init_irq_param+0x58>)
   10572:	4298      	cmp	r0, r3
   10574:	d00b      	beq.n	1058e <_sercom_init_irq_param+0x36>
	if (hw == SERCOM4) {
   10576:	f1b0 4f86 	cmp.w	r0, #1124073472	; 0x43000000
   1057a:	d00b      	beq.n	10594 <_sercom_init_irq_param+0x3c>
	if (hw == SERCOM5) {
   1057c:	4b0d      	ldr	r3, [pc, #52]	; (105b4 <_sercom_init_irq_param+0x5c>)
   1057e:	4298      	cmp	r0, r3
   10580:	d1ef      	bne.n	10562 <_sercom_init_irq_param+0xa>
		_sercom5_dev = (struct _i2c_m_async_device *)dev;
   10582:	4b08      	ldr	r3, [pc, #32]	; (105a4 <_sercom_init_irq_param+0x4c>)
   10584:	6119      	str	r1, [r3, #16]
	if (hw == SERCOM6) {
   10586:	4770      	bx	lr
		_sercom1_dev = (struct _usart_async_device *)dev;
   10588:	4b06      	ldr	r3, [pc, #24]	; (105a4 <_sercom_init_irq_param+0x4c>)
   1058a:	6059      	str	r1, [r3, #4]
	if (hw == SERCOM5) {
   1058c:	e7e9      	b.n	10562 <_sercom_init_irq_param+0xa>
		_sercom3_dev = (struct _spi_async_dev *)dev;
   1058e:	4b05      	ldr	r3, [pc, #20]	; (105a4 <_sercom_init_irq_param+0x4c>)
   10590:	6099      	str	r1, [r3, #8]
	if (hw == SERCOM6) {
   10592:	4770      	bx	lr
		_sercom4_dev = (struct _usart_async_device *)dev;
   10594:	4b03      	ldr	r3, [pc, #12]	; (105a4 <_sercom_init_irq_param+0x4c>)
   10596:	60d9      	str	r1, [r3, #12]
	if (hw == SERCOM6) {
   10598:	4770      	bx	lr
		_sercom6_dev = (struct _usart_async_device *)dev;
   1059a:	4b02      	ldr	r3, [pc, #8]	; (105a4 <_sercom_init_irq_param+0x4c>)
   1059c:	6159      	str	r1, [r3, #20]
	}
}
   1059e:	4770      	bx	lr
   105a0:	40003000 	.word	0x40003000
   105a4:	20001084 	.word	0x20001084
   105a8:	43000800 	.word	0x43000800
   105ac:	40003400 	.word	0x40003400
   105b0:	41014000 	.word	0x41014000
   105b4:	43000400 	.word	0x43000400

000105b8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
   105b8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
   105ba:	4b03      	ldr	r3, [pc, #12]	; (105c8 <_sercom_get_irq_num+0x10>)
   105bc:	4798      	blx	r3
   105be:	0080      	lsls	r0, r0, #2
   105c0:	302e      	adds	r0, #46	; 0x2e
}
   105c2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   105c6:	bd08      	pop	{r3, pc}
   105c8:	000104b1 	.word	0x000104b1

000105cc <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   105cc:	69c2      	ldr	r2, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   105ce:	f012 0201 	ands.w	r2, r2, #1
{
   105d2:	b508      	push	{r3, lr}
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   105d4:	d108      	bne.n	105e8 <_spi_sync_enable+0x1c>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   105d6:	6803      	ldr	r3, [r0, #0]
   105d8:	f043 0302 	orr.w	r3, r3, #2
   105dc:	6003      	str	r3, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   105de:	2103      	movs	r1, #3
   105e0:	4b03      	ldr	r3, [pc, #12]	; (105f0 <_spi_sync_enable+0x24>)
   105e2:	4798      	blx	r3
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
   105e4:	4610      	mov	r0, r2
}
   105e6:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
   105e8:	f06f 0003 	mvn.w	r0, #3
   105ec:	e7fb      	b.n	105e6 <_spi_sync_enable+0x1a>
   105ee:	bf00      	nop
   105f0:	00010439 	.word	0x00010439

000105f4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SERCOM
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct sercomspi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
   105f4:	b508      	push	{r3, lr}
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
   105f6:	4b08      	ldr	r3, [pc, #32]	; (10618 <_spi_get_regs+0x24>)
   105f8:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
		if (sercomspi_regs[i].n == n) {
   105fa:	2803      	cmp	r0, #3
   105fc:	d007      	beq.n	1060e <_spi_get_regs+0x1a>
   105fe:	2807      	cmp	r0, #7
   10600:	d107      	bne.n	10612 <_spi_get_regs+0x1e>
   10602:	2301      	movs	r3, #1
			return &sercomspi_regs[i];
   10604:	4805      	ldr	r0, [pc, #20]	; (1061c <_spi_get_regs+0x28>)
   10606:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   1060a:	4418      	add	r0, r3
		}
	}

	return NULL;
}
   1060c:	bd08      	pop	{r3, pc}
		if (sercomspi_regs[i].n == n) {
   1060e:	2300      	movs	r3, #0
   10610:	e7f8      	b.n	10604 <_spi_get_regs+0x10>
	return NULL;
   10612:	2000      	movs	r0, #0
   10614:	e7fa      	b.n	1060c <_spi_get_regs+0x18>
   10616:	bf00      	nop
   10618:	000104b1 	.word	0x000104b1
   1061c:	000160cc 	.word	0x000160cc

00010620 <_spi_dma_tx_complete>:
 */
static void _spi_dma_tx_complete(struct _dma_resource *resource)
{
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.tx) {
   10620:	6883      	ldr	r3, [r0, #8]
   10622:	685b      	ldr	r3, [r3, #4]
   10624:	b103      	cbz	r3, 10628 <_spi_dma_tx_complete+0x8>
		dev->callbacks.tx(resource);
   10626:	4718      	bx	r3
	}
}
   10628:	4770      	bx	lr

0001062a <_spi_dma_error_occured>:
 */
static void _spi_dma_error_occured(struct _dma_resource *resource)
{
	struct _spi_m_dma_dev *dev = (struct _spi_m_dma_dev *)resource->back;

	if (dev->callbacks.error) {
   1062a:	6883      	ldr	r3, [r0, #8]
   1062c:	68db      	ldr	r3, [r3, #12]
   1062e:	b103      	cbz	r3, 10632 <_spi_dma_error_occured+0x8>
		dev->callbacks.error(resource);
   10630:	4718      	bx	r3
	}
}
   10632:	4770      	bx	lr

00010634 <__NVIC_EnableIRQ>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10634:	0942      	lsrs	r2, r0, #5
   10636:	2301      	movs	r3, #1
   10638:	f000 001f 	and.w	r0, r0, #31
   1063c:	fa03 f000 	lsl.w	r0, r3, r0
   10640:	4b01      	ldr	r3, [pc, #4]	; (10648 <__NVIC_EnableIRQ+0x14>)
   10642:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
}
   10646:	4770      	bx	lr
   10648:	e000e100 	.word	0xe000e100

0001064c <_spi_async_enable>:
{
   1064c:	b538      	push	{r3, r4, r5, lr}
   1064e:	4604      	mov	r4, r0
	_spi_sync_enable(hw);
   10650:	4b07      	ldr	r3, [pc, #28]	; (10670 <_spi_async_enable+0x24>)
		NVIC_EnableIRQ((IRQn_Type)irq++);
   10652:	4d08      	ldr	r5, [pc, #32]	; (10674 <_spi_async_enable+0x28>)
	_spi_sync_enable(hw);
   10654:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
   10656:	4620      	mov	r0, r4
   10658:	4b07      	ldr	r3, [pc, #28]	; (10678 <_spi_async_enable+0x2c>)
   1065a:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   1065c:	2100      	movs	r1, #0
	uint8_t irq = _sercom_get_irq_num(hw);
   1065e:	4604      	mov	r4, r0
		NVIC_EnableIRQ((IRQn_Type)irq++);
   10660:	1860      	adds	r0, r4, r1
   10662:	b2c0      	uxtb	r0, r0
   10664:	47a8      	blx	r5
	for (uint32_t i = 0; i < 4; i++) {
   10666:	3101      	adds	r1, #1
   10668:	2904      	cmp	r1, #4
   1066a:	d1f9      	bne.n	10660 <_spi_async_enable+0x14>
}
   1066c:	2000      	movs	r0, #0
   1066e:	bd38      	pop	{r3, r4, r5, pc}
   10670:	000105cd 	.word	0x000105cd
   10674:	00010635 	.word	0x00010635
   10678:	000105b9 	.word	0x000105b9

0001067c <__NVIC_DisableIRQ>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1067c:	0943      	lsrs	r3, r0, #5
   1067e:	2201      	movs	r2, #1
   10680:	f000 001f 	and.w	r0, r0, #31
   10684:	fa02 f000 	lsl.w	r0, r2, r0
   10688:	3320      	adds	r3, #32
   1068a:	4a04      	ldr	r2, [pc, #16]	; (1069c <__NVIC_DisableIRQ+0x20>)
   1068c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   10690:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   10694:	f3bf 8f6f 	isb	sy
}
   10698:	4770      	bx	lr
   1069a:	bf00      	nop
   1069c:	e000e100 	.word	0xe000e100

000106a0 <__NVIC_ClearPendingIRQ>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   106a0:	0943      	lsrs	r3, r0, #5
   106a2:	2201      	movs	r2, #1
   106a4:	f000 001f 	and.w	r0, r0, #31
   106a8:	fa02 f000 	lsl.w	r0, r2, r0
   106ac:	3360      	adds	r3, #96	; 0x60
   106ae:	4a02      	ldr	r2, [pc, #8]	; (106b8 <__NVIC_ClearPendingIRQ+0x18>)
   106b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   106b4:	4770      	bx	lr
   106b6:	bf00      	nop
   106b8:	e000e100 	.word	0xe000e100

000106bc <_get_i2cm_index>:
{
   106bc:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
   106be:	4b07      	ldr	r3, [pc, #28]	; (106dc <_get_i2cm_index+0x20>)
   106c0:	4798      	blx	r3
		if (_i2cms[i].number == sercom_offset) {
   106c2:	2805      	cmp	r0, #5
   106c4:	d008      	beq.n	106d8 <_get_i2cm_index+0x1c>
	ASSERT(false);
   106c6:	2000      	movs	r0, #0
   106c8:	4905      	ldr	r1, [pc, #20]	; (106e0 <_get_i2cm_index+0x24>)
   106ca:	4b06      	ldr	r3, [pc, #24]	; (106e4 <_get_i2cm_index+0x28>)
   106cc:	f240 32ed 	movw	r2, #1005	; 0x3ed
   106d0:	4798      	blx	r3
   106d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   106d6:	bd08      	pop	{r3, pc}
			return i;
   106d8:	2000      	movs	r0, #0
   106da:	e7fc      	b.n	106d6 <_get_i2cm_index+0x1a>
   106dc:	000104b1 	.word	0x000104b1
   106e0:	00016091 	.word	0x00016091
   106e4:	0000d415 	.word	0x0000d415

000106e8 <_sercom_i2c_send_stop>:
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
   106e8:	6842      	ldr	r2, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   106ea:	4b03      	ldr	r3, [pc, #12]	; (106f8 <_sercom_i2c_send_stop+0x10>)
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
   106ec:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
   106f0:	6042      	str	r2, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   106f2:	2104      	movs	r1, #4
   106f4:	4718      	bx	r3
   106f6:	bf00      	nop
   106f8:	00010431 	.word	0x00010431

000106fc <_sercom_i2c_sync_analyse_flags>:
{
   106fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10700:	460e      	mov	r6, r1
   10702:	4614      	mov	r4, r2
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10704:	2104      	movs	r1, #4
   10706:	4a56      	ldr	r2, [pc, #344]	; (10860 <_sercom_i2c_sync_analyse_flags+0x164>)
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
   10708:	f8d0 8000 	ldr.w	r8, [r0]
   1070c:	4605      	mov	r5, r0
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   1070e:	4790      	blx	r2
	return ((Sercom *)hw)->I2CM.STATUS.reg;
   10710:	8b43      	ldrh	r3, [r0, #26]
	if (flags & MB_FLAG) {
   10712:	f016 0f01 	tst.w	r6, #1
   10716:	b29b      	uxth	r3, r3
   10718:	4617      	mov	r7, r2
   1071a:	d064      	beq.n	107e6 <_sercom_i2c_sync_analyse_flags+0xea>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
   1071c:	079f      	lsls	r7, r3, #30
   1071e:	d516      	bpl.n	1074e <_sercom_i2c_sync_analyse_flags+0x52>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   10720:	2201      	movs	r2, #1
   10722:	7602      	strb	r2, [r0, #24]
			msg->flags |= I2C_M_FAIL;
   10724:	8862      	ldrh	r2, [r4, #2]
   10726:	b292      	uxth	r2, r2
   10728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1072c:	8062      	strh	r2, [r4, #2]
			msg->flags &= ~I2C_M_BUSY;
   1072e:	8862      	ldrh	r2, [r4, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
   10730:	f003 0601 	and.w	r6, r3, #1
			msg->flags &= ~I2C_M_BUSY;
   10734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   10738:	0412      	lsls	r2, r2, #16
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
   1073a:	f1c6 26ff 	rsb	r6, r6, #4278255360	; 0xff00ff00
			msg->flags &= ~I2C_M_BUSY;
   1073e:	0c12      	lsrs	r2, r2, #16
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
   10740:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
			msg->flags &= ~I2C_M_BUSY;
   10744:	8062      	strh	r2, [r4, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
   10746:	36fc      	adds	r6, #252	; 0xfc
}
   10748:	4630      	mov	r0, r6
   1074a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
   1074e:	f013 0604 	ands.w	r6, r3, #4
   10752:	d015      	beq.n	10780 <_sercom_i2c_sync_analyse_flags+0x84>
				if (msg->len > 0) {
   10754:	6863      	ldr	r3, [r4, #4]
   10756:	2b00      	cmp	r3, #0
					msg->flags |= I2C_M_FAIL;
   10758:	bfc1      	itttt	gt
   1075a:	8863      	ldrhgt	r3, [r4, #2]
   1075c:	b29b      	uxthgt	r3, r3
   1075e:	f443 5380 	orrgt.w	r3, r3, #4096	; 0x1000
   10762:	8063      	strhgt	r3, [r4, #2]
				if (msg->flags & I2C_M_STOP) {
   10764:	8863      	ldrh	r3, [r4, #2]
   10766:	041e      	lsls	r6, r3, #16
   10768:	d501      	bpl.n	1076e <_sercom_i2c_sync_analyse_flags+0x72>
					_sercom_i2c_send_stop(hw);
   1076a:	4b3e      	ldr	r3, [pc, #248]	; (10864 <_sercom_i2c_sync_analyse_flags+0x168>)
   1076c:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
   1076e:	8863      	ldrh	r3, [r4, #2]
   10770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10774:	041b      	lsls	r3, r3, #16
   10776:	0c1b      	lsrs	r3, r3, #16
   10778:	8063      	strh	r3, [r4, #2]
			return I2C_NACK;
   1077a:	f06f 0601 	mvn.w	r6, #1
   1077e:	e7e3      	b.n	10748 <_sercom_i2c_sync_analyse_flags+0x4c>
			if (msg->flags & I2C_M_TEN) {
   10780:	8863      	ldrh	r3, [r4, #2]
   10782:	f413 6780 	ands.w	r7, r3, #1024	; 0x400
   10786:	d015      	beq.n	107b4 <_sercom_i2c_sync_analyse_flags+0xb8>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
   10788:	8823      	ldrh	r3, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   1078a:	2104      	movs	r1, #4
   1078c:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
   1078e:	f003 0706 	and.w	r7, r3, #6
   10792:	4790      	blx	r2
	return ((Sercom *)hw)->I2CM.ADDR.reg;
   10794:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   1079a:	433b      	orrs	r3, r7
				hri_sercomi2cm_write_ADDR_reg(hw,
   1079c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
   107a0:	6243      	str	r3, [r0, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   107a2:	2104      	movs	r1, #4
   107a4:	4790      	blx	r2
				msg->flags &= ~I2C_M_TEN;
   107a6:	8863      	ldrh	r3, [r4, #2]
   107a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
				msg->flags &= ~I2C_M_BUSY;
   107ac:	041b      	lsls	r3, r3, #16
   107ae:	0c1b      	lsrs	r3, r3, #16
   107b0:	8063      	strh	r3, [r4, #2]
   107b2:	e7c9      	b.n	10748 <_sercom_i2c_sync_analyse_flags+0x4c>
			if (msg->len == 0) {
   107b4:	6866      	ldr	r6, [r4, #4]
   107b6:	b94e      	cbnz	r6, 107cc <_sercom_i2c_sync_analyse_flags+0xd0>
				if (msg->flags & I2C_M_STOP) {
   107b8:	8863      	ldrh	r3, [r4, #2]
   107ba:	0418      	lsls	r0, r3, #16
   107bc:	d502      	bpl.n	107c4 <_sercom_i2c_sync_analyse_flags+0xc8>
					_sercom_i2c_send_stop(hw);
   107be:	4b29      	ldr	r3, [pc, #164]	; (10864 <_sercom_i2c_sync_analyse_flags+0x168>)
   107c0:	4628      	mov	r0, r5
   107c2:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
   107c4:	8863      	ldrh	r3, [r4, #2]
   107c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   107ca:	e7ef      	b.n	107ac <_sercom_i2c_sync_analyse_flags+0xb0>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
   107cc:	68a3      	ldr	r3, [r4, #8]
   107ce:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
   107d0:	6283      	str	r3, [r0, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   107d2:	2104      	movs	r1, #4
   107d4:	4790      	blx	r2
				msg->buffer++;
   107d6:	68a3      	ldr	r3, [r4, #8]
   107d8:	3301      	adds	r3, #1
   107da:	60a3      	str	r3, [r4, #8]
				msg->len--;
   107dc:	6863      	ldr	r3, [r4, #4]
   107de:	3b01      	subs	r3, #1
   107e0:	6063      	str	r3, [r4, #4]
	return I2C_OK;
   107e2:	2600      	movs	r6, #0
}
   107e4:	e7b0      	b.n	10748 <_sercom_i2c_sync_analyse_flags+0x4c>
	} else if (flags & SB_FLAG) {
   107e6:	f016 0602 	ands.w	r6, r6, #2
   107ea:	d0ad      	beq.n	10748 <_sercom_i2c_sync_analyse_flags+0x4c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
   107ec:	6862      	ldr	r2, [r4, #4]
   107ee:	2a00      	cmp	r2, #0
   107f0:	d032      	beq.n	10858 <_sercom_i2c_sync_analyse_flags+0x15c>
   107f2:	0759      	lsls	r1, r3, #29
   107f4:	d430      	bmi.n	10858 <_sercom_i2c_sync_analyse_flags+0x15c>
			msg->len--;
   107f6:	3a01      	subs	r2, #1
   107f8:	f3c8 61c0 	ubfx	r1, r8, #27, #1
   107fc:	6062      	str	r2, [r4, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
   107fe:	b99a      	cbnz	r2, 10828 <_sercom_i2c_sync_analyse_flags+0x12c>
   10800:	b1a9      	cbz	r1, 1082e <_sercom_i2c_sync_analyse_flags+0x132>
				if (msg->flags & I2C_M_STOP) {
   10802:	8863      	ldrh	r3, [r4, #2]
   10804:	041b      	lsls	r3, r3, #16
   10806:	d508      	bpl.n	1081a <_sercom_i2c_sync_analyse_flags+0x11e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
   10808:	686b      	ldr	r3, [r5, #4]
   1080a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1080e:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10810:	2104      	movs	r1, #4
   10812:	4628      	mov	r0, r5
   10814:	47b8      	blx	r7
					_sercom_i2c_send_stop(hw);
   10816:	4b13      	ldr	r3, [pc, #76]	; (10864 <_sercom_i2c_sync_analyse_flags+0x168>)
   10818:	4798      	blx	r3
				msg->flags &= ~I2C_M_BUSY;
   1081a:	8863      	ldrh	r3, [r4, #2]
   1081c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10820:	041b      	lsls	r3, r3, #16
   10822:	0c1b      	lsrs	r3, r3, #16
   10824:	8063      	strh	r3, [r4, #2]
   10826:	e00c      	b.n	10842 <_sercom_i2c_sync_analyse_flags+0x146>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
   10828:	2a01      	cmp	r2, #1
   1082a:	d10a      	bne.n	10842 <_sercom_i2c_sync_analyse_flags+0x146>
   1082c:	b149      	cbz	r1, 10842 <_sercom_i2c_sync_analyse_flags+0x146>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1082e:	686b      	ldr	r3, [r5, #4]
   10830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   10834:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10836:	2104      	movs	r1, #4
   10838:	4628      	mov	r0, r5
   1083a:	47b8      	blx	r7
			if (msg->len == 0) {
   1083c:	6863      	ldr	r3, [r4, #4]
   1083e:	2b00      	cmp	r3, #0
   10840:	d0df      	beq.n	10802 <_sercom_i2c_sync_analyse_flags+0x106>
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10842:	2104      	movs	r1, #4
   10844:	4628      	mov	r0, r5
   10846:	47b8      	blx	r7
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
   10848:	68a3      	ldr	r3, [r4, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
   1084a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1084c:	1c59      	adds	r1, r3, #1
   1084e:	60a1      	str	r1, [r4, #8]
   10850:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   10852:	2302      	movs	r3, #2
   10854:	762b      	strb	r3, [r5, #24]
   10856:	e7c4      	b.n	107e2 <_sercom_i2c_sync_analyse_flags+0xe6>
   10858:	2302      	movs	r3, #2
   1085a:	762b      	strb	r3, [r5, #24]
   1085c:	e78d      	b.n	1077a <_sercom_i2c_sync_analyse_flags+0x7e>
   1085e:	bf00      	nop
   10860:	00010431 	.word	0x00010431
   10864:	000106e9 	.word	0x000106e9

00010868 <_usart_set_parity>:
{
   10868:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
   1086a:	4b16      	ldr	r3, [pc, #88]	; (108c4 <_usart_set_parity+0x5c>)
{
   1086c:	4604      	mov	r4, r0
   1086e:	460d      	mov	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
   10870:	4798      	blx	r3
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
   10872:	4b15      	ldr	r3, [pc, #84]	; (108c8 <_usart_set_parity+0x60>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
   10874:	4606      	mov	r6, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
   10876:	4620      	mov	r0, r4
   10878:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
   1087a:	4b14      	ldr	r3, [pc, #80]	; (108cc <_usart_set_parity+0x64>)
   1087c:	a801      	add	r0, sp, #4
   1087e:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
   10880:	4a13      	ldr	r2, [pc, #76]	; (108d0 <_usart_set_parity+0x68>)
   10882:	4620      	mov	r0, r4
   10884:	2102      	movs	r1, #2
   10886:	4790      	blx	r2
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
   10888:	6823      	ldr	r3, [r4, #0]
	if (USART_PARITY_NONE != parity) {
   1088a:	2d02      	cmp	r5, #2
   1088c:	bf14      	ite	ne
   1088e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
   10892:	f023 7380 	biceq.w	r3, r3, #16777216	; 0x1000000
   10896:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   10898:	211f      	movs	r1, #31
   1089a:	4790      	blx	r2
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
   1089c:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
   1089e:	3d00      	subs	r5, #0
   108a0:	bf18      	it	ne
   108a2:	2501      	movne	r5, #1
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
   108a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
   108a8:	ea43 3545 	orr.w	r5, r3, r5, lsl #13
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   108ac:	211f      	movs	r1, #31
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
   108ae:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   108b0:	4790      	blx	r2
	CRITICAL_SECTION_LEAVE()
   108b2:	a801      	add	r0, sp, #4
   108b4:	4b07      	ldr	r3, [pc, #28]	; (108d4 <_usart_set_parity+0x6c>)
   108b6:	4798      	blx	r3
	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
   108b8:	4b07      	ldr	r3, [pc, #28]	; (108d8 <_usart_set_parity+0x70>)
   108ba:	4631      	mov	r1, r6
   108bc:	4620      	mov	r0, r4
   108be:	4798      	blx	r3
}
   108c0:	b002      	add	sp, #8
   108c2:	bd70      	pop	{r4, r5, r6, pc}
   108c4:	00010471 	.word	0x00010471
   108c8:	0001049d 	.word	0x0001049d
   108cc:	00011679 	.word	0x00011679
   108d0:	00010441 	.word	0x00010441
   108d4:	00011687 	.word	0x00011687
   108d8:	00010485 	.word	0x00010485

000108dc <_spi_set_mode>:
{
   108dc:	b570      	push	{r4, r5, r6, lr}
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   108de:	69c4      	ldr	r4, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
   108e0:	f014 0403 	ands.w	r4, r4, #3
{
   108e4:	460a      	mov	r2, r1
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE)) {
   108e6:	d10e      	bne.n	10906 <_spi_set_mode+0x2a>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   108e8:	4e08      	ldr	r6, [pc, #32]	; (1090c <_spi_set_mode+0x30>)
   108ea:	2103      	movs	r1, #3
   108ec:	47b0      	blx	r6
	return ((Sercom *)hw)->SPI.CTRLA.reg;
   108ee:	6803      	ldr	r3, [r0, #0]
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
   108f0:	0712      	lsls	r2, r2, #28
	ctrla &= ~(SERCOM_SPI_CTRLA_CPOL | SERCOM_SPI_CTRLA_CPHA);
   108f2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
	ctrla |= (mode & 0x3u) << SERCOM_SPI_CTRLA_CPHA_Pos;
   108f6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
   108fa:	431a      	orrs	r2, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   108fc:	6002      	str	r2, [r0, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   108fe:	2103      	movs	r1, #3
   10900:	47b0      	blx	r6
	return ERR_NONE;
   10902:	4620      	mov	r0, r4
}
   10904:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
   10906:	f06f 0003 	mvn.w	r0, #3
   1090a:	e7fb      	b.n	10904 <_spi_set_mode+0x28>
   1090c:	00010439 	.word	0x00010439

00010910 <_spi_load_regs_master>:
{
   10910:	b538      	push	{r3, r4, r5, lr}
   10912:	460d      	mov	r5, r1
	ASSERT(hw && regs);
   10914:	4604      	mov	r4, r0
   10916:	b110      	cbz	r0, 1091e <_spi_load_regs_master+0xe>
   10918:	1e08      	subs	r0, r1, #0
   1091a:	bf18      	it	ne
   1091c:	2001      	movne	r0, #1
   1091e:	490f      	ldr	r1, [pc, #60]	; (1095c <_spi_load_regs_master+0x4c>)
   10920:	4b0f      	ldr	r3, [pc, #60]	; (10960 <_spi_load_regs_master+0x50>)
   10922:	f640 127a 	movw	r2, #2426	; 0x97a
   10926:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
   10928:	682b      	ldr	r3, [r5, #0]
   1092a:	4a0e      	ldr	r2, [pc, #56]	; (10964 <_spi_load_regs_master+0x54>)
	hri_sercomspi_write_CTRLA_reg(
   1092c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
   10930:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10934:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10936:	2103      	movs	r1, #3
   10938:	4620      	mov	r0, r4
   1093a:	4790      	blx	r2
	    (regs->ctrlb
   1093c:	686b      	ldr	r3, [r5, #4]
	        | (SERCOM_SPI_CTRLB_RXEN));
   1093e:	f423 3338 	bic.w	r3, r3, #188416	; 0x2e000
   10942:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(
   10946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	((Sercom *)hw)->SPI.CTRLB.reg = data;
   1094a:	6063      	str	r3, [r4, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   1094c:	2117      	movs	r1, #23
   1094e:	4790      	blx	r2
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
   10950:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
   10952:	7323      	strb	r3, [r4, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
   10954:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
   10956:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   1095a:	bd38      	pop	{r3, r4, r5, pc}
   1095c:	00016091 	.word	0x00016091
   10960:	0000d415 	.word	0x0000d415
   10964:	00010439 	.word	0x00010439

00010968 <_i2c_m_sync_init_impl>:
{
   10968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1096c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
   1096e:	4b23      	ldr	r3, [pc, #140]	; (109fc <_i2c_m_sync_init_impl+0x94>)
   10970:	f8df 9094 	ldr.w	r9, [pc, #148]	; 10a08 <_i2c_m_sync_init_impl+0xa0>
   10974:	4d22      	ldr	r5, [pc, #136]	; (10a00 <_i2c_m_sync_init_impl+0x98>)
{
   10976:	4607      	mov	r7, r0
	uint8_t i = _get_i2cm_index(hw);
   10978:	4608      	mov	r0, r1
   1097a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
   1097c:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
   1097e:	f013 0f01 	tst.w	r3, #1
   10982:	fa5f f880 	uxtb.w	r8, r0
   10986:	d115      	bne.n	109b4 <_i2c_m_sync_init_impl+0x4c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
   10988:	2318      	movs	r3, #24
   1098a:	fb03 9308 	mla	r3, r3, r8, r9
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   1098e:	2103      	movs	r1, #3
   10990:	4620      	mov	r0, r4
   10992:	6c9e      	ldr	r6, [r3, #72]	; 0x48
   10994:	47a8      	blx	r5
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
   10996:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
   10998:	079b      	lsls	r3, r3, #30
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
   1099a:	f006 061c 	and.w	r6, r6, #28
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
   1099e:	d503      	bpl.n	109a8 <_i2c_m_sync_init_impl+0x40>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
   109a0:	4b18      	ldr	r3, [pc, #96]	; (10a04 <_i2c_m_sync_init_impl+0x9c>)
   109a2:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
   109a4:	2102      	movs	r1, #2
   109a6:	47a8      	blx	r5
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
   109a8:	f046 0601 	orr.w	r6, r6, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
   109ac:	6026      	str	r6, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   109ae:	2103      	movs	r1, #3
   109b0:	4620      	mov	r0, r4
   109b2:	47a8      	blx	r5
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
   109b4:	4620      	mov	r0, r4
   109b6:	2101      	movs	r1, #1
   109b8:	47a8      	blx	r5
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
   109ba:	2218      	movs	r2, #24
   109bc:	fb02 9208 	mla	r2, r2, r8, r9
   109c0:	2103      	movs	r1, #3
   109c2:	6c96      	ldr	r6, [r2, #72]	; 0x48
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
   109c4:	6026      	str	r6, [r4, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
   109c6:	47a8      	blx	r5
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
   109c8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
   109ca:	6063      	str	r3, [r4, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   109cc:	2104      	movs	r1, #4
   109ce:	47a8      	blx	r5
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
   109d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
	((Sercom *)hw)->I2CM.BAUD.reg = data;
   109d2:	60e3      	str	r3, [r4, #12]
	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
   109d4:	f3c6 6301 	ubfx	r3, r6, #24, #2
   109d8:	81bb      	strh	r3, [r7, #12]
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
   109da:	6a63      	ldr	r3, [r4, #36]	; 0x24
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
   109dc:	f3c6 6640 	ubfx	r6, r6, #25, #1
	tmp &= ~SERCOM_I2CM_ADDR_HS;
   109e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
   109e4:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
   109e8:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   109ea:	2104      	movs	r1, #4
   109ec:	47a8      	blx	r5
	service->trise = _i2cms[i].trise;
   109ee:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
   109f2:	81fb      	strh	r3, [r7, #14]
}
   109f4:	2000      	movs	r0, #0
   109f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   109fa:	bf00      	nop
   109fc:	000106bd 	.word	0x000106bd
   10a00:	00010431 	.word	0x00010431
   10a04:	00010449 	.word	0x00010449
   10a08:	000160ac 	.word	0x000160ac

00010a0c <_usart_init>:
{
   10a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
   10a10:	4b2d      	ldr	r3, [pc, #180]	; (10ac8 <_usart_init+0xbc>)
{
   10a12:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
   10a14:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
   10a16:	4605      	mov	r5, r0
   10a18:	b170      	cbz	r0, 10a38 <_usart_init+0x2c>
   10a1a:	2801      	cmp	r0, #1
   10a1c:	d00c      	beq.n	10a38 <_usart_init+0x2c>
   10a1e:	2802      	cmp	r0, #2
   10a20:	d00a      	beq.n	10a38 <_usart_init+0x2c>
   10a22:	2804      	cmp	r0, #4
   10a24:	d04b      	beq.n	10abe <_usart_init+0xb2>
   10a26:	2806      	cmp	r0, #6
   10a28:	d04b      	beq.n	10ac2 <_usart_init+0xb6>
	ASSERT(false);
   10a2a:	4928      	ldr	r1, [pc, #160]	; (10acc <_usart_init+0xc0>)
   10a2c:	4b28      	ldr	r3, [pc, #160]	; (10ad0 <_usart_init+0xc4>)
   10a2e:	f240 2276 	movw	r2, #630	; 0x276
   10a32:	2000      	movs	r0, #0
   10a34:	4798      	blx	r3
	return 0;
   10a36:	2500      	movs	r5, #0
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
   10a38:	69e3      	ldr	r3, [r4, #28]
   10a3a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 10adc <_usart_init+0xd0>
   10a3e:	4e25      	ldr	r6, [pc, #148]	; (10ad4 <_usart_init+0xc8>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
   10a40:	f013 0f01 	tst.w	r3, #1
   10a44:	d115      	bne.n	10a72 <_usart_init+0x66>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
   10a46:	2318      	movs	r3, #24
   10a48:	fb03 8305 	mla	r3, r3, r5, r8
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10a4c:	2103      	movs	r1, #3
   10a4e:	4620      	mov	r0, r4
   10a50:	6e1f      	ldr	r7, [r3, #96]	; 0x60
   10a52:	47b0      	blx	r6
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
   10a54:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
   10a56:	079b      	lsls	r3, r3, #30
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
   10a58:	f007 071c 	and.w	r7, r7, #28
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
   10a5c:	d503      	bpl.n	10a66 <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
   10a5e:	4b1e      	ldr	r3, [pc, #120]	; (10ad8 <_usart_init+0xcc>)
   10a60:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
   10a62:	2102      	movs	r1, #2
   10a64:	47b0      	blx	r6
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
   10a66:	f047 0701 	orr.w	r7, r7, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
   10a6a:	6027      	str	r7, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10a6c:	2103      	movs	r1, #3
   10a6e:	4620      	mov	r0, r4
   10a70:	47b0      	blx	r6
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
   10a72:	2101      	movs	r1, #1
   10a74:	4620      	mov	r0, r4
   10a76:	47b0      	blx	r6
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
   10a78:	2018      	movs	r0, #24
   10a7a:	fb00 8505 	mla	r5, r0, r5, r8
   10a7e:	2103      	movs	r1, #3
   10a80:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	((Sercom *)hw)->USART.CTRLA.reg = data;
   10a82:	6022      	str	r2, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10a84:	4620      	mov	r0, r4
   10a86:	47b0      	blx	r6
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
   10a88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
	((Sercom *)hw)->USART.CTRLB.reg = data;
   10a8a:	6063      	str	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
   10a8c:	211f      	movs	r1, #31
   10a8e:	47b0      	blx	r6
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
   10a90:	6eab      	ldr	r3, [r5, #104]	; 0x68
	((Sercom *)hw)->USART.CTRLC.reg = data;
   10a92:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
   10a94:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
   10a98:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   10a9c:	d008      	beq.n	10ab0 <_usart_init+0xa4>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
   10a9e:	89a2      	ldrh	r2, [r4, #12]
   10aa0:	f363 020c 	bfi	r2, r3, #0, #13
   10aa4:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
   10aa6:	89a3      	ldrh	r3, [r4, #12]
   10aa8:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
   10aac:	f362 334f 	bfi	r3, r2, #13, #3
	((Sercom *)hw)->USART.RXPL.reg = data;
   10ab0:	2000      	movs	r0, #0
	((Sercom *)hw)->USART.BAUD.reg = data;
   10ab2:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
   10ab4:	73a0      	strb	r0, [r4, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
   10ab6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
   10aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
   10abe:	2503      	movs	r5, #3
   10ac0:	e7ba      	b.n	10a38 <_usart_init+0x2c>
   10ac2:	2504      	movs	r5, #4
   10ac4:	e7b8      	b.n	10a38 <_usart_init+0x2c>
   10ac6:	bf00      	nop
   10ac8:	000104b1 	.word	0x000104b1
   10acc:	00016091 	.word	0x00016091
   10ad0:	0000d415 	.word	0x0000d415
   10ad4:	00010441 	.word	0x00010441
   10ad8:	0001049d 	.word	0x0001049d
   10adc:	000160ac 	.word	0x000160ac

00010ae0 <_usart_sync_init>:
{
   10ae0:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   10ae2:	4605      	mov	r5, r0
   10ae4:	3800      	subs	r0, #0
{
   10ae6:	460c      	mov	r4, r1
	ASSERT(device);
   10ae8:	4b05      	ldr	r3, [pc, #20]	; (10b00 <_usart_sync_init+0x20>)
   10aea:	4906      	ldr	r1, [pc, #24]	; (10b04 <_usart_sync_init+0x24>)
   10aec:	bf18      	it	ne
   10aee:	2001      	movne	r0, #1
   10af0:	22c8      	movs	r2, #200	; 0xc8
   10af2:	4798      	blx	r3
	device->hw = hw;
   10af4:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
   10af6:	4620      	mov	r0, r4
   10af8:	4b03      	ldr	r3, [pc, #12]	; (10b08 <_usart_sync_init+0x28>)
}
   10afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _usart_init(hw);
   10afe:	4718      	bx	r3
   10b00:	0000d415 	.word	0x0000d415
   10b04:	00016091 	.word	0x00016091
   10b08:	00010a0d 	.word	0x00010a0d

00010b0c <_usart_async_init>:
{
   10b0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ASSERT(device);
   10b10:	4606      	mov	r6, r0
   10b12:	3800      	subs	r0, #0
   10b14:	bf18      	it	ne
   10b16:	2001      	movne	r0, #1
   10b18:	4b12      	ldr	r3, [pc, #72]	; (10b64 <_usart_async_init+0x58>)
{
   10b1a:	460c      	mov	r4, r1
	ASSERT(device);
   10b1c:	22d6      	movs	r2, #214	; 0xd6
   10b1e:	4912      	ldr	r1, [pc, #72]	; (10b68 <_usart_async_init+0x5c>)
   10b20:	4798      	blx	r3
	init_status = _usart_init(hw);
   10b22:	4b12      	ldr	r3, [pc, #72]	; (10b6c <_usart_async_init+0x60>)
   10b24:	4620      	mov	r0, r4
   10b26:	4798      	blx	r3
	if (init_status) {
   10b28:	4605      	mov	r5, r0
   10b2a:	b9b8      	cbnz	r0, 10b5c <_usart_async_init+0x50>
	_sercom_init_irq_param(hw, (void *)device);
   10b2c:	4631      	mov	r1, r6
	device->hw = hw;
   10b2e:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
   10b30:	4620      	mov	r0, r4
   10b32:	4b0f      	ldr	r3, [pc, #60]	; (10b70 <_usart_async_init+0x64>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   10b34:	f8df 8048 	ldr.w	r8, [pc, #72]	; 10b80 <_usart_async_init+0x74>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10b38:	4f0e      	ldr	r7, [pc, #56]	; (10b74 <_usart_async_init+0x68>)
		NVIC_EnableIRQ((IRQn_Type)irq);
   10b3a:	4e0f      	ldr	r6, [pc, #60]	; (10b78 <_usart_async_init+0x6c>)
	_sercom_init_irq_param(hw, (void *)device);
   10b3c:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
   10b3e:	4b0f      	ldr	r3, [pc, #60]	; (10b7c <_usart_async_init+0x70>)
   10b40:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   10b42:	4629      	mov	r1, r5
	uint8_t irq = _sercom_get_irq_num(hw);
   10b44:	4604      	mov	r4, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   10b46:	1863      	adds	r3, r4, r1
   10b48:	b2d8      	uxtb	r0, r3
   10b4a:	9001      	str	r0, [sp, #4]
   10b4c:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10b4e:	9801      	ldr	r0, [sp, #4]
   10b50:	47b8      	blx	r7
		NVIC_EnableIRQ((IRQn_Type)irq);
   10b52:	9801      	ldr	r0, [sp, #4]
   10b54:	47b0      	blx	r6
	for (uint32_t i = 0; i < 4; i++) {
   10b56:	3101      	adds	r1, #1
   10b58:	2904      	cmp	r1, #4
   10b5a:	d1f4      	bne.n	10b46 <_usart_async_init+0x3a>
}
   10b5c:	4628      	mov	r0, r5
   10b5e:	b002      	add	sp, #8
   10b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b64:	0000d415 	.word	0x0000d415
   10b68:	00016091 	.word	0x00016091
   10b6c:	00010a0d 	.word	0x00010a0d
   10b70:	00010559 	.word	0x00010559
   10b74:	000106a1 	.word	0x000106a1
   10b78:	00010635 	.word	0x00010635
   10b7c:	000105b9 	.word	0x000105b9
   10b80:	0001067d 	.word	0x0001067d

00010b84 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
   10b84:	6800      	ldr	r0, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   10b86:	6803      	ldr	r3, [r0, #0]
   10b88:	f043 0302 	orr.w	r3, r3, #2
   10b8c:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10b8e:	2103      	movs	r1, #3
   10b90:	4b00      	ldr	r3, [pc, #0]	; (10b94 <_usart_sync_enable+0x10>)
   10b92:	4718      	bx	r3
   10b94:	00010441 	.word	0x00010441

00010b98 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
   10b98:	6980      	ldr	r0, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   10b9a:	6803      	ldr	r3, [r0, #0]
   10b9c:	f043 0302 	orr.w	r3, r3, #2
   10ba0:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
   10ba2:	2103      	movs	r1, #3
   10ba4:	4b00      	ldr	r3, [pc, #0]	; (10ba8 <_usart_async_enable+0x10>)
   10ba6:	4718      	bx	r3
   10ba8:	00010441 	.word	0x00010441

00010bac <_usart_async_disable>:
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
   10bac:	6980      	ldr	r0, [r0, #24]
   10bae:	4b01      	ldr	r3, [pc, #4]	; (10bb4 <_usart_async_disable+0x8>)
   10bb0:	4718      	bx	r3
   10bb2:	bf00      	nop
   10bb4:	0001049d 	.word	0x0001049d

00010bb8 <_usart_async_set_parity>:
	_usart_set_parity(device->hw, parity);
   10bb8:	6980      	ldr	r0, [r0, #24]
   10bba:	4b01      	ldr	r3, [pc, #4]	; (10bc0 <_usart_async_set_parity+0x8>)
   10bbc:	4718      	bx	r3
   10bbe:	bf00      	nop
   10bc0:	00010869 	.word	0x00010869

00010bc4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
   10bc4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
   10bc6:	6299      	str	r1, [r3, #40]	; 0x28
}
   10bc8:	4770      	bx	lr

00010bca <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
   10bca:	6983      	ldr	r3, [r0, #24]
   10bcc:	6299      	str	r1, [r3, #40]	; 0x28
}
   10bce:	4770      	bx	lr

00010bd0 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
   10bd0:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
   10bd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
   10bd4:	b2c0      	uxtb	r0, r0
   10bd6:	4770      	bx	lr

00010bd8 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
   10bd8:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
   10bda:	7e18      	ldrb	r0, [r3, #24]
}
   10bdc:	f000 0001 	and.w	r0, r0, #1
   10be0:	4770      	bx	lr

00010be2 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
   10be2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
   10be4:	7e18      	ldrb	r0, [r3, #24]
}
   10be6:	f3c0 0040 	ubfx	r0, r0, #1, #1
   10bea:	4770      	bx	lr

00010bec <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
   10bec:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
   10bee:	7e18      	ldrb	r0, [r3, #24]
}
   10bf0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   10bf4:	4770      	bx	lr

00010bf6 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
   10bf6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10bf8:	2201      	movs	r2, #1
   10bfa:	759a      	strb	r2, [r3, #22]
}
   10bfc:	4770      	bx	lr

00010bfe <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
   10bfe:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
   10c00:	2202      	movs	r2, #2
   10c02:	759a      	strb	r2, [r3, #22]
}
   10c04:	4770      	bx	lr
	...

00010c08 <_usart_async_set_irq_state>:
{
   10c08:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   10c0a:	4604      	mov	r4, r0
   10c0c:	3800      	subs	r0, #0
{
   10c0e:	460e      	mov	r6, r1
	ASSERT(device);
   10c10:	bf18      	it	ne
   10c12:	2001      	movne	r0, #1
   10c14:	490f      	ldr	r1, [pc, #60]	; (10c54 <_usart_async_set_irq_state+0x4c>)
   10c16:	4b10      	ldr	r3, [pc, #64]	; (10c58 <_usart_async_set_irq_state+0x50>)
{
   10c18:	4615      	mov	r5, r2
	ASSERT(device);
   10c1a:	f240 2236 	movw	r2, #566	; 0x236
   10c1e:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
   10c20:	f016 0ffd 	tst.w	r6, #253	; 0xfd
   10c24:	d109      	bne.n	10c3a <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
   10c26:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
   10c28:	2101      	movs	r1, #1
   10c2a:	2202      	movs	r2, #2
   10c2c:	b915      	cbnz	r5, 10c34 <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
   10c2e:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
   10c30:	751a      	strb	r2, [r3, #20]
}
   10c32:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
   10c34:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
   10c36:	759a      	strb	r2, [r3, #22]
   10c38:	e7fb      	b.n	10c32 <_usart_async_set_irq_state+0x2a>
	} else if (USART_ASYNC_RX_DONE == type) {
   10c3a:	2e01      	cmp	r6, #1
   10c3c:	d104      	bne.n	10c48 <_usart_async_set_irq_state+0x40>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
   10c3e:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
   10c40:	2204      	movs	r2, #4
	if (value == 0x0) {
   10c42:	2d00      	cmp	r5, #0
   10c44:	d1f7      	bne.n	10c36 <_usart_async_set_irq_state+0x2e>
   10c46:	e7f3      	b.n	10c30 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
   10c48:	2e03      	cmp	r6, #3
   10c4a:	d1f2      	bne.n	10c32 <_usart_async_set_irq_state+0x2a>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
   10c4c:	69a3      	ldr	r3, [r4, #24]
   10c4e:	2280      	movs	r2, #128	; 0x80
   10c50:	e7f7      	b.n	10c42 <_usart_async_set_irq_state+0x3a>
   10c52:	bf00      	nop
   10c54:	00016091 	.word	0x00016091
   10c58:	0000d415 	.word	0x0000d415

00010c5c <_i2c_m_async_init>:
{
   10c5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ASSERT(i2c_dev);
   10c60:	4605      	mov	r5, r0
   10c62:	3800      	subs	r0, #0
{
   10c64:	460c      	mov	r4, r1
	ASSERT(i2c_dev);
   10c66:	bf18      	it	ne
   10c68:	2001      	movne	r0, #1
   10c6a:	4913      	ldr	r1, [pc, #76]	; (10cb8 <_i2c_m_async_init+0x5c>)
   10c6c:	4b13      	ldr	r3, [pc, #76]	; (10cbc <_i2c_m_async_init+0x60>)
   10c6e:	f240 42d3 	movw	r2, #1235	; 0x4d3
   10c72:	4798      	blx	r3
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
   10c74:	4b12      	ldr	r3, [pc, #72]	; (10cc0 <_i2c_m_async_init+0x64>)
	i2c_dev->hw = hw;
   10c76:	612c      	str	r4, [r5, #16]
	init_status = _i2c_m_sync_init_impl(&i2c_dev->service, hw);
   10c78:	4621      	mov	r1, r4
   10c7a:	4628      	mov	r0, r5
   10c7c:	4798      	blx	r3
	if (init_status) {
   10c7e:	4606      	mov	r6, r0
   10c80:	b9b0      	cbnz	r0, 10cb0 <_i2c_m_async_init+0x54>
	_sercom_init_irq_param(hw, (void *)i2c_dev);
   10c82:	4629      	mov	r1, r5
   10c84:	4620      	mov	r0, r4
   10c86:	4b0f      	ldr	r3, [pc, #60]	; (10cc4 <_i2c_m_async_init+0x68>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   10c88:	f8df 8048 	ldr.w	r8, [pc, #72]	; 10cd4 <_i2c_m_async_init+0x78>
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10c8c:	4f0e      	ldr	r7, [pc, #56]	; (10cc8 <_i2c_m_async_init+0x6c>)
		NVIC_EnableIRQ((IRQn_Type)irq);
   10c8e:	4d0f      	ldr	r5, [pc, #60]	; (10ccc <_i2c_m_async_init+0x70>)
	_sercom_init_irq_param(hw, (void *)i2c_dev);
   10c90:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
   10c92:	4b0f      	ldr	r3, [pc, #60]	; (10cd0 <_i2c_m_async_init+0x74>)
   10c94:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   10c96:	4631      	mov	r1, r6
	uint8_t irq = _sercom_get_irq_num(hw);
   10c98:	4604      	mov	r4, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   10c9a:	1863      	adds	r3, r4, r1
   10c9c:	b2d8      	uxtb	r0, r3
   10c9e:	9001      	str	r0, [sp, #4]
   10ca0:	47c0      	blx	r8
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   10ca2:	9801      	ldr	r0, [sp, #4]
   10ca4:	47b8      	blx	r7
		NVIC_EnableIRQ((IRQn_Type)irq);
   10ca6:	9801      	ldr	r0, [sp, #4]
   10ca8:	47a8      	blx	r5
	for (uint32_t i = 0; i < 4; i++) {
   10caa:	3101      	adds	r1, #1
   10cac:	2904      	cmp	r1, #4
   10cae:	d1f4      	bne.n	10c9a <_i2c_m_async_init+0x3e>
}
   10cb0:	4630      	mov	r0, r6
   10cb2:	b002      	add	sp, #8
   10cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10cb8:	00016091 	.word	0x00016091
   10cbc:	0000d415 	.word	0x0000d415
   10cc0:	00010969 	.word	0x00010969
   10cc4:	00010559 	.word	0x00010559
   10cc8:	000106a1 	.word	0x000106a1
   10ccc:	00010635 	.word	0x00010635
   10cd0:	000105b9 	.word	0x000105b9
   10cd4:	0001067d 	.word	0x0001067d

00010cd8 <_i2c_m_async_transfer>:
{
   10cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ASSERT(i2c_dev);
   10cdc:	4604      	mov	r4, r0
   10cde:	3800      	subs	r0, #0
   10ce0:	4e3c      	ldr	r6, [pc, #240]	; (10dd4 <_i2c_m_async_transfer+0xfc>)
{
   10ce2:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
   10ce4:	bf18      	it	ne
   10ce6:	2001      	movne	r0, #1
   10ce8:	493b      	ldr	r1, [pc, #236]	; (10dd8 <_i2c_m_async_transfer+0x100>)
   10cea:	f240 5229 	movw	r2, #1321	; 0x529
   10cee:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
   10cf0:	6920      	ldr	r0, [r4, #16]
   10cf2:	4939      	ldr	r1, [pc, #228]	; (10dd8 <_i2c_m_async_transfer+0x100>)
   10cf4:	3800      	subs	r0, #0
   10cf6:	f240 522a 	movw	r2, #1322	; 0x52a
   10cfa:	bf18      	it	ne
   10cfc:	2001      	movne	r0, #1
   10cfe:	47b0      	blx	r6
	ASSERT(msg);
   10d00:	1e28      	subs	r0, r5, #0
   10d02:	bf18      	it	ne
   10d04:	2001      	movne	r0, #1
   10d06:	4934      	ldr	r1, [pc, #208]	; (10dd8 <_i2c_m_async_transfer+0x100>)
   10d08:	f240 522b 	movw	r2, #1323	; 0x52b
   10d0c:	47b0      	blx	r6
	if (msg->len == 0) {
   10d0e:	6868      	ldr	r0, [r5, #4]
   10d10:	2800      	cmp	r0, #0
   10d12:	d048      	beq.n	10da6 <_i2c_m_async_transfer+0xce>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
   10d14:	8863      	ldrh	r3, [r4, #2]
   10d16:	05da      	lsls	r2, r3, #23
   10d18:	d458      	bmi.n	10dcc <_i2c_m_async_transfer+0xf4>
	msg->flags |= I2C_M_BUSY;
   10d1a:	886b      	ldrh	r3, [r5, #2]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10d1c:	4f2f      	ldr	r7, [pc, #188]	; (10ddc <_i2c_m_async_transfer+0x104>)
   10d1e:	b29b      	uxth	r3, r3
   10d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10d24:	806b      	strh	r3, [r5, #2]
	i2c_dev->service.msg = *msg;
   10d26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   10d2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(i2c_dev->hw);
   10d2e:	6920      	ldr	r0, [r4, #16]
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
   10d30:	6843      	ldr	r3, [r0, #4]
   10d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10d36:	6043      	str	r3, [r0, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10d38:	2104      	movs	r1, #4
   10d3a:	47b8      	blx	r7
	void *             hw    = i2c_dev->hw;
   10d3c:	6925      	ldr	r5, [r4, #16]
	ASSERT(i2c_dev);
   10d3e:	4926      	ldr	r1, [pc, #152]	; (10dd8 <_i2c_m_async_transfer+0x100>)
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
   10d40:	f8d5 8000 	ldr.w	r8, [r5]
   10d44:	f240 5201 	movw	r2, #1281	; 0x501
   10d48:	2001      	movs	r0, #1
   10d4a:	47b0      	blx	r6
	if (msg->len == 1 && sclsm) {
   10d4c:	6863      	ldr	r3, [r4, #4]
   10d4e:	2b01      	cmp	r3, #1
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   10d50:	686b      	ldr	r3, [r5, #4]
   10d52:	d12a      	bne.n	10daa <_i2c_m_async_transfer+0xd2>
   10d54:	f018 6f00 	tst.w	r8, #134217728	; 0x8000000
   10d58:	d027      	beq.n	10daa <_i2c_m_async_transfer+0xd2>
   10d5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10d5e:	4628      	mov	r0, r5
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   10d60:	606b      	str	r3, [r5, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10d62:	2104      	movs	r1, #4
   10d64:	47b8      	blx	r7
	if (msg->addr & I2C_M_TEN) {
   10d66:	8820      	ldrh	r0, [r4, #0]
   10d68:	f410 6680 	ands.w	r6, r0, #1024	; 0x400
   10d6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   10d70:	d01e      	beq.n	10db0 <_i2c_m_async_transfer+0xd8>
		if (msg->flags & I2C_M_RD) {
   10d72:	8863      	ldrh	r3, [r4, #2]
   10d74:	07db      	lsls	r3, r3, #31
			msg->flags |= I2C_M_TEN;
   10d76:	bf41      	itttt	mi
   10d78:	8863      	ldrhmi	r3, [r4, #2]
   10d7a:	b29b      	uxthmi	r3, r3
   10d7c:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
   10d80:	8063      	strhmi	r3, [r4, #2]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10d82:	2104      	movs	r1, #4
   10d84:	4628      	mov	r0, r5
   10d86:	47b8      	blx	r7
	return ((Sercom *)hw)->I2CM.ADDR.reg;
   10d88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
   10d8a:	f022 0201 	bic.w	r2, r2, #1
   10d8e:	0552      	lsls	r2, r2, #21
   10d90:	0d52      	lsrs	r2, r2, #21
   10d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   10d96:	431a      	orrs	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
   10d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10d9c:	4628      	mov	r0, r5
	((Sercom *)hw)->I2CM.ADDR.reg = data;
   10d9e:	626a      	str	r2, [r5, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10da0:	2104      	movs	r1, #4
   10da2:	47b8      	blx	r7
	return ERR_NONE;
   10da4:	2000      	movs	r0, #0
}
   10da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   10daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   10dae:	e7d6      	b.n	10d5e <_i2c_m_async_transfer+0x86>
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
   10db0:	2104      	movs	r1, #4
   10db2:	4628      	mov	r0, r5
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
   10db4:	8864      	ldrh	r4, [r4, #2]
   10db6:	47b8      	blx	r7
   10db8:	b2a4      	uxth	r4, r4
	return ((Sercom *)hw)->I2CM.ADDR.reg;
   10dba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   10dbc:	b2d2      	uxtb	r2, r2
   10dbe:	f004 0401 	and.w	r4, r4, #1
   10dc2:	4322      	orrs	r2, r4
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
   10dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
   10dc8:	431a      	orrs	r2, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
   10dca:	e7e7      	b.n	10d9c <_i2c_m_async_transfer+0xc4>
		return ERR_BUSY;
   10dcc:	f06f 0003 	mvn.w	r0, #3
   10dd0:	e7e9      	b.n	10da6 <_i2c_m_async_transfer+0xce>
   10dd2:	bf00      	nop
   10dd4:	0000d415 	.word	0x0000d415
   10dd8:	00016091 	.word	0x00016091
   10ddc:	00010431 	.word	0x00010431

00010de0 <_i2c_m_async_register_callback>:
	switch (type) {
   10de0:	2901      	cmp	r1, #1
   10de2:	d005      	beq.n	10df0 <_i2c_m_async_register_callback+0x10>
   10de4:	2902      	cmp	r1, #2
   10de6:	d005      	beq.n	10df4 <_i2c_m_async_register_callback+0x14>
   10de8:	b901      	cbnz	r1, 10dec <_i2c_m_async_register_callback+0xc>
		i2c_dev->cb.error = (_i2c_error_cb_t)func;
   10dea:	6142      	str	r2, [r0, #20]
}
   10dec:	2000      	movs	r0, #0
   10dee:	4770      	bx	lr
		i2c_dev->cb.tx_complete = (_i2c_complete_cb_t)func;
   10df0:	6182      	str	r2, [r0, #24]
		break;
   10df2:	e7fb      	b.n	10dec <_i2c_m_async_register_callback+0xc>
		i2c_dev->cb.rx_complete = (_i2c_complete_cb_t)func;
   10df4:	61c2      	str	r2, [r0, #28]
		break;
   10df6:	e7f9      	b.n	10dec <_i2c_m_async_register_callback+0xc>

00010df8 <SERCOM0_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom0_dev);
   10df8:	4b01      	ldr	r3, [pc, #4]	; (10e00 <SERCOM0_0_Handler+0x8>)
   10dfa:	6818      	ldr	r0, [r3, #0]
   10dfc:	4b01      	ldr	r3, [pc, #4]	; (10e04 <SERCOM0_0_Handler+0xc>)
   10dfe:	4718      	bx	r3
   10e00:	20001084 	.word	0x20001084
   10e04:	000104e9 	.word	0x000104e9

00010e08 <SERCOM0_1_Handler>:
   10e08:	4b00      	ldr	r3, [pc, #0]	; (10e0c <SERCOM0_1_Handler+0x4>)
   10e0a:	4718      	bx	r3
   10e0c:	00010df9 	.word	0x00010df9

00010e10 <SERCOM0_2_Handler>:
   10e10:	4b00      	ldr	r3, [pc, #0]	; (10e14 <SERCOM0_2_Handler+0x4>)
   10e12:	4718      	bx	r3
   10e14:	00010df9 	.word	0x00010df9

00010e18 <SERCOM0_3_Handler>:
   10e18:	4b00      	ldr	r3, [pc, #0]	; (10e1c <SERCOM0_3_Handler+0x4>)
   10e1a:	4718      	bx	r3
   10e1c:	00010df9 	.word	0x00010df9

00010e20 <SERCOM1_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom1_dev);
   10e20:	4b01      	ldr	r3, [pc, #4]	; (10e28 <SERCOM1_0_Handler+0x8>)
   10e22:	6858      	ldr	r0, [r3, #4]
   10e24:	4b01      	ldr	r3, [pc, #4]	; (10e2c <SERCOM1_0_Handler+0xc>)
   10e26:	4718      	bx	r3
   10e28:	20001084 	.word	0x20001084
   10e2c:	000104e9 	.word	0x000104e9

00010e30 <SERCOM1_1_Handler>:
   10e30:	4b00      	ldr	r3, [pc, #0]	; (10e34 <SERCOM1_1_Handler+0x4>)
   10e32:	4718      	bx	r3
   10e34:	00010e21 	.word	0x00010e21

00010e38 <SERCOM1_2_Handler>:
   10e38:	4b00      	ldr	r3, [pc, #0]	; (10e3c <SERCOM1_2_Handler+0x4>)
   10e3a:	4718      	bx	r3
   10e3c:	00010e21 	.word	0x00010e21

00010e40 <SERCOM1_3_Handler>:
   10e40:	4b00      	ldr	r3, [pc, #0]	; (10e44 <SERCOM1_3_Handler+0x4>)
   10e42:	4718      	bx	r3
   10e44:	00010e21 	.word	0x00010e21

00010e48 <SERCOM3_0_Handler>:
	_spi_handler(_sercom3_dev);
   10e48:	4b0f      	ldr	r3, [pc, #60]	; (10e88 <SERCOM3_0_Handler+0x40>)
   10e4a:	6898      	ldr	r0, [r3, #8]
	void *                      hw = dev->prvt;
   10e4c:	6802      	ldr	r2, [r0, #0]
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
   10e4e:	7e13      	ldrb	r3, [r2, #24]
	return ((Sercom *)hw)->SPI.INTENSET.reg;
   10e50:	7d91      	ldrb	r1, [r2, #22]
	st &= hri_sercomspi_read_INTEN_reg(hw);
   10e52:	400b      	ands	r3, r1
	if (st & SERCOM_SPI_INTFLAG_DRE) {
   10e54:	07d9      	lsls	r1, r3, #31
   10e56:	d501      	bpl.n	10e5c <SERCOM3_0_Handler+0x14>
		dev->callbacks.tx(dev);
   10e58:	6883      	ldr	r3, [r0, #8]
		dev->callbacks.rx(dev);
   10e5a:	4718      	bx	r3
	} else if (st & SERCOM_SPI_INTFLAG_RXC) {
   10e5c:	0759      	lsls	r1, r3, #29
   10e5e:	d501      	bpl.n	10e64 <SERCOM3_0_Handler+0x1c>
		dev->callbacks.rx(dev);
   10e60:	68c3      	ldr	r3, [r0, #12]
   10e62:	e7fa      	b.n	10e5a <SERCOM3_0_Handler+0x12>
	} else if (st & SERCOM_SPI_INTFLAG_TXC) {
   10e64:	0799      	lsls	r1, r3, #30
   10e66:	d503      	bpl.n	10e70 <SERCOM3_0_Handler+0x28>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
   10e68:	2302      	movs	r3, #2
   10e6a:	7613      	strb	r3, [r2, #24]
		dev->callbacks.complete(dev);
   10e6c:	6903      	ldr	r3, [r0, #16]
   10e6e:	e7f4      	b.n	10e5a <SERCOM3_0_Handler+0x12>
	} else if (st & SERCOM_SPI_INTFLAG_ERROR) {
   10e70:	061b      	lsls	r3, r3, #24
   10e72:	d507      	bpl.n	10e84 <SERCOM3_0_Handler+0x3c>
	((Sercom *)hw)->SPI.STATUS.reg = mask;
   10e74:	2304      	movs	r3, #4
   10e76:	8353      	strh	r3, [r2, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
   10e78:	2380      	movs	r3, #128	; 0x80
   10e7a:	7613      	strb	r3, [r2, #24]
		dev->callbacks.err(dev, ERR_OVERFLOW);
   10e7c:	f06f 0112 	mvn.w	r1, #18
   10e80:	6943      	ldr	r3, [r0, #20]
   10e82:	4718      	bx	r3
}
   10e84:	4770      	bx	lr
   10e86:	bf00      	nop
   10e88:	20001084 	.word	0x20001084

00010e8c <SERCOM3_1_Handler>:
   10e8c:	4b00      	ldr	r3, [pc, #0]	; (10e90 <SERCOM3_1_Handler+0x4>)
   10e8e:	4718      	bx	r3
   10e90:	00010e49 	.word	0x00010e49

00010e94 <SERCOM3_2_Handler>:
   10e94:	4b00      	ldr	r3, [pc, #0]	; (10e98 <SERCOM3_2_Handler+0x4>)
   10e96:	4718      	bx	r3
   10e98:	00010e49 	.word	0x00010e49

00010e9c <SERCOM3_3_Handler>:
   10e9c:	4b00      	ldr	r3, [pc, #0]	; (10ea0 <SERCOM3_3_Handler+0x4>)
   10e9e:	4718      	bx	r3
   10ea0:	00010e49 	.word	0x00010e49

00010ea4 <SERCOM4_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom4_dev);
   10ea4:	4b01      	ldr	r3, [pc, #4]	; (10eac <SERCOM4_0_Handler+0x8>)
   10ea6:	68d8      	ldr	r0, [r3, #12]
   10ea8:	4b01      	ldr	r3, [pc, #4]	; (10eb0 <SERCOM4_0_Handler+0xc>)
   10eaa:	4718      	bx	r3
   10eac:	20001084 	.word	0x20001084
   10eb0:	000104e9 	.word	0x000104e9

00010eb4 <SERCOM4_1_Handler>:
   10eb4:	4b00      	ldr	r3, [pc, #0]	; (10eb8 <SERCOM4_1_Handler+0x4>)
   10eb6:	4718      	bx	r3
   10eb8:	00010ea5 	.word	0x00010ea5

00010ebc <SERCOM4_2_Handler>:
   10ebc:	4b00      	ldr	r3, [pc, #0]	; (10ec0 <SERCOM4_2_Handler+0x4>)
   10ebe:	4718      	bx	r3
   10ec0:	00010ea5 	.word	0x00010ea5

00010ec4 <SERCOM4_3_Handler>:
   10ec4:	4b00      	ldr	r3, [pc, #0]	; (10ec8 <SERCOM4_3_Handler+0x4>)
   10ec6:	4718      	bx	r3
   10ec8:	00010ea5 	.word	0x00010ea5

00010ecc <SERCOM5_0_Handler>:
	_sercom_i2c_m_irq_handler(_sercom5_dev);
   10ecc:	4b1f      	ldr	r3, [pc, #124]	; (10f4c <SERCOM5_0_Handler+0x80>)
	ASSERT(i2c_dev);
   10ece:	4920      	ldr	r1, [pc, #128]	; (10f50 <SERCOM5_0_Handler+0x84>)
{
   10ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	_sercom_i2c_m_irq_handler(_sercom5_dev);
   10ed4:	691c      	ldr	r4, [r3, #16]
	ASSERT(i2c_dev);
   10ed6:	4f1f      	ldr	r7, [pc, #124]	; (10f54 <SERCOM5_0_Handler+0x88>)
	void *   hw    = i2c_dev->hw;
   10ed8:	6926      	ldr	r6, [r4, #16]
	ASSERT(i2c_dev);
   10eda:	f240 425f 	movw	r2, #1119	; 0x45f
   10ede:	2001      	movs	r0, #1
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
   10ee0:	7e35      	ldrb	r5, [r6, #24]
   10ee2:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
   10ee4:	6920      	ldr	r0, [r4, #16]
   10ee6:	491a      	ldr	r1, [pc, #104]	; (10f50 <SERCOM5_0_Handler+0x84>)
   10ee8:	3800      	subs	r0, #0
   10eea:	bf18      	it	ne
   10eec:	2001      	movne	r0, #1
   10eee:	b2ed      	uxtb	r5, r5
   10ef0:	f44f 628c 	mov.w	r2, #1120	; 0x460
   10ef4:	47b8      	blx	r7
	while (!(flags & ERROR_FLAG)) {
   10ef6:	0629      	lsls	r1, r5, #24
   10ef8:	d415      	bmi.n	10f26 <SERCOM5_0_Handler+0x5a>
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
   10efa:	4629      	mov	r1, r5
   10efc:	4b16      	ldr	r3, [pc, #88]	; (10f58 <SERCOM5_0_Handler+0x8c>)
   10efe:	4622      	mov	r2, r4
   10f00:	4630      	mov	r0, r6
   10f02:	4798      	blx	r3
		if (ret != 0) {
   10f04:	4601      	mov	r1, r0
   10f06:	b978      	cbnz	r0, 10f28 <SERCOM5_0_Handler+0x5c>
		if ((flags & MB_FLAG) && i2c_dev->cb.tx_complete) {
   10f08:	07ea      	lsls	r2, r5, #31
   10f0a:	d505      	bpl.n	10f18 <SERCOM5_0_Handler+0x4c>
   10f0c:	69a3      	ldr	r3, [r4, #24]
   10f0e:	b11b      	cbz	r3, 10f18 <SERCOM5_0_Handler+0x4c>
			i2c_dev->cb.rx_complete(i2c_dev);
   10f10:	4620      	mov	r0, r4
}
   10f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			i2c_dev->cb.rx_complete(i2c_dev);
   10f16:	4718      	bx	r3
		} else if ((flags & SB_FLAG) && i2c_dev->cb.rx_complete) {
   10f18:	07ab      	lsls	r3, r5, #30
   10f1a:	d502      	bpl.n	10f22 <SERCOM5_0_Handler+0x56>
   10f1c:	69e3      	ldr	r3, [r4, #28]
   10f1e:	2b00      	cmp	r3, #0
   10f20:	d1f6      	bne.n	10f10 <SERCOM5_0_Handler+0x44>
}
   10f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int32_t  ret   = I2C_OK;
   10f26:	2100      	movs	r1, #0
	i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
   10f28:	8863      	ldrh	r3, [r4, #2]
   10f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   10f2e:	041b      	lsls	r3, r3, #16
   10f30:	0c1b      	lsrs	r3, r3, #16
   10f32:	8063      	strh	r3, [r4, #2]
	if (i2c_dev->cb.error) {
   10f34:	6963      	ldr	r3, [r4, #20]
   10f36:	2b00      	cmp	r3, #0
   10f38:	d0f3      	beq.n	10f22 <SERCOM5_0_Handler+0x56>
		if (ret != I2C_OK) {
   10f3a:	b121      	cbz	r1, 10f46 <SERCOM5_0_Handler+0x7a>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
   10f3c:	4620      	mov	r0, r4
   10f3e:	4798      	blx	r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = mask;
   10f40:	2380      	movs	r3, #128	; 0x80
   10f42:	7633      	strb	r3, [r6, #24]
}
   10f44:	e7ed      	b.n	10f22 <SERCOM5_0_Handler+0x56>
			i2c_dev->cb.error(i2c_dev, I2C_ERR_BUS);
   10f46:	f06f 0104 	mvn.w	r1, #4
   10f4a:	e7f7      	b.n	10f3c <SERCOM5_0_Handler+0x70>
   10f4c:	20001084 	.word	0x20001084
   10f50:	00016091 	.word	0x00016091
   10f54:	0000d415 	.word	0x0000d415
   10f58:	000106fd 	.word	0x000106fd

00010f5c <SERCOM5_1_Handler>:
   10f5c:	4b00      	ldr	r3, [pc, #0]	; (10f60 <SERCOM5_1_Handler+0x4>)
   10f5e:	4718      	bx	r3
   10f60:	00010ecd 	.word	0x00010ecd

00010f64 <SERCOM5_2_Handler>:
   10f64:	4b00      	ldr	r3, [pc, #0]	; (10f68 <SERCOM5_2_Handler+0x4>)
   10f66:	4718      	bx	r3
   10f68:	00010ecd 	.word	0x00010ecd

00010f6c <SERCOM5_3_Handler>:
   10f6c:	4b00      	ldr	r3, [pc, #0]	; (10f70 <SERCOM5_3_Handler+0x4>)
   10f6e:	4718      	bx	r3
   10f70:	00010ecd 	.word	0x00010ecd

00010f74 <SERCOM6_0_Handler>:
	_sercom_usart_interrupt_handler(_sercom6_dev);
   10f74:	4b01      	ldr	r3, [pc, #4]	; (10f7c <SERCOM6_0_Handler+0x8>)
   10f76:	6958      	ldr	r0, [r3, #20]
   10f78:	4b01      	ldr	r3, [pc, #4]	; (10f80 <SERCOM6_0_Handler+0xc>)
   10f7a:	4718      	bx	r3
   10f7c:	20001084 	.word	0x20001084
   10f80:	000104e9 	.word	0x000104e9

00010f84 <SERCOM6_1_Handler>:
   10f84:	4b00      	ldr	r3, [pc, #0]	; (10f88 <SERCOM6_1_Handler+0x4>)
   10f86:	4718      	bx	r3
   10f88:	00010f75 	.word	0x00010f75

00010f8c <SERCOM6_2_Handler>:
   10f8c:	4b00      	ldr	r3, [pc, #0]	; (10f90 <SERCOM6_2_Handler+0x4>)
   10f8e:	4718      	bx	r3
   10f90:	00010f75 	.word	0x00010f75

00010f94 <SERCOM6_3_Handler>:
   10f94:	4b00      	ldr	r3, [pc, #0]	; (10f98 <SERCOM6_3_Handler+0x4>)
   10f96:	4718      	bx	r3
   10f98:	00010f75 	.word	0x00010f75

00010f9c <_spi_m_sync_init>:
{
   10f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   10fa0:	4b37      	ldr	r3, [pc, #220]	; (11080 <_spi_m_sync_init+0xe4>)
{
   10fa2:	4606      	mov	r6, r0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   10fa4:	4608      	mov	r0, r1
{
   10fa6:	460c      	mov	r4, r1
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   10fa8:	4798      	blx	r3
   10faa:	4605      	mov	r5, r0
	ASSERT(dev && hw);
   10fac:	2e00      	cmp	r6, #0
   10fae:	d05d      	beq.n	1106c <_spi_m_sync_init+0xd0>
   10fb0:	1e20      	subs	r0, r4, #0
   10fb2:	bf18      	it	ne
   10fb4:	2001      	movne	r0, #1
   10fb6:	4f33      	ldr	r7, [pc, #204]	; (11084 <_spi_m_sync_init+0xe8>)
   10fb8:	4933      	ldr	r1, [pc, #204]	; (11088 <_spi_m_sync_init+0xec>)
   10fba:	f640 2278 	movw	r2, #2680	; 0xa78
   10fbe:	47b8      	blx	r7
	if (regs == NULL) {
   10fc0:	46b9      	mov	r9, r7
   10fc2:	2d00      	cmp	r5, #0
   10fc4:	d058      	beq.n	11078 <_spi_m_sync_init+0xdc>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   10fc6:	69e3      	ldr	r3, [r4, #28]
   10fc8:	4f30      	ldr	r7, [pc, #192]	; (1108c <_spi_m_sync_init+0xf0>)
	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   10fca:	f013 0f01 	tst.w	r3, #1
   10fce:	d113      	bne.n	10ff8 <_spi_m_sync_init+0x5c>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10fd0:	2103      	movs	r1, #3
   10fd2:	4620      	mov	r0, r4
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   10fd4:	f8d5 8000 	ldr.w	r8, [r5]
   10fd8:	47b8      	blx	r7
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
   10fda:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   10fdc:	079b      	lsls	r3, r3, #30
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   10fde:	f008 081c 	and.w	r8, r8, #28
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   10fe2:	d503      	bpl.n	10fec <_spi_m_sync_init+0x50>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
   10fe4:	4b2a      	ldr	r3, [pc, #168]	; (11090 <_spi_m_sync_init+0xf4>)
   10fe6:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
   10fe8:	2102      	movs	r1, #2
   10fea:	47b8      	blx	r7
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
   10fec:	f048 0301 	orr.w	r3, r8, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   10ff0:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   10ff2:	2103      	movs	r1, #3
   10ff4:	4620      	mov	r0, r4
   10ff6:	47b8      	blx	r7
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
   10ff8:	2101      	movs	r1, #1
   10ffa:	4620      	mov	r0, r4
   10ffc:	47b8      	blx	r7
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
   10ffe:	682b      	ldr	r3, [r5, #0]
	dev->prvt = hw;
   11000:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
   11002:	f003 031c 	and.w	r3, r3, #28
   11006:	2b08      	cmp	r3, #8
   11008:	d132      	bne.n	11070 <_spi_m_sync_init+0xd4>
	ASSERT(hw && regs);
   1100a:	f640 128e 	movw	r2, #2446	; 0x98e
   1100e:	491e      	ldr	r1, [pc, #120]	; (11088 <_spi_m_sync_init+0xec>)
   11010:	2001      	movs	r0, #1
   11012:	47c8      	blx	r9
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
   11014:	682b      	ldr	r3, [r5, #0]
	hri_sercomspi_write_CTRLA_reg(
   11016:	f423 7381 	bic.w	r3, r3, #258	; 0x102
   1101a:	f023 0301 	bic.w	r3, r3, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   1101e:	6023      	str	r3, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   11020:	2103      	movs	r1, #3
   11022:	4620      	mov	r0, r4
   11024:	47b8      	blx	r7
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
   11026:	686b      	ldr	r3, [r5, #4]
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
   11028:	f423 3308 	bic.w	r3, r3, #139264	; 0x22000
   1102c:	f423 7310 	bic.w	r3, r3, #576	; 0x240
	hri_sercomspi_write_CTRLB_reg(hw,
   11030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   11034:	f443 7310 	orr.w	r3, r3, #576	; 0x240
	((Sercom *)hw)->SPI.CTRLB.reg = data;
   11038:	6063      	str	r3, [r4, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   1103a:	2117      	movs	r1, #23
   1103c:	47b8      	blx	r7
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
   1103e:	68ab      	ldr	r3, [r5, #8]
	((Sercom *)hw)->SPI.ADDR.reg = data;
   11040:	6263      	str	r3, [r4, #36]	; 0x24
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
   11042:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
   11044:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   11048:	69e3      	ldr	r3, [r4, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
   1104a:	2b00      	cmp	r3, #0
   1104c:	d1fc      	bne.n	11048 <_spi_m_sync_init+0xac>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
   1104e:	686b      	ldr	r3, [r5, #4]
   11050:	f013 0f07 	tst.w	r3, #7
   11054:	bf0c      	ite	eq
   11056:	2301      	moveq	r3, #1
   11058:	2302      	movne	r3, #2
   1105a:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
   1105c:	7bab      	ldrb	r3, [r5, #14]
   1105e:	7bea      	ldrb	r2, [r5, #15]
   11060:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   11064:	80f3      	strh	r3, [r6, #6]
	return ERR_NONE;
   11066:	2000      	movs	r0, #0
}
   11068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(dev && hw);
   1106c:	4630      	mov	r0, r6
   1106e:	e7a2      	b.n	10fb6 <_spi_m_sync_init+0x1a>
		_spi_load_regs_master(hw, regs);
   11070:	4b08      	ldr	r3, [pc, #32]	; (11094 <_spi_m_sync_init+0xf8>)
   11072:	4629      	mov	r1, r5
   11074:	4798      	blx	r3
   11076:	e7ea      	b.n	1104e <_spi_m_sync_init+0xb2>
		return ERR_INVALID_ARG;
   11078:	f06f 000c 	mvn.w	r0, #12
   1107c:	e7f4      	b.n	11068 <_spi_m_sync_init+0xcc>
   1107e:	bf00      	nop
   11080:	000105f5 	.word	0x000105f5
   11084:	0000d415 	.word	0x0000d415
   11088:	00016091 	.word	0x00016091
   1108c:	00010439 	.word	0x00010439
   11090:	0001045d 	.word	0x0001045d
   11094:	00010911 	.word	0x00010911

00011098 <_spi_m_async_init>:
{
   11098:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
   1109a:	4b10      	ldr	r3, [pc, #64]	; (110dc <_spi_m_async_init+0x44>)
{
   1109c:	4605      	mov	r5, r0
   1109e:	460e      	mov	r6, r1
	int32_t rc = _spi_m_sync_init((struct _spi_m_sync_dev *)dev, hw);
   110a0:	4798      	blx	r3
	if (rc < 0) {
   110a2:	2800      	cmp	r0, #0
   110a4:	db17      	blt.n	110d6 <_spi_m_async_init+0x3e>
	_sercom_init_irq_param(hw, (void *)dev);
   110a6:	4629      	mov	r1, r5
	spid->callbacks.complete = NULL;
   110a8:	2400      	movs	r4, #0
	_sercom_init_irq_param(hw, (void *)dev);
   110aa:	4630      	mov	r0, r6
   110ac:	4b0c      	ldr	r3, [pc, #48]	; (110e0 <_spi_m_async_init+0x48>)
		NVIC_DisableIRQ((IRQn_Type)irq);
   110ae:	4e0d      	ldr	r6, [pc, #52]	; (110e4 <_spi_m_async_init+0x4c>)
	_sercom_init_irq_param(hw, (void *)dev);
   110b0:	4798      	blx	r3
	spid->callbacks.rx       = NULL;
   110b2:	e9c5 4403 	strd	r4, r4, [r5, #12]
	spid->callbacks.tx       = NULL;
   110b6:	60ac      	str	r4, [r5, #8]
	uint8_t irq              = _sercom_get_irq_num(hw);
   110b8:	4b0b      	ldr	r3, [pc, #44]	; (110e8 <_spi_m_async_init+0x50>)
   110ba:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
   110bc:	4621      	mov	r1, r4
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   110be:	4c0b      	ldr	r4, [pc, #44]	; (110ec <_spi_m_async_init+0x54>)
	uint8_t irq              = _sercom_get_irq_num(hw);
   110c0:	4605      	mov	r5, r0
		NVIC_DisableIRQ((IRQn_Type)irq);
   110c2:	186b      	adds	r3, r5, r1
   110c4:	b2d8      	uxtb	r0, r3
   110c6:	9001      	str	r0, [sp, #4]
   110c8:	47b0      	blx	r6
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
   110ca:	9801      	ldr	r0, [sp, #4]
   110cc:	47a0      	blx	r4
	for (uint32_t i = 0; i < 4; i++) {
   110ce:	3101      	adds	r1, #1
   110d0:	2904      	cmp	r1, #4
   110d2:	d1f6      	bne.n	110c2 <_spi_m_async_init+0x2a>
   110d4:	2000      	movs	r0, #0
}
   110d6:	b002      	add	sp, #8
   110d8:	bd70      	pop	{r4, r5, r6, pc}
   110da:	bf00      	nop
   110dc:	00010f9d 	.word	0x00010f9d
   110e0:	00010559 	.word	0x00010559
   110e4:	0001067d 	.word	0x0001067d
   110e8:	000105b9 	.word	0x000105b9
   110ec:	000106a1 	.word	0x000106a1

000110f0 <_spi_m_async_enable>:
{
   110f0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   110f2:	4604      	mov	r4, r0
   110f4:	b118      	cbz	r0, 110fe <_spi_m_async_enable+0xe>
   110f6:	6800      	ldr	r0, [r0, #0]
   110f8:	3800      	subs	r0, #0
   110fa:	bf18      	it	ne
   110fc:	2001      	movne	r0, #1
   110fe:	4b05      	ldr	r3, [pc, #20]	; (11114 <_spi_m_async_enable+0x24>)
   11100:	4905      	ldr	r1, [pc, #20]	; (11118 <_spi_m_async_enable+0x28>)
   11102:	f640 22e5 	movw	r2, #2789	; 0xae5
   11106:	4798      	blx	r3
	return _spi_async_enable(dev->prvt);
   11108:	6820      	ldr	r0, [r4, #0]
   1110a:	4b04      	ldr	r3, [pc, #16]	; (1111c <_spi_m_async_enable+0x2c>)
}
   1110c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _spi_async_enable(dev->prvt);
   11110:	4718      	bx	r3
   11112:	bf00      	nop
   11114:	0000d415 	.word	0x0000d415
   11118:	00016091 	.word	0x00016091
   1111c:	0001064d 	.word	0x0001064d

00011120 <_spi_m_async_set_mode>:
{
   11120:	b570      	push	{r4, r5, r6, lr}
   11122:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   11124:	4604      	mov	r4, r0
   11126:	b118      	cbz	r0, 11130 <_spi_m_async_set_mode+0x10>
   11128:	6800      	ldr	r0, [r0, #0]
   1112a:	3800      	subs	r0, #0
   1112c:	bf18      	it	ne
   1112e:	2001      	movne	r0, #1
   11130:	4905      	ldr	r1, [pc, #20]	; (11148 <_spi_m_async_set_mode+0x28>)
   11132:	4b06      	ldr	r3, [pc, #24]	; (1114c <_spi_m_async_set_mode+0x2c>)
   11134:	f640 3216 	movw	r2, #2838	; 0xb16
   11138:	4798      	blx	r3
	return _spi_set_mode(dev->prvt, mode);
   1113a:	6820      	ldr	r0, [r4, #0]
   1113c:	4b04      	ldr	r3, [pc, #16]	; (11150 <_spi_m_async_set_mode+0x30>)
   1113e:	4629      	mov	r1, r5
}
   11140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _spi_set_mode(dev->prvt, mode);
   11144:	4718      	bx	r3
   11146:	bf00      	nop
   11148:	00016091 	.word	0x00016091
   1114c:	0000d415 	.word	0x0000d415
   11150:	000108dd 	.word	0x000108dd

00011154 <_spi_m_async_set_baudrate>:
{
   11154:	b538      	push	{r3, r4, r5, lr}
   11156:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   11158:	4604      	mov	r4, r0
   1115a:	b118      	cbz	r0, 11164 <_spi_m_async_set_baudrate+0x10>
   1115c:	6800      	ldr	r0, [r0, #0]
   1115e:	3800      	subs	r0, #0
   11160:	bf18      	it	ne
   11162:	2001      	movne	r0, #1
   11164:	4907      	ldr	r1, [pc, #28]	; (11184 <_spi_m_async_set_baudrate+0x30>)
   11166:	4b08      	ldr	r3, [pc, #32]	; (11188 <_spi_m_async_set_baudrate+0x34>)
   11168:	f640 3245 	movw	r2, #2885	; 0xb45
   1116c:	4798      	blx	r3
	return _spi_set_baudrate(dev->prvt, baud_val);
   1116e:	6823      	ldr	r3, [r4, #0]
   11170:	69d8      	ldr	r0, [r3, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   11172:	f010 0001 	ands.w	r0, r0, #1
	hri_sercomspi_write_BAUD_reg(hw, baud_val);
   11176:	bf06      	itte	eq
   11178:	b2ed      	uxtbeq	r5, r5
	((Sercom *)hw)->SPI.BAUD.reg = data;
   1117a:	731d      	strbeq	r5, [r3, #12]
		return ERR_BUSY;
   1117c:	f06f 0003 	mvnne.w	r0, #3
}
   11180:	bd38      	pop	{r3, r4, r5, pc}
   11182:	bf00      	nop
   11184:	00016091 	.word	0x00016091
   11188:	0000d415 	.word	0x0000d415

0001118c <_spi_m_async_enable_tx>:
{
   1118c:	b538      	push	{r3, r4, r5, lr}
	void *hw = dev->prvt;
   1118e:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev && hw);
   11190:	4b07      	ldr	r3, [pc, #28]	; (111b0 <_spi_m_async_enable_tx+0x24>)
   11192:	1e20      	subs	r0, r4, #0
{
   11194:	460d      	mov	r5, r1
	ASSERT(dev && hw);
   11196:	f640 4208 	movw	r2, #3080	; 0xc08
   1119a:	4906      	ldr	r1, [pc, #24]	; (111b4 <_spi_m_async_enable_tx+0x28>)
   1119c:	bf18      	it	ne
   1119e:	2001      	movne	r0, #1
   111a0:	4798      	blx	r3
	if (state) {
   111a2:	2301      	movs	r3, #1
   111a4:	b115      	cbz	r5, 111ac <_spi_m_async_enable_tx+0x20>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_DRE;
   111a6:	75a3      	strb	r3, [r4, #22]
}
   111a8:	2000      	movs	r0, #0
   111aa:	bd38      	pop	{r3, r4, r5, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_DRE;
   111ac:	7523      	strb	r3, [r4, #20]
}
   111ae:	e7fb      	b.n	111a8 <_spi_m_async_enable_tx+0x1c>
   111b0:	0000d415 	.word	0x0000d415
   111b4:	00016091 	.word	0x00016091

000111b8 <_spi_m_async_enable_rx>:
{
   111b8:	b570      	push	{r4, r5, r6, lr}
	void *hw = dev->prvt;
   111ba:	6804      	ldr	r4, [r0, #0]
	ASSERT(dev);
   111bc:	4e0a      	ldr	r6, [pc, #40]	; (111e8 <_spi_m_async_enable_rx+0x30>)
   111be:	f640 421c 	movw	r2, #3100	; 0xc1c
   111c2:	2001      	movs	r0, #1
{
   111c4:	460d      	mov	r5, r1
	ASSERT(dev);
   111c6:	4909      	ldr	r1, [pc, #36]	; (111ec <_spi_m_async_enable_rx+0x34>)
   111c8:	47b0      	blx	r6
	ASSERT(hw);
   111ca:	1e20      	subs	r0, r4, #0
   111cc:	4907      	ldr	r1, [pc, #28]	; (111ec <_spi_m_async_enable_rx+0x34>)
   111ce:	f640 421d 	movw	r2, #3101	; 0xc1d
   111d2:	bf18      	it	ne
   111d4:	2001      	movne	r0, #1
   111d6:	47b0      	blx	r6
	if (state) {
   111d8:	2304      	movs	r3, #4
   111da:	b115      	cbz	r5, 111e2 <_spi_m_async_enable_rx+0x2a>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_RXC;
   111dc:	75a3      	strb	r3, [r4, #22]
}
   111de:	2000      	movs	r0, #0
   111e0:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_RXC;
   111e2:	7523      	strb	r3, [r4, #20]
}
   111e4:	e7fb      	b.n	111de <_spi_m_async_enable_rx+0x26>
   111e6:	bf00      	nop
   111e8:	0000d415 	.word	0x0000d415
   111ec:	00016091 	.word	0x00016091

000111f0 <_spi_m_async_enable_tx_complete>:
{
   111f0:	b538      	push	{r3, r4, r5, lr}
   111f2:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   111f4:	4604      	mov	r4, r0
   111f6:	b118      	cbz	r0, 11200 <_spi_m_async_enable_tx_complete+0x10>
   111f8:	6800      	ldr	r0, [r0, #0]
   111fa:	3800      	subs	r0, #0
   111fc:	bf18      	it	ne
   111fe:	2001      	movne	r0, #1
   11200:	4b06      	ldr	r3, [pc, #24]	; (1121c <_spi_m_async_enable_tx_complete+0x2c>)
   11202:	4907      	ldr	r1, [pc, #28]	; (11220 <_spi_m_async_enable_tx_complete+0x30>)
   11204:	f640 422f 	movw	r2, #3119	; 0xc2f
   11208:	4798      	blx	r3
	if (state) {
   1120a:	6823      	ldr	r3, [r4, #0]
   1120c:	2202      	movs	r2, #2
   1120e:	b115      	cbz	r5, 11216 <_spi_m_async_enable_tx_complete+0x26>
	((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
   11210:	759a      	strb	r2, [r3, #22]
}
   11212:	2000      	movs	r0, #0
   11214:	bd38      	pop	{r3, r4, r5, pc}
	((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_TXC;
   11216:	751a      	strb	r2, [r3, #20]
}
   11218:	e7fb      	b.n	11212 <_spi_m_async_enable_tx_complete+0x22>
   1121a:	bf00      	nop
   1121c:	0000d415 	.word	0x0000d415
   11220:	00016091 	.word	0x00016091

00011224 <_spi_m_async_write_one>:
{
   11224:	b538      	push	{r3, r4, r5, lr}
   11226:	460d      	mov	r5, r1
	ASSERT(dev && dev->prvt);
   11228:	4604      	mov	r4, r0
   1122a:	b118      	cbz	r0, 11234 <_spi_m_async_write_one+0x10>
   1122c:	6800      	ldr	r0, [r0, #0]
   1122e:	3800      	subs	r0, #0
   11230:	bf18      	it	ne
   11232:	2001      	movne	r0, #1
   11234:	4904      	ldr	r1, [pc, #16]	; (11248 <_spi_m_async_write_one+0x24>)
   11236:	4b05      	ldr	r3, [pc, #20]	; (1124c <_spi_m_async_write_one+0x28>)
   11238:	f640 4241 	movw	r2, #3137	; 0xc41
   1123c:	4798      	blx	r3
	hri_sercomspi_write_DATA_reg(dev->prvt, data);
   1123e:	6823      	ldr	r3, [r4, #0]
}
   11240:	2000      	movs	r0, #0
	((Sercom *)hw)->SPI.DATA.reg = data;
   11242:	629d      	str	r5, [r3, #40]	; 0x28
   11244:	bd38      	pop	{r3, r4, r5, pc}
   11246:	bf00      	nop
   11248:	00016091 	.word	0x00016091
   1124c:	0000d415 	.word	0x0000d415

00011250 <_spi_m_async_read_one>:
{
   11250:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   11252:	4604      	mov	r4, r0
   11254:	b118      	cbz	r0, 1125e <_spi_m_async_read_one+0xe>
   11256:	6800      	ldr	r0, [r0, #0]
   11258:	3800      	subs	r0, #0
   1125a:	bf18      	it	ne
   1125c:	2001      	movne	r0, #1
   1125e:	4904      	ldr	r1, [pc, #16]	; (11270 <_spi_m_async_read_one+0x20>)
   11260:	4b04      	ldr	r3, [pc, #16]	; (11274 <_spi_m_async_read_one+0x24>)
   11262:	f640 425c 	movw	r2, #3164	; 0xc5c
   11266:	4798      	blx	r3
	return hri_sercomspi_read_DATA_reg(dev->prvt);
   11268:	6823      	ldr	r3, [r4, #0]
	return ((Sercom *)hw)->SPI.DATA.reg;
   1126a:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
   1126c:	b280      	uxth	r0, r0
   1126e:	bd10      	pop	{r4, pc}
   11270:	00016091 	.word	0x00016091
   11274:	0000d415 	.word	0x0000d415

00011278 <_spi_m_async_register_callback>:
{
   11278:	b570      	push	{r4, r5, r6, lr}
   1127a:	460d      	mov	r5, r1
   1127c:	4616      	mov	r6, r2
	ASSERT(dev && (cb_type < SPI_DEV_CB_N));
   1127e:	4604      	mov	r4, r0
   11280:	b118      	cbz	r0, 1128a <_spi_m_async_register_callback+0x12>
   11282:	2903      	cmp	r1, #3
   11284:	bf8c      	ite	hi
   11286:	2000      	movhi	r0, #0
   11288:	2001      	movls	r0, #1
   1128a:	4905      	ldr	r1, [pc, #20]	; (112a0 <_spi_m_async_register_callback+0x28>)
   1128c:	4b05      	ldr	r3, [pc, #20]	; (112a4 <_spi_m_async_register_callback+0x2c>)
   1128e:	f640 4275 	movw	r2, #3189	; 0xc75
   11292:	4798      	blx	r3
	p_ls[cb_type] = (func_t)func;
   11294:	eb04 0185 	add.w	r1, r4, r5, lsl #2
}
   11298:	2000      	movs	r0, #0
	p_ls[cb_type] = (func_t)func;
   1129a:	608e      	str	r6, [r1, #8]
}
   1129c:	bd70      	pop	{r4, r5, r6, pc}
   1129e:	bf00      	nop
   112a0:	00016091 	.word	0x00016091
   112a4:	0000d415 	.word	0x0000d415

000112a8 <_spi_m_async_set_irq_state>:
{
   112a8:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
   112aa:	4604      	mov	r4, r0
   112ac:	3800      	subs	r0, #0
{
   112ae:	460e      	mov	r6, r1
	ASSERT(device);
   112b0:	bf18      	it	ne
   112b2:	2001      	movne	r0, #1
   112b4:	4907      	ldr	r1, [pc, #28]	; (112d4 <_spi_m_async_set_irq_state+0x2c>)
   112b6:	4b08      	ldr	r3, [pc, #32]	; (112d8 <_spi_m_async_set_irq_state+0x30>)
{
   112b8:	4615      	mov	r5, r2
	ASSERT(device);
   112ba:	f640 42b6 	movw	r2, #3254	; 0xcb6
   112be:	4798      	blx	r3
	if (SPI_DEV_CB_ERROR == type) {
   112c0:	2e03      	cmp	r6, #3
   112c2:	d103      	bne.n	112cc <_spi_m_async_set_irq_state+0x24>
		hri_sercomspi_write_INTEN_ERROR_bit(device->prvt, state);
   112c4:	6823      	ldr	r3, [r4, #0]
	if (value == 0x0) {
   112c6:	2280      	movs	r2, #128	; 0x80
   112c8:	b90d      	cbnz	r5, 112ce <_spi_m_async_set_irq_state+0x26>
		((Sercom *)hw)->SPI.INTENCLR.reg = SERCOM_SPI_INTENSET_ERROR;
   112ca:	751a      	strb	r2, [r3, #20]
}
   112cc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_ERROR;
   112ce:	759a      	strb	r2, [r3, #22]
   112d0:	e7fc      	b.n	112cc <_spi_m_async_set_irq_state+0x24>
   112d2:	bf00      	nop
   112d4:	00016091 	.word	0x00016091
   112d8:	0000d415 	.word	0x0000d415

000112dc <_spi_m_dma_init>:

int32_t _spi_m_dma_init(struct _spi_m_dma_dev *dev, void *const hw)
{
   112dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   112e0:	4b25      	ldr	r3, [pc, #148]	; (11378 <_spi_m_dma_init+0x9c>)
{
   112e2:	4605      	mov	r5, r0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   112e4:	4608      	mov	r0, r1
{
   112e6:	460c      	mov	r4, r1
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
   112e8:	4798      	blx	r3
   112ea:	4606      	mov	r6, r0

	ASSERT(dev && hw);
   112ec:	2d00      	cmp	r5, #0
   112ee:	d03e      	beq.n	1136e <_spi_m_dma_init+0x92>
   112f0:	1e20      	subs	r0, r4, #0
   112f2:	bf18      	it	ne
   112f4:	2001      	movne	r0, #1
   112f6:	4921      	ldr	r1, [pc, #132]	; (1137c <_spi_m_dma_init+0xa0>)
   112f8:	4b21      	ldr	r3, [pc, #132]	; (11380 <_spi_m_dma_init+0xa4>)
   112fa:	f640 52e3 	movw	r2, #3555	; 0xde3
   112fe:	4798      	blx	r3

	if (regs == NULL) {
   11300:	2e00      	cmp	r6, #0
   11302:	d036      	beq.n	11372 <_spi_m_dma_init+0x96>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   11304:	69e3      	ldr	r3, [r4, #28]
   11306:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1139c <_spi_m_dma_init+0xc0>
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
   1130a:	f013 0f01 	tst.w	r3, #1
   1130e:	d112      	bne.n	11336 <_spi_m_dma_init+0x5a>
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   11310:	2103      	movs	r1, #3
   11312:	4620      	mov	r0, r4
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   11314:	6837      	ldr	r7, [r6, #0]
   11316:	47c0      	blx	r8
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
   11318:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   1131a:	079b      	lsls	r3, r3, #30
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
   1131c:	f007 071c 	and.w	r7, r7, #28
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
   11320:	d503      	bpl.n	1132a <_spi_m_dma_init+0x4e>
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
   11322:	4b18      	ldr	r3, [pc, #96]	; (11384 <_spi_m_dma_init+0xa8>)
   11324:	4798      	blx	r3
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
   11326:	2102      	movs	r1, #2
   11328:	47c0      	blx	r8
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
   1132a:	f047 0701 	orr.w	r7, r7, #1
	((Sercom *)hw)->SPI.CTRLA.reg = data;
   1132e:	6027      	str	r7, [r4, #0]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
   11330:	2103      	movs	r1, #3
   11332:	4620      	mov	r0, r4
   11334:	47c0      	blx	r8
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
   11336:	462f      	mov	r7, r5
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);
   11338:	4620      	mov	r0, r4
   1133a:	2101      	movs	r1, #1
   1133c:	47c0      	blx	r8

	_spi_load_regs_master(hw, regs);
   1133e:	4631      	mov	r1, r6
	dev->prvt = hw;
   11340:	f847 4b18 	str.w	r4, [r7], #24
	_spi_load_regs_master(hw, regs);
   11344:	4b10      	ldr	r3, [pc, #64]	; (11388 <_spi_m_dma_init+0xac>)
   11346:	4798      	blx	r3
	uint8_t index = _sercom_get_hardware_index(hw);
   11348:	4b10      	ldr	r3, [pc, #64]	; (1138c <_spi_m_dma_init+0xb0>)
   1134a:	4620      	mov	r0, r4
   1134c:	4798      	blx	r3
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   1134e:	2807      	cmp	r0, #7
		dev->resource->back                 = dev;
		dev->resource->dma_cb.transfer_done = _spi_dma_rx_complete;
		dev->resource->dma_cb.error         = _spi_dma_error_occured;
	}
	/* Initialize DMA tx channel */
	_dma_get_channel_resource(&dev->resource, _spi_get_tx_dma_channel(hw));
   11350:	4b0f      	ldr	r3, [pc, #60]	; (11390 <_spi_m_dma_init+0xb4>)
   11352:	bf0c      	ite	eq
   11354:	2108      	moveq	r1, #8
   11356:	2100      	movne	r1, #0
   11358:	4638      	mov	r0, r7
   1135a:	4798      	blx	r3
	dev->resource->back                 = dev;
   1135c:	69ab      	ldr	r3, [r5, #24]
	dev->resource->dma_cb.transfer_done = _spi_dma_tx_complete;
   1135e:	4a0d      	ldr	r2, [pc, #52]	; (11394 <_spi_m_dma_init+0xb8>)
   11360:	601a      	str	r2, [r3, #0]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
   11362:	4a0d      	ldr	r2, [pc, #52]	; (11398 <_spi_m_dma_init+0xbc>)
	dev->resource->back                 = dev;
   11364:	609d      	str	r5, [r3, #8]
	dev->resource->dma_cb.error         = _spi_dma_error_occured;
   11366:	605a      	str	r2, [r3, #4]

	return ERR_NONE;
   11368:	2000      	movs	r0, #0
}
   1136a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(dev && hw);
   1136e:	4628      	mov	r0, r5
   11370:	e7c1      	b.n	112f6 <_spi_m_dma_init+0x1a>
		return ERR_INVALID_ARG;
   11372:	f06f 000c 	mvn.w	r0, #12
   11376:	e7f8      	b.n	1136a <_spi_m_dma_init+0x8e>
   11378:	000105f5 	.word	0x000105f5
   1137c:	00016091 	.word	0x00016091
   11380:	0000d415 	.word	0x0000d415
   11384:	0001045d 	.word	0x0001045d
   11388:	00010911 	.word	0x00010911
   1138c:	000104b1 	.word	0x000104b1
   11390:	0000d659 	.word	0x0000d659
   11394:	00010621 	.word	0x00010621
   11398:	0001062b 	.word	0x0001062b
   1139c:	00010439 	.word	0x00010439

000113a0 <_spi_m_dma_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_dma_enable(struct _spi_m_dma_dev *dev)
{
   113a0:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
   113a2:	4604      	mov	r4, r0
   113a4:	b118      	cbz	r0, 113ae <_spi_m_dma_enable+0xe>
   113a6:	6800      	ldr	r0, [r0, #0]
   113a8:	3800      	subs	r0, #0
   113aa:	bf18      	it	ne
   113ac:	2001      	movne	r0, #1
   113ae:	4b05      	ldr	r3, [pc, #20]	; (113c4 <_spi_m_dma_enable+0x24>)
   113b0:	4905      	ldr	r1, [pc, #20]	; (113c8 <_spi_m_dma_enable+0x28>)
   113b2:	f640 620e 	movw	r2, #3598	; 0xe0e
   113b6:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
   113b8:	6820      	ldr	r0, [r4, #0]
   113ba:	4b04      	ldr	r3, [pc, #16]	; (113cc <_spi_m_dma_enable+0x2c>)
}
   113bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return _spi_sync_enable(dev->prvt);
   113c0:	4718      	bx	r3
   113c2:	bf00      	nop
   113c4:	0000d415 	.word	0x0000d415
   113c8:	00016091 	.word	0x00016091
   113cc:	000105cd 	.word	0x000105cd

000113d0 <_spi_m_dma_register_callback>:
	return size;
}

void _spi_m_dma_register_callback(struct _spi_m_dma_dev *dev, enum _spi_dma_dev_cb_type type, _spi_dma_cb_t func)
{
	switch (type) {
   113d0:	2901      	cmp	r1, #1
{
   113d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   113d4:	4605      	mov	r5, r0
   113d6:	460e      	mov	r6, r1
   113d8:	4614      	mov	r4, r2
	switch (type) {
   113da:	d014      	beq.n	11406 <_spi_m_dma_register_callback+0x36>
   113dc:	2902      	cmp	r1, #2
   113de:	d020      	beq.n	11422 <_spi_m_dma_register_callback+0x52>
   113e0:	2900      	cmp	r1, #0
   113e2:	d138      	bne.n	11456 <_spi_m_dma_register_callback+0x86>
	case SPI_DEV_CB_DMA_TX:
		dev->callbacks.tx = func;
   113e4:	6042      	str	r2, [r0, #4]
	uint8_t index = _sercom_get_hardware_index(hw);
   113e6:	4b1d      	ldr	r3, [pc, #116]	; (1145c <_spi_m_dma_register_callback+0x8c>)
   113e8:	6800      	ldr	r0, [r0, #0]
   113ea:	4798      	blx	r3
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   113ec:	2807      	cmp	r0, #7
   113ee:	bf08      	it	eq
   113f0:	2608      	moveq	r6, #8
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   113f2:	1e22      	subs	r2, r4, #0
   113f4:	bf18      	it	ne
   113f6:	2201      	movne	r2, #1
   113f8:	2100      	movs	r1, #0
   113fa:	4630      	mov	r0, r6
		break;
	case SPI_DEV_CB_DMA_RX:
		dev->callbacks.rx = func;
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   113fc:	4b18      	ldr	r3, [pc, #96]	; (11460 <_spi_m_dma_register_callback+0x90>)
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
		break;
	case SPI_DEV_CB_DMA_N:
		break;
	}
}
   113fe:	b002      	add	sp, #8
   11400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   11404:	4718      	bx	r3
		dev->callbacks.rx = func;
   11406:	6082      	str	r2, [r0, #8]
	uint8_t index = _sercom_get_hardware_index(hw);
   11408:	4b14      	ldr	r3, [pc, #80]	; (1145c <_spi_m_dma_register_callback+0x8c>)
   1140a:	6800      	ldr	r0, [r0, #0]
   1140c:	4798      	blx	r3
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_COMPLETE_CB, func != NULL);
   1140e:	1e22      	subs	r2, r4, #0
   11410:	bf18      	it	ne
   11412:	2201      	movne	r2, #1
   11414:	2807      	cmp	r0, #7
   11416:	f04f 0100 	mov.w	r1, #0
   1141a:	bf8c      	ite	hi
   1141c:	2000      	movhi	r0, #0
   1141e:	2001      	movls	r0, #1
   11420:	e7ec      	b.n	113fc <_spi_m_dma_register_callback+0x2c>
		dev->callbacks.error = func;
   11422:	60c2      	str	r2, [r0, #12]
	uint8_t index = _sercom_get_hardware_index(hw);
   11424:	4e0d      	ldr	r6, [pc, #52]	; (1145c <_spi_m_dma_register_callback+0x8c>)
   11426:	6800      	ldr	r0, [r0, #0]
   11428:	47b0      	blx	r6
		_dma_set_irq_state(_spi_get_rx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   1142a:	1e22      	subs	r2, r4, #0
   1142c:	bf18      	it	ne
   1142e:	2201      	movne	r2, #1
   11430:	2807      	cmp	r0, #7
   11432:	bf8c      	ite	hi
   11434:	2000      	movhi	r0, #0
   11436:	2001      	movls	r0, #1
   11438:	2101      	movs	r1, #1
   1143a:	4c09      	ldr	r4, [pc, #36]	; (11460 <_spi_m_dma_register_callback+0x90>)
   1143c:	9201      	str	r2, [sp, #4]
   1143e:	47a0      	blx	r4
	uint8_t index = _sercom_get_hardware_index(hw);
   11440:	6828      	ldr	r0, [r5, #0]
   11442:	47b0      	blx	r6
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   11444:	2807      	cmp	r0, #7
		_dma_set_irq_state(_spi_get_tx_dma_channel(dev->prvt), DMA_TRANSFER_ERROR_CB, func != NULL);
   11446:	9a01      	ldr	r2, [sp, #4]
   11448:	f04f 0101 	mov.w	r1, #1
   1144c:	bf0c      	ite	eq
   1144e:	2008      	moveq	r0, #8
   11450:	2000      	movne	r0, #0
   11452:	4623      	mov	r3, r4
   11454:	e7d3      	b.n	113fe <_spi_m_dma_register_callback+0x2e>
}
   11456:	b002      	add	sp, #8
   11458:	bd70      	pop	{r4, r5, r6, pc}
   1145a:	bf00      	nop
   1145c:	000104b1 	.word	0x000104b1
   11460:	0000d575 	.word	0x0000d575

00011464 <_spi_m_dma_transfer>:

int32_t _spi_m_dma_transfer(struct _spi_m_dma_dev *dev, uint8_t const *txbuf, uint8_t *const rxbuf,
                            const uint16_t length)
{
   11464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
   11468:	f8d0 8000 	ldr.w	r8, [r0]
	uint8_t index = _sercom_get_hardware_index(hw);
   1146c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 1158c <_spi_m_dma_transfer+0x128>
{
   11470:	4605      	mov	r5, r0
   11472:	461f      	mov	r7, r3
	uint8_t index = _sercom_get_hardware_index(hw);
   11474:	4640      	mov	r0, r8
   11476:	4b3d      	ldr	r3, [pc, #244]	; (1156c <_spi_m_dma_transfer+0x108>)
{
   11478:	460e      	mov	r6, r1
   1147a:	4692      	mov	sl, r2
	uint8_t index = _sercom_get_hardware_index(hw);
   1147c:	4798      	blx	r3
	switch (index) {
   1147e:	2807      	cmp	r0, #7
   11480:	4b3b      	ldr	r3, [pc, #236]	; (11570 <_spi_m_dma_transfer+0x10c>)
   11482:	d86a      	bhi.n	1155a <_spi_m_dma_transfer+0xf6>
	switch (index) {
   11484:	d06c      	beq.n	11560 <_spi_m_dma_transfer+0xfc>
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
   11486:	f04f 0b01 	mov.w	fp, #1
	uint8_t                          rx_ch = _spi_get_rx_dma_channel(dev->prvt);
	uint8_t                          tx_ch = _spi_get_tx_dma_channel(dev->prvt);

	if (rxbuf) {
   1148a:	f1ba 0f00 	cmp.w	sl, #0
   1148e:	d114      	bne.n	114ba <_spi_m_dma_transfer+0x56>
   11490:	4654      	mov	r4, sl
	ASSERT(dev && dev->prvt);
   11492:	f1b8 0000 	subs.w	r0, r8, #0
   11496:	bf18      	it	ne
   11498:	2001      	movne	r0, #1
   1149a:	4936      	ldr	r1, [pc, #216]	; (11574 <_spi_m_dma_transfer+0x110>)
   1149c:	f640 523d 	movw	r2, #3389	; 0xd3d
   114a0:	4798      	blx	r3
	return _spi_sync_rx_disable(dev->prvt);
   114a2:	6828      	ldr	r0, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   114a4:	69c3      	ldr	r3, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
   114a6:	075b      	lsls	r3, r3, #29
   114a8:	d42b      	bmi.n	11502 <_spi_m_dma_transfer+0x9e>
	((Sercom *)hw)->SPI.CTRLB.reg &= ~SERCOM_SPI_CTRLB_RXEN;
   114aa:	6843      	ldr	r3, [r0, #4]
   114ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   114b0:	6043      	str	r3, [r0, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   114b2:	2117      	movs	r1, #23
   114b4:	4b30      	ldr	r3, [pc, #192]	; (11578 <_spi_m_dma_transfer+0x114>)
   114b6:	4798      	blx	r3
}
   114b8:	e023      	b.n	11502 <_spi_m_dma_transfer+0x9e>
	if (rxbuf) {
   114ba:	2400      	movs	r4, #0
	ASSERT(dev && dev->prvt);
   114bc:	f1b8 0000 	subs.w	r0, r8, #0
   114c0:	bf18      	it	ne
   114c2:	2001      	movne	r0, #1
   114c4:	f640 5236 	movw	r2, #3382	; 0xd36
   114c8:	492a      	ldr	r1, [pc, #168]	; (11574 <_spi_m_dma_transfer+0x110>)
   114ca:	4798      	blx	r3
	return _spi_sync_rx_enable(dev->prvt);
   114cc:	6828      	ldr	r0, [r5, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
   114ce:	69c3      	ldr	r3, [r0, #28]
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_CTRLB)) {
   114d0:	075a      	lsls	r2, r3, #29
   114d2:	d406      	bmi.n	114e2 <_spi_m_dma_transfer+0x7e>
	((Sercom *)hw)->SPI.CTRLB.reg |= SERCOM_SPI_CTRLB_RXEN;
   114d4:	6843      	ldr	r3, [r0, #4]
   114d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   114da:	6043      	str	r3, [r0, #4]
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_MASK);
   114dc:	2117      	movs	r1, #23
   114de:	4b26      	ldr	r3, [pc, #152]	; (11578 <_spi_m_dma_transfer+0x114>)
   114e0:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   114e2:	6829      	ldr	r1, [r5, #0]
		/* Enable spi rx */
		_spi_m_dma_rx_enable(dev);
		_dma_set_source_address(rx_ch, (void *)_spi_m_get_source_for_dma(dev->prvt));
   114e4:	4b25      	ldr	r3, [pc, #148]	; (1157c <_spi_m_dma_transfer+0x118>)
   114e6:	3128      	adds	r1, #40	; 0x28
   114e8:	4658      	mov	r0, fp
   114ea:	4798      	blx	r3
		_dma_set_destination_address(rx_ch, rxbuf);
   114ec:	4651      	mov	r1, sl
   114ee:	4658      	mov	r0, fp
   114f0:	47c8      	blx	r9
		_dma_set_data_amount(rx_ch, length);
   114f2:	4b23      	ldr	r3, [pc, #140]	; (11580 <_spi_m_dma_transfer+0x11c>)
   114f4:	4639      	mov	r1, r7
   114f6:	4658      	mov	r0, fp
   114f8:	4798      	blx	r3
		_dma_enable_transaction(rx_ch, false);
   114fa:	4b22      	ldr	r3, [pc, #136]	; (11584 <_spi_m_dma_transfer+0x120>)
   114fc:	2100      	movs	r1, #0
   114fe:	4658      	mov	r0, fp
   11500:	4798      	blx	r3
	} else {
		/* Disable spi rx */
		_spi_m_dma_rx_disable(dev);
	}

	if (txbuf) {
   11502:	f8df a07c 	ldr.w	sl, [pc, #124]	; 11580 <_spi_m_dma_transfer+0x11c>
   11506:	f8df b088 	ldr.w	fp, [pc, #136]	; 11590 <_spi_m_dma_transfer+0x12c>
   1150a:	b1c6      	cbz	r6, 1153e <_spi_m_dma_transfer+0xda>
		/* Enable spi tx */
		_dma_set_source_address(tx_ch, txbuf);
   1150c:	4b1b      	ldr	r3, [pc, #108]	; (1157c <_spi_m_dma_transfer+0x118>)
   1150e:	4631      	mov	r1, r6
   11510:	4620      	mov	r0, r4
   11512:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   11514:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
   11516:	4620      	mov	r0, r4
   11518:	3128      	adds	r1, #40	; 0x28
   1151a:	47c8      	blx	r9
		_dma_srcinc_enable(tx_ch, true);
   1151c:	2101      	movs	r1, #1
		_dma_set_data_amount(tx_ch, length);
	} else {
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
		_dma_srcinc_enable(tx_ch, false);
   1151e:	4620      	mov	r0, r4
   11520:	47d8      	blx	fp
		_dma_set_data_amount(tx_ch, length);
   11522:	4639      	mov	r1, r7
   11524:	4620      	mov	r0, r4
   11526:	47d0      	blx	sl
	}
	_dma_enable_transaction(tx_ch, false);
   11528:	4b16      	ldr	r3, [pc, #88]	; (11584 <_spi_m_dma_transfer+0x120>)
   1152a:	2100      	movs	r1, #0
   1152c:	4620      	mov	r0, r4
   1152e:	4798      	blx	r3

	return ERR_NONE;
}
   11530:	2000      	movs	r0, #0
   11532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return CONF_SERCOM_0_SPI_M_DMA_RX_CHANNEL;
   11536:	f04f 0b01 	mov.w	fp, #1
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   1153a:	2408      	movs	r4, #8
   1153c:	e7be      	b.n	114bc <_spi_m_dma_transfer+0x58>
	const struct sercomspi_regs_cfg *regs  = _spi_get_regs((uint32_t)dev->prvt);
   1153e:	4b12      	ldr	r3, [pc, #72]	; (11588 <_spi_m_dma_transfer+0x124>)
   11540:	4640      	mov	r0, r8
   11542:	4798      	blx	r3
		_dma_set_source_address(tx_ch, &regs->dummy_byte);
   11544:	4b0d      	ldr	r3, [pc, #52]	; (1157c <_spi_m_dma_transfer+0x118>)
   11546:	f100 010e 	add.w	r1, r0, #14
   1154a:	4620      	mov	r0, r4
   1154c:	4798      	blx	r3
	return (uint32_t) & (((Sercom *)hw)->SPI.DATA);
   1154e:	6829      	ldr	r1, [r5, #0]
		_dma_set_destination_address(tx_ch, (void *)_spi_m_get_destination_for_dma(dev->prvt));
   11550:	4620      	mov	r0, r4
   11552:	3128      	adds	r1, #40	; 0x28
   11554:	47c8      	blx	r9
		_dma_srcinc_enable(tx_ch, false);
   11556:	4631      	mov	r1, r6
   11558:	e7e1      	b.n	1151e <_spi_m_dma_transfer+0xba>
		return CONF_SERCOM_0_SPI_M_DMA_TX_CHANNEL;
   1155a:	f04f 0b00 	mov.w	fp, #0
   1155e:	e794      	b.n	1148a <_spi_m_dma_transfer+0x26>
	if (rxbuf) {
   11560:	f1ba 0f00 	cmp.w	sl, #0
   11564:	d1e7      	bne.n	11536 <_spi_m_dma_transfer+0xd2>
		return CONF_SERCOM_7_SPI_M_DMA_TX_CHANNEL;
   11566:	2408      	movs	r4, #8
   11568:	e793      	b.n	11492 <_spi_m_dma_transfer+0x2e>
   1156a:	bf00      	nop
   1156c:	000104b1 	.word	0x000104b1
   11570:	0000d415 	.word	0x0000d415
   11574:	00016091 	.word	0x00016091
   11578:	00010439 	.word	0x00010439
   1157c:	0000d5ad 	.word	0x0000d5ad
   11580:	0000d5d9 	.word	0x0000d5d9
   11584:	0000d61d 	.word	0x0000d61d
   11588:	000105f5 	.word	0x000105f5
   1158c:	0000d59d 	.word	0x0000d59d
   11590:	0000d5bd 	.word	0x0000d5bd

00011594 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
   11594:	b570      	push	{r4, r5, r6, lr}
   11596:	460e      	mov	r6, r1
   11598:	4614      	mov	r4, r2
	ASSERT(rb && buf && size);
   1159a:	4605      	mov	r5, r0
   1159c:	b118      	cbz	r0, 115a6 <ringbuffer_init+0x12>
   1159e:	b189      	cbz	r1, 115c4 <ringbuffer_init+0x30>
   115a0:	1e10      	subs	r0, r2, #0
   115a2:	bf18      	it	ne
   115a4:	2001      	movne	r0, #1
   115a6:	4908      	ldr	r1, [pc, #32]	; (115c8 <ringbuffer_init+0x34>)
   115a8:	4b08      	ldr	r3, [pc, #32]	; (115cc <ringbuffer_init+0x38>)
   115aa:	2228      	movs	r2, #40	; 0x28
   115ac:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
   115ae:	1e63      	subs	r3, r4, #1
   115b0:	ea13 0004 	ands.w	r0, r3, r4
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
	rb->read_index  = 0;
   115b4:	bf03      	ittte	eq
   115b6:	e9c5 3001 	strdeq	r3, r0, [r5, #4]
	rb->write_index = rb->read_index;
   115ba:	60e8      	streq	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
   115bc:	602e      	streq	r6, [r5, #0]
		return ERR_INVALID_ARG;
   115be:	f06f 000c 	mvnne.w	r0, #12

	return ERR_NONE;
}
   115c2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
   115c4:	4608      	mov	r0, r1
   115c6:	e7ee      	b.n	115a6 <ringbuffer_init+0x12>
   115c8:	00016180 	.word	0x00016180
   115cc:	0000d415 	.word	0x0000d415

000115d0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
   115d0:	b538      	push	{r3, r4, r5, lr}
   115d2:	460d      	mov	r5, r1
	ASSERT(rb && data);
   115d4:	4604      	mov	r4, r0
   115d6:	b110      	cbz	r0, 115de <ringbuffer_get+0xe>
   115d8:	1e08      	subs	r0, r1, #0
   115da:	bf18      	it	ne
   115dc:	2001      	movne	r0, #1
   115de:	4b0a      	ldr	r3, [pc, #40]	; (11608 <ringbuffer_get+0x38>)
   115e0:	490a      	ldr	r1, [pc, #40]	; (1160c <ringbuffer_get+0x3c>)
   115e2:	2240      	movs	r2, #64	; 0x40
   115e4:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
   115e6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   115ea:	429a      	cmp	r2, r3
   115ec:	d009      	beq.n	11602 <ringbuffer_get+0x32>
		*data = rb->buf[rb->read_index & rb->size];
   115ee:	6862      	ldr	r2, [r4, #4]
   115f0:	4013      	ands	r3, r2
   115f2:	6822      	ldr	r2, [r4, #0]
   115f4:	5cd3      	ldrb	r3, [r2, r3]
   115f6:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
   115f8:	68a3      	ldr	r3, [r4, #8]
   115fa:	3301      	adds	r3, #1
   115fc:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
   115fe:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
   11600:	bd38      	pop	{r3, r4, r5, pc}
	return ERR_NOT_FOUND;
   11602:	f06f 0009 	mvn.w	r0, #9
   11606:	e7fb      	b.n	11600 <ringbuffer_get+0x30>
   11608:	0000d415 	.word	0x0000d415
   1160c:	00016180 	.word	0x00016180

00011610 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
   11610:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb);
   11612:	4604      	mov	r4, r0
   11614:	3800      	subs	r0, #0
   11616:	bf18      	it	ne
   11618:	2001      	movne	r0, #1
{
   1161a:	460d      	mov	r5, r1
	ASSERT(rb);
   1161c:	4b0b      	ldr	r3, [pc, #44]	; (1164c <ringbuffer_put+0x3c>)
   1161e:	490c      	ldr	r1, [pc, #48]	; (11650 <ringbuffer_put+0x40>)
   11620:	2251      	movs	r2, #81	; 0x51
   11622:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
   11624:	68e3      	ldr	r3, [r4, #12]
   11626:	6862      	ldr	r2, [r4, #4]
   11628:	4013      	ands	r3, r2
   1162a:	6822      	ldr	r2, [r4, #0]
   1162c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
   1162e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   11632:	68e3      	ldr	r3, [r4, #12]
   11634:	1a59      	subs	r1, r3, r1
   11636:	4291      	cmp	r1, r2
		rb->read_index = rb->write_index - rb->size;
   11638:	bf88      	it	hi
   1163a:	1a9a      	subhi	r2, r3, r2
	}

	rb->write_index++;
   1163c:	f103 0301 	add.w	r3, r3, #1
		rb->read_index = rb->write_index - rb->size;
   11640:	bf88      	it	hi
   11642:	60a2      	strhi	r2, [r4, #8]
	rb->write_index++;
   11644:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
   11646:	2000      	movs	r0, #0
   11648:	bd38      	pop	{r3, r4, r5, pc}
   1164a:	bf00      	nop
   1164c:	0000d415 	.word	0x0000d415
   11650:	00016180 	.word	0x00016180

00011654 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
   11654:	b510      	push	{r4, lr}
	ASSERT(rb);
   11656:	4604      	mov	r4, r0
   11658:	3800      	subs	r0, #0
   1165a:	bf18      	it	ne
   1165c:	2001      	movne	r0, #1
   1165e:	4904      	ldr	r1, [pc, #16]	; (11670 <ringbuffer_num+0x1c>)
   11660:	4b04      	ldr	r3, [pc, #16]	; (11674 <ringbuffer_num+0x20>)
   11662:	2267      	movs	r2, #103	; 0x67
   11664:	4798      	blx	r3

	return rb->write_index - rb->read_index;
   11666:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
}
   1166a:	1ac0      	subs	r0, r0, r3
   1166c:	bd10      	pop	{r4, pc}
   1166e:	bf00      	nop
   11670:	00016180 	.word	0x00016180
   11674:	0000d415 	.word	0x0000d415

00011678 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   11678:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
   1167c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
   1167e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   11680:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
   11684:	4770      	bx	lr

00011686 <atomic_leave_critical>:
   11686:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
   1168a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1168c:	f383 8810 	msr	PRIMASK, r3
}
   11690:	4770      	bx	lr
	...

00011694 <qspi_dma_init>:
 * \brief Driver version
 */
#define QSPI_DMA_DRIVER_VERSION 0x00000001u

int32_t qspi_dma_init(struct qspi_dma_descriptor *qspi, void *const hw)
{
   11694:	b570      	push	{r4, r5, r6, lr}
   11696:	460d      	mov	r5, r1
	ASSERT(qspi && hw);
   11698:	4604      	mov	r4, r0
   1169a:	b110      	cbz	r0, 116a2 <qspi_dma_init+0xe>
   1169c:	1e08      	subs	r0, r1, #0
   1169e:	bf18      	it	ne
   116a0:	2001      	movne	r0, #1
   116a2:	4905      	ldr	r1, [pc, #20]	; (116b8 <qspi_dma_init+0x24>)
   116a4:	4b05      	ldr	r3, [pc, #20]	; (116bc <qspi_dma_init+0x28>)
   116a6:	2231      	movs	r2, #49	; 0x31
   116a8:	4798      	blx	r3

	return _qspi_dma_init(&qspi->dev, hw);
   116aa:	4629      	mov	r1, r5
   116ac:	4620      	mov	r0, r4
   116ae:	4b04      	ldr	r3, [pc, #16]	; (116c0 <qspi_dma_init+0x2c>)
}
   116b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return _qspi_dma_init(&qspi->dev, hw);
   116b4:	4718      	bx	r3
   116b6:	bf00      	nop
   116b8:	000161a4 	.word	0x000161a4
   116bc:	0000d415 	.word	0x0000d415
   116c0:	0000bc65 	.word	0x0000bc65

000116c4 <event_system_init>:
/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
	return _event_system_init();
   116c4:	4b00      	ldr	r3, [pc, #0]	; (116c8 <event_system_init+0x4>)
   116c6:	4718      	bx	r3
   116c8:	0000b891 	.word	0x0000b891

000116cc <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
   116cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   116ce:	420b      	tst	r3, r1
   116d0:	d1fc      	bne.n	116cc <hri_adc_wait_for_sync>
	};
}
   116d2:	4770      	bx	lr

000116d4 <hri_adc_set_CTRLA_ENABLE_bit>:
}

static inline void hri_adc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
   116d4:	8803      	ldrh	r3, [r0, #0]
   116d6:	b29b      	uxth	r3, r3
   116d8:	f043 0302 	orr.w	r3, r3, #2
   116dc:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   116de:	2103      	movs	r1, #3
   116e0:	4b00      	ldr	r3, [pc, #0]	; (116e4 <hri_adc_set_CTRLA_ENABLE_bit+0x10>)
   116e2:	4718      	bx	r3
   116e4:	000116cd 	.word	0x000116cd

000116e8 <hri_adc_clear_CTRLA_ENABLE_bit>:
}

static inline void hri_adc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
   116e8:	8803      	ldrh	r3, [r0, #0]
   116ea:	f023 0302 	bic.w	r3, r3, #2
   116ee:	041b      	lsls	r3, r3, #16
   116f0:	0c1b      	lsrs	r3, r3, #16
   116f2:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   116f4:	2103      	movs	r1, #3
   116f6:	4b01      	ldr	r3, [pc, #4]	; (116fc <hri_adc_clear_CTRLA_ENABLE_bit+0x14>)
   116f8:	4718      	bx	r3
   116fa:	bf00      	nop
   116fc:	000116cd 	.word	0x000116cd

00011700 <_adc_interrupt_handler>:
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _adc_interrupt_handler(struct _adc_async_device *device)
{
	void *const hw      = device->hw;
   11700:	6942      	ldr	r2, [r0, #20]
	return ((Adc *)hw)->INTFLAG.reg;
   11702:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
	return ((Adc *)hw)->INTENSET.reg;
   11706:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
	uint8_t     intflag = hri_adc_read_INTFLAG_reg(hw);
	intflag &= hri_adc_read_INTEN_reg(hw);
   1170a:	400b      	ands	r3, r1
{
   1170c:	b430      	push	{r4, r5}
	if (intflag & ADC_INTFLAG_RESRDY) {
   1170e:	f013 0501 	ands.w	r5, r3, #1
   11712:	d009      	beq.n	11728 <_adc_interrupt_handler+0x28>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   11714:	2301      	movs	r3, #1
   11716:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	return ((Adc *)hw)->RESULT.reg;
   1171a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
		hri_adc_clear_interrupt_RESRDY_bit(hw);
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
   1171e:	6883      	ldr	r3, [r0, #8]
		device->adc_async_cb.error_cb(device, 0);
	} else if (intflag & ADC_INTFLAG_WINMON) {
		hri_adc_clear_interrupt_WINMON_bit(hw);
		device->adc_async_cb.window_cb(device, 0);
	}
}
   11720:	bc30      	pop	{r4, r5}
		device->adc_async_ch_cb.convert_done(device, 0, hri_adc_read_RESULT_reg(hw));
   11722:	b292      	uxth	r2, r2
   11724:	2100      	movs	r1, #0
   11726:	4718      	bx	r3
	} else if (intflag & ADC_INTFLAG_OVERRUN) {
   11728:	f013 0102 	ands.w	r1, r3, #2
   1172c:	d006      	beq.n	1173c <_adc_interrupt_handler+0x3c>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   1172e:	2302      	movs	r3, #2
   11730:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.error_cb(device, 0);
   11734:	6843      	ldr	r3, [r0, #4]
   11736:	4629      	mov	r1, r5
}
   11738:	bc30      	pop	{r4, r5}
		device->adc_async_cb.window_cb(device, 0);
   1173a:	4718      	bx	r3
	} else if (intflag & ADC_INTFLAG_WINMON) {
   1173c:	075b      	lsls	r3, r3, #29
   1173e:	d504      	bpl.n	1174a <_adc_interrupt_handler+0x4a>
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
   11740:	2304      	movs	r3, #4
   11742:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		device->adc_async_cb.window_cb(device, 0);
   11746:	6803      	ldr	r3, [r0, #0]
   11748:	e7f6      	b.n	11738 <_adc_interrupt_handler+0x38>
}
   1174a:	bc30      	pop	{r4, r5}
   1174c:	4770      	bx	lr
	...

00011750 <_adc_get_regs>:
{
   11750:	b508      	push	{r3, lr}
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   11752:	f100 433d 	add.w	r3, r0, #3170893824	; 0xbd000000
   11756:	f5a3 53e0 	sub.w	r3, r3, #7168	; 0x1c00
		if (_adcs[i].number == n) {
   1175a:	f413 3f7f 	tst.w	r3, #261120	; 0x3fc00
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   1175e:	f3c3 2087 	ubfx	r0, r3, #10, #8
		if (_adcs[i].number == n) {
   11762:	d007      	beq.n	11774 <_adc_get_regs+0x24>
   11764:	2801      	cmp	r0, #1
   11766:	d005      	beq.n	11774 <_adc_get_regs+0x24>
	ASSERT(false);
   11768:	2000      	movs	r0, #0
   1176a:	4903      	ldr	r1, [pc, #12]	; (11778 <_adc_get_regs+0x28>)
   1176c:	4b03      	ldr	r3, [pc, #12]	; (1177c <_adc_get_regs+0x2c>)
   1176e:	228c      	movs	r2, #140	; 0x8c
   11770:	4798      	blx	r3
	return 0;
   11772:	2000      	movs	r0, #0
}
   11774:	bd08      	pop	{r3, pc}
   11776:	bf00      	nop
   11778:	000161be 	.word	0x000161be
   1177c:	0000d415 	.word	0x0000d415

00011780 <__NVIC_ClearPendingIRQ>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11780:	0943      	lsrs	r3, r0, #5
   11782:	2201      	movs	r2, #1
   11784:	f000 001f 	and.w	r0, r0, #31
   11788:	fa02 f000 	lsl.w	r0, r2, r0
   1178c:	3360      	adds	r3, #96	; 0x60
   1178e:	4a02      	ldr	r2, [pc, #8]	; (11798 <__NVIC_ClearPendingIRQ+0x18>)
   11790:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11794:	4770      	bx	lr
   11796:	bf00      	nop
   11798:	e000e100 	.word	0xe000e100

0001179c <_adc_get_irq_num.isra.0>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
   1179c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
   117a0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
   117a4:	0a80      	lsrs	r0, r0, #10
	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
   117a6:	0040      	lsls	r0, r0, #1
   117a8:	3076      	adds	r0, #118	; 0x76
}
   117aa:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   117ae:	4770      	bx	lr

000117b0 <__NVIC_DisableIRQ>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   117b0:	0943      	lsrs	r3, r0, #5
   117b2:	2201      	movs	r2, #1
   117b4:	f000 001f 	and.w	r0, r0, #31
   117b8:	fa02 f000 	lsl.w	r0, r2, r0
   117bc:	3320      	adds	r3, #32
   117be:	4a04      	ldr	r2, [pc, #16]	; (117d0 <__NVIC_DisableIRQ+0x20>)
   117c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   117c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   117c8:	f3bf 8f6f 	isb	sy
}
   117cc:	4770      	bx	lr
   117ce:	bf00      	nop
   117d0:	e000e100 	.word	0xe000e100

000117d4 <_adc_init>:
{
   117d4:	b538      	push	{r3, r4, r5, lr}
	if (hw == ADC0) {
   117d6:	4b39      	ldr	r3, [pc, #228]	; (118bc <_adc_init+0xe8>)
   117d8:	4298      	cmp	r0, r3
{
   117da:	460c      	mov	r4, r1
	if (hw == ADC0) {
   117dc:	d15c      	bne.n	11898 <_adc_init+0xc4>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
   117de:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
   117e2:	681b      	ldr	r3, [r3, #0]
   117e4:	00da      	lsls	r2, r3, #3
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
   117e6:	0919      	lsrs	r1, r3, #4
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC0_FUSES_BIASREFBUF_ADDR >> ADC0_FUSES_BIASREFBUF_Pos))
   117e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC0_FUSES_BIASR2R_ADDR >> ADC0_FUSES_BIASR2R_Pos))
   117ec:	f001 0170 	and.w	r1, r1, #112	; 0x70
   117f0:	430a      	orrs	r2, r1
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC0_FUSES_BIASCOMP_ADDR >> ADC0_FUSES_BIASCOMP_Pos));
   117f2:	f3c3 0382 	ubfx	r3, r3, #2, #3
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   117f6:	431a      	orrs	r2, r3
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
   117f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   117fa:	4d31      	ldr	r5, [pc, #196]	; (118c0 <_adc_init+0xec>)
	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
   117fc:	f013 0f01 	tst.w	r3, #1
   11800:	d10c      	bne.n	1181c <_adc_init+0x48>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   11802:	2103      	movs	r1, #3
   11804:	47a8      	blx	r5
	tmp = ((Adc *)hw)->CTRLA.reg;
   11806:	8803      	ldrh	r3, [r0, #0]
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
   11808:	079b      	lsls	r3, r3, #30
   1180a:	d503      	bpl.n	11814 <_adc_init+0x40>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
   1180c:	4b2d      	ldr	r3, [pc, #180]	; (118c4 <_adc_init+0xf0>)
   1180e:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
   11810:	2102      	movs	r1, #2
   11812:	47a8      	blx	r5
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
   11814:	2301      	movs	r3, #1
   11816:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   11818:	2103      	movs	r1, #3
   1181a:	47a8      	blx	r5
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
   1181c:	2101      	movs	r1, #1
   1181e:	47a8      	blx	r5
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
   11820:	4929      	ldr	r1, [pc, #164]	; (118c8 <_adc_init+0xf4>)
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
   11822:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   11826:	2316      	movs	r3, #22
   11828:	fb03 1404 	mla	r4, r3, r4, r1
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   1182c:	f640 71ff 	movw	r1, #4095	; 0xfff
   11830:	88a3      	ldrh	r3, [r4, #4]
	((Adc *)hw)->CTRLB.reg = data;
   11832:	80c3      	strh	r3, [r0, #6]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   11834:	47a8      	blx	r5
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
   11836:	79a3      	ldrb	r3, [r4, #6]
	((Adc *)hw)->REFCTRL.reg = data;
   11838:	7203      	strb	r3, [r0, #8]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   1183a:	f640 71ff 	movw	r1, #4095	; 0xfff
   1183e:	47a8      	blx	r5
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
   11840:	79e3      	ldrb	r3, [r4, #7]
	((Adc *)hw)->EVCTRL.reg = data;
   11842:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
   11844:	8923      	ldrh	r3, [r4, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
   11846:	8083      	strh	r3, [r0, #4]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   11848:	f640 71ff 	movw	r1, #4095	; 0xfff
   1184c:	47a8      	blx	r5
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
   1184e:	7aa3      	ldrb	r3, [r4, #10]
	((Adc *)hw)->AVGCTRL.reg = data;
   11850:	7283      	strb	r3, [r0, #10]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   11852:	f640 71ff 	movw	r1, #4095	; 0xfff
   11856:	47a8      	blx	r5
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
   11858:	7ae3      	ldrb	r3, [r4, #11]
	((Adc *)hw)->SAMPCTRL.reg = data;
   1185a:	72c3      	strb	r3, [r0, #11]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   1185c:	f640 71ff 	movw	r1, #4095	; 0xfff
   11860:	47a8      	blx	r5
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
   11862:	89a3      	ldrh	r3, [r4, #12]
	((Adc *)hw)->WINLT.reg = data;
   11864:	8183      	strh	r3, [r0, #12]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINLT);
   11866:	2180      	movs	r1, #128	; 0x80
   11868:	47a8      	blx	r5
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
   1186a:	89e3      	ldrh	r3, [r4, #14]
	((Adc *)hw)->WINUT.reg = data;
   1186c:	81c3      	strh	r3, [r0, #14]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINUT);
   1186e:	f44f 7180 	mov.w	r1, #256	; 0x100
   11872:	47a8      	blx	r5
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
   11874:	8a23      	ldrh	r3, [r4, #16]
	((Adc *)hw)->GAINCORR.reg = data;
   11876:	8203      	strh	r3, [r0, #16]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_GAINCORR);
   11878:	f44f 7100 	mov.w	r1, #512	; 0x200
   1187c:	47a8      	blx	r5
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
   1187e:	8a63      	ldrh	r3, [r4, #18]
	((Adc *)hw)->OFFSETCORR.reg = data;
   11880:	8243      	strh	r3, [r0, #18]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_OFFSETCORR);
   11882:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11886:	47a8      	blx	r5
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
   11888:	7d23      	ldrb	r3, [r4, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
   1188a:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
   1188c:	8863      	ldrh	r3, [r4, #2]
	((Adc *)hw)->CTRLA.reg = data;
   1188e:	8003      	strh	r3, [r0, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
   11890:	2103      	movs	r1, #3
   11892:	47a8      	blx	r5
}
   11894:	2000      	movs	r0, #0
   11896:	bd38      	pop	{r3, r4, r5, pc}
	} else if (hw == ADC1) {
   11898:	4b0c      	ldr	r3, [pc, #48]	; (118cc <_adc_init+0xf8>)
   1189a:	4298      	cmp	r0, r3
   1189c:	d10c      	bne.n	118b8 <_adc_init+0xe4>
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   1189e:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
   118a2:	681b      	ldr	r3, [r3, #0]
   118a4:	0ada      	lsrs	r2, r3, #11
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
   118a6:	0c99      	lsrs	r1, r3, #18
		calib_reg = ADC_CALIB_BIASREFBUF((*(uint32_t *)ADC1_FUSES_BIASREFBUF_ADDR >> ADC1_FUSES_BIASREFBUF_Pos))
   118a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
		            | ADC_CALIB_BIASR2R((*(uint32_t *)ADC1_FUSES_BIASR2R_ADDR >> ADC1_FUSES_BIASR2R_Pos))
   118ac:	f001 0170 	and.w	r1, r1, #112	; 0x70
   118b0:	430a      	orrs	r2, r1
		            | ADC_CALIB_BIASCOMP((*(uint32_t *)ADC1_FUSES_BIASCOMP_ADDR >> ADC1_FUSES_BIASCOMP_Pos));
   118b2:	f3c3 4302 	ubfx	r3, r3, #16, #3
   118b6:	e79e      	b.n	117f6 <_adc_init+0x22>
	uint16_t calib_reg = 0;
   118b8:	2200      	movs	r2, #0
   118ba:	e79d      	b.n	117f8 <_adc_init+0x24>
   118bc:	43001c00 	.word	0x43001c00
   118c0:	000116cd 	.word	0x000116cd
   118c4:	000116e9 	.word	0x000116e9
   118c8:	000161d4 	.word	0x000161d4
   118cc:	43002000 	.word	0x43002000

000118d0 <_adc_async_init>:
{
   118d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ASSERT(device);
   118d4:	4604      	mov	r4, r0
   118d6:	3800      	subs	r0, #0
   118d8:	bf18      	it	ne
   118da:	2001      	movne	r0, #1
{
   118dc:	460d      	mov	r5, r1
	ASSERT(device);
   118de:	22f1      	movs	r2, #241	; 0xf1
   118e0:	4923      	ldr	r1, [pc, #140]	; (11970 <_adc_async_init+0xa0>)
   118e2:	4b24      	ldr	r3, [pc, #144]	; (11974 <_adc_async_init+0xa4>)
   118e4:	4798      	blx	r3
	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
   118e6:	4b24      	ldr	r3, [pc, #144]	; (11978 <_adc_async_init+0xa8>)
   118e8:	4628      	mov	r0, r5
   118ea:	4798      	blx	r3
   118ec:	4b23      	ldr	r3, [pc, #140]	; (1197c <_adc_async_init+0xac>)
   118ee:	4601      	mov	r1, r0
   118f0:	4628      	mov	r0, r5
   118f2:	4798      	blx	r3
	if (init_status) {
   118f4:	4606      	mov	r6, r0
   118f6:	2800      	cmp	r0, #0
   118f8:	d130      	bne.n	1195c <_adc_async_init+0x8c>
	if (hw == ADC0) {
   118fa:	4b21      	ldr	r3, [pc, #132]	; (11980 <_adc_async_init+0xb0>)
	device->hw = hw;
   118fc:	6165      	str	r5, [r4, #20]
	if (hw == ADC0) {
   118fe:	429d      	cmp	r5, r3
   11900:	d12f      	bne.n	11962 <_adc_async_init+0x92>
		_adc0_dev = dev;
   11902:	4b20      	ldr	r3, [pc, #128]	; (11984 <_adc_async_init+0xb4>)
   11904:	601c      	str	r4, [r3, #0]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
   11906:	4920      	ldr	r1, [pc, #128]	; (11988 <_adc_async_init+0xb8>)
   11908:	f8df 9088 	ldr.w	r9, [pc, #136]	; 11994 <_adc_async_init+0xc4>
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
   1190c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 11998 <_adc_async_init+0xc8>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11910:	4f1e      	ldr	r7, [pc, #120]	; (1198c <_adc_async_init+0xbc>)
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
   11912:	4628      	mov	r0, r5
   11914:	4788      	blx	r1
   11916:	b200      	sxth	r0, r0
   11918:	47c8      	blx	r9
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
   1191a:	6960      	ldr	r0, [r4, #20]
   1191c:	4788      	blx	r1
   1191e:	b200      	sxth	r0, r0
   11920:	47c0      	blx	r8
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
   11922:	6960      	ldr	r0, [r4, #20]
   11924:	4788      	blx	r1
   11926:	2501      	movs	r5, #1
   11928:	0942      	lsrs	r2, r0, #5
   1192a:	f000 031f 	and.w	r3, r0, #31
   1192e:	fa05 f303 	lsl.w	r3, r5, r3
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
   11932:	4428      	add	r0, r5
   11934:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   11938:	b200      	sxth	r0, r0
   1193a:	47c8      	blx	r9
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
   1193c:	6960      	ldr	r0, [r4, #20]
   1193e:	4788      	blx	r1
   11940:	4428      	add	r0, r5
   11942:	b200      	sxth	r0, r0
   11944:	47c0      	blx	r8
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
   11946:	6960      	ldr	r0, [r4, #20]
   11948:	4788      	blx	r1
   1194a:	1943      	adds	r3, r0, r5
   1194c:	f3c3 124a 	ubfx	r2, r3, #5, #11
   11950:	f003 031f 	and.w	r3, r3, #31
   11954:	fa05 f303 	lsl.w	r3, r5, r3
   11958:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
}
   1195c:	4630      	mov	r0, r6
   1195e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (hw == ADC1) {
   11962:	4b0b      	ldr	r3, [pc, #44]	; (11990 <_adc_async_init+0xc0>)
   11964:	429d      	cmp	r5, r3
		_adc1_dev = dev;
   11966:	bf04      	itt	eq
   11968:	4b06      	ldreq	r3, [pc, #24]	; (11984 <_adc_async_init+0xb4>)
   1196a:	605c      	streq	r4, [r3, #4]
   1196c:	e7cb      	b.n	11906 <_adc_async_init+0x36>
   1196e:	bf00      	nop
   11970:	000161be 	.word	0x000161be
   11974:	0000d415 	.word	0x0000d415
   11978:	00011751 	.word	0x00011751
   1197c:	000117d5 	.word	0x000117d5
   11980:	43001c00 	.word	0x43001c00
   11984:	2000109c 	.word	0x2000109c
   11988:	0001179d 	.word	0x0001179d
   1198c:	e000e100 	.word	0xe000e100
   11990:	43002000 	.word	0x43002000
   11994:	000117b1 	.word	0x000117b1
   11998:	00011781 	.word	0x00011781

0001199c <_adc_async_enable_channel>:
	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
   1199c:	6940      	ldr	r0, [r0, #20]
   1199e:	4b01      	ldr	r3, [pc, #4]	; (119a4 <_adc_async_enable_channel+0x8>)
   119a0:	4718      	bx	r3
   119a2:	bf00      	nop
   119a4:	000116d5 	.word	0x000116d5

000119a8 <_adc_async_get_data_size>:
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
   119a8:	6943      	ldr	r3, [r0, #20]
	tmp = ((Adc *)hw)->CTRLB.reg;
   119aa:	88db      	ldrh	r3, [r3, #6]
   119ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   119b0:	2b03      	cmp	r3, #3
}
   119b2:	bf0c      	ite	eq
   119b4:	2001      	moveq	r0, #1
   119b6:	2002      	movne	r0, #2
   119b8:	4770      	bx	lr
	...

000119bc <_adc_async_convert>:
	hri_adc_set_SWTRIG_START_bit(device->hw);
   119bc:	6940      	ldr	r0, [r0, #20]
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
   119be:	7d03      	ldrb	r3, [r0, #20]
   119c0:	f043 0302 	orr.w	r3, r3, #2
   119c4:	7503      	strb	r3, [r0, #20]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
   119c6:	f640 71ff 	movw	r1, #4095	; 0xfff
   119ca:	4b01      	ldr	r3, [pc, #4]	; (119d0 <_adc_async_convert+0x14>)
   119cc:	4718      	bx	r3
   119ce:	bf00      	nop
   119d0:	000116cd 	.word	0x000116cd

000119d4 <_adc_async_set_irq_state>:
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
   119d4:	2a01      	cmp	r2, #1
	void *const hw = device->hw;
   119d6:	6941      	ldr	r1, [r0, #20]
	if (ADC_ASYNC_DEVICE_MONITOR_CB == type) {
   119d8:	d104      	bne.n	119e4 <_adc_async_set_irq_state+0x10>
	if (value == 0x0) {
   119da:	2204      	movs	r2, #4
	if (value == 0x0) {
   119dc:	b93b      	cbnz	r3, 119ee <_adc_async_set_irq_state+0x1a>
		((Adc *)hw)->INTENCLR.reg = ADC_INTENSET_RESRDY;
   119de:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
   119e2:	4770      	bx	lr
	} else if (ADC_ASYNC_DEVICE_ERROR_CB == type) {
   119e4:	2a02      	cmp	r2, #2
   119e6:	d0f9      	beq.n	119dc <_adc_async_set_irq_state+0x8>
	} else if (ADC_ASYNC_DEVICE_CONVERT_CB == type) {
   119e8:	b91a      	cbnz	r2, 119f2 <_adc_async_set_irq_state+0x1e>
	if (value == 0x0) {
   119ea:	2201      	movs	r2, #1
   119ec:	e7f6      	b.n	119dc <_adc_async_set_irq_state+0x8>
		((Adc *)hw)->INTENSET.reg = ADC_INTENSET_RESRDY;
   119ee:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
}
   119f2:	4770      	bx	lr

000119f4 <ADC0_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC0_0_Handler(void)
{
	_adc_interrupt_handler(_adc0_dev);
   119f4:	4b01      	ldr	r3, [pc, #4]	; (119fc <ADC0_0_Handler+0x8>)
   119f6:	6818      	ldr	r0, [r3, #0]
   119f8:	4b01      	ldr	r3, [pc, #4]	; (11a00 <ADC0_0_Handler+0xc>)
   119fa:	4718      	bx	r3
   119fc:	2000109c 	.word	0x2000109c
   11a00:	00011701 	.word	0x00011701

00011a04 <ADC0_1_Handler>:
   11a04:	4b00      	ldr	r3, [pc, #0]	; (11a08 <ADC0_1_Handler+0x4>)
   11a06:	4718      	bx	r3
   11a08:	000119f5 	.word	0x000119f5

00011a0c <ADC1_0_Handler>:
/**
 * \brief DMAC interrupt handler
 */
void ADC1_0_Handler(void)
{
	_adc_interrupt_handler(_adc1_dev);
   11a0c:	4b01      	ldr	r3, [pc, #4]	; (11a14 <ADC1_0_Handler+0x8>)
   11a0e:	6858      	ldr	r0, [r3, #4]
   11a10:	4b01      	ldr	r3, [pc, #4]	; (11a18 <ADC1_0_Handler+0xc>)
   11a12:	4718      	bx	r3
   11a14:	2000109c 	.word	0x2000109c
   11a18:	00011701 	.word	0x00011701

00011a1c <ADC1_1_Handler>:
   11a1c:	4b00      	ldr	r3, [pc, #0]	; (11a20 <ADC1_1_Handler+0x4>)
   11a1e:	4718      	bx	r3
   11a20:	00011a0d 	.word	0x00011a0d

00011a24 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   11a24:	e7fe      	b.n	11a24 <Dummy_Handler>
	...

00011a28 <Reset_Handler>:
{
   11a28:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   11a2a:	4a14      	ldr	r2, [pc, #80]	; (11a7c <Reset_Handler+0x54>)
   11a2c:	4b14      	ldr	r3, [pc, #80]	; (11a80 <Reset_Handler+0x58>)
   11a2e:	429a      	cmp	r2, r3
   11a30:	d002      	beq.n	11a38 <Reset_Handler+0x10>
		for (; pDest < &_erelocate;) {
   11a32:	4914      	ldr	r1, [pc, #80]	; (11a84 <Reset_Handler+0x5c>)
   11a34:	428b      	cmp	r3, r1
   11a36:	d318      	bcc.n	11a6a <Reset_Handler+0x42>
	pSrc  = &_etext;
   11a38:	4b13      	ldr	r3, [pc, #76]	; (11a88 <Reset_Handler+0x60>)
	for (pDest = &_szero; pDest < &_ezero;) {
   11a3a:	4a14      	ldr	r2, [pc, #80]	; (11a8c <Reset_Handler+0x64>)
		*pDest++ = 0;
   11a3c:	2100      	movs	r1, #0
	for (pDest = &_szero; pDest < &_ezero;) {
   11a3e:	4293      	cmp	r3, r2
   11a40:	d318      	bcc.n	11a74 <Reset_Handler+0x4c>
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
   11a42:	4a13      	ldr	r2, [pc, #76]	; (11a90 <Reset_Handler+0x68>)
   11a44:	4b13      	ldr	r3, [pc, #76]	; (11a94 <Reset_Handler+0x6c>)
   11a46:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   11a4a:	609a      	str	r2, [r3, #8]
	SCB->CPACR |= (0xFu << 20);
   11a4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11a50:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   11a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   11a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11a5c:	f3bf 8f6f 	isb	sy
	__libc_init_array();
   11a60:	4b0d      	ldr	r3, [pc, #52]	; (11a98 <Reset_Handler+0x70>)
   11a62:	4798      	blx	r3
	main();
   11a64:	4b0d      	ldr	r3, [pc, #52]	; (11a9c <Reset_Handler+0x74>)
   11a66:	4798      	blx	r3
	while (1)
   11a68:	e7fe      	b.n	11a68 <Reset_Handler+0x40>
			*pDest++ = *pSrc++;
   11a6a:	f852 0b04 	ldr.w	r0, [r2], #4
   11a6e:	f843 0b04 	str.w	r0, [r3], #4
   11a72:	e7df      	b.n	11a34 <Reset_Handler+0xc>
		*pDest++ = 0;
   11a74:	f843 1b04 	str.w	r1, [r3], #4
   11a78:	e7e1      	b.n	11a3e <Reset_Handler+0x16>
   11a7a:	bf00      	nop
   11a7c:	0001635c 	.word	0x0001635c
   11a80:	20000000 	.word	0x20000000
   11a84:	200005ac 	.word	0x200005ac
   11a88:	200005b0 	.word	0x200005b0
   11a8c:	20014e38 	.word	0x20014e38
   11a90:	00004000 	.word	0x00004000
   11a94:	e000ed00 	.word	0xe000ed00
   11a98:	00012c69 	.word	0x00012c69
   11a9c:	0000ed29 	.word	0x0000ed29

00011aa0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
   11aa0:	b510      	push	{r4, lr}
	system_init();
   11aa2:	4b04      	ldr	r3, [pc, #16]	; (11ab4 <atmel_start_init+0x14>)
   11aa4:	4798      	blx	r3
	usb_init();
   11aa6:	4b04      	ldr	r3, [pc, #16]	; (11ab8 <atmel_start_init+0x18>)
   11aa8:	4798      	blx	r3
	stdio_redirect_init();
}
   11aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stdio_redirect_init();
   11aae:	4b03      	ldr	r3, [pc, #12]	; (11abc <atmel_start_init+0x1c>)
   11ab0:	4718      	bx	r3
   11ab2:	bf00      	nop
   11ab4:	0000fed5 	.word	0x0000fed5
   11ab8:	0000c061 	.word	0x0000c061
   11abc:	0000e0a5 	.word	0x0000e0a5

00011ac0 <usbdc_unconfig>:
/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11ac0:	4b05      	ldr	r3, [pc, #20]	; (11ad8 <usbdc_unconfig+0x18>)
{
   11ac2:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11ac4:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
   11ac6:	b904      	cbnz	r4, 11aca <usbdc_unconfig+0xa>
		func->ctrl(func, USBDF_DISABLE, NULL);
		func = func->next;
	}
}
   11ac8:	bd10      	pop	{r4, pc}
		func->ctrl(func, USBDF_DISABLE, NULL);
   11aca:	6863      	ldr	r3, [r4, #4]
   11acc:	4620      	mov	r0, r4
   11ace:	2200      	movs	r2, #0
   11ad0:	2101      	movs	r1, #1
   11ad2:	4798      	blx	r3
		func = func->next;
   11ad4:	6824      	ldr	r4, [r4, #0]
   11ad6:	e7f6      	b.n	11ac6 <usbdc_unconfig+0x6>
   11ad8:	200010a4 	.word	0x200010a4

00011adc <usbdc_change_notify>:
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   11adc:	4b06      	ldr	r3, [pc, #24]	; (11af8 <usbdc_change_notify+0x1c>)
{
   11ade:	b570      	push	{r4, r5, r6, lr}
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
   11ae0:	68dc      	ldr	r4, [r3, #12]
{
   11ae2:	4605      	mov	r5, r0
   11ae4:	460e      	mov	r6, r1

	while (cg != NULL) {
   11ae6:	b904      	cbnz	r4, 11aea <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
   11ae8:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
   11aea:	6863      	ldr	r3, [r4, #4]
   11aec:	b113      	cbz	r3, 11af4 <usbdc_change_notify+0x18>
			cg->cb(change, value);
   11aee:	4631      	mov	r1, r6
   11af0:	4628      	mov	r0, r5
   11af2:	4798      	blx	r3
		cg = cg->next;
   11af4:	6824      	ldr	r4, [r4, #0]
   11af6:	e7f6      	b.n	11ae6 <usbdc_change_notify+0xa>
   11af8:	200010a4 	.word	0x200010a4

00011afc <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
   11afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
   11afe:	4b0c      	ldr	r3, [pc, #48]	; (11b30 <usbdc_request_handler+0x34>)
   11b00:	689c      	ldr	r4, [r3, #8]
{
   11b02:	4605      	mov	r5, r0
   11b04:	460e      	mov	r6, r1
   11b06:	4617      	mov	r7, r2
	int32_t                   rc;

	while (h != NULL) {
   11b08:	b90c      	cbnz	r4, 11b0e <usbdc_request_handler+0x12>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
   11b0a:	4620      	mov	r0, r4
}
   11b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (NULL != h->cb) {
   11b0e:	6863      	ldr	r3, [r4, #4]
   11b10:	b90b      	cbnz	r3, 11b16 <usbdc_request_handler+0x1a>
		h = h->next;
   11b12:	6824      	ldr	r4, [r4, #0]
   11b14:	e7f8      	b.n	11b08 <usbdc_request_handler+0xc>
			rc = h->cb(ep, req, stage);
   11b16:	463a      	mov	r2, r7
   11b18:	4631      	mov	r1, r6
   11b1a:	4628      	mov	r0, r5
   11b1c:	4798      	blx	r3
			if (0 == rc) {
   11b1e:	b120      	cbz	r0, 11b2a <usbdc_request_handler+0x2e>
			} else if (ERR_NOT_FOUND != rc) {
   11b20:	300a      	adds	r0, #10
   11b22:	d0f6      	beq.n	11b12 <usbdc_request_handler+0x16>
				return -1;
   11b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11b28:	e7f0      	b.n	11b0c <usbdc_request_handler+0x10>
				return true;
   11b2a:	2001      	movs	r0, #1
   11b2c:	e7ee      	b.n	11b0c <usbdc_request_handler+0x10>
   11b2e:	bf00      	nop
   11b30:	200010a4 	.word	0x200010a4

00011b34 <usbd_sof_cb>:
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   11b34:	4b04      	ldr	r3, [pc, #16]	; (11b48 <usbd_sof_cb+0x14>)

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
   11b36:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
   11b38:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
   11b3a:	b904      	cbnz	r4, 11b3e <usbd_sof_cb+0xa>
	usbdc_sof_notify();
}
   11b3c:	bd10      	pop	{r4, pc}
		if (NULL != sof->cb) {
   11b3e:	6863      	ldr	r3, [r4, #4]
   11b40:	b103      	cbz	r3, 11b44 <usbd_sof_cb+0x10>
			sof->cb();
   11b42:	4798      	blx	r3
		sof = sof->next;
   11b44:	6824      	ldr	r4, [r4, #0]
   11b46:	e7f8      	b.n	11b3a <usbd_sof_cb+0x6>
   11b48:	200010a4 	.word	0x200010a4

00011b4c <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
   11b4c:	b510      	push	{r4, lr}
   11b4e:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
   11b50:	460a      	mov	r2, r1
   11b52:	b119      	cbz	r1, 11b5c <usbdc_cb_ctl_done+0x10>
   11b54:	2901      	cmp	r1, #1
   11b56:	d021      	beq.n	11b9c <usbdc_cb_ctl_done+0x50>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
   11b58:	2000      	movs	r0, #0
   11b5a:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
   11b5c:	7823      	ldrb	r3, [r4, #0]
   11b5e:	2b00      	cmp	r3, #0
   11b60:	d1fa      	bne.n	11b58 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
   11b62:	7863      	ldrb	r3, [r4, #1]
   11b64:	2b05      	cmp	r3, #5
   11b66:	d00d      	beq.n	11b84 <usbdc_cb_ctl_done+0x38>
   11b68:	2b09      	cmp	r3, #9
   11b6a:	d1f5      	bne.n	11b58 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
   11b6c:	8862      	ldrh	r2, [r4, #2]
   11b6e:	4b0e      	ldr	r3, [pc, #56]	; (11ba8 <usbdc_cb_ctl_done+0x5c>)
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   11b70:	2a00      	cmp	r2, #0
		usbdc.cfg_value = req->wValue;
   11b72:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
   11b74:	bf14      	ite	ne
   11b76:	2104      	movne	r1, #4
   11b78:	2103      	moveq	r1, #3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   11b7a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
   11b7c:	2001      	movs	r0, #1
   11b7e:	4b0b      	ldr	r3, [pc, #44]	; (11bac <usbdc_cb_ctl_done+0x60>)
   11b80:	4798      	blx	r3
		break;
   11b82:	e7e9      	b.n	11b58 <usbdc_cb_ctl_done+0xc>
		usbdc_set_address(req->wValue);
   11b84:	8860      	ldrh	r0, [r4, #2]
	usb_d_set_address(addr);
   11b86:	4b0a      	ldr	r3, [pc, #40]	; (11bb0 <usbdc_cb_ctl_done+0x64>)
   11b88:	b2c0      	uxtb	r0, r0
   11b8a:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
   11b8c:	8863      	ldrh	r3, [r4, #2]
   11b8e:	2b00      	cmp	r3, #0
   11b90:	bf18      	it	ne
   11b92:	2103      	movne	r1, #3
   11b94:	4b04      	ldr	r3, [pc, #16]	; (11ba8 <usbdc_cb_ctl_done+0x5c>)
   11b96:	bf08      	it	eq
   11b98:	2102      	moveq	r1, #2
   11b9a:	e7ee      	b.n	11b7a <usbdc_cb_ctl_done+0x2e>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
   11b9c:	4b05      	ldr	r3, [pc, #20]	; (11bb4 <usbdc_cb_ctl_done+0x68>)
   11b9e:	4621      	mov	r1, r4
   11ba0:	2000      	movs	r0, #0
   11ba2:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
   11ba4:	e7d8      	b.n	11b58 <usbdc_cb_ctl_done+0xc>
   11ba6:	bf00      	nop
   11ba8:	200010a4 	.word	0x200010a4
   11bac:	00011add 	.word	0x00011add
   11bb0:	0000e8f1 	.word	0x0000e8f1
   11bb4:	00011afd 	.word	0x00011afd

00011bb8 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
   11bb8:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();

	usbdc.state       = USBD_S_DEFAULT;
   11bba:	4d0d      	ldr	r5, [pc, #52]	; (11bf0 <usbdc_reset+0x38>)
	usbdc_unconfig();
   11bbc:	4b0d      	ldr	r3, [pc, #52]	; (11bf4 <usbdc_reset+0x3c>)
	usbdc.cfg_value   = 0;
	usbdc.ifc_alt_map = 0;
   11bbe:	2400      	movs	r4, #0
	usbdc.state       = USBD_S_DEFAULT;
   11bc0:	2602      	movs	r6, #2
	usbdc_unconfig();
   11bc2:	4798      	blx	r3
	usbdc.state       = USBD_S_DEFAULT;
   11bc4:	836e      	strh	r6, [r5, #26]

	// Setup EP0
	usb_d_ep_deinit(0);
   11bc6:	4620      	mov	r0, r4
   11bc8:	4b0b      	ldr	r3, [pc, #44]	; (11bf8 <usbdc_reset+0x40>)
	usbdc.ifc_alt_map = 0;
   11bca:	776c      	strb	r4, [r5, #29]
	usb_d_ep_deinit(0);
   11bcc:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
   11bce:	4b0b      	ldr	r3, [pc, #44]	; (11bfc <usbdc_reset+0x44>)
   11bd0:	7f28      	ldrb	r0, [r5, #28]
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   11bd2:	4d0b      	ldr	r5, [pc, #44]	; (11c00 <usbdc_reset+0x48>)
	usb_d_ep0_init(usbdc.ctrl_size);
   11bd4:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
   11bd6:	4621      	mov	r1, r4
   11bd8:	4620      	mov	r0, r4
   11bda:	4a0a      	ldr	r2, [pc, #40]	; (11c04 <usbdc_reset+0x4c>)
   11bdc:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
   11bde:	4620      	mov	r0, r4
   11be0:	4631      	mov	r1, r6
   11be2:	4a09      	ldr	r2, [pc, #36]	; (11c08 <usbdc_reset+0x50>)
   11be4:	47a8      	blx	r5
	usb_d_ep_enable(0);
   11be6:	4620      	mov	r0, r4
   11be8:	4b08      	ldr	r3, [pc, #32]	; (11c0c <usbdc_reset+0x54>)
}
   11bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	usb_d_ep_enable(0);
   11bee:	4718      	bx	r3
   11bf0:	200010a4 	.word	0x200010a4
   11bf4:	00011ac1 	.word	0x00011ac1
   11bf8:	0000e95d 	.word	0x0000e95d
   11bfc:	0000e94d 	.word	0x0000e94d
   11c00:	0000eb71 	.word	0x0000eb71
   11c04:	00011c49 	.word	0x00011c49
   11c08:	00011b4d 	.word	0x00011b4d
   11c0c:	0000e989 	.word	0x0000e989

00011c10 <usbd_event_cb>:
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
	(void)param;

	switch (ev) {
   11c10:	b110      	cbz	r0, 11c18 <usbd_event_cb+0x8>
   11c12:	2801      	cmp	r0, #1
   11c14:	d002      	beq.n	11c1c <usbd_event_cb+0xc>
   11c16:	4770      	bx	lr
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
   11c18:	4b01      	ldr	r3, [pc, #4]	; (11c20 <usbd_event_cb+0x10>)
   11c1a:	4718      	bx	r3
		break;

	case USB_EV_RESET:
		usbdc_reset();
   11c1c:	4b01      	ldr	r3, [pc, #4]	; (11c24 <usbd_event_cb+0x14>)
   11c1e:	4718      	bx	r3
   11c20:	00011add 	.word	0x00011add
   11c24:	00011bb9 	.word	0x00011bb9

00011c28 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
   11c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   11c2a:	f88d 000c 	strb.w	r0, [sp, #12]
   11c2e:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
   11c32:	a801      	add	r0, sp, #4
   11c34:	4b03      	ldr	r3, [pc, #12]	; (11c44 <usbdc_xfer+0x1c>)
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
   11c36:	e9cd 1201 	strd	r1, r2, [sp, #4]
	return usb_d_ep_transfer(&xfer);
   11c3a:	4798      	blx	r3
}
   11c3c:	b005      	add	sp, #20
   11c3e:	f85d fb04 	ldr.w	pc, [sp], #4
   11c42:	bf00      	nop
   11c44:	0000e9c9 	.word	0x0000e9c9

00011c48 <usbdc_cb_ctl_req>:
{
   11c48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11c4c:	4ba6      	ldr	r3, [pc, #664]	; (11ee8 <usbdc_cb_ctl_req+0x2a0>)
   11c4e:	2200      	movs	r2, #0
{
   11c50:	4605      	mov	r5, r0
   11c52:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
   11c54:	4798      	blx	r3
   11c56:	1c43      	adds	r3, r0, #1
   11c58:	d008      	beq.n	11c6c <usbdc_cb_ctl_req+0x24>
   11c5a:	2801      	cmp	r0, #1
   11c5c:	d034      	beq.n	11cc8 <usbdc_cb_ctl_req+0x80>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
   11c5e:	7823      	ldrb	r3, [r4, #0]
   11c60:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
   11c64:	d004      	beq.n	11c70 <usbdc_cb_ctl_req+0x28>
   11c66:	2a80      	cmp	r2, #128	; 0x80
   11c68:	f000 80ca 	beq.w	11e00 <usbdc_cb_ctl_req+0x1b8>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11c6c:	2000      	movs	r0, #0
   11c6e:	e02b      	b.n	11cc8 <usbdc_cb_ctl_req+0x80>
	switch (req->bRequest) {
   11c70:	7862      	ldrb	r2, [r4, #1]
   11c72:	3a01      	subs	r2, #1
   11c74:	2a0a      	cmp	r2, #10
   11c76:	d8f9      	bhi.n	11c6c <usbdc_cb_ctl_req+0x24>
   11c78:	a101      	add	r1, pc, #4	; (adr r1, 11c80 <usbdc_cb_ctl_req+0x38>)
   11c7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   11c7e:	bf00      	nop
   11c80:	00011d33 	.word	0x00011d33
   11c84:	00011c6d 	.word	0x00011c6d
   11c88:	00011d59 	.word	0x00011d59
   11c8c:	00011c6d 	.word	0x00011c6d
   11c90:	00011cb7 	.word	0x00011cb7
   11c94:	00011c6d 	.word	0x00011c6d
   11c98:	00011c6d 	.word	0x00011c6d
   11c9c:	00011c6d 	.word	0x00011c6d
   11ca0:	00011cad 	.word	0x00011cad
   11ca4:	00011c6d 	.word	0x00011c6d
   11ca8:	00011d73 	.word	0x00011d73
		if (!usbdc_set_config(req->wValue)) {
   11cac:	8862      	ldrh	r2, [r4, #2]
   11cae:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
   11cb0:	b96a      	cbnz	r2, 11cce <usbdc_cb_ctl_req+0x86>
		usbdc_unconfig();
   11cb2:	4b8e      	ldr	r3, [pc, #568]	; (11eec <usbdc_cb_ctl_req+0x2a4>)
   11cb4:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
   11cb6:	2200      	movs	r2, #0
   11cb8:	2301      	movs	r3, #1
   11cba:	4611      	mov	r1, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11cbc:	4c8c      	ldr	r4, [pc, #560]	; (11ef0 <usbdc_cb_ctl_req+0x2a8>)
   11cbe:	4628      	mov	r0, r5
   11cc0:	47a0      	blx	r4
   11cc2:	fab0 f080 	clz	r0, r0
   11cc6:	0940      	lsrs	r0, r0, #5
}
   11cc8:	b004      	add	sp, #16
   11cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
   11cce:	4c89      	ldr	r4, [pc, #548]	; (11ef4 <usbdc_cb_ctl_req+0x2ac>)
   11cd0:	6823      	ldr	r3, [r4, #0]
   11cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
   11cd6:	4b88      	ldr	r3, [pc, #544]	; (11ef8 <usbdc_cb_ctl_req+0x2b0>)
   11cd8:	4798      	blx	r3
	if (NULL == cfg_desc) {
   11cda:	2800      	cmp	r0, #0
   11cdc:	d0c6      	beq.n	11c6c <usbdc_cb_ctl_req+0x24>
   11cde:	78c2      	ldrb	r2, [r0, #3]
   11ce0:	7883      	ldrb	r3, [r0, #2]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11ce2:	4f86      	ldr	r7, [pc, #536]	; (11efc <usbdc_cb_ctl_req+0x2b4>)
   11ce4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
   11ce8:	fa10 f183 	uxtah	r1, r0, r3
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11cec:	2204      	movs	r2, #4
	desc.eod  = cfg_desc + total_len;
   11cee:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11cf0:	47b8      	blx	r7
	uint8_t                 last_iface = 0xFF;
   11cf2:	23ff      	movs	r3, #255	; 0xff
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
   11cf4:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
   11cf6:	9a02      	ldr	r2, [sp, #8]
   11cf8:	2a00      	cmp	r2, #0
   11cfa:	d0dc      	beq.n	11cb6 <usbdc_cb_ctl_req+0x6e>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
   11cfc:	f892 8002 	ldrb.w	r8, [r2, #2]
   11d00:	4598      	cmp	r8, r3
   11d02:	d014      	beq.n	11d2e <usbdc_cb_ctl_req+0xe6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
   11d04:	6926      	ldr	r6, [r4, #16]
			while (NULL != func) {
   11d06:	b94e      	cbnz	r6, 11d1c <usbdc_cb_ctl_req+0xd4>
		desc.sod = usb_desc_next(desc.sod);
   11d08:	9802      	ldr	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11d0a:	9903      	ldr	r1, [sp, #12]
	return (desc + usb_desc_len(desc));
   11d0c:	7803      	ldrb	r3, [r0, #0]
   11d0e:	2204      	movs	r2, #4
   11d10:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
   11d12:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11d14:	47b8      	blx	r7
   11d16:	4643      	mov	r3, r8
   11d18:	9002      	str	r0, [sp, #8]
   11d1a:	e7ec      	b.n	11cf6 <usbdc_cb_ctl_req+0xae>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
   11d1c:	6873      	ldr	r3, [r6, #4]
   11d1e:	aa02      	add	r2, sp, #8
   11d20:	2100      	movs	r1, #0
   11d22:	4630      	mov	r0, r6
   11d24:	4798      	blx	r3
   11d26:	2800      	cmp	r0, #0
   11d28:	d0ee      	beq.n	11d08 <usbdc_cb_ctl_req+0xc0>
					func = func->next;
   11d2a:	6836      	ldr	r6, [r6, #0]
   11d2c:	e7eb      	b.n	11d06 <usbdc_cb_ctl_req+0xbe>
   11d2e:	4698      	mov	r8, r3
   11d30:	e7ea      	b.n	11d08 <usbdc_cb_ctl_req+0xc0>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11d32:	2b02      	cmp	r3, #2
   11d34:	d19a      	bne.n	11c6c <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
   11d36:	88e2      	ldrh	r2, [r4, #6]
   11d38:	2a00      	cmp	r2, #0
   11d3a:	d197      	bne.n	11c6c <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
   11d3c:	88a0      	ldrh	r0, [r4, #4]
   11d3e:	4b70      	ldr	r3, [pc, #448]	; (11f00 <usbdc_cb_ctl_req+0x2b8>)
   11d40:	9201      	str	r2, [sp, #4]
   11d42:	4611      	mov	r1, r2
   11d44:	b2c0      	uxtb	r0, r0
   11d46:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11d48:	9a01      	ldr	r2, [sp, #4]
   11d4a:	2301      	movs	r3, #1
		usbdc_xfer(ep, NULL, 0, true);
   11d4c:	4611      	mov	r1, r2
   11d4e:	4628      	mov	r0, r5
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11d50:	4c67      	ldr	r4, [pc, #412]	; (11ef0 <usbdc_cb_ctl_req+0x2a8>)
   11d52:	47a0      	blx	r4
			return true;
   11d54:	2001      	movs	r0, #1
   11d56:	e7b7      	b.n	11cc8 <usbdc_cb_ctl_req+0x80>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11d58:	2b02      	cmp	r3, #2
   11d5a:	d187      	bne.n	11c6c <usbdc_cb_ctl_req+0x24>
		if (req->wLength != 0) {
   11d5c:	88e6      	ldrh	r6, [r4, #6]
   11d5e:	2e00      	cmp	r6, #0
   11d60:	d184      	bne.n	11c6c <usbdc_cb_ctl_req+0x24>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
   11d62:	88a0      	ldrh	r0, [r4, #4]
   11d64:	4b66      	ldr	r3, [pc, #408]	; (11f00 <usbdc_cb_ctl_req+0x2b8>)
   11d66:	2101      	movs	r1, #1
   11d68:	b2c0      	uxtb	r0, r0
   11d6a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
   11d6c:	2301      	movs	r3, #1
   11d6e:	4632      	mov	r2, r6
   11d70:	e7ec      	b.n	11d4c <usbdc_cb_ctl_req+0x104>
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11d72:	4d60      	ldr	r5, [pc, #384]	; (11ef4 <usbdc_cb_ctl_req+0x2ac>)
		return usbdc_set_interface(req->wValue, req->wIndex);
   11d74:	8866      	ldrh	r6, [r4, #2]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11d76:	682b      	ldr	r3, [r5, #0]
   11d78:	7eea      	ldrb	r2, [r5, #27]
		return usbdc_set_interface(req->wValue, req->wIndex);
   11d7a:	88a7      	ldrh	r7, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
   11d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
   11d80:	4b5d      	ldr	r3, [pc, #372]	; (11ef8 <usbdc_cb_ctl_req+0x2b0>)
   11d82:	4798      	blx	r3
	if (NULL == ifc) {
   11d84:	2800      	cmp	r0, #0
   11d86:	f43f af71 	beq.w	11c6c <usbdc_cb_ctl_req+0x24>
	desc.sod = ifc;
   11d8a:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
   11d8c:	78c2      	ldrb	r2, [r0, #3]
   11d8e:	7883      	ldrb	r3, [r0, #2]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   11d90:	4c5a      	ldr	r4, [pc, #360]	; (11efc <usbdc_cb_ctl_req+0x2b4>)
   11d92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
   11d96:	fa10 f183 	uxtah	r1, r0, r3
   11d9a:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
   11d9c:	2204      	movs	r2, #4
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11d9e:	47a0      	blx	r4
		if (NULL == ifc) {
   11da0:	2800      	cmp	r0, #0
   11da2:	f43f af63 	beq.w	11c6c <usbdc_cb_ctl_req+0x24>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
   11da6:	7883      	ldrb	r3, [r0, #2]
   11da8:	42bb      	cmp	r3, r7
   11daa:	d110      	bne.n	11dce <usbdc_cb_ctl_req+0x186>
   11dac:	78c3      	ldrb	r3, [r0, #3]
   11dae:	42b3      	cmp	r3, r6
   11db0:	d10d      	bne.n	11dce <usbdc_cb_ctl_req+0x186>
	func     = (struct usbdf_driver *)usbdc.func_list.head;
   11db2:	692c      	ldr	r4, [r5, #16]
	desc.sod = ifc;
   11db4:	9002      	str	r0, [sp, #8]
	while (NULL != func) {
   11db6:	2c00      	cmp	r4, #0
   11db8:	f43f af58 	beq.w	11c6c <usbdc_cb_ctl_req+0x24>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
   11dbc:	2101      	movs	r1, #1
   11dbe:	6863      	ldr	r3, [r4, #4]
   11dc0:	aa02      	add	r2, sp, #8
   11dc2:	4620      	mov	r0, r4
   11dc4:	4798      	blx	r3
   11dc6:	4601      	mov	r1, r0
   11dc8:	b140      	cbz	r0, 11ddc <usbdc_cb_ctl_req+0x194>
			func = func->next;
   11dca:	6824      	ldr	r4, [r4, #0]
   11dcc:	e7f3      	b.n	11db6 <usbdc_cb_ctl_req+0x16e>
		desc.sod = usb_desc_next(desc.sod);
   11dce:	9802      	ldr	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11dd0:	9903      	ldr	r1, [sp, #12]
	return (desc + usb_desc_len(desc));
   11dd2:	7803      	ldrb	r3, [r0, #0]
   11dd4:	4418      	add	r0, r3
		desc.sod = usb_desc_next(desc.sod);
   11dd6:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
   11dd8:	2204      	movs	r2, #4
   11dda:	e7e0      	b.n	11d9e <usbdc_cb_ctl_req+0x156>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
   11ddc:	6863      	ldr	r3, [r4, #4]
   11dde:	aa02      	add	r2, sp, #8
   11de0:	4620      	mov	r0, r4
   11de2:	4798      	blx	r3
   11de4:	2800      	cmp	r0, #0
   11de6:	f47f af41 	bne.w	11c6c <usbdc_cb_ctl_req+0x24>
			if (alt_set) {
   11dea:	b126      	cbz	r6, 11df6 <usbdc_cb_ctl_req+0x1ae>
				usbdc.ifc_alt_map |= 1 << ifc_id;
   11dec:	2301      	movs	r3, #1
   11dee:	40bb      	lsls	r3, r7
   11df0:	7f6f      	ldrb	r7, [r5, #29]
   11df2:	431f      	orrs	r7, r3
   11df4:	776f      	strb	r7, [r5, #29]
			usbdc_xfer(0, NULL, 0, 0);
   11df6:	2300      	movs	r3, #0
   11df8:	461a      	mov	r2, r3
   11dfa:	4619      	mov	r1, r3
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11dfc:	4618      	mov	r0, r3
   11dfe:	e7a7      	b.n	11d50 <usbdc_cb_ctl_req+0x108>
	switch (req->bRequest) {
   11e00:	7862      	ldrb	r2, [r4, #1]
   11e02:	2a0a      	cmp	r2, #10
   11e04:	f63f af32 	bhi.w	11c6c <usbdc_cb_ctl_req+0x24>
   11e08:	a101      	add	r1, pc, #4	; (adr r1, 11e10 <usbdc_cb_ctl_req+0x1c8>)
   11e0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   11e0e:	bf00      	nop
   11e10:	00011f09 	.word	0x00011f09
   11e14:	00011c6d 	.word	0x00011c6d
   11e18:	00011c6d 	.word	0x00011c6d
   11e1c:	00011c6d 	.word	0x00011c6d
   11e20:	00011c6d 	.word	0x00011c6d
   11e24:	00011c6d 	.word	0x00011c6d
   11e28:	00011e3d 	.word	0x00011e3d
   11e2c:	00011c6d 	.word	0x00011c6d
   11e30:	00011ed9 	.word	0x00011ed9
   11e34:	00011c6d 	.word	0x00011c6d
   11e38:	00011f37 	.word	0x00011f37
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11e3c:	8863      	ldrh	r3, [r4, #2]
   11e3e:	0a19      	lsrs	r1, r3, #8
	switch (type) {
   11e40:	2902      	cmp	r1, #2
	uint8_t type = (uint8_t)(req->wValue >> 8);
   11e42:	460a      	mov	r2, r1
	switch (type) {
   11e44:	d016      	beq.n	11e74 <usbdc_cb_ctl_req+0x22c>
   11e46:	2903      	cmp	r1, #3
   11e48:	d031      	beq.n	11eae <usbdc_cb_ctl_req+0x266>
   11e4a:	2901      	cmp	r1, #1
   11e4c:	f47f af0e 	bne.w	11c6c <usbdc_cb_ctl_req+0x24>
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11e50:	4b28      	ldr	r3, [pc, #160]	; (11ef4 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   11e52:	88e4      	ldrh	r4, [r4, #6]
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
   11e54:	681b      	ldr	r3, [r3, #0]
   11e56:	e9d3 0100 	ldrd	r0, r1, [r3]
   11e5a:	4b28      	ldr	r3, [pc, #160]	; (11efc <usbdc_cb_ctl_req+0x2b4>)
   11e5c:	4798      	blx	r3
	if (!dev_desc) {
   11e5e:	4601      	mov	r1, r0
   11e60:	2800      	cmp	r0, #0
   11e62:	f43f af03 	beq.w	11c6c <usbdc_cb_ctl_req+0x24>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
   11e66:	2c12      	cmp	r4, #18
   11e68:	4622      	mov	r2, r4
   11e6a:	f04f 0300 	mov.w	r3, #0
   11e6e:	bf28      	it	cs
   11e70:	2212      	movcs	r2, #18
   11e72:	e723      	b.n	11cbc <usbdc_cb_ctl_req+0x74>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11e74:	4a1f      	ldr	r2, [pc, #124]	; (11ef4 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   11e76:	88e4      	ldrh	r4, [r4, #6]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11e78:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11e7a:	7f16      	ldrb	r6, [r2, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
   11e7c:	1c5a      	adds	r2, r3, #1
   11e7e:	e9d0 0100 	ldrd	r0, r1, [r0]
   11e82:	4b1d      	ldr	r3, [pc, #116]	; (11ef8 <usbdc_cb_ctl_req+0x2b0>)
   11e84:	b2d2      	uxtb	r2, r2
   11e86:	4798      	blx	r3
	if (NULL == cfg_desc) {
   11e88:	4601      	mov	r1, r0
   11e8a:	2800      	cmp	r0, #0
   11e8c:	f43f aeee 	beq.w	11c6c <usbdc_cb_ctl_req+0x24>
	return (ptr[0] + (ptr[1] << 8));
   11e90:	78c3      	ldrb	r3, [r0, #3]
   11e92:	7882      	ldrb	r2, [r0, #2]
   11e94:	eb02 2203 	add.w	r2, r2, r3, lsl #8
   11e98:	b292      	uxth	r2, r2
	if (length <= total_len) {
   11e9a:	4294      	cmp	r4, r2
   11e9c:	d91a      	bls.n	11ed4 <usbdc_cb_ctl_req+0x28c>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11e9e:	3e01      	subs	r6, #1
   11ea0:	4226      	tst	r6, r4
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11ea2:	bf0c      	ite	eq
   11ea4:	2301      	moveq	r3, #1
   11ea6:	2300      	movne	r3, #0
   11ea8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
   11eaa:	4622      	mov	r2, r4
   11eac:	e706      	b.n	11cbc <usbdc_cb_ctl_req+0x74>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11eae:	4a11      	ldr	r2, [pc, #68]	; (11ef4 <usbdc_cb_ctl_req+0x2ac>)
	uint16_t length   = req->wLength;
   11eb0:	88e4      	ldrh	r4, [r4, #6]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11eb2:	6810      	ldr	r0, [r2, #0]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11eb4:	7f16      	ldrb	r6, [r2, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
   11eb6:	e9d0 0100 	ldrd	r0, r1, [r0]
   11eba:	b2da      	uxtb	r2, r3
   11ebc:	4b11      	ldr	r3, [pc, #68]	; (11f04 <usbdc_cb_ctl_req+0x2bc>)
   11ebe:	4798      	blx	r3
	if (NULL == str_desc) {
   11ec0:	4601      	mov	r1, r0
   11ec2:	2800      	cmp	r0, #0
   11ec4:	f43f aed2 	beq.w	11c6c <usbdc_cb_ctl_req+0x24>
	if (length <= str_desc[0]) {
   11ec8:	7802      	ldrb	r2, [r0, #0]
   11eca:	4294      	cmp	r4, r2
   11ecc:	d902      	bls.n	11ed4 <usbdc_cb_ctl_req+0x28c>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
   11ece:	1e73      	subs	r3, r6, #1
   11ed0:	4223      	tst	r3, r4
   11ed2:	e7e6      	b.n	11ea2 <usbdc_cb_ctl_req+0x25a>
		need_zlp = false;
   11ed4:	2300      	movs	r3, #0
   11ed6:	e7e8      	b.n	11eaa <usbdc_cb_ctl_req+0x262>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
   11ed8:	4906      	ldr	r1, [pc, #24]	; (11ef4 <usbdc_cb_ctl_req+0x2ac>)
   11eda:	694b      	ldr	r3, [r1, #20]
   11edc:	7eca      	ldrb	r2, [r1, #27]
   11ede:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
   11ee0:	2300      	movs	r3, #0
   11ee2:	2201      	movs	r2, #1
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11ee4:	6949      	ldr	r1, [r1, #20]
   11ee6:	e732      	b.n	11d4e <usbdc_cb_ctl_req+0x106>
   11ee8:	00011afd 	.word	0x00011afd
   11eec:	00011ac1 	.word	0x00011ac1
   11ef0:	00011c29 	.word	0x00011c29
   11ef4:	200010a4 	.word	0x200010a4
   11ef8:	0000b6cd 	.word	0x0000b6cd
   11efc:	0000b695 	.word	0x0000b695
   11f00:	0000eb0d 	.word	0x0000eb0d
   11f04:	0000b709 	.word	0x0000b709
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
   11f08:	f003 011f 	and.w	r1, r3, #31
   11f0c:	f013 031e 	ands.w	r3, r3, #30
   11f10:	d00b      	beq.n	11f2a <usbdc_cb_ctl_req+0x2e2>
   11f12:	2902      	cmp	r1, #2
   11f14:	f47f aeaa 	bne.w	11c6c <usbdc_cb_ctl_req+0x24>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
   11f18:	88a0      	ldrh	r0, [r4, #4]
   11f1a:	4b17      	ldr	r3, [pc, #92]	; (11f78 <usbdc_cb_ctl_req+0x330>)
   11f1c:	b2c0      	uxtb	r0, r0
   11f1e:	4798      	blx	r3
		if (st < 0) {
   11f20:	1e03      	subs	r3, r0, #0
   11f22:	f6ff aea3 	blt.w	11c6c <usbdc_cb_ctl_req+0x24>
		st = st & 0x1;
   11f26:	f003 0301 	and.w	r3, r3, #1
	memcpy(usbdc.ctrl_buf, &st, 2);
   11f2a:	4914      	ldr	r1, [pc, #80]	; (11f7c <usbdc_cb_ctl_req+0x334>)
   11f2c:	694a      	ldr	r2, [r1, #20]
   11f2e:	8013      	strh	r3, [r2, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
   11f30:	2300      	movs	r3, #0
   11f32:	2202      	movs	r2, #2
   11f34:	e7d6      	b.n	11ee4 <usbdc_cb_ctl_req+0x29c>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
   11f36:	4911      	ldr	r1, [pc, #68]	; (11f7c <usbdc_cb_ctl_req+0x334>)
   11f38:	88a2      	ldrh	r2, [r4, #4]
   11f3a:	7f4b      	ldrb	r3, [r1, #29]
   11f3c:	4113      	asrs	r3, r2
   11f3e:	f013 0301 	ands.w	r3, r3, #1
   11f42:	460e      	mov	r6, r1
   11f44:	d00c      	beq.n	11f60 <usbdc_cb_ctl_req+0x318>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
   11f46:	690d      	ldr	r5, [r1, #16]
	while (NULL != func) {
   11f48:	2d00      	cmp	r5, #0
   11f4a:	f43f ae8f 	beq.w	11c6c <usbdc_cb_ctl_req+0x24>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
   11f4e:	686b      	ldr	r3, [r5, #4]
   11f50:	4622      	mov	r2, r4
   11f52:	2102      	movs	r1, #2
   11f54:	4628      	mov	r0, r5
   11f56:	4798      	blx	r3
   11f58:	2800      	cmp	r0, #0
   11f5a:	da06      	bge.n	11f6a <usbdc_cb_ctl_req+0x322>
			func = func->next;
   11f5c:	682d      	ldr	r5, [r5, #0]
   11f5e:	e7f3      	b.n	11f48 <usbdc_cb_ctl_req+0x300>
		usbdc.ctrl_buf[0] = 0;
   11f60:	694a      	ldr	r2, [r1, #20]
   11f62:	7013      	strb	r3, [r2, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11f64:	6949      	ldr	r1, [r1, #20]
   11f66:	2201      	movs	r2, #1
   11f68:	e748      	b.n	11dfc <usbdc_cb_ctl_req+0x1b4>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
   11f6a:	6973      	ldr	r3, [r6, #20]
   11f6c:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
   11f6e:	6971      	ldr	r1, [r6, #20]
   11f70:	2300      	movs	r3, #0
   11f72:	2201      	movs	r2, #1
   11f74:	e742      	b.n	11dfc <usbdc_cb_ctl_req+0x1b4>
   11f76:	bf00      	nop
   11f78:	0000eb0d 	.word	0x0000eb0d
   11f7c:	200010a4 	.word	0x200010a4

00011f80 <usbdc_register_handler>:
/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
	switch (type) {
   11f80:	2801      	cmp	r0, #1
   11f82:	d005      	beq.n	11f90 <usbdc_register_handler+0x10>
   11f84:	2802      	cmp	r0, #2
   11f86:	d005      	beq.n	11f94 <usbdc_register_handler+0x14>
   11f88:	b930      	cbnz	r0, 11f98 <usbdc_register_handler+0x18>
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
   11f8a:	4804      	ldr	r0, [pc, #16]	; (11f9c <usbdc_register_handler+0x1c>)
		break;
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
		break;
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   11f8c:	4b04      	ldr	r3, [pc, #16]	; (11fa0 <usbdc_register_handler+0x20>)
   11f8e:	4718      	bx	r3
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
   11f90:	4804      	ldr	r0, [pc, #16]	; (11fa4 <usbdc_register_handler+0x24>)
   11f92:	e7fb      	b.n	11f8c <usbdc_register_handler+0xc>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
   11f94:	4804      	ldr	r0, [pc, #16]	; (11fa8 <usbdc_register_handler+0x28>)
   11f96:	e7f9      	b.n	11f8c <usbdc_register_handler+0xc>
		break;
	default:
		break;
	}
}
   11f98:	4770      	bx	lr
   11f9a:	bf00      	nop
   11f9c:	200010a8 	.word	0x200010a8
   11fa0:	0000f399 	.word	0x0000f399
   11fa4:	200010ac 	.word	0x200010ac
   11fa8:	200010b0 	.word	0x200010b0

00011fac <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
   11fac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
   11fae:	4604      	mov	r4, r0
   11fb0:	3800      	subs	r0, #0
   11fb2:	bf18      	it	ne
   11fb4:	2001      	movne	r0, #1
   11fb6:	490c      	ldr	r1, [pc, #48]	; (11fe8 <usbdc_init+0x3c>)
   11fb8:	4b0c      	ldr	r3, [pc, #48]	; (11fec <usbdc_init+0x40>)
   11fba:	f240 3255 	movw	r2, #853	; 0x355
   11fbe:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
   11fc0:	4b0b      	ldr	r3, [pc, #44]	; (11ff0 <usbdc_init+0x44>)
   11fc2:	4798      	blx	r3
	if (rc < 0) {
   11fc4:	2800      	cmp	r0, #0
   11fc6:	db0e      	blt.n	11fe6 <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
   11fc8:	4b0a      	ldr	r3, [pc, #40]	; (11ff4 <usbdc_init+0x48>)
   11fca:	4d0b      	ldr	r5, [pc, #44]	; (11ff8 <usbdc_init+0x4c>)
   11fcc:	2220      	movs	r2, #32
   11fce:	4618      	mov	r0, r3
   11fd0:	2100      	movs	r1, #0
   11fd2:	47a8      	blx	r5
	usbdc.ctrl_buf = ctrl_buf;
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   11fd4:	4909      	ldr	r1, [pc, #36]	; (11ffc <usbdc_init+0x50>)
	usbdc.ctrl_buf = ctrl_buf;
   11fd6:	6144      	str	r4, [r0, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
   11fd8:	4c09      	ldr	r4, [pc, #36]	; (12000 <usbdc_init+0x54>)
   11fda:	2000      	movs	r0, #0
   11fdc:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
   11fde:	2001      	movs	r0, #1
   11fe0:	4908      	ldr	r1, [pc, #32]	; (12004 <usbdc_init+0x58>)
   11fe2:	47a0      	blx	r4

	return 0;
   11fe4:	2000      	movs	r0, #0
}
   11fe6:	bd38      	pop	{r3, r4, r5, pc}
   11fe8:	00016200 	.word	0x00016200
   11fec:	0000d415 	.word	0x0000d415
   11ff0:	0000e869 	.word	0x0000e869
   11ff4:	200010a4 	.word	0x200010a4
   11ff8:	00012e05 	.word	0x00012e05
   11ffc:	00011b35 	.word	0x00011b35
   12000:	0000e8d1 	.word	0x0000e8d1
   12004:	00011c11 	.word	0x00011c11

00012008 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
   12008:	4601      	mov	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
   1200a:	4b01      	ldr	r3, [pc, #4]	; (12010 <usbdc_register_function+0x8>)
   1200c:	4801      	ldr	r0, [pc, #4]	; (12014 <usbdc_register_function+0xc>)
   1200e:	4718      	bx	r3
   12010:	0000f399 	.word	0x0000f399
   12014:	200010b4 	.word	0x200010b4

00012018 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
   12018:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
   1201a:	4b0a      	ldr	r3, [pc, #40]	; (12044 <usbdc_start+0x2c>)
   1201c:	7e9c      	ldrb	r4, [r3, #26]
   1201e:	b954      	cbnz	r4, 12036 <usbdc_start+0x1e>
		return ERR_BUSY;
	}

	if (desces) {
   12020:	b160      	cbz	r0, 1203c <usbdc_start+0x24>
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
   12022:	6802      	ldr	r2, [r0, #0]
		usbdc.desces.ls_fs = desces;
   12024:	6018      	str	r0, [r3, #0]
	usbdc.ctrl_size = desces->sod[7];
   12026:	79d2      	ldrb	r2, [r2, #7]
   12028:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
   1202a:	2201      	movs	r2, #1
   1202c:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
   1202e:	4b06      	ldr	r3, [pc, #24]	; (12048 <usbdc_start+0x30>)
   12030:	4798      	blx	r3
	return ERR_NONE;
   12032:	4620      	mov	r0, r4
}
   12034:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
   12036:	f06f 0003 	mvn.w	r0, #3
   1203a:	e7fb      	b.n	12034 <usbdc_start+0x1c>
		return ERR_BAD_DATA;
   1203c:	f06f 0008 	mvn.w	r0, #8
   12040:	e7f8      	b.n	12034 <usbdc_start+0x1c>
   12042:	bf00      	nop
   12044:	200010a4 	.word	0x200010a4
   12048:	0000e8d9 	.word	0x0000e8d9

0001204c <usbdc_attach>:
/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
	usb_d_attach();
   1204c:	4b00      	ldr	r3, [pc, #0]	; (12050 <usbdc_attach+0x4>)
   1204e:	4718      	bx	r3
   12050:	0000e8e1 	.word	0x0000e8e1

00012054 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
   12054:	4b01      	ldr	r3, [pc, #4]	; (1205c <usbdc_get_ctrl_buffer+0x8>)
   12056:	6958      	ldr	r0, [r3, #20]
   12058:	4770      	bx	lr
   1205a:	bf00      	nop
   1205c:	200010a4 	.word	0x200010a4

00012060 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
   12060:	4b03      	ldr	r3, [pc, #12]	; (12070 <usbdc_get_state+0x10>)
   12062:	7e98      	ldrb	r0, [r3, #26]
   12064:	f010 0f10 	tst.w	r0, #16
		return USBD_S_SUSPEND;
	}
	return usbdc.state;
}
   12068:	bf18      	it	ne
   1206a:	2010      	movne	r0, #16
   1206c:	4770      	bx	lr
   1206e:	bf00      	nop
   12070:	200010a4 	.word	0x200010a4

00012074 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
   12074:	6903      	ldr	r3, [r0, #16]
   12076:	420b      	tst	r3, r1
   12078:	d1fc      	bne.n	12074 <hri_tc_wait_for_sync>
	};
}
   1207a:	4770      	bx	lr

0001207c <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
   1207c:	68c0      	ldr	r0, [r0, #12]
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
   1207e:	6803      	ldr	r3, [r0, #0]
   12080:	f043 0302 	orr.w	r3, r3, #2
   12084:	6003      	str	r3, [r0, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12086:	2103      	movs	r1, #3
   12088:	4b00      	ldr	r3, [pc, #0]	; (1208c <_tc_timer_start+0x10>)
   1208a:	4718      	bx	r3
   1208c:	00012075 	.word	0x00012075

00012090 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
   12090:	68c0      	ldr	r0, [r0, #12]
{
   12092:	b508      	push	{r3, lr}
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   12094:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   12096:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   1209a:	2b02      	cmp	r3, #2
   1209c:	d104      	bne.n	120a8 <_tc_timer_get_period+0x18>
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tccount32_cc_reg_t hri_tccount32_read_CC_reg(const void *const hw, uint8_t index)
{
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   1209e:	4b0e      	ldr	r3, [pc, #56]	; (120d8 <_tc_timer_get_period+0x48>)
   120a0:	21c0      	movs	r1, #192	; 0xc0
   120a2:	4798      	blx	r3
	return ((Tc *)hw)->COUNT32.CC[index].reg;
   120a4:	69c0      	ldr	r0, [r0, #28]
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
		return hri_tccount8_read_PER_reg(hw);
	}

	return 0;
}
   120a6:	bd08      	pop	{r3, pc}
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   120a8:	6803      	ldr	r3, [r0, #0]
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   120aa:	f013 0f0c 	tst.w	r3, #12
   120ae:	d105      	bne.n	120bc <_tc_timer_get_period+0x2c>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   120b0:	4b09      	ldr	r3, [pc, #36]	; (120d8 <_tc_timer_get_period+0x48>)
   120b2:	21c0      	movs	r1, #192	; 0xc0
   120b4:	4798      	blx	r3
	return ((Tc *)hw)->COUNT16.CC[index].reg;
   120b6:	8b80      	ldrh	r0, [r0, #28]
   120b8:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
   120ba:	e7f4      	b.n	120a6 <_tc_timer_get_period+0x16>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   120bc:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   120be:	f3c3 0381 	ubfx	r3, r3, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   120c2:	2b01      	cmp	r3, #1
   120c4:	d105      	bne.n	120d2 <_tc_timer_get_period+0x42>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   120c6:	4b04      	ldr	r3, [pc, #16]	; (120d8 <_tc_timer_get_period+0x48>)
   120c8:	2120      	movs	r1, #32
   120ca:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.PER.reg;
   120cc:	7ec0      	ldrb	r0, [r0, #27]
   120ce:	b2c0      	uxtb	r0, r0
		return hri_tccount8_read_PER_reg(hw);
   120d0:	e7e9      	b.n	120a6 <_tc_timer_get_period+0x16>
	return 0;
   120d2:	2000      	movs	r0, #0
   120d4:	e7e7      	b.n	120a6 <_tc_timer_get_period+0x16>
   120d6:	bf00      	nop
   120d8:	00012075 	.word	0x00012075

000120dc <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
   120dc:	b508      	push	{r3, lr}
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
   120de:	68c0      	ldr	r0, [r0, #12]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   120e0:	4b03      	ldr	r3, [pc, #12]	; (120f0 <_tc_timer_is_started+0x14>)
   120e2:	2103      	movs	r1, #3
   120e4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   120e6:	6800      	ldr	r0, [r0, #0]
}
   120e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   120ec:	bd08      	pop	{r3, pc}
   120ee:	bf00      	nop
   120f0:	00012075 	.word	0x00012075

000120f4 <tc_interrupt_handler>:
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
	void *const hw = device->hw;
   120f4:	68c2      	ldr	r2, [r0, #12]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
   120f6:	7a91      	ldrb	r1, [r2, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
   120f8:	07c9      	lsls	r1, r1, #31
   120fa:	d503      	bpl.n	12104 <tc_interrupt_handler+0x10>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
   120fc:	2101      	movs	r1, #1
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
   120fe:	6803      	ldr	r3, [r0, #0]
   12100:	7291      	strb	r1, [r2, #10]
   12102:	4718      	bx	r3
	}
}
   12104:	4770      	bx	lr
	...

00012108 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
   12108:	b570      	push	{r4, r5, r6, lr}
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   1210a:	4d15      	ldr	r5, [pc, #84]	; (12160 <get_tc_index+0x58>)
{
   1210c:	4606      	mov	r6, r0
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   1210e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   12110:	b088      	sub	sp, #32
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
   12112:	466c      	mov	r4, sp
   12114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12116:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1211a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   1211e:	466a      	mov	r2, sp
   12120:	2300      	movs	r3, #0
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
   12122:	f852 1b04 	ldr.w	r1, [r2], #4
   12126:	42b1      	cmp	r1, r6
   12128:	d104      	bne.n	12134 <get_tc_index+0x2c>
			return i;
   1212a:	b2d8      	uxtb	r0, r3
		if (_tcs[i].number == index) {
   1212c:	b93b      	cbnz	r3, 1213e <get_tc_index+0x36>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
   1212e:	4618      	mov	r0, r3
			return i;
   12130:	b240      	sxtb	r0, r0
   12132:	e012      	b.n	1215a <get_tc_index+0x52>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
   12134:	3301      	adds	r3, #1
   12136:	2b08      	cmp	r3, #8
   12138:	d1f3      	bne.n	12122 <get_tc_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
   1213a:	2000      	movs	r0, #0
   1213c:	e7f8      	b.n	12130 <get_tc_index+0x28>
		if (_tcs[i].number == index) {
   1213e:	2801      	cmp	r0, #1
   12140:	d0f6      	beq.n	12130 <get_tc_index+0x28>
   12142:	2802      	cmp	r0, #2
   12144:	d0f4      	beq.n	12130 <get_tc_index+0x28>
   12146:	2803      	cmp	r0, #3
   12148:	d0f2      	beq.n	12130 <get_tc_index+0x28>
	ASSERT(false);
   1214a:	2000      	movs	r0, #0
   1214c:	4905      	ldr	r1, [pc, #20]	; (12164 <get_tc_index+0x5c>)
   1214e:	4b06      	ldr	r3, [pc, #24]	; (12168 <get_tc_index+0x60>)
   12150:	f240 1267 	movw	r2, #359	; 0x167
   12154:	4798      	blx	r3
	return -1;
   12156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1215a:	b008      	add	sp, #32
   1215c:	bd70      	pop	{r4, r5, r6, pc}
   1215e:	bf00      	nop
   12160:	0001622c 	.word	0x0001622c
   12164:	00016216 	.word	0x00016216
   12168:	0000d415 	.word	0x0000d415

0001216c <_tc_timer_set_irq>:
{
   1216c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
   1216e:	4b0a      	ldr	r3, [pc, #40]	; (12198 <_tc_timer_set_irq+0x2c>)
   12170:	68c0      	ldr	r0, [r0, #12]
   12172:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   12174:	4b09      	ldr	r3, [pc, #36]	; (1219c <_tc_timer_set_irq+0x30>)
   12176:	490a      	ldr	r1, [pc, #40]	; (121a0 <_tc_timer_set_irq+0x34>)
	int8_t      i  = get_tc_index(hw);
   12178:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
   1217a:	f44f 7291 	mov.w	r2, #290	; 0x122
   1217e:	2001      	movs	r0, #1
   12180:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
   12182:	4808      	ldr	r0, [pc, #32]	; (121a4 <_tc_timer_set_irq+0x38>)
   12184:	2314      	movs	r3, #20
   12186:	fb03 0404 	mla	r4, r3, r4, r0
   1218a:	4b07      	ldr	r3, [pc, #28]	; (121a8 <_tc_timer_set_irq+0x3c>)
   1218c:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
}
   12190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_irq_set(_tcs[i].irq);
   12194:	4718      	bx	r3
   12196:	bf00      	nop
   12198:	00012109 	.word	0x00012109
   1219c:	0000d415 	.word	0x0000d415
   121a0:	00016216 	.word	0x00016216
   121a4:	0001622c 	.word	0x0001622c
   121a8:	0000b8ed 	.word	0x0000b8ed

000121ac <_tc_timer_stop>:
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
   121ac:	68c0      	ldr	r0, [r0, #12]
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   121ae:	6803      	ldr	r3, [r0, #0]
   121b0:	f023 0302 	bic.w	r3, r3, #2
   121b4:	6003      	str	r3, [r0, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   121b6:	2103      	movs	r1, #3
   121b8:	4b00      	ldr	r3, [pc, #0]	; (121bc <_tc_timer_stop+0x10>)
   121ba:	4718      	bx	r3
   121bc:	00012075 	.word	0x00012075

000121c0 <_tc_timer_deinit>:
{
   121c0:	b570      	push	{r4, r5, r6, lr}
	void *const hw = device->hw;
   121c2:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
   121c4:	4b17      	ldr	r3, [pc, #92]	; (12224 <_tc_timer_deinit+0x64>)
   121c6:	4620      	mov	r0, r4
   121c8:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   121ca:	4b17      	ldr	r3, [pc, #92]	; (12228 <_tc_timer_deinit+0x68>)
   121cc:	4917      	ldr	r1, [pc, #92]	; (1222c <_tc_timer_deinit+0x6c>)
	int8_t      i  = get_tc_index(hw);
   121ce:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
   121d0:	22cd      	movs	r2, #205	; 0xcd
   121d2:	2001      	movs	r0, #1
   121d4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
   121d6:	4816      	ldr	r0, [pc, #88]	; (12230 <_tc_timer_deinit+0x70>)
   121d8:	2314      	movs	r3, #20
   121da:	fb03 0505 	mla	r5, r3, r5, r0
   121de:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   121e2:	2b00      	cmp	r3, #0
   121e4:	db0d      	blt.n	12202 <_tc_timer_deinit+0x42>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   121e6:	095a      	lsrs	r2, r3, #5
   121e8:	2101      	movs	r1, #1
   121ea:	f003 031f 	and.w	r3, r3, #31
   121ee:	fa01 f303 	lsl.w	r3, r1, r3
   121f2:	3220      	adds	r2, #32
   121f4:	490f      	ldr	r1, [pc, #60]	; (12234 <_tc_timer_deinit+0x74>)
   121f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   121fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   121fe:	f3bf 8f6f 	isb	sy
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   12202:	6823      	ldr	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12204:	4a0c      	ldr	r2, [pc, #48]	; (12238 <_tc_timer_deinit+0x78>)
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   12206:	f023 0302 	bic.w	r3, r3, #2
   1220a:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   1220c:	2103      	movs	r1, #3
   1220e:	4620      	mov	r0, r4
   12210:	4790      	blx	r2
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_SWRST;
   12212:	6823      	ldr	r3, [r4, #0]
   12214:	f043 0301 	orr.w	r3, r3, #1
   12218:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
   1221a:	2101      	movs	r1, #1
}
   1221c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12220:	4710      	bx	r2
   12222:	bf00      	nop
   12224:	00012109 	.word	0x00012109
   12228:	0000d415 	.word	0x0000d415
   1222c:	00016216 	.word	0x00016216
   12230:	0001622c 	.word	0x0001622c
   12234:	e000e100 	.word	0xe000e100
   12238:	00012075 	.word	0x00012075

0001223c <_tc_timer_init>:
{
   1223c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int8_t i = get_tc_index(hw);
   12240:	4b51      	ldr	r3, [pc, #324]	; (12388 <_tc_timer_init+0x14c>)
{
   12242:	4607      	mov	r7, r0
	int8_t i = get_tc_index(hw);
   12244:	4608      	mov	r0, r1
{
   12246:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
   12248:	4798      	blx	r3
	ASSERT(ARRAY_SIZE(_tcs));
   1224a:	4b50      	ldr	r3, [pc, #320]	; (1238c <_tc_timer_init+0x150>)
   1224c:	4950      	ldr	r1, [pc, #320]	; (12390 <_tc_timer_init+0x154>)
	device->hw = hw;
   1224e:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
   12250:	22a0      	movs	r2, #160	; 0xa0
	int8_t i = get_tc_index(hw);
   12252:	4606      	mov	r6, r0
	ASSERT(ARRAY_SIZE(_tcs));
   12254:	2001      	movs	r0, #1
   12256:	4798      	blx	r3
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
   12258:	6923      	ldr	r3, [r4, #16]
   1225a:	4a4e      	ldr	r2, [pc, #312]	; (12394 <_tc_timer_init+0x158>)
	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
   1225c:	f013 0f01 	tst.w	r3, #1
   12260:	d112      	bne.n	12288 <_tc_timer_init+0x4c>
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12262:	2103      	movs	r1, #3
   12264:	4620      	mov	r0, r4
   12266:	4790      	blx	r2
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   12268:	6823      	ldr	r3, [r4, #0]
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
   1226a:	079b      	lsls	r3, r3, #30
   1226c:	d507      	bpl.n	1227e <_tc_timer_init+0x42>
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   1226e:	6823      	ldr	r3, [r4, #0]
   12270:	f023 0302 	bic.w	r3, r3, #2
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12274:	2103      	movs	r1, #3
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
   12276:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12278:	4790      	blx	r2
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
   1227a:	2102      	movs	r1, #2
   1227c:	4790      	blx	r2
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
   1227e:	2301      	movs	r3, #1
   12280:	6023      	str	r3, [r4, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   12282:	2103      	movs	r1, #3
   12284:	4620      	mov	r0, r4
   12286:	4790      	blx	r2
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
   12288:	f8df 9124 	ldr.w	r9, [pc, #292]	; 123b0 <_tc_timer_init+0x174>
   1228c:	2514      	movs	r5, #20
   1228e:	fb05 9506 	mla	r5, r5, r6, r9
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
   12292:	2101      	movs	r1, #1
   12294:	4620      	mov	r0, r4
   12296:	4790      	blx	r2
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
   12298:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
   1229c:	f8c4 8000 	str.w	r8, [r4]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
   122a0:	2103      	movs	r1, #3
   122a2:	4790      	blx	r2
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
   122a4:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
   122a8:	73e3      	strb	r3, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
   122aa:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
   122ac:	80e3      	strh	r3, [r4, #6]
	((Tc *)hw)->COUNT16.WAVE.reg = data;
   122ae:	2301      	movs	r3, #1
   122b0:	7323      	strb	r3, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
   122b2:	f008 030c 	and.w	r3, r8, #12
   122b6:	2b08      	cmp	r3, #8
   122b8:	d13b      	bne.n	12332 <_tc_timer_init+0xf6>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
   122ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   122bc:	61e3      	str	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   122be:	21c0      	movs	r1, #192	; 0xc0
   122c0:	4790      	blx	r2
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
   122c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   122c4:	6223      	str	r3, [r4, #32]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   122c6:	21c0      	movs	r1, #192	; 0xc0
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   122c8:	4620      	mov	r0, r4
   122ca:	4790      	blx	r2
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
   122cc:	2301      	movs	r3, #1
   122ce:	7263      	strb	r3, [r4, #9]
	if (hw == TC0) {
   122d0:	4b31      	ldr	r3, [pc, #196]	; (12398 <_tc_timer_init+0x15c>)
   122d2:	429c      	cmp	r4, r3
   122d4:	d146      	bne.n	12364 <_tc_timer_init+0x128>
		_tc0_dev = (struct _timer_device *)dev;
   122d6:	4b31      	ldr	r3, [pc, #196]	; (1239c <_tc_timer_init+0x160>)
   122d8:	601f      	str	r7, [r3, #0]
	NVIC_DisableIRQ(_tcs[i].irq);
   122da:	2314      	movs	r3, #20
   122dc:	fb03 9306 	mla	r3, r3, r6, r9
   122e0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   122e4:	2b00      	cmp	r3, #0
   122e6:	db0d      	blt.n	12304 <_tc_timer_init+0xc8>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   122e8:	095a      	lsrs	r2, r3, #5
   122ea:	2101      	movs	r1, #1
   122ec:	f003 031f 	and.w	r3, r3, #31
   122f0:	fa01 f303 	lsl.w	r3, r1, r3
   122f4:	3220      	adds	r2, #32
   122f6:	492a      	ldr	r1, [pc, #168]	; (123a0 <_tc_timer_init+0x164>)
   122f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
   122fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12300:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
   12304:	2014      	movs	r0, #20
   12306:	fb00 9606 	mla	r6, r0, r6, r9
   1230a:	f9b6 3022 	ldrsh.w	r3, [r6, #34]	; 0x22
  if ((int32_t)(IRQn) >= 0)
   1230e:	2b00      	cmp	r3, #0
   12310:	db0c      	blt.n	1232c <_tc_timer_init+0xf0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12312:	f003 011f 	and.w	r1, r3, #31
   12316:	095b      	lsrs	r3, r3, #5
   12318:	009b      	lsls	r3, r3, #2
   1231a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1231e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   12322:	2201      	movs	r2, #1
   12324:	408a      	lsls	r2, r1
   12326:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1232a:	601a      	str	r2, [r3, #0]
}
   1232c:	2000      	movs	r0, #0
   1232e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
   12332:	b933      	cbnz	r3, 12342 <_tc_timer_init+0x106>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
   12334:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   12336:	83a3      	strh	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   12338:	21c0      	movs	r1, #192	; 0xc0
   1233a:	4790      	blx	r2
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
   1233c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   1233e:	83e3      	strh	r3, [r4, #30]
   12340:	e7c1      	b.n	122c6 <_tc_timer_init+0x8a>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
   12342:	2b04      	cmp	r3, #4
   12344:	d1c2      	bne.n	122cc <_tc_timer_init+0x90>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
   12346:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
	((Tc *)hw)->COUNT8.CC[index].reg = data;
   1234a:	7723      	strb	r3, [r4, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   1234c:	21c0      	movs	r1, #192	; 0xc0
   1234e:	4790      	blx	r2
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
   12350:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
	((Tc *)hw)->COUNT8.CC[index].reg = data;
   12354:	7763      	strb	r3, [r4, #29]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   12356:	21c0      	movs	r1, #192	; 0xc0
   12358:	4790      	blx	r2
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
   1235a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
	((Tc *)hw)->COUNT8.PER.reg = data;
   1235e:	76e3      	strb	r3, [r4, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   12360:	2120      	movs	r1, #32
   12362:	e7b1      	b.n	122c8 <_tc_timer_init+0x8c>
	if (hw == TC1) {
   12364:	4b0f      	ldr	r3, [pc, #60]	; (123a4 <_tc_timer_init+0x168>)
   12366:	429c      	cmp	r4, r3
   12368:	d008      	beq.n	1237c <_tc_timer_init+0x140>
	if (hw == TC2) {
   1236a:	4b0f      	ldr	r3, [pc, #60]	; (123a8 <_tc_timer_init+0x16c>)
   1236c:	429c      	cmp	r4, r3
   1236e:	d008      	beq.n	12382 <_tc_timer_init+0x146>
	if (hw == TC3) {
   12370:	4b0e      	ldr	r3, [pc, #56]	; (123ac <_tc_timer_init+0x170>)
   12372:	429c      	cmp	r4, r3
   12374:	d1b1      	bne.n	122da <_tc_timer_init+0x9e>
		_tc3_dev = (struct _timer_device *)dev;
   12376:	4b09      	ldr	r3, [pc, #36]	; (1239c <_tc_timer_init+0x160>)
   12378:	60df      	str	r7, [r3, #12]
   1237a:	e7ae      	b.n	122da <_tc_timer_init+0x9e>
		_tc1_dev = (struct _timer_device *)dev;
   1237c:	4b07      	ldr	r3, [pc, #28]	; (1239c <_tc_timer_init+0x160>)
   1237e:	605f      	str	r7, [r3, #4]
	if (hw == TC3) {
   12380:	e7ab      	b.n	122da <_tc_timer_init+0x9e>
		_tc2_dev = (struct _timer_device *)dev;
   12382:	4b06      	ldr	r3, [pc, #24]	; (1239c <_tc_timer_init+0x160>)
   12384:	609f      	str	r7, [r3, #8]
	if (hw == TC3) {
   12386:	e7a8      	b.n	122da <_tc_timer_init+0x9e>
   12388:	00012109 	.word	0x00012109
   1238c:	0000d415 	.word	0x0000d415
   12390:	00016216 	.word	0x00016216
   12394:	00012075 	.word	0x00012075
   12398:	40003800 	.word	0x40003800
   1239c:	200010c4 	.word	0x200010c4
   123a0:	e000e100 	.word	0xe000e100
   123a4:	40003c00 	.word	0x40003c00
   123a8:	4101a000 	.word	0x4101a000
   123ac:	4101c000 	.word	0x4101c000
   123b0:	0001622c 	.word	0x0001622c

000123b4 <_tc_timer_set_period>:
	void *const hw = device->hw;
   123b4:	68c0      	ldr	r0, [r0, #12]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   123b6:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   123b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   123bc:	2b02      	cmp	r3, #2
   123be:	d103      	bne.n	123c8 <_tc_timer_set_period+0x14>
	((Tc *)hw)->COUNT32.CC[index].reg = data;
   123c0:	61c1      	str	r1, [r0, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
   123c2:	21c0      	movs	r1, #192	; 0xc0
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   123c4:	4b09      	ldr	r3, [pc, #36]	; (123ec <_tc_timer_set_period+0x38>)
   123c6:	4718      	bx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   123c8:	6803      	ldr	r3, [r0, #0]
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   123ca:	f013 0f0c 	tst.w	r3, #12
   123ce:	d102      	bne.n	123d6 <_tc_timer_set_period+0x22>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
   123d0:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
   123d2:	8381      	strh	r1, [r0, #28]
   123d4:	e7f5      	b.n	123c2 <_tc_timer_set_period+0xe>
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
   123d6:	6803      	ldr	r3, [r0, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
   123d8:	f3c3 0381 	ubfx	r3, r3, #2, #2
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
   123dc:	2b01      	cmp	r3, #1
   123de:	d103      	bne.n	123e8 <_tc_timer_set_period+0x34>
		hri_tccount8_write_PER_reg(hw, clock_cycles);
   123e0:	b2c9      	uxtb	r1, r1
	((Tc *)hw)->COUNT8.PER.reg = data;
   123e2:	76c1      	strb	r1, [r0, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
   123e4:	2120      	movs	r1, #32
   123e6:	e7ed      	b.n	123c4 <_tc_timer_set_period+0x10>
}
   123e8:	4770      	bx	lr
   123ea:	bf00      	nop
   123ec:	00012075 	.word	0x00012075

000123f0 <_tc_get_timer>:
}
   123f0:	4800      	ldr	r0, [pc, #0]	; (123f4 <_tc_get_timer+0x4>)
   123f2:	4770      	bx	lr
   123f4:	20000528 	.word	0x20000528

000123f8 <TC0_Handler>:
	tc_interrupt_handler(_tc0_dev);
   123f8:	4b01      	ldr	r3, [pc, #4]	; (12400 <TC0_Handler+0x8>)
   123fa:	6818      	ldr	r0, [r3, #0]
   123fc:	4b01      	ldr	r3, [pc, #4]	; (12404 <TC0_Handler+0xc>)
   123fe:	4718      	bx	r3
   12400:	200010c4 	.word	0x200010c4
   12404:	000120f5 	.word	0x000120f5

00012408 <TC1_Handler>:
	tc_interrupt_handler(_tc1_dev);
   12408:	4b01      	ldr	r3, [pc, #4]	; (12410 <TC1_Handler+0x8>)
   1240a:	6858      	ldr	r0, [r3, #4]
   1240c:	4b01      	ldr	r3, [pc, #4]	; (12414 <TC1_Handler+0xc>)
   1240e:	4718      	bx	r3
   12410:	200010c4 	.word	0x200010c4
   12414:	000120f5 	.word	0x000120f5

00012418 <TC2_Handler>:
	tc_interrupt_handler(_tc2_dev);
   12418:	4b01      	ldr	r3, [pc, #4]	; (12420 <TC2_Handler+0x8>)
   1241a:	6898      	ldr	r0, [r3, #8]
   1241c:	4b01      	ldr	r3, [pc, #4]	; (12424 <TC2_Handler+0xc>)
   1241e:	4718      	bx	r3
   12420:	200010c4 	.word	0x200010c4
   12424:	000120f5 	.word	0x000120f5

00012428 <TC3_Handler>:
	tc_interrupt_handler(_tc3_dev);
   12428:	4b01      	ldr	r3, [pc, #4]	; (12430 <TC3_Handler+0x8>)
   1242a:	68d8      	ldr	r0, [r3, #12]
   1242c:	4b01      	ldr	r3, [pc, #4]	; (12434 <TC3_Handler+0xc>)
   1242e:	4718      	bx	r3
   12430:	200010c4 	.word	0x200010c4
   12434:	000120f5 	.word	0x000120f5

00012438 <_delay_init>:
   12438:	4b03      	ldr	r3, [pc, #12]	; (12448 <_delay_init+0x10>)
   1243a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   1243e:	605a      	str	r2, [r3, #4]
   12440:	2205      	movs	r2, #5
   12442:	601a      	str	r2, [r3, #0]
   12444:	4770      	bx	lr
   12446:	bf00      	nop
   12448:	e000e010 	.word	0xe000e010

0001244c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
   1244c:	0e0b      	lsrs	r3, r1, #24
   1244e:	4a0c      	ldr	r2, [pc, #48]	; (12480 <_delay_cycles+0x34>)
{
   12450:	b530      	push	{r4, r5, lr}
	uint8_t  n   = cycles >> 24;
   12452:	4618      	mov	r0, r3
	uint32_t buf = cycles;

	while (n--) {
		SysTick->LOAD = 0xFFFFFF;
   12454:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
	while (n--) {
   12458:	3801      	subs	r0, #1
   1245a:	b2c0      	uxtb	r0, r0
   1245c:	28ff      	cmp	r0, #255	; 0xff
   1245e:	d108      	bne.n	12472 <_delay_cycles+0x26>
   12460:	eba3 6303 	sub.w	r3, r3, r3, lsl #24
   12464:	4419      	add	r1, r3
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
   12466:	6051      	str	r1, [r2, #4]
	SysTick->VAL  = buf;
   12468:	6091      	str	r1, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
   1246a:	6813      	ldr	r3, [r2, #0]
   1246c:	03db      	lsls	r3, r3, #15
   1246e:	d5fc      	bpl.n	1246a <_delay_cycles+0x1e>
		;
}
   12470:	bd30      	pop	{r4, r5, pc}
		SysTick->LOAD = 0xFFFFFF;
   12472:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
   12474:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
   12476:	6815      	ldr	r5, [r2, #0]
   12478:	03ed      	lsls	r5, r5, #15
   1247a:	d5fc      	bpl.n	12476 <_delay_cycles+0x2a>
   1247c:	e7ec      	b.n	12458 <_delay_cycles+0xc>
   1247e:	bf00      	nop
   12480:	e000e010 	.word	0xe000e010

00012484 <_crc_sync_init>:
/**
 * \brief Initialize CRC.
 */
int32_t _crc_sync_init(struct _crc_sync_device *const device, void *const hw)
{
	device->hw = hw;
   12484:	6001      	str	r1, [r0, #0]

	return ERR_NONE;
}
   12486:	2000      	movs	r0, #0
   12488:	4770      	bx	lr
	...

0001248c <__aeabi_drsub>:
   1248c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   12490:	e002      	b.n	12498 <__adddf3>
   12492:	bf00      	nop

00012494 <__aeabi_dsub>:
   12494:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00012498 <__adddf3>:
   12498:	b530      	push	{r4, r5, lr}
   1249a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1249e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   124a2:	ea94 0f05 	teq	r4, r5
   124a6:	bf08      	it	eq
   124a8:	ea90 0f02 	teqeq	r0, r2
   124ac:	bf1f      	itttt	ne
   124ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   124b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   124b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   124ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   124be:	f000 80e2 	beq.w	12686 <__adddf3+0x1ee>
   124c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   124c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   124ca:	bfb8      	it	lt
   124cc:	426d      	neglt	r5, r5
   124ce:	dd0c      	ble.n	124ea <__adddf3+0x52>
   124d0:	442c      	add	r4, r5
   124d2:	ea80 0202 	eor.w	r2, r0, r2
   124d6:	ea81 0303 	eor.w	r3, r1, r3
   124da:	ea82 0000 	eor.w	r0, r2, r0
   124de:	ea83 0101 	eor.w	r1, r3, r1
   124e2:	ea80 0202 	eor.w	r2, r0, r2
   124e6:	ea81 0303 	eor.w	r3, r1, r3
   124ea:	2d36      	cmp	r5, #54	; 0x36
   124ec:	bf88      	it	hi
   124ee:	bd30      	pophi	{r4, r5, pc}
   124f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   124f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   124f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   124fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   12500:	d002      	beq.n	12508 <__adddf3+0x70>
   12502:	4240      	negs	r0, r0
   12504:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12508:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1250c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12510:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   12514:	d002      	beq.n	1251c <__adddf3+0x84>
   12516:	4252      	negs	r2, r2
   12518:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1251c:	ea94 0f05 	teq	r4, r5
   12520:	f000 80a7 	beq.w	12672 <__adddf3+0x1da>
   12524:	f1a4 0401 	sub.w	r4, r4, #1
   12528:	f1d5 0e20 	rsbs	lr, r5, #32
   1252c:	db0d      	blt.n	1254a <__adddf3+0xb2>
   1252e:	fa02 fc0e 	lsl.w	ip, r2, lr
   12532:	fa22 f205 	lsr.w	r2, r2, r5
   12536:	1880      	adds	r0, r0, r2
   12538:	f141 0100 	adc.w	r1, r1, #0
   1253c:	fa03 f20e 	lsl.w	r2, r3, lr
   12540:	1880      	adds	r0, r0, r2
   12542:	fa43 f305 	asr.w	r3, r3, r5
   12546:	4159      	adcs	r1, r3
   12548:	e00e      	b.n	12568 <__adddf3+0xd0>
   1254a:	f1a5 0520 	sub.w	r5, r5, #32
   1254e:	f10e 0e20 	add.w	lr, lr, #32
   12552:	2a01      	cmp	r2, #1
   12554:	fa03 fc0e 	lsl.w	ip, r3, lr
   12558:	bf28      	it	cs
   1255a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1255e:	fa43 f305 	asr.w	r3, r3, r5
   12562:	18c0      	adds	r0, r0, r3
   12564:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   12568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1256c:	d507      	bpl.n	1257e <__adddf3+0xe6>
   1256e:	f04f 0e00 	mov.w	lr, #0
   12572:	f1dc 0c00 	rsbs	ip, ip, #0
   12576:	eb7e 0000 	sbcs.w	r0, lr, r0
   1257a:	eb6e 0101 	sbc.w	r1, lr, r1
   1257e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   12582:	d31b      	bcc.n	125bc <__adddf3+0x124>
   12584:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   12588:	d30c      	bcc.n	125a4 <__adddf3+0x10c>
   1258a:	0849      	lsrs	r1, r1, #1
   1258c:	ea5f 0030 	movs.w	r0, r0, rrx
   12590:	ea4f 0c3c 	mov.w	ip, ip, rrx
   12594:	f104 0401 	add.w	r4, r4, #1
   12598:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1259c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   125a0:	f080 809a 	bcs.w	126d8 <__adddf3+0x240>
   125a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   125a8:	bf08      	it	eq
   125aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   125ae:	f150 0000 	adcs.w	r0, r0, #0
   125b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   125b6:	ea41 0105 	orr.w	r1, r1, r5
   125ba:	bd30      	pop	{r4, r5, pc}
   125bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   125c0:	4140      	adcs	r0, r0
   125c2:	eb41 0101 	adc.w	r1, r1, r1
   125c6:	3c01      	subs	r4, #1
   125c8:	bf28      	it	cs
   125ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   125ce:	d2e9      	bcs.n	125a4 <__adddf3+0x10c>
   125d0:	f091 0f00 	teq	r1, #0
   125d4:	bf04      	itt	eq
   125d6:	4601      	moveq	r1, r0
   125d8:	2000      	moveq	r0, #0
   125da:	fab1 f381 	clz	r3, r1
   125de:	bf08      	it	eq
   125e0:	3320      	addeq	r3, #32
   125e2:	f1a3 030b 	sub.w	r3, r3, #11
   125e6:	f1b3 0220 	subs.w	r2, r3, #32
   125ea:	da0c      	bge.n	12606 <__adddf3+0x16e>
   125ec:	320c      	adds	r2, #12
   125ee:	dd08      	ble.n	12602 <__adddf3+0x16a>
   125f0:	f102 0c14 	add.w	ip, r2, #20
   125f4:	f1c2 020c 	rsb	r2, r2, #12
   125f8:	fa01 f00c 	lsl.w	r0, r1, ip
   125fc:	fa21 f102 	lsr.w	r1, r1, r2
   12600:	e00c      	b.n	1261c <__adddf3+0x184>
   12602:	f102 0214 	add.w	r2, r2, #20
   12606:	bfd8      	it	le
   12608:	f1c2 0c20 	rsble	ip, r2, #32
   1260c:	fa01 f102 	lsl.w	r1, r1, r2
   12610:	fa20 fc0c 	lsr.w	ip, r0, ip
   12614:	bfdc      	itt	le
   12616:	ea41 010c 	orrle.w	r1, r1, ip
   1261a:	4090      	lslle	r0, r2
   1261c:	1ae4      	subs	r4, r4, r3
   1261e:	bfa2      	ittt	ge
   12620:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   12624:	4329      	orrge	r1, r5
   12626:	bd30      	popge	{r4, r5, pc}
   12628:	ea6f 0404 	mvn.w	r4, r4
   1262c:	3c1f      	subs	r4, #31
   1262e:	da1c      	bge.n	1266a <__adddf3+0x1d2>
   12630:	340c      	adds	r4, #12
   12632:	dc0e      	bgt.n	12652 <__adddf3+0x1ba>
   12634:	f104 0414 	add.w	r4, r4, #20
   12638:	f1c4 0220 	rsb	r2, r4, #32
   1263c:	fa20 f004 	lsr.w	r0, r0, r4
   12640:	fa01 f302 	lsl.w	r3, r1, r2
   12644:	ea40 0003 	orr.w	r0, r0, r3
   12648:	fa21 f304 	lsr.w	r3, r1, r4
   1264c:	ea45 0103 	orr.w	r1, r5, r3
   12650:	bd30      	pop	{r4, r5, pc}
   12652:	f1c4 040c 	rsb	r4, r4, #12
   12656:	f1c4 0220 	rsb	r2, r4, #32
   1265a:	fa20 f002 	lsr.w	r0, r0, r2
   1265e:	fa01 f304 	lsl.w	r3, r1, r4
   12662:	ea40 0003 	orr.w	r0, r0, r3
   12666:	4629      	mov	r1, r5
   12668:	bd30      	pop	{r4, r5, pc}
   1266a:	fa21 f004 	lsr.w	r0, r1, r4
   1266e:	4629      	mov	r1, r5
   12670:	bd30      	pop	{r4, r5, pc}
   12672:	f094 0f00 	teq	r4, #0
   12676:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1267a:	bf06      	itte	eq
   1267c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12680:	3401      	addeq	r4, #1
   12682:	3d01      	subne	r5, #1
   12684:	e74e      	b.n	12524 <__adddf3+0x8c>
   12686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1268a:	bf18      	it	ne
   1268c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12690:	d029      	beq.n	126e6 <__adddf3+0x24e>
   12692:	ea94 0f05 	teq	r4, r5
   12696:	bf08      	it	eq
   12698:	ea90 0f02 	teqeq	r0, r2
   1269c:	d005      	beq.n	126aa <__adddf3+0x212>
   1269e:	ea54 0c00 	orrs.w	ip, r4, r0
   126a2:	bf04      	itt	eq
   126a4:	4619      	moveq	r1, r3
   126a6:	4610      	moveq	r0, r2
   126a8:	bd30      	pop	{r4, r5, pc}
   126aa:	ea91 0f03 	teq	r1, r3
   126ae:	bf1e      	ittt	ne
   126b0:	2100      	movne	r1, #0
   126b2:	2000      	movne	r0, #0
   126b4:	bd30      	popne	{r4, r5, pc}
   126b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   126ba:	d105      	bne.n	126c8 <__adddf3+0x230>
   126bc:	0040      	lsls	r0, r0, #1
   126be:	4149      	adcs	r1, r1
   126c0:	bf28      	it	cs
   126c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   126c6:	bd30      	pop	{r4, r5, pc}
   126c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   126cc:	bf3c      	itt	cc
   126ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   126d2:	bd30      	popcc	{r4, r5, pc}
   126d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   126d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   126dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   126e0:	f04f 0000 	mov.w	r0, #0
   126e4:	bd30      	pop	{r4, r5, pc}
   126e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   126ea:	bf1a      	itte	ne
   126ec:	4619      	movne	r1, r3
   126ee:	4610      	movne	r0, r2
   126f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   126f4:	bf1c      	itt	ne
   126f6:	460b      	movne	r3, r1
   126f8:	4602      	movne	r2, r0
   126fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   126fe:	bf06      	itte	eq
   12700:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   12704:	ea91 0f03 	teqeq	r1, r3
   12708:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1270c:	bd30      	pop	{r4, r5, pc}
   1270e:	bf00      	nop

00012710 <__aeabi_ui2d>:
   12710:	f090 0f00 	teq	r0, #0
   12714:	bf04      	itt	eq
   12716:	2100      	moveq	r1, #0
   12718:	4770      	bxeq	lr
   1271a:	b530      	push	{r4, r5, lr}
   1271c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12720:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12724:	f04f 0500 	mov.w	r5, #0
   12728:	f04f 0100 	mov.w	r1, #0
   1272c:	e750      	b.n	125d0 <__adddf3+0x138>
   1272e:	bf00      	nop

00012730 <__aeabi_i2d>:
   12730:	f090 0f00 	teq	r0, #0
   12734:	bf04      	itt	eq
   12736:	2100      	moveq	r1, #0
   12738:	4770      	bxeq	lr
   1273a:	b530      	push	{r4, r5, lr}
   1273c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12740:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12744:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   12748:	bf48      	it	mi
   1274a:	4240      	negmi	r0, r0
   1274c:	f04f 0100 	mov.w	r1, #0
   12750:	e73e      	b.n	125d0 <__adddf3+0x138>
   12752:	bf00      	nop

00012754 <__aeabi_f2d>:
   12754:	0042      	lsls	r2, r0, #1
   12756:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1275a:	ea4f 0131 	mov.w	r1, r1, rrx
   1275e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   12762:	bf1f      	itttt	ne
   12764:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   12768:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1276c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   12770:	4770      	bxne	lr
   12772:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   12776:	bf08      	it	eq
   12778:	4770      	bxeq	lr
   1277a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1277e:	bf04      	itt	eq
   12780:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   12784:	4770      	bxeq	lr
   12786:	b530      	push	{r4, r5, lr}
   12788:	f44f 7460 	mov.w	r4, #896	; 0x380
   1278c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12794:	e71c      	b.n	125d0 <__adddf3+0x138>
   12796:	bf00      	nop

00012798 <__aeabi_ul2d>:
   12798:	ea50 0201 	orrs.w	r2, r0, r1
   1279c:	bf08      	it	eq
   1279e:	4770      	bxeq	lr
   127a0:	b530      	push	{r4, r5, lr}
   127a2:	f04f 0500 	mov.w	r5, #0
   127a6:	e00a      	b.n	127be <__aeabi_l2d+0x16>

000127a8 <__aeabi_l2d>:
   127a8:	ea50 0201 	orrs.w	r2, r0, r1
   127ac:	bf08      	it	eq
   127ae:	4770      	bxeq	lr
   127b0:	b530      	push	{r4, r5, lr}
   127b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   127b6:	d502      	bpl.n	127be <__aeabi_l2d+0x16>
   127b8:	4240      	negs	r0, r0
   127ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   127be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   127c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   127c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   127ca:	f43f aed8 	beq.w	1257e <__adddf3+0xe6>
   127ce:	f04f 0203 	mov.w	r2, #3
   127d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   127d6:	bf18      	it	ne
   127d8:	3203      	addne	r2, #3
   127da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   127de:	bf18      	it	ne
   127e0:	3203      	addne	r2, #3
   127e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   127e6:	f1c2 0320 	rsb	r3, r2, #32
   127ea:	fa00 fc03 	lsl.w	ip, r0, r3
   127ee:	fa20 f002 	lsr.w	r0, r0, r2
   127f2:	fa01 fe03 	lsl.w	lr, r1, r3
   127f6:	ea40 000e 	orr.w	r0, r0, lr
   127fa:	fa21 f102 	lsr.w	r1, r1, r2
   127fe:	4414      	add	r4, r2
   12800:	e6bd      	b.n	1257e <__adddf3+0xe6>
   12802:	bf00      	nop

00012804 <__aeabi_dmul>:
   12804:	b570      	push	{r4, r5, r6, lr}
   12806:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1280a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1280e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12812:	bf1d      	ittte	ne
   12814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12818:	ea94 0f0c 	teqne	r4, ip
   1281c:	ea95 0f0c 	teqne	r5, ip
   12820:	f000 f8de 	bleq	129e0 <__aeabi_dmul+0x1dc>
   12824:	442c      	add	r4, r5
   12826:	ea81 0603 	eor.w	r6, r1, r3
   1282a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1282e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12832:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12836:	bf18      	it	ne
   12838:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1283c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12844:	d038      	beq.n	128b8 <__aeabi_dmul+0xb4>
   12846:	fba0 ce02 	umull	ip, lr, r0, r2
   1284a:	f04f 0500 	mov.w	r5, #0
   1284e:	fbe1 e502 	umlal	lr, r5, r1, r2
   12852:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12856:	fbe0 e503 	umlal	lr, r5, r0, r3
   1285a:	f04f 0600 	mov.w	r6, #0
   1285e:	fbe1 5603 	umlal	r5, r6, r1, r3
   12862:	f09c 0f00 	teq	ip, #0
   12866:	bf18      	it	ne
   12868:	f04e 0e01 	orrne.w	lr, lr, #1
   1286c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12870:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12874:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12878:	d204      	bcs.n	12884 <__aeabi_dmul+0x80>
   1287a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1287e:	416d      	adcs	r5, r5
   12880:	eb46 0606 	adc.w	r6, r6, r6
   12884:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12888:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1288c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12890:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12894:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12898:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1289c:	bf88      	it	hi
   1289e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   128a2:	d81e      	bhi.n	128e2 <__aeabi_dmul+0xde>
   128a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   128a8:	bf08      	it	eq
   128aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   128ae:	f150 0000 	adcs.w	r0, r0, #0
   128b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   128b6:	bd70      	pop	{r4, r5, r6, pc}
   128b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   128bc:	ea46 0101 	orr.w	r1, r6, r1
   128c0:	ea40 0002 	orr.w	r0, r0, r2
   128c4:	ea81 0103 	eor.w	r1, r1, r3
   128c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   128cc:	bfc2      	ittt	gt
   128ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   128d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   128d6:	bd70      	popgt	{r4, r5, r6, pc}
   128d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   128dc:	f04f 0e00 	mov.w	lr, #0
   128e0:	3c01      	subs	r4, #1
   128e2:	f300 80ab 	bgt.w	12a3c <__aeabi_dmul+0x238>
   128e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   128ea:	bfde      	ittt	le
   128ec:	2000      	movle	r0, #0
   128ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   128f2:	bd70      	pople	{r4, r5, r6, pc}
   128f4:	f1c4 0400 	rsb	r4, r4, #0
   128f8:	3c20      	subs	r4, #32
   128fa:	da35      	bge.n	12968 <__aeabi_dmul+0x164>
   128fc:	340c      	adds	r4, #12
   128fe:	dc1b      	bgt.n	12938 <__aeabi_dmul+0x134>
   12900:	f104 0414 	add.w	r4, r4, #20
   12904:	f1c4 0520 	rsb	r5, r4, #32
   12908:	fa00 f305 	lsl.w	r3, r0, r5
   1290c:	fa20 f004 	lsr.w	r0, r0, r4
   12910:	fa01 f205 	lsl.w	r2, r1, r5
   12914:	ea40 0002 	orr.w	r0, r0, r2
   12918:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1291c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12920:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12924:	fa21 f604 	lsr.w	r6, r1, r4
   12928:	eb42 0106 	adc.w	r1, r2, r6
   1292c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12930:	bf08      	it	eq
   12932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12936:	bd70      	pop	{r4, r5, r6, pc}
   12938:	f1c4 040c 	rsb	r4, r4, #12
   1293c:	f1c4 0520 	rsb	r5, r4, #32
   12940:	fa00 f304 	lsl.w	r3, r0, r4
   12944:	fa20 f005 	lsr.w	r0, r0, r5
   12948:	fa01 f204 	lsl.w	r2, r1, r4
   1294c:	ea40 0002 	orr.w	r0, r0, r2
   12950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12954:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12958:	f141 0100 	adc.w	r1, r1, #0
   1295c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12960:	bf08      	it	eq
   12962:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12966:	bd70      	pop	{r4, r5, r6, pc}
   12968:	f1c4 0520 	rsb	r5, r4, #32
   1296c:	fa00 f205 	lsl.w	r2, r0, r5
   12970:	ea4e 0e02 	orr.w	lr, lr, r2
   12974:	fa20 f304 	lsr.w	r3, r0, r4
   12978:	fa01 f205 	lsl.w	r2, r1, r5
   1297c:	ea43 0302 	orr.w	r3, r3, r2
   12980:	fa21 f004 	lsr.w	r0, r1, r4
   12984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12988:	fa21 f204 	lsr.w	r2, r1, r4
   1298c:	ea20 0002 	bic.w	r0, r0, r2
   12990:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12994:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12998:	bf08      	it	eq
   1299a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1299e:	bd70      	pop	{r4, r5, r6, pc}
   129a0:	f094 0f00 	teq	r4, #0
   129a4:	d10f      	bne.n	129c6 <__aeabi_dmul+0x1c2>
   129a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   129aa:	0040      	lsls	r0, r0, #1
   129ac:	eb41 0101 	adc.w	r1, r1, r1
   129b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   129b4:	bf08      	it	eq
   129b6:	3c01      	subeq	r4, #1
   129b8:	d0f7      	beq.n	129aa <__aeabi_dmul+0x1a6>
   129ba:	ea41 0106 	orr.w	r1, r1, r6
   129be:	f095 0f00 	teq	r5, #0
   129c2:	bf18      	it	ne
   129c4:	4770      	bxne	lr
   129c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   129ca:	0052      	lsls	r2, r2, #1
   129cc:	eb43 0303 	adc.w	r3, r3, r3
   129d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   129d4:	bf08      	it	eq
   129d6:	3d01      	subeq	r5, #1
   129d8:	d0f7      	beq.n	129ca <__aeabi_dmul+0x1c6>
   129da:	ea43 0306 	orr.w	r3, r3, r6
   129de:	4770      	bx	lr
   129e0:	ea94 0f0c 	teq	r4, ip
   129e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   129e8:	bf18      	it	ne
   129ea:	ea95 0f0c 	teqne	r5, ip
   129ee:	d00c      	beq.n	12a0a <__aeabi_dmul+0x206>
   129f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   129f4:	bf18      	it	ne
   129f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   129fa:	d1d1      	bne.n	129a0 <__aeabi_dmul+0x19c>
   129fc:	ea81 0103 	eor.w	r1, r1, r3
   12a00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12a04:	f04f 0000 	mov.w	r0, #0
   12a08:	bd70      	pop	{r4, r5, r6, pc}
   12a0a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12a0e:	bf06      	itte	eq
   12a10:	4610      	moveq	r0, r2
   12a12:	4619      	moveq	r1, r3
   12a14:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12a18:	d019      	beq.n	12a4e <__aeabi_dmul+0x24a>
   12a1a:	ea94 0f0c 	teq	r4, ip
   12a1e:	d102      	bne.n	12a26 <__aeabi_dmul+0x222>
   12a20:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12a24:	d113      	bne.n	12a4e <__aeabi_dmul+0x24a>
   12a26:	ea95 0f0c 	teq	r5, ip
   12a2a:	d105      	bne.n	12a38 <__aeabi_dmul+0x234>
   12a2c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12a30:	bf1c      	itt	ne
   12a32:	4610      	movne	r0, r2
   12a34:	4619      	movne	r1, r3
   12a36:	d10a      	bne.n	12a4e <__aeabi_dmul+0x24a>
   12a38:	ea81 0103 	eor.w	r1, r1, r3
   12a3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12a40:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12a44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12a48:	f04f 0000 	mov.w	r0, #0
   12a4c:	bd70      	pop	{r4, r5, r6, pc}
   12a4e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12a52:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12a56:	bd70      	pop	{r4, r5, r6, pc}

00012a58 <__aeabi_ddiv>:
   12a58:	b570      	push	{r4, r5, r6, lr}
   12a5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12a5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12a62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12a66:	bf1d      	ittte	ne
   12a68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12a6c:	ea94 0f0c 	teqne	r4, ip
   12a70:	ea95 0f0c 	teqne	r5, ip
   12a74:	f000 f8a7 	bleq	12bc6 <__aeabi_ddiv+0x16e>
   12a78:	eba4 0405 	sub.w	r4, r4, r5
   12a7c:	ea81 0e03 	eor.w	lr, r1, r3
   12a80:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12a84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12a88:	f000 8088 	beq.w	12b9c <__aeabi_ddiv+0x144>
   12a8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12a90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12a94:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12a98:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12a9c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12aa0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12aa4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12aa8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12aac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12ab0:	429d      	cmp	r5, r3
   12ab2:	bf08      	it	eq
   12ab4:	4296      	cmpeq	r6, r2
   12ab6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12aba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12abe:	d202      	bcs.n	12ac6 <__aeabi_ddiv+0x6e>
   12ac0:	085b      	lsrs	r3, r3, #1
   12ac2:	ea4f 0232 	mov.w	r2, r2, rrx
   12ac6:	1ab6      	subs	r6, r6, r2
   12ac8:	eb65 0503 	sbc.w	r5, r5, r3
   12acc:	085b      	lsrs	r3, r3, #1
   12ace:	ea4f 0232 	mov.w	r2, r2, rrx
   12ad2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12ad6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12ada:	ebb6 0e02 	subs.w	lr, r6, r2
   12ade:	eb75 0e03 	sbcs.w	lr, r5, r3
   12ae2:	bf22      	ittt	cs
   12ae4:	1ab6      	subcs	r6, r6, r2
   12ae6:	4675      	movcs	r5, lr
   12ae8:	ea40 000c 	orrcs.w	r0, r0, ip
   12aec:	085b      	lsrs	r3, r3, #1
   12aee:	ea4f 0232 	mov.w	r2, r2, rrx
   12af2:	ebb6 0e02 	subs.w	lr, r6, r2
   12af6:	eb75 0e03 	sbcs.w	lr, r5, r3
   12afa:	bf22      	ittt	cs
   12afc:	1ab6      	subcs	r6, r6, r2
   12afe:	4675      	movcs	r5, lr
   12b00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12b04:	085b      	lsrs	r3, r3, #1
   12b06:	ea4f 0232 	mov.w	r2, r2, rrx
   12b0a:	ebb6 0e02 	subs.w	lr, r6, r2
   12b0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   12b12:	bf22      	ittt	cs
   12b14:	1ab6      	subcs	r6, r6, r2
   12b16:	4675      	movcs	r5, lr
   12b18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12b1c:	085b      	lsrs	r3, r3, #1
   12b1e:	ea4f 0232 	mov.w	r2, r2, rrx
   12b22:	ebb6 0e02 	subs.w	lr, r6, r2
   12b26:	eb75 0e03 	sbcs.w	lr, r5, r3
   12b2a:	bf22      	ittt	cs
   12b2c:	1ab6      	subcs	r6, r6, r2
   12b2e:	4675      	movcs	r5, lr
   12b30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12b34:	ea55 0e06 	orrs.w	lr, r5, r6
   12b38:	d018      	beq.n	12b6c <__aeabi_ddiv+0x114>
   12b3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12b3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12b42:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12b46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12b4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12b4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12b52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12b56:	d1c0      	bne.n	12ada <__aeabi_ddiv+0x82>
   12b58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12b5c:	d10b      	bne.n	12b76 <__aeabi_ddiv+0x11e>
   12b5e:	ea41 0100 	orr.w	r1, r1, r0
   12b62:	f04f 0000 	mov.w	r0, #0
   12b66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12b6a:	e7b6      	b.n	12ada <__aeabi_ddiv+0x82>
   12b6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12b70:	bf04      	itt	eq
   12b72:	4301      	orreq	r1, r0
   12b74:	2000      	moveq	r0, #0
   12b76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12b7a:	bf88      	it	hi
   12b7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12b80:	f63f aeaf 	bhi.w	128e2 <__aeabi_dmul+0xde>
   12b84:	ebb5 0c03 	subs.w	ip, r5, r3
   12b88:	bf04      	itt	eq
   12b8a:	ebb6 0c02 	subseq.w	ip, r6, r2
   12b8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12b92:	f150 0000 	adcs.w	r0, r0, #0
   12b96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12b9a:	bd70      	pop	{r4, r5, r6, pc}
   12b9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12ba0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12ba4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12ba8:	bfc2      	ittt	gt
   12baa:	ebd4 050c 	rsbsgt	r5, r4, ip
   12bae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12bb2:	bd70      	popgt	{r4, r5, r6, pc}
   12bb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12bb8:	f04f 0e00 	mov.w	lr, #0
   12bbc:	3c01      	subs	r4, #1
   12bbe:	e690      	b.n	128e2 <__aeabi_dmul+0xde>
   12bc0:	ea45 0e06 	orr.w	lr, r5, r6
   12bc4:	e68d      	b.n	128e2 <__aeabi_dmul+0xde>
   12bc6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12bca:	ea94 0f0c 	teq	r4, ip
   12bce:	bf08      	it	eq
   12bd0:	ea95 0f0c 	teqeq	r5, ip
   12bd4:	f43f af3b 	beq.w	12a4e <__aeabi_dmul+0x24a>
   12bd8:	ea94 0f0c 	teq	r4, ip
   12bdc:	d10a      	bne.n	12bf4 <__aeabi_ddiv+0x19c>
   12bde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12be2:	f47f af34 	bne.w	12a4e <__aeabi_dmul+0x24a>
   12be6:	ea95 0f0c 	teq	r5, ip
   12bea:	f47f af25 	bne.w	12a38 <__aeabi_dmul+0x234>
   12bee:	4610      	mov	r0, r2
   12bf0:	4619      	mov	r1, r3
   12bf2:	e72c      	b.n	12a4e <__aeabi_dmul+0x24a>
   12bf4:	ea95 0f0c 	teq	r5, ip
   12bf8:	d106      	bne.n	12c08 <__aeabi_ddiv+0x1b0>
   12bfa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12bfe:	f43f aefd 	beq.w	129fc <__aeabi_dmul+0x1f8>
   12c02:	4610      	mov	r0, r2
   12c04:	4619      	mov	r1, r3
   12c06:	e722      	b.n	12a4e <__aeabi_dmul+0x24a>
   12c08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c0c:	bf18      	it	ne
   12c0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c12:	f47f aec5 	bne.w	129a0 <__aeabi_dmul+0x19c>
   12c16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   12c1a:	f47f af0d 	bne.w	12a38 <__aeabi_dmul+0x234>
   12c1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12c22:	f47f aeeb 	bne.w	129fc <__aeabi_dmul+0x1f8>
   12c26:	e712      	b.n	12a4e <__aeabi_dmul+0x24a>

00012c28 <__aeabi_d2uiz>:
   12c28:	004a      	lsls	r2, r1, #1
   12c2a:	d211      	bcs.n	12c50 <__aeabi_d2uiz+0x28>
   12c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12c30:	d211      	bcs.n	12c56 <__aeabi_d2uiz+0x2e>
   12c32:	d50d      	bpl.n	12c50 <__aeabi_d2uiz+0x28>
   12c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12c3c:	d40e      	bmi.n	12c5c <__aeabi_d2uiz+0x34>
   12c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12c4a:	fa23 f002 	lsr.w	r0, r3, r2
   12c4e:	4770      	bx	lr
   12c50:	f04f 0000 	mov.w	r0, #0
   12c54:	4770      	bx	lr
   12c56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12c5a:	d102      	bne.n	12c62 <__aeabi_d2uiz+0x3a>
   12c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12c60:	4770      	bx	lr
   12c62:	f04f 0000 	mov.w	r0, #0
   12c66:	4770      	bx	lr

00012c68 <__libc_init_array>:
   12c68:	b570      	push	{r4, r5, r6, lr}
   12c6a:	4e0d      	ldr	r6, [pc, #52]	; (12ca0 <__libc_init_array+0x38>)
   12c6c:	4d0d      	ldr	r5, [pc, #52]	; (12ca4 <__libc_init_array+0x3c>)
   12c6e:	1b76      	subs	r6, r6, r5
   12c70:	10b6      	asrs	r6, r6, #2
   12c72:	d006      	beq.n	12c82 <__libc_init_array+0x1a>
   12c74:	2400      	movs	r4, #0
   12c76:	3401      	adds	r4, #1
   12c78:	f855 3b04 	ldr.w	r3, [r5], #4
   12c7c:	4798      	blx	r3
   12c7e:	42a6      	cmp	r6, r4
   12c80:	d1f9      	bne.n	12c76 <__libc_init_array+0xe>
   12c82:	4e09      	ldr	r6, [pc, #36]	; (12ca8 <__libc_init_array+0x40>)
   12c84:	4d09      	ldr	r5, [pc, #36]	; (12cac <__libc_init_array+0x44>)
   12c86:	1b76      	subs	r6, r6, r5
   12c88:	f003 fb58 	bl	1633c <_init>
   12c8c:	10b6      	asrs	r6, r6, #2
   12c8e:	d006      	beq.n	12c9e <__libc_init_array+0x36>
   12c90:	2400      	movs	r4, #0
   12c92:	3401      	adds	r4, #1
   12c94:	f855 3b04 	ldr.w	r3, [r5], #4
   12c98:	4798      	blx	r3
   12c9a:	42a6      	cmp	r6, r4
   12c9c:	d1f9      	bne.n	12c92 <__libc_init_array+0x2a>
   12c9e:	bd70      	pop	{r4, r5, r6, pc}
   12ca0:	00016348 	.word	0x00016348
   12ca4:	00016348 	.word	0x00016348
   12ca8:	0001634c 	.word	0x0001634c
   12cac:	00016348 	.word	0x00016348

00012cb0 <malloc>:
   12cb0:	4b02      	ldr	r3, [pc, #8]	; (12cbc <malloc+0xc>)
   12cb2:	4601      	mov	r1, r0
   12cb4:	6818      	ldr	r0, [r3, #0]
   12cb6:	f000 b94b 	b.w	12f50 <_malloc_r>
   12cba:	bf00      	nop
   12cbc:	20000548 	.word	0x20000548

00012cc0 <free>:
   12cc0:	4b02      	ldr	r3, [pc, #8]	; (12ccc <free+0xc>)
   12cc2:	4601      	mov	r1, r0
   12cc4:	6818      	ldr	r0, [r3, #0]
   12cc6:	f000 b8ed 	b.w	12ea4 <_free_r>
   12cca:	bf00      	nop
   12ccc:	20000548 	.word	0x20000548

00012cd0 <memcpy>:
   12cd0:	4684      	mov	ip, r0
   12cd2:	ea41 0300 	orr.w	r3, r1, r0
   12cd6:	f013 0303 	ands.w	r3, r3, #3
   12cda:	d16d      	bne.n	12db8 <memcpy+0xe8>
   12cdc:	3a40      	subs	r2, #64	; 0x40
   12cde:	d341      	bcc.n	12d64 <memcpy+0x94>
   12ce0:	f851 3b04 	ldr.w	r3, [r1], #4
   12ce4:	f840 3b04 	str.w	r3, [r0], #4
   12ce8:	f851 3b04 	ldr.w	r3, [r1], #4
   12cec:	f840 3b04 	str.w	r3, [r0], #4
   12cf0:	f851 3b04 	ldr.w	r3, [r1], #4
   12cf4:	f840 3b04 	str.w	r3, [r0], #4
   12cf8:	f851 3b04 	ldr.w	r3, [r1], #4
   12cfc:	f840 3b04 	str.w	r3, [r0], #4
   12d00:	f851 3b04 	ldr.w	r3, [r1], #4
   12d04:	f840 3b04 	str.w	r3, [r0], #4
   12d08:	f851 3b04 	ldr.w	r3, [r1], #4
   12d0c:	f840 3b04 	str.w	r3, [r0], #4
   12d10:	f851 3b04 	ldr.w	r3, [r1], #4
   12d14:	f840 3b04 	str.w	r3, [r0], #4
   12d18:	f851 3b04 	ldr.w	r3, [r1], #4
   12d1c:	f840 3b04 	str.w	r3, [r0], #4
   12d20:	f851 3b04 	ldr.w	r3, [r1], #4
   12d24:	f840 3b04 	str.w	r3, [r0], #4
   12d28:	f851 3b04 	ldr.w	r3, [r1], #4
   12d2c:	f840 3b04 	str.w	r3, [r0], #4
   12d30:	f851 3b04 	ldr.w	r3, [r1], #4
   12d34:	f840 3b04 	str.w	r3, [r0], #4
   12d38:	f851 3b04 	ldr.w	r3, [r1], #4
   12d3c:	f840 3b04 	str.w	r3, [r0], #4
   12d40:	f851 3b04 	ldr.w	r3, [r1], #4
   12d44:	f840 3b04 	str.w	r3, [r0], #4
   12d48:	f851 3b04 	ldr.w	r3, [r1], #4
   12d4c:	f840 3b04 	str.w	r3, [r0], #4
   12d50:	f851 3b04 	ldr.w	r3, [r1], #4
   12d54:	f840 3b04 	str.w	r3, [r0], #4
   12d58:	f851 3b04 	ldr.w	r3, [r1], #4
   12d5c:	f840 3b04 	str.w	r3, [r0], #4
   12d60:	3a40      	subs	r2, #64	; 0x40
   12d62:	d2bd      	bcs.n	12ce0 <memcpy+0x10>
   12d64:	3230      	adds	r2, #48	; 0x30
   12d66:	d311      	bcc.n	12d8c <memcpy+0xbc>
   12d68:	f851 3b04 	ldr.w	r3, [r1], #4
   12d6c:	f840 3b04 	str.w	r3, [r0], #4
   12d70:	f851 3b04 	ldr.w	r3, [r1], #4
   12d74:	f840 3b04 	str.w	r3, [r0], #4
   12d78:	f851 3b04 	ldr.w	r3, [r1], #4
   12d7c:	f840 3b04 	str.w	r3, [r0], #4
   12d80:	f851 3b04 	ldr.w	r3, [r1], #4
   12d84:	f840 3b04 	str.w	r3, [r0], #4
   12d88:	3a10      	subs	r2, #16
   12d8a:	d2ed      	bcs.n	12d68 <memcpy+0x98>
   12d8c:	320c      	adds	r2, #12
   12d8e:	d305      	bcc.n	12d9c <memcpy+0xcc>
   12d90:	f851 3b04 	ldr.w	r3, [r1], #4
   12d94:	f840 3b04 	str.w	r3, [r0], #4
   12d98:	3a04      	subs	r2, #4
   12d9a:	d2f9      	bcs.n	12d90 <memcpy+0xc0>
   12d9c:	3204      	adds	r2, #4
   12d9e:	d008      	beq.n	12db2 <memcpy+0xe2>
   12da0:	07d2      	lsls	r2, r2, #31
   12da2:	bf1c      	itt	ne
   12da4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12da8:	f800 3b01 	strbne.w	r3, [r0], #1
   12dac:	d301      	bcc.n	12db2 <memcpy+0xe2>
   12dae:	880b      	ldrh	r3, [r1, #0]
   12db0:	8003      	strh	r3, [r0, #0]
   12db2:	4660      	mov	r0, ip
   12db4:	4770      	bx	lr
   12db6:	bf00      	nop
   12db8:	2a08      	cmp	r2, #8
   12dba:	d313      	bcc.n	12de4 <memcpy+0x114>
   12dbc:	078b      	lsls	r3, r1, #30
   12dbe:	d08d      	beq.n	12cdc <memcpy+0xc>
   12dc0:	f010 0303 	ands.w	r3, r0, #3
   12dc4:	d08a      	beq.n	12cdc <memcpy+0xc>
   12dc6:	f1c3 0304 	rsb	r3, r3, #4
   12dca:	1ad2      	subs	r2, r2, r3
   12dcc:	07db      	lsls	r3, r3, #31
   12dce:	bf1c      	itt	ne
   12dd0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   12dd4:	f800 3b01 	strbne.w	r3, [r0], #1
   12dd8:	d380      	bcc.n	12cdc <memcpy+0xc>
   12dda:	f831 3b02 	ldrh.w	r3, [r1], #2
   12dde:	f820 3b02 	strh.w	r3, [r0], #2
   12de2:	e77b      	b.n	12cdc <memcpy+0xc>
   12de4:	3a04      	subs	r2, #4
   12de6:	d3d9      	bcc.n	12d9c <memcpy+0xcc>
   12de8:	3a01      	subs	r2, #1
   12dea:	f811 3b01 	ldrb.w	r3, [r1], #1
   12dee:	f800 3b01 	strb.w	r3, [r0], #1
   12df2:	d2f9      	bcs.n	12de8 <memcpy+0x118>
   12df4:	780b      	ldrb	r3, [r1, #0]
   12df6:	7003      	strb	r3, [r0, #0]
   12df8:	784b      	ldrb	r3, [r1, #1]
   12dfa:	7043      	strb	r3, [r0, #1]
   12dfc:	788b      	ldrb	r3, [r1, #2]
   12dfe:	7083      	strb	r3, [r0, #2]
   12e00:	4660      	mov	r0, ip
   12e02:	4770      	bx	lr

00012e04 <memset>:
   12e04:	b4f0      	push	{r4, r5, r6, r7}
   12e06:	0786      	lsls	r6, r0, #30
   12e08:	d046      	beq.n	12e98 <memset+0x94>
   12e0a:	1e54      	subs	r4, r2, #1
   12e0c:	2a00      	cmp	r2, #0
   12e0e:	d03c      	beq.n	12e8a <memset+0x86>
   12e10:	b2ca      	uxtb	r2, r1
   12e12:	4603      	mov	r3, r0
   12e14:	e002      	b.n	12e1c <memset+0x18>
   12e16:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   12e1a:	d336      	bcc.n	12e8a <memset+0x86>
   12e1c:	f803 2b01 	strb.w	r2, [r3], #1
   12e20:	079d      	lsls	r5, r3, #30
   12e22:	d1f8      	bne.n	12e16 <memset+0x12>
   12e24:	2c03      	cmp	r4, #3
   12e26:	d929      	bls.n	12e7c <memset+0x78>
   12e28:	b2cd      	uxtb	r5, r1
   12e2a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12e2e:	2c0f      	cmp	r4, #15
   12e30:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   12e34:	d933      	bls.n	12e9e <memset+0x9a>
   12e36:	f1a4 0610 	sub.w	r6, r4, #16
   12e3a:	0936      	lsrs	r6, r6, #4
   12e3c:	f103 0720 	add.w	r7, r3, #32
   12e40:	eb07 1706 	add.w	r7, r7, r6, lsl #4
   12e44:	f103 0210 	add.w	r2, r3, #16
   12e48:	e942 5504 	strd	r5, r5, [r2, #-16]
   12e4c:	e942 5502 	strd	r5, r5, [r2, #-8]
   12e50:	3210      	adds	r2, #16
   12e52:	42ba      	cmp	r2, r7
   12e54:	d1f8      	bne.n	12e48 <memset+0x44>
   12e56:	1c72      	adds	r2, r6, #1
   12e58:	f014 0f0c 	tst.w	r4, #12
   12e5c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   12e60:	f004 060f 	and.w	r6, r4, #15
   12e64:	d013      	beq.n	12e8e <memset+0x8a>
   12e66:	1f33      	subs	r3, r6, #4
   12e68:	f023 0303 	bic.w	r3, r3, #3
   12e6c:	3304      	adds	r3, #4
   12e6e:	4413      	add	r3, r2
   12e70:	f842 5b04 	str.w	r5, [r2], #4
   12e74:	4293      	cmp	r3, r2
   12e76:	d1fb      	bne.n	12e70 <memset+0x6c>
   12e78:	f006 0403 	and.w	r4, r6, #3
   12e7c:	b12c      	cbz	r4, 12e8a <memset+0x86>
   12e7e:	b2c9      	uxtb	r1, r1
   12e80:	441c      	add	r4, r3
   12e82:	f803 1b01 	strb.w	r1, [r3], #1
   12e86:	429c      	cmp	r4, r3
   12e88:	d1fb      	bne.n	12e82 <memset+0x7e>
   12e8a:	bcf0      	pop	{r4, r5, r6, r7}
   12e8c:	4770      	bx	lr
   12e8e:	4634      	mov	r4, r6
   12e90:	4613      	mov	r3, r2
   12e92:	2c00      	cmp	r4, #0
   12e94:	d1f3      	bne.n	12e7e <memset+0x7a>
   12e96:	e7f8      	b.n	12e8a <memset+0x86>
   12e98:	4614      	mov	r4, r2
   12e9a:	4603      	mov	r3, r0
   12e9c:	e7c2      	b.n	12e24 <memset+0x20>
   12e9e:	461a      	mov	r2, r3
   12ea0:	4626      	mov	r6, r4
   12ea2:	e7e0      	b.n	12e66 <memset+0x62>

00012ea4 <_free_r>:
   12ea4:	2900      	cmp	r1, #0
   12ea6:	d03c      	beq.n	12f22 <_free_r+0x7e>
   12ea8:	b538      	push	{r3, r4, r5, lr}
   12eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12eae:	1f0c      	subs	r4, r1, #4
   12eb0:	2b00      	cmp	r3, #0
   12eb2:	bfb8      	it	lt
   12eb4:	18e4      	addlt	r4, r4, r3
   12eb6:	4605      	mov	r5, r0
   12eb8:	f001 f958 	bl	1416c <__malloc_lock>
   12ebc:	4b23      	ldr	r3, [pc, #140]	; (12f4c <_free_r+0xa8>)
   12ebe:	681a      	ldr	r2, [r3, #0]
   12ec0:	b12a      	cbz	r2, 12ece <_free_r+0x2a>
   12ec2:	42a2      	cmp	r2, r4
   12ec4:	d90d      	bls.n	12ee2 <_free_r+0x3e>
   12ec6:	6821      	ldr	r1, [r4, #0]
   12ec8:	1860      	adds	r0, r4, r1
   12eca:	4282      	cmp	r2, r0
   12ecc:	d023      	beq.n	12f16 <_free_r+0x72>
   12ece:	6062      	str	r2, [r4, #4]
   12ed0:	4628      	mov	r0, r5
   12ed2:	601c      	str	r4, [r3, #0]
   12ed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12ed8:	f001 b94a 	b.w	14170 <__malloc_unlock>
   12edc:	42a3      	cmp	r3, r4
   12ede:	d803      	bhi.n	12ee8 <_free_r+0x44>
   12ee0:	461a      	mov	r2, r3
   12ee2:	6853      	ldr	r3, [r2, #4]
   12ee4:	2b00      	cmp	r3, #0
   12ee6:	d1f9      	bne.n	12edc <_free_r+0x38>
   12ee8:	6811      	ldr	r1, [r2, #0]
   12eea:	1850      	adds	r0, r2, r1
   12eec:	42a0      	cmp	r0, r4
   12eee:	d019      	beq.n	12f24 <_free_r+0x80>
   12ef0:	d824      	bhi.n	12f3c <_free_r+0x98>
   12ef2:	6821      	ldr	r1, [r4, #0]
   12ef4:	1860      	adds	r0, r4, r1
   12ef6:	4283      	cmp	r3, r0
   12ef8:	d006      	beq.n	12f08 <_free_r+0x64>
   12efa:	6063      	str	r3, [r4, #4]
   12efc:	6054      	str	r4, [r2, #4]
   12efe:	4628      	mov	r0, r5
   12f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12f04:	f001 b934 	b.w	14170 <__malloc_unlock>
   12f08:	e9d3 0300 	ldrd	r0, r3, [r3]
   12f0c:	4401      	add	r1, r0
   12f0e:	6063      	str	r3, [r4, #4]
   12f10:	6021      	str	r1, [r4, #0]
   12f12:	6054      	str	r4, [r2, #4]
   12f14:	e7f3      	b.n	12efe <_free_r+0x5a>
   12f16:	e9d2 0200 	ldrd	r0, r2, [r2]
   12f1a:	4401      	add	r1, r0
   12f1c:	6062      	str	r2, [r4, #4]
   12f1e:	6021      	str	r1, [r4, #0]
   12f20:	e7d6      	b.n	12ed0 <_free_r+0x2c>
   12f22:	4770      	bx	lr
   12f24:	6820      	ldr	r0, [r4, #0]
   12f26:	4401      	add	r1, r0
   12f28:	1850      	adds	r0, r2, r1
   12f2a:	4283      	cmp	r3, r0
   12f2c:	6011      	str	r1, [r2, #0]
   12f2e:	d1e6      	bne.n	12efe <_free_r+0x5a>
   12f30:	e9d3 0300 	ldrd	r0, r3, [r3]
   12f34:	4401      	add	r1, r0
   12f36:	6053      	str	r3, [r2, #4]
   12f38:	6011      	str	r1, [r2, #0]
   12f3a:	e7e0      	b.n	12efe <_free_r+0x5a>
   12f3c:	230c      	movs	r3, #12
   12f3e:	602b      	str	r3, [r5, #0]
   12f40:	4628      	mov	r0, r5
   12f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   12f46:	f001 b913 	b.w	14170 <__malloc_unlock>
   12f4a:	bf00      	nop
   12f4c:	200010d4 	.word	0x200010d4

00012f50 <_malloc_r>:
   12f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f52:	1ccd      	adds	r5, r1, #3
   12f54:	f025 0503 	bic.w	r5, r5, #3
   12f58:	3508      	adds	r5, #8
   12f5a:	2d0c      	cmp	r5, #12
   12f5c:	bf38      	it	cc
   12f5e:	250c      	movcc	r5, #12
   12f60:	2d00      	cmp	r5, #0
   12f62:	4606      	mov	r6, r0
   12f64:	db33      	blt.n	12fce <_malloc_r+0x7e>
   12f66:	42a9      	cmp	r1, r5
   12f68:	d831      	bhi.n	12fce <_malloc_r+0x7e>
   12f6a:	4f2a      	ldr	r7, [pc, #168]	; (13014 <_malloc_r+0xc4>)
   12f6c:	f001 f8fe 	bl	1416c <__malloc_lock>
   12f70:	683a      	ldr	r2, [r7, #0]
   12f72:	b152      	cbz	r2, 12f8a <_malloc_r+0x3a>
   12f74:	6813      	ldr	r3, [r2, #0]
   12f76:	1b5b      	subs	r3, r3, r5
   12f78:	d404      	bmi.n	12f84 <_malloc_r+0x34>
   12f7a:	e03f      	b.n	12ffc <_malloc_r+0xac>
   12f7c:	6823      	ldr	r3, [r4, #0]
   12f7e:	1b5b      	subs	r3, r3, r5
   12f80:	d529      	bpl.n	12fd6 <_malloc_r+0x86>
   12f82:	4622      	mov	r2, r4
   12f84:	6854      	ldr	r4, [r2, #4]
   12f86:	2c00      	cmp	r4, #0
   12f88:	d1f8      	bne.n	12f7c <_malloc_r+0x2c>
   12f8a:	6879      	ldr	r1, [r7, #4]
   12f8c:	2900      	cmp	r1, #0
   12f8e:	d03b      	beq.n	13008 <_malloc_r+0xb8>
   12f90:	4629      	mov	r1, r5
   12f92:	4630      	mov	r0, r6
   12f94:	f000 f914 	bl	131c0 <_sbrk_r>
   12f98:	1c43      	adds	r3, r0, #1
   12f9a:	d028      	beq.n	12fee <_malloc_r+0x9e>
   12f9c:	1cc4      	adds	r4, r0, #3
   12f9e:	f024 0403 	bic.w	r4, r4, #3
   12fa2:	42a0      	cmp	r0, r4
   12fa4:	d005      	beq.n	12fb2 <_malloc_r+0x62>
   12fa6:	1a21      	subs	r1, r4, r0
   12fa8:	4630      	mov	r0, r6
   12faa:	f000 f909 	bl	131c0 <_sbrk_r>
   12fae:	3001      	adds	r0, #1
   12fb0:	d01d      	beq.n	12fee <_malloc_r+0x9e>
   12fb2:	6025      	str	r5, [r4, #0]
   12fb4:	4630      	mov	r0, r6
   12fb6:	f001 f8db 	bl	14170 <__malloc_unlock>
   12fba:	f104 000b 	add.w	r0, r4, #11
   12fbe:	f020 0007 	bic.w	r0, r0, #7
   12fc2:	1d23      	adds	r3, r4, #4
   12fc4:	1ac2      	subs	r2, r0, r3
   12fc6:	d001      	beq.n	12fcc <_malloc_r+0x7c>
   12fc8:	1a1b      	subs	r3, r3, r0
   12fca:	50a3      	str	r3, [r4, r2]
   12fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12fce:	220c      	movs	r2, #12
   12fd0:	6032      	str	r2, [r6, #0]
   12fd2:	2000      	movs	r0, #0
   12fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12fd6:	2b0b      	cmp	r3, #11
   12fd8:	d805      	bhi.n	12fe6 <_malloc_r+0x96>
   12fda:	42a2      	cmp	r2, r4
   12fdc:	6863      	ldr	r3, [r4, #4]
   12fde:	d011      	beq.n	13004 <_malloc_r+0xb4>
   12fe0:	6053      	str	r3, [r2, #4]
   12fe2:	e7e7      	b.n	12fb4 <_malloc_r+0x64>
   12fe4:	4614      	mov	r4, r2
   12fe6:	6023      	str	r3, [r4, #0]
   12fe8:	441c      	add	r4, r3
   12fea:	6025      	str	r5, [r4, #0]
   12fec:	e7e2      	b.n	12fb4 <_malloc_r+0x64>
   12fee:	230c      	movs	r3, #12
   12ff0:	4630      	mov	r0, r6
   12ff2:	6033      	str	r3, [r6, #0]
   12ff4:	f001 f8bc 	bl	14170 <__malloc_unlock>
   12ff8:	2000      	movs	r0, #0
   12ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ffc:	2b0b      	cmp	r3, #11
   12ffe:	d8f1      	bhi.n	12fe4 <_malloc_r+0x94>
   13000:	6853      	ldr	r3, [r2, #4]
   13002:	4614      	mov	r4, r2
   13004:	603b      	str	r3, [r7, #0]
   13006:	e7d5      	b.n	12fb4 <_malloc_r+0x64>
   13008:	4630      	mov	r0, r6
   1300a:	f000 f8d9 	bl	131c0 <_sbrk_r>
   1300e:	6078      	str	r0, [r7, #4]
   13010:	e7be      	b.n	12f90 <_malloc_r+0x40>
   13012:	bf00      	nop
   13014:	200010d4 	.word	0x200010d4

00013018 <_iprintf_r>:
   13018:	b40e      	push	{r1, r2, r3}
   1301a:	b510      	push	{r4, lr}
   1301c:	4604      	mov	r4, r0
   1301e:	b083      	sub	sp, #12
   13020:	b108      	cbz	r0, 13026 <_iprintf_r+0xe>
   13022:	6983      	ldr	r3, [r0, #24]
   13024:	b163      	cbz	r3, 13040 <_iprintf_r+0x28>
   13026:	a806      	add	r0, sp, #24
   13028:	4603      	mov	r3, r0
   1302a:	9001      	str	r0, [sp, #4]
   1302c:	9a05      	ldr	r2, [sp, #20]
   1302e:	68a1      	ldr	r1, [r4, #8]
   13030:	4620      	mov	r0, r4
   13032:	f001 faf7 	bl	14624 <_vfiprintf_r>
   13036:	b003      	add	sp, #12
   13038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1303c:	b003      	add	sp, #12
   1303e:	4770      	bx	lr
   13040:	f000 ffac 	bl	13f9c <__sinit>
   13044:	e7ef      	b.n	13026 <_iprintf_r+0xe>
   13046:	bf00      	nop

00013048 <iprintf>:
   13048:	b40f      	push	{r0, r1, r2, r3}
   1304a:	b510      	push	{r4, lr}
   1304c:	4b0b      	ldr	r3, [pc, #44]	; (1307c <iprintf+0x34>)
   1304e:	681c      	ldr	r4, [r3, #0]
   13050:	b082      	sub	sp, #8
   13052:	b10c      	cbz	r4, 13058 <iprintf+0x10>
   13054:	69a3      	ldr	r3, [r4, #24]
   13056:	b163      	cbz	r3, 13072 <iprintf+0x2a>
   13058:	a805      	add	r0, sp, #20
   1305a:	4603      	mov	r3, r0
   1305c:	9001      	str	r0, [sp, #4]
   1305e:	9a04      	ldr	r2, [sp, #16]
   13060:	68a1      	ldr	r1, [r4, #8]
   13062:	4620      	mov	r0, r4
   13064:	f001 fade 	bl	14624 <_vfiprintf_r>
   13068:	b002      	add	sp, #8
   1306a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1306e:	b004      	add	sp, #16
   13070:	4770      	bx	lr
   13072:	4620      	mov	r0, r4
   13074:	f000 ff92 	bl	13f9c <__sinit>
   13078:	e7ee      	b.n	13058 <iprintf+0x10>
   1307a:	bf00      	nop
   1307c:	20000548 	.word	0x20000548

00013080 <_putchar_r>:
   13080:	b510      	push	{r4, lr}
   13082:	4604      	mov	r4, r0
   13084:	b082      	sub	sp, #8
   13086:	b108      	cbz	r0, 1308c <_putchar_r+0xc>
   13088:	6983      	ldr	r3, [r0, #24]
   1308a:	b133      	cbz	r3, 1309a <_putchar_r+0x1a>
   1308c:	68a2      	ldr	r2, [r4, #8]
   1308e:	4620      	mov	r0, r4
   13090:	b002      	add	sp, #8
   13092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13096:	f001 be15 	b.w	14cc4 <_putc_r>
   1309a:	9101      	str	r1, [sp, #4]
   1309c:	f000 ff7e 	bl	13f9c <__sinit>
   130a0:	9901      	ldr	r1, [sp, #4]
   130a2:	e7f3      	b.n	1308c <_putchar_r+0xc>

000130a4 <putchar>:
   130a4:	b538      	push	{r3, r4, r5, lr}
   130a6:	4b0b      	ldr	r3, [pc, #44]	; (130d4 <putchar+0x30>)
   130a8:	681c      	ldr	r4, [r3, #0]
   130aa:	4605      	mov	r5, r0
   130ac:	b10c      	cbz	r4, 130b2 <putchar+0xe>
   130ae:	69a3      	ldr	r3, [r4, #24]
   130b0:	b133      	cbz	r3, 130c0 <putchar+0x1c>
   130b2:	4629      	mov	r1, r5
   130b4:	68a2      	ldr	r2, [r4, #8]
   130b6:	4620      	mov	r0, r4
   130b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   130bc:	f001 be02 	b.w	14cc4 <_putc_r>
   130c0:	4620      	mov	r0, r4
   130c2:	f000 ff6b 	bl	13f9c <__sinit>
   130c6:	4629      	mov	r1, r5
   130c8:	68a2      	ldr	r2, [r4, #8]
   130ca:	4620      	mov	r0, r4
   130cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   130d0:	f001 bdf8 	b.w	14cc4 <_putc_r>
   130d4:	20000548 	.word	0x20000548

000130d8 <_puts_r>:
   130d8:	6983      	ldr	r3, [r0, #24]
   130da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130de:	4680      	mov	r8, r0
   130e0:	460e      	mov	r6, r1
   130e2:	b333      	cbz	r3, 13132 <_puts_r+0x5a>
   130e4:	6884      	ldr	r4, [r0, #8]
   130e6:	4b2f      	ldr	r3, [pc, #188]	; (131a4 <_puts_r+0xcc>)
   130e8:	429c      	cmp	r4, r3
   130ea:	d030      	beq.n	1314e <_puts_r+0x76>
   130ec:	4b2e      	ldr	r3, [pc, #184]	; (131a8 <_puts_r+0xd0>)
   130ee:	429c      	cmp	r4, r3
   130f0:	d039      	beq.n	13166 <_puts_r+0x8e>
   130f2:	4b2e      	ldr	r3, [pc, #184]	; (131ac <_puts_r+0xd4>)
   130f4:	429c      	cmp	r4, r3
   130f6:	bf08      	it	eq
   130f8:	f8d8 400c 	ldreq.w	r4, [r8, #12]
   130fc:	89a3      	ldrh	r3, [r4, #12]
   130fe:	071b      	lsls	r3, r3, #28
   13100:	d52a      	bpl.n	13158 <_puts_r+0x80>
   13102:	6923      	ldr	r3, [r4, #16]
   13104:	b343      	cbz	r3, 13158 <_puts_r+0x80>
   13106:	3e01      	subs	r6, #1
   13108:	68a3      	ldr	r3, [r4, #8]
   1310a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1310e:	3b01      	subs	r3, #1
   13110:	60a3      	str	r3, [r4, #8]
   13112:	b39d      	cbz	r5, 1317c <_puts_r+0xa4>
   13114:	2b00      	cmp	r3, #0
   13116:	da07      	bge.n	13128 <_puts_r+0x50>
   13118:	69a7      	ldr	r7, [r4, #24]
   1311a:	429f      	cmp	r7, r3
   1311c:	4622      	mov	r2, r4
   1311e:	4629      	mov	r1, r5
   13120:	4640      	mov	r0, r8
   13122:	dc23      	bgt.n	1316c <_puts_r+0x94>
   13124:	2d0a      	cmp	r5, #10
   13126:	d021      	beq.n	1316c <_puts_r+0x94>
   13128:	6823      	ldr	r3, [r4, #0]
   1312a:	1c5a      	adds	r2, r3, #1
   1312c:	6022      	str	r2, [r4, #0]
   1312e:	701d      	strb	r5, [r3, #0]
   13130:	e7ea      	b.n	13108 <_puts_r+0x30>
   13132:	f000 ff33 	bl	13f9c <__sinit>
   13136:	f8d8 3018 	ldr.w	r3, [r8, #24]
   1313a:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1313e:	2b00      	cmp	r3, #0
   13140:	d1d1      	bne.n	130e6 <_puts_r+0xe>
   13142:	4640      	mov	r0, r8
   13144:	f000 ff2a 	bl	13f9c <__sinit>
   13148:	4b16      	ldr	r3, [pc, #88]	; (131a4 <_puts_r+0xcc>)
   1314a:	429c      	cmp	r4, r3
   1314c:	d1ce      	bne.n	130ec <_puts_r+0x14>
   1314e:	f8d8 4004 	ldr.w	r4, [r8, #4]
   13152:	89a3      	ldrh	r3, [r4, #12]
   13154:	071b      	lsls	r3, r3, #28
   13156:	d4d4      	bmi.n	13102 <_puts_r+0x2a>
   13158:	4621      	mov	r1, r4
   1315a:	4640      	mov	r0, r8
   1315c:	f000 fcde 	bl	13b1c <__swsetup_r>
   13160:	2800      	cmp	r0, #0
   13162:	d0d0      	beq.n	13106 <_puts_r+0x2e>
   13164:	e006      	b.n	13174 <_puts_r+0x9c>
   13166:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1316a:	e7c7      	b.n	130fc <_puts_r+0x24>
   1316c:	f000 fc76 	bl	13a5c <__swbuf_r>
   13170:	3001      	adds	r0, #1
   13172:	d1c9      	bne.n	13108 <_puts_r+0x30>
   13174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1317c:	2b00      	cmp	r3, #0
   1317e:	da09      	bge.n	13194 <_puts_r+0xbc>
   13180:	4622      	mov	r2, r4
   13182:	4640      	mov	r0, r8
   13184:	210a      	movs	r1, #10
   13186:	f000 fc69 	bl	13a5c <__swbuf_r>
   1318a:	3001      	adds	r0, #1
   1318c:	d0f2      	beq.n	13174 <_puts_r+0x9c>
   1318e:	200a      	movs	r0, #10
   13190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13194:	6823      	ldr	r3, [r4, #0]
   13196:	220a      	movs	r2, #10
   13198:	1c59      	adds	r1, r3, #1
   1319a:	6021      	str	r1, [r4, #0]
   1319c:	701a      	strb	r2, [r3, #0]
   1319e:	4610      	mov	r0, r2
   131a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131a4:	000162e0 	.word	0x000162e0
   131a8:	000162c0 	.word	0x000162c0
   131ac:	000162a0 	.word	0x000162a0

000131b0 <puts>:
   131b0:	4b02      	ldr	r3, [pc, #8]	; (131bc <puts+0xc>)
   131b2:	4601      	mov	r1, r0
   131b4:	6818      	ldr	r0, [r3, #0]
   131b6:	f7ff bf8f 	b.w	130d8 <_puts_r>
   131ba:	bf00      	nop
   131bc:	20000548 	.word	0x20000548

000131c0 <_sbrk_r>:
   131c0:	b538      	push	{r3, r4, r5, lr}
   131c2:	4c07      	ldr	r4, [pc, #28]	; (131e0 <_sbrk_r+0x20>)
   131c4:	2300      	movs	r3, #0
   131c6:	4605      	mov	r5, r0
   131c8:	4608      	mov	r0, r1
   131ca:	6023      	str	r3, [r4, #0]
   131cc:	f7f8 fd1c 	bl	bc08 <_sbrk>
   131d0:	1c43      	adds	r3, r0, #1
   131d2:	d000      	beq.n	131d6 <_sbrk_r+0x16>
   131d4:	bd38      	pop	{r3, r4, r5, pc}
   131d6:	6823      	ldr	r3, [r4, #0]
   131d8:	2b00      	cmp	r3, #0
   131da:	d0fb      	beq.n	131d4 <_sbrk_r+0x14>
   131dc:	602b      	str	r3, [r5, #0]
   131de:	bd38      	pop	{r3, r4, r5, pc}
   131e0:	20014e34 	.word	0x20014e34

000131e4 <setbuf>:
   131e4:	2900      	cmp	r1, #0
   131e6:	bf0c      	ite	eq
   131e8:	2202      	moveq	r2, #2
   131ea:	2200      	movne	r2, #0
   131ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
   131f0:	f000 b800 	b.w	131f4 <setvbuf>

000131f4 <setvbuf>:
   131f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   131f8:	4c58      	ldr	r4, [pc, #352]	; (1335c <setvbuf+0x168>)
   131fa:	6825      	ldr	r5, [r4, #0]
   131fc:	b083      	sub	sp, #12
   131fe:	4604      	mov	r4, r0
   13200:	460f      	mov	r7, r1
   13202:	4690      	mov	r8, r2
   13204:	461e      	mov	r6, r3
   13206:	b115      	cbz	r5, 1320e <setvbuf+0x1a>
   13208:	69ab      	ldr	r3, [r5, #24]
   1320a:	2b00      	cmp	r3, #0
   1320c:	d062      	beq.n	132d4 <setvbuf+0xe0>
   1320e:	4b54      	ldr	r3, [pc, #336]	; (13360 <setvbuf+0x16c>)
   13210:	429c      	cmp	r4, r3
   13212:	d065      	beq.n	132e0 <setvbuf+0xec>
   13214:	4b53      	ldr	r3, [pc, #332]	; (13364 <setvbuf+0x170>)
   13216:	429c      	cmp	r4, r3
   13218:	d064      	beq.n	132e4 <setvbuf+0xf0>
   1321a:	4b53      	ldr	r3, [pc, #332]	; (13368 <setvbuf+0x174>)
   1321c:	429c      	cmp	r4, r3
   1321e:	bf08      	it	eq
   13220:	68ec      	ldreq	r4, [r5, #12]
   13222:	f1b8 0f02 	cmp.w	r8, #2
   13226:	d006      	beq.n	13236 <setvbuf+0x42>
   13228:	f1b8 0f01 	cmp.w	r8, #1
   1322c:	f200 8093 	bhi.w	13356 <setvbuf+0x162>
   13230:	2e00      	cmp	r6, #0
   13232:	f2c0 8090 	blt.w	13356 <setvbuf+0x162>
   13236:	4621      	mov	r1, r4
   13238:	4628      	mov	r0, r5
   1323a:	f000 fd85 	bl	13d48 <_fflush_r>
   1323e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13240:	b141      	cbz	r1, 13254 <setvbuf+0x60>
   13242:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13246:	4299      	cmp	r1, r3
   13248:	d002      	beq.n	13250 <setvbuf+0x5c>
   1324a:	4628      	mov	r0, r5
   1324c:	f7ff fe2a 	bl	12ea4 <_free_r>
   13250:	2300      	movs	r3, #0
   13252:	6363      	str	r3, [r4, #52]	; 0x34
   13254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13258:	2200      	movs	r2, #0
   1325a:	61a2      	str	r2, [r4, #24]
   1325c:	6062      	str	r2, [r4, #4]
   1325e:	061a      	lsls	r2, r3, #24
   13260:	d44f      	bmi.n	13302 <setvbuf+0x10e>
   13262:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   13266:	f023 0303 	bic.w	r3, r3, #3
   1326a:	f1b8 0f02 	cmp.w	r8, #2
   1326e:	81a3      	strh	r3, [r4, #12]
   13270:	d04e      	beq.n	13310 <setvbuf+0x11c>
   13272:	ab01      	add	r3, sp, #4
   13274:	466a      	mov	r2, sp
   13276:	4621      	mov	r1, r4
   13278:	4628      	mov	r0, r5
   1327a:	f000 feff 	bl	1407c <__swhatbuf_r>
   1327e:	89a3      	ldrh	r3, [r4, #12]
   13280:	4318      	orrs	r0, r3
   13282:	81a0      	strh	r0, [r4, #12]
   13284:	2e00      	cmp	r6, #0
   13286:	d12f      	bne.n	132e8 <setvbuf+0xf4>
   13288:	9e00      	ldr	r6, [sp, #0]
   1328a:	4630      	mov	r0, r6
   1328c:	f7ff fd10 	bl	12cb0 <malloc>
   13290:	4607      	mov	r7, r0
   13292:	2800      	cmp	r0, #0
   13294:	d04f      	beq.n	13336 <setvbuf+0x142>
   13296:	89a3      	ldrh	r3, [r4, #12]
   13298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1329c:	81a3      	strh	r3, [r4, #12]
   1329e:	69ab      	ldr	r3, [r5, #24]
   132a0:	b33b      	cbz	r3, 132f2 <setvbuf+0xfe>
   132a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   132a6:	6027      	str	r7, [r4, #0]
   132a8:	f1b8 0f01 	cmp.w	r8, #1
   132ac:	bf04      	itt	eq
   132ae:	f043 0301 	orreq.w	r3, r3, #1
   132b2:	81a3      	strheq	r3, [r4, #12]
   132b4:	b29b      	uxth	r3, r3
   132b6:	f013 0008 	ands.w	r0, r3, #8
   132ba:	e9c4 7604 	strd	r7, r6, [r4, #16]
   132be:	d01c      	beq.n	132fa <setvbuf+0x106>
   132c0:	f013 0001 	ands.w	r0, r3, #1
   132c4:	d033      	beq.n	1332e <setvbuf+0x13a>
   132c6:	2000      	movs	r0, #0
   132c8:	4276      	negs	r6, r6
   132ca:	61a6      	str	r6, [r4, #24]
   132cc:	60a0      	str	r0, [r4, #8]
   132ce:	b003      	add	sp, #12
   132d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   132d4:	4628      	mov	r0, r5
   132d6:	f000 fe61 	bl	13f9c <__sinit>
   132da:	4b21      	ldr	r3, [pc, #132]	; (13360 <setvbuf+0x16c>)
   132dc:	429c      	cmp	r4, r3
   132de:	d199      	bne.n	13214 <setvbuf+0x20>
   132e0:	686c      	ldr	r4, [r5, #4]
   132e2:	e79e      	b.n	13222 <setvbuf+0x2e>
   132e4:	68ac      	ldr	r4, [r5, #8]
   132e6:	e79c      	b.n	13222 <setvbuf+0x2e>
   132e8:	2f00      	cmp	r7, #0
   132ea:	d0ce      	beq.n	1328a <setvbuf+0x96>
   132ec:	69ab      	ldr	r3, [r5, #24]
   132ee:	2b00      	cmp	r3, #0
   132f0:	d1d7      	bne.n	132a2 <setvbuf+0xae>
   132f2:	4628      	mov	r0, r5
   132f4:	f000 fe52 	bl	13f9c <__sinit>
   132f8:	e7d3      	b.n	132a2 <setvbuf+0xae>
   132fa:	60a0      	str	r0, [r4, #8]
   132fc:	b003      	add	sp, #12
   132fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13302:	6921      	ldr	r1, [r4, #16]
   13304:	4628      	mov	r0, r5
   13306:	f7ff fdcd 	bl	12ea4 <_free_r>
   1330a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1330e:	e7a8      	b.n	13262 <setvbuf+0x6e>
   13310:	2000      	movs	r0, #0
   13312:	f104 0247 	add.w	r2, r4, #71	; 0x47
   13316:	f043 0302 	orr.w	r3, r3, #2
   1331a:	2500      	movs	r5, #0
   1331c:	2101      	movs	r1, #1
   1331e:	81a3      	strh	r3, [r4, #12]
   13320:	60a5      	str	r5, [r4, #8]
   13322:	6022      	str	r2, [r4, #0]
   13324:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13328:	b003      	add	sp, #12
   1332a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1332e:	60a6      	str	r6, [r4, #8]
   13330:	b003      	add	sp, #12
   13332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13336:	f8dd 9000 	ldr.w	r9, [sp]
   1333a:	45b1      	cmp	r9, r6
   1333c:	d006      	beq.n	1334c <setvbuf+0x158>
   1333e:	4648      	mov	r0, r9
   13340:	f7ff fcb6 	bl	12cb0 <malloc>
   13344:	4607      	mov	r7, r0
   13346:	b108      	cbz	r0, 1334c <setvbuf+0x158>
   13348:	464e      	mov	r6, r9
   1334a:	e7a4      	b.n	13296 <setvbuf+0xa2>
   1334c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13354:	e7dd      	b.n	13312 <setvbuf+0x11e>
   13356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1335a:	e7cf      	b.n	132fc <setvbuf+0x108>
   1335c:	20000548 	.word	0x20000548
   13360:	000162e0 	.word	0x000162e0
   13364:	000162c0 	.word	0x000162c0
   13368:	000162a0 	.word	0x000162a0

0001336c <_sniprintf_r>:
   1336c:	b408      	push	{r3}
   1336e:	b530      	push	{r4, r5, lr}
   13370:	2a00      	cmp	r2, #0
   13372:	b09c      	sub	sp, #112	; 0x70
   13374:	4604      	mov	r4, r0
   13376:	db35      	blt.n	133e4 <_sniprintf_r+0x78>
   13378:	f44f 7302 	mov.w	r3, #520	; 0x208
   1337c:	9102      	str	r1, [sp, #8]
   1337e:	9106      	str	r1, [sp, #24]
   13380:	f8ad 3014 	strh.w	r3, [sp, #20]
   13384:	a920      	add	r1, sp, #128	; 0x80
   13386:	d018      	beq.n	133ba <_sniprintf_r+0x4e>
   13388:	3a01      	subs	r2, #1
   1338a:	460b      	mov	r3, r1
   1338c:	9204      	str	r2, [sp, #16]
   1338e:	9207      	str	r2, [sp, #28]
   13390:	9101      	str	r1, [sp, #4]
   13392:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   13394:	f64f 75ff 	movw	r5, #65535	; 0xffff
   13398:	a902      	add	r1, sp, #8
   1339a:	f8ad 5016 	strh.w	r5, [sp, #22]
   1339e:	f000 ffc5 	bl	1432c <_svfiprintf_r>
   133a2:	1c42      	adds	r2, r0, #1
   133a4:	da01      	bge.n	133aa <_sniprintf_r+0x3e>
   133a6:	238b      	movs	r3, #139	; 0x8b
   133a8:	6023      	str	r3, [r4, #0]
   133aa:	9b02      	ldr	r3, [sp, #8]
   133ac:	2200      	movs	r2, #0
   133ae:	701a      	strb	r2, [r3, #0]
   133b0:	b01c      	add	sp, #112	; 0x70
   133b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   133b6:	b001      	add	sp, #4
   133b8:	4770      	bx	lr
   133ba:	460b      	mov	r3, r1
   133bc:	9204      	str	r2, [sp, #16]
   133be:	9207      	str	r2, [sp, #28]
   133c0:	9101      	str	r1, [sp, #4]
   133c2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   133c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   133c8:	f8ad 5016 	strh.w	r5, [sp, #22]
   133cc:	a902      	add	r1, sp, #8
   133ce:	f000 ffad 	bl	1432c <_svfiprintf_r>
   133d2:	1c43      	adds	r3, r0, #1
   133d4:	da01      	bge.n	133da <_sniprintf_r+0x6e>
   133d6:	238b      	movs	r3, #139	; 0x8b
   133d8:	6023      	str	r3, [r4, #0]
   133da:	b01c      	add	sp, #112	; 0x70
   133dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   133e0:	b001      	add	sp, #4
   133e2:	4770      	bx	lr
   133e4:	228b      	movs	r2, #139	; 0x8b
   133e6:	6002      	str	r2, [r0, #0]
   133e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   133ec:	e7f5      	b.n	133da <_sniprintf_r+0x6e>
   133ee:	bf00      	nop

000133f0 <sniprintf>:
   133f0:	b40c      	push	{r2, r3}
   133f2:	b530      	push	{r4, r5, lr}
   133f4:	4b20      	ldr	r3, [pc, #128]	; (13478 <sniprintf+0x88>)
   133f6:	2900      	cmp	r1, #0
   133f8:	b09d      	sub	sp, #116	; 0x74
   133fa:	681c      	ldr	r4, [r3, #0]
   133fc:	db37      	blt.n	1346e <sniprintf+0x7e>
   133fe:	f44f 7302 	mov.w	r3, #520	; 0x208
   13402:	9002      	str	r0, [sp, #8]
   13404:	9006      	str	r0, [sp, #24]
   13406:	f8ad 3014 	strh.w	r3, [sp, #20]
   1340a:	a821      	add	r0, sp, #132	; 0x84
   1340c:	d019      	beq.n	13442 <sniprintf+0x52>
   1340e:	3901      	subs	r1, #1
   13410:	4603      	mov	r3, r0
   13412:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13414:	9104      	str	r1, [sp, #16]
   13416:	9107      	str	r1, [sp, #28]
   13418:	9001      	str	r0, [sp, #4]
   1341a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1341e:	a902      	add	r1, sp, #8
   13420:	4620      	mov	r0, r4
   13422:	f8ad 5016 	strh.w	r5, [sp, #22]
   13426:	f000 ff81 	bl	1432c <_svfiprintf_r>
   1342a:	1c42      	adds	r2, r0, #1
   1342c:	da01      	bge.n	13432 <sniprintf+0x42>
   1342e:	238b      	movs	r3, #139	; 0x8b
   13430:	6023      	str	r3, [r4, #0]
   13432:	9b02      	ldr	r3, [sp, #8]
   13434:	2200      	movs	r2, #0
   13436:	701a      	strb	r2, [r3, #0]
   13438:	b01d      	add	sp, #116	; 0x74
   1343a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1343e:	b002      	add	sp, #8
   13440:	4770      	bx	lr
   13442:	4603      	mov	r3, r0
   13444:	9104      	str	r1, [sp, #16]
   13446:	9107      	str	r1, [sp, #28]
   13448:	9001      	str	r0, [sp, #4]
   1344a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1344e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13450:	f8ad 5016 	strh.w	r5, [sp, #22]
   13454:	a902      	add	r1, sp, #8
   13456:	4620      	mov	r0, r4
   13458:	f000 ff68 	bl	1432c <_svfiprintf_r>
   1345c:	1c43      	adds	r3, r0, #1
   1345e:	da01      	bge.n	13464 <sniprintf+0x74>
   13460:	238b      	movs	r3, #139	; 0x8b
   13462:	6023      	str	r3, [r4, #0]
   13464:	b01d      	add	sp, #116	; 0x74
   13466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1346a:	b002      	add	sp, #8
   1346c:	4770      	bx	lr
   1346e:	238b      	movs	r3, #139	; 0x8b
   13470:	6023      	str	r3, [r4, #0]
   13472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13476:	e7f5      	b.n	13464 <sniprintf+0x74>
   13478:	20000548 	.word	0x20000548

0001347c <_siprintf_r>:
   1347c:	b40c      	push	{r2, r3}
   1347e:	b570      	push	{r4, r5, r6, lr}
   13480:	b09c      	sub	sp, #112	; 0x70
   13482:	ac20      	add	r4, sp, #128	; 0x80
   13484:	4e0b      	ldr	r6, [pc, #44]	; (134b4 <_siprintf_r+0x38>)
   13486:	f854 2b04 	ldr.w	r2, [r4], #4
   1348a:	9102      	str	r1, [sp, #8]
   1348c:	4623      	mov	r3, r4
   1348e:	9106      	str	r1, [sp, #24]
   13490:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   13494:	a902      	add	r1, sp, #8
   13496:	9401      	str	r4, [sp, #4]
   13498:	9507      	str	r5, [sp, #28]
   1349a:	e9cd 5604 	strd	r5, r6, [sp, #16]
   1349e:	f000 ff45 	bl	1432c <_svfiprintf_r>
   134a2:	9b02      	ldr	r3, [sp, #8]
   134a4:	2200      	movs	r2, #0
   134a6:	701a      	strb	r2, [r3, #0]
   134a8:	b01c      	add	sp, #112	; 0x70
   134aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   134ae:	b002      	add	sp, #8
   134b0:	4770      	bx	lr
   134b2:	bf00      	nop
   134b4:	ffff0208 	.word	0xffff0208

000134b8 <siprintf>:
   134b8:	b40e      	push	{r1, r2, r3}
   134ba:	b530      	push	{r4, r5, lr}
   134bc:	b09c      	sub	sp, #112	; 0x70
   134be:	ab1f      	add	r3, sp, #124	; 0x7c
   134c0:	4c0c      	ldr	r4, [pc, #48]	; (134f4 <siprintf+0x3c>)
   134c2:	4d0d      	ldr	r5, [pc, #52]	; (134f8 <siprintf+0x40>)
   134c4:	f853 2b04 	ldr.w	r2, [r3], #4
   134c8:	9301      	str	r3, [sp, #4]
   134ca:	4601      	mov	r1, r0
   134cc:	9102      	str	r1, [sp, #8]
   134ce:	9106      	str	r1, [sp, #24]
   134d0:	6820      	ldr	r0, [r4, #0]
   134d2:	a902      	add	r1, sp, #8
   134d4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   134d8:	9407      	str	r4, [sp, #28]
   134da:	e9cd 4504 	strd	r4, r5, [sp, #16]
   134de:	f000 ff25 	bl	1432c <_svfiprintf_r>
   134e2:	9b02      	ldr	r3, [sp, #8]
   134e4:	2200      	movs	r2, #0
   134e6:	701a      	strb	r2, [r3, #0]
   134e8:	b01c      	add	sp, #112	; 0x70
   134ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   134ee:	b003      	add	sp, #12
   134f0:	4770      	bx	lr
   134f2:	bf00      	nop
   134f4:	20000548 	.word	0x20000548
   134f8:	ffff0208 	.word	0xffff0208

000134fc <strchr>:
   134fc:	b2c9      	uxtb	r1, r1
   134fe:	f000 0303 	and.w	r3, r0, #3
   13502:	2900      	cmp	r1, #0
   13504:	d035      	beq.n	13572 <strchr+0x76>
   13506:	b17b      	cbz	r3, 13528 <strchr+0x2c>
   13508:	7803      	ldrb	r3, [r0, #0]
   1350a:	2b00      	cmp	r3, #0
   1350c:	d057      	beq.n	135be <strchr+0xc2>
   1350e:	4299      	cmp	r1, r3
   13510:	d052      	beq.n	135b8 <strchr+0xbc>
   13512:	1c43      	adds	r3, r0, #1
   13514:	e005      	b.n	13522 <strchr+0x26>
   13516:	f813 2b01 	ldrb.w	r2, [r3], #1
   1351a:	2a00      	cmp	r2, #0
   1351c:	d04d      	beq.n	135ba <strchr+0xbe>
   1351e:	428a      	cmp	r2, r1
   13520:	d04a      	beq.n	135b8 <strchr+0xbc>
   13522:	079a      	lsls	r2, r3, #30
   13524:	4618      	mov	r0, r3
   13526:	d1f6      	bne.n	13516 <strchr+0x1a>
   13528:	b470      	push	{r4, r5, r6}
   1352a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   1352e:	6804      	ldr	r4, [r0, #0]
   13530:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   13534:	e001      	b.n	1353a <strchr+0x3e>
   13536:	f850 4f04 	ldr.w	r4, [r0, #4]!
   1353a:	ea86 0504 	eor.w	r5, r6, r4
   1353e:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   13542:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
   13546:	ea22 0205 	bic.w	r2, r2, r5
   1354a:	ea23 0304 	bic.w	r3, r3, r4
   1354e:	4313      	orrs	r3, r2
   13550:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   13554:	d0ef      	beq.n	13536 <strchr+0x3a>
   13556:	7803      	ldrb	r3, [r0, #0]
   13558:	b143      	cbz	r3, 1356c <strchr+0x70>
   1355a:	4299      	cmp	r1, r3
   1355c:	d102      	bne.n	13564 <strchr+0x68>
   1355e:	e006      	b.n	1356e <strchr+0x72>
   13560:	428b      	cmp	r3, r1
   13562:	d004      	beq.n	1356e <strchr+0x72>
   13564:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   13568:	2b00      	cmp	r3, #0
   1356a:	d1f9      	bne.n	13560 <strchr+0x64>
   1356c:	4618      	mov	r0, r3
   1356e:	bc70      	pop	{r4, r5, r6}
   13570:	4770      	bx	lr
   13572:	b14b      	cbz	r3, 13588 <strchr+0x8c>
   13574:	7803      	ldrb	r3, [r0, #0]
   13576:	b1fb      	cbz	r3, 135b8 <strchr+0xbc>
   13578:	1c43      	adds	r3, r0, #1
   1357a:	e002      	b.n	13582 <strchr+0x86>
   1357c:	7802      	ldrb	r2, [r0, #0]
   1357e:	3301      	adds	r3, #1
   13580:	b1d2      	cbz	r2, 135b8 <strchr+0xbc>
   13582:	0799      	lsls	r1, r3, #30
   13584:	4618      	mov	r0, r3
   13586:	d1f9      	bne.n	1357c <strchr+0x80>
   13588:	6802      	ldr	r2, [r0, #0]
   1358a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   1358e:	ea23 0302 	bic.w	r3, r3, r2
   13592:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   13596:	d108      	bne.n	135aa <strchr+0xae>
   13598:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1359c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   135a0:	ea23 0302 	bic.w	r3, r3, r2
   135a4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   135a8:	d0f6      	beq.n	13598 <strchr+0x9c>
   135aa:	7803      	ldrb	r3, [r0, #0]
   135ac:	b123      	cbz	r3, 135b8 <strchr+0xbc>
   135ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   135b2:	2b00      	cmp	r3, #0
   135b4:	d1fb      	bne.n	135ae <strchr+0xb2>
   135b6:	4770      	bx	lr
   135b8:	4770      	bx	lr
   135ba:	4610      	mov	r0, r2
   135bc:	4770      	bx	lr
   135be:	4618      	mov	r0, r3
   135c0:	4770      	bx	lr
   135c2:	bf00      	nop
	...
   135e0:	eba2 0003 	sub.w	r0, r2, r3
   135e4:	4770      	bx	lr
   135e6:	bf00      	nop

000135e8 <strcmp>:
   135e8:	7802      	ldrb	r2, [r0, #0]
   135ea:	780b      	ldrb	r3, [r1, #0]
   135ec:	2a01      	cmp	r2, #1
   135ee:	bf28      	it	cs
   135f0:	429a      	cmpcs	r2, r3
   135f2:	d1f5      	bne.n	135e0 <strchr+0xe4>
   135f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   135f8:	ea40 0401 	orr.w	r4, r0, r1
   135fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   13600:	f06f 0c00 	mvn.w	ip, #0
   13604:	ea4f 7244 	mov.w	r2, r4, lsl #29
   13608:	b312      	cbz	r2, 13650 <strcmp+0x68>
   1360a:	ea80 0401 	eor.w	r4, r0, r1
   1360e:	f014 0f07 	tst.w	r4, #7
   13612:	d16a      	bne.n	136ea <strcmp+0x102>
   13614:	f000 0407 	and.w	r4, r0, #7
   13618:	f020 0007 	bic.w	r0, r0, #7
   1361c:	f004 0503 	and.w	r5, r4, #3
   13620:	f021 0107 	bic.w	r1, r1, #7
   13624:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   13628:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1362c:	f014 0f04 	tst.w	r4, #4
   13630:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   13634:	fa0c f405 	lsl.w	r4, ip, r5
   13638:	ea62 0204 	orn	r2, r2, r4
   1363c:	ea66 0604 	orn	r6, r6, r4
   13640:	d00a      	beq.n	13658 <strcmp+0x70>
   13642:	ea63 0304 	orn	r3, r3, r4
   13646:	4662      	mov	r2, ip
   13648:	ea67 0704 	orn	r7, r7, r4
   1364c:	4666      	mov	r6, ip
   1364e:	e003      	b.n	13658 <strcmp+0x70>
   13650:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   13654:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   13658:	fa82 f54c 	uadd8	r5, r2, ip
   1365c:	ea82 0406 	eor.w	r4, r2, r6
   13660:	faa4 f48c 	sel	r4, r4, ip
   13664:	bb6c      	cbnz	r4, 136c2 <strcmp+0xda>
   13666:	fa83 f54c 	uadd8	r5, r3, ip
   1366a:	ea83 0507 	eor.w	r5, r3, r7
   1366e:	faa5 f58c 	sel	r5, r5, ip
   13672:	b995      	cbnz	r5, 1369a <strcmp+0xb2>
   13674:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   13678:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1367c:	fa82 f54c 	uadd8	r5, r2, ip
   13680:	ea82 0406 	eor.w	r4, r2, r6
   13684:	faa4 f48c 	sel	r4, r4, ip
   13688:	fa83 f54c 	uadd8	r5, r3, ip
   1368c:	ea83 0507 	eor.w	r5, r3, r7
   13690:	faa5 f58c 	sel	r5, r5, ip
   13694:	4325      	orrs	r5, r4
   13696:	d0db      	beq.n	13650 <strcmp+0x68>
   13698:	b99c      	cbnz	r4, 136c2 <strcmp+0xda>
   1369a:	ba2d      	rev	r5, r5
   1369c:	fab5 f485 	clz	r4, r5
   136a0:	f024 0407 	bic.w	r4, r4, #7
   136a4:	fa27 f104 	lsr.w	r1, r7, r4
   136a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   136ac:	fa23 f304 	lsr.w	r3, r3, r4
   136b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   136b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   136b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   136bc:	eba0 0001 	sub.w	r0, r0, r1
   136c0:	4770      	bx	lr
   136c2:	ba24      	rev	r4, r4
   136c4:	fab4 f484 	clz	r4, r4
   136c8:	f024 0407 	bic.w	r4, r4, #7
   136cc:	fa26 f104 	lsr.w	r1, r6, r4
   136d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   136d4:	fa22 f204 	lsr.w	r2, r2, r4
   136d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   136dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   136e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   136e4:	eba0 0001 	sub.w	r0, r0, r1
   136e8:	4770      	bx	lr
   136ea:	f014 0f03 	tst.w	r4, #3
   136ee:	d13c      	bne.n	1376a <strcmp+0x182>
   136f0:	f010 0403 	ands.w	r4, r0, #3
   136f4:	d128      	bne.n	13748 <strcmp+0x160>
   136f6:	f850 2b08 	ldr.w	r2, [r0], #8
   136fa:	f851 3b08 	ldr.w	r3, [r1], #8
   136fe:	fa82 f54c 	uadd8	r5, r2, ip
   13702:	ea82 0503 	eor.w	r5, r2, r3
   13706:	faa5 f58c 	sel	r5, r5, ip
   1370a:	b95d      	cbnz	r5, 13724 <strcmp+0x13c>
   1370c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   13710:	f851 3c04 	ldr.w	r3, [r1, #-4]
   13714:	fa82 f54c 	uadd8	r5, r2, ip
   13718:	ea82 0503 	eor.w	r5, r2, r3
   1371c:	faa5 f58c 	sel	r5, r5, ip
   13720:	2d00      	cmp	r5, #0
   13722:	d0e8      	beq.n	136f6 <strcmp+0x10e>
   13724:	ba2d      	rev	r5, r5
   13726:	fab5 f485 	clz	r4, r5
   1372a:	f024 0407 	bic.w	r4, r4, #7
   1372e:	fa23 f104 	lsr.w	r1, r3, r4
   13732:	fa22 f204 	lsr.w	r2, r2, r4
   13736:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1373a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1373e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   13742:	eba0 0001 	sub.w	r0, r0, r1
   13746:	4770      	bx	lr
   13748:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1374c:	f020 0003 	bic.w	r0, r0, #3
   13750:	f850 2b08 	ldr.w	r2, [r0], #8
   13754:	f021 0103 	bic.w	r1, r1, #3
   13758:	f851 3b08 	ldr.w	r3, [r1], #8
   1375c:	fa0c f404 	lsl.w	r4, ip, r4
   13760:	ea62 0204 	orn	r2, r2, r4
   13764:	ea63 0304 	orn	r3, r3, r4
   13768:	e7c9      	b.n	136fe <strcmp+0x116>
   1376a:	f010 0403 	ands.w	r4, r0, #3
   1376e:	d01a      	beq.n	137a6 <strcmp+0x1be>
   13770:	eba1 0104 	sub.w	r1, r1, r4
   13774:	f020 0003 	bic.w	r0, r0, #3
   13778:	07e4      	lsls	r4, r4, #31
   1377a:	f850 2b04 	ldr.w	r2, [r0], #4
   1377e:	d006      	beq.n	1378e <strcmp+0x1a6>
   13780:	d20f      	bcs.n	137a2 <strcmp+0x1ba>
   13782:	788b      	ldrb	r3, [r1, #2]
   13784:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   13788:	1ae4      	subs	r4, r4, r3
   1378a:	d106      	bne.n	1379a <strcmp+0x1b2>
   1378c:	b12b      	cbz	r3, 1379a <strcmp+0x1b2>
   1378e:	78cb      	ldrb	r3, [r1, #3]
   13790:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   13794:	1ae4      	subs	r4, r4, r3
   13796:	d100      	bne.n	1379a <strcmp+0x1b2>
   13798:	b91b      	cbnz	r3, 137a2 <strcmp+0x1ba>
   1379a:	4620      	mov	r0, r4
   1379c:	f85d 4b10 	ldr.w	r4, [sp], #16
   137a0:	4770      	bx	lr
   137a2:	f101 0104 	add.w	r1, r1, #4
   137a6:	f850 2b04 	ldr.w	r2, [r0], #4
   137aa:	07cc      	lsls	r4, r1, #31
   137ac:	f021 0103 	bic.w	r1, r1, #3
   137b0:	f851 3b04 	ldr.w	r3, [r1], #4
   137b4:	d848      	bhi.n	13848 <strcmp+0x260>
   137b6:	d224      	bcs.n	13802 <strcmp+0x21a>
   137b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   137bc:	fa82 f54c 	uadd8	r5, r2, ip
   137c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   137c4:	faa5 f58c 	sel	r5, r5, ip
   137c8:	d10a      	bne.n	137e0 <strcmp+0x1f8>
   137ca:	b965      	cbnz	r5, 137e6 <strcmp+0x1fe>
   137cc:	f851 3b04 	ldr.w	r3, [r1], #4
   137d0:	ea84 0402 	eor.w	r4, r4, r2
   137d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   137d8:	d10e      	bne.n	137f8 <strcmp+0x210>
   137da:	f850 2b04 	ldr.w	r2, [r0], #4
   137de:	e7eb      	b.n	137b8 <strcmp+0x1d0>
   137e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   137e4:	e055      	b.n	13892 <strcmp+0x2aa>
   137e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   137ea:	d14d      	bne.n	13888 <strcmp+0x2a0>
   137ec:	7808      	ldrb	r0, [r1, #0]
   137ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   137f2:	f1c0 0000 	rsb	r0, r0, #0
   137f6:	4770      	bx	lr
   137f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   137fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   13800:	e047      	b.n	13892 <strcmp+0x2aa>
   13802:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   13806:	fa82 f54c 	uadd8	r5, r2, ip
   1380a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   1380e:	faa5 f58c 	sel	r5, r5, ip
   13812:	d10a      	bne.n	1382a <strcmp+0x242>
   13814:	b965      	cbnz	r5, 13830 <strcmp+0x248>
   13816:	f851 3b04 	ldr.w	r3, [r1], #4
   1381a:	ea84 0402 	eor.w	r4, r4, r2
   1381e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   13822:	d10c      	bne.n	1383e <strcmp+0x256>
   13824:	f850 2b04 	ldr.w	r2, [r0], #4
   13828:	e7eb      	b.n	13802 <strcmp+0x21a>
   1382a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   1382e:	e030      	b.n	13892 <strcmp+0x2aa>
   13830:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   13834:	d128      	bne.n	13888 <strcmp+0x2a0>
   13836:	880b      	ldrh	r3, [r1, #0]
   13838:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1383c:	e029      	b.n	13892 <strcmp+0x2aa>
   1383e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   13842:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   13846:	e024      	b.n	13892 <strcmp+0x2aa>
   13848:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   1384c:	fa82 f54c 	uadd8	r5, r2, ip
   13850:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   13854:	faa5 f58c 	sel	r5, r5, ip
   13858:	d10a      	bne.n	13870 <strcmp+0x288>
   1385a:	b965      	cbnz	r5, 13876 <strcmp+0x28e>
   1385c:	f851 3b04 	ldr.w	r3, [r1], #4
   13860:	ea84 0402 	eor.w	r4, r4, r2
   13864:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   13868:	d109      	bne.n	1387e <strcmp+0x296>
   1386a:	f850 2b04 	ldr.w	r2, [r0], #4
   1386e:	e7eb      	b.n	13848 <strcmp+0x260>
   13870:	ea4f 6313 	mov.w	r3, r3, lsr #24
   13874:	e00d      	b.n	13892 <strcmp+0x2aa>
   13876:	f015 0fff 	tst.w	r5, #255	; 0xff
   1387a:	d105      	bne.n	13888 <strcmp+0x2a0>
   1387c:	680b      	ldr	r3, [r1, #0]
   1387e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   13882:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   13886:	e004      	b.n	13892 <strcmp+0x2aa>
   13888:	f04f 0000 	mov.w	r0, #0
   1388c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   13890:	4770      	bx	lr
   13892:	ba12      	rev	r2, r2
   13894:	ba1b      	rev	r3, r3
   13896:	fa82 f44c 	uadd8	r4, r2, ip
   1389a:	ea82 0403 	eor.w	r4, r2, r3
   1389e:	faa4 f58c 	sel	r5, r4, ip
   138a2:	fab5 f485 	clz	r4, r5
   138a6:	fa02 f204 	lsl.w	r2, r2, r4
   138aa:	fa03 f304 	lsl.w	r3, r3, r4
   138ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
   138b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   138b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   138ba:	4770      	bx	lr

000138bc <strcpy>:
   138bc:	ea80 0201 	eor.w	r2, r0, r1
   138c0:	4684      	mov	ip, r0
   138c2:	f012 0f03 	tst.w	r2, #3
   138c6:	d14f      	bne.n	13968 <strcpy+0xac>
   138c8:	f011 0f03 	tst.w	r1, #3
   138cc:	d132      	bne.n	13934 <strcpy+0x78>
   138ce:	f84d 4d04 	str.w	r4, [sp, #-4]!
   138d2:	f011 0f04 	tst.w	r1, #4
   138d6:	f851 3b04 	ldr.w	r3, [r1], #4
   138da:	d00b      	beq.n	138f4 <strcpy+0x38>
   138dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   138e0:	439a      	bics	r2, r3
   138e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   138e6:	bf04      	itt	eq
   138e8:	f84c 3b04 	streq.w	r3, [ip], #4
   138ec:	f851 3b04 	ldreq.w	r3, [r1], #4
   138f0:	d116      	bne.n	13920 <strcpy+0x64>
   138f2:	bf00      	nop
   138f4:	f851 4b04 	ldr.w	r4, [r1], #4
   138f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   138fc:	439a      	bics	r2, r3
   138fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   13902:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   13906:	d10b      	bne.n	13920 <strcpy+0x64>
   13908:	f84c 3b04 	str.w	r3, [ip], #4
   1390c:	43a2      	bics	r2, r4
   1390e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   13912:	bf04      	itt	eq
   13914:	f851 3b04 	ldreq.w	r3, [r1], #4
   13918:	f84c 4b04 	streq.w	r4, [ip], #4
   1391c:	d0ea      	beq.n	138f4 <strcpy+0x38>
   1391e:	4623      	mov	r3, r4
   13920:	f80c 3b01 	strb.w	r3, [ip], #1
   13924:	f013 0fff 	tst.w	r3, #255	; 0xff
   13928:	ea4f 2333 	mov.w	r3, r3, ror #8
   1392c:	d1f8      	bne.n	13920 <strcpy+0x64>
   1392e:	f85d 4b04 	ldr.w	r4, [sp], #4
   13932:	4770      	bx	lr
   13934:	f011 0f01 	tst.w	r1, #1
   13938:	d006      	beq.n	13948 <strcpy+0x8c>
   1393a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1393e:	f80c 2b01 	strb.w	r2, [ip], #1
   13942:	2a00      	cmp	r2, #0
   13944:	bf08      	it	eq
   13946:	4770      	bxeq	lr
   13948:	f011 0f02 	tst.w	r1, #2
   1394c:	d0bf      	beq.n	138ce <strcpy+0x12>
   1394e:	f831 2b02 	ldrh.w	r2, [r1], #2
   13952:	f012 0fff 	tst.w	r2, #255	; 0xff
   13956:	bf16      	itet	ne
   13958:	f82c 2b02 	strhne.w	r2, [ip], #2
   1395c:	f88c 2000 	strbeq.w	r2, [ip]
   13960:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   13964:	d1b3      	bne.n	138ce <strcpy+0x12>
   13966:	4770      	bx	lr
   13968:	f811 2b01 	ldrb.w	r2, [r1], #1
   1396c:	f80c 2b01 	strb.w	r2, [ip], #1
   13970:	2a00      	cmp	r2, #0
   13972:	d1f9      	bne.n	13968 <strcpy+0xac>
   13974:	4770      	bx	lr
   13976:	bf00      	nop
	...

00013980 <strlen>:
   13980:	f890 f000 	pld	[r0]
   13984:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   13988:	f020 0107 	bic.w	r1, r0, #7
   1398c:	f06f 0c00 	mvn.w	ip, #0
   13990:	f010 0407 	ands.w	r4, r0, #7
   13994:	f891 f020 	pld	[r1, #32]
   13998:	f040 8049 	bne.w	13a2e <strlen+0xae>
   1399c:	f04f 0400 	mov.w	r4, #0
   139a0:	f06f 0007 	mvn.w	r0, #7
   139a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   139a8:	f891 f040 	pld	[r1, #64]	; 0x40
   139ac:	f100 0008 	add.w	r0, r0, #8
   139b0:	fa82 f24c 	uadd8	r2, r2, ip
   139b4:	faa4 f28c 	sel	r2, r4, ip
   139b8:	fa83 f34c 	uadd8	r3, r3, ip
   139bc:	faa2 f38c 	sel	r3, r2, ip
   139c0:	bb4b      	cbnz	r3, 13a16 <strlen+0x96>
   139c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   139c6:	fa82 f24c 	uadd8	r2, r2, ip
   139ca:	f100 0008 	add.w	r0, r0, #8
   139ce:	faa4 f28c 	sel	r2, r4, ip
   139d2:	fa83 f34c 	uadd8	r3, r3, ip
   139d6:	faa2 f38c 	sel	r3, r2, ip
   139da:	b9e3      	cbnz	r3, 13a16 <strlen+0x96>
   139dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   139e0:	fa82 f24c 	uadd8	r2, r2, ip
   139e4:	f100 0008 	add.w	r0, r0, #8
   139e8:	faa4 f28c 	sel	r2, r4, ip
   139ec:	fa83 f34c 	uadd8	r3, r3, ip
   139f0:	faa2 f38c 	sel	r3, r2, ip
   139f4:	b97b      	cbnz	r3, 13a16 <strlen+0x96>
   139f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   139fa:	f101 0120 	add.w	r1, r1, #32
   139fe:	fa82 f24c 	uadd8	r2, r2, ip
   13a02:	f100 0008 	add.w	r0, r0, #8
   13a06:	faa4 f28c 	sel	r2, r4, ip
   13a0a:	fa83 f34c 	uadd8	r3, r3, ip
   13a0e:	faa2 f38c 	sel	r3, r2, ip
   13a12:	2b00      	cmp	r3, #0
   13a14:	d0c6      	beq.n	139a4 <strlen+0x24>
   13a16:	2a00      	cmp	r2, #0
   13a18:	bf04      	itt	eq
   13a1a:	3004      	addeq	r0, #4
   13a1c:	461a      	moveq	r2, r3
   13a1e:	ba12      	rev	r2, r2
   13a20:	fab2 f282 	clz	r2, r2
   13a24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   13a28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   13a2c:	4770      	bx	lr
   13a2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   13a32:	f004 0503 	and.w	r5, r4, #3
   13a36:	f1c4 0000 	rsb	r0, r4, #0
   13a3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   13a3e:	f014 0f04 	tst.w	r4, #4
   13a42:	f891 f040 	pld	[r1, #64]	; 0x40
   13a46:	fa0c f505 	lsl.w	r5, ip, r5
   13a4a:	ea62 0205 	orn	r2, r2, r5
   13a4e:	bf1c      	itt	ne
   13a50:	ea63 0305 	ornne	r3, r3, r5
   13a54:	4662      	movne	r2, ip
   13a56:	f04f 0400 	mov.w	r4, #0
   13a5a:	e7a9      	b.n	139b0 <strlen+0x30>

00013a5c <__swbuf_r>:
   13a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a5e:	460d      	mov	r5, r1
   13a60:	4614      	mov	r4, r2
   13a62:	4606      	mov	r6, r0
   13a64:	b108      	cbz	r0, 13a6a <__swbuf_r+0xe>
   13a66:	6983      	ldr	r3, [r0, #24]
   13a68:	b343      	cbz	r3, 13abc <__swbuf_r+0x60>
   13a6a:	4b25      	ldr	r3, [pc, #148]	; (13b00 <__swbuf_r+0xa4>)
   13a6c:	429c      	cmp	r4, r3
   13a6e:	d02a      	beq.n	13ac6 <__swbuf_r+0x6a>
   13a70:	4b24      	ldr	r3, [pc, #144]	; (13b04 <__swbuf_r+0xa8>)
   13a72:	429c      	cmp	r4, r3
   13a74:	d029      	beq.n	13aca <__swbuf_r+0x6e>
   13a76:	4b24      	ldr	r3, [pc, #144]	; (13b08 <__swbuf_r+0xac>)
   13a78:	429c      	cmp	r4, r3
   13a7a:	bf08      	it	eq
   13a7c:	68f4      	ldreq	r4, [r6, #12]
   13a7e:	89a3      	ldrh	r3, [r4, #12]
   13a80:	69a2      	ldr	r2, [r4, #24]
   13a82:	60a2      	str	r2, [r4, #8]
   13a84:	071a      	lsls	r2, r3, #28
   13a86:	d522      	bpl.n	13ace <__swbuf_r+0x72>
   13a88:	6923      	ldr	r3, [r4, #16]
   13a8a:	b303      	cbz	r3, 13ace <__swbuf_r+0x72>
   13a8c:	6822      	ldr	r2, [r4, #0]
   13a8e:	6961      	ldr	r1, [r4, #20]
   13a90:	1ad3      	subs	r3, r2, r3
   13a92:	b2ed      	uxtb	r5, r5
   13a94:	4299      	cmp	r1, r3
   13a96:	462f      	mov	r7, r5
   13a98:	dd29      	ble.n	13aee <__swbuf_r+0x92>
   13a9a:	3301      	adds	r3, #1
   13a9c:	68a1      	ldr	r1, [r4, #8]
   13a9e:	1c50      	adds	r0, r2, #1
   13aa0:	3901      	subs	r1, #1
   13aa2:	60a1      	str	r1, [r4, #8]
   13aa4:	6020      	str	r0, [r4, #0]
   13aa6:	7015      	strb	r5, [r2, #0]
   13aa8:	6962      	ldr	r2, [r4, #20]
   13aaa:	429a      	cmp	r2, r3
   13aac:	d016      	beq.n	13adc <__swbuf_r+0x80>
   13aae:	89a3      	ldrh	r3, [r4, #12]
   13ab0:	07db      	lsls	r3, r3, #31
   13ab2:	d501      	bpl.n	13ab8 <__swbuf_r+0x5c>
   13ab4:	2d0a      	cmp	r5, #10
   13ab6:	d011      	beq.n	13adc <__swbuf_r+0x80>
   13ab8:	4638      	mov	r0, r7
   13aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13abc:	f000 fa6e 	bl	13f9c <__sinit>
   13ac0:	4b0f      	ldr	r3, [pc, #60]	; (13b00 <__swbuf_r+0xa4>)
   13ac2:	429c      	cmp	r4, r3
   13ac4:	d1d4      	bne.n	13a70 <__swbuf_r+0x14>
   13ac6:	6874      	ldr	r4, [r6, #4]
   13ac8:	e7d9      	b.n	13a7e <__swbuf_r+0x22>
   13aca:	68b4      	ldr	r4, [r6, #8]
   13acc:	e7d7      	b.n	13a7e <__swbuf_r+0x22>
   13ace:	4621      	mov	r1, r4
   13ad0:	4630      	mov	r0, r6
   13ad2:	f000 f823 	bl	13b1c <__swsetup_r>
   13ad6:	b938      	cbnz	r0, 13ae8 <__swbuf_r+0x8c>
   13ad8:	6923      	ldr	r3, [r4, #16]
   13ada:	e7d7      	b.n	13a8c <__swbuf_r+0x30>
   13adc:	4621      	mov	r1, r4
   13ade:	4630      	mov	r0, r6
   13ae0:	f000 f932 	bl	13d48 <_fflush_r>
   13ae4:	2800      	cmp	r0, #0
   13ae6:	d0e7      	beq.n	13ab8 <__swbuf_r+0x5c>
   13ae8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   13aec:	e7e4      	b.n	13ab8 <__swbuf_r+0x5c>
   13aee:	4621      	mov	r1, r4
   13af0:	4630      	mov	r0, r6
   13af2:	f000 f929 	bl	13d48 <_fflush_r>
   13af6:	2800      	cmp	r0, #0
   13af8:	d1f6      	bne.n	13ae8 <__swbuf_r+0x8c>
   13afa:	6822      	ldr	r2, [r4, #0]
   13afc:	2301      	movs	r3, #1
   13afe:	e7cd      	b.n	13a9c <__swbuf_r+0x40>
   13b00:	000162e0 	.word	0x000162e0
   13b04:	000162c0 	.word	0x000162c0
   13b08:	000162a0 	.word	0x000162a0

00013b0c <__swbuf>:
   13b0c:	4b02      	ldr	r3, [pc, #8]	; (13b18 <__swbuf+0xc>)
   13b0e:	460a      	mov	r2, r1
   13b10:	4601      	mov	r1, r0
   13b12:	6818      	ldr	r0, [r3, #0]
   13b14:	f7ff bfa2 	b.w	13a5c <__swbuf_r>
   13b18:	20000548 	.word	0x20000548

00013b1c <__swsetup_r>:
   13b1c:	4b3b      	ldr	r3, [pc, #236]	; (13c0c <__swsetup_r+0xf0>)
   13b1e:	b570      	push	{r4, r5, r6, lr}
   13b20:	681d      	ldr	r5, [r3, #0]
   13b22:	4606      	mov	r6, r0
   13b24:	460c      	mov	r4, r1
   13b26:	b10d      	cbz	r5, 13b2c <__swsetup_r+0x10>
   13b28:	69ab      	ldr	r3, [r5, #24]
   13b2a:	b1db      	cbz	r3, 13b64 <__swsetup_r+0x48>
   13b2c:	4b38      	ldr	r3, [pc, #224]	; (13c10 <__swsetup_r+0xf4>)
   13b2e:	429c      	cmp	r4, r3
   13b30:	d01e      	beq.n	13b70 <__swsetup_r+0x54>
   13b32:	4b38      	ldr	r3, [pc, #224]	; (13c14 <__swsetup_r+0xf8>)
   13b34:	429c      	cmp	r4, r3
   13b36:	d04a      	beq.n	13bce <__swsetup_r+0xb2>
   13b38:	4b37      	ldr	r3, [pc, #220]	; (13c18 <__swsetup_r+0xfc>)
   13b3a:	429c      	cmp	r4, r3
   13b3c:	bf08      	it	eq
   13b3e:	68ec      	ldreq	r4, [r5, #12]
   13b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13b44:	b293      	uxth	r3, r2
   13b46:	0719      	lsls	r1, r3, #28
   13b48:	d518      	bpl.n	13b7c <__swsetup_r+0x60>
   13b4a:	6920      	ldr	r0, [r4, #16]
   13b4c:	b308      	cbz	r0, 13b92 <__swsetup_r+0x76>
   13b4e:	f013 0201 	ands.w	r2, r3, #1
   13b52:	d02c      	beq.n	13bae <__swsetup_r+0x92>
   13b54:	6963      	ldr	r3, [r4, #20]
   13b56:	2200      	movs	r2, #0
   13b58:	425b      	negs	r3, r3
   13b5a:	61a3      	str	r3, [r4, #24]
   13b5c:	60a2      	str	r2, [r4, #8]
   13b5e:	b360      	cbz	r0, 13bba <__swsetup_r+0x9e>
   13b60:	2000      	movs	r0, #0
   13b62:	bd70      	pop	{r4, r5, r6, pc}
   13b64:	4628      	mov	r0, r5
   13b66:	f000 fa19 	bl	13f9c <__sinit>
   13b6a:	4b29      	ldr	r3, [pc, #164]	; (13c10 <__swsetup_r+0xf4>)
   13b6c:	429c      	cmp	r4, r3
   13b6e:	d1e0      	bne.n	13b32 <__swsetup_r+0x16>
   13b70:	686c      	ldr	r4, [r5, #4]
   13b72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13b76:	b293      	uxth	r3, r2
   13b78:	0719      	lsls	r1, r3, #28
   13b7a:	d4e6      	bmi.n	13b4a <__swsetup_r+0x2e>
   13b7c:	06dd      	lsls	r5, r3, #27
   13b7e:	d53c      	bpl.n	13bfa <__swsetup_r+0xde>
   13b80:	0758      	lsls	r0, r3, #29
   13b82:	d426      	bmi.n	13bd2 <__swsetup_r+0xb6>
   13b84:	6920      	ldr	r0, [r4, #16]
   13b86:	f042 0308 	orr.w	r3, r2, #8
   13b8a:	81a3      	strh	r3, [r4, #12]
   13b8c:	b29b      	uxth	r3, r3
   13b8e:	2800      	cmp	r0, #0
   13b90:	d1dd      	bne.n	13b4e <__swsetup_r+0x32>
   13b92:	f403 7220 	and.w	r2, r3, #640	; 0x280
   13b96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   13b9a:	d0d8      	beq.n	13b4e <__swsetup_r+0x32>
   13b9c:	4630      	mov	r0, r6
   13b9e:	4621      	mov	r1, r4
   13ba0:	f000 fa9a 	bl	140d8 <__smakebuf_r>
   13ba4:	89a3      	ldrh	r3, [r4, #12]
   13ba6:	6920      	ldr	r0, [r4, #16]
   13ba8:	f013 0201 	ands.w	r2, r3, #1
   13bac:	d1d2      	bne.n	13b54 <__swsetup_r+0x38>
   13bae:	0799      	lsls	r1, r3, #30
   13bb0:	bf58      	it	pl
   13bb2:	6962      	ldrpl	r2, [r4, #20]
   13bb4:	60a2      	str	r2, [r4, #8]
   13bb6:	2800      	cmp	r0, #0
   13bb8:	d1d2      	bne.n	13b60 <__swsetup_r+0x44>
   13bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13bbe:	061a      	lsls	r2, r3, #24
   13bc0:	d5cf      	bpl.n	13b62 <__swsetup_r+0x46>
   13bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13bc6:	81a3      	strh	r3, [r4, #12]
   13bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13bcc:	bd70      	pop	{r4, r5, r6, pc}
   13bce:	68ac      	ldr	r4, [r5, #8]
   13bd0:	e7b6      	b.n	13b40 <__swsetup_r+0x24>
   13bd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13bd4:	b151      	cbz	r1, 13bec <__swsetup_r+0xd0>
   13bd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13bda:	4299      	cmp	r1, r3
   13bdc:	d004      	beq.n	13be8 <__swsetup_r+0xcc>
   13bde:	4630      	mov	r0, r6
   13be0:	f7ff f960 	bl	12ea4 <_free_r>
   13be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13be8:	2300      	movs	r3, #0
   13bea:	6363      	str	r3, [r4, #52]	; 0x34
   13bec:	2300      	movs	r3, #0
   13bee:	6920      	ldr	r0, [r4, #16]
   13bf0:	6063      	str	r3, [r4, #4]
   13bf2:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   13bf6:	6020      	str	r0, [r4, #0]
   13bf8:	e7c5      	b.n	13b86 <__swsetup_r+0x6a>
   13bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13bfe:	2309      	movs	r3, #9
   13c00:	6033      	str	r3, [r6, #0]
   13c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13c06:	81a2      	strh	r2, [r4, #12]
   13c08:	bd70      	pop	{r4, r5, r6, pc}
   13c0a:	bf00      	nop
   13c0c:	20000548 	.word	0x20000548
   13c10:	000162e0 	.word	0x000162e0
   13c14:	000162c0 	.word	0x000162c0
   13c18:	000162a0 	.word	0x000162a0

00013c1c <__sflush_r>:
   13c1c:	898b      	ldrh	r3, [r1, #12]
   13c1e:	071a      	lsls	r2, r3, #28
   13c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c24:	460c      	mov	r4, r1
   13c26:	4680      	mov	r8, r0
   13c28:	d441      	bmi.n	13cae <__sflush_r+0x92>
   13c2a:	684a      	ldr	r2, [r1, #4]
   13c2c:	2a00      	cmp	r2, #0
   13c2e:	dd59      	ble.n	13ce4 <__sflush_r+0xc8>
   13c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13c32:	2e00      	cmp	r6, #0
   13c34:	d053      	beq.n	13cde <__sflush_r+0xc2>
   13c36:	2200      	movs	r2, #0
   13c38:	f8d8 5000 	ldr.w	r5, [r8]
   13c3c:	6a21      	ldr	r1, [r4, #32]
   13c3e:	f8c8 2000 	str.w	r2, [r8]
   13c42:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   13c46:	d151      	bne.n	13cec <__sflush_r+0xd0>
   13c48:	2301      	movs	r3, #1
   13c4a:	4640      	mov	r0, r8
   13c4c:	47b0      	blx	r6
   13c4e:	1c43      	adds	r3, r0, #1
   13c50:	d05f      	beq.n	13d12 <__sflush_r+0xf6>
   13c52:	89a3      	ldrh	r3, [r4, #12]
   13c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   13c56:	6a21      	ldr	r1, [r4, #32]
   13c58:	075f      	lsls	r7, r3, #29
   13c5a:	d505      	bpl.n	13c68 <__sflush_r+0x4c>
   13c5c:	6862      	ldr	r2, [r4, #4]
   13c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13c60:	1a80      	subs	r0, r0, r2
   13c62:	b10b      	cbz	r3, 13c68 <__sflush_r+0x4c>
   13c64:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13c66:	1ac0      	subs	r0, r0, r3
   13c68:	4602      	mov	r2, r0
   13c6a:	2300      	movs	r3, #0
   13c6c:	4640      	mov	r0, r8
   13c6e:	47b0      	blx	r6
   13c70:	1c46      	adds	r6, r0, #1
   13c72:	d145      	bne.n	13d00 <__sflush_r+0xe4>
   13c74:	f8d8 3000 	ldr.w	r3, [r8]
   13c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d055      	beq.n	13d2c <__sflush_r+0x110>
   13c80:	2b1d      	cmp	r3, #29
   13c82:	d001      	beq.n	13c88 <__sflush_r+0x6c>
   13c84:	2b16      	cmp	r3, #22
   13c86:	d15a      	bne.n	13d3e <__sflush_r+0x122>
   13c88:	6923      	ldr	r3, [r4, #16]
   13c8a:	2200      	movs	r2, #0
   13c8c:	e9c4 3200 	strd	r3, r2, [r4]
   13c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13c92:	f8c8 5000 	str.w	r5, [r8]
   13c96:	b311      	cbz	r1, 13cde <__sflush_r+0xc2>
   13c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
   13c9c:	4299      	cmp	r1, r3
   13c9e:	d002      	beq.n	13ca6 <__sflush_r+0x8a>
   13ca0:	4640      	mov	r0, r8
   13ca2:	f7ff f8ff 	bl	12ea4 <_free_r>
   13ca6:	2000      	movs	r0, #0
   13ca8:	6360      	str	r0, [r4, #52]	; 0x34
   13caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13cae:	690e      	ldr	r6, [r1, #16]
   13cb0:	b1ae      	cbz	r6, 13cde <__sflush_r+0xc2>
   13cb2:	680d      	ldr	r5, [r1, #0]
   13cb4:	600e      	str	r6, [r1, #0]
   13cb6:	0799      	lsls	r1, r3, #30
   13cb8:	bf0c      	ite	eq
   13cba:	6963      	ldreq	r3, [r4, #20]
   13cbc:	2300      	movne	r3, #0
   13cbe:	1bad      	subs	r5, r5, r6
   13cc0:	60a3      	str	r3, [r4, #8]
   13cc2:	e00a      	b.n	13cda <__sflush_r+0xbe>
   13cc4:	462b      	mov	r3, r5
   13cc6:	4632      	mov	r2, r6
   13cc8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   13cca:	6a21      	ldr	r1, [r4, #32]
   13ccc:	4640      	mov	r0, r8
   13cce:	47b8      	blx	r7
   13cd0:	2800      	cmp	r0, #0
   13cd2:	eba5 0500 	sub.w	r5, r5, r0
   13cd6:	4406      	add	r6, r0
   13cd8:	dd0a      	ble.n	13cf0 <__sflush_r+0xd4>
   13cda:	2d00      	cmp	r5, #0
   13cdc:	dcf2      	bgt.n	13cc4 <__sflush_r+0xa8>
   13cde:	2000      	movs	r0, #0
   13ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ce4:	6c0a      	ldr	r2, [r1, #64]	; 0x40
   13ce6:	2a00      	cmp	r2, #0
   13ce8:	dca2      	bgt.n	13c30 <__sflush_r+0x14>
   13cea:	e7f8      	b.n	13cde <__sflush_r+0xc2>
   13cec:	6d60      	ldr	r0, [r4, #84]	; 0x54
   13cee:	e7b3      	b.n	13c58 <__sflush_r+0x3c>
   13cf0:	89a3      	ldrh	r3, [r4, #12]
   13cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13cf6:	81a3      	strh	r3, [r4, #12]
   13cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13d00:	6922      	ldr	r2, [r4, #16]
   13d02:	89a3      	ldrh	r3, [r4, #12]
   13d04:	6022      	str	r2, [r4, #0]
   13d06:	2200      	movs	r2, #0
   13d08:	6062      	str	r2, [r4, #4]
   13d0a:	04da      	lsls	r2, r3, #19
   13d0c:	d5c0      	bpl.n	13c90 <__sflush_r+0x74>
   13d0e:	6560      	str	r0, [r4, #84]	; 0x54
   13d10:	e7be      	b.n	13c90 <__sflush_r+0x74>
   13d12:	f8d8 3000 	ldr.w	r3, [r8]
   13d16:	2b00      	cmp	r3, #0
   13d18:	d09b      	beq.n	13c52 <__sflush_r+0x36>
   13d1a:	2b1d      	cmp	r3, #29
   13d1c:	d00c      	beq.n	13d38 <__sflush_r+0x11c>
   13d1e:	2b16      	cmp	r3, #22
   13d20:	d00a      	beq.n	13d38 <__sflush_r+0x11c>
   13d22:	89a3      	ldrh	r3, [r4, #12]
   13d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d28:	81a3      	strh	r3, [r4, #12]
   13d2a:	e7d9      	b.n	13ce0 <__sflush_r+0xc4>
   13d2c:	6921      	ldr	r1, [r4, #16]
   13d2e:	e9c4 1300 	strd	r1, r3, [r4]
   13d32:	04d3      	lsls	r3, r2, #19
   13d34:	d5ac      	bpl.n	13c90 <__sflush_r+0x74>
   13d36:	e7ea      	b.n	13d0e <__sflush_r+0xf2>
   13d38:	f8c8 5000 	str.w	r5, [r8]
   13d3c:	e7cf      	b.n	13cde <__sflush_r+0xc2>
   13d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13d42:	81a2      	strh	r2, [r4, #12]
   13d44:	e7cc      	b.n	13ce0 <__sflush_r+0xc4>
   13d46:	bf00      	nop

00013d48 <_fflush_r>:
   13d48:	690b      	ldr	r3, [r1, #16]
   13d4a:	b323      	cbz	r3, 13d96 <_fflush_r+0x4e>
   13d4c:	b510      	push	{r4, lr}
   13d4e:	4604      	mov	r4, r0
   13d50:	b082      	sub	sp, #8
   13d52:	b108      	cbz	r0, 13d58 <_fflush_r+0x10>
   13d54:	6983      	ldr	r3, [r0, #24]
   13d56:	b1bb      	cbz	r3, 13d88 <_fflush_r+0x40>
   13d58:	4b10      	ldr	r3, [pc, #64]	; (13d9c <_fflush_r+0x54>)
   13d5a:	4299      	cmp	r1, r3
   13d5c:	d012      	beq.n	13d84 <_fflush_r+0x3c>
   13d5e:	4b10      	ldr	r3, [pc, #64]	; (13da0 <_fflush_r+0x58>)
   13d60:	4299      	cmp	r1, r3
   13d62:	d016      	beq.n	13d92 <_fflush_r+0x4a>
   13d64:	4b0f      	ldr	r3, [pc, #60]	; (13da4 <_fflush_r+0x5c>)
   13d66:	4299      	cmp	r1, r3
   13d68:	bf08      	it	eq
   13d6a:	68e1      	ldreq	r1, [r4, #12]
   13d6c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   13d70:	b12b      	cbz	r3, 13d7e <_fflush_r+0x36>
   13d72:	4620      	mov	r0, r4
   13d74:	b002      	add	sp, #8
   13d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13d7a:	f7ff bf4f 	b.w	13c1c <__sflush_r>
   13d7e:	2000      	movs	r0, #0
   13d80:	b002      	add	sp, #8
   13d82:	bd10      	pop	{r4, pc}
   13d84:	6861      	ldr	r1, [r4, #4]
   13d86:	e7f1      	b.n	13d6c <_fflush_r+0x24>
   13d88:	9101      	str	r1, [sp, #4]
   13d8a:	f000 f907 	bl	13f9c <__sinit>
   13d8e:	9901      	ldr	r1, [sp, #4]
   13d90:	e7e2      	b.n	13d58 <_fflush_r+0x10>
   13d92:	68a1      	ldr	r1, [r4, #8]
   13d94:	e7ea      	b.n	13d6c <_fflush_r+0x24>
   13d96:	2000      	movs	r0, #0
   13d98:	4770      	bx	lr
   13d9a:	bf00      	nop
   13d9c:	000162e0 	.word	0x000162e0
   13da0:	000162c0 	.word	0x000162c0
   13da4:	000162a0 	.word	0x000162a0

00013da8 <fflush>:
   13da8:	b120      	cbz	r0, 13db4 <fflush+0xc>
   13daa:	4b05      	ldr	r3, [pc, #20]	; (13dc0 <fflush+0x18>)
   13dac:	4601      	mov	r1, r0
   13dae:	6818      	ldr	r0, [r3, #0]
   13db0:	f7ff bfca 	b.w	13d48 <_fflush_r>
   13db4:	4b03      	ldr	r3, [pc, #12]	; (13dc4 <fflush+0x1c>)
   13db6:	4904      	ldr	r1, [pc, #16]	; (13dc8 <fflush+0x20>)
   13db8:	6818      	ldr	r0, [r3, #0]
   13dba:	f000 b935 	b.w	14028 <_fwalk_reent>
   13dbe:	bf00      	nop
   13dc0:	20000548 	.word	0x20000548
   13dc4:	0001629c 	.word	0x0001629c
   13dc8:	00013d49 	.word	0x00013d49

00013dcc <__fp_lock>:
   13dcc:	2000      	movs	r0, #0
   13dce:	4770      	bx	lr

00013dd0 <_cleanup_r>:
   13dd0:	4901      	ldr	r1, [pc, #4]	; (13dd8 <_cleanup_r+0x8>)
   13dd2:	f000 b929 	b.w	14028 <_fwalk_reent>
   13dd6:	bf00      	nop
   13dd8:	00013d49 	.word	0x00013d49

00013ddc <__fp_unlock>:
   13ddc:	2000      	movs	r0, #0
   13dde:	4770      	bx	lr

00013de0 <__sfmoreglue>:
   13de0:	b570      	push	{r4, r5, r6, lr}
   13de2:	1e4a      	subs	r2, r1, #1
   13de4:	2568      	movs	r5, #104	; 0x68
   13de6:	fb05 f502 	mul.w	r5, r5, r2
   13dea:	460e      	mov	r6, r1
   13dec:	f105 0174 	add.w	r1, r5, #116	; 0x74
   13df0:	f7ff f8ae 	bl	12f50 <_malloc_r>
   13df4:	4604      	mov	r4, r0
   13df6:	b140      	cbz	r0, 13e0a <__sfmoreglue+0x2a>
   13df8:	2100      	movs	r1, #0
   13dfa:	300c      	adds	r0, #12
   13dfc:	6066      	str	r6, [r4, #4]
   13dfe:	f105 0268 	add.w	r2, r5, #104	; 0x68
   13e02:	6021      	str	r1, [r4, #0]
   13e04:	60a0      	str	r0, [r4, #8]
   13e06:	f7fe fffd 	bl	12e04 <memset>
   13e0a:	4620      	mov	r0, r4
   13e0c:	bd70      	pop	{r4, r5, r6, pc}
   13e0e:	bf00      	nop

00013e10 <__sfp>:
   13e10:	4b1e      	ldr	r3, [pc, #120]	; (13e8c <__sfp+0x7c>)
   13e12:	b570      	push	{r4, r5, r6, lr}
   13e14:	681d      	ldr	r5, [r3, #0]
   13e16:	69ab      	ldr	r3, [r5, #24]
   13e18:	4606      	mov	r6, r0
   13e1a:	b343      	cbz	r3, 13e6e <__sfp+0x5e>
   13e1c:	3548      	adds	r5, #72	; 0x48
   13e1e:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
   13e22:	3b01      	subs	r3, #1
   13e24:	d505      	bpl.n	13e32 <__sfp+0x22>
   13e26:	e01e      	b.n	13e66 <__sfp+0x56>
   13e28:	3b01      	subs	r3, #1
   13e2a:	1c5a      	adds	r2, r3, #1
   13e2c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   13e30:	d019      	beq.n	13e66 <__sfp+0x56>
   13e32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   13e36:	2a00      	cmp	r2, #0
   13e38:	d1f6      	bne.n	13e28 <__sfp+0x18>
   13e3a:	2500      	movs	r5, #0
   13e3c:	4b14      	ldr	r3, [pc, #80]	; (13e90 <__sfp+0x80>)
   13e3e:	6665      	str	r5, [r4, #100]	; 0x64
   13e40:	e9c4 5500 	strd	r5, r5, [r4]
   13e44:	60a5      	str	r5, [r4, #8]
   13e46:	e9c4 5504 	strd	r5, r5, [r4, #16]
   13e4a:	61a5      	str	r5, [r4, #24]
   13e4c:	4629      	mov	r1, r5
   13e4e:	60e3      	str	r3, [r4, #12]
   13e50:	2208      	movs	r2, #8
   13e52:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   13e56:	f7fe ffd5 	bl	12e04 <memset>
   13e5a:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   13e5e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   13e62:	4620      	mov	r0, r4
   13e64:	bd70      	pop	{r4, r5, r6, pc}
   13e66:	682c      	ldr	r4, [r5, #0]
   13e68:	b12c      	cbz	r4, 13e76 <__sfp+0x66>
   13e6a:	4625      	mov	r5, r4
   13e6c:	e7d7      	b.n	13e1e <__sfp+0xe>
   13e6e:	4628      	mov	r0, r5
   13e70:	f000 f810 	bl	13e94 <__sinit.part.0>
   13e74:	e7d2      	b.n	13e1c <__sfp+0xc>
   13e76:	2104      	movs	r1, #4
   13e78:	4630      	mov	r0, r6
   13e7a:	f7ff ffb1 	bl	13de0 <__sfmoreglue>
   13e7e:	4604      	mov	r4, r0
   13e80:	6028      	str	r0, [r5, #0]
   13e82:	2800      	cmp	r0, #0
   13e84:	d1f1      	bne.n	13e6a <__sfp+0x5a>
   13e86:	230c      	movs	r3, #12
   13e88:	6033      	str	r3, [r6, #0]
   13e8a:	e7ea      	b.n	13e62 <__sfp+0x52>
   13e8c:	0001629c 	.word	0x0001629c
   13e90:	ffff0001 	.word	0xffff0001

00013e94 <__sinit.part.0>:
   13e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e98:	4b33      	ldr	r3, [pc, #204]	; (13f68 <__sinit.part.0+0xd4>)
   13e9a:	4934      	ldr	r1, [pc, #208]	; (13f6c <__sinit.part.0+0xd8>)
   13e9c:	681a      	ldr	r2, [r3, #0]
   13e9e:	6281      	str	r1, [r0, #40]	; 0x28
   13ea0:	4290      	cmp	r0, r2
   13ea2:	f04f 0300 	mov.w	r3, #0
   13ea6:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   13eaa:	6503      	str	r3, [r0, #80]	; 0x50
   13eac:	bf04      	itt	eq
   13eae:	2301      	moveq	r3, #1
   13eb0:	6183      	streq	r3, [r0, #24]
   13eb2:	4605      	mov	r5, r0
   13eb4:	f7ff ffac 	bl	13e10 <__sfp>
   13eb8:	6068      	str	r0, [r5, #4]
   13eba:	4628      	mov	r0, r5
   13ebc:	f7ff ffa8 	bl	13e10 <__sfp>
   13ec0:	60a8      	str	r0, [r5, #8]
   13ec2:	4628      	mov	r0, r5
   13ec4:	f7ff ffa4 	bl	13e10 <__sfp>
   13ec8:	686e      	ldr	r6, [r5, #4]
   13eca:	60e8      	str	r0, [r5, #12]
   13ecc:	2400      	movs	r4, #0
   13ece:	2304      	movs	r3, #4
   13ed0:	60f3      	str	r3, [r6, #12]
   13ed2:	6674      	str	r4, [r6, #100]	; 0x64
   13ed4:	e9c6 4400 	strd	r4, r4, [r6]
   13ed8:	60b4      	str	r4, [r6, #8]
   13eda:	e9c6 4404 	strd	r4, r4, [r6, #16]
   13ede:	61b4      	str	r4, [r6, #24]
   13ee0:	4621      	mov	r1, r4
   13ee2:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   13ee6:	2208      	movs	r2, #8
   13ee8:	f7fe ff8c 	bl	12e04 <memset>
   13eec:	f8df b088 	ldr.w	fp, [pc, #136]	; 13f78 <__sinit.part.0+0xe4>
   13ef0:	68af      	ldr	r7, [r5, #8]
   13ef2:	f8df a088 	ldr.w	sl, [pc, #136]	; 13f7c <__sinit.part.0+0xe8>
   13ef6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 13f80 <__sinit.part.0+0xec>
   13efa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 13f84 <__sinit.part.0+0xf0>
   13efe:	4b1c      	ldr	r3, [pc, #112]	; (13f70 <__sinit.part.0+0xdc>)
   13f00:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
   13f04:	e9c6 6b08 	strd	r6, fp, [r6, #32]
   13f08:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
   13f0c:	4621      	mov	r1, r4
   13f0e:	60fb      	str	r3, [r7, #12]
   13f10:	2208      	movs	r2, #8
   13f12:	667c      	str	r4, [r7, #100]	; 0x64
   13f14:	e9c7 4400 	strd	r4, r4, [r7]
   13f18:	60bc      	str	r4, [r7, #8]
   13f1a:	e9c7 4404 	strd	r4, r4, [r7, #16]
   13f1e:	61bc      	str	r4, [r7, #24]
   13f20:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   13f24:	f7fe ff6e 	bl	12e04 <memset>
   13f28:	68ee      	ldr	r6, [r5, #12]
   13f2a:	4b12      	ldr	r3, [pc, #72]	; (13f74 <__sinit.part.0+0xe0>)
   13f2c:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
   13f30:	e9c7 7b08 	strd	r7, fp, [r7, #32]
   13f34:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
   13f38:	4621      	mov	r1, r4
   13f3a:	60f3      	str	r3, [r6, #12]
   13f3c:	6674      	str	r4, [r6, #100]	; 0x64
   13f3e:	e9c6 4400 	strd	r4, r4, [r6]
   13f42:	60b4      	str	r4, [r6, #8]
   13f44:	e9c6 4404 	strd	r4, r4, [r6, #16]
   13f48:	61b4      	str	r4, [r6, #24]
   13f4a:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   13f4e:	2208      	movs	r2, #8
   13f50:	f7fe ff58 	bl	12e04 <memset>
   13f54:	2301      	movs	r3, #1
   13f56:	e9c6 6b08 	strd	r6, fp, [r6, #32]
   13f5a:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
   13f5e:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
   13f62:	61ab      	str	r3, [r5, #24]
   13f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f68:	0001629c 	.word	0x0001629c
   13f6c:	00013dd1 	.word	0x00013dd1
   13f70:	00010009 	.word	0x00010009
   13f74:	00020012 	.word	0x00020012
   13f78:	00014dd1 	.word	0x00014dd1
   13f7c:	00014df9 	.word	0x00014df9
   13f80:	00014e39 	.word	0x00014e39
   13f84:	00014e59 	.word	0x00014e59

00013f88 <_cleanup>:
   13f88:	4b02      	ldr	r3, [pc, #8]	; (13f94 <_cleanup+0xc>)
   13f8a:	4903      	ldr	r1, [pc, #12]	; (13f98 <_cleanup+0x10>)
   13f8c:	6818      	ldr	r0, [r3, #0]
   13f8e:	f000 b84b 	b.w	14028 <_fwalk_reent>
   13f92:	bf00      	nop
   13f94:	0001629c 	.word	0x0001629c
   13f98:	00013d49 	.word	0x00013d49

00013f9c <__sinit>:
   13f9c:	6983      	ldr	r3, [r0, #24]
   13f9e:	b903      	cbnz	r3, 13fa2 <__sinit+0x6>
   13fa0:	e778      	b.n	13e94 <__sinit.part.0>
   13fa2:	4770      	bx	lr

00013fa4 <__sfp_lock_acquire>:
   13fa4:	4770      	bx	lr
   13fa6:	bf00      	nop

00013fa8 <__sfp_lock_release>:
   13fa8:	4770      	bx	lr
   13faa:	bf00      	nop

00013fac <__sinit_lock_acquire>:
   13fac:	4770      	bx	lr
   13fae:	bf00      	nop

00013fb0 <__sinit_lock_release>:
   13fb0:	4770      	bx	lr
   13fb2:	bf00      	nop

00013fb4 <__fp_lock_all>:
   13fb4:	4b02      	ldr	r3, [pc, #8]	; (13fc0 <__fp_lock_all+0xc>)
   13fb6:	4903      	ldr	r1, [pc, #12]	; (13fc4 <__fp_lock_all+0x10>)
   13fb8:	6818      	ldr	r0, [r3, #0]
   13fba:	f000 b80f 	b.w	13fdc <_fwalk>
   13fbe:	bf00      	nop
   13fc0:	20000548 	.word	0x20000548
   13fc4:	00013dcd 	.word	0x00013dcd

00013fc8 <__fp_unlock_all>:
   13fc8:	4b02      	ldr	r3, [pc, #8]	; (13fd4 <__fp_unlock_all+0xc>)
   13fca:	4903      	ldr	r1, [pc, #12]	; (13fd8 <__fp_unlock_all+0x10>)
   13fcc:	6818      	ldr	r0, [r3, #0]
   13fce:	f000 b805 	b.w	13fdc <_fwalk>
   13fd2:	bf00      	nop
   13fd4:	20000548 	.word	0x20000548
   13fd8:	00013ddd 	.word	0x00013ddd

00013fdc <_fwalk>:
   13fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13fe0:	f110 0748 	adds.w	r7, r0, #72	; 0x48
   13fe4:	d01b      	beq.n	1401e <_fwalk+0x42>
   13fe6:	4688      	mov	r8, r1
   13fe8:	2600      	movs	r6, #0
   13fea:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   13fee:	3d01      	subs	r5, #1
   13ff0:	d40f      	bmi.n	14012 <_fwalk+0x36>
   13ff2:	89a3      	ldrh	r3, [r4, #12]
   13ff4:	2b01      	cmp	r3, #1
   13ff6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   13ffa:	d906      	bls.n	1400a <_fwalk+0x2e>
   13ffc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   14000:	3301      	adds	r3, #1
   14002:	4620      	mov	r0, r4
   14004:	d001      	beq.n	1400a <_fwalk+0x2e>
   14006:	47c0      	blx	r8
   14008:	4306      	orrs	r6, r0
   1400a:	1c6b      	adds	r3, r5, #1
   1400c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   14010:	d1ef      	bne.n	13ff2 <_fwalk+0x16>
   14012:	683f      	ldr	r7, [r7, #0]
   14014:	2f00      	cmp	r7, #0
   14016:	d1e8      	bne.n	13fea <_fwalk+0xe>
   14018:	4630      	mov	r0, r6
   1401a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1401e:	463e      	mov	r6, r7
   14020:	4630      	mov	r0, r6
   14022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14026:	bf00      	nop

00014028 <_fwalk_reent>:
   14028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1402c:	f110 0748 	adds.w	r7, r0, #72	; 0x48
   14030:	d01f      	beq.n	14072 <_fwalk_reent+0x4a>
   14032:	4688      	mov	r8, r1
   14034:	4606      	mov	r6, r0
   14036:	f04f 0900 	mov.w	r9, #0
   1403a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
   1403e:	3d01      	subs	r5, #1
   14040:	d411      	bmi.n	14066 <_fwalk_reent+0x3e>
   14042:	89a3      	ldrh	r3, [r4, #12]
   14044:	2b01      	cmp	r3, #1
   14046:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1404a:	d908      	bls.n	1405e <_fwalk_reent+0x36>
   1404c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   14050:	3301      	adds	r3, #1
   14052:	4621      	mov	r1, r4
   14054:	4630      	mov	r0, r6
   14056:	d002      	beq.n	1405e <_fwalk_reent+0x36>
   14058:	47c0      	blx	r8
   1405a:	ea49 0900 	orr.w	r9, r9, r0
   1405e:	1c6b      	adds	r3, r5, #1
   14060:	f104 0468 	add.w	r4, r4, #104	; 0x68
   14064:	d1ed      	bne.n	14042 <_fwalk_reent+0x1a>
   14066:	683f      	ldr	r7, [r7, #0]
   14068:	2f00      	cmp	r7, #0
   1406a:	d1e6      	bne.n	1403a <_fwalk_reent+0x12>
   1406c:	4648      	mov	r0, r9
   1406e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14072:	46b9      	mov	r9, r7
   14074:	4648      	mov	r0, r9
   14076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1407a:	bf00      	nop

0001407c <__swhatbuf_r>:
   1407c:	b570      	push	{r4, r5, r6, lr}
   1407e:	460c      	mov	r4, r1
   14080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14084:	2900      	cmp	r1, #0
   14086:	b096      	sub	sp, #88	; 0x58
   14088:	4616      	mov	r6, r2
   1408a:	461d      	mov	r5, r3
   1408c:	db13      	blt.n	140b6 <__swhatbuf_r+0x3a>
   1408e:	466a      	mov	r2, sp
   14090:	f000 ff0e 	bl	14eb0 <_fstat_r>
   14094:	2800      	cmp	r0, #0
   14096:	db0e      	blt.n	140b6 <__swhatbuf_r+0x3a>
   14098:	9a01      	ldr	r2, [sp, #4]
   1409a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   1409e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   140a2:	fab2 f282 	clz	r2, r2
   140a6:	0952      	lsrs	r2, r2, #5
   140a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   140ac:	2000      	movs	r0, #0
   140ae:	602a      	str	r2, [r5, #0]
   140b0:	6033      	str	r3, [r6, #0]
   140b2:	b016      	add	sp, #88	; 0x58
   140b4:	bd70      	pop	{r4, r5, r6, pc}
   140b6:	89a3      	ldrh	r3, [r4, #12]
   140b8:	2200      	movs	r2, #0
   140ba:	061b      	lsls	r3, r3, #24
   140bc:	602a      	str	r2, [r5, #0]
   140be:	d504      	bpl.n	140ca <__swhatbuf_r+0x4e>
   140c0:	2340      	movs	r3, #64	; 0x40
   140c2:	2000      	movs	r0, #0
   140c4:	6033      	str	r3, [r6, #0]
   140c6:	b016      	add	sp, #88	; 0x58
   140c8:	bd70      	pop	{r4, r5, r6, pc}
   140ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   140ce:	2000      	movs	r0, #0
   140d0:	6033      	str	r3, [r6, #0]
   140d2:	b016      	add	sp, #88	; 0x58
   140d4:	bd70      	pop	{r4, r5, r6, pc}
   140d6:	bf00      	nop

000140d8 <__smakebuf_r>:
   140d8:	898a      	ldrh	r2, [r1, #12]
   140da:	0792      	lsls	r2, r2, #30
   140dc:	460b      	mov	r3, r1
   140de:	d506      	bpl.n	140ee <__smakebuf_r+0x16>
   140e0:	f101 0247 	add.w	r2, r1, #71	; 0x47
   140e4:	2101      	movs	r1, #1
   140e6:	601a      	str	r2, [r3, #0]
   140e8:	e9c3 2104 	strd	r2, r1, [r3, #16]
   140ec:	4770      	bx	lr
   140ee:	b570      	push	{r4, r5, r6, lr}
   140f0:	b082      	sub	sp, #8
   140f2:	ab01      	add	r3, sp, #4
   140f4:	466a      	mov	r2, sp
   140f6:	460c      	mov	r4, r1
   140f8:	4606      	mov	r6, r0
   140fa:	f7ff ffbf 	bl	1407c <__swhatbuf_r>
   140fe:	9900      	ldr	r1, [sp, #0]
   14100:	4605      	mov	r5, r0
   14102:	4630      	mov	r0, r6
   14104:	f7fe ff24 	bl	12f50 <_malloc_r>
   14108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1410c:	b170      	cbz	r0, 1412c <__smakebuf_r+0x54>
   1410e:	4916      	ldr	r1, [pc, #88]	; (14168 <__smakebuf_r+0x90>)
   14110:	62b1      	str	r1, [r6, #40]	; 0x28
   14112:	9a01      	ldr	r2, [sp, #4]
   14114:	9900      	ldr	r1, [sp, #0]
   14116:	6020      	str	r0, [r4, #0]
   14118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1411c:	81a3      	strh	r3, [r4, #12]
   1411e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   14122:	b98a      	cbnz	r2, 14148 <__smakebuf_r+0x70>
   14124:	432b      	orrs	r3, r5
   14126:	81a3      	strh	r3, [r4, #12]
   14128:	b002      	add	sp, #8
   1412a:	bd70      	pop	{r4, r5, r6, pc}
   1412c:	059a      	lsls	r2, r3, #22
   1412e:	d4fb      	bmi.n	14128 <__smakebuf_r+0x50>
   14130:	f023 0303 	bic.w	r3, r3, #3
   14134:	f104 0247 	add.w	r2, r4, #71	; 0x47
   14138:	f043 0302 	orr.w	r3, r3, #2
   1413c:	2101      	movs	r1, #1
   1413e:	81a3      	strh	r3, [r4, #12]
   14140:	6022      	str	r2, [r4, #0]
   14142:	e9c4 2104 	strd	r2, r1, [r4, #16]
   14146:	e7ef      	b.n	14128 <__smakebuf_r+0x50>
   14148:	4630      	mov	r0, r6
   1414a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1414e:	f001 f847 	bl	151e0 <_isatty_r>
   14152:	b910      	cbnz	r0, 1415a <__smakebuf_r+0x82>
   14154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14158:	e7e4      	b.n	14124 <__smakebuf_r+0x4c>
   1415a:	89a3      	ldrh	r3, [r4, #12]
   1415c:	f023 0303 	bic.w	r3, r3, #3
   14160:	f043 0301 	orr.w	r3, r3, #1
   14164:	b21b      	sxth	r3, r3
   14166:	e7dd      	b.n	14124 <__smakebuf_r+0x4c>
   14168:	00013dd1 	.word	0x00013dd1

0001416c <__malloc_lock>:
   1416c:	4770      	bx	lr
   1416e:	bf00      	nop

00014170 <__malloc_unlock>:
   14170:	4770      	bx	lr
   14172:	bf00      	nop

00014174 <__ssputs_r>:
   14174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14178:	688e      	ldr	r6, [r1, #8]
   1417a:	461d      	mov	r5, r3
   1417c:	42ae      	cmp	r6, r5
   1417e:	460c      	mov	r4, r1
   14180:	680b      	ldr	r3, [r1, #0]
   14182:	4617      	mov	r7, r2
   14184:	d836      	bhi.n	141f4 <__ssputs_r+0x80>
   14186:	4680      	mov	r8, r0
   14188:	8988      	ldrh	r0, [r1, #12]
   1418a:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1418e:	d10e      	bne.n	141ae <__ssputs_r+0x3a>
   14190:	4635      	mov	r5, r6
   14192:	4618      	mov	r0, r3
   14194:	462a      	mov	r2, r5
   14196:	4639      	mov	r1, r7
   14198:	f001 f89a 	bl	152d0 <memmove>
   1419c:	68a2      	ldr	r2, [r4, #8]
   1419e:	6823      	ldr	r3, [r4, #0]
   141a0:	1b96      	subs	r6, r2, r6
   141a2:	442b      	add	r3, r5
   141a4:	60a6      	str	r6, [r4, #8]
   141a6:	6023      	str	r3, [r4, #0]
   141a8:	2000      	movs	r0, #0
   141aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   141ae:	e9d1 1604 	ldrd	r1, r6, [r1, #16]
   141b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   141b6:	eba3 0901 	sub.w	r9, r3, r1
   141ba:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   141be:	1c6b      	adds	r3, r5, #1
   141c0:	1076      	asrs	r6, r6, #1
   141c2:	444b      	add	r3, r9
   141c4:	42b3      	cmp	r3, r6
   141c6:	4632      	mov	r2, r6
   141c8:	bf84      	itt	hi
   141ca:	461e      	movhi	r6, r3
   141cc:	4632      	movhi	r2, r6
   141ce:	0543      	lsls	r3, r0, #21
   141d0:	d512      	bpl.n	141f8 <__ssputs_r+0x84>
   141d2:	4611      	mov	r1, r2
   141d4:	4640      	mov	r0, r8
   141d6:	f7fe febb 	bl	12f50 <_malloc_r>
   141da:	4682      	mov	sl, r0
   141dc:	b300      	cbz	r0, 14220 <__ssputs_r+0xac>
   141de:	464a      	mov	r2, r9
   141e0:	6921      	ldr	r1, [r4, #16]
   141e2:	f7fe fd75 	bl	12cd0 <memcpy>
   141e6:	89a3      	ldrh	r3, [r4, #12]
   141e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   141ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   141f0:	81a3      	strh	r3, [r4, #12]
   141f2:	e006      	b.n	14202 <__ssputs_r+0x8e>
   141f4:	462e      	mov	r6, r5
   141f6:	e7cc      	b.n	14192 <__ssputs_r+0x1e>
   141f8:	4640      	mov	r0, r8
   141fa:	f001 f8d1 	bl	153a0 <_realloc_r>
   141fe:	4682      	mov	sl, r0
   14200:	b150      	cbz	r0, 14218 <__ssputs_r+0xa4>
   14202:	eba6 0209 	sub.w	r2, r6, r9
   14206:	eb0a 0309 	add.w	r3, sl, r9
   1420a:	6166      	str	r6, [r4, #20]
   1420c:	f8c4 a010 	str.w	sl, [r4, #16]
   14210:	6023      	str	r3, [r4, #0]
   14212:	60a2      	str	r2, [r4, #8]
   14214:	462e      	mov	r6, r5
   14216:	e7bc      	b.n	14192 <__ssputs_r+0x1e>
   14218:	6921      	ldr	r1, [r4, #16]
   1421a:	4640      	mov	r0, r8
   1421c:	f7fe fe42 	bl	12ea4 <_free_r>
   14220:	230c      	movs	r3, #12
   14222:	f8c8 3000 	str.w	r3, [r8]
   14226:	89a3      	ldrh	r3, [r4, #12]
   14228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1422c:	81a3      	strh	r3, [r4, #12]
   1422e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14232:	e7ba      	b.n	141aa <__ssputs_r+0x36>

00014234 <__ssprint_r>:
   14234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14238:	6893      	ldr	r3, [r2, #8]
   1423a:	b083      	sub	sp, #12
   1423c:	4690      	mov	r8, r2
   1423e:	2b00      	cmp	r3, #0
   14240:	d06d      	beq.n	1431e <__ssprint_r+0xea>
   14242:	6817      	ldr	r7, [r2, #0]
   14244:	688d      	ldr	r5, [r1, #8]
   14246:	4682      	mov	sl, r0
   14248:	460c      	mov	r4, r1
   1424a:	6808      	ldr	r0, [r1, #0]
   1424c:	3708      	adds	r7, #8
   1424e:	e043      	b.n	142d8 <__ssprint_r+0xa4>
   14250:	89a3      	ldrh	r3, [r4, #12]
   14252:	f413 6f90 	tst.w	r3, #1152	; 0x480
   14256:	d02e      	beq.n	142b6 <__ssprint_r+0x82>
   14258:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   1425c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   14260:	eba0 0b01 	sub.w	fp, r0, r1
   14264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   14268:	eb0b 0006 	add.w	r0, fp, r6
   1426c:	106d      	asrs	r5, r5, #1
   1426e:	3001      	adds	r0, #1
   14270:	42a8      	cmp	r0, r5
   14272:	462a      	mov	r2, r5
   14274:	bf84      	itt	hi
   14276:	4605      	movhi	r5, r0
   14278:	462a      	movhi	r2, r5
   1427a:	055b      	lsls	r3, r3, #21
   1427c:	d536      	bpl.n	142ec <__ssprint_r+0xb8>
   1427e:	4611      	mov	r1, r2
   14280:	4650      	mov	r0, sl
   14282:	f7fe fe65 	bl	12f50 <_malloc_r>
   14286:	2800      	cmp	r0, #0
   14288:	d03a      	beq.n	14300 <__ssprint_r+0xcc>
   1428a:	465a      	mov	r2, fp
   1428c:	6921      	ldr	r1, [r4, #16]
   1428e:	9001      	str	r0, [sp, #4]
   14290:	f7fe fd1e 	bl	12cd0 <memcpy>
   14294:	89a2      	ldrh	r2, [r4, #12]
   14296:	9b01      	ldr	r3, [sp, #4]
   14298:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1429c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   142a0:	81a2      	strh	r2, [r4, #12]
   142a2:	eba5 020b 	sub.w	r2, r5, fp
   142a6:	eb03 000b 	add.w	r0, r3, fp
   142aa:	6165      	str	r5, [r4, #20]
   142ac:	6123      	str	r3, [r4, #16]
   142ae:	6020      	str	r0, [r4, #0]
   142b0:	60a2      	str	r2, [r4, #8]
   142b2:	4635      	mov	r5, r6
   142b4:	46b3      	mov	fp, r6
   142b6:	465a      	mov	r2, fp
   142b8:	4649      	mov	r1, r9
   142ba:	f001 f809 	bl	152d0 <memmove>
   142be:	f8d8 3008 	ldr.w	r3, [r8, #8]
   142c2:	68a2      	ldr	r2, [r4, #8]
   142c4:	6820      	ldr	r0, [r4, #0]
   142c6:	1b55      	subs	r5, r2, r5
   142c8:	4458      	add	r0, fp
   142ca:	1b9e      	subs	r6, r3, r6
   142cc:	60a5      	str	r5, [r4, #8]
   142ce:	6020      	str	r0, [r4, #0]
   142d0:	f8c8 6008 	str.w	r6, [r8, #8]
   142d4:	b31e      	cbz	r6, 1431e <__ssprint_r+0xea>
   142d6:	3708      	adds	r7, #8
   142d8:	e957 9602 	ldrd	r9, r6, [r7, #-8]
   142dc:	46ab      	mov	fp, r5
   142de:	2e00      	cmp	r6, #0
   142e0:	d0f9      	beq.n	142d6 <__ssprint_r+0xa2>
   142e2:	42ae      	cmp	r6, r5
   142e4:	d2b4      	bcs.n	14250 <__ssprint_r+0x1c>
   142e6:	4635      	mov	r5, r6
   142e8:	46b3      	mov	fp, r6
   142ea:	e7e4      	b.n	142b6 <__ssprint_r+0x82>
   142ec:	4650      	mov	r0, sl
   142ee:	f001 f857 	bl	153a0 <_realloc_r>
   142f2:	4603      	mov	r3, r0
   142f4:	2800      	cmp	r0, #0
   142f6:	d1d4      	bne.n	142a2 <__ssprint_r+0x6e>
   142f8:	6921      	ldr	r1, [r4, #16]
   142fa:	4650      	mov	r0, sl
   142fc:	f7fe fdd2 	bl	12ea4 <_free_r>
   14300:	230c      	movs	r3, #12
   14302:	f8ca 3000 	str.w	r3, [sl]
   14306:	89a3      	ldrh	r3, [r4, #12]
   14308:	2200      	movs	r2, #0
   1430a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1430e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14312:	81a3      	strh	r3, [r4, #12]
   14314:	e9c8 2201 	strd	r2, r2, [r8, #4]
   14318:	b003      	add	sp, #12
   1431a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1431e:	2000      	movs	r0, #0
   14320:	f8c8 0004 	str.w	r0, [r8, #4]
   14324:	b003      	add	sp, #12
   14326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1432a:	bf00      	nop

0001432c <_svfiprintf_r>:
   1432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14330:	4690      	mov	r8, r2
   14332:	898a      	ldrh	r2, [r1, #12]
   14334:	b09f      	sub	sp, #124	; 0x7c
   14336:	0614      	lsls	r4, r2, #24
   14338:	468b      	mov	fp, r1
   1433a:	9002      	str	r0, [sp, #8]
   1433c:	d503      	bpl.n	14346 <_svfiprintf_r+0x1a>
   1433e:	690a      	ldr	r2, [r1, #16]
   14340:	2a00      	cmp	r2, #0
   14342:	f000 810b 	beq.w	1455c <_svfiprintf_r+0x230>
   14346:	9305      	str	r3, [sp, #20]
   14348:	2330      	movs	r3, #48	; 0x30
   1434a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   1434e:	f898 3000 	ldrb.w	r3, [r8]
   14352:	4e8e      	ldr	r6, [pc, #568]	; (1458c <_svfiprintf_r+0x260>)
   14354:	2100      	movs	r1, #0
   14356:	2220      	movs	r2, #32
   14358:	910b      	str	r1, [sp, #44]	; 0x2c
   1435a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   1435e:	2701      	movs	r7, #1
   14360:	2b00      	cmp	r3, #0
   14362:	f000 8084 	beq.w	1446e <_svfiprintf_r+0x142>
   14366:	2b25      	cmp	r3, #37	; 0x25
   14368:	f000 80f6 	beq.w	14558 <_svfiprintf_r+0x22c>
   1436c:	4645      	mov	r5, r8
   1436e:	e003      	b.n	14378 <_svfiprintf_r+0x4c>
   14370:	2b25      	cmp	r3, #37	; 0x25
   14372:	f000 8086 	beq.w	14482 <_svfiprintf_r+0x156>
   14376:	4625      	mov	r5, r4
   14378:	786b      	ldrb	r3, [r5, #1]
   1437a:	1c6c      	adds	r4, r5, #1
   1437c:	2b00      	cmp	r3, #0
   1437e:	d1f7      	bne.n	14370 <_svfiprintf_r+0x44>
   14380:	ebb4 0a08 	subs.w	sl, r4, r8
   14384:	d073      	beq.n	1446e <_svfiprintf_r+0x142>
   14386:	4642      	mov	r2, r8
   14388:	4653      	mov	r3, sl
   1438a:	4659      	mov	r1, fp
   1438c:	9802      	ldr	r0, [sp, #8]
   1438e:	f7ff fef1 	bl	14174 <__ssputs_r>
   14392:	3001      	adds	r0, #1
   14394:	d06b      	beq.n	1446e <_svfiprintf_r+0x142>
   14396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14398:	786a      	ldrb	r2, [r5, #1]
   1439a:	4453      	add	r3, sl
   1439c:	930b      	str	r3, [sp, #44]	; 0x2c
   1439e:	2a00      	cmp	r2, #0
   143a0:	d065      	beq.n	1446e <_svfiprintf_r+0x142>
   143a2:	2300      	movs	r3, #0
   143a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   143a8:	3401      	adds	r4, #1
   143aa:	9306      	str	r3, [sp, #24]
   143ac:	e9cd 3308 	strd	r3, r3, [sp, #32]
   143b0:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
   143b4:	931c      	str	r3, [sp, #112]	; 0x70
   143b6:	9207      	str	r2, [sp, #28]
   143b8:	e005      	b.n	143c6 <_svfiprintf_r+0x9a>
   143ba:	9a06      	ldr	r2, [sp, #24]
   143bc:	fa07 f303 	lsl.w	r3, r7, r3
   143c0:	4313      	orrs	r3, r2
   143c2:	462c      	mov	r4, r5
   143c4:	9306      	str	r3, [sp, #24]
   143c6:	4625      	mov	r5, r4
   143c8:	2205      	movs	r2, #5
   143ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   143ce:	4630      	mov	r0, r6
   143d0:	f000 ff2e 	bl	15230 <memchr>
   143d4:	46aa      	mov	sl, r5
   143d6:	1b83      	subs	r3, r0, r6
   143d8:	2800      	cmp	r0, #0
   143da:	d1ee      	bne.n	143ba <_svfiprintf_r+0x8e>
   143dc:	9b06      	ldr	r3, [sp, #24]
   143de:	06d9      	lsls	r1, r3, #27
   143e0:	bf44      	itt	mi
   143e2:	2220      	movmi	r2, #32
   143e4:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   143e8:	7821      	ldrb	r1, [r4, #0]
   143ea:	071a      	lsls	r2, r3, #28
   143ec:	bf44      	itt	mi
   143ee:	222b      	movmi	r2, #43	; 0x2b
   143f0:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   143f4:	292a      	cmp	r1, #42	; 0x2a
   143f6:	d148      	bne.n	1448a <_svfiprintf_r+0x15e>
   143f8:	9a05      	ldr	r2, [sp, #20]
   143fa:	6811      	ldr	r1, [r2, #0]
   143fc:	3204      	adds	r2, #4
   143fe:	2900      	cmp	r1, #0
   14400:	9205      	str	r2, [sp, #20]
   14402:	db7e      	blt.n	14502 <_svfiprintf_r+0x1d6>
   14404:	9109      	str	r1, [sp, #36]	; 0x24
   14406:	7861      	ldrb	r1, [r4, #1]
   14408:	1ca5      	adds	r5, r4, #2
   1440a:	292e      	cmp	r1, #46	; 0x2e
   1440c:	d056      	beq.n	144bc <_svfiprintf_r+0x190>
   1440e:	4c60      	ldr	r4, [pc, #384]	; (14590 <_svfiprintf_r+0x264>)
   14410:	2203      	movs	r2, #3
   14412:	4620      	mov	r0, r4
   14414:	f000 ff0c 	bl	15230 <memchr>
   14418:	2800      	cmp	r0, #0
   1441a:	d068      	beq.n	144ee <_svfiprintf_r+0x1c2>
   1441c:	1b00      	subs	r0, r0, r4
   1441e:	9b06      	ldr	r3, [sp, #24]
   14420:	2440      	movs	r4, #64	; 0x40
   14422:	fa04 f000 	lsl.w	r0, r4, r0
   14426:	4303      	orrs	r3, r0
   14428:	9306      	str	r3, [sp, #24]
   1442a:	f105 0801 	add.w	r8, r5, #1
   1442e:	7829      	ldrb	r1, [r5, #0]
   14430:	4858      	ldr	r0, [pc, #352]	; (14594 <_svfiprintf_r+0x268>)
   14432:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   14436:	2206      	movs	r2, #6
   14438:	f000 fefa 	bl	15230 <memchr>
   1443c:	2800      	cmp	r0, #0
   1443e:	d066      	beq.n	1450e <_svfiprintf_r+0x1e2>
   14440:	4b55      	ldr	r3, [pc, #340]	; (14598 <_svfiprintf_r+0x26c>)
   14442:	2b00      	cmp	r3, #0
   14444:	d056      	beq.n	144f4 <_svfiprintf_r+0x1c8>
   14446:	ab05      	add	r3, sp, #20
   14448:	9300      	str	r3, [sp, #0]
   1444a:	465a      	mov	r2, fp
   1444c:	4b53      	ldr	r3, [pc, #332]	; (1459c <_svfiprintf_r+0x270>)
   1444e:	9802      	ldr	r0, [sp, #8]
   14450:	a906      	add	r1, sp, #24
   14452:	f3af 8000 	nop.w
   14456:	4681      	mov	r9, r0
   14458:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   1445c:	d007      	beq.n	1446e <_svfiprintf_r+0x142>
   1445e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14460:	444b      	add	r3, r9
   14462:	930b      	str	r3, [sp, #44]	; 0x2c
   14464:	f898 3000 	ldrb.w	r3, [r8]
   14468:	2b00      	cmp	r3, #0
   1446a:	f47f af7c 	bne.w	14366 <_svfiprintf_r+0x3a>
   1446e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   14472:	065b      	lsls	r3, r3, #25
   14474:	bf54      	ite	pl
   14476:	980b      	ldrpl	r0, [sp, #44]	; 0x2c
   14478:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
   1447c:	b01f      	add	sp, #124	; 0x7c
   1447e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14482:	ebb4 0a08 	subs.w	sl, r4, r8
   14486:	d08c      	beq.n	143a2 <_svfiprintf_r+0x76>
   14488:	e77d      	b.n	14386 <_svfiprintf_r+0x5a>
   1448a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1448e:	2a09      	cmp	r2, #9
   14490:	bf88      	it	hi
   14492:	46a2      	movhi	sl, r4
   14494:	d8b9      	bhi.n	1440a <_svfiprintf_r+0xde>
   14496:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14498:	e001      	b.n	1449e <_svfiprintf_r+0x172>
   1449a:	462c      	mov	r4, r5
   1449c:	3501      	adds	r5, #1
   1449e:	7829      	ldrb	r1, [r5, #0]
   144a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   144a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   144a8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   144ac:	2a09      	cmp	r2, #9
   144ae:	46aa      	mov	sl, r5
   144b0:	d9f3      	bls.n	1449a <_svfiprintf_r+0x16e>
   144b2:	292e      	cmp	r1, #46	; 0x2e
   144b4:	f104 0502 	add.w	r5, r4, #2
   144b8:	9309      	str	r3, [sp, #36]	; 0x24
   144ba:	d1a8      	bne.n	1440e <_svfiprintf_r+0xe2>
   144bc:	f89a 1001 	ldrb.w	r1, [sl, #1]
   144c0:	292a      	cmp	r1, #42	; 0x2a
   144c2:	d12e      	bne.n	14522 <_svfiprintf_r+0x1f6>
   144c4:	9b05      	ldr	r3, [sp, #20]
   144c6:	f89a 1002 	ldrb.w	r1, [sl, #2]
   144ca:	681a      	ldr	r2, [r3, #0]
   144cc:	9207      	str	r2, [sp, #28]
   144ce:	3304      	adds	r3, #4
   144d0:	2a00      	cmp	r2, #0
   144d2:	9305      	str	r3, [sp, #20]
   144d4:	f10a 0503 	add.w	r5, sl, #3
   144d8:	f10a 0302 	add.w	r3, sl, #2
   144dc:	db37      	blt.n	1454e <_svfiprintf_r+0x222>
   144de:	4c2c      	ldr	r4, [pc, #176]	; (14590 <_svfiprintf_r+0x264>)
   144e0:	2203      	movs	r2, #3
   144e2:	4620      	mov	r0, r4
   144e4:	469a      	mov	sl, r3
   144e6:	f000 fea3 	bl	15230 <memchr>
   144ea:	2800      	cmp	r0, #0
   144ec:	d196      	bne.n	1441c <_svfiprintf_r+0xf0>
   144ee:	46a8      	mov	r8, r5
   144f0:	4655      	mov	r5, sl
   144f2:	e79c      	b.n	1442e <_svfiprintf_r+0x102>
   144f4:	9b05      	ldr	r3, [sp, #20]
   144f6:	3307      	adds	r3, #7
   144f8:	f023 0307 	bic.w	r3, r3, #7
   144fc:	3308      	adds	r3, #8
   144fe:	9305      	str	r3, [sp, #20]
   14500:	e7ad      	b.n	1445e <_svfiprintf_r+0x132>
   14502:	4249      	negs	r1, r1
   14504:	f043 0302 	orr.w	r3, r3, #2
   14508:	9109      	str	r1, [sp, #36]	; 0x24
   1450a:	9306      	str	r3, [sp, #24]
   1450c:	e77b      	b.n	14406 <_svfiprintf_r+0xda>
   1450e:	ab05      	add	r3, sp, #20
   14510:	9300      	str	r3, [sp, #0]
   14512:	465a      	mov	r2, fp
   14514:	4b21      	ldr	r3, [pc, #132]	; (1459c <_svfiprintf_r+0x270>)
   14516:	9802      	ldr	r0, [sp, #8]
   14518:	a906      	add	r1, sp, #24
   1451a:	f000 fa87 	bl	14a2c <_printf_i>
   1451e:	4681      	mov	r9, r0
   14520:	e79a      	b.n	14458 <_svfiprintf_r+0x12c>
   14522:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14526:	2300      	movs	r3, #0
   14528:	2a09      	cmp	r2, #9
   1452a:	9307      	str	r3, [sp, #28]
   1452c:	d901      	bls.n	14532 <_svfiprintf_r+0x206>
   1452e:	e023      	b.n	14578 <_svfiprintf_r+0x24c>
   14530:	4655      	mov	r5, sl
   14532:	7869      	ldrb	r1, [r5, #1]
   14534:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14538:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1453c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   14540:	2a09      	cmp	r2, #9
   14542:	f105 0a01 	add.w	sl, r5, #1
   14546:	d9f3      	bls.n	14530 <_svfiprintf_r+0x204>
   14548:	3502      	adds	r5, #2
   1454a:	9307      	str	r3, [sp, #28]
   1454c:	e75f      	b.n	1440e <_svfiprintf_r+0xe2>
   1454e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14552:	469a      	mov	sl, r3
   14554:	9207      	str	r2, [sp, #28]
   14556:	e75a      	b.n	1440e <_svfiprintf_r+0xe2>
   14558:	4644      	mov	r4, r8
   1455a:	e722      	b.n	143a2 <_svfiprintf_r+0x76>
   1455c:	2140      	movs	r1, #64	; 0x40
   1455e:	9303      	str	r3, [sp, #12]
   14560:	f7fe fcf6 	bl	12f50 <_malloc_r>
   14564:	9b03      	ldr	r3, [sp, #12]
   14566:	f8cb 0000 	str.w	r0, [fp]
   1456a:	f8cb 0010 	str.w	r0, [fp, #16]
   1456e:	b130      	cbz	r0, 1457e <_svfiprintf_r+0x252>
   14570:	2240      	movs	r2, #64	; 0x40
   14572:	f8cb 2014 	str.w	r2, [fp, #20]
   14576:	e6e6      	b.n	14346 <_svfiprintf_r+0x1a>
   14578:	46aa      	mov	sl, r5
   1457a:	3501      	adds	r5, #1
   1457c:	e747      	b.n	1440e <_svfiprintf_r+0xe2>
   1457e:	9a02      	ldr	r2, [sp, #8]
   14580:	230c      	movs	r3, #12
   14582:	6013      	str	r3, [r2, #0]
   14584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14588:	e778      	b.n	1447c <_svfiprintf_r+0x150>
   1458a:	bf00      	nop
   1458c:	00016300 	.word	0x00016300
   14590:	00016308 	.word	0x00016308
   14594:	0001630c 	.word	0x0001630c
   14598:	00000000 	.word	0x00000000
   1459c:	00014175 	.word	0x00014175

000145a0 <__sfputc_r>:
   145a0:	6893      	ldr	r3, [r2, #8]
   145a2:	3b01      	subs	r3, #1
   145a4:	2b00      	cmp	r3, #0
   145a6:	6093      	str	r3, [r2, #8]
   145a8:	da0f      	bge.n	145ca <__sfputc_r+0x2a>
   145aa:	b410      	push	{r4}
   145ac:	6994      	ldr	r4, [r2, #24]
   145ae:	42a3      	cmp	r3, r4
   145b0:	db08      	blt.n	145c4 <__sfputc_r+0x24>
   145b2:	290a      	cmp	r1, #10
   145b4:	d006      	beq.n	145c4 <__sfputc_r+0x24>
   145b6:	6813      	ldr	r3, [r2, #0]
   145b8:	1c58      	adds	r0, r3, #1
   145ba:	6010      	str	r0, [r2, #0]
   145bc:	7019      	strb	r1, [r3, #0]
   145be:	4608      	mov	r0, r1
   145c0:	bc10      	pop	{r4}
   145c2:	4770      	bx	lr
   145c4:	bc10      	pop	{r4}
   145c6:	f7ff ba49 	b.w	13a5c <__swbuf_r>
   145ca:	6813      	ldr	r3, [r2, #0]
   145cc:	1c58      	adds	r0, r3, #1
   145ce:	6010      	str	r0, [r2, #0]
   145d0:	7019      	strb	r1, [r3, #0]
   145d2:	4608      	mov	r0, r1
   145d4:	4770      	bx	lr
   145d6:	bf00      	nop

000145d8 <__sfputs_r>:
   145d8:	b19b      	cbz	r3, 14602 <__sfputs_r+0x2a>
   145da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145dc:	4413      	add	r3, r2
   145de:	460f      	mov	r7, r1
   145e0:	4606      	mov	r6, r0
   145e2:	1e5d      	subs	r5, r3, #1
   145e4:	1e54      	subs	r4, r2, #1
   145e6:	e001      	b.n	145ec <__sfputs_r+0x14>
   145e8:	42ac      	cmp	r4, r5
   145ea:	d008      	beq.n	145fe <__sfputs_r+0x26>
   145ec:	463a      	mov	r2, r7
   145ee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   145f2:	4630      	mov	r0, r6
   145f4:	f7ff ffd4 	bl	145a0 <__sfputc_r>
   145f8:	1c43      	adds	r3, r0, #1
   145fa:	d1f5      	bne.n	145e8 <__sfputs_r+0x10>
   145fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145fe:	2000      	movs	r0, #0
   14600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14602:	2000      	movs	r0, #0
   14604:	4770      	bx	lr
   14606:	bf00      	nop

00014608 <__sprint_r>:
   14608:	6893      	ldr	r3, [r2, #8]
   1460a:	b510      	push	{r4, lr}
   1460c:	4614      	mov	r4, r2
   1460e:	b913      	cbnz	r3, 14616 <__sprint_r+0xe>
   14610:	6053      	str	r3, [r2, #4]
   14612:	4618      	mov	r0, r3
   14614:	bd10      	pop	{r4, pc}
   14616:	f000 fc5f 	bl	14ed8 <__sfvwrite_r>
   1461a:	2300      	movs	r3, #0
   1461c:	e9c4 3301 	strd	r3, r3, [r4, #4]
   14620:	bd10      	pop	{r4, pc}
   14622:	bf00      	nop

00014624 <_vfiprintf_r>:
   14624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14628:	b09f      	sub	sp, #124	; 0x7c
   1462a:	468b      	mov	fp, r1
   1462c:	4690      	mov	r8, r2
   1462e:	461c      	mov	r4, r3
   14630:	9003      	str	r0, [sp, #12]
   14632:	b118      	cbz	r0, 1463c <_vfiprintf_r+0x18>
   14634:	6983      	ldr	r3, [r0, #24]
   14636:	2b00      	cmp	r3, #0
   14638:	f000 80b7 	beq.w	147aa <_vfiprintf_r+0x186>
   1463c:	4ba2      	ldr	r3, [pc, #648]	; (148c8 <_vfiprintf_r+0x2a4>)
   1463e:	459b      	cmp	fp, r3
   14640:	f000 80b9 	beq.w	147b6 <_vfiprintf_r+0x192>
   14644:	4ba1      	ldr	r3, [pc, #644]	; (148cc <_vfiprintf_r+0x2a8>)
   14646:	459b      	cmp	fp, r3
   14648:	f000 80c7 	beq.w	147da <_vfiprintf_r+0x1b6>
   1464c:	4ba0      	ldr	r3, [pc, #640]	; (148d0 <_vfiprintf_r+0x2ac>)
   1464e:	459b      	cmp	fp, r3
   14650:	bf04      	itt	eq
   14652:	9b03      	ldreq	r3, [sp, #12]
   14654:	f8d3 b00c 	ldreq.w	fp, [r3, #12]
   14658:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1465c:	0718      	lsls	r0, r3, #28
   1465e:	f140 80b2 	bpl.w	147c6 <_vfiprintf_r+0x1a2>
   14662:	f8db 3010 	ldr.w	r3, [fp, #16]
   14666:	2b00      	cmp	r3, #0
   14668:	f000 80ad 	beq.w	147c6 <_vfiprintf_r+0x1a2>
   1466c:	2330      	movs	r3, #48	; 0x30
   1466e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   14672:	f898 3000 	ldrb.w	r3, [r8]
   14676:	9405      	str	r4, [sp, #20]
   14678:	2100      	movs	r1, #0
   1467a:	2220      	movs	r2, #32
   1467c:	910b      	str	r1, [sp, #44]	; 0x2c
   1467e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   14682:	4e94      	ldr	r6, [pc, #592]	; (148d4 <_vfiprintf_r+0x2b0>)
   14684:	2701      	movs	r7, #1
   14686:	2b00      	cmp	r3, #0
   14688:	f000 8087 	beq.w	1479a <_vfiprintf_r+0x176>
   1468c:	2b25      	cmp	r3, #37	; 0x25
   1468e:	f000 8115 	beq.w	148bc <_vfiprintf_r+0x298>
   14692:	4645      	mov	r5, r8
   14694:	e003      	b.n	1469e <_vfiprintf_r+0x7a>
   14696:	2b25      	cmp	r3, #37	; 0x25
   14698:	f000 80a3 	beq.w	147e2 <_vfiprintf_r+0x1be>
   1469c:	4625      	mov	r5, r4
   1469e:	786b      	ldrb	r3, [r5, #1]
   146a0:	1c6c      	adds	r4, r5, #1
   146a2:	2b00      	cmp	r3, #0
   146a4:	d1f7      	bne.n	14696 <_vfiprintf_r+0x72>
   146a6:	ebb4 0a08 	subs.w	sl, r4, r8
   146aa:	d076      	beq.n	1479a <_vfiprintf_r+0x176>
   146ac:	4642      	mov	r2, r8
   146ae:	4653      	mov	r3, sl
   146b0:	4659      	mov	r1, fp
   146b2:	9803      	ldr	r0, [sp, #12]
   146b4:	f7ff ff90 	bl	145d8 <__sfputs_r>
   146b8:	3001      	adds	r0, #1
   146ba:	d06e      	beq.n	1479a <_vfiprintf_r+0x176>
   146bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   146be:	786a      	ldrb	r2, [r5, #1]
   146c0:	4453      	add	r3, sl
   146c2:	930b      	str	r3, [sp, #44]	; 0x2c
   146c4:	2a00      	cmp	r2, #0
   146c6:	d068      	beq.n	1479a <_vfiprintf_r+0x176>
   146c8:	2300      	movs	r3, #0
   146ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   146ce:	3401      	adds	r4, #1
   146d0:	9306      	str	r3, [sp, #24]
   146d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
   146d6:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
   146da:	931c      	str	r3, [sp, #112]	; 0x70
   146dc:	9207      	str	r2, [sp, #28]
   146de:	e005      	b.n	146ec <_vfiprintf_r+0xc8>
   146e0:	9a06      	ldr	r2, [sp, #24]
   146e2:	fa07 f303 	lsl.w	r3, r7, r3
   146e6:	4313      	orrs	r3, r2
   146e8:	462c      	mov	r4, r5
   146ea:	9306      	str	r3, [sp, #24]
   146ec:	4625      	mov	r5, r4
   146ee:	2205      	movs	r2, #5
   146f0:	f815 1b01 	ldrb.w	r1, [r5], #1
   146f4:	4630      	mov	r0, r6
   146f6:	f000 fd9b 	bl	15230 <memchr>
   146fa:	46aa      	mov	sl, r5
   146fc:	1b83      	subs	r3, r0, r6
   146fe:	2800      	cmp	r0, #0
   14700:	d1ee      	bne.n	146e0 <_vfiprintf_r+0xbc>
   14702:	9b06      	ldr	r3, [sp, #24]
   14704:	06d9      	lsls	r1, r3, #27
   14706:	bf44      	itt	mi
   14708:	2220      	movmi	r2, #32
   1470a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   1470e:	7821      	ldrb	r1, [r4, #0]
   14710:	071a      	lsls	r2, r3, #28
   14712:	bf44      	itt	mi
   14714:	222b      	movmi	r2, #43	; 0x2b
   14716:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
   1471a:	292a      	cmp	r1, #42	; 0x2a
   1471c:	d166      	bne.n	147ec <_vfiprintf_r+0x1c8>
   1471e:	9a05      	ldr	r2, [sp, #20]
   14720:	6811      	ldr	r1, [r2, #0]
   14722:	3204      	adds	r2, #4
   14724:	2900      	cmp	r1, #0
   14726:	9205      	str	r2, [sp, #20]
   14728:	f2c0 809d 	blt.w	14866 <_vfiprintf_r+0x242>
   1472c:	9109      	str	r1, [sp, #36]	; 0x24
   1472e:	7861      	ldrb	r1, [r4, #1]
   14730:	1ca5      	adds	r5, r4, #2
   14732:	292e      	cmp	r1, #46	; 0x2e
   14734:	d073      	beq.n	1481e <_vfiprintf_r+0x1fa>
   14736:	4c68      	ldr	r4, [pc, #416]	; (148d8 <_vfiprintf_r+0x2b4>)
   14738:	2203      	movs	r2, #3
   1473a:	4620      	mov	r0, r4
   1473c:	f000 fd78 	bl	15230 <memchr>
   14740:	2800      	cmp	r0, #0
   14742:	f000 8086 	beq.w	14852 <_vfiprintf_r+0x22e>
   14746:	1b00      	subs	r0, r0, r4
   14748:	9b06      	ldr	r3, [sp, #24]
   1474a:	2440      	movs	r4, #64	; 0x40
   1474c:	fa04 f000 	lsl.w	r0, r4, r0
   14750:	4303      	orrs	r3, r0
   14752:	9306      	str	r3, [sp, #24]
   14754:	f105 0801 	add.w	r8, r5, #1
   14758:	7829      	ldrb	r1, [r5, #0]
   1475a:	4860      	ldr	r0, [pc, #384]	; (148dc <_vfiprintf_r+0x2b8>)
   1475c:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   14760:	2206      	movs	r2, #6
   14762:	f000 fd65 	bl	15230 <memchr>
   14766:	2800      	cmp	r0, #0
   14768:	f000 8083 	beq.w	14872 <_vfiprintf_r+0x24e>
   1476c:	4b5c      	ldr	r3, [pc, #368]	; (148e0 <_vfiprintf_r+0x2bc>)
   1476e:	2b00      	cmp	r3, #0
   14770:	d072      	beq.n	14858 <_vfiprintf_r+0x234>
   14772:	ab05      	add	r3, sp, #20
   14774:	9300      	str	r3, [sp, #0]
   14776:	465a      	mov	r2, fp
   14778:	4b5a      	ldr	r3, [pc, #360]	; (148e4 <_vfiprintf_r+0x2c0>)
   1477a:	9803      	ldr	r0, [sp, #12]
   1477c:	a906      	add	r1, sp, #24
   1477e:	f3af 8000 	nop.w
   14782:	4681      	mov	r9, r0
   14784:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   14788:	d007      	beq.n	1479a <_vfiprintf_r+0x176>
   1478a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1478c:	444b      	add	r3, r9
   1478e:	930b      	str	r3, [sp, #44]	; 0x2c
   14790:	f898 3000 	ldrb.w	r3, [r8]
   14794:	2b00      	cmp	r3, #0
   14796:	f47f af79 	bne.w	1468c <_vfiprintf_r+0x68>
   1479a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   1479e:	065b      	lsls	r3, r3, #25
   147a0:	d418      	bmi.n	147d4 <_vfiprintf_r+0x1b0>
   147a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   147a4:	b01f      	add	sp, #124	; 0x7c
   147a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147aa:	f7ff fbf7 	bl	13f9c <__sinit>
   147ae:	4b46      	ldr	r3, [pc, #280]	; (148c8 <_vfiprintf_r+0x2a4>)
   147b0:	459b      	cmp	fp, r3
   147b2:	f47f af47 	bne.w	14644 <_vfiprintf_r+0x20>
   147b6:	9b03      	ldr	r3, [sp, #12]
   147b8:	f8d3 b004 	ldr.w	fp, [r3, #4]
   147bc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   147c0:	0718      	lsls	r0, r3, #28
   147c2:	f53f af4e 	bmi.w	14662 <_vfiprintf_r+0x3e>
   147c6:	4659      	mov	r1, fp
   147c8:	9803      	ldr	r0, [sp, #12]
   147ca:	f7ff f9a7 	bl	13b1c <__swsetup_r>
   147ce:	2800      	cmp	r0, #0
   147d0:	f43f af4c 	beq.w	1466c <_vfiprintf_r+0x48>
   147d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   147d8:	e7e4      	b.n	147a4 <_vfiprintf_r+0x180>
   147da:	9b03      	ldr	r3, [sp, #12]
   147dc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   147e0:	e73a      	b.n	14658 <_vfiprintf_r+0x34>
   147e2:	ebb4 0a08 	subs.w	sl, r4, r8
   147e6:	f43f af6f 	beq.w	146c8 <_vfiprintf_r+0xa4>
   147ea:	e75f      	b.n	146ac <_vfiprintf_r+0x88>
   147ec:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   147f0:	2a09      	cmp	r2, #9
   147f2:	bf88      	it	hi
   147f4:	46a2      	movhi	sl, r4
   147f6:	d89c      	bhi.n	14732 <_vfiprintf_r+0x10e>
   147f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   147fa:	e001      	b.n	14800 <_vfiprintf_r+0x1dc>
   147fc:	462c      	mov	r4, r5
   147fe:	3501      	adds	r5, #1
   14800:	7829      	ldrb	r1, [r5, #0]
   14802:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14806:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1480a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1480e:	2a09      	cmp	r2, #9
   14810:	46aa      	mov	sl, r5
   14812:	d9f3      	bls.n	147fc <_vfiprintf_r+0x1d8>
   14814:	292e      	cmp	r1, #46	; 0x2e
   14816:	f104 0502 	add.w	r5, r4, #2
   1481a:	9309      	str	r3, [sp, #36]	; 0x24
   1481c:	d18b      	bne.n	14736 <_vfiprintf_r+0x112>
   1481e:	f89a 1001 	ldrb.w	r1, [sl, #1]
   14822:	292a      	cmp	r1, #42	; 0x2a
   14824:	d12f      	bne.n	14886 <_vfiprintf_r+0x262>
   14826:	9b05      	ldr	r3, [sp, #20]
   14828:	f89a 1002 	ldrb.w	r1, [sl, #2]
   1482c:	681a      	ldr	r2, [r3, #0]
   1482e:	9207      	str	r2, [sp, #28]
   14830:	3304      	adds	r3, #4
   14832:	2a00      	cmp	r2, #0
   14834:	9305      	str	r3, [sp, #20]
   14836:	f10a 0503 	add.w	r5, sl, #3
   1483a:	f10a 0302 	add.w	r3, sl, #2
   1483e:	db38      	blt.n	148b2 <_vfiprintf_r+0x28e>
   14840:	4c25      	ldr	r4, [pc, #148]	; (148d8 <_vfiprintf_r+0x2b4>)
   14842:	2203      	movs	r2, #3
   14844:	4620      	mov	r0, r4
   14846:	469a      	mov	sl, r3
   14848:	f000 fcf2 	bl	15230 <memchr>
   1484c:	2800      	cmp	r0, #0
   1484e:	f47f af7a 	bne.w	14746 <_vfiprintf_r+0x122>
   14852:	46a8      	mov	r8, r5
   14854:	4655      	mov	r5, sl
   14856:	e77f      	b.n	14758 <_vfiprintf_r+0x134>
   14858:	9b05      	ldr	r3, [sp, #20]
   1485a:	3307      	adds	r3, #7
   1485c:	f023 0307 	bic.w	r3, r3, #7
   14860:	3308      	adds	r3, #8
   14862:	9305      	str	r3, [sp, #20]
   14864:	e791      	b.n	1478a <_vfiprintf_r+0x166>
   14866:	4249      	negs	r1, r1
   14868:	f043 0302 	orr.w	r3, r3, #2
   1486c:	9109      	str	r1, [sp, #36]	; 0x24
   1486e:	9306      	str	r3, [sp, #24]
   14870:	e75d      	b.n	1472e <_vfiprintf_r+0x10a>
   14872:	ab05      	add	r3, sp, #20
   14874:	9300      	str	r3, [sp, #0]
   14876:	465a      	mov	r2, fp
   14878:	4b1a      	ldr	r3, [pc, #104]	; (148e4 <_vfiprintf_r+0x2c0>)
   1487a:	9803      	ldr	r0, [sp, #12]
   1487c:	a906      	add	r1, sp, #24
   1487e:	f000 f8d5 	bl	14a2c <_printf_i>
   14882:	4681      	mov	r9, r0
   14884:	e77e      	b.n	14784 <_vfiprintf_r+0x160>
   14886:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1488a:	2300      	movs	r3, #0
   1488c:	2a09      	cmp	r2, #9
   1488e:	9307      	str	r3, [sp, #28]
   14890:	d901      	bls.n	14896 <_vfiprintf_r+0x272>
   14892:	e015      	b.n	148c0 <_vfiprintf_r+0x29c>
   14894:	4655      	mov	r5, sl
   14896:	7869      	ldrb	r1, [r5, #1]
   14898:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1489c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   148a0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   148a4:	2a09      	cmp	r2, #9
   148a6:	f105 0a01 	add.w	sl, r5, #1
   148aa:	d9f3      	bls.n	14894 <_vfiprintf_r+0x270>
   148ac:	3502      	adds	r5, #2
   148ae:	9307      	str	r3, [sp, #28]
   148b0:	e741      	b.n	14736 <_vfiprintf_r+0x112>
   148b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   148b6:	469a      	mov	sl, r3
   148b8:	9207      	str	r2, [sp, #28]
   148ba:	e73c      	b.n	14736 <_vfiprintf_r+0x112>
   148bc:	4644      	mov	r4, r8
   148be:	e703      	b.n	146c8 <_vfiprintf_r+0xa4>
   148c0:	46aa      	mov	sl, r5
   148c2:	3501      	adds	r5, #1
   148c4:	e737      	b.n	14736 <_vfiprintf_r+0x112>
   148c6:	bf00      	nop
   148c8:	000162e0 	.word	0x000162e0
   148cc:	000162c0 	.word	0x000162c0
   148d0:	000162a0 	.word	0x000162a0
   148d4:	00016300 	.word	0x00016300
   148d8:	00016308 	.word	0x00016308
   148dc:	0001630c 	.word	0x0001630c
   148e0:	00000000 	.word	0x00000000
   148e4:	000145d9 	.word	0x000145d9

000148e8 <vfiprintf>:
   148e8:	b410      	push	{r4}
   148ea:	4c04      	ldr	r4, [pc, #16]	; (148fc <vfiprintf+0x14>)
   148ec:	4613      	mov	r3, r2
   148ee:	460a      	mov	r2, r1
   148f0:	4601      	mov	r1, r0
   148f2:	6820      	ldr	r0, [r4, #0]
   148f4:	bc10      	pop	{r4}
   148f6:	f7ff be95 	b.w	14624 <_vfiprintf_r>
   148fa:	bf00      	nop
   148fc:	20000548 	.word	0x20000548

00014900 <_printf_common>:
   14900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14904:	460c      	mov	r4, r1
   14906:	4691      	mov	r9, r2
   14908:	690a      	ldr	r2, [r1, #16]
   1490a:	6889      	ldr	r1, [r1, #8]
   1490c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   14910:	428a      	cmp	r2, r1
   14912:	bfb8      	it	lt
   14914:	460a      	movlt	r2, r1
   14916:	f8c9 2000 	str.w	r2, [r9]
   1491a:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
   1491e:	4606      	mov	r6, r0
   14920:	461f      	mov	r7, r3
   14922:	b111      	cbz	r1, 1492a <_printf_common+0x2a>
   14924:	3201      	adds	r2, #1
   14926:	f8c9 2000 	str.w	r2, [r9]
   1492a:	6823      	ldr	r3, [r4, #0]
   1492c:	0699      	lsls	r1, r3, #26
   1492e:	d55c      	bpl.n	149ea <_printf_common+0xea>
   14930:	f8d9 2000 	ldr.w	r2, [r9]
   14934:	3202      	adds	r2, #2
   14936:	f8c9 2000 	str.w	r2, [r9]
   1493a:	6823      	ldr	r3, [r4, #0]
   1493c:	f013 0f06 	tst.w	r3, #6
   14940:	4619      	mov	r1, r3
   14942:	d11d      	bne.n	14980 <_printf_common+0x80>
   14944:	68e1      	ldr	r1, [r4, #12]
   14946:	1a8a      	subs	r2, r1, r2
   14948:	2a00      	cmp	r2, #0
   1494a:	bfd8      	it	le
   1494c:	4619      	movle	r1, r3
   1494e:	dd17      	ble.n	14980 <_printf_common+0x80>
   14950:	f104 0a19 	add.w	sl, r4, #25
   14954:	2500      	movs	r5, #0
   14956:	e005      	b.n	14964 <_printf_common+0x64>
   14958:	68e3      	ldr	r3, [r4, #12]
   1495a:	f8d9 2000 	ldr.w	r2, [r9]
   1495e:	1a9b      	subs	r3, r3, r2
   14960:	42ab      	cmp	r3, r5
   14962:	dd0c      	ble.n	1497e <_printf_common+0x7e>
   14964:	2301      	movs	r3, #1
   14966:	4652      	mov	r2, sl
   14968:	4639      	mov	r1, r7
   1496a:	4630      	mov	r0, r6
   1496c:	47c0      	blx	r8
   1496e:	3001      	adds	r0, #1
   14970:	f105 0501 	add.w	r5, r5, #1
   14974:	d1f0      	bne.n	14958 <_printf_common+0x58>
   14976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1497a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1497e:	6821      	ldr	r1, [r4, #0]
   14980:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   14984:	3300      	adds	r3, #0
   14986:	bf18      	it	ne
   14988:	2301      	movne	r3, #1
   1498a:	068a      	lsls	r2, r1, #26
   1498c:	d50a      	bpl.n	149a4 <_printf_common+0xa4>
   1498e:	18e1      	adds	r1, r4, r3
   14990:	1c5a      	adds	r2, r3, #1
   14992:	2030      	movs	r0, #48	; 0x30
   14994:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   14998:	4422      	add	r2, r4
   1499a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   1499e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   149a2:	3302      	adds	r3, #2
   149a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   149a8:	4639      	mov	r1, r7
   149aa:	4630      	mov	r0, r6
   149ac:	47c0      	blx	r8
   149ae:	3001      	adds	r0, #1
   149b0:	d0e1      	beq.n	14976 <_printf_common+0x76>
   149b2:	6823      	ldr	r3, [r4, #0]
   149b4:	68a2      	ldr	r2, [r4, #8]
   149b6:	6921      	ldr	r1, [r4, #16]
   149b8:	f003 0306 	and.w	r3, r3, #6
   149bc:	2b04      	cmp	r3, #4
   149be:	d01d      	beq.n	149fc <_printf_common+0xfc>
   149c0:	428a      	cmp	r2, r1
   149c2:	dd26      	ble.n	14a12 <_printf_common+0x112>
   149c4:	f04f 0900 	mov.w	r9, #0
   149c8:	1a52      	subs	r2, r2, r1
   149ca:	4491      	add	r9, r2
   149cc:	341a      	adds	r4, #26
   149ce:	2500      	movs	r5, #0
   149d0:	e001      	b.n	149d6 <_printf_common+0xd6>
   149d2:	454d      	cmp	r5, r9
   149d4:	da1d      	bge.n	14a12 <_printf_common+0x112>
   149d6:	2301      	movs	r3, #1
   149d8:	4622      	mov	r2, r4
   149da:	4639      	mov	r1, r7
   149dc:	4630      	mov	r0, r6
   149de:	47c0      	blx	r8
   149e0:	3001      	adds	r0, #1
   149e2:	f105 0501 	add.w	r5, r5, #1
   149e6:	d1f4      	bne.n	149d2 <_printf_common+0xd2>
   149e8:	e7c5      	b.n	14976 <_printf_common+0x76>
   149ea:	f013 0f06 	tst.w	r3, #6
   149ee:	d013      	beq.n	14a18 <_printf_common+0x118>
   149f0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   149f4:	3300      	adds	r3, #0
   149f6:	bf18      	it	ne
   149f8:	2301      	movne	r3, #1
   149fa:	e7d3      	b.n	149a4 <_printf_common+0xa4>
   149fc:	f8d9 0000 	ldr.w	r0, [r9]
   14a00:	68e3      	ldr	r3, [r4, #12]
   14a02:	428a      	cmp	r2, r1
   14a04:	eba3 0300 	sub.w	r3, r3, r0
   14a08:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
   14a0c:	dcdc      	bgt.n	149c8 <_printf_common+0xc8>
   14a0e:	2b00      	cmp	r3, #0
   14a10:	dcdc      	bgt.n	149cc <_printf_common+0xcc>
   14a12:	2000      	movs	r0, #0
   14a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14a18:	68e1      	ldr	r1, [r4, #12]
   14a1a:	f8d9 2000 	ldr.w	r2, [r9]
   14a1e:	1a8a      	subs	r2, r1, r2
   14a20:	2a00      	cmp	r2, #0
   14a22:	bfd8      	it	le
   14a24:	4619      	movle	r1, r3
   14a26:	dc93      	bgt.n	14950 <_printf_common+0x50>
   14a28:	e7aa      	b.n	14980 <_printf_common+0x80>
   14a2a:	bf00      	nop

00014a2c <_printf_i>:
   14a2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14a30:	460c      	mov	r4, r1
   14a32:	7e09      	ldrb	r1, [r1, #24]
   14a34:	b085      	sub	sp, #20
   14a36:	296e      	cmp	r1, #110	; 0x6e
   14a38:	4606      	mov	r6, r0
   14a3a:	4617      	mov	r7, r2
   14a3c:	980c      	ldr	r0, [sp, #48]	; 0x30
   14a3e:	4698      	mov	r8, r3
   14a40:	f104 0e43 	add.w	lr, r4, #67	; 0x43
   14a44:	d06d      	beq.n	14b22 <_printf_i+0xf6>
   14a46:	d939      	bls.n	14abc <_printf_i+0x90>
   14a48:	2973      	cmp	r1, #115	; 0x73
   14a4a:	f000 80f6 	beq.w	14c3a <_printf_i+0x20e>
   14a4e:	d944      	bls.n	14ada <_printf_i+0xae>
   14a50:	2975      	cmp	r1, #117	; 0x75
   14a52:	f000 8104 	beq.w	14c5e <_printf_i+0x232>
   14a56:	2978      	cmp	r1, #120	; 0x78
   14a58:	f040 8111 	bne.w	14c7e <_printf_i+0x252>
   14a5c:	2378      	movs	r3, #120	; 0x78
   14a5e:	6822      	ldr	r2, [r4, #0]
   14a60:	f8df c258 	ldr.w	ip, [pc, #600]	; 14cbc <_printf_i+0x290>
   14a64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   14a68:	6801      	ldr	r1, [r0, #0]
   14a6a:	0615      	lsls	r5, r2, #24
   14a6c:	f851 3b04 	ldr.w	r3, [r1], #4
   14a70:	6001      	str	r1, [r0, #0]
   14a72:	f140 80a1 	bpl.w	14bb8 <_printf_i+0x18c>
   14a76:	07d1      	lsls	r1, r2, #31
   14a78:	bf44      	itt	mi
   14a7a:	f042 0220 	orrmi.w	r2, r2, #32
   14a7e:	6022      	strmi	r2, [r4, #0]
   14a80:	2b00      	cmp	r3, #0
   14a82:	f000 8093 	beq.w	14bac <_printf_i+0x180>
   14a86:	2210      	movs	r2, #16
   14a88:	2100      	movs	r1, #0
   14a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   14a8e:	6860      	ldr	r0, [r4, #4]
   14a90:	60a0      	str	r0, [r4, #8]
   14a92:	2800      	cmp	r0, #0
   14a94:	f2c0 80c8 	blt.w	14c28 <_printf_i+0x1fc>
   14a98:	6821      	ldr	r1, [r4, #0]
   14a9a:	f021 0104 	bic.w	r1, r1, #4
   14a9e:	6021      	str	r1, [r4, #0]
   14aa0:	2b00      	cmp	r3, #0
   14aa2:	f040 80a3 	bne.w	14bec <_printf_i+0x1c0>
   14aa6:	2800      	cmp	r0, #0
   14aa8:	f040 80c0 	bne.w	14c2c <_printf_i+0x200>
   14aac:	4675      	mov	r5, lr
   14aae:	2a08      	cmp	r2, #8
   14ab0:	f000 80ac 	beq.w	14c0c <_printf_i+0x1e0>
   14ab4:	ebae 0305 	sub.w	r3, lr, r5
   14ab8:	6123      	str	r3, [r4, #16]
   14aba:	e041      	b.n	14b40 <_printf_i+0x114>
   14abc:	2963      	cmp	r1, #99	; 0x63
   14abe:	f000 80e5 	beq.w	14c8c <_printf_i+0x260>
   14ac2:	d81a      	bhi.n	14afa <_printf_i+0xce>
   14ac4:	2900      	cmp	r1, #0
   14ac6:	d038      	beq.n	14b3a <_printf_i+0x10e>
   14ac8:	2958      	cmp	r1, #88	; 0x58
   14aca:	f040 80d8 	bne.w	14c7e <_printf_i+0x252>
   14ace:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   14ad2:	6822      	ldr	r2, [r4, #0]
   14ad4:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 14cc0 <_printf_i+0x294>
   14ad8:	e7c6      	b.n	14a68 <_printf_i+0x3c>
   14ada:	296f      	cmp	r1, #111	; 0x6f
   14adc:	f000 80bf 	beq.w	14c5e <_printf_i+0x232>
   14ae0:	2970      	cmp	r1, #112	; 0x70
   14ae2:	f040 80cc 	bne.w	14c7e <_printf_i+0x252>
   14ae6:	6822      	ldr	r2, [r4, #0]
   14ae8:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 14cbc <_printf_i+0x290>
   14aec:	f042 0220 	orr.w	r2, r2, #32
   14af0:	2378      	movs	r3, #120	; 0x78
   14af2:	6022      	str	r2, [r4, #0]
   14af4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   14af8:	e7b6      	b.n	14a68 <_printf_i+0x3c>
   14afa:	2964      	cmp	r1, #100	; 0x64
   14afc:	d002      	beq.n	14b04 <_printf_i+0xd8>
   14afe:	2969      	cmp	r1, #105	; 0x69
   14b00:	f040 80bd 	bne.w	14c7e <_printf_i+0x252>
   14b04:	6822      	ldr	r2, [r4, #0]
   14b06:	6803      	ldr	r3, [r0, #0]
   14b08:	0611      	lsls	r1, r2, #24
   14b0a:	f103 0504 	add.w	r5, r3, #4
   14b0e:	d557      	bpl.n	14bc0 <_printf_i+0x194>
   14b10:	6819      	ldr	r1, [r3, #0]
   14b12:	6005      	str	r5, [r0, #0]
   14b14:	460b      	mov	r3, r1
   14b16:	2900      	cmp	r1, #0
   14b18:	db59      	blt.n	14bce <_printf_i+0x1a2>
   14b1a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 14cc0 <_printf_i+0x294>
   14b1e:	220a      	movs	r2, #10
   14b20:	e7b5      	b.n	14a8e <_printf_i+0x62>
   14b22:	6803      	ldr	r3, [r0, #0]
   14b24:	6822      	ldr	r2, [r4, #0]
   14b26:	6961      	ldr	r1, [r4, #20]
   14b28:	1d1d      	adds	r5, r3, #4
   14b2a:	6005      	str	r5, [r0, #0]
   14b2c:	0615      	lsls	r5, r2, #24
   14b2e:	681b      	ldr	r3, [r3, #0]
   14b30:	d402      	bmi.n	14b38 <_printf_i+0x10c>
   14b32:	0650      	lsls	r0, r2, #25
   14b34:	f100 80bd 	bmi.w	14cb2 <_printf_i+0x286>
   14b38:	6019      	str	r1, [r3, #0]
   14b3a:	2300      	movs	r3, #0
   14b3c:	4675      	mov	r5, lr
   14b3e:	6123      	str	r3, [r4, #16]
   14b40:	f8cd 8000 	str.w	r8, [sp]
   14b44:	463b      	mov	r3, r7
   14b46:	aa03      	add	r2, sp, #12
   14b48:	4621      	mov	r1, r4
   14b4a:	4630      	mov	r0, r6
   14b4c:	f7ff fed8 	bl	14900 <_printf_common>
   14b50:	3001      	adds	r0, #1
   14b52:	d020      	beq.n	14b96 <_printf_i+0x16a>
   14b54:	462a      	mov	r2, r5
   14b56:	6923      	ldr	r3, [r4, #16]
   14b58:	4639      	mov	r1, r7
   14b5a:	4630      	mov	r0, r6
   14b5c:	47c0      	blx	r8
   14b5e:	3001      	adds	r0, #1
   14b60:	d019      	beq.n	14b96 <_printf_i+0x16a>
   14b62:	6822      	ldr	r2, [r4, #0]
   14b64:	9803      	ldr	r0, [sp, #12]
   14b66:	68e3      	ldr	r3, [r4, #12]
   14b68:	0792      	lsls	r2, r2, #30
   14b6a:	d519      	bpl.n	14ba0 <_printf_i+0x174>
   14b6c:	1a1a      	subs	r2, r3, r0
   14b6e:	2a00      	cmp	r2, #0
   14b70:	dd16      	ble.n	14ba0 <_printf_i+0x174>
   14b72:	f104 0919 	add.w	r9, r4, #25
   14b76:	2500      	movs	r5, #0
   14b78:	e004      	b.n	14b84 <_printf_i+0x158>
   14b7a:	68e3      	ldr	r3, [r4, #12]
   14b7c:	9803      	ldr	r0, [sp, #12]
   14b7e:	1a1a      	subs	r2, r3, r0
   14b80:	42aa      	cmp	r2, r5
   14b82:	dd0d      	ble.n	14ba0 <_printf_i+0x174>
   14b84:	2301      	movs	r3, #1
   14b86:	464a      	mov	r2, r9
   14b88:	4639      	mov	r1, r7
   14b8a:	4630      	mov	r0, r6
   14b8c:	47c0      	blx	r8
   14b8e:	3001      	adds	r0, #1
   14b90:	f105 0501 	add.w	r5, r5, #1
   14b94:	d1f1      	bne.n	14b7a <_printf_i+0x14e>
   14b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b9a:	b005      	add	sp, #20
   14b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14ba0:	4298      	cmp	r0, r3
   14ba2:	bfb8      	it	lt
   14ba4:	4618      	movlt	r0, r3
   14ba6:	b005      	add	sp, #20
   14ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14bac:	6822      	ldr	r2, [r4, #0]
   14bae:	f022 0220 	bic.w	r2, r2, #32
   14bb2:	6022      	str	r2, [r4, #0]
   14bb4:	2210      	movs	r2, #16
   14bb6:	e767      	b.n	14a88 <_printf_i+0x5c>
   14bb8:	0650      	lsls	r0, r2, #25
   14bba:	bf48      	it	mi
   14bbc:	b29b      	uxthmi	r3, r3
   14bbe:	e75a      	b.n	14a76 <_printf_i+0x4a>
   14bc0:	0651      	lsls	r1, r2, #25
   14bc2:	d5a5      	bpl.n	14b10 <_printf_i+0xe4>
   14bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
   14bc8:	6005      	str	r5, [r0, #0]
   14bca:	4619      	mov	r1, r3
   14bcc:	e7a3      	b.n	14b16 <_printf_i+0xea>
   14bce:	6861      	ldr	r1, [r4, #4]
   14bd0:	60a1      	str	r1, [r4, #8]
   14bd2:	202d      	movs	r0, #45	; 0x2d
   14bd4:	2900      	cmp	r1, #0
   14bd6:	f1c3 0300 	rsb	r3, r3, #0
   14bda:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
   14bde:	db02      	blt.n	14be6 <_printf_i+0x1ba>
   14be0:	f022 0204 	bic.w	r2, r2, #4
   14be4:	6022      	str	r2, [r4, #0]
   14be6:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 14cc0 <_printf_i+0x294>
   14bea:	220a      	movs	r2, #10
   14bec:	4675      	mov	r5, lr
   14bee:	e000      	b.n	14bf2 <_printf_i+0x1c6>
   14bf0:	460b      	mov	r3, r1
   14bf2:	fbb3 f1f2 	udiv	r1, r3, r2
   14bf6:	fb02 3011 	mls	r0, r2, r1, r3
   14bfa:	4293      	cmp	r3, r2
   14bfc:	f81c 0000 	ldrb.w	r0, [ip, r0]
   14c00:	f805 0d01 	strb.w	r0, [r5, #-1]!
   14c04:	d2f4      	bcs.n	14bf0 <_printf_i+0x1c4>
   14c06:	2a08      	cmp	r2, #8
   14c08:	f47f af54 	bne.w	14ab4 <_printf_i+0x88>
   14c0c:	6823      	ldr	r3, [r4, #0]
   14c0e:	07db      	lsls	r3, r3, #31
   14c10:	f57f af50 	bpl.w	14ab4 <_printf_i+0x88>
   14c14:	6862      	ldr	r2, [r4, #4]
   14c16:	6923      	ldr	r3, [r4, #16]
   14c18:	429a      	cmp	r2, r3
   14c1a:	f73f af4b 	bgt.w	14ab4 <_printf_i+0x88>
   14c1e:	2330      	movs	r3, #48	; 0x30
   14c20:	f805 3c01 	strb.w	r3, [r5, #-1]
   14c24:	3d01      	subs	r5, #1
   14c26:	e745      	b.n	14ab4 <_printf_i+0x88>
   14c28:	2b00      	cmp	r3, #0
   14c2a:	d1df      	bne.n	14bec <_printf_i+0x1c0>
   14c2c:	f89c 3000 	ldrb.w	r3, [ip]
   14c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   14c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
   14c38:	e739      	b.n	14aae <_printf_i+0x82>
   14c3a:	6803      	ldr	r3, [r0, #0]
   14c3c:	6862      	ldr	r2, [r4, #4]
   14c3e:	1d19      	adds	r1, r3, #4
   14c40:	6001      	str	r1, [r0, #0]
   14c42:	681d      	ldr	r5, [r3, #0]
   14c44:	2100      	movs	r1, #0
   14c46:	4628      	mov	r0, r5
   14c48:	f000 faf2 	bl	15230 <memchr>
   14c4c:	2800      	cmp	r0, #0
   14c4e:	d032      	beq.n	14cb6 <_printf_i+0x28a>
   14c50:	1b40      	subs	r0, r0, r5
   14c52:	6060      	str	r0, [r4, #4]
   14c54:	6120      	str	r0, [r4, #16]
   14c56:	2300      	movs	r3, #0
   14c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   14c5c:	e770      	b.n	14b40 <_printf_i+0x114>
   14c5e:	6822      	ldr	r2, [r4, #0]
   14c60:	6803      	ldr	r3, [r0, #0]
   14c62:	f012 0f80 	tst.w	r2, #128	; 0x80
   14c66:	f103 0504 	add.w	r5, r3, #4
   14c6a:	d01a      	beq.n	14ca2 <_printf_i+0x276>
   14c6c:	681b      	ldr	r3, [r3, #0]
   14c6e:	6005      	str	r5, [r0, #0]
   14c70:	296f      	cmp	r1, #111	; 0x6f
   14c72:	bf0c      	ite	eq
   14c74:	2208      	moveq	r2, #8
   14c76:	220a      	movne	r2, #10
   14c78:	f8df c044 	ldr.w	ip, [pc, #68]	; 14cc0 <_printf_i+0x294>
   14c7c:	e704      	b.n	14a88 <_printf_i+0x5c>
   14c7e:	2301      	movs	r3, #1
   14c80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   14c84:	6123      	str	r3, [r4, #16]
   14c86:	f104 0542 	add.w	r5, r4, #66	; 0x42
   14c8a:	e7e4      	b.n	14c56 <_printf_i+0x22a>
   14c8c:	6803      	ldr	r3, [r0, #0]
   14c8e:	681a      	ldr	r2, [r3, #0]
   14c90:	1d19      	adds	r1, r3, #4
   14c92:	2301      	movs	r3, #1
   14c94:	6001      	str	r1, [r0, #0]
   14c96:	f104 0542 	add.w	r5, r4, #66	; 0x42
   14c9a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
   14c9e:	6123      	str	r3, [r4, #16]
   14ca0:	e7d9      	b.n	14c56 <_printf_i+0x22a>
   14ca2:	f012 0f40 	tst.w	r2, #64	; 0x40
   14ca6:	bf0d      	iteet	eq
   14ca8:	681b      	ldreq	r3, [r3, #0]
   14caa:	6005      	strne	r5, [r0, #0]
   14cac:	881b      	ldrhne	r3, [r3, #0]
   14cae:	6005      	streq	r5, [r0, #0]
   14cb0:	e7de      	b.n	14c70 <_printf_i+0x244>
   14cb2:	8019      	strh	r1, [r3, #0]
   14cb4:	e741      	b.n	14b3a <_printf_i+0x10e>
   14cb6:	6860      	ldr	r0, [r4, #4]
   14cb8:	e7cc      	b.n	14c54 <_printf_i+0x228>
   14cba:	bf00      	nop
   14cbc:	00016328 	.word	0x00016328
   14cc0:	00016314 	.word	0x00016314

00014cc4 <_putc_r>:
   14cc4:	b510      	push	{r4, lr}
   14cc6:	4604      	mov	r4, r0
   14cc8:	b082      	sub	sp, #8
   14cca:	b108      	cbz	r0, 14cd0 <_putc_r+0xc>
   14ccc:	6983      	ldr	r3, [r0, #24]
   14cce:	b1d3      	cbz	r3, 14d06 <_putc_r+0x42>
   14cd0:	4b19      	ldr	r3, [pc, #100]	; (14d38 <_putc_r+0x74>)
   14cd2:	429a      	cmp	r2, r3
   14cd4:	d020      	beq.n	14d18 <_putc_r+0x54>
   14cd6:	4b19      	ldr	r3, [pc, #100]	; (14d3c <_putc_r+0x78>)
   14cd8:	429a      	cmp	r2, r3
   14cda:	d025      	beq.n	14d28 <_putc_r+0x64>
   14cdc:	4b18      	ldr	r3, [pc, #96]	; (14d40 <_putc_r+0x7c>)
   14cde:	429a      	cmp	r2, r3
   14ce0:	bf08      	it	eq
   14ce2:	68e2      	ldreq	r2, [r4, #12]
   14ce4:	6893      	ldr	r3, [r2, #8]
   14ce6:	3b01      	subs	r3, #1
   14ce8:	2b00      	cmp	r3, #0
   14cea:	6093      	str	r3, [r2, #8]
   14cec:	da1a      	bge.n	14d24 <_putc_r+0x60>
   14cee:	6990      	ldr	r0, [r2, #24]
   14cf0:	4283      	cmp	r3, r0
   14cf2:	db1b      	blt.n	14d2c <_putc_r+0x68>
   14cf4:	b2c8      	uxtb	r0, r1
   14cf6:	280a      	cmp	r0, #10
   14cf8:	d018      	beq.n	14d2c <_putc_r+0x68>
   14cfa:	6813      	ldr	r3, [r2, #0]
   14cfc:	1c5c      	adds	r4, r3, #1
   14cfe:	6014      	str	r4, [r2, #0]
   14d00:	7019      	strb	r1, [r3, #0]
   14d02:	b002      	add	sp, #8
   14d04:	bd10      	pop	{r4, pc}
   14d06:	e9cd 1200 	strd	r1, r2, [sp]
   14d0a:	f7ff f947 	bl	13f9c <__sinit>
   14d0e:	e9dd 1200 	ldrd	r1, r2, [sp]
   14d12:	4b09      	ldr	r3, [pc, #36]	; (14d38 <_putc_r+0x74>)
   14d14:	429a      	cmp	r2, r3
   14d16:	d1de      	bne.n	14cd6 <_putc_r+0x12>
   14d18:	6862      	ldr	r2, [r4, #4]
   14d1a:	6893      	ldr	r3, [r2, #8]
   14d1c:	3b01      	subs	r3, #1
   14d1e:	2b00      	cmp	r3, #0
   14d20:	6093      	str	r3, [r2, #8]
   14d22:	dbe4      	blt.n	14cee <_putc_r+0x2a>
   14d24:	b2c8      	uxtb	r0, r1
   14d26:	e7e8      	b.n	14cfa <_putc_r+0x36>
   14d28:	68a2      	ldr	r2, [r4, #8]
   14d2a:	e7db      	b.n	14ce4 <_putc_r+0x20>
   14d2c:	4620      	mov	r0, r4
   14d2e:	b002      	add	sp, #8
   14d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14d34:	f7fe be92 	b.w	13a5c <__swbuf_r>
   14d38:	000162e0 	.word	0x000162e0
   14d3c:	000162c0 	.word	0x000162c0
   14d40:	000162a0 	.word	0x000162a0

00014d44 <putc>:
   14d44:	4b1e      	ldr	r3, [pc, #120]	; (14dc0 <putc+0x7c>)
   14d46:	b570      	push	{r4, r5, r6, lr}
   14d48:	681d      	ldr	r5, [r3, #0]
   14d4a:	4606      	mov	r6, r0
   14d4c:	460c      	mov	r4, r1
   14d4e:	b10d      	cbz	r5, 14d54 <putc+0x10>
   14d50:	69ab      	ldr	r3, [r5, #24]
   14d52:	b1cb      	cbz	r3, 14d88 <putc+0x44>
   14d54:	4b1b      	ldr	r3, [pc, #108]	; (14dc4 <putc+0x80>)
   14d56:	429c      	cmp	r4, r3
   14d58:	d01c      	beq.n	14d94 <putc+0x50>
   14d5a:	4b1b      	ldr	r3, [pc, #108]	; (14dc8 <putc+0x84>)
   14d5c:	429c      	cmp	r4, r3
   14d5e:	d025      	beq.n	14dac <putc+0x68>
   14d60:	4b1a      	ldr	r3, [pc, #104]	; (14dcc <putc+0x88>)
   14d62:	429c      	cmp	r4, r3
   14d64:	bf08      	it	eq
   14d66:	68ec      	ldreq	r4, [r5, #12]
   14d68:	68a3      	ldr	r3, [r4, #8]
   14d6a:	3b01      	subs	r3, #1
   14d6c:	2b00      	cmp	r3, #0
   14d6e:	60a3      	str	r3, [r4, #8]
   14d70:	da16      	bge.n	14da0 <putc+0x5c>
   14d72:	69a2      	ldr	r2, [r4, #24]
   14d74:	4293      	cmp	r3, r2
   14d76:	db1b      	blt.n	14db0 <putc+0x6c>
   14d78:	b2f0      	uxtb	r0, r6
   14d7a:	280a      	cmp	r0, #10
   14d7c:	d018      	beq.n	14db0 <putc+0x6c>
   14d7e:	6823      	ldr	r3, [r4, #0]
   14d80:	1c5a      	adds	r2, r3, #1
   14d82:	6022      	str	r2, [r4, #0]
   14d84:	701e      	strb	r6, [r3, #0]
   14d86:	bd70      	pop	{r4, r5, r6, pc}
   14d88:	4628      	mov	r0, r5
   14d8a:	f7ff f907 	bl	13f9c <__sinit>
   14d8e:	4b0d      	ldr	r3, [pc, #52]	; (14dc4 <putc+0x80>)
   14d90:	429c      	cmp	r4, r3
   14d92:	d1e2      	bne.n	14d5a <putc+0x16>
   14d94:	686c      	ldr	r4, [r5, #4]
   14d96:	68a3      	ldr	r3, [r4, #8]
   14d98:	3b01      	subs	r3, #1
   14d9a:	2b00      	cmp	r3, #0
   14d9c:	60a3      	str	r3, [r4, #8]
   14d9e:	dbe8      	blt.n	14d72 <putc+0x2e>
   14da0:	6823      	ldr	r3, [r4, #0]
   14da2:	1c5a      	adds	r2, r3, #1
   14da4:	6022      	str	r2, [r4, #0]
   14da6:	701e      	strb	r6, [r3, #0]
   14da8:	b2f0      	uxtb	r0, r6
   14daa:	bd70      	pop	{r4, r5, r6, pc}
   14dac:	68ac      	ldr	r4, [r5, #8]
   14dae:	e7db      	b.n	14d68 <putc+0x24>
   14db0:	4622      	mov	r2, r4
   14db2:	4631      	mov	r1, r6
   14db4:	4628      	mov	r0, r5
   14db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14dba:	f7fe be4f 	b.w	13a5c <__swbuf_r>
   14dbe:	bf00      	nop
   14dc0:	20000548 	.word	0x20000548
   14dc4:	000162e0 	.word	0x000162e0
   14dc8:	000162c0 	.word	0x000162c0
   14dcc:	000162a0 	.word	0x000162a0

00014dd0 <__sread>:
   14dd0:	b510      	push	{r4, lr}
   14dd2:	460c      	mov	r4, r1
   14dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14dd8:	f000 fb08 	bl	153ec <_read_r>
   14ddc:	2800      	cmp	r0, #0
   14dde:	db03      	blt.n	14de8 <__sread+0x18>
   14de0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   14de2:	4403      	add	r3, r0
   14de4:	6563      	str	r3, [r4, #84]	; 0x54
   14de6:	bd10      	pop	{r4, pc}
   14de8:	89a3      	ldrh	r3, [r4, #12]
   14dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   14dee:	81a3      	strh	r3, [r4, #12]
   14df0:	bd10      	pop	{r4, pc}
   14df2:	bf00      	nop

00014df4 <__seofread>:
   14df4:	2000      	movs	r0, #0
   14df6:	4770      	bx	lr

00014df8 <__swrite>:
   14df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dfc:	4616      	mov	r6, r2
   14dfe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   14e02:	461f      	mov	r7, r3
   14e04:	05d3      	lsls	r3, r2, #23
   14e06:	460c      	mov	r4, r1
   14e08:	4605      	mov	r5, r0
   14e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14e0e:	d409      	bmi.n	14e24 <__swrite+0x2c>
   14e10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   14e14:	81a2      	strh	r2, [r4, #12]
   14e16:	463b      	mov	r3, r7
   14e18:	4632      	mov	r2, r6
   14e1a:	4628      	mov	r0, r5
   14e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14e20:	f000 b81e 	b.w	14e60 <_write_r>
   14e24:	2200      	movs	r2, #0
   14e26:	2302      	movs	r3, #2
   14e28:	f000 f9ec 	bl	15204 <_lseek_r>
   14e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14e34:	e7ec      	b.n	14e10 <__swrite+0x18>
   14e36:	bf00      	nop

00014e38 <__sseek>:
   14e38:	b510      	push	{r4, lr}
   14e3a:	460c      	mov	r4, r1
   14e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14e40:	f000 f9e0 	bl	15204 <_lseek_r>
   14e44:	89a3      	ldrh	r3, [r4, #12]
   14e46:	1c42      	adds	r2, r0, #1
   14e48:	bf0e      	itee	eq
   14e4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   14e4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   14e52:	6560      	strne	r0, [r4, #84]	; 0x54
   14e54:	81a3      	strh	r3, [r4, #12]
   14e56:	bd10      	pop	{r4, pc}

00014e58 <__sclose>:
   14e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   14e5c:	f000 b816 	b.w	14e8c <_close_r>

00014e60 <_write_r>:
   14e60:	b570      	push	{r4, r5, r6, lr}
   14e62:	460d      	mov	r5, r1
   14e64:	4c08      	ldr	r4, [pc, #32]	; (14e88 <_write_r+0x28>)
   14e66:	4611      	mov	r1, r2
   14e68:	4606      	mov	r6, r0
   14e6a:	461a      	mov	r2, r3
   14e6c:	4628      	mov	r0, r5
   14e6e:	2300      	movs	r3, #0
   14e70:	6023      	str	r3, [r4, #0]
   14e72:	f7f6 fcfb 	bl	b86c <_write>
   14e76:	1c43      	adds	r3, r0, #1
   14e78:	d000      	beq.n	14e7c <_write_r+0x1c>
   14e7a:	bd70      	pop	{r4, r5, r6, pc}
   14e7c:	6823      	ldr	r3, [r4, #0]
   14e7e:	2b00      	cmp	r3, #0
   14e80:	d0fb      	beq.n	14e7a <_write_r+0x1a>
   14e82:	6033      	str	r3, [r6, #0]
   14e84:	bd70      	pop	{r4, r5, r6, pc}
   14e86:	bf00      	nop
   14e88:	20014e34 	.word	0x20014e34

00014e8c <_close_r>:
   14e8c:	b538      	push	{r3, r4, r5, lr}
   14e8e:	4c07      	ldr	r4, [pc, #28]	; (14eac <_close_r+0x20>)
   14e90:	2300      	movs	r3, #0
   14e92:	4605      	mov	r5, r0
   14e94:	4608      	mov	r0, r1
   14e96:	6023      	str	r3, [r4, #0]
   14e98:	f7f6 fec4 	bl	bc24 <_close>
   14e9c:	1c43      	adds	r3, r0, #1
   14e9e:	d000      	beq.n	14ea2 <_close_r+0x16>
   14ea0:	bd38      	pop	{r3, r4, r5, pc}
   14ea2:	6823      	ldr	r3, [r4, #0]
   14ea4:	2b00      	cmp	r3, #0
   14ea6:	d0fb      	beq.n	14ea0 <_close_r+0x14>
   14ea8:	602b      	str	r3, [r5, #0]
   14eaa:	bd38      	pop	{r3, r4, r5, pc}
   14eac:	20014e34 	.word	0x20014e34

00014eb0 <_fstat_r>:
   14eb0:	b538      	push	{r3, r4, r5, lr}
   14eb2:	460b      	mov	r3, r1
   14eb4:	4c07      	ldr	r4, [pc, #28]	; (14ed4 <_fstat_r+0x24>)
   14eb6:	4605      	mov	r5, r0
   14eb8:	4611      	mov	r1, r2
   14eba:	4618      	mov	r0, r3
   14ebc:	2300      	movs	r3, #0
   14ebe:	6023      	str	r3, [r4, #0]
   14ec0:	f7f6 feb3 	bl	bc2a <_fstat>
   14ec4:	1c43      	adds	r3, r0, #1
   14ec6:	d000      	beq.n	14eca <_fstat_r+0x1a>
   14ec8:	bd38      	pop	{r3, r4, r5, pc}
   14eca:	6823      	ldr	r3, [r4, #0]
   14ecc:	2b00      	cmp	r3, #0
   14ece:	d0fb      	beq.n	14ec8 <_fstat_r+0x18>
   14ed0:	602b      	str	r3, [r5, #0]
   14ed2:	bd38      	pop	{r3, r4, r5, pc}
   14ed4:	20014e34 	.word	0x20014e34

00014ed8 <__sfvwrite_r>:
   14ed8:	6893      	ldr	r3, [r2, #8]
   14eda:	2b00      	cmp	r3, #0
   14edc:	f000 8102 	beq.w	150e4 <__sfvwrite_r+0x20c>
   14ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ee4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   14ee8:	b29b      	uxth	r3, r3
   14eea:	460c      	mov	r4, r1
   14eec:	0719      	lsls	r1, r3, #28
   14eee:	b083      	sub	sp, #12
   14ef0:	4682      	mov	sl, r0
   14ef2:	4690      	mov	r8, r2
   14ef4:	d535      	bpl.n	14f62 <__sfvwrite_r+0x8a>
   14ef6:	6922      	ldr	r2, [r4, #16]
   14ef8:	b39a      	cbz	r2, 14f62 <__sfvwrite_r+0x8a>
   14efa:	f013 0202 	ands.w	r2, r3, #2
   14efe:	f8d8 6000 	ldr.w	r6, [r8]
   14f02:	d03d      	beq.n	14f80 <__sfvwrite_r+0xa8>
   14f04:	2700      	movs	r7, #0
   14f06:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
   14f0a:	f8d4 c020 	ldr.w	ip, [r4, #32]
   14f0e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 151dc <__sfvwrite_r+0x304>
   14f12:	463d      	mov	r5, r7
   14f14:	454d      	cmp	r5, r9
   14f16:	462b      	mov	r3, r5
   14f18:	463a      	mov	r2, r7
   14f1a:	bf28      	it	cs
   14f1c:	464b      	movcs	r3, r9
   14f1e:	4661      	mov	r1, ip
   14f20:	4650      	mov	r0, sl
   14f22:	b1d5      	cbz	r5, 14f5a <__sfvwrite_r+0x82>
   14f24:	47d8      	blx	fp
   14f26:	2800      	cmp	r0, #0
   14f28:	f340 80d2 	ble.w	150d0 <__sfvwrite_r+0x1f8>
   14f2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   14f30:	1a1b      	subs	r3, r3, r0
   14f32:	4407      	add	r7, r0
   14f34:	1a2d      	subs	r5, r5, r0
   14f36:	f8c8 3008 	str.w	r3, [r8, #8]
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	f000 80b7 	beq.w	150ae <__sfvwrite_r+0x1d6>
   14f40:	f8d4 c020 	ldr.w	ip, [r4, #32]
   14f44:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
   14f48:	454d      	cmp	r5, r9
   14f4a:	462b      	mov	r3, r5
   14f4c:	463a      	mov	r2, r7
   14f4e:	bf28      	it	cs
   14f50:	464b      	movcs	r3, r9
   14f52:	4661      	mov	r1, ip
   14f54:	4650      	mov	r0, sl
   14f56:	2d00      	cmp	r5, #0
   14f58:	d1e4      	bne.n	14f24 <__sfvwrite_r+0x4c>
   14f5a:	e9d6 7500 	ldrd	r7, r5, [r6]
   14f5e:	3608      	adds	r6, #8
   14f60:	e7d8      	b.n	14f14 <__sfvwrite_r+0x3c>
   14f62:	4621      	mov	r1, r4
   14f64:	4650      	mov	r0, sl
   14f66:	f7fe fdd9 	bl	13b1c <__swsetup_r>
   14f6a:	2800      	cmp	r0, #0
   14f6c:	f040 8130 	bne.w	151d0 <__sfvwrite_r+0x2f8>
   14f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14f74:	f8d8 6000 	ldr.w	r6, [r8]
   14f78:	b29b      	uxth	r3, r3
   14f7a:	f013 0202 	ands.w	r2, r3, #2
   14f7e:	d1c1      	bne.n	14f04 <__sfvwrite_r+0x2c>
   14f80:	f013 0901 	ands.w	r9, r3, #1
   14f84:	f040 80b0 	bne.w	150e8 <__sfvwrite_r+0x210>
   14f88:	68a7      	ldr	r7, [r4, #8]
   14f8a:	6820      	ldr	r0, [r4, #0]
   14f8c:	464d      	mov	r5, r9
   14f8e:	2d00      	cmp	r5, #0
   14f90:	d054      	beq.n	1503c <__sfvwrite_r+0x164>
   14f92:	059a      	lsls	r2, r3, #22
   14f94:	f140 80bc 	bpl.w	15110 <__sfvwrite_r+0x238>
   14f98:	42af      	cmp	r7, r5
   14f9a:	46bb      	mov	fp, r7
   14f9c:	f200 80e7 	bhi.w	1516e <__sfvwrite_r+0x296>
   14fa0:	f413 6f90 	tst.w	r3, #1152	; 0x480
   14fa4:	d02f      	beq.n	15006 <__sfvwrite_r+0x12e>
   14fa6:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   14faa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   14fae:	eba0 0b01 	sub.w	fp, r0, r1
   14fb2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   14fb6:	1c68      	adds	r0, r5, #1
   14fb8:	107f      	asrs	r7, r7, #1
   14fba:	4458      	add	r0, fp
   14fbc:	42b8      	cmp	r0, r7
   14fbe:	463a      	mov	r2, r7
   14fc0:	bf84      	itt	hi
   14fc2:	4607      	movhi	r7, r0
   14fc4:	463a      	movhi	r2, r7
   14fc6:	055b      	lsls	r3, r3, #21
   14fc8:	f140 80e9 	bpl.w	1519e <__sfvwrite_r+0x2c6>
   14fcc:	4611      	mov	r1, r2
   14fce:	4650      	mov	r0, sl
   14fd0:	f7fd ffbe 	bl	12f50 <_malloc_r>
   14fd4:	2800      	cmp	r0, #0
   14fd6:	f000 80f5 	beq.w	151c4 <__sfvwrite_r+0x2ec>
   14fda:	465a      	mov	r2, fp
   14fdc:	6921      	ldr	r1, [r4, #16]
   14fde:	9001      	str	r0, [sp, #4]
   14fe0:	f7fd fe76 	bl	12cd0 <memcpy>
   14fe4:	89a2      	ldrh	r2, [r4, #12]
   14fe6:	9b01      	ldr	r3, [sp, #4]
   14fe8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   14fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14ff0:	81a2      	strh	r2, [r4, #12]
   14ff2:	eba7 020b 	sub.w	r2, r7, fp
   14ff6:	eb03 000b 	add.w	r0, r3, fp
   14ffa:	6167      	str	r7, [r4, #20]
   14ffc:	6123      	str	r3, [r4, #16]
   14ffe:	6020      	str	r0, [r4, #0]
   15000:	60a2      	str	r2, [r4, #8]
   15002:	462f      	mov	r7, r5
   15004:	46ab      	mov	fp, r5
   15006:	465a      	mov	r2, fp
   15008:	4649      	mov	r1, r9
   1500a:	f000 f961 	bl	152d0 <memmove>
   1500e:	68a2      	ldr	r2, [r4, #8]
   15010:	6823      	ldr	r3, [r4, #0]
   15012:	1bd2      	subs	r2, r2, r7
   15014:	445b      	add	r3, fp
   15016:	462f      	mov	r7, r5
   15018:	60a2      	str	r2, [r4, #8]
   1501a:	6023      	str	r3, [r4, #0]
   1501c:	2500      	movs	r5, #0
   1501e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   15022:	1bdb      	subs	r3, r3, r7
   15024:	44b9      	add	r9, r7
   15026:	f8c8 3008 	str.w	r3, [r8, #8]
   1502a:	2b00      	cmp	r3, #0
   1502c:	d03f      	beq.n	150ae <__sfvwrite_r+0x1d6>
   1502e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15032:	68a7      	ldr	r7, [r4, #8]
   15034:	6820      	ldr	r0, [r4, #0]
   15036:	b29b      	uxth	r3, r3
   15038:	2d00      	cmp	r5, #0
   1503a:	d1aa      	bne.n	14f92 <__sfvwrite_r+0xba>
   1503c:	e9d6 9500 	ldrd	r9, r5, [r6]
   15040:	3608      	adds	r6, #8
   15042:	e7a4      	b.n	14f8e <__sfvwrite_r+0xb6>
   15044:	f10b 0308 	add.w	r3, fp, #8
   15048:	e953 6702 	ldrd	r6, r7, [r3, #-8]
   1504c:	469b      	mov	fp, r3
   1504e:	3308      	adds	r3, #8
   15050:	2f00      	cmp	r7, #0
   15052:	d0f9      	beq.n	15048 <__sfvwrite_r+0x170>
   15054:	463a      	mov	r2, r7
   15056:	210a      	movs	r1, #10
   15058:	4630      	mov	r0, r6
   1505a:	f000 f8e9 	bl	15230 <memchr>
   1505e:	2800      	cmp	r0, #0
   15060:	d053      	beq.n	1510a <__sfvwrite_r+0x232>
   15062:	3001      	adds	r0, #1
   15064:	eba0 0906 	sub.w	r9, r0, r6
   15068:	464b      	mov	r3, r9
   1506a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1506e:	6820      	ldr	r0, [r4, #0]
   15070:	42bb      	cmp	r3, r7
   15072:	bf28      	it	cs
   15074:	463b      	movcs	r3, r7
   15076:	4288      	cmp	r0, r1
   15078:	d903      	bls.n	15082 <__sfvwrite_r+0x1aa>
   1507a:	68a5      	ldr	r5, [r4, #8]
   1507c:	4415      	add	r5, r2
   1507e:	42ab      	cmp	r3, r5
   15080:	dc19      	bgt.n	150b6 <__sfvwrite_r+0x1de>
   15082:	429a      	cmp	r2, r3
   15084:	dc7d      	bgt.n	15182 <__sfvwrite_r+0x2aa>
   15086:	4613      	mov	r3, r2
   15088:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1508a:	6a21      	ldr	r1, [r4, #32]
   1508c:	4632      	mov	r2, r6
   1508e:	4650      	mov	r0, sl
   15090:	47a8      	blx	r5
   15092:	1e05      	subs	r5, r0, #0
   15094:	dd1c      	ble.n	150d0 <__sfvwrite_r+0x1f8>
   15096:	ebb9 0905 	subs.w	r9, r9, r5
   1509a:	d06b      	beq.n	15174 <__sfvwrite_r+0x29c>
   1509c:	2001      	movs	r0, #1
   1509e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   150a2:	1b5b      	subs	r3, r3, r5
   150a4:	442e      	add	r6, r5
   150a6:	1b7f      	subs	r7, r7, r5
   150a8:	f8c8 3008 	str.w	r3, [r8, #8]
   150ac:	bb13      	cbnz	r3, 150f4 <__sfvwrite_r+0x21c>
   150ae:	2000      	movs	r0, #0
   150b0:	b003      	add	sp, #12
   150b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150b6:	4631      	mov	r1, r6
   150b8:	462a      	mov	r2, r5
   150ba:	f000 f909 	bl	152d0 <memmove>
   150be:	6823      	ldr	r3, [r4, #0]
   150c0:	442b      	add	r3, r5
   150c2:	6023      	str	r3, [r4, #0]
   150c4:	4621      	mov	r1, r4
   150c6:	4650      	mov	r0, sl
   150c8:	f7fe fe3e 	bl	13d48 <_fflush_r>
   150cc:	2800      	cmp	r0, #0
   150ce:	d0e2      	beq.n	15096 <__sfvwrite_r+0x1be>
   150d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   150d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   150d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   150dc:	81a3      	strh	r3, [r4, #12]
   150de:	b003      	add	sp, #12
   150e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e4:	2000      	movs	r0, #0
   150e6:	4770      	bx	lr
   150e8:	4633      	mov	r3, r6
   150ea:	4691      	mov	r9, r2
   150ec:	4610      	mov	r0, r2
   150ee:	4617      	mov	r7, r2
   150f0:	464e      	mov	r6, r9
   150f2:	469b      	mov	fp, r3
   150f4:	2f00      	cmp	r7, #0
   150f6:	d0a5      	beq.n	15044 <__sfvwrite_r+0x16c>
   150f8:	2800      	cmp	r0, #0
   150fa:	d1b5      	bne.n	15068 <__sfvwrite_r+0x190>
   150fc:	463a      	mov	r2, r7
   150fe:	210a      	movs	r1, #10
   15100:	4630      	mov	r0, r6
   15102:	f000 f895 	bl	15230 <memchr>
   15106:	2800      	cmp	r0, #0
   15108:	d1ab      	bne.n	15062 <__sfvwrite_r+0x18a>
   1510a:	1c7b      	adds	r3, r7, #1
   1510c:	4699      	mov	r9, r3
   1510e:	e7ac      	b.n	1506a <__sfvwrite_r+0x192>
   15110:	6923      	ldr	r3, [r4, #16]
   15112:	4283      	cmp	r3, r0
   15114:	d315      	bcc.n	15142 <__sfvwrite_r+0x26a>
   15116:	6961      	ldr	r1, [r4, #20]
   15118:	42a9      	cmp	r1, r5
   1511a:	d812      	bhi.n	15142 <__sfvwrite_r+0x26a>
   1511c:	4b2e      	ldr	r3, [pc, #184]	; (151d8 <__sfvwrite_r+0x300>)
   1511e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   15120:	429d      	cmp	r5, r3
   15122:	bf94      	ite	ls
   15124:	462b      	movls	r3, r5
   15126:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
   1512a:	464a      	mov	r2, r9
   1512c:	fb93 f3f1 	sdiv	r3, r3, r1
   15130:	4650      	mov	r0, sl
   15132:	fb01 f303 	mul.w	r3, r1, r3
   15136:	6a21      	ldr	r1, [r4, #32]
   15138:	47b8      	blx	r7
   1513a:	1e07      	subs	r7, r0, #0
   1513c:	ddc8      	ble.n	150d0 <__sfvwrite_r+0x1f8>
   1513e:	1bed      	subs	r5, r5, r7
   15140:	e76d      	b.n	1501e <__sfvwrite_r+0x146>
   15142:	42af      	cmp	r7, r5
   15144:	bf28      	it	cs
   15146:	462f      	movcs	r7, r5
   15148:	463a      	mov	r2, r7
   1514a:	4649      	mov	r1, r9
   1514c:	f000 f8c0 	bl	152d0 <memmove>
   15150:	68a3      	ldr	r3, [r4, #8]
   15152:	6822      	ldr	r2, [r4, #0]
   15154:	1bdb      	subs	r3, r3, r7
   15156:	443a      	add	r2, r7
   15158:	60a3      	str	r3, [r4, #8]
   1515a:	6022      	str	r2, [r4, #0]
   1515c:	2b00      	cmp	r3, #0
   1515e:	d1ee      	bne.n	1513e <__sfvwrite_r+0x266>
   15160:	4621      	mov	r1, r4
   15162:	4650      	mov	r0, sl
   15164:	f7fe fdf0 	bl	13d48 <_fflush_r>
   15168:	2800      	cmp	r0, #0
   1516a:	d0e8      	beq.n	1513e <__sfvwrite_r+0x266>
   1516c:	e7b0      	b.n	150d0 <__sfvwrite_r+0x1f8>
   1516e:	462f      	mov	r7, r5
   15170:	46ab      	mov	fp, r5
   15172:	e748      	b.n	15006 <__sfvwrite_r+0x12e>
   15174:	4621      	mov	r1, r4
   15176:	4650      	mov	r0, sl
   15178:	f7fe fde6 	bl	13d48 <_fflush_r>
   1517c:	2800      	cmp	r0, #0
   1517e:	d08e      	beq.n	1509e <__sfvwrite_r+0x1c6>
   15180:	e7a6      	b.n	150d0 <__sfvwrite_r+0x1f8>
   15182:	461a      	mov	r2, r3
   15184:	4631      	mov	r1, r6
   15186:	9301      	str	r3, [sp, #4]
   15188:	f000 f8a2 	bl	152d0 <memmove>
   1518c:	9b01      	ldr	r3, [sp, #4]
   1518e:	68a1      	ldr	r1, [r4, #8]
   15190:	6822      	ldr	r2, [r4, #0]
   15192:	1ac9      	subs	r1, r1, r3
   15194:	441a      	add	r2, r3
   15196:	60a1      	str	r1, [r4, #8]
   15198:	6022      	str	r2, [r4, #0]
   1519a:	461d      	mov	r5, r3
   1519c:	e77b      	b.n	15096 <__sfvwrite_r+0x1be>
   1519e:	4650      	mov	r0, sl
   151a0:	f000 f8fe 	bl	153a0 <_realloc_r>
   151a4:	4603      	mov	r3, r0
   151a6:	2800      	cmp	r0, #0
   151a8:	f47f af23 	bne.w	14ff2 <__sfvwrite_r+0x11a>
   151ac:	6921      	ldr	r1, [r4, #16]
   151ae:	4650      	mov	r0, sl
   151b0:	f7fd fe78 	bl	12ea4 <_free_r>
   151b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   151b8:	220c      	movs	r2, #12
   151ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   151be:	f8ca 2000 	str.w	r2, [sl]
   151c2:	e787      	b.n	150d4 <__sfvwrite_r+0x1fc>
   151c4:	230c      	movs	r3, #12
   151c6:	f8ca 3000 	str.w	r3, [sl]
   151ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   151ce:	e781      	b.n	150d4 <__sfvwrite_r+0x1fc>
   151d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   151d4:	e76c      	b.n	150b0 <__sfvwrite_r+0x1d8>
   151d6:	bf00      	nop
   151d8:	7ffffffe 	.word	0x7ffffffe
   151dc:	7ffffc00 	.word	0x7ffffc00

000151e0 <_isatty_r>:
   151e0:	b538      	push	{r3, r4, r5, lr}
   151e2:	4c07      	ldr	r4, [pc, #28]	; (15200 <_isatty_r+0x20>)
   151e4:	2300      	movs	r3, #0
   151e6:	4605      	mov	r5, r0
   151e8:	4608      	mov	r0, r1
   151ea:	6023      	str	r3, [r4, #0]
   151ec:	f7f6 fd22 	bl	bc34 <_isatty>
   151f0:	1c43      	adds	r3, r0, #1
   151f2:	d000      	beq.n	151f6 <_isatty_r+0x16>
   151f4:	bd38      	pop	{r3, r4, r5, pc}
   151f6:	6823      	ldr	r3, [r4, #0]
   151f8:	2b00      	cmp	r3, #0
   151fa:	d0fb      	beq.n	151f4 <_isatty_r+0x14>
   151fc:	602b      	str	r3, [r5, #0]
   151fe:	bd38      	pop	{r3, r4, r5, pc}
   15200:	20014e34 	.word	0x20014e34

00015204 <_lseek_r>:
   15204:	b570      	push	{r4, r5, r6, lr}
   15206:	460d      	mov	r5, r1
   15208:	4c08      	ldr	r4, [pc, #32]	; (1522c <_lseek_r+0x28>)
   1520a:	4611      	mov	r1, r2
   1520c:	4606      	mov	r6, r0
   1520e:	461a      	mov	r2, r3
   15210:	4628      	mov	r0, r5
   15212:	2300      	movs	r3, #0
   15214:	6023      	str	r3, [r4, #0]
   15216:	f7f6 fd0f 	bl	bc38 <_lseek>
   1521a:	1c43      	adds	r3, r0, #1
   1521c:	d000      	beq.n	15220 <_lseek_r+0x1c>
   1521e:	bd70      	pop	{r4, r5, r6, pc}
   15220:	6823      	ldr	r3, [r4, #0]
   15222:	2b00      	cmp	r3, #0
   15224:	d0fb      	beq.n	1521e <_lseek_r+0x1a>
   15226:	6033      	str	r3, [r6, #0]
   15228:	bd70      	pop	{r4, r5, r6, pc}
   1522a:	bf00      	nop
   1522c:	20014e34 	.word	0x20014e34

00015230 <memchr>:
   15230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   15234:	2a10      	cmp	r2, #16
   15236:	db2b      	blt.n	15290 <memchr+0x60>
   15238:	f010 0f07 	tst.w	r0, #7
   1523c:	d008      	beq.n	15250 <memchr+0x20>
   1523e:	f810 3b01 	ldrb.w	r3, [r0], #1
   15242:	3a01      	subs	r2, #1
   15244:	428b      	cmp	r3, r1
   15246:	d02d      	beq.n	152a4 <memchr+0x74>
   15248:	f010 0f07 	tst.w	r0, #7
   1524c:	b342      	cbz	r2, 152a0 <memchr+0x70>
   1524e:	d1f6      	bne.n	1523e <memchr+0xe>
   15250:	b4f0      	push	{r4, r5, r6, r7}
   15252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   15256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1525a:	f022 0407 	bic.w	r4, r2, #7
   1525e:	f07f 0700 	mvns.w	r7, #0
   15262:	2300      	movs	r3, #0
   15264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   15268:	3c08      	subs	r4, #8
   1526a:	ea85 0501 	eor.w	r5, r5, r1
   1526e:	ea86 0601 	eor.w	r6, r6, r1
   15272:	fa85 f547 	uadd8	r5, r5, r7
   15276:	faa3 f587 	sel	r5, r3, r7
   1527a:	fa86 f647 	uadd8	r6, r6, r7
   1527e:	faa5 f687 	sel	r6, r5, r7
   15282:	b98e      	cbnz	r6, 152a8 <memchr+0x78>
   15284:	d1ee      	bne.n	15264 <memchr+0x34>
   15286:	bcf0      	pop	{r4, r5, r6, r7}
   15288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1528c:	f002 0207 	and.w	r2, r2, #7
   15290:	b132      	cbz	r2, 152a0 <memchr+0x70>
   15292:	f810 3b01 	ldrb.w	r3, [r0], #1
   15296:	3a01      	subs	r2, #1
   15298:	ea83 0301 	eor.w	r3, r3, r1
   1529c:	b113      	cbz	r3, 152a4 <memchr+0x74>
   1529e:	d1f8      	bne.n	15292 <memchr+0x62>
   152a0:	2000      	movs	r0, #0
   152a2:	4770      	bx	lr
   152a4:	3801      	subs	r0, #1
   152a6:	4770      	bx	lr
   152a8:	2d00      	cmp	r5, #0
   152aa:	bf06      	itte	eq
   152ac:	4635      	moveq	r5, r6
   152ae:	3803      	subeq	r0, #3
   152b0:	3807      	subne	r0, #7
   152b2:	f015 0f01 	tst.w	r5, #1
   152b6:	d107      	bne.n	152c8 <memchr+0x98>
   152b8:	3001      	adds	r0, #1
   152ba:	f415 7f80 	tst.w	r5, #256	; 0x100
   152be:	bf02      	ittt	eq
   152c0:	3001      	addeq	r0, #1
   152c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   152c6:	3001      	addeq	r0, #1
   152c8:	bcf0      	pop	{r4, r5, r6, r7}
   152ca:	3801      	subs	r0, #1
   152cc:	4770      	bx	lr
   152ce:	bf00      	nop

000152d0 <memmove>:
   152d0:	4288      	cmp	r0, r1
   152d2:	b4f0      	push	{r4, r5, r6, r7}
   152d4:	d90d      	bls.n	152f2 <memmove+0x22>
   152d6:	188b      	adds	r3, r1, r2
   152d8:	4283      	cmp	r3, r0
   152da:	d90a      	bls.n	152f2 <memmove+0x22>
   152dc:	1884      	adds	r4, r0, r2
   152de:	b132      	cbz	r2, 152ee <memmove+0x1e>
   152e0:	4622      	mov	r2, r4
   152e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   152e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   152ea:	4299      	cmp	r1, r3
   152ec:	d1f9      	bne.n	152e2 <memmove+0x12>
   152ee:	bcf0      	pop	{r4, r5, r6, r7}
   152f0:	4770      	bx	lr
   152f2:	2a0f      	cmp	r2, #15
   152f4:	d80e      	bhi.n	15314 <memmove+0x44>
   152f6:	4603      	mov	r3, r0
   152f8:	1e54      	subs	r4, r2, #1
   152fa:	2a00      	cmp	r2, #0
   152fc:	d0f7      	beq.n	152ee <memmove+0x1e>
   152fe:	3401      	adds	r4, #1
   15300:	440c      	add	r4, r1
   15302:	3b01      	subs	r3, #1
   15304:	f811 2b01 	ldrb.w	r2, [r1], #1
   15308:	f803 2f01 	strb.w	r2, [r3, #1]!
   1530c:	42a1      	cmp	r1, r4
   1530e:	d1f9      	bne.n	15304 <memmove+0x34>
   15310:	bcf0      	pop	{r4, r5, r6, r7}
   15312:	4770      	bx	lr
   15314:	ea40 0301 	orr.w	r3, r0, r1
   15318:	079b      	lsls	r3, r3, #30
   1531a:	d13b      	bne.n	15394 <memmove+0xc4>
   1531c:	f1a2 0710 	sub.w	r7, r2, #16
   15320:	093f      	lsrs	r7, r7, #4
   15322:	f101 0620 	add.w	r6, r1, #32
   15326:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   1532a:	f101 0310 	add.w	r3, r1, #16
   1532e:	f100 0410 	add.w	r4, r0, #16
   15332:	f853 5c10 	ldr.w	r5, [r3, #-16]
   15336:	f844 5c10 	str.w	r5, [r4, #-16]
   1533a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
   1533e:	f844 5c0c 	str.w	r5, [r4, #-12]
   15342:	f853 5c08 	ldr.w	r5, [r3, #-8]
   15346:	f844 5c08 	str.w	r5, [r4, #-8]
   1534a:	f853 5c04 	ldr.w	r5, [r3, #-4]
   1534e:	f844 5c04 	str.w	r5, [r4, #-4]
   15352:	3310      	adds	r3, #16
   15354:	42b3      	cmp	r3, r6
   15356:	f104 0410 	add.w	r4, r4, #16
   1535a:	d1ea      	bne.n	15332 <memmove+0x62>
   1535c:	1c7b      	adds	r3, r7, #1
   1535e:	011b      	lsls	r3, r3, #4
   15360:	f012 0f0c 	tst.w	r2, #12
   15364:	4419      	add	r1, r3
   15366:	f002 050f 	and.w	r5, r2, #15
   1536a:	4403      	add	r3, r0
   1536c:	d015      	beq.n	1539a <memmove+0xca>
   1536e:	3d04      	subs	r5, #4
   15370:	08ad      	lsrs	r5, r5, #2
   15372:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
   15376:	1f1c      	subs	r4, r3, #4
   15378:	460e      	mov	r6, r1
   1537a:	f856 7b04 	ldr.w	r7, [r6], #4
   1537e:	f844 7f04 	str.w	r7, [r4, #4]!
   15382:	4564      	cmp	r4, ip
   15384:	d1f9      	bne.n	1537a <memmove+0xaa>
   15386:	3501      	adds	r5, #1
   15388:	00ad      	lsls	r5, r5, #2
   1538a:	442b      	add	r3, r5
   1538c:	4429      	add	r1, r5
   1538e:	f002 0203 	and.w	r2, r2, #3
   15392:	e7b1      	b.n	152f8 <memmove+0x28>
   15394:	1e54      	subs	r4, r2, #1
   15396:	4603      	mov	r3, r0
   15398:	e7b1      	b.n	152fe <memmove+0x2e>
   1539a:	462a      	mov	r2, r5
   1539c:	e7ac      	b.n	152f8 <memmove+0x28>
   1539e:	bf00      	nop

000153a0 <_realloc_r>:
   153a0:	b309      	cbz	r1, 153e6 <_realloc_r+0x46>
   153a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153a4:	4614      	mov	r4, r2
   153a6:	b1ca      	cbz	r2, 153dc <_realloc_r+0x3c>
   153a8:	4606      	mov	r6, r0
   153aa:	460d      	mov	r5, r1
   153ac:	f000 f834 	bl	15418 <_malloc_usable_size_r>
   153b0:	42a0      	cmp	r0, r4
   153b2:	d302      	bcc.n	153ba <_realloc_r+0x1a>
   153b4:	462f      	mov	r7, r5
   153b6:	4638      	mov	r0, r7
   153b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153ba:	4621      	mov	r1, r4
   153bc:	4630      	mov	r0, r6
   153be:	f7fd fdc7 	bl	12f50 <_malloc_r>
   153c2:	4607      	mov	r7, r0
   153c4:	2800      	cmp	r0, #0
   153c6:	d0f6      	beq.n	153b6 <_realloc_r+0x16>
   153c8:	4622      	mov	r2, r4
   153ca:	4629      	mov	r1, r5
   153cc:	f7fd fc80 	bl	12cd0 <memcpy>
   153d0:	4630      	mov	r0, r6
   153d2:	4629      	mov	r1, r5
   153d4:	f7fd fd66 	bl	12ea4 <_free_r>
   153d8:	4638      	mov	r0, r7
   153da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153dc:	4627      	mov	r7, r4
   153de:	f7fd fd61 	bl	12ea4 <_free_r>
   153e2:	4638      	mov	r0, r7
   153e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153e6:	4611      	mov	r1, r2
   153e8:	f7fd bdb2 	b.w	12f50 <_malloc_r>

000153ec <_read_r>:
   153ec:	b570      	push	{r4, r5, r6, lr}
   153ee:	460d      	mov	r5, r1
   153f0:	4c08      	ldr	r4, [pc, #32]	; (15414 <_read_r+0x28>)
   153f2:	4611      	mov	r1, r2
   153f4:	4606      	mov	r6, r0
   153f6:	461a      	mov	r2, r3
   153f8:	4628      	mov	r0, r5
   153fa:	2300      	movs	r3, #0
   153fc:	6023      	str	r3, [r4, #0]
   153fe:	f7f7 fe87 	bl	d110 <_read>
   15402:	1c43      	adds	r3, r0, #1
   15404:	d000      	beq.n	15408 <_read_r+0x1c>
   15406:	bd70      	pop	{r4, r5, r6, pc}
   15408:	6823      	ldr	r3, [r4, #0]
   1540a:	2b00      	cmp	r3, #0
   1540c:	d0fb      	beq.n	15406 <_read_r+0x1a>
   1540e:	6033      	str	r3, [r6, #0]
   15410:	bd70      	pop	{r4, r5, r6, pc}
   15412:	bf00      	nop
   15414:	20014e34 	.word	0x20014e34

00015418 <_malloc_usable_size_r>:
   15418:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1541c:	1f18      	subs	r0, r3, #4
   1541e:	2b00      	cmp	r3, #0
   15420:	bfbc      	itt	lt
   15422:	580b      	ldrlt	r3, [r1, r0]
   15424:	18c0      	addlt	r0, r0, r3
   15426:	4770      	bx	lr
   15428:	6d617246 	.word	0x6d617246
   1542c:	74532065 	.word	0x74532065
   15430:	20747261 	.word	0x20747261
   15434:	7366664f 	.word	0x7366664f
   15438:	7b007465 	.word	0x7b007465
   1543c:	70797422 	.word	0x70797422
   15440:	223a2265 	.word	0x223a2265
   15444:	4e524157 	.word	0x4e524157
   15448:	22474e49 	.word	0x22474e49
   1544c:	6422202c 	.word	0x6422202c
   15450:	22617461 	.word	0x22617461
   15454:	225b203a 	.word	0x225b203a
   15458:	5d227325 	.word	0x5d227325
   1545c:	000a0d7d 	.word	0x000a0d7d
   15460:	6e6e6f43 	.word	0x6e6e6f43
   15464:	00746365 	.word	0x00746365
   15468:	7974227b 	.word	0x7974227b
   1546c:	3a226570 	.word	0x3a226570
   15470:	41572220 	.word	0x41572220
   15474:	4e494e52 	.word	0x4e494e52
   15478:	202c2247 	.word	0x202c2247
   1547c:	74616422 	.word	0x74616422
   15480:	203a2261 	.word	0x203a2261
   15484:	6e55225b 	.word	0x6e55225b
   15488:	776f6e6b 	.word	0x776f6e6b
   1548c:	73654d20 	.word	0x73654d20
   15490:	65676173 	.word	0x65676173
   15494:	70795420 	.word	0x70795420
   15498:	7d5d2265 	.word	0x7d5d2265
   1549c:	227b000d 	.word	0x227b000d
   154a0:	65707974 	.word	0x65707974
   154a4:	22203a22 	.word	0x22203a22
   154a8:	4e524157 	.word	0x4e524157
   154ac:	22474e49 	.word	0x22474e49
   154b0:	6422202c 	.word	0x6422202c
   154b4:	22617461 	.word	0x22617461
   154b8:	225b203a 	.word	0x225b203a
   154bc:	61766e49 	.word	0x61766e49
   154c0:	2064696c 	.word	0x2064696c
   154c4:	63656843 	.word	0x63656843
   154c8:	6d75736b 	.word	0x6d75736b
   154cc:	0d7d5d22 	.word	0x0d7d5d22
   154d0:	6d695400 	.word	0x6d695400
   154d4:	74756f65 	.word	0x74756f65
   154d8:	73694420 	.word	0x73694420
   154dc:	6e6e6f63 	.word	0x6e6e6f63
   154e0:	20746365 	.word	0x20746365
   154e4:	65522026 	.word	0x65522026
   154e8:	20746573 	.word	0x20746573
   154ec:	65636552 	.word	0x65636552
   154f0:	72657669 	.word	0x72657669
   154f4:	6d695400 	.word	0x6d695400
   154f8:	74756f65 	.word	0x74756f65
   154fc:	52202620 	.word	0x52202620
   15500:	74657365 	.word	0x74657365
   15504:	63655220 	.word	0x63655220
   15508:	65766965 	.word	0x65766965
   1550c:	63250072 	.word	0x63250072
   15510:	63256325 	.word	0x63256325
   15514:	30256325 	.word	0x30256325
   15518:	30257832 	.word	0x30257832
   1551c:	30257832 	.word	0x30257832
   15520:	63257832 	.word	0x63257832
   15524:	000a3030 	.word	0x000a3030
   15528:	30256325 	.word	0x30256325
   1552c:	2e5f7833 	.word	0x2e5f7833
   15530:	2e2e2e2e 	.word	0x2e2e2e2e
   15534:	2e2e2e2e 	.word	0x2e2e2e2e
   15538:	2e2e2e2e 	.word	0x2e2e2e2e
   1553c:	2e2e2e2e 	.word	0x2e2e2e2e
   15540:	2e2e2e2e 	.word	0x2e2e2e2e
   15544:	2e2e2e2e 	.word	0x2e2e2e2e
   15548:	2e2e2e2e 	.word	0x2e2e2e2e
   1554c:	252e2e2e 	.word	0x252e2e2e
   15550:	63250063 	.word	0x63250063
   15554:	78333025 	.word	0x78333025
   15558:	2e2e2e5f 	.word	0x2e2e2e5f
   1555c:	2e2e2e2e 	.word	0x2e2e2e2e
   15560:	0063252e 	.word	0x0063252e
   15564:	30256325 	.word	0x30256325
   15568:	2e5f7833 	.word	0x2e5f7833
   1556c:	0063252e 	.word	0x0063252e
   15570:	30256325 	.word	0x30256325
   15574:	2e5f7833 	.word	0x2e5f7833
   15578:	2e2e2e2e 	.word	0x2e2e2e2e
   1557c:	0063252e 	.word	0x0063252e
   15580:	7974227b 	.word	0x7974227b
   15584:	3a226570 	.word	0x3a226570
   15588:	43574822 	.word	0x43574822
   1558c:	2c224746 	.word	0x2c224746
   15590:	61642220 	.word	0x61642220
   15594:	3a226174 	.word	0x3a226174
   15598:	64252220 	.word	0x64252220
   1559c:	0a0d7d22 	.word	0x0a0d7d22
   155a0:	204f4e00 	.word	0x204f4e00
   155a4:	52455355 	.word	0x52455355
   155a8:	574f5220 	.word	0x574f5220
   155ac:	45484320 	.word	0x45484320
   155b0:	00214b43 	.word	0x00214b43
   155b4:	55206f4e 	.word	0x55206f4e
   155b8:	2074696e 	.word	0x2074696e
   155bc:	74736554 	.word	0x74736554
   155c0:	206f4e00 	.word	0x206f4e00
   155c4:	64726148 	.word	0x64726148
   155c8:	65726177 	.word	0x65726177
   155cc:	73655420 	.word	0x73655420
   155d0:	65520074 	.word	0x65520074
   155d4:	6e696461 	.word	0x6e696461
   155d8:	73552067 	.word	0x73552067
   155dc:	52207265 	.word	0x52207265
   155e0:	7b00776f 	.word	0x7b00776f
   155e4:	70797422 	.word	0x70797422
   155e8:	223a2265 	.word	0x223a2265
   155ec:	22474f4c 	.word	0x22474f4c
   155f0:	6422202c 	.word	0x6422202c
   155f4:	22617461 	.word	0x22617461
   155f8:	225b203a 	.word	0x225b203a
   155fc:	5d227325 	.word	0x5d227325
   15600:	000a0d7d 	.word	0x000a0d7d
   15604:	69726556 	.word	0x69726556
   15608:	6e697966 	.word	0x6e697966
   1560c:	73552067 	.word	0x73552067
   15610:	52207265 	.word	0x52207265
   15614:	5500776f 	.word	0x5500776f
   15618:	74616470 	.word	0x74616470
   1561c:	20676e69 	.word	0x20676e69
   15620:	72657355 	.word	0x72657355
   15624:	776f5220 	.word	0x776f5220
   15628:	73795300 	.word	0x73795300
   1562c:	206d6574 	.word	0x206d6574
   15630:	65736552 	.word	0x65736552
   15634:	6e550074 	.word	0x6e550074
   15638:	6e616863 	.word	0x6e616863
   1563c:	20646567 	.word	0x20646567
   15640:	72657355 	.word	0x72657355
   15644:	776f5220 	.word	0x776f5220
   15648:	00          	.byte	0x00
   15649:	45          	.byte	0x45
   1564a:	5252      	.short	0x5252
   1564c:	6920524f 	.word	0x6920524f
   15650:	7865206e 	.word	0x7865206e
   15654:	6c5f7270 	.word	0x6c5f7270
   15658:	6c657665 	.word	0x6c657665
   1565c:	2928335f 	.word	0x2928335f
   15660:	78614d00 	.word	0x78614d00
   15664:	7366666f 	.word	0x7366666f
   15668:	203a7465 	.word	0x203a7465
   1566c:	20206425 	.word	0x20206425
   15670:	0d202323 	.word	0x0d202323
   15674:	6150000a 	.word	0x6150000a
   15678:	656d6172 	.word	0x656d6172
   1567c:	3a726574 	.word	0x3a726574
   15680:	73252220 	.word	0x73252220
   15684:	00202c22 	.word	0x00202c22
   15688:	75736552 	.word	0x75736552
   1568c:	203a746c 	.word	0x203a746c
   15690:	22642522 	.word	0x22642522
   15694:	000a0d20 	.word	0x000a0d20
   15698:	61726150 	.word	0x61726150
   1569c:	6574656d 	.word	0x6574656d
   156a0:	22203a72 	.word	0x22203a72
   156a4:	20227325 	.word	0x20227325
   156a8:	6100202c 	.word	0x6100202c
   156ac:	73007362 	.word	0x73007362
   156b0:	61007869 	.word	0x61007869
   156b4:	70006464 	.word	0x70006464
   156b8:	746e6972 	.word	0x746e6972
   156bc:	00666900 	.word	0x00666900
   156c0:	636e7546 	.word	0x636e7546
   156c4:	6e6f6974 	.word	0x6e6f6974
   156c8:	73252220 	.word	0x73252220
   156cc:	6f6e2022 	.word	0x6f6e2022
   156d0:	6f662074 	.word	0x6f662074
   156d4:	21646e75 	.word	0x21646e75
   156d8:	2528000a 	.word	0x2528000a
   156dc:	4e002964 	.word	0x4e002964
   156e0:	6f6d206f 	.word	0x6f6d206f
   156e4:	63206572 	.word	0x63206572
   156e8:	616d6d6f 	.word	0x616d6d6f
   156ec:	0d202173 	.word	0x0d202173
   156f0:	6d6f4300 	.word	0x6d6f4300
   156f4:	666f616d 	.word	0x666f616d
   156f8:	74657366 	.word	0x74657366
   156fc:	25203a20 	.word	0x25203a20
   15700:	25203a64 	.word	0x25203a64
   15704:	20202164 	.word	0x20202164
   15708:	32302500 	.word	0x32302500
   1570c:	75530078 	.word	0x75530078
   15710:	20747362 	.word	0x20747362
   15714:	73636e46 	.word	0x73636e46
   15718:	73655200 	.word	0x73655200
   1571c:	3a746c75 	.word	0x3a746c75
   15720:	0d642520 	.word	0x0d642520
   15724:	6552000a 	.word	0x6552000a
   15728:	746c7573 	.word	0x746c7573
   1572c:	72745320 	.word	0x72745320
   15730:	3a676e69 	.word	0x3a676e69
   15734:	73252220 	.word	0x73252220
   15738:	000a0d22 	.word	0x000a0d22
   1573c:	30353002 	.word	0x30353002
   15740:	30305a65 	.word	0x30305a65
   15744:	30633030 	.word	0x30633030
   15748:	02000330 	.word	0x02000330
   1574c:	65303530 	.word	0x65303530
   15750:	3030305a 	.word	0x3030305a
   15754:	345a3830 	.word	0x345a3830
   15758:	33300203 	.word	0x33300203
   1575c:	355a6530 	.word	0x355a6530
   15760:	30020003 	.word	0x30020003
   15764:	5a653035 	.word	0x5a653035
   15768:	30303030 	.word	0x30303030
   1576c:	03345a39 	.word	0x03345a39
   15770:	35300200 	.word	0x35300200
   15774:	305a6530 	.word	0x305a6530
   15778:	61303030 	.word	0x61303030
   1577c:	0203345a 	.word	0x0203345a
   15780:	65303330 	.word	0x65303330
   15784:	0003305a 	.word	0x0003305a
   15788:	30353002 	.word	0x30353002
   1578c:	30305a65 	.word	0x30305a65
   15790:	5a623030 	.word	0x5a623030
   15794:	30020334 	.word	0x30020334
   15798:	5a663033 	.word	0x5a663033
   1579c:	55000330 	.word	0x55000330
   157a0:	6f502049 	.word	0x6f502049
   157a4:	20726577 	.word	0x20726577
   157a8:	62616e45 	.word	0x62616e45
   157ac:	4900656c 	.word	0x4900656c
   157b0:	2074696e 	.word	0x2074696e
   157b4:	75646f4d 	.word	0x75646f4d
   157b8:	203a656c 	.word	0x203a656c
   157bc:	36314f50 	.word	0x36314f50
   157c0:	696e4900 	.word	0x696e4900
   157c4:	6f4d2074 	.word	0x6f4d2074
   157c8:	656c7564 	.word	0x656c7564
   157cc:	5542203a 	.word	0x5542203a
   157d0:	49003631 	.word	0x49003631
   157d4:	2074696e 	.word	0x2074696e
   157d8:	75646f4d 	.word	0x75646f4d
   157dc:	203a656c 	.word	0x203a656c
   157e0:	34464250 	.word	0x34464250
   157e4:	696e4900 	.word	0x696e4900
   157e8:	6f4d2074 	.word	0x6f4d2074
   157ec:	656c7564 	.word	0x656c7564
   157f0:	4e45203a 	.word	0x4e45203a
   157f4:	49003631 	.word	0x49003631
   157f8:	2074696e 	.word	0x2074696e
   157fc:	75646f4d 	.word	0x75646f4d
   15800:	203a656c 	.word	0x203a656c
   15804:	6e6b6e55 	.word	0x6e6b6e55
   15808:	206e776f 	.word	0x206e776f
   1580c:	75646f4d 	.word	0x75646f4d
   15810:	4800656c 	.word	0x4800656c
   15814:	47464357 	.word	0x47464357
   15818:	73694d20 	.word	0x73694d20
   1581c:	6374616d 	.word	0x6374616d
   15820:	0068      	.short	0x0068
   15822:	0d0c      	.short	0x0d0c
   15824:	09080f0e 	.word	0x09080f0e
   15828:	05040b0a 	.word	0x05040b0a
   1582c:	01000706 	.word	0x01000706
   15830:	0302      	.short	0x0302
   15832:	0d0c      	.short	0x0d0c
   15834:	09080f0e 	.word	0x09080f0e
   15838:	05040b0a 	.word	0x05040b0a
   1583c:	01000706 	.word	0x01000706
   15840:	0302      	.short	0x0302
   15842:	0d0c      	.short	0x0d0c
   15844:	09080f0e 	.word	0x09080f0e
   15848:	05040b0a 	.word	0x05040b0a
   1584c:	01000706 	.word	0x01000706
   15850:	0302      	.short	0x0302
   15852:	0d0c      	.short	0x0d0c
   15854:	09080f0e 	.word	0x09080f0e
   15858:	05040b0a 	.word	0x05040b0a
   1585c:	01000706 	.word	0x01000706
   15860:	0302      	.short	0x0302
   15862:	6325      	.short	0x6325
   15864:	2e2e6325 	.word	0x2e2e6325
   15868:	2e2e2e2e 	.word	0x2e2e2e2e
   1586c:	2e2e2e2e 	.word	0x2e2e2e2e
   15870:	63252e2e 	.word	0x63252e2e
   15874:	00          	.byte	0x00
   15875:	25          	.byte	0x25
   15876:	2563      	.short	0x2563
   15878:	65783330 	.word	0x65783330
   1587c:	6325      	.short	0x6325
   1587e:	00          	.byte	0x00
   1587f:	25          	.byte	0x25
   15880:	33302563 	.word	0x33302563
   15884:	2e2e5f78 	.word	0x2e2e5f78
   15888:	63252e2e 	.word	0x63252e2e
   1588c:	25632500 	.word	0x25632500
   15890:	65783330 	.word	0x65783330
   15894:	00202300 	.word	0x00202300
   15898:	25002320 	.word	0x25002320
   1589c:	00783830 	.word	0x00783830
   158a0:	64697267 	.word	0x64697267
   158a4:	7379735f 	.word	0x7379735f
   158a8:	68633a3a 	.word	0x68633a3a
   158ac:	736b6365 	.word	0x736b6365
   158b0:	43006d75 	.word	0x43006d75
   158b4:	6b636568 	.word	0x6b636568
   158b8:	206d7573 	.word	0x206d7573
   158bc:	64616552 	.word	0x64616552
   158c0:	6c61432f 	.word	0x6c61432f
   158c4:	616c7563 	.word	0x616c7563
   158c8:	70006574 	.word	0x70006574
   158cc:	656b6361 	.word	0x656b6361
   158d0:	64257b74 	.word	0x64257b74
   158d4:	6425202c 	.word	0x6425202c
   158d8:	6425202c 	.word	0x6425202c
   158dc:	6425202c 	.word	0x6425202c
   158e0:	6425202c 	.word	0x6425202c
   158e4:	6425202c 	.word	0x6425202c
   158e8:	6425202c 	.word	0x6425202c
   158ec:	6425202c 	.word	0x6425202c
   158f0:	6552207d 	.word	0x6552207d
   158f4:	203a6461 	.word	0x203a6461
   158f8:	202c6425 	.word	0x202c6425
   158fc:	636c6143 	.word	0x636c6143
   15900:	74616c75 	.word	0x74616c75
   15904:	25203a65 	.word	0x25203a65
   15908:	68430064 	.word	0x68430064
   1590c:	736b6365 	.word	0x736b6365
   15910:	57206d75 	.word	0x57206d75
   15914:	65746972 	.word	0x65746972
   15918:	6c61432f 	.word	0x6c61432f
   1591c:	616c7563 	.word	0x616c7563
   15920:	43006574 	.word	0x43006574
   15924:	6b636568 	.word	0x6b636568
   15928:	206d7573 	.word	0x206d7573
   1592c:	7265764f 	.word	0x7265764f
   15930:	74697277 	.word	0x74697277
   15934:	61500065 	.word	0x61500065
   15938:	61706172 	.word	0x61706172
   1593c:	6b697270 	.word	0x6b697270
   15940:	7361      	.short	0x7361
   15942:	00          	.byte	0x00
   15943:	25          	.byte	0x25
   15944:	33302563 	.word	0x33302563
   15948:	2e2e5f78 	.word	0x2e2e5f78
   1594c:	2e2e2e2e 	.word	0x2e2e2e2e
   15950:	6e656c00 	.word	0x6e656c00
   15954:	20642520 	.word	0x20642520
   15958:	72707865 	.word	0x72707865
   1595c:	736f0020 	.word	0x736f0020
   15960:	206e656c 	.word	0x206e656c
   15964:	0a0d6425 	.word	0x0a0d6425
   15968:	74757000 	.word	0x74757000
   1596c:	25203a63 	.word	0x25203a63
   15970:	000a0d63 	.word	0x000a0d63
   15974:	61766520 	.word	0x61766520
   15978:	7461756c 	.word	0x7461756c
   1597c:	25206465 	.word	0x25206465
   15980:	000a0d73 	.word	0x000a0d73
   15984:	31343002 	.word	0x31343002
   15988:	30304265 	.word	0x30304265
   1598c:	5a315a31 	.word	0x5a315a31
   15990:	03335a32 	.word	0x03335a32
   15994:	30300200 	.word	0x30300200
   15998:	30306530 	.word	0x30306530
   1599c:	30423039 	.word	0x30423039
   159a0:	02033242 	.word	0x02033242
   159a4:	65303430 	.word	0x65303430
   159a8:	31303042 	.word	0x31303042
   159ac:	00033242 	.word	0x00033242
   159b0:	30303002 	.word	0x30303002
   159b4:	38303065 	.word	0x38303065
   159b8:	42304230 	.word	0x42304230
   159bc:	30020332 	.word	0x30020332
   159c0:	42653034 	.word	0x42653034
   159c4:	42313030 	.word	0x42313030
   159c8:	02000332 	.word	0x02000332
   159cc:	65303030 	.word	0x65303030
   159d0:	30623030 	.word	0x30623030
   159d4:	32503050 	.word	0x32503050
   159d8:	34300203 	.word	0x34300203
   159dc:	30506530 	.word	0x30506530
   159e0:	32503130 	.word	0x32503130
   159e4:	30020003 	.word	0x30020003
   159e8:	45653134 	.word	0x45653134
   159ec:	5a313030 	.word	0x5a313030
   159f0:	5a325a31 	.word	0x5a325a31
   159f4:	30020333 	.word	0x30020333
   159f8:	42653134 	.word	0x42653134
   159fc:	5a323030 	.word	0x5a323030
   15a00:	5a325a31 	.word	0x5a325a31
   15a04:	02000333 	.word	0x02000333
   15a08:	65303030 	.word	0x65303030
   15a0c:	30623030 	.word	0x30623030
   15a10:	32453045 	.word	0x32453045
   15a14:	34300203 	.word	0x34300203
   15a18:	30456530 	.word	0x30456530
   15a1c:	32453130 	.word	0x32453130
   15a20:	30020003 	.word	0x30020003
   15a24:	30653030 	.word	0x30653030
   15a28:	45306230 	.word	0x45306230
   15a2c:	7b354530 	.word	0x7b354530
   15a30:	6e697270 	.word	0x6e697270
   15a34:	2b322874 	.word	0x2b322874
   15a38:	29322c32 	.word	0x29322c32
   15a3c:	72707b7d 	.word	0x72707b7d
   15a40:	28746e69 	.word	0x28746e69
   15a44:	2a322a32 	.word	0x2a322a32
   15a48:	29322c32 	.word	0x29322c32
   15a4c:	0200037d 	.word	0x0200037d
   15a50:	65303030 	.word	0x65303030
   15a54:	30393030 	.word	0x30393030
   15a58:	32423042 	.word	0x32423042
   15a5c:	34300203 	.word	0x34300203
   15a60:	30426530 	.word	0x30426530
   15a64:	32423230 	.word	0x32423230
   15a68:	30020003 	.word	0x30020003
   15a6c:	30653030 	.word	0x30653030
   15a70:	42303830 	.word	0x42303830
   15a74:	03324230 	.word	0x03324230
   15a78:	30343002 	.word	0x30343002
   15a7c:	30304265 	.word	0x30304265
   15a80:	03324232 	.word	0x03324232
   15a84:	67655200 	.word	0x67655200
   15a88:	65747369 	.word	0x65747369
   15a8c:	63412072 	.word	0x63412072
   15a90:	6e6f6974 	.word	0x6e6f6974
   15a94:	65764500 	.word	0x65764500
   15a98:	4e20746e 	.word	0x4e20746e
   15a9c:	4620746f 	.word	0x4620746f
   15aa0:	646e756f 	.word	0x646e756f
   15aa4:	73452000 	.word	0x73452000
   15aa8:	65706163 	.word	0x65706163
   15aac:	68432064 	.word	0x68432064
   15ab0:	46207261 	.word	0x46207261
   15ab4:	646e756f 	.word	0x646e756f
   15ab8:	30020020 	.word	0x30020020
   15abc:	5a653035 	.word	0x5a653035
   15ac0:	30304230 	.word	0x30304230
   15ac4:	03303030 	.word	0x03303030
   15ac8:	35300200 	.word	0x35300200
   15acc:	305a6530 	.word	0x305a6530
   15ad0:	34303042 	.word	0x34303042
   15ad4:	00033242 	.word	0x00033242
   15ad8:	30353002 	.word	0x30353002
   15adc:	42305a65 	.word	0x42305a65
   15ae0:	42353030 	.word	0x42353030
   15ae4:	02000332 	.word	0x02000332
   15ae8:	65303530 	.word	0x65303530
   15aec:	3050305a 	.word	0x3050305a
   15af0:	30303030 	.word	0x30303030
   15af4:	30020003 	.word	0x30020003
   15af8:	5a653035 	.word	0x5a653035
   15afc:	30305030 	.word	0x30305030
   15b00:	03325031 	.word	0x03325031
   15b04:	35300200 	.word	0x35300200
   15b08:	305a6530 	.word	0x305a6530
   15b0c:	30303045 	.word	0x30303045
   15b10:	00033030 	.word	0x00033030
   15b14:	30353002 	.word	0x30353002
   15b18:	45305a65 	.word	0x45305a65
   15b1c:	45313030 	.word	0x45313030
   15b20:	02000335 	.word	0x02000335
   15b24:	65303530 	.word	0x65303530
   15b28:	3045305a 	.word	0x3045305a
   15b2c:	35456430 	.word	0x35456430
   15b30:	00000003 	.word	0x00000003
   15b34:	200010ec 	.word	0x200010ec
   15b38:	200116d8 	.word	0x200116d8
   15b3c:	2000b73c 	.word	0x2000b73c
   15b40:	20008270 	.word	0x20008270
   15b44:	682f2e2e 	.word	0x682f2e2e
   15b48:	732f6c61 	.word	0x732f6c61
   15b4c:	682f6372 	.word	0x682f6372
   15b50:	695f6c61 	.word	0x695f6c61
   15b54:	00632e6f 	.word	0x00632e6f
   15b58:	682f2e2e 	.word	0x682f2e2e
   15b5c:	732f6c61 	.word	0x732f6c61
   15b60:	682f6372 	.word	0x682f6372
   15b64:	695f6c61 	.word	0x695f6c61
   15b68:	6d5f6332 	.word	0x6d5f6332
   15b6c:	7973615f 	.word	0x7973615f
   15b70:	632e636e 	.word	0x632e636e
   15b74:	00          	.byte	0x00
   15b75:	2e          	.byte	0x2e
   15b76:	2f2e      	.short	0x2f2e
   15b78:	2f6c7068 	.word	0x2f6c7068
   15b7c:	2f746477 	.word	0x2f746477
   15b80:	5f6c7068 	.word	0x5f6c7068
   15b84:	2e746477 	.word	0x2e746477
   15b88:	0063      	.short	0x0063
   15b8a:	2e2e      	.short	0x2e2e
   15b8c:	6c61682f 	.word	0x6c61682f
   15b90:	6372732f 	.word	0x6372732f
   15b94:	6c61682f 	.word	0x6c61682f
   15b98:	6970735f 	.word	0x6970735f
   15b9c:	645f6d5f 	.word	0x645f6d5f
   15ba0:	632e616d 	.word	0x632e616d
   15ba4:	00000000 	.word	0x00000000

00015ba8 <user_mux_confs>:
	...
   15bd4:	04030201 04030201 00000000 00000000     ................
	...

00015bec <channel_confs>:
   15bec:	05230522 05250524 00000000 00000000     ".#.$.%.........
	...

00015c2c <interrupt_cfg>:
   15c2c:	00000002 00000002 00000002 00000002     ................
	...
   15cac:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
   15cbc:	69707371 2e00632e 70682f2e 766e2f6c     qspi.c.../hpl/nv
   15ccc:	7274636d 70682f6c 766e5f6c 7274636d     mctrl/hpl_nvmctr
   15cdc:	00632e6c 682f2e2e 732f6c61 682f6372     l.c.../hal/src/h
   15cec:	745f6c61 72656d69 0000632e              al_timer.c..

00015cf8 <_usb_ep_cfgs>:
   15cf8:	20000c18 00000000 00000040 00000000     ... ....@.......
	...
   15d10:	20000c10 00000000 00000008 20000bd0     ... ........... 
   15d20:	20000bc8 00080040 00000000 00000000     ... @...........
	...
   15d38:	20000b88 00400000                       ... ..@.

00015d40 <mouse_report_desc>:
   15d40:	02090105 010901a1 090500a1 03290119     ..............).
   15d50:	01250015 03950175 05750281 01810195     ..%.u.....u.....
   15d60:	30090105 38093109 7f258115 03950875     ...0.1.8..%.u...
   15d70:	c0c00681                                ....

00015d74 <_cfgs>:
   15d74:	00200600 08068000 00200400 08068000     .. ....... .....
   15d84:	00201000 08068000 00200c00 08068000     .. ....... .....
	...
   15da4:	00200b00 14000003 00200a00 08000002     .. ....... .....
   15db4:	00201300 14000003 00000000 00000000     .. .............
	...
   15e64:	00005400 1c000000 00005300 0c000000     .T.......S......
   15e74:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
   15e84:	615f6364 636e7973 2e00632e 61682f2e     dc_async.c.../ha
   15e94:	72732f6c 61682f63 61725f6c 735f646e     l/src/hal_rand_s
   15ea4:	2e636e79 2e2e0063 6c70682f 6e72742f     ync.c.../hpl/trn
   15eb4:	70682f67 72745f6c 632e676e               g/hpl_trng.c.

00015ec1 <keyboard_report_desc>:
   15ec1:	06090105 070501a1 e729e019 01250015     ..........)...%.
   15ed1:	08950175 01810281 65290019 65250015     u.........)e..%e
   15ee1:	06950875 08050081 05290119 01250015     u.........)...%.
   15ef1:	05950175 03950291 2ec00191 61682f2e     u............/ha
   15f01:	72732f6c 61682f63 73755f6c 5f747261     l/src/hal_usart_
   15f11:	636e7973 2e00632e 61682f2e 72732f6c     sync.c.../hal/sr
   15f21:	61682f63 6c665f6c 2e687361 2e2e0063     c/hal_flash.c...
   15f31:	6c61682f 6372732f 6c61682f 6970735f     /hal/src/hal_spi
   15f41:	615f6d5f 636e7973 2e00632e 61682f2e     _m_async.c.../ha
   15f51:	72732f6c 61682f63 72635f6c 79735f63     l/src/hal_crc_sy
   15f61:	632e636e                                 nc.c.

00015f66 <CSWTCH.37>:
   15f66:	010101ed                                 .......

00015f6d <CSWTCH.40>:
   15f6d:	010100ed 53f00201 74726174 696e4920     .......Start Ini
   15f7d:	6c616974 64657a69 31354400 696e4920     tialized.D51 Ini
   15f8d:	6f430074 736f706d 20657469 69766544     t.Composite Devi
   15f9d:	49206563 6974696e 7a696c61 47006465     ce Initialized.G
   15fad:	20646972 75646f4d 4920656c 6974696e     rid Module Initi
   15fbd:	7a696c61 45006465 7265746e 20676e69     alized.Entering 
   15fcd:	6e69614d 6f6f4c20 6f430070 736f706d     Main Loop.Compos
   15fdd:	20657469 69766544 43206563 656e6e6f     ite Device Conne
   15fed:	64657463 44494d00 25203a49 20783230     cted.MIDI: %02x 
   15ffd:	78323025 32302520 30252078 000a7832     %02x %02x %02x..
   1600d:	6e697270 2a322874 28646461 2b342b33     print(2*add(3+4+
   1601d:	2c362b35 2c293031 2e002934 61682f2e     5+6,10),4).../ha
   1602d:	74752f6c 2f736c69 2f637273 6c697475     l/utils/src/util
   1603d:	696c5f73 632e7473 2f2e2e00 2f6c7068     s_list.c.../hpl/
   1604d:	2f637472 5f6c7068 2e637472 2e2e0063     rtc/hpl_rtc.c...
   1605d:	6c61682f 636e692f 6564756c 6c61682f     /hal/include/hal
   1606d:	7464775f 2e00682e 61682f2e 72732f6c     _wdt.h.../hal/sr
   1607d:	61682f63 73755f6c 5f747261 6e797361     c/hal_usart_asyn
   1608d:	00632e63 682f2e2e 732f6c70 6f637265     c.c.../hpl/serco
   1609d:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..
   160ad:	00400030 00400034 00410120 00410140     0.@.4.@. .A.@.A.
   160bd:	00430000 00430004 00430008               ..C...C...C...C

000160cc <sercomspi_regs>:
   160cc:	3020000c 00020000 00000000 01ff0005     .. 0............
   160dc:	20000c03 00000000 00000000 ff000600     ... ............
   160ec:	00000701                                ....

000160f0 <_i2cms>:
   160f0:	00000005 00200014 00000100 0000e6e5     ...... .........
   16100:	00d70000 02dc6c00                       .....l..

00016108 <_usarts>:
   16108:	00000000 40100004 00030000 00700002     .......@......p.
   16118:	0000aaaa 00000000 00000001 40100004     ...............@
   16128:	00030000 00700002 0000aaaa 00000000     ......p.........
   16138:	00000002 40100004 00030000 00700002     .......@......p.
   16148:	00005555 00000000 00000004 40100004     UU.............@
   16158:	00030000 00700002 0000aaaa 00000000     ......p.........
   16168:	00000006 40100004 00030000 00700002     .......@......p.
   16178:	0000aaaa 00000000 682f2e2e 752f6c61     ........../hal/u
   16188:	736c6974 6372732f 6974752f 725f736c     tils/src/utils_r
   16198:	62676e69 65666675 00632e72 682f2e2e     ingbuffer.c.../h
   161a8:	732f6c61 682f6372 715f6c61 5f697073     al/src/hal_qspi_
   161b8:	2e616d64 2e2e0063 6c70682f 6364612f     dma.c.../hpl/adc
   161c8:	6c70682f 6364615f 0000632e              /hpl_adc.c..

000161d4 <_adcs>:
   161d4:	01000000 0003000c 00041807 00000000     ................
   161e4:	0014080b 00010000 000c0100 18040003     ................
   161f4:	00000004 080b0000 00000014 752f2e2e     ............../u
   16204:	642f6273 63697665 73752f65 2e636462     sb/device/usbdc.
   16214:	2e2e0063 6c70682f 2f63742f 5f6c7068     c.../hpl/tc/hpl_
   16224:	632e6374 00000000 40003800 40003c00     tc.c.....8.@.<.@
   16234:	4101a000 4101c000 42001400 42001800     ...A...A...B...B
   16244:	43001400 43001800                       ...C...C

0001624c <_tcs>:
   1624c:	006b0000 00000308 00000021 00003a98     ..k.....!....:..
   1625c:	00000000 006c0001 00000308 00000021     ......l.....!...
   1626c:	00003a98 00000000 006d0002 00000308     .:........m.....
   1627c:	00000021 00003a98 00000000 006e0003     !....:........n.
   1628c:	00000308 00000021 00003a98 00000000     ....!....:......

0001629c <_global_impure_ptr>:
   1629c:	2000054c                                L.. 

000162a0 <__sf_fake_stderr>:
	...

000162c0 <__sf_fake_stdout>:
	...

000162e0 <__sf_fake_stdin>:
	...
   16300:	2b302d23 00000020 004c6c68 45676665     #-0+ ...hlL.efgE
   16310:	00004746 33323130 37363534 42413938     FG..0123456789AB
   16320:	46454443 00000000 33323130 37363534     CDEF....01234567
   16330:	62613938 66656463 00000000              89abcdef....

0001633c <_init>:
   1633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1633e:	bf00      	nop
   16340:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16342:	bc08      	pop	{r3}
   16344:	469e      	mov	lr, r3
   16346:	4770      	bx	lr

00016348 <__frame_dummy_init_array_entry>:
   16348:	42cd 0000                                   .B..

0001634c <_fini>:
   1634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1634e:	bf00      	nop
   16350:	bcf8      	pop	{r3, r4, r5, r6, r7}
   16352:	bc08      	pop	{r3}
   16354:	469e      	mov	lr, r3
   16356:	4770      	bx	lr

00016358 <__do_global_dtors_aux_fini_array_entry>:
   16358:	42a5 0000                                   .B..
