
USB_E54_Dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c50  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020068  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020068  2**0
                  CONTENTS
  4 .bss          000005e0  20000068  00002cb8  00020068  2**2
                  ALLOC
  5 .stack        00010000  20000648  00003298  00020068  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
  8 .debug_info   000195ec  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002fee  00000000  00000000  000396db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008d41  00000000  00000000  0003c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000640  00000000  00000000  0004540a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c8  00000000  00000000  00045a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032fb9  00000000  00000000  00046412  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010a6a  00000000  00000000  000793cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001197ec  00000000  00000000  00089e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000fa0  00000000  00000000  001a3624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 06 01 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     H.. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	49 0c 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     I...............
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 e5 02 00 00 e5 02 00 00 f9 1e 00 00     ................
     184:	05 1f 00 00 11 1f 00 00 1d 1f 00 00 e5 02 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000068 	.word	0x20000068
     280:	00000000 	.word	0x00000000
     284:	00002c50 	.word	0x00002c50

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002c50 	.word	0x00002c50
     2c4:	2000006c 	.word	0x2000006c
     2c8:	00002c50 	.word	0x00002c50
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	usb_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000449 	.word	0x00000449
     2e0:	00002b59 	.word	0x00002b59

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00002c50 	.word	0x00002c50
     364:	20000068 	.word	0x20000068
     368:	20000648 	.word	0x20000648
     36c:	20000068 	.word	0x20000068
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00002b65 	.word	0x00002b65
     37c:	00002a81 	.word	0x00002a81

00000380 <USB_DEVICE_INSTANCE_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     380:	4b1e      	ldr	r3, [pc, #120]	; (3fc <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     382:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     386:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     388:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     38c:	6299      	str	r1, [r3, #40]	; 0x28
     38e:	481c      	ldr	r0, [pc, #112]	; (400 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     390:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     392:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     394:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     398:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     39c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     3a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3a8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3b0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3b8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     3c4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c6:	6299      	str	r1, [r3, #40]	; 0x28
     3c8:	490e      	ldr	r1, [pc, #56]	; (404 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     3ca:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3cc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3ce:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     3d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3da:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     3de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ea:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3f2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     3fa:	4770      	bx	lr
     3fc:	41008000 	.word	0x41008000
     400:	c0000100 	.word	0xc0000100
     404:	c0000200 	.word	0xc0000200

00000408 <USB_DEVICE_INSTANCE_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     408:	2241      	movs	r2, #65	; 0x41
     40a:	4b07      	ldr	r3, [pc, #28]	; (428 <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     40c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     410:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     414:	691a      	ldr	r2, [r3, #16]
     416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     41a:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     41c:	699a      	ldr	r2, [r3, #24]
     41e:	f042 0201 	orr.w	r2, r2, #1
     422:	619a      	str	r2, [r3, #24]
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	40001c00 	.word	0x40001c00

0000042c <USB_DEVICE_INSTANCE_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_DEVICE_INSTANCE_init(void)
{
     42c:	b508      	push	{r3, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     42e:	4b03      	ldr	r3, [pc, #12]	; (43c <USB_DEVICE_INSTANCE_init+0x10>)
     430:	4798      	blx	r3
	usb_d_init();
     432:	4b03      	ldr	r3, [pc, #12]	; (440 <USB_DEVICE_INSTANCE_init+0x14>)
     434:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     436:	4b03      	ldr	r3, [pc, #12]	; (444 <USB_DEVICE_INSTANCE_init+0x18>)
     438:	4798      	blx	r3
     43a:	bd08      	pop	{r3, pc}
     43c:	00000409 	.word	0x00000409
     440:	000006cd 	.word	0x000006cd
     444:	00000381 	.word	0x00000381

00000448 <system_init>:
}

void system_init(void)
{
     448:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     44a:	4b02      	ldr	r3, [pc, #8]	; (454 <system_init+0xc>)
     44c:	4798      	blx	r3
	init_mcu();

	USB_DEVICE_INSTANCE_init();
     44e:	4b02      	ldr	r3, [pc, #8]	; (458 <system_init+0x10>)
     450:	4798      	blx	r3
     452:	bd08      	pop	{r3, pc}
     454:	00000a81 	.word	0x00000a81
     458:	0000042d 	.word	0x0000042d

0000045c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     45c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     460:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     462:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     464:	f3bf 8f5f 	dmb	sy
     468:	4770      	bx	lr

0000046a <atomic_leave_critical>:
     46a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     46e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     470:	f383 8810 	msr	PRIMASK, r3
     474:	4770      	bx	lr
	...

00000478 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     478:	4b0f      	ldr	r3, [pc, #60]	; (4b8 <_usb_d_find_ep+0x40>)
     47a:	7859      	ldrb	r1, [r3, #1]
     47c:	4288      	cmp	r0, r1
     47e:	d018      	beq.n	4b2 <_usb_d_find_ep+0x3a>
{
     480:	b430      	push	{r4, r5}
     482:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     484:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     486:	f000 050f 	and.w	r5, r0, #15
     48a:	e007      	b.n	49c <_usb_d_find_ep+0x24>
     48c:	3301      	adds	r3, #1
     48e:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     490:	2b0d      	cmp	r3, #13
     492:	d009      	beq.n	4a8 <_usb_d_find_ep+0x30>
     494:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     496:	7851      	ldrb	r1, [r2, #1]
     498:	4281      	cmp	r1, r0
     49a:	d007      	beq.n	4ac <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     49c:	7814      	ldrb	r4, [r2, #0]
     49e:	2c00      	cmp	r4, #0
     4a0:	d1f4      	bne.n	48c <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     4a2:	428d      	cmp	r5, r1
     4a4:	d1f2      	bne.n	48c <_usb_d_find_ep+0x14>
     4a6:	e001      	b.n	4ac <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     4a8:	f04f 33ff 	mov.w	r3, #4294967295
}
     4ac:	4618      	mov	r0, r3
     4ae:	bc30      	pop	{r4, r5}
     4b0:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     4b2:	2300      	movs	r3, #0
}
     4b4:	4618      	mov	r0, r3
     4b6:	4770      	bx	lr
     4b8:	20000084 	.word	0x20000084

000004bc <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     4bc:	2000      	movs	r0, #0
     4be:	4770      	bx	lr

000004c0 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     4c0:	b538      	push	{r3, r4, r5, lr}
     4c2:	4604      	mov	r4, r0
     4c4:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     4c6:	4b09      	ldr	r3, [pc, #36]	; (4ec <usb_d_cb_trans_more+0x2c>)
     4c8:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     4ca:	4b09      	ldr	r3, [pc, #36]	; (4f0 <usb_d_cb_trans_more+0x30>)
     4cc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     4d0:	789b      	ldrb	r3, [r3, #2]
     4d2:	2b03      	cmp	r3, #3
     4d4:	d001      	beq.n	4da <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     4d6:	2000      	movs	r0, #0
}
     4d8:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     4da:	4b05      	ldr	r3, [pc, #20]	; (4f0 <usb_d_cb_trans_more+0x30>)
     4dc:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     4e0:	6983      	ldr	r3, [r0, #24]
     4e2:	4629      	mov	r1, r5
     4e4:	4620      	mov	r0, r4
     4e6:	4798      	blx	r3
     4e8:	bd38      	pop	{r3, r4, r5, pc}
     4ea:	bf00      	nop
     4ec:	00000479 	.word	0x00000479
     4f0:	20000084 	.word	0x20000084

000004f4 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f6:	b085      	sub	sp, #20
     4f8:	4606      	mov	r6, r0
     4fa:	460d      	mov	r5, r1
     4fc:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     4fe:	4b4d      	ldr	r3, [pc, #308]	; (634 <_usb_d_cb_trans_done+0x140>)
     500:	4798      	blx	r3
     502:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     504:	2d00      	cmp	r5, #0
     506:	d15b      	bne.n	5c0 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     508:	4a4b      	ldr	r2, [pc, #300]	; (638 <_usb_d_cb_trans_done+0x144>)
     50a:	0143      	lsls	r3, r0, #5
     50c:	18d1      	adds	r1, r2, r3
     50e:	2000      	movs	r0, #0
     510:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     512:	5cd3      	ldrb	r3, [r2, r3]
     514:	b173      	cbz	r3, 534 <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     516:	4b48      	ldr	r3, [pc, #288]	; (638 <_usb_d_cb_trans_done+0x144>)
     518:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     51c:	2201      	movs	r2, #1
     51e:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     520:	4845      	ldr	r0, [pc, #276]	; (638 <_usb_d_cb_trans_done+0x144>)
     522:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     526:	69c3      	ldr	r3, [r0, #28]
     528:	463a      	mov	r2, r7
     52a:	78c1      	ldrb	r1, [r0, #3]
     52c:	4630      	mov	r0, r6
     52e:	4798      	blx	r3
}
     530:	b005      	add	sp, #20
     532:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     534:	788b      	ldrb	r3, [r1, #2]
     536:	2b03      	cmp	r3, #3
     538:	d00b      	beq.n	552 <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     53a:	483f      	ldr	r0, [pc, #252]	; (638 <_usb_d_cb_trans_done+0x144>)
     53c:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     540:	4614      	mov	r4, r2
     542:	69d3      	ldr	r3, [r2, #28]
     544:	320c      	adds	r2, #12
     546:	2100      	movs	r1, #0
     548:	7860      	ldrb	r0, [r4, #1]
     54a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     54c:	2302      	movs	r3, #2
     54e:	70a3      	strb	r3, [r4, #2]
     550:	e7ee      	b.n	530 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     552:	460b      	mov	r3, r1
     554:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     558:	460a      	mov	r2, r1
     55a:	69ce      	ldr	r6, [r1, #28]
     55c:	320c      	adds	r2, #12
     55e:	2101      	movs	r1, #1
     560:	7858      	ldrb	r0, [r3, #1]
     562:	47b0      	blx	r6
		if (err) {
     564:	b1a0      	cbz	r0, 590 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     566:	4b34      	ldr	r3, [pc, #208]	; (638 <_usb_d_cb_trans_done+0x144>)
     568:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     56c:	2205      	movs	r2, #5
     56e:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     570:	2202      	movs	r2, #2
     572:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     574:	2d00      	cmp	r5, #0
     576:	db09      	blt.n	58c <_usb_d_cb_trans_done+0x98>
     578:	482f      	ldr	r0, [pc, #188]	; (638 <_usb_d_cb_trans_done+0x144>)
     57a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     57e:	7840      	ldrb	r0, [r0, #1]
     580:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     584:	2101      	movs	r1, #1
     586:	4b2d      	ldr	r3, [pc, #180]	; (63c <_usb_d_cb_trans_done+0x148>)
     588:	4798      	blx	r3
     58a:	e7d1      	b.n	530 <_usb_d_cb_trans_done+0x3c>
     58c:	7858      	ldrb	r0, [r3, #1]
     58e:	e7f9      	b.n	584 <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     590:	4829      	ldr	r0, [pc, #164]	; (638 <_usb_d_cb_trans_done+0x144>)
     592:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     596:	2304      	movs	r3, #4
     598:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     59a:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     59c:	2200      	movs	r2, #0
     59e:	9201      	str	r2, [sp, #4]
     5a0:	9202      	str	r2, [sp, #8]
     5a2:	4295      	cmp	r5, r2
     5a4:	bfac      	ite	ge
     5a6:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     5aa:	f003 030f 	andlt.w	r3, r3, #15
     5ae:	f88d 300c 	strb.w	r3, [sp, #12]
     5b2:	2301      	movs	r3, #1
     5b4:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     5b8:	a801      	add	r0, sp, #4
     5ba:	4b21      	ldr	r3, [pc, #132]	; (640 <_usb_d_cb_trans_done+0x14c>)
     5bc:	4798      	blx	r3
     5be:	e7b7      	b.n	530 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     5c0:	2d01      	cmp	r5, #1
     5c2:	d00a      	beq.n	5da <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     5c4:	2d02      	cmp	r5, #2
     5c6:	d01c      	beq.n	602 <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     5c8:	2d03      	cmp	r5, #3
     5ca:	d02a      	beq.n	622 <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     5cc:	4b1a      	ldr	r3, [pc, #104]	; (638 <_usb_d_cb_trans_done+0x144>)
     5ce:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     5d2:	2206      	movs	r2, #6
     5d4:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     5d6:	70da      	strb	r2, [r3, #3]
     5d8:	e7a2      	b.n	520 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     5da:	4a17      	ldr	r2, [pc, #92]	; (638 <_usb_d_cb_trans_done+0x144>)
     5dc:	0143      	lsls	r3, r0, #5
     5de:	18d1      	adds	r1, r2, r3
     5e0:	2002      	movs	r0, #2
     5e2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     5e4:	5cd3      	ldrb	r3, [r2, r3]
     5e6:	b12b      	cbz	r3, 5f4 <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     5e8:	4b13      	ldr	r3, [pc, #76]	; (638 <_usb_d_cb_trans_done+0x144>)
     5ea:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     5ee:	2205      	movs	r2, #5
     5f0:	709a      	strb	r2, [r3, #2]
     5f2:	e795      	b.n	520 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     5f4:	460b      	mov	r3, r1
     5f6:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     5f8:	2100      	movs	r1, #0
     5fa:	4630      	mov	r0, r6
     5fc:	4b0f      	ldr	r3, [pc, #60]	; (63c <_usb_d_cb_trans_done+0x148>)
     5fe:	4798      	blx	r3
     600:	e78e      	b.n	520 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     602:	4a0d      	ldr	r2, [pc, #52]	; (638 <_usb_d_cb_trans_done+0x144>)
     604:	0143      	lsls	r3, r0, #5
     606:	18d1      	adds	r1, r2, r3
     608:	2004      	movs	r0, #4
     60a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     60c:	5cd3      	ldrb	r3, [r2, r3]
     60e:	b12b      	cbz	r3, 61c <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     610:	4b09      	ldr	r3, [pc, #36]	; (638 <_usb_d_cb_trans_done+0x144>)
     612:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     616:	2201      	movs	r2, #1
     618:	709a      	strb	r2, [r3, #2]
     61a:	e781      	b.n	520 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     61c:	2302      	movs	r3, #2
     61e:	708b      	strb	r3, [r1, #2]
			return;
     620:	e786      	b.n	530 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     622:	4b05      	ldr	r3, [pc, #20]	; (638 <_usb_d_cb_trans_done+0x144>)
     624:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     628:	2200      	movs	r2, #0
     62a:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     62c:	2205      	movs	r2, #5
     62e:	70da      	strb	r2, [r3, #3]
     630:	e776      	b.n	520 <_usb_d_cb_trans_done+0x2c>
     632:	bf00      	nop
     634:	00000479 	.word	0x00000479
     638:	20000084 	.word	0x20000084
     63c:	00001b1d 	.word	0x00001b1d
     640:	00001cc5 	.word	0x00001cc5

00000644 <usb_d_cb_trans_setup>:
{
     644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     648:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     64a:	4b1c      	ldr	r3, [pc, #112]	; (6bc <usb_d_cb_trans_setup+0x78>)
     64c:	4798      	blx	r3
     64e:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     650:	4c1b      	ldr	r4, [pc, #108]	; (6c0 <usb_d_cb_trans_setup+0x7c>)
     652:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     656:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     658:	4621      	mov	r1, r4
     65a:	4628      	mov	r0, r5
     65c:	4b19      	ldr	r3, [pc, #100]	; (6c4 <usb_d_cb_trans_setup+0x80>)
     65e:	4798      	blx	r3
	if (n != 8) {
     660:	b2c0      	uxtb	r0, r0
     662:	2808      	cmp	r0, #8
     664:	d009      	beq.n	67a <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     666:	2101      	movs	r1, #1
     668:	4628      	mov	r0, r5
     66a:	4c17      	ldr	r4, [pc, #92]	; (6c8 <usb_d_cb_trans_setup+0x84>)
     66c:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     66e:	2101      	movs	r1, #1
     670:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     674:	47a0      	blx	r4
		return;
     676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     67a:	2100      	movs	r1, #0
     67c:	4628      	mov	r0, r5
     67e:	4f12      	ldr	r7, [pc, #72]	; (6c8 <usb_d_cb_trans_setup+0x84>)
     680:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     682:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     686:	2100      	movs	r1, #0
     688:	4640      	mov	r0, r8
     68a:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     68c:	4b0c      	ldr	r3, [pc, #48]	; (6c0 <usb_d_cb_trans_setup+0x7c>)
     68e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     692:	2201      	movs	r2, #1
     694:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     696:	695b      	ldr	r3, [r3, #20]
     698:	4621      	mov	r1, r4
     69a:	4628      	mov	r0, r5
     69c:	4798      	blx	r3
     69e:	b108      	cbz	r0, 6a4 <usb_d_cb_trans_setup+0x60>
     6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     6a4:	4b06      	ldr	r3, [pc, #24]	; (6c0 <usb_d_cb_trans_setup+0x7c>)
     6a6:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     6aa:	2305      	movs	r3, #5
     6ac:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     6ae:	2101      	movs	r1, #1
     6b0:	4628      	mov	r0, r5
     6b2:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     6b4:	2101      	movs	r1, #1
     6b6:	4640      	mov	r0, r8
     6b8:	47b8      	blx	r7
     6ba:	e7f1      	b.n	6a0 <usb_d_cb_trans_setup+0x5c>
     6bc:	00000479 	.word	0x00000479
     6c0:	20000084 	.word	0x20000084
     6c4:	00001c65 	.word	0x00001c65
     6c8:	00001b1d 	.word	0x00001b1d

000006cc <usb_d_init>:

int32_t usb_d_init(void)
{
     6cc:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     6ce:	4b11      	ldr	r3, [pc, #68]	; (714 <usb_d_init+0x48>)
     6d0:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     6d2:	2800      	cmp	r0, #0
     6d4:	db1d      	blt.n	712 <usb_d_init+0x46>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     6d6:	4c10      	ldr	r4, [pc, #64]	; (718 <usb_d_init+0x4c>)
     6d8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
     6dc:	2100      	movs	r1, #0
     6de:	4620      	mov	r0, r4
     6e0:	4b0e      	ldr	r3, [pc, #56]	; (71c <usb_d_init+0x50>)
     6e2:	4798      	blx	r3
     6e4:	4623      	mov	r3, r4
     6e6:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     6ea:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     6ec:	4a0c      	ldr	r2, [pc, #48]	; (720 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     6ee:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     6f0:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     6f2:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     6f4:	61da      	str	r2, [r3, #28]
     6f6:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     6f8:	4283      	cmp	r3, r0
     6fa:	d1f8      	bne.n	6ee <usb_d_init+0x22>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     6fc:	4909      	ldr	r1, [pc, #36]	; (724 <usb_d_init+0x58>)
     6fe:	2000      	movs	r0, #0
     700:	4c09      	ldr	r4, [pc, #36]	; (728 <usb_d_init+0x5c>)
     702:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     704:	4909      	ldr	r1, [pc, #36]	; (72c <usb_d_init+0x60>)
     706:	2001      	movs	r0, #1
     708:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     70a:	4909      	ldr	r1, [pc, #36]	; (730 <usb_d_init+0x64>)
     70c:	2002      	movs	r0, #2
     70e:	47a0      	blx	r4
	return ERR_NONE;
     710:	2000      	movs	r0, #0
}
     712:	bd10      	pop	{r4, pc}
     714:	00001501 	.word	0x00001501
     718:	20000084 	.word	0x20000084
     71c:	00002bc3 	.word	0x00002bc3
     720:	000004bd 	.word	0x000004bd
     724:	00000645 	.word	0x00000645
     728:	00001ec9 	.word	0x00001ec9
     72c:	000004c1 	.word	0x000004c1
     730:	000004f5 	.word	0x000004f5

00000734 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     734:	b508      	push	{r3, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     736:	4b01      	ldr	r3, [pc, #4]	; (73c <usb_d_register_callback+0x8>)
     738:	4798      	blx	r3
     73a:	bd08      	pop	{r3, pc}
     73c:	00001ea5 	.word	0x00001ea5

00000740 <usb_d_enable>:
}

int32_t usb_d_enable(void)
{
     740:	b508      	push	{r3, lr}
	return _usb_d_dev_enable();
     742:	4b01      	ldr	r3, [pc, #4]	; (748 <usb_d_enable+0x8>)
     744:	4798      	blx	r3
}
     746:	bd08      	pop	{r3, pc}
     748:	000015fd 	.word	0x000015fd

0000074c <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     74c:	b508      	push	{r3, lr}
	_usb_d_dev_attach();
     74e:	4b01      	ldr	r3, [pc, #4]	; (754 <usb_d_attach+0x8>)
     750:	4798      	blx	r3
     752:	bd08      	pop	{r3, pc}
     754:	00001669 	.word	0x00001669

00000758 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     758:	b508      	push	{r3, lr}
	_usb_d_dev_set_address(addr);
     75a:	4b01      	ldr	r3, [pc, #4]	; (760 <usb_d_set_address+0x8>)
     75c:	4798      	blx	r3
     75e:	bd08      	pop	{r3, pc}
     760:	0000167b 	.word	0x0000167b

00000764 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     766:	4606      	mov	r6, r0
     768:	460c      	mov	r4, r1
     76a:	4617      	mov	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     76c:	4b0f      	ldr	r3, [pc, #60]	; (7ac <usb_d_ep_init+0x48>)
     76e:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     770:	2800      	cmp	r0, #0
     772:	da14      	bge.n	79e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     774:	20ff      	movs	r0, #255	; 0xff
     776:	4b0d      	ldr	r3, [pc, #52]	; (7ac <usb_d_ep_init+0x48>)
     778:	4798      	blx	r3
		if (ep_index < 0) {
     77a:	1e05      	subs	r5, r0, #0
     77c:	db12      	blt.n	7a4 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     77e:	463a      	mov	r2, r7
     780:	4621      	mov	r1, r4
     782:	4630      	mov	r0, r6
     784:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <usb_d_ep_init+0x4c>)
     786:	4798      	blx	r3
	if (rc < 0) {
     788:	2800      	cmp	r0, #0
     78a:	db0d      	blt.n	7a8 <usb_d_ep_init+0x44>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     78c:	4b09      	ldr	r3, [pc, #36]	; (7b4 <usb_d_ep_init+0x50>)
     78e:	0168      	lsls	r0, r5, #5
     790:	181a      	adds	r2, r3, r0
     792:	7056      	strb	r6, [r2, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     794:	f004 0403 	and.w	r4, r4, #3
     798:	541c      	strb	r4, [r3, r0]
	return ERR_NONE;
     79a:	2000      	movs	r0, #0
     79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     79e:	f06f 0013 	mvn.w	r0, #19
     7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -USB_ERR_ALLOC_FAIL;
     7a4:	f06f 0014 	mvn.w	r0, #20
}
     7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7aa:	bf00      	nop
     7ac:	00000479 	.word	0x00000479
     7b0:	00001689 	.word	0x00001689
     7b4:	20000084 	.word	0x20000084

000007b8 <usb_d_ep0_init>:
{
     7b8:	b508      	push	{r3, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     7ba:	4602      	mov	r2, r0
     7bc:	2100      	movs	r1, #0
     7be:	4608      	mov	r0, r1
     7c0:	4b01      	ldr	r3, [pc, #4]	; (7c8 <usb_d_ep0_init+0x10>)
     7c2:	4798      	blx	r3
}
     7c4:	bd08      	pop	{r3, pc}
     7c6:	bf00      	nop
     7c8:	00000765 	.word	0x00000765

000007cc <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     7cc:	b538      	push	{r3, r4, r5, lr}
     7ce:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     7d0:	4b06      	ldr	r3, [pc, #24]	; (7ec <usb_d_ep_deinit+0x20>)
     7d2:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     7d4:	1e04      	subs	r4, r0, #0
     7d6:	db07      	blt.n	7e8 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     7d8:	4628      	mov	r0, r5
     7da:	4b05      	ldr	r3, [pc, #20]	; (7f0 <usb_d_ep_deinit+0x24>)
     7dc:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     7de:	4805      	ldr	r0, [pc, #20]	; (7f4 <usb_d_ep_deinit+0x28>)
     7e0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     7e4:	23ff      	movs	r3, #255	; 0xff
     7e6:	7043      	strb	r3, [r0, #1]
     7e8:	bd38      	pop	{r3, r4, r5, pc}
     7ea:	bf00      	nop
     7ec:	00000479 	.word	0x00000479
     7f0:	000017a1 	.word	0x000017a1
     7f4:	20000084 	.word	0x20000084

000007f8 <usb_d_ep_enable>:
}

int32_t usb_d_ep_enable(const uint8_t ep)
{
     7f8:	b538      	push	{r3, r4, r5, lr}
     7fa:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     7fc:	4b0e      	ldr	r3, [pc, #56]	; (838 <usb_d_ep_enable+0x40>)
     7fe:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     800:	1e04      	subs	r4, r0, #0
     802:	db16      	blt.n	832 <usb_d_ep_enable+0x3a>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     804:	0163      	lsls	r3, r4, #5
     806:	4a0d      	ldr	r2, [pc, #52]	; (83c <usb_d_ep_enable+0x44>)
     808:	5cd3      	ldrb	r3, [r2, r3]
     80a:	2b00      	cmp	r3, #0
     80c:	bf0c      	ite	eq
     80e:	2202      	moveq	r2, #2
     810:	2201      	movne	r2, #1
     812:	4b0a      	ldr	r3, [pc, #40]	; (83c <usb_d_ep_enable+0x44>)
     814:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     818:	709a      	strb	r2, [r3, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     81a:	4628      	mov	r0, r5
     81c:	4b08      	ldr	r3, [pc, #32]	; (840 <usb_d_ep_enable+0x48>)
     81e:	4798      	blx	r3
	if (rc < 0) {
     820:	2800      	cmp	r0, #0
     822:	db00      	blt.n	826 <usb_d_ep_enable+0x2e>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     824:	bd38      	pop	{r3, r4, r5, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <usb_d_ep_enable+0x44>)
     828:	eb03 1444 	add.w	r4, r3, r4, lsl #5
     82c:	2300      	movs	r3, #0
     82e:	70a3      	strb	r3, [r4, #2]
     830:	bd38      	pop	{r3, r4, r5, pc}
		return -USB_ERR_PARAM;
     832:	f06f 0011 	mvn.w	r0, #17
     836:	e7f5      	b.n	824 <usb_d_ep_enable+0x2c>
     838:	00000479 	.word	0x00000479
     83c:	20000084 	.word	0x20000084
     840:	00001865 	.word	0x00001865

00000844 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     848:	b086      	sub	sp, #24
     84a:	4604      	mov	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     84c:	7a07      	ldrb	r7, [r0, #8]
     84e:	4638      	mov	r0, r7
     850:	4b3f      	ldr	r3, [pc, #252]	; (950 <usb_d_ep_transfer+0x10c>)
     852:	4798      	blx	r3
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     854:	7a65      	ldrb	r5, [r4, #9]
	uint32_t              len = xfer->size;
     856:	f8d4 8004 	ldr.w	r8, [r4, #4]
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     85a:	1e06      	subs	r6, r0, #0
     85c:	db72      	blt.n	944 <usb_d_ep_transfer+0x100>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     85e:	a804      	add	r0, sp, #16
     860:	4b3c      	ldr	r3, [pc, #240]	; (954 <usb_d_ep_transfer+0x110>)
     862:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     864:	4b3c      	ldr	r3, [pc, #240]	; (958 <usb_d_ep_transfer+0x114>)
     866:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     86a:	789b      	ldrb	r3, [r3, #2]
     86c:	f88d 3017 	strb.w	r3, [sp, #23]
	if (state == USB_EP_S_IDLE) {
     870:	f89d 3017 	ldrb.w	r3, [sp, #23]
     874:	b2db      	uxtb	r3, r3
     876:	2b01      	cmp	r3, #1
     878:	d011      	beq.n	89e <usb_d_ep_transfer+0x5a>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     87a:	a804      	add	r0, sp, #16
     87c:	4b37      	ldr	r3, [pc, #220]	; (95c <usb_d_ep_transfer+0x118>)
     87e:	4798      	blx	r3
		switch (state) {
     880:	f89d 3017 	ldrb.w	r3, [sp, #23]
     884:	b2db      	uxtb	r3, r3
     886:	2b05      	cmp	r3, #5
     888:	d05f      	beq.n	94a <usb_d_ep_transfer+0x106>
     88a:	2b06      	cmp	r3, #6
     88c:	d023      	beq.n	8d6 <usb_d_ep_transfer+0x92>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     88e:	2b00      	cmp	r3, #0
     890:	bf0c      	ite	eq
     892:	f06f 0012 	mvneq.w	r0, #18
     896:	2001      	movne	r0, #1
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
	return rc;
}
     898:	b006      	add	sp, #24
     89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     89e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 958 <usb_d_ep_transfer+0x114>
     8a2:	ea4f 1946 	mov.w	r9, r6, lsl #5
     8a6:	eb0a 0309 	add.w	r3, sl, r9
     8aa:	2203      	movs	r2, #3
     8ac:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     8ae:	a804      	add	r0, sp, #16
     8b0:	4b2a      	ldr	r3, [pc, #168]	; (95c <usb_d_ep_transfer+0x118>)
     8b2:	4798      	blx	r3
	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     8b4:	f81a 3009 	ldrb.w	r3, [sl, r9]
     8b8:	b183      	cbz	r3, 8dc <usb_d_ep_transfer+0x98>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     8ba:	7a22      	ldrb	r2, [r4, #8]
     8bc:	3500      	adds	r5, #0
     8be:	bf18      	it	ne
     8c0:	2501      	movne	r5, #1
	struct usb_d_transfer trans
     8c2:	6823      	ldr	r3, [r4, #0]
     8c4:	9301      	str	r3, [sp, #4]
     8c6:	f8cd 8008 	str.w	r8, [sp, #8]
     8ca:	f017 0f80 	tst.w	r7, #128	; 0x80
     8ce:	d119      	bne.n	904 <usb_d_ep_transfer+0xc0>
     8d0:	f002 030f 	and.w	r3, r2, #15
     8d4:	e018      	b.n	908 <usb_d_ep_transfer+0xc4>
			return -USB_ERROR;
     8d6:	f06f 000f 	mvn.w	r0, #15
     8da:	e7dd      	b.n	898 <usb_d_ep_transfer+0x54>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     8dc:	4b1e      	ldr	r3, [pc, #120]	; (958 <usb_d_ep_transfer+0x114>)
     8de:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     8e2:	7cda      	ldrb	r2, [r3, #19]
     8e4:	7c9d      	ldrb	r5, [r3, #18]
     8e6:	eb05 2502 	add.w	r5, r5, r2, lsl #8
     8ea:	b2ad      	uxth	r5, r5
		if (req_len == 0) {
     8ec:	b9a5      	cbnz	r5, 918 <usb_d_ep_transfer+0xd4>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     8ee:	4b1a      	ldr	r3, [pc, #104]	; (958 <usb_d_ep_transfer+0x114>)
     8f0:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     8f4:	2304      	movs	r3, #4
     8f6:	70b3      	strb	r3, [r6, #2]
			len                 = 0;
     8f8:	2300      	movs	r3, #0
			zlp                 = true;
     8fa:	2501      	movs	r5, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     8fc:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     8fe:	6821      	ldr	r1, [r4, #0]
     900:	9101      	str	r1, [sp, #4]
     902:	9302      	str	r3, [sp, #8]
     904:	f042 0380 	orr.w	r3, r2, #128	; 0x80
     908:	f88d 300c 	strb.w	r3, [sp, #12]
     90c:	f88d 500d 	strb.w	r5, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     910:	a801      	add	r0, sp, #4
     912:	4b13      	ldr	r3, [pc, #76]	; (960 <usb_d_ep_transfer+0x11c>)
     914:	4798      	blx	r3
	return rc;
     916:	e7bf      	b.n	898 <usb_d_ep_transfer+0x54>
     918:	4643      	mov	r3, r8
     91a:	45a8      	cmp	r8, r5
     91c:	bf28      	it	cs
     91e:	462b      	movcs	r3, r5
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     920:	4a0d      	ldr	r2, [pc, #52]	; (958 <usb_d_ep_transfer+0x114>)
     922:	eb02 1646 	add.w	r6, r2, r6, lsl #5
			if (dir) {
     926:	f996 200c 	ldrsb.w	r2, [r6, #12]
     92a:	2a00      	cmp	r2, #0
     92c:	db05      	blt.n	93a <usb_d_ep_transfer+0xf6>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     92e:	7a22      	ldrb	r2, [r4, #8]
	struct usb_d_transfer trans
     930:	6821      	ldr	r1, [r4, #0]
     932:	9101      	str	r1, [sp, #4]
     934:	9302      	str	r3, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     936:	2500      	movs	r5, #0
     938:	e7ca      	b.n	8d0 <usb_d_ep_transfer+0x8c>
				zlp = (req_len > len);
     93a:	429d      	cmp	r5, r3
     93c:	bf94      	ite	ls
     93e:	2500      	movls	r5, #0
     940:	2501      	movhi	r5, #1
     942:	e7db      	b.n	8fc <usb_d_ep_transfer+0xb8>
		return -USB_ERR_PARAM;
     944:	f06f 0011 	mvn.w	r0, #17
     948:	e7a6      	b.n	898 <usb_d_ep_transfer+0x54>
			return USB_HALTED;
     94a:	2002      	movs	r0, #2
     94c:	e7a4      	b.n	898 <usb_d_ep_transfer+0x54>
     94e:	bf00      	nop
     950:	00000479 	.word	0x00000479
     954:	0000045d 	.word	0x0000045d
     958:	20000084 	.word	0x20000084
     95c:	0000046b 	.word	0x0000046b
     960:	00001cc5 	.word	0x00001cc5

00000964 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     964:	b538      	push	{r3, r4, r5, lr}
     966:	4604      	mov	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     968:	b141      	cbz	r1, 97c <usb_d_ep_halt+0x18>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     96a:	2901      	cmp	r1, #1
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     96c:	bf0c      	ite	eq
     96e:	2101      	moveq	r1, #1
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     970:	2102      	movne	r1, #2
     972:	4b13      	ldr	r3, [pc, #76]	; (9c0 <usb_d_ep_halt+0x5c>)
     974:	4798      	blx	r3
     976:	4603      	mov	r3, r0
	}
}
     978:	4618      	mov	r0, r3
     97a:	bd38      	pop	{r3, r4, r5, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     97c:	4b11      	ldr	r3, [pc, #68]	; (9c4 <usb_d_ep_halt+0x60>)
     97e:	4798      	blx	r3
	if (ep_index < 0) {
     980:	1e05      	subs	r5, r0, #0
     982:	db19      	blt.n	9b8 <usb_d_ep_halt+0x54>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     984:	2102      	movs	r1, #2
     986:	4620      	mov	r0, r4
     988:	4b0d      	ldr	r3, [pc, #52]	; (9c0 <usb_d_ep_halt+0x5c>)
     98a:	4798      	blx	r3
     98c:	4603      	mov	r3, r0
     98e:	2800      	cmp	r0, #0
     990:	d0f2      	beq.n	978 <usb_d_ep_halt+0x14>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     992:	2100      	movs	r1, #0
     994:	4620      	mov	r0, r4
     996:	4b0a      	ldr	r3, [pc, #40]	; (9c0 <usb_d_ep_halt+0x5c>)
     998:	4798      	blx	r3
		if (rc < 0) {
     99a:	1e03      	subs	r3, r0, #0
     99c:	dbec      	blt.n	978 <usb_d_ep_halt+0x14>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     99e:	4b0a      	ldr	r3, [pc, #40]	; (9c8 <usb_d_ep_halt+0x64>)
     9a0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
     9a4:	2201      	movs	r2, #1
     9a6:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     9a8:	2103      	movs	r1, #3
     9aa:	70d9      	strb	r1, [r3, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     9ac:	69db      	ldr	r3, [r3, #28]
     9ae:	2200      	movs	r2, #0
     9b0:	4620      	mov	r0, r4
     9b2:	4798      	blx	r3
	return ERR_NONE;
     9b4:	2300      	movs	r3, #0
     9b6:	e7df      	b.n	978 <usb_d_ep_halt+0x14>
		return -USB_ERR_PARAM;
     9b8:	f06f 0311 	mvn.w	r3, #17
     9bc:	e7dc      	b.n	978 <usb_d_ep_halt+0x14>
     9be:	bf00      	nop
     9c0:	00001b1d 	.word	0x00001b1d
     9c4:	00000479 	.word	0x00000479
     9c8:	20000084 	.word	0x20000084

000009cc <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     9cc:	b538      	push	{r3, r4, r5, lr}
     9ce:	460d      	mov	r5, r1
     9d0:	4614      	mov	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     9d2:	4b0e      	ldr	r3, [pc, #56]	; (a0c <usb_d_ep_register_callback+0x40>)
     9d4:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     9d6:	4b0e      	ldr	r3, [pc, #56]	; (a10 <usb_d_ep_register_callback+0x44>)
     9d8:	2c00      	cmp	r4, #0
     9da:	bf08      	it	eq
     9dc:	461c      	moveq	r4, r3
	if (ep_index < 0) {
     9de:	2800      	cmp	r0, #0
     9e0:	db13      	blt.n	a0a <usb_d_ep_register_callback+0x3e>
		return;
	}
	switch (type) {
     9e2:	2d01      	cmp	r5, #1
     9e4:	d008      	beq.n	9f8 <usb_d_ep_register_callback+0x2c>
     9e6:	b115      	cbz	r5, 9ee <usb_d_ep_register_callback+0x22>
     9e8:	2d02      	cmp	r5, #2
     9ea:	d00a      	beq.n	a02 <usb_d_ep_register_callback+0x36>
     9ec:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_SETUP:
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     9ee:	4b09      	ldr	r3, [pc, #36]	; (a14 <usb_d_ep_register_callback+0x48>)
     9f0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     9f4:	6144      	str	r4, [r0, #20]
		break;
     9f6:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_MORE:
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     9f8:	4b06      	ldr	r3, [pc, #24]	; (a14 <usb_d_ep_register_callback+0x48>)
     9fa:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     9fe:	6184      	str	r4, [r0, #24]
		break;
     a00:	bd38      	pop	{r3, r4, r5, pc}
	case USB_D_EP_CB_XFER:
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     a02:	4b04      	ldr	r3, [pc, #16]	; (a14 <usb_d_ep_register_callback+0x48>)
     a04:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     a08:	61c4      	str	r4, [r0, #28]
     a0a:	bd38      	pop	{r3, r4, r5, pc}
     a0c:	00000479 	.word	0x00000479
     a10:	000004bd 	.word	0x000004bd
     a14:	20000084 	.word	0x20000084

00000a18 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a18:	b900      	cbnz	r0, a1c <assert+0x4>
		__asm("BKPT #0");
     a1a:	be00      	bkpt	0x0000
     a1c:	4770      	bx	lr

00000a1e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     a1e:	6803      	ldr	r3, [r0, #0]
     a20:	b14b      	cbz	r3, a36 <is_list_element+0x18>
		if (it == element) {
     a22:	428b      	cmp	r3, r1
     a24:	d009      	beq.n	a3a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     a26:	681b      	ldr	r3, [r3, #0]
     a28:	b11b      	cbz	r3, a32 <is_list_element+0x14>
		if (it == element) {
     a2a:	4299      	cmp	r1, r3
     a2c:	d1fb      	bne.n	a26 <is_list_element+0x8>
			return true;
     a2e:	2001      	movs	r0, #1
		}
	}

	return false;
}
     a30:	4770      	bx	lr
	return false;
     a32:	2000      	movs	r0, #0
     a34:	4770      	bx	lr
     a36:	2000      	movs	r0, #0
     a38:	4770      	bx	lr
			return true;
     a3a:	2001      	movs	r0, #1
     a3c:	4770      	bx	lr
	...

00000a40 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     a40:	b570      	push	{r4, r5, r6, lr}
     a42:	4605      	mov	r5, r0
     a44:	460e      	mov	r6, r1
	struct list_element *it = list->head;
     a46:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     a48:	4b0a      	ldr	r3, [pc, #40]	; (a74 <list_insert_at_end+0x34>)
     a4a:	4798      	blx	r3
     a4c:	f080 0001 	eor.w	r0, r0, #1
     a50:	224f      	movs	r2, #79	; 0x4f
     a52:	4909      	ldr	r1, [pc, #36]	; (a78 <list_insert_at_end+0x38>)
     a54:	b2c0      	uxtb	r0, r0
     a56:	4b09      	ldr	r3, [pc, #36]	; (a7c <list_insert_at_end+0x3c>)
     a58:	4798      	blx	r3

	if (!list->head) {
     a5a:	682b      	ldr	r3, [r5, #0]
     a5c:	b91b      	cbnz	r3, a66 <list_insert_at_end+0x26>
		list->head                             = (struct list_element *)element;
     a5e:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     a60:	6033      	str	r3, [r6, #0]
		return;
     a62:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (it->next) {
		it = it->next;
     a64:	461c      	mov	r4, r3
	while (it->next) {
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	2b00      	cmp	r3, #0
     a6a:	d1fb      	bne.n	a64 <list_insert_at_end+0x24>
	}
	it->next                               = (struct list_element *)element;
     a6c:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     a6e:	6033      	str	r3, [r6, #0]
     a70:	bd70      	pop	{r4, r5, r6, pc}
     a72:	bf00      	nop
     a74:	00000a1f 	.word	0x00000a1f
     a78:	00002bd4 	.word	0x00002bd4
     a7c:	00000a19 	.word	0x00000a19

00000a80 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a80:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     a82:	4a08      	ldr	r2, [pc, #32]	; (aa4 <_init_chip+0x24>)
     a84:	8813      	ldrh	r3, [r2, #0]
     a86:	b29b      	uxth	r3, r3
     a88:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     a8a:	4b07      	ldr	r3, [pc, #28]	; (aa8 <_init_chip+0x28>)
     a8c:	4798      	blx	r3
	_oscctrl_init_sources();
     a8e:	4b07      	ldr	r3, [pc, #28]	; (aac <_init_chip+0x2c>)
     a90:	4798      	blx	r3
	_mclk_init();
     a92:	4b07      	ldr	r3, [pc, #28]	; (ab0 <_init_chip+0x30>)
     a94:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     a96:	4b07      	ldr	r3, [pc, #28]	; (ab4 <_init_chip+0x34>)
     a98:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a9a:	f640 70ff 	movw	r0, #4095	; 0xfff
     a9e:	4b06      	ldr	r3, [pc, #24]	; (ab8 <_init_chip+0x38>)
     aa0:	4798      	blx	r3
     aa2:	bd08      	pop	{r3, pc}
     aa4:	41004000 	.word	0x41004000
     aa8:	00000b25 	.word	0x00000b25
     aac:	00000b45 	.word	0x00000b45
     ab0:	00000b19 	.word	0x00000b19
     ab4:	00000b61 	.word	0x00000b61
     ab8:	00000abd 	.word	0x00000abd

00000abc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     abc:	f010 0f01 	tst.w	r0, #1
     ac0:	d008      	beq.n	ad4 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ac2:	4a11      	ldr	r2, [pc, #68]	; (b08 <_gclk_init_generators_by_fref+0x4c>)
     ac4:	4b11      	ldr	r3, [pc, #68]	; (b0c <_gclk_init_generators_by_fref+0x50>)
     ac6:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ac8:	4619      	mov	r1, r3
     aca:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     ace:	684b      	ldr	r3, [r1, #4]
     ad0:	4213      	tst	r3, r2
     ad2:	d1fc      	bne.n	ace <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     ad4:	f010 0f02 	tst.w	r0, #2
     ad8:	d008      	beq.n	aec <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     ada:	4a0d      	ldr	r2, [pc, #52]	; (b10 <_gclk_init_generators_by_fref+0x54>)
     adc:	4b0b      	ldr	r3, [pc, #44]	; (b0c <_gclk_init_generators_by_fref+0x50>)
     ade:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ae0:	4619      	mov	r1, r3
     ae2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     ae6:	684b      	ldr	r3, [r1, #4]
     ae8:	4213      	tst	r3, r2
     aea:	d1fc      	bne.n	ae6 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     aec:	f010 0f08 	tst.w	r0, #8
     af0:	d008      	beq.n	b04 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     af2:	4a08      	ldr	r2, [pc, #32]	; (b14 <_gclk_init_generators_by_fref+0x58>)
     af4:	4b05      	ldr	r3, [pc, #20]	; (b0c <_gclk_init_generators_by_fref+0x50>)
     af6:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     af8:	4619      	mov	r1, r3
     afa:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     afe:	684b      	ldr	r3, [r1, #4]
     b00:	4213      	tst	r3, r2
     b02:	d1fc      	bne.n	afe <_gclk_init_generators_by_fref+0x42>
     b04:	4770      	bx	lr
     b06:	bf00      	nop
     b08:	00010101 	.word	0x00010101
     b0c:	40001c00 	.word	0x40001c00
     b10:	00010106 	.word	0x00010106
     b14:	00010105 	.word	0x00010105

00000b18 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     b18:	2201      	movs	r2, #1
     b1a:	4b01      	ldr	r3, [pc, #4]	; (b20 <_mclk_init+0x8>)
     b1c:	715a      	strb	r2, [r3, #5]
     b1e:	4770      	bx	lr
     b20:	40000800 	.word	0x40000800

00000b24 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     b24:	4b06      	ldr	r3, [pc, #24]	; (b40 <_osc32kctrl_init_sources+0x1c>)
     b26:	f242 028e 	movw	r2, #8334	; 0x208e
     b2a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     b2c:	2200      	movs	r2, #0
     b2e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     b30:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     b32:	69d9      	ldr	r1, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     b34:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     b38:	61d9      	str	r1, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     b3a:	741a      	strb	r2, [r3, #16]
     b3c:	4770      	bx	lr
     b3e:	bf00      	nop
     b40:	40001400 	.word	0x40001400

00000b44 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     b44:	4a04      	ldr	r2, [pc, #16]	; (b58 <_oscctrl_init_sources+0x14>)
     b46:	4b05      	ldr	r3, [pc, #20]	; (b5c <_oscctrl_init_sources+0x18>)
     b48:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     b4a:	461a      	mov	r2, r3
     b4c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     b4e:	f013 0f02 	tst.w	r3, #2
     b52:	d0fb      	beq.n	b4c <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     b54:	4770      	bx	lr
     b56:	bf00      	nop
     b58:	03002606 	.word	0x03002606
     b5c:	40001000 	.word	0x40001000

00000b60 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     b60:	4a36      	ldr	r2, [pc, #216]	; (c3c <_oscctrl_init_referenced_generators+0xdc>)
     b62:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     b64:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     b68:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     b6c:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     b6e:	4611      	mov	r1, r2
     b70:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     b74:	684b      	ldr	r3, [r1, #4]
     b76:	4213      	tst	r3, r2
     b78:	d1fc      	bne.n	b74 <_oscctrl_init_referenced_generators+0x14>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     b7a:	4a30      	ldr	r2, [pc, #192]	; (c3c <_oscctrl_init_referenced_generators+0xdc>)
     b7c:	6853      	ldr	r3, [r2, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     b7e:	f013 0f04 	tst.w	r3, #4
     b82:	d1fb      	bne.n	b7c <_oscctrl_init_referenced_generators+0x1c>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     b84:	4b2e      	ldr	r3, [pc, #184]	; (c40 <_oscctrl_init_referenced_generators+0xe0>)
     b86:	2200      	movs	r2, #0
     b88:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     b8a:	4a2e      	ldr	r2, [pc, #184]	; (c44 <_oscctrl_init_referenced_generators+0xe4>)
     b8c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     b8e:	461a      	mov	r2, r3
     b90:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     b94:	f013 0f10 	tst.w	r3, #16
     b98:	d1fa      	bne.n	b90 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     b9a:	2200      	movs	r2, #0
     b9c:	4b28      	ldr	r3, [pc, #160]	; (c40 <_oscctrl_init_referenced_generators+0xe0>)
     b9e:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     ba2:	461a      	mov	r2, r3
     ba4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     ba8:	f013 0f04 	tst.w	r3, #4
     bac:	d1fa      	bne.n	ba4 <_oscctrl_init_referenced_generators+0x44>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     bae:	2202      	movs	r2, #2
     bb0:	4b23      	ldr	r3, [pc, #140]	; (c40 <_oscctrl_init_referenced_generators+0xe0>)
     bb2:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     bb4:	461a      	mov	r2, r3
     bb6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     bba:	f013 0f02 	tst.w	r3, #2
     bbe:	d1fa      	bne.n	bb6 <_oscctrl_init_referenced_generators+0x56>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     bc0:	4b1f      	ldr	r3, [pc, #124]	; (c40 <_oscctrl_init_referenced_generators+0xe0>)
     bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     bc4:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     bc6:	461a      	mov	r2, r3
     bc8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     bcc:	f013 0f08 	tst.w	r3, #8
     bd0:	d1fa      	bne.n	bc8 <_oscctrl_init_referenced_generators+0x68>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     bd2:	2219      	movs	r2, #25
     bd4:	4b1a      	ldr	r3, [pc, #104]	; (c40 <_oscctrl_init_referenced_generators+0xe0>)
     bd6:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     bda:	461a      	mov	r2, r3
     bdc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     be0:	f013 0f04 	tst.w	r3, #4
     be4:	d1fa      	bne.n	bdc <_oscctrl_init_referenced_generators+0x7c>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     be6:	4b16      	ldr	r3, [pc, #88]	; (c40 <_oscctrl_init_referenced_generators+0xe0>)
     be8:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     bec:	f013 0f01 	tst.w	r3, #1
     bf0:	d01d      	beq.n	c2e <_oscctrl_init_referenced_generators+0xce>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     bf2:	4a13      	ldr	r2, [pc, #76]	; (c40 <_oscctrl_init_referenced_generators+0xe0>)
     bf4:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
     bf6:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     bfa:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     bfe:	d1f9      	bne.n	bf4 <_oscctrl_init_referenced_generators+0x94>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     c00:	4a0e      	ldr	r2, [pc, #56]	; (c3c <_oscctrl_init_referenced_generators+0xdc>)
     c02:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     c04:	2b00      	cmp	r3, #0
     c06:	d1fc      	bne.n	c02 <_oscctrl_init_referenced_generators+0xa2>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     c08:	4a0c      	ldr	r2, [pc, #48]	; (c3c <_oscctrl_init_referenced_generators+0xdc>)
     c0a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     c0c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     c10:	f043 0301 	orr.w	r3, r3, #1
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     c14:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     c16:	4611      	mov	r1, r2
     c18:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     c1c:	684b      	ldr	r3, [r1, #4]
     c1e:	4213      	tst	r3, r2
     c20:	d1fc      	bne.n	c1c <_oscctrl_init_referenced_generators+0xbc>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     c22:	4a06      	ldr	r2, [pc, #24]	; (c3c <_oscctrl_init_referenced_generators+0xdc>)
     c24:	6853      	ldr	r3, [r2, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     c26:	f013 0f04 	tst.w	r3, #4
     c2a:	d1fb      	bne.n	c24 <_oscctrl_init_referenced_generators+0xc4>
		;
#endif
	(void)hw;
}
     c2c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     c2e:	4a04      	ldr	r2, [pc, #16]	; (c40 <_oscctrl_init_referenced_generators+0xe0>)
     c30:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     c32:	f413 7f80 	tst.w	r3, #256	; 0x100
     c36:	d0fb      	beq.n	c30 <_oscctrl_init_referenced_generators+0xd0>
     c38:	e7e2      	b.n	c00 <_oscctrl_init_referenced_generators+0xa0>
     c3a:	bf00      	nop
     c3c:	40001c00 	.word	0x40001c00
     c40:	40001000 	.word	0x40001000
     c44:	0401bb80 	.word	0x0401bb80

00000c48 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     c48:	b500      	push	{lr}
     c4a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     c4c:	4b0d      	ldr	r3, [pc, #52]	; (c84 <RAMECC_Handler+0x3c>)
     c4e:	789b      	ldrb	r3, [r3, #2]
     c50:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     c52:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     c54:	9b01      	ldr	r3, [sp, #4]
     c56:	f013 0f02 	tst.w	r3, #2
     c5a:	d006      	beq.n	c6a <RAMECC_Handler+0x22>
     c5c:	4b0a      	ldr	r3, [pc, #40]	; (c88 <RAMECC_Handler+0x40>)
     c5e:	681b      	ldr	r3, [r3, #0]
     c60:	b11b      	cbz	r3, c6a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     c62:	4a08      	ldr	r2, [pc, #32]	; (c84 <RAMECC_Handler+0x3c>)
     c64:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     c66:	4798      	blx	r3
     c68:	e009      	b.n	c7e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     c6a:	9b01      	ldr	r3, [sp, #4]
     c6c:	f013 0f01 	tst.w	r3, #1
     c70:	d005      	beq.n	c7e <RAMECC_Handler+0x36>
     c72:	4b05      	ldr	r3, [pc, #20]	; (c88 <RAMECC_Handler+0x40>)
     c74:	685b      	ldr	r3, [r3, #4]
     c76:	b113      	cbz	r3, c7e <RAMECC_Handler+0x36>
     c78:	4a02      	ldr	r2, [pc, #8]	; (c84 <RAMECC_Handler+0x3c>)
     c7a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     c7c:	4798      	blx	r3
	} else {
		return;
	}
}
     c7e:	b003      	add	sp, #12
     c80:	f85d fb04 	ldr.w	pc, [sp], #4
     c84:	41020000 	.word	0x41020000
     c88:	20000638 	.word	0x20000638

00000c8c <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     c8c:	2000      	movs	r0, #0
     c8e:	4770      	bx	lr

00000c90 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     c90:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     c92:	7c83      	ldrb	r3, [r0, #18]
     c94:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     c98:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
     c9a:	f002 0107 	and.w	r1, r2, #7
     c9e:	2901      	cmp	r1, #1
     ca0:	d00b      	beq.n	cba <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ca2:	015a      	lsls	r2, r3, #5
     ca4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     ca8:	2110      	movs	r1, #16
     caa:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     cae:	015b      	lsls	r3, r3, #5
     cb0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     cb4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
     cb8:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
     cba:	f012 0f40 	tst.w	r2, #64	; 0x40
     cbe:	d00c      	beq.n	cda <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
     cc0:	7cc2      	ldrb	r2, [r0, #19]
     cc2:	f36f 1286 	bfc	r2, #6, #1
     cc6:	74c2      	strb	r2, [r0, #19]
     cc8:	015a      	lsls	r2, r3, #5
     cca:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     cce:	2180      	movs	r1, #128	; 0x80
     cd0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     cd4:	2140      	movs	r1, #64	; 0x40
     cd6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
     cda:	7cc2      	ldrb	r2, [r0, #19]
     cdc:	f36f 02c3 	bfc	r2, #3, #1
     ce0:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     ce2:	4909      	ldr	r1, [pc, #36]	; (d08 <_usb_d_dev_handle_setup+0x78>)
     ce4:	015a      	lsls	r2, r3, #5
     ce6:	188c      	adds	r4, r1, r2
     ce8:	2500      	movs	r5, #0
     cea:	72a5      	strb	r5, [r4, #10]
     cec:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     cee:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
     cf2:	246f      	movs	r4, #111	; 0x6f
     cf4:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     cf8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     cfc:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
     d00:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     d02:	7c80      	ldrb	r0, [r0, #18]
     d04:	4798      	blx	r3
     d06:	bd38      	pop	{r3, r4, r5, pc}
     d08:	20000224 	.word	0x20000224

00000d0c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     d0c:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     d0e:	2320      	movs	r3, #32
     d10:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     d14:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
     d16:	7c83      	ldrb	r3, [r0, #18]
     d18:	f003 030f 	and.w	r3, r3, #15
     d1c:	015b      	lsls	r3, r3, #5
     d1e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     d22:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     d26:	4b03      	ldr	r3, [pc, #12]	; (d34 <_usb_d_dev_handle_stall+0x28>)
     d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     d2a:	6882      	ldr	r2, [r0, #8]
     d2c:	2101      	movs	r1, #1
     d2e:	7c80      	ldrb	r0, [r0, #18]
     d30:	4798      	blx	r3
     d32:	bd08      	pop	{r3, pc}
     d34:	20000224 	.word	0x20000224

00000d38 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     d38:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     d3a:	7c84      	ldrb	r4, [r0, #18]
     d3c:	2cff      	cmp	r4, #255	; 0xff
     d3e:	d003      	beq.n	d48 <_usb_d_dev_trans_done+0x10>
     d40:	7cc3      	ldrb	r3, [r0, #19]
     d42:	f013 0f40 	tst.w	r3, #64	; 0x40
     d46:	d100      	bne.n	d4a <_usb_d_dev_trans_done+0x12>
     d48:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
     d4a:	7cc2      	ldrb	r2, [r0, #19]
     d4c:	f36f 1286 	bfc	r2, #6, #1
     d50:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     d52:	4a03      	ldr	r2, [pc, #12]	; (d60 <_usb_d_dev_trans_done+0x28>)
     d54:	6f15      	ldr	r5, [r2, #112]	; 0x70
     d56:	6882      	ldr	r2, [r0, #8]
     d58:	4620      	mov	r0, r4
     d5a:	47a8      	blx	r5
     d5c:	e7f4      	b.n	d48 <_usb_d_dev_trans_done+0x10>
     d5e:	bf00      	nop
     d60:	20000224 	.word	0x20000224

00000d64 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     d64:	b530      	push	{r4, r5, lr}
     d66:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     d68:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     d6a:	2425      	movs	r4, #37	; 0x25
     d6c:	f88d 4004 	strb.w	r4, [sp, #4]
     d70:	244a      	movs	r4, #74	; 0x4a
     d72:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     d76:	2bff      	cmp	r3, #255	; 0xff
     d78:	d01e      	beq.n	db8 <_usb_d_dev_trans_stop+0x54>
     d7a:	7cc4      	ldrb	r4, [r0, #19]
     d7c:	f014 0f40 	tst.w	r4, #64	; 0x40
     d80:	d01a      	beq.n	db8 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     d82:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
     d86:	b1c9      	cbz	r1, dbc <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     d88:	0163      	lsls	r3, r4, #5
     d8a:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     d8e:	2580      	movs	r5, #128	; 0x80
     d90:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
     d94:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     d96:	a902      	add	r1, sp, #8
     d98:	440b      	add	r3, r1
     d9a:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     d9e:	0163      	lsls	r3, r4, #5
     da0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     da4:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     da8:	0163      	lsls	r3, r4, #5
     daa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     dae:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     db2:	4611      	mov	r1, r2
     db4:	4b05      	ldr	r3, [pc, #20]	; (dcc <_usb_d_dev_trans_stop+0x68>)
     db6:	4798      	blx	r3
}
     db8:	b003      	add	sp, #12
     dba:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     dbc:	0163      	lsls	r3, r4, #5
     dbe:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     dc2:	2540      	movs	r5, #64	; 0x40
     dc4:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
     dc8:	e7e4      	b.n	d94 <_usb_d_dev_trans_stop+0x30>
     dca:	bf00      	nop
     dcc:	00000d39 	.word	0x00000d39

00000dd0 <_usb_d_dev_handle_trfail>:
{
     dd0:	b530      	push	{r4, r5, lr}
     dd2:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     dd4:	7c83      	ldrb	r3, [r0, #18]
     dd6:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     dda:	2204      	movs	r2, #4
     ddc:	f88d 2004 	strb.w	r2, [sp, #4]
     de0:	2208      	movs	r2, #8
     de2:	f88d 2005 	strb.w	r2, [sp, #5]
     de6:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
     de8:	460c      	mov	r4, r1
     dea:	b391      	cbz	r1, e52 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     dec:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
     df0:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     df4:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
     df8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
     dfc:	4a32      	ldr	r2, [pc, #200]	; (ec8 <_usb_d_dev_handle_trfail+0xf8>)
     dfe:	440a      	add	r2, r1
     e00:	7a91      	ldrb	r1, [r2, #10]
     e02:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     e04:	2d02      	cmp	r5, #2
     e06:	d02c      	beq.n	e62 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
     e08:	f011 0f02 	tst.w	r1, #2
     e0c:	d045      	beq.n	e9a <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     e0e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     e10:	7a91      	ldrb	r1, [r2, #10]
     e12:	f36f 0141 	bfc	r1, #1, #1
     e16:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     e18:	aa02      	add	r2, sp, #8
     e1a:	4422      	add	r2, r4
     e1c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     e20:	015a      	lsls	r2, r3, #5
     e22:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     e26:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     e2a:	015b      	lsls	r3, r3, #5
     e2c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     e30:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     e34:	f005 0307 	and.w	r3, r5, #7
     e38:	2b01      	cmp	r3, #1
     e3a:	d143      	bne.n	ec4 <_usb_d_dev_handle_trfail+0xf4>
     e3c:	7cc3      	ldrb	r3, [r0, #19]
     e3e:	f013 0f40 	tst.w	r3, #64	; 0x40
     e42:	d03f      	beq.n	ec4 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     e44:	09d9      	lsrs	r1, r3, #7
     e46:	428c      	cmp	r4, r1
     e48:	d03c      	beq.n	ec4 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     e4a:	2200      	movs	r2, #0
     e4c:	4b1f      	ldr	r3, [pc, #124]	; (ecc <_usb_d_dev_handle_trfail+0xfc>)
     e4e:	4798      	blx	r3
     e50:	e038      	b.n	ec4 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     e52:	0159      	lsls	r1, r3, #5
     e54:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
     e58:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     e5c:	f005 0507 	and.w	r5, r5, #7
     e60:	e7ca      	b.n	df8 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     e62:	f011 0f01 	tst.w	r1, #1
     e66:	d0cf      	beq.n	e08 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     e68:	7a91      	ldrb	r1, [r2, #10]
     e6a:	f36f 0100 	bfc	r1, #0, #1
     e6e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     e70:	aa02      	add	r2, sp, #8
     e72:	4422      	add	r2, r4
     e74:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     e78:	015a      	lsls	r2, r3, #5
     e7a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     e7e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     e82:	015b      	lsls	r3, r3, #5
     e84:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     e88:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     e8c:	2204      	movs	r2, #4
     e8e:	1c21      	adds	r1, r4, #0
     e90:	bf18      	it	ne
     e92:	2101      	movne	r1, #1
     e94:	4b0d      	ldr	r3, [pc, #52]	; (ecc <_usb_d_dev_handle_trfail+0xfc>)
     e96:	4798      	blx	r3
     e98:	e014      	b.n	ec4 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
     e9a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
     e9e:	4a0a      	ldr	r2, [pc, #40]	; (ec8 <_usb_d_dev_handle_trfail+0xf8>)
     ea0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
     ea4:	2100      	movs	r1, #0
     ea6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     ea8:	aa02      	add	r2, sp, #8
     eaa:	4414      	add	r4, r2
     eac:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     eb0:	015a      	lsls	r2, r3, #5
     eb2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     eb6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     eba:	015b      	lsls	r3, r3, #5
     ebc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     ec0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
     ec4:	b003      	add	sp, #12
     ec6:	bd30      	pop	{r4, r5, pc}
     ec8:	20000224 	.word	0x20000224
     ecc:	00000d65 	.word	0x00000d65

00000ed0 <_usb_d_dev_reset_epts>:
{
     ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     ed4:	4d0c      	ldr	r5, [pc, #48]	; (f08 <_usb_d_dev_reset_epts+0x38>)
     ed6:	f105 0474 	add.w	r4, r5, #116	; 0x74
     eda:	f505 7524 	add.w	r5, r5, #656	; 0x290
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     ede:	f04f 0803 	mov.w	r8, #3
     ee2:	4f0a      	ldr	r7, [pc, #40]	; (f0c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
     ee4:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     ee6:	4641      	mov	r1, r8
     ee8:	4620      	mov	r0, r4
     eea:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
     eec:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
     eee:	2300      	movs	r3, #0
     ef0:	74e3      	strb	r3, [r4, #19]
     ef2:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
     ef4:	42ac      	cmp	r4, r5
     ef6:	d1f6      	bne.n	ee6 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
     ef8:	2260      	movs	r2, #96	; 0x60
     efa:	4619      	mov	r1, r3
     efc:	4802      	ldr	r0, [pc, #8]	; (f08 <_usb_d_dev_reset_epts+0x38>)
     efe:	4b04      	ldr	r3, [pc, #16]	; (f10 <_usb_d_dev_reset_epts+0x40>)
     f00:	4798      	blx	r3
     f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f06:	bf00      	nop
     f08:	20000224 	.word	0x20000224
     f0c:	00000d39 	.word	0x00000d39
     f10:	00002bc3 	.word	0x00002bc3

00000f14 <_usb_d_dev_in_next>:
{
     f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f18:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
     f1a:	7c84      	ldrb	r4, [r0, #18]
     f1c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     f20:	4688      	mov	r8, r1
     f22:	2900      	cmp	r1, #0
     f24:	f000 809f 	beq.w	1066 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     f28:	4b58      	ldr	r3, [pc, #352]	; (108c <_usb_d_dev_in_next+0x178>)
     f2a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     f2e:	6958      	ldr	r0, [r3, #20]
     f30:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     f34:	8a2b      	ldrh	r3, [r5, #16]
     f36:	f240 32ff 	movw	r2, #1023	; 0x3ff
     f3a:	4293      	cmp	r3, r2
     f3c:	f000 808d 	beq.w	105a <_usb_d_dev_in_next+0x146>
     f40:	3b01      	subs	r3, #1
     f42:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     f44:	7cef      	ldrb	r7, [r5, #19]
     f46:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
     f4a:	f1b8 0f00 	cmp.w	r8, #0
     f4e:	d005      	beq.n	f5c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     f50:	0162      	lsls	r2, r4, #5
     f52:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     f56:	2302      	movs	r3, #2
     f58:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
     f5c:	68a9      	ldr	r1, [r5, #8]
     f5e:	eb0e 0301 	add.w	r3, lr, r1
     f62:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
     f64:	686e      	ldr	r6, [r5, #4]
     f66:	42b3      	cmp	r3, r6
     f68:	d23f      	bcs.n	fea <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
     f6a:	1af6      	subs	r6, r6, r3
     f6c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
     f6e:	7cea      	ldrb	r2, [r5, #19]
     f70:	f012 0f20 	tst.w	r2, #32
     f74:	d02d      	beq.n	fd2 <_usb_d_dev_in_next+0xbe>
     f76:	8a2a      	ldrh	r2, [r5, #16]
     f78:	4296      	cmp	r6, r2
     f7a:	bf28      	it	cs
     f7c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
     f7e:	6829      	ldr	r1, [r5, #0]
     f80:	4632      	mov	r2, r6
     f82:	4419      	add	r1, r3
     f84:	68e8      	ldr	r0, [r5, #12]
     f86:	4b42      	ldr	r3, [pc, #264]	; (1090 <_usb_d_dev_in_next+0x17c>)
     f88:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
     f8a:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
     f8c:	4b3f      	ldr	r3, [pc, #252]	; (108c <_usb_d_dev_in_next+0x178>)
     f8e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     f92:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     f94:	4b3d      	ldr	r3, [pc, #244]	; (108c <_usb_d_dev_in_next+0x178>)
     f96:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     f9a:	695a      	ldr	r2, [r3, #20]
     f9c:	f366 020d 	bfi	r2, r6, #0, #14
     fa0:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     fa2:	695a      	ldr	r2, [r3, #20]
     fa4:	f36f 329b 	bfc	r2, #14, #14
     fa8:	615a      	str	r2, [r3, #20]
	if (!isr) {
     faa:	f1b8 0f00 	cmp.w	r8, #0
     fae:	d108      	bne.n	fc2 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
     fb0:	2f01      	cmp	r7, #1
     fb2:	bf0c      	ite	eq
     fb4:	224e      	moveq	r2, #78	; 0x4e
     fb6:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     fb8:	0163      	lsls	r3, r4, #5
     fba:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
     fbe:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     fc2:	0164      	lsls	r4, r4, #5
     fc4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
     fc8:	2380      	movs	r3, #128	; 0x80
     fca:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
     fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fd2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
     fd6:	bf28      	it	cs
     fd8:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
     fdc:	6829      	ldr	r1, [r5, #0]
     fde:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
     fe0:	4a2a      	ldr	r2, [pc, #168]	; (108c <_usb_d_dev_in_next+0x178>)
     fe2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
     fe6:	6113      	str	r3, [r2, #16]
     fe8:	e7d4      	b.n	f94 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
     fea:	7ceb      	ldrb	r3, [r5, #19]
     fec:	f013 0f10 	tst.w	r3, #16
     ff0:	d00f      	beq.n	1012 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
     ff2:	7ceb      	ldrb	r3, [r5, #19]
     ff4:	f36f 1304 	bfc	r3, #4, #1
     ff8:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     ffa:	4b24      	ldr	r3, [pc, #144]	; (108c <_usb_d_dev_in_next+0x178>)
     ffc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1000:	695a      	ldr	r2, [r3, #20]
    1002:	f36f 020d 	bfc	r2, #0, #14
    1006:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1008:	695a      	ldr	r2, [r3, #20]
    100a:	f36f 329b 	bfc	r2, #14, #14
    100e:	615a      	str	r2, [r3, #20]
    1010:	e7cb      	b.n	faa <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    1012:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1014:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1018:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    101c:	bf0c      	ite	eq
    101e:	234b      	moveq	r3, #75	; 0x4b
    1020:	234a      	movne	r3, #74	; 0x4a
    1022:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    1026:	8a2a      	ldrh	r2, [r5, #16]
    1028:	ea00 030e 	and.w	r3, r0, lr
    102c:	429a      	cmp	r2, r3
    102e:	d005      	beq.n	103c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1030:	2100      	movs	r1, #0
    1032:	4628      	mov	r0, r5
    1034:	4b17      	ldr	r3, [pc, #92]	; (1094 <_usb_d_dev_in_next+0x180>)
    1036:	4798      	blx	r3
	return;
    1038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    103c:	7ceb      	ldrb	r3, [r5, #19]
    103e:	f36f 1386 	bfc	r3, #6, #1
    1042:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1044:	4b11      	ldr	r3, [pc, #68]	; (108c <_usb_d_dev_in_next+0x178>)
    1046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1048:	68a9      	ldr	r1, [r5, #8]
    104a:	7ca8      	ldrb	r0, [r5, #18]
    104c:	4798      	blx	r3
    104e:	b9d0      	cbnz	r0, 1086 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    1050:	7ceb      	ldrb	r3, [r5, #19]
    1052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1056:	74eb      	strb	r3, [r5, #19]
    1058:	e7ea      	b.n	1030 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    105a:	7cef      	ldrb	r7, [r5, #19]
    105c:	f007 0707 	and.w	r7, r7, #7
    1060:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1064:	e774      	b.n	f50 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1066:	8a03      	ldrh	r3, [r0, #16]
    1068:	f240 32ff 	movw	r2, #1023	; 0x3ff
    106c:	4293      	cmp	r3, r2
    106e:	d107      	bne.n	1080 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1070:	7cef      	ldrb	r7, [r5, #19]
    1072:	f007 0707 	and.w	r7, r7, #7
    1076:	f04f 0e00 	mov.w	lr, #0
    107a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    107e:	e76d      	b.n	f5c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1080:	f04f 0e00 	mov.w	lr, #0
    1084:	e75c      	b.n	f40 <_usb_d_dev_in_next+0x2c>
    1086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    108a:	bf00      	nop
    108c:	20000224 	.word	0x20000224
    1090:	00002bad 	.word	0x00002bad
    1094:	00000d39 	.word	0x00000d39

00001098 <_usb_d_dev_out_next>:
{
    1098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    109c:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    109e:	7c85      	ldrb	r5, [r0, #18]
    10a0:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    10a4:	4689      	mov	r9, r1
    10a6:	2900      	cmp	r1, #0
    10a8:	d056      	beq.n	1158 <_usb_d_dev_out_next+0xc0>
    10aa:	4b74      	ldr	r3, [pc, #464]	; (127c <_usb_d_dev_out_next+0x1e4>)
    10ac:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    10b0:	685a      	ldr	r2, [r3, #4]
    10b2:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    10b6:	685f      	ldr	r7, [r3, #4]
    10b8:	f3c7 070d 	ubfx	r7, r7, #0, #14
    10bc:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    10be:	8a06      	ldrh	r6, [r0, #16]
    10c0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    10c4:	429e      	cmp	r6, r3
    10c6:	f000 80ba 	beq.w	123e <_usb_d_dev_out_next+0x1a6>
    10ca:	3e01      	subs	r6, #1
    10cc:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    10ce:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    10d2:	f894 8013 	ldrb.w	r8, [r4, #19]
    10d6:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    10da:	f1b9 0f00 	cmp.w	r9, #0
    10de:	d005      	beq.n	10ec <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    10e0:	016b      	lsls	r3, r5, #5
    10e2:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    10e6:	2201      	movs	r2, #1
    10e8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    10ec:	7ce3      	ldrb	r3, [r4, #19]
    10ee:	f013 0f20 	tst.w	r3, #32
    10f2:	d00d      	beq.n	1110 <_usb_d_dev_out_next+0x78>
    10f4:	6862      	ldr	r2, [r4, #4]
    10f6:	2a00      	cmp	r2, #0
    10f8:	d037      	beq.n	116a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    10fa:	68a0      	ldr	r0, [r4, #8]
    10fc:	1a12      	subs	r2, r2, r0
    10fe:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1100:	6823      	ldr	r3, [r4, #0]
    1102:	42ba      	cmp	r2, r7
    1104:	bf28      	it	cs
    1106:	463a      	movcs	r2, r7
    1108:	68e1      	ldr	r1, [r4, #12]
    110a:	4418      	add	r0, r3
    110c:	4b5c      	ldr	r3, [pc, #368]	; (1280 <_usb_d_dev_out_next+0x1e8>)
    110e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1110:	6863      	ldr	r3, [r4, #4]
    1112:	b353      	cbz	r3, 116a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    1114:	f1b9 0f00 	cmp.w	r9, #0
    1118:	d040      	beq.n	119c <_usb_d_dev_out_next+0x104>
    111a:	8a22      	ldrh	r2, [r4, #16]
    111c:	42ba      	cmp	r2, r7
    111e:	d93d      	bls.n	119c <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    1120:	7ce3      	ldrb	r3, [r4, #19]
    1122:	f36f 1304 	bfc	r3, #4, #1
    1126:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1128:	68a3      	ldr	r3, [r4, #8]
    112a:	445b      	add	r3, fp
    112c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    112e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1132:	ea4f 1345 	mov.w	r3, r5, lsl #5
    1136:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    113a:	bf0c      	ite	eq
    113c:	222d      	moveq	r2, #45	; 0x2d
    113e:	2225      	movne	r2, #37	; 0x25
    1140:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    1144:	b915      	cbnz	r5, 114c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1146:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    1148:	4b4c      	ldr	r3, [pc, #304]	; (127c <_usb_d_dev_out_next+0x1e4>)
    114a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    114c:	2100      	movs	r1, #0
    114e:	4620      	mov	r0, r4
    1150:	4b4c      	ldr	r3, [pc, #304]	; (1284 <_usb_d_dev_out_next+0x1ec>)
    1152:	4798      	blx	r3
	return;
    1154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1158:	8a06      	ldrh	r6, [r0, #16]
    115a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    115e:	429e      	cmp	r6, r3
    1160:	d07b      	beq.n	125a <_usb_d_dev_out_next+0x1c2>
    1162:	f04f 0b00 	mov.w	fp, #0
    1166:	46da      	mov	sl, fp
    1168:	e7af      	b.n	10ca <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    116a:	7ce3      	ldrb	r3, [r4, #19]
    116c:	f013 0f10 	tst.w	r3, #16
    1170:	d06c      	beq.n	124c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    1172:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1174:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1178:	f043 0320 	orr.w	r3, r3, #32
    117c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    117e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    1180:	493e      	ldr	r1, [pc, #248]	; (127c <_usb_d_dev_out_next+0x1e4>)
    1182:	016a      	lsls	r2, r5, #5
    1184:	188b      	adds	r3, r1, r2
    1186:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1188:	8a21      	ldrh	r1, [r4, #16]
    118a:	685a      	ldr	r2, [r3, #4]
    118c:	f361 329b 	bfi	r2, r1, #14, #14
    1190:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1192:	685a      	ldr	r2, [r3, #4]
    1194:	f36f 020d 	bfc	r2, #0, #14
    1198:	605a      	str	r2, [r3, #4]
    119a:	e01d      	b.n	11d8 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    119c:	68a2      	ldr	r2, [r4, #8]
    119e:	4452      	add	r2, sl
    11a0:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    11a2:	4293      	cmp	r3, r2
    11a4:	d9c3      	bls.n	112e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    11a6:	1a9b      	subs	r3, r3, r2
    11a8:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    11aa:	7ce1      	ldrb	r1, [r4, #19]
    11ac:	f011 0f20 	tst.w	r1, #32
    11b0:	d026      	beq.n	1200 <_usb_d_dev_out_next+0x168>
    11b2:	8a22      	ldrh	r2, [r4, #16]
    11b4:	4293      	cmp	r3, r2
    11b6:	bf28      	it	cs
    11b8:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    11ba:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    11bc:	016a      	lsls	r2, r5, #5
    11be:	492f      	ldr	r1, [pc, #188]	; (127c <_usb_d_dev_out_next+0x1e4>)
    11c0:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    11c2:	4a2e      	ldr	r2, [pc, #184]	; (127c <_usb_d_dev_out_next+0x1e4>)
    11c4:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    11c8:	6851      	ldr	r1, [r2, #4]
    11ca:	f363 319b 	bfi	r1, r3, #14, #14
    11ce:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    11d0:	6853      	ldr	r3, [r2, #4]
    11d2:	f36f 030d 	bfc	r3, #0, #14
    11d6:	6053      	str	r3, [r2, #4]
	if (!isr) {
    11d8:	f1b9 0f00 	cmp.w	r9, #0
    11dc:	d108      	bne.n	11f0 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    11de:	f1b8 0f01 	cmp.w	r8, #1
    11e2:	d025      	beq.n	1230 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    11e4:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    11e6:	016b      	lsls	r3, r5, #5
    11e8:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    11ec:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    11f0:	016d      	lsls	r5, r5, #5
    11f2:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    11f6:	2340      	movs	r3, #64	; 0x40
    11f8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    11fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    1200:	8a21      	ldrh	r1, [r4, #16]
    1202:	428b      	cmp	r3, r1
    1204:	d90a      	bls.n	121c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    120a:	d80e      	bhi.n	122a <_usb_d_dev_out_next+0x192>
    120c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1210:	6821      	ldr	r1, [r4, #0]
    1212:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    1214:	0169      	lsls	r1, r5, #5
    1216:	4819      	ldr	r0, [pc, #100]	; (127c <_usb_d_dev_out_next+0x1e4>)
    1218:	5042      	str	r2, [r0, r1]
    121a:	e7d2      	b.n	11c2 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    121c:	428b      	cmp	r3, r1
    121e:	d2f7      	bcs.n	1210 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    1220:	7ce1      	ldrb	r1, [r4, #19]
    1222:	f041 0120 	orr.w	r1, r1, #32
    1226:	74e1      	strb	r1, [r4, #19]
    1228:	e7f2      	b.n	1210 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    122e:	e7ef      	b.n	1210 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    1230:	4b12      	ldr	r3, [pc, #72]	; (127c <_usb_d_dev_out_next+0x1e4>)
    1232:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1236:	2200      	movs	r2, #0
    1238:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    123a:	222d      	movs	r2, #45	; 0x2d
    123c:	e7d3      	b.n	11e6 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    123e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1242:	f890 8013 	ldrb.w	r8, [r0, #19]
    1246:	f008 0807 	and.w	r8, r8, #7
    124a:	e749      	b.n	10e0 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    124c:	f1b9 0f00 	cmp.w	r9, #0
    1250:	d10b      	bne.n	126a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    1252:	68a3      	ldr	r3, [r4, #8]
    1254:	4453      	add	r3, sl
    1256:	60a3      	str	r3, [r4, #8]
    1258:	e769      	b.n	112e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    125a:	f890 8013 	ldrb.w	r8, [r0, #19]
    125e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    1262:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1264:	46bb      	mov	fp, r7
    1266:	46ba      	mov	sl, r7
    1268:	e740      	b.n	10ec <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    126a:	8a23      	ldrh	r3, [r4, #16]
    126c:	42bb      	cmp	r3, r7
    126e:	f63f af57 	bhi.w	1120 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    1272:	68a3      	ldr	r3, [r4, #8]
    1274:	4453      	add	r3, sl
    1276:	60a3      	str	r3, [r4, #8]
    1278:	e759      	b.n	112e <_usb_d_dev_out_next+0x96>
    127a:	bf00      	nop
    127c:	20000224 	.word	0x20000224
    1280:	00002bad 	.word	0x00002bad
    1284:	00000d39 	.word	0x00000d39

00001288 <_usb_d_dev_handler>:
{
    1288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    128c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1290:	8c1e      	ldrh	r6, [r3, #32]
    1292:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1294:	b146      	cbz	r6, 12a8 <_usb_d_dev_handler+0x20>
    1296:	4d91      	ldr	r5, [pc, #580]	; (14dc <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    1298:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    129a:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    129e:	f8df 9258 	ldr.w	r9, [pc, #600]	; 14f8 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    12a2:	f8df 8258 	ldr.w	r8, [pc, #600]	; 14fc <_usb_d_dev_handler+0x274>
    12a6:	e0d3      	b.n	1450 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    12a8:	8b9a      	ldrh	r2, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    12aa:	8b1b      	ldrh	r3, [r3, #24]
    12ac:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    12ae:	4013      	ands	r3, r2
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    12b0:	f013 0f04 	tst.w	r3, #4
    12b4:	d11d      	bne.n	12f2 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    12b6:	f413 7f00 	tst.w	r3, #512	; 0x200
    12ba:	d123      	bne.n	1304 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    12bc:	f013 0f80 	tst.w	r3, #128	; 0x80
    12c0:	d147      	bne.n	1352 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    12c2:	f013 0f70 	tst.w	r3, #112	; 0x70
    12c6:	d14f      	bne.n	1368 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    12c8:	f013 0f08 	tst.w	r3, #8
    12cc:	d16e      	bne.n	13ac <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    12ce:	f013 0f01 	tst.w	r3, #1
    12d2:	d0e0      	beq.n	1296 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    12d4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    12d8:	f240 2201 	movw	r2, #513	; 0x201
    12dc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    12de:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    12e0:	2270      	movs	r2, #112	; 0x70
    12e2:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    12e4:	4b7e      	ldr	r3, [pc, #504]	; (14e0 <_usb_d_dev_handler+0x258>)
    12e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    12e8:	2100      	movs	r1, #0
    12ea:	2004      	movs	r0, #4
    12ec:	4798      	blx	r3
    12ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    12f2:	2204      	movs	r2, #4
    12f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    12f8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    12fa:	4b79      	ldr	r3, [pc, #484]	; (14e0 <_usb_d_dev_handler+0x258>)
    12fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    12fe:	4798      	blx	r3
    1300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1304:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1308:	f240 2201 	movw	r2, #513	; 0x201
    130c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    130e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1310:	2270      	movs	r2, #112	; 0x70
    1312:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1314:	4b72      	ldr	r3, [pc, #456]	; (14e0 <_usb_d_dev_handler+0x258>)
    1316:	891b      	ldrh	r3, [r3, #8]
    1318:	f003 030f 	and.w	r3, r3, #15
    131c:	2b03      	cmp	r3, #3
    131e:	d00e      	beq.n	133e <_usb_d_dev_handler+0xb6>
    1320:	4b6f      	ldr	r3, [pc, #444]	; (14e0 <_usb_d_dev_handler+0x258>)
    1322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1324:	f003 030f 	and.w	r3, r3, #15
    1328:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    132a:	bf08      	it	eq
    132c:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    132e:	d007      	beq.n	1340 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    1330:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1332:	4b6b      	ldr	r3, [pc, #428]	; (14e0 <_usb_d_dev_handler+0x258>)
    1334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1336:	2003      	movs	r0, #3
    1338:	4798      	blx	r3
    133a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    133e:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1340:	4b67      	ldr	r3, [pc, #412]	; (14e0 <_usb_d_dev_handler+0x258>)
    1342:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    1346:	8919      	ldrh	r1, [r3, #8]
    1348:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    134c:	2200      	movs	r2, #0
    134e:	811a      	strh	r2, [r3, #8]
    1350:	e7ef      	b.n	1332 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1352:	2280      	movs	r2, #128	; 0x80
    1354:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1358:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    135a:	4b61      	ldr	r3, [pc, #388]	; (14e0 <_usb_d_dev_handler+0x258>)
    135c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    135e:	2100      	movs	r1, #0
    1360:	2005      	movs	r0, #5
    1362:	4798      	blx	r3
    1364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1368:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    136c:	2270      	movs	r2, #112	; 0x70
    136e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1370:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1372:	f240 2201 	movw	r2, #513	; 0x201
    1376:	831a      	strh	r2, [r3, #24]
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1378:	4b5a      	ldr	r3, [pc, #360]	; (14e4 <_usb_d_dev_handler+0x25c>)
    137a:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    137e:	f013 0f01 	tst.w	r3, #1
    1382:	d00d      	beq.n	13a0 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1384:	4a57      	ldr	r2, [pc, #348]	; (14e4 <_usb_d_dev_handler+0x25c>)
    1386:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1388:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    138c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1390:	d1f9      	bne.n	1386 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1392:	4b53      	ldr	r3, [pc, #332]	; (14e0 <_usb_d_dev_handler+0x258>)
    1394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1396:	2100      	movs	r1, #0
    1398:	2002      	movs	r0, #2
    139a:	4798      	blx	r3
    139c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    13a0:	4a50      	ldr	r2, [pc, #320]	; (14e4 <_usb_d_dev_handler+0x25c>)
    13a2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    13a4:	f413 7f80 	tst.w	r3, #256	; 0x100
    13a8:	d0fb      	beq.n	13a2 <_usb_d_dev_handler+0x11a>
    13aa:	e7f2      	b.n	1392 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    13ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    13b0:	2400      	movs	r4, #0
    13b2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    13b6:	2208      	movs	r2, #8
    13b8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    13ba:	2270      	movs	r2, #112	; 0x70
    13bc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    13be:	f240 2201 	movw	r2, #513	; 0x201
    13c2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    13c4:	4b48      	ldr	r3, [pc, #288]	; (14e8 <_usb_d_dev_handler+0x260>)
    13c6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    13c8:	4b45      	ldr	r3, [pc, #276]	; (14e0 <_usb_d_dev_handler+0x258>)
    13ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    13cc:	4621      	mov	r1, r4
    13ce:	2001      	movs	r0, #1
    13d0:	4798      	blx	r3
    13d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    13d6:	f011 0f10 	tst.w	r1, #16
    13da:	d109      	bne.n	13f0 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    13dc:	f011 0f40 	tst.w	r1, #64	; 0x40
    13e0:	d108      	bne.n	13f4 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    13e2:	f011 0f20 	tst.w	r1, #32
    13e6:	d02f      	beq.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    13e8:	2100      	movs	r1, #0
    13ea:	4b40      	ldr	r3, [pc, #256]	; (14ec <_usb_d_dev_handler+0x264>)
    13ec:	4798      	blx	r3
    13ee:	e02b      	b.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    13f0:	47c8      	blx	r9
    13f2:	e029      	b.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    13f4:	2101      	movs	r1, #1
    13f6:	4b3d      	ldr	r3, [pc, #244]	; (14ec <_usb_d_dev_handler+0x264>)
    13f8:	4798      	blx	r3
    13fa:	e025      	b.n	1448 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    13fc:	f011 0f40 	tst.w	r1, #64	; 0x40
    1400:	d111      	bne.n	1426 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1402:	f011 0f08 	tst.w	r1, #8
    1406:	d112      	bne.n	142e <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1408:	f011 0f02 	tst.w	r1, #2
    140c:	d112      	bne.n	1434 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    140e:	f003 0307 	and.w	r3, r3, #7
    1412:	2b01      	cmp	r3, #1
    1414:	d118      	bne.n	1448 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1416:	f011 0f04 	tst.w	r1, #4
    141a:	d10f      	bne.n	143c <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    141c:	f011 0f10 	tst.w	r1, #16
    1420:	d012      	beq.n	1448 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1422:	47c8      	blx	r9
    1424:	e010      	b.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1426:	2101      	movs	r1, #1
    1428:	4b30      	ldr	r3, [pc, #192]	; (14ec <_usb_d_dev_handler+0x264>)
    142a:	4798      	blx	r3
    142c:	e00c      	b.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    142e:	2101      	movs	r1, #1
    1430:	47c0      	blx	r8
    1432:	e009      	b.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    1434:	2101      	movs	r1, #1
    1436:	4b2e      	ldr	r3, [pc, #184]	; (14f0 <_usb_d_dev_handler+0x268>)
    1438:	4798      	blx	r3
    143a:	e005      	b.n	1448 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    143c:	2100      	movs	r1, #0
    143e:	47c0      	blx	r8
    1440:	e002      	b.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1442:	2100      	movs	r1, #0
    1444:	4b29      	ldr	r3, [pc, #164]	; (14ec <_usb_d_dev_handler+0x264>)
    1446:	4798      	blx	r3
    1448:	3401      	adds	r4, #1
    144a:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    144c:	2c1b      	cmp	r4, #27
    144e:	d042      	beq.n	14d6 <_usb_d_dev_handler+0x24e>
    1450:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    1452:	7cab      	ldrb	r3, [r5, #18]
    1454:	2bff      	cmp	r3, #255	; 0xff
    1456:	d0f7      	beq.n	1448 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    1458:	f003 030f 	and.w	r3, r3, #15
    145c:	2101      	movs	r1, #1
    145e:	4099      	lsls	r1, r3
    1460:	4231      	tst	r1, r6
    1462:	d0f1      	beq.n	1448 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1464:	0159      	lsls	r1, r3, #5
    1466:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    146a:	f501 7180 	add.w	r1, r1, #256	; 0x100
    146e:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1470:	015b      	lsls	r3, r3, #5
    1472:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1476:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    147a:	4019      	ands	r1, r3
    147c:	d0e4      	beq.n	1448 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    147e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1482:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    1486:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    148a:	f003 0247 	and.w	r2, r3, #71	; 0x47
    148e:	2a01      	cmp	r2, #1
    1490:	d0a1      	beq.n	13d6 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1492:	f013 0f80 	tst.w	r3, #128	; 0x80
    1496:	d1b1      	bne.n	13fc <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1498:	f011 0f20 	tst.w	r1, #32
    149c:	d1d1      	bne.n	1442 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    149e:	f011 0f04 	tst.w	r1, #4
    14a2:	d10e      	bne.n	14c2 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    14a4:	f011 0f01 	tst.w	r1, #1
    14a8:	d10e      	bne.n	14c8 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    14aa:	f003 0307 	and.w	r3, r3, #7
    14ae:	2b01      	cmp	r3, #1
    14b0:	d1ca      	bne.n	1448 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    14b2:	f011 0f08 	tst.w	r1, #8
    14b6:	d10b      	bne.n	14d0 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    14b8:	f011 0f10 	tst.w	r1, #16
    14bc:	d0c4      	beq.n	1448 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    14be:	47c8      	blx	r9
    14c0:	e7c2      	b.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    14c2:	2100      	movs	r1, #0
    14c4:	47c0      	blx	r8
    14c6:	e7bf      	b.n	1448 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    14c8:	2101      	movs	r1, #1
    14ca:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <_usb_d_dev_handler+0x26c>)
    14cc:	4798      	blx	r3
    14ce:	e7bb      	b.n	1448 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    14d0:	2101      	movs	r1, #1
    14d2:	47c0      	blx	r8
    14d4:	e7b8      	b.n	1448 <_usb_d_dev_handler+0x1c0>
    14d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    14da:	bf00      	nop
    14dc:	20000298 	.word	0x20000298
    14e0:	20000224 	.word	0x20000224
    14e4:	40001000 	.word	0x40001000
    14e8:	00000ed1 	.word	0x00000ed1
    14ec:	00000d0d 	.word	0x00000d0d
    14f0:	00000f15 	.word	0x00000f15
    14f4:	00001099 	.word	0x00001099
    14f8:	00000c91 	.word	0x00000c91
    14fc:	00000dd1 	.word	0x00000dd1

00001500 <_usb_d_dev_init>:
{
    1500:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1502:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1506:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1508:	f013 0f01 	tst.w	r3, #1
    150c:	d124      	bne.n	1558 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    150e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1512:	7893      	ldrb	r3, [r2, #2]
    1514:	f013 0f03 	tst.w	r3, #3
    1518:	d1fb      	bne.n	1512 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    151a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    151e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1520:	f013 0f02 	tst.w	r3, #2
    1524:	d00f      	beq.n	1546 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1526:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    152a:	7813      	ldrb	r3, [r2, #0]
    152c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1530:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1532:	7893      	ldrb	r3, [r2, #2]
    1534:	f013 0f03 	tst.w	r3, #3
    1538:	d1fb      	bne.n	1532 <_usb_d_dev_init+0x32>
    153a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    153e:	7893      	ldrb	r3, [r2, #2]
    1540:	f013 0f02 	tst.w	r3, #2
    1544:	d1fb      	bne.n	153e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1546:	2201      	movs	r2, #1
    1548:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    154c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    154e:	461a      	mov	r2, r3
    1550:	7893      	ldrb	r3, [r2, #2]
    1552:	f013 0f03 	tst.w	r3, #3
    1556:	d1fb      	bne.n	1550 <_usb_d_dev_init+0x50>
    1558:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    155c:	7893      	ldrb	r3, [r2, #2]
    155e:	f013 0f01 	tst.w	r3, #1
    1562:	d1fb      	bne.n	155c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1564:	4b21      	ldr	r3, [pc, #132]	; (15ec <_usb_d_dev_init+0xec>)
    1566:	4a22      	ldr	r2, [pc, #136]	; (15f0 <_usb_d_dev_init+0xf0>)
    1568:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    156a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    156c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    156e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1570:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1572:	4b20      	ldr	r3, [pc, #128]	; (15f4 <_usb_d_dev_init+0xf4>)
    1574:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1576:	4b20      	ldr	r3, [pc, #128]	; (15f8 <_usb_d_dev_init+0xf8>)
    1578:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    157a:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    157e:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1582:	f011 011f 	ands.w	r1, r1, #31
    1586:	d02b      	beq.n	15e0 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    1588:	291f      	cmp	r1, #31
    158a:	bf08      	it	eq
    158c:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    158e:	b34b      	cbz	r3, 15e4 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    1590:	2b1f      	cmp	r3, #31
    1592:	bf08      	it	eq
    1594:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    1596:	b33a      	cbz	r2, 15e8 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    1598:	2a07      	cmp	r2, #7
    159a:	bf08      	it	eq
    159c:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    159e:	f003 031f 	and.w	r3, r3, #31
    15a2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    15a6:	0312      	lsls	r2, r2, #12
    15a8:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    15ac:	4313      	orrs	r3, r2
    15ae:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    15b2:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    15b4:	78d3      	ldrb	r3, [r2, #3]
    15b6:	f043 0303 	orr.w	r3, r3, #3
    15ba:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    15bc:	78d3      	ldrb	r3, [r2, #3]
    15be:	f043 030c 	orr.w	r3, r3, #12
    15c2:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    15c4:	2304      	movs	r3, #4
    15c6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    15c8:	7893      	ldrb	r3, [r2, #2]
    15ca:	f013 0f03 	tst.w	r3, #3
    15ce:	d1fb      	bne.n	15c8 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    15d0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    15d4:	4a05      	ldr	r2, [pc, #20]	; (15ec <_usb_d_dev_init+0xec>)
    15d6:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    15d8:	2201      	movs	r2, #1
    15da:	811a      	strh	r2, [r3, #8]
}
    15dc:	2000      	movs	r0, #0
    15de:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    15e0:	2109      	movs	r1, #9
    15e2:	e7d4      	b.n	158e <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    15e4:	2319      	movs	r3, #25
    15e6:	e7d6      	b.n	1596 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    15e8:	2206      	movs	r2, #6
    15ea:	e7d8      	b.n	159e <_usb_d_dev_init+0x9e>
    15ec:	20000224 	.word	0x20000224
    15f0:	00000c8d 	.word	0x00000c8d
    15f4:	00000ed1 	.word	0x00000ed1
    15f8:	00800084 	.word	0x00800084

000015fc <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    15fc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1600:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1602:	f013 0f03 	tst.w	r3, #3
    1606:	d129      	bne.n	165c <_usb_d_dev_enable+0x60>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1608:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    160c:	7893      	ldrb	r3, [r2, #2]
    160e:	f013 0f03 	tst.w	r3, #3
    1612:	d1fb      	bne.n	160c <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    1614:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1618:	781b      	ldrb	r3, [r3, #0]
    161a:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    161c:	f013 0f02 	tst.w	r3, #2
    1620:	d108      	bne.n	1634 <_usb_d_dev_enable+0x38>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    1622:	f043 0302 	orr.w	r3, r3, #2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1626:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    162a:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    162c:	7893      	ldrb	r3, [r2, #2]
    162e:	f013 0f03 	tst.w	r3, #3
    1632:	d1fb      	bne.n	162c <_usb_d_dev_enable+0x30>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1634:	4b0b      	ldr	r3, [pc, #44]	; (1664 <_usb_d_dev_enable+0x68>)
    1636:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    163a:	609a      	str	r2, [r3, #8]
    163c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1640:	609a      	str	r2, [r3, #8]
    1642:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1646:	609a      	str	r2, [r3, #8]
    1648:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    164c:	609a      	str	r2, [r3, #8]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    164e:	f240 228d 	movw	r2, #653	; 0x28d
    1652:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1656:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    1658:	2000      	movs	r0, #0
    165a:	4770      	bx	lr
		return -USB_ERR_DENIED;
    165c:	f06f 0010 	mvn.w	r0, #16
}
    1660:	4770      	bx	lr
    1662:	bf00      	nop
    1664:	e000e100 	.word	0xe000e100

00001668 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1668:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    166c:	8913      	ldrh	r3, [r2, #8]
    166e:	f023 0301 	bic.w	r3, r3, #1
    1672:	041b      	lsls	r3, r3, #16
    1674:	0c1b      	lsrs	r3, r3, #16
    1676:	8113      	strh	r3, [r2, #8]
    1678:	4770      	bx	lr

0000167a <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    167a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	((Usb *)hw)->DEVICE.DADD.reg = data;
    167e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1682:	7298      	strb	r0, [r3, #10]
    1684:	4770      	bx	lr
	...

00001688 <_usb_d_dev_ep_init>:
{
    1688:	b5f0      	push	{r4, r5, r6, r7, lr}
    168a:	fa4f fe80 	sxtb.w	lr, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    168e:	f010 050f 	ands.w	r5, r0, #15
    1692:	d04d      	beq.n	1730 <_usb_d_dev_ep_init+0xa8>
    1694:	f1be 0f00 	cmp.w	lr, #0
    1698:	bfb4      	ite	lt
    169a:	1cac      	addlt	r4, r5, #2
    169c:	462c      	movge	r4, r5
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    169e:	f001 0103 	and.w	r1, r1, #3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    16a2:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N) {
    16a4:	2d02      	cmp	r5, #2
    16a6:	d947      	bls.n	1738 <_usb_d_dev_ep_init+0xb0>
		return -USB_ERR_PARAM;
    16a8:	f06f 0011 	mvn.w	r0, #17
    16ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    16ae:	f1be 0f00 	cmp.w	lr, #0
    16b2:	db1b      	blt.n	16ec <_usb_d_dev_ep_init+0x64>
    16b4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    16b8:	4e37      	ldr	r6, [pc, #220]	; (1798 <_usb_d_dev_ep_init+0x110>)
    16ba:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    16be:	2d00      	cmp	r5, #0
    16c0:	d15e      	bne.n	1780 <_usb_d_dev_ep_init+0xf8>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    16c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16c6:	4d34      	ldr	r5, [pc, #208]	; (1798 <_usb_d_dev_ep_init+0x110>)
    16c8:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
    16cc:	4d33      	ldr	r5, [pc, #204]	; (179c <_usb_d_dev_ep_init+0x114>)
    16ce:	00a6      	lsls	r6, r4, #2
    16d0:	1933      	adds	r3, r6, r4
    16d2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    16d6:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
	ept->size     = max_pkt_siz;
    16da:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	ept->flags.u8 = (ep_type + 1);
    16de:	3101      	adds	r1, #1
    16e0:	f883 1087 	strb.w	r1, [r3, #135]	; 0x87
	ept->ep       = ep;
    16e4:	f883 0086 	strb.w	r0, [r3, #134]	; 0x86
	return USB_OK;
    16e8:	2000      	movs	r0, #0
    16ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    16ec:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    16f0:	4e29      	ldr	r6, [pc, #164]	; (1798 <_usb_d_dev_ep_init+0x110>)
    16f2:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    16f6:	686d      	ldr	r5, [r5, #4]
    16f8:	b935      	cbnz	r5, 1708 <_usb_d_dev_ep_init+0x80>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    16fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16fe:	4d26      	ldr	r5, [pc, #152]	; (1798 <_usb_d_dev_ep_init+0x110>)
    1700:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1704:	685f      	ldr	r7, [r3, #4]
    1706:	e7e1      	b.n	16cc <_usb_d_dev_ep_init+0x44>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1708:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    170c:	4e22      	ldr	r6, [pc, #136]	; (1798 <_usb_d_dev_ep_init+0x110>)
    170e:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1712:	896d      	ldrh	r5, [r5, #10]
    1714:	4295      	cmp	r5, r2
    1716:	daf0      	bge.n	16fa <_usb_d_dev_ep_init+0x72>
		return -USB_ERR_FUNC;
    1718:	f06f 0012 	mvn.w	r0, #18
    171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
    171e:	f06f 0013 	mvn.w	r0, #19
    1722:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_REDO;
    1724:	f06f 0013 	mvn.w	r0, #19
    1728:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -USB_ERR_FUNC;
    172a:	f06f 0012 	mvn.w	r0, #18
    172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1730:	f001 0103 	and.w	r1, r1, #3
	return &dev_inst.ep[ep_index];
    1734:	2400      	movs	r4, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1736:	4623      	mov	r3, r4
	if (ept->ep != 0xFF) {
    1738:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    173c:	4f17      	ldr	r7, [pc, #92]	; (179c <_usb_d_dev_ep_init+0x114>)
    173e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    1742:	f896 6086 	ldrb.w	r6, [r6, #134]	; 0x86
    1746:	2eff      	cmp	r6, #255	; 0xff
    1748:	d1e9      	bne.n	171e <_usb_d_dev_ep_init+0x96>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    174a:	2900      	cmp	r1, #0
    174c:	d1af      	bne.n	16ae <_usb_d_dev_ep_init+0x26>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    174e:	b125      	cbz	r5, 175a <_usb_d_dev_ep_init+0xd2>
    1750:	f1be 0f00 	cmp.w	lr, #0
    1754:	bfa4      	itt	ge
    1756:	3502      	addge	r5, #2
    1758:	b2ed      	uxtbge	r5, r5
		if (ept_in->ep != 0xFF) {
    175a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    175e:	4e0f      	ldr	r6, [pc, #60]	; (179c <_usb_d_dev_ep_init+0x114>)
    1760:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    1764:	f895 5086 	ldrb.w	r5, [r5, #134]	; 0x86
    1768:	2dff      	cmp	r5, #255	; 0xff
    176a:	d1db      	bne.n	1724 <_usb_d_dev_ep_init+0x9c>
		if (pcfg->cache == NULL) {
    176c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1770:	4e09      	ldr	r6, [pc, #36]	; (1798 <_usb_d_dev_ep_init+0x110>)
    1772:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    1776:	2d00      	cmp	r5, #0
    1778:	d0d7      	beq.n	172a <_usb_d_dev_ep_init+0xa2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    177a:	f1be 0f00 	cmp.w	lr, #0
    177e:	dbb5      	blt.n	16ec <_usb_d_dev_ep_init+0x64>
    1780:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    1784:	4e04      	ldr	r6, [pc, #16]	; (1798 <_usb_d_dev_ep_init+0x110>)
    1786:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    178a:	892d      	ldrh	r5, [r5, #8]
    178c:	4295      	cmp	r5, r2
    178e:	da98      	bge.n	16c2 <_usb_d_dev_ep_init+0x3a>
		return -USB_ERR_FUNC;
    1790:	f06f 0012 	mvn.w	r0, #18
    1794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1796:	bf00      	nop
    1798:	00002bf4 	.word	0x00002bf4
    179c:	20000224 	.word	0x20000224

000017a0 <_usb_d_dev_ep_deinit>:
{
    17a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17a2:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    17a4:	f010 060f 	ands.w	r6, r0, #15
    17a8:	d00e      	beq.n	17c8 <_usb_d_dev_ep_deinit+0x28>
    17aa:	2f00      	cmp	r7, #0
    17ac:	bfb4      	ite	lt
    17ae:	1cb3      	addlt	r3, r6, #2
    17b0:	4633      	movge	r3, r6
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    17b2:	2e02      	cmp	r6, #2
    17b4:	d900      	bls.n	17b8 <_usb_d_dev_ep_deinit+0x18>
    17b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return &dev_inst.ep[ep_index];
    17b8:	461d      	mov	r5, r3
    17ba:	3301      	adds	r3, #1
    17bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    17c0:	4a24      	ldr	r2, [pc, #144]	; (1854 <_usb_d_dev_ep_deinit+0xb4>)
    17c2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    17c6:	e002      	b.n	17ce <_usb_d_dev_ep_deinit+0x2e>
    17c8:	f8df e094 	ldr.w	lr, [pc, #148]	; 1860 <_usb_d_dev_ep_deinit+0xc0>
    17cc:	2500      	movs	r5, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    17ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    17d2:	4a21      	ldr	r2, [pc, #132]	; (1858 <_usb_d_dev_ep_deinit+0xb8>)
    17d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    17d8:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
    17dc:	2aff      	cmp	r2, #255	; 0xff
    17de:	d0ea      	beq.n	17b6 <_usb_d_dev_ep_deinit+0x16>
    17e0:	4604      	mov	r4, r0
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    17e2:	2203      	movs	r2, #3
    17e4:	0ff9      	lsrs	r1, r7, #31
    17e6:	4670      	mov	r0, lr
    17e8:	4b1c      	ldr	r3, [pc, #112]	; (185c <_usb_d_dev_ep_deinit+0xbc>)
    17ea:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    17ec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    17f0:	4a19      	ldr	r2, [pc, #100]	; (1858 <_usb_d_dev_ep_deinit+0xb8>)
    17f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    17f6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    17fa:	f003 0307 	and.w	r3, r3, #7
    17fe:	2b01      	cmp	r3, #1
    1800:	d016      	beq.n	1830 <_usb_d_dev_ep_deinit+0x90>
	} else if (USB_EP_GET_DIR(ep)) {
    1802:	2f00      	cmp	r7, #0
    1804:	db1b      	blt.n	183e <_usb_d_dev_ep_deinit+0x9e>
    1806:	0160      	lsls	r0, r4, #5
    1808:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    180c:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    1810:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    1814:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
	ept->flags.u8 = 0;
    1818:	4b0f      	ldr	r3, [pc, #60]	; (1858 <_usb_d_dev_ep_deinit+0xb8>)
    181a:	00aa      	lsls	r2, r5, #2
    181c:	1951      	adds	r1, r2, r5
    181e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1822:	2000      	movs	r0, #0
    1824:	f881 0087 	strb.w	r0, [r1, #135]	; 0x87
	ept->ep       = 0xFF;
    1828:	22ff      	movs	r2, #255	; 0xff
    182a:	f881 2086 	strb.w	r2, [r1, #134]	; 0x86
    182e:	e7c2      	b.n	17b6 <_usb_d_dev_ep_deinit+0x16>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1830:	0160      	lsls	r0, r4, #5
    1832:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1836:	2300      	movs	r3, #0
    1838:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
    183c:	e7ec      	b.n	1818 <_usb_d_dev_ep_deinit+0x78>
    183e:	0176      	lsls	r6, r6, #5
    1840:	f106 4682 	add.w	r6, r6, #1090519040	; 0x41000000
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1844:	f896 3100 	ldrb.w	r3, [r6, #256]	; 0x100
    1848:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    184c:	f886 3100 	strb.w	r3, [r6, #256]	; 0x100
    1850:	e7e2      	b.n	1818 <_usb_d_dev_ep_deinit+0x78>
    1852:	bf00      	nop
    1854:	20000284 	.word	0x20000284
    1858:	20000224 	.word	0x20000224
    185c:	00000d65 	.word	0x00000d65
    1860:	20000298 	.word	0x20000298

00001864 <_usb_d_dev_ep_enable>:
{
    1864:	b4f0      	push	{r4, r5, r6, r7}
    1866:	b246      	sxtb	r6, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1868:	f010 000f 	ands.w	r0, r0, #15
    186c:	f000 80a7 	beq.w	19be <_usb_d_dev_ep_enable+0x15a>
    1870:	2e00      	cmp	r6, #0
    1872:	bfb4      	ite	lt
    1874:	1c83      	addlt	r3, r0, #2
    1876:	4603      	movge	r3, r0
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1878:	4605      	mov	r5, r0
    187a:	0142      	lsls	r2, r0, #5
    187c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1880:	f892 4100 	ldrb.w	r4, [r2, #256]	; 0x100
    1884:	b2e4      	uxtb	r4, r4
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1886:	2802      	cmp	r0, #2
    1888:	f240 80a0 	bls.w	19cc <_usb_d_dev_ep_enable+0x168>
		return -USB_ERR_PARAM;
    188c:	f06f 0011 	mvn.w	r0, #17
    1890:	e07d      	b.n	198e <_usb_d_dev_ep_enable+0x12a>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1892:	f014 0f77 	tst.w	r4, #119	; 0x77
    1896:	f040 8089 	bne.w	19ac <_usb_d_dev_ep_enable+0x148>
    189a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    189e:	2111      	movs	r1, #17
    18a0:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    18a4:	4c9b      	ldr	r4, [pc, #620]	; (1b14 <_usb_d_dev_ep_enable+0x2b0>)
    18a6:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    18aa:	f8b1 1084 	ldrh.w	r1, [r1, #132]	; 0x84
    18ae:	4c9a      	ldr	r4, [pc, #616]	; (1b18 <_usb_d_dev_ep_enable+0x2b4>)
    18b0:	ea04 3481 	and.w	r4, r4, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    18b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    18b8:	f200 80cd 	bhi.w	1a56 <_usb_d_dev_ep_enable+0x1f2>
    18bc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    18c0:	f200 8112 	bhi.w	1ae8 <_usb_d_dev_ep_enable+0x284>
    18c4:	2980      	cmp	r1, #128	; 0x80
    18c6:	f200 8101 	bhi.w	1acc <_usb_d_dev_ep_enable+0x268>
    18ca:	2940      	cmp	r1, #64	; 0x40
    18cc:	f200 8113 	bhi.w	1af6 <_usb_d_dev_ep_enable+0x292>
    18d0:	2920      	cmp	r1, #32
    18d2:	f200 8102 	bhi.w	1ada <_usb_d_dev_ep_enable+0x276>
    18d6:	2910      	cmp	r1, #16
    18d8:	f200 8114 	bhi.w	1b04 <_usb_d_dev_ep_enable+0x2a0>
    18dc:	2908      	cmp	r1, #8
    18de:	bf94      	ite	ls
    18e0:	2600      	movls	r6, #0
    18e2:	2601      	movhi	r6, #1
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    18e4:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    18e8:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    18ea:	f3c1 010d 	ubfx	r1, r1, #0, #14
    18ee:	e0b8      	b.n	1a62 <_usb_d_dev_ep_enable+0x1fe>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    18f0:	f014 0f70 	tst.w	r4, #112	; 0x70
    18f4:	d15d      	bne.n	19b2 <_usb_d_dev_ep_enable+0x14e>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    18f6:	4e87      	ldr	r6, [pc, #540]	; (1b14 <_usb_d_dev_ep_enable+0x2b0>)
    18f8:	009f      	lsls	r7, r3, #2
    18fa:	18f9      	adds	r1, r7, r3
    18fc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1900:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    1904:	0109      	lsls	r1, r1, #4
    1906:	f001 0170 	and.w	r1, r1, #112	; 0x70
    190a:	430c      	orrs	r4, r1
    190c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1910:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1914:	443b      	add	r3, r7
    1916:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    191a:	f8b6 3084 	ldrh.w	r3, [r6, #132]	; 0x84
    191e:	f3c3 010d 	ubfx	r1, r3, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1926:	d80f      	bhi.n	1948 <_usb_d_dev_ep_enable+0xe4>
    1928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    192c:	d819      	bhi.n	1962 <_usb_d_dev_ep_enable+0xfe>
    192e:	2b80      	cmp	r3, #128	; 0x80
    1930:	d819      	bhi.n	1966 <_usb_d_dev_ep_enable+0x102>
    1932:	2b40      	cmp	r3, #64	; 0x40
    1934:	d819      	bhi.n	196a <_usb_d_dev_ep_enable+0x106>
    1936:	2b20      	cmp	r3, #32
    1938:	d819      	bhi.n	196e <_usb_d_dev_ep_enable+0x10a>
    193a:	2b10      	cmp	r3, #16
    193c:	d819      	bhi.n	1972 <_usb_d_dev_ep_enable+0x10e>
    193e:	2b08      	cmp	r3, #8
    1940:	bf94      	ite	ls
    1942:	2300      	movls	r3, #0
    1944:	2301      	movhi	r3, #1
    1946:	e000      	b.n	194a <_usb_d_dev_ep_enable+0xe6>
    1948:	2307      	movs	r3, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    194a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
    194e:	6143      	str	r3, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1950:	2380      	movs	r3, #128	; 0x80
    1952:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    1956:	4b6f      	ldr	r3, [pc, #444]	; (1b14 <_usb_d_dev_ep_enable+0x2b0>)
    1958:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    195c:	2000      	movs	r0, #0
    195e:	76a8      	strb	r0, [r5, #26]
    1960:	e015      	b.n	198e <_usb_d_dev_ep_enable+0x12a>
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1962:	2306      	movs	r3, #6
    1964:	e7f1      	b.n	194a <_usb_d_dev_ep_enable+0xe6>
    1966:	2305      	movs	r3, #5
    1968:	e7ef      	b.n	194a <_usb_d_dev_ep_enable+0xe6>
    196a:	2304      	movs	r3, #4
    196c:	e7ed      	b.n	194a <_usb_d_dev_ep_enable+0xe6>
    196e:	2303      	movs	r3, #3
    1970:	e7eb      	b.n	194a <_usb_d_dev_ep_enable+0xe6>
    1972:	2302      	movs	r3, #2
    1974:	e7e9      	b.n	194a <_usb_d_dev_ep_enable+0xe6>
    1976:	2107      	movs	r1, #7
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1978:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    197c:	6043      	str	r3, [r0, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    197e:	2340      	movs	r3, #64	; 0x40
    1980:	f882 3105 	strb.w	r3, [r2, #261]	; 0x105
	bank->STATUS_BK.reg     = 0;
    1984:	4b63      	ldr	r3, [pc, #396]	; (1b14 <_usb_d_dev_ep_enable+0x2b0>)
    1986:	eb03 1545 	add.w	r5, r3, r5, lsl #5
    198a:	2000      	movs	r0, #0
    198c:	72a8      	strb	r0, [r5, #10]
}
    198e:	bcf0      	pop	{r4, r5, r6, r7}
    1990:	4770      	bx	lr
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1992:	2106      	movs	r1, #6
    1994:	e7f0      	b.n	1978 <_usb_d_dev_ep_enable+0x114>
    1996:	2105      	movs	r1, #5
    1998:	e7ee      	b.n	1978 <_usb_d_dev_ep_enable+0x114>
    199a:	2104      	movs	r1, #4
    199c:	e7ec      	b.n	1978 <_usb_d_dev_ep_enable+0x114>
    199e:	2103      	movs	r1, #3
    19a0:	e7ea      	b.n	1978 <_usb_d_dev_ep_enable+0x114>
    19a2:	2102      	movs	r1, #2
    19a4:	e7e8      	b.n	1978 <_usb_d_dev_ep_enable+0x114>
		return -USB_ERR_PARAM;
    19a6:	f06f 0011 	mvn.w	r0, #17
    19aa:	e7f0      	b.n	198e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    19ac:	f06f 0013 	mvn.w	r0, #19
    19b0:	e7ed      	b.n	198e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    19b2:	f06f 0013 	mvn.w	r0, #19
    19b6:	e7ea      	b.n	198e <_usb_d_dev_ep_enable+0x12a>
			return -USB_ERR_REDO;
    19b8:	f06f 0013 	mvn.w	r0, #19
    19bc:	e7e7      	b.n	198e <_usb_d_dev_ep_enable+0x12a>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    19be:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    19c2:	f893 4100 	ldrb.w	r4, [r3, #256]	; 0x100
    19c6:	b2e4      	uxtb	r4, r4
    19c8:	2500      	movs	r5, #0
	return &dev_inst.ep[ep_index];
    19ca:	462b      	mov	r3, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    19cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    19d0:	4950      	ldr	r1, [pc, #320]	; (1b14 <_usb_d_dev_ep_enable+0x2b0>)
    19d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    19d6:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    19da:	2aff      	cmp	r2, #255	; 0xff
    19dc:	d0e3      	beq.n	19a6 <_usb_d_dev_ep_enable+0x142>
    19de:	016a      	lsls	r2, r5, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    19e0:	1888      	adds	r0, r1, r2
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    19e2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    19e6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    19ea:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    19ee:	f001 0107 	and.w	r1, r1, #7
    19f2:	2901      	cmp	r1, #1
    19f4:	f43f af4d 	beq.w	1892 <_usb_d_dev_ep_enable+0x2e>
	} else if (dir) {
    19f8:	2e00      	cmp	r6, #0
    19fa:	f6ff af79 	blt.w	18f0 <_usb_d_dev_ep_enable+0x8c>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    19fe:	f014 0f07 	tst.w	r4, #7
    1a02:	d1d9      	bne.n	19b8 <_usb_d_dev_ep_enable+0x154>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    1a04:	4e43      	ldr	r6, [pc, #268]	; (1b14 <_usb_d_dev_ep_enable+0x2b0>)
    1a06:	009f      	lsls	r7, r3, #2
    1a08:	18f9      	adds	r1, r7, r3
    1a0a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    1a0e:	f891 1087 	ldrb.w	r1, [r1, #135]	; 0x87
    1a12:	f001 0107 	and.w	r1, r1, #7
    1a16:	430c      	orrs	r4, r1
    1a18:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1a1c:	f882 4100 	strb.w	r4, [r2, #256]	; 0x100
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a20:	443b      	add	r3, r7
    1a22:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    1a26:	f8b6 1084 	ldrh.w	r1, [r6, #132]	; 0x84
    1a2a:	4b3b      	ldr	r3, [pc, #236]	; (1b18 <_usb_d_dev_ep_enable+0x2b4>)
    1a2c:	ea03 3381 	and.w	r3, r3, r1, lsl #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    1a34:	d89f      	bhi.n	1976 <_usb_d_dev_ep_enable+0x112>
    1a36:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    1a3a:	d8aa      	bhi.n	1992 <_usb_d_dev_ep_enable+0x12e>
    1a3c:	2980      	cmp	r1, #128	; 0x80
    1a3e:	d8aa      	bhi.n	1996 <_usb_d_dev_ep_enable+0x132>
    1a40:	2940      	cmp	r1, #64	; 0x40
    1a42:	d8aa      	bhi.n	199a <_usb_d_dev_ep_enable+0x136>
    1a44:	2920      	cmp	r1, #32
    1a46:	d8aa      	bhi.n	199e <_usb_d_dev_ep_enable+0x13a>
    1a48:	2910      	cmp	r1, #16
    1a4a:	d8aa      	bhi.n	19a2 <_usb_d_dev_ep_enable+0x13e>
    1a4c:	2908      	cmp	r1, #8
    1a4e:	bf94      	ite	ls
    1a50:	2100      	movls	r1, #0
    1a52:	2101      	movhi	r1, #1
    1a54:	e790      	b.n	1978 <_usb_d_dev_ep_enable+0x114>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a56:	f044 44e0 	orr.w	r4, r4, #1879048192	; 0x70000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1a5a:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a5c:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1a60:	2607      	movs	r6, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1a62:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
    1a66:	6141      	str	r1, [r0, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1a68:	2640      	movs	r6, #64	; 0x40
    1a6a:	f882 6105 	strb.w	r6, [r2, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1a6e:	2180      	movs	r1, #128	; 0x80
    1a70:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	bank->STATUS_BK.reg     = 0;
    1a74:	4f27      	ldr	r7, [pc, #156]	; (1b14 <_usb_d_dev_ep_enable+0x2b0>)
    1a76:	eb07 1545 	add.w	r5, r7, r5, lsl #5
    1a7a:	2000      	movs	r0, #0
    1a7c:	72a8      	strb	r0, [r5, #10]
    1a7e:	76a8      	strb	r0, [r5, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1a80:	009c      	lsls	r4, r3, #2
    1a82:	18e1      	adds	r1, r4, r3
    1a84:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    1a88:	f891 2086 	ldrb.w	r2, [r1, #134]	; 0x86
    1a8c:	f002 020f 	and.w	r2, r2, #15
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1a90:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
	bank->ADDR.reg          = addr;
    1a94:	0152      	lsls	r2, r2, #5
    1a96:	18b9      	adds	r1, r7, r2
    1a98:	50bd      	str	r5, [r7, r2]
	_usbd_ep_set_out_trans(epn, 0, ept->size, 0);
    1a9a:	4423      	add	r3, r4
    1a9c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1aa0:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
    1aa4:	684b      	ldr	r3, [r1, #4]
    1aa6:	f364 339b 	bfi	r3, r4, #14, #14
    1aaa:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1aac:	684b      	ldr	r3, [r1, #4]
    1aae:	f360 030d 	bfi	r3, r0, #0, #14
    1ab2:	604b      	str	r3, [r1, #4]
    1ab4:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1ab8:	21b0      	movs	r1, #176	; 0xb0
    1aba:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1abe:	f883 6105 	strb.w	r6, [r3, #261]	; 0x105
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1ac2:	461a      	mov	r2, r3
    1ac4:	2310      	movs	r3, #16
    1ac6:	f882 3109 	strb.w	r3, [r2, #265]	; 0x109
    1aca:	e760      	b.n	198e <_usb_d_dev_ep_enable+0x12a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1acc:	f044 44a0 	orr.w	r4, r4, #1342177280	; 0x50000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1ad0:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ad2:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1ad6:	2605      	movs	r6, #5
    1ad8:	e7c3      	b.n	1a62 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ada:	f044 5440 	orr.w	r4, r4, #805306368	; 0x30000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1ade:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ae0:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1ae4:	2603      	movs	r6, #3
    1ae6:	e7bc      	b.n	1a62 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1ae8:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1aec:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1aee:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1af2:	2606      	movs	r6, #6
    1af4:	e7b5      	b.n	1a62 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1af6:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1afa:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1afc:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1b00:	2604      	movs	r6, #4
    1b02:	e7ae      	b.n	1a62 <_usb_d_dev_ep_enable+0x1fe>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b04:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1b08:	6044      	str	r4, [r0, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1b0a:	f3c1 010d 	ubfx	r1, r1, #0, #14
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1b0e:	2602      	movs	r6, #2
    1b10:	e7a7      	b.n	1a62 <_usb_d_dev_ep_enable+0x1fe>
    1b12:	bf00      	nop
    1b14:	20000224 	.word	0x20000224
    1b18:	0fffc000 	.word	0x0fffc000

00001b1c <_usb_d_dev_ep_stall>:
{
    1b1c:	b470      	push	{r4, r5, r6}
    1b1e:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1b20:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1b22:	f010 000f 	ands.w	r0, r0, #15
    1b26:	d008      	beq.n	1b3a <_usb_d_dev_ep_stall+0x1e>
    1b28:	2b00      	cmp	r3, #0
    1b2a:	bfb4      	ite	lt
    1b2c:	1c83      	addlt	r3, r0, #2
    1b2e:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    1b30:	2802      	cmp	r0, #2
    1b32:	d903      	bls.n	1b3c <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    1b34:	f06f 0011 	mvn.w	r0, #17
    1b38:	e018      	b.n	1b6c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    1b3a:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    1b3c:	2901      	cmp	r1, #1
    1b3e:	d017      	beq.n	1b70 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1b40:	2900      	cmp	r1, #0
    1b42:	d03a      	beq.n	1bba <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1b48:	4a45      	ldr	r2, [pc, #276]	; (1c60 <_usb_d_dev_ep_stall+0x144>)
    1b4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1b4e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1b52:	f003 030f 	and.w	r3, r3, #15
    1b56:	015b      	lsls	r3, r3, #5
    1b58:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1b5c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1b60:	2310      	movs	r3, #16
    1b62:	40a3      	lsls	r3, r4
    1b64:	421a      	tst	r2, r3
    1b66:	bf14      	ite	ne
    1b68:	2001      	movne	r0, #1
    1b6a:	2000      	moveq	r0, #0
}
    1b6c:	bc70      	pop	{r4, r5, r6}
    1b6e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1b70:	2510      	movs	r5, #16
    1b72:	40a5      	lsls	r5, r4
    1b74:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1b76:	493a      	ldr	r1, [pc, #232]	; (1c60 <_usb_d_dev_ep_stall+0x144>)
    1b78:	009e      	lsls	r6, r3, #2
    1b7a:	18f2      	adds	r2, r6, r3
    1b7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1b80:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1b84:	f002 020f 	and.w	r2, r2, #15
    1b88:	0150      	lsls	r0, r2, #5
    1b8a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1b8e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1b92:	2020      	movs	r0, #32
    1b94:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1b98:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1b9a:	0152      	lsls	r2, r2, #5
    1b9c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ba0:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    1ba4:	4433      	add	r3, r6
    1ba6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1baa:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    1bae:	f042 0208 	orr.w	r2, r2, #8
    1bb2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1bb6:	2000      	movs	r0, #0
    1bb8:	e7d8      	b.n	1b6c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1bba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1bbe:	4928      	ldr	r1, [pc, #160]	; (1c60 <_usb_d_dev_ep_stall+0x144>)
    1bc0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1bc4:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    1bc8:	f002 020f 	and.w	r2, r2, #15
    1bcc:	0151      	lsls	r1, r2, #5
    1bce:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1bd2:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1bd6:	2010      	movs	r0, #16
    1bd8:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    1bda:	4205      	tst	r5, r0
    1bdc:	d03c      	beq.n	1c58 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1bde:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1be0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1be4:	2020      	movs	r0, #32
    1be6:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1be8:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1bea:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1bee:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1bf2:	4202      	tst	r2, r0
    1bf4:	d007      	beq.n	1c06 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1bf6:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1bfa:	2201      	movs	r2, #1
    1bfc:	fa02 f404 	lsl.w	r4, r2, r4
    1c00:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1c02:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1c06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1c0a:	4815      	ldr	r0, [pc, #84]	; (1c60 <_usb_d_dev_ep_stall+0x144>)
    1c0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1c10:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    1c14:	f002 0207 	and.w	r2, r2, #7
    1c18:	2a01      	cmp	r2, #1
    1c1a:	d00c      	beq.n	1c36 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    1c1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c20:	4a0f      	ldr	r2, [pc, #60]	; (1c60 <_usb_d_dev_ep_stall+0x144>)
    1c22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1c26:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    1c2a:	f36f 02c3 	bfc	r2, #3, #1
    1c2e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1c32:	2000      	movs	r0, #0
    1c34:	e79a      	b.n	1b6c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1c36:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1c3a:	f012 0f30 	tst.w	r2, #48	; 0x30
    1c3e:	d10d      	bne.n	1c5c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    1c40:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1c44:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    1c48:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    1c4c:	f36f 02c3 	bfc	r2, #3, #1
    1c50:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1c54:	2000      	movs	r0, #0
    1c56:	e789      	b.n	1b6c <_usb_d_dev_ep_stall+0x50>
    1c58:	2000      	movs	r0, #0
    1c5a:	e787      	b.n	1b6c <_usb_d_dev_ep_stall+0x50>
    1c5c:	2000      	movs	r0, #0
    1c5e:	e785      	b.n	1b6c <_usb_d_dev_ep_stall+0x50>
    1c60:	20000224 	.word	0x20000224

00001c64 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1c64:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    1c66:	f000 040f 	and.w	r4, r0, #15
    1c6a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1c6c:	4a14      	ldr	r2, [pc, #80]	; (1cc0 <_usb_d_dev_ep_read_req+0x5c>)
    1c6e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    1c70:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1c72:	6840      	ldr	r0, [r0, #4]
    1c74:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1c78:	2c02      	cmp	r4, #2
    1c7a:	d817      	bhi.n	1cac <_usb_d_dev_ep_read_req+0x48>
    1c7c:	b1c9      	cbz	r1, 1cb2 <_usb_d_dev_ep_read_req+0x4e>
    1c7e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1c82:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    1c86:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1c88:	2a11      	cmp	r2, #17
    1c8a:	d115      	bne.n	1cb8 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1c8c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    1c90:	f012 0f10 	tst.w	r2, #16
    1c94:	d102      	bne.n	1c9c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    1c96:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1c98:	bc30      	pop	{r4, r5}
    1c9a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    1c9c:	682c      	ldr	r4, [r5, #0]
    1c9e:	686a      	ldr	r2, [r5, #4]
    1ca0:	600c      	str	r4, [r1, #0]
    1ca2:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1ca4:	2210      	movs	r2, #16
    1ca6:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    1caa:	e7f5      	b.n	1c98 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    1cac:	f06f 0011 	mvn.w	r0, #17
    1cb0:	e7f2      	b.n	1c98 <_usb_d_dev_ep_read_req+0x34>
    1cb2:	f06f 0011 	mvn.w	r0, #17
    1cb6:	e7ef      	b.n	1c98 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    1cb8:	f06f 0012 	mvn.w	r0, #18
    1cbc:	e7ec      	b.n	1c98 <_usb_d_dev_ep_read_req+0x34>
    1cbe:	bf00      	nop
    1cc0:	20000224 	.word	0x20000224

00001cc4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cc8:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1cca:	7a03      	ldrb	r3, [r0, #8]
    1ccc:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1cce:	f013 030f 	ands.w	r3, r3, #15
    1cd2:	f000 80c2 	beq.w	1e5a <_usb_d_dev_ep_trans+0x196>
    1cd6:	2e00      	cmp	r6, #0
    1cd8:	bfb4      	ite	lt
    1cda:	1c9a      	addlt	r2, r3, #2
    1cdc:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    1cde:	4614      	mov	r4, r2
    1ce0:	4969      	ldr	r1, [pc, #420]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1ce2:	f101 0760 	add.w	r7, r1, #96	; 0x60
    1ce6:	1c55      	adds	r5, r2, #1
    1ce8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1cec:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1cf0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1cf4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1cf8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    1cfc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1d00:	428a      	cmp	r2, r1
    1d02:	d025      	beq.n	1d50 <_usb_d_dev_ep_trans+0x8c>
    1d04:	1e55      	subs	r5, r2, #1
    1d06:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    1d08:	6841      	ldr	r1, [r0, #4]
    1d0a:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1d0c:	2b02      	cmp	r3, #2
    1d0e:	f200 8092 	bhi.w	1e36 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1d12:	6803      	ldr	r3, [r0, #0]
    1d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1d18:	d31c      	bcc.n	1d54 <_usb_d_dev_ep_trans+0x90>
    1d1a:	eb03 0c01 	add.w	ip, r3, r1
    1d1e:	f8df e180 	ldr.w	lr, [pc, #384]	; 1ea0 <_usb_d_dev_ep_trans+0x1dc>
    1d22:	45f4      	cmp	ip, lr
    1d24:	d816      	bhi.n	1d54 <_usb_d_dev_ep_trans+0x90>
    1d26:	f013 0f03 	tst.w	r3, #3
    1d2a:	d113      	bne.n	1d54 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    1d2c:	2e00      	cmp	r6, #0
    1d2e:	db2a      	blt.n	1d86 <_usb_d_dev_ep_trans+0xc2>
    1d30:	428a      	cmp	r2, r1
    1d32:	f200 809c 	bhi.w	1e6e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    1d36:	b34d      	cbz	r5, 1d8c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    1d38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1d3c:	4a52      	ldr	r2, [pc, #328]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1d3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1d46:	2b00      	cmp	r3, #0
    1d48:	d07b      	beq.n	1e42 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    1d4a:	f04f 0800 	mov.w	r8, #0
    1d4e:	e00c      	b.n	1d6a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1d50:	4615      	mov	r5, r2
    1d52:	e7d9      	b.n	1d08 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    1d54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1d58:	4a4b      	ldr	r2, [pc, #300]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1d5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1d62:	2b00      	cmp	r3, #0
    1d64:	d06a      	beq.n	1e3c <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    1d66:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1d6a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1d6e:	4a46      	ldr	r2, [pc, #280]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1d70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d74:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    1d78:	f013 0f08 	tst.w	r3, #8
    1d7c:	d009      	beq.n	1d92 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    1d7e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1d80:	b003      	add	sp, #12
    1d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    1d86:	f04f 0800 	mov.w	r8, #0
    1d8a:	e7ee      	b.n	1d6a <_usb_d_dev_ep_trans+0xa6>
    1d8c:	f04f 0800 	mov.w	r8, #0
    1d90:	e7eb      	b.n	1d6a <_usb_d_dev_ep_trans+0xa6>
    1d92:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    1d94:	a801      	add	r0, sp, #4
    1d96:	4b3d      	ldr	r3, [pc, #244]	; (1e8c <_usb_d_dev_ep_trans+0x1c8>)
    1d98:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1d9a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1d9e:	4a3a      	ldr	r2, [pc, #232]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1da0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1da4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    1da8:	f013 0f40 	tst.w	r3, #64	; 0x40
    1dac:	d13c      	bne.n	1e28 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    1dae:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    1db2:	4b35      	ldr	r3, [pc, #212]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1db4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    1db8:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    1dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1dc0:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    1dc4:	a801      	add	r0, sp, #4
    1dc6:	4b32      	ldr	r3, [pc, #200]	; (1e90 <_usb_d_dev_ep_trans+0x1cc>)
    1dc8:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1dca:	f8da 3000 	ldr.w	r3, [sl]
    1dce:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    1dd2:	f8da 3004 	ldr.w	r3, [sl, #4]
    1dd6:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    1dda:	2300      	movs	r3, #0
    1ddc:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1de0:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    1de2:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    1de6:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    1dea:	f368 1345 	bfi	r3, r8, #5, #1
    1dee:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1df2:	f89a 3009 	ldrb.w	r3, [sl, #9]
    1df6:	b1e3      	cbz	r3, 1e32 <_usb_d_dev_ep_trans+0x16e>
    1df8:	fab5 f585 	clz	r5, r5
    1dfc:	096d      	lsrs	r5, r5, #5
    1dfe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1e02:	4b21      	ldr	r3, [pc, #132]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1e04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1e08:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    1e0c:	f365 1304 	bfi	r3, r5, #4, #1
    1e10:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    1e14:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    1e16:	f04f 0100 	mov.w	r1, #0
    1e1a:	4638      	mov	r0, r7
    1e1c:	bfb4      	ite	lt
    1e1e:	4b1d      	ldrlt	r3, [pc, #116]	; (1e94 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    1e20:	4b1d      	ldrge	r3, [pc, #116]	; (1e98 <_usb_d_dev_ep_trans+0x1d4>)
    1e22:	4798      	blx	r3
	return ERR_NONE;
    1e24:	2000      	movs	r0, #0
    1e26:	e7ab      	b.n	1d80 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    1e28:	a801      	add	r0, sp, #4
    1e2a:	4b19      	ldr	r3, [pc, #100]	; (1e90 <_usb_d_dev_ep_trans+0x1cc>)
    1e2c:	4798      	blx	r3
		return USB_BUSY;
    1e2e:	2001      	movs	r0, #1
    1e30:	e7a6      	b.n	1d80 <_usb_d_dev_ep_trans+0xbc>
    1e32:	2500      	movs	r5, #0
    1e34:	e7e3      	b.n	1dfe <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    1e36:	f06f 0011 	mvn.w	r0, #17
    1e3a:	e7a1      	b.n	1d80 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    1e3c:	f06f 0012 	mvn.w	r0, #18
    1e40:	e79e      	b.n	1d80 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    1e42:	f06f 0011 	mvn.w	r0, #17
    1e46:	e79b      	b.n	1d80 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    1e48:	f06f 0012 	mvn.w	r0, #18
    1e4c:	e798      	b.n	1d80 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    1e4e:	6841      	ldr	r1, [r0, #4]
    1e50:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    1e54:	4f11      	ldr	r7, [pc, #68]	; (1e9c <_usb_d_dev_ep_trans+0x1d8>)
    1e56:	2400      	movs	r4, #0
    1e58:	e75b      	b.n	1d12 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e5a:	4a0b      	ldr	r2, [pc, #44]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1e5c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    1e60:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1e64:	428a      	cmp	r2, r1
    1e66:	d0f2      	beq.n	1e4e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    1e68:	4f0c      	ldr	r7, [pc, #48]	; (1e9c <_usb_d_dev_ep_trans+0x1d8>)
    1e6a:	2400      	movs	r4, #0
    1e6c:	e74a      	b.n	1d04 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    1e6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1e72:	4a05      	ldr	r2, [pc, #20]	; (1e88 <_usb_d_dev_ep_trans+0x1c4>)
    1e74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d0e3      	beq.n	1e48 <_usb_d_dev_ep_trans+0x184>
    1e80:	f04f 0801 	mov.w	r8, #1
    1e84:	e771      	b.n	1d6a <_usb_d_dev_ep_trans+0xa6>
    1e86:	bf00      	nop
    1e88:	20000224 	.word	0x20000224
    1e8c:	0000045d 	.word	0x0000045d
    1e90:	0000046b 	.word	0x0000046b
    1e94:	00000f15 	.word	0x00000f15
    1e98:	00001099 	.word	0x00001099
    1e9c:	20000298 	.word	0x20000298
    1ea0:	20041fff 	.word	0x20041fff

00001ea4 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1ea4:	4b06      	ldr	r3, [pc, #24]	; (1ec0 <_usb_d_dev_register_callback+0x1c>)
    1ea6:	2900      	cmp	r1, #0
    1ea8:	bf08      	it	eq
    1eaa:	4619      	moveq	r1, r3
	if (type == USB_D_CB_EVENT) {
    1eac:	2801      	cmp	r0, #1
    1eae:	d003      	beq.n	1eb8 <_usb_d_dev_register_callback+0x14>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    1eb0:	b908      	cbnz	r0, 1eb6 <_usb_d_dev_register_callback+0x12>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1eb2:	4b04      	ldr	r3, [pc, #16]	; (1ec4 <_usb_d_dev_register_callback+0x20>)
    1eb4:	6619      	str	r1, [r3, #96]	; 0x60
    1eb6:	4770      	bx	lr
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1eb8:	4b02      	ldr	r3, [pc, #8]	; (1ec4 <_usb_d_dev_register_callback+0x20>)
    1eba:	6659      	str	r1, [r3, #100]	; 0x64
    1ebc:	4770      	bx	lr
    1ebe:	bf00      	nop
    1ec0:	00000c8d 	.word	0x00000c8d
    1ec4:	20000224 	.word	0x20000224

00001ec8 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1ec8:	4b09      	ldr	r3, [pc, #36]	; (1ef0 <_usb_d_dev_register_ep_callback+0x28>)
    1eca:	2900      	cmp	r1, #0
    1ecc:	bf08      	it	eq
    1ece:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1ed0:	4603      	mov	r3, r0
    1ed2:	b130      	cbz	r0, 1ee2 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1ed4:	2801      	cmp	r0, #1
    1ed6:	d007      	beq.n	1ee8 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1ed8:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1eda:	bf04      	itt	eq
    1edc:	4b05      	ldreq	r3, [pc, #20]	; (1ef4 <_usb_d_dev_register_ep_callback+0x2c>)
    1ede:	6719      	streq	r1, [r3, #112]	; 0x70
    1ee0:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1ee2:	4b04      	ldr	r3, [pc, #16]	; (1ef4 <_usb_d_dev_register_ep_callback+0x2c>)
    1ee4:	6699      	str	r1, [r3, #104]	; 0x68
    1ee6:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1ee8:	4b02      	ldr	r3, [pc, #8]	; (1ef4 <_usb_d_dev_register_ep_callback+0x2c>)
    1eea:	66d9      	str	r1, [r3, #108]	; 0x6c
    1eec:	4770      	bx	lr
    1eee:	bf00      	nop
    1ef0:	00000c8d 	.word	0x00000c8d
    1ef4:	20000224 	.word	0x20000224

00001ef8 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    1ef8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1efa:	4b01      	ldr	r3, [pc, #4]	; (1f00 <USB_0_Handler+0x8>)
    1efc:	4798      	blx	r3
    1efe:	bd08      	pop	{r3, pc}
    1f00:	00001289 	.word	0x00001289

00001f04 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    1f04:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1f06:	4b01      	ldr	r3, [pc, #4]	; (1f0c <USB_1_Handler+0x8>)
    1f08:	4798      	blx	r3
    1f0a:	bd08      	pop	{r3, pc}
    1f0c:	00001289 	.word	0x00001289

00001f10 <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    1f10:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1f12:	4b01      	ldr	r3, [pc, #4]	; (1f18 <USB_2_Handler+0x8>)
    1f14:	4798      	blx	r3
    1f16:	bd08      	pop	{r3, pc}
    1f18:	00001289 	.word	0x00001289

00001f1c <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    1f1c:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1f1e:	4b01      	ldr	r3, [pc, #4]	; (1f24 <USB_3_Handler+0x8>)
    1f20:	4798      	blx	r3
    1f22:	bd08      	pop	{r3, pc}
    1f24:	00001289 	.word	0x00001289

00001f28 <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f2a:	b083      	sub	sp, #12
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1f2c:	780b      	ldrb	r3, [r1, #0]
    1f2e:	f3c3 1441 	ubfx	r4, r3, #5, #2
    1f32:	2c01      	cmp	r4, #1
    1f34:	d15e      	bne.n	1ff4 <cdcdf_acm_req+0xcc>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    1f36:	888c      	ldrh	r4, [r1, #4]
    1f38:	4d35      	ldr	r5, [pc, #212]	; (2010 <cdcdf_acm_req+0xe8>)
    1f3a:	782d      	ldrb	r5, [r5, #0]
    1f3c:	42a5      	cmp	r5, r4
    1f3e:	d003      	beq.n	1f48 <cdcdf_acm_req+0x20>
    1f40:	4d33      	ldr	r5, [pc, #204]	; (2010 <cdcdf_acm_req+0xe8>)
    1f42:	786d      	ldrb	r5, [r5, #1]
    1f44:	42a5      	cmp	r5, r4
    1f46:	d158      	bne.n	1ffa <cdcdf_acm_req+0xd2>
    1f48:	4616      	mov	r6, r2
    1f4a:	460c      	mov	r4, r1
    1f4c:	4605      	mov	r5, r0
		if (req->bmRequestType & USB_EP_DIR_IN) {
    1f4e:	f013 0f80 	tst.w	r3, #128	; 0x80
    1f52:	d10c      	bne.n	1f6e <cdcdf_acm_req+0x46>
	uint16_t                   len      = req->wLength;
    1f54:	88cf      	ldrh	r7, [r1, #6]
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    1f56:	4b2f      	ldr	r3, [pc, #188]	; (2014 <cdcdf_acm_req+0xec>)
    1f58:	4798      	blx	r3
    1f5a:	4601      	mov	r1, r0
	switch (req->bRequest) {
    1f5c:	7863      	ldrb	r3, [r4, #1]
    1f5e:	2b20      	cmp	r3, #32
    1f60:	d013      	beq.n	1f8a <cdcdf_acm_req+0x62>
    1f62:	2b22      	cmp	r3, #34	; 0x22
    1f64:	d032      	beq.n	1fcc <cdcdf_acm_req+0xa4>
		return ERR_INVALID_ARG;
    1f66:	f06f 000c 	mvn.w	r0, #12
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    1f6a:	b003      	add	sp, #12
    1f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    1f6e:	2a01      	cmp	r2, #1
    1f70:	d046      	beq.n	2000 <cdcdf_acm_req+0xd8>
	switch (req->bRequest) {
    1f72:	784b      	ldrb	r3, [r1, #1]
    1f74:	2b21      	cmp	r3, #33	; 0x21
    1f76:	d145      	bne.n	2004 <cdcdf_acm_req+0xdc>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1f78:	88cb      	ldrh	r3, [r1, #6]
    1f7a:	2b07      	cmp	r3, #7
    1f7c:	d145      	bne.n	200a <cdcdf_acm_req+0xe2>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    1f7e:	2300      	movs	r3, #0
    1f80:	2207      	movs	r2, #7
    1f82:	4925      	ldr	r1, [pc, #148]	; (2018 <cdcdf_acm_req+0xf0>)
    1f84:	4c25      	ldr	r4, [pc, #148]	; (201c <cdcdf_acm_req+0xf4>)
    1f86:	47a0      	blx	r4
    1f88:	e7ef      	b.n	1f6a <cdcdf_acm_req+0x42>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1f8a:	2f07      	cmp	r7, #7
    1f8c:	d12b      	bne.n	1fe6 <cdcdf_acm_req+0xbe>
		if (USB_SETUP_STAGE == stage) {
    1f8e:	b1be      	cbz	r6, 1fc0 <cdcdf_acm_req+0x98>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    1f90:	6800      	ldr	r0, [r0, #0]
    1f92:	9000      	str	r0, [sp, #0]
    1f94:	888a      	ldrh	r2, [r1, #4]
    1f96:	798b      	ldrb	r3, [r1, #6]
    1f98:	f8ad 2004 	strh.w	r2, [sp, #4]
    1f9c:	f88d 3006 	strb.w	r3, [sp, #6]
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1fa0:	4b1b      	ldr	r3, [pc, #108]	; (2010 <cdcdf_acm_req+0xe8>)
    1fa2:	691b      	ldr	r3, [r3, #16]
    1fa4:	b113      	cbz	r3, 1fac <cdcdf_acm_req+0x84>
    1fa6:	4668      	mov	r0, sp
    1fa8:	4798      	blx	r3
    1faa:	b1f8      	cbz	r0, 1fec <cdcdf_acm_req+0xc4>
				usbd_cdc_line_coding = line_coding_tmp;
    1fac:	4b18      	ldr	r3, [pc, #96]	; (2010 <cdcdf_acm_req+0xe8>)
    1fae:	aa02      	add	r2, sp, #8
    1fb0:	e912 0003 	ldmdb	r2, {r0, r1}
    1fb4:	6098      	str	r0, [r3, #8]
    1fb6:	8199      	strh	r1, [r3, #12]
    1fb8:	0c09      	lsrs	r1, r1, #16
    1fba:	7399      	strb	r1, [r3, #14]
			return ERR_NONE;
    1fbc:	2000      	movs	r0, #0
    1fbe:	e7d4      	b.n	1f6a <cdcdf_acm_req+0x42>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    1fc0:	2300      	movs	r3, #0
    1fc2:	2207      	movs	r2, #7
    1fc4:	4628      	mov	r0, r5
    1fc6:	4c15      	ldr	r4, [pc, #84]	; (201c <cdcdf_acm_req+0xf4>)
    1fc8:	47a0      	blx	r4
    1fca:	e7ce      	b.n	1f6a <cdcdf_acm_req+0x42>
		usbdc_xfer(0, NULL, 0, 0);
    1fcc:	2300      	movs	r3, #0
    1fce:	461a      	mov	r2, r3
    1fd0:	4619      	mov	r1, r3
    1fd2:	4618      	mov	r0, r3
    1fd4:	4d11      	ldr	r5, [pc, #68]	; (201c <cdcdf_acm_req+0xf4>)
    1fd6:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    1fd8:	4b0d      	ldr	r3, [pc, #52]	; (2010 <cdcdf_acm_req+0xe8>)
    1fda:	695b      	ldr	r3, [r3, #20]
    1fdc:	b143      	cbz	r3, 1ff0 <cdcdf_acm_req+0xc8>
			cdcdf_acm_notify_state(req->wValue);
    1fde:	8860      	ldrh	r0, [r4, #2]
    1fe0:	4798      	blx	r3
		return ERR_NONE;
    1fe2:	2000      	movs	r0, #0
    1fe4:	e7c1      	b.n	1f6a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    1fe6:	f04f 30ff 	mov.w	r0, #4294967295
    1fea:	e7be      	b.n	1f6a <cdcdf_acm_req+0x42>
			return ERR_NONE;
    1fec:	2000      	movs	r0, #0
    1fee:	e7bc      	b.n	1f6a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    1ff0:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    1ff2:	e7ba      	b.n	1f6a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    1ff4:	f06f 0009 	mvn.w	r0, #9
    1ff8:	e7b7      	b.n	1f6a <cdcdf_acm_req+0x42>
		return ERR_NOT_FOUND;
    1ffa:	f06f 0009 	mvn.w	r0, #9
    1ffe:	e7b4      	b.n	1f6a <cdcdf_acm_req+0x42>
		return ERR_NONE;
    2000:	2000      	movs	r0, #0
    2002:	e7b2      	b.n	1f6a <cdcdf_acm_req+0x42>
		return ERR_INVALID_ARG;
    2004:	f06f 000c 	mvn.w	r0, #12
    2008:	e7af      	b.n	1f6a <cdcdf_acm_req+0x42>
			return ERR_INVALID_DATA;
    200a:	f04f 30ff 	mov.w	r0, #4294967295
    200e:	e7ac      	b.n	1f6a <cdcdf_acm_req+0x42>
    2010:	20000574 	.word	0x20000574
    2014:	00002931 	.word	0x00002931
    2018:	2000057c 	.word	0x2000057c
    201c:	0000240d 	.word	0x0000240d

00002020 <cdcdf_acm_ctrl>:
{
    2020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2024:	b083      	sub	sp, #12
    2026:	4616      	mov	r6, r2
	switch (ctrl) {
    2028:	2901      	cmp	r1, #1
    202a:	d066      	beq.n	20fa <cdcdf_acm_ctrl+0xda>
    202c:	b141      	cbz	r1, 2040 <cdcdf_acm_ctrl+0x20>
		return ERR_INVALID_ARG;
    202e:	2902      	cmp	r1, #2
    2030:	bf0c      	ite	eq
    2032:	f06f 001a 	mvneq.w	r0, #26
    2036:	f06f 000c 	mvnne.w	r0, #12
}
    203a:	b003      	add	sp, #12
    203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    2040:	f8d0 a008 	ldr.w	sl, [r0, #8]
	ifc = desc->sod;
    2044:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    2046:	2800      	cmp	r0, #0
    2048:	f000 8085 	beq.w	2156 <cdcdf_acm_ctrl+0x136>
    204c:	f10a 3bff 	add.w	fp, sl, #4294967295
    2050:	f10a 0301 	add.w	r3, sl, #1
    2054:	9300      	str	r3, [sp, #0]
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2056:	4f46      	ldr	r7, [pc, #280]	; (2170 <cdcdf_acm_ctrl+0x150>)
				usb_d_ep_enable(func_data->func_ep_out);
    2058:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2180 <cdcdf_acm_ctrl+0x160>
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    205c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2184 <cdcdf_acm_ctrl+0x164>
		ifc_desc.bInterfaceNumber = ifc[2];
    2060:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    2062:	7943      	ldrb	r3, [r0, #5]
    2064:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2068:	2b02      	cmp	r3, #2
    206a:	d002      	beq.n	2072 <cdcdf_acm_ctrl+0x52>
			return ERR_NOT_FOUND;
    206c:	f06f 0009 	mvn.w	r0, #9
    2070:	e7e3      	b.n	203a <cdcdf_acm_ctrl+0x1a>
    2072:	f10b 0b01 	add.w	fp, fp, #1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    2076:	f89b 3000 	ldrb.w	r3, [fp]
    207a:	429a      	cmp	r2, r3
    207c:	d06e      	beq.n	215c <cdcdf_acm_ctrl+0x13c>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    207e:	2bff      	cmp	r3, #255	; 0xff
    2080:	d16f      	bne.n	2162 <cdcdf_acm_ctrl+0x142>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    2082:	f88b 2000 	strb.w	r2, [fp]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    2086:	2205      	movs	r2, #5
    2088:	6871      	ldr	r1, [r6, #4]
    208a:	4b3a      	ldr	r3, [pc, #232]	; (2174 <cdcdf_acm_ctrl+0x154>)
    208c:	4798      	blx	r3
		while (NULL != ep) {
    208e:	4604      	mov	r4, r0
    2090:	b1f8      	cbz	r0, 20d2 <cdcdf_acm_ctrl+0xb2>
    2092:	f8cd b004 	str.w	fp, [sp, #4]
			ep_desc.bEndpointAddress = ep[2];
    2096:	78a5      	ldrb	r5, [r4, #2]
 *  \param[in] ptr Byte pointer to the address to get data
 *  \return a 16-bit word
 */
static inline uint16_t usb_get_u16(const uint8_t *ptr)
{
	return (ptr[0] + (ptr[1] << 8));
    2098:	7963      	ldrb	r3, [r4, #5]
    209a:	7922      	ldrb	r2, [r4, #4]
    209c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    20a0:	b292      	uxth	r2, r2
    20a2:	78e1      	ldrb	r1, [r4, #3]
    20a4:	4628      	mov	r0, r5
    20a6:	47b8      	blx	r7
    20a8:	2800      	cmp	r0, #0
    20aa:	d15d      	bne.n	2168 <cdcdf_acm_ctrl+0x148>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    20ac:	f015 0f80 	tst.w	r5, #128	; 0x80
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    20b0:	bf14      	ite	ne
    20b2:	f88b 5002 	strbne.w	r5, [fp, #2]
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    20b6:	f88a 5004 	strbeq.w	r5, [sl, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    20ba:	4628      	mov	r0, r5
    20bc:	47c8      	blx	r9
			desc->sod = ep;
    20be:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    20c0:	7820      	ldrb	r0, [r4, #0]
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    20c2:	6871      	ldr	r1, [r6, #4]
    20c4:	4420      	add	r0, r4
    20c6:	47c0      	blx	r8
		while (NULL != ep) {
    20c8:	4604      	mov	r4, r0
    20ca:	2800      	cmp	r0, #0
    20cc:	d1e3      	bne.n	2096 <cdcdf_acm_ctrl+0x76>
    20ce:	f8dd b004 	ldr.w	fp, [sp, #4]
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    20d2:	6833      	ldr	r3, [r6, #0]
    20d4:	7818      	ldrb	r0, [r3, #0]
    20d6:	2204      	movs	r2, #4
    20d8:	6871      	ldr	r1, [r6, #4]
    20da:	4418      	add	r0, r3
    20dc:	4b25      	ldr	r3, [pc, #148]	; (2174 <cdcdf_acm_ctrl+0x154>)
    20de:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    20e0:	9b00      	ldr	r3, [sp, #0]
    20e2:	459b      	cmp	fp, r3
    20e4:	d004      	beq.n	20f0 <cdcdf_acm_ctrl+0xd0>
		if (NULL == ifc) {
    20e6:	2800      	cmp	r0, #0
    20e8:	d1ba      	bne.n	2060 <cdcdf_acm_ctrl+0x40>
			return ERR_NOT_FOUND;
    20ea:	f06f 0009 	mvn.w	r0, #9
    20ee:	e7a4      	b.n	203a <cdcdf_acm_ctrl+0x1a>
	_cdcdf_acm_funcd.enabled = true;
    20f0:	2201      	movs	r2, #1
    20f2:	4b21      	ldr	r3, [pc, #132]	; (2178 <cdcdf_acm_ctrl+0x158>)
    20f4:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    20f6:	2000      	movs	r0, #0
    20f8:	e79f      	b.n	203a <cdcdf_acm_ctrl+0x1a>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    20fa:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    20fc:	b142      	cbz	r2, 2110 <cdcdf_acm_ctrl+0xf0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    20fe:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    2100:	795b      	ldrb	r3, [r3, #5]
    2102:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    2106:	2b02      	cmp	r3, #2
    2108:	d002      	beq.n	2110 <cdcdf_acm_ctrl+0xf0>
			return ERR_NOT_FOUND;
    210a:	f06f 0009 	mvn.w	r0, #9
    210e:	e794      	b.n	203a <cdcdf_acm_ctrl+0x1a>
		if (func_data->func_iface[i] == 0xFF) {
    2110:	7823      	ldrb	r3, [r4, #0]
    2112:	2bff      	cmp	r3, #255	; 0xff
    2114:	d008      	beq.n	2128 <cdcdf_acm_ctrl+0x108>
			func_data->func_iface[i] = 0xFF;
    2116:	23ff      	movs	r3, #255	; 0xff
    2118:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    211a:	78a0      	ldrb	r0, [r4, #2]
    211c:	4298      	cmp	r0, r3
    211e:	d003      	beq.n	2128 <cdcdf_acm_ctrl+0x108>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2120:	4b16      	ldr	r3, [pc, #88]	; (217c <cdcdf_acm_ctrl+0x15c>)
    2122:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    2124:	23ff      	movs	r3, #255	; 0xff
    2126:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    2128:	7863      	ldrb	r3, [r4, #1]
    212a:	2bff      	cmp	r3, #255	; 0xff
    212c:	d008      	beq.n	2140 <cdcdf_acm_ctrl+0x120>
			func_data->func_iface[i] = 0xFF;
    212e:	23ff      	movs	r3, #255	; 0xff
    2130:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    2132:	78e0      	ldrb	r0, [r4, #3]
    2134:	4298      	cmp	r0, r3
    2136:	d003      	beq.n	2140 <cdcdf_acm_ctrl+0x120>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    2138:	4b10      	ldr	r3, [pc, #64]	; (217c <cdcdf_acm_ctrl+0x15c>)
    213a:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    213c:	23ff      	movs	r3, #255	; 0xff
    213e:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    2140:	7920      	ldrb	r0, [r4, #4]
    2142:	28ff      	cmp	r0, #255	; 0xff
    2144:	d003      	beq.n	214e <cdcdf_acm_ctrl+0x12e>
		usb_d_ep_deinit(func_data->func_ep_out);
    2146:	4b0d      	ldr	r3, [pc, #52]	; (217c <cdcdf_acm_ctrl+0x15c>)
    2148:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    214a:	23ff      	movs	r3, #255	; 0xff
    214c:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    214e:	2000      	movs	r0, #0
    2150:	4b09      	ldr	r3, [pc, #36]	; (2178 <cdcdf_acm_ctrl+0x158>)
    2152:	7158      	strb	r0, [r3, #5]
    2154:	e771      	b.n	203a <cdcdf_acm_ctrl+0x1a>
			return ERR_NOT_FOUND;
    2156:	f06f 0009 	mvn.w	r0, #9
    215a:	e76e      	b.n	203a <cdcdf_acm_ctrl+0x1a>
				return ERR_ALREADY_INITIALIZED;
    215c:	f06f 0011 	mvn.w	r0, #17
    2160:	e76b      	b.n	203a <cdcdf_acm_ctrl+0x1a>
				return ERR_NO_RESOURCE;
    2162:	f06f 001b 	mvn.w	r0, #27
    2166:	e768      	b.n	203a <cdcdf_acm_ctrl+0x1a>
				return ERR_NOT_INITIALIZED;
    2168:	f06f 0013 	mvn.w	r0, #19
    216c:	e765      	b.n	203a <cdcdf_acm_ctrl+0x1a>
    216e:	bf00      	nop
    2170:	00000765 	.word	0x00000765
    2174:	00002951 	.word	0x00002951
    2178:	20000574 	.word	0x20000574
    217c:	000007cd 	.word	0x000007cd
    2180:	000007f9 	.word	0x000007f9
    2184:	0000298b 	.word	0x0000298b

00002188 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2188:	b508      	push	{r3, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    218a:	4b0a      	ldr	r3, [pc, #40]	; (21b4 <cdcdf_acm_init+0x2c>)
    218c:	4798      	blx	r3
    218e:	2801      	cmp	r0, #1
    2190:	d80c      	bhi.n	21ac <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    2192:	4809      	ldr	r0, [pc, #36]	; (21b8 <cdcdf_acm_init+0x30>)
    2194:	4b09      	ldr	r3, [pc, #36]	; (21bc <cdcdf_acm_init+0x34>)
    2196:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2198:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    219a:	3018      	adds	r0, #24
    219c:	4b08      	ldr	r3, [pc, #32]	; (21c0 <cdcdf_acm_init+0x38>)
    219e:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    21a0:	4908      	ldr	r1, [pc, #32]	; (21c4 <cdcdf_acm_init+0x3c>)
    21a2:	2001      	movs	r0, #1
    21a4:	4b08      	ldr	r3, [pc, #32]	; (21c8 <cdcdf_acm_init+0x40>)
    21a6:	4798      	blx	r3
	return ERR_NONE;
    21a8:	2000      	movs	r0, #0
    21aa:	bd08      	pop	{r3, pc}
		return ERR_DENIED;
    21ac:	f06f 0010 	mvn.w	r0, #16
}
    21b0:	bd08      	pop	{r3, pc}
    21b2:	bf00      	nop
    21b4:	0000293d 	.word	0x0000293d
    21b8:	20000574 	.word	0x20000574
    21bc:	00002021 	.word	0x00002021
    21c0:	000028dd 	.word	0x000028dd
    21c4:	20000000 	.word	0x20000000
    21c8:	00002849 	.word	0x00002849

000021cc <cdcdf_acm_read>:
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    21cc:	4b07      	ldr	r3, [pc, #28]	; (21ec <cdcdf_acm_read+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    21ce:	795b      	ldrb	r3, [r3, #5]
    21d0:	b143      	cbz	r3, 21e4 <cdcdf_acm_read+0x18>
{
    21d2:	b510      	push	{r4, lr}
    21d4:	460a      	mov	r2, r1
    21d6:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    21d8:	2300      	movs	r3, #0
    21da:	4804      	ldr	r0, [pc, #16]	; (21ec <cdcdf_acm_read+0x20>)
    21dc:	7900      	ldrb	r0, [r0, #4]
    21de:	4c04      	ldr	r4, [pc, #16]	; (21f0 <cdcdf_acm_read+0x24>)
    21e0:	47a0      	blx	r4
    21e2:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    21e4:	f06f 0010 	mvn.w	r0, #16
    21e8:	4770      	bx	lr
    21ea:	bf00      	nop
    21ec:	20000574 	.word	0x20000574
    21f0:	0000240d 	.word	0x0000240d

000021f4 <cdcdf_acm_write>:
	return _cdcdf_acm_funcd.enabled;
    21f4:	4b07      	ldr	r3, [pc, #28]	; (2214 <cdcdf_acm_write+0x20>)
	if (!cdcdf_acm_is_enabled()) {
    21f6:	795b      	ldrb	r3, [r3, #5]
    21f8:	b143      	cbz	r3, 220c <cdcdf_acm_write+0x18>
{
    21fa:	b510      	push	{r4, lr}
    21fc:	460a      	mov	r2, r1
    21fe:	4601      	mov	r1, r0
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    2200:	2301      	movs	r3, #1
    2202:	4804      	ldr	r0, [pc, #16]	; (2214 <cdcdf_acm_write+0x20>)
    2204:	78c0      	ldrb	r0, [r0, #3]
    2206:	4c04      	ldr	r4, [pc, #16]	; (2218 <cdcdf_acm_write+0x24>)
    2208:	47a0      	blx	r4
    220a:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    220c:	f06f 0010 	mvn.w	r0, #16
    2210:	4770      	bx	lr
    2212:	bf00      	nop
    2214:	20000574 	.word	0x20000574
    2218:	0000240d 	.word	0x0000240d

0000221c <cdcdf_acm_register_callback>:
{
    221c:	b508      	push	{r3, lr}
	switch (cb_type) {
    221e:	2803      	cmp	r0, #3
    2220:	d81b      	bhi.n	225a <cdcdf_acm_register_callback+0x3e>
    2222:	e8df f000 	tbb	[pc, r0]
    2226:	0a02      	.short	0x0a02
    2228:	1612      	.short	0x1612
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    222a:	460a      	mov	r2, r1
    222c:	2102      	movs	r1, #2
    222e:	4b0c      	ldr	r3, [pc, #48]	; (2260 <cdcdf_acm_register_callback+0x44>)
    2230:	7918      	ldrb	r0, [r3, #4]
    2232:	4b0c      	ldr	r3, [pc, #48]	; (2264 <cdcdf_acm_register_callback+0x48>)
    2234:	4798      	blx	r3
	return ERR_NONE;
    2236:	2000      	movs	r0, #0
		break;
    2238:	bd08      	pop	{r3, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    223a:	460a      	mov	r2, r1
    223c:	2102      	movs	r1, #2
    223e:	4b08      	ldr	r3, [pc, #32]	; (2260 <cdcdf_acm_register_callback+0x44>)
    2240:	78d8      	ldrb	r0, [r3, #3]
    2242:	4b08      	ldr	r3, [pc, #32]	; (2264 <cdcdf_acm_register_callback+0x48>)
    2244:	4798      	blx	r3
	return ERR_NONE;
    2246:	2000      	movs	r0, #0
		break;
    2248:	bd08      	pop	{r3, pc}
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    224a:	4b05      	ldr	r3, [pc, #20]	; (2260 <cdcdf_acm_register_callback+0x44>)
    224c:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    224e:	2000      	movs	r0, #0
		break;
    2250:	bd08      	pop	{r3, pc}
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    2252:	4b03      	ldr	r3, [pc, #12]	; (2260 <cdcdf_acm_register_callback+0x44>)
    2254:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    2256:	2000      	movs	r0, #0
		break;
    2258:	bd08      	pop	{r3, pc}
		return ERR_INVALID_ARG;
    225a:	f06f 000c 	mvn.w	r0, #12
}
    225e:	bd08      	pop	{r3, pc}
    2260:	20000574 	.word	0x20000574
    2264:	000009cd 	.word	0x000009cd

00002268 <cdcdf_acm_is_enabled>:
}
    2268:	4b01      	ldr	r3, [pc, #4]	; (2270 <cdcdf_acm_is_enabled+0x8>)
    226a:	7958      	ldrb	r0, [r3, #5]
    226c:	4770      	bx	lr
    226e:	bf00      	nop
    2270:	20000574 	.word	0x20000574

00002274 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2274:	b570      	push	{r4, r5, r6, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2276:	4b07      	ldr	r3, [pc, #28]	; (2294 <usbdc_unconfig+0x20>)
    2278:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    227a:	b14c      	cbz	r4, 2290 <usbdc_unconfig+0x1c>
		func->ctrl(func, USBDF_DISABLE, NULL);
    227c:	2600      	movs	r6, #0
    227e:	2501      	movs	r5, #1
    2280:	6863      	ldr	r3, [r4, #4]
    2282:	4632      	mov	r2, r6
    2284:	4629      	mov	r1, r5
    2286:	4620      	mov	r0, r4
    2288:	4798      	blx	r3
		func = func->next;
    228a:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    228c:	2c00      	cmp	r4, #0
    228e:	d1f7      	bne.n	2280 <usbdc_unconfig+0xc>
    2290:	bd70      	pop	{r4, r5, r6, pc}
    2292:	bf00      	nop
    2294:	20000598 	.word	0x20000598

00002298 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2298:	b570      	push	{r4, r5, r6, lr}
    229a:	4606      	mov	r6, r0
    229c:	460d      	mov	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    229e:	4b07      	ldr	r3, [pc, #28]	; (22bc <usbdc_change_notify+0x24>)
    22a0:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    22a2:	b91c      	cbnz	r4, 22ac <usbdc_change_notify+0x14>
    22a4:	bd70      	pop	{r4, r5, r6, pc}
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
    22a6:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    22a8:	2c00      	cmp	r4, #0
    22aa:	d0fb      	beq.n	22a4 <usbdc_change_notify+0xc>
		if (NULL != cg->cb) {
    22ac:	6863      	ldr	r3, [r4, #4]
    22ae:	2b00      	cmp	r3, #0
    22b0:	d0f9      	beq.n	22a6 <usbdc_change_notify+0xe>
			cg->cb(change, value);
    22b2:	4629      	mov	r1, r5
    22b4:	4630      	mov	r0, r6
    22b6:	4798      	blx	r3
    22b8:	e7f5      	b.n	22a6 <usbdc_change_notify+0xe>
    22ba:	bf00      	nop
    22bc:	20000598 	.word	0x20000598

000022c0 <usbdc_request_handler>:
	}
}

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    22c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22c2:	4607      	mov	r7, r0
    22c4:	460e      	mov	r6, r1
    22c6:	4615      	mov	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    22c8:	4b0c      	ldr	r3, [pc, #48]	; (22fc <usbdc_request_handler+0x3c>)
    22ca:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    22cc:	b91c      	cbnz	r4, 22d6 <usbdc_request_handler+0x16>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    22ce:	2000      	movs	r0, #0
    22d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		h = h->next;
    22d2:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    22d4:	b16c      	cbz	r4, 22f2 <usbdc_request_handler+0x32>
		if (NULL != h->cb) {
    22d6:	6863      	ldr	r3, [r4, #4]
    22d8:	2b00      	cmp	r3, #0
    22da:	d0fa      	beq.n	22d2 <usbdc_request_handler+0x12>
			rc = h->cb(ep, req, stage);
    22dc:	462a      	mov	r2, r5
    22de:	4631      	mov	r1, r6
    22e0:	4638      	mov	r0, r7
    22e2:	4798      	blx	r3
			if (0 == rc) {
    22e4:	b138      	cbz	r0, 22f6 <usbdc_request_handler+0x36>
			} else if (ERR_NOT_FOUND != rc) {
    22e6:	f110 0f0a 	cmn.w	r0, #10
    22ea:	d0f2      	beq.n	22d2 <usbdc_request_handler+0x12>
				return -1;
    22ec:	f04f 30ff 	mov.w	r0, #4294967295
}
    22f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    22f2:	2000      	movs	r0, #0
    22f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    22f6:	2001      	movs	r0, #1
    22f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22fa:	bf00      	nop
    22fc:	20000598 	.word	0x20000598

00002300 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    2300:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    2302:	4b06      	ldr	r3, [pc, #24]	; (231c <usbd_sof_cb+0x1c>)
    2304:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    2306:	b91c      	cbnz	r4, 2310 <usbd_sof_cb+0x10>
    2308:	bd10      	pop	{r4, pc}
		sof = sof->next;
    230a:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    230c:	2c00      	cmp	r4, #0
    230e:	d0fb      	beq.n	2308 <usbd_sof_cb+0x8>
		if (NULL != sof->cb) {
    2310:	6863      	ldr	r3, [r4, #4]
    2312:	2b00      	cmp	r3, #0
    2314:	d0f9      	beq.n	230a <usbd_sof_cb+0xa>
			sof->cb();
    2316:	4798      	blx	r3
    2318:	e7f7      	b.n	230a <usbd_sof_cb+0xa>
    231a:	bf00      	nop
    231c:	20000598 	.word	0x20000598

00002320 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2320:	b510      	push	{r4, lr}
    2322:	4614      	mov	r4, r2
	(void)ep;

	switch (code) {
    2324:	b119      	cbz	r1, 232e <usbdc_cb_ctl_done+0xe>
    2326:	2901      	cmp	r1, #1
    2328:	d026      	beq.n	2378 <usbdc_cb_ctl_done+0x58>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    232a:	2000      	movs	r0, #0
    232c:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    232e:	7813      	ldrb	r3, [r2, #0]
    2330:	2b00      	cmp	r3, #0
    2332:	d1fa      	bne.n	232a <usbdc_cb_ctl_done+0xa>
	switch (req->bRequest) {
    2334:	7853      	ldrb	r3, [r2, #1]
    2336:	2b05      	cmp	r3, #5
    2338:	d00f      	beq.n	235a <usbdc_cb_ctl_done+0x3a>
    233a:	2b09      	cmp	r3, #9
    233c:	d1f5      	bne.n	232a <usbdc_cb_ctl_done+0xa>
		usbdc.cfg_value = req->wValue;
    233e:	8852      	ldrh	r2, [r2, #2]
    2340:	4b10      	ldr	r3, [pc, #64]	; (2384 <usbdc_cb_ctl_done+0x64>)
    2342:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    2344:	8863      	ldrh	r3, [r4, #2]
    2346:	2b00      	cmp	r3, #0
    2348:	bf14      	ite	ne
    234a:	2104      	movne	r1, #4
    234c:	2103      	moveq	r1, #3
    234e:	4b0d      	ldr	r3, [pc, #52]	; (2384 <usbdc_cb_ctl_done+0x64>)
    2350:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2352:	2001      	movs	r0, #1
    2354:	4b0c      	ldr	r3, [pc, #48]	; (2388 <usbdc_cb_ctl_done+0x68>)
    2356:	4798      	blx	r3
    2358:	e7e7      	b.n	232a <usbdc_cb_ctl_done+0xa>
		usbdc_set_address(req->wValue);
    235a:	8850      	ldrh	r0, [r2, #2]
	usb_d_set_address(addr);
    235c:	b2c0      	uxtb	r0, r0
    235e:	4b0b      	ldr	r3, [pc, #44]	; (238c <usbdc_cb_ctl_done+0x6c>)
    2360:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    2362:	8863      	ldrh	r3, [r4, #2]
    2364:	2b00      	cmp	r3, #0
    2366:	bf14      	ite	ne
    2368:	2103      	movne	r1, #3
    236a:	2102      	moveq	r1, #2
    236c:	4b05      	ldr	r3, [pc, #20]	; (2384 <usbdc_cb_ctl_done+0x64>)
    236e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2370:	2001      	movs	r0, #1
    2372:	4b05      	ldr	r3, [pc, #20]	; (2388 <usbdc_cb_ctl_done+0x68>)
    2374:	4798      	blx	r3
    2376:	e7d8      	b.n	232a <usbdc_cb_ctl_done+0xa>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2378:	2201      	movs	r2, #1
    237a:	4621      	mov	r1, r4
    237c:	2000      	movs	r0, #0
    237e:	4b04      	ldr	r3, [pc, #16]	; (2390 <usbdc_cb_ctl_done+0x70>)
    2380:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2382:	e7d2      	b.n	232a <usbdc_cb_ctl_done+0xa>
    2384:	20000598 	.word	0x20000598
    2388:	00002299 	.word	0x00002299
    238c:	00000759 	.word	0x00000759
    2390:	000022c1 	.word	0x000022c1

00002394 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2394:	b570      	push	{r4, r5, r6, lr}
	usbdc_unconfig();
    2396:	4b0d      	ldr	r3, [pc, #52]	; (23cc <usbdc_reset+0x38>)
    2398:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    239a:	4d0d      	ldr	r5, [pc, #52]	; (23d0 <usbdc_reset+0x3c>)
    239c:	2602      	movs	r6, #2
    239e:	76ae      	strb	r6, [r5, #26]
	usbdc.cfg_value   = 0;
    23a0:	2400      	movs	r4, #0
    23a2:	76ec      	strb	r4, [r5, #27]
	usbdc.ifc_alt_map = 0;
    23a4:	776c      	strb	r4, [r5, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    23a6:	4620      	mov	r0, r4
    23a8:	4b0a      	ldr	r3, [pc, #40]	; (23d4 <usbdc_reset+0x40>)
    23aa:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    23ac:	7f28      	ldrb	r0, [r5, #28]
    23ae:	4b0a      	ldr	r3, [pc, #40]	; (23d8 <usbdc_reset+0x44>)
    23b0:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    23b2:	4a0a      	ldr	r2, [pc, #40]	; (23dc <usbdc_reset+0x48>)
    23b4:	4621      	mov	r1, r4
    23b6:	4620      	mov	r0, r4
    23b8:	4d09      	ldr	r5, [pc, #36]	; (23e0 <usbdc_reset+0x4c>)
    23ba:	47a8      	blx	r5
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    23bc:	4a09      	ldr	r2, [pc, #36]	; (23e4 <usbdc_reset+0x50>)
    23be:	4631      	mov	r1, r6
    23c0:	4620      	mov	r0, r4
    23c2:	47a8      	blx	r5
	usb_d_ep_enable(0);
    23c4:	4620      	mov	r0, r4
    23c6:	4b08      	ldr	r3, [pc, #32]	; (23e8 <usbdc_reset+0x54>)
    23c8:	4798      	blx	r3
    23ca:	bd70      	pop	{r4, r5, r6, pc}
    23cc:	00002275 	.word	0x00002275
    23d0:	20000598 	.word	0x20000598
    23d4:	000007cd 	.word	0x000007cd
    23d8:	000007b9 	.word	0x000007b9
    23dc:	0000242d 	.word	0x0000242d
    23e0:	000009cd 	.word	0x000009cd
    23e4:	00002321 	.word	0x00002321
    23e8:	000007f9 	.word	0x000007f9

000023ec <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    23ec:	b508      	push	{r3, lr}
	(void)param;

	switch (ev) {
    23ee:	b110      	cbz	r0, 23f6 <usbd_event_cb+0xa>
    23f0:	2801      	cmp	r0, #1
    23f2:	d004      	beq.n	23fe <usbd_event_cb+0x12>
    23f4:	bd08      	pop	{r3, pc}
	case USB_EV_VBUS:
		usbdc_change_notify(USBDC_C_CONN, param);
    23f6:	2000      	movs	r0, #0
    23f8:	4b02      	ldr	r3, [pc, #8]	; (2404 <usbd_event_cb+0x18>)
    23fa:	4798      	blx	r3
		break;
    23fc:	bd08      	pop	{r3, pc}

	case USB_EV_RESET:
		usbdc_reset();
    23fe:	4b02      	ldr	r3, [pc, #8]	; (2408 <usbd_event_cb+0x1c>)
    2400:	4798      	blx	r3
    2402:	bd08      	pop	{r3, pc}
    2404:	00002299 	.word	0x00002299
    2408:	00002395 	.word	0x00002395

0000240c <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    240c:	b500      	push	{lr}
    240e:	b085      	sub	sp, #20
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2410:	9101      	str	r1, [sp, #4]
    2412:	9202      	str	r2, [sp, #8]
    2414:	f88d 000c 	strb.w	r0, [sp, #12]
    2418:	f88d 300d 	strb.w	r3, [sp, #13]
	return usb_d_ep_transfer(&xfer);
    241c:	a801      	add	r0, sp, #4
    241e:	4b02      	ldr	r3, [pc, #8]	; (2428 <usbdc_xfer+0x1c>)
    2420:	4798      	blx	r3
}
    2422:	b005      	add	sp, #20
    2424:	f85d fb04 	ldr.w	pc, [sp], #4
    2428:	00000845 	.word	0x00000845

0000242c <usbdc_cb_ctl_req>:
{
    242c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2430:	b083      	sub	sp, #12
    2432:	4605      	mov	r5, r0
    2434:	460c      	mov	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2436:	2200      	movs	r2, #0
    2438:	4b9b      	ldr	r3, [pc, #620]	; (26a8 <usbdc_cb_ctl_req+0x27c>)
    243a:	4798      	blx	r3
    243c:	f1b0 3fff 	cmp.w	r0, #4294967295
    2440:	d00b      	beq.n	245a <usbdc_cb_ctl_req+0x2e>
    2442:	2801      	cmp	r0, #1
    2444:	f000 81e3 	beq.w	280e <usbdc_cb_ctl_req+0x3e2>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2448:	7823      	ldrb	r3, [r4, #0]
    244a:	f013 02e0 	ands.w	r2, r3, #224	; 0xe0
    244e:	d008      	beq.n	2462 <usbdc_cb_ctl_req+0x36>
    2450:	2a80      	cmp	r2, #128	; 0x80
    2452:	f000 80f4 	beq.w	263e <usbdc_cb_ctl_req+0x212>
		return false;
    2456:	2000      	movs	r0, #0
    2458:	e000      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    245a:	2000      	movs	r0, #0
}
    245c:	b003      	add	sp, #12
    245e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (req->bRequest) {
    2462:	7862      	ldrb	r2, [r4, #1]
    2464:	3a01      	subs	r2, #1
    2466:	2a0a      	cmp	r2, #10
    2468:	f200 81d3 	bhi.w	2812 <usbdc_cb_ctl_req+0x3e6>
    246c:	e8df f012 	tbh	[pc, r2, lsl #1]
    2470:	01d10060 	.word	0x01d10060
    2474:	01d10076 	.word	0x01d10076
    2478:	01d1000b 	.word	0x01d1000b
    247c:	01d101d1 	.word	0x01d101d1
    2480:	01d10015 	.word	0x01d10015
    2484:	008c      	.short	0x008c
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2486:	2301      	movs	r3, #1
    2488:	2200      	movs	r2, #0
    248a:	4611      	mov	r1, r2
    248c:	4628      	mov	r0, r5
    248e:	4c87      	ldr	r4, [pc, #540]	; (26ac <usbdc_cb_ctl_req+0x280>)
    2490:	47a0      	blx	r4
    2492:	fab0 f080 	clz	r0, r0
    2496:	0940      	lsrs	r0, r0, #5
    2498:	e7e0      	b.n	245c <usbdc_cb_ctl_req+0x30>
		if (!usbdc_set_config(req->wValue)) {
    249a:	8862      	ldrh	r2, [r4, #2]
    249c:	b2d2      	uxtb	r2, r2
	if (cfg_value == 0) {
    249e:	b1ca      	cbz	r2, 24d4 <usbdc_cb_ctl_req+0xa8>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    24a0:	4b83      	ldr	r3, [pc, #524]	; (26b0 <usbdc_cb_ctl_req+0x284>)
    24a2:	681b      	ldr	r3, [r3, #0]
    24a4:	6859      	ldr	r1, [r3, #4]
    24a6:	6818      	ldr	r0, [r3, #0]
    24a8:	4b82      	ldr	r3, [pc, #520]	; (26b4 <usbdc_cb_ctl_req+0x288>)
    24aa:	4798      	blx	r3
	if (NULL == cfg_desc) {
    24ac:	2800      	cmp	r0, #0
    24ae:	f000 81be 	beq.w	282e <usbdc_cb_ctl_req+0x402>
	return (ptr[0] + (ptr[1] << 8));
    24b2:	78c2      	ldrb	r2, [r0, #3]
    24b4:	7881      	ldrb	r1, [r0, #2]
    24b6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod  = cfg_desc + total_len;
    24ba:	fa10 f181 	uxtah	r1, r0, r1
    24be:	9101      	str	r1, [sp, #4]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    24c0:	2204      	movs	r2, #4
    24c2:	4b7d      	ldr	r3, [pc, #500]	; (26b8 <usbdc_cb_ctl_req+0x28c>)
    24c4:	4798      	blx	r3
    24c6:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    24c8:	b130      	cbz	r0, 24d8 <usbdc_cb_ctl_req+0xac>
    24ca:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    24cc:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 26b0 <usbdc_cb_ctl_req+0x284>
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    24d0:	4f79      	ldr	r7, [pc, #484]	; (26b8 <usbdc_cb_ctl_req+0x28c>)
    24d2:	e018      	b.n	2506 <usbdc_cb_ctl_req+0xda>
		usbdc_unconfig();
    24d4:	4b79      	ldr	r3, [pc, #484]	; (26bc <usbdc_cb_ctl_req+0x290>)
    24d6:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    24d8:	2301      	movs	r3, #1
    24da:	2200      	movs	r2, #0
    24dc:	4611      	mov	r1, r2
    24de:	4628      	mov	r0, r5
    24e0:	4c72      	ldr	r4, [pc, #456]	; (26ac <usbdc_cb_ctl_req+0x280>)
    24e2:	47a0      	blx	r4
    24e4:	fab0 f080 	clz	r0, r0
    24e8:	0940      	lsrs	r0, r0, #5
    24ea:	e7b7      	b.n	245c <usbdc_cb_ctl_req+0x30>
			last_iface = desc.sod[2];
    24ec:	464c      	mov	r4, r9
    24ee:	e000      	b.n	24f2 <usbdc_cb_ctl_req+0xc6>
    24f0:	464c      	mov	r4, r9
		desc.sod = usb_desc_next(desc.sod);
    24f2:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    24f4:	7803      	ldrb	r3, [r0, #0]
    24f6:	4418      	add	r0, r3
    24f8:	9000      	str	r0, [sp, #0]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    24fa:	2204      	movs	r2, #4
    24fc:	9901      	ldr	r1, [sp, #4]
    24fe:	47b8      	blx	r7
    2500:	9000      	str	r0, [sp, #0]
	while (NULL != desc.sod) {
    2502:	2800      	cmp	r0, #0
    2504:	d0e8      	beq.n	24d8 <usbdc_cb_ctl_req+0xac>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    2506:	f890 9002 	ldrb.w	r9, [r0, #2]
    250a:	45a1      	cmp	r9, r4
    250c:	d0f1      	beq.n	24f2 <usbdc_cb_ctl_req+0xc6>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    250e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			while (NULL != func) {
    2512:	2c00      	cmp	r4, #0
    2514:	d0ea      	beq.n	24ec <usbdc_cb_ctl_req+0xc0>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    2516:	2600      	movs	r6, #0
    2518:	6863      	ldr	r3, [r4, #4]
    251a:	466a      	mov	r2, sp
    251c:	4631      	mov	r1, r6
    251e:	4620      	mov	r0, r4
    2520:	4798      	blx	r3
    2522:	2800      	cmp	r0, #0
    2524:	d0e4      	beq.n	24f0 <usbdc_cb_ctl_req+0xc4>
					func = func->next;
    2526:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2528:	2c00      	cmp	r4, #0
    252a:	d1f5      	bne.n	2518 <usbdc_cb_ctl_req+0xec>
			last_iface = desc.sod[2];
    252c:	464c      	mov	r4, r9
    252e:	e7e0      	b.n	24f2 <usbdc_cb_ctl_req+0xc6>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2530:	f003 031f 	and.w	r3, r3, #31
    2534:	2b02      	cmp	r3, #2
    2536:	f040 816e 	bne.w	2816 <usbdc_cb_ctl_req+0x3ea>
		if (req->wLength != 0) {
    253a:	88e3      	ldrh	r3, [r4, #6]
    253c:	b10b      	cbz	r3, 2542 <usbdc_cb_ctl_req+0x116>
			return false;
    253e:	2000      	movs	r0, #0
    2540:	e78c      	b.n	245c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    2542:	88a0      	ldrh	r0, [r4, #4]
    2544:	2100      	movs	r1, #0
    2546:	b2c0      	uxtb	r0, r0
    2548:	4b5d      	ldr	r3, [pc, #372]	; (26c0 <usbdc_cb_ctl_req+0x294>)
    254a:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    254c:	2301      	movs	r3, #1
    254e:	2200      	movs	r2, #0
    2550:	4611      	mov	r1, r2
    2552:	4628      	mov	r0, r5
    2554:	4c55      	ldr	r4, [pc, #340]	; (26ac <usbdc_cb_ctl_req+0x280>)
    2556:	47a0      	blx	r4
		return true;
    2558:	2001      	movs	r0, #1
    255a:	e77f      	b.n	245c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    255c:	f003 031f 	and.w	r3, r3, #31
    2560:	2b02      	cmp	r3, #2
    2562:	f040 815a 	bne.w	281a <usbdc_cb_ctl_req+0x3ee>
		if (req->wLength != 0) {
    2566:	88e3      	ldrh	r3, [r4, #6]
    2568:	b10b      	cbz	r3, 256e <usbdc_cb_ctl_req+0x142>
			return false;
    256a:	2000      	movs	r0, #0
    256c:	e776      	b.n	245c <usbdc_cb_ctl_req+0x30>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    256e:	88a0      	ldrh	r0, [r4, #4]
    2570:	2101      	movs	r1, #1
    2572:	b2c0      	uxtb	r0, r0
    2574:	4b52      	ldr	r3, [pc, #328]	; (26c0 <usbdc_cb_ctl_req+0x294>)
    2576:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2578:	2301      	movs	r3, #1
    257a:	2200      	movs	r2, #0
    257c:	4611      	mov	r1, r2
    257e:	4628      	mov	r0, r5
    2580:	4c4a      	ldr	r4, [pc, #296]	; (26ac <usbdc_cb_ctl_req+0x280>)
    2582:	47a0      	blx	r4
		return true;
    2584:	2001      	movs	r0, #1
    2586:	e769      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2588:	8866      	ldrh	r6, [r4, #2]
    258a:	88a4      	ldrh	r4, [r4, #4]
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    258c:	4a48      	ldr	r2, [pc, #288]	; (26b0 <usbdc_cb_ctl_req+0x284>)
    258e:	6813      	ldr	r3, [r2, #0]
    2590:	7ed2      	ldrb	r2, [r2, #27]
    2592:	6859      	ldr	r1, [r3, #4]
    2594:	6818      	ldr	r0, [r3, #0]
    2596:	4b47      	ldr	r3, [pc, #284]	; (26b4 <usbdc_cb_ctl_req+0x288>)
    2598:	4798      	blx	r3
	if (NULL == ifc) {
    259a:	2800      	cmp	r0, #0
    259c:	d045      	beq.n	262a <usbdc_cb_ctl_req+0x1fe>
	desc.sod = ifc;
    259e:	9000      	str	r0, [sp, #0]
	return (ptr[0] + (ptr[1] << 8));
    25a0:	78c2      	ldrb	r2, [r0, #3]
    25a2:	7881      	ldrb	r1, [r0, #2]
    25a4:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    25a8:	fa10 f181 	uxtah	r1, r0, r1
    25ac:	9101      	str	r1, [sp, #4]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    25ae:	2204      	movs	r2, #4
    25b0:	4b41      	ldr	r3, [pc, #260]	; (26b8 <usbdc_cb_ctl_req+0x28c>)
    25b2:	4798      	blx	r3
    25b4:	4603      	mov	r3, r0
    25b6:	2800      	cmp	r0, #0
    25b8:	d039      	beq.n	262e <usbdc_cb_ctl_req+0x202>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    25ba:	2704      	movs	r7, #4
    25bc:	4d3e      	ldr	r5, [pc, #248]	; (26b8 <usbdc_cb_ctl_req+0x28c>)
    25be:	e008      	b.n	25d2 <usbdc_cb_ctl_req+0x1a6>
		desc.sod = usb_desc_next(desc.sod);
    25c0:	9800      	ldr	r0, [sp, #0]
	return (desc + usb_desc_len(desc));
    25c2:	7803      	ldrb	r3, [r0, #0]
    25c4:	4418      	add	r0, r3
    25c6:	9000      	str	r0, [sp, #0]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    25c8:	463a      	mov	r2, r7
    25ca:	9901      	ldr	r1, [sp, #4]
    25cc:	47a8      	blx	r5
		if (NULL == ifc) {
    25ce:	4603      	mov	r3, r0
    25d0:	b378      	cbz	r0, 2632 <usbdc_cb_ctl_req+0x206>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    25d2:	789a      	ldrb	r2, [r3, #2]
    25d4:	42a2      	cmp	r2, r4
    25d6:	d1f3      	bne.n	25c0 <usbdc_cb_ctl_req+0x194>
    25d8:	78da      	ldrb	r2, [r3, #3]
    25da:	42b2      	cmp	r2, r6
    25dc:	d1f0      	bne.n	25c0 <usbdc_cb_ctl_req+0x194>
	desc.sod = ifc;
    25de:	9300      	str	r3, [sp, #0]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    25e0:	4b33      	ldr	r3, [pc, #204]	; (26b0 <usbdc_cb_ctl_req+0x284>)
    25e2:	691d      	ldr	r5, [r3, #16]
	while (NULL != func) {
    25e4:	b33d      	cbz	r5, 2636 <usbdc_cb_ctl_req+0x20a>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    25e6:	2701      	movs	r7, #1
    25e8:	686b      	ldr	r3, [r5, #4]
    25ea:	466a      	mov	r2, sp
    25ec:	4639      	mov	r1, r7
    25ee:	4628      	mov	r0, r5
    25f0:	4798      	blx	r3
    25f2:	b120      	cbz	r0, 25fe <usbdc_cb_ctl_req+0x1d2>
			func = func->next;
    25f4:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    25f6:	2d00      	cmp	r5, #0
    25f8:	d1f6      	bne.n	25e8 <usbdc_cb_ctl_req+0x1bc>
	return false;
    25fa:	2000      	movs	r0, #0
    25fc:	e72e      	b.n	245c <usbdc_cb_ctl_req+0x30>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    25fe:	686b      	ldr	r3, [r5, #4]
    2600:	466a      	mov	r2, sp
    2602:	2100      	movs	r1, #0
    2604:	4628      	mov	r0, r5
    2606:	4798      	blx	r3
    2608:	b9b8      	cbnz	r0, 263a <usbdc_cb_ctl_req+0x20e>
			if (alt_set) {
    260a:	b136      	cbz	r6, 261a <usbdc_cb_ctl_req+0x1ee>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    260c:	4a28      	ldr	r2, [pc, #160]	; (26b0 <usbdc_cb_ctl_req+0x284>)
    260e:	2301      	movs	r3, #1
    2610:	fa03 f404 	lsl.w	r4, r3, r4
    2614:	7f53      	ldrb	r3, [r2, #29]
    2616:	4323      	orrs	r3, r4
    2618:	7753      	strb	r3, [r2, #29]
			usbdc_xfer(0, NULL, 0, 0);
    261a:	2300      	movs	r3, #0
    261c:	461a      	mov	r2, r3
    261e:	4619      	mov	r1, r3
    2620:	4618      	mov	r0, r3
    2622:	4c22      	ldr	r4, [pc, #136]	; (26ac <usbdc_cb_ctl_req+0x280>)
    2624:	47a0      	blx	r4
			return true;
    2626:	2001      	movs	r0, #1
    2628:	e718      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    262a:	2000      	movs	r0, #0
    262c:	e716      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    262e:	2000      	movs	r0, #0
    2630:	e714      	b.n	245c <usbdc_cb_ctl_req+0x30>
			return false;
    2632:	2000      	movs	r0, #0
    2634:	e712      	b.n	245c <usbdc_cb_ctl_req+0x30>
	return false;
    2636:	2000      	movs	r0, #0
    2638:	e710      	b.n	245c <usbdc_cb_ctl_req+0x30>
			return false;
    263a:	2000      	movs	r0, #0
    263c:	e70e      	b.n	245c <usbdc_cb_ctl_req+0x30>
	switch (req->bRequest) {
    263e:	7862      	ldrb	r2, [r4, #1]
    2640:	2a0a      	cmp	r2, #10
    2642:	f200 80ec 	bhi.w	281e <usbdc_cb_ctl_req+0x3f2>
    2646:	e8df f012 	tbh	[pc, r2, lsl #1]
    264a:	008e      	.short	0x008e
    264c:	00ea00ea 	.word	0x00ea00ea
    2650:	00ea00ea 	.word	0x00ea00ea
    2654:	000b00ea 	.word	0x000b00ea
    2658:	008200ea 	.word	0x008200ea
    265c:	00b200ea 	.word	0x00b200ea
	uint8_t type = (uint8_t)(req->wValue >> 8);
    2660:	8862      	ldrh	r2, [r4, #2]
	switch (type) {
    2662:	0a13      	lsrs	r3, r2, #8
    2664:	2b02      	cmp	r3, #2
    2666:	d02d      	beq.n	26c4 <usbdc_cb_ctl_req+0x298>
    2668:	2b03      	cmp	r3, #3
    266a:	d050      	beq.n	270e <usbdc_cb_ctl_req+0x2e2>
    266c:	2b01      	cmp	r3, #1
    266e:	d001      	beq.n	2674 <usbdc_cb_ctl_req+0x248>
	return false;
    2670:	2000      	movs	r0, #0
    2672:	e6f3      	b.n	245c <usbdc_cb_ctl_req+0x30>
	uint16_t length   = req->wLength;
    2674:	88e2      	ldrh	r2, [r4, #6]
    2676:	2a12      	cmp	r2, #18
    2678:	bf28      	it	cs
    267a:	2212      	movcs	r2, #18
    267c:	4614      	mov	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    267e:	4b0c      	ldr	r3, [pc, #48]	; (26b0 <usbdc_cb_ctl_req+0x284>)
    2680:	681b      	ldr	r3, [r3, #0]
    2682:	2201      	movs	r2, #1
    2684:	6859      	ldr	r1, [r3, #4]
    2686:	6818      	ldr	r0, [r3, #0]
    2688:	4b0b      	ldr	r3, [pc, #44]	; (26b8 <usbdc_cb_ctl_req+0x28c>)
    268a:	4798      	blx	r3
	if (!dev_desc) {
    268c:	4601      	mov	r1, r0
    268e:	2800      	cmp	r0, #0
    2690:	f000 80c7 	beq.w	2822 <usbdc_cb_ctl_req+0x3f6>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    2694:	2300      	movs	r3, #0
    2696:	4622      	mov	r2, r4
    2698:	4628      	mov	r0, r5
    269a:	4c04      	ldr	r4, [pc, #16]	; (26ac <usbdc_cb_ctl_req+0x280>)
    269c:	47a0      	blx	r4
    269e:	fab0 f080 	clz	r0, r0
    26a2:	0940      	lsrs	r0, r0, #5
    26a4:	e6da      	b.n	245c <usbdc_cb_ctl_req+0x30>
    26a6:	bf00      	nop
    26a8:	000022c1 	.word	0x000022c1
    26ac:	0000240d 	.word	0x0000240d
    26b0:	20000598 	.word	0x20000598
    26b4:	000029d1 	.word	0x000029d1
    26b8:	00002951 	.word	0x00002951
    26bc:	00002275 	.word	0x00002275
    26c0:	00000965 	.word	0x00000965
	uint16_t length   = req->wLength;
    26c4:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    26c6:	4b5b      	ldr	r3, [pc, #364]	; (2834 <usbdc_cb_ctl_req+0x408>)
    26c8:	7f1e      	ldrb	r6, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	3201      	adds	r2, #1
    26ce:	b2d2      	uxtb	r2, r2
    26d0:	6859      	ldr	r1, [r3, #4]
    26d2:	6818      	ldr	r0, [r3, #0]
    26d4:	4b58      	ldr	r3, [pc, #352]	; (2838 <usbdc_cb_ctl_req+0x40c>)
    26d6:	4798      	blx	r3
	if (NULL == cfg_desc) {
    26d8:	4601      	mov	r1, r0
    26da:	2800      	cmp	r0, #0
    26dc:	f000 80a3 	beq.w	2826 <usbdc_cb_ctl_req+0x3fa>
	return (ptr[0] + (ptr[1] << 8));
    26e0:	78c3      	ldrb	r3, [r0, #3]
    26e2:	7882      	ldrb	r2, [r0, #2]
    26e4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    26e8:	b292      	uxth	r2, r2
	if (length <= total_len) {
    26ea:	4294      	cmp	r4, r2
    26ec:	d90d      	bls.n	270a <usbdc_cb_ctl_req+0x2de>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    26ee:	3e01      	subs	r6, #1
    26f0:	4226      	tst	r6, r4
    26f2:	bf0c      	ite	eq
    26f4:	2301      	moveq	r3, #1
    26f6:	2300      	movne	r3, #0
		length = total_len;
    26f8:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    26fa:	4622      	mov	r2, r4
    26fc:	4628      	mov	r0, r5
    26fe:	4c4f      	ldr	r4, [pc, #316]	; (283c <usbdc_cb_ctl_req+0x410>)
    2700:	47a0      	blx	r4
    2702:	fab0 f080 	clz	r0, r0
    2706:	0940      	lsrs	r0, r0, #5
    2708:	e6a8      	b.n	245c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    270a:	2300      	movs	r3, #0
    270c:	e7f5      	b.n	26fa <usbdc_cb_ctl_req+0x2ce>
	uint16_t length   = req->wLength;
    270e:	88e4      	ldrh	r4, [r4, #6]
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2710:	4b48      	ldr	r3, [pc, #288]	; (2834 <usbdc_cb_ctl_req+0x408>)
    2712:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2714:	681b      	ldr	r3, [r3, #0]
    2716:	b2d2      	uxtb	r2, r2
    2718:	6859      	ldr	r1, [r3, #4]
    271a:	6818      	ldr	r0, [r3, #0]
    271c:	4b48      	ldr	r3, [pc, #288]	; (2840 <usbdc_cb_ctl_req+0x414>)
    271e:	4798      	blx	r3
	if (NULL == str_desc) {
    2720:	4601      	mov	r1, r0
    2722:	2800      	cmp	r0, #0
    2724:	f000 8081 	beq.w	282a <usbdc_cb_ctl_req+0x3fe>
	if (length <= str_desc[0]) {
    2728:	7802      	ldrb	r2, [r0, #0]
    272a:	4294      	cmp	r4, r2
    272c:	d90d      	bls.n	274a <usbdc_cb_ctl_req+0x31e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    272e:	3e01      	subs	r6, #1
    2730:	4226      	tst	r6, r4
    2732:	bf0c      	ite	eq
    2734:	2301      	moveq	r3, #1
    2736:	2300      	movne	r3, #0
		length = str_desc[0];
    2738:	4614      	mov	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    273a:	4622      	mov	r2, r4
    273c:	4628      	mov	r0, r5
    273e:	4c3f      	ldr	r4, [pc, #252]	; (283c <usbdc_cb_ctl_req+0x410>)
    2740:	47a0      	blx	r4
    2742:	fab0 f080 	clz	r0, r0
    2746:	0940      	lsrs	r0, r0, #5
    2748:	e688      	b.n	245c <usbdc_cb_ctl_req+0x30>
		need_zlp = false;
    274a:	2300      	movs	r3, #0
    274c:	e7f5      	b.n	273a <usbdc_cb_ctl_req+0x30e>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    274e:	4939      	ldr	r1, [pc, #228]	; (2834 <usbdc_cb_ctl_req+0x408>)
    2750:	694b      	ldr	r3, [r1, #20]
    2752:	7eca      	ldrb	r2, [r1, #27]
    2754:	701a      	strb	r2, [r3, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2756:	2300      	movs	r3, #0
    2758:	2201      	movs	r2, #1
    275a:	6949      	ldr	r1, [r1, #20]
    275c:	4628      	mov	r0, r5
    275e:	4c37      	ldr	r4, [pc, #220]	; (283c <usbdc_cb_ctl_req+0x410>)
    2760:	47a0      	blx	r4
		return true;
    2762:	2001      	movs	r0, #1
    2764:	e67a      	b.n	245c <usbdc_cb_ctl_req+0x30>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2766:	f003 031f 	and.w	r3, r3, #31
    276a:	2b01      	cmp	r3, #1
    276c:	d903      	bls.n	2776 <usbdc_cb_ctl_req+0x34a>
    276e:	2b02      	cmp	r3, #2
    2770:	d010      	beq.n	2794 <usbdc_cb_ctl_req+0x368>
		return false;
    2772:	2000      	movs	r0, #0
    2774:	e672      	b.n	245c <usbdc_cb_ctl_req+0x30>
		st = 0;
    2776:	2300      	movs	r3, #0
    2778:	9300      	str	r3, [sp, #0]
	memcpy(usbdc.ctrl_buf, &st, 2);
    277a:	492e      	ldr	r1, [pc, #184]	; (2834 <usbdc_cb_ctl_req+0x408>)
    277c:	694b      	ldr	r3, [r1, #20]
    277e:	f8bd 2000 	ldrh.w	r2, [sp]
    2782:	801a      	strh	r2, [r3, #0]
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2784:	2300      	movs	r3, #0
    2786:	2202      	movs	r2, #2
    2788:	6949      	ldr	r1, [r1, #20]
    278a:	4628      	mov	r0, r5
    278c:	4c2b      	ldr	r4, [pc, #172]	; (283c <usbdc_cb_ctl_req+0x410>)
    278e:	47a0      	blx	r4
	return true;
    2790:	2001      	movs	r0, #1
    2792:	e663      	b.n	245c <usbdc_cb_ctl_req+0x30>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2794:	88a0      	ldrh	r0, [r4, #4]
    2796:	2102      	movs	r1, #2
    2798:	b2c0      	uxtb	r0, r0
    279a:	4b2a      	ldr	r3, [pc, #168]	; (2844 <usbdc_cb_ctl_req+0x418>)
    279c:	4798      	blx	r3
		if (st < 0) {
    279e:	2800      	cmp	r0, #0
    27a0:	db03      	blt.n	27aa <usbdc_cb_ctl_req+0x37e>
		st = st & 0x1;
    27a2:	f000 0001 	and.w	r0, r0, #1
    27a6:	9000      	str	r0, [sp, #0]
    27a8:	e7e7      	b.n	277a <usbdc_cb_ctl_req+0x34e>
			return false;
    27aa:	2000      	movs	r0, #0
    27ac:	e656      	b.n	245c <usbdc_cb_ctl_req+0x30>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    27ae:	4b21      	ldr	r3, [pc, #132]	; (2834 <usbdc_cb_ctl_req+0x408>)
    27b0:	7f5b      	ldrb	r3, [r3, #29]
    27b2:	88a2      	ldrh	r2, [r4, #4]
    27b4:	4113      	asrs	r3, r2
    27b6:	f013 0f01 	tst.w	r3, #1
    27ba:	d012      	beq.n	27e2 <usbdc_cb_ctl_req+0x3b6>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    27bc:	4b1d      	ldr	r3, [pc, #116]	; (2834 <usbdc_cb_ctl_req+0x408>)
    27be:	691d      	ldr	r5, [r3, #16]
	return false;
    27c0:	2000      	movs	r0, #0
	while (NULL != func) {
    27c2:	2d00      	cmp	r5, #0
    27c4:	f43f ae4a 	beq.w	245c <usbdc_cb_ctl_req+0x30>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    27c8:	2602      	movs	r6, #2
    27ca:	686b      	ldr	r3, [r5, #4]
    27cc:	4622      	mov	r2, r4
    27ce:	4631      	mov	r1, r6
    27d0:	4628      	mov	r0, r5
    27d2:	4798      	blx	r3
    27d4:	2800      	cmp	r0, #0
    27d6:	da0f      	bge.n	27f8 <usbdc_cb_ctl_req+0x3cc>
			func = func->next;
    27d8:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    27da:	2d00      	cmp	r5, #0
    27dc:	d1f5      	bne.n	27ca <usbdc_cb_ctl_req+0x39e>
	return false;
    27de:	2000      	movs	r0, #0
    27e0:	e63c      	b.n	245c <usbdc_cb_ctl_req+0x30>
		usbdc.ctrl_buf[0] = 0;
    27e2:	4914      	ldr	r1, [pc, #80]	; (2834 <usbdc_cb_ctl_req+0x408>)
    27e4:	694b      	ldr	r3, [r1, #20]
    27e6:	2000      	movs	r0, #0
    27e8:	7018      	strb	r0, [r3, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    27ea:	4603      	mov	r3, r0
    27ec:	2201      	movs	r2, #1
    27ee:	6949      	ldr	r1, [r1, #20]
    27f0:	4c12      	ldr	r4, [pc, #72]	; (283c <usbdc_cb_ctl_req+0x410>)
    27f2:	47a0      	blx	r4
		return true;
    27f4:	2001      	movs	r0, #1
    27f6:	e631      	b.n	245c <usbdc_cb_ctl_req+0x30>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    27f8:	490e      	ldr	r1, [pc, #56]	; (2834 <usbdc_cb_ctl_req+0x408>)
    27fa:	694b      	ldr	r3, [r1, #20]
    27fc:	7018      	strb	r0, [r3, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    27fe:	2300      	movs	r3, #0
    2800:	2201      	movs	r2, #1
    2802:	6949      	ldr	r1, [r1, #20]
    2804:	4618      	mov	r0, r3
    2806:	4c0d      	ldr	r4, [pc, #52]	; (283c <usbdc_cb_ctl_req+0x410>)
    2808:	47a0      	blx	r4
			return true;
    280a:	2001      	movs	r0, #1
    280c:	e626      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return true;
    280e:	2001      	movs	r0, #1
    2810:	e624      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    2812:	2000      	movs	r0, #0
    2814:	e622      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    2816:	2000      	movs	r0, #0
    2818:	e620      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    281a:	2000      	movs	r0, #0
    281c:	e61e      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    281e:	2000      	movs	r0, #0
    2820:	e61c      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    2822:	2000      	movs	r0, #0
    2824:	e61a      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    2826:	2000      	movs	r0, #0
    2828:	e618      	b.n	245c <usbdc_cb_ctl_req+0x30>
		return false;
    282a:	2000      	movs	r0, #0
    282c:	e616      	b.n	245c <usbdc_cb_ctl_req+0x30>
			return false;
    282e:	2000      	movs	r0, #0
    2830:	e614      	b.n	245c <usbdc_cb_ctl_req+0x30>
    2832:	bf00      	nop
    2834:	20000598 	.word	0x20000598
    2838:	000029d1 	.word	0x000029d1
    283c:	0000240d 	.word	0x0000240d
    2840:	00002a39 	.word	0x00002a39
    2844:	00000965 	.word	0x00000965

00002848 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2848:	b508      	push	{r3, lr}
	switch (type) {
    284a:	2801      	cmp	r0, #1
    284c:	d007      	beq.n	285e <usbdc_register_handler+0x16>
    284e:	b110      	cbz	r0, 2856 <usbdc_register_handler+0xe>
    2850:	2802      	cmp	r0, #2
    2852:	d008      	beq.n	2866 <usbdc_register_handler+0x1e>
    2854:	bd08      	pop	{r3, pc}
	case USBDC_HDL_SOF:
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2856:	4806      	ldr	r0, [pc, #24]	; (2870 <usbdc_register_handler+0x28>)
    2858:	4b06      	ldr	r3, [pc, #24]	; (2874 <usbdc_register_handler+0x2c>)
    285a:	4798      	blx	r3
		break;
    285c:	bd08      	pop	{r3, pc}
	case USBDC_HDL_REQ:
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    285e:	4806      	ldr	r0, [pc, #24]	; (2878 <usbdc_register_handler+0x30>)
    2860:	4b04      	ldr	r3, [pc, #16]	; (2874 <usbdc_register_handler+0x2c>)
    2862:	4798      	blx	r3
		break;
    2864:	bd08      	pop	{r3, pc}
	case USBDC_HDL_CHANGE:
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2866:	4805      	ldr	r0, [pc, #20]	; (287c <usbdc_register_handler+0x34>)
    2868:	4b02      	ldr	r3, [pc, #8]	; (2874 <usbdc_register_handler+0x2c>)
    286a:	4798      	blx	r3
    286c:	bd08      	pop	{r3, pc}
    286e:	bf00      	nop
    2870:	2000059c 	.word	0x2000059c
    2874:	00000a41 	.word	0x00000a41
    2878:	200005a0 	.word	0x200005a0
    287c:	200005a4 	.word	0x200005a4

00002880 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2880:	b538      	push	{r3, r4, r5, lr}
	ASSERT(ctrl_buf);
    2882:	4605      	mov	r5, r0
    2884:	f240 3255 	movw	r2, #853	; 0x355
    2888:	490c      	ldr	r1, [pc, #48]	; (28bc <usbdc_init+0x3c>)
    288a:	3000      	adds	r0, #0
    288c:	bf18      	it	ne
    288e:	2001      	movne	r0, #1
    2890:	4b0b      	ldr	r3, [pc, #44]	; (28c0 <usbdc_init+0x40>)
    2892:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2894:	4b0b      	ldr	r3, [pc, #44]	; (28c4 <usbdc_init+0x44>)
    2896:	4798      	blx	r3
	if (rc < 0) {
    2898:	2800      	cmp	r0, #0
    289a:	db0e      	blt.n	28ba <usbdc_init+0x3a>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    289c:	4c0a      	ldr	r4, [pc, #40]	; (28c8 <usbdc_init+0x48>)
    289e:	2220      	movs	r2, #32
    28a0:	2100      	movs	r1, #0
    28a2:	4620      	mov	r0, r4
    28a4:	4b09      	ldr	r3, [pc, #36]	; (28cc <usbdc_init+0x4c>)
    28a6:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    28a8:	6165      	str	r5, [r4, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    28aa:	4909      	ldr	r1, [pc, #36]	; (28d0 <usbdc_init+0x50>)
    28ac:	2000      	movs	r0, #0
    28ae:	4c09      	ldr	r4, [pc, #36]	; (28d4 <usbdc_init+0x54>)
    28b0:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    28b2:	4909      	ldr	r1, [pc, #36]	; (28d8 <usbdc_init+0x58>)
    28b4:	2001      	movs	r0, #1
    28b6:	47a0      	blx	r4

	return 0;
    28b8:	2000      	movs	r0, #0
}
    28ba:	bd38      	pop	{r3, r4, r5, pc}
    28bc:	00002c18 	.word	0x00002c18
    28c0:	00000a19 	.word	0x00000a19
    28c4:	000006cd 	.word	0x000006cd
    28c8:	20000598 	.word	0x20000598
    28cc:	00002bc3 	.word	0x00002bc3
    28d0:	00002301 	.word	0x00002301
    28d4:	00000735 	.word	0x00000735
    28d8:	000023ed 	.word	0x000023ed

000028dc <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    28dc:	b508      	push	{r3, lr}
	list_insert_at_end(&usbdc.func_list, func);
    28de:	4601      	mov	r1, r0
    28e0:	4801      	ldr	r0, [pc, #4]	; (28e8 <usbdc_register_function+0xc>)
    28e2:	4b02      	ldr	r3, [pc, #8]	; (28ec <usbdc_register_function+0x10>)
    28e4:	4798      	blx	r3
    28e6:	bd08      	pop	{r3, pc}
    28e8:	200005a8 	.word	0x200005a8
    28ec:	00000a41 	.word	0x00000a41

000028f0 <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    28f0:	b508      	push	{r3, lr}
	if (usbdc.state >= USBD_S_POWER) {
    28f2:	4b0a      	ldr	r3, [pc, #40]	; (291c <usbdc_start+0x2c>)
    28f4:	7e9b      	ldrb	r3, [r3, #26]
    28f6:	b95b      	cbnz	r3, 2910 <usbdc_start+0x20>
		return ERR_BUSY;
	}

	if (desces) {
    28f8:	b168      	cbz	r0, 2916 <usbdc_start+0x26>
		usbdc.desces.ls_fs = desces;
    28fa:	4b08      	ldr	r3, [pc, #32]	; (291c <usbdc_start+0x2c>)
    28fc:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    28fe:	6802      	ldr	r2, [r0, #0]
    2900:	79d2      	ldrb	r2, [r2, #7]
    2902:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    2904:	2201      	movs	r2, #1
    2906:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    2908:	4b05      	ldr	r3, [pc, #20]	; (2920 <usbdc_start+0x30>)
    290a:	4798      	blx	r3
	return ERR_NONE;
    290c:	2000      	movs	r0, #0
    290e:	bd08      	pop	{r3, pc}
		return ERR_BUSY;
    2910:	f06f 0003 	mvn.w	r0, #3
    2914:	bd08      	pop	{r3, pc}
		return ERR_BAD_DATA;
    2916:	f06f 0008 	mvn.w	r0, #8
}
    291a:	bd08      	pop	{r3, pc}
    291c:	20000598 	.word	0x20000598
    2920:	00000741 	.word	0x00000741

00002924 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2924:	b508      	push	{r3, lr}
	usb_d_attach();
    2926:	4b01      	ldr	r3, [pc, #4]	; (292c <usbdc_attach+0x8>)
    2928:	4798      	blx	r3
    292a:	bd08      	pop	{r3, pc}
    292c:	0000074d 	.word	0x0000074d

00002930 <usbdc_get_ctrl_buffer>:
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
}
    2930:	4b01      	ldr	r3, [pc, #4]	; (2938 <usbdc_get_ctrl_buffer+0x8>)
    2932:	6958      	ldr	r0, [r3, #20]
    2934:	4770      	bx	lr
    2936:	bf00      	nop
    2938:	20000598 	.word	0x20000598

0000293c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    293c:	4b03      	ldr	r3, [pc, #12]	; (294c <usbdc_get_state+0x10>)
    293e:	7e98      	ldrb	r0, [r3, #26]
    2940:	f000 0310 	and.w	r3, r0, #16
		return USBD_S_SUSPEND;
    2944:	2b00      	cmp	r3, #0
	}
	return usbdc.state;
}
    2946:	bf18      	it	ne
    2948:	2010      	movne	r0, #16
    294a:	4770      	bx	lr
    294c:	20000598 	.word	0x20000598

00002950 <usb_find_desc>:

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2950:	4288      	cmp	r0, r1
    2952:	d214      	bcs.n	297e <usb_find_desc+0x2e>
	return desc[0];
    2954:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2956:	2b01      	cmp	r3, #1
    2958:	d913      	bls.n	2982 <usb_find_desc+0x32>
{
    295a:	b410      	push	{r4}
		if (type == usb_desc_type(desc)) {
    295c:	7844      	ldrb	r4, [r0, #1]
    295e:	4294      	cmp	r4, r2
    2960:	d00a      	beq.n	2978 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    2962:	4418      	add	r0, r3
	while (desc < eof) {
    2964:	4281      	cmp	r1, r0
    2966:	d906      	bls.n	2976 <usb_find_desc+0x26>
	return desc[0];
    2968:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    296a:	2b01      	cmp	r3, #1
    296c:	d90b      	bls.n	2986 <usb_find_desc+0x36>
	return desc[1];
    296e:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2970:	4294      	cmp	r4, r2
    2972:	d1f6      	bne.n	2962 <usb_find_desc+0x12>
    2974:	e000      	b.n	2978 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2976:	2000      	movs	r0, #0
}
    2978:	f85d 4b04 	ldr.w	r4, [sp], #4
    297c:	4770      	bx	lr
	return NULL;
    297e:	2000      	movs	r0, #0
    2980:	4770      	bx	lr
		_desc_len_check();
    2982:	2000      	movs	r0, #0
    2984:	4770      	bx	lr
    2986:	2000      	movs	r0, #0
    2988:	e7f6      	b.n	2978 <usb_find_desc+0x28>

0000298a <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    298a:	4288      	cmp	r0, r1
    298c:	d216      	bcs.n	29bc <usb_find_ep_desc+0x32>
	return desc[0];
    298e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2990:	2b01      	cmp	r3, #1
    2992:	d915      	bls.n	29c0 <usb_find_ep_desc+0x36>
	return desc[1];
    2994:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2996:	2a04      	cmp	r2, #4
    2998:	d014      	beq.n	29c4 <usb_find_ep_desc+0x3a>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    299a:	2a05      	cmp	r2, #5
    299c:	d00b      	beq.n	29b6 <usb_find_ep_desc+0x2c>
	return (desc + usb_desc_len(desc));
    299e:	4418      	add	r0, r3
	while (desc < eof) {
    29a0:	4281      	cmp	r1, r0
    29a2:	d909      	bls.n	29b8 <usb_find_ep_desc+0x2e>
	return desc[0];
    29a4:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    29a6:	2b01      	cmp	r3, #1
    29a8:	d90e      	bls.n	29c8 <usb_find_ep_desc+0x3e>
	return desc[1];
    29aa:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    29ac:	2a04      	cmp	r2, #4
    29ae:	d00d      	beq.n	29cc <usb_find_ep_desc+0x42>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    29b0:	2a05      	cmp	r2, #5
    29b2:	d1f4      	bne.n	299e <usb_find_ep_desc+0x14>
    29b4:	e00b      	b.n	29ce <usb_find_ep_desc+0x44>
    29b6:	4770      	bx	lr
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    29b8:	2000      	movs	r0, #0
    29ba:	4770      	bx	lr
    29bc:	2000      	movs	r0, #0
    29be:	4770      	bx	lr
		_desc_len_check();
    29c0:	2000      	movs	r0, #0
    29c2:	4770      	bx	lr
	return NULL;
    29c4:	2000      	movs	r0, #0
    29c6:	4770      	bx	lr
		_desc_len_check();
    29c8:	2000      	movs	r0, #0
    29ca:	4770      	bx	lr
	return NULL;
    29cc:	2000      	movs	r0, #0
}
    29ce:	4770      	bx	lr

000029d0 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    29d0:	b538      	push	{r3, r4, r5, lr}
    29d2:	460c      	mov	r4, r1
    29d4:	4615      	mov	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    29d6:	2202      	movs	r2, #2
    29d8:	4b16      	ldr	r3, [pc, #88]	; (2a34 <usb_find_cfg_desc+0x64>)
    29da:	4798      	blx	r3
	if (!desc) {
    29dc:	4603      	mov	r3, r0
    29de:	b1e8      	cbz	r0, 2a1c <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    29e0:	4284      	cmp	r4, r0
    29e2:	d91d      	bls.n	2a20 <usb_find_cfg_desc+0x50>
		_desc_len_check();
    29e4:	7802      	ldrb	r2, [r0, #0]
    29e6:	2a01      	cmp	r2, #1
    29e8:	d91c      	bls.n	2a24 <usb_find_cfg_desc+0x54>
		if (desc[1] != USB_DT_CONFIG) {
    29ea:	7842      	ldrb	r2, [r0, #1]
    29ec:	2a02      	cmp	r2, #2
    29ee:	d11b      	bne.n	2a28 <usb_find_cfg_desc+0x58>
			break;
		}
		if (desc[5] == cfg_value) {
    29f0:	7942      	ldrb	r2, [r0, #5]
    29f2:	42aa      	cmp	r2, r5
    29f4:	d012      	beq.n	2a1c <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    29f6:	78d9      	ldrb	r1, [r3, #3]
    29f8:	789a      	ldrb	r2, [r3, #2]
    29fa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    29fe:	fa13 f382 	uxtah	r3, r3, r2
	while (desc < eof) {
    2a02:	429c      	cmp	r4, r3
    2a04:	d909      	bls.n	2a1a <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    2a06:	781a      	ldrb	r2, [r3, #0]
    2a08:	2a01      	cmp	r2, #1
    2a0a:	d90f      	bls.n	2a2c <usb_find_cfg_desc+0x5c>
		if (desc[1] != USB_DT_CONFIG) {
    2a0c:	785a      	ldrb	r2, [r3, #1]
    2a0e:	2a02      	cmp	r2, #2
    2a10:	d10e      	bne.n	2a30 <usb_find_cfg_desc+0x60>
		if (desc[5] == cfg_value) {
    2a12:	795a      	ldrb	r2, [r3, #5]
    2a14:	42aa      	cmp	r2, r5
    2a16:	d1ee      	bne.n	29f6 <usb_find_cfg_desc+0x26>
    2a18:	e000      	b.n	2a1c <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2a1a:	2300      	movs	r3, #0
}
    2a1c:	4618      	mov	r0, r3
    2a1e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
    2a20:	2300      	movs	r3, #0
    2a22:	e7fb      	b.n	2a1c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2a24:	2300      	movs	r3, #0
    2a26:	e7f9      	b.n	2a1c <usb_find_cfg_desc+0x4c>
	return NULL;
    2a28:	2300      	movs	r3, #0
    2a2a:	e7f7      	b.n	2a1c <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2a2c:	2300      	movs	r3, #0
    2a2e:	e7f5      	b.n	2a1c <usb_find_cfg_desc+0x4c>
	return NULL;
    2a30:	2300      	movs	r3, #0
    2a32:	e7f3      	b.n	2a1c <usb_find_cfg_desc+0x4c>
    2a34:	00002951 	.word	0x00002951

00002a38 <usb_find_str_desc>:
{
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2a38:	4288      	cmp	r0, r1
    2a3a:	d217      	bcs.n	2a6c <usb_find_str_desc+0x34>
{
    2a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a40:	460d      	mov	r5, r1
    2a42:	4616      	mov	r6, r2
	for (i = 0; desc < eof;) {
    2a44:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    2a46:	f04f 0803 	mov.w	r8, #3
    2a4a:	4f0c      	ldr	r7, [pc, #48]	; (2a7c <usb_find_str_desc+0x44>)
    2a4c:	4642      	mov	r2, r8
    2a4e:	4629      	mov	r1, r5
    2a50:	47b8      	blx	r7
		if (desc) {
    2a52:	4603      	mov	r3, r0
    2a54:	b170      	cbz	r0, 2a74 <usb_find_str_desc+0x3c>
	return desc[0];
    2a56:	7800      	ldrb	r0, [r0, #0]
			_desc_len_check();
    2a58:	2801      	cmp	r0, #1
    2a5a:	d90a      	bls.n	2a72 <usb_find_str_desc+0x3a>
			if (i == str_index) {
    2a5c:	42a6      	cmp	r6, r4
    2a5e:	d009      	beq.n	2a74 <usb_find_str_desc+0x3c>
	return (desc + usb_desc_len(desc));
    2a60:	4418      	add	r0, r3
    2a62:	3401      	adds	r4, #1
	for (i = 0; desc < eof;) {
    2a64:	4285      	cmp	r5, r0
    2a66:	d8f1      	bhi.n	2a4c <usb_find_str_desc+0x14>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    2a68:	2300      	movs	r3, #0
    2a6a:	e003      	b.n	2a74 <usb_find_str_desc+0x3c>
    2a6c:	2300      	movs	r3, #0
}
    2a6e:	4618      	mov	r0, r3
    2a70:	4770      	bx	lr
			_desc_len_check();
    2a72:	2300      	movs	r3, #0
}
    2a74:	4618      	mov	r0, r3
    2a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a7a:	bf00      	nop
    2a7c:	00002951 	.word	0x00002951

00002a80 <main>:

#include "atmel_start.h"
#include "atmel_start_pins.h"

int main(void)
{
    2a80:	b508      	push	{r3, lr}
	atmel_start_init();
    2a82:	4b03      	ldr	r3, [pc, #12]	; (2a90 <main+0x10>)
    2a84:	4798      	blx	r3
	cdcd_acm_example();
    2a86:	4b03      	ldr	r3, [pc, #12]	; (2a94 <main+0x14>)
    2a88:	4798      	blx	r3
}
    2a8a:	2000      	movs	r0, #0
    2a8c:	bd08      	pop	{r3, pc}
    2a8e:	bf00      	nop
    2a90:	000002d1 	.word	0x000002d1
    2a94:	00002b39 	.word	0x00002b39

00002a98 <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    2a98:	b510      	push	{r4, lr}
    2a9a:	b082      	sub	sp, #8
    2a9c:	f8ad 0004 	strh.w	r0, [sp, #4]
	if (state.rs232.DTR) {
    2aa0:	f010 0f01 	tst.w	r0, #1
    2aa4:	d102      	bne.n	2aac <usb_device_cb_state_c+0x14>
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	}

	/* No error. */
	return false;
}
    2aa6:	2000      	movs	r0, #0
    2aa8:	b002      	add	sp, #8
    2aaa:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    2aac:	4905      	ldr	r1, [pc, #20]	; (2ac4 <usb_device_cb_state_c+0x2c>)
    2aae:	2000      	movs	r0, #0
    2ab0:	4c05      	ldr	r4, [pc, #20]	; (2ac8 <usb_device_cb_state_c+0x30>)
    2ab2:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    2ab4:	4905      	ldr	r1, [pc, #20]	; (2acc <usb_device_cb_state_c+0x34>)
    2ab6:	2001      	movs	r0, #1
    2ab8:	47a0      	blx	r4
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    2aba:	2140      	movs	r1, #64	; 0x40
    2abc:	4804      	ldr	r0, [pc, #16]	; (2ad0 <usb_device_cb_state_c+0x38>)
    2abe:	4b05      	ldr	r3, [pc, #20]	; (2ad4 <usb_device_cb_state_c+0x3c>)
    2ac0:	4798      	blx	r3
    2ac2:	e7f0      	b.n	2aa6 <usb_device_cb_state_c+0xe>
    2ac4:	00002af1 	.word	0x00002af1
    2ac8:	0000221d 	.word	0x0000221d
    2acc:	00002ad9 	.word	0x00002ad9
    2ad0:	200005b8 	.word	0x200005b8
    2ad4:	000021cd 	.word	0x000021cd

00002ad8 <usb_device_cb_bulk_in>:
{
    2ad8:	b508      	push	{r3, lr}
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    2ada:	2140      	movs	r1, #64	; 0x40
    2adc:	4802      	ldr	r0, [pc, #8]	; (2ae8 <usb_device_cb_bulk_in+0x10>)
    2ade:	4b03      	ldr	r3, [pc, #12]	; (2aec <usb_device_cb_bulk_in+0x14>)
    2ae0:	4798      	blx	r3
}
    2ae2:	2000      	movs	r0, #0
    2ae4:	bd08      	pop	{r3, pc}
    2ae6:	bf00      	nop
    2ae8:	200005b8 	.word	0x200005b8
    2aec:	000021cd 	.word	0x000021cd

00002af0 <usb_device_cb_bulk_out>:
{
    2af0:	b508      	push	{r3, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    2af2:	4611      	mov	r1, r2
    2af4:	4802      	ldr	r0, [pc, #8]	; (2b00 <usb_device_cb_bulk_out+0x10>)
    2af6:	4b03      	ldr	r3, [pc, #12]	; (2b04 <usb_device_cb_bulk_out+0x14>)
    2af8:	4798      	blx	r3
}
    2afa:	2000      	movs	r0, #0
    2afc:	bd08      	pop	{r3, pc}
    2afe:	bf00      	nop
    2b00:	200005b8 	.word	0x200005b8
    2b04:	000021f5 	.word	0x000021f5

00002b08 <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    2b08:	b508      	push	{r3, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2b0a:	4805      	ldr	r0, [pc, #20]	; (2b20 <cdc_device_acm_init+0x18>)
    2b0c:	4b05      	ldr	r3, [pc, #20]	; (2b24 <cdc_device_acm_init+0x1c>)
    2b0e:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    2b10:	4b05      	ldr	r3, [pc, #20]	; (2b28 <cdc_device_acm_init+0x20>)
    2b12:	4798      	blx	r3

	usbdc_start(single_desc);
    2b14:	4805      	ldr	r0, [pc, #20]	; (2b2c <cdc_device_acm_init+0x24>)
    2b16:	4b06      	ldr	r3, [pc, #24]	; (2b30 <cdc_device_acm_init+0x28>)
    2b18:	4798      	blx	r3
	usbdc_attach();
    2b1a:	4b06      	ldr	r3, [pc, #24]	; (2b34 <cdc_device_acm_init+0x2c>)
    2b1c:	4798      	blx	r3
    2b1e:	bd08      	pop	{r3, pc}
    2b20:	200005f8 	.word	0x200005f8
    2b24:	00002881 	.word	0x00002881
    2b28:	00002189 	.word	0x00002189
    2b2c:	20000008 	.word	0x20000008
    2b30:	000028f1 	.word	0x000028f1
    2b34:	00002925 	.word	0x00002925

00002b38 <cdcd_acm_example>:
 * The application will behave as a virtual COM.
 * - Open a HyperTerminal or other COM tools in PC side.
 * - Send out a character or string and it will echo the content received.
 */
void cdcd_acm_example(void)
{
    2b38:	b508      	push	{r3, lr}
	while (!cdcdf_acm_is_enabled()) {
    2b3a:	4c04      	ldr	r4, [pc, #16]	; (2b4c <cdcd_acm_example+0x14>)
    2b3c:	47a0      	blx	r4
    2b3e:	2800      	cmp	r0, #0
    2b40:	d0fc      	beq.n	2b3c <cdcd_acm_example+0x4>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    2b42:	4903      	ldr	r1, [pc, #12]	; (2b50 <cdcd_acm_example+0x18>)
    2b44:	2003      	movs	r0, #3
    2b46:	4b03      	ldr	r3, [pc, #12]	; (2b54 <cdcd_acm_example+0x1c>)
    2b48:	4798      	blx	r3
    2b4a:	e7fe      	b.n	2b4a <cdcd_acm_example+0x12>
    2b4c:	00002269 	.word	0x00002269
    2b50:	00002a99 	.word	0x00002a99
    2b54:	0000221d 	.word	0x0000221d

00002b58 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2b58:	b508      	push	{r3, lr}

	cdc_device_acm_init();
    2b5a:	4b01      	ldr	r3, [pc, #4]	; (2b60 <usb_init+0x8>)
    2b5c:	4798      	blx	r3
    2b5e:	bd08      	pop	{r3, pc}
    2b60:	00002b09 	.word	0x00002b09

00002b64 <__libc_init_array>:
    2b64:	b570      	push	{r4, r5, r6, lr}
    2b66:	4e0d      	ldr	r6, [pc, #52]	; (2b9c <__libc_init_array+0x38>)
    2b68:	4c0d      	ldr	r4, [pc, #52]	; (2ba0 <__libc_init_array+0x3c>)
    2b6a:	1ba4      	subs	r4, r4, r6
    2b6c:	10a4      	asrs	r4, r4, #2
    2b6e:	2500      	movs	r5, #0
    2b70:	42a5      	cmp	r5, r4
    2b72:	d109      	bne.n	2b88 <__libc_init_array+0x24>
    2b74:	4e0b      	ldr	r6, [pc, #44]	; (2ba4 <__libc_init_array+0x40>)
    2b76:	4c0c      	ldr	r4, [pc, #48]	; (2ba8 <__libc_init_array+0x44>)
    2b78:	f000 f85a 	bl	2c30 <_init>
    2b7c:	1ba4      	subs	r4, r4, r6
    2b7e:	10a4      	asrs	r4, r4, #2
    2b80:	2500      	movs	r5, #0
    2b82:	42a5      	cmp	r5, r4
    2b84:	d105      	bne.n	2b92 <__libc_init_array+0x2e>
    2b86:	bd70      	pop	{r4, r5, r6, pc}
    2b88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2b8c:	4798      	blx	r3
    2b8e:	3501      	adds	r5, #1
    2b90:	e7ee      	b.n	2b70 <__libc_init_array+0xc>
    2b92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2b96:	4798      	blx	r3
    2b98:	3501      	adds	r5, #1
    2b9a:	e7f2      	b.n	2b82 <__libc_init_array+0x1e>
    2b9c:	00002c3c 	.word	0x00002c3c
    2ba0:	00002c3c 	.word	0x00002c3c
    2ba4:	00002c3c 	.word	0x00002c3c
    2ba8:	00002c40 	.word	0x00002c40

00002bac <memcpy>:
    2bac:	b510      	push	{r4, lr}
    2bae:	1e43      	subs	r3, r0, #1
    2bb0:	440a      	add	r2, r1
    2bb2:	4291      	cmp	r1, r2
    2bb4:	d100      	bne.n	2bb8 <memcpy+0xc>
    2bb6:	bd10      	pop	{r4, pc}
    2bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
    2bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
    2bc0:	e7f7      	b.n	2bb2 <memcpy+0x6>

00002bc2 <memset>:
    2bc2:	4402      	add	r2, r0
    2bc4:	4603      	mov	r3, r0
    2bc6:	4293      	cmp	r3, r2
    2bc8:	d100      	bne.n	2bcc <memset+0xa>
    2bca:	4770      	bx	lr
    2bcc:	f803 1b01 	strb.w	r1, [r3], #1
    2bd0:	e7f9      	b.n	2bc6 <memset+0x4>
    2bd2:	0000      	movs	r0, r0
    2bd4:	682f2e2e 	.word	0x682f2e2e
    2bd8:	752f6c61 	.word	0x752f6c61
    2bdc:	736c6974 	.word	0x736c6974
    2be0:	6372732f 	.word	0x6372732f
    2be4:	6974752f 	.word	0x6974752f
    2be8:	6c5f736c 	.word	0x6c5f736c
    2bec:	2e747369 	.word	0x2e747369
    2bf0:	00000063 	.word	0x00000063

00002bf4 <_usb_ep_cfgs>:
    2bf4:	20000534 00000000 00000040 200004f4     4.. ....@...... 
    2c04:	00000000 00000040 200004b4 00000000     ....@...... ....
    2c14:	00000040 752f2e2e 642f6273 63697665     @...../usb/devic
    2c24:	73752f65 2e636462 00000063              e/usbdc.c...

00002c30 <_init>:
    2c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c32:	bf00      	nop
    2c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c36:	bc08      	pop	{r3}
    2c38:	469e      	mov	lr, r3
    2c3a:	4770      	bx	lr

00002c3c <__init_array_start>:
    2c3c:	00000289 	.word	0x00000289

00002c40 <_fini>:
    2c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c42:	bf00      	nop
    2c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c46:	bc08      	pop	{r3}
    2c48:	469e      	mov	lr, r3
    2c4a:	4770      	bx	lr

00002c4c <__fini_array_start>:
    2c4c:	00000265 	.word	0x00000265
